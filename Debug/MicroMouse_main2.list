
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000efcc  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000006e8  08016fd0  08016fd0  00026fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080176b8  080176b8  000301fc  2**0
                  CONTENTS
  6 .ARM          00000008  080176b8  080176b8  000276b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  080176c0  080176c0  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080176c0  080176c0  000276c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  080176c4  080176c4  000276c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001fc  20000000  080176c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004c54  200001fc  080178c4  000301fc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20004e50  080178c4  00034e50  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00035813  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006fc8  00000000  00000000  00065a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00014ce1  00000000  00000000  0006ca07  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001478  00000000  00000000  000816e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00004080  00000000  00000000  00082b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00027e98  00000000  00000000  00086be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0001bbe7  00000000  00000000  000aea78  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000cab58  00000000  00000000  000ca65f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  001951b7  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005f30  00000000  00000000  00195234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001fc 	.word	0x200001fc
 800801c:	00000000 	.word	0x00000000
 8008020:	08016fb4 	.word	0x08016fb4

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000200 	.word	0x20000200
 800803c:	08016fb4 	.word	0x08016fb4

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <Accel.constprop.5>:
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
//
void Accel(float add_distance, float explore_speed)
 8008df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
//	Pos.Act = accel;
//	ControlWall();
	TargetAngularV = 0;
	float additional_speed=0;
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8008dfc:	4b42      	ldr	r3, [pc, #264]	; (8008f08 <Accel.constprop.5+0x110>)
	//printf("%f,%f,%f\r\n",additional_speed,explore_speed,CurrentVelocity[BODY]);
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8008dfe:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8008f0c <Accel.constprop.5+0x114>
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8008e02:	edd3 7a02 	vldr	s15, [r3, #8]
	TargetAngularV = 0;
 8008e06:	4b42      	ldr	r3, [pc, #264]	; (8008f10 <Accel.constprop.5+0x118>)
 8008e08:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8008f24 <Accel.constprop.5+0x12c>
 8008e0c:	f8df a118 	ldr.w	sl, [pc, #280]	; 8008f28 <Accel.constprop.5+0x130>
 8008e10:	f8d8 4008 	ldr.w	r4, [r8, #8]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8008e14:	ee30 0a67 	vsub.f32	s0, s0, s15
	TargetAngularV = 0;
 8008e18:	2200      	movs	r2, #0
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8008e1a:	ee20 0a00 	vmul.f32	s0, s0, s0
void Accel(float add_distance, float explore_speed)
 8008e1e:	ed2d 8b02 	vpush	{d8}
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8008e22:	ee20 0a07 	vmul.f32	s0, s0, s14
	TargetAngularV = 0;
 8008e26:	601a      	str	r2, [r3, #0]
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8008e28:	4b3a      	ldr	r3, [pc, #232]	; (8008f14 <Accel.constprop.5+0x11c>)
			updateRealSearch();
			//UpdateWalkMap();
			//次のアクションを渡すのは別のところで。
			Calc = 1;
		}
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 8008e2a:	ed9f 8a3b 	vldr	s16, [pc, #236]	; 8008f18 <Accel.constprop.5+0x120>
		{
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8008e2e:	eddf 8a3b 	vldr	s17, [pc, #236]	; 8008f1c <Accel.constprop.5+0x124>
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8008e32:	ed83 0a00 	vstr	s0, [r3]
	_Bool wall_cut = false;
 8008e36:	f04f 0b00 	mov.w	fp, #0
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8008e3a:	f8da 5008 	ldr.w	r5, [sl, #8]
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8008e3e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8008f2c <Accel.constprop.5+0x134>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8008e42:	f504 33ad 	add.w	r3, r4, #88576	; 0x15a00
 8008e46:	f203 1393 	addw	r3, r3, #403	; 0x193
 8008e4a:	429d      	cmp	r5, r3
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8008e4c:	4620      	mov	r0, r4
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8008e4e:	da39      	bge.n	8008ec4 <Accel.constprop.5+0xcc>
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8008e50:	f7ff faa0 	bl	8008394 <__aeabi_i2d>
 8008e54:	a32a      	add	r3, pc, #168	; (adr r3, 8008f00 <Accel.constprop.5+0x108>)
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	f7ff f94f 	bl	80080fc <__adddf3>
 8008e5e:	4606      	mov	r6, r0
 8008e60:	4628      	mov	r0, r5
 8008e62:	460f      	mov	r7, r1
 8008e64:	f7ff fa96 	bl	8008394 <__aeabi_i2d>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	4639      	mov	r1, r7
 8008e70:	f7ff fd6c 	bl	800894c <__aeabi_dcmplt>
 8008e74:	b110      	cbz	r0, 8008e7c <Accel.constprop.5+0x84>
 8008e76:	f8d9 3000 	ldr.w	r3, [r9]
 8008e7a:	b3cb      	cbz	r3, 8008ef0 <Accel.constprop.5+0xf8>
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 8008e7c:	4b28      	ldr	r3, [pc, #160]	; (8008f20 <Accel.constprop.5+0x128>)
 8008e7e:	f1bb 0f00 	cmp.w	fp, #0
 8008e82:	d1da      	bne.n	8008e3a <Accel.constprop.5+0x42>
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8008e84:	ee07 4a90 	vmov	s15, r4
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 8008e88:	ed93 7a02 	vldr	s14, [r3, #8]
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8008e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 8008e90:	eeb4 7ac8 	vcmpe.f32	s14, s16
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8008e94:	ee77 7aa8 	vadd.f32	s15, s15, s17
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 8008e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8008e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 8008ea0:	d406      	bmi.n	8008eb0 <Accel.constprop.5+0xb8>
 8008ea2:	ed93 7a01 	vldr	s14, [r3, #4]
 8008ea6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8008eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eae:	d5c4      	bpl.n	8008e3a <Accel.constprop.5+0x42>
			//target_pulse = TotalPulse[BODY] -KeepPulse[BODY] + Wall_Cut_Val;
			wall_cut = true;
			ChangeLED(3);
 8008eb0:	2003      	movs	r0, #3
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8008eb2:	edca 7a02 	vstr	s15, [sl, #8]
			wall_cut = true;
 8008eb6:	f04f 0b01 	mov.w	fp, #1
			ChangeLED(3);
 8008eba:	f005 f9e7 	bl	800e28c <ChangeLED>
 8008ebe:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ec2:	e7ba      	b.n	8008e3a <Accel.constprop.5+0x42>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 8008ec4:	4a13      	ldr	r2, [pc, #76]	; (8008f14 <Accel.constprop.5+0x11c>)
 8008ec6:	2300      	movs	r3, #0
	//壁読んで、
	wall_cut = false;
	ChangeLED(0);
 8008ec8:	2000      	movs	r0, #0
	Acceleration = 0;
 8008eca:	6013      	str	r3, [r2, #0]
	ChangeLED(0);
 8008ecc:	f005 f9de 	bl	800e28c <ChangeLED>
	KeepPulse[BODY] += target_pulse;
	KeepPulse[LEFT] += target_pulse/2;
	KeepPulse[RIGHT] += target_pulse/2;
 8008ed0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 8008ed4:	ecbd 8b02 	vpop	{d8}
	KeepPulse[LEFT] += target_pulse/2;
 8008ed8:	f64a 50c9 	movw	r0, #44489	; 0xadc9
	KeepPulse[BODY] += target_pulse;
 8008edc:	f503 33ad 	add.w	r3, r3, #88576	; 0x15a00
 8008ee0:	f203 1393 	addw	r3, r3, #403	; 0x193
	KeepPulse[LEFT] += target_pulse/2;
 8008ee4:	4401      	add	r1, r0
	KeepPulse[RIGHT] += target_pulse/2;
 8008ee6:	4402      	add	r2, r0
 8008ee8:	e888 000e 	stmia.w	r8, {r1, r2, r3}
}
 8008eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			updateRealSearch();
 8008ef0:	f004 fdc6 	bl	800da80 <updateRealSearch>
			Calc = 1;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008efa:	f8c9 3000 	str.w	r3, [r9]
 8008efe:	e7bd      	b.n	8008e7c <Accel.constprop.5+0x84>
 8008f00:	33333333 	.word	0x33333333
 8008f04:	40f160f3 	.word	0x40f160f3
 8008f08:	200048d8 	.word	0x200048d8
 8008f0c:	373a69dd 	.word	0x373a69dd
 8008f10:	200048a8 	.word	0x200048a8
 8008f14:	20000224 	.word	0x20000224
 8008f18:	42480000 	.word	0x42480000
 8008f1c:	465842f0 	.word	0x465842f0
 8008f20:	2000490c 	.word	0x2000490c
 8008f24:	20004900 	.word	0x20004900
 8008f28:	200048cc 	.word	0x200048cc
 8008f2c:	20004b3c 	.word	0x20004b3c

08008f30 <Decel.constprop.8>:
void Decel(float dec_distance, float end_speed)
 8008f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
//	Pos.Act = decel;
	float down_speed=0;
	down_speed = CurrentVelocity[BODY] - end_speed;
 8008f34:	4c4a      	ldr	r4, [pc, #296]	; (8009060 <Decel.constprop.8+0x130>)
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8008f36:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8009064 <Decel.constprop.8+0x134>
	down_speed = CurrentVelocity[BODY] - end_speed;
 8008f3a:	edd4 7a02 	vldr	s15, [r4, #8]
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8008f3e:	4f4a      	ldr	r7, [pc, #296]	; (8009068 <Decel.constprop.8+0x138>)
 8008f40:	f8df a134 	ldr.w	sl, [pc, #308]	; 8009078 <Decel.constprop.8+0x148>
 8008f44:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800907c <Decel.constprop.8+0x14c>
 8008f48:	4e48      	ldr	r6, [pc, #288]	; (800906c <Decel.constprop.8+0x13c>)
 8008f4a:	f8df b134 	ldr.w	fp, [pc, #308]	; 8009080 <Decel.constprop.8+0x150>
 8008f4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
void Decel(float dec_distance, float end_speed)
 8008f52:	ed2d 8b02 	vpush	{d8}
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8008f56:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8008f5a:	eddf 8a45 	vldr	s17, [pc, #276]	; 8009070 <Decel.constprop.8+0x140>
 8008f5e:	edc7 7a00 	vstr	s15, [r7]
void Decel(float dec_distance, float end_speed)
 8008f62:	b083      	sub	sp, #12
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8008f64:	f8da 5008 	ldr.w	r5, [sl, #8]
 8008f68:	f8d9 8008 	ldr.w	r8, [r9, #8]
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= 0)
 8008f6c:	ed96 8a02 	vldr	s16, [r6, #8]
			Acceleration = 0;
			TargetAngularV = 0;
			AngularAcceleration = 0;
			break;
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 8008f70:	4628      	mov	r0, r5
 8008f72:	f7ff fa0f 	bl	8008394 <__aeabi_i2d>
 8008f76:	a338      	add	r3, pc, #224	; (adr r3, 8009058 <Decel.constprop.8+0x128>)
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	f7ff f8be 	bl	80080fc <__adddf3>
 8008f80:	e9cd 0100 	strd	r0, r1, [sp]
 8008f84:	4640      	mov	r0, r8
 8008f86:	f7ff fa05 	bl	8008394 <__aeabi_i2d>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8008f8a:	ed9b 7a03 	vldr	s14, [fp, #12]
 8008f8e:	eddb 7a00 	vldr	s15, [fp]
 8008f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f96:	f505 35ad 	add.w	r5, r5, #88576	; 0x15a00
 8008f9a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8008fa6:	f205 1593 	addw	r5, r5, #403	; 0x193
 8008faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fae:	d50b      	bpl.n	8008fc8 <Decel.constprop.8+0x98>
 8008fb0:	f7ff fccc 	bl	800894c <__aeabi_dcmplt>
 8008fb4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d141      	bne.n	8009040 <Decel.constprop.8+0x110>
 8008fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc0:	d902      	bls.n	8008fc8 <Decel.constprop.8+0x98>
 8008fc2:	45a8      	cmp	r8, r5
 8008fc4:	da00      	bge.n	8008fc8 <Decel.constprop.8+0x98>
 8008fc6:	e7fe      	b.n	8008fc6 <Decel.constprop.8+0x96>
 8008fc8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8009084 <Decel.constprop.8+0x154>
 8008fcc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8009088 <Decel.constprop.8+0x158>
		if(CurrentVelocity[LEFT] > 500)
 8008fd0:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8009074 <Decel.constprop.8+0x144>
			printf("回転停止中\r\n");
 8008fd4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 800908c <Decel.constprop.8+0x15c>
		TargetVelocity[BODY] = 0;
 8008fd8:	2500      	movs	r5, #0
		if(CurrentVelocity[LEFT] > 500)
 8008fda:	edd4 7a00 	vldr	s15, [r4]
		TargetVelocity[BODY] = 0;
 8008fde:	60b5      	str	r5, [r6, #8]
		if(CurrentVelocity[LEFT] > 500)
 8008fe0:	eef4 7ac8 	vcmpe.f32	s15, s16
 8008fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Acceleration = 0;
 8008fe8:	603d      	str	r5, [r7, #0]
		TargetAngularV = 0;
 8008fea:	f8c9 5000 	str.w	r5, [r9]
		AngularAcceleration = 0;
 8008fee:	f8c8 5000 	str.w	r5, [r8]
		if(CurrentVelocity[LEFT] > 500)
 8008ff2:	dc1a      	bgt.n	800902a <Decel.constprop.8+0xfa>
	}while(CurrentVelocity[BODY] != 0);
 8008ff4:	edd4 7a02 	vldr	s15, [r4, #8]
 8008ff8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009000:	d1eb      	bne.n	8008fda <Decel.constprop.8+0xaa>
	HAL_Delay(100);
 8009002:	2064      	movs	r0, #100	; 0x64
 8009004:	f005 fed4 	bl	800edb0 <HAL_Delay>

	}
	WaitStopAndReset();
	KeepPulse[BODY] += target_pulse;
	KeepPulse[LEFT] += target_pulse/2;
	KeepPulse[RIGHT] += target_pulse/2;
 8009008:	e89a 000e 	ldmia.w	sl, {r1, r2, r3}
	KeepPulse[LEFT] += target_pulse/2;
 800900c:	f64a 50c9 	movw	r0, #44489	; 0xadc9
	KeepPulse[BODY] += target_pulse;
 8009010:	f503 33ad 	add.w	r3, r3, #88576	; 0x15a00
 8009014:	f203 1393 	addw	r3, r3, #403	; 0x193
	KeepPulse[LEFT] += target_pulse/2;
 8009018:	4401      	add	r1, r0
	KeepPulse[RIGHT] += target_pulse/2;
 800901a:	4402      	add	r2, r0
 800901c:	e88a 000e 	stmia.w	sl, {r1, r2, r3}


}
 8009020:	b003      	add	sp, #12
 8009022:	ecbd 8b02 	vpop	{d8}
 8009026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			printf("回転停止中\r\n");
 800902a:	4658      	mov	r0, fp
 800902c:	f00a fcf6 	bl	8013a1c <puts>
	}while(CurrentVelocity[BODY] != 0);
 8009030:	edd4 7a02 	vldr	s15, [r4, #8]
 8009034:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800903c:	d1cd      	bne.n	8008fda <Decel.constprop.8+0xaa>
 800903e:	e7e0      	b.n	8009002 <Decel.constprop.8+0xd2>
 8009040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			PIDChangeFlag( A_VELO_PID , 1);
 8009044:	f04f 0101 	mov.w	r1, #1
 8009048:	f04f 0000 	mov.w	r0, #0
 800904c:	d9bc      	bls.n	8008fc8 <Decel.constprop.8+0x98>
 800904e:	45a8      	cmp	r8, r5
 8009050:	daba      	bge.n	8008fc8 <Decel.constprop.8+0x98>
 8009052:	f005 fce9 	bl	800ea28 <PIDChangeFlag>
 8009056:	e785      	b.n	8008f64 <Decel.constprop.8+0x34>
 8009058:	33333333 	.word	0x33333333
 800905c:	40ec3d8b 	.word	0x40ec3d8b
 8009060:	200048d8 	.word	0x200048d8
 8009064:	373a69dd 	.word	0x373a69dd
 8009068:	20000224 	.word	0x20000224
 800906c:	20004898 	.word	0x20004898
 8009070:	456d8000 	.word	0x456d8000
 8009074:	43fa0000 	.word	0x43fa0000
 8009078:	20004900 	.word	0x20004900
 800907c:	200048cc 	.word	0x200048cc
 8009080:	2000490c 	.word	0x2000490c
 8009084:	200048a8 	.word	0x200048a8
 8009088:	2000022c 	.word	0x2000022c
 800908c:	08016fdc 	.word	0x08016fdc

08009090 <InitPosition>:
	Pos.X = 0;
 8009090:	4b03      	ldr	r3, [pc, #12]	; (80090a0 <InitPosition+0x10>)
 8009092:	2100      	movs	r1, #0
	Pos.Dir = front;
 8009094:	f04f 7282 	mov.w	r2, #17039360	; 0x1040000
	Pos.X = 0;
 8009098:	8019      	strh	r1, [r3, #0]
	Pos.Dir = front;
 800909a:	605a      	str	r2, [r3, #4]
}
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	20000000 	.word	0x20000000
 80090a4:	00000000 	.word	0x00000000

080090a8 <SlalomRight>:
{
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	ed2d 8b06 	vpush	{d8-d10}
	float fol = Sla.Fol;         //スラローム後距離
 80090b0:	4d9d      	ldr	r5, [pc, #628]	; (8009328 <SlalomRight+0x280>)
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80090b2:	4b9e      	ldr	r3, [pc, #632]	; (800932c <SlalomRight+0x284>)
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 80090b4:	6928      	ldr	r0, [r5, #16]
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80090b6:	ed93 aa00 	vldr	s20, [r3]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80090ba:	4e9d      	ldr	r6, [pc, #628]	; (8009330 <SlalomRight+0x288>)
 80090bc:	4f9d      	ldr	r7, [pc, #628]	; (8009334 <SlalomRight+0x28c>)
	float fol = Sla.Fol;         //スラローム後距離
 80090be:	edd5 aa01 	vldr	s21, [r5, #4]
{
 80090c2:	b083      	sub	sp, #12
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 80090c4:	f7ff f978 	bl	80083b8 <__aeabi_f2d>
 80090c8:	a391      	add	r3, pc, #580	; (adr r3, 8009310 <SlalomRight+0x268>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7ff f9cb 	bl	8008468 <__aeabi_dmul>
 80090d2:	f7ff fcc1 	bl	8008a58 <__aeabi_d2f>
 80090d6:	ee09 0a90 	vmov	s19, r0
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 80090da:	6968      	ldr	r0, [r5, #20]
 80090dc:	f7ff f96c 	bl	80083b8 <__aeabi_f2d>
 80090e0:	a38b      	add	r3, pc, #556	; (adr r3, 8009310 <SlalomRight+0x268>)
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f7ff f9bf 	bl	8008468 <__aeabi_dmul>
 80090ea:	f7ff fcb5 	bl	8008a58 <__aeabi_d2f>
 80090ee:	ee09 0a10 	vmov	s18, r0
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 80090f2:	69a8      	ldr	r0, [r5, #24]
 80090f4:	f7ff f960 	bl	80083b8 <__aeabi_f2d>
 80090f8:	a385      	add	r3, pc, #532	; (adr r3, 8009310 <SlalomRight+0x268>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	f7ff f9b3 	bl	8008468 <__aeabi_dmul>
 8009102:	f7ff fca9 	bl	8008a58 <__aeabi_d2f>
	switch(Pos.Car)//方角に合わせて、
 8009106:	4b8c      	ldr	r3, [pc, #560]	; (8009338 <SlalomRight+0x290>)
 8009108:	edd7 8a02 	vldr	s17, [r7, #8]
 800910c:	795a      	ldrb	r2, [r3, #5]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 800910e:	e9d6 4100 	ldrd	r4, r1, [r6]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009112:	ee08 0a10 	vmov	s16, r0
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009116:	440c      	add	r4, r1
	switch(Pos.Car)//方角に合わせて、
 8009118:	2a06      	cmp	r2, #6
 800911a:	d805      	bhi.n	8009128 <SlalomRight+0x80>
 800911c:	e8df f002 	tbb	[pc, r2]
 8009120:	04550460 	.word	0x04550460
 8009124:	044a      	.short	0x044a
 8009126:	24          	.byte	0x24
 8009127:	00          	.byte	0x00
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009128:	4620      	mov	r0, r4
 800912a:	f7ff f933 	bl	8008394 <__aeabi_i2d>
 800912e:	edd5 7a00 	vldr	s15, [r5]
 8009132:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009136:	4680      	mov	r8, r0
 8009138:	ee17 0a90 	vmov	r0, s15
 800913c:	4689      	mov	r9, r1
 800913e:	f7ff f93b 	bl	80083b8 <__aeabi_f2d>
 8009142:	a375      	add	r3, pc, #468	; (adr r3, 8009318 <SlalomRight+0x270>)
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	f7ff f98e 	bl	8008468 <__aeabi_dmul>
 800914c:	4642      	mov	r2, r8
 800914e:	464b      	mov	r3, r9
 8009150:	f7fe ffd4 	bl	80080fc <__adddf3>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	4640      	mov	r0, r8
 800915a:	4649      	mov	r1, r9
 800915c:	f7ff fbf6 	bl	800894c <__aeabi_dcmplt>
 8009160:	2800      	cmp	r0, #0
 8009162:	f000 80d0 	beq.w	8009306 <SlalomRight+0x25e>
 8009166:	e7fe      	b.n	8009166 <SlalomRight+0xbe>
	return Wall[Pos.X][Pos.Y].west;
 8009168:	781a      	ldrb	r2, [r3, #0]
 800916a:	785b      	ldrb	r3, [r3, #1]
 800916c:	4973      	ldr	r1, [pc, #460]	; (800933c <SlalomRight+0x294>)
 800916e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8009172:	4413      	add	r3, r2
 8009174:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009178:	099b      	lsrs	r3, r3, #6
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 800917a:	2b01      	cmp	r3, #1
 800917c:	d1d4      	bne.n	8009128 <SlalomRight+0x80>
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 800917e:	4b70      	ldr	r3, [pc, #448]	; (8009340 <SlalomRight+0x298>)
 8009180:	4d70      	ldr	r5, [pc, #448]	; (8009344 <SlalomRight+0x29c>)
 8009182:	ed93 7a00 	vldr	s14, [r3]
 8009186:	ed93 6a03 	vldr	s12, [r3, #12]
 800918a:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8009348 <SlalomRight+0x2a0>
 800918e:	682b      	ldr	r3, [r5, #0]
 8009190:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800934c <SlalomRight+0x2a4>
			TargetAngularV = 0;
 8009194:	2200      	movs	r2, #0
 8009196:	e007      	b.n	80091a8 <SlalomRight+0x100>
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009198:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800919c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a0:	d529      	bpl.n	80091f6 <SlalomRight+0x14e>
			TargetVelocity[BODY] = v_turn;
 80091a2:	eef0 8a4a 	vmov.f32	s17, s20
			TargetAngularV = 0;
 80091a6:	4613      	mov	r3, r2
 80091a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80091ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b0:	d5f2      	bpl.n	8009198 <SlalomRight+0xf0>
 80091b2:	e7fe      	b.n	80091b2 <SlalomRight+0x10a>
	return Wall[Pos.X][Pos.Y].south;
 80091b4:	781a      	ldrb	r2, [r3, #0]
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	4960      	ldr	r1, [pc, #384]	; (800933c <SlalomRight+0x294>)
 80091ba:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80091be:	4413      	add	r3, r2
 80091c0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80091c4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80091c8:	e7d7      	b.n	800917a <SlalomRight+0xd2>
	return Wall[Pos.X][Pos.Y].east;
 80091ca:	781a      	ldrb	r2, [r3, #0]
 80091cc:	785b      	ldrb	r3, [r3, #1]
 80091ce:	495b      	ldr	r1, [pc, #364]	; (800933c <SlalomRight+0x294>)
 80091d0:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80091d4:	4413      	add	r3, r2
 80091d6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80091da:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80091de:	e7cc      	b.n	800917a <SlalomRight+0xd2>
	return Wall[Pos.X][Pos.Y].north;
 80091e0:	781a      	ldrb	r2, [r3, #0]
 80091e2:	785b      	ldrb	r3, [r3, #1]
 80091e4:	4955      	ldr	r1, [pc, #340]	; (800933c <SlalomRight+0x294>)
 80091e6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80091ea:	4413      	add	r3, r2
 80091ec:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80091f0:	f003 0303 	and.w	r3, r3, #3
 80091f4:	e7c1      	b.n	800917a <SlalomRight+0xd2>
 80091f6:	602b      	str	r3, [r5, #0]
 80091f8:	4620      	mov	r0, r4
 80091fa:	f7ff f8cb 	bl	8008394 <__aeabi_i2d>
 80091fe:	4680      	mov	r8, r0
 8009200:	4689      	mov	r9, r1
	float start_angle = Angle;
 8009202:	4b53      	ldr	r3, [pc, #332]	; (8009350 <SlalomRight+0x2a8>)
 8009204:	edd3 7a00 	vldr	s15, [r3]
	while(start_angle + ang1 > Angle)
 8009208:	ee79 9aa7 	vadd.f32	s19, s19, s15
 800920c:	eef4 7ae9 	vcmpe.f32	s15, s19
 8009210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009214:	d500      	bpl.n	8009218 <SlalomRight+0x170>
 8009216:	e7fe      	b.n	8009216 <SlalomRight+0x16e>
	while(start_angle + ang2 > Angle)
 8009218:	ee39 9a27 	vadd.f32	s18, s18, s15
	AngularLeapsity = 0;
 800921c:	4b4d      	ldr	r3, [pc, #308]	; (8009354 <SlalomRight+0x2ac>)
	AngularAcceleration = 0;
 800921e:	4a4e      	ldr	r2, [pc, #312]	; (8009358 <SlalomRight+0x2b0>)
	while(start_angle + ang2 > Angle)
 8009220:	eef4 7ac9 	vcmpe.f32	s15, s18
	AngularAcceleration = 0;
 8009224:	2100      	movs	r1, #0
	while(start_angle + ang2 > Angle)
 8009226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	AngularLeapsity = 0;
 800922a:	6019      	str	r1, [r3, #0]
	while(start_angle + ang2 > Angle)
 800922c:	d500      	bpl.n	8009230 <SlalomRight+0x188>
 800922e:	e7fe      	b.n	800922e <SlalomRight+0x186>
	while( start_angle + ang3 > Angle)
 8009230:	ee38 8a27 	vadd.f32	s16, s16, s15
 8009234:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800923c:	d507      	bpl.n	800924e <SlalomRight+0x1a6>
			if(TargetAngularV < 0)
 800923e:	edd5 7a00 	vldr	s15, [r5]
 8009242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924a:	d400      	bmi.n	800924e <SlalomRight+0x1a6>
 800924c:	e7fe      	b.n	800924c <SlalomRight+0x1a4>
	Calc = SearchOrFast;
 800924e:	4943      	ldr	r1, [pc, #268]	; (800935c <SlalomRight+0x2b4>)
 8009250:	f8df b114 	ldr.w	fp, [pc, #276]	; 8009368 <SlalomRight+0x2c0>
 8009254:	f8d1 a000 	ldr.w	sl, [r1]
 8009258:	f8cb a000 	str.w	sl, [fp]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800925c:	ee7a 7aaa 	vadd.f32	s15, s21, s21
	AngularAcceleration = 0;
 8009260:	2300      	movs	r3, #0
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009262:	ee17 0a90 	vmov	r0, s15
	AngularAcceleration = 0;
 8009266:	6013      	str	r3, [r2, #0]
	TargetAngularV = 0;
 8009268:	602b      	str	r3, [r5, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800926a:	ee08 3a10 	vmov	s16, r3
 800926e:	f7ff f8a3 	bl	80083b8 <__aeabi_f2d>
 8009272:	a329      	add	r3, pc, #164	; (adr r3, 8009318 <SlalomRight+0x270>)
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f7ff f8f6 	bl	8008468 <__aeabi_dmul>
 800927c:	4642      	mov	r2, r8
 800927e:	464b      	mov	r3, r9
 8009280:	f7fe ff3c 	bl	80080fc <__adddf3>
 8009284:	ee18 9a10 	vmov	r9, s16
 8009288:	e9cd 0100 	strd	r0, r1, [sp]
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800928c:	f04f 0801 	mov.w	r8, #1
 8009290:	4620      	mov	r0, r4
 8009292:	4654      	mov	r4, sl
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009294:	f7ff f87e 	bl	8008394 <__aeabi_i2d>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092a0:	f7ff fb72 	bl	8008988 <__aeabi_dcmpgt>
 80092a4:	b1b8      	cbz	r0, 80092d6 <SlalomRight+0x22e>
 80092a6:	b104      	cbz	r4, 80092aa <SlalomRight+0x202>
 80092a8:	e7fe      	b.n	80092a8 <SlalomRight+0x200>
 80092aa:	f8c5 9000 	str.w	r9, [r5]
 80092ae:	ed87 aa02 	vstr	s20, [r7, #8]
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 80092b2:	f001 fcfd 	bl	800acb0 <wall_set>
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 80092b6:	2107      	movs	r1, #7
 80092b8:	4608      	mov	r0, r1
 80092ba:	2201      	movs	r2, #1
 80092bc:	f001 fda4 	bl	800ae08 <make_map>
 80092c0:	e9d6 0300 	ldrd	r0, r3, [r6]
				Calc = 1;
 80092c4:	f8cb 8000 	str.w	r8, [fp]
 80092c8:	4418      	add	r0, r3
 80092ca:	ed95 8a00 	vldr	s16, [r5]
 80092ce:	edd7 8a02 	vldr	s17, [r7, #8]
 80092d2:	2401      	movs	r4, #1
 80092d4:	e7de      	b.n	8009294 <SlalomRight+0x1ec>
	TargetAngle += 90*M_PI/180;
 80092d6:	4c22      	ldr	r4, [pc, #136]	; (8009360 <SlalomRight+0x2b8>)
 80092d8:	ed85 8a00 	vstr	s16, [r5]
 80092dc:	6820      	ldr	r0, [r4, #0]
 80092de:	edc7 8a02 	vstr	s17, [r7, #8]
 80092e2:	f7ff f869 	bl	80083b8 <__aeabi_f2d>
 80092e6:	a30e      	add	r3, pc, #56	; (adr r3, 8009320 <SlalomRight+0x278>)
 80092e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ec:	f7fe ff06 	bl	80080fc <__adddf3>
 80092f0:	f7ff fbb2 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 80092f4:	4b1b      	ldr	r3, [pc, #108]	; (8009364 <SlalomRight+0x2bc>)
 80092f6:	68b2      	ldr	r2, [r6, #8]
	TargetAngle += 90*M_PI/180;
 80092f8:	6020      	str	r0, [r4, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 80092fa:	609a      	str	r2, [r3, #8]
}
 80092fc:	b003      	add	sp, #12
 80092fe:	ecbd 8b06 	vpop	{d8-d10}
 8009302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009306:	4d0f      	ldr	r5, [pc, #60]	; (8009344 <SlalomRight+0x29c>)
 8009308:	e77b      	b.n	8009202 <SlalomRight+0x15a>
 800930a:	bf00      	nop
 800930c:	f3af 8000 	nop.w
 8009310:	a2529d39 	.word	0xa2529d39
 8009314:	3f91df46 	.word	0x3f91df46
 8009318:	9f8f0d54 	.word	0x9f8f0d54
 800931c:	408ee54a 	.word	0x408ee54a
 8009320:	54442d18 	.word	0x54442d18
 8009324:	3ff921fb 	.word	0x3ff921fb
 8009328:	200048e4 	.word	0x200048e4
 800932c:	200049c0 	.word	0x200049c0
 8009330:	200048cc 	.word	0x200048cc
 8009334:	20004898 	.word	0x20004898
 8009338:	20000000 	.word	0x20000000
 800933c:	20004a94 	.word	0x20004a94
 8009340:	2000490c 	.word	0x2000490c
 8009344:	200048a8 	.word	0x200048a8
 8009348:	43480000 	.word	0x43480000
 800934c:	437a0000 	.word	0x437a0000
 8009350:	20000228 	.word	0x20000228
 8009354:	20000230 	.word	0x20000230
 8009358:	2000022c 	.word	0x2000022c
 800935c:	20004b38 	.word	0x20004b38
 8009360:	200048c4 	.word	0x200048c4
 8009364:	20004900 	.word	0x20004900
 8009368:	20004b3c 	.word	0x20004b3c
 800936c:	00000000 	.word	0x00000000

08009370 <SlalomLeft>:
{
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009374:	4ba4      	ldr	r3, [pc, #656]	; (8009608 <SlalomLeft+0x298>)
	float fol = Sla.Fol;         //スラローム後距離
 8009376:	4da5      	ldr	r5, [pc, #660]	; (800960c <SlalomLeft+0x29c>)
	Pos.Act = slalom;
 8009378:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8009644 <SlalomLeft+0x2d4>
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 800937c:	6928      	ldr	r0, [r5, #16]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 800937e:	4ea4      	ldr	r6, [pc, #656]	; (8009610 <SlalomLeft+0x2a0>)
 8009380:	4fa4      	ldr	r7, [pc, #656]	; (8009614 <SlalomLeft+0x2a4>)
{
 8009382:	ed2d 8b06 	vpush	{d8-d10}
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009386:	ed93 aa00 	vldr	s20, [r3]
	float fol = Sla.Fol;         //スラローム後距離
 800938a:	edd5 aa01 	vldr	s21, [r5, #4]
	Pos.Act = slalom;
 800938e:	2302      	movs	r3, #2
{
 8009390:	b083      	sub	sp, #12
	Pos.Act = slalom;
 8009392:	f888 3006 	strb.w	r3, [r8, #6]
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009396:	f7ff f80f 	bl	80083b8 <__aeabi_f2d>
 800939a:	a395      	add	r3, pc, #596	; (adr r3, 80095f0 <SlalomLeft+0x280>)
 800939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a0:	f7ff f862 	bl	8008468 <__aeabi_dmul>
 80093a4:	f7ff fb58 	bl	8008a58 <__aeabi_d2f>
 80093a8:	ee09 0a90 	vmov	s19, r0
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 80093ac:	6968      	ldr	r0, [r5, #20]
 80093ae:	f7ff f803 	bl	80083b8 <__aeabi_f2d>
 80093b2:	a38f      	add	r3, pc, #572	; (adr r3, 80095f0 <SlalomLeft+0x280>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	f7ff f856 	bl	8008468 <__aeabi_dmul>
 80093bc:	f7ff fb4c 	bl	8008a58 <__aeabi_d2f>
 80093c0:	ee09 0a10 	vmov	s18, r0
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 80093c4:	69a8      	ldr	r0, [r5, #24]
 80093c6:	f7fe fff7 	bl	80083b8 <__aeabi_f2d>
 80093ca:	a389      	add	r3, pc, #548	; (adr r3, 80095f0 <SlalomLeft+0x280>)
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f7ff f84a 	bl	8008468 <__aeabi_dmul>
 80093d4:	f7ff fb40 	bl	8008a58 <__aeabi_d2f>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80093d8:	e9d6 4200 	ldrd	r4, r2, [r6]
	switch(Pos.Car)//方角に合わせて、
 80093dc:	f898 3005 	ldrb.w	r3, [r8, #5]
 80093e0:	edd7 8a02 	vldr	s17, [r7, #8]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 80093e4:	ee08 0a10 	vmov	s16, r0
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80093e8:	4414      	add	r4, r2
	switch(Pos.Car)//方角に合わせて、
 80093ea:	2b06      	cmp	r3, #6
 80093ec:	d805      	bhi.n	80093fa <SlalomLeft+0x8a>
 80093ee:	e8df f003 	tbb	[pc, r3]
 80093f2:	0466      	.short	0x0466
 80093f4:	044c0459 	.word	0x044c0459
 80093f8:	24          	.byte	0x24
 80093f9:	00          	.byte	0x00
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80093fa:	4620      	mov	r0, r4
 80093fc:	f7fe ffca 	bl	8008394 <__aeabi_i2d>
 8009400:	edd5 7a00 	vldr	s15, [r5]
 8009404:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009408:	4680      	mov	r8, r0
 800940a:	ee17 0a90 	vmov	r0, s15
 800940e:	4689      	mov	r9, r1
 8009410:	f7fe ffd2 	bl	80083b8 <__aeabi_f2d>
 8009414:	a378      	add	r3, pc, #480	; (adr r3, 80095f8 <SlalomLeft+0x288>)
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	f7ff f825 	bl	8008468 <__aeabi_dmul>
 800941e:	4642      	mov	r2, r8
 8009420:	464b      	mov	r3, r9
 8009422:	f7fe fe6b 	bl	80080fc <__adddf3>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	4640      	mov	r0, r8
 800942c:	4649      	mov	r1, r9
 800942e:	f7ff fa8d 	bl	800894c <__aeabi_dcmplt>
 8009432:	2800      	cmp	r0, #0
 8009434:	f000 80d8 	beq.w	80095e8 <SlalomLeft+0x278>
 8009438:	e7fe      	b.n	8009438 <SlalomLeft+0xc8>
	return Wall[Pos.X][Pos.Y].west;
 800943a:	f898 3000 	ldrb.w	r3, [r8]
 800943e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8009442:	4a75      	ldr	r2, [pc, #468]	; (8009618 <SlalomLeft+0x2a8>)
 8009444:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8009448:	440b      	add	r3, r1
 800944a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800944e:	099b      	lsrs	r3, r3, #6
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009450:	2b01      	cmp	r3, #1
 8009452:	d1d2      	bne.n	80093fa <SlalomLeft+0x8a>
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009454:	4b71      	ldr	r3, [pc, #452]	; (800961c <SlalomLeft+0x2ac>)
 8009456:	4d72      	ldr	r5, [pc, #456]	; (8009620 <SlalomLeft+0x2b0>)
 8009458:	ed93 7a00 	vldr	s14, [r3]
 800945c:	ed93 6a03 	vldr	s12, [r3, #12]
 8009460:	eddf 7a70 	vldr	s15, [pc, #448]	; 8009624 <SlalomLeft+0x2b4>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	eddf 6a70 	vldr	s13, [pc, #448]	; 8009628 <SlalomLeft+0x2b8>
			TargetAngularV = 0;
 800946a:	2200      	movs	r2, #0
 800946c:	e007      	b.n	800947e <SlalomLeft+0x10e>
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 800946e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8009472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009476:	d52f      	bpl.n	80094d8 <SlalomLeft+0x168>
			TargetVelocity[BODY] = v_turn;
 8009478:	eef0 8a4a 	vmov.f32	s17, s20
			TargetAngularV = 0;
 800947c:	4613      	mov	r3, r2
 800947e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009486:	d5f2      	bpl.n	800946e <SlalomLeft+0xfe>
 8009488:	e7fe      	b.n	8009488 <SlalomLeft+0x118>
	return Wall[Pos.X][Pos.Y].south;
 800948a:	f898 3000 	ldrb.w	r3, [r8]
 800948e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8009492:	4a61      	ldr	r2, [pc, #388]	; (8009618 <SlalomLeft+0x2a8>)
 8009494:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8009498:	440b      	add	r3, r1
 800949a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800949e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80094a2:	e7d5      	b.n	8009450 <SlalomLeft+0xe0>
	return Wall[Pos.X][Pos.Y].east;
 80094a4:	f898 3000 	ldrb.w	r3, [r8]
 80094a8:	f898 1001 	ldrb.w	r1, [r8, #1]
 80094ac:	4a5a      	ldr	r2, [pc, #360]	; (8009618 <SlalomLeft+0x2a8>)
 80094ae:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80094b2:	440b      	add	r3, r1
 80094b4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80094b8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80094bc:	e7c8      	b.n	8009450 <SlalomLeft+0xe0>
	return Wall[Pos.X][Pos.Y].north;
 80094be:	f898 3000 	ldrb.w	r3, [r8]
 80094c2:	f898 1001 	ldrb.w	r1, [r8, #1]
 80094c6:	4a54      	ldr	r2, [pc, #336]	; (8009618 <SlalomLeft+0x2a8>)
 80094c8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80094cc:	440b      	add	r3, r1
 80094ce:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80094d2:	f003 0303 	and.w	r3, r3, #3
 80094d6:	e7bb      	b.n	8009450 <SlalomLeft+0xe0>
 80094d8:	602b      	str	r3, [r5, #0]
 80094da:	4620      	mov	r0, r4
 80094dc:	f7fe ff5a 	bl	8008394 <__aeabi_i2d>
 80094e0:	4680      	mov	r8, r0
 80094e2:	4689      	mov	r9, r1
	float start_angle = Angle;
 80094e4:	4b51      	ldr	r3, [pc, #324]	; (800962c <SlalomLeft+0x2bc>)
 80094e6:	edd3 7a00 	vldr	s15, [r3]
	while(start_angle - ang1 < Angle)
 80094ea:	ee77 9ae9 	vsub.f32	s19, s15, s19
 80094ee:	eef4 7ae9 	vcmpe.f32	s15, s19
 80094f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f6:	dd00      	ble.n	80094fa <SlalomLeft+0x18a>
 80094f8:	e7fe      	b.n	80094f8 <SlalomLeft+0x188>
	while(start_angle - ang2 < Angle)
 80094fa:	ee37 9ac9 	vsub.f32	s18, s15, s18
	AngularLeapsity = 0;
 80094fe:	4b4c      	ldr	r3, [pc, #304]	; (8009630 <SlalomLeft+0x2c0>)
	AngularAcceleration = 0;
 8009500:	4a4c      	ldr	r2, [pc, #304]	; (8009634 <SlalomLeft+0x2c4>)
	while(start_angle - ang2 < Angle)
 8009502:	eef4 7ac9 	vcmpe.f32	s15, s18
	AngularAcceleration = 0;
 8009506:	2100      	movs	r1, #0
	while(start_angle - ang2 < Angle)
 8009508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	AngularLeapsity = 0;
 800950c:	6019      	str	r1, [r3, #0]
	while(start_angle - ang2 < Angle)
 800950e:	dd00      	ble.n	8009512 <SlalomLeft+0x1a2>
 8009510:	e7fe      	b.n	8009510 <SlalomLeft+0x1a0>
	while( start_angle - ang3 < Angle)
 8009512:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8009516:	eef4 7ac8 	vcmpe.f32	s15, s16
 800951a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951e:	dd07      	ble.n	8009530 <SlalomLeft+0x1c0>
			if(TargetAngularV > 0)
 8009520:	edd5 7a00 	vldr	s15, [r5]
 8009524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952c:	dc00      	bgt.n	8009530 <SlalomLeft+0x1c0>
 800952e:	e7fe      	b.n	800952e <SlalomLeft+0x1be>
	Calc = SearchOrFast;
 8009530:	4941      	ldr	r1, [pc, #260]	; (8009638 <SlalomLeft+0x2c8>)
 8009532:	f8df b114 	ldr.w	fp, [pc, #276]	; 8009648 <SlalomLeft+0x2d8>
 8009536:	f8d1 a000 	ldr.w	sl, [r1]
 800953a:	f8cb a000 	str.w	sl, [fp]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800953e:	ee7a 7aaa 	vadd.f32	s15, s21, s21
	AngularAcceleration = 0;
 8009542:	2300      	movs	r3, #0
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009544:	ee17 0a90 	vmov	r0, s15
	AngularAcceleration = 0;
 8009548:	6013      	str	r3, [r2, #0]
	TargetAngularV = 0;
 800954a:	602b      	str	r3, [r5, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800954c:	ee08 3a10 	vmov	s16, r3
 8009550:	f7fe ff32 	bl	80083b8 <__aeabi_f2d>
 8009554:	a328      	add	r3, pc, #160	; (adr r3, 80095f8 <SlalomLeft+0x288>)
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	f7fe ff85 	bl	8008468 <__aeabi_dmul>
 800955e:	4642      	mov	r2, r8
 8009560:	464b      	mov	r3, r9
 8009562:	f7fe fdcb 	bl	80080fc <__adddf3>
 8009566:	ee18 9a10 	vmov	r9, s16
 800956a:	e9cd 0100 	strd	r0, r1, [sp]
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800956e:	f04f 0801 	mov.w	r8, #1
 8009572:	4620      	mov	r0, r4
 8009574:	4654      	mov	r4, sl
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009576:	f7fe ff0d 	bl	8008394 <__aeabi_i2d>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009582:	f7ff fa01 	bl	8008988 <__aeabi_dcmpgt>
 8009586:	b1b8      	cbz	r0, 80095b8 <SlalomLeft+0x248>
 8009588:	b104      	cbz	r4, 800958c <SlalomLeft+0x21c>
 800958a:	e7fe      	b.n	800958a <SlalomLeft+0x21a>
 800958c:	f8c5 9000 	str.w	r9, [r5]
 8009590:	ed87 aa02 	vstr	s20, [r7, #8]
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009594:	f001 fb8c 	bl	800acb0 <wall_set>
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009598:	2107      	movs	r1, #7
 800959a:	4608      	mov	r0, r1
 800959c:	2201      	movs	r2, #1
 800959e:	f001 fc33 	bl	800ae08 <make_map>
 80095a2:	e9d6 0300 	ldrd	r0, r3, [r6]
				Calc = 1;
 80095a6:	f8cb 8000 	str.w	r8, [fp]
 80095aa:	4418      	add	r0, r3
 80095ac:	ed95 8a00 	vldr	s16, [r5]
 80095b0:	edd7 8a02 	vldr	s17, [r7, #8]
 80095b4:	2401      	movs	r4, #1
 80095b6:	e7de      	b.n	8009576 <SlalomLeft+0x206>
	TargetAngle += -90*M_PI/180;
 80095b8:	4c20      	ldr	r4, [pc, #128]	; (800963c <SlalomLeft+0x2cc>)
 80095ba:	ed85 8a00 	vstr	s16, [r5]
 80095be:	6820      	ldr	r0, [r4, #0]
 80095c0:	edc7 8a02 	vstr	s17, [r7, #8]
 80095c4:	f7fe fef8 	bl	80083b8 <__aeabi_f2d>
 80095c8:	a30d      	add	r3, pc, #52	; (adr r3, 8009600 <SlalomLeft+0x290>)
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	f7fe fd93 	bl	80080f8 <__aeabi_dsub>
 80095d2:	f7ff fa41 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 80095d6:	4b1a      	ldr	r3, [pc, #104]	; (8009640 <SlalomLeft+0x2d0>)
 80095d8:	68b2      	ldr	r2, [r6, #8]
	TargetAngle += -90*M_PI/180;
 80095da:	6020      	str	r0, [r4, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 80095dc:	609a      	str	r2, [r3, #8]
}
 80095de:	b003      	add	sp, #12
 80095e0:	ecbd 8b06 	vpop	{d8-d10}
 80095e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e8:	4d0d      	ldr	r5, [pc, #52]	; (8009620 <SlalomLeft+0x2b0>)
 80095ea:	e77b      	b.n	80094e4 <SlalomLeft+0x174>
 80095ec:	f3af 8000 	nop.w
 80095f0:	a2529d39 	.word	0xa2529d39
 80095f4:	3f91df46 	.word	0x3f91df46
 80095f8:	9f8f0d54 	.word	0x9f8f0d54
 80095fc:	408ee54a 	.word	0x408ee54a
 8009600:	54442d18 	.word	0x54442d18
 8009604:	3ff921fb 	.word	0x3ff921fb
 8009608:	200049c0 	.word	0x200049c0
 800960c:	200048e4 	.word	0x200048e4
 8009610:	200048cc 	.word	0x200048cc
 8009614:	20004898 	.word	0x20004898
 8009618:	20004a94 	.word	0x20004a94
 800961c:	2000490c 	.word	0x2000490c
 8009620:	200048a8 	.word	0x200048a8
 8009624:	43480000 	.word	0x43480000
 8009628:	437a0000 	.word	0x437a0000
 800962c:	20000228 	.word	0x20000228
 8009630:	20000230 	.word	0x20000230
 8009634:	2000022c 	.word	0x2000022c
 8009638:	20004b38 	.word	0x20004b38
 800963c:	200048c4 	.word	0x200048c4
 8009640:	20004900 	.word	0x20004900
 8009644:	20000000 	.word	0x20000000
 8009648:	20004b3c 	.word	0x20004b3c
 800964c:	00000000 	.word	0x00000000

08009650 <Accel>:
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8009650:	4b55      	ldr	r3, [pc, #340]	; (80097a8 <Accel+0x158>)
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009652:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80097ac <Accel+0x15c>
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8009656:	edd3 7a02 	vldr	s15, [r3, #8]
	TargetAngularV = 0;
 800965a:	4b55      	ldr	r3, [pc, #340]	; (80097b0 <Accel+0x160>)
	additional_speed = explore_speed - CurrentVelocity[BODY];
 800965c:	ee70 0ae7 	vsub.f32	s1, s1, s15
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009660:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009664:	ee60 0aa0 	vmul.f32	s1, s1, s1
{
 8009668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 800966c:	ee60 0a87 	vmul.f32	s1, s1, s14
{
 8009670:	ed2d 8b02 	vpush	{d8}
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009674:	eec0 7a80 	vdiv.f32	s15, s1, s0
{
 8009678:	b085      	sub	sp, #20
	TargetAngularV = 0;
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
	_Bool wall_cut = false;
 800967e:	2300      	movs	r3, #0
 8009680:	9301      	str	r3, [sp, #4]
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009682:	4b4c      	ldr	r3, [pc, #304]	; (80097b4 <Accel+0x164>)
 8009684:	4f4c      	ldr	r7, [pc, #304]	; (80097b8 <Accel+0x168>)
 8009686:	f8df a140 	ldr.w	sl, [pc, #320]	; 80097c8 <Accel+0x178>
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 800968a:	f8df b140 	ldr.w	fp, [pc, #320]	; 80097cc <Accel+0x17c>
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 800968e:	ee10 0a10 	vmov	r0, s0
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009692:	edc3 7a00 	vstr	s15, [r3]
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009696:	f7fe fe8f 	bl	80083b8 <__aeabi_f2d>
 800969a:	a33f      	add	r3, pc, #252	; (adr r3, 8009798 <Accel+0x148>)
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	f7fe fee2 	bl	8008468 <__aeabi_dmul>
 80096a4:	f7ff f990 	bl	80089c8 <__aeabi_d2iz>
 80096a8:	4606      	mov	r6, r0
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80096aa:	f7fe fe73 	bl	8008394 <__aeabi_i2d>
 80096ae:	a33c      	add	r3, pc, #240	; (adr r3, 80097a0 <Accel+0x150>)
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f7fe fed8 	bl	8008468 <__aeabi_dmul>
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 80096b8:	ee07 6a90 	vmov	s15, r6
 80096bc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80096c0:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80097bc <Accel+0x16c>
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 80096c4:	eddf 8a3e 	vldr	s17, [pc, #248]	; 80097c0 <Accel+0x170>
 80096c8:	68bc      	ldr	r4, [r7, #8]
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80096ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 80096ce:	ee38 8a67 	vsub.f32	s16, s16, s15
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80096d2:	f8da 5008 	ldr.w	r5, [sl, #8]
 80096d6:	1933      	adds	r3, r6, r4
 80096d8:	42ab      	cmp	r3, r5
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80096da:	4620      	mov	r0, r4
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80096dc:	dd3c      	ble.n	8009758 <Accel+0x108>
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80096de:	f7fe fe59 	bl	8008394 <__aeabi_i2d>
 80096e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096e6:	f7fe fd09 	bl	80080fc <__adddf3>
 80096ea:	4680      	mov	r8, r0
 80096ec:	4628      	mov	r0, r5
 80096ee:	4689      	mov	r9, r1
 80096f0:	f7fe fe50 	bl	8008394 <__aeabi_i2d>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4640      	mov	r0, r8
 80096fa:	4649      	mov	r1, r9
 80096fc:	f7ff f926 	bl	800894c <__aeabi_dcmplt>
 8009700:	b118      	cbz	r0, 800970a <Accel+0xba>
 8009702:	4b30      	ldr	r3, [pc, #192]	; (80097c4 <Accel+0x174>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d03d      	beq.n	8009786 <Accel+0x136>
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e0      	bne.n	80096d2 <Accel+0x82>
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009710:	ee07 4a90 	vmov	s15, r4
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 8009714:	ed9b 7a02 	vldr	s14, [fp, #8]
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 800971c:	eeb4 7ae8 	vcmpe.f32	s14, s17
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009720:	ee78 7a27 	vadd.f32	s15, s16, s15
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 8009724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 800972c:	d406      	bmi.n	800973c <Accel+0xec>
 800972e:	ed9b 7a01 	vldr	s14, [fp, #4]
 8009732:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8009736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800973a:	d5ca      	bpl.n	80096d2 <Accel+0x82>
			wall_cut = true;
 800973c:	2301      	movs	r3, #1
			ChangeLED(3);
 800973e:	2003      	movs	r0, #3
			wall_cut = true;
 8009740:	9301      	str	r3, [sp, #4]
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009742:	edca 7a02 	vstr	s15, [sl, #8]
			ChangeLED(3);
 8009746:	f004 fda1 	bl	800e28c <ChangeLED>
 800974a:	68bc      	ldr	r4, [r7, #8]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800974c:	f8da 5008 	ldr.w	r5, [sl, #8]
 8009750:	1933      	adds	r3, r6, r4
 8009752:	42ab      	cmp	r3, r5
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009754:	4620      	mov	r0, r4
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009756:	dcc2      	bgt.n	80096de <Accel+0x8e>
	Acceleration = 0;
 8009758:	4a16      	ldr	r2, [pc, #88]	; (80097b4 <Accel+0x164>)
 800975a:	2300      	movs	r3, #0
	ChangeLED(0);
 800975c:	2000      	movs	r0, #0
	Acceleration = 0;
 800975e:	6013      	str	r3, [r2, #0]
	ChangeLED(0);
 8009760:	f004 fd94 	bl	800e28c <ChangeLED>
	KeepPulse[RIGHT] += target_pulse/2;
 8009764:	e9d7 0100 	ldrd	r0, r1, [r7]
	KeepPulse[BODY] += target_pulse;
 8009768:	68ba      	ldr	r2, [r7, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800976a:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 800976e:	105b      	asrs	r3, r3, #1
 8009770:	4418      	add	r0, r3
	KeepPulse[BODY] += target_pulse;
 8009772:	4416      	add	r6, r2
	KeepPulse[RIGHT] += target_pulse/2;
 8009774:	440b      	add	r3, r1
 8009776:	e9c7 0300 	strd	r0, r3, [r7]
	KeepPulse[BODY] += target_pulse;
 800977a:	60be      	str	r6, [r7, #8]
}
 800977c:	b005      	add	sp, #20
 800977e:	ecbd 8b02 	vpop	{d8}
 8009782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			updateRealSearch();
 8009786:	f004 f97b 	bl	800da80 <updateRealSearch>
			Calc = 1;
 800978a:	4a0e      	ldr	r2, [pc, #56]	; (80097c4 <Accel+0x174>)
 800978c:	68bc      	ldr	r4, [r7, #8]
 800978e:	2301      	movs	r3, #1
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	e7ba      	b.n	800970a <Accel+0xba>
 8009794:	f3af 8000 	nop.w
 8009798:	9f8f0d54 	.word	0x9f8f0d54
 800979c:	408ee54a 	.word	0x408ee54a
 80097a0:	9999999a 	.word	0x9999999a
 80097a4:	3fe99999 	.word	0x3fe99999
 80097a8:	200048d8 	.word	0x200048d8
 80097ac:	3a83126f 	.word	0x3a83126f
 80097b0:	200048a8 	.word	0x200048a8
 80097b4:	20000224 	.word	0x20000224
 80097b8:	20004900 	.word	0x20004900
 80097bc:	4792c122 	.word	0x4792c122
 80097c0:	42480000 	.word	0x42480000
 80097c4:	20004b3c 	.word	0x20004b3c
 80097c8:	200048cc 	.word	0x200048cc
 80097cc:	2000490c 	.word	0x2000490c

080097d0 <Decel>:
{
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	down_speed = CurrentVelocity[BODY] - end_speed;
 80097d4:	4c58      	ldr	r4, [pc, #352]	; (8009938 <Decel+0x168>)
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 80097d6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800993c <Decel+0x16c>
	down_speed = CurrentVelocity[BODY] - end_speed;
 80097da:	edd4 7a02 	vldr	s15, [r4, #8]
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 80097de:	4e58      	ldr	r6, [pc, #352]	; (8009940 <Decel+0x170>)
 80097e0:	4f58      	ldr	r7, [pc, #352]	; (8009944 <Decel+0x174>)
 80097e2:	4d59      	ldr	r5, [pc, #356]	; (8009948 <Decel+0x178>)
 80097e4:	f8df b174 	ldr.w	fp, [pc, #372]	; 800995c <Decel+0x18c>
	down_speed = CurrentVelocity[BODY] - end_speed;
 80097e8:	ee77 0ae0 	vsub.f32	s1, s15, s1
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 80097ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 80097f0:	ee60 0aa0 	vmul.f32	s1, s1, s1
{
 80097f4:	ed2d 8b02 	vpush	{d8}
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 80097f8:	ee60 0a87 	vmul.f32	s1, s1, s14
{
 80097fc:	b085      	sub	sp, #20
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 80097fe:	eec0 7a80 	vdiv.f32	s15, s1, s0
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009802:	ee10 0a10 	vmov	r0, s0
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009806:	eef1 7a67 	vneg.f32	s15, s15
 800980a:	edc6 7a00 	vstr	s15, [r6]
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 800980e:	f7fe fdd3 	bl	80083b8 <__aeabi_f2d>
 8009812:	a345      	add	r3, pc, #276	; (adr r3, 8009928 <Decel+0x158>)
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	f7fe fe26 	bl	8008468 <__aeabi_dmul>
 800981c:	f7ff f8d4 	bl	80089c8 <__aeabi_d2iz>
 8009820:	4682      	mov	sl, r0
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 8009822:	f7fe fdb7 	bl	8008394 <__aeabi_i2d>
 8009826:	a342      	add	r3, pc, #264	; (adr r3, 8009930 <Decel+0x160>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f7fe fe1c 	bl	8008468 <__aeabi_dmul>
 8009830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009834:	eddf 8a45 	vldr	s17, [pc, #276]	; 800994c <Decel+0x17c>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	4a45      	ldr	r2, [pc, #276]	; (8009950 <Decel+0x180>)
		if(TargetVelocity[BODY] <= 0)
 800983c:	ed95 8a02 	vldr	s16, [r5, #8]
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009840:	f8d2 8008 	ldr.w	r8, [r2, #8]
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 8009844:	4618      	mov	r0, r3
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009846:	eb03 090a 	add.w	r9, r3, sl
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 800984a:	f7fe fda3 	bl	8008394 <__aeabi_i2d>
 800984e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009852:	f7fe fc53 	bl	80080fc <__adddf3>
 8009856:	e9cd 0100 	strd	r0, r1, [sp]
 800985a:	4640      	mov	r0, r8
 800985c:	f7fe fd9a 	bl	8008394 <__aeabi_i2d>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009860:	ed9b 7a03 	vldr	s14, [fp, #12]
 8009864:	eddb 7a00 	vldr	s15, [fp]
 8009868:	ee77 7a27 	vadd.f32	s15, s14, s15
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 800986c:	4602      	mov	r2, r0
 800986e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8009872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009876:	460b      	mov	r3, r1
 8009878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800987c:	d50b      	bpl.n	8009896 <Decel+0xc6>
 800987e:	f7ff f865 	bl	800894c <__aeabi_dcmplt>
 8009882:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009886:	2800      	cmp	r0, #0
 8009888:	d142      	bne.n	8009910 <Decel+0x140>
 800988a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988e:	d902      	bls.n	8009896 <Decel+0xc6>
 8009890:	45c1      	cmp	r9, r8
 8009892:	dd00      	ble.n	8009896 <Decel+0xc6>
 8009894:	e7fe      	b.n	8009894 <Decel+0xc4>
 8009896:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8009960 <Decel+0x190>
 800989a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8009964 <Decel+0x194>
		if(CurrentVelocity[LEFT] > 500)
 800989e:	ed9f 8a2d 	vldr	s16, [pc, #180]	; 8009954 <Decel+0x184>
		TargetVelocity[BODY] = 0;
 80098a2:	f04f 0800 	mov.w	r8, #0
		if(CurrentVelocity[LEFT] > 500)
 80098a6:	edd4 7a00 	vldr	s15, [r4]
		TargetVelocity[BODY] = 0;
 80098aa:	f8c5 8008 	str.w	r8, [r5, #8]
		if(CurrentVelocity[LEFT] > 500)
 80098ae:	eef4 7ac8 	vcmpe.f32	s15, s16
 80098b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Acceleration = 0;
 80098b6:	f8c6 8000 	str.w	r8, [r6]
		TargetAngularV = 0;
 80098ba:	f8cb 8000 	str.w	r8, [fp]
		AngularAcceleration = 0;
 80098be:	f8c9 8000 	str.w	r8, [r9]
		if(CurrentVelocity[LEFT] > 500)
 80098c2:	dc1a      	bgt.n	80098fa <Decel+0x12a>
	}while(CurrentVelocity[BODY] != 0);
 80098c4:	edd4 7a02 	vldr	s15, [r4, #8]
 80098c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80098cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d0:	d1e9      	bne.n	80098a6 <Decel+0xd6>
	HAL_Delay(100);
 80098d2:	2064      	movs	r0, #100	; 0x64
 80098d4:	f005 fa6c 	bl	800edb0 <HAL_Delay>
	KeepPulse[RIGHT] += target_pulse/2;
 80098d8:	e9d7 0100 	ldrd	r0, r1, [r7]
	KeepPulse[BODY] += target_pulse;
 80098dc:	68ba      	ldr	r2, [r7, #8]
	KeepPulse[LEFT] += target_pulse/2;
 80098de:	eb0a 73da 	add.w	r3, sl, sl, lsr #31
 80098e2:	105b      	asrs	r3, r3, #1
 80098e4:	4418      	add	r0, r3
	KeepPulse[BODY] += target_pulse;
 80098e6:	4452      	add	r2, sl
	KeepPulse[RIGHT] += target_pulse/2;
 80098e8:	440b      	add	r3, r1
 80098ea:	e9c7 0300 	strd	r0, r3, [r7]
	KeepPulse[BODY] += target_pulse;
 80098ee:	60ba      	str	r2, [r7, #8]
}
 80098f0:	b005      	add	sp, #20
 80098f2:	ecbd 8b02 	vpop	{d8}
 80098f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			printf("回転停止中\r\n");
 80098fa:	4817      	ldr	r0, [pc, #92]	; (8009958 <Decel+0x188>)
 80098fc:	f00a f88e 	bl	8013a1c <puts>
	}while(CurrentVelocity[BODY] != 0);
 8009900:	edd4 7a02 	vldr	s15, [r4, #8]
 8009904:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800990c:	d1cb      	bne.n	80098a6 <Decel+0xd6>
 800990e:	e7e0      	b.n	80098d2 <Decel+0x102>
 8009910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			PIDChangeFlag( A_VELO_PID , 1);
 8009914:	f04f 0101 	mov.w	r1, #1
 8009918:	f04f 0000 	mov.w	r0, #0
 800991c:	d9bb      	bls.n	8009896 <Decel+0xc6>
 800991e:	45c1      	cmp	r9, r8
 8009920:	ddb9      	ble.n	8009896 <Decel+0xc6>
 8009922:	f005 f881 	bl	800ea28 <PIDChangeFlag>
 8009926:	e787      	b.n	8009838 <Decel+0x68>
 8009928:	9f8f0d54 	.word	0x9f8f0d54
 800992c:	408ee54a 	.word	0x408ee54a
 8009930:	cccccccd 	.word	0xcccccccd
 8009934:	3fe4cccc 	.word	0x3fe4cccc
 8009938:	200048d8 	.word	0x200048d8
 800993c:	3a83126f 	.word	0x3a83126f
 8009940:	20000224 	.word	0x20000224
 8009944:	20004900 	.word	0x20004900
 8009948:	20004898 	.word	0x20004898
 800994c:	456d8000 	.word	0x456d8000
 8009950:	200048cc 	.word	0x200048cc
 8009954:	43fa0000 	.word	0x43fa0000
 8009958:	08016fdc 	.word	0x08016fdc
 800995c:	2000490c 	.word	0x2000490c
 8009960:	200048a8 	.word	0x200048a8
 8009964:	2000022c 	.word	0x2000022c

08009968 <GoStraight>:
	Pid[wall_ctrl].flag = 0;
	TargetAngularV = 0;
	return 45;
}
void GoStraight(float move_distance,  float explore_speed, float accel)
{
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	ed2d 8b04 	vpush	{d8-d9}
	//explore_speed += accel;

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	//int keep_pulse = TotalPulse[BODY];
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009970:	ee70 7a00 	vadd.f32	s15, s0, s0
{
 8009974:	b087      	sub	sp, #28
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009976:	ee17 0a90 	vmov	r0, s15
{
 800997a:	eef0 8a41 	vmov.f32	s17, s2
 800997e:	eeb0 8a40 	vmov.f32	s16, s0
 8009982:	eeb0 9a60 	vmov.f32	s18, s1
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009986:	f7fe fd17 	bl	80083b8 <__aeabi_f2d>
 800998a:	a36d      	add	r3, pc, #436	; (adr r3, 8009b40 <GoStraight+0x1d8>)
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	f7fe fd6a 	bl	8008468 <__aeabi_dmul>
 8009994:	f7ff f818 	bl	80089c8 <__aeabi_d2iz>

	if(accel != 0) //加速するとき
 8009998:	eef5 8a40 	vcmp.f32	s17, #0.0
 800999c:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80099a0:	105b      	asrs	r3, r3, #1
 80099a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 80099a6:	4682      	mov	sl, r0
 80099a8:	9305      	str	r3, [sp, #20]
	if(accel != 0) //加速するとき
 80099aa:	f040 80a5 	bne.w	8009af8 <GoStraight+0x190>
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
		{
			//最初の45mmで加速をストップ
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 80099ae:	f7fe fcf1 	bl	8008394 <__aeabi_i2d>
 80099b2:	a365      	add	r3, pc, #404	; (adr r3, 8009b48 <GoStraight+0x1e0>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	4604      	mov	r4, r0
 80099ba:	460d      	mov	r5, r1
 80099bc:	f7fe fd54 	bl	8008468 <__aeabi_dmul>
//				PIDChangeFlag(D_WALL_PID, 0);
				PIDChangeFlag( A_VELO_PID , 1);
				//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			}

			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80099c0:	a363      	add	r3, pc, #396	; (adr r3, 8009b50 <GoStraight+0x1e8>)
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 80099c6:	e9cd 0100 	strd	r0, r1, [sp]
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80099ca:	4620      	mov	r0, r4
 80099cc:	4629      	mov	r1, r5
 80099ce:	f7fe fd4b 	bl	8008468 <__aeabi_dmul>
				//次のアクションを渡すのは別のところで。
				Calc = 1;
			}
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
			{//
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 80099d2:	ee07 aa10 	vmov	s14, sl
 80099d6:	4d52      	ldr	r5, [pc, #328]	; (8009b20 <GoStraight+0x1b8>)
 80099d8:	eddf 7a52 	vldr	s15, [pc, #328]	; 8009b24 <GoStraight+0x1bc>
 80099dc:	68ac      	ldr	r4, [r5, #8]
 80099de:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8009b3c <GoStraight+0x1d4>
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 80099e2:	eddf 8a51 	vldr	s17, [pc, #324]	; 8009b28 <GoStraight+0x1c0>
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 80099e6:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80099ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
		_Bool wall_cut=false;
 80099ee:	2300      	movs	r3, #0
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 80099f0:	ee38 8a67 	vsub.f32	s16, s16, s15
		_Bool wall_cut=false;
 80099f4:	9304      	str	r3, [sp, #16]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 80099f6:	f8db 6008 	ldr.w	r6, [fp, #8]
 80099fa:	eb0a 0304 	add.w	r3, sl, r4
 80099fe:	42b3      	cmp	r3, r6
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 8009a00:	4620      	mov	r0, r4
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009a02:	dd4c      	ble.n	8009a9e <GoStraight+0x136>
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 8009a04:	f7fe fcc6 	bl	8008394 <__aeabi_i2d>
 8009a08:	4680      	mov	r8, r0
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	4689      	mov	r9, r1
 8009a0e:	f7fe fcc1 	bl	8008394 <__aeabi_i2d>
 8009a12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a16:	4606      	mov	r6, r0
 8009a18:	460f      	mov	r7, r1
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	f7fe fb6d 	bl	80080fc <__adddf3>
 8009a22:	4632      	mov	r2, r6
 8009a24:	463b      	mov	r3, r7
 8009a26:	f7fe ff91 	bl	800894c <__aeabi_dcmplt>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d14c      	bne.n	8009ac8 <GoStraight+0x160>
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009a2e:	4642      	mov	r2, r8
 8009a30:	464b      	mov	r3, r9
 8009a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a36:	f7fe fb61 	bl	80080fc <__adddf3>
 8009a3a:	4632      	mov	r2, r6
 8009a3c:	463b      	mov	r3, r7
 8009a3e:	f7fe ff85 	bl	800894c <__aeabi_dcmplt>
 8009a42:	b118      	cbz	r0, 8009a4c <GoStraight+0xe4>
 8009a44:	4b39      	ldr	r3, [pc, #228]	; (8009b2c <GoStraight+0x1c4>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d04e      	beq.n	8009aea <GoStraight+0x182>
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 8009a4c:	9b04      	ldr	r3, [sp, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1d1      	bne.n	80099f6 <GoStraight+0x8e>
 8009a52:	4b37      	ldr	r3, [pc, #220]	; (8009b30 <GoStraight+0x1c8>)
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009a54:	ee07 4a90 	vmov	s15, r4
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 8009a58:	ed93 7a02 	vldr	s14, [r3, #8]
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 8009a60:	eeb4 7ae8 	vcmpe.f32	s14, s17
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009a64:	ee78 7a27 	vadd.f32	s15, s16, s15
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 8009a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 8009a70:	d406      	bmi.n	8009a80 <GoStraight+0x118>
 8009a72:	ed93 7a01 	vldr	s14, [r3, #4]
 8009a76:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8009a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7e:	d5ba      	bpl.n	80099f6 <GoStraight+0x8e>
				//target_pulse = TotalPulse[BODY] -KeepPulse[BODY] + Wall_Cut_Val;
				wall_cut = true;
 8009a80:	2301      	movs	r3, #1
				ChangeLED(3);
 8009a82:	2003      	movs	r0, #3
				wall_cut = true;
 8009a84:	9304      	str	r3, [sp, #16]
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 8009a86:	edcb 7a02 	vstr	s15, [fp, #8]
				ChangeLED(3);
 8009a8a:	f004 fbff 	bl	800e28c <ChangeLED>
 8009a8e:	68ac      	ldr	r4, [r5, #8]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009a90:	f8db 6008 	ldr.w	r6, [fp, #8]
 8009a94:	eb0a 0304 	add.w	r3, sl, r4
 8009a98:	42b3      	cmp	r3, r6
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 8009a9a:	4620      	mov	r0, r4
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009a9c:	dcb2      	bgt.n	8009a04 <GoStraight+0x9c>
	//		}
		}
		wall_cut = false;

	}
	ChangeLED(0);
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	f004 fbf4 	bl	800e28c <ChangeLED>
//	int keep_pulse = TotalPulse[BODY];
	//WallWarn();
	Acceleration = 0;
	KeepPulse[BODY] += target_pulse;
	KeepPulse[LEFT] += target_pulse/2;
	KeepPulse[RIGHT] += target_pulse/2;
 8009aa4:	e9d5 2300 	ldrd	r2, r3, [r5]
	KeepPulse[LEFT] += target_pulse/2;
 8009aa8:	9c05      	ldr	r4, [sp, #20]
	KeepPulse[BODY] += target_pulse;
 8009aaa:	68a9      	ldr	r1, [r5, #8]
	Acceleration = 0;
 8009aac:	4821      	ldr	r0, [pc, #132]	; (8009b34 <GoStraight+0x1cc>)
	KeepPulse[LEFT] += target_pulse/2;
 8009aae:	4422      	add	r2, r4
	KeepPulse[RIGHT] += target_pulse/2;
 8009ab0:	4423      	add	r3, r4
	KeepPulse[BODY] += target_pulse;
 8009ab2:	4451      	add	r1, sl
	Acceleration = 0;
 8009ab4:	2400      	movs	r4, #0
	KeepPulse[BODY] += target_pulse;
 8009ab6:	60a9      	str	r1, [r5, #8]
	KeepPulse[RIGHT] += target_pulse/2;
 8009ab8:	e9c5 2300 	strd	r2, r3, [r5]
	Acceleration = 0;
 8009abc:	6004      	str	r4, [r0, #0]

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 8009abe:	b007      	add	sp, #28
 8009ac0:	ecbd 8b04 	vpop	{d8-d9}
 8009ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				PIDChangeFlag( A_VELO_PID , 1);
 8009ac8:	2101      	movs	r1, #1
 8009aca:	2000      	movs	r0, #0
 8009acc:	f004 ffac 	bl	800ea28 <PIDChangeFlag>
 8009ad0:	68ac      	ldr	r4, [r5, #8]
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f7fe fc5e 	bl	8008394 <__aeabi_i2d>
 8009ad8:	4680      	mov	r8, r0
 8009ada:	f8db 0008 	ldr.w	r0, [fp, #8]
 8009ade:	4689      	mov	r9, r1
 8009ae0:	f7fe fc58 	bl	8008394 <__aeabi_i2d>
 8009ae4:	4606      	mov	r6, r0
 8009ae6:	460f      	mov	r7, r1
 8009ae8:	e7a1      	b.n	8009a2e <GoStraight+0xc6>
				updateRealSearch();
 8009aea:	f003 ffc9 	bl	800da80 <updateRealSearch>
				Calc = 1;
 8009aee:	4a0f      	ldr	r2, [pc, #60]	; (8009b2c <GoStraight+0x1c4>)
 8009af0:	68ac      	ldr	r4, [r5, #8]
 8009af2:	2301      	movs	r3, #1
 8009af4:	6013      	str	r3, [r2, #0]
 8009af6:	e7a9      	b.n	8009a4c <GoStraight+0xe4>
	Pos.WallSaf = wall_warn;
 8009af8:	4b0f      	ldr	r3, [pc, #60]	; (8009b38 <GoStraight+0x1d0>)
		while( ( KeepPulse[BODY] + (target_pulse/2)) > ( TotalPulse[BODY]) )
 8009afa:	4d09      	ldr	r5, [pc, #36]	; (8009b20 <GoStraight+0x1b8>)
		Accel( move_distance/2 , explore_speed+accel);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009afc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
	Pos.WallSaf = wall_warn;
 8009b00:	2201      	movs	r2, #1
		Accel( move_distance/2 , explore_speed+accel);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009b02:	ee78 0a89 	vadd.f32	s1, s17, s18
 8009b06:	ee28 0a00 	vmul.f32	s0, s16, s0
	Pos.WallSaf = wall_warn;
 8009b0a:	71da      	strb	r2, [r3, #7]
		Accel( move_distance/2 , explore_speed+accel);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009b0c:	f7ff fda0 	bl	8009650 <Accel>
		while( ( KeepPulse[BODY] + (target_pulse/2)) > ( TotalPulse[BODY]) )
 8009b10:	4a0a      	ldr	r2, [pc, #40]	; (8009b3c <GoStraight+0x1d4>)
 8009b12:	68ab      	ldr	r3, [r5, #8]
 8009b14:	9905      	ldr	r1, [sp, #20]
 8009b16:	6892      	ldr	r2, [r2, #8]
 8009b18:	440b      	add	r3, r1
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	ddbf      	ble.n	8009a9e <GoStraight+0x136>
 8009b1e:	e7fe      	b.n	8009b1e <GoStraight+0x1b6>
 8009b20:	20004900 	.word	0x20004900
 8009b24:	4792c122 	.word	0x4792c122
 8009b28:	42480000 	.word	0x42480000
 8009b2c:	20004b3c 	.word	0x20004b3c
 8009b30:	2000490c 	.word	0x2000490c
 8009b34:	20000224 	.word	0x20000224
 8009b38:	20000000 	.word	0x20000000
 8009b3c:	200048cc 	.word	0x200048cc
 8009b40:	9f8f0d54 	.word	0x9f8f0d54
 8009b44:	408ee54a 	.word	0x408ee54a
 8009b48:	9999999a 	.word	0x9999999a
 8009b4c:	3fd99999 	.word	0x3fd99999
 8009b50:	9999999a 	.word	0x9999999a
 8009b54:	3fe99999 	.word	0x3fe99999

08009b58 <TurnRight>:
void TurnRight(char mode)
{
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009b58:	2853      	cmp	r0, #83	; 0x53
 8009b5a:	f000 808b 	beq.w	8009c74 <TurnRight+0x11c>
 8009b5e:	2854      	cmp	r0, #84	; 0x54
 8009b60:	d11d      	bne.n	8009b9e <TurnRight+0x46>
{
 8009b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b66:	ed2d 8b02 	vpush	{d8}
	{
	case 'T' :

		Decel(45, 0);
 8009b6a:	f7ff f9e1 	bl	8008f30 <Decel.constprop.8>
		//AjustCenter();
		EmitterOFF();
 8009b6e:	f004 fb7f 	bl	800e270 <EmitterOFF>
		PIDChangeFlag(A_VELO_PID, 0);
 8009b72:	2100      	movs	r1, #0
 8009b74:	4608      	mov	r0, r1
 8009b76:	f004 ff57 	bl	800ea28 <PIDChangeFlag>
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009b7a:	4b3f      	ldr	r3, [pc, #252]	; (8009c78 <TurnRight+0x120>)
 8009b7c:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8009c7c <TurnRight+0x124>
 8009b80:	edd3 7a00 	vldr	s15, [r3]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009b84:	4a3e      	ldr	r2, [pc, #248]	; (8009c80 <TurnRight+0x128>)
	TargetAngularV = 0;
 8009b86:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8009cac <TurnRight+0x154>
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009b8a:	ed92 7a00 	vldr	s14, [r2]
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009b8e:	ee77 6aa6 	vadd.f32	s13, s15, s13
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009b92:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b9a:	d501      	bpl.n	8009ba0 <TurnRight+0x48>
 8009b9c:	e7fe      	b.n	8009b9c <TurnRight+0x44>
 8009b9e:	4770      	bx	lr
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009ba0:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009c84 <TurnRight+0x12c>
 8009ba4:	ee77 6aa6 	vadd.f32	s13, s15, s13
		while(TargetAngle > Angle)
 8009ba8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb0:	d500      	bpl.n	8009bb4 <TurnRight+0x5c>
 8009bb2:	e7fe      	b.n	8009bb2 <TurnRight+0x5a>
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009bb4:	eddf 6a34 	vldr	s13, [pc, #208]	; 8009c88 <TurnRight+0x130>
 8009bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
		while(TargetAngle > Angle)
 8009bbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009bc4:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle > Angle)
 8009bc8:	d50b      	bpl.n	8009be2 <TurnRight+0x8a>
			 if( AngularV <= 0)
 8009bca:	4b30      	ldr	r3, [pc, #192]	; (8009c8c <TurnRight+0x134>)
			 AngularAcceleration = -angular_acceleration[2];
 8009bcc:	4e30      	ldr	r6, [pc, #192]	; (8009c90 <TurnRight+0x138>)
			 if( AngularV <= 0)
 8009bce:	edd3 7a00 	vldr	s15, [r3]
			 AngularAcceleration = -angular_acceleration[2];
 8009bd2:	4b30      	ldr	r3, [pc, #192]	; (8009c94 <TurnRight+0x13c>)
 8009bd4:	6033      	str	r3, [r6, #0]
			 if( AngularV <= 0)
 8009bd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bde:	d901      	bls.n	8009be4 <TurnRight+0x8c>
 8009be0:	e7fe      	b.n	8009be0 <TurnRight+0x88>
 8009be2:	4e2b      	ldr	r6, [pc, #172]	; (8009c90 <TurnRight+0x138>)
 8009be4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8009cb0 <TurnRight+0x158>
 8009be8:	4f2b      	ldr	r7, [pc, #172]	; (8009c98 <TurnRight+0x140>)
 8009bea:	4d2c      	ldr	r5, [pc, #176]	; (8009c9c <TurnRight+0x144>)
		if(CurrentVelocity[LEFT] > 500)
 8009bec:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 8009ca0 <TurnRight+0x148>
			printf("回転停止中\r\n");
 8009bf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8009cb4 <TurnRight+0x15c>
		TargetVelocity[BODY] = 0;
 8009bf4:	2400      	movs	r4, #0
		if(CurrentVelocity[LEFT] > 500)
 8009bf6:	edd5 7a00 	vldr	s15, [r5]
		TargetVelocity[BODY] = 0;
 8009bfa:	f8c8 4008 	str.w	r4, [r8, #8]
		if(CurrentVelocity[LEFT] > 500)
 8009bfe:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Acceleration = 0;
 8009c06:	603c      	str	r4, [r7, #0]
		TargetAngularV = 0;
 8009c08:	f8c9 4000 	str.w	r4, [r9]
		AngularAcceleration = 0;
 8009c0c:	6034      	str	r4, [r6, #0]
		if(CurrentVelocity[LEFT] > 500)
 8009c0e:	dc26      	bgt.n	8009c5e <TurnRight+0x106>
	}while(CurrentVelocity[BODY] != 0);
 8009c10:	edd5 7a02 	vldr	s15, [r5, #8]
 8009c14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c1c:	d1eb      	bne.n	8009bf6 <TurnRight+0x9e>
	HAL_Delay(100);
 8009c1e:	2064      	movs	r0, #100	; 0x64
 8009c20:	f005 f8c6 	bl	800edb0 <HAL_Delay>
		KeepPulse[LEFT] += target_pulse/2;
 8009c24:	491f      	ldr	r1, [pc, #124]	; (8009ca4 <TurnRight+0x14c>)
		KeepPulse[RIGHT] -= target_pulse/2;
 8009c26:	e9d1 2300 	ldrd	r2, r3, [r1]
		KeepPulse[LEFT] += target_pulse/2;
 8009c2a:	f502 5250 	add.w	r2, r2, #13312	; 0x3400
		KeepPulse[RIGHT] -= target_pulse/2;
 8009c2e:	f5a3 5350 	sub.w	r3, r3, #13312	; 0x3400
 8009c32:	3b2b      	subs	r3, #43	; 0x2b
		KeepPulse[LEFT] += target_pulse/2;
 8009c34:	322b      	adds	r2, #43	; 0x2b
		KeepPulse[RIGHT] -= target_pulse/2;
 8009c36:	e9c1 2300 	strd	r2, r3, [r1]
		Rotate( 90 , 2*M_PI);//1.5
		//RotateTest(90);

//		float acc = AjustCenter();
		EmitterON();
 8009c3a:	f004 fb0b 	bl	800e254 <EmitterON>

//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		HAL_Delay(100);
 8009c3e:	2064      	movs	r0, #100	; 0x64
 8009c40:	f005 f8b6 	bl	800edb0 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 8009c44:	2101      	movs	r1, #1
 8009c46:	2000      	movs	r0, #0
 8009c48:	f004 feee 	bl	800ea28 <PIDChangeFlag>
	default :
		break;
	}


}
 8009c4c:	ecbd 8b02 	vpop	{d8}
		Accel(45, ExploreVelocity);
 8009c50:	4b15      	ldr	r3, [pc, #84]	; (8009ca8 <TurnRight+0x150>)
}
 8009c52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		Accel(45, ExploreVelocity);
 8009c56:	ed93 0a00 	vldr	s0, [r3]
 8009c5a:	f7ff b8cd 	b.w	8008df8 <Accel.constprop.5>
			printf("回転停止中\r\n");
 8009c5e:	4650      	mov	r0, sl
 8009c60:	f009 fedc 	bl	8013a1c <puts>
	}while(CurrentVelocity[BODY] != 0);
 8009c64:	edd5 7a02 	vldr	s15, [r5, #8]
 8009c68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c70:	d1c1      	bne.n	8009bf6 <TurnRight+0x9e>
 8009c72:	e7d4      	b.n	8009c1e <TurnRight+0xc6>
		SlalomRight();
 8009c74:	f7ff ba18 	b.w	80090a8 <SlalomRight>
 8009c78:	200048c4 	.word	0x200048c4
 8009c7c:	3f060a92 	.word	0x3f060a92
 8009c80:	20000228 	.word	0x20000228
 8009c84:	3f860a92 	.word	0x3f860a92
 8009c88:	3fc90fdb 	.word	0x3fc90fdb
 8009c8c:	20000234 	.word	0x20000234
 8009c90:	2000022c 	.word	0x2000022c
 8009c94:	bd2c7bde 	.word	0xbd2c7bde
 8009c98:	20000224 	.word	0x20000224
 8009c9c:	200048d8 	.word	0x200048d8
 8009ca0:	43fa0000 	.word	0x43fa0000
 8009ca4:	20004900 	.word	0x20004900
 8009ca8:	200049c0 	.word	0x200049c0
 8009cac:	200048a8 	.word	0x200048a8
 8009cb0:	20004898 	.word	0x20004898
 8009cb4:	08016fdc 	.word	0x08016fdc

08009cb8 <TurnLeft>:
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009cb8:	2853      	cmp	r0, #83	; 0x53
 8009cba:	f000 808e 	beq.w	8009dda <TurnLeft+0x122>
 8009cbe:	2854      	cmp	r0, #84	; 0x54
 8009cc0:	d11d      	bne.n	8009cfe <TurnLeft+0x46>
{
 8009cc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc6:	ed2d 8b02 	vpush	{d8}
	{
	case 'T' :
		//超信地旋回
		Decel(45, 0);
 8009cca:	f7ff f931 	bl	8008f30 <Decel.constprop.8>
		//AjustCenter();
		EmitterOFF();
 8009cce:	f004 facf 	bl	800e270 <EmitterOFF>
		PIDChangeFlag(A_VELO_PID, 0);
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	f004 fea7 	bl	800ea28 <PIDChangeFlag>
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009cda:	4b41      	ldr	r3, [pc, #260]	; (8009de0 <TurnLeft+0x128>)
 8009cdc:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009de4 <TurnLeft+0x12c>
 8009ce0:	edd3 7a00 	vldr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009ce4:	4a40      	ldr	r2, [pc, #256]	; (8009de8 <TurnLeft+0x130>)
	TargetAngularV = 0;
 8009ce6:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8009e14 <TurnLeft+0x15c>
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009cea:	ed92 7a00 	vldr	s14, [r2]
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009cee:	ee77 6ae6 	vsub.f32	s13, s15, s13
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009cf2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfa:	dd01      	ble.n	8009d00 <TurnLeft+0x48>
 8009cfc:	e7fe      	b.n	8009cfc <TurnLeft+0x44>
 8009cfe:	4770      	bx	lr
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009d00:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8009dec <TurnLeft+0x134>
 8009d04:	ee77 6ae6 	vsub.f32	s13, s15, s13
		while(TargetAngle < Angle)
 8009d08:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d10:	dd00      	ble.n	8009d14 <TurnLeft+0x5c>
 8009d12:	e7fe      	b.n	8009d12 <TurnLeft+0x5a>
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009d14:	eddf 6a36 	vldr	s13, [pc, #216]	; 8009df0 <TurnLeft+0x138>
 8009d18:	ee77 7ae6 	vsub.f32	s15, s15, s13
		while(TargetAngle < Angle)
 8009d1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009d24:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle < Angle)
 8009d28:	dd0b      	ble.n	8009d42 <TurnLeft+0x8a>
			 if( AngularV >= 0)
 8009d2a:	4b32      	ldr	r3, [pc, #200]	; (8009df4 <TurnLeft+0x13c>)
			 AngularAcceleration = angular_acceleration[2];
 8009d2c:	4e32      	ldr	r6, [pc, #200]	; (8009df8 <TurnLeft+0x140>)
			 if( AngularV >= 0)
 8009d2e:	edd3 7a00 	vldr	s15, [r3]
			 AngularAcceleration = angular_acceleration[2];
 8009d32:	4b32      	ldr	r3, [pc, #200]	; (8009dfc <TurnLeft+0x144>)
 8009d34:	6033      	str	r3, [r6, #0]
			 if( AngularV >= 0)
 8009d36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3e:	da01      	bge.n	8009d44 <TurnLeft+0x8c>
 8009d40:	e7fe      	b.n	8009d40 <TurnLeft+0x88>
 8009d42:	4e2d      	ldr	r6, [pc, #180]	; (8009df8 <TurnLeft+0x140>)
 8009d44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e18 <TurnLeft+0x160>
 8009d48:	4f2d      	ldr	r7, [pc, #180]	; (8009e00 <TurnLeft+0x148>)
 8009d4a:	4d2e      	ldr	r5, [pc, #184]	; (8009e04 <TurnLeft+0x14c>)
		if(CurrentVelocity[LEFT] > 500)
 8009d4c:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 8009e08 <TurnLeft+0x150>
			printf("回転停止中\r\n");
 8009d50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e1c <TurnLeft+0x164>
		TargetVelocity[BODY] = 0;
 8009d54:	2400      	movs	r4, #0
		if(CurrentVelocity[LEFT] > 500)
 8009d56:	edd5 7a00 	vldr	s15, [r5]
		TargetVelocity[BODY] = 0;
 8009d5a:	f8c8 4008 	str.w	r4, [r8, #8]
		if(CurrentVelocity[LEFT] > 500)
 8009d5e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Acceleration = 0;
 8009d66:	603c      	str	r4, [r7, #0]
		TargetAngularV = 0;
 8009d68:	f8c9 4000 	str.w	r4, [r9]
		AngularAcceleration = 0;
 8009d6c:	6034      	str	r4, [r6, #0]
		if(CurrentVelocity[LEFT] > 500)
 8009d6e:	dc29      	bgt.n	8009dc4 <TurnLeft+0x10c>
	}while(CurrentVelocity[BODY] != 0);
 8009d70:	edd5 7a02 	vldr	s15, [r5, #8]
 8009d74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d7c:	d1eb      	bne.n	8009d56 <TurnLeft+0x9e>
	HAL_Delay(100);
 8009d7e:	2064      	movs	r0, #100	; 0x64
 8009d80:	f005 f816 	bl	800edb0 <HAL_Delay>
		KeepPulse[LEFT] -= target_pulse/2;
 8009d84:	4921      	ldr	r1, [pc, #132]	; (8009e0c <TurnLeft+0x154>)
		KeepPulse[RIGHT] += target_pulse/2;
 8009d86:	e9d1 2300 	ldrd	r2, r3, [r1]
		KeepPulse[LEFT] -= target_pulse/2;
 8009d8a:	f5a2 5250 	sub.w	r2, r2, #13312	; 0x3400
		KeepPulse[RIGHT] += target_pulse/2;
 8009d8e:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8009d92:	332b      	adds	r3, #43	; 0x2b
		KeepPulse[LEFT] -= target_pulse/2;
 8009d94:	3a2b      	subs	r2, #43	; 0x2b
		KeepPulse[RIGHT] += target_pulse/2;
 8009d96:	e9c1 2300 	strd	r2, r3, [r1]
		Rotate( 90 , -2*M_PI);//-1.5
		//RotateTest(-90);
//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		EmitterON();
 8009d9a:	f004 fa5b 	bl	800e254 <EmitterON>
		HAL_Delay(100);
 8009d9e:	2064      	movs	r0, #100	; 0x64
 8009da0:	f005 f806 	bl	800edb0 <HAL_Delay>
//		float acc = AjustCenter();
		HAL_Delay(100);
 8009da4:	2064      	movs	r0, #100	; 0x64
 8009da6:	f005 f803 	bl	800edb0 <HAL_Delay>

		PIDChangeFlag( A_VELO_PID , 1);
 8009daa:	2101      	movs	r1, #1
 8009dac:	2000      	movs	r0, #0
 8009dae:	f004 fe3b 	bl	800ea28 <PIDChangeFlag>
		break;
	default :
		break;
	}

}
 8009db2:	ecbd 8b02 	vpop	{d8}
		Accel(45, ExploreVelocity);
 8009db6:	4b16      	ldr	r3, [pc, #88]	; (8009e10 <TurnLeft+0x158>)
}
 8009db8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		Accel(45, ExploreVelocity);
 8009dbc:	ed93 0a00 	vldr	s0, [r3]
 8009dc0:	f7ff b81a 	b.w	8008df8 <Accel.constprop.5>
			printf("回転停止中\r\n");
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	f009 fe29 	bl	8013a1c <puts>
	}while(CurrentVelocity[BODY] != 0);
 8009dca:	edd5 7a02 	vldr	s15, [r5, #8]
 8009dce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd6:	d1be      	bne.n	8009d56 <TurnLeft+0x9e>
 8009dd8:	e7d1      	b.n	8009d7e <TurnLeft+0xc6>
		SlalomLeft();
 8009dda:	f7ff bac9 	b.w	8009370 <SlalomLeft>
 8009dde:	bf00      	nop
 8009de0:	200048c4 	.word	0x200048c4
 8009de4:	3f060a92 	.word	0x3f060a92
 8009de8:	20000228 	.word	0x20000228
 8009dec:	3f860a92 	.word	0x3f860a92
 8009df0:	3fc90fdb 	.word	0x3fc90fdb
 8009df4:	20000234 	.word	0x20000234
 8009df8:	2000022c 	.word	0x2000022c
 8009dfc:	3d2c7bde 	.word	0x3d2c7bde
 8009e00:	20000224 	.word	0x20000224
 8009e04:	200048d8 	.word	0x200048d8
 8009e08:	43fa0000 	.word	0x43fa0000
 8009e0c:	20004900 	.word	0x20004900
 8009e10:	200049c0 	.word	0x200049c0
 8009e14:	200048a8 	.word	0x200048a8
 8009e18:	20004898 	.word	0x20004898
 8009e1c:	08016fdc 	.word	0x08016fdc

08009e20 <GoBack>:
void GoBack()
{
 8009e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	ed2d 8b02 	vpush	{d8}
	//減速して
	Decel(45, 0);
 8009e28:	f7ff f882 	bl	8008f30 <Decel.constprop.8>

	Rotate(180, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
	EmitterON();

#else
	Pos.Dir = right;
 8009e2c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a048 <GoBack+0x228>
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009e30:	f8df 8218 	ldr.w	r8, [pc, #536]	; 800a04c <GoBack+0x22c>
	PIDChangeFlag(A_VELO_PID, 0);
 8009e34:	2100      	movs	r1, #0
	Pos.Dir = right;
 8009e36:	2301      	movs	r3, #1
	PIDChangeFlag(A_VELO_PID, 0);
 8009e38:	4608      	mov	r0, r1
	Pos.Dir = right;
 8009e3a:	f889 3004 	strb.w	r3, [r9, #4]
	PIDChangeFlag(A_VELO_PID, 0);
 8009e3e:	f004 fdf3 	bl	800ea28 <PIDChangeFlag>
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009e42:	edd8 7a00 	vldr	s15, [r8]
 8009e46:	eddf 6a73 	vldr	s13, [pc, #460]	; 800a014 <GoBack+0x1f4>
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009e4a:	4b73      	ldr	r3, [pc, #460]	; (800a018 <GoBack+0x1f8>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009e4c:	ee77 6aa6 	vadd.f32	s13, s15, s13
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009e50:	ed93 7a00 	vldr	s14, [r3]
 8009e54:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5c:	dd00      	ble.n	8009e60 <GoBack+0x40>
 8009e5e:	e7fe      	b.n	8009e5e <GoBack+0x3e>
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009e60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a01c <GoBack+0x1fc>
 8009e64:	ee77 6aa6 	vadd.f32	s13, s15, s13
		while(TargetAngle > Angle)
 8009e68:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e70:	dd00      	ble.n	8009e74 <GoBack+0x54>
 8009e72:	e7fe      	b.n	8009e72 <GoBack+0x52>
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009e74:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800a020 <GoBack+0x200>
 8009e78:	4e6a      	ldr	r6, [pc, #424]	; (800a024 <GoBack+0x204>)
 8009e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
		while(TargetAngle > Angle)
 8009e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009e86:	edc8 7a00 	vstr	s15, [r8]
		while(TargetAngle > Angle)
 8009e8a:	dd0b      	ble.n	8009ea4 <GoBack+0x84>
			 if( AngularV <= 0)
 8009e8c:	4b66      	ldr	r3, [pc, #408]	; (800a028 <GoBack+0x208>)
			 AngularAcceleration = -angular_acceleration[2];
 8009e8e:	4d67      	ldr	r5, [pc, #412]	; (800a02c <GoBack+0x20c>)
			 if( AngularV <= 0)
 8009e90:	edd3 7a00 	vldr	s15, [r3]
			 AngularAcceleration = -angular_acceleration[2];
 8009e94:	4b66      	ldr	r3, [pc, #408]	; (800a030 <GoBack+0x210>)
 8009e96:	602b      	str	r3, [r5, #0]
			 if( AngularV <= 0)
 8009e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea0:	d901      	bls.n	8009ea6 <GoBack+0x86>
 8009ea2:	e7fe      	b.n	8009ea2 <GoBack+0x82>
 8009ea4:	4d61      	ldr	r5, [pc, #388]	; (800a02c <GoBack+0x20c>)
 8009ea6:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 800a050 <GoBack+0x230>
 8009eaa:	4f62      	ldr	r7, [pc, #392]	; (800a034 <GoBack+0x214>)
 8009eac:	4c62      	ldr	r4, [pc, #392]	; (800a038 <GoBack+0x218>)
		TargetVelocity[BODY] = 0;
 8009eae:	ed9f 8a63 	vldr	s16, [pc, #396]	; 800a03c <GoBack+0x21c>
		if(CurrentVelocity[LEFT] > 500)
 8009eb2:	eddf 8a63 	vldr	s17, [pc, #396]	; 800a040 <GoBack+0x220>
			printf("回転停止中\r\n");
 8009eb6:	f8df b19c 	ldr.w	fp, [pc, #412]	; 800a054 <GoBack+0x234>
		if(CurrentVelocity[LEFT] > 500)
 8009eba:	edd4 7a00 	vldr	s15, [r4]
		TargetVelocity[BODY] = 0;
 8009ebe:	ed8a 8a02 	vstr	s16, [sl, #8]
		if(CurrentVelocity[LEFT] > 500)
 8009ec2:	eef4 7ae8 	vcmpe.f32	s15, s17
 8009ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Acceleration = 0;
 8009eca:	ed87 8a00 	vstr	s16, [r7]
		TargetAngularV = 0;
 8009ece:	ed86 8a00 	vstr	s16, [r6]
		AngularAcceleration = 0;
 8009ed2:	ed85 8a00 	vstr	s16, [r5]
		if(CurrentVelocity[LEFT] > 500)
 8009ed6:	f300 8091 	bgt.w	8009ffc <GoBack+0x1dc>
	}while(CurrentVelocity[BODY] != 0);
 8009eda:	edd4 7a02 	vldr	s15, [r4, #8]
 8009ede:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee6:	d1e8      	bne.n	8009eba <GoBack+0x9a>
	HAL_Delay(100);
 8009ee8:	2064      	movs	r0, #100	; 0x64
 8009eea:	f004 ff61 	bl	800edb0 <HAL_Delay>
		KeepPulse[LEFT] += target_pulse/2;
 8009eee:	f8df b168 	ldr.w	fp, [pc, #360]	; 800a058 <GoBack+0x238>
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009ef2:	4949      	ldr	r1, [pc, #292]	; (800a018 <GoBack+0x1f8>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009ef4:	edd8 7a00 	vldr	s15, [r8]
 8009ef8:	eddf 6a46 	vldr	s13, [pc, #280]	; 800a014 <GoBack+0x1f4>
		KeepPulse[LEFT] += target_pulse/2;
 8009efc:	f8db 2000 	ldr.w	r2, [fp]
		KeepPulse[RIGHT] -= target_pulse/2;
 8009f00:	f8db 3004 	ldr.w	r3, [fp, #4]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009f04:	ed91 7a00 	vldr	s14, [r1]
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009f08:	ee77 6aa6 	vadd.f32	s13, s15, s13
		KeepPulse[LEFT] += target_pulse/2;
 8009f0c:	f502 5250 	add.w	r2, r2, #13312	; 0x3400
		KeepPulse[RIGHT] -= target_pulse/2;
 8009f10:	f5a3 5350 	sub.w	r3, r3, #13312	; 0x3400
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009f14:	eef4 6ac7 	vcmpe.f32	s13, s14
		KeepPulse[LEFT] += target_pulse/2;
 8009f18:	322b      	adds	r2, #43	; 0x2b
		KeepPulse[RIGHT] -= target_pulse/2;
 8009f1a:	3b2b      	subs	r3, #43	; 0x2b
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
	//acc = AjustCenter();
	Pos.Dir = right;
 8009f1c:	2101      	movs	r1, #1
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		KeepPulse[RIGHT] -= target_pulse/2;
 8009f22:	e9cb 2300 	strd	r2, r3, [fp]
	Pos.Dir = right;
 8009f26:	f889 1004 	strb.w	r1, [r9, #4]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009f2a:	dd00      	ble.n	8009f2e <GoBack+0x10e>
 8009f2c:	e7fe      	b.n	8009f2c <GoBack+0x10c>
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009f2e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a01c <GoBack+0x1fc>
 8009f32:	ee77 6aa6 	vadd.f32	s13, s15, s13
		while(TargetAngle > Angle)
 8009f36:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3e:	dd00      	ble.n	8009f42 <GoBack+0x122>
 8009f40:	e7fe      	b.n	8009f40 <GoBack+0x120>
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009f42:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a020 <GoBack+0x200>
 8009f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
		while(TargetAngle > Angle)
 8009f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009f52:	edc8 7a00 	vstr	s15, [r8]
		while(TargetAngle > Angle)
 8009f56:	dd0a      	ble.n	8009f6e <GoBack+0x14e>
			 if( AngularV <= 0)
 8009f58:	4a33      	ldr	r2, [pc, #204]	; (800a028 <GoBack+0x208>)
			 AngularAcceleration = -angular_acceleration[2];
 8009f5a:	4b35      	ldr	r3, [pc, #212]	; (800a030 <GoBack+0x210>)
			 if( AngularV <= 0)
 8009f5c:	edd2 7a00 	vldr	s15, [r2]
			 AngularAcceleration = -angular_acceleration[2];
 8009f60:	602b      	str	r3, [r5, #0]
			 if( AngularV <= 0)
 8009f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f6a:	d900      	bls.n	8009f6e <GoBack+0x14e>
 8009f6c:	e7fe      	b.n	8009f6c <GoBack+0x14c>
		TargetVelocity[BODY] = 0;
 8009f6e:	ed9f 8a33 	vldr	s16, [pc, #204]	; 800a03c <GoBack+0x21c>
		if(CurrentVelocity[LEFT] > 500)
 8009f72:	eddf 8a33 	vldr	s17, [pc, #204]	; 800a040 <GoBack+0x220>
			printf("回転停止中\r\n");
 8009f76:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800a054 <GoBack+0x234>
		if(CurrentVelocity[LEFT] > 500)
 8009f7a:	edd4 7a00 	vldr	s15, [r4]
		TargetVelocity[BODY] = 0;
 8009f7e:	ed8a 8a02 	vstr	s16, [sl, #8]
		if(CurrentVelocity[LEFT] > 500)
 8009f82:	eef4 7ae8 	vcmpe.f32	s15, s17
 8009f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Acceleration = 0;
 8009f8a:	ed87 8a00 	vstr	s16, [r7]
		TargetAngularV = 0;
 8009f8e:	ed86 8a00 	vstr	s16, [r6]
		AngularAcceleration = 0;
 8009f92:	ed85 8a00 	vstr	s16, [r5]
		if(CurrentVelocity[LEFT] > 500)
 8009f96:	dc26      	bgt.n	8009fe6 <GoBack+0x1c6>
	}while(CurrentVelocity[BODY] != 0);
 8009f98:	edd4 7a02 	vldr	s15, [r4, #8]
 8009f9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa4:	d1e9      	bne.n	8009f7a <GoBack+0x15a>
	HAL_Delay(100);
 8009fa6:	2064      	movs	r0, #100	; 0x64
 8009fa8:	f004 ff02 	bl	800edb0 <HAL_Delay>
		KeepPulse[RIGHT] -= target_pulse/2;
 8009fac:	e9db 2300 	ldrd	r2, r3, [fp]
		KeepPulse[LEFT] += target_pulse/2;
 8009fb0:	f502 5250 	add.w	r2, r2, #13312	; 0x3400
		KeepPulse[RIGHT] -= target_pulse/2;
 8009fb4:	f5a3 5350 	sub.w	r3, r3, #13312	; 0x3400
		KeepPulse[LEFT] += target_pulse/2;
 8009fb8:	322b      	adds	r2, #43	; 0x2b
		KeepPulse[RIGHT] -= target_pulse/2;
 8009fba:	3b2b      	subs	r3, #43	; 0x2b
	Rotate(90, 2*M_PI);
	PIDChangeFlag(A_VELO_PID, 1);
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	2000      	movs	r0, #0
		KeepPulse[RIGHT] -= target_pulse/2;
 8009fc0:	e9cb 2300 	strd	r2, r3, [fp]
	PIDChangeFlag(A_VELO_PID, 1);
 8009fc4:	f004 fd30 	bl	800ea28 <PIDChangeFlag>
	Pos.Dir = back;
 8009fc8:	2303      	movs	r3, #3
#endif

	//acc = AjustCenter();
//	/Angle = TargetAngle;

	HAL_Delay(200);
 8009fca:	20c8      	movs	r0, #200	; 0xc8
	Pos.Dir = back;
 8009fcc:	f889 3004 	strb.w	r3, [r9, #4]
	HAL_Delay(200);
 8009fd0:	f004 feee 	bl	800edb0 <HAL_Delay>

	Accel(45, ExploreVelocity);
	//ここまでで目標走行距離を完了する

}
 8009fd4:	ecbd 8b02 	vpop	{d8}
	Accel(45, ExploreVelocity);
 8009fd8:	4b1a      	ldr	r3, [pc, #104]	; (800a044 <GoBack+0x224>)
 8009fda:	ed93 0a00 	vldr	s0, [r3]
}
 8009fde:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Accel(45, ExploreVelocity);
 8009fe2:	f7fe bf09 	b.w	8008df8 <Accel.constprop.5>
			printf("回転停止中\r\n");
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	f009 fd18 	bl	8013a1c <puts>
	}while(CurrentVelocity[BODY] != 0);
 8009fec:	edd4 7a02 	vldr	s15, [r4, #8]
 8009ff0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff8:	d1bf      	bne.n	8009f7a <GoBack+0x15a>
 8009ffa:	e7d4      	b.n	8009fa6 <GoBack+0x186>
			printf("回転停止中\r\n");
 8009ffc:	4658      	mov	r0, fp
 8009ffe:	f009 fd0d 	bl	8013a1c <puts>
	}while(CurrentVelocity[BODY] != 0);
 800a002:	edd4 7a02 	vldr	s15, [r4, #8]
 800a006:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a00e:	f47f af54 	bne.w	8009eba <GoBack+0x9a>
 800a012:	e769      	b.n	8009ee8 <GoBack+0xc8>
 800a014:	3f060a92 	.word	0x3f060a92
 800a018:	20000228 	.word	0x20000228
 800a01c:	3f860a92 	.word	0x3f860a92
 800a020:	3fc90fdb 	.word	0x3fc90fdb
 800a024:	200048a8 	.word	0x200048a8
 800a028:	20000234 	.word	0x20000234
 800a02c:	2000022c 	.word	0x2000022c
 800a030:	bd2c7bde 	.word	0xbd2c7bde
 800a034:	20000224 	.word	0x20000224
 800a038:	200048d8 	.word	0x200048d8
 800a03c:	00000000 	.word	0x00000000
 800a040:	43fa0000 	.word	0x43fa0000
 800a044:	200049c0 	.word	0x200049c0
 800a048:	20000000 	.word	0x20000000
 800a04c:	200048c4 	.word	0x200048c4
 800a050:	20004898 	.word	0x20004898
 800a054:	08016fdc 	.word	0x08016fdc
 800a058:	20004900 	.word	0x20004900
 800a05c:	00000000 	.word	0x00000000

0800a060 <SelectAction>:
//{
//
//}
//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
 void SelectAction(char turn_mode)	//前後左右であらわす
{
 800a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(Pos.Dir%4) //条件を増やす場合は割る数字に注意
 800a064:	4fda      	ldr	r7, [pc, #872]	; (800a3d0 <SelectAction+0x370>)
 800a066:	793b      	ldrb	r3, [r7, #4]
{
 800a068:	ed2d 8b02 	vpush	{d8}
	switch(Pos.Dir%4) //条件を増やす場合は割る数字に注意
 800a06c:	f003 0303 	and.w	r3, r3, #3
 800a070:	2b01      	cmp	r3, #1
{
 800a072:	b083      	sub	sp, #12
	switch(Pos.Dir%4) //条件を増やす場合は割る数字に注意
 800a074:	f000 80d6 	beq.w	800a224 <SelectAction+0x1c4>
 800a078:	d35f      	bcc.n	800a13a <SelectAction+0xda>
 800a07a:	2b03      	cmp	r3, #3
 800a07c:	d135      	bne.n	800a0ea <SelectAction+0x8a>
	Decel(45, 0);
 800a07e:	f7fe ff57 	bl	8008f30 <Decel.constprop.8>
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a082:	f8df 937c 	ldr.w	r9, [pc, #892]	; 800a400 <SelectAction+0x3a0>
	TargetAngularV = 0;
 800a086:	4dd3      	ldr	r5, [pc, #844]	; (800a3d4 <SelectAction+0x374>)
	PIDChangeFlag(A_VELO_PID, 0);
 800a088:	2100      	movs	r1, #0
	Pos.Dir = right;
 800a08a:	2301      	movs	r3, #1
	PIDChangeFlag(A_VELO_PID, 0);
 800a08c:	4608      	mov	r0, r1
	Pos.Dir = right;
 800a08e:	713b      	strb	r3, [r7, #4]
	PIDChangeFlag(A_VELO_PID, 0);
 800a090:	f004 fcca 	bl	800ea28 <PIDChangeFlag>
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a094:	4bd0      	ldr	r3, [pc, #832]	; (800a3d8 <SelectAction+0x378>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a096:	edd9 7a00 	vldr	s15, [r9]
 800a09a:	eddf 6ad0 	vldr	s13, [pc, #832]	; 800a3dc <SelectAction+0x37c>
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a09e:	ed93 7a00 	vldr	s14, [r3]
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a0a2:	ee77 6aa6 	vadd.f32	s13, s15, s13
	TargetAngularV = 0;
 800a0a6:	2300      	movs	r3, #0
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a0a8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	TargetAngularV = 0;
 800a0b0:	602b      	str	r3, [r5, #0]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a0b2:	dd1f      	ble.n	800a0f4 <SelectAction+0x94>
 800a0b4:	e7fe      	b.n	800a0b4 <SelectAction+0x54>
	ChangeLED(0);
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	f004 f8e8 	bl	800e28c <ChangeLED>
	KeepPulse[RIGHT] += target_pulse/2;
 800a0bc:	e9db 2300 	ldrd	r2, r3, [fp]
	KeepPulse[BODY] += target_pulse;
 800a0c0:	f8db 1008 	ldr.w	r1, [fp, #8]
	Acceleration = 0;
 800a0c4:	48c6      	ldr	r0, [pc, #792]	; (800a3e0 <SelectAction+0x380>)
	KeepPulse[LEFT] += target_pulse/2;
 800a0c6:	f502 32ad 	add.w	r2, r2, #88576	; 0x15a00
	KeepPulse[RIGHT] += target_pulse/2;
 800a0ca:	f503 33ad 	add.w	r3, r3, #88576	; 0x15a00
	KeepPulse[LEFT] += target_pulse/2;
 800a0ce:	f202 1293 	addw	r2, r2, #403	; 0x193
	KeepPulse[RIGHT] += target_pulse/2;
 800a0d2:	f203 1393 	addw	r3, r3, #403	; 0x193
	KeepPulse[BODY] += target_pulse;
 800a0d6:	f501 312d 	add.w	r1, r1, #177152	; 0x2b400
	KeepPulse[RIGHT] += target_pulse/2;
 800a0da:	e9cb 2300 	strd	r2, r3, [fp]
	Acceleration = 0;
 800a0de:	2400      	movs	r4, #0
	KeepPulse[BODY] += target_pulse;
 800a0e0:	f201 3127 	addw	r1, r1, #807	; 0x327
 800a0e4:	f8cb 1008 	str.w	r1, [fp, #8]
	Acceleration = 0;
 800a0e8:	6004      	str	r4, [r0, #0]

	default :
		break;

	}
}
 800a0ea:	b003      	add	sp, #12
 800a0ec:	ecbd 8b02 	vpop	{d8}
 800a0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a0f4:	eddf 6acc 	vldr	s13, [pc, #816]	; 800a428 <SelectAction+0x3c8>
 800a0f8:	ee77 6aa6 	vadd.f32	s13, s15, s13
		while(TargetAngle > Angle)
 800a0fc:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a104:	dd00      	ble.n	800a108 <SelectAction+0xa8>
 800a106:	e7fe      	b.n	800a106 <SelectAction+0xa6>
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a108:	eddf 6ac8 	vldr	s13, [pc, #800]	; 800a42c <SelectAction+0x3cc>
 800a10c:	ee77 7aa6 	vadd.f32	s15, s15, s13
		while(TargetAngle > Angle)
 800a110:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a118:	edc9 7a00 	vstr	s15, [r9]
		while(TargetAngle > Angle)
 800a11c:	f340 80aa 	ble.w	800a274 <SelectAction+0x214>
			 if( AngularV <= 0)
 800a120:	4bb0      	ldr	r3, [pc, #704]	; (800a3e4 <SelectAction+0x384>)
			 AngularAcceleration = -angular_acceleration[2];
 800a122:	4eb1      	ldr	r6, [pc, #708]	; (800a3e8 <SelectAction+0x388>)
			 if( AngularV <= 0)
 800a124:	edd3 7a00 	vldr	s15, [r3]
			 AngularAcceleration = -angular_acceleration[2];
 800a128:	4bb0      	ldr	r3, [pc, #704]	; (800a3ec <SelectAction+0x38c>)
 800a12a:	6033      	str	r3, [r6, #0]
			 if( AngularV <= 0)
 800a12c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a134:	f240 809f 	bls.w	800a276 <SelectAction+0x216>
 800a138:	e7fe      	b.n	800a138 <SelectAction+0xd8>
		AddVelocity = 0;
 800a13a:	4bad      	ldr	r3, [pc, #692]	; (800a3f0 <SelectAction+0x390>)
 800a13c:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 800a414 <SelectAction+0x3b4>
 800a140:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a418 <SelectAction+0x3b8>
 800a144:	f8db 8008 	ldr.w	r8, [fp, #8]
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 800a148:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 800a41c <SelectAction+0x3bc>
 800a14c:	ed9f 8aa9 	vldr	s16, [pc, #676]	; 800a3f4 <SelectAction+0x394>
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 800a150:	eddf 8aa9 	vldr	s17, [pc, #676]	; 800a3f8 <SelectAction+0x398>
		AddVelocity = 0;
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]
		_Bool wall_cut=false;
 800a158:	2300      	movs	r3, #0
 800a15a:	9301      	str	r3, [sp, #4]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800a15c:	f508 332d 	add.w	r3, r8, #177152	; 0x2b400
 800a160:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800a164:	f203 3327 	addw	r3, r3, #807	; 0x327
 800a168:	429c      	cmp	r4, r3
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 800a16a:	4640      	mov	r0, r8
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800a16c:	daa3      	bge.n	800a0b6 <SelectAction+0x56>
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 800a16e:	f7fe f911 	bl	8008394 <__aeabi_i2d>
 800a172:	4606      	mov	r6, r0
 800a174:	4620      	mov	r0, r4
 800a176:	460f      	mov	r7, r1
 800a178:	f7fe f90c 	bl	8008394 <__aeabi_i2d>
 800a17c:	a390      	add	r3, pc, #576	; (adr r3, 800a3c0 <SelectAction+0x360>)
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	4604      	mov	r4, r0
 800a184:	460d      	mov	r5, r1
 800a186:	4630      	mov	r0, r6
 800a188:	4639      	mov	r1, r7
 800a18a:	f7fd ffb7 	bl	80080fc <__adddf3>
 800a18e:	4622      	mov	r2, r4
 800a190:	462b      	mov	r3, r5
 800a192:	f7fe fbdb 	bl	800894c <__aeabi_dcmplt>
 800a196:	bb98      	cbnz	r0, 800a200 <SelectAction+0x1a0>
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800a198:	a38b      	add	r3, pc, #556	; (adr r3, 800a3c8 <SelectAction+0x368>)
 800a19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19e:	4630      	mov	r0, r6
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	f7fd ffab 	bl	80080fc <__adddf3>
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	462b      	mov	r3, r5
 800a1aa:	f7fe fbcf 	bl	800894c <__aeabi_dcmplt>
 800a1ae:	b120      	cbz	r0, 800a1ba <SelectAction+0x15a>
 800a1b0:	4b92      	ldr	r3, [pc, #584]	; (800a3fc <SelectAction+0x39c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 81ab 	beq.w	800a510 <SelectAction+0x4b0>
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 800a1ba:	9b01      	ldr	r3, [sp, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1cd      	bne.n	800a15c <SelectAction+0xfc>
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 800a1c0:	ee07 8a90 	vmov	s15, r8
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 800a1c4:	ed9a 7a02 	vldr	s14, [sl, #8]
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 800a1c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 800a1cc:	eeb4 7ac8 	vcmpe.f32	s14, s16
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 800a1d0:	ee77 7aa8 	vadd.f32	s15, s15, s17
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 800a1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 800a1d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 800a1dc:	d406      	bmi.n	800a1ec <SelectAction+0x18c>
 800a1de:	ed9a 7a01 	vldr	s14, [sl, #4]
 800a1e2:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800a1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ea:	d5b7      	bpl.n	800a15c <SelectAction+0xfc>
				wall_cut = true;
 800a1ec:	2301      	movs	r3, #1
				ChangeLED(3);
 800a1ee:	2003      	movs	r0, #3
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 800a1f0:	edc9 7a02 	vstr	s15, [r9, #8]
				wall_cut = true;
 800a1f4:	9301      	str	r3, [sp, #4]
				ChangeLED(3);
 800a1f6:	f004 f849 	bl	800e28c <ChangeLED>
 800a1fa:	f8db 8008 	ldr.w	r8, [fp, #8]
 800a1fe:	e7ad      	b.n	800a15c <SelectAction+0xfc>
				PIDChangeFlag( A_VELO_PID , 1);
 800a200:	2101      	movs	r1, #1
 800a202:	2000      	movs	r0, #0
 800a204:	f004 fc10 	bl	800ea28 <PIDChangeFlag>
 800a208:	f8db 8008 	ldr.w	r8, [fp, #8]
 800a20c:	4640      	mov	r0, r8
 800a20e:	f7fe f8c1 	bl	8008394 <__aeabi_i2d>
 800a212:	4606      	mov	r6, r0
 800a214:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800a218:	460f      	mov	r7, r1
 800a21a:	f7fe f8bb 	bl	8008394 <__aeabi_i2d>
 800a21e:	4604      	mov	r4, r0
 800a220:	460d      	mov	r5, r1
 800a222:	e7b9      	b.n	800a198 <SelectAction+0x138>
	switch( mode )
 800a224:	2853      	cmp	r0, #83	; 0x53
 800a226:	d01e      	beq.n	800a266 <SelectAction+0x206>
 800a228:	2854      	cmp	r0, #84	; 0x54
 800a22a:	f47f af5e 	bne.w	800a0ea <SelectAction+0x8a>
		Decel(45, 0);
 800a22e:	f7fe fe7f 	bl	8008f30 <Decel.constprop.8>
		EmitterOFF();
 800a232:	f004 f81d 	bl	800e270 <EmitterOFF>
		PIDChangeFlag(A_VELO_PID, 0);
 800a236:	2100      	movs	r1, #0
 800a238:	4608      	mov	r0, r1
 800a23a:	f004 fbf5 	bl	800ea28 <PIDChangeFlag>
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a23e:	4b70      	ldr	r3, [pc, #448]	; (800a400 <SelectAction+0x3a0>)
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a240:	4a65      	ldr	r2, [pc, #404]	; (800a3d8 <SelectAction+0x378>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a242:	eddf 6a66 	vldr	s13, [pc, #408]	; 800a3dc <SelectAction+0x37c>
 800a246:	edd3 7a00 	vldr	s15, [r3]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a24a:	ed92 7a00 	vldr	s14, [r2]
	TargetAngularV = 0;
 800a24e:	4d61      	ldr	r5, [pc, #388]	; (800a3d4 <SelectAction+0x374>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a250:	ee77 6aa6 	vadd.f32	s13, s15, s13
	TargetAngularV = 0;
 800a254:	2200      	movs	r2, #0
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a256:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	TargetAngularV = 0;
 800a25e:	602a      	str	r2, [r5, #0]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a260:	f340 80e6 	ble.w	800a430 <SelectAction+0x3d0>
 800a264:	e7fe      	b.n	800a264 <SelectAction+0x204>
}
 800a266:	b003      	add	sp, #12
 800a268:	ecbd 8b02 	vpop	{d8}
 800a26c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		SlalomRight();
 800a270:	f7fe bf1a 	b.w	80090a8 <SlalomRight>
 800a274:	4e5c      	ldr	r6, [pc, #368]	; (800a3e8 <SelectAction+0x388>)
 800a276:	f8df a168 	ldr.w	sl, [pc, #360]	; 800a3e0 <SelectAction+0x380>
 800a27a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a420 <SelectAction+0x3c0>
 800a27e:	4c61      	ldr	r4, [pc, #388]	; (800a404 <SelectAction+0x3a4>)
		TargetVelocity[BODY] = 0;
 800a280:	ed9f 8a61 	vldr	s16, [pc, #388]	; 800a408 <SelectAction+0x3a8>
		if(CurrentVelocity[LEFT] > 500)
 800a284:	eddf 8a61 	vldr	s17, [pc, #388]	; 800a40c <SelectAction+0x3ac>
			printf("回転停止中\r\n");
 800a288:	f8df b198 	ldr.w	fp, [pc, #408]	; 800a424 <SelectAction+0x3c4>
		if(CurrentVelocity[LEFT] > 500)
 800a28c:	edd4 7a00 	vldr	s15, [r4]
		TargetVelocity[BODY] = 0;
 800a290:	ed88 8a02 	vstr	s16, [r8, #8]
		if(CurrentVelocity[LEFT] > 500)
 800a294:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Acceleration = 0;
 800a29c:	ed8a 8a00 	vstr	s16, [sl]
		TargetAngularV = 0;
 800a2a0:	ed85 8a00 	vstr	s16, [r5]
		AngularAcceleration = 0;
 800a2a4:	ed86 8a00 	vstr	s16, [r6]
		if(CurrentVelocity[LEFT] > 500)
 800a2a8:	f300 811a 	bgt.w	800a4e0 <SelectAction+0x480>
	}while(CurrentVelocity[BODY] != 0);
 800a2ac:	edd4 7a02 	vldr	s15, [r4, #8]
 800a2b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2b8:	d1e8      	bne.n	800a28c <SelectAction+0x22c>
		KeepPulse[LEFT] += target_pulse/2;
 800a2ba:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a414 <SelectAction+0x3b4>
	HAL_Delay(100);
 800a2be:	2064      	movs	r0, #100	; 0x64
 800a2c0:	f004 fd76 	bl	800edb0 <HAL_Delay>
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a2c4:	edd9 7a00 	vldr	s15, [r9]
 800a2c8:	eddf 6a44 	vldr	s13, [pc, #272]	; 800a3dc <SelectAction+0x37c>
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a2cc:	4942      	ldr	r1, [pc, #264]	; (800a3d8 <SelectAction+0x378>)
		KeepPulse[LEFT] += target_pulse/2;
 800a2ce:	f8db 2000 	ldr.w	r2, [fp]
		KeepPulse[RIGHT] -= target_pulse/2;
 800a2d2:	f8db 3004 	ldr.w	r3, [fp, #4]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a2d6:	ed91 7a00 	vldr	s14, [r1]
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a2da:	ee77 6aa6 	vadd.f32	s13, s15, s13
		KeepPulse[LEFT] += target_pulse/2;
 800a2de:	f502 5250 	add.w	r2, r2, #13312	; 0x3400
 800a2e2:	322b      	adds	r2, #43	; 0x2b
		KeepPulse[RIGHT] -= target_pulse/2;
 800a2e4:	f5a3 5350 	sub.w	r3, r3, #13312	; 0x3400
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a2e8:	eef4 6ac7 	vcmpe.f32	s13, s14
	TargetAngularV = 0;
 800a2ec:	2000      	movs	r0, #0
		KeepPulse[RIGHT] -= target_pulse/2;
 800a2ee:	3b2b      	subs	r3, #43	; 0x2b
		KeepPulse[LEFT] += target_pulse/2;
 800a2f0:	f8cb 2000 	str.w	r2, [fp]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Pos.Dir = right;
 800a2f8:	f04f 0201 	mov.w	r2, #1
		KeepPulse[RIGHT] -= target_pulse/2;
 800a2fc:	f8cb 3004 	str.w	r3, [fp, #4]
	TargetAngularV = 0;
 800a300:	6028      	str	r0, [r5, #0]
	Pos.Dir = right;
 800a302:	713a      	strb	r2, [r7, #4]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800a304:	dd00      	ble.n	800a308 <SelectAction+0x2a8>
 800a306:	e7fe      	b.n	800a306 <SelectAction+0x2a6>
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a308:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a428 <SelectAction+0x3c8>
 800a30c:	ee77 6aa6 	vadd.f32	s13, s15, s13
		while(TargetAngle > Angle)
 800a310:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a318:	dd00      	ble.n	800a31c <SelectAction+0x2bc>
 800a31a:	e7fe      	b.n	800a31a <SelectAction+0x2ba>
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a31c:	eddf 6a43 	vldr	s13, [pc, #268]	; 800a42c <SelectAction+0x3cc>
 800a320:	ee77 7aa6 	vadd.f32	s15, s15, s13
		while(TargetAngle > Angle)
 800a324:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a32c:	edc9 7a00 	vstr	s15, [r9]
		while(TargetAngle > Angle)
 800a330:	dd0a      	ble.n	800a348 <SelectAction+0x2e8>
			 if( AngularV <= 0)
 800a332:	4a2c      	ldr	r2, [pc, #176]	; (800a3e4 <SelectAction+0x384>)
			 AngularAcceleration = -angular_acceleration[2];
 800a334:	4b2d      	ldr	r3, [pc, #180]	; (800a3ec <SelectAction+0x38c>)
			 if( AngularV <= 0)
 800a336:	edd2 7a00 	vldr	s15, [r2]
			 AngularAcceleration = -angular_acceleration[2];
 800a33a:	6033      	str	r3, [r6, #0]
			 if( AngularV <= 0)
 800a33c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a344:	d900      	bls.n	800a348 <SelectAction+0x2e8>
 800a346:	e7fe      	b.n	800a346 <SelectAction+0x2e6>
		if(CurrentVelocity[LEFT] > 500)
 800a348:	ed9f 8a30 	vldr	s16, [pc, #192]	; 800a40c <SelectAction+0x3ac>
		TargetVelocity[BODY] = 0;
 800a34c:	f04f 0900 	mov.w	r9, #0
		if(CurrentVelocity[LEFT] > 500)
 800a350:	edd4 7a00 	vldr	s15, [r4]
		TargetVelocity[BODY] = 0;
 800a354:	f8c8 9008 	str.w	r9, [r8, #8]
		if(CurrentVelocity[LEFT] > 500)
 800a358:	eef4 7ac8 	vcmpe.f32	s15, s16
 800a35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Acceleration = 0;
 800a360:	f8ca 9000 	str.w	r9, [sl]
		TargetAngularV = 0;
 800a364:	f8c5 9000 	str.w	r9, [r5]
		AngularAcceleration = 0;
 800a368:	f8c6 9000 	str.w	r9, [r6]
		if(CurrentVelocity[LEFT] > 500)
 800a36c:	f300 80c4 	bgt.w	800a4f8 <SelectAction+0x498>
	}while(CurrentVelocity[BODY] != 0);
 800a370:	edd4 7a02 	vldr	s15, [r4, #8]
 800a374:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a37c:	d1e8      	bne.n	800a350 <SelectAction+0x2f0>
	HAL_Delay(100);
 800a37e:	2064      	movs	r0, #100	; 0x64
 800a380:	f004 fd16 	bl	800edb0 <HAL_Delay>
		KeepPulse[RIGHT] -= target_pulse/2;
 800a384:	e9db 2300 	ldrd	r2, r3, [fp]
		KeepPulse[LEFT] += target_pulse/2;
 800a388:	f502 5250 	add.w	r2, r2, #13312	; 0x3400
		KeepPulse[RIGHT] -= target_pulse/2;
 800a38c:	f5a3 5350 	sub.w	r3, r3, #13312	; 0x3400
 800a390:	3b2b      	subs	r3, #43	; 0x2b
		KeepPulse[LEFT] += target_pulse/2;
 800a392:	322b      	adds	r2, #43	; 0x2b
	PIDChangeFlag(A_VELO_PID, 1);
 800a394:	2000      	movs	r0, #0
 800a396:	2101      	movs	r1, #1
		KeepPulse[RIGHT] -= target_pulse/2;
 800a398:	e9cb 2300 	strd	r2, r3, [fp]
	PIDChangeFlag(A_VELO_PID, 1);
 800a39c:	f004 fb44 	bl	800ea28 <PIDChangeFlag>
	Pos.Dir = back;
 800a3a0:	2303      	movs	r3, #3
	HAL_Delay(200);
 800a3a2:	20c8      	movs	r0, #200	; 0xc8
	Pos.Dir = back;
 800a3a4:	713b      	strb	r3, [r7, #4]
	HAL_Delay(200);
 800a3a6:	f004 fd03 	bl	800edb0 <HAL_Delay>
	Accel(45, ExploreVelocity);
 800a3aa:	4b19      	ldr	r3, [pc, #100]	; (800a410 <SelectAction+0x3b0>)
 800a3ac:	ed93 0a00 	vldr	s0, [r3]
}
 800a3b0:	b003      	add	sp, #12
 800a3b2:	ecbd 8b02 	vpop	{d8}
 800a3b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Accel(45, ExploreVelocity);
 800a3ba:	f7fe bd1d 	b.w	8008df8 <Accel.constprop.5>
 800a3be:	bf00      	nop
 800a3c0:	9999999a 	.word	0x9999999a
 800a3c4:	40f160f9 	.word	0x40f160f9
 800a3c8:	9999999a 	.word	0x9999999a
 800a3cc:	410160f9 	.word	0x410160f9
 800a3d0:	20000000 	.word	0x20000000
 800a3d4:	200048a8 	.word	0x200048a8
 800a3d8:	20000228 	.word	0x20000228
 800a3dc:	3f060a92 	.word	0x3f060a92
 800a3e0:	20000224 	.word	0x20000224
 800a3e4:	20000234 	.word	0x20000234
 800a3e8:	2000022c 	.word	0x2000022c
 800a3ec:	bd2c7bde 	.word	0xbd2c7bde
 800a3f0:	200048a4 	.word	0x200048a4
 800a3f4:	42480000 	.word	0x42480000
 800a3f8:	47c8d25e 	.word	0x47c8d25e
 800a3fc:	20004b3c 	.word	0x20004b3c
 800a400:	200048c4 	.word	0x200048c4
 800a404:	200048d8 	.word	0x200048d8
 800a408:	00000000 	.word	0x00000000
 800a40c:	43fa0000 	.word	0x43fa0000
 800a410:	200049c0 	.word	0x200049c0
 800a414:	20004900 	.word	0x20004900
 800a418:	200048cc 	.word	0x200048cc
 800a41c:	2000490c 	.word	0x2000490c
 800a420:	20004898 	.word	0x20004898
 800a424:	08016fdc 	.word	0x08016fdc
 800a428:	3f860a92 	.word	0x3f860a92
 800a42c:	3fc90fdb 	.word	0x3fc90fdb
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a430:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800a428 <SelectAction+0x3c8>
 800a434:	ee77 6aa6 	vadd.f32	s13, s15, s13
		while(TargetAngle > Angle)
 800a438:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a440:	dd00      	ble.n	800a444 <SelectAction+0x3e4>
 800a442:	e7fe      	b.n	800a442 <SelectAction+0x3e2>
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a444:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 800a42c <SelectAction+0x3cc>
 800a448:	ee77 7aa6 	vadd.f32	s15, s15, s13
		while(TargetAngle > Angle)
 800a44c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800a454:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle > Angle)
 800a458:	dd0b      	ble.n	800a472 <SelectAction+0x412>
			 if( AngularV <= 0)
 800a45a:	4b37      	ldr	r3, [pc, #220]	; (800a538 <SelectAction+0x4d8>)
			 AngularAcceleration = -angular_acceleration[2];
 800a45c:	4e37      	ldr	r6, [pc, #220]	; (800a53c <SelectAction+0x4dc>)
			 if( AngularV <= 0)
 800a45e:	edd3 7a00 	vldr	s15, [r3]
			 AngularAcceleration = -angular_acceleration[2];
 800a462:	4b37      	ldr	r3, [pc, #220]	; (800a540 <SelectAction+0x4e0>)
 800a464:	6033      	str	r3, [r6, #0]
			 if( AngularV <= 0)
 800a466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a46e:	d901      	bls.n	800a474 <SelectAction+0x414>
 800a470:	e7fe      	b.n	800a470 <SelectAction+0x410>
 800a472:	4e32      	ldr	r6, [pc, #200]	; (800a53c <SelectAction+0x4dc>)
 800a474:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800a558 <SelectAction+0x4f8>
 800a478:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800a55c <SelectAction+0x4fc>
 800a47c:	4c31      	ldr	r4, [pc, #196]	; (800a544 <SelectAction+0x4e4>)
		if(CurrentVelocity[LEFT] > 500)
 800a47e:	ed9f 8a32 	vldr	s16, [pc, #200]	; 800a548 <SelectAction+0x4e8>
			printf("回転停止中\r\n");
 800a482:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800a550 <SelectAction+0x4f0>
		TargetVelocity[BODY] = 0;
 800a486:	2700      	movs	r7, #0
		if(CurrentVelocity[LEFT] > 500)
 800a488:	edd4 7a00 	vldr	s15, [r4]
		TargetVelocity[BODY] = 0;
 800a48c:	f8c8 7008 	str.w	r7, [r8, #8]
		if(CurrentVelocity[LEFT] > 500)
 800a490:	eef4 7ac8 	vcmpe.f32	s15, s16
 800a494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Acceleration = 0;
 800a498:	f8ca 7000 	str.w	r7, [sl]
		TargetAngularV = 0;
 800a49c:	602f      	str	r7, [r5, #0]
		AngularAcceleration = 0;
 800a49e:	6037      	str	r7, [r6, #0]
		if(CurrentVelocity[LEFT] > 500)
 800a4a0:	dc3e      	bgt.n	800a520 <SelectAction+0x4c0>
	}while(CurrentVelocity[BODY] != 0);
 800a4a2:	edd4 7a02 	vldr	s15, [r4, #8]
 800a4a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ae:	d1eb      	bne.n	800a488 <SelectAction+0x428>
	HAL_Delay(100);
 800a4b0:	2064      	movs	r0, #100	; 0x64
 800a4b2:	f004 fc7d 	bl	800edb0 <HAL_Delay>
		KeepPulse[LEFT] += target_pulse/2;
 800a4b6:	4925      	ldr	r1, [pc, #148]	; (800a54c <SelectAction+0x4ec>)
		KeepPulse[RIGHT] -= target_pulse/2;
 800a4b8:	e9d1 2300 	ldrd	r2, r3, [r1]
		KeepPulse[LEFT] += target_pulse/2;
 800a4bc:	f502 5250 	add.w	r2, r2, #13312	; 0x3400
		KeepPulse[RIGHT] -= target_pulse/2;
 800a4c0:	f5a3 5350 	sub.w	r3, r3, #13312	; 0x3400
		KeepPulse[LEFT] += target_pulse/2;
 800a4c4:	322b      	adds	r2, #43	; 0x2b
		KeepPulse[RIGHT] -= target_pulse/2;
 800a4c6:	3b2b      	subs	r3, #43	; 0x2b
 800a4c8:	e9c1 2300 	strd	r2, r3, [r1]
		EmitterON();
 800a4cc:	f003 fec2 	bl	800e254 <EmitterON>
		HAL_Delay(100);
 800a4d0:	2064      	movs	r0, #100	; 0x64
 800a4d2:	f004 fc6d 	bl	800edb0 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	2000      	movs	r0, #0
 800a4da:	f004 faa5 	bl	800ea28 <PIDChangeFlag>
 800a4de:	e764      	b.n	800a3aa <SelectAction+0x34a>
			printf("回転停止中\r\n");
 800a4e0:	4658      	mov	r0, fp
 800a4e2:	f009 fa9b 	bl	8013a1c <puts>
	}while(CurrentVelocity[BODY] != 0);
 800a4e6:	edd4 7a02 	vldr	s15, [r4, #8]
 800a4ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4f2:	f47f aecb 	bne.w	800a28c <SelectAction+0x22c>
 800a4f6:	e6e0      	b.n	800a2ba <SelectAction+0x25a>
			printf("回転停止中\r\n");
 800a4f8:	4815      	ldr	r0, [pc, #84]	; (800a550 <SelectAction+0x4f0>)
 800a4fa:	f009 fa8f 	bl	8013a1c <puts>
	}while(CurrentVelocity[BODY] != 0);
 800a4fe:	edd4 7a02 	vldr	s15, [r4, #8]
 800a502:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a50a:	f47f af21 	bne.w	800a350 <SelectAction+0x2f0>
 800a50e:	e736      	b.n	800a37e <SelectAction+0x31e>
				updateRealSearch();
 800a510:	f003 fab6 	bl	800da80 <updateRealSearch>
				Calc = 1;
 800a514:	4a0f      	ldr	r2, [pc, #60]	; (800a554 <SelectAction+0x4f4>)
 800a516:	f8db 8008 	ldr.w	r8, [fp, #8]
 800a51a:	2301      	movs	r3, #1
 800a51c:	6013      	str	r3, [r2, #0]
 800a51e:	e64c      	b.n	800a1ba <SelectAction+0x15a>
			printf("回転停止中\r\n");
 800a520:	4648      	mov	r0, r9
 800a522:	f009 fa7b 	bl	8013a1c <puts>
	}while(CurrentVelocity[BODY] != 0);
 800a526:	edd4 7a02 	vldr	s15, [r4, #8]
 800a52a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a532:	d1a9      	bne.n	800a488 <SelectAction+0x428>
 800a534:	e7bc      	b.n	800a4b0 <SelectAction+0x450>
 800a536:	bf00      	nop
 800a538:	20000234 	.word	0x20000234
 800a53c:	2000022c 	.word	0x2000022c
 800a540:	bd2c7bde 	.word	0xbd2c7bde
 800a544:	200048d8 	.word	0x200048d8
 800a548:	43fa0000 	.word	0x43fa0000
 800a54c:	20004900 	.word	0x20004900
 800a550:	08016fdc 	.word	0x08016fdc
 800a554:	20004b3c 	.word	0x20004b3c
 800a558:	20000224 	.word	0x20000224
 800a55c:	20004898 	.word	0x20004898

0800a560 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 800a560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a564:	499c      	ldr	r1, [pc, #624]	; (800a7d8 <Explore_IT+0x278>)
 800a566:	4f9d      	ldr	r7, [pc, #628]	; (800a7dc <Explore_IT+0x27c>)
 800a568:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a56a:	489d      	ldr	r0, [pc, #628]	; (800a7e0 <Explore_IT+0x280>)
	TIM4->CNT = INITIAL_PULSE;

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a56c:	eddf 6a9d 	vldr	s13, [pc, #628]	; 800a7e4 <Explore_IT+0x284>
//	}


	//移動量 mm/msを積算

	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a570:	4e9d      	ldr	r6, [pc, #628]	; (800a7e8 <Explore_IT+0x288>)
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a572:	4d9e      	ldr	r5, [pc, #632]	; (800a7ec <Explore_IT+0x28c>)
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a574:	4c9e      	ldr	r4, [pc, #632]	; (800a7f0 <Explore_IT+0x290>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a576:	f247 532f 	movw	r3, #29999	; 0x752f
 800a57a:	1a9a      	subs	r2, r3, r2
{
 800a57c:	ed2d 8b02 	vpush	{d8}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a580:	603a      	str	r2, [r7, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a582:	624b      	str	r3, [r1, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a584:	6a41      	ldr	r1, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a586:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a588:	1a5b      	subs	r3, r3, r1
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a592:	ee07 2a90 	vmov	s15, r2
 800a596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a59a:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a59e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a5a2:	6830      	ldr	r0, [r6, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a5a4:	6871      	ldr	r1, [r6, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a5a6:	607b      	str	r3, [r7, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a5a8:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a5ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a5b0:	ee66 6a86 	vmul.f32	s13, s13, s12
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a5b4:	440b      	add	r3, r1
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a5b6:	4402      	add	r2, r0
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a5b8:	18d7      	adds	r7, r2, r3
	ZGyro = ReadIMU(0x37, 0x38);
 800a5ba:	2138      	movs	r1, #56	; 0x38
 800a5bc:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a5be:	ed85 7a01 	vstr	s14, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a5c2:	edc5 6a02 	vstr	s13, [r5, #8]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a5c6:	e9c6 3701 	strd	r3, r7, [r6, #4]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a5ca:	6032      	str	r2, [r6, #0]
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a5cc:	edc5 7a00 	vstr	s15, [r5]
	ZGyro = ReadIMU(0x37, 0x38);
 800a5d0:	f003 fce4 	bl	800df9c <ReadIMU>
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a5d4:	4a87      	ldr	r2, [pc, #540]	; (800a7f4 <Explore_IT+0x294>)
	ZGyro = ReadIMU(0x37, 0x38);
 800a5d6:	4b88      	ldr	r3, [pc, #544]	; (800a7f8 <Explore_IT+0x298>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a5d8:	edd2 7a00 	vldr	s15, [r2]
	ZGyro = ReadIMU(0x37, 0x38);
 800a5dc:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a5e0:	ed9f 8a86 	vldr	s16, [pc, #536]	; 800a7fc <Explore_IT+0x29c>
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a5e4:	6820      	ldr	r0, [r4, #0]
    zg_last = zg_law;
	Angle += AngularV * T1;
 800a5e6:	4e86      	ldr	r6, [pc, #536]	; (800a800 <Explore_IT+0x2a0>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a5e8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a5ec:	ee20 8a08 	vmul.f32	s16, s0, s16
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a5f0:	f7fd fee2 	bl	80083b8 <__aeabi_f2d>
 800a5f4:	a372      	add	r3, pc, #456	; (adr r3, 800a7c0 <Explore_IT+0x260>)
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	f7fd ff35 	bl	8008468 <__aeabi_dmul>
 800a5fe:	4680      	mov	r8, r0
 800a600:	ee18 0a10 	vmov	r0, s16
 800a604:	4689      	mov	r9, r1
 800a606:	f7fd fed7 	bl	80083b8 <__aeabi_f2d>
 800a60a:	a36f      	add	r3, pc, #444	; (adr r3, 800a7c8 <Explore_IT+0x268>)
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	f7fd ff2a 	bl	8008468 <__aeabi_dmul>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4640      	mov	r0, r8
 800a61a:	4649      	mov	r1, r9
 800a61c:	f7fd fd6e 	bl	80080fc <__adddf3>
 800a620:	f7fe fa1a 	bl	8008a58 <__aeabi_d2f>
 800a624:	ee07 0a90 	vmov	s15, r0
	Angle += AngularV * T1;
 800a628:	edd6 0a00 	vldr	s1, [r6]
 800a62c:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800a804 <Explore_IT+0x2a4>
#endif

	int wall_d =0,wall_l =0,wall_r =0,wall_f=0;
		int ang_out=0;

		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 800a630:	4b75      	ldr	r3, [pc, #468]	; (800a808 <Explore_IT+0x2a8>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a632:	4976      	ldr	r1, [pc, #472]	; (800a80c <Explore_IT+0x2ac>)
		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 800a634:	791a      	ldrb	r2, [r3, #4]
    zg_last = zg_law;
 800a636:	ed84 8a00 	vstr	s16, [r4]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a63a:	eef1 7a67 	vneg.f32	s15, s15
	Angle += AngularV * T1;
 800a63e:	eee7 0a87 	vfma.f32	s1, s15, s14
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a642:	edc1 7a00 	vstr	s15, [r1]
	Angle += AngularV * T1;
 800a646:	edc6 0a00 	vstr	s1, [r6]
		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 800a64a:	b122      	cbz	r2, 800a656 <Explore_IT+0xf6>
 800a64c:	799b      	ldrb	r3, [r3, #6]
 800a64e:	2b06      	cmp	r3, #6
 800a650:	d001      	beq.n	800a656 <Explore_IT+0xf6>
 800a652:	2b03      	cmp	r3, #3
 800a654:	d113      	bne.n	800a67e <Explore_IT+0x11e>
		{
			if( Pid[A_VELO_PID].flag == 1 )
 800a656:	4b6e      	ldr	r3, [pc, #440]	; (800a810 <Explore_IT+0x2b0>)
 800a658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a65a:	2a01      	cmp	r2, #1
 800a65c:	d06a      	beq.n	800a734 <Explore_IT+0x1d4>
			{
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
				TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
			}
			else if( Pid[D_WALL_PID].flag == 1 )
 800a65e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a660:	2801      	cmp	r0, #1
 800a662:	d074      	beq.n	800a74e <Explore_IT+0x1ee>
			{
				wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
				TargetAngularV = (float)wall_d*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
			}
			else if( Pid[L_WALL_PID].flag == 1 )
 800a664:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a668:	2a01      	cmp	r2, #1
 800a66a:	d046      	beq.n	800a6fa <Explore_IT+0x19a>
			{
				wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
				TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。

			}
			else if( Pid[R_WALL_PID].flag == 1 )
 800a66c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a670:	2a01      	cmp	r2, #1
 800a672:	f000 809b 	beq.w	800a7ac <Explore_IT+0x24c>
			{
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
			}
			else if( Pid[F_WALL_PID].flag == 1)
 800a676:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d073      	beq.n	800a766 <Explore_IT+0x206>
 800a67e:	4b65      	ldr	r3, [pc, #404]	; (800a814 <Explore_IT+0x2b4>)
 800a680:	4c65      	ldr	r4, [pc, #404]	; (800a818 <Explore_IT+0x2b8>)
 800a682:	edd3 7a00 	vldr	s15, [r3]

				//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
			}
		}

	TargetVelocity[BODY] += Acceleration;
 800a686:	4965      	ldr	r1, [pc, #404]	; (800a81c <Explore_IT+0x2bc>)
	//AngularAcceleration += AngularLeapsity;
	TargetAngularV += AngularAcceleration;
 800a688:	4a65      	ldr	r2, [pc, #404]	; (800a820 <Explore_IT+0x2c0>)
	TargetVelocity[BODY] += Acceleration;
 800a68a:	ed91 5a00 	vldr	s10, [r1]
 800a68e:	ed94 7a02 	vldr	s14, [r4, #8]
	TargetAngularV += AngularAcceleration;
 800a692:	edd2 5a00 	vldr	s11, [r2]
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a696:	eddf 6a63 	vldr	s13, [pc, #396]	; 800a824 <Explore_IT+0x2c4>
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a69a:	ed9f 6a63 	vldr	s12, [pc, #396]	; 800a828 <Explore_IT+0x2c8>

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a69e:	edd5 0a00 	vldr	s1, [r5]
 800a6a2:	4e62      	ldr	r6, [pc, #392]	; (800a82c <Explore_IT+0x2cc>)
	TargetVelocity[BODY] += Acceleration;
 800a6a4:	ee37 7a05 	vadd.f32	s14, s14, s10
	TargetAngularV += AngularAcceleration;
 800a6a8:	ee77 7aa5 	vadd.f32	s15, s15, s11
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a6ac:	eef0 5a47 	vmov.f32	s11, s14
 800a6b0:	eee7 5ae6 	vfms.f32	s11, s15, s13
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a6b4:	2004      	movs	r0, #4
	TargetVelocity[BODY] += Acceleration;
 800a6b6:	ed84 7a02 	vstr	s14, [r4, #8]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a6ba:	eeb0 7a65 	vmov.f32	s14, s11
 800a6be:	eea7 7a86 	vfma.f32	s14, s15, s12
	TargetAngularV += AngularAcceleration;
 800a6c2:	edc3 7a00 	vstr	s15, [r3]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a6c6:	eeb0 0a47 	vmov.f32	s0, s14
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a6ca:	edc4 5a01 	vstr	s11, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a6ce:	ed84 7a00 	vstr	s14, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a6d2:	f004 f9bf 	bl	800ea54 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a6d6:	edd5 0a01 	vldr	s1, [r5, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a6da:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a6dc:	ed94 0a01 	vldr	s0, [r4, #4]
 800a6e0:	2005      	movs	r0, #5
 800a6e2:	f004 f9b7 	bl	800ea54 <PIDControl>

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );

}
 800a6e6:	ecbd 8b02 	vpop	{d8}
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a6ea:	4b51      	ldr	r3, [pc, #324]	; (800a830 <Explore_IT+0x2d0>)
 800a6ec:	4601      	mov	r1, r0
 800a6ee:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a6f0:	6830      	ldr	r0, [r6, #0]
}
 800a6f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a6f6:	f003 be53 	b.w	800e3a0 <Motor_Switch>
				wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 800a6fa:	4a4e      	ldr	r2, [pc, #312]	; (800a834 <Explore_IT+0x2d4>)
 800a6fc:	4b4e      	ldr	r3, [pc, #312]	; (800a838 <Explore_IT+0x2d8>)
 800a6fe:	edd2 0a02 	vldr	s1, [r2, #8]
 800a702:	ed93 0a02 	vldr	s0, [r3, #8]
 800a706:	4c44      	ldr	r4, [pc, #272]	; (800a818 <Explore_IT+0x2b8>)
 800a708:	2002      	movs	r0, #2
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800a70a:	f004 f9a3 	bl	800ea54 <PIDControl>
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800a70e:	ee07 0a90 	vmov	s15, r0
 800a712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a716:	ee17 0a90 	vmov	r0, s15
 800a71a:	f7fd fe4d 	bl	80083b8 <__aeabi_f2d>
 800a71e:	a32c      	add	r3, pc, #176	; (adr r3, 800a7d0 <Explore_IT+0x270>)
 800a720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a724:	f7fd fea0 	bl	8008468 <__aeabi_dmul>
 800a728:	f7fe f996 	bl	8008a58 <__aeabi_d2f>
 800a72c:	4b39      	ldr	r3, [pc, #228]	; (800a814 <Explore_IT+0x2b4>)
 800a72e:	ee07 0a90 	vmov	s15, r0
 800a732:	e7a8      	b.n	800a686 <Explore_IT+0x126>
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a734:	4b41      	ldr	r3, [pc, #260]	; (800a83c <Explore_IT+0x2dc>)
 800a736:	4c38      	ldr	r4, [pc, #224]	; (800a818 <Explore_IT+0x2b8>)
 800a738:	ed93 0a00 	vldr	s0, [r3]
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a73c:	2000      	movs	r0, #0
 800a73e:	f004 f989 	bl	800ea54 <PIDControl>
				TargetAngularV = (float)ang_out;
 800a742:	ee07 0a90 	vmov	s15, r0
 800a746:	4b33      	ldr	r3, [pc, #204]	; (800a814 <Explore_IT+0x2b4>)
 800a748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a74c:	e79b      	b.n	800a686 <Explore_IT+0x126>
				wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800a74e:	4b3a      	ldr	r3, [pc, #232]	; (800a838 <Explore_IT+0x2d8>)
 800a750:	4a3b      	ldr	r2, [pc, #236]	; (800a840 <Explore_IT+0x2e0>)
 800a752:	edd3 0a01 	vldr	s1, [r3, #4]
 800a756:	edd2 7a00 	vldr	s15, [r2]
 800a75a:	ed93 0a02 	vldr	s0, [r3, #8]
 800a75e:	4c2e      	ldr	r4, [pc, #184]	; (800a818 <Explore_IT+0x2b8>)
 800a760:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a764:	e7d1      	b.n	800a70a <Explore_IT+0x1aa>
				wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 800a766:	4b34      	ldr	r3, [pc, #208]	; (800a838 <Explore_IT+0x2d8>)
 800a768:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800a844 <Explore_IT+0x2e4>
 800a76c:	edd3 7a00 	vldr	s15, [r3]
 800a770:	edd3 0a03 	vldr	s1, [r3, #12]
				TargetVelocity[BODY] = (float)wall_f*0.001;
 800a774:	4c28      	ldr	r4, [pc, #160]	; (800a818 <Explore_IT+0x2b8>)
				wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 800a776:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a77a:	2008      	movs	r0, #8
 800a77c:	f004 f96a 	bl	800ea54 <PIDControl>
				TargetVelocity[BODY] = (float)wall_f*0.001;
 800a780:	ee07 0a90 	vmov	s15, r0
 800a784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a788:	ee17 0a90 	vmov	r0, s15
 800a78c:	f7fd fe14 	bl	80083b8 <__aeabi_f2d>
 800a790:	a30f      	add	r3, pc, #60	; (adr r3, 800a7d0 <Explore_IT+0x270>)
 800a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a796:	f7fd fe67 	bl	8008468 <__aeabi_dmul>
 800a79a:	f7fe f95d 	bl	8008a58 <__aeabi_d2f>
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a79e:	4b27      	ldr	r3, [pc, #156]	; (800a83c <Explore_IT+0x2dc>)
				TargetVelocity[BODY] = (float)wall_f*0.001;
 800a7a0:	60a0      	str	r0, [r4, #8]
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a7a2:	ed93 0a00 	vldr	s0, [r3]
 800a7a6:	edd6 0a00 	vldr	s1, [r6]
 800a7aa:	e7c7      	b.n	800a73c <Explore_IT+0x1dc>
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800a7ac:	4a22      	ldr	r2, [pc, #136]	; (800a838 <Explore_IT+0x2d8>)
 800a7ae:	4b21      	ldr	r3, [pc, #132]	; (800a834 <Explore_IT+0x2d4>)
 800a7b0:	edd2 0a01 	vldr	s1, [r2, #4]
 800a7b4:	ed93 0a01 	vldr	s0, [r3, #4]
 800a7b8:	4c17      	ldr	r4, [pc, #92]	; (800a818 <Explore_IT+0x2b8>)
 800a7ba:	2003      	movs	r0, #3
 800a7bc:	e7a5      	b.n	800a70a <Explore_IT+0x1aa>
 800a7be:	bf00      	nop
 800a7c0:	7ae147ae 	.word	0x7ae147ae
 800a7c4:	3fefae14 	.word	0x3fefae14
 800a7c8:	47ae147b 	.word	0x47ae147b
 800a7cc:	3f847ae1 	.word	0x3f847ae1
 800a7d0:	d2f1a9fc 	.word	0xd2f1a9fc
 800a7d4:	3f50624d 	.word	0x3f50624d
 800a7d8:	40000400 	.word	0x40000400
 800a7dc:	20004a88 	.word	0x20004a88
 800a7e0:	40000800 	.word	0x40000800
 800a7e4:	3f8177cd 	.word	0x3f8177cd
 800a7e8:	200048cc 	.word	0x200048cc
 800a7ec:	200048d8 	.word	0x200048d8
 800a7f0:	2000021c 	.word	0x2000021c
 800a7f4:	200002d4 	.word	0x200002d4
 800a7f8:	200002d0 	.word	0x200002d0
 800a7fc:	3a8b7d78 	.word	0x3a8b7d78
 800a800:	20000228 	.word	0x20000228
 800a804:	3a83126f 	.word	0x3a83126f
 800a808:	20000000 	.word	0x20000000
 800a80c:	20000234 	.word	0x20000234
 800a810:	20000318 	.word	0x20000318
 800a814:	200048a8 	.word	0x200048a8
 800a818:	20004898 	.word	0x20004898
 800a81c:	20000224 	.word	0x20000224
 800a820:	2000022c 	.word	0x2000022c
 800a824:	4189999a 	.word	0x4189999a
 800a828:	4209999a 	.word	0x4209999a
 800a82c:	200049c4 	.word	0x200049c4
 800a830:	200049e0 	.word	0x200049e0
 800a834:	200049cc 	.word	0x200049cc
 800a838:	2000490c 	.word	0x2000490c
 800a83c:	200048c4 	.word	0x200048c4
 800a840:	200048bc 	.word	0x200048bc
 800a844:	457a0000 	.word	0x457a0000

0800a848 <WritingFree_IT>:
void WritingFree_IT()
{
 800a848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a84c:	4960      	ldr	r1, [pc, #384]	; (800a9d0 <WritingFree_IT+0x188>)
 800a84e:	4f61      	ldr	r7, [pc, #388]	; (800a9d4 <WritingFree_IT+0x18c>)
 800a850:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a852:	4861      	ldr	r0, [pc, #388]	; (800a9d8 <WritingFree_IT+0x190>)
	TIM4->CNT = INITIAL_PULSE;

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a854:	eddf 6a61 	vldr	s13, [pc, #388]	; 800a9dc <WritingFree_IT+0x194>
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a858:	4e61      	ldr	r6, [pc, #388]	; (800a9e0 <WritingFree_IT+0x198>)
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a85a:	4c62      	ldr	r4, [pc, #392]	; (800a9e4 <WritingFree_IT+0x19c>)
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a85c:	4d62      	ldr	r5, [pc, #392]	; (800a9e8 <WritingFree_IT+0x1a0>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a85e:	f247 532f 	movw	r3, #29999	; 0x752f
 800a862:	1a9a      	subs	r2, r3, r2
{
 800a864:	ed2d 8b02 	vpush	{d8}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a868:	603a      	str	r2, [r7, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a86a:	624b      	str	r3, [r1, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a86c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a86e:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a870:	1a5b      	subs	r3, r3, r1
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a872:	ee07 3a90 	vmov	s15, r3
 800a876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a87a:	ee07 2a90 	vmov	s15, r2
 800a87e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a882:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a886:	ee67 7aa6 	vmul.f32	s15, s15, s13
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a88a:	6830      	ldr	r0, [r6, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a88c:	6871      	ldr	r1, [r6, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a88e:	607b      	str	r3, [r7, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a890:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a894:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a898:	ee66 6a86 	vmul.f32	s13, s13, s12
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a89c:	440b      	add	r3, r1
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a89e:	4402      	add	r2, r0
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a8a0:	18d7      	adds	r7, r2, r3
	ZGyro = ReadIMU(0x37, 0x38);
 800a8a2:	2138      	movs	r1, #56	; 0x38
 800a8a4:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a8a6:	edc4 6a02 	vstr	s13, [r4, #8]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a8aa:	ed84 7a01 	vstr	s14, [r4, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a8ae:	e9c6 3701 	strd	r3, r7, [r6, #4]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a8b2:	6032      	str	r2, [r6, #0]
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a8b4:	edc4 7a00 	vstr	s15, [r4]
	ZGyro = ReadIMU(0x37, 0x38);
 800a8b8:	f003 fb70 	bl	800df9c <ReadIMU>
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a8bc:	4a4b      	ldr	r2, [pc, #300]	; (800a9ec <WritingFree_IT+0x1a4>)
	ZGyro = ReadIMU(0x37, 0x38);
 800a8be:	4b4c      	ldr	r3, [pc, #304]	; (800a9f0 <WritingFree_IT+0x1a8>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a8c0:	edd2 7a00 	vldr	s15, [r2]
	ZGyro = ReadIMU(0x37, 0x38);
 800a8c4:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a8c8:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 800a9f4 <WritingFree_IT+0x1ac>
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a8cc:	6828      	ldr	r0, [r5, #0]
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
	TargetVelocity[BODY] += Acceleration;
 800a8ce:	4e4a      	ldr	r6, [pc, #296]	; (800a9f8 <WritingFree_IT+0x1b0>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a8d0:	4f4a      	ldr	r7, [pc, #296]	; (800a9fc <WritingFree_IT+0x1b4>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a8d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a8d6:	ee20 8a08 	vmul.f32	s16, s0, s16
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a8da:	f7fd fd6d 	bl	80083b8 <__aeabi_f2d>
 800a8de:	a338      	add	r3, pc, #224	; (adr r3, 800a9c0 <WritingFree_IT+0x178>)
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	f7fd fdc0 	bl	8008468 <__aeabi_dmul>
 800a8e8:	4680      	mov	r8, r0
 800a8ea:	ee18 0a10 	vmov	r0, s16
 800a8ee:	4689      	mov	r9, r1
 800a8f0:	f7fd fd62 	bl	80083b8 <__aeabi_f2d>
 800a8f4:	a334      	add	r3, pc, #208	; (adr r3, 800a9c8 <WritingFree_IT+0x180>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7fd fdb5 	bl	8008468 <__aeabi_dmul>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4640      	mov	r0, r8
 800a904:	4649      	mov	r1, r9
 800a906:	f7fd fbf9 	bl	80080fc <__adddf3>
 800a90a:	f7fe f8a5 	bl	8008a58 <__aeabi_d2f>
	AngularAcceleration += AngularLeapsity;
 800a90e:	4b3c      	ldr	r3, [pc, #240]	; (800aa00 <WritingFree_IT+0x1b8>)
 800a910:	493c      	ldr	r1, [pc, #240]	; (800aa04 <WritingFree_IT+0x1bc>)
 800a912:	edd3 3a00 	vldr	s7, [r3]
	TargetVelocity[BODY] += Acceleration;
 800a916:	4b3c      	ldr	r3, [pc, #240]	; (800aa08 <WritingFree_IT+0x1c0>)
	AngularAcceleration += AngularLeapsity;
 800a918:	edd1 6a00 	vldr	s13, [r1]
	TargetAngularV += AngularAcceleration;
 800a91c:	4a3b      	ldr	r2, [pc, #236]	; (800aa0c <WritingFree_IT+0x1c4>)
	TargetVelocity[BODY] += Acceleration;
 800a91e:	edd3 5a00 	vldr	s11, [r3]
 800a922:	ed96 7a02 	vldr	s14, [r6, #8]
	TargetAngularV += AngularAcceleration;
 800a926:	edd2 7a00 	vldr	s15, [r2]

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a92a:	eddf 4a39 	vldr	s9, [pc, #228]	; 800aa10 <WritingFree_IT+0x1c8>
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a92e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800aa14 <WritingFree_IT+0x1cc>
	Angle += AngularV * T1;
 800a932:	4b39      	ldr	r3, [pc, #228]	; (800aa18 <WritingFree_IT+0x1d0>)
 800a934:	ed9f 4a39 	vldr	s8, [pc, #228]	; 800aa1c <WritingFree_IT+0x1d4>
 800a938:	ed93 6a00 	vldr	s12, [r3]

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a93c:	edd4 0a00 	vldr	s1, [r4]
    zg_last = zg_law;
 800a940:	ed85 8a00 	vstr	s16, [r5]
	AngularAcceleration += AngularLeapsity;
 800a944:	ee76 6aa3 	vadd.f32	s13, s13, s7
	TargetVelocity[BODY] += Acceleration;
 800a948:	ee37 7a25 	vadd.f32	s14, s14, s11
	TargetAngularV += AngularAcceleration;
 800a94c:	ee76 7aa7 	vadd.f32	s15, s13, s15
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a950:	eef0 3a47 	vmov.f32	s7, s14
 800a954:	eee7 3ae4 	vfms.f32	s7, s15, s9
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a958:	4d31      	ldr	r5, [pc, #196]	; (800aa20 <WritingFree_IT+0x1d8>)
	AngularAcceleration += AngularLeapsity;
 800a95a:	edc1 6a00 	vstr	s13, [r1]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a95e:	eef0 6a63 	vmov.f32	s13, s7
 800a962:	eee7 6a85 	vfma.f32	s13, s15, s10
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a966:	ee05 0a90 	vmov	s11, r0
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a96a:	eeb0 5a66 	vmov.f32	s10, s13
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a96e:	eef1 5a65 	vneg.f32	s11, s11
	Angle += AngularV * T1;
 800a972:	eef0 6a46 	vmov.f32	s13, s12
 800a976:	eee5 6a84 	vfma.f32	s13, s11, s8
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a97a:	2004      	movs	r0, #4
 800a97c:	eeb0 0a45 	vmov.f32	s0, s10
	TargetVelocity[BODY] += Acceleration;
 800a980:	ed86 7a02 	vstr	s14, [r6, #8]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a984:	edc6 3a01 	vstr	s7, [r6, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a988:	ed86 5a00 	vstr	s10, [r6]
	Angle += AngularV * T1;
 800a98c:	edc3 6a00 	vstr	s13, [r3]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a990:	edc7 5a00 	vstr	s11, [r7]
	TargetAngularV += AngularAcceleration;
 800a994:	edc2 7a00 	vstr	s15, [r2]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a998:	f004 f85c 	bl	800ea54 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a99c:	edd4 0a01 	vldr	s1, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a9a0:	6028      	str	r0, [r5, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a9a2:	ed96 0a01 	vldr	s0, [r6, #4]
 800a9a6:	2005      	movs	r0, #5
 800a9a8:	f004 f854 	bl	800ea54 <PIDControl>

	Motor_Switch( VelocityLeftOut, VelocityRightOut );


}
 800a9ac:	ecbd 8b02 	vpop	{d8}
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a9b0:	4b1c      	ldr	r3, [pc, #112]	; (800aa24 <WritingFree_IT+0x1dc>)
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a9b6:	6828      	ldr	r0, [r5, #0]
}
 800a9b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a9bc:	f003 bcf0 	b.w	800e3a0 <Motor_Switch>
 800a9c0:	7ae147ae 	.word	0x7ae147ae
 800a9c4:	3fefae14 	.word	0x3fefae14
 800a9c8:	47ae147b 	.word	0x47ae147b
 800a9cc:	3f847ae1 	.word	0x3f847ae1
 800a9d0:	40000400 	.word	0x40000400
 800a9d4:	20004a88 	.word	0x20004a88
 800a9d8:	40000800 	.word	0x40000800
 800a9dc:	3f8177cd 	.word	0x3f8177cd
 800a9e0:	200048cc 	.word	0x200048cc
 800a9e4:	200048d8 	.word	0x200048d8
 800a9e8:	20000220 	.word	0x20000220
 800a9ec:	200002d4 	.word	0x200002d4
 800a9f0:	200002d0 	.word	0x200002d0
 800a9f4:	3a8b7d78 	.word	0x3a8b7d78
 800a9f8:	20004898 	.word	0x20004898
 800a9fc:	20000234 	.word	0x20000234
 800aa00:	20000230 	.word	0x20000230
 800aa04:	2000022c 	.word	0x2000022c
 800aa08:	20000224 	.word	0x20000224
 800aa0c:	200048a8 	.word	0x200048a8
 800aa10:	4189999a 	.word	0x4189999a
 800aa14:	4209999a 	.word	0x4209999a
 800aa18:	20000228 	.word	0x20000228
 800aa1c:	3a83126f 	.word	0x3a83126f
 800aa20:	200049c4 	.word	0x200049c4
 800aa24:	200049e0 	.word	0x200049e0

0800aa28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa28:	b530      	push	{r4, r5, lr}
	if( htim == &htim1)
 800aa2a:	4b24      	ldr	r3, [pc, #144]	; (800aabc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800aa2c:	4298      	cmp	r0, r3
{
 800aa2e:	b083      	sub	sp, #12
	if( htim == &htim1)
 800aa30:	d004      	beq.n	800aa3c <HAL_TIM_PeriodElapsedCallback+0x14>
		default :
			break;
		}
	}

	if( htim == &htim8)
 800aa32:	4b23      	ldr	r3, [pc, #140]	; (800aac0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800aa34:	4298      	cmp	r0, r3
 800aa36:	d014      	beq.n	800aa62 <HAL_TIM_PeriodElapsedCallback+0x3a>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
	}
}
 800aa38:	b003      	add	sp, #12
 800aa3a:	bd30      	pop	{r4, r5, pc}
		timer1 += t;
 800aa3c:	4a21      	ldr	r2, [pc, #132]	; (800aac4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800aa3e:	4c22      	ldr	r4, [pc, #136]	; (800aac8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
		switch(IT_mode){
 800aa40:	4922      	ldr	r1, [pc, #136]	; (800aacc <HAL_TIM_PeriodElapsedCallback+0xa4>)
		timer1 += t;
 800aa42:	6813      	ldr	r3, [r2, #0]
 800aa44:	6824      	ldr	r4, [r4, #0]
		switch(IT_mode){
 800aa46:	6809      	ldr	r1, [r1, #0]
		timer1 += t;
 800aa48:	4423      	add	r3, r4
		switch(IT_mode){
 800aa4a:	2906      	cmp	r1, #6
		timer1 += t;
 800aa4c:	6013      	str	r3, [r2, #0]
		switch(IT_mode){
 800aa4e:	d02f      	beq.n	800aab0 <HAL_TIM_PeriodElapsedCallback+0x88>
 800aa50:	2907      	cmp	r1, #7
 800aa52:	d1ee      	bne.n	800aa32 <HAL_TIM_PeriodElapsedCallback+0xa>
 800aa54:	9001      	str	r0, [sp, #4]
			WritingFree_IT();
 800aa56:	f7ff fef7 	bl	800a848 <WritingFree_IT>
 800aa5a:	9801      	ldr	r0, [sp, #4]
	if( htim == &htim8)
 800aa5c:	4b18      	ldr	r3, [pc, #96]	; (800aac0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800aa5e:	4298      	cmp	r0, r3
 800aa60:	d1ea      	bne.n	800aa38 <HAL_TIM_PeriodElapsedCallback+0x10>
		timer8 += t;
 800aa62:	481b      	ldr	r0, [pc, #108]	; (800aad0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800aa64:	4a18      	ldr	r2, [pc, #96]	; (800aac8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800aa66:	6803      	ldr	r3, [r0, #0]
 800aa68:	6812      	ldr	r2, [r2, #0]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800aa6a:	4d1a      	ldr	r5, [pc, #104]	; (800aad4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800aa6c:	4c1a      	ldr	r4, [pc, #104]	; (800aad8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800aa6e:	6829      	ldr	r1, [r5, #0]
		timer8 += t;
 800aa70:	4413      	add	r3, r2
 800aa72:	6003      	str	r3, [r0, #0]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800aa74:	2200      	movs	r2, #0
 800aa76:	200a      	movs	r0, #10
 800aa78:	f003 fcf2 	bl	800e460 <GetWallDataAverage>
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800aa7c:	6869      	ldr	r1, [r5, #4]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800aa7e:	ed84 0a00 	vstr	s0, [r4]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800aa82:	2201      	movs	r2, #1
 800aa84:	200a      	movs	r0, #10
 800aa86:	f003 fceb 	bl	800e460 <GetWallDataAverage>
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800aa8a:	4d14      	ldr	r5, [pc, #80]	; (800aadc <HAL_TIM_PeriodElapsedCallback+0xb4>)
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800aa8c:	ed84 0a01 	vstr	s0, [r4, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800aa90:	6829      	ldr	r1, [r5, #0]
 800aa92:	2202      	movs	r2, #2
 800aa94:	200a      	movs	r0, #10
 800aa96:	f003 fce3 	bl	800e460 <GetWallDataAverage>
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800aa9a:	6869      	ldr	r1, [r5, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800aa9c:	ed84 0a02 	vstr	s0, [r4, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800aaa0:	2203      	movs	r2, #3
 800aaa2:	200a      	movs	r0, #10
 800aaa4:	f003 fcdc 	bl	800e460 <GetWallDataAverage>
 800aaa8:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800aaac:	b003      	add	sp, #12
 800aaae:	bd30      	pop	{r4, r5, pc}
 800aab0:	9001      	str	r0, [sp, #4]
			Explore_IT();
 800aab2:	f7ff fd55 	bl	800a560 <Explore_IT>
			break;
 800aab6:	9801      	ldr	r0, [sp, #4]
 800aab8:	e7bb      	b.n	800aa32 <HAL_TIM_PeriodElapsedCallback+0xa>
 800aaba:	bf00      	nop
 800aabc:	20004d88 	.word	0x20004d88
 800aac0:	20004b40 	.word	0x20004b40
 800aac4:	20004894 	.word	0x20004894
 800aac8:	20004888 	.word	0x20004888
 800aacc:	2000488c 	.word	0x2000488c
 800aad0:	20004890 	.word	0x20004890
 800aad4:	200002bc 	.word	0x200002bc
 800aad8:	2000490c 	.word	0x2000490c
 800aadc:	200002c8 	.word	0x200002c8

0800aae0 <wall_init>:
				FLASH_Write_Word(address+12, Wall[i][j].west);
				address += 16;
			}
	}
}
void wall_init(){
 800aae0:	4972      	ldr	r1, [pc, #456]	; (800acac <wall_init+0x1cc>)
 800aae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800aae6:	2000      	movs	r0, #0
 800aae8:	f101 0902 	add.w	r9, r1, #2
 800aaec:	f101 0804 	add.w	r8, r1, #4
 800aaf0:	f101 0e06 	add.w	lr, r1, #6
 800aaf4:	f101 0c08 	add.w	ip, r1, #8
 800aaf8:	f101 070a 	add.w	r7, r1, #10
 800aafc:	f101 060c 	add.w	r6, r1, #12
 800ab00:	f101 050e 	add.w	r5, r1, #14
 800ab04:	f101 0410 	add.w	r4, r1, #16
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
				Wall[i][j].north = UNKNOWN;
 800ab08:	22aa      	movs	r2, #170	; 0xaa
 800ab0a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800ab0e:	3001      	adds	r0, #1
 800ab10:	2809      	cmp	r0, #9
				Wall[i][j].north = UNKNOWN;
 800ab12:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
 800ab16:	f809 2013 	strb.w	r2, [r9, r3, lsl #1]
 800ab1a:	f808 2013 	strb.w	r2, [r8, r3, lsl #1]
 800ab1e:	f80e 2013 	strb.w	r2, [lr, r3, lsl #1]
 800ab22:	f80c 2013 	strb.w	r2, [ip, r3, lsl #1]
 800ab26:	f807 2013 	strb.w	r2, [r7, r3, lsl #1]
 800ab2a:	f806 2013 	strb.w	r2, [r6, r3, lsl #1]
 800ab2e:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 800ab32:	f804 2013 	strb.w	r2, [r4, r3, lsl #1]
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800ab36:	d1e8      	bne.n	800ab0a <wall_init+0x2a>

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ab38:	f891 7092 	ldrb.w	r7, [r1, #146]	; 0x92
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ab3c:	f891 6034 	ldrb.w	r6, [r1, #52]	; 0x34
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ab40:	f891 5094 	ldrb.w	r5, [r1, #148]	; 0x94
		Wall[n][0].south = WALL;
 800ab44:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
		Wall[0][n].west = WALL;
 800ab48:	7908      	ldrb	r0, [r1, #4]
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ab4a:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
 800ab4e:	f891 e022 	ldrb.w	lr, [r1, #34]	; 0x22
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ab52:	f891 c096 	ldrb.w	ip, [r1, #150]	; 0x96
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ab56:	2301      	movs	r3, #1
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ab58:	f363 0783 	bfi	r7, r3, #2, #2
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ab5c:	f363 0601 	bfi	r6, r3, #0, #2
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ab60:	f363 0583 	bfi	r5, r3, #2, #2
		Wall[n][0].south = WALL;
 800ab64:	f363 1405 	bfi	r4, r3, #4, #2
		Wall[0][n].west = WALL;
 800ab68:	f363 1087 	bfi	r0, r3, #6, #2
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ab6c:	f363 0201 	bfi	r2, r3, #0, #2
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ab70:	f881 7092 	strb.w	r7, [r1, #146]	; 0x92
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ab74:	f881 6034 	strb.w	r6, [r1, #52]	; 0x34
		Wall[n][0].south = WALL;
 800ab78:	f891 7036 	ldrb.w	r7, [r1, #54]	; 0x36
		Wall[0][n].west = WALL;
 800ab7c:	798e      	ldrb	r6, [r1, #6]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ab7e:	f881 5094 	strb.w	r5, [r1, #148]	; 0x94
		Wall[n][0].south = WALL;
 800ab82:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ab86:	f891 5058 	ldrb.w	r5, [r1, #88]	; 0x58
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ab8a:	f891 4098 	ldrb.w	r4, [r1, #152]	; 0x98
		Wall[0][n].west = WALL;
 800ab8e:	7108      	strb	r0, [r1, #4]
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ab90:	f881 2046 	strb.w	r2, [r1, #70]	; 0x46
		Wall[n][0].south = WALL;
 800ab94:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
		Wall[0][n].west = WALL;
 800ab98:	7a0a      	ldrb	r2, [r1, #8]
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ab9a:	f363 0e01 	bfi	lr, r3, #0, #2
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ab9e:	f363 0c83 	bfi	ip, r3, #2, #2
		Wall[n][0].south = WALL;
 800aba2:	f363 1705 	bfi	r7, r3, #4, #2
		Wall[0][n].west = WALL;
 800aba6:	f363 1687 	bfi	r6, r3, #6, #2
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800abaa:	f363 0501 	bfi	r5, r3, #0, #2
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800abae:	f363 0483 	bfi	r4, r3, #2, #2
		Wall[n][0].south = WALL;
 800abb2:	f363 1005 	bfi	r0, r3, #4, #2
		Wall[0][n].west = WALL;
 800abb6:	f363 1287 	bfi	r2, r3, #6, #2
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800abba:	f881 e022 	strb.w	lr, [r1, #34]	; 0x22
		Wall[n][0].south = WALL;
 800abbe:	f881 7036 	strb.w	r7, [r1, #54]	; 0x36
		Wall[0][n].west = WALL;
 800abc2:	718e      	strb	r6, [r1, #6]
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800abc4:	f881 5058 	strb.w	r5, [r1, #88]	; 0x58
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800abc8:	f881 4098 	strb.w	r4, [r1, #152]	; 0x98
		Wall[n][0].south = WALL;
 800abcc:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
		Wall[0][n].west = WALL;
 800abd0:	720a      	strb	r2, [r1, #8]
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800abd2:	7c0e      	ldrb	r6, [r1, #16]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800abd4:	f891 5090 	ldrb.w	r5, [r1, #144]	; 0x90
		Wall[n][0].south = WALL;
 800abd8:	7c8c      	ldrb	r4, [r1, #18]
		Wall[0][n].west = WALL;
 800abda:	7888      	ldrb	r0, [r1, #2]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800abdc:	f881 c096 	strb.w	ip, [r1, #150]	; 0x96
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800abe0:	f891 c06a 	ldrb.w	ip, [r1, #106]	; 0x6a
 800abe4:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800abe8:	f891 709a 	ldrb.w	r7, [r1, #154]	; 0x9a
		Wall[n][0].south = WALL;
 800abec:	f891 805a 	ldrb.w	r8, [r1, #90]	; 0x5a
		Wall[0][n].west = WALL;
 800abf0:	f891 900a 	ldrb.w	r9, [r1, #10]
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800abf4:	f891 a07c 	ldrb.w	sl, [r1, #124]	; 0x7c
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800abf8:	f891 e09c 	ldrb.w	lr, [r1, #156]	; 0x9c
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800abfc:	f363 0601 	bfi	r6, r3, #0, #2
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ac00:	f363 0583 	bfi	r5, r3, #2, #2
		Wall[n][0].south = WALL;
 800ac04:	f363 1405 	bfi	r4, r3, #4, #2
		Wall[0][n].west = WALL;
 800ac08:	f363 1087 	bfi	r0, r3, #6, #2
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ac0c:	f363 0201 	bfi	r2, r3, #0, #2
		Wall[0][n].west = WALL;
 800ac10:	f363 1687 	bfi	r6, r3, #6, #2
		Wall[n][0].south = WALL;
 800ac14:	f363 1505 	bfi	r5, r3, #4, #2
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
	Wall[0][0].north = NOWALL;
	Wall[1][0].west = WALL;
 800ac18:	f363 1487 	bfi	r4, r3, #6, #2
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ac1c:	f363 0c01 	bfi	ip, r3, #0, #2
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ac20:	f363 0283 	bfi	r2, r3, #2, #2
	Wall[0][1].south = NOWALL;
 800ac24:	f36f 1005 	bfc	r0, #4, #2
		Wall[0][n].west = WALL;
 800ac28:	740e      	strb	r6, [r1, #16]
		Wall[n][0].south = WALL;
 800ac2a:	f881 5090 	strb.w	r5, [r1, #144]	; 0x90
		Wall[0][n].west = WALL;
 800ac2e:	7b0e      	ldrb	r6, [r1, #12]
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ac30:	f891 508e 	ldrb.w	r5, [r1, #142]	; 0x8e
	Wall[1][0].west = WALL;
 800ac34:	748c      	strb	r4, [r1, #18]
	Wall[0][1].south = NOWALL;
 800ac36:	7088      	strb	r0, [r1, #2]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ac38:	f891 409e 	ldrb.w	r4, [r1, #158]	; 0x9e
		Wall[n][0].south = WALL;
 800ac3c:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ac40:	f881 c06a 	strb.w	ip, [r1, #106]	; 0x6a
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ac44:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
		Wall[n][0].south = WALL;
 800ac48:	f891 c06c 	ldrb.w	ip, [r1, #108]	; 0x6c
		Wall[0][n].west = WALL;
 800ac4c:	7b8a      	ldrb	r2, [r1, #14]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ac4e:	f363 0783 	bfi	r7, r3, #2, #2
		Wall[n][0].south = WALL;
 800ac52:	f363 1805 	bfi	r8, r3, #4, #2
		Wall[0][n].west = WALL;
 800ac56:	f363 1987 	bfi	r9, r3, #6, #2
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ac5a:	f363 0a01 	bfi	sl, r3, #0, #2
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ac5e:	f363 0e83 	bfi	lr, r3, #2, #2
		Wall[n][0].south = WALL;
 800ac62:	f363 1c05 	bfi	ip, r3, #4, #2
		Wall[0][n].west = WALL;
 800ac66:	f363 1687 	bfi	r6, r3, #6, #2
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ac6a:	f363 0501 	bfi	r5, r3, #0, #2
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ac6e:	f363 0483 	bfi	r4, r3, #2, #2
		Wall[n][0].south = WALL;
 800ac72:	f363 1005 	bfi	r0, r3, #4, #2
		Wall[0][n].west = WALL;
 800ac76:	f363 1287 	bfi	r2, r3, #6, #2
	Wall[0][0].north = NOWALL;
 800ac7a:	2354      	movs	r3, #84	; 0x54
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ac7c:	f881 709a 	strb.w	r7, [r1, #154]	; 0x9a
		Wall[n][0].south = WALL;
 800ac80:	f881 805a 	strb.w	r8, [r1, #90]	; 0x5a
		Wall[0][n].west = WALL;
 800ac84:	f881 900a 	strb.w	r9, [r1, #10]
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ac88:	f881 a07c 	strb.w	sl, [r1, #124]	; 0x7c
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ac8c:	f881 e09c 	strb.w	lr, [r1, #156]	; 0x9c
		Wall[n][0].south = WALL;
 800ac90:	f881 c06c 	strb.w	ip, [r1, #108]	; 0x6c
		Wall[0][n].west = WALL;
 800ac94:	730e      	strb	r6, [r1, #12]
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800ac96:	f881 508e 	strb.w	r5, [r1, #142]	; 0x8e
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800ac9a:	f881 409e 	strb.w	r4, [r1, #158]	; 0x9e
		Wall[n][0].south = WALL;
 800ac9e:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
		Wall[0][n].west = WALL;
 800aca2:	738a      	strb	r2, [r1, #14]
	Wall[0][0].north = NOWALL;
 800aca4:	700b      	strb	r3, [r1, #0]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800aca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acaa:	bf00      	nop
 800acac:	20004a94 	.word	0x20004a94

0800acb0 <wall_set>:
}
//壁の更新xyグローバル
void wall_set(){
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800acb0:	4b4f      	ldr	r3, [pc, #316]	; (800adf0 <wall_set+0x140>)
 800acb2:	4950      	ldr	r1, [pc, #320]	; (800adf4 <wall_set+0x144>)
 800acb4:	edd3 4a03 	vldr	s9, [r3, #12]
 800acb8:	edd3 7a00 	vldr	s15, [r3]
 800acbc:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 800adf8 <wall_set+0x148>
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800acc0:	edd3 5a01 	vldr	s11, [r3, #4]
 800acc4:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 800adfc <wall_set+0x14c>
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800acc8:	edd3 6a02 	vldr	s13, [r3, #8]
 800accc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800ae00 <wall_set+0x150>
void wall_set(){
 800acd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800acd4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800acd8:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800acdc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800ace0:	7acd      	ldrb	r5, [r1, #11]

	  //各方角の壁に壁の有無を代入
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800ace2:	7a0a      	ldrb	r2, [r1, #8]
 800ace4:	7a48      	ldrb	r0, [r1, #9]
 800ace6:	4947      	ldr	r1, [pc, #284]	; (800ae04 <wall_set+0x154>)
void wall_set(){
 800ace8:	b083      	sub	sp, #12
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800acea:	eef4 7ac5 	vcmpe.f32	s15, s10
 800acee:	ae02      	add	r6, sp, #8
 800acf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800acf4:	f105 0c01 	add.w	ip, r5, #1
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800acf8:	f105 0402 	add.w	r4, r5, #2
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800acfc:	eef4 5ac6 	vcmpe.f32	s11, s12
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800ad00:	f105 0303 	add.w	r3, r5, #3
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ad04:	bfcc      	ite	gt
 800ad06:	2701      	movgt	r7, #1
 800ad08:	2700      	movle	r7, #0
 800ad0a:	4435      	add	r5, r6
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ad0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad10:	f00c 0c03 	and.w	ip, ip, #3
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800ad14:	f004 0403 	and.w	r4, r4, #3
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	eef4 6ac7 	vcmpe.f32	s13, s14
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ad20:	44b4      	add	ip, r6
 800ad22:	bfcc      	ite	gt
 800ad24:	f04f 0801 	movgt.w	r8, #1
 800ad28:	f04f 0800 	movle.w	r8, #0
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800ad2c:	4434      	add	r4, r6
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800ad2e:	4433      	add	r3, r6
 800ad30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800ad34:	f04f 0900 	mov.w	r9, #0
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800ad38:	ea4f 06c2 	mov.w	r6, r2, lsl #3
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ad3c:	f805 7c04 	strb.w	r7, [r5, #-4]
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800ad40:	bfcc      	ite	gt
 800ad42:	f04f 0e01 	movgt.w	lr, #1
 800ad46:	46ce      	movle	lr, r9
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800ad48:	18b7      	adds	r7, r6, r2
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ad4a:	f80c 8c04 	strb.w	r8, [ip, #-4]
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800ad4e:	f804 9c04 	strb.w	r9, [r4, #-4]
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800ad52:	eb07 0c00 	add.w	ip, r7, r0
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800ad56:	f803 ec04 	strb.w	lr, [r3, #-4]
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800ad5a:	f89d 8004 	ldrb.w	r8, [sp, #4]
 800ad5e:	f811 301c 	ldrb.w	r3, [r1, ip, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
 800ad62:	f89d e005 	ldrb.w	lr, [sp, #5]
	  Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
 800ad66:	f89d 5006 	ldrb.w	r5, [sp, #6]
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800ad6a:	f89d 4007 	ldrb.w	r4, [sp, #7]
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800ad6e:	f008 0803 	and.w	r8, r8, #3
 800ad72:	f368 0301 	bfi	r3, r8, #0, #2
	  Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
 800ad76:	f00e 0e03 	and.w	lr, lr, #3
 800ad7a:	f36e 0383 	bfi	r3, lr, #2, #2
	  Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
 800ad7e:	f005 0503 	and.w	r5, r5, #3
 800ad82:	f365 1305 	bfi	r3, r5, #4, #2
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800ad86:	f004 0403 	and.w	r4, r4, #3
 800ad8a:	f364 1387 	bfi	r3, r4, #6, #2

	  //端の座標でなければ反対の壁も記入
	  //uint32_t address;
	  if(Pos.NextY < (NUMBER_OF_SQUARES-1) )
 800ad8e:	2807      	cmp	r0, #7
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800ad90:	f801 301c 	strb.w	r3, [r1, ip, lsl #1]
	  if(Pos.NextY < (NUMBER_OF_SQUARES-1) )
 800ad94:	d807      	bhi.n	800ada6 <wall_set+0xf6>
	  {
		  Wall[Pos.NextX][Pos.NextY+1].south = wall_dir[0];//北端でなければ
 800ad96:	1c43      	adds	r3, r0, #1
 800ad98:	441f      	add	r7, r3
 800ad9a:	f811 3017 	ldrb.w	r3, [r1, r7, lsl #1]
 800ad9e:	f368 1305 	bfi	r3, r8, #4, #2
 800ada2:	f801 3017 	strb.w	r3, [r1, r7, lsl #1]
		  //address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY+1)*16*(NUMBER_OF_SQUARES) );
		  //FLASH_Write_Word(address+8, Wall[Pos.NextX][Pos.NextY+1].south);
	  }
	  if(Pos.NextX < (NUMBER_OF_SQUARES-1) )
 800ada6:	2a07      	cmp	r2, #7
 800ada8:	d809      	bhi.n	800adbe <wall_set+0x10e>
	  {
		  Wall[Pos.NextX+1][Pos.NextY].west = wall_dir[1];//東端でなければ
 800adaa:	1c53      	adds	r3, r2, #1
 800adac:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800adb0:	4403      	add	r3, r0
 800adb2:	f811 7013 	ldrb.w	r7, [r1, r3, lsl #1]
 800adb6:	f36e 1787 	bfi	r7, lr, #6, #2
 800adba:	f801 7013 	strb.w	r7, [r1, r3, lsl #1]
//		  address = start_adress_sector1 + ( (Pos.NextX+1)*16) + ( (Pos.NextY)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+12, Wall[Pos.NextX+1][Pos.NextY].west);
	  }
	  if(Pos.NextY > 0 )
 800adbe:	b140      	cbz	r0, 800add2 <wall_set+0x122>
	  {
		  Wall[Pos.NextX][Pos.NextY-1].north = wall_dir[2];//南端でなければ
 800adc0:	18b3      	adds	r3, r6, r2
 800adc2:	1e46      	subs	r6, r0, #1
 800adc4:	4433      	add	r3, r6
 800adc6:	f811 6013 	ldrb.w	r6, [r1, r3, lsl #1]
 800adca:	f365 0601 	bfi	r6, r5, #0, #2
 800adce:	f801 6013 	strb.w	r6, [r1, r3, lsl #1]
//		  address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY-1)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+0, Wall[Pos.NextX][Pos.NextY-1].north);
	  }
	  if(Pos.NextX > 0 )
 800add2:	b14a      	cbz	r2, 800ade8 <wall_set+0x138>
	  {
		  Wall[Pos.NextX-1][Pos.NextY].east = wall_dir[3];//西端でなければ
 800add4:	3a01      	subs	r2, #1
 800add6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800adda:	4402      	add	r2, r0
 800addc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800ade0:	f364 0383 	bfi	r3, r4, #2, #2
 800ade4:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]


	  //一旦flashお休み。
	  //flashに書き込む
//	  wall_store_running(Pos.X,Pos.Y);
}
 800ade8:	b003      	add	sp, #12
 800adea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adee:	bf00      	nop
 800adf0:	2000490c 	.word	0x2000490c
 800adf4:	20000000 	.word	0x20000000
 800adf8:	42340000 	.word	0x42340000
 800adfc:	42b40000 	.word	0x42b40000
 800ae00:	42c80000 	.word	0x42c80000
 800ae04:	20004a94 	.word	0x20004a94

0800ae08 <make_map>:

	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
	{
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
		{
			walk_map[i][j] = 255;	//すべて255で埋める
 800ae08:	4b86      	ldr	r3, [pc, #536]	; (800b024 <make_map+0x21c>)
	//set_walk_val_goal(x, y,2);			//ゴール座標の歩数を０に設定
}


void make_map(uint8_t x, uint8_t y, int mask)	//歩数マップを作成する
{
 800ae0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			goal_x + goal_edge_num,
 800ae0e:	4c86      	ldr	r4, [pc, #536]	; (800b028 <make_map+0x220>)
			walk_map[i][j] = 255;	//すべて255で埋める
 800ae10:	f04f 15ff 	mov.w	r5, #16711935	; 0xff00ff
 800ae14:	601d      	str	r5, [r3, #0]
 800ae16:	605d      	str	r5, [r3, #4]
 800ae18:	609d      	str	r5, [r3, #8]
 800ae1a:	60dd      	str	r5, [r3, #12]
 800ae1c:	611d      	str	r5, [r3, #16]
 800ae1e:	615d      	str	r5, [r3, #20]
 800ae20:	619d      	str	r5, [r3, #24]
 800ae22:	61dd      	str	r5, [r3, #28]
 800ae24:	621d      	str	r5, [r3, #32]
 800ae26:	625d      	str	r5, [r3, #36]	; 0x24
 800ae28:	629d      	str	r5, [r3, #40]	; 0x28
 800ae2a:	62dd      	str	r5, [r3, #44]	; 0x2c
 800ae2c:	631d      	str	r5, [r3, #48]	; 0x30
 800ae2e:	635d      	str	r5, [r3, #52]	; 0x34
 800ae30:	639d      	str	r5, [r3, #56]	; 0x38
 800ae32:	63dd      	str	r5, [r3, #60]	; 0x3c
 800ae34:	641d      	str	r5, [r3, #64]	; 0x40
 800ae36:	645d      	str	r5, [r3, #68]	; 0x44
 800ae38:	649d      	str	r5, [r3, #72]	; 0x48
 800ae3a:	64dd      	str	r5, [r3, #76]	; 0x4c
 800ae3c:	651d      	str	r5, [r3, #80]	; 0x50
 800ae3e:	655d      	str	r5, [r3, #84]	; 0x54
 800ae40:	659d      	str	r5, [r3, #88]	; 0x58
 800ae42:	65dd      	str	r5, [r3, #92]	; 0x5c
 800ae44:	661d      	str	r5, [r3, #96]	; 0x60
 800ae46:	665d      	str	r5, [r3, #100]	; 0x64
 800ae48:	669d      	str	r5, [r3, #104]	; 0x68
 800ae4a:	66dd      	str	r5, [r3, #108]	; 0x6c
 800ae4c:	671d      	str	r5, [r3, #112]	; 0x70
 800ae4e:	675d      	str	r5, [r3, #116]	; 0x74
 800ae50:	679d      	str	r5, [r3, #120]	; 0x78
 800ae52:	67dd      	str	r5, [r3, #124]	; 0x7c
			goal_x + goal_edge_num,
 800ae54:	7824      	ldrb	r4, [r4, #0]
			walk_map[i][j] = 255;	//すべて255で埋める
 800ae56:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
			goal_x + goal_edge_num,
 800ae5a:	eb00 0c04 	add.w	ip, r0, r4
 800ae5e:	fa5f fc8c 	uxtb.w	ip, ip
			walk_map[i][j] = 255;	//すべて255で埋める
 800ae62:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
 800ae66:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
 800ae6a:	f8c3 508c 	str.w	r5, [r3, #140]	; 0x8c
 800ae6e:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
 800ae72:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
 800ae76:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
 800ae7a:	f8c3 509c 	str.w	r5, [r3, #156]	; 0x9c
	for(; goal_x < n[0]; goal_x++)
 800ae7e:	4560      	cmp	r0, ip
			walk_map[i][j] = 255;	//すべて255で埋める
 800ae80:	f04f 05ff 	mov.w	r5, #255	; 0xff
			goal_y + goal_edge_num
 800ae84:	440c      	add	r4, r1
			walk_map[i][j] = 255;	//すべて255で埋める
 800ae86:	f8a3 50a0 	strh.w	r5, [r3, #160]	; 0xa0
	for(; goal_x < n[0]; goal_x++)
 800ae8a:	d251      	bcs.n	800af30 <make_map+0x128>
 800ae8c:	b2e4      	uxtb	r4, r4
 800ae8e:	4606      	mov	r6, r0
			walk_map[goal_x][goal_y] = 0;
 800ae90:	f04f 0e00 	mov.w	lr, #0
		for(; goal_y < n[1]; goal_y++)
 800ae94:	42a1      	cmp	r1, r4
 800ae96:	d247      	bcs.n	800af28 <make_map+0x120>
			walk_map[goal_x][goal_y] = 0;
 800ae98:	eb06 05c6 	add.w	r5, r6, r6, lsl #3
		for(; goal_y < n[1]; goal_y++)
 800ae9c:	1c48      	adds	r0, r1, #1
			walk_map[goal_x][goal_y] = 0;
 800ae9e:	186f      	adds	r7, r5, r1
		for(; goal_y < n[1]; goal_y++)
 800aea0:	b2c0      	uxtb	r0, r0
 800aea2:	4284      	cmp	r4, r0
			walk_map[goal_x][goal_y] = 0;
 800aea4:	f823 e017 	strh.w	lr, [r3, r7, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800aea8:	f240 80b8 	bls.w	800b01c <make_map+0x214>
 800aeac:	1c8f      	adds	r7, r1, #2
			walk_map[goal_x][goal_y] = 0;
 800aeae:	4428      	add	r0, r5
		for(; goal_y < n[1]; goal_y++)
 800aeb0:	b2ff      	uxtb	r7, r7
 800aeb2:	42bc      	cmp	r4, r7
			walk_map[goal_x][goal_y] = 0;
 800aeb4:	f823 e010 	strh.w	lr, [r3, r0, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800aeb8:	f240 80b2 	bls.w	800b020 <make_map+0x218>
 800aebc:	1cc8      	adds	r0, r1, #3
			walk_map[goal_x][goal_y] = 0;
 800aebe:	442f      	add	r7, r5
		for(; goal_y < n[1]; goal_y++)
 800aec0:	b2c0      	uxtb	r0, r0
 800aec2:	4284      	cmp	r4, r0
			walk_map[goal_x][goal_y] = 0;
 800aec4:	f823 e017 	strh.w	lr, [r3, r7, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800aec8:	f240 80a8 	bls.w	800b01c <make_map+0x214>
 800aecc:	1d0f      	adds	r7, r1, #4
			walk_map[goal_x][goal_y] = 0;
 800aece:	4428      	add	r0, r5
		for(; goal_y < n[1]; goal_y++)
 800aed0:	b2ff      	uxtb	r7, r7
 800aed2:	42bc      	cmp	r4, r7
			walk_map[goal_x][goal_y] = 0;
 800aed4:	f823 e010 	strh.w	lr, [r3, r0, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800aed8:	f240 80a2 	bls.w	800b020 <make_map+0x218>
 800aedc:	1d48      	adds	r0, r1, #5
			walk_map[goal_x][goal_y] = 0;
 800aede:	442f      	add	r7, r5
		for(; goal_y < n[1]; goal_y++)
 800aee0:	b2c0      	uxtb	r0, r0
 800aee2:	4284      	cmp	r4, r0
			walk_map[goal_x][goal_y] = 0;
 800aee4:	f823 e017 	strh.w	lr, [r3, r7, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800aee8:	f240 8098 	bls.w	800b01c <make_map+0x214>
 800aeec:	1d8f      	adds	r7, r1, #6
			walk_map[goal_x][goal_y] = 0;
 800aeee:	4428      	add	r0, r5
		for(; goal_y < n[1]; goal_y++)
 800aef0:	b2ff      	uxtb	r7, r7
 800aef2:	42bc      	cmp	r4, r7
			walk_map[goal_x][goal_y] = 0;
 800aef4:	f823 e010 	strh.w	lr, [r3, r0, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800aef8:	f240 8092 	bls.w	800b020 <make_map+0x218>
 800aefc:	1dc8      	adds	r0, r1, #7
			walk_map[goal_x][goal_y] = 0;
 800aefe:	442f      	add	r7, r5
		for(; goal_y < n[1]; goal_y++)
 800af00:	b2c0      	uxtb	r0, r0
 800af02:	4284      	cmp	r4, r0
			walk_map[goal_x][goal_y] = 0;
 800af04:	f823 e017 	strh.w	lr, [r3, r7, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800af08:	f240 8088 	bls.w	800b01c <make_map+0x214>
 800af0c:	f101 0708 	add.w	r7, r1, #8
			walk_map[goal_x][goal_y] = 0;
 800af10:	4428      	add	r0, r5
		for(; goal_y < n[1]; goal_y++)
 800af12:	b2ff      	uxtb	r7, r7
 800af14:	42bc      	cmp	r4, r7
			walk_map[goal_x][goal_y] = 0;
 800af16:	f823 e010 	strh.w	lr, [r3, r0, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800af1a:	f240 8081 	bls.w	800b020 <make_map+0x218>
			walk_map[goal_x][goal_y] = 0;
 800af1e:	443d      	add	r5, r7
		for(; goal_y < n[1]; goal_y++)
 800af20:	3109      	adds	r1, #9
			walk_map[goal_x][goal_y] = 0;
 800af22:	f823 e015 	strh.w	lr, [r3, r5, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800af26:	b2c9      	uxtb	r1, r1
 800af28:	3601      	adds	r6, #1
	for(; goal_x < n[0]; goal_x++)
 800af2a:	b2f0      	uxtb	r0, r6
 800af2c:	4584      	cmp	ip, r0
 800af2e:	d8b1      	bhi.n	800ae94 <make_map+0x8c>
 800af30:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800b030 <make_map+0x228>
				}
				//探索のときは
				//最短のときは、未探索壁の経路は重みを更新しない
				if(j < NUMBER_OF_SQUARES-1)					//範囲チェック
				{
					if( (Wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800af34:	4c3d      	ldr	r4, [pc, #244]	; (800b02c <make_map+0x224>)
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
					{
						if(walk_map[i-1][j] == 255)			//値が入っていなければ
						{
							walk_map[i-1][j] = walk_map[i][j] + 1;	//値を代入
							change_flag = true;		//値が更新されたことを示す
 800af36:	f04f 0c00 	mov.w	ip, #0
 800af3a:	4667      	mov	r7, ip
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800af3c:	46e0      	mov	r8, ip
							change_flag = true;		//値が更新されたことを示す
 800af3e:	f04f 0e12 	mov.w	lr, #18
 800af42:	eba9 010c 	sub.w	r1, r9, ip
		for(; goal_y < n[1]; goal_y++)
 800af46:	2300      	movs	r3, #0
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
 800af48:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
				if(walk_map[i][j] == 255)		//255の場合は次へ
 800af4c:	f831 6f02 	ldrh.w	r6, [r1, #2]!
 800af50:	2eff      	cmp	r6, #255	; 0xff
 800af52:	d03c      	beq.n	800afce <make_map+0x1c6>
				if(j < NUMBER_OF_SQUARES-1)					//範囲チェック
 800af54:	2b08      	cmp	r3, #8
 800af56:	d00d      	beq.n	800af74 <make_map+0x16c>
					if( (Wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800af58:	18c5      	adds	r5, r0, r3
 800af5a:	f814 5015 	ldrb.w	r5, [r4, r5, lsl #1]
 800af5e:	f005 0503 	and.w	r5, r5, #3
 800af62:	4215      	tst	r5, r2
 800af64:	d106      	bne.n	800af74 <make_map+0x16c>
						if(walk_map[i][j+1] == 255)			//まだ値が入っていなければ
 800af66:	884d      	ldrh	r5, [r1, #2]
 800af68:	2dff      	cmp	r5, #255	; 0xff
 800af6a:	d103      	bne.n	800af74 <make_map+0x16c>
							walk_map[i][j+1] = walk_map[i][j] + 1;	//値を代入
 800af6c:	1c75      	adds	r5, r6, #1
 800af6e:	804d      	strh	r5, [r1, #2]
							change_flag = true;		//値が更新されたことを示す
 800af70:	f04f 0801 	mov.w	r8, #1
				if(i < NUMBER_OF_SQUARES-1)					//範囲チェック
 800af74:	2f08      	cmp	r7, #8
 800af76:	d046      	beq.n	800b006 <make_map+0x1fe>
					if( (Wall[i][j].east & mask) == NOWALL)		//壁がなければ
 800af78:	18c5      	adds	r5, r0, r3
 800af7a:	f814 5015 	ldrb.w	r5, [r4, r5, lsl #1]
 800af7e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800af82:	4215      	tst	r5, r2
 800af84:	d106      	bne.n	800af94 <make_map+0x18c>
 800af86:	eb01 050c 	add.w	r5, r1, ip
						if(walk_map[i+1][j] == 255)			//値が入っていなければ
 800af8a:	f835 a00e 	ldrh.w	sl, [r5, lr]
 800af8e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800af92:	d032      	beq.n	800affa <make_map+0x1f2>
				if(j > 0)						//範囲チェック
 800af94:	b153      	cbz	r3, 800afac <make_map+0x1a4>
					if( (Wall[i][j].south & mask) == NOWALL)	//壁がなければ
 800af96:	18c5      	adds	r5, r0, r3
 800af98:	f814 5015 	ldrb.w	r5, [r4, r5, lsl #1]
 800af9c:	f3c5 1501 	ubfx	r5, r5, #4, #2
 800afa0:	4215      	tst	r5, r2
 800afa2:	d103      	bne.n	800afac <make_map+0x1a4>
						if(walk_map[i][j-1] == 255)			//値が入っていなければ
 800afa4:	f831 5c02 	ldrh.w	r5, [r1, #-2]
 800afa8:	2dff      	cmp	r5, #255	; 0xff
 800afaa:	d01f      	beq.n	800afec <make_map+0x1e4>
				if(i > 0)						//範囲チェック
 800afac:	b17f      	cbz	r7, 800afce <make_map+0x1c6>
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
 800afae:	18c5      	adds	r5, r0, r3
 800afb0:	f814 5015 	ldrb.w	r5, [r4, r5, lsl #1]
 800afb4:	ea12 1595 	ands.w	r5, r2, r5, lsr #6
 800afb8:	d109      	bne.n	800afce <make_map+0x1c6>
						if(walk_map[i-1][j] == 255)			//値が入っていなければ
 800afba:	f831 5c12 	ldrh.w	r5, [r1, #-18]
 800afbe:	2dff      	cmp	r5, #255	; 0xff
 800afc0:	d105      	bne.n	800afce <make_map+0x1c6>
							walk_map[i-1][j] = walk_map[i][j] + 1;	//値を代入
 800afc2:	880d      	ldrh	r5, [r1, #0]
 800afc4:	3501      	adds	r5, #1
 800afc6:	f821 5c12 	strh.w	r5, [r1, #-18]
							change_flag = true;		//値が更新されたことを示す
 800afca:	f04f 0801 	mov.w	r8, #1
 800afce:	3301      	adds	r3, #1
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800afd0:	2b09      	cmp	r3, #9
 800afd2:	d1bb      	bne.n	800af4c <make_map+0x144>
 800afd4:	3701      	adds	r7, #1
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800afd6:	2f09      	cmp	r7, #9
 800afd8:	f1ac 0c12 	sub.w	ip, ip, #18
 800afdc:	f10e 0e12 	add.w	lr, lr, #18
 800afe0:	d1af      	bne.n	800af42 <make_map+0x13a>

			}

		}

	}while(change_flag == true);	//全体を作り終わるまで待つ
 800afe2:	f1b8 0f00 	cmp.w	r8, #0
 800afe6:	d1a6      	bne.n	800af36 <make_map+0x12e>

}
 800afe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							walk_map[i][j-1] = walk_map[i][j] + 1;	//値を代入
 800afec:	880d      	ldrh	r5, [r1, #0]
 800afee:	3501      	adds	r5, #1
 800aff0:	f821 5c02 	strh.w	r5, [r1, #-2]
							change_flag = true;		//値が更新されたことを示す
 800aff4:	f04f 0801 	mov.w	r8, #1
 800aff8:	e7d8      	b.n	800afac <make_map+0x1a4>
							walk_map[i+1][j] = walk_map[i][j] + 1;	//値を代入
 800affa:	3601      	adds	r6, #1
 800affc:	f825 600e 	strh.w	r6, [r5, lr]
							change_flag = true;		//値が更新されたことを示す
 800b000:	f04f 0801 	mov.w	r8, #1
 800b004:	e7c6      	b.n	800af94 <make_map+0x18c>
				if(j > 0)						//範囲チェック
 800b006:	2b00      	cmp	r3, #0
 800b008:	d0d1      	beq.n	800afae <make_map+0x1a6>
					if( (Wall[i][j].south & mask) == NOWALL)	//壁がなければ
 800b00a:	f103 0548 	add.w	r5, r3, #72	; 0x48
 800b00e:	f814 5015 	ldrb.w	r5, [r4, r5, lsl #1]
 800b012:	f3c5 1501 	ubfx	r5, r5, #4, #2
 800b016:	4215      	tst	r5, r2
 800b018:	d1c9      	bne.n	800afae <make_map+0x1a6>
 800b01a:	e7c3      	b.n	800afa4 <make_map+0x19c>
		for(; goal_y < n[1]; goal_y++)
 800b01c:	4601      	mov	r1, r0
 800b01e:	e783      	b.n	800af28 <make_map+0x120>
 800b020:	4639      	mov	r1, r7
 800b022:	e781      	b.n	800af28 <make_map+0x120>
 800b024:	2000491c 	.word	0x2000491c
 800b028:	200048c8 	.word	0x200048c8
 800b02c:	20004a94 	.word	0x20004a94
 800b030:	2000491a 	.word	0x2000491a

0800b034 <flash_copy_to_ram>:
//	    }//シリアル通信で受け取ってテキストファイルに流してほしい
//	    //またあとで
//}
//
void flash_copy_to_ram()
{
 800b034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t address=start_adress_sector1;
 800b038:	4b1f      	ldr	r3, [pc, #124]	; (800b0b8 <flash_copy_to_ram+0x84>)
 800b03a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800b0bc <flash_copy_to_ram+0x88>
 800b03e:	f8d3 8000 	ldr.w	r8, [r3]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b042:	2700      	movs	r7, #0
{
 800b044:	b085      	sub	sp, #20
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
			{
				uint32_t wall_data[4]={0};
 800b046:	463e      	mov	r6, r7
{
 800b048:	4644      	mov	r4, r8
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b04a:	2500      	movs	r5, #0
				FLASH_Read_Word(address+0, &wall_data[0]);
 800b04c:	4620      	mov	r0, r4
 800b04e:	4669      	mov	r1, sp
				uint32_t wall_data[4]={0};
 800b050:	e9cd 6600 	strd	r6, r6, [sp]
 800b054:	e9cd 6602 	strd	r6, r6, [sp, #8]
				FLASH_Read_Word(address+0, &wall_data[0]);
 800b058:	f002 ff0a 	bl	800de70 <FLASH_Read_Word>
				FLASH_Read_Word(address+4, &wall_data[1]);
 800b05c:	1d20      	adds	r0, r4, #4
 800b05e:	a901      	add	r1, sp, #4
 800b060:	f002 ff06 	bl	800de70 <FLASH_Read_Word>
				FLASH_Read_Word(address+8, &wall_data[2]);
 800b064:	f104 0008 	add.w	r0, r4, #8
 800b068:	a902      	add	r1, sp, #8
 800b06a:	f002 ff01 	bl	800de70 <FLASH_Read_Word>
				FLASH_Read_Word(address+12, &wall_data[3]);
 800b06e:	f104 000c 	add.w	r0, r4, #12
 800b072:	a903      	add	r1, sp, #12
 800b074:	f002 fefc 	bl	800de70 <FLASH_Read_Word>
				Wall[i][j].north = wall_data[0];
 800b078:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800b07c:	4438      	add	r0, r7
 800b07e:	9900      	ldr	r1, [sp, #0]
 800b080:	f819 3010 	ldrb.w	r3, [r9, r0, lsl #1]
				Wall[i][j].east = wall_data[1];
 800b084:	9a01      	ldr	r2, [sp, #4]
				Wall[i][j].north = wall_data[0];
 800b086:	f361 0301 	bfi	r3, r1, #0, #2
				Wall[i][j].east = wall_data[1];
 800b08a:	f362 0383 	bfi	r3, r2, #2, #2
				Wall[i][j].south = wall_data[2];
				Wall[i][j].west = wall_data[3];
 800b08e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b092:	3501      	adds	r5, #1
				Wall[i][j].south = wall_data[2];
 800b094:	f361 1305 	bfi	r3, r1, #4, #2
				Wall[i][j].west = wall_data[3];
 800b098:	f362 1387 	bfi	r3, r2, #6, #2
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b09c:	2d09      	cmp	r5, #9
				address += 16;
 800b09e:	f104 0410 	add.w	r4, r4, #16
				Wall[i][j].west = wall_data[3];
 800b0a2:	f809 3010 	strb.w	r3, [r9, r0, lsl #1]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b0a6:	d1d1      	bne.n	800b04c <flash_copy_to_ram+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b0a8:	3701      	adds	r7, #1
 800b0aa:	2f09      	cmp	r7, #9
 800b0ac:	f108 0890 	add.w	r8, r8, #144	; 0x90
 800b0b0:	d1ca      	bne.n	800b048 <flash_copy_to_ram+0x14>
			}
	}

}
 800b0b2:	b005      	add	sp, #20
 800b0b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0b8:	08017230 	.word	0x08017230
 800b0bc:	20004a94 	.word	0x20004a94

0800b0c0 <printAllWeight>:
        printf("[北 東 南 西] = [%u %u %u %u]\r\n", route[k].wall.north, route[k].wall.east, route[k].wall.south, route[k].wall.west);
        printf("\r\n");
    }
}
void printAllWeight(maze_node *maze, position *pos)
{
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	b085      	sub	sp, #20
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	9003      	str	r0, [sp, #12]
    //全出力を3桁にそろえればよさそう
    //重みが0かつゴールエリア内の座標なら赤色で出力 31;1m
    //行から表示して、
    //列を表示
    //交互に
    printf("全ノードの重み\r\n");
 800b0ca:	4870      	ldr	r0, [pc, #448]	; (800b28c <printAllWeight+0x1cc>)

    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
    {
        //行
        printf("  +  ");
 800b0cc:	4e70      	ldr	r6, [pc, #448]	; (800b290 <printAllWeight+0x1d0>)
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
        {
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800b0ce:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 800b2a0 <printAllWeight+0x1e0>
{
 800b0d2:	460c      	mov	r4, r1
    printf("全ノードの重み\r\n");
 800b0d4:	f008 fca2 	bl	8013a1c <puts>
 800b0d8:	f505 5307 	add.w	r3, r5, #8640	; 0x21c0
 800b0dc:	333a      	adds	r3, #58	; 0x3a
 800b0de:	9301      	str	r3, [sp, #4]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800b0e0:	2720      	movs	r7, #32
        printf("  +  ");
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	fa5f fb87 	uxtb.w	fp, r7
 800b0e8:	f008 fc10 	bl	801390c <iprintf>
 800b0ec:	f1ab 0310 	sub.w	r3, fp, #16
 800b0f0:	2b03      	cmp	r3, #3
 800b0f2:	9b01      	ldr	r3, [sp, #4]
            }
            else
            {
                printf(" %3x ",maze->RawNode[x][y].weight);
 800b0f4:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800b298 <printAllWeight+0x1d8>
 800b0f8:	f5a3 5503 	sub.w	r5, r3, #8384	; 0x20c0
 800b0fc:	f1a5 053a 	sub.w	r5, r5, #58	; 0x3a
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800b100:	f04f 0a00 	mov.w	sl, #0
 800b104:	d80d      	bhi.n	800b122 <printAllWeight+0x62>
 800b106:	e084      	b.n	800b212 <printAllWeight+0x152>
                printf(" %3x ",maze->RawNode[x][y].weight);
 800b108:	4648      	mov	r0, r9
 800b10a:	f008 fbff 	bl	801390c <iprintf>
            }
            if(x < NUMBER_OF_SQUARES_X-1)
 800b10e:	f1ba 0f1f 	cmp.w	sl, #31
                 printf("  +  ");
 800b112:	4630      	mov	r0, r6
            if(x < NUMBER_OF_SQUARES_X-1)
 800b114:	d013      	beq.n	800b13e <printAllWeight+0x7e>
                 printf("  +  ");
 800b116:	f008 fbf9 	bl	801390c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800b11a:	f10a 0a01 	add.w	sl, sl, #1
 800b11e:	f505 7584 	add.w	r5, r5, #264	; 0x108
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800b122:	7823      	ldrb	r3, [r4, #0]
    if(maze->RawNode[x][y].weight == 0)
 800b124:	8869      	ldrh	r1, [r5, #2]
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800b126:	4553      	cmp	r3, sl
 800b128:	d1ee      	bne.n	800b108 <printAllWeight+0x48>
 800b12a:	7863      	ldrb	r3, [r4, #1]
 800b12c:	42bb      	cmp	r3, r7
 800b12e:	d1eb      	bne.n	800b108 <printAllWeight+0x48>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800b130:	4640      	mov	r0, r8
 800b132:	f008 fbeb 	bl	801390c <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800b136:	f1ba 0f1f 	cmp.w	sl, #31
                 printf("  +  ");
 800b13a:	4630      	mov	r0, r6
            if(x < NUMBER_OF_SQUARES_X-1)
 800b13c:	d1eb      	bne.n	800b116 <printAllWeight+0x56>
        }
        printf("\r\n");
 800b13e:	4855      	ldr	r0, [pc, #340]	; (800b294 <printAllWeight+0x1d4>)
 800b140:	f008 fc6c 	bl	8013a1c <puts>
 800b144:	f1a7 0311 	sub.w	r3, r7, #17
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b14e:	1e7a      	subs	r2, r7, #1
 800b150:	2b02      	cmp	r3, #2
 800b152:	fa5f f58b 	uxtb.w	r5, fp
 800b156:	9202      	str	r2, [sp, #8]
 800b158:	d96c      	bls.n	800b234 <printAllWeight+0x174>
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
            }
            else
            {
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800b15a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 800b298 <printAllWeight+0x1d8>
            }
            if(x < NUMBER_OF_SQUARES_X)
                printf("     ");
 800b15e:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800b29c <printAllWeight+0x1dc>
        printf("\r\n");
 800b162:	9d01      	ldr	r5, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800b164:	f04f 0a00 	mov.w	sl, #0
 800b168:	e00d      	b.n	800b186 <printAllWeight+0xc6>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800b16a:	8829      	ldrh	r1, [r5, #0]
 800b16c:	4658      	mov	r0, fp
 800b16e:	f008 fbcd 	bl	801390c <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800b172:	f1ba 0f20 	cmp.w	sl, #32
                printf("     ");
 800b176:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X)
 800b178:	d013      	beq.n	800b1a2 <printAllWeight+0xe2>
                printf("     ");
 800b17a:	f008 fbc7 	bl	801390c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800b17e:	f10a 0a01 	add.w	sl, sl, #1
 800b182:	f505 7580 	add.w	r5, r5, #256	; 0x100
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800b186:	7823      	ldrb	r3, [r4, #0]
 800b188:	459a      	cmp	sl, r3
 800b18a:	d1ee      	bne.n	800b16a <printAllWeight+0xaa>
 800b18c:	7863      	ldrb	r3, [r4, #1]
 800b18e:	42bb      	cmp	r3, r7
 800b190:	d1eb      	bne.n	800b16a <printAllWeight+0xaa>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800b192:	8829      	ldrh	r1, [r5, #0]
 800b194:	4640      	mov	r0, r8
 800b196:	f008 fbb9 	bl	801390c <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800b19a:	f1ba 0f20 	cmp.w	sl, #32
                printf("     ");
 800b19e:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X)
 800b1a0:	d1eb      	bne.n	800b17a <printAllWeight+0xba>
 800b1a2:	9b01      	ldr	r3, [sp, #4]
        }
        printf("\r\n");
 800b1a4:	483b      	ldr	r0, [pc, #236]	; (800b294 <printAllWeight+0x1d4>)
 800b1a6:	3b08      	subs	r3, #8
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	f008 fc37 	bl	8013a1c <puts>
 800b1ae:	9f02      	ldr	r7, [sp, #8]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800b1b0:	2f00      	cmp	r7, #0
 800b1b2:	d196      	bne.n	800b0e2 <printAllWeight+0x22>
 800b1b4:	9d03      	ldr	r5, [sp, #12]
    }
    //y が0のときの行だけ表示
    printf("  +  ");
 800b1b6:	4836      	ldr	r0, [pc, #216]	; (800b290 <printAllWeight+0x1d0>)
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
    {
        printf(" %3x ",maze->RawNode[x][0].weight);
 800b1b8:	4e37      	ldr	r6, [pc, #220]	; (800b298 <printAllWeight+0x1d8>)
        if(x < NUMBER_OF_SQUARES_X-1)
                printf("  +  ");
 800b1ba:	4607      	mov	r7, r0
    printf("  +  ");
 800b1bc:	f008 fba6 	bl	801390c <iprintf>
        printf(" %3x ",maze->RawNode[x][0].weight);
 800b1c0:	8869      	ldrh	r1, [r5, #2]
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	f008 fba2 	bl	801390c <iprintf>
 800b1c8:	462c      	mov	r4, r5
 800b1ca:	f505 55ff 	add.w	r5, r5, #8160	; 0x1fe0
 800b1ce:	3518      	adds	r5, #24
                printf("  +  ");
 800b1d0:	4638      	mov	r0, r7
 800b1d2:	f008 fb9b 	bl	801390c <iprintf>
 800b1d6:	f504 7484 	add.w	r4, r4, #264	; 0x108
        printf(" %3x ",maze->RawNode[x][0].weight);
 800b1da:	8861      	ldrh	r1, [r4, #2]
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f008 fb95 	bl	801390c <iprintf>
        if(x < NUMBER_OF_SQUARES_X-1)
 800b1e2:	42ac      	cmp	r4, r5
 800b1e4:	d1f4      	bne.n	800b1d0 <printAllWeight+0x110>
    }
    printf("\r\n");
 800b1e6:	482b      	ldr	r0, [pc, #172]	; (800b294 <printAllWeight+0x1d4>)
    
    
}
 800b1e8:	b005      	add	sp, #20
 800b1ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800b1ee:	f008 bc15 	b.w	8013a1c <puts>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800b1f2:	2b02      	cmp	r3, #2
 800b1f4:	d815      	bhi.n	800b222 <printAllWeight+0x162>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	f008 fb87 	bl	801390c <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800b1fe:	f1ba 0f1f 	cmp.w	sl, #31
                 printf("  +  ");
 800b202:	4630      	mov	r0, r6
            if(x < NUMBER_OF_SQUARES_X-1)
 800b204:	d09b      	beq.n	800b13e <printAllWeight+0x7e>
                 printf("  +  ");
 800b206:	f008 fb81 	bl	801390c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800b20a:	f10a 0a01 	add.w	sl, sl, #1
 800b20e:	f505 7584 	add.w	r5, r5, #264	; 0x108
    if(maze->RawNode[x][y].weight == 0)
 800b212:	886a      	ldrh	r2, [r5, #2]
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800b214:	f1aa 0310 	sub.w	r3, sl, #16
 800b218:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->RawNode[x][y].weight);
 800b21a:	4611      	mov	r1, r2
 800b21c:	4648      	mov	r0, r9
    if(maze->RawNode[x][y].weight == 0)
 800b21e:	2a00      	cmp	r2, #0
 800b220:	d0e7      	beq.n	800b1f2 <printAllWeight+0x132>
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800b222:	7823      	ldrb	r3, [r4, #0]
 800b224:	4553      	cmp	r3, sl
 800b226:	d102      	bne.n	800b22e <printAllWeight+0x16e>
 800b228:	7863      	ldrb	r3, [r4, #1]
 800b22a:	42bb      	cmp	r3, r7
 800b22c:	d0e3      	beq.n	800b1f6 <printAllWeight+0x136>
                printf(" %3x ",maze->RawNode[x][y].weight);
 800b22e:	f008 fb6d 	bl	801390c <iprintf>
 800b232:	e7e4      	b.n	800b1fe <printAllWeight+0x13e>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800b234:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b298 <printAllWeight+0x1d8>
        printf("\r\n");
 800b238:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b23c:	1aad      	subs	r5, r5, r2
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800b23e:	f04f 0a00 	mov.w	sl, #0
 800b242:	e010      	b.n	800b266 <printAllWeight+0x1a6>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800b244:	2b03      	cmp	r3, #3
 800b246:	d816      	bhi.n	800b276 <printAllWeight+0x1b6>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800b248:	f8b9 1000 	ldrh.w	r1, [r9]
 800b24c:	4640      	mov	r0, r8
 800b24e:	f008 fb5d 	bl	801390c <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800b252:	f1ba 0f20 	cmp.w	sl, #32
                printf("     ");
 800b256:	4811      	ldr	r0, [pc, #68]	; (800b29c <printAllWeight+0x1dc>)
            if(x < NUMBER_OF_SQUARES_X)
 800b258:	d0a3      	beq.n	800b1a2 <printAllWeight+0xe2>
                printf("     ");
 800b25a:	f008 fb57 	bl	801390c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800b25e:	f10a 0a01 	add.w	sl, sl, #1
 800b262:	f509 7980 	add.w	r9, r9, #256	; 0x100
    if(maze->ColumnNode[x][y].weight == 0)
 800b266:	f839 2035 	ldrh.w	r2, [r9, r5, lsl #3]
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800b26a:	f1aa 0310 	sub.w	r3, sl, #16
 800b26e:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800b270:	4658      	mov	r0, fp
    if(maze->ColumnNode[x][y].weight == 0)
 800b272:	2a00      	cmp	r2, #0
 800b274:	d0e6      	beq.n	800b244 <printAllWeight+0x184>
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800b276:	7823      	ldrb	r3, [r4, #0]
 800b278:	4553      	cmp	r3, sl
 800b27a:	d102      	bne.n	800b282 <printAllWeight+0x1c2>
 800b27c:	7863      	ldrb	r3, [r4, #1]
 800b27e:	42bb      	cmp	r3, r7
 800b280:	d0e2      	beq.n	800b248 <printAllWeight+0x188>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800b282:	f8b9 1000 	ldrh.w	r1, [r9]
 800b286:	f008 fb41 	bl	801390c <iprintf>
 800b28a:	e7e2      	b.n	800b252 <printAllWeight+0x192>
 800b28c:	08017008 	.word	0x08017008
 800b290:	08017020 	.word	0x08017020
 800b294:	08017368 	.word	0x08017368
 800b298:	0801703c 	.word	0x0801703c
 800b29c:	08017044 	.word	0x08017044
 800b2a0:	08017028 	.word	0x08017028

0800b2a4 <initWeight>:
            maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].draw == true) ? MAX_WEIGHT : 0;     //西
        }
    }
}
void initWeight(maze_node *maze)
{
 800b2a4:	b410      	push	{r4}
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	f500 5404 	add.w	r4, r0, #8448	; 0x2100
    // }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800b2ac:	f640 71ff 	movw	r1, #4095	; 0xfff
 800b2b0:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800b2b4:	8059      	strh	r1, [r3, #2]
 800b2b6:	3308      	adds	r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d1fb      	bne.n	800b2b4 <initWeight+0x10>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b2bc:	42a3      	cmp	r3, r4
 800b2be:	d1f7      	bne.n	800b2b0 <initWeight+0xc>
 800b2c0:	f500 5304 	add.w	r3, r0, #8448	; 0x2100
 800b2c4:	f500 4084 	add.w	r0, r0, #16896	; 0x4200
 800b2c8:	3302      	adds	r3, #2
 800b2ca:	3002      	adds	r0, #2
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800b2cc:	f640 71ff 	movw	r1, #4095	; 0xfff
 800b2d0:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800b2d4:	f823 1b08 	strh.w	r1, [r3], #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d1fb      	bne.n	800b2d4 <initWeight+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800b2dc:	4283      	cmp	r3, r0
 800b2de:	d1f7      	bne.n	800b2d0 <initWeight+0x2c>
        }
    }
}
 800b2e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop

0800b2e8 <initMaze>:
void initMaze(maze_node *maze) //重みは別で初期化
{
 800b2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //まず未探索状態にする
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b2ec:	2600      	movs	r6, #0
 800b2ee:	4607      	mov	r7, r0
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800b2f0:	4684      	mov	ip, r0
        {
            maze->RawNode[i][j].existence = UNKNOWN;
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800b2f2:	4631      	mov	r1, r6
            maze->RawNode[i][j].existence = UNKNOWN;
 800b2f4:	2502      	movs	r5, #2
 800b2f6:	b2f4      	uxtb	r4, r6
{
 800b2f8:	4663      	mov	r3, ip
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800b2fa:	2201      	movs	r2, #1
            maze->RawNode[i][j].rc = 0;
            maze->RawNode[i][j].pos.x = i;
            maze->RawNode[i][j].pos.y = j;
 800b2fc:	73da      	strb	r2, [r3, #15]
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800b2fe:	3201      	adds	r2, #1
 800b300:	2a20      	cmp	r2, #32
            maze->RawNode[i][j].existence = UNKNOWN;
 800b302:	721d      	strb	r5, [r3, #8]
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800b304:	7319      	strb	r1, [r3, #12]
            maze->RawNode[i][j].rc = 0;
 800b306:	7359      	strb	r1, [r3, #13]
            maze->RawNode[i][j].pos.x = i;
 800b308:	739c      	strb	r4, [r3, #14]
 800b30a:	f103 0308 	add.w	r3, r3, #8
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800b30e:	d1f5      	bne.n	800b2fc <initMaze+0x14>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b310:	3601      	adds	r6, #1
 800b312:	2e20      	cmp	r6, #32
 800b314:	f50c 7c84 	add.w	ip, ip, #264	; 0x108
 800b318:	d1ed      	bne.n	800b2f6 <initMaze+0xe>
 800b31a:	f500 5c08 	add.w	ip, r0, #8704	; 0x2200
        }
    }
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800b31e:	f04f 0e01 	mov.w	lr, #1
 800b322:	46e0      	mov	r8, ip
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].existence = UNKNOWN;
            maze->ColumnNode[i][j].draw = false;
            maze->ColumnNode[i][j].rc = 1;
 800b324:	4676      	mov	r6, lr
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800b326:	2502      	movs	r5, #2
            maze->ColumnNode[i][j].draw = false;
 800b328:	2400      	movs	r4, #0
 800b32a:	fa5f f18e 	uxtb.w	r1, lr
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b32e:	4643      	mov	r3, r8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b330:	2200      	movs	r2, #0
            maze->ColumnNode[i][j].pos.x = i;
            maze->ColumnNode[i][j].pos.y = j;
 800b332:	71da      	strb	r2, [r3, #7]
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b334:	3201      	adds	r2, #1
 800b336:	2a20      	cmp	r2, #32
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800b338:	701d      	strb	r5, [r3, #0]
            maze->ColumnNode[i][j].draw = false;
 800b33a:	711c      	strb	r4, [r3, #4]
            maze->ColumnNode[i][j].rc = 1;
 800b33c:	715e      	strb	r6, [r3, #5]
            maze->ColumnNode[i][j].pos.x = i;
 800b33e:	7199      	strb	r1, [r3, #6]
 800b340:	f103 0308 	add.w	r3, r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b344:	d1f5      	bne.n	800b332 <initMaze+0x4a>
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800b346:	f10e 0e01 	add.w	lr, lr, #1
 800b34a:	f1be 0f20 	cmp.w	lr, #32
 800b34e:	f508 7880 	add.w	r8, r8, #256	; 0x100
 800b352:	d1ea      	bne.n	800b32a <initMaze+0x42>
        }
    }
    
    // 壁の有無を初期化
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b354:	2300      	movs	r3, #0
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1

        maze->RawNode[i][0].draw = true;                        
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;

        maze->RawNode[i][0].rc = 0;
 800b356:	461c      	mov	r4, r3
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800b358:	2201      	movs	r2, #1
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;

        maze->RawNode[i][0].pos.x = i;
 800b35a:	b2d9      	uxtb	r1, r3
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b35c:	3301      	adds	r3, #1
 800b35e:	2b20      	cmp	r3, #32
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800b360:	703a      	strb	r2, [r7, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1
 800b362:	f887 2100 	strb.w	r2, [r7, #256]	; 0x100
        maze->RawNode[i][0].draw = true;                        
 800b366:	713a      	strb	r2, [r7, #4]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;
 800b368:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
        maze->RawNode[i][0].rc = 0;
 800b36c:	717c      	strb	r4, [r7, #5]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800b36e:	f887 4105 	strb.w	r4, [r7, #261]	; 0x105
        maze->RawNode[i][0].pos.y = NUMBER_OF_SQUARES_Y;
 800b372:	f887 e007 	strb.w	lr, [r7, #7]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800b376:	f887 e107 	strb.w	lr, [r7, #263]	; 0x107
        maze->RawNode[i][0].pos.x = i;
 800b37a:	71b9      	strb	r1, [r7, #6]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800b37c:	f887 1106 	strb.w	r1, [r7, #262]	; 0x106
 800b380:	f507 7784 	add.w	r7, r7, #264	; 0x108
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b384:	d1e9      	bne.n	800b35a <initMaze+0x72>
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;

        maze->ColumnNode[0][j].rc = 1;
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;

        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
 800b386:	4619      	mov	r1, r3
 800b388:	f500 5204 	add.w	r2, r0, #8448	; 0x2100
 800b38c:	f500 4382 	add.w	r3, r0, #16640	; 0x4100
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b390:	2500      	movs	r5, #0
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800b392:	2401      	movs	r4, #1
        maze->ColumnNode[0][j].pos.y = j;
 800b394:	b2ee      	uxtb	r6, r5
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b396:	3501      	adds	r5, #1
 800b398:	2d20      	cmp	r5, #32
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800b39a:	7014      	strb	r4, [r2, #0]
 800b39c:	f103 0308 	add.w	r3, r3, #8
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;  //東壁すべて1
 800b3a0:	f803 4c08 	strb.w	r4, [r3, #-8]
 800b3a4:	f102 0208 	add.w	r2, r2, #8
        maze->ColumnNode[0][j].draw = true;                    
 800b3a8:	f802 4c04 	strb.w	r4, [r2, #-4]
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800b3ac:	f803 4c04 	strb.w	r4, [r3, #-4]
        maze->ColumnNode[0][j].rc = 1;
 800b3b0:	f802 4c03 	strb.w	r4, [r2, #-3]
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800b3b4:	f803 4c03 	strb.w	r4, [r3, #-3]
        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
 800b3b8:	f802 1c02 	strb.w	r1, [r2, #-2]
        maze->ColumnNode[0][j].pos.y = j;
 800b3bc:	f802 6c01 	strb.w	r6, [r2, #-1]
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800b3c0:	f803 6c01 	strb.w	r6, [r3, #-1]
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800b3c4:	f803 1c02 	strb.w	r1, [r3, #-2]
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b3c8:	d1e4      	bne.n	800b394 <initMaze+0xac>
    }
    maze->ColumnNode[1][0].existence = WALL;    //東1
    maze->RawNode[0][1].existence = NOWALL;     //北0

    maze->ColumnNode[1][0].draw = true;    //東1
 800b3ca:	f242 2204 	movw	r2, #8708	; 0x2204
    maze->ColumnNode[1][0].existence = WALL;    //東1
 800b3ce:	f88c 4000 	strb.w	r4, [ip]
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800b3d2:	2300      	movs	r3, #0
    maze->ColumnNode[1][0].draw = true;    //東1
 800b3d4:	5484      	strb	r4, [r0, r2]
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800b3d6:	7203      	strb	r3, [r0, #8]
    maze->RawNode[0][1].draw = false;     //北0
 800b3d8:	7303      	strb	r3, [r0, #12]
}
 800b3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3de:	bf00      	nop

0800b3e0 <printAllNode>:
    printf("行ノード %d, %d : 壁 %u, 重み %u, draw %u\r\n", x,y, mn->RawNode[x][y].existence,mn->RawNode[x][y].weight,mn->RawNode[x][y].draw);
    printf("列ノード %d, %d : 壁 %u, 重み %u, draw %u\r\n", x,y, mn->ColumnNode[x][y].existence,mn->ColumnNode[x][y].weight,mn->ColumnNode[x][y].draw);
}
//ノードの壁の有無はそのまま描画用データになる。外堀だけprintfしない
void printAllNode(maze_node *mn)
{
 800b3e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	f500 5708 	add.w	r7, r0, #8704	; 0x2200
 800b3e8:	f500 4984 	add.w	r9, r0, #16896	; 0x4200
 800b3ec:	4680      	mov	r8, r0
    printf("全ノード\r\n");
 800b3ee:	481a      	ldr	r0, [pc, #104]	; (800b458 <printAllNode+0x78>)
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            printf("%u,",mn->RawNode[i][j].draw);
 800b3f0:	4e1a      	ldr	r6, [pc, #104]	; (800b45c <printAllNode+0x7c>)
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            printf("%u",mn->ColumnNode[i+1][j].draw);
 800b3f2:	4d1b      	ldr	r5, [pc, #108]	; (800b460 <printAllNode+0x80>)
            if(j < NUMBER_OF_SQUARES_Y-1)
                printf(",");
        }
        printf("\r\n");
 800b3f4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800b464 <printAllNode+0x84>
 800b3f8:	370c      	adds	r7, #12
 800b3fa:	f109 090c 	add.w	r9, r9, #12
    printf("全ノード\r\n");
 800b3fe:	f008 fb0d 	bl	8013a1c <puts>
 800b402:	f508 7b80 	add.w	fp, r8, #256	; 0x100
{
 800b406:	4644      	mov	r4, r8
            printf("%u,",mn->RawNode[i][j].draw);
 800b408:	7b21      	ldrb	r1, [r4, #12]
 800b40a:	4630      	mov	r0, r6
 800b40c:	3408      	adds	r4, #8
 800b40e:	f008 fa7d 	bl	801390c <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800b412:	455c      	cmp	r4, fp
 800b414:	d1f8      	bne.n	800b408 <printAllNode+0x28>
            printf("%u",mn->ColumnNode[i+1][j].draw);
 800b416:	f817 1c08 	ldrb.w	r1, [r7, #-8]
 800b41a:	4628      	mov	r0, r5
 800b41c:	f008 fa76 	bl	801390c <iprintf>
 800b420:	f107 0bf8 	add.w	fp, r7, #248	; 0xf8
 800b424:	463c      	mov	r4, r7
                printf(",");
 800b426:	202c      	movs	r0, #44	; 0x2c
 800b428:	f008 fa88 	bl	801393c <putchar>
            printf("%u",mn->ColumnNode[i+1][j].draw);
 800b42c:	f814 1b08 	ldrb.w	r1, [r4], #8
 800b430:	4628      	mov	r0, r5
 800b432:	f008 fa6b 	bl	801390c <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 800b436:	455c      	cmp	r4, fp
 800b438:	d1f5      	bne.n	800b426 <printAllNode+0x46>
 800b43a:	f507 7780 	add.w	r7, r7, #256	; 0x100
        printf("\r\n");
 800b43e:	4650      	mov	r0, sl
 800b440:	f008 faec 	bl	8013a1c <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b444:	454f      	cmp	r7, r9
 800b446:	f508 7884 	add.w	r8, r8, #264	; 0x108
 800b44a:	d1da      	bne.n	800b402 <printAllNode+0x22>
    }
    printf("\r\n");
 800b44c:	4805      	ldr	r0, [pc, #20]	; (800b464 <printAllNode+0x84>)
}
 800b44e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800b452:	f008 bae3 	b.w	8013a1c <puts>
 800b456:	bf00      	nop
 800b458:	08016ff0 	.word	0x08016ff0
 800b45c:	08017000 	.word	0x08017000
 800b460:	08017004 	.word	0x08017004
 800b464:	08017368 	.word	0x08017368

0800b468 <printMatrix16ValueFromNode>:
    return val;
}

//機体からTeraTermで出力するための関数
void printMatrix16ValueFromNode(maze_node *maze)
{
 800b468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	4680      	mov	r8, r0
 800b46e:	b083      	sub	sp, #12
    printf("機体からTeraTermへの出力用\r\n");
 800b470:	4824      	ldr	r0, [pc, #144]	; (800b504 <printMatrix16ValueFromNode+0x9c>)
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
    {
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
        {
            printf("%u",convertNodeTo16Value(maze, i,j));
 800b472:	4f25      	ldr	r7, [pc, #148]	; (800b508 <printMatrix16ValueFromNode+0xa0>)
    printf("機体からTeraTermへの出力用\r\n");
 800b474:	f008 fad2 	bl	8013a1c <puts>
 800b478:	2320      	movs	r3, #32
 800b47a:	f508 7880 	add.w	r8, r8, #256	; 0x100
 800b47e:	9301      	str	r3, [sp, #4]
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800b480:	f04f 0a1f 	mov.w	sl, #31
 800b484:	f508 557f 	add.w	r5, r8, #16320	; 0x3fc0
 800b488:	f508 4681 	add.w	r6, r8, #16512	; 0x4080
 800b48c:	ebaa 0403 	sub.w	r4, sl, r3
 800b490:	f508 5b03 	add.w	fp, r8, #8384	; 0x20c0
 800b494:	353c      	adds	r5, #60	; 0x3c
 800b496:	367c      	adds	r6, #124	; 0x7c
 800b498:	00e4      	lsls	r4, r4, #3
 800b49a:	f10b 0b3c 	add.w	fp, fp, #60	; 0x3c
{
 800b49e:	46c1      	mov	r9, r8
 800b4a0:	e003      	b.n	800b4aa <printMatrix16ValueFromNode+0x42>
            if(i < NUMBER_OF_SQUARES_X-1)
                printf(",");
 800b4a2:	f008 fa4b 	bl	801393c <putchar>
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b4a6:	455e      	cmp	r6, fp
 800b4a8:	d01a      	beq.n	800b4e0 <printMatrix16ValueFromNode+0x78>
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800b4aa:	f89b 1000 	ldrb.w	r1, [fp]
    val += 2 * maze->ColumnNode[x+1][y].draw;   //東
 800b4ae:	f89b 3100 	ldrb.w	r3, [fp, #256]	; 0x100
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800b4b2:	f899 2004 	ldrb.w	r2, [r9, #4]
 800b4b6:	00c9      	lsls	r1, r1, #3
 800b4b8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    val += 4 * maze->RawNode[x][y].draw;        //南
 800b4bc:	eb09 0304 	add.w	r3, r9, r4
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800b4c0:	4411      	add	r1, r2
    val += 4 * maze->RawNode[x][y].draw;        //南
 800b4c2:	791b      	ldrb	r3, [r3, #4]
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800b4c4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
            printf("%u",convertNodeTo16Value(maze, i,j));
 800b4c8:	b2c9      	uxtb	r1, r1
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	f008 fa1e 	bl	801390c <iprintf>
            if(i < NUMBER_OF_SQUARES_X-1)
 800b4d0:	455d      	cmp	r5, fp
                printf(",");
 800b4d2:	f04f 002c 	mov.w	r0, #44	; 0x2c
 800b4d6:	f50b 7b80 	add.w	fp, fp, #256	; 0x100
 800b4da:	f509 7984 	add.w	r9, r9, #264	; 0x108
            if(i < NUMBER_OF_SQUARES_X-1)
 800b4de:	d1e0      	bne.n	800b4a2 <printMatrix16ValueFromNode+0x3a>
        }
        printf("\r\n");
 800b4e0:	480a      	ldr	r0, [pc, #40]	; (800b50c <printMatrix16ValueFromNode+0xa4>)
 800b4e2:	f008 fa9b 	bl	8013a1c <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800b4e6:	9b01      	ldr	r3, [sp, #4]
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4ee:	f1a8 0808 	sub.w	r8, r8, #8
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	d1c6      	bne.n	800b484 <printMatrix16ValueFromNode+0x1c>
    }
    printf("\r\n");
 800b4f6:	4805      	ldr	r0, [pc, #20]	; (800b50c <printMatrix16ValueFromNode+0xa4>)

}
 800b4f8:	b003      	add	sp, #12
 800b4fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800b4fe:	f008 ba8d 	b.w	8013a1c <puts>
 800b502:	bf00      	nop
 800b504:	0801704c 	.word	0x0801704c
 800b508:	08017004 	.word	0x08017004
 800b50c:	08017368 	.word	0x08017368

0800b510 <updateNodeThree>:


//壁があれば重みはデフォルト値を代入する
//壁がなければそのままにしておく 前左右の情報の方角に合わせた変換は別のところで
void updateNodeThree(maze_node *maze, state *st, uint8_t x, uint8_t y)
{
 800b510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //壁の有無の更新。既知の壁には上書きしない。重みの更新は？既知かどうかは重複するから書かない
        //重みは？壁があればMAX値、なければそのまま   
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800b514:	0154      	lsls	r4, r2, #5
 800b516:	1c5f      	adds	r7, r3, #1
 800b518:	18a5      	adds	r5, r4, r2
 800b51a:	443d      	add	r5, r7
 800b51c:	18a6      	adds	r6, r4, r2
 800b51e:	f810 c035 	ldrb.w	ip, [r0, r5, lsl #3]
 800b522:	f1bc 0f02 	cmp.w	ip, #2
 800b526:	bf08      	it	eq
 800b528:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800b52c:	f102 0501 	add.w	r5, r2, #1
 800b530:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800b534:	443e      	add	r6, r7
 800b536:	bf08      	it	eq
 800b538:	f00c 0c03 	andeq.w	ip, ip, #3
 800b53c:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800b540:	f800 c036 	strb.w	ip, [r0, r6, lsl #3]
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800b544:	f505 5e04 	add.w	lr, r5, #8448	; 0x2100
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800b548:	eb04 0c02 	add.w	ip, r4, r2
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800b54c:	f89e 6000 	ldrb.w	r6, [lr]
 800b550:	2e02      	cmp	r6, #2
 800b552:	bf08      	it	eq
 800b554:	790e      	ldrbeq	r6, [r1, #4]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800b556:	449c      	add	ip, r3
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800b558:	bf08      	it	eq
 800b55a:	f3c6 0681 	ubfxeq	r6, r6, #2, #2
 800b55e:	f88e 6000 	strb.w	r6, [lr]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800b562:	f810 c03c 	ldrb.w	ip, [r0, ip, lsl #3]
 800b566:	f1bc 0f02 	cmp.w	ip, #2
 800b56a:	bf08      	it	eq
 800b56c:	f891 c004 	ldrbeq.w	ip, [r1, #4]
 800b570:	eb04 0802 	add.w	r8, r4, r2
 800b574:	4498      	add	r8, r3
 800b576:	eb03 1642 	add.w	r6, r3, r2, lsl #5
 800b57a:	bf08      	it	eq
 800b57c:	f3cc 1c01 	ubfxeq	ip, ip, #4, #2
 800b580:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b584:	f800 c038 	strb.w	ip, [r0, r8, lsl #3]
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800b588:	f506 5c04 	add.w	ip, r6, #8448	; 0x2100
    // maze->RawNode[x][y+1].flag = true;      //北
    // maze->ColumnNode[x+1][y].flag = true;   //東
    // maze->RawNode[x][y].flag = true;        //南
    // maze->ColumnNode[x][y].flag = true;     //西

    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800b58c:	4414      	add	r4, r2
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800b58e:	f89c 8000 	ldrb.w	r8, [ip]
 800b592:	f1b8 0f02 	cmp.w	r8, #2
 800b596:	bf08      	it	eq
 800b598:	f891 8004 	ldrbeq.w	r8, [r1, #4]
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800b59c:	eb04 0107 	add.w	r1, r4, r7
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800b5a0:	bf08      	it	eq
 800b5a2:	ea4f 1898 	moveq.w	r8, r8, lsr #6
 800b5a6:	f88c 8000 	strb.w	r8, [ip]
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800b5aa:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 800b5ae:	f1a2 0201 	sub.w	r2, r2, #1
 800b5b2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b5b6:	fab2 f282 	clz	r2, r2
 800b5ba:	0952      	lsrs	r2, r2, #5
 800b5bc:	710a      	strb	r2, [r1, #4]
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800b5be:	f89e 2000 	ldrb.w	r2, [lr]
 800b5c2:	f1a2 0201 	sub.w	r2, r2, #1
 800b5c6:	f242 1104 	movw	r1, #8452	; 0x2104
 800b5ca:	fab2 f282 	clz	r2, r2
 800b5ce:	0952      	lsrs	r2, r2, #5
 800b5d0:	546a      	strb	r2, [r5, r1]
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800b5d2:	4423      	add	r3, r4
 800b5d4:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 800b5d8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800b5dc:	f1a2 0301 	sub.w	r3, r2, #1
 800b5e0:	fab3 f383 	clz	r3, r3
 800b5e4:	095b      	lsrs	r3, r3, #5
 800b5e6:	7103      	strb	r3, [r0, #4]
    maze->ColumnNode[x][y].draw = (maze->ColumnNode[x][y].existence == WALL) ? true : false;        //西
 800b5e8:	f89c 3000 	ldrb.w	r3, [ip]
 800b5ec:	f1a3 0301 	sub.w	r3, r3, #1
 800b5f0:	fab3 f383 	clz	r3, r3
 800b5f4:	095b      	lsrs	r3, r3, #5
 800b5f6:	5473      	strb	r3, [r6, r1]
    //重みは毎回リセットして計算しなおすのでここでは要らない
    // maze->RawNode[x][y+1].weight = (maze->RawNode[x][y+1].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y+1].weight;             //北
    // maze->ColumnNode[x+1][y].weight = (maze->ColumnNode[x+1][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x+1][y].weight;    //東
    // maze->RawNode[x][y].weight = (maze->RawNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y].weight;                   //南
    // maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x][y].weight;          //西
}
 800b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b5fc <updateAllNodeWeight>:
    // setTargetWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size);
//ゴールノードを0に初期化
    // setGoalWeight(maze);
    
void updateAllNodeWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t area_size_x, uint8_t area_size_y, int mask)
{
 800b5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b600:	b08d      	sub	sp, #52	; 0x34
 800b602:	f500 5604 	add.w	r6, r0, #8448	; 0x2100
 800b606:	f89d c058 	ldrb.w	ip, [sp, #88]	; 0x58
 800b60a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800b60c:	9000      	str	r0, [sp, #0]
 800b60e:	9205      	str	r2, [sp, #20]
 800b610:	960a      	str	r6, [sp, #40]	; 0x28
 800b612:	4602      	mov	r2, r0
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800b614:	f640 70ff 	movw	r0, #4095	; 0xfff
 800b618:	f502 7584 	add.w	r5, r2, #264	; 0x108
 800b61c:	8050      	strh	r0, [r2, #2]
 800b61e:	3208      	adds	r2, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800b620:	42aa      	cmp	r2, r5
 800b622:	d1fb      	bne.n	800b61c <updateAllNodeWeight+0x20>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800b624:	42b2      	cmp	r2, r6
 800b626:	d1f7      	bne.n	800b618 <updateAllNodeWeight+0x1c>
 800b628:	9800      	ldr	r0, [sp, #0]
 800b62a:	f500 5204 	add.w	r2, r0, #8448	; 0x2100
 800b62e:	f500 4084 	add.w	r0, r0, #16896	; 0x4200
 800b632:	3202      	adds	r2, #2
 800b634:	3002      	adds	r0, #2
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800b636:	f640 76ff 	movw	r6, #4095	; 0xfff
 800b63a:	f502 7580 	add.w	r5, r2, #256	; 0x100
 800b63e:	f822 6b08 	strh.w	r6, [r2], #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800b642:	42aa      	cmp	r2, r5
 800b644:	d1fb      	bne.n	800b63e <updateAllNodeWeight+0x42>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800b646:	4282      	cmp	r2, r0
 800b648:	d1f7      	bne.n	800b63a <updateAllNodeWeight+0x3e>
    for(int i=0; i < target_size_x; i++)
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f000 80e6 	beq.w	800b81c <updateAllNodeWeight+0x220>
 800b650:	f1bc 0f00 	cmp.w	ip, #0
 800b654:	f000 80e2 	beq.w	800b81c <updateAllNodeWeight+0x220>
 800b658:	9e05      	ldr	r6, [sp, #20]
 800b65a:	9f00      	ldr	r7, [sp, #0]
 800b65c:	014a      	lsls	r2, r1, #5
 800b65e:	eba7 2501 	sub.w	r5, r7, r1, lsl #8
 800b662:	9203      	str	r2, [sp, #12]
 800b664:	4432      	add	r2, r6
 800b666:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800b66a:	eb01 1241 	add.w	r2, r1, r1, lsl #5
 800b66e:	9202      	str	r2, [sp, #8]
 800b670:	1858      	adds	r0, r3, r1
 800b672:	9b02      	ldr	r3, [sp, #8]
 800b674:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800b678:	4433      	add	r3, r6
 800b67a:	9507      	str	r5, [sp, #28]
 800b67c:	9306      	str	r3, [sp, #24]
 800b67e:	463d      	mov	r5, r7
 800b680:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800b684:	f1ac 0203 	sub.w	r2, ip, #3
 800b688:	eb00 1740 	add.w	r7, r0, r0, lsl #5
 800b68c:	9e07      	ldr	r6, [sp, #28]
 800b68e:	9806      	ldr	r0, [sp, #24]
 800b690:	9709      	str	r7, [sp, #36]	; 0x24
 800b692:	f022 0201 	bic.w	r2, r2, #1
 800b696:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800b69a:	ebc1 6b01 	rsb	fp, r1, r1, lsl #24
 800b69e:	3602      	adds	r6, #2
 800b6a0:	3302      	adds	r3, #2
 800b6a2:	3101      	adds	r1, #1
 800b6a4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800b6a8:	3202      	adds	r2, #2
 800b6aa:	f1bc 0f02 	cmp.w	ip, #2
 800b6ae:	9607      	str	r6, [sp, #28]
 800b6b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6b2:	9004      	str	r0, [sp, #16]
 800b6b4:	9201      	str	r2, [sp, #4]
 800b6b6:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
 800b6ba:	ea4f 2601 	mov.w	r6, r1, lsl #8
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800b6be:	f640 73ff 	movw	r3, #4095	; 0xfff
 800b6c2:	f240 80a2 	bls.w	800b80a <updateAllNodeWeight+0x20e>
 800b6c6:	9907      	ldr	r1, [sp, #28]
 800b6c8:	9a04      	ldr	r2, [sp, #16]
        for(int j=0; j < target_size_y; j++)
 800b6ca:	9408      	str	r4, [sp, #32]
 800b6cc:	198d      	adds	r5, r1, r6
 800b6ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6d0:	7917      	ldrb	r7, [r2, #4]
 800b6d2:	1988      	adds	r0, r1, r6
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	e00a      	b.n	800b6ee <updateAllNodeWeight+0xf2>
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;     //西
 800b6d8:	f8a5 e008 	strh.w	lr, [r5, #8]
 800b6dc:	9c01      	ldr	r4, [sp, #4]
 800b6de:	42a1      	cmp	r1, r4
 800b6e0:	f102 0210 	add.w	r2, r2, #16
 800b6e4:	f105 0510 	add.w	r5, r5, #16
 800b6e8:	f100 0010 	add.w	r0, r0, #16
 800b6ec:	d03e      	beq.n	800b76c <updateAllNodeWeight+0x170>
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800b6ee:	f890 e002 	ldrb.w	lr, [r0, #2]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;     //西
 800b6f2:	f895 9002 	ldrb.w	r9, [r5, #2]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800b6f6:	f890 a00a 	ldrb.w	sl, [r0, #10]
 800b6fa:	f1be 0f00 	cmp.w	lr, #0
 800b6fe:	bf0c      	ite	eq
 800b700:	f04f 0800 	moveq.w	r8, #0
 800b704:	4698      	movne	r8, r3
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b706:	2f00      	cmp	r7, #0
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].draw == true) ? MAX_WEIGHT : 0;       //北
 800b708:	7d17      	ldrb	r7, [r2, #20]
 800b70a:	f892 e00c 	ldrb.w	lr, [r2, #12]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800b70e:	f8a0 8000 	strh.w	r8, [r0]
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b712:	bf0c      	ite	eq
 800b714:	f04f 0800 	moveq.w	r8, #0
 800b718:	4698      	movne	r8, r3
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;     //西
 800b71a:	f1b9 0f00 	cmp.w	r9, #0
 800b71e:	bf0c      	ite	eq
 800b720:	f04f 0900 	moveq.w	r9, #0
 800b724:	4699      	movne	r9, r3
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].draw == true) ? MAX_WEIGHT : 0;       //北
 800b726:	2f00      	cmp	r7, #0
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b728:	f8a2 8002 	strh.w	r8, [r2, #2]
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].draw == true) ? MAX_WEIGHT : 0;       //北
 800b72c:	bf14      	ite	ne
 800b72e:	4698      	movne	r8, r3
 800b730:	f04f 0800 	moveq.w	r8, #0
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800b734:	f1ba 0f00 	cmp.w	sl, #0
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;     //西
 800b738:	f8a5 9000 	strh.w	r9, [r5]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800b73c:	bf0c      	ite	eq
 800b73e:	f04f 0900 	moveq.w	r9, #0
 800b742:	4699      	movne	r9, r3
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b744:	f1be 0f00 	cmp.w	lr, #0
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;     //西
 800b748:	f895 e00a 	ldrb.w	lr, [r5, #10]
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].draw == true) ? MAX_WEIGHT : 0;       //北
 800b74c:	f8a2 8012 	strh.w	r8, [r2, #18]
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b750:	bf0c      	ite	eq
 800b752:	f04f 0800 	moveq.w	r8, #0
 800b756:	4698      	movne	r8, r3
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800b758:	f8a0 9008 	strh.w	r9, [r0, #8]
 800b75c:	3102      	adds	r1, #2
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b75e:	f8a2 800a 	strh.w	r8, [r2, #10]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;     //西
 800b762:	f1be 0f00 	cmp.w	lr, #0
 800b766:	d0b7      	beq.n	800b6d8 <updateAllNodeWeight+0xdc>
 800b768:	812b      	strh	r3, [r5, #8]
 800b76a:	e7b7      	b.n	800b6dc <updateAllNodeWeight+0xe0>
 800b76c:	9c08      	ldr	r4, [sp, #32]
 800b76e:	9a03      	ldr	r2, [sp, #12]
 800b770:	9805      	ldr	r0, [sp, #20]
 800b772:	1810      	adds	r0, r2, r0
 800b774:	f242 1502 	movw	r5, #8450	; 0x2102
 800b778:	4408      	add	r0, r1
 800b77a:	9a06      	ldr	r2, [sp, #24]
 800b77c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800b780:	9d00      	ldr	r5, [sp, #0]
 800b782:	440a      	add	r2, r1
 800b784:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800b788:	4428      	add	r0, r5
 800b78a:	eb00 050b 	add.w	r5, r0, fp
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800b78e:	19af      	adds	r7, r5, r6
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].draw == true) ? MAX_WEIGHT : 0;       //北
 800b790:	f892 e00c 	ldrb.w	lr, [r2, #12]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800b794:	f897 8002 	ldrb.w	r8, [r7, #2]
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b798:	7917      	ldrb	r7, [r2, #4]
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].draw == true) ? MAX_WEIGHT : 0;       //北
 800b79a:	f1be 0f00 	cmp.w	lr, #0
 800b79e:	bf0c      	ite	eq
 800b7a0:	f04f 0e00 	moveq.w	lr, #0
 800b7a4:	469e      	movne	lr, r3
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800b7a6:	f1b8 0f00 	cmp.w	r8, #0
 800b7aa:	bf0c      	ite	eq
 800b7ac:	f04f 0800 	moveq.w	r8, #0
 800b7b0:	4698      	movne	r8, r3
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b7b2:	2f00      	cmp	r7, #0
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;     //西
 800b7b4:	7887      	ldrb	r7, [r0, #2]
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].draw == true) ? MAX_WEIGHT : 0;       //北
 800b7b6:	f8a2 e00a 	strh.w	lr, [r2, #10]
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b7ba:	bf0c      	ite	eq
 800b7bc:	f04f 0e00 	moveq.w	lr, #0
 800b7c0:	469e      	movne	lr, r3
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].draw == true) ? MAX_WEIGHT : 0; //東
 800b7c2:	f825 8006 	strh.w	r8, [r5, r6]
        for(int j=0; j < target_size_y; j++)
 800b7c6:	3101      	adds	r1, #1
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b7c8:	f8a2 e002 	strh.w	lr, [r2, #2]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;     //西
 800b7cc:	b9ff      	cbnz	r7, 800b80e <updateAllNodeWeight+0x212>
        for(int j=0; j < target_size_y; j++)
 800b7ce:	458c      	cmp	ip, r1
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;     //西
 800b7d0:	f820 7b08 	strh.w	r7, [r0], #8
 800b7d4:	f102 0208 	add.w	r2, r2, #8
        for(int j=0; j < target_size_y; j++)
 800b7d8:	dcd7      	bgt.n	800b78a <updateAllNodeWeight+0x18e>
 800b7da:	9903      	ldr	r1, [sp, #12]
 800b7dc:	9a02      	ldr	r2, [sp, #8]
    for(int i=0; i < target_size_x; i++)
 800b7de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7e0:	3120      	adds	r1, #32
 800b7e2:	9103      	str	r1, [sp, #12]
 800b7e4:	9904      	ldr	r1, [sp, #16]
 800b7e6:	3221      	adds	r2, #33	; 0x21
 800b7e8:	f501 7184 	add.w	r1, r1, #264	; 0x108
 800b7ec:	4282      	cmp	r2, r0
 800b7ee:	9202      	str	r2, [sp, #8]
 800b7f0:	f5ab 7b80 	sub.w	fp, fp, #256	; 0x100
 800b7f4:	f506 7680 	add.w	r6, r6, #256	; 0x100
 800b7f8:	9104      	str	r1, [sp, #16]
 800b7fa:	d00f      	beq.n	800b81c <updateAllNodeWeight+0x220>
 800b7fc:	9905      	ldr	r1, [sp, #20]
 800b7fe:	f1bc 0f02 	cmp.w	ip, #2
 800b802:	440a      	add	r2, r1
 800b804:	9206      	str	r2, [sp, #24]
 800b806:	f63f af5e 	bhi.w	800b6c6 <updateAllNodeWeight+0xca>
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b80a:	2100      	movs	r1, #0
 800b80c:	e7af      	b.n	800b76e <updateAllNodeWeight+0x172>
        for(int j=0; j < target_size_y; j++)
 800b80e:	4561      	cmp	r1, ip
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;     //西
 800b810:	f820 3b08 	strh.w	r3, [r0], #8
 800b814:	f102 0208 	add.w	r2, r2, #8
        for(int j=0; j < target_size_y; j++)
 800b818:	dbb7      	blt.n	800b78a <updateAllNodeWeight+0x18e>
 800b81a:	e7de      	b.n	800b7da <updateAllNodeWeight+0x1de>
        //一回目は、重み0のノードをどうするか.(中は壁がないことが確定している)
    //ノードの座標の差を見て、斜めか直進かを決める
    //ターゲットとするエリアのサイズ情報がいる
    //スタートはターゲットエリアの外堀ノード
    //6個参照して
    printf("重み全体の更新\r\n");
 800b81c:	4884      	ldr	r0, [pc, #528]	; (800ba30 <updateAllNodeWeight+0x434>)
	timer8 = 0;
	t = 0;
 800b81e:	4d85      	ldr	r5, [pc, #532]	; (800ba34 <updateAllNodeWeight+0x438>)
    printf("重み全体の更新\r\n");
 800b820:	f008 f8fc 	bl	8013a1c <puts>
	timer8 = 0;
 800b824:	4a84      	ldr	r2, [pc, #528]	; (800ba38 <updateAllNodeWeight+0x43c>)
	HAL_TIM_Base_Start_IT(&htim8);
 800b826:	4885      	ldr	r0, [pc, #532]	; (800ba3c <updateAllNodeWeight+0x440>)
	timer8 = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	6013      	str	r3, [r2, #0]
	t = 0;
 800b82c:	602b      	str	r3, [r5, #0]
	HAL_TIM_Base_Start_IT(&htim8);
 800b82e:	f005 f9ab 	bl	8010b88 <HAL_TIM_Base_Start_IT>
	t = 1;
 800b832:	2301      	movs	r3, #1
 800b834:	602b      	str	r3, [r5, #0]
 800b836:	9b00      	ldr	r3, [sp, #0]
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
			{
                //1ノードずつ見る.そこから加算対象が最大6個
                //端を見ないので、一番上の列からスタート j=N; j >= 0, xを1からN-1まで
                //次に行 j=N-1から1まで xを0からN-1まで
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//255の場合は次へ
 800b838:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b83c:	f503 5b00 	add.w	fp, r3, #8192	; 0x2000
					}
                    //南西
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
					{
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
						change_flag = true;		//値が更新されたことを示す
 800b840:	2700      	movs	r7, #0
 800b842:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b844:	f8dd e000 	ldr.w	lr, [sp]
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800b848:	46bc      	mov	ip, r7
 800b84a:	f501 7880 	add.w	r8, r1, #256	; 0x100
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].draw == true) ? MAX_WEIGHT : 0;           //南
 800b84e:	4640      	mov	r0, r8
 800b850:	4673      	mov	r3, lr
 800b852:	2501      	movs	r5, #1
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//255の場合は次へ
 800b854:	895e      	ldrh	r6, [r3, #10]
 800b856:	4296      	cmp	r6, r2
 800b858:	d04a      	beq.n	800b8f0 <updateAllNodeWeight+0x2f4>
				if(j < NUMBER_OF_SQUARES_Y-1)   //範囲チェック. 座標のxyではなく、ノードのxy
 800b85a:	2d1f      	cmp	r5, #31
 800b85c:	d010      	beq.n	800b880 <updateAllNodeWeight+0x284>
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT) )	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b85e:	f893 9010 	ldrb.w	r9, [r3, #16]
 800b862:	ea19 0f04 	tst.w	r9, r4
 800b866:	d109      	bne.n	800b87c <updateAllNodeWeight+0x280>
 800b868:	f8b3 9012 	ldrh.w	r9, [r3, #18]
 800b86c:	4591      	cmp	r9, r2
 800b86e:	d105      	bne.n	800b87c <updateAllNodeWeight+0x280>
						maze->RawNode[i][j+1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800b870:	f106 0c07 	add.w	ip, r6, #7
 800b874:	f8a3 c012 	strh.w	ip, [r3, #18]
						change_flag = true;		//値が更新されたことを示す
 800b878:	f04f 0c01 	mov.w	ip, #1
				if(j > 1)						//範囲チェック.ミスってた
 800b87c:	2d01      	cmp	r5, #1
 800b87e:	d00c      	beq.n	800b89a <updateAllNodeWeight+0x29e>
					if( ((maze->RawNode[i][j-1].existence & mask) == NOWALL) && (maze->RawNode[i][j-1].weight == MAX_WEIGHT) )	//壁がなければ
 800b880:	f893 9000 	ldrb.w	r9, [r3]
 800b884:	ea19 0f04 	tst.w	r9, r4
 800b888:	d107      	bne.n	800b89a <updateAllNodeWeight+0x29e>
 800b88a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b88e:	4591      	cmp	r9, r2
 800b890:	d103      	bne.n	800b89a <updateAllNodeWeight+0x29e>
						maze->RawNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800b892:	3607      	adds	r6, #7
 800b894:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800b896:	f04f 0c01 	mov.w	ip, #1
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b89a:	2f1f      	cmp	r7, #31
 800b89c:	d012      	beq.n	800b8c4 <updateAllNodeWeight+0x2c8>
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))		//壁がなければ
 800b89e:	7a06      	ldrb	r6, [r0, #8]
 800b8a0:	4226      	tst	r6, r4
 800b8a2:	d107      	bne.n	800b8b4 <updateAllNodeWeight+0x2b8>
 800b8a4:	8946      	ldrh	r6, [r0, #10]
 800b8a6:	4296      	cmp	r6, r2
 800b8a8:	d104      	bne.n	800b8b4 <updateAllNodeWeight+0x2b8>
						maze->ColumnNode[i+1][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b8aa:	895e      	ldrh	r6, [r3, #10]
 800b8ac:	3605      	adds	r6, #5
 800b8ae:	8146      	strh	r6, [r0, #10]
						change_flag = true;		//値が更新されたことを示す
 800b8b0:	f04f 0c01 	mov.w	ip, #1
                    if( ((maze->ColumnNode[i+1][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j-1].weight == MAX_WEIGHT)	)		//壁がなければ
 800b8b4:	7806      	ldrb	r6, [r0, #0]
 800b8b6:	4226      	tst	r6, r4
 800b8b8:	d103      	bne.n	800b8c2 <updateAllNodeWeight+0x2c6>
 800b8ba:	8846      	ldrh	r6, [r0, #2]
 800b8bc:	4296      	cmp	r6, r2
 800b8be:	f000 808f 	beq.w	800b9e0 <updateAllNodeWeight+0x3e4>
				if(i > 0)						//範囲チェック
 800b8c2:	b1af      	cbz	r7, 800b8f0 <updateAllNodeWeight+0x2f4>
					if( ((maze->ColumnNode[i][j].existence & mask) == NOWALL)  && (maze->ColumnNode[i][j].weight == MAX_WEIGHT) )		//壁がなければ
 800b8c4:	7a0e      	ldrb	r6, [r1, #8]
 800b8c6:	4226      	tst	r6, r4
 800b8c8:	d107      	bne.n	800b8da <updateAllNodeWeight+0x2de>
 800b8ca:	894e      	ldrh	r6, [r1, #10]
 800b8cc:	4296      	cmp	r6, r2
 800b8ce:	d104      	bne.n	800b8da <updateAllNodeWeight+0x2de>
							maze->ColumnNode[i][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b8d0:	895e      	ldrh	r6, [r3, #10]
 800b8d2:	3605      	adds	r6, #5
 800b8d4:	814e      	strh	r6, [r1, #10]
							change_flag = true;		//値が更新されたことを示す
 800b8d6:	f04f 0c01 	mov.w	ip, #1
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
 800b8da:	780e      	ldrb	r6, [r1, #0]
 800b8dc:	4226      	tst	r6, r4
 800b8de:	d107      	bne.n	800b8f0 <updateAllNodeWeight+0x2f4>
 800b8e0:	884e      	ldrh	r6, [r1, #2]
 800b8e2:	4296      	cmp	r6, r2
 800b8e4:	d104      	bne.n	800b8f0 <updateAllNodeWeight+0x2f4>
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b8e6:	895e      	ldrh	r6, [r3, #10]
 800b8e8:	3605      	adds	r6, #5
 800b8ea:	804e      	strh	r6, [r1, #2]
						change_flag = true;		//値が更新されたことを示す
 800b8ec:	f04f 0c01 	mov.w	ip, #1
 800b8f0:	3501      	adds	r5, #1
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800b8f2:	2d20      	cmp	r5, #32
 800b8f4:	f103 0308 	add.w	r3, r3, #8
 800b8f8:	f101 0108 	add.w	r1, r1, #8
 800b8fc:	f100 0008 	add.w	r0, r0, #8
 800b900:	d1a8      	bne.n	800b854 <updateAllNodeWeight+0x258>
 800b902:	3701      	adds	r7, #1
		for( i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800b904:	2f20      	cmp	r7, #32
 800b906:	f50e 7e84 	add.w	lr, lr, #264	; 0x108
 800b90a:	4641      	mov	r1, r8
 800b90c:	d19d      	bne.n	800b84a <updateAllNodeWeight+0x24e>
 800b90e:	f8dd a000 	ldr.w	sl, [sp]
 800b912:	f44f 7900 	mov.w	r9, #512	; 0x200
 800b916:	f06f 08ff 	mvn.w	r8, #255	; 0xff
 800b91a:	2701      	movs	r7, #1
 800b91c:	ebab 0108 	sub.w	r1, fp, r8
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800b920:	4653      	mov	r3, sl
 800b922:	2000      	movs	r0, #0
        //列
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
		{
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
			{
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800b924:	f8b1 6102 	ldrh.w	r6, [r1, #258]	; 0x102
 800b928:	4296      	cmp	r6, r2
 800b92a:	d053      	beq.n	800b9d4 <updateAllNodeWeight+0x3d8>
					continue;
				}
                // printf("continueはクリア. Column[%d][%d]\r\n",i,j);
				
                //東側ノード
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b92c:	2f1f      	cmp	r7, #31
 800b92e:	d012      	beq.n	800b956 <updateAllNodeWeight+0x35a>
 800b930:	eb01 0508 	add.w	r5, r1, r8
 800b934:	444d      	add	r5, r9
				{
                    // printf("列東%d,mask: %d, result: %d\r\n",maze->ColumnNode[i+1][j].existence, mask,((maze->ColumnNode[i+1][j].existence) & mask));
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b936:	f895 e100 	ldrb.w	lr, [r5, #256]	; 0x100
 800b93a:	ea1e 0f04 	tst.w	lr, r4
 800b93e:	d108      	bne.n	800b952 <updateAllNodeWeight+0x356>
 800b940:	f8b5 e102 	ldrh.w	lr, [r5, #258]	; 0x102
 800b944:	4596      	cmp	lr, r2
 800b946:	d104      	bne.n	800b952 <updateAllNodeWeight+0x356>
					{
						maze->ColumnNode[i+1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800b948:	3607      	adds	r6, #7
 800b94a:	f8a5 6102 	strh.w	r6, [r5, #258]	; 0x102
						change_flag = true;		//値が更新されたことを示す
 800b94e:	f04f 0c01 	mov.w	ip, #1
					}
                }
                //西側ノード
				if(i > 1)						//範囲チェック
 800b952:	2f01      	cmp	r7, #1
 800b954:	d00b      	beq.n	800b96e <updateAllNodeWeight+0x372>
				{
					if( ((maze->ColumnNode[i-1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i-1][j].weight == MAX_WEIGHT))	//壁がなければ
 800b956:	780d      	ldrb	r5, [r1, #0]
 800b958:	4225      	tst	r5, r4
 800b95a:	d108      	bne.n	800b96e <updateAllNodeWeight+0x372>
 800b95c:	884d      	ldrh	r5, [r1, #2]
 800b95e:	4295      	cmp	r5, r2
 800b960:	d105      	bne.n	800b96e <updateAllNodeWeight+0x372>
					{
						maze->ColumnNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800b962:	f8b1 5102 	ldrh.w	r5, [r1, #258]	; 0x102
 800b966:	3507      	adds	r5, #7
 800b968:	804d      	strh	r5, [r1, #2]
						change_flag = true;		//値が更新されたことを示す
 800b96a:	f04f 0c01 	mov.w	ip, #1
					}
				}
                //北側に斜めが2方向
				if(j < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b96e:	281f      	cmp	r0, #31
 800b970:	d015      	beq.n	800b99e <updateAllNodeWeight+0x3a2>
				{
                    //北東
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800b972:	f893 5110 	ldrb.w	r5, [r3, #272]	; 0x110
 800b976:	4225      	tst	r5, r4
 800b978:	d10a      	bne.n	800b990 <updateAllNodeWeight+0x394>
 800b97a:	f8b3 5112 	ldrh.w	r5, [r3, #274]	; 0x112
 800b97e:	4295      	cmp	r5, r2
 800b980:	d106      	bne.n	800b990 <updateAllNodeWeight+0x394>
					{
						maze->RawNode[i][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b982:	f8b1 5102 	ldrh.w	r5, [r1, #258]	; 0x102
 800b986:	3505      	adds	r5, #5
 800b988:	f8a3 5112 	strh.w	r5, [r3, #274]	; 0x112
						change_flag = true;		//値が更新されたことを示す
 800b98c:	f04f 0c01 	mov.w	ip, #1
					}
                	
                    //北西
                    if( ((maze->RawNode[i-1][j+1].existence & mask) == NOWALL) && (maze->RawNode[i-1][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800b990:	7a1d      	ldrb	r5, [r3, #8]
 800b992:	4225      	tst	r5, r4
 800b994:	d102      	bne.n	800b99c <updateAllNodeWeight+0x3a0>
 800b996:	895d      	ldrh	r5, [r3, #10]
 800b998:	4295      	cmp	r5, r2
 800b99a:	d027      	beq.n	800b9ec <updateAllNodeWeight+0x3f0>
						change_flag = true;		//値が更新されたことを示す
					}
				}

                //南側に斜めが2方向
				if(j > 0)						//範囲チェック
 800b99c:	b1e0      	cbz	r0, 800b9d8 <updateAllNodeWeight+0x3dc>
				{
                    //南東
					if( ((maze->RawNode[i][j].existence & mask) == NOWALL) && (maze->RawNode[i][j].weight == MAX_WEIGHT)	)		//壁がなければ
 800b99e:	f893 5108 	ldrb.w	r5, [r3, #264]	; 0x108
 800b9a2:	4225      	tst	r5, r4
 800b9a4:	d10a      	bne.n	800b9bc <updateAllNodeWeight+0x3c0>
 800b9a6:	f8b3 510a 	ldrh.w	r5, [r3, #266]	; 0x10a
 800b9aa:	4295      	cmp	r5, r2
 800b9ac:	d106      	bne.n	800b9bc <updateAllNodeWeight+0x3c0>
					{
						maze->RawNode[i][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b9ae:	f8b1 5102 	ldrh.w	r5, [r1, #258]	; 0x102
 800b9b2:	3505      	adds	r5, #5
 800b9b4:	f8a3 510a 	strh.w	r5, [r3, #266]	; 0x10a
						change_flag = true;		//値が更新されたことを示す
 800b9b8:	f04f 0c01 	mov.w	ip, #1
					}
                    //南西
    				if( ((maze->RawNode[i-1][j].existence & mask) == NOWALL) && (maze->RawNode[i-1][j].weight == MAX_WEIGHT))		//壁がなければ
 800b9bc:	781d      	ldrb	r5, [r3, #0]
 800b9be:	4225      	tst	r5, r4
 800b9c0:	d108      	bne.n	800b9d4 <updateAllNodeWeight+0x3d8>
 800b9c2:	885d      	ldrh	r5, [r3, #2]
 800b9c4:	4295      	cmp	r5, r2
 800b9c6:	d105      	bne.n	800b9d4 <updateAllNodeWeight+0x3d8>
					{
							maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b9c8:	f8b1 5102 	ldrh.w	r5, [r1, #258]	; 0x102
 800b9cc:	3505      	adds	r5, #5
 800b9ce:	805d      	strh	r5, [r3, #2]
							change_flag = true;		//値が更新されたことを示す
 800b9d0:	f04f 0c01 	mov.w	ip, #1
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
 800b9d4:	281f      	cmp	r0, #31
 800b9d6:	d010      	beq.n	800b9fa <updateAllNodeWeight+0x3fe>
 800b9d8:	3001      	adds	r0, #1
 800b9da:	3108      	adds	r1, #8
 800b9dc:	3308      	adds	r3, #8
 800b9de:	e7a1      	b.n	800b924 <updateAllNodeWeight+0x328>
						maze->ColumnNode[i+1][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b9e0:	895e      	ldrh	r6, [r3, #10]
 800b9e2:	3605      	adds	r6, #5
 800b9e4:	8046      	strh	r6, [r0, #2]
						change_flag = true;		//値が更新されたことを示す
 800b9e6:	f04f 0c01 	mov.w	ip, #1
 800b9ea:	e76a      	b.n	800b8c2 <updateAllNodeWeight+0x2c6>
						maze->RawNode[i-1][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b9ec:	f8b1 5102 	ldrh.w	r5, [r1, #258]	; 0x102
 800b9f0:	3505      	adds	r5, #5
 800b9f2:	815d      	strh	r5, [r3, #10]
						change_flag = true;		//値が更新されたことを示す
 800b9f4:	f04f 0c01 	mov.w	ip, #1
 800b9f8:	e7d0      	b.n	800b99c <updateAllNodeWeight+0x3a0>
 800b9fa:	3701      	adds	r7, #1
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800b9fc:	2f20      	cmp	r7, #32
 800b9fe:	f50a 7a84 	add.w	sl, sl, #264	; 0x108
 800ba02:	f5a8 7880 	sub.w	r8, r8, #256	; 0x100
 800ba06:	f509 7980 	add.w	r9, r9, #256	; 0x100
 800ba0a:	d187      	bne.n	800b91c <updateAllNodeWeight+0x320>
				}
            }
        }
        //printf("重みの更新\r\n");//一回しか呼ばれていない
        //cnt++;
	}while(change_flag == true);	//全体を作り終わるまで待つ
 800ba0c:	f1bc 0f00 	cmp.w	ip, #0
 800ba10:	f47f af16 	bne.w	800b840 <updateAllNodeWeight+0x244>
    t = 0;
 800ba14:	4b07      	ldr	r3, [pc, #28]	; (800ba34 <updateAllNodeWeight+0x438>)
	HAL_TIM_Base_Stop_IT(&htim8);
 800ba16:	4809      	ldr	r0, [pc, #36]	; (800ba3c <updateAllNodeWeight+0x440>)
    t = 0;
 800ba18:	f8c3 c000 	str.w	ip, [r3]
	HAL_TIM_Base_Stop_IT(&htim8);
 800ba1c:	f005 f8c4 	bl	8010ba8 <HAL_TIM_Base_Stop_IT>
	printf("%d/20ms\r\n\r\n",timer8);
 800ba20:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <updateAllNodeWeight+0x43c>)
 800ba22:	4807      	ldr	r0, [pc, #28]	; (800ba40 <updateAllNodeWeight+0x444>)
 800ba24:	6819      	ldr	r1, [r3, #0]
}
 800ba26:	b00d      	add	sp, #52	; 0x34
 800ba28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	printf("%d/20ms\r\n\r\n",timer8);
 800ba2c:	f007 bf6e 	b.w	801390c <iprintf>
 800ba30:	080170f8 	.word	0x080170f8
 800ba34:	20004888 	.word	0x20004888
 800ba38:	20004890 	.word	0x20004890
 800ba3c:	20004b40 	.word	0x20004b40
 800ba40:	08017110 	.word	0x08017110

0800ba44 <getNextNode>:
}

//ノード情報から、行けるノードを比較する
// 比較しながらアドレスを更新してしまうので注意:
node *getNextNode(maze_node *maze, cardinal car, node *now_node, int mask)
{
 800ba44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t compare_weight=0;
    compare_weight = now_node->weight;

    _Bool flag=false;
    //printf("マイノードが01のどちらか:%d\r\n",now_node->rc);
    if(now_node->rc == 0)
 800ba48:	7957      	ldrb	r7, [r2, #5]
    compare_weight = now_node->weight;
 800ba4a:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800ba4e:	7991      	ldrb	r1, [r2, #6]
 800ba50:	79d4      	ldrb	r4, [r2, #7]
{
 800ba52:	b083      	sub	sp, #12
    if(now_node->rc == 0)
 800ba54:	2f00      	cmp	r7, #0
 800ba56:	f040 8081 	bne.w	800bb5c <getNextNode+0x118>
        //行にいるとき
        //北側ノード
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
        {
            //printf("%u\r\n",now_node->pos.y);
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ba5a:	014e      	lsls	r6, r1, #5
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ba5c:	2c1e      	cmp	r4, #30
 800ba5e:	f104 3eff 	add.w	lr, r4, #4294967295
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ba62:	9601      	str	r6, [sp, #4]
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ba64:	f200 80ee 	bhi.w	800bc44 <getNextNode+0x200>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ba68:	eb06 0801 	add.w	r8, r6, r1
 800ba6c:	f104 0901 	add.w	r9, r4, #1
 800ba70:	44c8      	add	r8, r9
 800ba72:	f810 a038 	ldrb.w	sl, [r0, r8, lsl #3]
 800ba76:	ea1a 0f03 	tst.w	sl, r3
 800ba7a:	d10c      	bne.n	800ba96 <getNextNode+0x52>
            {
                // printf("%d\r\n", maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence);//壁があることになってた..
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800ba7c:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
 800ba80:	f8b8 8002 	ldrh.w	r8, [r8, #2]
 800ba84:	45e0      	cmp	r8, ip
 800ba86:	d206      	bcs.n	800ba96 <getNextNode+0x52>
                {
#if DEBUG_ON
                    printf("北へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800ba88:	2521      	movs	r5, #33	; 0x21
 800ba8a:	fb15 9501 	smlabb	r5, r5, r1, r9
 800ba8e:	46c4      	mov	ip, r8
 800ba90:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800ba94:	2701      	movs	r7, #1
                }
            }
        }
        //南へ側ノード
        if(now_node->pos.y > 1)						//範囲チェック
 800ba96:	2c01      	cmp	r4, #1
 800ba98:	f200 80d4 	bhi.w	800bc44 <getNextNode+0x200>
                    flag = true;
                }
            }
        }
        //東へ側に斜めが2方向
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ba9c:	291e      	cmp	r1, #30
 800ba9e:	d836      	bhi.n	800bb0e <getNextNode+0xca>
        {
            //北東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800baa0:	f101 0801 	add.w	r8, r1, #1
 800baa4:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800baa8:	eb08 0604 	add.w	r6, r8, r4
 800baac:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bab0:	f506 5904 	add.w	r9, r6, #8448	; 0x2100
 800bab4:	f899 9000 	ldrb.w	r9, [r9]
 800bab8:	ea19 0f03 	tst.w	r9, r3
 800babc:	d10c      	bne.n	800bad8 <getNextNode+0x94>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800babe:	f242 1902 	movw	r9, #8450	; 0x2102
 800bac2:	f836 6009 	ldrh.w	r6, [r6, r9]
 800bac6:	4566      	cmp	r6, ip
 800bac8:	d206      	bcs.n	800bad8 <getNextNode+0x94>
                {
#if DEBUG_ON
                    printf("北東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800baca:	f504 6584 	add.w	r5, r4, #1056	; 0x420
 800bace:	4445      	add	r5, r8
 800bad0:	46b4      	mov	ip, r6
 800bad2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800bad6:	2701      	movs	r7, #1
 800bad8:	eb0e 0608 	add.w	r6, lr, r8
 800badc:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
                }
            }
            
            //南へ東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800bae0:	f506 5904 	add.w	r9, r6, #8448	; 0x2100
 800bae4:	f899 9000 	ldrb.w	r9, [r9]
 800bae8:	ea19 0f03 	tst.w	r9, r3
 800baec:	f040 80e5 	bne.w	800bcba <getNextNode+0x276>
            {  
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800baf0:	f242 1902 	movw	r9, #8450	; 0x2102
 800baf4:	f836 6009 	ldrh.w	r6, [r6, r9]
 800baf8:	4566      	cmp	r6, ip
 800bafa:	f080 80de 	bcs.w	800bcba <getNextNode+0x276>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
 800bafe:	f50e 6584 	add.w	r5, lr, #1056	; 0x420
 800bb02:	4445      	add	r5, r8
 800bb04:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                }
            }
        }

        //西へ側に斜めが2方向
        if(now_node->pos.x > 0)						//範囲チェック
 800bb08:	b321      	cbz	r1, 800bb54 <getNextNode+0x110>
 800bb0a:	46b4      	mov	ip, r6
                    flag = true;
 800bb0c:	2701      	movs	r7, #1
 800bb0e:	0149      	lsls	r1, r1, #5
 800bb10:	1866      	adds	r6, r4, r1
 800bb12:	eb01 080e 	add.w	r8, r1, lr
 800bb16:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bb1a:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
        {
            //北西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800bb1e:	f506 5904 	add.w	r9, r6, #8448	; 0x2100
 800bb22:	f508 5a04 	add.w	sl, r8, #8448	; 0x2100
 800bb26:	f899 9000 	ldrb.w	r9, [r9]
 800bb2a:	f89a a000 	ldrb.w	sl, [sl]
 800bb2e:	ea19 0f03 	tst.w	r9, r3
 800bb32:	ea0a 0a03 	and.w	sl, sl, r3
 800bb36:	f000 80c8 	beq.w	800bcca <getNextNode+0x286>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800bb3a:	f1ba 0f00 	cmp.w	sl, #0
 800bb3e:	d106      	bne.n	800bb4e <getNextNode+0x10a>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800bb40:	f242 1302 	movw	r3, #8450	; 0x2102
 800bb44:	f838 3003 	ldrh.w	r3, [r8, r3]
 800bb48:	4563      	cmp	r3, ip
 800bb4a:	f0c0 80d3 	bcc.w	800bcf4 <getNextNode+0x2b0>
 800bb4e:	2f00      	cmp	r7, #0
 800bb50:	bf08      	it	eq
 800bb52:	4615      	moveq	r5, r2

        return now_node;//万が一更新されなかったら、今いるノードが目標ノードなので、停止するはず。
    }
    return now_node; //
        
}
 800bb54:	4628      	mov	r0, r5
 800bb56:	b003      	add	sp, #12
 800bb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800bb5c:	291e      	cmp	r1, #30
 800bb5e:	f101 39ff 	add.w	r9, r1, #4294967295
 800bb62:	f240 8086 	bls.w	800bc72 <getNextNode+0x22e>
    _Bool flag=false;
 800bb66:	f04f 0e00 	mov.w	lr, #0
 800bb6a:	ea4f 1849 	mov.w	r8, r9, lsl #5
 800bb6e:	eb08 0604 	add.w	r6, r8, r4
 800bb72:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
            if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ
 800bb76:	f506 5a04 	add.w	sl, r6, #8448	; 0x2100
 800bb7a:	f89a a000 	ldrb.w	sl, [sl]
 800bb7e:	ea1a 0f03 	tst.w	sl, r3
 800bb82:	d10c      	bne.n	800bb9e <getNextNode+0x15a>
                if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800bb84:	f242 1a02 	movw	sl, #8450	; 0x2102
 800bb88:	f836 600a 	ldrh.w	r6, [r6, sl]
 800bb8c:	4566      	cmp	r6, ip
 800bb8e:	d206      	bcs.n	800bb9e <getNextNode+0x15a>
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800bb90:	f504 6584 	add.w	r5, r4, #1056	; 0x420
 800bb94:	4445      	add	r5, r8
 800bb96:	46b4      	mov	ip, r6
 800bb98:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800bb9c:	46be      	mov	lr, r7
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800bb9e:	014e      	lsls	r6, r1, #5
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800bba0:	2c1e      	cmp	r4, #30
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800bba2:	9601      	str	r6, [sp, #4]
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800bba4:	d829      	bhi.n	800bbfa <getNextNode+0x1b6>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800bba6:	eb06 0a01 	add.w	sl, r6, r1
 800bbaa:	f104 0b01 	add.w	fp, r4, #1
 800bbae:	44da      	add	sl, fp
 800bbb0:	f810 603a 	ldrb.w	r6, [r0, sl, lsl #3]
 800bbb4:	421e      	tst	r6, r3
 800bbb6:	d10c      	bne.n	800bbd2 <getNextNode+0x18e>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800bbb8:	eb00 0aca 	add.w	sl, r0, sl, lsl #3
 800bbbc:	f8ba a002 	ldrh.w	sl, [sl, #2]
 800bbc0:	45e2      	cmp	sl, ip
 800bbc2:	d206      	bcs.n	800bbd2 <getNextNode+0x18e>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800bbc4:	2521      	movs	r5, #33	; 0x21
 800bbc6:	fb15 b501 	smlabb	r5, r5, r1, fp
 800bbca:	46d4      	mov	ip, sl
 800bbcc:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800bbd0:	46be      	mov	lr, r7
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800bbd2:	eb08 0a09 	add.w	sl, r8, r9
 800bbd6:	44da      	add	sl, fp
 800bbd8:	f810 b03a 	ldrb.w	fp, [r0, sl, lsl #3]
 800bbdc:	ea1b 0f03 	tst.w	fp, r3
 800bbe0:	d16f      	bne.n	800bcc2 <getNextNode+0x27e>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800bbe2:	eb00 0aca 	add.w	sl, r0, sl, lsl #3
 800bbe6:	f8ba b002 	ldrh.w	fp, [sl, #2]
 800bbea:	45e3      	cmp	fp, ip
 800bbec:	d269      	bcs.n	800bcc2 <getNextNode+0x27e>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800bbee:	4655      	mov	r5, sl
        if(now_node->pos.y > 0)						//範囲チェック
 800bbf0:	2c00      	cmp	r4, #0
 800bbf2:	d0af      	beq.n	800bb54 <getNextNode+0x110>
                    flag = true;
 800bbf4:	46be      	mov	lr, r7
        if(now_node->pos.y > 0)						//範囲チェック
 800bbf6:	46dc      	mov	ip, fp
 800bbf8:	9e01      	ldr	r6, [sp, #4]
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800bbfa:	440e      	add	r6, r1
 800bbfc:	eb08 0709 	add.w	r7, r8, r9
 800bc00:	4426      	add	r6, r4
 800bc02:	4427      	add	r7, r4
 800bc04:	f810 b036 	ldrb.w	fp, [r0, r6, lsl #3]
 800bc08:	f810 a037 	ldrb.w	sl, [r0, r7, lsl #3]
 800bc0c:	ea1b 0f03 	tst.w	fp, r3
 800bc10:	ea0a 0a03 	and.w	sl, sl, r3
 800bc14:	d144      	bne.n	800bca0 <getNextNode+0x25c>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800bc16:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bc1a:	8873      	ldrh	r3, [r6, #2]
 800bc1c:	4563      	cmp	r3, ip
 800bc1e:	d23f      	bcs.n	800bca0 <getNextNode+0x25c>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y]);
 800bc20:	2521      	movs	r5, #33	; 0x21
 800bc22:	fb15 4101 	smlabb	r1, r5, r1, r4
 800bc26:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800bc2a:	f1ba 0f00 	cmp.w	sl, #0
 800bc2e:	d191      	bne.n	800bb54 <getNextNode+0x110>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800bc30:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 800bc34:	887a      	ldrh	r2, [r7, #2]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d28c      	bcs.n	800bb54 <getNextNode+0x110>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y]);
 800bc3a:	44c8      	add	r8, r9
 800bc3c:	4444      	add	r4, r8
 800bc3e:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 800bc42:	e787      	b.n	800bb54 <getNextNode+0x110>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)	//壁がなければ
 800bc44:	9e01      	ldr	r6, [sp, #4]
 800bc46:	440e      	add	r6, r1
 800bc48:	4476      	add	r6, lr
 800bc4a:	f810 8036 	ldrb.w	r8, [r0, r6, lsl #3]
 800bc4e:	ea18 0f03 	tst.w	r8, r3
 800bc52:	f47f af23 	bne.w	800ba9c <getNextNode+0x58>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800bc56:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bc5a:	8876      	ldrh	r6, [r6, #2]
 800bc5c:	4566      	cmp	r6, ip
 800bc5e:	f4bf af1d 	bcs.w	800ba9c <getNextNode+0x58>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
 800bc62:	2521      	movs	r5, #33	; 0x21
 800bc64:	fb15 e501 	smlabb	r5, r5, r1, lr
 800bc68:	46b4      	mov	ip, r6
 800bc6a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800bc6e:	2701      	movs	r7, #1
 800bc70:	e714      	b.n	800ba9c <getNextNode+0x58>
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800bc72:	f101 0801 	add.w	r8, r1, #1
 800bc76:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800bc7a:	eb04 0608 	add.w	r6, r4, r8
 800bc7e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bc82:	f506 5e04 	add.w	lr, r6, #8448	; 0x2100
 800bc86:	f89e e000 	ldrb.w	lr, [lr]
 800bc8a:	ea1e 0e03 	ands.w	lr, lr, r3
 800bc8e:	d037      	beq.n	800bd00 <getNextNode+0x2bc>
    _Bool flag=false;
 800bc90:	f04f 0e00 	mov.w	lr, #0
        if(now_node->pos.x > 1)						//範囲チェック
 800bc94:	2901      	cmp	r1, #1
 800bc96:	f63f af68 	bhi.w	800bb6a <getNextNode+0x126>
 800bc9a:	ea4f 1849 	mov.w	r8, r9, lsl #5
 800bc9e:	e77e      	b.n	800bb9e <getNextNode+0x15a>
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800bca0:	f1ba 0f00 	cmp.w	sl, #0
 800bca4:	d107      	bne.n	800bcb6 <getNextNode+0x272>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800bca6:	eb08 0309 	add.w	r3, r8, r9
 800bcaa:	4423      	add	r3, r4
 800bcac:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800bcb0:	885b      	ldrh	r3, [r3, #2]
 800bcb2:	4563      	cmp	r3, ip
 800bcb4:	d3c1      	bcc.n	800bc3a <getNextNode+0x1f6>
 800bcb6:	4677      	mov	r7, lr
 800bcb8:	e749      	b.n	800bb4e <getNextNode+0x10a>
        if(now_node->pos.x > 0)						//範囲チェック
 800bcba:	2900      	cmp	r1, #0
 800bcbc:	f43f af47 	beq.w	800bb4e <getNextNode+0x10a>
 800bcc0:	e725      	b.n	800bb0e <getNextNode+0xca>
        if(now_node->pos.y > 0)						//範囲チェック
 800bcc2:	2c00      	cmp	r4, #0
 800bcc4:	d198      	bne.n	800bbf8 <getNextNode+0x1b4>
 800bcc6:	4677      	mov	r7, lr
 800bcc8:	e741      	b.n	800bb4e <getNextNode+0x10a>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight)
 800bcca:	f242 1902 	movw	r9, #8450	; 0x2102
 800bcce:	f836 3009 	ldrh.w	r3, [r6, r9]
 800bcd2:	4563      	cmp	r3, ip
 800bcd4:	f4bf af31 	bcs.w	800bb3a <getNextNode+0xf6>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
 800bcd8:	f504 6584 	add.w	r5, r4, #1056	; 0x420
 800bcdc:	440d      	add	r5, r1
 800bcde:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800bce2:	f1ba 0f00 	cmp.w	sl, #0
 800bce6:	f47f af35 	bne.w	800bb54 <getNextNode+0x110>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800bcea:	f838 2009 	ldrh.w	r2, [r8, r9]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	f4bf af30 	bcs.w	800bb54 <getNextNode+0x110>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y-1]);
 800bcf4:	f50e 6584 	add.w	r5, lr, #1056	; 0x420
 800bcf8:	440d      	add	r5, r1
 800bcfa:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800bcfe:	e729      	b.n	800bb54 <getNextNode+0x110>
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800bd00:	f242 1a02 	movw	sl, #8450	; 0x2102
 800bd04:	f836 600a 	ldrh.w	r6, [r6, sl]
 800bd08:	4566      	cmp	r6, ip
 800bd0a:	d2c3      	bcs.n	800bc94 <getNextNode+0x250>
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800bd0c:	f504 6584 	add.w	r5, r4, #1056	; 0x420
 800bd10:	4445      	add	r5, r8
 800bd12:	46b4      	mov	ip, r6
 800bd14:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800bd18:	46be      	mov	lr, r7
 800bd1a:	e7bb      	b.n	800bc94 <getNextNode+0x250>

0800bd1c <getNextState>:
//自分の状態から次の状態を得る
state *getNextState(state *now_state, state *next_state, node *next_node)
{
 800bd1c:	b4f0      	push	{r4, r5, r6, r7}
 800bd1e:	4603      	mov	r3, r0
    //state *next_state;
    //差分を見て、次の状態を定義
    //状態の種類に応じて後で追加:探索時と最短時、既知区間走行でうまく変える
    //ノードと方角と座標を使って、次の方角と座標を得る
    
    uint8_t now_x = now_state->node->pos.x;
 800bd20:	6880      	ldr	r0, [r0, #8]
    uint8_t now_y = now_state->node->pos.y;
    uint8_t next_x = next_node->pos.x; 
    uint8_t next_y = next_node->pos.y;
    
    switch(now_state->car)
 800bd22:	789c      	ldrb	r4, [r3, #2]
    uint8_t now_x = now_state->node->pos.x;
 800bd24:	7985      	ldrb	r5, [r0, #6]
    uint8_t now_y = now_state->node->pos.y;
 800bd26:	79c6      	ldrb	r6, [r0, #7]
    uint8_t next_y = next_node->pos.y;
 800bd28:	79d7      	ldrb	r7, [r2, #7]
    uint8_t next_x = next_node->pos.x; 
 800bd2a:	7990      	ldrb	r0, [r2, #6]
    switch(now_state->car)
 800bd2c:	2c06      	cmp	r4, #6
 800bd2e:	d81e      	bhi.n	800bd6e <getNextState+0x52>
 800bd30:	e8df f004 	tbb	[pc, r4]
 800bd34:	1d4d1d04 	.word	0x1d4d1d04
 800bd38:	1d34      	.short	0x1d34
 800bd3a:	20          	.byte	0x20
 800bd3b:	00          	.byte	0x00
    {
        case north://行から、列に行くのか行に行くのかで、差分の取り方を変える
            if(next_node->rc == 0)
 800bd3c:	7952      	ldrb	r2, [r2, #5]
 800bd3e:	2a00      	cmp	r2, #0
 800bd40:	d058      	beq.n	800bdf4 <getNextState+0xd8>
            if(next_node->rc == 1)
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //北向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800bd42:	1c6a      	adds	r2, r5, #1
 800bd44:	4282      	cmp	r2, r0
 800bd46:	f000 80c3 	beq.w	800bed0 <getNextState+0x1b4>
                    return next_state;
                }

                //左旋回
                //北向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800bd4a:	4285      	cmp	r5, r0
 800bd4c:	d10f      	bne.n	800bd6e <getNextState+0x52>
 800bd4e:	42be      	cmp	r6, r7
 800bd50:	f000 8120 	beq.w	800bf94 <getNextState+0x278>
 800bd54:	3e01      	subs	r6, #1
                    return next_state;
                }

                //Uターンして右旋回
                //北向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800bd56:	42be      	cmp	r6, r7
 800bd58:	d109      	bne.n	800bd6e <getNextState+0x52>
                {
                    next_state->car = west;
 800bd5a:	2206      	movs	r2, #6
 800bd5c:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800bd5e:	781a      	ldrb	r2, [r3, #0]
 800bd60:	3a01      	subs	r2, #1
                //Uターンして右旋回
                //西向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
                {
                    next_state->car = south;
                    next_state->pos.x = now_state->pos.x + 1;
 800bd62:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800bd64:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800bd66:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y - 1;
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800bd6c:	70ca      	strb	r2, [r1, #3]
    }
#if DEBUG_ON
    printf("エラー in function 'getNextState'.\r\n");
#endif
    return next_state; //ここまで来てしまったらエラー
}
 800bd6e:	4608      	mov	r0, r1
 800bd70:	bcf0      	pop	{r4, r5, r6, r7}
 800bd72:	4770      	bx	lr
            if(next_node->rc == 1)
 800bd74:	7952      	ldrb	r2, [r2, #5]
 800bd76:	1e6c      	subs	r4, r5, #1
 800bd78:	2a00      	cmp	r2, #0
 800bd7a:	d05c      	beq.n	800be36 <getNextState+0x11a>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800bd7c:	4284      	cmp	r4, r0
 800bd7e:	f000 808f 	beq.w	800bea0 <getNextState+0x184>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800bd82:	3501      	adds	r5, #1
 800bd84:	42a8      	cmp	r0, r5
 800bd86:	d1f2      	bne.n	800bd6e <getNextState+0x52>
 800bd88:	42be      	cmp	r6, r7
 800bd8a:	d1f0      	bne.n	800bd6e <getNextState+0x52>
                    next_state->car = east;
 800bd8c:	2202      	movs	r2, #2
 800bd8e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 2;
 800bd90:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = back;
 800bd92:	2203      	movs	r2, #3
                    next_state->pos.x = now_state->pos.x + 2;
 800bd94:	3302      	adds	r3, #2
 800bd96:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800bd98:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bd9a:	e7e8      	b.n	800bd6e <getNextState+0x52>
            if(next_node->rc == 0)
 800bd9c:	7952      	ldrb	r2, [r2, #5]
 800bd9e:	2a00      	cmp	r2, #0
 800bda0:	d039      	beq.n	800be16 <getNextState+0xfa>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800bda2:	4285      	cmp	r5, r0
 800bda4:	f000 80a9 	beq.w	800befa <getNextState+0x1de>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800bda8:	3501      	adds	r5, #1
 800bdaa:	42a8      	cmp	r0, r5
 800bdac:	d1df      	bne.n	800bd6e <getNextState+0x52>
 800bdae:	1e72      	subs	r2, r6, #1
 800bdb0:	42ba      	cmp	r2, r7
 800bdb2:	f000 80e7 	beq.w	800bf84 <getNextState+0x268>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800bdb6:	42be      	cmp	r6, r7
 800bdb8:	d1d9      	bne.n	800bd6e <getNextState+0x52>
                    next_state->car = east;
 800bdba:	2002      	movs	r0, #2
 800bdbc:	7088      	strb	r0, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800bdbe:	781a      	ldrb	r2, [r3, #0]
 800bdc0:	3201      	adds	r2, #1
 800bdc2:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800bdc4:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800bdc6:	70c8      	strb	r0, [r1, #3]
                    next_state->pos.y = now_state->pos.y + 1;
 800bdc8:	3301      	adds	r3, #1
 800bdca:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800bdcc:	e7cf      	b.n	800bd6e <getNextState+0x52>
            if(next_node->rc == 1)
 800bdce:	7952      	ldrb	r2, [r2, #5]
 800bdd0:	2a00      	cmp	r2, #0
 800bdd2:	d044      	beq.n	800be5e <getNextState+0x142>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800bdd4:	1c6a      	adds	r2, r5, #1
 800bdd6:	4282      	cmp	r2, r0
 800bdd8:	d057      	beq.n	800be8a <getNextState+0x16e>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800bdda:	3d01      	subs	r5, #1
 800bddc:	42a8      	cmp	r0, r5
 800bdde:	d1c6      	bne.n	800bd6e <getNextState+0x52>
 800bde0:	42be      	cmp	r6, r7
 800bde2:	d1c4      	bne.n	800bd6e <getNextState+0x52>
                    next_state->car = west;
 800bde4:	2206      	movs	r2, #6
 800bde6:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800bde8:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = back;
 800bdea:	2203      	movs	r2, #3
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800bdec:	3b02      	subs	r3, #2
 800bdee:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800bdf0:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bdf2:	e7bc      	b.n	800bd6e <getNextState+0x52>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800bdf4:	4285      	cmp	r5, r0
 800bdf6:	d1ba      	bne.n	800bd6e <getNextState+0x52>
 800bdf8:	1c70      	adds	r0, r6, #1
 800bdfa:	42b8      	cmp	r0, r7
 800bdfc:	f000 809d 	beq.w	800bf3a <getNextState+0x21e>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800be00:	3e01      	subs	r6, #1
 800be02:	42b7      	cmp	r7, r6
 800be04:	d1b3      	bne.n	800bd6e <getNextState+0x52>
                    next_state->car = south;
 800be06:	2204      	movs	r2, #4
 800be08:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800be0a:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = back;
 800be0c:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800be0e:	3b02      	subs	r3, #2
 800be10:	704b      	strb	r3, [r1, #1]
                    next_state->dir = back;
 800be12:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800be14:	e7ab      	b.n	800bd6e <getNextState+0x52>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800be16:	4285      	cmp	r5, r0
 800be18:	d1a9      	bne.n	800bd6e <getNextState+0x52>
 800be1a:	1e70      	subs	r0, r6, #1
 800be1c:	42b8      	cmp	r0, r7
 800be1e:	f000 8085 	beq.w	800bf2c <getNextState+0x210>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800be22:	3601      	adds	r6, #1
 800be24:	42b7      	cmp	r7, r6
 800be26:	d1a2      	bne.n	800bd6e <getNextState+0x52>
                    next_state->car = north;
 800be28:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 2;
 800be2a:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = back;
 800be2c:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y + 2;
 800be2e:	3302      	adds	r3, #2
 800be30:	704b      	strb	r3, [r1, #1]
                    next_state->dir = back;
 800be32:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800be34:	e79b      	b.n	800bd6e <getNextState+0x52>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800be36:	4284      	cmp	r4, r0
 800be38:	d06a      	beq.n	800bf10 <getNextState+0x1f4>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800be3a:	4285      	cmp	r5, r0
 800be3c:	d197      	bne.n	800bd6e <getNextState+0x52>
 800be3e:	42be      	cmp	r6, r7
 800be40:	f000 80ba 	beq.w	800bfb8 <getNextState+0x29c>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800be44:	3601      	adds	r6, #1
 800be46:	42be      	cmp	r6, r7
 800be48:	d191      	bne.n	800bd6e <getNextState+0x52>
                    next_state->car = north;
 800be4a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800be4c:	781a      	ldrb	r2, [r3, #0]
 800be4e:	3201      	adds	r2, #1
 800be50:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800be52:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800be54:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y + 1;
 800be56:	3301      	adds	r3, #1
 800be58:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800be5a:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800be5c:	e787      	b.n	800bd6e <getNextState+0x52>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800be5e:	4285      	cmp	r5, r0
 800be60:	d029      	beq.n	800beb6 <getNextState+0x19a>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800be62:	3d01      	subs	r5, #1
 800be64:	4285      	cmp	r5, r0
 800be66:	d182      	bne.n	800bd6e <getNextState+0x52>
 800be68:	1c70      	adds	r0, r6, #1
 800be6a:	42b8      	cmp	r0, r7
 800be6c:	f000 809a 	beq.w	800bfa4 <getNextState+0x288>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800be70:	42be      	cmp	r6, r7
 800be72:	f47f af7c 	bne.w	800bd6e <getNextState+0x52>
                    next_state->car = south;
 800be76:	2004      	movs	r0, #4
 800be78:	7088      	strb	r0, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800be7a:	781a      	ldrb	r2, [r3, #0]
 800be7c:	3a01      	subs	r2, #1
 800be7e:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800be80:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800be82:	70c8      	strb	r0, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 1;
 800be84:	3b01      	subs	r3, #1
 800be86:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800be88:	e771      	b.n	800bd6e <getNextState+0x52>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800be8a:	42be      	cmp	r6, r7
 800be8c:	f47f af6f 	bne.w	800bd6e <getNextState+0x52>
                    next_state->car = east;
 800be90:	2202      	movs	r2, #2
 800be92:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800be94:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = front;
 800be96:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x + 1;
 800be98:	3301      	adds	r3, #1
 800be9a:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800be9c:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800be9e:	e766      	b.n	800bd6e <getNextState+0x52>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800bea0:	42be      	cmp	r6, r7
 800bea2:	f47f af64 	bne.w	800bd6e <getNextState+0x52>
                    next_state->car = west;
 800bea6:	2206      	movs	r2, #6
 800bea8:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800beaa:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = front;
 800beac:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800beae:	3b01      	subs	r3, #1
 800beb0:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800beb2:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800beb4:	e75b      	b.n	800bd6e <getNextState+0x52>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800beb6:	42be      	cmp	r6, r7
 800beb8:	d054      	beq.n	800bf64 <getNextState+0x248>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800beba:	3601      	adds	r6, #1
 800bebc:	42be      	cmp	r6, r7
 800bebe:	f47f af56 	bne.w	800bd6e <getNextState+0x52>
                    next_state->car = north;
 800bec2:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800bec4:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = left;
 800bec6:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y + 1;
 800bec8:	3301      	adds	r3, #1
 800beca:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800becc:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bece:	e74e      	b.n	800bd6e <getNextState+0x52>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800bed0:	42be      	cmp	r6, r7
 800bed2:	d038      	beq.n	800bf46 <getNextState+0x22a>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800bed4:	4285      	cmp	r5, r0
 800bed6:	f106 36ff 	add.w	r6, r6, #4294967295
 800beda:	f43f af3c 	beq.w	800bd56 <getNextState+0x3a>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800bede:	42be      	cmp	r6, r7
 800bee0:	f47f af45 	bne.w	800bd6e <getNextState+0x52>
                    next_state->car = east;
 800bee4:	2202      	movs	r2, #2
 800bee6:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800bee8:	781a      	ldrb	r2, [r3, #0]
 800beea:	3201      	adds	r2, #1
 800beec:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800beee:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800bef0:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y - 1;
 800bef2:	3b01      	subs	r3, #1
 800bef4:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800bef6:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bef8:	e739      	b.n	800bd6e <getNextState+0x52>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800befa:	1e72      	subs	r2, r6, #1
 800befc:	42ba      	cmp	r2, r7
 800befe:	d039      	beq.n	800bf74 <getNextState+0x258>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800bf00:	42be      	cmp	r6, r7
 800bf02:	f47f af34 	bne.w	800bd6e <getNextState+0x52>
                    next_state->car = west;
 800bf06:	2206      	movs	r2, #6
 800bf08:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800bf0a:	781a      	ldrb	r2, [r3, #0]
 800bf0c:	3a01      	subs	r2, #1
 800bf0e:	e79f      	b.n	800be50 <getNextState+0x134>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800bf10:	1c70      	adds	r0, r6, #1
 800bf12:	42b8      	cmp	r0, r7
 800bf14:	d01f      	beq.n	800bf56 <getNextState+0x23a>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800bf16:	42be      	cmp	r6, r7
 800bf18:	f47f af29 	bne.w	800bd6e <getNextState+0x52>
                    next_state->car = south;
 800bf1c:	2204      	movs	r2, #4
 800bf1e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800bf20:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = left;
 800bf22:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y - 1;
 800bf24:	3b01      	subs	r3, #1
 800bf26:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800bf28:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bf2a:	e720      	b.n	800bd6e <getNextState+0x52>
                    next_state->car = south;
 800bf2c:	2004      	movs	r0, #4
 800bf2e:	7088      	strb	r0, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800bf30:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = front;
 800bf32:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800bf34:	3b01      	subs	r3, #1
 800bf36:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800bf38:	e719      	b.n	800bd6e <getNextState+0x52>
                    next_state->car = north;
 800bf3a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800bf3c:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = front;
 800bf3e:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.y = now_state->pos.y + 1;
 800bf40:	3301      	adds	r3, #1
 800bf42:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800bf44:	e713      	b.n	800bd6e <getNextState+0x52>
                    next_state->car = east;
 800bf46:	2202      	movs	r2, #2
 800bf48:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800bf4a:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = right;
 800bf4c:	2201      	movs	r2, #1
                    next_state->pos.x = now_state->pos.x + 1;
 800bf4e:	4413      	add	r3, r2
 800bf50:	700b      	strb	r3, [r1, #0]
                    next_state->dir = right;
 800bf52:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bf54:	e70b      	b.n	800bd6e <getNextState+0x52>
                    next_state->car = north;
 800bf56:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800bf58:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = right;
 800bf5a:	2201      	movs	r2, #1
                    next_state->pos.y = now_state->pos.y + 1;
 800bf5c:	4413      	add	r3, r2
 800bf5e:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800bf60:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bf62:	e704      	b.n	800bd6e <getNextState+0x52>
                    next_state->car = south;
 800bf64:	2204      	movs	r2, #4
 800bf66:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800bf68:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = right;
 800bf6a:	2201      	movs	r2, #1
                    next_state->pos.y = now_state->pos.y - 1;
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800bf70:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bf72:	e6fc      	b.n	800bd6e <getNextState+0x52>
                    next_state->car = west;
 800bf74:	2206      	movs	r2, #6
 800bf76:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800bf78:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = right;
 800bf7a:	2201      	movs	r2, #1
                    next_state->pos.x = now_state->pos.x - 1;
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	700b      	strb	r3, [r1, #0]
                    next_state->dir = right;
 800bf80:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bf82:	e6f4      	b.n	800bd6e <getNextState+0x52>
                    next_state->car = east;
 800bf84:	2202      	movs	r2, #2
 800bf86:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800bf88:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = left;
 800bf8a:	2205      	movs	r2, #5
                    next_state->pos.x = now_state->pos.x + 1;
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	700b      	strb	r3, [r1, #0]
                    next_state->dir = left;
 800bf90:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bf92:	e6ec      	b.n	800bd6e <getNextState+0x52>
                    next_state->car = west;
 800bf94:	2206      	movs	r2, #6
 800bf96:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800bf98:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = left;
 800bf9a:	2205      	movs	r2, #5
                    next_state->pos.x = now_state->pos.x - 1;
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	700b      	strb	r3, [r1, #0]
                    next_state->dir = left;
 800bfa0:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bfa2:	e6e4      	b.n	800bd6e <getNextState+0x52>
                    next_state->car = north;
 800bfa4:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800bfa6:	781a      	ldrb	r2, [r3, #0]
 800bfa8:	3a01      	subs	r2, #1
 800bfaa:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800bfac:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800bfae:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y + 1;
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800bfb4:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800bfb6:	e6da      	b.n	800bd6e <getNextState+0x52>
                    next_state->car = south;
 800bfb8:	2204      	movs	r2, #4
 800bfba:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800bfbc:	781a      	ldrb	r2, [r3, #0]
 800bfbe:	3201      	adds	r2, #1
 800bfc0:	e6cf      	b.n	800bd62 <getNextState+0x46>
 800bfc2:	bf00      	nop

0800bfc4 <initProfile>:
        // log_st[n].wall.west = WALL;
    }
    printf("い\r\n");
}
void initProfile(profile *prof, maze_node *maze)
{
 800bfc4:	b430      	push	{r4, r5}
    };
    setWallExistence(&(prof->now.wall), &w_st[0]);
    setWallExistence(&(prof->next.wall), &next[0]);

    prof->now.node = &(maze->RawNode[0][0]);
    prof->next.node = &(maze->RawNode[0][1]);
 800bfc6:	f101 0308 	add.w	r3, r1, #8
    pos->x = x;
 800bfca:	4d09      	ldr	r5, [pc, #36]	; (800bff0 <initProfile+0x2c>)
    prof->now.node = &(maze->RawNode[0][0]);
 800bfcc:	6101      	str	r1, [r0, #16]
    pos->y = y;
 800bfce:	2401      	movs	r4, #1
    existence->north = state[0];
 800bfd0:	2154      	movs	r1, #84	; 0x54
 800bfd2:	224a      	movs	r2, #74	; 0x4a
    prof->next.node = &(maze->RawNode[0][1]);
 800bfd4:	61c3      	str	r3, [r0, #28]
    pos->x = x;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	6005      	str	r5, [r0, #0]
    pos->y = y;
 800bfda:	7544      	strb	r4, [r0, #21]
    existence->north = state[0];
 800bfdc:	7301      	strb	r1, [r0, #12]
 800bfde:	7602      	strb	r2, [r0, #24]
    pos->x = x;
 800bfe0:	7203      	strb	r3, [r0, #8]
    pos->y = y;
 800bfe2:	7243      	strb	r3, [r0, #9]
    st->car = car;
 800bfe4:	7283      	strb	r3, [r0, #10]
    pos->x = x;
 800bfe6:	7503      	strb	r3, [r0, #20]
    st->car = car;
 800bfe8:	7583      	strb	r3, [r0, #22]
    // prof->now.node->rc = 0;
    // prof->now.node->pos.x = 0;
    // prof->now.node->pos.y = 0;
}
 800bfea:	bc30      	pop	{r4, r5}
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	12121010 	.word	0x12121010

0800bff4 <shiftState>:
void shiftState(profile *prof)
{
 800bff4:	b410      	push	{r4}
    prof->now.car = prof->next.car;
    prof->now.pos.x = prof->next.pos.x;
 800bff6:	7d01      	ldrb	r1, [r0, #20]
    prof->now.car = prof->next.car;
 800bff8:	7d84      	ldrb	r4, [r0, #22]
    prof->now.pos.y = prof->next.pos.y;
 800bffa:	7d42      	ldrb	r2, [r0, #21]
    prof->now.node = prof->next.node;//ポインタ渡し
 800bffc:	69c3      	ldr	r3, [r0, #28]
    prof->now.car = prof->next.car;
 800bffe:	7284      	strb	r4, [r0, #10]
    prof->now.pos.x = prof->next.pos.x;
 800c000:	7201      	strb	r1, [r0, #8]
    prof->now.pos.y = prof->next.pos.y;
 800c002:	7242      	strb	r2, [r0, #9]
    prof->now.node = prof->next.node;//ポインタ渡し
 800c004:	6103      	str	r3, [r0, #16]
}
 800c006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <InitExplore>:

	//ハード処理

}
void InitExplore()
{
 800c00c:	b538      	push	{r3, r4, r5, lr}
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800c00e:	2100      	movs	r1, #0
 800c010:	2004      	movs	r0, #4
 800c012:	f002 fd09 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800c016:	2100      	movs	r1, #0
 800c018:	2005      	movs	r0, #5
 800c01a:	f002 fd05 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c01e:	2100      	movs	r1, #0
 800c020:	2002      	movs	r0, #2
 800c022:	f002 fd01 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c026:	2100      	movs	r1, #0
 800c028:	2003      	movs	r0, #3
 800c02a:	f002 fcfd 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800c02e:	2100      	movs	r1, #0
 800c030:	2001      	movs	r0, #1
 800c032:	f002 fcf9 	bl	800ea28 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800c036:	2100      	movs	r1, #0
 800c038:	4608      	mov	r0, r1
 800c03a:	f002 fcf5 	bl	800ea28 <PIDChangeFlag>


	Load_Gain();
 800c03e:	f002 fa8f 	bl	800e560 <Load_Gain>
	uint8_t imu_check;
	imu_check = IMU_init();
 800c042:	f001 fff7 	bl	800e034 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c046:	4c34      	ldr	r4, [pc, #208]	; (800c118 <InitExplore+0x10c>)
	}

#endif

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
 800c048:	4d34      	ldr	r5, [pc, #208]	; (800c11c <InitExplore+0x110>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c04a:	4601      	mov	r1, r0
 800c04c:	4620      	mov	r0, r4
 800c04e:	f007 fc5d 	bl	801390c <iprintf>
	imu_check =IMU_init();
 800c052:	f001 ffef 	bl	800e034 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c056:	4601      	mov	r1, r0
 800c058:	4620      	mov	r0, r4
 800c05a:	f007 fc57 	bl	801390c <iprintf>
	HAL_Delay(100);
 800c05e:	2064      	movs	r0, #100	; 0x64
 800c060:	f002 fea6 	bl	800edb0 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800c064:	2138      	movs	r1, #56	; 0x38
 800c066:	2037      	movs	r0, #55	; 0x37
 800c068:	f001 ff98 	bl	800df9c <ReadIMU>
 800c06c:	4b2c      	ldr	r3, [pc, #176]	; (800c120 <InitExplore+0x114>)
	TargetVelocity[BODY] = 0;
 800c06e:	4c2d      	ldr	r4, [pc, #180]	; (800c124 <InitExplore+0x118>)
	ZGyro = ReadIMU(0x37, 0x38);
 800c070:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800c074:	ee10 0a10 	vmov	r0, s0
 800c078:	f7fc f99e 	bl	80083b8 <__aeabi_f2d>
 800c07c:	4602      	mov	r2, r0
 800c07e:	460b      	mov	r3, r1
 800c080:	4829      	ldr	r0, [pc, #164]	; (800c128 <InitExplore+0x11c>)
 800c082:	f007 fc43 	bl	801390c <iprintf>
	Motor_PWM_Start();
 800c086:	f002 f95b 	bl	800e340 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800c08a:	f002 f8d3 	bl	800e234 <EncoderStart>
	EmitterON();
 800c08e:	f002 f8e1 	bl	800e254 <EmitterON>
	ADCStart();
 800c092:	f001 fea5 	bl	800dde0 <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800c096:	f247 512f 	movw	r1, #29999	; 0x752f
 800c09a:	4824      	ldr	r0, [pc, #144]	; (800c12c <InitExplore+0x120>)
 800c09c:	f002 f9de 	bl	800e45c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800c0a0:	f247 512f 	movw	r1, #29999	; 0x752f
 800c0a4:	4822      	ldr	r0, [pc, #136]	; (800c130 <InitExplore+0x124>)
 800c0a6:	f002 f9d9 	bl	800e45c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800c0aa:	4822      	ldr	r0, [pc, #136]	; (800c134 <InitExplore+0x128>)
 800c0ac:	f004 fd6c 	bl	8010b88 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800c0b0:	4821      	ldr	r0, [pc, #132]	; (800c138 <InitExplore+0x12c>)
 800c0b2:	f004 fd69 	bl	8010b88 <HAL_TIM_Base_Start_IT>
	Acceleration = 0;
	AngularAcceleration = 0;
 800c0b6:	4921      	ldr	r1, [pc, #132]	; (800c13c <InitExplore+0x130>)
	TotalPulse[LEFT] = 0;
 800c0b8:	4a21      	ldr	r2, [pc, #132]	; (800c140 <InitExplore+0x134>)
	Acceleration = 0;
 800c0ba:	4822      	ldr	r0, [pc, #136]	; (800c144 <InitExplore+0x138>)
	TargetVelocity[BODY] = 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	60a3      	str	r3, [r4, #8]
	TotalPulse[LEFT] = 0;
 800c0c0:	2400      	movs	r4, #0
	AngularAcceleration = 0;
 800c0c2:	600b      	str	r3, [r1, #0]
	TargetAngularV = 0;
 800c0c4:	602b      	str	r3, [r5, #0]
	Acceleration = 0;
 800c0c6:	6003      	str	r3, [r0, #0]
	TotalPulse[RIGHT] = 0;
 800c0c8:	e9c2 4400 	strd	r4, r4, [r2]
	TotalPulse[BODY] = 0;
 800c0cc:	6094      	str	r4, [r2, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800c0ce:	f002 f88b 	bl	800e1e8 <IMU_Calib>
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
#else


	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800c0d2:	4b1d      	ldr	r3, [pc, #116]	; (800c148 <InitExplore+0x13c>)
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800c0d4:	4a1d      	ldr	r2, [pc, #116]	; (800c14c <InitExplore+0x140>)
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800c0d6:	ed93 7a02 	vldr	s14, [r3, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800c0da:	edd3 7a01 	vldr	s15, [r3, #4]
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800c0de:	4b1c      	ldr	r3, [pc, #112]	; (800c150 <InitExplore+0x144>)
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800c0e0:	ee77 6a67 	vsub.f32	s13, s14, s15

#endif
	PIDReset(L_VELO_PID);
 800c0e4:	2004      	movs	r0, #4
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800c0e6:	ed83 7a02 	vstr	s14, [r3, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800c0ea:	edc3 7a01 	vstr	s15, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800c0ee:	edc2 6a00 	vstr	s13, [r2]
	PIDReset(L_VELO_PID);
 800c0f2:	f002 fca1 	bl	800ea38 <PIDReset>
	PIDReset(R_VELO_PID);
 800c0f6:	2005      	movs	r0, #5
 800c0f8:	f002 fc9e 	bl	800ea38 <PIDReset>

	PIDReset(A_VELO_PID);
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f002 fc9b 	bl	800ea38 <PIDReset>
	PIDReset(L_WALL_PID);
 800c102:	2002      	movs	r0, #2
 800c104:	f002 fc98 	bl	800ea38 <PIDReset>
	PIDReset(R_WALL_PID);
 800c108:	2003      	movs	r0, #3
 800c10a:	f002 fc95 	bl	800ea38 <PIDReset>
	PIDReset(D_WALL_PID);
 800c10e:	2001      	movs	r0, #1

#endif
}
 800c110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800c114:	f002 bc90 	b.w	800ea38 <PIDReset>
 800c118:	08017190 	.word	0x08017190
 800c11c:	200048a8 	.word	0x200048a8
 800c120:	200002d0 	.word	0x200002d0
 800c124:	20004898 	.word	0x20004898
 800c128:	080171ac 	.word	0x080171ac
 800c12c:	40000424 	.word	0x40000424
 800c130:	40000824 	.word	0x40000824
 800c134:	20004d88 	.word	0x20004d88
 800c138:	20004b40 	.word	0x20004b40
 800c13c:	2000022c 	.word	0x2000022c
 800c140:	200048cc 	.word	0x200048cc
 800c144:	20000224 	.word	0x20000224
 800c148:	2000490c 	.word	0x2000490c
 800c14c:	200048bc 	.word	0x200048bc
 800c150:	200049cc 	.word	0x200049cc

0800c154 <InitFastest>:

void InitFastest()
{
 800c154:	b538      	push	{r3, r4, r5, lr}
	Motor_PWM_Start();
 800c156:	f002 f8f3 	bl	800e340 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800c15a:	f002 f86b 	bl	800e234 <EncoderStart>
	EmitterON();
 800c15e:	f002 f879 	bl	800e254 <EmitterON>
	ADCStart();
 800c162:	f001 fe3d 	bl	800dde0 <ADCStart>

	uint8_t imu_check;
	imu_check =IMU_init();
 800c166:	f001 ff65 	bl	800e034 <IMU_init>

	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c16a:	4601      	mov	r1, r0
 800c16c:	482f      	ldr	r0, [pc, #188]	; (800c22c <InitFastest+0xd8>)


	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
 800c16e:	4c30      	ldr	r4, [pc, #192]	; (800c230 <InitFastest+0xdc>)
	TargetAngularV = 0;
 800c170:	4d30      	ldr	r5, [pc, #192]	; (800c234 <InitFastest+0xe0>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c172:	f007 fbcb 	bl	801390c <iprintf>
	PIDChangeFlag(L_VELO_PID, 0);
 800c176:	2100      	movs	r1, #0
 800c178:	2004      	movs	r0, #4
 800c17a:	f002 fc55 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800c17e:	2100      	movs	r1, #0
 800c180:	2005      	movs	r0, #5
 800c182:	f002 fc51 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c186:	2100      	movs	r1, #0
 800c188:	2002      	movs	r0, #2
 800c18a:	f002 fc4d 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c18e:	2100      	movs	r1, #0
 800c190:	2003      	movs	r0, #3
 800c192:	f002 fc49 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800c196:	2100      	movs	r1, #0
 800c198:	2001      	movs	r0, #1
 800c19a:	f002 fc45 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800c19e:	2100      	movs	r1, #0
 800c1a0:	4608      	mov	r0, r1
 800c1a2:	f002 fc41 	bl	800ea28 <PIDChangeFlag>
	Load_Gain();
 800c1a6:	f002 f9db 	bl	800e560 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800c1aa:	f247 512f 	movw	r1, #29999	; 0x752f
 800c1ae:	4822      	ldr	r0, [pc, #136]	; (800c238 <InitFastest+0xe4>)
 800c1b0:	f002 f954 	bl	800e45c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800c1b4:	f247 512f 	movw	r1, #29999	; 0x752f
 800c1b8:	4820      	ldr	r0, [pc, #128]	; (800c23c <InitFastest+0xe8>)
 800c1ba:	f002 f94f 	bl	800e45c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800c1be:	4820      	ldr	r0, [pc, #128]	; (800c240 <InitFastest+0xec>)
 800c1c0:	f004 fce2 	bl	8010b88 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800c1c4:	481f      	ldr	r0, [pc, #124]	; (800c244 <InitFastest+0xf0>)
 800c1c6:	f004 fcdf 	bl	8010b88 <HAL_TIM_Base_Start_IT>
	Acceleration = 0;
	AngularAcceleration = 0;
 800c1ca:	491f      	ldr	r1, [pc, #124]	; (800c248 <InitFastest+0xf4>)
	TotalPulse[LEFT] = 0;
 800c1cc:	4a1f      	ldr	r2, [pc, #124]	; (800c24c <InitFastest+0xf8>)
	Acceleration = 0;
 800c1ce:	4820      	ldr	r0, [pc, #128]	; (800c250 <InitFastest+0xfc>)
	TargetVelocity[BODY] = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	60a3      	str	r3, [r4, #8]
	TotalPulse[LEFT] = 0;
 800c1d4:	2400      	movs	r4, #0
	AngularAcceleration = 0;
 800c1d6:	600b      	str	r3, [r1, #0]
	TargetAngularV = 0;
 800c1d8:	602b      	str	r3, [r5, #0]
	Acceleration = 0;
 800c1da:	6003      	str	r3, [r0, #0]
	TotalPulse[RIGHT] = 0;
 800c1dc:	e9c2 4400 	strd	r4, r4, [r2]
	TotalPulse[BODY] = 0;
 800c1e0:	6094      	str	r4, [r2, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800c1e2:	f002 f801 	bl	800e1e8 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800c1e6:	4b1b      	ldr	r3, [pc, #108]	; (800c254 <InitFastest+0x100>)
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800c1e8:	4a1b      	ldr	r2, [pc, #108]	; (800c258 <InitFastest+0x104>)
	TargetPhoto[SL] = Photo[SL];
 800c1ea:	ed93 7a02 	vldr	s14, [r3, #8]
	TargetPhoto[SR] = Photo[SR];
 800c1ee:	edd3 7a01 	vldr	s15, [r3, #4]
	TargetPhoto[SL] = Photo[SL];
 800c1f2:	4b1a      	ldr	r3, [pc, #104]	; (800c25c <InitFastest+0x108>)
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800c1f4:	ee77 6a67 	vsub.f32	s13, s14, s15

	PIDReset(L_VELO_PID);
 800c1f8:	2004      	movs	r0, #4
	TargetPhoto[SL] = Photo[SL];
 800c1fa:	ed83 7a02 	vstr	s14, [r3, #8]
	TargetPhoto[SR] = Photo[SR];
 800c1fe:	edc3 7a01 	vstr	s15, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800c202:	edc2 6a00 	vstr	s13, [r2]
	PIDReset(L_VELO_PID);
 800c206:	f002 fc17 	bl	800ea38 <PIDReset>
	PIDReset(R_VELO_PID);
 800c20a:	2005      	movs	r0, #5
 800c20c:	f002 fc14 	bl	800ea38 <PIDReset>
	PIDReset(A_VELO_PID);
 800c210:	4620      	mov	r0, r4
 800c212:	f002 fc11 	bl	800ea38 <PIDReset>
	PIDReset(L_WALL_PID);
 800c216:	2002      	movs	r0, #2
 800c218:	f002 fc0e 	bl	800ea38 <PIDReset>
	PIDReset(R_WALL_PID);
 800c21c:	2003      	movs	r0, #3
 800c21e:	f002 fc0b 	bl	800ea38 <PIDReset>
	PIDReset(D_WALL_PID);
 800c222:	2001      	movs	r0, #1


}
 800c224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800c228:	f002 bc06 	b.w	800ea38 <PIDReset>
 800c22c:	08017190 	.word	0x08017190
 800c230:	20004898 	.word	0x20004898
 800c234:	200048a8 	.word	0x200048a8
 800c238:	40000424 	.word	0x40000424
 800c23c:	40000824 	.word	0x40000824
 800c240:	20004d88 	.word	0x20004d88
 800c244:	20004b40 	.word	0x20004b40
 800c248:	2000022c 	.word	0x2000022c
 800c24c:	200048cc 	.word	0x200048cc
 800c250:	20000224 	.word	0x20000224
 800c254:	2000490c 	.word	0x2000490c
 800c258:	200048bc 	.word	0x200048bc
 800c25c:	200049cc 	.word	0x200049cc

0800c260 <Debug>:
void Debug()
{
 800c260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if 1
	InitExplore();
	InitPosition();
	wall_init();

	TotalPulse[RIGHT] = 0;
 800c262:	4d28      	ldr	r5, [pc, #160]	; (800c304 <Debug+0xa4>)
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	PIDChangeFlag(A_VELO_PID, 1);
	ExploreVelocity=0;
 800c264:	4e28      	ldr	r6, [pc, #160]	; (800c308 <Debug+0xa8>)
	TotalPulse[RIGHT] = 0;
 800c266:	2400      	movs	r4, #0
	InitExplore();
 800c268:	f7ff fed0 	bl	800c00c <InitExplore>
	InitPosition();
 800c26c:	f7fc ff10 	bl	8009090 <InitPosition>
	wall_init();
 800c270:	f7fe fc36 	bl	800aae0 <wall_init>
	PIDChangeFlag(L_VELO_PID, 1);
 800c274:	2101      	movs	r1, #1
 800c276:	2004      	movs	r0, #4
	TotalPulse[LEFT] = 0;
 800c278:	e9c5 4400 	strd	r4, r4, [r5]
	TotalPulse[BODY] = 0;
 800c27c:	60ac      	str	r4, [r5, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c27e:	f002 fbd3 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c282:	2101      	movs	r1, #1
 800c284:	2005      	movs	r0, #5
 800c286:	f002 fbcf 	bl	800ea28 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c28a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c28e:	68a9      	ldr	r1, [r5, #8]
 800c290:	481e      	ldr	r0, [pc, #120]	; (800c30c <Debug+0xac>)
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
	Pos.Dir = front;
 800c292:	4d1f      	ldr	r5, [pc, #124]	; (800c310 <Debug+0xb0>)
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c294:	f007 fb3a 	bl	801390c <iprintf>
	PIDChangeFlag(D_WALL_PID, 0);
 800c298:	4621      	mov	r1, r4
 800c29a:	2001      	movs	r0, #1
 800c29c:	f002 fbc4 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	2002      	movs	r0, #2
 800c2a4:	f002 fbc0 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c2a8:	4621      	mov	r1, r4
 800c2aa:	2003      	movs	r0, #3
 800c2ac:	f002 fbbc 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f002 fbb8 	bl	800ea28 <PIDChangeFlag>
	ExploreVelocity=0;
 800c2b8:	2700      	movs	r7, #0
	ChangeLED(3);
 800c2ba:	2003      	movs	r0, #3
	ExploreVelocity=0;
 800c2bc:	6037      	str	r7, [r6, #0]
	ChangeLED(3);
 800c2be:	f001 ffe5 	bl	800e28c <ChangeLED>
	ExploreVelocity = 135;
 800c2c2:	eddf 0a14 	vldr	s1, [pc, #80]	; 800c314 <Debug+0xb4>
	IT_mode = EXPLORE;
 800c2c6:	4b14      	ldr	r3, [pc, #80]	; (800c318 <Debug+0xb8>)
	Accel(61.75,ExploreVelocity);
 800c2c8:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800c31c <Debug+0xbc>
	ExploreVelocity = 135;
 800c2cc:	edc6 0a00 	vstr	s1, [r6]
	IT_mode = EXPLORE;
 800c2d0:	2206      	movs	r2, #6
 800c2d2:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800c2d4:	712c      	strb	r4, [r5, #4]
	Accel(61.75,ExploreVelocity);
 800c2d6:	f7fd f9bb 	bl	8009650 <Accel>
	for(int i=0; i < 1; i++)
	{
		Pos.Dir = front;
		GoStraight(90, ExploreVelocity, AddVelocity);
 800c2da:	4b11      	ldr	r3, [pc, #68]	; (800c320 <Debug+0xc0>)
 800c2dc:	edd6 0a00 	vldr	s1, [r6]
 800c2e0:	ed93 1a00 	vldr	s2, [r3]
 800c2e4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800c324 <Debug+0xc4>
		Pos.Dir = front;
 800c2e8:	712c      	strb	r4, [r5, #4]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800c2ea:	f7fd fb3d 	bl	8009968 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800c2ee:	f7fc fedb 	bl	80090a8 <SlalomRight>

	}
	Pos.Dir = front;
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800c2f2:	4b0d      	ldr	r3, [pc, #52]	; (800c328 <Debug+0xc8>)
	Pos.Dir = front;
 800c2f4:	712c      	strb	r4, [r5, #4]
	TargetVelocity[BODY] = 0;
 800c2f6:	609f      	str	r7, [r3, #8]
	HAL_Delay(1000);
 800c2f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800c2fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_Delay(1000);
 800c300:	f002 bd56 	b.w	800edb0 <HAL_Delay>
 800c304:	200048cc 	.word	0x200048cc
 800c308:	200049c0 	.word	0x200049c0
 800c30c:	0801711c 	.word	0x0801711c
 800c310:	20000000 	.word	0x20000000
 800c314:	43070000 	.word	0x43070000
 800c318:	2000488c 	.word	0x2000488c
 800c31c:	42770000 	.word	0x42770000
 800c320:	200048a4 	.word	0x200048a4
 800c324:	42b40000 	.word	0x42b40000
 800c328:	20004898 	.word	0x20004898

0800c32c <ParameterSetting>:
void ParameterSetting()
{
 800c32c:	b508      	push	{r3, lr}
	Load_Gain();
 800c32e:	f002 f917 	bl	800e560 <Load_Gain>
	Change_Gain();

}
 800c332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Change_Gain();
 800c336:	f002 b977 	b.w	800e628 <Change_Gain>
 800c33a:	bf00      	nop

0800c33c <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800c33c:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800c33e:	4b14      	ldr	r3, [pc, #80]	; (800c390 <GainTestRWall+0x54>)
 800c340:	2206      	movs	r2, #6
 800c342:	601a      	str	r2, [r3, #0]
	InitExplore();
 800c344:	f7ff fe62 	bl	800c00c <InitExplore>
	InitPosition();
 800c348:	f7fc fea2 	bl	8009090 <InitPosition>
	wall_init();
 800c34c:	f7fe fbc8 	bl	800aae0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800c350:	4b10      	ldr	r3, [pc, #64]	; (800c394 <GainTestRWall+0x58>)
 800c352:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800c354:	2101      	movs	r1, #1
 800c356:	2004      	movs	r0, #4
	TotalPulse[LEFT] = 0;
 800c358:	e9c3 4400 	strd	r4, r4, [r3]
	TotalPulse[BODY] = 0;
 800c35c:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c35e:	f002 fb63 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c362:	2101      	movs	r1, #1
 800c364:	2005      	movs	r0, #5
 800c366:	f002 fb5f 	bl	800ea28 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c36a:	4621      	mov	r1, r4
 800c36c:	2001      	movs	r0, #1
 800c36e:	f002 fb5b 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c372:	4621      	mov	r1, r4
 800c374:	2002      	movs	r0, #2
 800c376:	f002 fb57 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800c37a:	2003      	movs	r0, #3
 800c37c:	2101      	movs	r1, #1
 800c37e:	f002 fb53 	bl	800ea28 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c382:	4b05      	ldr	r3, [pc, #20]	; (800c398 <GainTestRWall+0x5c>)
 800c384:	2200      	movs	r2, #0
	ChangeLED(1);
 800c386:	2001      	movs	r0, #1
	ExploreVelocity=0;
 800c388:	601a      	str	r2, [r3, #0]
	ChangeLED(1);
 800c38a:	f001 ff7f 	bl	800e28c <ChangeLED>
 800c38e:	e7fe      	b.n	800c38e <GainTestRWall+0x52>
 800c390:	2000488c 	.word	0x2000488c
 800c394:	200048cc 	.word	0x200048cc
 800c398:	200049c0 	.word	0x200049c0

0800c39c <GainTestDWall>:
		TargetVelocity[BODY] = 0;

	}
}
void GainTestDWall()
{
 800c39c:	b580      	push	{r7, lr}
	IT_mode = EXPLORE;
 800c39e:	4b25      	ldr	r3, [pc, #148]	; (800c434 <GainTestDWall+0x98>)
 800c3a0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800c444 <GainTestDWall+0xa8>
 800c3a4:	4c24      	ldr	r4, [pc, #144]	; (800c438 <GainTestDWall+0x9c>)
	ExploreVelocity=0;
	ChangeLED(2);
	while(1)
	{
		TargetVelocity[BODY] = 0;
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800c3a6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800c448 <GainTestDWall+0xac>
	IT_mode = EXPLORE;
 800c3aa:	2206      	movs	r2, #6
{
 800c3ac:	b086      	sub	sp, #24
	IT_mode = EXPLORE;
 800c3ae:	601a      	str	r2, [r3, #0]
	InitExplore();
 800c3b0:	f7ff fe2c 	bl	800c00c <InitExplore>
	InitPosition();
 800c3b4:	f7fc fe6c 	bl	8009090 <InitPosition>
	wall_init();
 800c3b8:	f7fe fb92 	bl	800aae0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800c3bc:	4b1f      	ldr	r3, [pc, #124]	; (800c43c <GainTestDWall+0xa0>)
 800c3be:	2600      	movs	r6, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	2004      	movs	r0, #4
	TotalPulse[LEFT] = 0;
 800c3c4:	e9c3 6600 	strd	r6, r6, [r3]
	TotalPulse[BODY] = 0;
 800c3c8:	609e      	str	r6, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c3ca:	f002 fb2d 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c3ce:	2101      	movs	r1, #1
 800c3d0:	2005      	movs	r0, #5
 800c3d2:	f002 fb29 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 1);
 800c3d6:	2101      	movs	r1, #1
 800c3d8:	4608      	mov	r0, r1
 800c3da:	f002 fb25 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c3de:	4631      	mov	r1, r6
 800c3e0:	2002      	movs	r0, #2
 800c3e2:	f002 fb21 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c3e6:	2003      	movs	r0, #3
 800c3e8:	4631      	mov	r1, r6
 800c3ea:	f002 fb1d 	bl	800ea28 <PIDChangeFlag>
	ExploreVelocity=0;
 800c3ee:	4b14      	ldr	r3, [pc, #80]	; (800c440 <GainTestDWall+0xa4>)
 800c3f0:	2500      	movs	r5, #0
	ChangeLED(2);
 800c3f2:	2002      	movs	r0, #2
	ExploreVelocity=0;
 800c3f4:	601d      	str	r5, [r3, #0]
	ChangeLED(2);
 800c3f6:	f001 ff49 	bl	800e28c <ChangeLED>
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800c3fa:	6820      	ldr	r0, [r4, #0]
		TargetVelocity[BODY] = 0;
 800c3fc:	f8c9 5008 	str.w	r5, [r9, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800c400:	f7fb ffda 	bl	80083b8 <__aeabi_f2d>
 800c404:	4606      	mov	r6, r0
 800c406:	6860      	ldr	r0, [r4, #4]
 800c408:	460f      	mov	r7, r1
 800c40a:	f7fb ffd5 	bl	80083b8 <__aeabi_f2d>
 800c40e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c412:	68a0      	ldr	r0, [r4, #8]
 800c414:	f7fb ffd0 	bl	80083b8 <__aeabi_f2d>
 800c418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c41c:	68e0      	ldr	r0, [r4, #12]
 800c41e:	f7fb ffcb 	bl	80083b8 <__aeabi_f2d>
 800c422:	4632      	mov	r2, r6
 800c424:	e9cd 0100 	strd	r0, r1, [sp]
 800c428:	463b      	mov	r3, r7
 800c42a:	4640      	mov	r0, r8
 800c42c:	f007 fa6e 	bl	801390c <iprintf>
 800c430:	e7e3      	b.n	800c3fa <GainTestDWall+0x5e>
 800c432:	bf00      	nop
 800c434:	2000488c 	.word	0x2000488c
 800c438:	2000490c 	.word	0x2000490c
 800c43c:	200048cc 	.word	0x200048cc
 800c440:	200049c0 	.word	0x200049c0
 800c444:	20004898 	.word	0x20004898
 800c448:	08017160 	.word	0x08017160

0800c44c <GainTestAVelo>:
	}
}

void GainTestAVelo()
{
 800c44c:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800c44e:	4b16      	ldr	r3, [pc, #88]	; (800c4a8 <GainTestAVelo+0x5c>)
 800c450:	2206      	movs	r2, #6
 800c452:	601a      	str	r2, [r3, #0]
	InitExplore();
 800c454:	f7ff fdda 	bl	800c00c <InitExplore>
	InitPosition();
 800c458:	f7fc fe1a 	bl	8009090 <InitPosition>
	wall_init();
 800c45c:	f7fe fb40 	bl	800aae0 <wall_init>
	TotalPulse[RIGHT] = 0;
 800c460:	4b12      	ldr	r3, [pc, #72]	; (800c4ac <GainTestAVelo+0x60>)
 800c462:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800c464:	2101      	movs	r1, #1
 800c466:	2004      	movs	r0, #4
	TotalPulse[LEFT] = 0;
 800c468:	e9c3 4400 	strd	r4, r4, [r3]
	TotalPulse[BODY] = 0;
 800c46c:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c46e:	f002 fadb 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c472:	2101      	movs	r1, #1
 800c474:	2005      	movs	r0, #5
 800c476:	f002 fad7 	bl	800ea28 <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800c47a:	4620      	mov	r0, r4
 800c47c:	2101      	movs	r1, #1
 800c47e:	f002 fad3 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800c482:	4621      	mov	r1, r4
 800c484:	2001      	movs	r0, #1
 800c486:	f002 facf 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c48a:	4621      	mov	r1, r4
 800c48c:	2002      	movs	r0, #2
 800c48e:	f002 facb 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c492:	2003      	movs	r0, #3
 800c494:	4621      	mov	r1, r4
 800c496:	f002 fac7 	bl	800ea28 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c49a:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <GainTestAVelo+0x64>)
 800c49c:	2200      	movs	r2, #0
	ChangeLED(5);
 800c49e:	2005      	movs	r0, #5
	ExploreVelocity=0;
 800c4a0:	601a      	str	r2, [r3, #0]
	ChangeLED(5);
 800c4a2:	f001 fef3 	bl	800e28c <ChangeLED>
 800c4a6:	e7fe      	b.n	800c4a6 <GainTestAVelo+0x5a>
 800c4a8:	2000488c 	.word	0x2000488c
 800c4ac:	200048cc 	.word	0x200048cc
 800c4b0:	200049c0 	.word	0x200049c0

0800c4b4 <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800c4b4:	b508      	push	{r3, lr}
	IT_mode = WRITINGFREE;
 800c4b6:	4b1d      	ldr	r3, [pc, #116]	; (800c52c <WritingFree+0x78>)
 800c4b8:	2507      	movs	r5, #7
 800c4ba:	601d      	str	r5, [r3, #0]

	InitExplore();
 800c4bc:	f7ff fda6 	bl	800c00c <InitExplore>

	printf("3\r\n");
 800c4c0:	481b      	ldr	r0, [pc, #108]	; (800c530 <WritingFree+0x7c>)
 800c4c2:	f007 faab 	bl	8013a1c <puts>

	InitPosition();
 800c4c6:	f7fc fde3 	bl	8009090 <InitPosition>

	wall_init();
 800c4ca:	f7fe fb09 	bl	800aae0 <wall_init>
	printf("4\r\n");
 800c4ce:	4819      	ldr	r0, [pc, #100]	; (800c534 <WritingFree+0x80>)
 800c4d0:	f007 faa4 	bl	8013a1c <puts>

	TotalPulse[RIGHT] = 0;
 800c4d4:	4b18      	ldr	r3, [pc, #96]	; (800c538 <WritingFree+0x84>)
 800c4d6:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800c4d8:	2101      	movs	r1, #1
 800c4da:	2004      	movs	r0, #4
	TotalPulse[LEFT] = 0;
 800c4dc:	e9c3 4400 	strd	r4, r4, [r3]
	TotalPulse[BODY] = 0;
 800c4e0:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c4e2:	f002 faa1 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c4e6:	2101      	movs	r1, #1
 800c4e8:	2005      	movs	r0, #5
 800c4ea:	f002 fa9d 	bl	800ea28 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c4ee:	4621      	mov	r1, r4
 800c4f0:	2001      	movs	r0, #1
 800c4f2:	f002 fa99 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	2002      	movs	r0, #2
 800c4fa:	f002 fa95 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c4fe:	4621      	mov	r1, r4
 800c500:	2003      	movs	r0, #3
 800c502:	f002 fa91 	bl	800ea28 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800c506:	4b0d      	ldr	r3, [pc, #52]	; (800c53c <WritingFree+0x88>)
 800c508:	2200      	movs	r2, #0
	ChangeLED(7);
 800c50a:	4628      	mov	r0, r5
	ExploreVelocity=0;
 800c50c:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800c50e:	f001 febd 	bl	800e28c <ChangeLED>
	//	initSearchData(&my_map, &my_mouse);
		t = 0;
		HAL_TIM_Base_Stop_IT(&htim1);
		printf("%dms\r\n",timer1);
#else
	printf("初期化時重み更新タイム\r\n");
 800c512:	480b      	ldr	r0, [pc, #44]	; (800c540 <WritingFree+0x8c>)
 800c514:	f007 fa82 	bl	8013a1c <puts>
	initSearchData(&my_map, &my_mouse); //全体8.4ms . 初期化処理で1.2ms + 全体の重み更新で7.2ms
 800c518:	490a      	ldr	r1, [pc, #40]	; (800c544 <WritingFree+0x90>)
 800c51a:	480b      	ldr	r0, [pc, #44]	; (800c548 <WritingFree+0x94>)
 800c51c:	f001 fa94 	bl	800da48 <initSearchData>

	printf("走行時タイム\r\n");
 800c520:	480a      	ldr	r0, [pc, #40]	; (800c54c <WritingFree+0x98>)
 800c522:	f007 fa7b 	bl	8013a1c <puts>
	updateRealSearch();	//7.6ms
 800c526:	f001 faab 	bl	800da80 <updateRealSearch>
 800c52a:	e7fe      	b.n	800c52a <WritingFree+0x76>
 800c52c:	2000488c 	.word	0x2000488c
 800c530:	080171b8 	.word	0x080171b8
 800c534:	080171bc 	.word	0x080171bc
 800c538:	200048cc 	.word	0x200048cc
 800c53c:	200049c0 	.word	0x200049c0
 800c540:	080171c0 	.word	0x080171c0
 800c544:	200004dc 	.word	0x200004dc
 800c548:	20000688 	.word	0x20000688
 800c54c:	080171e4 	.word	0x080171e4

0800c550 <FastestRun>:
	}
	//探索の場合は迷路とステータスの準備
}

void FastestRun()
{
 800c550:	b570      	push	{r4, r5, r6, lr}
	IT_mode = EXPLORE;
 800c552:	4b79      	ldr	r3, [pc, #484]	; (800c738 <FastestRun+0x1e8>)
	InitPosition();


	wall_init();

	TotalPulse[RIGHT] = 0;
 800c554:	4e79      	ldr	r6, [pc, #484]	; (800c73c <FastestRun+0x1ec>)
{
 800c556:	b084      	sub	sp, #16
	IT_mode = EXPLORE;
 800c558:	2206      	movs	r2, #6
	HAL_Delay(100);
 800c55a:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800c55c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800c55e:	f002 fc27 	bl	800edb0 <HAL_Delay>
	int8_t mode=1;
 800c562:	aa04      	add	r2, sp, #16
 800c564:	2401      	movs	r4, #1
 800c566:	f802 4d02 	strb.w	r4, [r2, #-2]!
	  ModeSelect( 1, 2, &mode);
 800c56a:	2102      	movs	r1, #2
 800c56c:	4620      	mov	r0, r4
 800c56e:	f002 fb43 	bl	800ebf8 <ModeSelect>
	  Signal( mode );
 800c572:	f99d 000e 	ldrsb.w	r0, [sp, #14]
 800c576:	f002 fac5 	bl	800eb04 <Signal>
		HAL_Delay(100);
 800c57a:	2064      	movs	r0, #100	; 0x64
 800c57c:	f002 fc18 	bl	800edb0 <HAL_Delay>
		  int8_t mode2=1;
 800c580:	aa04      	add	r2, sp, #16
		  ModeSelect( 1, 4, &mode2);
 800c582:	2104      	movs	r1, #4
		  int8_t mode2=1;
 800c584:	f802 4d01 	strb.w	r4, [r2, #-1]!
		  ModeSelect( 1, 4, &mode2);
 800c588:	4620      	mov	r0, r4
 800c58a:	f002 fb35 	bl	800ebf8 <ModeSelect>
		  Signal( mode2 );
 800c58e:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800c592:	f002 fab7 	bl	800eb04 <Signal>
	TotalPulse[RIGHT] = 0;
 800c596:	2500      	movs	r5, #0
		  PhotoSwitch();
 800c598:	f002 fb02 	bl	800eba0 <PhotoSwitch>
	InitFastest();
 800c59c:	f7ff fdda 	bl	800c154 <InitFastest>
	InitPosition();
 800c5a0:	f7fc fd76 	bl	8009090 <InitPosition>
	wall_init();
 800c5a4:	f7fe fa9c 	bl	800aae0 <wall_init>
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	2004      	movs	r0, #4
	TotalPulse[LEFT] = 0;
 800c5ac:	e9c6 5500 	strd	r5, r5, [r6]
	TotalPulse[BODY] = 0;
 800c5b0:	60b5      	str	r5, [r6, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c5b2:	f002 fa39 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	2005      	movs	r0, #5
 800c5ba:	f002 fa35 	bl	800ea28 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c5be:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c5c2:	68b1      	ldr	r1, [r6, #8]
 800c5c4:	485e      	ldr	r0, [pc, #376]	; (800c740 <FastestRun+0x1f0>)
 800c5c6:	f007 f9a1 	bl	801390c <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f002 fa2b 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	2002      	movs	r0, #2
 800c5d6:	f002 fa27 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c5da:	4629      	mov	r1, r5
 800c5dc:	2003      	movs	r0, #3
 800c5de:	f002 fa23 	bl	800ea28 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode;
	if(mode == 1)
 800c5e2:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800c5e6:	42a3      	cmp	r3, r4
 800c5e8:	d079      	beq.n	800c6de <FastestRun+0x18e>
		ExploreVelocity = 400;
		turn_mode = 'T';
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	4c55      	ldr	r4, [pc, #340]	; (800c744 <FastestRun+0x1f4>)
 800c5ee:	bf0c      	ite	eq
 800c5f0:	2553      	moveq	r5, #83	; 0x53
 800c5f2:	2500      	movne	r5, #0
	}

	switch(mode2)
 800c5f4:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	2b03      	cmp	r3, #3
 800c5fc:	d812      	bhi.n	800c624 <FastestRun+0xd4>
 800c5fe:	e8df f003 	tbb	[pc, r3]
 800c602:	7d8c      	.short	0x7d8c
 800c604:	0273      	.short	0x0273
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
 800c606:	4a50      	ldr	r2, [pc, #320]	; (800c748 <FastestRun+0x1f8>)
		Sla.Pre = 3;
 800c608:	4b50      	ldr	r3, [pc, #320]	; (800c74c <FastestRun+0x1fc>)
		ExploreVelocity=300;
 800c60a:	6022      	str	r2, [r4, #0]
		Sla.Pre = 3;
 800c60c:	4a50      	ldr	r2, [pc, #320]	; (800c750 <FastestRun+0x200>)
 800c60e:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800c610:	4850      	ldr	r0, [pc, #320]	; (800c754 <FastestRun+0x204>)
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
 800c612:	4951      	ldr	r1, [pc, #324]	; (800c758 <FastestRun+0x208>)
		Sla.Fol = 5;
 800c614:	4a51      	ldr	r2, [pc, #324]	; (800c75c <FastestRun+0x20c>)
 800c616:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800c618:	6098      	str	r0, [r3, #8]
		Sla.Theta3 = 90;
 800c61a:	4a51      	ldr	r2, [pc, #324]	; (800c760 <FastestRun+0x210>)
		Sla.Theta1 = 30;
 800c61c:	4851      	ldr	r0, [pc, #324]	; (800c764 <FastestRun+0x214>)
 800c61e:	6118      	str	r0, [r3, #16]
		Sla.Theta2 = 60;
 800c620:	6159      	str	r1, [r3, #20]
		Sla.Theta3 = 90;
 800c622:	619a      	str	r2, [r3, #24]
		break;

	}

	ChangeLED(4);
 800c624:	2004      	movs	r0, #4
//			HAL_Delay(300);
//			break;
//	}
	//shiftPos();

	TargetVelocity[BODY] = 0;
 800c626:	4e50      	ldr	r6, [pc, #320]	; (800c768 <FastestRun+0x218>)
	ChangeLED(4);
 800c628:	f001 fe30 	bl	800e28c <ChangeLED>
	flash_copy_to_ram();
 800c62c:	f7fe fd02 	bl	800b034 <flash_copy_to_ram>
	TargetVelocity[BODY] = 0;
 800c630:	2300      	movs	r3, #0
	SearchOrFast = 1;
 800c632:	484e      	ldr	r0, [pc, #312]	; (800c76c <FastestRun+0x21c>)
	TargetVelocity[BODY] = 0;
 800c634:	60b3      	str	r3, [r6, #8]
	goal_edge_num = two;
 800c636:	4a4e      	ldr	r2, [pc, #312]	; (800c770 <FastestRun+0x220>)
	Acceleration = 0;
 800c638:	494e      	ldr	r1, [pc, #312]	; (800c774 <FastestRun+0x224>)
	SearchOrFast = 1;
 800c63a:	2601      	movs	r6, #1
 800c63c:	6006      	str	r6, [r0, #0]
	goal_edge_num = two;
 800c63e:	2602      	movs	r6, #2
 800c640:	7016      	strb	r6, [r2, #0]
	TargetAngularV = 0;
 800c642:	4a4d      	ldr	r2, [pc, #308]	; (800c778 <FastestRun+0x228>)
	Acceleration = 0;
 800c644:	600b      	str	r3, [r1, #0]
	PIDReset(L_VELO_PID);
 800c646:	2004      	movs	r0, #4
	TargetAngularV = 0;
 800c648:	6013      	str	r3, [r2, #0]
	PIDReset(L_VELO_PID);
 800c64a:	f002 f9f5 	bl	800ea38 <PIDReset>
	PIDReset(R_VELO_PID);
 800c64e:	2005      	movs	r0, #5
 800c650:	f002 f9f2 	bl	800ea38 <PIDReset>
	PIDReset(A_VELO_PID);
 800c654:	2000      	movs	r0, #0
 800c656:	f002 f9ef 	bl	800ea38 <PIDReset>
	PIDReset(L_WALL_PID);
 800c65a:	4630      	mov	r0, r6
 800c65c:	f002 f9ec 	bl	800ea38 <PIDReset>
	PIDReset(R_WALL_PID);
 800c660:	2003      	movs	r0, #3
 800c662:	f002 f9e9 	bl	800ea38 <PIDReset>
	HAL_Delay(200);
 800c666:	20c8      	movs	r0, #200	; 0xc8
 800c668:	f002 fba2 	bl	800edb0 <HAL_Delay>
	//加速
	Pos.Dir = front;
 800c66c:	4b43      	ldr	r3, [pc, #268]	; (800c77c <FastestRun+0x22c>)
	switch(Pos.Car%4)
 800c66e:	795a      	ldrb	r2, [r3, #5]
	Pos.Dir = front;
 800c670:	2100      	movs	r1, #0
	switch(Pos.Car%4)
 800c672:	f012 0203 	ands.w	r2, r2, #3
	Pos.Dir = front;
 800c676:	7119      	strb	r1, [r3, #4]
	switch(Pos.Car%4)
 800c678:	d02a      	beq.n	800c6d0 <FastestRun+0x180>
 800c67a:	42b2      	cmp	r2, r6
 800c67c:	d105      	bne.n	800c68a <FastestRun+0x13a>
		Pos.NextX = Pos.X;
		Pos.NextY = Pos.Y + 1;
		Pos.NextCar = north;
		break;
	case east:
		Pos.NextX = Pos.X + 1;
 800c67e:	7819      	ldrb	r1, [r3, #0]
		Pos.NextY = Pos.Y;
 800c680:	7858      	ldrb	r0, [r3, #1]
		Pos.NextCar = east;
 800c682:	72da      	strb	r2, [r3, #11]
		Pos.NextX = Pos.X + 1;
 800c684:	1c4a      	adds	r2, r1, #1
 800c686:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y;
 800c688:	7258      	strb	r0, [r3, #9]
		Pos.NextX = Pos.X - 1;
		Pos.NextY = Pos.Y;
		Pos.NextCar = west;
		break;
	}
	Accel(61.5, ExploreVelocity);
 800c68a:	edd4 0a00 	vldr	s1, [r4]
 800c68e:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800c780 <FastestRun+0x230>
	Signal(7);

	while(1)
	{
		HAL_Delay(10*1000);
		printf("ログ出力\r\n");
 800c692:	4c3c      	ldr	r4, [pc, #240]	; (800c784 <FastestRun+0x234>)
	Accel(61.5, ExploreVelocity);
 800c694:	f7fc ffdc 	bl	8009650 <Accel>
	shiftPos();
 800c698:	f000 f994 	bl	800c9c4 <shiftPos>
	fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode,0x03);
 800c69c:	2308      	movs	r3, #8
 800c69e:	2107      	movs	r1, #7
 800c6a0:	2203      	movs	r2, #3
 800c6a2:	4608      	mov	r0, r1
 800c6a4:	e9cd 5200 	strd	r5, r2, [sp]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	f000 f995 	bl	800c9d8 <fast_run>
	Decel(45,0);
 800c6ae:	eddf 0a36 	vldr	s1, [pc, #216]	; 800c788 <FastestRun+0x238>
 800c6b2:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800c78c <FastestRun+0x23c>
 800c6b6:	f7fd f88b 	bl	80097d0 <Decel>
	Signal(7);
 800c6ba:	2007      	movs	r0, #7
 800c6bc:	f002 fa22 	bl	800eb04 <Signal>
		HAL_Delay(10*1000);
 800c6c0:	f242 7010 	movw	r0, #10000	; 0x2710
 800c6c4:	f002 fb74 	bl	800edb0 <HAL_Delay>
		printf("ログ出力\r\n");
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f007 f9a7 	bl	8013a1c <puts>
 800c6ce:	e7f7      	b.n	800c6c0 <FastestRun+0x170>
		Pos.NextY = Pos.Y + 1;
 800c6d0:	7859      	ldrb	r1, [r3, #1]
		Pos.NextX = Pos.X;
 800c6d2:	7818      	ldrb	r0, [r3, #0]
		Pos.NextCar = north;
 800c6d4:	72da      	strb	r2, [r3, #11]
		Pos.NextY = Pos.Y + 1;
 800c6d6:	1c4a      	adds	r2, r1, #1
 800c6d8:	725a      	strb	r2, [r3, #9]
		Pos.NextX = Pos.X;
 800c6da:	7218      	strb	r0, [r3, #8]
		break;
 800c6dc:	e7d5      	b.n	800c68a <FastestRun+0x13a>
		ExploreVelocity = 400;
 800c6de:	4c19      	ldr	r4, [pc, #100]	; (800c744 <FastestRun+0x1f4>)
 800c6e0:	4b2b      	ldr	r3, [pc, #172]	; (800c790 <FastestRun+0x240>)
 800c6e2:	6023      	str	r3, [r4, #0]
		turn_mode = 'T';
 800c6e4:	2554      	movs	r5, #84	; 0x54
 800c6e6:	e785      	b.n	800c5f4 <FastestRun+0xa4>
		ExploreVelocity=180;
 800c6e8:	4a2a      	ldr	r2, [pc, #168]	; (800c794 <FastestRun+0x244>)
		Sla.Pre = 2;
 800c6ea:	4b18      	ldr	r3, [pc, #96]	; (800c74c <FastestRun+0x1fc>)
		ExploreVelocity=180;
 800c6ec:	6022      	str	r2, [r4, #0]
		Sla.Pre = 2;
 800c6ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c6f2:	601a      	str	r2, [r3, #0]
		Sla.Alpha = 0.04;
 800c6f4:	4828      	ldr	r0, [pc, #160]	; (800c798 <FastestRun+0x248>)
		Sla.Theta2 = 60;
 800c6f6:	4918      	ldr	r1, [pc, #96]	; (800c758 <FastestRun+0x208>)
		Sla.Fol = 3.5;
 800c6f8:	4a28      	ldr	r2, [pc, #160]	; (800c79c <FastestRun+0x24c>)
 800c6fa:	e78c      	b.n	800c616 <FastestRun+0xc6>
		Sla.Pre = 5;
 800c6fc:	4b13      	ldr	r3, [pc, #76]	; (800c74c <FastestRun+0x1fc>)
		Sla.Alpha = 0.0273;
 800c6fe:	4a28      	ldr	r2, [pc, #160]	; (800c7a0 <FastestRun+0x250>)
		ExploreVelocity=135;
 800c700:	4928      	ldr	r1, [pc, #160]	; (800c7a4 <FastestRun+0x254>)
		Sla.Alpha = 0.0273;
 800c702:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c704:	4a17      	ldr	r2, [pc, #92]	; (800c764 <FastestRun+0x214>)
		Sla.Theta2 = 60;
 800c706:	4814      	ldr	r0, [pc, #80]	; (800c758 <FastestRun+0x208>)
		ExploreVelocity=135;
 800c708:	6021      	str	r1, [r4, #0]
		Sla.Theta1 = 30;
 800c70a:	611a      	str	r2, [r3, #16]
		Sla.Theta3 = 90;
 800c70c:	4914      	ldr	r1, [pc, #80]	; (800c760 <FastestRun+0x210>)
		Sla.Pre = 5;
 800c70e:	4a13      	ldr	r2, [pc, #76]	; (800c75c <FastestRun+0x20c>)
		Sla.Theta2 = 60;
 800c710:	6158      	str	r0, [r3, #20]
		Sla.Theta3 = 90;
 800c712:	6199      	str	r1, [r3, #24]
		Sla.Pre = 5;
 800c714:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800c716:	605a      	str	r2, [r3, #4]
		break;
 800c718:	e784      	b.n	800c624 <FastestRun+0xd4>
		Sla.Pre = 7;//9;
 800c71a:	4b0c      	ldr	r3, [pc, #48]	; (800c74c <FastestRun+0x1fc>)
		ExploreVelocity=90;
 800c71c:	4a10      	ldr	r2, [pc, #64]	; (800c760 <FastestRun+0x210>)
 800c71e:	6022      	str	r2, [r4, #0]
		Sla.Theta3 = 90;
 800c720:	619a      	str	r2, [r3, #24]
		Sla.Pre = 7;//9;
 800c722:	4a21      	ldr	r2, [pc, #132]	; (800c7a8 <FastestRun+0x258>)
 800c724:	601a      	str	r2, [r3, #0]
		Sla.Fol = 11;//13;
 800c726:	4a21      	ldr	r2, [pc, #132]	; (800c7ac <FastestRun+0x25c>)
		Sla.Alpha = 0.014;
 800c728:	4821      	ldr	r0, [pc, #132]	; (800c7b0 <FastestRun+0x260>)
		Sla.Theta2 = 60;
 800c72a:	490b      	ldr	r1, [pc, #44]	; (800c758 <FastestRun+0x208>)
		Sla.Fol = 11;//13;
 800c72c:	605a      	str	r2, [r3, #4]
		Sla.Theta1 = 30;
 800c72e:	4a0d      	ldr	r2, [pc, #52]	; (800c764 <FastestRun+0x214>)
		Sla.Alpha = 0.014;
 800c730:	6098      	str	r0, [r3, #8]
		Sla.Theta1 = 30;
 800c732:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c734:	6159      	str	r1, [r3, #20]
		break;
 800c736:	e775      	b.n	800c624 <FastestRun+0xd4>
 800c738:	2000488c 	.word	0x2000488c
 800c73c:	200048cc 	.word	0x200048cc
 800c740:	0801711c 	.word	0x0801711c
 800c744:	200049c0 	.word	0x200049c0
 800c748:	43960000 	.word	0x43960000
 800c74c:	200048e4 	.word	0x200048e4
 800c750:	40400000 	.word	0x40400000
 800c754:	3def9db2 	.word	0x3def9db2
 800c758:	42700000 	.word	0x42700000
 800c75c:	40a00000 	.word	0x40a00000
 800c760:	42b40000 	.word	0x42b40000
 800c764:	41f00000 	.word	0x41f00000
 800c768:	20004898 	.word	0x20004898
 800c76c:	20004b38 	.word	0x20004b38
 800c770:	200048c8 	.word	0x200048c8
 800c774:	20000224 	.word	0x20000224
 800c778:	200048a8 	.word	0x200048a8
 800c77c:	20000000 	.word	0x20000000
 800c780:	42760000 	.word	0x42760000
 800c784:	08017150 	.word	0x08017150
 800c788:	00000000 	.word	0x00000000
 800c78c:	42340000 	.word	0x42340000
 800c790:	43c80000 	.word	0x43c80000
 800c794:	43340000 	.word	0x43340000
 800c798:	3d23d70a 	.word	0x3d23d70a
 800c79c:	40600000 	.word	0x40600000
 800c7a0:	3cdfa440 	.word	0x3cdfa440
 800c7a4:	43070000 	.word	0x43070000
 800c7a8:	40e00000 	.word	0x40e00000
 800c7ac:	41300000 	.word	0x41300000
 800c7b0:	3c656042 	.word	0x3c656042

0800c7b4 <Explore>:
	}
}
void Explore()
{
 800c7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	IT_mode = EXPLORE;
 800c7b6:	4b69      	ldr	r3, [pc, #420]	; (800c95c <Explore+0x1a8>)
{
 800c7b8:	b083      	sub	sp, #12
	IT_mode = EXPLORE;
 800c7ba:	2206      	movs	r2, #6
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800c7bc:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800c7be:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800c7c0:	f002 faf6 	bl	800edb0 <HAL_Delay>
	int8_t mode=1;
 800c7c4:	aa02      	add	r2, sp, #8
 800c7c6:	2401      	movs	r4, #1
 800c7c8:	f802 4d02 	strb.w	r4, [r2, #-2]!
	ModeSelect( 1, 2, &mode);
 800c7cc:	2102      	movs	r1, #2
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f002 fa12 	bl	800ebf8 <ModeSelect>
	Signal( mode );
 800c7d4:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 800c7d8:	f002 f994 	bl	800eb04 <Signal>
	HAL_Delay(100);
 800c7dc:	2064      	movs	r0, #100	; 0x64
 800c7de:	f002 fae7 	bl	800edb0 <HAL_Delay>

	int8_t mode2=1;
 800c7e2:	aa02      	add	r2, sp, #8
	ModeSelect( 1, 4, &mode2);
 800c7e4:	2104      	movs	r1, #4
	int8_t mode2=1;
 800c7e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
	ModeSelect( 1, 4, &mode2);
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f002 fa04 	bl	800ebf8 <ModeSelect>
	Signal( mode2 );
 800c7f0:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800c7f4:	f002 f986 	bl	800eb04 <Signal>
	PhotoSwitch();
 800c7f8:	f002 f9d2 	bl	800eba0 <PhotoSwitch>
	InitExplore();
 800c7fc:	f7ff fc06 	bl	800c00c <InitExplore>
	InitPosition();
 800c800:	f7fc fc46 	bl	8009090 <InitPosition>
	wall_init();
 800c804:	f7fe f96c 	bl	800aae0 <wall_init>

	TotalPulse[RIGHT] = 0;
 800c808:	4b55      	ldr	r3, [pc, #340]	; (800c960 <Explore+0x1ac>)
 800c80a:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800c80c:	4621      	mov	r1, r4
 800c80e:	2004      	movs	r0, #4
	TotalPulse[LEFT] = 0;
 800c810:	e9c3 5500 	strd	r5, r5, [r3]
	TotalPulse[BODY] = 0;
 800c814:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800c816:	f002 f907 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c81a:	4621      	mov	r1, r4
 800c81c:	2005      	movs	r0, #5
 800c81e:	f002 f903 	bl	800ea28 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c822:	4629      	mov	r1, r5
 800c824:	4620      	mov	r0, r4
 800c826:	f002 f8ff 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c82a:	4629      	mov	r1, r5
 800c82c:	2002      	movs	r0, #2
 800c82e:	f002 f8fb 	bl	800ea28 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c832:	4629      	mov	r1, r5
 800c834:	2003      	movs	r0, #3
 800c836:	f002 f8f7 	bl	800ea28 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	ChangeLED(2);
 800c83a:	2002      	movs	r0, #2
 800c83c:	f001 fd26 	bl	800e28c <ChangeLED>

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode;
	if(mode == 1)
 800c840:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 800c844:	42a3      	cmp	r3, r4
 800c846:	d05f      	beq.n	800c908 <Explore+0x154>
		turn_mode = 'T';
		ExploreVelocity=300;
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800c848:	2b02      	cmp	r3, #2
 800c84a:	4c46      	ldr	r4, [pc, #280]	; (800c964 <Explore+0x1b0>)
 800c84c:	bf0c      	ite	eq
 800c84e:	2653      	moveq	r6, #83	; 0x53
 800c850:	2600      	movne	r6, #0
	}

	switch(mode2)
 800c852:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800c856:	3b01      	subs	r3, #1
 800c858:	2b03      	cmp	r3, #3
 800c85a:	d812      	bhi.n	800c882 <Explore+0xce>
 800c85c:	e8df f003 	tbb	[pc, r3]
 800c860:	0259646e 	.word	0x0259646e
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
 800c864:	4a40      	ldr	r2, [pc, #256]	; (800c968 <Explore+0x1b4>)
		Sla.Pre = 3;
 800c866:	4b41      	ldr	r3, [pc, #260]	; (800c96c <Explore+0x1b8>)
		ExploreVelocity=300;
 800c868:	6022      	str	r2, [r4, #0]
		Sla.Pre = 3;
 800c86a:	4a41      	ldr	r2, [pc, #260]	; (800c970 <Explore+0x1bc>)
 800c86c:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800c86e:	4841      	ldr	r0, [pc, #260]	; (800c974 <Explore+0x1c0>)
		Sla.Theta1 = 30;
		Sla.Theta2 = 60;
 800c870:	4941      	ldr	r1, [pc, #260]	; (800c978 <Explore+0x1c4>)
		Sla.Fol = 5;
 800c872:	4a42      	ldr	r2, [pc, #264]	; (800c97c <Explore+0x1c8>)
 800c874:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800c876:	6098      	str	r0, [r3, #8]
		Sla.Theta3 = 90;
 800c878:	4a41      	ldr	r2, [pc, #260]	; (800c980 <Explore+0x1cc>)
		Sla.Theta1 = 30;
 800c87a:	4842      	ldr	r0, [pc, #264]	; (800c984 <Explore+0x1d0>)
 800c87c:	6118      	str	r0, [r3, #16]
		Sla.Theta2 = 60;
 800c87e:	6159      	str	r1, [r3, #20]
		Sla.Theta3 = 90;
 800c880:	619a      	str	r2, [r3, #24]

	}
//	Pos.TargetX = X_GOAL_LESSER;
//	Pos.TargetY = Y_GOAL_LESSER;
//	goal_edge_num = two;
	SearchOrFast = 0;
 800c882:	4b41      	ldr	r3, [pc, #260]	; (800c988 <Explore+0x1d4>)
//	Pos.Dir = front;
//	Pos.Car = north;
//	Pos.NextX = Pos.X;
//	Pos.NextY = Pos.Y + 1;
//	Pos.NextCar = north;
	initSearchData(&my_map, &my_mouse);
 800c884:	4941      	ldr	r1, [pc, #260]	; (800c98c <Explore+0x1d8>)
 800c886:	4842      	ldr	r0, [pc, #264]	; (800c990 <Explore+0x1dc>)
	SearchOrFast = 0;
 800c888:	2200      	movs	r2, #0
 800c88a:	601a      	str	r2, [r3, #0]
 800c88c:	460d      	mov	r5, r1

//		//ChangeLED(Pos.Car);
//		KyushinJudge();
//		SelectAction(turn_mode);
//		shiftPos();
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c88e:	4607      	mov	r7, r0
	initSearchData(&my_map, &my_mouse);
 800c890:	f001 f8da 	bl	800da48 <initSearchData>
	dbc = 1;
 800c894:	4b3f      	ldr	r3, [pc, #252]	; (800c994 <Explore+0x1e0>)
	Accel(61.5, ExploreVelocity);
 800c896:	edd4 0a00 	vldr	s1, [r4]
 800c89a:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800c998 <Explore+0x1e4>
	dbc = 1;
 800c89e:	2201      	movs	r2, #1
 800c8a0:	601a      	str	r2, [r3, #0]
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c8a2:	462c      	mov	r4, r5
	Accel(61.5, ExploreVelocity);
 800c8a4:	f7fc fed4 	bl	8009650 <Accel>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c8a8:	e001      	b.n	800c8ae <Explore+0xfa>
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c8aa:	f001 f9d7 	bl	800dc5c <getNextDirection>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c8ae:	782a      	ldrb	r2, [r5, #0]
 800c8b0:	7a2b      	ldrb	r3, [r5, #8]
 800c8b2:	429a      	cmp	r2, r3
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	4632      	mov	r2, r6
 800c8b8:	4638      	mov	r0, r7
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c8ba:	d8f6      	bhi.n	800c8aa <Explore+0xf6>
 800c8bc:	f895 c002 	ldrb.w	ip, [r5, #2]
 800c8c0:	459c      	cmp	ip, r3
 800c8c2:	d3f2      	bcc.n	800c8aa <Explore+0xf6>
 800c8c4:	7a6b      	ldrb	r3, [r5, #9]
 800c8c6:	f895 c001 	ldrb.w	ip, [r5, #1]
 800c8ca:	459c      	cmp	ip, r3
 800c8cc:	d8ed      	bhi.n	800c8aa <Explore+0xf6>
 800c8ce:	f895 c003 	ldrb.w	ip, [r5, #3]
 800c8d2:	459c      	cmp	ip, r3
 800c8d4:	d3e9      	bcc.n	800c8aa <Explore+0xf6>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800c8d6:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c99c <Explore+0x1e8>
 800c8da:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800c9a0 <Explore+0x1ec>
	Signal(7);

while(1)
{
	//迷路データの出力
	printAllNode(&my_map);
 800c8de:	4c2c      	ldr	r4, [pc, #176]	; (800c990 <Explore+0x1dc>)
	Decel(45, 0);
 800c8e0:	f7fc ff76 	bl	80097d0 <Decel>
	shiftState(&my_mouse);
 800c8e4:	4829      	ldr	r0, [pc, #164]	; (800c98c <Explore+0x1d8>)
 800c8e6:	f7ff fb85 	bl	800bff4 <shiftState>
	Signal(7);
 800c8ea:	2007      	movs	r0, #7
 800c8ec:	f002 f90a 	bl	800eb04 <Signal>
	printAllNode(&my_map);
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f7fe fd75 	bl	800b3e0 <printAllNode>
	printMatrix16ValueFromNode(&my_map);
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f7fe fdb6 	bl	800b468 <printMatrix16ValueFromNode>
	printAllWeight(&my_map, &(my_mouse.now.node->pos) );
 800c8fc:	6929      	ldr	r1, [r5, #16]
 800c8fe:	4620      	mov	r0, r4
 800c900:	3106      	adds	r1, #6
 800c902:	f7fe fbdd 	bl	800b0c0 <printAllWeight>
 800c906:	e7f3      	b.n	800c8f0 <Explore+0x13c>
		ExploreVelocity=300;
 800c908:	4c16      	ldr	r4, [pc, #88]	; (800c964 <Explore+0x1b0>)
 800c90a:	4b17      	ldr	r3, [pc, #92]	; (800c968 <Explore+0x1b4>)
 800c90c:	6023      	str	r3, [r4, #0]
		turn_mode = 'T';
 800c90e:	2654      	movs	r6, #84	; 0x54
 800c910:	e79f      	b.n	800c852 <Explore+0x9e>
		ExploreVelocity=240;
 800c912:	4a24      	ldr	r2, [pc, #144]	; (800c9a4 <Explore+0x1f0>)
		Sla.Pre = 2;
 800c914:	4b15      	ldr	r3, [pc, #84]	; (800c96c <Explore+0x1b8>)
		ExploreVelocity=240;
 800c916:	6022      	str	r2, [r4, #0]
		Sla.Pre = 2;
 800c918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c91c:	601a      	str	r2, [r3, #0]
		Sla.Alpha = 0.078;
 800c91e:	4822      	ldr	r0, [pc, #136]	; (800c9a8 <Explore+0x1f4>)
		Sla.Theta2 = 60;
 800c920:	4915      	ldr	r1, [pc, #84]	; (800c978 <Explore+0x1c4>)
		Sla.Fol = 16;
 800c922:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800c926:	e7a5      	b.n	800c874 <Explore+0xc0>
		ExploreVelocity=180;
 800c928:	4920      	ldr	r1, [pc, #128]	; (800c9ac <Explore+0x1f8>)
		Sla.Pre = 2;
 800c92a:	4b10      	ldr	r3, [pc, #64]	; (800c96c <Explore+0x1b8>)
		ExploreVelocity=180;
 800c92c:	6021      	str	r1, [r4, #0]
		Sla.Pre = 2;
 800c92e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c932:	6019      	str	r1, [r3, #0]
		Sla.Fol = 16.5;
 800c934:	4a1e      	ldr	r2, [pc, #120]	; (800c9b0 <Explore+0x1fc>)
		Sla.Alpha = 0.043;
 800c936:	481f      	ldr	r0, [pc, #124]	; (800c9b4 <Explore+0x200>)
		Sla.Theta2 = 60;
 800c938:	490f      	ldr	r1, [pc, #60]	; (800c978 <Explore+0x1c4>)
 800c93a:	e79b      	b.n	800c874 <Explore+0xc0>
		Sla.Pre = 9;
 800c93c:	4b0b      	ldr	r3, [pc, #44]	; (800c96c <Explore+0x1b8>)
		ExploreVelocity=90;
 800c93e:	4a10      	ldr	r2, [pc, #64]	; (800c980 <Explore+0x1cc>)
 800c940:	6022      	str	r2, [r4, #0]
		Sla.Theta3 = 90;
 800c942:	619a      	str	r2, [r3, #24]
		Sla.Pre = 9;
 800c944:	4a1c      	ldr	r2, [pc, #112]	; (800c9b8 <Explore+0x204>)
 800c946:	601a      	str	r2, [r3, #0]
		Sla.Fol = 20;
 800c948:	4a1c      	ldr	r2, [pc, #112]	; (800c9bc <Explore+0x208>)
		Sla.Alpha = 0.014;
 800c94a:	481d      	ldr	r0, [pc, #116]	; (800c9c0 <Explore+0x20c>)
		Sla.Theta2 = 60;
 800c94c:	490a      	ldr	r1, [pc, #40]	; (800c978 <Explore+0x1c4>)
		Sla.Fol = 20;
 800c94e:	605a      	str	r2, [r3, #4]
		Sla.Theta1 = 30;
 800c950:	4a0c      	ldr	r2, [pc, #48]	; (800c984 <Explore+0x1d0>)
		Sla.Alpha = 0.014;
 800c952:	6098      	str	r0, [r3, #8]
		Sla.Theta1 = 30;
 800c954:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c956:	6159      	str	r1, [r3, #20]
		break;
 800c958:	e793      	b.n	800c882 <Explore+0xce>
 800c95a:	bf00      	nop
 800c95c:	2000488c 	.word	0x2000488c
 800c960:	200048cc 	.word	0x200048cc
 800c964:	200049c0 	.word	0x200049c0
 800c968:	43960000 	.word	0x43960000
 800c96c:	200048e4 	.word	0x200048e4
 800c970:	40400000 	.word	0x40400000
 800c974:	3def9db2 	.word	0x3def9db2
 800c978:	42700000 	.word	0x42700000
 800c97c:	40a00000 	.word	0x40a00000
 800c980:	42b40000 	.word	0x42b40000
 800c984:	41f00000 	.word	0x41f00000
 800c988:	20004b38 	.word	0x20004b38
 800c98c:	200004dc 	.word	0x200004dc
 800c990:	20000688 	.word	0x20000688
 800c994:	20000218 	.word	0x20000218
 800c998:	42760000 	.word	0x42760000
 800c99c:	00000000 	.word	0x00000000
 800c9a0:	42340000 	.word	0x42340000
 800c9a4:	43700000 	.word	0x43700000
 800c9a8:	3d9fbe77 	.word	0x3d9fbe77
 800c9ac:	43340000 	.word	0x43340000
 800c9b0:	41840000 	.word	0x41840000
 800c9b4:	3d3020c5 	.word	0x3d3020c5
 800c9b8:	41100000 	.word	0x41100000
 800c9bc:	41a00000 	.word	0x41a00000
 800c9c0:	3c656042 	.word	0x3c656042

0800c9c4 <shiftPos>:
#include "Action.h"
int Calc;
int SearchOrFast;
void shiftPos()
{
	Pos.Car = Pos.NextCar;
 800c9c4:	4b03      	ldr	r3, [pc, #12]	; (800c9d4 <shiftPos+0x10>)
 800c9c6:	7ad8      	ldrb	r0, [r3, #11]
	Pos.X = Pos.NextX;
 800c9c8:	7a19      	ldrb	r1, [r3, #8]
	Pos.Y = Pos.NextY;
 800c9ca:	7a5a      	ldrb	r2, [r3, #9]
	Pos.Car = Pos.NextCar;
 800c9cc:	7158      	strb	r0, [r3, #5]
	Pos.X = Pos.NextX;
 800c9ce:	7019      	strb	r1, [r3, #0]
	Pos.Y = Pos.NextY;
 800c9d0:	705a      	strb	r2, [r3, #1]
}
 800c9d2:	4770      	bx	lr
 800c9d4:	20000000 	.word	0x20000000

0800c9d8 <fast_run>:
	return ( (int)( ( 4 + Pos.NextCar - Pos.Car) % 4 ) );			//どっちに向かうべきかを返す。
										//演算の意味はmytyedef.h内のenum宣言から。

}
void fast_run(int x, int y,int x2, int y2, char turn_mode, int mask)
{
 800c9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9dc:	b089      	sub	sp, #36	; 0x24
 800c9de:	4cb4      	ldr	r4, [pc, #720]	; (800ccb0 <fast_run+0x2d8>)
 800c9e0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800c9e4:	9503      	str	r5, [sp, #12]
 800c9e6:	9307      	str	r3, [sp, #28]
 800c9e8:	7826      	ldrb	r6, [r4, #0]
 800c9ea:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	if( (Wall[Pos.X][Pos.Y].north & mask) == NOWALL)			//北に壁がなければ
 800c9ec:	4db1      	ldr	r5, [pc, #708]	; (800ccb4 <fast_run+0x2dc>)
{
 800c9ee:	9106      	str	r1, [sp, #24]
	make_map(x,y,mask);				//歩数Map生成
 800c9f0:	b2cb      	uxtb	r3, r1
 800c9f2:	9304      	str	r3, [sp, #16]
{
 800c9f4:	9002      	str	r0, [sp, #8]
 800c9f6:	9205      	str	r2, [sp, #20]
 800c9f8:	4603      	mov	r3, r0
//			Pos.X--;	//西を向いたときはX座標を減らす
//			break;
//
//	}

	while( !((x <= Pos.X && Pos.X <= x2) && (y <= Pos.Y && Pos.Y <= y2)) ){			//ゴールするまで繰り返す
 800c9fa:	429e      	cmp	r6, r3
 800c9fc:	db0a      	blt.n	800ca14 <fast_run+0x3c>
 800c9fe:	9b05      	ldr	r3, [sp, #20]
 800ca00:	429e      	cmp	r6, r3
 800ca02:	dc07      	bgt.n	800ca14 <fast_run+0x3c>
 800ca04:	7863      	ldrb	r3, [r4, #1]
 800ca06:	9a06      	ldr	r2, [sp, #24]
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	db03      	blt.n	800ca14 <fast_run+0x3c>
 800ca0c:	9a07      	ldr	r2, [sp, #28]
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	f340 8147 	ble.w	800cca2 <fast_run+0x2ca>
	make_map(x,y,mask);				//歩数Map生成
 800ca14:	463a      	mov	r2, r7
 800ca16:	9904      	ldr	r1, [sp, #16]
 800ca18:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800ca1c:	f7fe f9f4 	bl	800ae08 <make_map>
	if( (Wall[Pos.X][Pos.Y].north & mask) == NOWALL)			//北に壁がなければ
 800ca20:	7822      	ldrb	r2, [r4, #0]
 800ca22:	7861      	ldrb	r1, [r4, #1]
 800ca24:	00d3      	lsls	r3, r2, #3
 800ca26:	1898      	adds	r0, r3, r2
 800ca28:	4408      	add	r0, r1
 800ca2a:	f815 0010 	ldrb.w	r0, [r5, r0, lsl #1]
 800ca2e:	f000 0003 	and.w	r0, r0, #3
 800ca32:	4238      	tst	r0, r7
	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800ca34:	7960      	ldrb	r0, [r4, #5]
	if( (Wall[Pos.X][Pos.Y].north & mask) == NOWALL)			//北に壁がなければ
 800ca36:	d130      	bne.n	800ca9a <fast_run+0xc2>
		tmp_priority = get_priority(Pos.X, Pos.Y + 1, north);	//優先度を算出
 800ca38:	f101 0c01 	add.w	ip, r1, #1
	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	f000 8129 	beq.w	800cc94 <fast_run+0x2bc>
	else if( ((4+Pos.Car-car)%4) == 2)		//行きたい方向が現在の進行方向と逆の場合
 800ca42:	f000 0e03 	and.w	lr, r0, #3
 800ca46:	f1be 0e02 	subs.w	lr, lr, #2
 800ca4a:	bf18      	it	ne
 800ca4c:	f04f 0e01 	movne.w	lr, #1
	if((Wall[x][y].north == UNKNOWN) || (Wall[x][y].east == UNKNOWN) || (Wall[x][y].south == UNKNOWN) || (Wall[x][y].west == UNKNOWN))
 800ca50:	189e      	adds	r6, r3, r2
 800ca52:	4466      	add	r6, ip
 800ca54:	f815 6016 	ldrb.w	r6, [r5, r6, lsl #1]
 800ca58:	f006 0803 	and.w	r8, r6, #3
 800ca5c:	f1b8 0f02 	cmp.w	r8, #2
 800ca60:	f000 80e3 	beq.w	800cc2a <fast_run+0x252>
 800ca64:	f3c6 0881 	ubfx	r8, r6, #2, #2
 800ca68:	f1b8 0f02 	cmp.w	r8, #2
 800ca6c:	f000 80dd 	beq.w	800cc2a <fast_run+0x252>
 800ca70:	f3c6 1801 	ubfx	r8, r6, #4, #2
 800ca74:	f1b8 0f02 	cmp.w	r8, #2
 800ca78:	f000 80d7 	beq.w	800cc2a <fast_run+0x252>
 800ca7c:	09b6      	lsrs	r6, r6, #6
 800ca7e:	2e02      	cmp	r6, #2
 800ca80:	f000 80d3 	beq.w	800cc2a <fast_run+0x252>
		if(walk_map[Pos.X][Pos.Y+1] < little)				//一番歩数が小さい方向を見つける
 800ca84:	189e      	adds	r6, r3, r2
 800ca86:	44b4      	add	ip, r6
 800ca88:	4e8b      	ldr	r6, [pc, #556]	; (800ccb8 <fast_run+0x2e0>)
 800ca8a:	f836 601c 	ldrh.w	r6, [r6, ip, lsl #1]
 800ca8e:	2efe      	cmp	r6, #254	; 0xfe
 800ca90:	f240 80e4 	bls.w	800cc5c <fast_run+0x284>
		else if(walk_map[Pos.X][Pos.Y+1] == little)			//歩数が同じ場合は優先度から判断する
 800ca94:	2eff      	cmp	r6, #255	; 0xff
 800ca96:	f000 80de 	beq.w	800cc56 <fast_run+0x27e>
	little = 255;					//最小歩数を255歩(mapがunsigned char型なので)に設定
 800ca9a:	26ff      	movs	r6, #255	; 0xff
	priority = 0;					//優先度の初期値は0
 800ca9c:	f04f 0e00 	mov.w	lr, #0
	little = 255;					//最小歩数を255歩(mapがunsigned char型なので)に設定
 800caa0:	9601      	str	r6, [sp, #4]
	if( (Wall[Pos.X][Pos.Y].east & mask) == NOWALL)			//東に壁がなければ
 800caa2:	eb03 0c02 	add.w	ip, r3, r2
 800caa6:	448c      	add	ip, r1
 800caa8:	f815 c01c 	ldrb.w	ip, [r5, ip, lsl #1]
 800caac:	f3cc 0c81 	ubfx	ip, ip, #2, #2
 800cab0:	ea1c 0f07 	tst.w	ip, r7
 800cab4:	d13c      	bne.n	800cb30 <fast_run+0x158>
	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800cab6:	2802      	cmp	r0, #2
		tmp_priority = get_priority(Pos.X + 1, Pos.Y, east);	//優先度を算出
 800cab8:	f102 0901 	add.w	r9, r2, #1
	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800cabc:	f000 80ed 	beq.w	800cc9a <fast_run+0x2c2>
	else if( ((4+Pos.Car-car)%4) == 2)		//行きたい方向が現在の進行方向と逆の場合
 800cac0:	f100 0802 	add.w	r8, r0, #2
 800cac4:	f008 0803 	and.w	r8, r8, #3
 800cac8:	f1b8 0802 	subs.w	r8, r8, #2
 800cacc:	bf18      	it	ne
 800cace:	f04f 0801 	movne.w	r8, #1
	if((Wall[x][y].north == UNKNOWN) || (Wall[x][y].east == UNKNOWN) || (Wall[x][y].south == UNKNOWN) || (Wall[x][y].west == UNKNOWN))
 800cad2:	ea4f 0cc9 	mov.w	ip, r9, lsl #3
 800cad6:	eb0c 0a09 	add.w	sl, ip, r9
 800cada:	448a      	add	sl, r1
 800cadc:	f815 a01a 	ldrb.w	sl, [r5, sl, lsl #1]
 800cae0:	f00a 0b03 	and.w	fp, sl, #3
 800cae4:	f1bb 0f02 	cmp.w	fp, #2
 800cae8:	f000 80a2 	beq.w	800cc30 <fast_run+0x258>
 800caec:	f3ca 0b81 	ubfx	fp, sl, #2, #2
 800caf0:	f1bb 0f02 	cmp.w	fp, #2
 800caf4:	f000 809c 	beq.w	800cc30 <fast_run+0x258>
 800caf8:	f3ca 1b01 	ubfx	fp, sl, #4, #2
 800cafc:	f1bb 0f02 	cmp.w	fp, #2
 800cb00:	f000 8096 	beq.w	800cc30 <fast_run+0x258>
 800cb04:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
 800cb08:	f1ba 0f02 	cmp.w	sl, #2
 800cb0c:	f000 8090 	beq.w	800cc30 <fast_run+0x258>
		if(walk_map[Pos.X + 1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800cb10:	44cc      	add	ip, r9
 800cb12:	4e69      	ldr	r6, [pc, #420]	; (800ccb8 <fast_run+0x2e0>)
 800cb14:	448c      	add	ip, r1
 800cb16:	f836 c01c 	ldrh.w	ip, [r6, ip, lsl #1]
 800cb1a:	9e01      	ldr	r6, [sp, #4]
 800cb1c:	45b4      	cmp	ip, r6
 800cb1e:	f280 80ab 	bge.w	800cc78 <fast_run+0x2a0>
			Pos.NextCar = east;						//方向を保存
 800cb22:	f04f 0902 	mov.w	r9, #2
 800cb26:	46c6      	mov	lr, r8
 800cb28:	f8cd c004 	str.w	ip, [sp, #4]
 800cb2c:	f884 900b 	strb.w	r9, [r4, #11]
	if( (Wall[Pos.X][Pos.Y].south & mask) == NOWALL)			//南に壁がなければ
 800cb30:	eb03 0c02 	add.w	ip, r3, r2
 800cb34:	448c      	add	ip, r1
 800cb36:	f815 c01c 	ldrb.w	ip, [r5, ip, lsl #1]
 800cb3a:	f3cc 1c01 	ubfx	ip, ip, #4, #2
 800cb3e:	ea1c 0f07 	tst.w	ip, r7
 800cb42:	d133      	bne.n	800cbac <fast_run+0x1d4>
	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800cb44:	2804      	cmp	r0, #4
		tmp_priority = get_priority(Pos.X, Pos.Y - 1, south);	//優先度を算出
 800cb46:	f101 39ff 	add.w	r9, r1, #4294967295
	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800cb4a:	f000 80a0 	beq.w	800cc8e <fast_run+0x2b6>
	else if( ((4+Pos.Car-car)%4) == 2)		//行きたい方向が現在の進行方向と逆の場合
 800cb4e:	f000 0c03 	and.w	ip, r0, #3
 800cb52:	f1bc 0c02 	subs.w	ip, ip, #2
 800cb56:	bf18      	it	ne
 800cb58:	f04f 0c01 	movne.w	ip, #1
	if((Wall[x][y].north == UNKNOWN) || (Wall[x][y].east == UNKNOWN) || (Wall[x][y].south == UNKNOWN) || (Wall[x][y].west == UNKNOWN))
 800cb5c:	eb03 0802 	add.w	r8, r3, r2
 800cb60:	44c8      	add	r8, r9
 800cb62:	f815 8018 	ldrb.w	r8, [r5, r8, lsl #1]
 800cb66:	f008 0a03 	and.w	sl, r8, #3
 800cb6a:	f1ba 0f02 	cmp.w	sl, #2
 800cb6e:	d059      	beq.n	800cc24 <fast_run+0x24c>
 800cb70:	f3c8 0a81 	ubfx	sl, r8, #2, #2
 800cb74:	f1ba 0f02 	cmp.w	sl, #2
 800cb78:	d054      	beq.n	800cc24 <fast_run+0x24c>
 800cb7a:	f3c8 1a01 	ubfx	sl, r8, #4, #2
 800cb7e:	f1ba 0f02 	cmp.w	sl, #2
 800cb82:	d04f      	beq.n	800cc24 <fast_run+0x24c>
 800cb84:	ea4f 1898 	mov.w	r8, r8, lsr #6
 800cb88:	f1b8 0f02 	cmp.w	r8, #2
 800cb8c:	d04a      	beq.n	800cc24 <fast_run+0x24c>
		if(walk_map[Pos.X][Pos.Y - 1] < little)				//一番歩数が小さい方向を見つける
 800cb8e:	eb03 0802 	add.w	r8, r3, r2
 800cb92:	4e49      	ldr	r6, [pc, #292]	; (800ccb8 <fast_run+0x2e0>)
 800cb94:	44c1      	add	r9, r8
 800cb96:	f836 8019 	ldrh.w	r8, [r6, r9, lsl #1]
 800cb9a:	9e01      	ldr	r6, [sp, #4]
 800cb9c:	45b0      	cmp	r8, r6
 800cb9e:	da63      	bge.n	800cc68 <fast_run+0x290>
			Pos.NextCar = south;						//方向を保存
 800cba0:	f04f 0c04 	mov.w	ip, #4
 800cba4:	f8cd 8004 	str.w	r8, [sp, #4]
 800cba8:	f884 c00b 	strb.w	ip, [r4, #11]
	if( (Wall[Pos.X][Pos.Y].west & mask) == NOWALL)			//西に壁がなければ
 800cbac:	4413      	add	r3, r2
 800cbae:	440b      	add	r3, r1
 800cbb0:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 800cbb4:	ea17 1393 	ands.w	r3, r7, r3, lsr #6
 800cbb8:	d10b      	bne.n	800cbd2 <fast_run+0x1fa>
		if(walk_map[Pos.X-1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800cbba:	f102 3cff 	add.w	ip, r2, #4294967295
 800cbbe:	eb0c 03cc 	add.w	r3, ip, ip, lsl #3
 800cbc2:	4e3d      	ldr	r6, [pc, #244]	; (800ccb8 <fast_run+0x2e0>)
 800cbc4:	440b      	add	r3, r1
 800cbc6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800cbca:	9e01      	ldr	r6, [sp, #4]
 800cbcc:	42b3      	cmp	r3, r6
 800cbce:	db32      	blt.n	800cc36 <fast_run+0x25e>
		else if(walk_map[Pos.X - 1][Pos.Y] == little)			//歩数が同じ場合、優先度で評価
 800cbd0:	d031      	beq.n	800cc36 <fast_run+0x25e>
	return ( (int)( ( 4 + Pos.NextCar - Pos.Car) % 4 ) );			//どっちに向かうべきかを返す。
 800cbd2:	7ae3      	ldrb	r3, [r4, #11]
 800cbd4:	1d1e      	adds	r6, r3, #4
 800cbd6:	1a30      	subs	r0, r6, r0
 800cbd8:	4246      	negs	r6, r0
 800cbda:	f006 0603 	and.w	r6, r6, #3
 800cbde:	f000 0003 	and.w	r0, r0, #3
 800cbe2:	bf58      	it	pl
 800cbe4:	4270      	negpl	r0, r6
		Pos.Dir = get_nextdir(x,y,mask);//新しい区画に入ったところで、次の方向を求める。方向と方角がわかる。
 800cbe6:	7120      	strb	r0, [r4, #4]
		//向いた方向によって自分の座標を更新する
		//printf("%d,%d\r\n",Pos.X,Pos.Y);
		switch(Pos.NextCar)//
 800cbe8:	2b06      	cmp	r3, #6
 800cbea:	d808      	bhi.n	800cbfe <fast_run+0x226>
 800cbec:	e8df f003 	tbb	[pc, r3]
 800cbf0:	07160712 	.word	0x07160712
 800cbf4:	0704      	.short	0x0704
 800cbf6:	5c          	.byte	0x5c
 800cbf7:	00          	.byte	0x00
				Pos.NextY = Pos.Y;
				break;

			case south:
				Pos.NextX = Pos.X;
				Pos.NextY = Pos.Y - 1;	//南を向いた時はY座標を減らす
 800cbf8:	3901      	subs	r1, #1
 800cbfa:	7261      	strb	r1, [r4, #9]
				Pos.NextX = Pos.X;
 800cbfc:	7222      	strb	r2, [r4, #8]
				Pos.NextX = Pos.X - 1;	//西を向いたときはX座標を減らす
				Pos.NextY = Pos.Y;
				break;

		}
		SelectAction(turn_mode);
 800cbfe:	9803      	ldr	r0, [sp, #12]
 800cc00:	f7fd fa2e 	bl	800a060 <SelectAction>
	 	Pos.X = Pos.NextX;
	    Pos.Y = Pos.NextY;
		Pos.Car = Pos.NextCar;	//自分の向きを修正
 800cc04:	7ae3      	ldrb	r3, [r4, #11]
	 	Pos.X = Pos.NextX;
 800cc06:	7a26      	ldrb	r6, [r4, #8]
	    Pos.Y = Pos.NextY;
 800cc08:	7a62      	ldrb	r2, [r4, #9]
		Pos.Car = Pos.NextCar;	//自分の向きを修正
 800cc0a:	7163      	strb	r3, [r4, #5]
	 	Pos.X = Pos.NextX;
 800cc0c:	7026      	strb	r6, [r4, #0]
	    Pos.Y = Pos.NextY;
 800cc0e:	7062      	strb	r2, [r4, #1]
 800cc10:	9b02      	ldr	r3, [sp, #8]
 800cc12:	e6f2      	b.n	800c9fa <fast_run+0x22>
				Pos.NextY = Pos.Y + 1;	//北を向いた時はY座標を増やす
 800cc14:	3101      	adds	r1, #1
 800cc16:	7261      	strb	r1, [r4, #9]
				Pos.NextX = Pos.X;
 800cc18:	7222      	strb	r2, [r4, #8]
				break;
 800cc1a:	e7f0      	b.n	800cbfe <fast_run+0x226>
				Pos.NextX = Pos.X + 1;	//東を向いた時はX座標を増やす
 800cc1c:	3201      	adds	r2, #1
 800cc1e:	7222      	strb	r2, [r4, #8]
				Pos.NextY = Pos.Y;
 800cc20:	7261      	strb	r1, [r4, #9]
				break;
 800cc22:	e7ec      	b.n	800cbfe <fast_run+0x226>
		priority += 4;				//未探索の場合優先度をさらに付加
 800cc24:	f10c 0c04 	add.w	ip, ip, #4
 800cc28:	e7b1      	b.n	800cb8e <fast_run+0x1b6>
 800cc2a:	f10e 0e04 	add.w	lr, lr, #4
 800cc2e:	e729      	b.n	800ca84 <fast_run+0xac>
 800cc30:	f108 0804 	add.w	r8, r8, #4
 800cc34:	e76c      	b.n	800cb10 <fast_run+0x138>
	return ( (int)( ( 4 + Pos.NextCar - Pos.Car) % 4 ) );			//どっちに向かうべきかを返す。
 800cc36:	f1c0 000a 	rsb	r0, r0, #10
 800cc3a:	4243      	negs	r3, r0
 800cc3c:	f003 0303 	and.w	r3, r3, #3
 800cc40:	f000 0003 	and.w	r0, r0, #3
 800cc44:	bf58      	it	pl
 800cc46:	4258      	negpl	r0, r3
			Pos.NextCar = west;						//方向を保存
 800cc48:	2306      	movs	r3, #6
		Pos.Dir = get_nextdir(x,y,mask);//新しい区画に入ったところで、次の方向を求める。方向と方角がわかる。
 800cc4a:	7120      	strb	r0, [r4, #4]
			Pos.NextCar = west;						//方向を保存
 800cc4c:	72e3      	strb	r3, [r4, #11]
				Pos.NextX = Pos.X - 1;	//西を向いたときはX座標を減らす
 800cc4e:	f884 c008 	strb.w	ip, [r4, #8]
				Pos.NextY = Pos.Y;
 800cc52:	7261      	strb	r1, [r4, #9]
				break;
 800cc54:	e7d3      	b.n	800cbfe <fast_run+0x226>
			if(priority < tmp_priority )				//優先度を評価
 800cc56:	f1be 0f00 	cmp.w	lr, #0
 800cc5a:	d020      	beq.n	800cc9e <fast_run+0x2c6>
				Pos.NextCar = north;					//方向を更新
 800cc5c:	f04f 0c00 	mov.w	ip, #0
	little = 255;					//最小歩数を255歩(mapがunsigned char型なので)に設定
 800cc60:	9601      	str	r6, [sp, #4]
				Pos.NextCar = north;					//方向を更新
 800cc62:	f884 c00b 	strb.w	ip, [r4, #11]
 800cc66:	e71c      	b.n	800caa2 <fast_run+0xca>
		else if(walk_map[Pos.X][Pos.Y - 1] == little)			//歩数が同じ場合、優先度で評価
 800cc68:	d1a0      	bne.n	800cbac <fast_run+0x1d4>
			if(priority < tmp_priority)				//優先度を評価
 800cc6a:	45e6      	cmp	lr, ip
				Pos.NextCar = south;					//方向を保存
 800cc6c:	bfbc      	itt	lt
 800cc6e:	f04f 0c04 	movlt.w	ip, #4
 800cc72:	f884 c00b 	strblt.w	ip, [r4, #11]
 800cc76:	e799      	b.n	800cbac <fast_run+0x1d4>
		else if(walk_map[Pos.X + 1][Pos.Y] == little)			//歩数が同じ場合、優先度から判断
 800cc78:	f47f af5a 	bne.w	800cb30 <fast_run+0x158>
			if(priority < tmp_priority)				//優先度を評価
 800cc7c:	45c6      	cmp	lr, r8
 800cc7e:	f6bf af57 	bge.w	800cb30 <fast_run+0x158>
				Pos.NextCar = east;					//方向を保存
 800cc82:	f04f 0c02 	mov.w	ip, #2
 800cc86:	46c6      	mov	lr, r8
 800cc88:	f884 c00b 	strb.w	ip, [r4, #11]
 800cc8c:	e750      	b.n	800cb30 <fast_run+0x158>
		priority = 2;
 800cc8e:	f04f 0c02 	mov.w	ip, #2
 800cc92:	e763      	b.n	800cb5c <fast_run+0x184>
 800cc94:	f04f 0e02 	mov.w	lr, #2
 800cc98:	e6da      	b.n	800ca50 <fast_run+0x78>
 800cc9a:	4680      	mov	r8, r0
 800cc9c:	e719      	b.n	800cad2 <fast_run+0xfa>
	little = 255;					//最小歩数を255歩(mapがunsigned char型なので)に設定
 800cc9e:	9601      	str	r6, [sp, #4]
 800cca0:	e6ff      	b.n	800caa2 <fast_run+0xca>
//		Pos.Car = Pos.NextCar;	//自分の向きを修正
//
//
	}
//	straight(SECTION*straight_count,FAST_ACCEL,FAST_SPEED,0.0);
}
 800cca2:	b009      	add	sp, #36	; 0x24
 800cca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca8:	f102 3cff 	add.w	ip, r2, #4294967295
 800ccac:	e7cf      	b.n	800cc4e <fast_run+0x276>
 800ccae:	bf00      	nop
 800ccb0:	20000000 	.word	0x20000000
 800ccb4:	20004a94 	.word	0x20004a94
 800ccb8:	2000491c 	.word	0x2000491c

0800ccbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ccbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccc0:	2400      	movs	r4, #0
{
 800ccc2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccc4:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800ccc8:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cccc:	4b45      	ldr	r3, [pc, #276]	; (800cde4 <MX_GPIO_Init+0x128>)
 800ccce:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccd0:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ccd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800ccd4:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800cdf4 <MX_GPIO_Init+0x138>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800ccd8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800cdf8 <MX_GPIO_Init+0x13c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800ccdc:	4f42      	ldr	r7, [pc, #264]	; (800cde8 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ccde:	4e43      	ldr	r6, [pc, #268]	; (800cdec <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cce4:	631a      	str	r2, [r3, #48]	; 0x30
 800cce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cce8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800ccec:	9200      	str	r2, [sp, #0]
 800ccee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ccf0:	9401      	str	r4, [sp, #4]
 800ccf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccf4:	f042 0204 	orr.w	r2, r2, #4
 800ccf8:	631a      	str	r2, [r3, #48]	; 0x30
 800ccfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccfc:	f002 0204 	and.w	r2, r2, #4
 800cd00:	9201      	str	r2, [sp, #4]
 800cd02:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd04:	9402      	str	r4, [sp, #8]
 800cd06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd08:	f042 0201 	orr.w	r2, r2, #1
 800cd0c:	631a      	str	r2, [r3, #48]	; 0x30
 800cd0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd10:	f002 0201 	and.w	r2, r2, #1
 800cd14:	9202      	str	r2, [sp, #8]
 800cd16:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd18:	9403      	str	r4, [sp, #12]
 800cd1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd1c:	f042 0202 	orr.w	r2, r2, #2
 800cd20:	631a      	str	r2, [r3, #48]	; 0x30
 800cd22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd24:	f002 0202 	and.w	r2, r2, #2
 800cd28:	9203      	str	r2, [sp, #12]
 800cd2a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cd2c:	9404      	str	r4, [sp, #16]
 800cd2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd30:	f042 0208 	orr.w	r2, r2, #8
 800cd34:	631a      	str	r2, [r3, #48]	; 0x30
 800cd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd38:	f003 0308 	and.w	r3, r3, #8
 800cd3c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800cd3e:	4622      	mov	r2, r4
 800cd40:	4648      	mov	r0, r9
 800cd42:	2105      	movs	r1, #5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cd44:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800cd46:	f002 ff55 	bl	800fbf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800cd4a:	4622      	mov	r2, r4
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	f44f 7140 	mov.w	r1, #768	; 0x300
 800cd52:	f002 ff4f 	bl	800fbf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800cd56:	4622      	mov	r2, r4
 800cd58:	4638      	mov	r0, r7
 800cd5a:	2104      	movs	r1, #4
 800cd5c:	f002 ff4a 	bl	800fbf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800cd60:	4622      	mov	r2, r4
 800cd62:	4630      	mov	r0, r6
 800cd64:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd68:	f002 ff44 	bl	800fbf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd6c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd6e:	4648      	mov	r0, r9
 800cd70:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800cd72:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd74:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd78:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd7c:	f002 fe36 	bl	800f9ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cd80:	4b1b      	ldr	r3, [pc, #108]	; (800cdf0 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd82:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cd84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd88:	a905      	add	r1, sp, #20
 800cd8a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cd8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd90:	f002 fe2c 	bl	800f9ec <HAL_GPIO_Init>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd94:	4640      	mov	r0, r8
 800cd96:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800cd98:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cd9c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd9e:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cda2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cda4:	f002 fe22 	bl	800f9ec <HAL_GPIO_Init>
  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cda8:	4638      	mov	r0, r7
 800cdaa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cdac:	2304      	movs	r3, #4
 800cdae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdb0:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdb4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cdb6:	f002 fe19 	bl	800f9ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cdba:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cdbe:	a905      	add	r1, sp, #20
 800cdc0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cdc2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdc4:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdc8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cdca:	f002 fe0f 	bl	800f9ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800cdce:	4622      	mov	r2, r4
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	2028      	movs	r0, #40	; 0x28
 800cdd4:	f002 fa8a 	bl	800f2ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800cdd8:	2028      	movs	r0, #40	; 0x28
 800cdda:	f002 fabd 	bl	800f358 <HAL_NVIC_EnableIRQ>

}
 800cdde:	b00b      	add	sp, #44	; 0x2c
 800cde0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cde4:	40023800 	.word	0x40023800
 800cde8:	40020c00 	.word	0x40020c00
 800cdec:	40020400 	.word	0x40020400
 800cdf0:	10110000 	.word	0x10110000
 800cdf4:	40020000 	.word	0x40020000
 800cdf8:	40020800 	.word	0x40020800

0800cdfc <MX_DMA_Init>:
{
 800cdfc:	b510      	push	{r4, lr}
 800cdfe:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ce00:	2400      	movs	r4, #0
 800ce02:	4b0f      	ldr	r3, [pc, #60]	; (800ce40 <MX_DMA_Init+0x44>)
 800ce04:	9401      	str	r4, [sp, #4]
 800ce06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce08:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ce0c:	631a      	str	r2, [r3, #48]	; 0x30
 800ce0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800ce14:	4622      	mov	r2, r4
 800ce16:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ce18:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800ce1a:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ce1c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800ce1e:	f002 fa65 	bl	800f2ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800ce22:	2038      	movs	r0, #56	; 0x38
 800ce24:	f002 fa98 	bl	800f358 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800ce28:	4622      	mov	r2, r4
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	203a      	movs	r0, #58	; 0x3a
 800ce2e:	f002 fa5d 	bl	800f2ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800ce32:	203a      	movs	r0, #58	; 0x3a
}
 800ce34:	b002      	add	sp, #8
 800ce36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800ce3a:	f002 ba8d 	b.w	800f358 <HAL_NVIC_EnableIRQ>
 800ce3e:	bf00      	nop
 800ce40:	40023800 	.word	0x40023800

0800ce44 <MX_ADC1_Init>:
{
 800ce44:	b570      	push	{r4, r5, r6, lr}
  hadc1.Instance = ADC1;
 800ce46:	4c21      	ldr	r4, [pc, #132]	; (800cecc <MX_ADC1_Init+0x88>)
 800ce48:	4b21      	ldr	r3, [pc, #132]	; (800ced0 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ce4a:	4a22      	ldr	r2, [pc, #136]	; (800ced4 <MX_ADC1_Init+0x90>)
  hadc1.Instance = ADC1;
 800ce4c:	6023      	str	r3, [r4, #0]
{
 800ce4e:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800ce50:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800ce52:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ce54:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc1.Init.NbrOfConversion = 3;
 800ce58:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ce5a:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ce5c:	6061      	str	r1, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ce5e:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ce60:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800ce62:	9300      	str	r3, [sp, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ce64:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ce68:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ce6a:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800ce6c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800ce70:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 800ce72:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800ce74:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800ce76:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ce7a:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 3;
 800ce7c:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ce7e:	f001 ffa9 	bl	800edd4 <HAL_ADC_Init>
 800ce82:	b108      	cbz	r0, 800ce88 <MX_ADC1_Init+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ce84:	b672      	cpsid	i
 800ce86:	e7fe      	b.n	800ce86 <MX_ADC1_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_10;
 800ce88:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ce8a:	4669      	mov	r1, sp
 800ce8c:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800ce8e:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800ce90:	9602      	str	r6, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_10;
 800ce92:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ce94:	f002 f970 	bl	800f178 <HAL_ADC_ConfigChannel>
 800ce98:	b108      	cbz	r0, 800ce9e <MX_ADC1_Init+0x5a>
 800ce9a:	b672      	cpsid	i
 800ce9c:	e7fe      	b.n	800ce9c <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_14;
 800ce9e:	220e      	movs	r2, #14
  sConfig.Rank = 2;
 800cea0:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cea2:	4669      	mov	r1, sp
 800cea4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 800cea6:	9200      	str	r2, [sp, #0]
  sConfig.Rank = 2;
 800cea8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ceaa:	f002 f965 	bl	800f178 <HAL_ADC_ConfigChannel>
 800ceae:	b108      	cbz	r0, 800ceb4 <MX_ADC1_Init+0x70>
 800ceb0:	b672      	cpsid	i
 800ceb2:	e7fe      	b.n	800ceb2 <MX_ADC1_Init+0x6e>
  sConfig.Channel = ADC_CHANNEL_9;
 800ceb4:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ceb6:	4669      	mov	r1, sp
 800ceb8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800ceba:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cebe:	f002 f95b 	bl	800f178 <HAL_ADC_ConfigChannel>
 800cec2:	b108      	cbz	r0, 800cec8 <MX_ADC1_Init+0x84>
 800cec4:	b672      	cpsid	i
 800cec6:	e7fe      	b.n	800cec6 <MX_ADC1_Init+0x82>
}
 800cec8:	b004      	add	sp, #16
 800ceca:	bd70      	pop	{r4, r5, r6, pc}
 800cecc:	20004ca0 	.word	0x20004ca0
 800ced0:	40012000 	.word	0x40012000
 800ced4:	0f000001 	.word	0x0f000001

0800ced8 <MX_ADC2_Init>:
{
 800ced8:	b570      	push	{r4, r5, r6, lr}
  hadc2.Instance = ADC2;
 800ceda:	4c1c      	ldr	r4, [pc, #112]	; (800cf4c <MX_ADC2_Init+0x74>)
 800cedc:	4b1c      	ldr	r3, [pc, #112]	; (800cf50 <MX_ADC2_Init+0x78>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cede:	4a1d      	ldr	r2, [pc, #116]	; (800cf54 <MX_ADC2_Init+0x7c>)
  hadc2.Instance = ADC2;
 800cee0:	6023      	str	r3, [r4, #0]
{
 800cee2:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800cee4:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ENABLE;
 800cee6:	2501      	movs	r5, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800cee8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc2.Init.NbrOfConversion = 2;
 800ceec:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800ceee:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800cef0:	6061      	str	r1, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cef2:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800cef4:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800cef6:	9300      	str	r3, [sp, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800cef8:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cefc:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cefe:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800cf00:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800cf04:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ENABLE;
 800cf06:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800cf08:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800cf0a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cf0e:	6165      	str	r5, [r4, #20]
  hadc2.Init.NbrOfConversion = 2;
 800cf10:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800cf12:	f001 ff5f 	bl	800edd4 <HAL_ADC_Init>
 800cf16:	b108      	cbz	r0, 800cf1c <MX_ADC2_Init+0x44>
 800cf18:	b672      	cpsid	i
 800cf1a:	e7fe      	b.n	800cf1a <MX_ADC2_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_11;
 800cf1c:	220b      	movs	r2, #11
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800cf1e:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800cf20:	4669      	mov	r1, sp
 800cf22:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800cf24:	9501      	str	r5, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_11;
 800cf26:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800cf28:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800cf2a:	f002 f925 	bl	800f178 <HAL_ADC_ConfigChannel>
 800cf2e:	b108      	cbz	r0, 800cf34 <MX_ADC2_Init+0x5c>
 800cf30:	b672      	cpsid	i
 800cf32:	e7fe      	b.n	800cf32 <MX_ADC2_Init+0x5a>
  sConfig.Channel = ADC_CHANNEL_15;
 800cf34:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800cf36:	4669      	mov	r1, sp
 800cf38:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_15;
 800cf3a:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800cf3e:	f002 f91b 	bl	800f178 <HAL_ADC_ConfigChannel>
 800cf42:	b108      	cbz	r0, 800cf48 <MX_ADC2_Init+0x70>
 800cf44:	b672      	cpsid	i
 800cf46:	e7fe      	b.n	800cf46 <MX_ADC2_Init+0x6e>
}
 800cf48:	b004      	add	sp, #16
 800cf4a:	bd70      	pop	{r4, r5, r6, pc}
 800cf4c:	20004bc0 	.word	0x20004bc0
 800cf50:	40012100 	.word	0x40012100
 800cf54:	0f000001 	.word	0x0f000001

0800cf58 <MX_TIM3_Init>:
{
 800cf58:	b530      	push	{r4, r5, lr}
 800cf5a:	b08d      	sub	sp, #52	; 0x34
  htim3.Instance = TIM3;
 800cf5c:	4c14      	ldr	r4, [pc, #80]	; (800cfb0 <MX_TIM3_Init+0x58>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 800cf5e:	2220      	movs	r2, #32
 800cf60:	2100      	movs	r1, #0
 800cf62:	a804      	add	r0, sp, #16
 800cf64:	f005 f9d3 	bl	801230e <memset>
  htim3.Instance = TIM3;
 800cf68:	4b12      	ldr	r3, [pc, #72]	; (800cfb4 <MX_TIM3_Init+0x5c>)
 800cf6a:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 60000-1;
 800cf6c:	f64e 225f 	movw	r2, #59999	; 0xea5f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cf70:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800cf72:	2503      	movs	r5, #3
  htim3.Init.Period = 60000-1;
 800cf74:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800cf76:	4620      	mov	r0, r4
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800cf78:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800cf7a:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 800cf7c:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cf7e:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf80:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cf82:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cf84:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cf86:	9302      	str	r3, [sp, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800cf88:	9503      	str	r5, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800cf8a:	9205      	str	r2, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800cf8c:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800cf8e:	f004 f82f 	bl	8010ff0 <HAL_TIM_Encoder_Init>
 800cf92:	b108      	cbz	r0, 800cf98 <MX_TIM3_Init+0x40>
 800cf94:	b672      	cpsid	i
 800cf96:	e7fe      	b.n	800cf96 <MX_TIM3_Init+0x3e>
 800cf98:	4603      	mov	r3, r0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800cf9a:	a901      	add	r1, sp, #4
 800cf9c:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf9e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800cfa2:	f004 fce9 	bl	8011978 <HAL_TIMEx_MasterConfigSynchronization>
 800cfa6:	b108      	cbz	r0, 800cfac <MX_TIM3_Init+0x54>
 800cfa8:	b672      	cpsid	i
 800cfaa:	e7fe      	b.n	800cfaa <MX_TIM3_Init+0x52>
}
 800cfac:	b00d      	add	sp, #52	; 0x34
 800cfae:	bd30      	pop	{r4, r5, pc}
 800cfb0:	20004c08 	.word	0x20004c08
 800cfb4:	40000400 	.word	0x40000400

0800cfb8 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800cfb8:	b500      	push	{lr}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800cfbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 800cfc2:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	4803      	ldr	r0, [pc, #12]	; (800cfd8 <__io_putchar+0x20>)
 800cfca:	f004 fdeb 	bl	8011ba4 <HAL_UART_Transmit>
}
 800cfce:	9801      	ldr	r0, [sp, #4]
 800cfd0:	b003      	add	sp, #12
 800cfd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfd6:	bf00      	nop
 800cfd8:	20004ce8 	.word	0x20004ce8

0800cfdc <__io_getchar>:
int __io_getchar(void) {
 800cfdc:	b510      	push	{r4, lr}
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800cfde:	4c07      	ldr	r4, [pc, #28]	; (800cffc <__io_getchar+0x20>)
int __io_getchar(void) {
 800cfe0:	b082      	sub	sp, #8
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800cfe2:	230a      	movs	r3, #10
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	f10d 0107 	add.w	r1, sp, #7
 800cfea:	4620      	mov	r0, r4
 800cfec:	f004 fe68 	bl	8011cc0 <HAL_UART_Receive>
while(Status != HAL_OK)
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d1f6      	bne.n	800cfe2 <__io_getchar+0x6>
}
 800cff4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800cff8:	b002      	add	sp, #8
 800cffa:	bd10      	pop	{r4, pc}
 800cffc:	20004ce8 	.word	0x20004ce8

0800d000 <SystemClock_Config>:
{
 800d000:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d002:	2300      	movs	r3, #0
{
 800d004:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d006:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800d00a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d00e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d012:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d016:	4920      	ldr	r1, [pc, #128]	; (800d098 <SystemClock_Config+0x98>)
 800d018:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d01a:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d01c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d01e:	4a1f      	ldr	r2, [pc, #124]	; (800d09c <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800d020:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800d024:	6408      	str	r0, [r1, #64]	; 0x40
 800d026:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d028:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800d02c:	9101      	str	r1, [sp, #4]
 800d02e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d030:	9302      	str	r3, [sp, #8]
 800d032:	6813      	ldr	r3, [r2, #0]
 800d034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d038:	6013      	str	r3, [r2, #0]
 800d03a:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d03c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d044:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d046:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d048:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d04a:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d04c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d050:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d052:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d054:	22a8      	movs	r2, #168	; 0xa8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d056:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d058:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d05a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d05c:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d05e:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d062:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d064:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d066:	f002 fdd5 	bl	800fc14 <HAL_RCC_OscConfig>
 800d06a:	b108      	cbz	r0, 800d070 <SystemClock_Config+0x70>
 800d06c:	b672      	cpsid	i
 800d06e:	e7fe      	b.n	800d06e <SystemClock_Config+0x6e>
 800d070:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d072:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d074:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d07c:	a803      	add	r0, sp, #12
 800d07e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d080:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d082:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d084:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d086:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d08a:	f002 ffd7 	bl	801003c <HAL_RCC_ClockConfig>
 800d08e:	b108      	cbz	r0, 800d094 <SystemClock_Config+0x94>
 800d090:	b672      	cpsid	i
 800d092:	e7fe      	b.n	800d092 <SystemClock_Config+0x92>
}
 800d094:	b014      	add	sp, #80	; 0x50
 800d096:	bd70      	pop	{r4, r5, r6, pc}
 800d098:	40023800 	.word	0x40023800
 800d09c:	40007000 	.word	0x40007000

0800d0a0 <main>:
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 800d0a4:	f001 fe58 	bl	800ed58 <HAL_Init>
  MX_GPIO_Init();
 800d0a8:	f7ff fe08 	bl	800ccbc <MX_GPIO_Init>
  MX_DMA_Init();
 800d0ac:	f7ff fea6 	bl	800cdfc <MX_DMA_Init>
  MX_ADC1_Init();
 800d0b0:	f7ff fec8 	bl	800ce44 <MX_ADC1_Init>
  MX_ADC2_Init();
 800d0b4:	f7ff ff10 	bl	800ced8 <MX_ADC2_Init>
  ADCStart();
 800d0b8:	f000 fe92 	bl	800dde0 <ADCStart>
  BatteryCheck( (int)adc1[2] );
 800d0bc:	4ba0      	ldr	r3, [pc, #640]	; (800d340 <main+0x2a0>)
  htim2.Instance = TIM2;
 800d0be:	4ca1      	ldr	r4, [pc, #644]	; (800d344 <main+0x2a4>)
  BatteryCheck( (int)adc1[2] );
 800d0c0:	6898      	ldr	r0, [r3, #8]
 800d0c2:	f001 fd31 	bl	800eb28 <BatteryCheck>
  ADCStop();
 800d0c6:	f000 fea9 	bl	800de1c <ADCStop>
  MX_TIM3_Init();
 800d0ca:	f7ff ff45 	bl	800cf58 <MX_TIM3_Init>
  ModeSelect(0, 7, &startup_mode);
 800d0ce:	f10d 0207 	add.w	r2, sp, #7
 800d0d2:	2107      	movs	r1, #7
 800d0d4:	2000      	movs	r0, #0
 800d0d6:	f001 fd8f 	bl	800ebf8 <ModeSelect>
  Signal( startup_mode );
 800d0da:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800d0de:	f001 fd11 	bl	800eb04 <Signal>
  htim2.Init.Period = 4200-1;
 800d0e2:	f241 0567 	movw	r5, #4199	; 0x1067
  SystemClock_Config();
 800d0e6:	f7ff ff8b 	bl	800d000 <SystemClock_Config>
  MX_GPIO_Init();
 800d0ea:	f7ff fde7 	bl	800ccbc <MX_GPIO_Init>
  MX_DMA_Init();
 800d0ee:	f7ff fe85 	bl	800cdfc <MX_DMA_Init>
  MX_ADC1_Init();
 800d0f2:	f7ff fea7 	bl	800ce44 <MX_ADC1_Init>
  MX_ADC2_Init();
 800d0f6:	f7ff feef 	bl	800ced8 <MX_ADC2_Init>
  MX_TIM3_Init();
 800d0fa:	f7ff ff2d 	bl	800cf58 <MX_TIM3_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d0fe:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800d100:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d104:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800d106:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 0;
 800d108:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d10a:	9308      	str	r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d10c:	9304      	str	r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d10e:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d110:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d112:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d114:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d116:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800d11a:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d11c:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d11e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800d122:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800d126:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  htim2.Init.Period = 4200-1;
 800d12a:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d12c:	f003 fca8 	bl	8010a80 <HAL_TIM_Base_Init>
 800d130:	b108      	cbz	r0, 800d136 <main+0x96>
 800d132:	b672      	cpsid	i
 800d134:	e7fe      	b.n	800d134 <main+0x94>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d136:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d13a:	a908      	add	r1, sp, #32
 800d13c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d13e:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d140:	f004 fa44 	bl	80115cc <HAL_TIM_ConfigClockSource>
 800d144:	b108      	cbz	r0, 800d14a <main+0xaa>
 800d146:	b672      	cpsid	i
 800d148:	e7fe      	b.n	800d148 <main+0xa8>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d14a:	4620      	mov	r0, r4
 800d14c:	f003 fe68 	bl	8010e20 <HAL_TIM_PWM_Init>
 800d150:	4603      	mov	r3, r0
 800d152:	b108      	cbz	r0, 800d158 <main+0xb8>
 800d154:	b672      	cpsid	i
 800d156:	e7fe      	b.n	800d156 <main+0xb6>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d158:	a904      	add	r1, sp, #16
 800d15a:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d15c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d160:	f004 fc0a 	bl	8011978 <HAL_TIMEx_MasterConfigSynchronization>
 800d164:	b108      	cbz	r0, 800d16a <main+0xca>
 800d166:	b672      	cpsid	i
 800d168:	e7fe      	b.n	800d168 <main+0xc8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d16a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d16c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d170:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d172:	220c      	movs	r2, #12
 800d174:	a90f      	add	r1, sp, #60	; 0x3c
 800d176:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d178:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d17a:	f004 f91d 	bl	80113b8 <HAL_TIM_PWM_ConfigChannel>
 800d17e:	4607      	mov	r7, r0
 800d180:	b108      	cbz	r0, 800d186 <main+0xe6>
 800d182:	b672      	cpsid	i
 800d184:	e7fe      	b.n	800d184 <main+0xe4>
  HAL_TIM_MspPostInit(&htim2);
 800d186:	4620      	mov	r0, r4
 800d188:	f000 fb72 	bl	800d870 <HAL_TIM_MspPostInit>
  hspi3.Instance = SPI3;
 800d18c:	4b6e      	ldr	r3, [pc, #440]	; (800d348 <main+0x2a8>)
 800d18e:	4a6f      	ldr	r2, [pc, #444]	; (800d34c <main+0x2ac>)
 800d190:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800d192:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800d196:	2202      	movs	r2, #2
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800d198:	6059      	str	r1, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800d19a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800d19c:	2101      	movs	r1, #1
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800d19e:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800d1a2:	6159      	str	r1, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800d1a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800d1a6:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800d1a8:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800d1aa:	4618      	mov	r0, r3
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800d1ac:	e9c3 7702 	strd	r7, r7, [r3, #8]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800d1b0:	e9c3 7708 	strd	r7, r7, [r3, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1b4:	629f      	str	r7, [r3, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800d1b6:	61d9      	str	r1, [r3, #28]
  hspi3.Init.CRCPolynomial = 10;
 800d1b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800d1ba:	f002 fffd 	bl	80101b8 <HAL_SPI_Init>
 800d1be:	b108      	cbz	r0, 800d1c4 <main+0x124>
 800d1c0:	b672      	cpsid	i
 800d1c2:	e7fe      	b.n	800d1c2 <main+0x122>
  huart1.Instance = USART1;
 800d1c4:	4b62      	ldr	r3, [pc, #392]	; (800d350 <main+0x2b0>)
 800d1c6:	4a63      	ldr	r2, [pc, #396]	; (800d354 <main+0x2b4>)
  huart1.Init.Parity = UART_PARITY_NONE;
 800d1c8:	6118      	str	r0, [r3, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d1ca:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d1ce:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart1.Instance = USART1;
 800d1d2:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d1d4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d1d8:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d1da:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 800d1dc:	6059      	str	r1, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d1de:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d1e0:	f004 fc3e 	bl	8011a60 <HAL_UART_Init>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	b108      	cbz	r0, 800d1ec <main+0x14c>
 800d1e8:	b672      	cpsid	i
 800d1ea:	e7fe      	b.n	800d1ea <main+0x14a>
  htim5.Instance = TIM5;
 800d1ec:	4c5a      	ldr	r4, [pc, #360]	; (800d358 <main+0x2b8>)
 800d1ee:	4a5b      	ldr	r2, [pc, #364]	; (800d35c <main+0x2bc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d1f0:	9015      	str	r0, [sp, #84]	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d1f2:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800d1f6:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d1fa:	e9cd 0004 	strd	r0, r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d1fe:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 800d202:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 800d206:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d20a:	e9c4 0001 	strd	r0, r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800d20e:	4620      	mov	r0, r4
  htim5.Init.Period = 4200-1;
 800d210:	60e5      	str	r5, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d212:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d214:	61a3      	str	r3, [r4, #24]
  htim5.Instance = TIM5;
 800d216:	6022      	str	r2, [r4, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800d218:	f003 fc32 	bl	8010a80 <HAL_TIM_Base_Init>
 800d21c:	b108      	cbz	r0, 800d222 <main+0x182>
 800d21e:	b672      	cpsid	i
 800d220:	e7fe      	b.n	800d220 <main+0x180>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800d222:	a908      	add	r1, sp, #32
 800d224:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d226:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800d228:	f004 f9d0 	bl	80115cc <HAL_TIM_ConfigClockSource>
 800d22c:	b108      	cbz	r0, 800d232 <main+0x192>
 800d22e:	b672      	cpsid	i
 800d230:	e7fe      	b.n	800d230 <main+0x190>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800d232:	4620      	mov	r0, r4
 800d234:	f003 fdf4 	bl	8010e20 <HAL_TIM_PWM_Init>
 800d238:	b108      	cbz	r0, 800d23e <main+0x19e>
 800d23a:	b672      	cpsid	i
 800d23c:	e7fe      	b.n	800d23c <main+0x19c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d23e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800d240:	a904      	add	r1, sp, #16
 800d242:	4845      	ldr	r0, [pc, #276]	; (800d358 <main+0x2b8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d244:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800d248:	f004 fb96 	bl	8011978 <HAL_TIMEx_MasterConfigSynchronization>
 800d24c:	b108      	cbz	r0, 800d252 <main+0x1b2>
 800d24e:	b672      	cpsid	i
 800d250:	e7fe      	b.n	800d250 <main+0x1b0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d252:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d254:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d258:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d25a:	2204      	movs	r2, #4
 800d25c:	a90f      	add	r1, sp, #60	; 0x3c
 800d25e:	483e      	ldr	r0, [pc, #248]	; (800d358 <main+0x2b8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d260:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d262:	f004 f8a9 	bl	80113b8 <HAL_TIM_PWM_ConfigChannel>
 800d266:	4605      	mov	r5, r0
 800d268:	b108      	cbz	r0, 800d26e <main+0x1ce>
 800d26a:	b672      	cpsid	i
 800d26c:	e7fe      	b.n	800d26c <main+0x1cc>
  HAL_TIM_MspPostInit(&htim5);
 800d26e:	483a      	ldr	r0, [pc, #232]	; (800d358 <main+0x2b8>)
  htim4.Instance = TIM4;
 800d270:	4c3b      	ldr	r4, [pc, #236]	; (800d360 <main+0x2c0>)
  HAL_TIM_MspPostInit(&htim5);
 800d272:	f000 fafd 	bl	800d870 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800d276:	2220      	movs	r2, #32
 800d278:	4629      	mov	r1, r5
 800d27a:	a810      	add	r0, sp, #64	; 0x40
 800d27c:	f005 f847 	bl	801230e <memset>
  htim4.Instance = TIM4;
 800d280:	4b38      	ldr	r3, [pc, #224]	; (800d364 <main+0x2c4>)
 800d282:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 60000-1;
 800d284:	f64e 215f 	movw	r1, #59999	; 0xea5f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d288:	2301      	movs	r3, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d28a:	2203      	movs	r2, #3
  htim4.Init.Period = 60000-1;
 800d28c:	60e1      	str	r1, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800d28e:	4620      	mov	r0, r4
 800d290:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d292:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d294:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d296:	9508      	str	r5, [sp, #32]
 800d298:	9509      	str	r5, [sp, #36]	; 0x24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d29a:	e9c4 5501 	strd	r5, r5, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d29e:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d2a0:	61a5      	str	r5, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d2a2:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800d2a4:	f003 fea4 	bl	8010ff0 <HAL_TIM_Encoder_Init>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	b108      	cbz	r0, 800d2b0 <main+0x210>
 800d2ac:	b672      	cpsid	i
 800d2ae:	e7fe      	b.n	800d2ae <main+0x20e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2b4:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d2b8:	f004 fb5e 	bl	8011978 <HAL_TIMEx_MasterConfigSynchronization>
 800d2bc:	4604      	mov	r4, r0
 800d2be:	b108      	cbz	r0, 800d2c4 <main+0x224>
 800d2c0:	b672      	cpsid	i
 800d2c2:	e7fe      	b.n	800d2c2 <main+0x222>
  htim8.Instance = TIM8;
 800d2c4:	4d28      	ldr	r5, [pc, #160]	; (800d368 <main+0x2c8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d2c6:	9004      	str	r0, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d2c8:	4601      	mov	r1, r0
 800d2ca:	2220      	movs	r2, #32
 800d2cc:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d2ce:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800d2d2:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d2d4:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d2d6:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800d2da:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800d2de:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800d2e2:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d2e4:	9403      	str	r4, [sp, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d2e6:	f005 f812 	bl	801230e <memset>
  htim8.Instance = TIM8;
 800d2ea:	4820      	ldr	r0, [pc, #128]	; (800d36c <main+0x2cc>)
 800d2ec:	6028      	str	r0, [r5, #0]
  htim8.Init.Prescaler = 168-1;
 800d2ee:	21a7      	movs	r1, #167	; 0xa7
  htim8.Init.Period = 50-1;
 800d2f0:	2231      	movs	r2, #49	; 0x31
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d2f2:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800d2f4:	4628      	mov	r0, r5
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2f6:	60ac      	str	r4, [r5, #8]
  htim8.Init.RepetitionCounter = 0;
 800d2f8:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim8.Init.Prescaler = 168-1;
 800d2fc:	6069      	str	r1, [r5, #4]
  htim8.Init.Period = 50-1;
 800d2fe:	60ea      	str	r2, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d300:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800d302:	f003 fbbd 	bl	8010a80 <HAL_TIM_Base_Init>
 800d306:	b108      	cbz	r0, 800d30c <main+0x26c>
 800d308:	b672      	cpsid	i
 800d30a:	e7fe      	b.n	800d30a <main+0x26a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d30c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800d310:	a904      	add	r1, sp, #16
 800d312:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d314:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800d316:	f004 f959 	bl	80115cc <HAL_TIM_ConfigClockSource>
 800d31a:	b108      	cbz	r0, 800d320 <main+0x280>
 800d31c:	b672      	cpsid	i
 800d31e:	e7fe      	b.n	800d31e <main+0x27e>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800d320:	4628      	mov	r0, r5
 800d322:	f003 fc59 	bl	8010bd8 <HAL_TIM_OC_Init>
 800d326:	4603      	mov	r3, r0
 800d328:	b108      	cbz	r0, 800d32e <main+0x28e>
 800d32a:	b672      	cpsid	i
 800d32c:	e7fe      	b.n	800d32c <main+0x28c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d32e:	a902      	add	r1, sp, #8
 800d330:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d332:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d336:	f004 fb1f 	bl	8011978 <HAL_TIMEx_MasterConfigSynchronization>
 800d33a:	b1c8      	cbz	r0, 800d370 <main+0x2d0>
 800d33c:	b672      	cpsid	i
 800d33e:	e7fe      	b.n	800d33e <main+0x29e>
 800d340:	200002bc 	.word	0x200002bc
 800d344:	2000023c 	.word	0x2000023c
 800d348:	20004c48 	.word	0x20004c48
 800d34c:	40003c00 	.word	0x40003c00
 800d350:	20004ce8 	.word	0x20004ce8
 800d354:	40011000 	.word	0x40011000
 800d358:	2000027c 	.word	0x2000027c
 800d35c:	40000c00 	.word	0x40000c00
 800d360:	20004b80 	.word	0x20004b80
 800d364:	40000800 	.word	0x40000800
 800d368:	20004b40 	.word	0x20004b40
 800d36c:	40010400 	.word	0x40010400
  sConfigOC.Pulse = 25-1;
 800d370:	2318      	movs	r3, #24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d372:	4602      	mov	r2, r0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d374:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d378:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d37c:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800d37e:	2430      	movs	r4, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d380:	a908      	add	r1, sp, #32
 800d382:	4628      	mov	r0, r5
  sConfigOC.Pulse = 25-1;
 800d384:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800d386:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d388:	f003 ff3e 	bl	8011208 <HAL_TIM_OC_ConfigChannel>
 800d38c:	4603      	mov	r3, r0
 800d38e:	b108      	cbz	r0, 800d394 <main+0x2f4>
 800d390:	b672      	cpsid	i
 800d392:	e7fe      	b.n	800d392 <main+0x2f2>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800d394:	6829      	ldr	r1, [r5, #0]
 800d396:	698a      	ldr	r2, [r1, #24]
 800d398:	f042 0208 	orr.w	r2, r2, #8
 800d39c:	618a      	str	r2, [r1, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800d39e:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d3a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800d3a4:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d3a6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800d3aa:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d3ae:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d3b0:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d3b2:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800d3b4:	f004 fb26 	bl	8011a04 <HAL_TIMEx_ConfigBreakDeadTime>
 800d3b8:	b108      	cbz	r0, 800d3be <main+0x31e>
 800d3ba:	b672      	cpsid	i
 800d3bc:	e7fe      	b.n	800d3bc <main+0x31c>
  htim1.Instance = TIM1;
 800d3be:	4c49      	ldr	r4, [pc, #292]	; (800d4e4 <main+0x444>)
  HAL_TIM_MspPostInit(&htim8);
 800d3c0:	4849      	ldr	r0, [pc, #292]	; (800d4e8 <main+0x448>)
 800d3c2:	f000 fa55 	bl	800d870 <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 800d3c6:	4b49      	ldr	r3, [pc, #292]	; (800d4ec <main+0x44c>)
 800d3c8:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 168-1;
 800d3ca:	23a7      	movs	r3, #167	; 0xa7
  htim1.Init.Period = 1000-1;
 800d3cc:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim1.Init.Prescaler = 168-1;
 800d3d0:	6063      	str	r3, [r4, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d3d2:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d3d4:	2300      	movs	r3, #0
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3d6:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d3da:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800d3de:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d3e2:	e9cd 3308 	strd	r3, r3, [sp, #32]
  htim1.Init.RepetitionCounter = 0;
 800d3e6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d3ea:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d3ec:	f003 fb48 	bl	8010a80 <HAL_TIM_Base_Init>
 800d3f0:	b108      	cbz	r0, 800d3f6 <main+0x356>
 800d3f2:	b672      	cpsid	i
 800d3f4:	e7fe      	b.n	800d3f4 <main+0x354>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d3fa:	a90f      	add	r1, sp, #60	; 0x3c
 800d3fc:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d3fe:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d400:	f004 f8e4 	bl	80115cc <HAL_TIM_ConfigClockSource>
 800d404:	4603      	mov	r3, r0
 800d406:	b108      	cbz	r0, 800d40c <main+0x36c>
 800d408:	b672      	cpsid	i
 800d40a:	e7fe      	b.n	800d40a <main+0x36a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d40c:	4620      	mov	r0, r4
 800d40e:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d410:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d414:	f004 fab0 	bl	8011978 <HAL_TIMEx_MasterConfigSynchronization>
 800d418:	4604      	mov	r4, r0
 800d41a:	b108      	cbz	r0, 800d420 <main+0x380>
 800d41c:	b672      	cpsid	i
 800d41e:	e7fe      	b.n	800d41e <main+0x37e>
  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);//1200,0);//2430,0);//7.3,1215,0);//40kHzの//14.6, 2430,0);//(20khzのと??��?��?);//1200,0.0);//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);////D0.0036 //I2430くら 36.6*0.6=18+3.96
 800d420:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800d4f0 <main+0x450>
 800d424:	eddf 0a33 	vldr	s1, [pc, #204]	; 800d4f4 <main+0x454>
 800d428:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800d4f8 <main+0x458>
 800d42c:	2004      	movs	r0, #4
 800d42e:	f001 faed 	bl	800ea0c <PIDSetGain>
  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);// 1200,0);//2430,0);//7.3,1215,0);//14.6, 2430,0);//1200,0.0);//, 2430,0);//17.5//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);//I150,
 800d432:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d4f0 <main+0x450>
 800d436:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800d4f4 <main+0x454>
 800d43a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800d4f8 <main+0x458>
 800d43e:	2005      	movs	r0, #5
 800d440:	f001 fae4 	bl	800ea0c <PIDSetGain>
  PIDSetGain(A_VELO_PID, 12,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800d444:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 800d4fc <main+0x45c>
 800d448:	4620      	mov	r0, r4
 800d44a:	eef0 0a41 	vmov.f32	s1, s2
 800d44e:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800d452:	f001 fadb 	bl	800ea0c <PIDSetGain>
  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800d456:	ed9f 1a29 	vldr	s2, [pc, #164]	; 800d4fc <main+0x45c>
 800d45a:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800d4f8 <main+0x458>
 800d45e:	eef0 0a41 	vmov.f32	s1, s2
 800d462:	2008      	movs	r0, #8
 800d464:	f001 fad2 	bl	800ea0c <PIDSetGain>
  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800d468:	ed9f 1a24 	vldr	s2, [pc, #144]	; 800d4fc <main+0x45c>
 800d46c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800d470:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800d474:	2001      	movs	r0, #1
 800d476:	f001 fac9 	bl	800ea0c <PIDSetGain>
  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800d47a:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800d4fc <main+0x45c>
 800d47e:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800d482:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800d486:	2002      	movs	r0, #2
 800d488:	f001 fac0 	bl	800ea0c <PIDSetGain>
  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800d48c:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 800d4fc <main+0x45c>
 800d490:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800d494:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800d498:	2003      	movs	r0, #3
 800d49a:	f001 fab7 	bl	800ea0c <PIDSetGain>
	  switch( startup_mode )
 800d49e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800d4a2:	2b07      	cmp	r3, #7
 800d4a4:	d8fd      	bhi.n	800d4a2 <main+0x402>
 800d4a6:	e8df f003 	tbb	[pc, r3]
 800d4aa:	1904      	.short	0x1904
 800d4ac:	0d101316 	.word	0x0d101316
 800d4b0:	070a      	.short	0x070a
		  ParameterSetting();
 800d4b2:	f7fe ff3b 	bl	800c32c <ParameterSetting>
		  break;
 800d4b6:	e7f2      	b.n	800d49e <main+0x3fe>
		  WritingFree();
 800d4b8:	f7fe fffc 	bl	800c4b4 <WritingFree>
		  break;
 800d4bc:	e7ef      	b.n	800d49e <main+0x3fe>
		  Explore();
 800d4be:	f7ff f979 	bl	800c7b4 <Explore>
		  break;
 800d4c2:	e7ec      	b.n	800d49e <main+0x3fe>
		  GainTestAVelo();
 800d4c4:	f7fe ffc2 	bl	800c44c <GainTestAVelo>
		  break;
 800d4c8:	e7e9      	b.n	800d49e <main+0x3fe>
		  FastestRun();
 800d4ca:	f7ff f841 	bl	800c550 <FastestRun>
		  break;
 800d4ce:	e7e6      	b.n	800d49e <main+0x3fe>
		  Debug();
 800d4d0:	f7fe fec6 	bl	800c260 <Debug>
		  break;
 800d4d4:	e7e3      	b.n	800d49e <main+0x3fe>
		  GainTestDWall();
 800d4d6:	f7fe ff61 	bl	800c39c <GainTestDWall>
		  break;
 800d4da:	e7e0      	b.n	800d49e <main+0x3fe>
		  GainTestRWall();
 800d4dc:	f7fe ff2e 	bl	800c33c <GainTestRWall>
		  break;
 800d4e0:	e7dd      	b.n	800d49e <main+0x3fe>
 800d4e2:	bf00      	nop
 800d4e4:	20004d88 	.word	0x20004d88
 800d4e8:	20004b40 	.word	0x20004b40
 800d4ec:	40010000 	.word	0x40010000
 800d4f0:	3a83126f 	.word	0x3a83126f
 800d4f4:	452f0000 	.word	0x452f0000
 800d4f8:	4169999a 	.word	0x4169999a
 800d4fc:	00000000 	.word	0x00000000

0800d500 <Error_Handler>:
 800d500:	b672      	cpsid	i
 800d502:	e7fe      	b.n	800d502 <Error_Handler+0x2>

0800d504 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d504:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d506:	4b0c      	ldr	r3, [pc, #48]	; (800d538 <HAL_MspInit+0x34>)
 800d508:	2100      	movs	r1, #0
 800d50a:	9100      	str	r1, [sp, #0]
 800d50c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d50e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d512:	645a      	str	r2, [r3, #68]	; 0x44
 800d514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d516:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800d51a:	9200      	str	r2, [sp, #0]
 800d51c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d51e:	9101      	str	r1, [sp, #4]
 800d520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d522:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d526:	641a      	str	r2, [r3, #64]	; 0x40
 800d528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d52a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d52e:	9301      	str	r3, [sp, #4]
 800d530:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d532:	b002      	add	sp, #8
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop
 800d538:	40023800 	.word	0x40023800

0800d53c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d53c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800d53e:	6803      	ldr	r3, [r0, #0]
 800d540:	4a47      	ldr	r2, [pc, #284]	; (800d660 <HAL_ADC_MspInit+0x124>)
{
 800d542:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d544:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800d546:	4293      	cmp	r3, r2
{
 800d548:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d54a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800d54e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800d552:	9409      	str	r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 800d554:	d004      	beq.n	800d560 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800d556:	4a43      	ldr	r2, [pc, #268]	; (800d664 <HAL_ADC_MspInit+0x128>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d04e      	beq.n	800d5fa <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800d55c:	b00b      	add	sp, #44	; 0x2c
 800d55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d560:	4b41      	ldr	r3, [pc, #260]	; (800d668 <HAL_ADC_MspInit+0x12c>)
 800d562:	9400      	str	r4, [sp, #0]
 800d564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 800d566:	4e41      	ldr	r6, [pc, #260]	; (800d66c <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d568:	4841      	ldr	r0, [pc, #260]	; (800d670 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d56a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d56e:	645a      	str	r2, [r3, #68]	; 0x44
 800d570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d572:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800d576:	9200      	str	r2, [sp, #0]
 800d578:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d57a:	9401      	str	r4, [sp, #4]
 800d57c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d57e:	f042 0204 	orr.w	r2, r2, #4
 800d582:	631a      	str	r2, [r3, #48]	; 0x30
 800d584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d586:	f002 0204 	and.w	r2, r2, #4
 800d58a:	9201      	str	r2, [sp, #4]
 800d58c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d58e:	9402      	str	r4, [sp, #8]
 800d590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d592:	f042 0202 	orr.w	r2, r2, #2
 800d596:	631a      	str	r2, [r3, #48]	; 0x30
 800d598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d59a:	f003 0302 	and.w	r3, r3, #2
 800d59e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d5a0:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800d5a2:	2311      	movs	r3, #17
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d5a4:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d5a6:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800d5a8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d5aa:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d5ac:	f002 fa1e 	bl	800f9ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d5b0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d5b2:	a905      	add	r1, sp, #20
 800d5b4:	482f      	ldr	r0, [pc, #188]	; (800d674 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d5b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5b8:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d5bc:	f002 fa16 	bl	800f9ec <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800d5c0:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d5c4:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Instance = DMA2_Stream0;
 800d5c8:	482b      	ldr	r0, [pc, #172]	; (800d678 <HAL_ADC_MspInit+0x13c>)
 800d5ca:	6030      	str	r0, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800d5cc:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800d5d0:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d5d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d5d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800d5da:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800d5de:	4630      	mov	r0, r6
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800d5e0:	6137      	str	r7, [r6, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d5e2:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800d5e6:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800d5e8:	f001 fede 	bl	800f3a8 <HAL_DMA_Init>
 800d5ec:	b108      	cbz	r0, 800d5f2 <HAL_ADC_MspInit+0xb6>
      Error_Handler();
 800d5ee:	f7ff ff87 	bl	800d500 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800d5f2:	63ae      	str	r6, [r5, #56]	; 0x38
 800d5f4:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800d5f6:	b00b      	add	sp, #44	; 0x2c
 800d5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 800d5fa:	4b1b      	ldr	r3, [pc, #108]	; (800d668 <HAL_ADC_MspInit+0x12c>)
 800d5fc:	9403      	str	r4, [sp, #12]
 800d5fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc2.Instance = DMA2_Stream2;
 800d600:	4e1e      	ldr	r6, [pc, #120]	; (800d67c <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d602:	481b      	ldr	r0, [pc, #108]	; (800d670 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800d604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d608:	645a      	str	r2, [r3, #68]	; 0x44
 800d60a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d60c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800d610:	9203      	str	r2, [sp, #12]
 800d612:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d614:	9404      	str	r4, [sp, #16]
 800d616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d618:	f042 0204 	orr.w	r2, r2, #4
 800d61c:	631a      	str	r2, [r3, #48]	; 0x30
 800d61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d620:	f003 0304 	and.w	r3, r3, #4
 800d624:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800d626:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d628:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800d62a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d62c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d62e:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d630:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d632:	f002 f9db 	bl	800f9ec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800d636:	4a12      	ldr	r2, [pc, #72]	; (800d680 <HAL_ADC_MspInit+0x144>)
 800d638:	6032      	str	r2, [r6, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800d63a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800d63e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800d642:	6073      	str	r3, [r6, #4]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800d644:	6130      	str	r0, [r6, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d646:	60b4      	str	r4, [r6, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800d648:	60f4      	str	r4, [r6, #12]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d64a:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d64e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800d656:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800d65a:	4630      	mov	r0, r6
 800d65c:	e7c1      	b.n	800d5e2 <HAL_ADC_MspInit+0xa6>
 800d65e:	bf00      	nop
 800d660:	40012000 	.word	0x40012000
 800d664:	40012100 	.word	0x40012100
 800d668:	40023800 	.word	0x40023800
 800d66c:	20004d28 	.word	0x20004d28
 800d670:	40020800 	.word	0x40020800
 800d674:	40020400 	.word	0x40020400
 800d678:	40026410 	.word	0x40026410
 800d67c:	20004dc8 	.word	0x20004dc8
 800d680:	40026440 	.word	0x40026440

0800d684 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d684:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 800d686:	6801      	ldr	r1, [r0, #0]
 800d688:	4a18      	ldr	r2, [pc, #96]	; (800d6ec <HAL_SPI_MspInit+0x68>)
{
 800d68a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d68c:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 800d68e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d690:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800d694:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d698:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 800d69a:	d001      	beq.n	800d6a0 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800d69c:	b008      	add	sp, #32
 800d69e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800d6a0:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 800d6a4:	9301      	str	r3, [sp, #4]
 800d6a6:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d6a8:	4811      	ldr	r0, [pc, #68]	; (800d6f0 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800d6aa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800d6ae:	6411      	str	r1, [r2, #64]	; 0x40
 800d6b0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d6b2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
 800d6b6:	9101      	str	r1, [sp, #4]
 800d6b8:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d6ba:	9302      	str	r3, [sp, #8]
 800d6bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d6be:	f043 0304 	orr.w	r3, r3, #4
 800d6c2:	6313      	str	r3, [r2, #48]	; 0x30
 800d6c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d6c6:	f003 0304 	and.w	r3, r3, #4
 800d6ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6cc:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d6ce:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d6d0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800d6d2:	f44f 55e0 	mov.w	r5, #7168	; 0x1c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6d6:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d6d8:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6da:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d6de:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d6e2:	f002 f983 	bl	800f9ec <HAL_GPIO_Init>
}
 800d6e6:	b008      	add	sp, #32
 800d6e8:	bd70      	pop	{r4, r5, r6, pc}
 800d6ea:	bf00      	nop
 800d6ec:	40003c00 	.word	0x40003c00
 800d6f0:	40020800 	.word	0x40020800

0800d6f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d6f4:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 800d6f6:	6803      	ldr	r3, [r0, #0]
 800d6f8:	4a2b      	ldr	r2, [pc, #172]	; (800d7a8 <HAL_TIM_Base_MspInit+0xb4>)
 800d6fa:	4293      	cmp	r3, r2
{
 800d6fc:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 800d6fe:	d02a      	beq.n	800d756 <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800d700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d704:	d008      	beq.n	800d718 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800d706:	4a29      	ldr	r2, [pc, #164]	; (800d7ac <HAL_TIM_Base_MspInit+0xb8>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d015      	beq.n	800d738 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 800d70c:	4a28      	ldr	r2, [pc, #160]	; (800d7b0 <HAL_TIM_Base_MspInit+0xbc>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d037      	beq.n	800d782 <HAL_TIM_Base_MspInit+0x8e>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d712:	b005      	add	sp, #20
 800d714:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d718:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800d71c:	2200      	movs	r2, #0
 800d71e:	9201      	str	r2, [sp, #4]
 800d720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d722:	f042 0201 	orr.w	r2, r2, #1
 800d726:	641a      	str	r2, [r3, #64]	; 0x40
 800d728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d72a:	f003 0301 	and.w	r3, r3, #1
 800d72e:	9301      	str	r3, [sp, #4]
 800d730:	9b01      	ldr	r3, [sp, #4]
}
 800d732:	b005      	add	sp, #20
 800d734:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 800d738:	4b1e      	ldr	r3, [pc, #120]	; (800d7b4 <HAL_TIM_Base_MspInit+0xc0>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	9202      	str	r2, [sp, #8]
 800d73e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d740:	f042 0208 	orr.w	r2, r2, #8
 800d744:	641a      	str	r2, [r3, #64]	; 0x40
 800d746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d748:	f003 0308 	and.w	r3, r3, #8
 800d74c:	9302      	str	r3, [sp, #8]
 800d74e:	9b02      	ldr	r3, [sp, #8]
}
 800d750:	b005      	add	sp, #20
 800d752:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d756:	2200      	movs	r2, #0
 800d758:	4b16      	ldr	r3, [pc, #88]	; (800d7b4 <HAL_TIM_Base_MspInit+0xc0>)
 800d75a:	9200      	str	r2, [sp, #0]
 800d75c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d75e:	f041 0101 	orr.w	r1, r1, #1
 800d762:	6459      	str	r1, [r3, #68]	; 0x44
 800d764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d766:	f003 0301 	and.w	r3, r3, #1
 800d76a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800d76c:	2019      	movs	r0, #25
 800d76e:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d770:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800d772:	f001 fdbb 	bl	800f2ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800d776:	2019      	movs	r0, #25
}
 800d778:	b005      	add	sp, #20
 800d77a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800d77e:	f001 bdeb 	b.w	800f358 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d782:	4b0c      	ldr	r3, [pc, #48]	; (800d7b4 <HAL_TIM_Base_MspInit+0xc0>)
 800d784:	2200      	movs	r2, #0
 800d786:	9203      	str	r2, [sp, #12]
 800d788:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d78a:	f041 0102 	orr.w	r1, r1, #2
 800d78e:	6459      	str	r1, [r3, #68]	; 0x44
 800d790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d792:	f003 0302 	and.w	r3, r3, #2
 800d796:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800d798:	202c      	movs	r0, #44	; 0x2c
 800d79a:	2101      	movs	r1, #1
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d79c:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800d79e:	f001 fda5 	bl	800f2ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800d7a2:	202c      	movs	r0, #44	; 0x2c
 800d7a4:	e7e8      	b.n	800d778 <HAL_TIM_Base_MspInit+0x84>
 800d7a6:	bf00      	nop
 800d7a8:	40010000 	.word	0x40010000
 800d7ac:	40000c00 	.word	0x40000c00
 800d7b0:	40010400 	.word	0x40010400
 800d7b4:	40023800 	.word	0x40023800

0800d7b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800d7b8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM3)
 800d7ba:	6802      	ldr	r2, [r0, #0]
 800d7bc:	4927      	ldr	r1, [pc, #156]	; (800d85c <HAL_TIM_Encoder_MspInit+0xa4>)
{
 800d7be:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7c0:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM3)
 800d7c2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7c4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d7c8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800d7cc:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_encoder->Instance==TIM3)
 800d7ce:	d024      	beq.n	800d81a <HAL_TIM_Encoder_MspInit+0x62>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM4)
 800d7d0:	4923      	ldr	r1, [pc, #140]	; (800d860 <HAL_TIM_Encoder_MspInit+0xa8>)
 800d7d2:	428a      	cmp	r2, r1
 800d7d4:	d001      	beq.n	800d7da <HAL_TIM_Encoder_MspInit+0x22>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800d7d6:	b00a      	add	sp, #40	; 0x28
 800d7d8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800d7da:	4a22      	ldr	r2, [pc, #136]	; (800d864 <HAL_TIM_Encoder_MspInit+0xac>)
 800d7dc:	9303      	str	r3, [sp, #12]
 800d7de:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d7e0:	4821      	ldr	r0, [pc, #132]	; (800d868 <HAL_TIM_Encoder_MspInit+0xb0>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 800d7e2:	f041 0104 	orr.w	r1, r1, #4
 800d7e6:	6411      	str	r1, [r2, #64]	; 0x40
 800d7e8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d7ea:	f001 0104 	and.w	r1, r1, #4
 800d7ee:	9103      	str	r1, [sp, #12]
 800d7f0:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d7f2:	9304      	str	r3, [sp, #16]
 800d7f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d7f6:	f043 0302 	orr.w	r3, r3, #2
 800d7fa:	6313      	str	r3, [r2, #48]	; 0x30
 800d7fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d7fe:	f003 0302 	and.w	r3, r3, #2
 800d802:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d804:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d806:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d808:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d80a:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800d80c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d80e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d812:	f002 f8eb 	bl	800f9ec <HAL_GPIO_Init>
}
 800d816:	b00a      	add	sp, #40	; 0x28
 800d818:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d81a:	4a12      	ldr	r2, [pc, #72]	; (800d864 <HAL_TIM_Encoder_MspInit+0xac>)
 800d81c:	9301      	str	r3, [sp, #4]
 800d81e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d820:	4812      	ldr	r0, [pc, #72]	; (800d86c <HAL_TIM_Encoder_MspInit+0xb4>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d822:	f041 0102 	orr.w	r1, r1, #2
 800d826:	6411      	str	r1, [r2, #64]	; 0x40
 800d828:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d82a:	f001 0102 	and.w	r1, r1, #2
 800d82e:	9101      	str	r1, [sp, #4]
 800d830:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d832:	9302      	str	r3, [sp, #8]
 800d834:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d836:	f043 0301 	orr.w	r3, r3, #1
 800d83a:	6313      	str	r3, [r2, #48]	; 0x30
 800d83c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d83e:	f003 0301 	and.w	r3, r3, #1
 800d842:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d844:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d846:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d848:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d84a:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d84c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d84e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d852:	f002 f8cb 	bl	800f9ec <HAL_GPIO_Init>
}
 800d856:	b00a      	add	sp, #40	; 0x28
 800d858:	bd10      	pop	{r4, pc}
 800d85a:	bf00      	nop
 800d85c:	40000400 	.word	0x40000400
 800d860:	40000800 	.word	0x40000800
 800d864:	40023800 	.word	0x40023800
 800d868:	40020400 	.word	0x40020400
 800d86c:	40020000 	.word	0x40020000

0800d870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d870:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM2)
 800d872:	6803      	ldr	r3, [r0, #0]
{
 800d874:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d876:	2400      	movs	r4, #0
  if(htim->Instance==TIM2)
 800d878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d87c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800d880:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800d884:	9409      	str	r4, [sp, #36]	; 0x24
  if(htim->Instance==TIM2)
 800d886:	d007      	beq.n	800d898 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 800d888:	4a30      	ldr	r2, [pc, #192]	; (800d94c <HAL_TIM_MspPostInit+0xdc>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d049      	beq.n	800d922 <HAL_TIM_MspPostInit+0xb2>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 800d88e:	4a30      	ldr	r2, [pc, #192]	; (800d950 <HAL_TIM_MspPostInit+0xe0>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d01b      	beq.n	800d8cc <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800d894:	b00a      	add	sp, #40	; 0x28
 800d896:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d898:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800d89c:	9401      	str	r4, [sp, #4]
 800d89e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8a0:	482c      	ldr	r0, [pc, #176]	; (800d954 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8a2:	f042 0201 	orr.w	r2, r2, #1
 800d8a6:	631a      	str	r2, [r3, #48]	; 0x30
 800d8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8aa:	f003 0301 	and.w	r3, r3, #1
 800d8ae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8b0:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d8b2:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8b4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d8b6:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8b8:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8ba:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8bc:	e9cd 5405 	strd	r5, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d8c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8c4:	f002 f892 	bl	800f9ec <HAL_GPIO_Init>
}
 800d8c8:	b00a      	add	sp, #40	; 0x28
 800d8ca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8cc:	4b22      	ldr	r3, [pc, #136]	; (800d958 <HAL_TIM_MspPostInit+0xe8>)
 800d8ce:	9403      	str	r4, [sp, #12]
 800d8d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8d2:	4820      	ldr	r0, [pc, #128]	; (800d954 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8d4:	f042 0201 	orr.w	r2, r2, #1
 800d8d8:	631a      	str	r2, [r3, #48]	; 0x30
 800d8da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8dc:	f002 0201 	and.w	r2, r2, #1
 800d8e0:	9203      	str	r2, [sp, #12]
 800d8e2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d8e4:	9404      	str	r4, [sp, #16]
 800d8e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8e8:	f042 0204 	orr.w	r2, r2, #4
 800d8ec:	631a      	str	r2, [r3, #48]	; 0x30
 800d8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f0:	f003 0304 	and.w	r3, r3, #4
 800d8f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8f6:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800d8f8:	2320      	movs	r3, #32
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d8fa:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8fc:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d8fe:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d900:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d902:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d906:	f002 f871 	bl	800f9ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d90a:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d90c:	a905      	add	r1, sp, #20
 800d90e:	4813      	ldr	r0, [pc, #76]	; (800d95c <HAL_TIM_MspPostInit+0xec>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d910:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d912:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d914:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d918:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d91a:	f002 f867 	bl	800f9ec <HAL_GPIO_Init>
}
 800d91e:	b00a      	add	sp, #40	; 0x28
 800d920:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d922:	4b0d      	ldr	r3, [pc, #52]	; (800d958 <HAL_TIM_MspPostInit+0xe8>)
 800d924:	9402      	str	r4, [sp, #8]
 800d926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d928:	480a      	ldr	r0, [pc, #40]	; (800d954 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d92a:	f042 0201 	orr.w	r2, r2, #1
 800d92e:	631a      	str	r2, [r3, #48]	; 0x30
 800d930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d932:	f003 0301 	and.w	r3, r3, #1
 800d936:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d938:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d93a:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d93c:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800d93e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d940:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d944:	f002 f852 	bl	800f9ec <HAL_GPIO_Init>
}
 800d948:	b00a      	add	sp, #40	; 0x28
 800d94a:	bd70      	pop	{r4, r5, r6, pc}
 800d94c:	40000c00 	.word	0x40000c00
 800d950:	40010400 	.word	0x40010400
 800d954:	40020000 	.word	0x40020000
 800d958:	40023800 	.word	0x40023800
 800d95c:	40020800 	.word	0x40020800

0800d960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d960:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800d962:	6801      	ldr	r1, [r0, #0]
 800d964:	4a18      	ldr	r2, [pc, #96]	; (800d9c8 <HAL_UART_MspInit+0x68>)
{
 800d966:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d968:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 800d96a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d96c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800d970:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d974:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800d976:	d001      	beq.n	800d97c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800d978:	b008      	add	sp, #32
 800d97a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800d97c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800d980:	9301      	str	r3, [sp, #4]
 800d982:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d984:	4811      	ldr	r0, [pc, #68]	; (800d9cc <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800d986:	f041 0110 	orr.w	r1, r1, #16
 800d98a:	6451      	str	r1, [r2, #68]	; 0x44
 800d98c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800d98e:	f001 0110 	and.w	r1, r1, #16
 800d992:	9101      	str	r1, [sp, #4]
 800d994:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d996:	9302      	str	r3, [sp, #8]
 800d998:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d99a:	f043 0301 	orr.w	r3, r3, #1
 800d99e:	6313      	str	r3, [r2, #48]	; 0x30
 800d9a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d9a2:	f003 0301 	and.w	r3, r3, #1
 800d9a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9a8:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d9aa:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9ac:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d9ae:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9b2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9b4:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9b6:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d9ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d9be:	f002 f815 	bl	800f9ec <HAL_GPIO_Init>
}
 800d9c2:	b008      	add	sp, #32
 800d9c4:	bd70      	pop	{r4, r5, r6, pc}
 800d9c6:	bf00      	nop
 800d9c8:	40011000 	.word	0x40011000
 800d9cc:	40020000 	.word	0x40020000

0800d9d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d9d0:	e7fe      	b.n	800d9d0 <NMI_Handler>
 800d9d2:	bf00      	nop

0800d9d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d9d4:	e7fe      	b.n	800d9d4 <HardFault_Handler>
 800d9d6:	bf00      	nop

0800d9d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d9d8:	e7fe      	b.n	800d9d8 <MemManage_Handler>
 800d9da:	bf00      	nop

0800d9dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d9dc:	e7fe      	b.n	800d9dc <BusFault_Handler>
 800d9de:	bf00      	nop

0800d9e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d9e0:	e7fe      	b.n	800d9e0 <UsageFault_Handler>
 800d9e2:	bf00      	nop

0800d9e4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop

0800d9e8 <DebugMon_Handler>:
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop

0800d9ec <PendSV_Handler>:
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop

0800d9f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d9f0:	f001 b9cc 	b.w	800ed8c <HAL_IncTick>

0800d9f4 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d9f4:	4801      	ldr	r0, [pc, #4]	; (800d9fc <TIM1_UP_TIM10_IRQHandler+0x8>)
 800d9f6:	f003 be97 	b.w	8011728 <HAL_TIM_IRQHandler>
 800d9fa:	bf00      	nop
 800d9fc:	20004d88 	.word	0x20004d88

0800da00 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800da00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800da04:	f002 b8fa 	b.w	800fbfc <HAL_GPIO_EXTI_IRQHandler>

0800da08 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800da08:	4801      	ldr	r0, [pc, #4]	; (800da10 <TIM8_UP_TIM13_IRQHandler+0x8>)
 800da0a:	f003 be8d 	b.w	8011728 <HAL_TIM_IRQHandler>
 800da0e:	bf00      	nop
 800da10:	20004b40 	.word	0x20004b40

0800da14 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800da14:	4801      	ldr	r0, [pc, #4]	; (800da1c <DMA2_Stream0_IRQHandler+0x8>)
 800da16:	f001 bde7 	b.w	800f5e8 <HAL_DMA_IRQHandler>
 800da1a:	bf00      	nop
 800da1c:	20004d28 	.word	0x20004d28

0800da20 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800da20:	4801      	ldr	r0, [pc, #4]	; (800da28 <DMA2_Stream2_IRQHandler+0x8>)
 800da22:	f001 bde1 	b.w	800f5e8 <HAL_DMA_IRQHandler>
 800da26:	bf00      	nop
 800da28:	20004dc8 	.word	0x20004dc8

0800da2c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800da2c:	4b05      	ldr	r3, [pc, #20]	; (800da44 <SystemInit+0x18>)
 800da2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800da32:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800da36:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800da3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800da3e:	6099      	str	r1, [r3, #8]
#endif
}
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	e000ed00 	.word	0xe000ed00

0800da48 <initSearchData>:
#include "MicroMouse.h"
#include "Action.h"
#include "Search.h"

void initSearchData(maze_node *my_maze, profile *Mouse)
{
 800da48:	b570      	push	{r4, r5, r6, lr}
 800da4a:	4604      	mov	r4, r0
 800da4c:	b082      	sub	sp, #8
 800da4e:	460d      	mov	r5, r1
    initMaze(my_maze);
 800da50:	f7fd fc4a 	bl	800b2e8 <initMaze>
    initWeight(my_maze); //3/20ms
 800da54:	4620      	mov	r0, r4
 800da56:	f7fd fc25 	bl	800b2a4 <initWeight>

    //状態の初期化
    initProfile(Mouse, my_maze);
 800da5a:	4621      	mov	r1, r4
 800da5c:	4628      	mov	r0, r5
 800da5e:	f7fe fab1 	bl	800bfc4 <initProfile>
    Mouse->now.node = &(my_maze->RawNode[0][0]);
    Mouse->next.node = &(my_maze->RawNode[0][1]);
 800da62:	f104 0308 	add.w	r3, r4, #8
 800da66:	61eb      	str	r3, [r5, #28]

    //スタート座標にいる状態で、現在の重みを更新
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800da68:	2601      	movs	r6, #1
 800da6a:	2303      	movs	r3, #3
 800da6c:	786a      	ldrb	r2, [r5, #1]
 800da6e:	7829      	ldrb	r1, [r5, #0]
    Mouse->now.node = &(my_maze->RawNode[0][0]);
 800da70:	612c      	str	r4, [r5, #16]
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800da72:	4620      	mov	r0, r4
 800da74:	e9cd 3600 	strd	r3, r6, [sp]
 800da78:	f7fd fdc0 	bl	800b5fc <updateAllNodeWeight>
}
 800da7c:	b002      	add	sp, #8
 800da7e:	bd70      	pop	{r4, r5, r6, pc}

0800da80 <updateRealSearch>:
void updateRealSearch()
{
 800da80:	b570      	push	{r4, r5, r6, lr}
	//wall_state wall_st[4]={0};

	//壁センサ値を読んで、各方角の壁の有無を判定
		//区画進入直前なので、更新予定の方角と座標がNextに入っているはず
		//前後左右の値として入れる
	shiftState(&my_mouse);
 800da82:	4d6f      	ldr	r5, [pc, #444]	; (800dc40 <updateRealSearch+0x1c0>)
{
 800da84:	b082      	sub	sp, #8
	shiftState(&my_mouse);
 800da86:	4628      	mov	r0, r5
 800da88:	f7fe fab4 	bl	800bff4 <shiftState>

    switch (my_mouse.now.car)
 800da8c:	7aab      	ldrb	r3, [r5, #10]
 800da8e:	2b06      	cmp	r3, #6
 800da90:	f200 80d0 	bhi.w	800dc34 <updateRealSearch+0x1b4>
 800da94:	e8df f003 	tbb	[pc, r3]
 800da98:	ce76cea2 	.word	0xce76cea2
 800da9c:	ce4a      	.short	0xce4a
 800da9e:	04          	.byte	0x04
 800da9f:	00          	.byte	0x00
    	wall_dir[0] = NOWALL;
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
        break;
    case west:
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800daa0:	4b68      	ldr	r3, [pc, #416]	; (800dc44 <updateRealSearch+0x1c4>)
 800daa2:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800dc48 <updateRealSearch+0x1c8>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800daa6:	edd3 5a03 	vldr	s11, [r3, #12]
 800daaa:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800daae:	edd3 4a01 	vldr	s9, [r3, #4]
    	wall_dir[1] = NOWALL;
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dab2:	ed93 6a02 	vldr	s12, [r3, #8]
 800dab6:	eddf 6a65 	vldr	s13, [pc, #404]	; 800dc4c <updateRealSearch+0x1cc>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800daba:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800dc50 <updateRealSearch+0x1d0>
 800dabe:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800dac2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dac6:	eef4 4ac5 	vcmpe.f32	s9, s10
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800daca:	ee67 7aa5 	vmul.f32	s15, s15, s11
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dad2:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800dad6:	bfcc      	ite	gt
 800dad8:	2601      	movgt	r6, #1
 800dada:	2600      	movle	r6, #0
 800dadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dae4:	bfcc      	ite	gt
 800dae6:	2101      	movgt	r1, #1
 800dae8:	2100      	movle	r1, #0
 800daea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daee:	bfcc      	ite	gt
 800daf0:	2201      	movgt	r2, #1
 800daf2:	2200      	movle	r2, #0
        break;
 800daf4:	2000      	movs	r0, #0
//	Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
//	Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
//	Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
//	Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
    //アクションが終わるときがノードの上にいる状態なので、状態シフト済みとする（この関数はアクション中に呼び出される想定）
    my_mouse.now.wall.north = wall_dir[0];
 800daf6:	7b2c      	ldrb	r4, [r5, #12]
    my_mouse.now.wall.south = wall_dir[2];
    my_mouse.now.wall.west = wall_dir[3];

	//getWallNow(&(my_mouse->now), &wall[0]);

	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800daf8:	7a6b      	ldrb	r3, [r5, #9]
    my_mouse.now.wall.north = wall_dir[0];
 800dafa:	f366 0401 	bfi	r4, r6, #0, #2
    my_mouse.now.wall.east = wall_dir[1];
 800dafe:	f360 0483 	bfi	r4, r0, #2, #2
    my_mouse.now.wall.south = wall_dir[2];
 800db02:	f361 1405 	bfi	r4, r1, #4, #2
    my_mouse.now.wall.west = wall_dir[3];
 800db06:	f362 1487 	bfi	r4, r2, #6, #2
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800db0a:	4952      	ldr	r1, [pc, #328]	; (800dc54 <updateRealSearch+0x1d4>)
 800db0c:	7a2a      	ldrb	r2, [r5, #8]
 800db0e:	4852      	ldr	r0, [pc, #328]	; (800dc58 <updateRealSearch+0x1d8>)
    my_mouse.now.wall.west = wall_dir[3];
 800db10:	732c      	strb	r4, [r5, #12]
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800db12:	f7fd fcfd 	bl	800b510 <updateNodeThree>

	updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800db16:	2401      	movs	r4, #1
 800db18:	2303      	movs	r3, #3
 800db1a:	786a      	ldrb	r2, [r5, #1]
 800db1c:	7829      	ldrb	r1, [r5, #0]
 800db1e:	484e      	ldr	r0, [pc, #312]	; (800dc58 <updateRealSearch+0x1d8>)
 800db20:	e9cd 3400 	strd	r3, r4, [sp]
 800db24:	f7fd fd6a 	bl	800b5fc <updateAllNodeWeight>
}
 800db28:	b002      	add	sp, #8
 800db2a:	bd70      	pop	{r4, r5, r6, pc}
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800db2c:	4b45      	ldr	r3, [pc, #276]	; (800dc44 <updateRealSearch+0x1c4>)
 800db2e:	eddf 5a47 	vldr	s11, [pc, #284]	; 800dc4c <updateRealSearch+0x1cc>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800db32:	edd3 4a03 	vldr	s9, [r3, #12]
 800db36:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800db3a:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800db3e:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800dc50 <updateRealSearch+0x1d0>
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800db42:	edd3 6a01 	vldr	s13, [r3, #4]
 800db46:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800dc48 <updateRealSearch+0x1c8>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800db4a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800db4e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800db52:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800db56:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800db5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800db5e:	eef4 7ac6 	vcmpe.f32	s15, s12
 800db62:	bfcc      	ite	gt
 800db64:	2001      	movgt	r0, #1
 800db66:	2000      	movle	r0, #0
 800db68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800db6c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800db70:	bfcc      	ite	gt
 800db72:	2101      	movgt	r1, #1
 800db74:	2100      	movle	r1, #0
 800db76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db7a:	bfcc      	ite	gt
 800db7c:	2201      	movgt	r2, #1
 800db7e:	2200      	movle	r2, #0
        break;
 800db80:	2600      	movs	r6, #0
 800db82:	e7b8      	b.n	800daf6 <updateRealSearch+0x76>
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800db84:	4b2f      	ldr	r3, [pc, #188]	; (800dc44 <updateRealSearch+0x1c4>)
 800db86:	eddf 5a31 	vldr	s11, [pc, #196]	; 800dc4c <updateRealSearch+0x1cc>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800db8a:	edd3 4a03 	vldr	s9, [r3, #12]
 800db8e:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800db92:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800db96:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800dc50 <updateRealSearch+0x1d0>
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800db9a:	edd3 6a01 	vldr	s13, [r3, #4]
 800db9e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800dc48 <updateRealSearch+0x1c8>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dba2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800dba6:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800dbaa:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dbae:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800dbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dbb6:	eef4 7ac6 	vcmpe.f32	s15, s12
 800dbba:	bfcc      	ite	gt
 800dbbc:	2601      	movgt	r6, #1
 800dbbe:	2600      	movle	r6, #0
 800dbc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dbc4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800dbc8:	bfcc      	ite	gt
 800dbca:	2001      	movgt	r0, #1
 800dbcc:	2000      	movle	r0, #0
 800dbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd2:	bfcc      	ite	gt
 800dbd4:	2101      	movgt	r1, #1
 800dbd6:	2100      	movle	r1, #0
        break;
 800dbd8:	2200      	movs	r2, #0
 800dbda:	e78c      	b.n	800daf6 <updateRealSearch+0x76>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dbdc:	4b19      	ldr	r3, [pc, #100]	; (800dc44 <updateRealSearch+0x1c4>)
 800dbde:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 800dc50 <updateRealSearch+0x1d0>
 800dbe2:	edd3 4a03 	vldr	s9, [r3, #12]
 800dbe6:	edd3 7a00 	vldr	s15, [r3]
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dbea:	edd3 5a01 	vldr	s11, [r3, #4]
 800dbee:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800dc48 <updateRealSearch+0x1c8>
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dbf2:	edd3 6a02 	vldr	s13, [r3, #8]
 800dbf6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800dc4c <updateRealSearch+0x1cc>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dbfa:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800dbfe:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800dc02:	ee67 7aa4 	vmul.f32	s15, s15, s9
        break;
 800dc06:	2100      	movs	r1, #0
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dc08:	eef4 7ac5 	vcmpe.f32	s15, s10
 800dc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dc10:	eef4 5ac6 	vcmpe.f32	s11, s12
 800dc14:	bfcc      	ite	gt
 800dc16:	2601      	movgt	r6, #1
 800dc18:	460e      	movle	r6, r1
 800dc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dc1e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800dc22:	bfcc      	ite	gt
 800dc24:	2001      	movgt	r0, #1
 800dc26:	4608      	movle	r0, r1
 800dc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc2c:	bfcc      	ite	gt
 800dc2e:	2201      	movgt	r2, #1
 800dc30:	460a      	movle	r2, r1
        break;
 800dc32:	e760      	b.n	800daf6 <updateRealSearch+0x76>
    switch (my_mouse.now.car)
 800dc34:	2200      	movs	r2, #0
 800dc36:	4611      	mov	r1, r2
 800dc38:	4610      	mov	r0, r2
 800dc3a:	4616      	mov	r6, r2
 800dc3c:	e75b      	b.n	800daf6 <updateRealSearch+0x76>
 800dc3e:	bf00      	nop
 800dc40:	200004dc 	.word	0x200004dc
 800dc44:	2000490c 	.word	0x2000490c
 800dc48:	42b40000 	.word	0x42b40000
 800dc4c:	42c80000 	.word	0x42c80000
 800dc50:	42340000 	.word	0x42340000
 800dc54:	200004e4 	.word	0x200004e4
 800dc58:	20000688 	.word	0x20000688

0800dc5c <getNextDirection>:
//↑と↓は新ノードに来た時の処理なので、アクションの区切りをずらせばよさそう。
//現情報と次情報から次の進行方向を得る処理
void getNextDirection(maze_node *my_maze, profile *Mouse, char turn_mode)
{
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	460c      	mov	r4, r1
	//メインでノード選択
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800dc60:	2301      	movs	r3, #1
 800dc62:	7a89      	ldrb	r1, [r1, #10]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);

	//既知区間加速このswitch文中で書くかも
		//コマンドキューのときはここでコマンドを発行してキューに渡す
	AddVelocity = 0;
 800dc64:	4d32      	ldr	r5, [pc, #200]	; (800dd30 <getNextDirection+0xd4>)
{
 800dc66:	4616      	mov	r6, r2
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800dc68:	6922      	ldr	r2, [r4, #16]
 800dc6a:	f7fd feeb 	bl	800ba44 <getNextNode>
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800dc6e:	f104 0114 	add.w	r1, r4, #20
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800dc72:	4602      	mov	r2, r0
 800dc74:	61e0      	str	r0, [r4, #28]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800dc76:	f104 0008 	add.w	r0, r4, #8
 800dc7a:	f7fe f84f 	bl	800bd1c <getNextState>
	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
	switch(Mouse->next.dir)
 800dc7e:	7de3      	ldrb	r3, [r4, #23]
	AddVelocity = 0;
 800dc80:	2200      	movs	r2, #0
 800dc82:	602a      	str	r2, [r5, #0]
	switch(Mouse->next.dir)
 800dc84:	2b05      	cmp	r3, #5
 800dc86:	d852      	bhi.n	800dd2e <getNextDirection+0xd2>
 800dc88:	e8df f003 	tbb	[pc, r3]
 800dc8c:	31241b0c 	.word	0x31241b0c
 800dc90:	0344      	.short	0x0344
		Calc = SearchOrFast;
		TurnLeft(turn_mode);
		break;
	case left:
		//左旋回
		Calc = SearchOrFast;
 800dc92:	4a28      	ldr	r2, [pc, #160]	; (800dd34 <getNextDirection+0xd8>)
 800dc94:	4b28      	ldr	r3, [pc, #160]	; (800dd38 <getNextDirection+0xdc>)
 800dc96:	6812      	ldr	r2, [r2, #0]
 800dc98:	601a      	str	r2, [r3, #0]
		TurnLeft(turn_mode);
 800dc9a:	4630      	mov	r0, r6
		break;
	}

}
 800dc9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		TurnLeft(turn_mode);
 800dca0:	f7fc b80a 	b.w	8009cb8 <TurnLeft>
		Calc = SearchOrFast;
 800dca4:	4a23      	ldr	r2, [pc, #140]	; (800dd34 <getNextDirection+0xd8>)
		GoStraight(90, ExploreVelocity , AddVelocity);
 800dca6:	4925      	ldr	r1, [pc, #148]	; (800dd3c <getNextDirection+0xe0>)
		Calc = SearchOrFast;
 800dca8:	4b23      	ldr	r3, [pc, #140]	; (800dd38 <getNextDirection+0xdc>)
 800dcaa:	6812      	ldr	r2, [r2, #0]
		GoStraight(90, ExploreVelocity , AddVelocity);
 800dcac:	edd1 0a00 	vldr	s1, [r1]
 800dcb0:	ed9f 1a23 	vldr	s2, [pc, #140]	; 800dd40 <getNextDirection+0xe4>
 800dcb4:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800dd44 <getNextDirection+0xe8>
		Calc = SearchOrFast;
 800dcb8:	601a      	str	r2, [r3, #0]
}
 800dcba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		GoStraight(90, ExploreVelocity , AddVelocity);
 800dcbe:	f7fb be53 	b.w	8009968 <GoStraight>
		Calc = SearchOrFast;
 800dcc2:	4a1c      	ldr	r2, [pc, #112]	; (800dd34 <getNextDirection+0xd8>)
 800dcc4:	4b1c      	ldr	r3, [pc, #112]	; (800dd38 <getNextDirection+0xdc>)
 800dcc6:	6812      	ldr	r2, [r2, #0]
 800dcc8:	601a      	str	r2, [r3, #0]
		TurnRight(turn_mode);
 800dcca:	4630      	mov	r0, r6
}
 800dccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		TurnRight(turn_mode);
 800dcd0:	f7fb bf42 	b.w	8009b58 <TurnRight>
		Calc = 1;//マップ更新したくないときは1を代入。
 800dcd4:	4c18      	ldr	r4, [pc, #96]	; (800dd38 <getNextDirection+0xdc>)
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	6023      	str	r3, [r4, #0]
		GoBack();
 800dcda:	f7fc f8a1 	bl	8009e20 <GoBack>
		Calc = SearchOrFast;
 800dcde:	4b15      	ldr	r3, [pc, #84]	; (800dd34 <getNextDirection+0xd8>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	6023      	str	r3, [r4, #0]
		TurnRight(turn_mode);
 800dce4:	4630      	mov	r0, r6
}
 800dce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		TurnRight(turn_mode);
 800dcea:	f7fb bf35 	b.w	8009b58 <TurnRight>
		Calc = 1;//マップ更新したくないときは1を代入。
 800dcee:	4c12      	ldr	r4, [pc, #72]	; (800dd38 <getNextDirection+0xdc>)
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	6023      	str	r3, [r4, #0]
		GoBack();
 800dcf4:	f7fc f894 	bl	8009e20 <GoBack>
		Calc = SearchOrFast;
 800dcf8:	4b0e      	ldr	r3, [pc, #56]	; (800dd34 <getNextDirection+0xd8>)
		GoStraight(90, ExploreVelocity , AddVelocity);
 800dcfa:	4a10      	ldr	r2, [pc, #64]	; (800dd3c <getNextDirection+0xe0>)
		Calc = SearchOrFast;
 800dcfc:	681b      	ldr	r3, [r3, #0]
		GoStraight(90, ExploreVelocity , AddVelocity);
 800dcfe:	ed95 1a00 	vldr	s2, [r5]
		Calc = SearchOrFast;
 800dd02:	6023      	str	r3, [r4, #0]
		GoStraight(90, ExploreVelocity , AddVelocity);
 800dd04:	edd2 0a00 	vldr	s1, [r2]
 800dd08:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800dd44 <getNextDirection+0xe8>
}
 800dd0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		GoStraight(90, ExploreVelocity , AddVelocity);
 800dd10:	f7fb be2a 	b.w	8009968 <GoStraight>
		Calc = 1;//マップ更新したくないときは1を代入。
 800dd14:	4c08      	ldr	r4, [pc, #32]	; (800dd38 <getNextDirection+0xdc>)
 800dd16:	2301      	movs	r3, #1
 800dd18:	6023      	str	r3, [r4, #0]
		GoBack();
 800dd1a:	f7fc f881 	bl	8009e20 <GoBack>
		Calc = SearchOrFast;
 800dd1e:	4b05      	ldr	r3, [pc, #20]	; (800dd34 <getNextDirection+0xd8>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6023      	str	r3, [r4, #0]
		TurnLeft(turn_mode);
 800dd24:	4630      	mov	r0, r6
}
 800dd26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		TurnLeft(turn_mode);
 800dd2a:	f7fb bfc5 	b.w	8009cb8 <TurnLeft>
}
 800dd2e:	bd70      	pop	{r4, r5, r6, pc}
 800dd30:	200048a4 	.word	0x200048a4
 800dd34:	20004b38 	.word	0x20004b38
 800dd38:	20004b3c 	.word	0x20004b3c
 800dd3c:	200049c0 	.word	0x200049c0
 800dd40:	00000000 	.word	0x00000000
 800dd44:	42b40000 	.word	0x42b40000

0800dd48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dd48:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd4a:	1e16      	subs	r6, r2, #0
 800dd4c:	dd07      	ble.n	800dd5e <_read+0x16>
 800dd4e:	460c      	mov	r4, r1
 800dd50:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800dd52:	f7ff f943 	bl	800cfdc <__io_getchar>
 800dd56:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd5a:	42a5      	cmp	r5, r4
 800dd5c:	d1f9      	bne.n	800dd52 <_read+0xa>
	}

return len;
}
 800dd5e:	4630      	mov	r0, r6
 800dd60:	bd70      	pop	{r4, r5, r6, pc}
 800dd62:	bf00      	nop

0800dd64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800dd64:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd66:	1e16      	subs	r6, r2, #0
 800dd68:	dd07      	ble.n	800dd7a <_write+0x16>
 800dd6a:	460c      	mov	r4, r1
 800dd6c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800dd6e:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dd72:	f7ff f921 	bl	800cfb8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd76:	42ac      	cmp	r4, r5
 800dd78:	d1f9      	bne.n	800dd6e <_write+0xa>
	}
	return len;
}
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	bd70      	pop	{r4, r5, r6, pc}
 800dd7e:	bf00      	nop

0800dd80 <_close>:

int _close(int file)
{
	return -1;
}
 800dd80:	f04f 30ff 	mov.w	r0, #4294967295
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop

0800dd88 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800dd88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd8c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800dd8e:	2000      	movs	r0, #0
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop

0800dd94 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800dd94:	2001      	movs	r0, #1
 800dd96:	4770      	bx	lr

0800dd98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800dd98:	2000      	movs	r0, #0
 800dd9a:	4770      	bx	lr

0800dd9c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dd9c:	490c      	ldr	r1, [pc, #48]	; (800ddd0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dd9e:	4a0d      	ldr	r2, [pc, #52]	; (800ddd4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800dda0:	680b      	ldr	r3, [r1, #0]
{
 800dda2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dda4:	4c0c      	ldr	r4, [pc, #48]	; (800ddd8 <_sbrk+0x3c>)
 800dda6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800dda8:	b12b      	cbz	r3, 800ddb6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ddaa:	4418      	add	r0, r3
 800ddac:	4290      	cmp	r0, r2
 800ddae:	d807      	bhi.n	800ddc0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800ddb0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800ddb6:	4b09      	ldr	r3, [pc, #36]	; (800dddc <_sbrk+0x40>)
 800ddb8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800ddba:	4418      	add	r0, r3
 800ddbc:	4290      	cmp	r0, r2
 800ddbe:	d9f7      	bls.n	800ddb0 <_sbrk+0x14>
    errno = ENOMEM;
 800ddc0:	f004 f864 	bl	8011e8c <__errno>
 800ddc4:	230c      	movs	r3, #12
 800ddc6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800ddc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	bd10      	pop	{r4, pc}
 800ddd0:	20000238 	.word	0x20000238
 800ddd4:	20020000 	.word	0x20020000
 800ddd8:	00000400 	.word	0x00000400
 800dddc:	20004e50 	.word	0x20004e50

0800dde0 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800dde0:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800dde2:	2203      	movs	r2, #3
 800dde4:	4909      	ldr	r1, [pc, #36]	; (800de0c <ADCStart+0x2c>)
 800dde6:	480a      	ldr	r0, [pc, #40]	; (800de10 <ADCStart+0x30>)
 800dde8:	f001 f8a6 	bl	800ef38 <HAL_ADC_Start_DMA>
 800ddec:	b950      	cbnz	r0, 800de04 <ADCStart+0x24>
	{
		Error_Handler();
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800ddee:	2202      	movs	r2, #2
 800ddf0:	4908      	ldr	r1, [pc, #32]	; (800de14 <ADCStart+0x34>)
 800ddf2:	4809      	ldr	r0, [pc, #36]	; (800de18 <ADCStart+0x38>)
 800ddf4:	f001 f8a0 	bl	800ef38 <HAL_ADC_Start_DMA>
 800ddf8:	b900      	cbnz	r0, 800ddfc <ADCStart+0x1c>
	{
		Error_Handler();
	}

}
 800ddfa:	bd08      	pop	{r3, pc}
 800ddfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800de00:	f7ff bb7e 	b.w	800d500 <Error_Handler>
		Error_Handler();
 800de04:	f7ff fb7c 	bl	800d500 <Error_Handler>
 800de08:	e7f1      	b.n	800ddee <ADCStart+0xe>
 800de0a:	bf00      	nop
 800de0c:	200002bc 	.word	0x200002bc
 800de10:	20004ca0 	.word	0x20004ca0
 800de14:	200002c8 	.word	0x200002c8
 800de18:	20004bc0 	.word	0x20004bc0

0800de1c <ADCStop>:
void ADCStop()
{
 800de1c:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800de1e:	480e      	ldr	r0, [pc, #56]	; (800de58 <ADCStop+0x3c>)
 800de20:	f001 f92c 	bl	800f07c <HAL_ADC_Stop_DMA>
 800de24:	b970      	cbnz	r0, 800de44 <ADCStop+0x28>
	{
		printf("な\r\n");
		Error_Handler();
		printf("に\r\n");
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800de26:	480d      	ldr	r0, [pc, #52]	; (800de5c <ADCStop+0x40>)
 800de28:	f001 f928 	bl	800f07c <HAL_ADC_Stop_DMA>
 800de2c:	b900      	cbnz	r0, 800de30 <ADCStop+0x14>
	{
		printf("ぬ\r\n");
		Error_Handler();
		printf("ね\r\n");
	}
}
 800de2e:	bd08      	pop	{r3, pc}
		printf("ぬ\r\n");
 800de30:	480b      	ldr	r0, [pc, #44]	; (800de60 <ADCStop+0x44>)
 800de32:	f005 fdf3 	bl	8013a1c <puts>
		Error_Handler();
 800de36:	f7ff fb63 	bl	800d500 <Error_Handler>
		printf("ね\r\n");
 800de3a:	480a      	ldr	r0, [pc, #40]	; (800de64 <ADCStop+0x48>)
}
 800de3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("ね\r\n");
 800de40:	f005 bdec 	b.w	8013a1c <puts>
		printf("な\r\n");
 800de44:	4808      	ldr	r0, [pc, #32]	; (800de68 <ADCStop+0x4c>)
 800de46:	f005 fde9 	bl	8013a1c <puts>
		Error_Handler();
 800de4a:	f7ff fb59 	bl	800d500 <Error_Handler>
		printf("に\r\n");
 800de4e:	4807      	ldr	r0, [pc, #28]	; (800de6c <ADCStop+0x50>)
 800de50:	f005 fde4 	bl	8013a1c <puts>
 800de54:	e7e7      	b.n	800de26 <ADCStop+0xa>
 800de56:	bf00      	nop
 800de58:	20004ca0 	.word	0x20004ca0
 800de5c:	20004bc0 	.word	0x20004bc0
 800de60:	08017220 	.word	0x08017220
 800de64:	08017228 	.word	0x08017228
 800de68:	08017210 	.word	0x08017210
 800de6c:	08017218 	.word	0x08017218

0800de70 <FLASH_Read_Word>:
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
	FLASH->KEYR =  0x45670123;
 800de70:	4b10      	ldr	r3, [pc, #64]	; (800deb4 <FLASH_Read_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800de72:	4a11      	ldr	r2, [pc, #68]	; (800deb8 <FLASH_Read_Word+0x48>)
	FLASH->CR &= ~FLASH_CR_PG;

	FLASH_Lock();
}
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800de74:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800de76:	4c11      	ldr	r4, [pc, #68]	; (800debc <FLASH_Read_Word+0x4c>)
 800de78:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800de7a:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800de7c:	68da      	ldr	r2, [r3, #12]
 800de7e:	03d2      	lsls	r2, r2, #15
 800de80:	d4fc      	bmi.n	800de7c <FLASH_Read_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800de82:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800de84:	4a0b      	ldr	r2, [pc, #44]	; (800deb4 <FLASH_Read_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800de86:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800de8a:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800de8c:	691c      	ldr	r4, [r3, #16]
 800de8e:	f044 0401 	orr.w	r4, r4, #1
 800de92:	611c      	str	r4, [r3, #16]

	* data = *(__IO uint32_t*)address;
 800de94:	6803      	ldr	r3, [r0, #0]
 800de96:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800de98:	68d3      	ldr	r3, [r2, #12]
 800de9a:	03db      	lsls	r3, r3, #15
 800de9c:	d4fc      	bmi.n	800de98 <FLASH_Read_Word+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800de9e:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800dea0:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800dea4:	f023 0301 	bic.w	r3, r3, #1
 800dea8:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800deaa:	6913      	ldr	r3, [r2, #16]
 800deac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800deb0:	6113      	str	r3, [r2, #16]
}
 800deb2:	4770      	bx	lr
 800deb4:	40023c00 	.word	0x40023c00
 800deb8:	cdef89ab 	.word	0xcdef89ab
 800debc:	45670123 	.word	0x45670123

0800dec0 <FLASH_Write_Word_F>:
	FLASH->KEYR =  0x45670123;
 800dec0:	4b0f      	ldr	r3, [pc, #60]	; (800df00 <FLASH_Write_Word_F+0x40>)
 800dec2:	4910      	ldr	r1, [pc, #64]	; (800df04 <FLASH_Write_Word_F+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800dec4:	4a10      	ldr	r2, [pc, #64]	; (800df08 <FLASH_Write_Word_F+0x48>)
	FLASH->KEYR =  0x45670123;
 800dec6:	6059      	str	r1, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800dec8:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800deca:	68da      	ldr	r2, [r3, #12]
 800decc:	03d2      	lsls	r2, r2, #15
 800dece:	d4fc      	bmi.n	800deca <FLASH_Write_Word_F+0xa>
{
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ded0:	6919      	ldr	r1, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800ded2:	4a0b      	ldr	r2, [pc, #44]	; (800df00 <FLASH_Write_Word_F+0x40>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800ded4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800ded8:	6119      	str	r1, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800deda:	6919      	ldr	r1, [r3, #16]
 800dedc:	f041 0101 	orr.w	r1, r1, #1
 800dee0:	6119      	str	r1, [r3, #16]

	*(__IO float*)address = data;
 800dee2:	ed80 0a00 	vstr	s0, [r0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dee6:	68d3      	ldr	r3, [r2, #12]
 800dee8:	03db      	lsls	r3, r3, #15
 800deea:	d4fc      	bmi.n	800dee6 <FLASH_Write_Word_F+0x26>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800deec:	6913      	ldr	r3, [r2, #16]
 800deee:	f023 0301 	bic.w	r3, r3, #1
 800def2:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800def4:	6913      	ldr	r3, [r2, #16]
 800def6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800defa:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
}
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	40023c00 	.word	0x40023c00
 800df04:	45670123 	.word	0x45670123
 800df08:	cdef89ab 	.word	0xcdef89ab

0800df0c <FLASH_Read_Word_F>:
	FLASH->KEYR =  0x45670123;
 800df0c:	4b10      	ldr	r3, [pc, #64]	; (800df50 <FLASH_Read_Word_F+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800df0e:	4a11      	ldr	r2, [pc, #68]	; (800df54 <FLASH_Read_Word_F+0x48>)
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800df10:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800df12:	4c11      	ldr	r4, [pc, #68]	; (800df58 <FLASH_Read_Word_F+0x4c>)
 800df14:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800df16:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800df18:	68da      	ldr	r2, [r3, #12]
 800df1a:	03d2      	lsls	r2, r2, #15
 800df1c:	d4fc      	bmi.n	800df18 <FLASH_Read_Word_F+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800df1e:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800df20:	4a0b      	ldr	r2, [pc, #44]	; (800df50 <FLASH_Read_Word_F+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800df22:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800df26:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800df28:	691c      	ldr	r4, [r3, #16]
 800df2a:	f044 0401 	orr.w	r4, r4, #1
 800df2e:	611c      	str	r4, [r3, #16]

	* data = *(__IO float*)address;
 800df30:	6803      	ldr	r3, [r0, #0]
 800df32:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800df34:	68d3      	ldr	r3, [r2, #12]
 800df36:	03db      	lsls	r3, r3, #15
 800df38:	d4fc      	bmi.n	800df34 <FLASH_Read_Word_F+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800df3a:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800df3c:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800df40:	f023 0301 	bic.w	r3, r3, #1
 800df44:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800df46:	6913      	ldr	r3, [r2, #16]
 800df48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df4c:	6113      	str	r3, [r2, #16]
}
 800df4e:	4770      	bx	lr
 800df50:	40023c00 	.word	0x40023c00
 800df54:	cdef89ab 	.word	0xcdef89ab
 800df58:	45670123 	.word	0x45670123

0800df5c <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800df5c:	b530      	push	{r4, r5, lr}
 800df5e:	b087      	sub	sp, #28
    HAL_FLASH_Unlock();
 800df60:	f001 fc18 	bl	800f794 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800df64:	2509      	movs	r5, #9
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800df66:	2202      	movs	r2, #2
    EraseInitStruct.NbSectors = 1;
 800df68:	2301      	movs	r3, #1
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800df6a:	2400      	movs	r4, #0

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800df6c:	4669      	mov	r1, sp
 800df6e:	a801      	add	r0, sp, #4
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800df70:	9503      	str	r5, [sp, #12]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800df72:	9401      	str	r4, [sp, #4]
    EraseInitStruct.NbSectors = 1;
 800df74:	e9cd 3204 	strd	r3, r2, [sp, #16]
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800df78:	f001 fc88 	bl	800f88c <HAL_FLASHEx_Erase>
 800df7c:	4605      	mov	r5, r0

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800df7e:	f001 fc1d 	bl	800f7bc <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800df82:	b93d      	cbnz	r5, 800df94 <Flash_clear_sector9+0x38>
 800df84:	9800      	ldr	r0, [sp, #0]
 800df86:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800df8a:	fab0 f080 	clz	r0, r0
 800df8e:	0940      	lsrs	r0, r0, #5
}
 800df90:	b007      	add	sp, #28
 800df92:	bd30      	pop	{r4, r5, pc}
 800df94:	4620      	mov	r0, r4
 800df96:	b007      	add	sp, #28
 800df98:	bd30      	pop	{r4, r5, pc}
 800df9a:	bf00      	nop

0800df9c <ReadIMU>:
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
}
inline float ReadIMU(uint8_t a, uint8_t b) {
 800df9c:	b570      	push	{r4, r5, r6, lr}
	ret2 = ret[1] | 0x80;
//	reg[0] = 0x37;
//	reg[1] = 0x38;
//
//	ret = reg[0] | 0x80;
	CS_RESET;
 800df9e:	4c23      	ldr	r4, [pc, #140]	; (800e02c <ReadIMU+0x90>)
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800dfa0:	4d23      	ldr	r5, [pc, #140]	; (800e030 <ReadIMU+0x94>)
inline float ReadIMU(uint8_t a, uint8_t b) {
 800dfa2:	b082      	sub	sp, #8
	ret2 = ret[1] | 0x80;
 800dfa4:	f061 037f 	orn	r3, r1, #127	; 0x7f
	ret1 = ret[0] | 0x80;
 800dfa8:	f060 067f 	orn	r6, r0, #127	; 0x7f
	CS_RESET;
 800dfac:	2200      	movs	r2, #0
 800dfae:	4620      	mov	r0, r4
 800dfb0:	2104      	movs	r1, #4
	ret2 = ret[1] | 0x80;
 800dfb2:	f88d 3005 	strb.w	r3, [sp, #5]
	ret1 = ret[0] | 0x80;
 800dfb6:	f88d 6004 	strb.w	r6, [sp, #4]
	CS_RESET;
 800dfba:	f001 fe1b 	bl	800fbf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800dfbe:	a901      	add	r1, sp, #4
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	2364      	movs	r3, #100	; 0x64
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	f002 f937 	bl	8010238 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800dfca:	2364      	movs	r3, #100	; 0x64
 800dfcc:	f10d 0106 	add.w	r1, sp, #6
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	f002 fa78 	bl	80104c8 <HAL_SPI_Receive>
	CS_SET;
 800dfd8:	4620      	mov	r0, r4
 800dfda:	2201      	movs	r2, #1
 800dfdc:	2104      	movs	r1, #4
 800dfde:	f001 fe09 	bl	800fbf4 <HAL_GPIO_WritePin>

//	ret = reg[1] | 0x80;
	CS_RESET;
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	2104      	movs	r1, #4
 800dfe8:	f001 fe04 	bl	800fbf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800dfec:	f10d 0105 	add.w	r1, sp, #5
 800dff0:	4628      	mov	r0, r5
 800dff2:	2364      	movs	r3, #100	; 0x64
 800dff4:	2201      	movs	r2, #1
 800dff6:	f002 f91f 	bl	8010238 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800dffa:	2364      	movs	r3, #100	; 0x64
 800dffc:	f10d 0107 	add.w	r1, sp, #7
 800e000:	4628      	mov	r0, r5
 800e002:	2201      	movs	r2, #1
 800e004:	f002 fa60 	bl	80104c8 <HAL_SPI_Receive>
	CS_SET;
 800e008:	4620      	mov	r0, r4
 800e00a:	2201      	movs	r2, #1
 800e00c:	2104      	movs	r1, #4
 800e00e:	f001 fdf1 	bl	800fbf4 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800e012:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e016:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e01a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	res = (float)law_data;
 800e01e:	b21b      	sxth	r3, r3
 800e020:	ee00 3a10 	vmov	s0, r3
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return res;
}
 800e024:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800e028:	b002      	add	sp, #8
 800e02a:	bd70      	pop	{r4, r5, r6, pc}
 800e02c:	40020c00 	.word	0x40020c00
 800e030:	20004c48 	.word	0x20004c48

0800e034 <IMU_init>:
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
	HAL_SPI_Transmit(&hspi3,&val,1,100);
	CS_SET;
}

uint8_t IMU_init() {
 800e034:	b570      	push	{r4, r5, r6, lr}
 800e036:	b082      	sub	sp, #8
	ret = reg | 0x80;
 800e038:	ad02      	add	r5, sp, #8
 800e03a:	2380      	movs	r3, #128	; 0x80
 800e03c:	f805 3d02 	strb.w	r3, [r5, #-2]!
	CS_RESET;
 800e040:	2200      	movs	r2, #0
 800e042:	2104      	movs	r1, #4
 800e044:	4866      	ldr	r0, [pc, #408]	; (800e1e0 <IMU_init+0x1ac>)
 800e046:	f001 fdd5 	bl	800fbf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e04a:	4629      	mov	r1, r5
 800e04c:	2364      	movs	r3, #100	; 0x64
 800e04e:	2201      	movs	r2, #1
 800e050:	4864      	ldr	r0, [pc, #400]	; (800e1e4 <IMU_init+0x1b0>)
 800e052:	f002 f8f1 	bl	8010238 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800e056:	2364      	movs	r3, #100	; 0x64
 800e058:	f10d 0107 	add.w	r1, sp, #7
 800e05c:	2201      	movs	r2, #1
 800e05e:	4861      	ldr	r0, [pc, #388]	; (800e1e4 <IMU_init+0x1b0>)
 800e060:	f002 fa32 	bl	80104c8 <HAL_SPI_Receive>
	CS_SET;
 800e064:	2201      	movs	r2, #1
 800e066:	2104      	movs	r1, #4
 800e068:	485d      	ldr	r0, [pc, #372]	; (800e1e0 <IMU_init+0x1ac>)
 800e06a:	f001 fdc3 	bl	800fbf4 <HAL_GPIO_WritePin>
	return val;
 800e06e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
	if ( who_am_i == 0xE0 ) {
 800e072:	2be0      	cmp	r3, #224	; 0xe0
 800e074:	d002      	beq.n	800e07c <IMU_init+0x48>
		write_byte(0x7F,0x00);	//USER_BANK0
	}
	return ret;
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800e076:	2001      	movs	r0, #1
 800e078:	b002      	add	sp, #8
 800e07a:	bd70      	pop	{r4, r5, r6, pc}
 800e07c:	2401      	movs	r4, #1
	ret = reg & 0x7F;
 800e07e:	2306      	movs	r3, #6
	CS_RESET;
 800e080:	2200      	movs	r2, #0
 800e082:	2104      	movs	r1, #4
 800e084:	4856      	ldr	r0, [pc, #344]	; (800e1e0 <IMU_init+0x1ac>)
	ret = reg & 0x7F;
 800e086:	f88d 3007 	strb.w	r3, [sp, #7]
 800e08a:	f88d 4006 	strb.w	r4, [sp, #6]
	CS_RESET;
 800e08e:	f001 fdb1 	bl	800fbf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e092:	4622      	mov	r2, r4
 800e094:	f10d 0107 	add.w	r1, sp, #7
 800e098:	2364      	movs	r3, #100	; 0x64
 800e09a:	4852      	ldr	r0, [pc, #328]	; (800e1e4 <IMU_init+0x1b0>)
 800e09c:	f002 f8cc 	bl	8010238 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	4622      	mov	r2, r4
 800e0a4:	2364      	movs	r3, #100	; 0x64
 800e0a6:	484f      	ldr	r0, [pc, #316]	; (800e1e4 <IMU_init+0x1b0>)
 800e0a8:	f002 f8c6 	bl	8010238 <HAL_SPI_Transmit>
	CS_SET;
 800e0ac:	4622      	mov	r2, r4
 800e0ae:	2104      	movs	r1, #4
 800e0b0:	484b      	ldr	r0, [pc, #300]	; (800e1e0 <IMU_init+0x1ac>)
 800e0b2:	f001 fd9f 	bl	800fbf4 <HAL_GPIO_WritePin>
 800e0b6:	2510      	movs	r5, #16
	ret = reg & 0x7F;
 800e0b8:	2303      	movs	r3, #3
	CS_RESET;
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	2104      	movs	r1, #4
 800e0be:	4848      	ldr	r0, [pc, #288]	; (800e1e0 <IMU_init+0x1ac>)
 800e0c0:	f88d 5005 	strb.w	r5, [sp, #5]
	ret = reg & 0x7F;
 800e0c4:	f88d 3007 	strb.w	r3, [sp, #7]
	CS_RESET;
 800e0c8:	f001 fd94 	bl	800fbf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e0cc:	4622      	mov	r2, r4
 800e0ce:	f10d 0107 	add.w	r1, sp, #7
 800e0d2:	2364      	movs	r3, #100	; 0x64
 800e0d4:	4843      	ldr	r0, [pc, #268]	; (800e1e4 <IMU_init+0x1b0>)
 800e0d6:	f002 f8af 	bl	8010238 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800e0da:	4622      	mov	r2, r4
 800e0dc:	2364      	movs	r3, #100	; 0x64
 800e0de:	f10d 0105 	add.w	r1, sp, #5
 800e0e2:	4840      	ldr	r0, [pc, #256]	; (800e1e4 <IMU_init+0x1b0>)
 800e0e4:	f002 f8a8 	bl	8010238 <HAL_SPI_Transmit>
	CS_SET;
 800e0e8:	4622      	mov	r2, r4
 800e0ea:	2104      	movs	r1, #4
 800e0ec:	483c      	ldr	r0, [pc, #240]	; (800e1e0 <IMU_init+0x1ac>)
 800e0ee:	f001 fd81 	bl	800fbf4 <HAL_GPIO_WritePin>
	ret = reg & 0x7F;
 800e0f2:	257f      	movs	r5, #127	; 0x7f
 800e0f4:	2320      	movs	r3, #32
	CS_RESET;
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	2104      	movs	r1, #4
 800e0fa:	4839      	ldr	r0, [pc, #228]	; (800e1e0 <IMU_init+0x1ac>)
 800e0fc:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = reg & 0x7F;
 800e100:	f88d 5007 	strb.w	r5, [sp, #7]
	CS_RESET;
 800e104:	f001 fd76 	bl	800fbf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e108:	4622      	mov	r2, r4
 800e10a:	f10d 0107 	add.w	r1, sp, #7
 800e10e:	2364      	movs	r3, #100	; 0x64
 800e110:	4834      	ldr	r0, [pc, #208]	; (800e1e4 <IMU_init+0x1b0>)
 800e112:	f002 f891 	bl	8010238 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800e116:	2364      	movs	r3, #100	; 0x64
 800e118:	4622      	mov	r2, r4
 800e11a:	a901      	add	r1, sp, #4
 800e11c:	4831      	ldr	r0, [pc, #196]	; (800e1e4 <IMU_init+0x1b0>)
 800e11e:	f002 f88b 	bl	8010238 <HAL_SPI_Transmit>
	CS_SET;
 800e122:	4622      	mov	r2, r4
 800e124:	2104      	movs	r1, #4
 800e126:	482e      	ldr	r0, [pc, #184]	; (800e1e0 <IMU_init+0x1ac>)
 800e128:	f001 fd64 	bl	800fbf4 <HAL_GPIO_WritePin>
 800e12c:	2617      	movs	r6, #23
	CS_RESET;
 800e12e:	2200      	movs	r2, #0
 800e130:	2104      	movs	r1, #4
 800e132:	482b      	ldr	r0, [pc, #172]	; (800e1e0 <IMU_init+0x1ac>)
	ret = reg & 0x7F;
 800e134:	f88d 4007 	strb.w	r4, [sp, #7]
 800e138:	f88d 6003 	strb.w	r6, [sp, #3]
	CS_RESET;
 800e13c:	f001 fd5a 	bl	800fbf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e140:	4622      	mov	r2, r4
 800e142:	f10d 0107 	add.w	r1, sp, #7
 800e146:	2364      	movs	r3, #100	; 0x64
 800e148:	4826      	ldr	r0, [pc, #152]	; (800e1e4 <IMU_init+0x1b0>)
 800e14a:	f002 f875 	bl	8010238 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800e14e:	4622      	mov	r2, r4
 800e150:	2364      	movs	r3, #100	; 0x64
 800e152:	f10d 0103 	add.w	r1, sp, #3
 800e156:	4823      	ldr	r0, [pc, #140]	; (800e1e4 <IMU_init+0x1b0>)
 800e158:	f002 f86e 	bl	8010238 <HAL_SPI_Transmit>
	CS_SET;
 800e15c:	4622      	mov	r2, r4
 800e15e:	2104      	movs	r1, #4
 800e160:	481f      	ldr	r0, [pc, #124]	; (800e1e0 <IMU_init+0x1ac>)
 800e162:	f001 fd47 	bl	800fbf4 <HAL_GPIO_WritePin>
	ret = reg & 0x7F;
 800e166:	2314      	movs	r3, #20
	CS_RESET;
 800e168:	2200      	movs	r2, #0
 800e16a:	2104      	movs	r1, #4
 800e16c:	481c      	ldr	r0, [pc, #112]	; (800e1e0 <IMU_init+0x1ac>)
	ret = reg & 0x7F;
 800e16e:	f88d 3007 	strb.w	r3, [sp, #7]
 800e172:	f88d 6002 	strb.w	r6, [sp, #2]
	CS_RESET;
 800e176:	f001 fd3d 	bl	800fbf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e17a:	4622      	mov	r2, r4
 800e17c:	f10d 0107 	add.w	r1, sp, #7
 800e180:	2364      	movs	r3, #100	; 0x64
 800e182:	4818      	ldr	r0, [pc, #96]	; (800e1e4 <IMU_init+0x1b0>)
 800e184:	f002 f858 	bl	8010238 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800e188:	4622      	mov	r2, r4
 800e18a:	2364      	movs	r3, #100	; 0x64
 800e18c:	f10d 0102 	add.w	r1, sp, #2
 800e190:	4814      	ldr	r0, [pc, #80]	; (800e1e4 <IMU_init+0x1b0>)
 800e192:	f002 f851 	bl	8010238 <HAL_SPI_Transmit>
	CS_SET;
 800e196:	4622      	mov	r2, r4
 800e198:	2104      	movs	r1, #4
 800e19a:	4811      	ldr	r0, [pc, #68]	; (800e1e0 <IMU_init+0x1ac>)
 800e19c:	f001 fd2a 	bl	800fbf4 <HAL_GPIO_WritePin>
 800e1a0:	2300      	movs	r3, #0
	CS_RESET;
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	2104      	movs	r1, #4
 800e1a6:	480e      	ldr	r0, [pc, #56]	; (800e1e0 <IMU_init+0x1ac>)
 800e1a8:	f88d 3001 	strb.w	r3, [sp, #1]
	ret = reg & 0x7F;
 800e1ac:	f88d 5007 	strb.w	r5, [sp, #7]
	CS_RESET;
 800e1b0:	f001 fd20 	bl	800fbf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e1b4:	f10d 0107 	add.w	r1, sp, #7
 800e1b8:	4622      	mov	r2, r4
 800e1ba:	2364      	movs	r3, #100	; 0x64
 800e1bc:	4809      	ldr	r0, [pc, #36]	; (800e1e4 <IMU_init+0x1b0>)
 800e1be:	f002 f83b 	bl	8010238 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800e1c2:	4622      	mov	r2, r4
 800e1c4:	2364      	movs	r3, #100	; 0x64
 800e1c6:	eb0d 0104 	add.w	r1, sp, r4
 800e1ca:	4806      	ldr	r0, [pc, #24]	; (800e1e4 <IMU_init+0x1b0>)
 800e1cc:	f002 f834 	bl	8010238 <HAL_SPI_Transmit>
	CS_SET;
 800e1d0:	4622      	mov	r2, r4
 800e1d2:	2104      	movs	r1, #4
 800e1d4:	4802      	ldr	r0, [pc, #8]	; (800e1e0 <IMU_init+0x1ac>)
 800e1d6:	f001 fd0d 	bl	800fbf4 <HAL_GPIO_WritePin>
}
 800e1da:	2001      	movs	r0, #1
 800e1dc:	b002      	add	sp, #8
 800e1de:	bd70      	pop	{r4, r5, r6, pc}
 800e1e0:	40020c00 	.word	0x40020c00
 800e1e4:	20004c48 	.word	0x20004c48

0800e1e8 <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800e1e8:	b538      	push	{r3, r4, r5, lr}


	HAL_Delay(100);
 800e1ea:	2064      	movs	r0, #100	; 0x64
void IMU_Calib(){
 800e1ec:	ed2d 8b02 	vpush	{d8}
	HAL_Delay(100);
 800e1f0:	f000 fdde 	bl	800edb0 <HAL_Delay>

	int num = 2000;
	float zg_vals[2000]={0.0f};
	float sum=0;
 800e1f4:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 800e224 <IMU_Calib+0x3c>
 800e1f8:	4d0b      	ldr	r5, [pc, #44]	; (800e228 <IMU_Calib+0x40>)
	HAL_Delay(100);
 800e1fa:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	for(int i = 0; i < num; i++){
		zg_vals[i] = ZGyro;
		sum += zg_vals[i];
 800e1fe:	edd5 7a00 	vldr	s15, [r5]
		HAL_Delay(2);
 800e202:	2002      	movs	r0, #2
		sum += zg_vals[i];
 800e204:	ee38 8a27 	vadd.f32	s16, s16, s15
		HAL_Delay(2);
 800e208:	f000 fdd2 	bl	800edb0 <HAL_Delay>
	for(int i = 0; i < num; i++){
 800e20c:	3c01      	subs	r4, #1
 800e20e:	d1f6      	bne.n	800e1fe <IMU_Calib+0x16>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800e210:	eddf 7a06 	vldr	s15, [pc, #24]	; 800e22c <IMU_Calib+0x44>
 800e214:	4b06      	ldr	r3, [pc, #24]	; (800e230 <IMU_Calib+0x48>)
 800e216:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e21a:	ed83 8a00 	vstr	s16, [r3]
}
 800e21e:	ecbd 8b02 	vpop	{d8}
 800e222:	bd38      	pop	{r3, r4, r5, pc}
 800e224:	00000000 	.word	0x00000000
 800e228:	200002d0 	.word	0x200002d0
 800e22c:	3a03126f 	.word	0x3a03126f
 800e230:	200002d4 	.word	0x200002d4

0800e234 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800e234:	b508      	push	{r3, lr}
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800e236:	213c      	movs	r1, #60	; 0x3c
 800e238:	4804      	ldr	r0, [pc, #16]	; (800e24c <EncoderStart+0x18>)
 800e23a:	f002 ff99 	bl	8011170 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e23e:	213c      	movs	r1, #60	; 0x3c
 800e240:	4803      	ldr	r0, [pc, #12]	; (800e250 <EncoderStart+0x1c>)
}
 800e242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e246:	f002 bf93 	b.w	8011170 <HAL_TIM_Encoder_Start>
 800e24a:	bf00      	nop
 800e24c:	20004c08 	.word	0x20004c08
 800e250:	20004b80 	.word	0x20004b80

0800e254 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800e254:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800e256:	4c05      	ldr	r4, [pc, #20]	; (800e26c <EmitterON+0x18>)
 800e258:	2100      	movs	r1, #0
 800e25a:	4620      	mov	r0, r4
 800e25c:	f002 fd40 	bl	8010ce0 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e260:	4620      	mov	r0, r4
 800e262:	2100      	movs	r1, #0

}
 800e264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e268:	f003 bb08 	b.w	801187c <HAL_TIMEx_OCN_Start_IT>
 800e26c:	20004b40 	.word	0x20004b40

0800e270 <EmitterOFF>:
void EmitterOFF()
{
 800e270:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800e272:	4c05      	ldr	r4, [pc, #20]	; (800e288 <EmitterOFF+0x18>)
 800e274:	2100      	movs	r1, #0
 800e276:	4620      	mov	r0, r4
 800e278:	f002 fd7a 	bl	8010d70 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e27c:	4620      	mov	r0, r4
 800e27e:	2100      	movs	r1, #0

}
 800e280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e284:	f003 bb2e 	b.w	80118e4 <HAL_TIMEx_OCN_Stop_IT>
 800e288:	20004b40 	.word	0x20004b40

0800e28c <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800e28c:	b508      	push	{r3, lr}
	//Switch
	switch(mode){
 800e28e:	2807      	cmp	r0, #7
 800e290:	d851      	bhi.n	800e336 <ChangeLED+0xaa>
 800e292:	e8df f000 	tbb	[pc, r0]
 800e296:	2c18      	.short	0x2c18
 800e298:	463e362e 	.word	0x463e362e
 800e29c:	044e      	.short	0x044e
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);

		break;
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2a4:	4824      	ldr	r0, [pc, #144]	; (800e338 <ChangeLED+0xac>)
 800e2a6:	f001 fca5 	bl	800fbf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e2b0:	4821      	ldr	r0, [pc, #132]	; (800e338 <ChangeLED+0xac>)
 800e2b2:	f001 fc9f 	bl	800fbf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2bc:	481f      	ldr	r0, [pc, #124]	; (800e33c <ChangeLED+0xb0>)

		break;
	default: break;

	}
}
 800e2be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e2c2:	f001 bc97 	b.w	800fbf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e2c6:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e2c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2cc:	481a      	ldr	r0, [pc, #104]	; (800e338 <ChangeLED+0xac>)
 800e2ce:	f001 fc91 	bl	800fbf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e2d8:	4817      	ldr	r0, [pc, #92]	; (800e338 <ChangeLED+0xac>)
 800e2da:	f001 fc8b 	bl	800fbf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2e4:	4815      	ldr	r0, [pc, #84]	; (800e33c <ChangeLED+0xb0>)
}
 800e2e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e2ea:	f001 bc83 	b.w	800fbf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	e7ea      	b.n	800e2c8 <ChangeLED+0x3c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2f8:	480f      	ldr	r0, [pc, #60]	; (800e338 <ChangeLED+0xac>)
 800e2fa:	f001 fc7b 	bl	800fbf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e2fe:	2201      	movs	r2, #1
 800e300:	e7e8      	b.n	800e2d4 <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e302:	2201      	movs	r2, #1
 800e304:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e308:	480b      	ldr	r0, [pc, #44]	; (800e338 <ChangeLED+0xac>)
 800e30a:	f001 fc73 	bl	800fbf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e30e:	2201      	movs	r2, #1
 800e310:	e7e0      	b.n	800e2d4 <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e312:	2200      	movs	r2, #0
 800e314:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e318:	4807      	ldr	r0, [pc, #28]	; (800e338 <ChangeLED+0xac>)
 800e31a:	f001 fc6b 	bl	800fbf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e31e:	2200      	movs	r2, #0
 800e320:	e7c4      	b.n	800e2ac <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e322:	2201      	movs	r2, #1
 800e324:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e328:	4803      	ldr	r0, [pc, #12]	; (800e338 <ChangeLED+0xac>)
 800e32a:	f001 fc63 	bl	800fbf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e32e:	2200      	movs	r2, #0
 800e330:	e7bc      	b.n	800e2ac <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e332:	2200      	movs	r2, #0
 800e334:	e7b4      	b.n	800e2a0 <ChangeLED+0x14>
}
 800e336:	bd08      	pop	{r3, pc}
 800e338:	40020800 	.word	0x40020800
 800e33c:	40020400 	.word	0x40020400

0800e340 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800e340:	b508      	push	{r3, lr}
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800e342:	210c      	movs	r1, #12
 800e344:	4808      	ldr	r0, [pc, #32]	; (800e368 <Motor_PWM_Start+0x28>)
 800e346:	f002 fdef 	bl	8010f28 <HAL_TIM_PWM_Start>
 800e34a:	b948      	cbnz	r0, 800e360 <Motor_PWM_Start+0x20>
  {
	  Error_Handler();
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800e34c:	2104      	movs	r1, #4
 800e34e:	4807      	ldr	r0, [pc, #28]	; (800e36c <Motor_PWM_Start+0x2c>)
 800e350:	f002 fdea 	bl	8010f28 <HAL_TIM_PWM_Start>
 800e354:	b900      	cbnz	r0, 800e358 <Motor_PWM_Start+0x18>
  {
	  Error_Handler();
  }
#endif
}
 800e356:	bd08      	pop	{r3, pc}
 800e358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 800e35c:	f7ff b8d0 	b.w	800d500 <Error_Handler>
	  Error_Handler();
 800e360:	f7ff f8ce 	bl	800d500 <Error_Handler>
 800e364:	e7f2      	b.n	800e34c <Motor_PWM_Start+0xc>
 800e366:	bf00      	nop
 800e368:	2000023c 	.word	0x2000023c
 800e36c:	2000027c 	.word	0x2000027c

0800e370 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800e370:	b508      	push	{r3, lr}
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800e372:	210c      	movs	r1, #12
 800e374:	4808      	ldr	r0, [pc, #32]	; (800e398 <Motor_PWM_Stop+0x28>)
 800e376:	f002 fe01 	bl	8010f7c <HAL_TIM_PWM_Stop>
 800e37a:	b948      	cbnz	r0, 800e390 <Motor_PWM_Stop+0x20>
  {
	  Error_Handler();
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800e37c:	2104      	movs	r1, #4
 800e37e:	4807      	ldr	r0, [pc, #28]	; (800e39c <Motor_PWM_Stop+0x2c>)
 800e380:	f002 fdfc 	bl	8010f7c <HAL_TIM_PWM_Stop>
 800e384:	b900      	cbnz	r0, 800e388 <Motor_PWM_Stop+0x18>
  {
	  Error_Handler();
  }
#endif
}
 800e386:	bd08      	pop	{r3, pc}
 800e388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 800e38c:	f7ff b8b8 	b.w	800d500 <Error_Handler>
	  Error_Handler();
 800e390:	f7ff f8b6 	bl	800d500 <Error_Handler>
 800e394:	e7f2      	b.n	800e37c <Motor_PWM_Stop+0xc>
 800e396:	bf00      	nop
 800e398:	2000023c 	.word	0x2000023c
 800e39c:	2000027c 	.word	0x2000027c

0800e3a0 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > 0 ){
 800e3a2:	1e05      	subs	r5, r0, #0
inline void Motor_Switch(int left, int right){
 800e3a4:	460c      	mov	r4, r1
	if (left > 0 ){
 800e3a6:	dc1a      	bgt.n	800e3de <Motor_Switch+0x3e>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転

	}
	else  if (left < 0){
 800e3a8:	d142      	bne.n	800e430 <Motor_Switch+0x90>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
		left = -left;
	}
	if (right > 0){
 800e3aa:	2c00      	cmp	r4, #0
 800e3ac:	f04f 0600 	mov.w	r6, #0
 800e3b0:	f04f 0700 	mov.w	r7, #0
 800e3b4:	dc1f      	bgt.n	800e3f6 <Motor_Switch+0x56>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転

	}

	else if (right < 0){
 800e3b6:	d13e      	bne.n	800e436 <Motor_Switch+0x96>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
	  	right = -right;
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800e3b8:	a323      	add	r3, pc, #140	; (adr r3, 800e448 <Motor_Switch+0xa8>)
 800e3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3be:	4630      	mov	r0, r6
 800e3c0:	4639      	mov	r1, r7
 800e3c2:	f7fa fae1 	bl	8008988 <__aeabi_dcmpgt>
 800e3c6:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	bf18      	it	ne
 800e3ce:	461d      	movne	r5, r3
	if(right > 4200*0.6) right = 4200*0.6;


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800e3d0:	4a1f      	ldr	r2, [pc, #124]	; (800e450 <Motor_Switch+0xb0>)
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800e3d2:	4b20      	ldr	r3, [pc, #128]	; (800e454 <Motor_Switch+0xb4>)
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800e3d4:	6812      	ldr	r2, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800e3d6:	681b      	ldr	r3, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800e3d8:	6394      	str	r4, [r2, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800e3da:	641d      	str	r5, [r3, #64]	; 0x40
}
 800e3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800e3de:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800e3e0:	2104      	movs	r1, #4
 800e3e2:	481d      	ldr	r0, [pc, #116]	; (800e458 <Motor_Switch+0xb8>)
 800e3e4:	f001 fc06 	bl	800fbf4 <HAL_GPIO_WritePin>
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	f7f9 ffd3 	bl	8008394 <__aeabi_i2d>
	if (right > 0){
 800e3ee:	2c00      	cmp	r4, #0
 800e3f0:	4606      	mov	r6, r0
 800e3f2:	460f      	mov	r7, r1
 800e3f4:	dddf      	ble.n	800e3b6 <Motor_Switch+0x16>
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	4817      	ldr	r0, [pc, #92]	; (800e458 <Motor_Switch+0xb8>)
 800e3fc:	f001 fbfa 	bl	800fbf4 <HAL_GPIO_WritePin>
	if(left > 4200*0.6) left = 4200*0.6;
 800e400:	a311      	add	r3, pc, #68	; (adr r3, 800e448 <Motor_Switch+0xa8>)
 800e402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e406:	4630      	mov	r0, r6
 800e408:	4639      	mov	r1, r7
 800e40a:	f7fa fabd 	bl	8008988 <__aeabi_dcmpgt>
 800e40e:	f640 16d8 	movw	r6, #2520	; 0x9d8
 800e412:	2800      	cmp	r0, #0
 800e414:	bf18      	it	ne
 800e416:	4635      	movne	r5, r6
	if(right > 4200*0.6) right = 4200*0.6;
 800e418:	4620      	mov	r0, r4
 800e41a:	f7f9 ffbb 	bl	8008394 <__aeabi_i2d>
 800e41e:	a30a      	add	r3, pc, #40	; (adr r3, 800e448 <Motor_Switch+0xa8>)
 800e420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e424:	f7fa fab0 	bl	8008988 <__aeabi_dcmpgt>
 800e428:	2800      	cmp	r0, #0
 800e42a:	bf18      	it	ne
 800e42c:	4634      	movne	r4, r6
 800e42e:	e7cf      	b.n	800e3d0 <Motor_Switch+0x30>
		left = -left;
 800e430:	426d      	negs	r5, r5
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800e432:	2200      	movs	r2, #0
 800e434:	e7d4      	b.n	800e3e0 <Motor_Switch+0x40>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800e436:	2201      	movs	r2, #1
 800e438:	4611      	mov	r1, r2
 800e43a:	4807      	ldr	r0, [pc, #28]	; (800e458 <Motor_Switch+0xb8>)
 800e43c:	f001 fbda 	bl	800fbf4 <HAL_GPIO_WritePin>
	  	right = -right;
 800e440:	4264      	negs	r4, r4
 800e442:	e7dd      	b.n	800e400 <Motor_Switch+0x60>
 800e444:	f3af 8000 	nop.w
 800e448:	00000000 	.word	0x00000000
 800e44c:	40a3b000 	.word	0x40a3b000
 800e450:	2000027c 	.word	0x2000027c
 800e454:	2000023c 	.word	0x2000023c
 800e458:	40020000 	.word	0x40020000

0800e45c <InitPulse>:
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
	* timer_counter = initial_pulse;
 800e45c:	6001      	str	r1, [r0, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800e45e:	4770      	bx	lr

0800e460 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800e460:	b4f0      	push	{r4, r5, r6, r7}
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
	error = abs( last[receiver_num] - raw );
 800e462:	4e1a      	ldr	r6, [pc, #104]	; (800e4cc <GetWallDataAverage+0x6c>)
	last[receiver_num] = raw;
	integrate[receiver_num] += error;

	count[receiver_num]++;
 800e464:	4c1a      	ldr	r4, [pc, #104]	; (800e4d0 <GetWallDataAverage+0x70>)
	error = abs( last[receiver_num] - raw );
 800e466:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
	integrate[receiver_num] += error;
 800e46a:	4d1a      	ldr	r5, [pc, #104]	; (800e4d4 <GetWallDataAverage+0x74>)
	last[receiver_num] = raw;
 800e46c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800e470:	1a5b      	subs	r3, r3, r1
	count[receiver_num]++;
 800e472:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
	integrate[receiver_num] += error;
 800e476:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	bfb8      	it	lt
 800e47e:	425b      	neglt	r3, r3
	count[receiver_num]++;
 800e480:	3101      	adds	r1, #1
	integrate[receiver_num] += error;
 800e482:	443b      	add	r3, r7
	if(count[receiver_num] == average_of_n_times)
 800e484:	4281      	cmp	r1, r0
	integrate[receiver_num] += error;
 800e486:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	count[receiver_num]++;
 800e48a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800e48e:	d006      	beq.n	800e49e <GetWallDataAverage+0x3e>
 800e490:	4b11      	ldr	r3, [pc, #68]	; (800e4d8 <GetWallDataAverage+0x78>)
 800e492:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e496:	ed92 0a00 	vldr	s0, [r2]
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
		integrate[receiver_num] = 0;
		count[receiver_num] = 0;
	}
	return average[receiver_num];
}
 800e49a:	bcf0      	pop	{r4, r5, r6, r7}
 800e49c:	4770      	bx	lr
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800e49e:	ee07 3a90 	vmov	s15, r3
 800e4a2:	ee07 1a10 	vmov	s14, r1
 800e4a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e4ae:	4b0a      	ldr	r3, [pc, #40]	; (800e4d8 <GetWallDataAverage+0x78>)
 800e4b0:	ee87 0a87 	vdiv.f32	s0, s15, s14
		integrate[receiver_num] = 0;
 800e4b4:	2100      	movs	r1, #0
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800e4b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		integrate[receiver_num] = 0;
 800e4ba:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
		count[receiver_num] = 0;
 800e4be:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}
 800e4c2:	bcf0      	pop	{r4, r5, r6, r7}
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800e4c4:	ed83 0a00 	vstr	s0, [r3]
}
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	20000308 	.word	0x20000308
 800e4d0:	200002e8 	.word	0x200002e8
 800e4d4:	200002f8 	.word	0x200002f8
 800e4d8:	200002d8 	.word	0x200002d8

0800e4dc <ADCToBatteryVoltage>:
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
	float battery_voltage = 0;
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800e4dc:	ee07 0a90 	vmov	s15, r0
 800e4e0:	ee60 0a20 	vmul.f32	s1, s0, s1
 800e4e4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800e4e8:	ee20 0a20 	vmul.f32	s0, s0, s1
	return battery_voltage;
}
 800e4ec:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop

0800e4f4 <IntegerPower>:
//-------------------------//

int IntegerPower(int integer, int exponential)
{
	int pattern_num = 1;
	for(int i=0; i < exponential ; i++)
 800e4f4:	2900      	cmp	r1, #0
 800e4f6:	dd08      	ble.n	800e50a <IntegerPower+0x16>
 800e4f8:	2300      	movs	r3, #0
	int pattern_num = 1;
 800e4fa:	2201      	movs	r2, #1
	for(int i=0; i < exponential ; i++)
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	4299      	cmp	r1, r3
	{
		pattern_num *= integer;
 800e500:	fb00 f202 	mul.w	r2, r0, r2
	for(int i=0; i < exponential ; i++)
 800e504:	d1fa      	bne.n	800e4fc <IntegerPower+0x8>
	}
	return pattern_num;
}
 800e506:	4610      	mov	r0, r2
 800e508:	4770      	bx	lr
	int pattern_num = 1;
 800e50a:	2201      	movs	r2, #1
}
 800e50c:	4610      	mov	r0, r2
 800e50e:	4770      	bx	lr

0800e510 <GetBatteryLevel>:

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
	float current_percentage = current_voltage / battery_max;
	float lowest_percentage =  battery_min / battery_max;
 800e510:	eec0 0a81 	vdiv.f32	s1, s1, s2

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;

	int pattern = 0;
	for(int i=0; i < level_num; i++)
 800e514:	2800      	cmp	r0, #0
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800e516:	ee07 0a10 	vmov	s14, r0
 800e51a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e51e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e522:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	float current_percentage = current_voltage / battery_max;
 800e526:	ee80 0a01 	vdiv.f32	s0, s0, s2
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800e52a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	for(int i=0; i < level_num; i++)
 800e52e:	dd14      	ble.n	800e55a <GetBatteryLevel+0x4a>
 800e530:	2300      	movs	r3, #0
	int pattern = 0;
 800e532:	461a      	mov	r2, r3
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800e534:	ee07 3a90 	vmov	s15, r3
 800e538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e53c:	eef0 6a60 	vmov.f32	s13, s1
 800e540:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e544:	eeb4 0a66 	vcmp.f32	s0, s13
 800e548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e54c:	bfa8      	it	ge
 800e54e:	461a      	movge	r2, r3
	for(int i=0; i < level_num; i++)
 800e550:	3301      	adds	r3, #1
 800e552:	4298      	cmp	r0, r3
 800e554:	d1ee      	bne.n	800e534 <GetBatteryLevel+0x24>
		{
			pattern = i;
		}
	}
	return pattern;
}
 800e556:	4610      	mov	r0, r2
 800e558:	4770      	bx	lr
	int pattern = 0;
 800e55a:	2200      	movs	r2, #0
}
 800e55c:	4610      	mov	r0, r2
 800e55e:	4770      	bx	lr

0800e560 <Load_Gain>:
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
void Load_Gain()
{
 800e560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800e564:	4b2d      	ldr	r3, [pc, #180]	; (800e61c <Load_Gain+0xbc>)
	uint8_t j=0;
	for(int i=0; i < 15; i++)
	{
		FLASH_Read_Word_F( address, &data[i]);//かこれ
		address += 0x04;
		printf("%d, %f\r\n",i,data[i]);
 800e566:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800e624 <Load_Gain+0xc4>
	uint32_t address = start_adress_sector9;//こっちか
 800e56a:	681f      	ldr	r7, [r3, #0]
{
 800e56c:	b090      	sub	sp, #64	; 0x40
	float data[16]={0};//1個多く要素を作る。
 800e56e:	4668      	mov	r0, sp
 800e570:	2240      	movs	r2, #64	; 0x40
 800e572:	2100      	movs	r1, #0
 800e574:	f003 fecb 	bl	801230e <memset>
 800e578:	466c      	mov	r4, sp
 800e57a:	1b3f      	subs	r7, r7, r4
	for(int i=0; i < 15; i++)
 800e57c:	2500      	movs	r5, #0
		FLASH_Read_Word_F( address, &data[i]);//かこれ
 800e57e:	4621      	mov	r1, r4
 800e580:	1938      	adds	r0, r7, r4
 800e582:	f7ff fcc3 	bl	800df0c <FLASH_Read_Word_F>
		printf("%d, %f\r\n",i,data[i]);
 800e586:	6820      	ldr	r0, [r4, #0]
 800e588:	f7f9 ff16 	bl	80083b8 <__aeabi_f2d>
 800e58c:	4602      	mov	r2, r0
 800e58e:	460b      	mov	r3, r1
 800e590:	4640      	mov	r0, r8
 800e592:	4629      	mov	r1, r5
	for(int i=0; i < 15; i++)
 800e594:	3501      	adds	r5, #1
		printf("%d, %f\r\n",i,data[i]);
 800e596:	f005 f9b9 	bl	801390c <iprintf>
	for(int i=0; i < 15; i++)
 800e59a:	2d0f      	cmp	r5, #15
 800e59c:	f104 0404 	add.w	r4, r4, #4
 800e5a0:	d1ed      	bne.n	800e57e <Load_Gain+0x1e>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	481e      	ldr	r0, [pc, #120]	; (800e620 <Load_Gain+0xc0>)
 800e5a6:	f005 f9b1 	bl	801390c <iprintf>
//			Pid[A_VELO_PID].KD = data[5];
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800e5aa:	ed9d 1a02 	vldr	s2, [sp, #8]
 800e5ae:	eddd 0a01 	vldr	s1, [sp, #4]
 800e5b2:	ed9d 0a00 	vldr	s0, [sp]
 800e5b6:	2004      	movs	r0, #4
 800e5b8:	f000 fa28 	bl	800ea0c <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800e5bc:	ed9d 1a02 	vldr	s2, [sp, #8]
 800e5c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800e5c4:	ed9d 0a00 	vldr	s0, [sp]
 800e5c8:	2005      	movs	r0, #5
 800e5ca:	f000 fa1f 	bl	800ea0c <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800e5ce:	ed9d 1a05 	vldr	s2, [sp, #20]
 800e5d2:	eddd 0a04 	vldr	s1, [sp, #16]
 800e5d6:	ed9d 0a03 	vldr	s0, [sp, #12]
 800e5da:	2000      	movs	r0, #0
 800e5dc:	f000 fa16 	bl	800ea0c <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800e5e0:	ed9d 1a08 	vldr	s2, [sp, #32]
 800e5e4:	eddd 0a07 	vldr	s1, [sp, #28]
 800e5e8:	ed9d 0a06 	vldr	s0, [sp, #24]
 800e5ec:	2002      	movs	r0, #2
 800e5ee:	f000 fa0d 	bl	800ea0c <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800e5f2:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 800e5f6:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 800e5fa:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 800e5fe:	2003      	movs	r0, #3
 800e600:	f000 fa04 	bl	800ea0c <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800e604:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
 800e608:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
 800e60c:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 800e610:	2001      	movs	r0, #1
 800e612:	f000 f9fb 	bl	800ea0c <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800e616:	b010      	add	sp, #64	; 0x40
 800e618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e61c:	08017234 	.word	0x08017234
 800e620:	08017378 	.word	0x08017378
 800e624:	0801736c 	.word	0x0801736c

0800e628 <Change_Gain>:
void Change_Gain()
{
 800e628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800e62c:	48bc      	ldr	r0, [pc, #752]	; (800e920 <Change_Gain+0x2f8>)
 800e62e:	4cbd      	ldr	r4, [pc, #756]	; (800e924 <Change_Gain+0x2fc>)
 800e630:	4dbd      	ldr	r5, [pc, #756]	; (800e928 <Change_Gain+0x300>)
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800e632:	f8df 8348 	ldr.w	r8, [pc, #840]	; 800e97c <Change_Gain+0x354>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e636:	f8df 9348 	ldr.w	r9, [pc, #840]	; 800e980 <Change_Gain+0x358>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e63a:	f8df a348 	ldr.w	sl, [pc, #840]	; 800e984 <Change_Gain+0x35c>
{
 800e63e:	b096      	sub	sp, #88	; 0x58
	HAL_TIM_Base_Stop_IT(&htim1);
 800e640:	f002 fab2 	bl	8010ba8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800e644:	48b9      	ldr	r0, [pc, #740]	; (800e92c <Change_Gain+0x304>)
 800e646:	f002 faaf 	bl	8010ba8 <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800e64a:	f7ff fe91 	bl	800e370 <Motor_PWM_Stop>
	EmitterOFF();
 800e64e:	f7ff fe0f 	bl	800e270 <EmitterOFF>
	HAL_Delay(200);
 800e652:	20c8      	movs	r0, #200	; 0xc8
 800e654:	f000 fbac 	bl	800edb0 <HAL_Delay>
	char change_mode='0';
 800e658:	2330      	movs	r3, #48	; 0x30
 800e65a:	f88d 3015 	strb.w	r3, [sp, #21]
	char pid = '0';
 800e65e:	f88d 3016 	strb.w	r3, [sp, #22]
		printf("現在のPIDゲイン\r\n");
 800e662:	4640      	mov	r0, r8
 800e664:	f005 f9da 	bl	8013a1c <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e668:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e66c:	f7f9 fea4 	bl	80083b8 <__aeabi_f2d>
 800e670:	4606      	mov	r6, r0
 800e672:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800e676:	460f      	mov	r7, r1
 800e678:	f7f9 fe9e 	bl	80083b8 <__aeabi_f2d>
 800e67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e680:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800e684:	f7f9 fe98 	bl	80083b8 <__aeabi_f2d>
 800e688:	4632      	mov	r2, r6
 800e68a:	463b      	mov	r3, r7
 800e68c:	e9cd 0100 	strd	r0, r1, [sp]
 800e690:	4648      	mov	r0, r9
 800e692:	f005 f93b 	bl	801390c <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e696:	6820      	ldr	r0, [r4, #0]
 800e698:	f7f9 fe8e 	bl	80083b8 <__aeabi_f2d>
 800e69c:	4606      	mov	r6, r0
 800e69e:	68a0      	ldr	r0, [r4, #8]
 800e6a0:	460f      	mov	r7, r1
 800e6a2:	f7f9 fe89 	bl	80083b8 <__aeabi_f2d>
 800e6a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6aa:	6860      	ldr	r0, [r4, #4]
 800e6ac:	f7f9 fe84 	bl	80083b8 <__aeabi_f2d>
 800e6b0:	4632      	mov	r2, r6
 800e6b2:	463b      	mov	r3, r7
 800e6b4:	e9cd 0100 	strd	r0, r1, [sp]
 800e6b8:	4650      	mov	r0, sl
 800e6ba:	f005 f927 	bl	801390c <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800e6be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6c0:	f7f9 fe7a 	bl	80083b8 <__aeabi_f2d>
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800e6c8:	460f      	mov	r7, r1
 800e6ca:	f7f9 fe75 	bl	80083b8 <__aeabi_f2d>
 800e6ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6d2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e6d4:	f7f9 fe70 	bl	80083b8 <__aeabi_f2d>
 800e6d8:	4632      	mov	r2, r6
 800e6da:	463b      	mov	r3, r7
 800e6dc:	e9cd 0100 	strd	r0, r1, [sp]
 800e6e0:	4893      	ldr	r0, [pc, #588]	; (800e930 <Change_Gain+0x308>)
 800e6e2:	f005 f913 	bl	801390c <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800e6e6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800e6ea:	f7f9 fe65 	bl	80083b8 <__aeabi_f2d>
 800e6ee:	4606      	mov	r6, r0
 800e6f0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800e6f4:	460f      	mov	r7, r1
 800e6f6:	f7f9 fe5f 	bl	80083b8 <__aeabi_f2d>
 800e6fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6fe:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800e702:	f7f9 fe59 	bl	80083b8 <__aeabi_f2d>
 800e706:	4632      	mov	r2, r6
 800e708:	463b      	mov	r3, r7
 800e70a:	e9cd 0100 	strd	r0, r1, [sp]
 800e70e:	4889      	ldr	r0, [pc, #548]	; (800e934 <Change_Gain+0x30c>)
 800e710:	f005 f8fc 	bl	801390c <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800e714:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e716:	f7f9 fe4f 	bl	80083b8 <__aeabi_f2d>
 800e71a:	4606      	mov	r6, r0
 800e71c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e71e:	460f      	mov	r7, r1
 800e720:	f7f9 fe4a 	bl	80083b8 <__aeabi_f2d>
 800e724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e728:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e72a:	f7f9 fe45 	bl	80083b8 <__aeabi_f2d>
 800e72e:	4632      	mov	r2, r6
 800e730:	e9cd 0100 	strd	r0, r1, [sp]
 800e734:	463b      	mov	r3, r7
 800e736:	4880      	ldr	r0, [pc, #512]	; (800e938 <Change_Gain+0x310>)
 800e738:	f005 f8e8 	bl	801390c <iprintf>
	  setbuf(stdout,NULL);
 800e73c:	682b      	ldr	r3, [r5, #0]
 800e73e:	2100      	movs	r1, #0
 800e740:	6898      	ldr	r0, [r3, #8]
 800e742:	f005 fa63 	bl	8013c0c <setbuf>
	  setbuf(stdin,NULL);
 800e746:	682b      	ldr	r3, [r5, #0]
 800e748:	2100      	movs	r1, #0
 800e74a:	6858      	ldr	r0, [r3, #4]
 800e74c:	f005 fa5e 	bl	8013c0c <setbuf>

		Buffering();
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800e750:	487a      	ldr	r0, [pc, #488]	; (800e93c <Change_Gain+0x314>)
 800e752:	f005 f8db 	bl	801390c <iprintf>
 800e756:	f10d 0115 	add.w	r1, sp, #21
 800e75a:	4879      	ldr	r0, [pc, #484]	; (800e940 <Change_Gain+0x318>)
 800e75c:	f005 fa0c 	bl	8013b78 <iscanf>
		if(change_mode == '0')
 800e760:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e764:	2b30      	cmp	r3, #48	; 0x30
 800e766:	f000 808a 	beq.w	800e87e <Change_Gain+0x256>
	  setbuf(stdout,NULL);
 800e76a:	682b      	ldr	r3, [r5, #0]
 800e76c:	2100      	movs	r1, #0
 800e76e:	6898      	ldr	r0, [r3, #8]
 800e770:	f005 fa4c 	bl	8013c0c <setbuf>
	  setbuf(stdin,NULL);
 800e774:	682b      	ldr	r3, [r5, #0]
 800e776:	2100      	movs	r1, #0
 800e778:	6858      	ldr	r0, [r3, #4]
 800e77a:	f005 fa47 	bl	8013c0c <setbuf>
		}
		else
		{

			Buffering();
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800e77e:	4871      	ldr	r0, [pc, #452]	; (800e944 <Change_Gain+0x31c>)
 800e780:	f005 f8c4 	bl	801390c <iprintf>
 800e784:	f10d 0116 	add.w	r1, sp, #22
 800e788:	486d      	ldr	r0, [pc, #436]	; (800e940 <Change_Gain+0x318>)
 800e78a:	f005 f9f5 	bl	8013b78 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800e78e:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800e792:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800e796:	486c      	ldr	r0, [pc, #432]	; (800e948 <Change_Gain+0x320>)
 800e798:	f005 f8b8 	bl	801390c <iprintf>
	  setbuf(stdout,NULL);
 800e79c:	682b      	ldr	r3, [r5, #0]
 800e79e:	2100      	movs	r1, #0
 800e7a0:	6898      	ldr	r0, [r3, #8]
 800e7a2:	f005 fa33 	bl	8013c0c <setbuf>
	  setbuf(stdin,NULL);
 800e7a6:	682b      	ldr	r3, [r5, #0]
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	6858      	ldr	r0, [r3, #4]
 800e7ac:	f005 fa2e 	bl	8013c0c <setbuf>

			Buffering();
			printf("\r\n値を入力 : ");
 800e7b0:	4866      	ldr	r0, [pc, #408]	; (800e94c <Change_Gain+0x324>)
 800e7b2:	f005 f8ab 	bl	801390c <iprintf>

			switch(change_mode)
 800e7b6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e7ba:	3b31      	subs	r3, #49	; 0x31
 800e7bc:	2b04      	cmp	r3, #4
 800e7be:	f200 80a1 	bhi.w	800e904 <Change_Gain+0x2dc>
 800e7c2:	e8df f003 	tbb	[pc, r3]
 800e7c6:	3f4e      	.short	0x3f4e
 800e7c8:	2130      	.short	0x2130
 800e7ca:	03          	.byte	0x03
 800e7cb:	00          	.byte	0x00
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800e7cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e7d0:	2b70      	cmp	r3, #112	; 0x70
 800e7d2:	f000 80de 	beq.w	800e992 <Change_Gain+0x36a>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
				}
				else if(pid == 'i')
 800e7d6:	2b69      	cmp	r3, #105	; 0x69
 800e7d8:	f000 80f4 	beq.w	800e9c4 <Change_Gain+0x39c>
				{
					scanf("%f",&Pid[D_WALL_PID].KI);
				}
				else if(pid == 'd')
 800e7dc:	2b64      	cmp	r3, #100	; 0x64
 800e7de:	f000 8095 	beq.w	800e90c <Change_Gain+0x2e4>
	  setbuf(stdout,NULL);
 800e7e2:	682b      	ldr	r3, [r5, #0]
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	6898      	ldr	r0, [r3, #8]
 800e7e8:	f005 fa10 	bl	8013c0c <setbuf>
	  setbuf(stdin,NULL);
 800e7ec:	682b      	ldr	r3, [r5, #0]
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	6858      	ldr	r0, [r3, #4]
 800e7f2:	f005 fa0b 	bl	8013c0c <setbuf>
			default :
				printf("該当しません\r\n");
				break;
			}
			Buffering();
			scanf("%c",&nl);
 800e7f6:	f10d 0117 	add.w	r1, sp, #23
 800e7fa:	4851      	ldr	r0, [pc, #324]	; (800e940 <Change_Gain+0x318>)
 800e7fc:	f005 f9bc 	bl	8013b78 <iscanf>
			printf("\r\n");
 800e800:	4853      	ldr	r0, [pc, #332]	; (800e950 <Change_Gain+0x328>)
 800e802:	f005 f90b 	bl	8013a1c <puts>
		printf("現在のPIDゲイン\r\n");
 800e806:	e72c      	b.n	800e662 <Change_Gain+0x3a>
				if(pid == 'p')
 800e808:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e80c:	2b70      	cmp	r3, #112	; 0x70
 800e80e:	f000 80c5 	beq.w	800e99c <Change_Gain+0x374>
				else if(pid == 'i')
 800e812:	2b69      	cmp	r3, #105	; 0x69
 800e814:	f000 80db 	beq.w	800e9ce <Change_Gain+0x3a6>
				else if(pid == 'd')
 800e818:	2b64      	cmp	r3, #100	; 0x64
 800e81a:	d1e2      	bne.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800e81c:	494d      	ldr	r1, [pc, #308]	; (800e954 <Change_Gain+0x32c>)
 800e81e:	484e      	ldr	r0, [pc, #312]	; (800e958 <Change_Gain+0x330>)
 800e820:	f005 f9aa 	bl	8013b78 <iscanf>
 800e824:	e7dd      	b.n	800e7e2 <Change_Gain+0x1ba>
				if(pid == 'p')
 800e826:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e82a:	2b70      	cmp	r3, #112	; 0x70
 800e82c:	f000 80bb 	beq.w	800e9a6 <Change_Gain+0x37e>
				else if(pid == 'i')
 800e830:	2b69      	cmp	r3, #105	; 0x69
 800e832:	f000 80d1 	beq.w	800e9d8 <Change_Gain+0x3b0>
				else if(pid == 'd')
 800e836:	2b64      	cmp	r3, #100	; 0x64
 800e838:	d1d3      	bne.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800e83a:	4948      	ldr	r1, [pc, #288]	; (800e95c <Change_Gain+0x334>)
 800e83c:	4846      	ldr	r0, [pc, #280]	; (800e958 <Change_Gain+0x330>)
 800e83e:	f005 f99b 	bl	8013b78 <iscanf>
 800e842:	e7ce      	b.n	800e7e2 <Change_Gain+0x1ba>
				if(pid == 'p')
 800e844:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e848:	2b70      	cmp	r3, #112	; 0x70
 800e84a:	f000 809d 	beq.w	800e988 <Change_Gain+0x360>
				else if(pid == 'i')
 800e84e:	2b69      	cmp	r3, #105	; 0x69
 800e850:	f000 80b3 	beq.w	800e9ba <Change_Gain+0x392>
				else if(pid == 'd')
 800e854:	2b64      	cmp	r3, #100	; 0x64
 800e856:	d1c4      	bne.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800e858:	4941      	ldr	r1, [pc, #260]	; (800e960 <Change_Gain+0x338>)
 800e85a:	483f      	ldr	r0, [pc, #252]	; (800e958 <Change_Gain+0x330>)
 800e85c:	f005 f98c 	bl	8013b78 <iscanf>
 800e860:	e7bf      	b.n	800e7e2 <Change_Gain+0x1ba>
				if(pid == 'p')
 800e862:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e866:	2b70      	cmp	r3, #112	; 0x70
 800e868:	d055      	beq.n	800e916 <Change_Gain+0x2ee>
				else if(pid == 'i')
 800e86a:	2b69      	cmp	r3, #105	; 0x69
 800e86c:	f000 80a0 	beq.w	800e9b0 <Change_Gain+0x388>
				else if(pid == 'd')
 800e870:	2b64      	cmp	r3, #100	; 0x64
 800e872:	d1b6      	bne.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800e874:	493b      	ldr	r1, [pc, #236]	; (800e964 <Change_Gain+0x33c>)
 800e876:	4838      	ldr	r0, [pc, #224]	; (800e958 <Change_Gain+0x330>)
 800e878:	f005 f97e 	bl	8013b78 <iscanf>
 800e87c:	e7b1      	b.n	800e7e2 <Change_Gain+0x1ba>
		}

	}
	printf("\r\n完了\r\n");
 800e87e:	483a      	ldr	r0, [pc, #232]	; (800e968 <Change_Gain+0x340>)
 800e880:	f005 f8cc 	bl	8013a1c <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800e884:	f7ff fb6a 	bl	800df5c <Flash_clear_sector9>
	uint32_t address = start_adress_sector9;
 800e888:	4b38      	ldr	r3, [pc, #224]	; (800e96c <Change_Gain+0x344>)
	data[1] = Pid[L_VELO_PID].KI;
 800e88a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
	uint32_t address = start_adress_sector9;
 800e88e:	681e      	ldr	r6, [r3, #0]
	data[2] = Pid[L_VELO_PID].KD;
 800e890:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	data[3] = Pid[A_VELO_PID].KP;
 800e894:	6820      	ldr	r0, [r4, #0]
	data[4] = Pid[A_VELO_PID].KI;
 800e896:	6861      	ldr	r1, [r4, #4]
	data[1] = Pid[L_VELO_PID].KI;
 800e898:	9207      	str	r2, [sp, #28]
	data[2] = Pid[L_VELO_PID].KD;
 800e89a:	9308      	str	r3, [sp, #32]
	data[5] = Pid[A_VELO_PID].KD;
 800e89c:	68a2      	ldr	r2, [r4, #8]
	data[6] = Pid[L_WALL_PID].KP;
 800e89e:	6da3      	ldr	r3, [r4, #88]	; 0x58
	data[0] = Pid[L_VELO_PID].KP;
 800e8a0:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
	data[3] = Pid[A_VELO_PID].KP;
 800e8a4:	9009      	str	r0, [sp, #36]	; 0x24
	data[4] = Pid[A_VELO_PID].KI;
 800e8a6:	910a      	str	r1, [sp, #40]	; 0x28
	data[7] = Pid[L_WALL_PID].KI;
 800e8a8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	data[8] = Pid[L_WALL_PID].KD;
 800e8aa:	6e21      	ldr	r1, [r4, #96]	; 0x60
	data[5] = Pid[A_VELO_PID].KD;
 800e8ac:	920b      	str	r2, [sp, #44]	; 0x2c
	data[6] = Pid[L_WALL_PID].KP;
 800e8ae:	930c      	str	r3, [sp, #48]	; 0x30
	data[9] = Pid[R_WALL_PID].KP;
 800e8b0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	data[10] = Pid[R_WALL_PID].KI;
 800e8b4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
	data[11] = Pid[R_WALL_PID].KD;
 800e8b8:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
	data[0] = Pid[L_VELO_PID].KP;
 800e8bc:	9506      	str	r5, [sp, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800e8be:	900d      	str	r0, [sp, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800e8c0:	ad06      	add	r5, sp, #24
	data[12] = Pid[D_WALL_PID].KP;
 800e8c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	data[8] = Pid[L_WALL_PID].KD;
 800e8c4:	910e      	str	r1, [sp, #56]	; 0x38
	data[9] = Pid[R_WALL_PID].KP;
 800e8c6:	920f      	str	r2, [sp, #60]	; 0x3c
	data[13] = Pid[D_WALL_PID].KI;
 800e8c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
	data[14] = Pid[D_WALL_PID].KD;
 800e8ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
	data[10] = Pid[R_WALL_PID].KI;
 800e8cc:	9310      	str	r3, [sp, #64]	; 0x40
	float data[16]={0};
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	1b76      	subs	r6, r6, r5
	data[11] = Pid[R_WALL_PID].KD;
 800e8d2:	9711      	str	r7, [sp, #68]	; 0x44
	data[12] = Pid[D_WALL_PID].KP;
 800e8d4:	9012      	str	r0, [sp, #72]	; 0x48
	data[13] = Pid[D_WALL_PID].KI;
 800e8d6:	9113      	str	r1, [sp, #76]	; 0x4c
	data[14] = Pid[D_WALL_PID].KD;
 800e8d8:	9214      	str	r2, [sp, #80]	; 0x50
	float data[16]={0};
 800e8da:	9315      	str	r3, [sp, #84]	; 0x54
 800e8dc:	ac15      	add	r4, sp, #84	; 0x54
 800e8de:	1970      	adds	r0, r6, r5
		FLASH_Write_Word_F( address, data[i]);
 800e8e0:	ecb5 0a01 	vldmia	r5!, {s0}
 800e8e4:	f7ff faec 	bl	800dec0 <FLASH_Write_Word_F>
	for(int i=0; i < 15; i++)
 800e8e8:	42ac      	cmp	r4, r5
 800e8ea:	d1f8      	bne.n	800e8de <Change_Gain+0x2b6>
	//printf("\r\nどや\r\n");
	Copy_Gain();
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800e8ec:	2007      	movs	r0, #7
 800e8ee:	f7ff fccd 	bl	800e28c <ChangeLED>
	HAL_Delay(200);
 800e8f2:	20c8      	movs	r0, #200	; 0xc8
 800e8f4:	f000 fa5c 	bl	800edb0 <HAL_Delay>
	ChangeLED(0);
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	f7ff fcc7 	bl	800e28c <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800e8fe:	b016      	add	sp, #88	; 0x58
 800e900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				printf("該当しません\r\n");
 800e904:	481a      	ldr	r0, [pc, #104]	; (800e970 <Change_Gain+0x348>)
 800e906:	f005 f889 	bl	8013a1c <puts>
				break;
 800e90a:	e76a      	b.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800e90c:	4919      	ldr	r1, [pc, #100]	; (800e974 <Change_Gain+0x34c>)
 800e90e:	4812      	ldr	r0, [pc, #72]	; (800e958 <Change_Gain+0x330>)
 800e910:	f005 f932 	bl	8013b78 <iscanf>
 800e914:	e765      	b.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[L_VELO_PID].KP);
 800e916:	4918      	ldr	r1, [pc, #96]	; (800e978 <Change_Gain+0x350>)
 800e918:	480f      	ldr	r0, [pc, #60]	; (800e958 <Change_Gain+0x330>)
 800e91a:	f005 f92d 	bl	8013b78 <iscanf>
 800e91e:	e760      	b.n	800e7e2 <Change_Gain+0x1ba>
 800e920:	20004d88 	.word	0x20004d88
 800e924:	20000318 	.word	0x20000318
 800e928:	2000002c 	.word	0x2000002c
 800e92c:	20004b40 	.word	0x20004b40
 800e930:	0801728c 	.word	0x0801728c
 800e934:	080172a8 	.word	0x080172a8
 800e938:	080172c4 	.word	0x080172c4
 800e93c:	080172e0 	.word	0x080172e0
 800e940:	080172f8 	.word	0x080172f8
 800e944:	080172fc 	.word	0x080172fc
 800e948:	08017310 	.word	0x08017310
 800e94c:	08017334 	.word	0x08017334
 800e950:	08017368 	.word	0x08017368
 800e954:	200003a4 	.word	0x200003a4
 800e958:	08017348 	.word	0x08017348
 800e95c:	20000378 	.word	0x20000378
 800e960:	20000320 	.word	0x20000320
 800e964:	200003d0 	.word	0x200003d0
 800e968:	08017360 	.word	0x08017360
 800e96c:	08017234 	.word	0x08017234
 800e970:	0801734c 	.word	0x0801734c
 800e974:	2000034c 	.word	0x2000034c
 800e978:	200003c8 	.word	0x200003c8
 800e97c:	08017238 	.word	0x08017238
 800e980:	08017250 	.word	0x08017250
 800e984:	08017270 	.word	0x08017270
					scanf("%f",&Pid[A_VELO_PID].KP);
 800e988:	4916      	ldr	r1, [pc, #88]	; (800e9e4 <Change_Gain+0x3bc>)
 800e98a:	4817      	ldr	r0, [pc, #92]	; (800e9e8 <Change_Gain+0x3c0>)
 800e98c:	f005 f8f4 	bl	8013b78 <iscanf>
 800e990:	e727      	b.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[D_WALL_PID].KP);
 800e992:	4916      	ldr	r1, [pc, #88]	; (800e9ec <Change_Gain+0x3c4>)
 800e994:	4814      	ldr	r0, [pc, #80]	; (800e9e8 <Change_Gain+0x3c0>)
 800e996:	f005 f8ef 	bl	8013b78 <iscanf>
 800e99a:	e722      	b.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[R_WALL_PID].KP);
 800e99c:	4914      	ldr	r1, [pc, #80]	; (800e9f0 <Change_Gain+0x3c8>)
 800e99e:	4812      	ldr	r0, [pc, #72]	; (800e9e8 <Change_Gain+0x3c0>)
 800e9a0:	f005 f8ea 	bl	8013b78 <iscanf>
 800e9a4:	e71d      	b.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[L_WALL_PID].KP);
 800e9a6:	4913      	ldr	r1, [pc, #76]	; (800e9f4 <Change_Gain+0x3cc>)
 800e9a8:	480f      	ldr	r0, [pc, #60]	; (800e9e8 <Change_Gain+0x3c0>)
 800e9aa:	f005 f8e5 	bl	8013b78 <iscanf>
 800e9ae:	e718      	b.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800e9b0:	4911      	ldr	r1, [pc, #68]	; (800e9f8 <Change_Gain+0x3d0>)
 800e9b2:	480d      	ldr	r0, [pc, #52]	; (800e9e8 <Change_Gain+0x3c0>)
 800e9b4:	f005 f8e0 	bl	8013b78 <iscanf>
 800e9b8:	e713      	b.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800e9ba:	4910      	ldr	r1, [pc, #64]	; (800e9fc <Change_Gain+0x3d4>)
 800e9bc:	480a      	ldr	r0, [pc, #40]	; (800e9e8 <Change_Gain+0x3c0>)
 800e9be:	f005 f8db 	bl	8013b78 <iscanf>
 800e9c2:	e70e      	b.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800e9c4:	490e      	ldr	r1, [pc, #56]	; (800ea00 <Change_Gain+0x3d8>)
 800e9c6:	4808      	ldr	r0, [pc, #32]	; (800e9e8 <Change_Gain+0x3c0>)
 800e9c8:	f005 f8d6 	bl	8013b78 <iscanf>
 800e9cc:	e709      	b.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800e9ce:	490d      	ldr	r1, [pc, #52]	; (800ea04 <Change_Gain+0x3dc>)
 800e9d0:	4805      	ldr	r0, [pc, #20]	; (800e9e8 <Change_Gain+0x3c0>)
 800e9d2:	f005 f8d1 	bl	8013b78 <iscanf>
 800e9d6:	e704      	b.n	800e7e2 <Change_Gain+0x1ba>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800e9d8:	490b      	ldr	r1, [pc, #44]	; (800ea08 <Change_Gain+0x3e0>)
 800e9da:	4803      	ldr	r0, [pc, #12]	; (800e9e8 <Change_Gain+0x3c0>)
 800e9dc:	f005 f8cc 	bl	8013b78 <iscanf>
 800e9e0:	e6ff      	b.n	800e7e2 <Change_Gain+0x1ba>
 800e9e2:	bf00      	nop
 800e9e4:	20000318 	.word	0x20000318
 800e9e8:	08017348 	.word	0x08017348
 800e9ec:	20000344 	.word	0x20000344
 800e9f0:	2000039c 	.word	0x2000039c
 800e9f4:	20000370 	.word	0x20000370
 800e9f8:	200003cc 	.word	0x200003cc
 800e9fc:	2000031c 	.word	0x2000031c
 800ea00:	20000348 	.word	0x20000348
 800ea04:	200003a0 	.word	0x200003a0
 800ea08:	20000374 	.word	0x20000374

0800ea0c <PIDSetGain>:
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
	Pid[n].KP = kp;
 800ea0c:	4a05      	ldr	r2, [pc, #20]	; (800ea24 <PIDSetGain+0x18>)
 800ea0e:	232c      	movs	r3, #44	; 0x2c
 800ea10:	fb03 2000 	mla	r0, r3, r0, r2
 800ea14:	ed80 0a00 	vstr	s0, [r0]
	Pid[n].KI = ki;
 800ea18:	edc0 0a01 	vstr	s1, [r0, #4]
	Pid[n].KD = kd;
 800ea1c:	ed80 1a02 	vstr	s2, [r0, #8]

}
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop
 800ea24:	20000318 	.word	0x20000318

0800ea28 <PIDChangeFlag>:
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
	Pid[n].flag = on_or_off;
 800ea28:	4a02      	ldr	r2, [pc, #8]	; (800ea34 <PIDChangeFlag+0xc>)
 800ea2a:	232c      	movs	r3, #44	; 0x2c
 800ea2c:	fb03 2000 	mla	r0, r3, r0, r2
 800ea30:	6281      	str	r1, [r0, #40]	; 0x28
}
 800ea32:	4770      	bx	lr
 800ea34:	20000318 	.word	0x20000318

0800ea38 <PIDReset>:
	return Pid[n].flag;
}
void PIDReset(int n)
{
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800ea38:	4905      	ldr	r1, [pc, #20]	; (800ea50 <PIDReset+0x18>)
 800ea3a:	232c      	movs	r3, #44	; 0x2c
 800ea3c:	fb03 1000 	mla	r0, r3, r0, r1
 800ea40:	2200      	movs	r2, #0
	Pid[n].ei = 0;
	Pid[n].ed = 0;
	Pid[n].elast = 0;
	Pid[n].out = 0;
 800ea42:	2300      	movs	r3, #0
 800ea44:	6243      	str	r3, [r0, #36]	; 0x24
	Pid[n].e = 0;
 800ea46:	60c2      	str	r2, [r0, #12]
	Pid[n].ei = 0;
 800ea48:	6102      	str	r2, [r0, #16]
	Pid[n].ed = 0;
 800ea4a:	6142      	str	r2, [r0, #20]
	Pid[n].elast = 0;
 800ea4c:	6182      	str	r2, [r0, #24]
}
 800ea4e:	4770      	bx	lr
 800ea50:	20000318 	.word	0x20000318

0800ea54 <PIDControl>:
inline int PIDControl(int n, float target, float current)
{
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800ea54:	4b21      	ldr	r3, [pc, #132]	; (800eadc <PIDControl+0x88>)
{
 800ea56:	b510      	push	{r4, lr}
	if(Pid[n].flag == 0)
 800ea58:	242c      	movs	r4, #44	; 0x2c
 800ea5a:	fb04 3400 	mla	r4, r4, r0, r3
 800ea5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ea60:	b3a8      	cbz	r0, 800eace <PIDControl+0x7a>
	else
	{
		Pid[n].target = target;
		Pid[n].current = current;

		Pid[n].e = Pid[n].target - Pid[n].current;
 800ea62:	ee70 6a60 	vsub.f32	s13, s0, s1
		Pid[n].ei += Pid[n].e * pid_T;
 800ea66:	ed9f 4a1e 	vldr	s8, [pc, #120]	; 800eae0 <PIDControl+0x8c>
 800ea6a:	ed94 6a04 	vldr	s12, [r4, #16]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
		Pid[n].elast = Pid[n].e;
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea6e:	ed94 7a01 	vldr	s14, [r4, #4]
 800ea72:	ed94 5a00 	vldr	s10, [r4]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800ea76:	edd4 7a06 	vldr	s15, [r4, #24]
 800ea7a:	eddf 4a1a 	vldr	s9, [pc, #104]	; 800eae4 <PIDControl+0x90>
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea7e:	edd4 5a02 	vldr	s11, [r4, #8]
		Pid[n].e = Pid[n].target - Pid[n].current;
 800ea82:	edc4 6a03 	vstr	s13, [r4, #12]
		Pid[n].ei += Pid[n].e * pid_T;
 800ea86:	eea6 6a84 	vfma.f32	s12, s13, s8
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800ea8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea8e:	ee26 7a07 	vmul.f32	s14, s12, s14
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800ea92:	ee67 7aa4 	vmul.f32	s15, s15, s9
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea96:	eea6 7a85 	vfma.f32	s14, s13, s10
		Pid[n].ei += Pid[n].e * pid_T;
 800ea9a:	ed84 6a04 	vstr	s12, [r4, #16]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea9e:	eea7 7aa5 	vfma.f32	s14, s15, s11
		Pid[n].elast = Pid[n].e;
 800eaa2:	edc4 6a06 	vstr	s13, [r4, #24]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800eaa6:	edc4 7a05 	vstr	s15, [r4, #20]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800eaaa:	ee17 0a10 	vmov	r0, s14
		Pid[n].target = target;
 800eaae:	ed84 0a08 	vstr	s0, [r4, #32]
		Pid[n].current = current;
 800eab2:	edc4 0a07 	vstr	s1, [r4, #28]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800eab6:	f7f9 fc7f 	bl	80083b8 <__aeabi_f2d>
 800eaba:	ec41 0b10 	vmov	d0, r0, r1
 800eabe:	f003 f99b 	bl	8011df8 <round>
 800eac2:	ec51 0b10 	vmov	r0, r1, d0
 800eac6:	f7f9 ff7f 	bl	80089c8 <__aeabi_d2iz>
 800eaca:	6260      	str	r0, [r4, #36]	; 0x24
		return Pid[n].out;
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800eacc:	bd10      	pop	{r4, pc}
		Pid[n].e = 0.0f;
 800eace:	2300      	movs	r3, #0
		Pid[n].out = 0;
 800ead0:	6260      	str	r0, [r4, #36]	; 0x24
		Pid[n].e = 0.0f;
 800ead2:	60e3      	str	r3, [r4, #12]
		Pid[n].ei = 0.0f;
 800ead4:	6123      	str	r3, [r4, #16]
		Pid[n].ed = 0.0f;
 800ead6:	6163      	str	r3, [r4, #20]
		Pid[n].elast = 0.0f;
 800ead8:	61a3      	str	r3, [r4, #24]
}
 800eada:	bd10      	pop	{r4, pc}
 800eadc:	20000318 	.word	0x20000318
 800eae0:	3a83126f 	.word	0x3a83126f
 800eae4:	4479ffff 	.word	0x4479ffff

0800eae8 <HAL_GPIO_EXTI_Callback>:
#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_12)
 800eae8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800eaec:	d106      	bne.n	800eafc <HAL_GPIO_EXTI_Callback+0x14>
	{
	  gpio_callback_count++;
 800eaee:	4a04      	ldr	r2, [pc, #16]	; (800eb00 <HAL_GPIO_EXTI_Callback+0x18>)
 800eaf0:	6813      	ldr	r3, [r2, #0]
 800eaf2:	3301      	adds	r3, #1
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	bfc8      	it	gt
 800eaf8:	2300      	movgt	r3, #0
 800eafa:	6013      	str	r3, [r2, #0]
	}
}
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	200004d0 	.word	0x200004d0

0800eb04 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 800eb04:	b538      	push	{r3, r4, r5, lr}
 800eb06:	4605      	mov	r5, r0
 800eb08:	2405      	movs	r4, #5
	for(int i=0; i < 5; i++)
	{
		ChangeLED(mode);
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	f7ff fbbe 	bl	800e28c <ChangeLED>
		HAL_Delay(100);
 800eb10:	2064      	movs	r0, #100	; 0x64
 800eb12:	f000 f94d 	bl	800edb0 <HAL_Delay>
		ChangeLED(0);
 800eb16:	2000      	movs	r0, #0
 800eb18:	f7ff fbb8 	bl	800e28c <ChangeLED>
		HAL_Delay(100);
 800eb1c:	2064      	movs	r0, #100	; 0x64
 800eb1e:	f000 f947 	bl	800edb0 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800eb22:	3c01      	subs	r4, #1
 800eb24:	d1f1      	bne.n	800eb0a <Signal+0x6>
	}
}
 800eb26:	bd38      	pop	{r3, r4, r5, pc}

0800eb28 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800eb28:	b538      	push	{r3, r4, r5, lr}

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800eb2a:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800eb8c <BatteryCheck+0x64>
 800eb2e:	eddf 0a18 	vldr	s1, [pc, #96]	; 800eb90 <BatteryCheck+0x68>
{
 800eb32:	ed2d 8b02 	vpush	{d8}
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800eb36:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800eb3a:	f7ff fccf 	bl	800e4dc <ADCToBatteryVoltage>

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800eb3e:	2103      	movs	r1, #3
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800eb40:	eeb0 8a40 	vmov.f32	s16, s0
	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800eb44:	2002      	movs	r0, #2
 800eb46:	f7ff fcd5 	bl	800e4f4 <IntegerPower>

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800eb4a:	eeb0 0a48 	vmov.f32	s0, s16
 800eb4e:	ed9f 1a11 	vldr	s2, [pc, #68]	; 800eb94 <BatteryCheck+0x6c>
 800eb52:	eddf 0a11 	vldr	s1, [pc, #68]	; 800eb98 <BatteryCheck+0x70>
 800eb56:	f7ff fcdb 	bl	800e510 <GetBatteryLevel>
 800eb5a:	4605      	mov	r5, r0

	printf("%d\r\n", battery_level);
 800eb5c:	4601      	mov	r1, r0
 800eb5e:	480f      	ldr	r0, [pc, #60]	; (800eb9c <BatteryCheck+0x74>)
 800eb60:	f004 fed4 	bl	801390c <iprintf>
 800eb64:	b26d      	sxtb	r5, r5
	Signal( battery_level );
 800eb66:	2405      	movs	r4, #5
		ChangeLED(mode);
 800eb68:	4628      	mov	r0, r5
 800eb6a:	f7ff fb8f 	bl	800e28c <ChangeLED>
		HAL_Delay(100);
 800eb6e:	2064      	movs	r0, #100	; 0x64
 800eb70:	f000 f91e 	bl	800edb0 <HAL_Delay>
		ChangeLED(0);
 800eb74:	2000      	movs	r0, #0
 800eb76:	f7ff fb89 	bl	800e28c <ChangeLED>
		HAL_Delay(100);
 800eb7a:	2064      	movs	r0, #100	; 0x64
 800eb7c:	f000 f918 	bl	800edb0 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800eb80:	3c01      	subs	r4, #1
 800eb82:	d1f1      	bne.n	800eb68 <BatteryCheck+0x40>
}
 800eb84:	ecbd 8b02 	vpop	{d8}
 800eb88:	bd38      	pop	{r3, r4, r5, pc}
 800eb8a:	bf00      	nop
 800eb8c:	45800000 	.word	0x45800000
 800eb90:	40533333 	.word	0x40533333
 800eb94:	41066666 	.word	0x41066666
 800eb98:	40e66666 	.word	0x40e66666
 800eb9c:	08017378 	.word	0x08017378

0800eba0 <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 800eba0:	b510      	push	{r4, lr}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 800eba2:	4c12      	ldr	r4, [pc, #72]	; (800ebec <PhotoSwitch+0x4c>)
 800eba4:	4812      	ldr	r0, [pc, #72]	; (800ebf0 <PhotoSwitch+0x50>)
 800eba6:	4621      	mov	r1, r4
 800eba8:	2202      	movs	r2, #2
 800ebaa:	f000 f9c5 	bl	800ef38 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 800ebae:	2100      	movs	r1, #0
 800ebb0:	4810      	ldr	r0, [pc, #64]	; (800ebf4 <PhotoSwitch+0x54>)
 800ebb2:	f002 fe63 	bl	801187c <HAL_TIMEx_OCN_Start_IT>
 800ebb6:	6863      	ldr	r3, [r4, #4]
 800ebb8:	2bc7      	cmp	r3, #199	; 0xc7
 800ebba:	d800      	bhi.n	800ebbe <PhotoSwitch+0x1e>
 800ebbc:	e7fe      	b.n	800ebbc <PhotoSwitch+0x1c>

	while(adc2[1] < 200)
	{

	}
	HAL_ADC_Stop_DMA(&hadc2);
 800ebbe:	480c      	ldr	r0, [pc, #48]	; (800ebf0 <PhotoSwitch+0x50>)
 800ebc0:	f000 fa5c 	bl	800f07c <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	480b      	ldr	r0, [pc, #44]	; (800ebf4 <PhotoSwitch+0x54>)
 800ebc8:	f002 fe8c 	bl	80118e4 <HAL_TIMEx_OCN_Stop_IT>
 800ebcc:	2405      	movs	r4, #5
		ChangeLED(mode);
 800ebce:	2007      	movs	r0, #7
 800ebd0:	f7ff fb5c 	bl	800e28c <ChangeLED>
		HAL_Delay(100);
 800ebd4:	2064      	movs	r0, #100	; 0x64
 800ebd6:	f000 f8eb 	bl	800edb0 <HAL_Delay>
		ChangeLED(0);
 800ebda:	2000      	movs	r0, #0
 800ebdc:	f7ff fb56 	bl	800e28c <ChangeLED>
		HAL_Delay(100);
 800ebe0:	2064      	movs	r0, #100	; 0x64
 800ebe2:	f000 f8e5 	bl	800edb0 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800ebe6:	3c01      	subs	r4, #1
 800ebe8:	d1f1      	bne.n	800ebce <PhotoSwitch+0x2e>
	Signal( 7 );
}
 800ebea:	bd10      	pop	{r4, pc}
 800ebec:	200002c8 	.word	0x200002c8
 800ebf0:	20004bc0 	.word	0x20004bc0
 800ebf4:	20004b40 	.word	0x20004b40

0800ebf8 <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800ebf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebfc:	4606      	mov	r6, r0
 800ebfe:	ed2d 8b04 	vpush	{d8-d9}
 800ec02:	460f      	mov	r7, r1
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ec04:	4828      	ldr	r0, [pc, #160]	; (800eca8 <ModeSelect+0xb0>)
	*pMode=min;

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
	gpio_callback_count = 0;
 800ec06:	4c29      	ldr	r4, [pc, #164]	; (800ecac <ModeSelect+0xb4>)
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800ec08:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800ecb0 <ModeSelect+0xb8>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800ec0c:	eddf 8a29 	vldr	s17, [pc, #164]	; 800ecb4 <ModeSelect+0xbc>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ec10:	2100      	movs	r1, #0
{
 800ec12:	4690      	mov	r8, r2
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ec14:	f002 faac 	bl	8011170 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800ec18:	2104      	movs	r1, #4
 800ec1a:	4823      	ldr	r0, [pc, #140]	; (800eca8 <ModeSelect+0xb0>)
 800ec1c:	f002 faa8 	bl	8011170 <HAL_TIM_Encoder_Start>
	TIM3->CNT = INITIAL_PULSE;
 800ec20:	4a25      	ldr	r2, [pc, #148]	; (800ecb8 <ModeSelect+0xc0>)
	*pMode=min;
 800ec22:	f888 6000 	strb.w	r6, [r8]
	TIM3->CNT = INITIAL_PULSE;
 800ec26:	f247 552f 	movw	r5, #29999	; 0x752f
	gpio_callback_count = 0;
 800ec2a:	2300      	movs	r3, #0
	TIM3->CNT = INITIAL_PULSE;
 800ec2c:	6255      	str	r5, [r2, #36]	; 0x24
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800ec2e:	4691      	mov	r9, r2
	gpio_callback_count = 0;
 800ec30:	6023      	str	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800ec32:	b9eb      	cbnz	r3, 800ec70 <ModeSelect+0x78>
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800ec34:	ed99 8a09 	vldr	s16, [r9, #36]	; 0x24
		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800ec38:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800ec3c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800ec40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec44:	db0c      	blt.n	800ec60 <ModeSelect+0x68>
		  	  *pMode += 1;
 800ec46:	f898 0000 	ldrb.w	r0, [r8]
 800ec4a:	3001      	adds	r0, #1
 800ec4c:	b240      	sxtb	r0, r0
		  		  *pMode = min;
 800ec4e:	42b8      	cmp	r0, r7
 800ec50:	bfc8      	it	gt
 800ec52:	4630      	movgt	r0, r6
 800ec54:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800ec58:	f7ff fb18 	bl	800e28c <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800ec5c:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800ec60:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ec64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec68:	d910      	bls.n	800ec8c <ModeSelect+0x94>
 800ec6a:	6823      	ldr	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d0e1      	beq.n	800ec34 <ModeSelect+0x3c>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;
		  }
	}
	gpio_callback_count = 0;
 800ec70:	2300      	movs	r3, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800ec72:	4619      	mov	r1, r3
 800ec74:	480c      	ldr	r0, [pc, #48]	; (800eca8 <ModeSelect+0xb0>)
	gpio_callback_count = 0;
 800ec76:	6023      	str	r3, [r4, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800ec78:	f002 fa9e 	bl	80111b8 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
}
 800ec7c:	ecbd 8b04 	vpop	{d8-d9}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800ec80:	2104      	movs	r1, #4
 800ec82:	4809      	ldr	r0, [pc, #36]	; (800eca8 <ModeSelect+0xb0>)
}
 800ec84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800ec88:	f002 ba96 	b.w	80111b8 <HAL_TIM_Encoder_Stop>
		  	  *pMode -= 1;
 800ec8c:	f898 0000 	ldrb.w	r0, [r8]
 800ec90:	3801      	subs	r0, #1
 800ec92:	b240      	sxtb	r0, r0
 800ec94:	42b0      	cmp	r0, r6
 800ec96:	bfb8      	it	lt
 800ec98:	4638      	movlt	r0, r7
 800ec9a:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800ec9e:	f7ff faf5 	bl	800e28c <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800eca2:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
 800eca6:	e7e0      	b.n	800ec6a <ModeSelect+0x72>
 800eca8:	20004c08 	.word	0x20004c08
 800ecac:	200004d0 	.word	0x200004d0
 800ecb0:	47352f00 	.word	0x47352f00
 800ecb4:	4654bc00 	.word	0x4654bc00
 800ecb8:	40000400 	.word	0x40000400

0800ecbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ecbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ecf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ecc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ecc2:	e003      	b.n	800eccc <LoopCopyDataInit>

0800ecc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ecc4:	4b0c      	ldr	r3, [pc, #48]	; (800ecf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ecc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ecc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ecca:	3104      	adds	r1, #4

0800eccc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800eccc:	480b      	ldr	r0, [pc, #44]	; (800ecfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ecce:	4b0c      	ldr	r3, [pc, #48]	; (800ed00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ecd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ecd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ecd4:	d3f6      	bcc.n	800ecc4 <CopyDataInit>
  ldr  r2, =_sbss
 800ecd6:	4a0b      	ldr	r2, [pc, #44]	; (800ed04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ecd8:	e002      	b.n	800ece0 <LoopFillZerobss>

0800ecda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ecda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ecdc:	f842 3b04 	str.w	r3, [r2], #4

0800ece0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ece0:	4b09      	ldr	r3, [pc, #36]	; (800ed08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ece2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ece4:	d3f9      	bcc.n	800ecda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ece6:	f7fe fea1 	bl	800da2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ecea:	f003 fa7d 	bl	80121e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ecee:	f7fe f9d7 	bl	800d0a0 <main>
  bx  lr    
 800ecf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ecf4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ecf8:	080176c8 	.word	0x080176c8
  ldr  r0, =_sdata
 800ecfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ed00:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 800ed04:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 800ed08:	20004e50 	.word	0x20004e50

0800ed0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ed0c:	e7fe      	b.n	800ed0c <ADC_IRQHandler>
	...

0800ed10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ed10:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ed12:	4a0e      	ldr	r2, [pc, #56]	; (800ed4c <HAL_InitTick+0x3c>)
 800ed14:	4b0e      	ldr	r3, [pc, #56]	; (800ed50 <HAL_InitTick+0x40>)
 800ed16:	7812      	ldrb	r2, [r2, #0]
 800ed18:	681b      	ldr	r3, [r3, #0]
{
 800ed1a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ed1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ed20:	fbb0 f0f2 	udiv	r0, r0, r2
 800ed24:	fbb3 f0f0 	udiv	r0, r3, r0
 800ed28:	f000 fb24 	bl	800f374 <HAL_SYSTICK_Config>
 800ed2c:	b908      	cbnz	r0, 800ed32 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ed2e:	2d0f      	cmp	r5, #15
 800ed30:	d901      	bls.n	800ed36 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800ed32:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800ed34:	bd38      	pop	{r3, r4, r5, pc}
 800ed36:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ed38:	4602      	mov	r2, r0
 800ed3a:	4629      	mov	r1, r5
 800ed3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed40:	f000 fad4 	bl	800f2ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ed44:	4b03      	ldr	r3, [pc, #12]	; (800ed54 <HAL_InitTick+0x44>)
 800ed46:	4620      	mov	r0, r4
 800ed48:	601d      	str	r5, [r3, #0]
}
 800ed4a:	bd38      	pop	{r3, r4, r5, pc}
 800ed4c:	20000024 	.word	0x20000024
 800ed50:	20000020 	.word	0x20000020
 800ed54:	20000028 	.word	0x20000028

0800ed58 <HAL_Init>:
{
 800ed58:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ed5a:	4b0b      	ldr	r3, [pc, #44]	; (800ed88 <HAL_Init+0x30>)
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed62:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed6a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed72:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ed74:	2003      	movs	r0, #3
 800ed76:	f000 faa7 	bl	800f2c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800ed7a:	2000      	movs	r0, #0
 800ed7c:	f7ff ffc8 	bl	800ed10 <HAL_InitTick>
  HAL_MspInit();
 800ed80:	f7fe fbc0 	bl	800d504 <HAL_MspInit>
}
 800ed84:	2000      	movs	r0, #0
 800ed86:	bd08      	pop	{r3, pc}
 800ed88:	40023c00 	.word	0x40023c00

0800ed8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800ed8c:	4a03      	ldr	r2, [pc, #12]	; (800ed9c <HAL_IncTick+0x10>)
 800ed8e:	4b04      	ldr	r3, [pc, #16]	; (800eda0 <HAL_IncTick+0x14>)
 800ed90:	6811      	ldr	r1, [r2, #0]
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	440b      	add	r3, r1
 800ed96:	6013      	str	r3, [r2, #0]
}
 800ed98:	4770      	bx	lr
 800ed9a:	bf00      	nop
 800ed9c:	20004e28 	.word	0x20004e28
 800eda0:	20000024 	.word	0x20000024

0800eda4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800eda4:	4b01      	ldr	r3, [pc, #4]	; (800edac <HAL_GetTick+0x8>)
 800eda6:	6818      	ldr	r0, [r3, #0]
}
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop
 800edac:	20004e28 	.word	0x20004e28

0800edb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800edb0:	b538      	push	{r3, r4, r5, lr}
 800edb2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800edb4:	f7ff fff6 	bl	800eda4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800edb8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800edba:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800edbc:	d002      	beq.n	800edc4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800edbe:	4b04      	ldr	r3, [pc, #16]	; (800edd0 <HAL_Delay+0x20>)
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800edc4:	f7ff ffee 	bl	800eda4 <HAL_GetTick>
 800edc8:	1b40      	subs	r0, r0, r5
 800edca:	42a0      	cmp	r0, r4
 800edcc:	d3fa      	bcc.n	800edc4 <HAL_Delay+0x14>
  {
  }
}
 800edce:	bd38      	pop	{r3, r4, r5, pc}
 800edd0:	20000024 	.word	0x20000024

0800edd4 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800edd4:	2800      	cmp	r0, #0
 800edd6:	f000 8091 	beq.w	800eefc <HAL_ADC_Init+0x128>
{
 800edda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800eddc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800edde:	4604      	mov	r4, r0
 800ede0:	2d00      	cmp	r5, #0
 800ede2:	f000 8081 	beq.w	800eee8 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ede6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ede8:	06db      	lsls	r3, r3, #27
 800edea:	d504      	bpl.n	800edf6 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800edec:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800edee:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800edf0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800edf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800edf6:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800edf8:	494d      	ldr	r1, [pc, #308]	; (800ef30 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800edfa:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800edfc:	4d4d      	ldr	r5, [pc, #308]	; (800ef34 <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 800edfe:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800ee02:	f022 0202 	bic.w	r2, r2, #2
 800ee06:	f042 0202 	orr.w	r2, r2, #2
 800ee0a:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ee0c:	684a      	ldr	r2, [r1, #4]
 800ee0e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800ee12:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800ee14:	684a      	ldr	r2, [r1, #4]
 800ee16:	6860      	ldr	r0, [r4, #4]
 800ee18:	4302      	orrs	r2, r0
 800ee1a:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ee1c:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ee1e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ee20:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ee22:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ee24:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800ee28:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ee2a:	685a      	ldr	r2, [r3, #4]
 800ee2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ee30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ee32:	6858      	ldr	r0, [r3, #4]
 800ee34:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800ee38:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ee3a:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ee3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800ee3e:	4339      	orrs	r1, r7
 800ee40:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800ee42:	6899      	ldr	r1, [r3, #8]
 800ee44:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800ee48:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ee4a:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ee4c:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ee4e:	ea42 0206 	orr.w	r2, r2, r6
 800ee52:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ee54:	d054      	beq.n	800ef00 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ee56:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ee58:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ee5a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800ee5e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ee60:	689a      	ldr	r2, [r3, #8]
 800ee62:	4310      	orrs	r0, r2
 800ee64:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ee66:	6899      	ldr	r1, [r3, #8]
 800ee68:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800ee6c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ee6e:	689a      	ldr	r2, [r3, #8]
 800ee70:	432a      	orrs	r2, r5
 800ee72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ee74:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ee76:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ee78:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ee7c:	f021 0102 	bic.w	r1, r1, #2
 800ee80:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ee82:	689a      	ldr	r2, [r3, #8]
 800ee84:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800ee88:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ee8a:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d140      	bne.n	800ef12 <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ee90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ee94:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ee96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ee98:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ee9a:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ee9e:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800eea0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800eea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800eea6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800eea8:	3d01      	subs	r5, #1
 800eeaa:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 800eeae:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800eeb0:	6898      	ldr	r0, [r3, #8]
 800eeb2:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800eeb6:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800eeb8:	6899      	ldr	r1, [r3, #8]
 800eeba:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 800eebe:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800eec0:	6899      	ldr	r1, [r3, #8]
 800eec2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800eec6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800eec8:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800eeca:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800eecc:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800eed0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800eed2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800eed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eed6:	f023 0303 	bic.w	r3, r3, #3
 800eeda:	f043 0301 	orr.w	r3, r3, #1
 800eede:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800eee0:	2300      	movs	r3, #0
 800eee2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800eee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800eee8:	f7fe fb28 	bl	800d53c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800eeec:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800eeee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800eef0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800eef4:	06db      	lsls	r3, r3, #27
 800eef6:	f53f af79 	bmi.w	800edec <HAL_ADC_Init+0x18>
 800eefa:	e77c      	b.n	800edf6 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 800eefc:	2001      	movs	r0, #1
}
 800eefe:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ef00:	689a      	ldr	r2, [r3, #8]
 800ef02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ef06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ef08:	689a      	ldr	r2, [r3, #8]
 800ef0a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ef0e:	609a      	str	r2, [r3, #8]
 800ef10:	e7b0      	b.n	800ee74 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ef12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ef16:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ef18:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ef1a:	685a      	ldr	r2, [r3, #4]
 800ef1c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ef20:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ef22:	685a      	ldr	r2, [r3, #4]
 800ef24:	3901      	subs	r1, #1
 800ef26:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800ef2a:	605a      	str	r2, [r3, #4]
 800ef2c:	e7b3      	b.n	800ee96 <HAL_ADC_Init+0xc2>
 800ef2e:	bf00      	nop
 800ef30:	40012300 	.word	0x40012300
 800ef34:	0f000001 	.word	0x0f000001

0800ef38 <HAL_ADC_Start_DMA>:
{
 800ef38:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800ef3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800ef3e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 800ef40:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 800ef42:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800ef44:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 800ef46:	f000 8081 	beq.w	800f04c <HAL_ADC_Start_DMA+0x114>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ef4a:	6805      	ldr	r5, [r0, #0]
 800ef4c:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 800ef4e:	2401      	movs	r4, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ef50:	07df      	lsls	r7, r3, #31
  __HAL_LOCK(hadc);
 800ef52:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ef56:	d414      	bmi.n	800ef82 <HAL_ADC_Start_DMA+0x4a>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ef58:	4b40      	ldr	r3, [pc, #256]	; (800f05c <HAL_ADC_Start_DMA+0x124>)
 800ef5a:	4e41      	ldr	r6, [pc, #260]	; (800f060 <HAL_ADC_Start_DMA+0x128>)
 800ef5c:	681c      	ldr	r4, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800ef5e:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ef60:	fba6 6404 	umull	r6, r4, r6, r4
 800ef64:	0ca4      	lsrs	r4, r4, #18
    __HAL_ADC_ENABLE(hadc);
 800ef66:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ef6a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    __HAL_ADC_ENABLE(hadc);
 800ef6e:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ef70:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800ef72:	9b01      	ldr	r3, [sp, #4]
 800ef74:	b12b      	cbz	r3, 800ef82 <HAL_ADC_Start_DMA+0x4a>
      counter--;
 800ef76:	9c01      	ldr	r4, [sp, #4]
 800ef78:	3c01      	subs	r4, #1
 800ef7a:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800ef7c:	9c01      	ldr	r4, [sp, #4]
 800ef7e:	2c00      	cmp	r4, #0
 800ef80:	d1f9      	bne.n	800ef76 <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800ef82:	68ab      	ldr	r3, [r5, #8]
 800ef84:	07de      	lsls	r6, r3, #31
 800ef86:	d543      	bpl.n	800f010 <HAL_ADC_Start_DMA+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 800ef88:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800ef8a:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800ef8e:	f024 0401 	bic.w	r4, r4, #1
 800ef92:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800ef96:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800ef98:	686b      	ldr	r3, [r5, #4]
 800ef9a:	055c      	lsls	r4, r3, #21
 800ef9c:	d505      	bpl.n	800efaa <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800ef9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800efa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800efa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800efa8:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800efaa:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800efac:	4e2d      	ldr	r6, [pc, #180]	; (800f064 <HAL_ADC_Start_DMA+0x12c>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800efae:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800efb2:	bf1c      	itt	ne
 800efb4:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800efb6:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800efba:	6443      	str	r3, [r0, #68]	; 0x44
 800efbc:	4604      	mov	r4, r0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800efbe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800efc0:	4613      	mov	r3, r2
    __HAL_UNLOCK(hadc);   
 800efc2:	2700      	movs	r7, #0
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800efc4:	4a28      	ldr	r2, [pc, #160]	; (800f068 <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 800efc6:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800efca:	63c6      	str	r6, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800efcc:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800efce:	4e27      	ldr	r6, [pc, #156]	; (800f06c <HAL_ADC_Start_DMA+0x134>)
 800efd0:	64c6      	str	r6, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800efd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800efd6:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800efd8:	686e      	ldr	r6, [r5, #4]
 800efda:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
 800efde:	606e      	str	r6, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800efe0:	68ae      	ldr	r6, [r5, #8]
 800efe2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800efe6:	460a      	mov	r2, r1
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800efe8:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800efea:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800efee:	f000 fa75 	bl	800f4dc <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800eff2:	4b1f      	ldr	r3, [pc, #124]	; (800f070 <HAL_ADC_Start_DMA+0x138>)
 800eff4:	685a      	ldr	r2, [r3, #4]
 800eff6:	06d2      	lsls	r2, r2, #27
 800eff8:	d10d      	bne.n	800f016 <HAL_ADC_Start_DMA+0xde>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800effa:	6822      	ldr	r2, [r4, #0]
 800effc:	491d      	ldr	r1, [pc, #116]	; (800f074 <HAL_ADC_Start_DMA+0x13c>)
 800effe:	428a      	cmp	r2, r1
 800f000:	d01b      	beq.n	800f03a <HAL_ADC_Start_DMA+0x102>
 800f002:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800f006:	428a      	cmp	r2, r1
 800f008:	d023      	beq.n	800f052 <HAL_ADC_Start_DMA+0x11a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f00a:	491b      	ldr	r1, [pc, #108]	; (800f078 <HAL_ADC_Start_DMA+0x140>)
 800f00c:	428a      	cmp	r2, r1
 800f00e:	d00f      	beq.n	800f030 <HAL_ADC_Start_DMA+0xf8>
  return HAL_OK;
 800f010:	2000      	movs	r0, #0
}
 800f012:	b003      	add	sp, #12
 800f014:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800f016:	6823      	ldr	r3, [r4, #0]
 800f018:	4a16      	ldr	r2, [pc, #88]	; (800f074 <HAL_ADC_Start_DMA+0x13c>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d1f8      	bne.n	800f010 <HAL_ADC_Start_DMA+0xd8>
 800f01e:	6898      	ldr	r0, [r3, #8]
 800f020:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800f024:	d1f4      	bne.n	800f010 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f026:	689a      	ldr	r2, [r3, #8]
 800f028:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f02c:	609a      	str	r2, [r3, #8]
 800f02e:	e7f0      	b.n	800f012 <HAL_ADC_Start_DMA+0xda>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	f003 031f 	and.w	r3, r3, #31
 800f036:	2b0f      	cmp	r3, #15
 800f038:	d8ea      	bhi.n	800f010 <HAL_ADC_Start_DMA+0xd8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800f03a:	6890      	ldr	r0, [r2, #8]
 800f03c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800f040:	d1e6      	bne.n	800f010 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f042:	6893      	ldr	r3, [r2, #8]
 800f044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f048:	6093      	str	r3, [r2, #8]
 800f04a:	e7e2      	b.n	800f012 <HAL_ADC_Start_DMA+0xda>
  __HAL_LOCK(hadc);
 800f04c:	2002      	movs	r0, #2
}
 800f04e:	b003      	add	sp, #12
 800f050:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	06db      	lsls	r3, r3, #27
 800f056:	d0f0      	beq.n	800f03a <HAL_ADC_Start_DMA+0x102>
 800f058:	e7da      	b.n	800f010 <HAL_ADC_Start_DMA+0xd8>
 800f05a:	bf00      	nop
 800f05c:	20000020 	.word	0x20000020
 800f060:	431bde83 	.word	0x431bde83
 800f064:	0800f10d 	.word	0x0800f10d
 800f068:	0800f0e5 	.word	0x0800f0e5
 800f06c:	0800f0f5 	.word	0x0800f0f5
 800f070:	40012300 	.word	0x40012300
 800f074:	40012000 	.word	0x40012000
 800f078:	40012200 	.word	0x40012200

0800f07c <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800f07c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f080:	2b01      	cmp	r3, #1
 800f082:	d029      	beq.n	800f0d8 <HAL_ADC_Stop_DMA+0x5c>
  __HAL_ADC_DISABLE(hadc);
 800f084:	6803      	ldr	r3, [r0, #0]
 800f086:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800f088:	2101      	movs	r1, #1
  __HAL_ADC_DISABLE(hadc);
 800f08a:	f022 0201 	bic.w	r2, r2, #1
{
 800f08e:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800f090:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800f094:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800f096:	689a      	ldr	r2, [r3, #8]
 800f098:	07d2      	lsls	r2, r2, #31
 800f09a:	4604      	mov	r4, r0
 800f09c:	d504      	bpl.n	800f0a8 <HAL_ADC_Stop_DMA+0x2c>
  __HAL_UNLOCK(hadc);
 800f09e:	2300      	movs	r3, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f0a0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800f0a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f0a6:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800f0a8:	689a      	ldr	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800f0aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800f0ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f0b0:	609a      	str	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800f0b2:	f000 fa51 	bl	800f558 <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800f0b6:	6822      	ldr	r2, [r4, #0]
 800f0b8:	6853      	ldr	r3, [r2, #4]
 800f0ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f0be:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800f0c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f0c6:	f023 0301 	bic.w	r3, r3, #1
 800f0ca:	f043 0301 	orr.w	r3, r3, #1
 800f0ce:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f0d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800f0d8:	2002      	movs	r0, #2
}
 800f0da:	4770      	bx	lr

0800f0dc <HAL_ADC_ConvCpltCallback>:
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop

0800f0e0 <HAL_ADC_ConvHalfCpltCallback>:
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop

0800f0e4 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f0e4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f0e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f0e8:	f7ff fffa 	bl	800f0e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f0ec:	bd08      	pop	{r3, pc}
 800f0ee:	bf00      	nop

0800f0f0 <HAL_ADC_ErrorCallback>:
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop

0800f0f4 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f0f4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800f0f6:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800f0f8:	2340      	movs	r3, #64	; 0x40
 800f0fa:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800f0fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f0fe:	f043 0304 	orr.w	r3, r3, #4
 800f102:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f104:	f7ff fff4 	bl	800f0f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f108:	bd08      	pop	{r3, pc}
 800f10a:	bf00      	nop

0800f10c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f10c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f10e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f110:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800f114:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f118:	d123      	bne.n	800f162 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f11a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f11e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f120:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f122:	688a      	ldr	r2, [r1, #8]
 800f124:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800f128:	d117      	bne.n	800f15a <ADC_DMAConvCplt+0x4e>
 800f12a:	7e1a      	ldrb	r2, [r3, #24]
 800f12c:	b9aa      	cbnz	r2, 800f15a <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f12e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f130:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800f134:	d002      	beq.n	800f13c <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f136:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f138:	0550      	lsls	r0, r2, #21
 800f13a:	d40e      	bmi.n	800f15a <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f13c:	684a      	ldr	r2, [r1, #4]
 800f13e:	f022 0220 	bic.w	r2, r2, #32
 800f142:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800f144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f146:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f14a:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f14c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f14e:	04d1      	lsls	r1, r2, #19
 800f150:	d403      	bmi.n	800f15a <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f154:	f042 0201 	orr.w	r2, r2, #1
 800f158:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7ff ffbe 	bl	800f0dc <HAL_ADC_ConvCpltCallback>
}
 800f160:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800f162:	06d2      	lsls	r2, r2, #27
 800f164:	d404      	bmi.n	800f170 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800f168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f16e:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 800f170:	4618      	mov	r0, r3
 800f172:	f7ff ffbd 	bl	800f0f0 <HAL_ADC_ErrorCallback>
}
 800f176:	bd10      	pop	{r4, pc}

0800f178 <HAL_ADC_ConfigChannel>:
{
 800f178:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800f17a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800f17e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800f180:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800f182:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800f184:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800f186:	f000 8095 	beq.w	800f2b4 <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f18a:	680d      	ldr	r5, [r1, #0]
 800f18c:	688a      	ldr	r2, [r1, #8]
 800f18e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800f190:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f192:	2d09      	cmp	r5, #9
 800f194:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 800f196:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f19a:	d829      	bhi.n	800f1f0 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800f19c:	691c      	ldr	r4, [r3, #16]
 800f19e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800f1a2:	f04f 0c07 	mov.w	ip, #7
 800f1a6:	fa0c fc06 	lsl.w	ip, ip, r6
 800f1aa:	ea24 040c 	bic.w	r4, r4, ip
 800f1ae:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800f1b0:	691c      	ldr	r4, [r3, #16]
 800f1b2:	fa02 f606 	lsl.w	r6, r2, r6
 800f1b6:	4326      	orrs	r6, r4
 800f1b8:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 800f1ba:	684e      	ldr	r6, [r1, #4]
 800f1bc:	2e06      	cmp	r6, #6
 800f1be:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800f1c2:	d82a      	bhi.n	800f21a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800f1c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f1c6:	3a05      	subs	r2, #5
 800f1c8:	241f      	movs	r4, #31
 800f1ca:	4094      	lsls	r4, r2
 800f1cc:	ea21 0104 	bic.w	r1, r1, r4
 800f1d0:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800f1d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f1d4:	fa07 f202 	lsl.w	r2, r7, r2
 800f1d8:	430a      	orrs	r2, r1
 800f1da:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f1dc:	4a37      	ldr	r2, [pc, #220]	; (800f2bc <HAL_ADC_ConfigChannel+0x144>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d02d      	beq.n	800f23e <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800f1e8:	4618      	mov	r0, r3
}
 800f1ea:	b002      	add	sp, #8
 800f1ec:	bcf0      	pop	{r4, r5, r6, r7}
 800f1ee:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800f1f0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800f1f4:	68dc      	ldr	r4, [r3, #12]
 800f1f6:	3e1e      	subs	r6, #30
 800f1f8:	f04f 0c07 	mov.w	ip, #7
 800f1fc:	fa0c fc06 	lsl.w	ip, ip, r6
 800f200:	ea24 040c 	bic.w	r4, r4, ip
 800f204:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800f206:	68dc      	ldr	r4, [r3, #12]
 800f208:	fa02 f606 	lsl.w	r6, r2, r6
 800f20c:	4326      	orrs	r6, r4
 800f20e:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 800f210:	684e      	ldr	r6, [r1, #4]
 800f212:	2e06      	cmp	r6, #6
 800f214:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800f218:	d9d4      	bls.n	800f1c4 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800f21a:	2e0c      	cmp	r6, #12
 800f21c:	d835      	bhi.n	800f28a <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800f21e:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800f222:	211f      	movs	r1, #31
 800f224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f226:	40a1      	lsls	r1, r4
 800f228:	ea22 0201 	bic.w	r2, r2, r1
 800f22c:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f22e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f230:	fa07 f204 	lsl.w	r2, r7, r4
 800f234:	430a      	orrs	r2, r1
 800f236:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f238:	4a20      	ldr	r2, [pc, #128]	; (800f2bc <HAL_ADC_ConfigChannel+0x144>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d1d1      	bne.n	800f1e2 <HAL_ADC_ConfigChannel+0x6a>
 800f23e:	2d12      	cmp	r5, #18
 800f240:	d031      	beq.n	800f2a6 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800f242:	f1a5 0310 	sub.w	r3, r5, #16
 800f246:	2b01      	cmp	r3, #1
 800f248:	d8cb      	bhi.n	800f1e2 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f24a:	4a1d      	ldr	r2, [pc, #116]	; (800f2c0 <HAL_ADC_ConfigChannel+0x148>)
 800f24c:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800f24e:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f250:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f254:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800f256:	d1c4      	bne.n	800f1e2 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800f258:	4b1a      	ldr	r3, [pc, #104]	; (800f2c4 <HAL_ADC_ConfigChannel+0x14c>)
 800f25a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800f25e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f202 3283 	addw	r2, r2, #899	; 0x383
 800f268:	fba2 2303 	umull	r2, r3, r2, r3
 800f26c:	0c9b      	lsrs	r3, r3, #18
 800f26e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f272:	005b      	lsls	r3, r3, #1
 800f274:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800f276:	9b01      	ldr	r3, [sp, #4]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d0b2      	beq.n	800f1e2 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800f27c:	9b01      	ldr	r3, [sp, #4]
 800f27e:	3b01      	subs	r3, #1
 800f280:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800f282:	9b01      	ldr	r3, [sp, #4]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1f9      	bne.n	800f27c <HAL_ADC_ConfigChannel+0x104>
 800f288:	e7ab      	b.n	800f1e2 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800f28a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800f28e:	241f      	movs	r4, #31
 800f290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f292:	408c      	lsls	r4, r1
 800f294:	ea22 0204 	bic.w	r2, r2, r4
 800f298:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800f29a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f29c:	fa07 f201 	lsl.w	r2, r7, r1
 800f2a0:	4322      	orrs	r2, r4
 800f2a2:	62da      	str	r2, [r3, #44]	; 0x2c
 800f2a4:	e79a      	b.n	800f1dc <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800f2a6:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800f2aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f2ae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 800f2b2:	e796      	b.n	800f1e2 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800f2b4:	2002      	movs	r0, #2
}
 800f2b6:	b002      	add	sp, #8
 800f2b8:	bcf0      	pop	{r4, r5, r6, r7}
 800f2ba:	4770      	bx	lr
 800f2bc:	40012000 	.word	0x40012000
 800f2c0:	40012300 	.word	0x40012300
 800f2c4:	20000020 	.word	0x20000020

0800f2c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f2c8:	4a07      	ldr	r2, [pc, #28]	; (800f2e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800f2ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f2cc:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800f2d0:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f2d2:	0200      	lsls	r0, r0, #8
 800f2d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f2d8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800f2dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800f2e0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800f2e2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800f2e4:	4770      	bx	lr
 800f2e6:	bf00      	nop
 800f2e8:	e000ed00 	.word	0xe000ed00

0800f2ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f2ec:	4b18      	ldr	r3, [pc, #96]	; (800f350 <HAL_NVIC_SetPriority+0x64>)
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f2f4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f2f6:	f1c3 0507 	rsb	r5, r3, #7
 800f2fa:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f2fc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f300:	bf28      	it	cs
 800f302:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f304:	2c06      	cmp	r4, #6
 800f306:	d919      	bls.n	800f33c <HAL_NVIC_SetPriority+0x50>
 800f308:	3b03      	subs	r3, #3
 800f30a:	f04f 34ff 	mov.w	r4, #4294967295
 800f30e:	409c      	lsls	r4, r3
 800f310:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f314:	f04f 32ff 	mov.w	r2, #4294967295
 800f318:	40aa      	lsls	r2, r5
 800f31a:	ea21 0102 	bic.w	r1, r1, r2
 800f31e:	fa01 f203 	lsl.w	r2, r1, r3
 800f322:	4322      	orrs	r2, r4
 800f324:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800f326:	2800      	cmp	r0, #0
 800f328:	b2d2      	uxtb	r2, r2
 800f32a:	db0a      	blt.n	800f342 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f32c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800f330:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800f334:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800f338:	bc30      	pop	{r4, r5}
 800f33a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f33c:	2400      	movs	r4, #0
 800f33e:	4623      	mov	r3, r4
 800f340:	e7e8      	b.n	800f314 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f342:	4b04      	ldr	r3, [pc, #16]	; (800f354 <HAL_NVIC_SetPriority+0x68>)
 800f344:	f000 000f 	and.w	r0, r0, #15
 800f348:	4403      	add	r3, r0
 800f34a:	761a      	strb	r2, [r3, #24]
 800f34c:	bc30      	pop	{r4, r5}
 800f34e:	4770      	bx	lr
 800f350:	e000ed00 	.word	0xe000ed00
 800f354:	e000ecfc 	.word	0xe000ecfc

0800f358 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800f358:	2800      	cmp	r0, #0
 800f35a:	db07      	blt.n	800f36c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f35c:	f000 011f 	and.w	r1, r0, #31
 800f360:	2301      	movs	r3, #1
 800f362:	0940      	lsrs	r0, r0, #5
 800f364:	4a02      	ldr	r2, [pc, #8]	; (800f370 <HAL_NVIC_EnableIRQ+0x18>)
 800f366:	408b      	lsls	r3, r1
 800f368:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	e000e100 	.word	0xe000e100

0800f374 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f374:	3801      	subs	r0, #1
 800f376:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800f37a:	d20e      	bcs.n	800f39a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f37c:	4b08      	ldr	r3, [pc, #32]	; (800f3a0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f37e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f380:	4c08      	ldr	r4, [pc, #32]	; (800f3a4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f382:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f384:	20f0      	movs	r0, #240	; 0xf0
 800f386:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f38a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f38c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f38e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f392:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800f394:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f398:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800f39a:	2001      	movs	r0, #1
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop
 800f3a0:	e000e010 	.word	0xe000e010
 800f3a4:	e000ed00 	.word	0xe000ed00

0800f3a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3aa:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800f3ac:	f7ff fcfa 	bl	800eda4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f3b0:	2c00      	cmp	r4, #0
 800f3b2:	d054      	beq.n	800f45e <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f3b4:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f3b6:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800f3b8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800f3bc:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800f3be:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 800f3c0:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 800f3c4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800f3c8:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800f3ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f3cc:	e005      	b.n	800f3da <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f3ce:	f7ff fce9 	bl	800eda4 <HAL_GetTick>
 800f3d2:	1b40      	subs	r0, r0, r5
 800f3d4:	2805      	cmp	r0, #5
 800f3d6:	d83b      	bhi.n	800f450 <HAL_DMA_Init+0xa8>
 800f3d8:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	07d1      	lsls	r1, r2, #31
 800f3de:	d4f6      	bmi.n	800f3ce <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f3e0:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f3e4:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f3e8:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f3ea:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 800f3ec:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f3ee:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f3f0:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f3f4:	430a      	orrs	r2, r1
 800f3f6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800f3f8:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f3fa:	4835      	ldr	r0, [pc, #212]	; (800f4d0 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f3fc:	4332      	orrs	r2, r6
 800f3fe:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800f400:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f402:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f404:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f406:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f408:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f40c:	d029      	beq.n	800f462 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f40e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f410:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f412:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f416:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f418:	b2da      	uxtb	r2, r3
 800f41a:	482e      	ldr	r0, [pc, #184]	; (800f4d4 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800f41c:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f41e:	3a10      	subs	r2, #16
 800f420:	fba0 1202 	umull	r1, r2, r0, r2
 800f424:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f426:	492c      	ldr	r1, [pc, #176]	; (800f4d8 <HAL_DMA_Init+0x130>)
 800f428:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f42c:	5c89      	ldrb	r1, [r1, r2]
 800f42e:	65e1      	str	r1, [r4, #92]	; 0x5c
 800f430:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 800f434:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f436:	bf88      	it	hi
 800f438:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f43a:	223f      	movs	r2, #63	; 0x3f
 800f43c:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800f43e:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f440:	2100      	movs	r1, #0
 800f442:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 800f444:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f446:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f448:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800f44a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800f44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f450:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f452:	2220      	movs	r2, #32
 800f454:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800f456:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f458:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800f45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800f45e:	2001      	movs	r0, #1
}
 800f460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f462:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 800f466:	4301      	orrs	r1, r0
 800f468:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 800f46a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 800f46c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800f46e:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800f470:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f474:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 800f478:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f47a:	2800      	cmp	r0, #0
 800f47c:	d0cc      	beq.n	800f418 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f47e:	b17e      	cbz	r6, 800f4a0 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f480:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800f484:	d016      	beq.n	800f4b4 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f486:	2d02      	cmp	r5, #2
 800f488:	d903      	bls.n	800f492 <HAL_DMA_Init+0xea>
 800f48a:	2d03      	cmp	r5, #3
 800f48c:	d1c4      	bne.n	800f418 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f48e:	01c2      	lsls	r2, r0, #7
 800f490:	d5c2      	bpl.n	800f418 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800f492:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f494:	2240      	movs	r2, #64	; 0x40
 800f496:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 800f498:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 800f49a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800f49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800f4a0:	2d01      	cmp	r5, #1
 800f4a2:	d003      	beq.n	800f4ac <HAL_DMA_Init+0x104>
 800f4a4:	d3f3      	bcc.n	800f48e <HAL_DMA_Init+0xe6>
 800f4a6:	2d02      	cmp	r5, #2
 800f4a8:	d1b6      	bne.n	800f418 <HAL_DMA_Init+0x70>
 800f4aa:	e7f0      	b.n	800f48e <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f4ac:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800f4b0:	d1b2      	bne.n	800f418 <HAL_DMA_Init+0x70>
 800f4b2:	e7ee      	b.n	800f492 <HAL_DMA_Init+0xea>
    switch (tmp)
 800f4b4:	2d03      	cmp	r5, #3
 800f4b6:	d8af      	bhi.n	800f418 <HAL_DMA_Init+0x70>
 800f4b8:	a201      	add	r2, pc, #4	; (adr r2, 800f4c0 <HAL_DMA_Init+0x118>)
 800f4ba:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800f4be:	bf00      	nop
 800f4c0:	0800f493 	.word	0x0800f493
 800f4c4:	0800f48f 	.word	0x0800f48f
 800f4c8:	0800f493 	.word	0x0800f493
 800f4cc:	0800f4ad 	.word	0x0800f4ad
 800f4d0:	f010803f 	.word	0xf010803f
 800f4d4:	aaaaaaab 	.word	0xaaaaaaab
 800f4d8:	08017380 	.word	0x08017380

0800f4dc <HAL_DMA_Start_IT>:
{
 800f4dc:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800f4de:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800f4e2:	2c01      	cmp	r4, #1
 800f4e4:	d035      	beq.n	800f552 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 800f4e6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f4ea:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800f4ec:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800f4ee:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800f4f0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800f4f4:	d127      	bne.n	800f546 <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f4f6:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800f4f8:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f4fa:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800f4fc:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f500:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f502:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f504:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f506:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f50a:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f50c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800f50e:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 800f510:	bf0a      	itet	eq
 800f512:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800f514:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800f516:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f518:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800f51a:	bf18      	it	ne
 800f51c:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f51e:	233f      	movs	r3, #63	; 0x3f
 800f520:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 800f522:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f524:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f526:	6823      	ldr	r3, [r4, #0]
 800f528:	f043 0316 	orr.w	r3, r3, #22
 800f52c:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800f52e:	b11a      	cbz	r2, 800f538 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 800f530:	6823      	ldr	r3, [r4, #0]
 800f532:	f043 0308 	orr.w	r3, r3, #8
 800f536:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800f538:	6823      	ldr	r3, [r4, #0]
 800f53a:	f043 0301 	orr.w	r3, r3, #1
 800f53e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f540:	2000      	movs	r0, #0
}
 800f542:	bcf0      	pop	{r4, r5, r6, r7}
 800f544:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 800f546:	2300      	movs	r3, #0
 800f548:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 800f54c:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800f54e:	2002      	movs	r0, #2
}
 800f550:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800f552:	2002      	movs	r0, #2
}
 800f554:	bcf0      	pop	{r4, r5, r6, r7}
 800f556:	4770      	bx	lr

0800f558 <HAL_DMA_Abort>:
{
 800f558:	b570      	push	{r4, r5, r6, lr}
 800f55a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f55c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800f55e:	f7ff fc21 	bl	800eda4 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f562:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800f566:	2b02      	cmp	r3, #2
 800f568:	d006      	beq.n	800f578 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f56a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800f56c:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f56e:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800f570:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800f574:	2001      	movs	r0, #1
}
 800f576:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f578:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f57a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	f022 0216 	bic.w	r2, r2, #22
 800f582:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f584:	695a      	ldr	r2, [r3, #20]
 800f586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f58a:	4605      	mov	r5, r0
 800f58c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f58e:	b331      	cbz	r1, 800f5de <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	f022 0208 	bic.w	r2, r2, #8
 800f596:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800f598:	681a      	ldr	r2, [r3, #0]
 800f59a:	f022 0201 	bic.w	r2, r2, #1
 800f59e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f5a0:	e005      	b.n	800f5ae <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f5a2:	f7ff fbff 	bl	800eda4 <HAL_GetTick>
 800f5a6:	1b40      	subs	r0, r0, r5
 800f5a8:	2805      	cmp	r0, #5
 800f5aa:	d80f      	bhi.n	800f5cc <HAL_DMA_Abort+0x74>
 800f5ac:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	f013 0301 	ands.w	r3, r3, #1
 800f5b4:	d1f5      	bne.n	800f5a2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f5b6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f5b8:	223f      	movs	r2, #63	; 0x3f
 800f5ba:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800f5bc:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f5be:	60b2      	str	r2, [r6, #8]
  return HAL_OK;
 800f5c0:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 800f5c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800f5c6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800f5ca:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f5cc:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 800f5ce:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f5d0:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f5d2:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800f5d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f5d8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800f5dc:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f5de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f5e0:	2a00      	cmp	r2, #0
 800f5e2:	d1d5      	bne.n	800f590 <HAL_DMA_Abort+0x38>
 800f5e4:	e7d8      	b.n	800f598 <HAL_DMA_Abort+0x40>
 800f5e6:	bf00      	nop

0800f5e8 <HAL_DMA_IRQHandler>:
{
 800f5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5ea:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800f5ec:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f5ee:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 800f5f0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5f2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800f5f4:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f5f6:	4965      	ldr	r1, [pc, #404]	; (800f78c <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5f8:	2208      	movs	r2, #8
 800f5fa:	409a      	lsls	r2, r3
 800f5fc:	422a      	tst	r2, r5
{
 800f5fe:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800f600:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f602:	d003      	beq.n	800f60c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f604:	6801      	ldr	r1, [r0, #0]
 800f606:	6808      	ldr	r0, [r1, #0]
 800f608:	0740      	lsls	r0, r0, #29
 800f60a:	d459      	bmi.n	800f6c0 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f60c:	2201      	movs	r2, #1
 800f60e:	409a      	lsls	r2, r3
 800f610:	422a      	tst	r2, r5
 800f612:	d003      	beq.n	800f61c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f614:	6821      	ldr	r1, [r4, #0]
 800f616:	6949      	ldr	r1, [r1, #20]
 800f618:	0608      	lsls	r0, r1, #24
 800f61a:	d474      	bmi.n	800f706 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f61c:	2204      	movs	r2, #4
 800f61e:	409a      	lsls	r2, r3
 800f620:	422a      	tst	r2, r5
 800f622:	d003      	beq.n	800f62c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f624:	6821      	ldr	r1, [r4, #0]
 800f626:	6809      	ldr	r1, [r1, #0]
 800f628:	0789      	lsls	r1, r1, #30
 800f62a:	d466      	bmi.n	800f6fa <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f62c:	2210      	movs	r2, #16
 800f62e:	409a      	lsls	r2, r3
 800f630:	422a      	tst	r2, r5
 800f632:	d003      	beq.n	800f63c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f634:	6821      	ldr	r1, [r4, #0]
 800f636:	6808      	ldr	r0, [r1, #0]
 800f638:	0700      	lsls	r0, r0, #28
 800f63a:	d44b      	bmi.n	800f6d4 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f63c:	2220      	movs	r2, #32
 800f63e:	409a      	lsls	r2, r3
 800f640:	422a      	tst	r2, r5
 800f642:	d014      	beq.n	800f66e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f644:	6821      	ldr	r1, [r4, #0]
 800f646:	6808      	ldr	r0, [r1, #0]
 800f648:	06c0      	lsls	r0, r0, #27
 800f64a:	d510      	bpl.n	800f66e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f64c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f64e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800f652:	2a05      	cmp	r2, #5
 800f654:	d063      	beq.n	800f71e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f656:	680b      	ldr	r3, [r1, #0]
 800f658:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f65c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f65e:	d07e      	beq.n	800f75e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f660:	0319      	lsls	r1, r3, #12
 800f662:	f140 8089 	bpl.w	800f778 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800f666:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f668:	b10b      	cbz	r3, 800f66e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800f66a:	4620      	mov	r0, r4
 800f66c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f66e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f670:	b323      	cbz	r3, 800f6bc <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f672:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f674:	07da      	lsls	r2, r3, #31
 800f676:	d51a      	bpl.n	800f6ae <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 800f678:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800f67a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800f67c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800f680:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f682:	4943      	ldr	r1, [pc, #268]	; (800f790 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 800f684:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800f688:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800f68c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f68e:	0ab6      	lsrs	r6, r6, #10
 800f690:	e002      	b.n	800f698 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f692:	6813      	ldr	r3, [r2, #0]
 800f694:	07db      	lsls	r3, r3, #31
 800f696:	d504      	bpl.n	800f6a2 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 800f698:	9b01      	ldr	r3, [sp, #4]
 800f69a:	3301      	adds	r3, #1
 800f69c:	42b3      	cmp	r3, r6
 800f69e:	9301      	str	r3, [sp, #4]
 800f6a0:	d9f7      	bls.n	800f692 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800f6a2:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800f6a4:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800f6a6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800f6aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800f6ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f6b0:	b123      	cbz	r3, 800f6bc <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800f6b2:	4620      	mov	r0, r4
}
 800f6b4:	b003      	add	sp, #12
 800f6b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800f6ba:	4718      	bx	r3
}
 800f6bc:	b003      	add	sp, #12
 800f6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f6c0:	6808      	ldr	r0, [r1, #0]
 800f6c2:	f020 0004 	bic.w	r0, r0, #4
 800f6c6:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f6c8:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f6ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f6cc:	f042 0201 	orr.w	r2, r2, #1
 800f6d0:	6562      	str	r2, [r4, #84]	; 0x54
 800f6d2:	e79b      	b.n	800f60c <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f6d4:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f6d6:	680a      	ldr	r2, [r1, #0]
 800f6d8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f6dc:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f6de:	d118      	bne.n	800f712 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f6e0:	05d2      	lsls	r2, r2, #23
 800f6e2:	d403      	bmi.n	800f6ec <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f6e4:	680a      	ldr	r2, [r1, #0]
 800f6e6:	f022 0208 	bic.w	r2, r2, #8
 800f6ea:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800f6ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f6ee:	2a00      	cmp	r2, #0
 800f6f0:	d0a4      	beq.n	800f63c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	4790      	blx	r2
 800f6f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f6f8:	e7a0      	b.n	800f63c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f6fa:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f6fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f6fe:	f042 0204 	orr.w	r2, r2, #4
 800f702:	6562      	str	r2, [r4, #84]	; 0x54
 800f704:	e792      	b.n	800f62c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f706:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f708:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f70a:	f042 0202 	orr.w	r2, r2, #2
 800f70e:	6562      	str	r2, [r4, #84]	; 0x54
 800f710:	e784      	b.n	800f61c <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f712:	0311      	lsls	r1, r2, #12
 800f714:	d5ea      	bpl.n	800f6ec <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f716:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f718:	2a00      	cmp	r2, #0
 800f71a:	d1ea      	bne.n	800f6f2 <HAL_DMA_IRQHandler+0x10a>
 800f71c:	e78e      	b.n	800f63c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f71e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f720:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f722:	f022 0216 	bic.w	r2, r2, #22
 800f726:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f728:	694a      	ldr	r2, [r1, #20]
 800f72a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f72e:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f730:	b338      	cbz	r0, 800f782 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f732:	680a      	ldr	r2, [r1, #0]
 800f734:	f022 0208 	bic.w	r2, r2, #8
 800f738:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f73a:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800f73c:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f73e:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800f742:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 800f744:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f746:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800f748:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800f74c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800f750:	2900      	cmp	r1, #0
 800f752:	d0b3      	beq.n	800f6bc <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800f754:	4620      	mov	r0, r4
}
 800f756:	b003      	add	sp, #12
 800f758:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800f75c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f75e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800f762:	d180      	bne.n	800f666 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f764:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800f766:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f768:	f022 0210 	bic.w	r2, r2, #16
 800f76c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800f76e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800f772:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800f776:	e776      	b.n	800f666 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 800f778:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f47f af75 	bne.w	800f66a <HAL_DMA_IRQHandler+0x82>
 800f780:	e775      	b.n	800f66e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f782:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f784:	2a00      	cmp	r2, #0
 800f786:	d1d4      	bne.n	800f732 <HAL_DMA_IRQHandler+0x14a>
 800f788:	e7d7      	b.n	800f73a <HAL_DMA_IRQHandler+0x152>
 800f78a:	bf00      	nop
 800f78c:	20000020 	.word	0x20000020
 800f790:	1b4e81b5 	.word	0x1b4e81b5

0800f794 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f794:	4b06      	ldr	r3, [pc, #24]	; (800f7b0 <HAL_FLASH_Unlock+0x1c>)
 800f796:	691a      	ldr	r2, [r3, #16]
 800f798:	2a00      	cmp	r2, #0
 800f79a:	db01      	blt.n	800f7a0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800f79c:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 800f79e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f7a0:	4904      	ldr	r1, [pc, #16]	; (800f7b4 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f7a2:	4a05      	ldr	r2, [pc, #20]	; (800f7b8 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f7a4:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f7a6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f7a8:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800f7aa:	0fc0      	lsrs	r0, r0, #31
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	40023c00 	.word	0x40023c00
 800f7b4:	45670123 	.word	0x45670123
 800f7b8:	cdef89ab 	.word	0xcdef89ab

0800f7bc <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800f7bc:	4a03      	ldr	r2, [pc, #12]	; (800f7cc <HAL_FLASH_Lock+0x10>)
 800f7be:	6913      	ldr	r3, [r2, #16]
 800f7c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f7c4:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
}
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	40023c00 	.word	0x40023c00

0800f7d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800f7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f7d2:	4d2c      	ldr	r5, [pc, #176]	; (800f884 <FLASH_WaitForLastOperation+0xb4>)
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f7d4:	4e2c      	ldr	r6, [pc, #176]	; (800f888 <FLASH_WaitForLastOperation+0xb8>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f7d6:	2300      	movs	r3, #0
{ 
 800f7d8:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f7da:	61eb      	str	r3, [r5, #28]
  tickstart = HAL_GetTick();
 800f7dc:	f7ff fae2 	bl	800eda4 <HAL_GetTick>
 800f7e0:	4607      	mov	r7, r0
 800f7e2:	1c60      	adds	r0, r4, #1
 800f7e4:	d10f      	bne.n	800f806 <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f7e6:	4a28      	ldr	r2, [pc, #160]	; (800f888 <FLASH_WaitForLastOperation+0xb8>)
 800f7e8:	68d3      	ldr	r3, [r2, #12]
 800f7ea:	03d9      	lsls	r1, r3, #15
 800f7ec:	d4fc      	bmi.n	800f7e8 <FLASH_WaitForLastOperation+0x18>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800f7ee:	4b26      	ldr	r3, [pc, #152]	; (800f888 <FLASH_WaitForLastOperation+0xb8>)
 800f7f0:	68da      	ldr	r2, [r3, #12]
 800f7f2:	07d7      	lsls	r7, r2, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f7f4:	bf44      	itt	mi
 800f7f6:	2201      	movmi	r2, #1
 800f7f8:	60da      	strmi	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800f7fa:	4b23      	ldr	r3, [pc, #140]	; (800f888 <FLASH_WaitForLastOperation+0xb8>)
 800f7fc:	68d8      	ldr	r0, [r3, #12]
 800f7fe:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 800f802:	d10b      	bne.n	800f81c <FLASH_WaitForLastOperation+0x4c>
  }

  /* If there is no error flag set */
  return HAL_OK;
  
}  
 800f804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f806:	68f3      	ldr	r3, [r6, #12]
 800f808:	03db      	lsls	r3, r3, #15
 800f80a:	d5f0      	bpl.n	800f7ee <FLASH_WaitForLastOperation+0x1e>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800f80c:	b124      	cbz	r4, 800f818 <FLASH_WaitForLastOperation+0x48>
 800f80e:	f7ff fac9 	bl	800eda4 <HAL_GetTick>
 800f812:	1bc0      	subs	r0, r0, r7
 800f814:	42a0      	cmp	r0, r4
 800f816:	d9e4      	bls.n	800f7e2 <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 800f818:	2003      	movs	r0, #3
}  
 800f81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800f81c:	68da      	ldr	r2, [r3, #12]
 800f81e:	06d6      	lsls	r6, r2, #27
 800f820:	d504      	bpl.n	800f82c <FLASH_WaitForLastOperation+0x5c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f822:	69ea      	ldr	r2, [r5, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800f824:	2110      	movs	r1, #16
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f826:	430a      	orrs	r2, r1
 800f828:	61ea      	str	r2, [r5, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800f82a:	60d9      	str	r1, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800f82c:	4b16      	ldr	r3, [pc, #88]	; (800f888 <FLASH_WaitForLastOperation+0xb8>)
 800f82e:	68da      	ldr	r2, [r3, #12]
 800f830:	0694      	lsls	r4, r2, #26
 800f832:	d505      	bpl.n	800f840 <FLASH_WaitForLastOperation+0x70>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f834:	69ea      	ldr	r2, [r5, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800f836:	2120      	movs	r1, #32
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f838:	f042 0208 	orr.w	r2, r2, #8
 800f83c:	61ea      	str	r2, [r5, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800f83e:	60d9      	str	r1, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800f840:	4b11      	ldr	r3, [pc, #68]	; (800f888 <FLASH_WaitForLastOperation+0xb8>)
 800f842:	68da      	ldr	r2, [r3, #12]
 800f844:	0650      	lsls	r0, r2, #25
 800f846:	d505      	bpl.n	800f854 <FLASH_WaitForLastOperation+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800f848:	69ea      	ldr	r2, [r5, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800f84a:	2140      	movs	r1, #64	; 0x40
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800f84c:	f042 0204 	orr.w	r2, r2, #4
 800f850:	61ea      	str	r2, [r5, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800f852:	60d9      	str	r1, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800f854:	4b0c      	ldr	r3, [pc, #48]	; (800f888 <FLASH_WaitForLastOperation+0xb8>)
 800f856:	68da      	ldr	r2, [r3, #12]
 800f858:	0611      	lsls	r1, r2, #24
 800f85a:	d505      	bpl.n	800f868 <FLASH_WaitForLastOperation+0x98>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800f85c:	69ea      	ldr	r2, [r5, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800f85e:	2180      	movs	r1, #128	; 0x80
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800f860:	f042 0202 	orr.w	r2, r2, #2
 800f864:	61ea      	str	r2, [r5, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800f866:	60d9      	str	r1, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800f868:	4b07      	ldr	r3, [pc, #28]	; (800f888 <FLASH_WaitForLastOperation+0xb8>)
 800f86a:	68da      	ldr	r2, [r3, #12]
 800f86c:	0792      	lsls	r2, r2, #30
 800f86e:	d507      	bpl.n	800f880 <FLASH_WaitForLastOperation+0xb0>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800f870:	69ea      	ldr	r2, [r5, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800f872:	2102      	movs	r1, #2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800f874:	f042 0220 	orr.w	r2, r2, #32
 800f878:	61ea      	str	r2, [r5, #28]
    return HAL_ERROR;
 800f87a:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800f87c:	60d9      	str	r1, [r3, #12]
}  
 800f87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800f880:	2001      	movs	r0, #1
}  
 800f882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f884:	20004e2c 	.word	0x20004e2c
 800f888:	40023c00 	.word	0x40023c00

0800f88c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800f88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f890:	4e54      	ldr	r6, [pc, #336]	; (800f9e4 <HAL_FLASHEx_Erase+0x158>)
 800f892:	7e33      	ldrb	r3, [r6, #24]
 800f894:	2b01      	cmp	r3, #1
 800f896:	f000 8099 	beq.w	800f9cc <HAL_FLASHEx_Erase+0x140>
 800f89a:	2301      	movs	r3, #1
 800f89c:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f89e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f8a2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800f8a4:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f8a6:	f7ff ff93 	bl	800f7d0 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800f8aa:	4607      	mov	r7, r0
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	f040 8088 	bne.w	800f9c2 <HAL_FLASHEx_Erase+0x136>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800f8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f8b6:	f8c8 3000 	str.w	r3, [r8]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800f8ba:	682b      	ldr	r3, [r5, #0]
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d03e      	beq.n	800f93e <HAL_FLASHEx_Erase+0xb2>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f8c0:	e9d5 9302 	ldrd	r9, r3, [r5, #8]
 800f8c4:	444b      	add	r3, r9
 800f8c6:	454b      	cmp	r3, r9
 800f8c8:	d953      	bls.n	800f972 <HAL_FLASHEx_Erase+0xe6>
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f8ca:	4c47      	ldr	r4, [pc, #284]	; (800f9e8 <HAL_FLASHEx_Erase+0x15c>)
 800f8cc:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800f8d0:	e02d      	b.n	800f92e <HAL_FLASHEx_Erase+0xa2>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800f8d2:	2b02      	cmp	r3, #2
 800f8d4:	bf0c      	ite	eq
 800f8d6:	f44f 7300 	moveq.w	r3, #512	; 0x200
 800f8da:	f44f 7340 	movne.w	r3, #768	; 0x300
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f8de:	6922      	ldr	r2, [r4, #16]
 800f8e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f8e4:	6122      	str	r2, [r4, #16]
  FLASH->CR |= tmp_psize;
 800f8e6:	6922      	ldr	r2, [r4, #16]
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800f8ec:	6923      	ldr	r3, [r4, #16]
 800f8ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f8f2:	6123      	str	r3, [r4, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800f8f4:	6923      	ldr	r3, [r4, #16]
 800f8f6:	f043 0302 	orr.w	r3, r3, #2
 800f8fa:	ea43 030a 	orr.w	r3, r3, sl
 800f8fe:	6123      	str	r3, [r4, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800f900:	6923      	ldr	r3, [r4, #16]
 800f902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f906:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f908:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f90c:	f7ff ff60 	bl	800f7d0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f910:	6923      	ldr	r3, [r4, #16]
 800f912:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800f916:	f10a 0a08 	add.w	sl, sl, #8
 800f91a:	6123      	str	r3, [r4, #16]
        if(status != HAL_OK) 
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d159      	bne.n	800f9d4 <HAL_FLASHEx_Erase+0x148>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f920:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800f924:	f109 0901 	add.w	r9, r9, #1
 800f928:	4413      	add	r3, r2
 800f92a:	454b      	cmp	r3, r9
 800f92c:	d921      	bls.n	800f972 <HAL_FLASHEx_Erase+0xe6>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800f92e:	7c2b      	ldrb	r3, [r5, #16]
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800f930:	2b00      	cmp	r3, #0
 800f932:	d0d4      	beq.n	800f8de <HAL_FLASHEx_Erase+0x52>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800f934:	2b01      	cmp	r3, #1
 800f936:	d1cc      	bne.n	800f8d2 <HAL_FLASHEx_Erase+0x46>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800f938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f93c:	e7cf      	b.n	800f8de <HAL_FLASHEx_Erase+0x52>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f93e:	4c2a      	ldr	r4, [pc, #168]	; (800f9e8 <HAL_FLASHEx_Erase+0x15c>)
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800f940:	692b      	ldr	r3, [r5, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f942:	6922      	ldr	r2, [r4, #16]
 800f944:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f948:	6122      	str	r2, [r4, #16]
  FLASH->CR |= FLASH_CR_MER;
 800f94a:	6922      	ldr	r2, [r4, #16]
 800f94c:	f042 0204 	orr.w	r2, r2, #4
 800f950:	6122      	str	r2, [r4, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800f952:	6922      	ldr	r2, [r4, #16]
 800f954:	021b      	lsls	r3, r3, #8
 800f956:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	4313      	orrs	r3, r2
 800f95e:	6123      	str	r3, [r4, #16]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f960:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f964:	f7ff ff34 	bl	800f7d0 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800f968:	6923      	ldr	r3, [r4, #16]
 800f96a:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f96e:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800f970:	6123      	str	r3, [r4, #16]
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800f972:	4b1d      	ldr	r3, [pc, #116]	; (800f9e8 <HAL_FLASHEx_Erase+0x15c>)
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	0591      	lsls	r1, r2, #22
 800f978:	d50f      	bpl.n	800f99a <HAL_FLASHEx_Erase+0x10e>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f980:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f988:	601a      	str	r2, [r3, #0]
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f990:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f998:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800f99a:	4b13      	ldr	r3, [pc, #76]	; (800f9e8 <HAL_FLASHEx_Erase+0x15c>)
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	0552      	lsls	r2, r2, #21
 800f9a0:	d50f      	bpl.n	800f9c2 <HAL_FLASHEx_Erase+0x136>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f9a8:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f9b0:	601a      	str	r2, [r3, #0]
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f9b8:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f9c0:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(&pFlash);
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	7633      	strb	r3, [r6, #24]
}
 800f9c6:	4638      	mov	r0, r7
 800f9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(&pFlash);
 800f9cc:	2702      	movs	r7, #2
}
 800f9ce:	4638      	mov	r0, r7
 800f9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800f9d4:	4b04      	ldr	r3, [pc, #16]	; (800f9e8 <HAL_FLASHEx_Erase+0x15c>)
          *SectorError = index;
 800f9d6:	f8c8 9000 	str.w	r9, [r8]
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	0591      	lsls	r1, r2, #22
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f9de:	4607      	mov	r7, r0
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800f9e0:	d5db      	bpl.n	800f99a <HAL_FLASHEx_Erase+0x10e>
 800f9e2:	e7ca      	b.n	800f97a <HAL_FLASHEx_Erase+0xee>
 800f9e4:	20004e2c 	.word	0x20004e2c
 800f9e8:	40023c00 	.word	0x40023c00

0800f9ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f9f0:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f9f4:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 800fbec <HAL_GPIO_Init+0x200>
{
 800f9f8:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f9fa:	2400      	movs	r4, #0
 800f9fc:	e003      	b.n	800fa06 <HAL_GPIO_Init+0x1a>
 800f9fe:	3401      	adds	r4, #1
 800fa00:	2c10      	cmp	r4, #16
 800fa02:	f000 808c 	beq.w	800fb1e <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 800fa06:	2301      	movs	r3, #1
 800fa08:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800fa0a:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d1f5      	bne.n	800f9fe <HAL_GPIO_Init+0x12>
 800fa12:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800fa16:	f026 0910 	bic.w	r9, r6, #16
 800fa1a:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 800fa1e:	2303      	movs	r3, #3
 800fa20:	f109 37ff 	add.w	r7, r9, #4294967295
 800fa24:	fa03 f30c 	lsl.w	r3, r3, ip
 800fa28:	2f01      	cmp	r7, #1
 800fa2a:	ea6f 0303 	mvn.w	r3, r3
 800fa2e:	fa05 f50c 	lsl.w	r5, r5, ip
 800fa32:	d977      	bls.n	800fb24 <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 800fa34:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fa36:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fa38:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800fa3a:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 800fa3c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fa3e:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fa42:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fa44:	fa05 f30c 	lsl.w	r3, r5, ip
 800fa48:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800fa4a:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800fa4c:	00f3      	lsls	r3, r6, #3
 800fa4e:	d5d6      	bpl.n	800f9fe <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fa50:	4d5f      	ldr	r5, [pc, #380]	; (800fbd0 <HAL_GPIO_Init+0x1e4>)
 800fa52:	2300      	movs	r3, #0
 800fa54:	9301      	str	r3, [sp, #4]
 800fa56:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800fa58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fa5c:	646b      	str	r3, [r5, #68]	; 0x44
 800fa5e:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 800fa60:	f024 0303 	bic.w	r3, r4, #3
 800fa64:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800fa68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fa6c:	9501      	str	r5, [sp, #4]
 800fa6e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fa72:	f004 0503 	and.w	r5, r4, #3
 800fa76:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fa7a:	4d56      	ldr	r5, [pc, #344]	; (800fbd4 <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fa7c:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800fa7e:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fa82:	270f      	movs	r7, #15
 800fa84:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fa88:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fa8a:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fa8e:	d01f      	beq.n	800fad0 <HAL_GPIO_Init+0xe4>
 800fa90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fa94:	42a8      	cmp	r0, r5
 800fa96:	d076      	beq.n	800fb86 <HAL_GPIO_Init+0x19a>
 800fa98:	4d4f      	ldr	r5, [pc, #316]	; (800fbd8 <HAL_GPIO_Init+0x1ec>)
 800fa9a:	42a8      	cmp	r0, r5
 800fa9c:	d079      	beq.n	800fb92 <HAL_GPIO_Init+0x1a6>
 800fa9e:	4d4f      	ldr	r5, [pc, #316]	; (800fbdc <HAL_GPIO_Init+0x1f0>)
 800faa0:	42a8      	cmp	r0, r5
 800faa2:	d07c      	beq.n	800fb9e <HAL_GPIO_Init+0x1b2>
 800faa4:	4d4e      	ldr	r5, [pc, #312]	; (800fbe0 <HAL_GPIO_Init+0x1f4>)
 800faa6:	42a8      	cmp	r0, r5
 800faa8:	d07f      	beq.n	800fbaa <HAL_GPIO_Init+0x1be>
 800faaa:	4d4e      	ldr	r5, [pc, #312]	; (800fbe4 <HAL_GPIO_Init+0x1f8>)
 800faac:	42a8      	cmp	r0, r5
 800faae:	f000 8082 	beq.w	800fbb6 <HAL_GPIO_Init+0x1ca>
 800fab2:	4d4d      	ldr	r5, [pc, #308]	; (800fbe8 <HAL_GPIO_Init+0x1fc>)
 800fab4:	42a8      	cmp	r0, r5
 800fab6:	f000 8084 	beq.w	800fbc2 <HAL_GPIO_Init+0x1d6>
 800faba:	f8df c134 	ldr.w	ip, [pc, #308]	; 800fbf0 <HAL_GPIO_Init+0x204>
 800fabe:	4560      	cmp	r0, ip
 800fac0:	bf0c      	ite	eq
 800fac2:	f04f 0c07 	moveq.w	ip, #7
 800fac6:	f04f 0c08 	movne.w	ip, #8
 800faca:	fa0c f509 	lsl.w	r5, ip, r9
 800face:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fad0:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800fad2:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800fad6:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800fad8:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 800fada:	bf54      	ite	pl
 800fadc:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fade:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800fae0:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800fae4:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fae8:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 800faea:	bf54      	ite	pl
 800faec:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800faee:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 800faf0:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800faf4:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800faf8:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 800fafa:	bf54      	ite	pl
 800fafc:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fafe:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800fb00:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800fb04:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fb08:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fb0a:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800fb0e:	bf54      	ite	pl
 800fb10:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fb12:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fb14:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 800fb16:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fb1a:	f47f af74 	bne.w	800fa06 <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 800fb1e:	b003      	add	sp, #12
 800fb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800fb24:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fb26:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fb2a:	68cf      	ldr	r7, [r1, #12]
 800fb2c:	fa07 f70c 	lsl.w	r7, r7, ip
 800fb30:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800fb34:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800fb36:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fb3a:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fb3e:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fb42:	40a7      	lsls	r7, r4
 800fb44:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800fb48:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800fb4a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fb4c:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fb4e:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fb50:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 800fb54:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fb56:	f47f af71 	bne.w	800fa3c <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 800fb5a:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800fb5e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fb62:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 800fb66:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fb6a:	00bf      	lsls	r7, r7, #2
 800fb6c:	f04f 0b0f 	mov.w	fp, #15
 800fb70:	fa0b fb07 	lsl.w	fp, fp, r7
 800fb74:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fb78:	690d      	ldr	r5, [r1, #16]
 800fb7a:	40bd      	lsls	r5, r7
 800fb7c:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 800fb80:	f8c9 5020 	str.w	r5, [r9, #32]
 800fb84:	e75a      	b.n	800fa3c <HAL_GPIO_Init+0x50>
 800fb86:	f04f 0c01 	mov.w	ip, #1
 800fb8a:	fa0c f509 	lsl.w	r5, ip, r9
 800fb8e:	432f      	orrs	r7, r5
 800fb90:	e79e      	b.n	800fad0 <HAL_GPIO_Init+0xe4>
 800fb92:	f04f 0c02 	mov.w	ip, #2
 800fb96:	fa0c f509 	lsl.w	r5, ip, r9
 800fb9a:	432f      	orrs	r7, r5
 800fb9c:	e798      	b.n	800fad0 <HAL_GPIO_Init+0xe4>
 800fb9e:	f04f 0c03 	mov.w	ip, #3
 800fba2:	fa0c f509 	lsl.w	r5, ip, r9
 800fba6:	432f      	orrs	r7, r5
 800fba8:	e792      	b.n	800fad0 <HAL_GPIO_Init+0xe4>
 800fbaa:	f04f 0c04 	mov.w	ip, #4
 800fbae:	fa0c f509 	lsl.w	r5, ip, r9
 800fbb2:	432f      	orrs	r7, r5
 800fbb4:	e78c      	b.n	800fad0 <HAL_GPIO_Init+0xe4>
 800fbb6:	f04f 0c05 	mov.w	ip, #5
 800fbba:	fa0c f509 	lsl.w	r5, ip, r9
 800fbbe:	432f      	orrs	r7, r5
 800fbc0:	e786      	b.n	800fad0 <HAL_GPIO_Init+0xe4>
 800fbc2:	f04f 0c06 	mov.w	ip, #6
 800fbc6:	fa0c f509 	lsl.w	r5, ip, r9
 800fbca:	432f      	orrs	r7, r5
 800fbcc:	e780      	b.n	800fad0 <HAL_GPIO_Init+0xe4>
 800fbce:	bf00      	nop
 800fbd0:	40023800 	.word	0x40023800
 800fbd4:	40020000 	.word	0x40020000
 800fbd8:	40020800 	.word	0x40020800
 800fbdc:	40020c00 	.word	0x40020c00
 800fbe0:	40021000 	.word	0x40021000
 800fbe4:	40021400 	.word	0x40021400
 800fbe8:	40021800 	.word	0x40021800
 800fbec:	40013c00 	.word	0x40013c00
 800fbf0:	40021c00 	.word	0x40021c00

0800fbf4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800fbf4:	b902      	cbnz	r2, 800fbf8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800fbf6:	0409      	lsls	r1, r1, #16
 800fbf8:	6181      	str	r1, [r0, #24]
  }
}
 800fbfa:	4770      	bx	lr

0800fbfc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800fbfc:	4a04      	ldr	r2, [pc, #16]	; (800fc10 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800fbfe:	6951      	ldr	r1, [r2, #20]
 800fc00:	4201      	tst	r1, r0
 800fc02:	d100      	bne.n	800fc06 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800fc04:	4770      	bx	lr
{
 800fc06:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800fc08:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800fc0a:	f7fe ff6d 	bl	800eae8 <HAL_GPIO_EXTI_Callback>
  }
}
 800fc0e:	bd08      	pop	{r3, pc}
 800fc10:	40013c00 	.word	0x40013c00

0800fc14 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fc14:	2800      	cmp	r0, #0
 800fc16:	f000 8132 	beq.w	800fe7e <HAL_RCC_OscConfig+0x26a>
{
 800fc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fc1e:	6803      	ldr	r3, [r0, #0]
 800fc20:	07dd      	lsls	r5, r3, #31
{
 800fc22:	b082      	sub	sp, #8
 800fc24:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fc26:	d52f      	bpl.n	800fc88 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fc28:	49ac      	ldr	r1, [pc, #688]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
 800fc2a:	688a      	ldr	r2, [r1, #8]
 800fc2c:	f002 020c 	and.w	r2, r2, #12
 800fc30:	2a04      	cmp	r2, #4
 800fc32:	f000 80ea 	beq.w	800fe0a <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fc36:	688a      	ldr	r2, [r1, #8]
 800fc38:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fc3c:	2a08      	cmp	r2, #8
 800fc3e:	f000 80e0 	beq.w	800fe02 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fc42:	6863      	ldr	r3, [r4, #4]
 800fc44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc48:	f000 80e9 	beq.w	800fe1e <HAL_RCC_OscConfig+0x20a>
 800fc4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fc50:	f000 8178 	beq.w	800ff44 <HAL_RCC_OscConfig+0x330>
 800fc54:	4da1      	ldr	r5, [pc, #644]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
 800fc56:	682a      	ldr	r2, [r5, #0]
 800fc58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fc5c:	602a      	str	r2, [r5, #0]
 800fc5e:	682a      	ldr	r2, [r5, #0]
 800fc60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fc64:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	f040 80de 	bne.w	800fe28 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fc6c:	f7ff f89a 	bl	800eda4 <HAL_GetTick>
 800fc70:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fc72:	e005      	b.n	800fc80 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fc74:	f7ff f896 	bl	800eda4 <HAL_GetTick>
 800fc78:	1b80      	subs	r0, r0, r6
 800fc7a:	2864      	cmp	r0, #100	; 0x64
 800fc7c:	f200 80f2 	bhi.w	800fe64 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fc80:	682b      	ldr	r3, [r5, #0]
 800fc82:	039b      	lsls	r3, r3, #14
 800fc84:	d4f6      	bmi.n	800fc74 <HAL_RCC_OscConfig+0x60>
 800fc86:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fc88:	079f      	lsls	r7, r3, #30
 800fc8a:	d475      	bmi.n	800fd78 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc8c:	071a      	lsls	r2, r3, #28
 800fc8e:	d515      	bpl.n	800fcbc <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800fc90:	6963      	ldr	r3, [r4, #20]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	f000 80a5 	beq.w	800fde2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fc98:	4b91      	ldr	r3, [pc, #580]	; (800fee0 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fc9a:	4d90      	ldr	r5, [pc, #576]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800fca0:	f7ff f880 	bl	800eda4 <HAL_GetTick>
 800fca4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fca6:	e005      	b.n	800fcb4 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fca8:	f7ff f87c 	bl	800eda4 <HAL_GetTick>
 800fcac:	1b80      	subs	r0, r0, r6
 800fcae:	2802      	cmp	r0, #2
 800fcb0:	f200 80d8 	bhi.w	800fe64 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fcb4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fcb6:	079b      	lsls	r3, r3, #30
 800fcb8:	d5f6      	bpl.n	800fca8 <HAL_RCC_OscConfig+0x94>
 800fcba:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fcbc:	0758      	lsls	r0, r3, #29
 800fcbe:	d53b      	bpl.n	800fd38 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fcc0:	4a86      	ldr	r2, [pc, #536]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
 800fcc2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fcc4:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800fcc8:	f040 80db 	bne.w	800fe82 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fccc:	9301      	str	r3, [sp, #4]
 800fcce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fcd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fcd4:	6413      	str	r3, [r2, #64]	; 0x40
 800fcd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fcd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fcdc:	9301      	str	r3, [sp, #4]
 800fcde:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800fce0:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fce2:	4d80      	ldr	r5, [pc, #512]	; (800fee4 <HAL_RCC_OscConfig+0x2d0>)
 800fce4:	682a      	ldr	r2, [r5, #0]
 800fce6:	05d1      	lsls	r1, r2, #23
 800fce8:	f140 80ac 	bpl.w	800fe44 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fcec:	68a3      	ldr	r3, [r4, #8]
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	f000 80c9 	beq.w	800fe86 <HAL_RCC_OscConfig+0x272>
 800fcf4:	2b05      	cmp	r3, #5
 800fcf6:	f000 812f 	beq.w	800ff58 <HAL_RCC_OscConfig+0x344>
 800fcfa:	4d78      	ldr	r5, [pc, #480]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
 800fcfc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800fcfe:	f022 0201 	bic.w	r2, r2, #1
 800fd02:	672a      	str	r2, [r5, #112]	; 0x70
 800fd04:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800fd06:	f022 0204 	bic.w	r2, r2, #4
 800fd0a:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f040 80bf 	bne.w	800fe90 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fd12:	f7ff f847 	bl	800eda4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fd16:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800fd1a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fd1c:	e006      	b.n	800fd2c <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fd1e:	f7ff f841 	bl	800eda4 <HAL_GetTick>
 800fd22:	eba0 0008 	sub.w	r0, r0, r8
 800fd26:	42b8      	cmp	r0, r7
 800fd28:	f200 809c 	bhi.w	800fe64 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fd2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fd2e:	0798      	lsls	r0, r3, #30
 800fd30:	d4f5      	bmi.n	800fd1e <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fd32:	2e00      	cmp	r6, #0
 800fd34:	f040 80dc 	bne.w	800fef0 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fd38:	69a0      	ldr	r0, [r4, #24]
 800fd3a:	b1c8      	cbz	r0, 800fd70 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800fd3c:	4d67      	ldr	r5, [pc, #412]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
 800fd3e:	68aa      	ldr	r2, [r5, #8]
 800fd40:	f002 020c 	and.w	r2, r2, #12
 800fd44:	2a08      	cmp	r2, #8
 800fd46:	f000 80d9 	beq.w	800fefc <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fd4a:	4a67      	ldr	r2, [pc, #412]	; (800fee8 <HAL_RCC_OscConfig+0x2d4>)
 800fd4c:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fd4e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800fd50:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fd52:	f000 810b 	beq.w	800ff6c <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd56:	f7ff f825 	bl	800eda4 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fd5a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800fd5c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fd5e:	e004      	b.n	800fd6a <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fd60:	f7ff f820 	bl	800eda4 <HAL_GetTick>
 800fd64:	1b40      	subs	r0, r0, r5
 800fd66:	2802      	cmp	r0, #2
 800fd68:	d87c      	bhi.n	800fe64 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fd6a:	6823      	ldr	r3, [r4, #0]
 800fd6c:	019b      	lsls	r3, r3, #6
 800fd6e:	d4f7      	bmi.n	800fd60 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800fd70:	2000      	movs	r0, #0
}
 800fd72:	b002      	add	sp, #8
 800fd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800fd78:	4a58      	ldr	r2, [pc, #352]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
 800fd7a:	6891      	ldr	r1, [r2, #8]
 800fd7c:	f011 0f0c 	tst.w	r1, #12
 800fd80:	d024      	beq.n	800fdcc <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fd82:	6891      	ldr	r1, [r2, #8]
 800fd84:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800fd88:	2908      	cmp	r1, #8
 800fd8a:	d01c      	beq.n	800fdc6 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800fd8c:	68e3      	ldr	r3, [r4, #12]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	f000 8092 	beq.w	800feb8 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 800fd94:	4b55      	ldr	r3, [pc, #340]	; (800feec <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fd96:	4d51      	ldr	r5, [pc, #324]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 800fd98:	2201      	movs	r2, #1
 800fd9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800fd9c:	f7ff f802 	bl	800eda4 <HAL_GetTick>
 800fda0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fda2:	e004      	b.n	800fdae <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fda4:	f7fe fffe 	bl	800eda4 <HAL_GetTick>
 800fda8:	1b80      	subs	r0, r0, r6
 800fdaa:	2802      	cmp	r0, #2
 800fdac:	d85a      	bhi.n	800fe64 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fdae:	682b      	ldr	r3, [r5, #0]
 800fdb0:	0798      	lsls	r0, r3, #30
 800fdb2:	d5f7      	bpl.n	800fda4 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fdb4:	682b      	ldr	r3, [r5, #0]
 800fdb6:	6922      	ldr	r2, [r4, #16]
 800fdb8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fdbc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800fdc0:	602b      	str	r3, [r5, #0]
 800fdc2:	6823      	ldr	r3, [r4, #0]
 800fdc4:	e762      	b.n	800fc8c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fdc6:	6852      	ldr	r2, [r2, #4]
 800fdc8:	0256      	lsls	r6, r2, #9
 800fdca:	d4df      	bmi.n	800fd8c <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fdcc:	4a43      	ldr	r2, [pc, #268]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
 800fdce:	6812      	ldr	r2, [r2, #0]
 800fdd0:	0795      	lsls	r5, r2, #30
 800fdd2:	d54b      	bpl.n	800fe6c <HAL_RCC_OscConfig+0x258>
 800fdd4:	68e2      	ldr	r2, [r4, #12]
 800fdd6:	2a01      	cmp	r2, #1
 800fdd8:	d048      	beq.n	800fe6c <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 800fdda:	2001      	movs	r0, #1
}
 800fddc:	b002      	add	sp, #8
 800fdde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800fde2:	4a3f      	ldr	r2, [pc, #252]	; (800fee0 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fde4:	4d3d      	ldr	r5, [pc, #244]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800fde6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800fde8:	f7fe ffdc 	bl	800eda4 <HAL_GetTick>
 800fdec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fdee:	e004      	b.n	800fdfa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fdf0:	f7fe ffd8 	bl	800eda4 <HAL_GetTick>
 800fdf4:	1b80      	subs	r0, r0, r6
 800fdf6:	2802      	cmp	r0, #2
 800fdf8:	d834      	bhi.n	800fe64 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fdfa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fdfc:	079f      	lsls	r7, r3, #30
 800fdfe:	d4f7      	bmi.n	800fdf0 <HAL_RCC_OscConfig+0x1dc>
 800fe00:	e75b      	b.n	800fcba <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fe02:	684a      	ldr	r2, [r1, #4]
 800fe04:	0250      	lsls	r0, r2, #9
 800fe06:	f57f af1c 	bpl.w	800fc42 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fe0a:	4a34      	ldr	r2, [pc, #208]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
 800fe0c:	6812      	ldr	r2, [r2, #0]
 800fe0e:	0391      	lsls	r1, r2, #14
 800fe10:	f57f af3a 	bpl.w	800fc88 <HAL_RCC_OscConfig+0x74>
 800fe14:	6862      	ldr	r2, [r4, #4]
 800fe16:	2a00      	cmp	r2, #0
 800fe18:	f47f af36 	bne.w	800fc88 <HAL_RCC_OscConfig+0x74>
 800fe1c:	e7dd      	b.n	800fdda <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fe1e:	4a2f      	ldr	r2, [pc, #188]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
 800fe20:	6813      	ldr	r3, [r2, #0]
 800fe22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fe26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fe28:	f7fe ffbc 	bl	800eda4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fe2c:	4d2b      	ldr	r5, [pc, #172]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800fe2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fe30:	e004      	b.n	800fe3c <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fe32:	f7fe ffb7 	bl	800eda4 <HAL_GetTick>
 800fe36:	1b80      	subs	r0, r0, r6
 800fe38:	2864      	cmp	r0, #100	; 0x64
 800fe3a:	d813      	bhi.n	800fe64 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fe3c:	682b      	ldr	r3, [r5, #0]
 800fe3e:	039a      	lsls	r2, r3, #14
 800fe40:	d5f7      	bpl.n	800fe32 <HAL_RCC_OscConfig+0x21e>
 800fe42:	e720      	b.n	800fc86 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fe44:	682a      	ldr	r2, [r5, #0]
 800fe46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe4a:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800fe4c:	f7fe ffaa 	bl	800eda4 <HAL_GetTick>
 800fe50:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe52:	682b      	ldr	r3, [r5, #0]
 800fe54:	05da      	lsls	r2, r3, #23
 800fe56:	f53f af49 	bmi.w	800fcec <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe5a:	f7fe ffa3 	bl	800eda4 <HAL_GetTick>
 800fe5e:	1bc0      	subs	r0, r0, r7
 800fe60:	2802      	cmp	r0, #2
 800fe62:	d9f6      	bls.n	800fe52 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 800fe64:	2003      	movs	r0, #3
}
 800fe66:	b002      	add	sp, #8
 800fe68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fe6c:	491b      	ldr	r1, [pc, #108]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
 800fe6e:	6920      	ldr	r0, [r4, #16]
 800fe70:	680a      	ldr	r2, [r1, #0]
 800fe72:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800fe76:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800fe7a:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fe7c:	e706      	b.n	800fc8c <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 800fe7e:	2001      	movs	r0, #1
}
 800fe80:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800fe82:	2600      	movs	r6, #0
 800fe84:	e72d      	b.n	800fce2 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fe86:	4a15      	ldr	r2, [pc, #84]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
 800fe88:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800fe8a:	f043 0301 	orr.w	r3, r3, #1
 800fe8e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800fe90:	f7fe ff88 	bl	800eda4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fe94:	4d11      	ldr	r5, [pc, #68]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800fe96:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fe98:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fe9c:	e005      	b.n	800feaa <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fe9e:	f7fe ff81 	bl	800eda4 <HAL_GetTick>
 800fea2:	eba0 0008 	sub.w	r0, r0, r8
 800fea6:	42b8      	cmp	r0, r7
 800fea8:	d8dc      	bhi.n	800fe64 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800feaa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800feac:	079b      	lsls	r3, r3, #30
 800feae:	d5f6      	bpl.n	800fe9e <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 800feb0:	2e00      	cmp	r6, #0
 800feb2:	f43f af41 	beq.w	800fd38 <HAL_RCC_OscConfig+0x124>
 800feb6:	e01b      	b.n	800fef0 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 800feb8:	4a0c      	ldr	r2, [pc, #48]	; (800feec <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800feba:	4d08      	ldr	r5, [pc, #32]	; (800fedc <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 800febc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800febe:	f7fe ff71 	bl	800eda4 <HAL_GetTick>
 800fec2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fec4:	e004      	b.n	800fed0 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fec6:	f7fe ff6d 	bl	800eda4 <HAL_GetTick>
 800feca:	1b80      	subs	r0, r0, r6
 800fecc:	2802      	cmp	r0, #2
 800fece:	d8c9      	bhi.n	800fe64 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fed0:	682b      	ldr	r3, [r5, #0]
 800fed2:	0799      	lsls	r1, r3, #30
 800fed4:	d4f7      	bmi.n	800fec6 <HAL_RCC_OscConfig+0x2b2>
 800fed6:	6823      	ldr	r3, [r4, #0]
 800fed8:	e6d8      	b.n	800fc8c <HAL_RCC_OscConfig+0x78>
 800feda:	bf00      	nop
 800fedc:	40023800 	.word	0x40023800
 800fee0:	42470e80 	.word	0x42470e80
 800fee4:	40007000 	.word	0x40007000
 800fee8:	42470060 	.word	0x42470060
 800feec:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 800fef0:	4a35      	ldr	r2, [pc, #212]	; (800ffc8 <HAL_RCC_OscConfig+0x3b4>)
 800fef2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fef8:	6413      	str	r3, [r2, #64]	; 0x40
 800fefa:	e71d      	b.n	800fd38 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fefc:	2801      	cmp	r0, #1
 800fefe:	f43f af6d 	beq.w	800fddc <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800ff02:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff04:	69e2      	ldr	r2, [r4, #28]
 800ff06:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800ff0a:	4291      	cmp	r1, r2
 800ff0c:	f47f af65 	bne.w	800fdda <HAL_RCC_OscConfig+0x1c6>
 800ff10:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ff12:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff16:	4291      	cmp	r1, r2
 800ff18:	f47f af5f 	bne.w	800fdda <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ff1c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ff20:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ff22:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ff24:	428a      	cmp	r2, r1
 800ff26:	f47f af58 	bne.w	800fdda <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ff2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ff2c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ff30:	4291      	cmp	r1, r2
 800ff32:	f47f af52 	bne.w	800fdda <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ff36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ff38:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 800ff3c:	1a18      	subs	r0, r3, r0
 800ff3e:	bf18      	it	ne
 800ff40:	2001      	movne	r0, #1
 800ff42:	e74b      	b.n	800fddc <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ff44:	4b20      	ldr	r3, [pc, #128]	; (800ffc8 <HAL_RCC_OscConfig+0x3b4>)
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ff4c:	601a      	str	r2, [r3, #0]
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ff54:	601a      	str	r2, [r3, #0]
 800ff56:	e767      	b.n	800fe28 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ff58:	4b1b      	ldr	r3, [pc, #108]	; (800ffc8 <HAL_RCC_OscConfig+0x3b4>)
 800ff5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ff5c:	f042 0204 	orr.w	r2, r2, #4
 800ff60:	671a      	str	r2, [r3, #112]	; 0x70
 800ff62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ff64:	f042 0201 	orr.w	r2, r2, #1
 800ff68:	671a      	str	r2, [r3, #112]	; 0x70
 800ff6a:	e791      	b.n	800fe90 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 800ff6c:	f7fe ff1a 	bl	800eda4 <HAL_GetTick>
 800ff70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ff72:	e005      	b.n	800ff80 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff74:	f7fe ff16 	bl	800eda4 <HAL_GetTick>
 800ff78:	1b80      	subs	r0, r0, r6
 800ff7a:	2802      	cmp	r0, #2
 800ff7c:	f63f af72 	bhi.w	800fe64 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	0199      	lsls	r1, r3, #6
 800ff84:	d4f6      	bmi.n	800ff74 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ff86:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 800ff8a:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800ff8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ff90:	4c0d      	ldr	r4, [pc, #52]	; (800ffc8 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ff92:	4333      	orrs	r3, r6
 800ff94:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800ff98:	0852      	lsrs	r2, r2, #1
 800ff9a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ff9e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800ffa0:	490a      	ldr	r1, [pc, #40]	; (800ffcc <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ffa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800ffa6:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ffa8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800ffaa:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 800ffac:	f7fe fefa 	bl	800eda4 <HAL_GetTick>
 800ffb0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ffb2:	e005      	b.n	800ffc0 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ffb4:	f7fe fef6 	bl	800eda4 <HAL_GetTick>
 800ffb8:	1b40      	subs	r0, r0, r5
 800ffba:	2802      	cmp	r0, #2
 800ffbc:	f63f af52 	bhi.w	800fe64 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ffc0:	6823      	ldr	r3, [r4, #0]
 800ffc2:	019a      	lsls	r2, r3, #6
 800ffc4:	d5f6      	bpl.n	800ffb4 <HAL_RCC_OscConfig+0x3a0>
 800ffc6:	e6d3      	b.n	800fd70 <HAL_RCC_OscConfig+0x15c>
 800ffc8:	40023800 	.word	0x40023800
 800ffcc:	42470060 	.word	0x42470060

0800ffd0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ffd0:	4917      	ldr	r1, [pc, #92]	; (8010030 <HAL_RCC_GetSysClockFreq+0x60>)
{
 800ffd2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ffd4:	688b      	ldr	r3, [r1, #8]
 800ffd6:	f003 030c 	and.w	r3, r3, #12
 800ffda:	2b04      	cmp	r3, #4
 800ffdc:	d01b      	beq.n	8010016 <HAL_RCC_GetSysClockFreq+0x46>
 800ffde:	2b08      	cmp	r3, #8
 800ffe0:	d117      	bne.n	8010012 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ffe2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ffe4:	684b      	ldr	r3, [r1, #4]
 800ffe6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ffea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ffee:	d114      	bne.n	801001a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fff0:	6849      	ldr	r1, [r1, #4]
 800fff2:	4810      	ldr	r0, [pc, #64]	; (8010034 <HAL_RCC_GetSysClockFreq+0x64>)
 800fff4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800fff8:	fba1 0100 	umull	r0, r1, r1, r0
 800fffc:	f7f8 fd7c 	bl	8008af8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010000:	4b0b      	ldr	r3, [pc, #44]	; (8010030 <HAL_RCC_GetSysClockFreq+0x60>)
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8010008:	3301      	adds	r3, #1
 801000a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 801000c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8010010:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8010012:	4808      	ldr	r0, [pc, #32]	; (8010034 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8010014:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8010016:	4808      	ldr	r0, [pc, #32]	; (8010038 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8010018:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801001a:	684b      	ldr	r3, [r1, #4]
 801001c:	4806      	ldr	r0, [pc, #24]	; (8010038 <HAL_RCC_GetSysClockFreq+0x68>)
 801001e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8010022:	fba3 0100 	umull	r0, r1, r3, r0
 8010026:	2300      	movs	r3, #0
 8010028:	f7f8 fd66 	bl	8008af8 <__aeabi_uldivmod>
 801002c:	e7e8      	b.n	8010000 <HAL_RCC_GetSysClockFreq+0x30>
 801002e:	bf00      	nop
 8010030:	40023800 	.word	0x40023800
 8010034:	00f42400 	.word	0x00f42400
 8010038:	007a1200 	.word	0x007a1200

0801003c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 801003c:	b160      	cbz	r0, 8010058 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801003e:	4a49      	ldr	r2, [pc, #292]	; (8010164 <HAL_RCC_ClockConfig+0x128>)
 8010040:	6813      	ldr	r3, [r2, #0]
 8010042:	f003 030f 	and.w	r3, r3, #15
 8010046:	428b      	cmp	r3, r1
 8010048:	d208      	bcs.n	801005c <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801004a:	b2cb      	uxtb	r3, r1
 801004c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801004e:	6813      	ldr	r3, [r2, #0]
 8010050:	f003 030f 	and.w	r3, r3, #15
 8010054:	428b      	cmp	r3, r1
 8010056:	d001      	beq.n	801005c <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8010058:	2001      	movs	r0, #1
}
 801005a:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801005c:	6803      	ldr	r3, [r0, #0]
{
 801005e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010062:	079d      	lsls	r5, r3, #30
 8010064:	d514      	bpl.n	8010090 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010066:	075c      	lsls	r4, r3, #29
 8010068:	d504      	bpl.n	8010074 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801006a:	4c3f      	ldr	r4, [pc, #252]	; (8010168 <HAL_RCC_ClockConfig+0x12c>)
 801006c:	68a2      	ldr	r2, [r4, #8]
 801006e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8010072:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010074:	071a      	lsls	r2, r3, #28
 8010076:	d504      	bpl.n	8010082 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010078:	4c3b      	ldr	r4, [pc, #236]	; (8010168 <HAL_RCC_ClockConfig+0x12c>)
 801007a:	68a2      	ldr	r2, [r4, #8]
 801007c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8010080:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010082:	4c39      	ldr	r4, [pc, #228]	; (8010168 <HAL_RCC_ClockConfig+0x12c>)
 8010084:	6885      	ldr	r5, [r0, #8]
 8010086:	68a2      	ldr	r2, [r4, #8]
 8010088:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 801008c:	432a      	orrs	r2, r5
 801008e:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010090:	07df      	lsls	r7, r3, #31
 8010092:	4604      	mov	r4, r0
 8010094:	460d      	mov	r5, r1
 8010096:	d522      	bpl.n	80100de <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010098:	6842      	ldr	r2, [r0, #4]
 801009a:	2a01      	cmp	r2, #1
 801009c:	d057      	beq.n	801014e <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801009e:	1e93      	subs	r3, r2, #2
 80100a0:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80100a2:	4b31      	ldr	r3, [pc, #196]	; (8010168 <HAL_RCC_ClockConfig+0x12c>)
 80100a4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80100a6:	d959      	bls.n	801015c <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80100a8:	0799      	lsls	r1, r3, #30
 80100aa:	d525      	bpl.n	80100f8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80100ac:	4e2e      	ldr	r6, [pc, #184]	; (8010168 <HAL_RCC_ClockConfig+0x12c>)
 80100ae:	68b3      	ldr	r3, [r6, #8]
 80100b0:	f023 0303 	bic.w	r3, r3, #3
 80100b4:	4313      	orrs	r3, r2
 80100b6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80100b8:	f7fe fe74 	bl	800eda4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100bc:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80100c0:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80100c2:	e005      	b.n	80100d0 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100c4:	f7fe fe6e 	bl	800eda4 <HAL_GetTick>
 80100c8:	eba0 0008 	sub.w	r0, r0, r8
 80100cc:	42b8      	cmp	r0, r7
 80100ce:	d843      	bhi.n	8010158 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80100d0:	68b3      	ldr	r3, [r6, #8]
 80100d2:	6862      	ldr	r2, [r4, #4]
 80100d4:	f003 030c 	and.w	r3, r3, #12
 80100d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80100dc:	d1f2      	bne.n	80100c4 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80100de:	4a21      	ldr	r2, [pc, #132]	; (8010164 <HAL_RCC_ClockConfig+0x128>)
 80100e0:	6813      	ldr	r3, [r2, #0]
 80100e2:	f003 030f 	and.w	r3, r3, #15
 80100e6:	42ab      	cmp	r3, r5
 80100e8:	d909      	bls.n	80100fe <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80100ea:	b2eb      	uxtb	r3, r5
 80100ec:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80100ee:	6813      	ldr	r3, [r2, #0]
 80100f0:	f003 030f 	and.w	r3, r3, #15
 80100f4:	42ab      	cmp	r3, r5
 80100f6:	d002      	beq.n	80100fe <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 80100f8:	2001      	movs	r0, #1
}
 80100fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80100fe:	6823      	ldr	r3, [r4, #0]
 8010100:	075a      	lsls	r2, r3, #29
 8010102:	d506      	bpl.n	8010112 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010104:	4918      	ldr	r1, [pc, #96]	; (8010168 <HAL_RCC_ClockConfig+0x12c>)
 8010106:	68e0      	ldr	r0, [r4, #12]
 8010108:	688a      	ldr	r2, [r1, #8]
 801010a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 801010e:	4302      	orrs	r2, r0
 8010110:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010112:	071b      	lsls	r3, r3, #28
 8010114:	d412      	bmi.n	801013c <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010116:	f7ff ff5b 	bl	800ffd0 <HAL_RCC_GetSysClockFreq>
 801011a:	4b13      	ldr	r3, [pc, #76]	; (8010168 <HAL_RCC_ClockConfig+0x12c>)
 801011c:	4c13      	ldr	r4, [pc, #76]	; (801016c <HAL_RCC_ClockConfig+0x130>)
 801011e:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8010120:	4913      	ldr	r1, [pc, #76]	; (8010170 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010122:	4a14      	ldr	r2, [pc, #80]	; (8010174 <HAL_RCC_ClockConfig+0x138>)
 8010124:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010128:	5ce3      	ldrb	r3, [r4, r3]
 801012a:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 801012e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010130:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8010132:	f7fe fded 	bl	800ed10 <HAL_InitTick>
  return HAL_OK;
 8010136:	2000      	movs	r0, #0
}
 8010138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801013c:	4a0a      	ldr	r2, [pc, #40]	; (8010168 <HAL_RCC_ClockConfig+0x12c>)
 801013e:	6921      	ldr	r1, [r4, #16]
 8010140:	6893      	ldr	r3, [r2, #8]
 8010142:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8010146:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801014a:	6093      	str	r3, [r2, #8]
 801014c:	e7e3      	b.n	8010116 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801014e:	4b06      	ldr	r3, [pc, #24]	; (8010168 <HAL_RCC_ClockConfig+0x12c>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	039e      	lsls	r6, r3, #14
 8010154:	d4aa      	bmi.n	80100ac <HAL_RCC_ClockConfig+0x70>
 8010156:	e7cf      	b.n	80100f8 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8010158:	2003      	movs	r0, #3
 801015a:	e7ed      	b.n	8010138 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801015c:	0198      	lsls	r0, r3, #6
 801015e:	d4a5      	bmi.n	80100ac <HAL_RCC_ClockConfig+0x70>
 8010160:	e7ca      	b.n	80100f8 <HAL_RCC_ClockConfig+0xbc>
 8010162:	bf00      	nop
 8010164:	40023c00 	.word	0x40023c00
 8010168:	40023800 	.word	0x40023800
 801016c:	080171f8 	.word	0x080171f8
 8010170:	20000028 	.word	0x20000028
 8010174:	20000020 	.word	0x20000020

08010178 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010178:	4b04      	ldr	r3, [pc, #16]	; (801018c <HAL_RCC_GetPCLK1Freq+0x14>)
 801017a:	4a05      	ldr	r2, [pc, #20]	; (8010190 <HAL_RCC_GetPCLK1Freq+0x18>)
 801017c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 801017e:	4905      	ldr	r1, [pc, #20]	; (8010194 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010180:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8010184:	6808      	ldr	r0, [r1, #0]
 8010186:	5cd3      	ldrb	r3, [r2, r3]
}
 8010188:	40d8      	lsrs	r0, r3
 801018a:	4770      	bx	lr
 801018c:	40023800 	.word	0x40023800
 8010190:	08017208 	.word	0x08017208
 8010194:	20000020 	.word	0x20000020

08010198 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <HAL_RCC_GetPCLK2Freq+0x14>)
 801019a:	4a05      	ldr	r2, [pc, #20]	; (80101b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 801019c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 801019e:	4905      	ldr	r1, [pc, #20]	; (80101b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80101a0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80101a4:	6808      	ldr	r0, [r1, #0]
 80101a6:	5cd3      	ldrb	r3, [r2, r3]
}
 80101a8:	40d8      	lsrs	r0, r3
 80101aa:	4770      	bx	lr
 80101ac:	40023800 	.word	0x40023800
 80101b0:	08017208 	.word	0x08017208
 80101b4:	20000020 	.word	0x20000020

080101b8 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d03b      	beq.n	8010234 <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80101bc:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80101c0:	2300      	movs	r3, #0
{
 80101c2:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 80101c4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80101c8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80101ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80101cc:	b362      	cbz	r2, 8010228 <HAL_SPI_Init+0x70>
 80101ce:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80101d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80101d4:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80101d8:	432b      	orrs	r3, r5
 80101da:	4313      	orrs	r3, r2
 80101dc:	6962      	ldr	r2, [r4, #20]
 80101de:	69e5      	ldr	r5, [r4, #28]
 80101e0:	6a26      	ldr	r6, [r4, #32]
 80101e2:	430b      	orrs	r3, r1
 80101e4:	4313      	orrs	r3, r2
 80101e6:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 80101e8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80101ea:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 80101ec:	2502      	movs	r5, #2
 80101ee:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80101f2:	4333      	orrs	r3, r6
 80101f4:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 80101f8:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80101fa:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80101fc:	0c12      	lsrs	r2, r2, #16
 80101fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010200:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010204:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010206:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8010208:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 801020c:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801020e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010210:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010212:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010214:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 801021a:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801021c:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 801021e:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010220:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010222:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8010226:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8010228:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 801022c:	f7fd fa2a 	bl	800d684 <HAL_SPI_MspInit>
 8010230:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010232:	e7cd      	b.n	80101d0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8010234:	2001      	movs	r0, #1
}
 8010236:	4770      	bx	lr

08010238 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801023c:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8010240:	2c01      	cmp	r4, #1
{
 8010242:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8010244:	f000 8088 	beq.w	8010358 <HAL_SPI_Transmit+0x120>
 8010248:	461d      	mov	r5, r3
 801024a:	2301      	movs	r3, #1
 801024c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8010250:	4604      	mov	r4, r0
 8010252:	4616      	mov	r6, r2
 8010254:	4688      	mov	r8, r1

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010256:	f7fe fda5 	bl	800eda4 <HAL_GetTick>
 801025a:	4607      	mov	r7, r0
  initial_TxXferCount = Size;

  if (hspi->State != HAL_SPI_STATE_READY)
 801025c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8010260:	b2c0      	uxtb	r0, r0
 8010262:	2801      	cmp	r0, #1
 8010264:	d009      	beq.n	801027a <HAL_SPI_Transmit+0x42>
  {
    errorcode = HAL_BUSY;
 8010266:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8010268:	2201      	movs	r2, #1
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801026a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 801026c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010270:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
}
 8010274:	b002      	add	sp, #8
 8010276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 801027a:	f1b8 0f00 	cmp.w	r8, #0
 801027e:	d0f3      	beq.n	8010268 <HAL_SPI_Transmit+0x30>
 8010280:	2e00      	cmp	r6, #0
 8010282:	d0f1      	beq.n	8010268 <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010284:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010286:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801028a:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801028c:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801028e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010292:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010296:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010298:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferSize  = 0U;
 801029a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 801029c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80102a0:	86e6      	strh	r6, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80102a2:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 80102a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80102a6:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80102a8:	d103      	bne.n	80102b2 <HAL_SPI_Transmit+0x7a>
    SPI_1LINE_TX(hspi);
 80102aa:	681a      	ldr	r2, [r3, #0]
 80102ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80102b0:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	0652      	lsls	r2, r2, #25
 80102b6:	d553      	bpl.n	8010360 <HAL_SPI_Transmit+0x128>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80102b8:	68e2      	ldr	r2, [r4, #12]
 80102ba:	6861      	ldr	r1, [r4, #4]
 80102bc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80102c0:	d07e      	beq.n	80103c0 <HAL_SPI_Transmit+0x188>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80102c2:	2900      	cmp	r1, #0
 80102c4:	d168      	bne.n	8010398 <HAL_SPI_Transmit+0x160>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80102c6:	f898 2000 	ldrb.w	r2, [r8]
 80102ca:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80102cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80102ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80102d0:	3b01      	subs	r3, #1
 80102d2:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80102d4:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80102d6:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80102d8:	6322      	str	r2, [r4, #48]	; 0x30
 80102da:	1c6b      	adds	r3, r5, #1
 80102dc:	d145      	bne.n	801036a <HAL_SPI_Transmit+0x132>
    while (hspi->TxXferCount > 0U)
 80102de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	b18b      	cbz	r3, 8010308 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80102e4:	6823      	ldr	r3, [r4, #0]
 80102e6:	689a      	ldr	r2, [r3, #8]
 80102e8:	0796      	lsls	r6, r2, #30
 80102ea:	d55f      	bpl.n	80103ac <HAL_SPI_Transmit+0x174>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80102ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80102ee:	7812      	ldrb	r2, [r2, #0]
 80102f0:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80102f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80102f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80102f6:	3b01      	subs	r3, #1
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80102fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80102fe:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 8010300:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010302:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8010304:	2b00      	cmp	r3, #0
 8010306:	d1ed      	bne.n	80102e4 <HAL_SPI_Transmit+0xac>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010308:	4b6d      	ldr	r3, [pc, #436]	; (80104c0 <HAL_SPI_Transmit+0x288>)
 801030a:	496e      	ldr	r1, [pc, #440]	; (80104c4 <HAL_SPI_Transmit+0x28c>)
 801030c:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801030e:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010310:	fba1 1303 	umull	r1, r3, r1, r3
 8010314:	0d5b      	lsrs	r3, r3, #21
 8010316:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801031a:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801031e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010322:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010324:	d107      	bne.n	8010336 <HAL_SPI_Transmit+0xfe>
 8010326:	e03a      	b.n	801039e <HAL_SPI_Transmit+0x166>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8010328:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801032a:	6822      	ldr	r2, [r4, #0]
      count--;
 801032c:	3b01      	subs	r3, #1
 801032e:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010330:	6893      	ldr	r3, [r2, #8]
 8010332:	061b      	lsls	r3, r3, #24
 8010334:	d502      	bpl.n	801033c <HAL_SPI_Transmit+0x104>
      if (count == 0U)
 8010336:	9b01      	ldr	r3, [sp, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1f5      	bne.n	8010328 <HAL_SPI_Transmit+0xf0>
 801033c:	68a3      	ldr	r3, [r4, #8]
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801033e:	b933      	cbnz	r3, 801034e <HAL_SPI_Transmit+0x116>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010340:	6822      	ldr	r2, [r4, #0]
 8010342:	9300      	str	r3, [sp, #0]
 8010344:	68d3      	ldr	r3, [r2, #12]
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	6893      	ldr	r3, [r2, #8]
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801034e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8010350:	3000      	adds	r0, #0
 8010352:	bf18      	it	ne
 8010354:	2001      	movne	r0, #1
error:
 8010356:	e787      	b.n	8010268 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8010358:	2002      	movs	r0, #2
}
 801035a:	b002      	add	sp, #8
 801035c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010366:	601a      	str	r2, [r3, #0]
 8010368:	e7a6      	b.n	80102b8 <HAL_SPI_Transmit+0x80>
    while (hspi->TxXferCount > 0U)
 801036a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801036c:	b29b      	uxth	r3, r3
 801036e:	2b00      	cmp	r3, #0
 8010370:	d0ca      	beq.n	8010308 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010372:	6823      	ldr	r3, [r4, #0]
 8010374:	689a      	ldr	r2, [r3, #8]
 8010376:	0792      	lsls	r2, r2, #30
 8010378:	d51b      	bpl.n	80103b2 <HAL_SPI_Transmit+0x17a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801037a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801037c:	7812      	ldrb	r2, [r2, #0]
 801037e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8010380:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010382:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8010384:	3b01      	subs	r3, #1
 8010386:	b29b      	uxth	r3, r3
 8010388:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 801038a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801038c:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 801038e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010390:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8010392:	2b00      	cmp	r3, #0
 8010394:	d1ed      	bne.n	8010372 <HAL_SPI_Transmit+0x13a>
 8010396:	e7b7      	b.n	8010308 <HAL_SPI_Transmit+0xd0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010398:	2e01      	cmp	r6, #1
 801039a:	d19e      	bne.n	80102da <HAL_SPI_Transmit+0xa2>
 801039c:	e793      	b.n	80102c6 <HAL_SPI_Transmit+0x8e>
 801039e:	1c68      	adds	r0, r5, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80103a0:	6822      	ldr	r2, [r4, #0]
 80103a2:	d155      	bne.n	8010450 <HAL_SPI_Transmit+0x218>
 80103a4:	6893      	ldr	r3, [r2, #8]
 80103a6:	0619      	lsls	r1, r3, #24
 80103a8:	d4fc      	bmi.n	80103a4 <HAL_SPI_Transmit+0x16c>
 80103aa:	e7c7      	b.n	801033c <HAL_SPI_Transmit+0x104>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103ac:	f7fe fcfa 	bl	800eda4 <HAL_GetTick>
 80103b0:	e795      	b.n	80102de <HAL_SPI_Transmit+0xa6>
 80103b2:	f7fe fcf7 	bl	800eda4 <HAL_GetTick>
 80103b6:	1bc0      	subs	r0, r0, r7
 80103b8:	42a8      	cmp	r0, r5
 80103ba:	d3d6      	bcc.n	801036a <HAL_SPI_Transmit+0x132>
          errorcode = HAL_TIMEOUT;
 80103bc:	2003      	movs	r0, #3
 80103be:	e753      	b.n	8010268 <HAL_SPI_Transmit+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80103c0:	2900      	cmp	r1, #0
 80103c2:	d03b      	beq.n	801043c <HAL_SPI_Transmit+0x204>
 80103c4:	2e01      	cmp	r6, #1
 80103c6:	d039      	beq.n	801043c <HAL_SPI_Transmit+0x204>
 80103c8:	1c68      	adds	r0, r5, #1
 80103ca:	d120      	bne.n	801040e <HAL_SPI_Transmit+0x1d6>
    while (hspi->TxXferCount > 0U)
 80103cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d099      	beq.n	8010308 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	689a      	ldr	r2, [r3, #8]
 80103d8:	0791      	lsls	r1, r2, #30
 80103da:	d510      	bpl.n	80103fe <HAL_SPI_Transmit+0x1c6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80103dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80103de:	f832 1b02 	ldrh.w	r1, [r2], #2
 80103e2:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 80103e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80103e6:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80103e8:	3b01      	subs	r3, #1
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80103ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d088      	beq.n	8010308 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80103f6:	6823      	ldr	r3, [r4, #0]
 80103f8:	689a      	ldr	r2, [r3, #8]
 80103fa:	0791      	lsls	r1, r2, #30
 80103fc:	d4ee      	bmi.n	80103dc <HAL_SPI_Transmit+0x1a4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103fe:	f7fe fcd1 	bl	800eda4 <HAL_GetTick>
 8010402:	e7e3      	b.n	80103cc <HAL_SPI_Transmit+0x194>
 8010404:	f7fe fcce 	bl	800eda4 <HAL_GetTick>
 8010408:	1bc0      	subs	r0, r0, r7
 801040a:	42a8      	cmp	r0, r5
 801040c:	d2d6      	bcs.n	80103bc <HAL_SPI_Transmit+0x184>
    while (hspi->TxXferCount > 0U)
 801040e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010410:	b29b      	uxth	r3, r3
 8010412:	2b00      	cmp	r3, #0
 8010414:	f43f af78 	beq.w	8010308 <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010418:	6823      	ldr	r3, [r4, #0]
 801041a:	689a      	ldr	r2, [r3, #8]
 801041c:	0796      	lsls	r6, r2, #30
 801041e:	d5f1      	bpl.n	8010404 <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010420:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010422:	f832 1b02 	ldrh.w	r1, [r2], #2
 8010426:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8010428:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801042a:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 801042c:	3b01      	subs	r3, #1
 801042e:	b29b      	uxth	r3, r3
 8010430:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8010432:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010434:	b29b      	uxth	r3, r3
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1ee      	bne.n	8010418 <HAL_SPI_Transmit+0x1e0>
 801043a:	e765      	b.n	8010308 <HAL_SPI_Transmit+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801043c:	4641      	mov	r1, r8
 801043e:	f831 2b02 	ldrh.w	r2, [r1], #2
 8010442:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8010444:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010446:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8010448:	3b01      	subs	r3, #1
 801044a:	b29b      	uxth	r3, r3
 801044c:	86e3      	strh	r3, [r4, #54]	; 0x36
 801044e:	e7bb      	b.n	80103c8 <HAL_SPI_Transmit+0x190>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010450:	6893      	ldr	r3, [r2, #8]
 8010452:	061a      	lsls	r2, r3, #24
 8010454:	f57f af72 	bpl.w	801033c <HAL_SPI_Transmit+0x104>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010458:	f7fe fca4 	bl	800eda4 <HAL_GetTick>
 801045c:	1bc0      	subs	r0, r0, r7
 801045e:	4285      	cmp	r5, r0
 8010460:	d89d      	bhi.n	801039e <HAL_SPI_Transmit+0x166>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010462:	e9d4 2000 	ldrd	r2, r0, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010466:	6851      	ldr	r1, [r2, #4]
 8010468:	68a3      	ldr	r3, [r4, #8]
 801046a:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801046e:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010472:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010474:	d018      	beq.n	80104a8 <HAL_SPI_Transmit+0x270>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010476:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010478:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 801047c:	d107      	bne.n	801048e <HAL_SPI_Transmit+0x256>
          SPI_RESET_CRC(hspi);
 801047e:	6811      	ldr	r1, [r2, #0]
 8010480:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8010484:	6011      	str	r1, [r2, #0]
 8010486:	6811      	ldr	r1, [r2, #0]
 8010488:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 801048c:	6011      	str	r1, [r2, #0]
        hspi->State = HAL_SPI_STATE_READY;
 801048e:	2201      	movs	r2, #1
 8010490:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010494:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hspi);
 8010496:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010498:	f042 0220 	orr.w	r2, r2, #32
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801049c:	2120      	movs	r1, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801049e:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hspi);
 80104a0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80104a4:	6561      	str	r1, [r4, #84]	; 0x54
 80104a6:	e74a      	b.n	801033e <HAL_SPI_Transmit+0x106>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80104a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80104ac:	d002      	beq.n	80104b4 <HAL_SPI_Transmit+0x27c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80104ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80104b2:	d1e0      	bne.n	8010476 <HAL_SPI_Transmit+0x23e>
          __HAL_SPI_DISABLE(hspi);
 80104b4:	6811      	ldr	r1, [r2, #0]
 80104b6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80104ba:	6011      	str	r1, [r2, #0]
 80104bc:	e7db      	b.n	8010476 <HAL_SPI_Transmit+0x23e>
 80104be:	bf00      	nop
 80104c0:	20000020 	.word	0x20000020
 80104c4:	165e9f81 	.word	0x165e9f81

080104c8 <HAL_SPI_Receive>:
{
 80104c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80104cc:	6845      	ldr	r5, [r0, #4]
 80104ce:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 80104d2:	4604      	mov	r4, r0
 80104d4:	b082      	sub	sp, #8
 80104d6:	460f      	mov	r7, r1
 80104d8:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80104dc:	4690      	mov	r8, r2
 80104de:	461e      	mov	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80104e0:	d018      	beq.n	8010514 <HAL_SPI_Receive+0x4c>
  __HAL_LOCK(hspi);
 80104e2:	2801      	cmp	r0, #1
 80104e4:	f000 80bd 	beq.w	8010662 <HAL_SPI_Receive+0x19a>
 80104e8:	2301      	movs	r3, #1
 80104ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80104ee:	f7fe fc59 	bl	800eda4 <HAL_GetTick>
 80104f2:	4605      	mov	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80104f4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80104f8:	b2c0      	uxtb	r0, r0
 80104fa:	2801      	cmp	r0, #1
 80104fc:	f000 80b5 	beq.w	801066a <HAL_SPI_Receive+0x1a2>
    errorcode = HAL_BUSY;
 8010500:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8010502:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8010504:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8010506:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801050a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 801050e:	b002      	add	sp, #8
 8010510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010514:	68a3      	ldr	r3, [r4, #8]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d1e3      	bne.n	80104e2 <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801051a:	2304      	movs	r3, #4
  __HAL_LOCK(hspi);
 801051c:	2801      	cmp	r0, #1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801051e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_LOCK(hspi);
 8010522:	f000 809e 	beq.w	8010662 <HAL_SPI_Receive+0x19a>
 8010526:	2301      	movs	r3, #1
 8010528:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 801052c:	f7fe fc3a 	bl	800eda4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8010530:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8010534:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8010536:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010538:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 801053a:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801053c:	d007      	beq.n	801054e <HAL_SPI_Receive+0x86>
 801053e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8010542:	d1dd      	bne.n	8010500 <HAL_SPI_Receive+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010544:	68a1      	ldr	r1, [r4, #8]
 8010546:	2900      	cmp	r1, #0
 8010548:	d1da      	bne.n	8010500 <HAL_SPI_Receive+0x38>
 801054a:	2b04      	cmp	r3, #4
 801054c:	d1d8      	bne.n	8010500 <HAL_SPI_Receive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801054e:	2f00      	cmp	r7, #0
 8010550:	f000 8135 	beq.w	80107be <HAL_SPI_Receive+0x2f6>
 8010554:	f1b8 0f00 	cmp.w	r8, #0
 8010558:	f000 8131 	beq.w	80107be <HAL_SPI_Receive+0x2f6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801055c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010560:	6821      	ldr	r1, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010562:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010564:	bf1c      	itt	ne
 8010566:	2305      	movne	r3, #5
 8010568:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801056c:	2300      	movs	r3, #0
 801056e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8010570:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8010574:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010578:	6808      	ldr	r0, [r1, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801057a:	63a7      	str	r7, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801057c:	0640      	lsls	r0, r0, #25
  hspi->RxXferSize  = Size;
 801057e:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010582:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8010584:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 8010588:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801058c:	d403      	bmi.n	8010596 <HAL_SPI_Receive+0xce>
    __HAL_SPI_ENABLE(hspi);
 801058e:	680b      	ldr	r3, [r1, #0]
 8010590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010594:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010596:	68e3      	ldr	r3, [r4, #12]
 8010598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801059c:	f000 8154 	beq.w	8010848 <HAL_SPI_Receive+0x380>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80105a0:	2a00      	cmp	r2, #0
 80105a2:	f000 8147 	beq.w	8010834 <HAL_SPI_Receive+0x36c>
 80105a6:	f1b8 0f01 	cmp.w	r8, #1
 80105aa:	f000 8143 	beq.w	8010834 <HAL_SPI_Receive+0x36c>
 80105ae:	1c70      	adds	r0, r6, #1
 80105b0:	f040 81b2 	bne.w	8010918 <HAL_SPI_Receive+0x450>
        txallowed = 1U;
 80105b4:	2501      	movs	r5, #1
 80105b6:	e026      	b.n	8010606 <HAL_SPI_Receive+0x13e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80105b8:	6823      	ldr	r3, [r4, #0]
 80105ba:	689a      	ldr	r2, [r3, #8]
 80105bc:	0791      	lsls	r1, r2, #30
 80105be:	d50f      	bpl.n	80105e0 <HAL_SPI_Receive+0x118>
 80105c0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80105c2:	b292      	uxth	r2, r2
 80105c4:	b162      	cbz	r2, 80105e0 <HAL_SPI_Receive+0x118>
 80105c6:	b15d      	cbz	r5, 80105e0 <HAL_SPI_Receive+0x118>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80105c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80105ca:	7812      	ldrb	r2, [r2, #0]
 80105cc:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80105ce:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80105d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80105d2:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 80105d4:	3a01      	subs	r2, #1
 80105d6:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 80105d8:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 80105da:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80105dc:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 80105de:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80105e0:	689a      	ldr	r2, [r3, #8]
 80105e2:	07d2      	lsls	r2, r2, #31
 80105e4:	d50d      	bpl.n	8010602 <HAL_SPI_Receive+0x13a>
 80105e6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80105e8:	b292      	uxth	r2, r2
 80105ea:	b152      	cbz	r2, 8010602 <HAL_SPI_Receive+0x13a>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80105ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80105f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80105f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80105f6:	3b01      	subs	r3, #1
 80105f8:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 80105fa:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 80105fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80105fe:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 8010600:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010602:	f7fe fbcf 	bl	800eda4 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010606:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010608:	b29b      	uxth	r3, r3
 801060a:	2b00      	cmp	r3, #0
 801060c:	d1d4      	bne.n	80105b8 <HAL_SPI_Receive+0xf0>
 801060e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010610:	b29b      	uxth	r3, r3
 8010612:	2b00      	cmp	r3, #0
 8010614:	d1d0      	bne.n	80105b8 <HAL_SPI_Receive+0xf0>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010616:	4b91      	ldr	r3, [pc, #580]	; (801085c <HAL_SPI_Receive+0x394>)
 8010618:	4a91      	ldr	r2, [pc, #580]	; (8010860 <HAL_SPI_Receive+0x398>)
 801061a:	681b      	ldr	r3, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801061c:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801061e:	fba2 2303 	umull	r2, r3, r2, r3
 8010622:	0d5b      	lsrs	r3, r3, #21
 8010624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010628:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801062c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010630:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010632:	d107      	bne.n	8010644 <HAL_SPI_Receive+0x17c>
 8010634:	e1a4      	b.n	8010980 <HAL_SPI_Receive+0x4b8>
      count--;
 8010636:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010638:	6822      	ldr	r2, [r4, #0]
      count--;
 801063a:	3b01      	subs	r3, #1
 801063c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801063e:	6893      	ldr	r3, [r2, #8]
 8010640:	0619      	lsls	r1, r3, #24
 8010642:	d502      	bpl.n	801064a <HAL_SPI_Receive+0x182>
      if (count == 0U)
 8010644:	9b01      	ldr	r3, [sp, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d1f5      	bne.n	8010636 <HAL_SPI_Receive+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801064a:	68a0      	ldr	r0, [r4, #8]
 801064c:	2800      	cmp	r0, #0
 801064e:	f040 8154 	bne.w	80108fa <HAL_SPI_Receive+0x432>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	9000      	str	r0, [sp, #0]
 8010656:	68da      	ldr	r2, [r3, #12]
 8010658:	9200      	str	r2, [sp, #0]
 801065a:	689b      	ldr	r3, [r3, #8]
 801065c:	9300      	str	r3, [sp, #0]
 801065e:	9b00      	ldr	r3, [sp, #0]
 8010660:	e74f      	b.n	8010502 <HAL_SPI_Receive+0x3a>
  __HAL_LOCK(hspi);
 8010662:	2002      	movs	r0, #2
}
 8010664:	b002      	add	sp, #8
 8010666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 801066a:	2f00      	cmp	r7, #0
 801066c:	f43f af49 	beq.w	8010502 <HAL_SPI_Receive+0x3a>
 8010670:	f1b8 0f00 	cmp.w	r8, #0
 8010674:	f43f af45 	beq.w	8010502 <HAL_SPI_Receive+0x3a>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010678:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801067a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801067c:	2304      	movs	r3, #4
 801067e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010682:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010686:	f04f 0300 	mov.w	r3, #0
 801068a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801068c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801068e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 8010690:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8010694:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010698:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801069c:	86e3      	strh	r3, [r4, #54]	; 0x36
 801069e:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80106a0:	f000 8084 	beq.w	80107ac <HAL_SPI_Receive+0x2e4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	0652      	lsls	r2, r2, #25
 80106a8:	d403      	bmi.n	80106b2 <HAL_SPI_Receive+0x1ea>
    __HAL_SPI_ENABLE(hspi);
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80106b0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80106b2:	68e2      	ldr	r2, [r4, #12]
 80106b4:	b9b2      	cbnz	r2, 80106e4 <HAL_SPI_Receive+0x21c>
 80106b6:	1c71      	adds	r1, r6, #1
 80106b8:	d00b      	beq.n	80106d2 <HAL_SPI_Receive+0x20a>
 80106ba:	e069      	b.n	8010790 <HAL_SPI_Receive+0x2c8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80106bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80106be:	7b1b      	ldrb	r3, [r3, #12]
 80106c0:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80106c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80106c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80106c6:	3b01      	subs	r3, #1
 80106c8:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80106ca:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 80106cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80106ce:	63a2      	str	r2, [r4, #56]	; 0x38
 80106d0:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 80106d2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80106d4:	b292      	uxth	r2, r2
 80106d6:	b1d2      	cbz	r2, 801070e <HAL_SPI_Receive+0x246>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80106d8:	689a      	ldr	r2, [r3, #8]
 80106da:	07d2      	lsls	r2, r2, #31
 80106dc:	d4ee      	bmi.n	80106bc <HAL_SPI_Receive+0x1f4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106de:	f7fe fb61 	bl	800eda4 <HAL_GetTick>
 80106e2:	e7f5      	b.n	80106d0 <HAL_SPI_Receive+0x208>
 80106e4:	1c77      	adds	r7, r6, #1
 80106e6:	d124      	bne.n	8010732 <HAL_SPI_Receive+0x26a>
    while (hspi->RxXferCount > 0U)
 80106e8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80106ea:	b292      	uxth	r2, r2
 80106ec:	b17a      	cbz	r2, 801070e <HAL_SPI_Receive+0x246>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80106ee:	689a      	ldr	r2, [r3, #8]
 80106f0:	07d0      	lsls	r0, r2, #31
 80106f2:	d560      	bpl.n	80107b6 <HAL_SPI_Receive+0x2ee>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80106f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80106f6:	68da      	ldr	r2, [r3, #12]
 80106f8:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 80106fc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80106fe:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8010700:	3a01      	subs	r2, #1
 8010702:	b292      	uxth	r2, r2
 8010704:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8010706:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8010708:	b292      	uxth	r2, r2
 801070a:	2a00      	cmp	r2, #0
 801070c:	d1ef      	bne.n	80106ee <HAL_SPI_Receive+0x226>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801070e:	6862      	ldr	r2, [r4, #4]
 8010710:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8010714:	d055      	beq.n	80107c2 <HAL_SPI_Receive+0x2fa>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010716:	689a      	ldr	r2, [r3, #8]
 8010718:	07d2      	lsls	r2, r2, #31
 801071a:	d4fc      	bmi.n	8010716 <HAL_SPI_Receive+0x24e>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801071c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 801071e:	3000      	adds	r0, #0
 8010720:	bf18      	it	ne
 8010722:	2001      	movne	r0, #1
error :
 8010724:	e6ed      	b.n	8010502 <HAL_SPI_Receive+0x3a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010726:	f7fe fb3d 	bl	800eda4 <HAL_GetTick>
 801072a:	1b40      	subs	r0, r0, r5
 801072c:	42b0      	cmp	r0, r6
 801072e:	d23b      	bcs.n	80107a8 <HAL_SPI_Receive+0x2e0>
 8010730:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 8010732:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8010734:	b292      	uxth	r2, r2
 8010736:	b17a      	cbz	r2, 8010758 <HAL_SPI_Receive+0x290>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010738:	689a      	ldr	r2, [r3, #8]
 801073a:	07d0      	lsls	r0, r2, #31
 801073c:	d5f3      	bpl.n	8010726 <HAL_SPI_Receive+0x25e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801073e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010740:	68da      	ldr	r2, [r3, #12]
 8010742:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8010746:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010748:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 801074a:	3a01      	subs	r2, #1
 801074c:	b292      	uxth	r2, r2
 801074e:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8010750:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8010752:	b292      	uxth	r2, r2
 8010754:	2a00      	cmp	r2, #0
 8010756:	d1ef      	bne.n	8010738 <HAL_SPI_Receive+0x270>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010758:	6862      	ldr	r2, [r4, #4]
 801075a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 801075e:	d106      	bne.n	801076e <HAL_SPI_Receive+0x2a6>
 8010760:	e02f      	b.n	80107c2 <HAL_SPI_Receive+0x2fa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010762:	f7fe fb1f 	bl	800eda4 <HAL_GetTick>
 8010766:	1b40      	subs	r0, r0, r5
 8010768:	4286      	cmp	r6, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801076a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801076c:	d93f      	bls.n	80107ee <HAL_SPI_Receive+0x326>
 801076e:	1c71      	adds	r1, r6, #1
 8010770:	d0d1      	beq.n	8010716 <HAL_SPI_Receive+0x24e>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	07db      	lsls	r3, r3, #31
 8010776:	d4f4      	bmi.n	8010762 <HAL_SPI_Receive+0x29a>
 8010778:	e7d0      	b.n	801071c <HAL_SPI_Receive+0x254>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801077a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801077c:	7b1b      	ldrb	r3, [r3, #12]
 801077e:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8010780:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010782:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8010784:	3b01      	subs	r3, #1
 8010786:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010788:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 801078a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801078c:	63a2      	str	r2, [r4, #56]	; 0x38
 801078e:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 8010790:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8010792:	b292      	uxth	r2, r2
 8010794:	2a00      	cmp	r2, #0
 8010796:	d0df      	beq.n	8010758 <HAL_SPI_Receive+0x290>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010798:	689a      	ldr	r2, [r3, #8]
 801079a:	07d7      	lsls	r7, r2, #31
 801079c:	d4ed      	bmi.n	801077a <HAL_SPI_Receive+0x2b2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801079e:	f7fe fb01 	bl	800eda4 <HAL_GetTick>
 80107a2:	1b40      	subs	r0, r0, r5
 80107a4:	42b0      	cmp	r0, r6
 80107a6:	d3f2      	bcc.n	801078e <HAL_SPI_Receive+0x2c6>
          errorcode = HAL_TIMEOUT;
 80107a8:	2003      	movs	r0, #3
 80107aa:	e6aa      	b.n	8010502 <HAL_SPI_Receive+0x3a>
    SPI_1LINE_RX(hspi);
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80107b2:	601a      	str	r2, [r3, #0]
 80107b4:	e776      	b.n	80106a4 <HAL_SPI_Receive+0x1dc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80107b6:	f7fe faf5 	bl	800eda4 <HAL_GetTick>
 80107ba:	6823      	ldr	r3, [r4, #0]
 80107bc:	e794      	b.n	80106e8 <HAL_SPI_Receive+0x220>
    errorcode = HAL_ERROR;
 80107be:	2001      	movs	r0, #1
 80107c0:	e69f      	b.n	8010502 <HAL_SPI_Receive+0x3a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107c2:	68a2      	ldr	r2, [r4, #8]
 80107c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80107c8:	d02f      	beq.n	801082a <HAL_SPI_Receive+0x362>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80107ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80107ce:	d076      	beq.n	80108be <HAL_SPI_Receive+0x3f6>
 80107d0:	1c71      	adds	r1, r6, #1
 80107d2:	d103      	bne.n	80107dc <HAL_SPI_Receive+0x314>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80107d4:	689a      	ldr	r2, [r3, #8]
 80107d6:	0612      	lsls	r2, r2, #24
 80107d8:	d4fc      	bmi.n	80107d4 <HAL_SPI_Receive+0x30c>
 80107da:	e79f      	b.n	801071c <HAL_SPI_Receive+0x254>
 80107dc:	689b      	ldr	r3, [r3, #8]
 80107de:	061b      	lsls	r3, r3, #24
 80107e0:	d59c      	bpl.n	801071c <HAL_SPI_Receive+0x254>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80107e2:	f7fe fadf 	bl	800eda4 <HAL_GetTick>
 80107e6:	1b40      	subs	r0, r0, r5
 80107e8:	4286      	cmp	r6, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80107ea:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80107ec:	d8f0      	bhi.n	80107d0 <HAL_SPI_Receive+0x308>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107ee:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80107f0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107f2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80107f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80107fa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107fc:	d07f      	beq.n	80108fe <HAL_SPI_Receive+0x436>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80107fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010800:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8010804:	d107      	bne.n	8010816 <HAL_SPI_Receive+0x34e>
          SPI_RESET_CRC(hspi);
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801080c:	601a      	str	r2, [r3, #0]
 801080e:	681a      	ldr	r2, [r3, #0]
 8010810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010814:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8010816:	2301      	movs	r3, #1
 8010818:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801081c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801081e:	f043 0320 	orr.w	r3, r3, #32
 8010822:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010824:	2320      	movs	r3, #32
 8010826:	6563      	str	r3, [r4, #84]	; 0x54
 8010828:	e778      	b.n	801071c <HAL_SPI_Receive+0x254>
    __HAL_SPI_DISABLE(hspi);
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010830:	601a      	str	r2, [r3, #0]
 8010832:	e7cd      	b.n	80107d0 <HAL_SPI_Receive+0x308>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010834:	783b      	ldrb	r3, [r7, #0]
 8010836:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 8010838:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801083a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 801083c:	3b01      	subs	r3, #1
 801083e:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010840:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8010842:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010844:	6322      	str	r2, [r4, #48]	; 0x30
 8010846:	e6b2      	b.n	80105ae <HAL_SPI_Receive+0xe6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010848:	2a00      	cmp	r2, #0
 801084a:	d04d      	beq.n	80108e8 <HAL_SPI_Receive+0x420>
 801084c:	f1b8 0f01 	cmp.w	r8, #1
 8010850:	d04a      	beq.n	80108e8 <HAL_SPI_Receive+0x420>
 8010852:	1c77      	adds	r7, r6, #1
 8010854:	f040 80b5 	bne.w	80109c2 <HAL_SPI_Receive+0x4fa>
        txallowed = 1U;
 8010858:	2501      	movs	r5, #1
 801085a:	e027      	b.n	80108ac <HAL_SPI_Receive+0x3e4>
 801085c:	20000020 	.word	0x20000020
 8010860:	165e9f81 	.word	0x165e9f81
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010864:	6823      	ldr	r3, [r4, #0]
 8010866:	689a      	ldr	r2, [r3, #8]
 8010868:	0796      	lsls	r6, r2, #30
 801086a:	d50d      	bpl.n	8010888 <HAL_SPI_Receive+0x3c0>
 801086c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801086e:	b292      	uxth	r2, r2
 8010870:	b152      	cbz	r2, 8010888 <HAL_SPI_Receive+0x3c0>
 8010872:	b14d      	cbz	r5, 8010888 <HAL_SPI_Receive+0x3c0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010874:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010876:	f831 2b02 	ldrh.w	r2, [r1], #2
 801087a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 801087c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801087e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8010880:	3a01      	subs	r2, #1
 8010882:	b292      	uxth	r2, r2
 8010884:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 8010886:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010888:	689a      	ldr	r2, [r3, #8]
 801088a:	07d0      	lsls	r0, r2, #31
 801088c:	d50c      	bpl.n	80108a8 <HAL_SPI_Receive+0x3e0>
 801088e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8010890:	b292      	uxth	r2, r2
 8010892:	b14a      	cbz	r2, 80108a8 <HAL_SPI_Receive+0x3e0>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010894:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 801089c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801089e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80108a0:	3b01      	subs	r3, #1
 80108a2:	b29b      	uxth	r3, r3
 80108a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80108a6:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80108a8:	f7fe fa7c 	bl	800eda4 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80108ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d1d7      	bne.n	8010864 <HAL_SPI_Receive+0x39c>
 80108b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d1d3      	bne.n	8010864 <HAL_SPI_Receive+0x39c>
 80108bc:	e6ab      	b.n	8010616 <HAL_SPI_Receive+0x14e>
    __HAL_SPI_DISABLE(hspi);
 80108be:	681a      	ldr	r2, [r3, #0]
 80108c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108c4:	601a      	str	r2, [r3, #0]
 80108c6:	1c77      	adds	r7, r6, #1
 80108c8:	d103      	bne.n	80108d2 <HAL_SPI_Receive+0x40a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80108ca:	689a      	ldr	r2, [r3, #8]
 80108cc:	07d5      	lsls	r5, r2, #31
 80108ce:	d4fc      	bmi.n	80108ca <HAL_SPI_Receive+0x402>
 80108d0:	e724      	b.n	801071c <HAL_SPI_Receive+0x254>
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	07d8      	lsls	r0, r3, #31
 80108d6:	f57f af21 	bpl.w	801071c <HAL_SPI_Receive+0x254>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80108da:	f7fe fa63 	bl	800eda4 <HAL_GetTick>
 80108de:	1b40      	subs	r0, r0, r5
 80108e0:	4286      	cmp	r6, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80108e2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80108e4:	d8ef      	bhi.n	80108c6 <HAL_SPI_Receive+0x3fe>
 80108e6:	e782      	b.n	80107ee <HAL_SPI_Receive+0x326>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80108e8:	f837 3b02 	ldrh.w	r3, [r7], #2
 80108ec:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 80108ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80108f0:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80108f2:	3b01      	subs	r3, #1
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80108f8:	e7ab      	b.n	8010852 <HAL_SPI_Receive+0x38a>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80108fa:	2000      	movs	r0, #0
 80108fc:	e601      	b.n	8010502 <HAL_SPI_Receive+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80108fe:	68a2      	ldr	r2, [r4, #8]
 8010900:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8010904:	d003      	beq.n	801090e <HAL_SPI_Receive+0x446>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010906:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801090a:	f47f af78 	bne.w	80107fe <HAL_SPI_Receive+0x336>
          __HAL_SPI_DISABLE(hspi);
 801090e:	681a      	ldr	r2, [r3, #0]
 8010910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010914:	601a      	str	r2, [r3, #0]
 8010916:	e772      	b.n	80107fe <HAL_SPI_Receive+0x336>
        txallowed = 1U;
 8010918:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801091a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801091c:	b29b      	uxth	r3, r3
 801091e:	b91b      	cbnz	r3, 8010928 <HAL_SPI_Receive+0x460>
 8010920:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010922:	b29b      	uxth	r3, r3
 8010924:	2b00      	cmp	r3, #0
 8010926:	d030      	beq.n	801098a <HAL_SPI_Receive+0x4c2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010928:	6823      	ldr	r3, [r4, #0]
 801092a:	689a      	ldr	r2, [r3, #8]
 801092c:	0791      	lsls	r1, r2, #30
 801092e:	d50f      	bpl.n	8010950 <HAL_SPI_Receive+0x488>
 8010930:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8010932:	b292      	uxth	r2, r2
 8010934:	b162      	cbz	r2, 8010950 <HAL_SPI_Receive+0x488>
 8010936:	b15f      	cbz	r7, 8010950 <HAL_SPI_Receive+0x488>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010938:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801093a:	7812      	ldrb	r2, [r2, #0]
 801093c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 801093e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8010940:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010942:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 8010944:	3a01      	subs	r2, #1
 8010946:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 8010948:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 801094a:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 801094c:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 801094e:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010950:	689a      	ldr	r2, [r3, #8]
 8010952:	07d2      	lsls	r2, r2, #31
 8010954:	d50d      	bpl.n	8010972 <HAL_SPI_Receive+0x4aa>
 8010956:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8010958:	b292      	uxth	r2, r2
 801095a:	b152      	cbz	r2, 8010972 <HAL_SPI_Receive+0x4aa>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801095c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801095e:	68db      	ldr	r3, [r3, #12]
 8010960:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8010962:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8010964:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8010966:	3b01      	subs	r3, #1
 8010968:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 801096a:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 801096c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 801096e:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 8010970:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010972:	f7fe fa17 	bl	800eda4 <HAL_GetTick>
 8010976:	1b40      	subs	r0, r0, r5
 8010978:	4286      	cmp	r6, r0
 801097a:	f67f af15 	bls.w	80107a8 <HAL_SPI_Receive+0x2e0>
 801097e:	e7cc      	b.n	801091a <HAL_SPI_Receive+0x452>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010980:	6822      	ldr	r2, [r4, #0]
 8010982:	6893      	ldr	r3, [r2, #8]
 8010984:	061d      	lsls	r5, r3, #24
 8010986:	d4fc      	bmi.n	8010982 <HAL_SPI_Receive+0x4ba>
 8010988:	e65f      	b.n	801064a <HAL_SPI_Receive+0x182>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801098a:	4b3b      	ldr	r3, [pc, #236]	; (8010a78 <HAL_SPI_Receive+0x5b0>)
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801098c:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	4a3a      	ldr	r2, [pc, #232]	; (8010a7c <HAL_SPI_Receive+0x5b4>)
 8010992:	fbb3 f2f2 	udiv	r2, r3, r2
 8010996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801099a:	fb03 f302 	mul.w	r3, r3, r2
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801099e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80109a2:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80109a4:	f47f ae4e 	bne.w	8010644 <HAL_SPI_Receive+0x17c>
 80109a8:	e004      	b.n	80109b4 <HAL_SPI_Receive+0x4ec>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80109aa:	f7fe f9fb 	bl	800eda4 <HAL_GetTick>
 80109ae:	1b40      	subs	r0, r0, r5
 80109b0:	4286      	cmp	r6, r0
 80109b2:	d936      	bls.n	8010a22 <HAL_SPI_Receive+0x55a>
 80109b4:	1c77      	adds	r7, r6, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80109b6:	6822      	ldr	r2, [r4, #0]
 80109b8:	d0e3      	beq.n	8010982 <HAL_SPI_Receive+0x4ba>
 80109ba:	6893      	ldr	r3, [r2, #8]
 80109bc:	0618      	lsls	r0, r3, #24
 80109be:	d4f4      	bmi.n	80109aa <HAL_SPI_Receive+0x4e2>
 80109c0:	e643      	b.n	801064a <HAL_SPI_Receive+0x182>
        txallowed = 1U;
 80109c2:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80109c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	b91b      	cbnz	r3, 80109d2 <HAL_SPI_Receive+0x50a>
 80109ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d0db      	beq.n	801098a <HAL_SPI_Receive+0x4c2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80109d2:	6823      	ldr	r3, [r4, #0]
 80109d4:	689a      	ldr	r2, [r3, #8]
 80109d6:	0791      	lsls	r1, r2, #30
 80109d8:	d50d      	bpl.n	80109f6 <HAL_SPI_Receive+0x52e>
 80109da:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80109dc:	b292      	uxth	r2, r2
 80109de:	b152      	cbz	r2, 80109f6 <HAL_SPI_Receive+0x52e>
 80109e0:	b14f      	cbz	r7, 80109f6 <HAL_SPI_Receive+0x52e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80109e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80109e4:	f831 2b02 	ldrh.w	r2, [r1], #2
 80109e8:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80109ea:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80109ec:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80109ee:	3a01      	subs	r2, #1
 80109f0:	b292      	uxth	r2, r2
 80109f2:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 80109f4:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80109f6:	689a      	ldr	r2, [r3, #8]
 80109f8:	07d2      	lsls	r2, r2, #31
 80109fa:	d50c      	bpl.n	8010a16 <HAL_SPI_Receive+0x54e>
 80109fc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80109fe:	b292      	uxth	r2, r2
 8010a00:	b14a      	cbz	r2, 8010a16 <HAL_SPI_Receive+0x54e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010a02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8010a0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010a0c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8010a14:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010a16:	f7fe f9c5 	bl	800eda4 <HAL_GetTick>
 8010a1a:	1b40      	subs	r0, r0, r5
 8010a1c:	4286      	cmp	r6, r0
 8010a1e:	d8d1      	bhi.n	80109c4 <HAL_SPI_Receive+0x4fc>
 8010a20:	e6c2      	b.n	80107a8 <HAL_SPI_Receive+0x2e0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a22:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010a26:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a28:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010a30:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a32:	d014      	beq.n	8010a5e <HAL_SPI_Receive+0x596>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010a34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010a36:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8010a3a:	d107      	bne.n	8010a4c <HAL_SPI_Receive+0x584>
          SPI_RESET_CRC(hspi);
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010a42:	601a      	str	r2, [r3, #0]
 8010a44:	681a      	ldr	r2, [r3, #0]
 8010a46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010a4a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8010a4c:	2001      	movs	r0, #1
 8010a4e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a52:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010a54:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a56:	4313      	orrs	r3, r2
 8010a58:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010a5a:	6562      	str	r2, [r4, #84]	; 0x54
 8010a5c:	e551      	b.n	8010502 <HAL_SPI_Receive+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a5e:	68a2      	ldr	r2, [r4, #8]
 8010a60:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8010a64:	d002      	beq.n	8010a6c <HAL_SPI_Receive+0x5a4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010a66:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8010a6a:	d1e3      	bne.n	8010a34 <HAL_SPI_Receive+0x56c>
          __HAL_SPI_DISABLE(hspi);
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a72:	601a      	str	r2, [r3, #0]
 8010a74:	e7de      	b.n	8010a34 <HAL_SPI_Receive+0x56c>
 8010a76:	bf00      	nop
 8010a78:	20000020 	.word	0x20000020
 8010a7c:	016e3600 	.word	0x016e3600

08010a80 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d05c      	beq.n	8010b3e <HAL_TIM_Base_Init+0xbe>
{
 8010a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010a90:	b3bb      	cbz	r3, 8010b02 <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a92:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010a94:	4e3a      	ldr	r6, [pc, #232]	; (8010b80 <HAL_TIM_Base_Init+0x100>)
 8010a96:	69a5      	ldr	r5, [r4, #24]
 8010a98:	68e0      	ldr	r0, [r4, #12]
 8010a9a:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8010a9c:	2302      	movs	r3, #2
 8010a9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010aa2:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8010aa4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010aa6:	d04c      	beq.n	8010b42 <HAL_TIM_Base_Init+0xc2>
 8010aa8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8010aac:	d058      	beq.n	8010b60 <HAL_TIM_Base_Init+0xe0>
 8010aae:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8010ab2:	42b2      	cmp	r2, r6
 8010ab4:	d02a      	beq.n	8010b0c <HAL_TIM_Base_Init+0x8c>
 8010ab6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010aba:	42b2      	cmp	r2, r6
 8010abc:	d026      	beq.n	8010b0c <HAL_TIM_Base_Init+0x8c>
 8010abe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010ac2:	42b2      	cmp	r2, r6
 8010ac4:	d022      	beq.n	8010b0c <HAL_TIM_Base_Init+0x8c>
 8010ac6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8010aca:	42b2      	cmp	r2, r6
 8010acc:	d01e      	beq.n	8010b0c <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010ace:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8010ad2:	42b2      	cmp	r2, r6
 8010ad4:	d013      	beq.n	8010afe <HAL_TIM_Base_Init+0x7e>
 8010ad6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010ada:	42b2      	cmp	r2, r6
 8010adc:	d00f      	beq.n	8010afe <HAL_TIM_Base_Init+0x7e>
 8010ade:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010ae2:	42b2      	cmp	r2, r6
 8010ae4:	d00b      	beq.n	8010afe <HAL_TIM_Base_Init+0x7e>
 8010ae6:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8010aea:	42b2      	cmp	r2, r6
 8010aec:	d007      	beq.n	8010afe <HAL_TIM_Base_Init+0x7e>
 8010aee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010af2:	42b2      	cmp	r2, r6
 8010af4:	d003      	beq.n	8010afe <HAL_TIM_Base_Init+0x7e>
 8010af6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010afa:	42b2      	cmp	r2, r6
 8010afc:	d138      	bne.n	8010b70 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010afe:	6926      	ldr	r6, [r4, #16]
 8010b00:	e033      	b.n	8010b6a <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8010b02:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8010b06:	f7fc fdf5 	bl	800d6f4 <HAL_TIM_Base_MspInit>
 8010b0a:	e7c2      	b.n	8010a92 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8010b0c:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010b0e:	4f1d      	ldr	r7, [pc, #116]	; (8010b84 <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010b14:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010b16:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8010b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010b1c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b22:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010b24:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8010b26:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010b28:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010b2a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010b2c:	d101      	bne.n	8010b32 <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010b2e:	6963      	ldr	r3, [r4, #20]
 8010b30:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010b32:	2301      	movs	r3, #1
 8010b34:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8010b36:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8010b38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8010b3e:	2001      	movs	r0, #1
}
 8010b40:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8010b42:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010b44:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010b4a:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8010b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010b50:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b56:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010b58:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010b5a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010b5c:	6291      	str	r1, [r2, #40]	; 0x28
 8010b5e:	e7e6      	b.n	8010b2e <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8010b60:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010b62:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010b68:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8010b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010b6e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b74:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010b76:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010b78:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010b7a:	6291      	str	r1, [r2, #40]	; 0x28
 8010b7c:	e7d9      	b.n	8010b32 <HAL_TIM_Base_Init+0xb2>
 8010b7e:	bf00      	nop
 8010b80:	40010000 	.word	0x40010000
 8010b84:	40010400 	.word	0x40010400

08010b88 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010b88:	6803      	ldr	r3, [r0, #0]
 8010b8a:	68da      	ldr	r2, [r3, #12]
 8010b8c:	f042 0201 	orr.w	r2, r2, #1
 8010b90:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b92:	689a      	ldr	r2, [r3, #8]
 8010b94:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b98:	2a06      	cmp	r2, #6
 8010b9a:	d003      	beq.n	8010ba4 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8010b9c:	681a      	ldr	r2, [r3, #0]
 8010b9e:	f042 0201 	orr.w	r2, r2, #1
 8010ba2:	601a      	str	r2, [r3, #0]
}
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	4770      	bx	lr

08010ba8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010ba8:	6803      	ldr	r3, [r0, #0]
 8010baa:	68da      	ldr	r2, [r3, #12]
 8010bac:	f022 0201 	bic.w	r2, r2, #1
 8010bb0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8010bb2:	6a19      	ldr	r1, [r3, #32]
 8010bb4:	f241 1211 	movw	r2, #4369	; 0x1111
 8010bb8:	4211      	tst	r1, r2
 8010bba:	d108      	bne.n	8010bce <HAL_TIM_Base_Stop_IT+0x26>
 8010bbc:	6a19      	ldr	r1, [r3, #32]
 8010bbe:	f240 4244 	movw	r2, #1092	; 0x444
 8010bc2:	4211      	tst	r1, r2
 8010bc4:	d103      	bne.n	8010bce <HAL_TIM_Base_Stop_IT+0x26>
 8010bc6:	681a      	ldr	r2, [r3, #0]
 8010bc8:	f022 0201 	bic.w	r2, r2, #1
 8010bcc:	601a      	str	r2, [r3, #0]
}
 8010bce:	2000      	movs	r0, #0
 8010bd0:	4770      	bx	lr
 8010bd2:	bf00      	nop

08010bd4 <HAL_TIM_OC_MspInit>:
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	d05c      	beq.n	8010c96 <HAL_TIM_OC_Init+0xbe>
{
 8010bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8010bde:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8010be2:	4604      	mov	r4, r0
 8010be4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010be8:	b3bb      	cbz	r3, 8010c5a <HAL_TIM_OC_Init+0x82>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010bea:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010bec:	4e3a      	ldr	r6, [pc, #232]	; (8010cd8 <HAL_TIM_OC_Init+0x100>)
 8010bee:	69a5      	ldr	r5, [r4, #24]
 8010bf0:	68e0      	ldr	r0, [r4, #12]
 8010bf2:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8010bf4:	2302      	movs	r3, #2
 8010bf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010bfa:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8010bfc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010bfe:	d04c      	beq.n	8010c9a <HAL_TIM_OC_Init+0xc2>
 8010c00:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8010c04:	d058      	beq.n	8010cb8 <HAL_TIM_OC_Init+0xe0>
 8010c06:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8010c0a:	42b2      	cmp	r2, r6
 8010c0c:	d02a      	beq.n	8010c64 <HAL_TIM_OC_Init+0x8c>
 8010c0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010c12:	42b2      	cmp	r2, r6
 8010c14:	d026      	beq.n	8010c64 <HAL_TIM_OC_Init+0x8c>
 8010c16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010c1a:	42b2      	cmp	r2, r6
 8010c1c:	d022      	beq.n	8010c64 <HAL_TIM_OC_Init+0x8c>
 8010c1e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8010c22:	42b2      	cmp	r2, r6
 8010c24:	d01e      	beq.n	8010c64 <HAL_TIM_OC_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c26:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8010c2a:	42b2      	cmp	r2, r6
 8010c2c:	d013      	beq.n	8010c56 <HAL_TIM_OC_Init+0x7e>
 8010c2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010c32:	42b2      	cmp	r2, r6
 8010c34:	d00f      	beq.n	8010c56 <HAL_TIM_OC_Init+0x7e>
 8010c36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010c3a:	42b2      	cmp	r2, r6
 8010c3c:	d00b      	beq.n	8010c56 <HAL_TIM_OC_Init+0x7e>
 8010c3e:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8010c42:	42b2      	cmp	r2, r6
 8010c44:	d007      	beq.n	8010c56 <HAL_TIM_OC_Init+0x7e>
 8010c46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010c4a:	42b2      	cmp	r2, r6
 8010c4c:	d003      	beq.n	8010c56 <HAL_TIM_OC_Init+0x7e>
 8010c4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010c52:	42b2      	cmp	r2, r6
 8010c54:	d138      	bne.n	8010cc8 <HAL_TIM_OC_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c56:	6926      	ldr	r6, [r4, #16]
 8010c58:	e033      	b.n	8010cc2 <HAL_TIM_OC_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8010c5a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8010c5e:	f7ff ffb9 	bl	8010bd4 <HAL_TIM_OC_MspInit>
 8010c62:	e7c2      	b.n	8010bea <HAL_TIM_OC_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8010c64:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010c66:	4f1d      	ldr	r7, [pc, #116]	; (8010cdc <HAL_TIM_OC_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010c6c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c6e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8010c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c74:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c7a:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010c7c:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8010c7e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010c80:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010c82:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010c84:	d101      	bne.n	8010c8a <HAL_TIM_OC_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 8010c86:	6963      	ldr	r3, [r4, #20]
 8010c88:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8010c8e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8010c90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8010c96:	2001      	movs	r0, #1
}
 8010c98:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8010c9a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c9c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010ca2:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8010ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ca8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010cae:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010cb0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010cb2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010cb4:	6291      	str	r1, [r2, #40]	; 0x28
 8010cb6:	e7e6      	b.n	8010c86 <HAL_TIM_OC_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8010cb8:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010cba:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010cc0:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8010cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010cc6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ccc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010cce:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010cd0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010cd2:	6291      	str	r1, [r2, #40]	; 0x28
 8010cd4:	e7d9      	b.n	8010c8a <HAL_TIM_OC_Init+0xb2>
 8010cd6:	bf00      	nop
 8010cd8:	40010000 	.word	0x40010000
 8010cdc:	40010400 	.word	0x40010400

08010ce0 <HAL_TIM_OC_Start_IT>:
{
 8010ce0:	b410      	push	{r4}
 8010ce2:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010ce4:	290c      	cmp	r1, #12
 8010ce6:	d80c      	bhi.n	8010d02 <HAL_TIM_OC_Start_IT+0x22>
 8010ce8:	e8df f001 	tbb	[pc, r1]
 8010cec:	0b0b0b07 	.word	0x0b0b0b07
 8010cf0:	0b0b0b39 	.word	0x0b0b0b39
 8010cf4:	0b0b0b34 	.word	0x0b0b0b34
 8010cf8:	2f          	.byte	0x2f
 8010cf9:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010cfa:	68da      	ldr	r2, [r3, #12]
 8010cfc:	f042 0202 	orr.w	r2, r2, #2
 8010d00:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010d02:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010d04:	4c18      	ldr	r4, [pc, #96]	; (8010d68 <HAL_TIM_OC_Start_IT+0x88>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010d06:	f001 021f 	and.w	r2, r1, #31
 8010d0a:	2101      	movs	r1, #1
 8010d0c:	4091      	lsls	r1, r2
  TIMx->CCER &= ~tmp;
 8010d0e:	ea20 0001 	bic.w	r0, r0, r1
 8010d12:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d14:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010d16:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d18:	ea41 0102 	orr.w	r1, r1, r2
 8010d1c:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010d1e:	d00f      	beq.n	8010d40 <HAL_TIM_OC_Start_IT+0x60>
 8010d20:	4a12      	ldr	r2, [pc, #72]	; (8010d6c <HAL_TIM_OC_Start_IT+0x8c>)
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d00c      	beq.n	8010d40 <HAL_TIM_OC_Start_IT+0x60>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010d26:	689a      	ldr	r2, [r3, #8]
 8010d28:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d2c:	2a06      	cmp	r2, #6
 8010d2e:	d003      	beq.n	8010d38 <HAL_TIM_OC_Start_IT+0x58>
    __HAL_TIM_ENABLE(htim);
 8010d30:	681a      	ldr	r2, [r3, #0]
 8010d32:	f042 0201 	orr.w	r2, r2, #1
 8010d36:	601a      	str	r2, [r3, #0]
}
 8010d38:	2000      	movs	r0, #0
 8010d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d3e:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8010d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010d46:	645a      	str	r2, [r3, #68]	; 0x44
 8010d48:	e7ed      	b.n	8010d26 <HAL_TIM_OC_Start_IT+0x46>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010d4a:	68da      	ldr	r2, [r3, #12]
 8010d4c:	f042 0210 	orr.w	r2, r2, #16
 8010d50:	60da      	str	r2, [r3, #12]
      break;
 8010d52:	e7d6      	b.n	8010d02 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010d54:	68da      	ldr	r2, [r3, #12]
 8010d56:	f042 0208 	orr.w	r2, r2, #8
 8010d5a:	60da      	str	r2, [r3, #12]
      break;
 8010d5c:	e7d1      	b.n	8010d02 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010d5e:	68da      	ldr	r2, [r3, #12]
 8010d60:	f042 0204 	orr.w	r2, r2, #4
 8010d64:	60da      	str	r2, [r3, #12]
      break;
 8010d66:	e7cc      	b.n	8010d02 <HAL_TIM_OC_Start_IT+0x22>
 8010d68:	40010000 	.word	0x40010000
 8010d6c:	40010400 	.word	0x40010400

08010d70 <HAL_TIM_OC_Stop_IT>:
{
 8010d70:	b410      	push	{r4}
 8010d72:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010d74:	290c      	cmp	r1, #12
 8010d76:	d80c      	bhi.n	8010d92 <HAL_TIM_OC_Stop_IT+0x22>
 8010d78:	e8df f001 	tbb	[pc, r1]
 8010d7c:	0b0b0b07 	.word	0x0b0b0b07
 8010d80:	0b0b0b47 	.word	0x0b0b0b47
 8010d84:	0b0b0b42 	.word	0x0b0b0b42
 8010d88:	3d          	.byte	0x3d
 8010d89:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010d8a:	68da      	ldr	r2, [r3, #12]
 8010d8c:	f022 0202 	bic.w	r2, r2, #2
 8010d90:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8010d92:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010d94:	4c1f      	ldr	r4, [pc, #124]	; (8010e14 <HAL_TIM_OC_Stop_IT+0xa4>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010d96:	f001 011f 	and.w	r1, r1, #31
 8010d9a:	2001      	movs	r0, #1
 8010d9c:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 8010da0:	ea22 0101 	bic.w	r1, r2, r1
 8010da4:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010da6:	6a1a      	ldr	r2, [r3, #32]
 8010da8:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010daa:	42a3      	cmp	r3, r4
 8010dac:	d014      	beq.n	8010dd8 <HAL_TIM_OC_Stop_IT+0x68>
 8010dae:	4a1a      	ldr	r2, [pc, #104]	; (8010e18 <HAL_TIM_OC_Stop_IT+0xa8>)
 8010db0:	4293      	cmp	r3, r2
 8010db2:	d011      	beq.n	8010dd8 <HAL_TIM_OC_Stop_IT+0x68>
  __HAL_TIM_DISABLE(htim);
 8010db4:	6a19      	ldr	r1, [r3, #32]
 8010db6:	f241 1211 	movw	r2, #4369	; 0x1111
 8010dba:	4211      	tst	r1, r2
 8010dbc:	d108      	bne.n	8010dd0 <HAL_TIM_OC_Stop_IT+0x60>
 8010dbe:	6a19      	ldr	r1, [r3, #32]
 8010dc0:	f240 4244 	movw	r2, #1092	; 0x444
 8010dc4:	4211      	tst	r1, r2
 8010dc6:	d103      	bne.n	8010dd0 <HAL_TIM_OC_Stop_IT+0x60>
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	f022 0201 	bic.w	r2, r2, #1
 8010dce:	601a      	str	r2, [r3, #0]
}
 8010dd0:	2000      	movs	r0, #0
 8010dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dd6:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8010dd8:	6a19      	ldr	r1, [r3, #32]
 8010dda:	f241 1211 	movw	r2, #4369	; 0x1111
 8010dde:	4211      	tst	r1, r2
 8010de0:	d1e8      	bne.n	8010db4 <HAL_TIM_OC_Stop_IT+0x44>
 8010de2:	6a19      	ldr	r1, [r3, #32]
 8010de4:	f240 4244 	movw	r2, #1092	; 0x444
 8010de8:	4211      	tst	r1, r2
 8010dea:	d1e3      	bne.n	8010db4 <HAL_TIM_OC_Stop_IT+0x44>
 8010dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010df2:	645a      	str	r2, [r3, #68]	; 0x44
 8010df4:	e7de      	b.n	8010db4 <HAL_TIM_OC_Stop_IT+0x44>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010df6:	68da      	ldr	r2, [r3, #12]
 8010df8:	f022 0210 	bic.w	r2, r2, #16
 8010dfc:	60da      	str	r2, [r3, #12]
      break;
 8010dfe:	e7c8      	b.n	8010d92 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010e00:	68da      	ldr	r2, [r3, #12]
 8010e02:	f022 0208 	bic.w	r2, r2, #8
 8010e06:	60da      	str	r2, [r3, #12]
      break;
 8010e08:	e7c3      	b.n	8010d92 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010e0a:	68da      	ldr	r2, [r3, #12]
 8010e0c:	f022 0204 	bic.w	r2, r2, #4
 8010e10:	60da      	str	r2, [r3, #12]
      break;
 8010e12:	e7be      	b.n	8010d92 <HAL_TIM_OC_Stop_IT+0x22>
 8010e14:	40010000 	.word	0x40010000
 8010e18:	40010400 	.word	0x40010400

08010e1c <HAL_TIM_PWM_MspInit>:
 8010e1c:	4770      	bx	lr
 8010e1e:	bf00      	nop

08010e20 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8010e20:	2800      	cmp	r0, #0
 8010e22:	d05c      	beq.n	8010ede <HAL_TIM_PWM_Init+0xbe>
{
 8010e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8010e26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010e30:	b3bb      	cbz	r3, 8010ea2 <HAL_TIM_PWM_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010e32:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010e34:	4e3a      	ldr	r6, [pc, #232]	; (8010f20 <HAL_TIM_PWM_Init+0x100>)
 8010e36:	69a5      	ldr	r5, [r4, #24]
 8010e38:	68e0      	ldr	r0, [r4, #12]
 8010e3a:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8010e3c:	2302      	movs	r3, #2
 8010e3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010e42:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8010e44:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010e46:	d04c      	beq.n	8010ee2 <HAL_TIM_PWM_Init+0xc2>
 8010e48:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8010e4c:	d058      	beq.n	8010f00 <HAL_TIM_PWM_Init+0xe0>
 8010e4e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8010e52:	42b2      	cmp	r2, r6
 8010e54:	d02a      	beq.n	8010eac <HAL_TIM_PWM_Init+0x8c>
 8010e56:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010e5a:	42b2      	cmp	r2, r6
 8010e5c:	d026      	beq.n	8010eac <HAL_TIM_PWM_Init+0x8c>
 8010e5e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010e62:	42b2      	cmp	r2, r6
 8010e64:	d022      	beq.n	8010eac <HAL_TIM_PWM_Init+0x8c>
 8010e66:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8010e6a:	42b2      	cmp	r2, r6
 8010e6c:	d01e      	beq.n	8010eac <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010e6e:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8010e72:	42b2      	cmp	r2, r6
 8010e74:	d013      	beq.n	8010e9e <HAL_TIM_PWM_Init+0x7e>
 8010e76:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010e7a:	42b2      	cmp	r2, r6
 8010e7c:	d00f      	beq.n	8010e9e <HAL_TIM_PWM_Init+0x7e>
 8010e7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010e82:	42b2      	cmp	r2, r6
 8010e84:	d00b      	beq.n	8010e9e <HAL_TIM_PWM_Init+0x7e>
 8010e86:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8010e8a:	42b2      	cmp	r2, r6
 8010e8c:	d007      	beq.n	8010e9e <HAL_TIM_PWM_Init+0x7e>
 8010e8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010e92:	42b2      	cmp	r2, r6
 8010e94:	d003      	beq.n	8010e9e <HAL_TIM_PWM_Init+0x7e>
 8010e96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010e9a:	42b2      	cmp	r2, r6
 8010e9c:	d138      	bne.n	8010f10 <HAL_TIM_PWM_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010e9e:	6926      	ldr	r6, [r4, #16]
 8010ea0:	e033      	b.n	8010f0a <HAL_TIM_PWM_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 8010ea2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8010ea6:	f7ff ffb9 	bl	8010e1c <HAL_TIM_PWM_MspInit>
 8010eaa:	e7c2      	b.n	8010e32 <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8010eac:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010eae:	4f1d      	ldr	r7, [pc, #116]	; (8010f24 <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010eb4:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010eb6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8010eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ebc:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ec2:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ec4:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8010ec6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010ec8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010eca:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ecc:	d101      	bne.n	8010ed2 <HAL_TIM_PWM_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 8010ece:	6963      	ldr	r3, [r4, #20]
 8010ed0:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8010ed6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8010ed8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8010ede:	2001      	movs	r0, #1
}
 8010ee0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8010ee2:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ee4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010eea:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8010eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ef0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ef6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010ef8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010efa:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010efc:	6291      	str	r1, [r2, #40]	; 0x28
 8010efe:	e7e6      	b.n	8010ece <HAL_TIM_PWM_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8010f00:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f02:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010f08:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f0e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f14:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010f16:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f18:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010f1a:	6291      	str	r1, [r2, #40]	; 0x28
 8010f1c:	e7d9      	b.n	8010ed2 <HAL_TIM_PWM_Init+0xb2>
 8010f1e:	bf00      	nop
 8010f20:	40010000 	.word	0x40010000
 8010f24:	40010400 	.word	0x40010400

08010f28 <HAL_TIM_PWM_Start>:
 8010f28:	6803      	ldr	r3, [r0, #0]
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	6a18      	ldr	r0, [r3, #32]
 8010f2e:	f001 011f 	and.w	r1, r1, #31
 8010f32:	fa02 f101 	lsl.w	r1, r2, r1
 8010f36:	ea20 0001 	bic.w	r0, r0, r1
 8010f3a:	b410      	push	{r4}
 8010f3c:	6218      	str	r0, [r3, #32]
 8010f3e:	6a1a      	ldr	r2, [r3, #32]
 8010f40:	4c0c      	ldr	r4, [pc, #48]	; (8010f74 <HAL_TIM_PWM_Start+0x4c>)
 8010f42:	4311      	orrs	r1, r2
 8010f44:	42a3      	cmp	r3, r4
 8010f46:	6219      	str	r1, [r3, #32]
 8010f48:	d00f      	beq.n	8010f6a <HAL_TIM_PWM_Start+0x42>
 8010f4a:	4a0b      	ldr	r2, [pc, #44]	; (8010f78 <HAL_TIM_PWM_Start+0x50>)
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d00c      	beq.n	8010f6a <HAL_TIM_PWM_Start+0x42>
 8010f50:	689a      	ldr	r2, [r3, #8]
 8010f52:	f002 0207 	and.w	r2, r2, #7
 8010f56:	2a06      	cmp	r2, #6
 8010f58:	d003      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x3a>
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	f042 0201 	orr.w	r2, r2, #1
 8010f60:	601a      	str	r2, [r3, #0]
 8010f62:	2000      	movs	r0, #0
 8010f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f68:	4770      	bx	lr
 8010f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010f70:	645a      	str	r2, [r3, #68]	; 0x44
 8010f72:	e7ed      	b.n	8010f50 <HAL_TIM_PWM_Start+0x28>
 8010f74:	40010000 	.word	0x40010000
 8010f78:	40010400 	.word	0x40010400

08010f7c <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010f7c:	6803      	ldr	r3, [r0, #0]
{
 8010f7e:	b430      	push	{r4, r5}
  TIMx->CCER &= ~tmp;
 8010f80:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010f82:	4c19      	ldr	r4, [pc, #100]	; (8010fe8 <HAL_TIM_PWM_Stop+0x6c>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010f84:	f001 051f 	and.w	r5, r1, #31
 8010f88:	2101      	movs	r1, #1
 8010f8a:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 8010f8c:	ea22 0101 	bic.w	r1, r2, r1
 8010f90:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010f92:	6a1a      	ldr	r2, [r3, #32]
 8010f94:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010f96:	42a3      	cmp	r3, r4
 8010f98:	d016      	beq.n	8010fc8 <HAL_TIM_PWM_Stop+0x4c>
 8010f9a:	4a14      	ldr	r2, [pc, #80]	; (8010fec <HAL_TIM_PWM_Stop+0x70>)
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	d013      	beq.n	8010fc8 <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8010fa0:	6a19      	ldr	r1, [r3, #32]
 8010fa2:	f241 1211 	movw	r2, #4369	; 0x1111
 8010fa6:	4211      	tst	r1, r2
 8010fa8:	d108      	bne.n	8010fbc <HAL_TIM_PWM_Stop+0x40>
 8010faa:	6a19      	ldr	r1, [r3, #32]
 8010fac:	f240 4244 	movw	r2, #1092	; 0x444
 8010fb0:	4211      	tst	r1, r2
 8010fb2:	d103      	bne.n	8010fbc <HAL_TIM_PWM_Stop+0x40>
 8010fb4:	681a      	ldr	r2, [r3, #0]
 8010fb6:	f022 0201 	bic.w	r2, r2, #1
 8010fba:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8010fc2:	bc30      	pop	{r4, r5}
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8010fc8:	6a19      	ldr	r1, [r3, #32]
 8010fca:	f241 1211 	movw	r2, #4369	; 0x1111
 8010fce:	4211      	tst	r1, r2
 8010fd0:	d1e6      	bne.n	8010fa0 <HAL_TIM_PWM_Stop+0x24>
 8010fd2:	6a19      	ldr	r1, [r3, #32]
 8010fd4:	f240 4244 	movw	r2, #1092	; 0x444
 8010fd8:	4211      	tst	r1, r2
 8010fda:	d1e1      	bne.n	8010fa0 <HAL_TIM_PWM_Stop+0x24>
 8010fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010fde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010fe2:	645a      	str	r2, [r3, #68]	; 0x44
 8010fe4:	e7dc      	b.n	8010fa0 <HAL_TIM_PWM_Stop+0x24>
 8010fe6:	bf00      	nop
 8010fe8:	40010000 	.word	0x40010000
 8010fec:	40010400 	.word	0x40010400

08010ff0 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8010ff0:	2800      	cmp	r0, #0
 8010ff2:	f000 8096 	beq.w	8011122 <HAL_TIM_Encoder_Init+0x132>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010ff6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8010ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8010ffe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011002:	4604      	mov	r4, r0
 8011004:	460d      	mov	r5, r1
 8011006:	2b00      	cmp	r3, #0
 8011008:	d03f      	beq.n	801108a <HAL_TIM_Encoder_Init+0x9a>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801100a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801100c:	4e56      	ldr	r6, [pc, #344]	; (8011168 <HAL_TIM_Encoder_Init+0x178>)
 801100e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8011012:	68e0      	ldr	r0, [r4, #12]
 8011014:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8011016:	2202      	movs	r2, #2
 8011018:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801101c:	689a      	ldr	r2, [r3, #8]
 801101e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011022:	f022 0207 	bic.w	r2, r2, #7
 8011026:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011028:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 801102a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801102c:	d07b      	beq.n	8011126 <HAL_TIM_Encoder_Init+0x136>
 801102e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011032:	f000 8088 	beq.w	8011146 <HAL_TIM_Encoder_Init+0x156>
 8011036:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 801103a:	42b3      	cmp	r3, r6
 801103c:	d02a      	beq.n	8011094 <HAL_TIM_Encoder_Init+0xa4>
 801103e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011042:	42b3      	cmp	r3, r6
 8011044:	d026      	beq.n	8011094 <HAL_TIM_Encoder_Init+0xa4>
 8011046:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801104a:	42b3      	cmp	r3, r6
 801104c:	d022      	beq.n	8011094 <HAL_TIM_Encoder_Init+0xa4>
 801104e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8011052:	42b3      	cmp	r3, r6
 8011054:	d01e      	beq.n	8011094 <HAL_TIM_Encoder_Init+0xa4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011056:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 801105a:	42b3      	cmp	r3, r6
 801105c:	d013      	beq.n	8011086 <HAL_TIM_Encoder_Init+0x96>
 801105e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011062:	42b3      	cmp	r3, r6
 8011064:	d00f      	beq.n	8011086 <HAL_TIM_Encoder_Init+0x96>
 8011066:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801106a:	42b3      	cmp	r3, r6
 801106c:	d00b      	beq.n	8011086 <HAL_TIM_Encoder_Init+0x96>
 801106e:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8011072:	42b3      	cmp	r3, r6
 8011074:	d007      	beq.n	8011086 <HAL_TIM_Encoder_Init+0x96>
 8011076:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801107a:	42b3      	cmp	r3, r6
 801107c:	d003      	beq.n	8011086 <HAL_TIM_Encoder_Init+0x96>
 801107e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011082:	42b3      	cmp	r3, r6
 8011084:	d167      	bne.n	8011156 <HAL_TIM_Encoder_Init+0x166>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011086:	6926      	ldr	r6, [r4, #16]
 8011088:	e062      	b.n	8011150 <HAL_TIM_Encoder_Init+0x160>
    htim->Lock = HAL_UNLOCKED;
 801108a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 801108e:	f7fc fb93 	bl	800d7b8 <HAL_TIM_Encoder_MspInit>
 8011092:	e7ba      	b.n	801100a <HAL_TIM_Encoder_Init+0x1a>
    tmpcr1 |= Structure->CounterMode;
 8011094:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011096:	4f35      	ldr	r7, [pc, #212]	; (801116c <HAL_TIM_Encoder_Init+0x17c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011098:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801109c:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801109e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80110a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80110a4:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80110a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80110aa:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80110ae:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 80110b0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80110b2:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80110b4:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80110b6:	d101      	bne.n	80110bc <HAL_TIM_Encoder_Init+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 80110b8:	6962      	ldr	r2, [r4, #20]
 80110ba:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80110bc:	f04f 0c01 	mov.w	ip, #1
 80110c0:	f8c3 c014 	str.w	ip, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 80110c4:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80110c6:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80110c8:	69af      	ldr	r7, [r5, #24]
 80110ca:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80110cc:	692a      	ldr	r2, [r5, #16]
  tmpsmcr |= sConfig->EncoderMode;
 80110ce:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80110d2:	f426 7840 	bic.w	r8, r6, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80110d6:	69ee      	ldr	r6, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80110d8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80110dc:	0112      	lsls	r2, r2, #4
 80110de:	68ef      	ldr	r7, [r5, #12]
 80110e0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 80110e4:	433a      	orrs	r2, r7
 80110e6:	6a2f      	ldr	r7, [r5, #32]
  tmpccer = htim->Instance->CCER;
 80110e8:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80110ea:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80110ee:	ea41 0108 	orr.w	r1, r1, r8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80110f2:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80110f6:	696f      	ldr	r7, [r5, #20]
 80110f8:	686d      	ldr	r5, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80110fa:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
 80110fe:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011102:	f026 06aa 	bic.w	r6, r6, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011106:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 801110a:	ea40 000e 	orr.w	r0, r0, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801110e:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011110:	4335      	orrs	r5, r6
  htim->Instance->SMCR = tmpsmcr;
 8011112:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8011114:	619a      	str	r2, [r3, #24]
  return HAL_OK;
 8011116:	2000      	movs	r0, #0
  htim->Instance->CCER = tmpccer;
 8011118:	621d      	str	r5, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 801111a:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
}
 801111e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8011122:	2001      	movs	r0, #1
}
 8011124:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8011126:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011128:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801112a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801112e:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8011130:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011134:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801113a:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 801113e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011140:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011142:	6299      	str	r1, [r3, #40]	; 0x28
 8011144:	e7b8      	b.n	80110b8 <HAL_TIM_Encoder_Init+0xc8>
    tmpcr1 |= Structure->CounterMode;
 8011146:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011148:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801114a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801114e:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8011150:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011154:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801115a:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 801115e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011160:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8011162:	6299      	str	r1, [r3, #40]	; 0x28
 8011164:	e7aa      	b.n	80110bc <HAL_TIM_Encoder_Init+0xcc>
 8011166:	bf00      	nop
 8011168:	40010000 	.word	0x40010000
 801116c:	40010400 	.word	0x40010400

08011170 <HAL_TIM_Encoder_Start>:
{
 8011170:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8011172:	b1c1      	cbz	r1, 80111a6 <HAL_TIM_Encoder_Start+0x36>
 8011174:	2904      	cmp	r1, #4
 8011176:	d10d      	bne.n	8011194 <HAL_TIM_Encoder_Start+0x24>
  TIMx->CCER &= ~tmp;
 8011178:	6a1a      	ldr	r2, [r3, #32]
 801117a:	f022 0210 	bic.w	r2, r2, #16
 801117e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011180:	6a1a      	ldr	r2, [r3, #32]
 8011182:	f042 0210 	orr.w	r2, r2, #16
 8011186:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8011188:	681a      	ldr	r2, [r3, #0]
 801118a:	f042 0201 	orr.w	r2, r2, #1
 801118e:	601a      	str	r2, [r3, #0]
}
 8011190:	2000      	movs	r0, #0
 8011192:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 8011194:	6a1a      	ldr	r2, [r3, #32]
 8011196:	f022 0201 	bic.w	r2, r2, #1
 801119a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801119c:	6a1a      	ldr	r2, [r3, #32]
 801119e:	f042 0201 	orr.w	r2, r2, #1
 80111a2:	621a      	str	r2, [r3, #32]
 80111a4:	e7e8      	b.n	8011178 <HAL_TIM_Encoder_Start+0x8>
  TIMx->CCER &= ~tmp;
 80111a6:	6a1a      	ldr	r2, [r3, #32]
 80111a8:	f022 0201 	bic.w	r2, r2, #1
 80111ac:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80111ae:	6a1a      	ldr	r2, [r3, #32]
 80111b0:	f042 0201 	orr.w	r2, r2, #1
 80111b4:	621a      	str	r2, [r3, #32]
 80111b6:	e7e7      	b.n	8011188 <HAL_TIM_Encoder_Start+0x18>

080111b8 <HAL_TIM_Encoder_Stop>:
{
 80111b8:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 80111ba:	b1f1      	cbz	r1, 80111fa <HAL_TIM_Encoder_Stop+0x42>
 80111bc:	2904      	cmp	r1, #4
 80111be:	d115      	bne.n	80111ec <HAL_TIM_Encoder_Stop+0x34>
  TIMx->CCER &= ~tmp;
 80111c0:	6a1a      	ldr	r2, [r3, #32]
 80111c2:	f022 0210 	bic.w	r2, r2, #16
 80111c6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80111c8:	6a1a      	ldr	r2, [r3, #32]
 80111ca:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 80111cc:	6a19      	ldr	r1, [r3, #32]
 80111ce:	f241 1211 	movw	r2, #4369	; 0x1111
 80111d2:	4211      	tst	r1, r2
 80111d4:	d108      	bne.n	80111e8 <HAL_TIM_Encoder_Stop+0x30>
 80111d6:	6a19      	ldr	r1, [r3, #32]
 80111d8:	f240 4244 	movw	r2, #1092	; 0x444
 80111dc:	4211      	tst	r1, r2
 80111de:	d103      	bne.n	80111e8 <HAL_TIM_Encoder_Stop+0x30>
 80111e0:	681a      	ldr	r2, [r3, #0]
 80111e2:	f022 0201 	bic.w	r2, r2, #1
 80111e6:	601a      	str	r2, [r3, #0]
}
 80111e8:	2000      	movs	r0, #0
 80111ea:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 80111ec:	6a1a      	ldr	r2, [r3, #32]
 80111ee:	f022 0201 	bic.w	r2, r2, #1
 80111f2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80111f4:	6a1a      	ldr	r2, [r3, #32]
 80111f6:	621a      	str	r2, [r3, #32]
 80111f8:	e7e2      	b.n	80111c0 <HAL_TIM_Encoder_Stop+0x8>
  TIMx->CCER &= ~tmp;
 80111fa:	6a1a      	ldr	r2, [r3, #32]
 80111fc:	f022 0201 	bic.w	r2, r2, #1
 8011200:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011202:	6a1a      	ldr	r2, [r3, #32]
 8011204:	621a      	str	r2, [r3, #32]
 8011206:	e7e1      	b.n	80111cc <HAL_TIM_Encoder_Stop+0x14>

08011208 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8011208:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801120c:	2b01      	cmp	r3, #1
 801120e:	f000 809a 	beq.w	8011346 <HAL_TIM_OC_ConfigChannel+0x13e>
{
 8011212:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8011214:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8011216:	2401      	movs	r4, #1
 8011218:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 801121c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8011220:	2a0c      	cmp	r2, #12
 8011222:	d829      	bhi.n	8011278 <HAL_TIM_OC_ConfigChannel+0x70>
 8011224:	e8df f002 	tbb	[pc, r2]
 8011228:	28282807 	.word	0x28282807
 801122c:	28282851 	.word	0x28282851
 8011230:	28282870 	.word	0x28282870
 8011234:	31          	.byte	0x31
 8011235:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011236:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8011238:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801123c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 801123e:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011240:	4e5b      	ldr	r6, [pc, #364]	; (80113b0 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011242:	f025 0501 	bic.w	r5, r5, #1
 8011246:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8011248:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 801124a:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 801124c:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 801124e:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011252:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011256:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8011258:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 801125c:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011260:	f000 8089 	beq.w	8011376 <HAL_TIM_OC_ConfigChannel+0x16e>
 8011264:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011268:	42b3      	cmp	r3, r6
 801126a:	f000 8084 	beq.w	8011376 <HAL_TIM_OC_ConfigChannel+0x16e>
  TIMx->CCR1 = OC_Config->Pulse;
 801126e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8011270:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8011272:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8011274:	6359      	str	r1, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8011276:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8011278:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 801127a:	2201      	movs	r2, #1
 801127c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011280:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8011284:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8011286:	4618      	mov	r0, r3
}
 8011288:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801128a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801128c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011290:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011292:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011294:	4e46      	ldr	r6, [pc, #280]	; (80113b0 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011296:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 801129a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 801129c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 801129e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80112a0:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80112a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80112a6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112aa:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80112ac:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80112b0:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112b4:	d049      	beq.n	801134a <HAL_TIM_OC_ConfigChannel+0x142>
 80112b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80112ba:	42b3      	cmp	r3, r6
 80112bc:	d045      	beq.n	801134a <HAL_TIM_OC_ConfigChannel+0x142>
  TIMx->CCR4 = OC_Config->Pulse;
 80112be:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80112c0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80112c2:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80112c4:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80112c6:	621a      	str	r2, [r3, #32]
 80112c8:	e7d6      	b.n	8011278 <HAL_TIM_OC_ConfigChannel+0x70>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80112ca:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80112cc:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80112ce:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80112d0:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80112d2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80113b0 <HAL_TIM_OC_ConfigChannel+0x1a8>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80112d6:	f025 0510 	bic.w	r5, r5, #16
 80112da:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80112dc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80112de:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80112e0:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80112e2:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80112e6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80112ea:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80112ec:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80112f0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80112f4:	d04c      	beq.n	8011390 <HAL_TIM_OC_ConfigChannel+0x188>
 80112f6:	4f2f      	ldr	r7, [pc, #188]	; (80113b4 <HAL_TIM_OC_ConfigChannel+0x1ac>)
 80112f8:	42bb      	cmp	r3, r7
 80112fa:	d049      	beq.n	8011390 <HAL_TIM_OC_ConfigChannel+0x188>
  TIMx->CCR2 = OC_Config->Pulse;
 80112fc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80112fe:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8011300:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8011302:	6399      	str	r1, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8011304:	621a      	str	r2, [r3, #32]
 8011306:	e7b7      	b.n	8011278 <HAL_TIM_OC_ConfigChannel+0x70>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011308:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801130a:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801130c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 801130e:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011310:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80113b0 <HAL_TIM_OC_ConfigChannel+0x1a8>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011314:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8011318:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 801131a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 801131c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 801131e:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8011320:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011324:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011328:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801132a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 801132e:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011332:	d010      	beq.n	8011356 <HAL_TIM_OC_ConfigChannel+0x14e>
 8011334:	4f1f      	ldr	r7, [pc, #124]	; (80113b4 <HAL_TIM_OC_ConfigChannel+0x1ac>)
 8011336:	42bb      	cmp	r3, r7
 8011338:	d00d      	beq.n	8011356 <HAL_TIM_OC_ConfigChannel+0x14e>
  TIMx->CCR3 = OC_Config->Pulse;
 801133a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 801133c:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 801133e:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8011340:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8011342:	621a      	str	r2, [r3, #32]
 8011344:	e798      	b.n	8011278 <HAL_TIM_OC_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 8011346:	2002      	movs	r0, #2
}
 8011348:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801134a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 801134c:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011350:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8011354:	e7b3      	b.n	80112be <HAL_TIM_OC_ConfigChannel+0xb6>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011356:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8011358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801135c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011360:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011364:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011368:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 801136c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011370:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 8011374:	e7e1      	b.n	801133a <HAL_TIM_OC_ConfigChannel+0x132>
    tmpccer |= OC_Config->OCNPolarity;
 8011376:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8011378:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 801137c:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 801137e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011382:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8011386:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8011388:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 801138c:	4335      	orrs	r5, r6
 801138e:	e76e      	b.n	801126e <HAL_TIM_OC_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011390:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8011392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011396:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801139a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801139e:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80113a2:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80113a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80113aa:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 80113ae:	e7a5      	b.n	80112fc <HAL_TIM_OC_ConfigChannel+0xf4>
 80113b0:	40010000 	.word	0x40010000
 80113b4:	40010400 	.word	0x40010400

080113b8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80113b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80113bc:	2b01      	cmp	r3, #1
 80113be:	f000 80cc 	beq.w	801155a <HAL_TIM_PWM_ConfigChannel+0x1a2>
{
 80113c2:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80113c4:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80113c6:	2401      	movs	r4, #1
 80113c8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80113cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80113d0:	2a0c      	cmp	r2, #12
 80113d2:	d835      	bhi.n	8011440 <HAL_TIM_PWM_ConfigChannel+0x88>
 80113d4:	e8df f002 	tbb	[pc, r2]
 80113d8:	34343407 	.word	0x34343407
 80113dc:	3434346a 	.word	0x3434346a
 80113e0:	34343496 	.word	0x34343496
 80113e4:	3d          	.byte	0x3d
 80113e5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80113e6:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 80113e8:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80113ec:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80113ee:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80113f0:	4e74      	ldr	r6, [pc, #464]	; (80115c4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80113f2:	f025 0501 	bic.w	r5, r5, #1
 80113f6:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80113f8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80113fa:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80113fc:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80113fe:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011402:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011406:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8011408:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 801140c:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011410:	f000 80bb 	beq.w	801158a <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8011414:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011418:	42b3      	cmp	r3, r6
 801141a:	f000 80b6 	beq.w	801158a <HAL_TIM_PWM_ConfigChannel+0x1d2>
  TIMx->CCR1 = OC_Config->Pulse;
 801141e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8011420:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8011422:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8011424:	635e      	str	r6, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8011426:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011428:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801142a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801142c:	f044 0408 	orr.w	r4, r4, #8
 8011430:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011432:	6999      	ldr	r1, [r3, #24]
 8011434:	f021 0104 	bic.w	r1, r1, #4
 8011438:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801143a:	699a      	ldr	r2, [r3, #24]
 801143c:	432a      	orrs	r2, r5
 801143e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8011440:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8011442:	2201      	movs	r2, #1
 8011444:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011448:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 801144c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 801144e:	4618      	mov	r0, r3
}
 8011450:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011452:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011454:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011458:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801145a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801145c:	4e59      	ldr	r6, [pc, #356]	; (80115c4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801145e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8011462:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8011464:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8011466:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8011468:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 801146a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801146e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011472:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011474:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011478:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801147c:	d06f      	beq.n	801155e <HAL_TIM_PWM_ConfigChannel+0x1a6>
 801147e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011482:	42b3      	cmp	r3, r6
 8011484:	d06b      	beq.n	801155e <HAL_TIM_PWM_ConfigChannel+0x1a6>
  TIMx->CCR4 = OC_Config->Pulse;
 8011486:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8011488:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 801148a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 801148c:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 801148e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011490:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011492:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011494:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8011498:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801149a:	69d9      	ldr	r1, [r3, #28]
 801149c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80114a0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80114a2:	69da      	ldr	r2, [r3, #28]
 80114a4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80114a8:	61da      	str	r2, [r3, #28]
      break;
 80114aa:	e7c9      	b.n	8011440 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80114ac:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80114ae:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80114b0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80114b2:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80114b4:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80115c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80114b8:	f025 0510 	bic.w	r5, r5, #16
 80114bc:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80114be:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80114c0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80114c2:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80114c4:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80114c8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80114cc:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80114ce:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80114d2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80114d6:	d065      	beq.n	80115a4 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 80114d8:	4f3b      	ldr	r7, [pc, #236]	; (80115c8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80114da:	42bb      	cmp	r3, r7
 80114dc:	d062      	beq.n	80115a4 <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CCR2 = OC_Config->Pulse;
 80114de:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80114e0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80114e2:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80114e4:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80114e6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80114e8:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80114ea:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80114ec:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80114f0:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80114f2:	6999      	ldr	r1, [r3, #24]
 80114f4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80114f8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80114fa:	699a      	ldr	r2, [r3, #24]
 80114fc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8011500:	619a      	str	r2, [r3, #24]
      break;
 8011502:	e79d      	b.n	8011440 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011504:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011506:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011508:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 801150a:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801150c:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80115c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011510:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8011514:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8011516:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8011518:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 801151a:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 801151c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011520:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011524:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011526:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 801152a:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801152e:	d01c      	beq.n	801156a <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8011530:	4f25      	ldr	r7, [pc, #148]	; (80115c8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8011532:	42bb      	cmp	r3, r7
 8011534:	d019      	beq.n	801156a <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 8011536:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8011538:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 801153a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 801153c:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 801153e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011540:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011542:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011544:	f044 0408 	orr.w	r4, r4, #8
 8011548:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801154a:	69d9      	ldr	r1, [r3, #28]
 801154c:	f021 0104 	bic.w	r1, r1, #4
 8011550:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011552:	69da      	ldr	r2, [r3, #28]
 8011554:	432a      	orrs	r2, r5
 8011556:	61da      	str	r2, [r3, #28]
      break;
 8011558:	e772      	b.n	8011440 <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 801155a:	2002      	movs	r0, #2
}
 801155c:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801155e:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011560:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011564:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8011568:	e78d      	b.n	8011486 <HAL_TIM_PWM_ConfigChannel+0xce>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801156a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 801156c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011570:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011574:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011578:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801157c:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8011580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011584:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 8011588:	e7d5      	b.n	8011536 <HAL_TIM_PWM_ConfigChannel+0x17e>
    tmpccer |= OC_Config->OCNPolarity;
 801158a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 801158c:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8011590:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8011592:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011596:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 801159a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 801159c:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80115a0:	4335      	orrs	r5, r6
 80115a2:	e73c      	b.n	801141e <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80115a4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80115a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80115aa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80115ae:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80115b2:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80115b6:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80115ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80115be:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 80115c2:	e78c      	b.n	80114de <HAL_TIM_PWM_ConfigChannel+0x126>
 80115c4:	40010000 	.word	0x40010000
 80115c8:	40010400 	.word	0x40010400

080115cc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80115cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d05a      	beq.n	801168a <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 80115d4:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80115d6:	6803      	ldr	r3, [r0, #0]
{
 80115d8:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80115da:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80115de:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80115e0:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80115e2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80115e6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 80115ea:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 80115ec:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 80115ee:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80115f2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80115f4:	d074      	beq.n	80116e0 <HAL_TIM_ConfigClockSource+0x114>
 80115f6:	d94a      	bls.n	801168e <HAL_TIM_ConfigClockSource+0xc2>
 80115f8:	2c60      	cmp	r4, #96	; 0x60
 80115fa:	d02d      	beq.n	8011658 <HAL_TIM_ConfigClockSource+0x8c>
 80115fc:	d956      	bls.n	80116ac <HAL_TIM_ConfigClockSource+0xe0>
 80115fe:	2c70      	cmp	r4, #112	; 0x70
 8011600:	d01a      	beq.n	8011638 <HAL_TIM_ConfigClockSource+0x6c>
 8011602:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8011606:	d10e      	bne.n	8011626 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011608:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 801160c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 801160e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011610:	432a      	orrs	r2, r5
 8011612:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011616:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801161a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 801161c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801161e:	689a      	ldr	r2, [r3, #8]
 8011620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011624:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8011626:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8011628:	2201      	movs	r2, #1
 801162a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801162e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8011632:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8011634:	4618      	mov	r0, r3
}
 8011636:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011638:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 801163c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 801163e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011640:	432a      	orrs	r2, r5
 8011642:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011646:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801164a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 801164c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 801164e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011650:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8011654:	609a      	str	r2, [r3, #8]
      break;
 8011656:	e7e6      	b.n	8011626 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011658:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801165a:	684d      	ldr	r5, [r1, #4]
 801165c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801165e:	f024 0410 	bic.w	r4, r4, #16
 8011662:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011664:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8011666:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011668:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801166c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8011670:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011674:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8011678:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 801167a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 801167c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801167e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011682:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8011686:	609a      	str	r2, [r3, #8]
 8011688:	e7cd      	b.n	8011626 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 801168a:	2002      	movs	r0, #2
}
 801168c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 801168e:	2c10      	cmp	r4, #16
 8011690:	d004      	beq.n	801169c <HAL_TIM_ConfigClockSource+0xd0>
 8011692:	d93d      	bls.n	8011710 <HAL_TIM_ConfigClockSource+0x144>
 8011694:	2c20      	cmp	r4, #32
 8011696:	d001      	beq.n	801169c <HAL_TIM_ConfigClockSource+0xd0>
 8011698:	2c30      	cmp	r4, #48	; 0x30
 801169a:	d1c4      	bne.n	8011626 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 801169c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801169e:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80116a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80116a6:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 80116a8:	609c      	str	r4, [r3, #8]
 80116aa:	e7bc      	b.n	8011626 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80116ac:	2c50      	cmp	r4, #80	; 0x50
 80116ae:	d1ba      	bne.n	8011626 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80116b0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80116b2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80116b4:	684c      	ldr	r4, [r1, #4]
 80116b6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80116b8:	f026 0601 	bic.w	r6, r6, #1
 80116bc:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80116be:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80116c0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80116c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80116c8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80116cc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80116ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80116d0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80116d2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80116d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80116d8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80116dc:	609a      	str	r2, [r3, #8]
 80116de:	e7a2      	b.n	8011626 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80116e0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80116e2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80116e4:	684c      	ldr	r4, [r1, #4]
 80116e6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80116e8:	f026 0601 	bic.w	r6, r6, #1
 80116ec:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80116ee:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80116f0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80116f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80116f8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80116fc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80116fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011700:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8011702:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8011704:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011708:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 801170c:	609a      	str	r2, [r3, #8]
 801170e:	e78a      	b.n	8011626 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8011710:	2c00      	cmp	r4, #0
 8011712:	d0c3      	beq.n	801169c <HAL_TIM_ConfigClockSource+0xd0>
 8011714:	e787      	b.n	8011626 <HAL_TIM_ConfigClockSource+0x5a>
 8011716:	bf00      	nop

08011718 <HAL_TIM_OC_DelayElapsedCallback>:
 8011718:	4770      	bx	lr
 801171a:	bf00      	nop

0801171c <HAL_TIM_IC_CaptureCallback>:
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop

08011720 <HAL_TIM_PWM_PulseFinishedCallback>:
 8011720:	4770      	bx	lr
 8011722:	bf00      	nop

08011724 <HAL_TIM_TriggerCallback>:
 8011724:	4770      	bx	lr
 8011726:	bf00      	nop

08011728 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011728:	6803      	ldr	r3, [r0, #0]
 801172a:	691a      	ldr	r2, [r3, #16]
 801172c:	0791      	lsls	r1, r2, #30
{
 801172e:	b510      	push	{r4, lr}
 8011730:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011732:	d502      	bpl.n	801173a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011734:	68da      	ldr	r2, [r3, #12]
 8011736:	0792      	lsls	r2, r2, #30
 8011738:	d45f      	bmi.n	80117fa <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801173a:	691a      	ldr	r2, [r3, #16]
 801173c:	0750      	lsls	r0, r2, #29
 801173e:	d502      	bpl.n	8011746 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011740:	68da      	ldr	r2, [r3, #12]
 8011742:	0751      	lsls	r1, r2, #29
 8011744:	d446      	bmi.n	80117d4 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011746:	691a      	ldr	r2, [r3, #16]
 8011748:	0712      	lsls	r2, r2, #28
 801174a:	d502      	bpl.n	8011752 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801174c:	68da      	ldr	r2, [r3, #12]
 801174e:	0710      	lsls	r0, r2, #28
 8011750:	d42e      	bmi.n	80117b0 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011752:	691a      	ldr	r2, [r3, #16]
 8011754:	06d2      	lsls	r2, r2, #27
 8011756:	d502      	bpl.n	801175e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011758:	68da      	ldr	r2, [r3, #12]
 801175a:	06d0      	lsls	r0, r2, #27
 801175c:	d418      	bmi.n	8011790 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801175e:	691a      	ldr	r2, [r3, #16]
 8011760:	07d1      	lsls	r1, r2, #31
 8011762:	d502      	bpl.n	801176a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011764:	68da      	ldr	r2, [r3, #12]
 8011766:	07d2      	lsls	r2, r2, #31
 8011768:	d45d      	bmi.n	8011826 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801176a:	691a      	ldr	r2, [r3, #16]
 801176c:	0610      	lsls	r0, r2, #24
 801176e:	d502      	bpl.n	8011776 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011770:	68da      	ldr	r2, [r3, #12]
 8011772:	0611      	lsls	r1, r2, #24
 8011774:	d45f      	bmi.n	8011836 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011776:	691a      	ldr	r2, [r3, #16]
 8011778:	0652      	lsls	r2, r2, #25
 801177a:	d502      	bpl.n	8011782 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801177c:	68da      	ldr	r2, [r3, #12]
 801177e:	0650      	lsls	r0, r2, #25
 8011780:	d461      	bmi.n	8011846 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011782:	691a      	ldr	r2, [r3, #16]
 8011784:	0691      	lsls	r1, r2, #26
 8011786:	d502      	bpl.n	801178e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011788:	68da      	ldr	r2, [r3, #12]
 801178a:	0692      	lsls	r2, r2, #26
 801178c:	d443      	bmi.n	8011816 <HAL_TIM_IRQHandler+0xee>
}
 801178e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011790:	f06f 0210 	mvn.w	r2, #16
 8011794:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011796:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011798:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801179a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801179e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80117a0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80117a2:	d064      	beq.n	801186e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80117a4:	f7ff ffba 	bl	801171c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80117a8:	2200      	movs	r2, #0
 80117aa:	6823      	ldr	r3, [r4, #0]
 80117ac:	7722      	strb	r2, [r4, #28]
 80117ae:	e7d6      	b.n	801175e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80117b0:	f06f 0208 	mvn.w	r2, #8
 80117b4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80117b6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80117b8:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80117ba:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80117bc:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80117be:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80117c0:	d152      	bne.n	8011868 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80117c2:	f7ff ffa9 	bl	8011718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80117c6:	4620      	mov	r0, r4
 80117c8:	f7ff ffaa 	bl	8011720 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80117cc:	2200      	movs	r2, #0
 80117ce:	6823      	ldr	r3, [r4, #0]
 80117d0:	7722      	strb	r2, [r4, #28]
 80117d2:	e7be      	b.n	8011752 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80117d4:	f06f 0204 	mvn.w	r2, #4
 80117d8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80117da:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80117dc:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80117de:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80117e2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80117e4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80117e6:	d13c      	bne.n	8011862 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80117e8:	f7ff ff96 	bl	8011718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80117ec:	4620      	mov	r0, r4
 80117ee:	f7ff ff97 	bl	8011720 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80117f2:	2200      	movs	r2, #0
 80117f4:	6823      	ldr	r3, [r4, #0]
 80117f6:	7722      	strb	r2, [r4, #28]
 80117f8:	e7a5      	b.n	8011746 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80117fa:	f06f 0202 	mvn.w	r2, #2
 80117fe:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011800:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011802:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011804:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011806:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011808:	d025      	beq.n	8011856 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 801180a:	f7ff ff87 	bl	801171c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801180e:	2200      	movs	r2, #0
 8011810:	6823      	ldr	r3, [r4, #0]
 8011812:	7722      	strb	r2, [r4, #28]
 8011814:	e791      	b.n	801173a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011816:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 801181a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801181c:	611a      	str	r2, [r3, #16]
}
 801181e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8011822:	f000 b919 	b.w	8011a58 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011826:	f06f 0201 	mvn.w	r2, #1
 801182a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801182c:	4620      	mov	r0, r4
 801182e:	f7f9 f8fb 	bl	800aa28 <HAL_TIM_PeriodElapsedCallback>
 8011832:	6823      	ldr	r3, [r4, #0]
 8011834:	e799      	b.n	801176a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011836:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801183a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801183c:	4620      	mov	r0, r4
 801183e:	f000 f90d 	bl	8011a5c <HAL_TIMEx_BreakCallback>
 8011842:	6823      	ldr	r3, [r4, #0]
 8011844:	e797      	b.n	8011776 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011846:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801184a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801184c:	4620      	mov	r0, r4
 801184e:	f7ff ff69 	bl	8011724 <HAL_TIM_TriggerCallback>
 8011852:	6823      	ldr	r3, [r4, #0]
 8011854:	e795      	b.n	8011782 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011856:	f7ff ff5f 	bl	8011718 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801185a:	4620      	mov	r0, r4
 801185c:	f7ff ff60 	bl	8011720 <HAL_TIM_PWM_PulseFinishedCallback>
 8011860:	e7d5      	b.n	801180e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8011862:	f7ff ff5b 	bl	801171c <HAL_TIM_IC_CaptureCallback>
 8011866:	e7c4      	b.n	80117f2 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8011868:	f7ff ff58 	bl	801171c <HAL_TIM_IC_CaptureCallback>
 801186c:	e7ae      	b.n	80117cc <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801186e:	f7ff ff53 	bl	8011718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011872:	4620      	mov	r0, r4
 8011874:	f7ff ff54 	bl	8011720 <HAL_TIM_PWM_PulseFinishedCallback>
 8011878:	e796      	b.n	80117a8 <HAL_TIM_IRQHandler+0x80>
 801187a:	bf00      	nop

0801187c <HAL_TIMEx_OCN_Start_IT>:
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801187c:	2904      	cmp	r1, #4
 801187e:	6803      	ldr	r3, [r0, #0]
 8011880:	d02a      	beq.n	80118d8 <HAL_TIMEx_OCN_Start_IT+0x5c>
 8011882:	2908      	cmp	r1, #8
 8011884:	d023      	beq.n	80118ce <HAL_TIMEx_OCN_Start_IT+0x52>
 8011886:	b1e9      	cbz	r1, 80118c4 <HAL_TIMEx_OCN_Start_IT+0x48>
    default:
      break;
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8011888:	68da      	ldr	r2, [r3, #12]
 801188a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801188e:	60da      	str	r2, [r3, #12]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8011890:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011892:	f001 021f 	and.w	r2, r1, #31
 8011896:	2104      	movs	r1, #4
 8011898:	4091      	lsls	r1, r2
  TIMx->CCER &=  ~tmp;
 801189a:	ea20 0001 	bic.w	r0, r0, r1
 801189e:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80118a0:	6a1a      	ldr	r2, [r3, #32]
 80118a2:	4311      	orrs	r1, r2
 80118a4:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 80118a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80118ac:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80118ae:	689a      	ldr	r2, [r3, #8]
 80118b0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80118b4:	2a06      	cmp	r2, #6
 80118b6:	d003      	beq.n	80118c0 <HAL_TIMEx_OCN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	f042 0201 	orr.w	r2, r2, #1
 80118be:	601a      	str	r2, [r3, #0]
}
 80118c0:	2000      	movs	r0, #0
 80118c2:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80118c4:	68da      	ldr	r2, [r3, #12]
 80118c6:	f042 0202 	orr.w	r2, r2, #2
 80118ca:	60da      	str	r2, [r3, #12]
      break;
 80118cc:	e7dc      	b.n	8011888 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80118ce:	68da      	ldr	r2, [r3, #12]
 80118d0:	f042 0208 	orr.w	r2, r2, #8
 80118d4:	60da      	str	r2, [r3, #12]
      break;
 80118d6:	e7d7      	b.n	8011888 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80118d8:	68da      	ldr	r2, [r3, #12]
 80118da:	f042 0204 	orr.w	r2, r2, #4
 80118de:	60da      	str	r2, [r3, #12]
      break;
 80118e0:	e7d2      	b.n	8011888 <HAL_TIMEx_OCN_Start_IT+0xc>
 80118e2:	bf00      	nop

080118e4 <HAL_TIMEx_OCN_Stop_IT>:
  switch (Channel)
 80118e4:	2904      	cmp	r1, #4
 80118e6:	6803      	ldr	r3, [r0, #0]
 80118e8:	d040      	beq.n	801196c <HAL_TIMEx_OCN_Stop_IT+0x88>
 80118ea:	2908      	cmp	r1, #8
 80118ec:	d039      	beq.n	8011962 <HAL_TIMEx_OCN_Stop_IT+0x7e>
 80118ee:	2900      	cmp	r1, #0
 80118f0:	d032      	beq.n	8011958 <HAL_TIMEx_OCN_Stop_IT+0x74>
  TIMx->CCER &=  ~tmp;
 80118f2:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80118f4:	f001 011f 	and.w	r1, r1, #31
 80118f8:	2004      	movs	r0, #4
 80118fa:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &=  ~tmp;
 80118fe:	ea22 0101 	bic.w	r1, r2, r1
 8011902:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011904:	6a1a      	ldr	r2, [r3, #32]
 8011906:	621a      	str	r2, [r3, #32]
  tmpccer = htim->Instance->CCER;
 8011908:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 801190a:	f240 4244 	movw	r2, #1092	; 0x444
 801190e:	4211      	tst	r1, r2
 8011910:	d103      	bne.n	801191a <HAL_TIMEx_OCN_Stop_IT+0x36>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8011912:	68da      	ldr	r2, [r3, #12]
 8011914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011918:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 801191a:	6a19      	ldr	r1, [r3, #32]
 801191c:	f241 1211 	movw	r2, #4369	; 0x1111
 8011920:	4211      	tst	r1, r2
 8011922:	d104      	bne.n	801192e <HAL_TIMEx_OCN_Stop_IT+0x4a>
 8011924:	6a19      	ldr	r1, [r3, #32]
 8011926:	f240 4244 	movw	r2, #1092	; 0x444
 801192a:	4211      	tst	r1, r2
 801192c:	d00f      	beq.n	801194e <HAL_TIMEx_OCN_Stop_IT+0x6a>
  __HAL_TIM_DISABLE(htim);
 801192e:	6a19      	ldr	r1, [r3, #32]
 8011930:	f241 1211 	movw	r2, #4369	; 0x1111
 8011934:	4211      	tst	r1, r2
 8011936:	d108      	bne.n	801194a <HAL_TIMEx_OCN_Stop_IT+0x66>
 8011938:	6a19      	ldr	r1, [r3, #32]
 801193a:	f240 4244 	movw	r2, #1092	; 0x444
 801193e:	4211      	tst	r1, r2
 8011940:	d103      	bne.n	801194a <HAL_TIMEx_OCN_Stop_IT+0x66>
 8011942:	681a      	ldr	r2, [r3, #0]
 8011944:	f022 0201 	bic.w	r2, r2, #1
 8011948:	601a      	str	r2, [r3, #0]
}
 801194a:	2000      	movs	r0, #0
 801194c:	4770      	bx	lr
  __HAL_TIM_MOE_DISABLE(htim);
 801194e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011954:	645a      	str	r2, [r3, #68]	; 0x44
 8011956:	e7ea      	b.n	801192e <HAL_TIMEx_OCN_Stop_IT+0x4a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011958:	68da      	ldr	r2, [r3, #12]
 801195a:	f022 0202 	bic.w	r2, r2, #2
 801195e:	60da      	str	r2, [r3, #12]
      break;
 8011960:	e7c7      	b.n	80118f2 <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011962:	68da      	ldr	r2, [r3, #12]
 8011964:	f022 0208 	bic.w	r2, r2, #8
 8011968:	60da      	str	r2, [r3, #12]
      break;
 801196a:	e7c2      	b.n	80118f2 <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801196c:	68da      	ldr	r2, [r3, #12]
 801196e:	f022 0204 	bic.w	r2, r2, #4
 8011972:	60da      	str	r2, [r3, #12]
      break;
 8011974:	e7bd      	b.n	80118f2 <HAL_TIMEx_OCN_Stop_IT+0xe>
 8011976:	bf00      	nop

08011978 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8011978:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801197c:	2b01      	cmp	r3, #1
 801197e:	d03a      	beq.n	80119f6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  tmpcr2 = htim->Instance->CR2;
 8011980:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8011982:	2202      	movs	r2, #2
{
 8011984:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8011986:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 801198a:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801198c:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801198e:	4d1b      	ldr	r5, [pc, #108]	; (80119fc <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8011990:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8011992:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011996:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011998:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 801199a:	f04f 0601 	mov.w	r6, #1
 801199e:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 80119a2:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80119a4:	d019      	beq.n	80119da <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80119a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80119aa:	d016      	beq.n	80119da <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80119ac:	4a14      	ldr	r2, [pc, #80]	; (8011a00 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80119ae:	4293      	cmp	r3, r2
 80119b0:	d013      	beq.n	80119da <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80119b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80119b6:	4293      	cmp	r3, r2
 80119b8:	d00f      	beq.n	80119da <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80119ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80119be:	4293      	cmp	r3, r2
 80119c0:	d00b      	beq.n	80119da <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80119c2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80119c6:	4293      	cmp	r3, r2
 80119c8:	d007      	beq.n	80119da <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80119ca:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d003      	beq.n	80119da <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80119d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80119d6:	4293      	cmp	r3, r2
 80119d8:	d104      	bne.n	80119e4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80119da:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80119dc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80119e0:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 80119e2:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(htim);
 80119e4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80119e6:	2201      	movs	r2, #1
 80119e8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80119ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80119f0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80119f2:	4618      	mov	r0, r3
}
 80119f4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80119f6:	2002      	movs	r0, #2
}
 80119f8:	4770      	bx	lr
 80119fa:	bf00      	nop
 80119fc:	40010000 	.word	0x40010000
 8011a00:	40000400 	.word	0x40000400

08011a04 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8011a04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d021      	beq.n	8011a50 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 8011a0c:	b430      	push	{r4, r5}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011a0e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011a12:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a1a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011a1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011a20:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011a22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011a26:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011a2a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a30:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011a36:	69c9      	ldr	r1, [r1, #28]
  htim->Instance->BDTR = tmpbdtr;
 8011a38:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011a3a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011a40:	430b      	orrs	r3, r1
  __HAL_UNLOCK(htim);
 8011a42:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8011a44:	6453      	str	r3, [r2, #68]	; 0x44
}
 8011a46:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 8011a48:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 8011a4c:	4608      	mov	r0, r1
 8011a4e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8011a50:	2302      	movs	r3, #2
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop

08011a58 <HAL_TIMEx_CommutCallback>:
 8011a58:	4770      	bx	lr
 8011a5a:	bf00      	nop

08011a5c <HAL_TIMEx_BreakCallback>:
 8011a5c:	4770      	bx	lr
 8011a5e:	bf00      	nop

08011a60 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011a60:	2800      	cmp	r0, #0
 8011a62:	f000 8093 	beq.w	8011b8c <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011a66:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8011a6a:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8011a6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011a70:	4604      	mov	r4, r0
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	f000 8085 	beq.w	8011b82 <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011a78:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011a7a:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8011a7c:	2224      	movs	r2, #36	; 0x24
 8011a7e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8011a82:	68d8      	ldr	r0, [r3, #12]
 8011a84:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011a88:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8011a8c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011a8e:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011a90:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011a92:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8011a96:	4329      	orrs	r1, r5
 8011a98:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8011a9a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011a9c:	6965      	ldr	r5, [r4, #20]
 8011a9e:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8011aa0:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011aa4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8011aa6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011aaa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8011aac:	430a      	orrs	r2, r1
 8011aae:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011ab0:	695a      	ldr	r2, [r3, #20]
 8011ab2:	69a1      	ldr	r1, [r4, #24]
 8011ab4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011ab8:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011aba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011abe:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011ac0:	4a36      	ldr	r2, [pc, #216]	; (8011b9c <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011ac2:	d034      	beq.n	8011b2e <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d063      	beq.n	8011b90 <HAL_UART_Init+0x130>
 8011ac8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d05f      	beq.n	8011b90 <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011ad0:	f7fe fb52 	bl	8010178 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011ad4:	6863      	ldr	r3, [r4, #4]
 8011ad6:	4d32      	ldr	r5, [pc, #200]	; (8011ba0 <HAL_UART_Init+0x140>)
 8011ad8:	2219      	movs	r2, #25
 8011ada:	fba0 0102 	umull	r0, r1, r0, r2
 8011ade:	009a      	lsls	r2, r3, #2
 8011ae0:	0f9b      	lsrs	r3, r3, #30
 8011ae2:	f7f7 f809 	bl	8008af8 <__aeabi_uldivmod>
 8011ae6:	fba5 2100 	umull	r2, r1, r5, r0
 8011aea:	0949      	lsrs	r1, r1, #5
 8011aec:	2264      	movs	r2, #100	; 0x64
 8011aee:	fb02 0211 	mls	r2, r2, r1, r0
 8011af2:	0112      	lsls	r2, r2, #4
 8011af4:	3232      	adds	r2, #50	; 0x32
 8011af6:	6823      	ldr	r3, [r4, #0]
 8011af8:	fba5 0202 	umull	r0, r2, r5, r2
 8011afc:	0109      	lsls	r1, r1, #4
 8011afe:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8011b02:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011b04:	691a      	ldr	r2, [r3, #16]
 8011b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011b0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011b0c:	695a      	ldr	r2, [r3, #20]
 8011b0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011b12:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8011b14:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b16:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8011b18:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8011b1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011b1e:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8011b20:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b22:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8011b24:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8011b28:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8011b2c:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d031      	beq.n	8011b96 <HAL_UART_Init+0x136>
 8011b32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d02d      	beq.n	8011b96 <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 8011b3a:	f7fe fb1d 	bl	8010178 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011b3e:	6862      	ldr	r2, [r4, #4]
 8011b40:	2600      	movs	r6, #0
 8011b42:	1892      	adds	r2, r2, r2
 8011b44:	f04f 0119 	mov.w	r1, #25
 8011b48:	eb46 0306 	adc.w	r3, r6, r6
 8011b4c:	fba0 0101 	umull	r0, r1, r0, r1
 8011b50:	f7f6 ffd2 	bl	8008af8 <__aeabi_uldivmod>
 8011b54:	4e12      	ldr	r6, [pc, #72]	; (8011ba0 <HAL_UART_Init+0x140>)
 8011b56:	6823      	ldr	r3, [r4, #0]
 8011b58:	fba6 2100 	umull	r2, r1, r6, r0
 8011b5c:	094d      	lsrs	r5, r1, #5
 8011b5e:	2264      	movs	r2, #100	; 0x64
 8011b60:	fb02 0215 	mls	r2, r2, r5, r0
 8011b64:	00d2      	lsls	r2, r2, #3
 8011b66:	3232      	adds	r2, #50	; 0x32
 8011b68:	fba6 1202 	umull	r1, r2, r6, r2
 8011b6c:	0952      	lsrs	r2, r2, #5
 8011b6e:	f002 0107 	and.w	r1, r2, #7
 8011b72:	0052      	lsls	r2, r2, #1
 8011b74:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8011b78:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8011b7c:	440a      	add	r2, r1
 8011b7e:	609a      	str	r2, [r3, #8]
 8011b80:	e7c0      	b.n	8011b04 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8011b82:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8011b86:	f7fb feeb 	bl	800d960 <HAL_UART_MspInit>
 8011b8a:	e775      	b.n	8011a78 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8011b8c:	2001      	movs	r0, #1
}
 8011b8e:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 8011b90:	f7fe fb02 	bl	8010198 <HAL_RCC_GetPCLK2Freq>
 8011b94:	e79e      	b.n	8011ad4 <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 8011b96:	f7fe faff 	bl	8010198 <HAL_RCC_GetPCLK2Freq>
 8011b9a:	e7d0      	b.n	8011b3e <HAL_UART_Init+0xde>
 8011b9c:	40011000 	.word	0x40011000
 8011ba0:	51eb851f 	.word	0x51eb851f

08011ba4 <HAL_UART_Transmit>:
{
 8011ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba8:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8011baa:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8011bae:	2920      	cmp	r1, #32
{
 8011bb0:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 8011bb2:	d132      	bne.n	8011c1a <HAL_UART_Transmit+0x76>
    if ((pData == NULL) || (Size == 0U))
 8011bb4:	2e00      	cmp	r6, #0
 8011bb6:	d034      	beq.n	8011c22 <HAL_UART_Transmit+0x7e>
 8011bb8:	9201      	str	r2, [sp, #4]
 8011bba:	2a00      	cmp	r2, #0
 8011bbc:	d031      	beq.n	8011c22 <HAL_UART_Transmit+0x7e>
 8011bbe:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8011bc0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	d027      	beq.n	8011c1a <HAL_UART_Transmit+0x76>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bca:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8011bce:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011bd0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bd2:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8011bd6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011bda:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8011bde:	f7fd f8e1 	bl	800eda4 <HAL_GetTick>
    huart->TxXferSize = Size;
 8011be2:	9a01      	ldr	r2, [sp, #4]
 8011be4:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8011be6:	84e2      	strh	r2, [r4, #38]	; 0x26
 8011be8:	6822      	ldr	r2, [r4, #0]
    __HAL_UNLOCK(huart);
 8011bea:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8011bee:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 8011bf0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d03b      	beq.n	8011c70 <HAL_UART_Transmit+0xcc>
      huart->TxXferCount--;
 8011bf8:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011bfa:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8011bfc:	3801      	subs	r0, #1
 8011bfe:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011c00:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8011c04:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011c06:	d01b      	beq.n	8011c40 <HAL_UART_Transmit+0x9c>
 8011c08:	1c78      	adds	r0, r7, #1
 8011c0a:	d13b      	bne.n	8011c84 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c0c:	6810      	ldr	r0, [r2, #0]
 8011c0e:	0601      	lsls	r1, r0, #24
 8011c10:	d5fc      	bpl.n	8011c0c <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8011c12:	7833      	ldrb	r3, [r6, #0]
 8011c14:	6053      	str	r3, [r2, #4]
 8011c16:	3601      	adds	r6, #1
 8011c18:	e7ea      	b.n	8011bf0 <HAL_UART_Transmit+0x4c>
    return HAL_BUSY;
 8011c1a:	2002      	movs	r0, #2
}
 8011c1c:	b002      	add	sp, #8
 8011c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8011c22:	2001      	movs	r0, #1
}
 8011c24:	b002      	add	sp, #8
 8011c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c2a:	6813      	ldr	r3, [r2, #0]
 8011c2c:	061b      	lsls	r3, r3, #24
 8011c2e:	d40c      	bmi.n	8011c4a <HAL_UART_Transmit+0xa6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011c30:	2f00      	cmp	r7, #0
 8011c32:	d031      	beq.n	8011c98 <HAL_UART_Transmit+0xf4>
 8011c34:	f7fd f8b6 	bl	800eda4 <HAL_GetTick>
 8011c38:	1b40      	subs	r0, r0, r5
 8011c3a:	4287      	cmp	r7, r0
 8011c3c:	6822      	ldr	r2, [r4, #0]
 8011c3e:	d32b      	bcc.n	8011c98 <HAL_UART_Transmit+0xf4>
 8011c40:	1c78      	adds	r0, r7, #1
 8011c42:	d1f2      	bne.n	8011c2a <HAL_UART_Transmit+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c44:	6810      	ldr	r0, [r2, #0]
 8011c46:	0601      	lsls	r1, r0, #24
 8011c48:	d5fc      	bpl.n	8011c44 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8011c4a:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011c4c:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8011c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c52:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011c54:	2900      	cmp	r1, #0
 8011c56:	d1de      	bne.n	8011c16 <HAL_UART_Transmit+0x72>
          pData += 2U;
 8011c58:	3602      	adds	r6, #2
 8011c5a:	e7c9      	b.n	8011bf0 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c5c:	6813      	ldr	r3, [r2, #0]
 8011c5e:	065b      	lsls	r3, r3, #25
 8011c60:	d40b      	bmi.n	8011c7a <HAL_UART_Transmit+0xd6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011c62:	b1cf      	cbz	r7, 8011c98 <HAL_UART_Transmit+0xf4>
 8011c64:	f7fd f89e 	bl	800eda4 <HAL_GetTick>
 8011c68:	1b40      	subs	r0, r0, r5
 8011c6a:	4287      	cmp	r7, r0
 8011c6c:	6822      	ldr	r2, [r4, #0]
 8011c6e:	d313      	bcc.n	8011c98 <HAL_UART_Transmit+0xf4>
 8011c70:	1c78      	adds	r0, r7, #1
 8011c72:	d1f3      	bne.n	8011c5c <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c74:	6813      	ldr	r3, [r2, #0]
 8011c76:	0659      	lsls	r1, r3, #25
 8011c78:	d5fc      	bpl.n	8011c74 <HAL_UART_Transmit+0xd0>
    huart->gState = HAL_UART_STATE_READY;
 8011c7a:	2320      	movs	r3, #32
 8011c7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8011c80:	2000      	movs	r0, #0
 8011c82:	e7cb      	b.n	8011c1c <HAL_UART_Transmit+0x78>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c84:	6813      	ldr	r3, [r2, #0]
 8011c86:	061b      	lsls	r3, r3, #24
 8011c88:	d4c3      	bmi.n	8011c12 <HAL_UART_Transmit+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011c8a:	b12f      	cbz	r7, 8011c98 <HAL_UART_Transmit+0xf4>
 8011c8c:	f7fd f88a 	bl	800eda4 <HAL_GetTick>
 8011c90:	1b40      	subs	r0, r0, r5
 8011c92:	4287      	cmp	r7, r0
 8011c94:	6822      	ldr	r2, [r4, #0]
 8011c96:	d2b7      	bcs.n	8011c08 <HAL_UART_Transmit+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011c98:	68d3      	ldr	r3, [r2, #12]
 8011c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011c9e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ca0:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8011ca2:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ca4:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8011ca8:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8011caa:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011cac:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8011cae:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8011cb2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8011cb6:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8011cba:	b002      	add	sp, #8
 8011cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011cc0 <HAL_UART_Receive>:
{
 8011cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc4:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8011cc6:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 8011cca:	2920      	cmp	r1, #32
{
 8011ccc:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8011cce:	d136      	bne.n	8011d3e <HAL_UART_Receive+0x7e>
    if ((pData == NULL) || (Size == 0U))
 8011cd0:	2e00      	cmp	r6, #0
 8011cd2:	d038      	beq.n	8011d46 <HAL_UART_Receive+0x86>
 8011cd4:	9201      	str	r2, [sp, #4]
 8011cd6:	2a00      	cmp	r2, #0
 8011cd8:	d035      	beq.n	8011d46 <HAL_UART_Receive+0x86>
 8011cda:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8011cdc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	d02b      	beq.n	8011d3e <HAL_UART_Receive+0x7e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ce6:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8011cea:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011cec:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cee:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8011cf2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011cf6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8011cfa:	f7fd f853 	bl	800eda4 <HAL_GetTick>
    huart->RxXferSize = Size;
 8011cfe:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8011d00:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8011d04:	4605      	mov	r5, r0
    huart->RxXferSize = Size;
 8011d06:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8011d08:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8011d0a:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8011d0c:	b280      	uxth	r0, r0
 8011d0e:	2800      	cmp	r0, #0
 8011d10:	d05b      	beq.n	8011dca <HAL_UART_Receive+0x10a>
      huart->RxXferCount--;
 8011d12:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011d14:	68a3      	ldr	r3, [r4, #8]
      huart->RxXferCount--;
 8011d16:	3a01      	subs	r2, #1
 8011d18:	b292      	uxth	r2, r2
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->RxXferCount--;
 8011d1e:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011d20:	d01f      	beq.n	8011d62 <HAL_UART_Receive+0xa2>
 8011d22:	1c79      	adds	r1, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d24:	6820      	ldr	r0, [r4, #0]
 8011d26:	d12a      	bne.n	8011d7e <HAL_UART_Receive+0xbe>
 8011d28:	6802      	ldr	r2, [r0, #0]
 8011d2a:	0692      	lsls	r2, r2, #26
 8011d2c:	d5fc      	bpl.n	8011d28 <HAL_UART_Receive+0x68>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011d2e:	6923      	ldr	r3, [r4, #16]
 8011d30:	1c72      	adds	r2, r6, #1
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d13f      	bne.n	8011db6 <HAL_UART_Receive+0xf6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011d36:	6843      	ldr	r3, [r0, #4]
 8011d38:	7033      	strb	r3, [r6, #0]
 8011d3a:	4616      	mov	r6, r2
 8011d3c:	e7e5      	b.n	8011d0a <HAL_UART_Receive+0x4a>
    return HAL_BUSY;
 8011d3e:	2002      	movs	r0, #2
}
 8011d40:	b002      	add	sp, #8
 8011d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8011d46:	2001      	movs	r0, #1
}
 8011d48:	b002      	add	sp, #8
 8011d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d4e:	681a      	ldr	r2, [r3, #0]
 8011d50:	0690      	lsls	r0, r2, #26
 8011d52:	d40c      	bmi.n	8011d6e <HAL_UART_Receive+0xae>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011d54:	2f00      	cmp	r7, #0
 8011d56:	d03d      	beq.n	8011dd4 <HAL_UART_Receive+0x114>
 8011d58:	f7fd f824 	bl	800eda4 <HAL_GetTick>
 8011d5c:	1b40      	subs	r0, r0, r5
 8011d5e:	4287      	cmp	r7, r0
 8011d60:	d337      	bcc.n	8011dd2 <HAL_UART_Receive+0x112>
 8011d62:	1c79      	adds	r1, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d64:	6823      	ldr	r3, [r4, #0]
 8011d66:	d1f2      	bne.n	8011d4e <HAL_UART_Receive+0x8e>
 8011d68:	681a      	ldr	r2, [r3, #0]
 8011d6a:	0692      	lsls	r2, r2, #26
 8011d6c:	d5fc      	bpl.n	8011d68 <HAL_UART_Receive+0xa8>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011d6e:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011d70:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011d72:	bb32      	cbnz	r2, 8011dc2 <HAL_UART_Receive+0x102>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d78:	f826 3b02 	strh.w	r3, [r6], #2
 8011d7c:	e7c5      	b.n	8011d0a <HAL_UART_Receive+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d7e:	6803      	ldr	r3, [r0, #0]
 8011d80:	069b      	lsls	r3, r3, #26
 8011d82:	d4d4      	bmi.n	8011d2e <HAL_UART_Receive+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011d84:	b12f      	cbz	r7, 8011d92 <HAL_UART_Receive+0xd2>
 8011d86:	f7fd f80d 	bl	800eda4 <HAL_GetTick>
 8011d8a:	1b40      	subs	r0, r0, r5
 8011d8c:	4287      	cmp	r7, r0
 8011d8e:	d2c8      	bcs.n	8011d22 <HAL_UART_Receive+0x62>
 8011d90:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011d92:	68c3      	ldr	r3, [r0, #12]
 8011d94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011d98:	60c3      	str	r3, [r0, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d9a:	6943      	ldr	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8011d9c:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d9e:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8011da2:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011da4:	6143      	str	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8011da6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 8011daa:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8011dac:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8011db0:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8011db4:	e7c4      	b.n	8011d40 <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011db6:	6843      	ldr	r3, [r0, #4]
 8011db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dbc:	7033      	strb	r3, [r6, #0]
 8011dbe:	4616      	mov	r6, r2
 8011dc0:	e7a3      	b.n	8011d0a <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8011dc2:	b2db      	uxtb	r3, r3
 8011dc4:	f826 3b01 	strh.w	r3, [r6], #1
 8011dc8:	e79f      	b.n	8011d0a <HAL_UART_Receive+0x4a>
    huart->RxState = HAL_UART_STATE_READY;
 8011dca:	2320      	movs	r3, #32
 8011dcc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8011dd0:	e7b6      	b.n	8011d40 <HAL_UART_Receive+0x80>
 8011dd2:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011dd4:	68da      	ldr	r2, [r3, #12]
 8011dd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011dda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ddc:	695a      	ldr	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8011dde:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011de0:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8011de4:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011de6:	615a      	str	r2, [r3, #20]
          return HAL_TIMEOUT;
 8011de8:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8011dea:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8011dee:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8011df2:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 8011df6:	e7a3      	b.n	8011d40 <HAL_UART_Receive+0x80>

08011df8 <round>:
 8011df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dfa:	ec57 6b10 	vmov	r6, r7, d0
 8011dfe:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8011e02:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8011e06:	2c13      	cmp	r4, #19
 8011e08:	463b      	mov	r3, r7
 8011e0a:	463d      	mov	r5, r7
 8011e0c:	dc17      	bgt.n	8011e3e <round+0x46>
 8011e0e:	2c00      	cmp	r4, #0
 8011e10:	da09      	bge.n	8011e26 <round+0x2e>
 8011e12:	3401      	adds	r4, #1
 8011e14:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8011e18:	d103      	bne.n	8011e22 <round+0x2a>
 8011e1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011e1e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011e22:	2100      	movs	r1, #0
 8011e24:	e02c      	b.n	8011e80 <round+0x88>
 8011e26:	4a18      	ldr	r2, [pc, #96]	; (8011e88 <round+0x90>)
 8011e28:	4122      	asrs	r2, r4
 8011e2a:	4217      	tst	r7, r2
 8011e2c:	d100      	bne.n	8011e30 <round+0x38>
 8011e2e:	b19e      	cbz	r6, 8011e58 <round+0x60>
 8011e30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011e34:	4123      	asrs	r3, r4
 8011e36:	442b      	add	r3, r5
 8011e38:	ea23 0302 	bic.w	r3, r3, r2
 8011e3c:	e7f1      	b.n	8011e22 <round+0x2a>
 8011e3e:	2c33      	cmp	r4, #51	; 0x33
 8011e40:	dd0d      	ble.n	8011e5e <round+0x66>
 8011e42:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011e46:	d107      	bne.n	8011e58 <round+0x60>
 8011e48:	4630      	mov	r0, r6
 8011e4a:	4639      	mov	r1, r7
 8011e4c:	ee10 2a10 	vmov	r2, s0
 8011e50:	f7f6 f954 	bl	80080fc <__adddf3>
 8011e54:	4606      	mov	r6, r0
 8011e56:	460f      	mov	r7, r1
 8011e58:	ec47 6b10 	vmov	d0, r6, r7
 8011e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e5e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8011e62:	f04f 30ff 	mov.w	r0, #4294967295
 8011e66:	40d0      	lsrs	r0, r2
 8011e68:	4206      	tst	r6, r0
 8011e6a:	d0f5      	beq.n	8011e58 <round+0x60>
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011e72:	fa02 f404 	lsl.w	r4, r2, r4
 8011e76:	1931      	adds	r1, r6, r4
 8011e78:	bf28      	it	cs
 8011e7a:	189b      	addcs	r3, r3, r2
 8011e7c:	ea21 0100 	bic.w	r1, r1, r0
 8011e80:	461f      	mov	r7, r3
 8011e82:	460e      	mov	r6, r1
 8011e84:	e7e8      	b.n	8011e58 <round+0x60>
 8011e86:	bf00      	nop
 8011e88:	000fffff 	.word	0x000fffff

08011e8c <__errno>:
 8011e8c:	4b01      	ldr	r3, [pc, #4]	; (8011e94 <__errno+0x8>)
 8011e8e:	6818      	ldr	r0, [r3, #0]
 8011e90:	4770      	bx	lr
 8011e92:	bf00      	nop
 8011e94:	2000002c 	.word	0x2000002c

08011e98 <__sflush_r>:
 8011e98:	898a      	ldrh	r2, [r1, #12]
 8011e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e9e:	4605      	mov	r5, r0
 8011ea0:	0710      	lsls	r0, r2, #28
 8011ea2:	460c      	mov	r4, r1
 8011ea4:	d458      	bmi.n	8011f58 <__sflush_r+0xc0>
 8011ea6:	684b      	ldr	r3, [r1, #4]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	dc05      	bgt.n	8011eb8 <__sflush_r+0x20>
 8011eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	dc02      	bgt.n	8011eb8 <__sflush_r+0x20>
 8011eb2:	2000      	movs	r0, #0
 8011eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011eba:	2e00      	cmp	r6, #0
 8011ebc:	d0f9      	beq.n	8011eb2 <__sflush_r+0x1a>
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ec4:	682f      	ldr	r7, [r5, #0]
 8011ec6:	6a21      	ldr	r1, [r4, #32]
 8011ec8:	602b      	str	r3, [r5, #0]
 8011eca:	d032      	beq.n	8011f32 <__sflush_r+0x9a>
 8011ecc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ece:	89a3      	ldrh	r3, [r4, #12]
 8011ed0:	075a      	lsls	r2, r3, #29
 8011ed2:	d505      	bpl.n	8011ee0 <__sflush_r+0x48>
 8011ed4:	6863      	ldr	r3, [r4, #4]
 8011ed6:	1ac0      	subs	r0, r0, r3
 8011ed8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011eda:	b10b      	cbz	r3, 8011ee0 <__sflush_r+0x48>
 8011edc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ede:	1ac0      	subs	r0, r0, r3
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	4602      	mov	r2, r0
 8011ee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ee6:	6a21      	ldr	r1, [r4, #32]
 8011ee8:	4628      	mov	r0, r5
 8011eea:	47b0      	blx	r6
 8011eec:	1c43      	adds	r3, r0, #1
 8011eee:	89a3      	ldrh	r3, [r4, #12]
 8011ef0:	d106      	bne.n	8011f00 <__sflush_r+0x68>
 8011ef2:	6829      	ldr	r1, [r5, #0]
 8011ef4:	291d      	cmp	r1, #29
 8011ef6:	d848      	bhi.n	8011f8a <__sflush_r+0xf2>
 8011ef8:	4a29      	ldr	r2, [pc, #164]	; (8011fa0 <__sflush_r+0x108>)
 8011efa:	40ca      	lsrs	r2, r1
 8011efc:	07d6      	lsls	r6, r2, #31
 8011efe:	d544      	bpl.n	8011f8a <__sflush_r+0xf2>
 8011f00:	2200      	movs	r2, #0
 8011f02:	6062      	str	r2, [r4, #4]
 8011f04:	04d9      	lsls	r1, r3, #19
 8011f06:	6922      	ldr	r2, [r4, #16]
 8011f08:	6022      	str	r2, [r4, #0]
 8011f0a:	d504      	bpl.n	8011f16 <__sflush_r+0x7e>
 8011f0c:	1c42      	adds	r2, r0, #1
 8011f0e:	d101      	bne.n	8011f14 <__sflush_r+0x7c>
 8011f10:	682b      	ldr	r3, [r5, #0]
 8011f12:	b903      	cbnz	r3, 8011f16 <__sflush_r+0x7e>
 8011f14:	6560      	str	r0, [r4, #84]	; 0x54
 8011f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f18:	602f      	str	r7, [r5, #0]
 8011f1a:	2900      	cmp	r1, #0
 8011f1c:	d0c9      	beq.n	8011eb2 <__sflush_r+0x1a>
 8011f1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f22:	4299      	cmp	r1, r3
 8011f24:	d002      	beq.n	8011f2c <__sflush_r+0x94>
 8011f26:	4628      	mov	r0, r5
 8011f28:	f000 f9fa 	bl	8012320 <_free_r>
 8011f2c:	2000      	movs	r0, #0
 8011f2e:	6360      	str	r0, [r4, #52]	; 0x34
 8011f30:	e7c0      	b.n	8011eb4 <__sflush_r+0x1c>
 8011f32:	2301      	movs	r3, #1
 8011f34:	4628      	mov	r0, r5
 8011f36:	47b0      	blx	r6
 8011f38:	1c41      	adds	r1, r0, #1
 8011f3a:	d1c8      	bne.n	8011ece <__sflush_r+0x36>
 8011f3c:	682b      	ldr	r3, [r5, #0]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d0c5      	beq.n	8011ece <__sflush_r+0x36>
 8011f42:	2b1d      	cmp	r3, #29
 8011f44:	d001      	beq.n	8011f4a <__sflush_r+0xb2>
 8011f46:	2b16      	cmp	r3, #22
 8011f48:	d101      	bne.n	8011f4e <__sflush_r+0xb6>
 8011f4a:	602f      	str	r7, [r5, #0]
 8011f4c:	e7b1      	b.n	8011eb2 <__sflush_r+0x1a>
 8011f4e:	89a3      	ldrh	r3, [r4, #12]
 8011f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f54:	81a3      	strh	r3, [r4, #12]
 8011f56:	e7ad      	b.n	8011eb4 <__sflush_r+0x1c>
 8011f58:	690f      	ldr	r7, [r1, #16]
 8011f5a:	2f00      	cmp	r7, #0
 8011f5c:	d0a9      	beq.n	8011eb2 <__sflush_r+0x1a>
 8011f5e:	0793      	lsls	r3, r2, #30
 8011f60:	680e      	ldr	r6, [r1, #0]
 8011f62:	bf08      	it	eq
 8011f64:	694b      	ldreq	r3, [r1, #20]
 8011f66:	600f      	str	r7, [r1, #0]
 8011f68:	bf18      	it	ne
 8011f6a:	2300      	movne	r3, #0
 8011f6c:	eba6 0807 	sub.w	r8, r6, r7
 8011f70:	608b      	str	r3, [r1, #8]
 8011f72:	f1b8 0f00 	cmp.w	r8, #0
 8011f76:	dd9c      	ble.n	8011eb2 <__sflush_r+0x1a>
 8011f78:	4643      	mov	r3, r8
 8011f7a:	463a      	mov	r2, r7
 8011f7c:	6a21      	ldr	r1, [r4, #32]
 8011f7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f80:	4628      	mov	r0, r5
 8011f82:	47b0      	blx	r6
 8011f84:	2800      	cmp	r0, #0
 8011f86:	dc06      	bgt.n	8011f96 <__sflush_r+0xfe>
 8011f88:	89a3      	ldrh	r3, [r4, #12]
 8011f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f8e:	81a3      	strh	r3, [r4, #12]
 8011f90:	f04f 30ff 	mov.w	r0, #4294967295
 8011f94:	e78e      	b.n	8011eb4 <__sflush_r+0x1c>
 8011f96:	4407      	add	r7, r0
 8011f98:	eba8 0800 	sub.w	r8, r8, r0
 8011f9c:	e7e9      	b.n	8011f72 <__sflush_r+0xda>
 8011f9e:	bf00      	nop
 8011fa0:	20400001 	.word	0x20400001

08011fa4 <_fflush_r>:
 8011fa4:	b538      	push	{r3, r4, r5, lr}
 8011fa6:	690b      	ldr	r3, [r1, #16]
 8011fa8:	4605      	mov	r5, r0
 8011faa:	460c      	mov	r4, r1
 8011fac:	b1db      	cbz	r3, 8011fe6 <_fflush_r+0x42>
 8011fae:	b118      	cbz	r0, 8011fb8 <_fflush_r+0x14>
 8011fb0:	6983      	ldr	r3, [r0, #24]
 8011fb2:	b90b      	cbnz	r3, 8011fb8 <_fflush_r+0x14>
 8011fb4:	f000 f872 	bl	801209c <__sinit>
 8011fb8:	4b0c      	ldr	r3, [pc, #48]	; (8011fec <_fflush_r+0x48>)
 8011fba:	429c      	cmp	r4, r3
 8011fbc:	d109      	bne.n	8011fd2 <_fflush_r+0x2e>
 8011fbe:	686c      	ldr	r4, [r5, #4]
 8011fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fc4:	b17b      	cbz	r3, 8011fe6 <_fflush_r+0x42>
 8011fc6:	4621      	mov	r1, r4
 8011fc8:	4628      	mov	r0, r5
 8011fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fce:	f7ff bf63 	b.w	8011e98 <__sflush_r>
 8011fd2:	4b07      	ldr	r3, [pc, #28]	; (8011ff0 <_fflush_r+0x4c>)
 8011fd4:	429c      	cmp	r4, r3
 8011fd6:	d101      	bne.n	8011fdc <_fflush_r+0x38>
 8011fd8:	68ac      	ldr	r4, [r5, #8]
 8011fda:	e7f1      	b.n	8011fc0 <_fflush_r+0x1c>
 8011fdc:	4b05      	ldr	r3, [pc, #20]	; (8011ff4 <_fflush_r+0x50>)
 8011fde:	429c      	cmp	r4, r3
 8011fe0:	bf08      	it	eq
 8011fe2:	68ec      	ldreq	r4, [r5, #12]
 8011fe4:	e7ec      	b.n	8011fc0 <_fflush_r+0x1c>
 8011fe6:	2000      	movs	r0, #0
 8011fe8:	bd38      	pop	{r3, r4, r5, pc}
 8011fea:	bf00      	nop
 8011fec:	080173a8 	.word	0x080173a8
 8011ff0:	080173c8 	.word	0x080173c8
 8011ff4:	08017388 	.word	0x08017388

08011ff8 <fflush>:
 8011ff8:	4601      	mov	r1, r0
 8011ffa:	b920      	cbnz	r0, 8012006 <fflush+0xe>
 8011ffc:	4b04      	ldr	r3, [pc, #16]	; (8012010 <fflush+0x18>)
 8011ffe:	4905      	ldr	r1, [pc, #20]	; (8012014 <fflush+0x1c>)
 8012000:	6818      	ldr	r0, [r3, #0]
 8012002:	f000 b8d3 	b.w	80121ac <_fwalk_reent>
 8012006:	4b04      	ldr	r3, [pc, #16]	; (8012018 <fflush+0x20>)
 8012008:	6818      	ldr	r0, [r3, #0]
 801200a:	f7ff bfcb 	b.w	8011fa4 <_fflush_r>
 801200e:	bf00      	nop
 8012010:	080173e8 	.word	0x080173e8
 8012014:	08011fa5 	.word	0x08011fa5
 8012018:	2000002c 	.word	0x2000002c

0801201c <std>:
 801201c:	2300      	movs	r3, #0
 801201e:	b510      	push	{r4, lr}
 8012020:	4604      	mov	r4, r0
 8012022:	e9c0 3300 	strd	r3, r3, [r0]
 8012026:	6083      	str	r3, [r0, #8]
 8012028:	8181      	strh	r1, [r0, #12]
 801202a:	6643      	str	r3, [r0, #100]	; 0x64
 801202c:	81c2      	strh	r2, [r0, #14]
 801202e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012032:	6183      	str	r3, [r0, #24]
 8012034:	4619      	mov	r1, r3
 8012036:	2208      	movs	r2, #8
 8012038:	305c      	adds	r0, #92	; 0x5c
 801203a:	f000 f968 	bl	801230e <memset>
 801203e:	4b05      	ldr	r3, [pc, #20]	; (8012054 <std+0x38>)
 8012040:	6263      	str	r3, [r4, #36]	; 0x24
 8012042:	4b05      	ldr	r3, [pc, #20]	; (8012058 <std+0x3c>)
 8012044:	62a3      	str	r3, [r4, #40]	; 0x28
 8012046:	4b05      	ldr	r3, [pc, #20]	; (801205c <std+0x40>)
 8012048:	62e3      	str	r3, [r4, #44]	; 0x2c
 801204a:	4b05      	ldr	r3, [pc, #20]	; (8012060 <std+0x44>)
 801204c:	6224      	str	r4, [r4, #32]
 801204e:	6323      	str	r3, [r4, #48]	; 0x30
 8012050:	bd10      	pop	{r4, pc}
 8012052:	bf00      	nop
 8012054:	08013dc5 	.word	0x08013dc5
 8012058:	08013de7 	.word	0x08013de7
 801205c:	08013e1f 	.word	0x08013e1f
 8012060:	08013e43 	.word	0x08013e43

08012064 <_cleanup_r>:
 8012064:	4901      	ldr	r1, [pc, #4]	; (801206c <_cleanup_r+0x8>)
 8012066:	f000 b8a1 	b.w	80121ac <_fwalk_reent>
 801206a:	bf00      	nop
 801206c:	08011fa5 	.word	0x08011fa5

08012070 <__sfmoreglue>:
 8012070:	b570      	push	{r4, r5, r6, lr}
 8012072:	1e4a      	subs	r2, r1, #1
 8012074:	2568      	movs	r5, #104	; 0x68
 8012076:	4355      	muls	r5, r2
 8012078:	460e      	mov	r6, r1
 801207a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801207e:	f000 f99d 	bl	80123bc <_malloc_r>
 8012082:	4604      	mov	r4, r0
 8012084:	b140      	cbz	r0, 8012098 <__sfmoreglue+0x28>
 8012086:	2100      	movs	r1, #0
 8012088:	e9c0 1600 	strd	r1, r6, [r0]
 801208c:	300c      	adds	r0, #12
 801208e:	60a0      	str	r0, [r4, #8]
 8012090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012094:	f000 f93b 	bl	801230e <memset>
 8012098:	4620      	mov	r0, r4
 801209a:	bd70      	pop	{r4, r5, r6, pc}

0801209c <__sinit>:
 801209c:	6983      	ldr	r3, [r0, #24]
 801209e:	b510      	push	{r4, lr}
 80120a0:	4604      	mov	r4, r0
 80120a2:	bb33      	cbnz	r3, 80120f2 <__sinit+0x56>
 80120a4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80120a8:	6503      	str	r3, [r0, #80]	; 0x50
 80120aa:	4b12      	ldr	r3, [pc, #72]	; (80120f4 <__sinit+0x58>)
 80120ac:	4a12      	ldr	r2, [pc, #72]	; (80120f8 <__sinit+0x5c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	6282      	str	r2, [r0, #40]	; 0x28
 80120b2:	4298      	cmp	r0, r3
 80120b4:	bf04      	itt	eq
 80120b6:	2301      	moveq	r3, #1
 80120b8:	6183      	streq	r3, [r0, #24]
 80120ba:	f000 f81f 	bl	80120fc <__sfp>
 80120be:	6060      	str	r0, [r4, #4]
 80120c0:	4620      	mov	r0, r4
 80120c2:	f000 f81b 	bl	80120fc <__sfp>
 80120c6:	60a0      	str	r0, [r4, #8]
 80120c8:	4620      	mov	r0, r4
 80120ca:	f000 f817 	bl	80120fc <__sfp>
 80120ce:	2200      	movs	r2, #0
 80120d0:	60e0      	str	r0, [r4, #12]
 80120d2:	2104      	movs	r1, #4
 80120d4:	6860      	ldr	r0, [r4, #4]
 80120d6:	f7ff ffa1 	bl	801201c <std>
 80120da:	2201      	movs	r2, #1
 80120dc:	2109      	movs	r1, #9
 80120de:	68a0      	ldr	r0, [r4, #8]
 80120e0:	f7ff ff9c 	bl	801201c <std>
 80120e4:	2202      	movs	r2, #2
 80120e6:	2112      	movs	r1, #18
 80120e8:	68e0      	ldr	r0, [r4, #12]
 80120ea:	f7ff ff97 	bl	801201c <std>
 80120ee:	2301      	movs	r3, #1
 80120f0:	61a3      	str	r3, [r4, #24]
 80120f2:	bd10      	pop	{r4, pc}
 80120f4:	080173e8 	.word	0x080173e8
 80120f8:	08012065 	.word	0x08012065

080120fc <__sfp>:
 80120fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120fe:	4b1b      	ldr	r3, [pc, #108]	; (801216c <__sfp+0x70>)
 8012100:	681e      	ldr	r6, [r3, #0]
 8012102:	69b3      	ldr	r3, [r6, #24]
 8012104:	4607      	mov	r7, r0
 8012106:	b913      	cbnz	r3, 801210e <__sfp+0x12>
 8012108:	4630      	mov	r0, r6
 801210a:	f7ff ffc7 	bl	801209c <__sinit>
 801210e:	3648      	adds	r6, #72	; 0x48
 8012110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012114:	3b01      	subs	r3, #1
 8012116:	d503      	bpl.n	8012120 <__sfp+0x24>
 8012118:	6833      	ldr	r3, [r6, #0]
 801211a:	b133      	cbz	r3, 801212a <__sfp+0x2e>
 801211c:	6836      	ldr	r6, [r6, #0]
 801211e:	e7f7      	b.n	8012110 <__sfp+0x14>
 8012120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012124:	b16d      	cbz	r5, 8012142 <__sfp+0x46>
 8012126:	3468      	adds	r4, #104	; 0x68
 8012128:	e7f4      	b.n	8012114 <__sfp+0x18>
 801212a:	2104      	movs	r1, #4
 801212c:	4638      	mov	r0, r7
 801212e:	f7ff ff9f 	bl	8012070 <__sfmoreglue>
 8012132:	6030      	str	r0, [r6, #0]
 8012134:	2800      	cmp	r0, #0
 8012136:	d1f1      	bne.n	801211c <__sfp+0x20>
 8012138:	230c      	movs	r3, #12
 801213a:	603b      	str	r3, [r7, #0]
 801213c:	4604      	mov	r4, r0
 801213e:	4620      	mov	r0, r4
 8012140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012142:	4b0b      	ldr	r3, [pc, #44]	; (8012170 <__sfp+0x74>)
 8012144:	6665      	str	r5, [r4, #100]	; 0x64
 8012146:	e9c4 5500 	strd	r5, r5, [r4]
 801214a:	60a5      	str	r5, [r4, #8]
 801214c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012150:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012154:	2208      	movs	r2, #8
 8012156:	4629      	mov	r1, r5
 8012158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801215c:	f000 f8d7 	bl	801230e <memset>
 8012160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012168:	e7e9      	b.n	801213e <__sfp+0x42>
 801216a:	bf00      	nop
 801216c:	080173e8 	.word	0x080173e8
 8012170:	ffff0001 	.word	0xffff0001

08012174 <_fwalk>:
 8012174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012178:	4688      	mov	r8, r1
 801217a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801217e:	2600      	movs	r6, #0
 8012180:	b914      	cbnz	r4, 8012188 <_fwalk+0x14>
 8012182:	4630      	mov	r0, r6
 8012184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012188:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801218c:	3f01      	subs	r7, #1
 801218e:	d501      	bpl.n	8012194 <_fwalk+0x20>
 8012190:	6824      	ldr	r4, [r4, #0]
 8012192:	e7f5      	b.n	8012180 <_fwalk+0xc>
 8012194:	89ab      	ldrh	r3, [r5, #12]
 8012196:	2b01      	cmp	r3, #1
 8012198:	d906      	bls.n	80121a8 <_fwalk+0x34>
 801219a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801219e:	3301      	adds	r3, #1
 80121a0:	d002      	beq.n	80121a8 <_fwalk+0x34>
 80121a2:	4628      	mov	r0, r5
 80121a4:	47c0      	blx	r8
 80121a6:	4306      	orrs	r6, r0
 80121a8:	3568      	adds	r5, #104	; 0x68
 80121aa:	e7ef      	b.n	801218c <_fwalk+0x18>

080121ac <_fwalk_reent>:
 80121ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121b0:	4680      	mov	r8, r0
 80121b2:	4689      	mov	r9, r1
 80121b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80121b8:	2600      	movs	r6, #0
 80121ba:	b914      	cbnz	r4, 80121c2 <_fwalk_reent+0x16>
 80121bc:	4630      	mov	r0, r6
 80121be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121c2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80121c6:	3f01      	subs	r7, #1
 80121c8:	d501      	bpl.n	80121ce <_fwalk_reent+0x22>
 80121ca:	6824      	ldr	r4, [r4, #0]
 80121cc:	e7f5      	b.n	80121ba <_fwalk_reent+0xe>
 80121ce:	89ab      	ldrh	r3, [r5, #12]
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d907      	bls.n	80121e4 <_fwalk_reent+0x38>
 80121d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121d8:	3301      	adds	r3, #1
 80121da:	d003      	beq.n	80121e4 <_fwalk_reent+0x38>
 80121dc:	4629      	mov	r1, r5
 80121de:	4640      	mov	r0, r8
 80121e0:	47c8      	blx	r9
 80121e2:	4306      	orrs	r6, r0
 80121e4:	3568      	adds	r5, #104	; 0x68
 80121e6:	e7ee      	b.n	80121c6 <_fwalk_reent+0x1a>

080121e8 <__libc_init_array>:
 80121e8:	b570      	push	{r4, r5, r6, lr}
 80121ea:	4e0d      	ldr	r6, [pc, #52]	; (8012220 <__libc_init_array+0x38>)
 80121ec:	4c0d      	ldr	r4, [pc, #52]	; (8012224 <__libc_init_array+0x3c>)
 80121ee:	1ba4      	subs	r4, r4, r6
 80121f0:	10a4      	asrs	r4, r4, #2
 80121f2:	2500      	movs	r5, #0
 80121f4:	42a5      	cmp	r5, r4
 80121f6:	d109      	bne.n	801220c <__libc_init_array+0x24>
 80121f8:	4e0b      	ldr	r6, [pc, #44]	; (8012228 <__libc_init_array+0x40>)
 80121fa:	4c0c      	ldr	r4, [pc, #48]	; (801222c <__libc_init_array+0x44>)
 80121fc:	f004 feda 	bl	8016fb4 <_init>
 8012200:	1ba4      	subs	r4, r4, r6
 8012202:	10a4      	asrs	r4, r4, #2
 8012204:	2500      	movs	r5, #0
 8012206:	42a5      	cmp	r5, r4
 8012208:	d105      	bne.n	8012216 <__libc_init_array+0x2e>
 801220a:	bd70      	pop	{r4, r5, r6, pc}
 801220c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012210:	4798      	blx	r3
 8012212:	3501      	adds	r5, #1
 8012214:	e7ee      	b.n	80121f4 <__libc_init_array+0xc>
 8012216:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801221a:	4798      	blx	r3
 801221c:	3501      	adds	r5, #1
 801221e:	e7f2      	b.n	8012206 <__libc_init_array+0x1e>
 8012220:	080176c0 	.word	0x080176c0
 8012224:	080176c0 	.word	0x080176c0
 8012228:	080176c0 	.word	0x080176c0
 801222c:	080176c4 	.word	0x080176c4

08012230 <__swhatbuf_r>:
 8012230:	b570      	push	{r4, r5, r6, lr}
 8012232:	460e      	mov	r6, r1
 8012234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012238:	2900      	cmp	r1, #0
 801223a:	b096      	sub	sp, #88	; 0x58
 801223c:	4614      	mov	r4, r2
 801223e:	461d      	mov	r5, r3
 8012240:	da07      	bge.n	8012252 <__swhatbuf_r+0x22>
 8012242:	2300      	movs	r3, #0
 8012244:	602b      	str	r3, [r5, #0]
 8012246:	89b3      	ldrh	r3, [r6, #12]
 8012248:	061a      	lsls	r2, r3, #24
 801224a:	d410      	bmi.n	801226e <__swhatbuf_r+0x3e>
 801224c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012250:	e00e      	b.n	8012270 <__swhatbuf_r+0x40>
 8012252:	466a      	mov	r2, sp
 8012254:	f003 fd08 	bl	8015c68 <_fstat_r>
 8012258:	2800      	cmp	r0, #0
 801225a:	dbf2      	blt.n	8012242 <__swhatbuf_r+0x12>
 801225c:	9a01      	ldr	r2, [sp, #4]
 801225e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012262:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012266:	425a      	negs	r2, r3
 8012268:	415a      	adcs	r2, r3
 801226a:	602a      	str	r2, [r5, #0]
 801226c:	e7ee      	b.n	801224c <__swhatbuf_r+0x1c>
 801226e:	2340      	movs	r3, #64	; 0x40
 8012270:	2000      	movs	r0, #0
 8012272:	6023      	str	r3, [r4, #0]
 8012274:	b016      	add	sp, #88	; 0x58
 8012276:	bd70      	pop	{r4, r5, r6, pc}

08012278 <__smakebuf_r>:
 8012278:	898b      	ldrh	r3, [r1, #12]
 801227a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801227c:	079d      	lsls	r5, r3, #30
 801227e:	4606      	mov	r6, r0
 8012280:	460c      	mov	r4, r1
 8012282:	d507      	bpl.n	8012294 <__smakebuf_r+0x1c>
 8012284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012288:	6023      	str	r3, [r4, #0]
 801228a:	6123      	str	r3, [r4, #16]
 801228c:	2301      	movs	r3, #1
 801228e:	6163      	str	r3, [r4, #20]
 8012290:	b002      	add	sp, #8
 8012292:	bd70      	pop	{r4, r5, r6, pc}
 8012294:	ab01      	add	r3, sp, #4
 8012296:	466a      	mov	r2, sp
 8012298:	f7ff ffca 	bl	8012230 <__swhatbuf_r>
 801229c:	9900      	ldr	r1, [sp, #0]
 801229e:	4605      	mov	r5, r0
 80122a0:	4630      	mov	r0, r6
 80122a2:	f000 f88b 	bl	80123bc <_malloc_r>
 80122a6:	b948      	cbnz	r0, 80122bc <__smakebuf_r+0x44>
 80122a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122ac:	059a      	lsls	r2, r3, #22
 80122ae:	d4ef      	bmi.n	8012290 <__smakebuf_r+0x18>
 80122b0:	f023 0303 	bic.w	r3, r3, #3
 80122b4:	f043 0302 	orr.w	r3, r3, #2
 80122b8:	81a3      	strh	r3, [r4, #12]
 80122ba:	e7e3      	b.n	8012284 <__smakebuf_r+0xc>
 80122bc:	4b0d      	ldr	r3, [pc, #52]	; (80122f4 <__smakebuf_r+0x7c>)
 80122be:	62b3      	str	r3, [r6, #40]	; 0x28
 80122c0:	89a3      	ldrh	r3, [r4, #12]
 80122c2:	6020      	str	r0, [r4, #0]
 80122c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122c8:	81a3      	strh	r3, [r4, #12]
 80122ca:	9b00      	ldr	r3, [sp, #0]
 80122cc:	6163      	str	r3, [r4, #20]
 80122ce:	9b01      	ldr	r3, [sp, #4]
 80122d0:	6120      	str	r0, [r4, #16]
 80122d2:	b15b      	cbz	r3, 80122ec <__smakebuf_r+0x74>
 80122d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122d8:	4630      	mov	r0, r6
 80122da:	f003 fffd 	bl	80162d8 <_isatty_r>
 80122de:	b128      	cbz	r0, 80122ec <__smakebuf_r+0x74>
 80122e0:	89a3      	ldrh	r3, [r4, #12]
 80122e2:	f023 0303 	bic.w	r3, r3, #3
 80122e6:	f043 0301 	orr.w	r3, r3, #1
 80122ea:	81a3      	strh	r3, [r4, #12]
 80122ec:	89a3      	ldrh	r3, [r4, #12]
 80122ee:	431d      	orrs	r5, r3
 80122f0:	81a5      	strh	r5, [r4, #12]
 80122f2:	e7cd      	b.n	8012290 <__smakebuf_r+0x18>
 80122f4:	08012065 	.word	0x08012065

080122f8 <memcpy>:
 80122f8:	b510      	push	{r4, lr}
 80122fa:	1e43      	subs	r3, r0, #1
 80122fc:	440a      	add	r2, r1
 80122fe:	4291      	cmp	r1, r2
 8012300:	d100      	bne.n	8012304 <memcpy+0xc>
 8012302:	bd10      	pop	{r4, pc}
 8012304:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012308:	f803 4f01 	strb.w	r4, [r3, #1]!
 801230c:	e7f7      	b.n	80122fe <memcpy+0x6>

0801230e <memset>:
 801230e:	4402      	add	r2, r0
 8012310:	4603      	mov	r3, r0
 8012312:	4293      	cmp	r3, r2
 8012314:	d100      	bne.n	8012318 <memset+0xa>
 8012316:	4770      	bx	lr
 8012318:	f803 1b01 	strb.w	r1, [r3], #1
 801231c:	e7f9      	b.n	8012312 <memset+0x4>
	...

08012320 <_free_r>:
 8012320:	b538      	push	{r3, r4, r5, lr}
 8012322:	4605      	mov	r5, r0
 8012324:	2900      	cmp	r1, #0
 8012326:	d045      	beq.n	80123b4 <_free_r+0x94>
 8012328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801232c:	1f0c      	subs	r4, r1, #4
 801232e:	2b00      	cmp	r3, #0
 8012330:	bfb8      	it	lt
 8012332:	18e4      	addlt	r4, r4, r3
 8012334:	f004 f847 	bl	80163c6 <__malloc_lock>
 8012338:	4a1f      	ldr	r2, [pc, #124]	; (80123b8 <_free_r+0x98>)
 801233a:	6813      	ldr	r3, [r2, #0]
 801233c:	4610      	mov	r0, r2
 801233e:	b933      	cbnz	r3, 801234e <_free_r+0x2e>
 8012340:	6063      	str	r3, [r4, #4]
 8012342:	6014      	str	r4, [r2, #0]
 8012344:	4628      	mov	r0, r5
 8012346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801234a:	f004 b83d 	b.w	80163c8 <__malloc_unlock>
 801234e:	42a3      	cmp	r3, r4
 8012350:	d90c      	bls.n	801236c <_free_r+0x4c>
 8012352:	6821      	ldr	r1, [r4, #0]
 8012354:	1862      	adds	r2, r4, r1
 8012356:	4293      	cmp	r3, r2
 8012358:	bf04      	itt	eq
 801235a:	681a      	ldreq	r2, [r3, #0]
 801235c:	685b      	ldreq	r3, [r3, #4]
 801235e:	6063      	str	r3, [r4, #4]
 8012360:	bf04      	itt	eq
 8012362:	1852      	addeq	r2, r2, r1
 8012364:	6022      	streq	r2, [r4, #0]
 8012366:	6004      	str	r4, [r0, #0]
 8012368:	e7ec      	b.n	8012344 <_free_r+0x24>
 801236a:	4613      	mov	r3, r2
 801236c:	685a      	ldr	r2, [r3, #4]
 801236e:	b10a      	cbz	r2, 8012374 <_free_r+0x54>
 8012370:	42a2      	cmp	r2, r4
 8012372:	d9fa      	bls.n	801236a <_free_r+0x4a>
 8012374:	6819      	ldr	r1, [r3, #0]
 8012376:	1858      	adds	r0, r3, r1
 8012378:	42a0      	cmp	r0, r4
 801237a:	d10b      	bne.n	8012394 <_free_r+0x74>
 801237c:	6820      	ldr	r0, [r4, #0]
 801237e:	4401      	add	r1, r0
 8012380:	1858      	adds	r0, r3, r1
 8012382:	4282      	cmp	r2, r0
 8012384:	6019      	str	r1, [r3, #0]
 8012386:	d1dd      	bne.n	8012344 <_free_r+0x24>
 8012388:	6810      	ldr	r0, [r2, #0]
 801238a:	6852      	ldr	r2, [r2, #4]
 801238c:	605a      	str	r2, [r3, #4]
 801238e:	4401      	add	r1, r0
 8012390:	6019      	str	r1, [r3, #0]
 8012392:	e7d7      	b.n	8012344 <_free_r+0x24>
 8012394:	d902      	bls.n	801239c <_free_r+0x7c>
 8012396:	230c      	movs	r3, #12
 8012398:	602b      	str	r3, [r5, #0]
 801239a:	e7d3      	b.n	8012344 <_free_r+0x24>
 801239c:	6820      	ldr	r0, [r4, #0]
 801239e:	1821      	adds	r1, r4, r0
 80123a0:	428a      	cmp	r2, r1
 80123a2:	bf04      	itt	eq
 80123a4:	6811      	ldreq	r1, [r2, #0]
 80123a6:	6852      	ldreq	r2, [r2, #4]
 80123a8:	6062      	str	r2, [r4, #4]
 80123aa:	bf04      	itt	eq
 80123ac:	1809      	addeq	r1, r1, r0
 80123ae:	6021      	streq	r1, [r4, #0]
 80123b0:	605c      	str	r4, [r3, #4]
 80123b2:	e7c7      	b.n	8012344 <_free_r+0x24>
 80123b4:	bd38      	pop	{r3, r4, r5, pc}
 80123b6:	bf00      	nop
 80123b8:	200004d4 	.word	0x200004d4

080123bc <_malloc_r>:
 80123bc:	b570      	push	{r4, r5, r6, lr}
 80123be:	1ccd      	adds	r5, r1, #3
 80123c0:	f025 0503 	bic.w	r5, r5, #3
 80123c4:	3508      	adds	r5, #8
 80123c6:	2d0c      	cmp	r5, #12
 80123c8:	bf38      	it	cc
 80123ca:	250c      	movcc	r5, #12
 80123cc:	2d00      	cmp	r5, #0
 80123ce:	4606      	mov	r6, r0
 80123d0:	db01      	blt.n	80123d6 <_malloc_r+0x1a>
 80123d2:	42a9      	cmp	r1, r5
 80123d4:	d903      	bls.n	80123de <_malloc_r+0x22>
 80123d6:	230c      	movs	r3, #12
 80123d8:	6033      	str	r3, [r6, #0]
 80123da:	2000      	movs	r0, #0
 80123dc:	bd70      	pop	{r4, r5, r6, pc}
 80123de:	f003 fff2 	bl	80163c6 <__malloc_lock>
 80123e2:	4a21      	ldr	r2, [pc, #132]	; (8012468 <_malloc_r+0xac>)
 80123e4:	6814      	ldr	r4, [r2, #0]
 80123e6:	4621      	mov	r1, r4
 80123e8:	b991      	cbnz	r1, 8012410 <_malloc_r+0x54>
 80123ea:	4c20      	ldr	r4, [pc, #128]	; (801246c <_malloc_r+0xb0>)
 80123ec:	6823      	ldr	r3, [r4, #0]
 80123ee:	b91b      	cbnz	r3, 80123f8 <_malloc_r+0x3c>
 80123f0:	4630      	mov	r0, r6
 80123f2:	f001 fbb1 	bl	8013b58 <_sbrk_r>
 80123f6:	6020      	str	r0, [r4, #0]
 80123f8:	4629      	mov	r1, r5
 80123fa:	4630      	mov	r0, r6
 80123fc:	f001 fbac 	bl	8013b58 <_sbrk_r>
 8012400:	1c43      	adds	r3, r0, #1
 8012402:	d124      	bne.n	801244e <_malloc_r+0x92>
 8012404:	230c      	movs	r3, #12
 8012406:	6033      	str	r3, [r6, #0]
 8012408:	4630      	mov	r0, r6
 801240a:	f003 ffdd 	bl	80163c8 <__malloc_unlock>
 801240e:	e7e4      	b.n	80123da <_malloc_r+0x1e>
 8012410:	680b      	ldr	r3, [r1, #0]
 8012412:	1b5b      	subs	r3, r3, r5
 8012414:	d418      	bmi.n	8012448 <_malloc_r+0x8c>
 8012416:	2b0b      	cmp	r3, #11
 8012418:	d90f      	bls.n	801243a <_malloc_r+0x7e>
 801241a:	600b      	str	r3, [r1, #0]
 801241c:	50cd      	str	r5, [r1, r3]
 801241e:	18cc      	adds	r4, r1, r3
 8012420:	4630      	mov	r0, r6
 8012422:	f003 ffd1 	bl	80163c8 <__malloc_unlock>
 8012426:	f104 000b 	add.w	r0, r4, #11
 801242a:	1d23      	adds	r3, r4, #4
 801242c:	f020 0007 	bic.w	r0, r0, #7
 8012430:	1ac3      	subs	r3, r0, r3
 8012432:	d0d3      	beq.n	80123dc <_malloc_r+0x20>
 8012434:	425a      	negs	r2, r3
 8012436:	50e2      	str	r2, [r4, r3]
 8012438:	e7d0      	b.n	80123dc <_malloc_r+0x20>
 801243a:	428c      	cmp	r4, r1
 801243c:	684b      	ldr	r3, [r1, #4]
 801243e:	bf16      	itet	ne
 8012440:	6063      	strne	r3, [r4, #4]
 8012442:	6013      	streq	r3, [r2, #0]
 8012444:	460c      	movne	r4, r1
 8012446:	e7eb      	b.n	8012420 <_malloc_r+0x64>
 8012448:	460c      	mov	r4, r1
 801244a:	6849      	ldr	r1, [r1, #4]
 801244c:	e7cc      	b.n	80123e8 <_malloc_r+0x2c>
 801244e:	1cc4      	adds	r4, r0, #3
 8012450:	f024 0403 	bic.w	r4, r4, #3
 8012454:	42a0      	cmp	r0, r4
 8012456:	d005      	beq.n	8012464 <_malloc_r+0xa8>
 8012458:	1a21      	subs	r1, r4, r0
 801245a:	4630      	mov	r0, r6
 801245c:	f001 fb7c 	bl	8013b58 <_sbrk_r>
 8012460:	3001      	adds	r0, #1
 8012462:	d0cf      	beq.n	8012404 <_malloc_r+0x48>
 8012464:	6025      	str	r5, [r4, #0]
 8012466:	e7db      	b.n	8012420 <_malloc_r+0x64>
 8012468:	200004d4 	.word	0x200004d4
 801246c:	200004d8 	.word	0x200004d8

08012470 <__sfputc_r>:
 8012470:	6893      	ldr	r3, [r2, #8]
 8012472:	3b01      	subs	r3, #1
 8012474:	2b00      	cmp	r3, #0
 8012476:	b410      	push	{r4}
 8012478:	6093      	str	r3, [r2, #8]
 801247a:	da08      	bge.n	801248e <__sfputc_r+0x1e>
 801247c:	6994      	ldr	r4, [r2, #24]
 801247e:	42a3      	cmp	r3, r4
 8012480:	db01      	blt.n	8012486 <__sfputc_r+0x16>
 8012482:	290a      	cmp	r1, #10
 8012484:	d103      	bne.n	801248e <__sfputc_r+0x1e>
 8012486:	f85d 4b04 	ldr.w	r4, [sp], #4
 801248a:	f002 bcc7 	b.w	8014e1c <__swbuf_r>
 801248e:	6813      	ldr	r3, [r2, #0]
 8012490:	1c58      	adds	r0, r3, #1
 8012492:	6010      	str	r0, [r2, #0]
 8012494:	7019      	strb	r1, [r3, #0]
 8012496:	4608      	mov	r0, r1
 8012498:	f85d 4b04 	ldr.w	r4, [sp], #4
 801249c:	4770      	bx	lr

0801249e <__sfputs_r>:
 801249e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124a0:	4606      	mov	r6, r0
 80124a2:	460f      	mov	r7, r1
 80124a4:	4614      	mov	r4, r2
 80124a6:	18d5      	adds	r5, r2, r3
 80124a8:	42ac      	cmp	r4, r5
 80124aa:	d101      	bne.n	80124b0 <__sfputs_r+0x12>
 80124ac:	2000      	movs	r0, #0
 80124ae:	e007      	b.n	80124c0 <__sfputs_r+0x22>
 80124b0:	463a      	mov	r2, r7
 80124b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124b6:	4630      	mov	r0, r6
 80124b8:	f7ff ffda 	bl	8012470 <__sfputc_r>
 80124bc:	1c43      	adds	r3, r0, #1
 80124be:	d1f3      	bne.n	80124a8 <__sfputs_r+0xa>
 80124c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080124c4 <_vfiprintf_r>:
 80124c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c8:	460c      	mov	r4, r1
 80124ca:	b09d      	sub	sp, #116	; 0x74
 80124cc:	4617      	mov	r7, r2
 80124ce:	461d      	mov	r5, r3
 80124d0:	4606      	mov	r6, r0
 80124d2:	b118      	cbz	r0, 80124dc <_vfiprintf_r+0x18>
 80124d4:	6983      	ldr	r3, [r0, #24]
 80124d6:	b90b      	cbnz	r3, 80124dc <_vfiprintf_r+0x18>
 80124d8:	f7ff fde0 	bl	801209c <__sinit>
 80124dc:	4b7c      	ldr	r3, [pc, #496]	; (80126d0 <_vfiprintf_r+0x20c>)
 80124de:	429c      	cmp	r4, r3
 80124e0:	d158      	bne.n	8012594 <_vfiprintf_r+0xd0>
 80124e2:	6874      	ldr	r4, [r6, #4]
 80124e4:	89a3      	ldrh	r3, [r4, #12]
 80124e6:	0718      	lsls	r0, r3, #28
 80124e8:	d55e      	bpl.n	80125a8 <_vfiprintf_r+0xe4>
 80124ea:	6923      	ldr	r3, [r4, #16]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d05b      	beq.n	80125a8 <_vfiprintf_r+0xe4>
 80124f0:	2300      	movs	r3, #0
 80124f2:	9309      	str	r3, [sp, #36]	; 0x24
 80124f4:	2320      	movs	r3, #32
 80124f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124fa:	2330      	movs	r3, #48	; 0x30
 80124fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012500:	9503      	str	r5, [sp, #12]
 8012502:	f04f 0b01 	mov.w	fp, #1
 8012506:	46b8      	mov	r8, r7
 8012508:	4645      	mov	r5, r8
 801250a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801250e:	b10b      	cbz	r3, 8012514 <_vfiprintf_r+0x50>
 8012510:	2b25      	cmp	r3, #37	; 0x25
 8012512:	d154      	bne.n	80125be <_vfiprintf_r+0xfa>
 8012514:	ebb8 0a07 	subs.w	sl, r8, r7
 8012518:	d00b      	beq.n	8012532 <_vfiprintf_r+0x6e>
 801251a:	4653      	mov	r3, sl
 801251c:	463a      	mov	r2, r7
 801251e:	4621      	mov	r1, r4
 8012520:	4630      	mov	r0, r6
 8012522:	f7ff ffbc 	bl	801249e <__sfputs_r>
 8012526:	3001      	adds	r0, #1
 8012528:	f000 80c2 	beq.w	80126b0 <_vfiprintf_r+0x1ec>
 801252c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801252e:	4453      	add	r3, sl
 8012530:	9309      	str	r3, [sp, #36]	; 0x24
 8012532:	f898 3000 	ldrb.w	r3, [r8]
 8012536:	2b00      	cmp	r3, #0
 8012538:	f000 80ba 	beq.w	80126b0 <_vfiprintf_r+0x1ec>
 801253c:	2300      	movs	r3, #0
 801253e:	f04f 32ff 	mov.w	r2, #4294967295
 8012542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012546:	9304      	str	r3, [sp, #16]
 8012548:	9307      	str	r3, [sp, #28]
 801254a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801254e:	931a      	str	r3, [sp, #104]	; 0x68
 8012550:	46a8      	mov	r8, r5
 8012552:	2205      	movs	r2, #5
 8012554:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012558:	485e      	ldr	r0, [pc, #376]	; (80126d4 <_vfiprintf_r+0x210>)
 801255a:	f7f5 fd79 	bl	8008050 <memchr>
 801255e:	9b04      	ldr	r3, [sp, #16]
 8012560:	bb78      	cbnz	r0, 80125c2 <_vfiprintf_r+0xfe>
 8012562:	06d9      	lsls	r1, r3, #27
 8012564:	bf44      	itt	mi
 8012566:	2220      	movmi	r2, #32
 8012568:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801256c:	071a      	lsls	r2, r3, #28
 801256e:	bf44      	itt	mi
 8012570:	222b      	movmi	r2, #43	; 0x2b
 8012572:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012576:	782a      	ldrb	r2, [r5, #0]
 8012578:	2a2a      	cmp	r2, #42	; 0x2a
 801257a:	d02a      	beq.n	80125d2 <_vfiprintf_r+0x10e>
 801257c:	9a07      	ldr	r2, [sp, #28]
 801257e:	46a8      	mov	r8, r5
 8012580:	2000      	movs	r0, #0
 8012582:	250a      	movs	r5, #10
 8012584:	4641      	mov	r1, r8
 8012586:	f811 3b01 	ldrb.w	r3, [r1], #1
 801258a:	3b30      	subs	r3, #48	; 0x30
 801258c:	2b09      	cmp	r3, #9
 801258e:	d969      	bls.n	8012664 <_vfiprintf_r+0x1a0>
 8012590:	b360      	cbz	r0, 80125ec <_vfiprintf_r+0x128>
 8012592:	e024      	b.n	80125de <_vfiprintf_r+0x11a>
 8012594:	4b50      	ldr	r3, [pc, #320]	; (80126d8 <_vfiprintf_r+0x214>)
 8012596:	429c      	cmp	r4, r3
 8012598:	d101      	bne.n	801259e <_vfiprintf_r+0xda>
 801259a:	68b4      	ldr	r4, [r6, #8]
 801259c:	e7a2      	b.n	80124e4 <_vfiprintf_r+0x20>
 801259e:	4b4f      	ldr	r3, [pc, #316]	; (80126dc <_vfiprintf_r+0x218>)
 80125a0:	429c      	cmp	r4, r3
 80125a2:	bf08      	it	eq
 80125a4:	68f4      	ldreq	r4, [r6, #12]
 80125a6:	e79d      	b.n	80124e4 <_vfiprintf_r+0x20>
 80125a8:	4621      	mov	r1, r4
 80125aa:	4630      	mov	r0, r6
 80125ac:	f002 fc9a 	bl	8014ee4 <__swsetup_r>
 80125b0:	2800      	cmp	r0, #0
 80125b2:	d09d      	beq.n	80124f0 <_vfiprintf_r+0x2c>
 80125b4:	f04f 30ff 	mov.w	r0, #4294967295
 80125b8:	b01d      	add	sp, #116	; 0x74
 80125ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125be:	46a8      	mov	r8, r5
 80125c0:	e7a2      	b.n	8012508 <_vfiprintf_r+0x44>
 80125c2:	4a44      	ldr	r2, [pc, #272]	; (80126d4 <_vfiprintf_r+0x210>)
 80125c4:	1a80      	subs	r0, r0, r2
 80125c6:	fa0b f000 	lsl.w	r0, fp, r0
 80125ca:	4318      	orrs	r0, r3
 80125cc:	9004      	str	r0, [sp, #16]
 80125ce:	4645      	mov	r5, r8
 80125d0:	e7be      	b.n	8012550 <_vfiprintf_r+0x8c>
 80125d2:	9a03      	ldr	r2, [sp, #12]
 80125d4:	1d11      	adds	r1, r2, #4
 80125d6:	6812      	ldr	r2, [r2, #0]
 80125d8:	9103      	str	r1, [sp, #12]
 80125da:	2a00      	cmp	r2, #0
 80125dc:	db01      	blt.n	80125e2 <_vfiprintf_r+0x11e>
 80125de:	9207      	str	r2, [sp, #28]
 80125e0:	e004      	b.n	80125ec <_vfiprintf_r+0x128>
 80125e2:	4252      	negs	r2, r2
 80125e4:	f043 0302 	orr.w	r3, r3, #2
 80125e8:	9207      	str	r2, [sp, #28]
 80125ea:	9304      	str	r3, [sp, #16]
 80125ec:	f898 3000 	ldrb.w	r3, [r8]
 80125f0:	2b2e      	cmp	r3, #46	; 0x2e
 80125f2:	d10e      	bne.n	8012612 <_vfiprintf_r+0x14e>
 80125f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80125f8:	2b2a      	cmp	r3, #42	; 0x2a
 80125fa:	d138      	bne.n	801266e <_vfiprintf_r+0x1aa>
 80125fc:	9b03      	ldr	r3, [sp, #12]
 80125fe:	1d1a      	adds	r2, r3, #4
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	9203      	str	r2, [sp, #12]
 8012604:	2b00      	cmp	r3, #0
 8012606:	bfb8      	it	lt
 8012608:	f04f 33ff 	movlt.w	r3, #4294967295
 801260c:	f108 0802 	add.w	r8, r8, #2
 8012610:	9305      	str	r3, [sp, #20]
 8012612:	4d33      	ldr	r5, [pc, #204]	; (80126e0 <_vfiprintf_r+0x21c>)
 8012614:	f898 1000 	ldrb.w	r1, [r8]
 8012618:	2203      	movs	r2, #3
 801261a:	4628      	mov	r0, r5
 801261c:	f7f5 fd18 	bl	8008050 <memchr>
 8012620:	b140      	cbz	r0, 8012634 <_vfiprintf_r+0x170>
 8012622:	2340      	movs	r3, #64	; 0x40
 8012624:	1b40      	subs	r0, r0, r5
 8012626:	fa03 f000 	lsl.w	r0, r3, r0
 801262a:	9b04      	ldr	r3, [sp, #16]
 801262c:	4303      	orrs	r3, r0
 801262e:	f108 0801 	add.w	r8, r8, #1
 8012632:	9304      	str	r3, [sp, #16]
 8012634:	f898 1000 	ldrb.w	r1, [r8]
 8012638:	482a      	ldr	r0, [pc, #168]	; (80126e4 <_vfiprintf_r+0x220>)
 801263a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801263e:	2206      	movs	r2, #6
 8012640:	f108 0701 	add.w	r7, r8, #1
 8012644:	f7f5 fd04 	bl	8008050 <memchr>
 8012648:	2800      	cmp	r0, #0
 801264a:	d037      	beq.n	80126bc <_vfiprintf_r+0x1f8>
 801264c:	4b26      	ldr	r3, [pc, #152]	; (80126e8 <_vfiprintf_r+0x224>)
 801264e:	bb1b      	cbnz	r3, 8012698 <_vfiprintf_r+0x1d4>
 8012650:	9b03      	ldr	r3, [sp, #12]
 8012652:	3307      	adds	r3, #7
 8012654:	f023 0307 	bic.w	r3, r3, #7
 8012658:	3308      	adds	r3, #8
 801265a:	9303      	str	r3, [sp, #12]
 801265c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801265e:	444b      	add	r3, r9
 8012660:	9309      	str	r3, [sp, #36]	; 0x24
 8012662:	e750      	b.n	8012506 <_vfiprintf_r+0x42>
 8012664:	fb05 3202 	mla	r2, r5, r2, r3
 8012668:	2001      	movs	r0, #1
 801266a:	4688      	mov	r8, r1
 801266c:	e78a      	b.n	8012584 <_vfiprintf_r+0xc0>
 801266e:	2300      	movs	r3, #0
 8012670:	f108 0801 	add.w	r8, r8, #1
 8012674:	9305      	str	r3, [sp, #20]
 8012676:	4619      	mov	r1, r3
 8012678:	250a      	movs	r5, #10
 801267a:	4640      	mov	r0, r8
 801267c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012680:	3a30      	subs	r2, #48	; 0x30
 8012682:	2a09      	cmp	r2, #9
 8012684:	d903      	bls.n	801268e <_vfiprintf_r+0x1ca>
 8012686:	2b00      	cmp	r3, #0
 8012688:	d0c3      	beq.n	8012612 <_vfiprintf_r+0x14e>
 801268a:	9105      	str	r1, [sp, #20]
 801268c:	e7c1      	b.n	8012612 <_vfiprintf_r+0x14e>
 801268e:	fb05 2101 	mla	r1, r5, r1, r2
 8012692:	2301      	movs	r3, #1
 8012694:	4680      	mov	r8, r0
 8012696:	e7f0      	b.n	801267a <_vfiprintf_r+0x1b6>
 8012698:	ab03      	add	r3, sp, #12
 801269a:	9300      	str	r3, [sp, #0]
 801269c:	4622      	mov	r2, r4
 801269e:	4b13      	ldr	r3, [pc, #76]	; (80126ec <_vfiprintf_r+0x228>)
 80126a0:	a904      	add	r1, sp, #16
 80126a2:	4630      	mov	r0, r6
 80126a4:	f000 f8b8 	bl	8012818 <_printf_float>
 80126a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80126ac:	4681      	mov	r9, r0
 80126ae:	d1d5      	bne.n	801265c <_vfiprintf_r+0x198>
 80126b0:	89a3      	ldrh	r3, [r4, #12]
 80126b2:	065b      	lsls	r3, r3, #25
 80126b4:	f53f af7e 	bmi.w	80125b4 <_vfiprintf_r+0xf0>
 80126b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126ba:	e77d      	b.n	80125b8 <_vfiprintf_r+0xf4>
 80126bc:	ab03      	add	r3, sp, #12
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	4622      	mov	r2, r4
 80126c2:	4b0a      	ldr	r3, [pc, #40]	; (80126ec <_vfiprintf_r+0x228>)
 80126c4:	a904      	add	r1, sp, #16
 80126c6:	4630      	mov	r0, r6
 80126c8:	f000 fb5c 	bl	8012d84 <_printf_i>
 80126cc:	e7ec      	b.n	80126a8 <_vfiprintf_r+0x1e4>
 80126ce:	bf00      	nop
 80126d0:	080173a8 	.word	0x080173a8
 80126d4:	080173ec 	.word	0x080173ec
 80126d8:	080173c8 	.word	0x080173c8
 80126dc:	08017388 	.word	0x08017388
 80126e0:	080173f2 	.word	0x080173f2
 80126e4:	080173f6 	.word	0x080173f6
 80126e8:	08012819 	.word	0x08012819
 80126ec:	0801249f 	.word	0x0801249f

080126f0 <__cvt>:
 80126f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80126f4:	ec55 4b10 	vmov	r4, r5, d0
 80126f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80126fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80126fe:	2d00      	cmp	r5, #0
 8012700:	460e      	mov	r6, r1
 8012702:	4691      	mov	r9, r2
 8012704:	4619      	mov	r1, r3
 8012706:	bfb8      	it	lt
 8012708:	4622      	movlt	r2, r4
 801270a:	462b      	mov	r3, r5
 801270c:	f027 0720 	bic.w	r7, r7, #32
 8012710:	bfbb      	ittet	lt
 8012712:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012716:	461d      	movlt	r5, r3
 8012718:	2300      	movge	r3, #0
 801271a:	232d      	movlt	r3, #45	; 0x2d
 801271c:	bfb8      	it	lt
 801271e:	4614      	movlt	r4, r2
 8012720:	2f46      	cmp	r7, #70	; 0x46
 8012722:	700b      	strb	r3, [r1, #0]
 8012724:	d004      	beq.n	8012730 <__cvt+0x40>
 8012726:	2f45      	cmp	r7, #69	; 0x45
 8012728:	d100      	bne.n	801272c <__cvt+0x3c>
 801272a:	3601      	adds	r6, #1
 801272c:	2102      	movs	r1, #2
 801272e:	e000      	b.n	8012732 <__cvt+0x42>
 8012730:	2103      	movs	r1, #3
 8012732:	ab03      	add	r3, sp, #12
 8012734:	9301      	str	r3, [sp, #4]
 8012736:	ab02      	add	r3, sp, #8
 8012738:	9300      	str	r3, [sp, #0]
 801273a:	4632      	mov	r2, r6
 801273c:	4653      	mov	r3, sl
 801273e:	ec45 4b10 	vmov	d0, r4, r5
 8012742:	f002 fcd9 	bl	80150f8 <_dtoa_r>
 8012746:	2f47      	cmp	r7, #71	; 0x47
 8012748:	4680      	mov	r8, r0
 801274a:	d102      	bne.n	8012752 <__cvt+0x62>
 801274c:	f019 0f01 	tst.w	r9, #1
 8012750:	d026      	beq.n	80127a0 <__cvt+0xb0>
 8012752:	2f46      	cmp	r7, #70	; 0x46
 8012754:	eb08 0906 	add.w	r9, r8, r6
 8012758:	d111      	bne.n	801277e <__cvt+0x8e>
 801275a:	f898 3000 	ldrb.w	r3, [r8]
 801275e:	2b30      	cmp	r3, #48	; 0x30
 8012760:	d10a      	bne.n	8012778 <__cvt+0x88>
 8012762:	2200      	movs	r2, #0
 8012764:	2300      	movs	r3, #0
 8012766:	4620      	mov	r0, r4
 8012768:	4629      	mov	r1, r5
 801276a:	f7f6 f8e5 	bl	8008938 <__aeabi_dcmpeq>
 801276e:	b918      	cbnz	r0, 8012778 <__cvt+0x88>
 8012770:	f1c6 0601 	rsb	r6, r6, #1
 8012774:	f8ca 6000 	str.w	r6, [sl]
 8012778:	f8da 3000 	ldr.w	r3, [sl]
 801277c:	4499      	add	r9, r3
 801277e:	2200      	movs	r2, #0
 8012780:	2300      	movs	r3, #0
 8012782:	4620      	mov	r0, r4
 8012784:	4629      	mov	r1, r5
 8012786:	f7f6 f8d7 	bl	8008938 <__aeabi_dcmpeq>
 801278a:	b938      	cbnz	r0, 801279c <__cvt+0xac>
 801278c:	2230      	movs	r2, #48	; 0x30
 801278e:	9b03      	ldr	r3, [sp, #12]
 8012790:	454b      	cmp	r3, r9
 8012792:	d205      	bcs.n	80127a0 <__cvt+0xb0>
 8012794:	1c59      	adds	r1, r3, #1
 8012796:	9103      	str	r1, [sp, #12]
 8012798:	701a      	strb	r2, [r3, #0]
 801279a:	e7f8      	b.n	801278e <__cvt+0x9e>
 801279c:	f8cd 900c 	str.w	r9, [sp, #12]
 80127a0:	9b03      	ldr	r3, [sp, #12]
 80127a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80127a4:	eba3 0308 	sub.w	r3, r3, r8
 80127a8:	4640      	mov	r0, r8
 80127aa:	6013      	str	r3, [r2, #0]
 80127ac:	b004      	add	sp, #16
 80127ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080127b2 <__exponent>:
 80127b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127b4:	2900      	cmp	r1, #0
 80127b6:	4604      	mov	r4, r0
 80127b8:	bfba      	itte	lt
 80127ba:	4249      	neglt	r1, r1
 80127bc:	232d      	movlt	r3, #45	; 0x2d
 80127be:	232b      	movge	r3, #43	; 0x2b
 80127c0:	2909      	cmp	r1, #9
 80127c2:	f804 2b02 	strb.w	r2, [r4], #2
 80127c6:	7043      	strb	r3, [r0, #1]
 80127c8:	dd20      	ble.n	801280c <__exponent+0x5a>
 80127ca:	f10d 0307 	add.w	r3, sp, #7
 80127ce:	461f      	mov	r7, r3
 80127d0:	260a      	movs	r6, #10
 80127d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80127d6:	fb06 1115 	mls	r1, r6, r5, r1
 80127da:	3130      	adds	r1, #48	; 0x30
 80127dc:	2d09      	cmp	r5, #9
 80127de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80127e2:	f103 32ff 	add.w	r2, r3, #4294967295
 80127e6:	4629      	mov	r1, r5
 80127e8:	dc09      	bgt.n	80127fe <__exponent+0x4c>
 80127ea:	3130      	adds	r1, #48	; 0x30
 80127ec:	3b02      	subs	r3, #2
 80127ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 80127f2:	42bb      	cmp	r3, r7
 80127f4:	4622      	mov	r2, r4
 80127f6:	d304      	bcc.n	8012802 <__exponent+0x50>
 80127f8:	1a10      	subs	r0, r2, r0
 80127fa:	b003      	add	sp, #12
 80127fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127fe:	4613      	mov	r3, r2
 8012800:	e7e7      	b.n	80127d2 <__exponent+0x20>
 8012802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012806:	f804 2b01 	strb.w	r2, [r4], #1
 801280a:	e7f2      	b.n	80127f2 <__exponent+0x40>
 801280c:	2330      	movs	r3, #48	; 0x30
 801280e:	4419      	add	r1, r3
 8012810:	7083      	strb	r3, [r0, #2]
 8012812:	1d02      	adds	r2, r0, #4
 8012814:	70c1      	strb	r1, [r0, #3]
 8012816:	e7ef      	b.n	80127f8 <__exponent+0x46>

08012818 <_printf_float>:
 8012818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801281c:	b08d      	sub	sp, #52	; 0x34
 801281e:	460c      	mov	r4, r1
 8012820:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012824:	4616      	mov	r6, r2
 8012826:	461f      	mov	r7, r3
 8012828:	4605      	mov	r5, r0
 801282a:	f003 fd79 	bl	8016320 <_localeconv_r>
 801282e:	6803      	ldr	r3, [r0, #0]
 8012830:	9304      	str	r3, [sp, #16]
 8012832:	4618      	mov	r0, r3
 8012834:	f7f5 fc04 	bl	8008040 <strlen>
 8012838:	2300      	movs	r3, #0
 801283a:	930a      	str	r3, [sp, #40]	; 0x28
 801283c:	f8d8 3000 	ldr.w	r3, [r8]
 8012840:	9005      	str	r0, [sp, #20]
 8012842:	3307      	adds	r3, #7
 8012844:	f023 0307 	bic.w	r3, r3, #7
 8012848:	f103 0208 	add.w	r2, r3, #8
 801284c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012850:	f8d4 b000 	ldr.w	fp, [r4]
 8012854:	f8c8 2000 	str.w	r2, [r8]
 8012858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012860:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012864:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012868:	9307      	str	r3, [sp, #28]
 801286a:	f8cd 8018 	str.w	r8, [sp, #24]
 801286e:	f04f 32ff 	mov.w	r2, #4294967295
 8012872:	4ba7      	ldr	r3, [pc, #668]	; (8012b10 <_printf_float+0x2f8>)
 8012874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012878:	f7f6 f890 	bl	800899c <__aeabi_dcmpun>
 801287c:	bb70      	cbnz	r0, 80128dc <_printf_float+0xc4>
 801287e:	f04f 32ff 	mov.w	r2, #4294967295
 8012882:	4ba3      	ldr	r3, [pc, #652]	; (8012b10 <_printf_float+0x2f8>)
 8012884:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012888:	f7f6 f86a 	bl	8008960 <__aeabi_dcmple>
 801288c:	bb30      	cbnz	r0, 80128dc <_printf_float+0xc4>
 801288e:	2200      	movs	r2, #0
 8012890:	2300      	movs	r3, #0
 8012892:	4640      	mov	r0, r8
 8012894:	4649      	mov	r1, r9
 8012896:	f7f6 f859 	bl	800894c <__aeabi_dcmplt>
 801289a:	b110      	cbz	r0, 80128a2 <_printf_float+0x8a>
 801289c:	232d      	movs	r3, #45	; 0x2d
 801289e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128a2:	4a9c      	ldr	r2, [pc, #624]	; (8012b14 <_printf_float+0x2fc>)
 80128a4:	4b9c      	ldr	r3, [pc, #624]	; (8012b18 <_printf_float+0x300>)
 80128a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80128aa:	bf8c      	ite	hi
 80128ac:	4690      	movhi	r8, r2
 80128ae:	4698      	movls	r8, r3
 80128b0:	2303      	movs	r3, #3
 80128b2:	f02b 0204 	bic.w	r2, fp, #4
 80128b6:	6123      	str	r3, [r4, #16]
 80128b8:	6022      	str	r2, [r4, #0]
 80128ba:	f04f 0900 	mov.w	r9, #0
 80128be:	9700      	str	r7, [sp, #0]
 80128c0:	4633      	mov	r3, r6
 80128c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80128c4:	4621      	mov	r1, r4
 80128c6:	4628      	mov	r0, r5
 80128c8:	f000 f9e6 	bl	8012c98 <_printf_common>
 80128cc:	3001      	adds	r0, #1
 80128ce:	f040 808d 	bne.w	80129ec <_printf_float+0x1d4>
 80128d2:	f04f 30ff 	mov.w	r0, #4294967295
 80128d6:	b00d      	add	sp, #52	; 0x34
 80128d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128dc:	4642      	mov	r2, r8
 80128de:	464b      	mov	r3, r9
 80128e0:	4640      	mov	r0, r8
 80128e2:	4649      	mov	r1, r9
 80128e4:	f7f6 f85a 	bl	800899c <__aeabi_dcmpun>
 80128e8:	b110      	cbz	r0, 80128f0 <_printf_float+0xd8>
 80128ea:	4a8c      	ldr	r2, [pc, #560]	; (8012b1c <_printf_float+0x304>)
 80128ec:	4b8c      	ldr	r3, [pc, #560]	; (8012b20 <_printf_float+0x308>)
 80128ee:	e7da      	b.n	80128a6 <_printf_float+0x8e>
 80128f0:	6861      	ldr	r1, [r4, #4]
 80128f2:	1c4b      	adds	r3, r1, #1
 80128f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80128f8:	a80a      	add	r0, sp, #40	; 0x28
 80128fa:	d13e      	bne.n	801297a <_printf_float+0x162>
 80128fc:	2306      	movs	r3, #6
 80128fe:	6063      	str	r3, [r4, #4]
 8012900:	2300      	movs	r3, #0
 8012902:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012906:	ab09      	add	r3, sp, #36	; 0x24
 8012908:	9300      	str	r3, [sp, #0]
 801290a:	ec49 8b10 	vmov	d0, r8, r9
 801290e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012912:	6022      	str	r2, [r4, #0]
 8012914:	f8cd a004 	str.w	sl, [sp, #4]
 8012918:	6861      	ldr	r1, [r4, #4]
 801291a:	4628      	mov	r0, r5
 801291c:	f7ff fee8 	bl	80126f0 <__cvt>
 8012920:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012924:	2b47      	cmp	r3, #71	; 0x47
 8012926:	4680      	mov	r8, r0
 8012928:	d109      	bne.n	801293e <_printf_float+0x126>
 801292a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801292c:	1cd8      	adds	r0, r3, #3
 801292e:	db02      	blt.n	8012936 <_printf_float+0x11e>
 8012930:	6862      	ldr	r2, [r4, #4]
 8012932:	4293      	cmp	r3, r2
 8012934:	dd47      	ble.n	80129c6 <_printf_float+0x1ae>
 8012936:	f1aa 0a02 	sub.w	sl, sl, #2
 801293a:	fa5f fa8a 	uxtb.w	sl, sl
 801293e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012942:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012944:	d824      	bhi.n	8012990 <_printf_float+0x178>
 8012946:	3901      	subs	r1, #1
 8012948:	4652      	mov	r2, sl
 801294a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801294e:	9109      	str	r1, [sp, #36]	; 0x24
 8012950:	f7ff ff2f 	bl	80127b2 <__exponent>
 8012954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012956:	1813      	adds	r3, r2, r0
 8012958:	2a01      	cmp	r2, #1
 801295a:	4681      	mov	r9, r0
 801295c:	6123      	str	r3, [r4, #16]
 801295e:	dc02      	bgt.n	8012966 <_printf_float+0x14e>
 8012960:	6822      	ldr	r2, [r4, #0]
 8012962:	07d1      	lsls	r1, r2, #31
 8012964:	d501      	bpl.n	801296a <_printf_float+0x152>
 8012966:	3301      	adds	r3, #1
 8012968:	6123      	str	r3, [r4, #16]
 801296a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801296e:	2b00      	cmp	r3, #0
 8012970:	d0a5      	beq.n	80128be <_printf_float+0xa6>
 8012972:	232d      	movs	r3, #45	; 0x2d
 8012974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012978:	e7a1      	b.n	80128be <_printf_float+0xa6>
 801297a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801297e:	f000 8177 	beq.w	8012c70 <_printf_float+0x458>
 8012982:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012986:	d1bb      	bne.n	8012900 <_printf_float+0xe8>
 8012988:	2900      	cmp	r1, #0
 801298a:	d1b9      	bne.n	8012900 <_printf_float+0xe8>
 801298c:	2301      	movs	r3, #1
 801298e:	e7b6      	b.n	80128fe <_printf_float+0xe6>
 8012990:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012994:	d119      	bne.n	80129ca <_printf_float+0x1b2>
 8012996:	2900      	cmp	r1, #0
 8012998:	6863      	ldr	r3, [r4, #4]
 801299a:	dd0c      	ble.n	80129b6 <_printf_float+0x19e>
 801299c:	6121      	str	r1, [r4, #16]
 801299e:	b913      	cbnz	r3, 80129a6 <_printf_float+0x18e>
 80129a0:	6822      	ldr	r2, [r4, #0]
 80129a2:	07d2      	lsls	r2, r2, #31
 80129a4:	d502      	bpl.n	80129ac <_printf_float+0x194>
 80129a6:	3301      	adds	r3, #1
 80129a8:	440b      	add	r3, r1
 80129aa:	6123      	str	r3, [r4, #16]
 80129ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80129b0:	f04f 0900 	mov.w	r9, #0
 80129b4:	e7d9      	b.n	801296a <_printf_float+0x152>
 80129b6:	b913      	cbnz	r3, 80129be <_printf_float+0x1a6>
 80129b8:	6822      	ldr	r2, [r4, #0]
 80129ba:	07d0      	lsls	r0, r2, #31
 80129bc:	d501      	bpl.n	80129c2 <_printf_float+0x1aa>
 80129be:	3302      	adds	r3, #2
 80129c0:	e7f3      	b.n	80129aa <_printf_float+0x192>
 80129c2:	2301      	movs	r3, #1
 80129c4:	e7f1      	b.n	80129aa <_printf_float+0x192>
 80129c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80129ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80129ce:	4293      	cmp	r3, r2
 80129d0:	db05      	blt.n	80129de <_printf_float+0x1c6>
 80129d2:	6822      	ldr	r2, [r4, #0]
 80129d4:	6123      	str	r3, [r4, #16]
 80129d6:	07d1      	lsls	r1, r2, #31
 80129d8:	d5e8      	bpl.n	80129ac <_printf_float+0x194>
 80129da:	3301      	adds	r3, #1
 80129dc:	e7e5      	b.n	80129aa <_printf_float+0x192>
 80129de:	2b00      	cmp	r3, #0
 80129e0:	bfd4      	ite	le
 80129e2:	f1c3 0302 	rsble	r3, r3, #2
 80129e6:	2301      	movgt	r3, #1
 80129e8:	4413      	add	r3, r2
 80129ea:	e7de      	b.n	80129aa <_printf_float+0x192>
 80129ec:	6823      	ldr	r3, [r4, #0]
 80129ee:	055a      	lsls	r2, r3, #21
 80129f0:	d407      	bmi.n	8012a02 <_printf_float+0x1ea>
 80129f2:	6923      	ldr	r3, [r4, #16]
 80129f4:	4642      	mov	r2, r8
 80129f6:	4631      	mov	r1, r6
 80129f8:	4628      	mov	r0, r5
 80129fa:	47b8      	blx	r7
 80129fc:	3001      	adds	r0, #1
 80129fe:	d12b      	bne.n	8012a58 <_printf_float+0x240>
 8012a00:	e767      	b.n	80128d2 <_printf_float+0xba>
 8012a02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012a06:	f240 80dc 	bls.w	8012bc2 <_printf_float+0x3aa>
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012a12:	f7f5 ff91 	bl	8008938 <__aeabi_dcmpeq>
 8012a16:	2800      	cmp	r0, #0
 8012a18:	d033      	beq.n	8012a82 <_printf_float+0x26a>
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	4a41      	ldr	r2, [pc, #260]	; (8012b24 <_printf_float+0x30c>)
 8012a1e:	4631      	mov	r1, r6
 8012a20:	4628      	mov	r0, r5
 8012a22:	47b8      	blx	r7
 8012a24:	3001      	adds	r0, #1
 8012a26:	f43f af54 	beq.w	80128d2 <_printf_float+0xba>
 8012a2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	db02      	blt.n	8012a38 <_printf_float+0x220>
 8012a32:	6823      	ldr	r3, [r4, #0]
 8012a34:	07d8      	lsls	r0, r3, #31
 8012a36:	d50f      	bpl.n	8012a58 <_printf_float+0x240>
 8012a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a3c:	4631      	mov	r1, r6
 8012a3e:	4628      	mov	r0, r5
 8012a40:	47b8      	blx	r7
 8012a42:	3001      	adds	r0, #1
 8012a44:	f43f af45 	beq.w	80128d2 <_printf_float+0xba>
 8012a48:	f04f 0800 	mov.w	r8, #0
 8012a4c:	f104 091a 	add.w	r9, r4, #26
 8012a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a52:	3b01      	subs	r3, #1
 8012a54:	4543      	cmp	r3, r8
 8012a56:	dc09      	bgt.n	8012a6c <_printf_float+0x254>
 8012a58:	6823      	ldr	r3, [r4, #0]
 8012a5a:	079b      	lsls	r3, r3, #30
 8012a5c:	f100 8103 	bmi.w	8012c66 <_printf_float+0x44e>
 8012a60:	68e0      	ldr	r0, [r4, #12]
 8012a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a64:	4298      	cmp	r0, r3
 8012a66:	bfb8      	it	lt
 8012a68:	4618      	movlt	r0, r3
 8012a6a:	e734      	b.n	80128d6 <_printf_float+0xbe>
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	464a      	mov	r2, r9
 8012a70:	4631      	mov	r1, r6
 8012a72:	4628      	mov	r0, r5
 8012a74:	47b8      	blx	r7
 8012a76:	3001      	adds	r0, #1
 8012a78:	f43f af2b 	beq.w	80128d2 <_printf_float+0xba>
 8012a7c:	f108 0801 	add.w	r8, r8, #1
 8012a80:	e7e6      	b.n	8012a50 <_printf_float+0x238>
 8012a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	dc2b      	bgt.n	8012ae0 <_printf_float+0x2c8>
 8012a88:	2301      	movs	r3, #1
 8012a8a:	4a26      	ldr	r2, [pc, #152]	; (8012b24 <_printf_float+0x30c>)
 8012a8c:	4631      	mov	r1, r6
 8012a8e:	4628      	mov	r0, r5
 8012a90:	47b8      	blx	r7
 8012a92:	3001      	adds	r0, #1
 8012a94:	f43f af1d 	beq.w	80128d2 <_printf_float+0xba>
 8012a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a9a:	b923      	cbnz	r3, 8012aa6 <_printf_float+0x28e>
 8012a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a9e:	b913      	cbnz	r3, 8012aa6 <_printf_float+0x28e>
 8012aa0:	6823      	ldr	r3, [r4, #0]
 8012aa2:	07d9      	lsls	r1, r3, #31
 8012aa4:	d5d8      	bpl.n	8012a58 <_printf_float+0x240>
 8012aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012aaa:	4631      	mov	r1, r6
 8012aac:	4628      	mov	r0, r5
 8012aae:	47b8      	blx	r7
 8012ab0:	3001      	adds	r0, #1
 8012ab2:	f43f af0e 	beq.w	80128d2 <_printf_float+0xba>
 8012ab6:	f04f 0900 	mov.w	r9, #0
 8012aba:	f104 0a1a 	add.w	sl, r4, #26
 8012abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ac0:	425b      	negs	r3, r3
 8012ac2:	454b      	cmp	r3, r9
 8012ac4:	dc01      	bgt.n	8012aca <_printf_float+0x2b2>
 8012ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ac8:	e794      	b.n	80129f4 <_printf_float+0x1dc>
 8012aca:	2301      	movs	r3, #1
 8012acc:	4652      	mov	r2, sl
 8012ace:	4631      	mov	r1, r6
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	47b8      	blx	r7
 8012ad4:	3001      	adds	r0, #1
 8012ad6:	f43f aefc 	beq.w	80128d2 <_printf_float+0xba>
 8012ada:	f109 0901 	add.w	r9, r9, #1
 8012ade:	e7ee      	b.n	8012abe <_printf_float+0x2a6>
 8012ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	bfa8      	it	ge
 8012ae8:	461a      	movge	r2, r3
 8012aea:	2a00      	cmp	r2, #0
 8012aec:	4691      	mov	r9, r2
 8012aee:	dd07      	ble.n	8012b00 <_printf_float+0x2e8>
 8012af0:	4613      	mov	r3, r2
 8012af2:	4631      	mov	r1, r6
 8012af4:	4642      	mov	r2, r8
 8012af6:	4628      	mov	r0, r5
 8012af8:	47b8      	blx	r7
 8012afa:	3001      	adds	r0, #1
 8012afc:	f43f aee9 	beq.w	80128d2 <_printf_float+0xba>
 8012b00:	f104 031a 	add.w	r3, r4, #26
 8012b04:	f04f 0b00 	mov.w	fp, #0
 8012b08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012b0c:	9306      	str	r3, [sp, #24]
 8012b0e:	e015      	b.n	8012b3c <_printf_float+0x324>
 8012b10:	7fefffff 	.word	0x7fefffff
 8012b14:	08017401 	.word	0x08017401
 8012b18:	080173fd 	.word	0x080173fd
 8012b1c:	08017409 	.word	0x08017409
 8012b20:	08017405 	.word	0x08017405
 8012b24:	0801744a 	.word	0x0801744a
 8012b28:	2301      	movs	r3, #1
 8012b2a:	9a06      	ldr	r2, [sp, #24]
 8012b2c:	4631      	mov	r1, r6
 8012b2e:	4628      	mov	r0, r5
 8012b30:	47b8      	blx	r7
 8012b32:	3001      	adds	r0, #1
 8012b34:	f43f aecd 	beq.w	80128d2 <_printf_float+0xba>
 8012b38:	f10b 0b01 	add.w	fp, fp, #1
 8012b3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012b40:	ebaa 0309 	sub.w	r3, sl, r9
 8012b44:	455b      	cmp	r3, fp
 8012b46:	dcef      	bgt.n	8012b28 <_printf_float+0x310>
 8012b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	44d0      	add	r8, sl
 8012b50:	db15      	blt.n	8012b7e <_printf_float+0x366>
 8012b52:	6823      	ldr	r3, [r4, #0]
 8012b54:	07da      	lsls	r2, r3, #31
 8012b56:	d412      	bmi.n	8012b7e <_printf_float+0x366>
 8012b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b5c:	eba3 020a 	sub.w	r2, r3, sl
 8012b60:	eba3 0a01 	sub.w	sl, r3, r1
 8012b64:	4592      	cmp	sl, r2
 8012b66:	bfa8      	it	ge
 8012b68:	4692      	movge	sl, r2
 8012b6a:	f1ba 0f00 	cmp.w	sl, #0
 8012b6e:	dc0e      	bgt.n	8012b8e <_printf_float+0x376>
 8012b70:	f04f 0800 	mov.w	r8, #0
 8012b74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b78:	f104 091a 	add.w	r9, r4, #26
 8012b7c:	e019      	b.n	8012bb2 <_printf_float+0x39a>
 8012b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b82:	4631      	mov	r1, r6
 8012b84:	4628      	mov	r0, r5
 8012b86:	47b8      	blx	r7
 8012b88:	3001      	adds	r0, #1
 8012b8a:	d1e5      	bne.n	8012b58 <_printf_float+0x340>
 8012b8c:	e6a1      	b.n	80128d2 <_printf_float+0xba>
 8012b8e:	4653      	mov	r3, sl
 8012b90:	4642      	mov	r2, r8
 8012b92:	4631      	mov	r1, r6
 8012b94:	4628      	mov	r0, r5
 8012b96:	47b8      	blx	r7
 8012b98:	3001      	adds	r0, #1
 8012b9a:	d1e9      	bne.n	8012b70 <_printf_float+0x358>
 8012b9c:	e699      	b.n	80128d2 <_printf_float+0xba>
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	464a      	mov	r2, r9
 8012ba2:	4631      	mov	r1, r6
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	47b8      	blx	r7
 8012ba8:	3001      	adds	r0, #1
 8012baa:	f43f ae92 	beq.w	80128d2 <_printf_float+0xba>
 8012bae:	f108 0801 	add.w	r8, r8, #1
 8012bb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012bb6:	1a9b      	subs	r3, r3, r2
 8012bb8:	eba3 030a 	sub.w	r3, r3, sl
 8012bbc:	4543      	cmp	r3, r8
 8012bbe:	dcee      	bgt.n	8012b9e <_printf_float+0x386>
 8012bc0:	e74a      	b.n	8012a58 <_printf_float+0x240>
 8012bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bc4:	2a01      	cmp	r2, #1
 8012bc6:	dc01      	bgt.n	8012bcc <_printf_float+0x3b4>
 8012bc8:	07db      	lsls	r3, r3, #31
 8012bca:	d53a      	bpl.n	8012c42 <_printf_float+0x42a>
 8012bcc:	2301      	movs	r3, #1
 8012bce:	4642      	mov	r2, r8
 8012bd0:	4631      	mov	r1, r6
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	47b8      	blx	r7
 8012bd6:	3001      	adds	r0, #1
 8012bd8:	f43f ae7b 	beq.w	80128d2 <_printf_float+0xba>
 8012bdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012be0:	4631      	mov	r1, r6
 8012be2:	4628      	mov	r0, r5
 8012be4:	47b8      	blx	r7
 8012be6:	3001      	adds	r0, #1
 8012be8:	f108 0801 	add.w	r8, r8, #1
 8012bec:	f43f ae71 	beq.w	80128d2 <_printf_float+0xba>
 8012bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	f103 3aff 	add.w	sl, r3, #4294967295
 8012bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	f7f5 fe9b 	bl	8008938 <__aeabi_dcmpeq>
 8012c02:	b9c8      	cbnz	r0, 8012c38 <_printf_float+0x420>
 8012c04:	4653      	mov	r3, sl
 8012c06:	4642      	mov	r2, r8
 8012c08:	4631      	mov	r1, r6
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	47b8      	blx	r7
 8012c0e:	3001      	adds	r0, #1
 8012c10:	d10e      	bne.n	8012c30 <_printf_float+0x418>
 8012c12:	e65e      	b.n	80128d2 <_printf_float+0xba>
 8012c14:	2301      	movs	r3, #1
 8012c16:	4652      	mov	r2, sl
 8012c18:	4631      	mov	r1, r6
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	47b8      	blx	r7
 8012c1e:	3001      	adds	r0, #1
 8012c20:	f43f ae57 	beq.w	80128d2 <_printf_float+0xba>
 8012c24:	f108 0801 	add.w	r8, r8, #1
 8012c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c2a:	3b01      	subs	r3, #1
 8012c2c:	4543      	cmp	r3, r8
 8012c2e:	dcf1      	bgt.n	8012c14 <_printf_float+0x3fc>
 8012c30:	464b      	mov	r3, r9
 8012c32:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012c36:	e6de      	b.n	80129f6 <_printf_float+0x1de>
 8012c38:	f04f 0800 	mov.w	r8, #0
 8012c3c:	f104 0a1a 	add.w	sl, r4, #26
 8012c40:	e7f2      	b.n	8012c28 <_printf_float+0x410>
 8012c42:	2301      	movs	r3, #1
 8012c44:	e7df      	b.n	8012c06 <_printf_float+0x3ee>
 8012c46:	2301      	movs	r3, #1
 8012c48:	464a      	mov	r2, r9
 8012c4a:	4631      	mov	r1, r6
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	47b8      	blx	r7
 8012c50:	3001      	adds	r0, #1
 8012c52:	f43f ae3e 	beq.w	80128d2 <_printf_float+0xba>
 8012c56:	f108 0801 	add.w	r8, r8, #1
 8012c5a:	68e3      	ldr	r3, [r4, #12]
 8012c5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c5e:	1a9b      	subs	r3, r3, r2
 8012c60:	4543      	cmp	r3, r8
 8012c62:	dcf0      	bgt.n	8012c46 <_printf_float+0x42e>
 8012c64:	e6fc      	b.n	8012a60 <_printf_float+0x248>
 8012c66:	f04f 0800 	mov.w	r8, #0
 8012c6a:	f104 0919 	add.w	r9, r4, #25
 8012c6e:	e7f4      	b.n	8012c5a <_printf_float+0x442>
 8012c70:	2900      	cmp	r1, #0
 8012c72:	f43f ae8b 	beq.w	801298c <_printf_float+0x174>
 8012c76:	2300      	movs	r3, #0
 8012c78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012c7c:	ab09      	add	r3, sp, #36	; 0x24
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	ec49 8b10 	vmov	d0, r8, r9
 8012c84:	6022      	str	r2, [r4, #0]
 8012c86:	f8cd a004 	str.w	sl, [sp, #4]
 8012c8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012c8e:	4628      	mov	r0, r5
 8012c90:	f7ff fd2e 	bl	80126f0 <__cvt>
 8012c94:	4680      	mov	r8, r0
 8012c96:	e648      	b.n	801292a <_printf_float+0x112>

08012c98 <_printf_common>:
 8012c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c9c:	4691      	mov	r9, r2
 8012c9e:	461f      	mov	r7, r3
 8012ca0:	688a      	ldr	r2, [r1, #8]
 8012ca2:	690b      	ldr	r3, [r1, #16]
 8012ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	bfb8      	it	lt
 8012cac:	4613      	movlt	r3, r2
 8012cae:	f8c9 3000 	str.w	r3, [r9]
 8012cb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012cb6:	4606      	mov	r6, r0
 8012cb8:	460c      	mov	r4, r1
 8012cba:	b112      	cbz	r2, 8012cc2 <_printf_common+0x2a>
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	f8c9 3000 	str.w	r3, [r9]
 8012cc2:	6823      	ldr	r3, [r4, #0]
 8012cc4:	0699      	lsls	r1, r3, #26
 8012cc6:	bf42      	ittt	mi
 8012cc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012ccc:	3302      	addmi	r3, #2
 8012cce:	f8c9 3000 	strmi.w	r3, [r9]
 8012cd2:	6825      	ldr	r5, [r4, #0]
 8012cd4:	f015 0506 	ands.w	r5, r5, #6
 8012cd8:	d107      	bne.n	8012cea <_printf_common+0x52>
 8012cda:	f104 0a19 	add.w	sl, r4, #25
 8012cde:	68e3      	ldr	r3, [r4, #12]
 8012ce0:	f8d9 2000 	ldr.w	r2, [r9]
 8012ce4:	1a9b      	subs	r3, r3, r2
 8012ce6:	42ab      	cmp	r3, r5
 8012ce8:	dc28      	bgt.n	8012d3c <_printf_common+0xa4>
 8012cea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012cee:	6822      	ldr	r2, [r4, #0]
 8012cf0:	3300      	adds	r3, #0
 8012cf2:	bf18      	it	ne
 8012cf4:	2301      	movne	r3, #1
 8012cf6:	0692      	lsls	r2, r2, #26
 8012cf8:	d42d      	bmi.n	8012d56 <_printf_common+0xbe>
 8012cfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012cfe:	4639      	mov	r1, r7
 8012d00:	4630      	mov	r0, r6
 8012d02:	47c0      	blx	r8
 8012d04:	3001      	adds	r0, #1
 8012d06:	d020      	beq.n	8012d4a <_printf_common+0xb2>
 8012d08:	6823      	ldr	r3, [r4, #0]
 8012d0a:	68e5      	ldr	r5, [r4, #12]
 8012d0c:	f8d9 2000 	ldr.w	r2, [r9]
 8012d10:	f003 0306 	and.w	r3, r3, #6
 8012d14:	2b04      	cmp	r3, #4
 8012d16:	bf08      	it	eq
 8012d18:	1aad      	subeq	r5, r5, r2
 8012d1a:	68a3      	ldr	r3, [r4, #8]
 8012d1c:	6922      	ldr	r2, [r4, #16]
 8012d1e:	bf0c      	ite	eq
 8012d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d24:	2500      	movne	r5, #0
 8012d26:	4293      	cmp	r3, r2
 8012d28:	bfc4      	itt	gt
 8012d2a:	1a9b      	subgt	r3, r3, r2
 8012d2c:	18ed      	addgt	r5, r5, r3
 8012d2e:	f04f 0900 	mov.w	r9, #0
 8012d32:	341a      	adds	r4, #26
 8012d34:	454d      	cmp	r5, r9
 8012d36:	d11a      	bne.n	8012d6e <_printf_common+0xd6>
 8012d38:	2000      	movs	r0, #0
 8012d3a:	e008      	b.n	8012d4e <_printf_common+0xb6>
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	4652      	mov	r2, sl
 8012d40:	4639      	mov	r1, r7
 8012d42:	4630      	mov	r0, r6
 8012d44:	47c0      	blx	r8
 8012d46:	3001      	adds	r0, #1
 8012d48:	d103      	bne.n	8012d52 <_printf_common+0xba>
 8012d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d52:	3501      	adds	r5, #1
 8012d54:	e7c3      	b.n	8012cde <_printf_common+0x46>
 8012d56:	18e1      	adds	r1, r4, r3
 8012d58:	1c5a      	adds	r2, r3, #1
 8012d5a:	2030      	movs	r0, #48	; 0x30
 8012d5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d60:	4422      	add	r2, r4
 8012d62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d6a:	3302      	adds	r3, #2
 8012d6c:	e7c5      	b.n	8012cfa <_printf_common+0x62>
 8012d6e:	2301      	movs	r3, #1
 8012d70:	4622      	mov	r2, r4
 8012d72:	4639      	mov	r1, r7
 8012d74:	4630      	mov	r0, r6
 8012d76:	47c0      	blx	r8
 8012d78:	3001      	adds	r0, #1
 8012d7a:	d0e6      	beq.n	8012d4a <_printf_common+0xb2>
 8012d7c:	f109 0901 	add.w	r9, r9, #1
 8012d80:	e7d8      	b.n	8012d34 <_printf_common+0x9c>
	...

08012d84 <_printf_i>:
 8012d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012d8c:	460c      	mov	r4, r1
 8012d8e:	7e09      	ldrb	r1, [r1, #24]
 8012d90:	b085      	sub	sp, #20
 8012d92:	296e      	cmp	r1, #110	; 0x6e
 8012d94:	4617      	mov	r7, r2
 8012d96:	4606      	mov	r6, r0
 8012d98:	4698      	mov	r8, r3
 8012d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d9c:	f000 80b3 	beq.w	8012f06 <_printf_i+0x182>
 8012da0:	d822      	bhi.n	8012de8 <_printf_i+0x64>
 8012da2:	2963      	cmp	r1, #99	; 0x63
 8012da4:	d036      	beq.n	8012e14 <_printf_i+0x90>
 8012da6:	d80a      	bhi.n	8012dbe <_printf_i+0x3a>
 8012da8:	2900      	cmp	r1, #0
 8012daa:	f000 80b9 	beq.w	8012f20 <_printf_i+0x19c>
 8012dae:	2958      	cmp	r1, #88	; 0x58
 8012db0:	f000 8083 	beq.w	8012eba <_printf_i+0x136>
 8012db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012db8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012dbc:	e032      	b.n	8012e24 <_printf_i+0xa0>
 8012dbe:	2964      	cmp	r1, #100	; 0x64
 8012dc0:	d001      	beq.n	8012dc6 <_printf_i+0x42>
 8012dc2:	2969      	cmp	r1, #105	; 0x69
 8012dc4:	d1f6      	bne.n	8012db4 <_printf_i+0x30>
 8012dc6:	6820      	ldr	r0, [r4, #0]
 8012dc8:	6813      	ldr	r3, [r2, #0]
 8012dca:	0605      	lsls	r5, r0, #24
 8012dcc:	f103 0104 	add.w	r1, r3, #4
 8012dd0:	d52a      	bpl.n	8012e28 <_printf_i+0xa4>
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	6011      	str	r1, [r2, #0]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	da03      	bge.n	8012de2 <_printf_i+0x5e>
 8012dda:	222d      	movs	r2, #45	; 0x2d
 8012ddc:	425b      	negs	r3, r3
 8012dde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012de2:	486f      	ldr	r0, [pc, #444]	; (8012fa0 <_printf_i+0x21c>)
 8012de4:	220a      	movs	r2, #10
 8012de6:	e039      	b.n	8012e5c <_printf_i+0xd8>
 8012de8:	2973      	cmp	r1, #115	; 0x73
 8012dea:	f000 809d 	beq.w	8012f28 <_printf_i+0x1a4>
 8012dee:	d808      	bhi.n	8012e02 <_printf_i+0x7e>
 8012df0:	296f      	cmp	r1, #111	; 0x6f
 8012df2:	d020      	beq.n	8012e36 <_printf_i+0xb2>
 8012df4:	2970      	cmp	r1, #112	; 0x70
 8012df6:	d1dd      	bne.n	8012db4 <_printf_i+0x30>
 8012df8:	6823      	ldr	r3, [r4, #0]
 8012dfa:	f043 0320 	orr.w	r3, r3, #32
 8012dfe:	6023      	str	r3, [r4, #0]
 8012e00:	e003      	b.n	8012e0a <_printf_i+0x86>
 8012e02:	2975      	cmp	r1, #117	; 0x75
 8012e04:	d017      	beq.n	8012e36 <_printf_i+0xb2>
 8012e06:	2978      	cmp	r1, #120	; 0x78
 8012e08:	d1d4      	bne.n	8012db4 <_printf_i+0x30>
 8012e0a:	2378      	movs	r3, #120	; 0x78
 8012e0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012e10:	4864      	ldr	r0, [pc, #400]	; (8012fa4 <_printf_i+0x220>)
 8012e12:	e055      	b.n	8012ec0 <_printf_i+0x13c>
 8012e14:	6813      	ldr	r3, [r2, #0]
 8012e16:	1d19      	adds	r1, r3, #4
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	6011      	str	r1, [r2, #0]
 8012e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e24:	2301      	movs	r3, #1
 8012e26:	e08c      	b.n	8012f42 <_printf_i+0x1be>
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	6011      	str	r1, [r2, #0]
 8012e2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012e30:	bf18      	it	ne
 8012e32:	b21b      	sxthne	r3, r3
 8012e34:	e7cf      	b.n	8012dd6 <_printf_i+0x52>
 8012e36:	6813      	ldr	r3, [r2, #0]
 8012e38:	6825      	ldr	r5, [r4, #0]
 8012e3a:	1d18      	adds	r0, r3, #4
 8012e3c:	6010      	str	r0, [r2, #0]
 8012e3e:	0628      	lsls	r0, r5, #24
 8012e40:	d501      	bpl.n	8012e46 <_printf_i+0xc2>
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	e002      	b.n	8012e4c <_printf_i+0xc8>
 8012e46:	0668      	lsls	r0, r5, #25
 8012e48:	d5fb      	bpl.n	8012e42 <_printf_i+0xbe>
 8012e4a:	881b      	ldrh	r3, [r3, #0]
 8012e4c:	4854      	ldr	r0, [pc, #336]	; (8012fa0 <_printf_i+0x21c>)
 8012e4e:	296f      	cmp	r1, #111	; 0x6f
 8012e50:	bf14      	ite	ne
 8012e52:	220a      	movne	r2, #10
 8012e54:	2208      	moveq	r2, #8
 8012e56:	2100      	movs	r1, #0
 8012e58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e5c:	6865      	ldr	r5, [r4, #4]
 8012e5e:	60a5      	str	r5, [r4, #8]
 8012e60:	2d00      	cmp	r5, #0
 8012e62:	f2c0 8095 	blt.w	8012f90 <_printf_i+0x20c>
 8012e66:	6821      	ldr	r1, [r4, #0]
 8012e68:	f021 0104 	bic.w	r1, r1, #4
 8012e6c:	6021      	str	r1, [r4, #0]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d13d      	bne.n	8012eee <_printf_i+0x16a>
 8012e72:	2d00      	cmp	r5, #0
 8012e74:	f040 808e 	bne.w	8012f94 <_printf_i+0x210>
 8012e78:	4665      	mov	r5, ip
 8012e7a:	2a08      	cmp	r2, #8
 8012e7c:	d10b      	bne.n	8012e96 <_printf_i+0x112>
 8012e7e:	6823      	ldr	r3, [r4, #0]
 8012e80:	07db      	lsls	r3, r3, #31
 8012e82:	d508      	bpl.n	8012e96 <_printf_i+0x112>
 8012e84:	6923      	ldr	r3, [r4, #16]
 8012e86:	6862      	ldr	r2, [r4, #4]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	bfde      	ittt	le
 8012e8c:	2330      	movle	r3, #48	; 0x30
 8012e8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012e92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012e96:	ebac 0305 	sub.w	r3, ip, r5
 8012e9a:	6123      	str	r3, [r4, #16]
 8012e9c:	f8cd 8000 	str.w	r8, [sp]
 8012ea0:	463b      	mov	r3, r7
 8012ea2:	aa03      	add	r2, sp, #12
 8012ea4:	4621      	mov	r1, r4
 8012ea6:	4630      	mov	r0, r6
 8012ea8:	f7ff fef6 	bl	8012c98 <_printf_common>
 8012eac:	3001      	adds	r0, #1
 8012eae:	d14d      	bne.n	8012f4c <_printf_i+0x1c8>
 8012eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb4:	b005      	add	sp, #20
 8012eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012eba:	4839      	ldr	r0, [pc, #228]	; (8012fa0 <_printf_i+0x21c>)
 8012ebc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012ec0:	6813      	ldr	r3, [r2, #0]
 8012ec2:	6821      	ldr	r1, [r4, #0]
 8012ec4:	1d1d      	adds	r5, r3, #4
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	6015      	str	r5, [r2, #0]
 8012eca:	060a      	lsls	r2, r1, #24
 8012ecc:	d50b      	bpl.n	8012ee6 <_printf_i+0x162>
 8012ece:	07ca      	lsls	r2, r1, #31
 8012ed0:	bf44      	itt	mi
 8012ed2:	f041 0120 	orrmi.w	r1, r1, #32
 8012ed6:	6021      	strmi	r1, [r4, #0]
 8012ed8:	b91b      	cbnz	r3, 8012ee2 <_printf_i+0x15e>
 8012eda:	6822      	ldr	r2, [r4, #0]
 8012edc:	f022 0220 	bic.w	r2, r2, #32
 8012ee0:	6022      	str	r2, [r4, #0]
 8012ee2:	2210      	movs	r2, #16
 8012ee4:	e7b7      	b.n	8012e56 <_printf_i+0xd2>
 8012ee6:	064d      	lsls	r5, r1, #25
 8012ee8:	bf48      	it	mi
 8012eea:	b29b      	uxthmi	r3, r3
 8012eec:	e7ef      	b.n	8012ece <_printf_i+0x14a>
 8012eee:	4665      	mov	r5, ip
 8012ef0:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ef4:	fb02 3311 	mls	r3, r2, r1, r3
 8012ef8:	5cc3      	ldrb	r3, [r0, r3]
 8012efa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012efe:	460b      	mov	r3, r1
 8012f00:	2900      	cmp	r1, #0
 8012f02:	d1f5      	bne.n	8012ef0 <_printf_i+0x16c>
 8012f04:	e7b9      	b.n	8012e7a <_printf_i+0xf6>
 8012f06:	6813      	ldr	r3, [r2, #0]
 8012f08:	6825      	ldr	r5, [r4, #0]
 8012f0a:	6961      	ldr	r1, [r4, #20]
 8012f0c:	1d18      	adds	r0, r3, #4
 8012f0e:	6010      	str	r0, [r2, #0]
 8012f10:	0628      	lsls	r0, r5, #24
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	d501      	bpl.n	8012f1a <_printf_i+0x196>
 8012f16:	6019      	str	r1, [r3, #0]
 8012f18:	e002      	b.n	8012f20 <_printf_i+0x19c>
 8012f1a:	066a      	lsls	r2, r5, #25
 8012f1c:	d5fb      	bpl.n	8012f16 <_printf_i+0x192>
 8012f1e:	8019      	strh	r1, [r3, #0]
 8012f20:	2300      	movs	r3, #0
 8012f22:	6123      	str	r3, [r4, #16]
 8012f24:	4665      	mov	r5, ip
 8012f26:	e7b9      	b.n	8012e9c <_printf_i+0x118>
 8012f28:	6813      	ldr	r3, [r2, #0]
 8012f2a:	1d19      	adds	r1, r3, #4
 8012f2c:	6011      	str	r1, [r2, #0]
 8012f2e:	681d      	ldr	r5, [r3, #0]
 8012f30:	6862      	ldr	r2, [r4, #4]
 8012f32:	2100      	movs	r1, #0
 8012f34:	4628      	mov	r0, r5
 8012f36:	f7f5 f88b 	bl	8008050 <memchr>
 8012f3a:	b108      	cbz	r0, 8012f40 <_printf_i+0x1bc>
 8012f3c:	1b40      	subs	r0, r0, r5
 8012f3e:	6060      	str	r0, [r4, #4]
 8012f40:	6863      	ldr	r3, [r4, #4]
 8012f42:	6123      	str	r3, [r4, #16]
 8012f44:	2300      	movs	r3, #0
 8012f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f4a:	e7a7      	b.n	8012e9c <_printf_i+0x118>
 8012f4c:	6923      	ldr	r3, [r4, #16]
 8012f4e:	462a      	mov	r2, r5
 8012f50:	4639      	mov	r1, r7
 8012f52:	4630      	mov	r0, r6
 8012f54:	47c0      	blx	r8
 8012f56:	3001      	adds	r0, #1
 8012f58:	d0aa      	beq.n	8012eb0 <_printf_i+0x12c>
 8012f5a:	6823      	ldr	r3, [r4, #0]
 8012f5c:	079b      	lsls	r3, r3, #30
 8012f5e:	d413      	bmi.n	8012f88 <_printf_i+0x204>
 8012f60:	68e0      	ldr	r0, [r4, #12]
 8012f62:	9b03      	ldr	r3, [sp, #12]
 8012f64:	4298      	cmp	r0, r3
 8012f66:	bfb8      	it	lt
 8012f68:	4618      	movlt	r0, r3
 8012f6a:	e7a3      	b.n	8012eb4 <_printf_i+0x130>
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	464a      	mov	r2, r9
 8012f70:	4639      	mov	r1, r7
 8012f72:	4630      	mov	r0, r6
 8012f74:	47c0      	blx	r8
 8012f76:	3001      	adds	r0, #1
 8012f78:	d09a      	beq.n	8012eb0 <_printf_i+0x12c>
 8012f7a:	3501      	adds	r5, #1
 8012f7c:	68e3      	ldr	r3, [r4, #12]
 8012f7e:	9a03      	ldr	r2, [sp, #12]
 8012f80:	1a9b      	subs	r3, r3, r2
 8012f82:	42ab      	cmp	r3, r5
 8012f84:	dcf2      	bgt.n	8012f6c <_printf_i+0x1e8>
 8012f86:	e7eb      	b.n	8012f60 <_printf_i+0x1dc>
 8012f88:	2500      	movs	r5, #0
 8012f8a:	f104 0919 	add.w	r9, r4, #25
 8012f8e:	e7f5      	b.n	8012f7c <_printf_i+0x1f8>
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d1ac      	bne.n	8012eee <_printf_i+0x16a>
 8012f94:	7803      	ldrb	r3, [r0, #0]
 8012f96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f9e:	e76c      	b.n	8012e7a <_printf_i+0xf6>
 8012fa0:	0801740d 	.word	0x0801740d
 8012fa4:	0801741e 	.word	0x0801741e

08012fa8 <__svfiscanf_r>:
 8012fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fac:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8012fb0:	460c      	mov	r4, r1
 8012fb2:	2100      	movs	r1, #0
 8012fb4:	9144      	str	r1, [sp, #272]	; 0x110
 8012fb6:	9145      	str	r1, [sp, #276]	; 0x114
 8012fb8:	499f      	ldr	r1, [pc, #636]	; (8013238 <__svfiscanf_r+0x290>)
 8012fba:	91a0      	str	r1, [sp, #640]	; 0x280
 8012fbc:	f10d 0804 	add.w	r8, sp, #4
 8012fc0:	499e      	ldr	r1, [pc, #632]	; (801323c <__svfiscanf_r+0x294>)
 8012fc2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8013240 <__svfiscanf_r+0x298>
 8012fc6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012fca:	4606      	mov	r6, r0
 8012fcc:	4692      	mov	sl, r2
 8012fce:	91a1      	str	r1, [sp, #644]	; 0x284
 8012fd0:	9300      	str	r3, [sp, #0]
 8012fd2:	270a      	movs	r7, #10
 8012fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	f000 812a 	beq.w	8013232 <__svfiscanf_r+0x28a>
 8012fde:	4655      	mov	r5, sl
 8012fe0:	f003 f98e 	bl	8016300 <__locale_ctype_ptr>
 8012fe4:	f815 bb01 	ldrb.w	fp, [r5], #1
 8012fe8:	4458      	add	r0, fp
 8012fea:	7843      	ldrb	r3, [r0, #1]
 8012fec:	f013 0308 	ands.w	r3, r3, #8
 8012ff0:	d01c      	beq.n	801302c <__svfiscanf_r+0x84>
 8012ff2:	6863      	ldr	r3, [r4, #4]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	dd12      	ble.n	801301e <__svfiscanf_r+0x76>
 8012ff8:	f003 f982 	bl	8016300 <__locale_ctype_ptr>
 8012ffc:	6823      	ldr	r3, [r4, #0]
 8012ffe:	781a      	ldrb	r2, [r3, #0]
 8013000:	4410      	add	r0, r2
 8013002:	7842      	ldrb	r2, [r0, #1]
 8013004:	0712      	lsls	r2, r2, #28
 8013006:	d401      	bmi.n	801300c <__svfiscanf_r+0x64>
 8013008:	46aa      	mov	sl, r5
 801300a:	e7e3      	b.n	8012fd4 <__svfiscanf_r+0x2c>
 801300c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801300e:	3201      	adds	r2, #1
 8013010:	9245      	str	r2, [sp, #276]	; 0x114
 8013012:	6862      	ldr	r2, [r4, #4]
 8013014:	3301      	adds	r3, #1
 8013016:	3a01      	subs	r2, #1
 8013018:	6062      	str	r2, [r4, #4]
 801301a:	6023      	str	r3, [r4, #0]
 801301c:	e7e9      	b.n	8012ff2 <__svfiscanf_r+0x4a>
 801301e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013020:	4621      	mov	r1, r4
 8013022:	4630      	mov	r0, r6
 8013024:	4798      	blx	r3
 8013026:	2800      	cmp	r0, #0
 8013028:	d0e6      	beq.n	8012ff8 <__svfiscanf_r+0x50>
 801302a:	e7ed      	b.n	8013008 <__svfiscanf_r+0x60>
 801302c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8013030:	f040 8082 	bne.w	8013138 <__svfiscanf_r+0x190>
 8013034:	9343      	str	r3, [sp, #268]	; 0x10c
 8013036:	9341      	str	r3, [sp, #260]	; 0x104
 8013038:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801303c:	2b2a      	cmp	r3, #42	; 0x2a
 801303e:	d103      	bne.n	8013048 <__svfiscanf_r+0xa0>
 8013040:	2310      	movs	r3, #16
 8013042:	9341      	str	r3, [sp, #260]	; 0x104
 8013044:	f10a 0502 	add.w	r5, sl, #2
 8013048:	46aa      	mov	sl, r5
 801304a:	f815 1b01 	ldrb.w	r1, [r5], #1
 801304e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013052:	2a09      	cmp	r2, #9
 8013054:	d922      	bls.n	801309c <__svfiscanf_r+0xf4>
 8013056:	2203      	movs	r2, #3
 8013058:	4879      	ldr	r0, [pc, #484]	; (8013240 <__svfiscanf_r+0x298>)
 801305a:	f7f4 fff9 	bl	8008050 <memchr>
 801305e:	b138      	cbz	r0, 8013070 <__svfiscanf_r+0xc8>
 8013060:	eba0 0309 	sub.w	r3, r0, r9
 8013064:	2001      	movs	r0, #1
 8013066:	4098      	lsls	r0, r3
 8013068:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801306a:	4318      	orrs	r0, r3
 801306c:	9041      	str	r0, [sp, #260]	; 0x104
 801306e:	46aa      	mov	sl, r5
 8013070:	f89a 3000 	ldrb.w	r3, [sl]
 8013074:	2b67      	cmp	r3, #103	; 0x67
 8013076:	f10a 0501 	add.w	r5, sl, #1
 801307a:	d82b      	bhi.n	80130d4 <__svfiscanf_r+0x12c>
 801307c:	2b65      	cmp	r3, #101	; 0x65
 801307e:	f080 809f 	bcs.w	80131c0 <__svfiscanf_r+0x218>
 8013082:	2b47      	cmp	r3, #71	; 0x47
 8013084:	d810      	bhi.n	80130a8 <__svfiscanf_r+0x100>
 8013086:	2b45      	cmp	r3, #69	; 0x45
 8013088:	f080 809a 	bcs.w	80131c0 <__svfiscanf_r+0x218>
 801308c:	2b00      	cmp	r3, #0
 801308e:	d06c      	beq.n	801316a <__svfiscanf_r+0x1c2>
 8013090:	2b25      	cmp	r3, #37	; 0x25
 8013092:	d051      	beq.n	8013138 <__svfiscanf_r+0x190>
 8013094:	2303      	movs	r3, #3
 8013096:	9347      	str	r3, [sp, #284]	; 0x11c
 8013098:	9742      	str	r7, [sp, #264]	; 0x108
 801309a:	e027      	b.n	80130ec <__svfiscanf_r+0x144>
 801309c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801309e:	fb07 1303 	mla	r3, r7, r3, r1
 80130a2:	3b30      	subs	r3, #48	; 0x30
 80130a4:	9343      	str	r3, [sp, #268]	; 0x10c
 80130a6:	e7cf      	b.n	8013048 <__svfiscanf_r+0xa0>
 80130a8:	2b5b      	cmp	r3, #91	; 0x5b
 80130aa:	d06a      	beq.n	8013182 <__svfiscanf_r+0x1da>
 80130ac:	d80c      	bhi.n	80130c8 <__svfiscanf_r+0x120>
 80130ae:	2b58      	cmp	r3, #88	; 0x58
 80130b0:	d1f0      	bne.n	8013094 <__svfiscanf_r+0xec>
 80130b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80130b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80130b8:	9241      	str	r2, [sp, #260]	; 0x104
 80130ba:	2210      	movs	r2, #16
 80130bc:	9242      	str	r2, [sp, #264]	; 0x108
 80130be:	2b6e      	cmp	r3, #110	; 0x6e
 80130c0:	bf8c      	ite	hi
 80130c2:	2304      	movhi	r3, #4
 80130c4:	2303      	movls	r3, #3
 80130c6:	e010      	b.n	80130ea <__svfiscanf_r+0x142>
 80130c8:	2b63      	cmp	r3, #99	; 0x63
 80130ca:	d065      	beq.n	8013198 <__svfiscanf_r+0x1f0>
 80130cc:	2b64      	cmp	r3, #100	; 0x64
 80130ce:	d1e1      	bne.n	8013094 <__svfiscanf_r+0xec>
 80130d0:	9742      	str	r7, [sp, #264]	; 0x108
 80130d2:	e7f4      	b.n	80130be <__svfiscanf_r+0x116>
 80130d4:	2b70      	cmp	r3, #112	; 0x70
 80130d6:	d04b      	beq.n	8013170 <__svfiscanf_r+0x1c8>
 80130d8:	d826      	bhi.n	8013128 <__svfiscanf_r+0x180>
 80130da:	2b6e      	cmp	r3, #110	; 0x6e
 80130dc:	d062      	beq.n	80131a4 <__svfiscanf_r+0x1fc>
 80130de:	d84c      	bhi.n	801317a <__svfiscanf_r+0x1d2>
 80130e0:	2b69      	cmp	r3, #105	; 0x69
 80130e2:	d1d7      	bne.n	8013094 <__svfiscanf_r+0xec>
 80130e4:	2300      	movs	r3, #0
 80130e6:	9342      	str	r3, [sp, #264]	; 0x108
 80130e8:	2303      	movs	r3, #3
 80130ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80130ec:	6863      	ldr	r3, [r4, #4]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	dd68      	ble.n	80131c4 <__svfiscanf_r+0x21c>
 80130f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80130f4:	0659      	lsls	r1, r3, #25
 80130f6:	d407      	bmi.n	8013108 <__svfiscanf_r+0x160>
 80130f8:	f003 f902 	bl	8016300 <__locale_ctype_ptr>
 80130fc:	6823      	ldr	r3, [r4, #0]
 80130fe:	781a      	ldrb	r2, [r3, #0]
 8013100:	4410      	add	r0, r2
 8013102:	7842      	ldrb	r2, [r0, #1]
 8013104:	0712      	lsls	r2, r2, #28
 8013106:	d464      	bmi.n	80131d2 <__svfiscanf_r+0x22a>
 8013108:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801310a:	2b02      	cmp	r3, #2
 801310c:	dc73      	bgt.n	80131f6 <__svfiscanf_r+0x24e>
 801310e:	466b      	mov	r3, sp
 8013110:	4622      	mov	r2, r4
 8013112:	a941      	add	r1, sp, #260	; 0x104
 8013114:	4630      	mov	r0, r6
 8013116:	f000 faa1 	bl	801365c <_scanf_chars>
 801311a:	2801      	cmp	r0, #1
 801311c:	f000 8089 	beq.w	8013232 <__svfiscanf_r+0x28a>
 8013120:	2802      	cmp	r0, #2
 8013122:	f47f af71 	bne.w	8013008 <__svfiscanf_r+0x60>
 8013126:	e01d      	b.n	8013164 <__svfiscanf_r+0x1bc>
 8013128:	2b75      	cmp	r3, #117	; 0x75
 801312a:	d0d1      	beq.n	80130d0 <__svfiscanf_r+0x128>
 801312c:	2b78      	cmp	r3, #120	; 0x78
 801312e:	d0c0      	beq.n	80130b2 <__svfiscanf_r+0x10a>
 8013130:	2b73      	cmp	r3, #115	; 0x73
 8013132:	d1af      	bne.n	8013094 <__svfiscanf_r+0xec>
 8013134:	2302      	movs	r3, #2
 8013136:	e7d8      	b.n	80130ea <__svfiscanf_r+0x142>
 8013138:	6863      	ldr	r3, [r4, #4]
 801313a:	2b00      	cmp	r3, #0
 801313c:	dd0c      	ble.n	8013158 <__svfiscanf_r+0x1b0>
 801313e:	6823      	ldr	r3, [r4, #0]
 8013140:	781a      	ldrb	r2, [r3, #0]
 8013142:	455a      	cmp	r2, fp
 8013144:	d175      	bne.n	8013232 <__svfiscanf_r+0x28a>
 8013146:	3301      	adds	r3, #1
 8013148:	6862      	ldr	r2, [r4, #4]
 801314a:	6023      	str	r3, [r4, #0]
 801314c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801314e:	3a01      	subs	r2, #1
 8013150:	3301      	adds	r3, #1
 8013152:	6062      	str	r2, [r4, #4]
 8013154:	9345      	str	r3, [sp, #276]	; 0x114
 8013156:	e757      	b.n	8013008 <__svfiscanf_r+0x60>
 8013158:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801315a:	4621      	mov	r1, r4
 801315c:	4630      	mov	r0, r6
 801315e:	4798      	blx	r3
 8013160:	2800      	cmp	r0, #0
 8013162:	d0ec      	beq.n	801313e <__svfiscanf_r+0x196>
 8013164:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013166:	2800      	cmp	r0, #0
 8013168:	d159      	bne.n	801321e <__svfiscanf_r+0x276>
 801316a:	f04f 30ff 	mov.w	r0, #4294967295
 801316e:	e05c      	b.n	801322a <__svfiscanf_r+0x282>
 8013170:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013172:	f042 0220 	orr.w	r2, r2, #32
 8013176:	9241      	str	r2, [sp, #260]	; 0x104
 8013178:	e79b      	b.n	80130b2 <__svfiscanf_r+0x10a>
 801317a:	2308      	movs	r3, #8
 801317c:	9342      	str	r3, [sp, #264]	; 0x108
 801317e:	2304      	movs	r3, #4
 8013180:	e7b3      	b.n	80130ea <__svfiscanf_r+0x142>
 8013182:	4629      	mov	r1, r5
 8013184:	4640      	mov	r0, r8
 8013186:	f000 fd0f 	bl	8013ba8 <__sccl>
 801318a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801318c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013190:	9341      	str	r3, [sp, #260]	; 0x104
 8013192:	4605      	mov	r5, r0
 8013194:	2301      	movs	r3, #1
 8013196:	e7a8      	b.n	80130ea <__svfiscanf_r+0x142>
 8013198:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801319a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801319e:	9341      	str	r3, [sp, #260]	; 0x104
 80131a0:	2300      	movs	r3, #0
 80131a2:	e7a2      	b.n	80130ea <__svfiscanf_r+0x142>
 80131a4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80131a6:	06c3      	lsls	r3, r0, #27
 80131a8:	f53f af2e 	bmi.w	8013008 <__svfiscanf_r+0x60>
 80131ac:	9b00      	ldr	r3, [sp, #0]
 80131ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80131b0:	1d19      	adds	r1, r3, #4
 80131b2:	9100      	str	r1, [sp, #0]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	07c0      	lsls	r0, r0, #31
 80131b8:	bf4c      	ite	mi
 80131ba:	801a      	strhmi	r2, [r3, #0]
 80131bc:	601a      	strpl	r2, [r3, #0]
 80131be:	e723      	b.n	8013008 <__svfiscanf_r+0x60>
 80131c0:	2305      	movs	r3, #5
 80131c2:	e792      	b.n	80130ea <__svfiscanf_r+0x142>
 80131c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80131c6:	4621      	mov	r1, r4
 80131c8:	4630      	mov	r0, r6
 80131ca:	4798      	blx	r3
 80131cc:	2800      	cmp	r0, #0
 80131ce:	d090      	beq.n	80130f2 <__svfiscanf_r+0x14a>
 80131d0:	e7c8      	b.n	8013164 <__svfiscanf_r+0x1bc>
 80131d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80131d4:	3201      	adds	r2, #1
 80131d6:	9245      	str	r2, [sp, #276]	; 0x114
 80131d8:	6862      	ldr	r2, [r4, #4]
 80131da:	3a01      	subs	r2, #1
 80131dc:	2a00      	cmp	r2, #0
 80131de:	6062      	str	r2, [r4, #4]
 80131e0:	dd02      	ble.n	80131e8 <__svfiscanf_r+0x240>
 80131e2:	3301      	adds	r3, #1
 80131e4:	6023      	str	r3, [r4, #0]
 80131e6:	e787      	b.n	80130f8 <__svfiscanf_r+0x150>
 80131e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80131ea:	4621      	mov	r1, r4
 80131ec:	4630      	mov	r0, r6
 80131ee:	4798      	blx	r3
 80131f0:	2800      	cmp	r0, #0
 80131f2:	d081      	beq.n	80130f8 <__svfiscanf_r+0x150>
 80131f4:	e7b6      	b.n	8013164 <__svfiscanf_r+0x1bc>
 80131f6:	2b04      	cmp	r3, #4
 80131f8:	dc06      	bgt.n	8013208 <__svfiscanf_r+0x260>
 80131fa:	466b      	mov	r3, sp
 80131fc:	4622      	mov	r2, r4
 80131fe:	a941      	add	r1, sp, #260	; 0x104
 8013200:	4630      	mov	r0, r6
 8013202:	f000 fa8f 	bl	8013724 <_scanf_i>
 8013206:	e788      	b.n	801311a <__svfiscanf_r+0x172>
 8013208:	4b0e      	ldr	r3, [pc, #56]	; (8013244 <__svfiscanf_r+0x29c>)
 801320a:	2b00      	cmp	r3, #0
 801320c:	f43f aefc 	beq.w	8013008 <__svfiscanf_r+0x60>
 8013210:	466b      	mov	r3, sp
 8013212:	4622      	mov	r2, r4
 8013214:	a941      	add	r1, sp, #260	; 0x104
 8013216:	4630      	mov	r0, r6
 8013218:	f000 f83e 	bl	8013298 <_scanf_float>
 801321c:	e77d      	b.n	801311a <__svfiscanf_r+0x172>
 801321e:	89a3      	ldrh	r3, [r4, #12]
 8013220:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013224:	bf18      	it	ne
 8013226:	f04f 30ff 	movne.w	r0, #4294967295
 801322a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013232:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013234:	e7f9      	b.n	801322a <__svfiscanf_r+0x282>
 8013236:	bf00      	nop
 8013238:	08014d39 	.word	0x08014d39
 801323c:	08013a41 	.word	0x08013a41
 8013240:	080173f2 	.word	0x080173f2
 8013244:	08013299 	.word	0x08013299

08013248 <_vfiscanf_r>:
 8013248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801324c:	460c      	mov	r4, r1
 801324e:	4616      	mov	r6, r2
 8013250:	461f      	mov	r7, r3
 8013252:	4605      	mov	r5, r0
 8013254:	b118      	cbz	r0, 801325e <_vfiscanf_r+0x16>
 8013256:	6983      	ldr	r3, [r0, #24]
 8013258:	b90b      	cbnz	r3, 801325e <_vfiscanf_r+0x16>
 801325a:	f7fe ff1f 	bl	801209c <__sinit>
 801325e:	4b0b      	ldr	r3, [pc, #44]	; (801328c <_vfiscanf_r+0x44>)
 8013260:	429c      	cmp	r4, r3
 8013262:	d108      	bne.n	8013276 <_vfiscanf_r+0x2e>
 8013264:	686c      	ldr	r4, [r5, #4]
 8013266:	463b      	mov	r3, r7
 8013268:	4632      	mov	r2, r6
 801326a:	4621      	mov	r1, r4
 801326c:	4628      	mov	r0, r5
 801326e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013272:	f7ff be99 	b.w	8012fa8 <__svfiscanf_r>
 8013276:	4b06      	ldr	r3, [pc, #24]	; (8013290 <_vfiscanf_r+0x48>)
 8013278:	429c      	cmp	r4, r3
 801327a:	d101      	bne.n	8013280 <_vfiscanf_r+0x38>
 801327c:	68ac      	ldr	r4, [r5, #8]
 801327e:	e7f2      	b.n	8013266 <_vfiscanf_r+0x1e>
 8013280:	4b04      	ldr	r3, [pc, #16]	; (8013294 <_vfiscanf_r+0x4c>)
 8013282:	429c      	cmp	r4, r3
 8013284:	bf08      	it	eq
 8013286:	68ec      	ldreq	r4, [r5, #12]
 8013288:	e7ed      	b.n	8013266 <_vfiscanf_r+0x1e>
 801328a:	bf00      	nop
 801328c:	080173a8 	.word	0x080173a8
 8013290:	080173c8 	.word	0x080173c8
 8013294:	08017388 	.word	0x08017388

08013298 <_scanf_float>:
 8013298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801329c:	469a      	mov	sl, r3
 801329e:	688b      	ldr	r3, [r1, #8]
 80132a0:	4616      	mov	r6, r2
 80132a2:	1e5a      	subs	r2, r3, #1
 80132a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80132a8:	b087      	sub	sp, #28
 80132aa:	bf83      	ittte	hi
 80132ac:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80132b0:	189b      	addhi	r3, r3, r2
 80132b2:	9301      	strhi	r3, [sp, #4]
 80132b4:	2300      	movls	r3, #0
 80132b6:	bf86      	itte	hi
 80132b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80132bc:	608b      	strhi	r3, [r1, #8]
 80132be:	9301      	strls	r3, [sp, #4]
 80132c0:	680b      	ldr	r3, [r1, #0]
 80132c2:	4688      	mov	r8, r1
 80132c4:	f04f 0b00 	mov.w	fp, #0
 80132c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80132cc:	f848 3b1c 	str.w	r3, [r8], #28
 80132d0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80132d4:	4607      	mov	r7, r0
 80132d6:	460c      	mov	r4, r1
 80132d8:	4645      	mov	r5, r8
 80132da:	465a      	mov	r2, fp
 80132dc:	46d9      	mov	r9, fp
 80132de:	f8cd b008 	str.w	fp, [sp, #8]
 80132e2:	68a1      	ldr	r1, [r4, #8]
 80132e4:	b181      	cbz	r1, 8013308 <_scanf_float+0x70>
 80132e6:	6833      	ldr	r3, [r6, #0]
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	2b49      	cmp	r3, #73	; 0x49
 80132ec:	d071      	beq.n	80133d2 <_scanf_float+0x13a>
 80132ee:	d84d      	bhi.n	801338c <_scanf_float+0xf4>
 80132f0:	2b39      	cmp	r3, #57	; 0x39
 80132f2:	d840      	bhi.n	8013376 <_scanf_float+0xde>
 80132f4:	2b31      	cmp	r3, #49	; 0x31
 80132f6:	f080 8088 	bcs.w	801340a <_scanf_float+0x172>
 80132fa:	2b2d      	cmp	r3, #45	; 0x2d
 80132fc:	f000 8090 	beq.w	8013420 <_scanf_float+0x188>
 8013300:	d815      	bhi.n	801332e <_scanf_float+0x96>
 8013302:	2b2b      	cmp	r3, #43	; 0x2b
 8013304:	f000 808c 	beq.w	8013420 <_scanf_float+0x188>
 8013308:	f1b9 0f00 	cmp.w	r9, #0
 801330c:	d003      	beq.n	8013316 <_scanf_float+0x7e>
 801330e:	6823      	ldr	r3, [r4, #0]
 8013310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013314:	6023      	str	r3, [r4, #0]
 8013316:	3a01      	subs	r2, #1
 8013318:	2a01      	cmp	r2, #1
 801331a:	f200 80ea 	bhi.w	80134f2 <_scanf_float+0x25a>
 801331e:	4545      	cmp	r5, r8
 8013320:	f200 80dc 	bhi.w	80134dc <_scanf_float+0x244>
 8013324:	2601      	movs	r6, #1
 8013326:	4630      	mov	r0, r6
 8013328:	b007      	add	sp, #28
 801332a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801332e:	2b2e      	cmp	r3, #46	; 0x2e
 8013330:	f000 809f 	beq.w	8013472 <_scanf_float+0x1da>
 8013334:	2b30      	cmp	r3, #48	; 0x30
 8013336:	d1e7      	bne.n	8013308 <_scanf_float+0x70>
 8013338:	6820      	ldr	r0, [r4, #0]
 801333a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801333e:	d064      	beq.n	801340a <_scanf_float+0x172>
 8013340:	9b01      	ldr	r3, [sp, #4]
 8013342:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013346:	6020      	str	r0, [r4, #0]
 8013348:	f109 0901 	add.w	r9, r9, #1
 801334c:	b11b      	cbz	r3, 8013356 <_scanf_float+0xbe>
 801334e:	3b01      	subs	r3, #1
 8013350:	3101      	adds	r1, #1
 8013352:	9301      	str	r3, [sp, #4]
 8013354:	60a1      	str	r1, [r4, #8]
 8013356:	68a3      	ldr	r3, [r4, #8]
 8013358:	3b01      	subs	r3, #1
 801335a:	60a3      	str	r3, [r4, #8]
 801335c:	6923      	ldr	r3, [r4, #16]
 801335e:	3301      	adds	r3, #1
 8013360:	6123      	str	r3, [r4, #16]
 8013362:	6873      	ldr	r3, [r6, #4]
 8013364:	3b01      	subs	r3, #1
 8013366:	2b00      	cmp	r3, #0
 8013368:	6073      	str	r3, [r6, #4]
 801336a:	f340 80ac 	ble.w	80134c6 <_scanf_float+0x22e>
 801336e:	6833      	ldr	r3, [r6, #0]
 8013370:	3301      	adds	r3, #1
 8013372:	6033      	str	r3, [r6, #0]
 8013374:	e7b5      	b.n	80132e2 <_scanf_float+0x4a>
 8013376:	2b45      	cmp	r3, #69	; 0x45
 8013378:	f000 8085 	beq.w	8013486 <_scanf_float+0x1ee>
 801337c:	2b46      	cmp	r3, #70	; 0x46
 801337e:	d06a      	beq.n	8013456 <_scanf_float+0x1be>
 8013380:	2b41      	cmp	r3, #65	; 0x41
 8013382:	d1c1      	bne.n	8013308 <_scanf_float+0x70>
 8013384:	2a01      	cmp	r2, #1
 8013386:	d1bf      	bne.n	8013308 <_scanf_float+0x70>
 8013388:	2202      	movs	r2, #2
 801338a:	e046      	b.n	801341a <_scanf_float+0x182>
 801338c:	2b65      	cmp	r3, #101	; 0x65
 801338e:	d07a      	beq.n	8013486 <_scanf_float+0x1ee>
 8013390:	d818      	bhi.n	80133c4 <_scanf_float+0x12c>
 8013392:	2b54      	cmp	r3, #84	; 0x54
 8013394:	d066      	beq.n	8013464 <_scanf_float+0x1cc>
 8013396:	d811      	bhi.n	80133bc <_scanf_float+0x124>
 8013398:	2b4e      	cmp	r3, #78	; 0x4e
 801339a:	d1b5      	bne.n	8013308 <_scanf_float+0x70>
 801339c:	2a00      	cmp	r2, #0
 801339e:	d146      	bne.n	801342e <_scanf_float+0x196>
 80133a0:	f1b9 0f00 	cmp.w	r9, #0
 80133a4:	d145      	bne.n	8013432 <_scanf_float+0x19a>
 80133a6:	6821      	ldr	r1, [r4, #0]
 80133a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80133ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80133b0:	d13f      	bne.n	8013432 <_scanf_float+0x19a>
 80133b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80133b6:	6021      	str	r1, [r4, #0]
 80133b8:	2201      	movs	r2, #1
 80133ba:	e02e      	b.n	801341a <_scanf_float+0x182>
 80133bc:	2b59      	cmp	r3, #89	; 0x59
 80133be:	d01e      	beq.n	80133fe <_scanf_float+0x166>
 80133c0:	2b61      	cmp	r3, #97	; 0x61
 80133c2:	e7de      	b.n	8013382 <_scanf_float+0xea>
 80133c4:	2b6e      	cmp	r3, #110	; 0x6e
 80133c6:	d0e9      	beq.n	801339c <_scanf_float+0x104>
 80133c8:	d815      	bhi.n	80133f6 <_scanf_float+0x15e>
 80133ca:	2b66      	cmp	r3, #102	; 0x66
 80133cc:	d043      	beq.n	8013456 <_scanf_float+0x1be>
 80133ce:	2b69      	cmp	r3, #105	; 0x69
 80133d0:	d19a      	bne.n	8013308 <_scanf_float+0x70>
 80133d2:	f1bb 0f00 	cmp.w	fp, #0
 80133d6:	d138      	bne.n	801344a <_scanf_float+0x1b2>
 80133d8:	f1b9 0f00 	cmp.w	r9, #0
 80133dc:	d197      	bne.n	801330e <_scanf_float+0x76>
 80133de:	6821      	ldr	r1, [r4, #0]
 80133e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80133e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80133e8:	d195      	bne.n	8013316 <_scanf_float+0x7e>
 80133ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80133ee:	6021      	str	r1, [r4, #0]
 80133f0:	f04f 0b01 	mov.w	fp, #1
 80133f4:	e011      	b.n	801341a <_scanf_float+0x182>
 80133f6:	2b74      	cmp	r3, #116	; 0x74
 80133f8:	d034      	beq.n	8013464 <_scanf_float+0x1cc>
 80133fa:	2b79      	cmp	r3, #121	; 0x79
 80133fc:	d184      	bne.n	8013308 <_scanf_float+0x70>
 80133fe:	f1bb 0f07 	cmp.w	fp, #7
 8013402:	d181      	bne.n	8013308 <_scanf_float+0x70>
 8013404:	f04f 0b08 	mov.w	fp, #8
 8013408:	e007      	b.n	801341a <_scanf_float+0x182>
 801340a:	eb12 0f0b 	cmn.w	r2, fp
 801340e:	f47f af7b 	bne.w	8013308 <_scanf_float+0x70>
 8013412:	6821      	ldr	r1, [r4, #0]
 8013414:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013418:	6021      	str	r1, [r4, #0]
 801341a:	702b      	strb	r3, [r5, #0]
 801341c:	3501      	adds	r5, #1
 801341e:	e79a      	b.n	8013356 <_scanf_float+0xbe>
 8013420:	6821      	ldr	r1, [r4, #0]
 8013422:	0608      	lsls	r0, r1, #24
 8013424:	f57f af70 	bpl.w	8013308 <_scanf_float+0x70>
 8013428:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801342c:	e7f4      	b.n	8013418 <_scanf_float+0x180>
 801342e:	2a02      	cmp	r2, #2
 8013430:	d047      	beq.n	80134c2 <_scanf_float+0x22a>
 8013432:	f1bb 0f01 	cmp.w	fp, #1
 8013436:	d003      	beq.n	8013440 <_scanf_float+0x1a8>
 8013438:	f1bb 0f04 	cmp.w	fp, #4
 801343c:	f47f af64 	bne.w	8013308 <_scanf_float+0x70>
 8013440:	f10b 0b01 	add.w	fp, fp, #1
 8013444:	fa5f fb8b 	uxtb.w	fp, fp
 8013448:	e7e7      	b.n	801341a <_scanf_float+0x182>
 801344a:	f1bb 0f03 	cmp.w	fp, #3
 801344e:	d0f7      	beq.n	8013440 <_scanf_float+0x1a8>
 8013450:	f1bb 0f05 	cmp.w	fp, #5
 8013454:	e7f2      	b.n	801343c <_scanf_float+0x1a4>
 8013456:	f1bb 0f02 	cmp.w	fp, #2
 801345a:	f47f af55 	bne.w	8013308 <_scanf_float+0x70>
 801345e:	f04f 0b03 	mov.w	fp, #3
 8013462:	e7da      	b.n	801341a <_scanf_float+0x182>
 8013464:	f1bb 0f06 	cmp.w	fp, #6
 8013468:	f47f af4e 	bne.w	8013308 <_scanf_float+0x70>
 801346c:	f04f 0b07 	mov.w	fp, #7
 8013470:	e7d3      	b.n	801341a <_scanf_float+0x182>
 8013472:	6821      	ldr	r1, [r4, #0]
 8013474:	0588      	lsls	r0, r1, #22
 8013476:	f57f af47 	bpl.w	8013308 <_scanf_float+0x70>
 801347a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801347e:	6021      	str	r1, [r4, #0]
 8013480:	f8cd 9008 	str.w	r9, [sp, #8]
 8013484:	e7c9      	b.n	801341a <_scanf_float+0x182>
 8013486:	6821      	ldr	r1, [r4, #0]
 8013488:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801348c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013490:	d006      	beq.n	80134a0 <_scanf_float+0x208>
 8013492:	0548      	lsls	r0, r1, #21
 8013494:	f57f af38 	bpl.w	8013308 <_scanf_float+0x70>
 8013498:	f1b9 0f00 	cmp.w	r9, #0
 801349c:	f43f af3b 	beq.w	8013316 <_scanf_float+0x7e>
 80134a0:	0588      	lsls	r0, r1, #22
 80134a2:	bf58      	it	pl
 80134a4:	9802      	ldrpl	r0, [sp, #8]
 80134a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80134aa:	bf58      	it	pl
 80134ac:	eba9 0000 	subpl.w	r0, r9, r0
 80134b0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80134b4:	bf58      	it	pl
 80134b6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80134ba:	6021      	str	r1, [r4, #0]
 80134bc:	f04f 0900 	mov.w	r9, #0
 80134c0:	e7ab      	b.n	801341a <_scanf_float+0x182>
 80134c2:	2203      	movs	r2, #3
 80134c4:	e7a9      	b.n	801341a <_scanf_float+0x182>
 80134c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80134ca:	9205      	str	r2, [sp, #20]
 80134cc:	4631      	mov	r1, r6
 80134ce:	4638      	mov	r0, r7
 80134d0:	4798      	blx	r3
 80134d2:	9a05      	ldr	r2, [sp, #20]
 80134d4:	2800      	cmp	r0, #0
 80134d6:	f43f af04 	beq.w	80132e2 <_scanf_float+0x4a>
 80134da:	e715      	b.n	8013308 <_scanf_float+0x70>
 80134dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80134e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80134e4:	4632      	mov	r2, r6
 80134e6:	4638      	mov	r0, r7
 80134e8:	4798      	blx	r3
 80134ea:	6923      	ldr	r3, [r4, #16]
 80134ec:	3b01      	subs	r3, #1
 80134ee:	6123      	str	r3, [r4, #16]
 80134f0:	e715      	b.n	801331e <_scanf_float+0x86>
 80134f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80134f6:	2b06      	cmp	r3, #6
 80134f8:	d80a      	bhi.n	8013510 <_scanf_float+0x278>
 80134fa:	f1bb 0f02 	cmp.w	fp, #2
 80134fe:	d968      	bls.n	80135d2 <_scanf_float+0x33a>
 8013500:	f1ab 0b03 	sub.w	fp, fp, #3
 8013504:	fa5f fb8b 	uxtb.w	fp, fp
 8013508:	eba5 0b0b 	sub.w	fp, r5, fp
 801350c:	455d      	cmp	r5, fp
 801350e:	d14b      	bne.n	80135a8 <_scanf_float+0x310>
 8013510:	6823      	ldr	r3, [r4, #0]
 8013512:	05da      	lsls	r2, r3, #23
 8013514:	d51f      	bpl.n	8013556 <_scanf_float+0x2be>
 8013516:	055b      	lsls	r3, r3, #21
 8013518:	d468      	bmi.n	80135ec <_scanf_float+0x354>
 801351a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801351e:	6923      	ldr	r3, [r4, #16]
 8013520:	2965      	cmp	r1, #101	; 0x65
 8013522:	f103 33ff 	add.w	r3, r3, #4294967295
 8013526:	f105 3bff 	add.w	fp, r5, #4294967295
 801352a:	6123      	str	r3, [r4, #16]
 801352c:	d00d      	beq.n	801354a <_scanf_float+0x2b2>
 801352e:	2945      	cmp	r1, #69	; 0x45
 8013530:	d00b      	beq.n	801354a <_scanf_float+0x2b2>
 8013532:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013536:	4632      	mov	r2, r6
 8013538:	4638      	mov	r0, r7
 801353a:	4798      	blx	r3
 801353c:	6923      	ldr	r3, [r4, #16]
 801353e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013542:	3b01      	subs	r3, #1
 8013544:	f1a5 0b02 	sub.w	fp, r5, #2
 8013548:	6123      	str	r3, [r4, #16]
 801354a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801354e:	4632      	mov	r2, r6
 8013550:	4638      	mov	r0, r7
 8013552:	4798      	blx	r3
 8013554:	465d      	mov	r5, fp
 8013556:	6826      	ldr	r6, [r4, #0]
 8013558:	f016 0610 	ands.w	r6, r6, #16
 801355c:	d17a      	bne.n	8013654 <_scanf_float+0x3bc>
 801355e:	702e      	strb	r6, [r5, #0]
 8013560:	6823      	ldr	r3, [r4, #0]
 8013562:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801356a:	d142      	bne.n	80135f2 <_scanf_float+0x35a>
 801356c:	9b02      	ldr	r3, [sp, #8]
 801356e:	eba9 0303 	sub.w	r3, r9, r3
 8013572:	425a      	negs	r2, r3
 8013574:	2b00      	cmp	r3, #0
 8013576:	d149      	bne.n	801360c <_scanf_float+0x374>
 8013578:	2200      	movs	r2, #0
 801357a:	4641      	mov	r1, r8
 801357c:	4638      	mov	r0, r7
 801357e:	f001 fa77 	bl	8014a70 <_strtod_r>
 8013582:	6825      	ldr	r5, [r4, #0]
 8013584:	f8da 3000 	ldr.w	r3, [sl]
 8013588:	f015 0f02 	tst.w	r5, #2
 801358c:	f103 0204 	add.w	r2, r3, #4
 8013590:	ec59 8b10 	vmov	r8, r9, d0
 8013594:	f8ca 2000 	str.w	r2, [sl]
 8013598:	d043      	beq.n	8013622 <_scanf_float+0x38a>
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	e9c3 8900 	strd	r8, r9, [r3]
 80135a0:	68e3      	ldr	r3, [r4, #12]
 80135a2:	3301      	adds	r3, #1
 80135a4:	60e3      	str	r3, [r4, #12]
 80135a6:	e6be      	b.n	8013326 <_scanf_float+0x8e>
 80135a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80135ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80135b0:	4632      	mov	r2, r6
 80135b2:	4638      	mov	r0, r7
 80135b4:	4798      	blx	r3
 80135b6:	6923      	ldr	r3, [r4, #16]
 80135b8:	3b01      	subs	r3, #1
 80135ba:	6123      	str	r3, [r4, #16]
 80135bc:	e7a6      	b.n	801350c <_scanf_float+0x274>
 80135be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80135c2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80135c6:	4632      	mov	r2, r6
 80135c8:	4638      	mov	r0, r7
 80135ca:	4798      	blx	r3
 80135cc:	6923      	ldr	r3, [r4, #16]
 80135ce:	3b01      	subs	r3, #1
 80135d0:	6123      	str	r3, [r4, #16]
 80135d2:	4545      	cmp	r5, r8
 80135d4:	d8f3      	bhi.n	80135be <_scanf_float+0x326>
 80135d6:	e6a5      	b.n	8013324 <_scanf_float+0x8c>
 80135d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80135dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80135e0:	4632      	mov	r2, r6
 80135e2:	4638      	mov	r0, r7
 80135e4:	4798      	blx	r3
 80135e6:	6923      	ldr	r3, [r4, #16]
 80135e8:	3b01      	subs	r3, #1
 80135ea:	6123      	str	r3, [r4, #16]
 80135ec:	4545      	cmp	r5, r8
 80135ee:	d8f3      	bhi.n	80135d8 <_scanf_float+0x340>
 80135f0:	e698      	b.n	8013324 <_scanf_float+0x8c>
 80135f2:	9b03      	ldr	r3, [sp, #12]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d0bf      	beq.n	8013578 <_scanf_float+0x2e0>
 80135f8:	9904      	ldr	r1, [sp, #16]
 80135fa:	230a      	movs	r3, #10
 80135fc:	4632      	mov	r2, r6
 80135fe:	3101      	adds	r1, #1
 8013600:	4638      	mov	r0, r7
 8013602:	f001 fac1 	bl	8014b88 <_strtol_r>
 8013606:	9b03      	ldr	r3, [sp, #12]
 8013608:	9d04      	ldr	r5, [sp, #16]
 801360a:	1ac2      	subs	r2, r0, r3
 801360c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013610:	429d      	cmp	r5, r3
 8013612:	bf28      	it	cs
 8013614:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013618:	490f      	ldr	r1, [pc, #60]	; (8013658 <_scanf_float+0x3c0>)
 801361a:	4628      	mov	r0, r5
 801361c:	f000 fbb2 	bl	8013d84 <siprintf>
 8013620:	e7aa      	b.n	8013578 <_scanf_float+0x2e0>
 8013622:	f015 0504 	ands.w	r5, r5, #4
 8013626:	d1b8      	bne.n	801359a <_scanf_float+0x302>
 8013628:	681f      	ldr	r7, [r3, #0]
 801362a:	ee10 2a10 	vmov	r2, s0
 801362e:	464b      	mov	r3, r9
 8013630:	ee10 0a10 	vmov	r0, s0
 8013634:	4649      	mov	r1, r9
 8013636:	f7f5 f9b1 	bl	800899c <__aeabi_dcmpun>
 801363a:	b128      	cbz	r0, 8013648 <_scanf_float+0x3b0>
 801363c:	4628      	mov	r0, r5
 801363e:	f000 fb9b 	bl	8013d78 <nanf>
 8013642:	ed87 0a00 	vstr	s0, [r7]
 8013646:	e7ab      	b.n	80135a0 <_scanf_float+0x308>
 8013648:	4640      	mov	r0, r8
 801364a:	4649      	mov	r1, r9
 801364c:	f7f5 fa04 	bl	8008a58 <__aeabi_d2f>
 8013650:	6038      	str	r0, [r7, #0]
 8013652:	e7a5      	b.n	80135a0 <_scanf_float+0x308>
 8013654:	2600      	movs	r6, #0
 8013656:	e666      	b.n	8013326 <_scanf_float+0x8e>
 8013658:	0801742f 	.word	0x0801742f

0801365c <_scanf_chars>:
 801365c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013660:	4615      	mov	r5, r2
 8013662:	688a      	ldr	r2, [r1, #8]
 8013664:	4680      	mov	r8, r0
 8013666:	460c      	mov	r4, r1
 8013668:	b932      	cbnz	r2, 8013678 <_scanf_chars+0x1c>
 801366a:	698a      	ldr	r2, [r1, #24]
 801366c:	2a00      	cmp	r2, #0
 801366e:	bf14      	ite	ne
 8013670:	f04f 32ff 	movne.w	r2, #4294967295
 8013674:	2201      	moveq	r2, #1
 8013676:	608a      	str	r2, [r1, #8]
 8013678:	6822      	ldr	r2, [r4, #0]
 801367a:	06d1      	lsls	r1, r2, #27
 801367c:	bf5f      	itttt	pl
 801367e:	681a      	ldrpl	r2, [r3, #0]
 8013680:	1d11      	addpl	r1, r2, #4
 8013682:	6019      	strpl	r1, [r3, #0]
 8013684:	6817      	ldrpl	r7, [r2, #0]
 8013686:	2600      	movs	r6, #0
 8013688:	69a3      	ldr	r3, [r4, #24]
 801368a:	b1db      	cbz	r3, 80136c4 <_scanf_chars+0x68>
 801368c:	2b01      	cmp	r3, #1
 801368e:	d107      	bne.n	80136a0 <_scanf_chars+0x44>
 8013690:	682b      	ldr	r3, [r5, #0]
 8013692:	6962      	ldr	r2, [r4, #20]
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	5cd3      	ldrb	r3, [r2, r3]
 8013698:	b9a3      	cbnz	r3, 80136c4 <_scanf_chars+0x68>
 801369a:	2e00      	cmp	r6, #0
 801369c:	d132      	bne.n	8013704 <_scanf_chars+0xa8>
 801369e:	e006      	b.n	80136ae <_scanf_chars+0x52>
 80136a0:	2b02      	cmp	r3, #2
 80136a2:	d007      	beq.n	80136b4 <_scanf_chars+0x58>
 80136a4:	2e00      	cmp	r6, #0
 80136a6:	d12d      	bne.n	8013704 <_scanf_chars+0xa8>
 80136a8:	69a3      	ldr	r3, [r4, #24]
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d12a      	bne.n	8013704 <_scanf_chars+0xa8>
 80136ae:	2001      	movs	r0, #1
 80136b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136b4:	f002 fe24 	bl	8016300 <__locale_ctype_ptr>
 80136b8:	682b      	ldr	r3, [r5, #0]
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	4418      	add	r0, r3
 80136be:	7843      	ldrb	r3, [r0, #1]
 80136c0:	071b      	lsls	r3, r3, #28
 80136c2:	d4ef      	bmi.n	80136a4 <_scanf_chars+0x48>
 80136c4:	6823      	ldr	r3, [r4, #0]
 80136c6:	06da      	lsls	r2, r3, #27
 80136c8:	bf5e      	ittt	pl
 80136ca:	682b      	ldrpl	r3, [r5, #0]
 80136cc:	781b      	ldrbpl	r3, [r3, #0]
 80136ce:	703b      	strbpl	r3, [r7, #0]
 80136d0:	682a      	ldr	r2, [r5, #0]
 80136d2:	686b      	ldr	r3, [r5, #4]
 80136d4:	f102 0201 	add.w	r2, r2, #1
 80136d8:	602a      	str	r2, [r5, #0]
 80136da:	68a2      	ldr	r2, [r4, #8]
 80136dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80136e0:	f102 32ff 	add.w	r2, r2, #4294967295
 80136e4:	606b      	str	r3, [r5, #4]
 80136e6:	f106 0601 	add.w	r6, r6, #1
 80136ea:	bf58      	it	pl
 80136ec:	3701      	addpl	r7, #1
 80136ee:	60a2      	str	r2, [r4, #8]
 80136f0:	b142      	cbz	r2, 8013704 <_scanf_chars+0xa8>
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	dcc8      	bgt.n	8013688 <_scanf_chars+0x2c>
 80136f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80136fa:	4629      	mov	r1, r5
 80136fc:	4640      	mov	r0, r8
 80136fe:	4798      	blx	r3
 8013700:	2800      	cmp	r0, #0
 8013702:	d0c1      	beq.n	8013688 <_scanf_chars+0x2c>
 8013704:	6823      	ldr	r3, [r4, #0]
 8013706:	f013 0310 	ands.w	r3, r3, #16
 801370a:	d105      	bne.n	8013718 <_scanf_chars+0xbc>
 801370c:	68e2      	ldr	r2, [r4, #12]
 801370e:	3201      	adds	r2, #1
 8013710:	60e2      	str	r2, [r4, #12]
 8013712:	69a2      	ldr	r2, [r4, #24]
 8013714:	b102      	cbz	r2, 8013718 <_scanf_chars+0xbc>
 8013716:	703b      	strb	r3, [r7, #0]
 8013718:	6923      	ldr	r3, [r4, #16]
 801371a:	441e      	add	r6, r3
 801371c:	6126      	str	r6, [r4, #16]
 801371e:	2000      	movs	r0, #0
 8013720:	e7c6      	b.n	80136b0 <_scanf_chars+0x54>
	...

08013724 <_scanf_i>:
 8013724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013728:	469a      	mov	sl, r3
 801372a:	4b74      	ldr	r3, [pc, #464]	; (80138fc <_scanf_i+0x1d8>)
 801372c:	460c      	mov	r4, r1
 801372e:	4683      	mov	fp, r0
 8013730:	4616      	mov	r6, r2
 8013732:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013736:	b087      	sub	sp, #28
 8013738:	ab03      	add	r3, sp, #12
 801373a:	68a7      	ldr	r7, [r4, #8]
 801373c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013740:	4b6f      	ldr	r3, [pc, #444]	; (8013900 <_scanf_i+0x1dc>)
 8013742:	69a1      	ldr	r1, [r4, #24]
 8013744:	4a6f      	ldr	r2, [pc, #444]	; (8013904 <_scanf_i+0x1e0>)
 8013746:	2903      	cmp	r1, #3
 8013748:	bf08      	it	eq
 801374a:	461a      	moveq	r2, r3
 801374c:	1e7b      	subs	r3, r7, #1
 801374e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8013752:	bf84      	itt	hi
 8013754:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013758:	60a3      	strhi	r3, [r4, #8]
 801375a:	6823      	ldr	r3, [r4, #0]
 801375c:	9200      	str	r2, [sp, #0]
 801375e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013762:	bf88      	it	hi
 8013764:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013768:	f104 091c 	add.w	r9, r4, #28
 801376c:	6023      	str	r3, [r4, #0]
 801376e:	bf8c      	ite	hi
 8013770:	197f      	addhi	r7, r7, r5
 8013772:	2700      	movls	r7, #0
 8013774:	464b      	mov	r3, r9
 8013776:	f04f 0800 	mov.w	r8, #0
 801377a:	9301      	str	r3, [sp, #4]
 801377c:	6831      	ldr	r1, [r6, #0]
 801377e:	ab03      	add	r3, sp, #12
 8013780:	2202      	movs	r2, #2
 8013782:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013786:	7809      	ldrb	r1, [r1, #0]
 8013788:	f7f4 fc62 	bl	8008050 <memchr>
 801378c:	9b01      	ldr	r3, [sp, #4]
 801378e:	b330      	cbz	r0, 80137de <_scanf_i+0xba>
 8013790:	f1b8 0f01 	cmp.w	r8, #1
 8013794:	d15a      	bne.n	801384c <_scanf_i+0x128>
 8013796:	6862      	ldr	r2, [r4, #4]
 8013798:	b92a      	cbnz	r2, 80137a6 <_scanf_i+0x82>
 801379a:	6822      	ldr	r2, [r4, #0]
 801379c:	2108      	movs	r1, #8
 801379e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80137a2:	6061      	str	r1, [r4, #4]
 80137a4:	6022      	str	r2, [r4, #0]
 80137a6:	6822      	ldr	r2, [r4, #0]
 80137a8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80137ac:	6022      	str	r2, [r4, #0]
 80137ae:	68a2      	ldr	r2, [r4, #8]
 80137b0:	1e51      	subs	r1, r2, #1
 80137b2:	60a1      	str	r1, [r4, #8]
 80137b4:	b19a      	cbz	r2, 80137de <_scanf_i+0xba>
 80137b6:	6832      	ldr	r2, [r6, #0]
 80137b8:	1c51      	adds	r1, r2, #1
 80137ba:	6031      	str	r1, [r6, #0]
 80137bc:	7812      	ldrb	r2, [r2, #0]
 80137be:	701a      	strb	r2, [r3, #0]
 80137c0:	1c5d      	adds	r5, r3, #1
 80137c2:	6873      	ldr	r3, [r6, #4]
 80137c4:	3b01      	subs	r3, #1
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	6073      	str	r3, [r6, #4]
 80137ca:	dc07      	bgt.n	80137dc <_scanf_i+0xb8>
 80137cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80137d0:	4631      	mov	r1, r6
 80137d2:	4658      	mov	r0, fp
 80137d4:	4798      	blx	r3
 80137d6:	2800      	cmp	r0, #0
 80137d8:	f040 8086 	bne.w	80138e8 <_scanf_i+0x1c4>
 80137dc:	462b      	mov	r3, r5
 80137de:	f108 0801 	add.w	r8, r8, #1
 80137e2:	f1b8 0f03 	cmp.w	r8, #3
 80137e6:	d1c8      	bne.n	801377a <_scanf_i+0x56>
 80137e8:	6862      	ldr	r2, [r4, #4]
 80137ea:	b90a      	cbnz	r2, 80137f0 <_scanf_i+0xcc>
 80137ec:	220a      	movs	r2, #10
 80137ee:	6062      	str	r2, [r4, #4]
 80137f0:	6862      	ldr	r2, [r4, #4]
 80137f2:	4945      	ldr	r1, [pc, #276]	; (8013908 <_scanf_i+0x1e4>)
 80137f4:	6960      	ldr	r0, [r4, #20]
 80137f6:	9301      	str	r3, [sp, #4]
 80137f8:	1a89      	subs	r1, r1, r2
 80137fa:	f000 f9d5 	bl	8013ba8 <__sccl>
 80137fe:	9b01      	ldr	r3, [sp, #4]
 8013800:	f04f 0800 	mov.w	r8, #0
 8013804:	461d      	mov	r5, r3
 8013806:	68a3      	ldr	r3, [r4, #8]
 8013808:	6822      	ldr	r2, [r4, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d03a      	beq.n	8013884 <_scanf_i+0x160>
 801380e:	6831      	ldr	r1, [r6, #0]
 8013810:	6960      	ldr	r0, [r4, #20]
 8013812:	f891 c000 	ldrb.w	ip, [r1]
 8013816:	f810 000c 	ldrb.w	r0, [r0, ip]
 801381a:	2800      	cmp	r0, #0
 801381c:	d032      	beq.n	8013884 <_scanf_i+0x160>
 801381e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013822:	d121      	bne.n	8013868 <_scanf_i+0x144>
 8013824:	0510      	lsls	r0, r2, #20
 8013826:	d51f      	bpl.n	8013868 <_scanf_i+0x144>
 8013828:	f108 0801 	add.w	r8, r8, #1
 801382c:	b117      	cbz	r7, 8013834 <_scanf_i+0x110>
 801382e:	3301      	adds	r3, #1
 8013830:	3f01      	subs	r7, #1
 8013832:	60a3      	str	r3, [r4, #8]
 8013834:	6873      	ldr	r3, [r6, #4]
 8013836:	3b01      	subs	r3, #1
 8013838:	2b00      	cmp	r3, #0
 801383a:	6073      	str	r3, [r6, #4]
 801383c:	dd1b      	ble.n	8013876 <_scanf_i+0x152>
 801383e:	6833      	ldr	r3, [r6, #0]
 8013840:	3301      	adds	r3, #1
 8013842:	6033      	str	r3, [r6, #0]
 8013844:	68a3      	ldr	r3, [r4, #8]
 8013846:	3b01      	subs	r3, #1
 8013848:	60a3      	str	r3, [r4, #8]
 801384a:	e7dc      	b.n	8013806 <_scanf_i+0xe2>
 801384c:	f1b8 0f02 	cmp.w	r8, #2
 8013850:	d1ad      	bne.n	80137ae <_scanf_i+0x8a>
 8013852:	6822      	ldr	r2, [r4, #0]
 8013854:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013858:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801385c:	d1bf      	bne.n	80137de <_scanf_i+0xba>
 801385e:	2110      	movs	r1, #16
 8013860:	6061      	str	r1, [r4, #4]
 8013862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013866:	e7a1      	b.n	80137ac <_scanf_i+0x88>
 8013868:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801386c:	6022      	str	r2, [r4, #0]
 801386e:	780b      	ldrb	r3, [r1, #0]
 8013870:	702b      	strb	r3, [r5, #0]
 8013872:	3501      	adds	r5, #1
 8013874:	e7de      	b.n	8013834 <_scanf_i+0x110>
 8013876:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801387a:	4631      	mov	r1, r6
 801387c:	4658      	mov	r0, fp
 801387e:	4798      	blx	r3
 8013880:	2800      	cmp	r0, #0
 8013882:	d0df      	beq.n	8013844 <_scanf_i+0x120>
 8013884:	6823      	ldr	r3, [r4, #0]
 8013886:	05d9      	lsls	r1, r3, #23
 8013888:	d50c      	bpl.n	80138a4 <_scanf_i+0x180>
 801388a:	454d      	cmp	r5, r9
 801388c:	d908      	bls.n	80138a0 <_scanf_i+0x17c>
 801388e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013896:	4632      	mov	r2, r6
 8013898:	4658      	mov	r0, fp
 801389a:	4798      	blx	r3
 801389c:	1e6f      	subs	r7, r5, #1
 801389e:	463d      	mov	r5, r7
 80138a0:	454d      	cmp	r5, r9
 80138a2:	d029      	beq.n	80138f8 <_scanf_i+0x1d4>
 80138a4:	6822      	ldr	r2, [r4, #0]
 80138a6:	f012 0210 	ands.w	r2, r2, #16
 80138aa:	d113      	bne.n	80138d4 <_scanf_i+0x1b0>
 80138ac:	702a      	strb	r2, [r5, #0]
 80138ae:	6863      	ldr	r3, [r4, #4]
 80138b0:	9e00      	ldr	r6, [sp, #0]
 80138b2:	4649      	mov	r1, r9
 80138b4:	4658      	mov	r0, fp
 80138b6:	47b0      	blx	r6
 80138b8:	f8da 3000 	ldr.w	r3, [sl]
 80138bc:	6821      	ldr	r1, [r4, #0]
 80138be:	1d1a      	adds	r2, r3, #4
 80138c0:	f8ca 2000 	str.w	r2, [sl]
 80138c4:	f011 0f20 	tst.w	r1, #32
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	d010      	beq.n	80138ee <_scanf_i+0x1ca>
 80138cc:	6018      	str	r0, [r3, #0]
 80138ce:	68e3      	ldr	r3, [r4, #12]
 80138d0:	3301      	adds	r3, #1
 80138d2:	60e3      	str	r3, [r4, #12]
 80138d4:	eba5 0509 	sub.w	r5, r5, r9
 80138d8:	44a8      	add	r8, r5
 80138da:	6925      	ldr	r5, [r4, #16]
 80138dc:	4445      	add	r5, r8
 80138de:	6125      	str	r5, [r4, #16]
 80138e0:	2000      	movs	r0, #0
 80138e2:	b007      	add	sp, #28
 80138e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e8:	f04f 0800 	mov.w	r8, #0
 80138ec:	e7ca      	b.n	8013884 <_scanf_i+0x160>
 80138ee:	07ca      	lsls	r2, r1, #31
 80138f0:	bf4c      	ite	mi
 80138f2:	8018      	strhmi	r0, [r3, #0]
 80138f4:	6018      	strpl	r0, [r3, #0]
 80138f6:	e7ea      	b.n	80138ce <_scanf_i+0x1aa>
 80138f8:	2001      	movs	r0, #1
 80138fa:	e7f2      	b.n	80138e2 <_scanf_i+0x1be>
 80138fc:	08016fd0 	.word	0x08016fd0
 8013900:	08014b89 	.word	0x08014b89
 8013904:	08014ca1 	.word	0x08014ca1
 8013908:	08017444 	.word	0x08017444

0801390c <iprintf>:
 801390c:	b40f      	push	{r0, r1, r2, r3}
 801390e:	4b0a      	ldr	r3, [pc, #40]	; (8013938 <iprintf+0x2c>)
 8013910:	b513      	push	{r0, r1, r4, lr}
 8013912:	681c      	ldr	r4, [r3, #0]
 8013914:	b124      	cbz	r4, 8013920 <iprintf+0x14>
 8013916:	69a3      	ldr	r3, [r4, #24]
 8013918:	b913      	cbnz	r3, 8013920 <iprintf+0x14>
 801391a:	4620      	mov	r0, r4
 801391c:	f7fe fbbe 	bl	801209c <__sinit>
 8013920:	ab05      	add	r3, sp, #20
 8013922:	9a04      	ldr	r2, [sp, #16]
 8013924:	68a1      	ldr	r1, [r4, #8]
 8013926:	9301      	str	r3, [sp, #4]
 8013928:	4620      	mov	r0, r4
 801392a:	f7fe fdcb 	bl	80124c4 <_vfiprintf_r>
 801392e:	b002      	add	sp, #8
 8013930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013934:	b004      	add	sp, #16
 8013936:	4770      	bx	lr
 8013938:	2000002c 	.word	0x2000002c

0801393c <putchar>:
 801393c:	b538      	push	{r3, r4, r5, lr}
 801393e:	4b08      	ldr	r3, [pc, #32]	; (8013960 <putchar+0x24>)
 8013940:	681c      	ldr	r4, [r3, #0]
 8013942:	4605      	mov	r5, r0
 8013944:	b124      	cbz	r4, 8013950 <putchar+0x14>
 8013946:	69a3      	ldr	r3, [r4, #24]
 8013948:	b913      	cbnz	r3, 8013950 <putchar+0x14>
 801394a:	4620      	mov	r0, r4
 801394c:	f7fe fba6 	bl	801209c <__sinit>
 8013950:	68a2      	ldr	r2, [r4, #8]
 8013952:	4629      	mov	r1, r5
 8013954:	4620      	mov	r0, r4
 8013956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801395a:	f003 babb 	b.w	8016ed4 <_putc_r>
 801395e:	bf00      	nop
 8013960:	2000002c 	.word	0x2000002c

08013964 <_puts_r>:
 8013964:	b570      	push	{r4, r5, r6, lr}
 8013966:	460e      	mov	r6, r1
 8013968:	4605      	mov	r5, r0
 801396a:	b118      	cbz	r0, 8013974 <_puts_r+0x10>
 801396c:	6983      	ldr	r3, [r0, #24]
 801396e:	b90b      	cbnz	r3, 8013974 <_puts_r+0x10>
 8013970:	f7fe fb94 	bl	801209c <__sinit>
 8013974:	69ab      	ldr	r3, [r5, #24]
 8013976:	68ac      	ldr	r4, [r5, #8]
 8013978:	b913      	cbnz	r3, 8013980 <_puts_r+0x1c>
 801397a:	4628      	mov	r0, r5
 801397c:	f7fe fb8e 	bl	801209c <__sinit>
 8013980:	4b23      	ldr	r3, [pc, #140]	; (8013a10 <_puts_r+0xac>)
 8013982:	429c      	cmp	r4, r3
 8013984:	d117      	bne.n	80139b6 <_puts_r+0x52>
 8013986:	686c      	ldr	r4, [r5, #4]
 8013988:	89a3      	ldrh	r3, [r4, #12]
 801398a:	071b      	lsls	r3, r3, #28
 801398c:	d51d      	bpl.n	80139ca <_puts_r+0x66>
 801398e:	6923      	ldr	r3, [r4, #16]
 8013990:	b1db      	cbz	r3, 80139ca <_puts_r+0x66>
 8013992:	3e01      	subs	r6, #1
 8013994:	68a3      	ldr	r3, [r4, #8]
 8013996:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801399a:	3b01      	subs	r3, #1
 801399c:	60a3      	str	r3, [r4, #8]
 801399e:	b9e9      	cbnz	r1, 80139dc <_puts_r+0x78>
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	da2e      	bge.n	8013a02 <_puts_r+0x9e>
 80139a4:	4622      	mov	r2, r4
 80139a6:	210a      	movs	r1, #10
 80139a8:	4628      	mov	r0, r5
 80139aa:	f001 fa37 	bl	8014e1c <__swbuf_r>
 80139ae:	3001      	adds	r0, #1
 80139b0:	d011      	beq.n	80139d6 <_puts_r+0x72>
 80139b2:	200a      	movs	r0, #10
 80139b4:	e011      	b.n	80139da <_puts_r+0x76>
 80139b6:	4b17      	ldr	r3, [pc, #92]	; (8013a14 <_puts_r+0xb0>)
 80139b8:	429c      	cmp	r4, r3
 80139ba:	d101      	bne.n	80139c0 <_puts_r+0x5c>
 80139bc:	68ac      	ldr	r4, [r5, #8]
 80139be:	e7e3      	b.n	8013988 <_puts_r+0x24>
 80139c0:	4b15      	ldr	r3, [pc, #84]	; (8013a18 <_puts_r+0xb4>)
 80139c2:	429c      	cmp	r4, r3
 80139c4:	bf08      	it	eq
 80139c6:	68ec      	ldreq	r4, [r5, #12]
 80139c8:	e7de      	b.n	8013988 <_puts_r+0x24>
 80139ca:	4621      	mov	r1, r4
 80139cc:	4628      	mov	r0, r5
 80139ce:	f001 fa89 	bl	8014ee4 <__swsetup_r>
 80139d2:	2800      	cmp	r0, #0
 80139d4:	d0dd      	beq.n	8013992 <_puts_r+0x2e>
 80139d6:	f04f 30ff 	mov.w	r0, #4294967295
 80139da:	bd70      	pop	{r4, r5, r6, pc}
 80139dc:	2b00      	cmp	r3, #0
 80139de:	da04      	bge.n	80139ea <_puts_r+0x86>
 80139e0:	69a2      	ldr	r2, [r4, #24]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	dc06      	bgt.n	80139f4 <_puts_r+0x90>
 80139e6:	290a      	cmp	r1, #10
 80139e8:	d004      	beq.n	80139f4 <_puts_r+0x90>
 80139ea:	6823      	ldr	r3, [r4, #0]
 80139ec:	1c5a      	adds	r2, r3, #1
 80139ee:	6022      	str	r2, [r4, #0]
 80139f0:	7019      	strb	r1, [r3, #0]
 80139f2:	e7cf      	b.n	8013994 <_puts_r+0x30>
 80139f4:	4622      	mov	r2, r4
 80139f6:	4628      	mov	r0, r5
 80139f8:	f001 fa10 	bl	8014e1c <__swbuf_r>
 80139fc:	3001      	adds	r0, #1
 80139fe:	d1c9      	bne.n	8013994 <_puts_r+0x30>
 8013a00:	e7e9      	b.n	80139d6 <_puts_r+0x72>
 8013a02:	6823      	ldr	r3, [r4, #0]
 8013a04:	200a      	movs	r0, #10
 8013a06:	1c5a      	adds	r2, r3, #1
 8013a08:	6022      	str	r2, [r4, #0]
 8013a0a:	7018      	strb	r0, [r3, #0]
 8013a0c:	e7e5      	b.n	80139da <_puts_r+0x76>
 8013a0e:	bf00      	nop
 8013a10:	080173a8 	.word	0x080173a8
 8013a14:	080173c8 	.word	0x080173c8
 8013a18:	08017388 	.word	0x08017388

08013a1c <puts>:
 8013a1c:	4b02      	ldr	r3, [pc, #8]	; (8013a28 <puts+0xc>)
 8013a1e:	4601      	mov	r1, r0
 8013a20:	6818      	ldr	r0, [r3, #0]
 8013a22:	f7ff bf9f 	b.w	8013964 <_puts_r>
 8013a26:	bf00      	nop
 8013a28:	2000002c 	.word	0x2000002c

08013a2c <lflush>:
 8013a2c:	8983      	ldrh	r3, [r0, #12]
 8013a2e:	f003 0309 	and.w	r3, r3, #9
 8013a32:	2b09      	cmp	r3, #9
 8013a34:	d101      	bne.n	8013a3a <lflush+0xe>
 8013a36:	f7fe badf 	b.w	8011ff8 <fflush>
 8013a3a:	2000      	movs	r0, #0
 8013a3c:	4770      	bx	lr
	...

08013a40 <__srefill_r>:
 8013a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a42:	460c      	mov	r4, r1
 8013a44:	4605      	mov	r5, r0
 8013a46:	b118      	cbz	r0, 8013a50 <__srefill_r+0x10>
 8013a48:	6983      	ldr	r3, [r0, #24]
 8013a4a:	b90b      	cbnz	r3, 8013a50 <__srefill_r+0x10>
 8013a4c:	f7fe fb26 	bl	801209c <__sinit>
 8013a50:	4b3c      	ldr	r3, [pc, #240]	; (8013b44 <__srefill_r+0x104>)
 8013a52:	429c      	cmp	r4, r3
 8013a54:	d10a      	bne.n	8013a6c <__srefill_r+0x2c>
 8013a56:	686c      	ldr	r4, [r5, #4]
 8013a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	6063      	str	r3, [r4, #4]
 8013a60:	b293      	uxth	r3, r2
 8013a62:	069e      	lsls	r6, r3, #26
 8013a64:	d50c      	bpl.n	8013a80 <__srefill_r+0x40>
 8013a66:	f04f 30ff 	mov.w	r0, #4294967295
 8013a6a:	e067      	b.n	8013b3c <__srefill_r+0xfc>
 8013a6c:	4b36      	ldr	r3, [pc, #216]	; (8013b48 <__srefill_r+0x108>)
 8013a6e:	429c      	cmp	r4, r3
 8013a70:	d101      	bne.n	8013a76 <__srefill_r+0x36>
 8013a72:	68ac      	ldr	r4, [r5, #8]
 8013a74:	e7f0      	b.n	8013a58 <__srefill_r+0x18>
 8013a76:	4b35      	ldr	r3, [pc, #212]	; (8013b4c <__srefill_r+0x10c>)
 8013a78:	429c      	cmp	r4, r3
 8013a7a:	bf08      	it	eq
 8013a7c:	68ec      	ldreq	r4, [r5, #12]
 8013a7e:	e7eb      	b.n	8013a58 <__srefill_r+0x18>
 8013a80:	0758      	lsls	r0, r3, #29
 8013a82:	d449      	bmi.n	8013b18 <__srefill_r+0xd8>
 8013a84:	06d9      	lsls	r1, r3, #27
 8013a86:	d405      	bmi.n	8013a94 <__srefill_r+0x54>
 8013a88:	2309      	movs	r3, #9
 8013a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013a8e:	602b      	str	r3, [r5, #0]
 8013a90:	81a2      	strh	r2, [r4, #12]
 8013a92:	e7e8      	b.n	8013a66 <__srefill_r+0x26>
 8013a94:	071a      	lsls	r2, r3, #28
 8013a96:	d50b      	bpl.n	8013ab0 <__srefill_r+0x70>
 8013a98:	4621      	mov	r1, r4
 8013a9a:	4628      	mov	r0, r5
 8013a9c:	f7fe fa82 	bl	8011fa4 <_fflush_r>
 8013aa0:	2800      	cmp	r0, #0
 8013aa2:	d1e0      	bne.n	8013a66 <__srefill_r+0x26>
 8013aa4:	89a3      	ldrh	r3, [r4, #12]
 8013aa6:	60a0      	str	r0, [r4, #8]
 8013aa8:	f023 0308 	bic.w	r3, r3, #8
 8013aac:	81a3      	strh	r3, [r4, #12]
 8013aae:	61a0      	str	r0, [r4, #24]
 8013ab0:	89a3      	ldrh	r3, [r4, #12]
 8013ab2:	f043 0304 	orr.w	r3, r3, #4
 8013ab6:	81a3      	strh	r3, [r4, #12]
 8013ab8:	6923      	ldr	r3, [r4, #16]
 8013aba:	b91b      	cbnz	r3, 8013ac4 <__srefill_r+0x84>
 8013abc:	4621      	mov	r1, r4
 8013abe:	4628      	mov	r0, r5
 8013ac0:	f7fe fbda 	bl	8012278 <__smakebuf_r>
 8013ac4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8013ac8:	b2be      	uxth	r6, r7
 8013aca:	07b3      	lsls	r3, r6, #30
 8013acc:	d00f      	beq.n	8013aee <__srefill_r+0xae>
 8013ace:	2301      	movs	r3, #1
 8013ad0:	81a3      	strh	r3, [r4, #12]
 8013ad2:	4b1f      	ldr	r3, [pc, #124]	; (8013b50 <__srefill_r+0x110>)
 8013ad4:	491f      	ldr	r1, [pc, #124]	; (8013b54 <__srefill_r+0x114>)
 8013ad6:	6818      	ldr	r0, [r3, #0]
 8013ad8:	f006 0609 	and.w	r6, r6, #9
 8013adc:	f7fe fb4a 	bl	8012174 <_fwalk>
 8013ae0:	2e09      	cmp	r6, #9
 8013ae2:	81a7      	strh	r7, [r4, #12]
 8013ae4:	d103      	bne.n	8013aee <__srefill_r+0xae>
 8013ae6:	4621      	mov	r1, r4
 8013ae8:	4628      	mov	r0, r5
 8013aea:	f7fe f9d5 	bl	8011e98 <__sflush_r>
 8013aee:	6922      	ldr	r2, [r4, #16]
 8013af0:	6022      	str	r2, [r4, #0]
 8013af2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013af4:	6963      	ldr	r3, [r4, #20]
 8013af6:	6a21      	ldr	r1, [r4, #32]
 8013af8:	4628      	mov	r0, r5
 8013afa:	47b0      	blx	r6
 8013afc:	2800      	cmp	r0, #0
 8013afe:	6060      	str	r0, [r4, #4]
 8013b00:	dc1d      	bgt.n	8013b3e <__srefill_r+0xfe>
 8013b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b06:	bf17      	itett	ne
 8013b08:	2200      	movne	r2, #0
 8013b0a:	f043 0320 	orreq.w	r3, r3, #32
 8013b0e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8013b12:	6062      	strne	r2, [r4, #4]
 8013b14:	81a3      	strh	r3, [r4, #12]
 8013b16:	e7a6      	b.n	8013a66 <__srefill_r+0x26>
 8013b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b1a:	2900      	cmp	r1, #0
 8013b1c:	d0cc      	beq.n	8013ab8 <__srefill_r+0x78>
 8013b1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b22:	4299      	cmp	r1, r3
 8013b24:	d002      	beq.n	8013b2c <__srefill_r+0xec>
 8013b26:	4628      	mov	r0, r5
 8013b28:	f7fe fbfa 	bl	8012320 <_free_r>
 8013b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b2e:	6063      	str	r3, [r4, #4]
 8013b30:	2000      	movs	r0, #0
 8013b32:	6360      	str	r0, [r4, #52]	; 0x34
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d0bf      	beq.n	8013ab8 <__srefill_r+0x78>
 8013b38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013b3a:	6023      	str	r3, [r4, #0]
 8013b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b3e:	2000      	movs	r0, #0
 8013b40:	e7fc      	b.n	8013b3c <__srefill_r+0xfc>
 8013b42:	bf00      	nop
 8013b44:	080173a8 	.word	0x080173a8
 8013b48:	080173c8 	.word	0x080173c8
 8013b4c:	08017388 	.word	0x08017388
 8013b50:	080173e8 	.word	0x080173e8
 8013b54:	08013a2d 	.word	0x08013a2d

08013b58 <_sbrk_r>:
 8013b58:	b538      	push	{r3, r4, r5, lr}
 8013b5a:	4c06      	ldr	r4, [pc, #24]	; (8013b74 <_sbrk_r+0x1c>)
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	4605      	mov	r5, r0
 8013b60:	4608      	mov	r0, r1
 8013b62:	6023      	str	r3, [r4, #0]
 8013b64:	f7fa f91a 	bl	800dd9c <_sbrk>
 8013b68:	1c43      	adds	r3, r0, #1
 8013b6a:	d102      	bne.n	8013b72 <_sbrk_r+0x1a>
 8013b6c:	6823      	ldr	r3, [r4, #0]
 8013b6e:	b103      	cbz	r3, 8013b72 <_sbrk_r+0x1a>
 8013b70:	602b      	str	r3, [r5, #0]
 8013b72:	bd38      	pop	{r3, r4, r5, pc}
 8013b74:	20004e4c 	.word	0x20004e4c

08013b78 <iscanf>:
 8013b78:	b40f      	push	{r0, r1, r2, r3}
 8013b7a:	4b0a      	ldr	r3, [pc, #40]	; (8013ba4 <iscanf+0x2c>)
 8013b7c:	b513      	push	{r0, r1, r4, lr}
 8013b7e:	681c      	ldr	r4, [r3, #0]
 8013b80:	b124      	cbz	r4, 8013b8c <iscanf+0x14>
 8013b82:	69a3      	ldr	r3, [r4, #24]
 8013b84:	b913      	cbnz	r3, 8013b8c <iscanf+0x14>
 8013b86:	4620      	mov	r0, r4
 8013b88:	f7fe fa88 	bl	801209c <__sinit>
 8013b8c:	ab05      	add	r3, sp, #20
 8013b8e:	9a04      	ldr	r2, [sp, #16]
 8013b90:	6861      	ldr	r1, [r4, #4]
 8013b92:	9301      	str	r3, [sp, #4]
 8013b94:	4620      	mov	r0, r4
 8013b96:	f7ff fb57 	bl	8013248 <_vfiscanf_r>
 8013b9a:	b002      	add	sp, #8
 8013b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ba0:	b004      	add	sp, #16
 8013ba2:	4770      	bx	lr
 8013ba4:	2000002c 	.word	0x2000002c

08013ba8 <__sccl>:
 8013ba8:	b570      	push	{r4, r5, r6, lr}
 8013baa:	780b      	ldrb	r3, [r1, #0]
 8013bac:	2b5e      	cmp	r3, #94	; 0x5e
 8013bae:	bf13      	iteet	ne
 8013bb0:	1c4a      	addne	r2, r1, #1
 8013bb2:	1c8a      	addeq	r2, r1, #2
 8013bb4:	784b      	ldrbeq	r3, [r1, #1]
 8013bb6:	2100      	movne	r1, #0
 8013bb8:	bf08      	it	eq
 8013bba:	2101      	moveq	r1, #1
 8013bbc:	1e44      	subs	r4, r0, #1
 8013bbe:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8013bc2:	f804 1f01 	strb.w	r1, [r4, #1]!
 8013bc6:	42ac      	cmp	r4, r5
 8013bc8:	d1fb      	bne.n	8013bc2 <__sccl+0x1a>
 8013bca:	b913      	cbnz	r3, 8013bd2 <__sccl+0x2a>
 8013bcc:	3a01      	subs	r2, #1
 8013bce:	4610      	mov	r0, r2
 8013bd0:	bd70      	pop	{r4, r5, r6, pc}
 8013bd2:	f081 0401 	eor.w	r4, r1, #1
 8013bd6:	54c4      	strb	r4, [r0, r3]
 8013bd8:	1c51      	adds	r1, r2, #1
 8013bda:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8013bde:	2d2d      	cmp	r5, #45	; 0x2d
 8013be0:	f101 36ff 	add.w	r6, r1, #4294967295
 8013be4:	460a      	mov	r2, r1
 8013be6:	d006      	beq.n	8013bf6 <__sccl+0x4e>
 8013be8:	2d5d      	cmp	r5, #93	; 0x5d
 8013bea:	d0f0      	beq.n	8013bce <__sccl+0x26>
 8013bec:	b90d      	cbnz	r5, 8013bf2 <__sccl+0x4a>
 8013bee:	4632      	mov	r2, r6
 8013bf0:	e7ed      	b.n	8013bce <__sccl+0x26>
 8013bf2:	462b      	mov	r3, r5
 8013bf4:	e7ef      	b.n	8013bd6 <__sccl+0x2e>
 8013bf6:	780e      	ldrb	r6, [r1, #0]
 8013bf8:	2e5d      	cmp	r6, #93	; 0x5d
 8013bfa:	d0fa      	beq.n	8013bf2 <__sccl+0x4a>
 8013bfc:	42b3      	cmp	r3, r6
 8013bfe:	dcf8      	bgt.n	8013bf2 <__sccl+0x4a>
 8013c00:	3301      	adds	r3, #1
 8013c02:	429e      	cmp	r6, r3
 8013c04:	54c4      	strb	r4, [r0, r3]
 8013c06:	dcfb      	bgt.n	8013c00 <__sccl+0x58>
 8013c08:	3102      	adds	r1, #2
 8013c0a:	e7e6      	b.n	8013bda <__sccl+0x32>

08013c0c <setbuf>:
 8013c0c:	2900      	cmp	r1, #0
 8013c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c12:	bf0c      	ite	eq
 8013c14:	2202      	moveq	r2, #2
 8013c16:	2200      	movne	r2, #0
 8013c18:	f000 b800 	b.w	8013c1c <setvbuf>

08013c1c <setvbuf>:
 8013c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013c20:	461d      	mov	r5, r3
 8013c22:	4b51      	ldr	r3, [pc, #324]	; (8013d68 <setvbuf+0x14c>)
 8013c24:	681e      	ldr	r6, [r3, #0]
 8013c26:	4604      	mov	r4, r0
 8013c28:	460f      	mov	r7, r1
 8013c2a:	4690      	mov	r8, r2
 8013c2c:	b126      	cbz	r6, 8013c38 <setvbuf+0x1c>
 8013c2e:	69b3      	ldr	r3, [r6, #24]
 8013c30:	b913      	cbnz	r3, 8013c38 <setvbuf+0x1c>
 8013c32:	4630      	mov	r0, r6
 8013c34:	f7fe fa32 	bl	801209c <__sinit>
 8013c38:	4b4c      	ldr	r3, [pc, #304]	; (8013d6c <setvbuf+0x150>)
 8013c3a:	429c      	cmp	r4, r3
 8013c3c:	d152      	bne.n	8013ce4 <setvbuf+0xc8>
 8013c3e:	6874      	ldr	r4, [r6, #4]
 8013c40:	f1b8 0f02 	cmp.w	r8, #2
 8013c44:	d006      	beq.n	8013c54 <setvbuf+0x38>
 8013c46:	f1b8 0f01 	cmp.w	r8, #1
 8013c4a:	f200 8089 	bhi.w	8013d60 <setvbuf+0x144>
 8013c4e:	2d00      	cmp	r5, #0
 8013c50:	f2c0 8086 	blt.w	8013d60 <setvbuf+0x144>
 8013c54:	4621      	mov	r1, r4
 8013c56:	4630      	mov	r0, r6
 8013c58:	f7fe f9a4 	bl	8011fa4 <_fflush_r>
 8013c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c5e:	b141      	cbz	r1, 8013c72 <setvbuf+0x56>
 8013c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c64:	4299      	cmp	r1, r3
 8013c66:	d002      	beq.n	8013c6e <setvbuf+0x52>
 8013c68:	4630      	mov	r0, r6
 8013c6a:	f7fe fb59 	bl	8012320 <_free_r>
 8013c6e:	2300      	movs	r3, #0
 8013c70:	6363      	str	r3, [r4, #52]	; 0x34
 8013c72:	2300      	movs	r3, #0
 8013c74:	61a3      	str	r3, [r4, #24]
 8013c76:	6063      	str	r3, [r4, #4]
 8013c78:	89a3      	ldrh	r3, [r4, #12]
 8013c7a:	061b      	lsls	r3, r3, #24
 8013c7c:	d503      	bpl.n	8013c86 <setvbuf+0x6a>
 8013c7e:	6921      	ldr	r1, [r4, #16]
 8013c80:	4630      	mov	r0, r6
 8013c82:	f7fe fb4d 	bl	8012320 <_free_r>
 8013c86:	89a3      	ldrh	r3, [r4, #12]
 8013c88:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8013c8c:	f023 0303 	bic.w	r3, r3, #3
 8013c90:	f1b8 0f02 	cmp.w	r8, #2
 8013c94:	81a3      	strh	r3, [r4, #12]
 8013c96:	d05d      	beq.n	8013d54 <setvbuf+0x138>
 8013c98:	ab01      	add	r3, sp, #4
 8013c9a:	466a      	mov	r2, sp
 8013c9c:	4621      	mov	r1, r4
 8013c9e:	4630      	mov	r0, r6
 8013ca0:	f7fe fac6 	bl	8012230 <__swhatbuf_r>
 8013ca4:	89a3      	ldrh	r3, [r4, #12]
 8013ca6:	4318      	orrs	r0, r3
 8013ca8:	81a0      	strh	r0, [r4, #12]
 8013caa:	bb2d      	cbnz	r5, 8013cf8 <setvbuf+0xdc>
 8013cac:	9d00      	ldr	r5, [sp, #0]
 8013cae:	4628      	mov	r0, r5
 8013cb0:	f002 fb56 	bl	8016360 <malloc>
 8013cb4:	4607      	mov	r7, r0
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	d14e      	bne.n	8013d58 <setvbuf+0x13c>
 8013cba:	f8dd 9000 	ldr.w	r9, [sp]
 8013cbe:	45a9      	cmp	r9, r5
 8013cc0:	d13c      	bne.n	8013d3c <setvbuf+0x120>
 8013cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8013cc6:	89a3      	ldrh	r3, [r4, #12]
 8013cc8:	f043 0302 	orr.w	r3, r3, #2
 8013ccc:	81a3      	strh	r3, [r4, #12]
 8013cce:	2300      	movs	r3, #0
 8013cd0:	60a3      	str	r3, [r4, #8]
 8013cd2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013cd6:	6023      	str	r3, [r4, #0]
 8013cd8:	6123      	str	r3, [r4, #16]
 8013cda:	2301      	movs	r3, #1
 8013cdc:	6163      	str	r3, [r4, #20]
 8013cde:	b003      	add	sp, #12
 8013ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ce4:	4b22      	ldr	r3, [pc, #136]	; (8013d70 <setvbuf+0x154>)
 8013ce6:	429c      	cmp	r4, r3
 8013ce8:	d101      	bne.n	8013cee <setvbuf+0xd2>
 8013cea:	68b4      	ldr	r4, [r6, #8]
 8013cec:	e7a8      	b.n	8013c40 <setvbuf+0x24>
 8013cee:	4b21      	ldr	r3, [pc, #132]	; (8013d74 <setvbuf+0x158>)
 8013cf0:	429c      	cmp	r4, r3
 8013cf2:	bf08      	it	eq
 8013cf4:	68f4      	ldreq	r4, [r6, #12]
 8013cf6:	e7a3      	b.n	8013c40 <setvbuf+0x24>
 8013cf8:	2f00      	cmp	r7, #0
 8013cfa:	d0d8      	beq.n	8013cae <setvbuf+0x92>
 8013cfc:	69b3      	ldr	r3, [r6, #24]
 8013cfe:	b913      	cbnz	r3, 8013d06 <setvbuf+0xea>
 8013d00:	4630      	mov	r0, r6
 8013d02:	f7fe f9cb 	bl	801209c <__sinit>
 8013d06:	f1b8 0f01 	cmp.w	r8, #1
 8013d0a:	bf08      	it	eq
 8013d0c:	89a3      	ldrheq	r3, [r4, #12]
 8013d0e:	6027      	str	r7, [r4, #0]
 8013d10:	bf04      	itt	eq
 8013d12:	f043 0301 	orreq.w	r3, r3, #1
 8013d16:	81a3      	strheq	r3, [r4, #12]
 8013d18:	89a3      	ldrh	r3, [r4, #12]
 8013d1a:	f013 0008 	ands.w	r0, r3, #8
 8013d1e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8013d22:	d01b      	beq.n	8013d5c <setvbuf+0x140>
 8013d24:	f013 0001 	ands.w	r0, r3, #1
 8013d28:	bf18      	it	ne
 8013d2a:	426d      	negne	r5, r5
 8013d2c:	f04f 0300 	mov.w	r3, #0
 8013d30:	bf1d      	ittte	ne
 8013d32:	60a3      	strne	r3, [r4, #8]
 8013d34:	61a5      	strne	r5, [r4, #24]
 8013d36:	4618      	movne	r0, r3
 8013d38:	60a5      	streq	r5, [r4, #8]
 8013d3a:	e7d0      	b.n	8013cde <setvbuf+0xc2>
 8013d3c:	4648      	mov	r0, r9
 8013d3e:	f002 fb0f 	bl	8016360 <malloc>
 8013d42:	4607      	mov	r7, r0
 8013d44:	2800      	cmp	r0, #0
 8013d46:	d0bc      	beq.n	8013cc2 <setvbuf+0xa6>
 8013d48:	89a3      	ldrh	r3, [r4, #12]
 8013d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d4e:	81a3      	strh	r3, [r4, #12]
 8013d50:	464d      	mov	r5, r9
 8013d52:	e7d3      	b.n	8013cfc <setvbuf+0xe0>
 8013d54:	2000      	movs	r0, #0
 8013d56:	e7b6      	b.n	8013cc6 <setvbuf+0xaa>
 8013d58:	46a9      	mov	r9, r5
 8013d5a:	e7f5      	b.n	8013d48 <setvbuf+0x12c>
 8013d5c:	60a0      	str	r0, [r4, #8]
 8013d5e:	e7be      	b.n	8013cde <setvbuf+0xc2>
 8013d60:	f04f 30ff 	mov.w	r0, #4294967295
 8013d64:	e7bb      	b.n	8013cde <setvbuf+0xc2>
 8013d66:	bf00      	nop
 8013d68:	2000002c 	.word	0x2000002c
 8013d6c:	080173a8 	.word	0x080173a8
 8013d70:	080173c8 	.word	0x080173c8
 8013d74:	08017388 	.word	0x08017388

08013d78 <nanf>:
 8013d78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d80 <nanf+0x8>
 8013d7c:	4770      	bx	lr
 8013d7e:	bf00      	nop
 8013d80:	7fc00000 	.word	0x7fc00000

08013d84 <siprintf>:
 8013d84:	b40e      	push	{r1, r2, r3}
 8013d86:	b500      	push	{lr}
 8013d88:	b09c      	sub	sp, #112	; 0x70
 8013d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8013d8c:	9002      	str	r0, [sp, #8]
 8013d8e:	9006      	str	r0, [sp, #24]
 8013d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013d94:	4809      	ldr	r0, [pc, #36]	; (8013dbc <siprintf+0x38>)
 8013d96:	9107      	str	r1, [sp, #28]
 8013d98:	9104      	str	r1, [sp, #16]
 8013d9a:	4909      	ldr	r1, [pc, #36]	; (8013dc0 <siprintf+0x3c>)
 8013d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013da0:	9105      	str	r1, [sp, #20]
 8013da2:	6800      	ldr	r0, [r0, #0]
 8013da4:	9301      	str	r3, [sp, #4]
 8013da6:	a902      	add	r1, sp, #8
 8013da8:	f002 ff9c 	bl	8016ce4 <_svfiprintf_r>
 8013dac:	9b02      	ldr	r3, [sp, #8]
 8013dae:	2200      	movs	r2, #0
 8013db0:	701a      	strb	r2, [r3, #0]
 8013db2:	b01c      	add	sp, #112	; 0x70
 8013db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013db8:	b003      	add	sp, #12
 8013dba:	4770      	bx	lr
 8013dbc:	2000002c 	.word	0x2000002c
 8013dc0:	ffff0208 	.word	0xffff0208

08013dc4 <__sread>:
 8013dc4:	b510      	push	{r4, lr}
 8013dc6:	460c      	mov	r4, r1
 8013dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dcc:	f003 f8b8 	bl	8016f40 <_read_r>
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	bfab      	itete	ge
 8013dd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8013dd8:	181b      	addge	r3, r3, r0
 8013dda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013dde:	bfac      	ite	ge
 8013de0:	6563      	strge	r3, [r4, #84]	; 0x54
 8013de2:	81a3      	strhlt	r3, [r4, #12]
 8013de4:	bd10      	pop	{r4, pc}

08013de6 <__swrite>:
 8013de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dea:	461f      	mov	r7, r3
 8013dec:	898b      	ldrh	r3, [r1, #12]
 8013dee:	05db      	lsls	r3, r3, #23
 8013df0:	4605      	mov	r5, r0
 8013df2:	460c      	mov	r4, r1
 8013df4:	4616      	mov	r6, r2
 8013df6:	d505      	bpl.n	8013e04 <__swrite+0x1e>
 8013df8:	2302      	movs	r3, #2
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e00:	f002 fa9c 	bl	801633c <_lseek_r>
 8013e04:	89a3      	ldrh	r3, [r4, #12]
 8013e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e0e:	81a3      	strh	r3, [r4, #12]
 8013e10:	4632      	mov	r2, r6
 8013e12:	463b      	mov	r3, r7
 8013e14:	4628      	mov	r0, r5
 8013e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e1a:	f001 b851 	b.w	8014ec0 <_write_r>

08013e1e <__sseek>:
 8013e1e:	b510      	push	{r4, lr}
 8013e20:	460c      	mov	r4, r1
 8013e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e26:	f002 fa89 	bl	801633c <_lseek_r>
 8013e2a:	1c43      	adds	r3, r0, #1
 8013e2c:	89a3      	ldrh	r3, [r4, #12]
 8013e2e:	bf15      	itete	ne
 8013e30:	6560      	strne	r0, [r4, #84]	; 0x54
 8013e32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013e36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013e3a:	81a3      	strheq	r3, [r4, #12]
 8013e3c:	bf18      	it	ne
 8013e3e:	81a3      	strhne	r3, [r4, #12]
 8013e40:	bd10      	pop	{r4, pc}

08013e42 <__sclose>:
 8013e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e46:	f001 b8bb 	b.w	8014fc0 <_close_r>

08013e4a <sulp>:
 8013e4a:	b570      	push	{r4, r5, r6, lr}
 8013e4c:	4604      	mov	r4, r0
 8013e4e:	460d      	mov	r5, r1
 8013e50:	ec45 4b10 	vmov	d0, r4, r5
 8013e54:	4616      	mov	r6, r2
 8013e56:	f002 fd83 	bl	8016960 <__ulp>
 8013e5a:	ec51 0b10 	vmov	r0, r1, d0
 8013e5e:	b17e      	cbz	r6, 8013e80 <sulp+0x36>
 8013e60:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013e64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	dd09      	ble.n	8013e80 <sulp+0x36>
 8013e6c:	051b      	lsls	r3, r3, #20
 8013e6e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013e72:	2400      	movs	r4, #0
 8013e74:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013e78:	4622      	mov	r2, r4
 8013e7a:	462b      	mov	r3, r5
 8013e7c:	f7f4 faf4 	bl	8008468 <__aeabi_dmul>
 8013e80:	bd70      	pop	{r4, r5, r6, pc}
 8013e82:	0000      	movs	r0, r0
 8013e84:	0000      	movs	r0, r0
	...

08013e88 <_strtod_l>:
 8013e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e8c:	461f      	mov	r7, r3
 8013e8e:	b0a1      	sub	sp, #132	; 0x84
 8013e90:	2300      	movs	r3, #0
 8013e92:	4681      	mov	r9, r0
 8013e94:	4638      	mov	r0, r7
 8013e96:	460e      	mov	r6, r1
 8013e98:	9217      	str	r2, [sp, #92]	; 0x5c
 8013e9a:	931c      	str	r3, [sp, #112]	; 0x70
 8013e9c:	f002 fa3e 	bl	801631c <__localeconv_l>
 8013ea0:	4680      	mov	r8, r0
 8013ea2:	6800      	ldr	r0, [r0, #0]
 8013ea4:	f7f4 f8cc 	bl	8008040 <strlen>
 8013ea8:	f04f 0a00 	mov.w	sl, #0
 8013eac:	4604      	mov	r4, r0
 8013eae:	f04f 0b00 	mov.w	fp, #0
 8013eb2:	961b      	str	r6, [sp, #108]	; 0x6c
 8013eb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013eb6:	781a      	ldrb	r2, [r3, #0]
 8013eb8:	2a0d      	cmp	r2, #13
 8013eba:	d832      	bhi.n	8013f22 <_strtod_l+0x9a>
 8013ebc:	2a09      	cmp	r2, #9
 8013ebe:	d236      	bcs.n	8013f2e <_strtod_l+0xa6>
 8013ec0:	2a00      	cmp	r2, #0
 8013ec2:	d03e      	beq.n	8013f42 <_strtod_l+0xba>
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8013ec8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013eca:	782b      	ldrb	r3, [r5, #0]
 8013ecc:	2b30      	cmp	r3, #48	; 0x30
 8013ece:	f040 80ac 	bne.w	801402a <_strtod_l+0x1a2>
 8013ed2:	786b      	ldrb	r3, [r5, #1]
 8013ed4:	2b58      	cmp	r3, #88	; 0x58
 8013ed6:	d001      	beq.n	8013edc <_strtod_l+0x54>
 8013ed8:	2b78      	cmp	r3, #120	; 0x78
 8013eda:	d167      	bne.n	8013fac <_strtod_l+0x124>
 8013edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ede:	9301      	str	r3, [sp, #4]
 8013ee0:	ab1c      	add	r3, sp, #112	; 0x70
 8013ee2:	9300      	str	r3, [sp, #0]
 8013ee4:	9702      	str	r7, [sp, #8]
 8013ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8013ee8:	4a88      	ldr	r2, [pc, #544]	; (801410c <_strtod_l+0x284>)
 8013eea:	a91b      	add	r1, sp, #108	; 0x6c
 8013eec:	4648      	mov	r0, r9
 8013eee:	f001 ff1c 	bl	8015d2a <__gethex>
 8013ef2:	f010 0407 	ands.w	r4, r0, #7
 8013ef6:	4606      	mov	r6, r0
 8013ef8:	d005      	beq.n	8013f06 <_strtod_l+0x7e>
 8013efa:	2c06      	cmp	r4, #6
 8013efc:	d12b      	bne.n	8013f56 <_strtod_l+0xce>
 8013efe:	3501      	adds	r5, #1
 8013f00:	2300      	movs	r3, #0
 8013f02:	951b      	str	r5, [sp, #108]	; 0x6c
 8013f04:	930d      	str	r3, [sp, #52]	; 0x34
 8013f06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	f040 859a 	bne.w	8014a42 <_strtod_l+0xbba>
 8013f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f10:	b1e3      	cbz	r3, 8013f4c <_strtod_l+0xc4>
 8013f12:	4652      	mov	r2, sl
 8013f14:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013f18:	ec43 2b10 	vmov	d0, r2, r3
 8013f1c:	b021      	add	sp, #132	; 0x84
 8013f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f22:	2a2b      	cmp	r2, #43	; 0x2b
 8013f24:	d015      	beq.n	8013f52 <_strtod_l+0xca>
 8013f26:	2a2d      	cmp	r2, #45	; 0x2d
 8013f28:	d004      	beq.n	8013f34 <_strtod_l+0xac>
 8013f2a:	2a20      	cmp	r2, #32
 8013f2c:	d1ca      	bne.n	8013ec4 <_strtod_l+0x3c>
 8013f2e:	3301      	adds	r3, #1
 8013f30:	931b      	str	r3, [sp, #108]	; 0x6c
 8013f32:	e7bf      	b.n	8013eb4 <_strtod_l+0x2c>
 8013f34:	2201      	movs	r2, #1
 8013f36:	920d      	str	r2, [sp, #52]	; 0x34
 8013f38:	1c5a      	adds	r2, r3, #1
 8013f3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8013f3c:	785b      	ldrb	r3, [r3, #1]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d1c2      	bne.n	8013ec8 <_strtod_l+0x40>
 8013f42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013f44:	961b      	str	r6, [sp, #108]	; 0x6c
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	f040 8579 	bne.w	8014a3e <_strtod_l+0xbb6>
 8013f4c:	4652      	mov	r2, sl
 8013f4e:	465b      	mov	r3, fp
 8013f50:	e7e2      	b.n	8013f18 <_strtod_l+0x90>
 8013f52:	2200      	movs	r2, #0
 8013f54:	e7ef      	b.n	8013f36 <_strtod_l+0xae>
 8013f56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013f58:	b13a      	cbz	r2, 8013f6a <_strtod_l+0xe2>
 8013f5a:	2135      	movs	r1, #53	; 0x35
 8013f5c:	a81e      	add	r0, sp, #120	; 0x78
 8013f5e:	f002 fdf7 	bl	8016b50 <__copybits>
 8013f62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013f64:	4648      	mov	r0, r9
 8013f66:	f002 fa64 	bl	8016432 <_Bfree>
 8013f6a:	3c01      	subs	r4, #1
 8013f6c:	2c04      	cmp	r4, #4
 8013f6e:	d806      	bhi.n	8013f7e <_strtod_l+0xf6>
 8013f70:	e8df f004 	tbb	[pc, r4]
 8013f74:	1714030a 	.word	0x1714030a
 8013f78:	0a          	.byte	0x0a
 8013f79:	00          	.byte	0x00
 8013f7a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013f7e:	0730      	lsls	r0, r6, #28
 8013f80:	d5c1      	bpl.n	8013f06 <_strtod_l+0x7e>
 8013f82:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013f86:	e7be      	b.n	8013f06 <_strtod_l+0x7e>
 8013f88:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013f8c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013f8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013f92:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013f96:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013f9a:	e7f0      	b.n	8013f7e <_strtod_l+0xf6>
 8013f9c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014110 <_strtod_l+0x288>
 8013fa0:	e7ed      	b.n	8013f7e <_strtod_l+0xf6>
 8013fa2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013fa6:	f04f 3aff 	mov.w	sl, #4294967295
 8013faa:	e7e8      	b.n	8013f7e <_strtod_l+0xf6>
 8013fac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013fae:	1c5a      	adds	r2, r3, #1
 8013fb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8013fb2:	785b      	ldrb	r3, [r3, #1]
 8013fb4:	2b30      	cmp	r3, #48	; 0x30
 8013fb6:	d0f9      	beq.n	8013fac <_strtod_l+0x124>
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d0a4      	beq.n	8013f06 <_strtod_l+0x7e>
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	2500      	movs	r5, #0
 8013fc0:	9306      	str	r3, [sp, #24]
 8013fc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013fc4:	9308      	str	r3, [sp, #32]
 8013fc6:	9507      	str	r5, [sp, #28]
 8013fc8:	9505      	str	r5, [sp, #20]
 8013fca:	220a      	movs	r2, #10
 8013fcc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013fce:	7807      	ldrb	r7, [r0, #0]
 8013fd0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013fd4:	b2d9      	uxtb	r1, r3
 8013fd6:	2909      	cmp	r1, #9
 8013fd8:	d929      	bls.n	801402e <_strtod_l+0x1a6>
 8013fda:	4622      	mov	r2, r4
 8013fdc:	f8d8 1000 	ldr.w	r1, [r8]
 8013fe0:	f002 ffc0 	bl	8016f64 <strncmp>
 8013fe4:	2800      	cmp	r0, #0
 8013fe6:	d031      	beq.n	801404c <_strtod_l+0x1c4>
 8013fe8:	2000      	movs	r0, #0
 8013fea:	9c05      	ldr	r4, [sp, #20]
 8013fec:	9004      	str	r0, [sp, #16]
 8013fee:	463b      	mov	r3, r7
 8013ff0:	4602      	mov	r2, r0
 8013ff2:	2b65      	cmp	r3, #101	; 0x65
 8013ff4:	d001      	beq.n	8013ffa <_strtod_l+0x172>
 8013ff6:	2b45      	cmp	r3, #69	; 0x45
 8013ff8:	d114      	bne.n	8014024 <_strtod_l+0x19c>
 8013ffa:	b924      	cbnz	r4, 8014006 <_strtod_l+0x17e>
 8013ffc:	b910      	cbnz	r0, 8014004 <_strtod_l+0x17c>
 8013ffe:	9b06      	ldr	r3, [sp, #24]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d09e      	beq.n	8013f42 <_strtod_l+0xba>
 8014004:	2400      	movs	r4, #0
 8014006:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014008:	1c73      	adds	r3, r6, #1
 801400a:	931b      	str	r3, [sp, #108]	; 0x6c
 801400c:	7873      	ldrb	r3, [r6, #1]
 801400e:	2b2b      	cmp	r3, #43	; 0x2b
 8014010:	d078      	beq.n	8014104 <_strtod_l+0x27c>
 8014012:	2b2d      	cmp	r3, #45	; 0x2d
 8014014:	d070      	beq.n	80140f8 <_strtod_l+0x270>
 8014016:	f04f 0c00 	mov.w	ip, #0
 801401a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801401e:	2f09      	cmp	r7, #9
 8014020:	d97c      	bls.n	801411c <_strtod_l+0x294>
 8014022:	961b      	str	r6, [sp, #108]	; 0x6c
 8014024:	f04f 0e00 	mov.w	lr, #0
 8014028:	e09a      	b.n	8014160 <_strtod_l+0x2d8>
 801402a:	2300      	movs	r3, #0
 801402c:	e7c7      	b.n	8013fbe <_strtod_l+0x136>
 801402e:	9905      	ldr	r1, [sp, #20]
 8014030:	2908      	cmp	r1, #8
 8014032:	bfdd      	ittte	le
 8014034:	9907      	ldrle	r1, [sp, #28]
 8014036:	fb02 3301 	mlale	r3, r2, r1, r3
 801403a:	9307      	strle	r3, [sp, #28]
 801403c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014040:	9b05      	ldr	r3, [sp, #20]
 8014042:	3001      	adds	r0, #1
 8014044:	3301      	adds	r3, #1
 8014046:	9305      	str	r3, [sp, #20]
 8014048:	901b      	str	r0, [sp, #108]	; 0x6c
 801404a:	e7bf      	b.n	8013fcc <_strtod_l+0x144>
 801404c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801404e:	191a      	adds	r2, r3, r4
 8014050:	921b      	str	r2, [sp, #108]	; 0x6c
 8014052:	9a05      	ldr	r2, [sp, #20]
 8014054:	5d1b      	ldrb	r3, [r3, r4]
 8014056:	2a00      	cmp	r2, #0
 8014058:	d037      	beq.n	80140ca <_strtod_l+0x242>
 801405a:	9c05      	ldr	r4, [sp, #20]
 801405c:	4602      	mov	r2, r0
 801405e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014062:	2909      	cmp	r1, #9
 8014064:	d913      	bls.n	801408e <_strtod_l+0x206>
 8014066:	2101      	movs	r1, #1
 8014068:	9104      	str	r1, [sp, #16]
 801406a:	e7c2      	b.n	8013ff2 <_strtod_l+0x16a>
 801406c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801406e:	1c5a      	adds	r2, r3, #1
 8014070:	921b      	str	r2, [sp, #108]	; 0x6c
 8014072:	785b      	ldrb	r3, [r3, #1]
 8014074:	3001      	adds	r0, #1
 8014076:	2b30      	cmp	r3, #48	; 0x30
 8014078:	d0f8      	beq.n	801406c <_strtod_l+0x1e4>
 801407a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801407e:	2a08      	cmp	r2, #8
 8014080:	f200 84e4 	bhi.w	8014a4c <_strtod_l+0xbc4>
 8014084:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014086:	9208      	str	r2, [sp, #32]
 8014088:	4602      	mov	r2, r0
 801408a:	2000      	movs	r0, #0
 801408c:	4604      	mov	r4, r0
 801408e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8014092:	f100 0101 	add.w	r1, r0, #1
 8014096:	d012      	beq.n	80140be <_strtod_l+0x236>
 8014098:	440a      	add	r2, r1
 801409a:	eb00 0c04 	add.w	ip, r0, r4
 801409e:	4621      	mov	r1, r4
 80140a0:	270a      	movs	r7, #10
 80140a2:	458c      	cmp	ip, r1
 80140a4:	d113      	bne.n	80140ce <_strtod_l+0x246>
 80140a6:	1821      	adds	r1, r4, r0
 80140a8:	2908      	cmp	r1, #8
 80140aa:	f104 0401 	add.w	r4, r4, #1
 80140ae:	4404      	add	r4, r0
 80140b0:	dc19      	bgt.n	80140e6 <_strtod_l+0x25e>
 80140b2:	9b07      	ldr	r3, [sp, #28]
 80140b4:	210a      	movs	r1, #10
 80140b6:	fb01 e303 	mla	r3, r1, r3, lr
 80140ba:	9307      	str	r3, [sp, #28]
 80140bc:	2100      	movs	r1, #0
 80140be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80140c0:	1c58      	adds	r0, r3, #1
 80140c2:	901b      	str	r0, [sp, #108]	; 0x6c
 80140c4:	785b      	ldrb	r3, [r3, #1]
 80140c6:	4608      	mov	r0, r1
 80140c8:	e7c9      	b.n	801405e <_strtod_l+0x1d6>
 80140ca:	9805      	ldr	r0, [sp, #20]
 80140cc:	e7d3      	b.n	8014076 <_strtod_l+0x1ee>
 80140ce:	2908      	cmp	r1, #8
 80140d0:	f101 0101 	add.w	r1, r1, #1
 80140d4:	dc03      	bgt.n	80140de <_strtod_l+0x256>
 80140d6:	9b07      	ldr	r3, [sp, #28]
 80140d8:	437b      	muls	r3, r7
 80140da:	9307      	str	r3, [sp, #28]
 80140dc:	e7e1      	b.n	80140a2 <_strtod_l+0x21a>
 80140de:	2910      	cmp	r1, #16
 80140e0:	bfd8      	it	le
 80140e2:	437d      	mulle	r5, r7
 80140e4:	e7dd      	b.n	80140a2 <_strtod_l+0x21a>
 80140e6:	2c10      	cmp	r4, #16
 80140e8:	bfdc      	itt	le
 80140ea:	210a      	movle	r1, #10
 80140ec:	fb01 e505 	mlale	r5, r1, r5, lr
 80140f0:	e7e4      	b.n	80140bc <_strtod_l+0x234>
 80140f2:	2301      	movs	r3, #1
 80140f4:	9304      	str	r3, [sp, #16]
 80140f6:	e781      	b.n	8013ffc <_strtod_l+0x174>
 80140f8:	f04f 0c01 	mov.w	ip, #1
 80140fc:	1cb3      	adds	r3, r6, #2
 80140fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8014100:	78b3      	ldrb	r3, [r6, #2]
 8014102:	e78a      	b.n	801401a <_strtod_l+0x192>
 8014104:	f04f 0c00 	mov.w	ip, #0
 8014108:	e7f8      	b.n	80140fc <_strtod_l+0x274>
 801410a:	bf00      	nop
 801410c:	08017450 	.word	0x08017450
 8014110:	7ff00000 	.word	0x7ff00000
 8014114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014116:	1c5f      	adds	r7, r3, #1
 8014118:	971b      	str	r7, [sp, #108]	; 0x6c
 801411a:	785b      	ldrb	r3, [r3, #1]
 801411c:	2b30      	cmp	r3, #48	; 0x30
 801411e:	d0f9      	beq.n	8014114 <_strtod_l+0x28c>
 8014120:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8014124:	2f08      	cmp	r7, #8
 8014126:	f63f af7d 	bhi.w	8014024 <_strtod_l+0x19c>
 801412a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801412e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014130:	930a      	str	r3, [sp, #40]	; 0x28
 8014132:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014134:	1c5f      	adds	r7, r3, #1
 8014136:	971b      	str	r7, [sp, #108]	; 0x6c
 8014138:	785b      	ldrb	r3, [r3, #1]
 801413a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801413e:	f1b8 0f09 	cmp.w	r8, #9
 8014142:	d937      	bls.n	80141b4 <_strtod_l+0x32c>
 8014144:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014146:	1a7f      	subs	r7, r7, r1
 8014148:	2f08      	cmp	r7, #8
 801414a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801414e:	dc37      	bgt.n	80141c0 <_strtod_l+0x338>
 8014150:	45be      	cmp	lr, r7
 8014152:	bfa8      	it	ge
 8014154:	46be      	movge	lr, r7
 8014156:	f1bc 0f00 	cmp.w	ip, #0
 801415a:	d001      	beq.n	8014160 <_strtod_l+0x2d8>
 801415c:	f1ce 0e00 	rsb	lr, lr, #0
 8014160:	2c00      	cmp	r4, #0
 8014162:	d151      	bne.n	8014208 <_strtod_l+0x380>
 8014164:	2800      	cmp	r0, #0
 8014166:	f47f aece 	bne.w	8013f06 <_strtod_l+0x7e>
 801416a:	9a06      	ldr	r2, [sp, #24]
 801416c:	2a00      	cmp	r2, #0
 801416e:	f47f aeca 	bne.w	8013f06 <_strtod_l+0x7e>
 8014172:	9a04      	ldr	r2, [sp, #16]
 8014174:	2a00      	cmp	r2, #0
 8014176:	f47f aee4 	bne.w	8013f42 <_strtod_l+0xba>
 801417a:	2b4e      	cmp	r3, #78	; 0x4e
 801417c:	d027      	beq.n	80141ce <_strtod_l+0x346>
 801417e:	dc21      	bgt.n	80141c4 <_strtod_l+0x33c>
 8014180:	2b49      	cmp	r3, #73	; 0x49
 8014182:	f47f aede 	bne.w	8013f42 <_strtod_l+0xba>
 8014186:	49a0      	ldr	r1, [pc, #640]	; (8014408 <_strtod_l+0x580>)
 8014188:	a81b      	add	r0, sp, #108	; 0x6c
 801418a:	f002 f801 	bl	8016190 <__match>
 801418e:	2800      	cmp	r0, #0
 8014190:	f43f aed7 	beq.w	8013f42 <_strtod_l+0xba>
 8014194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014196:	499d      	ldr	r1, [pc, #628]	; (801440c <_strtod_l+0x584>)
 8014198:	3b01      	subs	r3, #1
 801419a:	a81b      	add	r0, sp, #108	; 0x6c
 801419c:	931b      	str	r3, [sp, #108]	; 0x6c
 801419e:	f001 fff7 	bl	8016190 <__match>
 80141a2:	b910      	cbnz	r0, 80141aa <_strtod_l+0x322>
 80141a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80141a6:	3301      	adds	r3, #1
 80141a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80141aa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014420 <_strtod_l+0x598>
 80141ae:	f04f 0a00 	mov.w	sl, #0
 80141b2:	e6a8      	b.n	8013f06 <_strtod_l+0x7e>
 80141b4:	210a      	movs	r1, #10
 80141b6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80141ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80141be:	e7b8      	b.n	8014132 <_strtod_l+0x2aa>
 80141c0:	46be      	mov	lr, r7
 80141c2:	e7c8      	b.n	8014156 <_strtod_l+0x2ce>
 80141c4:	2b69      	cmp	r3, #105	; 0x69
 80141c6:	d0de      	beq.n	8014186 <_strtod_l+0x2fe>
 80141c8:	2b6e      	cmp	r3, #110	; 0x6e
 80141ca:	f47f aeba 	bne.w	8013f42 <_strtod_l+0xba>
 80141ce:	4990      	ldr	r1, [pc, #576]	; (8014410 <_strtod_l+0x588>)
 80141d0:	a81b      	add	r0, sp, #108	; 0x6c
 80141d2:	f001 ffdd 	bl	8016190 <__match>
 80141d6:	2800      	cmp	r0, #0
 80141d8:	f43f aeb3 	beq.w	8013f42 <_strtod_l+0xba>
 80141dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	2b28      	cmp	r3, #40	; 0x28
 80141e2:	d10e      	bne.n	8014202 <_strtod_l+0x37a>
 80141e4:	aa1e      	add	r2, sp, #120	; 0x78
 80141e6:	498b      	ldr	r1, [pc, #556]	; (8014414 <_strtod_l+0x58c>)
 80141e8:	a81b      	add	r0, sp, #108	; 0x6c
 80141ea:	f001 ffe5 	bl	80161b8 <__hexnan>
 80141ee:	2805      	cmp	r0, #5
 80141f0:	d107      	bne.n	8014202 <_strtod_l+0x37a>
 80141f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80141f4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80141f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80141fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014200:	e681      	b.n	8013f06 <_strtod_l+0x7e>
 8014202:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014428 <_strtod_l+0x5a0>
 8014206:	e7d2      	b.n	80141ae <_strtod_l+0x326>
 8014208:	ebae 0302 	sub.w	r3, lr, r2
 801420c:	9306      	str	r3, [sp, #24]
 801420e:	9b05      	ldr	r3, [sp, #20]
 8014210:	9807      	ldr	r0, [sp, #28]
 8014212:	2b00      	cmp	r3, #0
 8014214:	bf08      	it	eq
 8014216:	4623      	moveq	r3, r4
 8014218:	2c10      	cmp	r4, #16
 801421a:	9305      	str	r3, [sp, #20]
 801421c:	46a0      	mov	r8, r4
 801421e:	bfa8      	it	ge
 8014220:	f04f 0810 	movge.w	r8, #16
 8014224:	f7f4 f8a6 	bl	8008374 <__aeabi_ui2d>
 8014228:	2c09      	cmp	r4, #9
 801422a:	4682      	mov	sl, r0
 801422c:	468b      	mov	fp, r1
 801422e:	dc13      	bgt.n	8014258 <_strtod_l+0x3d0>
 8014230:	9b06      	ldr	r3, [sp, #24]
 8014232:	2b00      	cmp	r3, #0
 8014234:	f43f ae67 	beq.w	8013f06 <_strtod_l+0x7e>
 8014238:	9b06      	ldr	r3, [sp, #24]
 801423a:	dd7a      	ble.n	8014332 <_strtod_l+0x4aa>
 801423c:	2b16      	cmp	r3, #22
 801423e:	dc61      	bgt.n	8014304 <_strtod_l+0x47c>
 8014240:	4a75      	ldr	r2, [pc, #468]	; (8014418 <_strtod_l+0x590>)
 8014242:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8014246:	e9de 0100 	ldrd	r0, r1, [lr]
 801424a:	4652      	mov	r2, sl
 801424c:	465b      	mov	r3, fp
 801424e:	f7f4 f90b 	bl	8008468 <__aeabi_dmul>
 8014252:	4682      	mov	sl, r0
 8014254:	468b      	mov	fp, r1
 8014256:	e656      	b.n	8013f06 <_strtod_l+0x7e>
 8014258:	4b6f      	ldr	r3, [pc, #444]	; (8014418 <_strtod_l+0x590>)
 801425a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801425e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014262:	f7f4 f901 	bl	8008468 <__aeabi_dmul>
 8014266:	4606      	mov	r6, r0
 8014268:	4628      	mov	r0, r5
 801426a:	460f      	mov	r7, r1
 801426c:	f7f4 f882 	bl	8008374 <__aeabi_ui2d>
 8014270:	4602      	mov	r2, r0
 8014272:	460b      	mov	r3, r1
 8014274:	4630      	mov	r0, r6
 8014276:	4639      	mov	r1, r7
 8014278:	f7f3 ff40 	bl	80080fc <__adddf3>
 801427c:	2c0f      	cmp	r4, #15
 801427e:	4682      	mov	sl, r0
 8014280:	468b      	mov	fp, r1
 8014282:	ddd5      	ble.n	8014230 <_strtod_l+0x3a8>
 8014284:	9b06      	ldr	r3, [sp, #24]
 8014286:	eba4 0808 	sub.w	r8, r4, r8
 801428a:	4498      	add	r8, r3
 801428c:	f1b8 0f00 	cmp.w	r8, #0
 8014290:	f340 8096 	ble.w	80143c0 <_strtod_l+0x538>
 8014294:	f018 030f 	ands.w	r3, r8, #15
 8014298:	d00a      	beq.n	80142b0 <_strtod_l+0x428>
 801429a:	495f      	ldr	r1, [pc, #380]	; (8014418 <_strtod_l+0x590>)
 801429c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80142a0:	4652      	mov	r2, sl
 80142a2:	465b      	mov	r3, fp
 80142a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142a8:	f7f4 f8de 	bl	8008468 <__aeabi_dmul>
 80142ac:	4682      	mov	sl, r0
 80142ae:	468b      	mov	fp, r1
 80142b0:	f038 080f 	bics.w	r8, r8, #15
 80142b4:	d073      	beq.n	801439e <_strtod_l+0x516>
 80142b6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80142ba:	dd47      	ble.n	801434c <_strtod_l+0x4c4>
 80142bc:	2400      	movs	r4, #0
 80142be:	46a0      	mov	r8, r4
 80142c0:	9407      	str	r4, [sp, #28]
 80142c2:	9405      	str	r4, [sp, #20]
 80142c4:	2322      	movs	r3, #34	; 0x22
 80142c6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014420 <_strtod_l+0x598>
 80142ca:	f8c9 3000 	str.w	r3, [r9]
 80142ce:	f04f 0a00 	mov.w	sl, #0
 80142d2:	9b07      	ldr	r3, [sp, #28]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	f43f ae16 	beq.w	8013f06 <_strtod_l+0x7e>
 80142da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80142dc:	4648      	mov	r0, r9
 80142de:	f002 f8a8 	bl	8016432 <_Bfree>
 80142e2:	9905      	ldr	r1, [sp, #20]
 80142e4:	4648      	mov	r0, r9
 80142e6:	f002 f8a4 	bl	8016432 <_Bfree>
 80142ea:	4641      	mov	r1, r8
 80142ec:	4648      	mov	r0, r9
 80142ee:	f002 f8a0 	bl	8016432 <_Bfree>
 80142f2:	9907      	ldr	r1, [sp, #28]
 80142f4:	4648      	mov	r0, r9
 80142f6:	f002 f89c 	bl	8016432 <_Bfree>
 80142fa:	4621      	mov	r1, r4
 80142fc:	4648      	mov	r0, r9
 80142fe:	f002 f898 	bl	8016432 <_Bfree>
 8014302:	e600      	b.n	8013f06 <_strtod_l+0x7e>
 8014304:	9a06      	ldr	r2, [sp, #24]
 8014306:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801430a:	4293      	cmp	r3, r2
 801430c:	dbba      	blt.n	8014284 <_strtod_l+0x3fc>
 801430e:	4d42      	ldr	r5, [pc, #264]	; (8014418 <_strtod_l+0x590>)
 8014310:	f1c4 040f 	rsb	r4, r4, #15
 8014314:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014318:	4652      	mov	r2, sl
 801431a:	465b      	mov	r3, fp
 801431c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014320:	f7f4 f8a2 	bl	8008468 <__aeabi_dmul>
 8014324:	9b06      	ldr	r3, [sp, #24]
 8014326:	1b1c      	subs	r4, r3, r4
 8014328:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801432c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014330:	e78d      	b.n	801424e <_strtod_l+0x3c6>
 8014332:	f113 0f16 	cmn.w	r3, #22
 8014336:	dba5      	blt.n	8014284 <_strtod_l+0x3fc>
 8014338:	4a37      	ldr	r2, [pc, #220]	; (8014418 <_strtod_l+0x590>)
 801433a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801433e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014342:	4650      	mov	r0, sl
 8014344:	4659      	mov	r1, fp
 8014346:	f7f4 f9b9 	bl	80086bc <__aeabi_ddiv>
 801434a:	e782      	b.n	8014252 <_strtod_l+0x3ca>
 801434c:	2300      	movs	r3, #0
 801434e:	4e33      	ldr	r6, [pc, #204]	; (801441c <_strtod_l+0x594>)
 8014350:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014354:	4650      	mov	r0, sl
 8014356:	4659      	mov	r1, fp
 8014358:	461d      	mov	r5, r3
 801435a:	f1b8 0f01 	cmp.w	r8, #1
 801435e:	dc21      	bgt.n	80143a4 <_strtod_l+0x51c>
 8014360:	b10b      	cbz	r3, 8014366 <_strtod_l+0x4de>
 8014362:	4682      	mov	sl, r0
 8014364:	468b      	mov	fp, r1
 8014366:	4b2d      	ldr	r3, [pc, #180]	; (801441c <_strtod_l+0x594>)
 8014368:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801436c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014370:	4652      	mov	r2, sl
 8014372:	465b      	mov	r3, fp
 8014374:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014378:	f7f4 f876 	bl	8008468 <__aeabi_dmul>
 801437c:	4b28      	ldr	r3, [pc, #160]	; (8014420 <_strtod_l+0x598>)
 801437e:	460a      	mov	r2, r1
 8014380:	400b      	ands	r3, r1
 8014382:	4928      	ldr	r1, [pc, #160]	; (8014424 <_strtod_l+0x59c>)
 8014384:	428b      	cmp	r3, r1
 8014386:	4682      	mov	sl, r0
 8014388:	d898      	bhi.n	80142bc <_strtod_l+0x434>
 801438a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801438e:	428b      	cmp	r3, r1
 8014390:	bf86      	itte	hi
 8014392:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801442c <_strtod_l+0x5a4>
 8014396:	f04f 3aff 	movhi.w	sl, #4294967295
 801439a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801439e:	2300      	movs	r3, #0
 80143a0:	9304      	str	r3, [sp, #16]
 80143a2:	e077      	b.n	8014494 <_strtod_l+0x60c>
 80143a4:	f018 0f01 	tst.w	r8, #1
 80143a8:	d006      	beq.n	80143b8 <_strtod_l+0x530>
 80143aa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80143ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b2:	f7f4 f859 	bl	8008468 <__aeabi_dmul>
 80143b6:	2301      	movs	r3, #1
 80143b8:	3501      	adds	r5, #1
 80143ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80143be:	e7cc      	b.n	801435a <_strtod_l+0x4d2>
 80143c0:	d0ed      	beq.n	801439e <_strtod_l+0x516>
 80143c2:	f1c8 0800 	rsb	r8, r8, #0
 80143c6:	f018 020f 	ands.w	r2, r8, #15
 80143ca:	d00a      	beq.n	80143e2 <_strtod_l+0x55a>
 80143cc:	4b12      	ldr	r3, [pc, #72]	; (8014418 <_strtod_l+0x590>)
 80143ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80143d2:	4650      	mov	r0, sl
 80143d4:	4659      	mov	r1, fp
 80143d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143da:	f7f4 f96f 	bl	80086bc <__aeabi_ddiv>
 80143de:	4682      	mov	sl, r0
 80143e0:	468b      	mov	fp, r1
 80143e2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80143e6:	d0da      	beq.n	801439e <_strtod_l+0x516>
 80143e8:	f1b8 0f1f 	cmp.w	r8, #31
 80143ec:	dd20      	ble.n	8014430 <_strtod_l+0x5a8>
 80143ee:	2400      	movs	r4, #0
 80143f0:	46a0      	mov	r8, r4
 80143f2:	9407      	str	r4, [sp, #28]
 80143f4:	9405      	str	r4, [sp, #20]
 80143f6:	2322      	movs	r3, #34	; 0x22
 80143f8:	f04f 0a00 	mov.w	sl, #0
 80143fc:	f04f 0b00 	mov.w	fp, #0
 8014400:	f8c9 3000 	str.w	r3, [r9]
 8014404:	e765      	b.n	80142d2 <_strtod_l+0x44a>
 8014406:	bf00      	nop
 8014408:	08017402 	.word	0x08017402
 801440c:	080174a3 	.word	0x080174a3
 8014410:	0801740a 	.word	0x0801740a
 8014414:	08017464 	.word	0x08017464
 8014418:	080174e0 	.word	0x080174e0
 801441c:	080174b8 	.word	0x080174b8
 8014420:	7ff00000 	.word	0x7ff00000
 8014424:	7ca00000 	.word	0x7ca00000
 8014428:	fff80000 	.word	0xfff80000
 801442c:	7fefffff 	.word	0x7fefffff
 8014430:	f018 0310 	ands.w	r3, r8, #16
 8014434:	bf18      	it	ne
 8014436:	236a      	movne	r3, #106	; 0x6a
 8014438:	4da0      	ldr	r5, [pc, #640]	; (80146bc <_strtod_l+0x834>)
 801443a:	9304      	str	r3, [sp, #16]
 801443c:	4650      	mov	r0, sl
 801443e:	4659      	mov	r1, fp
 8014440:	2300      	movs	r3, #0
 8014442:	f1b8 0f00 	cmp.w	r8, #0
 8014446:	f300 810a 	bgt.w	801465e <_strtod_l+0x7d6>
 801444a:	b10b      	cbz	r3, 8014450 <_strtod_l+0x5c8>
 801444c:	4682      	mov	sl, r0
 801444e:	468b      	mov	fp, r1
 8014450:	9b04      	ldr	r3, [sp, #16]
 8014452:	b1bb      	cbz	r3, 8014484 <_strtod_l+0x5fc>
 8014454:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014458:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801445c:	2b00      	cmp	r3, #0
 801445e:	4659      	mov	r1, fp
 8014460:	dd10      	ble.n	8014484 <_strtod_l+0x5fc>
 8014462:	2b1f      	cmp	r3, #31
 8014464:	f340 8107 	ble.w	8014676 <_strtod_l+0x7ee>
 8014468:	2b34      	cmp	r3, #52	; 0x34
 801446a:	bfde      	ittt	le
 801446c:	3b20      	suble	r3, #32
 801446e:	f04f 32ff 	movle.w	r2, #4294967295
 8014472:	fa02 f303 	lslle.w	r3, r2, r3
 8014476:	f04f 0a00 	mov.w	sl, #0
 801447a:	bfcc      	ite	gt
 801447c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014480:	ea03 0b01 	andle.w	fp, r3, r1
 8014484:	2200      	movs	r2, #0
 8014486:	2300      	movs	r3, #0
 8014488:	4650      	mov	r0, sl
 801448a:	4659      	mov	r1, fp
 801448c:	f7f4 fa54 	bl	8008938 <__aeabi_dcmpeq>
 8014490:	2800      	cmp	r0, #0
 8014492:	d1ac      	bne.n	80143ee <_strtod_l+0x566>
 8014494:	9b07      	ldr	r3, [sp, #28]
 8014496:	9300      	str	r3, [sp, #0]
 8014498:	9a05      	ldr	r2, [sp, #20]
 801449a:	9908      	ldr	r1, [sp, #32]
 801449c:	4623      	mov	r3, r4
 801449e:	4648      	mov	r0, r9
 80144a0:	f002 f819 	bl	80164d6 <__s2b>
 80144a4:	9007      	str	r0, [sp, #28]
 80144a6:	2800      	cmp	r0, #0
 80144a8:	f43f af08 	beq.w	80142bc <_strtod_l+0x434>
 80144ac:	9a06      	ldr	r2, [sp, #24]
 80144ae:	9b06      	ldr	r3, [sp, #24]
 80144b0:	2a00      	cmp	r2, #0
 80144b2:	f1c3 0300 	rsb	r3, r3, #0
 80144b6:	bfa8      	it	ge
 80144b8:	2300      	movge	r3, #0
 80144ba:	930e      	str	r3, [sp, #56]	; 0x38
 80144bc:	2400      	movs	r4, #0
 80144be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80144c2:	9316      	str	r3, [sp, #88]	; 0x58
 80144c4:	46a0      	mov	r8, r4
 80144c6:	9b07      	ldr	r3, [sp, #28]
 80144c8:	4648      	mov	r0, r9
 80144ca:	6859      	ldr	r1, [r3, #4]
 80144cc:	f001 ff7d 	bl	80163ca <_Balloc>
 80144d0:	9005      	str	r0, [sp, #20]
 80144d2:	2800      	cmp	r0, #0
 80144d4:	f43f aef6 	beq.w	80142c4 <_strtod_l+0x43c>
 80144d8:	9b07      	ldr	r3, [sp, #28]
 80144da:	691a      	ldr	r2, [r3, #16]
 80144dc:	3202      	adds	r2, #2
 80144de:	f103 010c 	add.w	r1, r3, #12
 80144e2:	0092      	lsls	r2, r2, #2
 80144e4:	300c      	adds	r0, #12
 80144e6:	f7fd ff07 	bl	80122f8 <memcpy>
 80144ea:	aa1e      	add	r2, sp, #120	; 0x78
 80144ec:	a91d      	add	r1, sp, #116	; 0x74
 80144ee:	ec4b ab10 	vmov	d0, sl, fp
 80144f2:	4648      	mov	r0, r9
 80144f4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80144f8:	f002 faa8 	bl	8016a4c <__d2b>
 80144fc:	901c      	str	r0, [sp, #112]	; 0x70
 80144fe:	2800      	cmp	r0, #0
 8014500:	f43f aee0 	beq.w	80142c4 <_strtod_l+0x43c>
 8014504:	2101      	movs	r1, #1
 8014506:	4648      	mov	r0, r9
 8014508:	f002 f871 	bl	80165ee <__i2b>
 801450c:	4680      	mov	r8, r0
 801450e:	2800      	cmp	r0, #0
 8014510:	f43f aed8 	beq.w	80142c4 <_strtod_l+0x43c>
 8014514:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014516:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014518:	2e00      	cmp	r6, #0
 801451a:	bfab      	itete	ge
 801451c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801451e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014520:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8014522:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8014524:	bfac      	ite	ge
 8014526:	18f7      	addge	r7, r6, r3
 8014528:	1b9d      	sublt	r5, r3, r6
 801452a:	9b04      	ldr	r3, [sp, #16]
 801452c:	1af6      	subs	r6, r6, r3
 801452e:	4416      	add	r6, r2
 8014530:	4b63      	ldr	r3, [pc, #396]	; (80146c0 <_strtod_l+0x838>)
 8014532:	3e01      	subs	r6, #1
 8014534:	429e      	cmp	r6, r3
 8014536:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801453a:	f280 80af 	bge.w	801469c <_strtod_l+0x814>
 801453e:	1b9b      	subs	r3, r3, r6
 8014540:	2b1f      	cmp	r3, #31
 8014542:	eba2 0203 	sub.w	r2, r2, r3
 8014546:	f04f 0101 	mov.w	r1, #1
 801454a:	f300 809b 	bgt.w	8014684 <_strtod_l+0x7fc>
 801454e:	fa01 f303 	lsl.w	r3, r1, r3
 8014552:	930f      	str	r3, [sp, #60]	; 0x3c
 8014554:	2300      	movs	r3, #0
 8014556:	930a      	str	r3, [sp, #40]	; 0x28
 8014558:	18be      	adds	r6, r7, r2
 801455a:	9b04      	ldr	r3, [sp, #16]
 801455c:	42b7      	cmp	r7, r6
 801455e:	4415      	add	r5, r2
 8014560:	441d      	add	r5, r3
 8014562:	463b      	mov	r3, r7
 8014564:	bfa8      	it	ge
 8014566:	4633      	movge	r3, r6
 8014568:	42ab      	cmp	r3, r5
 801456a:	bfa8      	it	ge
 801456c:	462b      	movge	r3, r5
 801456e:	2b00      	cmp	r3, #0
 8014570:	bfc2      	ittt	gt
 8014572:	1af6      	subgt	r6, r6, r3
 8014574:	1aed      	subgt	r5, r5, r3
 8014576:	1aff      	subgt	r7, r7, r3
 8014578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801457a:	b1bb      	cbz	r3, 80145ac <_strtod_l+0x724>
 801457c:	4641      	mov	r1, r8
 801457e:	461a      	mov	r2, r3
 8014580:	4648      	mov	r0, r9
 8014582:	f002 f8d3 	bl	801672c <__pow5mult>
 8014586:	4680      	mov	r8, r0
 8014588:	2800      	cmp	r0, #0
 801458a:	f43f ae9b 	beq.w	80142c4 <_strtod_l+0x43c>
 801458e:	4601      	mov	r1, r0
 8014590:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014592:	4648      	mov	r0, r9
 8014594:	f002 f834 	bl	8016600 <__multiply>
 8014598:	900c      	str	r0, [sp, #48]	; 0x30
 801459a:	2800      	cmp	r0, #0
 801459c:	f43f ae92 	beq.w	80142c4 <_strtod_l+0x43c>
 80145a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80145a2:	4648      	mov	r0, r9
 80145a4:	f001 ff45 	bl	8016432 <_Bfree>
 80145a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145aa:	931c      	str	r3, [sp, #112]	; 0x70
 80145ac:	2e00      	cmp	r6, #0
 80145ae:	dc7a      	bgt.n	80146a6 <_strtod_l+0x81e>
 80145b0:	9b06      	ldr	r3, [sp, #24]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	dd08      	ble.n	80145c8 <_strtod_l+0x740>
 80145b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80145b8:	9905      	ldr	r1, [sp, #20]
 80145ba:	4648      	mov	r0, r9
 80145bc:	f002 f8b6 	bl	801672c <__pow5mult>
 80145c0:	9005      	str	r0, [sp, #20]
 80145c2:	2800      	cmp	r0, #0
 80145c4:	f43f ae7e 	beq.w	80142c4 <_strtod_l+0x43c>
 80145c8:	2d00      	cmp	r5, #0
 80145ca:	dd08      	ble.n	80145de <_strtod_l+0x756>
 80145cc:	462a      	mov	r2, r5
 80145ce:	9905      	ldr	r1, [sp, #20]
 80145d0:	4648      	mov	r0, r9
 80145d2:	f002 f8f9 	bl	80167c8 <__lshift>
 80145d6:	9005      	str	r0, [sp, #20]
 80145d8:	2800      	cmp	r0, #0
 80145da:	f43f ae73 	beq.w	80142c4 <_strtod_l+0x43c>
 80145de:	2f00      	cmp	r7, #0
 80145e0:	dd08      	ble.n	80145f4 <_strtod_l+0x76c>
 80145e2:	4641      	mov	r1, r8
 80145e4:	463a      	mov	r2, r7
 80145e6:	4648      	mov	r0, r9
 80145e8:	f002 f8ee 	bl	80167c8 <__lshift>
 80145ec:	4680      	mov	r8, r0
 80145ee:	2800      	cmp	r0, #0
 80145f0:	f43f ae68 	beq.w	80142c4 <_strtod_l+0x43c>
 80145f4:	9a05      	ldr	r2, [sp, #20]
 80145f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80145f8:	4648      	mov	r0, r9
 80145fa:	f002 f953 	bl	80168a4 <__mdiff>
 80145fe:	4604      	mov	r4, r0
 8014600:	2800      	cmp	r0, #0
 8014602:	f43f ae5f 	beq.w	80142c4 <_strtod_l+0x43c>
 8014606:	68c3      	ldr	r3, [r0, #12]
 8014608:	930c      	str	r3, [sp, #48]	; 0x30
 801460a:	2300      	movs	r3, #0
 801460c:	60c3      	str	r3, [r0, #12]
 801460e:	4641      	mov	r1, r8
 8014610:	f002 f92e 	bl	8016870 <__mcmp>
 8014614:	2800      	cmp	r0, #0
 8014616:	da55      	bge.n	80146c4 <_strtod_l+0x83c>
 8014618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801461a:	b9e3      	cbnz	r3, 8014656 <_strtod_l+0x7ce>
 801461c:	f1ba 0f00 	cmp.w	sl, #0
 8014620:	d119      	bne.n	8014656 <_strtod_l+0x7ce>
 8014622:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014626:	b9b3      	cbnz	r3, 8014656 <_strtod_l+0x7ce>
 8014628:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801462c:	0d1b      	lsrs	r3, r3, #20
 801462e:	051b      	lsls	r3, r3, #20
 8014630:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014634:	d90f      	bls.n	8014656 <_strtod_l+0x7ce>
 8014636:	6963      	ldr	r3, [r4, #20]
 8014638:	b913      	cbnz	r3, 8014640 <_strtod_l+0x7b8>
 801463a:	6923      	ldr	r3, [r4, #16]
 801463c:	2b01      	cmp	r3, #1
 801463e:	dd0a      	ble.n	8014656 <_strtod_l+0x7ce>
 8014640:	4621      	mov	r1, r4
 8014642:	2201      	movs	r2, #1
 8014644:	4648      	mov	r0, r9
 8014646:	f002 f8bf 	bl	80167c8 <__lshift>
 801464a:	4641      	mov	r1, r8
 801464c:	4604      	mov	r4, r0
 801464e:	f002 f90f 	bl	8016870 <__mcmp>
 8014652:	2800      	cmp	r0, #0
 8014654:	dc67      	bgt.n	8014726 <_strtod_l+0x89e>
 8014656:	9b04      	ldr	r3, [sp, #16]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d171      	bne.n	8014740 <_strtod_l+0x8b8>
 801465c:	e63d      	b.n	80142da <_strtod_l+0x452>
 801465e:	f018 0f01 	tst.w	r8, #1
 8014662:	d004      	beq.n	801466e <_strtod_l+0x7e6>
 8014664:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014668:	f7f3 fefe 	bl	8008468 <__aeabi_dmul>
 801466c:	2301      	movs	r3, #1
 801466e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014672:	3508      	adds	r5, #8
 8014674:	e6e5      	b.n	8014442 <_strtod_l+0x5ba>
 8014676:	f04f 32ff 	mov.w	r2, #4294967295
 801467a:	fa02 f303 	lsl.w	r3, r2, r3
 801467e:	ea03 0a0a 	and.w	sl, r3, sl
 8014682:	e6ff      	b.n	8014484 <_strtod_l+0x5fc>
 8014684:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014688:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801468c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014690:	36e2      	adds	r6, #226	; 0xe2
 8014692:	fa01 f306 	lsl.w	r3, r1, r6
 8014696:	930a      	str	r3, [sp, #40]	; 0x28
 8014698:	910f      	str	r1, [sp, #60]	; 0x3c
 801469a:	e75d      	b.n	8014558 <_strtod_l+0x6d0>
 801469c:	2300      	movs	r3, #0
 801469e:	930a      	str	r3, [sp, #40]	; 0x28
 80146a0:	2301      	movs	r3, #1
 80146a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80146a4:	e758      	b.n	8014558 <_strtod_l+0x6d0>
 80146a6:	4632      	mov	r2, r6
 80146a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80146aa:	4648      	mov	r0, r9
 80146ac:	f002 f88c 	bl	80167c8 <__lshift>
 80146b0:	901c      	str	r0, [sp, #112]	; 0x70
 80146b2:	2800      	cmp	r0, #0
 80146b4:	f47f af7c 	bne.w	80145b0 <_strtod_l+0x728>
 80146b8:	e604      	b.n	80142c4 <_strtod_l+0x43c>
 80146ba:	bf00      	nop
 80146bc:	08017478 	.word	0x08017478
 80146c0:	fffffc02 	.word	0xfffffc02
 80146c4:	465d      	mov	r5, fp
 80146c6:	f040 8086 	bne.w	80147d6 <_strtod_l+0x94e>
 80146ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80146cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80146d0:	b32a      	cbz	r2, 801471e <_strtod_l+0x896>
 80146d2:	4aaf      	ldr	r2, [pc, #700]	; (8014990 <_strtod_l+0xb08>)
 80146d4:	4293      	cmp	r3, r2
 80146d6:	d153      	bne.n	8014780 <_strtod_l+0x8f8>
 80146d8:	9b04      	ldr	r3, [sp, #16]
 80146da:	4650      	mov	r0, sl
 80146dc:	b1d3      	cbz	r3, 8014714 <_strtod_l+0x88c>
 80146de:	4aad      	ldr	r2, [pc, #692]	; (8014994 <_strtod_l+0xb0c>)
 80146e0:	402a      	ands	r2, r5
 80146e2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80146e6:	f04f 31ff 	mov.w	r1, #4294967295
 80146ea:	d816      	bhi.n	801471a <_strtod_l+0x892>
 80146ec:	0d12      	lsrs	r2, r2, #20
 80146ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80146f2:	fa01 f303 	lsl.w	r3, r1, r3
 80146f6:	4298      	cmp	r0, r3
 80146f8:	d142      	bne.n	8014780 <_strtod_l+0x8f8>
 80146fa:	4ba7      	ldr	r3, [pc, #668]	; (8014998 <_strtod_l+0xb10>)
 80146fc:	429d      	cmp	r5, r3
 80146fe:	d102      	bne.n	8014706 <_strtod_l+0x87e>
 8014700:	3001      	adds	r0, #1
 8014702:	f43f addf 	beq.w	80142c4 <_strtod_l+0x43c>
 8014706:	4ba3      	ldr	r3, [pc, #652]	; (8014994 <_strtod_l+0xb0c>)
 8014708:	402b      	ands	r3, r5
 801470a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801470e:	f04f 0a00 	mov.w	sl, #0
 8014712:	e7a0      	b.n	8014656 <_strtod_l+0x7ce>
 8014714:	f04f 33ff 	mov.w	r3, #4294967295
 8014718:	e7ed      	b.n	80146f6 <_strtod_l+0x86e>
 801471a:	460b      	mov	r3, r1
 801471c:	e7eb      	b.n	80146f6 <_strtod_l+0x86e>
 801471e:	bb7b      	cbnz	r3, 8014780 <_strtod_l+0x8f8>
 8014720:	f1ba 0f00 	cmp.w	sl, #0
 8014724:	d12c      	bne.n	8014780 <_strtod_l+0x8f8>
 8014726:	9904      	ldr	r1, [sp, #16]
 8014728:	4a9a      	ldr	r2, [pc, #616]	; (8014994 <_strtod_l+0xb0c>)
 801472a:	465b      	mov	r3, fp
 801472c:	b1f1      	cbz	r1, 801476c <_strtod_l+0x8e4>
 801472e:	ea02 010b 	and.w	r1, r2, fp
 8014732:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014736:	dc19      	bgt.n	801476c <_strtod_l+0x8e4>
 8014738:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801473c:	f77f ae5b 	ble.w	80143f6 <_strtod_l+0x56e>
 8014740:	4a96      	ldr	r2, [pc, #600]	; (801499c <_strtod_l+0xb14>)
 8014742:	2300      	movs	r3, #0
 8014744:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014748:	4650      	mov	r0, sl
 801474a:	4659      	mov	r1, fp
 801474c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014750:	f7f3 fe8a 	bl	8008468 <__aeabi_dmul>
 8014754:	4682      	mov	sl, r0
 8014756:	468b      	mov	fp, r1
 8014758:	2900      	cmp	r1, #0
 801475a:	f47f adbe 	bne.w	80142da <_strtod_l+0x452>
 801475e:	2800      	cmp	r0, #0
 8014760:	f47f adbb 	bne.w	80142da <_strtod_l+0x452>
 8014764:	2322      	movs	r3, #34	; 0x22
 8014766:	f8c9 3000 	str.w	r3, [r9]
 801476a:	e5b6      	b.n	80142da <_strtod_l+0x452>
 801476c:	4013      	ands	r3, r2
 801476e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014772:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014776:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801477a:	f04f 3aff 	mov.w	sl, #4294967295
 801477e:	e76a      	b.n	8014656 <_strtod_l+0x7ce>
 8014780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014782:	b193      	cbz	r3, 80147aa <_strtod_l+0x922>
 8014784:	422b      	tst	r3, r5
 8014786:	f43f af66 	beq.w	8014656 <_strtod_l+0x7ce>
 801478a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801478c:	9a04      	ldr	r2, [sp, #16]
 801478e:	4650      	mov	r0, sl
 8014790:	4659      	mov	r1, fp
 8014792:	b173      	cbz	r3, 80147b2 <_strtod_l+0x92a>
 8014794:	f7ff fb59 	bl	8013e4a <sulp>
 8014798:	4602      	mov	r2, r0
 801479a:	460b      	mov	r3, r1
 801479c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80147a0:	f7f3 fcac 	bl	80080fc <__adddf3>
 80147a4:	4682      	mov	sl, r0
 80147a6:	468b      	mov	fp, r1
 80147a8:	e755      	b.n	8014656 <_strtod_l+0x7ce>
 80147aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147ac:	ea13 0f0a 	tst.w	r3, sl
 80147b0:	e7e9      	b.n	8014786 <_strtod_l+0x8fe>
 80147b2:	f7ff fb4a 	bl	8013e4a <sulp>
 80147b6:	4602      	mov	r2, r0
 80147b8:	460b      	mov	r3, r1
 80147ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80147be:	f7f3 fc9b 	bl	80080f8 <__aeabi_dsub>
 80147c2:	2200      	movs	r2, #0
 80147c4:	2300      	movs	r3, #0
 80147c6:	4682      	mov	sl, r0
 80147c8:	468b      	mov	fp, r1
 80147ca:	f7f4 f8b5 	bl	8008938 <__aeabi_dcmpeq>
 80147ce:	2800      	cmp	r0, #0
 80147d0:	f47f ae11 	bne.w	80143f6 <_strtod_l+0x56e>
 80147d4:	e73f      	b.n	8014656 <_strtod_l+0x7ce>
 80147d6:	4641      	mov	r1, r8
 80147d8:	4620      	mov	r0, r4
 80147da:	f002 f986 	bl	8016aea <__ratio>
 80147de:	ec57 6b10 	vmov	r6, r7, d0
 80147e2:	2200      	movs	r2, #0
 80147e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80147e8:	ee10 0a10 	vmov	r0, s0
 80147ec:	4639      	mov	r1, r7
 80147ee:	f7f4 f8b7 	bl	8008960 <__aeabi_dcmple>
 80147f2:	2800      	cmp	r0, #0
 80147f4:	d077      	beq.n	80148e6 <_strtod_l+0xa5e>
 80147f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d04a      	beq.n	8014892 <_strtod_l+0xa0a>
 80147fc:	4b68      	ldr	r3, [pc, #416]	; (80149a0 <_strtod_l+0xb18>)
 80147fe:	2200      	movs	r2, #0
 8014800:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014804:	4f66      	ldr	r7, [pc, #408]	; (80149a0 <_strtod_l+0xb18>)
 8014806:	2600      	movs	r6, #0
 8014808:	4b62      	ldr	r3, [pc, #392]	; (8014994 <_strtod_l+0xb0c>)
 801480a:	402b      	ands	r3, r5
 801480c:	930f      	str	r3, [sp, #60]	; 0x3c
 801480e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014810:	4b64      	ldr	r3, [pc, #400]	; (80149a4 <_strtod_l+0xb1c>)
 8014812:	429a      	cmp	r2, r3
 8014814:	f040 80ce 	bne.w	80149b4 <_strtod_l+0xb2c>
 8014818:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801481c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014820:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014824:	ec4b ab10 	vmov	d0, sl, fp
 8014828:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801482c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014830:	f002 f896 	bl	8016960 <__ulp>
 8014834:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014838:	ec53 2b10 	vmov	r2, r3, d0
 801483c:	f7f3 fe14 	bl	8008468 <__aeabi_dmul>
 8014840:	4652      	mov	r2, sl
 8014842:	465b      	mov	r3, fp
 8014844:	f7f3 fc5a 	bl	80080fc <__adddf3>
 8014848:	460b      	mov	r3, r1
 801484a:	4952      	ldr	r1, [pc, #328]	; (8014994 <_strtod_l+0xb0c>)
 801484c:	4a56      	ldr	r2, [pc, #344]	; (80149a8 <_strtod_l+0xb20>)
 801484e:	4019      	ands	r1, r3
 8014850:	4291      	cmp	r1, r2
 8014852:	4682      	mov	sl, r0
 8014854:	d95b      	bls.n	801490e <_strtod_l+0xa86>
 8014856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014858:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801485c:	4293      	cmp	r3, r2
 801485e:	d103      	bne.n	8014868 <_strtod_l+0x9e0>
 8014860:	9b08      	ldr	r3, [sp, #32]
 8014862:	3301      	adds	r3, #1
 8014864:	f43f ad2e 	beq.w	80142c4 <_strtod_l+0x43c>
 8014868:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014998 <_strtod_l+0xb10>
 801486c:	f04f 3aff 	mov.w	sl, #4294967295
 8014870:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014872:	4648      	mov	r0, r9
 8014874:	f001 fddd 	bl	8016432 <_Bfree>
 8014878:	9905      	ldr	r1, [sp, #20]
 801487a:	4648      	mov	r0, r9
 801487c:	f001 fdd9 	bl	8016432 <_Bfree>
 8014880:	4641      	mov	r1, r8
 8014882:	4648      	mov	r0, r9
 8014884:	f001 fdd5 	bl	8016432 <_Bfree>
 8014888:	4621      	mov	r1, r4
 801488a:	4648      	mov	r0, r9
 801488c:	f001 fdd1 	bl	8016432 <_Bfree>
 8014890:	e619      	b.n	80144c6 <_strtod_l+0x63e>
 8014892:	f1ba 0f00 	cmp.w	sl, #0
 8014896:	d11a      	bne.n	80148ce <_strtod_l+0xa46>
 8014898:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801489c:	b9eb      	cbnz	r3, 80148da <_strtod_l+0xa52>
 801489e:	2200      	movs	r2, #0
 80148a0:	4b3f      	ldr	r3, [pc, #252]	; (80149a0 <_strtod_l+0xb18>)
 80148a2:	4630      	mov	r0, r6
 80148a4:	4639      	mov	r1, r7
 80148a6:	f7f4 f851 	bl	800894c <__aeabi_dcmplt>
 80148aa:	b9c8      	cbnz	r0, 80148e0 <_strtod_l+0xa58>
 80148ac:	4630      	mov	r0, r6
 80148ae:	4639      	mov	r1, r7
 80148b0:	2200      	movs	r2, #0
 80148b2:	4b3e      	ldr	r3, [pc, #248]	; (80149ac <_strtod_l+0xb24>)
 80148b4:	f7f3 fdd8 	bl	8008468 <__aeabi_dmul>
 80148b8:	4606      	mov	r6, r0
 80148ba:	460f      	mov	r7, r1
 80148bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80148c0:	9618      	str	r6, [sp, #96]	; 0x60
 80148c2:	9319      	str	r3, [sp, #100]	; 0x64
 80148c4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80148c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80148cc:	e79c      	b.n	8014808 <_strtod_l+0x980>
 80148ce:	f1ba 0f01 	cmp.w	sl, #1
 80148d2:	d102      	bne.n	80148da <_strtod_l+0xa52>
 80148d4:	2d00      	cmp	r5, #0
 80148d6:	f43f ad8e 	beq.w	80143f6 <_strtod_l+0x56e>
 80148da:	2200      	movs	r2, #0
 80148dc:	4b34      	ldr	r3, [pc, #208]	; (80149b0 <_strtod_l+0xb28>)
 80148de:	e78f      	b.n	8014800 <_strtod_l+0x978>
 80148e0:	2600      	movs	r6, #0
 80148e2:	4f32      	ldr	r7, [pc, #200]	; (80149ac <_strtod_l+0xb24>)
 80148e4:	e7ea      	b.n	80148bc <_strtod_l+0xa34>
 80148e6:	4b31      	ldr	r3, [pc, #196]	; (80149ac <_strtod_l+0xb24>)
 80148e8:	4630      	mov	r0, r6
 80148ea:	4639      	mov	r1, r7
 80148ec:	2200      	movs	r2, #0
 80148ee:	f7f3 fdbb 	bl	8008468 <__aeabi_dmul>
 80148f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148f4:	4606      	mov	r6, r0
 80148f6:	460f      	mov	r7, r1
 80148f8:	b933      	cbnz	r3, 8014908 <_strtod_l+0xa80>
 80148fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80148fe:	9010      	str	r0, [sp, #64]	; 0x40
 8014900:	9311      	str	r3, [sp, #68]	; 0x44
 8014902:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014906:	e7df      	b.n	80148c8 <_strtod_l+0xa40>
 8014908:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801490c:	e7f9      	b.n	8014902 <_strtod_l+0xa7a>
 801490e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014912:	9b04      	ldr	r3, [sp, #16]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d1ab      	bne.n	8014870 <_strtod_l+0x9e8>
 8014918:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801491c:	0d1b      	lsrs	r3, r3, #20
 801491e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014920:	051b      	lsls	r3, r3, #20
 8014922:	429a      	cmp	r2, r3
 8014924:	465d      	mov	r5, fp
 8014926:	d1a3      	bne.n	8014870 <_strtod_l+0x9e8>
 8014928:	4639      	mov	r1, r7
 801492a:	4630      	mov	r0, r6
 801492c:	f7f4 f84c 	bl	80089c8 <__aeabi_d2iz>
 8014930:	f7f3 fd30 	bl	8008394 <__aeabi_i2d>
 8014934:	460b      	mov	r3, r1
 8014936:	4602      	mov	r2, r0
 8014938:	4639      	mov	r1, r7
 801493a:	4630      	mov	r0, r6
 801493c:	f7f3 fbdc 	bl	80080f8 <__aeabi_dsub>
 8014940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014942:	4606      	mov	r6, r0
 8014944:	460f      	mov	r7, r1
 8014946:	b933      	cbnz	r3, 8014956 <_strtod_l+0xace>
 8014948:	f1ba 0f00 	cmp.w	sl, #0
 801494c:	d103      	bne.n	8014956 <_strtod_l+0xace>
 801494e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014952:	2d00      	cmp	r5, #0
 8014954:	d06d      	beq.n	8014a32 <_strtod_l+0xbaa>
 8014956:	a30a      	add	r3, pc, #40	; (adr r3, 8014980 <_strtod_l+0xaf8>)
 8014958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801495c:	4630      	mov	r0, r6
 801495e:	4639      	mov	r1, r7
 8014960:	f7f3 fff4 	bl	800894c <__aeabi_dcmplt>
 8014964:	2800      	cmp	r0, #0
 8014966:	f47f acb8 	bne.w	80142da <_strtod_l+0x452>
 801496a:	a307      	add	r3, pc, #28	; (adr r3, 8014988 <_strtod_l+0xb00>)
 801496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014970:	4630      	mov	r0, r6
 8014972:	4639      	mov	r1, r7
 8014974:	f7f4 f808 	bl	8008988 <__aeabi_dcmpgt>
 8014978:	2800      	cmp	r0, #0
 801497a:	f43f af79 	beq.w	8014870 <_strtod_l+0x9e8>
 801497e:	e4ac      	b.n	80142da <_strtod_l+0x452>
 8014980:	94a03595 	.word	0x94a03595
 8014984:	3fdfffff 	.word	0x3fdfffff
 8014988:	35afe535 	.word	0x35afe535
 801498c:	3fe00000 	.word	0x3fe00000
 8014990:	000fffff 	.word	0x000fffff
 8014994:	7ff00000 	.word	0x7ff00000
 8014998:	7fefffff 	.word	0x7fefffff
 801499c:	39500000 	.word	0x39500000
 80149a0:	3ff00000 	.word	0x3ff00000
 80149a4:	7fe00000 	.word	0x7fe00000
 80149a8:	7c9fffff 	.word	0x7c9fffff
 80149ac:	3fe00000 	.word	0x3fe00000
 80149b0:	bff00000 	.word	0xbff00000
 80149b4:	9b04      	ldr	r3, [sp, #16]
 80149b6:	b333      	cbz	r3, 8014a06 <_strtod_l+0xb7e>
 80149b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80149be:	d822      	bhi.n	8014a06 <_strtod_l+0xb7e>
 80149c0:	a327      	add	r3, pc, #156	; (adr r3, 8014a60 <_strtod_l+0xbd8>)
 80149c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c6:	4630      	mov	r0, r6
 80149c8:	4639      	mov	r1, r7
 80149ca:	f7f3 ffc9 	bl	8008960 <__aeabi_dcmple>
 80149ce:	b1a0      	cbz	r0, 80149fa <_strtod_l+0xb72>
 80149d0:	4639      	mov	r1, r7
 80149d2:	4630      	mov	r0, r6
 80149d4:	f7f4 f820 	bl	8008a18 <__aeabi_d2uiz>
 80149d8:	2800      	cmp	r0, #0
 80149da:	bf08      	it	eq
 80149dc:	2001      	moveq	r0, #1
 80149de:	f7f3 fcc9 	bl	8008374 <__aeabi_ui2d>
 80149e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149e4:	4606      	mov	r6, r0
 80149e6:	460f      	mov	r7, r1
 80149e8:	bb03      	cbnz	r3, 8014a2c <_strtod_l+0xba4>
 80149ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80149ee:	9012      	str	r0, [sp, #72]	; 0x48
 80149f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80149f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80149f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80149fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149fe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014a02:	1a9b      	subs	r3, r3, r2
 8014a04:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a06:	ed9d 0b08 	vldr	d0, [sp, #32]
 8014a0a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014a0e:	f001 ffa7 	bl	8016960 <__ulp>
 8014a12:	4650      	mov	r0, sl
 8014a14:	ec53 2b10 	vmov	r2, r3, d0
 8014a18:	4659      	mov	r1, fp
 8014a1a:	f7f3 fd25 	bl	8008468 <__aeabi_dmul>
 8014a1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014a22:	f7f3 fb6b 	bl	80080fc <__adddf3>
 8014a26:	4682      	mov	sl, r0
 8014a28:	468b      	mov	fp, r1
 8014a2a:	e772      	b.n	8014912 <_strtod_l+0xa8a>
 8014a2c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014a30:	e7df      	b.n	80149f2 <_strtod_l+0xb6a>
 8014a32:	a30d      	add	r3, pc, #52	; (adr r3, 8014a68 <_strtod_l+0xbe0>)
 8014a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a38:	f7f3 ff88 	bl	800894c <__aeabi_dcmplt>
 8014a3c:	e79c      	b.n	8014978 <_strtod_l+0xaf0>
 8014a3e:	2300      	movs	r3, #0
 8014a40:	930d      	str	r3, [sp, #52]	; 0x34
 8014a42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014a44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014a46:	6013      	str	r3, [r2, #0]
 8014a48:	f7ff ba61 	b.w	8013f0e <_strtod_l+0x86>
 8014a4c:	2b65      	cmp	r3, #101	; 0x65
 8014a4e:	f04f 0200 	mov.w	r2, #0
 8014a52:	f43f ab4e 	beq.w	80140f2 <_strtod_l+0x26a>
 8014a56:	2101      	movs	r1, #1
 8014a58:	4614      	mov	r4, r2
 8014a5a:	9104      	str	r1, [sp, #16]
 8014a5c:	f7ff bacb 	b.w	8013ff6 <_strtod_l+0x16e>
 8014a60:	ffc00000 	.word	0xffc00000
 8014a64:	41dfffff 	.word	0x41dfffff
 8014a68:	94a03595 	.word	0x94a03595
 8014a6c:	3fcfffff 	.word	0x3fcfffff

08014a70 <_strtod_r>:
 8014a70:	4b05      	ldr	r3, [pc, #20]	; (8014a88 <_strtod_r+0x18>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	b410      	push	{r4}
 8014a76:	6a1b      	ldr	r3, [r3, #32]
 8014a78:	4c04      	ldr	r4, [pc, #16]	; (8014a8c <_strtod_r+0x1c>)
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	bf08      	it	eq
 8014a7e:	4623      	moveq	r3, r4
 8014a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a84:	f7ff ba00 	b.w	8013e88 <_strtod_l>
 8014a88:	2000002c 	.word	0x2000002c
 8014a8c:	20000090 	.word	0x20000090

08014a90 <_strtol_l.isra.0>:
 8014a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a94:	4680      	mov	r8, r0
 8014a96:	4689      	mov	r9, r1
 8014a98:	4692      	mov	sl, r2
 8014a9a:	461e      	mov	r6, r3
 8014a9c:	460f      	mov	r7, r1
 8014a9e:	463d      	mov	r5, r7
 8014aa0:	9808      	ldr	r0, [sp, #32]
 8014aa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014aa6:	f001 fc27 	bl	80162f8 <__locale_ctype_ptr_l>
 8014aaa:	4420      	add	r0, r4
 8014aac:	7843      	ldrb	r3, [r0, #1]
 8014aae:	f013 0308 	ands.w	r3, r3, #8
 8014ab2:	d132      	bne.n	8014b1a <_strtol_l.isra.0+0x8a>
 8014ab4:	2c2d      	cmp	r4, #45	; 0x2d
 8014ab6:	d132      	bne.n	8014b1e <_strtol_l.isra.0+0x8e>
 8014ab8:	787c      	ldrb	r4, [r7, #1]
 8014aba:	1cbd      	adds	r5, r7, #2
 8014abc:	2201      	movs	r2, #1
 8014abe:	2e00      	cmp	r6, #0
 8014ac0:	d05d      	beq.n	8014b7e <_strtol_l.isra.0+0xee>
 8014ac2:	2e10      	cmp	r6, #16
 8014ac4:	d109      	bne.n	8014ada <_strtol_l.isra.0+0x4a>
 8014ac6:	2c30      	cmp	r4, #48	; 0x30
 8014ac8:	d107      	bne.n	8014ada <_strtol_l.isra.0+0x4a>
 8014aca:	782b      	ldrb	r3, [r5, #0]
 8014acc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014ad0:	2b58      	cmp	r3, #88	; 0x58
 8014ad2:	d14f      	bne.n	8014b74 <_strtol_l.isra.0+0xe4>
 8014ad4:	786c      	ldrb	r4, [r5, #1]
 8014ad6:	2610      	movs	r6, #16
 8014ad8:	3502      	adds	r5, #2
 8014ada:	2a00      	cmp	r2, #0
 8014adc:	bf14      	ite	ne
 8014ade:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014ae2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014ae6:	2700      	movs	r7, #0
 8014ae8:	fbb1 fcf6 	udiv	ip, r1, r6
 8014aec:	4638      	mov	r0, r7
 8014aee:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014af2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014af6:	2b09      	cmp	r3, #9
 8014af8:	d817      	bhi.n	8014b2a <_strtol_l.isra.0+0x9a>
 8014afa:	461c      	mov	r4, r3
 8014afc:	42a6      	cmp	r6, r4
 8014afe:	dd23      	ble.n	8014b48 <_strtol_l.isra.0+0xb8>
 8014b00:	1c7b      	adds	r3, r7, #1
 8014b02:	d007      	beq.n	8014b14 <_strtol_l.isra.0+0x84>
 8014b04:	4584      	cmp	ip, r0
 8014b06:	d31c      	bcc.n	8014b42 <_strtol_l.isra.0+0xb2>
 8014b08:	d101      	bne.n	8014b0e <_strtol_l.isra.0+0x7e>
 8014b0a:	45a6      	cmp	lr, r4
 8014b0c:	db19      	blt.n	8014b42 <_strtol_l.isra.0+0xb2>
 8014b0e:	fb00 4006 	mla	r0, r0, r6, r4
 8014b12:	2701      	movs	r7, #1
 8014b14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014b18:	e7eb      	b.n	8014af2 <_strtol_l.isra.0+0x62>
 8014b1a:	462f      	mov	r7, r5
 8014b1c:	e7bf      	b.n	8014a9e <_strtol_l.isra.0+0xe>
 8014b1e:	2c2b      	cmp	r4, #43	; 0x2b
 8014b20:	bf04      	itt	eq
 8014b22:	1cbd      	addeq	r5, r7, #2
 8014b24:	787c      	ldrbeq	r4, [r7, #1]
 8014b26:	461a      	mov	r2, r3
 8014b28:	e7c9      	b.n	8014abe <_strtol_l.isra.0+0x2e>
 8014b2a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014b2e:	2b19      	cmp	r3, #25
 8014b30:	d801      	bhi.n	8014b36 <_strtol_l.isra.0+0xa6>
 8014b32:	3c37      	subs	r4, #55	; 0x37
 8014b34:	e7e2      	b.n	8014afc <_strtol_l.isra.0+0x6c>
 8014b36:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014b3a:	2b19      	cmp	r3, #25
 8014b3c:	d804      	bhi.n	8014b48 <_strtol_l.isra.0+0xb8>
 8014b3e:	3c57      	subs	r4, #87	; 0x57
 8014b40:	e7dc      	b.n	8014afc <_strtol_l.isra.0+0x6c>
 8014b42:	f04f 37ff 	mov.w	r7, #4294967295
 8014b46:	e7e5      	b.n	8014b14 <_strtol_l.isra.0+0x84>
 8014b48:	1c7b      	adds	r3, r7, #1
 8014b4a:	d108      	bne.n	8014b5e <_strtol_l.isra.0+0xce>
 8014b4c:	2322      	movs	r3, #34	; 0x22
 8014b4e:	f8c8 3000 	str.w	r3, [r8]
 8014b52:	4608      	mov	r0, r1
 8014b54:	f1ba 0f00 	cmp.w	sl, #0
 8014b58:	d107      	bne.n	8014b6a <_strtol_l.isra.0+0xda>
 8014b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b5e:	b102      	cbz	r2, 8014b62 <_strtol_l.isra.0+0xd2>
 8014b60:	4240      	negs	r0, r0
 8014b62:	f1ba 0f00 	cmp.w	sl, #0
 8014b66:	d0f8      	beq.n	8014b5a <_strtol_l.isra.0+0xca>
 8014b68:	b10f      	cbz	r7, 8014b6e <_strtol_l.isra.0+0xde>
 8014b6a:	f105 39ff 	add.w	r9, r5, #4294967295
 8014b6e:	f8ca 9000 	str.w	r9, [sl]
 8014b72:	e7f2      	b.n	8014b5a <_strtol_l.isra.0+0xca>
 8014b74:	2430      	movs	r4, #48	; 0x30
 8014b76:	2e00      	cmp	r6, #0
 8014b78:	d1af      	bne.n	8014ada <_strtol_l.isra.0+0x4a>
 8014b7a:	2608      	movs	r6, #8
 8014b7c:	e7ad      	b.n	8014ada <_strtol_l.isra.0+0x4a>
 8014b7e:	2c30      	cmp	r4, #48	; 0x30
 8014b80:	d0a3      	beq.n	8014aca <_strtol_l.isra.0+0x3a>
 8014b82:	260a      	movs	r6, #10
 8014b84:	e7a9      	b.n	8014ada <_strtol_l.isra.0+0x4a>
	...

08014b88 <_strtol_r>:
 8014b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b8a:	4c06      	ldr	r4, [pc, #24]	; (8014ba4 <_strtol_r+0x1c>)
 8014b8c:	4d06      	ldr	r5, [pc, #24]	; (8014ba8 <_strtol_r+0x20>)
 8014b8e:	6824      	ldr	r4, [r4, #0]
 8014b90:	6a24      	ldr	r4, [r4, #32]
 8014b92:	2c00      	cmp	r4, #0
 8014b94:	bf08      	it	eq
 8014b96:	462c      	moveq	r4, r5
 8014b98:	9400      	str	r4, [sp, #0]
 8014b9a:	f7ff ff79 	bl	8014a90 <_strtol_l.isra.0>
 8014b9e:	b003      	add	sp, #12
 8014ba0:	bd30      	pop	{r4, r5, pc}
 8014ba2:	bf00      	nop
 8014ba4:	2000002c 	.word	0x2000002c
 8014ba8:	20000090 	.word	0x20000090

08014bac <_strtoul_l.isra.0>:
 8014bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bb0:	4680      	mov	r8, r0
 8014bb2:	4689      	mov	r9, r1
 8014bb4:	4692      	mov	sl, r2
 8014bb6:	461e      	mov	r6, r3
 8014bb8:	460f      	mov	r7, r1
 8014bba:	463d      	mov	r5, r7
 8014bbc:	9808      	ldr	r0, [sp, #32]
 8014bbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014bc2:	f001 fb99 	bl	80162f8 <__locale_ctype_ptr_l>
 8014bc6:	4420      	add	r0, r4
 8014bc8:	7843      	ldrb	r3, [r0, #1]
 8014bca:	f013 0308 	ands.w	r3, r3, #8
 8014bce:	d130      	bne.n	8014c32 <_strtoul_l.isra.0+0x86>
 8014bd0:	2c2d      	cmp	r4, #45	; 0x2d
 8014bd2:	d130      	bne.n	8014c36 <_strtoul_l.isra.0+0x8a>
 8014bd4:	787c      	ldrb	r4, [r7, #1]
 8014bd6:	1cbd      	adds	r5, r7, #2
 8014bd8:	2101      	movs	r1, #1
 8014bda:	2e00      	cmp	r6, #0
 8014bdc:	d05c      	beq.n	8014c98 <_strtoul_l.isra.0+0xec>
 8014bde:	2e10      	cmp	r6, #16
 8014be0:	d109      	bne.n	8014bf6 <_strtoul_l.isra.0+0x4a>
 8014be2:	2c30      	cmp	r4, #48	; 0x30
 8014be4:	d107      	bne.n	8014bf6 <_strtoul_l.isra.0+0x4a>
 8014be6:	782b      	ldrb	r3, [r5, #0]
 8014be8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014bec:	2b58      	cmp	r3, #88	; 0x58
 8014bee:	d14e      	bne.n	8014c8e <_strtoul_l.isra.0+0xe2>
 8014bf0:	786c      	ldrb	r4, [r5, #1]
 8014bf2:	2610      	movs	r6, #16
 8014bf4:	3502      	adds	r5, #2
 8014bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	fbb2 f2f6 	udiv	r2, r2, r6
 8014c00:	fb06 fc02 	mul.w	ip, r6, r2
 8014c04:	ea6f 0c0c 	mvn.w	ip, ip
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014c0e:	2f09      	cmp	r7, #9
 8014c10:	d817      	bhi.n	8014c42 <_strtoul_l.isra.0+0x96>
 8014c12:	463c      	mov	r4, r7
 8014c14:	42a6      	cmp	r6, r4
 8014c16:	dd23      	ble.n	8014c60 <_strtoul_l.isra.0+0xb4>
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	db1e      	blt.n	8014c5a <_strtoul_l.isra.0+0xae>
 8014c1c:	4282      	cmp	r2, r0
 8014c1e:	d31c      	bcc.n	8014c5a <_strtoul_l.isra.0+0xae>
 8014c20:	d101      	bne.n	8014c26 <_strtoul_l.isra.0+0x7a>
 8014c22:	45a4      	cmp	ip, r4
 8014c24:	db19      	blt.n	8014c5a <_strtoul_l.isra.0+0xae>
 8014c26:	fb00 4006 	mla	r0, r0, r6, r4
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014c30:	e7eb      	b.n	8014c0a <_strtoul_l.isra.0+0x5e>
 8014c32:	462f      	mov	r7, r5
 8014c34:	e7c1      	b.n	8014bba <_strtoul_l.isra.0+0xe>
 8014c36:	2c2b      	cmp	r4, #43	; 0x2b
 8014c38:	bf04      	itt	eq
 8014c3a:	1cbd      	addeq	r5, r7, #2
 8014c3c:	787c      	ldrbeq	r4, [r7, #1]
 8014c3e:	4619      	mov	r1, r3
 8014c40:	e7cb      	b.n	8014bda <_strtoul_l.isra.0+0x2e>
 8014c42:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014c46:	2f19      	cmp	r7, #25
 8014c48:	d801      	bhi.n	8014c4e <_strtoul_l.isra.0+0xa2>
 8014c4a:	3c37      	subs	r4, #55	; 0x37
 8014c4c:	e7e2      	b.n	8014c14 <_strtoul_l.isra.0+0x68>
 8014c4e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014c52:	2f19      	cmp	r7, #25
 8014c54:	d804      	bhi.n	8014c60 <_strtoul_l.isra.0+0xb4>
 8014c56:	3c57      	subs	r4, #87	; 0x57
 8014c58:	e7dc      	b.n	8014c14 <_strtoul_l.isra.0+0x68>
 8014c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c5e:	e7e5      	b.n	8014c2c <_strtoul_l.isra.0+0x80>
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	da09      	bge.n	8014c78 <_strtoul_l.isra.0+0xcc>
 8014c64:	2322      	movs	r3, #34	; 0x22
 8014c66:	f8c8 3000 	str.w	r3, [r8]
 8014c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c6e:	f1ba 0f00 	cmp.w	sl, #0
 8014c72:	d107      	bne.n	8014c84 <_strtoul_l.isra.0+0xd8>
 8014c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c78:	b101      	cbz	r1, 8014c7c <_strtoul_l.isra.0+0xd0>
 8014c7a:	4240      	negs	r0, r0
 8014c7c:	f1ba 0f00 	cmp.w	sl, #0
 8014c80:	d0f8      	beq.n	8014c74 <_strtoul_l.isra.0+0xc8>
 8014c82:	b10b      	cbz	r3, 8014c88 <_strtoul_l.isra.0+0xdc>
 8014c84:	f105 39ff 	add.w	r9, r5, #4294967295
 8014c88:	f8ca 9000 	str.w	r9, [sl]
 8014c8c:	e7f2      	b.n	8014c74 <_strtoul_l.isra.0+0xc8>
 8014c8e:	2430      	movs	r4, #48	; 0x30
 8014c90:	2e00      	cmp	r6, #0
 8014c92:	d1b0      	bne.n	8014bf6 <_strtoul_l.isra.0+0x4a>
 8014c94:	2608      	movs	r6, #8
 8014c96:	e7ae      	b.n	8014bf6 <_strtoul_l.isra.0+0x4a>
 8014c98:	2c30      	cmp	r4, #48	; 0x30
 8014c9a:	d0a4      	beq.n	8014be6 <_strtoul_l.isra.0+0x3a>
 8014c9c:	260a      	movs	r6, #10
 8014c9e:	e7aa      	b.n	8014bf6 <_strtoul_l.isra.0+0x4a>

08014ca0 <_strtoul_r>:
 8014ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ca2:	4c06      	ldr	r4, [pc, #24]	; (8014cbc <_strtoul_r+0x1c>)
 8014ca4:	4d06      	ldr	r5, [pc, #24]	; (8014cc0 <_strtoul_r+0x20>)
 8014ca6:	6824      	ldr	r4, [r4, #0]
 8014ca8:	6a24      	ldr	r4, [r4, #32]
 8014caa:	2c00      	cmp	r4, #0
 8014cac:	bf08      	it	eq
 8014cae:	462c      	moveq	r4, r5
 8014cb0:	9400      	str	r4, [sp, #0]
 8014cb2:	f7ff ff7b 	bl	8014bac <_strtoul_l.isra.0>
 8014cb6:	b003      	add	sp, #12
 8014cb8:	bd30      	pop	{r4, r5, pc}
 8014cba:	bf00      	nop
 8014cbc:	2000002c 	.word	0x2000002c
 8014cc0:	20000090 	.word	0x20000090

08014cc4 <__submore>:
 8014cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cc8:	460c      	mov	r4, r1
 8014cca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014ccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014cd0:	4299      	cmp	r1, r3
 8014cd2:	d11d      	bne.n	8014d10 <__submore+0x4c>
 8014cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014cd8:	f7fd fb70 	bl	80123bc <_malloc_r>
 8014cdc:	b918      	cbnz	r0, 8014ce6 <__submore+0x22>
 8014cde:	f04f 30ff 	mov.w	r0, #4294967295
 8014ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014cea:	63a3      	str	r3, [r4, #56]	; 0x38
 8014cec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014cf0:	6360      	str	r0, [r4, #52]	; 0x34
 8014cf2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014cf6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014cfa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014cfe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014d02:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014d06:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014d0a:	6020      	str	r0, [r4, #0]
 8014d0c:	2000      	movs	r0, #0
 8014d0e:	e7e8      	b.n	8014ce2 <__submore+0x1e>
 8014d10:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014d12:	0077      	lsls	r7, r6, #1
 8014d14:	463a      	mov	r2, r7
 8014d16:	f001 ff64 	bl	8016be2 <_realloc_r>
 8014d1a:	4605      	mov	r5, r0
 8014d1c:	2800      	cmp	r0, #0
 8014d1e:	d0de      	beq.n	8014cde <__submore+0x1a>
 8014d20:	eb00 0806 	add.w	r8, r0, r6
 8014d24:	4601      	mov	r1, r0
 8014d26:	4632      	mov	r2, r6
 8014d28:	4640      	mov	r0, r8
 8014d2a:	f7fd fae5 	bl	80122f8 <memcpy>
 8014d2e:	f8c4 8000 	str.w	r8, [r4]
 8014d32:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014d36:	e7e9      	b.n	8014d0c <__submore+0x48>

08014d38 <_ungetc_r>:
 8014d38:	1c4b      	adds	r3, r1, #1
 8014d3a:	b570      	push	{r4, r5, r6, lr}
 8014d3c:	4606      	mov	r6, r0
 8014d3e:	460d      	mov	r5, r1
 8014d40:	4614      	mov	r4, r2
 8014d42:	d103      	bne.n	8014d4c <_ungetc_r+0x14>
 8014d44:	f04f 35ff 	mov.w	r5, #4294967295
 8014d48:	4628      	mov	r0, r5
 8014d4a:	bd70      	pop	{r4, r5, r6, pc}
 8014d4c:	b118      	cbz	r0, 8014d56 <_ungetc_r+0x1e>
 8014d4e:	6983      	ldr	r3, [r0, #24]
 8014d50:	b90b      	cbnz	r3, 8014d56 <_ungetc_r+0x1e>
 8014d52:	f7fd f9a3 	bl	801209c <__sinit>
 8014d56:	4b2e      	ldr	r3, [pc, #184]	; (8014e10 <_ungetc_r+0xd8>)
 8014d58:	429c      	cmp	r4, r3
 8014d5a:	d12c      	bne.n	8014db6 <_ungetc_r+0x7e>
 8014d5c:	6874      	ldr	r4, [r6, #4]
 8014d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d62:	f023 0320 	bic.w	r3, r3, #32
 8014d66:	81a3      	strh	r3, [r4, #12]
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	0759      	lsls	r1, r3, #29
 8014d6c:	d413      	bmi.n	8014d96 <_ungetc_r+0x5e>
 8014d6e:	06da      	lsls	r2, r3, #27
 8014d70:	d5e8      	bpl.n	8014d44 <_ungetc_r+0xc>
 8014d72:	071b      	lsls	r3, r3, #28
 8014d74:	d50b      	bpl.n	8014d8e <_ungetc_r+0x56>
 8014d76:	4621      	mov	r1, r4
 8014d78:	4630      	mov	r0, r6
 8014d7a:	f7fd f913 	bl	8011fa4 <_fflush_r>
 8014d7e:	2800      	cmp	r0, #0
 8014d80:	d1e0      	bne.n	8014d44 <_ungetc_r+0xc>
 8014d82:	89a3      	ldrh	r3, [r4, #12]
 8014d84:	60a0      	str	r0, [r4, #8]
 8014d86:	f023 0308 	bic.w	r3, r3, #8
 8014d8a:	81a3      	strh	r3, [r4, #12]
 8014d8c:	61a0      	str	r0, [r4, #24]
 8014d8e:	89a3      	ldrh	r3, [r4, #12]
 8014d90:	f043 0304 	orr.w	r3, r3, #4
 8014d94:	81a3      	strh	r3, [r4, #12]
 8014d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014d98:	6862      	ldr	r2, [r4, #4]
 8014d9a:	b2ed      	uxtb	r5, r5
 8014d9c:	b1e3      	cbz	r3, 8014dd8 <_ungetc_r+0xa0>
 8014d9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014da0:	4293      	cmp	r3, r2
 8014da2:	dd12      	ble.n	8014dca <_ungetc_r+0x92>
 8014da4:	6823      	ldr	r3, [r4, #0]
 8014da6:	1e5a      	subs	r2, r3, #1
 8014da8:	6022      	str	r2, [r4, #0]
 8014daa:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014dae:	6863      	ldr	r3, [r4, #4]
 8014db0:	3301      	adds	r3, #1
 8014db2:	6063      	str	r3, [r4, #4]
 8014db4:	e7c8      	b.n	8014d48 <_ungetc_r+0x10>
 8014db6:	4b17      	ldr	r3, [pc, #92]	; (8014e14 <_ungetc_r+0xdc>)
 8014db8:	429c      	cmp	r4, r3
 8014dba:	d101      	bne.n	8014dc0 <_ungetc_r+0x88>
 8014dbc:	68b4      	ldr	r4, [r6, #8]
 8014dbe:	e7ce      	b.n	8014d5e <_ungetc_r+0x26>
 8014dc0:	4b15      	ldr	r3, [pc, #84]	; (8014e18 <_ungetc_r+0xe0>)
 8014dc2:	429c      	cmp	r4, r3
 8014dc4:	bf08      	it	eq
 8014dc6:	68f4      	ldreq	r4, [r6, #12]
 8014dc8:	e7c9      	b.n	8014d5e <_ungetc_r+0x26>
 8014dca:	4621      	mov	r1, r4
 8014dcc:	4630      	mov	r0, r6
 8014dce:	f7ff ff79 	bl	8014cc4 <__submore>
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	d0e6      	beq.n	8014da4 <_ungetc_r+0x6c>
 8014dd6:	e7b5      	b.n	8014d44 <_ungetc_r+0xc>
 8014dd8:	6921      	ldr	r1, [r4, #16]
 8014dda:	6823      	ldr	r3, [r4, #0]
 8014ddc:	b151      	cbz	r1, 8014df4 <_ungetc_r+0xbc>
 8014dde:	4299      	cmp	r1, r3
 8014de0:	d208      	bcs.n	8014df4 <_ungetc_r+0xbc>
 8014de2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014de6:	42a9      	cmp	r1, r5
 8014de8:	d104      	bne.n	8014df4 <_ungetc_r+0xbc>
 8014dea:	3b01      	subs	r3, #1
 8014dec:	3201      	adds	r2, #1
 8014dee:	6023      	str	r3, [r4, #0]
 8014df0:	6062      	str	r2, [r4, #4]
 8014df2:	e7a9      	b.n	8014d48 <_ungetc_r+0x10>
 8014df4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8014dfe:	2303      	movs	r3, #3
 8014e00:	63a3      	str	r3, [r4, #56]	; 0x38
 8014e02:	4623      	mov	r3, r4
 8014e04:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014e08:	6023      	str	r3, [r4, #0]
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	e7d1      	b.n	8014db2 <_ungetc_r+0x7a>
 8014e0e:	bf00      	nop
 8014e10:	080173a8 	.word	0x080173a8
 8014e14:	080173c8 	.word	0x080173c8
 8014e18:	08017388 	.word	0x08017388

08014e1c <__swbuf_r>:
 8014e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e1e:	460e      	mov	r6, r1
 8014e20:	4614      	mov	r4, r2
 8014e22:	4605      	mov	r5, r0
 8014e24:	b118      	cbz	r0, 8014e2e <__swbuf_r+0x12>
 8014e26:	6983      	ldr	r3, [r0, #24]
 8014e28:	b90b      	cbnz	r3, 8014e2e <__swbuf_r+0x12>
 8014e2a:	f7fd f937 	bl	801209c <__sinit>
 8014e2e:	4b21      	ldr	r3, [pc, #132]	; (8014eb4 <__swbuf_r+0x98>)
 8014e30:	429c      	cmp	r4, r3
 8014e32:	d12a      	bne.n	8014e8a <__swbuf_r+0x6e>
 8014e34:	686c      	ldr	r4, [r5, #4]
 8014e36:	69a3      	ldr	r3, [r4, #24]
 8014e38:	60a3      	str	r3, [r4, #8]
 8014e3a:	89a3      	ldrh	r3, [r4, #12]
 8014e3c:	071a      	lsls	r2, r3, #28
 8014e3e:	d52e      	bpl.n	8014e9e <__swbuf_r+0x82>
 8014e40:	6923      	ldr	r3, [r4, #16]
 8014e42:	b363      	cbz	r3, 8014e9e <__swbuf_r+0x82>
 8014e44:	6923      	ldr	r3, [r4, #16]
 8014e46:	6820      	ldr	r0, [r4, #0]
 8014e48:	1ac0      	subs	r0, r0, r3
 8014e4a:	6963      	ldr	r3, [r4, #20]
 8014e4c:	b2f6      	uxtb	r6, r6
 8014e4e:	4283      	cmp	r3, r0
 8014e50:	4637      	mov	r7, r6
 8014e52:	dc04      	bgt.n	8014e5e <__swbuf_r+0x42>
 8014e54:	4621      	mov	r1, r4
 8014e56:	4628      	mov	r0, r5
 8014e58:	f7fd f8a4 	bl	8011fa4 <_fflush_r>
 8014e5c:	bb28      	cbnz	r0, 8014eaa <__swbuf_r+0x8e>
 8014e5e:	68a3      	ldr	r3, [r4, #8]
 8014e60:	3b01      	subs	r3, #1
 8014e62:	60a3      	str	r3, [r4, #8]
 8014e64:	6823      	ldr	r3, [r4, #0]
 8014e66:	1c5a      	adds	r2, r3, #1
 8014e68:	6022      	str	r2, [r4, #0]
 8014e6a:	701e      	strb	r6, [r3, #0]
 8014e6c:	6963      	ldr	r3, [r4, #20]
 8014e6e:	3001      	adds	r0, #1
 8014e70:	4283      	cmp	r3, r0
 8014e72:	d004      	beq.n	8014e7e <__swbuf_r+0x62>
 8014e74:	89a3      	ldrh	r3, [r4, #12]
 8014e76:	07db      	lsls	r3, r3, #31
 8014e78:	d519      	bpl.n	8014eae <__swbuf_r+0x92>
 8014e7a:	2e0a      	cmp	r6, #10
 8014e7c:	d117      	bne.n	8014eae <__swbuf_r+0x92>
 8014e7e:	4621      	mov	r1, r4
 8014e80:	4628      	mov	r0, r5
 8014e82:	f7fd f88f 	bl	8011fa4 <_fflush_r>
 8014e86:	b190      	cbz	r0, 8014eae <__swbuf_r+0x92>
 8014e88:	e00f      	b.n	8014eaa <__swbuf_r+0x8e>
 8014e8a:	4b0b      	ldr	r3, [pc, #44]	; (8014eb8 <__swbuf_r+0x9c>)
 8014e8c:	429c      	cmp	r4, r3
 8014e8e:	d101      	bne.n	8014e94 <__swbuf_r+0x78>
 8014e90:	68ac      	ldr	r4, [r5, #8]
 8014e92:	e7d0      	b.n	8014e36 <__swbuf_r+0x1a>
 8014e94:	4b09      	ldr	r3, [pc, #36]	; (8014ebc <__swbuf_r+0xa0>)
 8014e96:	429c      	cmp	r4, r3
 8014e98:	bf08      	it	eq
 8014e9a:	68ec      	ldreq	r4, [r5, #12]
 8014e9c:	e7cb      	b.n	8014e36 <__swbuf_r+0x1a>
 8014e9e:	4621      	mov	r1, r4
 8014ea0:	4628      	mov	r0, r5
 8014ea2:	f000 f81f 	bl	8014ee4 <__swsetup_r>
 8014ea6:	2800      	cmp	r0, #0
 8014ea8:	d0cc      	beq.n	8014e44 <__swbuf_r+0x28>
 8014eaa:	f04f 37ff 	mov.w	r7, #4294967295
 8014eae:	4638      	mov	r0, r7
 8014eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	080173a8 	.word	0x080173a8
 8014eb8:	080173c8 	.word	0x080173c8
 8014ebc:	08017388 	.word	0x08017388

08014ec0 <_write_r>:
 8014ec0:	b538      	push	{r3, r4, r5, lr}
 8014ec2:	4c07      	ldr	r4, [pc, #28]	; (8014ee0 <_write_r+0x20>)
 8014ec4:	4605      	mov	r5, r0
 8014ec6:	4608      	mov	r0, r1
 8014ec8:	4611      	mov	r1, r2
 8014eca:	2200      	movs	r2, #0
 8014ecc:	6022      	str	r2, [r4, #0]
 8014ece:	461a      	mov	r2, r3
 8014ed0:	f7f8 ff48 	bl	800dd64 <_write>
 8014ed4:	1c43      	adds	r3, r0, #1
 8014ed6:	d102      	bne.n	8014ede <_write_r+0x1e>
 8014ed8:	6823      	ldr	r3, [r4, #0]
 8014eda:	b103      	cbz	r3, 8014ede <_write_r+0x1e>
 8014edc:	602b      	str	r3, [r5, #0]
 8014ede:	bd38      	pop	{r3, r4, r5, pc}
 8014ee0:	20004e4c 	.word	0x20004e4c

08014ee4 <__swsetup_r>:
 8014ee4:	4b32      	ldr	r3, [pc, #200]	; (8014fb0 <__swsetup_r+0xcc>)
 8014ee6:	b570      	push	{r4, r5, r6, lr}
 8014ee8:	681d      	ldr	r5, [r3, #0]
 8014eea:	4606      	mov	r6, r0
 8014eec:	460c      	mov	r4, r1
 8014eee:	b125      	cbz	r5, 8014efa <__swsetup_r+0x16>
 8014ef0:	69ab      	ldr	r3, [r5, #24]
 8014ef2:	b913      	cbnz	r3, 8014efa <__swsetup_r+0x16>
 8014ef4:	4628      	mov	r0, r5
 8014ef6:	f7fd f8d1 	bl	801209c <__sinit>
 8014efa:	4b2e      	ldr	r3, [pc, #184]	; (8014fb4 <__swsetup_r+0xd0>)
 8014efc:	429c      	cmp	r4, r3
 8014efe:	d10f      	bne.n	8014f20 <__swsetup_r+0x3c>
 8014f00:	686c      	ldr	r4, [r5, #4]
 8014f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f06:	b29a      	uxth	r2, r3
 8014f08:	0715      	lsls	r5, r2, #28
 8014f0a:	d42c      	bmi.n	8014f66 <__swsetup_r+0x82>
 8014f0c:	06d0      	lsls	r0, r2, #27
 8014f0e:	d411      	bmi.n	8014f34 <__swsetup_r+0x50>
 8014f10:	2209      	movs	r2, #9
 8014f12:	6032      	str	r2, [r6, #0]
 8014f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f18:	81a3      	strh	r3, [r4, #12]
 8014f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8014f1e:	e03e      	b.n	8014f9e <__swsetup_r+0xba>
 8014f20:	4b25      	ldr	r3, [pc, #148]	; (8014fb8 <__swsetup_r+0xd4>)
 8014f22:	429c      	cmp	r4, r3
 8014f24:	d101      	bne.n	8014f2a <__swsetup_r+0x46>
 8014f26:	68ac      	ldr	r4, [r5, #8]
 8014f28:	e7eb      	b.n	8014f02 <__swsetup_r+0x1e>
 8014f2a:	4b24      	ldr	r3, [pc, #144]	; (8014fbc <__swsetup_r+0xd8>)
 8014f2c:	429c      	cmp	r4, r3
 8014f2e:	bf08      	it	eq
 8014f30:	68ec      	ldreq	r4, [r5, #12]
 8014f32:	e7e6      	b.n	8014f02 <__swsetup_r+0x1e>
 8014f34:	0751      	lsls	r1, r2, #29
 8014f36:	d512      	bpl.n	8014f5e <__swsetup_r+0x7a>
 8014f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f3a:	b141      	cbz	r1, 8014f4e <__swsetup_r+0x6a>
 8014f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f40:	4299      	cmp	r1, r3
 8014f42:	d002      	beq.n	8014f4a <__swsetup_r+0x66>
 8014f44:	4630      	mov	r0, r6
 8014f46:	f7fd f9eb 	bl	8012320 <_free_r>
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8014f4e:	89a3      	ldrh	r3, [r4, #12]
 8014f50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014f54:	81a3      	strh	r3, [r4, #12]
 8014f56:	2300      	movs	r3, #0
 8014f58:	6063      	str	r3, [r4, #4]
 8014f5a:	6923      	ldr	r3, [r4, #16]
 8014f5c:	6023      	str	r3, [r4, #0]
 8014f5e:	89a3      	ldrh	r3, [r4, #12]
 8014f60:	f043 0308 	orr.w	r3, r3, #8
 8014f64:	81a3      	strh	r3, [r4, #12]
 8014f66:	6923      	ldr	r3, [r4, #16]
 8014f68:	b94b      	cbnz	r3, 8014f7e <__swsetup_r+0x9a>
 8014f6a:	89a3      	ldrh	r3, [r4, #12]
 8014f6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f74:	d003      	beq.n	8014f7e <__swsetup_r+0x9a>
 8014f76:	4621      	mov	r1, r4
 8014f78:	4630      	mov	r0, r6
 8014f7a:	f7fd f97d 	bl	8012278 <__smakebuf_r>
 8014f7e:	89a2      	ldrh	r2, [r4, #12]
 8014f80:	f012 0301 	ands.w	r3, r2, #1
 8014f84:	d00c      	beq.n	8014fa0 <__swsetup_r+0xbc>
 8014f86:	2300      	movs	r3, #0
 8014f88:	60a3      	str	r3, [r4, #8]
 8014f8a:	6963      	ldr	r3, [r4, #20]
 8014f8c:	425b      	negs	r3, r3
 8014f8e:	61a3      	str	r3, [r4, #24]
 8014f90:	6923      	ldr	r3, [r4, #16]
 8014f92:	b953      	cbnz	r3, 8014faa <__swsetup_r+0xc6>
 8014f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014f9c:	d1ba      	bne.n	8014f14 <__swsetup_r+0x30>
 8014f9e:	bd70      	pop	{r4, r5, r6, pc}
 8014fa0:	0792      	lsls	r2, r2, #30
 8014fa2:	bf58      	it	pl
 8014fa4:	6963      	ldrpl	r3, [r4, #20]
 8014fa6:	60a3      	str	r3, [r4, #8]
 8014fa8:	e7f2      	b.n	8014f90 <__swsetup_r+0xac>
 8014faa:	2000      	movs	r0, #0
 8014fac:	e7f7      	b.n	8014f9e <__swsetup_r+0xba>
 8014fae:	bf00      	nop
 8014fb0:	2000002c 	.word	0x2000002c
 8014fb4:	080173a8 	.word	0x080173a8
 8014fb8:	080173c8 	.word	0x080173c8
 8014fbc:	08017388 	.word	0x08017388

08014fc0 <_close_r>:
 8014fc0:	b538      	push	{r3, r4, r5, lr}
 8014fc2:	4c06      	ldr	r4, [pc, #24]	; (8014fdc <_close_r+0x1c>)
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	4605      	mov	r5, r0
 8014fc8:	4608      	mov	r0, r1
 8014fca:	6023      	str	r3, [r4, #0]
 8014fcc:	f7f8 fed8 	bl	800dd80 <_close>
 8014fd0:	1c43      	adds	r3, r0, #1
 8014fd2:	d102      	bne.n	8014fda <_close_r+0x1a>
 8014fd4:	6823      	ldr	r3, [r4, #0]
 8014fd6:	b103      	cbz	r3, 8014fda <_close_r+0x1a>
 8014fd8:	602b      	str	r3, [r5, #0]
 8014fda:	bd38      	pop	{r3, r4, r5, pc}
 8014fdc:	20004e4c 	.word	0x20004e4c

08014fe0 <quorem>:
 8014fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fe4:	6903      	ldr	r3, [r0, #16]
 8014fe6:	690c      	ldr	r4, [r1, #16]
 8014fe8:	42a3      	cmp	r3, r4
 8014fea:	4680      	mov	r8, r0
 8014fec:	f2c0 8082 	blt.w	80150f4 <quorem+0x114>
 8014ff0:	3c01      	subs	r4, #1
 8014ff2:	f101 0714 	add.w	r7, r1, #20
 8014ff6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014ffa:	f100 0614 	add.w	r6, r0, #20
 8014ffe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8015002:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015006:	eb06 030c 	add.w	r3, r6, ip
 801500a:	3501      	adds	r5, #1
 801500c:	eb07 090c 	add.w	r9, r7, ip
 8015010:	9301      	str	r3, [sp, #4]
 8015012:	fbb0 f5f5 	udiv	r5, r0, r5
 8015016:	b395      	cbz	r5, 801507e <quorem+0x9e>
 8015018:	f04f 0a00 	mov.w	sl, #0
 801501c:	4638      	mov	r0, r7
 801501e:	46b6      	mov	lr, r6
 8015020:	46d3      	mov	fp, sl
 8015022:	f850 2b04 	ldr.w	r2, [r0], #4
 8015026:	b293      	uxth	r3, r2
 8015028:	fb05 a303 	mla	r3, r5, r3, sl
 801502c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015030:	b29b      	uxth	r3, r3
 8015032:	ebab 0303 	sub.w	r3, fp, r3
 8015036:	0c12      	lsrs	r2, r2, #16
 8015038:	f8de b000 	ldr.w	fp, [lr]
 801503c:	fb05 a202 	mla	r2, r5, r2, sl
 8015040:	fa13 f38b 	uxtah	r3, r3, fp
 8015044:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015048:	fa1f fb82 	uxth.w	fp, r2
 801504c:	f8de 2000 	ldr.w	r2, [lr]
 8015050:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015058:	b29b      	uxth	r3, r3
 801505a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801505e:	4581      	cmp	r9, r0
 8015060:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8015064:	f84e 3b04 	str.w	r3, [lr], #4
 8015068:	d2db      	bcs.n	8015022 <quorem+0x42>
 801506a:	f856 300c 	ldr.w	r3, [r6, ip]
 801506e:	b933      	cbnz	r3, 801507e <quorem+0x9e>
 8015070:	9b01      	ldr	r3, [sp, #4]
 8015072:	3b04      	subs	r3, #4
 8015074:	429e      	cmp	r6, r3
 8015076:	461a      	mov	r2, r3
 8015078:	d330      	bcc.n	80150dc <quorem+0xfc>
 801507a:	f8c8 4010 	str.w	r4, [r8, #16]
 801507e:	4640      	mov	r0, r8
 8015080:	f001 fbf6 	bl	8016870 <__mcmp>
 8015084:	2800      	cmp	r0, #0
 8015086:	db25      	blt.n	80150d4 <quorem+0xf4>
 8015088:	3501      	adds	r5, #1
 801508a:	4630      	mov	r0, r6
 801508c:	f04f 0c00 	mov.w	ip, #0
 8015090:	f857 2b04 	ldr.w	r2, [r7], #4
 8015094:	f8d0 e000 	ldr.w	lr, [r0]
 8015098:	b293      	uxth	r3, r2
 801509a:	ebac 0303 	sub.w	r3, ip, r3
 801509e:	0c12      	lsrs	r2, r2, #16
 80150a0:	fa13 f38e 	uxtah	r3, r3, lr
 80150a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80150a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80150b2:	45b9      	cmp	r9, r7
 80150b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80150b8:	f840 3b04 	str.w	r3, [r0], #4
 80150bc:	d2e8      	bcs.n	8015090 <quorem+0xb0>
 80150be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80150c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80150c6:	b92a      	cbnz	r2, 80150d4 <quorem+0xf4>
 80150c8:	3b04      	subs	r3, #4
 80150ca:	429e      	cmp	r6, r3
 80150cc:	461a      	mov	r2, r3
 80150ce:	d30b      	bcc.n	80150e8 <quorem+0x108>
 80150d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80150d4:	4628      	mov	r0, r5
 80150d6:	b003      	add	sp, #12
 80150d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150dc:	6812      	ldr	r2, [r2, #0]
 80150de:	3b04      	subs	r3, #4
 80150e0:	2a00      	cmp	r2, #0
 80150e2:	d1ca      	bne.n	801507a <quorem+0x9a>
 80150e4:	3c01      	subs	r4, #1
 80150e6:	e7c5      	b.n	8015074 <quorem+0x94>
 80150e8:	6812      	ldr	r2, [r2, #0]
 80150ea:	3b04      	subs	r3, #4
 80150ec:	2a00      	cmp	r2, #0
 80150ee:	d1ef      	bne.n	80150d0 <quorem+0xf0>
 80150f0:	3c01      	subs	r4, #1
 80150f2:	e7ea      	b.n	80150ca <quorem+0xea>
 80150f4:	2000      	movs	r0, #0
 80150f6:	e7ee      	b.n	80150d6 <quorem+0xf6>

080150f8 <_dtoa_r>:
 80150f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150fc:	ec57 6b10 	vmov	r6, r7, d0
 8015100:	b097      	sub	sp, #92	; 0x5c
 8015102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015104:	9106      	str	r1, [sp, #24]
 8015106:	4604      	mov	r4, r0
 8015108:	920b      	str	r2, [sp, #44]	; 0x2c
 801510a:	9312      	str	r3, [sp, #72]	; 0x48
 801510c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015110:	e9cd 6700 	strd	r6, r7, [sp]
 8015114:	b93d      	cbnz	r5, 8015126 <_dtoa_r+0x2e>
 8015116:	2010      	movs	r0, #16
 8015118:	f001 f922 	bl	8016360 <malloc>
 801511c:	6260      	str	r0, [r4, #36]	; 0x24
 801511e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015122:	6005      	str	r5, [r0, #0]
 8015124:	60c5      	str	r5, [r0, #12]
 8015126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015128:	6819      	ldr	r1, [r3, #0]
 801512a:	b151      	cbz	r1, 8015142 <_dtoa_r+0x4a>
 801512c:	685a      	ldr	r2, [r3, #4]
 801512e:	604a      	str	r2, [r1, #4]
 8015130:	2301      	movs	r3, #1
 8015132:	4093      	lsls	r3, r2
 8015134:	608b      	str	r3, [r1, #8]
 8015136:	4620      	mov	r0, r4
 8015138:	f001 f97b 	bl	8016432 <_Bfree>
 801513c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801513e:	2200      	movs	r2, #0
 8015140:	601a      	str	r2, [r3, #0]
 8015142:	1e3b      	subs	r3, r7, #0
 8015144:	bfbb      	ittet	lt
 8015146:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801514a:	9301      	strlt	r3, [sp, #4]
 801514c:	2300      	movge	r3, #0
 801514e:	2201      	movlt	r2, #1
 8015150:	bfac      	ite	ge
 8015152:	f8c8 3000 	strge.w	r3, [r8]
 8015156:	f8c8 2000 	strlt.w	r2, [r8]
 801515a:	4baf      	ldr	r3, [pc, #700]	; (8015418 <_dtoa_r+0x320>)
 801515c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015160:	ea33 0308 	bics.w	r3, r3, r8
 8015164:	d114      	bne.n	8015190 <_dtoa_r+0x98>
 8015166:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015168:	f242 730f 	movw	r3, #9999	; 0x270f
 801516c:	6013      	str	r3, [r2, #0]
 801516e:	9b00      	ldr	r3, [sp, #0]
 8015170:	b923      	cbnz	r3, 801517c <_dtoa_r+0x84>
 8015172:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015176:	2800      	cmp	r0, #0
 8015178:	f000 8542 	beq.w	8015c00 <_dtoa_r+0xb08>
 801517c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801517e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801542c <_dtoa_r+0x334>
 8015182:	2b00      	cmp	r3, #0
 8015184:	f000 8544 	beq.w	8015c10 <_dtoa_r+0xb18>
 8015188:	f10b 0303 	add.w	r3, fp, #3
 801518c:	f000 bd3e 	b.w	8015c0c <_dtoa_r+0xb14>
 8015190:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015194:	2200      	movs	r2, #0
 8015196:	2300      	movs	r3, #0
 8015198:	4630      	mov	r0, r6
 801519a:	4639      	mov	r1, r7
 801519c:	f7f3 fbcc 	bl	8008938 <__aeabi_dcmpeq>
 80151a0:	4681      	mov	r9, r0
 80151a2:	b168      	cbz	r0, 80151c0 <_dtoa_r+0xc8>
 80151a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151a6:	2301      	movs	r3, #1
 80151a8:	6013      	str	r3, [r2, #0]
 80151aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	f000 8524 	beq.w	8015bfa <_dtoa_r+0xb02>
 80151b2:	4b9a      	ldr	r3, [pc, #616]	; (801541c <_dtoa_r+0x324>)
 80151b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80151b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80151ba:	6013      	str	r3, [r2, #0]
 80151bc:	f000 bd28 	b.w	8015c10 <_dtoa_r+0xb18>
 80151c0:	aa14      	add	r2, sp, #80	; 0x50
 80151c2:	a915      	add	r1, sp, #84	; 0x54
 80151c4:	ec47 6b10 	vmov	d0, r6, r7
 80151c8:	4620      	mov	r0, r4
 80151ca:	f001 fc3f 	bl	8016a4c <__d2b>
 80151ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80151d2:	9004      	str	r0, [sp, #16]
 80151d4:	2d00      	cmp	r5, #0
 80151d6:	d07c      	beq.n	80152d2 <_dtoa_r+0x1da>
 80151d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80151dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80151e0:	46b2      	mov	sl, r6
 80151e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80151e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80151ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80151ee:	2200      	movs	r2, #0
 80151f0:	4b8b      	ldr	r3, [pc, #556]	; (8015420 <_dtoa_r+0x328>)
 80151f2:	4650      	mov	r0, sl
 80151f4:	4659      	mov	r1, fp
 80151f6:	f7f2 ff7f 	bl	80080f8 <__aeabi_dsub>
 80151fa:	a381      	add	r3, pc, #516	; (adr r3, 8015400 <_dtoa_r+0x308>)
 80151fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015200:	f7f3 f932 	bl	8008468 <__aeabi_dmul>
 8015204:	a380      	add	r3, pc, #512	; (adr r3, 8015408 <_dtoa_r+0x310>)
 8015206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520a:	f7f2 ff77 	bl	80080fc <__adddf3>
 801520e:	4606      	mov	r6, r0
 8015210:	4628      	mov	r0, r5
 8015212:	460f      	mov	r7, r1
 8015214:	f7f3 f8be 	bl	8008394 <__aeabi_i2d>
 8015218:	a37d      	add	r3, pc, #500	; (adr r3, 8015410 <_dtoa_r+0x318>)
 801521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801521e:	f7f3 f923 	bl	8008468 <__aeabi_dmul>
 8015222:	4602      	mov	r2, r0
 8015224:	460b      	mov	r3, r1
 8015226:	4630      	mov	r0, r6
 8015228:	4639      	mov	r1, r7
 801522a:	f7f2 ff67 	bl	80080fc <__adddf3>
 801522e:	4606      	mov	r6, r0
 8015230:	460f      	mov	r7, r1
 8015232:	f7f3 fbc9 	bl	80089c8 <__aeabi_d2iz>
 8015236:	2200      	movs	r2, #0
 8015238:	4682      	mov	sl, r0
 801523a:	2300      	movs	r3, #0
 801523c:	4630      	mov	r0, r6
 801523e:	4639      	mov	r1, r7
 8015240:	f7f3 fb84 	bl	800894c <__aeabi_dcmplt>
 8015244:	b148      	cbz	r0, 801525a <_dtoa_r+0x162>
 8015246:	4650      	mov	r0, sl
 8015248:	f7f3 f8a4 	bl	8008394 <__aeabi_i2d>
 801524c:	4632      	mov	r2, r6
 801524e:	463b      	mov	r3, r7
 8015250:	f7f3 fb72 	bl	8008938 <__aeabi_dcmpeq>
 8015254:	b908      	cbnz	r0, 801525a <_dtoa_r+0x162>
 8015256:	f10a 3aff 	add.w	sl, sl, #4294967295
 801525a:	f1ba 0f16 	cmp.w	sl, #22
 801525e:	d859      	bhi.n	8015314 <_dtoa_r+0x21c>
 8015260:	4970      	ldr	r1, [pc, #448]	; (8015424 <_dtoa_r+0x32c>)
 8015262:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015266:	e9dd 2300 	ldrd	r2, r3, [sp]
 801526a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801526e:	f7f3 fb8b 	bl	8008988 <__aeabi_dcmpgt>
 8015272:	2800      	cmp	r0, #0
 8015274:	d050      	beq.n	8015318 <_dtoa_r+0x220>
 8015276:	f10a 3aff 	add.w	sl, sl, #4294967295
 801527a:	2300      	movs	r3, #0
 801527c:	930f      	str	r3, [sp, #60]	; 0x3c
 801527e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015280:	1b5d      	subs	r5, r3, r5
 8015282:	f1b5 0801 	subs.w	r8, r5, #1
 8015286:	bf49      	itett	mi
 8015288:	f1c5 0301 	rsbmi	r3, r5, #1
 801528c:	2300      	movpl	r3, #0
 801528e:	9305      	strmi	r3, [sp, #20]
 8015290:	f04f 0800 	movmi.w	r8, #0
 8015294:	bf58      	it	pl
 8015296:	9305      	strpl	r3, [sp, #20]
 8015298:	f1ba 0f00 	cmp.w	sl, #0
 801529c:	db3e      	blt.n	801531c <_dtoa_r+0x224>
 801529e:	2300      	movs	r3, #0
 80152a0:	44d0      	add	r8, sl
 80152a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80152a6:	9307      	str	r3, [sp, #28]
 80152a8:	9b06      	ldr	r3, [sp, #24]
 80152aa:	2b09      	cmp	r3, #9
 80152ac:	f200 8090 	bhi.w	80153d0 <_dtoa_r+0x2d8>
 80152b0:	2b05      	cmp	r3, #5
 80152b2:	bfc4      	itt	gt
 80152b4:	3b04      	subgt	r3, #4
 80152b6:	9306      	strgt	r3, [sp, #24]
 80152b8:	9b06      	ldr	r3, [sp, #24]
 80152ba:	f1a3 0302 	sub.w	r3, r3, #2
 80152be:	bfcc      	ite	gt
 80152c0:	2500      	movgt	r5, #0
 80152c2:	2501      	movle	r5, #1
 80152c4:	2b03      	cmp	r3, #3
 80152c6:	f200 808f 	bhi.w	80153e8 <_dtoa_r+0x2f0>
 80152ca:	e8df f003 	tbb	[pc, r3]
 80152ce:	7f7d      	.short	0x7f7d
 80152d0:	7131      	.short	0x7131
 80152d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80152d6:	441d      	add	r5, r3
 80152d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80152dc:	2820      	cmp	r0, #32
 80152de:	dd13      	ble.n	8015308 <_dtoa_r+0x210>
 80152e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80152e4:	9b00      	ldr	r3, [sp, #0]
 80152e6:	fa08 f800 	lsl.w	r8, r8, r0
 80152ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80152ee:	fa23 f000 	lsr.w	r0, r3, r0
 80152f2:	ea48 0000 	orr.w	r0, r8, r0
 80152f6:	f7f3 f83d 	bl	8008374 <__aeabi_ui2d>
 80152fa:	2301      	movs	r3, #1
 80152fc:	4682      	mov	sl, r0
 80152fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015302:	3d01      	subs	r5, #1
 8015304:	9313      	str	r3, [sp, #76]	; 0x4c
 8015306:	e772      	b.n	80151ee <_dtoa_r+0xf6>
 8015308:	9b00      	ldr	r3, [sp, #0]
 801530a:	f1c0 0020 	rsb	r0, r0, #32
 801530e:	fa03 f000 	lsl.w	r0, r3, r0
 8015312:	e7f0      	b.n	80152f6 <_dtoa_r+0x1fe>
 8015314:	2301      	movs	r3, #1
 8015316:	e7b1      	b.n	801527c <_dtoa_r+0x184>
 8015318:	900f      	str	r0, [sp, #60]	; 0x3c
 801531a:	e7b0      	b.n	801527e <_dtoa_r+0x186>
 801531c:	9b05      	ldr	r3, [sp, #20]
 801531e:	eba3 030a 	sub.w	r3, r3, sl
 8015322:	9305      	str	r3, [sp, #20]
 8015324:	f1ca 0300 	rsb	r3, sl, #0
 8015328:	9307      	str	r3, [sp, #28]
 801532a:	2300      	movs	r3, #0
 801532c:	930e      	str	r3, [sp, #56]	; 0x38
 801532e:	e7bb      	b.n	80152a8 <_dtoa_r+0x1b0>
 8015330:	2301      	movs	r3, #1
 8015332:	930a      	str	r3, [sp, #40]	; 0x28
 8015334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015336:	2b00      	cmp	r3, #0
 8015338:	dd59      	ble.n	80153ee <_dtoa_r+0x2f6>
 801533a:	9302      	str	r3, [sp, #8]
 801533c:	4699      	mov	r9, r3
 801533e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015340:	2200      	movs	r2, #0
 8015342:	6072      	str	r2, [r6, #4]
 8015344:	2204      	movs	r2, #4
 8015346:	f102 0014 	add.w	r0, r2, #20
 801534a:	4298      	cmp	r0, r3
 801534c:	6871      	ldr	r1, [r6, #4]
 801534e:	d953      	bls.n	80153f8 <_dtoa_r+0x300>
 8015350:	4620      	mov	r0, r4
 8015352:	f001 f83a 	bl	80163ca <_Balloc>
 8015356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015358:	6030      	str	r0, [r6, #0]
 801535a:	f1b9 0f0e 	cmp.w	r9, #14
 801535e:	f8d3 b000 	ldr.w	fp, [r3]
 8015362:	f200 80e6 	bhi.w	8015532 <_dtoa_r+0x43a>
 8015366:	2d00      	cmp	r5, #0
 8015368:	f000 80e3 	beq.w	8015532 <_dtoa_r+0x43a>
 801536c:	ed9d 7b00 	vldr	d7, [sp]
 8015370:	f1ba 0f00 	cmp.w	sl, #0
 8015374:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015378:	dd74      	ble.n	8015464 <_dtoa_r+0x36c>
 801537a:	4a2a      	ldr	r2, [pc, #168]	; (8015424 <_dtoa_r+0x32c>)
 801537c:	f00a 030f 	and.w	r3, sl, #15
 8015380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015384:	ed93 7b00 	vldr	d7, [r3]
 8015388:	ea4f 162a 	mov.w	r6, sl, asr #4
 801538c:	06f0      	lsls	r0, r6, #27
 801538e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015392:	d565      	bpl.n	8015460 <_dtoa_r+0x368>
 8015394:	4b24      	ldr	r3, [pc, #144]	; (8015428 <_dtoa_r+0x330>)
 8015396:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801539a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801539e:	f7f3 f98d 	bl	80086bc <__aeabi_ddiv>
 80153a2:	e9cd 0100 	strd	r0, r1, [sp]
 80153a6:	f006 060f 	and.w	r6, r6, #15
 80153aa:	2503      	movs	r5, #3
 80153ac:	4f1e      	ldr	r7, [pc, #120]	; (8015428 <_dtoa_r+0x330>)
 80153ae:	e04c      	b.n	801544a <_dtoa_r+0x352>
 80153b0:	2301      	movs	r3, #1
 80153b2:	930a      	str	r3, [sp, #40]	; 0x28
 80153b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153b6:	4453      	add	r3, sl
 80153b8:	f103 0901 	add.w	r9, r3, #1
 80153bc:	9302      	str	r3, [sp, #8]
 80153be:	464b      	mov	r3, r9
 80153c0:	2b01      	cmp	r3, #1
 80153c2:	bfb8      	it	lt
 80153c4:	2301      	movlt	r3, #1
 80153c6:	e7ba      	b.n	801533e <_dtoa_r+0x246>
 80153c8:	2300      	movs	r3, #0
 80153ca:	e7b2      	b.n	8015332 <_dtoa_r+0x23a>
 80153cc:	2300      	movs	r3, #0
 80153ce:	e7f0      	b.n	80153b2 <_dtoa_r+0x2ba>
 80153d0:	2501      	movs	r5, #1
 80153d2:	2300      	movs	r3, #0
 80153d4:	9306      	str	r3, [sp, #24]
 80153d6:	950a      	str	r5, [sp, #40]	; 0x28
 80153d8:	f04f 33ff 	mov.w	r3, #4294967295
 80153dc:	9302      	str	r3, [sp, #8]
 80153de:	4699      	mov	r9, r3
 80153e0:	2200      	movs	r2, #0
 80153e2:	2312      	movs	r3, #18
 80153e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80153e6:	e7aa      	b.n	801533e <_dtoa_r+0x246>
 80153e8:	2301      	movs	r3, #1
 80153ea:	930a      	str	r3, [sp, #40]	; 0x28
 80153ec:	e7f4      	b.n	80153d8 <_dtoa_r+0x2e0>
 80153ee:	2301      	movs	r3, #1
 80153f0:	9302      	str	r3, [sp, #8]
 80153f2:	4699      	mov	r9, r3
 80153f4:	461a      	mov	r2, r3
 80153f6:	e7f5      	b.n	80153e4 <_dtoa_r+0x2ec>
 80153f8:	3101      	adds	r1, #1
 80153fa:	6071      	str	r1, [r6, #4]
 80153fc:	0052      	lsls	r2, r2, #1
 80153fe:	e7a2      	b.n	8015346 <_dtoa_r+0x24e>
 8015400:	636f4361 	.word	0x636f4361
 8015404:	3fd287a7 	.word	0x3fd287a7
 8015408:	8b60c8b3 	.word	0x8b60c8b3
 801540c:	3fc68a28 	.word	0x3fc68a28
 8015410:	509f79fb 	.word	0x509f79fb
 8015414:	3fd34413 	.word	0x3fd34413
 8015418:	7ff00000 	.word	0x7ff00000
 801541c:	0801744b 	.word	0x0801744b
 8015420:	3ff80000 	.word	0x3ff80000
 8015424:	080174e0 	.word	0x080174e0
 8015428:	080174b8 	.word	0x080174b8
 801542c:	080174a9 	.word	0x080174a9
 8015430:	07f1      	lsls	r1, r6, #31
 8015432:	d508      	bpl.n	8015446 <_dtoa_r+0x34e>
 8015434:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015438:	e9d7 2300 	ldrd	r2, r3, [r7]
 801543c:	f7f3 f814 	bl	8008468 <__aeabi_dmul>
 8015440:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015444:	3501      	adds	r5, #1
 8015446:	1076      	asrs	r6, r6, #1
 8015448:	3708      	adds	r7, #8
 801544a:	2e00      	cmp	r6, #0
 801544c:	d1f0      	bne.n	8015430 <_dtoa_r+0x338>
 801544e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015452:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015456:	f7f3 f931 	bl	80086bc <__aeabi_ddiv>
 801545a:	e9cd 0100 	strd	r0, r1, [sp]
 801545e:	e01a      	b.n	8015496 <_dtoa_r+0x39e>
 8015460:	2502      	movs	r5, #2
 8015462:	e7a3      	b.n	80153ac <_dtoa_r+0x2b4>
 8015464:	f000 80a0 	beq.w	80155a8 <_dtoa_r+0x4b0>
 8015468:	f1ca 0600 	rsb	r6, sl, #0
 801546c:	4b9f      	ldr	r3, [pc, #636]	; (80156ec <_dtoa_r+0x5f4>)
 801546e:	4fa0      	ldr	r7, [pc, #640]	; (80156f0 <_dtoa_r+0x5f8>)
 8015470:	f006 020f 	and.w	r2, r6, #15
 8015474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801547c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015480:	f7f2 fff2 	bl	8008468 <__aeabi_dmul>
 8015484:	e9cd 0100 	strd	r0, r1, [sp]
 8015488:	1136      	asrs	r6, r6, #4
 801548a:	2300      	movs	r3, #0
 801548c:	2502      	movs	r5, #2
 801548e:	2e00      	cmp	r6, #0
 8015490:	d17f      	bne.n	8015592 <_dtoa_r+0x49a>
 8015492:	2b00      	cmp	r3, #0
 8015494:	d1e1      	bne.n	801545a <_dtoa_r+0x362>
 8015496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015498:	2b00      	cmp	r3, #0
 801549a:	f000 8087 	beq.w	80155ac <_dtoa_r+0x4b4>
 801549e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80154a2:	2200      	movs	r2, #0
 80154a4:	4b93      	ldr	r3, [pc, #588]	; (80156f4 <_dtoa_r+0x5fc>)
 80154a6:	4630      	mov	r0, r6
 80154a8:	4639      	mov	r1, r7
 80154aa:	f7f3 fa4f 	bl	800894c <__aeabi_dcmplt>
 80154ae:	2800      	cmp	r0, #0
 80154b0:	d07c      	beq.n	80155ac <_dtoa_r+0x4b4>
 80154b2:	f1b9 0f00 	cmp.w	r9, #0
 80154b6:	d079      	beq.n	80155ac <_dtoa_r+0x4b4>
 80154b8:	9b02      	ldr	r3, [sp, #8]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	dd35      	ble.n	801552a <_dtoa_r+0x432>
 80154be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80154c2:	9308      	str	r3, [sp, #32]
 80154c4:	4639      	mov	r1, r7
 80154c6:	2200      	movs	r2, #0
 80154c8:	4b8b      	ldr	r3, [pc, #556]	; (80156f8 <_dtoa_r+0x600>)
 80154ca:	4630      	mov	r0, r6
 80154cc:	f7f2 ffcc 	bl	8008468 <__aeabi_dmul>
 80154d0:	e9cd 0100 	strd	r0, r1, [sp]
 80154d4:	9f02      	ldr	r7, [sp, #8]
 80154d6:	3501      	adds	r5, #1
 80154d8:	4628      	mov	r0, r5
 80154da:	f7f2 ff5b 	bl	8008394 <__aeabi_i2d>
 80154de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154e2:	f7f2 ffc1 	bl	8008468 <__aeabi_dmul>
 80154e6:	2200      	movs	r2, #0
 80154e8:	4b84      	ldr	r3, [pc, #528]	; (80156fc <_dtoa_r+0x604>)
 80154ea:	f7f2 fe07 	bl	80080fc <__adddf3>
 80154ee:	4605      	mov	r5, r0
 80154f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80154f4:	2f00      	cmp	r7, #0
 80154f6:	d15d      	bne.n	80155b4 <_dtoa_r+0x4bc>
 80154f8:	2200      	movs	r2, #0
 80154fa:	4b81      	ldr	r3, [pc, #516]	; (8015700 <_dtoa_r+0x608>)
 80154fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015500:	f7f2 fdfa 	bl	80080f8 <__aeabi_dsub>
 8015504:	462a      	mov	r2, r5
 8015506:	4633      	mov	r3, r6
 8015508:	e9cd 0100 	strd	r0, r1, [sp]
 801550c:	f7f3 fa3c 	bl	8008988 <__aeabi_dcmpgt>
 8015510:	2800      	cmp	r0, #0
 8015512:	f040 8288 	bne.w	8015a26 <_dtoa_r+0x92e>
 8015516:	462a      	mov	r2, r5
 8015518:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801551c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015520:	f7f3 fa14 	bl	800894c <__aeabi_dcmplt>
 8015524:	2800      	cmp	r0, #0
 8015526:	f040 827c 	bne.w	8015a22 <_dtoa_r+0x92a>
 801552a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801552e:	e9cd 2300 	strd	r2, r3, [sp]
 8015532:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015534:	2b00      	cmp	r3, #0
 8015536:	f2c0 8150 	blt.w	80157da <_dtoa_r+0x6e2>
 801553a:	f1ba 0f0e 	cmp.w	sl, #14
 801553e:	f300 814c 	bgt.w	80157da <_dtoa_r+0x6e2>
 8015542:	4b6a      	ldr	r3, [pc, #424]	; (80156ec <_dtoa_r+0x5f4>)
 8015544:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015548:	ed93 7b00 	vldr	d7, [r3]
 801554c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801554e:	2b00      	cmp	r3, #0
 8015550:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015554:	f280 80d8 	bge.w	8015708 <_dtoa_r+0x610>
 8015558:	f1b9 0f00 	cmp.w	r9, #0
 801555c:	f300 80d4 	bgt.w	8015708 <_dtoa_r+0x610>
 8015560:	f040 825e 	bne.w	8015a20 <_dtoa_r+0x928>
 8015564:	2200      	movs	r2, #0
 8015566:	4b66      	ldr	r3, [pc, #408]	; (8015700 <_dtoa_r+0x608>)
 8015568:	ec51 0b17 	vmov	r0, r1, d7
 801556c:	f7f2 ff7c 	bl	8008468 <__aeabi_dmul>
 8015570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015574:	f7f3 f9fe 	bl	8008974 <__aeabi_dcmpge>
 8015578:	464f      	mov	r7, r9
 801557a:	464e      	mov	r6, r9
 801557c:	2800      	cmp	r0, #0
 801557e:	f040 8234 	bne.w	80159ea <_dtoa_r+0x8f2>
 8015582:	2331      	movs	r3, #49	; 0x31
 8015584:	f10b 0501 	add.w	r5, fp, #1
 8015588:	f88b 3000 	strb.w	r3, [fp]
 801558c:	f10a 0a01 	add.w	sl, sl, #1
 8015590:	e22f      	b.n	80159f2 <_dtoa_r+0x8fa>
 8015592:	07f2      	lsls	r2, r6, #31
 8015594:	d505      	bpl.n	80155a2 <_dtoa_r+0x4aa>
 8015596:	e9d7 2300 	ldrd	r2, r3, [r7]
 801559a:	f7f2 ff65 	bl	8008468 <__aeabi_dmul>
 801559e:	3501      	adds	r5, #1
 80155a0:	2301      	movs	r3, #1
 80155a2:	1076      	asrs	r6, r6, #1
 80155a4:	3708      	adds	r7, #8
 80155a6:	e772      	b.n	801548e <_dtoa_r+0x396>
 80155a8:	2502      	movs	r5, #2
 80155aa:	e774      	b.n	8015496 <_dtoa_r+0x39e>
 80155ac:	f8cd a020 	str.w	sl, [sp, #32]
 80155b0:	464f      	mov	r7, r9
 80155b2:	e791      	b.n	80154d8 <_dtoa_r+0x3e0>
 80155b4:	4b4d      	ldr	r3, [pc, #308]	; (80156ec <_dtoa_r+0x5f4>)
 80155b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80155ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80155be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d047      	beq.n	8015654 <_dtoa_r+0x55c>
 80155c4:	4602      	mov	r2, r0
 80155c6:	460b      	mov	r3, r1
 80155c8:	2000      	movs	r0, #0
 80155ca:	494e      	ldr	r1, [pc, #312]	; (8015704 <_dtoa_r+0x60c>)
 80155cc:	f7f3 f876 	bl	80086bc <__aeabi_ddiv>
 80155d0:	462a      	mov	r2, r5
 80155d2:	4633      	mov	r3, r6
 80155d4:	f7f2 fd90 	bl	80080f8 <__aeabi_dsub>
 80155d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80155dc:	465d      	mov	r5, fp
 80155de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155e2:	f7f3 f9f1 	bl	80089c8 <__aeabi_d2iz>
 80155e6:	4606      	mov	r6, r0
 80155e8:	f7f2 fed4 	bl	8008394 <__aeabi_i2d>
 80155ec:	4602      	mov	r2, r0
 80155ee:	460b      	mov	r3, r1
 80155f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155f4:	f7f2 fd80 	bl	80080f8 <__aeabi_dsub>
 80155f8:	3630      	adds	r6, #48	; 0x30
 80155fa:	f805 6b01 	strb.w	r6, [r5], #1
 80155fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015602:	e9cd 0100 	strd	r0, r1, [sp]
 8015606:	f7f3 f9a1 	bl	800894c <__aeabi_dcmplt>
 801560a:	2800      	cmp	r0, #0
 801560c:	d163      	bne.n	80156d6 <_dtoa_r+0x5de>
 801560e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015612:	2000      	movs	r0, #0
 8015614:	4937      	ldr	r1, [pc, #220]	; (80156f4 <_dtoa_r+0x5fc>)
 8015616:	f7f2 fd6f 	bl	80080f8 <__aeabi_dsub>
 801561a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801561e:	f7f3 f995 	bl	800894c <__aeabi_dcmplt>
 8015622:	2800      	cmp	r0, #0
 8015624:	f040 80b7 	bne.w	8015796 <_dtoa_r+0x69e>
 8015628:	eba5 030b 	sub.w	r3, r5, fp
 801562c:	429f      	cmp	r7, r3
 801562e:	f77f af7c 	ble.w	801552a <_dtoa_r+0x432>
 8015632:	2200      	movs	r2, #0
 8015634:	4b30      	ldr	r3, [pc, #192]	; (80156f8 <_dtoa_r+0x600>)
 8015636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801563a:	f7f2 ff15 	bl	8008468 <__aeabi_dmul>
 801563e:	2200      	movs	r2, #0
 8015640:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015644:	4b2c      	ldr	r3, [pc, #176]	; (80156f8 <_dtoa_r+0x600>)
 8015646:	e9dd 0100 	ldrd	r0, r1, [sp]
 801564a:	f7f2 ff0d 	bl	8008468 <__aeabi_dmul>
 801564e:	e9cd 0100 	strd	r0, r1, [sp]
 8015652:	e7c4      	b.n	80155de <_dtoa_r+0x4e6>
 8015654:	462a      	mov	r2, r5
 8015656:	4633      	mov	r3, r6
 8015658:	f7f2 ff06 	bl	8008468 <__aeabi_dmul>
 801565c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015660:	eb0b 0507 	add.w	r5, fp, r7
 8015664:	465e      	mov	r6, fp
 8015666:	e9dd 0100 	ldrd	r0, r1, [sp]
 801566a:	f7f3 f9ad 	bl	80089c8 <__aeabi_d2iz>
 801566e:	4607      	mov	r7, r0
 8015670:	f7f2 fe90 	bl	8008394 <__aeabi_i2d>
 8015674:	3730      	adds	r7, #48	; 0x30
 8015676:	4602      	mov	r2, r0
 8015678:	460b      	mov	r3, r1
 801567a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801567e:	f7f2 fd3b 	bl	80080f8 <__aeabi_dsub>
 8015682:	f806 7b01 	strb.w	r7, [r6], #1
 8015686:	42ae      	cmp	r6, r5
 8015688:	e9cd 0100 	strd	r0, r1, [sp]
 801568c:	f04f 0200 	mov.w	r2, #0
 8015690:	d126      	bne.n	80156e0 <_dtoa_r+0x5e8>
 8015692:	4b1c      	ldr	r3, [pc, #112]	; (8015704 <_dtoa_r+0x60c>)
 8015694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015698:	f7f2 fd30 	bl	80080fc <__adddf3>
 801569c:	4602      	mov	r2, r0
 801569e:	460b      	mov	r3, r1
 80156a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156a4:	f7f3 f970 	bl	8008988 <__aeabi_dcmpgt>
 80156a8:	2800      	cmp	r0, #0
 80156aa:	d174      	bne.n	8015796 <_dtoa_r+0x69e>
 80156ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80156b0:	2000      	movs	r0, #0
 80156b2:	4914      	ldr	r1, [pc, #80]	; (8015704 <_dtoa_r+0x60c>)
 80156b4:	f7f2 fd20 	bl	80080f8 <__aeabi_dsub>
 80156b8:	4602      	mov	r2, r0
 80156ba:	460b      	mov	r3, r1
 80156bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156c0:	f7f3 f944 	bl	800894c <__aeabi_dcmplt>
 80156c4:	2800      	cmp	r0, #0
 80156c6:	f43f af30 	beq.w	801552a <_dtoa_r+0x432>
 80156ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80156ce:	2b30      	cmp	r3, #48	; 0x30
 80156d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80156d4:	d002      	beq.n	80156dc <_dtoa_r+0x5e4>
 80156d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80156da:	e04a      	b.n	8015772 <_dtoa_r+0x67a>
 80156dc:	4615      	mov	r5, r2
 80156de:	e7f4      	b.n	80156ca <_dtoa_r+0x5d2>
 80156e0:	4b05      	ldr	r3, [pc, #20]	; (80156f8 <_dtoa_r+0x600>)
 80156e2:	f7f2 fec1 	bl	8008468 <__aeabi_dmul>
 80156e6:	e9cd 0100 	strd	r0, r1, [sp]
 80156ea:	e7bc      	b.n	8015666 <_dtoa_r+0x56e>
 80156ec:	080174e0 	.word	0x080174e0
 80156f0:	080174b8 	.word	0x080174b8
 80156f4:	3ff00000 	.word	0x3ff00000
 80156f8:	40240000 	.word	0x40240000
 80156fc:	401c0000 	.word	0x401c0000
 8015700:	40140000 	.word	0x40140000
 8015704:	3fe00000 	.word	0x3fe00000
 8015708:	e9dd 6700 	ldrd	r6, r7, [sp]
 801570c:	465d      	mov	r5, fp
 801570e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015712:	4630      	mov	r0, r6
 8015714:	4639      	mov	r1, r7
 8015716:	f7f2 ffd1 	bl	80086bc <__aeabi_ddiv>
 801571a:	f7f3 f955 	bl	80089c8 <__aeabi_d2iz>
 801571e:	4680      	mov	r8, r0
 8015720:	f7f2 fe38 	bl	8008394 <__aeabi_i2d>
 8015724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015728:	f7f2 fe9e 	bl	8008468 <__aeabi_dmul>
 801572c:	4602      	mov	r2, r0
 801572e:	460b      	mov	r3, r1
 8015730:	4630      	mov	r0, r6
 8015732:	4639      	mov	r1, r7
 8015734:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015738:	f7f2 fcde 	bl	80080f8 <__aeabi_dsub>
 801573c:	f805 6b01 	strb.w	r6, [r5], #1
 8015740:	eba5 060b 	sub.w	r6, r5, fp
 8015744:	45b1      	cmp	r9, r6
 8015746:	4602      	mov	r2, r0
 8015748:	460b      	mov	r3, r1
 801574a:	d139      	bne.n	80157c0 <_dtoa_r+0x6c8>
 801574c:	f7f2 fcd6 	bl	80080fc <__adddf3>
 8015750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015754:	4606      	mov	r6, r0
 8015756:	460f      	mov	r7, r1
 8015758:	f7f3 f916 	bl	8008988 <__aeabi_dcmpgt>
 801575c:	b9c8      	cbnz	r0, 8015792 <_dtoa_r+0x69a>
 801575e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015762:	4630      	mov	r0, r6
 8015764:	4639      	mov	r1, r7
 8015766:	f7f3 f8e7 	bl	8008938 <__aeabi_dcmpeq>
 801576a:	b110      	cbz	r0, 8015772 <_dtoa_r+0x67a>
 801576c:	f018 0f01 	tst.w	r8, #1
 8015770:	d10f      	bne.n	8015792 <_dtoa_r+0x69a>
 8015772:	9904      	ldr	r1, [sp, #16]
 8015774:	4620      	mov	r0, r4
 8015776:	f000 fe5c 	bl	8016432 <_Bfree>
 801577a:	2300      	movs	r3, #0
 801577c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801577e:	702b      	strb	r3, [r5, #0]
 8015780:	f10a 0301 	add.w	r3, sl, #1
 8015784:	6013      	str	r3, [r2, #0]
 8015786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015788:	2b00      	cmp	r3, #0
 801578a:	f000 8241 	beq.w	8015c10 <_dtoa_r+0xb18>
 801578e:	601d      	str	r5, [r3, #0]
 8015790:	e23e      	b.n	8015c10 <_dtoa_r+0xb18>
 8015792:	f8cd a020 	str.w	sl, [sp, #32]
 8015796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801579a:	2a39      	cmp	r2, #57	; 0x39
 801579c:	f105 33ff 	add.w	r3, r5, #4294967295
 80157a0:	d108      	bne.n	80157b4 <_dtoa_r+0x6bc>
 80157a2:	459b      	cmp	fp, r3
 80157a4:	d10a      	bne.n	80157bc <_dtoa_r+0x6c4>
 80157a6:	9b08      	ldr	r3, [sp, #32]
 80157a8:	3301      	adds	r3, #1
 80157aa:	9308      	str	r3, [sp, #32]
 80157ac:	2330      	movs	r3, #48	; 0x30
 80157ae:	f88b 3000 	strb.w	r3, [fp]
 80157b2:	465b      	mov	r3, fp
 80157b4:	781a      	ldrb	r2, [r3, #0]
 80157b6:	3201      	adds	r2, #1
 80157b8:	701a      	strb	r2, [r3, #0]
 80157ba:	e78c      	b.n	80156d6 <_dtoa_r+0x5de>
 80157bc:	461d      	mov	r5, r3
 80157be:	e7ea      	b.n	8015796 <_dtoa_r+0x69e>
 80157c0:	2200      	movs	r2, #0
 80157c2:	4b9b      	ldr	r3, [pc, #620]	; (8015a30 <_dtoa_r+0x938>)
 80157c4:	f7f2 fe50 	bl	8008468 <__aeabi_dmul>
 80157c8:	2200      	movs	r2, #0
 80157ca:	2300      	movs	r3, #0
 80157cc:	4606      	mov	r6, r0
 80157ce:	460f      	mov	r7, r1
 80157d0:	f7f3 f8b2 	bl	8008938 <__aeabi_dcmpeq>
 80157d4:	2800      	cmp	r0, #0
 80157d6:	d09a      	beq.n	801570e <_dtoa_r+0x616>
 80157d8:	e7cb      	b.n	8015772 <_dtoa_r+0x67a>
 80157da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157dc:	2a00      	cmp	r2, #0
 80157de:	f000 808b 	beq.w	80158f8 <_dtoa_r+0x800>
 80157e2:	9a06      	ldr	r2, [sp, #24]
 80157e4:	2a01      	cmp	r2, #1
 80157e6:	dc6e      	bgt.n	80158c6 <_dtoa_r+0x7ce>
 80157e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80157ea:	2a00      	cmp	r2, #0
 80157ec:	d067      	beq.n	80158be <_dtoa_r+0x7c6>
 80157ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80157f2:	9f07      	ldr	r7, [sp, #28]
 80157f4:	9d05      	ldr	r5, [sp, #20]
 80157f6:	9a05      	ldr	r2, [sp, #20]
 80157f8:	2101      	movs	r1, #1
 80157fa:	441a      	add	r2, r3
 80157fc:	4620      	mov	r0, r4
 80157fe:	9205      	str	r2, [sp, #20]
 8015800:	4498      	add	r8, r3
 8015802:	f000 fef4 	bl	80165ee <__i2b>
 8015806:	4606      	mov	r6, r0
 8015808:	2d00      	cmp	r5, #0
 801580a:	dd0c      	ble.n	8015826 <_dtoa_r+0x72e>
 801580c:	f1b8 0f00 	cmp.w	r8, #0
 8015810:	dd09      	ble.n	8015826 <_dtoa_r+0x72e>
 8015812:	4545      	cmp	r5, r8
 8015814:	9a05      	ldr	r2, [sp, #20]
 8015816:	462b      	mov	r3, r5
 8015818:	bfa8      	it	ge
 801581a:	4643      	movge	r3, r8
 801581c:	1ad2      	subs	r2, r2, r3
 801581e:	9205      	str	r2, [sp, #20]
 8015820:	1aed      	subs	r5, r5, r3
 8015822:	eba8 0803 	sub.w	r8, r8, r3
 8015826:	9b07      	ldr	r3, [sp, #28]
 8015828:	b1eb      	cbz	r3, 8015866 <_dtoa_r+0x76e>
 801582a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801582c:	2b00      	cmp	r3, #0
 801582e:	d067      	beq.n	8015900 <_dtoa_r+0x808>
 8015830:	b18f      	cbz	r7, 8015856 <_dtoa_r+0x75e>
 8015832:	4631      	mov	r1, r6
 8015834:	463a      	mov	r2, r7
 8015836:	4620      	mov	r0, r4
 8015838:	f000 ff78 	bl	801672c <__pow5mult>
 801583c:	9a04      	ldr	r2, [sp, #16]
 801583e:	4601      	mov	r1, r0
 8015840:	4606      	mov	r6, r0
 8015842:	4620      	mov	r0, r4
 8015844:	f000 fedc 	bl	8016600 <__multiply>
 8015848:	9904      	ldr	r1, [sp, #16]
 801584a:	9008      	str	r0, [sp, #32]
 801584c:	4620      	mov	r0, r4
 801584e:	f000 fdf0 	bl	8016432 <_Bfree>
 8015852:	9b08      	ldr	r3, [sp, #32]
 8015854:	9304      	str	r3, [sp, #16]
 8015856:	9b07      	ldr	r3, [sp, #28]
 8015858:	1bda      	subs	r2, r3, r7
 801585a:	d004      	beq.n	8015866 <_dtoa_r+0x76e>
 801585c:	9904      	ldr	r1, [sp, #16]
 801585e:	4620      	mov	r0, r4
 8015860:	f000 ff64 	bl	801672c <__pow5mult>
 8015864:	9004      	str	r0, [sp, #16]
 8015866:	2101      	movs	r1, #1
 8015868:	4620      	mov	r0, r4
 801586a:	f000 fec0 	bl	80165ee <__i2b>
 801586e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015870:	4607      	mov	r7, r0
 8015872:	2b00      	cmp	r3, #0
 8015874:	f000 81d0 	beq.w	8015c18 <_dtoa_r+0xb20>
 8015878:	461a      	mov	r2, r3
 801587a:	4601      	mov	r1, r0
 801587c:	4620      	mov	r0, r4
 801587e:	f000 ff55 	bl	801672c <__pow5mult>
 8015882:	9b06      	ldr	r3, [sp, #24]
 8015884:	2b01      	cmp	r3, #1
 8015886:	4607      	mov	r7, r0
 8015888:	dc40      	bgt.n	801590c <_dtoa_r+0x814>
 801588a:	9b00      	ldr	r3, [sp, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d139      	bne.n	8015904 <_dtoa_r+0x80c>
 8015890:	9b01      	ldr	r3, [sp, #4]
 8015892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015896:	2b00      	cmp	r3, #0
 8015898:	d136      	bne.n	8015908 <_dtoa_r+0x810>
 801589a:	9b01      	ldr	r3, [sp, #4]
 801589c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80158a0:	0d1b      	lsrs	r3, r3, #20
 80158a2:	051b      	lsls	r3, r3, #20
 80158a4:	b12b      	cbz	r3, 80158b2 <_dtoa_r+0x7ba>
 80158a6:	9b05      	ldr	r3, [sp, #20]
 80158a8:	3301      	adds	r3, #1
 80158aa:	9305      	str	r3, [sp, #20]
 80158ac:	f108 0801 	add.w	r8, r8, #1
 80158b0:	2301      	movs	r3, #1
 80158b2:	9307      	str	r3, [sp, #28]
 80158b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d12a      	bne.n	8015910 <_dtoa_r+0x818>
 80158ba:	2001      	movs	r0, #1
 80158bc:	e030      	b.n	8015920 <_dtoa_r+0x828>
 80158be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80158c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80158c4:	e795      	b.n	80157f2 <_dtoa_r+0x6fa>
 80158c6:	9b07      	ldr	r3, [sp, #28]
 80158c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80158cc:	42bb      	cmp	r3, r7
 80158ce:	bfbf      	itttt	lt
 80158d0:	9b07      	ldrlt	r3, [sp, #28]
 80158d2:	9707      	strlt	r7, [sp, #28]
 80158d4:	1afa      	sublt	r2, r7, r3
 80158d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80158d8:	bfbb      	ittet	lt
 80158da:	189b      	addlt	r3, r3, r2
 80158dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80158de:	1bdf      	subge	r7, r3, r7
 80158e0:	2700      	movlt	r7, #0
 80158e2:	f1b9 0f00 	cmp.w	r9, #0
 80158e6:	bfb5      	itete	lt
 80158e8:	9b05      	ldrlt	r3, [sp, #20]
 80158ea:	9d05      	ldrge	r5, [sp, #20]
 80158ec:	eba3 0509 	sublt.w	r5, r3, r9
 80158f0:	464b      	movge	r3, r9
 80158f2:	bfb8      	it	lt
 80158f4:	2300      	movlt	r3, #0
 80158f6:	e77e      	b.n	80157f6 <_dtoa_r+0x6fe>
 80158f8:	9f07      	ldr	r7, [sp, #28]
 80158fa:	9d05      	ldr	r5, [sp, #20]
 80158fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80158fe:	e783      	b.n	8015808 <_dtoa_r+0x710>
 8015900:	9a07      	ldr	r2, [sp, #28]
 8015902:	e7ab      	b.n	801585c <_dtoa_r+0x764>
 8015904:	2300      	movs	r3, #0
 8015906:	e7d4      	b.n	80158b2 <_dtoa_r+0x7ba>
 8015908:	9b00      	ldr	r3, [sp, #0]
 801590a:	e7d2      	b.n	80158b2 <_dtoa_r+0x7ba>
 801590c:	2300      	movs	r3, #0
 801590e:	9307      	str	r3, [sp, #28]
 8015910:	693b      	ldr	r3, [r7, #16]
 8015912:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015916:	6918      	ldr	r0, [r3, #16]
 8015918:	f000 fe1b 	bl	8016552 <__hi0bits>
 801591c:	f1c0 0020 	rsb	r0, r0, #32
 8015920:	4440      	add	r0, r8
 8015922:	f010 001f 	ands.w	r0, r0, #31
 8015926:	d047      	beq.n	80159b8 <_dtoa_r+0x8c0>
 8015928:	f1c0 0320 	rsb	r3, r0, #32
 801592c:	2b04      	cmp	r3, #4
 801592e:	dd3b      	ble.n	80159a8 <_dtoa_r+0x8b0>
 8015930:	9b05      	ldr	r3, [sp, #20]
 8015932:	f1c0 001c 	rsb	r0, r0, #28
 8015936:	4403      	add	r3, r0
 8015938:	9305      	str	r3, [sp, #20]
 801593a:	4405      	add	r5, r0
 801593c:	4480      	add	r8, r0
 801593e:	9b05      	ldr	r3, [sp, #20]
 8015940:	2b00      	cmp	r3, #0
 8015942:	dd05      	ble.n	8015950 <_dtoa_r+0x858>
 8015944:	461a      	mov	r2, r3
 8015946:	9904      	ldr	r1, [sp, #16]
 8015948:	4620      	mov	r0, r4
 801594a:	f000 ff3d 	bl	80167c8 <__lshift>
 801594e:	9004      	str	r0, [sp, #16]
 8015950:	f1b8 0f00 	cmp.w	r8, #0
 8015954:	dd05      	ble.n	8015962 <_dtoa_r+0x86a>
 8015956:	4639      	mov	r1, r7
 8015958:	4642      	mov	r2, r8
 801595a:	4620      	mov	r0, r4
 801595c:	f000 ff34 	bl	80167c8 <__lshift>
 8015960:	4607      	mov	r7, r0
 8015962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015964:	b353      	cbz	r3, 80159bc <_dtoa_r+0x8c4>
 8015966:	4639      	mov	r1, r7
 8015968:	9804      	ldr	r0, [sp, #16]
 801596a:	f000 ff81 	bl	8016870 <__mcmp>
 801596e:	2800      	cmp	r0, #0
 8015970:	da24      	bge.n	80159bc <_dtoa_r+0x8c4>
 8015972:	2300      	movs	r3, #0
 8015974:	220a      	movs	r2, #10
 8015976:	9904      	ldr	r1, [sp, #16]
 8015978:	4620      	mov	r0, r4
 801597a:	f000 fd71 	bl	8016460 <__multadd>
 801597e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015980:	9004      	str	r0, [sp, #16]
 8015982:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015986:	2b00      	cmp	r3, #0
 8015988:	f000 814d 	beq.w	8015c26 <_dtoa_r+0xb2e>
 801598c:	2300      	movs	r3, #0
 801598e:	4631      	mov	r1, r6
 8015990:	220a      	movs	r2, #10
 8015992:	4620      	mov	r0, r4
 8015994:	f000 fd64 	bl	8016460 <__multadd>
 8015998:	9b02      	ldr	r3, [sp, #8]
 801599a:	2b00      	cmp	r3, #0
 801599c:	4606      	mov	r6, r0
 801599e:	dc4f      	bgt.n	8015a40 <_dtoa_r+0x948>
 80159a0:	9b06      	ldr	r3, [sp, #24]
 80159a2:	2b02      	cmp	r3, #2
 80159a4:	dd4c      	ble.n	8015a40 <_dtoa_r+0x948>
 80159a6:	e011      	b.n	80159cc <_dtoa_r+0x8d4>
 80159a8:	d0c9      	beq.n	801593e <_dtoa_r+0x846>
 80159aa:	9a05      	ldr	r2, [sp, #20]
 80159ac:	331c      	adds	r3, #28
 80159ae:	441a      	add	r2, r3
 80159b0:	9205      	str	r2, [sp, #20]
 80159b2:	441d      	add	r5, r3
 80159b4:	4498      	add	r8, r3
 80159b6:	e7c2      	b.n	801593e <_dtoa_r+0x846>
 80159b8:	4603      	mov	r3, r0
 80159ba:	e7f6      	b.n	80159aa <_dtoa_r+0x8b2>
 80159bc:	f1b9 0f00 	cmp.w	r9, #0
 80159c0:	dc38      	bgt.n	8015a34 <_dtoa_r+0x93c>
 80159c2:	9b06      	ldr	r3, [sp, #24]
 80159c4:	2b02      	cmp	r3, #2
 80159c6:	dd35      	ble.n	8015a34 <_dtoa_r+0x93c>
 80159c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80159cc:	9b02      	ldr	r3, [sp, #8]
 80159ce:	b963      	cbnz	r3, 80159ea <_dtoa_r+0x8f2>
 80159d0:	4639      	mov	r1, r7
 80159d2:	2205      	movs	r2, #5
 80159d4:	4620      	mov	r0, r4
 80159d6:	f000 fd43 	bl	8016460 <__multadd>
 80159da:	4601      	mov	r1, r0
 80159dc:	4607      	mov	r7, r0
 80159de:	9804      	ldr	r0, [sp, #16]
 80159e0:	f000 ff46 	bl	8016870 <__mcmp>
 80159e4:	2800      	cmp	r0, #0
 80159e6:	f73f adcc 	bgt.w	8015582 <_dtoa_r+0x48a>
 80159ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159ec:	465d      	mov	r5, fp
 80159ee:	ea6f 0a03 	mvn.w	sl, r3
 80159f2:	f04f 0900 	mov.w	r9, #0
 80159f6:	4639      	mov	r1, r7
 80159f8:	4620      	mov	r0, r4
 80159fa:	f000 fd1a 	bl	8016432 <_Bfree>
 80159fe:	2e00      	cmp	r6, #0
 8015a00:	f43f aeb7 	beq.w	8015772 <_dtoa_r+0x67a>
 8015a04:	f1b9 0f00 	cmp.w	r9, #0
 8015a08:	d005      	beq.n	8015a16 <_dtoa_r+0x91e>
 8015a0a:	45b1      	cmp	r9, r6
 8015a0c:	d003      	beq.n	8015a16 <_dtoa_r+0x91e>
 8015a0e:	4649      	mov	r1, r9
 8015a10:	4620      	mov	r0, r4
 8015a12:	f000 fd0e 	bl	8016432 <_Bfree>
 8015a16:	4631      	mov	r1, r6
 8015a18:	4620      	mov	r0, r4
 8015a1a:	f000 fd0a 	bl	8016432 <_Bfree>
 8015a1e:	e6a8      	b.n	8015772 <_dtoa_r+0x67a>
 8015a20:	2700      	movs	r7, #0
 8015a22:	463e      	mov	r6, r7
 8015a24:	e7e1      	b.n	80159ea <_dtoa_r+0x8f2>
 8015a26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015a2a:	463e      	mov	r6, r7
 8015a2c:	e5a9      	b.n	8015582 <_dtoa_r+0x48a>
 8015a2e:	bf00      	nop
 8015a30:	40240000 	.word	0x40240000
 8015a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a36:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	f000 80fa 	beq.w	8015c34 <_dtoa_r+0xb3c>
 8015a40:	2d00      	cmp	r5, #0
 8015a42:	dd05      	ble.n	8015a50 <_dtoa_r+0x958>
 8015a44:	4631      	mov	r1, r6
 8015a46:	462a      	mov	r2, r5
 8015a48:	4620      	mov	r0, r4
 8015a4a:	f000 febd 	bl	80167c8 <__lshift>
 8015a4e:	4606      	mov	r6, r0
 8015a50:	9b07      	ldr	r3, [sp, #28]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d04c      	beq.n	8015af0 <_dtoa_r+0x9f8>
 8015a56:	6871      	ldr	r1, [r6, #4]
 8015a58:	4620      	mov	r0, r4
 8015a5a:	f000 fcb6 	bl	80163ca <_Balloc>
 8015a5e:	6932      	ldr	r2, [r6, #16]
 8015a60:	3202      	adds	r2, #2
 8015a62:	4605      	mov	r5, r0
 8015a64:	0092      	lsls	r2, r2, #2
 8015a66:	f106 010c 	add.w	r1, r6, #12
 8015a6a:	300c      	adds	r0, #12
 8015a6c:	f7fc fc44 	bl	80122f8 <memcpy>
 8015a70:	2201      	movs	r2, #1
 8015a72:	4629      	mov	r1, r5
 8015a74:	4620      	mov	r0, r4
 8015a76:	f000 fea7 	bl	80167c8 <__lshift>
 8015a7a:	9b00      	ldr	r3, [sp, #0]
 8015a7c:	f8cd b014 	str.w	fp, [sp, #20]
 8015a80:	f003 0301 	and.w	r3, r3, #1
 8015a84:	46b1      	mov	r9, r6
 8015a86:	9307      	str	r3, [sp, #28]
 8015a88:	4606      	mov	r6, r0
 8015a8a:	4639      	mov	r1, r7
 8015a8c:	9804      	ldr	r0, [sp, #16]
 8015a8e:	f7ff faa7 	bl	8014fe0 <quorem>
 8015a92:	4649      	mov	r1, r9
 8015a94:	4605      	mov	r5, r0
 8015a96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015a9a:	9804      	ldr	r0, [sp, #16]
 8015a9c:	f000 fee8 	bl	8016870 <__mcmp>
 8015aa0:	4632      	mov	r2, r6
 8015aa2:	9000      	str	r0, [sp, #0]
 8015aa4:	4639      	mov	r1, r7
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	f000 fefc 	bl	80168a4 <__mdiff>
 8015aac:	68c3      	ldr	r3, [r0, #12]
 8015aae:	4602      	mov	r2, r0
 8015ab0:	bb03      	cbnz	r3, 8015af4 <_dtoa_r+0x9fc>
 8015ab2:	4601      	mov	r1, r0
 8015ab4:	9008      	str	r0, [sp, #32]
 8015ab6:	9804      	ldr	r0, [sp, #16]
 8015ab8:	f000 feda 	bl	8016870 <__mcmp>
 8015abc:	9a08      	ldr	r2, [sp, #32]
 8015abe:	4603      	mov	r3, r0
 8015ac0:	4611      	mov	r1, r2
 8015ac2:	4620      	mov	r0, r4
 8015ac4:	9308      	str	r3, [sp, #32]
 8015ac6:	f000 fcb4 	bl	8016432 <_Bfree>
 8015aca:	9b08      	ldr	r3, [sp, #32]
 8015acc:	b9a3      	cbnz	r3, 8015af8 <_dtoa_r+0xa00>
 8015ace:	9a06      	ldr	r2, [sp, #24]
 8015ad0:	b992      	cbnz	r2, 8015af8 <_dtoa_r+0xa00>
 8015ad2:	9a07      	ldr	r2, [sp, #28]
 8015ad4:	b982      	cbnz	r2, 8015af8 <_dtoa_r+0xa00>
 8015ad6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015ada:	d029      	beq.n	8015b30 <_dtoa_r+0xa38>
 8015adc:	9b00      	ldr	r3, [sp, #0]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	dd01      	ble.n	8015ae6 <_dtoa_r+0x9ee>
 8015ae2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015ae6:	9b05      	ldr	r3, [sp, #20]
 8015ae8:	1c5d      	adds	r5, r3, #1
 8015aea:	f883 8000 	strb.w	r8, [r3]
 8015aee:	e782      	b.n	80159f6 <_dtoa_r+0x8fe>
 8015af0:	4630      	mov	r0, r6
 8015af2:	e7c2      	b.n	8015a7a <_dtoa_r+0x982>
 8015af4:	2301      	movs	r3, #1
 8015af6:	e7e3      	b.n	8015ac0 <_dtoa_r+0x9c8>
 8015af8:	9a00      	ldr	r2, [sp, #0]
 8015afa:	2a00      	cmp	r2, #0
 8015afc:	db04      	blt.n	8015b08 <_dtoa_r+0xa10>
 8015afe:	d125      	bne.n	8015b4c <_dtoa_r+0xa54>
 8015b00:	9a06      	ldr	r2, [sp, #24]
 8015b02:	bb1a      	cbnz	r2, 8015b4c <_dtoa_r+0xa54>
 8015b04:	9a07      	ldr	r2, [sp, #28]
 8015b06:	bb0a      	cbnz	r2, 8015b4c <_dtoa_r+0xa54>
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	ddec      	ble.n	8015ae6 <_dtoa_r+0x9ee>
 8015b0c:	2201      	movs	r2, #1
 8015b0e:	9904      	ldr	r1, [sp, #16]
 8015b10:	4620      	mov	r0, r4
 8015b12:	f000 fe59 	bl	80167c8 <__lshift>
 8015b16:	4639      	mov	r1, r7
 8015b18:	9004      	str	r0, [sp, #16]
 8015b1a:	f000 fea9 	bl	8016870 <__mcmp>
 8015b1e:	2800      	cmp	r0, #0
 8015b20:	dc03      	bgt.n	8015b2a <_dtoa_r+0xa32>
 8015b22:	d1e0      	bne.n	8015ae6 <_dtoa_r+0x9ee>
 8015b24:	f018 0f01 	tst.w	r8, #1
 8015b28:	d0dd      	beq.n	8015ae6 <_dtoa_r+0x9ee>
 8015b2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015b2e:	d1d8      	bne.n	8015ae2 <_dtoa_r+0x9ea>
 8015b30:	9b05      	ldr	r3, [sp, #20]
 8015b32:	9a05      	ldr	r2, [sp, #20]
 8015b34:	1c5d      	adds	r5, r3, #1
 8015b36:	2339      	movs	r3, #57	; 0x39
 8015b38:	7013      	strb	r3, [r2, #0]
 8015b3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015b3e:	2b39      	cmp	r3, #57	; 0x39
 8015b40:	f105 32ff 	add.w	r2, r5, #4294967295
 8015b44:	d04f      	beq.n	8015be6 <_dtoa_r+0xaee>
 8015b46:	3301      	adds	r3, #1
 8015b48:	7013      	strb	r3, [r2, #0]
 8015b4a:	e754      	b.n	80159f6 <_dtoa_r+0x8fe>
 8015b4c:	9a05      	ldr	r2, [sp, #20]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	f102 0501 	add.w	r5, r2, #1
 8015b54:	dd06      	ble.n	8015b64 <_dtoa_r+0xa6c>
 8015b56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015b5a:	d0e9      	beq.n	8015b30 <_dtoa_r+0xa38>
 8015b5c:	f108 0801 	add.w	r8, r8, #1
 8015b60:	9b05      	ldr	r3, [sp, #20]
 8015b62:	e7c2      	b.n	8015aea <_dtoa_r+0x9f2>
 8015b64:	9a02      	ldr	r2, [sp, #8]
 8015b66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015b6a:	eba5 030b 	sub.w	r3, r5, fp
 8015b6e:	4293      	cmp	r3, r2
 8015b70:	d021      	beq.n	8015bb6 <_dtoa_r+0xabe>
 8015b72:	2300      	movs	r3, #0
 8015b74:	220a      	movs	r2, #10
 8015b76:	9904      	ldr	r1, [sp, #16]
 8015b78:	4620      	mov	r0, r4
 8015b7a:	f000 fc71 	bl	8016460 <__multadd>
 8015b7e:	45b1      	cmp	r9, r6
 8015b80:	9004      	str	r0, [sp, #16]
 8015b82:	f04f 0300 	mov.w	r3, #0
 8015b86:	f04f 020a 	mov.w	r2, #10
 8015b8a:	4649      	mov	r1, r9
 8015b8c:	4620      	mov	r0, r4
 8015b8e:	d105      	bne.n	8015b9c <_dtoa_r+0xaa4>
 8015b90:	f000 fc66 	bl	8016460 <__multadd>
 8015b94:	4681      	mov	r9, r0
 8015b96:	4606      	mov	r6, r0
 8015b98:	9505      	str	r5, [sp, #20]
 8015b9a:	e776      	b.n	8015a8a <_dtoa_r+0x992>
 8015b9c:	f000 fc60 	bl	8016460 <__multadd>
 8015ba0:	4631      	mov	r1, r6
 8015ba2:	4681      	mov	r9, r0
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	220a      	movs	r2, #10
 8015ba8:	4620      	mov	r0, r4
 8015baa:	f000 fc59 	bl	8016460 <__multadd>
 8015bae:	4606      	mov	r6, r0
 8015bb0:	e7f2      	b.n	8015b98 <_dtoa_r+0xaa0>
 8015bb2:	f04f 0900 	mov.w	r9, #0
 8015bb6:	2201      	movs	r2, #1
 8015bb8:	9904      	ldr	r1, [sp, #16]
 8015bba:	4620      	mov	r0, r4
 8015bbc:	f000 fe04 	bl	80167c8 <__lshift>
 8015bc0:	4639      	mov	r1, r7
 8015bc2:	9004      	str	r0, [sp, #16]
 8015bc4:	f000 fe54 	bl	8016870 <__mcmp>
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	dcb6      	bgt.n	8015b3a <_dtoa_r+0xa42>
 8015bcc:	d102      	bne.n	8015bd4 <_dtoa_r+0xadc>
 8015bce:	f018 0f01 	tst.w	r8, #1
 8015bd2:	d1b2      	bne.n	8015b3a <_dtoa_r+0xa42>
 8015bd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015bd8:	2b30      	cmp	r3, #48	; 0x30
 8015bda:	f105 32ff 	add.w	r2, r5, #4294967295
 8015bde:	f47f af0a 	bne.w	80159f6 <_dtoa_r+0x8fe>
 8015be2:	4615      	mov	r5, r2
 8015be4:	e7f6      	b.n	8015bd4 <_dtoa_r+0xadc>
 8015be6:	4593      	cmp	fp, r2
 8015be8:	d105      	bne.n	8015bf6 <_dtoa_r+0xafe>
 8015bea:	2331      	movs	r3, #49	; 0x31
 8015bec:	f10a 0a01 	add.w	sl, sl, #1
 8015bf0:	f88b 3000 	strb.w	r3, [fp]
 8015bf4:	e6ff      	b.n	80159f6 <_dtoa_r+0x8fe>
 8015bf6:	4615      	mov	r5, r2
 8015bf8:	e79f      	b.n	8015b3a <_dtoa_r+0xa42>
 8015bfa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015c60 <_dtoa_r+0xb68>
 8015bfe:	e007      	b.n	8015c10 <_dtoa_r+0xb18>
 8015c00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015c64 <_dtoa_r+0xb6c>
 8015c06:	b11b      	cbz	r3, 8015c10 <_dtoa_r+0xb18>
 8015c08:	f10b 0308 	add.w	r3, fp, #8
 8015c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c0e:	6013      	str	r3, [r2, #0]
 8015c10:	4658      	mov	r0, fp
 8015c12:	b017      	add	sp, #92	; 0x5c
 8015c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c18:	9b06      	ldr	r3, [sp, #24]
 8015c1a:	2b01      	cmp	r3, #1
 8015c1c:	f77f ae35 	ble.w	801588a <_dtoa_r+0x792>
 8015c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c22:	9307      	str	r3, [sp, #28]
 8015c24:	e649      	b.n	80158ba <_dtoa_r+0x7c2>
 8015c26:	9b02      	ldr	r3, [sp, #8]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	dc03      	bgt.n	8015c34 <_dtoa_r+0xb3c>
 8015c2c:	9b06      	ldr	r3, [sp, #24]
 8015c2e:	2b02      	cmp	r3, #2
 8015c30:	f73f aecc 	bgt.w	80159cc <_dtoa_r+0x8d4>
 8015c34:	465d      	mov	r5, fp
 8015c36:	4639      	mov	r1, r7
 8015c38:	9804      	ldr	r0, [sp, #16]
 8015c3a:	f7ff f9d1 	bl	8014fe0 <quorem>
 8015c3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015c42:	f805 8b01 	strb.w	r8, [r5], #1
 8015c46:	9a02      	ldr	r2, [sp, #8]
 8015c48:	eba5 030b 	sub.w	r3, r5, fp
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	ddb0      	ble.n	8015bb2 <_dtoa_r+0xaba>
 8015c50:	2300      	movs	r3, #0
 8015c52:	220a      	movs	r2, #10
 8015c54:	9904      	ldr	r1, [sp, #16]
 8015c56:	4620      	mov	r0, r4
 8015c58:	f000 fc02 	bl	8016460 <__multadd>
 8015c5c:	9004      	str	r0, [sp, #16]
 8015c5e:	e7ea      	b.n	8015c36 <_dtoa_r+0xb3e>
 8015c60:	0801744a 	.word	0x0801744a
 8015c64:	080174a0 	.word	0x080174a0

08015c68 <_fstat_r>:
 8015c68:	b538      	push	{r3, r4, r5, lr}
 8015c6a:	4c07      	ldr	r4, [pc, #28]	; (8015c88 <_fstat_r+0x20>)
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	4605      	mov	r5, r0
 8015c70:	4608      	mov	r0, r1
 8015c72:	4611      	mov	r1, r2
 8015c74:	6023      	str	r3, [r4, #0]
 8015c76:	f7f8 f887 	bl	800dd88 <_fstat>
 8015c7a:	1c43      	adds	r3, r0, #1
 8015c7c:	d102      	bne.n	8015c84 <_fstat_r+0x1c>
 8015c7e:	6823      	ldr	r3, [r4, #0]
 8015c80:	b103      	cbz	r3, 8015c84 <_fstat_r+0x1c>
 8015c82:	602b      	str	r3, [r5, #0]
 8015c84:	bd38      	pop	{r3, r4, r5, pc}
 8015c86:	bf00      	nop
 8015c88:	20004e4c 	.word	0x20004e4c

08015c8c <rshift>:
 8015c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c8e:	6906      	ldr	r6, [r0, #16]
 8015c90:	114b      	asrs	r3, r1, #5
 8015c92:	429e      	cmp	r6, r3
 8015c94:	f100 0414 	add.w	r4, r0, #20
 8015c98:	dd30      	ble.n	8015cfc <rshift+0x70>
 8015c9a:	f011 011f 	ands.w	r1, r1, #31
 8015c9e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015ca2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015ca6:	d108      	bne.n	8015cba <rshift+0x2e>
 8015ca8:	4621      	mov	r1, r4
 8015caa:	42b2      	cmp	r2, r6
 8015cac:	460b      	mov	r3, r1
 8015cae:	d211      	bcs.n	8015cd4 <rshift+0x48>
 8015cb0:	f852 3b04 	ldr.w	r3, [r2], #4
 8015cb4:	f841 3b04 	str.w	r3, [r1], #4
 8015cb8:	e7f7      	b.n	8015caa <rshift+0x1e>
 8015cba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015cbe:	f1c1 0c20 	rsb	ip, r1, #32
 8015cc2:	40cd      	lsrs	r5, r1
 8015cc4:	3204      	adds	r2, #4
 8015cc6:	4623      	mov	r3, r4
 8015cc8:	42b2      	cmp	r2, r6
 8015cca:	4617      	mov	r7, r2
 8015ccc:	d30c      	bcc.n	8015ce8 <rshift+0x5c>
 8015cce:	601d      	str	r5, [r3, #0]
 8015cd0:	b105      	cbz	r5, 8015cd4 <rshift+0x48>
 8015cd2:	3304      	adds	r3, #4
 8015cd4:	1b1a      	subs	r2, r3, r4
 8015cd6:	42a3      	cmp	r3, r4
 8015cd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015cdc:	bf08      	it	eq
 8015cde:	2300      	moveq	r3, #0
 8015ce0:	6102      	str	r2, [r0, #16]
 8015ce2:	bf08      	it	eq
 8015ce4:	6143      	streq	r3, [r0, #20]
 8015ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ce8:	683f      	ldr	r7, [r7, #0]
 8015cea:	fa07 f70c 	lsl.w	r7, r7, ip
 8015cee:	433d      	orrs	r5, r7
 8015cf0:	f843 5b04 	str.w	r5, [r3], #4
 8015cf4:	f852 5b04 	ldr.w	r5, [r2], #4
 8015cf8:	40cd      	lsrs	r5, r1
 8015cfa:	e7e5      	b.n	8015cc8 <rshift+0x3c>
 8015cfc:	4623      	mov	r3, r4
 8015cfe:	e7e9      	b.n	8015cd4 <rshift+0x48>

08015d00 <__hexdig_fun>:
 8015d00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015d04:	2b09      	cmp	r3, #9
 8015d06:	d802      	bhi.n	8015d0e <__hexdig_fun+0xe>
 8015d08:	3820      	subs	r0, #32
 8015d0a:	b2c0      	uxtb	r0, r0
 8015d0c:	4770      	bx	lr
 8015d0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015d12:	2b05      	cmp	r3, #5
 8015d14:	d801      	bhi.n	8015d1a <__hexdig_fun+0x1a>
 8015d16:	3847      	subs	r0, #71	; 0x47
 8015d18:	e7f7      	b.n	8015d0a <__hexdig_fun+0xa>
 8015d1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015d1e:	2b05      	cmp	r3, #5
 8015d20:	d801      	bhi.n	8015d26 <__hexdig_fun+0x26>
 8015d22:	3827      	subs	r0, #39	; 0x27
 8015d24:	e7f1      	b.n	8015d0a <__hexdig_fun+0xa>
 8015d26:	2000      	movs	r0, #0
 8015d28:	4770      	bx	lr

08015d2a <__gethex>:
 8015d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d2e:	b08b      	sub	sp, #44	; 0x2c
 8015d30:	468a      	mov	sl, r1
 8015d32:	9002      	str	r0, [sp, #8]
 8015d34:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015d36:	9306      	str	r3, [sp, #24]
 8015d38:	4690      	mov	r8, r2
 8015d3a:	f000 faef 	bl	801631c <__localeconv_l>
 8015d3e:	6803      	ldr	r3, [r0, #0]
 8015d40:	9303      	str	r3, [sp, #12]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7f2 f97c 	bl	8008040 <strlen>
 8015d48:	9b03      	ldr	r3, [sp, #12]
 8015d4a:	9001      	str	r0, [sp, #4]
 8015d4c:	4403      	add	r3, r0
 8015d4e:	f04f 0b00 	mov.w	fp, #0
 8015d52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015d56:	9307      	str	r3, [sp, #28]
 8015d58:	f8da 3000 	ldr.w	r3, [sl]
 8015d5c:	3302      	adds	r3, #2
 8015d5e:	461f      	mov	r7, r3
 8015d60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015d64:	2830      	cmp	r0, #48	; 0x30
 8015d66:	d06c      	beq.n	8015e42 <__gethex+0x118>
 8015d68:	f7ff ffca 	bl	8015d00 <__hexdig_fun>
 8015d6c:	4604      	mov	r4, r0
 8015d6e:	2800      	cmp	r0, #0
 8015d70:	d16a      	bne.n	8015e48 <__gethex+0x11e>
 8015d72:	9a01      	ldr	r2, [sp, #4]
 8015d74:	9903      	ldr	r1, [sp, #12]
 8015d76:	4638      	mov	r0, r7
 8015d78:	f001 f8f4 	bl	8016f64 <strncmp>
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	d166      	bne.n	8015e4e <__gethex+0x124>
 8015d80:	9b01      	ldr	r3, [sp, #4]
 8015d82:	5cf8      	ldrb	r0, [r7, r3]
 8015d84:	18fe      	adds	r6, r7, r3
 8015d86:	f7ff ffbb 	bl	8015d00 <__hexdig_fun>
 8015d8a:	2800      	cmp	r0, #0
 8015d8c:	d062      	beq.n	8015e54 <__gethex+0x12a>
 8015d8e:	4633      	mov	r3, r6
 8015d90:	7818      	ldrb	r0, [r3, #0]
 8015d92:	2830      	cmp	r0, #48	; 0x30
 8015d94:	461f      	mov	r7, r3
 8015d96:	f103 0301 	add.w	r3, r3, #1
 8015d9a:	d0f9      	beq.n	8015d90 <__gethex+0x66>
 8015d9c:	f7ff ffb0 	bl	8015d00 <__hexdig_fun>
 8015da0:	fab0 f580 	clz	r5, r0
 8015da4:	096d      	lsrs	r5, r5, #5
 8015da6:	4634      	mov	r4, r6
 8015da8:	f04f 0b01 	mov.w	fp, #1
 8015dac:	463a      	mov	r2, r7
 8015dae:	4616      	mov	r6, r2
 8015db0:	3201      	adds	r2, #1
 8015db2:	7830      	ldrb	r0, [r6, #0]
 8015db4:	f7ff ffa4 	bl	8015d00 <__hexdig_fun>
 8015db8:	2800      	cmp	r0, #0
 8015dba:	d1f8      	bne.n	8015dae <__gethex+0x84>
 8015dbc:	9a01      	ldr	r2, [sp, #4]
 8015dbe:	9903      	ldr	r1, [sp, #12]
 8015dc0:	4630      	mov	r0, r6
 8015dc2:	f001 f8cf 	bl	8016f64 <strncmp>
 8015dc6:	b950      	cbnz	r0, 8015dde <__gethex+0xb4>
 8015dc8:	b954      	cbnz	r4, 8015de0 <__gethex+0xb6>
 8015dca:	9b01      	ldr	r3, [sp, #4]
 8015dcc:	18f4      	adds	r4, r6, r3
 8015dce:	4622      	mov	r2, r4
 8015dd0:	4616      	mov	r6, r2
 8015dd2:	3201      	adds	r2, #1
 8015dd4:	7830      	ldrb	r0, [r6, #0]
 8015dd6:	f7ff ff93 	bl	8015d00 <__hexdig_fun>
 8015dda:	2800      	cmp	r0, #0
 8015ddc:	d1f8      	bne.n	8015dd0 <__gethex+0xa6>
 8015dde:	b10c      	cbz	r4, 8015de4 <__gethex+0xba>
 8015de0:	1ba4      	subs	r4, r4, r6
 8015de2:	00a4      	lsls	r4, r4, #2
 8015de4:	7833      	ldrb	r3, [r6, #0]
 8015de6:	2b50      	cmp	r3, #80	; 0x50
 8015de8:	d001      	beq.n	8015dee <__gethex+0xc4>
 8015dea:	2b70      	cmp	r3, #112	; 0x70
 8015dec:	d140      	bne.n	8015e70 <__gethex+0x146>
 8015dee:	7873      	ldrb	r3, [r6, #1]
 8015df0:	2b2b      	cmp	r3, #43	; 0x2b
 8015df2:	d031      	beq.n	8015e58 <__gethex+0x12e>
 8015df4:	2b2d      	cmp	r3, #45	; 0x2d
 8015df6:	d033      	beq.n	8015e60 <__gethex+0x136>
 8015df8:	1c71      	adds	r1, r6, #1
 8015dfa:	f04f 0900 	mov.w	r9, #0
 8015dfe:	7808      	ldrb	r0, [r1, #0]
 8015e00:	f7ff ff7e 	bl	8015d00 <__hexdig_fun>
 8015e04:	1e43      	subs	r3, r0, #1
 8015e06:	b2db      	uxtb	r3, r3
 8015e08:	2b18      	cmp	r3, #24
 8015e0a:	d831      	bhi.n	8015e70 <__gethex+0x146>
 8015e0c:	f1a0 0210 	sub.w	r2, r0, #16
 8015e10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015e14:	f7ff ff74 	bl	8015d00 <__hexdig_fun>
 8015e18:	1e43      	subs	r3, r0, #1
 8015e1a:	b2db      	uxtb	r3, r3
 8015e1c:	2b18      	cmp	r3, #24
 8015e1e:	d922      	bls.n	8015e66 <__gethex+0x13c>
 8015e20:	f1b9 0f00 	cmp.w	r9, #0
 8015e24:	d000      	beq.n	8015e28 <__gethex+0xfe>
 8015e26:	4252      	negs	r2, r2
 8015e28:	4414      	add	r4, r2
 8015e2a:	f8ca 1000 	str.w	r1, [sl]
 8015e2e:	b30d      	cbz	r5, 8015e74 <__gethex+0x14a>
 8015e30:	f1bb 0f00 	cmp.w	fp, #0
 8015e34:	bf0c      	ite	eq
 8015e36:	2706      	moveq	r7, #6
 8015e38:	2700      	movne	r7, #0
 8015e3a:	4638      	mov	r0, r7
 8015e3c:	b00b      	add	sp, #44	; 0x2c
 8015e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e42:	f10b 0b01 	add.w	fp, fp, #1
 8015e46:	e78a      	b.n	8015d5e <__gethex+0x34>
 8015e48:	2500      	movs	r5, #0
 8015e4a:	462c      	mov	r4, r5
 8015e4c:	e7ae      	b.n	8015dac <__gethex+0x82>
 8015e4e:	463e      	mov	r6, r7
 8015e50:	2501      	movs	r5, #1
 8015e52:	e7c7      	b.n	8015de4 <__gethex+0xba>
 8015e54:	4604      	mov	r4, r0
 8015e56:	e7fb      	b.n	8015e50 <__gethex+0x126>
 8015e58:	f04f 0900 	mov.w	r9, #0
 8015e5c:	1cb1      	adds	r1, r6, #2
 8015e5e:	e7ce      	b.n	8015dfe <__gethex+0xd4>
 8015e60:	f04f 0901 	mov.w	r9, #1
 8015e64:	e7fa      	b.n	8015e5c <__gethex+0x132>
 8015e66:	230a      	movs	r3, #10
 8015e68:	fb03 0202 	mla	r2, r3, r2, r0
 8015e6c:	3a10      	subs	r2, #16
 8015e6e:	e7cf      	b.n	8015e10 <__gethex+0xe6>
 8015e70:	4631      	mov	r1, r6
 8015e72:	e7da      	b.n	8015e2a <__gethex+0x100>
 8015e74:	1bf3      	subs	r3, r6, r7
 8015e76:	3b01      	subs	r3, #1
 8015e78:	4629      	mov	r1, r5
 8015e7a:	2b07      	cmp	r3, #7
 8015e7c:	dc49      	bgt.n	8015f12 <__gethex+0x1e8>
 8015e7e:	9802      	ldr	r0, [sp, #8]
 8015e80:	f000 faa3 	bl	80163ca <_Balloc>
 8015e84:	9b01      	ldr	r3, [sp, #4]
 8015e86:	f100 0914 	add.w	r9, r0, #20
 8015e8a:	f04f 0b00 	mov.w	fp, #0
 8015e8e:	f1c3 0301 	rsb	r3, r3, #1
 8015e92:	4605      	mov	r5, r0
 8015e94:	f8cd 9010 	str.w	r9, [sp, #16]
 8015e98:	46da      	mov	sl, fp
 8015e9a:	9308      	str	r3, [sp, #32]
 8015e9c:	42b7      	cmp	r7, r6
 8015e9e:	d33b      	bcc.n	8015f18 <__gethex+0x1ee>
 8015ea0:	9804      	ldr	r0, [sp, #16]
 8015ea2:	f840 ab04 	str.w	sl, [r0], #4
 8015ea6:	eba0 0009 	sub.w	r0, r0, r9
 8015eaa:	1080      	asrs	r0, r0, #2
 8015eac:	6128      	str	r0, [r5, #16]
 8015eae:	0147      	lsls	r7, r0, #5
 8015eb0:	4650      	mov	r0, sl
 8015eb2:	f000 fb4e 	bl	8016552 <__hi0bits>
 8015eb6:	f8d8 6000 	ldr.w	r6, [r8]
 8015eba:	1a3f      	subs	r7, r7, r0
 8015ebc:	42b7      	cmp	r7, r6
 8015ebe:	dd64      	ble.n	8015f8a <__gethex+0x260>
 8015ec0:	1bbf      	subs	r7, r7, r6
 8015ec2:	4639      	mov	r1, r7
 8015ec4:	4628      	mov	r0, r5
 8015ec6:	f000 fe5d 	bl	8016b84 <__any_on>
 8015eca:	4682      	mov	sl, r0
 8015ecc:	b178      	cbz	r0, 8015eee <__gethex+0x1c4>
 8015ece:	1e7b      	subs	r3, r7, #1
 8015ed0:	1159      	asrs	r1, r3, #5
 8015ed2:	f003 021f 	and.w	r2, r3, #31
 8015ed6:	f04f 0a01 	mov.w	sl, #1
 8015eda:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015ede:	fa0a f202 	lsl.w	r2, sl, r2
 8015ee2:	420a      	tst	r2, r1
 8015ee4:	d003      	beq.n	8015eee <__gethex+0x1c4>
 8015ee6:	4553      	cmp	r3, sl
 8015ee8:	dc46      	bgt.n	8015f78 <__gethex+0x24e>
 8015eea:	f04f 0a02 	mov.w	sl, #2
 8015eee:	4639      	mov	r1, r7
 8015ef0:	4628      	mov	r0, r5
 8015ef2:	f7ff fecb 	bl	8015c8c <rshift>
 8015ef6:	443c      	add	r4, r7
 8015ef8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015efc:	42a3      	cmp	r3, r4
 8015efe:	da52      	bge.n	8015fa6 <__gethex+0x27c>
 8015f00:	4629      	mov	r1, r5
 8015f02:	9802      	ldr	r0, [sp, #8]
 8015f04:	f000 fa95 	bl	8016432 <_Bfree>
 8015f08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	6013      	str	r3, [r2, #0]
 8015f0e:	27a3      	movs	r7, #163	; 0xa3
 8015f10:	e793      	b.n	8015e3a <__gethex+0x110>
 8015f12:	3101      	adds	r1, #1
 8015f14:	105b      	asrs	r3, r3, #1
 8015f16:	e7b0      	b.n	8015e7a <__gethex+0x150>
 8015f18:	1e73      	subs	r3, r6, #1
 8015f1a:	9305      	str	r3, [sp, #20]
 8015f1c:	9a07      	ldr	r2, [sp, #28]
 8015f1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015f22:	4293      	cmp	r3, r2
 8015f24:	d018      	beq.n	8015f58 <__gethex+0x22e>
 8015f26:	f1bb 0f20 	cmp.w	fp, #32
 8015f2a:	d107      	bne.n	8015f3c <__gethex+0x212>
 8015f2c:	9b04      	ldr	r3, [sp, #16]
 8015f2e:	f8c3 a000 	str.w	sl, [r3]
 8015f32:	3304      	adds	r3, #4
 8015f34:	f04f 0a00 	mov.w	sl, #0
 8015f38:	9304      	str	r3, [sp, #16]
 8015f3a:	46d3      	mov	fp, sl
 8015f3c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015f40:	f7ff fede 	bl	8015d00 <__hexdig_fun>
 8015f44:	f000 000f 	and.w	r0, r0, #15
 8015f48:	fa00 f00b 	lsl.w	r0, r0, fp
 8015f4c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015f50:	f10b 0b04 	add.w	fp, fp, #4
 8015f54:	9b05      	ldr	r3, [sp, #20]
 8015f56:	e00d      	b.n	8015f74 <__gethex+0x24a>
 8015f58:	9b05      	ldr	r3, [sp, #20]
 8015f5a:	9a08      	ldr	r2, [sp, #32]
 8015f5c:	4413      	add	r3, r2
 8015f5e:	42bb      	cmp	r3, r7
 8015f60:	d3e1      	bcc.n	8015f26 <__gethex+0x1fc>
 8015f62:	4618      	mov	r0, r3
 8015f64:	9a01      	ldr	r2, [sp, #4]
 8015f66:	9903      	ldr	r1, [sp, #12]
 8015f68:	9309      	str	r3, [sp, #36]	; 0x24
 8015f6a:	f000 fffb 	bl	8016f64 <strncmp>
 8015f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f70:	2800      	cmp	r0, #0
 8015f72:	d1d8      	bne.n	8015f26 <__gethex+0x1fc>
 8015f74:	461e      	mov	r6, r3
 8015f76:	e791      	b.n	8015e9c <__gethex+0x172>
 8015f78:	1eb9      	subs	r1, r7, #2
 8015f7a:	4628      	mov	r0, r5
 8015f7c:	f000 fe02 	bl	8016b84 <__any_on>
 8015f80:	2800      	cmp	r0, #0
 8015f82:	d0b2      	beq.n	8015eea <__gethex+0x1c0>
 8015f84:	f04f 0a03 	mov.w	sl, #3
 8015f88:	e7b1      	b.n	8015eee <__gethex+0x1c4>
 8015f8a:	da09      	bge.n	8015fa0 <__gethex+0x276>
 8015f8c:	1bf7      	subs	r7, r6, r7
 8015f8e:	4629      	mov	r1, r5
 8015f90:	463a      	mov	r2, r7
 8015f92:	9802      	ldr	r0, [sp, #8]
 8015f94:	f000 fc18 	bl	80167c8 <__lshift>
 8015f98:	1be4      	subs	r4, r4, r7
 8015f9a:	4605      	mov	r5, r0
 8015f9c:	f100 0914 	add.w	r9, r0, #20
 8015fa0:	f04f 0a00 	mov.w	sl, #0
 8015fa4:	e7a8      	b.n	8015ef8 <__gethex+0x1ce>
 8015fa6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015faa:	42a0      	cmp	r0, r4
 8015fac:	dd6a      	ble.n	8016084 <__gethex+0x35a>
 8015fae:	1b04      	subs	r4, r0, r4
 8015fb0:	42a6      	cmp	r6, r4
 8015fb2:	dc2e      	bgt.n	8016012 <__gethex+0x2e8>
 8015fb4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015fb8:	2b02      	cmp	r3, #2
 8015fba:	d022      	beq.n	8016002 <__gethex+0x2d8>
 8015fbc:	2b03      	cmp	r3, #3
 8015fbe:	d024      	beq.n	801600a <__gethex+0x2e0>
 8015fc0:	2b01      	cmp	r3, #1
 8015fc2:	d115      	bne.n	8015ff0 <__gethex+0x2c6>
 8015fc4:	42a6      	cmp	r6, r4
 8015fc6:	d113      	bne.n	8015ff0 <__gethex+0x2c6>
 8015fc8:	2e01      	cmp	r6, #1
 8015fca:	dc0b      	bgt.n	8015fe4 <__gethex+0x2ba>
 8015fcc:	9a06      	ldr	r2, [sp, #24]
 8015fce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015fd2:	6013      	str	r3, [r2, #0]
 8015fd4:	2301      	movs	r3, #1
 8015fd6:	612b      	str	r3, [r5, #16]
 8015fd8:	f8c9 3000 	str.w	r3, [r9]
 8015fdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fde:	2762      	movs	r7, #98	; 0x62
 8015fe0:	601d      	str	r5, [r3, #0]
 8015fe2:	e72a      	b.n	8015e3a <__gethex+0x110>
 8015fe4:	1e71      	subs	r1, r6, #1
 8015fe6:	4628      	mov	r0, r5
 8015fe8:	f000 fdcc 	bl	8016b84 <__any_on>
 8015fec:	2800      	cmp	r0, #0
 8015fee:	d1ed      	bne.n	8015fcc <__gethex+0x2a2>
 8015ff0:	4629      	mov	r1, r5
 8015ff2:	9802      	ldr	r0, [sp, #8]
 8015ff4:	f000 fa1d 	bl	8016432 <_Bfree>
 8015ff8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	6013      	str	r3, [r2, #0]
 8015ffe:	2750      	movs	r7, #80	; 0x50
 8016000:	e71b      	b.n	8015e3a <__gethex+0x110>
 8016002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016004:	2b00      	cmp	r3, #0
 8016006:	d0e1      	beq.n	8015fcc <__gethex+0x2a2>
 8016008:	e7f2      	b.n	8015ff0 <__gethex+0x2c6>
 801600a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801600c:	2b00      	cmp	r3, #0
 801600e:	d1dd      	bne.n	8015fcc <__gethex+0x2a2>
 8016010:	e7ee      	b.n	8015ff0 <__gethex+0x2c6>
 8016012:	1e67      	subs	r7, r4, #1
 8016014:	f1ba 0f00 	cmp.w	sl, #0
 8016018:	d131      	bne.n	801607e <__gethex+0x354>
 801601a:	b127      	cbz	r7, 8016026 <__gethex+0x2fc>
 801601c:	4639      	mov	r1, r7
 801601e:	4628      	mov	r0, r5
 8016020:	f000 fdb0 	bl	8016b84 <__any_on>
 8016024:	4682      	mov	sl, r0
 8016026:	117a      	asrs	r2, r7, #5
 8016028:	2301      	movs	r3, #1
 801602a:	f007 071f 	and.w	r7, r7, #31
 801602e:	fa03 f707 	lsl.w	r7, r3, r7
 8016032:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016036:	4621      	mov	r1, r4
 8016038:	421f      	tst	r7, r3
 801603a:	4628      	mov	r0, r5
 801603c:	bf18      	it	ne
 801603e:	f04a 0a02 	orrne.w	sl, sl, #2
 8016042:	1b36      	subs	r6, r6, r4
 8016044:	f7ff fe22 	bl	8015c8c <rshift>
 8016048:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801604c:	2702      	movs	r7, #2
 801604e:	f1ba 0f00 	cmp.w	sl, #0
 8016052:	d048      	beq.n	80160e6 <__gethex+0x3bc>
 8016054:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016058:	2b02      	cmp	r3, #2
 801605a:	d015      	beq.n	8016088 <__gethex+0x35e>
 801605c:	2b03      	cmp	r3, #3
 801605e:	d017      	beq.n	8016090 <__gethex+0x366>
 8016060:	2b01      	cmp	r3, #1
 8016062:	d109      	bne.n	8016078 <__gethex+0x34e>
 8016064:	f01a 0f02 	tst.w	sl, #2
 8016068:	d006      	beq.n	8016078 <__gethex+0x34e>
 801606a:	f8d9 3000 	ldr.w	r3, [r9]
 801606e:	ea4a 0a03 	orr.w	sl, sl, r3
 8016072:	f01a 0f01 	tst.w	sl, #1
 8016076:	d10e      	bne.n	8016096 <__gethex+0x36c>
 8016078:	f047 0710 	orr.w	r7, r7, #16
 801607c:	e033      	b.n	80160e6 <__gethex+0x3bc>
 801607e:	f04f 0a01 	mov.w	sl, #1
 8016082:	e7d0      	b.n	8016026 <__gethex+0x2fc>
 8016084:	2701      	movs	r7, #1
 8016086:	e7e2      	b.n	801604e <__gethex+0x324>
 8016088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801608a:	f1c3 0301 	rsb	r3, r3, #1
 801608e:	9315      	str	r3, [sp, #84]	; 0x54
 8016090:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016092:	2b00      	cmp	r3, #0
 8016094:	d0f0      	beq.n	8016078 <__gethex+0x34e>
 8016096:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801609a:	f105 0314 	add.w	r3, r5, #20
 801609e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80160a2:	eb03 010a 	add.w	r1, r3, sl
 80160a6:	f04f 0c00 	mov.w	ip, #0
 80160aa:	4618      	mov	r0, r3
 80160ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80160b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80160b4:	d01c      	beq.n	80160f0 <__gethex+0x3c6>
 80160b6:	3201      	adds	r2, #1
 80160b8:	6002      	str	r2, [r0, #0]
 80160ba:	2f02      	cmp	r7, #2
 80160bc:	f105 0314 	add.w	r3, r5, #20
 80160c0:	d138      	bne.n	8016134 <__gethex+0x40a>
 80160c2:	f8d8 2000 	ldr.w	r2, [r8]
 80160c6:	3a01      	subs	r2, #1
 80160c8:	42b2      	cmp	r2, r6
 80160ca:	d10a      	bne.n	80160e2 <__gethex+0x3b8>
 80160cc:	1171      	asrs	r1, r6, #5
 80160ce:	2201      	movs	r2, #1
 80160d0:	f006 061f 	and.w	r6, r6, #31
 80160d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80160d8:	fa02 f606 	lsl.w	r6, r2, r6
 80160dc:	421e      	tst	r6, r3
 80160de:	bf18      	it	ne
 80160e0:	4617      	movne	r7, r2
 80160e2:	f047 0720 	orr.w	r7, r7, #32
 80160e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80160e8:	601d      	str	r5, [r3, #0]
 80160ea:	9b06      	ldr	r3, [sp, #24]
 80160ec:	601c      	str	r4, [r3, #0]
 80160ee:	e6a4      	b.n	8015e3a <__gethex+0x110>
 80160f0:	4299      	cmp	r1, r3
 80160f2:	f843 cc04 	str.w	ip, [r3, #-4]
 80160f6:	d8d8      	bhi.n	80160aa <__gethex+0x380>
 80160f8:	68ab      	ldr	r3, [r5, #8]
 80160fa:	4599      	cmp	r9, r3
 80160fc:	db12      	blt.n	8016124 <__gethex+0x3fa>
 80160fe:	6869      	ldr	r1, [r5, #4]
 8016100:	9802      	ldr	r0, [sp, #8]
 8016102:	3101      	adds	r1, #1
 8016104:	f000 f961 	bl	80163ca <_Balloc>
 8016108:	692a      	ldr	r2, [r5, #16]
 801610a:	3202      	adds	r2, #2
 801610c:	f105 010c 	add.w	r1, r5, #12
 8016110:	4683      	mov	fp, r0
 8016112:	0092      	lsls	r2, r2, #2
 8016114:	300c      	adds	r0, #12
 8016116:	f7fc f8ef 	bl	80122f8 <memcpy>
 801611a:	4629      	mov	r1, r5
 801611c:	9802      	ldr	r0, [sp, #8]
 801611e:	f000 f988 	bl	8016432 <_Bfree>
 8016122:	465d      	mov	r5, fp
 8016124:	692b      	ldr	r3, [r5, #16]
 8016126:	1c5a      	adds	r2, r3, #1
 8016128:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801612c:	612a      	str	r2, [r5, #16]
 801612e:	2201      	movs	r2, #1
 8016130:	615a      	str	r2, [r3, #20]
 8016132:	e7c2      	b.n	80160ba <__gethex+0x390>
 8016134:	692a      	ldr	r2, [r5, #16]
 8016136:	454a      	cmp	r2, r9
 8016138:	dd0b      	ble.n	8016152 <__gethex+0x428>
 801613a:	2101      	movs	r1, #1
 801613c:	4628      	mov	r0, r5
 801613e:	f7ff fda5 	bl	8015c8c <rshift>
 8016142:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016146:	3401      	adds	r4, #1
 8016148:	42a3      	cmp	r3, r4
 801614a:	f6ff aed9 	blt.w	8015f00 <__gethex+0x1d6>
 801614e:	2701      	movs	r7, #1
 8016150:	e7c7      	b.n	80160e2 <__gethex+0x3b8>
 8016152:	f016 061f 	ands.w	r6, r6, #31
 8016156:	d0fa      	beq.n	801614e <__gethex+0x424>
 8016158:	449a      	add	sl, r3
 801615a:	f1c6 0620 	rsb	r6, r6, #32
 801615e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016162:	f000 f9f6 	bl	8016552 <__hi0bits>
 8016166:	42b0      	cmp	r0, r6
 8016168:	dbe7      	blt.n	801613a <__gethex+0x410>
 801616a:	e7f0      	b.n	801614e <__gethex+0x424>

0801616c <L_shift>:
 801616c:	f1c2 0208 	rsb	r2, r2, #8
 8016170:	0092      	lsls	r2, r2, #2
 8016172:	b570      	push	{r4, r5, r6, lr}
 8016174:	f1c2 0620 	rsb	r6, r2, #32
 8016178:	6843      	ldr	r3, [r0, #4]
 801617a:	6804      	ldr	r4, [r0, #0]
 801617c:	fa03 f506 	lsl.w	r5, r3, r6
 8016180:	432c      	orrs	r4, r5
 8016182:	40d3      	lsrs	r3, r2
 8016184:	6004      	str	r4, [r0, #0]
 8016186:	f840 3f04 	str.w	r3, [r0, #4]!
 801618a:	4288      	cmp	r0, r1
 801618c:	d3f4      	bcc.n	8016178 <L_shift+0xc>
 801618e:	bd70      	pop	{r4, r5, r6, pc}

08016190 <__match>:
 8016190:	b530      	push	{r4, r5, lr}
 8016192:	6803      	ldr	r3, [r0, #0]
 8016194:	3301      	adds	r3, #1
 8016196:	f811 4b01 	ldrb.w	r4, [r1], #1
 801619a:	b914      	cbnz	r4, 80161a2 <__match+0x12>
 801619c:	6003      	str	r3, [r0, #0]
 801619e:	2001      	movs	r0, #1
 80161a0:	bd30      	pop	{r4, r5, pc}
 80161a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80161aa:	2d19      	cmp	r5, #25
 80161ac:	bf98      	it	ls
 80161ae:	3220      	addls	r2, #32
 80161b0:	42a2      	cmp	r2, r4
 80161b2:	d0f0      	beq.n	8016196 <__match+0x6>
 80161b4:	2000      	movs	r0, #0
 80161b6:	e7f3      	b.n	80161a0 <__match+0x10>

080161b8 <__hexnan>:
 80161b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161bc:	680b      	ldr	r3, [r1, #0]
 80161be:	6801      	ldr	r1, [r0, #0]
 80161c0:	115f      	asrs	r7, r3, #5
 80161c2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80161c6:	f013 031f 	ands.w	r3, r3, #31
 80161ca:	b087      	sub	sp, #28
 80161cc:	bf18      	it	ne
 80161ce:	3704      	addne	r7, #4
 80161d0:	2500      	movs	r5, #0
 80161d2:	1f3e      	subs	r6, r7, #4
 80161d4:	4682      	mov	sl, r0
 80161d6:	4690      	mov	r8, r2
 80161d8:	9301      	str	r3, [sp, #4]
 80161da:	f847 5c04 	str.w	r5, [r7, #-4]
 80161de:	46b1      	mov	r9, r6
 80161e0:	4634      	mov	r4, r6
 80161e2:	9502      	str	r5, [sp, #8]
 80161e4:	46ab      	mov	fp, r5
 80161e6:	784a      	ldrb	r2, [r1, #1]
 80161e8:	1c4b      	adds	r3, r1, #1
 80161ea:	9303      	str	r3, [sp, #12]
 80161ec:	b342      	cbz	r2, 8016240 <__hexnan+0x88>
 80161ee:	4610      	mov	r0, r2
 80161f0:	9105      	str	r1, [sp, #20]
 80161f2:	9204      	str	r2, [sp, #16]
 80161f4:	f7ff fd84 	bl	8015d00 <__hexdig_fun>
 80161f8:	2800      	cmp	r0, #0
 80161fa:	d143      	bne.n	8016284 <__hexnan+0xcc>
 80161fc:	9a04      	ldr	r2, [sp, #16]
 80161fe:	9905      	ldr	r1, [sp, #20]
 8016200:	2a20      	cmp	r2, #32
 8016202:	d818      	bhi.n	8016236 <__hexnan+0x7e>
 8016204:	9b02      	ldr	r3, [sp, #8]
 8016206:	459b      	cmp	fp, r3
 8016208:	dd13      	ble.n	8016232 <__hexnan+0x7a>
 801620a:	454c      	cmp	r4, r9
 801620c:	d206      	bcs.n	801621c <__hexnan+0x64>
 801620e:	2d07      	cmp	r5, #7
 8016210:	dc04      	bgt.n	801621c <__hexnan+0x64>
 8016212:	462a      	mov	r2, r5
 8016214:	4649      	mov	r1, r9
 8016216:	4620      	mov	r0, r4
 8016218:	f7ff ffa8 	bl	801616c <L_shift>
 801621c:	4544      	cmp	r4, r8
 801621e:	d944      	bls.n	80162aa <__hexnan+0xf2>
 8016220:	2300      	movs	r3, #0
 8016222:	f1a4 0904 	sub.w	r9, r4, #4
 8016226:	f844 3c04 	str.w	r3, [r4, #-4]
 801622a:	f8cd b008 	str.w	fp, [sp, #8]
 801622e:	464c      	mov	r4, r9
 8016230:	461d      	mov	r5, r3
 8016232:	9903      	ldr	r1, [sp, #12]
 8016234:	e7d7      	b.n	80161e6 <__hexnan+0x2e>
 8016236:	2a29      	cmp	r2, #41	; 0x29
 8016238:	d14a      	bne.n	80162d0 <__hexnan+0x118>
 801623a:	3102      	adds	r1, #2
 801623c:	f8ca 1000 	str.w	r1, [sl]
 8016240:	f1bb 0f00 	cmp.w	fp, #0
 8016244:	d044      	beq.n	80162d0 <__hexnan+0x118>
 8016246:	454c      	cmp	r4, r9
 8016248:	d206      	bcs.n	8016258 <__hexnan+0xa0>
 801624a:	2d07      	cmp	r5, #7
 801624c:	dc04      	bgt.n	8016258 <__hexnan+0xa0>
 801624e:	462a      	mov	r2, r5
 8016250:	4649      	mov	r1, r9
 8016252:	4620      	mov	r0, r4
 8016254:	f7ff ff8a 	bl	801616c <L_shift>
 8016258:	4544      	cmp	r4, r8
 801625a:	d928      	bls.n	80162ae <__hexnan+0xf6>
 801625c:	4643      	mov	r3, r8
 801625e:	f854 2b04 	ldr.w	r2, [r4], #4
 8016262:	f843 2b04 	str.w	r2, [r3], #4
 8016266:	42a6      	cmp	r6, r4
 8016268:	d2f9      	bcs.n	801625e <__hexnan+0xa6>
 801626a:	2200      	movs	r2, #0
 801626c:	f843 2b04 	str.w	r2, [r3], #4
 8016270:	429e      	cmp	r6, r3
 8016272:	d2fb      	bcs.n	801626c <__hexnan+0xb4>
 8016274:	6833      	ldr	r3, [r6, #0]
 8016276:	b91b      	cbnz	r3, 8016280 <__hexnan+0xc8>
 8016278:	4546      	cmp	r6, r8
 801627a:	d127      	bne.n	80162cc <__hexnan+0x114>
 801627c:	2301      	movs	r3, #1
 801627e:	6033      	str	r3, [r6, #0]
 8016280:	2005      	movs	r0, #5
 8016282:	e026      	b.n	80162d2 <__hexnan+0x11a>
 8016284:	3501      	adds	r5, #1
 8016286:	2d08      	cmp	r5, #8
 8016288:	f10b 0b01 	add.w	fp, fp, #1
 801628c:	dd06      	ble.n	801629c <__hexnan+0xe4>
 801628e:	4544      	cmp	r4, r8
 8016290:	d9cf      	bls.n	8016232 <__hexnan+0x7a>
 8016292:	2300      	movs	r3, #0
 8016294:	f844 3c04 	str.w	r3, [r4, #-4]
 8016298:	2501      	movs	r5, #1
 801629a:	3c04      	subs	r4, #4
 801629c:	6822      	ldr	r2, [r4, #0]
 801629e:	f000 000f 	and.w	r0, r0, #15
 80162a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80162a6:	6020      	str	r0, [r4, #0]
 80162a8:	e7c3      	b.n	8016232 <__hexnan+0x7a>
 80162aa:	2508      	movs	r5, #8
 80162ac:	e7c1      	b.n	8016232 <__hexnan+0x7a>
 80162ae:	9b01      	ldr	r3, [sp, #4]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d0df      	beq.n	8016274 <__hexnan+0xbc>
 80162b4:	f04f 32ff 	mov.w	r2, #4294967295
 80162b8:	f1c3 0320 	rsb	r3, r3, #32
 80162bc:	fa22 f303 	lsr.w	r3, r2, r3
 80162c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80162c4:	401a      	ands	r2, r3
 80162c6:	f847 2c04 	str.w	r2, [r7, #-4]
 80162ca:	e7d3      	b.n	8016274 <__hexnan+0xbc>
 80162cc:	3e04      	subs	r6, #4
 80162ce:	e7d1      	b.n	8016274 <__hexnan+0xbc>
 80162d0:	2004      	movs	r0, #4
 80162d2:	b007      	add	sp, #28
 80162d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162d8 <_isatty_r>:
 80162d8:	b538      	push	{r3, r4, r5, lr}
 80162da:	4c06      	ldr	r4, [pc, #24]	; (80162f4 <_isatty_r+0x1c>)
 80162dc:	2300      	movs	r3, #0
 80162de:	4605      	mov	r5, r0
 80162e0:	4608      	mov	r0, r1
 80162e2:	6023      	str	r3, [r4, #0]
 80162e4:	f7f7 fd56 	bl	800dd94 <_isatty>
 80162e8:	1c43      	adds	r3, r0, #1
 80162ea:	d102      	bne.n	80162f2 <_isatty_r+0x1a>
 80162ec:	6823      	ldr	r3, [r4, #0]
 80162ee:	b103      	cbz	r3, 80162f2 <_isatty_r+0x1a>
 80162f0:	602b      	str	r3, [r5, #0]
 80162f2:	bd38      	pop	{r3, r4, r5, pc}
 80162f4:	20004e4c 	.word	0x20004e4c

080162f8 <__locale_ctype_ptr_l>:
 80162f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80162fc:	4770      	bx	lr
	...

08016300 <__locale_ctype_ptr>:
 8016300:	4b04      	ldr	r3, [pc, #16]	; (8016314 <__locale_ctype_ptr+0x14>)
 8016302:	4a05      	ldr	r2, [pc, #20]	; (8016318 <__locale_ctype_ptr+0x18>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	6a1b      	ldr	r3, [r3, #32]
 8016308:	2b00      	cmp	r3, #0
 801630a:	bf08      	it	eq
 801630c:	4613      	moveq	r3, r2
 801630e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016312:	4770      	bx	lr
 8016314:	2000002c 	.word	0x2000002c
 8016318:	20000090 	.word	0x20000090

0801631c <__localeconv_l>:
 801631c:	30f0      	adds	r0, #240	; 0xf0
 801631e:	4770      	bx	lr

08016320 <_localeconv_r>:
 8016320:	4b04      	ldr	r3, [pc, #16]	; (8016334 <_localeconv_r+0x14>)
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	6a18      	ldr	r0, [r3, #32]
 8016326:	4b04      	ldr	r3, [pc, #16]	; (8016338 <_localeconv_r+0x18>)
 8016328:	2800      	cmp	r0, #0
 801632a:	bf08      	it	eq
 801632c:	4618      	moveq	r0, r3
 801632e:	30f0      	adds	r0, #240	; 0xf0
 8016330:	4770      	bx	lr
 8016332:	bf00      	nop
 8016334:	2000002c 	.word	0x2000002c
 8016338:	20000090 	.word	0x20000090

0801633c <_lseek_r>:
 801633c:	b538      	push	{r3, r4, r5, lr}
 801633e:	4c07      	ldr	r4, [pc, #28]	; (801635c <_lseek_r+0x20>)
 8016340:	4605      	mov	r5, r0
 8016342:	4608      	mov	r0, r1
 8016344:	4611      	mov	r1, r2
 8016346:	2200      	movs	r2, #0
 8016348:	6022      	str	r2, [r4, #0]
 801634a:	461a      	mov	r2, r3
 801634c:	f7f7 fd24 	bl	800dd98 <_lseek>
 8016350:	1c43      	adds	r3, r0, #1
 8016352:	d102      	bne.n	801635a <_lseek_r+0x1e>
 8016354:	6823      	ldr	r3, [r4, #0]
 8016356:	b103      	cbz	r3, 801635a <_lseek_r+0x1e>
 8016358:	602b      	str	r3, [r5, #0]
 801635a:	bd38      	pop	{r3, r4, r5, pc}
 801635c:	20004e4c 	.word	0x20004e4c

08016360 <malloc>:
 8016360:	4b02      	ldr	r3, [pc, #8]	; (801636c <malloc+0xc>)
 8016362:	4601      	mov	r1, r0
 8016364:	6818      	ldr	r0, [r3, #0]
 8016366:	f7fc b829 	b.w	80123bc <_malloc_r>
 801636a:	bf00      	nop
 801636c:	2000002c 	.word	0x2000002c

08016370 <__ascii_mbtowc>:
 8016370:	b082      	sub	sp, #8
 8016372:	b901      	cbnz	r1, 8016376 <__ascii_mbtowc+0x6>
 8016374:	a901      	add	r1, sp, #4
 8016376:	b142      	cbz	r2, 801638a <__ascii_mbtowc+0x1a>
 8016378:	b14b      	cbz	r3, 801638e <__ascii_mbtowc+0x1e>
 801637a:	7813      	ldrb	r3, [r2, #0]
 801637c:	600b      	str	r3, [r1, #0]
 801637e:	7812      	ldrb	r2, [r2, #0]
 8016380:	1c10      	adds	r0, r2, #0
 8016382:	bf18      	it	ne
 8016384:	2001      	movne	r0, #1
 8016386:	b002      	add	sp, #8
 8016388:	4770      	bx	lr
 801638a:	4610      	mov	r0, r2
 801638c:	e7fb      	b.n	8016386 <__ascii_mbtowc+0x16>
 801638e:	f06f 0001 	mvn.w	r0, #1
 8016392:	e7f8      	b.n	8016386 <__ascii_mbtowc+0x16>

08016394 <memmove>:
 8016394:	4288      	cmp	r0, r1
 8016396:	b510      	push	{r4, lr}
 8016398:	eb01 0302 	add.w	r3, r1, r2
 801639c:	d807      	bhi.n	80163ae <memmove+0x1a>
 801639e:	1e42      	subs	r2, r0, #1
 80163a0:	4299      	cmp	r1, r3
 80163a2:	d00a      	beq.n	80163ba <memmove+0x26>
 80163a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80163ac:	e7f8      	b.n	80163a0 <memmove+0xc>
 80163ae:	4283      	cmp	r3, r0
 80163b0:	d9f5      	bls.n	801639e <memmove+0xa>
 80163b2:	1881      	adds	r1, r0, r2
 80163b4:	1ad2      	subs	r2, r2, r3
 80163b6:	42d3      	cmn	r3, r2
 80163b8:	d100      	bne.n	80163bc <memmove+0x28>
 80163ba:	bd10      	pop	{r4, pc}
 80163bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80163c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80163c4:	e7f7      	b.n	80163b6 <memmove+0x22>

080163c6 <__malloc_lock>:
 80163c6:	4770      	bx	lr

080163c8 <__malloc_unlock>:
 80163c8:	4770      	bx	lr

080163ca <_Balloc>:
 80163ca:	b570      	push	{r4, r5, r6, lr}
 80163cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80163ce:	4604      	mov	r4, r0
 80163d0:	460e      	mov	r6, r1
 80163d2:	b93d      	cbnz	r5, 80163e4 <_Balloc+0x1a>
 80163d4:	2010      	movs	r0, #16
 80163d6:	f7ff ffc3 	bl	8016360 <malloc>
 80163da:	6260      	str	r0, [r4, #36]	; 0x24
 80163dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80163e0:	6005      	str	r5, [r0, #0]
 80163e2:	60c5      	str	r5, [r0, #12]
 80163e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80163e6:	68eb      	ldr	r3, [r5, #12]
 80163e8:	b183      	cbz	r3, 801640c <_Balloc+0x42>
 80163ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80163ec:	68db      	ldr	r3, [r3, #12]
 80163ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80163f2:	b9b8      	cbnz	r0, 8016424 <_Balloc+0x5a>
 80163f4:	2101      	movs	r1, #1
 80163f6:	fa01 f506 	lsl.w	r5, r1, r6
 80163fa:	1d6a      	adds	r2, r5, #5
 80163fc:	0092      	lsls	r2, r2, #2
 80163fe:	4620      	mov	r0, r4
 8016400:	f000 fbe1 	bl	8016bc6 <_calloc_r>
 8016404:	b160      	cbz	r0, 8016420 <_Balloc+0x56>
 8016406:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801640a:	e00e      	b.n	801642a <_Balloc+0x60>
 801640c:	2221      	movs	r2, #33	; 0x21
 801640e:	2104      	movs	r1, #4
 8016410:	4620      	mov	r0, r4
 8016412:	f000 fbd8 	bl	8016bc6 <_calloc_r>
 8016416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016418:	60e8      	str	r0, [r5, #12]
 801641a:	68db      	ldr	r3, [r3, #12]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d1e4      	bne.n	80163ea <_Balloc+0x20>
 8016420:	2000      	movs	r0, #0
 8016422:	bd70      	pop	{r4, r5, r6, pc}
 8016424:	6802      	ldr	r2, [r0, #0]
 8016426:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801642a:	2300      	movs	r3, #0
 801642c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016430:	e7f7      	b.n	8016422 <_Balloc+0x58>

08016432 <_Bfree>:
 8016432:	b570      	push	{r4, r5, r6, lr}
 8016434:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016436:	4606      	mov	r6, r0
 8016438:	460d      	mov	r5, r1
 801643a:	b93c      	cbnz	r4, 801644c <_Bfree+0x1a>
 801643c:	2010      	movs	r0, #16
 801643e:	f7ff ff8f 	bl	8016360 <malloc>
 8016442:	6270      	str	r0, [r6, #36]	; 0x24
 8016444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016448:	6004      	str	r4, [r0, #0]
 801644a:	60c4      	str	r4, [r0, #12]
 801644c:	b13d      	cbz	r5, 801645e <_Bfree+0x2c>
 801644e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016450:	686a      	ldr	r2, [r5, #4]
 8016452:	68db      	ldr	r3, [r3, #12]
 8016454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016458:	6029      	str	r1, [r5, #0]
 801645a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801645e:	bd70      	pop	{r4, r5, r6, pc}

08016460 <__multadd>:
 8016460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016464:	690d      	ldr	r5, [r1, #16]
 8016466:	461f      	mov	r7, r3
 8016468:	4606      	mov	r6, r0
 801646a:	460c      	mov	r4, r1
 801646c:	f101 0c14 	add.w	ip, r1, #20
 8016470:	2300      	movs	r3, #0
 8016472:	f8dc 0000 	ldr.w	r0, [ip]
 8016476:	b281      	uxth	r1, r0
 8016478:	fb02 7101 	mla	r1, r2, r1, r7
 801647c:	0c0f      	lsrs	r7, r1, #16
 801647e:	0c00      	lsrs	r0, r0, #16
 8016480:	fb02 7000 	mla	r0, r2, r0, r7
 8016484:	b289      	uxth	r1, r1
 8016486:	3301      	adds	r3, #1
 8016488:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801648c:	429d      	cmp	r5, r3
 801648e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016492:	f84c 1b04 	str.w	r1, [ip], #4
 8016496:	dcec      	bgt.n	8016472 <__multadd+0x12>
 8016498:	b1d7      	cbz	r7, 80164d0 <__multadd+0x70>
 801649a:	68a3      	ldr	r3, [r4, #8]
 801649c:	42ab      	cmp	r3, r5
 801649e:	dc12      	bgt.n	80164c6 <__multadd+0x66>
 80164a0:	6861      	ldr	r1, [r4, #4]
 80164a2:	4630      	mov	r0, r6
 80164a4:	3101      	adds	r1, #1
 80164a6:	f7ff ff90 	bl	80163ca <_Balloc>
 80164aa:	6922      	ldr	r2, [r4, #16]
 80164ac:	3202      	adds	r2, #2
 80164ae:	f104 010c 	add.w	r1, r4, #12
 80164b2:	4680      	mov	r8, r0
 80164b4:	0092      	lsls	r2, r2, #2
 80164b6:	300c      	adds	r0, #12
 80164b8:	f7fb ff1e 	bl	80122f8 <memcpy>
 80164bc:	4621      	mov	r1, r4
 80164be:	4630      	mov	r0, r6
 80164c0:	f7ff ffb7 	bl	8016432 <_Bfree>
 80164c4:	4644      	mov	r4, r8
 80164c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80164ca:	3501      	adds	r5, #1
 80164cc:	615f      	str	r7, [r3, #20]
 80164ce:	6125      	str	r5, [r4, #16]
 80164d0:	4620      	mov	r0, r4
 80164d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080164d6 <__s2b>:
 80164d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164da:	460c      	mov	r4, r1
 80164dc:	4615      	mov	r5, r2
 80164de:	461f      	mov	r7, r3
 80164e0:	2209      	movs	r2, #9
 80164e2:	3308      	adds	r3, #8
 80164e4:	4606      	mov	r6, r0
 80164e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80164ea:	2100      	movs	r1, #0
 80164ec:	2201      	movs	r2, #1
 80164ee:	429a      	cmp	r2, r3
 80164f0:	db20      	blt.n	8016534 <__s2b+0x5e>
 80164f2:	4630      	mov	r0, r6
 80164f4:	f7ff ff69 	bl	80163ca <_Balloc>
 80164f8:	9b08      	ldr	r3, [sp, #32]
 80164fa:	6143      	str	r3, [r0, #20]
 80164fc:	2d09      	cmp	r5, #9
 80164fe:	f04f 0301 	mov.w	r3, #1
 8016502:	6103      	str	r3, [r0, #16]
 8016504:	dd19      	ble.n	801653a <__s2b+0x64>
 8016506:	f104 0809 	add.w	r8, r4, #9
 801650a:	46c1      	mov	r9, r8
 801650c:	442c      	add	r4, r5
 801650e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016512:	4601      	mov	r1, r0
 8016514:	3b30      	subs	r3, #48	; 0x30
 8016516:	220a      	movs	r2, #10
 8016518:	4630      	mov	r0, r6
 801651a:	f7ff ffa1 	bl	8016460 <__multadd>
 801651e:	45a1      	cmp	r9, r4
 8016520:	d1f5      	bne.n	801650e <__s2b+0x38>
 8016522:	eb08 0405 	add.w	r4, r8, r5
 8016526:	3c08      	subs	r4, #8
 8016528:	1b2d      	subs	r5, r5, r4
 801652a:	1963      	adds	r3, r4, r5
 801652c:	42bb      	cmp	r3, r7
 801652e:	db07      	blt.n	8016540 <__s2b+0x6a>
 8016530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016534:	0052      	lsls	r2, r2, #1
 8016536:	3101      	adds	r1, #1
 8016538:	e7d9      	b.n	80164ee <__s2b+0x18>
 801653a:	340a      	adds	r4, #10
 801653c:	2509      	movs	r5, #9
 801653e:	e7f3      	b.n	8016528 <__s2b+0x52>
 8016540:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016544:	4601      	mov	r1, r0
 8016546:	3b30      	subs	r3, #48	; 0x30
 8016548:	220a      	movs	r2, #10
 801654a:	4630      	mov	r0, r6
 801654c:	f7ff ff88 	bl	8016460 <__multadd>
 8016550:	e7eb      	b.n	801652a <__s2b+0x54>

08016552 <__hi0bits>:
 8016552:	0c02      	lsrs	r2, r0, #16
 8016554:	0412      	lsls	r2, r2, #16
 8016556:	4603      	mov	r3, r0
 8016558:	b9b2      	cbnz	r2, 8016588 <__hi0bits+0x36>
 801655a:	0403      	lsls	r3, r0, #16
 801655c:	2010      	movs	r0, #16
 801655e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016562:	bf04      	itt	eq
 8016564:	021b      	lsleq	r3, r3, #8
 8016566:	3008      	addeq	r0, #8
 8016568:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801656c:	bf04      	itt	eq
 801656e:	011b      	lsleq	r3, r3, #4
 8016570:	3004      	addeq	r0, #4
 8016572:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016576:	bf04      	itt	eq
 8016578:	009b      	lsleq	r3, r3, #2
 801657a:	3002      	addeq	r0, #2
 801657c:	2b00      	cmp	r3, #0
 801657e:	db06      	blt.n	801658e <__hi0bits+0x3c>
 8016580:	005b      	lsls	r3, r3, #1
 8016582:	d503      	bpl.n	801658c <__hi0bits+0x3a>
 8016584:	3001      	adds	r0, #1
 8016586:	4770      	bx	lr
 8016588:	2000      	movs	r0, #0
 801658a:	e7e8      	b.n	801655e <__hi0bits+0xc>
 801658c:	2020      	movs	r0, #32
 801658e:	4770      	bx	lr

08016590 <__lo0bits>:
 8016590:	6803      	ldr	r3, [r0, #0]
 8016592:	f013 0207 	ands.w	r2, r3, #7
 8016596:	4601      	mov	r1, r0
 8016598:	d00b      	beq.n	80165b2 <__lo0bits+0x22>
 801659a:	07da      	lsls	r2, r3, #31
 801659c:	d423      	bmi.n	80165e6 <__lo0bits+0x56>
 801659e:	0798      	lsls	r0, r3, #30
 80165a0:	bf49      	itett	mi
 80165a2:	085b      	lsrmi	r3, r3, #1
 80165a4:	089b      	lsrpl	r3, r3, #2
 80165a6:	2001      	movmi	r0, #1
 80165a8:	600b      	strmi	r3, [r1, #0]
 80165aa:	bf5c      	itt	pl
 80165ac:	600b      	strpl	r3, [r1, #0]
 80165ae:	2002      	movpl	r0, #2
 80165b0:	4770      	bx	lr
 80165b2:	b298      	uxth	r0, r3
 80165b4:	b9a8      	cbnz	r0, 80165e2 <__lo0bits+0x52>
 80165b6:	0c1b      	lsrs	r3, r3, #16
 80165b8:	2010      	movs	r0, #16
 80165ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80165be:	bf04      	itt	eq
 80165c0:	0a1b      	lsreq	r3, r3, #8
 80165c2:	3008      	addeq	r0, #8
 80165c4:	071a      	lsls	r2, r3, #28
 80165c6:	bf04      	itt	eq
 80165c8:	091b      	lsreq	r3, r3, #4
 80165ca:	3004      	addeq	r0, #4
 80165cc:	079a      	lsls	r2, r3, #30
 80165ce:	bf04      	itt	eq
 80165d0:	089b      	lsreq	r3, r3, #2
 80165d2:	3002      	addeq	r0, #2
 80165d4:	07da      	lsls	r2, r3, #31
 80165d6:	d402      	bmi.n	80165de <__lo0bits+0x4e>
 80165d8:	085b      	lsrs	r3, r3, #1
 80165da:	d006      	beq.n	80165ea <__lo0bits+0x5a>
 80165dc:	3001      	adds	r0, #1
 80165de:	600b      	str	r3, [r1, #0]
 80165e0:	4770      	bx	lr
 80165e2:	4610      	mov	r0, r2
 80165e4:	e7e9      	b.n	80165ba <__lo0bits+0x2a>
 80165e6:	2000      	movs	r0, #0
 80165e8:	4770      	bx	lr
 80165ea:	2020      	movs	r0, #32
 80165ec:	4770      	bx	lr

080165ee <__i2b>:
 80165ee:	b510      	push	{r4, lr}
 80165f0:	460c      	mov	r4, r1
 80165f2:	2101      	movs	r1, #1
 80165f4:	f7ff fee9 	bl	80163ca <_Balloc>
 80165f8:	2201      	movs	r2, #1
 80165fa:	6144      	str	r4, [r0, #20]
 80165fc:	6102      	str	r2, [r0, #16]
 80165fe:	bd10      	pop	{r4, pc}

08016600 <__multiply>:
 8016600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016604:	4614      	mov	r4, r2
 8016606:	690a      	ldr	r2, [r1, #16]
 8016608:	6923      	ldr	r3, [r4, #16]
 801660a:	429a      	cmp	r2, r3
 801660c:	bfb8      	it	lt
 801660e:	460b      	movlt	r3, r1
 8016610:	4688      	mov	r8, r1
 8016612:	bfbc      	itt	lt
 8016614:	46a0      	movlt	r8, r4
 8016616:	461c      	movlt	r4, r3
 8016618:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801661c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016620:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016624:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016628:	eb07 0609 	add.w	r6, r7, r9
 801662c:	42b3      	cmp	r3, r6
 801662e:	bfb8      	it	lt
 8016630:	3101      	addlt	r1, #1
 8016632:	f7ff feca 	bl	80163ca <_Balloc>
 8016636:	f100 0514 	add.w	r5, r0, #20
 801663a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801663e:	462b      	mov	r3, r5
 8016640:	2200      	movs	r2, #0
 8016642:	4573      	cmp	r3, lr
 8016644:	d316      	bcc.n	8016674 <__multiply+0x74>
 8016646:	f104 0214 	add.w	r2, r4, #20
 801664a:	f108 0114 	add.w	r1, r8, #20
 801664e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016652:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016656:	9300      	str	r3, [sp, #0]
 8016658:	9b00      	ldr	r3, [sp, #0]
 801665a:	9201      	str	r2, [sp, #4]
 801665c:	4293      	cmp	r3, r2
 801665e:	d80c      	bhi.n	801667a <__multiply+0x7a>
 8016660:	2e00      	cmp	r6, #0
 8016662:	dd03      	ble.n	801666c <__multiply+0x6c>
 8016664:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016668:	2b00      	cmp	r3, #0
 801666a:	d05d      	beq.n	8016728 <__multiply+0x128>
 801666c:	6106      	str	r6, [r0, #16]
 801666e:	b003      	add	sp, #12
 8016670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016674:	f843 2b04 	str.w	r2, [r3], #4
 8016678:	e7e3      	b.n	8016642 <__multiply+0x42>
 801667a:	f8b2 b000 	ldrh.w	fp, [r2]
 801667e:	f1bb 0f00 	cmp.w	fp, #0
 8016682:	d023      	beq.n	80166cc <__multiply+0xcc>
 8016684:	4689      	mov	r9, r1
 8016686:	46ac      	mov	ip, r5
 8016688:	f04f 0800 	mov.w	r8, #0
 801668c:	f859 4b04 	ldr.w	r4, [r9], #4
 8016690:	f8dc a000 	ldr.w	sl, [ip]
 8016694:	b2a3      	uxth	r3, r4
 8016696:	fa1f fa8a 	uxth.w	sl, sl
 801669a:	fb0b a303 	mla	r3, fp, r3, sl
 801669e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80166a2:	f8dc 4000 	ldr.w	r4, [ip]
 80166a6:	4443      	add	r3, r8
 80166a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80166ac:	fb0b 840a 	mla	r4, fp, sl, r8
 80166b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80166b4:	46e2      	mov	sl, ip
 80166b6:	b29b      	uxth	r3, r3
 80166b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80166bc:	454f      	cmp	r7, r9
 80166be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80166c2:	f84a 3b04 	str.w	r3, [sl], #4
 80166c6:	d82b      	bhi.n	8016720 <__multiply+0x120>
 80166c8:	f8cc 8004 	str.w	r8, [ip, #4]
 80166cc:	9b01      	ldr	r3, [sp, #4]
 80166ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80166d2:	3204      	adds	r2, #4
 80166d4:	f1ba 0f00 	cmp.w	sl, #0
 80166d8:	d020      	beq.n	801671c <__multiply+0x11c>
 80166da:	682b      	ldr	r3, [r5, #0]
 80166dc:	4689      	mov	r9, r1
 80166de:	46a8      	mov	r8, r5
 80166e0:	f04f 0b00 	mov.w	fp, #0
 80166e4:	f8b9 c000 	ldrh.w	ip, [r9]
 80166e8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80166ec:	fb0a 440c 	mla	r4, sl, ip, r4
 80166f0:	445c      	add	r4, fp
 80166f2:	46c4      	mov	ip, r8
 80166f4:	b29b      	uxth	r3, r3
 80166f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80166fa:	f84c 3b04 	str.w	r3, [ip], #4
 80166fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8016702:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016706:	0c1b      	lsrs	r3, r3, #16
 8016708:	fb0a b303 	mla	r3, sl, r3, fp
 801670c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016710:	454f      	cmp	r7, r9
 8016712:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016716:	d805      	bhi.n	8016724 <__multiply+0x124>
 8016718:	f8c8 3004 	str.w	r3, [r8, #4]
 801671c:	3504      	adds	r5, #4
 801671e:	e79b      	b.n	8016658 <__multiply+0x58>
 8016720:	46d4      	mov	ip, sl
 8016722:	e7b3      	b.n	801668c <__multiply+0x8c>
 8016724:	46e0      	mov	r8, ip
 8016726:	e7dd      	b.n	80166e4 <__multiply+0xe4>
 8016728:	3e01      	subs	r6, #1
 801672a:	e799      	b.n	8016660 <__multiply+0x60>

0801672c <__pow5mult>:
 801672c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016730:	4615      	mov	r5, r2
 8016732:	f012 0203 	ands.w	r2, r2, #3
 8016736:	4606      	mov	r6, r0
 8016738:	460f      	mov	r7, r1
 801673a:	d007      	beq.n	801674c <__pow5mult+0x20>
 801673c:	3a01      	subs	r2, #1
 801673e:	4c21      	ldr	r4, [pc, #132]	; (80167c4 <__pow5mult+0x98>)
 8016740:	2300      	movs	r3, #0
 8016742:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016746:	f7ff fe8b 	bl	8016460 <__multadd>
 801674a:	4607      	mov	r7, r0
 801674c:	10ad      	asrs	r5, r5, #2
 801674e:	d035      	beq.n	80167bc <__pow5mult+0x90>
 8016750:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016752:	b93c      	cbnz	r4, 8016764 <__pow5mult+0x38>
 8016754:	2010      	movs	r0, #16
 8016756:	f7ff fe03 	bl	8016360 <malloc>
 801675a:	6270      	str	r0, [r6, #36]	; 0x24
 801675c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016760:	6004      	str	r4, [r0, #0]
 8016762:	60c4      	str	r4, [r0, #12]
 8016764:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016768:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801676c:	b94c      	cbnz	r4, 8016782 <__pow5mult+0x56>
 801676e:	f240 2171 	movw	r1, #625	; 0x271
 8016772:	4630      	mov	r0, r6
 8016774:	f7ff ff3b 	bl	80165ee <__i2b>
 8016778:	2300      	movs	r3, #0
 801677a:	f8c8 0008 	str.w	r0, [r8, #8]
 801677e:	4604      	mov	r4, r0
 8016780:	6003      	str	r3, [r0, #0]
 8016782:	f04f 0800 	mov.w	r8, #0
 8016786:	07eb      	lsls	r3, r5, #31
 8016788:	d50a      	bpl.n	80167a0 <__pow5mult+0x74>
 801678a:	4639      	mov	r1, r7
 801678c:	4622      	mov	r2, r4
 801678e:	4630      	mov	r0, r6
 8016790:	f7ff ff36 	bl	8016600 <__multiply>
 8016794:	4639      	mov	r1, r7
 8016796:	4681      	mov	r9, r0
 8016798:	4630      	mov	r0, r6
 801679a:	f7ff fe4a 	bl	8016432 <_Bfree>
 801679e:	464f      	mov	r7, r9
 80167a0:	106d      	asrs	r5, r5, #1
 80167a2:	d00b      	beq.n	80167bc <__pow5mult+0x90>
 80167a4:	6820      	ldr	r0, [r4, #0]
 80167a6:	b938      	cbnz	r0, 80167b8 <__pow5mult+0x8c>
 80167a8:	4622      	mov	r2, r4
 80167aa:	4621      	mov	r1, r4
 80167ac:	4630      	mov	r0, r6
 80167ae:	f7ff ff27 	bl	8016600 <__multiply>
 80167b2:	6020      	str	r0, [r4, #0]
 80167b4:	f8c0 8000 	str.w	r8, [r0]
 80167b8:	4604      	mov	r4, r0
 80167ba:	e7e4      	b.n	8016786 <__pow5mult+0x5a>
 80167bc:	4638      	mov	r0, r7
 80167be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167c2:	bf00      	nop
 80167c4:	080175a8 	.word	0x080175a8

080167c8 <__lshift>:
 80167c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167cc:	460c      	mov	r4, r1
 80167ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80167d2:	6923      	ldr	r3, [r4, #16]
 80167d4:	6849      	ldr	r1, [r1, #4]
 80167d6:	eb0a 0903 	add.w	r9, sl, r3
 80167da:	68a3      	ldr	r3, [r4, #8]
 80167dc:	4607      	mov	r7, r0
 80167de:	4616      	mov	r6, r2
 80167e0:	f109 0501 	add.w	r5, r9, #1
 80167e4:	42ab      	cmp	r3, r5
 80167e6:	db32      	blt.n	801684e <__lshift+0x86>
 80167e8:	4638      	mov	r0, r7
 80167ea:	f7ff fdee 	bl	80163ca <_Balloc>
 80167ee:	2300      	movs	r3, #0
 80167f0:	4680      	mov	r8, r0
 80167f2:	f100 0114 	add.w	r1, r0, #20
 80167f6:	461a      	mov	r2, r3
 80167f8:	4553      	cmp	r3, sl
 80167fa:	db2b      	blt.n	8016854 <__lshift+0x8c>
 80167fc:	6920      	ldr	r0, [r4, #16]
 80167fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016802:	f104 0314 	add.w	r3, r4, #20
 8016806:	f016 021f 	ands.w	r2, r6, #31
 801680a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801680e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016812:	d025      	beq.n	8016860 <__lshift+0x98>
 8016814:	f1c2 0e20 	rsb	lr, r2, #32
 8016818:	2000      	movs	r0, #0
 801681a:	681e      	ldr	r6, [r3, #0]
 801681c:	468a      	mov	sl, r1
 801681e:	4096      	lsls	r6, r2
 8016820:	4330      	orrs	r0, r6
 8016822:	f84a 0b04 	str.w	r0, [sl], #4
 8016826:	f853 0b04 	ldr.w	r0, [r3], #4
 801682a:	459c      	cmp	ip, r3
 801682c:	fa20 f00e 	lsr.w	r0, r0, lr
 8016830:	d814      	bhi.n	801685c <__lshift+0x94>
 8016832:	6048      	str	r0, [r1, #4]
 8016834:	b108      	cbz	r0, 801683a <__lshift+0x72>
 8016836:	f109 0502 	add.w	r5, r9, #2
 801683a:	3d01      	subs	r5, #1
 801683c:	4638      	mov	r0, r7
 801683e:	f8c8 5010 	str.w	r5, [r8, #16]
 8016842:	4621      	mov	r1, r4
 8016844:	f7ff fdf5 	bl	8016432 <_Bfree>
 8016848:	4640      	mov	r0, r8
 801684a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801684e:	3101      	adds	r1, #1
 8016850:	005b      	lsls	r3, r3, #1
 8016852:	e7c7      	b.n	80167e4 <__lshift+0x1c>
 8016854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016858:	3301      	adds	r3, #1
 801685a:	e7cd      	b.n	80167f8 <__lshift+0x30>
 801685c:	4651      	mov	r1, sl
 801685e:	e7dc      	b.n	801681a <__lshift+0x52>
 8016860:	3904      	subs	r1, #4
 8016862:	f853 2b04 	ldr.w	r2, [r3], #4
 8016866:	f841 2f04 	str.w	r2, [r1, #4]!
 801686a:	459c      	cmp	ip, r3
 801686c:	d8f9      	bhi.n	8016862 <__lshift+0x9a>
 801686e:	e7e4      	b.n	801683a <__lshift+0x72>

08016870 <__mcmp>:
 8016870:	6903      	ldr	r3, [r0, #16]
 8016872:	690a      	ldr	r2, [r1, #16]
 8016874:	1a9b      	subs	r3, r3, r2
 8016876:	b530      	push	{r4, r5, lr}
 8016878:	d10c      	bne.n	8016894 <__mcmp+0x24>
 801687a:	0092      	lsls	r2, r2, #2
 801687c:	3014      	adds	r0, #20
 801687e:	3114      	adds	r1, #20
 8016880:	1884      	adds	r4, r0, r2
 8016882:	4411      	add	r1, r2
 8016884:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016888:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801688c:	4295      	cmp	r5, r2
 801688e:	d003      	beq.n	8016898 <__mcmp+0x28>
 8016890:	d305      	bcc.n	801689e <__mcmp+0x2e>
 8016892:	2301      	movs	r3, #1
 8016894:	4618      	mov	r0, r3
 8016896:	bd30      	pop	{r4, r5, pc}
 8016898:	42a0      	cmp	r0, r4
 801689a:	d3f3      	bcc.n	8016884 <__mcmp+0x14>
 801689c:	e7fa      	b.n	8016894 <__mcmp+0x24>
 801689e:	f04f 33ff 	mov.w	r3, #4294967295
 80168a2:	e7f7      	b.n	8016894 <__mcmp+0x24>

080168a4 <__mdiff>:
 80168a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168a8:	460d      	mov	r5, r1
 80168aa:	4607      	mov	r7, r0
 80168ac:	4611      	mov	r1, r2
 80168ae:	4628      	mov	r0, r5
 80168b0:	4614      	mov	r4, r2
 80168b2:	f7ff ffdd 	bl	8016870 <__mcmp>
 80168b6:	1e06      	subs	r6, r0, #0
 80168b8:	d108      	bne.n	80168cc <__mdiff+0x28>
 80168ba:	4631      	mov	r1, r6
 80168bc:	4638      	mov	r0, r7
 80168be:	f7ff fd84 	bl	80163ca <_Balloc>
 80168c2:	2301      	movs	r3, #1
 80168c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80168c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168cc:	bfa4      	itt	ge
 80168ce:	4623      	movge	r3, r4
 80168d0:	462c      	movge	r4, r5
 80168d2:	4638      	mov	r0, r7
 80168d4:	6861      	ldr	r1, [r4, #4]
 80168d6:	bfa6      	itte	ge
 80168d8:	461d      	movge	r5, r3
 80168da:	2600      	movge	r6, #0
 80168dc:	2601      	movlt	r6, #1
 80168de:	f7ff fd74 	bl	80163ca <_Balloc>
 80168e2:	692b      	ldr	r3, [r5, #16]
 80168e4:	60c6      	str	r6, [r0, #12]
 80168e6:	6926      	ldr	r6, [r4, #16]
 80168e8:	f105 0914 	add.w	r9, r5, #20
 80168ec:	f104 0214 	add.w	r2, r4, #20
 80168f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80168f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80168f8:	f100 0514 	add.w	r5, r0, #20
 80168fc:	f04f 0e00 	mov.w	lr, #0
 8016900:	f852 ab04 	ldr.w	sl, [r2], #4
 8016904:	f859 4b04 	ldr.w	r4, [r9], #4
 8016908:	fa1e f18a 	uxtah	r1, lr, sl
 801690c:	b2a3      	uxth	r3, r4
 801690e:	1ac9      	subs	r1, r1, r3
 8016910:	0c23      	lsrs	r3, r4, #16
 8016912:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016916:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801691a:	b289      	uxth	r1, r1
 801691c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016920:	45c8      	cmp	r8, r9
 8016922:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016926:	4694      	mov	ip, r2
 8016928:	f845 3b04 	str.w	r3, [r5], #4
 801692c:	d8e8      	bhi.n	8016900 <__mdiff+0x5c>
 801692e:	45bc      	cmp	ip, r7
 8016930:	d304      	bcc.n	801693c <__mdiff+0x98>
 8016932:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016936:	b183      	cbz	r3, 801695a <__mdiff+0xb6>
 8016938:	6106      	str	r6, [r0, #16]
 801693a:	e7c5      	b.n	80168c8 <__mdiff+0x24>
 801693c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016940:	fa1e f381 	uxtah	r3, lr, r1
 8016944:	141a      	asrs	r2, r3, #16
 8016946:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801694a:	b29b      	uxth	r3, r3
 801694c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016950:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016954:	f845 3b04 	str.w	r3, [r5], #4
 8016958:	e7e9      	b.n	801692e <__mdiff+0x8a>
 801695a:	3e01      	subs	r6, #1
 801695c:	e7e9      	b.n	8016932 <__mdiff+0x8e>
	...

08016960 <__ulp>:
 8016960:	4b12      	ldr	r3, [pc, #72]	; (80169ac <__ulp+0x4c>)
 8016962:	ee10 2a90 	vmov	r2, s1
 8016966:	401a      	ands	r2, r3
 8016968:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801696c:	2b00      	cmp	r3, #0
 801696e:	dd04      	ble.n	801697a <__ulp+0x1a>
 8016970:	2000      	movs	r0, #0
 8016972:	4619      	mov	r1, r3
 8016974:	ec41 0b10 	vmov	d0, r0, r1
 8016978:	4770      	bx	lr
 801697a:	425b      	negs	r3, r3
 801697c:	151b      	asrs	r3, r3, #20
 801697e:	2b13      	cmp	r3, #19
 8016980:	f04f 0000 	mov.w	r0, #0
 8016984:	f04f 0100 	mov.w	r1, #0
 8016988:	dc04      	bgt.n	8016994 <__ulp+0x34>
 801698a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801698e:	fa42 f103 	asr.w	r1, r2, r3
 8016992:	e7ef      	b.n	8016974 <__ulp+0x14>
 8016994:	3b14      	subs	r3, #20
 8016996:	2b1e      	cmp	r3, #30
 8016998:	f04f 0201 	mov.w	r2, #1
 801699c:	bfda      	itte	le
 801699e:	f1c3 031f 	rsble	r3, r3, #31
 80169a2:	fa02 f303 	lslle.w	r3, r2, r3
 80169a6:	4613      	movgt	r3, r2
 80169a8:	4618      	mov	r0, r3
 80169aa:	e7e3      	b.n	8016974 <__ulp+0x14>
 80169ac:	7ff00000 	.word	0x7ff00000

080169b0 <__b2d>:
 80169b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169b2:	6905      	ldr	r5, [r0, #16]
 80169b4:	f100 0714 	add.w	r7, r0, #20
 80169b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80169bc:	1f2e      	subs	r6, r5, #4
 80169be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80169c2:	4620      	mov	r0, r4
 80169c4:	f7ff fdc5 	bl	8016552 <__hi0bits>
 80169c8:	f1c0 0320 	rsb	r3, r0, #32
 80169cc:	280a      	cmp	r0, #10
 80169ce:	600b      	str	r3, [r1, #0]
 80169d0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016a48 <__b2d+0x98>
 80169d4:	dc14      	bgt.n	8016a00 <__b2d+0x50>
 80169d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80169da:	fa24 f10e 	lsr.w	r1, r4, lr
 80169de:	42b7      	cmp	r7, r6
 80169e0:	ea41 030c 	orr.w	r3, r1, ip
 80169e4:	bf34      	ite	cc
 80169e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80169ea:	2100      	movcs	r1, #0
 80169ec:	3015      	adds	r0, #21
 80169ee:	fa04 f000 	lsl.w	r0, r4, r0
 80169f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80169f6:	ea40 0201 	orr.w	r2, r0, r1
 80169fa:	ec43 2b10 	vmov	d0, r2, r3
 80169fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a00:	42b7      	cmp	r7, r6
 8016a02:	bf3a      	itte	cc
 8016a04:	f1a5 0608 	subcc.w	r6, r5, #8
 8016a08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016a0c:	2100      	movcs	r1, #0
 8016a0e:	380b      	subs	r0, #11
 8016a10:	d015      	beq.n	8016a3e <__b2d+0x8e>
 8016a12:	4084      	lsls	r4, r0
 8016a14:	f1c0 0520 	rsb	r5, r0, #32
 8016a18:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016a1c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016a20:	42be      	cmp	r6, r7
 8016a22:	fa21 fc05 	lsr.w	ip, r1, r5
 8016a26:	ea44 030c 	orr.w	r3, r4, ip
 8016a2a:	bf8c      	ite	hi
 8016a2c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016a30:	2400      	movls	r4, #0
 8016a32:	fa01 f000 	lsl.w	r0, r1, r0
 8016a36:	40ec      	lsrs	r4, r5
 8016a38:	ea40 0204 	orr.w	r2, r0, r4
 8016a3c:	e7dd      	b.n	80169fa <__b2d+0x4a>
 8016a3e:	ea44 030c 	orr.w	r3, r4, ip
 8016a42:	460a      	mov	r2, r1
 8016a44:	e7d9      	b.n	80169fa <__b2d+0x4a>
 8016a46:	bf00      	nop
 8016a48:	3ff00000 	.word	0x3ff00000

08016a4c <__d2b>:
 8016a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a50:	460e      	mov	r6, r1
 8016a52:	2101      	movs	r1, #1
 8016a54:	ec59 8b10 	vmov	r8, r9, d0
 8016a58:	4615      	mov	r5, r2
 8016a5a:	f7ff fcb6 	bl	80163ca <_Balloc>
 8016a5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016a62:	4607      	mov	r7, r0
 8016a64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a68:	bb34      	cbnz	r4, 8016ab8 <__d2b+0x6c>
 8016a6a:	9301      	str	r3, [sp, #4]
 8016a6c:	f1b8 0300 	subs.w	r3, r8, #0
 8016a70:	d027      	beq.n	8016ac2 <__d2b+0x76>
 8016a72:	a802      	add	r0, sp, #8
 8016a74:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016a78:	f7ff fd8a 	bl	8016590 <__lo0bits>
 8016a7c:	9900      	ldr	r1, [sp, #0]
 8016a7e:	b1f0      	cbz	r0, 8016abe <__d2b+0x72>
 8016a80:	9a01      	ldr	r2, [sp, #4]
 8016a82:	f1c0 0320 	rsb	r3, r0, #32
 8016a86:	fa02 f303 	lsl.w	r3, r2, r3
 8016a8a:	430b      	orrs	r3, r1
 8016a8c:	40c2      	lsrs	r2, r0
 8016a8e:	617b      	str	r3, [r7, #20]
 8016a90:	9201      	str	r2, [sp, #4]
 8016a92:	9b01      	ldr	r3, [sp, #4]
 8016a94:	61bb      	str	r3, [r7, #24]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	bf14      	ite	ne
 8016a9a:	2102      	movne	r1, #2
 8016a9c:	2101      	moveq	r1, #1
 8016a9e:	6139      	str	r1, [r7, #16]
 8016aa0:	b1c4      	cbz	r4, 8016ad4 <__d2b+0x88>
 8016aa2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016aa6:	4404      	add	r4, r0
 8016aa8:	6034      	str	r4, [r6, #0]
 8016aaa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016aae:	6028      	str	r0, [r5, #0]
 8016ab0:	4638      	mov	r0, r7
 8016ab2:	b003      	add	sp, #12
 8016ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016abc:	e7d5      	b.n	8016a6a <__d2b+0x1e>
 8016abe:	6179      	str	r1, [r7, #20]
 8016ac0:	e7e7      	b.n	8016a92 <__d2b+0x46>
 8016ac2:	a801      	add	r0, sp, #4
 8016ac4:	f7ff fd64 	bl	8016590 <__lo0bits>
 8016ac8:	9b01      	ldr	r3, [sp, #4]
 8016aca:	617b      	str	r3, [r7, #20]
 8016acc:	2101      	movs	r1, #1
 8016ace:	6139      	str	r1, [r7, #16]
 8016ad0:	3020      	adds	r0, #32
 8016ad2:	e7e5      	b.n	8016aa0 <__d2b+0x54>
 8016ad4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016ad8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016adc:	6030      	str	r0, [r6, #0]
 8016ade:	6918      	ldr	r0, [r3, #16]
 8016ae0:	f7ff fd37 	bl	8016552 <__hi0bits>
 8016ae4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016ae8:	e7e1      	b.n	8016aae <__d2b+0x62>

08016aea <__ratio>:
 8016aea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aee:	4688      	mov	r8, r1
 8016af0:	4669      	mov	r1, sp
 8016af2:	4681      	mov	r9, r0
 8016af4:	f7ff ff5c 	bl	80169b0 <__b2d>
 8016af8:	a901      	add	r1, sp, #4
 8016afa:	4640      	mov	r0, r8
 8016afc:	ec57 6b10 	vmov	r6, r7, d0
 8016b00:	f7ff ff56 	bl	80169b0 <__b2d>
 8016b04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016b08:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016b0c:	eba3 0c02 	sub.w	ip, r3, r2
 8016b10:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016b14:	1a9b      	subs	r3, r3, r2
 8016b16:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016b1a:	ec5b ab10 	vmov	sl, fp, d0
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	bfce      	itee	gt
 8016b22:	463a      	movgt	r2, r7
 8016b24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016b28:	465a      	movle	r2, fp
 8016b2a:	4659      	mov	r1, fp
 8016b2c:	463d      	mov	r5, r7
 8016b2e:	bfd4      	ite	le
 8016b30:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016b34:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016b38:	4630      	mov	r0, r6
 8016b3a:	ee10 2a10 	vmov	r2, s0
 8016b3e:	460b      	mov	r3, r1
 8016b40:	4629      	mov	r1, r5
 8016b42:	f7f1 fdbb 	bl	80086bc <__aeabi_ddiv>
 8016b46:	ec41 0b10 	vmov	d0, r0, r1
 8016b4a:	b003      	add	sp, #12
 8016b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b50 <__copybits>:
 8016b50:	3901      	subs	r1, #1
 8016b52:	b510      	push	{r4, lr}
 8016b54:	1149      	asrs	r1, r1, #5
 8016b56:	6914      	ldr	r4, [r2, #16]
 8016b58:	3101      	adds	r1, #1
 8016b5a:	f102 0314 	add.w	r3, r2, #20
 8016b5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016b62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016b66:	42a3      	cmp	r3, r4
 8016b68:	4602      	mov	r2, r0
 8016b6a:	d303      	bcc.n	8016b74 <__copybits+0x24>
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	428a      	cmp	r2, r1
 8016b70:	d305      	bcc.n	8016b7e <__copybits+0x2e>
 8016b72:	bd10      	pop	{r4, pc}
 8016b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b78:	f840 2b04 	str.w	r2, [r0], #4
 8016b7c:	e7f3      	b.n	8016b66 <__copybits+0x16>
 8016b7e:	f842 3b04 	str.w	r3, [r2], #4
 8016b82:	e7f4      	b.n	8016b6e <__copybits+0x1e>

08016b84 <__any_on>:
 8016b84:	f100 0214 	add.w	r2, r0, #20
 8016b88:	6900      	ldr	r0, [r0, #16]
 8016b8a:	114b      	asrs	r3, r1, #5
 8016b8c:	4298      	cmp	r0, r3
 8016b8e:	b510      	push	{r4, lr}
 8016b90:	db11      	blt.n	8016bb6 <__any_on+0x32>
 8016b92:	dd0a      	ble.n	8016baa <__any_on+0x26>
 8016b94:	f011 011f 	ands.w	r1, r1, #31
 8016b98:	d007      	beq.n	8016baa <__any_on+0x26>
 8016b9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016b9e:	fa24 f001 	lsr.w	r0, r4, r1
 8016ba2:	fa00 f101 	lsl.w	r1, r0, r1
 8016ba6:	428c      	cmp	r4, r1
 8016ba8:	d10b      	bne.n	8016bc2 <__any_on+0x3e>
 8016baa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016bae:	4293      	cmp	r3, r2
 8016bb0:	d803      	bhi.n	8016bba <__any_on+0x36>
 8016bb2:	2000      	movs	r0, #0
 8016bb4:	bd10      	pop	{r4, pc}
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	e7f7      	b.n	8016baa <__any_on+0x26>
 8016bba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016bbe:	2900      	cmp	r1, #0
 8016bc0:	d0f5      	beq.n	8016bae <__any_on+0x2a>
 8016bc2:	2001      	movs	r0, #1
 8016bc4:	e7f6      	b.n	8016bb4 <__any_on+0x30>

08016bc6 <_calloc_r>:
 8016bc6:	b538      	push	{r3, r4, r5, lr}
 8016bc8:	fb02 f401 	mul.w	r4, r2, r1
 8016bcc:	4621      	mov	r1, r4
 8016bce:	f7fb fbf5 	bl	80123bc <_malloc_r>
 8016bd2:	4605      	mov	r5, r0
 8016bd4:	b118      	cbz	r0, 8016bde <_calloc_r+0x18>
 8016bd6:	4622      	mov	r2, r4
 8016bd8:	2100      	movs	r1, #0
 8016bda:	f7fb fb98 	bl	801230e <memset>
 8016bde:	4628      	mov	r0, r5
 8016be0:	bd38      	pop	{r3, r4, r5, pc}

08016be2 <_realloc_r>:
 8016be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016be4:	4607      	mov	r7, r0
 8016be6:	4614      	mov	r4, r2
 8016be8:	460e      	mov	r6, r1
 8016bea:	b921      	cbnz	r1, 8016bf6 <_realloc_r+0x14>
 8016bec:	4611      	mov	r1, r2
 8016bee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016bf2:	f7fb bbe3 	b.w	80123bc <_malloc_r>
 8016bf6:	b922      	cbnz	r2, 8016c02 <_realloc_r+0x20>
 8016bf8:	f7fb fb92 	bl	8012320 <_free_r>
 8016bfc:	4625      	mov	r5, r4
 8016bfe:	4628      	mov	r0, r5
 8016c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c02:	f000 f9ce 	bl	8016fa2 <_malloc_usable_size_r>
 8016c06:	42a0      	cmp	r0, r4
 8016c08:	d20f      	bcs.n	8016c2a <_realloc_r+0x48>
 8016c0a:	4621      	mov	r1, r4
 8016c0c:	4638      	mov	r0, r7
 8016c0e:	f7fb fbd5 	bl	80123bc <_malloc_r>
 8016c12:	4605      	mov	r5, r0
 8016c14:	2800      	cmp	r0, #0
 8016c16:	d0f2      	beq.n	8016bfe <_realloc_r+0x1c>
 8016c18:	4631      	mov	r1, r6
 8016c1a:	4622      	mov	r2, r4
 8016c1c:	f7fb fb6c 	bl	80122f8 <memcpy>
 8016c20:	4631      	mov	r1, r6
 8016c22:	4638      	mov	r0, r7
 8016c24:	f7fb fb7c 	bl	8012320 <_free_r>
 8016c28:	e7e9      	b.n	8016bfe <_realloc_r+0x1c>
 8016c2a:	4635      	mov	r5, r6
 8016c2c:	e7e7      	b.n	8016bfe <_realloc_r+0x1c>

08016c2e <__ssputs_r>:
 8016c2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c32:	688e      	ldr	r6, [r1, #8]
 8016c34:	429e      	cmp	r6, r3
 8016c36:	4682      	mov	sl, r0
 8016c38:	460c      	mov	r4, r1
 8016c3a:	4690      	mov	r8, r2
 8016c3c:	4699      	mov	r9, r3
 8016c3e:	d837      	bhi.n	8016cb0 <__ssputs_r+0x82>
 8016c40:	898a      	ldrh	r2, [r1, #12]
 8016c42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016c46:	d031      	beq.n	8016cac <__ssputs_r+0x7e>
 8016c48:	6825      	ldr	r5, [r4, #0]
 8016c4a:	6909      	ldr	r1, [r1, #16]
 8016c4c:	1a6f      	subs	r7, r5, r1
 8016c4e:	6965      	ldr	r5, [r4, #20]
 8016c50:	2302      	movs	r3, #2
 8016c52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c56:	fb95 f5f3 	sdiv	r5, r5, r3
 8016c5a:	f109 0301 	add.w	r3, r9, #1
 8016c5e:	443b      	add	r3, r7
 8016c60:	429d      	cmp	r5, r3
 8016c62:	bf38      	it	cc
 8016c64:	461d      	movcc	r5, r3
 8016c66:	0553      	lsls	r3, r2, #21
 8016c68:	d530      	bpl.n	8016ccc <__ssputs_r+0x9e>
 8016c6a:	4629      	mov	r1, r5
 8016c6c:	f7fb fba6 	bl	80123bc <_malloc_r>
 8016c70:	4606      	mov	r6, r0
 8016c72:	b950      	cbnz	r0, 8016c8a <__ssputs_r+0x5c>
 8016c74:	230c      	movs	r3, #12
 8016c76:	f8ca 3000 	str.w	r3, [sl]
 8016c7a:	89a3      	ldrh	r3, [r4, #12]
 8016c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c80:	81a3      	strh	r3, [r4, #12]
 8016c82:	f04f 30ff 	mov.w	r0, #4294967295
 8016c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c8a:	463a      	mov	r2, r7
 8016c8c:	6921      	ldr	r1, [r4, #16]
 8016c8e:	f7fb fb33 	bl	80122f8 <memcpy>
 8016c92:	89a3      	ldrh	r3, [r4, #12]
 8016c94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c9c:	81a3      	strh	r3, [r4, #12]
 8016c9e:	6126      	str	r6, [r4, #16]
 8016ca0:	6165      	str	r5, [r4, #20]
 8016ca2:	443e      	add	r6, r7
 8016ca4:	1bed      	subs	r5, r5, r7
 8016ca6:	6026      	str	r6, [r4, #0]
 8016ca8:	60a5      	str	r5, [r4, #8]
 8016caa:	464e      	mov	r6, r9
 8016cac:	454e      	cmp	r6, r9
 8016cae:	d900      	bls.n	8016cb2 <__ssputs_r+0x84>
 8016cb0:	464e      	mov	r6, r9
 8016cb2:	4632      	mov	r2, r6
 8016cb4:	4641      	mov	r1, r8
 8016cb6:	6820      	ldr	r0, [r4, #0]
 8016cb8:	f7ff fb6c 	bl	8016394 <memmove>
 8016cbc:	68a3      	ldr	r3, [r4, #8]
 8016cbe:	1b9b      	subs	r3, r3, r6
 8016cc0:	60a3      	str	r3, [r4, #8]
 8016cc2:	6823      	ldr	r3, [r4, #0]
 8016cc4:	441e      	add	r6, r3
 8016cc6:	6026      	str	r6, [r4, #0]
 8016cc8:	2000      	movs	r0, #0
 8016cca:	e7dc      	b.n	8016c86 <__ssputs_r+0x58>
 8016ccc:	462a      	mov	r2, r5
 8016cce:	f7ff ff88 	bl	8016be2 <_realloc_r>
 8016cd2:	4606      	mov	r6, r0
 8016cd4:	2800      	cmp	r0, #0
 8016cd6:	d1e2      	bne.n	8016c9e <__ssputs_r+0x70>
 8016cd8:	6921      	ldr	r1, [r4, #16]
 8016cda:	4650      	mov	r0, sl
 8016cdc:	f7fb fb20 	bl	8012320 <_free_r>
 8016ce0:	e7c8      	b.n	8016c74 <__ssputs_r+0x46>
	...

08016ce4 <_svfiprintf_r>:
 8016ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ce8:	461d      	mov	r5, r3
 8016cea:	898b      	ldrh	r3, [r1, #12]
 8016cec:	061f      	lsls	r7, r3, #24
 8016cee:	b09d      	sub	sp, #116	; 0x74
 8016cf0:	4680      	mov	r8, r0
 8016cf2:	460c      	mov	r4, r1
 8016cf4:	4616      	mov	r6, r2
 8016cf6:	d50f      	bpl.n	8016d18 <_svfiprintf_r+0x34>
 8016cf8:	690b      	ldr	r3, [r1, #16]
 8016cfa:	b96b      	cbnz	r3, 8016d18 <_svfiprintf_r+0x34>
 8016cfc:	2140      	movs	r1, #64	; 0x40
 8016cfe:	f7fb fb5d 	bl	80123bc <_malloc_r>
 8016d02:	6020      	str	r0, [r4, #0]
 8016d04:	6120      	str	r0, [r4, #16]
 8016d06:	b928      	cbnz	r0, 8016d14 <_svfiprintf_r+0x30>
 8016d08:	230c      	movs	r3, #12
 8016d0a:	f8c8 3000 	str.w	r3, [r8]
 8016d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8016d12:	e0c8      	b.n	8016ea6 <_svfiprintf_r+0x1c2>
 8016d14:	2340      	movs	r3, #64	; 0x40
 8016d16:	6163      	str	r3, [r4, #20]
 8016d18:	2300      	movs	r3, #0
 8016d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8016d1c:	2320      	movs	r3, #32
 8016d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d22:	2330      	movs	r3, #48	; 0x30
 8016d24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d28:	9503      	str	r5, [sp, #12]
 8016d2a:	f04f 0b01 	mov.w	fp, #1
 8016d2e:	4637      	mov	r7, r6
 8016d30:	463d      	mov	r5, r7
 8016d32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016d36:	b10b      	cbz	r3, 8016d3c <_svfiprintf_r+0x58>
 8016d38:	2b25      	cmp	r3, #37	; 0x25
 8016d3a:	d13e      	bne.n	8016dba <_svfiprintf_r+0xd6>
 8016d3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8016d40:	d00b      	beq.n	8016d5a <_svfiprintf_r+0x76>
 8016d42:	4653      	mov	r3, sl
 8016d44:	4632      	mov	r2, r6
 8016d46:	4621      	mov	r1, r4
 8016d48:	4640      	mov	r0, r8
 8016d4a:	f7ff ff70 	bl	8016c2e <__ssputs_r>
 8016d4e:	3001      	adds	r0, #1
 8016d50:	f000 80a4 	beq.w	8016e9c <_svfiprintf_r+0x1b8>
 8016d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d56:	4453      	add	r3, sl
 8016d58:	9309      	str	r3, [sp, #36]	; 0x24
 8016d5a:	783b      	ldrb	r3, [r7, #0]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	f000 809d 	beq.w	8016e9c <_svfiprintf_r+0x1b8>
 8016d62:	2300      	movs	r3, #0
 8016d64:	f04f 32ff 	mov.w	r2, #4294967295
 8016d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d6c:	9304      	str	r3, [sp, #16]
 8016d6e:	9307      	str	r3, [sp, #28]
 8016d70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016d74:	931a      	str	r3, [sp, #104]	; 0x68
 8016d76:	462f      	mov	r7, r5
 8016d78:	2205      	movs	r2, #5
 8016d7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016d7e:	4850      	ldr	r0, [pc, #320]	; (8016ec0 <_svfiprintf_r+0x1dc>)
 8016d80:	f7f1 f966 	bl	8008050 <memchr>
 8016d84:	9b04      	ldr	r3, [sp, #16]
 8016d86:	b9d0      	cbnz	r0, 8016dbe <_svfiprintf_r+0xda>
 8016d88:	06d9      	lsls	r1, r3, #27
 8016d8a:	bf44      	itt	mi
 8016d8c:	2220      	movmi	r2, #32
 8016d8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016d92:	071a      	lsls	r2, r3, #28
 8016d94:	bf44      	itt	mi
 8016d96:	222b      	movmi	r2, #43	; 0x2b
 8016d98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016d9c:	782a      	ldrb	r2, [r5, #0]
 8016d9e:	2a2a      	cmp	r2, #42	; 0x2a
 8016da0:	d015      	beq.n	8016dce <_svfiprintf_r+0xea>
 8016da2:	9a07      	ldr	r2, [sp, #28]
 8016da4:	462f      	mov	r7, r5
 8016da6:	2000      	movs	r0, #0
 8016da8:	250a      	movs	r5, #10
 8016daa:	4639      	mov	r1, r7
 8016dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016db0:	3b30      	subs	r3, #48	; 0x30
 8016db2:	2b09      	cmp	r3, #9
 8016db4:	d94d      	bls.n	8016e52 <_svfiprintf_r+0x16e>
 8016db6:	b1b8      	cbz	r0, 8016de8 <_svfiprintf_r+0x104>
 8016db8:	e00f      	b.n	8016dda <_svfiprintf_r+0xf6>
 8016dba:	462f      	mov	r7, r5
 8016dbc:	e7b8      	b.n	8016d30 <_svfiprintf_r+0x4c>
 8016dbe:	4a40      	ldr	r2, [pc, #256]	; (8016ec0 <_svfiprintf_r+0x1dc>)
 8016dc0:	1a80      	subs	r0, r0, r2
 8016dc2:	fa0b f000 	lsl.w	r0, fp, r0
 8016dc6:	4318      	orrs	r0, r3
 8016dc8:	9004      	str	r0, [sp, #16]
 8016dca:	463d      	mov	r5, r7
 8016dcc:	e7d3      	b.n	8016d76 <_svfiprintf_r+0x92>
 8016dce:	9a03      	ldr	r2, [sp, #12]
 8016dd0:	1d11      	adds	r1, r2, #4
 8016dd2:	6812      	ldr	r2, [r2, #0]
 8016dd4:	9103      	str	r1, [sp, #12]
 8016dd6:	2a00      	cmp	r2, #0
 8016dd8:	db01      	blt.n	8016dde <_svfiprintf_r+0xfa>
 8016dda:	9207      	str	r2, [sp, #28]
 8016ddc:	e004      	b.n	8016de8 <_svfiprintf_r+0x104>
 8016dde:	4252      	negs	r2, r2
 8016de0:	f043 0302 	orr.w	r3, r3, #2
 8016de4:	9207      	str	r2, [sp, #28]
 8016de6:	9304      	str	r3, [sp, #16]
 8016de8:	783b      	ldrb	r3, [r7, #0]
 8016dea:	2b2e      	cmp	r3, #46	; 0x2e
 8016dec:	d10c      	bne.n	8016e08 <_svfiprintf_r+0x124>
 8016dee:	787b      	ldrb	r3, [r7, #1]
 8016df0:	2b2a      	cmp	r3, #42	; 0x2a
 8016df2:	d133      	bne.n	8016e5c <_svfiprintf_r+0x178>
 8016df4:	9b03      	ldr	r3, [sp, #12]
 8016df6:	1d1a      	adds	r2, r3, #4
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	9203      	str	r2, [sp, #12]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	bfb8      	it	lt
 8016e00:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e04:	3702      	adds	r7, #2
 8016e06:	9305      	str	r3, [sp, #20]
 8016e08:	4d2e      	ldr	r5, [pc, #184]	; (8016ec4 <_svfiprintf_r+0x1e0>)
 8016e0a:	7839      	ldrb	r1, [r7, #0]
 8016e0c:	2203      	movs	r2, #3
 8016e0e:	4628      	mov	r0, r5
 8016e10:	f7f1 f91e 	bl	8008050 <memchr>
 8016e14:	b138      	cbz	r0, 8016e26 <_svfiprintf_r+0x142>
 8016e16:	2340      	movs	r3, #64	; 0x40
 8016e18:	1b40      	subs	r0, r0, r5
 8016e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8016e1e:	9b04      	ldr	r3, [sp, #16]
 8016e20:	4303      	orrs	r3, r0
 8016e22:	3701      	adds	r7, #1
 8016e24:	9304      	str	r3, [sp, #16]
 8016e26:	7839      	ldrb	r1, [r7, #0]
 8016e28:	4827      	ldr	r0, [pc, #156]	; (8016ec8 <_svfiprintf_r+0x1e4>)
 8016e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e2e:	2206      	movs	r2, #6
 8016e30:	1c7e      	adds	r6, r7, #1
 8016e32:	f7f1 f90d 	bl	8008050 <memchr>
 8016e36:	2800      	cmp	r0, #0
 8016e38:	d038      	beq.n	8016eac <_svfiprintf_r+0x1c8>
 8016e3a:	4b24      	ldr	r3, [pc, #144]	; (8016ecc <_svfiprintf_r+0x1e8>)
 8016e3c:	bb13      	cbnz	r3, 8016e84 <_svfiprintf_r+0x1a0>
 8016e3e:	9b03      	ldr	r3, [sp, #12]
 8016e40:	3307      	adds	r3, #7
 8016e42:	f023 0307 	bic.w	r3, r3, #7
 8016e46:	3308      	adds	r3, #8
 8016e48:	9303      	str	r3, [sp, #12]
 8016e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e4c:	444b      	add	r3, r9
 8016e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8016e50:	e76d      	b.n	8016d2e <_svfiprintf_r+0x4a>
 8016e52:	fb05 3202 	mla	r2, r5, r2, r3
 8016e56:	2001      	movs	r0, #1
 8016e58:	460f      	mov	r7, r1
 8016e5a:	e7a6      	b.n	8016daa <_svfiprintf_r+0xc6>
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	3701      	adds	r7, #1
 8016e60:	9305      	str	r3, [sp, #20]
 8016e62:	4619      	mov	r1, r3
 8016e64:	250a      	movs	r5, #10
 8016e66:	4638      	mov	r0, r7
 8016e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e6c:	3a30      	subs	r2, #48	; 0x30
 8016e6e:	2a09      	cmp	r2, #9
 8016e70:	d903      	bls.n	8016e7a <_svfiprintf_r+0x196>
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d0c8      	beq.n	8016e08 <_svfiprintf_r+0x124>
 8016e76:	9105      	str	r1, [sp, #20]
 8016e78:	e7c6      	b.n	8016e08 <_svfiprintf_r+0x124>
 8016e7a:	fb05 2101 	mla	r1, r5, r1, r2
 8016e7e:	2301      	movs	r3, #1
 8016e80:	4607      	mov	r7, r0
 8016e82:	e7f0      	b.n	8016e66 <_svfiprintf_r+0x182>
 8016e84:	ab03      	add	r3, sp, #12
 8016e86:	9300      	str	r3, [sp, #0]
 8016e88:	4622      	mov	r2, r4
 8016e8a:	4b11      	ldr	r3, [pc, #68]	; (8016ed0 <_svfiprintf_r+0x1ec>)
 8016e8c:	a904      	add	r1, sp, #16
 8016e8e:	4640      	mov	r0, r8
 8016e90:	f7fb fcc2 	bl	8012818 <_printf_float>
 8016e94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016e98:	4681      	mov	r9, r0
 8016e9a:	d1d6      	bne.n	8016e4a <_svfiprintf_r+0x166>
 8016e9c:	89a3      	ldrh	r3, [r4, #12]
 8016e9e:	065b      	lsls	r3, r3, #25
 8016ea0:	f53f af35 	bmi.w	8016d0e <_svfiprintf_r+0x2a>
 8016ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ea6:	b01d      	add	sp, #116	; 0x74
 8016ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eac:	ab03      	add	r3, sp, #12
 8016eae:	9300      	str	r3, [sp, #0]
 8016eb0:	4622      	mov	r2, r4
 8016eb2:	4b07      	ldr	r3, [pc, #28]	; (8016ed0 <_svfiprintf_r+0x1ec>)
 8016eb4:	a904      	add	r1, sp, #16
 8016eb6:	4640      	mov	r0, r8
 8016eb8:	f7fb ff64 	bl	8012d84 <_printf_i>
 8016ebc:	e7ea      	b.n	8016e94 <_svfiprintf_r+0x1b0>
 8016ebe:	bf00      	nop
 8016ec0:	080173ec 	.word	0x080173ec
 8016ec4:	080173f2 	.word	0x080173f2
 8016ec8:	080173f6 	.word	0x080173f6
 8016ecc:	08012819 	.word	0x08012819
 8016ed0:	08016c2f 	.word	0x08016c2f

08016ed4 <_putc_r>:
 8016ed4:	b570      	push	{r4, r5, r6, lr}
 8016ed6:	460d      	mov	r5, r1
 8016ed8:	4614      	mov	r4, r2
 8016eda:	4606      	mov	r6, r0
 8016edc:	b118      	cbz	r0, 8016ee6 <_putc_r+0x12>
 8016ede:	6983      	ldr	r3, [r0, #24]
 8016ee0:	b90b      	cbnz	r3, 8016ee6 <_putc_r+0x12>
 8016ee2:	f7fb f8db 	bl	801209c <__sinit>
 8016ee6:	4b13      	ldr	r3, [pc, #76]	; (8016f34 <_putc_r+0x60>)
 8016ee8:	429c      	cmp	r4, r3
 8016eea:	d112      	bne.n	8016f12 <_putc_r+0x3e>
 8016eec:	6874      	ldr	r4, [r6, #4]
 8016eee:	68a3      	ldr	r3, [r4, #8]
 8016ef0:	3b01      	subs	r3, #1
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	60a3      	str	r3, [r4, #8]
 8016ef6:	da16      	bge.n	8016f26 <_putc_r+0x52>
 8016ef8:	69a2      	ldr	r2, [r4, #24]
 8016efa:	4293      	cmp	r3, r2
 8016efc:	db02      	blt.n	8016f04 <_putc_r+0x30>
 8016efe:	b2eb      	uxtb	r3, r5
 8016f00:	2b0a      	cmp	r3, #10
 8016f02:	d110      	bne.n	8016f26 <_putc_r+0x52>
 8016f04:	4622      	mov	r2, r4
 8016f06:	4629      	mov	r1, r5
 8016f08:	4630      	mov	r0, r6
 8016f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f0e:	f7fd bf85 	b.w	8014e1c <__swbuf_r>
 8016f12:	4b09      	ldr	r3, [pc, #36]	; (8016f38 <_putc_r+0x64>)
 8016f14:	429c      	cmp	r4, r3
 8016f16:	d101      	bne.n	8016f1c <_putc_r+0x48>
 8016f18:	68b4      	ldr	r4, [r6, #8]
 8016f1a:	e7e8      	b.n	8016eee <_putc_r+0x1a>
 8016f1c:	4b07      	ldr	r3, [pc, #28]	; (8016f3c <_putc_r+0x68>)
 8016f1e:	429c      	cmp	r4, r3
 8016f20:	bf08      	it	eq
 8016f22:	68f4      	ldreq	r4, [r6, #12]
 8016f24:	e7e3      	b.n	8016eee <_putc_r+0x1a>
 8016f26:	6823      	ldr	r3, [r4, #0]
 8016f28:	1c5a      	adds	r2, r3, #1
 8016f2a:	6022      	str	r2, [r4, #0]
 8016f2c:	701d      	strb	r5, [r3, #0]
 8016f2e:	b2e8      	uxtb	r0, r5
 8016f30:	bd70      	pop	{r4, r5, r6, pc}
 8016f32:	bf00      	nop
 8016f34:	080173a8 	.word	0x080173a8
 8016f38:	080173c8 	.word	0x080173c8
 8016f3c:	08017388 	.word	0x08017388

08016f40 <_read_r>:
 8016f40:	b538      	push	{r3, r4, r5, lr}
 8016f42:	4c07      	ldr	r4, [pc, #28]	; (8016f60 <_read_r+0x20>)
 8016f44:	4605      	mov	r5, r0
 8016f46:	4608      	mov	r0, r1
 8016f48:	4611      	mov	r1, r2
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	6022      	str	r2, [r4, #0]
 8016f4e:	461a      	mov	r2, r3
 8016f50:	f7f6 fefa 	bl	800dd48 <_read>
 8016f54:	1c43      	adds	r3, r0, #1
 8016f56:	d102      	bne.n	8016f5e <_read_r+0x1e>
 8016f58:	6823      	ldr	r3, [r4, #0]
 8016f5a:	b103      	cbz	r3, 8016f5e <_read_r+0x1e>
 8016f5c:	602b      	str	r3, [r5, #0]
 8016f5e:	bd38      	pop	{r3, r4, r5, pc}
 8016f60:	20004e4c 	.word	0x20004e4c

08016f64 <strncmp>:
 8016f64:	b510      	push	{r4, lr}
 8016f66:	b16a      	cbz	r2, 8016f84 <strncmp+0x20>
 8016f68:	3901      	subs	r1, #1
 8016f6a:	1884      	adds	r4, r0, r2
 8016f6c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016f70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016f74:	4293      	cmp	r3, r2
 8016f76:	d103      	bne.n	8016f80 <strncmp+0x1c>
 8016f78:	42a0      	cmp	r0, r4
 8016f7a:	d001      	beq.n	8016f80 <strncmp+0x1c>
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d1f5      	bne.n	8016f6c <strncmp+0x8>
 8016f80:	1a98      	subs	r0, r3, r2
 8016f82:	bd10      	pop	{r4, pc}
 8016f84:	4610      	mov	r0, r2
 8016f86:	e7fc      	b.n	8016f82 <strncmp+0x1e>

08016f88 <__ascii_wctomb>:
 8016f88:	b149      	cbz	r1, 8016f9e <__ascii_wctomb+0x16>
 8016f8a:	2aff      	cmp	r2, #255	; 0xff
 8016f8c:	bf85      	ittet	hi
 8016f8e:	238a      	movhi	r3, #138	; 0x8a
 8016f90:	6003      	strhi	r3, [r0, #0]
 8016f92:	700a      	strbls	r2, [r1, #0]
 8016f94:	f04f 30ff 	movhi.w	r0, #4294967295
 8016f98:	bf98      	it	ls
 8016f9a:	2001      	movls	r0, #1
 8016f9c:	4770      	bx	lr
 8016f9e:	4608      	mov	r0, r1
 8016fa0:	4770      	bx	lr

08016fa2 <_malloc_usable_size_r>:
 8016fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fa6:	1f18      	subs	r0, r3, #4
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	bfbc      	itt	lt
 8016fac:	580b      	ldrlt	r3, [r1, r0]
 8016fae:	18c0      	addlt	r0, r0, r3
 8016fb0:	4770      	bx	lr
	...

08016fb4 <_init>:
 8016fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fb6:	bf00      	nop
 8016fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fba:	bc08      	pop	{r3}
 8016fbc:	469e      	mov	lr, r3
 8016fbe:	4770      	bx	lr

08016fc0 <_fini>:
 8016fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fc2:	bf00      	nop
 8016fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fc6:	bc08      	pop	{r3}
 8016fc8:	469e      	mov	lr, r3
 8016fca:	4770      	bx	lr
