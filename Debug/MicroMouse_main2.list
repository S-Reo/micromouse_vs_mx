
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000ec4c  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000006c0  08016c50  08016c50  00026c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08017310  08017310  000301e8  2**0
                  CONTENTS
  6 .ARM          00000008  08017310  08017310  00027310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08017318  08017318  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08017318  08017318  00027318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801731c  0801731c  0002731c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e8  20000000  08017320  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001e60  200001e8  08017508  000301e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20002048  08017508  00032048  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002fe2a  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006834  00000000  00000000  00060042  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001087b  00000000  00000000  00066876  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000013e8  00000000  00000000  000770f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000026d0  00000000  00000000  000784e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00027b98  00000000  00000000  0007abb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00019cfc  00000000  00000000  000a2748  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000ca995  00000000  00000000  000bc444  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  00186dd9  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000594c  00000000  00000000  00186e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e8 	.word	0x200001e8
 800801c:	00000000 	.word	0x00000000
 8008020:	08016c34 	.word	0x08016c34

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001ec 	.word	0x200001ec
 800803c:	08016c34 	.word	0x08016c34

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <GetWallCtrlDirection>:
/* バックエンドでコマンドとして処理する */

int GetWallCtrlDirection(profile *mouse)
{
	//新ライブラリ用に変更
	switch(mouse->now.car%8)
 8008df8:	7a83      	ldrb	r3, [r0, #10]
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	2b06      	cmp	r3, #6
 8008e00:	d855      	bhi.n	8008eae <GetWallCtrlDirection+0xb6>
 8008e02:	e8df f003 	tbb	[pc, r3]
 8008e06:	5440      	.short	0x5440
 8008e08:	5418542c 	.word	0x5418542c
 8008e0c:	04          	.byte	0x04
 8008e0d:	00          	.byte	0x00
		{
			return N_WALL_PID;
		}
		break;
	case west:
		if(mouse->now.wall.west == wall)
 8008e0e:	7b03      	ldrb	r3, [r0, #12]
 8008e10:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008e14:	2a40      	cmp	r2, #64	; 0x40
 8008e16:	d04c      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
		{
			return F_WALL_PID;
		}
		else if ( mouse->now.wall.north == wall && mouse->now.wall.south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8008e18:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e1c:	2a11      	cmp	r2, #17
 8008e1e:	d04a      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
		{
			return D_WALL_PID;
		}
		else if ( mouse->now.wall.north == wall )
 8008e20:	f003 0203 	and.w	r2, r3, #3
 8008e24:	2a01      	cmp	r2, #1
 8008e26:	d048      	beq.n	8008eba <GetWallCtrlDirection+0xc2>
		{
			return R_WALL_PID;
		}
		else if ( mouse->now.wall.south == wall )
 8008e28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e2c:	2b10      	cmp	r3, #16
			return L_WALL_PID;
 8008e2e:	bf14      	ite	ne
 8008e30:	2006      	movne	r0, #6
 8008e32:	2002      	moveq	r0, #2
 8008e34:	4770      	bx	lr
		if(mouse->now.wall.south == wall)
 8008e36:	7b03      	ldrb	r3, [r0, #12]
 8008e38:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008e3c:	2a10      	cmp	r2, #16
 8008e3e:	d038      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
		else if(mouse->now.wall.east == wall && mouse->now.wall.west == wall)
 8008e40:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008e44:	2a44      	cmp	r2, #68	; 0x44
 8008e46:	d036      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
		else if(mouse->now.wall.east == wall)
 8008e48:	f003 020c 	and.w	r2, r3, #12
 8008e4c:	2a04      	cmp	r2, #4
 8008e4e:	d036      	beq.n	8008ebe <GetWallCtrlDirection+0xc6>
		else if(mouse->now.wall.west == wall)
 8008e50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e54:	2b40      	cmp	r3, #64	; 0x40
			return R_WALL_PID;
 8008e56:	bf14      	ite	ne
 8008e58:	2006      	movne	r0, #6
 8008e5a:	2003      	moveq	r0, #3
 8008e5c:	4770      	bx	lr
		if(mouse->now.wall.east == wall)
 8008e5e:	7b03      	ldrb	r3, [r0, #12]
 8008e60:	f003 020c 	and.w	r2, r3, #12
 8008e64:	2a04      	cmp	r2, #4
 8008e66:	d024      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
		else if(mouse->now.wall.north == wall && mouse->now.wall.south == wall)//south)
 8008e68:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e6c:	2a11      	cmp	r2, #17
 8008e6e:	d022      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
		else if(mouse->now.wall.north == wall)
 8008e70:	f003 0203 	and.w	r2, r3, #3
 8008e74:	2a01      	cmp	r2, #1
 8008e76:	d022      	beq.n	8008ebe <GetWallCtrlDirection+0xc6>
		else if(mouse->now.wall.south == wall)
 8008e78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e7c:	2b10      	cmp	r3, #16
			return R_WALL_PID;
 8008e7e:	bf14      	ite	ne
 8008e80:	2006      	movne	r0, #6
 8008e82:	2003      	moveq	r0, #3
 8008e84:	4770      	bx	lr
		if(mouse->now.wall.north == wall) //現在の方角と、座標から、壁の存在を確認する処理
 8008e86:	7b03      	ldrb	r3, [r0, #12]
 8008e88:	f003 0203 	and.w	r2, r3, #3
 8008e8c:	2a01      	cmp	r2, #1
 8008e8e:	d010      	beq.n	8008eb2 <GetWallCtrlDirection+0xba>
		else if(mouse->now.wall.east == wall && mouse->now.wall.west == wall)
 8008e90:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008e94:	2a44      	cmp	r2, #68	; 0x44
 8008e96:	d00e      	beq.n	8008eb6 <GetWallCtrlDirection+0xbe>
		else if(mouse->now.wall.east == wall)
 8008e98:	f003 020c 	and.w	r2, r3, #12
 8008e9c:	2a04      	cmp	r2, #4
 8008e9e:	d00c      	beq.n	8008eba <GetWallCtrlDirection+0xc2>
		else if(mouse->now.wall.west == wall)
 8008ea0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008ea4:	2b40      	cmp	r3, #64	; 0x40
			return L_WALL_PID;
 8008ea6:	bf14      	ite	ne
 8008ea8:	2006      	movne	r0, #6
 8008eaa:	2002      	moveq	r0, #2
 8008eac:	4770      	bx	lr
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8008eae:	2006      	movs	r0, #6
 8008eb0:	4770      	bx	lr
			return F_WALL_PID;
 8008eb2:	2008      	movs	r0, #8
 8008eb4:	4770      	bx	lr
			return D_WALL_PID;
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	4770      	bx	lr
			return R_WALL_PID;
 8008eba:	2003      	movs	r0, #3
		break;
	}

}
 8008ebc:	4770      	bx	lr
			return L_WALL_PID;
 8008ebe:	2002      	movs	r0, #2
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop

08008ec4 <WaitStopAndReset>:

void WaitStopAndReset()
{
 8008ec4:	b430      	push	{r4, r5}
 8008ec6:	480a      	ldr	r0, [pc, #40]	; (8008ef0 <WaitStopAndReset+0x2c>)
 8008ec8:	4d0a      	ldr	r5, [pc, #40]	; (8008ef4 <WaitStopAndReset+0x30>)
 8008eca:	4c0b      	ldr	r4, [pc, #44]	; (8008ef8 <WaitStopAndReset+0x34>)
 8008ecc:	490b      	ldr	r1, [pc, #44]	; (8008efc <WaitStopAndReset+0x38>)
 8008ece:	4a0c      	ldr	r2, [pc, #48]	; (8008f00 <WaitStopAndReset+0x3c>)
	do
	{
		TargetVelocity[BODY] = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60ab      	str	r3, [r5, #8]
		Acceleration = 0;
 8008ed4:	6023      	str	r3, [r4, #0]
		TargetAngularV = 0;
 8008ed6:	6003      	str	r3, [r0, #0]
		AngularAcceleration = 0;
 8008ed8:	600b      	str	r3, [r1, #0]

	}while(CurrentVelocity[BODY] != 0);
 8008eda:	edd2 7a02 	vldr	s15, [r2, #8]
 8008ede:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee6:	d1f4      	bne.n	8008ed2 <WaitStopAndReset+0xe>
	HAL_Delay(100);
 8008ee8:	2064      	movs	r0, #100	; 0x64
}
 8008eea:	bc30      	pop	{r4, r5}
	HAL_Delay(100);
 8008eec:	f005 bf38 	b.w	800ed60 <HAL_Delay>
 8008ef0:	2000152c 	.word	0x2000152c
 8008ef4:	2000151c 	.word	0x2000151c
 8008ef8:	2000020c 	.word	0x2000020c
 8008efc:	20000214 	.word	0x20000214
 8008f00:	20001558 	.word	0x20001558
 8008f04:	00000000 	.word	0x00000000

08008f08 <Rotate>:
void Rotate(float deg, float ang_v)
{
	TargetAngularV = 0;
	Pid[A_VELO_PID].flag = 0;

	float accel_deg = deg*30/90;
 8008f08:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8008f0c:	ee60 6a26 	vmul.f32	s13, s0, s13
 8008f10:	ed9f 6a9b 	vldr	s12, [pc, #620]	; 8009180 <Rotate+0x278>
	float const_deg = deg*30/90;
	float decel_deg = deg*30/90;
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f14:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8009184 <Rotate+0x27c>
	TargetAngularV = 0;
 8008f18:	4a9b      	ldr	r2, [pc, #620]	; (8009188 <Rotate+0x280>)
	Pid[A_VELO_PID].flag = 0;
 8008f1a:	4b9c      	ldr	r3, [pc, #624]	; (800918c <Rotate+0x284>)
	float accel_deg = deg*30/90;
 8008f1c:	ee86 7a86 	vdiv.f32	s14, s13, s12
{
 8008f20:	b510      	push	{r4, lr}
	TargetAngularV = 0;
 8008f22:	2400      	movs	r4, #0
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f24:	ee60 7aa7 	vmul.f32	s15, s1, s15
{
 8008f28:	ed2d 8b04 	vpush	{d8-d9}
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f2c:	ee77 6a07 	vadd.f32	s13, s14, s14
 8008f30:	ee67 7aa0 	vmul.f32	s15, s15, s1
	TargetAngularV = 0;
 8008f34:	6014      	str	r4, [r2, #0]
	Pid[A_VELO_PID].flag = 0;
 8008f36:	2200      	movs	r2, #0
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f38:	ee17 0a10 	vmov	r0, s14
	Pid[A_VELO_PID].flag = 0;
 8008f3c:	629a      	str	r2, [r3, #40]	; 0x28
{
 8008f3e:	eef0 8a60 	vmov.f32	s17, s1
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f42:	ee87 8aa6 	vdiv.f32	s16, s15, s13
{
 8008f46:	eeb0 9a40 	vmov.f32	s18, s0
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f4a:	f7ff fa35 	bl	80083b8 <__aeabi_f2d>
 8008f4e:	a388      	add	r3, pc, #544	; (adr r3, 8009170 <Rotate+0x268>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f7ff fa88 	bl	8008468 <__aeabi_dmul>
 8008f58:	2200      	movs	r2, #0
 8008f5a:	4b8d      	ldr	r3, [pc, #564]	; (8009190 <Rotate+0x288>)
 8008f5c:	f7ff fbae 	bl	80086bc <__aeabi_ddiv>
 8008f60:	f7ff fd7a 	bl	8008a58 <__aeabi_d2f>
			const_deg * M_PI/ 180,
			decel_deg * M_PI/ 180,
	};

	if( ang_v > 0)	//右回転
 8008f64:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f6c:	ee06 0a90 	vmov	s13, r0
	if( ang_v > 0)	//右回転
 8008f70:	f340 80f2 	ble.w	8009158 <Rotate+0x250>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f74:	4b87      	ldr	r3, [pc, #540]	; (8009194 <Rotate+0x28c>)

		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f76:	4a88      	ldr	r2, [pc, #544]	; (8009198 <Rotate+0x290>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f78:	edd3 7a00 	vldr	s15, [r3]
 8008f7c:	4987      	ldr	r1, [pc, #540]	; (800919c <Rotate+0x294>)
 8008f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f82:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f86:	ed93 7a00 	vldr	s14, [r3]
 8008f8a:	edd2 7a00 	vldr	s15, [r2]
 8008f8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f96:	dd0a      	ble.n	8008fae <Rotate+0xa6>
		{
			//最短走行の時だけ、Angleが大きくならない、もしくは目標角度がかなり大きい。初期化？最初の旋回なので、0radから90度ぶん目標角度がズレている必要がある。Angleが積算できていないかも。
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8008f98:	ed81 8a00 	vstr	s16, [r1]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f9c:	ed93 7a00 	vldr	s14, [r3]
 8008fa0:	edd2 7a00 	vldr	s15, [r2]
 8008fa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fac:	dcf4      	bgt.n	8008f98 <Rotate+0x90>
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fae:	edd3 7a00 	vldr	s15, [r3]
 8008fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb6:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle > Angle)
 8008fba:	ed93 7a00 	vldr	s14, [r3]
 8008fbe:	edd2 7a00 	vldr	s15, [r2]
 8008fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fca:	dd0a      	ble.n	8008fe2 <Rotate+0xda>
		{
			AngularAcceleration = angular_acceleration[1];//0
 8008fcc:	2000      	movs	r0, #0
 8008fce:	6008      	str	r0, [r1, #0]
		while(TargetAngle > Angle)
 8008fd0:	ed93 7a00 	vldr	s14, [r3]
 8008fd4:	edd2 7a00 	vldr	s15, [r2]
 8008fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe0:	dcf5      	bgt.n	8008fce <Rotate+0xc6>
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fe2:	edd3 7a00 	vldr	s15, [r3]

		while(TargetAngle > Angle)
		{
			 AngularAcceleration = -angular_acceleration[2];
			 if( AngularV <= 0)
 8008fe6:	486e      	ldr	r0, [pc, #440]	; (80091a0 <Rotate+0x298>)
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fe8:	ee76 6aa7 	vadd.f32	s13, s13, s15
			 AngularAcceleration = -angular_acceleration[2];
 8008fec:	eeb1 8a48 	vneg.f32	s16, s16
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008ff0:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle > Angle)
 8008ff4:	e008      	b.n	8009008 <Rotate+0x100>
			 AngularAcceleration = -angular_acceleration[2];
 8008ff6:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV <= 0)
 8008ffa:	edd0 7a00 	vldr	s15, [r0]
 8008ffe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009006:	d908      	bls.n	800901a <Rotate+0x112>
		while(TargetAngle > Angle)
 8009008:	ed93 7a00 	vldr	s14, [r3]
 800900c:	edd2 7a00 	vldr	s15, [r2]
 8009010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009018:	dced      	bgt.n	8008ff6 <Rotate+0xee>
			 		break;
			 }
		}

	}
	AngularAcceleration = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	600b      	str	r3, [r1, #0]
	WaitStopAndReset();
 800901e:	f7ff ff51 	bl	8008ec4 <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009022:	eddf 7a60 	vldr	s15, [pc, #384]	; 80091a4 <Rotate+0x29c>
 8009026:	eec9 7a27 	vdiv.f32	s15, s18, s15
 800902a:	ee17 0a90 	vmov	r0, s15
 800902e:	f7ff f9c3 	bl	80083b8 <__aeabi_f2d>
 8009032:	a351      	add	r3, pc, #324	; (adr r3, 8009178 <Rotate+0x270>)
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f7ff fa16 	bl	8008468 <__aeabi_dmul>
 800903c:	f7ff fcc4 	bl	80089c8 <__aeabi_d2iz>
	if(ang_v < 0)
 8009040:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009048:	4602      	mov	r2, r0
	if(ang_v < 0)
 800904a:	d475      	bmi.n	8009138 <Rotate+0x230>
		KeepPulse[LEFT] -= target_pulse/2;
		KeepPulse[RIGHT] += target_pulse/2;
	}
	else 	if(ang_v > 0)
	{
		KeepPulse[LEFT] += target_pulse/2;
 800904c:	4b56      	ldr	r3, [pc, #344]	; (80091a8 <Rotate+0x2a0>)
 800904e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	1040      	asrs	r0, r0, #1
 8009056:	4402      	add	r2, r0
 8009058:	601a      	str	r2, [r3, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 800905a:	685a      	ldr	r2, [r3, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];

}
 800905c:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] -= target_pulse/2;
 8009060:	1a10      	subs	r0, r2, r0
 8009062:	6058      	str	r0, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	609a      	str	r2, [r3, #8]
}
 8009068:	bd10      	pop	{r4, pc}
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800906a:	4b4a      	ldr	r3, [pc, #296]	; (8009194 <Rotate+0x28c>)
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800906c:	4a4a      	ldr	r2, [pc, #296]	; (8009198 <Rotate+0x290>)
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800906e:	edd3 7a00 	vldr	s15, [r3]
 8009072:	494a      	ldr	r1, [pc, #296]	; (800919c <Rotate+0x294>)
 8009074:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009078:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800907c:	ed93 7a00 	vldr	s14, [r3]
 8009080:	edd2 7a00 	vldr	s15, [r2]
 8009084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908c:	d50c      	bpl.n	80090a8 <Rotate+0x1a0>
 800908e:	eeb1 6a48 	vneg.f32	s12, s16
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 8009092:	ed81 6a00 	vstr	s12, [r1]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009096:	ed93 7a00 	vldr	s14, [r3]
 800909a:	edd2 7a00 	vldr	s15, [r2]
 800909e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a6:	d4f4      	bmi.n	8009092 <Rotate+0x18a>
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090a8:	edd3 7a00 	vldr	s15, [r3]
 80090ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80090b0:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle < Angle)
 80090b4:	ed93 7a00 	vldr	s14, [r3]
 80090b8:	edd2 7a00 	vldr	s15, [r2]
 80090bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c4:	d50a      	bpl.n	80090dc <Rotate+0x1d4>
			AngularAcceleration = angular_acceleration[1];//0
 80090c6:	2000      	movs	r0, #0
 80090c8:	6008      	str	r0, [r1, #0]
		while(TargetAngle < Angle)
 80090ca:	ed93 7a00 	vldr	s14, [r3]
 80090ce:	edd2 7a00 	vldr	s15, [r2]
 80090d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090da:	d4f5      	bmi.n	80090c8 <Rotate+0x1c0>
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090dc:	edd3 7a00 	vldr	s15, [r3]
			 if( AngularV >= 0)
 80090e0:	482f      	ldr	r0, [pc, #188]	; (80091a0 <Rotate+0x298>)
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090e2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80090e6:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle < Angle)
 80090ea:	e008      	b.n	80090fe <Rotate+0x1f6>
			 AngularAcceleration = angular_acceleration[2];
 80090ec:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV >= 0)
 80090f0:	edd0 7a00 	vldr	s15, [r0]
 80090f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fc:	da08      	bge.n	8009110 <Rotate+0x208>
		while(TargetAngle < Angle)
 80090fe:	ed93 7a00 	vldr	s14, [r3]
 8009102:	edd2 7a00 	vldr	s15, [r2]
 8009106:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800910a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910e:	d4ed      	bmi.n	80090ec <Rotate+0x1e4>
	AngularAcceleration = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	600b      	str	r3, [r1, #0]
	WaitStopAndReset();
 8009114:	f7ff fed6 	bl	8008ec4 <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009118:	eddf 7a22 	vldr	s15, [pc, #136]	; 80091a4 <Rotate+0x29c>
 800911c:	eec9 7a27 	vdiv.f32	s15, s18, s15
 8009120:	ee17 0a90 	vmov	r0, s15
 8009124:	f7ff f948 	bl	80083b8 <__aeabi_f2d>
 8009128:	a313      	add	r3, pc, #76	; (adr r3, 8009178 <Rotate+0x270>)
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	f7ff f99b 	bl	8008468 <__aeabi_dmul>
 8009132:	f7ff fc49 	bl	80089c8 <__aeabi_d2iz>
 8009136:	4602      	mov	r2, r0
		KeepPulse[LEFT] -= target_pulse/2;
 8009138:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <Rotate+0x2a0>)
 800913a:	6819      	ldr	r1, [r3, #0]
 800913c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8009140:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 8009144:	6019      	str	r1, [r3, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 8009146:	6858      	ldr	r0, [r3, #4]
}
 8009148:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] += target_pulse/2;
 800914c:	eb00 0262 	add.w	r2, r0, r2, asr #1
 8009150:	605a      	str	r2, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	609a      	str	r2, [r3, #8]
}
 8009156:	bd10      	pop	{r4, pc}
	else if( ang_v < 0)
 8009158:	d487      	bmi.n	800906a <Rotate+0x162>
	AngularAcceleration = 0;
 800915a:	4b10      	ldr	r3, [pc, #64]	; (800919c <Rotate+0x294>)
 800915c:	601c      	str	r4, [r3, #0]
	WaitStopAndReset();
 800915e:	f7ff feb1 	bl	8008ec4 <WaitStopAndReset>
}
 8009162:	ecbd 8b04 	vpop	{d8-d9}
 8009166:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <Rotate+0x2a0>)
	KeepPulse[BODY] = KeepPulse[BODY];
 8009168:	689a      	ldr	r2, [r3, #8]
 800916a:	609a      	str	r2, [r3, #8]
}
 800916c:	bd10      	pop	{r4, pc}
 800916e:	bf00      	nop
 8009170:	54442d18 	.word	0x54442d18
 8009174:	400921fb 	.word	0x400921fb
 8009178:	a62bf3f2 	.word	0xa62bf3f2
 800917c:	40fac890 	.word	0x40fac890
 8009180:	42b40000 	.word	0x42b40000
 8009184:	3d83126f 	.word	0x3d83126f
 8009188:	2000152c 	.word	0x2000152c
 800918c:	20001318 	.word	0x20001318
 8009190:	40668000 	.word	0x40668000
 8009194:	20000220 	.word	0x20000220
 8009198:	20000210 	.word	0x20000210
 800919c:	20000214 	.word	0x20000214
 80091a0:	2000021c 	.word	0x2000021c
 80091a4:	43b40000 	.word	0x43b40000
 80091a8:	20001580 	.word	0x20001580
 80091ac:	00000000 	.word	0x00000000

080091b0 <SlalomRight>:
	}

}

void SlalomRight(maze_node *maze, profile *mouse)	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	ed2d 8b08 	vpush	{d8-d11}
 80091b8:	b083      	sub	sp, #12
	switch(mouse->now.car%8)//方角に合わせて、
 80091ba:	7a8d      	ldrb	r5, [r1, #10]
	Pid[A_VELO_PID].flag = 1;

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
	float pre = Sla.Pre;         //スラローム前距離
	float fol = Sla.Fol;         //スラローム後距離
 80091bc:	4aa2      	ldr	r2, [pc, #648]	; (8009448 <SlalomRight+0x298>)
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
	int now_pulse;

	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091be:	4ca3      	ldr	r4, [pc, #652]	; (800944c <SlalomRight+0x29c>)
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80091c0:	4ba3      	ldr	r3, [pc, #652]	; (8009450 <SlalomRight+0x2a0>)
	float now_angv = AngularV;
 80091c2:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 800947c <SlalomRight+0x2cc>
{
 80091c6:	9001      	str	r0, [sp, #4]
	Pid[A_VELO_PID].flag = 1;
 80091c8:	48a2      	ldr	r0, [pc, #648]	; (8009454 <SlalomRight+0x2a4>)
	float now_angv = AngularV;
 80091ca:	f8db 6000 	ldr.w	r6, [fp]
	float fol = Sla.Fol;         //スラローム後距離
 80091ce:	ed92 9a01 	vldr	s18, [r2, #4]
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80091d2:	681e      	ldr	r6, [r3, #0]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 80091d4:	edd2 8a02 	vldr	s17, [r2, #8]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091d8:	6823      	ldr	r3, [r4, #0]
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 80091da:	ed92 aa04 	vldr	s20, [r2, #16]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091de:	6867      	ldr	r7, [r4, #4]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 80091e0:	edd2 9a05 	vldr	s19, [r2, #20]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 80091e4:	ed92 8a06 	vldr	s16, [r2, #24]
{
 80091e8:	4688      	mov	r8, r1
	switch(mouse->now.car%8)//方角に合わせて、
 80091ea:	f005 0507 	and.w	r5, r5, #7
	Pid[A_VELO_PID].flag = 1;
 80091ee:	2101      	movs	r1, #1
 80091f0:	6281      	str	r1, [r0, #40]	; 0x28
	switch(mouse->now.car%8)//方角に合わせて、
 80091f2:	2d06      	cmp	r5, #6
 80091f4:	d808      	bhi.n	8009208 <SlalomRight+0x58>
 80091f6:	e8df f015 	tbh	[pc, r5, lsl #1]
 80091fa:	010e      	.short	0x010e
 80091fc:	01090007 	.word	0x01090007
 8009200:	01040007 	.word	0x01040007
 8009204:	00d60007 	.word	0x00d60007
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009208:	443b      	add	r3, r7
 800920a:	ee07 3a10 	vmov	s14, r3
		}

	}
	else//なければ
	{
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	6860      	ldr	r0, [r4, #4]
 8009212:	edd2 6a00 	vldr	s13, [r2]
 8009216:	4d90      	ldr	r5, [pc, #576]	; (8009458 <SlalomRight+0x2a8>)
 8009218:	4403      	add	r3, r0
 800921a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800922a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800922e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009232:	f340 8100 	ble.w	8009436 <SlalomRight+0x286>
 8009236:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8009480 <SlalomRight+0x2d0>
 800923a:	4b88      	ldr	r3, [pc, #544]	; (800945c <SlalomRight+0x2ac>)
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 800923c:	2700      	movs	r7, #0
 800923e:	602f      	str	r7, [r5, #0]
				AngularLeapsity = 0;
				AngularAcceleration = 0;
 8009240:	f8c9 7000 	str.w	r7, [r9]
				TargetVelocity[BODY] = v_turn;
 8009244:	609e      	str	r6, [r3, #8]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009246:	6820      	ldr	r0, [r4, #0]
 8009248:	6862      	ldr	r2, [r4, #4]
 800924a:	4410      	add	r0, r2
 800924c:	ee07 0a90 	vmov	s15, r0
 8009250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925c:	d4ef      	bmi.n	800923e <SlalomRight+0x8e>
 800925e:	f8df a224 	ldr.w	sl, [pc, #548]	; 8009484 <SlalomRight+0x2d4>
 8009262:	f8ca 7000 	str.w	r7, [sl]
				////printf("直進1\r\n");
		}
	}
	now_angv = AngularV;

	float start_angle = Angle;
 8009266:	487e      	ldr	r0, [pc, #504]	; (8009460 <SlalomRight+0x2b0>)
	now_angv = AngularV;
 8009268:	f8db 3000 	ldr.w	r3, [fp]
	float start_angle = Angle;
 800926c:	ed90 7a00 	vldr	s14, [r0]
	Pid[A_VELO_PID].flag = 0;
	while(start_angle + ang1 > Angle)
 8009270:	edd0 7a00 	vldr	s15, [r0]
	Pid[A_VELO_PID].flag = 0;
 8009274:	4a77      	ldr	r2, [pc, #476]	; (8009454 <SlalomRight+0x2a4>)
	while(start_angle + ang1 > Angle)
 8009276:	ee7a 6a07 	vadd.f32	s13, s20, s14
	Pid[A_VELO_PID].flag = 0;
 800927a:	2300      	movs	r3, #0
	while(start_angle + ang1 > Angle)
 800927c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Pid[A_VELO_PID].flag = 0;
 8009284:	6293      	str	r3, [r2, #40]	; 0x28
	while(start_angle + ang1 > Angle)
 8009286:	dd0a      	ble.n	800929e <SlalomRight+0xee>
 8009288:	4b74      	ldr	r3, [pc, #464]	; (800945c <SlalomRight+0x2ac>)
	{
			AngularAcceleration = alpha_turn;
 800928a:	edc9 8a00 	vstr	s17, [r9]
			TargetVelocity[BODY] = v_turn;
 800928e:	609e      	str	r6, [r3, #8]
	while(start_angle + ang1 > Angle)
 8009290:	edd0 7a00 	vldr	s15, [r0]
 8009294:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929c:	d4f5      	bmi.n	800928a <SlalomRight+0xda>

	}
	AngularAcceleration = 0;
 800929e:	2300      	movs	r3, #0
 80092a0:	f8c9 3000 	str.w	r3, [r9]
	AngularLeapsity = 0;
	now_angv = AngularV;
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 80092a4:	ee79 6a87 	vadd.f32	s13, s19, s14
	now_angv = AngularV;
 80092a8:	f8db 7000 	ldr.w	r7, [fp]
	while(start_angle + ang2 > Angle)
 80092ac:	edd0 7a00 	vldr	s15, [r0]
	AngularLeapsity = 0;
 80092b0:	f8ca 3000 	str.w	r3, [sl]
	while(start_angle + ang2 > Angle)
 80092b4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80092b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092bc:	dd0a      	ble.n	80092d4 <SlalomRight+0x124>
 80092be:	4b67      	ldr	r3, [pc, #412]	; (800945c <SlalomRight+0x2ac>)
	{
			TargetAngularV = TargetAngularV;
 80092c0:	682f      	ldr	r7, [r5, #0]
 80092c2:	602f      	str	r7, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 80092c4:	609e      	str	r6, [r3, #8]
	while(start_angle + ang2 > Angle)
 80092c6:	edd0 7a00 	vldr	s15, [r0]
 80092ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80092ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d2:	d4f5      	bmi.n	80092c0 <SlalomRight+0x110>
	}

	now_angv = AngularV;
 80092d4:	f8db 3000 	ldr.w	r3, [fp]
	while( start_angle + ang3 > Angle)
 80092d8:	edd0 7a00 	vldr	s15, [r0]
 80092dc:	ee38 7a07 	vadd.f32	s14, s16, s14
 80092e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e8:	d51f      	bpl.n	800932a <SlalomRight+0x17a>
	{
			AngularAcceleration = -alpha_turn;
 80092ea:	eef1 8a68 	vneg.f32	s17, s17
 80092ee:	edc9 8a00 	vstr	s17, [r9]
			if(TargetAngularV < 0)
 80092f2:	edd5 7a00 	vldr	s15, [r5]
 80092f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fe:	f100 8097 	bmi.w	8009430 <SlalomRight+0x280>
 8009302:	4b56      	ldr	r3, [pc, #344]	; (800945c <SlalomRight+0x2ac>)
 8009304:	e009      	b.n	800931a <SlalomRight+0x16a>
			AngularAcceleration = -alpha_turn;
 8009306:	edc9 8a00 	vstr	s17, [r9]
			if(TargetAngularV < 0)
 800930a:	edd5 7a00 	vldr	s15, [r5]
 800930e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009316:	f100 808b 	bmi.w	8009430 <SlalomRight+0x280>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 800931a:	609e      	str	r6, [r3, #8]
	while( start_angle + ang3 > Angle)
 800931c:	edd0 7a00 	vldr	s15, [r0]
 8009320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009328:	d4ed      	bmi.n	8009306 <SlalomRight+0x156>
	}
	AngularAcceleration = 0;
 800932a:	f04f 0b00 	mov.w	fp, #0
 800932e:	f8c9 b000 	str.w	fp, [r9]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 8009332:	f8c5 b000 	str.w	fp, [r5]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	6862      	ldr	r2, [r4, #4]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 800933a:	4f48      	ldr	r7, [pc, #288]	; (800945c <SlalomRight+0x2ac>)
			if(Calc == 0)
 800933c:	f8df a148 	ldr.w	sl, [pc, #328]	; 8009488 <SlalomRight+0x2d8>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009340:	4413      	add	r3, r2
 8009342:	ee08 3a10 	vmov	s16, r3
 8009346:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800934a:	ee38 8a09 	vadd.f32	s16, s16, s18
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800934e:	e006      	b.n	800935e <SlalomRight+0x1ae>
			TargetAngularV = 0;
 8009350:	f8c5 b000 	str.w	fp, [r5]
			TargetVelocity[BODY] = v_turn;
 8009354:	60be      	str	r6, [r7, #8]
			if(Calc == 0)
 8009356:	f8da 3000 	ldr.w	r3, [sl]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d060      	beq.n	8009420 <SlalomRight+0x270>
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	6862      	ldr	r2, [r4, #4]
 8009362:	4413      	add	r3, r2
 8009364:	ee07 3a90 	vmov	s15, r3
 8009368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800936c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009374:	d4ec      	bmi.n	8009350 <SlalomRight+0x1a0>
			{
				updateRealSearch(maze, mouse);
				Calc = 1;
			}
	}
	TargetAngle += 90*M_PI/180;
 8009376:	4d3b      	ldr	r5, [pc, #236]	; (8009464 <SlalomRight+0x2b4>)
 8009378:	6828      	ldr	r0, [r5, #0]
 800937a:	f7ff f81d 	bl	80083b8 <__aeabi_f2d>
 800937e:	a330      	add	r3, pc, #192	; (adr r3, 8009440 <SlalomRight+0x290>)
 8009380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009384:	f7fe feba 	bl	80080fc <__adddf3>
 8009388:	f7ff fb66 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800938c:	4a36      	ldr	r2, [pc, #216]	; (8009468 <SlalomRight+0x2b8>)
	TargetAngle += 90*M_PI/180;
 800938e:	6028      	str	r0, [r5, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009390:	68a3      	ldr	r3, [r4, #8]
 8009392:	6890      	ldr	r0, [r2, #8]
 8009394:	6891      	ldr	r1, [r2, #8]
 8009396:	1a1b      	subs	r3, r3, r0
 8009398:	440b      	add	r3, r1
 800939a:	6093      	str	r3, [r2, #8]

}
 800939c:	b003      	add	sp, #12
 800939e:	ecbd 8b08 	vpop	{d8-d11}
 80093a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return mouse->now.wall.west;
 80093a6:	f898 000c 	ldrb.w	r0, [r8, #12]
 80093aa:	0980      	lsrs	r0, r0, #6
	if (getFrontWall(mouse) == WALL/*前に壁があれば、*/) //Uターン後にスラロームするときは、壁の情報が間違っている.壁の情報を毎回正しくする
 80093ac:	2801      	cmp	r0, #1
 80093ae:	f47f af2b 	bne.w	8009208 <SlalomRight+0x58>
 80093b2:	4d29      	ldr	r5, [pc, #164]	; (8009458 <SlalomRight+0x2a8>)
 80093b4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8009484 <SlalomRight+0x2d4>
 80093b8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8009480 <SlalomRight+0x2d0>
 80093bc:	4f2b      	ldr	r7, [pc, #172]	; (800946c <SlalomRight+0x2bc>)
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80093be:	ed9f ba2c 	vldr	s22, [pc, #176]	; 8009470 <SlalomRight+0x2c0>
 80093c2:	eddf ba2c 	vldr	s23, [pc, #176]	; 8009474 <SlalomRight+0x2c4>
			TargetAngularV = 0;
 80093c6:	eddf aa2c 	vldr	s21, [pc, #176]	; 8009478 <SlalomRight+0x2c8>
 80093ca:	e008      	b.n	80093de <SlalomRight+0x22e>
 80093cc:	edc5 aa00 	vstr	s21, [r5]
			AngularLeapsity = 0;
 80093d0:	edca aa00 	vstr	s21, [sl]
			AngularAcceleration = 0;
 80093d4:	edc9 aa00 	vstr	s21, [r9]
			TargetVelocity[BODY] = v_turn;
 80093d8:	609e      	str	r6, [r3, #8]
			ChangeLED(7);
 80093da:	f004 fee3 	bl	800e1a4 <ChangeLED>
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80093de:	edd7 7a00 	vldr	s15, [r7]
			TargetVelocity[BODY] = v_turn;
 80093e2:	4b1e      	ldr	r3, [pc, #120]	; (800945c <SlalomRight+0x2ac>)
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80093e4:	eef4 7acb 	vcmpe.f32	s15, s22
 80093e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			ChangeLED(7);
 80093ec:	f04f 0007 	mov.w	r0, #7
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80093f0:	d4ec      	bmi.n	80093cc <SlalomRight+0x21c>
 80093f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80093f6:	eef4 7aeb 	vcmpe.f32	s15, s23
 80093fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093fe:	d4e5      	bmi.n	80093cc <SlalomRight+0x21c>
 8009400:	e731      	b.n	8009266 <SlalomRight+0xb6>
	return mouse->now.wall.south;
 8009402:	f898 000c 	ldrb.w	r0, [r8, #12]
 8009406:	f3c0 1001 	ubfx	r0, r0, #4, #2
 800940a:	e7cf      	b.n	80093ac <SlalomRight+0x1fc>
	return mouse->now.wall.east;
 800940c:	f898 000c 	ldrb.w	r0, [r8, #12]
 8009410:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8009414:	e7ca      	b.n	80093ac <SlalomRight+0x1fc>
	return mouse->now.wall.north;
 8009416:	f898 000c 	ldrb.w	r0, [r8, #12]
 800941a:	f000 0003 	and.w	r0, r0, #3
 800941e:	e7c5      	b.n	80093ac <SlalomRight+0x1fc>
				updateRealSearch(maze, mouse);
 8009420:	4641      	mov	r1, r8
 8009422:	9801      	ldr	r0, [sp, #4]
 8009424:	f003 fe5e 	bl	800d0e4 <updateRealSearch>
				Calc = 1;
 8009428:	2301      	movs	r3, #1
 800942a:	f8ca 3000 	str.w	r3, [sl]
 800942e:	e796      	b.n	800935e <SlalomRight+0x1ae>
				TargetAngularV = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	602b      	str	r3, [r5, #0]
				break;
 8009434:	e779      	b.n	800932a <SlalomRight+0x17a>
 8009436:	f8df a04c 	ldr.w	sl, [pc, #76]	; 8009484 <SlalomRight+0x2d4>
 800943a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009480 <SlalomRight+0x2d0>
 800943e:	e712      	b.n	8009266 <SlalomRight+0xb6>
 8009440:	54442d18 	.word	0x54442d18
 8009444:	3ff921fb 	.word	0x3ff921fb
 8009448:	20001564 	.word	0x20001564
 800944c:	2000154c 	.word	0x2000154c
 8009450:	200015a0 	.word	0x200015a0
 8009454:	20001318 	.word	0x20001318
 8009458:	2000152c 	.word	0x2000152c
 800945c:	2000151c 	.word	0x2000151c
 8009460:	20000210 	.word	0x20000210
 8009464:	20000220 	.word	0x20000220
 8009468:	20001580 	.word	0x20001580
 800946c:	2000158c 	.word	0x2000158c
 8009470:	43480000 	.word	0x43480000
 8009474:	437a0000 	.word	0x437a0000
 8009478:	00000000 	.word	0x00000000
 800947c:	2000021c 	.word	0x2000021c
 8009480:	20000214 	.word	0x20000214
 8009484:	20000218 	.word	0x20000218
 8009488:	200015c8 	.word	0x200015c8
 800948c:	00000000 	.word	0x00000000

08009490 <SlalomLeft>:
void SlalomLeft(maze_node *maze, profile *mouse)	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Pid[A_VELO_PID].flag = 1;
	//ここの値コピーとその他計算を事前に行う
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
	float pre = Sla.Pre;         //スラローム前距離
	float fol = Sla.Fol;         //スラローム後距離
 8009494:	4a9e      	ldr	r2, [pc, #632]	; (8009710 <SlalomLeft+0x280>)
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;

	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009496:	4c9f      	ldr	r4, [pc, #636]	; (8009714 <SlalomLeft+0x284>)
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 8009498:	edd2 5a02 	vldr	s11, [r2, #8]
	Pid[A_VELO_PID].flag = 1;
 800949c:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 8009740 <SlalomLeft+0x2b0>
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80094a0:	4e9d      	ldr	r6, [pc, #628]	; (8009718 <SlalomLeft+0x288>)
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094a2:	6823      	ldr	r3, [r4, #0]
	float fol = Sla.Fol;         //スラローム後距離
 80094a4:	ed92 4a01 	vldr	s8, [r2, #4]
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 80094a8:	ed92 6a04 	vldr	s12, [r2, #16]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 80094ac:	edd2 6a05 	vldr	s13, [r2, #20]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 80094b0:	ed92 3a06 	vldr	s6, [r2, #24]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094b4:	6865      	ldr	r5, [r4, #4]
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80094b6:	6836      	ldr	r6, [r6, #0]
{
 80094b8:	460f      	mov	r7, r1
	switch(mouse->now.car%8)//方角に合わせて、
 80094ba:	7a89      	ldrb	r1, [r1, #10]
	Pid[A_VELO_PID].flag = 1;
 80094bc:	f04f 0e01 	mov.w	lr, #1
	switch(mouse->now.car%8)//方角に合わせて、
 80094c0:	f001 0107 	and.w	r1, r1, #7
{
 80094c4:	ed2d 8b02 	vpush	{d8}
 80094c8:	4680      	mov	r8, r0
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 80094ca:	eeb1 5a65 	vneg.f32	s10, s11
	Pid[A_VELO_PID].flag = 1;
 80094ce:	f8cc e028 	str.w	lr, [ip, #40]	; 0x28
	switch(mouse->now.car%8)//方角に合わせて、
 80094d2:	2906      	cmp	r1, #6
 80094d4:	d808      	bhi.n	80094e8 <SlalomLeft+0x58>
 80094d6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80094da:	0109      	.short	0x0109
 80094dc:	01050007 	.word	0x01050007
 80094e0:	01010007 	.word	0x01010007
 80094e4:	00d20007 	.word	0x00d20007
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094e8:	442b      	add	r3, r5
 80094ea:	ee07 3a10 	vmov	s14, r3


	}
	else//なければ
	{
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	6861      	ldr	r1, [r4, #4]
 80094f2:	edd2 7a00 	vldr	s15, [r2]
 80094f6:	440b      	add	r3, r1
 80094f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094fc:	ee04 3a90 	vmov	s9, r3
 8009500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009504:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8009508:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800950c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009510:	f340 80f3 	ble.w	80096fa <SlalomLeft+0x26a>
 8009514:	4d81      	ldr	r5, [pc, #516]	; (800971c <SlalomLeft+0x28c>)
 8009516:	4982      	ldr	r1, [pc, #520]	; (8009720 <SlalomLeft+0x290>)
 8009518:	4a82      	ldr	r2, [pc, #520]	; (8009724 <SlalomLeft+0x294>)
		{
				TargetAngularV = 0;
 800951a:	2000      	movs	r0, #0
 800951c:	6028      	str	r0, [r5, #0]
				AngularAcceleration = 0;
 800951e:	6008      	str	r0, [r1, #0]
				TargetVelocity[BODY] = v_turn;
 8009520:	6096      	str	r6, [r2, #8]
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8009528:	4473      	add	r3, lr
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953a:	d4ef      	bmi.n	800951c <SlalomLeft+0x8c>
 800953c:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8009744 <SlalomLeft+0x2b4>

		}
	}

	Pid[A_VELO_PID].flag = 0;
	float start_angle = Angle;
 8009540:	4b79      	ldr	r3, [pc, #484]	; (8009728 <SlalomLeft+0x298>)
 8009542:	edd3 7a00 	vldr	s15, [r3]
	while(start_angle - ang1 < Angle)
 8009546:	ed93 7a00 	vldr	s14, [r3]
 800954a:	ee37 6ac6 	vsub.f32	s12, s15, s12
	Pid[A_VELO_PID].flag = 0;
 800954e:	2200      	movs	r2, #0
	while(start_angle - ang1 < Angle)
 8009550:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8009554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Pid[A_VELO_PID].flag = 0;
 8009558:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	while(start_angle - ang1 < Angle)
 800955c:	d50a      	bpl.n	8009574 <SlalomLeft+0xe4>
 800955e:	4a71      	ldr	r2, [pc, #452]	; (8009724 <SlalomLeft+0x294>)
	{
			AngularAcceleration = alpha_turn;
 8009560:	ed81 5a00 	vstr	s10, [r1]
			TargetVelocity[BODY] = v_turn;
 8009564:	6096      	str	r6, [r2, #8]
	while(start_angle - ang1 < Angle)
 8009566:	ed93 7a00 	vldr	s14, [r3]
 800956a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800956e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009572:	dcf5      	bgt.n	8009560 <SlalomLeft+0xd0>
	}
	AngularAcceleration = 0;
 8009574:	2200      	movs	r2, #0
 8009576:	600a      	str	r2, [r1, #0]
	AngularLeapsity = 0;
	while(start_angle - ang2 < Angle)
 8009578:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800957c:	ed93 7a00 	vldr	s14, [r3]
	AngularLeapsity = 0;
 8009580:	f8c9 2000 	str.w	r2, [r9]
	while(start_angle - ang2 < Angle)
 8009584:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800958c:	d50a      	bpl.n	80095a4 <SlalomLeft+0x114>
 800958e:	4a65      	ldr	r2, [pc, #404]	; (8009724 <SlalomLeft+0x294>)
	{
			TargetAngularV = TargetAngularV;
 8009590:	6828      	ldr	r0, [r5, #0]
 8009592:	6028      	str	r0, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009594:	6096      	str	r6, [r2, #8]
	while(start_angle - ang2 < Angle)
 8009596:	ed93 7a00 	vldr	s14, [r3]
 800959a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800959e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a2:	dcf5      	bgt.n	8009590 <SlalomLeft+0x100>
	}

	while( start_angle - ang3 < Angle)
 80095a4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80095a8:	ed93 7a00 	vldr	s14, [r3]
 80095ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b4:	dd1d      	ble.n	80095f2 <SlalomLeft+0x162>
	{
			AngularAcceleration = -alpha_turn;
 80095b6:	edc1 5a00 	vstr	s11, [r1]
			if(TargetAngularV > 0)
 80095ba:	ed95 7a00 	vldr	s14, [r5]
 80095be:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80095c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c6:	f300 8095 	bgt.w	80096f4 <SlalomLeft+0x264>
 80095ca:	4a56      	ldr	r2, [pc, #344]	; (8009724 <SlalomLeft+0x294>)
 80095cc:	e009      	b.n	80095e2 <SlalomLeft+0x152>
			AngularAcceleration = -alpha_turn;
 80095ce:	edc1 5a00 	vstr	s11, [r1]
			if(TargetAngularV > 0)
 80095d2:	ed95 7a00 	vldr	s14, [r5]
 80095d6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80095da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095de:	f300 8089 	bgt.w	80096f4 <SlalomLeft+0x264>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 80095e2:	6096      	str	r6, [r2, #8]
	while( start_angle - ang3 < Angle)
 80095e4:	ed93 7a00 	vldr	s14, [r3]
 80095e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f0:	dced      	bgt.n	80095ce <SlalomLeft+0x13e>
	}
	AngularAcceleration = 0;
 80095f2:	f04f 0b00 	mov.w	fp, #0
 80095f6:	f8c1 b000 	str.w	fp, [r1]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 80095fa:	f8c5 b000 	str.w	fp, [r5]

	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	6862      	ldr	r2, [r4, #4]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 8009602:	f8df a120 	ldr.w	sl, [pc, #288]	; 8009724 <SlalomLeft+0x294>
			if(Calc == 0)
 8009606:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8009748 <SlalomLeft+0x2b8>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 800960a:	4413      	add	r3, r2
 800960c:	ee08 3a10 	vmov	s16, r3
 8009610:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8009614:	ee38 8a04 	vadd.f32	s16, s16, s8
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009618:	e006      	b.n	8009628 <SlalomLeft+0x198>
			TargetAngularV = 0;
 800961a:	f8c5 b000 	str.w	fp, [r5]
			TargetVelocity[BODY] = v_turn;
 800961e:	f8ca 6008 	str.w	r6, [sl, #8]
			if(Calc == 0)
 8009622:	f8d9 3000 	ldr.w	r3, [r9]
 8009626:	b313      	cbz	r3, 800966e <SlalomLeft+0x1de>
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	6862      	ldr	r2, [r4, #4]
 800962c:	4413      	add	r3, r2
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009636:	eef4 7ac8 	vcmpe.f32	s15, s16
 800963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963e:	d4ec      	bmi.n	800961a <SlalomLeft+0x18a>
			{
				updateRealSearch(maze, mouse);
				Calc = 1;
			}
	}
	TargetAngle += -90*M_PI/180;
 8009640:	4d3a      	ldr	r5, [pc, #232]	; (800972c <SlalomLeft+0x29c>)
 8009642:	6828      	ldr	r0, [r5, #0]
 8009644:	f7fe feb8 	bl	80083b8 <__aeabi_f2d>
 8009648:	a32f      	add	r3, pc, #188	; (adr r3, 8009708 <SlalomLeft+0x278>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7fe fd53 	bl	80080f8 <__aeabi_dsub>
 8009652:	f7ff fa01 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009656:	4a36      	ldr	r2, [pc, #216]	; (8009730 <SlalomLeft+0x2a0>)
	TargetAngle += -90*M_PI/180;
 8009658:	6028      	str	r0, [r5, #0]
}
 800965a:	ecbd 8b02 	vpop	{d8}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800965e:	68a3      	ldr	r3, [r4, #8]
 8009660:	6890      	ldr	r0, [r2, #8]
 8009662:	6891      	ldr	r1, [r2, #8]
 8009664:	1a1b      	subs	r3, r3, r0
 8009666:	440b      	add	r3, r1
 8009668:	6093      	str	r3, [r2, #8]
}
 800966a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				updateRealSearch(maze, mouse);
 800966e:	4639      	mov	r1, r7
 8009670:	4640      	mov	r0, r8
 8009672:	f003 fd37 	bl	800d0e4 <updateRealSearch>
				Calc = 1;
 8009676:	2301      	movs	r3, #1
 8009678:	f8c9 3000 	str.w	r3, [r9]
 800967c:	e7d4      	b.n	8009628 <SlalomLeft+0x198>
	return mouse->now.wall.west;
 800967e:	7b39      	ldrb	r1, [r7, #12]
 8009680:	0989      	lsrs	r1, r1, #6
	if (getFrontWall(mouse) == WALL/*前に壁があれば、*/)
 8009682:	2901      	cmp	r1, #1
 8009684:	f47f af30 	bne.w	80094e8 <SlalomLeft+0x58>
 8009688:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8009744 <SlalomLeft+0x2b4>
 800968c:	4d23      	ldr	r5, [pc, #140]	; (800971c <SlalomLeft+0x28c>)
 800968e:	f8d9 e000 	ldr.w	lr, [r9]
 8009692:	4923      	ldr	r1, [pc, #140]	; (8009720 <SlalomLeft+0x290>)
 8009694:	4a27      	ldr	r2, [pc, #156]	; (8009734 <SlalomLeft+0x2a4>)
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009696:	eddf 4a28 	vldr	s9, [pc, #160]	; 8009738 <SlalomLeft+0x2a8>
 800969a:	eddf 3a28 	vldr	s7, [pc, #160]	; 800973c <SlalomLeft+0x2ac>
			TargetVelocity[BODY] = v_turn;
 800969e:	f8df a084 	ldr.w	sl, [pc, #132]	; 8009724 <SlalomLeft+0x294>
			TargetAngularV = 0;
 80096a2:	2300      	movs	r3, #0
	if (getFrontWall(mouse) == WALL/*前に壁があれば、*/)
 80096a4:	2000      	movs	r0, #0
 80096a6:	e005      	b.n	80096b4 <SlalomLeft+0x224>
			TargetAngularV = 0;
 80096a8:	602b      	str	r3, [r5, #0]
			AngularLeapsity = 0;
 80096aa:	469e      	mov	lr, r3
			AngularAcceleration = 0;
 80096ac:	600b      	str	r3, [r1, #0]
 80096ae:	2001      	movs	r0, #1
			TargetVelocity[BODY] = v_turn;
 80096b0:	f8ca 6008 	str.w	r6, [sl, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250)//Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80096b4:	ed92 7a00 	vldr	s14, [r2]
 80096b8:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80096bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c0:	d4f2      	bmi.n	80096a8 <SlalomLeft+0x218>
 80096c2:	ed92 7a03 	vldr	s14, [r2, #12]
 80096c6:	eeb4 7ae3 	vcmpe.f32	s14, s7
 80096ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ce:	d4eb      	bmi.n	80096a8 <SlalomLeft+0x218>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	f43f af35 	beq.w	8009540 <SlalomLeft+0xb0>
 80096d6:	f8c9 e000 	str.w	lr, [r9]
 80096da:	e731      	b.n	8009540 <SlalomLeft+0xb0>
	return mouse->now.wall.south;
 80096dc:	7b39      	ldrb	r1, [r7, #12]
 80096de:	f3c1 1101 	ubfx	r1, r1, #4, #2
 80096e2:	e7ce      	b.n	8009682 <SlalomLeft+0x1f2>
	return mouse->now.wall.east;
 80096e4:	7b39      	ldrb	r1, [r7, #12]
 80096e6:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80096ea:	e7ca      	b.n	8009682 <SlalomLeft+0x1f2>
	return mouse->now.wall.north;
 80096ec:	7b39      	ldrb	r1, [r7, #12]
 80096ee:	f001 0103 	and.w	r1, r1, #3
 80096f2:	e7c6      	b.n	8009682 <SlalomLeft+0x1f2>
				TargetAngularV = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	602b      	str	r3, [r5, #0]
				break;
 80096f8:	e77b      	b.n	80095f2 <SlalomLeft+0x162>
 80096fa:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8009744 <SlalomLeft+0x2b4>
 80096fe:	4d07      	ldr	r5, [pc, #28]	; (800971c <SlalomLeft+0x28c>)
 8009700:	4907      	ldr	r1, [pc, #28]	; (8009720 <SlalomLeft+0x290>)
 8009702:	e71d      	b.n	8009540 <SlalomLeft+0xb0>
 8009704:	f3af 8000 	nop.w
 8009708:	54442d18 	.word	0x54442d18
 800970c:	3ff921fb 	.word	0x3ff921fb
 8009710:	20001564 	.word	0x20001564
 8009714:	2000154c 	.word	0x2000154c
 8009718:	200015a0 	.word	0x200015a0
 800971c:	2000152c 	.word	0x2000152c
 8009720:	20000214 	.word	0x20000214
 8009724:	2000151c 	.word	0x2000151c
 8009728:	20000210 	.word	0x20000210
 800972c:	20000220 	.word	0x20000220
 8009730:	20001580 	.word	0x20001580
 8009734:	2000158c 	.word	0x2000158c
 8009738:	43480000 	.word	0x43480000
 800973c:	437a0000 	.word	0x437a0000
 8009740:	20001318 	.word	0x20001318
 8009744:	20000218 	.word	0x20000218
 8009748:	200015c8 	.word	0x200015c8
 800974c:	00000000 	.word	0x00000000

08009750 <Accel>:
void Accel(float add_distance, float explore_speed, maze_node *maze, profile *mouse)
{
 8009750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	ed2d 8b02 	vpush	{d8}
	TargetAngularV = 0;
 8009758:	4a4d      	ldr	r2, [pc, #308]	; (8009890 <Accel+0x140>)
 800975a:	eddf 8a4e 	vldr	s17, [pc, #312]	; 8009894 <Accel+0x144>
	float additional_speed=0;
	additional_speed = explore_speed - CurrentVelocity[BODY];

	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
#else
	Acceleration = 2.89000f;
 800975e:	4b4e      	ldr	r3, [pc, #312]	; (8009898 <Accel+0x148>)
	TargetAngularV = 0;
 8009760:	edc2 8a00 	vstr	s17, [r2]
{
 8009764:	b083      	sub	sp, #12
#endif
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009766:	ee70 7a00 	vadd.f32	s15, s0, s0
	Acceleration = 2.89000f;
 800976a:	4a4c      	ldr	r2, [pc, #304]	; (800989c <Accel+0x14c>)
{
 800976c:	9000      	str	r0, [sp, #0]
	Acceleration = 2.89000f;
 800976e:	6013      	str	r3, [r2, #0]
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009770:	ee17 0a90 	vmov	r0, s15
{
 8009774:	eeb0 8a60 	vmov.f32	s16, s1
 8009778:	9101      	str	r1, [sp, #4]
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 800977a:	f7fe fe1d 	bl	80083b8 <__aeabi_f2d>
 800977e:	a340      	add	r3, pc, #256	; (adr r3, 8009880 <Accel+0x130>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	f7fe ff9a 	bl	80086bc <__aeabi_ddiv>
 8009788:	f7ff f91e 	bl	80089c8 <__aeabi_d2iz>

//	_Bool wall_cut = false;
	Pid[A_VELO_PID].flag = 1;
 800978c:	4b44      	ldr	r3, [pc, #272]	; (80098a0 <Accel+0x150>)
 800978e:	4c45      	ldr	r4, [pc, #276]	; (80098a4 <Accel+0x154>)
 8009790:	4e45      	ldr	r6, [pc, #276]	; (80098a8 <Accel+0x158>)
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
		{
			updateRealSearch(maze, mouse);
			Calc = 1;
		}
		if(TargetVelocity[BODY] > explore_speed)
 8009792:	f8df a11c 	ldr.w	sl, [pc, #284]	; 80098b0 <Accel+0x160>
	Pid[A_VELO_PID].flag = 1;
 8009796:	2201      	movs	r2, #1
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009798:	4605      	mov	r5, r0
	Pid[A_VELO_PID].flag = 1;
 800979a:	629a      	str	r2, [r3, #40]	; 0x28
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800979c:	e006      	b.n	80097ac <Accel+0x5c>
		if(TargetVelocity[BODY] > explore_speed)
 800979e:	edda 7a02 	vldr	s15, [sl, #8]
 80097a2:	eef4 7ac8 	vcmpe.f32	s15, s16
 80097a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097aa:	dc39      	bgt.n	8009820 <Accel+0xd0>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80097ac:	68a3      	ldr	r3, [r4, #8]
 80097ae:	68b2      	ldr	r2, [r6, #8]
 80097b0:	442b      	add	r3, r5
 80097b2:	4293      	cmp	r3, r2
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80097b4:	4628      	mov	r0, r5
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80097b6:	dd3e      	ble.n	8009836 <Accel+0xe6>
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80097b8:	f7fe fdec 	bl	8008394 <__aeabi_i2d>
 80097bc:	a332      	add	r3, pc, #200	; (adr r3, 8009888 <Accel+0x138>)
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	f7fe fe51 	bl	8008468 <__aeabi_dmul>
 80097c6:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80097ca:	68b7      	ldr	r7, [r6, #8]
 80097cc:	4680      	mov	r8, r0
 80097ce:	4658      	mov	r0, fp
 80097d0:	4689      	mov	r9, r1
 80097d2:	f7fe fddf 	bl	8008394 <__aeabi_i2d>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4640      	mov	r0, r8
 80097dc:	4649      	mov	r1, r9
 80097de:	f7fe fc8d 	bl	80080fc <__adddf3>
 80097e2:	4680      	mov	r8, r0
 80097e4:	4638      	mov	r0, r7
 80097e6:	4689      	mov	r9, r1
 80097e8:	f7fe fdd4 	bl	8008394 <__aeabi_i2d>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4640      	mov	r0, r8
 80097f2:	4649      	mov	r1, r9
 80097f4:	f7ff f8aa 	bl	800894c <__aeabi_dcmplt>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d0d0      	beq.n	800979e <Accel+0x4e>
 80097fc:	4b2b      	ldr	r3, [pc, #172]	; (80098ac <Accel+0x15c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1cc      	bne.n	800979e <Accel+0x4e>
			updateRealSearch(maze, mouse);
 8009804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009808:	f003 fc6c 	bl	800d0e4 <updateRealSearch>
			Calc = 1;
 800980c:	4a27      	ldr	r2, [pc, #156]	; (80098ac <Accel+0x15c>)
 800980e:	2301      	movs	r3, #1
 8009810:	6013      	str	r3, [r2, #0]
		if(TargetVelocity[BODY] > explore_speed)
 8009812:	edda 7a02 	vldr	s15, [sl, #8]
 8009816:	eef4 7ac8 	vcmpe.f32	s15, s16
 800981a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800981e:	ddc5      	ble.n	80097ac <Accel+0x5c>
		{
			Acceleration = 0;
 8009820:	4b1e      	ldr	r3, [pc, #120]	; (800989c <Accel+0x14c>)
 8009822:	edc3 8a00 	vstr	s17, [r3]
			TargetVelocity[BODY] = explore_speed;
 8009826:	ed8a 8a02 	vstr	s16, [sl, #8]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800982a:	68a3      	ldr	r3, [r4, #8]
 800982c:	68b2      	ldr	r2, [r6, #8]
 800982e:	442b      	add	r3, r5
 8009830:	4293      	cmp	r3, r2
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009832:	4628      	mov	r0, r5
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009834:	dcc0      	bgt.n	80097b8 <Accel+0x68>
//			wall_cut = true;
//			ChangeLED(3);
//		}

	}
	Acceleration = 0;
 8009836:	4a19      	ldr	r2, [pc, #100]	; (800989c <Accel+0x14c>)
 8009838:	2300      	movs	r3, #0
 800983a:	6013      	str	r3, [r2, #0]
//	wall_cut = false;
	KeepPulse[BODY] += target_pulse;
 800983c:	68a3      	ldr	r3, [r4, #8]
 800983e:	442b      	add	r3, r5
 8009840:	60a3      	str	r3, [r4, #8]
	KeepPulse[LEFT] += target_pulse*0.5f;
 8009842:	ed94 7a00 	vldr	s14, [r4]
 8009846:	ee07 5a90 	vmov	s15, r5
 800984a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800984e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009852:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009856:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800985a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800985e:	ed84 7a00 	vstr	s14, [r4]
	KeepPulse[RIGHT] += target_pulse*0.5f;
 8009862:	ed94 7a01 	vldr	s14, [r4, #4]
 8009866:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800986a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800986e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009872:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8009876:	b003      	add	sp, #12
 8009878:	ecbd 8b02 	vpop	{d8}
 800987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009880:	8fa963a1 	.word	0x8fa963a1
 8009884:	3f5023d2 	.word	0x3f5023d2
 8009888:	9999999a 	.word	0x9999999a
 800988c:	3fe99999 	.word	0x3fe99999
 8009890:	2000152c 	.word	0x2000152c
 8009894:	00000000 	.word	0x00000000
 8009898:	4038f5c3 	.word	0x4038f5c3
 800989c:	2000020c 	.word	0x2000020c
 80098a0:	20001318 	.word	0x20001318
 80098a4:	20001580 	.word	0x20001580
 80098a8:	2000154c 	.word	0x2000154c
 80098ac:	200015c8 	.word	0x200015c8
 80098b0:	2000151c 	.word	0x2000151c
 80098b4:	00000000 	.word	0x00000000

080098b8 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	ed2d 8b04 	vpush	{d8-d9}

#else
	Acceleration = -2.89;
#endif
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 80098c0:	ee70 7a00 	vadd.f32	s15, s0, s0
	Acceleration = -2.89;
 80098c4:	4a5a      	ldr	r2, [pc, #360]	; (8009a30 <Decel+0x178>)
 80098c6:	4b5b      	ldr	r3, [pc, #364]	; (8009a34 <Decel+0x17c>)
 80098c8:	6013      	str	r3, [r2, #0]
{
 80098ca:	b083      	sub	sp, #12
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 80098cc:	ee17 0a90 	vmov	r0, s15
{
 80098d0:	eeb0 8a60 	vmov.f32	s16, s1
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 80098d4:	f7fe fd70 	bl	80083b8 <__aeabi_f2d>
 80098d8:	a351      	add	r3, pc, #324	; (adr r3, 8009a20 <Decel+0x168>)
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	f7fe feed 	bl	80086bc <__aeabi_ddiv>
 80098e2:	f7ff f871 	bl	80089c8 <__aeabi_d2iz>
 80098e6:	4b54      	ldr	r3, [pc, #336]	; (8009a38 <Decel+0x180>)
 80098e8:	4c54      	ldr	r4, [pc, #336]	; (8009a3c <Decel+0x184>)
 80098ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ec:	9301      	str	r3, [sp, #4]

	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80098ee:	2300      	movs	r3, #0
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 80098f0:	4605      	mov	r5, r0
 80098f2:	4e53      	ldr	r6, [pc, #332]	; (8009a40 <Decel+0x188>)
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80098f4:	ed9f 9a53 	vldr	s18, [pc, #332]	; 8009a44 <Decel+0x18c>
 80098f8:	f8df a160 	ldr.w	sl, [pc, #352]	; 8009a5c <Decel+0x1a4>
	{
		if(end_speed == 0){
 80098fc:	eddf 8a52 	vldr	s17, [pc, #328]	; 8009a48 <Decel+0x190>
			if(TargetVelocity[BODY] <= 90){
 8009900:	eddf 9a52 	vldr	s19, [pc, #328]	; 8009a4c <Decel+0x194>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	e033      	b.n	8009970 <Decel+0xb8>
			if(TargetVelocity[BODY] <= 90){
 8009908:	eef4 7ae9 	vcmpe.f32	s15, s19
 800990c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009910:	d80a      	bhi.n	8009928 <Decel+0x70>
				TargetVelocity[BODY] = 90;//end_speed;
 8009912:	edc3 9a02 	vstr	s19, [r3, #8]
			}
		}
		else if(end_speed != 0){
			if(TargetVelocity[BODY] <= end_speed){
				TargetVelocity[BODY] = end_speed;//90;//end_speed;
				Acceleration = 0;
 8009916:	4b46      	ldr	r3, [pc, #280]	; (8009a30 <Decel+0x178>)
 8009918:	edc3 8a00 	vstr	s17, [r3]
				TargetAngularV = 0;
 800991c:	4b4c      	ldr	r3, [pc, #304]	; (8009a50 <Decel+0x198>)
 800991e:	edc3 8a00 	vstr	s17, [r3]
				AngularAcceleration = 0;
 8009922:	4b4c      	ldr	r3, [pc, #304]	; (8009a54 <Decel+0x19c>)
 8009924:	edc3 8a00 	vstr	s17, [r3]
			}
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 8009928:	4628      	mov	r0, r5
 800992a:	f7fe fd33 	bl	8008394 <__aeabi_i2d>
 800992e:	a33e      	add	r3, pc, #248	; (adr r3, 8009a28 <Decel+0x170>)
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f7fe fd98 	bl	8008468 <__aeabi_dmul>
 8009938:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800993c:	f8da 7008 	ldr.w	r7, [sl, #8]
 8009940:	4680      	mov	r8, r0
 8009942:	4658      	mov	r0, fp
 8009944:	4689      	mov	r9, r1
 8009946:	f7fe fd25 	bl	8008394 <__aeabi_i2d>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	4640      	mov	r0, r8
 8009950:	4649      	mov	r1, r9
 8009952:	f7fe fbd3 	bl	80080fc <__adddf3>
 8009956:	4680      	mov	r8, r0
 8009958:	4638      	mov	r0, r7
 800995a:	4689      	mov	r9, r1
 800995c:	f7fe fd1a 	bl	8008394 <__aeabi_i2d>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4640      	mov	r0, r8
 8009966:	4649      	mov	r1, r9
 8009968:	f7fe fff0 	bl	800894c <__aeabi_dcmplt>
 800996c:	2800      	cmp	r0, #0
 800996e:	d14e      	bne.n	8009a0e <Decel+0x156>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009970:	ed96 7a03 	vldr	s14, [r6, #12]
 8009974:	edd6 7a00 	vldr	s15, [r6]
 8009978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800997c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8009980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009984:	d515      	bpl.n	80099b2 <Decel+0xfa>
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	f8da 2008 	ldr.w	r2, [sl, #8]
 800998c:	442b      	add	r3, r5
 800998e:	4293      	cmp	r3, r2
 8009990:	dd0f      	ble.n	80099b2 <Decel+0xfa>
		if(end_speed == 0){
 8009992:	eeb5 8a40 	vcmp.f32	s16, #0.0
			if(TargetVelocity[BODY] <= 90){
 8009996:	4b30      	ldr	r3, [pc, #192]	; (8009a58 <Decel+0x1a0>)
		if(end_speed == 0){
 8009998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			if(TargetVelocity[BODY] <= 90){
 800999c:	edd3 7a02 	vldr	s15, [r3, #8]
		if(end_speed == 0){
 80099a0:	d0b2      	beq.n	8009908 <Decel+0x50>
			if(TargetVelocity[BODY] <= end_speed){
 80099a2:	eef4 7ac8 	vcmpe.f32	s15, s16
 80099a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099aa:	d8bd      	bhi.n	8009928 <Decel+0x70>
				TargetVelocity[BODY] = end_speed;//90;//end_speed;
 80099ac:	ed83 8a02 	vstr	s16, [r3, #8]
 80099b0:	e7b1      	b.n	8009916 <Decel+0x5e>
 80099b2:	9b00      	ldr	r3, [sp, #0]
 80099b4:	bb7b      	cbnz	r3, 8009a16 <Decel+0x15e>
		{
			Pid[A_VELO_PID].flag = 1;
		}
	}
	TargetVelocity[BODY] = end_speed;
 80099b6:	4a28      	ldr	r2, [pc, #160]	; (8009a58 <Decel+0x1a0>)
 80099b8:	ed82 8a02 	vstr	s16, [r2, #8]
	Acceleration = 0;
 80099bc:	4a1c      	ldr	r2, [pc, #112]	; (8009a30 <Decel+0x178>)
 80099be:	2300      	movs	r3, #0
 80099c0:	6013      	str	r3, [r2, #0]
	TargetAngularV = 0;
 80099c2:	4a23      	ldr	r2, [pc, #140]	; (8009a50 <Decel+0x198>)
 80099c4:	6013      	str	r3, [r2, #0]
	AngularAcceleration = 0;
 80099c6:	4a23      	ldr	r2, [pc, #140]	; (8009a54 <Decel+0x19c>)
 80099c8:	6013      	str	r3, [r2, #0]
	//ChangeLED(2);
	KeepPulse[BODY] += target_pulse;
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	442b      	add	r3, r5
 80099ce:	60a3      	str	r3, [r4, #8]
	KeepPulse[LEFT] += target_pulse*0.5f;
 80099d0:	ed94 7a00 	vldr	s14, [r4]
 80099d4:	ee07 5a90 	vmov	s15, r5
 80099d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099e0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80099e4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80099e8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80099ec:	ed84 7a00 	vstr	s14, [r4]
	KeepPulse[RIGHT] += target_pulse*0.5f;
 80099f0:	ed94 7a01 	vldr	s14, [r4, #4]
 80099f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099f8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80099fc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009a00:	edc4 7a01 	vstr	s15, [r4, #4]


}
 8009a04:	b003      	add	sp, #12
 8009a06:	ecbd 8b04 	vpop	{d8-d9}
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0e:	2301      	movs	r3, #1
			Pid[A_VELO_PID].flag = 1;
 8009a10:	e9cd 3300 	strd	r3, r3, [sp]
 8009a14:	e7ac      	b.n	8009970 <Decel+0xb8>
 8009a16:	4b08      	ldr	r3, [pc, #32]	; (8009a38 <Decel+0x180>)
 8009a18:	9a01      	ldr	r2, [sp, #4]
 8009a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8009a1c:	e7cb      	b.n	80099b6 <Decel+0xfe>
 8009a1e:	bf00      	nop
 8009a20:	8fa963a1 	.word	0x8fa963a1
 8009a24:	3f5023d2 	.word	0x3f5023d2
 8009a28:	cccccccd 	.word	0xcccccccd
 8009a2c:	3fe4cccc 	.word	0x3fe4cccc
 8009a30:	2000020c 	.word	0x2000020c
 8009a34:	c038f5c3 	.word	0xc038f5c3
 8009a38:	20001318 	.word	0x20001318
 8009a3c:	20001580 	.word	0x20001580
 8009a40:	2000158c 	.word	0x2000158c
 8009a44:	456d8000 	.word	0x456d8000
 8009a48:	00000000 	.word	0x00000000
 8009a4c:	42b40000 	.word	0x42b40000
 8009a50:	2000152c 	.word	0x2000152c
 8009a54:	20000214 	.word	0x20000214
 8009a58:	2000151c 	.word	0x2000151c
 8009a5c:	2000154c 	.word	0x2000154c

08009a60 <Calib>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void Calib(int distance)
{
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Pos.を考え中
	int target_pulse = (int)(2*distance/MM_PER_PULSE);
 8009a62:	0040      	lsls	r0, r0, #1
 8009a64:	f7fe fc96 	bl	8008394 <__aeabi_i2d>
 8009a68:	a325      	add	r3, pc, #148	; (adr r3, 8009b00 <Calib+0xa0>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f7fe fe25 	bl	80086bc <__aeabi_ddiv>
 8009a72:	f7fe ffa9 	bl	80089c8 <__aeabi_d2iz>
	//int keep_pulse = TotalPulse[BODY]+target_pulse;
	if(target_pulse > 0)
 8009a76:	2800      	cmp	r0, #0
 8009a78:	dd1a      	ble.n	8009ab0 <Calib+0x50>
	{
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 8009a7a:	4a1b      	ldr	r2, [pc, #108]	; (8009ae8 <Calib+0x88>)
 8009a7c:	491b      	ldr	r1, [pc, #108]	; (8009aec <Calib+0x8c>)
 8009a7e:	6893      	ldr	r3, [r2, #8]
 8009a80:	688c      	ldr	r4, [r1, #8]
 8009a82:	4d1b      	ldr	r5, [pc, #108]	; (8009af0 <Calib+0x90>)
 8009a84:	4403      	add	r3, r0
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	4c1a      	ldr	r4, [pc, #104]	; (8009af4 <Calib+0x94>)
 8009a8a:	dd0a      	ble.n	8009aa2 <Calib+0x42>
		{
			Acceleration = 0;
			TargetVelocity[BODY] = 70;
 8009a8c:	4f1a      	ldr	r7, [pc, #104]	; (8009af8 <Calib+0x98>)
			Acceleration = 0;
 8009a8e:	f04f 0c00 	mov.w	ip, #0
 8009a92:	f8c4 c000 	str.w	ip, [r4]
			TargetVelocity[BODY] = 70;
 8009a96:	60af      	str	r7, [r5, #8]
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 8009a98:	6893      	ldr	r3, [r2, #8]
 8009a9a:	688e      	ldr	r6, [r1, #8]
 8009a9c:	4403      	add	r3, r0
 8009a9e:	42b3      	cmp	r3, r6
 8009aa0:	dcf7      	bgt.n	8009a92 <Calib+0x32>
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
		{
			Acceleration = 0;
			TargetVelocity[BODY] = -100;
		}
		KeepPulse[BODY] += target_pulse;
 8009aa2:	6893      	ldr	r3, [r2, #8]
 8009aa4:	4418      	add	r0, r3
 8009aa6:	6090      	str	r0, [r2, #8]
	}
	TargetVelocity[BODY] = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60ab      	str	r3, [r5, #8]
	Acceleration = 0;
 8009aac:	6023      	str	r3, [r4, #0]
}
 8009aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(target_pulse < 0 )
 8009ab0:	d014      	beq.n	8009adc <Calib+0x7c>
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 8009ab2:	4a0d      	ldr	r2, [pc, #52]	; (8009ae8 <Calib+0x88>)
 8009ab4:	490d      	ldr	r1, [pc, #52]	; (8009aec <Calib+0x8c>)
 8009ab6:	6893      	ldr	r3, [r2, #8]
 8009ab8:	688c      	ldr	r4, [r1, #8]
 8009aba:	4d0d      	ldr	r5, [pc, #52]	; (8009af0 <Calib+0x90>)
 8009abc:	4403      	add	r3, r0
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	4c0c      	ldr	r4, [pc, #48]	; (8009af4 <Calib+0x94>)
 8009ac2:	daee      	bge.n	8009aa2 <Calib+0x42>
			TargetVelocity[BODY] = -100;
 8009ac4:	4f0d      	ldr	r7, [pc, #52]	; (8009afc <Calib+0x9c>)
			Acceleration = 0;
 8009ac6:	f04f 0c00 	mov.w	ip, #0
 8009aca:	f8c4 c000 	str.w	ip, [r4]
			TargetVelocity[BODY] = -100;
 8009ace:	60af      	str	r7, [r5, #8]
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 8009ad0:	6893      	ldr	r3, [r2, #8]
 8009ad2:	688e      	ldr	r6, [r1, #8]
 8009ad4:	4403      	add	r3, r0
 8009ad6:	42b3      	cmp	r3, r6
 8009ad8:	dbf7      	blt.n	8009aca <Calib+0x6a>
 8009ada:	e7e2      	b.n	8009aa2 <Calib+0x42>
 8009adc:	4c05      	ldr	r4, [pc, #20]	; (8009af4 <Calib+0x94>)
 8009ade:	4d04      	ldr	r5, [pc, #16]	; (8009af0 <Calib+0x90>)
 8009ae0:	e7e2      	b.n	8009aa8 <Calib+0x48>
 8009ae2:	bf00      	nop
 8009ae4:	f3af 8000 	nop.w
 8009ae8:	20001580 	.word	0x20001580
 8009aec:	2000154c 	.word	0x2000154c
 8009af0:	2000151c 	.word	0x2000151c
 8009af4:	2000020c 	.word	0x2000020c
 8009af8:	428c0000 	.word	0x428c0000
 8009afc:	c2c80000 	.word	0xc2c80000
 8009b00:	8fa963a1 	.word	0x8fa963a1
 8009b04:	3f5023d2 	.word	0x3f5023d2

08009b08 <AjustCenter>:
//	Accel(7,-70);
//	Decel(7,0);
#endif

}
float AjustCenter(profile *mouse){
 8009b08:	b538      	push	{r3, r4, r5, lr}
	//x,y,lrfb
	PIDChangeFlag(L_WALL_PID, 0);
 8009b0a:	2100      	movs	r1, #0
float AjustCenter(profile *mouse){
 8009b0c:	4605      	mov	r5, r0
	PIDChangeFlag(L_WALL_PID, 0);
 8009b0e:	2002      	movs	r0, #2
 8009b10:	f004 ff70 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 8009b14:	2100      	movs	r1, #0
 8009b16:	2003      	movs	r0, #3
 8009b18:	f004 ff6c 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f004 ff68 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 8009b24:	2100      	movs	r1, #0
 8009b26:	4608      	mov	r0, r1
 8009b28:	f004 ff64 	bl	800e9f4 <PIDChangeFlag>
	int wall_ctrl = GetWallCtrlDirection(mouse);
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f7ff f963 	bl	8008df8 <GetWallCtrlDirection>
	if(wall_ctrl == 0)
 8009b32:	4604      	mov	r4, r0
 8009b34:	bb10      	cbnz	r0, 8009b7c <AjustCenter+0x74>
		ChangeLED(7);
 8009b36:	2007      	movs	r0, #7
 8009b38:	f004 fb34 	bl	800e1a4 <ChangeLED>
//	float photo_threshold[2]=
//	{
//			3000,
//			4000
//	};
	switch(mouse->now.car%8)
 8009b3c:	7aab      	ldrb	r3, [r5, #10]
 8009b3e:	f003 0307 	and.w	r3, r3, #7
 8009b42:	2b06      	cmp	r3, #6
 8009b44:	d80e      	bhi.n	8009b64 <AjustCenter+0x5c>
 8009b46:	e8df f003 	tbb	[pc, r3]
 8009b4a:	0d48      	.short	0x0d48
 8009b4c:	0d1d0d3d 	.word	0x0d1d0d3d
 8009b50:	04          	.byte	0x04
 8009b51:	00          	.byte	0x00
				Angle = TargetAngle;
				return 61.5;
			}
		break;
	case west:
			if (mouse->now.wall.west == wall) //前に壁があれば前で調整
 8009b52:	7b2b      	ldrb	r3, [r5, #12]
 8009b54:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8009b58:	2a40      	cmp	r2, #64	; 0x40
 8009b5a:	d06c      	beq.n	8009c36 <AjustCenter+0x12e>
				while( !((3000 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4000)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
					{
//					ChangeLED(Pid[F_WALL_PID].flag);
					}
			}
			else if (mouse->now.wall.east == wall) //後ろに壁があるときはバック
 8009b5c:	f003 030c 	and.w	r3, r3, #12
 8009b60:	2b04      	cmp	r3, #4
 8009b62:	d038      	beq.n	8009bd6 <AjustCenter+0xce>
	default:
		break;
	}
//	Control_Mode = NOT_CTRL_PID;
	Pid[wall_ctrl].flag = 0;
	TargetAngularV = 0;
 8009b64:	4a6a      	ldr	r2, [pc, #424]	; (8009d10 <AjustCenter+0x208>)
	Pid[wall_ctrl].flag = 0;
 8009b66:	4b6b      	ldr	r3, [pc, #428]	; (8009d14 <AjustCenter+0x20c>)
	return 45;
 8009b68:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8009d18 <AjustCenter+0x210>
	TargetAngularV = 0;
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	6011      	str	r1, [r2, #0]
	Pid[wall_ctrl].flag = 0;
 8009b70:	222c      	movs	r2, #44	; 0x2c
 8009b72:	fb02 3404 	mla	r4, r2, r4, r3
 8009b76:	2300      	movs	r3, #0
 8009b78:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
	else ChangeLED(0);
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	f004 fb11 	bl	800e1a4 <ChangeLED>
 8009b82:	e7db      	b.n	8009b3c <AjustCenter+0x34>
			if (mouse->now.wall.south == wall) //前に壁があれば前で調整
 8009b84:	7b29      	ldrb	r1, [r5, #12]
 8009b86:	f001 0330 	and.w	r3, r1, #48	; 0x30
 8009b8a:	2b10      	cmp	r3, #16
 8009b8c:	d077      	beq.n	8009c7e <AjustCenter+0x176>
			else if (mouse->now.wall.north == wall) //後ろに壁があるときはバック
 8009b8e:	f001 0103 	and.w	r1, r1, #3
 8009b92:	2901      	cmp	r1, #1
 8009b94:	d1e6      	bne.n	8009b64 <AjustCenter+0x5c>
				PIDChangeFlag(wall_ctrl, 1);
 8009b96:	4620      	mov	r0, r4
 8009b98:	f004 ff2c 	bl	800e9f4 <PIDChangeFlag>
	Calib(-50);
 8009b9c:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8009ba0:	f7ff ff5e 	bl	8009a60 <Calib>
				TargetAngularV = 0;
 8009ba4:	4b5a      	ldr	r3, [pc, #360]	; (8009d10 <AjustCenter+0x208>)
				Angle = TargetAngle;
 8009ba6:	495d      	ldr	r1, [pc, #372]	; (8009d1c <AjustCenter+0x214>)
				Pid[wall_ctrl].flag = 0;
 8009ba8:	4a5a      	ldr	r2, [pc, #360]	; (8009d14 <AjustCenter+0x20c>)
				return 61.5;
 8009baa:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8009d20 <AjustCenter+0x218>
				TargetAngularV = 0;
 8009bae:	2000      	movs	r0, #0
 8009bb0:	6018      	str	r0, [r3, #0]
				Pid[wall_ctrl].flag = 0;
 8009bb2:	232c      	movs	r3, #44	; 0x2c
				Angle = TargetAngle;
 8009bb4:	6808      	ldr	r0, [r1, #0]
 8009bb6:	495b      	ldr	r1, [pc, #364]	; (8009d24 <AjustCenter+0x21c>)
				Pid[wall_ctrl].flag = 0;
 8009bb8:	fb03 2404 	mla	r4, r3, r4, r2
 8009bbc:	2300      	movs	r3, #0
				Angle = TargetAngle;
 8009bbe:	6008      	str	r0, [r1, #0]
				Pid[wall_ctrl].flag = 0;
 8009bc0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
			if (mouse->now.wall.east == wall) //前に壁があれば前で調整
 8009bc4:	7b2b      	ldrb	r3, [r5, #12]
 8009bc6:	f003 020c 	and.w	r2, r3, #12
 8009bca:	2a04      	cmp	r2, #4
 8009bcc:	d00f      	beq.n	8009bee <AjustCenter+0xe6>
			else if (mouse->now.wall.west == wall) //後ろに壁があるときはバック
 8009bce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009bd2:	2b40      	cmp	r3, #64	; 0x40
 8009bd4:	d1c6      	bne.n	8009b64 <AjustCenter+0x5c>
				PIDChangeFlag(wall_ctrl, 1);
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	e7dd      	b.n	8009b96 <AjustCenter+0x8e>
			if (mouse->now.wall.north == wall) //前に壁があれば前で調整
 8009bda:	7b2b      	ldrb	r3, [r5, #12]
 8009bdc:	f003 0503 	and.w	r5, r3, #3
 8009be0:	2d01      	cmp	r5, #1
 8009be2:	d070      	beq.n	8009cc6 <AjustCenter+0x1be>
			else if (mouse->now.wall.south == wall) //後ろに壁があるときはバック
 8009be4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009be8:	2b10      	cmp	r3, #16
 8009bea:	d1bb      	bne.n	8009b64 <AjustCenter+0x5c>
 8009bec:	e7f3      	b.n	8009bd6 <AjustCenter+0xce>
				Calib(-10);
 8009bee:	f06f 0009 	mvn.w	r0, #9
 8009bf2:	f7ff ff35 	bl	8009a60 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f004 fefb 	bl	800e9f4 <PIDChangeFlag>
 8009bfe:	4b4a      	ldr	r3, [pc, #296]	; (8009d28 <AjustCenter+0x220>)
				while( !(( (3000 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4000))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 8009c00:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8009d2c <AjustCenter+0x224>
 8009c04:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8009d30 <AjustCenter+0x228>
 8009c08:	edd3 7a00 	vldr	s15, [r3]
 8009c0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c14:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c1c:	ddf4      	ble.n	8009c08 <AjustCenter+0x100>
 8009c1e:	edd3 7a00 	vldr	s15, [r3]
 8009c22:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c2a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c32:	d5e9      	bpl.n	8009c08 <AjustCenter+0x100>
 8009c34:	e796      	b.n	8009b64 <AjustCenter+0x5c>
				Calib(-10);
 8009c36:	f06f 0009 	mvn.w	r0, #9
 8009c3a:	f7ff ff11 	bl	8009a60 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009c3e:	2101      	movs	r1, #1
 8009c40:	4620      	mov	r0, r4
 8009c42:	f004 fed7 	bl	800e9f4 <PIDChangeFlag>
 8009c46:	4b38      	ldr	r3, [pc, #224]	; (8009d28 <AjustCenter+0x220>)
				while( !((3000 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4000)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 8009c48:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009d2c <AjustCenter+0x224>
 8009c4c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8009d30 <AjustCenter+0x228>
 8009c50:	edd3 7a00 	vldr	s15, [r3]
 8009c54:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c5c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c64:	ddf4      	ble.n	8009c50 <AjustCenter+0x148>
 8009c66:	edd3 7a00 	vldr	s15, [r3]
 8009c6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c72:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7a:	d5e9      	bpl.n	8009c50 <AjustCenter+0x148>
 8009c7c:	e772      	b.n	8009b64 <AjustCenter+0x5c>
				Calib(-10);
 8009c7e:	f06f 0009 	mvn.w	r0, #9
 8009c82:	f7ff feed 	bl	8009a60 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009c86:	2101      	movs	r1, #1
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f004 feb3 	bl	800e9f4 <PIDChangeFlag>
 8009c8e:	4b26      	ldr	r3, [pc, #152]	; (8009d28 <AjustCenter+0x220>)
				while( !((3000< Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4000)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 8009c90:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009d2c <AjustCenter+0x224>
 8009c94:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8009d30 <AjustCenter+0x228>
 8009c98:	edd3 7a00 	vldr	s15, [r3]
 8009c9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8009ca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ca4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cac:	ddf4      	ble.n	8009c98 <AjustCenter+0x190>
 8009cae:	edd3 7a00 	vldr	s15, [r3]
 8009cb2:	ed93 7a03 	vldr	s14, [r3, #12]
 8009cb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cba:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc2:	d5e9      	bpl.n	8009c98 <AjustCenter+0x190>
 8009cc4:	e74e      	b.n	8009b64 <AjustCenter+0x5c>
				Calib(-10);
 8009cc6:	f06f 0009 	mvn.w	r0, #9
 8009cca:	f7ff fec9 	bl	8009a60 <Calib>
				PIDChangeFlag(wall_ctrl, 1);
 8009cce:	4629      	mov	r1, r5
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f004 fe8f 	bl	800e9f4 <PIDChangeFlag>
 8009cd6:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <AjustCenter+0x220>)
				while( !( (3000 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4000)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))//(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )
 8009cd8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8009d2c <AjustCenter+0x224>
 8009cdc:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8009d30 <AjustCenter+0x228>
 8009ce0:	edd3 7a00 	vldr	s15, [r3]
 8009ce4:	ed93 7a03 	vldr	s14, [r3, #12]
 8009ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cec:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf4:	ddf4      	ble.n	8009ce0 <AjustCenter+0x1d8>
 8009cf6:	edd3 7a00 	vldr	s15, [r3]
 8009cfa:	ed93 7a03 	vldr	s14, [r3, #12]
 8009cfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d02:	eef4 7ac6 	vcmpe.f32	s15, s12
 8009d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0a:	d5e9      	bpl.n	8009ce0 <AjustCenter+0x1d8>
 8009d0c:	e72a      	b.n	8009b64 <AjustCenter+0x5c>
 8009d0e:	bf00      	nop
 8009d10:	2000152c 	.word	0x2000152c
 8009d14:	20001318 	.word	0x20001318
 8009d18:	42340000 	.word	0x42340000
 8009d1c:	20000220 	.word	0x20000220
 8009d20:	42760000 	.word	0x42760000
 8009d24:	20000210 	.word	0x20000210
 8009d28:	2000158c 	.word	0x2000158c
 8009d2c:	453b8000 	.word	0x453b8000
 8009d30:	457a0000 	.word	0x457a0000

08009d34 <GetWallCompensateDir>:
int GetWallCompensateDir(profile *mouse)
{
	switch(mouse->now.car%8)
 8009d34:	7a83      	ldrb	r3, [r0, #10]
 8009d36:	f003 0307 	and.w	r3, r3, #7
 8009d3a:	2b06      	cmp	r3, #6
 8009d3c:	d835      	bhi.n	8009daa <GetWallCompensateDir+0x76>
 8009d3e:	e8df f003 	tbb	[pc, r3]
 8009d42:	3428      	.short	0x3428
 8009d44:	3410341c 	.word	0x3410341c
 8009d48:	04          	.byte	0x04
 8009d49:	00          	.byte	0x00
				{
					return R_WALL_PID;
				}
				break;
			case west:
				if ( mouse->now.wall.north == wall )
 8009d4a:	7b03      	ldrb	r3, [r0, #12]
 8009d4c:	f003 0203 	and.w	r2, r3, #3
 8009d50:	2a01      	cmp	r2, #1
 8009d52:	d02e      	beq.n	8009db2 <GetWallCompensateDir+0x7e>
				{
					return R_WALL_PID;
				}
				else if ( mouse->now.wall.south == wall )
 8009d54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d58:	2b10      	cmp	r3, #16
					return L_WALL_PID;
 8009d5a:	bf14      	ite	ne
 8009d5c:	2006      	movne	r0, #6
 8009d5e:	2002      	moveq	r0, #2
 8009d60:	4770      	bx	lr
				if(mouse->now.wall.east == wall)
 8009d62:	7b03      	ldrb	r3, [r0, #12]
 8009d64:	f003 020c 	and.w	r2, r3, #12
 8009d68:	2a04      	cmp	r2, #4
 8009d6a:	d020      	beq.n	8009dae <GetWallCompensateDir+0x7a>
				else if(mouse->now.wall.west == wall)
 8009d6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d70:	2b40      	cmp	r3, #64	; 0x40
					return R_WALL_PID;
 8009d72:	bf14      	ite	ne
 8009d74:	2006      	movne	r0, #6
 8009d76:	2003      	moveq	r0, #3
 8009d78:	4770      	bx	lr
				if(mouse->now.wall.north == wall)
 8009d7a:	7b03      	ldrb	r3, [r0, #12]
 8009d7c:	f003 0203 	and.w	r2, r3, #3
 8009d80:	2a01      	cmp	r2, #1
 8009d82:	d014      	beq.n	8009dae <GetWallCompensateDir+0x7a>
				else if(mouse->now.wall.south == wall)
 8009d84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d88:	2b10      	cmp	r3, #16
					return R_WALL_PID;
 8009d8a:	bf14      	ite	ne
 8009d8c:	2006      	movne	r0, #6
 8009d8e:	2003      	moveq	r0, #3
 8009d90:	4770      	bx	lr
				if(mouse->now.wall.east == wall)
 8009d92:	7b03      	ldrb	r3, [r0, #12]
 8009d94:	f003 020c 	and.w	r2, r3, #12
 8009d98:	2a04      	cmp	r2, #4
 8009d9a:	d00a      	beq.n	8009db2 <GetWallCompensateDir+0x7e>
				else if(mouse->now.wall.west == wall)
 8009d9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009da0:	2b40      	cmp	r3, #64	; 0x40
					return L_WALL_PID;
 8009da2:	bf14      	ite	ne
 8009da4:	2006      	movne	r0, #6
 8009da6:	2002      	moveq	r0, #2
 8009da8:	4770      	bx	lr
				}
				break;

			default:
				//斜め方向
				return N_WALL_PID;
 8009daa:	2006      	movs	r0, #6
 8009dac:	4770      	bx	lr
					return L_WALL_PID;
 8009dae:	2002      	movs	r0, #2
 8009db0:	4770      	bx	lr
					return R_WALL_PID;
 8009db2:	2003      	movs	r0, #3
				break;
			}
	return N_WALL_PID;
}
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop

08009db8 <GoStraight>:
void GoStraight(float move_distance,  float explore_speed, int accel_or_decel, maze_node *maze, profile *mouse)
{
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	ed2d 8b02 	vpush	{d8}
	//x = v0t + 0.5*at^2
	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
//	Control_Mode = A_VELO_PID;
	Pid[A_VELO_PID].flag = 1;
	//加減速時は角度制御だけにしておいてあとで困ったら追加
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009dc0:	ee70 7a00 	vadd.f32	s15, s0, s0
	Pid[A_VELO_PID].flag = 1;
 8009dc4:	4b9a      	ldr	r3, [pc, #616]	; (800a030 <GoStraight+0x278>)
 8009dc6:	2601      	movs	r6, #1
{
 8009dc8:	b085      	sub	sp, #20
 8009dca:	4604      	mov	r4, r0
	Pid[A_VELO_PID].flag = 1;
 8009dcc:	629e      	str	r6, [r3, #40]	; 0x28
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009dce:	ee17 0a90 	vmov	r0, s15
{
 8009dd2:	eeb0 8a40 	vmov.f32	s16, s0
 8009dd6:	eef0 8a60 	vmov.f32	s17, s1
 8009dda:	e9cd 2101 	strd	r2, r1, [sp, #4]
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009dde:	f7fe faeb 	bl	80083b8 <__aeabi_f2d>
 8009de2:	a38d      	add	r3, pc, #564	; (adr r3, 800a018 <GoStraight+0x260>)
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f7fe fc68 	bl	80086bc <__aeabi_ddiv>
 8009dec:	f7fe fdec 	bl	80089c8 <__aeabi_d2iz>
	if(accel_or_decel == 1) //加速するとき
 8009df0:	42b4      	cmp	r4, r6
 8009df2:	f000 80ab 	beq.w	8009f4c <GoStraight+0x194>
	{
		//explore_speed += AddVelocity;
		VelocityMax = true;
		Accel( move_distance , explore_speed, maze, mouse);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
	}
	else if(accel_or_decel == -1) //探索速度までの減速. ターン速度までの減速も後で入れる
 8009df6:	3401      	adds	r4, #1
 8009df8:	4683      	mov	fp, r0
 8009dfa:	f000 80b6 	beq.w	8009f6a <GoStraight+0x1b2>

	else
	{
		_Bool wall_cut=false;	//壁切れ用
		_Bool face_check  = false; //一度でも正面領域に収まったか
		int ctrl_mode = GetWallCtrlDirection(mouse);
 8009dfe:	9801      	ldr	r0, [sp, #4]
 8009e00:	4c8c      	ldr	r4, [pc, #560]	; (800a034 <GoStraight+0x27c>)
 8009e02:	4d8d      	ldr	r5, [pc, #564]	; (800a038 <GoStraight+0x280>)
 8009e04:	f7fe fff8 	bl	8008df8 <GetWallCtrlDirection>
				Pid[A_VELO_PID].flag = 1;
				Pid[ctrl_mode].flag = 0;
			}
			else {
				Pid[A_VELO_PID].flag = 0;
				Pid[ctrl_mode].flag = 1;//壁見る
 8009e08:	4989      	ldr	r1, [pc, #548]	; (800a030 <GoStraight+0x278>)
			ctrl_mode = A_VELO_PID;
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	2806      	cmp	r0, #6
 8009e0e:	bf08      	it	eq
 8009e10:	2200      	moveq	r2, #0
				Pid[ctrl_mode].flag = 1;//壁見る
 8009e12:	232c      	movs	r3, #44	; 0x2c
 8009e14:	fb03 1302 	mla	r3, r3, r2, r1
			ctrl_mode = A_VELO_PID;
 8009e18:	9203      	str	r2, [sp, #12]
				Pid[ctrl_mode].flag = 1;//壁見る
 8009e1a:	9300      	str	r3, [sp, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009e1c:	68a3      	ldr	r3, [r4, #8]
 8009e1e:	68aa      	ldr	r2, [r5, #8]
 8009e20:	445b      	add	r3, fp
 8009e22:	4293      	cmp	r3, r2
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009e24:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009e26:	dd5d      	ble.n	8009ee4 <GoStraight+0x12c>
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009e28:	f7fe fab4 	bl	8008394 <__aeabi_i2d>
 8009e2c:	68a6      	ldr	r6, [r4, #8]
 8009e2e:	4681      	mov	r9, r0
 8009e30:	4630      	mov	r0, r6
 8009e32:	468a      	mov	sl, r1
 8009e34:	f7fe faae 	bl	8008394 <__aeabi_i2d>
 8009e38:	a379      	add	r3, pc, #484	; (adr r3, 800a020 <GoStraight+0x268>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	4606      	mov	r6, r0
 8009e40:	460f      	mov	r7, r1
 8009e42:	4648      	mov	r0, r9
 8009e44:	4651      	mov	r1, sl
 8009e46:	f7fe fb0f 	bl	8008468 <__aeabi_dmul>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4630      	mov	r0, r6
 8009e50:	4639      	mov	r1, r7
 8009e52:	f7fe f953 	bl	80080fc <__adddf3>
 8009e56:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	460f      	mov	r7, r1
 8009e60:	f7fe fa98 	bl	8008394 <__aeabi_i2d>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4630      	mov	r0, r6
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	f7fe fd6e 	bl	800894c <__aeabi_dcmplt>
				Pid[A_VELO_PID].flag = 1;
 8009e70:	2201      	movs	r2, #1
				Pid[ctrl_mode].flag = 0;
 8009e72:	2300      	movs	r3, #0
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d063      	beq.n	8009f40 <GoStraight+0x188>
				Pid[A_VELO_PID].flag = 1;
 8009e78:	496d      	ldr	r1, [pc, #436]	; (800a030 <GoStraight+0x278>)
 8009e7a:	628a      	str	r2, [r1, #40]	; 0x28
				Pid[ctrl_mode].flag = 0;
 8009e7c:	9a00      	ldr	r2, [sp, #0]
 8009e7e:	6293      	str	r3, [r2, #40]	; 0x28
			}
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009e80:	68a0      	ldr	r0, [r4, #8]
 8009e82:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009e86:	f7fe fa85 	bl	8008394 <__aeabi_i2d>
 8009e8a:	a367      	add	r3, pc, #412	; (adr r3, 800a028 <GoStraight+0x270>)
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	4606      	mov	r6, r0
 8009e92:	460f      	mov	r7, r1
 8009e94:	4648      	mov	r0, r9
 8009e96:	4651      	mov	r1, sl
 8009e98:	f7fe fae6 	bl	8008468 <__aeabi_dmul>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	f7fe f92a 	bl	80080fc <__adddf3>
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	4640      	mov	r0, r8
 8009eac:	460f      	mov	r7, r1
 8009eae:	f7fe fa71 	bl	8008394 <__aeabi_i2d>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7fe fd47 	bl	800894c <__aeabi_dcmplt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d0ac      	beq.n	8009e1c <GoStraight+0x64>
 8009ec2:	4b5e      	ldr	r3, [pc, #376]	; (800a03c <GoStraight+0x284>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1a8      	bne.n	8009e1c <GoStraight+0x64>
			{
				updateRealSearch(maze, mouse);
 8009eca:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8009ece:	f003 f909 	bl	800d0e4 <updateRealSearch>
				Calc = 1;
 8009ed2:	4a5a      	ldr	r2, [pc, #360]	; (800a03c <GoStraight+0x284>)
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	6013      	str	r3, [r2, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009ed8:	68a3      	ldr	r3, [r4, #8]
 8009eda:	68aa      	ldr	r2, [r5, #8]
 8009edc:	445b      	add	r3, fp
 8009ede:	4293      	cmp	r3, r2
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009ee0:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009ee2:	dca1      	bgt.n	8009e28 <GoStraight+0x70>
	//		}
		}
		Pid[A_VELO_PID].flag = 1;
		Pid[ctrl_mode].flag = 0;//壁見る
		wall_cut = false;
		Acceleration = 0;
 8009ee4:	4b56      	ldr	r3, [pc, #344]	; (800a040 <GoStraight+0x288>)
		Pid[ctrl_mode].flag = 0;//壁見る
 8009ee6:	4852      	ldr	r0, [pc, #328]	; (800a030 <GoStraight+0x278>)
		Acceleration = 0;
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]
		KeepPulse[BODY] += target_pulse;
 8009eec:	68a3      	ldr	r3, [r4, #8]
		Pid[ctrl_mode].flag = 0;//壁見る
 8009eee:	9a03      	ldr	r2, [sp, #12]
		KeepPulse[BODY] += target_pulse;
 8009ef0:	445b      	add	r3, fp
 8009ef2:	60a3      	str	r3, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009ef4:	ed94 7a00 	vldr	s14, [r4]
 8009ef8:	ee07 ba90 	vmov	s15, fp
 8009efc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f04:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009f08:	eea7 7aa6 	vfma.f32	s14, s15, s13
		Pid[ctrl_mode].flag = 0;//壁見る
 8009f0c:	232c      	movs	r3, #44	; 0x2c
 8009f0e:	fb03 0302 	mla	r3, r3, r2, r0
		Pid[A_VELO_PID].flag = 1;
 8009f12:	2101      	movs	r1, #1
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009f14:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		Pid[ctrl_mode].flag = 0;//壁見る
 8009f18:	2200      	movs	r2, #0
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009f1a:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009f1e:	ed94 7a01 	vldr	s14, [r4, #4]
		Pid[A_VELO_PID].flag = 1;
 8009f22:	6281      	str	r1, [r0, #40]	; 0x28
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009f24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		Pid[ctrl_mode].flag = 0;//壁見る
 8009f28:	629a      	str	r2, [r3, #40]	; 0x28
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009f2a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009f2e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009f32:	edc4 7a01 	vstr	s15, [r4, #4]

	}
}
 8009f36:	b005      	add	sp, #20
 8009f38:	ecbd 8b02 	vpop	{d8}
 8009f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				Pid[A_VELO_PID].flag = 0;
 8009f40:	4a3b      	ldr	r2, [pc, #236]	; (800a030 <GoStraight+0x278>)
 8009f42:	6290      	str	r0, [r2, #40]	; 0x28
				Pid[ctrl_mode].flag = 1;//壁見る
 8009f44:	9a00      	ldr	r2, [sp, #0]
 8009f46:	2301      	movs	r3, #1
 8009f48:	6293      	str	r3, [r2, #40]	; 0x28
 8009f4a:	e799      	b.n	8009e80 <GoStraight+0xc8>
		Accel( move_distance , explore_speed, maze, mouse);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009f4c:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
		VelocityMax = true;
 8009f50:	4b3c      	ldr	r3, [pc, #240]	; (800a044 <GoStraight+0x28c>)
		Accel( move_distance , explore_speed, maze, mouse);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009f52:	eef0 0a68 	vmov.f32	s1, s17
 8009f56:	eeb0 0a48 	vmov.f32	s0, s16
		VelocityMax = true;
 8009f5a:	701c      	strb	r4, [r3, #0]
}
 8009f5c:	b005      	add	sp, #20
 8009f5e:	ecbd 8b02 	vpop	{d8}
 8009f62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Accel( move_distance , explore_speed, maze, mouse);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009f66:	f7ff bbf3 	b.w	8009750 <Accel>
		VelocityMax = false;
 8009f6a:	4b36      	ldr	r3, [pc, #216]	; (800a044 <GoStraight+0x28c>)
 8009f6c:	4c31      	ldr	r4, [pc, #196]	; (800a034 <GoStraight+0x27c>)
 8009f6e:	4d32      	ldr	r5, [pc, #200]	; (800a038 <GoStraight+0x280>)
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009f70:	4f32      	ldr	r7, [pc, #200]	; (800a03c <GoStraight+0x284>)
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009f72:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8009f76:	eef0 0a68 	vmov.f32	s1, s17
		VelocityMax = false;
 8009f7a:	2200      	movs	r2, #0
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009f7c:	ee28 0a00 	vmul.f32	s0, s16, s0
		VelocityMax = false;
 8009f80:	701a      	strb	r2, [r3, #0]
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009f82:	f7ff fc99 	bl	80098b8 <Decel>
 8009f86:	ee07 ba90 	vmov	s15, fp
 8009f8a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8009f8e:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
 8009f92:	ee28 8a88 	vmul.f32	s16, s17, s16
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009f96:	e001      	b.n	8009f9c <GoStraight+0x1e4>
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	b3bb      	cbz	r3, 800a00c <GoStraight+0x254>
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009f9c:	edd4 7a02 	vldr	s15, [r4, #8]
 8009fa0:	ed95 7a02 	vldr	s14, [r5, #8]
 8009fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fa8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fac:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb8:	dcee      	bgt.n	8009f98 <GoStraight+0x1e0>
		KeepPulse[BODY] += target_pulse*0.2f;
 8009fba:	edd4 7a02 	vldr	s15, [r4, #8]
 8009fbe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a048 <GoStraight+0x290>
 8009fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fc6:	ee28 7a87 	vmul.f32	s14, s17, s14
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009fca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
		KeepPulse[BODY] += target_pulse*0.2f;
 8009fce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fd6:	edc4 7a02 	vstr	s15, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009fda:	edd4 7a00 	vldr	s15, [r4]
 8009fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fe2:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fea:	edc4 7a00 	vstr	s15, [r4]
		KeepPulse[RIGHT] += target_pulse*0.2f*0.5f;
 8009fee:	edd4 7a01 	vldr	s15, [r4, #4]
 8009ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ff6:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ffe:	edc4 7a01 	vstr	s15, [r4, #4]
}
 800a002:	b005      	add	sp, #20
 800a004:	ecbd 8b02 	vpop	{d8}
 800a008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				updateRealSearch(maze, mouse);
 800a00c:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800a010:	f003 f868 	bl	800d0e4 <updateRealSearch>
				Calc = 1;
 800a014:	603e      	str	r6, [r7, #0]
 800a016:	e7c1      	b.n	8009f9c <GoStraight+0x1e4>
 800a018:	8fa963a1 	.word	0x8fa963a1
 800a01c:	3f5023d2 	.word	0x3f5023d2
 800a020:	9999999a 	.word	0x9999999a
 800a024:	3fd99999 	.word	0x3fd99999
 800a028:	9999999a 	.word	0x9999999a
 800a02c:	3fe99999 	.word	0x3fe99999
 800a030:	20001318 	.word	0x20001318
 800a034:	20001580 	.word	0x20001580
 800a038:	2000154c 	.word	0x2000154c
 800a03c:	200015c8 	.word	0x200015c8
 800a040:	2000020c 	.word	0x2000020c
 800a044:	2000159c 	.word	0x2000159c
 800a048:	3e4ccccd 	.word	0x3e4ccccd

0800a04c <TurnRight>:
void TurnRight(char mode, maze_node *maze, profile *mouse)
{
	//関数呼び出しと判定処理が多いと遅い。

	switch( mode )
 800a04c:	2853      	cmp	r0, #83	; 0x53
{
 800a04e:	b570      	push	{r4, r5, r6, lr}
 800a050:	460d      	mov	r5, r1
	switch( mode )
 800a052:	d02b      	beq.n	800a0ac <TurnRight+0x60>
 800a054:	2854      	cmp	r0, #84	; 0x54
 800a056:	d128      	bne.n	800a0aa <TurnRight+0x5e>
 800a058:	4614      	mov	r4, r2
	{
	case 'T' :

		Decel(45, 0);
 800a05a:	eddf 0a17 	vldr	s1, [pc, #92]	; 800a0b8 <TurnRight+0x6c>
 800a05e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800a0bc <TurnRight+0x70>
		//AjustCenter();
		EmitterOFF();
//		Pid[Control_Mode].flag = 0;
//		PIDReset(Control_Mode);
//		Control_Mode = NOT_CTRL_PID;
		Pid[A_VELO_PID].flag = 0;
 800a062:	4e17      	ldr	r6, [pc, #92]	; (800a0c0 <TurnRight+0x74>)
		Decel(45, 0);
 800a064:	f7ff fc28 	bl	80098b8 <Decel>
		WaitStopAndReset();
 800a068:	f7fe ff2c 	bl	8008ec4 <WaitStopAndReset>
		EmitterOFF();
 800a06c:	f004 f88c 	bl	800e188 <EmitterOFF>
		//二回目の減速ではマップが完全におかし
		//一回目のターン時の減速終了時は正しい
		//二回目のターン時の減速後までにマップが狂ってる

//		PIDChangeFlag(A_VELO_PID, 0);
		Rotate( 90 , 2*M_PI);//1.5
 800a070:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a0c4 <TurnRight+0x78>
 800a074:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a0c8 <TurnRight+0x7c>
		Pid[A_VELO_PID].flag = 0;
 800a078:	2300      	movs	r3, #0
 800a07a:	62b3      	str	r3, [r6, #40]	; 0x28
		Rotate( 90 , 2*M_PI);//1.5
 800a07c:	f7fe ff44 	bl	8008f08 <Rotate>
		mouse->now.car += 2;
 800a080:	7aa3      	ldrb	r3, [r4, #10]
 800a082:	3302      	adds	r3, #2
 800a084:	72a3      	strb	r3, [r4, #10]

//		ChangeLED(0);
		//RotateTest(90);

//		float acc = AjustCenter();
		EmitterON();
 800a086:	f004 f871 	bl	800e16c <EmitterON>

//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		HAL_Delay(100);
 800a08a:	2064      	movs	r0, #100	; 0x64
 800a08c:	f004 fe68 	bl	800ed60 <HAL_Delay>
//														printProfile(&my_mouse);
//														printAllWeight(&my_map, &(my_mouse.goal_lesser));
//													}
//												}
//												cc ++;
		Accel(45, ExploreVelocity, maze, mouse);
 800a090:	4b0e      	ldr	r3, [pc, #56]	; (800a0cc <TurnRight+0x80>)
 800a092:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a0bc <TurnRight+0x70>
 800a096:	edd3 0a00 	vldr	s1, [r3]
		Pid[A_VELO_PID].flag = 1;
 800a09a:	2301      	movs	r3, #1
		Accel(45, ExploreVelocity, maze, mouse);
 800a09c:	4621      	mov	r1, r4
 800a09e:	4628      	mov	r0, r5
		Pid[A_VELO_PID].flag = 1;
 800a0a0:	62b3      	str	r3, [r6, #40]	; 0x28
	default :
		break;
	}


}
 800a0a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Accel(45, ExploreVelocity, maze, mouse);
 800a0a6:	f7ff bb53 	b.w	8009750 <Accel>
}
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}
		SlalomRight(maze, mouse);
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	4611      	mov	r1, r2
}
 800a0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SlalomRight(maze, mouse);
 800a0b4:	f7ff b87c 	b.w	80091b0 <SlalomRight>
 800a0b8:	00000000 	.word	0x00000000
 800a0bc:	42340000 	.word	0x42340000
 800a0c0:	20001318 	.word	0x20001318
 800a0c4:	40c90fdb 	.word	0x40c90fdb
 800a0c8:	42b40000 	.word	0x42b40000
 800a0cc:	200015a0 	.word	0x200015a0

0800a0d0 <TurnLeft>:
void TurnLeft(char mode, maze_node *maze, profile *mouse)
{
	switch( mode )
 800a0d0:	2853      	cmp	r0, #83	; 0x53
{
 800a0d2:	b570      	push	{r4, r5, r6, lr}
 800a0d4:	460d      	mov	r5, r1
	switch( mode )
 800a0d6:	d02e      	beq.n	800a136 <TurnLeft+0x66>
 800a0d8:	2854      	cmp	r0, #84	; 0x54
 800a0da:	d12b      	bne.n	800a134 <TurnLeft+0x64>
 800a0dc:	4614      	mov	r4, r2
	{
	case 'T' :
		//超信地旋回
		Decel(45, 0);
 800a0de:	eddf 0a19 	vldr	s1, [pc, #100]	; 800a144 <TurnLeft+0x74>
 800a0e2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a148 <TurnLeft+0x78>

		//AjustCenter();
		EmitterOFF();
//		PIDChangeFlag(A_VELO_PID, 0);
//		Control_Mode = NOT_CTRL_PID;
		Pid[A_VELO_PID].flag = 0;
 800a0e6:	4e19      	ldr	r6, [pc, #100]	; (800a14c <TurnLeft+0x7c>)
		Decel(45, 0);
 800a0e8:	f7ff fbe6 	bl	80098b8 <Decel>
		WaitStopAndReset();
 800a0ec:	f7fe feea 	bl	8008ec4 <WaitStopAndReset>
		EmitterOFF();
 800a0f0:	f004 f84a 	bl	800e188 <EmitterOFF>
		Rotate( 90 , -2*M_PI);//-1.5
 800a0f4:	eddf 0a16 	vldr	s1, [pc, #88]	; 800a150 <TurnLeft+0x80>
 800a0f8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800a154 <TurnLeft+0x84>
		Pid[A_VELO_PID].flag = 0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	62b3      	str	r3, [r6, #40]	; 0x28
		Rotate( 90 , -2*M_PI);//-1.5
 800a100:	f7fe ff02 	bl	8008f08 <Rotate>
		mouse->now.car -= 2;
 800a104:	7aa3      	ldrb	r3, [r4, #10]
 800a106:	3b02      	subs	r3, #2
 800a108:	72a3      	strb	r3, [r4, #10]
		//RotateTest(-90);
//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		EmitterON();
 800a10a:	f004 f82f 	bl	800e16c <EmitterON>
		HAL_Delay(100);
 800a10e:	2064      	movs	r0, #100	; 0x64
 800a110:	f004 fe26 	bl	800ed60 <HAL_Delay>
//		float acc = AjustCenter();
		HAL_Delay(100);
 800a114:	2064      	movs	r0, #100	; 0x64
 800a116:	f004 fe23 	bl	800ed60 <HAL_Delay>
//		Control_Mode = A_VELO_PID;
		Pid[A_VELO_PID].flag = 1;
//		PIDChangeFlag( A_VELO_PID , 1);
		Accel(45, ExploreVelocity, maze, mouse);
 800a11a:	4b0f      	ldr	r3, [pc, #60]	; (800a158 <TurnLeft+0x88>)
 800a11c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a148 <TurnLeft+0x78>
 800a120:	edd3 0a00 	vldr	s1, [r3]
		Pid[A_VELO_PID].flag = 1;
 800a124:	2301      	movs	r3, #1
		Accel(45, ExploreVelocity, maze, mouse);
 800a126:	4621      	mov	r1, r4
 800a128:	4628      	mov	r0, r5
		Pid[A_VELO_PID].flag = 1;
 800a12a:	62b3      	str	r3, [r6, #40]	; 0x28
		break;
	default :
		break;
	}

}
 800a12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Accel(45, ExploreVelocity, maze, mouse);
 800a130:	f7ff bb0e 	b.w	8009750 <Accel>
}
 800a134:	bd70      	pop	{r4, r5, r6, pc}
		SlalomLeft(maze, mouse);
 800a136:	4628      	mov	r0, r5
 800a138:	4611      	mov	r1, r2
}
 800a13a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SlalomLeft(maze, mouse);
 800a13e:	f7ff b9a7 	b.w	8009490 <SlalomLeft>
 800a142:	bf00      	nop
 800a144:	00000000 	.word	0x00000000
 800a148:	42340000 	.word	0x42340000
 800a14c:	20001318 	.word	0x20001318
 800a150:	c0c90fdb 	.word	0xc0c90fdb
 800a154:	42b40000 	.word	0x42b40000
 800a158:	200015a0 	.word	0x200015a0

0800a15c <GoBack>:
void GoBack(maze_node *maze, profile *mouse)
{
 800a15c:	b538      	push	{r3, r4, r5, lr}
	//減速して
	Decel(45, 0);
 800a15e:	eddf 0a47 	vldr	s1, [pc, #284]	; 800a27c <GoBack+0x120>
 800a162:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800a280 <GoBack+0x124>
{
 800a166:	460c      	mov	r4, r1
 800a168:	ed2d 8b02 	vpush	{d8}
 800a16c:	4605      	mov	r5, r0
	Decel(45, 0);
 800a16e:	f7ff fba3 	bl	80098b8 <Decel>
	float acc = AjustCenter(mouse);
 800a172:	4620      	mov	r0, r4
 800a174:	f7ff fcc8 	bl	8009b08 <AjustCenter>
	WaitStopAndReset();
 800a178:	f7fe fea4 	bl	8008ec4 <WaitStopAndReset>
//	ChangeLED(5);
#if 1
//	Control_Mode = NOT_CTRL_PID;
	int wall_comp = GetWallCompensateDir(mouse);
 800a17c:	4620      	mov	r0, r4
 800a17e:	f7ff fdd9 	bl	8009d34 <GetWallCompensateDir>
		//右か左かそれ以外か
		if(wall_comp == L_WALL_PID)
 800a182:	2802      	cmp	r0, #2
 800a184:	d037      	beq.n	800a1f6 <GoBack+0x9a>
//			Pos.Dir = left;
			Rotate(90, -2*M_PI);
			mouse->now.car = (mouse->now.car - 2) %8;
//			Pos.Dir = back;
		}
		else if(wall_comp == R_WALL_PID)
 800a186:	2803      	cmp	r0, #3
 800a188:	d059      	beq.n	800a23e <GoBack+0xe2>
//			Pos.Dir = right;
			Rotate(90, 2*M_PI);
			mouse->now.car = (mouse->now.car + 2) %8;
//			Pos.Dir = back;
		}
		else if(wall_comp == N_WALL_PID)
 800a18a:	2806      	cmp	r0, #6
 800a18c:	d071      	beq.n	800a272 <GoBack+0x116>
	Pos.Dir = back;

#endif


	acc = AjustCenter(mouse);
 800a18e:	4620      	mov	r0, r4
 800a190:	f7ff fcba 	bl	8009b08 <AjustCenter>

	HAL_Delay(200);
 800a194:	20c8      	movs	r0, #200	; 0xc8
	acc = AjustCenter(mouse);
 800a196:	eeb0 8a40 	vmov.f32	s16, s0
	HAL_Delay(200);
 800a19a:	f004 fde1 	bl	800ed60 <HAL_Delay>

	Accel(acc, ExploreVelocity, maze, mouse);
 800a19e:	4b39      	ldr	r3, [pc, #228]	; (800a284 <GoBack+0x128>)
 800a1a0:	eeb0 0a48 	vmov.f32	s0, s16
 800a1a4:	edd3 0a00 	vldr	s1, [r3]
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	f7ff fad0 	bl	8009750 <Accel>
	//方角に合わせてxyどちらかに±1
	switch(mouse->now.car%8)
 800a1b0:	7aa3      	ldrb	r3, [r4, #10]
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	2b06      	cmp	r3, #6
 800a1b8:	d808      	bhi.n	800a1cc <GoBack+0x70>
 800a1ba:	e8df f003 	tbb	[pc, r3]
 800a1be:	0716      	.short	0x0716
 800a1c0:	070a0710 	.word	0x070a0710
 800a1c4:	04          	.byte	0x04
 800a1c5:	00          	.byte	0x00
		break;
	case south:
		mouse->now.pos.y --;
		break;
	case west:
		mouse->now.pos.x --;
 800a1c6:	7a23      	ldrb	r3, [r4, #8]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	7223      	strb	r3, [r4, #8]
		break;
	default:
		break;
	}

}
 800a1cc:	ecbd 8b02 	vpop	{d8}
 800a1d0:	bd38      	pop	{r3, r4, r5, pc}
		mouse->now.pos.y --;
 800a1d2:	7a63      	ldrb	r3, [r4, #9]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	7263      	strb	r3, [r4, #9]
}
 800a1d8:	ecbd 8b02 	vpop	{d8}
 800a1dc:	bd38      	pop	{r3, r4, r5, pc}
		mouse->now.pos.x ++;
 800a1de:	7a23      	ldrb	r3, [r4, #8]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	7223      	strb	r3, [r4, #8]
}
 800a1e4:	ecbd 8b02 	vpop	{d8}
 800a1e8:	bd38      	pop	{r3, r4, r5, pc}
		mouse->now.pos.y ++;
 800a1ea:	7a63      	ldrb	r3, [r4, #9]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	7263      	strb	r3, [r4, #9]
}
 800a1f0:	ecbd 8b02 	vpop	{d8}
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
			Rotate(90, -2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800a1f6:	eddf 0a24 	vldr	s1, [pc, #144]	; 800a288 <GoBack+0x12c>
 800a1fa:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800a28c <GoBack+0x130>
 800a1fe:	f7fe fe83 	bl	8008f08 <Rotate>
			mouse->now.car = (mouse->now.car - 2) %8;
 800a202:	7aa3      	ldrb	r3, [r4, #10]
 800a204:	3b02      	subs	r3, #2
 800a206:	425a      	negs	r2, r3
 800a208:	f002 0207 	and.w	r2, r2, #7
 800a20c:	f003 0307 	and.w	r3, r3, #7
 800a210:	bf58      	it	pl
 800a212:	4253      	negpl	r3, r2
 800a214:	72a3      	strb	r3, [r4, #10]
			acc = AjustCenter(mouse);
 800a216:	4620      	mov	r0, r4
 800a218:	f7ff fc76 	bl	8009b08 <AjustCenter>
			Rotate(90, -2*M_PI);
 800a21c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a288 <GoBack+0x12c>
 800a220:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a28c <GoBack+0x130>
 800a224:	f7fe fe70 	bl	8008f08 <Rotate>
			mouse->now.car = (mouse->now.car - 2) %8;
 800a228:	7aa3      	ldrb	r3, [r4, #10]
 800a22a:	3b02      	subs	r3, #2
 800a22c:	425a      	negs	r2, r3
 800a22e:	f002 0207 	and.w	r2, r2, #7
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	bf58      	it	pl
 800a238:	4253      	negpl	r3, r2
 800a23a:	72a3      	strb	r3, [r4, #10]
 800a23c:	e7a7      	b.n	800a18e <GoBack+0x32>
			Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800a23e:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a290 <GoBack+0x134>
 800a242:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800a28c <GoBack+0x130>
 800a246:	f7fe fe5f 	bl	8008f08 <Rotate>
			mouse->now.car = (mouse->now.car + 2) %8;
 800a24a:	7aa3      	ldrb	r3, [r4, #10]
 800a24c:	3302      	adds	r3, #2
 800a24e:	f003 0307 	and.w	r3, r3, #7
 800a252:	72a3      	strb	r3, [r4, #10]
			acc = AjustCenter(mouse);
 800a254:	4620      	mov	r0, r4
 800a256:	f7ff fc57 	bl	8009b08 <AjustCenter>
			Rotate(90, 2*M_PI);
 800a25a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800a290 <GoBack+0x134>
 800a25e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800a28c <GoBack+0x130>
			Rotate(180, 2*M_PI);
 800a262:	f7fe fe51 	bl	8008f08 <Rotate>
			mouse->now.car = (mouse->now.car + 2) %8;
 800a266:	7aa3      	ldrb	r3, [r4, #10]
 800a268:	3302      	adds	r3, #2
 800a26a:	f003 0307 	and.w	r3, r3, #7
 800a26e:	72a3      	strb	r3, [r4, #10]
 800a270:	e78d      	b.n	800a18e <GoBack+0x32>
			Rotate(180, 2*M_PI);
 800a272:	eddf 0a07 	vldr	s1, [pc, #28]	; 800a290 <GoBack+0x134>
 800a276:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800a294 <GoBack+0x138>
 800a27a:	e7f2      	b.n	800a262 <GoBack+0x106>
 800a27c:	00000000 	.word	0x00000000
 800a280:	42340000 	.word	0x42340000
 800a284:	200015a0 	.word	0x200015a0
 800a288:	c0c90fdb 	.word	0xc0c90fdb
 800a28c:	42b40000 	.word	0x42b40000
 800a290:	40c90fdb 	.word	0x40c90fdb
 800a294:	43340000 	.word	0x43340000

0800a298 <HAL_TIM_PeriodElapsedCallback>:


}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if( htim == &htim1)
 800a29c:	4bc8      	ldr	r3, [pc, #800]	; (800a5c0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800a29e:	4298      	cmp	r0, r3
{
 800a2a0:	ed2d 8b02 	vpush	{d8}
 800a2a4:	4604      	mov	r4, r0
	if( htim == &htim1)
 800a2a6:	d007      	beq.n	800a2b8 <HAL_TIM_PeriodElapsedCallback+0x20>
		default :
			break;
		}
	}

	if( htim == &htim8)
 800a2a8:	4bc6      	ldr	r3, [pc, #792]	; (800a5c4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800a2aa:	429c      	cmp	r4, r3
 800a2ac:	f000 80e7 	beq.w	800a47e <HAL_TIM_PeriodElapsedCallback+0x1e6>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
	}
}
 800a2b0:	ecbd 8b02 	vpop	{d8}
 800a2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		switch(IT_mode){
 800a2b8:	4bc3      	ldr	r3, [pc, #780]	; (800a5c8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b06      	cmp	r3, #6
 800a2be:	f000 8101 	beq.w	800a4c4 <HAL_TIM_PeriodElapsedCallback+0x22c>
 800a2c2:	2b07      	cmp	r3, #7
 800a2c4:	d00c      	beq.n	800a2e0 <HAL_TIM_PeriodElapsedCallback+0x48>
 800a2c6:	2b05      	cmp	r3, #5
 800a2c8:	d1ee      	bne.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x10>
			if(timer1 < 5000)
 800a2ca:	4dc0      	ldr	r5, [pc, #768]	; (800a5cc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800a2cc:	682a      	ldr	r2, [r5, #0]
 800a2ce:	f241 3387 	movw	r3, #4999	; 0x1387
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	f340 81cc 	ble.w	800a670 <HAL_TIM_PeriodElapsedCallback+0x3d8>
			else t = 0;
 800a2d8:	4bbd      	ldr	r3, [pc, #756]	; (800a5d0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	e7e3      	b.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x10>
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a2e0:	f8df e344 	ldr.w	lr, [pc, #836]	; 800a628 <HAL_TIM_PeriodElapsedCallback+0x390>
 800a2e4:	49bb      	ldr	r1, [pc, #748]	; (800a5d4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800a2e6:	f8de c024 	ldr.w	ip, [lr, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a2ea:	48bb      	ldr	r0, [pc, #748]	; (800a5d8 <HAL_TIM_PeriodElapsedCallback+0x340>)
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a2ec:	eddf 6abb 	vldr	s13, [pc, #748]	; 800a5dc <HAL_TIM_PeriodElapsedCallback+0x344>
 800a2f0:	4ebb      	ldr	r6, [pc, #748]	; (800a5e0 <HAL_TIM_PeriodElapsedCallback+0x348>)
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a2f2:	4abc      	ldr	r2, [pc, #752]	; (800a5e4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a2f4:	4fbc      	ldr	r7, [pc, #752]	; (800a5e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
	TargetVelocity[BODY] += Acceleration;
 800a2f6:	4dbd      	ldr	r5, [pc, #756]	; (800a5ec <HAL_TIM_PeriodElapsedCallback+0x354>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a2f8:	f247 532f 	movw	r3, #29999	; 0x752f
 800a2fc:	eba3 0c0c 	sub.w	ip, r3, ip
 800a300:	f8c1 c000 	str.w	ip, [r1]
	TIM3->CNT = INITIAL_PULSE;
 800a304:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a308:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a30c:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a30e:	eba3 030e 	sub.w	r3, r3, lr
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a312:	ee07 3a90 	vmov	s15, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a316:	ee07 ca10 	vmov	s14, ip
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a31a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a31e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a322:	ee67 7aa6 	vmul.f32	s15, s15, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a326:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a32a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a32e:	ed86 7a00 	vstr	s14, [r6]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a332:	edc6 7a01 	vstr	s15, [r6, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a336:	edd6 7a00 	vldr	s15, [r6]
 800a33a:	ed96 7a01 	vldr	s14, [r6, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a33e:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a340:	ee77 7a87 	vadd.f32	s15, s15, s14
	ZGyro = ReadIMU(0x37, 0x38);
 800a344:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a346:	ee67 7aa8 	vmul.f32	s15, s15, s17
	ZGyro = ReadIMU(0x37, 0x38);
 800a34a:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a34c:	edc6 7a02 	vstr	s15, [r6, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a350:	f8d2 e000 	ldr.w	lr, [r2]
 800a354:	44f4      	add	ip, lr
 800a356:	f8c2 c000 	str.w	ip, [r2]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a35a:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800a35e:	4463      	add	r3, ip
 800a360:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a362:	6813      	ldr	r3, [r2, #0]
 800a364:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800a368:	4463      	add	r3, ip
 800a36a:	6093      	str	r3, [r2, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 800a36c:	f003 fd8c 	bl	800de88 <ReadIMU>
 800a370:	4b9f      	ldr	r3, [pc, #636]	; (800a5f0 <HAL_TIM_PeriodElapsedCallback+0x358>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a372:	4aa0      	ldr	r2, [pc, #640]	; (800a5f4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
	ZGyro = ReadIMU(0x37, 0x38);
 800a374:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a378:	ed93 8a00 	vldr	s16, [r3]
 800a37c:	ed92 7a00 	vldr	s14, [r2]
 800a380:	4b9d      	ldr	r3, [pc, #628]	; (800a5f8 <HAL_TIM_PeriodElapsedCallback+0x360>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a382:	6838      	ldr	r0, [r7, #0]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a384:	edd3 7a00 	vldr	s15, [r3]
 800a388:	ee38 8a47 	vsub.f32	s16, s16, s14
 800a38c:	ee28 8a27 	vmul.f32	s16, s16, s15
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a390:	f7fe f812 	bl	80083b8 <__aeabi_f2d>
 800a394:	a386      	add	r3, pc, #536	; (adr r3, 800a5b0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7fe f865 	bl	8008468 <__aeabi_dmul>
 800a39e:	4680      	mov	r8, r0
 800a3a0:	ee18 0a10 	vmov	r0, s16
 800a3a4:	4689      	mov	r9, r1
 800a3a6:	f7fe f807 	bl	80083b8 <__aeabi_f2d>
 800a3aa:	a383      	add	r3, pc, #524	; (adr r3, 800a5b8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b0:	f7fe f85a 	bl	8008468 <__aeabi_dmul>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	f7fd fe9e 	bl	80080fc <__adddf3>
 800a3c0:	f7fe fb4a 	bl	8008a58 <__aeabi_d2f>
 800a3c4:	4b8d      	ldr	r3, [pc, #564]	; (800a5fc <HAL_TIM_PeriodElapsedCallback+0x364>)
	Angle += AngularV * T1;
 800a3c6:	498e      	ldr	r1, [pc, #568]	; (800a600 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800a3c8:	eddf 7a8e 	vldr	s15, [pc, #568]	; 800a604 <HAL_TIM_PeriodElapsedCallback+0x36c>
	AngularAcceleration += AngularLeapsity;
 800a3cc:	4a8e      	ldr	r2, [pc, #568]	; (800a608 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800a3ce:	f8df c264 	ldr.w	ip, [pc, #612]	; 800a634 <HAL_TIM_PeriodElapsedCallback+0x39c>
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a3d2:	eddf 6a8e 	vldr	s13, [pc, #568]	; 800a60c <HAL_TIM_PeriodElapsedCallback+0x374>
	AngularAcceleration += AngularLeapsity;
 800a3d6:	ed9c 6a00 	vldr	s12, [ip]
	TargetVelocity[BODY] += Acceleration;
 800a3da:	f8df c254 	ldr.w	ip, [pc, #596]	; 800a630 <HAL_TIM_PeriodElapsedCallback+0x398>
    zg_last = zg_law;
 800a3de:	ed87 8a00 	vstr	s16, [r7]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a3e2:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800a3e6:	6018      	str	r0, [r3, #0]
	Angle += AngularV * T1;
 800a3e8:	edd3 5a00 	vldr	s11, [r3]
 800a3ec:	ed91 7a00 	vldr	s14, [r1]
	TargetAngularV += AngularAcceleration;
 800a3f0:	4b87      	ldr	r3, [pc, #540]	; (800a610 <HAL_TIM_PeriodElapsedCallback+0x378>)
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a3f2:	4f88      	ldr	r7, [pc, #544]	; (800a614 <HAL_TIM_PeriodElapsedCallback+0x37c>)
	Angle += AngularV * T1;
 800a3f4:	eea5 7aa7 	vfma.f32	s14, s11, s15
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a3f8:	2004      	movs	r0, #4
	Angle += AngularV * T1;
 800a3fa:	ed81 7a00 	vstr	s14, [r1]
	AngularAcceleration += AngularLeapsity;
 800a3fe:	edd2 7a00 	vldr	s15, [r2]
 800a402:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a406:	edc2 7a00 	vstr	s15, [r2]
	TargetVelocity[BODY] += Acceleration;
 800a40a:	eddc 7a00 	vldr	s15, [ip]
 800a40e:	ed95 7a02 	vldr	s14, [r5, #8]
 800a412:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a416:	edc5 7a02 	vstr	s15, [r5, #8]
	TargetAngularV += AngularAcceleration;
 800a41a:	edd2 7a00 	vldr	s15, [r2]
 800a41e:	ed93 7a00 	vldr	s14, [r3]
 800a422:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a426:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a42a:	edd5 7a02 	vldr	s15, [r5, #8]
 800a42e:	ed93 7a00 	vldr	s14, [r3]
 800a432:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a436:	eee7 7a28 	vfma.f32	s15, s14, s17
 800a43a:	edc5 7a01 	vstr	s15, [r5, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a43e:	ed93 7a00 	vldr	s14, [r3]
 800a442:	edd5 7a01 	vldr	s15, [r5, #4]
 800a446:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a44a:	edc5 7a00 	vstr	s15, [r5]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a44e:	ed95 0a00 	vldr	s0, [r5]
 800a452:	edd6 0a00 	vldr	s1, [r6]
 800a456:	f004 fae3 	bl	800ea20 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a45a:	ed95 0a01 	vldr	s0, [r5, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a45e:	6038      	str	r0, [r7, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a460:	edd6 0a01 	vldr	s1, [r6, #4]
 800a464:	2005      	movs	r0, #5
 800a466:	f004 fadb 	bl	800ea20 <PIDControl>
 800a46a:	4b6b      	ldr	r3, [pc, #428]	; (800a618 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800a46c:	4601      	mov	r1, r0
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a46e:	6838      	ldr	r0, [r7, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a470:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a472:	f003 ff21 	bl	800e2b8 <Motor_Switch>
	if( htim == &htim8)
 800a476:	4b53      	ldr	r3, [pc, #332]	; (800a5c4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800a478:	429c      	cmp	r4, r3
 800a47a:	f47f af19 	bne.w	800a2b0 <HAL_TIM_PeriodElapsedCallback+0x18>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a47e:	4e67      	ldr	r6, [pc, #412]	; (800a61c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800a480:	4c67      	ldr	r4, [pc, #412]	; (800a620 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800a482:	6831      	ldr	r1, [r6, #0]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a484:	4d67      	ldr	r5, [pc, #412]	; (800a624 <HAL_TIM_PeriodElapsedCallback+0x38c>)
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a486:	2200      	movs	r2, #0
 800a488:	200a      	movs	r0, #10
 800a48a:	f003 ff71 	bl	800e370 <GetWallDataAverage>
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a48e:	6871      	ldr	r1, [r6, #4]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a490:	ed84 0a00 	vstr	s0, [r4]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a494:	2201      	movs	r2, #1
 800a496:	200a      	movs	r0, #10
 800a498:	f003 ff6a 	bl	800e370 <GetWallDataAverage>
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a49c:	6829      	ldr	r1, [r5, #0]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a49e:	ed84 0a01 	vstr	s0, [r4, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	200a      	movs	r0, #10
 800a4a6:	f003 ff63 	bl	800e370 <GetWallDataAverage>
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a4aa:	6869      	ldr	r1, [r5, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a4ac:	ed84 0a02 	vstr	s0, [r4, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a4b0:	2203      	movs	r2, #3
 800a4b2:	200a      	movs	r0, #10
 800a4b4:	f003 ff5c 	bl	800e370 <GetWallDataAverage>
}
 800a4b8:	ecbd 8b02 	vpop	{d8}
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a4bc:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800a4c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a4c4:	4d58      	ldr	r5, [pc, #352]	; (800a628 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800a4c6:	4843      	ldr	r0, [pc, #268]	; (800a5d4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800a4c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a4ca:	4a43      	ldr	r2, [pc, #268]	; (800a5d8 <HAL_TIM_PeriodElapsedCallback+0x340>)
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4cc:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a5dc <HAL_TIM_PeriodElapsedCallback+0x344>
 800a4d0:	4e43      	ldr	r6, [pc, #268]	; (800a5e0 <HAL_TIM_PeriodElapsedCallback+0x348>)
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a4d2:	4f4b      	ldr	r7, [pc, #300]	; (800a600 <HAL_TIM_PeriodElapsedCallback+0x368>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a4d4:	f247 532f 	movw	r3, #29999	; 0x752f
 800a4d8:	1a59      	subs	r1, r3, r1
 800a4da:	6001      	str	r1, [r0, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a4dc:	626b      	str	r3, [r5, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a4de:	6a55      	ldr	r5, [r2, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a4e0:	6253      	str	r3, [r2, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a4e2:	1b5b      	subs	r3, r3, r5
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a4e4:	ee07 3a10 	vmov	s14, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4e8:	ee06 1a90 	vmov	s13, r1
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a4ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a4f4:	ee27 7a27 	vmul.f32	s14, s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a4f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a4fc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a500:	edc6 6a00 	vstr	s13, [r6]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a504:	ed86 7a01 	vstr	s14, [r6, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a508:	edd6 7a00 	vldr	s15, [r6]
 800a50c:	ed96 7a01 	vldr	s14, [r6, #4]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a510:	4a34      	ldr	r2, [pc, #208]	; (800a5e4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a512:	6043      	str	r3, [r0, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a514:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a518:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a51c:	edc6 7a02 	vstr	s15, [r6, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a520:	6810      	ldr	r0, [r2, #0]
 800a522:	4401      	add	r1, r0
 800a524:	6011      	str	r1, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a526:	6851      	ldr	r1, [r2, #4]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a528:	4834      	ldr	r0, [pc, #208]	; (800a5fc <HAL_TIM_PeriodElapsedCallback+0x364>)
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a52a:	440b      	add	r3, r1
 800a52c:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a52e:	6813      	ldr	r3, [r2, #0]
 800a530:	6851      	ldr	r1, [r2, #4]
 800a532:	440b      	add	r3, r1
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a534:	4639      	mov	r1, r7
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a536:	6093      	str	r3, [r2, #8]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a538:	f003 fd12 	bl	800df60 <Update_IMU>
				if( Pid[A_VELO_PID].flag == 1 )
 800a53c:	4b3b      	ldr	r3, [pc, #236]	; (800a62c <HAL_TIM_PeriodElapsedCallback+0x394>)
 800a53e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a540:	2a01      	cmp	r2, #1
 800a542:	f000 809f 	beq.w	800a684 <HAL_TIM_PeriodElapsedCallback+0x3ec>
				else if( Pid[D_WALL_PID].flag == 1 )
 800a546:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a548:	2801      	cmp	r0, #1
 800a54a:	f000 80ac 	beq.w	800a6a6 <HAL_TIM_PeriodElapsedCallback+0x40e>
				else if( Pid[L_WALL_PID].flag == 1 )
 800a54e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a552:	2a01      	cmp	r2, #1
 800a554:	d070      	beq.n	800a638 <HAL_TIM_PeriodElapsedCallback+0x3a0>
				else if( Pid[R_WALL_PID].flag == 1 )
 800a556:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a55a:	2a01      	cmp	r2, #1
 800a55c:	f000 80ce 	beq.w	800a6fc <HAL_TIM_PeriodElapsedCallback+0x464>
				else if( Pid[F_WALL_PID].flag == 1)
 800a560:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a564:	2b01      	cmp	r3, #1
 800a566:	f000 80aa 	beq.w	800a6be <HAL_TIM_PeriodElapsedCallback+0x426>
 800a56a:	4b29      	ldr	r3, [pc, #164]	; (800a610 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800a56c:	4d1f      	ldr	r5, [pc, #124]	; (800a5ec <HAL_TIM_PeriodElapsedCallback+0x354>)
	TargetVelocity[BODY] += Acceleration;
 800a56e:	4a30      	ldr	r2, [pc, #192]	; (800a630 <HAL_TIM_PeriodElapsedCallback+0x398>)
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a570:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a60c <HAL_TIM_PeriodElapsedCallback+0x374>
	TargetVelocity[BODY] += Acceleration;
 800a574:	edd2 7a00 	vldr	s15, [r2]
 800a578:	ed95 7a02 	vldr	s14, [r5, #8]
	TargetAngularV += AngularAcceleration;
 800a57c:	4a22      	ldr	r2, [pc, #136]	; (800a608 <HAL_TIM_PeriodElapsedCallback+0x370>)
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a57e:	4f25      	ldr	r7, [pc, #148]	; (800a614 <HAL_TIM_PeriodElapsedCallback+0x37c>)
	TargetVelocity[BODY] += Acceleration;
 800a580:	ee77 7a87 	vadd.f32	s15, s15, s14
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a584:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	TargetVelocity[BODY] += Acceleration;
 800a588:	edc5 7a02 	vstr	s15, [r5, #8]
	TargetAngularV += AngularAcceleration;
 800a58c:	edd2 7a00 	vldr	s15, [r2]
 800a590:	ed93 7a00 	vldr	s14, [r3]
 800a594:	ee77 7a87 	vadd.f32	s15, s15, s14
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a598:	2004      	movs	r0, #4
	TargetAngularV += AngularAcceleration;
 800a59a:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a59e:	edd5 7a02 	vldr	s15, [r5, #8]
 800a5a2:	ed93 7a00 	vldr	s14, [r3]
 800a5a6:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a5aa:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a5ae:	e744      	b.n	800a43a <HAL_TIM_PeriodElapsedCallback+0x1a2>
 800a5b0:	7ae147ae 	.word	0x7ae147ae
 800a5b4:	3fefae14 	.word	0x3fefae14
 800a5b8:	47ae147b 	.word	0x47ae147b
 800a5bc:	3f847ae1 	.word	0x3f847ae1
 800a5c0:	20001f6c 	.word	0x20001f6c
 800a5c4:	20001d24 	.word	0x20001d24
 800a5c8:	2000150c 	.word	0x2000150c
 800a5cc:	20001514 	.word	0x20001514
 800a5d0:	20001508 	.word	0x20001508
 800a5d4:	200015cc 	.word	0x200015cc
 800a5d8:	40000800 	.word	0x40000800
 800a5dc:	3f7c2fb9 	.word	0x3f7c2fb9
 800a5e0:	20001558 	.word	0x20001558
 800a5e4:	2000154c 	.word	0x2000154c
 800a5e8:	20000208 	.word	0x20000208
 800a5ec:	2000151c 	.word	0x2000151c
 800a5f0:	200012c8 	.word	0x200012c8
 800a5f4:	200012d4 	.word	0x200012d4
 800a5f8:	08016e4c 	.word	0x08016e4c
 800a5fc:	2000021c 	.word	0x2000021c
 800a600:	20000210 	.word	0x20000210
 800a604:	3a83126f 	.word	0x3a83126f
 800a608:	20000214 	.word	0x20000214
 800a60c:	4209999a 	.word	0x4209999a
 800a610:	2000152c 	.word	0x2000152c
 800a614:	200015a4 	.word	0x200015a4
 800a618:	200015c4 	.word	0x200015c4
 800a61c:	200012b4 	.word	0x200012b4
 800a620:	2000158c 	.word	0x2000158c
 800a624:	200012c0 	.word	0x200012c0
 800a628:	40000400 	.word	0x40000400
 800a62c:	20001318 	.word	0x20001318
 800a630:	2000020c 	.word	0x2000020c
 800a634:	20000218 	.word	0x20000218
					wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 800a638:	4a37      	ldr	r2, [pc, #220]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800a63a:	4b38      	ldr	r3, [pc, #224]	; (800a71c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800a63c:	ed92 0a02 	vldr	s0, [r2, #8]
 800a640:	4d37      	ldr	r5, [pc, #220]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800a642:	edd3 0a02 	vldr	s1, [r3, #8]
 800a646:	2002      	movs	r0, #2
 800a648:	f004 f9ea 	bl	800ea20 <PIDControl>
					TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800a64c:	ee07 0a90 	vmov	s15, r0
 800a650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a654:	ee17 0a90 	vmov	r0, s15
 800a658:	f7fd feae 	bl	80083b8 <__aeabi_f2d>
 800a65c:	a32c      	add	r3, pc, #176	; (adr r3, 800a710 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	f7fd ff01 	bl	8008468 <__aeabi_dmul>
 800a666:	f7fe f9f7 	bl	8008a58 <__aeabi_d2f>
 800a66a:	4b2e      	ldr	r3, [pc, #184]	; (800a724 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 800a66c:	6018      	str	r0, [r3, #0]
 800a66e:	e77e      	b.n	800a56e <HAL_TIM_PeriodElapsedCallback+0x2d6>
				Update_IMU(&AngularV, &Angle);
 800a670:	492d      	ldr	r1, [pc, #180]	; (800a728 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800a672:	482e      	ldr	r0, [pc, #184]	; (800a72c <HAL_TIM_PeriodElapsedCallback+0x494>)
 800a674:	f003 fc74 	bl	800df60 <Update_IMU>
				timer1 += t;
 800a678:	4a2d      	ldr	r2, [pc, #180]	; (800a730 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800a67a:	682b      	ldr	r3, [r5, #0]
 800a67c:	6812      	ldr	r2, [r2, #0]
 800a67e:	4413      	add	r3, r2
 800a680:	602b      	str	r3, [r5, #0]
 800a682:	e611      	b.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x10>
					ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a684:	4b2b      	ldr	r3, [pc, #172]	; (800a734 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 800a686:	4d26      	ldr	r5, [pc, #152]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x488>)
					ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a688:	ed93 0a00 	vldr	s0, [r3]
 800a68c:	edd7 0a00 	vldr	s1, [r7]
 800a690:	2000      	movs	r0, #0
 800a692:	f004 f9c5 	bl	800ea20 <PIDControl>
					TargetAngularV = (float)ang_out;
 800a696:	ee07 0a90 	vmov	s15, r0
 800a69a:	4b22      	ldr	r3, [pc, #136]	; (800a724 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 800a69c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6a0:	edc3 7a00 	vstr	s15, [r3]
 800a6a4:	e763      	b.n	800a56e <HAL_TIM_PeriodElapsedCallback+0x2d6>
					wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800a6a6:	4b1c      	ldr	r3, [pc, #112]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800a6a8:	4a23      	ldr	r2, [pc, #140]	; (800a738 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800a6aa:	ed93 0a02 	vldr	s0, [r3, #8]
 800a6ae:	edd3 0a01 	vldr	s1, [r3, #4]
 800a6b2:	edd2 7a00 	vldr	s15, [r2]
 800a6b6:	4d1a      	ldr	r5, [pc, #104]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800a6b8:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a6bc:	e7c4      	b.n	800a648 <HAL_TIM_PeriodElapsedCallback+0x3b0>
					wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 800a6be:	4b16      	ldr	r3, [pc, #88]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800a6c0:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800a73c <HAL_TIM_PeriodElapsedCallback+0x4a4>
 800a6c4:	edd3 0a03 	vldr	s1, [r3, #12]
 800a6c8:	edd3 7a00 	vldr	s15, [r3]
					TargetVelocity[BODY] = (float)wall_f*0.001;
 800a6cc:	4d14      	ldr	r5, [pc, #80]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x488>)
					wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 800a6ce:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a6d2:	2008      	movs	r0, #8
 800a6d4:	f004 f9a4 	bl	800ea20 <PIDControl>
					TargetVelocity[BODY] = (float)wall_f*0.001;
 800a6d8:	ee07 0a90 	vmov	s15, r0
 800a6dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6e0:	ee17 0a90 	vmov	r0, s15
 800a6e4:	f7fd fe68 	bl	80083b8 <__aeabi_f2d>
 800a6e8:	a309      	add	r3, pc, #36	; (adr r3, 800a710 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7fd febb 	bl	8008468 <__aeabi_dmul>
 800a6f2:	f7fe f9b1 	bl	8008a58 <__aeabi_d2f>
					ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800a6f6:	4b0f      	ldr	r3, [pc, #60]	; (800a734 <HAL_TIM_PeriodElapsedCallback+0x49c>)
					TargetVelocity[BODY] = (float)wall_f*0.001;
 800a6f8:	60a8      	str	r0, [r5, #8]
 800a6fa:	e7c5      	b.n	800a688 <HAL_TIM_PeriodElapsedCallback+0x3f0>
					wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800a6fc:	4a07      	ldr	r2, [pc, #28]	; (800a71c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800a6fe:	4b06      	ldr	r3, [pc, #24]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800a700:	ed92 0a01 	vldr	s0, [r2, #4]
 800a704:	4d06      	ldr	r5, [pc, #24]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800a706:	edd3 0a01 	vldr	s1, [r3, #4]
 800a70a:	2003      	movs	r0, #3
 800a70c:	e79c      	b.n	800a648 <HAL_TIM_PeriodElapsedCallback+0x3b0>
 800a70e:	bf00      	nop
 800a710:	d2f1a9fc 	.word	0xd2f1a9fc
 800a714:	3f50624d 	.word	0x3f50624d
 800a718:	2000158c 	.word	0x2000158c
 800a71c:	200015b0 	.word	0x200015b0
 800a720:	2000151c 	.word	0x2000151c
 800a724:	2000152c 	.word	0x2000152c
 800a728:	20000210 	.word	0x20000210
 800a72c:	2000021c 	.word	0x2000021c
 800a730:	20001508 	.word	0x20001508
 800a734:	20000220 	.word	0x20000220
 800a738:	20001540 	.word	0x20001540
 800a73c:	457a0000 	.word	0x457a0000

0800a740 <initWeight>:
//直ぐ消す
#include "Interrupt.h"

//初期化処理
void initWeight(maze_node *maze)
{
 800a740:	b410      	push	{r4}
 800a742:	4603      	mov	r3, r0
 800a744:	f500 7434 	add.w	r4, r0, #720	; 0x2d0
    // }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a748:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a74c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800a750:	8059      	strh	r1, [r3, #2]
 800a752:	3308      	adds	r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a754:	4293      	cmp	r3, r2
 800a756:	d1fb      	bne.n	800a750 <initWeight+0x10>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a758:	42a3      	cmp	r3, r4
 800a75a:	d1f7      	bne.n	800a74c <initWeight+0xc>
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800a75c:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a760:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800a764:	f8a0 12d2 	strh.w	r1, [r0, #722]	; 0x2d2
 800a768:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a76a:	4282      	cmp	r2, r0
 800a76c:	d1fa      	bne.n	800a764 <initWeight+0x24>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a76e:	429a      	cmp	r2, r3
 800a770:	d1f6      	bne.n	800a760 <initWeight+0x20>
        }
    }
}
 800a772:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <initMaze>:
void initMaze(maze_node *maze) //重みは別で初期化
{
 800a778:	b5f0      	push	{r4, r5, r6, r7, lr}
    //まず未探索状態にする
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a77a:	2700      	movs	r7, #0
 800a77c:	4604      	mov	r4, r0
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a77e:	4684      	mov	ip, r0
        {
            maze->RawNode[i][j].existence = UNKNOWN;
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a780:	4639      	mov	r1, r7
            maze->RawNode[i][j].existence = UNKNOWN;
 800a782:	2602      	movs	r6, #2
 800a784:	b2fd      	uxtb	r5, r7
{
 800a786:	4663      	mov	r3, ip
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a788:	2201      	movs	r2, #1
            maze->RawNode[i][j].rc = 0;
            maze->RawNode[i][j].pos.x = i;
            maze->RawNode[i][j].pos.y = j;
 800a78a:	73da      	strb	r2, [r3, #15]
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a78c:	3201      	adds	r2, #1
 800a78e:	2a09      	cmp	r2, #9
            maze->RawNode[i][j].existence = UNKNOWN;
 800a790:	721e      	strb	r6, [r3, #8]
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a792:	7319      	strb	r1, [r3, #12]
            maze->RawNode[i][j].rc = 0;
 800a794:	7359      	strb	r1, [r3, #13]
            maze->RawNode[i][j].pos.x = i;
 800a796:	739d      	strb	r5, [r3, #14]
 800a798:	f103 0308 	add.w	r3, r3, #8
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a79c:	d1f5      	bne.n	800a78a <initMaze+0x12>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a79e:	3701      	adds	r7, #1
 800a7a0:	2f09      	cmp	r7, #9
 800a7a2:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800a7a6:	d1ed      	bne.n	800a784 <initMaze+0xc>
        }
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a7a8:	2200      	movs	r2, #0
    {
            maze->RawNode[i][0].existence = WALL;
            maze->RawNode[i][0].draw = true;//未知壁は描画のときに無いものとする
            maze->RawNode[i][0].rc = 0;
 800a7aa:	4615      	mov	r5, r2
 800a7ac:	4603      	mov	r3, r0
            maze->RawNode[i][0].existence = WALL;
 800a7ae:	2101      	movs	r1, #1
            maze->RawNode[i][0].pos.x = i;
 800a7b0:	b2d6      	uxtb	r6, r2
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a7b2:	3201      	adds	r2, #1
 800a7b4:	2a09      	cmp	r2, #9
            maze->RawNode[i][0].existence = WALL;
 800a7b6:	7019      	strb	r1, [r3, #0]
            maze->RawNode[i][0].draw = true;//未知壁は描画のときに無いものとする
 800a7b8:	7119      	strb	r1, [r3, #4]
            maze->RawNode[i][0].rc = 0;
 800a7ba:	715d      	strb	r5, [r3, #5]
            maze->RawNode[i][0].pos.y = 0;
 800a7bc:	71dd      	strb	r5, [r3, #7]
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;
 800a7be:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;//未知壁は描画のときに無いものとする
 800a7c2:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800a7c6:	f883 504d 	strb.w	r5, [r3, #77]	; 0x4d
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800a7ca:	f883 704f 	strb.w	r7, [r3, #79]	; 0x4f
            maze->RawNode[i][0].pos.x = i;
 800a7ce:	719e      	strb	r6, [r3, #6]
            maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800a7d0:	f883 604e 	strb.w	r6, [r3, #78]	; 0x4e
 800a7d4:	f103 0350 	add.w	r3, r3, #80	; 0x50
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a7d8:	d1ea      	bne.n	800a7b0 <initMaze+0x38>
    }
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a7da:	f04f 0c01 	mov.w	ip, #1
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].existence = UNKNOWN;
            maze->ColumnNode[i][j].draw = false;
            maze->ColumnNode[i][j].rc = 1;
 800a7de:	4667      	mov	r7, ip
 800a7e0:	f100 0e48 	add.w	lr, r0, #72	; 0x48
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a7e4:	2602      	movs	r6, #2
            maze->ColumnNode[i][j].draw = false;
 800a7e6:	2500      	movs	r5, #0
 800a7e8:	fa5f f18c 	uxtb.w	r1, ip
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a7ec:	4673      	mov	r3, lr
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a7ee:	2200      	movs	r2, #0
            maze->ColumnNode[i][j].pos.x = i;
            maze->ColumnNode[i][j].pos.y = j;
 800a7f0:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a7f4:	3201      	adds	r2, #1
 800a7f6:	2a09      	cmp	r2, #9
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a7f8:	f883 62d0 	strb.w	r6, [r3, #720]	; 0x2d0
            maze->ColumnNode[i][j].draw = false;
 800a7fc:	f883 52d4 	strb.w	r5, [r3, #724]	; 0x2d4
            maze->ColumnNode[i][j].rc = 1;
 800a800:	f883 72d5 	strb.w	r7, [r3, #725]	; 0x2d5
            maze->ColumnNode[i][j].pos.x = i;
 800a804:	f883 12d6 	strb.w	r1, [r3, #726]	; 0x2d6
 800a808:	f103 0308 	add.w	r3, r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a80c:	d1f0      	bne.n	800a7f0 <initMaze+0x78>
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a80e:	f10c 0c01 	add.w	ip, ip, #1
 800a812:	f1bc 0f09 	cmp.w	ip, #9
 800a816:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800a81a:	d1e5      	bne.n	800a7e8 <initMaze+0x70>
        }
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a81c:	2100      	movs	r1, #0
    {
            maze->ColumnNode[0][j].existence = WALL;
            maze->ColumnNode[0][j].draw = true;
            maze->ColumnNode[0][j].rc = 1;
            maze->ColumnNode[0][j].pos.x = 0;
 800a81e:	460e      	mov	r6, r1
 800a820:	4603      	mov	r3, r0
            maze->ColumnNode[0][j].existence = WALL;
 800a822:	2201      	movs	r2, #1
            maze->ColumnNode[0][j].pos.y = j;
 800a824:	b2cd      	uxtb	r5, r1
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a826:	3101      	adds	r1, #1
 800a828:	2909      	cmp	r1, #9
            maze->ColumnNode[0][j].existence = WALL;
 800a82a:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
            maze->ColumnNode[0][j].draw = true;
 800a82e:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
            maze->ColumnNode[0][j].rc = 1;
 800a832:	f883 22d5 	strb.w	r2, [r3, #725]	; 0x2d5
            maze->ColumnNode[0][j].pos.x = 0;
 800a836:	f883 62d6 	strb.w	r6, [r3, #726]	; 0x2d6
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;
 800a83a:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800a83e:	f883 255c 	strb.w	r2, [r3, #1372]	; 0x55c
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800a842:	f883 255d 	strb.w	r2, [r3, #1373]	; 0x55d
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800a846:	f883 c55e 	strb.w	ip, [r3, #1374]	; 0x55e
            maze->ColumnNode[0][j].pos.y = j;
 800a84a:	f883 52d7 	strb.w	r5, [r3, #727]	; 0x2d7
            maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800a84e:	f883 555f 	strb.w	r5, [r3, #1375]	; 0x55f
 800a852:	f103 0308 	add.w	r3, r3, #8
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a856:	d1e5      	bne.n	800a824 <initMaze+0xac>
    }
    
    // 壁の有無を初期化
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a858:	2200      	movs	r2, #0
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1

        maze->RawNode[i][0].draw = true;                        
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;

        maze->RawNode[i][0].rc = 0;
 800a85a:	4616      	mov	r6, r2
 800a85c:	4603      	mov	r3, r0
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a85e:	2501      	movs	r5, #1
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;

        maze->RawNode[i][0].pos.x = i;
 800a860:	b2d7      	uxtb	r7, r2
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a862:	3201      	adds	r2, #1
 800a864:	2a09      	cmp	r2, #9
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a866:	701d      	strb	r5, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1
 800a868:	f883 5048 	strb.w	r5, [r3, #72]	; 0x48
        maze->RawNode[i][0].draw = true;                        
 800a86c:	711d      	strb	r5, [r3, #4]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;
 800a86e:	f883 504c 	strb.w	r5, [r3, #76]	; 0x4c
        maze->RawNode[i][0].rc = 0;
 800a872:	715e      	strb	r6, [r3, #5]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800a874:	f883 604d 	strb.w	r6, [r3, #77]	; 0x4d
        maze->RawNode[i][0].pos.y = 0;
 800a878:	71de      	strb	r6, [r3, #7]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800a87a:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
        maze->RawNode[i][0].pos.x = i;
 800a87e:	719f      	strb	r7, [r3, #6]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800a880:	f883 704e 	strb.w	r7, [r3, #78]	; 0x4e
 800a884:	f103 0350 	add.w	r3, r3, #80	; 0x50
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a888:	d1ea      	bne.n	800a860 <initMaze+0xe8>
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a88a:	2100      	movs	r1, #0
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;

        maze->ColumnNode[0][j].rc = 1;
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;

        maze->ColumnNode[0][j].pos.x = 0;
 800a88c:	460e      	mov	r6, r1
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a88e:	2301      	movs	r3, #1
        maze->ColumnNode[0][j].pos.y = j;
 800a890:	b2cd      	uxtb	r5, r1
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a892:	3101      	adds	r1, #1
 800a894:	2909      	cmp	r1, #9
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a896:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;  //東壁すべて1
 800a89a:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
        maze->ColumnNode[0][j].draw = true;                    
 800a89e:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800a8a2:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
        maze->ColumnNode[0][j].rc = 1;
 800a8a6:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800a8aa:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
        maze->ColumnNode[0][j].pos.x = 0;
 800a8ae:	f884 62d6 	strb.w	r6, [r4, #726]	; 0x2d6
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800a8b2:	f884 255e 	strb.w	r2, [r4, #1374]	; 0x55e
        maze->ColumnNode[0][j].pos.y = j;
 800a8b6:	f884 52d7 	strb.w	r5, [r4, #727]	; 0x2d7
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800a8ba:	f884 555f 	strb.w	r5, [r4, #1375]	; 0x55f
 800a8be:	f104 0408 	add.w	r4, r4, #8
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a8c2:	d1e5      	bne.n	800a890 <initMaze+0x118>
    }
    maze->ColumnNode[1][0].existence = WALL;    //東1
 800a8c4:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800a8c8:	7206      	strb	r6, [r0, #8]

    maze->ColumnNode[1][0].draw = true;    //東1
 800a8ca:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
    maze->RawNode[0][1].draw = false;     //北0
 800a8ce:	7306      	strb	r6, [r0, #12]
}
 800a8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d2:	bf00      	nop

0800a8d4 <initTargetAreaWeight>:
void initTargetAreaWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size_x, uint8_t target_size_y)
{
 800a8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8d8:	f89d 801c 	ldrb.w	r8, [sp, #28]
    //ゴールエリアの外堀と中のノードは全て0、壁があればMAX。
    for(int i=0; i < target_size_x; i++)
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d044      	beq.n	800a96a <initTargetAreaWeight+0x96>
 800a8e0:	1c4c      	adds	r4, r1, #1
 800a8e2:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800a8e6:	250a      	movs	r5, #10
 800a8e8:	18a7      	adds	r7, r4, r2
 800a8ea:	fb15 2201 	smlabb	r2, r5, r1, r2
 800a8ee:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 800a8f2:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
 800a8f6:	f04f 0908 	mov.w	r9, #8
 800a8fa:	f04f 0e00 	mov.w	lr, #0
            // maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0; //東
            // maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;           //南
            // maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;     //西

        	//なぜdraw == trueでやっていたかわからない
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a8fe:	f640 74ff 	movw	r4, #4095	; 0xfff
        for(int j=0; j < target_size_y; j++)
 800a902:	f1b8 0f00 	cmp.w	r8, #0
 800a906:	d028      	beq.n	800a95a <initTargetAreaWeight+0x86>
 800a908:	f1a7 0048 	sub.w	r0, r7, #72	; 0x48
 800a90c:	fb19 7608 	smlabb	r6, r9, r8, r7
 800a910:	4639      	mov	r1, r7
 800a912:	4662      	mov	r2, ip
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a914:	7a15      	ldrb	r5, [r2, #8]
 800a916:	2d01      	cmp	r5, #1
 800a918:	bf14      	ite	ne
 800a91a:	2500      	movne	r5, #0
 800a91c:	4625      	moveq	r5, r4
 800a91e:	8155      	strh	r5, [r2, #10]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].existence == WALL) ? MAX_WEIGHT : 0; //東
 800a920:	f891 52d0 	ldrb.w	r5, [r1, #720]	; 0x2d0
 800a924:	2d01      	cmp	r5, #1
 800a926:	bf14      	ite	ne
 800a928:	2500      	movne	r5, #0
 800a92a:	4625      	moveq	r5, r4
 800a92c:	f8a1 52d2 	strh.w	r5, [r1, #722]	; 0x2d2
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;           //南
 800a930:	7815      	ldrb	r5, [r2, #0]
 800a932:	2d01      	cmp	r5, #1
 800a934:	bf14      	ite	ne
 800a936:	2500      	movne	r5, #0
 800a938:	4625      	moveq	r5, r4
 800a93a:	8055      	strh	r5, [r2, #2]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a93c:	f890 52d0 	ldrb.w	r5, [r0, #720]	; 0x2d0
 800a940:	3108      	adds	r1, #8
 800a942:	2d01      	cmp	r5, #1
 800a944:	bf14      	ite	ne
 800a946:	2500      	movne	r5, #0
 800a948:	4625      	moveq	r5, r4
        for(int j=0; j < target_size_y; j++)
 800a94a:	42b1      	cmp	r1, r6
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a94c:	f8a0 52d2 	strh.w	r5, [r0, #722]	; 0x2d2
 800a950:	f102 0208 	add.w	r2, r2, #8
 800a954:	f100 0008 	add.w	r0, r0, #8
        for(int j=0; j < target_size_y; j++)
 800a958:	d1dc      	bne.n	800a914 <initTargetAreaWeight+0x40>
    for(int i=0; i < target_size_x; i++)
 800a95a:	f10e 0e01 	add.w	lr, lr, #1
 800a95e:	459e      	cmp	lr, r3
 800a960:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800a964:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800a968:	d1cb      	bne.n	800a902 <initTargetAreaWeight+0x2e>
        }
    }
}
 800a96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a96e:	bf00      	nop

0800a970 <updateAllNodeWeight>:

#define WEIGHT_NANAME   5
#define WEIGHT_STRAIGHT 7

void updateAllNodeWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t area_size_x, uint8_t area_size_y, int mask)
{
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	b085      	sub	sp, #20
 800a976:	4680      	mov	r8, r0
 800a978:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 800a97c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a97e:	f500 7c34 	add.w	ip, r0, #720	; 0x2d0
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a982:	f640 77ff 	movw	r7, #4095	; 0xfff
 800a986:	f100 0550 	add.w	r5, r0, #80	; 0x50
 800a98a:	8047      	strh	r7, [r0, #2]
 800a98c:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a98e:	42a8      	cmp	r0, r5
 800a990:	d1fb      	bne.n	800a98a <updateAllNodeWeight+0x1a>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a992:	4560      	cmp	r0, ip
 800a994:	d1f7      	bne.n	800a986 <updateAllNodeWeight+0x16>
 800a996:	4646      	mov	r6, r8
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800a998:	f640 7cff 	movw	ip, #4095	; 0xfff
 800a99c:	f106 0548 	add.w	r5, r6, #72	; 0x48
 800a9a0:	f8a6 c2d2 	strh.w	ip, [r6, #722]	; 0x2d2
 800a9a4:	3608      	adds	r6, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a9a6:	42ae      	cmp	r6, r5
 800a9a8:	d1fa      	bne.n	800a9a0 <updateAllNodeWeight+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a9aa:	4286      	cmp	r6, r0
 800a9ac:	d1f6      	bne.n	800a99c <updateAllNodeWeight+0x2c>
	//全体に154/20ms = 7.7ms
    //新しい区画に入ったときに、更新

    initWeight(maze); //3/20ms

    initTargetAreaWeight(maze, x,y, area_size_x,area_size_y);
 800a9ae:	f8cd e000 	str.w	lr, [sp]
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	f7ff ff8e 	bl	800a8d4 <initTargetAreaWeight>
 800a9b8:	4645      	mov	r5, r8
 800a9ba:	f108 0250 	add.w	r2, r8, #80	; 0x50
 800a9be:	9203      	str	r2, [sp, #12]
 800a9c0:	f108 0e48 	add.w	lr, r8, #72	; 0x48
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
			{
                //1ノードずつ見る.そこから加算対象が最大6個
                //端を見ないので、一番上の列からスタート j=N; j >= 0, xを1からN-1まで
                //次に行 j=N-1から1まで xを0からN-1まで
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a9c4:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a9c8:	46ac      	mov	ip, r5
					}
                    //南西
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
					{
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
						change_flag = true;		//値が更新されたことを示す
 800a9ca:	f04f 0800 	mov.w	r8, #0
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800a9ce:	4647      	mov	r7, r8
						change_flag = true;		//値が更新されたことを示す
 800a9d0:	4661      	mov	r1, ip
 800a9d2:	46e2      	mov	sl, ip
 800a9d4:	46c1      	mov	r9, r8
 800a9d6:	f101 0848 	add.w	r8, r1, #72	; 0x48
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a9da:	4645      	mov	r5, r8
 800a9dc:	4653      	mov	r3, sl
 800a9de:	2001      	movs	r0, #1
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a9e0:	895e      	ldrh	r6, [r3, #10]
 800a9e2:	4296      	cmp	r6, r2
 800a9e4:	d055      	beq.n	800aa92 <updateAllNodeWeight+0x122>
				if(j < NUMBER_OF_SQUARES_Y-1)   //範囲チェック. 座標のxyではなく、ノードのxy
 800a9e6:	2808      	cmp	r0, #8
 800a9e8:	d010      	beq.n	800aa0c <updateAllNodeWeight+0x9c>
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT) )	//壁がなければ(maskの意味はstatic_parametersを参照)
 800a9ea:	f893 b010 	ldrb.w	fp, [r3, #16]
 800a9ee:	ea1b 0f04 	tst.w	fp, r4
 800a9f2:	d109      	bne.n	800aa08 <updateAllNodeWeight+0x98>
 800a9f4:	f8b3 b012 	ldrh.w	fp, [r3, #18]
 800a9f8:	4593      	cmp	fp, r2
 800a9fa:	d105      	bne.n	800aa08 <updateAllNodeWeight+0x98>
						maze->RawNode[i][j+1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a9fc:	f106 0907 	add.w	r9, r6, #7
 800aa00:	f8a3 9012 	strh.w	r9, [r3, #18]
						change_flag = true;		//値が更新されたことを示す
 800aa04:	f04f 0901 	mov.w	r9, #1
				if(j > 1)						//範囲チェック.ミスってた
 800aa08:	2801      	cmp	r0, #1
 800aa0a:	d00c      	beq.n	800aa26 <updateAllNodeWeight+0xb6>
					if( ((maze->RawNode[i][j-1].existence & mask) == NOWALL) && (maze->RawNode[i][j-1].weight == MAX_WEIGHT) )	//壁がなければ
 800aa0c:	f893 b000 	ldrb.w	fp, [r3]
 800aa10:	ea1b 0f04 	tst.w	fp, r4
 800aa14:	d107      	bne.n	800aa26 <updateAllNodeWeight+0xb6>
 800aa16:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 800aa1a:	4593      	cmp	fp, r2
 800aa1c:	d103      	bne.n	800aa26 <updateAllNodeWeight+0xb6>
						maze->RawNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800aa1e:	3607      	adds	r6, #7
 800aa20:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800aa22:	f04f 0901 	mov.w	r9, #1
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800aa26:	2f08      	cmp	r7, #8
 800aa28:	d017      	beq.n	800aa5a <updateAllNodeWeight+0xea>
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))		//壁がなければ
 800aa2a:	f895 62d8 	ldrb.w	r6, [r5, #728]	; 0x2d8
 800aa2e:	4226      	tst	r6, r4
 800aa30:	d109      	bne.n	800aa46 <updateAllNodeWeight+0xd6>
 800aa32:	f8b5 62da 	ldrh.w	r6, [r5, #730]	; 0x2da
 800aa36:	4296      	cmp	r6, r2
 800aa38:	d105      	bne.n	800aa46 <updateAllNodeWeight+0xd6>
						maze->ColumnNode[i+1][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aa3a:	895e      	ldrh	r6, [r3, #10]
 800aa3c:	3605      	adds	r6, #5
 800aa3e:	f8a5 62da 	strh.w	r6, [r5, #730]	; 0x2da
						change_flag = true;		//値が更新されたことを示す
 800aa42:	f04f 0901 	mov.w	r9, #1
                    if( ((maze->ColumnNode[i+1][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j-1].weight == MAX_WEIGHT)	)		//壁がなければ
 800aa46:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800aa4a:	4226      	tst	r6, r4
 800aa4c:	d104      	bne.n	800aa58 <updateAllNodeWeight+0xe8>
 800aa4e:	f8b5 62d2 	ldrh.w	r6, [r5, #722]	; 0x2d2
 800aa52:	4296      	cmp	r6, r2
 800aa54:	f000 8092 	beq.w	800ab7c <updateAllNodeWeight+0x20c>
				if(i > 0)						//範囲チェック
 800aa58:	b1df      	cbz	r7, 800aa92 <updateAllNodeWeight+0x122>
					if( ((maze->ColumnNode[i][j].existence & mask) == NOWALL)  && (maze->ColumnNode[i][j].weight == MAX_WEIGHT) )		//壁がなければ
 800aa5a:	f891 62d8 	ldrb.w	r6, [r1, #728]	; 0x2d8
 800aa5e:	4226      	tst	r6, r4
 800aa60:	d109      	bne.n	800aa76 <updateAllNodeWeight+0x106>
 800aa62:	f8b1 62da 	ldrh.w	r6, [r1, #730]	; 0x2da
 800aa66:	4296      	cmp	r6, r2
 800aa68:	d105      	bne.n	800aa76 <updateAllNodeWeight+0x106>
							maze->ColumnNode[i][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aa6a:	895e      	ldrh	r6, [r3, #10]
 800aa6c:	3605      	adds	r6, #5
 800aa6e:	f8a1 62da 	strh.w	r6, [r1, #730]	; 0x2da
							change_flag = true;		//値が更新されたことを示す
 800aa72:	f04f 0901 	mov.w	r9, #1
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
 800aa76:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800aa7a:	4226      	tst	r6, r4
 800aa7c:	d109      	bne.n	800aa92 <updateAllNodeWeight+0x122>
 800aa7e:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800aa82:	4296      	cmp	r6, r2
 800aa84:	d105      	bne.n	800aa92 <updateAllNodeWeight+0x122>
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aa86:	895e      	ldrh	r6, [r3, #10]
 800aa88:	3605      	adds	r6, #5
 800aa8a:	f8a1 62d2 	strh.w	r6, [r1, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800aa8e:	f04f 0901 	mov.w	r9, #1
 800aa92:	3001      	adds	r0, #1
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800aa94:	2809      	cmp	r0, #9
 800aa96:	f103 0308 	add.w	r3, r3, #8
 800aa9a:	f101 0108 	add.w	r1, r1, #8
 800aa9e:	f105 0508 	add.w	r5, r5, #8
 800aaa2:	d19d      	bne.n	800a9e0 <updateAllNodeWeight+0x70>
 800aaa4:	3701      	adds	r7, #1
		for( i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800aaa6:	2f09      	cmp	r7, #9
 800aaa8:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800aaac:	4641      	mov	r1, r8
 800aaae:	d192      	bne.n	800a9d6 <updateAllNodeWeight+0x66>
 800aab0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800aab4:	464f      	mov	r7, r9
 800aab6:	4671      	mov	r1, lr
 800aab8:	f04f 0801 	mov.w	r8, #1
 800aabc:	f101 0948 	add.w	r9, r1, #72	; 0x48
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800aac0:	464d      	mov	r5, r9
 800aac2:	4653      	mov	r3, sl
 800aac4:	2000      	movs	r0, #0
        //列
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
		{
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
			{
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800aac6:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800aaca:	4296      	cmp	r6, r2
 800aacc:	d04f      	beq.n	800ab6e <updateAllNodeWeight+0x1fe>
					continue;
				}
                // printf("continueはクリア. Column[%d][%d]\r\n",i,j);

                //東側ノード
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800aace:	f1b8 0f08 	cmp.w	r8, #8
 800aad2:	d00f      	beq.n	800aaf4 <updateAllNodeWeight+0x184>
				{
                    // printf("列東%d,mask: %d, result: %d\r\n",maze->ColumnNode[i+1][j].existence, mask,((maze->ColumnNode[i+1][j].existence) & mask));
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aad4:	f895 b2d0 	ldrb.w	fp, [r5, #720]	; 0x2d0
 800aad8:	ea1b 0f04 	tst.w	fp, r4
 800aadc:	d107      	bne.n	800aaee <updateAllNodeWeight+0x17e>
 800aade:	f8b5 b2d2 	ldrh.w	fp, [r5, #722]	; 0x2d2
 800aae2:	4593      	cmp	fp, r2
 800aae4:	d103      	bne.n	800aaee <updateAllNodeWeight+0x17e>
					{
						maze->ColumnNode[i+1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800aae6:	3607      	adds	r6, #7
 800aae8:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800aaec:	2701      	movs	r7, #1
					}
                }
                //西側ノード
				if(i > 1)						//範囲チェック
 800aaee:	f1b8 0f01 	cmp.w	r8, #1
 800aaf2:	d00d      	beq.n	800ab10 <updateAllNodeWeight+0x1a0>
				{
					if( ((maze->ColumnNode[i-1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i-1][j].weight == MAX_WEIGHT))	//壁がなければ
 800aaf4:	f891 6288 	ldrb.w	r6, [r1, #648]	; 0x288
 800aaf8:	4226      	tst	r6, r4
 800aafa:	d109      	bne.n	800ab10 <updateAllNodeWeight+0x1a0>
 800aafc:	f8b1 628a 	ldrh.w	r6, [r1, #650]	; 0x28a
 800ab00:	4296      	cmp	r6, r2
 800ab02:	d105      	bne.n	800ab10 <updateAllNodeWeight+0x1a0>
					{
						maze->ColumnNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800ab04:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab08:	3607      	adds	r6, #7
 800ab0a:	f8a1 628a 	strh.w	r6, [r1, #650]	; 0x28a
						change_flag = true;		//値が更新されたことを示す
 800ab0e:	2701      	movs	r7, #1
					}
				}
                //北側に斜めが2方向
				if(j < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ab10:	2808      	cmp	r0, #8
 800ab12:	d013      	beq.n	800ab3c <updateAllNodeWeight+0x1cc>
				{
                    //北東
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800ab14:	7a1e      	ldrb	r6, [r3, #8]
 800ab16:	4226      	tst	r6, r4
 800ab18:	d107      	bne.n	800ab2a <updateAllNodeWeight+0x1ba>
 800ab1a:	895e      	ldrh	r6, [r3, #10]
 800ab1c:	4296      	cmp	r6, r2
 800ab1e:	d104      	bne.n	800ab2a <updateAllNodeWeight+0x1ba>
					{
						maze->RawNode[i][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab20:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab24:	3605      	adds	r6, #5
 800ab26:	815e      	strh	r6, [r3, #10]
						change_flag = true;		//値が更新されたことを示す
 800ab28:	2701      	movs	r7, #1
					}

                    //北西
                    if( ((maze->RawNode[i-1][j+1].existence & mask) == NOWALL) && (maze->RawNode[i-1][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800ab2a:	f813 6c48 	ldrb.w	r6, [r3, #-72]
 800ab2e:	4226      	tst	r6, r4
 800ab30:	d103      	bne.n	800ab3a <updateAllNodeWeight+0x1ca>
 800ab32:	f833 6c46 	ldrh.w	r6, [r3, #-70]
 800ab36:	4296      	cmp	r6, r2
 800ab38:	d027      	beq.n	800ab8a <updateAllNodeWeight+0x21a>
						change_flag = true;		//値が更新されたことを示す
					}
				}

                //南側に斜めが2方向
				if(j > 0)						//範囲チェック
 800ab3a:	b1d0      	cbz	r0, 800ab72 <updateAllNodeWeight+0x202>
				{
                    //南東
					if( ((maze->RawNode[i][j].existence & mask) == NOWALL) && (maze->RawNode[i][j].weight == MAX_WEIGHT)	)		//壁がなければ
 800ab3c:	781e      	ldrb	r6, [r3, #0]
 800ab3e:	4226      	tst	r6, r4
 800ab40:	d107      	bne.n	800ab52 <updateAllNodeWeight+0x1e2>
 800ab42:	885e      	ldrh	r6, [r3, #2]
 800ab44:	4296      	cmp	r6, r2
 800ab46:	d104      	bne.n	800ab52 <updateAllNodeWeight+0x1e2>
					{
						maze->RawNode[i][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab48:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab4c:	3605      	adds	r6, #5
 800ab4e:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800ab50:	2701      	movs	r7, #1
					}
                    //南西
    				if( ((maze->RawNode[i-1][j].existence & mask) == NOWALL) && (maze->RawNode[i-1][j].weight == MAX_WEIGHT))		//壁がなければ
 800ab52:	f813 6c50 	ldrb.w	r6, [r3, #-80]
 800ab56:	4226      	tst	r6, r4
 800ab58:	d109      	bne.n	800ab6e <updateAllNodeWeight+0x1fe>
 800ab5a:	f833 6c4e 	ldrh.w	r6, [r3, #-78]
 800ab5e:	4296      	cmp	r6, r2
 800ab60:	d105      	bne.n	800ab6e <updateAllNodeWeight+0x1fe>
					{
							maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab62:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab66:	3605      	adds	r6, #5
 800ab68:	f823 6c4e 	strh.w	r6, [r3, #-78]
							change_flag = true;		//値が更新されたことを示す
 800ab6c:	2701      	movs	r7, #1
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
 800ab6e:	2808      	cmp	r0, #8
 800ab70:	d012      	beq.n	800ab98 <updateAllNodeWeight+0x228>
 800ab72:	3001      	adds	r0, #1
 800ab74:	3108      	adds	r1, #8
 800ab76:	3308      	adds	r3, #8
 800ab78:	3508      	adds	r5, #8
 800ab7a:	e7a4      	b.n	800aac6 <updateAllNodeWeight+0x156>
						maze->ColumnNode[i+1][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab7c:	895e      	ldrh	r6, [r3, #10]
 800ab7e:	3605      	adds	r6, #5
 800ab80:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800ab84:	f04f 0901 	mov.w	r9, #1
 800ab88:	e766      	b.n	800aa58 <updateAllNodeWeight+0xe8>
						maze->RawNode[i-1][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab8a:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab8e:	3605      	adds	r6, #5
 800ab90:	f823 6c46 	strh.w	r6, [r3, #-70]
						change_flag = true;		//値が更新されたことを示す
 800ab94:	2701      	movs	r7, #1
 800ab96:	e7d0      	b.n	800ab3a <updateAllNodeWeight+0x1ca>
 800ab98:	f108 0801 	add.w	r8, r8, #1
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800ab9c:	f1b8 0f09 	cmp.w	r8, #9
 800aba0:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800aba4:	4649      	mov	r1, r9
 800aba6:	d189      	bne.n	800aabc <updateAllNodeWeight+0x14c>
				}
            }
        }
        //printf("重みの更新\r\n");//一回しか呼ばれていない
        //cnt++;
	}while(change_flag == true);	//全体を作り終わるまで待つ
 800aba8:	2f00      	cmp	r7, #0
 800abaa:	f47f af0e 	bne.w	800a9ca <updateAllNodeWeight+0x5a>
//    t = 0;
//	HAL_TIM_Base_Stop_IT(&htim8);
//	printf("%d/20ms, %d, %d\r\n\r\n",timer8, skip_raw, skip_column);
}
 800abae:	b005      	add	sp, #20
 800abb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abb4 <updateNodeThree>:
void updateNodeThree(maze_node *maze, state *st, uint8_t x, uint8_t y)
{
 800abb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    //壁の有無の更新。既知の壁には上書きしない。重みの更新は？既知かどうかは重複するから書かない
        //重みは？壁があればMAX値、なければそのまま
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800abb6:	0094      	lsls	r4, r2, #2
 800abb8:	1c5f      	adds	r7, r3, #1
 800abba:	18a5      	adds	r5, r4, r2
 800abbc:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 800abc0:	18a6      	adds	r6, r4, r2
 800abc2:	f810 c035 	ldrb.w	ip, [r0, r5, lsl #3]
 800abc6:	f1bc 0f02 	cmp.w	ip, #2
 800abca:	bf08      	it	eq
 800abcc:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800abd0:	f102 0501 	add.w	r5, r2, #1
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800abd4:	eb07 0646 	add.w	r6, r7, r6, lsl #1
 800abd8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800abdc:	bf08      	it	eq
 800abde:	f00c 0c03 	andeq.w	ip, ip, #3
 800abe2:	441d      	add	r5, r3
 800abe4:	f800 c036 	strb.w	ip, [r0, r6, lsl #3]
 800abe8:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800abec:	eb04 0c02 	add.w	ip, r4, r2
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800abf0:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800abf4:	2e02      	cmp	r6, #2
 800abf6:	bf08      	it	eq
 800abf8:	790e      	ldrbeq	r6, [r1, #4]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800abfa:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800abfe:	bf08      	it	eq
 800ac00:	f3c6 0681 	ubfxeq	r6, r6, #2, #2
 800ac04:	f885 62d0 	strb.w	r6, [r5, #720]	; 0x2d0
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800ac08:	f810 c03c 	ldrb.w	ip, [r0, ip, lsl #3]
 800ac0c:	f1bc 0f02 	cmp.w	ip, #2
 800ac10:	bf08      	it	eq
 800ac12:	f891 c004 	ldrbeq.w	ip, [r1, #4]
 800ac16:	eb04 0e02 	add.w	lr, r4, r2
 800ac1a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 800ac1e:	f04f 0609 	mov.w	r6, #9
 800ac22:	bf08      	it	eq
 800ac24:	f3cc 1c01 	ubfxeq	ip, ip, #4, #2
 800ac28:	fb16 3602 	smlabb	r6, r6, r2, r3
 800ac2c:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 800ac30:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    // maze->RawNode[x][y+1].flag = true;      //北
    // maze->ColumnNode[x+1][y].flag = true;   //東
    // maze->RawNode[x][y].flag = true;        //南
    // maze->ColumnNode[x][y].flag = true;     //西

    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800ac34:	4414      	add	r4, r2
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800ac36:	f896 c2d0 	ldrb.w	ip, [r6, #720]	; 0x2d0
 800ac3a:	f1bc 0f02 	cmp.w	ip, #2
 800ac3e:	bf08      	it	eq
 800ac40:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800ac44:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ac48:	eb04 0207 	add.w	r2, r4, r7
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800ac4c:	bf08      	it	eq
 800ac4e:	ea4f 1c9c 	moveq.w	ip, ip, lsr #6
 800ac52:	f886 c2d0 	strb.w	ip, [r6, #720]	; 0x2d0
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800ac56:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800ac5a:	f1a1 0101 	sub.w	r1, r1, #1
 800ac5e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800ac62:	fab1 f181 	clz	r1, r1
 800ac66:	0949      	lsrs	r1, r1, #5
 800ac68:	7111      	strb	r1, [r2, #4]
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800ac6a:	f895 22d0 	ldrb.w	r2, [r5, #720]	; 0x2d0
 800ac6e:	f1a2 0201 	sub.w	r2, r2, #1
 800ac72:	fab2 f282 	clz	r2, r2
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800ac76:	4423      	add	r3, r4
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800ac78:	0952      	lsrs	r2, r2, #5
 800ac7a:	f885 22d4 	strb.w	r2, [r5, #724]	; 0x2d4
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800ac7e:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 800ac82:	f1a2 0201 	sub.w	r2, r2, #1
 800ac86:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ac8a:	fab2 f282 	clz	r2, r2
 800ac8e:	0952      	lsrs	r2, r2, #5
 800ac90:	711a      	strb	r2, [r3, #4]
    maze->ColumnNode[x][y].draw = (maze->ColumnNode[x][y].existence == WALL) ? true : false;        //西
 800ac92:	f896 32d0 	ldrb.w	r3, [r6, #720]	; 0x2d0
 800ac96:	f1a3 0301 	sub.w	r3, r3, #1
 800ac9a:	fab3 f383 	clz	r3, r3
 800ac9e:	095b      	lsrs	r3, r3, #5
 800aca0:	f886 32d4 	strb.w	r3, [r6, #724]	; 0x2d4
    //重みは毎回リセットして計算しなおすのでここでは要らない
    // maze->RawNode[x][y+1].weight = (maze->RawNode[x][y+1].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y+1].weight;             //北
    // maze->ColumnNode[x+1][y].weight = (maze->ColumnNode[x+1][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x+1][y].weight;    //東
    // maze->RawNode[x][y].weight = (maze->RawNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y].weight;                   //南
    // maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x][y].weight;          //西
}
 800aca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca6:	bf00      	nop

0800aca8 <printAllWeight>:
        return false;
    }
}

void printAllWeight(maze_node *maze, position *pos)
{
 800aca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acac:	b085      	sub	sp, #20
 800acae:	4606      	mov	r6, r0
 800acb0:	9003      	str	r0, [sp, #12]
    //全出力を3桁にそろえればよさそう
    //重みが0かつゴールエリア内の座標なら赤色で出力 31;1m
    //行から表示して、
    //列を表示
    //交互に
    printf("全ノードの重み\r\n");
 800acb2:	484d      	ldr	r0, [pc, #308]	; (800ade8 <printAllWeight+0x140>)

    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
    {
        //行
        printf("  +  ");
 800acb4:	f8df 9140 	ldr.w	r9, [pc, #320]	; 800adf8 <printAllWeight+0x150>
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
            }
            else
            {
                printf(" %3x ",maze->RawNode[x][y].weight);
 800acb8:	4d4c      	ldr	r5, [pc, #304]	; (800adec <printAllWeight+0x144>)
            else
            {
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
            }
            if(x < NUMBER_OF_SQUARES_X)
                printf("     ");
 800acba:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800adfc <printAllWeight+0x154>
{
 800acbe:	460c      	mov	r4, r1
    printf("全ノードの重み\r\n");
 800acc0:	f008 fb8e 	bl	80133e0 <puts>
 800acc4:	4633      	mov	r3, r6
 800acc6:	3340      	adds	r3, #64	; 0x40
 800acc8:	9302      	str	r3, [sp, #8]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800acca:	2709      	movs	r7, #9
        printf("  +  ");
 800accc:	4648      	mov	r0, r9
 800acce:	f008 faff 	bl	80132d0 <iprintf>
 800acd2:	9b02      	ldr	r3, [sp, #8]
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800acd4:	f04f 0a00 	mov.w	sl, #0
 800acd8:	f103 0608 	add.w	r6, r3, #8
 800acdc:	e010      	b.n	800ad00 <printAllWeight+0x58>
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800acde:	7823      	ldrb	r3, [r4, #0]
 800ace0:	4553      	cmp	r3, sl
 800ace2:	d102      	bne.n	800acea <printAllWeight+0x42>
 800ace4:	7863      	ldrb	r3, [r4, #1]
 800ace6:	42bb      	cmp	r3, r7
 800ace8:	d016      	beq.n	800ad18 <printAllWeight+0x70>
                printf(" %3x ",maze->RawNode[x][y].weight);
 800acea:	f008 faf1 	bl	80132d0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800acee:	f1ba 0f08 	cmp.w	sl, #8
                 printf("  +  ");
 800acf2:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800acf4:	d018      	beq.n	800ad28 <printAllWeight+0x80>
                 printf("  +  ");
 800acf6:	f008 faeb 	bl	80132d0 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800acfa:	f10a 0a01 	add.w	sl, sl, #1
 800acfe:	3650      	adds	r6, #80	; 0x50
    if(maze->RawNode[x][y].weight == 0)
 800ad00:	8872      	ldrh	r2, [r6, #2]
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800ad02:	f1aa 0306 	sub.w	r3, sl, #6
 800ad06:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->RawNode[x][y].weight);
 800ad08:	4611      	mov	r1, r2
 800ad0a:	4628      	mov	r0, r5
    if(maze->RawNode[x][y].weight == 0)
 800ad0c:	2a00      	cmp	r2, #0
 800ad0e:	d1e6      	bne.n	800acde <printAllWeight+0x36>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d8e4      	bhi.n	800acde <printAllWeight+0x36>
 800ad14:	2f02      	cmp	r7, #2
 800ad16:	dce2      	bgt.n	800acde <printAllWeight+0x36>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800ad18:	4611      	mov	r1, r2
 800ad1a:	4835      	ldr	r0, [pc, #212]	; (800adf0 <printAllWeight+0x148>)
 800ad1c:	f008 fad8 	bl	80132d0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800ad20:	f1ba 0f08 	cmp.w	sl, #8
                 printf("  +  ");
 800ad24:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800ad26:	d1e6      	bne.n	800acf6 <printAllWeight+0x4e>
 800ad28:	1e7b      	subs	r3, r7, #1
 800ad2a:	461e      	mov	r6, r3
        printf("\r\n");
 800ad2c:	4831      	ldr	r0, [pc, #196]	; (800adf4 <printAllWeight+0x14c>)
 800ad2e:	9301      	str	r3, [sp, #4]
 800ad30:	f008 fb56 	bl	80133e0 <puts>
 800ad34:	4633      	mov	r3, r6
 800ad36:	b2f6      	uxtb	r6, r6
 800ad38:	1af6      	subs	r6, r6, r3
 800ad3a:	00f6      	lsls	r6, r6, #3
 800ad3c:	f8dd a008 	ldr.w	sl, [sp, #8]
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800ad40:	f04f 0b00 	mov.w	fp, #0
 800ad44:	e00d      	b.n	800ad62 <printAllWeight+0xba>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800ad46:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800ad4a:	f008 fac1 	bl	80132d0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800ad4e:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800ad52:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800ad54:	d022      	beq.n	800ad9c <printAllWeight+0xf4>
                printf("     ");
 800ad56:	f008 fabb 	bl	80132d0 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800ad5a:	f10b 0b01 	add.w	fp, fp, #1
 800ad5e:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
    if(maze->ColumnNode[x][y].weight == 0)
 800ad62:	eb0a 0106 	add.w	r1, sl, r6
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800ad66:	f1ab 0306 	sub.w	r3, fp, #6
    if(maze->ColumnNode[x][y].weight == 0)
 800ad6a:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800ad6e:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800ad70:	4628      	mov	r0, r5
    if(maze->ColumnNode[x][y].weight == 0)
 800ad72:	b921      	cbnz	r1, 800ad7e <printAllWeight+0xd6>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d802      	bhi.n	800ad7e <printAllWeight+0xd6>
 800ad78:	9b01      	ldr	r3, [sp, #4]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	dd05      	ble.n	800ad8a <printAllWeight+0xe2>
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800ad7e:	7823      	ldrb	r3, [r4, #0]
 800ad80:	455b      	cmp	r3, fp
 800ad82:	d1e0      	bne.n	800ad46 <printAllWeight+0x9e>
 800ad84:	7863      	ldrb	r3, [r4, #1]
 800ad86:	42bb      	cmp	r3, r7
 800ad88:	d1dd      	bne.n	800ad46 <printAllWeight+0x9e>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800ad8a:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800ad8e:	4818      	ldr	r0, [pc, #96]	; (800adf0 <printAllWeight+0x148>)
 800ad90:	f008 fa9e 	bl	80132d0 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800ad94:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800ad98:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800ad9a:	d1dc      	bne.n	800ad56 <printAllWeight+0xae>
 800ad9c:	9b02      	ldr	r3, [sp, #8]
        }
        printf("\r\n");
 800ad9e:	4815      	ldr	r0, [pc, #84]	; (800adf4 <printAllWeight+0x14c>)
 800ada0:	3b08      	subs	r3, #8
 800ada2:	9302      	str	r3, [sp, #8]
 800ada4:	f008 fb1c 	bl	80133e0 <puts>
 800ada8:	9f01      	ldr	r7, [sp, #4]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800adaa:	2f00      	cmp	r7, #0
 800adac:	d18e      	bne.n	800accc <printAllWeight+0x24>
    }
    //y が0のときの行だけ表示
    printf("  +  ");
 800adae:	4812      	ldr	r0, [pc, #72]	; (800adf8 <printAllWeight+0x150>)
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
    {
        printf(" %3x ",maze->RawNode[x][0].weight);
 800adb0:	4e0e      	ldr	r6, [pc, #56]	; (800adec <printAllWeight+0x144>)
        if(x < NUMBER_OF_SQUARES_X-1)
                printf("  +  ");
 800adb2:	4607      	mov	r7, r0
    printf("  +  ");
 800adb4:	f008 fa8c 	bl	80132d0 <iprintf>
 800adb8:	9b03      	ldr	r3, [sp, #12]
        printf(" %3x ",maze->RawNode[x][0].weight);
 800adba:	4630      	mov	r0, r6
 800adbc:	8859      	ldrh	r1, [r3, #2]
 800adbe:	461c      	mov	r4, r3
 800adc0:	f008 fa86 	bl	80132d0 <iprintf>
 800adc4:	f504 7520 	add.w	r5, r4, #640	; 0x280
                printf("  +  ");
 800adc8:	4638      	mov	r0, r7
 800adca:	f008 fa81 	bl	80132d0 <iprintf>
 800adce:	3450      	adds	r4, #80	; 0x50
        printf(" %3x ",maze->RawNode[x][0].weight);
 800add0:	8861      	ldrh	r1, [r4, #2]
 800add2:	4630      	mov	r0, r6
 800add4:	f008 fa7c 	bl	80132d0 <iprintf>
        if(x < NUMBER_OF_SQUARES_X-1)
 800add8:	42ac      	cmp	r4, r5
 800adda:	d1f5      	bne.n	800adc8 <printAllWeight+0x120>
    }
    printf("\r\n");
 800addc:	4805      	ldr	r0, [pc, #20]	; (800adf4 <printAllWeight+0x14c>)


}
 800adde:	b005      	add	sp, #20
 800ade0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800ade4:	f008 bafc 	b.w	80133e0 <puts>
 800ade8:	08016c94 	.word	0x08016c94
 800adec:	08016cc8 	.word	0x08016cc8
 800adf0:	08016cb4 	.word	0x08016cb4
 800adf4:	08016f80 	.word	0x08016f80
 800adf8:	08016cac 	.word	0x08016cac
 800adfc:	08016cd0 	.word	0x08016cd0

0800ae00 <printAllNodeExistence>:
        printf("\r\n");
    }
    printf("\r\n");
}
void printAllNodeExistence(maze_node *mn)
{
 800ae00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	4680      	mov	r8, r0
 800ae06:	4605      	mov	r5, r0
    printf("全ノードの壁の存在\r\n");
 800ae08:	481a      	ldr	r0, [pc, #104]	; (800ae74 <printAllNodeExistence+0x74>)
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            printf("%u,",mn->RawNode[i][j].existence);
 800ae0a:	4f1b      	ldr	r7, [pc, #108]	; (800ae78 <printAllNodeExistence+0x78>)
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ae0c:	4e1b      	ldr	r6, [pc, #108]	; (800ae7c <printAllNodeExistence+0x7c>)
            if(j < NUMBER_OF_SQUARES_Y-1)
                printf(",");
        }
        printf("\r\n");
 800ae0e:	f8df a070 	ldr.w	sl, [pc, #112]	; 800ae80 <printAllNodeExistence+0x80>
 800ae12:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800ae16:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
    printf("全ノードの壁の存在\r\n");
 800ae1a:	f008 fae1 	bl	80133e0 <puts>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ae1e:	2401      	movs	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800ae20:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 800ae24:	4638      	mov	r0, r7
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ae26:	3401      	adds	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800ae28:	f008 fa52 	bl	80132d0 <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ae2c:	2c0a      	cmp	r4, #10
 800ae2e:	d1f7      	bne.n	800ae20 <printAllNodeExistence+0x20>
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ae30:	f898 12d0 	ldrb.w	r1, [r8, #720]	; 0x2d0
 800ae34:	4630      	mov	r0, r6
 800ae36:	f008 fa4b 	bl	80132d0 <iprintf>
 800ae3a:	f108 0b40 	add.w	fp, r8, #64	; 0x40
 800ae3e:	4644      	mov	r4, r8
                printf(",");
 800ae40:	202c      	movs	r0, #44	; 0x2c
 800ae42:	f008 fa5d 	bl	8013300 <putchar>
 800ae46:	3408      	adds	r4, #8
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ae48:	f894 12d0 	ldrb.w	r1, [r4, #720]	; 0x2d0
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f008 fa3f 	bl	80132d0 <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 800ae52:	455c      	cmp	r4, fp
 800ae54:	d1f4      	bne.n	800ae40 <printAllNodeExistence+0x40>
 800ae56:	f108 0848 	add.w	r8, r8, #72	; 0x48
        printf("\r\n");
 800ae5a:	4650      	mov	r0, sl
 800ae5c:	f008 fac0 	bl	80133e0 <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ae60:	45c8      	cmp	r8, r9
 800ae62:	f105 0550 	add.w	r5, r5, #80	; 0x50
 800ae66:	d1da      	bne.n	800ae1e <printAllNodeExistence+0x1e>
    }
    printf("\r\n");
 800ae68:	4805      	ldr	r0, [pc, #20]	; (800ae80 <printAllNodeExistence+0x80>)
}
 800ae6a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800ae6e:	f008 bab7 	b.w	80133e0 <puts>
 800ae72:	bf00      	nop
 800ae74:	08016c74 	.word	0x08016c74
 800ae78:	08016c6c 	.word	0x08016c6c
 800ae7c:	08016c70 	.word	0x08016c70
 800ae80:	08016f80 	.word	0x08016f80

0800ae84 <printMatrix16ValueFromNode>:
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
    return val;
}
//機体からTeraTermで出力するための関数
void printMatrix16ValueFromNode(maze_node *maze)
{
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	4604      	mov	r4, r0
 800ae8a:	b083      	sub	sp, #12
    printf("機体からTeraTermへの出力用\r\n");
 800ae8c:	4822      	ldr	r0, [pc, #136]	; (800af18 <printMatrix16ValueFromNode+0x94>)
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
    {
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
        {
            printf("%u",convertNodeTo16Value(maze, i,j));
 800ae8e:	4e23      	ldr	r6, [pc, #140]	; (800af1c <printMatrix16ValueFromNode+0x98>)
    printf("機体からTeraTermへの出力用\r\n");
 800ae90:	f008 faa6 	bl	80133e0 <puts>
 800ae94:	f04f 0809 	mov.w	r8, #9
 800ae98:	f104 0348 	add.w	r3, r4, #72	; 0x48
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800ae9c:	f04f 0908 	mov.w	r9, #8
 800aea0:	f1a3 0208 	sub.w	r2, r3, #8
 800aea4:	eba9 0408 	sub.w	r4, r9, r8
 800aea8:	9201      	str	r2, [sp, #4]
 800aeaa:	4692      	mov	sl, r2
 800aeac:	00e4      	lsls	r4, r4, #3
 800aeae:	f503 7520 	add.w	r5, r3, #640	; 0x280
 800aeb2:	f503 7734 	add.w	r7, r3, #720	; 0x2d0
{
 800aeb6:	469b      	mov	fp, r3
 800aeb8:	e003      	b.n	800aec2 <printMatrix16ValueFromNode+0x3e>
            if(i < NUMBER_OF_SQUARES_X-1)
                printf(",");
 800aeba:	f008 fa21 	bl	8013300 <putchar>
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aebe:	455f      	cmp	r7, fp
 800aec0:	d01b      	beq.n	800aefa <printMatrix16ValueFromNode+0x76>
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800aec2:	f89a 12d4 	ldrb.w	r1, [sl, #724]	; 0x2d4
    val += 2 * maze->ColumnNode[x+1][y].draw;   //東
 800aec6:	f89a e31c 	ldrb.w	lr, [sl, #796]	; 0x31c
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800aeca:	f89b 0004 	ldrb.w	r0, [fp, #4]
    val += 4 * maze->RawNode[x][y].draw;        //南
 800aece:	eb0b 0c04 	add.w	ip, fp, r4
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800aed2:	00c9      	lsls	r1, r1, #3
 800aed4:	eb01 014e 	add.w	r1, r1, lr, lsl #1
    val += 4 * maze->RawNode[x][y].draw;        //南
 800aed8:	f89c c004 	ldrb.w	ip, [ip, #4]
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800aedc:	4401      	add	r1, r0
 800aede:	eb01 018c 	add.w	r1, r1, ip, lsl #2
            printf("%u",convertNodeTo16Value(maze, i,j));
 800aee2:	b2c9      	uxtb	r1, r1
 800aee4:	4630      	mov	r0, r6
 800aee6:	f008 f9f3 	bl	80132d0 <iprintf>
            if(i < NUMBER_OF_SQUARES_X-1)
 800aeea:	455d      	cmp	r5, fp
                printf(",");
 800aeec:	f04f 002c 	mov.w	r0, #44	; 0x2c
 800aef0:	f10b 0b50 	add.w	fp, fp, #80	; 0x50
 800aef4:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
            if(i < NUMBER_OF_SQUARES_X-1)
 800aef8:	d1df      	bne.n	800aeba <printMatrix16ValueFromNode+0x36>
        }
        printf("\r\n");
 800aefa:	4809      	ldr	r0, [pc, #36]	; (800af20 <printMatrix16ValueFromNode+0x9c>)
 800aefc:	f008 fa70 	bl	80133e0 <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800af00:	f1b8 0801 	subs.w	r8, r8, #1
 800af04:	f109 39ff 	add.w	r9, r9, #4294967295
 800af08:	9b01      	ldr	r3, [sp, #4]
 800af0a:	d1c9      	bne.n	800aea0 <printMatrix16ValueFromNode+0x1c>
    }
    printf("\r\n");
 800af0c:	4804      	ldr	r0, [pc, #16]	; (800af20 <printMatrix16ValueFromNode+0x9c>)

}
 800af0e:	b003      	add	sp, #12
 800af10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800af14:	f008 ba64 	b.w	80133e0 <puts>
 800af18:	08016cd8 	.word	0x08016cd8
 800af1c:	08016c70 	.word	0x08016c70
 800af20:	08016f80 	.word	0x08016f80

0800af24 <initProfile>:
        // log_st[n].wall.west = WALL;
    }
    printf("い\r\n");
}
void initProfile(profile *prof, maze_node *maze)
{
 800af24:	b430      	push	{r4, r5}
    };
    setWallExistence(&(prof->now.wall), &w_st[0]);
    setWallExistence(&(prof->next.wall), &next[0]);

    prof->now.node = &(maze->RawNode[0][0]);
    prof->next.node = &(maze->RawNode[0][1]);
 800af26:	f101 0308 	add.w	r3, r1, #8
    pos->x = x;
 800af2a:	2206      	movs	r2, #6
 800af2c:	2507      	movs	r5, #7
    existence->north = state[0];
 800af2e:	2454      	movs	r4, #84	; 0x54
    prof->now.node = &(maze->RawNode[0][0]);
 800af30:	6101      	str	r1, [r0, #16]
    prof->next.node = &(maze->RawNode[0][1]);
 800af32:	61c3      	str	r3, [r0, #28]
    existence->north = state[0];
 800af34:	214a      	movs	r1, #74	; 0x4a
    pos->y = y;
 800af36:	2300      	movs	r3, #0
    pos->x = x;
 800af38:	7002      	strb	r2, [r0, #0]
    pos->y = y;
 800af3a:	2201      	movs	r2, #1
    pos->x = x;
 800af3c:	7085      	strb	r5, [r0, #2]
    existence->north = state[0];
 800af3e:	7304      	strb	r4, [r0, #12]
 800af40:	7601      	strb	r1, [r0, #24]
    pos->y = y;
 800af42:	7043      	strb	r3, [r0, #1]
    pos->x = x;
 800af44:	7203      	strb	r3, [r0, #8]
    pos->y = y;
 800af46:	7243      	strb	r3, [r0, #9]
    st->car = car;
 800af48:	7283      	strb	r3, [r0, #10]
    prof->now.dir = front;
 800af4a:	72c3      	strb	r3, [r0, #11]
    pos->x = x;
 800af4c:	7503      	strb	r3, [r0, #20]
    st->car = car;
 800af4e:	7583      	strb	r3, [r0, #22]
    pos->y = y;
 800af50:	70c2      	strb	r2, [r0, #3]
 800af52:	7542      	strb	r2, [r0, #21]
    prof->next.dir = 1; //not use while running
 800af54:	75c2      	strb	r2, [r0, #23]
    // prof->now.node->rc = 0;
    // prof->now.node->pos.x = 0;
    // prof->now.node->pos.y = 0;
}
 800af56:	bc30      	pop	{r4, r5}
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop

0800af5c <shiftState>:
    prof->now.car = prof->next.car;
//    prof->now.dir = prof->next.dir;
    prof->now.pos.x = prof->next.pos.x;
    prof->now.pos.y = prof->next.pos.y;
    prof->now.node = prof->next.node;//ポインタ渡し
    prof->now.wall.north = prof->next.wall.north;
 800af5c:	7e02      	ldrb	r2, [r0, #24]
 800af5e:	7b03      	ldrb	r3, [r0, #12]
    prof->now.pos.y = prof->next.pos.y;
 800af60:	7d41      	ldrb	r1, [r0, #21]
 800af62:	7241      	strb	r1, [r0, #9]
{
 800af64:	b430      	push	{r4, r5}
    prof->now.car = prof->next.car;
 800af66:	7d85      	ldrb	r5, [r0, #22]
 800af68:	7285      	strb	r5, [r0, #10]
    prof->now.wall.north = prof->next.wall.north;
 800af6a:	f3c2 0501 	ubfx	r5, r2, #0, #2
 800af6e:	f365 0301 	bfi	r3, r5, #0, #2
    prof->now.wall.east = prof->next.wall.east;
 800af72:	f3c2 0581 	ubfx	r5, r2, #2, #2
 800af76:	f365 0383 	bfi	r3, r5, #2, #2
    prof->now.wall.south = prof->next.wall.south;
 800af7a:	f3c2 1501 	ubfx	r5, r2, #4, #2
 800af7e:	f365 1305 	bfi	r3, r5, #4, #2
    prof->now.wall.west = prof->next.wall.west;
 800af82:	0992      	lsrs	r2, r2, #6
    prof->now.pos.x = prof->next.pos.x;
 800af84:	7d04      	ldrb	r4, [r0, #20]
 800af86:	7204      	strb	r4, [r0, #8]
    prof->now.wall.west = prof->next.wall.west;
 800af88:	f362 1387 	bfi	r3, r2, #6, #2
    prof->now.node = prof->next.node;//ポインタ渡し
 800af8c:	69c2      	ldr	r2, [r0, #28]
 800af8e:	6102      	str	r2, [r0, #16]
    prof->now.wall.west = prof->next.wall.west;
 800af90:	7303      	strb	r3, [r0, #12]
}
 800af92:	bc30      	pop	{r4, r5}
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop

0800af98 <InitExplore>:

	//ハード処理

}
void InitExplore()
{
 800af98:	b570      	push	{r4, r5, r6, lr}
	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800af9a:	2100      	movs	r1, #0
 800af9c:	2004      	movs	r0, #4
 800af9e:	f003 fd29 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800afa2:	2100      	movs	r1, #0
 800afa4:	2005      	movs	r0, #5
 800afa6:	f003 fd25 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800afaa:	2100      	movs	r1, #0
 800afac:	2002      	movs	r0, #2
 800afae:	f003 fd21 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800afb2:	2100      	movs	r1, #0
 800afb4:	2003      	movs	r0, #3
 800afb6:	f003 fd1d 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800afba:	2100      	movs	r1, #0
 800afbc:	2001      	movs	r0, #1
 800afbe:	f003 fd19 	bl	800e9f4 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800afc2:	2100      	movs	r1, #0
 800afc4:	4608      	mov	r0, r1
 800afc6:	f003 fd15 	bl	800e9f4 <PIDChangeFlag>

//	Load_Gain();

	uint8_t imu_check;
	imu_check = IMU_init();
 800afca:	f003 f87b 	bl	800e0c4 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800afce:	4c2f      	ldr	r4, [pc, #188]	; (800b08c <InitExplore+0xf4>)
	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
	Acceleration = 0;
 800afd0:	4d2f      	ldr	r5, [pc, #188]	; (800b090 <InitExplore+0xf8>)
	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
//	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
//	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
//	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
	TargetPhoto[SR] = 300;//294.299988;//THRESHOLD_SR;
 800afd2:	4e30      	ldr	r6, [pc, #192]	; (800b094 <InitExplore+0xfc>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800afd4:	4601      	mov	r1, r0
 800afd6:	4620      	mov	r0, r4
 800afd8:	f008 f97a 	bl	80132d0 <iprintf>
	imu_check =IMU_init();
 800afdc:	f003 f872 	bl	800e0c4 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800afe0:	4601      	mov	r1, r0
 800afe2:	4620      	mov	r0, r4
 800afe4:	f008 f974 	bl	80132d0 <iprintf>
	HAL_Delay(100);
 800afe8:	2064      	movs	r0, #100	; 0x64
 800afea:	f003 feb9 	bl	800ed60 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800afee:	2138      	movs	r1, #56	; 0x38
 800aff0:	2037      	movs	r0, #55	; 0x37
 800aff2:	f002 ff49 	bl	800de88 <ReadIMU>
 800aff6:	4b28      	ldr	r3, [pc, #160]	; (800b098 <InitExplore+0x100>)
	AngularAcceleration = 0;
 800aff8:	4c28      	ldr	r4, [pc, #160]	; (800b09c <InitExplore+0x104>)
	ZGyro = ReadIMU(0x37, 0x38);
 800affa:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800affe:	6818      	ldr	r0, [r3, #0]
 800b000:	f7fd f9da 	bl	80083b8 <__aeabi_f2d>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	4825      	ldr	r0, [pc, #148]	; (800b0a0 <InitExplore+0x108>)
 800b00a:	f008 f961 	bl	80132d0 <iprintf>
	Motor_PWM_Start();
 800b00e:	f003 f923 	bl	800e258 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b012:	f003 f89b 	bl	800e14c <EncoderStart>
	EmitterON();
 800b016:	f003 f8a9 	bl	800e16c <EmitterON>
	ADCStart();
 800b01a:	f002 fe03 	bl	800dc24 <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b01e:	f247 512f 	movw	r1, #29999	; 0x752f
 800b022:	4820      	ldr	r0, [pc, #128]	; (800b0a4 <InitExplore+0x10c>)
 800b024:	f003 f9a2 	bl	800e36c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b028:	f247 512f 	movw	r1, #29999	; 0x752f
 800b02c:	481e      	ldr	r0, [pc, #120]	; (800b0a8 <InitExplore+0x110>)
 800b02e:	f003 f99d 	bl	800e36c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b032:	481e      	ldr	r0, [pc, #120]	; (800b0ac <InitExplore+0x114>)
 800b034:	f005 fc6c 	bl	8010910 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b038:	481d      	ldr	r0, [pc, #116]	; (800b0b0 <InitExplore+0x118>)
 800b03a:	f005 fc69 	bl	8010910 <HAL_TIM_Base_Start_IT>
	TargetVelocity[BODY] = 0;
 800b03e:	491d      	ldr	r1, [pc, #116]	; (800b0b4 <InitExplore+0x11c>)
	TargetAngularV = 0;
 800b040:	481d      	ldr	r0, [pc, #116]	; (800b0b8 <InitExplore+0x120>)
	TotalPulse[LEFT] = 0;
 800b042:	4a1e      	ldr	r2, [pc, #120]	; (800b0bc <InitExplore+0x124>)
	TargetVelocity[BODY] = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	608b      	str	r3, [r1, #8]
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
 800b048:	491d      	ldr	r1, [pc, #116]	; (800b0c0 <InitExplore+0x128>)
	TargetAngularV = 0;
 800b04a:	6003      	str	r3, [r0, #0]
	Acceleration = 0;
 800b04c:	602b      	str	r3, [r5, #0]
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
 800b04e:	481d      	ldr	r0, [pc, #116]	; (800b0c4 <InitExplore+0x12c>)
	AngularAcceleration = 0;
 800b050:	6023      	str	r3, [r4, #0]
	PhotoDiff = 70;
 800b052:	4b1d      	ldr	r3, [pc, #116]	; (800b0c8 <InitExplore+0x130>)
 800b054:	4d1d      	ldr	r5, [pc, #116]	; (800b0cc <InitExplore+0x134>)
	TotalPulse[LEFT] = 0;
 800b056:	2400      	movs	r4, #0
 800b058:	6014      	str	r4, [r2, #0]
	TotalPulse[RIGHT] = 0;
 800b05a:	6054      	str	r4, [r2, #4]
	TotalPulse[BODY] = 0;
 800b05c:	6094      	str	r4, [r2, #8]
	TargetPhoto[SL] = 370;//439.600006;//THRESHOLD_SL;
 800b05e:	6088      	str	r0, [r1, #8]

	PIDReset(L_VELO_PID);
 800b060:	2004      	movs	r0, #4
	TargetPhoto[SR] = 300;//294.299988;//THRESHOLD_SR;
 800b062:	604e      	str	r6, [r1, #4]
	PhotoDiff = 70;
 800b064:	601d      	str	r5, [r3, #0]
	PIDReset(L_VELO_PID);
 800b066:	f003 fccd 	bl	800ea04 <PIDReset>
	PIDReset(R_VELO_PID);
 800b06a:	2005      	movs	r0, #5
 800b06c:	f003 fcca 	bl	800ea04 <PIDReset>

	PIDReset(A_VELO_PID);
 800b070:	4620      	mov	r0, r4
 800b072:	f003 fcc7 	bl	800ea04 <PIDReset>
	PIDReset(L_WALL_PID);
 800b076:	2002      	movs	r0, #2
 800b078:	f003 fcc4 	bl	800ea04 <PIDReset>
	PIDReset(R_WALL_PID);
 800b07c:	2003      	movs	r0, #3
 800b07e:	f003 fcc1 	bl	800ea04 <PIDReset>
	PIDReset(D_WALL_PID);
 800b082:	2001      	movs	r0, #1
}
 800b084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PIDReset(D_WALL_PID);
 800b088:	f003 bcbc 	b.w	800ea04 <PIDReset>
 800b08c:	08016db8 	.word	0x08016db8
 800b090:	2000020c 	.word	0x2000020c
 800b094:	43960000 	.word	0x43960000
 800b098:	200012c8 	.word	0x200012c8
 800b09c:	20000214 	.word	0x20000214
 800b0a0:	08016dd4 	.word	0x08016dd4
 800b0a4:	40000424 	.word	0x40000424
 800b0a8:	40000824 	.word	0x40000824
 800b0ac:	20001f6c 	.word	0x20001f6c
 800b0b0:	20001d24 	.word	0x20001d24
 800b0b4:	2000151c 	.word	0x2000151c
 800b0b8:	2000152c 	.word	0x2000152c
 800b0bc:	2000154c 	.word	0x2000154c
 800b0c0:	200015b0 	.word	0x200015b0
 800b0c4:	43b90000 	.word	0x43b90000
 800b0c8:	20001540 	.word	0x20001540
 800b0cc:	428c0000 	.word	0x428c0000

0800b0d0 <InitFastest>:

void InitFastest()
{
 800b0d0:	b538      	push	{r3, r4, r5, lr}
	Motor_PWM_Start();
 800b0d2:	f003 f8c1 	bl	800e258 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b0d6:	f003 f839 	bl	800e14c <EncoderStart>
	EmitterON();
 800b0da:	f003 f847 	bl	800e16c <EmitterON>
	ADCStart();
 800b0de:	f002 fda1 	bl	800dc24 <ADCStart>

	uint8_t imu_check;
	imu_check = IMU_init();
 800b0e2:	f002 ffef 	bl	800e0c4 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b0e6:	4c3a      	ldr	r4, [pc, #232]	; (800b1d0 <InitFastest+0x100>)

	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
 800b0e8:	4d3a      	ldr	r5, [pc, #232]	; (800b1d4 <InitFastest+0x104>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f008 f8ef 	bl	80132d0 <iprintf>
	imu_check =IMU_init();
 800b0f2:	f002 ffe7 	bl	800e0c4 <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f008 f8e9 	bl	80132d0 <iprintf>
	HAL_Delay(100);
 800b0fe:	2064      	movs	r0, #100	; 0x64
 800b100:	f003 fe2e 	bl	800ed60 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800b104:	2138      	movs	r1, #56	; 0x38
 800b106:	2037      	movs	r0, #55	; 0x37
 800b108:	f002 febe 	bl	800de88 <ReadIMU>
 800b10c:	4b32      	ldr	r3, [pc, #200]	; (800b1d8 <InitFastest+0x108>)
	Acceleration = 0;
	AngularAcceleration = 0;
 800b10e:	4c33      	ldr	r4, [pc, #204]	; (800b1dc <InitFastest+0x10c>)
	ZGyro = ReadIMU(0x37, 0x38);
 800b110:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b114:	6818      	ldr	r0, [r3, #0]
 800b116:	f7fd f94f 	bl	80083b8 <__aeabi_f2d>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4830      	ldr	r0, [pc, #192]	; (800b1e0 <InitFastest+0x110>)
 800b120:	f008 f8d6 	bl	80132d0 <iprintf>
	PIDChangeFlag(L_VELO_PID, 0);
 800b124:	2100      	movs	r1, #0
 800b126:	2004      	movs	r0, #4
 800b128:	f003 fc64 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b12c:	2100      	movs	r1, #0
 800b12e:	2005      	movs	r0, #5
 800b130:	f003 fc60 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b134:	2100      	movs	r1, #0
 800b136:	2002      	movs	r0, #2
 800b138:	f003 fc5c 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b13c:	2100      	movs	r1, #0
 800b13e:	2003      	movs	r0, #3
 800b140:	f003 fc58 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b144:	2100      	movs	r1, #0
 800b146:	2001      	movs	r0, #1
 800b148:	f003 fc54 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800b14c:	2100      	movs	r1, #0
 800b14e:	4608      	mov	r0, r1
 800b150:	f003 fc50 	bl	800e9f4 <PIDChangeFlag>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b154:	f247 512f 	movw	r1, #29999	; 0x752f
 800b158:	4822      	ldr	r0, [pc, #136]	; (800b1e4 <InitFastest+0x114>)
 800b15a:	f003 f907 	bl	800e36c <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b15e:	f247 512f 	movw	r1, #29999	; 0x752f
 800b162:	4821      	ldr	r0, [pc, #132]	; (800b1e8 <InitFastest+0x118>)
 800b164:	f003 f902 	bl	800e36c <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b168:	4820      	ldr	r0, [pc, #128]	; (800b1ec <InitFastest+0x11c>)
 800b16a:	f005 fbd1 	bl	8010910 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b16e:	4820      	ldr	r0, [pc, #128]	; (800b1f0 <InitFastest+0x120>)
 800b170:	f005 fbce 	bl	8010910 <HAL_TIM_Base_Start_IT>
	TargetVelocity[BODY] = 0;
 800b174:	4b1f      	ldr	r3, [pc, #124]	; (800b1f4 <InitFastest+0x124>)
	Acceleration = 0;
 800b176:	4820      	ldr	r0, [pc, #128]	; (800b1f8 <InitFastest+0x128>)
	TotalPulse[LEFT] = 0;
 800b178:	4920      	ldr	r1, [pc, #128]	; (800b1fc <InitFastest+0x12c>)
	TargetVelocity[BODY] = 0;
 800b17a:	2200      	movs	r2, #0
 800b17c:	609a      	str	r2, [r3, #8]
	TotalPulse[RIGHT] = 0;
	TotalPulse[BODY] = 0;

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	TargetPhoto[SL] = 370;//Photo[SL];
 800b17e:	4b20      	ldr	r3, [pc, #128]	; (800b200 <InitFastest+0x130>)
	TargetAngularV = 0;
 800b180:	602a      	str	r2, [r5, #0]
	Acceleration = 0;
 800b182:	6002      	str	r2, [r0, #0]
	TargetPhoto[SL] = 370;//Photo[SL];
 800b184:	4d1f      	ldr	r5, [pc, #124]	; (800b204 <InitFastest+0x134>)
	AngularAcceleration = 0;
 800b186:	6022      	str	r2, [r4, #0]
	TargetPhoto[SR] = 300;//Photo[SR];
 800b188:	481f      	ldr	r0, [pc, #124]	; (800b208 <InitFastest+0x138>)
	TotalPulse[LEFT] = 0;
 800b18a:	2400      	movs	r4, #0
 800b18c:	600c      	str	r4, [r1, #0]
	TotalPulse[RIGHT] = 0;
 800b18e:	604c      	str	r4, [r1, #4]
	TotalPulse[BODY] = 0;
 800b190:	608c      	str	r4, [r1, #8]
	TargetPhoto[SL] = 370;//Photo[SL];
 800b192:	609d      	str	r5, [r3, #8]
	TargetPhoto[SR] = 300;//Photo[SR];
 800b194:	6058      	str	r0, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b196:	edd3 7a02 	vldr	s15, [r3, #8]
 800b19a:	ed93 7a01 	vldr	s14, [r3, #4]
 800b19e:	4b1b      	ldr	r3, [pc, #108]	; (800b20c <InitFastest+0x13c>)
 800b1a0:	ee77 7ac7 	vsub.f32	s15, s15, s14

	PIDReset(L_VELO_PID);
 800b1a4:	2004      	movs	r0, #4
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b1a6:	edc3 7a00 	vstr	s15, [r3]
	PIDReset(L_VELO_PID);
 800b1aa:	f003 fc2b 	bl	800ea04 <PIDReset>
	PIDReset(R_VELO_PID);
 800b1ae:	2005      	movs	r0, #5
 800b1b0:	f003 fc28 	bl	800ea04 <PIDReset>
	PIDReset(A_VELO_PID);
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f003 fc25 	bl	800ea04 <PIDReset>
	PIDReset(L_WALL_PID);
 800b1ba:	2002      	movs	r0, #2
 800b1bc:	f003 fc22 	bl	800ea04 <PIDReset>
	PIDReset(R_WALL_PID);
 800b1c0:	2003      	movs	r0, #3
 800b1c2:	f003 fc1f 	bl	800ea04 <PIDReset>
	PIDReset(D_WALL_PID);
 800b1c6:	2001      	movs	r0, #1
}
 800b1c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800b1cc:	f003 bc1a 	b.w	800ea04 <PIDReset>
 800b1d0:	08016db8 	.word	0x08016db8
 800b1d4:	2000152c 	.word	0x2000152c
 800b1d8:	200012c8 	.word	0x200012c8
 800b1dc:	20000214 	.word	0x20000214
 800b1e0:	08016dd4 	.word	0x08016dd4
 800b1e4:	40000424 	.word	0x40000424
 800b1e8:	40000824 	.word	0x40000824
 800b1ec:	20001f6c 	.word	0x20001f6c
 800b1f0:	20001d24 	.word	0x20001d24
 800b1f4:	2000151c 	.word	0x2000151c
 800b1f8:	2000020c 	.word	0x2000020c
 800b1fc:	2000154c 	.word	0x2000154c
 800b200:	200015b0 	.word	0x200015b0
 800b204:	43b90000 	.word	0x43b90000
 800b208:	43960000 	.word	0x43960000
 800b20c:	20001540 	.word	0x20001540

0800b210 <Debug>:
void Debug()
{
 800b210:	b538      	push	{r3, r4, r5, lr}
	//テストする
	InitExplore();
	TotalPulse[RIGHT] = 0;
 800b212:	4d17      	ldr	r5, [pc, #92]	; (800b270 <Debug+0x60>)
	InitExplore();
 800b214:	f7ff fec0 	bl	800af98 <InitExplore>
	TotalPulse[RIGHT] = 0;
 800b218:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800b21a:	2101      	movs	r1, #1
 800b21c:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b21e:	606c      	str	r4, [r5, #4]
	TotalPulse[LEFT] = 0;
 800b220:	602c      	str	r4, [r5, #0]
	TotalPulse[BODY] = 0;
 800b222:	60ac      	str	r4, [r5, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b224:	f003 fbe6 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b228:	2101      	movs	r1, #1
 800b22a:	2005      	movs	r0, #5
 800b22c:	f003 fbe2 	bl	800e9f4 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b230:	68a9      	ldr	r1, [r5, #8]
 800b232:	4810      	ldr	r0, [pc, #64]	; (800b274 <Debug+0x64>)
 800b234:	682a      	ldr	r2, [r5, #0]
 800b236:	686b      	ldr	r3, [r5, #4]
 800b238:	f008 f84a 	bl	80132d0 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800b23c:	4621      	mov	r1, r4
 800b23e:	2001      	movs	r0, #1
 800b240:	f003 fbd8 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b244:	4621      	mov	r1, r4
 800b246:	2002      	movs	r0, #2
 800b248:	f003 fbd4 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b24c:	4621      	mov	r1, r4
 800b24e:	2003      	movs	r0, #3
 800b250:	f003 fbd0 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800b254:	4620      	mov	r0, r4
 800b256:	2101      	movs	r1, #1
 800b258:	f003 fbcc 	bl	800e9f4 <PIDChangeFlag>
	ExploreVelocity=0;
 800b25c:	4b06      	ldr	r3, [pc, #24]	; (800b278 <Debug+0x68>)
 800b25e:	2200      	movs	r2, #0
	ChangeLED(3);
 800b260:	2003      	movs	r0, #3
	ExploreVelocity=0;
 800b262:	601a      	str	r2, [r3, #0]
	ChangeLED(3);
 800b264:	f002 ff9e 	bl	800e1a4 <ChangeLED>
	//HAL_Delay(500);

	//IT_mode = WRITINGFREE;
	IT_mode = EXPLORE;
 800b268:	4b04      	ldr	r3, [pc, #16]	; (800b27c <Debug+0x6c>)
 800b26a:	2206      	movs	r2, #6
 800b26c:	601a      	str	r2, [r3, #0]

}
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	2000154c 	.word	0x2000154c
 800b274:	08016d00 	.word	0x08016d00
 800b278:	200015a0 	.word	0x200015a0
 800b27c:	2000150c 	.word	0x2000150c

0800b280 <ParameterSetting>:
void ParameterSetting()
{
 800b280:	b508      	push	{r3, lr}
	Load_Gain();
 800b282:	f003 f943 	bl	800e50c <Load_Gain>
	Change_Gain();

}
 800b286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Change_Gain();
 800b28a:	f003 ba19 	b.w	800e6c0 <Change_Gain>
 800b28e:	bf00      	nop

0800b290 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800b290:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800b292:	4b14      	ldr	r3, [pc, #80]	; (800b2e4 <GainTestRWall+0x54>)
 800b294:	2206      	movs	r2, #6
 800b296:	601a      	str	r2, [r3, #0]
	InitExplore();
 800b298:	f7ff fe7e 	bl	800af98 <InitExplore>
	TotalPulse[RIGHT] = 0;
 800b29c:	4b12      	ldr	r3, [pc, #72]	; (800b2e8 <GainTestRWall+0x58>)
 800b29e:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800b2a0:	2101      	movs	r1, #1
 800b2a2:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b2a4:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b2a6:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800b2a8:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b2aa:	f003 fba3 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	2005      	movs	r0, #5
 800b2b2:	f003 fb9f 	bl	800e9f4 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	2001      	movs	r0, #1
 800b2ba:	f003 fb9b 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b2be:	4629      	mov	r1, r5
 800b2c0:	2002      	movs	r0, #2
 800b2c2:	f003 fb97 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	2003      	movs	r0, #3
 800b2ca:	f003 fb93 	bl	800e9f4 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800b2ce:	4b07      	ldr	r3, [pc, #28]	; (800b2ec <GainTestRWall+0x5c>)
 800b2d0:	2400      	movs	r4, #0
	ChangeLED(1);
 800b2d2:	2001      	movs	r0, #1
	ExploreVelocity=0;
 800b2d4:	601c      	str	r4, [r3, #0]
	ChangeLED(1);
 800b2d6:	f002 ff65 	bl	800e1a4 <ChangeLED>
 800b2da:	4a05      	ldr	r2, [pc, #20]	; (800b2f0 <GainTestRWall+0x60>)
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800b2dc:	4623      	mov	r3, r4
 800b2de:	6093      	str	r3, [r2, #8]
 800b2e0:	e7fd      	b.n	800b2de <GainTestRWall+0x4e>
 800b2e2:	bf00      	nop
 800b2e4:	2000150c 	.word	0x2000150c
 800b2e8:	2000154c 	.word	0x2000154c
 800b2ec:	200015a0 	.word	0x200015a0
 800b2f0:	2000151c 	.word	0x2000151c

0800b2f4 <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800b2f4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	IT_mode = EXPLORE;
 800b2f8:	4b26      	ldr	r3, [pc, #152]	; (800b394 <GainTestDWall+0xa0>)
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800b2fa:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800b398 <GainTestDWall+0xa4>
 800b2fe:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 800b3a8 <GainTestDWall+0xb4>
 800b302:	4c26      	ldr	r4, [pc, #152]	; (800b39c <GainTestDWall+0xa8>)
	ChangeLED(2);
	while(1)
	{
		TargetVelocity[BODY] = 0;
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800b304:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 800b3ac <GainTestDWall+0xb8>
	IT_mode = EXPLORE;
 800b308:	2206      	movs	r2, #6
{
 800b30a:	b087      	sub	sp, #28
	IT_mode = EXPLORE;
 800b30c:	601a      	str	r2, [r3, #0]
	InitExplore();
 800b30e:	f7ff fe43 	bl	800af98 <InitExplore>
	TotalPulse[RIGHT] = 0;
 800b312:	4b23      	ldr	r3, [pc, #140]	; (800b3a0 <GainTestDWall+0xac>)
 800b314:	2500      	movs	r5, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800b316:	2101      	movs	r1, #1
 800b318:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b31a:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b31c:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800b31e:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b320:	f003 fb68 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b324:	2101      	movs	r1, #1
 800b326:	2005      	movs	r0, #5
 800b328:	f003 fb64 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 1);
 800b32c:	2101      	movs	r1, #1
 800b32e:	4608      	mov	r0, r1
 800b330:	f003 fb60 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b334:	4629      	mov	r1, r5
 800b336:	2002      	movs	r0, #2
 800b338:	f003 fb5c 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b33c:	2003      	movs	r0, #3
 800b33e:	4629      	mov	r1, r5
 800b340:	f003 fb58 	bl	800e9f4 <PIDChangeFlag>
	ExploreVelocity=0;
 800b344:	4b17      	ldr	r3, [pc, #92]	; (800b3a4 <GainTestDWall+0xb0>)
	ChangeLED(2);
 800b346:	2002      	movs	r0, #2
	ExploreVelocity=0;
 800b348:	ed83 8a00 	vstr	s16, [r3]
	ChangeLED(2);
 800b34c:	f002 ff2a 	bl	800e1a4 <ChangeLED>
		TargetVelocity[BODY] = 0;
 800b350:	ed8b 8a02 	vstr	s16, [fp, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800b354:	6820      	ldr	r0, [r4, #0]
 800b356:	68e5      	ldr	r5, [r4, #12]
 800b358:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800b35c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b360:	f7fd f82a 	bl	80083b8 <__aeabi_f2d>
 800b364:	4606      	mov	r6, r0
 800b366:	4648      	mov	r0, r9
 800b368:	460f      	mov	r7, r1
 800b36a:	f7fd f825 	bl	80083b8 <__aeabi_f2d>
 800b36e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b372:	4640      	mov	r0, r8
 800b374:	f7fd f820 	bl	80083b8 <__aeabi_f2d>
 800b378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b37c:	4628      	mov	r0, r5
 800b37e:	f7fd f81b 	bl	80083b8 <__aeabi_f2d>
 800b382:	4632      	mov	r2, r6
 800b384:	e9cd 0100 	strd	r0, r1, [sp]
 800b388:	463b      	mov	r3, r7
 800b38a:	4650      	mov	r0, sl
 800b38c:	f007 ffa0 	bl	80132d0 <iprintf>
 800b390:	e7de      	b.n	800b350 <GainTestDWall+0x5c>
 800b392:	bf00      	nop
 800b394:	2000150c 	.word	0x2000150c
 800b398:	00000000 	.word	0x00000000
 800b39c:	2000158c 	.word	0x2000158c
 800b3a0:	2000154c 	.word	0x2000154c
 800b3a4:	200015a0 	.word	0x200015a0
 800b3a8:	2000151c 	.word	0x2000151c
 800b3ac:	08016d88 	.word	0x08016d88

0800b3b0 <GainTestAVelo>:
	}
}

void GainTestAVelo()
{
 800b3b0:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800b3b2:	4b16      	ldr	r3, [pc, #88]	; (800b40c <GainTestAVelo+0x5c>)
 800b3b4:	2206      	movs	r2, #6
 800b3b6:	601a      	str	r2, [r3, #0]
	InitExplore();
 800b3b8:	f7ff fdee 	bl	800af98 <InitExplore>
	TotalPulse[RIGHT] = 0;
 800b3bc:	4b14      	ldr	r3, [pc, #80]	; (800b410 <GainTestAVelo+0x60>)
 800b3be:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b3c4:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b3c6:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800b3c8:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b3ca:	f003 fb13 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	2005      	movs	r0, #5
 800b3d2:	f003 fb0f 	bl	800e9f4 <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	2101      	movs	r1, #1
 800b3da:	f003 fb0b 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b3de:	4621      	mov	r1, r4
 800b3e0:	2001      	movs	r0, #1
 800b3e2:	f003 fb07 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	2002      	movs	r0, #2
 800b3ea:	f003 fb03 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	2003      	movs	r0, #3
 800b3f2:	f003 faff 	bl	800e9f4 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800b3f6:	4b07      	ldr	r3, [pc, #28]	; (800b414 <GainTestAVelo+0x64>)
 800b3f8:	2200      	movs	r2, #0
	ChangeLED(5);
 800b3fa:	2005      	movs	r0, #5
	ExploreVelocity=0;
 800b3fc:	601a      	str	r2, [r3, #0]
	ChangeLED(5);
 800b3fe:	f002 fed1 	bl	800e1a4 <ChangeLED>
 800b402:	4a05      	ldr	r2, [pc, #20]	; (800b418 <GainTestAVelo+0x68>)
	while(1)
	{
		TargetVelocity[BODY] = 700;
 800b404:	4b05      	ldr	r3, [pc, #20]	; (800b41c <GainTestAVelo+0x6c>)
 800b406:	6093      	str	r3, [r2, #8]
 800b408:	e7fd      	b.n	800b406 <GainTestAVelo+0x56>
 800b40a:	bf00      	nop
 800b40c:	2000150c 	.word	0x2000150c
 800b410:	2000154c 	.word	0x2000154c
 800b414:	200015a0 	.word	0x200015a0
 800b418:	2000151c 	.word	0x2000151c
 800b41c:	442f0000 	.word	0x442f0000

0800b420 <WritingFree>:

	}
}
void WritingFree()
{
	IT_mode = WRITINGFREE;
 800b420:	4e23      	ldr	r6, [pc, #140]	; (800b4b0 <WritingFree+0x90>)
	PIDChangeFlag(D_WALL_PID, 0);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	IT_mode = EXPLORE;
	PIDChangeFlag(A_VELO_PID, 1);
	ExploreVelocity=0;
 800b422:	ed9f 8a24 	vldr	s16, [pc, #144]	; 800b4b4 <WritingFree+0x94>
{
 800b426:	b508      	push	{r3, lr}
	IT_mode = WRITINGFREE;
 800b428:	2507      	movs	r5, #7
 800b42a:	6035      	str	r5, [r6, #0]
	InitExplore();
 800b42c:	f7ff fdb4 	bl	800af98 <InitExplore>
	printf("3\r\n");
 800b430:	4821      	ldr	r0, [pc, #132]	; (800b4b8 <WritingFree+0x98>)
 800b432:	f007 ffd5 	bl	80133e0 <puts>
	printf("4\r\n");
 800b436:	4821      	ldr	r0, [pc, #132]	; (800b4bc <WritingFree+0x9c>)
 800b438:	f007 ffd2 	bl	80133e0 <puts>
	TotalPulse[RIGHT] = 0;
 800b43c:	4b20      	ldr	r3, [pc, #128]	; (800b4c0 <WritingFree+0xa0>)
 800b43e:	2400      	movs	r4, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800b440:	2101      	movs	r1, #1
 800b442:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b444:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b446:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800b448:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b44a:	f003 fad3 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b44e:	2101      	movs	r1, #1
 800b450:	2005      	movs	r0, #5
 800b452:	f003 facf 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b456:	4621      	mov	r1, r4
 800b458:	2001      	movs	r0, #1
 800b45a:	f003 facb 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b45e:	4621      	mov	r1, r4
 800b460:	2002      	movs	r0, #2
 800b462:	f003 fac7 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b466:	4621      	mov	r1, r4
 800b468:	2003      	movs	r0, #3
 800b46a:	f003 fac3 	bl	800e9f4 <PIDChangeFlag>
	IT_mode = EXPLORE;
 800b46e:	2306      	movs	r3, #6
	PIDChangeFlag(A_VELO_PID, 1);
 800b470:	2101      	movs	r1, #1
 800b472:	4620      	mov	r0, r4
	IT_mode = EXPLORE;
 800b474:	6033      	str	r3, [r6, #0]
	PIDChangeFlag(A_VELO_PID, 1);
 800b476:	f003 fabd 	bl	800e9f4 <PIDChangeFlag>
	ExploreVelocity=0;
 800b47a:	4b12      	ldr	r3, [pc, #72]	; (800b4c4 <WritingFree+0xa4>)
	ChangeLED(7);
 800b47c:	4628      	mov	r0, r5
	ExploreVelocity=0;
 800b47e:	ed83 8a00 	vstr	s16, [r3]
	ChangeLED(7);
 800b482:	f002 fe8f 	bl	800e1a4 <ChangeLED>
	FastStraight(0.5, 8, 1.0, -1.0, 4000, 0);
 800b486:	eef0 2a48 	vmov.f32	s5, s16
 800b48a:	ed9f 2a0f 	vldr	s4, [pc, #60]	; 800b4c8 <WritingFree+0xa8>
 800b48e:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800b492:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800b496:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b49a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800b49e:	f002 f929 	bl	800d6f4 <FastStraight>
 800b4a2:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <WritingFree+0xac>)
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800b4a4:	eef0 7a48 	vmov.f32	s15, s16
 800b4a8:	edc3 7a02 	vstr	s15, [r3, #8]
 800b4ac:	e7fc      	b.n	800b4a8 <WritingFree+0x88>
 800b4ae:	bf00      	nop
 800b4b0:	2000150c 	.word	0x2000150c
 800b4b4:	00000000 	.word	0x00000000
 800b4b8:	08016de0 	.word	0x08016de0
 800b4bc:	08016de4 	.word	0x08016de4
 800b4c0:	2000154c 	.word	0x2000154c
 800b4c4:	200015a0 	.word	0x200015a0
 800b4c8:	457a0000 	.word	0x457a0000
 800b4cc:	2000151c 	.word	0x2000151c

0800b4d0 <FastestRun>:
	Sla.Theta1 = 30*M_PI/180;
	Sla.Theta2 = 60*M_PI/180;
	Sla.Theta3 = 90*M_PI/180;
}
void FastestRun()
{
 800b4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d4:	ed2d 8b02 	vpush	{d8}
	IT_mode = EXPLORE;
 800b4d8:	4b91      	ldr	r3, [pc, #580]	; (800b720 <FastestRun+0x250>)



//	wall_init();

	TotalPulse[RIGHT] = 0;
 800b4da:	4e92      	ldr	r6, [pc, #584]	; (800b724 <FastestRun+0x254>)
{
 800b4dc:	b084      	sub	sp, #16
	IT_mode = EXPLORE;
 800b4de:	2206      	movs	r2, #6
	HAL_Delay(100);
 800b4e0:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800b4e2:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800b4e4:	f003 fc3c 	bl	800ed60 <HAL_Delay>
	int8_t mode=1;
 800b4e8:	aa04      	add	r2, sp, #16
 800b4ea:	2501      	movs	r5, #1
 800b4ec:	f802 5d02 	strb.w	r5, [r2, #-2]!
	  ModeSelect( 1, 2, &mode);
 800b4f0:	2102      	movs	r1, #2
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f003 fb58 	bl	800eba8 <ModeSelect>
	  Signal( mode );
 800b4f8:	f99d 000e 	ldrsb.w	r0, [sp, #14]
 800b4fc:	f003 fae8 	bl	800ead0 <Signal>
		HAL_Delay(100);
 800b500:	2064      	movs	r0, #100	; 0x64
 800b502:	f003 fc2d 	bl	800ed60 <HAL_Delay>
		  int8_t mode2=1;
 800b506:	aa04      	add	r2, sp, #16
		  ModeSelect( 1, 4, &mode2);
 800b508:	2104      	movs	r1, #4
		  int8_t mode2=1;
 800b50a:	f802 5d01 	strb.w	r5, [r2, #-1]!
		  ModeSelect( 1, 4, &mode2);
 800b50e:	4628      	mov	r0, r5
 800b510:	f003 fb4a 	bl	800eba8 <ModeSelect>
		  Signal( mode2 );
 800b514:	f99d 000f 	ldrsb.w	r0, [sp, #15]
	TotalPulse[RIGHT] = 0;
 800b518:	2400      	movs	r4, #0
		  Signal( mode2 );
 800b51a:	f003 fad9 	bl	800ead0 <Signal>
		  PhotoSwitch();
 800b51e:	f003 fb19 	bl	800eb54 <PhotoSwitch>
	InitFastest();
 800b522:	f7ff fdd5 	bl	800b0d0 <InitFastest>
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800b526:	4629      	mov	r1, r5
 800b528:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b52a:	6074      	str	r4, [r6, #4]
	TotalPulse[LEFT] = 0;
 800b52c:	6034      	str	r4, [r6, #0]
	TotalPulse[BODY] = 0;
 800b52e:	60b4      	str	r4, [r6, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b530:	f003 fa60 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b534:	4629      	mov	r1, r5
 800b536:	2005      	movs	r0, #5
 800b538:	f003 fa5c 	bl	800e9f4 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b53c:	68b1      	ldr	r1, [r6, #8]
 800b53e:	487a      	ldr	r0, [pc, #488]	; (800b728 <FastestRun+0x258>)
 800b540:	6832      	ldr	r2, [r6, #0]
 800b542:	6873      	ldr	r3, [r6, #4]
 800b544:	f007 fec4 	bl	80132d0 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800b548:	4621      	mov	r1, r4
 800b54a:	4628      	mov	r0, r5
 800b54c:	f003 fa52 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b550:	4621      	mov	r1, r4
 800b552:	2002      	movs	r0, #2
 800b554:	f003 fa4e 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b558:	4621      	mov	r1, r4
 800b55a:	2003      	movs	r0, #3
 800b55c:	f003 fa4a 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800b560:	4621      	mov	r1, r4
 800b562:	4620      	mov	r0, r4
 800b564:	f003 fa46 	bl	800e9f4 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode = 'T';
	if(mode == 1)
 800b568:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800b56c:	42ab      	cmp	r3, r5
	{
		ExploreVelocity = 400;
 800b56e:	4b6f      	ldr	r3, [pc, #444]	; (800b72c <FastestRun+0x25c>)
 800b570:	bf04      	itt	eq
 800b572:	4a6f      	ldreq	r2, [pc, #444]	; (800b730 <FastestRun+0x260>)
 800b574:	601a      	streq	r2, [r3, #0]
	else if(mode == 2)
	{
		turn_mode = 'S';
	}

	switch(mode2)
 800b576:	f99d 200f 	ldrsb.w	r2, [sp, #15]
 800b57a:	3a01      	subs	r2, #1
 800b57c:	2a03      	cmp	r2, #3
 800b57e:	d803      	bhi.n	800b588 <FastestRun+0xb8>
 800b580:	e8df f002 	tbb	[pc, r2]
 800b584:	9da9b4bd 	.word	0x9da9b4bd
 800b588:	4d6a      	ldr	r5, [pc, #424]	; (800b734 <FastestRun+0x264>)
	Sla.Pre *=  2/MM_PER_PULSE;
 800b58a:	6828      	ldr	r0, [r5, #0]

	}
	initSlalomParam();
	ChangeLED(4);

	VelocityMax = false;
 800b58c:	4e6a      	ldr	r6, [pc, #424]	; (800b738 <FastestRun+0x268>)
	SearchOrFast = 1;
	Calc = SearchOrFast;
	//走る
	goal_edge_num = GOAL_SIZE_X;

	TargetVelocity[BODY] = 0;
 800b58e:	ed9f 8a6b 	vldr	s16, [pc, #428]	; 800b73c <FastestRun+0x26c>
 800b592:	4c6b      	ldr	r4, [pc, #428]	; (800b740 <FastestRun+0x270>)
 800b594:	f8df 8218 	ldr.w	r8, [pc, #536]	; 800b7b0 <FastestRun+0x2e0>
	//終了合図
	Signal(7);

	while(1)
	{
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",Num_Nodes, my_map.RawNode[0][1].weight);
 800b598:	4f6a      	ldr	r7, [pc, #424]	; (800b744 <FastestRun+0x274>)
	Sla.Pre *=  2/MM_PER_PULSE;
 800b59a:	f7fc ff0d 	bl	80083b8 <__aeabi_f2d>
 800b59e:	a35e      	add	r3, pc, #376	; (adr r3, 800b718 <FastestRun+0x248>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	f7fc ff60 	bl	8008468 <__aeabi_dmul>
 800b5a8:	f7fd fa56 	bl	8008a58 <__aeabi_d2f>
 800b5ac:	6028      	str	r0, [r5, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800b5ae:	6868      	ldr	r0, [r5, #4]
 800b5b0:	f7fc ff02 	bl	80083b8 <__aeabi_f2d>
 800b5b4:	a358      	add	r3, pc, #352	; (adr r3, 800b718 <FastestRun+0x248>)
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	f7fc ff55 	bl	8008468 <__aeabi_dmul>
 800b5be:	f7fd fa4b 	bl	8008a58 <__aeabi_d2f>
	Sla.Theta1 = 30*M_PI/180;
 800b5c2:	4961      	ldr	r1, [pc, #388]	; (800b748 <FastestRun+0x278>)
	Sla.Theta2 = 60*M_PI/180;
 800b5c4:	4a61      	ldr	r2, [pc, #388]	; (800b74c <FastestRun+0x27c>)
	Sla.Theta3 = 90*M_PI/180;
 800b5c6:	4b62      	ldr	r3, [pc, #392]	; (800b750 <FastestRun+0x280>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800b5c8:	6068      	str	r0, [r5, #4]
	ChangeLED(4);
 800b5ca:	2004      	movs	r0, #4
	VelocityMax = false;
 800b5cc:	f04f 0900 	mov.w	r9, #0
	Sla.Theta1 = 30*M_PI/180;
 800b5d0:	6129      	str	r1, [r5, #16]
	Sla.Theta2 = 60*M_PI/180;
 800b5d2:	616a      	str	r2, [r5, #20]
	Sla.Theta3 = 90*M_PI/180;
 800b5d4:	61ab      	str	r3, [r5, #24]
	ChangeLED(4);
 800b5d6:	f002 fde5 	bl	800e1a4 <ChangeLED>
	SearchOrFast = 1;
 800b5da:	4b5e      	ldr	r3, [pc, #376]	; (800b754 <FastestRun+0x284>)
	VelocityMax = false;
 800b5dc:	f886 9000 	strb.w	r9, [r6]
	SearchOrFast = 1;
 800b5e0:	2601      	movs	r6, #1
 800b5e2:	601e      	str	r6, [r3, #0]
	Calc = SearchOrFast;
 800b5e4:	495c      	ldr	r1, [pc, #368]	; (800b758 <FastestRun+0x288>)
	TargetVelocity[BODY] = 0;
 800b5e6:	4a5d      	ldr	r2, [pc, #372]	; (800b75c <FastestRun+0x28c>)
	Calc = SearchOrFast;
 800b5e8:	681b      	ldr	r3, [r3, #0]
	Acceleration = 0;
 800b5ea:	4d5d      	ldr	r5, [pc, #372]	; (800b760 <FastestRun+0x290>)
	TargetAngularV = 0;
 800b5ec:	485d      	ldr	r0, [pc, #372]	; (800b764 <FastestRun+0x294>)
	Calc = SearchOrFast;
 800b5ee:	600b      	str	r3, [r1, #0]
	Angle = 0;
 800b5f0:	4b5d      	ldr	r3, [pc, #372]	; (800b768 <FastestRun+0x298>)
	TargetAngle = 0;
 800b5f2:	495e      	ldr	r1, [pc, #376]	; (800b76c <FastestRun+0x29c>)
	TargetVelocity[BODY] = 0;
 800b5f4:	ed82 8a02 	vstr	s16, [r2, #8]
	goal_edge_num = GOAL_SIZE_X;
 800b5f8:	4a5d      	ldr	r2, [pc, #372]	; (800b770 <FastestRun+0x2a0>)
	Acceleration = 0;
 800b5fa:	ed85 8a00 	vstr	s16, [r5]
	goal_edge_num = GOAL_SIZE_X;
 800b5fe:	2502      	movs	r5, #2
	TargetAngularV = 0;
 800b600:	ed80 8a00 	vstr	s16, [r0]
	PIDReset(L_VELO_PID);
 800b604:	2004      	movs	r0, #4
	goal_edge_num = GOAL_SIZE_X;
 800b606:	7015      	strb	r5, [r2, #0]
	TargetAngle = 0;
 800b608:	ed81 8a00 	vstr	s16, [r1]
	Angle = 0;
 800b60c:	ed83 8a00 	vstr	s16, [r3]
	PIDReset(L_VELO_PID);
 800b610:	f003 f9f8 	bl	800ea04 <PIDReset>
	PIDReset(R_VELO_PID);
 800b614:	2005      	movs	r0, #5
 800b616:	f003 f9f5 	bl	800ea04 <PIDReset>
	PIDReset(A_VELO_PID);
 800b61a:	4648      	mov	r0, r9
 800b61c:	f003 f9f2 	bl	800ea04 <PIDReset>
	PIDReset(L_WALL_PID);
 800b620:	4628      	mov	r0, r5
 800b622:	f003 f9ef 	bl	800ea04 <PIDReset>
	PIDReset(R_WALL_PID);
 800b626:	2003      	movs	r0, #3
 800b628:	f003 f9ec 	bl	800ea04 <PIDReset>
	PIDReset(D_WALL_PID);
 800b62c:	4630      	mov	r0, r6
 800b62e:	f003 f9e9 	bl	800ea04 <PIDReset>
	initSearchData(&my_map, &my_mouse);
 800b632:	4950      	ldr	r1, [pc, #320]	; (800b774 <FastestRun+0x2a4>)
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800b634:	4e50      	ldr	r6, [pc, #320]	; (800b778 <FastestRun+0x2a8>)
	initSearchData(&my_map, &my_mouse);
 800b636:	4620      	mov	r0, r4
 800b638:	f001 fd38 	bl	800d0ac <initSearchData>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800b63c:	f04f 0a03 	mov.w	sl, #3
	flashCopyNodesToRam(&my_map); //existenceだけ
 800b640:	4620      	mov	r0, r4
 800b642:	f000 fa35 	bl	800bab0 <flashCopyNodesToRam>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800b646:	462b      	mov	r3, r5
 800b648:	464a      	mov	r2, r9
 800b64a:	9500      	str	r5, [sp, #0]
 800b64c:	2106      	movs	r1, #6
 800b64e:	4620      	mov	r0, r4
 800b650:	f8cd a004 	str.w	sl, [sp, #4]
 800b654:	f7ff f98c 	bl	800a970 <updateAllNodeWeight>
	getPathNode(&my_map, &my_mouse);
 800b658:	4946      	ldr	r1, [pc, #280]	; (800b774 <FastestRun+0x2a4>)
 800b65a:	4620      	mov	r0, r4
 800b65c:	f001 ff2e 	bl	800d4bc <getPathNode>
	getPathAction(&my_mouse);
 800b660:	4844      	ldr	r0, [pc, #272]	; (800b774 <FastestRun+0x2a4>)
 800b662:	f001 ff97 	bl	800d594 <getPathAction>
	HAL_Delay(200);
 800b666:	20c8      	movs	r0, #200	; 0xc8
 800b668:	f003 fb7a 	bl	800ed60 <HAL_Delay>
	initSearchData(&my_map, &my_mouse);
 800b66c:	4941      	ldr	r1, [pc, #260]	; (800b774 <FastestRun+0x2a4>)
 800b66e:	4620      	mov	r0, r4
 800b670:	f001 fd1c 	bl	800d0ac <initSearchData>
	flashCopyNodesToRam(&my_map); //existenceだけ
 800b674:	4620      	mov	r0, r4
 800b676:	f000 fa1b 	bl	800bab0 <flashCopyNodesToRam>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800b67a:	462b      	mov	r3, r5
 800b67c:	464a      	mov	r2, r9
 800b67e:	e9cd 5a00 	strd	r5, sl, [sp]
 800b682:	2106      	movs	r1, #6
 800b684:	4620      	mov	r0, r4
 800b686:	f7ff f973 	bl	800a970 <updateAllNodeWeight>
	MaxParaRunTest(&my_map, &my_mouse);
 800b68a:	f1a6 0108 	sub.w	r1, r6, #8
 800b68e:	4620      	mov	r0, r4
 800b690:	f002 f9ae 	bl	800d9f0 <MaxParaRunTest>
	Decel(45,0);
 800b694:	eef0 0a48 	vmov.f32	s1, s16
 800b698:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800b77c <FastestRun+0x2ac>
 800b69c:	f7fe f90c 	bl	80098b8 <Decel>
	Signal(7);
 800b6a0:	2007      	movs	r0, #7
 800b6a2:	f003 fa15 	bl	800ead0 <Signal>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800b6a6:	4625      	mov	r5, r4
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",Num_Nodes, my_map.RawNode[0][1].weight);
 800b6a8:	f8d8 1000 	ldr.w	r1, [r8]
 800b6ac:	8962      	ldrh	r2, [r4, #10]
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	f007 fe0e 	bl	80132d0 <iprintf>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800b6b4:	4631      	mov	r1, r6
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	f7ff faf6 	bl	800aca8 <printAllWeight>
 800b6bc:	e7f4      	b.n	800b6a8 <FastestRun+0x1d8>
		Sla.Pre = 2;
 800b6be:	4d1d      	ldr	r5, [pc, #116]	; (800b734 <FastestRun+0x264>)
		ExploreVelocity=240;
 800b6c0:	492f      	ldr	r1, [pc, #188]	; (800b780 <FastestRun+0x2b0>)
 800b6c2:	6019      	str	r1, [r3, #0]
		Sla.Alpha = 0.078;
 800b6c4:	4a2f      	ldr	r2, [pc, #188]	; (800b784 <FastestRun+0x2b4>)
 800b6c6:	60aa      	str	r2, [r5, #8]
		Sla.Pre = 2;
 800b6c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		Sla.Fol = 16;
 800b6cc:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
		Sla.Pre = 2;
 800b6d0:	6029      	str	r1, [r5, #0]
		Sla.Fol = 16;
 800b6d2:	606b      	str	r3, [r5, #4]
		break;
 800b6d4:	e759      	b.n	800b58a <FastestRun+0xba>
		Sla.Pre = 2;
 800b6d6:	4d17      	ldr	r5, [pc, #92]	; (800b734 <FastestRun+0x264>)
		ExploreVelocity=180;
 800b6d8:	492b      	ldr	r1, [pc, #172]	; (800b788 <FastestRun+0x2b8>)
 800b6da:	6019      	str	r1, [r3, #0]
		Sla.Alpha = 0.04;
 800b6dc:	4a2b      	ldr	r2, [pc, #172]	; (800b78c <FastestRun+0x2bc>)
		Sla.Fol = 3.5;
 800b6de:	4b2c      	ldr	r3, [pc, #176]	; (800b790 <FastestRun+0x2c0>)
 800b6e0:	606b      	str	r3, [r5, #4]
		Sla.Pre = 2;
 800b6e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b6e6:	6029      	str	r1, [r5, #0]
		Sla.Alpha = 0.04;
 800b6e8:	60aa      	str	r2, [r5, #8]
		break;
 800b6ea:	e74e      	b.n	800b58a <FastestRun+0xba>
		Sla.Pre = 5;
 800b6ec:	4d11      	ldr	r5, [pc, #68]	; (800b734 <FastestRun+0x264>)
		ExploreVelocity=135;
 800b6ee:	4929      	ldr	r1, [pc, #164]	; (800b794 <FastestRun+0x2c4>)
		Sla.Alpha = 0.0273;
 800b6f0:	4a29      	ldr	r2, [pc, #164]	; (800b798 <FastestRun+0x2c8>)
		ExploreVelocity=135;
 800b6f2:	6019      	str	r1, [r3, #0]
		Sla.Pre = 5;
 800b6f4:	4b29      	ldr	r3, [pc, #164]	; (800b79c <FastestRun+0x2cc>)
		Sla.Alpha = 0.0273;
 800b6f6:	60aa      	str	r2, [r5, #8]
		Sla.Pre = 5;
 800b6f8:	602b      	str	r3, [r5, #0]
		Sla.Fol = 5;
 800b6fa:	606b      	str	r3, [r5, #4]
		break;
 800b6fc:	e745      	b.n	800b58a <FastestRun+0xba>
		Sla.Pre = 7;//9;
 800b6fe:	4d0d      	ldr	r5, [pc, #52]	; (800b734 <FastestRun+0x264>)
		ExploreVelocity=90;
 800b700:	4927      	ldr	r1, [pc, #156]	; (800b7a0 <FastestRun+0x2d0>)
 800b702:	6019      	str	r1, [r3, #0]
		Sla.Alpha = 0.014;
 800b704:	4a27      	ldr	r2, [pc, #156]	; (800b7a4 <FastestRun+0x2d4>)
		Sla.Pre = 7;//9;
 800b706:	4928      	ldr	r1, [pc, #160]	; (800b7a8 <FastestRun+0x2d8>)
		Sla.Fol = 11;//13;
 800b708:	4b28      	ldr	r3, [pc, #160]	; (800b7ac <FastestRun+0x2dc>)
		Sla.Pre = 7;//9;
 800b70a:	6029      	str	r1, [r5, #0]
		Sla.Fol = 11;//13;
 800b70c:	606b      	str	r3, [r5, #4]
		Sla.Alpha = 0.014;
 800b70e:	60aa      	str	r2, [r5, #8]
		break;
 800b710:	e73b      	b.n	800b58a <FastestRun+0xba>
 800b712:	bf00      	nop
 800b714:	f3af 8000 	nop.w
 800b718:	e4b6c58e 	.word	0xe4b6c58e
 800b71c:	409fb8f9 	.word	0x409fb8f9
 800b720:	2000150c 	.word	0x2000150c
 800b724:	2000154c 	.word	0x2000154c
 800b728:	08016d00 	.word	0x08016d00
 800b72c:	200015a0 	.word	0x200015a0
 800b730:	43c80000 	.word	0x43c80000
 800b734:	20001564 	.word	0x20001564
 800b738:	2000159c 	.word	0x2000159c
 800b73c:	00000000 	.word	0x00000000
 800b740:	20001784 	.word	0x20001784
 800b744:	08016d34 	.word	0x08016d34
 800b748:	3f060a92 	.word	0x3f060a92
 800b74c:	3f860a92 	.word	0x3f860a92
 800b750:	3fc90fdb 	.word	0x3fc90fdb
 800b754:	200015a8 	.word	0x200015a8
 800b758:	200015c8 	.word	0x200015c8
 800b75c:	2000151c 	.word	0x2000151c
 800b760:	2000020c 	.word	0x2000020c
 800b764:	2000152c 	.word	0x2000152c
 800b768:	20000210 	.word	0x20000210
 800b76c:	20000220 	.word	0x20000220
 800b770:	20001548 	.word	0x20001548
 800b774:	200015d8 	.word	0x200015d8
 800b778:	200015e0 	.word	0x200015e0
 800b77c:	42340000 	.word	0x42340000
 800b780:	43700000 	.word	0x43700000
 800b784:	3d9fbe77 	.word	0x3d9fbe77
 800b788:	43340000 	.word	0x43340000
 800b78c:	3d23d70a 	.word	0x3d23d70a
 800b790:	40600000 	.word	0x40600000
 800b794:	43070000 	.word	0x43070000
 800b798:	3cdfa440 	.word	0x3cdfa440
 800b79c:	40a00000 	.word	0x40a00000
 800b7a0:	42b40000 	.word	0x42b40000
 800b7a4:	3c656042 	.word	0x3c656042
 800b7a8:	40e00000 	.word	0x40e00000
 800b7ac:	41300000 	.word	0x41300000
 800b7b0:	20001224 	.word	0x20001224
 800b7b4:	00000000 	.word	0x00000000

0800b7b8 <Explore>:
	}
}
void Explore()
{
 800b7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IT_mode = EXPLORE;
 800b7ba:	4b81      	ldr	r3, [pc, #516]	; (800b9c0 <Explore+0x208>)
{
 800b7bc:	b083      	sub	sp, #12
	IT_mode = EXPLORE;
 800b7be:	2206      	movs	r2, #6
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800b7c0:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800b7c2:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800b7c4:	f003 facc 	bl	800ed60 <HAL_Delay>
	int8_t mode=1;
 800b7c8:	aa02      	add	r2, sp, #8
 800b7ca:	2501      	movs	r5, #1
 800b7cc:	f802 5d02 	strb.w	r5, [r2, #-2]!
	ModeSelect( 1, 2, &mode);
 800b7d0:	2102      	movs	r1, #2
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	f003 f9e8 	bl	800eba8 <ModeSelect>
	Signal( mode );
 800b7d8:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 800b7dc:	f003 f978 	bl	800ead0 <Signal>
	HAL_Delay(100);
 800b7e0:	2064      	movs	r0, #100	; 0x64
 800b7e2:	f003 fabd 	bl	800ed60 <HAL_Delay>

	int8_t mode2=1;
 800b7e6:	aa02      	add	r2, sp, #8
	ModeSelect( 1, 4, &mode2);
 800b7e8:	2104      	movs	r1, #4
	int8_t mode2=1;
 800b7ea:	f802 5d01 	strb.w	r5, [r2, #-1]!
	ModeSelect( 1, 4, &mode2);
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f003 f9da 	bl	800eba8 <ModeSelect>
	Signal( mode2 );
 800b7f4:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800b7f8:	f003 f96a 	bl	800ead0 <Signal>
	PhotoSwitch();
 800b7fc:	f003 f9aa 	bl	800eb54 <PhotoSwitch>
	//printf("test\r\n");
	//HAL_Delay(2000);

	InitExplore();
 800b800:	f7ff fbca 	bl	800af98 <InitExplore>

	TotalPulse[RIGHT] = 0;
 800b804:	4b6f      	ldr	r3, [pc, #444]	; (800b9c4 <Explore+0x20c>)
 800b806:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800b808:	4629      	mov	r1, r5
 800b80a:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b80c:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b80e:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800b810:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b812:	f003 f8ef 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b816:	4629      	mov	r1, r5
 800b818:	2005      	movs	r0, #5
 800b81a:	f003 f8eb 	bl	800e9f4 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800b81e:	4621      	mov	r1, r4
 800b820:	4628      	mov	r0, r5
 800b822:	f003 f8e7 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b826:	4621      	mov	r1, r4
 800b828:	2002      	movs	r0, #2
 800b82a:	f003 f8e3 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b82e:	4621      	mov	r1, r4
 800b830:	2003      	movs	r0, #3
 800b832:	f003 f8df 	bl	800e9f4 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800b836:	4621      	mov	r1, r4
 800b838:	4620      	mov	r0, r4
 800b83a:	f003 f8db 	bl	800e9f4 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode = 'T';
	if(mode == 1)
 800b83e:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 800b842:	42ab      	cmp	r3, r5
 800b844:	d00e      	beq.n	800b864 <Explore+0xac>
		turn_mode = 'T';
		ExploreVelocity=300;
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800b846:	2b02      	cmp	r3, #2
 800b848:	4e5f      	ldr	r6, [pc, #380]	; (800b9c8 <Explore+0x210>)
 800b84a:	bf14      	ite	ne
 800b84c:	2754      	movne	r7, #84	; 0x54
 800b84e:	2753      	moveq	r7, #83	; 0x53
	}

	switch(mode2)
 800b850:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800b854:	3b01      	subs	r3, #1
 800b856:	2b03      	cmp	r3, #3
 800b858:	f200 80ac 	bhi.w	800b9b4 <Explore+0x1fc>
 800b85c:	e8df f003 	tbb	[pc, r3]
 800b860:	078995a0 	.word	0x078995a0
		ExploreVelocity=300;
 800b864:	4e58      	ldr	r6, [pc, #352]	; (800b9c8 <Explore+0x210>)
 800b866:	4b59      	ldr	r3, [pc, #356]	; (800b9cc <Explore+0x214>)
 800b868:	6033      	str	r3, [r6, #0]
		turn_mode = 'T';
 800b86a:	2754      	movs	r7, #84	; 0x54
 800b86c:	e7f0      	b.n	800b850 <Explore+0x98>
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
		Sla.Pre = 3;
 800b86e:	4c58      	ldr	r4, [pc, #352]	; (800b9d0 <Explore+0x218>)
		ExploreVelocity=300;
 800b870:	4a56      	ldr	r2, [pc, #344]	; (800b9cc <Explore+0x214>)
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800b872:	4b58      	ldr	r3, [pc, #352]	; (800b9d4 <Explore+0x21c>)
		ExploreVelocity=300;
 800b874:	6032      	str	r2, [r6, #0]
		Sla.Pre = 3;
 800b876:	4958      	ldr	r1, [pc, #352]	; (800b9d8 <Explore+0x220>)
		Sla.Fol = 5;
 800b878:	4a58      	ldr	r2, [pc, #352]	; (800b9dc <Explore+0x224>)
		Sla.Pre = 3;
 800b87a:	6021      	str	r1, [r4, #0]
		Sla.Fol = 5;
 800b87c:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.117;
 800b87e:	60a3      	str	r3, [r4, #8]
	Sla.Pre *=  2/MM_PER_PULSE;
 800b880:	6820      	ldr	r0, [r4, #0]
 800b882:	4d57      	ldr	r5, [pc, #348]	; (800b9e0 <Explore+0x228>)
 800b884:	f7fc fd98 	bl	80083b8 <__aeabi_f2d>
 800b888:	a34b      	add	r3, pc, #300	; (adr r3, 800b9b8 <Explore+0x200>)
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	f7fc fdeb 	bl	8008468 <__aeabi_dmul>
 800b892:	f7fd f8e1 	bl	8008a58 <__aeabi_d2f>
 800b896:	6020      	str	r0, [r4, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800b898:	6860      	ldr	r0, [r4, #4]
 800b89a:	f7fc fd8d 	bl	80083b8 <__aeabi_f2d>
 800b89e:	a346      	add	r3, pc, #280	; (adr r3, 800b9b8 <Explore+0x200>)
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f7fc fde0 	bl	8008468 <__aeabi_dmul>
 800b8a8:	f7fd f8d6 	bl	8008a58 <__aeabi_d2f>

		break;
	}
	initSlalomParam();
	goal_edge_num = two;
	VelocityMax = false;
 800b8ac:	f8df c184 	ldr.w	ip, [pc, #388]	; 800ba34 <Explore+0x27c>
	SearchOrFast = 0;
 800b8b0:	494c      	ldr	r1, [pc, #304]	; (800b9e4 <Explore+0x22c>)
	Calc = 0;
 800b8b2:	4a4d      	ldr	r2, [pc, #308]	; (800b9e8 <Explore+0x230>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800b8b4:	6060      	str	r0, [r4, #4]
	VelocityMax = false;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	f88c 3000 	strb.w	r3, [ip]
	Sla.Theta2 = 60*M_PI/180;
 800b8bc:	484b      	ldr	r0, [pc, #300]	; (800b9ec <Explore+0x234>)
	SearchOrFast = 0;
 800b8be:	600b      	str	r3, [r1, #0]
	Sla.Theta1 = 30*M_PI/180;
 800b8c0:	f8df c174 	ldr.w	ip, [pc, #372]	; 800ba38 <Explore+0x280>
	Calc = 0;
 800b8c4:	6013      	str	r3, [r2, #0]
	Sla.Theta3 = 90*M_PI/180;
 800b8c6:	494a      	ldr	r1, [pc, #296]	; (800b9f0 <Explore+0x238>)
	goal_edge_num = two;
 800b8c8:	4a4a      	ldr	r2, [pc, #296]	; (800b9f4 <Explore+0x23c>)

//	Control_Mode=A_VELO_PID; //初期値が0. 減速時に
	Pid[A_VELO_PID].flag = 1;
 800b8ca:	4b4b      	ldr	r3, [pc, #300]	; (800b9f8 <Explore+0x240>)
	Sla.Theta1 = 30*M_PI/180;
 800b8cc:	f8c4 c010 	str.w	ip, [r4, #16]
	Sla.Theta2 = 60*M_PI/180;
 800b8d0:	6160      	str	r0, [r4, #20]
	Sla.Theta3 = 90*M_PI/180;
 800b8d2:	61a1      	str	r1, [r4, #24]
	goal_edge_num = two;
 800b8d4:	2002      	movs	r0, #2
	Pid[A_VELO_PID].flag = 1;
 800b8d6:	2401      	movs	r4, #1
	goal_edge_num = two;
 800b8d8:	7010      	strb	r0, [r2, #0]
	Pid[A_VELO_PID].flag = 1;
 800b8da:	629c      	str	r4, [r3, #40]	; 0x28
	initSearchData(&my_map, &my_mouse);
 800b8dc:	4629      	mov	r1, r5
 800b8de:	4847      	ldr	r0, [pc, #284]	; (800b9fc <Explore+0x244>)
 800b8e0:	f001 fbe4 	bl	800d0ac <initSearchData>
//	printGoal(&my_mouse);
//	printAllWeight(&my_map, &(my_mouse.goal_lesser)); //この時点で右上が0スタート.　合ってる
	dbc = 1;
 800b8e4:	4b46      	ldr	r3, [pc, #280]	; (800ba00 <Explore+0x248>)
	Accel(61.5, ExploreVelocity, &my_map, &my_mouse);
 800b8e6:	edd6 0a00 	vldr	s1, [r6]
 800b8ea:	4844      	ldr	r0, [pc, #272]	; (800b9fc <Explore+0x244>)
 800b8ec:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800ba04 <Explore+0x24c>
	dbc = 1;
 800b8f0:	601c      	str	r4, [r3, #0]
	Accel(61.5, ExploreVelocity, &my_map, &my_mouse);
 800b8f2:	4629      	mov	r1, r5

//		//ChangeLED(Pos.Car);
//		KyushinJudge();
//		SelectAction(turn_mode);
//		shiftPos();
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800b8f4:	462e      	mov	r6, r5
	Accel(61.5, ExploreVelocity, &my_map, &my_mouse);
 800b8f6:	f7fd ff2b 	bl	8009750 <Accel>
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800b8fa:	4c40      	ldr	r4, [pc, #256]	; (800b9fc <Explore+0x244>)
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800b8fc:	e001      	b.n	800b902 <Explore+0x14a>
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800b8fe:	f001 fcdb 	bl	800d2b8 <getNextDirection>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800b902:	782a      	ldrb	r2, [r5, #0]
 800b904:	7a2b      	ldrb	r3, [r5, #8]
 800b906:	429a      	cmp	r2, r3
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800b908:	4631      	mov	r1, r6
 800b90a:	463a      	mov	r2, r7
 800b90c:	4620      	mov	r0, r4
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800b90e:	d8f6      	bhi.n	800b8fe <Explore+0x146>
 800b910:	f895 c002 	ldrb.w	ip, [r5, #2]
 800b914:	459c      	cmp	ip, r3
 800b916:	d3f2      	bcc.n	800b8fe <Explore+0x146>
 800b918:	7a6b      	ldrb	r3, [r5, #9]
 800b91a:	f895 c001 	ldrb.w	ip, [r5, #1]
 800b91e:	459c      	cmp	ip, r3
 800b920:	d8ed      	bhi.n	800b8fe <Explore+0x146>
 800b922:	f895 c003 	ldrb.w	ip, [r5, #3]
 800b926:	459c      	cmp	ip, r3
 800b928:	d3e9      	bcc.n	800b8fe <Explore+0x146>
		}
#else
		//break;
#endif
	}
	Decel(45, 0);
 800b92a:	eddf 0a37 	vldr	s1, [pc, #220]	; 800ba08 <Explore+0x250>
 800b92e:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800ba0c <Explore+0x254>


while(1)
{
	//迷路データの出力
	printAllNodeExistence(&my_map);
 800b932:	4c32      	ldr	r4, [pc, #200]	; (800b9fc <Explore+0x244>)
	Decel(45, 0);
 800b934:	f7fd ffc0 	bl	80098b8 <Decel>
	WaitStopAndReset();//これがないとガクンとなる.
 800b938:	f7fd fac4 	bl	8008ec4 <WaitStopAndReset>
	shiftState(&my_mouse);
 800b93c:	4828      	ldr	r0, [pc, #160]	; (800b9e0 <Explore+0x228>)
 800b93e:	f7ff fb0d 	bl	800af5c <shiftState>
	PIDChangeFlag(A_VELO_PID, 0);
 800b942:	2100      	movs	r1, #0
 800b944:	4608      	mov	r0, r1
 800b946:	f003 f855 	bl	800e9f4 <PIDChangeFlag>
	Flash_clear_sector1();
 800b94a:	f002 fa51 	bl	800ddf0 <Flash_clear_sector1>
	flashStoreNodes(&my_map);
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 f874 	bl	800ba3c <flashStoreNodes>
	Signal(7);
 800b954:	2007      	movs	r0, #7
 800b956:	f003 f8bb 	bl	800ead0 <Signal>
	printAllNodeExistence(&my_map);
 800b95a:	4620      	mov	r0, r4
 800b95c:	f7ff fa50 	bl	800ae00 <printAllNodeExistence>
	//printAllNode(&my_map); //drawを読み出す
	printMatrix16ValueFromNode(&my_map);
 800b960:	4620      	mov	r0, r4
 800b962:	f7ff fa8f 	bl	800ae84 <printMatrix16ValueFromNode>
	printAllWeight(&my_map, &(my_mouse.now.node->pos) );
 800b966:	6929      	ldr	r1, [r5, #16]
 800b968:	4620      	mov	r0, r4
 800b96a:	3106      	adds	r1, #6
 800b96c:	f7ff f99c 	bl	800aca8 <printAllWeight>
 800b970:	e7f3      	b.n	800b95a <Explore+0x1a2>
		Sla.Pre = 2;
 800b972:	4c17      	ldr	r4, [pc, #92]	; (800b9d0 <Explore+0x218>)
		ExploreVelocity=240;
 800b974:	4a26      	ldr	r2, [pc, #152]	; (800ba10 <Explore+0x258>)
		Sla.Alpha = 0.078;
 800b976:	4b27      	ldr	r3, [pc, #156]	; (800ba14 <Explore+0x25c>)
		ExploreVelocity=240;
 800b978:	6032      	str	r2, [r6, #0]
		Sla.Pre = 2;
 800b97a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		Sla.Fol = 16;
 800b97e:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
		Sla.Pre = 2;
 800b982:	6021      	str	r1, [r4, #0]
		Sla.Fol = 16;
 800b984:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.078;
 800b986:	60a3      	str	r3, [r4, #8]
		break;
 800b988:	e77a      	b.n	800b880 <Explore+0xc8>
		Sla.Pre = 2;
 800b98a:	4c11      	ldr	r4, [pc, #68]	; (800b9d0 <Explore+0x218>)
		ExploreVelocity=180;
 800b98c:	4922      	ldr	r1, [pc, #136]	; (800ba18 <Explore+0x260>)
		Sla.Fol = 16.5;
 800b98e:	4a23      	ldr	r2, [pc, #140]	; (800ba1c <Explore+0x264>)
		Sla.Alpha = 0.043;
 800b990:	4b23      	ldr	r3, [pc, #140]	; (800ba20 <Explore+0x268>)
		ExploreVelocity=180;
 800b992:	6031      	str	r1, [r6, #0]
		Sla.Pre = 2;
 800b994:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b998:	6021      	str	r1, [r4, #0]
		Sla.Fol = 16.5;
 800b99a:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.043;
 800b99c:	60a3      	str	r3, [r4, #8]
		break;
 800b99e:	e76f      	b.n	800b880 <Explore+0xc8>
		Sla.Pre = 9;
 800b9a0:	4c0b      	ldr	r4, [pc, #44]	; (800b9d0 <Explore+0x218>)
		ExploreVelocity=90;
 800b9a2:	4a20      	ldr	r2, [pc, #128]	; (800ba24 <Explore+0x26c>)
		Sla.Alpha = 0.014;
 800b9a4:	4b20      	ldr	r3, [pc, #128]	; (800ba28 <Explore+0x270>)
		ExploreVelocity=90;
 800b9a6:	6032      	str	r2, [r6, #0]
		Sla.Pre = 9;
 800b9a8:	4920      	ldr	r1, [pc, #128]	; (800ba2c <Explore+0x274>)
		Sla.Fol = 20;
 800b9aa:	4a21      	ldr	r2, [pc, #132]	; (800ba30 <Explore+0x278>)
		Sla.Pre = 9;
 800b9ac:	6021      	str	r1, [r4, #0]
		Sla.Fol = 20;
 800b9ae:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.014;
 800b9b0:	60a3      	str	r3, [r4, #8]
		break;
 800b9b2:	e765      	b.n	800b880 <Explore+0xc8>
 800b9b4:	4c06      	ldr	r4, [pc, #24]	; (800b9d0 <Explore+0x218>)
 800b9b6:	e763      	b.n	800b880 <Explore+0xc8>
 800b9b8:	e4b6c58e 	.word	0xe4b6c58e
 800b9bc:	409fb8f9 	.word	0x409fb8f9
 800b9c0:	2000150c 	.word	0x2000150c
 800b9c4:	2000154c 	.word	0x2000154c
 800b9c8:	200015a0 	.word	0x200015a0
 800b9cc:	43960000 	.word	0x43960000
 800b9d0:	20001564 	.word	0x20001564
 800b9d4:	3def9db2 	.word	0x3def9db2
 800b9d8:	40400000 	.word	0x40400000
 800b9dc:	40a00000 	.word	0x40a00000
 800b9e0:	200015d8 	.word	0x200015d8
 800b9e4:	200015a8 	.word	0x200015a8
 800b9e8:	200015c8 	.word	0x200015c8
 800b9ec:	3f860a92 	.word	0x3f860a92
 800b9f0:	3fc90fdb 	.word	0x3fc90fdb
 800b9f4:	20001548 	.word	0x20001548
 800b9f8:	20001318 	.word	0x20001318
 800b9fc:	20001784 	.word	0x20001784
 800ba00:	20000204 	.word	0x20000204
 800ba04:	42760000 	.word	0x42760000
 800ba08:	00000000 	.word	0x00000000
 800ba0c:	42340000 	.word	0x42340000
 800ba10:	43700000 	.word	0x43700000
 800ba14:	3d9fbe77 	.word	0x3d9fbe77
 800ba18:	43340000 	.word	0x43340000
 800ba1c:	41840000 	.word	0x41840000
 800ba20:	3d3020c5 	.word	0x3d3020c5
 800ba24:	42b40000 	.word	0x42b40000
 800ba28:	3c656042 	.word	0x3c656042
 800ba2c:	41100000 	.word	0x41100000
 800ba30:	41a00000 	.word	0x41a00000
 800ba34:	2000159c 	.word	0x2000159c
 800ba38:	3f060a92 	.word	0x3f060a92

0800ba3c <flashStoreNodes>:
//マップデータをフラッシュに書き込む処理
#include "Flash.h"
#include "MazeLib.h"
void flashStoreNodes(maze_node *maze)
{
	uint32_t address=start_adress_sector1;
 800ba3c:	4b1b      	ldr	r3, [pc, #108]	; (800baac <flashStoreNodes+0x70>)
{
 800ba3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t address=start_adress_sector1;
 800ba42:	f8d3 8000 	ldr.w	r8, [r3]
 800ba46:	ebc8 7ac8 	rsb	sl, r8, r8, lsl #31
{
 800ba4a:	4607      	mov	r7, r0
 800ba4c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
	uint32_t address=start_adress_sector1;
 800ba50:	4644      	mov	r4, r8
 800ba52:	f04f 0900 	mov.w	r9, #0
 800ba56:	eb09 050a 	add.w	r5, r9, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				FLASH_Write_Word(address+0, maze->RawNode[i][j].existence);
 800ba5a:	443d      	add	r5, r7
 800ba5c:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800ba60:	f815 1014 	ldrb.w	r1, [r5, r4, lsl #1]
 800ba64:	4620      	mov	r0, r4
				address += 4;
 800ba66:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, maze->RawNode[i][j].existence);
 800ba68:	f002 f924 	bl	800dcb4 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ba6c:	42b4      	cmp	r4, r6
 800ba6e:	d1f7      	bne.n	800ba60 <flashStoreNodes+0x24>
 800ba70:	f109 0950 	add.w	r9, r9, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ba74:	f5b9 7f34 	cmp.w	r9, #720	; 0x2d0
 800ba78:	f1aa 0a50 	sub.w	sl, sl, #80	; 0x50
 800ba7c:	d1eb      	bne.n	800ba56 <flashStoreNodes+0x1a>
 800ba7e:	f508 74b4 	add.w	r4, r8, #360	; 0x168
 800ba82:	f508 7834 	add.w	r8, r8, #720	; 0x2d0
 800ba86:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800ba8a:	463d      	mov	r5, r7
	//列
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				FLASH_Write_Word(address+0, maze->ColumnNode[i][j].existence);
 800ba8c:	f895 12d0 	ldrb.w	r1, [r5, #720]	; 0x2d0
 800ba90:	4620      	mov	r0, r4
				address += 4;
 800ba92:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, maze->ColumnNode[i][j].existence);
 800ba94:	f002 f90e 	bl	800dcb4 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800ba98:	42a6      	cmp	r6, r4
 800ba9a:	f105 0508 	add.w	r5, r5, #8
 800ba9e:	d1f5      	bne.n	800ba8c <flashStoreNodes+0x50>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800baa0:	4546      	cmp	r6, r8
 800baa2:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800baa6:	d1ee      	bne.n	800ba86 <flashStoreNodes+0x4a>
			}
	}
}
 800baa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baac:	08016e44 	.word	0x08016e44

0800bab0 <flashCopyNodesToRam>:
	printf("\r\n");

}
//評価値マップ生成。
void flashCopyNodesToRam(maze_node *maze)
{
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t address=start_adress_sector1;
 800bab4:	4b1f      	ldr	r3, [pc, #124]	; (800bb34 <flashCopyNodesToRam+0x84>)
 800bab6:	f8d3 a000 	ldr.w	sl, [r3]
 800baba:	f04f 0900 	mov.w	r9, #0
 800babe:	ebca 7bca 	rsb	fp, sl, sl, lsl #31
{
 800bac2:	b083      	sub	sp, #12
 800bac4:	4680      	mov	r8, r0
 800bac6:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
	uint32_t address=start_adress_sector1;
 800baca:	4654      	mov	r4, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				uint32_t wall_data=0;
 800bacc:	464f      	mov	r7, r9
 800bace:	eb09 050b 	add.w	r5, r9, fp
				FLASH_Read_Word(address, &wall_data);
				maze->RawNode[i][j].existence = wall_data;
 800bad2:	4445      	add	r5, r8
 800bad4:	f104 0628 	add.w	r6, r4, #40	; 0x28
				FLASH_Read_Word(address, &wall_data);
 800bad8:	4620      	mov	r0, r4
 800bada:	a901      	add	r1, sp, #4
				uint32_t wall_data=0;
 800badc:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800bade:	f002 f911 	bl	800dd04 <FLASH_Read_Word>
				maze->RawNode[i][j].existence = wall_data;
 800bae2:	9b01      	ldr	r3, [sp, #4]
 800bae4:	f805 3014 	strb.w	r3, [r5, r4, lsl #1]
				address += sizeof(wall_data);
 800bae8:	3404      	adds	r4, #4
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800baea:	42b4      	cmp	r4, r6
 800baec:	d1f4      	bne.n	800bad8 <flashCopyNodesToRam+0x28>
 800baee:	f109 0950 	add.w	r9, r9, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800baf2:	f5b9 7f34 	cmp.w	r9, #720	; 0x2d0
 800baf6:	f1ab 0b50 	sub.w	fp, fp, #80	; 0x50
 800bafa:	d1e8      	bne.n	800bace <flashCopyNodesToRam+0x1e>
 800bafc:	f50a 74b4 	add.w	r4, sl, #360	; 0x168
	}
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				uint32_t wall_data=0;
 800bb00:	2700      	movs	r7, #0
 800bb02:	f50a 7a34 	add.w	sl, sl, #720	; 0x2d0
 800bb06:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800bb0a:	4645      	mov	r5, r8
				FLASH_Read_Word(address, &wall_data);
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	a901      	add	r1, sp, #4
				maze->ColumnNode[i][j].existence = wall_data;
				address += sizeof(wall_data);
 800bb10:	3404      	adds	r4, #4
				uint32_t wall_data=0;
 800bb12:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800bb14:	f002 f8f6 	bl	800dd04 <FLASH_Read_Word>
				maze->ColumnNode[i][j].existence = wall_data;
 800bb18:	9b01      	ldr	r3, [sp, #4]
 800bb1a:	f885 32d0 	strb.w	r3, [r5, #720]	; 0x2d0
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800bb1e:	42a6      	cmp	r6, r4
 800bb20:	f105 0508 	add.w	r5, r5, #8
 800bb24:	d1f2      	bne.n	800bb0c <flashCopyNodesToRam+0x5c>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800bb26:	4556      	cmp	r6, sl
 800bb28:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800bb2c:	d1eb      	bne.n	800bb06 <flashCopyNodesToRam+0x56>
			}
	}
}
 800bb2e:	b003      	add	sp, #12
 800bb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb34:	08016e44 	.word	0x08016e44

0800bb38 <getNextNode>:
        break;
    }
    return error;
}
node *getNextNode(maze_node *maze, cardinal car, node *now_node, int mask)
{
 800bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t compare_weight=0;
    compare_weight = now_node->weight;

    _Bool flag=false;
    //printf("マイノードが01のどちらか:%d\r\n",now_node->rc);
    if(now_node->rc == 0)
 800bb3c:	f892 c005 	ldrb.w	ip, [r2, #5]
    compare_weight = now_node->weight;
 800bb40:	8857      	ldrh	r7, [r2, #2]
 800bb42:	7991      	ldrb	r1, [r2, #6]
 800bb44:	79d4      	ldrb	r4, [r2, #7]
{
 800bb46:	b083      	sub	sp, #12
    if(now_node->rc == 0)
 800bb48:	f1bc 0f00 	cmp.w	ip, #0
 800bb4c:	d17f      	bne.n	800bc4e <getNextNode+0x116>
        //北側ノード
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
        {

            //printf("%u\r\n",now_node->pos.y);
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800bb4e:	008e      	lsls	r6, r1, #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800bb50:	2c07      	cmp	r4, #7
 800bb52:	f104 3eff 	add.w	lr, r4, #4294967295
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800bb56:	9601      	str	r6, [sp, #4]
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800bb58:	f200 80bd 	bhi.w	800bcd6 <getNextNode+0x19e>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800bb5c:	eb06 0801 	add.w	r8, r6, r1
 800bb60:	f104 0901 	add.w	r9, r4, #1
 800bb64:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 800bb68:	f810 a038 	ldrb.w	sl, [r0, r8, lsl #3]
 800bb6c:	ea1a 0f03 	tst.w	sl, r3
 800bb70:	d115      	bne.n	800bb9e <getNextNode+0x66>
            {
            	static int cnt = 1;
//            				ChangeLED(cnt%7);
            				cnt ++;
 800bb72:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 800be20 <getNextNode+0x2e8>


                // printf("%d\r\n", maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence);//壁があることになってた..
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800bb76:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
            				cnt ++;
 800bb7a:	f8da 6000 	ldr.w	r6, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800bb7e:	f8b8 8002 	ldrh.w	r8, [r8, #2]
            				cnt ++;
 800bb82:	f106 0b01 	add.w	fp, r6, #1
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800bb86:	45b8      	cmp	r8, r7
            				cnt ++;
 800bb88:	f8ca b000 	str.w	fp, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800bb8c:	d207      	bcs.n	800bb9e <getNextNode+0x66>

#if DEBUG_ON
                    printf("北へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800bb8e:	250a      	movs	r5, #10
 800bb90:	fb15 9501 	smlabb	r5, r5, r1, r9
 800bb94:	4647      	mov	r7, r8
 800bb96:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800bb9a:	f04f 0c01 	mov.w	ip, #1
                }
            }
        }
        //南へ側ノード
        if(now_node->pos.y > 1)						//範囲チェック
 800bb9e:	2c01      	cmp	r4, #1
 800bba0:	f200 8099 	bhi.w	800bcd6 <getNextNode+0x19e>
                    flag = true;
                }
            }
        }
        //東へ側に斜めが2方向
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800bba4:	2907      	cmp	r1, #7
 800bba6:	d82f      	bhi.n	800bc08 <getNextNode+0xd0>
        {
            //北東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800bba8:	1c4e      	adds	r6, r1, #1
 800bbaa:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800bbae:	eb06 0804 	add.w	r8, r6, r4
 800bbb2:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
 800bbb6:	f898 92d0 	ldrb.w	r9, [r8, #720]	; 0x2d0
 800bbba:	ea19 0f03 	tst.w	r9, r3
 800bbbe:	d10b      	bne.n	800bbd8 <getNextNode+0xa0>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800bbc0:	f8b8 82d2 	ldrh.w	r8, [r8, #722]	; 0x2d2
 800bbc4:	45b8      	cmp	r8, r7
 800bbc6:	d207      	bcs.n	800bbd8 <getNextNode+0xa0>
                {
#if DEBUG_ON
                    printf("北東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800bbc8:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800bbcc:	4435      	add	r5, r6
 800bbce:	4647      	mov	r7, r8
 800bbd0:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800bbd4:	f04f 0c01 	mov.w	ip, #1
 800bbd8:	eb0e 0806 	add.w	r8, lr, r6
 800bbdc:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
                }
            }

            //南へ東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800bbe0:	f898 92d0 	ldrb.w	r9, [r8, #720]	; 0x2d0
 800bbe4:	ea19 0f03 	tst.w	r9, r3
 800bbe8:	f040 80e8 	bne.w	800bdbc <getNextNode+0x284>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800bbec:	f8b8 82d2 	ldrh.w	r8, [r8, #722]	; 0x2d2
 800bbf0:	45b8      	cmp	r8, r7
 800bbf2:	f080 80e3 	bcs.w	800bdbc <getNextNode+0x284>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
 800bbf6:	f10e 055a 	add.w	r5, lr, #90	; 0x5a
 800bbfa:	4435      	add	r5, r6
 800bbfc:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                }
            }
        }

        //西へ側に斜めが2方向
        if(now_node->pos.x > 0)						//範囲チェック
 800bc00:	b309      	cbz	r1, 800bc46 <getNextNode+0x10e>
 800bc02:	4647      	mov	r7, r8
                    flag = true;
 800bc04:	f04f 0c01 	mov.w	ip, #1
 800bc08:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800bc0c:	1866      	adds	r6, r4, r1
 800bc0e:	eb01 080e 	add.w	r8, r1, lr
 800bc12:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bc16:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
        {
            //北西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800bc1a:	f896 92d0 	ldrb.w	r9, [r6, #720]	; 0x2d0
 800bc1e:	f898 a2d0 	ldrb.w	sl, [r8, #720]	; 0x2d0
 800bc22:	ea19 0f03 	tst.w	r9, r3
 800bc26:	ea0a 0a03 	and.w	sl, sl, r3
 800bc2a:	f000 80da 	beq.w	800bde2 <getNextNode+0x2aa>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800bc2e:	f1ba 0f00 	cmp.w	sl, #0
 800bc32:	d104      	bne.n	800bc3e <getNextNode+0x106>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800bc34:	f8b8 32d2 	ldrh.w	r3, [r8, #722]	; 0x2d2
 800bc38:	42bb      	cmp	r3, r7
 800bc3a:	f0c0 80e4 	bcc.w	800be06 <getNextNode+0x2ce>
 800bc3e:	f1bc 0f00 	cmp.w	ip, #0
 800bc42:	bf08      	it	eq
 800bc44:	4615      	moveq	r5, r2
        return now_node;//万が一更新されなかったら、今いるノードが目標ノードなので、停止するはず。
        //停止しなかった。前回の情報がそのまま反映されるだけ
    }
    return now_node; //

}
 800bc46:	4628      	mov	r0, r5
 800bc48:	b003      	add	sp, #12
 800bc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800bc4e:	2907      	cmp	r1, #7
 800bc50:	f101 3eff 	add.w	lr, r1, #4294967295
 800bc54:	d958      	bls.n	800bd08 <getNextNode+0x1d0>
    _Bool flag=false;
 800bc56:	f04f 0800 	mov.w	r8, #0
 800bc5a:	eb0e 0ace 	add.w	sl, lr, lr, lsl #3
 800bc5e:	eb0a 0604 	add.w	r6, sl, r4
 800bc62:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
            if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ
 800bc66:	f896 92d0 	ldrb.w	r9, [r6, #720]	; 0x2d0
 800bc6a:	ea19 0f03 	tst.w	r9, r3
 800bc6e:	f000 8093 	beq.w	800bd98 <getNextNode+0x260>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800bc72:	008e      	lsls	r6, r1, #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800bc74:	2c07      	cmp	r4, #7
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800bc76:	9601      	str	r6, [sp, #4]
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800bc78:	d95e      	bls.n	800bd38 <getNextNode+0x200>
 800bc7a:	ea4f 098e 	mov.w	r9, lr, lsl #2
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800bc7e:	9e01      	ldr	r6, [sp, #4]
 800bc80:	440e      	add	r6, r1
 800bc82:	eb09 0c0e 	add.w	ip, r9, lr
 800bc86:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800bc8a:	eb04 0c4c 	add.w	ip, r4, ip, lsl #1
 800bc8e:	f810 b036 	ldrb.w	fp, [r0, r6, lsl #3]
 800bc92:	f810 a03c 	ldrb.w	sl, [r0, ip, lsl #3]
 800bc96:	ea1b 0f03 	tst.w	fp, r3
 800bc9a:	ea0a 0a03 	and.w	sl, sl, r3
 800bc9e:	f040 8091 	bne.w	800bdc4 <getNextNode+0x28c>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800bca2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bca6:	8873      	ldrh	r3, [r6, #2]
 800bca8:	42bb      	cmp	r3, r7
 800bcaa:	f080 808b 	bcs.w	800bdc4 <getNextNode+0x28c>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y]);
 800bcae:	250a      	movs	r5, #10
 800bcb0:	fb15 4101 	smlabb	r1, r5, r1, r4
 800bcb4:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800bcb8:	f1ba 0f00 	cmp.w	sl, #0
 800bcbc:	d1c3      	bne.n	800bc46 <getNextNode+0x10e>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800bcbe:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800bcc2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d2bd      	bcs.n	800bc46 <getNextNode+0x10e>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y]);
 800bcca:	44ce      	add	lr, r9
 800bccc:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 800bcd0:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 800bcd4:	e7b7      	b.n	800bc46 <getNextNode+0x10e>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)	//壁がなければ
 800bcd6:	9e01      	ldr	r6, [sp, #4]
 800bcd8:	440e      	add	r6, r1
 800bcda:	eb0e 0646 	add.w	r6, lr, r6, lsl #1
 800bcde:	f810 8036 	ldrb.w	r8, [r0, r6, lsl #3]
 800bce2:	ea18 0f03 	tst.w	r8, r3
 800bce6:	f47f af5d 	bne.w	800bba4 <getNextNode+0x6c>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800bcea:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bcee:	8876      	ldrh	r6, [r6, #2]
 800bcf0:	42be      	cmp	r6, r7
 800bcf2:	f4bf af57 	bcs.w	800bba4 <getNextNode+0x6c>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
 800bcf6:	250a      	movs	r5, #10
 800bcf8:	fb15 e501 	smlabb	r5, r5, r1, lr
 800bcfc:	4637      	mov	r7, r6
 800bcfe:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800bd02:	f04f 0c01 	mov.w	ip, #1
 800bd06:	e74d      	b.n	800bba4 <getNextNode+0x6c>
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800bd08:	1c4e      	adds	r6, r1, #1
 800bd0a:	eb06 09c6 	add.w	r9, r6, r6, lsl #3
 800bd0e:	eb04 0609 	add.w	r6, r4, r9
 800bd12:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bd16:	f896 82d0 	ldrb.w	r8, [r6, #720]	; 0x2d0
 800bd1a:	ea18 0803 	ands.w	r8, r8, r3
 800bd1e:	d178      	bne.n	800be12 <getNextNode+0x2da>
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800bd20:	f8b6 a2d2 	ldrh.w	sl, [r6, #722]	; 0x2d2
 800bd24:	45ba      	cmp	sl, r7
 800bd26:	d276      	bcs.n	800be16 <getNextNode+0x2de>
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800bd28:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800bd2c:	444d      	add	r5, r9
 800bd2e:	4657      	mov	r7, sl
 800bd30:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800bd34:	46e0      	mov	r8, ip
 800bd36:	e06e      	b.n	800be16 <getNextNode+0x2de>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800bd38:	eb06 0901 	add.w	r9, r6, r1
 800bd3c:	f104 0a01 	add.w	sl, r4, #1
 800bd40:	eb0a 0949 	add.w	r9, sl, r9, lsl #1
 800bd44:	f810 b039 	ldrb.w	fp, [r0, r9, lsl #3]
 800bd48:	ea1b 0f03 	tst.w	fp, r3
 800bd4c:	d10c      	bne.n	800bd68 <getNextNode+0x230>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800bd4e:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
 800bd52:	f8b9 9002 	ldrh.w	r9, [r9, #2]
 800bd56:	45b9      	cmp	r9, r7
 800bd58:	d206      	bcs.n	800bd68 <getNextNode+0x230>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800bd5a:	250a      	movs	r5, #10
 800bd5c:	fb15 a501 	smlabb	r5, r5, r1, sl
 800bd60:	464f      	mov	r7, r9
 800bd62:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800bd66:	46e0      	mov	r8, ip
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800bd68:	ea4f 098e 	mov.w	r9, lr, lsl #2
 800bd6c:	eb09 0b0e 	add.w	fp, r9, lr
 800bd70:	eb0a 0a4b 	add.w	sl, sl, fp, lsl #1
 800bd74:	f810 b03a 	ldrb.w	fp, [r0, sl, lsl #3]
 800bd78:	ea1b 0f03 	tst.w	fp, r3
 800bd7c:	d119      	bne.n	800bdb2 <getNextNode+0x27a>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800bd7e:	eb00 0aca 	add.w	sl, r0, sl, lsl #3
 800bd82:	f8ba b002 	ldrh.w	fp, [sl, #2]
 800bd86:	45bb      	cmp	fp, r7
 800bd88:	d213      	bcs.n	800bdb2 <getNextNode+0x27a>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800bd8a:	4655      	mov	r5, sl
        if(now_node->pos.y > 0)						//範囲チェック
 800bd8c:	2c00      	cmp	r4, #0
 800bd8e:	f43f af5a 	beq.w	800bc46 <getNextNode+0x10e>
                    flag = true;
 800bd92:	46e0      	mov	r8, ip
        if(now_node->pos.y > 0)						//範囲チェック
 800bd94:	465f      	mov	r7, fp
 800bd96:	e772      	b.n	800bc7e <getNextNode+0x146>
                if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800bd98:	f8b6 62d2 	ldrh.w	r6, [r6, #722]	; 0x2d2
 800bd9c:	42be      	cmp	r6, r7
 800bd9e:	f4bf af68 	bcs.w	800bc72 <getNextNode+0x13a>
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800bda2:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800bda6:	4455      	add	r5, sl
 800bda8:	4637      	mov	r7, r6
 800bdaa:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800bdae:	46e0      	mov	r8, ip
 800bdb0:	e75f      	b.n	800bc72 <getNextNode+0x13a>
        if(now_node->pos.y > 0)						//範囲チェック
 800bdb2:	2c00      	cmp	r4, #0
 800bdb4:	f47f af63 	bne.w	800bc7e <getNextNode+0x146>
 800bdb8:	46c4      	mov	ip, r8
 800bdba:	e740      	b.n	800bc3e <getNextNode+0x106>
        if(now_node->pos.x > 0)						//範囲チェック
 800bdbc:	2900      	cmp	r1, #0
 800bdbe:	f43f af3e 	beq.w	800bc3e <getNextNode+0x106>
 800bdc2:	e721      	b.n	800bc08 <getNextNode+0xd0>
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800bdc4:	f1ba 0f00 	cmp.w	sl, #0
 800bdc8:	d1f6      	bne.n	800bdb8 <getNextNode+0x280>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800bdca:	eb09 030e 	add.w	r3, r9, lr
 800bdce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800bdd2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800bdd6:	885b      	ldrh	r3, [r3, #2]
 800bdd8:	42bb      	cmp	r3, r7
 800bdda:	f4ff af76 	bcc.w	800bcca <getNextNode+0x192>
 800bdde:	46c4      	mov	ip, r8
 800bde0:	e72d      	b.n	800bc3e <getNextNode+0x106>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight)
 800bde2:	f8b6 32d2 	ldrh.w	r3, [r6, #722]	; 0x2d2
 800bde6:	42bb      	cmp	r3, r7
 800bde8:	f4bf af21 	bcs.w	800bc2e <getNextNode+0xf6>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
 800bdec:	345a      	adds	r4, #90	; 0x5a
 800bdee:	440c      	add	r4, r1
 800bdf0:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800bdf4:	f1ba 0f00 	cmp.w	sl, #0
 800bdf8:	f47f af25 	bne.w	800bc46 <getNextNode+0x10e>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800bdfc:	f8b8 22d2 	ldrh.w	r2, [r8, #722]	; 0x2d2
 800be00:	429a      	cmp	r2, r3
 800be02:	f4bf af20 	bcs.w	800bc46 <getNextNode+0x10e>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y-1]);
 800be06:	f10e 045a 	add.w	r4, lr, #90	; 0x5a
 800be0a:	440c      	add	r4, r1
 800be0c:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 800be10:	e719      	b.n	800bc46 <getNextNode+0x10e>
    _Bool flag=false;
 800be12:	f04f 0800 	mov.w	r8, #0
        if(now_node->pos.x > 1)						//範囲チェック
 800be16:	2901      	cmp	r1, #1
 800be18:	f67f af2b 	bls.w	800bc72 <getNextNode+0x13a>
 800be1c:	e71d      	b.n	800bc5a <getNextNode+0x122>
 800be1e:	bf00      	nop
 800be20:	20000000 	.word	0x20000000

0800be24 <judgeAccelorNot>:

	compare_weight = now_node->weight;

	_Bool flag=false;
	//現ノードから3方向ノードを見て、未知なら即return
	if(now_node->rc == 0)
 800be24:	7953      	ldrb	r3, [r2, #5]
{
 800be26:	b4f0      	push	{r4, r5, r6, r7}
	compare_weight = now_node->weight;
 800be28:	8854      	ldrh	r4, [r2, #2]
	if(now_node->rc == 0)
 800be2a:	bba3      	cbnz	r3, 800be96 <judgeAccelorNot+0x72>
	{
		switch(car)
 800be2c:	2900      	cmp	r1, #0
 800be2e:	f000 8090 	beq.w	800bf52 <judgeAccelorNot+0x12e>
 800be32:	2904      	cmp	r1, #4
 800be34:	d12c      	bne.n	800be90 <judgeAccelorNot+0x6c>
	            }
	        }
	        break;
		case south:
			//南へ
			if(now_node->pos.y > 1)						//範囲チェック
 800be36:	79d1      	ldrb	r1, [r2, #7]
 800be38:	7992      	ldrb	r2, [r2, #6]
 800be3a:	2901      	cmp	r1, #1
 800be3c:	f101 35ff 	add.w	r5, r1, #4294967295
 800be40:	d90e      	bls.n	800be60 <judgeAccelorNot+0x3c>
			{
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)	//壁がなければ
 800be42:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800be46:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800be4a:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800be4e:	2e02      	cmp	r6, #2
 800be50:	d01e      	beq.n	800be90 <judgeAccelorNot+0x6c>
				{
					return false;
				}
					//重みを比較して更新
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)
 800be52:	b92e      	cbnz	r6, 800be60 <judgeAccelorNot+0x3c>
				{
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800be54:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800be58:	8849      	ldrh	r1, [r1, #2]
 800be5a:	42a1      	cmp	r1, r4
 800be5c:	f0c0 80bc 	bcc.w	800bfd8 <judgeAccelorNot+0x1b4>
	_Bool flag=false;
 800be60:	461e      	mov	r6, r3
//						next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
						flag = true;
					}
				}
			}
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800be62:	2a07      	cmp	r2, #7
 800be64:	f200 8084 	bhi.w	800bf70 <judgeAccelorNot+0x14c>
			{
				//南へ東へ
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800be68:	1c51      	adds	r1, r2, #1
 800be6a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800be6e:	4429      	add	r1, r5
 800be70:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800be74:	f891 72d0 	ldrb.w	r7, [r1, #720]	; 0x2d0
 800be78:	2f02      	cmp	r7, #2
 800be7a:	d009      	beq.n	800be90 <judgeAccelorNot+0x6c>
				{
					return false;
				}
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800be7c:	b92f      	cbnz	r7, 800be8a <judgeAccelorNot+0x66>
				{
					//重みを比較して更新
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800be7e:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800be82:	42a1      	cmp	r1, r4
					{
						compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
//						next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
						flag = false;
 800be84:	bf3c      	itt	cc
 800be86:	463e      	movcc	r6, r7
 800be88:	460c      	movcc	r4, r1
					}
				}
			}
			if(now_node->pos.x > 0)						//範囲チェック
 800be8a:	2a00      	cmp	r2, #0
 800be8c:	d170      	bne.n	800bf70 <judgeAccelorNot+0x14c>
 800be8e:	4633      	mov	r3, r6
	}
	return flag; //壁が全部あるときもfalseになっている
	//未知があった時点でreturn false
	//直進かどうかまで見て、直進でなければfalse
	//既知でかつ直進ならtrue
}
 800be90:	4618      	mov	r0, r3
 800be92:	bcf0      	pop	{r4, r5, r6, r7}
 800be94:	4770      	bx	lr
		switch(car)
 800be96:	2902      	cmp	r1, #2
 800be98:	d03a      	beq.n	800bf10 <judgeAccelorNot+0xec>
 800be9a:	2906      	cmp	r1, #6
 800be9c:	d155      	bne.n	800bf4a <judgeAccelorNot+0x126>
			if(now_node->pos.x > 1)						//範囲チェック
 800be9e:	7991      	ldrb	r1, [r2, #6]
 800bea0:	79d2      	ldrb	r2, [r2, #7]
 800bea2:	2901      	cmp	r1, #1
 800bea4:	f101 35ff 	add.w	r5, r1, #4294967295
 800bea8:	d90b      	bls.n	800bec2 <judgeAccelorNot+0x9e>
 800beaa:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800beae:	4411      	add	r1, r2
 800beb0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
				if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) ==UNKNOWN)	//壁がなければ
 800beb4:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800beb8:	2e02      	cmp	r6, #2
 800beba:	d046      	beq.n	800bf4a <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ
 800bebc:	2e00      	cmp	r6, #0
 800bebe:	f000 8084 	beq.w	800bfca <judgeAccelorNot+0x1a6>
	_Bool flag=false;
 800bec2:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800bec4:	2a07      	cmp	r2, #7
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800bec6:	ea4f 0185 	mov.w	r1, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800beca:	d811      	bhi.n	800bef0 <judgeAccelorNot+0xcc>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800becc:	194f      	adds	r7, r1, r5
 800bece:	1c56      	adds	r6, r2, #1
 800bed0:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800bed4:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800bed8:	2f02      	cmp	r7, #2
 800beda:	d036      	beq.n	800bf4a <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800bedc:	b937      	cbnz	r7, 800beec <judgeAccelorNot+0xc8>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800bede:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bee2:	8876      	ldrh	r6, [r6, #2]
 800bee4:	42a6      	cmp	r6, r4
 800bee6:	bf3c      	itt	cc
 800bee8:	4634      	movcc	r4, r6
						flag = false;
 800beea:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800beec:	2a00      	cmp	r2, #0
 800beee:	d0cf      	beq.n	800be90 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800bef0:	440d      	add	r5, r1
 800bef2:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 800bef6:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800befa:	2902      	cmp	r1, #2
 800befc:	d025      	beq.n	800bf4a <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800befe:	2900      	cmp	r1, #0
 800bf00:	d1c6      	bne.n	800be90 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800bf02:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800bf06:	8842      	ldrh	r2, [r0, #2]
	                    flag = false;
 800bf08:	42a2      	cmp	r2, r4
 800bf0a:	bf38      	it	cc
 800bf0c:	2300      	movcc	r3, #0
 800bf0e:	e7bf      	b.n	800be90 <judgeAccelorNot+0x6c>
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800bf10:	7995      	ldrb	r5, [r2, #6]
 800bf12:	79d1      	ldrb	r1, [r2, #7]
 800bf14:	2d07      	cmp	r5, #7
 800bf16:	d80b      	bhi.n	800bf30 <judgeAccelorNot+0x10c>
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800bf18:	1c6a      	adds	r2, r5, #1
 800bf1a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800bf1e:	440a      	add	r2, r1
 800bf20:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800bf24:	f892 62d0 	ldrb.w	r6, [r2, #720]	; 0x2d0
 800bf28:	2e02      	cmp	r6, #2
 800bf2a:	d00e      	beq.n	800bf4a <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800bf2c:	2e00      	cmp	r6, #0
 800bf2e:	d056      	beq.n	800bfde <judgeAccelorNot+0x1ba>
	_Bool flag=false;
 800bf30:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800bf32:	2907      	cmp	r1, #7
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800bf34:	ea4f 0285 	mov.w	r2, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800bf38:	d836      	bhi.n	800bfa8 <judgeAccelorNot+0x184>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800bf3a:	1957      	adds	r7, r2, r5
 800bf3c:	1c4e      	adds	r6, r1, #1
 800bf3e:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800bf42:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800bf46:	2f02      	cmp	r7, #2
 800bf48:	d123      	bne.n	800bf92 <judgeAccelorNot+0x16e>
	                    flag = false;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	bcf0      	pop	{r4, r5, r6, r7}
 800bf50:	4770      	bx	lr
	        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800bf52:	79d5      	ldrb	r5, [r2, #7]
 800bf54:	7992      	ldrb	r2, [r2, #6]
 800bf56:	2d07      	cmp	r5, #7
 800bf58:	d882      	bhi.n	800be60 <judgeAccelorNot+0x3c>
	            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800bf5a:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800bf5e:	1c69      	adds	r1, r5, #1
 800bf60:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800bf64:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800bf68:	2e02      	cmp	r6, #2
 800bf6a:	f47f af72 	bne.w	800be52 <judgeAccelorNot+0x2e>
 800bf6e:	e78f      	b.n	800be90 <judgeAccelorNot+0x6c>
 800bf70:	2109      	movs	r1, #9
 800bf72:	fb11 5202 	smlabb	r2, r1, r2, r5
 800bf76:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
				if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800bf7a:	f890 22d0 	ldrb.w	r2, [r0, #720]	; 0x2d0
 800bf7e:	2a02      	cmp	r2, #2
 800bf80:	d086      	beq.n	800be90 <judgeAccelorNot+0x6c>
				else if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	d183      	bne.n	800be8e <judgeAccelorNot+0x6a>
					if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800bf86:	f8b0 22d2 	ldrh.w	r2, [r0, #722]	; 0x2d2
 800bf8a:	42a2      	cmp	r2, r4
 800bf8c:	bf28      	it	cs
 800bf8e:	4633      	movcs	r3, r6
 800bf90:	e77e      	b.n	800be90 <judgeAccelorNot+0x6c>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800bf92:	b937      	cbnz	r7, 800bfa2 <judgeAccelorNot+0x17e>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800bf94:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bf98:	8876      	ldrh	r6, [r6, #2]
 800bf9a:	42a6      	cmp	r6, r4
 800bf9c:	bf3c      	itt	cc
 800bf9e:	4634      	movcc	r4, r6
						flag = false;
 800bfa0:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800bfa2:	2900      	cmp	r1, #0
 800bfa4:	f43f af74 	beq.w	800be90 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800bfa8:	4415      	add	r5, r2
 800bfaa:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800bfae:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 800bfb2:	2a02      	cmp	r2, #2
 800bfb4:	d0c9      	beq.n	800bf4a <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800bfb6:	2a00      	cmp	r2, #0
 800bfb8:	f47f af6a 	bne.w	800be90 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800bfbc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800bfc0:	884a      	ldrh	r2, [r1, #2]
	                    flag = false;
 800bfc2:	42a2      	cmp	r2, r4
 800bfc4:	bf38      	it	cc
 800bfc6:	2300      	movcc	r3, #0
 800bfc8:	e762      	b.n	800be90 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800bfca:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800bfce:	42a1      	cmp	r1, r4
 800bfd0:	f4bf af77 	bcs.w	800bec2 <judgeAccelorNot+0x9e>
 800bfd4:	460c      	mov	r4, r1
 800bfd6:	e775      	b.n	800bec4 <judgeAccelorNot+0xa0>
 800bfd8:	460c      	mov	r4, r1
						flag = true;
 800bfda:	2601      	movs	r6, #1
 800bfdc:	e741      	b.n	800be62 <judgeAccelorNot+0x3e>
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800bfde:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800bfe2:	42a2      	cmp	r2, r4
 800bfe4:	d2a4      	bcs.n	800bf30 <judgeAccelorNot+0x10c>
 800bfe6:	4614      	mov	r4, r2
 800bfe8:	e7a3      	b.n	800bf32 <judgeAccelorNot+0x10e>
 800bfea:	bf00      	nop

0800bfec <getNextState>:
state *getNextState(state *now_state, state *next_state, node *next_node)
{
 800bfec:	b4f0      	push	{r4, r5, r6, r7}
    uint8_t now_x = now_state->node->pos.x;
    uint8_t now_y = now_state->node->pos.y;
    uint8_t next_x = next_node->pos.x;
    uint8_t next_y = next_node->pos.y;

    switch(now_state->car%8)
 800bfee:	7883      	ldrb	r3, [r0, #2]
    uint8_t now_x = now_state->node->pos.x;
 800bff0:	6884      	ldr	r4, [r0, #8]
    uint8_t next_x = next_node->pos.x;
 800bff2:	7996      	ldrb	r6, [r2, #6]
    uint8_t now_x = now_state->node->pos.x;
 800bff4:	79a5      	ldrb	r5, [r4, #6]
    uint8_t next_y = next_node->pos.y;
 800bff6:	79d7      	ldrb	r7, [r2, #7]
    uint8_t now_y = now_state->node->pos.y;
 800bff8:	79e4      	ldrb	r4, [r4, #7]
    switch(now_state->car%8)
 800bffa:	f003 0307 	and.w	r3, r3, #7
 800bffe:	2b06      	cmp	r3, #6
 800c000:	d81e      	bhi.n	800c040 <getNextState+0x54>
 800c002:	e8df f003 	tbb	[pc, r3]
 800c006:	1d04      	.short	0x1d04
 800c008:	1d341d4e 	.word	0x1d341d4e
 800c00c:	20          	.byte	0x20
 800c00d:	00          	.byte	0x00
    {
        case north://行から、列に行くのか行に行くのかで、差分の取り方を変える
            if(next_node->rc == 0)
 800c00e:	7953      	ldrb	r3, [r2, #5]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d059      	beq.n	800c0c8 <getNextState+0xdc>
            if(next_node->rc == 1)
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //北向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800c014:	1c6b      	adds	r3, r5, #1
 800c016:	42b3      	cmp	r3, r6
 800c018:	f000 80c3 	beq.w	800c1a2 <getNextState+0x1b6>
                    return next_state;
                }

                //左旋回
                //北向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800c01c:	42b5      	cmp	r5, r6
 800c01e:	d10f      	bne.n	800c040 <getNextState+0x54>
 800c020:	42bc      	cmp	r4, r7
 800c022:	f000 8119 	beq.w	800c258 <getNextState+0x26c>
 800c026:	3c01      	subs	r4, #1
                    return next_state;
                }

                //Uターンして右旋回
                //北向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800c028:	42bc      	cmp	r4, r7
 800c02a:	d109      	bne.n	800c040 <getNextState+0x54>
                {
                    next_state->car = west;
 800c02c:	2306      	movs	r3, #6
 800c02e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800c030:	7803      	ldrb	r3, [r0, #0]
 800c032:	3b01      	subs	r3, #1
                //Uターンして右旋回
                //西向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
                {
                    next_state->car = south;
                    next_state->pos.x = now_state->pos.x + 1;
 800c034:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800c036:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backright;
 800c038:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y - 1;
 800c03a:	3b01      	subs	r3, #1
 800c03c:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backright;
 800c03e:	70c2      	strb	r2, [r0, #3]
#if DEBUG_ON
    printf("エラー in function 'getNextState'.\r\n");
#endif

    return next_state; //ここまで来てしまったらエラー
}
 800c040:	4608      	mov	r0, r1
 800c042:	bcf0      	pop	{r4, r5, r6, r7}
 800c044:	4770      	bx	lr
            if(next_node->rc == 1)
 800c046:	7953      	ldrb	r3, [r2, #5]
 800c048:	1e6a      	subs	r2, r5, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d05b      	beq.n	800c106 <getNextState+0x11a>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800c04e:	42b2      	cmp	r2, r6
 800c050:	f000 808f 	beq.w	800c172 <getNextState+0x186>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800c054:	3501      	adds	r5, #1
 800c056:	42ae      	cmp	r6, r5
 800c058:	d1f2      	bne.n	800c040 <getNextState+0x54>
 800c05a:	42bc      	cmp	r4, r7
 800c05c:	d1f0      	bne.n	800c040 <getNextState+0x54>
                    next_state->car = east;
 800c05e:	2302      	movs	r3, #2
 800c060:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 2;
 800c062:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = back;
 800c064:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x + 2;
 800c066:	3302      	adds	r3, #2
 800c068:	700b      	strb	r3, [r1, #0]
                    now_state->dir = back;
 800c06a:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c06c:	e7e8      	b.n	800c040 <getNextState+0x54>
            if(next_node->rc == 0)
 800c06e:	7953      	ldrb	r3, [r2, #5]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d039      	beq.n	800c0e8 <getNextState+0xfc>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800c074:	42b5      	cmp	r5, r6
 800c076:	f000 80a3 	beq.w	800c1c0 <getNextState+0x1d4>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800c07a:	3501      	adds	r5, #1
 800c07c:	42b5      	cmp	r5, r6
 800c07e:	d1df      	bne.n	800c040 <getNextState+0x54>
 800c080:	1e63      	subs	r3, r4, #1
 800c082:	42bb      	cmp	r3, r7
 800c084:	f000 80e0 	beq.w	800c248 <getNextState+0x25c>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800c088:	42bc      	cmp	r4, r7
 800c08a:	d1d9      	bne.n	800c040 <getNextState+0x54>
                    next_state->car = east;
 800c08c:	2302      	movs	r3, #2
 800c08e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800c090:	7803      	ldrb	r3, [r0, #0]
 800c092:	3301      	adds	r3, #1
 800c094:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800c096:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backright;
 800c098:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y + 1;
 800c09a:	3301      	adds	r3, #1
 800c09c:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backright;
 800c09e:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c0a0:	e7ce      	b.n	800c040 <getNextState+0x54>
            if(next_node->rc == 1)
 800c0a2:	7953      	ldrb	r3, [r2, #5]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d042      	beq.n	800c12e <getNextState+0x142>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800c0a8:	1c6b      	adds	r3, r5, #1
 800c0aa:	42b3      	cmp	r3, r6
 800c0ac:	d056      	beq.n	800c15c <getNextState+0x170>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800c0ae:	3d01      	subs	r5, #1
 800c0b0:	42ae      	cmp	r6, r5
 800c0b2:	d1c5      	bne.n	800c040 <getNextState+0x54>
 800c0b4:	42bc      	cmp	r4, r7
 800c0b6:	d1c3      	bne.n	800c040 <getNextState+0x54>
                    next_state->car = west;
 800c0b8:	2306      	movs	r3, #6
 800c0ba:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800c0bc:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = back;
 800c0be:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800c0c0:	3b02      	subs	r3, #2
 800c0c2:	700b      	strb	r3, [r1, #0]
                    now_state->dir = back;
 800c0c4:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c0c6:	e7bb      	b.n	800c040 <getNextState+0x54>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800c0c8:	42b5      	cmp	r5, r6
 800c0ca:	d1b9      	bne.n	800c040 <getNextState+0x54>
 800c0cc:	1c62      	adds	r2, r4, #1
 800c0ce:	42ba      	cmp	r2, r7
 800c0d0:	f000 8096 	beq.w	800c200 <getNextState+0x214>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800c0d4:	3c01      	subs	r4, #1
 800c0d6:	42a7      	cmp	r7, r4
 800c0d8:	d1b2      	bne.n	800c040 <getNextState+0x54>
                    next_state->car = south;
 800c0da:	2204      	movs	r2, #4
 800c0dc:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800c0de:	7843      	ldrb	r3, [r0, #1]
 800c0e0:	3b02      	subs	r3, #2
 800c0e2:	704b      	strb	r3, [r1, #1]
                    now_state->dir = back;
 800c0e4:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c0e6:	e7ab      	b.n	800c040 <getNextState+0x54>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800c0e8:	42b5      	cmp	r5, r6
 800c0ea:	d1a9      	bne.n	800c040 <getNextState+0x54>
 800c0ec:	1e62      	subs	r2, r4, #1
 800c0ee:	42ba      	cmp	r2, r7
 800c0f0:	d07f      	beq.n	800c1f2 <getNextState+0x206>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800c0f2:	3401      	adds	r4, #1
 800c0f4:	42a7      	cmp	r7, r4
 800c0f6:	d1a3      	bne.n	800c040 <getNextState+0x54>
                    next_state->car = north;
 800c0f8:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 2;
 800c0fa:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = back;
 800c0fc:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y + 2;
 800c0fe:	3302      	adds	r3, #2
 800c100:	704b      	strb	r3, [r1, #1]
                    now_state->dir = back;
 800c102:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c104:	e79c      	b.n	800c040 <getNextState+0x54>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800c106:	42b2      	cmp	r2, r6
 800c108:	d065      	beq.n	800c1d6 <getNextState+0x1ea>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800c10a:	42b5      	cmp	r5, r6
 800c10c:	d198      	bne.n	800c040 <getNextState+0x54>
 800c10e:	42bc      	cmp	r4, r7
 800c110:	f000 80ad 	beq.w	800c26e <getNextState+0x282>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800c114:	3401      	adds	r4, #1
 800c116:	42bc      	cmp	r4, r7
 800c118:	d192      	bne.n	800c040 <getNextState+0x54>
                    next_state->car = north;
 800c11a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800c11c:	7803      	ldrb	r3, [r0, #0]
 800c11e:	3301      	adds	r3, #1
 800c120:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800c122:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backleft;
 800c124:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y + 1;
 800c126:	3301      	adds	r3, #1
 800c128:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backleft;
 800c12a:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c12c:	e788      	b.n	800c040 <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800c12e:	42b5      	cmp	r5, r6
 800c130:	d02a      	beq.n	800c188 <getNextState+0x19c>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800c132:	3d01      	subs	r5, #1
 800c134:	42b5      	cmp	r5, r6
 800c136:	d183      	bne.n	800c040 <getNextState+0x54>
 800c138:	1c62      	adds	r2, r4, #1
 800c13a:	42ba      	cmp	r2, r7
 800c13c:	f000 8093 	beq.w	800c266 <getNextState+0x27a>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800c140:	42bc      	cmp	r4, r7
 800c142:	f47f af7d 	bne.w	800c040 <getNextState+0x54>
                    next_state->car = south;
 800c146:	2304      	movs	r3, #4
 800c148:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800c14a:	7803      	ldrb	r3, [r0, #0]
 800c14c:	3b01      	subs	r3, #1
 800c14e:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800c150:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = backleft;
 800c152:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y - 1;
 800c154:	3b01      	subs	r3, #1
 800c156:	704b      	strb	r3, [r1, #1]
                    now_state->dir = backleft;
 800c158:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c15a:	e771      	b.n	800c040 <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800c15c:	42bc      	cmp	r4, r7
 800c15e:	f47f af6f 	bne.w	800c040 <getNextState+0x54>
                    next_state->car = east;
 800c162:	2302      	movs	r3, #2
 800c164:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800c166:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = front;
 800c168:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x + 1;
 800c16a:	3301      	adds	r3, #1
 800c16c:	700b      	strb	r3, [r1, #0]
                    now_state->dir = front;
 800c16e:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c170:	e766      	b.n	800c040 <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800c172:	42bc      	cmp	r4, r7
 800c174:	f47f af64 	bne.w	800c040 <getNextState+0x54>
                    next_state->car = west;
 800c178:	2306      	movs	r3, #6
 800c17a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800c17c:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = front;
 800c17e:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800c180:	3b01      	subs	r3, #1
 800c182:	700b      	strb	r3, [r1, #0]
                    now_state->dir = front;
 800c184:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c186:	e75b      	b.n	800c040 <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800c188:	42bc      	cmp	r4, r7
 800c18a:	d04d      	beq.n	800c228 <getNextState+0x23c>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800c18c:	3401      	adds	r4, #1
 800c18e:	42bc      	cmp	r4, r7
 800c190:	f47f af56 	bne.w	800c040 <getNextState+0x54>
                    next_state->car = north;
 800c194:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800c196:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = left;
 800c198:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y + 1;
 800c19a:	3301      	adds	r3, #1
 800c19c:	704b      	strb	r3, [r1, #1]
                    now_state->dir = left;
 800c19e:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c1a0:	e74e      	b.n	800c040 <getNextState+0x54>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800c1a2:	42bc      	cmp	r4, r7
 800c1a4:	d032      	beq.n	800c20c <getNextState+0x220>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800c1a6:	42b5      	cmp	r5, r6
 800c1a8:	f104 34ff 	add.w	r4, r4, #4294967295
 800c1ac:	f43f af3c 	beq.w	800c028 <getNextState+0x3c>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800c1b0:	42bc      	cmp	r4, r7
 800c1b2:	f47f af45 	bne.w	800c040 <getNextState+0x54>
                    next_state->car = east;
 800c1b6:	2302      	movs	r3, #2
 800c1b8:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800c1ba:	7803      	ldrb	r3, [r0, #0]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	e7c6      	b.n	800c14e <getNextState+0x162>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800c1c0:	1e63      	subs	r3, r4, #1
 800c1c2:	42bb      	cmp	r3, r7
 800c1c4:	d038      	beq.n	800c238 <getNextState+0x24c>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800c1c6:	42bc      	cmp	r4, r7
 800c1c8:	f47f af3a 	bne.w	800c040 <getNextState+0x54>
                    next_state->car = west;
 800c1cc:	2306      	movs	r3, #6
 800c1ce:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800c1d0:	7803      	ldrb	r3, [r0, #0]
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	e7a4      	b.n	800c120 <getNextState+0x134>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800c1d6:	1c62      	adds	r2, r4, #1
 800c1d8:	42ba      	cmp	r2, r7
 800c1da:	d01e      	beq.n	800c21a <getNextState+0x22e>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800c1dc:	42bc      	cmp	r4, r7
 800c1de:	f47f af2f 	bne.w	800c040 <getNextState+0x54>
                    next_state->car = south;
 800c1e2:	2304      	movs	r3, #4
 800c1e4:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800c1e6:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = left;
 800c1e8:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y - 1;
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	704b      	strb	r3, [r1, #1]
                    now_state->dir = left;
 800c1ee:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c1f0:	e726      	b.n	800c040 <getNextState+0x54>
                    next_state->car = south;
 800c1f2:	2204      	movs	r2, #4
 800c1f4:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800c1f6:	7842      	ldrb	r2, [r0, #1]
 800c1f8:	3a01      	subs	r2, #1
 800c1fa:	704a      	strb	r2, [r1, #1]
                    now_state->dir = front;
 800c1fc:	70c3      	strb	r3, [r0, #3]
                    return next_state;
 800c1fe:	e71f      	b.n	800c040 <getNextState+0x54>
                    next_state->car = north;
 800c200:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800c202:	7842      	ldrb	r2, [r0, #1]
 800c204:	3201      	adds	r2, #1
 800c206:	704a      	strb	r2, [r1, #1]
                    now_state->dir = front;
 800c208:	70c3      	strb	r3, [r0, #3]
                    return next_state;
 800c20a:	e719      	b.n	800c040 <getNextState+0x54>
                    next_state->car = east;
 800c20c:	2202      	movs	r2, #2
 800c20e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800c210:	7803      	ldrb	r3, [r0, #0]
 800c212:	3301      	adds	r3, #1
 800c214:	700b      	strb	r3, [r1, #0]
                    now_state->dir = right;
 800c216:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c218:	e712      	b.n	800c040 <getNextState+0x54>
                    next_state->car = north;
 800c21a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800c21c:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = right;
 800c21e:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y + 1;
 800c220:	3301      	adds	r3, #1
 800c222:	704b      	strb	r3, [r1, #1]
                    now_state->dir = right;
 800c224:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c226:	e70b      	b.n	800c040 <getNextState+0x54>
                    next_state->car = south;
 800c228:	2304      	movs	r3, #4
 800c22a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800c22c:	7843      	ldrb	r3, [r0, #1]
                    now_state->dir = right;
 800c22e:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y - 1;
 800c230:	3b01      	subs	r3, #1
 800c232:	704b      	strb	r3, [r1, #1]
                    now_state->dir = right;
 800c234:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c236:	e703      	b.n	800c040 <getNextState+0x54>
                    next_state->car = west;
 800c238:	2306      	movs	r3, #6
 800c23a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800c23c:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = right;
 800c23e:	2202      	movs	r2, #2
                    next_state->pos.x = now_state->pos.x - 1;
 800c240:	3b01      	subs	r3, #1
 800c242:	700b      	strb	r3, [r1, #0]
                    now_state->dir = right;
 800c244:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c246:	e6fb      	b.n	800c040 <getNextState+0x54>
                    next_state->car = east;
 800c248:	2302      	movs	r3, #2
 800c24a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800c24c:	7803      	ldrb	r3, [r0, #0]
                    now_state->dir = left;
 800c24e:	2206      	movs	r2, #6
                    next_state->pos.x = now_state->pos.x + 1;
 800c250:	3301      	adds	r3, #1
 800c252:	700b      	strb	r3, [r1, #0]
                    now_state->dir = left;
 800c254:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c256:	e6f3      	b.n	800c040 <getNextState+0x54>
                    next_state->car = west;
 800c258:	2206      	movs	r2, #6
 800c25a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800c25c:	7803      	ldrb	r3, [r0, #0]
 800c25e:	3b01      	subs	r3, #1
 800c260:	700b      	strb	r3, [r1, #0]
                    now_state->dir = left;
 800c262:	70c2      	strb	r2, [r0, #3]
                    return next_state;
 800c264:	e6ec      	b.n	800c040 <getNextState+0x54>
                    next_state->car = north;
 800c266:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800c268:	7803      	ldrb	r3, [r0, #0]
 800c26a:	3b01      	subs	r3, #1
 800c26c:	e712      	b.n	800c094 <getNextState+0xa8>
                    next_state->car = south;
 800c26e:	2304      	movs	r3, #4
 800c270:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800c272:	7803      	ldrb	r3, [r0, #0]
 800c274:	3301      	adds	r3, #1
 800c276:	e6dd      	b.n	800c034 <getNextState+0x48>

0800c278 <getNowWallVirtual>:
    }
    return true;
}
//座標から壁の有無を取得
void getNowWallVirtual(maze_node *maze, profile *mouse, uint8_t now_x, uint8_t now_y)
{
 800c278:	b4f0      	push	{r4, r5, r6, r7}
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800c27a:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800c27e:	1c5c      	adds	r4, r3, #1
 800c280:	0076      	lsls	r6, r6, #1
 800c282:	1937      	adds	r7, r6, r4
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800c284:	1c55      	adds	r5, r2, #1
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800c286:	f810 7037 	ldrb.w	r7, [r0, r7, lsl #3]
 800c28a:	7b0c      	ldrb	r4, [r1, #12]
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800c28c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800c290:	441d      	add	r5, r3
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800c292:	f367 0401 	bfi	r4, r7, #0, #2
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800c296:	355a      	adds	r5, #90	; 0x5a
	mouse->now.wall.north = maze->RawNode[now_x][now_y+1].existence;//北
 800c298:	730c      	strb	r4, [r1, #12]
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800c29a:	f810 5035 	ldrb.w	r5, [r0, r5, lsl #3]
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800c29e:	441e      	add	r6, r3
	mouse->now.wall.east = maze->ColumnNode[now_x+1][now_y].existence;//東
 800c2a0:	f365 0483 	bfi	r4, r5, #2, #2
 800c2a4:	730c      	strb	r4, [r1, #12]
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800c2a6:	f810 5036 	ldrb.w	r5, [r0, r6, lsl #3]
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800c2aa:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800c2ae:	4413      	add	r3, r2
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800c2b0:	f365 1405 	bfi	r4, r5, #4, #2
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800c2b4:	335a      	adds	r3, #90	; 0x5a
	mouse->now.wall.south = maze->RawNode[now_x][now_y].existence;//南
 800c2b6:	730c      	strb	r4, [r1, #12]
	mouse->now.wall.west = maze->ColumnNode[now_x][now_y].existence;//西
 800c2b8:	f810 3033 	ldrb.w	r3, [r0, r3, lsl #3]
 800c2bc:	f363 1487 	bfi	r4, r3, #6, #2
 800c2c0:	730c      	strb	r4, [r1, #12]
}
 800c2c2:	bcf0      	pop	{r4, r5, r6, r7}
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop

0800c2c8 <getNextWallVirtual>:
void getNextWallVirtual(maze_node *maze, profile *mouse, uint8_t next_x, uint8_t next_y)
{
 800c2c8:	b4f0      	push	{r4, r5, r6, r7}
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800c2ca:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800c2ce:	1c5c      	adds	r4, r3, #1
 800c2d0:	0076      	lsls	r6, r6, #1
 800c2d2:	1937      	adds	r7, r6, r4
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800c2d4:	1c55      	adds	r5, r2, #1
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800c2d6:	f810 7037 	ldrb.w	r7, [r0, r7, lsl #3]
 800c2da:	7e0c      	ldrb	r4, [r1, #24]
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800c2dc:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800c2e0:	441d      	add	r5, r3
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800c2e2:	f367 0401 	bfi	r4, r7, #0, #2
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800c2e6:	355a      	adds	r5, #90	; 0x5a
	mouse->next.wall.north = maze->RawNode[next_x][next_y+1].existence;//北
 800c2e8:	760c      	strb	r4, [r1, #24]
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800c2ea:	f810 5035 	ldrb.w	r5, [r0, r5, lsl #3]
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800c2ee:	441e      	add	r6, r3
	mouse->next.wall.east = maze->ColumnNode[next_x+1][next_y].existence;//東
 800c2f0:	f365 0483 	bfi	r4, r5, #2, #2
 800c2f4:	760c      	strb	r4, [r1, #24]
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800c2f6:	f810 5036 	ldrb.w	r5, [r0, r6, lsl #3]
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800c2fa:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800c2fe:	4413      	add	r3, r2
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800c300:	f365 1405 	bfi	r4, r5, #4, #2
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800c304:	335a      	adds	r3, #90	; 0x5a
	mouse->next.wall.south = maze->RawNode[next_x][next_y].existence;//南
 800c306:	760c      	strb	r4, [r1, #24]
	mouse->next.wall.west = maze->ColumnNode[next_x][next_y].existence;//西
 800c308:	f810 3033 	ldrb.w	r3, [r0, r3, lsl #3]
 800c30c:	f363 1487 	bfi	r4, r3, #6, #2
 800c310:	760c      	strb	r4, [r1, #24]
}
 800c312:	bcf0      	pop	{r4, r5, r6, r7}
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop

0800c318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c31c:	2400      	movs	r4, #0
{
 800c31e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c320:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c324:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c328:	4b45      	ldr	r3, [pc, #276]	; (800c440 <MX_GPIO_Init+0x128>)
 800c32a:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c32c:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c32e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c330:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800c450 <MX_GPIO_Init+0x138>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800c334:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800c454 <MX_GPIO_Init+0x13c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c338:	4f42      	ldr	r7, [pc, #264]	; (800c444 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c33a:	4e43      	ldr	r6, [pc, #268]	; (800c448 <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c33c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c340:	631a      	str	r2, [r3, #48]	; 0x30
 800c342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c344:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c348:	9200      	str	r2, [sp, #0]
 800c34a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c34c:	9401      	str	r4, [sp, #4]
 800c34e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c350:	f042 0204 	orr.w	r2, r2, #4
 800c354:	631a      	str	r2, [r3, #48]	; 0x30
 800c356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c358:	f002 0204 	and.w	r2, r2, #4
 800c35c:	9201      	str	r2, [sp, #4]
 800c35e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c360:	9402      	str	r4, [sp, #8]
 800c362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c364:	f042 0201 	orr.w	r2, r2, #1
 800c368:	631a      	str	r2, [r3, #48]	; 0x30
 800c36a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c36c:	f002 0201 	and.w	r2, r2, #1
 800c370:	9202      	str	r2, [sp, #8]
 800c372:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c374:	9403      	str	r4, [sp, #12]
 800c376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c378:	f042 0202 	orr.w	r2, r2, #2
 800c37c:	631a      	str	r2, [r3, #48]	; 0x30
 800c37e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c380:	f002 0202 	and.w	r2, r2, #2
 800c384:	9203      	str	r2, [sp, #12]
 800c386:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c388:	9404      	str	r4, [sp, #16]
 800c38a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c38c:	f042 0208 	orr.w	r2, r2, #8
 800c390:	631a      	str	r2, [r3, #48]	; 0x30
 800c392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c394:	f003 0308 	and.w	r3, r3, #8
 800c398:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c39a:	4622      	mov	r2, r4
 800c39c:	4648      	mov	r0, r9
 800c39e:	2105      	movs	r1, #5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c3a0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c3a2:	f003 fc0b 	bl	800fbbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800c3a6:	4622      	mov	r2, r4
 800c3a8:	4640      	mov	r0, r8
 800c3aa:	f44f 7140 	mov.w	r1, #768	; 0x300
 800c3ae:	f003 fc05 	bl	800fbbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c3b2:	4622      	mov	r2, r4
 800c3b4:	4638      	mov	r0, r7
 800c3b6:	2104      	movs	r1, #4
 800c3b8:	f003 fc00 	bl	800fbbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c3bc:	4622      	mov	r2, r4
 800c3be:	4630      	mov	r0, r6
 800c3c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c3c4:	f003 fbfa 	bl	800fbbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c3c8:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3ca:	4648      	mov	r0, r9
 800c3cc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800c3ce:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c3d0:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3d4:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3d8:	f003 faec 	bl	800f9b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c3dc:	4b1b      	ldr	r3, [pc, #108]	; (800c44c <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3de:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c3e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c3e4:	a905      	add	r1, sp, #20
 800c3e6:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c3e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c3ec:	f003 fae2 	bl	800f9b4 <HAL_GPIO_Init>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c3f0:	4640      	mov	r0, r8
 800c3f2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800c3f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c3f8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3fa:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3fe:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c400:	f003 fad8 	bl	800f9b4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c404:	4638      	mov	r0, r7
 800c406:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c408:	2304      	movs	r3, #4
 800c40a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c40c:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c410:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c412:	f003 facf 	bl	800f9b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c416:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c41a:	a905      	add	r1, sp, #20
 800c41c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c41e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c420:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c424:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c426:	f003 fac5 	bl	800f9b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800c42a:	4622      	mov	r2, r4
 800c42c:	4621      	mov	r1, r4
 800c42e:	2028      	movs	r0, #40	; 0x28
 800c430:	f002 ff34 	bl	800f29c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c434:	2028      	movs	r0, #40	; 0x28
 800c436:	f002 ff67 	bl	800f308 <HAL_NVIC_EnableIRQ>

}
 800c43a:	b00b      	add	sp, #44	; 0x2c
 800c43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c440:	40023800 	.word	0x40023800
 800c444:	40020c00 	.word	0x40020c00
 800c448:	40020400 	.word	0x40020400
 800c44c:	10110000 	.word	0x10110000
 800c450:	40020000 	.word	0x40020000
 800c454:	40020800 	.word	0x40020800

0800c458 <MX_DMA_Init>:
{
 800c458:	b510      	push	{r4, lr}
 800c45a:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c45c:	2400      	movs	r4, #0
 800c45e:	4b0f      	ldr	r3, [pc, #60]	; (800c49c <MX_DMA_Init+0x44>)
 800c460:	9401      	str	r4, [sp, #4]
 800c462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c464:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c468:	631a      	str	r2, [r3, #48]	; 0x30
 800c46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c46c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c470:	4622      	mov	r2, r4
 800c472:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c474:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c476:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c478:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c47a:	f002 ff0f 	bl	800f29c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c47e:	2038      	movs	r0, #56	; 0x38
 800c480:	f002 ff42 	bl	800f308 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800c484:	4622      	mov	r2, r4
 800c486:	4621      	mov	r1, r4
 800c488:	203a      	movs	r0, #58	; 0x3a
 800c48a:	f002 ff07 	bl	800f29c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c48e:	203a      	movs	r0, #58	; 0x3a
}
 800c490:	b002      	add	sp, #8
 800c492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c496:	f002 bf37 	b.w	800f308 <HAL_NVIC_EnableIRQ>
 800c49a:	bf00      	nop
 800c49c:	40023800 	.word	0x40023800

0800c4a0 <MX_ADC1_Init>:
{
 800c4a0:	b570      	push	{r4, r5, r6, lr}
  hadc1.Instance = ADC1;
 800c4a2:	4c21      	ldr	r4, [pc, #132]	; (800c528 <MX_ADC1_Init+0x88>)
 800c4a4:	4b21      	ldr	r3, [pc, #132]	; (800c52c <MX_ADC1_Init+0x8c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c4a6:	4a22      	ldr	r2, [pc, #136]	; (800c530 <MX_ADC1_Init+0x90>)
  hadc1.Instance = ADC1;
 800c4a8:	6023      	str	r3, [r4, #0]
{
 800c4aa:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c4ac:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800c4ae:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c4b0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc1.Init.NbrOfConversion = 3;
 800c4b4:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c4b6:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c4b8:	6061      	str	r1, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c4ba:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c4bc:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c4be:	9300      	str	r3, [sp, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c4c0:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c4c4:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c4c6:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c4c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c4cc:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 800c4ce:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800c4d0:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800c4d2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c4d6:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 3;
 800c4d8:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c4da:	f002 fc53 	bl	800ed84 <HAL_ADC_Init>
 800c4de:	b108      	cbz	r0, 800c4e4 <MX_ADC1_Init+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c4e0:	b672      	cpsid	i
 800c4e2:	e7fe      	b.n	800c4e2 <MX_ADC1_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_10;
 800c4e4:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c4e6:	4669      	mov	r1, sp
 800c4e8:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c4ea:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c4ec:	9602      	str	r6, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_10;
 800c4ee:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c4f0:	f002 fe1a 	bl	800f128 <HAL_ADC_ConfigChannel>
 800c4f4:	b108      	cbz	r0, 800c4fa <MX_ADC1_Init+0x5a>
 800c4f6:	b672      	cpsid	i
 800c4f8:	e7fe      	b.n	800c4f8 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_14;
 800c4fa:	220e      	movs	r2, #14
  sConfig.Rank = 2;
 800c4fc:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c4fe:	4669      	mov	r1, sp
 800c500:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 800c502:	9200      	str	r2, [sp, #0]
  sConfig.Rank = 2;
 800c504:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c506:	f002 fe0f 	bl	800f128 <HAL_ADC_ConfigChannel>
 800c50a:	b108      	cbz	r0, 800c510 <MX_ADC1_Init+0x70>
 800c50c:	b672      	cpsid	i
 800c50e:	e7fe      	b.n	800c50e <MX_ADC1_Init+0x6e>
  sConfig.Channel = ADC_CHANNEL_9;
 800c510:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c512:	4669      	mov	r1, sp
 800c514:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800c516:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c51a:	f002 fe05 	bl	800f128 <HAL_ADC_ConfigChannel>
 800c51e:	b108      	cbz	r0, 800c524 <MX_ADC1_Init+0x84>
 800c520:	b672      	cpsid	i
 800c522:	e7fe      	b.n	800c522 <MX_ADC1_Init+0x82>
}
 800c524:	b004      	add	sp, #16
 800c526:	bd70      	pop	{r4, r5, r6, pc}
 800c528:	20001e84 	.word	0x20001e84
 800c52c:	40012000 	.word	0x40012000
 800c530:	0f000001 	.word	0x0f000001

0800c534 <MX_ADC2_Init>:
{
 800c534:	b570      	push	{r4, r5, r6, lr}
  hadc2.Instance = ADC2;
 800c536:	4c1c      	ldr	r4, [pc, #112]	; (800c5a8 <MX_ADC2_Init+0x74>)
 800c538:	4b1c      	ldr	r3, [pc, #112]	; (800c5ac <MX_ADC2_Init+0x78>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c53a:	4a1d      	ldr	r2, [pc, #116]	; (800c5b0 <MX_ADC2_Init+0x7c>)
  hadc2.Instance = ADC2;
 800c53c:	6023      	str	r3, [r4, #0]
{
 800c53e:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c540:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ENABLE;
 800c542:	2501      	movs	r5, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c544:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc2.Init.NbrOfConversion = 2;
 800c548:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c54a:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c54c:	6061      	str	r1, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c54e:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800c550:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c552:	9300      	str	r3, [sp, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800c554:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c558:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c55a:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c55c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c560:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ENABLE;
 800c562:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800c564:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800c566:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c56a:	6165      	str	r5, [r4, #20]
  hadc2.Init.NbrOfConversion = 2;
 800c56c:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c56e:	f002 fc09 	bl	800ed84 <HAL_ADC_Init>
 800c572:	b108      	cbz	r0, 800c578 <MX_ADC2_Init+0x44>
 800c574:	b672      	cpsid	i
 800c576:	e7fe      	b.n	800c576 <MX_ADC2_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_11;
 800c578:	220b      	movs	r2, #11
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c57a:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c57c:	4669      	mov	r1, sp
 800c57e:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c580:	9501      	str	r5, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_11;
 800c582:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c584:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c586:	f002 fdcf 	bl	800f128 <HAL_ADC_ConfigChannel>
 800c58a:	b108      	cbz	r0, 800c590 <MX_ADC2_Init+0x5c>
 800c58c:	b672      	cpsid	i
 800c58e:	e7fe      	b.n	800c58e <MX_ADC2_Init+0x5a>
  sConfig.Channel = ADC_CHANNEL_15;
 800c590:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c592:	4669      	mov	r1, sp
 800c594:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_15;
 800c596:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c59a:	f002 fdc5 	bl	800f128 <HAL_ADC_ConfigChannel>
 800c59e:	b108      	cbz	r0, 800c5a4 <MX_ADC2_Init+0x70>
 800c5a0:	b672      	cpsid	i
 800c5a2:	e7fe      	b.n	800c5a2 <MX_ADC2_Init+0x6e>
}
 800c5a4:	b004      	add	sp, #16
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}
 800c5a8:	20001da4 	.word	0x20001da4
 800c5ac:	40012100 	.word	0x40012100
 800c5b0:	0f000001 	.word	0x0f000001

0800c5b4 <MX_TIM3_Init>:
{
 800c5b4:	b530      	push	{r4, r5, lr}
 800c5b6:	b08d      	sub	sp, #52	; 0x34
  htim3.Instance = TIM3;
 800c5b8:	4c14      	ldr	r4, [pc, #80]	; (800c60c <MX_TIM3_Init+0x58>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c5ba:	2220      	movs	r2, #32
 800c5bc:	2100      	movs	r1, #0
 800c5be:	a804      	add	r0, sp, #16
 800c5c0:	f005 fb87 	bl	8011cd2 <memset>
  htim3.Instance = TIM3;
 800c5c4:	4b12      	ldr	r3, [pc, #72]	; (800c610 <MX_TIM3_Init+0x5c>)
 800c5c6:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 60000-1;
 800c5c8:	f64e 225f 	movw	r2, #59999	; 0xea5f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c5cc:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c5ce:	2503      	movs	r5, #3
  htim3.Init.Period = 60000-1;
 800c5d0:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c5d2:	4620      	mov	r0, r4
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c5d4:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c5d6:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 800c5d8:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c5da:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c5dc:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c5de:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c5e0:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c5e2:	9302      	str	r3, [sp, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c5e4:	9503      	str	r5, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c5e6:	9205      	str	r2, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c5e8:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c5ea:	f004 fd29 	bl	8011040 <HAL_TIM_Encoder_Init>
 800c5ee:	b108      	cbz	r0, 800c5f4 <MX_TIM3_Init+0x40>
 800c5f0:	b672      	cpsid	i
 800c5f2:	e7fe      	b.n	800c5f2 <MX_TIM3_Init+0x3e>
 800c5f4:	4603      	mov	r3, r0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c5f6:	a901      	add	r1, sp, #4
 800c5f8:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c5fa:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c5fe:	f004 fecf 	bl	80113a0 <HAL_TIMEx_MasterConfigSynchronization>
 800c602:	b108      	cbz	r0, 800c608 <MX_TIM3_Init+0x54>
 800c604:	b672      	cpsid	i
 800c606:	e7fe      	b.n	800c606 <MX_TIM3_Init+0x52>
}
 800c608:	b00d      	add	sp, #52	; 0x34
 800c60a:	bd30      	pop	{r4, r5, pc}
 800c60c:	20001dec 	.word	0x20001dec
 800c610:	40000400 	.word	0x40000400

0800c614 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800c614:	4b0a      	ldr	r3, [pc, #40]	; (800c640 <MX_USART1_UART_Init+0x2c>)
 800c616:	4a0b      	ldr	r2, [pc, #44]	; (800c644 <MX_USART1_UART_Init+0x30>)
{
 800c618:	b510      	push	{r4, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c61a:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 800c61c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c61e:	f44f 5416 	mov.w	r4, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c622:	2200      	movs	r2, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c624:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 800c626:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c628:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c62a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c62e:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c630:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c634:	f004 ffcc 	bl	80115d0 <HAL_UART_Init>
 800c638:	b108      	cbz	r0, 800c63e <MX_USART1_UART_Init+0x2a>
 800c63a:	b672      	cpsid	i
 800c63c:	e7fe      	b.n	800c63c <MX_USART1_UART_Init+0x28>
}
 800c63e:	bd10      	pop	{r4, pc}
 800c640:	20001ecc 	.word	0x20001ecc
 800c644:	40011000 	.word	0x40011000

0800c648 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800c648:	b500      	push	{lr}
 800c64a:	b083      	sub	sp, #12
 800c64c:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c64e:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 800c652:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c656:	2201      	movs	r2, #1
 800c658:	4803      	ldr	r0, [pc, #12]	; (800c668 <__io_putchar+0x20>)
 800c65a:	f004 ffe9 	bl	8011630 <HAL_UART_Transmit>
}
 800c65e:	9801      	ldr	r0, [sp, #4]
 800c660:	b003      	add	sp, #12
 800c662:	f85d fb04 	ldr.w	pc, [sp], #4
 800c666:	bf00      	nop
 800c668:	20001ecc 	.word	0x20001ecc

0800c66c <__io_getchar>:
int __io_getchar(void) {
 800c66c:	b510      	push	{r4, lr}
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c66e:	4c07      	ldr	r4, [pc, #28]	; (800c68c <__io_getchar+0x20>)
int __io_getchar(void) {
 800c670:	b082      	sub	sp, #8
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c672:	230a      	movs	r3, #10
 800c674:	2201      	movs	r2, #1
 800c676:	f10d 0107 	add.w	r1, sp, #7
 800c67a:	4620      	mov	r0, r4
 800c67c:	f005 f836 	bl	80116ec <HAL_UART_Receive>
while(Status != HAL_OK)
 800c680:	2800      	cmp	r0, #0
 800c682:	d1f6      	bne.n	800c672 <__io_getchar+0x6>
}
 800c684:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c688:	b002      	add	sp, #8
 800c68a:	bd10      	pop	{r4, pc}
 800c68c:	20001ecc 	.word	0x20001ecc

0800c690 <SystemClock_Config>:
{
 800c690:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c692:	2300      	movs	r3, #0
{
 800c694:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c696:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800c69a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c69e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c6a2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c6a6:	4920      	ldr	r1, [pc, #128]	; (800c728 <SystemClock_Config+0x98>)
 800c6a8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c6aa:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c6ac:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6ae:	4a1f      	ldr	r2, [pc, #124]	; (800c72c <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800c6b0:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800c6b4:	6408      	str	r0, [r1, #64]	; 0x40
 800c6b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c6b8:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800c6bc:	9101      	str	r1, [sp, #4]
 800c6be:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6c0:	9302      	str	r3, [sp, #8]
 800c6c2:	6813      	ldr	r3, [r2, #0]
 800c6c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c6c8:	6013      	str	r3, [r2, #0]
 800c6ca:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c6cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c6d4:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6d6:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c6d8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c6da:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c6dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c6e0:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c6e2:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c6e4:	22a8      	movs	r2, #168	; 0xa8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c6e6:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6e8:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c6ea:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c6ec:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c6ee:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c6f2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c6f4:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c6f6:	f003 fa71 	bl	800fbdc <HAL_RCC_OscConfig>
 800c6fa:	b108      	cbz	r0, 800c700 <SystemClock_Config+0x70>
 800c6fc:	b672      	cpsid	i
 800c6fe:	e7fe      	b.n	800c6fe <SystemClock_Config+0x6e>
 800c700:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c702:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c704:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c708:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c70c:	a803      	add	r0, sp, #12
 800c70e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c710:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c712:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c714:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c716:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c71a:	f003 fc73 	bl	8010004 <HAL_RCC_ClockConfig>
 800c71e:	b108      	cbz	r0, 800c724 <SystemClock_Config+0x94>
 800c720:	b672      	cpsid	i
 800c722:	e7fe      	b.n	800c722 <SystemClock_Config+0x92>
}
 800c724:	b014      	add	sp, #80	; 0x50
 800c726:	bd70      	pop	{r4, r5, r6, pc}
 800c728:	40023800 	.word	0x40023800
 800c72c:	40007000 	.word	0x40007000

0800c730 <main>:
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 800c734:	f002 fae8 	bl	800ed08 <HAL_Init>
  MX_GPIO_Init();
 800c738:	f7ff fdee 	bl	800c318 <MX_GPIO_Init>
  MX_DMA_Init();
 800c73c:	f7ff fe8c 	bl	800c458 <MX_DMA_Init>
  MX_ADC1_Init();
 800c740:	f7ff feae 	bl	800c4a0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800c744:	f7ff fef6 	bl	800c534 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800c748:	f7ff ff64 	bl	800c614 <MX_USART1_UART_Init>
	ADCStart();
 800c74c:	f001 fa6a 	bl	800dc24 <ADCStart>
	MX_TIM3_Init();
 800c750:	f7ff ff30 	bl	800c5b4 <MX_TIM3_Init>
	BatteryCheck( (int)adc1[2] );
 800c754:	4ba0      	ldr	r3, [pc, #640]	; (800c9d8 <main+0x2a8>)
  htim2.Instance = TIM2;
 800c756:	4ca1      	ldr	r4, [pc, #644]	; (800c9dc <main+0x2ac>)
	BatteryCheck( (int)adc1[2] );
 800c758:	6898      	ldr	r0, [r3, #8]
 800c75a:	f002 f9cb 	bl	800eaf4 <BatteryCheck>
	ADCStop();
 800c75e:	f001 fa7f 	bl	800dc60 <ADCStop>
	ModeSelect(0, 7, &startup_mode);
 800c762:	f10d 0207 	add.w	r2, sp, #7
 800c766:	2107      	movs	r1, #7
 800c768:	2000      	movs	r0, #0
 800c76a:	f002 fa1d 	bl	800eba8 <ModeSelect>
	Signal( startup_mode );
 800c76e:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800c772:	f002 f9ad 	bl	800ead0 <Signal>
  htim2.Init.Period = 4200-1;
 800c776:	f241 0667 	movw	r6, #4199	; 0x1067
  SystemClock_Config();
 800c77a:	f7ff ff89 	bl	800c690 <SystemClock_Config>
  MX_GPIO_Init();
 800c77e:	f7ff fdcb 	bl	800c318 <MX_GPIO_Init>
  MX_DMA_Init();
 800c782:	f7ff fe69 	bl	800c458 <MX_DMA_Init>
  MX_ADC1_Init();
 800c786:	f7ff fe8b 	bl	800c4a0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800c78a:	f7ff fed3 	bl	800c534 <MX_ADC2_Init>
  MX_TIM3_Init();
 800c78e:	f7ff ff11 	bl	800c5b4 <MX_TIM3_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c792:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800c794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c798:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800c79a:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 0;
 800c79c:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c79e:	9308      	str	r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c7a0:	9304      	str	r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c7a2:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c7a4:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c7a6:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c7a8:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c7aa:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800c7ae:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c7b0:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c7b2:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800c7b6:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800c7ba:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  htim2.Init.Period = 4200-1;
 800c7be:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c7c0:	f004 fbea 	bl	8010f98 <HAL_TIM_Base_Init>
 800c7c4:	b108      	cbz	r0, 800c7ca <main+0x9a>
 800c7c6:	b672      	cpsid	i
 800c7c8:	e7fe      	b.n	800c7c8 <main+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c7ca:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c7ce:	a908      	add	r1, sp, #32
 800c7d0:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c7d2:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c7d4:	f004 fa16 	bl	8010c04 <HAL_TIM_ConfigClockSource>
 800c7d8:	b108      	cbz	r0, 800c7de <main+0xae>
 800c7da:	b672      	cpsid	i
 800c7dc:	e7fe      	b.n	800c7dc <main+0xac>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f004 fc12 	bl	8011008 <HAL_TIM_PWM_Init>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	b108      	cbz	r0, 800c7ec <main+0xbc>
 800c7e8:	b672      	cpsid	i
 800c7ea:	e7fe      	b.n	800c7ea <main+0xba>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c7ec:	a904      	add	r1, sp, #16
 800c7ee:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c7f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c7f4:	f004 fdd4 	bl	80113a0 <HAL_TIMEx_MasterConfigSynchronization>
 800c7f8:	b108      	cbz	r0, 800c7fe <main+0xce>
 800c7fa:	b672      	cpsid	i
 800c7fc:	e7fe      	b.n	800c7fc <main+0xcc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c7fe:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c800:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c804:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c806:	220c      	movs	r2, #12
 800c808:	a90f      	add	r1, sp, #60	; 0x3c
 800c80a:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c80c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c80e:	f004 fccd 	bl	80111ac <HAL_TIM_PWM_ConfigChannel>
 800c812:	4605      	mov	r5, r0
 800c814:	b108      	cbz	r0, 800c81a <main+0xea>
 800c816:	b672      	cpsid	i
 800c818:	e7fe      	b.n	800c818 <main+0xe8>
  HAL_TIM_MspPostInit(&htim2);
 800c81a:	4620      	mov	r0, r4
 800c81c:	f000 fb5a 	bl	800ced4 <HAL_TIM_MspPostInit>
  hspi3.Instance = SPI3;
 800c820:	4b6f      	ldr	r3, [pc, #444]	; (800c9e0 <main+0x2b0>)
 800c822:	4a70      	ldr	r2, [pc, #448]	; (800c9e4 <main+0x2b4>)
 800c824:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c826:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c82a:	2202      	movs	r2, #2
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c82c:	6059      	str	r1, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c82e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c830:	2101      	movs	r1, #1
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c832:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c836:	6159      	str	r1, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c838:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c83a:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800c83c:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c83e:	4618      	mov	r0, r3
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800c840:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800c844:	e9c3 5508 	strd	r5, r5, [r3, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c848:	629d      	str	r5, [r3, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c84a:	61d9      	str	r1, [r3, #28]
  hspi3.Init.CRCPolynomial = 10;
 800c84c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c84e:	f003 fe2f 	bl	80104b0 <HAL_SPI_Init>
 800c852:	4604      	mov	r4, r0
 800c854:	b108      	cbz	r0, 800c85a <main+0x12a>
 800c856:	b672      	cpsid	i
 800c858:	e7fe      	b.n	800c858 <main+0x128>
  htim5.Instance = TIM5;
 800c85a:	4d63      	ldr	r5, [pc, #396]	; (800c9e8 <main+0x2b8>)
  MX_USART1_UART_Init();
 800c85c:	f7ff feda 	bl	800c614 <MX_USART1_UART_Init>
  htim5.Instance = TIM5;
 800c860:	4b62      	ldr	r3, [pc, #392]	; (800c9ec <main+0x2bc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c862:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c864:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c866:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c86a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c86e:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c872:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800c876:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800c87a:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c87e:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim5.Init.Period = 4200-1;
 800c882:	60ee      	str	r6, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c884:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c886:	61ac      	str	r4, [r5, #24]
  htim5.Instance = TIM5;
 800c888:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c88a:	f004 fb85 	bl	8010f98 <HAL_TIM_Base_Init>
 800c88e:	b108      	cbz	r0, 800c894 <main+0x164>
 800c890:	b672      	cpsid	i
 800c892:	e7fe      	b.n	800c892 <main+0x162>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c894:	a908      	add	r1, sp, #32
 800c896:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c898:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c89a:	f004 f9b3 	bl	8010c04 <HAL_TIM_ConfigClockSource>
 800c89e:	b108      	cbz	r0, 800c8a4 <main+0x174>
 800c8a0:	b672      	cpsid	i
 800c8a2:	e7fe      	b.n	800c8a2 <main+0x172>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f004 fbaf 	bl	8011008 <HAL_TIM_PWM_Init>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	b108      	cbz	r0, 800c8b2 <main+0x182>
 800c8ae:	b672      	cpsid	i
 800c8b0:	e7fe      	b.n	800c8b0 <main+0x180>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c8b6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c8ba:	f004 fd71 	bl	80113a0 <HAL_TIMEx_MasterConfigSynchronization>
 800c8be:	b108      	cbz	r0, 800c8c4 <main+0x194>
 800c8c0:	b672      	cpsid	i
 800c8c2:	e7fe      	b.n	800c8c2 <main+0x192>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c8c4:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 0;
 800c8c6:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c8c8:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c8ca:	2204      	movs	r2, #4
 800c8cc:	a90f      	add	r1, sp, #60	; 0x3c
 800c8ce:	4846      	ldr	r0, [pc, #280]	; (800c9e8 <main+0x2b8>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c8d0:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c8d2:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c8d6:	f004 fc69 	bl	80111ac <HAL_TIM_PWM_ConfigChannel>
 800c8da:	4605      	mov	r5, r0
 800c8dc:	b108      	cbz	r0, 800c8e2 <main+0x1b2>
 800c8de:	b672      	cpsid	i
 800c8e0:	e7fe      	b.n	800c8e0 <main+0x1b0>
  HAL_TIM_MspPostInit(&htim5);
 800c8e2:	4841      	ldr	r0, [pc, #260]	; (800c9e8 <main+0x2b8>)
  htim4.Instance = TIM4;
 800c8e4:	4c42      	ldr	r4, [pc, #264]	; (800c9f0 <main+0x2c0>)
  HAL_TIM_MspPostInit(&htim5);
 800c8e6:	f000 faf5 	bl	800ced4 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c8ea:	2220      	movs	r2, #32
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	a810      	add	r0, sp, #64	; 0x40
 800c8f0:	f005 f9ef 	bl	8011cd2 <memset>
  htim4.Instance = TIM4;
 800c8f4:	4b3f      	ldr	r3, [pc, #252]	; (800c9f4 <main+0x2c4>)
 800c8f6:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 60000-1;
 800c8f8:	f64e 215f 	movw	r1, #59999	; 0xea5f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c8fc:	2301      	movs	r3, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c8fe:	2203      	movs	r2, #3
  htim4.Init.Period = 60000-1;
 800c900:	60e1      	str	r1, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c902:	4620      	mov	r0, r4
 800c904:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c906:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c908:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c90a:	9508      	str	r5, [sp, #32]
 800c90c:	9509      	str	r5, [sp, #36]	; 0x24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c90e:	e9c4 5501 	strd	r5, r5, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c912:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c914:	61a5      	str	r5, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c916:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c918:	f004 fb92 	bl	8011040 <HAL_TIM_Encoder_Init>
 800c91c:	4603      	mov	r3, r0
 800c91e:	b108      	cbz	r0, 800c924 <main+0x1f4>
 800c920:	b672      	cpsid	i
 800c922:	e7fe      	b.n	800c922 <main+0x1f2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c924:	4620      	mov	r0, r4
 800c926:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c928:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c92c:	f004 fd38 	bl	80113a0 <HAL_TIMEx_MasterConfigSynchronization>
 800c930:	4604      	mov	r4, r0
 800c932:	b108      	cbz	r0, 800c938 <main+0x208>
 800c934:	b672      	cpsid	i
 800c936:	e7fe      	b.n	800c936 <main+0x206>
  htim8.Instance = TIM8;
 800c938:	4d2f      	ldr	r5, [pc, #188]	; (800c9f8 <main+0x2c8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c93a:	9004      	str	r0, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c93c:	4601      	mov	r1, r0
 800c93e:	2220      	movs	r2, #32
 800c940:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c942:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c946:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c948:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c94a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c94e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800c952:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800c956:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c958:	9403      	str	r4, [sp, #12]
  htim8.Init.Prescaler = 168-1;
 800c95a:	26a7      	movs	r6, #167	; 0xa7
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c95c:	f005 f9b9 	bl	8011cd2 <memset>
  htim8.Instance = TIM8;
 800c960:	4926      	ldr	r1, [pc, #152]	; (800c9fc <main+0x2cc>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c962:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 50-1;
 800c964:	2231      	movs	r2, #49	; 0x31
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c966:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c968:	4628      	mov	r0, r5
  htim8.Init.RepetitionCounter = 0;
 800c96a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim8.Instance = TIM8;
 800c96e:	6029      	str	r1, [r5, #0]
  htim8.Init.Period = 50-1;
 800c970:	60ea      	str	r2, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c972:	61ab      	str	r3, [r5, #24]
  htim8.Init.Prescaler = 168-1;
 800c974:	606e      	str	r6, [r5, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c976:	f004 fb0f 	bl	8010f98 <HAL_TIM_Base_Init>
 800c97a:	b108      	cbz	r0, 800c980 <main+0x250>
 800c97c:	b672      	cpsid	i
 800c97e:	e7fe      	b.n	800c97e <main+0x24e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c984:	a904      	add	r1, sp, #16
 800c986:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c988:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c98a:	f004 f93b 	bl	8010c04 <HAL_TIM_ConfigClockSource>
 800c98e:	b108      	cbz	r0, 800c994 <main+0x264>
 800c990:	b672      	cpsid	i
 800c992:	e7fe      	b.n	800c992 <main+0x262>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800c994:	4628      	mov	r0, r5
 800c996:	f004 fb1b 	bl	8010fd0 <HAL_TIM_OC_Init>
 800c99a:	4603      	mov	r3, r0
 800c99c:	b108      	cbz	r0, 800c9a2 <main+0x272>
 800c99e:	b672      	cpsid	i
 800c9a0:	e7fe      	b.n	800c9a0 <main+0x270>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c9a2:	a902      	add	r1, sp, #8
 800c9a4:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c9a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c9aa:	f004 fcf9 	bl	80113a0 <HAL_TIMEx_MasterConfigSynchronization>
 800c9ae:	b108      	cbz	r0, 800c9b4 <main+0x284>
 800c9b0:	b672      	cpsid	i
 800c9b2:	e7fe      	b.n	800c9b2 <main+0x282>
  sConfigOC.Pulse = 25-1;
 800c9b4:	2318      	movs	r3, #24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c9b6:	4602      	mov	r2, r0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c9b8:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c9bc:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c9c0:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c9c2:	2430      	movs	r4, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c9c4:	a908      	add	r1, sp, #32
 800c9c6:	4628      	mov	r0, r5
  sConfigOC.Pulse = 25-1;
 800c9c8:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c9ca:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c9cc:	f004 fbbe 	bl	801114c <HAL_TIM_OC_ConfigChannel>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	b1a8      	cbz	r0, 800ca00 <main+0x2d0>
 800c9d4:	b672      	cpsid	i
 800c9d6:	e7fe      	b.n	800c9d6 <main+0x2a6>
 800c9d8:	200012b4 	.word	0x200012b4
 800c9dc:	20001234 	.word	0x20001234
 800c9e0:	20001e2c 	.word	0x20001e2c
 800c9e4:	40003c00 	.word	0x40003c00
 800c9e8:	20001274 	.word	0x20001274
 800c9ec:	40000c00 	.word	0x40000c00
 800c9f0:	20001d64 	.word	0x20001d64
 800c9f4:	40000800 	.word	0x40000800
 800c9f8:	20001d24 	.word	0x20001d24
 800c9fc:	40010400 	.word	0x40010400
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800ca00:	6829      	ldr	r1, [r5, #0]
 800ca02:	698a      	ldr	r2, [r1, #24]
 800ca04:	f042 0208 	orr.w	r2, r2, #8
 800ca08:	618a      	str	r2, [r1, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800ca0a:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ca0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800ca10:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ca12:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800ca16:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ca1a:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ca1c:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ca1e:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800ca20:	f004 fd04 	bl	801142c <HAL_TIMEx_ConfigBreakDeadTime>
 800ca24:	4604      	mov	r4, r0
 800ca26:	b108      	cbz	r0, 800ca2c <main+0x2fc>
 800ca28:	b672      	cpsid	i
 800ca2a:	e7fe      	b.n	800ca2a <main+0x2fa>
  HAL_TIM_MspPostInit(&htim8);
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	f000 fa51 	bl	800ced4 <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 800ca32:	4b46      	ldr	r3, [pc, #280]	; (800cb4c <main+0x41c>)
 800ca34:	4946      	ldr	r1, [pc, #280]	; (800cb50 <main+0x420>)
  htim1.Init.Prescaler = 168-1;
 800ca36:	605e      	str	r6, [r3, #4]
  htim1.Init.Period = 1000-1;
 800ca38:	f240 32e7 	movw	r2, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ca3c:	4618      	mov	r0, r3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ca3e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800ca42:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ca46:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca4a:	609c      	str	r4, [r3, #8]
  htim1.Init.RepetitionCounter = 0;
 800ca4c:	e9c3 4404 	strd	r4, r4, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ca50:	619c      	str	r4, [r3, #24]
  htim1.Instance = TIM1;
 800ca52:	6019      	str	r1, [r3, #0]
  htim1.Init.Period = 1000-1;
 800ca54:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ca56:	f004 fa9f 	bl	8010f98 <HAL_TIM_Base_Init>
 800ca5a:	b108      	cbz	r0, 800ca60 <main+0x330>
 800ca5c:	b672      	cpsid	i
 800ca5e:	e7fe      	b.n	800ca5e <main+0x32e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ca60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ca64:	a90f      	add	r1, sp, #60	; 0x3c
 800ca66:	4839      	ldr	r0, [pc, #228]	; (800cb4c <main+0x41c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ca68:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ca6a:	f004 f8cb 	bl	8010c04 <HAL_TIM_ConfigClockSource>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	b108      	cbz	r0, 800ca76 <main+0x346>
 800ca72:	b672      	cpsid	i
 800ca74:	e7fe      	b.n	800ca74 <main+0x344>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ca76:	a908      	add	r1, sp, #32
 800ca78:	4834      	ldr	r0, [pc, #208]	; (800cb4c <main+0x41c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ca7a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ca7e:	f004 fc8f 	bl	80113a0 <HAL_TIMEx_MasterConfigSynchronization>
 800ca82:	4604      	mov	r4, r0
 800ca84:	b108      	cbz	r0, 800ca8a <main+0x35a>
 800ca86:	b672      	cpsid	i
 800ca88:	e7fe      	b.n	800ca88 <main+0x358>
  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);
 800ca8a:	ed9f 1a32 	vldr	s2, [pc, #200]	; 800cb54 <main+0x424>
 800ca8e:	eddf 0a32 	vldr	s1, [pc, #200]	; 800cb58 <main+0x428>
 800ca92:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800cb5c <main+0x42c>
 800ca96:	2004      	movs	r0, #4
 800ca98:	f001 ff9e 	bl	800e9d8 <PIDSetGain>
  		  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);
 800ca9c:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 800cb54 <main+0x424>
 800caa0:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800cb58 <main+0x428>
 800caa4:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800cb5c <main+0x42c>
 800caa8:	2005      	movs	r0, #5
 800caaa:	f001 ff95 	bl	800e9d8 <PIDSetGain>
  		  PIDSetGain(A_VELO_PID, 14.6,0,0);//P=14.6
 800caae:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800cb60 <main+0x430>
 800cab2:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800cb5c <main+0x42c>
 800cab6:	eef0 0a41 	vmov.f32	s1, s2
 800caba:	4620      	mov	r0, r4
 800cabc:	f001 ff8c 	bl	800e9d8 <PIDSetGain>
  		  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800cac0:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800cb60 <main+0x430>
 800cac4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800cb5c <main+0x42c>
 800cac8:	eef0 0a41 	vmov.f32	s1, s2
 800cacc:	2008      	movs	r0, #8
 800cace:	f001 ff83 	bl	800e9d8 <PIDSetGain>
  		  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800cad2:	ed9f 1a23 	vldr	s2, [pc, #140]	; 800cb60 <main+0x430>
 800cad6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800cada:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800cade:	2001      	movs	r0, #1
 800cae0:	f001 ff7a 	bl	800e9d8 <PIDSetGain>
  		  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800cae4:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 800cb60 <main+0x430>
 800cae8:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800caec:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800caf0:	2002      	movs	r0, #2
 800caf2:	f001 ff71 	bl	800e9d8 <PIDSetGain>
  		  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.0s06);//1.8, 10, 0);
 800caf6:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 800cb60 <main+0x430>
 800cafa:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800cafe:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800cb02:	2003      	movs	r0, #3
 800cb04:	f001 ff68 	bl	800e9d8 <PIDSetGain>
	  switch( startup_mode )
 800cb08:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800cb0c:	2b07      	cmp	r3, #7
 800cb0e:	d8fd      	bhi.n	800cb0c <main+0x3dc>
 800cb10:	e8df f003 	tbb	[pc, r3]
 800cb14:	13161904 	.word	0x13161904
 800cb18:	070a0d10 	.word	0x070a0d10
		  ParameterSetting();
 800cb1c:	f7fe fbb0 	bl	800b280 <ParameterSetting>
		  break;
 800cb20:	e7f2      	b.n	800cb08 <main+0x3d8>
		  WritingFree();
 800cb22:	f7fe fc7d 	bl	800b420 <WritingFree>
		  break;
 800cb26:	e7ef      	b.n	800cb08 <main+0x3d8>
		  Explore();
 800cb28:	f7fe fe46 	bl	800b7b8 <Explore>
		  break;
 800cb2c:	e7ec      	b.n	800cb08 <main+0x3d8>
		  GainTestAVelo();
 800cb2e:	f7fe fc3f 	bl	800b3b0 <GainTestAVelo>
		  break;
 800cb32:	e7e9      	b.n	800cb08 <main+0x3d8>
		  FastestRun();
 800cb34:	f7fe fccc 	bl	800b4d0 <FastestRun>
		  break;
 800cb38:	e7e6      	b.n	800cb08 <main+0x3d8>
		  Debug();
 800cb3a:	f7fe fb69 	bl	800b210 <Debug>
		  break;
 800cb3e:	e7e3      	b.n	800cb08 <main+0x3d8>
		  GainTestDWall();
 800cb40:	f7fe fbd8 	bl	800b2f4 <GainTestDWall>
		  break;
 800cb44:	e7e0      	b.n	800cb08 <main+0x3d8>
		  GainTestRWall();
 800cb46:	f7fe fba3 	bl	800b290 <GainTestRWall>
		  break;
 800cb4a:	e7dd      	b.n	800cb08 <main+0x3d8>
 800cb4c:	20001f6c 	.word	0x20001f6c
 800cb50:	40010000 	.word	0x40010000
 800cb54:	3a83126f 	.word	0x3a83126f
 800cb58:	452f0000 	.word	0x452f0000
 800cb5c:	4169999a 	.word	0x4169999a
 800cb60:	00000000 	.word	0x00000000

0800cb64 <Error_Handler>:
 800cb64:	b672      	cpsid	i
 800cb66:	e7fe      	b.n	800cb66 <Error_Handler+0x2>

0800cb68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cb68:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb6a:	4b0c      	ldr	r3, [pc, #48]	; (800cb9c <HAL_MspInit+0x34>)
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	9100      	str	r1, [sp, #0]
 800cb70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb76:	645a      	str	r2, [r3, #68]	; 0x44
 800cb78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb7a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800cb7e:	9200      	str	r2, [sp, #0]
 800cb80:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cb82:	9101      	str	r1, [sp, #4]
 800cb84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800cb8a:	641a      	str	r2, [r3, #64]	; 0x40
 800cb8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb92:	9301      	str	r3, [sp, #4]
 800cb94:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cb96:	b002      	add	sp, #8
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	40023800 	.word	0x40023800

0800cba0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800cba0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800cba2:	6803      	ldr	r3, [r0, #0]
 800cba4:	4a47      	ldr	r2, [pc, #284]	; (800ccc4 <HAL_ADC_MspInit+0x124>)
{
 800cba6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cba8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800cbaa:	4293      	cmp	r3, r2
{
 800cbac:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbae:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800cbb2:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800cbb6:	9409      	str	r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 800cbb8:	d004      	beq.n	800cbc4 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800cbba:	4a43      	ldr	r2, [pc, #268]	; (800ccc8 <HAL_ADC_MspInit+0x128>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d04e      	beq.n	800cc5e <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800cbc0:	b00b      	add	sp, #44	; 0x2c
 800cbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800cbc4:	4b41      	ldr	r3, [pc, #260]	; (800cccc <HAL_ADC_MspInit+0x12c>)
 800cbc6:	9400      	str	r4, [sp, #0]
 800cbc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 800cbca:	4e41      	ldr	r6, [pc, #260]	; (800ccd0 <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbcc:	4841      	ldr	r0, [pc, #260]	; (800ccd4 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800cbce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cbd2:	645a      	str	r2, [r3, #68]	; 0x44
 800cbd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbd6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800cbda:	9200      	str	r2, [sp, #0]
 800cbdc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cbde:	9401      	str	r4, [sp, #4]
 800cbe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbe2:	f042 0204 	orr.w	r2, r2, #4
 800cbe6:	631a      	str	r2, [r3, #48]	; 0x30
 800cbe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbea:	f002 0204 	and.w	r2, r2, #4
 800cbee:	9201      	str	r2, [sp, #4]
 800cbf0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cbf2:	9402      	str	r4, [sp, #8]
 800cbf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbf6:	f042 0202 	orr.w	r2, r2, #2
 800cbfa:	631a      	str	r2, [r3, #48]	; 0x30
 800cbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbfe:	f003 0302 	and.w	r3, r3, #2
 800cc02:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cc04:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800cc06:	2311      	movs	r3, #17
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc08:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc0a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800cc0c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cc0e:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc10:	f002 fed0 	bl	800f9b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cc14:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc16:	a905      	add	r1, sp, #20
 800cc18:	482f      	ldr	r0, [pc, #188]	; (800ccd8 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cc1a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc1c:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc20:	f002 fec8 	bl	800f9b4 <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800cc24:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cc28:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Instance = DMA2_Stream0;
 800cc2c:	482b      	ldr	r0, [pc, #172]	; (800ccdc <HAL_ADC_MspInit+0x13c>)
 800cc2e:	6030      	str	r0, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800cc30:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800cc34:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800cc36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cc3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800cc3e:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800cc42:	4630      	mov	r0, r6
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800cc44:	6137      	str	r7, [r6, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cc46:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800cc4a:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800cc4c:	f002 fb84 	bl	800f358 <HAL_DMA_Init>
 800cc50:	b108      	cbz	r0, 800cc56 <HAL_ADC_MspInit+0xb6>
      Error_Handler();
 800cc52:	f7ff ff87 	bl	800cb64 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800cc56:	63ae      	str	r6, [r5, #56]	; 0x38
 800cc58:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800cc5a:	b00b      	add	sp, #44	; 0x2c
 800cc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 800cc5e:	4b1b      	ldr	r3, [pc, #108]	; (800cccc <HAL_ADC_MspInit+0x12c>)
 800cc60:	9403      	str	r4, [sp, #12]
 800cc62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc2.Instance = DMA2_Stream2;
 800cc64:	4e1e      	ldr	r6, [pc, #120]	; (800cce0 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc66:	481b      	ldr	r0, [pc, #108]	; (800ccd4 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800cc68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc6c:	645a      	str	r2, [r3, #68]	; 0x44
 800cc6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc70:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800cc74:	9203      	str	r2, [sp, #12]
 800cc76:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc78:	9404      	str	r4, [sp, #16]
 800cc7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc7c:	f042 0204 	orr.w	r2, r2, #4
 800cc80:	631a      	str	r2, [r3, #48]	; 0x30
 800cc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc84:	f003 0304 	and.w	r3, r3, #4
 800cc88:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800cc8a:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc8c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800cc8e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cc90:	2303      	movs	r3, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc92:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cc94:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc96:	f002 fe8d 	bl	800f9b4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800cc9a:	4a12      	ldr	r2, [pc, #72]	; (800cce4 <HAL_ADC_MspInit+0x144>)
 800cc9c:	6032      	str	r2, [r6, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800cc9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800cca2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800cca6:	6073      	str	r3, [r6, #4]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800cca8:	6130      	str	r0, [r6, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ccaa:	60b4      	str	r4, [r6, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ccac:	60f4      	str	r4, [r6, #12]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ccae:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ccb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ccb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800ccba:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	e7c1      	b.n	800cc46 <HAL_ADC_MspInit+0xa6>
 800ccc2:	bf00      	nop
 800ccc4:	40012000 	.word	0x40012000
 800ccc8:	40012100 	.word	0x40012100
 800cccc:	40023800 	.word	0x40023800
 800ccd0:	20001f0c 	.word	0x20001f0c
 800ccd4:	40020800 	.word	0x40020800
 800ccd8:	40020400 	.word	0x40020400
 800ccdc:	40026410 	.word	0x40026410
 800cce0:	20001fac 	.word	0x20001fac
 800cce4:	40026440 	.word	0x40026440

0800cce8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cce8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 800ccea:	6801      	ldr	r1, [r0, #0]
 800ccec:	4a18      	ldr	r2, [pc, #96]	; (800cd50 <HAL_SPI_MspInit+0x68>)
{
 800ccee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccf0:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 800ccf2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccf4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ccf8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ccfc:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 800ccfe:	d001      	beq.n	800cd04 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800cd00:	b008      	add	sp, #32
 800cd02:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800cd04:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd0c:	4811      	ldr	r0, [pc, #68]	; (800cd54 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800cd0e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800cd12:	6411      	str	r1, [r2, #64]	; 0x40
 800cd14:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800cd16:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
 800cd1a:	9101      	str	r1, [sp, #4]
 800cd1c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cd1e:	9302      	str	r3, [sp, #8]
 800cd20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cd22:	f043 0304 	orr.w	r3, r3, #4
 800cd26:	6313      	str	r3, [r2, #48]	; 0x30
 800cd28:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cd2a:	f003 0304 	and.w	r3, r3, #4
 800cd2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd30:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800cd32:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd34:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800cd36:	f44f 55e0 	mov.w	r5, #7168	; 0x1c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd3a:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cd3c:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd3e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800cd42:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd46:	f002 fe35 	bl	800f9b4 <HAL_GPIO_Init>
}
 800cd4a:	b008      	add	sp, #32
 800cd4c:	bd70      	pop	{r4, r5, r6, pc}
 800cd4e:	bf00      	nop
 800cd50:	40003c00 	.word	0x40003c00
 800cd54:	40020800 	.word	0x40020800

0800cd58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cd58:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 800cd5a:	6803      	ldr	r3, [r0, #0]
 800cd5c:	4a2b      	ldr	r2, [pc, #172]	; (800ce0c <HAL_TIM_Base_MspInit+0xb4>)
 800cd5e:	4293      	cmp	r3, r2
{
 800cd60:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 800cd62:	d02a      	beq.n	800cdba <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800cd64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd68:	d008      	beq.n	800cd7c <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800cd6a:	4a29      	ldr	r2, [pc, #164]	; (800ce10 <HAL_TIM_Base_MspInit+0xb8>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d015      	beq.n	800cd9c <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 800cd70:	4a28      	ldr	r2, [pc, #160]	; (800ce14 <HAL_TIM_Base_MspInit+0xbc>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d037      	beq.n	800cde6 <HAL_TIM_Base_MspInit+0x8e>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800cd76:	b005      	add	sp, #20
 800cd78:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cd7c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800cd80:	2200      	movs	r2, #0
 800cd82:	9201      	str	r2, [sp, #4]
 800cd84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd86:	f042 0201 	orr.w	r2, r2, #1
 800cd8a:	641a      	str	r2, [r3, #64]	; 0x40
 800cd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	9301      	str	r3, [sp, #4]
 800cd94:	9b01      	ldr	r3, [sp, #4]
}
 800cd96:	b005      	add	sp, #20
 800cd98:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 800cd9c:	4b1e      	ldr	r3, [pc, #120]	; (800ce18 <HAL_TIM_Base_MspInit+0xc0>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	9202      	str	r2, [sp, #8]
 800cda2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cda4:	f042 0208 	orr.w	r2, r2, #8
 800cda8:	641a      	str	r2, [r3, #64]	; 0x40
 800cdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdac:	f003 0308 	and.w	r3, r3, #8
 800cdb0:	9302      	str	r3, [sp, #8]
 800cdb2:	9b02      	ldr	r3, [sp, #8]
}
 800cdb4:	b005      	add	sp, #20
 800cdb6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800cdba:	2200      	movs	r2, #0
 800cdbc:	4b16      	ldr	r3, [pc, #88]	; (800ce18 <HAL_TIM_Base_MspInit+0xc0>)
 800cdbe:	9200      	str	r2, [sp, #0]
 800cdc0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800cdc2:	f041 0101 	orr.w	r1, r1, #1
 800cdc6:	6459      	str	r1, [r3, #68]	; 0x44
 800cdc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdca:	f003 0301 	and.w	r3, r3, #1
 800cdce:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800cdd0:	2019      	movs	r0, #25
 800cdd2:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800cdd4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800cdd6:	f002 fa61 	bl	800f29c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800cdda:	2019      	movs	r0, #25
}
 800cddc:	b005      	add	sp, #20
 800cdde:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800cde2:	f002 ba91 	b.w	800f308 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800cde6:	4b0c      	ldr	r3, [pc, #48]	; (800ce18 <HAL_TIM_Base_MspInit+0xc0>)
 800cde8:	2200      	movs	r2, #0
 800cdea:	9203      	str	r2, [sp, #12]
 800cdec:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800cdee:	f041 0102 	orr.w	r1, r1, #2
 800cdf2:	6459      	str	r1, [r3, #68]	; 0x44
 800cdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdf6:	f003 0302 	and.w	r3, r3, #2
 800cdfa:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800cdfc:	202c      	movs	r0, #44	; 0x2c
 800cdfe:	2101      	movs	r1, #1
    __HAL_RCC_TIM8_CLK_ENABLE();
 800ce00:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800ce02:	f002 fa4b 	bl	800f29c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800ce06:	202c      	movs	r0, #44	; 0x2c
 800ce08:	e7e8      	b.n	800cddc <HAL_TIM_Base_MspInit+0x84>
 800ce0a:	bf00      	nop
 800ce0c:	40010000 	.word	0x40010000
 800ce10:	40000c00 	.word	0x40000c00
 800ce14:	40010400 	.word	0x40010400
 800ce18:	40023800 	.word	0x40023800

0800ce1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800ce1c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM3)
 800ce1e:	6802      	ldr	r2, [r0, #0]
 800ce20:	4927      	ldr	r1, [pc, #156]	; (800cec0 <HAL_TIM_Encoder_MspInit+0xa4>)
{
 800ce22:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce24:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM3)
 800ce26:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce28:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ce2c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ce30:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_encoder->Instance==TIM3)
 800ce32:	d024      	beq.n	800ce7e <HAL_TIM_Encoder_MspInit+0x62>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM4)
 800ce34:	4923      	ldr	r1, [pc, #140]	; (800cec4 <HAL_TIM_Encoder_MspInit+0xa8>)
 800ce36:	428a      	cmp	r2, r1
 800ce38:	d001      	beq.n	800ce3e <HAL_TIM_Encoder_MspInit+0x22>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800ce3a:	b00a      	add	sp, #40	; 0x28
 800ce3c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ce3e:	4a22      	ldr	r2, [pc, #136]	; (800cec8 <HAL_TIM_Encoder_MspInit+0xac>)
 800ce40:	9303      	str	r3, [sp, #12]
 800ce42:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce44:	4821      	ldr	r0, [pc, #132]	; (800cecc <HAL_TIM_Encoder_MspInit+0xb0>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ce46:	f041 0104 	orr.w	r1, r1, #4
 800ce4a:	6411      	str	r1, [r2, #64]	; 0x40
 800ce4c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ce4e:	f001 0104 	and.w	r1, r1, #4
 800ce52:	9103      	str	r1, [sp, #12]
 800ce54:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce56:	9304      	str	r3, [sp, #16]
 800ce58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ce5a:	f043 0302 	orr.w	r3, r3, #2
 800ce5e:	6313      	str	r3, [r2, #48]	; 0x30
 800ce60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ce62:	f003 0302 	and.w	r3, r3, #2
 800ce66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ce68:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce6a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce6c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce6e:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800ce70:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce72:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce76:	f002 fd9d 	bl	800f9b4 <HAL_GPIO_Init>
}
 800ce7a:	b00a      	add	sp, #40	; 0x28
 800ce7c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ce7e:	4a12      	ldr	r2, [pc, #72]	; (800cec8 <HAL_TIM_Encoder_MspInit+0xac>)
 800ce80:	9301      	str	r3, [sp, #4]
 800ce82:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce84:	4812      	ldr	r0, [pc, #72]	; (800ced0 <HAL_TIM_Encoder_MspInit+0xb4>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ce86:	f041 0102 	orr.w	r1, r1, #2
 800ce8a:	6411      	str	r1, [r2, #64]	; 0x40
 800ce8c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ce8e:	f001 0102 	and.w	r1, r1, #2
 800ce92:	9101      	str	r1, [sp, #4]
 800ce94:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce96:	9302      	str	r3, [sp, #8]
 800ce98:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ce9a:	f043 0301 	orr.w	r3, r3, #1
 800ce9e:	6313      	str	r3, [r2, #48]	; 0x30
 800cea0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cea2:	f003 0301 	and.w	r3, r3, #1
 800cea6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cea8:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceaa:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ceac:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ceae:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ceb0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ceb6:	f002 fd7d 	bl	800f9b4 <HAL_GPIO_Init>
}
 800ceba:	b00a      	add	sp, #40	; 0x28
 800cebc:	bd10      	pop	{r4, pc}
 800cebe:	bf00      	nop
 800cec0:	40000400 	.word	0x40000400
 800cec4:	40000800 	.word	0x40000800
 800cec8:	40023800 	.word	0x40023800
 800cecc:	40020400 	.word	0x40020400
 800ced0:	40020000 	.word	0x40020000

0800ced4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ced4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM2)
 800ced6:	6803      	ldr	r3, [r0, #0]
{
 800ced8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ceda:	2400      	movs	r4, #0
  if(htim->Instance==TIM2)
 800cedc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cee0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800cee4:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800cee8:	9409      	str	r4, [sp, #36]	; 0x24
  if(htim->Instance==TIM2)
 800ceea:	d007      	beq.n	800cefc <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 800ceec:	4a30      	ldr	r2, [pc, #192]	; (800cfb0 <HAL_TIM_MspPostInit+0xdc>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d049      	beq.n	800cf86 <HAL_TIM_MspPostInit+0xb2>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 800cef2:	4a30      	ldr	r2, [pc, #192]	; (800cfb4 <HAL_TIM_MspPostInit+0xe0>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d01b      	beq.n	800cf30 <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800cef8:	b00a      	add	sp, #40	; 0x28
 800cefa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cefc:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800cf00:	9401      	str	r4, [sp, #4]
 800cf02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf04:	482c      	ldr	r0, [pc, #176]	; (800cfb8 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf06:	f042 0201 	orr.w	r2, r2, #1
 800cf0a:	631a      	str	r2, [r3, #48]	; 0x30
 800cf0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf0e:	f003 0301 	and.w	r3, r3, #1
 800cf12:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf14:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800cf16:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf18:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cf1a:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf1c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf1e:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf20:	e9cd 5405 	strd	r5, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800cf24:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf28:	f002 fd44 	bl	800f9b4 <HAL_GPIO_Init>
}
 800cf2c:	b00a      	add	sp, #40	; 0x28
 800cf2e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf30:	4b22      	ldr	r3, [pc, #136]	; (800cfbc <HAL_TIM_MspPostInit+0xe8>)
 800cf32:	9403      	str	r4, [sp, #12]
 800cf34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf36:	4820      	ldr	r0, [pc, #128]	; (800cfb8 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf38:	f042 0201 	orr.w	r2, r2, #1
 800cf3c:	631a      	str	r2, [r3, #48]	; 0x30
 800cf3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf40:	f002 0201 	and.w	r2, r2, #1
 800cf44:	9203      	str	r2, [sp, #12]
 800cf46:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf48:	9404      	str	r4, [sp, #16]
 800cf4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf4c:	f042 0204 	orr.w	r2, r2, #4
 800cf50:	631a      	str	r2, [r3, #48]	; 0x30
 800cf52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf54:	f003 0304 	and.w	r3, r3, #4
 800cf58:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf5a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cf5c:	2320      	movs	r3, #32
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cf5e:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf60:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf62:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cf64:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf66:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf6a:	f002 fd23 	bl	800f9b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cf6e:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf70:	a905      	add	r1, sp, #20
 800cf72:	4813      	ldr	r0, [pc, #76]	; (800cfc0 <HAL_TIM_MspPostInit+0xec>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf74:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cf76:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf78:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cf7c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf7e:	f002 fd19 	bl	800f9b4 <HAL_GPIO_Init>
}
 800cf82:	b00a      	add	sp, #40	; 0x28
 800cf84:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf86:	4b0d      	ldr	r3, [pc, #52]	; (800cfbc <HAL_TIM_MspPostInit+0xe8>)
 800cf88:	9402      	str	r4, [sp, #8]
 800cf8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf8c:	480a      	ldr	r0, [pc, #40]	; (800cfb8 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf8e:	f042 0201 	orr.w	r2, r2, #1
 800cf92:	631a      	str	r2, [r3, #48]	; 0x30
 800cf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf9c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cf9e:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfa0:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800cfa2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfa4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfa8:	f002 fd04 	bl	800f9b4 <HAL_GPIO_Init>
}
 800cfac:	b00a      	add	sp, #40	; 0x28
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	40000c00 	.word	0x40000c00
 800cfb4:	40010400 	.word	0x40010400
 800cfb8:	40020000 	.word	0x40020000
 800cfbc:	40023800 	.word	0x40023800
 800cfc0:	40020800 	.word	0x40020800

0800cfc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cfc4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800cfc6:	6801      	ldr	r1, [r0, #0]
 800cfc8:	4a18      	ldr	r2, [pc, #96]	; (800d02c <HAL_UART_MspInit+0x68>)
{
 800cfca:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfcc:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 800cfce:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfd0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800cfd4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800cfd8:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800cfda:	d001      	beq.n	800cfe0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800cfdc:	b008      	add	sp, #32
 800cfde:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800cfe0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800cfe4:	9301      	str	r3, [sp, #4]
 800cfe6:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfe8:	4811      	ldr	r0, [pc, #68]	; (800d030 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800cfea:	f041 0110 	orr.w	r1, r1, #16
 800cfee:	6451      	str	r1, [r2, #68]	; 0x44
 800cff0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800cff2:	f001 0110 	and.w	r1, r1, #16
 800cff6:	9101      	str	r1, [sp, #4]
 800cff8:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cffa:	9302      	str	r3, [sp, #8]
 800cffc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cffe:	f043 0301 	orr.w	r3, r3, #1
 800d002:	6313      	str	r3, [r2, #48]	; 0x30
 800d004:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d00c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d00e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d010:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d012:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d016:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d018:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d01a:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d01e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d022:	f002 fcc7 	bl	800f9b4 <HAL_GPIO_Init>
}
 800d026:	b008      	add	sp, #32
 800d028:	bd70      	pop	{r4, r5, r6, pc}
 800d02a:	bf00      	nop
 800d02c:	40011000 	.word	0x40011000
 800d030:	40020000 	.word	0x40020000

0800d034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d034:	e7fe      	b.n	800d034 <NMI_Handler>
 800d036:	bf00      	nop

0800d038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d038:	e7fe      	b.n	800d038 <HardFault_Handler>
 800d03a:	bf00      	nop

0800d03c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d03c:	e7fe      	b.n	800d03c <MemManage_Handler>
 800d03e:	bf00      	nop

0800d040 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d040:	e7fe      	b.n	800d040 <BusFault_Handler>
 800d042:	bf00      	nop

0800d044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d044:	e7fe      	b.n	800d044 <UsageFault_Handler>
 800d046:	bf00      	nop

0800d048 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop

0800d04c <DebugMon_Handler>:
 800d04c:	4770      	bx	lr
 800d04e:	bf00      	nop

0800d050 <PendSV_Handler>:
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop

0800d054 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d054:	f001 be72 	b.w	800ed3c <HAL_IncTick>

0800d058 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d058:	4801      	ldr	r0, [pc, #4]	; (800d060 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800d05a:	f003 be81 	b.w	8010d60 <HAL_TIM_IRQHandler>
 800d05e:	bf00      	nop
 800d060:	20001f6c 	.word	0x20001f6c

0800d064 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800d064:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d068:	f002 bdac 	b.w	800fbc4 <HAL_GPIO_EXTI_IRQHandler>

0800d06c <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d06c:	4801      	ldr	r0, [pc, #4]	; (800d074 <TIM8_UP_TIM13_IRQHandler+0x8>)
 800d06e:	f003 be77 	b.w	8010d60 <HAL_TIM_IRQHandler>
 800d072:	bf00      	nop
 800d074:	20001d24 	.word	0x20001d24

0800d078 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d078:	4801      	ldr	r0, [pc, #4]	; (800d080 <DMA2_Stream0_IRQHandler+0x8>)
 800d07a:	f002 ba8d 	b.w	800f598 <HAL_DMA_IRQHandler>
 800d07e:	bf00      	nop
 800d080:	20001f0c 	.word	0x20001f0c

0800d084 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d084:	4801      	ldr	r0, [pc, #4]	; (800d08c <DMA2_Stream2_IRQHandler+0x8>)
 800d086:	f002 ba87 	b.w	800f598 <HAL_DMA_IRQHandler>
 800d08a:	bf00      	nop
 800d08c:	20001fac 	.word	0x20001fac

0800d090 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d090:	4b05      	ldr	r3, [pc, #20]	; (800d0a8 <SystemInit+0x18>)
 800d092:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d096:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d09a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800d09e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d0a2:	6099      	str	r1, [r3, #8]
#endif
}
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	e000ed00 	.word	0xe000ed00

0800d0ac <initSearchData>:


#include "Action.h"
int Num_Nodes = 0;
void initSearchData(maze_node *my_maze, profile *Mouse)
{
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	b082      	sub	sp, #8
 800d0b2:	460d      	mov	r5, r1
    initMaze(my_maze);
 800d0b4:	f7fd fb60 	bl	800a778 <initMaze>
    initWeight(my_maze); //3/20ms
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f7fd fb41 	bl	800a740 <initWeight>
    //状態の初期化
    initProfile(Mouse, my_maze);
 800d0be:	4621      	mov	r1, r4
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	f7fd ff2f 	bl	800af24 <initProfile>

    Mouse->now.node = &(my_maze->RawNode[0][0]);
    Mouse->next.node = &(my_maze->RawNode[0][1]);
 800d0c6:	f104 0308 	add.w	r3, r4, #8
 800d0ca:	61eb      	str	r3, [r5, #28]
    //スタート座標にいる状態で、現在の重みを更新
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d0cc:	2601      	movs	r6, #1
 800d0ce:	2302      	movs	r3, #2
 800d0d0:	786a      	ldrb	r2, [r5, #1]
 800d0d2:	7829      	ldrb	r1, [r5, #0]
    Mouse->now.node = &(my_maze->RawNode[0][0]);
 800d0d4:	612c      	str	r4, [r5, #16]
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	e9cd 3600 	strd	r3, r6, [sp]
 800d0dc:	f7fd fc48 	bl	800a970 <updateAllNodeWeight>
//     updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
}
 800d0e0:	b002      	add	sp, #8
 800d0e2:	bd70      	pop	{r4, r5, r6, pc}

0800d0e4 <updateRealSearch>:

void updateRealSearch(maze_node *maze, profile *mouse)
{
 800d0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	b083      	sub	sp, #12
 800d0ea:	4605      	mov	r5, r0
	//wall_state wall_st[4]={0};

	//壁センサ値を読んで、各方角の壁の有無を判定
		//区画進入直前なので、更新予定の方角と座標がNextに入っているはず
		//前後左右の値として入れる
	shiftState(mouse);
 800d0ec:	4608      	mov	r0, r1
 800d0ee:	f7fd ff35 	bl	800af5c <shiftState>

    switch (mouse->now.car)
 800d0f2:	7aa3      	ldrb	r3, [r4, #10]
 800d0f4:	2b06      	cmp	r3, #6
 800d0f6:	f200 80d1 	bhi.w	800d29c <updateRealSearch+0x1b8>
 800d0fa:	e8df f003 	tbb	[pc, r3]
 800d0fe:	cfa3      	.short	0xcfa3
 800d100:	cf4bcf77 	.word	0xcf4bcf77
 800d104:	04          	.byte	0x04
 800d105:	00          	.byte	0x00
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
    	wall_dir[0] = NOWALL;
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
        break;
    case west:
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d106:	4b68      	ldr	r3, [pc, #416]	; (800d2a8 <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d108:	eddf 5a68 	vldr	s11, [pc, #416]	; 800d2ac <updateRealSearch+0x1c8>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d10c:	edd3 7a00 	vldr	s15, [r3]
 800d110:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d114:	ed93 5a01 	vldr	s10, [r3, #4]
    	wall_dir[1] = NOWALL;
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d118:	eddf 6a65 	vldr	s13, [pc, #404]	; 800d2b0 <updateRealSearch+0x1cc>
 800d11c:	ed93 6a02 	vldr	s12, [r3, #8]
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d120:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800d2b4 <updateRealSearch+0x1d0>
 800d124:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d128:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d12c:	eeb4 5ae5 	vcmpe.f32	s10, s11
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d130:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d138:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800d13c:	bfcc      	ite	gt
 800d13e:	2701      	movgt	r7, #1
 800d140:	2700      	movle	r7, #0
 800d142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d14a:	bfcc      	ite	gt
 800d14c:	2001      	movgt	r0, #1
 800d14e:	2000      	movle	r0, #0
 800d150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d154:	bfcc      	ite	gt
 800d156:	2101      	movgt	r1, #1
 800d158:	2100      	movle	r1, #0
        break;
 800d15a:	2600      	movs	r6, #0
//	Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
//	Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
//	Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
//	Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
    //アクションが終わるときがノードの上にいる状態なので、状態シフト済みとする（この関数はアクション中に呼び出される想定）
    mouse->now.wall.north = wall_dir[0];
 800d15c:	7b22      	ldrb	r2, [r4, #12]

	//getWallNow(&(my_mouse->now), &wall[0]);

    //現在方角、壁は、合ってる。座標とノードは？
    //ここで壁の存在を反映
	updateNodeThree(maze, &(mouse->now), mouse->now.pos.x, mouse->now.pos.y);
 800d15e:	7a63      	ldrb	r3, [r4, #9]
    mouse->now.wall.north = wall_dir[0];
 800d160:	f367 0201 	bfi	r2, r7, #0, #2
    mouse->now.wall.east = wall_dir[1];
 800d164:	f366 0283 	bfi	r2, r6, #2, #2
    mouse->now.wall.south = wall_dir[2];
 800d168:	f360 1205 	bfi	r2, r0, #4, #2
    mouse->now.wall.west = wall_dir[3];
 800d16c:	f361 1287 	bfi	r2, r1, #6, #2
	updateNodeThree(maze, &(mouse->now), mouse->now.pos.x, mouse->now.pos.y);
 800d170:	4621      	mov	r1, r4
    mouse->now.wall.west = wall_dir[3];
 800d172:	7322      	strb	r2, [r4, #12]
	updateNodeThree(maze, &(mouse->now), mouse->now.pos.x, mouse->now.pos.y);
 800d174:	f811 2f08 	ldrb.w	r2, [r1, #8]!
 800d178:	4628      	mov	r0, r5
 800d17a:	f7fd fd1b 	bl	800abb4 <updateNodeThree>

	//壁の存在を基に重みマップを更新
	updateAllNodeWeight(maze, mouse->goal_lesser.x, mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d17e:	7862      	ldrb	r2, [r4, #1]
 800d180:	7821      	ldrb	r1, [r4, #0]
 800d182:	2302      	movs	r3, #2
 800d184:	2401      	movs	r4, #1
 800d186:	4628      	mov	r0, r5
 800d188:	e9cd 3400 	strd	r3, r4, [sp]
 800d18c:	f7fd fbf0 	bl	800a970 <updateAllNodeWeight>
}
 800d190:	b003      	add	sp, #12
 800d192:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d194:	4b44      	ldr	r3, [pc, #272]	; (800d2a8 <updateRealSearch+0x1c4>)
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d196:	eddf 5a46 	vldr	s11, [pc, #280]	; 800d2b0 <updateRealSearch+0x1cc>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d19a:	edd3 7a00 	vldr	s15, [r3]
 800d19e:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1a2:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d1a6:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1aa:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800d2b4 <updateRealSearch+0x1d0>
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1ae:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800d2ac <updateRealSearch+0x1c8>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1b2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d1b6:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d1ba:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d1be:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800d1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1c6:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d1ca:	bfcc      	ite	gt
 800d1cc:	2601      	movgt	r6, #1
 800d1ce:	2600      	movle	r6, #0
 800d1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1d4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d1d8:	bfcc      	ite	gt
 800d1da:	2001      	movgt	r0, #1
 800d1dc:	2000      	movle	r0, #0
 800d1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e2:	bfcc      	ite	gt
 800d1e4:	2101      	movgt	r1, #1
 800d1e6:	2100      	movle	r1, #0
        break;
 800d1e8:	2700      	movs	r7, #0
 800d1ea:	e7b7      	b.n	800d15c <updateRealSearch+0x78>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1ec:	4b2e      	ldr	r3, [pc, #184]	; (800d2a8 <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d1ee:	eddf 5a30 	vldr	s11, [pc, #192]	; 800d2b0 <updateRealSearch+0x1cc>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1f2:	edd3 7a00 	vldr	s15, [r3]
 800d1f6:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1fa:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d1fe:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d202:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800d2b4 <updateRealSearch+0x1d0>
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d206:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d2ac <updateRealSearch+0x1c8>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d20a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d20e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d212:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d216:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800d21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d21e:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d222:	bfcc      	ite	gt
 800d224:	2701      	movgt	r7, #1
 800d226:	2700      	movle	r7, #0
 800d228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d22c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d230:	bfcc      	ite	gt
 800d232:	2601      	movgt	r6, #1
 800d234:	2600      	movle	r6, #0
 800d236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d23a:	bfcc      	ite	gt
 800d23c:	2001      	movgt	r0, #1
 800d23e:	2000      	movle	r0, #0
        break;
 800d240:	2100      	movs	r1, #0
 800d242:	e78b      	b.n	800d15c <updateRealSearch+0x78>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d244:	4b18      	ldr	r3, [pc, #96]	; (800d2a8 <updateRealSearch+0x1c4>)
 800d246:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 800d2b4 <updateRealSearch+0x1d0>
 800d24a:	edd3 7a00 	vldr	s15, [r3]
 800d24e:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d252:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800d2ac <updateRealSearch+0x1c8>
 800d256:	edd3 5a01 	vldr	s11, [r3, #4]
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d25a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d2b0 <updateRealSearch+0x1cc>
 800d25e:	edd3 6a02 	vldr	s13, [r3, #8]
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d262:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d266:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d26a:	ee67 7aa4 	vmul.f32	s15, s15, s9
        break;
 800d26e:	2000      	movs	r0, #0
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d270:	eef4 7ac5 	vcmpe.f32	s15, s10
 800d274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d278:	eef4 5ac6 	vcmpe.f32	s11, s12
 800d27c:	bfcc      	ite	gt
 800d27e:	2701      	movgt	r7, #1
 800d280:	4607      	movle	r7, r0
 800d282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d286:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d28a:	bfcc      	ite	gt
 800d28c:	2601      	movgt	r6, #1
 800d28e:	4606      	movle	r6, r0
 800d290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d294:	bfcc      	ite	gt
 800d296:	2101      	movgt	r1, #1
 800d298:	4601      	movle	r1, r0
        break;
 800d29a:	e75f      	b.n	800d15c <updateRealSearch+0x78>
    switch (mouse->now.car)
 800d29c:	2100      	movs	r1, #0
 800d29e:	4608      	mov	r0, r1
 800d2a0:	460e      	mov	r6, r1
 800d2a2:	460f      	mov	r7, r1
 800d2a4:	e75a      	b.n	800d15c <updateRealSearch+0x78>
 800d2a6:	bf00      	nop
 800d2a8:	2000158c 	.word	0x2000158c
 800d2ac:	42b40000 	.word	0x42b40000
 800d2b0:	42c80000 	.word	0x42c80000
 800d2b4:	42340000 	.word	0x42340000

0800d2b8 <getNextDirection>:
//↑と↓は新ノードに来た時の処理なので、アクションの区切りをずらせばよさそう。
//現情報と次情報から次の進行方向を得る処理

void getNextDirection(maze_node *maze, profile *Mouse, char turn_mode)
{
 800d2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2bc:	460c      	mov	r4, r1
	//選ぶノードがおかしい
	//重みが、壁がある方が小さくなってしまっている.
	//

	//メインでノード選択
	Mouse->next.node = getNextNode(maze, Mouse->now.car, Mouse->now.node, 0x01);
 800d2be:	2301      	movs	r3, #1
 800d2c0:	7a89      	ldrb	r1, [r1, #10]
	getNextState(&(Mouse->now), &(Mouse->next), Mouse->next.node);

	//既知区間加速このswitch文中で書くかも
		//コマンドキューのときはここでコマンドを発行してキューに渡す
	AddVelocity = 0;
 800d2c2:	4e74      	ldr	r6, [pc, #464]	; (800d494 <getNextDirection+0x1dc>)
{
 800d2c4:	4617      	mov	r7, r2
	Mouse->next.node = getNextNode(maze, Mouse->now.car, Mouse->now.node, 0x01);
 800d2c6:	6922      	ldr	r2, [r4, #16]
{
 800d2c8:	4605      	mov	r5, r0
	Mouse->next.node = getNextNode(maze, Mouse->now.car, Mouse->now.node, 0x01);
 800d2ca:	f7fe fc35 	bl	800bb38 <getNextNode>
	getNextState(&(Mouse->now), &(Mouse->next), Mouse->next.node);
 800d2ce:	f104 0114 	add.w	r1, r4, #20
	Mouse->next.node = getNextNode(maze, Mouse->now.car, Mouse->now.node, 0x01);
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	61e0      	str	r0, [r4, #28]
	getNextState(&(Mouse->now), &(Mouse->next), Mouse->next.node);
 800d2d6:	f104 0008 	add.w	r0, r4, #8
 800d2da:	f7fe fe87 	bl	800bfec <getNextState>
	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
	_Bool accel_or_not = false;
	int accel_or_decel = 0;
	switch(Mouse->now.dir%8) //次の方角からアクションを選択
 800d2de:	7ae3      	ldrb	r3, [r4, #11]
	AddVelocity = 0;
 800d2e0:	2200      	movs	r2, #0
	switch(Mouse->now.dir%8) //次の方角からアクションを選択
 800d2e2:	f003 0307 	and.w	r3, r3, #7
	AddVelocity = 0;
 800d2e6:	6032      	str	r2, [r6, #0]
	switch(Mouse->now.dir%8) //次の方角からアクションを選択
 800d2e8:	2b06      	cmp	r3, #6
 800d2ea:	d87d      	bhi.n	800d3e8 <getNextDirection+0x130>
 800d2ec:	e8df f003 	tbb	[pc, r3]
 800d2f0:	68297c12 	.word	0x68297c12
 800d2f4:	5437      	.short	0x5437
 800d2f6:	04          	.byte	0x04
 800d2f7:	00          	.byte	0x00
		GoBack(maze, Mouse);
		Calc = SearchOrFast;
		TurnLeft(turn_mode, maze, Mouse);
		break;
	case left:
		ChangeLED(0);
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	f000 ff53 	bl	800e1a4 <ChangeLED>
		//左旋回
		Calc = SearchOrFast;
 800d2fe:	4a66      	ldr	r2, [pc, #408]	; (800d498 <getNextDirection+0x1e0>)
 800d300:	4b66      	ldr	r3, [pc, #408]	; (800d49c <getNextDirection+0x1e4>)
 800d302:	6812      	ldr	r2, [r2, #0]
 800d304:	601a      	str	r2, [r3, #0]
//		ChangeLED(4);
		TurnLeft(turn_mode, maze, Mouse);
 800d306:	4629      	mov	r1, r5
 800d308:	4622      	mov	r2, r4
 800d30a:	4638      	mov	r0, r7
		break;
	}

}
 800d30c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode, maze, Mouse);
 800d310:	f7fc bede 	b.w	800a0d0 <TurnLeft>
		accel_or_not = judgeAccelorNot(maze, Mouse->next.car, Mouse->next.node);
 800d314:	69e2      	ldr	r2, [r4, #28]
 800d316:	7da1      	ldrb	r1, [r4, #22]
 800d318:	4628      	mov	r0, r5
 800d31a:	f7fe fd83 	bl	800be24 <judgeAccelorNot>
		if(accel_or_not == true) //既知で.直進
 800d31e:	2800      	cmp	r0, #0
 800d320:	d064      	beq.n	800d3ec <getNextDirection+0x134>
 800d322:	4a5f      	ldr	r2, [pc, #380]	; (800d4a0 <getNextDirection+0x1e8>)
			if(VelocityMax == true)
 800d324:	4b5f      	ldr	r3, [pc, #380]	; (800d4a4 <getNextDirection+0x1ec>)
 800d326:	edd2 0a00 	vldr	s1, [r2]
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800d330:	ee60 7aa7 	vmul.f32	s15, s1, s15
				AddVelocity = ExploreVelocity*1.5f;
 800d334:	edc6 7a00 	vstr	s15, [r6]
			if(VelocityMax == true)
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f000 80a8 	beq.w	800d48e <getNextDirection+0x1d6>
				accel_or_decel = 0; //そのまま
 800d33e:	2000      	movs	r0, #0
 800d340:	e063      	b.n	800d40a <getNextDirection+0x152>
		ChangeLED(0);
 800d342:	2000      	movs	r0, #0
 800d344:	f000 ff2e 	bl	800e1a4 <ChangeLED>
		Calc = SearchOrFast;
 800d348:	4a53      	ldr	r2, [pc, #332]	; (800d498 <getNextDirection+0x1e0>)
 800d34a:	4b54      	ldr	r3, [pc, #336]	; (800d49c <getNextDirection+0x1e4>)
 800d34c:	6812      	ldr	r2, [r2, #0]
 800d34e:	601a      	str	r2, [r3, #0]
		TurnRight(turn_mode, maze, Mouse);
 800d350:	4629      	mov	r1, r5
 800d352:	4622      	mov	r2, r4
 800d354:	4638      	mov	r0, r7
}
 800d356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode, maze, Mouse);
 800d35a:	f7fc be77 	b.w	800a04c <TurnRight>
		ChangeLED(0);
 800d35e:	2000      	movs	r0, #0
		Calc = 1;//マップ更新したくないときは1を代入。
 800d360:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800d49c <getNextDirection+0x1e4>
		ChangeLED(0);
 800d364:	f000 ff1e 	bl	800e1a4 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d368:	2701      	movs	r7, #1
		GoBack(maze, Mouse);
 800d36a:	4621      	mov	r1, r4
 800d36c:	4628      	mov	r0, r5
		Calc = 1;//マップ更新したくないときは1を代入。
 800d36e:	f8c8 7000 	str.w	r7, [r8]
		GoBack(maze, Mouse);
 800d372:	f7fc fef3 	bl	800a15c <GoBack>
				accel_or_not = judgeAccelorNot(maze, Mouse->next.car, Mouse->next.node);
 800d376:	69e2      	ldr	r2, [r4, #28]
 800d378:	7da1      	ldrb	r1, [r4, #22]
 800d37a:	4628      	mov	r0, r5
 800d37c:	f7fe fd52 	bl	800be24 <judgeAccelorNot>
					if(VelocityMax == true)
 800d380:	4b48      	ldr	r3, [pc, #288]	; (800d4a4 <getNextDirection+0x1ec>)
 800d382:	781b      	ldrb	r3, [r3, #0]
				if(accel_or_not == true) //既知で.直進
 800d384:	2800      	cmp	r0, #0
 800d386:	d04e      	beq.n	800d426 <getNextDirection+0x16e>
						AddVelocity = 245;
 800d388:	eddf 7a47 	vldr	s15, [pc, #284]	; 800d4a8 <getNextDirection+0x1f0>
					if(VelocityMax == true)
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d07a      	beq.n	800d486 <getNextDirection+0x1ce>
						accel_or_decel = 0; //そのまま
 800d390:	2000      	movs	r0, #0
						AddVelocity = 245;
 800d392:	edc6 7a00 	vstr	s15, [r6]
 800d396:	e04f      	b.n	800d438 <getNextDirection+0x180>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d398:	4e40      	ldr	r6, [pc, #256]	; (800d49c <getNextDirection+0x1e4>)
		ChangeLED(0);
 800d39a:	2000      	movs	r0, #0
 800d39c:	f000 ff02 	bl	800e1a4 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d3a0:	2301      	movs	r3, #1
		GoBack(maze, Mouse);
 800d3a2:	4621      	mov	r1, r4
 800d3a4:	4628      	mov	r0, r5
		Calc = 1;//マップ更新したくないときは1を代入。
 800d3a6:	6033      	str	r3, [r6, #0]
		GoBack(maze, Mouse);
 800d3a8:	f7fc fed8 	bl	800a15c <GoBack>
		Calc = SearchOrFast;
 800d3ac:	4b3a      	ldr	r3, [pc, #232]	; (800d498 <getNextDirection+0x1e0>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	6033      	str	r3, [r6, #0]
		TurnLeft(turn_mode, maze, Mouse);
 800d3b2:	4622      	mov	r2, r4
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4638      	mov	r0, r7
}
 800d3b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode, maze, Mouse);
 800d3bc:	f7fc be88 	b.w	800a0d0 <TurnLeft>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d3c0:	4e36      	ldr	r6, [pc, #216]	; (800d49c <getNextDirection+0x1e4>)
		ChangeLED(0);
 800d3c2:	2000      	movs	r0, #0
 800d3c4:	f000 feee 	bl	800e1a4 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d3c8:	2301      	movs	r3, #1
		GoBack(maze, Mouse); //間の座標変動を
 800d3ca:	4621      	mov	r1, r4
 800d3cc:	4628      	mov	r0, r5
		Calc = 1;//マップ更新したくないときは1を代入。
 800d3ce:	6033      	str	r3, [r6, #0]
		GoBack(maze, Mouse); //間の座標変動を
 800d3d0:	f7fc fec4 	bl	800a15c <GoBack>
		Calc = SearchOrFast;
 800d3d4:	4b30      	ldr	r3, [pc, #192]	; (800d498 <getNextDirection+0x1e0>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	6033      	str	r3, [r6, #0]
		TurnRight(turn_mode, maze, Mouse);
 800d3da:	4622      	mov	r2, r4
 800d3dc:	4629      	mov	r1, r5
 800d3de:	4638      	mov	r0, r7
}
 800d3e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode, maze, Mouse);
 800d3e4:	f7fc be32 	b.w	800a04c <TurnRight>
}
 800d3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(VelocityMax == true)
 800d3ec:	4b2d      	ldr	r3, [pc, #180]	; (800d4a4 <getNextDirection+0x1ec>)
 800d3ee:	4a2c      	ldr	r2, [pc, #176]	; (800d4a0 <getNextDirection+0x1e8>)
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	edd2 0a00 	vldr	s1, [r2]
 800d3f6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d138      	bne.n	800d470 <getNextDirection+0x1b8>
				AddVelocity = 0;
 800d3fe:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800d4ac <getNextDirection+0x1f4>
 800d402:	eef0 7a47 	vmov.f32	s15, s14
 800d406:	ed86 7a00 	vstr	s14, [r6]
		Calc = SearchOrFast;
 800d40a:	4a23      	ldr	r2, [pc, #140]	; (800d498 <getNextDirection+0x1e0>)
 800d40c:	4b23      	ldr	r3, [pc, #140]	; (800d49c <getNextDirection+0x1e4>)
 800d40e:	6812      	ldr	r2, [r2, #0]
 800d410:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800d412:	4629      	mov	r1, r5
 800d414:	4622      	mov	r2, r4
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel, maze, Mouse);
 800d416:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800d4b0 <getNextDirection+0x1f8>
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800d41a:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800d41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800d422:	f7fc bcc9 	b.w	8009db8 <GoStraight>
					if(VelocityMax == true)
 800d426:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800d42a:	b9b3      	cbnz	r3, 800d45a <getNextDirection+0x1a2>
						AddVelocity = 0;
 800d42c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d4ac <getNextDirection+0x1f4>
 800d430:	eef0 7a47 	vmov.f32	s15, s14
 800d434:	ed86 7a00 	vstr	s14, [r6]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800d438:	4a19      	ldr	r2, [pc, #100]	; (800d4a0 <getNextDirection+0x1e8>)
		Calc = SearchOrFast;
 800d43a:	4b17      	ldr	r3, [pc, #92]	; (800d498 <getNextDirection+0x1e0>)
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800d43c:	edd2 0a00 	vldr	s1, [r2]
		Calc = SearchOrFast;
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f8c8 3000 	str.w	r3, [r8]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800d446:	4622      	mov	r2, r4
 800d448:	4629      	mov	r1, r5
 800d44a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800d4b0 <getNextDirection+0x1f8>
 800d44e:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800d452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel, maze, Mouse);
 800d456:	f7fc bcaf 	b.w	8009db8 <GoStraight>
						cnt += 2;
 800d45a:	4a16      	ldr	r2, [pc, #88]	; (800d4b4 <getNextDirection+0x1fc>)
						AddVelocity = 0;
 800d45c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d4ac <getNextDirection+0x1f4>
						cnt += 2;
 800d460:	6813      	ldr	r3, [r2, #0]
						AddVelocity = 0;
 800d462:	edc6 7a00 	vstr	s15, [r6]
						cnt += 2;
 800d466:	3302      	adds	r3, #2
 800d468:	6013      	str	r3, [r2, #0]
						accel_or_decel = -1; //減速
 800d46a:	f04f 30ff 	mov.w	r0, #4294967295
 800d46e:	e7e3      	b.n	800d438 <getNextDirection+0x180>
				cnt += 2;
 800d470:	4a11      	ldr	r2, [pc, #68]	; (800d4b8 <getNextDirection+0x200>)
				AddVelocity = 0;
 800d472:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800d4ac <getNextDirection+0x1f4>
				cnt += 2;
 800d476:	6813      	ldr	r3, [r2, #0]
				AddVelocity = 0;
 800d478:	edc6 7a00 	vstr	s15, [r6]
				cnt += 2;
 800d47c:	3302      	adds	r3, #2
 800d47e:	6013      	str	r3, [r2, #0]
				accel_or_decel = -1; //減速
 800d480:	f04f 30ff 	mov.w	r0, #4294967295
 800d484:	e7c1      	b.n	800d40a <getNextDirection+0x152>
						accel_or_decel = 1; //加速
 800d486:	4638      	mov	r0, r7
						AddVelocity = 245;
 800d488:	edc6 7a00 	vstr	s15, [r6]
 800d48c:	e7d4      	b.n	800d438 <getNextDirection+0x180>
				accel_or_decel = 1; //加速
 800d48e:	2001      	movs	r0, #1
 800d490:	e7bb      	b.n	800d40a <getNextDirection+0x152>
 800d492:	bf00      	nop
 800d494:	20001528 	.word	0x20001528
 800d498:	200015a8 	.word	0x200015a8
 800d49c:	200015c8 	.word	0x200015c8
 800d4a0:	200015a0 	.word	0x200015a0
 800d4a4:	2000159c 	.word	0x2000159c
 800d4a8:	43750000 	.word	0x43750000
 800d4ac:	00000000 	.word	0x00000000
 800d4b0:	42b40000 	.word	0x42b40000
 800d4b4:	2000000c 	.word	0x2000000c
 800d4b8:	20000008 	.word	0x20000008

0800d4bc <getPathNode>:
}Path;
Path FastPath[16*16]={0};

//最短走行用の経路配列作成
void getPathNode(maze_node *maze, profile *mouse)
{
 800d4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4c0:	4f30      	ldr	r7, [pc, #192]	; (800d584 <getPathNode+0xc8>)
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	4681      	mov	r9, r0
 800d4c6:	463b      	mov	r3, r7
 800d4c8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000

	//ノード情報は既にある前提
	for(int i=0; i < 16*16; i++)
		FastPath[i].path_ahead = false;
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	735a      	strb	r2, [r3, #13]
 800d4d0:	3310      	adds	r3, #16
	for(int i=0; i < 16*16; i++)
 800d4d2:	428b      	cmp	r3, r1
 800d4d4:	d1fb      	bne.n	800d4ce <getPathNode+0x12>

	static int path_num=0;
	//最初の次ノードは既に入っているので格納
	getNowWallVirtual(mouse->now.pos.x, mouse->now.pos.y);//0,1の壁がうまく更新できてない
 800d4d6:	7a61      	ldrb	r1, [r4, #9]
 800d4d8:	7a20      	ldrb	r0, [r4, #8]
	getNextWallVirtual(mouse->next.pos.x, mouse->next.pos.y);
	FastPath[path_num].path_state = mouse->now;
 800d4da:	4e2b      	ldr	r6, [pc, #172]	; (800d588 <getPathNode+0xcc>)
		FastPath[path_num].path_state = mouse->now; //next.dir
		shiftState(mouse);
//			printf("next\r\n");
//			printState(&(my_mouse.next));

			printf("\r\n");
 800d4dc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800d590 <getPathNode+0xd4>
	getNowWallVirtual(mouse->now.pos.x, mouse->now.pos.y);//0,1の壁がうまく更新できてない
 800d4e0:	f7fe feca 	bl	800c278 <getNowWallVirtual>
	FastPath[path_num].path_state = mouse->now;
 800d4e4:	f104 0508 	add.w	r5, r4, #8
	getNextWallVirtual(mouse->next.pos.x, mouse->next.pos.y);
 800d4e8:	7d61      	ldrb	r1, [r4, #21]
 800d4ea:	7d20      	ldrb	r0, [r4, #20]
 800d4ec:	f7fe feec 	bl	800c2c8 <getNextWallVirtual>
	FastPath[path_num].path_state = mouse->now;
 800d4f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d4f4:	6833      	ldr	r3, [r6, #0]
 800d4f6:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800d4fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FastPath[path_num].path_ahead = true;
 800d4fe:	2201      	movs	r2, #1
	shiftState(mouse);
 800d500:	4620      	mov	r0, r4
	FastPath[path_num].path_ahead = true;
 800d502:	735a      	strb	r2, [r3, #13]
 800d504:	f104 0814 	add.w	r8, r4, #20
	shiftState(mouse);
 800d508:	f7fd fd28 	bl	800af5c <shiftState>
	while(! ((mouse->goal_lesser.x <= mouse->now.pos.x && mouse->now.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= mouse->now.pos.y && mouse->now.pos.y <= mouse->goal_larger.y))  ) //nextがゴール到達するまでループ
 800d50c:	e01c      	b.n	800d548 <getPathNode+0x8c>
		mouse->next.node = getNextNode(maze, mouse->now.car, mouse->now.node, 0x03);
 800d50e:	6922      	ldr	r2, [r4, #16]
 800d510:	7aa1      	ldrb	r1, [r4, #10]
 800d512:	f7fe fb11 	bl	800bb38 <getNextNode>
		getNextState(&(mouse->now),&(mouse->next), mouse->next.node);
 800d516:	4641      	mov	r1, r8
		mouse->next.node = getNextNode(maze, mouse->now.car, mouse->now.node, 0x03);
 800d518:	4602      	mov	r2, r0
 800d51a:	61e0      	str	r0, [r4, #28]
		getNextState(&(mouse->now),&(mouse->next), mouse->next.node);
 800d51c:	4628      	mov	r0, r5
 800d51e:	f7fe fd65 	bl	800bfec <getNextState>
		getNextWallVirtual(mouse->next.pos.x, mouse->next.pos.y);
 800d522:	7d61      	ldrb	r1, [r4, #21]
 800d524:	7d20      	ldrb	r0, [r4, #20]
 800d526:	f7fe fecf 	bl	800c2c8 <getNextWallVirtual>
		path_num ++;
 800d52a:	6833      	ldr	r3, [r6, #0]
		FastPath[path_num].path_state = mouse->now; //next.dir
 800d52c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
		path_num ++;
 800d530:	3301      	adds	r3, #1
		FastPath[path_num].path_state = mouse->now; //next.dir
 800d532:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
 800d536:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		shiftState(mouse);
 800d53a:	4620      	mov	r0, r4
		path_num ++;
 800d53c:	6033      	str	r3, [r6, #0]
		shiftState(mouse);
 800d53e:	f7fd fd0d 	bl	800af5c <shiftState>
			printf("\r\n");
 800d542:	4650      	mov	r0, sl
 800d544:	f005 ff4c 	bl	80133e0 <puts>
	while(! ((mouse->goal_lesser.x <= mouse->now.pos.x && mouse->now.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= mouse->now.pos.y && mouse->now.pos.y <= mouse->goal_larger.y))  ) //nextがゴール到達するまでループ
 800d548:	7a22      	ldrb	r2, [r4, #8]
 800d54a:	7821      	ldrb	r1, [r4, #0]
 800d54c:	4291      	cmp	r1, r2
		mouse->next.node = getNextNode(maze, mouse->now.car, mouse->now.node, 0x03);
 800d54e:	f04f 0303 	mov.w	r3, #3
 800d552:	4648      	mov	r0, r9
	while(! ((mouse->goal_lesser.x <= mouse->now.pos.x && mouse->now.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= mouse->now.pos.y && mouse->now.pos.y <= mouse->goal_larger.y))  ) //nextがゴール到達するまでループ
 800d554:	d8db      	bhi.n	800d50e <getPathNode+0x52>
 800d556:	78a1      	ldrb	r1, [r4, #2]
 800d558:	4291      	cmp	r1, r2
 800d55a:	d3d8      	bcc.n	800d50e <getPathNode+0x52>
 800d55c:	7a62      	ldrb	r2, [r4, #9]
 800d55e:	7861      	ldrb	r1, [r4, #1]
 800d560:	4291      	cmp	r1, r2
 800d562:	d8d4      	bhi.n	800d50e <getPathNode+0x52>
 800d564:	78e1      	ldrb	r1, [r4, #3]
 800d566:	4291      	cmp	r1, r2
 800d568:	d3d1      	bcc.n	800d50e <getPathNode+0x52>
	}
	path_num ++;
 800d56a:	6833      	ldr	r3, [r6, #0]
	FastPath[path_num].path_state = mouse->next;
	Num_Nodes = path_num;
 800d56c:	4c07      	ldr	r4, [pc, #28]	; (800d58c <getPathNode+0xd0>)
	FastPath[path_num].path_state = mouse->next;
 800d56e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
	path_num ++;
 800d572:	3301      	adds	r3, #1
	FastPath[path_num].path_state = mouse->next;
 800d574:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 800d578:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	path_num ++;
 800d57c:	6033      	str	r3, [r6, #0]
	Num_Nodes = path_num;
 800d57e:	6023      	str	r3, [r4, #0]
//		{
//			printState(&(FastPath[i].path_state));
//		}
//		printf("\r\n");

}
 800d580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d584:	20000224 	.word	0x20000224
 800d588:	20001228 	.word	0x20001228
 800d58c:	20001224 	.word	0x20001224
 800d590:	08016f80 	.word	0x08016f80

0800d594 <getPathAction>:

void getPathAction(profile *mouse)
{
 800d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//Pathからアクション計画を立てる
	int count = 0;
	if( (mouse->goal_lesser.x <= FastPath[count].path_state.node->pos.x &&  FastPath[count].path_state.node->pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= FastPath[count].path_state.node->pos.y &&  FastPath[count].path_state.node->pos.y <= mouse->goal_larger.y) ){
 800d598:	4b54      	ldr	r3, [pc, #336]	; (800d6ec <getPathAction+0x158>)
 800d59a:	7806      	ldrb	r6, [r0, #0]
 800d59c:	689a      	ldr	r2, [r3, #8]
 800d59e:	78c1      	ldrb	r1, [r0, #3]
 800d5a0:	7993      	ldrb	r3, [r2, #6]
 800d5a2:	f890 c002 	ldrb.w	ip, [r0, #2]
 800d5a6:	f890 9001 	ldrb.w	r9, [r0, #1]
{
 800d5aa:	b083      	sub	sp, #12
	if( (mouse->goal_lesser.x <= FastPath[count].path_state.node->pos.x &&  FastPath[count].path_state.node->pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= FastPath[count].path_state.node->pos.y &&  FastPath[count].path_state.node->pos.y <= mouse->goal_larger.y) ){
 800d5ac:	429e      	cmp	r6, r3
 800d5ae:	9101      	str	r1, [sp, #4]
 800d5b0:	d80a      	bhi.n	800d5c8 <getPathAction+0x34>
 800d5b2:	4563      	cmp	r3, ip
 800d5b4:	d808      	bhi.n	800d5c8 <getPathAction+0x34>
 800d5b6:	79d3      	ldrb	r3, [r2, #7]
 800d5b8:	454b      	cmp	r3, r9
 800d5ba:	d305      	bcc.n	800d5c8 <getPathAction+0x34>
 800d5bc:	428b      	cmp	r3, r1
 800d5be:	d803      	bhi.n	800d5c8 <getPathAction+0x34>
 800d5c0:	f04f 33ff 	mov.w	r3, #4294967295
	int count = 0;
 800d5c4:	2100      	movs	r1, #0
 800d5c6:	e079      	b.n	800d6bc <getPathAction+0x128>
			FastPath[0].path_action = ACC_DEC;//加減速一回で終わり
			//61.5+45mm
		}
	}
	else {
		if(FastPath[2].path_state.node->rc == 1){
 800d5c8:	4948      	ldr	r1, [pc, #288]	; (800d6ec <getPathAction+0x158>)
 800d5ca:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800d5cc:	795b      	ldrb	r3, [r3, #5]
 800d5ce:	bb73      	cbnz	r3, 800d62e <getPathAction+0x9a>
			FastPath[0].path_action = START;	 //初手ターン用の加速
			FastPath[1].path_action = R_90_SEARCH;
		}
		else{
			//2マス以上直進
			FastPath[0].path_action = ACC_DEC;
 800d5d0:	4a46      	ldr	r2, [pc, #280]	; (800d6ec <getPathAction+0x158>)
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	7313      	strb	r3, [r2, #12]
			FastPath[1].path_action = ACC_DEC;
 800d5d6:	7713      	strb	r3, [r2, #28]
{
 800d5d8:	2102      	movs	r1, #2
				                }
								//左旋回
								//東向きから北東 or //西向きから南西
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
								{
									FastPath[count].path_action = L_90_SEARCH;
 800d5da:	468b      	mov	fp, r1
 800d5dc:	4b43      	ldr	r3, [pc, #268]	; (800d6ec <getPathAction+0x158>)
									FastPath[count].path_action = R_90_SEARCH;
 800d5de:	f04f 0a03 	mov.w	sl, #3
							FastPath[count].path_action = ACC_DEC;
 800d5e2:	f04f 0801 	mov.w	r8, #1
 800d5e6:	e00a      	b.n	800d5fe <getPathAction+0x6a>
							uint8_t now_x = FastPath[count].path_state.node->pos.x, now_y = FastPath[count].path_state.node->pos.y;
 800d5e8:	7982      	ldrb	r2, [r0, #6]
 800d5ea:	79c5      	ldrb	r5, [r0, #7]
							uint8_t next_x = FastPath[count+1].path_state.node->pos.x, next_y = FastPath[count+1].path_state.node->pos.y;
 800d5ec:	79a0      	ldrb	r0, [r4, #6]
 800d5ee:	79e4      	ldrb	r4, [r4, #7]
							if(FastPath[count].path_state.node->rc == 0)
 800d5f0:	bb17      	cbnz	r7, 800d638 <getPathAction+0xa4>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800d5f2:	1c57      	adds	r7, r2, #1
 800d5f4:	4287      	cmp	r7, r0
 800d5f6:	d03c      	beq.n	800d672 <getPathAction+0xde>
 800d5f8:	4282      	cmp	r2, r0
 800d5fa:	d043      	beq.n	800d684 <getPathAction+0xf0>
 800d5fc:	3310      	adds	r3, #16
		while( !((mouse->goal_lesser.x <= FastPath[count].path_state.pos.x &&  FastPath[count].path_state.pos.x <= mouse->goal_larger.x) && (mouse->goal_lesser.y <= FastPath[count].path_state.pos.y &&  FastPath[count].path_state.pos.y <= mouse->goal_larger.y)) )
 800d5fe:	f893 2020 	ldrb.w	r2, [r3, #32]
 800d602:	4296      	cmp	r6, r2
 800d604:	d808      	bhi.n	800d618 <getPathAction+0x84>
 800d606:	4562      	cmp	r2, ip
 800d608:	d806      	bhi.n	800d618 <getPathAction+0x84>
 800d60a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800d60e:	454a      	cmp	r2, r9
 800d610:	d302      	bcc.n	800d618 <getPathAction+0x84>
 800d612:	9801      	ldr	r0, [sp, #4]
 800d614:	4282      	cmp	r2, r0
 800d616:	d950      	bls.n	800d6ba <getPathAction+0x126>
						if(FastPath[count].path_state.node->rc == FastPath[count+1].path_state.node->rc){
 800d618:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d61a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800d61c:	7947      	ldrb	r7, [r0, #5]
 800d61e:	7962      	ldrb	r2, [r4, #5]
 800d620:	42ba      	cmp	r2, r7
 800d622:	f101 0101 	add.w	r1, r1, #1
 800d626:	d1df      	bne.n	800d5e8 <getPathAction+0x54>
							FastPath[count].path_action = ACC_DEC;
 800d628:	f883 802c 	strb.w	r8, [r3, #44]	; 0x2c
 800d62c:	e7e6      	b.n	800d5fc <getPathAction+0x68>
			FastPath[0].path_action = START;	 //初手ターン用の加速
 800d62e:	2200      	movs	r2, #0
			FastPath[1].path_action = R_90_SEARCH;
 800d630:	2303      	movs	r3, #3
			FastPath[0].path_action = START;	 //初手ターン用の加速
 800d632:	730a      	strb	r2, [r1, #12]
			FastPath[1].path_action = R_90_SEARCH;
 800d634:	770b      	strb	r3, [r1, #28]
 800d636:	e7cf      	b.n	800d5d8 <getPathAction+0x44>
								if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800d638:	4282      	cmp	r2, r0
 800d63a:	d00d      	beq.n	800d658 <getPathAction+0xc4>
 800d63c:	1e57      	subs	r7, r2, #1
 800d63e:	4287      	cmp	r7, r0
 800d640:	d1dc      	bne.n	800d5fc <getPathAction+0x68>
 800d642:	f105 0e01 	add.w	lr, r5, #1
 800d646:	4574      	cmp	r4, lr
 800d648:	d024      	beq.n	800d694 <getPathAction+0x100>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800d64a:	4287      	cmp	r7, r0
 800d64c:	d1d6      	bne.n	800d5fc <getPathAction+0x68>
 800d64e:	42a5      	cmp	r5, r4
 800d650:	d1d4      	bne.n	800d5fc <getPathAction+0x68>
									FastPath[count].path_action = L_90_SEARCH;
 800d652:	f883 b02c 	strb.w	fp, [r3, #44]	; 0x2c
 800d656:	e7d1      	b.n	800d5fc <getPathAction+0x68>
								if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800d658:	42a5      	cmp	r5, r4
 800d65a:	d01b      	beq.n	800d694 <getPathAction+0x100>
 800d65c:	1e57      	subs	r7, r2, #1
 800d65e:	4297      	cmp	r7, r2
 800d660:	f105 0e01 	add.w	lr, r5, #1
 800d664:	d13e      	bne.n	800d6e4 <getPathAction+0x150>
 800d666:	45a6      	cmp	lr, r4
 800d668:	d014      	beq.n	800d694 <getPathAction+0x100>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800d66a:	45a6      	cmp	lr, r4
 800d66c:	d0f1      	beq.n	800d652 <getPathAction+0xbe>
 800d66e:	1e57      	subs	r7, r2, #1
 800d670:	e7eb      	b.n	800d64a <getPathAction+0xb6>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800d672:	42a5      	cmp	r5, r4
 800d674:	d016      	beq.n	800d6a4 <getPathAction+0x110>
 800d676:	42ba      	cmp	r2, r7
 800d678:	f105 32ff 	add.w	r2, r5, #4294967295
 800d67c:	d018      	beq.n	800d6b0 <getPathAction+0x11c>
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800d67e:	42a2      	cmp	r2, r4
 800d680:	d1bc      	bne.n	800d5fc <getPathAction+0x68>
 800d682:	e7e6      	b.n	800d652 <getPathAction+0xbe>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800d684:	1e6a      	subs	r2, r5, #1
 800d686:	42a2      	cmp	r2, r4
 800d688:	d014      	beq.n	800d6b4 <getPathAction+0x120>
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800d68a:	42a5      	cmp	r5, r4
 800d68c:	d0e1      	beq.n	800d652 <getPathAction+0xbe>
 800d68e:	4287      	cmp	r7, r0
 800d690:	d1b4      	bne.n	800d5fc <getPathAction+0x68>
 800d692:	e7f4      	b.n	800d67e <getPathAction+0xea>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800d694:	4282      	cmp	r2, r0
									FastPath[count].path_action = R_90_SEARCH;
 800d696:	f883 a02c 	strb.w	sl, [r3, #44]	; 0x2c
 800d69a:	bf08      	it	eq
 800d69c:	f105 0e01 	addeq.w	lr, r5, #1
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800d6a0:	d0e3      	beq.n	800d66a <getPathAction+0xd6>
 800d6a2:	e7e4      	b.n	800d66e <getPathAction+0xda>
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800d6a4:	42ba      	cmp	r2, r7
									FastPath[count].path_action = R_90_SEARCH;
 800d6a6:	f883 a02c 	strb.w	sl, [r3, #44]	; 0x2c
								if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800d6aa:	d0d2      	beq.n	800d652 <getPathAction+0xbe>
 800d6ac:	1e62      	subs	r2, r4, #1
 800d6ae:	e7e6      	b.n	800d67e <getPathAction+0xea>
								if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) || __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800d6b0:	4294      	cmp	r4, r2
 800d6b2:	d1e4      	bne.n	800d67e <getPathAction+0xea>
									FastPath[count].path_action = R_90_SEARCH;
 800d6b4:	f883 a02c 	strb.w	sl, [r3, #44]	; 0x2c
 800d6b8:	e7e7      	b.n	800d68a <getPathAction+0xf6>
 800d6ba:	1e4b      	subs	r3, r1, #1
	//ゴールノード
	//終端速度の変数 0
	//前回がターンなら加減速を選択して、加速の割合を0として減速
	//前回までが直進なら、加減速を選択して、ゴールラインを駆け抜ける処理を入れる
		//一つ前のpath_actionによって変える
		switch(FastPath[count-1].path_action)
 800d6bc:	4a0b      	ldr	r2, [pc, #44]	; (800d6ec <getPathAction+0x158>)
 800d6be:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800d6c2:	7b1b      	ldrb	r3, [r3, #12]
 800d6c4:	b12b      	cbz	r3, 800d6d2 <getPathAction+0x13e>
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	d806      	bhi.n	800d6d8 <getPathAction+0x144>
				FastPath[count].path_action = ACC_DEC; //ただの減速.
				//加速の割合を0にする
				break;
			case ACC_DEC:
				//前回ACC_DECということはそのまま継続でひとまとめにする
				FastPath[count].path_action = ACC_DEC; //前のアクションとひとまとめ（countを利用）
 800d6ca:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	730b      	strb	r3, [r1, #12]
		//accel to decel
		//turn(left, right) = two pattern
		//90deg slalom
		//45deg slalom
		//180deg slalom
}
 800d6d2:	b003      	add	sp, #12
 800d6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				printf("missng action !! in getPathAction.\r\n");
 800d6d8:	4805      	ldr	r0, [pc, #20]	; (800d6f0 <getPathAction+0x15c>)
}
 800d6da:	b003      	add	sp, #12
 800d6dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				printf("missng action !! in getPathAction.\r\n");
 800d6e0:	f005 be7e 	b.w	80133e0 <puts>
								if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) || __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800d6e4:	45a6      	cmp	lr, r4
 800d6e6:	d189      	bne.n	800d5fc <getPathAction+0x68>
 800d6e8:	e7b3      	b.n	800d652 <getPathAction+0xbe>
 800d6ea:	bf00      	nop
 800d6ec:	20000224 	.word	0x20000224
 800d6f0:	08016e00 	.word	0x08016e00

0800d6f4 <FastStraight>:
const float conv_pul = 2/MM_PER_PULSE;
void FastStraight(float cut, float num, float accel, float decel, float top_speed, float end_speed)//加減速を切り替える割合と、マス数の指定
{
 800d6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f8:	ed2d 8b08 	vpush	{d8-d11}
		float add_distance = cut*90*num;//スタート時の加速では61.5になるようにnumをかける
 800d6fc:	eddf aaae 	vldr	s21, [pc, #696]	; 800d9b8 <FastStraight+0x2c4>
		TargetAngularV = 0;
		int target_pulse = (int)(add_distance*conv_pul);
 800d700:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800d9bc <FastStraight+0x2c8>
		TargetAngularV = 0;
 800d704:	4bae      	ldr	r3, [pc, #696]	; (800d9c0 <FastStraight+0x2cc>)
 800d706:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 800d9e4 <FastStraight+0x2f0>
 800d70a:	4dae      	ldr	r5, [pc, #696]	; (800d9c4 <FastStraight+0x2d0>)
 800d70c:	4cae      	ldr	r4, [pc, #696]	; (800d9c8 <FastStraight+0x2d4>)
 800d70e:	4faf      	ldr	r7, [pc, #700]	; (800d9cc <FastStraight+0x2d8>)
 800d710:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 800d9e8 <FastStraight+0x2f4>
			}
			//壁の値を見て一瞬だけ制御オン
				//90mm毎に左右を見る

			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
				if(Photo[SL] >= LEFT_WALL && Photo[SR] >= RIGHT_WALL){
 800d714:	ed9f baae 	vldr	s22, [pc, #696]	; 800d9d0 <FastStraight+0x2dc>
		float add_distance = cut*90*num;//スタート時の加速では61.5になるようにnumをかける
 800d718:	ee60 7a2a 	vmul.f32	s15, s0, s21
		TargetAngularV = 0;
 800d71c:	f04f 0a00 	mov.w	sl, #0
		float add_distance = cut*90*num;//スタート時の加速では61.5になるようにnumをかける
 800d720:	ee67 7aa0 	vmul.f32	s15, s15, s1
{
 800d724:	eeb0 aa40 	vmov.f32	s20, s0
		int target_pulse = (int)(add_distance*conv_pul);
 800d728:	ee67 7a87 	vmul.f32	s15, s15, s14
		TargetAngularV = 0;
 800d72c:	f8c3 a000 	str.w	sl, [r3]
		int target_pulse = (int)(add_distance*conv_pul);
 800d730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
{
 800d734:	eeb0 9a60 	vmov.f32	s18, s1
		int target_pulse = (int)(add_distance*conv_pul);
 800d738:	ee17 6a90 	vmov	r6, s15
{
 800d73c:	eef0 ba41 	vmov.f32	s23, s2
 800d740:	eef0 8a61 	vmov.f32	s17, s3
 800d744:	eef0 9a42 	vmov.f32	s19, s4
 800d748:	eeb0 8a62 	vmov.f32	s16, s5
		while( ( TotalPulse[BODY] )  < ( KeepPulse[BODY] + target_pulse) )
 800d74c:	68aa      	ldr	r2, [r5, #8]
 800d74e:	68a3      	ldr	r3, [r4, #8]
 800d750:	4433      	add	r3, r6
 800d752:	429a      	cmp	r2, r3
 800d754:	da54      	bge.n	800d800 <FastStraight+0x10c>
			if(TargetVelocity[BODY] >= top_speed) //直線の加速時は、充分大きな値を設定
 800d756:	4b9f      	ldr	r3, [pc, #636]	; (800d9d4 <FastStraight+0x2e0>)
			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
 800d758:	4a9f      	ldr	r2, [pc, #636]	; (800d9d8 <FastStraight+0x2e4>)
			if(TargetVelocity[BODY] >= top_speed) //直線の加速時は、充分大きな値を設定
 800d75a:	edd3 7a02 	vldr	s15, [r3, #8]
			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
 800d75e:	683b      	ldr	r3, [r7, #0]
			if(TargetVelocity[BODY] >= top_speed) //直線の加速時は、充分大きな値を設定
 800d760:	eef4 7ae9 	vcmpe.f32	s15, s19
 800d764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				Acceleration = 0;
 800d768:	bfac      	ite	ge
 800d76a:	f8c9 a000 	strge.w	sl, [r9]
				Acceleration = accel;//2.89000f; //2.70f;//1.0000f;//
 800d76e:	edc9 ba00 	vstrlt	s23, [r9]
			if(  ( (TotalPulse[BODY] ) >= ( KeepPulse[BODY] + (int)(0.95f*90.0f*conv_pul)*section_num)) && (( TotalPulse[BODY] ) <= ( KeepPulse[BODY] + (int)(1.05*90.0f*conv_pul)*section_num) ) ){ //90 mm毎に一回だけ壁を見る
 800d772:	68a9      	ldr	r1, [r5, #8]
 800d774:	68a0      	ldr	r0, [r4, #8]
 800d776:	fb02 0203 	mla	r2, r2, r3, r0
 800d77a:	4291      	cmp	r1, r2
 800d77c:	f2c0 80cb 	blt.w	800d916 <FastStraight+0x222>
 800d780:	68a9      	ldr	r1, [r5, #8]
 800d782:	4a96      	ldr	r2, [pc, #600]	; (800d9dc <FastStraight+0x2e8>)
 800d784:	68a0      	ldr	r0, [r4, #8]
 800d786:	fb02 0203 	mla	r2, r2, r3, r0
 800d78a:	4291      	cmp	r1, r2
 800d78c:	f300 80c3 	bgt.w	800d916 <FastStraight+0x222>
				if(Photo[SL] >= LEFT_WALL && Photo[SR] >= RIGHT_WALL){
 800d790:	edd8 7a02 	vldr	s15, [r8, #8]
 800d794:	eef4 7acb 	vcmpe.f32	s15, s22
 800d798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79c:	db07      	blt.n	800d7ae <FastStraight+0xba>
 800d79e:	edd8 7a01 	vldr	s15, [r8, #4]
 800d7a2:	eef4 7aea 	vcmpe.f32	s15, s21
 800d7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7aa:	f280 80f1 	bge.w	800d990 <FastStraight+0x29c>
					PIDChangeFlag(A_VELO_PID, 0);
					PIDChangeFlag(R_WALL_PID, 0);
					PIDChangeFlag(L_WALL_PID, 0);
					ChangeLED(5);
				}
				else if(Photo[SL] >= LEFT_WALL ){
 800d7ae:	edd8 7a02 	vldr	s15, [r8, #8]
 800d7b2:	eef4 7acb 	vcmpe.f32	s15, s22
 800d7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ba:	f280 80d5 	bge.w	800d968 <FastStraight+0x274>
					PIDChangeFlag(R_WALL_PID, 0);
					PIDChangeFlag(D_WALL_PID, 0);
					ChangeLED(4);

				}
				else if(Photo[SR] >= RIGHT_WALL){
 800d7be:	edd8 7a01 	vldr	s15, [r8, #4]
 800d7c2:	eef4 7aea 	vcmpe.f32	s15, s21
 800d7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					PIDChangeFlag(R_WALL_PID, 1);
 800d7ca:	f04f 0101 	mov.w	r1, #1
				else if(Photo[SR] >= RIGHT_WALL){
 800d7ce:	f2c0 80b8 	blt.w	800d942 <FastStraight+0x24e>
					PIDChangeFlag(R_WALL_PID, 1);
 800d7d2:	2003      	movs	r0, #3
 800d7d4:	f001 f90e 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(A_VELO_PID,0);
 800d7d8:	2100      	movs	r1, #0
 800d7da:	4608      	mov	r0, r1
 800d7dc:	f001 f90a 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(D_WALL_PID, 0);
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	2001      	movs	r0, #1
 800d7e4:	f001 f906 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(L_WALL_PID, 0);
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	2002      	movs	r0, #2
 800d7ec:	f001 f902 	bl	800e9f4 <PIDChangeFlag>
					ChangeLED(1);
 800d7f0:	2001      	movs	r0, #1
 800d7f2:	f000 fcd7 	bl	800e1a4 <ChangeLED>
		while( ( TotalPulse[BODY] )  < ( KeepPulse[BODY] + target_pulse) )
 800d7f6:	68aa      	ldr	r2, [r5, #8]
 800d7f8:	68a3      	ldr	r3, [r4, #8]
 800d7fa:	4433      	add	r3, r6
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	dbaa      	blt.n	800d756 <FastStraight+0x62>
				//3パターンに該当すれば壁制御を一瞬だけ入れる
				//割込みのタイマを使ってタイミングを決める. （また複雑に...）


		}
		PIDChangeFlag(D_WALL_PID, 0);
 800d800:	2100      	movs	r1, #0
 800d802:	2001      	movs	r0, #1
 800d804:	f001 f8f6 	bl	800e9f4 <PIDChangeFlag>
		PIDChangeFlag(R_WALL_PID, 0);
 800d808:	2100      	movs	r1, #0
 800d80a:	2003      	movs	r0, #3
 800d80c:	f001 f8f2 	bl	800e9f4 <PIDChangeFlag>
		PIDChangeFlag(L_WALL_PID, 0);
 800d810:	2100      	movs	r1, #0
 800d812:	2002      	movs	r0, #2
 800d814:	f001 f8ee 	bl	800e9f4 <PIDChangeFlag>
		PIDChangeFlag(A_VELO_PID, 1);
 800d818:	2101      	movs	r1, #1
 800d81a:	2000      	movs	r0, #0
 800d81c:	f001 f8ea 	bl	800e9f4 <PIDChangeFlag>
		ChangeLED(0);
 800d820:	2000      	movs	r0, #0
 800d822:	f000 fcbf 	bl	800e1a4 <ChangeLED>
		section_num = 0;
		Acceleration = 0;
 800d826:	2300      	movs	r3, #0
 800d828:	f8c9 3000 	str.w	r3, [r9]
		KeepPulse[BODY] += target_pulse;
 800d82c:	68a2      	ldr	r2, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
		KeepPulse[RIGHT] += target_pulse*0.5f;

		float dec_distance = (1-cut)*90*num;
 800d82e:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800d9b8 <FastStraight+0x2c4>
		target_pulse = (int)(dec_distance *conv_pul);
 800d832:	eddf 5a62 	vldr	s11, [pc, #392]	; 800d9bc <FastStraight+0x2c8>

		while( 	((Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800d836:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800d9e0 <FastStraight+0x2ec>
		{
			if(TargetVelocity[BODY] <= end_speed) //
 800d83a:	4866      	ldr	r0, [pc, #408]	; (800d9d4 <FastStraight+0x2e0>)
		KeepPulse[BODY] += target_pulse;
 800d83c:	4432      	add	r2, r6
 800d83e:	60a2      	str	r2, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 800d840:	ed94 7a00 	vldr	s14, [r4]
 800d844:	ee07 6a90 	vmov	s15, r6
 800d848:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d84c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d850:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d854:	eea7 7a86 	vfma.f32	s14, s15, s12
		section_num = 0;
 800d858:	2200      	movs	r2, #0
 800d85a:	603a      	str	r2, [r7, #0]
		float dec_distance = (1-cut)*90*num;
 800d85c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
		KeepPulse[LEFT] += target_pulse*0.5f;
 800d860:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		float dec_distance = (1-cut)*90*num;
 800d864:	ee70 0aca 	vsub.f32	s1, s1, s20
		KeepPulse[LEFT] += target_pulse*0.5f;
 800d868:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800d86c:	ed94 7a01 	vldr	s14, [r4, #4]
 800d870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		float dec_distance = (1-cut)*90*num;
 800d874:	ee60 0a85 	vmul.f32	s1, s1, s10
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800d878:	eea7 7a86 	vfma.f32	s14, s15, s12
			{
				Acceleration = 0;
 800d87c:	461e      	mov	r6, r3
		float dec_distance = (1-cut)*90*num;
 800d87e:	ee60 0a89 	vmul.f32	s1, s1, s18
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800d882:	eefd 7ac7 	vcvt.s32.f32	s15, s14
		target_pulse = (int)(dec_distance *conv_pul);
 800d886:	ee60 0aa5 	vmul.f32	s1, s1, s11
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800d88a:	edc4 7a01 	vstr	s15, [r4, #4]
		target_pulse = (int)(dec_distance *conv_pul);
 800d88e:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800d892:	ee17 2a90 	vmov	r2, s15
		while( 	((Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800d896:	e00f      	b.n	800d8b8 <FastStraight+0x1c4>
 800d898:	68a3      	ldr	r3, [r4, #8]
 800d89a:	68a9      	ldr	r1, [r5, #8]
 800d89c:	4413      	add	r3, r2
 800d89e:	428b      	cmp	r3, r1
 800d8a0:	dd15      	ble.n	800d8ce <FastStraight+0x1da>
			if(TargetVelocity[BODY] <= end_speed) //
 800d8a2:	edd0 7a02 	vldr	s15, [r0, #8]
 800d8a6:	eef4 7ac8 	vcmpe.f32	s15, s16
 800d8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				Acceleration = 0;
 800d8ae:	bf94      	ite	ls
 800d8b0:	f8c9 6000 	strls.w	r6, [r9]
//				TargetVelocity[BODY] = end_speed;
			}
			else
			{
				Acceleration = decel;//2.89000f; //2.70f;//1.0000f;//
 800d8b4:	edc9 8a00 	vstrhi	s17, [r9]
		while( 	((Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800d8b8:	edd8 7a03 	vldr	s15, [r8, #12]
 800d8bc:	ed98 7a00 	vldr	s14, [r8]
 800d8c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8cc:	d4e4      	bmi.n	800d898 <FastStraight+0x1a4>
			}
			//Acceleration = decel;//-2.89;//1.0000f;//
//			if(TargetVelocity[BODY] <= 240)
//				Acceleration = 0;
		}
		Acceleration = 0;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	f8c9 3000 	str.w	r3, [r9]
//		TargetVelocity[BODY] = end_speed;
		KeepPulse[BODY] += target_pulse;
 800d8d4:	68a3      	ldr	r3, [r4, #8]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	60a3      	str	r3, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 800d8da:	ed94 7a00 	vldr	s14, [r4]
 800d8de:	ee07 2a90 	vmov	s15, r2
 800d8e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d8e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d8ee:	eea7 7aa6 	vfma.f32	s14, s15, s13
		KeepPulse[RIGHT] += target_pulse*0.5f;

}
 800d8f2:	ecbd 8b08 	vpop	{d8-d11}
		KeepPulse[LEFT] += target_pulse*0.5f;
 800d8f6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800d8fa:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 800d8fe:	ed94 7a01 	vldr	s14, [r4, #4]
 800d902:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d906:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d90a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800d90e:	edc4 7a01 	vstr	s15, [r4, #4]
}
 800d912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				section_num++;
 800d916:	3301      	adds	r3, #1
				PIDChangeFlag(D_WALL_PID, 0);
 800d918:	2100      	movs	r1, #0
 800d91a:	2001      	movs	r0, #1
				section_num++;
 800d91c:	603b      	str	r3, [r7, #0]
				PIDChangeFlag(D_WALL_PID, 0);
 800d91e:	f001 f869 	bl	800e9f4 <PIDChangeFlag>
				PIDChangeFlag(R_WALL_PID, 0);
 800d922:	2100      	movs	r1, #0
 800d924:	2003      	movs	r0, #3
 800d926:	f001 f865 	bl	800e9f4 <PIDChangeFlag>
				PIDChangeFlag(L_WALL_PID, 0);
 800d92a:	2100      	movs	r1, #0
 800d92c:	2002      	movs	r0, #2
 800d92e:	f001 f861 	bl	800e9f4 <PIDChangeFlag>
				PIDChangeFlag(A_VELO_PID, 1);
 800d932:	2101      	movs	r1, #1
 800d934:	2000      	movs	r0, #0
 800d936:	f001 f85d 	bl	800e9f4 <PIDChangeFlag>
				ChangeLED(0);
 800d93a:	2000      	movs	r0, #0
 800d93c:	f000 fc32 	bl	800e1a4 <ChangeLED>
 800d940:	e704      	b.n	800d74c <FastStraight+0x58>
					PIDChangeFlag(A_VELO_PID, 1);
 800d942:	2000      	movs	r0, #0
 800d944:	f001 f856 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(R_WALL_PID, 0);
 800d948:	2100      	movs	r1, #0
 800d94a:	2003      	movs	r0, #3
 800d94c:	f001 f852 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(L_WALL_PID, 0);
 800d950:	2100      	movs	r1, #0
 800d952:	2002      	movs	r0, #2
 800d954:	f001 f84e 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(D_WALL_PID, 0);
 800d958:	2100      	movs	r1, #0
 800d95a:	2001      	movs	r0, #1
 800d95c:	f001 f84a 	bl	800e9f4 <PIDChangeFlag>
					ChangeLED(2);
 800d960:	2002      	movs	r0, #2
 800d962:	f000 fc1f 	bl	800e1a4 <ChangeLED>
 800d966:	e6f1      	b.n	800d74c <FastStraight+0x58>
					PIDChangeFlag(L_WALL_PID, 1);
 800d968:	2101      	movs	r1, #1
 800d96a:	2002      	movs	r0, #2
 800d96c:	f001 f842 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(A_VELO_PID, 0);
 800d970:	2100      	movs	r1, #0
 800d972:	4608      	mov	r0, r1
 800d974:	f001 f83e 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(R_WALL_PID, 0);
 800d978:	2100      	movs	r1, #0
 800d97a:	2003      	movs	r0, #3
 800d97c:	f001 f83a 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(D_WALL_PID, 0);
 800d980:	2100      	movs	r1, #0
 800d982:	2001      	movs	r0, #1
 800d984:	f001 f836 	bl	800e9f4 <PIDChangeFlag>
					ChangeLED(4);
 800d988:	2004      	movs	r0, #4
 800d98a:	f000 fc0b 	bl	800e1a4 <ChangeLED>
 800d98e:	e6dd      	b.n	800d74c <FastStraight+0x58>
					PIDChangeFlag(D_WALL_PID, 1);
 800d990:	2101      	movs	r1, #1
 800d992:	4608      	mov	r0, r1
 800d994:	f001 f82e 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(A_VELO_PID, 0);
 800d998:	2100      	movs	r1, #0
 800d99a:	4608      	mov	r0, r1
 800d99c:	f001 f82a 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(R_WALL_PID, 0);
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	2003      	movs	r0, #3
 800d9a4:	f001 f826 	bl	800e9f4 <PIDChangeFlag>
					PIDChangeFlag(L_WALL_PID, 0);
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	2002      	movs	r0, #2
 800d9ac:	f001 f822 	bl	800e9f4 <PIDChangeFlag>
					ChangeLED(5);
 800d9b0:	2005      	movs	r0, #5
 800d9b2:	f000 fbf7 	bl	800e1a4 <ChangeLED>
				if(Photo[SL] >= LEFT_WALL && Photo[SR] >= RIGHT_WALL){
 800d9b6:	e6c9      	b.n	800d74c <FastStraight+0x58>
 800d9b8:	42b40000 	.word	0x42b40000
 800d9bc:	44fdc7cf 	.word	0x44fdc7cf
 800d9c0:	2000152c 	.word	0x2000152c
 800d9c4:	2000154c 	.word	0x2000154c
 800d9c8:	20001580 	.word	0x20001580
 800d9cc:	2000122c 	.word	0x2000122c
 800d9d0:	42c80000 	.word	0x42c80000
 800d9d4:	2000151c 	.word	0x2000151c
 800d9d8:	0002a611 	.word	0x0002a611
 800d9dc:	0002ed72 	.word	0x0002ed72
 800d9e0:	456d8000 	.word	0x456d8000
 800d9e4:	2000020c 	.word	0x2000020c
 800d9e8:	2000158c 	.word	0x2000158c
 800d9ec:	00000000 	.word	0x00000000

0800d9f0 <MaxParaRunTest>:
void MaxParaRunTest(maze_node *maze, profile *mouse)
{
 800d9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int start_cnt=0;
	float straight_num = 0;
	//ノードの数だけループ
	int num_nodes = Num_Nodes;
 800d9f4:	4b60      	ldr	r3, [pc, #384]	; (800db78 <MaxParaRunTest+0x188>)
 800d9f6:	681c      	ldr	r4, [r3, #0]
{
 800d9f8:	ed2d 8b04 	vpush	{d8-d9}
 800d9fc:	4680      	mov	r8, r0
	ChangeLED(0);
 800d9fe:	2000      	movs	r0, #0
{
 800da00:	4689      	mov	r9, r1
	ChangeLED(0);
 800da02:	f000 fbcf 	bl	800e1a4 <ChangeLED>
	for(int count=0; count <= num_nodes; count++)
 800da06:	2c00      	cmp	r4, #0
 800da08:	db2b      	blt.n	800da62 <MaxParaRunTest+0x72>
			{
				count ++;
			}
			straight_num = (float)(count - start_cnt);
			if(start_cnt == 0){
				straight_num -= ((90-61.5)/90);
 800da0a:	a759      	add	r7, pc, #356	; (adr r7, 800db70 <MaxParaRunTest+0x180>)
 800da0c:	e9d7 6700 	ldrd	r6, r7, [r7]
 800da10:	4d5a      	ldr	r5, [pc, #360]	; (800db7c <MaxParaRunTest+0x18c>)
//			FastPath[start_cnt].path_state.pos.x
			PIDChangeFlag(A_VELO_PID, 1);
			PIDChangeFlag(R_WALL_PID, 0);
			PIDChangeFlag(L_WALL_PID, 0);
			PIDChangeFlag(D_WALL_PID, 0);
			FastStraight(0.5, straight_num,1.00, -1.00/*2.89, -2.89*/, 4000, ExploreVelocity);
 800da12:	ed9f 9a5b 	vldr	s18, [pc, #364]	; 800db80 <MaxParaRunTest+0x190>
			FastStraight(1, 61.5/90, 1.00, -1.00/*2.89, -2.89*/, ExploreVelocity, ExploreVelocity);
 800da16:	eddf 8a5b 	vldr	s17, [pc, #364]	; 800db84 <MaxParaRunTest+0x194>
	for(int count=0; count <= num_nodes; count++)
 800da1a:	2200      	movs	r2, #0
		switch(FastPath[count].path_action)
 800da1c:	0113      	lsls	r3, r2, #4
 800da1e:	18e9      	adds	r1, r5, r3
 800da20:	f102 0a01 	add.w	sl, r2, #1
 800da24:	7b09      	ldrb	r1, [r1, #12]
 800da26:	2903      	cmp	r1, #3
 800da28:	f200 809f 	bhi.w	800db6a <MaxParaRunTest+0x17a>
 800da2c:	e8df f001 	tbb	[pc, r1]
 800da30:	021d336c 	.word	0x021d336c
			PIDChangeFlag(D_WALL_PID, 0);
			SlalomLeft(maze, mouse);
			break;
		case R_90_SEARCH:
//			ChangeLED(3);
			PIDChangeFlag(A_VELO_PID, 0);
 800da34:	2100      	movs	r1, #0
 800da36:	4608      	mov	r0, r1
 800da38:	f000 ffdc 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800da3c:	2100      	movs	r1, #0
 800da3e:	2003      	movs	r0, #3
 800da40:	f000 ffd8 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800da44:	2100      	movs	r1, #0
 800da46:	2002      	movs	r0, #2
 800da48:	f000 ffd4 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800da4c:	2100      	movs	r1, #0
 800da4e:	2001      	movs	r0, #1
 800da50:	f000 ffd0 	bl	800e9f4 <PIDChangeFlag>
			SlalomRight(maze, mouse);
 800da54:	4649      	mov	r1, r9
 800da56:	4640      	mov	r0, r8
 800da58:	f7fb fbaa 	bl	80091b0 <SlalomRight>
			break;
 800da5c:	4652      	mov	r2, sl
	for(int count=0; count <= num_nodes; count++)
 800da5e:	4294      	cmp	r4, r2
 800da60:	dadc      	bge.n	800da1c <MaxParaRunTest+0x2c>
		default :
			break;
		}
	}
}
 800da62:	ecbd 8b04 	vpop	{d8-d9}
 800da66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			PIDChangeFlag(A_VELO_PID, 0);
 800da6a:	2100      	movs	r1, #0
 800da6c:	4608      	mov	r0, r1
 800da6e:	f000 ffc1 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800da72:	2100      	movs	r1, #0
 800da74:	2003      	movs	r0, #3
 800da76:	f000 ffbd 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800da7a:	2100      	movs	r1, #0
 800da7c:	2002      	movs	r0, #2
 800da7e:	f000 ffb9 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800da82:	2100      	movs	r1, #0
 800da84:	2001      	movs	r0, #1
 800da86:	f000 ffb5 	bl	800e9f4 <PIDChangeFlag>
			SlalomLeft(maze, mouse);
 800da8a:	4649      	mov	r1, r9
 800da8c:	4640      	mov	r0, r8
 800da8e:	f7fb fcff 	bl	8009490 <SlalomLeft>
			break;
 800da92:	4652      	mov	r2, sl
 800da94:	e7e3      	b.n	800da5e <MaxParaRunTest+0x6e>
 800da96:	442b      	add	r3, r5
		switch(FastPath[count].path_action)
 800da98:	4692      	mov	sl, r2
 800da9a:	3310      	adds	r3, #16
			while(FastPath[count].path_action == ACC_DEC)
 800da9c:	7b19      	ldrb	r1, [r3, #12]
 800da9e:	2901      	cmp	r1, #1
				count ++;
 800daa0:	f10a 0a01 	add.w	sl, sl, #1
			while(FastPath[count].path_action == ACC_DEC)
 800daa4:	d0f9      	beq.n	800da9a <MaxParaRunTest+0xaa>
			straight_num = (float)(count - start_cnt);
 800daa6:	ebaa 0302 	sub.w	r3, sl, r2
 800daaa:	ee08 3a10 	vmov	s16, r3
 800daae:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
			if(start_cnt == 0){
 800dab2:	b95a      	cbnz	r2, 800dacc <MaxParaRunTest+0xdc>
				straight_num -= ((90-61.5)/90);
 800dab4:	ee18 0a10 	vmov	r0, s16
 800dab8:	f7fa fc7e 	bl	80083b8 <__aeabi_f2d>
 800dabc:	4632      	mov	r2, r6
 800dabe:	463b      	mov	r3, r7
 800dac0:	f7fa fb1a 	bl	80080f8 <__aeabi_dsub>
 800dac4:	f7fa ffc8 	bl	8008a58 <__aeabi_d2f>
 800dac8:	ee08 0a10 	vmov	s16, r0
			PIDChangeFlag(A_VELO_PID, 1);
 800dacc:	2101      	movs	r1, #1
 800dace:	2000      	movs	r0, #0
 800dad0:	f000 ff90 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800dad4:	2100      	movs	r1, #0
 800dad6:	2003      	movs	r0, #3
 800dad8:	f000 ff8c 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800dadc:	2100      	movs	r1, #0
 800dade:	2002      	movs	r0, #2
 800dae0:	f000 ff88 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800dae4:	2100      	movs	r1, #0
 800dae6:	2001      	movs	r0, #1
 800dae8:	f000 ff84 	bl	800e9f4 <PIDChangeFlag>
			FastStraight(0.5, straight_num,1.00, -1.00/*2.89, -2.89*/, 4000, ExploreVelocity);
 800daec:	4b26      	ldr	r3, [pc, #152]	; (800db88 <MaxParaRunTest+0x198>)
 800daee:	eef0 0a48 	vmov.f32	s1, s16
 800daf2:	edd3 2a00 	vldr	s5, [r3]
 800daf6:	eeb0 2a49 	vmov.f32	s4, s18
 800dafa:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800dafe:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800db02:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800db06:	e01c      	b.n	800db42 <MaxParaRunTest+0x152>
			PIDChangeFlag(A_VELO_PID, 1);
 800db08:	2101      	movs	r1, #1
 800db0a:	2000      	movs	r0, #0
 800db0c:	f000 ff72 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800db10:	2100      	movs	r1, #0
 800db12:	2003      	movs	r0, #3
 800db14:	f000 ff6e 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800db18:	2100      	movs	r1, #0
 800db1a:	2002      	movs	r0, #2
 800db1c:	f000 ff6a 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800db20:	2100      	movs	r1, #0
 800db22:	2001      	movs	r0, #1
 800db24:	f000 ff66 	bl	800e9f4 <PIDChangeFlag>
			FastStraight(1, 61.5/90, 1.00, -1.00/*2.89, -2.89*/, ExploreVelocity, ExploreVelocity);
 800db28:	4b17      	ldr	r3, [pc, #92]	; (800db88 <MaxParaRunTest+0x198>)
 800db2a:	edd3 2a00 	vldr	s5, [r3]
 800db2e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800db32:	eeb0 2a62 	vmov.f32	s4, s5
 800db36:	eeb0 0a41 	vmov.f32	s0, s2
 800db3a:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800db3e:	eef0 0a68 	vmov.f32	s1, s17
			FastStraight(0.5, straight_num,1.00, -1.00/*2.89, -2.89*/, 4000, ExploreVelocity);
 800db42:	f7ff fdd7 	bl	800d6f4 <FastStraight>
			PIDChangeFlag(A_VELO_PID, 0);
 800db46:	2100      	movs	r1, #0
 800db48:	4608      	mov	r0, r1
 800db4a:	f000 ff53 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800db4e:	2100      	movs	r1, #0
 800db50:	2003      	movs	r0, #3
 800db52:	f000 ff4f 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(L_WALL_PID, 0);
 800db56:	2100      	movs	r1, #0
 800db58:	2002      	movs	r0, #2
 800db5a:	f000 ff4b 	bl	800e9f4 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800db5e:	2100      	movs	r1, #0
 800db60:	2001      	movs	r0, #1
 800db62:	f000 ff47 	bl	800e9f4 <PIDChangeFlag>
				count ++;
 800db66:	4652      	mov	r2, sl
			break;
 800db68:	e779      	b.n	800da5e <MaxParaRunTest+0x6e>
		switch(FastPath[count].path_action)
 800db6a:	4652      	mov	r2, sl
 800db6c:	e777      	b.n	800da5e <MaxParaRunTest+0x6e>
 800db6e:	bf00      	nop
 800db70:	44444444 	.word	0x44444444
 800db74:	3fd44444 	.word	0x3fd44444
 800db78:	20001224 	.word	0x20001224
 800db7c:	20000224 	.word	0x20000224
 800db80:	457a0000 	.word	0x457a0000
 800db84:	3f2eeeef 	.word	0x3f2eeeef
 800db88:	200015a0 	.word	0x200015a0

0800db8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800db8c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800db8e:	1e16      	subs	r6, r2, #0
 800db90:	dd07      	ble.n	800dba2 <_read+0x16>
 800db92:	460c      	mov	r4, r1
 800db94:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800db96:	f7fe fd69 	bl	800c66c <__io_getchar>
 800db9a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800db9e:	42a5      	cmp	r5, r4
 800dba0:	d1f9      	bne.n	800db96 <_read+0xa>
	}

return len;
}
 800dba2:	4630      	mov	r0, r6
 800dba4:	bd70      	pop	{r4, r5, r6, pc}
 800dba6:	bf00      	nop

0800dba8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800dba8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dbaa:	1e16      	subs	r6, r2, #0
 800dbac:	dd07      	ble.n	800dbbe <_write+0x16>
 800dbae:	460c      	mov	r4, r1
 800dbb0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800dbb2:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dbb6:	f7fe fd47 	bl	800c648 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dbba:	42a5      	cmp	r5, r4
 800dbbc:	d1f9      	bne.n	800dbb2 <_write+0xa>
	}
	return len;
}
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	bd70      	pop	{r4, r5, r6, pc}
 800dbc2:	bf00      	nop

0800dbc4 <_close>:

int _close(int file)
{
	return -1;
}
 800dbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc8:	4770      	bx	lr
 800dbca:	bf00      	nop

0800dbcc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800dbcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbd0:	604b      	str	r3, [r1, #4]
	return 0;
}
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop

0800dbd8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800dbd8:	2001      	movs	r0, #1
 800dbda:	4770      	bx	lr

0800dbdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800dbdc:	2000      	movs	r0, #0
 800dbde:	4770      	bx	lr

0800dbe0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dbe0:	490c      	ldr	r1, [pc, #48]	; (800dc14 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dbe2:	4a0d      	ldr	r2, [pc, #52]	; (800dc18 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800dbe4:	680b      	ldr	r3, [r1, #0]
{
 800dbe6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dbe8:	4c0c      	ldr	r4, [pc, #48]	; (800dc1c <_sbrk+0x3c>)
 800dbea:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800dbec:	b12b      	cbz	r3, 800dbfa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dbee:	4418      	add	r0, r3
 800dbf0:	4290      	cmp	r0, r2
 800dbf2:	d807      	bhi.n	800dc04 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800dbf4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800dbfa:	4b09      	ldr	r3, [pc, #36]	; (800dc20 <_sbrk+0x40>)
 800dbfc:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800dbfe:	4418      	add	r0, r3
 800dc00:	4290      	cmp	r0, r2
 800dc02:	d9f7      	bls.n	800dbf4 <_sbrk+0x14>
    errno = ENOMEM;
 800dc04:	f003 fe24 	bl	8011850 <__errno>
 800dc08:	230c      	movs	r3, #12
 800dc0a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800dc0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	bd10      	pop	{r4, pc}
 800dc14:	20001230 	.word	0x20001230
 800dc18:	20020000 	.word	0x20020000
 800dc1c:	00000400 	.word	0x00000400
 800dc20:	20002048 	.word	0x20002048

0800dc24 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800dc24:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800dc26:	2203      	movs	r2, #3
 800dc28:	4909      	ldr	r1, [pc, #36]	; (800dc50 <ADCStart+0x2c>)
 800dc2a:	480a      	ldr	r0, [pc, #40]	; (800dc54 <ADCStart+0x30>)
 800dc2c:	f001 f95c 	bl	800eee8 <HAL_ADC_Start_DMA>
 800dc30:	b950      	cbnz	r0, 800dc48 <ADCStart+0x24>
	{
		Error_Handler();
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800dc32:	2202      	movs	r2, #2
 800dc34:	4908      	ldr	r1, [pc, #32]	; (800dc58 <ADCStart+0x34>)
 800dc36:	4809      	ldr	r0, [pc, #36]	; (800dc5c <ADCStart+0x38>)
 800dc38:	f001 f956 	bl	800eee8 <HAL_ADC_Start_DMA>
 800dc3c:	b900      	cbnz	r0, 800dc40 <ADCStart+0x1c>
	{
		Error_Handler();
	}

}
 800dc3e:	bd08      	pop	{r3, pc}
 800dc40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800dc44:	f7fe bf8e 	b.w	800cb64 <Error_Handler>
		Error_Handler();
 800dc48:	f7fe ff8c 	bl	800cb64 <Error_Handler>
 800dc4c:	e7f1      	b.n	800dc32 <ADCStart+0xe>
 800dc4e:	bf00      	nop
 800dc50:	200012b4 	.word	0x200012b4
 800dc54:	20001e84 	.word	0x20001e84
 800dc58:	200012c0 	.word	0x200012c0
 800dc5c:	20001da4 	.word	0x20001da4

0800dc60 <ADCStop>:
void ADCStop()
{
 800dc60:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800dc62:	480e      	ldr	r0, [pc, #56]	; (800dc9c <ADCStop+0x3c>)
 800dc64:	f001 f9e2 	bl	800f02c <HAL_ADC_Stop_DMA>
 800dc68:	b970      	cbnz	r0, 800dc88 <ADCStop+0x28>
	{
		printf("な\r\n");
		Error_Handler();
		printf("に\r\n");
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800dc6a:	480d      	ldr	r0, [pc, #52]	; (800dca0 <ADCStop+0x40>)
 800dc6c:	f001 f9de 	bl	800f02c <HAL_ADC_Stop_DMA>
 800dc70:	b900      	cbnz	r0, 800dc74 <ADCStop+0x14>
	{
		printf("ぬ\r\n");
		Error_Handler();
		printf("ね\r\n");
	}
}
 800dc72:	bd08      	pop	{r3, pc}
		printf("ぬ\r\n");
 800dc74:	480b      	ldr	r0, [pc, #44]	; (800dca4 <ADCStop+0x44>)
 800dc76:	f005 fbb3 	bl	80133e0 <puts>
		Error_Handler();
 800dc7a:	f7fe ff73 	bl	800cb64 <Error_Handler>
		printf("ね\r\n");
 800dc7e:	480a      	ldr	r0, [pc, #40]	; (800dca8 <ADCStop+0x48>)
}
 800dc80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("ね\r\n");
 800dc84:	f005 bbac 	b.w	80133e0 <puts>
		printf("な\r\n");
 800dc88:	4808      	ldr	r0, [pc, #32]	; (800dcac <ADCStop+0x4c>)
 800dc8a:	f005 fba9 	bl	80133e0 <puts>
		Error_Handler();
 800dc8e:	f7fe ff69 	bl	800cb64 <Error_Handler>
		printf("に\r\n");
 800dc92:	4807      	ldr	r0, [pc, #28]	; (800dcb0 <ADCStop+0x50>)
 800dc94:	f005 fba4 	bl	80133e0 <puts>
 800dc98:	e7e7      	b.n	800dc6a <ADCStop+0xa>
 800dc9a:	bf00      	nop
 800dc9c:	20001e84 	.word	0x20001e84
 800dca0:	20001da4 	.word	0x20001da4
 800dca4:	08016e34 	.word	0x08016e34
 800dca8:	08016e3c 	.word	0x08016e3c
 800dcac:	08016e24 	.word	0x08016e24
 800dcb0:	08016e2c 	.word	0x08016e2c

0800dcb4 <FLASH_Write_Word>:
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
	FLASH->KEYR =  0x45670123;
 800dcb4:	4b10      	ldr	r3, [pc, #64]	; (800dcf8 <FLASH_Write_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800dcb6:	4a11      	ldr	r2, [pc, #68]	; (800dcfc <FLASH_Write_Word+0x48>)

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800dcb8:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800dcba:	4c11      	ldr	r4, [pc, #68]	; (800dd00 <FLASH_Write_Word+0x4c>)
 800dcbc:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800dcbe:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dcc0:	68da      	ldr	r2, [r3, #12]
 800dcc2:	03d2      	lsls	r2, r2, #15
 800dcc4:	d4fc      	bmi.n	800dcc0 <FLASH_Write_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800dcc6:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dcc8:	4a0b      	ldr	r2, [pc, #44]	; (800dcf8 <FLASH_Write_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800dcca:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800dcce:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800dcd0:	691c      	ldr	r4, [r3, #16]
 800dcd2:	f044 0401 	orr.w	r4, r4, #1
 800dcd6:	611c      	str	r4, [r3, #16]

	*(__IO uint32_t*)address = data;
 800dcd8:	6001      	str	r1, [r0, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dcda:	68d3      	ldr	r3, [r2, #12]
 800dcdc:	03db      	lsls	r3, r3, #15
 800dcde:	d4fc      	bmi.n	800dcda <FLASH_Write_Word+0x26>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800dce0:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800dce2:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800dce6:	f023 0301 	bic.w	r3, r3, #1
 800dcea:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800dcec:	6913      	ldr	r3, [r2, #16]
 800dcee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dcf2:	6113      	str	r3, [r2, #16]
}
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	40023c00 	.word	0x40023c00
 800dcfc:	cdef89ab 	.word	0xcdef89ab
 800dd00:	45670123 	.word	0x45670123

0800dd04 <FLASH_Read_Word>:
	FLASH->KEYR =  0x45670123;
 800dd04:	4b10      	ldr	r3, [pc, #64]	; (800dd48 <FLASH_Read_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800dd06:	4a11      	ldr	r2, [pc, #68]	; (800dd4c <FLASH_Read_Word+0x48>)
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800dd08:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800dd0a:	4c11      	ldr	r4, [pc, #68]	; (800dd50 <FLASH_Read_Word+0x4c>)
 800dd0c:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800dd0e:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dd10:	68da      	ldr	r2, [r3, #12]
 800dd12:	03d2      	lsls	r2, r2, #15
 800dd14:	d4fc      	bmi.n	800dd10 <FLASH_Read_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800dd16:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dd18:	4a0b      	ldr	r2, [pc, #44]	; (800dd48 <FLASH_Read_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800dd1a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800dd1e:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800dd20:	691c      	ldr	r4, [r3, #16]
 800dd22:	f044 0401 	orr.w	r4, r4, #1
 800dd26:	611c      	str	r4, [r3, #16]

	* data = *(__IO uint32_t*)address;
 800dd28:	6803      	ldr	r3, [r0, #0]
 800dd2a:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dd2c:	68d3      	ldr	r3, [r2, #12]
 800dd2e:	03db      	lsls	r3, r3, #15
 800dd30:	d4fc      	bmi.n	800dd2c <FLASH_Read_Word+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800dd32:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800dd34:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800dd38:	f023 0301 	bic.w	r3, r3, #1
 800dd3c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800dd3e:	6913      	ldr	r3, [r2, #16]
 800dd40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd44:	6113      	str	r3, [r2, #16]
}
 800dd46:	4770      	bx	lr
 800dd48:	40023c00 	.word	0x40023c00
 800dd4c:	cdef89ab 	.word	0xcdef89ab
 800dd50:	45670123 	.word	0x45670123

0800dd54 <FLASH_Write_Word_F>:
	FLASH->KEYR =  0x45670123;
 800dd54:	4b0f      	ldr	r3, [pc, #60]	; (800dd94 <FLASH_Write_Word_F+0x40>)
 800dd56:	4910      	ldr	r1, [pc, #64]	; (800dd98 <FLASH_Write_Word_F+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800dd58:	4a10      	ldr	r2, [pc, #64]	; (800dd9c <FLASH_Write_Word_F+0x48>)
	FLASH->KEYR =  0x45670123;
 800dd5a:	6059      	str	r1, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800dd5c:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dd5e:	68da      	ldr	r2, [r3, #12]
 800dd60:	03d2      	lsls	r2, r2, #15
 800dd62:	d4fc      	bmi.n	800dd5e <FLASH_Write_Word_F+0xa>
{
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800dd64:	6919      	ldr	r1, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dd66:	4a0b      	ldr	r2, [pc, #44]	; (800dd94 <FLASH_Write_Word_F+0x40>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800dd68:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800dd6c:	6119      	str	r1, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800dd6e:	6919      	ldr	r1, [r3, #16]
 800dd70:	f041 0101 	orr.w	r1, r1, #1
 800dd74:	6119      	str	r1, [r3, #16]

	*(__IO float*)address = data;
 800dd76:	ed80 0a00 	vstr	s0, [r0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800dd7a:	68d3      	ldr	r3, [r2, #12]
 800dd7c:	03db      	lsls	r3, r3, #15
 800dd7e:	d4fc      	bmi.n	800dd7a <FLASH_Write_Word_F+0x26>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800dd80:	6913      	ldr	r3, [r2, #16]
 800dd82:	f023 0301 	bic.w	r3, r3, #1
 800dd86:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800dd88:	6913      	ldr	r3, [r2, #16]
 800dd8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd8e:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
}
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	40023c00 	.word	0x40023c00
 800dd98:	45670123 	.word	0x45670123
 800dd9c:	cdef89ab 	.word	0xcdef89ab

0800dda0 <FLASH_Read_Word_F>:
	FLASH->KEYR =  0x45670123;
 800dda0:	4b10      	ldr	r3, [pc, #64]	; (800dde4 <FLASH_Read_Word_F+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800dda2:	4a11      	ldr	r2, [pc, #68]	; (800dde8 <FLASH_Read_Word_F+0x48>)
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800dda4:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800dda6:	4c11      	ldr	r4, [pc, #68]	; (800ddec <FLASH_Read_Word_F+0x4c>)
 800dda8:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800ddaa:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800ddac:	68da      	ldr	r2, [r3, #12]
 800ddae:	03d2      	lsls	r2, r2, #15
 800ddb0:	d4fc      	bmi.n	800ddac <FLASH_Read_Word_F+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800ddb2:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800ddb4:	4a0b      	ldr	r2, [pc, #44]	; (800dde4 <FLASH_Read_Word_F+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800ddb6:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800ddba:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800ddbc:	691c      	ldr	r4, [r3, #16]
 800ddbe:	f044 0401 	orr.w	r4, r4, #1
 800ddc2:	611c      	str	r4, [r3, #16]

	* data = *(__IO float*)address;
 800ddc4:	6803      	ldr	r3, [r0, #0]
 800ddc6:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800ddc8:	68d3      	ldr	r3, [r2, #12]
 800ddca:	03db      	lsls	r3, r3, #15
 800ddcc:	d4fc      	bmi.n	800ddc8 <FLASH_Read_Word_F+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800ddce:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800ddd0:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800ddd4:	f023 0301 	bic.w	r3, r3, #1
 800ddd8:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800ddda:	6913      	ldr	r3, [r2, #16]
 800dddc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dde0:	6113      	str	r3, [r2, #16]
}
 800dde2:	4770      	bx	lr
 800dde4:	40023c00 	.word	0x40023c00
 800dde8:	cdef89ab 	.word	0xcdef89ab
 800ddec:	45670123 	.word	0x45670123

0800ddf0 <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800ddf0:	b530      	push	{r4, r5, lr}
 800ddf2:	b087      	sub	sp, #28
    HAL_FLASH_Unlock();
 800ddf4:	f001 fce2 	bl	800f7bc <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ddf8:	2400      	movs	r4, #0
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800ddfa:	2301      	movs	r3, #1
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ddfc:	2202      	movs	r2, #2
    EraseInitStruct.NbSectors = 1;

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800ddfe:	4669      	mov	r1, sp
 800de00:	a801      	add	r0, sp, #4
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800de02:	9401      	str	r4, [sp, #4]
    EraseInitStruct.NbSectors = 1;
 800de04:	e9cd 3303 	strd	r3, r3, [sp, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800de08:	9205      	str	r2, [sp, #20]
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800de0a:	f001 fd71 	bl	800f8f0 <HAL_FLASHEx_Erase>
 800de0e:	4605      	mov	r5, r0

    HAL_FLASH_Lock();
 800de10:	f001 fce8 	bl	800f7e4 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800de14:	b93d      	cbnz	r5, 800de26 <Flash_clear_sector1+0x36>
 800de16:	9800      	ldr	r0, [sp, #0]
 800de18:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800de1c:	fab0 f080 	clz	r0, r0
 800de20:	0940      	lsrs	r0, r0, #5
}
 800de22:	b007      	add	sp, #28
 800de24:	bd30      	pop	{r4, r5, pc}
 800de26:	4620      	mov	r0, r4
 800de28:	b007      	add	sp, #28
 800de2a:	bd30      	pop	{r4, r5, pc}

0800de2c <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800de2c:	b530      	push	{r4, r5, lr}
 800de2e:	b087      	sub	sp, #28
    HAL_FLASH_Unlock();
 800de30:	f001 fcc4 	bl	800f7bc <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800de34:	2509      	movs	r5, #9
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800de36:	2202      	movs	r2, #2
    EraseInitStruct.NbSectors = 1;
 800de38:	2301      	movs	r3, #1
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800de3a:	2400      	movs	r4, #0

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800de3c:	4669      	mov	r1, sp
 800de3e:	a801      	add	r0, sp, #4
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800de40:	9503      	str	r5, [sp, #12]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800de42:	9401      	str	r4, [sp, #4]
    EraseInitStruct.NbSectors = 1;
 800de44:	e9cd 3204 	strd	r3, r2, [sp, #16]
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800de48:	f001 fd52 	bl	800f8f0 <HAL_FLASHEx_Erase>
 800de4c:	4605      	mov	r5, r0

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800de4e:	f001 fcc9 	bl	800f7e4 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800de52:	b93d      	cbnz	r5, 800de64 <Flash_clear_sector9+0x38>
 800de54:	9800      	ldr	r0, [sp, #0]
 800de56:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800de5a:	fab0 f080 	clz	r0, r0
 800de5e:	0940      	lsrs	r0, r0, #5
}
 800de60:	b007      	add	sp, #28
 800de62:	bd30      	pop	{r4, r5, pc}
 800de64:	4620      	mov	r0, r4
 800de66:	b007      	add	sp, #28
 800de68:	bd30      	pop	{r4, r5, pc}
 800de6a:	bf00      	nop

0800de6c <compare_num>:
}


int compare_num(const void * n1, const void * n2)
{
	if (*(int16_t *)n1 > *(int16_t *)n2)
 800de6c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800de70:	f9b1 3000 	ldrsh.w	r3, [r1]
 800de74:	429a      	cmp	r2, r3
 800de76:	dc04      	bgt.n	800de82 <compare_num+0x16>
	{
		return 1;
	}
	else if (*(int16_t *)n1 < *(int16_t *)n2)
 800de78:	bfb4      	ite	lt
 800de7a:	f04f 30ff 	movlt.w	r0, #4294967295
 800de7e:	2000      	movge	r0, #0
 800de80:	4770      	bx	lr
		return 1;
 800de82:	2001      	movs	r0, #1
	}
	else
	{
		return 0;
	}
}
 800de84:	4770      	bx	lr
 800de86:	bf00      	nop

0800de88 <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800de88:	b570      	push	{r4, r5, r6, lr}
	CS_RESET;
 800de8a:	4c23      	ldr	r4, [pc, #140]	; (800df18 <ReadIMU+0x90>)
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800de8c:	4d23      	ldr	r5, [pc, #140]	; (800df1c <ReadIMU+0x94>)
inline float ReadIMU(uint8_t a, uint8_t b) {
 800de8e:	b082      	sub	sp, #8
	ret2 = ret[1] | 0x80;
 800de90:	f061 037f 	orn	r3, r1, #127	; 0x7f
	ret1 = ret[0] | 0x80;
 800de94:	f060 067f 	orn	r6, r0, #127	; 0x7f
	CS_RESET;
 800de98:	2200      	movs	r2, #0
 800de9a:	4620      	mov	r0, r4
 800de9c:	2104      	movs	r1, #4
	ret2 = ret[1] | 0x80;
 800de9e:	f88d 3005 	strb.w	r3, [sp, #5]
	ret1 = ret[0] | 0x80;
 800dea2:	f88d 6004 	strb.w	r6, [sp, #4]
	CS_RESET;
 800dea6:	f001 fe89 	bl	800fbbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800deaa:	a901      	add	r1, sp, #4
 800deac:	4628      	mov	r0, r5
 800deae:	2364      	movs	r3, #100	; 0x64
 800deb0:	2201      	movs	r2, #1
 800deb2:	f002 fb3d 	bl	8010530 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800deb6:	2364      	movs	r3, #100	; 0x64
 800deb8:	f10d 0106 	add.w	r1, sp, #6
 800debc:	4628      	mov	r0, r5
 800debe:	2201      	movs	r2, #1
 800dec0:	f002 fbf4 	bl	80106ac <HAL_SPI_Receive>
	CS_SET;
 800dec4:	4620      	mov	r0, r4
 800dec6:	2201      	movs	r2, #1
 800dec8:	2104      	movs	r1, #4
 800deca:	f001 fe77 	bl	800fbbc <HAL_GPIO_WritePin>
	CS_RESET;
 800dece:	4620      	mov	r0, r4
 800ded0:	2200      	movs	r2, #0
 800ded2:	2104      	movs	r1, #4
 800ded4:	f001 fe72 	bl	800fbbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800ded8:	f10d 0105 	add.w	r1, sp, #5
 800dedc:	4628      	mov	r0, r5
 800dede:	2364      	movs	r3, #100	; 0x64
 800dee0:	2201      	movs	r2, #1
 800dee2:	f002 fb25 	bl	8010530 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800dee6:	2364      	movs	r3, #100	; 0x64
 800dee8:	f10d 0107 	add.w	r1, sp, #7
 800deec:	4628      	mov	r0, r5
 800deee:	2201      	movs	r2, #1
 800def0:	f002 fbdc 	bl	80106ac <HAL_SPI_Receive>
	CS_SET;
 800def4:	4620      	mov	r0, r4
 800def6:	2201      	movs	r2, #1
 800def8:	2104      	movs	r1, #4
 800defa:	f001 fe5f 	bl	800fbbc <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800defe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800df06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	res = (float)law_data;
 800df0a:	b21b      	sxth	r3, r3
 800df0c:	ee00 3a10 	vmov	s0, r3
}
 800df10:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800df14:	b002      	add	sp, #8
 800df16:	bd70      	pop	{r4, r5, r6, pc}
 800df18:	40020c00 	.word	0x40020c00
 800df1c:	20001e2c 	.word	0x20001e2c

0800df20 <median_filter>:
int16_t median_filter(int16_t *new_data) //中身変更しないが、値のコピーを避けて速度維持のためにアドレス
{
 800df20:	b530      	push	{r4, r5, lr}
	filter[cnt+1] = filter[cnt+2];
	filter[cnt+2] = filter[cnt+3];
	filter[cnt+3] = filter[cnt+4];
	filter[cnt+4] = new_data;
#else
	filter[0] = filter[1];
 800df22:	4c0d      	ldr	r4, [pc, #52]	; (800df58 <median_filter+0x38>)
	filter[1] = filter[2];
	filter[2] = *new_data;//filter[3];
 800df24:	f9b0 1000 	ldrsh.w	r1, [r0]
	filter[1] = filter[2];
 800df28:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
	filter[0] = filter[1];
 800df2c:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
	filter[2] = *new_data;//filter[3];
 800df30:	80a1      	strh	r1, [r4, #4]
{
 800df32:	b083      	sub	sp, #12
	filter[1] = filter[2];
 800df34:	8060      	strh	r0, [r4, #2]
//	filter[3] = filter[4];
//	filter[4] = *new_data;

	sorted[0] = filter[0];
	sorted[1] = filter[1];
	sorted[2] = *new_data;//filter[2];
 800df36:	f8ad 1004 	strh.w	r1, [sp, #4]
	sorted[1] = filter[1];
 800df3a:	f8ad 0002 	strh.w	r0, [sp, #2]
//	sorted[4] = filter[4];
#endif


	//ソートする
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800df3e:	4b07      	ldr	r3, [pc, #28]	; (800df5c <median_filter+0x3c>)
	filter[0] = filter[1];
 800df40:	8025      	strh	r5, [r4, #0]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800df42:	4668      	mov	r0, sp
 800df44:	2202      	movs	r2, #2
 800df46:	2103      	movs	r1, #3
	sorted[0] = filter[0];
 800df48:	f8ad 5000 	strh.w	r5, [sp]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800df4c:	f005 fa88 	bl	8013460 <qsort>
	//qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int),compare_num);
	//中央値を返す
	return sorted[1];
}
 800df50:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 800df54:	b003      	add	sp, #12
 800df56:	bd30      	pop	{r4, r5, pc}
 800df58:	200012cc 	.word	0x200012cc
 800df5c:	0800de6d 	.word	0x0800de6d

0800df60 <Update_IMU>:
//割込み内で呼ぶセット
void Update_IMU(float *angv, float *angle )
{
 800df60:	b5f0      	push	{r4, r5, r6, r7, lr}
				0x38,
		};
		int16_t law_data;
		ret1 = ret[0] | 0x80;
		ret2 = ret[1] | 0x80;
		CS_RESET;
 800df62:	4c3f      	ldr	r4, [pc, #252]	; (800e060 <Update_IMU+0x100>)
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800df64:	4d3f      	ldr	r5, [pc, #252]	; (800e064 <Update_IMU+0x104>)
{
 800df66:	b083      	sub	sp, #12
		ret1 = ret[0] | 0x80;
 800df68:	f04f 0cb7 	mov.w	ip, #183	; 0xb7
{
 800df6c:	460e      	mov	r6, r1
 800df6e:	4607      	mov	r7, r0
		ret2 = ret[1] | 0x80;
 800df70:	23b8      	movs	r3, #184	; 0xb8
		CS_RESET;
 800df72:	4620      	mov	r0, r4
 800df74:	2200      	movs	r2, #0
 800df76:	2104      	movs	r1, #4
		ret1 = ret[0] | 0x80;
 800df78:	f88d c002 	strb.w	ip, [sp, #2]
		ret2 = ret[1] | 0x80;
 800df7c:	f88d 3003 	strb.w	r3, [sp, #3]
		CS_RESET;
 800df80:	f001 fe1c 	bl	800fbbc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800df84:	f10d 0102 	add.w	r1, sp, #2
 800df88:	4628      	mov	r0, r5
 800df8a:	2364      	movs	r3, #100	; 0x64
 800df8c:	2201      	movs	r2, #1
 800df8e:	f002 facf 	bl	8010530 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val1,1,100);
 800df92:	2364      	movs	r3, #100	; 0x64
 800df94:	a901      	add	r1, sp, #4
 800df96:	4628      	mov	r0, r5
 800df98:	2201      	movs	r2, #1
 800df9a:	f002 fb87 	bl	80106ac <HAL_SPI_Receive>
		CS_SET;
 800df9e:	4620      	mov	r0, r4
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	2104      	movs	r1, #4
 800dfa4:	f001 fe0a 	bl	800fbbc <HAL_GPIO_WritePin>

		CS_RESET;
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	2200      	movs	r2, #0
 800dfac:	2104      	movs	r1, #4
 800dfae:	f001 fe05 	bl	800fbbc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800dfb2:	f10d 0103 	add.w	r1, sp, #3
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	2364      	movs	r3, #100	; 0x64
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f002 fab8 	bl	8010530 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val2,1,100);
 800dfc0:	2364      	movs	r3, #100	; 0x64
 800dfc2:	f10d 0105 	add.w	r1, sp, #5
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f002 fb6f 	bl	80106ac <HAL_SPI_Receive>
		CS_SET;
 800dfce:	4620      	mov	r0, r4
 800dfd0:	2104      	movs	r1, #4
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	f001 fdf2 	bl	800fbbc <HAL_GPIO_WritePin>
		law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );
 800dfd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dfdc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dfe0:	a802      	add	r0, sp, #8
 800dfe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dfe6:	f820 3d02 	strh.w	r3, [r0, #-2]!

		//static int16_t zg_last=0;
		int16_t zg_median;

		//2000回目で0.17
		zg_median = median_filter(&law_data);
 800dfea:	f7ff ff99 	bl	800df20 <median_filter>
		ZGFilterd = zg_median;
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800dfee:	ee07 0a90 	vmov	s15, r0
 800dff2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e068 <Update_IMU+0x108>
 800dff6:	4b1d      	ldr	r3, [pc, #116]	; (800e06c <Update_IMU+0x10c>)
		ZGFilterd = zg_median;
 800dff8:	4a1d      	ldr	r2, [pc, #116]	; (800e070 <Update_IMU+0x110>)
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800dffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ZGFilterd = zg_median;
 800dffe:	8010      	strh	r0, [r2, #0]
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800e000:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e004:	edc3 7a00 	vstr	s15, [r3]
		*angv = -((0.01*ZGyro) + (0.99)* (zg_last));
		zg_last = ZGyro;
		//Angle;
		*angle += *angv *0.001;
#else
		*angv = -ZGyro; //角速度 rad / s
 800e008:	edd3 7a00 	vldr	s15, [r3]
 800e00c:	eef1 7a67 	vneg.f32	s15, s15
 800e010:	edc7 7a00 	vstr	s15, [r7]

		//Angle;
		*angle += *angv * 0.001  - 0.000001784;//- 0.0000018432; //角度 rad
 800e014:	ee17 0a90 	vmov	r0, s15
 800e018:	f7fa f9ce 	bl	80083b8 <__aeabi_f2d>
 800e01c:	a30c      	add	r3, pc, #48	; (adr r3, 800e050 <Update_IMU+0xf0>)
 800e01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e022:	f7fa fa21 	bl	8008468 <__aeabi_dmul>
 800e026:	a30c      	add	r3, pc, #48	; (adr r3, 800e058 <Update_IMU+0xf8>)
 800e028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02c:	f7fa f864 	bl	80080f8 <__aeabi_dsub>
 800e030:	4604      	mov	r4, r0
 800e032:	6830      	ldr	r0, [r6, #0]
 800e034:	460d      	mov	r5, r1
 800e036:	f7fa f9bf 	bl	80083b8 <__aeabi_f2d>
 800e03a:	4602      	mov	r2, r0
 800e03c:	460b      	mov	r3, r1
 800e03e:	4620      	mov	r0, r4
 800e040:	4629      	mov	r1, r5
 800e042:	f7fa f85b 	bl	80080fc <__adddf3>
 800e046:	f7fa fd07 	bl	8008a58 <__aeabi_d2f>
 800e04a:	6030      	str	r0, [r6, #0]
	//*angv = -((0.01*zg_law) + (0.99)* (zg_last));
	zg_last = zg_law;
	//Angle;
	*angle += *angv *0.001;
#endif
}
 800e04c:	b003      	add	sp, #12
 800e04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e050:	d2f1a9fc 	.word	0xd2f1a9fc
 800e054:	3f50624d 	.word	0x3f50624d
 800e058:	be73a9d7 	.word	0xbe73a9d7
 800e05c:	3ebdee38 	.word	0x3ebdee38
 800e060:	40020c00 	.word	0x40020c00
 800e064:	20001e2c 	.word	0x20001e2c
 800e068:	3a8b7d78 	.word	0x3a8b7d78
 800e06c:	200012c8 	.word	0x200012c8
 800e070:	20002014 	.word	0x20002014

0800e074 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800e074:	b570      	push	{r4, r5, r6, lr}
 800e076:	b084      	sub	sp, #16
	uint8_t ret;

	ret = reg & 0x7F;
 800e078:	ac04      	add	r4, sp, #16
	CS_RESET;
 800e07a:	4d10      	ldr	r5, [pc, #64]	; (800e0bc <write_byte+0x48>)
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e07c:	4e10      	ldr	r6, [pc, #64]	; (800e0c0 <write_byte+0x4c>)
void write_byte( uint8_t reg, uint8_t val )  {
 800e07e:	f88d 1007 	strb.w	r1, [sp, #7]
	ret = reg & 0x7F;
 800e082:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e086:	f804 0d01 	strb.w	r0, [r4, #-1]!
	CS_RESET;
 800e08a:	2200      	movs	r2, #0
 800e08c:	4628      	mov	r0, r5
 800e08e:	2104      	movs	r1, #4
 800e090:	f001 fd94 	bl	800fbbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e094:	4621      	mov	r1, r4
 800e096:	4630      	mov	r0, r6
 800e098:	2364      	movs	r3, #100	; 0x64
 800e09a:	2201      	movs	r2, #1
 800e09c:	f002 fa48 	bl	8010530 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800e0a0:	2364      	movs	r3, #100	; 0x64
 800e0a2:	f10d 0107 	add.w	r1, sp, #7
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	f002 fa41 	bl	8010530 <HAL_SPI_Transmit>
	CS_SET;
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	2104      	movs	r1, #4
 800e0b4:	f001 fd82 	bl	800fbbc <HAL_GPIO_WritePin>
}
 800e0b8:	b004      	add	sp, #16
 800e0ba:	bd70      	pop	{r4, r5, r6, pc}
 800e0bc:	40020c00 	.word	0x40020c00
 800e0c0:	20001e2c 	.word	0x20001e2c

0800e0c4 <IMU_init>:

uint8_t IMU_init() {
 800e0c4:	b510      	push	{r4, lr}
 800e0c6:	b082      	sub	sp, #8
	ret = reg | 0x80;
 800e0c8:	ac02      	add	r4, sp, #8
 800e0ca:	2380      	movs	r3, #128	; 0x80
 800e0cc:	f804 3d02 	strb.w	r3, [r4, #-2]!
	CS_RESET;
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	2104      	movs	r1, #4
 800e0d4:	481b      	ldr	r0, [pc, #108]	; (800e144 <IMU_init+0x80>)
 800e0d6:	f001 fd71 	bl	800fbbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e0da:	4621      	mov	r1, r4
 800e0dc:	2364      	movs	r3, #100	; 0x64
 800e0de:	2201      	movs	r2, #1
 800e0e0:	4819      	ldr	r0, [pc, #100]	; (800e148 <IMU_init+0x84>)
 800e0e2:	f002 fa25 	bl	8010530 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800e0e6:	2364      	movs	r3, #100	; 0x64
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	f10d 0107 	add.w	r1, sp, #7
 800e0ee:	4816      	ldr	r0, [pc, #88]	; (800e148 <IMU_init+0x84>)
 800e0f0:	f002 fadc 	bl	80106ac <HAL_SPI_Receive>
	CS_SET;
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	2104      	movs	r1, #4
 800e0f8:	4812      	ldr	r0, [pc, #72]	; (800e144 <IMU_init+0x80>)
 800e0fa:	f001 fd5f 	bl	800fbbc <HAL_GPIO_WritePin>
	return val;
 800e0fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
	if ( who_am_i == 0xE0 ) {
 800e102:	2be0      	cmp	r3, #224	; 0xe0
 800e104:	d002      	beq.n	800e10c <IMU_init+0x48>
		write_byte(0x7F,0x00);	//USER_BANK0
	}
	return ret;
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800e106:	2001      	movs	r0, #1
 800e108:	b002      	add	sp, #8
 800e10a:	bd10      	pop	{r4, pc}
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800e10c:	2101      	movs	r1, #1
 800e10e:	2006      	movs	r0, #6
 800e110:	f7ff ffb0 	bl	800e074 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800e114:	2110      	movs	r1, #16
 800e116:	2003      	movs	r0, #3
 800e118:	f7ff ffac 	bl	800e074 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800e11c:	2120      	movs	r1, #32
 800e11e:	207f      	movs	r0, #127	; 0x7f
 800e120:	f7ff ffa8 	bl	800e074 <write_byte>
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800e124:	2117      	movs	r1, #23
 800e126:	2001      	movs	r0, #1
 800e128:	f7ff ffa4 	bl	800e074 <write_byte>
		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800e12c:	2117      	movs	r1, #23
 800e12e:	2014      	movs	r0, #20
 800e130:	f7ff ffa0 	bl	800e074 <write_byte>
		write_byte(0x7F,0x00);	//USER_BANK0
 800e134:	2100      	movs	r1, #0
 800e136:	207f      	movs	r0, #127	; 0x7f
 800e138:	f7ff ff9c 	bl	800e074 <write_byte>
}
 800e13c:	2001      	movs	r0, #1
 800e13e:	b002      	add	sp, #8
 800e140:	bd10      	pop	{r4, pc}
 800e142:	bf00      	nop
 800e144:	40020c00 	.word	0x40020c00
 800e148:	20001e2c 	.word	0x20001e2c

0800e14c <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800e14c:	b508      	push	{r3, lr}
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800e14e:	213c      	movs	r1, #60	; 0x3c
 800e150:	4804      	ldr	r0, [pc, #16]	; (800e164 <EncoderStart+0x18>)
 800e152:	f002 fd0b 	bl	8010b6c <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e156:	213c      	movs	r1, #60	; 0x3c
 800e158:	4803      	ldr	r0, [pc, #12]	; (800e168 <EncoderStart+0x1c>)
}
 800e15a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e15e:	f002 bd05 	b.w	8010b6c <HAL_TIM_Encoder_Start>
 800e162:	bf00      	nop
 800e164:	20001dec 	.word	0x20001dec
 800e168:	20001d64 	.word	0x20001d64

0800e16c <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800e16c:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800e16e:	4c05      	ldr	r4, [pc, #20]	; (800e184 <EmitterON+0x18>)
 800e170:	2100      	movs	r1, #0
 800e172:	4620      	mov	r0, r4
 800e174:	f002 fc1e 	bl	80109b4 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e178:	4620      	mov	r0, r4
 800e17a:	2100      	movs	r1, #0

}
 800e17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e180:	f003 b890 	b.w	80112a4 <HAL_TIMEx_OCN_Start_IT>
 800e184:	20001d24 	.word	0x20001d24

0800e188 <EmitterOFF>:
void EmitterOFF()
{
 800e188:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800e18a:	4c05      	ldr	r4, [pc, #20]	; (800e1a0 <EmitterOFF+0x18>)
 800e18c:	2100      	movs	r1, #0
 800e18e:	4620      	mov	r0, r4
 800e190:	f002 fc58 	bl	8010a44 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e194:	4620      	mov	r0, r4
 800e196:	2100      	movs	r1, #0

}
 800e198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e19c:	f003 b8b6 	b.w	801130c <HAL_TIMEx_OCN_Stop_IT>
 800e1a0:	20001d24 	.word	0x20001d24

0800e1a4 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800e1a4:	b508      	push	{r3, lr}
	//Switch
	switch(mode){
 800e1a6:	2807      	cmp	r0, #7
 800e1a8:	d851      	bhi.n	800e24e <ChangeLED+0xaa>
 800e1aa:	e8df f000 	tbb	[pc, r0]
 800e1ae:	2c18      	.short	0x2c18
 800e1b0:	463e362e 	.word	0x463e362e
 800e1b4:	044e      	.short	0x044e
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);

		break;
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e1bc:	4824      	ldr	r0, [pc, #144]	; (800e250 <ChangeLED+0xac>)
 800e1be:	f001 fcfd 	bl	800fbbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e1c8:	4821      	ldr	r0, [pc, #132]	; (800e250 <ChangeLED+0xac>)
 800e1ca:	f001 fcf7 	bl	800fbbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e1d4:	481f      	ldr	r0, [pc, #124]	; (800e254 <ChangeLED+0xb0>)

		break;
	default: break;

	}
}
 800e1d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e1da:	f001 bcef 	b.w	800fbbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e1de:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e1e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e1e4:	481a      	ldr	r0, [pc, #104]	; (800e250 <ChangeLED+0xac>)
 800e1e6:	f001 fce9 	bl	800fbbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e1f0:	4817      	ldr	r0, [pc, #92]	; (800e250 <ChangeLED+0xac>)
 800e1f2:	f001 fce3 	bl	800fbbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e1fc:	4815      	ldr	r0, [pc, #84]	; (800e254 <ChangeLED+0xb0>)
}
 800e1fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e202:	f001 bcdb 	b.w	800fbbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e206:	2201      	movs	r2, #1
 800e208:	e7ea      	b.n	800e1e0 <ChangeLED+0x3c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e20a:	2200      	movs	r2, #0
 800e20c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e210:	480f      	ldr	r0, [pc, #60]	; (800e250 <ChangeLED+0xac>)
 800e212:	f001 fcd3 	bl	800fbbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e216:	2201      	movs	r2, #1
 800e218:	e7e8      	b.n	800e1ec <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e21a:	2201      	movs	r2, #1
 800e21c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e220:	480b      	ldr	r0, [pc, #44]	; (800e250 <ChangeLED+0xac>)
 800e222:	f001 fccb 	bl	800fbbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e226:	2201      	movs	r2, #1
 800e228:	e7e0      	b.n	800e1ec <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e22a:	2200      	movs	r2, #0
 800e22c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e230:	4807      	ldr	r0, [pc, #28]	; (800e250 <ChangeLED+0xac>)
 800e232:	f001 fcc3 	bl	800fbbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e236:	2200      	movs	r2, #0
 800e238:	e7c4      	b.n	800e1c4 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e23a:	2201      	movs	r2, #1
 800e23c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e240:	4803      	ldr	r0, [pc, #12]	; (800e250 <ChangeLED+0xac>)
 800e242:	f001 fcbb 	bl	800fbbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e246:	2200      	movs	r2, #0
 800e248:	e7bc      	b.n	800e1c4 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e24a:	2200      	movs	r2, #0
 800e24c:	e7b4      	b.n	800e1b8 <ChangeLED+0x14>
}
 800e24e:	bd08      	pop	{r3, pc}
 800e250:	40020800 	.word	0x40020800
 800e254:	40020400 	.word	0x40020400

0800e258 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800e258:	b508      	push	{r3, lr}
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800e25a:	210c      	movs	r1, #12
 800e25c:	4808      	ldr	r0, [pc, #32]	; (800e280 <Motor_PWM_Start+0x28>)
 800e25e:	f002 fc49 	bl	8010af4 <HAL_TIM_PWM_Start>
 800e262:	b948      	cbnz	r0, 800e278 <Motor_PWM_Start+0x20>
  {
	  Error_Handler();
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800e264:	2104      	movs	r1, #4
 800e266:	4807      	ldr	r0, [pc, #28]	; (800e284 <Motor_PWM_Start+0x2c>)
 800e268:	f002 fc44 	bl	8010af4 <HAL_TIM_PWM_Start>
 800e26c:	b900      	cbnz	r0, 800e270 <Motor_PWM_Start+0x18>
  {
	  Error_Handler();
  }
#endif
}
 800e26e:	bd08      	pop	{r3, pc}
 800e270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 800e274:	f7fe bc76 	b.w	800cb64 <Error_Handler>
	  Error_Handler();
 800e278:	f7fe fc74 	bl	800cb64 <Error_Handler>
 800e27c:	e7f2      	b.n	800e264 <Motor_PWM_Start+0xc>
 800e27e:	bf00      	nop
 800e280:	20001234 	.word	0x20001234
 800e284:	20001274 	.word	0x20001274

0800e288 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800e288:	b508      	push	{r3, lr}
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800e28a:	210c      	movs	r1, #12
 800e28c:	4808      	ldr	r0, [pc, #32]	; (800e2b0 <Motor_PWM_Stop+0x28>)
 800e28e:	f002 fc33 	bl	8010af8 <HAL_TIM_PWM_Stop>
 800e292:	b948      	cbnz	r0, 800e2a8 <Motor_PWM_Stop+0x20>
  {
	  Error_Handler();
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800e294:	2104      	movs	r1, #4
 800e296:	4807      	ldr	r0, [pc, #28]	; (800e2b4 <Motor_PWM_Stop+0x2c>)
 800e298:	f002 fc2e 	bl	8010af8 <HAL_TIM_PWM_Stop>
 800e29c:	b900      	cbnz	r0, 800e2a0 <Motor_PWM_Stop+0x18>
  {
	  Error_Handler();
  }
#endif
}
 800e29e:	bd08      	pop	{r3, pc}
 800e2a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 800e2a4:	f7fe bc5e 	b.w	800cb64 <Error_Handler>
	  Error_Handler();
 800e2a8:	f7fe fc5c 	bl	800cb64 <Error_Handler>
 800e2ac:	e7f2      	b.n	800e294 <Motor_PWM_Stop+0xc>
 800e2ae:	bf00      	nop
 800e2b0:	20001234 	.word	0x20001234
 800e2b4:	20001274 	.word	0x20001274

0800e2b8 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800e2b8:	b570      	push	{r4, r5, r6, lr}
	if (left > 0 ){
 800e2ba:	1e05      	subs	r5, r0, #0
inline void Motor_Switch(int left, int right){
 800e2bc:	460c      	mov	r4, r1
	if (left > 0 ){
 800e2be:	dc35      	bgt.n	800e32c <Motor_Switch+0x74>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転

	}
	else  if (left < 0){
 800e2c0:	d141      	bne.n	800e346 <Motor_Switch+0x8e>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
		left = -left;
	}
	if (right > 0){
 800e2c2:	2c00      	cmp	r4, #0
 800e2c4:	dc14      	bgt.n	800e2f0 <Motor_Switch+0x38>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転

	}

	else if (right < 0){
 800e2c6:	d137      	bne.n	800e338 <Motor_Switch+0x80>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
	  	right = -right;
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	f7fa f863 	bl	8008394 <__aeabi_i2d>
 800e2ce:	a322      	add	r3, pc, #136	; (adr r3, 800e358 <Motor_Switch+0xa0>)
 800e2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d4:	f7fa fb58 	bl	8008988 <__aeabi_dcmpgt>
 800e2d8:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	bf18      	it	ne
 800e2e0:	461d      	movne	r5, r3
	if(right > 4200*0.6) right = 4200*0.6;


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800e2e2:	4a1f      	ldr	r2, [pc, #124]	; (800e360 <Motor_Switch+0xa8>)
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800e2e4:	4b1f      	ldr	r3, [pc, #124]	; (800e364 <Motor_Switch+0xac>)
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800e2e6:	6812      	ldr	r2, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800e2e8:	681b      	ldr	r3, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800e2ea:	6394      	str	r4, [r2, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800e2ec:	641d      	str	r5, [r3, #64]	; 0x40
}
 800e2ee:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	2101      	movs	r1, #1
 800e2f4:	481c      	ldr	r0, [pc, #112]	; (800e368 <Motor_Switch+0xb0>)
 800e2f6:	f001 fc61 	bl	800fbbc <HAL_GPIO_WritePin>
	if(left > 4200*0.6) left = 4200*0.6;
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	f7fa f84a 	bl	8008394 <__aeabi_i2d>
 800e300:	a315      	add	r3, pc, #84	; (adr r3, 800e358 <Motor_Switch+0xa0>)
 800e302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e306:	f7fa fb3f 	bl	8008988 <__aeabi_dcmpgt>
 800e30a:	f640 16d8 	movw	r6, #2520	; 0x9d8
 800e30e:	2800      	cmp	r0, #0
 800e310:	bf18      	it	ne
 800e312:	4635      	movne	r5, r6
	if(right > 4200*0.6) right = 4200*0.6;
 800e314:	4620      	mov	r0, r4
 800e316:	f7fa f83d 	bl	8008394 <__aeabi_i2d>
 800e31a:	a30f      	add	r3, pc, #60	; (adr r3, 800e358 <Motor_Switch+0xa0>)
 800e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e320:	f7fa fb32 	bl	8008988 <__aeabi_dcmpgt>
 800e324:	2800      	cmp	r0, #0
 800e326:	bf18      	it	ne
 800e328:	4634      	movne	r4, r6
 800e32a:	e7da      	b.n	800e2e2 <Motor_Switch+0x2a>
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800e32c:	2201      	movs	r2, #1
 800e32e:	2104      	movs	r1, #4
 800e330:	480d      	ldr	r0, [pc, #52]	; (800e368 <Motor_Switch+0xb0>)
 800e332:	f001 fc43 	bl	800fbbc <HAL_GPIO_WritePin>
 800e336:	e7c4      	b.n	800e2c2 <Motor_Switch+0xa>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800e338:	2201      	movs	r2, #1
 800e33a:	4611      	mov	r1, r2
 800e33c:	480a      	ldr	r0, [pc, #40]	; (800e368 <Motor_Switch+0xb0>)
 800e33e:	f001 fc3d 	bl	800fbbc <HAL_GPIO_WritePin>
	  	right = -right;
 800e342:	4264      	negs	r4, r4
 800e344:	e7d9      	b.n	800e2fa <Motor_Switch+0x42>
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800e346:	2200      	movs	r2, #0
 800e348:	2104      	movs	r1, #4
 800e34a:	4807      	ldr	r0, [pc, #28]	; (800e368 <Motor_Switch+0xb0>)
 800e34c:	f001 fc36 	bl	800fbbc <HAL_GPIO_WritePin>
		left = -left;
 800e350:	426d      	negs	r5, r5
 800e352:	e7b6      	b.n	800e2c2 <Motor_Switch+0xa>
 800e354:	f3af 8000 	nop.w
 800e358:	00000000 	.word	0x00000000
 800e35c:	40a3b000 	.word	0x40a3b000
 800e360:	20001274 	.word	0x20001274
 800e364:	20001234 	.word	0x20001234
 800e368:	40020000 	.word	0x40020000

0800e36c <InitPulse>:
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
	* timer_counter = initial_pulse;
 800e36c:	6001      	str	r1, [r0, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800e36e:	4770      	bx	lr

0800e370 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800e370:	b4f0      	push	{r4, r5, r6, r7}
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
	error = abs( last[receiver_num] - raw );
 800e372:	4e1a      	ldr	r6, [pc, #104]	; (800e3dc <GetWallDataAverage+0x6c>)
	last[receiver_num] = raw;
	integrate[receiver_num] += error;

	count[receiver_num]++;
 800e374:	4c1a      	ldr	r4, [pc, #104]	; (800e3e0 <GetWallDataAverage+0x70>)
	error = abs( last[receiver_num] - raw );
 800e376:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
	integrate[receiver_num] += error;
 800e37a:	4d1a      	ldr	r5, [pc, #104]	; (800e3e4 <GetWallDataAverage+0x74>)
	last[receiver_num] = raw;
 800e37c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800e380:	1a5b      	subs	r3, r3, r1
	count[receiver_num]++;
 800e382:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
	integrate[receiver_num] += error;
 800e386:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	bfb8      	it	lt
 800e38e:	425b      	neglt	r3, r3
	count[receiver_num]++;
 800e390:	3101      	adds	r1, #1
	integrate[receiver_num] += error;
 800e392:	443b      	add	r3, r7
	if(count[receiver_num] == average_of_n_times)
 800e394:	4281      	cmp	r1, r0
	integrate[receiver_num] += error;
 800e396:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	count[receiver_num]++;
 800e39a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800e39e:	d006      	beq.n	800e3ae <GetWallDataAverage+0x3e>
 800e3a0:	4b11      	ldr	r3, [pc, #68]	; (800e3e8 <GetWallDataAverage+0x78>)
 800e3a2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e3a6:	ed92 0a00 	vldr	s0, [r2]
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
		integrate[receiver_num] = 0;
		count[receiver_num] = 0;
	}
	return average[receiver_num];
}
 800e3aa:	bcf0      	pop	{r4, r5, r6, r7}
 800e3ac:	4770      	bx	lr
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800e3ae:	ee07 3a90 	vmov	s15, r3
 800e3b2:	ee07 1a10 	vmov	s14, r1
 800e3b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e3be:	4b0a      	ldr	r3, [pc, #40]	; (800e3e8 <GetWallDataAverage+0x78>)
 800e3c0:	ee87 0a87 	vdiv.f32	s0, s15, s14
		integrate[receiver_num] = 0;
 800e3c4:	2100      	movs	r1, #0
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800e3c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		integrate[receiver_num] = 0;
 800e3ca:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
		count[receiver_num] = 0;
 800e3ce:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}
 800e3d2:	bcf0      	pop	{r4, r5, r6, r7}
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800e3d4:	ed83 0a00 	vstr	s0, [r3]
}
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	20001308 	.word	0x20001308
 800e3e0:	200012e8 	.word	0x200012e8
 800e3e4:	200012f8 	.word	0x200012f8
 800e3e8:	200012d8 	.word	0x200012d8

0800e3ec <ADCToBatteryVoltage>:
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
	float battery_voltage = 0;
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800e3ec:	ee07 0a90 	vmov	s15, r0
 800e3f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e3f8:	ee20 0a20 	vmul.f32	s0, s0, s1
	return battery_voltage;
}
 800e3fc:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop

0800e404 <IntegerPower>:
//-------------------------//

int IntegerPower(int integer, int exponential)
{
	int pattern_num = 1;
	for(int i=0; i < exponential ; i++)
 800e404:	2900      	cmp	r1, #0
 800e406:	dd08      	ble.n	800e41a <IntegerPower+0x16>
 800e408:	2300      	movs	r3, #0
	int pattern_num = 1;
 800e40a:	2201      	movs	r2, #1
	for(int i=0; i < exponential ; i++)
 800e40c:	3301      	adds	r3, #1
 800e40e:	4299      	cmp	r1, r3
	{
		pattern_num *= integer;
 800e410:	fb00 f202 	mul.w	r2, r0, r2
	for(int i=0; i < exponential ; i++)
 800e414:	d1fa      	bne.n	800e40c <IntegerPower+0x8>
	}
	return pattern_num;
}
 800e416:	4610      	mov	r0, r2
 800e418:	4770      	bx	lr
	int pattern_num = 1;
 800e41a:	2201      	movs	r2, #1
}
 800e41c:	4610      	mov	r0, r2
 800e41e:	4770      	bx	lr

0800e420 <GetBatteryLevel>:

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
	float current_percentage = current_voltage / battery_max;
	float lowest_percentage =  battery_min / battery_max;
 800e420:	eec0 0a81 	vdiv.f32	s1, s1, s2

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;

	int pattern = 0;
	for(int i=0; i < level_num; i++)
 800e424:	2800      	cmp	r0, #0
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800e426:	ee07 0a10 	vmov	s14, r0
 800e42a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e42e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e432:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	float current_percentage = current_voltage / battery_max;
 800e436:	ee80 0a01 	vdiv.f32	s0, s0, s2
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800e43a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	for(int i=0; i < level_num; i++)
 800e43e:	dd14      	ble.n	800e46a <GetBatteryLevel+0x4a>
 800e440:	2300      	movs	r3, #0
	int pattern = 0;
 800e442:	461a      	mov	r2, r3
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800e444:	ee07 3a90 	vmov	s15, r3
 800e448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e44c:	eef0 6a60 	vmov.f32	s13, s1
 800e450:	eee7 6a87 	vfma.f32	s13, s15, s14
 800e454:	eef4 6a40 	vcmp.f32	s13, s0
 800e458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45c:	bf98      	it	ls
 800e45e:	461a      	movls	r2, r3
	for(int i=0; i < level_num; i++)
 800e460:	3301      	adds	r3, #1
 800e462:	4298      	cmp	r0, r3
 800e464:	d1ee      	bne.n	800e444 <GetBatteryLevel+0x24>
		{
			pattern = i;
		}
	}
	return pattern;
}
 800e466:	4610      	mov	r0, r2
 800e468:	4770      	bx	lr
	int pattern = 0;
 800e46a:	2200      	movs	r2, #0
}
 800e46c:	4610      	mov	r0, r2
 800e46e:	4770      	bx	lr

0800e470 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800e470:	b510      	push	{r4, lr}
	  setbuf(stdout,NULL);
 800e472:	4c06      	ldr	r4, [pc, #24]	; (800e48c <Buffering+0x1c>)
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	2100      	movs	r1, #0
 800e478:	6898      	ldr	r0, [r3, #8]
 800e47a:	f005 fa07 	bl	801388c <setbuf>
	  setbuf(stdin,NULL);
 800e47e:	6823      	ldr	r3, [r4, #0]
 800e480:	2100      	movs	r1, #0
 800e482:	6858      	ldr	r0, [r3, #4]
}
 800e484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  setbuf(stdin,NULL);
 800e488:	f005 ba00 	b.w	801388c <setbuf>
 800e48c:	20000018 	.word	0x20000018

0800e490 <Copy_Gain>:
void Copy_Gain()
{
 800e490:	b570      	push	{r4, r5, r6, lr}
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
	float data[16]={0};
	data[0] = Pid[L_VELO_PID].KP;
 800e492:	4b1c      	ldr	r3, [pc, #112]	; (800e504 <Copy_Gain+0x74>)
	uint32_t address = start_adress_sector9;
 800e494:	4c1c      	ldr	r4, [pc, #112]	; (800e508 <Copy_Gain+0x78>)
	data[1] = Pid[L_VELO_PID].KI;
 800e496:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
	data[2] = Pid[L_VELO_PID].KD;
 800e49a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8

	data[3] = Pid[A_VELO_PID].KP;
 800e49e:	6818      	ldr	r0, [r3, #0]
	data[4] = Pid[A_VELO_PID].KI;
 800e4a0:	6859      	ldr	r1, [r3, #4]
	data[0] = Pid[L_VELO_PID].KP;
 800e4a2:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
	data[6] = Pid[L_WALL_PID].KP;
	data[7] = Pid[L_WALL_PID].KI;
	data[8] = Pid[L_WALL_PID].KD;

	data[9] = Pid[R_WALL_PID].KP;
	data[10] = Pid[R_WALL_PID].KI;
 800e4a6:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
	uint32_t address = start_adress_sector9;
 800e4aa:	6824      	ldr	r4, [r4, #0]
{
 800e4ac:	b090      	sub	sp, #64	; 0x40
	data[0] = Pid[L_VELO_PID].KP;
 800e4ae:	ed8d 0a00 	vstr	s0, [sp]
	data[1] = Pid[L_VELO_PID].KI;
 800e4b2:	9201      	str	r2, [sp, #4]
	data[5] = Pid[A_VELO_PID].KD;
 800e4b4:	689a      	ldr	r2, [r3, #8]
	data[2] = Pid[L_VELO_PID].KD;
 800e4b6:	9502      	str	r5, [sp, #8]
	data[3] = Pid[A_VELO_PID].KP;
 800e4b8:	9003      	str	r0, [sp, #12]
	data[6] = Pid[L_WALL_PID].KP;
 800e4ba:	6d9d      	ldr	r5, [r3, #88]	; 0x58
	data[7] = Pid[L_WALL_PID].KI;
 800e4bc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
	data[4] = Pid[A_VELO_PID].KI;
 800e4be:	9104      	str	r1, [sp, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800e4c0:	9205      	str	r2, [sp, #20]
	data[8] = Pid[L_WALL_PID].KD;
 800e4c2:	6e19      	ldr	r1, [r3, #96]	; 0x60
	data[9] = Pid[R_WALL_PID].KP;
 800e4c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	data[6] = Pid[L_WALL_PID].KP;
 800e4c8:	9506      	str	r5, [sp, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800e4ca:	9007      	str	r0, [sp, #28]
	data[11] = Pid[R_WALL_PID].KD;
 800e4cc:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c

	data[12] = Pid[D_WALL_PID].KP;
 800e4d0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	data[8] = Pid[L_WALL_PID].KD;
 800e4d2:	9108      	str	r1, [sp, #32]
	data[9] = Pid[R_WALL_PID].KP;
 800e4d4:	9209      	str	r2, [sp, #36]	; 0x24
	data[13] = Pid[D_WALL_PID].KI;
 800e4d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
	data[14] = Pid[D_WALL_PID].KD;
 800e4d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	data[10] = Pid[R_WALL_PID].KI;
 800e4da:	960a      	str	r6, [sp, #40]	; 0x28
	float data[16]={0};
 800e4dc:	2300      	movs	r3, #0
	data[11] = Pid[R_WALL_PID].KD;
 800e4de:	950b      	str	r5, [sp, #44]	; 0x2c
	data[12] = Pid[D_WALL_PID].KP;
 800e4e0:	900c      	str	r0, [sp, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800e4e2:	910d      	str	r1, [sp, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800e4e4:	920e      	str	r2, [sp, #56]	; 0x38
 800e4e6:	ad01      	add	r5, sp, #4
	float data[16]={0};
 800e4e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4ea:	ae0f      	add	r6, sp, #60	; 0x3c
 800e4ec:	e001      	b.n	800e4f2 <Copy_Gain+0x62>
 800e4ee:	ecb5 0a01 	vldmia	r5!, {s0}
	for(int i=0; i < 15; i++)
	{

		FLASH_Write_Word_F( address, data[i]);
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f7ff fc2e 	bl	800dd54 <FLASH_Write_Word_F>
	for(int i=0; i < 15; i++)
 800e4f8:	42b5      	cmp	r5, r6
		address += 0x04;
 800e4fa:	f104 0404 	add.w	r4, r4, #4
	for(int i=0; i < 15; i++)
 800e4fe:	d1f6      	bne.n	800e4ee <Copy_Gain+0x5e>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800e500:	b010      	add	sp, #64	; 0x40
 800e502:	bd70      	pop	{r4, r5, r6, pc}
 800e504:	20001318 	.word	0x20001318
 800e508:	08016e48 	.word	0x08016e48

0800e50c <Load_Gain>:
void Load_Gain()
{
 800e50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e510:	ed2d 8b02 	vpush	{d8}
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800e514:	4b61      	ldr	r3, [pc, #388]	; (800e69c <Load_Gain+0x190>)
	uint8_t j=0;
	for(int i=0; i < 15; i++)
	{
		FLASH_Read_Word_F( address, &data[i]);
		address += 0x04;
		printf("%d, %f\r\n",i,data[i]);
 800e516:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800e6b8 <Load_Gain+0x1ac>
	uint32_t address = start_adress_sector9;//こっちか
 800e51a:	681f      	ldr	r7, [r3, #0]
		judge = isnanf(data[i]); //nanでなければ0
		printf("judge : %d\r\n", judge);
 800e51c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800e6bc <Load_Gain+0x1b0>
{
 800e520:	b090      	sub	sp, #64	; 0x40
	float data[16]={0};//1個多く要素を作る。
 800e522:	4668      	mov	r0, sp
 800e524:	2240      	movs	r2, #64	; 0x40
 800e526:	2100      	movs	r1, #0
 800e528:	f003 fbd3 	bl	8011cd2 <memset>
 800e52c:	466c      	mov	r4, sp
	for(int i=0; i < 15; i++)
 800e52e:	2500      	movs	r5, #0
 800e530:	1b3f      	subs	r7, r7, r4
	uint8_t j=0;
 800e532:	46aa      	mov	sl, r5
		FLASH_Read_Word_F( address, &data[i]);
 800e534:	4621      	mov	r1, r4
 800e536:	1938      	adds	r0, r7, r4
 800e538:	f7ff fc32 	bl	800dda0 <FLASH_Read_Word_F>
		printf("%d, %f\r\n",i,data[i]);
 800e53c:	6820      	ldr	r0, [r4, #0]
 800e53e:	f7f9 ff3b 	bl	80083b8 <__aeabi_f2d>
 800e542:	4602      	mov	r2, r0
 800e544:	460b      	mov	r3, r1
 800e546:	4648      	mov	r0, r9
 800e548:	4629      	mov	r1, r5
 800e54a:	f004 fec1 	bl	80132d0 <iprintf>
		judge = isnanf(data[i]); //nanでなければ0
 800e54e:	ecb4 8a01 	vldmia	r4!, {s16}
 800e552:	eeb4 8a48 	vcmp.f32	s16, s16
 800e556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		printf("judge : %d\r\n", judge);
 800e55a:	bf6c      	ite	vs
 800e55c:	2101      	movvs	r1, #1
 800e55e:	2100      	movvc	r1, #0
 800e560:	4640      	mov	r0, r8
 800e562:	f004 feb5 	bl	80132d0 <iprintf>
		if(judge == 1) //コンパイラでisnanfの結果が変わる
 800e566:	eeb4 8a48 	vcmp.f32	s16, s16
 800e56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			j++;
 800e56e:	bf68      	it	vs
 800e570:	f10a 0a01 	addvs.w	sl, sl, #1
	for(int i=0; i < 15; i++)
 800e574:	f105 0501 	add.w	r5, r5, #1
			j++;
 800e578:	bf68      	it	vs
 800e57a:	fa5f fa8a 	uxtbvs.w	sl, sl
	for(int i=0; i < 15; i++)
 800e57e:	2d0f      	cmp	r5, #15
 800e580:	d1d8      	bne.n	800e534 <Load_Gain+0x28>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800e582:	4651      	mov	r1, sl
 800e584:	4846      	ldr	r0, [pc, #280]	; (800e6a0 <Load_Gain+0x194>)
 800e586:	f004 fea3 	bl	80132d0 <iprintf>
		if(j == 15)//全てnan0であれば
 800e58a:	f1ba 0f0f 	cmp.w	sl, #15
 800e58e:	d03a      	beq.n	800e606 <Load_Gain+0xfa>
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			//2回目以降こっちが呼ばれる
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800e590:	ed9d 1a02 	vldr	s2, [sp, #8]
 800e594:	eddd 0a01 	vldr	s1, [sp, #4]
 800e598:	ed9d 0a00 	vldr	s0, [sp]
 800e59c:	2004      	movs	r0, #4
 800e59e:	f000 fa1b 	bl	800e9d8 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800e5a2:	ed9d 1a02 	vldr	s2, [sp, #8]
 800e5a6:	eddd 0a01 	vldr	s1, [sp, #4]
 800e5aa:	ed9d 0a00 	vldr	s0, [sp]
 800e5ae:	2005      	movs	r0, #5
 800e5b0:	f000 fa12 	bl	800e9d8 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800e5b4:	ed9d 1a05 	vldr	s2, [sp, #20]
 800e5b8:	eddd 0a04 	vldr	s1, [sp, #16]
 800e5bc:	ed9d 0a03 	vldr	s0, [sp, #12]
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	f000 fa09 	bl	800e9d8 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800e5c6:	ed9d 1a08 	vldr	s2, [sp, #32]
 800e5ca:	eddd 0a07 	vldr	s1, [sp, #28]
 800e5ce:	ed9d 0a06 	vldr	s0, [sp, #24]
 800e5d2:	2002      	movs	r0, #2
 800e5d4:	f000 fa00 	bl	800e9d8 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800e5d8:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 800e5dc:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 800e5e0:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 800e5e4:	2003      	movs	r0, #3
 800e5e6:	f000 f9f7 	bl	800e9d8 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800e5ea:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
 800e5ee:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
 800e5f2:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 800e5f6:	2001      	movs	r0, #1
 800e5f8:	f000 f9ee 	bl	800e9d8 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800e5fc:	b010      	add	sp, #64	; 0x40
 800e5fe:	ecbd 8b02 	vpop	{d8}
 800e602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("デフォルトゲインセット\r\n");
 800e606:	4827      	ldr	r0, [pc, #156]	; (800e6a4 <Load_Gain+0x198>)
 800e608:	f004 feea 	bl	80133e0 <puts>
		  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);
 800e60c:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800e6a8 <Load_Gain+0x19c>
 800e610:	eddf 0a26 	vldr	s1, [pc, #152]	; 800e6ac <Load_Gain+0x1a0>
 800e614:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800e6b0 <Load_Gain+0x1a4>
 800e618:	2004      	movs	r0, #4
 800e61a:	f000 f9dd 	bl	800e9d8 <PIDSetGain>
		  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);
 800e61e:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800e6a8 <Load_Gain+0x19c>
 800e622:	eddf 0a22 	vldr	s1, [pc, #136]	; 800e6ac <Load_Gain+0x1a0>
 800e626:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800e6b0 <Load_Gain+0x1a4>
 800e62a:	2005      	movs	r0, #5
 800e62c:	f000 f9d4 	bl	800e9d8 <PIDSetGain>
		  PIDSetGain(A_VELO_PID, 14.6,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800e630:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800e6b4 <Load_Gain+0x1a8>
 800e634:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800e6b0 <Load_Gain+0x1a4>
 800e638:	eef0 0a41 	vmov.f32	s1, s2
 800e63c:	2000      	movs	r0, #0
 800e63e:	f000 f9cb 	bl	800e9d8 <PIDSetGain>
		  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800e642:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800e6b4 <Load_Gain+0x1a8>
 800e646:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800e6b0 <Load_Gain+0x1a4>
 800e64a:	eef0 0a41 	vmov.f32	s1, s2
 800e64e:	2008      	movs	r0, #8
 800e650:	f000 f9c2 	bl	800e9d8 <PIDSetGain>
		  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800e654:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800e6b4 <Load_Gain+0x1a8>
 800e658:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800e65c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800e660:	2001      	movs	r0, #1
 800e662:	f000 f9b9 	bl	800e9d8 <PIDSetGain>
		  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e666:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800e6b4 <Load_Gain+0x1a8>
 800e66a:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800e66e:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e672:	2002      	movs	r0, #2
 800e674:	f000 f9b0 	bl	800e9d8 <PIDSetGain>
		  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e678:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 800e6b4 <Load_Gain+0x1a8>
 800e67c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800e680:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e684:	2003      	movs	r0, #3
 800e686:	f000 f9a7 	bl	800e9d8 <PIDSetGain>
			Flash_clear_sector9();
 800e68a:	f7ff fbcf 	bl	800de2c <Flash_clear_sector9>
			Copy_Gain();
 800e68e:	f7ff feff 	bl	800e490 <Copy_Gain>
}
 800e692:	b010      	add	sp, #64	; 0x40
 800e694:	ecbd 8b02 	vpop	{d8}
 800e698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e69c:	08016e48 	.word	0x08016e48
 800e6a0:	08016f98 	.word	0x08016f98
 800e6a4:	08016fa0 	.word	0x08016fa0
 800e6a8:	3a83126f 	.word	0x3a83126f
 800e6ac:	452f0000 	.word	0x452f0000
 800e6b0:	4169999a 	.word	0x4169999a
 800e6b4:	00000000 	.word	0x00000000
 800e6b8:	08016f84 	.word	0x08016f84
 800e6bc:	08016f90 	.word	0x08016f90

0800e6c0 <Change_Gain>:
void Change_Gain()
{
 800e6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800e6c4:	48a4      	ldr	r0, [pc, #656]	; (800e958 <Change_Gain+0x298>)
 800e6c6:	4ca5      	ldr	r4, [pc, #660]	; (800e95c <Change_Gain+0x29c>)
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800e6c8:	f8df 8304 	ldr.w	r8, [pc, #772]	; 800e9d0 <Change_Gain+0x310>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e6cc:	4da4      	ldr	r5, [pc, #656]	; (800e960 <Change_Gain+0x2a0>)
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e6ce:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800e9d4 <Change_Gain+0x314>
{
 800e6d2:	b087      	sub	sp, #28
	HAL_TIM_Base_Stop_IT(&htim1);
 800e6d4:	f002 f92c 	bl	8010930 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800e6d8:	48a2      	ldr	r0, [pc, #648]	; (800e964 <Change_Gain+0x2a4>)
 800e6da:	f002 f929 	bl	8010930 <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800e6de:	f7ff fdd3 	bl	800e288 <Motor_PWM_Stop>
	EmitterOFF();
 800e6e2:	f7ff fd51 	bl	800e188 <EmitterOFF>
	HAL_Delay(200);
 800e6e6:	20c8      	movs	r0, #200	; 0xc8
 800e6e8:	f000 fb3a 	bl	800ed60 <HAL_Delay>
	char change_mode='0';
 800e6ec:	2330      	movs	r3, #48	; 0x30
 800e6ee:	f88d 3015 	strb.w	r3, [sp, #21]
	char pid = '0';
 800e6f2:	f88d 3016 	strb.w	r3, [sp, #22]
		printf("現在のPIDゲイン\r\n");
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	f004 fe72 	bl	80133e0 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e6fc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e700:	f7f9 fe5a 	bl	80083b8 <__aeabi_f2d>
 800e704:	4606      	mov	r6, r0
 800e706:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800e70a:	460f      	mov	r7, r1
 800e70c:	f7f9 fe54 	bl	80083b8 <__aeabi_f2d>
 800e710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e714:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800e718:	f7f9 fe4e 	bl	80083b8 <__aeabi_f2d>
 800e71c:	4632      	mov	r2, r6
 800e71e:	463b      	mov	r3, r7
 800e720:	e9cd 0100 	strd	r0, r1, [sp]
 800e724:	4628      	mov	r0, r5
 800e726:	f004 fdd3 	bl	80132d0 <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e72a:	6820      	ldr	r0, [r4, #0]
 800e72c:	f7f9 fe44 	bl	80083b8 <__aeabi_f2d>
 800e730:	4606      	mov	r6, r0
 800e732:	68a0      	ldr	r0, [r4, #8]
 800e734:	460f      	mov	r7, r1
 800e736:	f7f9 fe3f 	bl	80083b8 <__aeabi_f2d>
 800e73a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e73e:	6860      	ldr	r0, [r4, #4]
 800e740:	f7f9 fe3a 	bl	80083b8 <__aeabi_f2d>
 800e744:	4632      	mov	r2, r6
 800e746:	463b      	mov	r3, r7
 800e748:	e9cd 0100 	strd	r0, r1, [sp]
 800e74c:	4648      	mov	r0, r9
 800e74e:	f004 fdbf 	bl	80132d0 <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800e752:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e754:	f7f9 fe30 	bl	80083b8 <__aeabi_f2d>
 800e758:	4606      	mov	r6, r0
 800e75a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800e75c:	460f      	mov	r7, r1
 800e75e:	f7f9 fe2b 	bl	80083b8 <__aeabi_f2d>
 800e762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e766:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e768:	f7f9 fe26 	bl	80083b8 <__aeabi_f2d>
 800e76c:	4632      	mov	r2, r6
 800e76e:	463b      	mov	r3, r7
 800e770:	e9cd 0100 	strd	r0, r1, [sp]
 800e774:	487c      	ldr	r0, [pc, #496]	; (800e968 <Change_Gain+0x2a8>)
 800e776:	f004 fdab 	bl	80132d0 <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800e77a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800e77e:	f7f9 fe1b 	bl	80083b8 <__aeabi_f2d>
 800e782:	4606      	mov	r6, r0
 800e784:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800e788:	460f      	mov	r7, r1
 800e78a:	f7f9 fe15 	bl	80083b8 <__aeabi_f2d>
 800e78e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e792:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800e796:	f7f9 fe0f 	bl	80083b8 <__aeabi_f2d>
 800e79a:	4632      	mov	r2, r6
 800e79c:	463b      	mov	r3, r7
 800e79e:	e9cd 0100 	strd	r0, r1, [sp]
 800e7a2:	4872      	ldr	r0, [pc, #456]	; (800e96c <Change_Gain+0x2ac>)
 800e7a4:	f004 fd94 	bl	80132d0 <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800e7a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e7aa:	f7f9 fe05 	bl	80083b8 <__aeabi_f2d>
 800e7ae:	4606      	mov	r6, r0
 800e7b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e7b2:	460f      	mov	r7, r1
 800e7b4:	f7f9 fe00 	bl	80083b8 <__aeabi_f2d>
 800e7b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e7be:	f7f9 fdfb 	bl	80083b8 <__aeabi_f2d>
 800e7c2:	463b      	mov	r3, r7
 800e7c4:	e9cd 0100 	strd	r0, r1, [sp]
 800e7c8:	4632      	mov	r2, r6
 800e7ca:	4869      	ldr	r0, [pc, #420]	; (800e970 <Change_Gain+0x2b0>)
 800e7cc:	f004 fd80 	bl	80132d0 <iprintf>

		Buffering();
 800e7d0:	f7ff fe4e 	bl	800e470 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800e7d4:	4867      	ldr	r0, [pc, #412]	; (800e974 <Change_Gain+0x2b4>)
 800e7d6:	f004 fd7b 	bl	80132d0 <iprintf>
 800e7da:	f10d 0115 	add.w	r1, sp, #21
 800e7de:	4866      	ldr	r0, [pc, #408]	; (800e978 <Change_Gain+0x2b8>)
 800e7e0:	f005 f80a 	bl	80137f8 <iscanf>
		if(change_mode == '0')
 800e7e4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e7e8:	2b30      	cmp	r3, #48	; 0x30
 800e7ea:	d066      	beq.n	800e8ba <Change_Gain+0x1fa>
			break;
		}
		else
		{

			Buffering();
 800e7ec:	f7ff fe40 	bl	800e470 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800e7f0:	4862      	ldr	r0, [pc, #392]	; (800e97c <Change_Gain+0x2bc>)
 800e7f2:	f004 fd6d 	bl	80132d0 <iprintf>
 800e7f6:	f10d 0116 	add.w	r1, sp, #22
 800e7fa:	485f      	ldr	r0, [pc, #380]	; (800e978 <Change_Gain+0x2b8>)
 800e7fc:	f004 fffc 	bl	80137f8 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800e800:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800e804:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800e808:	485d      	ldr	r0, [pc, #372]	; (800e980 <Change_Gain+0x2c0>)
 800e80a:	f004 fd61 	bl	80132d0 <iprintf>

			Buffering();
 800e80e:	f7ff fe2f 	bl	800e470 <Buffering>
			printf("\r\n値を入力 : ");
 800e812:	485c      	ldr	r0, [pc, #368]	; (800e984 <Change_Gain+0x2c4>)
 800e814:	f004 fd5c 	bl	80132d0 <iprintf>

			switch(change_mode)
 800e818:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e81c:	3b31      	subs	r3, #49	; 0x31
 800e81e:	2b04      	cmp	r3, #4
 800e820:	d85e      	bhi.n	800e8e0 <Change_Gain+0x220>
 800e822:	e8df f003 	tbb	[pc, r3]
 800e826:	303d      	.short	0x303d
 800e828:	1623      	.short	0x1623
 800e82a:	03          	.byte	0x03
 800e82b:	00          	.byte	0x00
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800e82c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e830:	2b70      	cmp	r3, #112	; 0x70
 800e832:	d068      	beq.n	800e906 <Change_Gain+0x246>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
				}
				else if(pid == 'i')
 800e834:	2b69      	cmp	r3, #105	; 0x69
 800e836:	d07f      	beq.n	800e938 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[D_WALL_PID].KI);
				}
				else if(pid == 'd')
 800e838:	2b64      	cmp	r3, #100	; 0x64
 800e83a:	d055      	beq.n	800e8e8 <Change_Gain+0x228>
				break;
			default :
				printf("該当しません\r\n");
				break;
			}
			Buffering();
 800e83c:	f7ff fe18 	bl	800e470 <Buffering>
			scanf("%c",&nl);
 800e840:	f10d 0117 	add.w	r1, sp, #23
 800e844:	484c      	ldr	r0, [pc, #304]	; (800e978 <Change_Gain+0x2b8>)
 800e846:	f004 ffd7 	bl	80137f8 <iscanf>
			printf("\r\n");
 800e84a:	484f      	ldr	r0, [pc, #316]	; (800e988 <Change_Gain+0x2c8>)
 800e84c:	f004 fdc8 	bl	80133e0 <puts>
		printf("現在のPIDゲイン\r\n");
 800e850:	e751      	b.n	800e6f6 <Change_Gain+0x36>
				if(pid == 'p')
 800e852:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e856:	2b70      	cmp	r3, #112	; 0x70
 800e858:	d05a      	beq.n	800e910 <Change_Gain+0x250>
				else if(pid == 'i')
 800e85a:	2b69      	cmp	r3, #105	; 0x69
 800e85c:	d071      	beq.n	800e942 <Change_Gain+0x282>
				else if(pid == 'd')
 800e85e:	2b64      	cmp	r3, #100	; 0x64
 800e860:	d1ec      	bne.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800e862:	494a      	ldr	r1, [pc, #296]	; (800e98c <Change_Gain+0x2cc>)
 800e864:	484a      	ldr	r0, [pc, #296]	; (800e990 <Change_Gain+0x2d0>)
 800e866:	f004 ffc7 	bl	80137f8 <iscanf>
 800e86a:	e7e7      	b.n	800e83c <Change_Gain+0x17c>
				if(pid == 'p')
 800e86c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e870:	2b70      	cmp	r3, #112	; 0x70
 800e872:	d052      	beq.n	800e91a <Change_Gain+0x25a>
				else if(pid == 'i')
 800e874:	2b69      	cmp	r3, #105	; 0x69
 800e876:	d069      	beq.n	800e94c <Change_Gain+0x28c>
				else if(pid == 'd')
 800e878:	2b64      	cmp	r3, #100	; 0x64
 800e87a:	d1df      	bne.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800e87c:	4945      	ldr	r1, [pc, #276]	; (800e994 <Change_Gain+0x2d4>)
 800e87e:	4844      	ldr	r0, [pc, #272]	; (800e990 <Change_Gain+0x2d0>)
 800e880:	f004 ffba 	bl	80137f8 <iscanf>
 800e884:	e7da      	b.n	800e83c <Change_Gain+0x17c>
				if(pid == 'p')
 800e886:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e88a:	2b70      	cmp	r3, #112	; 0x70
 800e88c:	d036      	beq.n	800e8fc <Change_Gain+0x23c>
				else if(pid == 'i')
 800e88e:	2b69      	cmp	r3, #105	; 0x69
 800e890:	d04d      	beq.n	800e92e <Change_Gain+0x26e>
				else if(pid == 'd')
 800e892:	2b64      	cmp	r3, #100	; 0x64
 800e894:	d1d2      	bne.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800e896:	4940      	ldr	r1, [pc, #256]	; (800e998 <Change_Gain+0x2d8>)
 800e898:	483d      	ldr	r0, [pc, #244]	; (800e990 <Change_Gain+0x2d0>)
 800e89a:	f004 ffad 	bl	80137f8 <iscanf>
 800e89e:	e7cd      	b.n	800e83c <Change_Gain+0x17c>
				if(pid == 'p')
 800e8a0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e8a4:	2b70      	cmp	r3, #112	; 0x70
 800e8a6:	d024      	beq.n	800e8f2 <Change_Gain+0x232>
				else if(pid == 'i')
 800e8a8:	2b69      	cmp	r3, #105	; 0x69
 800e8aa:	d03b      	beq.n	800e924 <Change_Gain+0x264>
				else if(pid == 'd')
 800e8ac:	2b64      	cmp	r3, #100	; 0x64
 800e8ae:	d1c5      	bne.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800e8b0:	493a      	ldr	r1, [pc, #232]	; (800e99c <Change_Gain+0x2dc>)
 800e8b2:	4837      	ldr	r0, [pc, #220]	; (800e990 <Change_Gain+0x2d0>)
 800e8b4:	f004 ffa0 	bl	80137f8 <iscanf>
 800e8b8:	e7c0      	b.n	800e83c <Change_Gain+0x17c>
		}

	}
	printf("\r\n完了\r\n");
 800e8ba:	4839      	ldr	r0, [pc, #228]	; (800e9a0 <Change_Gain+0x2e0>)
 800e8bc:	f004 fd90 	bl	80133e0 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800e8c0:	f7ff fab4 	bl	800de2c <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800e8c4:	f7ff fde4 	bl	800e490 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800e8c8:	2007      	movs	r0, #7
 800e8ca:	f7ff fc6b 	bl	800e1a4 <ChangeLED>
	HAL_Delay(200);
 800e8ce:	20c8      	movs	r0, #200	; 0xc8
 800e8d0:	f000 fa46 	bl	800ed60 <HAL_Delay>
	ChangeLED(0);
 800e8d4:	2000      	movs	r0, #0
 800e8d6:	f7ff fc65 	bl	800e1a4 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800e8da:	b007      	add	sp, #28
 800e8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				printf("該当しません\r\n");
 800e8e0:	4830      	ldr	r0, [pc, #192]	; (800e9a4 <Change_Gain+0x2e4>)
 800e8e2:	f004 fd7d 	bl	80133e0 <puts>
				break;
 800e8e6:	e7a9      	b.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800e8e8:	492f      	ldr	r1, [pc, #188]	; (800e9a8 <Change_Gain+0x2e8>)
 800e8ea:	4829      	ldr	r0, [pc, #164]	; (800e990 <Change_Gain+0x2d0>)
 800e8ec:	f004 ff84 	bl	80137f8 <iscanf>
 800e8f0:	e7a4      	b.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KP);
 800e8f2:	492e      	ldr	r1, [pc, #184]	; (800e9ac <Change_Gain+0x2ec>)
 800e8f4:	4826      	ldr	r0, [pc, #152]	; (800e990 <Change_Gain+0x2d0>)
 800e8f6:	f004 ff7f 	bl	80137f8 <iscanf>
 800e8fa:	e79f      	b.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KP);
 800e8fc:	4917      	ldr	r1, [pc, #92]	; (800e95c <Change_Gain+0x29c>)
 800e8fe:	4824      	ldr	r0, [pc, #144]	; (800e990 <Change_Gain+0x2d0>)
 800e900:	f004 ff7a 	bl	80137f8 <iscanf>
 800e904:	e79a      	b.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KP);
 800e906:	492a      	ldr	r1, [pc, #168]	; (800e9b0 <Change_Gain+0x2f0>)
 800e908:	4821      	ldr	r0, [pc, #132]	; (800e990 <Change_Gain+0x2d0>)
 800e90a:	f004 ff75 	bl	80137f8 <iscanf>
 800e90e:	e795      	b.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KP);
 800e910:	4928      	ldr	r1, [pc, #160]	; (800e9b4 <Change_Gain+0x2f4>)
 800e912:	481f      	ldr	r0, [pc, #124]	; (800e990 <Change_Gain+0x2d0>)
 800e914:	f004 ff70 	bl	80137f8 <iscanf>
 800e918:	e790      	b.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KP);
 800e91a:	4927      	ldr	r1, [pc, #156]	; (800e9b8 <Change_Gain+0x2f8>)
 800e91c:	481c      	ldr	r0, [pc, #112]	; (800e990 <Change_Gain+0x2d0>)
 800e91e:	f004 ff6b 	bl	80137f8 <iscanf>
 800e922:	e78b      	b.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800e924:	4925      	ldr	r1, [pc, #148]	; (800e9bc <Change_Gain+0x2fc>)
 800e926:	481a      	ldr	r0, [pc, #104]	; (800e990 <Change_Gain+0x2d0>)
 800e928:	f004 ff66 	bl	80137f8 <iscanf>
 800e92c:	e786      	b.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800e92e:	4924      	ldr	r1, [pc, #144]	; (800e9c0 <Change_Gain+0x300>)
 800e930:	4817      	ldr	r0, [pc, #92]	; (800e990 <Change_Gain+0x2d0>)
 800e932:	f004 ff61 	bl	80137f8 <iscanf>
 800e936:	e781      	b.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800e938:	4922      	ldr	r1, [pc, #136]	; (800e9c4 <Change_Gain+0x304>)
 800e93a:	4815      	ldr	r0, [pc, #84]	; (800e990 <Change_Gain+0x2d0>)
 800e93c:	f004 ff5c 	bl	80137f8 <iscanf>
 800e940:	e77c      	b.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800e942:	4921      	ldr	r1, [pc, #132]	; (800e9c8 <Change_Gain+0x308>)
 800e944:	4812      	ldr	r0, [pc, #72]	; (800e990 <Change_Gain+0x2d0>)
 800e946:	f004 ff57 	bl	80137f8 <iscanf>
 800e94a:	e777      	b.n	800e83c <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800e94c:	491f      	ldr	r1, [pc, #124]	; (800e9cc <Change_Gain+0x30c>)
 800e94e:	4810      	ldr	r0, [pc, #64]	; (800e990 <Change_Gain+0x2d0>)
 800e950:	f004 ff52 	bl	80137f8 <iscanf>
 800e954:	e772      	b.n	800e83c <Change_Gain+0x17c>
 800e956:	bf00      	nop
 800e958:	20001f6c 	.word	0x20001f6c
 800e95c:	20001318 	.word	0x20001318
 800e960:	08016e68 	.word	0x08016e68
 800e964:	20001d24 	.word	0x20001d24
 800e968:	08016ea4 	.word	0x08016ea4
 800e96c:	08016ec0 	.word	0x08016ec0
 800e970:	08016edc 	.word	0x08016edc
 800e974:	08016ef8 	.word	0x08016ef8
 800e978:	08016f10 	.word	0x08016f10
 800e97c:	08016f14 	.word	0x08016f14
 800e980:	08016f28 	.word	0x08016f28
 800e984:	08016f4c 	.word	0x08016f4c
 800e988:	08016f80 	.word	0x08016f80
 800e98c:	200013a4 	.word	0x200013a4
 800e990:	08016f60 	.word	0x08016f60
 800e994:	20001378 	.word	0x20001378
 800e998:	20001320 	.word	0x20001320
 800e99c:	200013d0 	.word	0x200013d0
 800e9a0:	08016f78 	.word	0x08016f78
 800e9a4:	08016f64 	.word	0x08016f64
 800e9a8:	2000134c 	.word	0x2000134c
 800e9ac:	200013c8 	.word	0x200013c8
 800e9b0:	20001344 	.word	0x20001344
 800e9b4:	2000139c 	.word	0x2000139c
 800e9b8:	20001370 	.word	0x20001370
 800e9bc:	200013cc 	.word	0x200013cc
 800e9c0:	2000131c 	.word	0x2000131c
 800e9c4:	20001348 	.word	0x20001348
 800e9c8:	200013a0 	.word	0x200013a0
 800e9cc:	20001374 	.word	0x20001374
 800e9d0:	08016e50 	.word	0x08016e50
 800e9d4:	08016e88 	.word	0x08016e88

0800e9d8 <PIDSetGain>:

const float pid_T = 0.001f;
const float pid_DT = 1.0f/0.001f;
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
	Pid[n].KP = kp;
 800e9d8:	4a05      	ldr	r2, [pc, #20]	; (800e9f0 <PIDSetGain+0x18>)
 800e9da:	232c      	movs	r3, #44	; 0x2c
 800e9dc:	fb03 2000 	mla	r0, r3, r0, r2
 800e9e0:	ed80 0a00 	vstr	s0, [r0]
	Pid[n].KI = ki;
 800e9e4:	edc0 0a01 	vstr	s1, [r0, #4]
	Pid[n].KD = kd;
 800e9e8:	ed80 1a02 	vstr	s2, [r0, #8]

}
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	20001318 	.word	0x20001318

0800e9f4 <PIDChangeFlag>:

void PIDChangeFlag(int n, int on_or_off)
{
	Pid[n].flag = on_or_off;
 800e9f4:	4a02      	ldr	r2, [pc, #8]	; (800ea00 <PIDChangeFlag+0xc>)
 800e9f6:	232c      	movs	r3, #44	; 0x2c
 800e9f8:	fb03 2000 	mla	r0, r3, r0, r2
 800e9fc:	6281      	str	r1, [r0, #40]	; 0x28
}
 800e9fe:	4770      	bx	lr
 800ea00:	20001318 	.word	0x20001318

0800ea04 <PIDReset>:
	return Pid[n].flag;
}
void PIDReset(int n)
{
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800ea04:	4905      	ldr	r1, [pc, #20]	; (800ea1c <PIDReset+0x18>)
 800ea06:	232c      	movs	r3, #44	; 0x2c
 800ea08:	fb03 1000 	mla	r0, r3, r0, r1
 800ea0c:	2200      	movs	r2, #0
	Pid[n].ei = 0;
	Pid[n].ed = 0;
	Pid[n].elast = 0;
	Pid[n].out = 0;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	6243      	str	r3, [r0, #36]	; 0x24
	Pid[n].e = 0;
 800ea12:	60c2      	str	r2, [r0, #12]
	Pid[n].ei = 0;
 800ea14:	6102      	str	r2, [r0, #16]
	Pid[n].ed = 0;
 800ea16:	6142      	str	r2, [r0, #20]
	Pid[n].elast = 0;
 800ea18:	6182      	str	r2, [r0, #24]
}
 800ea1a:	4770      	bx	lr
 800ea1c:	20001318 	.word	0x20001318

0800ea20 <PIDControl>:
inline int PIDControl(int n, float target, float current)
{
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800ea20:	4b21      	ldr	r3, [pc, #132]	; (800eaa8 <PIDControl+0x88>)
{
 800ea22:	b510      	push	{r4, lr}
	if(Pid[n].flag == 0)
 800ea24:	242c      	movs	r4, #44	; 0x2c
 800ea26:	fb04 3400 	mla	r4, r4, r0, r3
 800ea2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ea2c:	b3a8      	cbz	r0, 800ea9a <PIDControl+0x7a>
	else
	{
		Pid[n].target = target;
		Pid[n].current = current;

		Pid[n].e = Pid[n].target - Pid[n].current;
 800ea2e:	ee70 6a60 	vsub.f32	s13, s0, s1
		Pid[n].ei += Pid[n].e * pid_T;
 800ea32:	ed9f 4a1e 	vldr	s8, [pc, #120]	; 800eaac <PIDControl+0x8c>
 800ea36:	ed94 6a04 	vldr	s12, [r4, #16]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
		Pid[n].elast = Pid[n].e;
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea3a:	ed94 7a01 	vldr	s14, [r4, #4]
 800ea3e:	ed94 5a00 	vldr	s10, [r4]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800ea42:	edd4 7a06 	vldr	s15, [r4, #24]
 800ea46:	eddf 4a1a 	vldr	s9, [pc, #104]	; 800eab0 <PIDControl+0x90>
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea4a:	edd4 5a02 	vldr	s11, [r4, #8]
		Pid[n].e = Pid[n].target - Pid[n].current;
 800ea4e:	edc4 6a03 	vstr	s13, [r4, #12]
		Pid[n].ei += Pid[n].e * pid_T;
 800ea52:	eea6 6a84 	vfma.f32	s12, s13, s8
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800ea56:	ee76 7ae7 	vsub.f32	s15, s13, s15
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea5a:	ee26 7a07 	vmul.f32	s14, s12, s14
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800ea5e:	ee67 7aa4 	vmul.f32	s15, s15, s9
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea62:	eea6 7a85 	vfma.f32	s14, s13, s10
		Pid[n].ei += Pid[n].e * pid_T;
 800ea66:	ed84 6a04 	vstr	s12, [r4, #16]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea6a:	eea7 7aa5 	vfma.f32	s14, s15, s11
		Pid[n].elast = Pid[n].e;
 800ea6e:	edc4 6a06 	vstr	s13, [r4, #24]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800ea72:	edc4 7a05 	vstr	s15, [r4, #20]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea76:	ee17 0a10 	vmov	r0, s14
		Pid[n].target = target;
 800ea7a:	ed84 0a08 	vstr	s0, [r4, #32]
		Pid[n].current = current;
 800ea7e:	edc4 0a07 	vstr	s1, [r4, #28]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800ea82:	f7f9 fc99 	bl	80083b8 <__aeabi_f2d>
 800ea86:	ec41 0b10 	vmov	d0, r0, r1
 800ea8a:	f002 fe97 	bl	80117bc <round>
 800ea8e:	ec51 0b10 	vmov	r0, r1, d0
 800ea92:	f7f9 ff99 	bl	80089c8 <__aeabi_d2iz>
 800ea96:	6260      	str	r0, [r4, #36]	; 0x24
		return Pid[n].out;
	}
}
 800ea98:	bd10      	pop	{r4, pc}
		Pid[n].e = 0.0f;
 800ea9a:	2300      	movs	r3, #0
		Pid[n].out = 0;
 800ea9c:	6260      	str	r0, [r4, #36]	; 0x24
		Pid[n].e = 0.0f;
 800ea9e:	60e3      	str	r3, [r4, #12]
		Pid[n].ei = 0.0f;
 800eaa0:	6123      	str	r3, [r4, #16]
		Pid[n].ed = 0.0f;
 800eaa2:	6163      	str	r3, [r4, #20]
		Pid[n].elast = 0.0f;
 800eaa4:	61a3      	str	r3, [r4, #24]
}
 800eaa6:	bd10      	pop	{r4, pc}
 800eaa8:	20001318 	.word	0x20001318
 800eaac:	3a83126f 	.word	0x3a83126f
 800eab0:	4479ffff 	.word	0x4479ffff

0800eab4 <HAL_GPIO_EXTI_Callback>:
#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_12)
 800eab4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800eab8:	d106      	bne.n	800eac8 <HAL_GPIO_EXTI_Callback+0x14>
	{
	  gpio_callback_count++;
 800eaba:	4a04      	ldr	r2, [pc, #16]	; (800eacc <HAL_GPIO_EXTI_Callback+0x18>)
 800eabc:	6813      	ldr	r3, [r2, #0]
 800eabe:	3301      	adds	r3, #1
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	bfc8      	it	gt
 800eac4:	2300      	movgt	r3, #0
 800eac6:	6013      	str	r3, [r2, #0]
	}
}
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	200014fc 	.word	0x200014fc

0800ead0 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 800ead0:	b538      	push	{r3, r4, r5, lr}
 800ead2:	4605      	mov	r5, r0
 800ead4:	2405      	movs	r4, #5
	for(int i=0; i < 5; i++)
	{
		ChangeLED(mode);
 800ead6:	4628      	mov	r0, r5
 800ead8:	f7ff fb64 	bl	800e1a4 <ChangeLED>
		HAL_Delay(100);
 800eadc:	2064      	movs	r0, #100	; 0x64
 800eade:	f000 f93f 	bl	800ed60 <HAL_Delay>
		ChangeLED(0);
 800eae2:	2000      	movs	r0, #0
 800eae4:	f7ff fb5e 	bl	800e1a4 <ChangeLED>
		HAL_Delay(100);
 800eae8:	2064      	movs	r0, #100	; 0x64
 800eaea:	f000 f939 	bl	800ed60 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800eaee:	3c01      	subs	r4, #1
 800eaf0:	d1f1      	bne.n	800ead6 <Signal+0x6>
	}
}
 800eaf2:	bd38      	pop	{r3, r4, r5, pc}

0800eaf4 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800eaf4:	b510      	push	{r4, lr}

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800eaf6:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800eb40 <BatteryCheck+0x4c>
 800eafa:	eddf 0a12 	vldr	s1, [pc, #72]	; 800eb44 <BatteryCheck+0x50>
{
 800eafe:	ed2d 8b02 	vpush	{d8}
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800eb02:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800eb06:	f7ff fc71 	bl	800e3ec <ADCToBatteryVoltage>

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800eb0a:	2103      	movs	r1, #3
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800eb0c:	eeb0 8a40 	vmov.f32	s16, s0
	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800eb10:	2002      	movs	r0, #2
 800eb12:	f7ff fc77 	bl	800e404 <IntegerPower>

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800eb16:	eeb0 0a48 	vmov.f32	s0, s16
 800eb1a:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800eb48 <BatteryCheck+0x54>
 800eb1e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800eb4c <BatteryCheck+0x58>
 800eb22:	f7ff fc7d 	bl	800e420 <GetBatteryLevel>
 800eb26:	4604      	mov	r4, r0

	printf("%d\r\n", battery_level);
 800eb28:	4601      	mov	r1, r0
 800eb2a:	4809      	ldr	r0, [pc, #36]	; (800eb50 <BatteryCheck+0x5c>)
 800eb2c:	f004 fbd0 	bl	80132d0 <iprintf>
	Signal( battery_level );
}
 800eb30:	ecbd 8b02 	vpop	{d8}
	Signal( battery_level );
 800eb34:	b260      	sxtb	r0, r4
}
 800eb36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Signal( battery_level );
 800eb3a:	f7ff bfc9 	b.w	800ead0 <Signal>
 800eb3e:	bf00      	nop
 800eb40:	45800000 	.word	0x45800000
 800eb44:	40533333 	.word	0x40533333
 800eb48:	41066666 	.word	0x41066666
 800eb4c:	40e66666 	.word	0x40e66666
 800eb50:	08016f98 	.word	0x08016f98

0800eb54 <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 800eb54:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 800eb56:	4c10      	ldr	r4, [pc, #64]	; (800eb98 <PhotoSwitch+0x44>)
 800eb58:	4810      	ldr	r0, [pc, #64]	; (800eb9c <PhotoSwitch+0x48>)
 800eb5a:	4621      	mov	r1, r4
 800eb5c:	2202      	movs	r2, #2
 800eb5e:	f000 f9c3 	bl	800eee8 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 800eb62:	2100      	movs	r1, #0
 800eb64:	480e      	ldr	r0, [pc, #56]	; (800eba0 <PhotoSwitch+0x4c>)
 800eb66:	f002 fb9d 	bl	80112a4 <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 800eb6a:	6861      	ldr	r1, [r4, #4]
 800eb6c:	29c7      	cmp	r1, #199	; 0xc7
 800eb6e:	d806      	bhi.n	800eb7e <PhotoSwitch+0x2a>
	{
		printf("adc2[1] : %lu\r\n", adc2[1]);
 800eb70:	4d0c      	ldr	r5, [pc, #48]	; (800eba4 <PhotoSwitch+0x50>)
 800eb72:	4628      	mov	r0, r5
 800eb74:	f004 fbac 	bl	80132d0 <iprintf>
	while(adc2[1] < 200)
 800eb78:	6861      	ldr	r1, [r4, #4]
 800eb7a:	29c7      	cmp	r1, #199	; 0xc7
 800eb7c:	d9f9      	bls.n	800eb72 <PhotoSwitch+0x1e>

	}
	HAL_ADC_Stop_DMA(&hadc2);
 800eb7e:	4807      	ldr	r0, [pc, #28]	; (800eb9c <PhotoSwitch+0x48>)
 800eb80:	f000 fa54 	bl	800f02c <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 800eb84:	2100      	movs	r1, #0
 800eb86:	4806      	ldr	r0, [pc, #24]	; (800eba0 <PhotoSwitch+0x4c>)
 800eb88:	f002 fbc0 	bl	801130c <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 800eb8c:	2007      	movs	r0, #7
}
 800eb8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Signal( 7 );
 800eb92:	f7ff bf9d 	b.w	800ead0 <Signal>
 800eb96:	bf00      	nop
 800eb98:	200012c0 	.word	0x200012c0
 800eb9c:	20001da4 	.word	0x20001da4
 800eba0:	20001d24 	.word	0x20001d24
 800eba4:	08016fc4 	.word	0x08016fc4

0800eba8 <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800eba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebac:	4606      	mov	r6, r0
 800ebae:	ed2d 8b04 	vpush	{d8-d9}
 800ebb2:	460f      	mov	r7, r1
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ebb4:	4828      	ldr	r0, [pc, #160]	; (800ec58 <ModeSelect+0xb0>)
	*pMode=min;

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
	gpio_callback_count = 0;
 800ebb6:	4c29      	ldr	r4, [pc, #164]	; (800ec5c <ModeSelect+0xb4>)
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800ebb8:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800ec60 <ModeSelect+0xb8>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800ebbc:	eddf 8a29 	vldr	s17, [pc, #164]	; 800ec64 <ModeSelect+0xbc>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ebc0:	2100      	movs	r1, #0
{
 800ebc2:	4690      	mov	r8, r2
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800ebc4:	f001 ffd2 	bl	8010b6c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800ebc8:	2104      	movs	r1, #4
 800ebca:	4823      	ldr	r0, [pc, #140]	; (800ec58 <ModeSelect+0xb0>)
 800ebcc:	f001 ffce 	bl	8010b6c <HAL_TIM_Encoder_Start>
	TIM3->CNT = INITIAL_PULSE;
 800ebd0:	4a25      	ldr	r2, [pc, #148]	; (800ec68 <ModeSelect+0xc0>)
	*pMode=min;
 800ebd2:	f888 6000 	strb.w	r6, [r8]
	TIM3->CNT = INITIAL_PULSE;
 800ebd6:	f247 552f 	movw	r5, #29999	; 0x752f
	gpio_callback_count = 0;
 800ebda:	2300      	movs	r3, #0
	TIM3->CNT = INITIAL_PULSE;
 800ebdc:	6255      	str	r5, [r2, #36]	; 0x24
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800ebde:	4691      	mov	r9, r2
	gpio_callback_count = 0;
 800ebe0:	6023      	str	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800ebe2:	b9eb      	cbnz	r3, 800ec20 <ModeSelect+0x78>
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800ebe4:	ed99 8a09 	vldr	s16, [r9, #36]	; 0x24
		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800ebe8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800ebec:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800ebf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf4:	db0c      	blt.n	800ec10 <ModeSelect+0x68>
		  	  *pMode += 1;
 800ebf6:	f898 0000 	ldrb.w	r0, [r8]
 800ebfa:	3001      	adds	r0, #1
 800ebfc:	b240      	sxtb	r0, r0
		  		  *pMode = min;
 800ebfe:	42b8      	cmp	r0, r7
 800ec00:	bfc8      	it	gt
 800ec02:	4630      	movgt	r0, r6
 800ec04:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800ec08:	f7ff facc 	bl	800e1a4 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800ec0c:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800ec10:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ec14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec18:	d910      	bls.n	800ec3c <ModeSelect+0x94>
 800ec1a:	6823      	ldr	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d0e1      	beq.n	800ebe4 <ModeSelect+0x3c>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;
		  }
	}
	gpio_callback_count = 0;
 800ec20:	2300      	movs	r3, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800ec22:	4619      	mov	r1, r3
 800ec24:	480c      	ldr	r0, [pc, #48]	; (800ec58 <ModeSelect+0xb0>)
	gpio_callback_count = 0;
 800ec26:	6023      	str	r3, [r4, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800ec28:	f001 ffc4 	bl	8010bb4 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
}
 800ec2c:	ecbd 8b04 	vpop	{d8-d9}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800ec30:	2104      	movs	r1, #4
 800ec32:	4809      	ldr	r0, [pc, #36]	; (800ec58 <ModeSelect+0xb0>)
}
 800ec34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800ec38:	f001 bfbc 	b.w	8010bb4 <HAL_TIM_Encoder_Stop>
		  	  *pMode -= 1;
 800ec3c:	f898 0000 	ldrb.w	r0, [r8]
 800ec40:	3801      	subs	r0, #1
 800ec42:	b240      	sxtb	r0, r0
 800ec44:	42b0      	cmp	r0, r6
 800ec46:	bfb8      	it	lt
 800ec48:	4638      	movlt	r0, r7
 800ec4a:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800ec4e:	f7ff faa9 	bl	800e1a4 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800ec52:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
 800ec56:	e7e0      	b.n	800ec1a <ModeSelect+0x72>
 800ec58:	20001dec 	.word	0x20001dec
 800ec5c:	200014fc 	.word	0x200014fc
 800ec60:	47352f00 	.word	0x47352f00
 800ec64:	4654bc00 	.word	0x4654bc00
 800ec68:	40000400 	.word	0x40000400

0800ec6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ec6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800eca4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ec70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ec72:	e003      	b.n	800ec7c <LoopCopyDataInit>

0800ec74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ec74:	4b0c      	ldr	r3, [pc, #48]	; (800eca8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ec76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ec78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ec7a:	3104      	adds	r1, #4

0800ec7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ec7c:	480b      	ldr	r0, [pc, #44]	; (800ecac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ec7e:	4b0c      	ldr	r3, [pc, #48]	; (800ecb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ec80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ec82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ec84:	d3f6      	bcc.n	800ec74 <CopyDataInit>
  ldr  r2, =_sbss
 800ec86:	4a0b      	ldr	r2, [pc, #44]	; (800ecb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ec88:	e002      	b.n	800ec90 <LoopFillZerobss>

0800ec8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ec8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ec8c:	f842 3b04 	str.w	r3, [r2], #4

0800ec90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ec90:	4b09      	ldr	r3, [pc, #36]	; (800ecb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ec92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ec94:	d3f9      	bcc.n	800ec8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ec96:	f7fe f9fb 	bl	800d090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ec9a:	f002 ff87 	bl	8011bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ec9e:	f7fd fd47 	bl	800c730 <main>
  bx  lr    
 800eca2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800eca4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800eca8:	08017320 	.word	0x08017320
  ldr  r0, =_sdata
 800ecac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ecb0:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800ecb4:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800ecb8:	20002048 	.word	0x20002048

0800ecbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ecbc:	e7fe      	b.n	800ecbc <ADC_IRQHandler>
	...

0800ecc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ecc0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ecc2:	4a0e      	ldr	r2, [pc, #56]	; (800ecfc <HAL_InitTick+0x3c>)
 800ecc4:	4b0e      	ldr	r3, [pc, #56]	; (800ed00 <HAL_InitTick+0x40>)
 800ecc6:	7812      	ldrb	r2, [r2, #0]
 800ecc8:	681b      	ldr	r3, [r3, #0]
{
 800ecca:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800eccc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ecd0:	fbb0 f0f2 	udiv	r0, r0, r2
 800ecd4:	fbb3 f0f0 	udiv	r0, r3, r0
 800ecd8:	f000 fb24 	bl	800f324 <HAL_SYSTICK_Config>
 800ecdc:	b908      	cbnz	r0, 800ece2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ecde:	2d0f      	cmp	r5, #15
 800ece0:	d901      	bls.n	800ece6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800ece2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800ece4:	bd38      	pop	{r3, r4, r5, pc}
 800ece6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ece8:	4602      	mov	r2, r0
 800ecea:	4629      	mov	r1, r5
 800ecec:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf0:	f000 fad4 	bl	800f29c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ecf4:	4b03      	ldr	r3, [pc, #12]	; (800ed04 <HAL_InitTick+0x44>)
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	601d      	str	r5, [r3, #0]
}
 800ecfa:	bd38      	pop	{r3, r4, r5, pc}
 800ecfc:	20000010 	.word	0x20000010
 800ed00:	20000004 	.word	0x20000004
 800ed04:	20000014 	.word	0x20000014

0800ed08 <HAL_Init>:
{
 800ed08:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ed0a:	4b0b      	ldr	r3, [pc, #44]	; (800ed38 <HAL_Init+0x30>)
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed12:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed22:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ed24:	2003      	movs	r0, #3
 800ed26:	f000 faa7 	bl	800f278 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800ed2a:	2000      	movs	r0, #0
 800ed2c:	f7ff ffc8 	bl	800ecc0 <HAL_InitTick>
  HAL_MspInit();
 800ed30:	f7fd ff1a 	bl	800cb68 <HAL_MspInit>
}
 800ed34:	2000      	movs	r0, #0
 800ed36:	bd08      	pop	{r3, pc}
 800ed38:	40023c00 	.word	0x40023c00

0800ed3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800ed3c:	4a03      	ldr	r2, [pc, #12]	; (800ed4c <HAL_IncTick+0x10>)
 800ed3e:	4b04      	ldr	r3, [pc, #16]	; (800ed50 <HAL_IncTick+0x14>)
 800ed40:	6811      	ldr	r1, [r2, #0]
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	440b      	add	r3, r1
 800ed46:	6013      	str	r3, [r2, #0]
}
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	20002020 	.word	0x20002020
 800ed50:	20000010 	.word	0x20000010

0800ed54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ed54:	4b01      	ldr	r3, [pc, #4]	; (800ed5c <HAL_GetTick+0x8>)
 800ed56:	6818      	ldr	r0, [r3, #0]
}
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	20002020 	.word	0x20002020

0800ed60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ed60:	b538      	push	{r3, r4, r5, lr}
 800ed62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ed64:	f7ff fff6 	bl	800ed54 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ed68:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800ed6a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800ed6c:	d002      	beq.n	800ed74 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800ed6e:	4b04      	ldr	r3, [pc, #16]	; (800ed80 <HAL_Delay+0x20>)
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ed74:	f7ff ffee 	bl	800ed54 <HAL_GetTick>
 800ed78:	1b40      	subs	r0, r0, r5
 800ed7a:	42a0      	cmp	r0, r4
 800ed7c:	d3fa      	bcc.n	800ed74 <HAL_Delay+0x14>
  {
  }
}
 800ed7e:	bd38      	pop	{r3, r4, r5, pc}
 800ed80:	20000010 	.word	0x20000010

0800ed84 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800ed84:	2800      	cmp	r0, #0
 800ed86:	f000 8091 	beq.w	800eeac <HAL_ADC_Init+0x128>
{
 800ed8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800ed8c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800ed8e:	4604      	mov	r4, r0
 800ed90:	2d00      	cmp	r5, #0
 800ed92:	f000 8081 	beq.w	800ee98 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ed96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed98:	06db      	lsls	r3, r3, #27
 800ed9a:	d504      	bpl.n	800eda6 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800ed9c:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800ed9e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800eda0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800eda4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800eda6:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800eda8:	494d      	ldr	r1, [pc, #308]	; (800eee0 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800edaa:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800edac:	4d4d      	ldr	r5, [pc, #308]	; (800eee4 <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 800edae:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800edb2:	f022 0202 	bic.w	r2, r2, #2
 800edb6:	f042 0202 	orr.w	r2, r2, #2
 800edba:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800edbc:	684a      	ldr	r2, [r1, #4]
 800edbe:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800edc2:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800edc4:	684a      	ldr	r2, [r1, #4]
 800edc6:	6860      	ldr	r0, [r4, #4]
 800edc8:	4302      	orrs	r2, r0
 800edca:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800edcc:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800edce:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800edd0:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800edd2:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800edd4:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800edd8:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800edda:	685a      	ldr	r2, [r3, #4]
 800eddc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ede0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ede2:	6858      	ldr	r0, [r3, #4]
 800ede4:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800ede8:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800edea:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800edec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800edee:	4339      	orrs	r1, r7
 800edf0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800edf2:	6899      	ldr	r1, [r3, #8]
 800edf4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800edf8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800edfa:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800edfc:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800edfe:	ea42 0206 	orr.w	r2, r2, r6
 800ee02:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ee04:	d054      	beq.n	800eeb0 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ee06:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ee08:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ee0a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800ee0e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ee10:	689a      	ldr	r2, [r3, #8]
 800ee12:	4310      	orrs	r0, r2
 800ee14:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ee16:	6899      	ldr	r1, [r3, #8]
 800ee18:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800ee1c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ee1e:	689a      	ldr	r2, [r3, #8]
 800ee20:	432a      	orrs	r2, r5
 800ee22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ee24:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ee26:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ee28:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ee2c:	f021 0102 	bic.w	r1, r1, #2
 800ee30:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ee32:	689a      	ldr	r2, [r3, #8]
 800ee34:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800ee38:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ee3a:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d140      	bne.n	800eec2 <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ee40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ee44:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ee46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ee48:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ee4a:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ee4e:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ee50:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ee54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ee56:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ee58:	3d01      	subs	r5, #1
 800ee5a:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 800ee5e:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ee60:	6898      	ldr	r0, [r3, #8]
 800ee62:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800ee66:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ee68:	6899      	ldr	r1, [r3, #8]
 800ee6a:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 800ee6e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ee70:	6899      	ldr	r1, [r3, #8]
 800ee72:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800ee76:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ee78:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800ee7a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ee7c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800ee80:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800ee82:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800ee84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee86:	f023 0303 	bic.w	r3, r3, #3
 800ee8a:	f043 0301 	orr.w	r3, r3, #1
 800ee8e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800ee90:	2300      	movs	r3, #0
 800ee92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ee96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800ee98:	f7fd fe82 	bl	800cba0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800ee9c:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ee9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800eea0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800eea4:	06db      	lsls	r3, r3, #27
 800eea6:	f53f af79 	bmi.w	800ed9c <HAL_ADC_Init+0x18>
 800eeaa:	e77c      	b.n	800eda6 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 800eeac:	2001      	movs	r0, #1
}
 800eeae:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800eeb0:	689a      	ldr	r2, [r3, #8]
 800eeb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800eeb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800eeb8:	689a      	ldr	r2, [r3, #8]
 800eeba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800eebe:	609a      	str	r2, [r3, #8]
 800eec0:	e7b0      	b.n	800ee24 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800eec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800eec6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800eec8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800eeca:	685a      	ldr	r2, [r3, #4]
 800eecc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800eed0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800eed2:	685a      	ldr	r2, [r3, #4]
 800eed4:	3901      	subs	r1, #1
 800eed6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800eeda:	605a      	str	r2, [r3, #4]
 800eedc:	e7b3      	b.n	800ee46 <HAL_ADC_Init+0xc2>
 800eede:	bf00      	nop
 800eee0:	40012300 	.word	0x40012300
 800eee4:	0f000001 	.word	0x0f000001

0800eee8 <HAL_ADC_Start_DMA>:
{
 800eee8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800eeea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800eeee:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 800eef0:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 800eef2:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800eef4:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 800eef6:	f000 8081 	beq.w	800effc <HAL_ADC_Start_DMA+0x114>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800eefa:	6805      	ldr	r5, [r0, #0]
 800eefc:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 800eefe:	2401      	movs	r4, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ef00:	07df      	lsls	r7, r3, #31
  __HAL_LOCK(hadc);
 800ef02:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ef06:	d414      	bmi.n	800ef32 <HAL_ADC_Start_DMA+0x4a>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ef08:	4b40      	ldr	r3, [pc, #256]	; (800f00c <HAL_ADC_Start_DMA+0x124>)
 800ef0a:	4e41      	ldr	r6, [pc, #260]	; (800f010 <HAL_ADC_Start_DMA+0x128>)
 800ef0c:	681c      	ldr	r4, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800ef0e:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ef10:	fba6 6404 	umull	r6, r4, r6, r4
 800ef14:	0ca4      	lsrs	r4, r4, #18
    __HAL_ADC_ENABLE(hadc);
 800ef16:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ef1a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    __HAL_ADC_ENABLE(hadc);
 800ef1e:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ef20:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800ef22:	9b01      	ldr	r3, [sp, #4]
 800ef24:	b12b      	cbz	r3, 800ef32 <HAL_ADC_Start_DMA+0x4a>
      counter--;
 800ef26:	9c01      	ldr	r4, [sp, #4]
 800ef28:	3c01      	subs	r4, #1
 800ef2a:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800ef2c:	9c01      	ldr	r4, [sp, #4]
 800ef2e:	2c00      	cmp	r4, #0
 800ef30:	d1f9      	bne.n	800ef26 <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800ef32:	68ab      	ldr	r3, [r5, #8]
 800ef34:	07de      	lsls	r6, r3, #31
 800ef36:	d543      	bpl.n	800efc0 <HAL_ADC_Start_DMA+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 800ef38:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800ef3a:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800ef3e:	f024 0401 	bic.w	r4, r4, #1
 800ef42:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800ef46:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800ef48:	686b      	ldr	r3, [r5, #4]
 800ef4a:	055c      	lsls	r4, r3, #21
 800ef4c:	d505      	bpl.n	800ef5a <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800ef4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ef50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ef54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ef58:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ef5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ef5c:	4e2d      	ldr	r6, [pc, #180]	; (800f014 <HAL_ADC_Start_DMA+0x12c>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ef5e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800ef62:	bf1c      	itt	ne
 800ef64:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800ef66:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800ef6a:	6443      	str	r3, [r0, #68]	; 0x44
 800ef6c:	4604      	mov	r4, r0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ef6e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ef70:	4613      	mov	r3, r2
    __HAL_UNLOCK(hadc);   
 800ef72:	2700      	movs	r7, #0
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ef74:	4a28      	ldr	r2, [pc, #160]	; (800f018 <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 800ef76:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ef7a:	63c6      	str	r6, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ef7c:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ef7e:	4e27      	ldr	r6, [pc, #156]	; (800f01c <HAL_ADC_Start_DMA+0x134>)
 800ef80:	64c6      	str	r6, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800ef82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800ef86:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ef88:	686e      	ldr	r6, [r5, #4]
 800ef8a:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
 800ef8e:	606e      	str	r6, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800ef90:	68ae      	ldr	r6, [r5, #8]
 800ef92:	f446 7680 	orr.w	r6, r6, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ef96:	460a      	mov	r2, r1
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800ef98:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ef9a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800ef9e:	f000 fa75 	bl	800f48c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800efa2:	4b1f      	ldr	r3, [pc, #124]	; (800f020 <HAL_ADC_Start_DMA+0x138>)
 800efa4:	685a      	ldr	r2, [r3, #4]
 800efa6:	06d2      	lsls	r2, r2, #27
 800efa8:	d10d      	bne.n	800efc6 <HAL_ADC_Start_DMA+0xde>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800efaa:	6822      	ldr	r2, [r4, #0]
 800efac:	491d      	ldr	r1, [pc, #116]	; (800f024 <HAL_ADC_Start_DMA+0x13c>)
 800efae:	428a      	cmp	r2, r1
 800efb0:	d01b      	beq.n	800efea <HAL_ADC_Start_DMA+0x102>
 800efb2:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800efb6:	428a      	cmp	r2, r1
 800efb8:	d023      	beq.n	800f002 <HAL_ADC_Start_DMA+0x11a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800efba:	491b      	ldr	r1, [pc, #108]	; (800f028 <HAL_ADC_Start_DMA+0x140>)
 800efbc:	428a      	cmp	r2, r1
 800efbe:	d00f      	beq.n	800efe0 <HAL_ADC_Start_DMA+0xf8>
  return HAL_OK;
 800efc0:	2000      	movs	r0, #0
}
 800efc2:	b003      	add	sp, #12
 800efc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800efc6:	6823      	ldr	r3, [r4, #0]
 800efc8:	4a16      	ldr	r2, [pc, #88]	; (800f024 <HAL_ADC_Start_DMA+0x13c>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d1f8      	bne.n	800efc0 <HAL_ADC_Start_DMA+0xd8>
 800efce:	6898      	ldr	r0, [r3, #8]
 800efd0:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800efd4:	d1f4      	bne.n	800efc0 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800efd6:	689a      	ldr	r2, [r3, #8]
 800efd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800efdc:	609a      	str	r2, [r3, #8]
 800efde:	e7f0      	b.n	800efc2 <HAL_ADC_Start_DMA+0xda>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800efe0:	685b      	ldr	r3, [r3, #4]
 800efe2:	f003 031f 	and.w	r3, r3, #31
 800efe6:	2b0f      	cmp	r3, #15
 800efe8:	d8ea      	bhi.n	800efc0 <HAL_ADC_Start_DMA+0xd8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800efea:	6890      	ldr	r0, [r2, #8]
 800efec:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800eff0:	d1e6      	bne.n	800efc0 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800eff2:	6893      	ldr	r3, [r2, #8]
 800eff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eff8:	6093      	str	r3, [r2, #8]
 800effa:	e7e2      	b.n	800efc2 <HAL_ADC_Start_DMA+0xda>
  __HAL_LOCK(hadc);
 800effc:	2002      	movs	r0, #2
}
 800effe:	b003      	add	sp, #12
 800f000:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	06db      	lsls	r3, r3, #27
 800f006:	d0f0      	beq.n	800efea <HAL_ADC_Start_DMA+0x102>
 800f008:	e7da      	b.n	800efc0 <HAL_ADC_Start_DMA+0xd8>
 800f00a:	bf00      	nop
 800f00c:	20000004 	.word	0x20000004
 800f010:	431bde83 	.word	0x431bde83
 800f014:	0800f0bd 	.word	0x0800f0bd
 800f018:	0800f095 	.word	0x0800f095
 800f01c:	0800f0a5 	.word	0x0800f0a5
 800f020:	40012300 	.word	0x40012300
 800f024:	40012000 	.word	0x40012000
 800f028:	40012200 	.word	0x40012200

0800f02c <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800f02c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f030:	2b01      	cmp	r3, #1
 800f032:	d029      	beq.n	800f088 <HAL_ADC_Stop_DMA+0x5c>
  __HAL_ADC_DISABLE(hadc);
 800f034:	6803      	ldr	r3, [r0, #0]
 800f036:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800f038:	2101      	movs	r1, #1
  __HAL_ADC_DISABLE(hadc);
 800f03a:	f022 0201 	bic.w	r2, r2, #1
{
 800f03e:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800f040:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800f044:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800f046:	689a      	ldr	r2, [r3, #8]
 800f048:	07d2      	lsls	r2, r2, #31
 800f04a:	4604      	mov	r4, r0
 800f04c:	d504      	bpl.n	800f058 <HAL_ADC_Stop_DMA+0x2c>
  __HAL_UNLOCK(hadc);
 800f04e:	2300      	movs	r3, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f050:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800f052:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f056:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800f058:	689a      	ldr	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800f05a:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800f05c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f060:	609a      	str	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800f062:	f000 fa51 	bl	800f508 <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800f066:	6822      	ldr	r2, [r4, #0]
 800f068:	6853      	ldr	r3, [r2, #4]
 800f06a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f06e:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800f070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f072:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f076:	f023 0301 	bic.w	r3, r3, #1
 800f07a:	f043 0301 	orr.w	r3, r3, #1
 800f07e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800f080:	2300      	movs	r3, #0
 800f082:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f086:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800f088:	2002      	movs	r0, #2
}
 800f08a:	4770      	bx	lr

0800f08c <HAL_ADC_ConvCpltCallback>:
 800f08c:	4770      	bx	lr
 800f08e:	bf00      	nop

0800f090 <HAL_ADC_ConvHalfCpltCallback>:
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop

0800f094 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f094:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f096:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f098:	f7ff fffa 	bl	800f090 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f09c:	bd08      	pop	{r3, pc}
 800f09e:	bf00      	nop

0800f0a0 <HAL_ADC_ErrorCallback>:
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop

0800f0a4 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f0a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800f0a6:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800f0a8:	2340      	movs	r3, #64	; 0x40
 800f0aa:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800f0ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f0ae:	f043 0304 	orr.w	r3, r3, #4
 800f0b2:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f0b4:	f7ff fff4 	bl	800f0a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f0b8:	bd08      	pop	{r3, pc}
 800f0ba:	bf00      	nop

0800f0bc <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f0bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f0be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0c0:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800f0c4:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f0c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f0c8:	d123      	bne.n	800f112 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f0ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f0ce:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f0d0:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f0d2:	688a      	ldr	r2, [r1, #8]
 800f0d4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800f0d8:	d117      	bne.n	800f10a <ADC_DMAConvCplt+0x4e>
 800f0da:	7e1a      	ldrb	r2, [r3, #24]
 800f0dc:	b9aa      	cbnz	r2, 800f10a <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f0de:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f0e0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800f0e4:	d002      	beq.n	800f0ec <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f0e6:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f0e8:	0550      	lsls	r0, r2, #21
 800f0ea:	d40e      	bmi.n	800f10a <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f0ec:	684a      	ldr	r2, [r1, #4]
 800f0ee:	f022 0220 	bic.w	r2, r2, #32
 800f0f2:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800f0f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f0fa:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f0fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0fe:	04d1      	lsls	r1, r2, #19
 800f100:	d403      	bmi.n	800f10a <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f104:	f042 0201 	orr.w	r2, r2, #1
 800f108:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7ff ffbe 	bl	800f08c <HAL_ADC_ConvCpltCallback>
}
 800f110:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800f112:	06d2      	lsls	r2, r2, #27
 800f114:	d404      	bmi.n	800f120 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800f118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f11c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f11e:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff ffbd 	bl	800f0a0 <HAL_ADC_ErrorCallback>
}
 800f126:	bd10      	pop	{r4, pc}

0800f128 <HAL_ADC_ConfigChannel>:
{
 800f128:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800f12a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800f12e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800f130:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800f132:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800f134:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800f136:	f000 8095 	beq.w	800f264 <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f13a:	680d      	ldr	r5, [r1, #0]
 800f13c:	688a      	ldr	r2, [r1, #8]
 800f13e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800f140:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f142:	2d09      	cmp	r5, #9
 800f144:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 800f146:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f14a:	d829      	bhi.n	800f1a0 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800f14c:	691c      	ldr	r4, [r3, #16]
 800f14e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800f152:	f04f 0c07 	mov.w	ip, #7
 800f156:	fa0c fc06 	lsl.w	ip, ip, r6
 800f15a:	ea24 040c 	bic.w	r4, r4, ip
 800f15e:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800f160:	691c      	ldr	r4, [r3, #16]
 800f162:	fa02 f606 	lsl.w	r6, r2, r6
 800f166:	4326      	orrs	r6, r4
 800f168:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 800f16a:	684e      	ldr	r6, [r1, #4]
 800f16c:	2e06      	cmp	r6, #6
 800f16e:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800f172:	d82a      	bhi.n	800f1ca <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800f174:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f176:	3a05      	subs	r2, #5
 800f178:	241f      	movs	r4, #31
 800f17a:	4094      	lsls	r4, r2
 800f17c:	ea21 0104 	bic.w	r1, r1, r4
 800f180:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800f182:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f184:	fa07 f202 	lsl.w	r2, r7, r2
 800f188:	430a      	orrs	r2, r1
 800f18a:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f18c:	4a37      	ldr	r2, [pc, #220]	; (800f26c <HAL_ADC_ConfigChannel+0x144>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d02d      	beq.n	800f1ee <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 800f192:	2300      	movs	r3, #0
 800f194:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800f198:	4618      	mov	r0, r3
}
 800f19a:	b002      	add	sp, #8
 800f19c:	bcf0      	pop	{r4, r5, r6, r7}
 800f19e:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800f1a0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800f1a4:	68dc      	ldr	r4, [r3, #12]
 800f1a6:	3e1e      	subs	r6, #30
 800f1a8:	f04f 0c07 	mov.w	ip, #7
 800f1ac:	fa0c fc06 	lsl.w	ip, ip, r6
 800f1b0:	ea24 040c 	bic.w	r4, r4, ip
 800f1b4:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800f1b6:	68dc      	ldr	r4, [r3, #12]
 800f1b8:	fa02 f606 	lsl.w	r6, r2, r6
 800f1bc:	4326      	orrs	r6, r4
 800f1be:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 800f1c0:	684e      	ldr	r6, [r1, #4]
 800f1c2:	2e06      	cmp	r6, #6
 800f1c4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800f1c8:	d9d4      	bls.n	800f174 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800f1ca:	2e0c      	cmp	r6, #12
 800f1cc:	d835      	bhi.n	800f23a <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800f1ce:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800f1d2:	211f      	movs	r1, #31
 800f1d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1d6:	40a1      	lsls	r1, r4
 800f1d8:	ea22 0201 	bic.w	r2, r2, r1
 800f1dc:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f1de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f1e0:	fa07 f204 	lsl.w	r2, r7, r4
 800f1e4:	430a      	orrs	r2, r1
 800f1e6:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f1e8:	4a20      	ldr	r2, [pc, #128]	; (800f26c <HAL_ADC_ConfigChannel+0x144>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d1d1      	bne.n	800f192 <HAL_ADC_ConfigChannel+0x6a>
 800f1ee:	2d12      	cmp	r5, #18
 800f1f0:	d031      	beq.n	800f256 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800f1f2:	f1a5 0310 	sub.w	r3, r5, #16
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d8cb      	bhi.n	800f192 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f1fa:	4a1d      	ldr	r2, [pc, #116]	; (800f270 <HAL_ADC_ConfigChannel+0x148>)
 800f1fc:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800f1fe:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f200:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f204:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800f206:	d1c4      	bne.n	800f192 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800f208:	4b1a      	ldr	r3, [pc, #104]	; (800f274 <HAL_ADC_ConfigChannel+0x14c>)
 800f20a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800f20e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f202 3283 	addw	r2, r2, #899	; 0x383
 800f218:	fba2 2303 	umull	r2, r3, r2, r3
 800f21c:	0c9b      	lsrs	r3, r3, #18
 800f21e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800f226:	9b01      	ldr	r3, [sp, #4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d0b2      	beq.n	800f192 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800f22c:	9b01      	ldr	r3, [sp, #4]
 800f22e:	3b01      	subs	r3, #1
 800f230:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800f232:	9b01      	ldr	r3, [sp, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d1f9      	bne.n	800f22c <HAL_ADC_ConfigChannel+0x104>
 800f238:	e7ab      	b.n	800f192 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800f23a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800f23e:	241f      	movs	r4, #31
 800f240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f242:	408c      	lsls	r4, r1
 800f244:	ea22 0204 	bic.w	r2, r2, r4
 800f248:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800f24a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f24c:	fa07 f201 	lsl.w	r2, r7, r1
 800f250:	4322      	orrs	r2, r4
 800f252:	62da      	str	r2, [r3, #44]	; 0x2c
 800f254:	e79a      	b.n	800f18c <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800f256:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800f25a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f25e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 800f262:	e796      	b.n	800f192 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800f264:	2002      	movs	r0, #2
}
 800f266:	b002      	add	sp, #8
 800f268:	bcf0      	pop	{r4, r5, r6, r7}
 800f26a:	4770      	bx	lr
 800f26c:	40012000 	.word	0x40012000
 800f270:	40012300 	.word	0x40012300
 800f274:	20000004 	.word	0x20000004

0800f278 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f278:	4a07      	ldr	r2, [pc, #28]	; (800f298 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800f27a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f27c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800f280:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f282:	0200      	lsls	r0, r0, #8
 800f284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f288:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800f28c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800f290:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800f292:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	e000ed00 	.word	0xe000ed00

0800f29c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f29c:	4b18      	ldr	r3, [pc, #96]	; (800f300 <HAL_NVIC_SetPriority+0x64>)
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f2a4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f2a6:	f1c3 0507 	rsb	r5, r3, #7
 800f2aa:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f2ac:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f2b0:	bf28      	it	cs
 800f2b2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f2b4:	2c06      	cmp	r4, #6
 800f2b6:	d919      	bls.n	800f2ec <HAL_NVIC_SetPriority+0x50>
 800f2b8:	3b03      	subs	r3, #3
 800f2ba:	f04f 34ff 	mov.w	r4, #4294967295
 800f2be:	409c      	lsls	r4, r3
 800f2c0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2c8:	40aa      	lsls	r2, r5
 800f2ca:	ea21 0102 	bic.w	r1, r1, r2
 800f2ce:	fa01 f203 	lsl.w	r2, r1, r3
 800f2d2:	4322      	orrs	r2, r4
 800f2d4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	b2d2      	uxtb	r2, r2
 800f2da:	db0a      	blt.n	800f2f2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800f2e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800f2e4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800f2e8:	bc30      	pop	{r4, r5}
 800f2ea:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f2ec:	2400      	movs	r4, #0
 800f2ee:	4623      	mov	r3, r4
 800f2f0:	e7e8      	b.n	800f2c4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2f2:	4b04      	ldr	r3, [pc, #16]	; (800f304 <HAL_NVIC_SetPriority+0x68>)
 800f2f4:	f000 000f 	and.w	r0, r0, #15
 800f2f8:	4403      	add	r3, r0
 800f2fa:	761a      	strb	r2, [r3, #24]
 800f2fc:	bc30      	pop	{r4, r5}
 800f2fe:	4770      	bx	lr
 800f300:	e000ed00 	.word	0xe000ed00
 800f304:	e000ecfc 	.word	0xe000ecfc

0800f308 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800f308:	2800      	cmp	r0, #0
 800f30a:	db07      	blt.n	800f31c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f30c:	f000 011f 	and.w	r1, r0, #31
 800f310:	2301      	movs	r3, #1
 800f312:	0940      	lsrs	r0, r0, #5
 800f314:	4a02      	ldr	r2, [pc, #8]	; (800f320 <HAL_NVIC_EnableIRQ+0x18>)
 800f316:	408b      	lsls	r3, r1
 800f318:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f31c:	4770      	bx	lr
 800f31e:	bf00      	nop
 800f320:	e000e100 	.word	0xe000e100

0800f324 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f324:	3801      	subs	r0, #1
 800f326:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800f32a:	d20e      	bcs.n	800f34a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f32c:	4b08      	ldr	r3, [pc, #32]	; (800f350 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f32e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f330:	4c08      	ldr	r4, [pc, #32]	; (800f354 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f332:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f334:	20f0      	movs	r0, #240	; 0xf0
 800f336:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f33a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f33c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f33e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f342:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800f344:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f348:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800f34a:	2001      	movs	r0, #1
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	e000e010 	.word	0xe000e010
 800f354:	e000ed00 	.word	0xe000ed00

0800f358 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f35a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800f35c:	f7ff fcfa 	bl	800ed54 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f360:	2c00      	cmp	r4, #0
 800f362:	d054      	beq.n	800f40e <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f364:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f366:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800f368:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800f36c:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800f36e:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 800f370:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 800f374:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800f378:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800f37a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f37c:	e005      	b.n	800f38a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f37e:	f7ff fce9 	bl	800ed54 <HAL_GetTick>
 800f382:	1b40      	subs	r0, r0, r5
 800f384:	2805      	cmp	r0, #5
 800f386:	d83b      	bhi.n	800f400 <HAL_DMA_Init+0xa8>
 800f388:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	07d1      	lsls	r1, r2, #31
 800f38e:	d4f6      	bmi.n	800f37e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f390:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f394:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f398:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f39a:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 800f39c:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f39e:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f3a0:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f3a4:	430a      	orrs	r2, r1
 800f3a6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800f3a8:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f3aa:	4835      	ldr	r0, [pc, #212]	; (800f480 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f3ac:	4332      	orrs	r2, r6
 800f3ae:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800f3b0:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f3b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f3b4:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f3b6:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f3b8:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f3bc:	d029      	beq.n	800f412 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f3be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f3c0:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f3c2:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f3c6:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f3c8:	b2da      	uxtb	r2, r3
 800f3ca:	482e      	ldr	r0, [pc, #184]	; (800f484 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800f3cc:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f3ce:	3a10      	subs	r2, #16
 800f3d0:	fba0 1202 	umull	r1, r2, r0, r2
 800f3d4:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f3d6:	492c      	ldr	r1, [pc, #176]	; (800f488 <HAL_DMA_Init+0x130>)
 800f3d8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f3dc:	5c89      	ldrb	r1, [r1, r2]
 800f3de:	65e1      	str	r1, [r4, #92]	; 0x5c
 800f3e0:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 800f3e4:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f3e6:	bf88      	it	hi
 800f3e8:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f3ea:	223f      	movs	r2, #63	; 0x3f
 800f3ec:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800f3ee:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f3f0:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f3f2:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 800f3f4:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f3f6:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f3f8:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800f3fa:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800f3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f400:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f402:	2220      	movs	r2, #32
 800f404:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800f406:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f408:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800f40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800f40e:	2001      	movs	r0, #1
}
 800f410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f412:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 800f416:	4301      	orrs	r1, r0
 800f418:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 800f41a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 800f41c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800f41e:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800f420:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f424:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 800f428:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d0cc      	beq.n	800f3c8 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f42e:	b17e      	cbz	r6, 800f450 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f430:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800f434:	d016      	beq.n	800f464 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f436:	2d02      	cmp	r5, #2
 800f438:	d903      	bls.n	800f442 <HAL_DMA_Init+0xea>
 800f43a:	2d03      	cmp	r5, #3
 800f43c:	d1c4      	bne.n	800f3c8 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f43e:	01c2      	lsls	r2, r0, #7
 800f440:	d5c2      	bpl.n	800f3c8 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800f442:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f444:	2240      	movs	r2, #64	; 0x40
 800f446:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 800f448:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 800f44a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800f44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800f450:	2d01      	cmp	r5, #1
 800f452:	d003      	beq.n	800f45c <HAL_DMA_Init+0x104>
 800f454:	d3f3      	bcc.n	800f43e <HAL_DMA_Init+0xe6>
 800f456:	2d02      	cmp	r5, #2
 800f458:	d1b6      	bne.n	800f3c8 <HAL_DMA_Init+0x70>
 800f45a:	e7f0      	b.n	800f43e <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f45c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800f460:	d1b2      	bne.n	800f3c8 <HAL_DMA_Init+0x70>
 800f462:	e7ee      	b.n	800f442 <HAL_DMA_Init+0xea>
    switch (tmp)
 800f464:	2d03      	cmp	r5, #3
 800f466:	d8af      	bhi.n	800f3c8 <HAL_DMA_Init+0x70>
 800f468:	a201      	add	r2, pc, #4	; (adr r2, 800f470 <HAL_DMA_Init+0x118>)
 800f46a:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800f46e:	bf00      	nop
 800f470:	0800f443 	.word	0x0800f443
 800f474:	0800f43f 	.word	0x0800f43f
 800f478:	0800f443 	.word	0x0800f443
 800f47c:	0800f45d 	.word	0x0800f45d
 800f480:	f010803f 	.word	0xf010803f
 800f484:	aaaaaaab 	.word	0xaaaaaaab
 800f488:	08016fd4 	.word	0x08016fd4

0800f48c <HAL_DMA_Start_IT>:
{
 800f48c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800f48e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800f492:	2c01      	cmp	r4, #1
 800f494:	d035      	beq.n	800f502 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 800f496:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f49a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800f49c:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800f49e:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800f4a0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800f4a4:	d127      	bne.n	800f4f6 <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f4a6:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800f4a8:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f4aa:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800f4ac:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f4b0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f4b2:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f4b4:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f4b6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f4ba:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f4bc:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800f4be:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 800f4c0:	bf0a      	itet	eq
 800f4c2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800f4c4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800f4c6:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f4c8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800f4ca:	bf18      	it	ne
 800f4cc:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f4ce:	233f      	movs	r3, #63	; 0x3f
 800f4d0:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 800f4d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f4d4:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f4d6:	6823      	ldr	r3, [r4, #0]
 800f4d8:	f043 0316 	orr.w	r3, r3, #22
 800f4dc:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800f4de:	b11a      	cbz	r2, 800f4e8 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 800f4e0:	6823      	ldr	r3, [r4, #0]
 800f4e2:	f043 0308 	orr.w	r3, r3, #8
 800f4e6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800f4e8:	6823      	ldr	r3, [r4, #0]
 800f4ea:	f043 0301 	orr.w	r3, r3, #1
 800f4ee:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f4f0:	2000      	movs	r0, #0
}
 800f4f2:	bcf0      	pop	{r4, r5, r6, r7}
 800f4f4:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 800f4fc:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800f4fe:	2002      	movs	r0, #2
}
 800f500:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800f502:	2002      	movs	r0, #2
}
 800f504:	bcf0      	pop	{r4, r5, r6, r7}
 800f506:	4770      	bx	lr

0800f508 <HAL_DMA_Abort>:
{
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f50c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800f50e:	f7ff fc21 	bl	800ed54 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f512:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800f516:	2b02      	cmp	r3, #2
 800f518:	d006      	beq.n	800f528 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f51a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800f51c:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f51e:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800f520:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800f524:	2001      	movs	r0, #1
}
 800f526:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f528:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f52a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	f022 0216 	bic.w	r2, r2, #22
 800f532:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f534:	695a      	ldr	r2, [r3, #20]
 800f536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f53a:	4605      	mov	r5, r0
 800f53c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f53e:	b331      	cbz	r1, 800f58e <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	f022 0208 	bic.w	r2, r2, #8
 800f546:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	f022 0201 	bic.w	r2, r2, #1
 800f54e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f550:	e005      	b.n	800f55e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f552:	f7ff fbff 	bl	800ed54 <HAL_GetTick>
 800f556:	1b40      	subs	r0, r0, r5
 800f558:	2805      	cmp	r0, #5
 800f55a:	d80f      	bhi.n	800f57c <HAL_DMA_Abort+0x74>
 800f55c:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f013 0301 	ands.w	r3, r3, #1
 800f564:	d1f5      	bne.n	800f552 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f566:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f568:	223f      	movs	r2, #63	; 0x3f
 800f56a:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800f56c:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f56e:	60b2      	str	r2, [r6, #8]
  return HAL_OK;
 800f570:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 800f572:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800f576:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800f57a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f57c:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 800f57e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f580:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f582:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800f584:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f588:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800f58c:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f58e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f590:	2a00      	cmp	r2, #0
 800f592:	d1d5      	bne.n	800f540 <HAL_DMA_Abort+0x38>
 800f594:	e7d8      	b.n	800f548 <HAL_DMA_Abort+0x40>
 800f596:	bf00      	nop

0800f598 <HAL_DMA_IRQHandler>:
{
 800f598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f59a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800f59c:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f59e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 800f5a0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5a2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800f5a4:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f5a6:	4965      	ldr	r1, [pc, #404]	; (800f73c <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5a8:	2208      	movs	r2, #8
 800f5aa:	409a      	lsls	r2, r3
 800f5ac:	422a      	tst	r2, r5
{
 800f5ae:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800f5b0:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5b2:	d003      	beq.n	800f5bc <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f5b4:	6801      	ldr	r1, [r0, #0]
 800f5b6:	6808      	ldr	r0, [r1, #0]
 800f5b8:	0740      	lsls	r0, r0, #29
 800f5ba:	d459      	bmi.n	800f670 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5bc:	2201      	movs	r2, #1
 800f5be:	409a      	lsls	r2, r3
 800f5c0:	422a      	tst	r2, r5
 800f5c2:	d003      	beq.n	800f5cc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f5c4:	6821      	ldr	r1, [r4, #0]
 800f5c6:	6949      	ldr	r1, [r1, #20]
 800f5c8:	0608      	lsls	r0, r1, #24
 800f5ca:	d474      	bmi.n	800f6b6 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5cc:	2204      	movs	r2, #4
 800f5ce:	409a      	lsls	r2, r3
 800f5d0:	422a      	tst	r2, r5
 800f5d2:	d003      	beq.n	800f5dc <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f5d4:	6821      	ldr	r1, [r4, #0]
 800f5d6:	6809      	ldr	r1, [r1, #0]
 800f5d8:	0789      	lsls	r1, r1, #30
 800f5da:	d466      	bmi.n	800f6aa <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f5dc:	2210      	movs	r2, #16
 800f5de:	409a      	lsls	r2, r3
 800f5e0:	422a      	tst	r2, r5
 800f5e2:	d003      	beq.n	800f5ec <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f5e4:	6821      	ldr	r1, [r4, #0]
 800f5e6:	6808      	ldr	r0, [r1, #0]
 800f5e8:	0700      	lsls	r0, r0, #28
 800f5ea:	d44b      	bmi.n	800f684 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f5ec:	2220      	movs	r2, #32
 800f5ee:	409a      	lsls	r2, r3
 800f5f0:	422a      	tst	r2, r5
 800f5f2:	d014      	beq.n	800f61e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f5f4:	6821      	ldr	r1, [r4, #0]
 800f5f6:	6808      	ldr	r0, [r1, #0]
 800f5f8:	06c0      	lsls	r0, r0, #27
 800f5fa:	d510      	bpl.n	800f61e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f5fc:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f5fe:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800f602:	2a05      	cmp	r2, #5
 800f604:	d063      	beq.n	800f6ce <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f606:	680b      	ldr	r3, [r1, #0]
 800f608:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f60c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f60e:	d07e      	beq.n	800f70e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f610:	0319      	lsls	r1, r3, #12
 800f612:	f140 8089 	bpl.w	800f728 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800f616:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f618:	b10b      	cbz	r3, 800f61e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800f61a:	4620      	mov	r0, r4
 800f61c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f61e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f620:	b323      	cbz	r3, 800f66c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f622:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f624:	07da      	lsls	r2, r3, #31
 800f626:	d51a      	bpl.n	800f65e <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 800f628:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800f62a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800f62c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800f630:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f632:	4943      	ldr	r1, [pc, #268]	; (800f740 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 800f634:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800f638:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800f63c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f63e:	0ab6      	lsrs	r6, r6, #10
 800f640:	e002      	b.n	800f648 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f642:	6813      	ldr	r3, [r2, #0]
 800f644:	07db      	lsls	r3, r3, #31
 800f646:	d504      	bpl.n	800f652 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 800f648:	9b01      	ldr	r3, [sp, #4]
 800f64a:	3301      	adds	r3, #1
 800f64c:	42b3      	cmp	r3, r6
 800f64e:	9301      	str	r3, [sp, #4]
 800f650:	d9f7      	bls.n	800f642 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800f652:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800f654:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800f656:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800f65a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800f65e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f660:	b123      	cbz	r3, 800f66c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800f662:	4620      	mov	r0, r4
}
 800f664:	b003      	add	sp, #12
 800f666:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800f66a:	4718      	bx	r3
}
 800f66c:	b003      	add	sp, #12
 800f66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f670:	6808      	ldr	r0, [r1, #0]
 800f672:	f020 0004 	bic.w	r0, r0, #4
 800f676:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f678:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f67a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f67c:	f042 0201 	orr.w	r2, r2, #1
 800f680:	6562      	str	r2, [r4, #84]	; 0x54
 800f682:	e79b      	b.n	800f5bc <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f684:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f686:	680a      	ldr	r2, [r1, #0]
 800f688:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f68c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f68e:	d118      	bne.n	800f6c2 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f690:	05d2      	lsls	r2, r2, #23
 800f692:	d403      	bmi.n	800f69c <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f694:	680a      	ldr	r2, [r1, #0]
 800f696:	f022 0208 	bic.w	r2, r2, #8
 800f69a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800f69c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f69e:	2a00      	cmp	r2, #0
 800f6a0:	d0a4      	beq.n	800f5ec <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	4790      	blx	r2
 800f6a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f6a8:	e7a0      	b.n	800f5ec <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f6aa:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f6ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f6ae:	f042 0204 	orr.w	r2, r2, #4
 800f6b2:	6562      	str	r2, [r4, #84]	; 0x54
 800f6b4:	e792      	b.n	800f5dc <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f6b6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f6b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f6ba:	f042 0202 	orr.w	r2, r2, #2
 800f6be:	6562      	str	r2, [r4, #84]	; 0x54
 800f6c0:	e784      	b.n	800f5cc <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f6c2:	0311      	lsls	r1, r2, #12
 800f6c4:	d5ea      	bpl.n	800f69c <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f6c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f6c8:	2a00      	cmp	r2, #0
 800f6ca:	d1ea      	bne.n	800f6a2 <HAL_DMA_IRQHandler+0x10a>
 800f6cc:	e78e      	b.n	800f5ec <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f6ce:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f6d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f6d2:	f022 0216 	bic.w	r2, r2, #22
 800f6d6:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f6d8:	694a      	ldr	r2, [r1, #20]
 800f6da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f6de:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f6e0:	b338      	cbz	r0, 800f732 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f6e2:	680a      	ldr	r2, [r1, #0]
 800f6e4:	f022 0208 	bic.w	r2, r2, #8
 800f6e8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f6ea:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800f6ec:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f6ee:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800f6f2:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 800f6f4:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f6f6:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800f6f8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800f6fc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800f700:	2900      	cmp	r1, #0
 800f702:	d0b3      	beq.n	800f66c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800f704:	4620      	mov	r0, r4
}
 800f706:	b003      	add	sp, #12
 800f708:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800f70c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f70e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800f712:	d180      	bne.n	800f616 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f714:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800f716:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f718:	f022 0210 	bic.w	r2, r2, #16
 800f71c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800f71e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800f722:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800f726:	e776      	b.n	800f616 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 800f728:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f47f af75 	bne.w	800f61a <HAL_DMA_IRQHandler+0x82>
 800f730:	e775      	b.n	800f61e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f732:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f734:	2a00      	cmp	r2, #0
 800f736:	d1d4      	bne.n	800f6e2 <HAL_DMA_IRQHandler+0x14a>
 800f738:	e7d7      	b.n	800f6ea <HAL_DMA_IRQHandler+0x152>
 800f73a:	bf00      	nop
 800f73c:	20000004 	.word	0x20000004
 800f740:	1b4e81b5 	.word	0x1b4e81b5

0800f744 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800f744:	4b1b      	ldr	r3, [pc, #108]	; (800f7b4 <FLASH_SetErrorCode+0x70>)
 800f746:	68da      	ldr	r2, [r3, #12]
 800f748:	06d1      	lsls	r1, r2, #27
 800f74a:	d505      	bpl.n	800f758 <FLASH_SetErrorCode+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f74c:	491a      	ldr	r1, [pc, #104]	; (800f7b8 <FLASH_SetErrorCode+0x74>)
 800f74e:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800f750:	2010      	movs	r0, #16
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f752:	4302      	orrs	r2, r0
 800f754:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800f756:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800f758:	4b16      	ldr	r3, [pc, #88]	; (800f7b4 <FLASH_SetErrorCode+0x70>)
 800f75a:	68da      	ldr	r2, [r3, #12]
 800f75c:	0692      	lsls	r2, r2, #26
 800f75e:	d506      	bpl.n	800f76e <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f760:	4915      	ldr	r1, [pc, #84]	; (800f7b8 <FLASH_SetErrorCode+0x74>)
 800f762:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800f764:	2020      	movs	r0, #32
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f766:	f042 0208 	orr.w	r2, r2, #8
 800f76a:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800f76c:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800f76e:	4b11      	ldr	r3, [pc, #68]	; (800f7b4 <FLASH_SetErrorCode+0x70>)
 800f770:	68da      	ldr	r2, [r3, #12]
 800f772:	0650      	lsls	r0, r2, #25
 800f774:	d506      	bpl.n	800f784 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800f776:	4910      	ldr	r1, [pc, #64]	; (800f7b8 <FLASH_SetErrorCode+0x74>)
 800f778:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800f77a:	2040      	movs	r0, #64	; 0x40
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800f77c:	f042 0204 	orr.w	r2, r2, #4
 800f780:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800f782:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800f784:	4b0b      	ldr	r3, [pc, #44]	; (800f7b4 <FLASH_SetErrorCode+0x70>)
 800f786:	68da      	ldr	r2, [r3, #12]
 800f788:	0611      	lsls	r1, r2, #24
 800f78a:	d506      	bpl.n	800f79a <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800f78c:	490a      	ldr	r1, [pc, #40]	; (800f7b8 <FLASH_SetErrorCode+0x74>)
 800f78e:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800f790:	2080      	movs	r0, #128	; 0x80
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800f792:	f042 0202 	orr.w	r2, r2, #2
 800f796:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800f798:	60d8      	str	r0, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800f79a:	4b06      	ldr	r3, [pc, #24]	; (800f7b4 <FLASH_SetErrorCode+0x70>)
 800f79c:	68da      	ldr	r2, [r3, #12]
 800f79e:	0792      	lsls	r2, r2, #30
 800f7a0:	d506      	bpl.n	800f7b0 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800f7a2:	4905      	ldr	r1, [pc, #20]	; (800f7b8 <FLASH_SetErrorCode+0x74>)
 800f7a4:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800f7a6:	2002      	movs	r0, #2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800f7a8:	f042 0220 	orr.w	r2, r2, #32
 800f7ac:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800f7ae:	60d8      	str	r0, [r3, #12]
  }
}
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	40023c00 	.word	0x40023c00
 800f7b8:	20002024 	.word	0x20002024

0800f7bc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f7bc:	4b06      	ldr	r3, [pc, #24]	; (800f7d8 <HAL_FLASH_Unlock+0x1c>)
 800f7be:	691a      	ldr	r2, [r3, #16]
 800f7c0:	2a00      	cmp	r2, #0
 800f7c2:	db01      	blt.n	800f7c8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800f7c4:	2000      	movs	r0, #0
}
 800f7c6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f7c8:	4904      	ldr	r1, [pc, #16]	; (800f7dc <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f7ca:	4a05      	ldr	r2, [pc, #20]	; (800f7e0 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f7cc:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f7ce:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f7d0:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800f7d2:	0fc0      	lsrs	r0, r0, #31
 800f7d4:	4770      	bx	lr
 800f7d6:	bf00      	nop
 800f7d8:	40023c00 	.word	0x40023c00
 800f7dc:	45670123 	.word	0x45670123
 800f7e0:	cdef89ab 	.word	0xcdef89ab

0800f7e4 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800f7e4:	4a03      	ldr	r2, [pc, #12]	; (800f7f4 <HAL_FLASH_Lock+0x10>)
 800f7e6:	6913      	ldr	r3, [r2, #16]
 800f7e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f7ec:	6113      	str	r3, [r2, #16]
}
 800f7ee:	2000      	movs	r0, #0
 800f7f0:	4770      	bx	lr
 800f7f2:	bf00      	nop
 800f7f4:	40023c00 	.word	0x40023c00

0800f7f8 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f7f8:	4b12      	ldr	r3, [pc, #72]	; (800f844 <FLASH_WaitForLastOperation+0x4c>)
{ 
 800f7fa:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f7fc:	2200      	movs	r2, #0
{ 
 800f7fe:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f800:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800f802:	f7ff faa7 	bl	800ed54 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f806:	4c10      	ldr	r4, [pc, #64]	; (800f848 <FLASH_WaitForLastOperation+0x50>)
  tickstart = HAL_GetTick();
 800f808:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f80a:	e001      	b.n	800f810 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800f80c:	1c69      	adds	r1, r5, #1
 800f80e:	d10d      	bne.n	800f82c <FLASH_WaitForLastOperation+0x34>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800f810:	68e3      	ldr	r3, [r4, #12]
 800f812:	03da      	lsls	r2, r3, #15
 800f814:	d4fa      	bmi.n	800f80c <FLASH_WaitForLastOperation+0x14>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800f816:	68e3      	ldr	r3, [r4, #12]
 800f818:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f81a:	bf44      	itt	mi
 800f81c:	2301      	movmi	r3, #1
 800f81e:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800f820:	4b09      	ldr	r3, [pc, #36]	; (800f848 <FLASH_WaitForLastOperation+0x50>)
 800f822:	68d8      	ldr	r0, [r3, #12]
 800f824:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 800f828:	d108      	bne.n	800f83c <FLASH_WaitForLastOperation+0x44>
}  
 800f82a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800f82c:	b125      	cbz	r5, 800f838 <FLASH_WaitForLastOperation+0x40>
 800f82e:	f7ff fa91 	bl	800ed54 <HAL_GetTick>
 800f832:	1b80      	subs	r0, r0, r6
 800f834:	42a8      	cmp	r0, r5
 800f836:	d9eb      	bls.n	800f810 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800f838:	2003      	movs	r0, #3
}  
 800f83a:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800f83c:	f7ff ff82 	bl	800f744 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f840:	2001      	movs	r0, #1
}  
 800f842:	bd70      	pop	{r4, r5, r6, pc}
 800f844:	20002024 	.word	0x20002024
 800f848:	40023c00 	.word	0x40023c00

0800f84c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800f84c:	b139      	cbz	r1, 800f85e <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800f84e:	2901      	cmp	r1, #1
 800f850:	d01c      	beq.n	800f88c <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800f852:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800f854:	bf0c      	ite	eq
 800f856:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800f85a:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f85e:	4b0d      	ldr	r3, [pc, #52]	; (800f894 <FLASH_Erase_Sector+0x48>)
 800f860:	691a      	ldr	r2, [r3, #16]
 800f862:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f866:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800f868:	691a      	ldr	r2, [r3, #16]
 800f86a:	4311      	orrs	r1, r2
 800f86c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800f86e:	691a      	ldr	r2, [r3, #16]
 800f870:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800f874:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800f876:	691a      	ldr	r2, [r3, #16]
 800f878:	f042 0202 	orr.w	r2, r2, #2
 800f87c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800f880:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800f882:	691a      	ldr	r2, [r3, #16]
 800f884:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f888:	611a      	str	r2, [r3, #16]
}
 800f88a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800f88c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f890:	e7e5      	b.n	800f85e <FLASH_Erase_Sector+0x12>
 800f892:	bf00      	nop
 800f894:	40023c00 	.word	0x40023c00

0800f898 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800f898:	4b14      	ldr	r3, [pc, #80]	; (800f8ec <FLASH_FlushCaches+0x54>)
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	0591      	lsls	r1, r2, #22
 800f89e:	d50f      	bpl.n	800f8c0 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f8a6:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f8ae:	601a      	str	r2, [r3, #0]
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f8b6:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f8be:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800f8c0:	4b0a      	ldr	r3, [pc, #40]	; (800f8ec <FLASH_FlushCaches+0x54>)
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	0552      	lsls	r2, r2, #21
 800f8c6:	d50f      	bpl.n	800f8e8 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8ce:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f8d6:	601a      	str	r2, [r3, #0]
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f8de:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f8e6:	601a      	str	r2, [r3, #0]
  }
}
 800f8e8:	4770      	bx	lr
 800f8ea:	bf00      	nop
 800f8ec:	40023c00 	.word	0x40023c00

0800f8f0 <HAL_FLASHEx_Erase>:
{
 800f8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800f8f4:	4e2d      	ldr	r6, [pc, #180]	; (800f9ac <HAL_FLASHEx_Erase+0xbc>)
 800f8f6:	7e33      	ldrb	r3, [r6, #24]
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d038      	beq.n	800f96e <HAL_FLASHEx_Erase+0x7e>
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f900:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f904:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800f906:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f908:	f7ff ff76 	bl	800f7f8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800f90c:	4607      	mov	r7, r0
 800f90e:	bb48      	cbnz	r0, 800f964 <HAL_FLASHEx_Erase+0x74>
    *SectorError = 0xFFFFFFFFU;
 800f910:	f04f 33ff 	mov.w	r3, #4294967295
 800f914:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800f918:	6823      	ldr	r3, [r4, #0]
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d02b      	beq.n	800f976 <HAL_FLASHEx_Erase+0x86>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f91e:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800f922:	442b      	add	r3, r5
 800f924:	429d      	cmp	r5, r3
 800f926:	d21b      	bcs.n	800f960 <HAL_FLASHEx_Erase+0x70>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f928:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800f9b0 <HAL_FLASHEx_Erase+0xc0>
 800f92c:	e005      	b.n	800f93a <HAL_FLASHEx_Erase+0x4a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f92e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800f932:	3501      	adds	r5, #1
 800f934:	4413      	add	r3, r2
 800f936:	42ab      	cmp	r3, r5
 800f938:	d912      	bls.n	800f960 <HAL_FLASHEx_Erase+0x70>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800f93a:	7c21      	ldrb	r1, [r4, #16]
 800f93c:	4628      	mov	r0, r5
 800f93e:	f7ff ff85 	bl	800f84c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f942:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f946:	f7ff ff57 	bl	800f7f8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f94a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f94e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800f952:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800f956:	2800      	cmp	r0, #0
 800f958:	d0e9      	beq.n	800f92e <HAL_FLASHEx_Erase+0x3e>
          *SectorError = index;
 800f95a:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f95e:	4607      	mov	r7, r0
    FLASH_FlushCaches();    
 800f960:	f7ff ff9a 	bl	800f898 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800f964:	2300      	movs	r3, #0
 800f966:	7633      	strb	r3, [r6, #24]
}
 800f968:	4638      	mov	r0, r7
 800f96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800f96e:	2702      	movs	r7, #2
}
 800f970:	4638      	mov	r0, r7
 800f972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f976:	4d0e      	ldr	r5, [pc, #56]	; (800f9b0 <HAL_FLASHEx_Erase+0xc0>)
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800f978:	6923      	ldr	r3, [r4, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f97a:	692a      	ldr	r2, [r5, #16]
 800f97c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f980:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_MER;
 800f982:	692a      	ldr	r2, [r5, #16]
 800f984:	f042 0204 	orr.w	r2, r2, #4
 800f988:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800f98a:	692a      	ldr	r2, [r5, #16]
 800f98c:	021b      	lsls	r3, r3, #8
 800f98e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f992:	b29b      	uxth	r3, r3
 800f994:	4313      	orrs	r3, r2
 800f996:	612b      	str	r3, [r5, #16]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f998:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f99c:	f7ff ff2c 	bl	800f7f8 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800f9a0:	692b      	ldr	r3, [r5, #16]
 800f9a2:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f9a6:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800f9a8:	612b      	str	r3, [r5, #16]
 800f9aa:	e7d9      	b.n	800f960 <HAL_FLASHEx_Erase+0x70>
 800f9ac:	20002024 	.word	0x20002024
 800f9b0:	40023c00 	.word	0x40023c00

0800f9b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f9b8:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f9bc:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 800fbb4 <HAL_GPIO_Init+0x200>
{
 800f9c0:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f9c2:	2400      	movs	r4, #0
 800f9c4:	e003      	b.n	800f9ce <HAL_GPIO_Init+0x1a>
 800f9c6:	3401      	adds	r4, #1
 800f9c8:	2c10      	cmp	r4, #16
 800f9ca:	f000 808c 	beq.w	800fae6 <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800f9d2:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d1f5      	bne.n	800f9c6 <HAL_GPIO_Init+0x12>
 800f9da:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f9de:	f026 0910 	bic.w	r9, r6, #16
 800f9e2:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 800f9e6:	2303      	movs	r3, #3
 800f9e8:	f109 37ff 	add.w	r7, r9, #4294967295
 800f9ec:	fa03 f30c 	lsl.w	r3, r3, ip
 800f9f0:	2f01      	cmp	r7, #1
 800f9f2:	ea6f 0303 	mvn.w	r3, r3
 800f9f6:	fa05 f50c 	lsl.w	r5, r5, ip
 800f9fa:	d977      	bls.n	800faec <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 800f9fc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f9fe:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fa00:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800fa02:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 800fa04:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fa06:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fa0a:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fa0c:	fa05 f30c 	lsl.w	r3, r5, ip
 800fa10:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800fa12:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800fa14:	00f3      	lsls	r3, r6, #3
 800fa16:	d5d6      	bpl.n	800f9c6 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fa18:	4d5f      	ldr	r5, [pc, #380]	; (800fb98 <HAL_GPIO_Init+0x1e4>)
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	9301      	str	r3, [sp, #4]
 800fa1e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800fa20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fa24:	646b      	str	r3, [r5, #68]	; 0x44
 800fa26:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 800fa28:	f024 0303 	bic.w	r3, r4, #3
 800fa2c:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800fa30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fa34:	9501      	str	r5, [sp, #4]
 800fa36:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fa3a:	f004 0503 	and.w	r5, r4, #3
 800fa3e:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fa42:	4d56      	ldr	r5, [pc, #344]	; (800fb9c <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fa44:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800fa46:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fa4a:	270f      	movs	r7, #15
 800fa4c:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fa50:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fa52:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fa56:	d01f      	beq.n	800fa98 <HAL_GPIO_Init+0xe4>
 800fa58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fa5c:	42a8      	cmp	r0, r5
 800fa5e:	d076      	beq.n	800fb4e <HAL_GPIO_Init+0x19a>
 800fa60:	4d4f      	ldr	r5, [pc, #316]	; (800fba0 <HAL_GPIO_Init+0x1ec>)
 800fa62:	42a8      	cmp	r0, r5
 800fa64:	d079      	beq.n	800fb5a <HAL_GPIO_Init+0x1a6>
 800fa66:	4d4f      	ldr	r5, [pc, #316]	; (800fba4 <HAL_GPIO_Init+0x1f0>)
 800fa68:	42a8      	cmp	r0, r5
 800fa6a:	d07c      	beq.n	800fb66 <HAL_GPIO_Init+0x1b2>
 800fa6c:	4d4e      	ldr	r5, [pc, #312]	; (800fba8 <HAL_GPIO_Init+0x1f4>)
 800fa6e:	42a8      	cmp	r0, r5
 800fa70:	d07f      	beq.n	800fb72 <HAL_GPIO_Init+0x1be>
 800fa72:	4d4e      	ldr	r5, [pc, #312]	; (800fbac <HAL_GPIO_Init+0x1f8>)
 800fa74:	42a8      	cmp	r0, r5
 800fa76:	f000 8082 	beq.w	800fb7e <HAL_GPIO_Init+0x1ca>
 800fa7a:	4d4d      	ldr	r5, [pc, #308]	; (800fbb0 <HAL_GPIO_Init+0x1fc>)
 800fa7c:	42a8      	cmp	r0, r5
 800fa7e:	f000 8084 	beq.w	800fb8a <HAL_GPIO_Init+0x1d6>
 800fa82:	f8df c134 	ldr.w	ip, [pc, #308]	; 800fbb8 <HAL_GPIO_Init+0x204>
 800fa86:	4560      	cmp	r0, ip
 800fa88:	bf0c      	ite	eq
 800fa8a:	f04f 0c07 	moveq.w	ip, #7
 800fa8e:	f04f 0c08 	movne.w	ip, #8
 800fa92:	fa0c f509 	lsl.w	r5, ip, r9
 800fa96:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fa98:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800fa9a:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800fa9e:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800faa0:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 800faa2:	bf54      	ite	pl
 800faa4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800faa6:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800faa8:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800faac:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800fab0:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 800fab2:	bf54      	ite	pl
 800fab4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fab6:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 800fab8:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fabc:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800fac0:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 800fac2:	bf54      	ite	pl
 800fac4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fac6:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800fac8:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800facc:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800fad0:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fad2:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800fad6:	bf54      	ite	pl
 800fad8:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800fada:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fadc:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 800fade:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fae2:	f47f af74 	bne.w	800f9ce <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 800fae6:	b003      	add	sp, #12
 800fae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800faec:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800faee:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800faf2:	68cf      	ldr	r7, [r1, #12]
 800faf4:	fa07 f70c 	lsl.w	r7, r7, ip
 800faf8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800fafc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800fafe:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fb02:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fb06:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800fb0a:	40a7      	lsls	r7, r4
 800fb0c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800fb10:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800fb12:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800fb14:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fb16:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fb18:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 800fb1c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800fb1e:	f47f af71 	bne.w	800fa04 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 800fb22:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800fb26:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fb2a:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 800fb2e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800fb32:	00bf      	lsls	r7, r7, #2
 800fb34:	f04f 0b0f 	mov.w	fp, #15
 800fb38:	fa0b fb07 	lsl.w	fp, fp, r7
 800fb3c:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fb40:	690d      	ldr	r5, [r1, #16]
 800fb42:	40bd      	lsls	r5, r7
 800fb44:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 800fb48:	f8c9 5020 	str.w	r5, [r9, #32]
 800fb4c:	e75a      	b.n	800fa04 <HAL_GPIO_Init+0x50>
 800fb4e:	f04f 0c01 	mov.w	ip, #1
 800fb52:	fa0c f509 	lsl.w	r5, ip, r9
 800fb56:	432f      	orrs	r7, r5
 800fb58:	e79e      	b.n	800fa98 <HAL_GPIO_Init+0xe4>
 800fb5a:	f04f 0c02 	mov.w	ip, #2
 800fb5e:	fa0c f509 	lsl.w	r5, ip, r9
 800fb62:	432f      	orrs	r7, r5
 800fb64:	e798      	b.n	800fa98 <HAL_GPIO_Init+0xe4>
 800fb66:	f04f 0c03 	mov.w	ip, #3
 800fb6a:	fa0c f509 	lsl.w	r5, ip, r9
 800fb6e:	432f      	orrs	r7, r5
 800fb70:	e792      	b.n	800fa98 <HAL_GPIO_Init+0xe4>
 800fb72:	f04f 0c04 	mov.w	ip, #4
 800fb76:	fa0c f509 	lsl.w	r5, ip, r9
 800fb7a:	432f      	orrs	r7, r5
 800fb7c:	e78c      	b.n	800fa98 <HAL_GPIO_Init+0xe4>
 800fb7e:	f04f 0c05 	mov.w	ip, #5
 800fb82:	fa0c f509 	lsl.w	r5, ip, r9
 800fb86:	432f      	orrs	r7, r5
 800fb88:	e786      	b.n	800fa98 <HAL_GPIO_Init+0xe4>
 800fb8a:	f04f 0c06 	mov.w	ip, #6
 800fb8e:	fa0c f509 	lsl.w	r5, ip, r9
 800fb92:	432f      	orrs	r7, r5
 800fb94:	e780      	b.n	800fa98 <HAL_GPIO_Init+0xe4>
 800fb96:	bf00      	nop
 800fb98:	40023800 	.word	0x40023800
 800fb9c:	40020000 	.word	0x40020000
 800fba0:	40020800 	.word	0x40020800
 800fba4:	40020c00 	.word	0x40020c00
 800fba8:	40021000 	.word	0x40021000
 800fbac:	40021400 	.word	0x40021400
 800fbb0:	40021800 	.word	0x40021800
 800fbb4:	40013c00 	.word	0x40013c00
 800fbb8:	40021c00 	.word	0x40021c00

0800fbbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800fbbc:	b902      	cbnz	r2, 800fbc0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800fbbe:	0409      	lsls	r1, r1, #16
 800fbc0:	6181      	str	r1, [r0, #24]
  }
}
 800fbc2:	4770      	bx	lr

0800fbc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800fbc4:	4a04      	ldr	r2, [pc, #16]	; (800fbd8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800fbc6:	6951      	ldr	r1, [r2, #20]
 800fbc8:	4201      	tst	r1, r0
 800fbca:	d100      	bne.n	800fbce <HAL_GPIO_EXTI_IRQHandler+0xa>
 800fbcc:	4770      	bx	lr
{
 800fbce:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800fbd0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800fbd2:	f7fe ff6f 	bl	800eab4 <HAL_GPIO_EXTI_Callback>
  }
}
 800fbd6:	bd08      	pop	{r3, pc}
 800fbd8:	40013c00 	.word	0x40013c00

0800fbdc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	f000 8132 	beq.w	800fe46 <HAL_RCC_OscConfig+0x26a>
{
 800fbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fbe6:	6803      	ldr	r3, [r0, #0]
 800fbe8:	07dd      	lsls	r5, r3, #31
{
 800fbea:	b082      	sub	sp, #8
 800fbec:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fbee:	d52f      	bpl.n	800fc50 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fbf0:	49ac      	ldr	r1, [pc, #688]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
 800fbf2:	688a      	ldr	r2, [r1, #8]
 800fbf4:	f002 020c 	and.w	r2, r2, #12
 800fbf8:	2a04      	cmp	r2, #4
 800fbfa:	f000 80ea 	beq.w	800fdd2 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fbfe:	688a      	ldr	r2, [r1, #8]
 800fc00:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fc04:	2a08      	cmp	r2, #8
 800fc06:	f000 80e0 	beq.w	800fdca <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fc0a:	6863      	ldr	r3, [r4, #4]
 800fc0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc10:	f000 80e9 	beq.w	800fde6 <HAL_RCC_OscConfig+0x20a>
 800fc14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fc18:	f000 8178 	beq.w	800ff0c <HAL_RCC_OscConfig+0x330>
 800fc1c:	4da1      	ldr	r5, [pc, #644]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
 800fc1e:	682a      	ldr	r2, [r5, #0]
 800fc20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fc24:	602a      	str	r2, [r5, #0]
 800fc26:	682a      	ldr	r2, [r5, #0]
 800fc28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fc2c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f040 80de 	bne.w	800fdf0 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fc34:	f7ff f88e 	bl	800ed54 <HAL_GetTick>
 800fc38:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fc3a:	e005      	b.n	800fc48 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fc3c:	f7ff f88a 	bl	800ed54 <HAL_GetTick>
 800fc40:	1b80      	subs	r0, r0, r6
 800fc42:	2864      	cmp	r0, #100	; 0x64
 800fc44:	f200 80f2 	bhi.w	800fe2c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fc48:	682b      	ldr	r3, [r5, #0]
 800fc4a:	039b      	lsls	r3, r3, #14
 800fc4c:	d4f6      	bmi.n	800fc3c <HAL_RCC_OscConfig+0x60>
 800fc4e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fc50:	079f      	lsls	r7, r3, #30
 800fc52:	d475      	bmi.n	800fd40 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc54:	071a      	lsls	r2, r3, #28
 800fc56:	d515      	bpl.n	800fc84 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800fc58:	6963      	ldr	r3, [r4, #20]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	f000 80a5 	beq.w	800fdaa <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fc60:	4b91      	ldr	r3, [pc, #580]	; (800fea8 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fc62:	4d90      	ldr	r5, [pc, #576]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 800fc64:	2201      	movs	r2, #1
 800fc66:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800fc68:	f7ff f874 	bl	800ed54 <HAL_GetTick>
 800fc6c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fc6e:	e005      	b.n	800fc7c <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fc70:	f7ff f870 	bl	800ed54 <HAL_GetTick>
 800fc74:	1b80      	subs	r0, r0, r6
 800fc76:	2802      	cmp	r0, #2
 800fc78:	f200 80d8 	bhi.w	800fe2c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fc7c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fc7e:	079b      	lsls	r3, r3, #30
 800fc80:	d5f6      	bpl.n	800fc70 <HAL_RCC_OscConfig+0x94>
 800fc82:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fc84:	0758      	lsls	r0, r3, #29
 800fc86:	d53b      	bpl.n	800fd00 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fc88:	4a86      	ldr	r2, [pc, #536]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
 800fc8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fc8c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800fc90:	f040 80db 	bne.w	800fe4a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fc94:	9301      	str	r3, [sp, #4]
 800fc96:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fc98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc9c:	6413      	str	r3, [r2, #64]	; 0x40
 800fc9e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fca4:	9301      	str	r3, [sp, #4]
 800fca6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800fca8:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fcaa:	4d80      	ldr	r5, [pc, #512]	; (800feac <HAL_RCC_OscConfig+0x2d0>)
 800fcac:	682a      	ldr	r2, [r5, #0]
 800fcae:	05d1      	lsls	r1, r2, #23
 800fcb0:	f140 80ac 	bpl.w	800fe0c <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fcb4:	68a3      	ldr	r3, [r4, #8]
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	f000 80c9 	beq.w	800fe4e <HAL_RCC_OscConfig+0x272>
 800fcbc:	2b05      	cmp	r3, #5
 800fcbe:	f000 812f 	beq.w	800ff20 <HAL_RCC_OscConfig+0x344>
 800fcc2:	4d78      	ldr	r5, [pc, #480]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
 800fcc4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800fcc6:	f022 0201 	bic.w	r2, r2, #1
 800fcca:	672a      	str	r2, [r5, #112]	; 0x70
 800fccc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800fcce:	f022 0204 	bic.w	r2, r2, #4
 800fcd2:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f040 80bf 	bne.w	800fe58 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fcda:	f7ff f83b 	bl	800ed54 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fcde:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800fce2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fce4:	e006      	b.n	800fcf4 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fce6:	f7ff f835 	bl	800ed54 <HAL_GetTick>
 800fcea:	eba0 0008 	sub.w	r0, r0, r8
 800fcee:	42b8      	cmp	r0, r7
 800fcf0:	f200 809c 	bhi.w	800fe2c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fcf4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fcf6:	0798      	lsls	r0, r3, #30
 800fcf8:	d4f5      	bmi.n	800fce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fcfa:	2e00      	cmp	r6, #0
 800fcfc:	f040 80dc 	bne.w	800feb8 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fd00:	69a0      	ldr	r0, [r4, #24]
 800fd02:	b1c8      	cbz	r0, 800fd38 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800fd04:	4d67      	ldr	r5, [pc, #412]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
 800fd06:	68aa      	ldr	r2, [r5, #8]
 800fd08:	f002 020c 	and.w	r2, r2, #12
 800fd0c:	2a08      	cmp	r2, #8
 800fd0e:	f000 80d9 	beq.w	800fec4 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fd12:	4a67      	ldr	r2, [pc, #412]	; (800feb0 <HAL_RCC_OscConfig+0x2d4>)
 800fd14:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fd16:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800fd18:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fd1a:	f000 810b 	beq.w	800ff34 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd1e:	f7ff f819 	bl	800ed54 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fd22:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800fd24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fd26:	e004      	b.n	800fd32 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fd28:	f7ff f814 	bl	800ed54 <HAL_GetTick>
 800fd2c:	1b40      	subs	r0, r0, r5
 800fd2e:	2802      	cmp	r0, #2
 800fd30:	d87c      	bhi.n	800fe2c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fd32:	6823      	ldr	r3, [r4, #0]
 800fd34:	019b      	lsls	r3, r3, #6
 800fd36:	d4f7      	bmi.n	800fd28 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800fd38:	2000      	movs	r0, #0
}
 800fd3a:	b002      	add	sp, #8
 800fd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800fd40:	4a58      	ldr	r2, [pc, #352]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
 800fd42:	6891      	ldr	r1, [r2, #8]
 800fd44:	f011 0f0c 	tst.w	r1, #12
 800fd48:	d024      	beq.n	800fd94 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fd4a:	6891      	ldr	r1, [r2, #8]
 800fd4c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800fd50:	2908      	cmp	r1, #8
 800fd52:	d01c      	beq.n	800fd8e <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800fd54:	68e3      	ldr	r3, [r4, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	f000 8092 	beq.w	800fe80 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 800fd5c:	4b55      	ldr	r3, [pc, #340]	; (800feb4 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fd5e:	4d51      	ldr	r5, [pc, #324]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 800fd60:	2201      	movs	r2, #1
 800fd62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800fd64:	f7fe fff6 	bl	800ed54 <HAL_GetTick>
 800fd68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fd6a:	e004      	b.n	800fd76 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fd6c:	f7fe fff2 	bl	800ed54 <HAL_GetTick>
 800fd70:	1b80      	subs	r0, r0, r6
 800fd72:	2802      	cmp	r0, #2
 800fd74:	d85a      	bhi.n	800fe2c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fd76:	682b      	ldr	r3, [r5, #0]
 800fd78:	0798      	lsls	r0, r3, #30
 800fd7a:	d5f7      	bpl.n	800fd6c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fd7c:	682b      	ldr	r3, [r5, #0]
 800fd7e:	6922      	ldr	r2, [r4, #16]
 800fd80:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fd84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800fd88:	602b      	str	r3, [r5, #0]
 800fd8a:	6823      	ldr	r3, [r4, #0]
 800fd8c:	e762      	b.n	800fc54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fd8e:	6852      	ldr	r2, [r2, #4]
 800fd90:	0256      	lsls	r6, r2, #9
 800fd92:	d4df      	bmi.n	800fd54 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fd94:	4a43      	ldr	r2, [pc, #268]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
 800fd96:	6812      	ldr	r2, [r2, #0]
 800fd98:	0795      	lsls	r5, r2, #30
 800fd9a:	d54b      	bpl.n	800fe34 <HAL_RCC_OscConfig+0x258>
 800fd9c:	68e2      	ldr	r2, [r4, #12]
 800fd9e:	2a01      	cmp	r2, #1
 800fda0:	d048      	beq.n	800fe34 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 800fda2:	2001      	movs	r0, #1
}
 800fda4:	b002      	add	sp, #8
 800fda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800fdaa:	4a3f      	ldr	r2, [pc, #252]	; (800fea8 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fdac:	4d3d      	ldr	r5, [pc, #244]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800fdae:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800fdb0:	f7fe ffd0 	bl	800ed54 <HAL_GetTick>
 800fdb4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fdb6:	e004      	b.n	800fdc2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fdb8:	f7fe ffcc 	bl	800ed54 <HAL_GetTick>
 800fdbc:	1b80      	subs	r0, r0, r6
 800fdbe:	2802      	cmp	r0, #2
 800fdc0:	d834      	bhi.n	800fe2c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fdc2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800fdc4:	079f      	lsls	r7, r3, #30
 800fdc6:	d4f7      	bmi.n	800fdb8 <HAL_RCC_OscConfig+0x1dc>
 800fdc8:	e75b      	b.n	800fc82 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fdca:	684a      	ldr	r2, [r1, #4]
 800fdcc:	0250      	lsls	r0, r2, #9
 800fdce:	f57f af1c 	bpl.w	800fc0a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fdd2:	4a34      	ldr	r2, [pc, #208]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
 800fdd4:	6812      	ldr	r2, [r2, #0]
 800fdd6:	0391      	lsls	r1, r2, #14
 800fdd8:	f57f af3a 	bpl.w	800fc50 <HAL_RCC_OscConfig+0x74>
 800fddc:	6862      	ldr	r2, [r4, #4]
 800fdde:	2a00      	cmp	r2, #0
 800fde0:	f47f af36 	bne.w	800fc50 <HAL_RCC_OscConfig+0x74>
 800fde4:	e7dd      	b.n	800fda2 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fde6:	4a2f      	ldr	r2, [pc, #188]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
 800fde8:	6813      	ldr	r3, [r2, #0]
 800fdea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fdee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fdf0:	f7fe ffb0 	bl	800ed54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fdf4:	4d2b      	ldr	r5, [pc, #172]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800fdf6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fdf8:	e004      	b.n	800fe04 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fdfa:	f7fe ffab 	bl	800ed54 <HAL_GetTick>
 800fdfe:	1b80      	subs	r0, r0, r6
 800fe00:	2864      	cmp	r0, #100	; 0x64
 800fe02:	d813      	bhi.n	800fe2c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	039a      	lsls	r2, r3, #14
 800fe08:	d5f7      	bpl.n	800fdfa <HAL_RCC_OscConfig+0x21e>
 800fe0a:	e720      	b.n	800fc4e <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fe0c:	682a      	ldr	r2, [r5, #0]
 800fe0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe12:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800fe14:	f7fe ff9e 	bl	800ed54 <HAL_GetTick>
 800fe18:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe1a:	682b      	ldr	r3, [r5, #0]
 800fe1c:	05da      	lsls	r2, r3, #23
 800fe1e:	f53f af49 	bmi.w	800fcb4 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe22:	f7fe ff97 	bl	800ed54 <HAL_GetTick>
 800fe26:	1bc0      	subs	r0, r0, r7
 800fe28:	2802      	cmp	r0, #2
 800fe2a:	d9f6      	bls.n	800fe1a <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 800fe2c:	2003      	movs	r0, #3
}
 800fe2e:	b002      	add	sp, #8
 800fe30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fe34:	491b      	ldr	r1, [pc, #108]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
 800fe36:	6920      	ldr	r0, [r4, #16]
 800fe38:	680a      	ldr	r2, [r1, #0]
 800fe3a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800fe3e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800fe42:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fe44:	e706      	b.n	800fc54 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 800fe46:	2001      	movs	r0, #1
}
 800fe48:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800fe4a:	2600      	movs	r6, #0
 800fe4c:	e72d      	b.n	800fcaa <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fe4e:	4a15      	ldr	r2, [pc, #84]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
 800fe50:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800fe52:	f043 0301 	orr.w	r3, r3, #1
 800fe56:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800fe58:	f7fe ff7c 	bl	800ed54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fe5c:	4d11      	ldr	r5, [pc, #68]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800fe5e:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fe60:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fe64:	e005      	b.n	800fe72 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fe66:	f7fe ff75 	bl	800ed54 <HAL_GetTick>
 800fe6a:	eba0 0008 	sub.w	r0, r0, r8
 800fe6e:	42b8      	cmp	r0, r7
 800fe70:	d8dc      	bhi.n	800fe2c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fe72:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fe74:	079b      	lsls	r3, r3, #30
 800fe76:	d5f6      	bpl.n	800fe66 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 800fe78:	2e00      	cmp	r6, #0
 800fe7a:	f43f af41 	beq.w	800fd00 <HAL_RCC_OscConfig+0x124>
 800fe7e:	e01b      	b.n	800feb8 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 800fe80:	4a0c      	ldr	r2, [pc, #48]	; (800feb4 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fe82:	4d08      	ldr	r5, [pc, #32]	; (800fea4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 800fe84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fe86:	f7fe ff65 	bl	800ed54 <HAL_GetTick>
 800fe8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fe8c:	e004      	b.n	800fe98 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fe8e:	f7fe ff61 	bl	800ed54 <HAL_GetTick>
 800fe92:	1b80      	subs	r0, r0, r6
 800fe94:	2802      	cmp	r0, #2
 800fe96:	d8c9      	bhi.n	800fe2c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fe98:	682b      	ldr	r3, [r5, #0]
 800fe9a:	0799      	lsls	r1, r3, #30
 800fe9c:	d4f7      	bmi.n	800fe8e <HAL_RCC_OscConfig+0x2b2>
 800fe9e:	6823      	ldr	r3, [r4, #0]
 800fea0:	e6d8      	b.n	800fc54 <HAL_RCC_OscConfig+0x78>
 800fea2:	bf00      	nop
 800fea4:	40023800 	.word	0x40023800
 800fea8:	42470e80 	.word	0x42470e80
 800feac:	40007000 	.word	0x40007000
 800feb0:	42470060 	.word	0x42470060
 800feb4:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 800feb8:	4a35      	ldr	r2, [pc, #212]	; (800ff90 <HAL_RCC_OscConfig+0x3b4>)
 800feba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800febc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fec0:	6413      	str	r3, [r2, #64]	; 0x40
 800fec2:	e71d      	b.n	800fd00 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fec4:	2801      	cmp	r0, #1
 800fec6:	f43f af6d 	beq.w	800fda4 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800feca:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fecc:	69e2      	ldr	r2, [r4, #28]
 800fece:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800fed2:	4291      	cmp	r1, r2
 800fed4:	f47f af65 	bne.w	800fda2 <HAL_RCC_OscConfig+0x1c6>
 800fed8:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800feda:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fede:	4291      	cmp	r1, r2
 800fee0:	f47f af5f 	bne.w	800fda2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800fee4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800fee8:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800feea:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800feec:	428a      	cmp	r2, r1
 800feee:	f47f af58 	bne.w	800fda2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800fef2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800fef4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800fef8:	4291      	cmp	r1, r2
 800fefa:	f47f af52 	bne.w	800fda2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800fefe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ff00:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 800ff04:	1a18      	subs	r0, r3, r0
 800ff06:	bf18      	it	ne
 800ff08:	2001      	movne	r0, #1
 800ff0a:	e74b      	b.n	800fda4 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ff0c:	4b20      	ldr	r3, [pc, #128]	; (800ff90 <HAL_RCC_OscConfig+0x3b4>)
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ff14:	601a      	str	r2, [r3, #0]
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ff1c:	601a      	str	r2, [r3, #0]
 800ff1e:	e767      	b.n	800fdf0 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ff20:	4b1b      	ldr	r3, [pc, #108]	; (800ff90 <HAL_RCC_OscConfig+0x3b4>)
 800ff22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ff24:	f042 0204 	orr.w	r2, r2, #4
 800ff28:	671a      	str	r2, [r3, #112]	; 0x70
 800ff2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ff2c:	f042 0201 	orr.w	r2, r2, #1
 800ff30:	671a      	str	r2, [r3, #112]	; 0x70
 800ff32:	e791      	b.n	800fe58 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 800ff34:	f7fe ff0e 	bl	800ed54 <HAL_GetTick>
 800ff38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ff3a:	e005      	b.n	800ff48 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff3c:	f7fe ff0a 	bl	800ed54 <HAL_GetTick>
 800ff40:	1b80      	subs	r0, r0, r6
 800ff42:	2802      	cmp	r0, #2
 800ff44:	f63f af72 	bhi.w	800fe2c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ff48:	682b      	ldr	r3, [r5, #0]
 800ff4a:	0199      	lsls	r1, r3, #6
 800ff4c:	d4f6      	bmi.n	800ff3c <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ff4e:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 800ff52:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800ff56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ff58:	4c0d      	ldr	r4, [pc, #52]	; (800ff90 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ff5a:	4333      	orrs	r3, r6
 800ff5c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800ff60:	0852      	lsrs	r2, r2, #1
 800ff62:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ff66:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800ff68:	490a      	ldr	r1, [pc, #40]	; (800ff94 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ff6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800ff6e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ff70:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800ff72:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 800ff74:	f7fe feee 	bl	800ed54 <HAL_GetTick>
 800ff78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ff7a:	e005      	b.n	800ff88 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff7c:	f7fe feea 	bl	800ed54 <HAL_GetTick>
 800ff80:	1b40      	subs	r0, r0, r5
 800ff82:	2802      	cmp	r0, #2
 800ff84:	f63f af52 	bhi.w	800fe2c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ff88:	6823      	ldr	r3, [r4, #0]
 800ff8a:	019a      	lsls	r2, r3, #6
 800ff8c:	d5f6      	bpl.n	800ff7c <HAL_RCC_OscConfig+0x3a0>
 800ff8e:	e6d3      	b.n	800fd38 <HAL_RCC_OscConfig+0x15c>
 800ff90:	40023800 	.word	0x40023800
 800ff94:	42470060 	.word	0x42470060

0800ff98 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ff98:	4917      	ldr	r1, [pc, #92]	; (800fff8 <HAL_RCC_GetSysClockFreq+0x60>)
{
 800ff9a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ff9c:	688b      	ldr	r3, [r1, #8]
 800ff9e:	f003 030c 	and.w	r3, r3, #12
 800ffa2:	2b04      	cmp	r3, #4
 800ffa4:	d01b      	beq.n	800ffde <HAL_RCC_GetSysClockFreq+0x46>
 800ffa6:	2b08      	cmp	r3, #8
 800ffa8:	d117      	bne.n	800ffda <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ffaa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ffac:	684b      	ldr	r3, [r1, #4]
 800ffae:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ffb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ffb6:	d114      	bne.n	800ffe2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ffb8:	6849      	ldr	r1, [r1, #4]
 800ffba:	4810      	ldr	r0, [pc, #64]	; (800fffc <HAL_RCC_GetSysClockFreq+0x64>)
 800ffbc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ffc0:	fba1 0100 	umull	r0, r1, r1, r0
 800ffc4:	f7f8 fd98 	bl	8008af8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ffc8:	4b0b      	ldr	r3, [pc, #44]	; (800fff8 <HAL_RCC_GetSysClockFreq+0x60>)
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800ffd4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800ffd8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800ffda:	4808      	ldr	r0, [pc, #32]	; (800fffc <HAL_RCC_GetSysClockFreq+0x64>)
}
 800ffdc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800ffde:	4808      	ldr	r0, [pc, #32]	; (8010000 <HAL_RCC_GetSysClockFreq+0x68>)
}
 800ffe0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ffe2:	684b      	ldr	r3, [r1, #4]
 800ffe4:	4806      	ldr	r0, [pc, #24]	; (8010000 <HAL_RCC_GetSysClockFreq+0x68>)
 800ffe6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800ffea:	fba3 0100 	umull	r0, r1, r3, r0
 800ffee:	2300      	movs	r3, #0
 800fff0:	f7f8 fd82 	bl	8008af8 <__aeabi_uldivmod>
 800fff4:	e7e8      	b.n	800ffc8 <HAL_RCC_GetSysClockFreq+0x30>
 800fff6:	bf00      	nop
 800fff8:	40023800 	.word	0x40023800
 800fffc:	00f42400 	.word	0x00f42400
 8010000:	007a1200 	.word	0x007a1200

08010004 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8010004:	b160      	cbz	r0, 8010020 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010006:	4a49      	ldr	r2, [pc, #292]	; (801012c <HAL_RCC_ClockConfig+0x128>)
 8010008:	6813      	ldr	r3, [r2, #0]
 801000a:	f003 030f 	and.w	r3, r3, #15
 801000e:	428b      	cmp	r3, r1
 8010010:	d208      	bcs.n	8010024 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010012:	b2cb      	uxtb	r3, r1
 8010014:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010016:	6813      	ldr	r3, [r2, #0]
 8010018:	f003 030f 	and.w	r3, r3, #15
 801001c:	428b      	cmp	r3, r1
 801001e:	d001      	beq.n	8010024 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8010020:	2001      	movs	r0, #1
}
 8010022:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010024:	6803      	ldr	r3, [r0, #0]
{
 8010026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801002a:	079d      	lsls	r5, r3, #30
 801002c:	d514      	bpl.n	8010058 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801002e:	075c      	lsls	r4, r3, #29
 8010030:	d504      	bpl.n	801003c <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010032:	4c3f      	ldr	r4, [pc, #252]	; (8010130 <HAL_RCC_ClockConfig+0x12c>)
 8010034:	68a2      	ldr	r2, [r4, #8]
 8010036:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 801003a:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801003c:	071a      	lsls	r2, r3, #28
 801003e:	d504      	bpl.n	801004a <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010040:	4c3b      	ldr	r4, [pc, #236]	; (8010130 <HAL_RCC_ClockConfig+0x12c>)
 8010042:	68a2      	ldr	r2, [r4, #8]
 8010044:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8010048:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801004a:	4c39      	ldr	r4, [pc, #228]	; (8010130 <HAL_RCC_ClockConfig+0x12c>)
 801004c:	6885      	ldr	r5, [r0, #8]
 801004e:	68a2      	ldr	r2, [r4, #8]
 8010050:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8010054:	432a      	orrs	r2, r5
 8010056:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010058:	07df      	lsls	r7, r3, #31
 801005a:	4604      	mov	r4, r0
 801005c:	460d      	mov	r5, r1
 801005e:	d522      	bpl.n	80100a6 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010060:	6842      	ldr	r2, [r0, #4]
 8010062:	2a01      	cmp	r2, #1
 8010064:	d057      	beq.n	8010116 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010066:	1e93      	subs	r3, r2, #2
 8010068:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801006a:	4b31      	ldr	r3, [pc, #196]	; (8010130 <HAL_RCC_ClockConfig+0x12c>)
 801006c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801006e:	d959      	bls.n	8010124 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010070:	0799      	lsls	r1, r3, #30
 8010072:	d525      	bpl.n	80100c0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010074:	4e2e      	ldr	r6, [pc, #184]	; (8010130 <HAL_RCC_ClockConfig+0x12c>)
 8010076:	68b3      	ldr	r3, [r6, #8]
 8010078:	f023 0303 	bic.w	r3, r3, #3
 801007c:	4313      	orrs	r3, r2
 801007e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8010080:	f7fe fe68 	bl	800ed54 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010084:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8010088:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801008a:	e005      	b.n	8010098 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801008c:	f7fe fe62 	bl	800ed54 <HAL_GetTick>
 8010090:	eba0 0008 	sub.w	r0, r0, r8
 8010094:	42b8      	cmp	r0, r7
 8010096:	d843      	bhi.n	8010120 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010098:	68b3      	ldr	r3, [r6, #8]
 801009a:	6862      	ldr	r2, [r4, #4]
 801009c:	f003 030c 	and.w	r3, r3, #12
 80100a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80100a4:	d1f2      	bne.n	801008c <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80100a6:	4a21      	ldr	r2, [pc, #132]	; (801012c <HAL_RCC_ClockConfig+0x128>)
 80100a8:	6813      	ldr	r3, [r2, #0]
 80100aa:	f003 030f 	and.w	r3, r3, #15
 80100ae:	42ab      	cmp	r3, r5
 80100b0:	d909      	bls.n	80100c6 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80100b2:	b2eb      	uxtb	r3, r5
 80100b4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80100b6:	6813      	ldr	r3, [r2, #0]
 80100b8:	f003 030f 	and.w	r3, r3, #15
 80100bc:	42ab      	cmp	r3, r5
 80100be:	d002      	beq.n	80100c6 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 80100c0:	2001      	movs	r0, #1
}
 80100c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80100c6:	6823      	ldr	r3, [r4, #0]
 80100c8:	075a      	lsls	r2, r3, #29
 80100ca:	d506      	bpl.n	80100da <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80100cc:	4918      	ldr	r1, [pc, #96]	; (8010130 <HAL_RCC_ClockConfig+0x12c>)
 80100ce:	68e0      	ldr	r0, [r4, #12]
 80100d0:	688a      	ldr	r2, [r1, #8]
 80100d2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80100d6:	4302      	orrs	r2, r0
 80100d8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80100da:	071b      	lsls	r3, r3, #28
 80100dc:	d412      	bmi.n	8010104 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80100de:	f7ff ff5b 	bl	800ff98 <HAL_RCC_GetSysClockFreq>
 80100e2:	4b13      	ldr	r3, [pc, #76]	; (8010130 <HAL_RCC_ClockConfig+0x12c>)
 80100e4:	4c13      	ldr	r4, [pc, #76]	; (8010134 <HAL_RCC_ClockConfig+0x130>)
 80100e6:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 80100e8:	4913      	ldr	r1, [pc, #76]	; (8010138 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80100ea:	4a14      	ldr	r2, [pc, #80]	; (801013c <HAL_RCC_ClockConfig+0x138>)
 80100ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80100f0:	5ce3      	ldrb	r3, [r4, r3]
 80100f2:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80100f6:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80100f8:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80100fa:	f7fe fde1 	bl	800ecc0 <HAL_InitTick>
  return HAL_OK;
 80100fe:	2000      	movs	r0, #0
}
 8010100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010104:	4a0a      	ldr	r2, [pc, #40]	; (8010130 <HAL_RCC_ClockConfig+0x12c>)
 8010106:	6921      	ldr	r1, [r4, #16]
 8010108:	6893      	ldr	r3, [r2, #8]
 801010a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 801010e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8010112:	6093      	str	r3, [r2, #8]
 8010114:	e7e3      	b.n	80100de <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010116:	4b06      	ldr	r3, [pc, #24]	; (8010130 <HAL_RCC_ClockConfig+0x12c>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	039e      	lsls	r6, r3, #14
 801011c:	d4aa      	bmi.n	8010074 <HAL_RCC_ClockConfig+0x70>
 801011e:	e7cf      	b.n	80100c0 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8010120:	2003      	movs	r0, #3
 8010122:	e7ed      	b.n	8010100 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010124:	0198      	lsls	r0, r3, #6
 8010126:	d4a5      	bmi.n	8010074 <HAL_RCC_ClockConfig+0x70>
 8010128:	e7ca      	b.n	80100c0 <HAL_RCC_ClockConfig+0xbc>
 801012a:	bf00      	nop
 801012c:	40023c00 	.word	0x40023c00
 8010130:	40023800 	.word	0x40023800
 8010134:	08016de8 	.word	0x08016de8
 8010138:	20000014 	.word	0x20000014
 801013c:	20000004 	.word	0x20000004

08010140 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010140:	4b04      	ldr	r3, [pc, #16]	; (8010154 <HAL_RCC_GetPCLK1Freq+0x14>)
 8010142:	4a05      	ldr	r2, [pc, #20]	; (8010158 <HAL_RCC_GetPCLK1Freq+0x18>)
 8010144:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8010146:	4905      	ldr	r1, [pc, #20]	; (801015c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010148:	f3c3 2382 	ubfx	r3, r3, #10, #3
 801014c:	6808      	ldr	r0, [r1, #0]
 801014e:	5cd3      	ldrb	r3, [r2, r3]
}
 8010150:	40d8      	lsrs	r0, r3
 8010152:	4770      	bx	lr
 8010154:	40023800 	.word	0x40023800
 8010158:	08016df8 	.word	0x08016df8
 801015c:	20000004 	.word	0x20000004

08010160 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010160:	4b04      	ldr	r3, [pc, #16]	; (8010174 <HAL_RCC_GetPCLK2Freq+0x14>)
 8010162:	4a05      	ldr	r2, [pc, #20]	; (8010178 <HAL_RCC_GetPCLK2Freq+0x18>)
 8010164:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8010166:	4905      	ldr	r1, [pc, #20]	; (801017c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010168:	f3c3 3342 	ubfx	r3, r3, #13, #3
 801016c:	6808      	ldr	r0, [r1, #0]
 801016e:	5cd3      	ldrb	r3, [r2, r3]
}
 8010170:	40d8      	lsrs	r0, r3
 8010172:	4770      	bx	lr
 8010174:	40023800 	.word	0x40023800
 8010178:	08016df8 	.word	0x08016df8
 801017c:	20000004 	.word	0x20000004

08010180 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8010180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010184:	4607      	mov	r7, r0
 8010186:	460d      	mov	r5, r1
 8010188:	4616      	mov	r6, r2
 801018a:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801018c:	683c      	ldr	r4, [r7, #0]
 801018e:	e001      	b.n	8010194 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010190:	1c73      	adds	r3, r6, #1
 8010192:	d106      	bne.n	80101a2 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010194:	68a0      	ldr	r0, [r4, #8]
 8010196:	ea35 0300 	bics.w	r3, r5, r0
 801019a:	d0f9      	beq.n	8010190 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 801019c:	2000      	movs	r0, #0
}
 801019e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80101a2:	f7fe fdd7 	bl	800ed54 <HAL_GetTick>
 80101a6:	eba0 0008 	sub.w	r0, r0, r8
 80101aa:	4286      	cmp	r6, r0
 80101ac:	d8ee      	bhi.n	801018c <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80101ae:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80101b2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80101b4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80101b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80101bc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80101be:	d014      	beq.n	80101ea <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80101c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101c2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80101c6:	d007      	beq.n	80101d8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x58>
        hspi->State = HAL_SPI_STATE_READY;
 80101c8:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80101ca:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80101cc:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80101d0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80101d4:	2003      	movs	r0, #3
 80101d6:	e7e2      	b.n	801019e <SPI_WaitFlagStateUntilTimeout.constprop.7+0x1e>
          SPI_RESET_CRC(hspi);
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80101de:	601a      	str	r2, [r3, #0]
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80101e6:	601a      	str	r2, [r3, #0]
 80101e8:	e7ee      	b.n	80101c8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80101ea:	68ba      	ldr	r2, [r7, #8]
 80101ec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80101f0:	d002      	beq.n	80101f8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80101f2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80101f6:	d1e3      	bne.n	80101c0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
          __HAL_SPI_DISABLE(hspi);
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80101fe:	601a      	str	r2, [r3, #0]
 8010200:	e7de      	b.n	80101c0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
 8010202:	bf00      	nop

08010204 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010204:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010206:	6845      	ldr	r5, [r0, #4]
 8010208:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 801020c:	4604      	mov	r4, r0
 801020e:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010210:	d006      	beq.n	8010220 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010212:	460a      	mov	r2, r1
 8010214:	2101      	movs	r1, #1
 8010216:	f7ff ffb3 	bl	8010180 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 801021a:	b998      	cbnz	r0, 8010244 <SPI_EndRxTransaction+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 801021c:	2000      	movs	r0, #0
}
 801021e:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010220:	6882      	ldr	r2, [r0, #8]
 8010222:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8010226:	d013      	beq.n	8010250 <SPI_EndRxTransaction+0x4c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010228:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801022c:	d115      	bne.n	801025a <SPI_EndRxTransaction+0x56>
    __HAL_SPI_DISABLE(hspi);
 801022e:	6806      	ldr	r6, [r0, #0]
 8010230:	6835      	ldr	r5, [r6, #0]
 8010232:	f025 0540 	bic.w	r5, r5, #64	; 0x40
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010236:	460a      	mov	r2, r1
    __HAL_SPI_DISABLE(hspi);
 8010238:	6035      	str	r5, [r6, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801023a:	2101      	movs	r1, #1
 801023c:	f7ff ffa0 	bl	8010180 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8010240:	2800      	cmp	r0, #0
 8010242:	d0eb      	beq.n	801021c <SPI_EndRxTransaction+0x18>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010244:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010246:	f043 0320 	orr.w	r3, r3, #32
 801024a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 801024c:	2003      	movs	r0, #3
}
 801024e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPI_DISABLE(hspi);
 8010250:	6800      	ldr	r0, [r0, #0]
 8010252:	6802      	ldr	r2, [r0, #0]
 8010254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010258:	6002      	str	r2, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801025a:	460a      	mov	r2, r1
 801025c:	4620      	mov	r0, r4
 801025e:	2180      	movs	r1, #128	; 0x80
 8010260:	f7ff ff8e 	bl	8010180 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8010264:	2800      	cmp	r0, #0
 8010266:	d1ed      	bne.n	8010244 <SPI_EndRxTransaction+0x40>
  return HAL_OK;
 8010268:	2000      	movs	r0, #0
 801026a:	e7d8      	b.n	801021e <SPI_EndRxTransaction+0x1a>

0801026c <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801026c:	4b16      	ldr	r3, [pc, #88]	; (80102c8 <SPI_EndRxTxTransaction+0x5c>)
{
 801026e:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	4d16      	ldr	r5, [pc, #88]	; (80102cc <SPI_EndRxTxTransaction+0x60>)
 8010274:	fba5 5303 	umull	r5, r3, r5, r3
 8010278:	0d5b      	lsrs	r3, r3, #21
 801027a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801027e:	fb05 f303 	mul.w	r3, r5, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010282:	6845      	ldr	r5, [r0, #4]
{
 8010284:	b083      	sub	sp, #12
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010286:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 801028a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801028c:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801028e:	d107      	bne.n	80102a0 <SPI_EndRxTxTransaction+0x34>
 8010290:	e00c      	b.n	80102ac <SPI_EndRxTxTransaction+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8010292:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010294:	6822      	ldr	r2, [r4, #0]
      count--;
 8010296:	3b01      	subs	r3, #1
 8010298:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801029a:	6893      	ldr	r3, [r2, #8]
 801029c:	061b      	lsls	r3, r3, #24
 801029e:	d502      	bpl.n	80102a6 <SPI_EndRxTxTransaction+0x3a>
      if (count == 0U)
 80102a0:	9b01      	ldr	r3, [sp, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d1f5      	bne.n	8010292 <SPI_EndRxTxTransaction+0x26>
  }

  return HAL_OK;
 80102a6:	2000      	movs	r0, #0
}
 80102a8:	b003      	add	sp, #12
 80102aa:	bd30      	pop	{r4, r5, pc}
 80102ac:	4613      	mov	r3, r2
 80102ae:	460a      	mov	r2, r1
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80102b0:	2180      	movs	r1, #128	; 0x80
 80102b2:	f7ff ff65 	bl	8010180 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 80102b6:	2800      	cmp	r0, #0
 80102b8:	d0f5      	beq.n	80102a6 <SPI_EndRxTxTransaction+0x3a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80102ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80102bc:	f043 0320 	orr.w	r3, r3, #32
 80102c0:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80102c2:	2003      	movs	r0, #3
 80102c4:	e7f0      	b.n	80102a8 <SPI_EndRxTxTransaction+0x3c>
 80102c6:	bf00      	nop
 80102c8:	20000004 	.word	0x20000004
 80102cc:	165e9f81 	.word	0x165e9f81

080102d0 <HAL_SPI_TransmitReceive.part.3>:
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 80102d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102d4:	4604      	mov	r4, r0
 80102d6:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 80102d8:	2001      	movs	r0, #1
 80102da:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 80102de:	4691      	mov	r9, r2
 80102e0:	4698      	mov	r8, r3
 80102e2:	460f      	mov	r7, r1
 80102e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  tickstart = HAL_GetTick();
 80102e6:	f7fe fd35 	bl	800ed54 <HAL_GetTick>
  tmp_state           = hspi->State;
 80102ea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80102ee:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80102f0:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80102f2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80102f4:	4606      	mov	r6, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80102f6:	d011      	beq.n	801031c <HAL_SPI_TransmitReceive.part.3+0x4c>
 80102f8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80102fc:	d009      	beq.n	8010312 <HAL_SPI_TransmitReceive.part.3+0x42>
    errorcode = HAL_BUSY;
 80102fe:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8010300:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8010302:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8010304:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010308:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 801030c:	b003      	add	sp, #12
 801030e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010312:	68a1      	ldr	r1, [r4, #8]
 8010314:	2900      	cmp	r1, #0
 8010316:	d1f2      	bne.n	80102fe <HAL_SPI_TransmitReceive.part.3+0x2e>
 8010318:	2b04      	cmp	r3, #4
 801031a:	d1f0      	bne.n	80102fe <HAL_SPI_TransmitReceive.part.3+0x2e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801031c:	2f00      	cmp	r7, #0
 801031e:	d064      	beq.n	80103ea <HAL_SPI_TransmitReceive.part.3+0x11a>
 8010320:	f1b9 0f00 	cmp.w	r9, #0
 8010324:	d061      	beq.n	80103ea <HAL_SPI_TransmitReceive.part.3+0x11a>
 8010326:	f1b8 0f00 	cmp.w	r8, #0
 801032a:	d05e      	beq.n	80103ea <HAL_SPI_TransmitReceive.part.3+0x11a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801032c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010330:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010332:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010336:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010338:	bf1c      	itt	ne
 801033a:	2305      	movne	r3, #5
 801033c:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010340:	2300      	movs	r3, #0
 8010342:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8010344:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8010348:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801034c:	6808      	ldr	r0, [r1, #0]
  hspi->RxXferSize  = Size;
 801034e:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010352:	0640      	lsls	r0, r0, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010354:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8010356:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 801035a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801035e:	d546      	bpl.n	80103ee <HAL_SPI_TransmitReceive.part.3+0x11e>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010360:	68e3      	ldr	r3, [r4, #12]
 8010362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010366:	d056      	beq.n	8010416 <HAL_SPI_TransmitReceive.part.3+0x146>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010368:	2a00      	cmp	r2, #0
 801036a:	d145      	bne.n	80103f8 <HAL_SPI_TransmitReceive.part.3+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801036c:	783b      	ldrb	r3, [r7, #0]
 801036e:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 8010370:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010372:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8010374:	3b01      	subs	r3, #1
 8010376:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010378:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 801037a:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801037c:	6322      	str	r2, [r4, #48]	; 0x30
        txallowed = 1U;
 801037e:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010380:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010382:	b29b      	uxth	r3, r3
 8010384:	b91b      	cbnz	r3, 801038e <HAL_SPI_TransmitReceive.part.3+0xbe>
 8010386:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8010388:	b29b      	uxth	r3, r3
 801038a:	2b00      	cmp	r3, #0
 801038c:	d038      	beq.n	8010400 <HAL_SPI_TransmitReceive.part.3+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801038e:	6823      	ldr	r3, [r4, #0]
 8010390:	689a      	ldr	r2, [r3, #8]
 8010392:	0791      	lsls	r1, r2, #30
 8010394:	d50f      	bpl.n	80103b6 <HAL_SPI_TransmitReceive.part.3+0xe6>
 8010396:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8010398:	b292      	uxth	r2, r2
 801039a:	b162      	cbz	r2, 80103b6 <HAL_SPI_TransmitReceive.part.3+0xe6>
 801039c:	b15f      	cbz	r7, 80103b6 <HAL_SPI_TransmitReceive.part.3+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801039e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80103a0:	7812      	ldrb	r2, [r2, #0]
 80103a2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80103a4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80103a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80103a8:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 80103aa:	3a01      	subs	r2, #1
 80103ac:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 80103ae:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 80103b0:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80103b2:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 80103b4:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80103b6:	689a      	ldr	r2, [r3, #8]
 80103b8:	07d2      	lsls	r2, r2, #31
 80103ba:	d50d      	bpl.n	80103d8 <HAL_SPI_TransmitReceive.part.3+0x108>
 80103bc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80103be:	b292      	uxth	r2, r2
 80103c0:	b152      	cbz	r2, 80103d8 <HAL_SPI_TransmitReceive.part.3+0x108>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80103c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80103c4:	68db      	ldr	r3, [r3, #12]
 80103c6:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80103c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80103ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80103cc:	3b01      	subs	r3, #1
 80103ce:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 80103d0:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 80103d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80103d4:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 80103d6:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80103d8:	f7fe fcbc 	bl	800ed54 <HAL_GetTick>
 80103dc:	1b80      	subs	r0, r0, r6
 80103de:	4285      	cmp	r5, r0
 80103e0:	d8ce      	bhi.n	8010380 <HAL_SPI_TransmitReceive.part.3+0xb0>
 80103e2:	1c6b      	adds	r3, r5, #1
 80103e4:	d0cc      	beq.n	8010380 <HAL_SPI_TransmitReceive.part.3+0xb0>
        errorcode = HAL_TIMEOUT;
 80103e6:	2003      	movs	r0, #3
 80103e8:	e78a      	b.n	8010300 <HAL_SPI_TransmitReceive.part.3+0x30>
    errorcode = HAL_ERROR;
 80103ea:	2001      	movs	r0, #1
 80103ec:	e788      	b.n	8010300 <HAL_SPI_TransmitReceive.part.3+0x30>
    __HAL_SPI_ENABLE(hspi);
 80103ee:	680b      	ldr	r3, [r1, #0]
 80103f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103f4:	600b      	str	r3, [r1, #0]
 80103f6:	e7b3      	b.n	8010360 <HAL_SPI_TransmitReceive.part.3+0x90>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80103f8:	f1b8 0f01 	cmp.w	r8, #1
 80103fc:	d1bf      	bne.n	801037e <HAL_SPI_TransmitReceive.part.3+0xae>
 80103fe:	e7b5      	b.n	801036c <HAL_SPI_TransmitReceive.part.3+0x9c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010400:	4632      	mov	r2, r6
 8010402:	4629      	mov	r1, r5
 8010404:	4620      	mov	r0, r4
 8010406:	f7ff ff31 	bl	801026c <SPI_EndRxTxTransaction>
 801040a:	2800      	cmp	r0, #0
 801040c:	d043      	beq.n	8010496 <HAL_SPI_TransmitReceive.part.3+0x1c6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801040e:	2320      	movs	r3, #32
 8010410:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8010412:	2001      	movs	r0, #1
 8010414:	e774      	b.n	8010300 <HAL_SPI_TransmitReceive.part.3+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010416:	2a00      	cmp	r2, #0
 8010418:	d034      	beq.n	8010484 <HAL_SPI_TransmitReceive.part.3+0x1b4>
 801041a:	f1b8 0f01 	cmp.w	r8, #1
 801041e:	d031      	beq.n	8010484 <HAL_SPI_TransmitReceive.part.3+0x1b4>
        txallowed = 1U;
 8010420:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010422:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010424:	b29b      	uxth	r3, r3
 8010426:	b91b      	cbnz	r3, 8010430 <HAL_SPI_TransmitReceive.part.3+0x160>
 8010428:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801042a:	b29b      	uxth	r3, r3
 801042c:	2b00      	cmp	r3, #0
 801042e:	d0e7      	beq.n	8010400 <HAL_SPI_TransmitReceive.part.3+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010430:	6823      	ldr	r3, [r4, #0]
 8010432:	689a      	ldr	r2, [r3, #8]
 8010434:	0791      	lsls	r1, r2, #30
 8010436:	d50d      	bpl.n	8010454 <HAL_SPI_TransmitReceive.part.3+0x184>
 8010438:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801043a:	b292      	uxth	r2, r2
 801043c:	b152      	cbz	r2, 8010454 <HAL_SPI_TransmitReceive.part.3+0x184>
 801043e:	b14f      	cbz	r7, 8010454 <HAL_SPI_TransmitReceive.part.3+0x184>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010440:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010442:	f831 2b02 	ldrh.w	r2, [r1], #2
 8010446:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8010448:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801044a:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 801044c:	3a01      	subs	r2, #1
 801044e:	b292      	uxth	r2, r2
 8010450:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 8010452:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010454:	689a      	ldr	r2, [r3, #8]
 8010456:	07d2      	lsls	r2, r2, #31
 8010458:	d50c      	bpl.n	8010474 <HAL_SPI_TransmitReceive.part.3+0x1a4>
 801045a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801045c:	b292      	uxth	r2, r2
 801045e:	b14a      	cbz	r2, 8010474 <HAL_SPI_TransmitReceive.part.3+0x1a4>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010460:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8010468:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801046a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 801046c:	3b01      	subs	r3, #1
 801046e:	b29b      	uxth	r3, r3
 8010470:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8010472:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010474:	f7fe fc6e 	bl	800ed54 <HAL_GetTick>
 8010478:	1b80      	subs	r0, r0, r6
 801047a:	42a8      	cmp	r0, r5
 801047c:	d3d1      	bcc.n	8010422 <HAL_SPI_TransmitReceive.part.3+0x152>
 801047e:	1c68      	adds	r0, r5, #1
 8010480:	d0cf      	beq.n	8010422 <HAL_SPI_TransmitReceive.part.3+0x152>
 8010482:	e7b0      	b.n	80103e6 <HAL_SPI_TransmitReceive.part.3+0x116>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010484:	f837 3b02 	ldrh.w	r3, [r7], #2
 8010488:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 801048a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801048c:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 801048e:	3b01      	subs	r3, #1
 8010490:	b29b      	uxth	r3, r3
 8010492:	86e3      	strh	r3, [r4, #54]	; 0x36
 8010494:	e7c4      	b.n	8010420 <HAL_SPI_TransmitReceive.part.3+0x150>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010496:	68a3      	ldr	r3, [r4, #8]
 8010498:	2b00      	cmp	r3, #0
 801049a:	f47f af31 	bne.w	8010300 <HAL_SPI_TransmitReceive.part.3+0x30>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801049e:	6823      	ldr	r3, [r4, #0]
 80104a0:	9001      	str	r0, [sp, #4]
 80104a2:	68da      	ldr	r2, [r3, #12]
 80104a4:	9201      	str	r2, [sp, #4]
 80104a6:	689b      	ldr	r3, [r3, #8]
 80104a8:	9301      	str	r3, [sp, #4]
 80104aa:	9b01      	ldr	r3, [sp, #4]
 80104ac:	e728      	b.n	8010300 <HAL_SPI_TransmitReceive.part.3+0x30>
 80104ae:	bf00      	nop

080104b0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80104b0:	2800      	cmp	r0, #0
 80104b2:	d03b      	beq.n	801052c <HAL_SPI_Init+0x7c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80104b4:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80104b8:	2300      	movs	r3, #0
{
 80104ba:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 80104bc:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80104c0:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80104c2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80104c4:	b362      	cbz	r2, 8010520 <HAL_SPI_Init+0x70>
 80104c6:	4618      	mov	r0, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80104c8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80104cc:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80104d0:	432b      	orrs	r3, r5
 80104d2:	4313      	orrs	r3, r2
 80104d4:	6962      	ldr	r2, [r4, #20]
 80104d6:	69e5      	ldr	r5, [r4, #28]
 80104d8:	6a26      	ldr	r6, [r4, #32]
 80104da:	430b      	orrs	r3, r1
 80104dc:	4313      	orrs	r3, r2
 80104de:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 80104e0:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80104e2:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 80104e4:	2502      	movs	r5, #2
 80104e6:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80104ea:	4333      	orrs	r3, r6
 80104ec:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 80104f0:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80104f2:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80104f4:	0c12      	lsrs	r2, r2, #16
 80104f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80104f8:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80104fc:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80104fe:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8010500:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8010504:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010506:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010508:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801050a:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801050c:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801050e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8010512:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010514:	61cb      	str	r3, [r1, #28]
  return HAL_OK;
 8010516:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010518:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801051a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 801051e:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8010520:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8010524:	f7fc fbe0 	bl	800cce8 <HAL_SPI_MspInit>
 8010528:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801052a:	e7cd      	b.n	80104c8 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 801052c:	2001      	movs	r0, #1
}
 801052e:	4770      	bx	lr

08010530 <HAL_SPI_Transmit>:
{
 8010530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 8010534:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8010538:	2c01      	cmp	r4, #1
{
 801053a:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 801053c:	d073      	beq.n	8010626 <HAL_SPI_Transmit+0xf6>
 801053e:	461d      	mov	r5, r3
 8010540:	2301      	movs	r3, #1
 8010542:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8010546:	4604      	mov	r4, r0
 8010548:	4617      	mov	r7, r2
 801054a:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 801054c:	f7fe fc02 	bl	800ed54 <HAL_GetTick>
 8010550:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8010552:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8010556:	b2c0      	uxtb	r0, r0
 8010558:	2801      	cmp	r0, #1
 801055a:	d009      	beq.n	8010570 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 801055c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 801055e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8010560:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8010562:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010566:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 801056a:	b002      	add	sp, #8
 801056c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8010570:	f1b8 0f00 	cmp.w	r8, #0
 8010574:	d0f3      	beq.n	801055e <HAL_SPI_Transmit+0x2e>
 8010576:	2f00      	cmp	r7, #0
 8010578:	d0f1      	beq.n	801055e <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801057a:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801057c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010580:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010582:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010584:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010588:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801058c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801058e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferSize  = 0U;
 8010590:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8010592:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8010596:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010598:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 801059a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801059c:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801059e:	d103      	bne.n	80105a8 <HAL_SPI_Transmit+0x78>
    SPI_1LINE_TX(hspi);
 80105a0:	681a      	ldr	r2, [r3, #0]
 80105a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80105a6:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	0652      	lsls	r2, r2, #25
 80105ac:	d53f      	bpl.n	801062e <HAL_SPI_Transmit+0xfe>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80105ae:	68e2      	ldr	r2, [r4, #12]
 80105b0:	6861      	ldr	r1, [r4, #4]
 80105b2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80105b6:	d04b      	beq.n	8010650 <HAL_SPI_Transmit+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80105b8:	2900      	cmp	r1, #0
 80105ba:	d13d      	bne.n	8010638 <HAL_SPI_Transmit+0x108>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80105bc:	f898 2000 	ldrb.w	r2, [r8]
 80105c0:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80105c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80105c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80105c6:	3b01      	subs	r3, #1
 80105c8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80105ca:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80105cc:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80105ce:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80105d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	b18b      	cbz	r3, 80105fa <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80105d6:	6823      	ldr	r3, [r4, #0]
 80105d8:	689a      	ldr	r2, [r3, #8]
 80105da:	0792      	lsls	r2, r2, #30
 80105dc:	d52f      	bpl.n	801063e <HAL_SPI_Transmit+0x10e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80105de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80105e0:	7812      	ldrb	r2, [r2, #0]
 80105e2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80105e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80105e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80105e8:	3b01      	subs	r3, #1
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80105ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80105f0:	3101      	adds	r1, #1
    while (hspi->TxXferCount > 0U)
 80105f2:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80105f4:	6321      	str	r1, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d1ed      	bne.n	80105d6 <HAL_SPI_Transmit+0xa6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80105fa:	4632      	mov	r2, r6
 80105fc:	4629      	mov	r1, r5
 80105fe:	4620      	mov	r0, r4
 8010600:	f7ff fe34 	bl	801026c <SPI_EndRxTxTransaction>
 8010604:	b108      	cbz	r0, 801060a <HAL_SPI_Transmit+0xda>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010606:	2320      	movs	r3, #32
 8010608:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801060a:	68a3      	ldr	r3, [r4, #8]
 801060c:	b933      	cbnz	r3, 801061c <HAL_SPI_Transmit+0xec>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801060e:	6822      	ldr	r2, [r4, #0]
 8010610:	9301      	str	r3, [sp, #4]
 8010612:	68d3      	ldr	r3, [r2, #12]
 8010614:	9301      	str	r3, [sp, #4]
 8010616:	6893      	ldr	r3, [r2, #8]
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801061c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 801061e:	3000      	adds	r0, #0
 8010620:	bf18      	it	ne
 8010622:	2001      	movne	r0, #1
error:
 8010624:	e79b      	b.n	801055e <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8010626:	2002      	movs	r0, #2
}
 8010628:	b002      	add	sp, #8
 801062a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010634:	601a      	str	r2, [r3, #0]
 8010636:	e7ba      	b.n	80105ae <HAL_SPI_Transmit+0x7e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010638:	2f01      	cmp	r7, #1
 801063a:	d1c9      	bne.n	80105d0 <HAL_SPI_Transmit+0xa0>
 801063c:	e7be      	b.n	80105bc <HAL_SPI_Transmit+0x8c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801063e:	f7fe fb89 	bl	800ed54 <HAL_GetTick>
 8010642:	1b80      	subs	r0, r0, r6
 8010644:	42a8      	cmp	r0, r5
 8010646:	d3c3      	bcc.n	80105d0 <HAL_SPI_Transmit+0xa0>
 8010648:	1c6b      	adds	r3, r5, #1
 801064a:	d0c1      	beq.n	80105d0 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 801064c:	2003      	movs	r0, #3
 801064e:	e786      	b.n	801055e <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010650:	b311      	cbz	r1, 8010698 <HAL_SPI_Transmit+0x168>
 8010652:	2f01      	cmp	r7, #1
 8010654:	d020      	beq.n	8010698 <HAL_SPI_Transmit+0x168>
    while (hspi->TxXferCount > 0U)
 8010656:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010658:	b29b      	uxth	r3, r3
 801065a:	2b00      	cmp	r3, #0
 801065c:	d0cd      	beq.n	80105fa <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801065e:	6823      	ldr	r3, [r4, #0]
 8010660:	689a      	ldr	r2, [r3, #8]
 8010662:	0790      	lsls	r0, r2, #30
 8010664:	d510      	bpl.n	8010688 <HAL_SPI_Transmit+0x158>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010666:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010668:	f832 1b02 	ldrh.w	r1, [r2], #2
 801066c:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 801066e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010670:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8010672:	3b01      	subs	r3, #1
 8010674:	b29b      	uxth	r3, r3
 8010676:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8010678:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801067a:	b29b      	uxth	r3, r3
 801067c:	2b00      	cmp	r3, #0
 801067e:	d0bc      	beq.n	80105fa <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010680:	6823      	ldr	r3, [r4, #0]
 8010682:	689a      	ldr	r2, [r3, #8]
 8010684:	0790      	lsls	r0, r2, #30
 8010686:	d4ee      	bmi.n	8010666 <HAL_SPI_Transmit+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010688:	f7fe fb64 	bl	800ed54 <HAL_GetTick>
 801068c:	1b80      	subs	r0, r0, r6
 801068e:	42a8      	cmp	r0, r5
 8010690:	d3e1      	bcc.n	8010656 <HAL_SPI_Transmit+0x126>
 8010692:	1c69      	adds	r1, r5, #1
 8010694:	d0df      	beq.n	8010656 <HAL_SPI_Transmit+0x126>
 8010696:	e7d9      	b.n	801064c <HAL_SPI_Transmit+0x11c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010698:	4641      	mov	r1, r8
 801069a:	f831 2b02 	ldrh.w	r2, [r1], #2
 801069e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80106a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80106a2:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80106a4:	3b01      	subs	r3, #1
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80106aa:	e7d4      	b.n	8010656 <HAL_SPI_Transmit+0x126>

080106ac <HAL_SPI_Receive>:
{
 80106ac:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80106b0:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80106b2:	6842      	ldr	r2, [r0, #4]
 80106b4:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
 80106b8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80106bc:	b082      	sub	sp, #8
 80106be:	4604      	mov	r4, r0
 80106c0:	461f      	mov	r7, r3
 80106c2:	4689      	mov	r9, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80106c4:	d016      	beq.n	80106f4 <HAL_SPI_Receive+0x48>
  __HAL_LOCK(hspi);
 80106c6:	2d01      	cmp	r5, #1
 80106c8:	d024      	beq.n	8010714 <HAL_SPI_Receive+0x68>
 80106ca:	2301      	movs	r3, #1
 80106cc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80106d0:	f7fe fb40 	bl	800ed54 <HAL_GetTick>
 80106d4:	4605      	mov	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80106d6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80106da:	b2c0      	uxtb	r0, r0
 80106dc:	2801      	cmp	r0, #1
 80106de:	d01d      	beq.n	801071c <HAL_SPI_Receive+0x70>
    errorcode = HAL_BUSY;
 80106e0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80106e2:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80106e4:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80106e6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80106ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80106ee:	b002      	add	sp, #8
 80106f0:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80106f4:	6883      	ldr	r3, [r0, #8]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d1e5      	bne.n	80106c6 <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80106fa:	2304      	movs	r3, #4
  __HAL_LOCK(hspi);
 80106fc:	2d01      	cmp	r5, #1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80106fe:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_LOCK(hspi);
 8010702:	d007      	beq.n	8010714 <HAL_SPI_Receive+0x68>
 8010704:	9700      	str	r7, [sp, #0]
 8010706:	4633      	mov	r3, r6
 8010708:	460a      	mov	r2, r1
 801070a:	f7ff fde1 	bl	80102d0 <HAL_SPI_TransmitReceive.part.3>
}
 801070e:	b002      	add	sp, #8
 8010710:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  __HAL_LOCK(hspi);
 8010714:	2002      	movs	r0, #2
}
 8010716:	b002      	add	sp, #8
 8010718:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 801071c:	f1b9 0f00 	cmp.w	r9, #0
 8010720:	d0df      	beq.n	80106e2 <HAL_SPI_Receive+0x36>
 8010722:	2e00      	cmp	r6, #0
 8010724:	d0dd      	beq.n	80106e2 <HAL_SPI_Receive+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010726:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010728:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801072c:	2304      	movs	r3, #4
 801072e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010732:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010736:	f04f 0300 	mov.w	r3, #0
 801073a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801073c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801073e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 8010740:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8010744:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010746:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8010748:	86e3      	strh	r3, [r4, #54]	; 0x36
 801074a:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801074c:	d050      	beq.n	80107f0 <HAL_SPI_Receive+0x144>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801074e:	681a      	ldr	r2, [r3, #0]
 8010750:	0656      	lsls	r6, r2, #25
 8010752:	d403      	bmi.n	801075c <HAL_SPI_Receive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801075a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801075c:	68e3      	ldr	r3, [r4, #12]
 801075e:	bb43      	cbnz	r3, 80107b2 <HAL_SPI_Receive+0x106>
    while (hspi->RxXferCount > 0U)
 8010760:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8010762:	b289      	uxth	r1, r1
 8010764:	b189      	cbz	r1, 801078a <HAL_SPI_Receive+0xde>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010766:	6823      	ldr	r3, [r4, #0]
 8010768:	689a      	ldr	r2, [r3, #8]
 801076a:	07d0      	lsls	r0, r2, #31
 801076c:	d537      	bpl.n	80107de <HAL_SPI_Receive+0x132>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801076e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010770:	7b1b      	ldrb	r3, [r3, #12]
 8010772:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8010774:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010776:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8010778:	3b01      	subs	r3, #1
 801077a:	b29b      	uxth	r3, r3
 801077c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 801077e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010780:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 8010782:	b289      	uxth	r1, r1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010784:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8010786:	2900      	cmp	r1, #0
 8010788:	d1ed      	bne.n	8010766 <HAL_SPI_Receive+0xba>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801078a:	462a      	mov	r2, r5
 801078c:	4639      	mov	r1, r7
 801078e:	4620      	mov	r0, r4
 8010790:	f7ff fd38 	bl	8010204 <SPI_EndRxTransaction>
 8010794:	b108      	cbz	r0, 801079a <HAL_SPI_Receive+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010796:	2320      	movs	r3, #32
 8010798:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801079a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 801079c:	3000      	adds	r0, #0
 801079e:	bf18      	it	ne
 80107a0:	2001      	movne	r0, #1
error :
 80107a2:	e79e      	b.n	80106e2 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80107a4:	f7fe fad6 	bl	800ed54 <HAL_GetTick>
 80107a8:	1b40      	subs	r0, r0, r5
 80107aa:	42b8      	cmp	r0, r7
 80107ac:	d301      	bcc.n	80107b2 <HAL_SPI_Receive+0x106>
 80107ae:	1c7b      	adds	r3, r7, #1
 80107b0:	d11c      	bne.n	80107ec <HAL_SPI_Receive+0x140>
    while (hspi->RxXferCount > 0U)
 80107b2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80107b4:	b289      	uxth	r1, r1
 80107b6:	2900      	cmp	r1, #0
 80107b8:	d0e7      	beq.n	801078a <HAL_SPI_Receive+0xde>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80107ba:	6823      	ldr	r3, [r4, #0]
 80107bc:	689a      	ldr	r2, [r3, #8]
 80107be:	07d2      	lsls	r2, r2, #31
 80107c0:	d5f0      	bpl.n	80107a4 <HAL_SPI_Receive+0xf8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80107c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80107ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80107cc:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80107ce:	3b01      	subs	r3, #1
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80107d4:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80107d6:	b289      	uxth	r1, r1
 80107d8:	2900      	cmp	r1, #0
 80107da:	d1ee      	bne.n	80107ba <HAL_SPI_Receive+0x10e>
 80107dc:	e7d5      	b.n	801078a <HAL_SPI_Receive+0xde>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80107de:	f7fe fab9 	bl	800ed54 <HAL_GetTick>
 80107e2:	1b40      	subs	r0, r0, r5
 80107e4:	42b8      	cmp	r0, r7
 80107e6:	d3bb      	bcc.n	8010760 <HAL_SPI_Receive+0xb4>
 80107e8:	1c79      	adds	r1, r7, #1
 80107ea:	d0b9      	beq.n	8010760 <HAL_SPI_Receive+0xb4>
          errorcode = HAL_TIMEOUT;
 80107ec:	2003      	movs	r0, #3
 80107ee:	e778      	b.n	80106e2 <HAL_SPI_Receive+0x36>
    SPI_1LINE_RX(hspi);
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80107f6:	601a      	str	r2, [r3, #0]
 80107f8:	e7a9      	b.n	801074e <HAL_SPI_Receive+0xa2>
 80107fa:	bf00      	nop

080107fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80107fc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80107fe:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010800:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8010802:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010804:	4d14      	ldr	r5, [pc, #80]	; (8010858 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010806:	f024 0401 	bic.w	r4, r4, #1
 801080a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 801080c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801080e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8010810:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8010812:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010816:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801081a:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 801081c:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 8010820:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010824:	d00a      	beq.n	801083c <TIM_OC1_SetConfig+0x40>
 8010826:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801082a:	42a8      	cmp	r0, r5
 801082c:	d006      	beq.n	801083c <TIM_OC1_SetConfig+0x40>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801082e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010830:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8010832:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8010834:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8010836:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8010838:	6203      	str	r3, [r0, #32]
}
 801083a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 801083c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 801083e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8010842:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8010844:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010848:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 801084c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 801084e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8010852:	432c      	orrs	r4, r5
 8010854:	e7eb      	b.n	801082e <TIM_OC1_SetConfig+0x32>
 8010856:	bf00      	nop
 8010858:	40010000 	.word	0x40010000

0801085c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801085c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801085e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010860:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8010862:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010864:	4d15      	ldr	r5, [pc, #84]	; (80108bc <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010866:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 801086a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 801086c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801086e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8010870:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8010872:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010876:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801087a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801087c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8010880:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010884:	d00a      	beq.n	801089c <TIM_OC3_SetConfig+0x40>
 8010886:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801088a:	42a8      	cmp	r0, r5
 801088c:	d006      	beq.n	801089c <TIM_OC3_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801088e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010890:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8010892:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8010894:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8010896:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8010898:	6203      	str	r3, [r0, #32]
}
 801089a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801089c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 801089e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80108a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80108a6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80108aa:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80108ae:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80108b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80108b4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80108b8:	e7e9      	b.n	801088e <TIM_OC3_SetConfig+0x32>
 80108ba:	bf00      	nop
 80108bc:	40010000 	.word	0x40010000

080108c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80108c0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80108c2:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80108c4:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108c6:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108c8:	4d10      	ldr	r5, [pc, #64]	; (801090c <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80108ca:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80108ce:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80108d0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80108d2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80108d4:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80108d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80108da:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108de:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80108e0:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108e4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108e8:	d00a      	beq.n	8010900 <TIM_OC4_SetConfig+0x40>
 80108ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80108ee:	42a8      	cmp	r0, r5
 80108f0:	d006      	beq.n	8010900 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80108f2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80108f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80108f6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80108f8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 80108fa:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80108fc:	6203      	str	r3, [r0, #32]
}
 80108fe:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010900:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010902:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010906:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 801090a:	e7f2      	b.n	80108f2 <TIM_OC4_SetConfig+0x32>
 801090c:	40010000 	.word	0x40010000

08010910 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010910:	6803      	ldr	r3, [r0, #0]
 8010912:	68da      	ldr	r2, [r3, #12]
 8010914:	f042 0201 	orr.w	r2, r2, #1
 8010918:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801091a:	689a      	ldr	r2, [r3, #8]
 801091c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010920:	2a06      	cmp	r2, #6
 8010922:	d003      	beq.n	801092c <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	f042 0201 	orr.w	r2, r2, #1
 801092a:	601a      	str	r2, [r3, #0]
}
 801092c:	2000      	movs	r0, #0
 801092e:	4770      	bx	lr

08010930 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010930:	6803      	ldr	r3, [r0, #0]
 8010932:	68da      	ldr	r2, [r3, #12]
 8010934:	f022 0201 	bic.w	r2, r2, #1
 8010938:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 801093a:	6a19      	ldr	r1, [r3, #32]
 801093c:	f241 1211 	movw	r2, #4369	; 0x1111
 8010940:	4211      	tst	r1, r2
 8010942:	d108      	bne.n	8010956 <HAL_TIM_Base_Stop_IT+0x26>
 8010944:	6a19      	ldr	r1, [r3, #32]
 8010946:	f240 4244 	movw	r2, #1092	; 0x444
 801094a:	4211      	tst	r1, r2
 801094c:	d103      	bne.n	8010956 <HAL_TIM_Base_Stop_IT+0x26>
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	f022 0201 	bic.w	r2, r2, #1
 8010954:	601a      	str	r2, [r3, #0]
}
 8010956:	2000      	movs	r0, #0
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop

0801095c <HAL_TIM_OC_MspInit>:
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop

08010960 <HAL_TIM_OC_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010960:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010962:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010964:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010966:	f001 011f 	and.w	r1, r1, #31
 801096a:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 801096e:	ea20 0001 	bic.w	r0, r0, r1
{
 8010972:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8010974:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010976:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010978:	4c0c      	ldr	r4, [pc, #48]	; (80109ac <HAL_TIM_OC_Start+0x4c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801097a:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801097c:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801097e:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010980:	d00f      	beq.n	80109a2 <HAL_TIM_OC_Start+0x42>
 8010982:	4a0b      	ldr	r2, [pc, #44]	; (80109b0 <HAL_TIM_OC_Start+0x50>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d00c      	beq.n	80109a2 <HAL_TIM_OC_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010988:	689a      	ldr	r2, [r3, #8]
 801098a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801098e:	2a06      	cmp	r2, #6
 8010990:	d003      	beq.n	801099a <HAL_TIM_OC_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	f042 0201 	orr.w	r2, r2, #1
 8010998:	601a      	str	r2, [r3, #0]
}
 801099a:	2000      	movs	r0, #0
 801099c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109a0:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80109a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80109a8:	645a      	str	r2, [r3, #68]	; 0x44
 80109aa:	e7ed      	b.n	8010988 <HAL_TIM_OC_Start+0x28>
 80109ac:	40010000 	.word	0x40010000
 80109b0:	40010400 	.word	0x40010400

080109b4 <HAL_TIM_OC_Start_IT>:
{
 80109b4:	b410      	push	{r4}
 80109b6:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 80109b8:	290c      	cmp	r1, #12
 80109ba:	d80c      	bhi.n	80109d6 <HAL_TIM_OC_Start_IT+0x22>
 80109bc:	e8df f001 	tbb	[pc, r1]
 80109c0:	0b0b0b07 	.word	0x0b0b0b07
 80109c4:	0b0b0b39 	.word	0x0b0b0b39
 80109c8:	0b0b0b34 	.word	0x0b0b0b34
 80109cc:	2f          	.byte	0x2f
 80109cd:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80109ce:	68da      	ldr	r2, [r3, #12]
 80109d0:	f042 0202 	orr.w	r2, r2, #2
 80109d4:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 80109d6:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80109d8:	4c18      	ldr	r4, [pc, #96]	; (8010a3c <HAL_TIM_OC_Start_IT+0x88>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80109da:	f001 021f 	and.w	r2, r1, #31
 80109de:	2101      	movs	r1, #1
 80109e0:	4091      	lsls	r1, r2
  TIMx->CCER &= ~tmp;
 80109e2:	ea20 0001 	bic.w	r0, r0, r1
 80109e6:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80109e8:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80109ea:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80109ec:	ea41 0102 	orr.w	r1, r1, r2
 80109f0:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80109f2:	d00f      	beq.n	8010a14 <HAL_TIM_OC_Start_IT+0x60>
 80109f4:	4a12      	ldr	r2, [pc, #72]	; (8010a40 <HAL_TIM_OC_Start_IT+0x8c>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	d00c      	beq.n	8010a14 <HAL_TIM_OC_Start_IT+0x60>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80109fa:	689a      	ldr	r2, [r3, #8]
 80109fc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a00:	2a06      	cmp	r2, #6
 8010a02:	d003      	beq.n	8010a0c <HAL_TIM_OC_Start_IT+0x58>
    __HAL_TIM_ENABLE(htim);
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	f042 0201 	orr.w	r2, r2, #1
 8010a0a:	601a      	str	r2, [r3, #0]
}
 8010a0c:	2000      	movs	r0, #0
 8010a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a12:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8010a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010a1a:	645a      	str	r2, [r3, #68]	; 0x44
 8010a1c:	e7ed      	b.n	80109fa <HAL_TIM_OC_Start_IT+0x46>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010a1e:	68da      	ldr	r2, [r3, #12]
 8010a20:	f042 0210 	orr.w	r2, r2, #16
 8010a24:	60da      	str	r2, [r3, #12]
      break;
 8010a26:	e7d6      	b.n	80109d6 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010a28:	68da      	ldr	r2, [r3, #12]
 8010a2a:	f042 0208 	orr.w	r2, r2, #8
 8010a2e:	60da      	str	r2, [r3, #12]
      break;
 8010a30:	e7d1      	b.n	80109d6 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010a32:	68da      	ldr	r2, [r3, #12]
 8010a34:	f042 0204 	orr.w	r2, r2, #4
 8010a38:	60da      	str	r2, [r3, #12]
      break;
 8010a3a:	e7cc      	b.n	80109d6 <HAL_TIM_OC_Start_IT+0x22>
 8010a3c:	40010000 	.word	0x40010000
 8010a40:	40010400 	.word	0x40010400

08010a44 <HAL_TIM_OC_Stop_IT>:
{
 8010a44:	b410      	push	{r4}
 8010a46:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010a48:	290c      	cmp	r1, #12
 8010a4a:	d80c      	bhi.n	8010a66 <HAL_TIM_OC_Stop_IT+0x22>
 8010a4c:	e8df f001 	tbb	[pc, r1]
 8010a50:	0b0b0b07 	.word	0x0b0b0b07
 8010a54:	0b0b0b47 	.word	0x0b0b0b47
 8010a58:	0b0b0b42 	.word	0x0b0b0b42
 8010a5c:	3d          	.byte	0x3d
 8010a5d:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010a5e:	68da      	ldr	r2, [r3, #12]
 8010a60:	f022 0202 	bic.w	r2, r2, #2
 8010a64:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 8010a66:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a68:	4c1f      	ldr	r4, [pc, #124]	; (8010ae8 <HAL_TIM_OC_Stop_IT+0xa4>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010a6a:	f001 011f 	and.w	r1, r1, #31
 8010a6e:	2001      	movs	r0, #1
 8010a70:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 8010a74:	ea22 0101 	bic.w	r1, r2, r1
 8010a78:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010a7a:	6a1a      	ldr	r2, [r3, #32]
 8010a7c:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a7e:	42a3      	cmp	r3, r4
 8010a80:	d014      	beq.n	8010aac <HAL_TIM_OC_Stop_IT+0x68>
 8010a82:	4a1a      	ldr	r2, [pc, #104]	; (8010aec <HAL_TIM_OC_Stop_IT+0xa8>)
 8010a84:	4293      	cmp	r3, r2
 8010a86:	d011      	beq.n	8010aac <HAL_TIM_OC_Stop_IT+0x68>
  __HAL_TIM_DISABLE(htim);
 8010a88:	6a19      	ldr	r1, [r3, #32]
 8010a8a:	f241 1211 	movw	r2, #4369	; 0x1111
 8010a8e:	4211      	tst	r1, r2
 8010a90:	d108      	bne.n	8010aa4 <HAL_TIM_OC_Stop_IT+0x60>
 8010a92:	6a19      	ldr	r1, [r3, #32]
 8010a94:	f240 4244 	movw	r2, #1092	; 0x444
 8010a98:	4211      	tst	r1, r2
 8010a9a:	d103      	bne.n	8010aa4 <HAL_TIM_OC_Stop_IT+0x60>
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	f022 0201 	bic.w	r2, r2, #1
 8010aa2:	601a      	str	r2, [r3, #0]
}
 8010aa4:	2000      	movs	r0, #0
 8010aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010aaa:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8010aac:	6a19      	ldr	r1, [r3, #32]
 8010aae:	f241 1211 	movw	r2, #4369	; 0x1111
 8010ab2:	4211      	tst	r1, r2
 8010ab4:	d1e8      	bne.n	8010a88 <HAL_TIM_OC_Stop_IT+0x44>
 8010ab6:	6a19      	ldr	r1, [r3, #32]
 8010ab8:	f240 4244 	movw	r2, #1092	; 0x444
 8010abc:	4211      	tst	r1, r2
 8010abe:	d1e3      	bne.n	8010a88 <HAL_TIM_OC_Stop_IT+0x44>
 8010ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010ac6:	645a      	str	r2, [r3, #68]	; 0x44
 8010ac8:	e7de      	b.n	8010a88 <HAL_TIM_OC_Stop_IT+0x44>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010aca:	68da      	ldr	r2, [r3, #12]
 8010acc:	f022 0210 	bic.w	r2, r2, #16
 8010ad0:	60da      	str	r2, [r3, #12]
      break;
 8010ad2:	e7c8      	b.n	8010a66 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010ad4:	68da      	ldr	r2, [r3, #12]
 8010ad6:	f022 0208 	bic.w	r2, r2, #8
 8010ada:	60da      	str	r2, [r3, #12]
      break;
 8010adc:	e7c3      	b.n	8010a66 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010ade:	68da      	ldr	r2, [r3, #12]
 8010ae0:	f022 0204 	bic.w	r2, r2, #4
 8010ae4:	60da      	str	r2, [r3, #12]
      break;
 8010ae6:	e7be      	b.n	8010a66 <HAL_TIM_OC_Stop_IT+0x22>
 8010ae8:	40010000 	.word	0x40010000
 8010aec:	40010400 	.word	0x40010400

08010af0 <HAL_TIM_PWM_MspInit>:
 8010af0:	4770      	bx	lr
 8010af2:	bf00      	nop

08010af4 <HAL_TIM_PWM_Start>:
 8010af4:	f7ff bf34 	b.w	8010960 <HAL_TIM_OC_Start>

08010af8 <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010af8:	6803      	ldr	r3, [r0, #0]
{
 8010afa:	b430      	push	{r4, r5}
  TIMx->CCER &= ~tmp;
 8010afc:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010afe:	4c19      	ldr	r4, [pc, #100]	; (8010b64 <HAL_TIM_PWM_Stop+0x6c>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010b00:	f001 051f 	and.w	r5, r1, #31
 8010b04:	2101      	movs	r1, #1
 8010b06:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 8010b08:	ea22 0101 	bic.w	r1, r2, r1
 8010b0c:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010b0e:	6a1a      	ldr	r2, [r3, #32]
 8010b10:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010b12:	42a3      	cmp	r3, r4
 8010b14:	d016      	beq.n	8010b44 <HAL_TIM_PWM_Stop+0x4c>
 8010b16:	4a14      	ldr	r2, [pc, #80]	; (8010b68 <HAL_TIM_PWM_Stop+0x70>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d013      	beq.n	8010b44 <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8010b1c:	6a19      	ldr	r1, [r3, #32]
 8010b1e:	f241 1211 	movw	r2, #4369	; 0x1111
 8010b22:	4211      	tst	r1, r2
 8010b24:	d108      	bne.n	8010b38 <HAL_TIM_PWM_Stop+0x40>
 8010b26:	6a19      	ldr	r1, [r3, #32]
 8010b28:	f240 4244 	movw	r2, #1092	; 0x444
 8010b2c:	4211      	tst	r1, r2
 8010b2e:	d103      	bne.n	8010b38 <HAL_TIM_PWM_Stop+0x40>
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	f022 0201 	bic.w	r2, r2, #1
 8010b36:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8010b3e:	bc30      	pop	{r4, r5}
 8010b40:	2000      	movs	r0, #0
 8010b42:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8010b44:	6a19      	ldr	r1, [r3, #32]
 8010b46:	f241 1211 	movw	r2, #4369	; 0x1111
 8010b4a:	4211      	tst	r1, r2
 8010b4c:	d1e6      	bne.n	8010b1c <HAL_TIM_PWM_Stop+0x24>
 8010b4e:	6a19      	ldr	r1, [r3, #32]
 8010b50:	f240 4244 	movw	r2, #1092	; 0x444
 8010b54:	4211      	tst	r1, r2
 8010b56:	d1e1      	bne.n	8010b1c <HAL_TIM_PWM_Stop+0x24>
 8010b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010b5e:	645a      	str	r2, [r3, #68]	; 0x44
 8010b60:	e7dc      	b.n	8010b1c <HAL_TIM_PWM_Stop+0x24>
 8010b62:	bf00      	nop
 8010b64:	40010000 	.word	0x40010000
 8010b68:	40010400 	.word	0x40010400

08010b6c <HAL_TIM_Encoder_Start>:
{
 8010b6c:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010b6e:	b1c1      	cbz	r1, 8010ba2 <HAL_TIM_Encoder_Start+0x36>
 8010b70:	2904      	cmp	r1, #4
 8010b72:	d10d      	bne.n	8010b90 <HAL_TIM_Encoder_Start+0x24>
  TIMx->CCER &= ~tmp;
 8010b74:	6a1a      	ldr	r2, [r3, #32]
 8010b76:	f022 0210 	bic.w	r2, r2, #16
 8010b7a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010b7c:	6a1a      	ldr	r2, [r3, #32]
 8010b7e:	f042 0210 	orr.w	r2, r2, #16
 8010b82:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8010b84:	681a      	ldr	r2, [r3, #0]
 8010b86:	f042 0201 	orr.w	r2, r2, #1
 8010b8a:	601a      	str	r2, [r3, #0]
}
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 8010b90:	6a1a      	ldr	r2, [r3, #32]
 8010b92:	f022 0201 	bic.w	r2, r2, #1
 8010b96:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010b98:	6a1a      	ldr	r2, [r3, #32]
 8010b9a:	f042 0201 	orr.w	r2, r2, #1
 8010b9e:	621a      	str	r2, [r3, #32]
 8010ba0:	e7e8      	b.n	8010b74 <HAL_TIM_Encoder_Start+0x8>
  TIMx->CCER &= ~tmp;
 8010ba2:	6a1a      	ldr	r2, [r3, #32]
 8010ba4:	f022 0201 	bic.w	r2, r2, #1
 8010ba8:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010baa:	6a1a      	ldr	r2, [r3, #32]
 8010bac:	f042 0201 	orr.w	r2, r2, #1
 8010bb0:	621a      	str	r2, [r3, #32]
 8010bb2:	e7e7      	b.n	8010b84 <HAL_TIM_Encoder_Start+0x18>

08010bb4 <HAL_TIM_Encoder_Stop>:
{
 8010bb4:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010bb6:	b1f1      	cbz	r1, 8010bf6 <HAL_TIM_Encoder_Stop+0x42>
 8010bb8:	2904      	cmp	r1, #4
 8010bba:	d115      	bne.n	8010be8 <HAL_TIM_Encoder_Stop+0x34>
  TIMx->CCER &= ~tmp;
 8010bbc:	6a1a      	ldr	r2, [r3, #32]
 8010bbe:	f022 0210 	bic.w	r2, r2, #16
 8010bc2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010bc4:	6a1a      	ldr	r2, [r3, #32]
 8010bc6:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 8010bc8:	6a19      	ldr	r1, [r3, #32]
 8010bca:	f241 1211 	movw	r2, #4369	; 0x1111
 8010bce:	4211      	tst	r1, r2
 8010bd0:	d108      	bne.n	8010be4 <HAL_TIM_Encoder_Stop+0x30>
 8010bd2:	6a19      	ldr	r1, [r3, #32]
 8010bd4:	f240 4244 	movw	r2, #1092	; 0x444
 8010bd8:	4211      	tst	r1, r2
 8010bda:	d103      	bne.n	8010be4 <HAL_TIM_Encoder_Stop+0x30>
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	f022 0201 	bic.w	r2, r2, #1
 8010be2:	601a      	str	r2, [r3, #0]
}
 8010be4:	2000      	movs	r0, #0
 8010be6:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 8010be8:	6a1a      	ldr	r2, [r3, #32]
 8010bea:	f022 0201 	bic.w	r2, r2, #1
 8010bee:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010bf0:	6a1a      	ldr	r2, [r3, #32]
 8010bf2:	621a      	str	r2, [r3, #32]
 8010bf4:	e7e2      	b.n	8010bbc <HAL_TIM_Encoder_Stop+0x8>
  TIMx->CCER &= ~tmp;
 8010bf6:	6a1a      	ldr	r2, [r3, #32]
 8010bf8:	f022 0201 	bic.w	r2, r2, #1
 8010bfc:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010bfe:	6a1a      	ldr	r2, [r3, #32]
 8010c00:	621a      	str	r2, [r3, #32]
 8010c02:	e7e1      	b.n	8010bc8 <HAL_TIM_Encoder_Stop+0x14>

08010c04 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8010c04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	d05a      	beq.n	8010cc2 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8010c0c:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8010c0e:	6803      	ldr	r3, [r0, #0]
{
 8010c10:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8010c12:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8010c16:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8010c18:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c1a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8010c1e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 8010c22:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 8010c24:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8010c26:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8010c2a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8010c2c:	d074      	beq.n	8010d18 <HAL_TIM_ConfigClockSource+0x114>
 8010c2e:	d94a      	bls.n	8010cc6 <HAL_TIM_ConfigClockSource+0xc2>
 8010c30:	2c60      	cmp	r4, #96	; 0x60
 8010c32:	d02d      	beq.n	8010c90 <HAL_TIM_ConfigClockSource+0x8c>
 8010c34:	d956      	bls.n	8010ce4 <HAL_TIM_ConfigClockSource+0xe0>
 8010c36:	2c70      	cmp	r4, #112	; 0x70
 8010c38:	d01a      	beq.n	8010c70 <HAL_TIM_ConfigClockSource+0x6c>
 8010c3a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8010c3e:	d10e      	bne.n	8010c5e <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c40:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8010c44:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8010c46:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c48:	432a      	orrs	r2, r5
 8010c4a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c4e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c52:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8010c54:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010c56:	689a      	ldr	r2, [r3, #8]
 8010c58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010c5c:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8010c5e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010c60:	2201      	movs	r2, #1
 8010c62:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010c66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8010c6a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8010c6c:	4618      	mov	r0, r3
}
 8010c6e:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c70:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8010c74:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8010c76:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c78:	432a      	orrs	r2, r5
 8010c7a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c7e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c82:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8010c84:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8010c86:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010c88:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8010c8c:	609a      	str	r2, [r3, #8]
      break;
 8010c8e:	e7e6      	b.n	8010c5e <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010c90:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010c92:	684d      	ldr	r5, [r1, #4]
 8010c94:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010c96:	f024 0410 	bic.w	r4, r4, #16
 8010c9a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010c9c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8010c9e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010ca0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8010ca8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010cac:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8010cb0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010cb2:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010cb4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010cb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010cba:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8010cbe:	609a      	str	r2, [r3, #8]
 8010cc0:	e7cd      	b.n	8010c5e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8010cc2:	2002      	movs	r0, #2
}
 8010cc4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8010cc6:	2c10      	cmp	r4, #16
 8010cc8:	d004      	beq.n	8010cd4 <HAL_TIM_ConfigClockSource+0xd0>
 8010cca:	d93d      	bls.n	8010d48 <HAL_TIM_ConfigClockSource+0x144>
 8010ccc:	2c20      	cmp	r4, #32
 8010cce:	d001      	beq.n	8010cd4 <HAL_TIM_ConfigClockSource+0xd0>
 8010cd0:	2c30      	cmp	r4, #48	; 0x30
 8010cd2:	d1c4      	bne.n	8010c5e <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8010cd4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010cd6:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8010cda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010cde:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8010ce0:	609c      	str	r4, [r3, #8]
 8010ce2:	e7bc      	b.n	8010c5e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8010ce4:	2c50      	cmp	r4, #80	; 0x50
 8010ce6:	d1ba      	bne.n	8010c5e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8010ce8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010cea:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010cec:	684c      	ldr	r4, [r1, #4]
 8010cee:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010cf0:	f026 0601 	bic.w	r6, r6, #1
 8010cf4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010cf6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010cf8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010cfc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010d00:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8010d04:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8010d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010d08:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010d0a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010d0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010d10:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8010d14:	609a      	str	r2, [r3, #8]
 8010d16:	e7a2      	b.n	8010c5e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8010d18:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d1a:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010d1c:	684c      	ldr	r4, [r1, #4]
 8010d1e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d20:	f026 0601 	bic.w	r6, r6, #1
 8010d24:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010d26:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010d28:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010d2c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010d30:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8010d34:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8010d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010d38:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010d3a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010d3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010d40:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8010d44:	609a      	str	r2, [r3, #8]
 8010d46:	e78a      	b.n	8010c5e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8010d48:	2c00      	cmp	r4, #0
 8010d4a:	d0c3      	beq.n	8010cd4 <HAL_TIM_ConfigClockSource+0xd0>
 8010d4c:	e787      	b.n	8010c5e <HAL_TIM_ConfigClockSource+0x5a>
 8010d4e:	bf00      	nop

08010d50 <HAL_TIM_OC_DelayElapsedCallback>:
 8010d50:	4770      	bx	lr
 8010d52:	bf00      	nop

08010d54 <HAL_TIM_IC_CaptureCallback>:
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop

08010d58 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010d58:	4770      	bx	lr
 8010d5a:	bf00      	nop

08010d5c <HAL_TIM_TriggerCallback>:
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop

08010d60 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010d60:	6803      	ldr	r3, [r0, #0]
 8010d62:	691a      	ldr	r2, [r3, #16]
 8010d64:	0791      	lsls	r1, r2, #30
{
 8010d66:	b510      	push	{r4, lr}
 8010d68:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010d6a:	d502      	bpl.n	8010d72 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010d6c:	68da      	ldr	r2, [r3, #12]
 8010d6e:	0792      	lsls	r2, r2, #30
 8010d70:	d45f      	bmi.n	8010e32 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010d72:	691a      	ldr	r2, [r3, #16]
 8010d74:	0750      	lsls	r0, r2, #29
 8010d76:	d502      	bpl.n	8010d7e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010d78:	68da      	ldr	r2, [r3, #12]
 8010d7a:	0751      	lsls	r1, r2, #29
 8010d7c:	d446      	bmi.n	8010e0c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010d7e:	691a      	ldr	r2, [r3, #16]
 8010d80:	0712      	lsls	r2, r2, #28
 8010d82:	d502      	bpl.n	8010d8a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010d84:	68da      	ldr	r2, [r3, #12]
 8010d86:	0710      	lsls	r0, r2, #28
 8010d88:	d42e      	bmi.n	8010de8 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010d8a:	691a      	ldr	r2, [r3, #16]
 8010d8c:	06d2      	lsls	r2, r2, #27
 8010d8e:	d502      	bpl.n	8010d96 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010d90:	68da      	ldr	r2, [r3, #12]
 8010d92:	06d0      	lsls	r0, r2, #27
 8010d94:	d418      	bmi.n	8010dc8 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010d96:	691a      	ldr	r2, [r3, #16]
 8010d98:	07d1      	lsls	r1, r2, #31
 8010d9a:	d502      	bpl.n	8010da2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010d9c:	68da      	ldr	r2, [r3, #12]
 8010d9e:	07d2      	lsls	r2, r2, #31
 8010da0:	d45d      	bmi.n	8010e5e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010da2:	691a      	ldr	r2, [r3, #16]
 8010da4:	0610      	lsls	r0, r2, #24
 8010da6:	d502      	bpl.n	8010dae <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010da8:	68da      	ldr	r2, [r3, #12]
 8010daa:	0611      	lsls	r1, r2, #24
 8010dac:	d45f      	bmi.n	8010e6e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010dae:	691a      	ldr	r2, [r3, #16]
 8010db0:	0652      	lsls	r2, r2, #25
 8010db2:	d502      	bpl.n	8010dba <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010db4:	68da      	ldr	r2, [r3, #12]
 8010db6:	0650      	lsls	r0, r2, #25
 8010db8:	d461      	bmi.n	8010e7e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010dba:	691a      	ldr	r2, [r3, #16]
 8010dbc:	0691      	lsls	r1, r2, #26
 8010dbe:	d502      	bpl.n	8010dc6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010dc0:	68da      	ldr	r2, [r3, #12]
 8010dc2:	0692      	lsls	r2, r2, #26
 8010dc4:	d443      	bmi.n	8010e4e <HAL_TIM_IRQHandler+0xee>
}
 8010dc6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010dc8:	f06f 0210 	mvn.w	r2, #16
 8010dcc:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010dce:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010dd0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010dd2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010dd6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8010dd8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010dda:	d064      	beq.n	8010ea6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8010ddc:	f7ff ffba 	bl	8010d54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010de0:	2200      	movs	r2, #0
 8010de2:	6823      	ldr	r3, [r4, #0]
 8010de4:	7722      	strb	r2, [r4, #28]
 8010de6:	e7d6      	b.n	8010d96 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010de8:	f06f 0208 	mvn.w	r2, #8
 8010dec:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010dee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010df0:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010df2:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010df4:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8010df6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010df8:	d152      	bne.n	8010ea0 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dfa:	f7ff ffa9 	bl	8010d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f7ff ffaa 	bl	8010d58 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e04:	2200      	movs	r2, #0
 8010e06:	6823      	ldr	r3, [r4, #0]
 8010e08:	7722      	strb	r2, [r4, #28]
 8010e0a:	e7be      	b.n	8010d8a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010e0c:	f06f 0204 	mvn.w	r2, #4
 8010e10:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010e12:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010e14:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010e16:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010e1a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8010e1c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010e1e:	d13c      	bne.n	8010e9a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e20:	f7ff ff96 	bl	8010d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e24:	4620      	mov	r0, r4
 8010e26:	f7ff ff97 	bl	8010d58 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	6823      	ldr	r3, [r4, #0]
 8010e2e:	7722      	strb	r2, [r4, #28]
 8010e30:	e7a5      	b.n	8010d7e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010e32:	f06f 0202 	mvn.w	r2, #2
 8010e36:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010e38:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010e3a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010e3c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010e3e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010e40:	d025      	beq.n	8010e8e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8010e42:	f7ff ff87 	bl	8010d54 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e46:	2200      	movs	r2, #0
 8010e48:	6823      	ldr	r3, [r4, #0]
 8010e4a:	7722      	strb	r2, [r4, #28]
 8010e4c:	e791      	b.n	8010d72 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010e4e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8010e52:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010e54:	611a      	str	r2, [r3, #16]
}
 8010e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8010e5a:	f000 bb11 	b.w	8011480 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010e5e:	f06f 0201 	mvn.w	r2, #1
 8010e62:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8010e64:	4620      	mov	r0, r4
 8010e66:	f7f9 fa17 	bl	800a298 <HAL_TIM_PeriodElapsedCallback>
 8010e6a:	6823      	ldr	r3, [r4, #0]
 8010e6c:	e799      	b.n	8010da2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010e6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010e72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8010e74:	4620      	mov	r0, r4
 8010e76:	f000 fb05 	bl	8011484 <HAL_TIMEx_BreakCallback>
 8010e7a:	6823      	ldr	r3, [r4, #0]
 8010e7c:	e797      	b.n	8010dae <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010e7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010e82:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8010e84:	4620      	mov	r0, r4
 8010e86:	f7ff ff69 	bl	8010d5c <HAL_TIM_TriggerCallback>
 8010e8a:	6823      	ldr	r3, [r4, #0]
 8010e8c:	e795      	b.n	8010dba <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e8e:	f7ff ff5f 	bl	8010d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e92:	4620      	mov	r0, r4
 8010e94:	f7ff ff60 	bl	8010d58 <HAL_TIM_PWM_PulseFinishedCallback>
 8010e98:	e7d5      	b.n	8010e46 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8010e9a:	f7ff ff5b 	bl	8010d54 <HAL_TIM_IC_CaptureCallback>
 8010e9e:	e7c4      	b.n	8010e2a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8010ea0:	f7ff ff58 	bl	8010d54 <HAL_TIM_IC_CaptureCallback>
 8010ea4:	e7ae      	b.n	8010e04 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ea6:	f7ff ff53 	bl	8010d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010eaa:	4620      	mov	r0, r4
 8010eac:	f7ff ff54 	bl	8010d58 <HAL_TIM_PWM_PulseFinishedCallback>
 8010eb0:	e796      	b.n	8010de0 <HAL_TIM_IRQHandler+0x80>
 8010eb2:	bf00      	nop

08010eb4 <TIM_Base_SetConfig>:
{
 8010eb4:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010eb6:	4e36      	ldr	r6, [pc, #216]	; (8010f90 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8010eb8:	6803      	ldr	r3, [r0, #0]
 8010eba:	694d      	ldr	r5, [r1, #20]
 8010ebc:	688c      	ldr	r4, [r1, #8]
 8010ebe:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010ec0:	42b0      	cmp	r0, r6
 8010ec2:	d055      	beq.n	8010f70 <TIM_Base_SetConfig+0xbc>
 8010ec4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010ec8:	d029      	beq.n	8010f1e <TIM_Base_SetConfig+0x6a>
 8010eca:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8010ece:	42b0      	cmp	r0, r6
 8010ed0:	d037      	beq.n	8010f42 <TIM_Base_SetConfig+0x8e>
 8010ed2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010ed6:	42b0      	cmp	r0, r6
 8010ed8:	d033      	beq.n	8010f42 <TIM_Base_SetConfig+0x8e>
 8010eda:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010ede:	42b0      	cmp	r0, r6
 8010ee0:	d02f      	beq.n	8010f42 <TIM_Base_SetConfig+0x8e>
 8010ee2:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8010ee6:	42b0      	cmp	r0, r6
 8010ee8:	d02b      	beq.n	8010f42 <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010eea:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8010eee:	42b0      	cmp	r0, r6
 8010ef0:	d013      	beq.n	8010f1a <TIM_Base_SetConfig+0x66>
 8010ef2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010ef6:	42b0      	cmp	r0, r6
 8010ef8:	d00f      	beq.n	8010f1a <TIM_Base_SetConfig+0x66>
 8010efa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010efe:	42b0      	cmp	r0, r6
 8010f00:	d00b      	beq.n	8010f1a <TIM_Base_SetConfig+0x66>
 8010f02:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8010f06:	42b0      	cmp	r0, r6
 8010f08:	d007      	beq.n	8010f1a <TIM_Base_SetConfig+0x66>
 8010f0a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010f0e:	42b0      	cmp	r0, r6
 8010f10:	d003      	beq.n	8010f1a <TIM_Base_SetConfig+0x66>
 8010f12:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010f16:	42b0      	cmp	r0, r6
 8010f18:	d109      	bne.n	8010f2e <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f1a:	68c9      	ldr	r1, [r1, #12]
 8010f1c:	e004      	b.n	8010f28 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 8010f1e:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f20:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010f26:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f2c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f32:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010f34:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f36:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010f38:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	6143      	str	r3, [r0, #20]
}
 8010f3e:	bcf0      	pop	{r4, r5, r6, r7}
 8010f40:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8010f42:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010f44:	4f13      	ldr	r7, [pc, #76]	; (8010f94 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010f4a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f4c:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f52:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f58:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010f5a:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 8010f5c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f5e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010f60:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010f62:	d1ea      	bne.n	8010f3a <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 8010f64:	690b      	ldr	r3, [r1, #16]
 8010f66:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	6143      	str	r3, [r0, #20]
}
 8010f6c:	bcf0      	pop	{r4, r5, r6, r7}
 8010f6e:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8010f70:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f72:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010f78:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f7e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f84:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010f86:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f88:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010f8a:	6282      	str	r2, [r0, #40]	; 0x28
 8010f8c:	e7ea      	b.n	8010f64 <TIM_Base_SetConfig+0xb0>
 8010f8e:	bf00      	nop
 8010f90:	40010000 	.word	0x40010000
 8010f94:	40010400 	.word	0x40010400

08010f98 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8010f98:	b1b8      	cbz	r0, 8010fca <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010f9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8010f9e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8010fa0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	b15b      	cbz	r3, 8010fc0 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8010fa8:	2302      	movs	r3, #2
 8010faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010fae:	6820      	ldr	r0, [r4, #0]
 8010fb0:	1d21      	adds	r1, r4, #4
 8010fb2:	f7ff ff7f 	bl	8010eb4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8010fbc:	2000      	movs	r0, #0
}
 8010fbe:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8010fc0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8010fc4:	f7fb fec8 	bl	800cd58 <HAL_TIM_Base_MspInit>
 8010fc8:	e7ee      	b.n	8010fa8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8010fca:	2001      	movs	r0, #1
}
 8010fcc:	4770      	bx	lr
 8010fce:	bf00      	nop

08010fd0 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8010fd0:	b1b8      	cbz	r0, 8011002 <HAL_TIM_OC_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010fd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8010fd6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8010fd8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010fdc:	4604      	mov	r4, r0
 8010fde:	b15b      	cbz	r3, 8010ff8 <HAL_TIM_OC_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8010fe0:	2302      	movs	r3, #2
 8010fe2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010fe6:	6820      	ldr	r0, [r4, #0]
 8010fe8:	1d21      	adds	r1, r4, #4
 8010fea:	f7ff ff63 	bl	8010eb4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8010fee:	2301      	movs	r3, #1
 8010ff0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8010ff4:	2000      	movs	r0, #0
}
 8010ff6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8010ff8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8010ffc:	f7ff fcae 	bl	801095c <HAL_TIM_OC_MspInit>
 8011000:	e7ee      	b.n	8010fe0 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 8011002:	2001      	movs	r0, #1
}
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop

08011008 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8011008:	b1b8      	cbz	r0, 801103a <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 801100a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 801100e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8011010:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011014:	4604      	mov	r4, r0
 8011016:	b15b      	cbz	r3, 8011030 <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8011018:	2302      	movs	r3, #2
 801101a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801101e:	6820      	ldr	r0, [r4, #0]
 8011020:	1d21      	adds	r1, r4, #4
 8011022:	f7ff ff47 	bl	8010eb4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8011026:	2301      	movs	r3, #1
 8011028:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 801102c:	2000      	movs	r0, #0
}
 801102e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8011030:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8011034:	f7ff fd5c 	bl	8010af0 <HAL_TIM_PWM_MspInit>
 8011038:	e7ee      	b.n	8011018 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 801103a:	2001      	movs	r0, #1
}
 801103c:	4770      	bx	lr
 801103e:	bf00      	nop

08011040 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8011040:	2800      	cmp	r0, #0
 8011042:	d04f      	beq.n	80110e4 <HAL_TIM_Encoder_Init+0xa4>
{
 8011044:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8011046:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 801104a:	b083      	sub	sp, #12
 801104c:	4605      	mov	r5, r0
 801104e:	460c      	mov	r4, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 8011050:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011054:	2b00      	cmp	r3, #0
 8011056:	d040      	beq.n	80110da <HAL_TIM_Encoder_Init+0x9a>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011058:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 801105a:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801105c:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8011060:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011064:	6883      	ldr	r3, [r0, #8]
 8011066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801106a:	f023 0307 	bic.w	r3, r3, #7
 801106e:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011070:	f7ff ff20 	bl	8010eb4 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8011074:	6829      	ldr	r1, [r5, #0]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011076:	6923      	ldr	r3, [r4, #16]
  tmpsmcr = htim->Instance->SMCR;
 8011078:	6888      	ldr	r0, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 801107a:	698e      	ldr	r6, [r1, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801107c:	69a7      	ldr	r7, [r4, #24]
 801107e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8011080:	f8d4 c000 	ldr.w	ip, [r4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011084:	f426 7e40 	bic.w	lr, r6, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011088:	69e6      	ldr	r6, [r4, #28]
 801108a:	011b      	lsls	r3, r3, #4
 801108c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8011090:	6a26      	ldr	r6, [r4, #32]
 8011092:	9601      	str	r6, [sp, #4]
 8011094:	68e6      	ldr	r6, [r4, #12]
 8011096:	4333      	orrs	r3, r6
 8011098:	9e01      	ldr	r6, [sp, #4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801109a:	f02e 0e03 	bic.w	lr, lr, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801109e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80110a2:	ea42 020e 	orr.w	r2, r2, lr
  tmpccer = htim->Instance->CCER;
 80110a6:	6a0f      	ldr	r7, [r1, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80110a8:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80110ac:	6966      	ldr	r6, [r4, #20]
 80110ae:	6864      	ldr	r4, [r4, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80110b0:	f422 427c 	bic.w	r2, r2, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80110b4:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 80110b8:	ea40 000c 	orr.w	r0, r0, ip
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80110bc:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80110c0:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  htim->Instance->SMCR = tmpsmcr;
 80110c4:	6088      	str	r0, [r1, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80110c6:	4327      	orrs	r7, r4
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80110c8:	4313      	orrs	r3, r2
  htim->State = HAL_TIM_STATE_READY;
 80110ca:	2401      	movs	r4, #1
  return HAL_OK;
 80110cc:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 80110ce:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 80110d0:	620f      	str	r7, [r1, #32]
  htim->State = HAL_TIM_STATE_READY;
 80110d2:	f885 403d 	strb.w	r4, [r5, #61]	; 0x3d
}
 80110d6:	b003      	add	sp, #12
 80110d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80110da:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80110de:	f7fb fe9d 	bl	800ce1c <HAL_TIM_Encoder_MspInit>
 80110e2:	e7b9      	b.n	8011058 <HAL_TIM_Encoder_Init+0x18>
    return HAL_ERROR;
 80110e4:	2001      	movs	r0, #1
}
 80110e6:	4770      	bx	lr

080110e8 <TIM_OC2_SetConfig>:
{
 80110e8:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110ea:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80110ec:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110ee:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80110f0:	4d15      	ldr	r5, [pc, #84]	; (8011148 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110f2:	f024 0410 	bic.w	r4, r4, #16
 80110f6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80110f8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80110fa:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80110fc:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80110fe:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011102:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011106:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011108:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801110c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011110:	d00a      	beq.n	8011128 <TIM_OC2_SetConfig+0x40>
 8011112:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8011116:	42a8      	cmp	r0, r5
 8011118:	d006      	beq.n	8011128 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 801111a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 801111c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 801111e:	6182      	str	r2, [r0, #24]
}
 8011120:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8011122:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8011124:	6203      	str	r3, [r0, #32]
}
 8011126:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011128:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 801112a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801112e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011132:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011136:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801113a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 801113c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011140:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8011144:	e7e9      	b.n	801111a <TIM_OC2_SetConfig+0x32>
 8011146:	bf00      	nop
 8011148:	40010000 	.word	0x40010000

0801114c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 801114c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011150:	2b01      	cmp	r3, #1
 8011152:	d028      	beq.n	80111a6 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8011154:	b510      	push	{r4, lr}
 8011156:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8011158:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 801115a:	2001      	movs	r0, #1
 801115c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8011160:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 8011164:	2a0c      	cmp	r2, #12
 8011166:	d80b      	bhi.n	8011180 <HAL_TIM_OC_ConfigChannel+0x34>
 8011168:	e8df f002 	tbb	[pc, r2]
 801116c:	0a0a0a07 	.word	0x0a0a0a07
 8011170:	0a0a0a15 	.word	0x0a0a0a15
 8011174:	0a0a0a19 	.word	0x0a0a0a19
 8011178:	11          	.byte	0x11
 8011179:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801117a:	6820      	ldr	r0, [r4, #0]
 801117c:	f7ff fb3e 	bl	80107fc <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8011180:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8011182:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8011184:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011188:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 801118c:	bd10      	pop	{r4, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801118e:	6820      	ldr	r0, [r4, #0]
 8011190:	f7ff fb96 	bl	80108c0 <TIM_OC4_SetConfig>
      break;
 8011194:	e7f4      	b.n	8011180 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011196:	6820      	ldr	r0, [r4, #0]
 8011198:	f7ff ffa6 	bl	80110e8 <TIM_OC2_SetConfig>
      break;
 801119c:	e7f0      	b.n	8011180 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801119e:	6820      	ldr	r0, [r4, #0]
 80111a0:	f7ff fb5c 	bl	801085c <TIM_OC3_SetConfig>
      break;
 80111a4:	e7ec      	b.n	8011180 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 80111a6:	2002      	movs	r0, #2
}
 80111a8:	4770      	bx	lr
 80111aa:	bf00      	nop

080111ac <HAL_TIM_PWM_ConfigChannel>:
{
 80111ac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80111ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80111b2:	2b01      	cmp	r3, #1
 80111b4:	d074      	beq.n	80112a0 <HAL_TIM_PWM_ConfigChannel+0xf4>
 80111b6:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80111b8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80111ba:	2101      	movs	r1, #1
 80111bc:	4604      	mov	r4, r0
 80111be:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80111c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80111c6:	2a0c      	cmp	r2, #12
 80111c8:	d819      	bhi.n	80111fe <HAL_TIM_PWM_ConfigChannel+0x52>
 80111ca:	e8df f002 	tbb	[pc, r2]
 80111ce:	1807      	.short	0x1807
 80111d0:	18381818 	.word	0x18381818
 80111d4:	18511818 	.word	0x18511818
 80111d8:	1818      	.short	0x1818
 80111da:	1f          	.byte	0x1f
 80111db:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80111dc:	4629      	mov	r1, r5
 80111de:	6800      	ldr	r0, [r0, #0]
 80111e0:	f7ff fb0c 	bl	80107fc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80111e4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80111e6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80111e8:	6999      	ldr	r1, [r3, #24]
 80111ea:	f041 0108 	orr.w	r1, r1, #8
 80111ee:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80111f0:	6999      	ldr	r1, [r3, #24]
 80111f2:	f021 0104 	bic.w	r1, r1, #4
 80111f6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80111f8:	699a      	ldr	r2, [r3, #24]
 80111fa:	4302      	orrs	r2, r0
 80111fc:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80111fe:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8011200:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8011202:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011206:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 801120a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801120c:	4629      	mov	r1, r5
 801120e:	6800      	ldr	r0, [r0, #0]
 8011210:	f7ff fb56 	bl	80108c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011214:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011216:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011218:	69d9      	ldr	r1, [r3, #28]
 801121a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 801121e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011220:	69d9      	ldr	r1, [r3, #28]
 8011222:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8011226:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011228:	69da      	ldr	r2, [r3, #28]
 801122a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 801122e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8011230:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8011232:	2301      	movs	r3, #1
 8011234:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011238:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 801123c:	e7e5      	b.n	801120a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801123e:	4629      	mov	r1, r5
 8011240:	6800      	ldr	r0, [r0, #0]
 8011242:	f7ff ff51 	bl	80110e8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011246:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011248:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801124a:	6999      	ldr	r1, [r3, #24]
 801124c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8011250:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011252:	6999      	ldr	r1, [r3, #24]
 8011254:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8011258:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801125a:	699a      	ldr	r2, [r3, #24]
 801125c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8011260:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8011262:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8011264:	2301      	movs	r3, #1
 8011266:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801126a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 801126e:	e7cc      	b.n	801120a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011270:	4629      	mov	r1, r5
 8011272:	6800      	ldr	r0, [r0, #0]
 8011274:	f7ff faf2 	bl	801085c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011278:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801127a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801127c:	69d9      	ldr	r1, [r3, #28]
 801127e:	f041 0108 	orr.w	r1, r1, #8
 8011282:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011284:	69d9      	ldr	r1, [r3, #28]
 8011286:	f021 0104 	bic.w	r1, r1, #4
 801128a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801128c:	69da      	ldr	r2, [r3, #28]
 801128e:	4302      	orrs	r2, r0
 8011290:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8011292:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8011294:	2301      	movs	r3, #1
 8011296:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801129a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 801129e:	e7b4      	b.n	801120a <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 80112a0:	2002      	movs	r0, #2
}
 80112a2:	bd38      	pop	{r3, r4, r5, pc}

080112a4 <HAL_TIMEx_OCN_Start_IT>:
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80112a4:	2904      	cmp	r1, #4
 80112a6:	6803      	ldr	r3, [r0, #0]
 80112a8:	d02a      	beq.n	8011300 <HAL_TIMEx_OCN_Start_IT+0x5c>
 80112aa:	2908      	cmp	r1, #8
 80112ac:	d023      	beq.n	80112f6 <HAL_TIMEx_OCN_Start_IT+0x52>
 80112ae:	b1e9      	cbz	r1, 80112ec <HAL_TIMEx_OCN_Start_IT+0x48>
    default:
      break;
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80112b0:	68da      	ldr	r2, [r3, #12]
 80112b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80112b6:	60da      	str	r2, [r3, #12]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80112b8:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80112ba:	f001 021f 	and.w	r2, r1, #31
 80112be:	2104      	movs	r1, #4
 80112c0:	4091      	lsls	r1, r2
  TIMx->CCER &=  ~tmp;
 80112c2:	ea20 0001 	bic.w	r0, r0, r1
 80112c6:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80112c8:	6a1a      	ldr	r2, [r3, #32]
 80112ca:	4311      	orrs	r1, r2
 80112cc:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 80112ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80112d4:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80112d6:	689a      	ldr	r2, [r3, #8]
 80112d8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80112dc:	2a06      	cmp	r2, #6
 80112de:	d003      	beq.n	80112e8 <HAL_TIMEx_OCN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	f042 0201 	orr.w	r2, r2, #1
 80112e6:	601a      	str	r2, [r3, #0]
}
 80112e8:	2000      	movs	r0, #0
 80112ea:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80112ec:	68da      	ldr	r2, [r3, #12]
 80112ee:	f042 0202 	orr.w	r2, r2, #2
 80112f2:	60da      	str	r2, [r3, #12]
      break;
 80112f4:	e7dc      	b.n	80112b0 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80112f6:	68da      	ldr	r2, [r3, #12]
 80112f8:	f042 0208 	orr.w	r2, r2, #8
 80112fc:	60da      	str	r2, [r3, #12]
      break;
 80112fe:	e7d7      	b.n	80112b0 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011300:	68da      	ldr	r2, [r3, #12]
 8011302:	f042 0204 	orr.w	r2, r2, #4
 8011306:	60da      	str	r2, [r3, #12]
      break;
 8011308:	e7d2      	b.n	80112b0 <HAL_TIMEx_OCN_Start_IT+0xc>
 801130a:	bf00      	nop

0801130c <HAL_TIMEx_OCN_Stop_IT>:
  switch (Channel)
 801130c:	2904      	cmp	r1, #4
 801130e:	6803      	ldr	r3, [r0, #0]
 8011310:	d040      	beq.n	8011394 <HAL_TIMEx_OCN_Stop_IT+0x88>
 8011312:	2908      	cmp	r1, #8
 8011314:	d039      	beq.n	801138a <HAL_TIMEx_OCN_Stop_IT+0x7e>
 8011316:	2900      	cmp	r1, #0
 8011318:	d032      	beq.n	8011380 <HAL_TIMEx_OCN_Stop_IT+0x74>
  TIMx->CCER &=  ~tmp;
 801131a:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801131c:	f001 011f 	and.w	r1, r1, #31
 8011320:	2004      	movs	r0, #4
 8011322:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &=  ~tmp;
 8011326:	ea22 0101 	bic.w	r1, r2, r1
 801132a:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801132c:	6a1a      	ldr	r2, [r3, #32]
 801132e:	621a      	str	r2, [r3, #32]
  tmpccer = htim->Instance->CCER;
 8011330:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8011332:	f240 4244 	movw	r2, #1092	; 0x444
 8011336:	4211      	tst	r1, r2
 8011338:	d103      	bne.n	8011342 <HAL_TIMEx_OCN_Stop_IT+0x36>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 801133a:	68da      	ldr	r2, [r3, #12]
 801133c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011340:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 8011342:	6a19      	ldr	r1, [r3, #32]
 8011344:	f241 1211 	movw	r2, #4369	; 0x1111
 8011348:	4211      	tst	r1, r2
 801134a:	d104      	bne.n	8011356 <HAL_TIMEx_OCN_Stop_IT+0x4a>
 801134c:	6a19      	ldr	r1, [r3, #32]
 801134e:	f240 4244 	movw	r2, #1092	; 0x444
 8011352:	4211      	tst	r1, r2
 8011354:	d00f      	beq.n	8011376 <HAL_TIMEx_OCN_Stop_IT+0x6a>
  __HAL_TIM_DISABLE(htim);
 8011356:	6a19      	ldr	r1, [r3, #32]
 8011358:	f241 1211 	movw	r2, #4369	; 0x1111
 801135c:	4211      	tst	r1, r2
 801135e:	d108      	bne.n	8011372 <HAL_TIMEx_OCN_Stop_IT+0x66>
 8011360:	6a19      	ldr	r1, [r3, #32]
 8011362:	f240 4244 	movw	r2, #1092	; 0x444
 8011366:	4211      	tst	r1, r2
 8011368:	d103      	bne.n	8011372 <HAL_TIMEx_OCN_Stop_IT+0x66>
 801136a:	681a      	ldr	r2, [r3, #0]
 801136c:	f022 0201 	bic.w	r2, r2, #1
 8011370:	601a      	str	r2, [r3, #0]
}
 8011372:	2000      	movs	r0, #0
 8011374:	4770      	bx	lr
  __HAL_TIM_MOE_DISABLE(htim);
 8011376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801137c:	645a      	str	r2, [r3, #68]	; 0x44
 801137e:	e7ea      	b.n	8011356 <HAL_TIMEx_OCN_Stop_IT+0x4a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011380:	68da      	ldr	r2, [r3, #12]
 8011382:	f022 0202 	bic.w	r2, r2, #2
 8011386:	60da      	str	r2, [r3, #12]
      break;
 8011388:	e7c7      	b.n	801131a <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 801138a:	68da      	ldr	r2, [r3, #12]
 801138c:	f022 0208 	bic.w	r2, r2, #8
 8011390:	60da      	str	r2, [r3, #12]
      break;
 8011392:	e7c2      	b.n	801131a <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011394:	68da      	ldr	r2, [r3, #12]
 8011396:	f022 0204 	bic.w	r2, r2, #4
 801139a:	60da      	str	r2, [r3, #12]
      break;
 801139c:	e7bd      	b.n	801131a <HAL_TIMEx_OCN_Stop_IT+0xe>
 801139e:	bf00      	nop

080113a0 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80113a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	d03a      	beq.n	801141e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  tmpcr2 = htim->Instance->CR2;
 80113a8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80113aa:	2202      	movs	r2, #2
{
 80113ac:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 80113ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80113b2:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80113b4:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113b6:	4d1b      	ldr	r5, [pc, #108]	; (8011424 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 80113b8:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80113ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80113be:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113c0:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 80113c2:	f04f 0601 	mov.w	r6, #1
 80113c6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 80113ca:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113cc:	d019      	beq.n	8011402 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80113ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113d2:	d016      	beq.n	8011402 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80113d4:	4a14      	ldr	r2, [pc, #80]	; (8011428 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d013      	beq.n	8011402 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80113da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80113de:	4293      	cmp	r3, r2
 80113e0:	d00f      	beq.n	8011402 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80113e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d00b      	beq.n	8011402 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80113ea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80113ee:	4293      	cmp	r3, r2
 80113f0:	d007      	beq.n	8011402 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80113f2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80113f6:	4293      	cmp	r3, r2
 80113f8:	d003      	beq.n	8011402 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80113fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80113fe:	4293      	cmp	r3, r2
 8011400:	d104      	bne.n	801140c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011402:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011404:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011408:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 801140a:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(htim);
 801140c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 801140e:	2201      	movs	r2, #1
 8011410:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011414:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8011418:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 801141a:	4618      	mov	r0, r3
}
 801141c:	4770      	bx	lr
  __HAL_LOCK(htim);
 801141e:	2002      	movs	r0, #2
}
 8011420:	4770      	bx	lr
 8011422:	bf00      	nop
 8011424:	40010000 	.word	0x40010000
 8011428:	40000400 	.word	0x40000400

0801142c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 801142c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8011430:	2b01      	cmp	r3, #1
 8011432:	d021      	beq.n	8011478 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 8011434:	b430      	push	{r4, r5}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011436:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801143a:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801143e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011442:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011448:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801144a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801144e:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011452:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011458:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801145a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801145e:	69c9      	ldr	r1, [r1, #28]
  htim->Instance->BDTR = tmpbdtr;
 8011460:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011462:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011468:	430b      	orrs	r3, r1
  __HAL_UNLOCK(htim);
 801146a:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 801146c:	6453      	str	r3, [r2, #68]	; 0x44
}
 801146e:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 8011470:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 8011474:	4608      	mov	r0, r1
 8011476:	4770      	bx	lr
  __HAL_LOCK(htim);
 8011478:	2302      	movs	r3, #2
}
 801147a:	4618      	mov	r0, r3
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop

08011480 <HAL_TIMEx_CommutCallback>:
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop

08011484 <HAL_TIMEx_BreakCallback>:
 8011484:	4770      	bx	lr
 8011486:	bf00      	nop

08011488 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011488:	6802      	ldr	r2, [r0, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801148a:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801148c:	6911      	ldr	r1, [r2, #16]
{
 801148e:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011490:	68c5      	ldr	r5, [r0, #12]
 8011492:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
{
 8011496:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011498:	4329      	orrs	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801149a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801149c:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 801149e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80114a0:	6965      	ldr	r5, [r4, #20]
 80114a2:	4303      	orrs	r3, r0
 80114a4:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80114a6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80114aa:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 80114ac:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80114b0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80114b2:	430b      	orrs	r3, r1
 80114b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80114b6:	6953      	ldr	r3, [r2, #20]
 80114b8:	69a1      	ldr	r1, [r4, #24]
 80114ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80114be:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80114c4:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80114c6:	4b2a      	ldr	r3, [pc, #168]	; (8011570 <UART_SetConfig+0xe8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114c8:	d023      	beq.n	8011512 <UART_SetConfig+0x8a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d01e      	beq.n	801150c <UART_SetConfig+0x84>
 80114ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d01a      	beq.n	801150c <UART_SetConfig+0x84>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80114d6:	f7fe fe33 	bl	8010140 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80114da:	6863      	ldr	r3, [r4, #4]
 80114dc:	2219      	movs	r2, #25
 80114de:	fba0 0102 	umull	r0, r1, r0, r2
 80114e2:	009a      	lsls	r2, r3, #2
 80114e4:	0f9b      	lsrs	r3, r3, #30
 80114e6:	f7f7 fb07 	bl	8008af8 <__aeabi_uldivmod>
 80114ea:	4922      	ldr	r1, [pc, #136]	; (8011574 <UART_SetConfig+0xec>)
 80114ec:	6824      	ldr	r4, [r4, #0]
 80114ee:	fba1 3200 	umull	r3, r2, r1, r0
 80114f2:	0952      	lsrs	r2, r2, #5
 80114f4:	2364      	movs	r3, #100	; 0x64
 80114f6:	fb03 0312 	mls	r3, r3, r2, r0
 80114fa:	011b      	lsls	r3, r3, #4
 80114fc:	3332      	adds	r3, #50	; 0x32
 80114fe:	fba1 1303 	umull	r1, r3, r1, r3
 8011502:	0112      	lsls	r2, r2, #4
 8011504:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8011508:	60a3      	str	r3, [r4, #8]
    }
  }
}
 801150a:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 801150c:	f7fe fe28 	bl	8010160 <HAL_RCC_GetPCLK2Freq>
 8011510:	e7e3      	b.n	80114da <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011512:	429a      	cmp	r2, r3
 8011514:	d028      	beq.n	8011568 <UART_SetConfig+0xe0>
 8011516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801151a:	429a      	cmp	r2, r3
 801151c:	d024      	beq.n	8011568 <UART_SetConfig+0xe0>
      pclk = HAL_RCC_GetPCLK1Freq();
 801151e:	f7fe fe0f 	bl	8010140 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011522:	6862      	ldr	r2, [r4, #4]
 8011524:	4d13      	ldr	r5, [pc, #76]	; (8011574 <UART_SetConfig+0xec>)
 8011526:	1892      	adds	r2, r2, r2
 8011528:	f04f 0119 	mov.w	r1, #25
 801152c:	f04f 0600 	mov.w	r6, #0
 8011530:	eb46 0306 	adc.w	r3, r6, r6
 8011534:	fba0 0101 	umull	r0, r1, r0, r1
 8011538:	f7f7 fade 	bl	8008af8 <__aeabi_uldivmod>
 801153c:	fba5 3200 	umull	r3, r2, r5, r0
 8011540:	0951      	lsrs	r1, r2, #5
 8011542:	2364      	movs	r3, #100	; 0x64
 8011544:	fb03 0311 	mls	r3, r3, r1, r0
 8011548:	00db      	lsls	r3, r3, #3
 801154a:	3332      	adds	r3, #50	; 0x32
 801154c:	fba5 2303 	umull	r2, r3, r5, r3
 8011550:	095b      	lsrs	r3, r3, #5
 8011552:	f003 0207 	and.w	r2, r3, #7
 8011556:	005b      	lsls	r3, r3, #1
 8011558:	6824      	ldr	r4, [r4, #0]
 801155a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801155e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011562:	4413      	add	r3, r2
 8011564:	60a3      	str	r3, [r4, #8]
}
 8011566:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8011568:	f7fe fdfa 	bl	8010160 <HAL_RCC_GetPCLK2Freq>
 801156c:	e7d9      	b.n	8011522 <UART_SetConfig+0x9a>
 801156e:	bf00      	nop
 8011570:	40011000 	.word	0x40011000
 8011574:	51eb851f 	.word	0x51eb851f

08011578 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8011578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801157c:	4607      	mov	r7, r0
 801157e:	460e      	mov	r6, r1
 8011580:	4690      	mov	r8, r2
 8011582:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011584:	683c      	ldr	r4, [r7, #0]
 8011586:	e001      	b.n	801158c <UART_WaitOnFlagUntilTimeout.constprop.3+0x14>
    if (Timeout != HAL_MAX_DELAY)
 8011588:	1c6b      	adds	r3, r5, #1
 801158a:	d106      	bne.n	801159a <UART_WaitOnFlagUntilTimeout.constprop.3+0x22>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801158c:	6820      	ldr	r0, [r4, #0]
 801158e:	ea36 0300 	bics.w	r3, r6, r0
 8011592:	d1f9      	bne.n	8011588 <UART_WaitOnFlagUntilTimeout.constprop.3+0x10>
  return HAL_OK;
 8011594:	2000      	movs	r0, #0
}
 8011596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801159a:	b135      	cbz	r5, 80115aa <UART_WaitOnFlagUntilTimeout.constprop.3+0x32>
 801159c:	f7fd fbda 	bl	800ed54 <HAL_GetTick>
 80115a0:	eba0 0008 	sub.w	r0, r0, r8
 80115a4:	4285      	cmp	r5, r0
 80115a6:	d2ed      	bcs.n	8011584 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
 80115a8:	683c      	ldr	r4, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80115aa:	68e3      	ldr	r3, [r4, #12]
 80115ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80115b0:	60e3      	str	r3, [r4, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115b2:	6963      	ldr	r3, [r4, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80115b4:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115b6:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 80115ba:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115bc:	6163      	str	r3, [r4, #20]
        __HAL_UNLOCK(huart);
 80115be:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80115c0:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
        __HAL_UNLOCK(huart);
 80115c4:	f887 1038 	strb.w	r1, [r7, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 80115c8:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
 80115cc:	e7e3      	b.n	8011596 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>
 80115ce:	bf00      	nop

080115d0 <HAL_UART_Init>:
  if (huart == NULL)
 80115d0:	b360      	cbz	r0, 801162c <HAL_UART_Init+0x5c>
{
 80115d2:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80115d4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80115d8:	4604      	mov	r4, r0
 80115da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80115de:	b303      	cbz	r3, 8011622 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 80115e0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80115e2:	2324      	movs	r3, #36	; 0x24
 80115e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80115e8:	68d3      	ldr	r3, [r2, #12]
 80115ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80115ee:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80115f0:	4620      	mov	r0, r4
 80115f2:	f7ff ff49 	bl	8011488 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80115f6:	6823      	ldr	r3, [r4, #0]
 80115f8:	691a      	ldr	r2, [r3, #16]
 80115fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80115fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011600:	695a      	ldr	r2, [r3, #20]
 8011602:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011606:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8011608:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801160a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 801160c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 801160e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011612:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8011614:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011616:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8011618:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801161c:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8011620:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8011622:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8011626:	f7fb fccd 	bl	800cfc4 <HAL_UART_MspInit>
 801162a:	e7d9      	b.n	80115e0 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 801162c:	2001      	movs	r0, #1
}
 801162e:	4770      	bx	lr

08011630 <HAL_UART_Transmit>:
{
 8011630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011634:	460f      	mov	r7, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8011636:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801163a:	2920      	cmp	r1, #32
{
 801163c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 801163e:	d130      	bne.n	80116a2 <HAL_UART_Transmit+0x72>
    if ((pData == NULL) || (Size == 0U))
 8011640:	2f00      	cmp	r7, #0
 8011642:	d032      	beq.n	80116aa <HAL_UART_Transmit+0x7a>
 8011644:	9201      	str	r2, [sp, #4]
 8011646:	b382      	cbz	r2, 80116aa <HAL_UART_Transmit+0x7a>
 8011648:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 801164a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801164e:	2b01      	cmp	r3, #1
 8011650:	4604      	mov	r4, r0
 8011652:	d026      	beq.n	80116a2 <HAL_UART_Transmit+0x72>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011654:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8011656:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011658:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801165a:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 801165c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011660:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8011664:	f7fd fb76 	bl	800ed54 <HAL_GetTick>
    huart->TxXferSize = Size;
 8011668:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 801166a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 801166e:	4681      	mov	r9, r0
    huart->TxXferSize = Size;
 8011670:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8011672:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8011674:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 8011676:	b2ad      	uxth	r5, r5
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011678:	4643      	mov	r3, r8
 801167a:	464a      	mov	r2, r9
 801167c:	2180      	movs	r1, #128	; 0x80
 801167e:	4620      	mov	r0, r4
    while (huart->TxXferCount > 0U)
 8011680:	b355      	cbz	r5, 80116d8 <HAL_UART_Transmit+0xa8>
      huart->TxXferCount--;
 8011682:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011684:	68a6      	ldr	r6, [r4, #8]
      huart->TxXferCount--;
 8011686:	3d01      	subs	r5, #1
 8011688:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801168a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
      huart->TxXferCount--;
 801168e:	84e5      	strh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011690:	d00f      	beq.n	80116b2 <HAL_UART_Transmit+0x82>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011692:	f7ff ff71 	bl	8011578 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011696:	b9e8      	cbnz	r0, 80116d4 <HAL_UART_Transmit+0xa4>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8011698:	6823      	ldr	r3, [r4, #0]
 801169a:	783a      	ldrb	r2, [r7, #0]
 801169c:	605a      	str	r2, [r3, #4]
 801169e:	3701      	adds	r7, #1
 80116a0:	e7e8      	b.n	8011674 <HAL_UART_Transmit+0x44>
    return HAL_BUSY;
 80116a2:	2002      	movs	r0, #2
}
 80116a4:	b003      	add	sp, #12
 80116a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80116aa:	2001      	movs	r0, #1
}
 80116ac:	b003      	add	sp, #12
 80116ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80116b2:	4643      	mov	r3, r8
 80116b4:	464a      	mov	r2, r9
 80116b6:	2180      	movs	r1, #128	; 0x80
 80116b8:	4620      	mov	r0, r4
 80116ba:	f7ff ff5d 	bl	8011578 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80116be:	b948      	cbnz	r0, 80116d4 <HAL_UART_Transmit+0xa4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80116c0:	883b      	ldrh	r3, [r7, #0]
 80116c2:	6821      	ldr	r1, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80116c4:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80116c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116ca:	604b      	str	r3, [r1, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80116cc:	2a00      	cmp	r2, #0
 80116ce:	d1e6      	bne.n	801169e <HAL_UART_Transmit+0x6e>
          pData += 2U;
 80116d0:	3702      	adds	r7, #2
 80116d2:	e7cf      	b.n	8011674 <HAL_UART_Transmit+0x44>
          return HAL_TIMEOUT;
 80116d4:	2003      	movs	r0, #3
 80116d6:	e7e5      	b.n	80116a4 <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80116d8:	2140      	movs	r1, #64	; 0x40
 80116da:	f7ff ff4d 	bl	8011578 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80116de:	2800      	cmp	r0, #0
 80116e0:	d1f8      	bne.n	80116d4 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 80116e2:	2320      	movs	r3, #32
 80116e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80116e8:	e7dc      	b.n	80116a4 <HAL_UART_Transmit+0x74>
 80116ea:	bf00      	nop

080116ec <HAL_UART_Receive>:
{
 80116ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116f0:	460f      	mov	r7, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 80116f2:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 80116f6:	2920      	cmp	r1, #32
{
 80116f8:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80116fa:	d135      	bne.n	8011768 <HAL_UART_Receive+0x7c>
    if ((pData == NULL) || (Size == 0U))
 80116fc:	2f00      	cmp	r7, #0
 80116fe:	d037      	beq.n	8011770 <HAL_UART_Receive+0x84>
 8011700:	9201      	str	r2, [sp, #4]
 8011702:	2a00      	cmp	r2, #0
 8011704:	d034      	beq.n	8011770 <HAL_UART_Receive+0x84>
 8011706:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8011708:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801170c:	2b01      	cmp	r3, #1
 801170e:	4604      	mov	r4, r0
 8011710:	d02a      	beq.n	8011768 <HAL_UART_Receive+0x7c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011712:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8011714:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011716:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011718:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 801171a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801171e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8011722:	f7fd fb17 	bl	800ed54 <HAL_GetTick>
    huart->RxXferSize = Size;
 8011726:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8011728:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 801172c:	4681      	mov	r9, r0
    huart->RxXferSize = Size;
 801172e:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8011730:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8011732:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8011734:	b2ad      	uxth	r5, r5
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011736:	4643      	mov	r3, r8
 8011738:	464a      	mov	r2, r9
 801173a:	2120      	movs	r1, #32
 801173c:	4620      	mov	r0, r4
    while (huart->RxXferCount > 0U)
 801173e:	2d00      	cmp	r5, #0
 8011740:	d036      	beq.n	80117b0 <HAL_UART_Receive+0xc4>
      huart->RxXferCount--;
 8011742:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011744:	68a6      	ldr	r6, [r4, #8]
      huart->RxXferCount--;
 8011746:	3d01      	subs	r5, #1
 8011748:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801174a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
      huart->RxXferCount--;
 801174e:	85e5      	strh	r5, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011750:	d012      	beq.n	8011778 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011752:	f7ff ff11 	bl	8011578 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011756:	bb78      	cbnz	r0, 80117b8 <HAL_UART_Receive+0xcc>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011758:	6923      	ldr	r3, [r4, #16]
 801175a:	6821      	ldr	r1, [r4, #0]
 801175c:	1c7a      	adds	r2, r7, #1
 801175e:	b9db      	cbnz	r3, 8011798 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011760:	684b      	ldr	r3, [r1, #4]
 8011762:	703b      	strb	r3, [r7, #0]
 8011764:	4617      	mov	r7, r2
 8011766:	e7e4      	b.n	8011732 <HAL_UART_Receive+0x46>
    return HAL_BUSY;
 8011768:	2002      	movs	r0, #2
}
 801176a:	b003      	add	sp, #12
 801176c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8011770:	2001      	movs	r0, #1
}
 8011772:	b003      	add	sp, #12
 8011774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011778:	4643      	mov	r3, r8
 801177a:	464a      	mov	r2, r9
 801177c:	2120      	movs	r1, #32
 801177e:	4620      	mov	r0, r4
 8011780:	f7ff fefa 	bl	8011578 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8011784:	b9c0      	cbnz	r0, 80117b8 <HAL_UART_Receive+0xcc>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011786:	6923      	ldr	r3, [r4, #16]
 8011788:	b963      	cbnz	r3, 80117a4 <HAL_UART_Receive+0xb8>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801178a:	6823      	ldr	r3, [r4, #0]
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011792:	f827 3b02 	strh.w	r3, [r7], #2
 8011796:	e7cc      	b.n	8011732 <HAL_UART_Receive+0x46>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011798:	684b      	ldr	r3, [r1, #4]
 801179a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801179e:	703b      	strb	r3, [r7, #0]
 80117a0:	4617      	mov	r7, r2
 80117a2:	e7c6      	b.n	8011732 <HAL_UART_Receive+0x46>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80117a4:	6823      	ldr	r3, [r4, #0]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	f827 3b01 	strh.w	r3, [r7], #1
 80117ae:	e7c0      	b.n	8011732 <HAL_UART_Receive+0x46>
    return HAL_OK;
 80117b0:	4628      	mov	r0, r5
    huart->RxState = HAL_UART_STATE_READY;
 80117b2:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    return HAL_OK;
 80117b6:	e7d8      	b.n	801176a <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 80117b8:	2003      	movs	r0, #3
 80117ba:	e7d6      	b.n	801176a <HAL_UART_Receive+0x7e>

080117bc <round>:
 80117bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117be:	ec57 6b10 	vmov	r6, r7, d0
 80117c2:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80117c6:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80117ca:	2c13      	cmp	r4, #19
 80117cc:	463b      	mov	r3, r7
 80117ce:	463d      	mov	r5, r7
 80117d0:	dc17      	bgt.n	8011802 <round+0x46>
 80117d2:	2c00      	cmp	r4, #0
 80117d4:	da09      	bge.n	80117ea <round+0x2e>
 80117d6:	3401      	adds	r4, #1
 80117d8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80117dc:	d103      	bne.n	80117e6 <round+0x2a>
 80117de:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80117e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80117e6:	2100      	movs	r1, #0
 80117e8:	e02c      	b.n	8011844 <round+0x88>
 80117ea:	4a18      	ldr	r2, [pc, #96]	; (801184c <round+0x90>)
 80117ec:	4122      	asrs	r2, r4
 80117ee:	4217      	tst	r7, r2
 80117f0:	d100      	bne.n	80117f4 <round+0x38>
 80117f2:	b19e      	cbz	r6, 801181c <round+0x60>
 80117f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80117f8:	4123      	asrs	r3, r4
 80117fa:	442b      	add	r3, r5
 80117fc:	ea23 0302 	bic.w	r3, r3, r2
 8011800:	e7f1      	b.n	80117e6 <round+0x2a>
 8011802:	2c33      	cmp	r4, #51	; 0x33
 8011804:	dd0d      	ble.n	8011822 <round+0x66>
 8011806:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801180a:	d107      	bne.n	801181c <round+0x60>
 801180c:	4630      	mov	r0, r6
 801180e:	4639      	mov	r1, r7
 8011810:	ee10 2a10 	vmov	r2, s0
 8011814:	f7f6 fc72 	bl	80080fc <__adddf3>
 8011818:	4606      	mov	r6, r0
 801181a:	460f      	mov	r7, r1
 801181c:	ec47 6b10 	vmov	d0, r6, r7
 8011820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011822:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8011826:	f04f 30ff 	mov.w	r0, #4294967295
 801182a:	40d0      	lsrs	r0, r2
 801182c:	4206      	tst	r6, r0
 801182e:	d0f5      	beq.n	801181c <round+0x60>
 8011830:	2201      	movs	r2, #1
 8011832:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011836:	fa02 f404 	lsl.w	r4, r2, r4
 801183a:	1931      	adds	r1, r6, r4
 801183c:	bf28      	it	cs
 801183e:	189b      	addcs	r3, r3, r2
 8011840:	ea21 0100 	bic.w	r1, r1, r0
 8011844:	461f      	mov	r7, r3
 8011846:	460e      	mov	r6, r1
 8011848:	e7e8      	b.n	801181c <round+0x60>
 801184a:	bf00      	nop
 801184c:	000fffff 	.word	0x000fffff

08011850 <__errno>:
 8011850:	4b01      	ldr	r3, [pc, #4]	; (8011858 <__errno+0x8>)
 8011852:	6818      	ldr	r0, [r3, #0]
 8011854:	4770      	bx	lr
 8011856:	bf00      	nop
 8011858:	20000018 	.word	0x20000018

0801185c <__sflush_r>:
 801185c:	898a      	ldrh	r2, [r1, #12]
 801185e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011862:	4605      	mov	r5, r0
 8011864:	0710      	lsls	r0, r2, #28
 8011866:	460c      	mov	r4, r1
 8011868:	d458      	bmi.n	801191c <__sflush_r+0xc0>
 801186a:	684b      	ldr	r3, [r1, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	dc05      	bgt.n	801187c <__sflush_r+0x20>
 8011870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011872:	2b00      	cmp	r3, #0
 8011874:	dc02      	bgt.n	801187c <__sflush_r+0x20>
 8011876:	2000      	movs	r0, #0
 8011878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801187c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801187e:	2e00      	cmp	r6, #0
 8011880:	d0f9      	beq.n	8011876 <__sflush_r+0x1a>
 8011882:	2300      	movs	r3, #0
 8011884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011888:	682f      	ldr	r7, [r5, #0]
 801188a:	6a21      	ldr	r1, [r4, #32]
 801188c:	602b      	str	r3, [r5, #0]
 801188e:	d032      	beq.n	80118f6 <__sflush_r+0x9a>
 8011890:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011892:	89a3      	ldrh	r3, [r4, #12]
 8011894:	075a      	lsls	r2, r3, #29
 8011896:	d505      	bpl.n	80118a4 <__sflush_r+0x48>
 8011898:	6863      	ldr	r3, [r4, #4]
 801189a:	1ac0      	subs	r0, r0, r3
 801189c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801189e:	b10b      	cbz	r3, 80118a4 <__sflush_r+0x48>
 80118a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80118a2:	1ac0      	subs	r0, r0, r3
 80118a4:	2300      	movs	r3, #0
 80118a6:	4602      	mov	r2, r0
 80118a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118aa:	6a21      	ldr	r1, [r4, #32]
 80118ac:	4628      	mov	r0, r5
 80118ae:	47b0      	blx	r6
 80118b0:	1c43      	adds	r3, r0, #1
 80118b2:	89a3      	ldrh	r3, [r4, #12]
 80118b4:	d106      	bne.n	80118c4 <__sflush_r+0x68>
 80118b6:	6829      	ldr	r1, [r5, #0]
 80118b8:	291d      	cmp	r1, #29
 80118ba:	d848      	bhi.n	801194e <__sflush_r+0xf2>
 80118bc:	4a29      	ldr	r2, [pc, #164]	; (8011964 <__sflush_r+0x108>)
 80118be:	40ca      	lsrs	r2, r1
 80118c0:	07d6      	lsls	r6, r2, #31
 80118c2:	d544      	bpl.n	801194e <__sflush_r+0xf2>
 80118c4:	2200      	movs	r2, #0
 80118c6:	6062      	str	r2, [r4, #4]
 80118c8:	04d9      	lsls	r1, r3, #19
 80118ca:	6922      	ldr	r2, [r4, #16]
 80118cc:	6022      	str	r2, [r4, #0]
 80118ce:	d504      	bpl.n	80118da <__sflush_r+0x7e>
 80118d0:	1c42      	adds	r2, r0, #1
 80118d2:	d101      	bne.n	80118d8 <__sflush_r+0x7c>
 80118d4:	682b      	ldr	r3, [r5, #0]
 80118d6:	b903      	cbnz	r3, 80118da <__sflush_r+0x7e>
 80118d8:	6560      	str	r0, [r4, #84]	; 0x54
 80118da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118dc:	602f      	str	r7, [r5, #0]
 80118de:	2900      	cmp	r1, #0
 80118e0:	d0c9      	beq.n	8011876 <__sflush_r+0x1a>
 80118e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118e6:	4299      	cmp	r1, r3
 80118e8:	d002      	beq.n	80118f0 <__sflush_r+0x94>
 80118ea:	4628      	mov	r0, r5
 80118ec:	f000 f9fa 	bl	8011ce4 <_free_r>
 80118f0:	2000      	movs	r0, #0
 80118f2:	6360      	str	r0, [r4, #52]	; 0x34
 80118f4:	e7c0      	b.n	8011878 <__sflush_r+0x1c>
 80118f6:	2301      	movs	r3, #1
 80118f8:	4628      	mov	r0, r5
 80118fa:	47b0      	blx	r6
 80118fc:	1c41      	adds	r1, r0, #1
 80118fe:	d1c8      	bne.n	8011892 <__sflush_r+0x36>
 8011900:	682b      	ldr	r3, [r5, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d0c5      	beq.n	8011892 <__sflush_r+0x36>
 8011906:	2b1d      	cmp	r3, #29
 8011908:	d001      	beq.n	801190e <__sflush_r+0xb2>
 801190a:	2b16      	cmp	r3, #22
 801190c:	d101      	bne.n	8011912 <__sflush_r+0xb6>
 801190e:	602f      	str	r7, [r5, #0]
 8011910:	e7b1      	b.n	8011876 <__sflush_r+0x1a>
 8011912:	89a3      	ldrh	r3, [r4, #12]
 8011914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011918:	81a3      	strh	r3, [r4, #12]
 801191a:	e7ad      	b.n	8011878 <__sflush_r+0x1c>
 801191c:	690f      	ldr	r7, [r1, #16]
 801191e:	2f00      	cmp	r7, #0
 8011920:	d0a9      	beq.n	8011876 <__sflush_r+0x1a>
 8011922:	0793      	lsls	r3, r2, #30
 8011924:	680e      	ldr	r6, [r1, #0]
 8011926:	bf08      	it	eq
 8011928:	694b      	ldreq	r3, [r1, #20]
 801192a:	600f      	str	r7, [r1, #0]
 801192c:	bf18      	it	ne
 801192e:	2300      	movne	r3, #0
 8011930:	eba6 0807 	sub.w	r8, r6, r7
 8011934:	608b      	str	r3, [r1, #8]
 8011936:	f1b8 0f00 	cmp.w	r8, #0
 801193a:	dd9c      	ble.n	8011876 <__sflush_r+0x1a>
 801193c:	4643      	mov	r3, r8
 801193e:	463a      	mov	r2, r7
 8011940:	6a21      	ldr	r1, [r4, #32]
 8011942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011944:	4628      	mov	r0, r5
 8011946:	47b0      	blx	r6
 8011948:	2800      	cmp	r0, #0
 801194a:	dc06      	bgt.n	801195a <__sflush_r+0xfe>
 801194c:	89a3      	ldrh	r3, [r4, #12]
 801194e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011952:	81a3      	strh	r3, [r4, #12]
 8011954:	f04f 30ff 	mov.w	r0, #4294967295
 8011958:	e78e      	b.n	8011878 <__sflush_r+0x1c>
 801195a:	4407      	add	r7, r0
 801195c:	eba8 0800 	sub.w	r8, r8, r0
 8011960:	e7e9      	b.n	8011936 <__sflush_r+0xda>
 8011962:	bf00      	nop
 8011964:	20400001 	.word	0x20400001

08011968 <_fflush_r>:
 8011968:	b538      	push	{r3, r4, r5, lr}
 801196a:	690b      	ldr	r3, [r1, #16]
 801196c:	4605      	mov	r5, r0
 801196e:	460c      	mov	r4, r1
 8011970:	b1db      	cbz	r3, 80119aa <_fflush_r+0x42>
 8011972:	b118      	cbz	r0, 801197c <_fflush_r+0x14>
 8011974:	6983      	ldr	r3, [r0, #24]
 8011976:	b90b      	cbnz	r3, 801197c <_fflush_r+0x14>
 8011978:	f000 f872 	bl	8011a60 <__sinit>
 801197c:	4b0c      	ldr	r3, [pc, #48]	; (80119b0 <_fflush_r+0x48>)
 801197e:	429c      	cmp	r4, r3
 8011980:	d109      	bne.n	8011996 <_fflush_r+0x2e>
 8011982:	686c      	ldr	r4, [r5, #4]
 8011984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011988:	b17b      	cbz	r3, 80119aa <_fflush_r+0x42>
 801198a:	4621      	mov	r1, r4
 801198c:	4628      	mov	r0, r5
 801198e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011992:	f7ff bf63 	b.w	801185c <__sflush_r>
 8011996:	4b07      	ldr	r3, [pc, #28]	; (80119b4 <_fflush_r+0x4c>)
 8011998:	429c      	cmp	r4, r3
 801199a:	d101      	bne.n	80119a0 <_fflush_r+0x38>
 801199c:	68ac      	ldr	r4, [r5, #8]
 801199e:	e7f1      	b.n	8011984 <_fflush_r+0x1c>
 80119a0:	4b05      	ldr	r3, [pc, #20]	; (80119b8 <_fflush_r+0x50>)
 80119a2:	429c      	cmp	r4, r3
 80119a4:	bf08      	it	eq
 80119a6:	68ec      	ldreq	r4, [r5, #12]
 80119a8:	e7ec      	b.n	8011984 <_fflush_r+0x1c>
 80119aa:	2000      	movs	r0, #0
 80119ac:	bd38      	pop	{r3, r4, r5, pc}
 80119ae:	bf00      	nop
 80119b0:	08016ffc 	.word	0x08016ffc
 80119b4:	0801701c 	.word	0x0801701c
 80119b8:	08016fdc 	.word	0x08016fdc

080119bc <fflush>:
 80119bc:	4601      	mov	r1, r0
 80119be:	b920      	cbnz	r0, 80119ca <fflush+0xe>
 80119c0:	4b04      	ldr	r3, [pc, #16]	; (80119d4 <fflush+0x18>)
 80119c2:	4905      	ldr	r1, [pc, #20]	; (80119d8 <fflush+0x1c>)
 80119c4:	6818      	ldr	r0, [r3, #0]
 80119c6:	f000 b8d3 	b.w	8011b70 <_fwalk_reent>
 80119ca:	4b04      	ldr	r3, [pc, #16]	; (80119dc <fflush+0x20>)
 80119cc:	6818      	ldr	r0, [r3, #0]
 80119ce:	f7ff bfcb 	b.w	8011968 <_fflush_r>
 80119d2:	bf00      	nop
 80119d4:	0801703c 	.word	0x0801703c
 80119d8:	08011969 	.word	0x08011969
 80119dc:	20000018 	.word	0x20000018

080119e0 <std>:
 80119e0:	2300      	movs	r3, #0
 80119e2:	b510      	push	{r4, lr}
 80119e4:	4604      	mov	r4, r0
 80119e6:	e9c0 3300 	strd	r3, r3, [r0]
 80119ea:	6083      	str	r3, [r0, #8]
 80119ec:	8181      	strh	r1, [r0, #12]
 80119ee:	6643      	str	r3, [r0, #100]	; 0x64
 80119f0:	81c2      	strh	r2, [r0, #14]
 80119f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119f6:	6183      	str	r3, [r0, #24]
 80119f8:	4619      	mov	r1, r3
 80119fa:	2208      	movs	r2, #8
 80119fc:	305c      	adds	r0, #92	; 0x5c
 80119fe:	f000 f968 	bl	8011cd2 <memset>
 8011a02:	4b05      	ldr	r3, [pc, #20]	; (8011a18 <std+0x38>)
 8011a04:	6263      	str	r3, [r4, #36]	; 0x24
 8011a06:	4b05      	ldr	r3, [pc, #20]	; (8011a1c <std+0x3c>)
 8011a08:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a0a:	4b05      	ldr	r3, [pc, #20]	; (8011a20 <std+0x40>)
 8011a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a0e:	4b05      	ldr	r3, [pc, #20]	; (8011a24 <std+0x44>)
 8011a10:	6224      	str	r4, [r4, #32]
 8011a12:	6323      	str	r3, [r4, #48]	; 0x30
 8011a14:	bd10      	pop	{r4, pc}
 8011a16:	bf00      	nop
 8011a18:	08013a45 	.word	0x08013a45
 8011a1c:	08013a67 	.word	0x08013a67
 8011a20:	08013a9f 	.word	0x08013a9f
 8011a24:	08013ac3 	.word	0x08013ac3

08011a28 <_cleanup_r>:
 8011a28:	4901      	ldr	r1, [pc, #4]	; (8011a30 <_cleanup_r+0x8>)
 8011a2a:	f000 b8a1 	b.w	8011b70 <_fwalk_reent>
 8011a2e:	bf00      	nop
 8011a30:	08011969 	.word	0x08011969

08011a34 <__sfmoreglue>:
 8011a34:	b570      	push	{r4, r5, r6, lr}
 8011a36:	1e4a      	subs	r2, r1, #1
 8011a38:	2568      	movs	r5, #104	; 0x68
 8011a3a:	4355      	muls	r5, r2
 8011a3c:	460e      	mov	r6, r1
 8011a3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011a42:	f000 f99d 	bl	8011d80 <_malloc_r>
 8011a46:	4604      	mov	r4, r0
 8011a48:	b140      	cbz	r0, 8011a5c <__sfmoreglue+0x28>
 8011a4a:	2100      	movs	r1, #0
 8011a4c:	e9c0 1600 	strd	r1, r6, [r0]
 8011a50:	300c      	adds	r0, #12
 8011a52:	60a0      	str	r0, [r4, #8]
 8011a54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011a58:	f000 f93b 	bl	8011cd2 <memset>
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	bd70      	pop	{r4, r5, r6, pc}

08011a60 <__sinit>:
 8011a60:	6983      	ldr	r3, [r0, #24]
 8011a62:	b510      	push	{r4, lr}
 8011a64:	4604      	mov	r4, r0
 8011a66:	bb33      	cbnz	r3, 8011ab6 <__sinit+0x56>
 8011a68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011a6c:	6503      	str	r3, [r0, #80]	; 0x50
 8011a6e:	4b12      	ldr	r3, [pc, #72]	; (8011ab8 <__sinit+0x58>)
 8011a70:	4a12      	ldr	r2, [pc, #72]	; (8011abc <__sinit+0x5c>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	6282      	str	r2, [r0, #40]	; 0x28
 8011a76:	4298      	cmp	r0, r3
 8011a78:	bf04      	itt	eq
 8011a7a:	2301      	moveq	r3, #1
 8011a7c:	6183      	streq	r3, [r0, #24]
 8011a7e:	f000 f81f 	bl	8011ac0 <__sfp>
 8011a82:	6060      	str	r0, [r4, #4]
 8011a84:	4620      	mov	r0, r4
 8011a86:	f000 f81b 	bl	8011ac0 <__sfp>
 8011a8a:	60a0      	str	r0, [r4, #8]
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	f000 f817 	bl	8011ac0 <__sfp>
 8011a92:	2200      	movs	r2, #0
 8011a94:	60e0      	str	r0, [r4, #12]
 8011a96:	2104      	movs	r1, #4
 8011a98:	6860      	ldr	r0, [r4, #4]
 8011a9a:	f7ff ffa1 	bl	80119e0 <std>
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	2109      	movs	r1, #9
 8011aa2:	68a0      	ldr	r0, [r4, #8]
 8011aa4:	f7ff ff9c 	bl	80119e0 <std>
 8011aa8:	2202      	movs	r2, #2
 8011aaa:	2112      	movs	r1, #18
 8011aac:	68e0      	ldr	r0, [r4, #12]
 8011aae:	f7ff ff97 	bl	80119e0 <std>
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	61a3      	str	r3, [r4, #24]
 8011ab6:	bd10      	pop	{r4, pc}
 8011ab8:	0801703c 	.word	0x0801703c
 8011abc:	08011a29 	.word	0x08011a29

08011ac0 <__sfp>:
 8011ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ac2:	4b1b      	ldr	r3, [pc, #108]	; (8011b30 <__sfp+0x70>)
 8011ac4:	681e      	ldr	r6, [r3, #0]
 8011ac6:	69b3      	ldr	r3, [r6, #24]
 8011ac8:	4607      	mov	r7, r0
 8011aca:	b913      	cbnz	r3, 8011ad2 <__sfp+0x12>
 8011acc:	4630      	mov	r0, r6
 8011ace:	f7ff ffc7 	bl	8011a60 <__sinit>
 8011ad2:	3648      	adds	r6, #72	; 0x48
 8011ad4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ad8:	3b01      	subs	r3, #1
 8011ada:	d503      	bpl.n	8011ae4 <__sfp+0x24>
 8011adc:	6833      	ldr	r3, [r6, #0]
 8011ade:	b133      	cbz	r3, 8011aee <__sfp+0x2e>
 8011ae0:	6836      	ldr	r6, [r6, #0]
 8011ae2:	e7f7      	b.n	8011ad4 <__sfp+0x14>
 8011ae4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011ae8:	b16d      	cbz	r5, 8011b06 <__sfp+0x46>
 8011aea:	3468      	adds	r4, #104	; 0x68
 8011aec:	e7f4      	b.n	8011ad8 <__sfp+0x18>
 8011aee:	2104      	movs	r1, #4
 8011af0:	4638      	mov	r0, r7
 8011af2:	f7ff ff9f 	bl	8011a34 <__sfmoreglue>
 8011af6:	6030      	str	r0, [r6, #0]
 8011af8:	2800      	cmp	r0, #0
 8011afa:	d1f1      	bne.n	8011ae0 <__sfp+0x20>
 8011afc:	230c      	movs	r3, #12
 8011afe:	603b      	str	r3, [r7, #0]
 8011b00:	4604      	mov	r4, r0
 8011b02:	4620      	mov	r0, r4
 8011b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b06:	4b0b      	ldr	r3, [pc, #44]	; (8011b34 <__sfp+0x74>)
 8011b08:	6665      	str	r5, [r4, #100]	; 0x64
 8011b0a:	e9c4 5500 	strd	r5, r5, [r4]
 8011b0e:	60a5      	str	r5, [r4, #8]
 8011b10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011b14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011b18:	2208      	movs	r2, #8
 8011b1a:	4629      	mov	r1, r5
 8011b1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011b20:	f000 f8d7 	bl	8011cd2 <memset>
 8011b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011b28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011b2c:	e7e9      	b.n	8011b02 <__sfp+0x42>
 8011b2e:	bf00      	nop
 8011b30:	0801703c 	.word	0x0801703c
 8011b34:	ffff0001 	.word	0xffff0001

08011b38 <_fwalk>:
 8011b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b3c:	4688      	mov	r8, r1
 8011b3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011b42:	2600      	movs	r6, #0
 8011b44:	b914      	cbnz	r4, 8011b4c <_fwalk+0x14>
 8011b46:	4630      	mov	r0, r6
 8011b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b4c:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011b50:	3f01      	subs	r7, #1
 8011b52:	d501      	bpl.n	8011b58 <_fwalk+0x20>
 8011b54:	6824      	ldr	r4, [r4, #0]
 8011b56:	e7f5      	b.n	8011b44 <_fwalk+0xc>
 8011b58:	89ab      	ldrh	r3, [r5, #12]
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	d906      	bls.n	8011b6c <_fwalk+0x34>
 8011b5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b62:	3301      	adds	r3, #1
 8011b64:	d002      	beq.n	8011b6c <_fwalk+0x34>
 8011b66:	4628      	mov	r0, r5
 8011b68:	47c0      	blx	r8
 8011b6a:	4306      	orrs	r6, r0
 8011b6c:	3568      	adds	r5, #104	; 0x68
 8011b6e:	e7ef      	b.n	8011b50 <_fwalk+0x18>

08011b70 <_fwalk_reent>:
 8011b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b74:	4680      	mov	r8, r0
 8011b76:	4689      	mov	r9, r1
 8011b78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011b7c:	2600      	movs	r6, #0
 8011b7e:	b914      	cbnz	r4, 8011b86 <_fwalk_reent+0x16>
 8011b80:	4630      	mov	r0, r6
 8011b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011b8a:	3f01      	subs	r7, #1
 8011b8c:	d501      	bpl.n	8011b92 <_fwalk_reent+0x22>
 8011b8e:	6824      	ldr	r4, [r4, #0]
 8011b90:	e7f5      	b.n	8011b7e <_fwalk_reent+0xe>
 8011b92:	89ab      	ldrh	r3, [r5, #12]
 8011b94:	2b01      	cmp	r3, #1
 8011b96:	d907      	bls.n	8011ba8 <_fwalk_reent+0x38>
 8011b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	d003      	beq.n	8011ba8 <_fwalk_reent+0x38>
 8011ba0:	4629      	mov	r1, r5
 8011ba2:	4640      	mov	r0, r8
 8011ba4:	47c8      	blx	r9
 8011ba6:	4306      	orrs	r6, r0
 8011ba8:	3568      	adds	r5, #104	; 0x68
 8011baa:	e7ee      	b.n	8011b8a <_fwalk_reent+0x1a>

08011bac <__libc_init_array>:
 8011bac:	b570      	push	{r4, r5, r6, lr}
 8011bae:	4e0d      	ldr	r6, [pc, #52]	; (8011be4 <__libc_init_array+0x38>)
 8011bb0:	4c0d      	ldr	r4, [pc, #52]	; (8011be8 <__libc_init_array+0x3c>)
 8011bb2:	1ba4      	subs	r4, r4, r6
 8011bb4:	10a4      	asrs	r4, r4, #2
 8011bb6:	2500      	movs	r5, #0
 8011bb8:	42a5      	cmp	r5, r4
 8011bba:	d109      	bne.n	8011bd0 <__libc_init_array+0x24>
 8011bbc:	4e0b      	ldr	r6, [pc, #44]	; (8011bec <__libc_init_array+0x40>)
 8011bbe:	4c0c      	ldr	r4, [pc, #48]	; (8011bf0 <__libc_init_array+0x44>)
 8011bc0:	f005 f838 	bl	8016c34 <_init>
 8011bc4:	1ba4      	subs	r4, r4, r6
 8011bc6:	10a4      	asrs	r4, r4, #2
 8011bc8:	2500      	movs	r5, #0
 8011bca:	42a5      	cmp	r5, r4
 8011bcc:	d105      	bne.n	8011bda <__libc_init_array+0x2e>
 8011bce:	bd70      	pop	{r4, r5, r6, pc}
 8011bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011bd4:	4798      	blx	r3
 8011bd6:	3501      	adds	r5, #1
 8011bd8:	e7ee      	b.n	8011bb8 <__libc_init_array+0xc>
 8011bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011bde:	4798      	blx	r3
 8011be0:	3501      	adds	r5, #1
 8011be2:	e7f2      	b.n	8011bca <__libc_init_array+0x1e>
 8011be4:	08017318 	.word	0x08017318
 8011be8:	08017318 	.word	0x08017318
 8011bec:	08017318 	.word	0x08017318
 8011bf0:	0801731c 	.word	0x0801731c

08011bf4 <__swhatbuf_r>:
 8011bf4:	b570      	push	{r4, r5, r6, lr}
 8011bf6:	460e      	mov	r6, r1
 8011bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bfc:	2900      	cmp	r1, #0
 8011bfe:	b096      	sub	sp, #88	; 0x58
 8011c00:	4614      	mov	r4, r2
 8011c02:	461d      	mov	r5, r3
 8011c04:	da07      	bge.n	8011c16 <__swhatbuf_r+0x22>
 8011c06:	2300      	movs	r3, #0
 8011c08:	602b      	str	r3, [r5, #0]
 8011c0a:	89b3      	ldrh	r3, [r6, #12]
 8011c0c:	061a      	lsls	r2, r3, #24
 8011c0e:	d410      	bmi.n	8011c32 <__swhatbuf_r+0x3e>
 8011c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c14:	e00e      	b.n	8011c34 <__swhatbuf_r+0x40>
 8011c16:	466a      	mov	r2, sp
 8011c18:	f003 fe66 	bl	80158e8 <_fstat_r>
 8011c1c:	2800      	cmp	r0, #0
 8011c1e:	dbf2      	blt.n	8011c06 <__swhatbuf_r+0x12>
 8011c20:	9a01      	ldr	r2, [sp, #4]
 8011c22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c2a:	425a      	negs	r2, r3
 8011c2c:	415a      	adcs	r2, r3
 8011c2e:	602a      	str	r2, [r5, #0]
 8011c30:	e7ee      	b.n	8011c10 <__swhatbuf_r+0x1c>
 8011c32:	2340      	movs	r3, #64	; 0x40
 8011c34:	2000      	movs	r0, #0
 8011c36:	6023      	str	r3, [r4, #0]
 8011c38:	b016      	add	sp, #88	; 0x58
 8011c3a:	bd70      	pop	{r4, r5, r6, pc}

08011c3c <__smakebuf_r>:
 8011c3c:	898b      	ldrh	r3, [r1, #12]
 8011c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c40:	079d      	lsls	r5, r3, #30
 8011c42:	4606      	mov	r6, r0
 8011c44:	460c      	mov	r4, r1
 8011c46:	d507      	bpl.n	8011c58 <__smakebuf_r+0x1c>
 8011c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c4c:	6023      	str	r3, [r4, #0]
 8011c4e:	6123      	str	r3, [r4, #16]
 8011c50:	2301      	movs	r3, #1
 8011c52:	6163      	str	r3, [r4, #20]
 8011c54:	b002      	add	sp, #8
 8011c56:	bd70      	pop	{r4, r5, r6, pc}
 8011c58:	ab01      	add	r3, sp, #4
 8011c5a:	466a      	mov	r2, sp
 8011c5c:	f7ff ffca 	bl	8011bf4 <__swhatbuf_r>
 8011c60:	9900      	ldr	r1, [sp, #0]
 8011c62:	4605      	mov	r5, r0
 8011c64:	4630      	mov	r0, r6
 8011c66:	f000 f88b 	bl	8011d80 <_malloc_r>
 8011c6a:	b948      	cbnz	r0, 8011c80 <__smakebuf_r+0x44>
 8011c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c70:	059a      	lsls	r2, r3, #22
 8011c72:	d4ef      	bmi.n	8011c54 <__smakebuf_r+0x18>
 8011c74:	f023 0303 	bic.w	r3, r3, #3
 8011c78:	f043 0302 	orr.w	r3, r3, #2
 8011c7c:	81a3      	strh	r3, [r4, #12]
 8011c7e:	e7e3      	b.n	8011c48 <__smakebuf_r+0xc>
 8011c80:	4b0d      	ldr	r3, [pc, #52]	; (8011cb8 <__smakebuf_r+0x7c>)
 8011c82:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c84:	89a3      	ldrh	r3, [r4, #12]
 8011c86:	6020      	str	r0, [r4, #0]
 8011c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c8c:	81a3      	strh	r3, [r4, #12]
 8011c8e:	9b00      	ldr	r3, [sp, #0]
 8011c90:	6163      	str	r3, [r4, #20]
 8011c92:	9b01      	ldr	r3, [sp, #4]
 8011c94:	6120      	str	r0, [r4, #16]
 8011c96:	b15b      	cbz	r3, 8011cb0 <__smakebuf_r+0x74>
 8011c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	f004 f95b 	bl	8015f58 <_isatty_r>
 8011ca2:	b128      	cbz	r0, 8011cb0 <__smakebuf_r+0x74>
 8011ca4:	89a3      	ldrh	r3, [r4, #12]
 8011ca6:	f023 0303 	bic.w	r3, r3, #3
 8011caa:	f043 0301 	orr.w	r3, r3, #1
 8011cae:	81a3      	strh	r3, [r4, #12]
 8011cb0:	89a3      	ldrh	r3, [r4, #12]
 8011cb2:	431d      	orrs	r5, r3
 8011cb4:	81a5      	strh	r5, [r4, #12]
 8011cb6:	e7cd      	b.n	8011c54 <__smakebuf_r+0x18>
 8011cb8:	08011a29 	.word	0x08011a29

08011cbc <memcpy>:
 8011cbc:	b510      	push	{r4, lr}
 8011cbe:	1e43      	subs	r3, r0, #1
 8011cc0:	440a      	add	r2, r1
 8011cc2:	4291      	cmp	r1, r2
 8011cc4:	d100      	bne.n	8011cc8 <memcpy+0xc>
 8011cc6:	bd10      	pop	{r4, pc}
 8011cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cd0:	e7f7      	b.n	8011cc2 <memcpy+0x6>

08011cd2 <memset>:
 8011cd2:	4402      	add	r2, r0
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	4293      	cmp	r3, r2
 8011cd8:	d100      	bne.n	8011cdc <memset+0xa>
 8011cda:	4770      	bx	lr
 8011cdc:	f803 1b01 	strb.w	r1, [r3], #1
 8011ce0:	e7f9      	b.n	8011cd6 <memset+0x4>
	...

08011ce4 <_free_r>:
 8011ce4:	b538      	push	{r3, r4, r5, lr}
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	2900      	cmp	r1, #0
 8011cea:	d045      	beq.n	8011d78 <_free_r+0x94>
 8011cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cf0:	1f0c      	subs	r4, r1, #4
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	bfb8      	it	lt
 8011cf6:	18e4      	addlt	r4, r4, r3
 8011cf8:	f004 f9a5 	bl	8016046 <__malloc_lock>
 8011cfc:	4a1f      	ldr	r2, [pc, #124]	; (8011d7c <_free_r+0x98>)
 8011cfe:	6813      	ldr	r3, [r2, #0]
 8011d00:	4610      	mov	r0, r2
 8011d02:	b933      	cbnz	r3, 8011d12 <_free_r+0x2e>
 8011d04:	6063      	str	r3, [r4, #4]
 8011d06:	6014      	str	r4, [r2, #0]
 8011d08:	4628      	mov	r0, r5
 8011d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d0e:	f004 b99b 	b.w	8016048 <__malloc_unlock>
 8011d12:	42a3      	cmp	r3, r4
 8011d14:	d90c      	bls.n	8011d30 <_free_r+0x4c>
 8011d16:	6821      	ldr	r1, [r4, #0]
 8011d18:	1862      	adds	r2, r4, r1
 8011d1a:	4293      	cmp	r3, r2
 8011d1c:	bf04      	itt	eq
 8011d1e:	681a      	ldreq	r2, [r3, #0]
 8011d20:	685b      	ldreq	r3, [r3, #4]
 8011d22:	6063      	str	r3, [r4, #4]
 8011d24:	bf04      	itt	eq
 8011d26:	1852      	addeq	r2, r2, r1
 8011d28:	6022      	streq	r2, [r4, #0]
 8011d2a:	6004      	str	r4, [r0, #0]
 8011d2c:	e7ec      	b.n	8011d08 <_free_r+0x24>
 8011d2e:	4613      	mov	r3, r2
 8011d30:	685a      	ldr	r2, [r3, #4]
 8011d32:	b10a      	cbz	r2, 8011d38 <_free_r+0x54>
 8011d34:	42a2      	cmp	r2, r4
 8011d36:	d9fa      	bls.n	8011d2e <_free_r+0x4a>
 8011d38:	6819      	ldr	r1, [r3, #0]
 8011d3a:	1858      	adds	r0, r3, r1
 8011d3c:	42a0      	cmp	r0, r4
 8011d3e:	d10b      	bne.n	8011d58 <_free_r+0x74>
 8011d40:	6820      	ldr	r0, [r4, #0]
 8011d42:	4401      	add	r1, r0
 8011d44:	1858      	adds	r0, r3, r1
 8011d46:	4282      	cmp	r2, r0
 8011d48:	6019      	str	r1, [r3, #0]
 8011d4a:	d1dd      	bne.n	8011d08 <_free_r+0x24>
 8011d4c:	6810      	ldr	r0, [r2, #0]
 8011d4e:	6852      	ldr	r2, [r2, #4]
 8011d50:	605a      	str	r2, [r3, #4]
 8011d52:	4401      	add	r1, r0
 8011d54:	6019      	str	r1, [r3, #0]
 8011d56:	e7d7      	b.n	8011d08 <_free_r+0x24>
 8011d58:	d902      	bls.n	8011d60 <_free_r+0x7c>
 8011d5a:	230c      	movs	r3, #12
 8011d5c:	602b      	str	r3, [r5, #0]
 8011d5e:	e7d3      	b.n	8011d08 <_free_r+0x24>
 8011d60:	6820      	ldr	r0, [r4, #0]
 8011d62:	1821      	adds	r1, r4, r0
 8011d64:	428a      	cmp	r2, r1
 8011d66:	bf04      	itt	eq
 8011d68:	6811      	ldreq	r1, [r2, #0]
 8011d6a:	6852      	ldreq	r2, [r2, #4]
 8011d6c:	6062      	str	r2, [r4, #4]
 8011d6e:	bf04      	itt	eq
 8011d70:	1809      	addeq	r1, r1, r0
 8011d72:	6021      	streq	r1, [r4, #0]
 8011d74:	605c      	str	r4, [r3, #4]
 8011d76:	e7c7      	b.n	8011d08 <_free_r+0x24>
 8011d78:	bd38      	pop	{r3, r4, r5, pc}
 8011d7a:	bf00      	nop
 8011d7c:	20001500 	.word	0x20001500

08011d80 <_malloc_r>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	1ccd      	adds	r5, r1, #3
 8011d84:	f025 0503 	bic.w	r5, r5, #3
 8011d88:	3508      	adds	r5, #8
 8011d8a:	2d0c      	cmp	r5, #12
 8011d8c:	bf38      	it	cc
 8011d8e:	250c      	movcc	r5, #12
 8011d90:	2d00      	cmp	r5, #0
 8011d92:	4606      	mov	r6, r0
 8011d94:	db01      	blt.n	8011d9a <_malloc_r+0x1a>
 8011d96:	42a9      	cmp	r1, r5
 8011d98:	d903      	bls.n	8011da2 <_malloc_r+0x22>
 8011d9a:	230c      	movs	r3, #12
 8011d9c:	6033      	str	r3, [r6, #0]
 8011d9e:	2000      	movs	r0, #0
 8011da0:	bd70      	pop	{r4, r5, r6, pc}
 8011da2:	f004 f950 	bl	8016046 <__malloc_lock>
 8011da6:	4a21      	ldr	r2, [pc, #132]	; (8011e2c <_malloc_r+0xac>)
 8011da8:	6814      	ldr	r4, [r2, #0]
 8011daa:	4621      	mov	r1, r4
 8011dac:	b991      	cbnz	r1, 8011dd4 <_malloc_r+0x54>
 8011dae:	4c20      	ldr	r4, [pc, #128]	; (8011e30 <_malloc_r+0xb0>)
 8011db0:	6823      	ldr	r3, [r4, #0]
 8011db2:	b91b      	cbnz	r3, 8011dbc <_malloc_r+0x3c>
 8011db4:	4630      	mov	r0, r6
 8011db6:	f001 fd0f 	bl	80137d8 <_sbrk_r>
 8011dba:	6020      	str	r0, [r4, #0]
 8011dbc:	4629      	mov	r1, r5
 8011dbe:	4630      	mov	r0, r6
 8011dc0:	f001 fd0a 	bl	80137d8 <_sbrk_r>
 8011dc4:	1c43      	adds	r3, r0, #1
 8011dc6:	d124      	bne.n	8011e12 <_malloc_r+0x92>
 8011dc8:	230c      	movs	r3, #12
 8011dca:	6033      	str	r3, [r6, #0]
 8011dcc:	4630      	mov	r0, r6
 8011dce:	f004 f93b 	bl	8016048 <__malloc_unlock>
 8011dd2:	e7e4      	b.n	8011d9e <_malloc_r+0x1e>
 8011dd4:	680b      	ldr	r3, [r1, #0]
 8011dd6:	1b5b      	subs	r3, r3, r5
 8011dd8:	d418      	bmi.n	8011e0c <_malloc_r+0x8c>
 8011dda:	2b0b      	cmp	r3, #11
 8011ddc:	d90f      	bls.n	8011dfe <_malloc_r+0x7e>
 8011dde:	600b      	str	r3, [r1, #0]
 8011de0:	50cd      	str	r5, [r1, r3]
 8011de2:	18cc      	adds	r4, r1, r3
 8011de4:	4630      	mov	r0, r6
 8011de6:	f004 f92f 	bl	8016048 <__malloc_unlock>
 8011dea:	f104 000b 	add.w	r0, r4, #11
 8011dee:	1d23      	adds	r3, r4, #4
 8011df0:	f020 0007 	bic.w	r0, r0, #7
 8011df4:	1ac3      	subs	r3, r0, r3
 8011df6:	d0d3      	beq.n	8011da0 <_malloc_r+0x20>
 8011df8:	425a      	negs	r2, r3
 8011dfa:	50e2      	str	r2, [r4, r3]
 8011dfc:	e7d0      	b.n	8011da0 <_malloc_r+0x20>
 8011dfe:	428c      	cmp	r4, r1
 8011e00:	684b      	ldr	r3, [r1, #4]
 8011e02:	bf16      	itet	ne
 8011e04:	6063      	strne	r3, [r4, #4]
 8011e06:	6013      	streq	r3, [r2, #0]
 8011e08:	460c      	movne	r4, r1
 8011e0a:	e7eb      	b.n	8011de4 <_malloc_r+0x64>
 8011e0c:	460c      	mov	r4, r1
 8011e0e:	6849      	ldr	r1, [r1, #4]
 8011e10:	e7cc      	b.n	8011dac <_malloc_r+0x2c>
 8011e12:	1cc4      	adds	r4, r0, #3
 8011e14:	f024 0403 	bic.w	r4, r4, #3
 8011e18:	42a0      	cmp	r0, r4
 8011e1a:	d005      	beq.n	8011e28 <_malloc_r+0xa8>
 8011e1c:	1a21      	subs	r1, r4, r0
 8011e1e:	4630      	mov	r0, r6
 8011e20:	f001 fcda 	bl	80137d8 <_sbrk_r>
 8011e24:	3001      	adds	r0, #1
 8011e26:	d0cf      	beq.n	8011dc8 <_malloc_r+0x48>
 8011e28:	6025      	str	r5, [r4, #0]
 8011e2a:	e7db      	b.n	8011de4 <_malloc_r+0x64>
 8011e2c:	20001500 	.word	0x20001500
 8011e30:	20001504 	.word	0x20001504

08011e34 <__sfputc_r>:
 8011e34:	6893      	ldr	r3, [r2, #8]
 8011e36:	3b01      	subs	r3, #1
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	b410      	push	{r4}
 8011e3c:	6093      	str	r3, [r2, #8]
 8011e3e:	da08      	bge.n	8011e52 <__sfputc_r+0x1e>
 8011e40:	6994      	ldr	r4, [r2, #24]
 8011e42:	42a3      	cmp	r3, r4
 8011e44:	db01      	blt.n	8011e4a <__sfputc_r+0x16>
 8011e46:	290a      	cmp	r1, #10
 8011e48:	d103      	bne.n	8011e52 <__sfputc_r+0x1e>
 8011e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e4e:	f002 be25 	b.w	8014a9c <__swbuf_r>
 8011e52:	6813      	ldr	r3, [r2, #0]
 8011e54:	1c58      	adds	r0, r3, #1
 8011e56:	6010      	str	r0, [r2, #0]
 8011e58:	7019      	strb	r1, [r3, #0]
 8011e5a:	4608      	mov	r0, r1
 8011e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e60:	4770      	bx	lr

08011e62 <__sfputs_r>:
 8011e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e64:	4606      	mov	r6, r0
 8011e66:	460f      	mov	r7, r1
 8011e68:	4614      	mov	r4, r2
 8011e6a:	18d5      	adds	r5, r2, r3
 8011e6c:	42ac      	cmp	r4, r5
 8011e6e:	d101      	bne.n	8011e74 <__sfputs_r+0x12>
 8011e70:	2000      	movs	r0, #0
 8011e72:	e007      	b.n	8011e84 <__sfputs_r+0x22>
 8011e74:	463a      	mov	r2, r7
 8011e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e7a:	4630      	mov	r0, r6
 8011e7c:	f7ff ffda 	bl	8011e34 <__sfputc_r>
 8011e80:	1c43      	adds	r3, r0, #1
 8011e82:	d1f3      	bne.n	8011e6c <__sfputs_r+0xa>
 8011e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011e88 <_vfiprintf_r>:
 8011e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e8c:	460c      	mov	r4, r1
 8011e8e:	b09d      	sub	sp, #116	; 0x74
 8011e90:	4617      	mov	r7, r2
 8011e92:	461d      	mov	r5, r3
 8011e94:	4606      	mov	r6, r0
 8011e96:	b118      	cbz	r0, 8011ea0 <_vfiprintf_r+0x18>
 8011e98:	6983      	ldr	r3, [r0, #24]
 8011e9a:	b90b      	cbnz	r3, 8011ea0 <_vfiprintf_r+0x18>
 8011e9c:	f7ff fde0 	bl	8011a60 <__sinit>
 8011ea0:	4b7c      	ldr	r3, [pc, #496]	; (8012094 <_vfiprintf_r+0x20c>)
 8011ea2:	429c      	cmp	r4, r3
 8011ea4:	d158      	bne.n	8011f58 <_vfiprintf_r+0xd0>
 8011ea6:	6874      	ldr	r4, [r6, #4]
 8011ea8:	89a3      	ldrh	r3, [r4, #12]
 8011eaa:	0718      	lsls	r0, r3, #28
 8011eac:	d55e      	bpl.n	8011f6c <_vfiprintf_r+0xe4>
 8011eae:	6923      	ldr	r3, [r4, #16]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d05b      	beq.n	8011f6c <_vfiprintf_r+0xe4>
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8011eb8:	2320      	movs	r3, #32
 8011eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ebe:	2330      	movs	r3, #48	; 0x30
 8011ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ec4:	9503      	str	r5, [sp, #12]
 8011ec6:	f04f 0b01 	mov.w	fp, #1
 8011eca:	46b8      	mov	r8, r7
 8011ecc:	4645      	mov	r5, r8
 8011ece:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011ed2:	b10b      	cbz	r3, 8011ed8 <_vfiprintf_r+0x50>
 8011ed4:	2b25      	cmp	r3, #37	; 0x25
 8011ed6:	d154      	bne.n	8011f82 <_vfiprintf_r+0xfa>
 8011ed8:	ebb8 0a07 	subs.w	sl, r8, r7
 8011edc:	d00b      	beq.n	8011ef6 <_vfiprintf_r+0x6e>
 8011ede:	4653      	mov	r3, sl
 8011ee0:	463a      	mov	r2, r7
 8011ee2:	4621      	mov	r1, r4
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	f7ff ffbc 	bl	8011e62 <__sfputs_r>
 8011eea:	3001      	adds	r0, #1
 8011eec:	f000 80c2 	beq.w	8012074 <_vfiprintf_r+0x1ec>
 8011ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ef2:	4453      	add	r3, sl
 8011ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ef6:	f898 3000 	ldrb.w	r3, [r8]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	f000 80ba 	beq.w	8012074 <_vfiprintf_r+0x1ec>
 8011f00:	2300      	movs	r3, #0
 8011f02:	f04f 32ff 	mov.w	r2, #4294967295
 8011f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f0a:	9304      	str	r3, [sp, #16]
 8011f0c:	9307      	str	r3, [sp, #28]
 8011f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f12:	931a      	str	r3, [sp, #104]	; 0x68
 8011f14:	46a8      	mov	r8, r5
 8011f16:	2205      	movs	r2, #5
 8011f18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011f1c:	485e      	ldr	r0, [pc, #376]	; (8012098 <_vfiprintf_r+0x210>)
 8011f1e:	f7f6 f897 	bl	8008050 <memchr>
 8011f22:	9b04      	ldr	r3, [sp, #16]
 8011f24:	bb78      	cbnz	r0, 8011f86 <_vfiprintf_r+0xfe>
 8011f26:	06d9      	lsls	r1, r3, #27
 8011f28:	bf44      	itt	mi
 8011f2a:	2220      	movmi	r2, #32
 8011f2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011f30:	071a      	lsls	r2, r3, #28
 8011f32:	bf44      	itt	mi
 8011f34:	222b      	movmi	r2, #43	; 0x2b
 8011f36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011f3a:	782a      	ldrb	r2, [r5, #0]
 8011f3c:	2a2a      	cmp	r2, #42	; 0x2a
 8011f3e:	d02a      	beq.n	8011f96 <_vfiprintf_r+0x10e>
 8011f40:	9a07      	ldr	r2, [sp, #28]
 8011f42:	46a8      	mov	r8, r5
 8011f44:	2000      	movs	r0, #0
 8011f46:	250a      	movs	r5, #10
 8011f48:	4641      	mov	r1, r8
 8011f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f4e:	3b30      	subs	r3, #48	; 0x30
 8011f50:	2b09      	cmp	r3, #9
 8011f52:	d969      	bls.n	8012028 <_vfiprintf_r+0x1a0>
 8011f54:	b360      	cbz	r0, 8011fb0 <_vfiprintf_r+0x128>
 8011f56:	e024      	b.n	8011fa2 <_vfiprintf_r+0x11a>
 8011f58:	4b50      	ldr	r3, [pc, #320]	; (801209c <_vfiprintf_r+0x214>)
 8011f5a:	429c      	cmp	r4, r3
 8011f5c:	d101      	bne.n	8011f62 <_vfiprintf_r+0xda>
 8011f5e:	68b4      	ldr	r4, [r6, #8]
 8011f60:	e7a2      	b.n	8011ea8 <_vfiprintf_r+0x20>
 8011f62:	4b4f      	ldr	r3, [pc, #316]	; (80120a0 <_vfiprintf_r+0x218>)
 8011f64:	429c      	cmp	r4, r3
 8011f66:	bf08      	it	eq
 8011f68:	68f4      	ldreq	r4, [r6, #12]
 8011f6a:	e79d      	b.n	8011ea8 <_vfiprintf_r+0x20>
 8011f6c:	4621      	mov	r1, r4
 8011f6e:	4630      	mov	r0, r6
 8011f70:	f002 fdf8 	bl	8014b64 <__swsetup_r>
 8011f74:	2800      	cmp	r0, #0
 8011f76:	d09d      	beq.n	8011eb4 <_vfiprintf_r+0x2c>
 8011f78:	f04f 30ff 	mov.w	r0, #4294967295
 8011f7c:	b01d      	add	sp, #116	; 0x74
 8011f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f82:	46a8      	mov	r8, r5
 8011f84:	e7a2      	b.n	8011ecc <_vfiprintf_r+0x44>
 8011f86:	4a44      	ldr	r2, [pc, #272]	; (8012098 <_vfiprintf_r+0x210>)
 8011f88:	1a80      	subs	r0, r0, r2
 8011f8a:	fa0b f000 	lsl.w	r0, fp, r0
 8011f8e:	4318      	orrs	r0, r3
 8011f90:	9004      	str	r0, [sp, #16]
 8011f92:	4645      	mov	r5, r8
 8011f94:	e7be      	b.n	8011f14 <_vfiprintf_r+0x8c>
 8011f96:	9a03      	ldr	r2, [sp, #12]
 8011f98:	1d11      	adds	r1, r2, #4
 8011f9a:	6812      	ldr	r2, [r2, #0]
 8011f9c:	9103      	str	r1, [sp, #12]
 8011f9e:	2a00      	cmp	r2, #0
 8011fa0:	db01      	blt.n	8011fa6 <_vfiprintf_r+0x11e>
 8011fa2:	9207      	str	r2, [sp, #28]
 8011fa4:	e004      	b.n	8011fb0 <_vfiprintf_r+0x128>
 8011fa6:	4252      	negs	r2, r2
 8011fa8:	f043 0302 	orr.w	r3, r3, #2
 8011fac:	9207      	str	r2, [sp, #28]
 8011fae:	9304      	str	r3, [sp, #16]
 8011fb0:	f898 3000 	ldrb.w	r3, [r8]
 8011fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8011fb6:	d10e      	bne.n	8011fd6 <_vfiprintf_r+0x14e>
 8011fb8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8011fbe:	d138      	bne.n	8012032 <_vfiprintf_r+0x1aa>
 8011fc0:	9b03      	ldr	r3, [sp, #12]
 8011fc2:	1d1a      	adds	r2, r3, #4
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	9203      	str	r2, [sp, #12]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	bfb8      	it	lt
 8011fcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8011fd0:	f108 0802 	add.w	r8, r8, #2
 8011fd4:	9305      	str	r3, [sp, #20]
 8011fd6:	4d33      	ldr	r5, [pc, #204]	; (80120a4 <_vfiprintf_r+0x21c>)
 8011fd8:	f898 1000 	ldrb.w	r1, [r8]
 8011fdc:	2203      	movs	r2, #3
 8011fde:	4628      	mov	r0, r5
 8011fe0:	f7f6 f836 	bl	8008050 <memchr>
 8011fe4:	b140      	cbz	r0, 8011ff8 <_vfiprintf_r+0x170>
 8011fe6:	2340      	movs	r3, #64	; 0x40
 8011fe8:	1b40      	subs	r0, r0, r5
 8011fea:	fa03 f000 	lsl.w	r0, r3, r0
 8011fee:	9b04      	ldr	r3, [sp, #16]
 8011ff0:	4303      	orrs	r3, r0
 8011ff2:	f108 0801 	add.w	r8, r8, #1
 8011ff6:	9304      	str	r3, [sp, #16]
 8011ff8:	f898 1000 	ldrb.w	r1, [r8]
 8011ffc:	482a      	ldr	r0, [pc, #168]	; (80120a8 <_vfiprintf_r+0x220>)
 8011ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012002:	2206      	movs	r2, #6
 8012004:	f108 0701 	add.w	r7, r8, #1
 8012008:	f7f6 f822 	bl	8008050 <memchr>
 801200c:	2800      	cmp	r0, #0
 801200e:	d037      	beq.n	8012080 <_vfiprintf_r+0x1f8>
 8012010:	4b26      	ldr	r3, [pc, #152]	; (80120ac <_vfiprintf_r+0x224>)
 8012012:	bb1b      	cbnz	r3, 801205c <_vfiprintf_r+0x1d4>
 8012014:	9b03      	ldr	r3, [sp, #12]
 8012016:	3307      	adds	r3, #7
 8012018:	f023 0307 	bic.w	r3, r3, #7
 801201c:	3308      	adds	r3, #8
 801201e:	9303      	str	r3, [sp, #12]
 8012020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012022:	444b      	add	r3, r9
 8012024:	9309      	str	r3, [sp, #36]	; 0x24
 8012026:	e750      	b.n	8011eca <_vfiprintf_r+0x42>
 8012028:	fb05 3202 	mla	r2, r5, r2, r3
 801202c:	2001      	movs	r0, #1
 801202e:	4688      	mov	r8, r1
 8012030:	e78a      	b.n	8011f48 <_vfiprintf_r+0xc0>
 8012032:	2300      	movs	r3, #0
 8012034:	f108 0801 	add.w	r8, r8, #1
 8012038:	9305      	str	r3, [sp, #20]
 801203a:	4619      	mov	r1, r3
 801203c:	250a      	movs	r5, #10
 801203e:	4640      	mov	r0, r8
 8012040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012044:	3a30      	subs	r2, #48	; 0x30
 8012046:	2a09      	cmp	r2, #9
 8012048:	d903      	bls.n	8012052 <_vfiprintf_r+0x1ca>
 801204a:	2b00      	cmp	r3, #0
 801204c:	d0c3      	beq.n	8011fd6 <_vfiprintf_r+0x14e>
 801204e:	9105      	str	r1, [sp, #20]
 8012050:	e7c1      	b.n	8011fd6 <_vfiprintf_r+0x14e>
 8012052:	fb05 2101 	mla	r1, r5, r1, r2
 8012056:	2301      	movs	r3, #1
 8012058:	4680      	mov	r8, r0
 801205a:	e7f0      	b.n	801203e <_vfiprintf_r+0x1b6>
 801205c:	ab03      	add	r3, sp, #12
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	4622      	mov	r2, r4
 8012062:	4b13      	ldr	r3, [pc, #76]	; (80120b0 <_vfiprintf_r+0x228>)
 8012064:	a904      	add	r1, sp, #16
 8012066:	4630      	mov	r0, r6
 8012068:	f000 f8b8 	bl	80121dc <_printf_float>
 801206c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012070:	4681      	mov	r9, r0
 8012072:	d1d5      	bne.n	8012020 <_vfiprintf_r+0x198>
 8012074:	89a3      	ldrh	r3, [r4, #12]
 8012076:	065b      	lsls	r3, r3, #25
 8012078:	f53f af7e 	bmi.w	8011f78 <_vfiprintf_r+0xf0>
 801207c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801207e:	e77d      	b.n	8011f7c <_vfiprintf_r+0xf4>
 8012080:	ab03      	add	r3, sp, #12
 8012082:	9300      	str	r3, [sp, #0]
 8012084:	4622      	mov	r2, r4
 8012086:	4b0a      	ldr	r3, [pc, #40]	; (80120b0 <_vfiprintf_r+0x228>)
 8012088:	a904      	add	r1, sp, #16
 801208a:	4630      	mov	r0, r6
 801208c:	f000 fb5c 	bl	8012748 <_printf_i>
 8012090:	e7ec      	b.n	801206c <_vfiprintf_r+0x1e4>
 8012092:	bf00      	nop
 8012094:	08016ffc 	.word	0x08016ffc
 8012098:	08017040 	.word	0x08017040
 801209c:	0801701c 	.word	0x0801701c
 80120a0:	08016fdc 	.word	0x08016fdc
 80120a4:	08017046 	.word	0x08017046
 80120a8:	0801704a 	.word	0x0801704a
 80120ac:	080121dd 	.word	0x080121dd
 80120b0:	08011e63 	.word	0x08011e63

080120b4 <__cvt>:
 80120b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120b8:	ec55 4b10 	vmov	r4, r5, d0
 80120bc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80120be:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80120c2:	2d00      	cmp	r5, #0
 80120c4:	460e      	mov	r6, r1
 80120c6:	4691      	mov	r9, r2
 80120c8:	4619      	mov	r1, r3
 80120ca:	bfb8      	it	lt
 80120cc:	4622      	movlt	r2, r4
 80120ce:	462b      	mov	r3, r5
 80120d0:	f027 0720 	bic.w	r7, r7, #32
 80120d4:	bfbb      	ittet	lt
 80120d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80120da:	461d      	movlt	r5, r3
 80120dc:	2300      	movge	r3, #0
 80120de:	232d      	movlt	r3, #45	; 0x2d
 80120e0:	bfb8      	it	lt
 80120e2:	4614      	movlt	r4, r2
 80120e4:	2f46      	cmp	r7, #70	; 0x46
 80120e6:	700b      	strb	r3, [r1, #0]
 80120e8:	d004      	beq.n	80120f4 <__cvt+0x40>
 80120ea:	2f45      	cmp	r7, #69	; 0x45
 80120ec:	d100      	bne.n	80120f0 <__cvt+0x3c>
 80120ee:	3601      	adds	r6, #1
 80120f0:	2102      	movs	r1, #2
 80120f2:	e000      	b.n	80120f6 <__cvt+0x42>
 80120f4:	2103      	movs	r1, #3
 80120f6:	ab03      	add	r3, sp, #12
 80120f8:	9301      	str	r3, [sp, #4]
 80120fa:	ab02      	add	r3, sp, #8
 80120fc:	9300      	str	r3, [sp, #0]
 80120fe:	4632      	mov	r2, r6
 8012100:	4653      	mov	r3, sl
 8012102:	ec45 4b10 	vmov	d0, r4, r5
 8012106:	f002 fe37 	bl	8014d78 <_dtoa_r>
 801210a:	2f47      	cmp	r7, #71	; 0x47
 801210c:	4680      	mov	r8, r0
 801210e:	d102      	bne.n	8012116 <__cvt+0x62>
 8012110:	f019 0f01 	tst.w	r9, #1
 8012114:	d026      	beq.n	8012164 <__cvt+0xb0>
 8012116:	2f46      	cmp	r7, #70	; 0x46
 8012118:	eb08 0906 	add.w	r9, r8, r6
 801211c:	d111      	bne.n	8012142 <__cvt+0x8e>
 801211e:	f898 3000 	ldrb.w	r3, [r8]
 8012122:	2b30      	cmp	r3, #48	; 0x30
 8012124:	d10a      	bne.n	801213c <__cvt+0x88>
 8012126:	2200      	movs	r2, #0
 8012128:	2300      	movs	r3, #0
 801212a:	4620      	mov	r0, r4
 801212c:	4629      	mov	r1, r5
 801212e:	f7f6 fc03 	bl	8008938 <__aeabi_dcmpeq>
 8012132:	b918      	cbnz	r0, 801213c <__cvt+0x88>
 8012134:	f1c6 0601 	rsb	r6, r6, #1
 8012138:	f8ca 6000 	str.w	r6, [sl]
 801213c:	f8da 3000 	ldr.w	r3, [sl]
 8012140:	4499      	add	r9, r3
 8012142:	2200      	movs	r2, #0
 8012144:	2300      	movs	r3, #0
 8012146:	4620      	mov	r0, r4
 8012148:	4629      	mov	r1, r5
 801214a:	f7f6 fbf5 	bl	8008938 <__aeabi_dcmpeq>
 801214e:	b938      	cbnz	r0, 8012160 <__cvt+0xac>
 8012150:	2230      	movs	r2, #48	; 0x30
 8012152:	9b03      	ldr	r3, [sp, #12]
 8012154:	454b      	cmp	r3, r9
 8012156:	d205      	bcs.n	8012164 <__cvt+0xb0>
 8012158:	1c59      	adds	r1, r3, #1
 801215a:	9103      	str	r1, [sp, #12]
 801215c:	701a      	strb	r2, [r3, #0]
 801215e:	e7f8      	b.n	8012152 <__cvt+0x9e>
 8012160:	f8cd 900c 	str.w	r9, [sp, #12]
 8012164:	9b03      	ldr	r3, [sp, #12]
 8012166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012168:	eba3 0308 	sub.w	r3, r3, r8
 801216c:	4640      	mov	r0, r8
 801216e:	6013      	str	r3, [r2, #0]
 8012170:	b004      	add	sp, #16
 8012172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012176 <__exponent>:
 8012176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012178:	2900      	cmp	r1, #0
 801217a:	4604      	mov	r4, r0
 801217c:	bfba      	itte	lt
 801217e:	4249      	neglt	r1, r1
 8012180:	232d      	movlt	r3, #45	; 0x2d
 8012182:	232b      	movge	r3, #43	; 0x2b
 8012184:	2909      	cmp	r1, #9
 8012186:	f804 2b02 	strb.w	r2, [r4], #2
 801218a:	7043      	strb	r3, [r0, #1]
 801218c:	dd20      	ble.n	80121d0 <__exponent+0x5a>
 801218e:	f10d 0307 	add.w	r3, sp, #7
 8012192:	461f      	mov	r7, r3
 8012194:	260a      	movs	r6, #10
 8012196:	fb91 f5f6 	sdiv	r5, r1, r6
 801219a:	fb06 1115 	mls	r1, r6, r5, r1
 801219e:	3130      	adds	r1, #48	; 0x30
 80121a0:	2d09      	cmp	r5, #9
 80121a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80121a6:	f103 32ff 	add.w	r2, r3, #4294967295
 80121aa:	4629      	mov	r1, r5
 80121ac:	dc09      	bgt.n	80121c2 <__exponent+0x4c>
 80121ae:	3130      	adds	r1, #48	; 0x30
 80121b0:	3b02      	subs	r3, #2
 80121b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80121b6:	42bb      	cmp	r3, r7
 80121b8:	4622      	mov	r2, r4
 80121ba:	d304      	bcc.n	80121c6 <__exponent+0x50>
 80121bc:	1a10      	subs	r0, r2, r0
 80121be:	b003      	add	sp, #12
 80121c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121c2:	4613      	mov	r3, r2
 80121c4:	e7e7      	b.n	8012196 <__exponent+0x20>
 80121c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121ca:	f804 2b01 	strb.w	r2, [r4], #1
 80121ce:	e7f2      	b.n	80121b6 <__exponent+0x40>
 80121d0:	2330      	movs	r3, #48	; 0x30
 80121d2:	4419      	add	r1, r3
 80121d4:	7083      	strb	r3, [r0, #2]
 80121d6:	1d02      	adds	r2, r0, #4
 80121d8:	70c1      	strb	r1, [r0, #3]
 80121da:	e7ef      	b.n	80121bc <__exponent+0x46>

080121dc <_printf_float>:
 80121dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e0:	b08d      	sub	sp, #52	; 0x34
 80121e2:	460c      	mov	r4, r1
 80121e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80121e8:	4616      	mov	r6, r2
 80121ea:	461f      	mov	r7, r3
 80121ec:	4605      	mov	r5, r0
 80121ee:	f003 fed7 	bl	8015fa0 <_localeconv_r>
 80121f2:	6803      	ldr	r3, [r0, #0]
 80121f4:	9304      	str	r3, [sp, #16]
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7f5 ff22 	bl	8008040 <strlen>
 80121fc:	2300      	movs	r3, #0
 80121fe:	930a      	str	r3, [sp, #40]	; 0x28
 8012200:	f8d8 3000 	ldr.w	r3, [r8]
 8012204:	9005      	str	r0, [sp, #20]
 8012206:	3307      	adds	r3, #7
 8012208:	f023 0307 	bic.w	r3, r3, #7
 801220c:	f103 0208 	add.w	r2, r3, #8
 8012210:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012214:	f8d4 b000 	ldr.w	fp, [r4]
 8012218:	f8c8 2000 	str.w	r2, [r8]
 801221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012220:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012224:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012228:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801222c:	9307      	str	r3, [sp, #28]
 801222e:	f8cd 8018 	str.w	r8, [sp, #24]
 8012232:	f04f 32ff 	mov.w	r2, #4294967295
 8012236:	4ba7      	ldr	r3, [pc, #668]	; (80124d4 <_printf_float+0x2f8>)
 8012238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801223c:	f7f6 fbae 	bl	800899c <__aeabi_dcmpun>
 8012240:	bb70      	cbnz	r0, 80122a0 <_printf_float+0xc4>
 8012242:	f04f 32ff 	mov.w	r2, #4294967295
 8012246:	4ba3      	ldr	r3, [pc, #652]	; (80124d4 <_printf_float+0x2f8>)
 8012248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801224c:	f7f6 fb88 	bl	8008960 <__aeabi_dcmple>
 8012250:	bb30      	cbnz	r0, 80122a0 <_printf_float+0xc4>
 8012252:	2200      	movs	r2, #0
 8012254:	2300      	movs	r3, #0
 8012256:	4640      	mov	r0, r8
 8012258:	4649      	mov	r1, r9
 801225a:	f7f6 fb77 	bl	800894c <__aeabi_dcmplt>
 801225e:	b110      	cbz	r0, 8012266 <_printf_float+0x8a>
 8012260:	232d      	movs	r3, #45	; 0x2d
 8012262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012266:	4a9c      	ldr	r2, [pc, #624]	; (80124d8 <_printf_float+0x2fc>)
 8012268:	4b9c      	ldr	r3, [pc, #624]	; (80124dc <_printf_float+0x300>)
 801226a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801226e:	bf8c      	ite	hi
 8012270:	4690      	movhi	r8, r2
 8012272:	4698      	movls	r8, r3
 8012274:	2303      	movs	r3, #3
 8012276:	f02b 0204 	bic.w	r2, fp, #4
 801227a:	6123      	str	r3, [r4, #16]
 801227c:	6022      	str	r2, [r4, #0]
 801227e:	f04f 0900 	mov.w	r9, #0
 8012282:	9700      	str	r7, [sp, #0]
 8012284:	4633      	mov	r3, r6
 8012286:	aa0b      	add	r2, sp, #44	; 0x2c
 8012288:	4621      	mov	r1, r4
 801228a:	4628      	mov	r0, r5
 801228c:	f000 f9e6 	bl	801265c <_printf_common>
 8012290:	3001      	adds	r0, #1
 8012292:	f040 808d 	bne.w	80123b0 <_printf_float+0x1d4>
 8012296:	f04f 30ff 	mov.w	r0, #4294967295
 801229a:	b00d      	add	sp, #52	; 0x34
 801229c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122a0:	4642      	mov	r2, r8
 80122a2:	464b      	mov	r3, r9
 80122a4:	4640      	mov	r0, r8
 80122a6:	4649      	mov	r1, r9
 80122a8:	f7f6 fb78 	bl	800899c <__aeabi_dcmpun>
 80122ac:	b110      	cbz	r0, 80122b4 <_printf_float+0xd8>
 80122ae:	4a8c      	ldr	r2, [pc, #560]	; (80124e0 <_printf_float+0x304>)
 80122b0:	4b8c      	ldr	r3, [pc, #560]	; (80124e4 <_printf_float+0x308>)
 80122b2:	e7da      	b.n	801226a <_printf_float+0x8e>
 80122b4:	6861      	ldr	r1, [r4, #4]
 80122b6:	1c4b      	adds	r3, r1, #1
 80122b8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80122bc:	a80a      	add	r0, sp, #40	; 0x28
 80122be:	d13e      	bne.n	801233e <_printf_float+0x162>
 80122c0:	2306      	movs	r3, #6
 80122c2:	6063      	str	r3, [r4, #4]
 80122c4:	2300      	movs	r3, #0
 80122c6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80122ca:	ab09      	add	r3, sp, #36	; 0x24
 80122cc:	9300      	str	r3, [sp, #0]
 80122ce:	ec49 8b10 	vmov	d0, r8, r9
 80122d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80122d6:	6022      	str	r2, [r4, #0]
 80122d8:	f8cd a004 	str.w	sl, [sp, #4]
 80122dc:	6861      	ldr	r1, [r4, #4]
 80122de:	4628      	mov	r0, r5
 80122e0:	f7ff fee8 	bl	80120b4 <__cvt>
 80122e4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80122e8:	2b47      	cmp	r3, #71	; 0x47
 80122ea:	4680      	mov	r8, r0
 80122ec:	d109      	bne.n	8012302 <_printf_float+0x126>
 80122ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f0:	1cd8      	adds	r0, r3, #3
 80122f2:	db02      	blt.n	80122fa <_printf_float+0x11e>
 80122f4:	6862      	ldr	r2, [r4, #4]
 80122f6:	4293      	cmp	r3, r2
 80122f8:	dd47      	ble.n	801238a <_printf_float+0x1ae>
 80122fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80122fe:	fa5f fa8a 	uxtb.w	sl, sl
 8012302:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012306:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012308:	d824      	bhi.n	8012354 <_printf_float+0x178>
 801230a:	3901      	subs	r1, #1
 801230c:	4652      	mov	r2, sl
 801230e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012312:	9109      	str	r1, [sp, #36]	; 0x24
 8012314:	f7ff ff2f 	bl	8012176 <__exponent>
 8012318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801231a:	1813      	adds	r3, r2, r0
 801231c:	2a01      	cmp	r2, #1
 801231e:	4681      	mov	r9, r0
 8012320:	6123      	str	r3, [r4, #16]
 8012322:	dc02      	bgt.n	801232a <_printf_float+0x14e>
 8012324:	6822      	ldr	r2, [r4, #0]
 8012326:	07d1      	lsls	r1, r2, #31
 8012328:	d501      	bpl.n	801232e <_printf_float+0x152>
 801232a:	3301      	adds	r3, #1
 801232c:	6123      	str	r3, [r4, #16]
 801232e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012332:	2b00      	cmp	r3, #0
 8012334:	d0a5      	beq.n	8012282 <_printf_float+0xa6>
 8012336:	232d      	movs	r3, #45	; 0x2d
 8012338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801233c:	e7a1      	b.n	8012282 <_printf_float+0xa6>
 801233e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012342:	f000 8177 	beq.w	8012634 <_printf_float+0x458>
 8012346:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801234a:	d1bb      	bne.n	80122c4 <_printf_float+0xe8>
 801234c:	2900      	cmp	r1, #0
 801234e:	d1b9      	bne.n	80122c4 <_printf_float+0xe8>
 8012350:	2301      	movs	r3, #1
 8012352:	e7b6      	b.n	80122c2 <_printf_float+0xe6>
 8012354:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012358:	d119      	bne.n	801238e <_printf_float+0x1b2>
 801235a:	2900      	cmp	r1, #0
 801235c:	6863      	ldr	r3, [r4, #4]
 801235e:	dd0c      	ble.n	801237a <_printf_float+0x19e>
 8012360:	6121      	str	r1, [r4, #16]
 8012362:	b913      	cbnz	r3, 801236a <_printf_float+0x18e>
 8012364:	6822      	ldr	r2, [r4, #0]
 8012366:	07d2      	lsls	r2, r2, #31
 8012368:	d502      	bpl.n	8012370 <_printf_float+0x194>
 801236a:	3301      	adds	r3, #1
 801236c:	440b      	add	r3, r1
 801236e:	6123      	str	r3, [r4, #16]
 8012370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012372:	65a3      	str	r3, [r4, #88]	; 0x58
 8012374:	f04f 0900 	mov.w	r9, #0
 8012378:	e7d9      	b.n	801232e <_printf_float+0x152>
 801237a:	b913      	cbnz	r3, 8012382 <_printf_float+0x1a6>
 801237c:	6822      	ldr	r2, [r4, #0]
 801237e:	07d0      	lsls	r0, r2, #31
 8012380:	d501      	bpl.n	8012386 <_printf_float+0x1aa>
 8012382:	3302      	adds	r3, #2
 8012384:	e7f3      	b.n	801236e <_printf_float+0x192>
 8012386:	2301      	movs	r3, #1
 8012388:	e7f1      	b.n	801236e <_printf_float+0x192>
 801238a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801238e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012392:	4293      	cmp	r3, r2
 8012394:	db05      	blt.n	80123a2 <_printf_float+0x1c6>
 8012396:	6822      	ldr	r2, [r4, #0]
 8012398:	6123      	str	r3, [r4, #16]
 801239a:	07d1      	lsls	r1, r2, #31
 801239c:	d5e8      	bpl.n	8012370 <_printf_float+0x194>
 801239e:	3301      	adds	r3, #1
 80123a0:	e7e5      	b.n	801236e <_printf_float+0x192>
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	bfd4      	ite	le
 80123a6:	f1c3 0302 	rsble	r3, r3, #2
 80123aa:	2301      	movgt	r3, #1
 80123ac:	4413      	add	r3, r2
 80123ae:	e7de      	b.n	801236e <_printf_float+0x192>
 80123b0:	6823      	ldr	r3, [r4, #0]
 80123b2:	055a      	lsls	r2, r3, #21
 80123b4:	d407      	bmi.n	80123c6 <_printf_float+0x1ea>
 80123b6:	6923      	ldr	r3, [r4, #16]
 80123b8:	4642      	mov	r2, r8
 80123ba:	4631      	mov	r1, r6
 80123bc:	4628      	mov	r0, r5
 80123be:	47b8      	blx	r7
 80123c0:	3001      	adds	r0, #1
 80123c2:	d12b      	bne.n	801241c <_printf_float+0x240>
 80123c4:	e767      	b.n	8012296 <_printf_float+0xba>
 80123c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80123ca:	f240 80dc 	bls.w	8012586 <_printf_float+0x3aa>
 80123ce:	2200      	movs	r2, #0
 80123d0:	2300      	movs	r3, #0
 80123d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80123d6:	f7f6 faaf 	bl	8008938 <__aeabi_dcmpeq>
 80123da:	2800      	cmp	r0, #0
 80123dc:	d033      	beq.n	8012446 <_printf_float+0x26a>
 80123de:	2301      	movs	r3, #1
 80123e0:	4a41      	ldr	r2, [pc, #260]	; (80124e8 <_printf_float+0x30c>)
 80123e2:	4631      	mov	r1, r6
 80123e4:	4628      	mov	r0, r5
 80123e6:	47b8      	blx	r7
 80123e8:	3001      	adds	r0, #1
 80123ea:	f43f af54 	beq.w	8012296 <_printf_float+0xba>
 80123ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123f2:	429a      	cmp	r2, r3
 80123f4:	db02      	blt.n	80123fc <_printf_float+0x220>
 80123f6:	6823      	ldr	r3, [r4, #0]
 80123f8:	07d8      	lsls	r0, r3, #31
 80123fa:	d50f      	bpl.n	801241c <_printf_float+0x240>
 80123fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012400:	4631      	mov	r1, r6
 8012402:	4628      	mov	r0, r5
 8012404:	47b8      	blx	r7
 8012406:	3001      	adds	r0, #1
 8012408:	f43f af45 	beq.w	8012296 <_printf_float+0xba>
 801240c:	f04f 0800 	mov.w	r8, #0
 8012410:	f104 091a 	add.w	r9, r4, #26
 8012414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012416:	3b01      	subs	r3, #1
 8012418:	4543      	cmp	r3, r8
 801241a:	dc09      	bgt.n	8012430 <_printf_float+0x254>
 801241c:	6823      	ldr	r3, [r4, #0]
 801241e:	079b      	lsls	r3, r3, #30
 8012420:	f100 8103 	bmi.w	801262a <_printf_float+0x44e>
 8012424:	68e0      	ldr	r0, [r4, #12]
 8012426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012428:	4298      	cmp	r0, r3
 801242a:	bfb8      	it	lt
 801242c:	4618      	movlt	r0, r3
 801242e:	e734      	b.n	801229a <_printf_float+0xbe>
 8012430:	2301      	movs	r3, #1
 8012432:	464a      	mov	r2, r9
 8012434:	4631      	mov	r1, r6
 8012436:	4628      	mov	r0, r5
 8012438:	47b8      	blx	r7
 801243a:	3001      	adds	r0, #1
 801243c:	f43f af2b 	beq.w	8012296 <_printf_float+0xba>
 8012440:	f108 0801 	add.w	r8, r8, #1
 8012444:	e7e6      	b.n	8012414 <_printf_float+0x238>
 8012446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012448:	2b00      	cmp	r3, #0
 801244a:	dc2b      	bgt.n	80124a4 <_printf_float+0x2c8>
 801244c:	2301      	movs	r3, #1
 801244e:	4a26      	ldr	r2, [pc, #152]	; (80124e8 <_printf_float+0x30c>)
 8012450:	4631      	mov	r1, r6
 8012452:	4628      	mov	r0, r5
 8012454:	47b8      	blx	r7
 8012456:	3001      	adds	r0, #1
 8012458:	f43f af1d 	beq.w	8012296 <_printf_float+0xba>
 801245c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801245e:	b923      	cbnz	r3, 801246a <_printf_float+0x28e>
 8012460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012462:	b913      	cbnz	r3, 801246a <_printf_float+0x28e>
 8012464:	6823      	ldr	r3, [r4, #0]
 8012466:	07d9      	lsls	r1, r3, #31
 8012468:	d5d8      	bpl.n	801241c <_printf_float+0x240>
 801246a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801246e:	4631      	mov	r1, r6
 8012470:	4628      	mov	r0, r5
 8012472:	47b8      	blx	r7
 8012474:	3001      	adds	r0, #1
 8012476:	f43f af0e 	beq.w	8012296 <_printf_float+0xba>
 801247a:	f04f 0900 	mov.w	r9, #0
 801247e:	f104 0a1a 	add.w	sl, r4, #26
 8012482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012484:	425b      	negs	r3, r3
 8012486:	454b      	cmp	r3, r9
 8012488:	dc01      	bgt.n	801248e <_printf_float+0x2b2>
 801248a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801248c:	e794      	b.n	80123b8 <_printf_float+0x1dc>
 801248e:	2301      	movs	r3, #1
 8012490:	4652      	mov	r2, sl
 8012492:	4631      	mov	r1, r6
 8012494:	4628      	mov	r0, r5
 8012496:	47b8      	blx	r7
 8012498:	3001      	adds	r0, #1
 801249a:	f43f aefc 	beq.w	8012296 <_printf_float+0xba>
 801249e:	f109 0901 	add.w	r9, r9, #1
 80124a2:	e7ee      	b.n	8012482 <_printf_float+0x2a6>
 80124a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80124a8:	429a      	cmp	r2, r3
 80124aa:	bfa8      	it	ge
 80124ac:	461a      	movge	r2, r3
 80124ae:	2a00      	cmp	r2, #0
 80124b0:	4691      	mov	r9, r2
 80124b2:	dd07      	ble.n	80124c4 <_printf_float+0x2e8>
 80124b4:	4613      	mov	r3, r2
 80124b6:	4631      	mov	r1, r6
 80124b8:	4642      	mov	r2, r8
 80124ba:	4628      	mov	r0, r5
 80124bc:	47b8      	blx	r7
 80124be:	3001      	adds	r0, #1
 80124c0:	f43f aee9 	beq.w	8012296 <_printf_float+0xba>
 80124c4:	f104 031a 	add.w	r3, r4, #26
 80124c8:	f04f 0b00 	mov.w	fp, #0
 80124cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80124d0:	9306      	str	r3, [sp, #24]
 80124d2:	e015      	b.n	8012500 <_printf_float+0x324>
 80124d4:	7fefffff 	.word	0x7fefffff
 80124d8:	08017055 	.word	0x08017055
 80124dc:	08017051 	.word	0x08017051
 80124e0:	0801705d 	.word	0x0801705d
 80124e4:	08017059 	.word	0x08017059
 80124e8:	0801709e 	.word	0x0801709e
 80124ec:	2301      	movs	r3, #1
 80124ee:	9a06      	ldr	r2, [sp, #24]
 80124f0:	4631      	mov	r1, r6
 80124f2:	4628      	mov	r0, r5
 80124f4:	47b8      	blx	r7
 80124f6:	3001      	adds	r0, #1
 80124f8:	f43f aecd 	beq.w	8012296 <_printf_float+0xba>
 80124fc:	f10b 0b01 	add.w	fp, fp, #1
 8012500:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012504:	ebaa 0309 	sub.w	r3, sl, r9
 8012508:	455b      	cmp	r3, fp
 801250a:	dcef      	bgt.n	80124ec <_printf_float+0x310>
 801250c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012510:	429a      	cmp	r2, r3
 8012512:	44d0      	add	r8, sl
 8012514:	db15      	blt.n	8012542 <_printf_float+0x366>
 8012516:	6823      	ldr	r3, [r4, #0]
 8012518:	07da      	lsls	r2, r3, #31
 801251a:	d412      	bmi.n	8012542 <_printf_float+0x366>
 801251c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801251e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012520:	eba3 020a 	sub.w	r2, r3, sl
 8012524:	eba3 0a01 	sub.w	sl, r3, r1
 8012528:	4592      	cmp	sl, r2
 801252a:	bfa8      	it	ge
 801252c:	4692      	movge	sl, r2
 801252e:	f1ba 0f00 	cmp.w	sl, #0
 8012532:	dc0e      	bgt.n	8012552 <_printf_float+0x376>
 8012534:	f04f 0800 	mov.w	r8, #0
 8012538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801253c:	f104 091a 	add.w	r9, r4, #26
 8012540:	e019      	b.n	8012576 <_printf_float+0x39a>
 8012542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012546:	4631      	mov	r1, r6
 8012548:	4628      	mov	r0, r5
 801254a:	47b8      	blx	r7
 801254c:	3001      	adds	r0, #1
 801254e:	d1e5      	bne.n	801251c <_printf_float+0x340>
 8012550:	e6a1      	b.n	8012296 <_printf_float+0xba>
 8012552:	4653      	mov	r3, sl
 8012554:	4642      	mov	r2, r8
 8012556:	4631      	mov	r1, r6
 8012558:	4628      	mov	r0, r5
 801255a:	47b8      	blx	r7
 801255c:	3001      	adds	r0, #1
 801255e:	d1e9      	bne.n	8012534 <_printf_float+0x358>
 8012560:	e699      	b.n	8012296 <_printf_float+0xba>
 8012562:	2301      	movs	r3, #1
 8012564:	464a      	mov	r2, r9
 8012566:	4631      	mov	r1, r6
 8012568:	4628      	mov	r0, r5
 801256a:	47b8      	blx	r7
 801256c:	3001      	adds	r0, #1
 801256e:	f43f ae92 	beq.w	8012296 <_printf_float+0xba>
 8012572:	f108 0801 	add.w	r8, r8, #1
 8012576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801257a:	1a9b      	subs	r3, r3, r2
 801257c:	eba3 030a 	sub.w	r3, r3, sl
 8012580:	4543      	cmp	r3, r8
 8012582:	dcee      	bgt.n	8012562 <_printf_float+0x386>
 8012584:	e74a      	b.n	801241c <_printf_float+0x240>
 8012586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012588:	2a01      	cmp	r2, #1
 801258a:	dc01      	bgt.n	8012590 <_printf_float+0x3b4>
 801258c:	07db      	lsls	r3, r3, #31
 801258e:	d53a      	bpl.n	8012606 <_printf_float+0x42a>
 8012590:	2301      	movs	r3, #1
 8012592:	4642      	mov	r2, r8
 8012594:	4631      	mov	r1, r6
 8012596:	4628      	mov	r0, r5
 8012598:	47b8      	blx	r7
 801259a:	3001      	adds	r0, #1
 801259c:	f43f ae7b 	beq.w	8012296 <_printf_float+0xba>
 80125a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125a4:	4631      	mov	r1, r6
 80125a6:	4628      	mov	r0, r5
 80125a8:	47b8      	blx	r7
 80125aa:	3001      	adds	r0, #1
 80125ac:	f108 0801 	add.w	r8, r8, #1
 80125b0:	f43f ae71 	beq.w	8012296 <_printf_float+0xba>
 80125b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125b6:	2200      	movs	r2, #0
 80125b8:	f103 3aff 	add.w	sl, r3, #4294967295
 80125bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80125c0:	2300      	movs	r3, #0
 80125c2:	f7f6 f9b9 	bl	8008938 <__aeabi_dcmpeq>
 80125c6:	b9c8      	cbnz	r0, 80125fc <_printf_float+0x420>
 80125c8:	4653      	mov	r3, sl
 80125ca:	4642      	mov	r2, r8
 80125cc:	4631      	mov	r1, r6
 80125ce:	4628      	mov	r0, r5
 80125d0:	47b8      	blx	r7
 80125d2:	3001      	adds	r0, #1
 80125d4:	d10e      	bne.n	80125f4 <_printf_float+0x418>
 80125d6:	e65e      	b.n	8012296 <_printf_float+0xba>
 80125d8:	2301      	movs	r3, #1
 80125da:	4652      	mov	r2, sl
 80125dc:	4631      	mov	r1, r6
 80125de:	4628      	mov	r0, r5
 80125e0:	47b8      	blx	r7
 80125e2:	3001      	adds	r0, #1
 80125e4:	f43f ae57 	beq.w	8012296 <_printf_float+0xba>
 80125e8:	f108 0801 	add.w	r8, r8, #1
 80125ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125ee:	3b01      	subs	r3, #1
 80125f0:	4543      	cmp	r3, r8
 80125f2:	dcf1      	bgt.n	80125d8 <_printf_float+0x3fc>
 80125f4:	464b      	mov	r3, r9
 80125f6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80125fa:	e6de      	b.n	80123ba <_printf_float+0x1de>
 80125fc:	f04f 0800 	mov.w	r8, #0
 8012600:	f104 0a1a 	add.w	sl, r4, #26
 8012604:	e7f2      	b.n	80125ec <_printf_float+0x410>
 8012606:	2301      	movs	r3, #1
 8012608:	e7df      	b.n	80125ca <_printf_float+0x3ee>
 801260a:	2301      	movs	r3, #1
 801260c:	464a      	mov	r2, r9
 801260e:	4631      	mov	r1, r6
 8012610:	4628      	mov	r0, r5
 8012612:	47b8      	blx	r7
 8012614:	3001      	adds	r0, #1
 8012616:	f43f ae3e 	beq.w	8012296 <_printf_float+0xba>
 801261a:	f108 0801 	add.w	r8, r8, #1
 801261e:	68e3      	ldr	r3, [r4, #12]
 8012620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012622:	1a9b      	subs	r3, r3, r2
 8012624:	4543      	cmp	r3, r8
 8012626:	dcf0      	bgt.n	801260a <_printf_float+0x42e>
 8012628:	e6fc      	b.n	8012424 <_printf_float+0x248>
 801262a:	f04f 0800 	mov.w	r8, #0
 801262e:	f104 0919 	add.w	r9, r4, #25
 8012632:	e7f4      	b.n	801261e <_printf_float+0x442>
 8012634:	2900      	cmp	r1, #0
 8012636:	f43f ae8b 	beq.w	8012350 <_printf_float+0x174>
 801263a:	2300      	movs	r3, #0
 801263c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012640:	ab09      	add	r3, sp, #36	; 0x24
 8012642:	9300      	str	r3, [sp, #0]
 8012644:	ec49 8b10 	vmov	d0, r8, r9
 8012648:	6022      	str	r2, [r4, #0]
 801264a:	f8cd a004 	str.w	sl, [sp, #4]
 801264e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012652:	4628      	mov	r0, r5
 8012654:	f7ff fd2e 	bl	80120b4 <__cvt>
 8012658:	4680      	mov	r8, r0
 801265a:	e648      	b.n	80122ee <_printf_float+0x112>

0801265c <_printf_common>:
 801265c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012660:	4691      	mov	r9, r2
 8012662:	461f      	mov	r7, r3
 8012664:	688a      	ldr	r2, [r1, #8]
 8012666:	690b      	ldr	r3, [r1, #16]
 8012668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801266c:	4293      	cmp	r3, r2
 801266e:	bfb8      	it	lt
 8012670:	4613      	movlt	r3, r2
 8012672:	f8c9 3000 	str.w	r3, [r9]
 8012676:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801267a:	4606      	mov	r6, r0
 801267c:	460c      	mov	r4, r1
 801267e:	b112      	cbz	r2, 8012686 <_printf_common+0x2a>
 8012680:	3301      	adds	r3, #1
 8012682:	f8c9 3000 	str.w	r3, [r9]
 8012686:	6823      	ldr	r3, [r4, #0]
 8012688:	0699      	lsls	r1, r3, #26
 801268a:	bf42      	ittt	mi
 801268c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012690:	3302      	addmi	r3, #2
 8012692:	f8c9 3000 	strmi.w	r3, [r9]
 8012696:	6825      	ldr	r5, [r4, #0]
 8012698:	f015 0506 	ands.w	r5, r5, #6
 801269c:	d107      	bne.n	80126ae <_printf_common+0x52>
 801269e:	f104 0a19 	add.w	sl, r4, #25
 80126a2:	68e3      	ldr	r3, [r4, #12]
 80126a4:	f8d9 2000 	ldr.w	r2, [r9]
 80126a8:	1a9b      	subs	r3, r3, r2
 80126aa:	42ab      	cmp	r3, r5
 80126ac:	dc28      	bgt.n	8012700 <_printf_common+0xa4>
 80126ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80126b2:	6822      	ldr	r2, [r4, #0]
 80126b4:	3300      	adds	r3, #0
 80126b6:	bf18      	it	ne
 80126b8:	2301      	movne	r3, #1
 80126ba:	0692      	lsls	r2, r2, #26
 80126bc:	d42d      	bmi.n	801271a <_printf_common+0xbe>
 80126be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80126c2:	4639      	mov	r1, r7
 80126c4:	4630      	mov	r0, r6
 80126c6:	47c0      	blx	r8
 80126c8:	3001      	adds	r0, #1
 80126ca:	d020      	beq.n	801270e <_printf_common+0xb2>
 80126cc:	6823      	ldr	r3, [r4, #0]
 80126ce:	68e5      	ldr	r5, [r4, #12]
 80126d0:	f8d9 2000 	ldr.w	r2, [r9]
 80126d4:	f003 0306 	and.w	r3, r3, #6
 80126d8:	2b04      	cmp	r3, #4
 80126da:	bf08      	it	eq
 80126dc:	1aad      	subeq	r5, r5, r2
 80126de:	68a3      	ldr	r3, [r4, #8]
 80126e0:	6922      	ldr	r2, [r4, #16]
 80126e2:	bf0c      	ite	eq
 80126e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80126e8:	2500      	movne	r5, #0
 80126ea:	4293      	cmp	r3, r2
 80126ec:	bfc4      	itt	gt
 80126ee:	1a9b      	subgt	r3, r3, r2
 80126f0:	18ed      	addgt	r5, r5, r3
 80126f2:	f04f 0900 	mov.w	r9, #0
 80126f6:	341a      	adds	r4, #26
 80126f8:	454d      	cmp	r5, r9
 80126fa:	d11a      	bne.n	8012732 <_printf_common+0xd6>
 80126fc:	2000      	movs	r0, #0
 80126fe:	e008      	b.n	8012712 <_printf_common+0xb6>
 8012700:	2301      	movs	r3, #1
 8012702:	4652      	mov	r2, sl
 8012704:	4639      	mov	r1, r7
 8012706:	4630      	mov	r0, r6
 8012708:	47c0      	blx	r8
 801270a:	3001      	adds	r0, #1
 801270c:	d103      	bne.n	8012716 <_printf_common+0xba>
 801270e:	f04f 30ff 	mov.w	r0, #4294967295
 8012712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012716:	3501      	adds	r5, #1
 8012718:	e7c3      	b.n	80126a2 <_printf_common+0x46>
 801271a:	18e1      	adds	r1, r4, r3
 801271c:	1c5a      	adds	r2, r3, #1
 801271e:	2030      	movs	r0, #48	; 0x30
 8012720:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012724:	4422      	add	r2, r4
 8012726:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801272a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801272e:	3302      	adds	r3, #2
 8012730:	e7c5      	b.n	80126be <_printf_common+0x62>
 8012732:	2301      	movs	r3, #1
 8012734:	4622      	mov	r2, r4
 8012736:	4639      	mov	r1, r7
 8012738:	4630      	mov	r0, r6
 801273a:	47c0      	blx	r8
 801273c:	3001      	adds	r0, #1
 801273e:	d0e6      	beq.n	801270e <_printf_common+0xb2>
 8012740:	f109 0901 	add.w	r9, r9, #1
 8012744:	e7d8      	b.n	80126f8 <_printf_common+0x9c>
	...

08012748 <_printf_i>:
 8012748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801274c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012750:	460c      	mov	r4, r1
 8012752:	7e09      	ldrb	r1, [r1, #24]
 8012754:	b085      	sub	sp, #20
 8012756:	296e      	cmp	r1, #110	; 0x6e
 8012758:	4617      	mov	r7, r2
 801275a:	4606      	mov	r6, r0
 801275c:	4698      	mov	r8, r3
 801275e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012760:	f000 80b3 	beq.w	80128ca <_printf_i+0x182>
 8012764:	d822      	bhi.n	80127ac <_printf_i+0x64>
 8012766:	2963      	cmp	r1, #99	; 0x63
 8012768:	d036      	beq.n	80127d8 <_printf_i+0x90>
 801276a:	d80a      	bhi.n	8012782 <_printf_i+0x3a>
 801276c:	2900      	cmp	r1, #0
 801276e:	f000 80b9 	beq.w	80128e4 <_printf_i+0x19c>
 8012772:	2958      	cmp	r1, #88	; 0x58
 8012774:	f000 8083 	beq.w	801287e <_printf_i+0x136>
 8012778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801277c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012780:	e032      	b.n	80127e8 <_printf_i+0xa0>
 8012782:	2964      	cmp	r1, #100	; 0x64
 8012784:	d001      	beq.n	801278a <_printf_i+0x42>
 8012786:	2969      	cmp	r1, #105	; 0x69
 8012788:	d1f6      	bne.n	8012778 <_printf_i+0x30>
 801278a:	6820      	ldr	r0, [r4, #0]
 801278c:	6813      	ldr	r3, [r2, #0]
 801278e:	0605      	lsls	r5, r0, #24
 8012790:	f103 0104 	add.w	r1, r3, #4
 8012794:	d52a      	bpl.n	80127ec <_printf_i+0xa4>
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	6011      	str	r1, [r2, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	da03      	bge.n	80127a6 <_printf_i+0x5e>
 801279e:	222d      	movs	r2, #45	; 0x2d
 80127a0:	425b      	negs	r3, r3
 80127a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80127a6:	486f      	ldr	r0, [pc, #444]	; (8012964 <_printf_i+0x21c>)
 80127a8:	220a      	movs	r2, #10
 80127aa:	e039      	b.n	8012820 <_printf_i+0xd8>
 80127ac:	2973      	cmp	r1, #115	; 0x73
 80127ae:	f000 809d 	beq.w	80128ec <_printf_i+0x1a4>
 80127b2:	d808      	bhi.n	80127c6 <_printf_i+0x7e>
 80127b4:	296f      	cmp	r1, #111	; 0x6f
 80127b6:	d020      	beq.n	80127fa <_printf_i+0xb2>
 80127b8:	2970      	cmp	r1, #112	; 0x70
 80127ba:	d1dd      	bne.n	8012778 <_printf_i+0x30>
 80127bc:	6823      	ldr	r3, [r4, #0]
 80127be:	f043 0320 	orr.w	r3, r3, #32
 80127c2:	6023      	str	r3, [r4, #0]
 80127c4:	e003      	b.n	80127ce <_printf_i+0x86>
 80127c6:	2975      	cmp	r1, #117	; 0x75
 80127c8:	d017      	beq.n	80127fa <_printf_i+0xb2>
 80127ca:	2978      	cmp	r1, #120	; 0x78
 80127cc:	d1d4      	bne.n	8012778 <_printf_i+0x30>
 80127ce:	2378      	movs	r3, #120	; 0x78
 80127d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80127d4:	4864      	ldr	r0, [pc, #400]	; (8012968 <_printf_i+0x220>)
 80127d6:	e055      	b.n	8012884 <_printf_i+0x13c>
 80127d8:	6813      	ldr	r3, [r2, #0]
 80127da:	1d19      	adds	r1, r3, #4
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	6011      	str	r1, [r2, #0]
 80127e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80127e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80127e8:	2301      	movs	r3, #1
 80127ea:	e08c      	b.n	8012906 <_printf_i+0x1be>
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	6011      	str	r1, [r2, #0]
 80127f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80127f4:	bf18      	it	ne
 80127f6:	b21b      	sxthne	r3, r3
 80127f8:	e7cf      	b.n	801279a <_printf_i+0x52>
 80127fa:	6813      	ldr	r3, [r2, #0]
 80127fc:	6825      	ldr	r5, [r4, #0]
 80127fe:	1d18      	adds	r0, r3, #4
 8012800:	6010      	str	r0, [r2, #0]
 8012802:	0628      	lsls	r0, r5, #24
 8012804:	d501      	bpl.n	801280a <_printf_i+0xc2>
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	e002      	b.n	8012810 <_printf_i+0xc8>
 801280a:	0668      	lsls	r0, r5, #25
 801280c:	d5fb      	bpl.n	8012806 <_printf_i+0xbe>
 801280e:	881b      	ldrh	r3, [r3, #0]
 8012810:	4854      	ldr	r0, [pc, #336]	; (8012964 <_printf_i+0x21c>)
 8012812:	296f      	cmp	r1, #111	; 0x6f
 8012814:	bf14      	ite	ne
 8012816:	220a      	movne	r2, #10
 8012818:	2208      	moveq	r2, #8
 801281a:	2100      	movs	r1, #0
 801281c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012820:	6865      	ldr	r5, [r4, #4]
 8012822:	60a5      	str	r5, [r4, #8]
 8012824:	2d00      	cmp	r5, #0
 8012826:	f2c0 8095 	blt.w	8012954 <_printf_i+0x20c>
 801282a:	6821      	ldr	r1, [r4, #0]
 801282c:	f021 0104 	bic.w	r1, r1, #4
 8012830:	6021      	str	r1, [r4, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d13d      	bne.n	80128b2 <_printf_i+0x16a>
 8012836:	2d00      	cmp	r5, #0
 8012838:	f040 808e 	bne.w	8012958 <_printf_i+0x210>
 801283c:	4665      	mov	r5, ip
 801283e:	2a08      	cmp	r2, #8
 8012840:	d10b      	bne.n	801285a <_printf_i+0x112>
 8012842:	6823      	ldr	r3, [r4, #0]
 8012844:	07db      	lsls	r3, r3, #31
 8012846:	d508      	bpl.n	801285a <_printf_i+0x112>
 8012848:	6923      	ldr	r3, [r4, #16]
 801284a:	6862      	ldr	r2, [r4, #4]
 801284c:	429a      	cmp	r2, r3
 801284e:	bfde      	ittt	le
 8012850:	2330      	movle	r3, #48	; 0x30
 8012852:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012856:	f105 35ff 	addle.w	r5, r5, #4294967295
 801285a:	ebac 0305 	sub.w	r3, ip, r5
 801285e:	6123      	str	r3, [r4, #16]
 8012860:	f8cd 8000 	str.w	r8, [sp]
 8012864:	463b      	mov	r3, r7
 8012866:	aa03      	add	r2, sp, #12
 8012868:	4621      	mov	r1, r4
 801286a:	4630      	mov	r0, r6
 801286c:	f7ff fef6 	bl	801265c <_printf_common>
 8012870:	3001      	adds	r0, #1
 8012872:	d14d      	bne.n	8012910 <_printf_i+0x1c8>
 8012874:	f04f 30ff 	mov.w	r0, #4294967295
 8012878:	b005      	add	sp, #20
 801287a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801287e:	4839      	ldr	r0, [pc, #228]	; (8012964 <_printf_i+0x21c>)
 8012880:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012884:	6813      	ldr	r3, [r2, #0]
 8012886:	6821      	ldr	r1, [r4, #0]
 8012888:	1d1d      	adds	r5, r3, #4
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	6015      	str	r5, [r2, #0]
 801288e:	060a      	lsls	r2, r1, #24
 8012890:	d50b      	bpl.n	80128aa <_printf_i+0x162>
 8012892:	07ca      	lsls	r2, r1, #31
 8012894:	bf44      	itt	mi
 8012896:	f041 0120 	orrmi.w	r1, r1, #32
 801289a:	6021      	strmi	r1, [r4, #0]
 801289c:	b91b      	cbnz	r3, 80128a6 <_printf_i+0x15e>
 801289e:	6822      	ldr	r2, [r4, #0]
 80128a0:	f022 0220 	bic.w	r2, r2, #32
 80128a4:	6022      	str	r2, [r4, #0]
 80128a6:	2210      	movs	r2, #16
 80128a8:	e7b7      	b.n	801281a <_printf_i+0xd2>
 80128aa:	064d      	lsls	r5, r1, #25
 80128ac:	bf48      	it	mi
 80128ae:	b29b      	uxthmi	r3, r3
 80128b0:	e7ef      	b.n	8012892 <_printf_i+0x14a>
 80128b2:	4665      	mov	r5, ip
 80128b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80128b8:	fb02 3311 	mls	r3, r2, r1, r3
 80128bc:	5cc3      	ldrb	r3, [r0, r3]
 80128be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80128c2:	460b      	mov	r3, r1
 80128c4:	2900      	cmp	r1, #0
 80128c6:	d1f5      	bne.n	80128b4 <_printf_i+0x16c>
 80128c8:	e7b9      	b.n	801283e <_printf_i+0xf6>
 80128ca:	6813      	ldr	r3, [r2, #0]
 80128cc:	6825      	ldr	r5, [r4, #0]
 80128ce:	6961      	ldr	r1, [r4, #20]
 80128d0:	1d18      	adds	r0, r3, #4
 80128d2:	6010      	str	r0, [r2, #0]
 80128d4:	0628      	lsls	r0, r5, #24
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	d501      	bpl.n	80128de <_printf_i+0x196>
 80128da:	6019      	str	r1, [r3, #0]
 80128dc:	e002      	b.n	80128e4 <_printf_i+0x19c>
 80128de:	066a      	lsls	r2, r5, #25
 80128e0:	d5fb      	bpl.n	80128da <_printf_i+0x192>
 80128e2:	8019      	strh	r1, [r3, #0]
 80128e4:	2300      	movs	r3, #0
 80128e6:	6123      	str	r3, [r4, #16]
 80128e8:	4665      	mov	r5, ip
 80128ea:	e7b9      	b.n	8012860 <_printf_i+0x118>
 80128ec:	6813      	ldr	r3, [r2, #0]
 80128ee:	1d19      	adds	r1, r3, #4
 80128f0:	6011      	str	r1, [r2, #0]
 80128f2:	681d      	ldr	r5, [r3, #0]
 80128f4:	6862      	ldr	r2, [r4, #4]
 80128f6:	2100      	movs	r1, #0
 80128f8:	4628      	mov	r0, r5
 80128fa:	f7f5 fba9 	bl	8008050 <memchr>
 80128fe:	b108      	cbz	r0, 8012904 <_printf_i+0x1bc>
 8012900:	1b40      	subs	r0, r0, r5
 8012902:	6060      	str	r0, [r4, #4]
 8012904:	6863      	ldr	r3, [r4, #4]
 8012906:	6123      	str	r3, [r4, #16]
 8012908:	2300      	movs	r3, #0
 801290a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801290e:	e7a7      	b.n	8012860 <_printf_i+0x118>
 8012910:	6923      	ldr	r3, [r4, #16]
 8012912:	462a      	mov	r2, r5
 8012914:	4639      	mov	r1, r7
 8012916:	4630      	mov	r0, r6
 8012918:	47c0      	blx	r8
 801291a:	3001      	adds	r0, #1
 801291c:	d0aa      	beq.n	8012874 <_printf_i+0x12c>
 801291e:	6823      	ldr	r3, [r4, #0]
 8012920:	079b      	lsls	r3, r3, #30
 8012922:	d413      	bmi.n	801294c <_printf_i+0x204>
 8012924:	68e0      	ldr	r0, [r4, #12]
 8012926:	9b03      	ldr	r3, [sp, #12]
 8012928:	4298      	cmp	r0, r3
 801292a:	bfb8      	it	lt
 801292c:	4618      	movlt	r0, r3
 801292e:	e7a3      	b.n	8012878 <_printf_i+0x130>
 8012930:	2301      	movs	r3, #1
 8012932:	464a      	mov	r2, r9
 8012934:	4639      	mov	r1, r7
 8012936:	4630      	mov	r0, r6
 8012938:	47c0      	blx	r8
 801293a:	3001      	adds	r0, #1
 801293c:	d09a      	beq.n	8012874 <_printf_i+0x12c>
 801293e:	3501      	adds	r5, #1
 8012940:	68e3      	ldr	r3, [r4, #12]
 8012942:	9a03      	ldr	r2, [sp, #12]
 8012944:	1a9b      	subs	r3, r3, r2
 8012946:	42ab      	cmp	r3, r5
 8012948:	dcf2      	bgt.n	8012930 <_printf_i+0x1e8>
 801294a:	e7eb      	b.n	8012924 <_printf_i+0x1dc>
 801294c:	2500      	movs	r5, #0
 801294e:	f104 0919 	add.w	r9, r4, #25
 8012952:	e7f5      	b.n	8012940 <_printf_i+0x1f8>
 8012954:	2b00      	cmp	r3, #0
 8012956:	d1ac      	bne.n	80128b2 <_printf_i+0x16a>
 8012958:	7803      	ldrb	r3, [r0, #0]
 801295a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801295e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012962:	e76c      	b.n	801283e <_printf_i+0xf6>
 8012964:	08017061 	.word	0x08017061
 8012968:	08017072 	.word	0x08017072

0801296c <__svfiscanf_r>:
 801296c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012970:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8012974:	460c      	mov	r4, r1
 8012976:	2100      	movs	r1, #0
 8012978:	9144      	str	r1, [sp, #272]	; 0x110
 801297a:	9145      	str	r1, [sp, #276]	; 0x114
 801297c:	499f      	ldr	r1, [pc, #636]	; (8012bfc <__svfiscanf_r+0x290>)
 801297e:	91a0      	str	r1, [sp, #640]	; 0x280
 8012980:	f10d 0804 	add.w	r8, sp, #4
 8012984:	499e      	ldr	r1, [pc, #632]	; (8012c00 <__svfiscanf_r+0x294>)
 8012986:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8012c04 <__svfiscanf_r+0x298>
 801298a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801298e:	4606      	mov	r6, r0
 8012990:	4692      	mov	sl, r2
 8012992:	91a1      	str	r1, [sp, #644]	; 0x284
 8012994:	9300      	str	r3, [sp, #0]
 8012996:	270a      	movs	r7, #10
 8012998:	f89a 3000 	ldrb.w	r3, [sl]
 801299c:	2b00      	cmp	r3, #0
 801299e:	f000 812a 	beq.w	8012bf6 <__svfiscanf_r+0x28a>
 80129a2:	4655      	mov	r5, sl
 80129a4:	f003 faec 	bl	8015f80 <__locale_ctype_ptr>
 80129a8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80129ac:	4458      	add	r0, fp
 80129ae:	7843      	ldrb	r3, [r0, #1]
 80129b0:	f013 0308 	ands.w	r3, r3, #8
 80129b4:	d01c      	beq.n	80129f0 <__svfiscanf_r+0x84>
 80129b6:	6863      	ldr	r3, [r4, #4]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	dd12      	ble.n	80129e2 <__svfiscanf_r+0x76>
 80129bc:	f003 fae0 	bl	8015f80 <__locale_ctype_ptr>
 80129c0:	6823      	ldr	r3, [r4, #0]
 80129c2:	781a      	ldrb	r2, [r3, #0]
 80129c4:	4410      	add	r0, r2
 80129c6:	7842      	ldrb	r2, [r0, #1]
 80129c8:	0712      	lsls	r2, r2, #28
 80129ca:	d401      	bmi.n	80129d0 <__svfiscanf_r+0x64>
 80129cc:	46aa      	mov	sl, r5
 80129ce:	e7e3      	b.n	8012998 <__svfiscanf_r+0x2c>
 80129d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80129d2:	3201      	adds	r2, #1
 80129d4:	9245      	str	r2, [sp, #276]	; 0x114
 80129d6:	6862      	ldr	r2, [r4, #4]
 80129d8:	3301      	adds	r3, #1
 80129da:	3a01      	subs	r2, #1
 80129dc:	6062      	str	r2, [r4, #4]
 80129de:	6023      	str	r3, [r4, #0]
 80129e0:	e7e9      	b.n	80129b6 <__svfiscanf_r+0x4a>
 80129e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80129e4:	4621      	mov	r1, r4
 80129e6:	4630      	mov	r0, r6
 80129e8:	4798      	blx	r3
 80129ea:	2800      	cmp	r0, #0
 80129ec:	d0e6      	beq.n	80129bc <__svfiscanf_r+0x50>
 80129ee:	e7ed      	b.n	80129cc <__svfiscanf_r+0x60>
 80129f0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80129f4:	f040 8082 	bne.w	8012afc <__svfiscanf_r+0x190>
 80129f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80129fa:	9341      	str	r3, [sp, #260]	; 0x104
 80129fc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8012a00:	2b2a      	cmp	r3, #42	; 0x2a
 8012a02:	d103      	bne.n	8012a0c <__svfiscanf_r+0xa0>
 8012a04:	2310      	movs	r3, #16
 8012a06:	9341      	str	r3, [sp, #260]	; 0x104
 8012a08:	f10a 0502 	add.w	r5, sl, #2
 8012a0c:	46aa      	mov	sl, r5
 8012a0e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8012a12:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8012a16:	2a09      	cmp	r2, #9
 8012a18:	d922      	bls.n	8012a60 <__svfiscanf_r+0xf4>
 8012a1a:	2203      	movs	r2, #3
 8012a1c:	4879      	ldr	r0, [pc, #484]	; (8012c04 <__svfiscanf_r+0x298>)
 8012a1e:	f7f5 fb17 	bl	8008050 <memchr>
 8012a22:	b138      	cbz	r0, 8012a34 <__svfiscanf_r+0xc8>
 8012a24:	eba0 0309 	sub.w	r3, r0, r9
 8012a28:	2001      	movs	r0, #1
 8012a2a:	4098      	lsls	r0, r3
 8012a2c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012a2e:	4318      	orrs	r0, r3
 8012a30:	9041      	str	r0, [sp, #260]	; 0x104
 8012a32:	46aa      	mov	sl, r5
 8012a34:	f89a 3000 	ldrb.w	r3, [sl]
 8012a38:	2b67      	cmp	r3, #103	; 0x67
 8012a3a:	f10a 0501 	add.w	r5, sl, #1
 8012a3e:	d82b      	bhi.n	8012a98 <__svfiscanf_r+0x12c>
 8012a40:	2b65      	cmp	r3, #101	; 0x65
 8012a42:	f080 809f 	bcs.w	8012b84 <__svfiscanf_r+0x218>
 8012a46:	2b47      	cmp	r3, #71	; 0x47
 8012a48:	d810      	bhi.n	8012a6c <__svfiscanf_r+0x100>
 8012a4a:	2b45      	cmp	r3, #69	; 0x45
 8012a4c:	f080 809a 	bcs.w	8012b84 <__svfiscanf_r+0x218>
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d06c      	beq.n	8012b2e <__svfiscanf_r+0x1c2>
 8012a54:	2b25      	cmp	r3, #37	; 0x25
 8012a56:	d051      	beq.n	8012afc <__svfiscanf_r+0x190>
 8012a58:	2303      	movs	r3, #3
 8012a5a:	9347      	str	r3, [sp, #284]	; 0x11c
 8012a5c:	9742      	str	r7, [sp, #264]	; 0x108
 8012a5e:	e027      	b.n	8012ab0 <__svfiscanf_r+0x144>
 8012a60:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012a62:	fb07 1303 	mla	r3, r7, r3, r1
 8012a66:	3b30      	subs	r3, #48	; 0x30
 8012a68:	9343      	str	r3, [sp, #268]	; 0x10c
 8012a6a:	e7cf      	b.n	8012a0c <__svfiscanf_r+0xa0>
 8012a6c:	2b5b      	cmp	r3, #91	; 0x5b
 8012a6e:	d06a      	beq.n	8012b46 <__svfiscanf_r+0x1da>
 8012a70:	d80c      	bhi.n	8012a8c <__svfiscanf_r+0x120>
 8012a72:	2b58      	cmp	r3, #88	; 0x58
 8012a74:	d1f0      	bne.n	8012a58 <__svfiscanf_r+0xec>
 8012a76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012a7c:	9241      	str	r2, [sp, #260]	; 0x104
 8012a7e:	2210      	movs	r2, #16
 8012a80:	9242      	str	r2, [sp, #264]	; 0x108
 8012a82:	2b6e      	cmp	r3, #110	; 0x6e
 8012a84:	bf8c      	ite	hi
 8012a86:	2304      	movhi	r3, #4
 8012a88:	2303      	movls	r3, #3
 8012a8a:	e010      	b.n	8012aae <__svfiscanf_r+0x142>
 8012a8c:	2b63      	cmp	r3, #99	; 0x63
 8012a8e:	d065      	beq.n	8012b5c <__svfiscanf_r+0x1f0>
 8012a90:	2b64      	cmp	r3, #100	; 0x64
 8012a92:	d1e1      	bne.n	8012a58 <__svfiscanf_r+0xec>
 8012a94:	9742      	str	r7, [sp, #264]	; 0x108
 8012a96:	e7f4      	b.n	8012a82 <__svfiscanf_r+0x116>
 8012a98:	2b70      	cmp	r3, #112	; 0x70
 8012a9a:	d04b      	beq.n	8012b34 <__svfiscanf_r+0x1c8>
 8012a9c:	d826      	bhi.n	8012aec <__svfiscanf_r+0x180>
 8012a9e:	2b6e      	cmp	r3, #110	; 0x6e
 8012aa0:	d062      	beq.n	8012b68 <__svfiscanf_r+0x1fc>
 8012aa2:	d84c      	bhi.n	8012b3e <__svfiscanf_r+0x1d2>
 8012aa4:	2b69      	cmp	r3, #105	; 0x69
 8012aa6:	d1d7      	bne.n	8012a58 <__svfiscanf_r+0xec>
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	9342      	str	r3, [sp, #264]	; 0x108
 8012aac:	2303      	movs	r3, #3
 8012aae:	9347      	str	r3, [sp, #284]	; 0x11c
 8012ab0:	6863      	ldr	r3, [r4, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	dd68      	ble.n	8012b88 <__svfiscanf_r+0x21c>
 8012ab6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012ab8:	0659      	lsls	r1, r3, #25
 8012aba:	d407      	bmi.n	8012acc <__svfiscanf_r+0x160>
 8012abc:	f003 fa60 	bl	8015f80 <__locale_ctype_ptr>
 8012ac0:	6823      	ldr	r3, [r4, #0]
 8012ac2:	781a      	ldrb	r2, [r3, #0]
 8012ac4:	4410      	add	r0, r2
 8012ac6:	7842      	ldrb	r2, [r0, #1]
 8012ac8:	0712      	lsls	r2, r2, #28
 8012aca:	d464      	bmi.n	8012b96 <__svfiscanf_r+0x22a>
 8012acc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012ace:	2b02      	cmp	r3, #2
 8012ad0:	dc73      	bgt.n	8012bba <__svfiscanf_r+0x24e>
 8012ad2:	466b      	mov	r3, sp
 8012ad4:	4622      	mov	r2, r4
 8012ad6:	a941      	add	r1, sp, #260	; 0x104
 8012ad8:	4630      	mov	r0, r6
 8012ada:	f000 faa1 	bl	8013020 <_scanf_chars>
 8012ade:	2801      	cmp	r0, #1
 8012ae0:	f000 8089 	beq.w	8012bf6 <__svfiscanf_r+0x28a>
 8012ae4:	2802      	cmp	r0, #2
 8012ae6:	f47f af71 	bne.w	80129cc <__svfiscanf_r+0x60>
 8012aea:	e01d      	b.n	8012b28 <__svfiscanf_r+0x1bc>
 8012aec:	2b75      	cmp	r3, #117	; 0x75
 8012aee:	d0d1      	beq.n	8012a94 <__svfiscanf_r+0x128>
 8012af0:	2b78      	cmp	r3, #120	; 0x78
 8012af2:	d0c0      	beq.n	8012a76 <__svfiscanf_r+0x10a>
 8012af4:	2b73      	cmp	r3, #115	; 0x73
 8012af6:	d1af      	bne.n	8012a58 <__svfiscanf_r+0xec>
 8012af8:	2302      	movs	r3, #2
 8012afa:	e7d8      	b.n	8012aae <__svfiscanf_r+0x142>
 8012afc:	6863      	ldr	r3, [r4, #4]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	dd0c      	ble.n	8012b1c <__svfiscanf_r+0x1b0>
 8012b02:	6823      	ldr	r3, [r4, #0]
 8012b04:	781a      	ldrb	r2, [r3, #0]
 8012b06:	455a      	cmp	r2, fp
 8012b08:	d175      	bne.n	8012bf6 <__svfiscanf_r+0x28a>
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	6862      	ldr	r2, [r4, #4]
 8012b0e:	6023      	str	r3, [r4, #0]
 8012b10:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012b12:	3a01      	subs	r2, #1
 8012b14:	3301      	adds	r3, #1
 8012b16:	6062      	str	r2, [r4, #4]
 8012b18:	9345      	str	r3, [sp, #276]	; 0x114
 8012b1a:	e757      	b.n	80129cc <__svfiscanf_r+0x60>
 8012b1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012b1e:	4621      	mov	r1, r4
 8012b20:	4630      	mov	r0, r6
 8012b22:	4798      	blx	r3
 8012b24:	2800      	cmp	r0, #0
 8012b26:	d0ec      	beq.n	8012b02 <__svfiscanf_r+0x196>
 8012b28:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	d159      	bne.n	8012be2 <__svfiscanf_r+0x276>
 8012b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b32:	e05c      	b.n	8012bee <__svfiscanf_r+0x282>
 8012b34:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012b36:	f042 0220 	orr.w	r2, r2, #32
 8012b3a:	9241      	str	r2, [sp, #260]	; 0x104
 8012b3c:	e79b      	b.n	8012a76 <__svfiscanf_r+0x10a>
 8012b3e:	2308      	movs	r3, #8
 8012b40:	9342      	str	r3, [sp, #264]	; 0x108
 8012b42:	2304      	movs	r3, #4
 8012b44:	e7b3      	b.n	8012aae <__svfiscanf_r+0x142>
 8012b46:	4629      	mov	r1, r5
 8012b48:	4640      	mov	r0, r8
 8012b4a:	f000 fe6d 	bl	8013828 <__sccl>
 8012b4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b54:	9341      	str	r3, [sp, #260]	; 0x104
 8012b56:	4605      	mov	r5, r0
 8012b58:	2301      	movs	r3, #1
 8012b5a:	e7a8      	b.n	8012aae <__svfiscanf_r+0x142>
 8012b5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b62:	9341      	str	r3, [sp, #260]	; 0x104
 8012b64:	2300      	movs	r3, #0
 8012b66:	e7a2      	b.n	8012aae <__svfiscanf_r+0x142>
 8012b68:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012b6a:	06c3      	lsls	r3, r0, #27
 8012b6c:	f53f af2e 	bmi.w	80129cc <__svfiscanf_r+0x60>
 8012b70:	9b00      	ldr	r3, [sp, #0]
 8012b72:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012b74:	1d19      	adds	r1, r3, #4
 8012b76:	9100      	str	r1, [sp, #0]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	07c0      	lsls	r0, r0, #31
 8012b7c:	bf4c      	ite	mi
 8012b7e:	801a      	strhmi	r2, [r3, #0]
 8012b80:	601a      	strpl	r2, [r3, #0]
 8012b82:	e723      	b.n	80129cc <__svfiscanf_r+0x60>
 8012b84:	2305      	movs	r3, #5
 8012b86:	e792      	b.n	8012aae <__svfiscanf_r+0x142>
 8012b88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012b8a:	4621      	mov	r1, r4
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	4798      	blx	r3
 8012b90:	2800      	cmp	r0, #0
 8012b92:	d090      	beq.n	8012ab6 <__svfiscanf_r+0x14a>
 8012b94:	e7c8      	b.n	8012b28 <__svfiscanf_r+0x1bc>
 8012b96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012b98:	3201      	adds	r2, #1
 8012b9a:	9245      	str	r2, [sp, #276]	; 0x114
 8012b9c:	6862      	ldr	r2, [r4, #4]
 8012b9e:	3a01      	subs	r2, #1
 8012ba0:	2a00      	cmp	r2, #0
 8012ba2:	6062      	str	r2, [r4, #4]
 8012ba4:	dd02      	ble.n	8012bac <__svfiscanf_r+0x240>
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	6023      	str	r3, [r4, #0]
 8012baa:	e787      	b.n	8012abc <__svfiscanf_r+0x150>
 8012bac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012bae:	4621      	mov	r1, r4
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	4798      	blx	r3
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	d081      	beq.n	8012abc <__svfiscanf_r+0x150>
 8012bb8:	e7b6      	b.n	8012b28 <__svfiscanf_r+0x1bc>
 8012bba:	2b04      	cmp	r3, #4
 8012bbc:	dc06      	bgt.n	8012bcc <__svfiscanf_r+0x260>
 8012bbe:	466b      	mov	r3, sp
 8012bc0:	4622      	mov	r2, r4
 8012bc2:	a941      	add	r1, sp, #260	; 0x104
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	f000 fa8f 	bl	80130e8 <_scanf_i>
 8012bca:	e788      	b.n	8012ade <__svfiscanf_r+0x172>
 8012bcc:	4b0e      	ldr	r3, [pc, #56]	; (8012c08 <__svfiscanf_r+0x29c>)
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	f43f aefc 	beq.w	80129cc <__svfiscanf_r+0x60>
 8012bd4:	466b      	mov	r3, sp
 8012bd6:	4622      	mov	r2, r4
 8012bd8:	a941      	add	r1, sp, #260	; 0x104
 8012bda:	4630      	mov	r0, r6
 8012bdc:	f000 f83e 	bl	8012c5c <_scanf_float>
 8012be0:	e77d      	b.n	8012ade <__svfiscanf_r+0x172>
 8012be2:	89a3      	ldrh	r3, [r4, #12]
 8012be4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012be8:	bf18      	it	ne
 8012bea:	f04f 30ff 	movne.w	r0, #4294967295
 8012bee:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bf6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012bf8:	e7f9      	b.n	8012bee <__svfiscanf_r+0x282>
 8012bfa:	bf00      	nop
 8012bfc:	080149b9 	.word	0x080149b9
 8012c00:	080136c1 	.word	0x080136c1
 8012c04:	08017046 	.word	0x08017046
 8012c08:	08012c5d 	.word	0x08012c5d

08012c0c <_vfiscanf_r>:
 8012c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c10:	460c      	mov	r4, r1
 8012c12:	4616      	mov	r6, r2
 8012c14:	461f      	mov	r7, r3
 8012c16:	4605      	mov	r5, r0
 8012c18:	b118      	cbz	r0, 8012c22 <_vfiscanf_r+0x16>
 8012c1a:	6983      	ldr	r3, [r0, #24]
 8012c1c:	b90b      	cbnz	r3, 8012c22 <_vfiscanf_r+0x16>
 8012c1e:	f7fe ff1f 	bl	8011a60 <__sinit>
 8012c22:	4b0b      	ldr	r3, [pc, #44]	; (8012c50 <_vfiscanf_r+0x44>)
 8012c24:	429c      	cmp	r4, r3
 8012c26:	d108      	bne.n	8012c3a <_vfiscanf_r+0x2e>
 8012c28:	686c      	ldr	r4, [r5, #4]
 8012c2a:	463b      	mov	r3, r7
 8012c2c:	4632      	mov	r2, r6
 8012c2e:	4621      	mov	r1, r4
 8012c30:	4628      	mov	r0, r5
 8012c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c36:	f7ff be99 	b.w	801296c <__svfiscanf_r>
 8012c3a:	4b06      	ldr	r3, [pc, #24]	; (8012c54 <_vfiscanf_r+0x48>)
 8012c3c:	429c      	cmp	r4, r3
 8012c3e:	d101      	bne.n	8012c44 <_vfiscanf_r+0x38>
 8012c40:	68ac      	ldr	r4, [r5, #8]
 8012c42:	e7f2      	b.n	8012c2a <_vfiscanf_r+0x1e>
 8012c44:	4b04      	ldr	r3, [pc, #16]	; (8012c58 <_vfiscanf_r+0x4c>)
 8012c46:	429c      	cmp	r4, r3
 8012c48:	bf08      	it	eq
 8012c4a:	68ec      	ldreq	r4, [r5, #12]
 8012c4c:	e7ed      	b.n	8012c2a <_vfiscanf_r+0x1e>
 8012c4e:	bf00      	nop
 8012c50:	08016ffc 	.word	0x08016ffc
 8012c54:	0801701c 	.word	0x0801701c
 8012c58:	08016fdc 	.word	0x08016fdc

08012c5c <_scanf_float>:
 8012c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c60:	469a      	mov	sl, r3
 8012c62:	688b      	ldr	r3, [r1, #8]
 8012c64:	4616      	mov	r6, r2
 8012c66:	1e5a      	subs	r2, r3, #1
 8012c68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012c6c:	b087      	sub	sp, #28
 8012c6e:	bf83      	ittte	hi
 8012c70:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012c74:	189b      	addhi	r3, r3, r2
 8012c76:	9301      	strhi	r3, [sp, #4]
 8012c78:	2300      	movls	r3, #0
 8012c7a:	bf86      	itte	hi
 8012c7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012c80:	608b      	strhi	r3, [r1, #8]
 8012c82:	9301      	strls	r3, [sp, #4]
 8012c84:	680b      	ldr	r3, [r1, #0]
 8012c86:	4688      	mov	r8, r1
 8012c88:	f04f 0b00 	mov.w	fp, #0
 8012c8c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012c90:	f848 3b1c 	str.w	r3, [r8], #28
 8012c94:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012c98:	4607      	mov	r7, r0
 8012c9a:	460c      	mov	r4, r1
 8012c9c:	4645      	mov	r5, r8
 8012c9e:	465a      	mov	r2, fp
 8012ca0:	46d9      	mov	r9, fp
 8012ca2:	f8cd b008 	str.w	fp, [sp, #8]
 8012ca6:	68a1      	ldr	r1, [r4, #8]
 8012ca8:	b181      	cbz	r1, 8012ccc <_scanf_float+0x70>
 8012caa:	6833      	ldr	r3, [r6, #0]
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	2b49      	cmp	r3, #73	; 0x49
 8012cb0:	d071      	beq.n	8012d96 <_scanf_float+0x13a>
 8012cb2:	d84d      	bhi.n	8012d50 <_scanf_float+0xf4>
 8012cb4:	2b39      	cmp	r3, #57	; 0x39
 8012cb6:	d840      	bhi.n	8012d3a <_scanf_float+0xde>
 8012cb8:	2b31      	cmp	r3, #49	; 0x31
 8012cba:	f080 8088 	bcs.w	8012dce <_scanf_float+0x172>
 8012cbe:	2b2d      	cmp	r3, #45	; 0x2d
 8012cc0:	f000 8090 	beq.w	8012de4 <_scanf_float+0x188>
 8012cc4:	d815      	bhi.n	8012cf2 <_scanf_float+0x96>
 8012cc6:	2b2b      	cmp	r3, #43	; 0x2b
 8012cc8:	f000 808c 	beq.w	8012de4 <_scanf_float+0x188>
 8012ccc:	f1b9 0f00 	cmp.w	r9, #0
 8012cd0:	d003      	beq.n	8012cda <_scanf_float+0x7e>
 8012cd2:	6823      	ldr	r3, [r4, #0]
 8012cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012cd8:	6023      	str	r3, [r4, #0]
 8012cda:	3a01      	subs	r2, #1
 8012cdc:	2a01      	cmp	r2, #1
 8012cde:	f200 80ea 	bhi.w	8012eb6 <_scanf_float+0x25a>
 8012ce2:	4545      	cmp	r5, r8
 8012ce4:	f200 80dc 	bhi.w	8012ea0 <_scanf_float+0x244>
 8012ce8:	2601      	movs	r6, #1
 8012cea:	4630      	mov	r0, r6
 8012cec:	b007      	add	sp, #28
 8012cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8012cf4:	f000 809f 	beq.w	8012e36 <_scanf_float+0x1da>
 8012cf8:	2b30      	cmp	r3, #48	; 0x30
 8012cfa:	d1e7      	bne.n	8012ccc <_scanf_float+0x70>
 8012cfc:	6820      	ldr	r0, [r4, #0]
 8012cfe:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012d02:	d064      	beq.n	8012dce <_scanf_float+0x172>
 8012d04:	9b01      	ldr	r3, [sp, #4]
 8012d06:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012d0a:	6020      	str	r0, [r4, #0]
 8012d0c:	f109 0901 	add.w	r9, r9, #1
 8012d10:	b11b      	cbz	r3, 8012d1a <_scanf_float+0xbe>
 8012d12:	3b01      	subs	r3, #1
 8012d14:	3101      	adds	r1, #1
 8012d16:	9301      	str	r3, [sp, #4]
 8012d18:	60a1      	str	r1, [r4, #8]
 8012d1a:	68a3      	ldr	r3, [r4, #8]
 8012d1c:	3b01      	subs	r3, #1
 8012d1e:	60a3      	str	r3, [r4, #8]
 8012d20:	6923      	ldr	r3, [r4, #16]
 8012d22:	3301      	adds	r3, #1
 8012d24:	6123      	str	r3, [r4, #16]
 8012d26:	6873      	ldr	r3, [r6, #4]
 8012d28:	3b01      	subs	r3, #1
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	6073      	str	r3, [r6, #4]
 8012d2e:	f340 80ac 	ble.w	8012e8a <_scanf_float+0x22e>
 8012d32:	6833      	ldr	r3, [r6, #0]
 8012d34:	3301      	adds	r3, #1
 8012d36:	6033      	str	r3, [r6, #0]
 8012d38:	e7b5      	b.n	8012ca6 <_scanf_float+0x4a>
 8012d3a:	2b45      	cmp	r3, #69	; 0x45
 8012d3c:	f000 8085 	beq.w	8012e4a <_scanf_float+0x1ee>
 8012d40:	2b46      	cmp	r3, #70	; 0x46
 8012d42:	d06a      	beq.n	8012e1a <_scanf_float+0x1be>
 8012d44:	2b41      	cmp	r3, #65	; 0x41
 8012d46:	d1c1      	bne.n	8012ccc <_scanf_float+0x70>
 8012d48:	2a01      	cmp	r2, #1
 8012d4a:	d1bf      	bne.n	8012ccc <_scanf_float+0x70>
 8012d4c:	2202      	movs	r2, #2
 8012d4e:	e046      	b.n	8012dde <_scanf_float+0x182>
 8012d50:	2b65      	cmp	r3, #101	; 0x65
 8012d52:	d07a      	beq.n	8012e4a <_scanf_float+0x1ee>
 8012d54:	d818      	bhi.n	8012d88 <_scanf_float+0x12c>
 8012d56:	2b54      	cmp	r3, #84	; 0x54
 8012d58:	d066      	beq.n	8012e28 <_scanf_float+0x1cc>
 8012d5a:	d811      	bhi.n	8012d80 <_scanf_float+0x124>
 8012d5c:	2b4e      	cmp	r3, #78	; 0x4e
 8012d5e:	d1b5      	bne.n	8012ccc <_scanf_float+0x70>
 8012d60:	2a00      	cmp	r2, #0
 8012d62:	d146      	bne.n	8012df2 <_scanf_float+0x196>
 8012d64:	f1b9 0f00 	cmp.w	r9, #0
 8012d68:	d145      	bne.n	8012df6 <_scanf_float+0x19a>
 8012d6a:	6821      	ldr	r1, [r4, #0]
 8012d6c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012d70:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012d74:	d13f      	bne.n	8012df6 <_scanf_float+0x19a>
 8012d76:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012d7a:	6021      	str	r1, [r4, #0]
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	e02e      	b.n	8012dde <_scanf_float+0x182>
 8012d80:	2b59      	cmp	r3, #89	; 0x59
 8012d82:	d01e      	beq.n	8012dc2 <_scanf_float+0x166>
 8012d84:	2b61      	cmp	r3, #97	; 0x61
 8012d86:	e7de      	b.n	8012d46 <_scanf_float+0xea>
 8012d88:	2b6e      	cmp	r3, #110	; 0x6e
 8012d8a:	d0e9      	beq.n	8012d60 <_scanf_float+0x104>
 8012d8c:	d815      	bhi.n	8012dba <_scanf_float+0x15e>
 8012d8e:	2b66      	cmp	r3, #102	; 0x66
 8012d90:	d043      	beq.n	8012e1a <_scanf_float+0x1be>
 8012d92:	2b69      	cmp	r3, #105	; 0x69
 8012d94:	d19a      	bne.n	8012ccc <_scanf_float+0x70>
 8012d96:	f1bb 0f00 	cmp.w	fp, #0
 8012d9a:	d138      	bne.n	8012e0e <_scanf_float+0x1b2>
 8012d9c:	f1b9 0f00 	cmp.w	r9, #0
 8012da0:	d197      	bne.n	8012cd2 <_scanf_float+0x76>
 8012da2:	6821      	ldr	r1, [r4, #0]
 8012da4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012da8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012dac:	d195      	bne.n	8012cda <_scanf_float+0x7e>
 8012dae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012db2:	6021      	str	r1, [r4, #0]
 8012db4:	f04f 0b01 	mov.w	fp, #1
 8012db8:	e011      	b.n	8012dde <_scanf_float+0x182>
 8012dba:	2b74      	cmp	r3, #116	; 0x74
 8012dbc:	d034      	beq.n	8012e28 <_scanf_float+0x1cc>
 8012dbe:	2b79      	cmp	r3, #121	; 0x79
 8012dc0:	d184      	bne.n	8012ccc <_scanf_float+0x70>
 8012dc2:	f1bb 0f07 	cmp.w	fp, #7
 8012dc6:	d181      	bne.n	8012ccc <_scanf_float+0x70>
 8012dc8:	f04f 0b08 	mov.w	fp, #8
 8012dcc:	e007      	b.n	8012dde <_scanf_float+0x182>
 8012dce:	eb12 0f0b 	cmn.w	r2, fp
 8012dd2:	f47f af7b 	bne.w	8012ccc <_scanf_float+0x70>
 8012dd6:	6821      	ldr	r1, [r4, #0]
 8012dd8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012ddc:	6021      	str	r1, [r4, #0]
 8012dde:	702b      	strb	r3, [r5, #0]
 8012de0:	3501      	adds	r5, #1
 8012de2:	e79a      	b.n	8012d1a <_scanf_float+0xbe>
 8012de4:	6821      	ldr	r1, [r4, #0]
 8012de6:	0608      	lsls	r0, r1, #24
 8012de8:	f57f af70 	bpl.w	8012ccc <_scanf_float+0x70>
 8012dec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012df0:	e7f4      	b.n	8012ddc <_scanf_float+0x180>
 8012df2:	2a02      	cmp	r2, #2
 8012df4:	d047      	beq.n	8012e86 <_scanf_float+0x22a>
 8012df6:	f1bb 0f01 	cmp.w	fp, #1
 8012dfa:	d003      	beq.n	8012e04 <_scanf_float+0x1a8>
 8012dfc:	f1bb 0f04 	cmp.w	fp, #4
 8012e00:	f47f af64 	bne.w	8012ccc <_scanf_float+0x70>
 8012e04:	f10b 0b01 	add.w	fp, fp, #1
 8012e08:	fa5f fb8b 	uxtb.w	fp, fp
 8012e0c:	e7e7      	b.n	8012dde <_scanf_float+0x182>
 8012e0e:	f1bb 0f03 	cmp.w	fp, #3
 8012e12:	d0f7      	beq.n	8012e04 <_scanf_float+0x1a8>
 8012e14:	f1bb 0f05 	cmp.w	fp, #5
 8012e18:	e7f2      	b.n	8012e00 <_scanf_float+0x1a4>
 8012e1a:	f1bb 0f02 	cmp.w	fp, #2
 8012e1e:	f47f af55 	bne.w	8012ccc <_scanf_float+0x70>
 8012e22:	f04f 0b03 	mov.w	fp, #3
 8012e26:	e7da      	b.n	8012dde <_scanf_float+0x182>
 8012e28:	f1bb 0f06 	cmp.w	fp, #6
 8012e2c:	f47f af4e 	bne.w	8012ccc <_scanf_float+0x70>
 8012e30:	f04f 0b07 	mov.w	fp, #7
 8012e34:	e7d3      	b.n	8012dde <_scanf_float+0x182>
 8012e36:	6821      	ldr	r1, [r4, #0]
 8012e38:	0588      	lsls	r0, r1, #22
 8012e3a:	f57f af47 	bpl.w	8012ccc <_scanf_float+0x70>
 8012e3e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012e42:	6021      	str	r1, [r4, #0]
 8012e44:	f8cd 9008 	str.w	r9, [sp, #8]
 8012e48:	e7c9      	b.n	8012dde <_scanf_float+0x182>
 8012e4a:	6821      	ldr	r1, [r4, #0]
 8012e4c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012e50:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012e54:	d006      	beq.n	8012e64 <_scanf_float+0x208>
 8012e56:	0548      	lsls	r0, r1, #21
 8012e58:	f57f af38 	bpl.w	8012ccc <_scanf_float+0x70>
 8012e5c:	f1b9 0f00 	cmp.w	r9, #0
 8012e60:	f43f af3b 	beq.w	8012cda <_scanf_float+0x7e>
 8012e64:	0588      	lsls	r0, r1, #22
 8012e66:	bf58      	it	pl
 8012e68:	9802      	ldrpl	r0, [sp, #8]
 8012e6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012e6e:	bf58      	it	pl
 8012e70:	eba9 0000 	subpl.w	r0, r9, r0
 8012e74:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012e78:	bf58      	it	pl
 8012e7a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012e7e:	6021      	str	r1, [r4, #0]
 8012e80:	f04f 0900 	mov.w	r9, #0
 8012e84:	e7ab      	b.n	8012dde <_scanf_float+0x182>
 8012e86:	2203      	movs	r2, #3
 8012e88:	e7a9      	b.n	8012dde <_scanf_float+0x182>
 8012e8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012e8e:	9205      	str	r2, [sp, #20]
 8012e90:	4631      	mov	r1, r6
 8012e92:	4638      	mov	r0, r7
 8012e94:	4798      	blx	r3
 8012e96:	9a05      	ldr	r2, [sp, #20]
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	f43f af04 	beq.w	8012ca6 <_scanf_float+0x4a>
 8012e9e:	e715      	b.n	8012ccc <_scanf_float+0x70>
 8012ea0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ea4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012ea8:	4632      	mov	r2, r6
 8012eaa:	4638      	mov	r0, r7
 8012eac:	4798      	blx	r3
 8012eae:	6923      	ldr	r3, [r4, #16]
 8012eb0:	3b01      	subs	r3, #1
 8012eb2:	6123      	str	r3, [r4, #16]
 8012eb4:	e715      	b.n	8012ce2 <_scanf_float+0x86>
 8012eb6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012eba:	2b06      	cmp	r3, #6
 8012ebc:	d80a      	bhi.n	8012ed4 <_scanf_float+0x278>
 8012ebe:	f1bb 0f02 	cmp.w	fp, #2
 8012ec2:	d968      	bls.n	8012f96 <_scanf_float+0x33a>
 8012ec4:	f1ab 0b03 	sub.w	fp, fp, #3
 8012ec8:	fa5f fb8b 	uxtb.w	fp, fp
 8012ecc:	eba5 0b0b 	sub.w	fp, r5, fp
 8012ed0:	455d      	cmp	r5, fp
 8012ed2:	d14b      	bne.n	8012f6c <_scanf_float+0x310>
 8012ed4:	6823      	ldr	r3, [r4, #0]
 8012ed6:	05da      	lsls	r2, r3, #23
 8012ed8:	d51f      	bpl.n	8012f1a <_scanf_float+0x2be>
 8012eda:	055b      	lsls	r3, r3, #21
 8012edc:	d468      	bmi.n	8012fb0 <_scanf_float+0x354>
 8012ede:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012ee2:	6923      	ldr	r3, [r4, #16]
 8012ee4:	2965      	cmp	r1, #101	; 0x65
 8012ee6:	f103 33ff 	add.w	r3, r3, #4294967295
 8012eea:	f105 3bff 	add.w	fp, r5, #4294967295
 8012eee:	6123      	str	r3, [r4, #16]
 8012ef0:	d00d      	beq.n	8012f0e <_scanf_float+0x2b2>
 8012ef2:	2945      	cmp	r1, #69	; 0x45
 8012ef4:	d00b      	beq.n	8012f0e <_scanf_float+0x2b2>
 8012ef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012efa:	4632      	mov	r2, r6
 8012efc:	4638      	mov	r0, r7
 8012efe:	4798      	blx	r3
 8012f00:	6923      	ldr	r3, [r4, #16]
 8012f02:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012f06:	3b01      	subs	r3, #1
 8012f08:	f1a5 0b02 	sub.w	fp, r5, #2
 8012f0c:	6123      	str	r3, [r4, #16]
 8012f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f12:	4632      	mov	r2, r6
 8012f14:	4638      	mov	r0, r7
 8012f16:	4798      	blx	r3
 8012f18:	465d      	mov	r5, fp
 8012f1a:	6826      	ldr	r6, [r4, #0]
 8012f1c:	f016 0610 	ands.w	r6, r6, #16
 8012f20:	d17a      	bne.n	8013018 <_scanf_float+0x3bc>
 8012f22:	702e      	strb	r6, [r5, #0]
 8012f24:	6823      	ldr	r3, [r4, #0]
 8012f26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012f2e:	d142      	bne.n	8012fb6 <_scanf_float+0x35a>
 8012f30:	9b02      	ldr	r3, [sp, #8]
 8012f32:	eba9 0303 	sub.w	r3, r9, r3
 8012f36:	425a      	negs	r2, r3
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d149      	bne.n	8012fd0 <_scanf_float+0x374>
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	4641      	mov	r1, r8
 8012f40:	4638      	mov	r0, r7
 8012f42:	f001 fbd5 	bl	80146f0 <_strtod_r>
 8012f46:	6825      	ldr	r5, [r4, #0]
 8012f48:	f8da 3000 	ldr.w	r3, [sl]
 8012f4c:	f015 0f02 	tst.w	r5, #2
 8012f50:	f103 0204 	add.w	r2, r3, #4
 8012f54:	ec59 8b10 	vmov	r8, r9, d0
 8012f58:	f8ca 2000 	str.w	r2, [sl]
 8012f5c:	d043      	beq.n	8012fe6 <_scanf_float+0x38a>
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	e9c3 8900 	strd	r8, r9, [r3]
 8012f64:	68e3      	ldr	r3, [r4, #12]
 8012f66:	3301      	adds	r3, #1
 8012f68:	60e3      	str	r3, [r4, #12]
 8012f6a:	e6be      	b.n	8012cea <_scanf_float+0x8e>
 8012f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012f74:	4632      	mov	r2, r6
 8012f76:	4638      	mov	r0, r7
 8012f78:	4798      	blx	r3
 8012f7a:	6923      	ldr	r3, [r4, #16]
 8012f7c:	3b01      	subs	r3, #1
 8012f7e:	6123      	str	r3, [r4, #16]
 8012f80:	e7a6      	b.n	8012ed0 <_scanf_float+0x274>
 8012f82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f86:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012f8a:	4632      	mov	r2, r6
 8012f8c:	4638      	mov	r0, r7
 8012f8e:	4798      	blx	r3
 8012f90:	6923      	ldr	r3, [r4, #16]
 8012f92:	3b01      	subs	r3, #1
 8012f94:	6123      	str	r3, [r4, #16]
 8012f96:	4545      	cmp	r5, r8
 8012f98:	d8f3      	bhi.n	8012f82 <_scanf_float+0x326>
 8012f9a:	e6a5      	b.n	8012ce8 <_scanf_float+0x8c>
 8012f9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012fa0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012fa4:	4632      	mov	r2, r6
 8012fa6:	4638      	mov	r0, r7
 8012fa8:	4798      	blx	r3
 8012faa:	6923      	ldr	r3, [r4, #16]
 8012fac:	3b01      	subs	r3, #1
 8012fae:	6123      	str	r3, [r4, #16]
 8012fb0:	4545      	cmp	r5, r8
 8012fb2:	d8f3      	bhi.n	8012f9c <_scanf_float+0x340>
 8012fb4:	e698      	b.n	8012ce8 <_scanf_float+0x8c>
 8012fb6:	9b03      	ldr	r3, [sp, #12]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d0bf      	beq.n	8012f3c <_scanf_float+0x2e0>
 8012fbc:	9904      	ldr	r1, [sp, #16]
 8012fbe:	230a      	movs	r3, #10
 8012fc0:	4632      	mov	r2, r6
 8012fc2:	3101      	adds	r1, #1
 8012fc4:	4638      	mov	r0, r7
 8012fc6:	f001 fc1f 	bl	8014808 <_strtol_r>
 8012fca:	9b03      	ldr	r3, [sp, #12]
 8012fcc:	9d04      	ldr	r5, [sp, #16]
 8012fce:	1ac2      	subs	r2, r0, r3
 8012fd0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012fd4:	429d      	cmp	r5, r3
 8012fd6:	bf28      	it	cs
 8012fd8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012fdc:	490f      	ldr	r1, [pc, #60]	; (801301c <_scanf_float+0x3c0>)
 8012fde:	4628      	mov	r0, r5
 8012fe0:	f000 fd10 	bl	8013a04 <siprintf>
 8012fe4:	e7aa      	b.n	8012f3c <_scanf_float+0x2e0>
 8012fe6:	f015 0504 	ands.w	r5, r5, #4
 8012fea:	d1b8      	bne.n	8012f5e <_scanf_float+0x302>
 8012fec:	681f      	ldr	r7, [r3, #0]
 8012fee:	ee10 2a10 	vmov	r2, s0
 8012ff2:	464b      	mov	r3, r9
 8012ff4:	ee10 0a10 	vmov	r0, s0
 8012ff8:	4649      	mov	r1, r9
 8012ffa:	f7f5 fccf 	bl	800899c <__aeabi_dcmpun>
 8012ffe:	b128      	cbz	r0, 801300c <_scanf_float+0x3b0>
 8013000:	4628      	mov	r0, r5
 8013002:	f000 fcf9 	bl	80139f8 <nanf>
 8013006:	ed87 0a00 	vstr	s0, [r7]
 801300a:	e7ab      	b.n	8012f64 <_scanf_float+0x308>
 801300c:	4640      	mov	r0, r8
 801300e:	4649      	mov	r1, r9
 8013010:	f7f5 fd22 	bl	8008a58 <__aeabi_d2f>
 8013014:	6038      	str	r0, [r7, #0]
 8013016:	e7a5      	b.n	8012f64 <_scanf_float+0x308>
 8013018:	2600      	movs	r6, #0
 801301a:	e666      	b.n	8012cea <_scanf_float+0x8e>
 801301c:	08017083 	.word	0x08017083

08013020 <_scanf_chars>:
 8013020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013024:	4615      	mov	r5, r2
 8013026:	688a      	ldr	r2, [r1, #8]
 8013028:	4680      	mov	r8, r0
 801302a:	460c      	mov	r4, r1
 801302c:	b932      	cbnz	r2, 801303c <_scanf_chars+0x1c>
 801302e:	698a      	ldr	r2, [r1, #24]
 8013030:	2a00      	cmp	r2, #0
 8013032:	bf14      	ite	ne
 8013034:	f04f 32ff 	movne.w	r2, #4294967295
 8013038:	2201      	moveq	r2, #1
 801303a:	608a      	str	r2, [r1, #8]
 801303c:	6822      	ldr	r2, [r4, #0]
 801303e:	06d1      	lsls	r1, r2, #27
 8013040:	bf5f      	itttt	pl
 8013042:	681a      	ldrpl	r2, [r3, #0]
 8013044:	1d11      	addpl	r1, r2, #4
 8013046:	6019      	strpl	r1, [r3, #0]
 8013048:	6817      	ldrpl	r7, [r2, #0]
 801304a:	2600      	movs	r6, #0
 801304c:	69a3      	ldr	r3, [r4, #24]
 801304e:	b1db      	cbz	r3, 8013088 <_scanf_chars+0x68>
 8013050:	2b01      	cmp	r3, #1
 8013052:	d107      	bne.n	8013064 <_scanf_chars+0x44>
 8013054:	682b      	ldr	r3, [r5, #0]
 8013056:	6962      	ldr	r2, [r4, #20]
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	5cd3      	ldrb	r3, [r2, r3]
 801305c:	b9a3      	cbnz	r3, 8013088 <_scanf_chars+0x68>
 801305e:	2e00      	cmp	r6, #0
 8013060:	d132      	bne.n	80130c8 <_scanf_chars+0xa8>
 8013062:	e006      	b.n	8013072 <_scanf_chars+0x52>
 8013064:	2b02      	cmp	r3, #2
 8013066:	d007      	beq.n	8013078 <_scanf_chars+0x58>
 8013068:	2e00      	cmp	r6, #0
 801306a:	d12d      	bne.n	80130c8 <_scanf_chars+0xa8>
 801306c:	69a3      	ldr	r3, [r4, #24]
 801306e:	2b01      	cmp	r3, #1
 8013070:	d12a      	bne.n	80130c8 <_scanf_chars+0xa8>
 8013072:	2001      	movs	r0, #1
 8013074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013078:	f002 ff82 	bl	8015f80 <__locale_ctype_ptr>
 801307c:	682b      	ldr	r3, [r5, #0]
 801307e:	781b      	ldrb	r3, [r3, #0]
 8013080:	4418      	add	r0, r3
 8013082:	7843      	ldrb	r3, [r0, #1]
 8013084:	071b      	lsls	r3, r3, #28
 8013086:	d4ef      	bmi.n	8013068 <_scanf_chars+0x48>
 8013088:	6823      	ldr	r3, [r4, #0]
 801308a:	06da      	lsls	r2, r3, #27
 801308c:	bf5e      	ittt	pl
 801308e:	682b      	ldrpl	r3, [r5, #0]
 8013090:	781b      	ldrbpl	r3, [r3, #0]
 8013092:	703b      	strbpl	r3, [r7, #0]
 8013094:	682a      	ldr	r2, [r5, #0]
 8013096:	686b      	ldr	r3, [r5, #4]
 8013098:	f102 0201 	add.w	r2, r2, #1
 801309c:	602a      	str	r2, [r5, #0]
 801309e:	68a2      	ldr	r2, [r4, #8]
 80130a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80130a4:	f102 32ff 	add.w	r2, r2, #4294967295
 80130a8:	606b      	str	r3, [r5, #4]
 80130aa:	f106 0601 	add.w	r6, r6, #1
 80130ae:	bf58      	it	pl
 80130b0:	3701      	addpl	r7, #1
 80130b2:	60a2      	str	r2, [r4, #8]
 80130b4:	b142      	cbz	r2, 80130c8 <_scanf_chars+0xa8>
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	dcc8      	bgt.n	801304c <_scanf_chars+0x2c>
 80130ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80130be:	4629      	mov	r1, r5
 80130c0:	4640      	mov	r0, r8
 80130c2:	4798      	blx	r3
 80130c4:	2800      	cmp	r0, #0
 80130c6:	d0c1      	beq.n	801304c <_scanf_chars+0x2c>
 80130c8:	6823      	ldr	r3, [r4, #0]
 80130ca:	f013 0310 	ands.w	r3, r3, #16
 80130ce:	d105      	bne.n	80130dc <_scanf_chars+0xbc>
 80130d0:	68e2      	ldr	r2, [r4, #12]
 80130d2:	3201      	adds	r2, #1
 80130d4:	60e2      	str	r2, [r4, #12]
 80130d6:	69a2      	ldr	r2, [r4, #24]
 80130d8:	b102      	cbz	r2, 80130dc <_scanf_chars+0xbc>
 80130da:	703b      	strb	r3, [r7, #0]
 80130dc:	6923      	ldr	r3, [r4, #16]
 80130de:	441e      	add	r6, r3
 80130e0:	6126      	str	r6, [r4, #16]
 80130e2:	2000      	movs	r0, #0
 80130e4:	e7c6      	b.n	8013074 <_scanf_chars+0x54>
	...

080130e8 <_scanf_i>:
 80130e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ec:	469a      	mov	sl, r3
 80130ee:	4b74      	ldr	r3, [pc, #464]	; (80132c0 <_scanf_i+0x1d8>)
 80130f0:	460c      	mov	r4, r1
 80130f2:	4683      	mov	fp, r0
 80130f4:	4616      	mov	r6, r2
 80130f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80130fa:	b087      	sub	sp, #28
 80130fc:	ab03      	add	r3, sp, #12
 80130fe:	68a7      	ldr	r7, [r4, #8]
 8013100:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013104:	4b6f      	ldr	r3, [pc, #444]	; (80132c4 <_scanf_i+0x1dc>)
 8013106:	69a1      	ldr	r1, [r4, #24]
 8013108:	4a6f      	ldr	r2, [pc, #444]	; (80132c8 <_scanf_i+0x1e0>)
 801310a:	2903      	cmp	r1, #3
 801310c:	bf08      	it	eq
 801310e:	461a      	moveq	r2, r3
 8013110:	1e7b      	subs	r3, r7, #1
 8013112:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8013116:	bf84      	itt	hi
 8013118:	f240 135d 	movwhi	r3, #349	; 0x15d
 801311c:	60a3      	strhi	r3, [r4, #8]
 801311e:	6823      	ldr	r3, [r4, #0]
 8013120:	9200      	str	r2, [sp, #0]
 8013122:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013126:	bf88      	it	hi
 8013128:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801312c:	f104 091c 	add.w	r9, r4, #28
 8013130:	6023      	str	r3, [r4, #0]
 8013132:	bf8c      	ite	hi
 8013134:	197f      	addhi	r7, r7, r5
 8013136:	2700      	movls	r7, #0
 8013138:	464b      	mov	r3, r9
 801313a:	f04f 0800 	mov.w	r8, #0
 801313e:	9301      	str	r3, [sp, #4]
 8013140:	6831      	ldr	r1, [r6, #0]
 8013142:	ab03      	add	r3, sp, #12
 8013144:	2202      	movs	r2, #2
 8013146:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801314a:	7809      	ldrb	r1, [r1, #0]
 801314c:	f7f4 ff80 	bl	8008050 <memchr>
 8013150:	9b01      	ldr	r3, [sp, #4]
 8013152:	b330      	cbz	r0, 80131a2 <_scanf_i+0xba>
 8013154:	f1b8 0f01 	cmp.w	r8, #1
 8013158:	d15a      	bne.n	8013210 <_scanf_i+0x128>
 801315a:	6862      	ldr	r2, [r4, #4]
 801315c:	b92a      	cbnz	r2, 801316a <_scanf_i+0x82>
 801315e:	6822      	ldr	r2, [r4, #0]
 8013160:	2108      	movs	r1, #8
 8013162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013166:	6061      	str	r1, [r4, #4]
 8013168:	6022      	str	r2, [r4, #0]
 801316a:	6822      	ldr	r2, [r4, #0]
 801316c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013170:	6022      	str	r2, [r4, #0]
 8013172:	68a2      	ldr	r2, [r4, #8]
 8013174:	1e51      	subs	r1, r2, #1
 8013176:	60a1      	str	r1, [r4, #8]
 8013178:	b19a      	cbz	r2, 80131a2 <_scanf_i+0xba>
 801317a:	6832      	ldr	r2, [r6, #0]
 801317c:	1c51      	adds	r1, r2, #1
 801317e:	6031      	str	r1, [r6, #0]
 8013180:	7812      	ldrb	r2, [r2, #0]
 8013182:	701a      	strb	r2, [r3, #0]
 8013184:	1c5d      	adds	r5, r3, #1
 8013186:	6873      	ldr	r3, [r6, #4]
 8013188:	3b01      	subs	r3, #1
 801318a:	2b00      	cmp	r3, #0
 801318c:	6073      	str	r3, [r6, #4]
 801318e:	dc07      	bgt.n	80131a0 <_scanf_i+0xb8>
 8013190:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013194:	4631      	mov	r1, r6
 8013196:	4658      	mov	r0, fp
 8013198:	4798      	blx	r3
 801319a:	2800      	cmp	r0, #0
 801319c:	f040 8086 	bne.w	80132ac <_scanf_i+0x1c4>
 80131a0:	462b      	mov	r3, r5
 80131a2:	f108 0801 	add.w	r8, r8, #1
 80131a6:	f1b8 0f03 	cmp.w	r8, #3
 80131aa:	d1c8      	bne.n	801313e <_scanf_i+0x56>
 80131ac:	6862      	ldr	r2, [r4, #4]
 80131ae:	b90a      	cbnz	r2, 80131b4 <_scanf_i+0xcc>
 80131b0:	220a      	movs	r2, #10
 80131b2:	6062      	str	r2, [r4, #4]
 80131b4:	6862      	ldr	r2, [r4, #4]
 80131b6:	4945      	ldr	r1, [pc, #276]	; (80132cc <_scanf_i+0x1e4>)
 80131b8:	6960      	ldr	r0, [r4, #20]
 80131ba:	9301      	str	r3, [sp, #4]
 80131bc:	1a89      	subs	r1, r1, r2
 80131be:	f000 fb33 	bl	8013828 <__sccl>
 80131c2:	9b01      	ldr	r3, [sp, #4]
 80131c4:	f04f 0800 	mov.w	r8, #0
 80131c8:	461d      	mov	r5, r3
 80131ca:	68a3      	ldr	r3, [r4, #8]
 80131cc:	6822      	ldr	r2, [r4, #0]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d03a      	beq.n	8013248 <_scanf_i+0x160>
 80131d2:	6831      	ldr	r1, [r6, #0]
 80131d4:	6960      	ldr	r0, [r4, #20]
 80131d6:	f891 c000 	ldrb.w	ip, [r1]
 80131da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80131de:	2800      	cmp	r0, #0
 80131e0:	d032      	beq.n	8013248 <_scanf_i+0x160>
 80131e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80131e6:	d121      	bne.n	801322c <_scanf_i+0x144>
 80131e8:	0510      	lsls	r0, r2, #20
 80131ea:	d51f      	bpl.n	801322c <_scanf_i+0x144>
 80131ec:	f108 0801 	add.w	r8, r8, #1
 80131f0:	b117      	cbz	r7, 80131f8 <_scanf_i+0x110>
 80131f2:	3301      	adds	r3, #1
 80131f4:	3f01      	subs	r7, #1
 80131f6:	60a3      	str	r3, [r4, #8]
 80131f8:	6873      	ldr	r3, [r6, #4]
 80131fa:	3b01      	subs	r3, #1
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	6073      	str	r3, [r6, #4]
 8013200:	dd1b      	ble.n	801323a <_scanf_i+0x152>
 8013202:	6833      	ldr	r3, [r6, #0]
 8013204:	3301      	adds	r3, #1
 8013206:	6033      	str	r3, [r6, #0]
 8013208:	68a3      	ldr	r3, [r4, #8]
 801320a:	3b01      	subs	r3, #1
 801320c:	60a3      	str	r3, [r4, #8]
 801320e:	e7dc      	b.n	80131ca <_scanf_i+0xe2>
 8013210:	f1b8 0f02 	cmp.w	r8, #2
 8013214:	d1ad      	bne.n	8013172 <_scanf_i+0x8a>
 8013216:	6822      	ldr	r2, [r4, #0]
 8013218:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801321c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013220:	d1bf      	bne.n	80131a2 <_scanf_i+0xba>
 8013222:	2110      	movs	r1, #16
 8013224:	6061      	str	r1, [r4, #4]
 8013226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801322a:	e7a1      	b.n	8013170 <_scanf_i+0x88>
 801322c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013230:	6022      	str	r2, [r4, #0]
 8013232:	780b      	ldrb	r3, [r1, #0]
 8013234:	702b      	strb	r3, [r5, #0]
 8013236:	3501      	adds	r5, #1
 8013238:	e7de      	b.n	80131f8 <_scanf_i+0x110>
 801323a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801323e:	4631      	mov	r1, r6
 8013240:	4658      	mov	r0, fp
 8013242:	4798      	blx	r3
 8013244:	2800      	cmp	r0, #0
 8013246:	d0df      	beq.n	8013208 <_scanf_i+0x120>
 8013248:	6823      	ldr	r3, [r4, #0]
 801324a:	05d9      	lsls	r1, r3, #23
 801324c:	d50c      	bpl.n	8013268 <_scanf_i+0x180>
 801324e:	454d      	cmp	r5, r9
 8013250:	d908      	bls.n	8013264 <_scanf_i+0x17c>
 8013252:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013256:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801325a:	4632      	mov	r2, r6
 801325c:	4658      	mov	r0, fp
 801325e:	4798      	blx	r3
 8013260:	1e6f      	subs	r7, r5, #1
 8013262:	463d      	mov	r5, r7
 8013264:	454d      	cmp	r5, r9
 8013266:	d029      	beq.n	80132bc <_scanf_i+0x1d4>
 8013268:	6822      	ldr	r2, [r4, #0]
 801326a:	f012 0210 	ands.w	r2, r2, #16
 801326e:	d113      	bne.n	8013298 <_scanf_i+0x1b0>
 8013270:	702a      	strb	r2, [r5, #0]
 8013272:	6863      	ldr	r3, [r4, #4]
 8013274:	9e00      	ldr	r6, [sp, #0]
 8013276:	4649      	mov	r1, r9
 8013278:	4658      	mov	r0, fp
 801327a:	47b0      	blx	r6
 801327c:	f8da 3000 	ldr.w	r3, [sl]
 8013280:	6821      	ldr	r1, [r4, #0]
 8013282:	1d1a      	adds	r2, r3, #4
 8013284:	f8ca 2000 	str.w	r2, [sl]
 8013288:	f011 0f20 	tst.w	r1, #32
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	d010      	beq.n	80132b2 <_scanf_i+0x1ca>
 8013290:	6018      	str	r0, [r3, #0]
 8013292:	68e3      	ldr	r3, [r4, #12]
 8013294:	3301      	adds	r3, #1
 8013296:	60e3      	str	r3, [r4, #12]
 8013298:	eba5 0509 	sub.w	r5, r5, r9
 801329c:	44a8      	add	r8, r5
 801329e:	6925      	ldr	r5, [r4, #16]
 80132a0:	4445      	add	r5, r8
 80132a2:	6125      	str	r5, [r4, #16]
 80132a4:	2000      	movs	r0, #0
 80132a6:	b007      	add	sp, #28
 80132a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132ac:	f04f 0800 	mov.w	r8, #0
 80132b0:	e7ca      	b.n	8013248 <_scanf_i+0x160>
 80132b2:	07ca      	lsls	r2, r1, #31
 80132b4:	bf4c      	ite	mi
 80132b6:	8018      	strhmi	r0, [r3, #0]
 80132b8:	6018      	strpl	r0, [r3, #0]
 80132ba:	e7ea      	b.n	8013292 <_scanf_i+0x1aa>
 80132bc:	2001      	movs	r0, #1
 80132be:	e7f2      	b.n	80132a6 <_scanf_i+0x1be>
 80132c0:	08016c50 	.word	0x08016c50
 80132c4:	08014809 	.word	0x08014809
 80132c8:	08014921 	.word	0x08014921
 80132cc:	08017098 	.word	0x08017098

080132d0 <iprintf>:
 80132d0:	b40f      	push	{r0, r1, r2, r3}
 80132d2:	4b0a      	ldr	r3, [pc, #40]	; (80132fc <iprintf+0x2c>)
 80132d4:	b513      	push	{r0, r1, r4, lr}
 80132d6:	681c      	ldr	r4, [r3, #0]
 80132d8:	b124      	cbz	r4, 80132e4 <iprintf+0x14>
 80132da:	69a3      	ldr	r3, [r4, #24]
 80132dc:	b913      	cbnz	r3, 80132e4 <iprintf+0x14>
 80132de:	4620      	mov	r0, r4
 80132e0:	f7fe fbbe 	bl	8011a60 <__sinit>
 80132e4:	ab05      	add	r3, sp, #20
 80132e6:	9a04      	ldr	r2, [sp, #16]
 80132e8:	68a1      	ldr	r1, [r4, #8]
 80132ea:	9301      	str	r3, [sp, #4]
 80132ec:	4620      	mov	r0, r4
 80132ee:	f7fe fdcb 	bl	8011e88 <_vfiprintf_r>
 80132f2:	b002      	add	sp, #8
 80132f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132f8:	b004      	add	sp, #16
 80132fa:	4770      	bx	lr
 80132fc:	20000018 	.word	0x20000018

08013300 <putchar>:
 8013300:	b538      	push	{r3, r4, r5, lr}
 8013302:	4b08      	ldr	r3, [pc, #32]	; (8013324 <putchar+0x24>)
 8013304:	681c      	ldr	r4, [r3, #0]
 8013306:	4605      	mov	r5, r0
 8013308:	b124      	cbz	r4, 8013314 <putchar+0x14>
 801330a:	69a3      	ldr	r3, [r4, #24]
 801330c:	b913      	cbnz	r3, 8013314 <putchar+0x14>
 801330e:	4620      	mov	r0, r4
 8013310:	f7fe fba6 	bl	8011a60 <__sinit>
 8013314:	68a2      	ldr	r2, [r4, #8]
 8013316:	4629      	mov	r1, r5
 8013318:	4620      	mov	r0, r4
 801331a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801331e:	f003 bc19 	b.w	8016b54 <_putc_r>
 8013322:	bf00      	nop
 8013324:	20000018 	.word	0x20000018

08013328 <_puts_r>:
 8013328:	b570      	push	{r4, r5, r6, lr}
 801332a:	460e      	mov	r6, r1
 801332c:	4605      	mov	r5, r0
 801332e:	b118      	cbz	r0, 8013338 <_puts_r+0x10>
 8013330:	6983      	ldr	r3, [r0, #24]
 8013332:	b90b      	cbnz	r3, 8013338 <_puts_r+0x10>
 8013334:	f7fe fb94 	bl	8011a60 <__sinit>
 8013338:	69ab      	ldr	r3, [r5, #24]
 801333a:	68ac      	ldr	r4, [r5, #8]
 801333c:	b913      	cbnz	r3, 8013344 <_puts_r+0x1c>
 801333e:	4628      	mov	r0, r5
 8013340:	f7fe fb8e 	bl	8011a60 <__sinit>
 8013344:	4b23      	ldr	r3, [pc, #140]	; (80133d4 <_puts_r+0xac>)
 8013346:	429c      	cmp	r4, r3
 8013348:	d117      	bne.n	801337a <_puts_r+0x52>
 801334a:	686c      	ldr	r4, [r5, #4]
 801334c:	89a3      	ldrh	r3, [r4, #12]
 801334e:	071b      	lsls	r3, r3, #28
 8013350:	d51d      	bpl.n	801338e <_puts_r+0x66>
 8013352:	6923      	ldr	r3, [r4, #16]
 8013354:	b1db      	cbz	r3, 801338e <_puts_r+0x66>
 8013356:	3e01      	subs	r6, #1
 8013358:	68a3      	ldr	r3, [r4, #8]
 801335a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801335e:	3b01      	subs	r3, #1
 8013360:	60a3      	str	r3, [r4, #8]
 8013362:	b9e9      	cbnz	r1, 80133a0 <_puts_r+0x78>
 8013364:	2b00      	cmp	r3, #0
 8013366:	da2e      	bge.n	80133c6 <_puts_r+0x9e>
 8013368:	4622      	mov	r2, r4
 801336a:	210a      	movs	r1, #10
 801336c:	4628      	mov	r0, r5
 801336e:	f001 fb95 	bl	8014a9c <__swbuf_r>
 8013372:	3001      	adds	r0, #1
 8013374:	d011      	beq.n	801339a <_puts_r+0x72>
 8013376:	200a      	movs	r0, #10
 8013378:	e011      	b.n	801339e <_puts_r+0x76>
 801337a:	4b17      	ldr	r3, [pc, #92]	; (80133d8 <_puts_r+0xb0>)
 801337c:	429c      	cmp	r4, r3
 801337e:	d101      	bne.n	8013384 <_puts_r+0x5c>
 8013380:	68ac      	ldr	r4, [r5, #8]
 8013382:	e7e3      	b.n	801334c <_puts_r+0x24>
 8013384:	4b15      	ldr	r3, [pc, #84]	; (80133dc <_puts_r+0xb4>)
 8013386:	429c      	cmp	r4, r3
 8013388:	bf08      	it	eq
 801338a:	68ec      	ldreq	r4, [r5, #12]
 801338c:	e7de      	b.n	801334c <_puts_r+0x24>
 801338e:	4621      	mov	r1, r4
 8013390:	4628      	mov	r0, r5
 8013392:	f001 fbe7 	bl	8014b64 <__swsetup_r>
 8013396:	2800      	cmp	r0, #0
 8013398:	d0dd      	beq.n	8013356 <_puts_r+0x2e>
 801339a:	f04f 30ff 	mov.w	r0, #4294967295
 801339e:	bd70      	pop	{r4, r5, r6, pc}
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	da04      	bge.n	80133ae <_puts_r+0x86>
 80133a4:	69a2      	ldr	r2, [r4, #24]
 80133a6:	429a      	cmp	r2, r3
 80133a8:	dc06      	bgt.n	80133b8 <_puts_r+0x90>
 80133aa:	290a      	cmp	r1, #10
 80133ac:	d004      	beq.n	80133b8 <_puts_r+0x90>
 80133ae:	6823      	ldr	r3, [r4, #0]
 80133b0:	1c5a      	adds	r2, r3, #1
 80133b2:	6022      	str	r2, [r4, #0]
 80133b4:	7019      	strb	r1, [r3, #0]
 80133b6:	e7cf      	b.n	8013358 <_puts_r+0x30>
 80133b8:	4622      	mov	r2, r4
 80133ba:	4628      	mov	r0, r5
 80133bc:	f001 fb6e 	bl	8014a9c <__swbuf_r>
 80133c0:	3001      	adds	r0, #1
 80133c2:	d1c9      	bne.n	8013358 <_puts_r+0x30>
 80133c4:	e7e9      	b.n	801339a <_puts_r+0x72>
 80133c6:	6823      	ldr	r3, [r4, #0]
 80133c8:	200a      	movs	r0, #10
 80133ca:	1c5a      	adds	r2, r3, #1
 80133cc:	6022      	str	r2, [r4, #0]
 80133ce:	7018      	strb	r0, [r3, #0]
 80133d0:	e7e5      	b.n	801339e <_puts_r+0x76>
 80133d2:	bf00      	nop
 80133d4:	08016ffc 	.word	0x08016ffc
 80133d8:	0801701c 	.word	0x0801701c
 80133dc:	08016fdc 	.word	0x08016fdc

080133e0 <puts>:
 80133e0:	4b02      	ldr	r3, [pc, #8]	; (80133ec <puts+0xc>)
 80133e2:	4601      	mov	r1, r0
 80133e4:	6818      	ldr	r0, [r3, #0]
 80133e6:	f7ff bf9f 	b.w	8013328 <_puts_r>
 80133ea:	bf00      	nop
 80133ec:	20000018 	.word	0x20000018

080133f0 <swapfunc>:
 80133f0:	2b02      	cmp	r3, #2
 80133f2:	b510      	push	{r4, lr}
 80133f4:	d00a      	beq.n	801340c <swapfunc+0x1c>
 80133f6:	0892      	lsrs	r2, r2, #2
 80133f8:	3a01      	subs	r2, #1
 80133fa:	6803      	ldr	r3, [r0, #0]
 80133fc:	680c      	ldr	r4, [r1, #0]
 80133fe:	f840 4b04 	str.w	r4, [r0], #4
 8013402:	2a00      	cmp	r2, #0
 8013404:	f841 3b04 	str.w	r3, [r1], #4
 8013408:	dcf6      	bgt.n	80133f8 <swapfunc+0x8>
 801340a:	bd10      	pop	{r4, pc}
 801340c:	4402      	add	r2, r0
 801340e:	780c      	ldrb	r4, [r1, #0]
 8013410:	7803      	ldrb	r3, [r0, #0]
 8013412:	f800 4b01 	strb.w	r4, [r0], #1
 8013416:	f801 3b01 	strb.w	r3, [r1], #1
 801341a:	1a13      	subs	r3, r2, r0
 801341c:	2b00      	cmp	r3, #0
 801341e:	dcf6      	bgt.n	801340e <swapfunc+0x1e>
 8013420:	e7f3      	b.n	801340a <swapfunc+0x1a>

08013422 <med3.isra.1>:
 8013422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013424:	460c      	mov	r4, r1
 8013426:	4615      	mov	r5, r2
 8013428:	4607      	mov	r7, r0
 801342a:	461e      	mov	r6, r3
 801342c:	4798      	blx	r3
 801342e:	2800      	cmp	r0, #0
 8013430:	4629      	mov	r1, r5
 8013432:	4620      	mov	r0, r4
 8013434:	da0a      	bge.n	801344c <med3.isra.1+0x2a>
 8013436:	47b0      	blx	r6
 8013438:	2800      	cmp	r0, #0
 801343a:	db05      	blt.n	8013448 <med3.isra.1+0x26>
 801343c:	4629      	mov	r1, r5
 801343e:	4638      	mov	r0, r7
 8013440:	47b0      	blx	r6
 8013442:	2800      	cmp	r0, #0
 8013444:	db0a      	blt.n	801345c <med3.isra.1+0x3a>
 8013446:	463c      	mov	r4, r7
 8013448:	4620      	mov	r0, r4
 801344a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801344c:	47b0      	blx	r6
 801344e:	2800      	cmp	r0, #0
 8013450:	dcfa      	bgt.n	8013448 <med3.isra.1+0x26>
 8013452:	4629      	mov	r1, r5
 8013454:	4638      	mov	r0, r7
 8013456:	47b0      	blx	r6
 8013458:	2800      	cmp	r0, #0
 801345a:	dbf4      	blt.n	8013446 <med3.isra.1+0x24>
 801345c:	462c      	mov	r4, r5
 801345e:	e7f3      	b.n	8013448 <med3.isra.1+0x26>

08013460 <qsort>:
 8013460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013464:	b085      	sub	sp, #20
 8013466:	4606      	mov	r6, r0
 8013468:	468a      	mov	sl, r1
 801346a:	4614      	mov	r4, r2
 801346c:	9300      	str	r3, [sp, #0]
 801346e:	07b2      	lsls	r2, r6, #30
 8013470:	d110      	bne.n	8013494 <qsort+0x34>
 8013472:	07a3      	lsls	r3, r4, #30
 8013474:	d10e      	bne.n	8013494 <qsort+0x34>
 8013476:	1f27      	subs	r7, r4, #4
 8013478:	bf18      	it	ne
 801347a:	2701      	movne	r7, #1
 801347c:	f1ba 0f06 	cmp.w	sl, #6
 8013480:	eb06 0b04 	add.w	fp, r6, r4
 8013484:	d828      	bhi.n	80134d8 <qsort+0x78>
 8013486:	fb04 6a0a 	mla	sl, r4, sl, r6
 801348a:	45da      	cmp	sl, fp
 801348c:	d80b      	bhi.n	80134a6 <qsort+0x46>
 801348e:	b005      	add	sp, #20
 8013490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013494:	2702      	movs	r7, #2
 8013496:	e7f1      	b.n	801347c <qsort+0x1c>
 8013498:	463b      	mov	r3, r7
 801349a:	4622      	mov	r2, r4
 801349c:	4649      	mov	r1, r9
 801349e:	4640      	mov	r0, r8
 80134a0:	f7ff ffa6 	bl	80133f0 <swapfunc>
 80134a4:	e013      	b.n	80134ce <qsort+0x6e>
 80134a6:	46d8      	mov	r8, fp
 80134a8:	e012      	b.n	80134d0 <qsort+0x70>
 80134aa:	eba8 0904 	sub.w	r9, r8, r4
 80134ae:	4641      	mov	r1, r8
 80134b0:	4648      	mov	r0, r9
 80134b2:	9b00      	ldr	r3, [sp, #0]
 80134b4:	4798      	blx	r3
 80134b6:	2800      	cmp	r0, #0
 80134b8:	dd0c      	ble.n	80134d4 <qsort+0x74>
 80134ba:	2f00      	cmp	r7, #0
 80134bc:	d1ec      	bne.n	8013498 <qsort+0x38>
 80134be:	f8d8 3000 	ldr.w	r3, [r8]
 80134c2:	f8d9 2000 	ldr.w	r2, [r9]
 80134c6:	f8c8 2000 	str.w	r2, [r8]
 80134ca:	f8c9 3000 	str.w	r3, [r9]
 80134ce:	46c8      	mov	r8, r9
 80134d0:	4546      	cmp	r6, r8
 80134d2:	d3ea      	bcc.n	80134aa <qsort+0x4a>
 80134d4:	44a3      	add	fp, r4
 80134d6:	e7d8      	b.n	801348a <qsort+0x2a>
 80134d8:	ea4f 085a 	mov.w	r8, sl, lsr #1
 80134dc:	f10a 35ff 	add.w	r5, sl, #4294967295
 80134e0:	f1ba 0f07 	cmp.w	sl, #7
 80134e4:	fb04 6808 	mla	r8, r4, r8, r6
 80134e8:	fb04 6505 	mla	r5, r4, r5, r6
 80134ec:	d027      	beq.n	801353e <qsort+0xde>
 80134ee:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
 80134f2:	d94a      	bls.n	801358a <qsort+0x12a>
 80134f4:	ea4f 09da 	mov.w	r9, sl, lsr #3
 80134f8:	fb04 f909 	mul.w	r9, r4, r9
 80134fc:	eb06 0109 	add.w	r1, r6, r9
 8013500:	eb01 0209 	add.w	r2, r1, r9
 8013504:	9b00      	ldr	r3, [sp, #0]
 8013506:	4630      	mov	r0, r6
 8013508:	f7ff ff8b 	bl	8013422 <med3.isra.1>
 801350c:	eb08 0209 	add.w	r2, r8, r9
 8013510:	4641      	mov	r1, r8
 8013512:	9001      	str	r0, [sp, #4]
 8013514:	9b00      	ldr	r3, [sp, #0]
 8013516:	eba8 0009 	sub.w	r0, r8, r9
 801351a:	f7ff ff82 	bl	8013422 <med3.isra.1>
 801351e:	4680      	mov	r8, r0
 8013520:	eba5 0049 	sub.w	r0, r5, r9, lsl #1
 8013524:	462a      	mov	r2, r5
 8013526:	9b00      	ldr	r3, [sp, #0]
 8013528:	eb00 0109 	add.w	r1, r0, r9
 801352c:	f7ff ff79 	bl	8013422 <med3.isra.1>
 8013530:	4602      	mov	r2, r0
 8013532:	4641      	mov	r1, r8
 8013534:	9b00      	ldr	r3, [sp, #0]
 8013536:	9801      	ldr	r0, [sp, #4]
 8013538:	f7ff ff73 	bl	8013422 <med3.isra.1>
 801353c:	4680      	mov	r8, r0
 801353e:	bb3f      	cbnz	r7, 8013590 <qsort+0x130>
 8013540:	6833      	ldr	r3, [r6, #0]
 8013542:	f8d8 2000 	ldr.w	r2, [r8]
 8013546:	6032      	str	r2, [r6, #0]
 8013548:	f8c8 3000 	str.w	r3, [r8]
 801354c:	46d8      	mov	r8, fp
 801354e:	46a9      	mov	r9, r5
 8013550:	f8cd b004 	str.w	fp, [sp, #4]
 8013554:	2300      	movs	r3, #0
 8013556:	45a8      	cmp	r8, r5
 8013558:	d857      	bhi.n	801360a <qsort+0x1aa>
 801355a:	9302      	str	r3, [sp, #8]
 801355c:	4631      	mov	r1, r6
 801355e:	9b00      	ldr	r3, [sp, #0]
 8013560:	4640      	mov	r0, r8
 8013562:	4798      	blx	r3
 8013564:	2800      	cmp	r0, #0
 8013566:	9b02      	ldr	r3, [sp, #8]
 8013568:	dc2e      	bgt.n	80135c8 <qsort+0x168>
 801356a:	d10c      	bne.n	8013586 <qsort+0x126>
 801356c:	b9bf      	cbnz	r7, 801359e <qsort+0x13e>
 801356e:	9b01      	ldr	r3, [sp, #4]
 8013570:	9901      	ldr	r1, [sp, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	f8d8 2000 	ldr.w	r2, [r8]
 8013578:	600a      	str	r2, [r1, #0]
 801357a:	f8c8 3000 	str.w	r3, [r8]
 801357e:	9b01      	ldr	r3, [sp, #4]
 8013580:	4423      	add	r3, r4
 8013582:	9301      	str	r3, [sp, #4]
 8013584:	2301      	movs	r3, #1
 8013586:	44a0      	add	r8, r4
 8013588:	e7e5      	b.n	8013556 <qsort+0xf6>
 801358a:	462a      	mov	r2, r5
 801358c:	9601      	str	r6, [sp, #4]
 801358e:	e7d0      	b.n	8013532 <qsort+0xd2>
 8013590:	463b      	mov	r3, r7
 8013592:	4622      	mov	r2, r4
 8013594:	4641      	mov	r1, r8
 8013596:	4630      	mov	r0, r6
 8013598:	f7ff ff2a 	bl	80133f0 <swapfunc>
 801359c:	e7d6      	b.n	801354c <qsort+0xec>
 801359e:	463b      	mov	r3, r7
 80135a0:	4622      	mov	r2, r4
 80135a2:	4641      	mov	r1, r8
 80135a4:	9801      	ldr	r0, [sp, #4]
 80135a6:	f7ff ff23 	bl	80133f0 <swapfunc>
 80135aa:	e7e8      	b.n	801357e <qsort+0x11e>
 80135ac:	d109      	bne.n	80135c2 <qsort+0x162>
 80135ae:	b9f7      	cbnz	r7, 80135ee <qsort+0x18e>
 80135b0:	682b      	ldr	r3, [r5, #0]
 80135b2:	f8d9 2000 	ldr.w	r2, [r9]
 80135b6:	602a      	str	r2, [r5, #0]
 80135b8:	f8c9 3000 	str.w	r3, [r9]
 80135bc:	eba9 0904 	sub.w	r9, r9, r4
 80135c0:	2301      	movs	r3, #1
 80135c2:	9d02      	ldr	r5, [sp, #8]
 80135c4:	45a8      	cmp	r8, r5
 80135c6:	d820      	bhi.n	801360a <qsort+0x1aa>
 80135c8:	9303      	str	r3, [sp, #12]
 80135ca:	4631      	mov	r1, r6
 80135cc:	9b00      	ldr	r3, [sp, #0]
 80135ce:	4628      	mov	r0, r5
 80135d0:	4798      	blx	r3
 80135d2:	1b2b      	subs	r3, r5, r4
 80135d4:	2800      	cmp	r0, #0
 80135d6:	9302      	str	r3, [sp, #8]
 80135d8:	9b03      	ldr	r3, [sp, #12]
 80135da:	dae7      	bge.n	80135ac <qsort+0x14c>
 80135dc:	b977      	cbnz	r7, 80135fc <qsort+0x19c>
 80135de:	f8d8 3000 	ldr.w	r3, [r8]
 80135e2:	682a      	ldr	r2, [r5, #0]
 80135e4:	f8c8 2000 	str.w	r2, [r8]
 80135e8:	602b      	str	r3, [r5, #0]
 80135ea:	9d02      	ldr	r5, [sp, #8]
 80135ec:	e7ca      	b.n	8013584 <qsort+0x124>
 80135ee:	463b      	mov	r3, r7
 80135f0:	4622      	mov	r2, r4
 80135f2:	4649      	mov	r1, r9
 80135f4:	4628      	mov	r0, r5
 80135f6:	f7ff fefb 	bl	80133f0 <swapfunc>
 80135fa:	e7df      	b.n	80135bc <qsort+0x15c>
 80135fc:	463b      	mov	r3, r7
 80135fe:	4622      	mov	r2, r4
 8013600:	4629      	mov	r1, r5
 8013602:	4640      	mov	r0, r8
 8013604:	f7ff fef4 	bl	80133f0 <swapfunc>
 8013608:	e7ef      	b.n	80135ea <qsort+0x18a>
 801360a:	fb04 6a0a 	mla	sl, r4, sl, r6
 801360e:	bb03      	cbnz	r3, 8013652 <qsort+0x1f2>
 8013610:	45d3      	cmp	fp, sl
 8013612:	f4bf af3c 	bcs.w	801348e <qsort+0x2e>
 8013616:	465d      	mov	r5, fp
 8013618:	e017      	b.n	801364a <qsort+0x1ea>
 801361a:	463b      	mov	r3, r7
 801361c:	4622      	mov	r2, r4
 801361e:	4641      	mov	r1, r8
 8013620:	4628      	mov	r0, r5
 8013622:	f7ff fee5 	bl	80133f0 <swapfunc>
 8013626:	e00f      	b.n	8013648 <qsort+0x1e8>
 8013628:	eba5 0804 	sub.w	r8, r5, r4
 801362c:	4629      	mov	r1, r5
 801362e:	4640      	mov	r0, r8
 8013630:	9b00      	ldr	r3, [sp, #0]
 8013632:	4798      	blx	r3
 8013634:	2800      	cmp	r0, #0
 8013636:	dd0a      	ble.n	801364e <qsort+0x1ee>
 8013638:	2f00      	cmp	r7, #0
 801363a:	d1ee      	bne.n	801361a <qsort+0x1ba>
 801363c:	682b      	ldr	r3, [r5, #0]
 801363e:	f8d8 2000 	ldr.w	r2, [r8]
 8013642:	602a      	str	r2, [r5, #0]
 8013644:	f8c8 3000 	str.w	r3, [r8]
 8013648:	4645      	mov	r5, r8
 801364a:	42ae      	cmp	r6, r5
 801364c:	d3ec      	bcc.n	8013628 <qsort+0x1c8>
 801364e:	44a3      	add	fp, r4
 8013650:	e7de      	b.n	8013610 <qsort+0x1b0>
 8013652:	9b01      	ldr	r3, [sp, #4]
 8013654:	eba8 0b03 	sub.w	fp, r8, r3
 8013658:	1b9a      	subs	r2, r3, r6
 801365a:	455a      	cmp	r2, fp
 801365c:	bfa8      	it	ge
 801365e:	465a      	movge	r2, fp
 8013660:	b12a      	cbz	r2, 801366e <qsort+0x20e>
 8013662:	463b      	mov	r3, r7
 8013664:	eba8 0102 	sub.w	r1, r8, r2
 8013668:	4630      	mov	r0, r6
 801366a:	f7ff fec1 	bl	80133f0 <swapfunc>
 801366e:	ebaa 0209 	sub.w	r2, sl, r9
 8013672:	eba9 0505 	sub.w	r5, r9, r5
 8013676:	1b12      	subs	r2, r2, r4
 8013678:	42aa      	cmp	r2, r5
 801367a:	bf28      	it	cs
 801367c:	462a      	movcs	r2, r5
 801367e:	b12a      	cbz	r2, 801368c <qsort+0x22c>
 8013680:	463b      	mov	r3, r7
 8013682:	ebaa 0102 	sub.w	r1, sl, r2
 8013686:	4640      	mov	r0, r8
 8013688:	f7ff feb2 	bl	80133f0 <swapfunc>
 801368c:	455c      	cmp	r4, fp
 801368e:	d206      	bcs.n	801369e <qsort+0x23e>
 8013690:	fbbb f1f4 	udiv	r1, fp, r4
 8013694:	9b00      	ldr	r3, [sp, #0]
 8013696:	4622      	mov	r2, r4
 8013698:	4630      	mov	r0, r6
 801369a:	f7ff fee1 	bl	8013460 <qsort>
 801369e:	42a5      	cmp	r5, r4
 80136a0:	f67f aef5 	bls.w	801348e <qsort+0x2e>
 80136a4:	ebaa 0605 	sub.w	r6, sl, r5
 80136a8:	fbb5 faf4 	udiv	sl, r5, r4
 80136ac:	e6df      	b.n	801346e <qsort+0xe>

080136ae <lflush>:
 80136ae:	8983      	ldrh	r3, [r0, #12]
 80136b0:	f003 0309 	and.w	r3, r3, #9
 80136b4:	2b09      	cmp	r3, #9
 80136b6:	d101      	bne.n	80136bc <lflush+0xe>
 80136b8:	f7fe b980 	b.w	80119bc <fflush>
 80136bc:	2000      	movs	r0, #0
 80136be:	4770      	bx	lr

080136c0 <__srefill_r>:
 80136c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136c2:	460c      	mov	r4, r1
 80136c4:	4605      	mov	r5, r0
 80136c6:	b118      	cbz	r0, 80136d0 <__srefill_r+0x10>
 80136c8:	6983      	ldr	r3, [r0, #24]
 80136ca:	b90b      	cbnz	r3, 80136d0 <__srefill_r+0x10>
 80136cc:	f7fe f9c8 	bl	8011a60 <__sinit>
 80136d0:	4b3c      	ldr	r3, [pc, #240]	; (80137c4 <__srefill_r+0x104>)
 80136d2:	429c      	cmp	r4, r3
 80136d4:	d10a      	bne.n	80136ec <__srefill_r+0x2c>
 80136d6:	686c      	ldr	r4, [r5, #4]
 80136d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80136dc:	2300      	movs	r3, #0
 80136de:	6063      	str	r3, [r4, #4]
 80136e0:	b293      	uxth	r3, r2
 80136e2:	069e      	lsls	r6, r3, #26
 80136e4:	d50c      	bpl.n	8013700 <__srefill_r+0x40>
 80136e6:	f04f 30ff 	mov.w	r0, #4294967295
 80136ea:	e067      	b.n	80137bc <__srefill_r+0xfc>
 80136ec:	4b36      	ldr	r3, [pc, #216]	; (80137c8 <__srefill_r+0x108>)
 80136ee:	429c      	cmp	r4, r3
 80136f0:	d101      	bne.n	80136f6 <__srefill_r+0x36>
 80136f2:	68ac      	ldr	r4, [r5, #8]
 80136f4:	e7f0      	b.n	80136d8 <__srefill_r+0x18>
 80136f6:	4b35      	ldr	r3, [pc, #212]	; (80137cc <__srefill_r+0x10c>)
 80136f8:	429c      	cmp	r4, r3
 80136fa:	bf08      	it	eq
 80136fc:	68ec      	ldreq	r4, [r5, #12]
 80136fe:	e7eb      	b.n	80136d8 <__srefill_r+0x18>
 8013700:	0758      	lsls	r0, r3, #29
 8013702:	d449      	bmi.n	8013798 <__srefill_r+0xd8>
 8013704:	06d9      	lsls	r1, r3, #27
 8013706:	d405      	bmi.n	8013714 <__srefill_r+0x54>
 8013708:	2309      	movs	r3, #9
 801370a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801370e:	602b      	str	r3, [r5, #0]
 8013710:	81a2      	strh	r2, [r4, #12]
 8013712:	e7e8      	b.n	80136e6 <__srefill_r+0x26>
 8013714:	071a      	lsls	r2, r3, #28
 8013716:	d50b      	bpl.n	8013730 <__srefill_r+0x70>
 8013718:	4621      	mov	r1, r4
 801371a:	4628      	mov	r0, r5
 801371c:	f7fe f924 	bl	8011968 <_fflush_r>
 8013720:	2800      	cmp	r0, #0
 8013722:	d1e0      	bne.n	80136e6 <__srefill_r+0x26>
 8013724:	89a3      	ldrh	r3, [r4, #12]
 8013726:	60a0      	str	r0, [r4, #8]
 8013728:	f023 0308 	bic.w	r3, r3, #8
 801372c:	81a3      	strh	r3, [r4, #12]
 801372e:	61a0      	str	r0, [r4, #24]
 8013730:	89a3      	ldrh	r3, [r4, #12]
 8013732:	f043 0304 	orr.w	r3, r3, #4
 8013736:	81a3      	strh	r3, [r4, #12]
 8013738:	6923      	ldr	r3, [r4, #16]
 801373a:	b91b      	cbnz	r3, 8013744 <__srefill_r+0x84>
 801373c:	4621      	mov	r1, r4
 801373e:	4628      	mov	r0, r5
 8013740:	f7fe fa7c 	bl	8011c3c <__smakebuf_r>
 8013744:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8013748:	b2be      	uxth	r6, r7
 801374a:	07b3      	lsls	r3, r6, #30
 801374c:	d00f      	beq.n	801376e <__srefill_r+0xae>
 801374e:	2301      	movs	r3, #1
 8013750:	81a3      	strh	r3, [r4, #12]
 8013752:	4b1f      	ldr	r3, [pc, #124]	; (80137d0 <__srefill_r+0x110>)
 8013754:	491f      	ldr	r1, [pc, #124]	; (80137d4 <__srefill_r+0x114>)
 8013756:	6818      	ldr	r0, [r3, #0]
 8013758:	f006 0609 	and.w	r6, r6, #9
 801375c:	f7fe f9ec 	bl	8011b38 <_fwalk>
 8013760:	2e09      	cmp	r6, #9
 8013762:	81a7      	strh	r7, [r4, #12]
 8013764:	d103      	bne.n	801376e <__srefill_r+0xae>
 8013766:	4621      	mov	r1, r4
 8013768:	4628      	mov	r0, r5
 801376a:	f7fe f877 	bl	801185c <__sflush_r>
 801376e:	6922      	ldr	r2, [r4, #16]
 8013770:	6022      	str	r2, [r4, #0]
 8013772:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013774:	6963      	ldr	r3, [r4, #20]
 8013776:	6a21      	ldr	r1, [r4, #32]
 8013778:	4628      	mov	r0, r5
 801377a:	47b0      	blx	r6
 801377c:	2800      	cmp	r0, #0
 801377e:	6060      	str	r0, [r4, #4]
 8013780:	dc1d      	bgt.n	80137be <__srefill_r+0xfe>
 8013782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013786:	bf17      	itett	ne
 8013788:	2200      	movne	r2, #0
 801378a:	f043 0320 	orreq.w	r3, r3, #32
 801378e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8013792:	6062      	strne	r2, [r4, #4]
 8013794:	81a3      	strh	r3, [r4, #12]
 8013796:	e7a6      	b.n	80136e6 <__srefill_r+0x26>
 8013798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801379a:	2900      	cmp	r1, #0
 801379c:	d0cc      	beq.n	8013738 <__srefill_r+0x78>
 801379e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137a2:	4299      	cmp	r1, r3
 80137a4:	d002      	beq.n	80137ac <__srefill_r+0xec>
 80137a6:	4628      	mov	r0, r5
 80137a8:	f7fe fa9c 	bl	8011ce4 <_free_r>
 80137ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80137ae:	6063      	str	r3, [r4, #4]
 80137b0:	2000      	movs	r0, #0
 80137b2:	6360      	str	r0, [r4, #52]	; 0x34
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d0bf      	beq.n	8013738 <__srefill_r+0x78>
 80137b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80137ba:	6023      	str	r3, [r4, #0]
 80137bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137be:	2000      	movs	r0, #0
 80137c0:	e7fc      	b.n	80137bc <__srefill_r+0xfc>
 80137c2:	bf00      	nop
 80137c4:	08016ffc 	.word	0x08016ffc
 80137c8:	0801701c 	.word	0x0801701c
 80137cc:	08016fdc 	.word	0x08016fdc
 80137d0:	0801703c 	.word	0x0801703c
 80137d4:	080136af 	.word	0x080136af

080137d8 <_sbrk_r>:
 80137d8:	b538      	push	{r3, r4, r5, lr}
 80137da:	4c06      	ldr	r4, [pc, #24]	; (80137f4 <_sbrk_r+0x1c>)
 80137dc:	2300      	movs	r3, #0
 80137de:	4605      	mov	r5, r0
 80137e0:	4608      	mov	r0, r1
 80137e2:	6023      	str	r3, [r4, #0]
 80137e4:	f7fa f9fc 	bl	800dbe0 <_sbrk>
 80137e8:	1c43      	adds	r3, r0, #1
 80137ea:	d102      	bne.n	80137f2 <_sbrk_r+0x1a>
 80137ec:	6823      	ldr	r3, [r4, #0]
 80137ee:	b103      	cbz	r3, 80137f2 <_sbrk_r+0x1a>
 80137f0:	602b      	str	r3, [r5, #0]
 80137f2:	bd38      	pop	{r3, r4, r5, pc}
 80137f4:	20002044 	.word	0x20002044

080137f8 <iscanf>:
 80137f8:	b40f      	push	{r0, r1, r2, r3}
 80137fa:	4b0a      	ldr	r3, [pc, #40]	; (8013824 <iscanf+0x2c>)
 80137fc:	b513      	push	{r0, r1, r4, lr}
 80137fe:	681c      	ldr	r4, [r3, #0]
 8013800:	b124      	cbz	r4, 801380c <iscanf+0x14>
 8013802:	69a3      	ldr	r3, [r4, #24]
 8013804:	b913      	cbnz	r3, 801380c <iscanf+0x14>
 8013806:	4620      	mov	r0, r4
 8013808:	f7fe f92a 	bl	8011a60 <__sinit>
 801380c:	ab05      	add	r3, sp, #20
 801380e:	9a04      	ldr	r2, [sp, #16]
 8013810:	6861      	ldr	r1, [r4, #4]
 8013812:	9301      	str	r3, [sp, #4]
 8013814:	4620      	mov	r0, r4
 8013816:	f7ff f9f9 	bl	8012c0c <_vfiscanf_r>
 801381a:	b002      	add	sp, #8
 801381c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013820:	b004      	add	sp, #16
 8013822:	4770      	bx	lr
 8013824:	20000018 	.word	0x20000018

08013828 <__sccl>:
 8013828:	b570      	push	{r4, r5, r6, lr}
 801382a:	780b      	ldrb	r3, [r1, #0]
 801382c:	2b5e      	cmp	r3, #94	; 0x5e
 801382e:	bf13      	iteet	ne
 8013830:	1c4a      	addne	r2, r1, #1
 8013832:	1c8a      	addeq	r2, r1, #2
 8013834:	784b      	ldrbeq	r3, [r1, #1]
 8013836:	2100      	movne	r1, #0
 8013838:	bf08      	it	eq
 801383a:	2101      	moveq	r1, #1
 801383c:	1e44      	subs	r4, r0, #1
 801383e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8013842:	f804 1f01 	strb.w	r1, [r4, #1]!
 8013846:	42ac      	cmp	r4, r5
 8013848:	d1fb      	bne.n	8013842 <__sccl+0x1a>
 801384a:	b913      	cbnz	r3, 8013852 <__sccl+0x2a>
 801384c:	3a01      	subs	r2, #1
 801384e:	4610      	mov	r0, r2
 8013850:	bd70      	pop	{r4, r5, r6, pc}
 8013852:	f081 0401 	eor.w	r4, r1, #1
 8013856:	54c4      	strb	r4, [r0, r3]
 8013858:	1c51      	adds	r1, r2, #1
 801385a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801385e:	2d2d      	cmp	r5, #45	; 0x2d
 8013860:	f101 36ff 	add.w	r6, r1, #4294967295
 8013864:	460a      	mov	r2, r1
 8013866:	d006      	beq.n	8013876 <__sccl+0x4e>
 8013868:	2d5d      	cmp	r5, #93	; 0x5d
 801386a:	d0f0      	beq.n	801384e <__sccl+0x26>
 801386c:	b90d      	cbnz	r5, 8013872 <__sccl+0x4a>
 801386e:	4632      	mov	r2, r6
 8013870:	e7ed      	b.n	801384e <__sccl+0x26>
 8013872:	462b      	mov	r3, r5
 8013874:	e7ef      	b.n	8013856 <__sccl+0x2e>
 8013876:	780e      	ldrb	r6, [r1, #0]
 8013878:	2e5d      	cmp	r6, #93	; 0x5d
 801387a:	d0fa      	beq.n	8013872 <__sccl+0x4a>
 801387c:	42b3      	cmp	r3, r6
 801387e:	dcf8      	bgt.n	8013872 <__sccl+0x4a>
 8013880:	3301      	adds	r3, #1
 8013882:	429e      	cmp	r6, r3
 8013884:	54c4      	strb	r4, [r0, r3]
 8013886:	dcfb      	bgt.n	8013880 <__sccl+0x58>
 8013888:	3102      	adds	r1, #2
 801388a:	e7e6      	b.n	801385a <__sccl+0x32>

0801388c <setbuf>:
 801388c:	2900      	cmp	r1, #0
 801388e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013892:	bf0c      	ite	eq
 8013894:	2202      	moveq	r2, #2
 8013896:	2200      	movne	r2, #0
 8013898:	f000 b800 	b.w	801389c <setvbuf>

0801389c <setvbuf>:
 801389c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80138a0:	461d      	mov	r5, r3
 80138a2:	4b51      	ldr	r3, [pc, #324]	; (80139e8 <setvbuf+0x14c>)
 80138a4:	681e      	ldr	r6, [r3, #0]
 80138a6:	4604      	mov	r4, r0
 80138a8:	460f      	mov	r7, r1
 80138aa:	4690      	mov	r8, r2
 80138ac:	b126      	cbz	r6, 80138b8 <setvbuf+0x1c>
 80138ae:	69b3      	ldr	r3, [r6, #24]
 80138b0:	b913      	cbnz	r3, 80138b8 <setvbuf+0x1c>
 80138b2:	4630      	mov	r0, r6
 80138b4:	f7fe f8d4 	bl	8011a60 <__sinit>
 80138b8:	4b4c      	ldr	r3, [pc, #304]	; (80139ec <setvbuf+0x150>)
 80138ba:	429c      	cmp	r4, r3
 80138bc:	d152      	bne.n	8013964 <setvbuf+0xc8>
 80138be:	6874      	ldr	r4, [r6, #4]
 80138c0:	f1b8 0f02 	cmp.w	r8, #2
 80138c4:	d006      	beq.n	80138d4 <setvbuf+0x38>
 80138c6:	f1b8 0f01 	cmp.w	r8, #1
 80138ca:	f200 8089 	bhi.w	80139e0 <setvbuf+0x144>
 80138ce:	2d00      	cmp	r5, #0
 80138d0:	f2c0 8086 	blt.w	80139e0 <setvbuf+0x144>
 80138d4:	4621      	mov	r1, r4
 80138d6:	4630      	mov	r0, r6
 80138d8:	f7fe f846 	bl	8011968 <_fflush_r>
 80138dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138de:	b141      	cbz	r1, 80138f2 <setvbuf+0x56>
 80138e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138e4:	4299      	cmp	r1, r3
 80138e6:	d002      	beq.n	80138ee <setvbuf+0x52>
 80138e8:	4630      	mov	r0, r6
 80138ea:	f7fe f9fb 	bl	8011ce4 <_free_r>
 80138ee:	2300      	movs	r3, #0
 80138f0:	6363      	str	r3, [r4, #52]	; 0x34
 80138f2:	2300      	movs	r3, #0
 80138f4:	61a3      	str	r3, [r4, #24]
 80138f6:	6063      	str	r3, [r4, #4]
 80138f8:	89a3      	ldrh	r3, [r4, #12]
 80138fa:	061b      	lsls	r3, r3, #24
 80138fc:	d503      	bpl.n	8013906 <setvbuf+0x6a>
 80138fe:	6921      	ldr	r1, [r4, #16]
 8013900:	4630      	mov	r0, r6
 8013902:	f7fe f9ef 	bl	8011ce4 <_free_r>
 8013906:	89a3      	ldrh	r3, [r4, #12]
 8013908:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801390c:	f023 0303 	bic.w	r3, r3, #3
 8013910:	f1b8 0f02 	cmp.w	r8, #2
 8013914:	81a3      	strh	r3, [r4, #12]
 8013916:	d05d      	beq.n	80139d4 <setvbuf+0x138>
 8013918:	ab01      	add	r3, sp, #4
 801391a:	466a      	mov	r2, sp
 801391c:	4621      	mov	r1, r4
 801391e:	4630      	mov	r0, r6
 8013920:	f7fe f968 	bl	8011bf4 <__swhatbuf_r>
 8013924:	89a3      	ldrh	r3, [r4, #12]
 8013926:	4318      	orrs	r0, r3
 8013928:	81a0      	strh	r0, [r4, #12]
 801392a:	bb2d      	cbnz	r5, 8013978 <setvbuf+0xdc>
 801392c:	9d00      	ldr	r5, [sp, #0]
 801392e:	4628      	mov	r0, r5
 8013930:	f002 fb56 	bl	8015fe0 <malloc>
 8013934:	4607      	mov	r7, r0
 8013936:	2800      	cmp	r0, #0
 8013938:	d14e      	bne.n	80139d8 <setvbuf+0x13c>
 801393a:	f8dd 9000 	ldr.w	r9, [sp]
 801393e:	45a9      	cmp	r9, r5
 8013940:	d13c      	bne.n	80139bc <setvbuf+0x120>
 8013942:	f04f 30ff 	mov.w	r0, #4294967295
 8013946:	89a3      	ldrh	r3, [r4, #12]
 8013948:	f043 0302 	orr.w	r3, r3, #2
 801394c:	81a3      	strh	r3, [r4, #12]
 801394e:	2300      	movs	r3, #0
 8013950:	60a3      	str	r3, [r4, #8]
 8013952:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013956:	6023      	str	r3, [r4, #0]
 8013958:	6123      	str	r3, [r4, #16]
 801395a:	2301      	movs	r3, #1
 801395c:	6163      	str	r3, [r4, #20]
 801395e:	b003      	add	sp, #12
 8013960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013964:	4b22      	ldr	r3, [pc, #136]	; (80139f0 <setvbuf+0x154>)
 8013966:	429c      	cmp	r4, r3
 8013968:	d101      	bne.n	801396e <setvbuf+0xd2>
 801396a:	68b4      	ldr	r4, [r6, #8]
 801396c:	e7a8      	b.n	80138c0 <setvbuf+0x24>
 801396e:	4b21      	ldr	r3, [pc, #132]	; (80139f4 <setvbuf+0x158>)
 8013970:	429c      	cmp	r4, r3
 8013972:	bf08      	it	eq
 8013974:	68f4      	ldreq	r4, [r6, #12]
 8013976:	e7a3      	b.n	80138c0 <setvbuf+0x24>
 8013978:	2f00      	cmp	r7, #0
 801397a:	d0d8      	beq.n	801392e <setvbuf+0x92>
 801397c:	69b3      	ldr	r3, [r6, #24]
 801397e:	b913      	cbnz	r3, 8013986 <setvbuf+0xea>
 8013980:	4630      	mov	r0, r6
 8013982:	f7fe f86d 	bl	8011a60 <__sinit>
 8013986:	f1b8 0f01 	cmp.w	r8, #1
 801398a:	bf08      	it	eq
 801398c:	89a3      	ldrheq	r3, [r4, #12]
 801398e:	6027      	str	r7, [r4, #0]
 8013990:	bf04      	itt	eq
 8013992:	f043 0301 	orreq.w	r3, r3, #1
 8013996:	81a3      	strheq	r3, [r4, #12]
 8013998:	89a3      	ldrh	r3, [r4, #12]
 801399a:	f013 0008 	ands.w	r0, r3, #8
 801399e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80139a2:	d01b      	beq.n	80139dc <setvbuf+0x140>
 80139a4:	f013 0001 	ands.w	r0, r3, #1
 80139a8:	bf18      	it	ne
 80139aa:	426d      	negne	r5, r5
 80139ac:	f04f 0300 	mov.w	r3, #0
 80139b0:	bf1d      	ittte	ne
 80139b2:	60a3      	strne	r3, [r4, #8]
 80139b4:	61a5      	strne	r5, [r4, #24]
 80139b6:	4618      	movne	r0, r3
 80139b8:	60a5      	streq	r5, [r4, #8]
 80139ba:	e7d0      	b.n	801395e <setvbuf+0xc2>
 80139bc:	4648      	mov	r0, r9
 80139be:	f002 fb0f 	bl	8015fe0 <malloc>
 80139c2:	4607      	mov	r7, r0
 80139c4:	2800      	cmp	r0, #0
 80139c6:	d0bc      	beq.n	8013942 <setvbuf+0xa6>
 80139c8:	89a3      	ldrh	r3, [r4, #12]
 80139ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139ce:	81a3      	strh	r3, [r4, #12]
 80139d0:	464d      	mov	r5, r9
 80139d2:	e7d3      	b.n	801397c <setvbuf+0xe0>
 80139d4:	2000      	movs	r0, #0
 80139d6:	e7b6      	b.n	8013946 <setvbuf+0xaa>
 80139d8:	46a9      	mov	r9, r5
 80139da:	e7f5      	b.n	80139c8 <setvbuf+0x12c>
 80139dc:	60a0      	str	r0, [r4, #8]
 80139de:	e7be      	b.n	801395e <setvbuf+0xc2>
 80139e0:	f04f 30ff 	mov.w	r0, #4294967295
 80139e4:	e7bb      	b.n	801395e <setvbuf+0xc2>
 80139e6:	bf00      	nop
 80139e8:	20000018 	.word	0x20000018
 80139ec:	08016ffc 	.word	0x08016ffc
 80139f0:	0801701c 	.word	0x0801701c
 80139f4:	08016fdc 	.word	0x08016fdc

080139f8 <nanf>:
 80139f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013a00 <nanf+0x8>
 80139fc:	4770      	bx	lr
 80139fe:	bf00      	nop
 8013a00:	7fc00000 	.word	0x7fc00000

08013a04 <siprintf>:
 8013a04:	b40e      	push	{r1, r2, r3}
 8013a06:	b500      	push	{lr}
 8013a08:	b09c      	sub	sp, #112	; 0x70
 8013a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8013a0c:	9002      	str	r0, [sp, #8]
 8013a0e:	9006      	str	r0, [sp, #24]
 8013a10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a14:	4809      	ldr	r0, [pc, #36]	; (8013a3c <siprintf+0x38>)
 8013a16:	9107      	str	r1, [sp, #28]
 8013a18:	9104      	str	r1, [sp, #16]
 8013a1a:	4909      	ldr	r1, [pc, #36]	; (8013a40 <siprintf+0x3c>)
 8013a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a20:	9105      	str	r1, [sp, #20]
 8013a22:	6800      	ldr	r0, [r0, #0]
 8013a24:	9301      	str	r3, [sp, #4]
 8013a26:	a902      	add	r1, sp, #8
 8013a28:	f002 ff9c 	bl	8016964 <_svfiprintf_r>
 8013a2c:	9b02      	ldr	r3, [sp, #8]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	701a      	strb	r2, [r3, #0]
 8013a32:	b01c      	add	sp, #112	; 0x70
 8013a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a38:	b003      	add	sp, #12
 8013a3a:	4770      	bx	lr
 8013a3c:	20000018 	.word	0x20000018
 8013a40:	ffff0208 	.word	0xffff0208

08013a44 <__sread>:
 8013a44:	b510      	push	{r4, lr}
 8013a46:	460c      	mov	r4, r1
 8013a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a4c:	f003 f8b8 	bl	8016bc0 <_read_r>
 8013a50:	2800      	cmp	r0, #0
 8013a52:	bfab      	itete	ge
 8013a54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a56:	89a3      	ldrhlt	r3, [r4, #12]
 8013a58:	181b      	addge	r3, r3, r0
 8013a5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a5e:	bfac      	ite	ge
 8013a60:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a62:	81a3      	strhlt	r3, [r4, #12]
 8013a64:	bd10      	pop	{r4, pc}

08013a66 <__swrite>:
 8013a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a6a:	461f      	mov	r7, r3
 8013a6c:	898b      	ldrh	r3, [r1, #12]
 8013a6e:	05db      	lsls	r3, r3, #23
 8013a70:	4605      	mov	r5, r0
 8013a72:	460c      	mov	r4, r1
 8013a74:	4616      	mov	r6, r2
 8013a76:	d505      	bpl.n	8013a84 <__swrite+0x1e>
 8013a78:	2302      	movs	r3, #2
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a80:	f002 fa9c 	bl	8015fbc <_lseek_r>
 8013a84:	89a3      	ldrh	r3, [r4, #12]
 8013a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a8e:	81a3      	strh	r3, [r4, #12]
 8013a90:	4632      	mov	r2, r6
 8013a92:	463b      	mov	r3, r7
 8013a94:	4628      	mov	r0, r5
 8013a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a9a:	f001 b851 	b.w	8014b40 <_write_r>

08013a9e <__sseek>:
 8013a9e:	b510      	push	{r4, lr}
 8013aa0:	460c      	mov	r4, r1
 8013aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aa6:	f002 fa89 	bl	8015fbc <_lseek_r>
 8013aaa:	1c43      	adds	r3, r0, #1
 8013aac:	89a3      	ldrh	r3, [r4, #12]
 8013aae:	bf15      	itete	ne
 8013ab0:	6560      	strne	r0, [r4, #84]	; 0x54
 8013ab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013ab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013aba:	81a3      	strheq	r3, [r4, #12]
 8013abc:	bf18      	it	ne
 8013abe:	81a3      	strhne	r3, [r4, #12]
 8013ac0:	bd10      	pop	{r4, pc}

08013ac2 <__sclose>:
 8013ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ac6:	f001 b8bb 	b.w	8014c40 <_close_r>

08013aca <sulp>:
 8013aca:	b570      	push	{r4, r5, r6, lr}
 8013acc:	4604      	mov	r4, r0
 8013ace:	460d      	mov	r5, r1
 8013ad0:	ec45 4b10 	vmov	d0, r4, r5
 8013ad4:	4616      	mov	r6, r2
 8013ad6:	f002 fd83 	bl	80165e0 <__ulp>
 8013ada:	ec51 0b10 	vmov	r0, r1, d0
 8013ade:	b17e      	cbz	r6, 8013b00 <sulp+0x36>
 8013ae0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013ae4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	dd09      	ble.n	8013b00 <sulp+0x36>
 8013aec:	051b      	lsls	r3, r3, #20
 8013aee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013af2:	2400      	movs	r4, #0
 8013af4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013af8:	4622      	mov	r2, r4
 8013afa:	462b      	mov	r3, r5
 8013afc:	f7f4 fcb4 	bl	8008468 <__aeabi_dmul>
 8013b00:	bd70      	pop	{r4, r5, r6, pc}
 8013b02:	0000      	movs	r0, r0
 8013b04:	0000      	movs	r0, r0
	...

08013b08 <_strtod_l>:
 8013b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b0c:	461f      	mov	r7, r3
 8013b0e:	b0a1      	sub	sp, #132	; 0x84
 8013b10:	2300      	movs	r3, #0
 8013b12:	4681      	mov	r9, r0
 8013b14:	4638      	mov	r0, r7
 8013b16:	460e      	mov	r6, r1
 8013b18:	9217      	str	r2, [sp, #92]	; 0x5c
 8013b1a:	931c      	str	r3, [sp, #112]	; 0x70
 8013b1c:	f002 fa3e 	bl	8015f9c <__localeconv_l>
 8013b20:	4680      	mov	r8, r0
 8013b22:	6800      	ldr	r0, [r0, #0]
 8013b24:	f7f4 fa8c 	bl	8008040 <strlen>
 8013b28:	f04f 0a00 	mov.w	sl, #0
 8013b2c:	4604      	mov	r4, r0
 8013b2e:	f04f 0b00 	mov.w	fp, #0
 8013b32:	961b      	str	r6, [sp, #108]	; 0x6c
 8013b34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b36:	781a      	ldrb	r2, [r3, #0]
 8013b38:	2a0d      	cmp	r2, #13
 8013b3a:	d832      	bhi.n	8013ba2 <_strtod_l+0x9a>
 8013b3c:	2a09      	cmp	r2, #9
 8013b3e:	d236      	bcs.n	8013bae <_strtod_l+0xa6>
 8013b40:	2a00      	cmp	r2, #0
 8013b42:	d03e      	beq.n	8013bc2 <_strtod_l+0xba>
 8013b44:	2300      	movs	r3, #0
 8013b46:	930d      	str	r3, [sp, #52]	; 0x34
 8013b48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013b4a:	782b      	ldrb	r3, [r5, #0]
 8013b4c:	2b30      	cmp	r3, #48	; 0x30
 8013b4e:	f040 80ac 	bne.w	8013caa <_strtod_l+0x1a2>
 8013b52:	786b      	ldrb	r3, [r5, #1]
 8013b54:	2b58      	cmp	r3, #88	; 0x58
 8013b56:	d001      	beq.n	8013b5c <_strtod_l+0x54>
 8013b58:	2b78      	cmp	r3, #120	; 0x78
 8013b5a:	d167      	bne.n	8013c2c <_strtod_l+0x124>
 8013b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b5e:	9301      	str	r3, [sp, #4]
 8013b60:	ab1c      	add	r3, sp, #112	; 0x70
 8013b62:	9300      	str	r3, [sp, #0]
 8013b64:	9702      	str	r7, [sp, #8]
 8013b66:	ab1d      	add	r3, sp, #116	; 0x74
 8013b68:	4a88      	ldr	r2, [pc, #544]	; (8013d8c <_strtod_l+0x284>)
 8013b6a:	a91b      	add	r1, sp, #108	; 0x6c
 8013b6c:	4648      	mov	r0, r9
 8013b6e:	f001 ff1c 	bl	80159aa <__gethex>
 8013b72:	f010 0407 	ands.w	r4, r0, #7
 8013b76:	4606      	mov	r6, r0
 8013b78:	d005      	beq.n	8013b86 <_strtod_l+0x7e>
 8013b7a:	2c06      	cmp	r4, #6
 8013b7c:	d12b      	bne.n	8013bd6 <_strtod_l+0xce>
 8013b7e:	3501      	adds	r5, #1
 8013b80:	2300      	movs	r3, #0
 8013b82:	951b      	str	r5, [sp, #108]	; 0x6c
 8013b84:	930d      	str	r3, [sp, #52]	; 0x34
 8013b86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	f040 859a 	bne.w	80146c2 <_strtod_l+0xbba>
 8013b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b90:	b1e3      	cbz	r3, 8013bcc <_strtod_l+0xc4>
 8013b92:	4652      	mov	r2, sl
 8013b94:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013b98:	ec43 2b10 	vmov	d0, r2, r3
 8013b9c:	b021      	add	sp, #132	; 0x84
 8013b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba2:	2a2b      	cmp	r2, #43	; 0x2b
 8013ba4:	d015      	beq.n	8013bd2 <_strtod_l+0xca>
 8013ba6:	2a2d      	cmp	r2, #45	; 0x2d
 8013ba8:	d004      	beq.n	8013bb4 <_strtod_l+0xac>
 8013baa:	2a20      	cmp	r2, #32
 8013bac:	d1ca      	bne.n	8013b44 <_strtod_l+0x3c>
 8013bae:	3301      	adds	r3, #1
 8013bb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8013bb2:	e7bf      	b.n	8013b34 <_strtod_l+0x2c>
 8013bb4:	2201      	movs	r2, #1
 8013bb6:	920d      	str	r2, [sp, #52]	; 0x34
 8013bb8:	1c5a      	adds	r2, r3, #1
 8013bba:	921b      	str	r2, [sp, #108]	; 0x6c
 8013bbc:	785b      	ldrb	r3, [r3, #1]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d1c2      	bne.n	8013b48 <_strtod_l+0x40>
 8013bc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013bc4:	961b      	str	r6, [sp, #108]	; 0x6c
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	f040 8579 	bne.w	80146be <_strtod_l+0xbb6>
 8013bcc:	4652      	mov	r2, sl
 8013bce:	465b      	mov	r3, fp
 8013bd0:	e7e2      	b.n	8013b98 <_strtod_l+0x90>
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	e7ef      	b.n	8013bb6 <_strtod_l+0xae>
 8013bd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013bd8:	b13a      	cbz	r2, 8013bea <_strtod_l+0xe2>
 8013bda:	2135      	movs	r1, #53	; 0x35
 8013bdc:	a81e      	add	r0, sp, #120	; 0x78
 8013bde:	f002 fdf7 	bl	80167d0 <__copybits>
 8013be2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013be4:	4648      	mov	r0, r9
 8013be6:	f002 fa64 	bl	80160b2 <_Bfree>
 8013bea:	3c01      	subs	r4, #1
 8013bec:	2c04      	cmp	r4, #4
 8013bee:	d806      	bhi.n	8013bfe <_strtod_l+0xf6>
 8013bf0:	e8df f004 	tbb	[pc, r4]
 8013bf4:	1714030a 	.word	0x1714030a
 8013bf8:	0a          	.byte	0x0a
 8013bf9:	00          	.byte	0x00
 8013bfa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013bfe:	0730      	lsls	r0, r6, #28
 8013c00:	d5c1      	bpl.n	8013b86 <_strtod_l+0x7e>
 8013c02:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013c06:	e7be      	b.n	8013b86 <_strtod_l+0x7e>
 8013c08:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013c0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013c0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013c12:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013c16:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013c1a:	e7f0      	b.n	8013bfe <_strtod_l+0xf6>
 8013c1c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013d90 <_strtod_l+0x288>
 8013c20:	e7ed      	b.n	8013bfe <_strtod_l+0xf6>
 8013c22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013c26:	f04f 3aff 	mov.w	sl, #4294967295
 8013c2a:	e7e8      	b.n	8013bfe <_strtod_l+0xf6>
 8013c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c2e:	1c5a      	adds	r2, r3, #1
 8013c30:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c32:	785b      	ldrb	r3, [r3, #1]
 8013c34:	2b30      	cmp	r3, #48	; 0x30
 8013c36:	d0f9      	beq.n	8013c2c <_strtod_l+0x124>
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d0a4      	beq.n	8013b86 <_strtod_l+0x7e>
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	2500      	movs	r5, #0
 8013c40:	9306      	str	r3, [sp, #24]
 8013c42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c44:	9308      	str	r3, [sp, #32]
 8013c46:	9507      	str	r5, [sp, #28]
 8013c48:	9505      	str	r5, [sp, #20]
 8013c4a:	220a      	movs	r2, #10
 8013c4c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013c4e:	7807      	ldrb	r7, [r0, #0]
 8013c50:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013c54:	b2d9      	uxtb	r1, r3
 8013c56:	2909      	cmp	r1, #9
 8013c58:	d929      	bls.n	8013cae <_strtod_l+0x1a6>
 8013c5a:	4622      	mov	r2, r4
 8013c5c:	f8d8 1000 	ldr.w	r1, [r8]
 8013c60:	f002 ffc0 	bl	8016be4 <strncmp>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	d031      	beq.n	8013ccc <_strtod_l+0x1c4>
 8013c68:	2000      	movs	r0, #0
 8013c6a:	9c05      	ldr	r4, [sp, #20]
 8013c6c:	9004      	str	r0, [sp, #16]
 8013c6e:	463b      	mov	r3, r7
 8013c70:	4602      	mov	r2, r0
 8013c72:	2b65      	cmp	r3, #101	; 0x65
 8013c74:	d001      	beq.n	8013c7a <_strtod_l+0x172>
 8013c76:	2b45      	cmp	r3, #69	; 0x45
 8013c78:	d114      	bne.n	8013ca4 <_strtod_l+0x19c>
 8013c7a:	b924      	cbnz	r4, 8013c86 <_strtod_l+0x17e>
 8013c7c:	b910      	cbnz	r0, 8013c84 <_strtod_l+0x17c>
 8013c7e:	9b06      	ldr	r3, [sp, #24]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d09e      	beq.n	8013bc2 <_strtod_l+0xba>
 8013c84:	2400      	movs	r4, #0
 8013c86:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013c88:	1c73      	adds	r3, r6, #1
 8013c8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c8c:	7873      	ldrb	r3, [r6, #1]
 8013c8e:	2b2b      	cmp	r3, #43	; 0x2b
 8013c90:	d078      	beq.n	8013d84 <_strtod_l+0x27c>
 8013c92:	2b2d      	cmp	r3, #45	; 0x2d
 8013c94:	d070      	beq.n	8013d78 <_strtod_l+0x270>
 8013c96:	f04f 0c00 	mov.w	ip, #0
 8013c9a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013c9e:	2f09      	cmp	r7, #9
 8013ca0:	d97c      	bls.n	8013d9c <_strtod_l+0x294>
 8013ca2:	961b      	str	r6, [sp, #108]	; 0x6c
 8013ca4:	f04f 0e00 	mov.w	lr, #0
 8013ca8:	e09a      	b.n	8013de0 <_strtod_l+0x2d8>
 8013caa:	2300      	movs	r3, #0
 8013cac:	e7c7      	b.n	8013c3e <_strtod_l+0x136>
 8013cae:	9905      	ldr	r1, [sp, #20]
 8013cb0:	2908      	cmp	r1, #8
 8013cb2:	bfdd      	ittte	le
 8013cb4:	9907      	ldrle	r1, [sp, #28]
 8013cb6:	fb02 3301 	mlale	r3, r2, r1, r3
 8013cba:	9307      	strle	r3, [sp, #28]
 8013cbc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013cc0:	9b05      	ldr	r3, [sp, #20]
 8013cc2:	3001      	adds	r0, #1
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	9305      	str	r3, [sp, #20]
 8013cc8:	901b      	str	r0, [sp, #108]	; 0x6c
 8013cca:	e7bf      	b.n	8013c4c <_strtod_l+0x144>
 8013ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cce:	191a      	adds	r2, r3, r4
 8013cd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8013cd2:	9a05      	ldr	r2, [sp, #20]
 8013cd4:	5d1b      	ldrb	r3, [r3, r4]
 8013cd6:	2a00      	cmp	r2, #0
 8013cd8:	d037      	beq.n	8013d4a <_strtod_l+0x242>
 8013cda:	9c05      	ldr	r4, [sp, #20]
 8013cdc:	4602      	mov	r2, r0
 8013cde:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013ce2:	2909      	cmp	r1, #9
 8013ce4:	d913      	bls.n	8013d0e <_strtod_l+0x206>
 8013ce6:	2101      	movs	r1, #1
 8013ce8:	9104      	str	r1, [sp, #16]
 8013cea:	e7c2      	b.n	8013c72 <_strtod_l+0x16a>
 8013cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cee:	1c5a      	adds	r2, r3, #1
 8013cf0:	921b      	str	r2, [sp, #108]	; 0x6c
 8013cf2:	785b      	ldrb	r3, [r3, #1]
 8013cf4:	3001      	adds	r0, #1
 8013cf6:	2b30      	cmp	r3, #48	; 0x30
 8013cf8:	d0f8      	beq.n	8013cec <_strtod_l+0x1e4>
 8013cfa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013cfe:	2a08      	cmp	r2, #8
 8013d00:	f200 84e4 	bhi.w	80146cc <_strtod_l+0xbc4>
 8013d04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013d06:	9208      	str	r2, [sp, #32]
 8013d08:	4602      	mov	r2, r0
 8013d0a:	2000      	movs	r0, #0
 8013d0c:	4604      	mov	r4, r0
 8013d0e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013d12:	f100 0101 	add.w	r1, r0, #1
 8013d16:	d012      	beq.n	8013d3e <_strtod_l+0x236>
 8013d18:	440a      	add	r2, r1
 8013d1a:	eb00 0c04 	add.w	ip, r0, r4
 8013d1e:	4621      	mov	r1, r4
 8013d20:	270a      	movs	r7, #10
 8013d22:	458c      	cmp	ip, r1
 8013d24:	d113      	bne.n	8013d4e <_strtod_l+0x246>
 8013d26:	1821      	adds	r1, r4, r0
 8013d28:	2908      	cmp	r1, #8
 8013d2a:	f104 0401 	add.w	r4, r4, #1
 8013d2e:	4404      	add	r4, r0
 8013d30:	dc19      	bgt.n	8013d66 <_strtod_l+0x25e>
 8013d32:	9b07      	ldr	r3, [sp, #28]
 8013d34:	210a      	movs	r1, #10
 8013d36:	fb01 e303 	mla	r3, r1, r3, lr
 8013d3a:	9307      	str	r3, [sp, #28]
 8013d3c:	2100      	movs	r1, #0
 8013d3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d40:	1c58      	adds	r0, r3, #1
 8013d42:	901b      	str	r0, [sp, #108]	; 0x6c
 8013d44:	785b      	ldrb	r3, [r3, #1]
 8013d46:	4608      	mov	r0, r1
 8013d48:	e7c9      	b.n	8013cde <_strtod_l+0x1d6>
 8013d4a:	9805      	ldr	r0, [sp, #20]
 8013d4c:	e7d3      	b.n	8013cf6 <_strtod_l+0x1ee>
 8013d4e:	2908      	cmp	r1, #8
 8013d50:	f101 0101 	add.w	r1, r1, #1
 8013d54:	dc03      	bgt.n	8013d5e <_strtod_l+0x256>
 8013d56:	9b07      	ldr	r3, [sp, #28]
 8013d58:	437b      	muls	r3, r7
 8013d5a:	9307      	str	r3, [sp, #28]
 8013d5c:	e7e1      	b.n	8013d22 <_strtod_l+0x21a>
 8013d5e:	2910      	cmp	r1, #16
 8013d60:	bfd8      	it	le
 8013d62:	437d      	mulle	r5, r7
 8013d64:	e7dd      	b.n	8013d22 <_strtod_l+0x21a>
 8013d66:	2c10      	cmp	r4, #16
 8013d68:	bfdc      	itt	le
 8013d6a:	210a      	movle	r1, #10
 8013d6c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013d70:	e7e4      	b.n	8013d3c <_strtod_l+0x234>
 8013d72:	2301      	movs	r3, #1
 8013d74:	9304      	str	r3, [sp, #16]
 8013d76:	e781      	b.n	8013c7c <_strtod_l+0x174>
 8013d78:	f04f 0c01 	mov.w	ip, #1
 8013d7c:	1cb3      	adds	r3, r6, #2
 8013d7e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d80:	78b3      	ldrb	r3, [r6, #2]
 8013d82:	e78a      	b.n	8013c9a <_strtod_l+0x192>
 8013d84:	f04f 0c00 	mov.w	ip, #0
 8013d88:	e7f8      	b.n	8013d7c <_strtod_l+0x274>
 8013d8a:	bf00      	nop
 8013d8c:	080170a4 	.word	0x080170a4
 8013d90:	7ff00000 	.word	0x7ff00000
 8013d94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d96:	1c5f      	adds	r7, r3, #1
 8013d98:	971b      	str	r7, [sp, #108]	; 0x6c
 8013d9a:	785b      	ldrb	r3, [r3, #1]
 8013d9c:	2b30      	cmp	r3, #48	; 0x30
 8013d9e:	d0f9      	beq.n	8013d94 <_strtod_l+0x28c>
 8013da0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013da4:	2f08      	cmp	r7, #8
 8013da6:	f63f af7d 	bhi.w	8013ca4 <_strtod_l+0x19c>
 8013daa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013db0:	930a      	str	r3, [sp, #40]	; 0x28
 8013db2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013db4:	1c5f      	adds	r7, r3, #1
 8013db6:	971b      	str	r7, [sp, #108]	; 0x6c
 8013db8:	785b      	ldrb	r3, [r3, #1]
 8013dba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013dbe:	f1b8 0f09 	cmp.w	r8, #9
 8013dc2:	d937      	bls.n	8013e34 <_strtod_l+0x32c>
 8013dc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013dc6:	1a7f      	subs	r7, r7, r1
 8013dc8:	2f08      	cmp	r7, #8
 8013dca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013dce:	dc37      	bgt.n	8013e40 <_strtod_l+0x338>
 8013dd0:	45be      	cmp	lr, r7
 8013dd2:	bfa8      	it	ge
 8013dd4:	46be      	movge	lr, r7
 8013dd6:	f1bc 0f00 	cmp.w	ip, #0
 8013dda:	d001      	beq.n	8013de0 <_strtod_l+0x2d8>
 8013ddc:	f1ce 0e00 	rsb	lr, lr, #0
 8013de0:	2c00      	cmp	r4, #0
 8013de2:	d151      	bne.n	8013e88 <_strtod_l+0x380>
 8013de4:	2800      	cmp	r0, #0
 8013de6:	f47f aece 	bne.w	8013b86 <_strtod_l+0x7e>
 8013dea:	9a06      	ldr	r2, [sp, #24]
 8013dec:	2a00      	cmp	r2, #0
 8013dee:	f47f aeca 	bne.w	8013b86 <_strtod_l+0x7e>
 8013df2:	9a04      	ldr	r2, [sp, #16]
 8013df4:	2a00      	cmp	r2, #0
 8013df6:	f47f aee4 	bne.w	8013bc2 <_strtod_l+0xba>
 8013dfa:	2b4e      	cmp	r3, #78	; 0x4e
 8013dfc:	d027      	beq.n	8013e4e <_strtod_l+0x346>
 8013dfe:	dc21      	bgt.n	8013e44 <_strtod_l+0x33c>
 8013e00:	2b49      	cmp	r3, #73	; 0x49
 8013e02:	f47f aede 	bne.w	8013bc2 <_strtod_l+0xba>
 8013e06:	49a0      	ldr	r1, [pc, #640]	; (8014088 <_strtod_l+0x580>)
 8013e08:	a81b      	add	r0, sp, #108	; 0x6c
 8013e0a:	f002 f801 	bl	8015e10 <__match>
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	f43f aed7 	beq.w	8013bc2 <_strtod_l+0xba>
 8013e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e16:	499d      	ldr	r1, [pc, #628]	; (801408c <_strtod_l+0x584>)
 8013e18:	3b01      	subs	r3, #1
 8013e1a:	a81b      	add	r0, sp, #108	; 0x6c
 8013e1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e1e:	f001 fff7 	bl	8015e10 <__match>
 8013e22:	b910      	cbnz	r0, 8013e2a <_strtod_l+0x322>
 8013e24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e26:	3301      	adds	r3, #1
 8013e28:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e2a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80140a0 <_strtod_l+0x598>
 8013e2e:	f04f 0a00 	mov.w	sl, #0
 8013e32:	e6a8      	b.n	8013b86 <_strtod_l+0x7e>
 8013e34:	210a      	movs	r1, #10
 8013e36:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013e3a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013e3e:	e7b8      	b.n	8013db2 <_strtod_l+0x2aa>
 8013e40:	46be      	mov	lr, r7
 8013e42:	e7c8      	b.n	8013dd6 <_strtod_l+0x2ce>
 8013e44:	2b69      	cmp	r3, #105	; 0x69
 8013e46:	d0de      	beq.n	8013e06 <_strtod_l+0x2fe>
 8013e48:	2b6e      	cmp	r3, #110	; 0x6e
 8013e4a:	f47f aeba 	bne.w	8013bc2 <_strtod_l+0xba>
 8013e4e:	4990      	ldr	r1, [pc, #576]	; (8014090 <_strtod_l+0x588>)
 8013e50:	a81b      	add	r0, sp, #108	; 0x6c
 8013e52:	f001 ffdd 	bl	8015e10 <__match>
 8013e56:	2800      	cmp	r0, #0
 8013e58:	f43f aeb3 	beq.w	8013bc2 <_strtod_l+0xba>
 8013e5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e5e:	781b      	ldrb	r3, [r3, #0]
 8013e60:	2b28      	cmp	r3, #40	; 0x28
 8013e62:	d10e      	bne.n	8013e82 <_strtod_l+0x37a>
 8013e64:	aa1e      	add	r2, sp, #120	; 0x78
 8013e66:	498b      	ldr	r1, [pc, #556]	; (8014094 <_strtod_l+0x58c>)
 8013e68:	a81b      	add	r0, sp, #108	; 0x6c
 8013e6a:	f001 ffe5 	bl	8015e38 <__hexnan>
 8013e6e:	2805      	cmp	r0, #5
 8013e70:	d107      	bne.n	8013e82 <_strtod_l+0x37a>
 8013e72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013e74:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013e78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013e7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013e80:	e681      	b.n	8013b86 <_strtod_l+0x7e>
 8013e82:	f8df b224 	ldr.w	fp, [pc, #548]	; 80140a8 <_strtod_l+0x5a0>
 8013e86:	e7d2      	b.n	8013e2e <_strtod_l+0x326>
 8013e88:	ebae 0302 	sub.w	r3, lr, r2
 8013e8c:	9306      	str	r3, [sp, #24]
 8013e8e:	9b05      	ldr	r3, [sp, #20]
 8013e90:	9807      	ldr	r0, [sp, #28]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	bf08      	it	eq
 8013e96:	4623      	moveq	r3, r4
 8013e98:	2c10      	cmp	r4, #16
 8013e9a:	9305      	str	r3, [sp, #20]
 8013e9c:	46a0      	mov	r8, r4
 8013e9e:	bfa8      	it	ge
 8013ea0:	f04f 0810 	movge.w	r8, #16
 8013ea4:	f7f4 fa66 	bl	8008374 <__aeabi_ui2d>
 8013ea8:	2c09      	cmp	r4, #9
 8013eaa:	4682      	mov	sl, r0
 8013eac:	468b      	mov	fp, r1
 8013eae:	dc13      	bgt.n	8013ed8 <_strtod_l+0x3d0>
 8013eb0:	9b06      	ldr	r3, [sp, #24]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	f43f ae67 	beq.w	8013b86 <_strtod_l+0x7e>
 8013eb8:	9b06      	ldr	r3, [sp, #24]
 8013eba:	dd7a      	ble.n	8013fb2 <_strtod_l+0x4aa>
 8013ebc:	2b16      	cmp	r3, #22
 8013ebe:	dc61      	bgt.n	8013f84 <_strtod_l+0x47c>
 8013ec0:	4a75      	ldr	r2, [pc, #468]	; (8014098 <_strtod_l+0x590>)
 8013ec2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013ec6:	e9de 0100 	ldrd	r0, r1, [lr]
 8013eca:	4652      	mov	r2, sl
 8013ecc:	465b      	mov	r3, fp
 8013ece:	f7f4 facb 	bl	8008468 <__aeabi_dmul>
 8013ed2:	4682      	mov	sl, r0
 8013ed4:	468b      	mov	fp, r1
 8013ed6:	e656      	b.n	8013b86 <_strtod_l+0x7e>
 8013ed8:	4b6f      	ldr	r3, [pc, #444]	; (8014098 <_strtod_l+0x590>)
 8013eda:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013ede:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013ee2:	f7f4 fac1 	bl	8008468 <__aeabi_dmul>
 8013ee6:	4606      	mov	r6, r0
 8013ee8:	4628      	mov	r0, r5
 8013eea:	460f      	mov	r7, r1
 8013eec:	f7f4 fa42 	bl	8008374 <__aeabi_ui2d>
 8013ef0:	4602      	mov	r2, r0
 8013ef2:	460b      	mov	r3, r1
 8013ef4:	4630      	mov	r0, r6
 8013ef6:	4639      	mov	r1, r7
 8013ef8:	f7f4 f900 	bl	80080fc <__adddf3>
 8013efc:	2c0f      	cmp	r4, #15
 8013efe:	4682      	mov	sl, r0
 8013f00:	468b      	mov	fp, r1
 8013f02:	ddd5      	ble.n	8013eb0 <_strtod_l+0x3a8>
 8013f04:	9b06      	ldr	r3, [sp, #24]
 8013f06:	eba4 0808 	sub.w	r8, r4, r8
 8013f0a:	4498      	add	r8, r3
 8013f0c:	f1b8 0f00 	cmp.w	r8, #0
 8013f10:	f340 8096 	ble.w	8014040 <_strtod_l+0x538>
 8013f14:	f018 030f 	ands.w	r3, r8, #15
 8013f18:	d00a      	beq.n	8013f30 <_strtod_l+0x428>
 8013f1a:	495f      	ldr	r1, [pc, #380]	; (8014098 <_strtod_l+0x590>)
 8013f1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013f20:	4652      	mov	r2, sl
 8013f22:	465b      	mov	r3, fp
 8013f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f28:	f7f4 fa9e 	bl	8008468 <__aeabi_dmul>
 8013f2c:	4682      	mov	sl, r0
 8013f2e:	468b      	mov	fp, r1
 8013f30:	f038 080f 	bics.w	r8, r8, #15
 8013f34:	d073      	beq.n	801401e <_strtod_l+0x516>
 8013f36:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013f3a:	dd47      	ble.n	8013fcc <_strtod_l+0x4c4>
 8013f3c:	2400      	movs	r4, #0
 8013f3e:	46a0      	mov	r8, r4
 8013f40:	9407      	str	r4, [sp, #28]
 8013f42:	9405      	str	r4, [sp, #20]
 8013f44:	2322      	movs	r3, #34	; 0x22
 8013f46:	f8df b158 	ldr.w	fp, [pc, #344]	; 80140a0 <_strtod_l+0x598>
 8013f4a:	f8c9 3000 	str.w	r3, [r9]
 8013f4e:	f04f 0a00 	mov.w	sl, #0
 8013f52:	9b07      	ldr	r3, [sp, #28]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	f43f ae16 	beq.w	8013b86 <_strtod_l+0x7e>
 8013f5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013f5c:	4648      	mov	r0, r9
 8013f5e:	f002 f8a8 	bl	80160b2 <_Bfree>
 8013f62:	9905      	ldr	r1, [sp, #20]
 8013f64:	4648      	mov	r0, r9
 8013f66:	f002 f8a4 	bl	80160b2 <_Bfree>
 8013f6a:	4641      	mov	r1, r8
 8013f6c:	4648      	mov	r0, r9
 8013f6e:	f002 f8a0 	bl	80160b2 <_Bfree>
 8013f72:	9907      	ldr	r1, [sp, #28]
 8013f74:	4648      	mov	r0, r9
 8013f76:	f002 f89c 	bl	80160b2 <_Bfree>
 8013f7a:	4621      	mov	r1, r4
 8013f7c:	4648      	mov	r0, r9
 8013f7e:	f002 f898 	bl	80160b2 <_Bfree>
 8013f82:	e600      	b.n	8013b86 <_strtod_l+0x7e>
 8013f84:	9a06      	ldr	r2, [sp, #24]
 8013f86:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013f8a:	4293      	cmp	r3, r2
 8013f8c:	dbba      	blt.n	8013f04 <_strtod_l+0x3fc>
 8013f8e:	4d42      	ldr	r5, [pc, #264]	; (8014098 <_strtod_l+0x590>)
 8013f90:	f1c4 040f 	rsb	r4, r4, #15
 8013f94:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013f98:	4652      	mov	r2, sl
 8013f9a:	465b      	mov	r3, fp
 8013f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fa0:	f7f4 fa62 	bl	8008468 <__aeabi_dmul>
 8013fa4:	9b06      	ldr	r3, [sp, #24]
 8013fa6:	1b1c      	subs	r4, r3, r4
 8013fa8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013fac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013fb0:	e78d      	b.n	8013ece <_strtod_l+0x3c6>
 8013fb2:	f113 0f16 	cmn.w	r3, #22
 8013fb6:	dba5      	blt.n	8013f04 <_strtod_l+0x3fc>
 8013fb8:	4a37      	ldr	r2, [pc, #220]	; (8014098 <_strtod_l+0x590>)
 8013fba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013fbe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013fc2:	4650      	mov	r0, sl
 8013fc4:	4659      	mov	r1, fp
 8013fc6:	f7f4 fb79 	bl	80086bc <__aeabi_ddiv>
 8013fca:	e782      	b.n	8013ed2 <_strtod_l+0x3ca>
 8013fcc:	2300      	movs	r3, #0
 8013fce:	4e33      	ldr	r6, [pc, #204]	; (801409c <_strtod_l+0x594>)
 8013fd0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013fd4:	4650      	mov	r0, sl
 8013fd6:	4659      	mov	r1, fp
 8013fd8:	461d      	mov	r5, r3
 8013fda:	f1b8 0f01 	cmp.w	r8, #1
 8013fde:	dc21      	bgt.n	8014024 <_strtod_l+0x51c>
 8013fe0:	b10b      	cbz	r3, 8013fe6 <_strtod_l+0x4de>
 8013fe2:	4682      	mov	sl, r0
 8013fe4:	468b      	mov	fp, r1
 8013fe6:	4b2d      	ldr	r3, [pc, #180]	; (801409c <_strtod_l+0x594>)
 8013fe8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013fec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013ff0:	4652      	mov	r2, sl
 8013ff2:	465b      	mov	r3, fp
 8013ff4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013ff8:	f7f4 fa36 	bl	8008468 <__aeabi_dmul>
 8013ffc:	4b28      	ldr	r3, [pc, #160]	; (80140a0 <_strtod_l+0x598>)
 8013ffe:	460a      	mov	r2, r1
 8014000:	400b      	ands	r3, r1
 8014002:	4928      	ldr	r1, [pc, #160]	; (80140a4 <_strtod_l+0x59c>)
 8014004:	428b      	cmp	r3, r1
 8014006:	4682      	mov	sl, r0
 8014008:	d898      	bhi.n	8013f3c <_strtod_l+0x434>
 801400a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801400e:	428b      	cmp	r3, r1
 8014010:	bf86      	itte	hi
 8014012:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80140ac <_strtod_l+0x5a4>
 8014016:	f04f 3aff 	movhi.w	sl, #4294967295
 801401a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801401e:	2300      	movs	r3, #0
 8014020:	9304      	str	r3, [sp, #16]
 8014022:	e077      	b.n	8014114 <_strtod_l+0x60c>
 8014024:	f018 0f01 	tst.w	r8, #1
 8014028:	d006      	beq.n	8014038 <_strtod_l+0x530>
 801402a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014032:	f7f4 fa19 	bl	8008468 <__aeabi_dmul>
 8014036:	2301      	movs	r3, #1
 8014038:	3501      	adds	r5, #1
 801403a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801403e:	e7cc      	b.n	8013fda <_strtod_l+0x4d2>
 8014040:	d0ed      	beq.n	801401e <_strtod_l+0x516>
 8014042:	f1c8 0800 	rsb	r8, r8, #0
 8014046:	f018 020f 	ands.w	r2, r8, #15
 801404a:	d00a      	beq.n	8014062 <_strtod_l+0x55a>
 801404c:	4b12      	ldr	r3, [pc, #72]	; (8014098 <_strtod_l+0x590>)
 801404e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014052:	4650      	mov	r0, sl
 8014054:	4659      	mov	r1, fp
 8014056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801405a:	f7f4 fb2f 	bl	80086bc <__aeabi_ddiv>
 801405e:	4682      	mov	sl, r0
 8014060:	468b      	mov	fp, r1
 8014062:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014066:	d0da      	beq.n	801401e <_strtod_l+0x516>
 8014068:	f1b8 0f1f 	cmp.w	r8, #31
 801406c:	dd20      	ble.n	80140b0 <_strtod_l+0x5a8>
 801406e:	2400      	movs	r4, #0
 8014070:	46a0      	mov	r8, r4
 8014072:	9407      	str	r4, [sp, #28]
 8014074:	9405      	str	r4, [sp, #20]
 8014076:	2322      	movs	r3, #34	; 0x22
 8014078:	f04f 0a00 	mov.w	sl, #0
 801407c:	f04f 0b00 	mov.w	fp, #0
 8014080:	f8c9 3000 	str.w	r3, [r9]
 8014084:	e765      	b.n	8013f52 <_strtod_l+0x44a>
 8014086:	bf00      	nop
 8014088:	08017056 	.word	0x08017056
 801408c:	080170fb 	.word	0x080170fb
 8014090:	0801705e 	.word	0x0801705e
 8014094:	080170b8 	.word	0x080170b8
 8014098:	08017138 	.word	0x08017138
 801409c:	08017110 	.word	0x08017110
 80140a0:	7ff00000 	.word	0x7ff00000
 80140a4:	7ca00000 	.word	0x7ca00000
 80140a8:	fff80000 	.word	0xfff80000
 80140ac:	7fefffff 	.word	0x7fefffff
 80140b0:	f018 0310 	ands.w	r3, r8, #16
 80140b4:	bf18      	it	ne
 80140b6:	236a      	movne	r3, #106	; 0x6a
 80140b8:	4da0      	ldr	r5, [pc, #640]	; (801433c <_strtod_l+0x834>)
 80140ba:	9304      	str	r3, [sp, #16]
 80140bc:	4650      	mov	r0, sl
 80140be:	4659      	mov	r1, fp
 80140c0:	2300      	movs	r3, #0
 80140c2:	f1b8 0f00 	cmp.w	r8, #0
 80140c6:	f300 810a 	bgt.w	80142de <_strtod_l+0x7d6>
 80140ca:	b10b      	cbz	r3, 80140d0 <_strtod_l+0x5c8>
 80140cc:	4682      	mov	sl, r0
 80140ce:	468b      	mov	fp, r1
 80140d0:	9b04      	ldr	r3, [sp, #16]
 80140d2:	b1bb      	cbz	r3, 8014104 <_strtod_l+0x5fc>
 80140d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80140d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80140dc:	2b00      	cmp	r3, #0
 80140de:	4659      	mov	r1, fp
 80140e0:	dd10      	ble.n	8014104 <_strtod_l+0x5fc>
 80140e2:	2b1f      	cmp	r3, #31
 80140e4:	f340 8107 	ble.w	80142f6 <_strtod_l+0x7ee>
 80140e8:	2b34      	cmp	r3, #52	; 0x34
 80140ea:	bfde      	ittt	le
 80140ec:	3b20      	suble	r3, #32
 80140ee:	f04f 32ff 	movle.w	r2, #4294967295
 80140f2:	fa02 f303 	lslle.w	r3, r2, r3
 80140f6:	f04f 0a00 	mov.w	sl, #0
 80140fa:	bfcc      	ite	gt
 80140fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014100:	ea03 0b01 	andle.w	fp, r3, r1
 8014104:	2200      	movs	r2, #0
 8014106:	2300      	movs	r3, #0
 8014108:	4650      	mov	r0, sl
 801410a:	4659      	mov	r1, fp
 801410c:	f7f4 fc14 	bl	8008938 <__aeabi_dcmpeq>
 8014110:	2800      	cmp	r0, #0
 8014112:	d1ac      	bne.n	801406e <_strtod_l+0x566>
 8014114:	9b07      	ldr	r3, [sp, #28]
 8014116:	9300      	str	r3, [sp, #0]
 8014118:	9a05      	ldr	r2, [sp, #20]
 801411a:	9908      	ldr	r1, [sp, #32]
 801411c:	4623      	mov	r3, r4
 801411e:	4648      	mov	r0, r9
 8014120:	f002 f819 	bl	8016156 <__s2b>
 8014124:	9007      	str	r0, [sp, #28]
 8014126:	2800      	cmp	r0, #0
 8014128:	f43f af08 	beq.w	8013f3c <_strtod_l+0x434>
 801412c:	9a06      	ldr	r2, [sp, #24]
 801412e:	9b06      	ldr	r3, [sp, #24]
 8014130:	2a00      	cmp	r2, #0
 8014132:	f1c3 0300 	rsb	r3, r3, #0
 8014136:	bfa8      	it	ge
 8014138:	2300      	movge	r3, #0
 801413a:	930e      	str	r3, [sp, #56]	; 0x38
 801413c:	2400      	movs	r4, #0
 801413e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014142:	9316      	str	r3, [sp, #88]	; 0x58
 8014144:	46a0      	mov	r8, r4
 8014146:	9b07      	ldr	r3, [sp, #28]
 8014148:	4648      	mov	r0, r9
 801414a:	6859      	ldr	r1, [r3, #4]
 801414c:	f001 ff7d 	bl	801604a <_Balloc>
 8014150:	9005      	str	r0, [sp, #20]
 8014152:	2800      	cmp	r0, #0
 8014154:	f43f aef6 	beq.w	8013f44 <_strtod_l+0x43c>
 8014158:	9b07      	ldr	r3, [sp, #28]
 801415a:	691a      	ldr	r2, [r3, #16]
 801415c:	3202      	adds	r2, #2
 801415e:	f103 010c 	add.w	r1, r3, #12
 8014162:	0092      	lsls	r2, r2, #2
 8014164:	300c      	adds	r0, #12
 8014166:	f7fd fda9 	bl	8011cbc <memcpy>
 801416a:	aa1e      	add	r2, sp, #120	; 0x78
 801416c:	a91d      	add	r1, sp, #116	; 0x74
 801416e:	ec4b ab10 	vmov	d0, sl, fp
 8014172:	4648      	mov	r0, r9
 8014174:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014178:	f002 faa8 	bl	80166cc <__d2b>
 801417c:	901c      	str	r0, [sp, #112]	; 0x70
 801417e:	2800      	cmp	r0, #0
 8014180:	f43f aee0 	beq.w	8013f44 <_strtod_l+0x43c>
 8014184:	2101      	movs	r1, #1
 8014186:	4648      	mov	r0, r9
 8014188:	f002 f871 	bl	801626e <__i2b>
 801418c:	4680      	mov	r8, r0
 801418e:	2800      	cmp	r0, #0
 8014190:	f43f aed8 	beq.w	8013f44 <_strtod_l+0x43c>
 8014194:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014196:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014198:	2e00      	cmp	r6, #0
 801419a:	bfab      	itete	ge
 801419c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801419e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80141a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80141a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80141a4:	bfac      	ite	ge
 80141a6:	18f7      	addge	r7, r6, r3
 80141a8:	1b9d      	sublt	r5, r3, r6
 80141aa:	9b04      	ldr	r3, [sp, #16]
 80141ac:	1af6      	subs	r6, r6, r3
 80141ae:	4416      	add	r6, r2
 80141b0:	4b63      	ldr	r3, [pc, #396]	; (8014340 <_strtod_l+0x838>)
 80141b2:	3e01      	subs	r6, #1
 80141b4:	429e      	cmp	r6, r3
 80141b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80141ba:	f280 80af 	bge.w	801431c <_strtod_l+0x814>
 80141be:	1b9b      	subs	r3, r3, r6
 80141c0:	2b1f      	cmp	r3, #31
 80141c2:	eba2 0203 	sub.w	r2, r2, r3
 80141c6:	f04f 0101 	mov.w	r1, #1
 80141ca:	f300 809b 	bgt.w	8014304 <_strtod_l+0x7fc>
 80141ce:	fa01 f303 	lsl.w	r3, r1, r3
 80141d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80141d4:	2300      	movs	r3, #0
 80141d6:	930a      	str	r3, [sp, #40]	; 0x28
 80141d8:	18be      	adds	r6, r7, r2
 80141da:	9b04      	ldr	r3, [sp, #16]
 80141dc:	42b7      	cmp	r7, r6
 80141de:	4415      	add	r5, r2
 80141e0:	441d      	add	r5, r3
 80141e2:	463b      	mov	r3, r7
 80141e4:	bfa8      	it	ge
 80141e6:	4633      	movge	r3, r6
 80141e8:	42ab      	cmp	r3, r5
 80141ea:	bfa8      	it	ge
 80141ec:	462b      	movge	r3, r5
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	bfc2      	ittt	gt
 80141f2:	1af6      	subgt	r6, r6, r3
 80141f4:	1aed      	subgt	r5, r5, r3
 80141f6:	1aff      	subgt	r7, r7, r3
 80141f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141fa:	b1bb      	cbz	r3, 801422c <_strtod_l+0x724>
 80141fc:	4641      	mov	r1, r8
 80141fe:	461a      	mov	r2, r3
 8014200:	4648      	mov	r0, r9
 8014202:	f002 f8d3 	bl	80163ac <__pow5mult>
 8014206:	4680      	mov	r8, r0
 8014208:	2800      	cmp	r0, #0
 801420a:	f43f ae9b 	beq.w	8013f44 <_strtod_l+0x43c>
 801420e:	4601      	mov	r1, r0
 8014210:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014212:	4648      	mov	r0, r9
 8014214:	f002 f834 	bl	8016280 <__multiply>
 8014218:	900c      	str	r0, [sp, #48]	; 0x30
 801421a:	2800      	cmp	r0, #0
 801421c:	f43f ae92 	beq.w	8013f44 <_strtod_l+0x43c>
 8014220:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014222:	4648      	mov	r0, r9
 8014224:	f001 ff45 	bl	80160b2 <_Bfree>
 8014228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801422a:	931c      	str	r3, [sp, #112]	; 0x70
 801422c:	2e00      	cmp	r6, #0
 801422e:	dc7a      	bgt.n	8014326 <_strtod_l+0x81e>
 8014230:	9b06      	ldr	r3, [sp, #24]
 8014232:	2b00      	cmp	r3, #0
 8014234:	dd08      	ble.n	8014248 <_strtod_l+0x740>
 8014236:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014238:	9905      	ldr	r1, [sp, #20]
 801423a:	4648      	mov	r0, r9
 801423c:	f002 f8b6 	bl	80163ac <__pow5mult>
 8014240:	9005      	str	r0, [sp, #20]
 8014242:	2800      	cmp	r0, #0
 8014244:	f43f ae7e 	beq.w	8013f44 <_strtod_l+0x43c>
 8014248:	2d00      	cmp	r5, #0
 801424a:	dd08      	ble.n	801425e <_strtod_l+0x756>
 801424c:	462a      	mov	r2, r5
 801424e:	9905      	ldr	r1, [sp, #20]
 8014250:	4648      	mov	r0, r9
 8014252:	f002 f8f9 	bl	8016448 <__lshift>
 8014256:	9005      	str	r0, [sp, #20]
 8014258:	2800      	cmp	r0, #0
 801425a:	f43f ae73 	beq.w	8013f44 <_strtod_l+0x43c>
 801425e:	2f00      	cmp	r7, #0
 8014260:	dd08      	ble.n	8014274 <_strtod_l+0x76c>
 8014262:	4641      	mov	r1, r8
 8014264:	463a      	mov	r2, r7
 8014266:	4648      	mov	r0, r9
 8014268:	f002 f8ee 	bl	8016448 <__lshift>
 801426c:	4680      	mov	r8, r0
 801426e:	2800      	cmp	r0, #0
 8014270:	f43f ae68 	beq.w	8013f44 <_strtod_l+0x43c>
 8014274:	9a05      	ldr	r2, [sp, #20]
 8014276:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014278:	4648      	mov	r0, r9
 801427a:	f002 f953 	bl	8016524 <__mdiff>
 801427e:	4604      	mov	r4, r0
 8014280:	2800      	cmp	r0, #0
 8014282:	f43f ae5f 	beq.w	8013f44 <_strtod_l+0x43c>
 8014286:	68c3      	ldr	r3, [r0, #12]
 8014288:	930c      	str	r3, [sp, #48]	; 0x30
 801428a:	2300      	movs	r3, #0
 801428c:	60c3      	str	r3, [r0, #12]
 801428e:	4641      	mov	r1, r8
 8014290:	f002 f92e 	bl	80164f0 <__mcmp>
 8014294:	2800      	cmp	r0, #0
 8014296:	da55      	bge.n	8014344 <_strtod_l+0x83c>
 8014298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801429a:	b9e3      	cbnz	r3, 80142d6 <_strtod_l+0x7ce>
 801429c:	f1ba 0f00 	cmp.w	sl, #0
 80142a0:	d119      	bne.n	80142d6 <_strtod_l+0x7ce>
 80142a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80142a6:	b9b3      	cbnz	r3, 80142d6 <_strtod_l+0x7ce>
 80142a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80142ac:	0d1b      	lsrs	r3, r3, #20
 80142ae:	051b      	lsls	r3, r3, #20
 80142b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80142b4:	d90f      	bls.n	80142d6 <_strtod_l+0x7ce>
 80142b6:	6963      	ldr	r3, [r4, #20]
 80142b8:	b913      	cbnz	r3, 80142c0 <_strtod_l+0x7b8>
 80142ba:	6923      	ldr	r3, [r4, #16]
 80142bc:	2b01      	cmp	r3, #1
 80142be:	dd0a      	ble.n	80142d6 <_strtod_l+0x7ce>
 80142c0:	4621      	mov	r1, r4
 80142c2:	2201      	movs	r2, #1
 80142c4:	4648      	mov	r0, r9
 80142c6:	f002 f8bf 	bl	8016448 <__lshift>
 80142ca:	4641      	mov	r1, r8
 80142cc:	4604      	mov	r4, r0
 80142ce:	f002 f90f 	bl	80164f0 <__mcmp>
 80142d2:	2800      	cmp	r0, #0
 80142d4:	dc67      	bgt.n	80143a6 <_strtod_l+0x89e>
 80142d6:	9b04      	ldr	r3, [sp, #16]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d171      	bne.n	80143c0 <_strtod_l+0x8b8>
 80142dc:	e63d      	b.n	8013f5a <_strtod_l+0x452>
 80142de:	f018 0f01 	tst.w	r8, #1
 80142e2:	d004      	beq.n	80142ee <_strtod_l+0x7e6>
 80142e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80142e8:	f7f4 f8be 	bl	8008468 <__aeabi_dmul>
 80142ec:	2301      	movs	r3, #1
 80142ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80142f2:	3508      	adds	r5, #8
 80142f4:	e6e5      	b.n	80140c2 <_strtod_l+0x5ba>
 80142f6:	f04f 32ff 	mov.w	r2, #4294967295
 80142fa:	fa02 f303 	lsl.w	r3, r2, r3
 80142fe:	ea03 0a0a 	and.w	sl, r3, sl
 8014302:	e6ff      	b.n	8014104 <_strtod_l+0x5fc>
 8014304:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014308:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801430c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014310:	36e2      	adds	r6, #226	; 0xe2
 8014312:	fa01 f306 	lsl.w	r3, r1, r6
 8014316:	930a      	str	r3, [sp, #40]	; 0x28
 8014318:	910f      	str	r1, [sp, #60]	; 0x3c
 801431a:	e75d      	b.n	80141d8 <_strtod_l+0x6d0>
 801431c:	2300      	movs	r3, #0
 801431e:	930a      	str	r3, [sp, #40]	; 0x28
 8014320:	2301      	movs	r3, #1
 8014322:	930f      	str	r3, [sp, #60]	; 0x3c
 8014324:	e758      	b.n	80141d8 <_strtod_l+0x6d0>
 8014326:	4632      	mov	r2, r6
 8014328:	991c      	ldr	r1, [sp, #112]	; 0x70
 801432a:	4648      	mov	r0, r9
 801432c:	f002 f88c 	bl	8016448 <__lshift>
 8014330:	901c      	str	r0, [sp, #112]	; 0x70
 8014332:	2800      	cmp	r0, #0
 8014334:	f47f af7c 	bne.w	8014230 <_strtod_l+0x728>
 8014338:	e604      	b.n	8013f44 <_strtod_l+0x43c>
 801433a:	bf00      	nop
 801433c:	080170d0 	.word	0x080170d0
 8014340:	fffffc02 	.word	0xfffffc02
 8014344:	465d      	mov	r5, fp
 8014346:	f040 8086 	bne.w	8014456 <_strtod_l+0x94e>
 801434a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801434c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014350:	b32a      	cbz	r2, 801439e <_strtod_l+0x896>
 8014352:	4aaf      	ldr	r2, [pc, #700]	; (8014610 <_strtod_l+0xb08>)
 8014354:	4293      	cmp	r3, r2
 8014356:	d153      	bne.n	8014400 <_strtod_l+0x8f8>
 8014358:	9b04      	ldr	r3, [sp, #16]
 801435a:	4650      	mov	r0, sl
 801435c:	b1d3      	cbz	r3, 8014394 <_strtod_l+0x88c>
 801435e:	4aad      	ldr	r2, [pc, #692]	; (8014614 <_strtod_l+0xb0c>)
 8014360:	402a      	ands	r2, r5
 8014362:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014366:	f04f 31ff 	mov.w	r1, #4294967295
 801436a:	d816      	bhi.n	801439a <_strtod_l+0x892>
 801436c:	0d12      	lsrs	r2, r2, #20
 801436e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014372:	fa01 f303 	lsl.w	r3, r1, r3
 8014376:	4298      	cmp	r0, r3
 8014378:	d142      	bne.n	8014400 <_strtod_l+0x8f8>
 801437a:	4ba7      	ldr	r3, [pc, #668]	; (8014618 <_strtod_l+0xb10>)
 801437c:	429d      	cmp	r5, r3
 801437e:	d102      	bne.n	8014386 <_strtod_l+0x87e>
 8014380:	3001      	adds	r0, #1
 8014382:	f43f addf 	beq.w	8013f44 <_strtod_l+0x43c>
 8014386:	4ba3      	ldr	r3, [pc, #652]	; (8014614 <_strtod_l+0xb0c>)
 8014388:	402b      	ands	r3, r5
 801438a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801438e:	f04f 0a00 	mov.w	sl, #0
 8014392:	e7a0      	b.n	80142d6 <_strtod_l+0x7ce>
 8014394:	f04f 33ff 	mov.w	r3, #4294967295
 8014398:	e7ed      	b.n	8014376 <_strtod_l+0x86e>
 801439a:	460b      	mov	r3, r1
 801439c:	e7eb      	b.n	8014376 <_strtod_l+0x86e>
 801439e:	bb7b      	cbnz	r3, 8014400 <_strtod_l+0x8f8>
 80143a0:	f1ba 0f00 	cmp.w	sl, #0
 80143a4:	d12c      	bne.n	8014400 <_strtod_l+0x8f8>
 80143a6:	9904      	ldr	r1, [sp, #16]
 80143a8:	4a9a      	ldr	r2, [pc, #616]	; (8014614 <_strtod_l+0xb0c>)
 80143aa:	465b      	mov	r3, fp
 80143ac:	b1f1      	cbz	r1, 80143ec <_strtod_l+0x8e4>
 80143ae:	ea02 010b 	and.w	r1, r2, fp
 80143b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80143b6:	dc19      	bgt.n	80143ec <_strtod_l+0x8e4>
 80143b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80143bc:	f77f ae5b 	ble.w	8014076 <_strtod_l+0x56e>
 80143c0:	4a96      	ldr	r2, [pc, #600]	; (801461c <_strtod_l+0xb14>)
 80143c2:	2300      	movs	r3, #0
 80143c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80143c8:	4650      	mov	r0, sl
 80143ca:	4659      	mov	r1, fp
 80143cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80143d0:	f7f4 f84a 	bl	8008468 <__aeabi_dmul>
 80143d4:	4682      	mov	sl, r0
 80143d6:	468b      	mov	fp, r1
 80143d8:	2900      	cmp	r1, #0
 80143da:	f47f adbe 	bne.w	8013f5a <_strtod_l+0x452>
 80143de:	2800      	cmp	r0, #0
 80143e0:	f47f adbb 	bne.w	8013f5a <_strtod_l+0x452>
 80143e4:	2322      	movs	r3, #34	; 0x22
 80143e6:	f8c9 3000 	str.w	r3, [r9]
 80143ea:	e5b6      	b.n	8013f5a <_strtod_l+0x452>
 80143ec:	4013      	ands	r3, r2
 80143ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80143f2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80143f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80143fa:	f04f 3aff 	mov.w	sl, #4294967295
 80143fe:	e76a      	b.n	80142d6 <_strtod_l+0x7ce>
 8014400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014402:	b193      	cbz	r3, 801442a <_strtod_l+0x922>
 8014404:	422b      	tst	r3, r5
 8014406:	f43f af66 	beq.w	80142d6 <_strtod_l+0x7ce>
 801440a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801440c:	9a04      	ldr	r2, [sp, #16]
 801440e:	4650      	mov	r0, sl
 8014410:	4659      	mov	r1, fp
 8014412:	b173      	cbz	r3, 8014432 <_strtod_l+0x92a>
 8014414:	f7ff fb59 	bl	8013aca <sulp>
 8014418:	4602      	mov	r2, r0
 801441a:	460b      	mov	r3, r1
 801441c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014420:	f7f3 fe6c 	bl	80080fc <__adddf3>
 8014424:	4682      	mov	sl, r0
 8014426:	468b      	mov	fp, r1
 8014428:	e755      	b.n	80142d6 <_strtod_l+0x7ce>
 801442a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801442c:	ea13 0f0a 	tst.w	r3, sl
 8014430:	e7e9      	b.n	8014406 <_strtod_l+0x8fe>
 8014432:	f7ff fb4a 	bl	8013aca <sulp>
 8014436:	4602      	mov	r2, r0
 8014438:	460b      	mov	r3, r1
 801443a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801443e:	f7f3 fe5b 	bl	80080f8 <__aeabi_dsub>
 8014442:	2200      	movs	r2, #0
 8014444:	2300      	movs	r3, #0
 8014446:	4682      	mov	sl, r0
 8014448:	468b      	mov	fp, r1
 801444a:	f7f4 fa75 	bl	8008938 <__aeabi_dcmpeq>
 801444e:	2800      	cmp	r0, #0
 8014450:	f47f ae11 	bne.w	8014076 <_strtod_l+0x56e>
 8014454:	e73f      	b.n	80142d6 <_strtod_l+0x7ce>
 8014456:	4641      	mov	r1, r8
 8014458:	4620      	mov	r0, r4
 801445a:	f002 f986 	bl	801676a <__ratio>
 801445e:	ec57 6b10 	vmov	r6, r7, d0
 8014462:	2200      	movs	r2, #0
 8014464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014468:	ee10 0a10 	vmov	r0, s0
 801446c:	4639      	mov	r1, r7
 801446e:	f7f4 fa77 	bl	8008960 <__aeabi_dcmple>
 8014472:	2800      	cmp	r0, #0
 8014474:	d077      	beq.n	8014566 <_strtod_l+0xa5e>
 8014476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014478:	2b00      	cmp	r3, #0
 801447a:	d04a      	beq.n	8014512 <_strtod_l+0xa0a>
 801447c:	4b68      	ldr	r3, [pc, #416]	; (8014620 <_strtod_l+0xb18>)
 801447e:	2200      	movs	r2, #0
 8014480:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014484:	4f66      	ldr	r7, [pc, #408]	; (8014620 <_strtod_l+0xb18>)
 8014486:	2600      	movs	r6, #0
 8014488:	4b62      	ldr	r3, [pc, #392]	; (8014614 <_strtod_l+0xb0c>)
 801448a:	402b      	ands	r3, r5
 801448c:	930f      	str	r3, [sp, #60]	; 0x3c
 801448e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014490:	4b64      	ldr	r3, [pc, #400]	; (8014624 <_strtod_l+0xb1c>)
 8014492:	429a      	cmp	r2, r3
 8014494:	f040 80ce 	bne.w	8014634 <_strtod_l+0xb2c>
 8014498:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801449c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80144a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80144a4:	ec4b ab10 	vmov	d0, sl, fp
 80144a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80144ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80144b0:	f002 f896 	bl	80165e0 <__ulp>
 80144b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80144b8:	ec53 2b10 	vmov	r2, r3, d0
 80144bc:	f7f3 ffd4 	bl	8008468 <__aeabi_dmul>
 80144c0:	4652      	mov	r2, sl
 80144c2:	465b      	mov	r3, fp
 80144c4:	f7f3 fe1a 	bl	80080fc <__adddf3>
 80144c8:	460b      	mov	r3, r1
 80144ca:	4952      	ldr	r1, [pc, #328]	; (8014614 <_strtod_l+0xb0c>)
 80144cc:	4a56      	ldr	r2, [pc, #344]	; (8014628 <_strtod_l+0xb20>)
 80144ce:	4019      	ands	r1, r3
 80144d0:	4291      	cmp	r1, r2
 80144d2:	4682      	mov	sl, r0
 80144d4:	d95b      	bls.n	801458e <_strtod_l+0xa86>
 80144d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80144dc:	4293      	cmp	r3, r2
 80144de:	d103      	bne.n	80144e8 <_strtod_l+0x9e0>
 80144e0:	9b08      	ldr	r3, [sp, #32]
 80144e2:	3301      	adds	r3, #1
 80144e4:	f43f ad2e 	beq.w	8013f44 <_strtod_l+0x43c>
 80144e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014618 <_strtod_l+0xb10>
 80144ec:	f04f 3aff 	mov.w	sl, #4294967295
 80144f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80144f2:	4648      	mov	r0, r9
 80144f4:	f001 fddd 	bl	80160b2 <_Bfree>
 80144f8:	9905      	ldr	r1, [sp, #20]
 80144fa:	4648      	mov	r0, r9
 80144fc:	f001 fdd9 	bl	80160b2 <_Bfree>
 8014500:	4641      	mov	r1, r8
 8014502:	4648      	mov	r0, r9
 8014504:	f001 fdd5 	bl	80160b2 <_Bfree>
 8014508:	4621      	mov	r1, r4
 801450a:	4648      	mov	r0, r9
 801450c:	f001 fdd1 	bl	80160b2 <_Bfree>
 8014510:	e619      	b.n	8014146 <_strtod_l+0x63e>
 8014512:	f1ba 0f00 	cmp.w	sl, #0
 8014516:	d11a      	bne.n	801454e <_strtod_l+0xa46>
 8014518:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801451c:	b9eb      	cbnz	r3, 801455a <_strtod_l+0xa52>
 801451e:	2200      	movs	r2, #0
 8014520:	4b3f      	ldr	r3, [pc, #252]	; (8014620 <_strtod_l+0xb18>)
 8014522:	4630      	mov	r0, r6
 8014524:	4639      	mov	r1, r7
 8014526:	f7f4 fa11 	bl	800894c <__aeabi_dcmplt>
 801452a:	b9c8      	cbnz	r0, 8014560 <_strtod_l+0xa58>
 801452c:	4630      	mov	r0, r6
 801452e:	4639      	mov	r1, r7
 8014530:	2200      	movs	r2, #0
 8014532:	4b3e      	ldr	r3, [pc, #248]	; (801462c <_strtod_l+0xb24>)
 8014534:	f7f3 ff98 	bl	8008468 <__aeabi_dmul>
 8014538:	4606      	mov	r6, r0
 801453a:	460f      	mov	r7, r1
 801453c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014540:	9618      	str	r6, [sp, #96]	; 0x60
 8014542:	9319      	str	r3, [sp, #100]	; 0x64
 8014544:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014548:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801454c:	e79c      	b.n	8014488 <_strtod_l+0x980>
 801454e:	f1ba 0f01 	cmp.w	sl, #1
 8014552:	d102      	bne.n	801455a <_strtod_l+0xa52>
 8014554:	2d00      	cmp	r5, #0
 8014556:	f43f ad8e 	beq.w	8014076 <_strtod_l+0x56e>
 801455a:	2200      	movs	r2, #0
 801455c:	4b34      	ldr	r3, [pc, #208]	; (8014630 <_strtod_l+0xb28>)
 801455e:	e78f      	b.n	8014480 <_strtod_l+0x978>
 8014560:	2600      	movs	r6, #0
 8014562:	4f32      	ldr	r7, [pc, #200]	; (801462c <_strtod_l+0xb24>)
 8014564:	e7ea      	b.n	801453c <_strtod_l+0xa34>
 8014566:	4b31      	ldr	r3, [pc, #196]	; (801462c <_strtod_l+0xb24>)
 8014568:	4630      	mov	r0, r6
 801456a:	4639      	mov	r1, r7
 801456c:	2200      	movs	r2, #0
 801456e:	f7f3 ff7b 	bl	8008468 <__aeabi_dmul>
 8014572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014574:	4606      	mov	r6, r0
 8014576:	460f      	mov	r7, r1
 8014578:	b933      	cbnz	r3, 8014588 <_strtod_l+0xa80>
 801457a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801457e:	9010      	str	r0, [sp, #64]	; 0x40
 8014580:	9311      	str	r3, [sp, #68]	; 0x44
 8014582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014586:	e7df      	b.n	8014548 <_strtod_l+0xa40>
 8014588:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801458c:	e7f9      	b.n	8014582 <_strtod_l+0xa7a>
 801458e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014592:	9b04      	ldr	r3, [sp, #16]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d1ab      	bne.n	80144f0 <_strtod_l+0x9e8>
 8014598:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801459c:	0d1b      	lsrs	r3, r3, #20
 801459e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145a0:	051b      	lsls	r3, r3, #20
 80145a2:	429a      	cmp	r2, r3
 80145a4:	465d      	mov	r5, fp
 80145a6:	d1a3      	bne.n	80144f0 <_strtod_l+0x9e8>
 80145a8:	4639      	mov	r1, r7
 80145aa:	4630      	mov	r0, r6
 80145ac:	f7f4 fa0c 	bl	80089c8 <__aeabi_d2iz>
 80145b0:	f7f3 fef0 	bl	8008394 <__aeabi_i2d>
 80145b4:	460b      	mov	r3, r1
 80145b6:	4602      	mov	r2, r0
 80145b8:	4639      	mov	r1, r7
 80145ba:	4630      	mov	r0, r6
 80145bc:	f7f3 fd9c 	bl	80080f8 <__aeabi_dsub>
 80145c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145c2:	4606      	mov	r6, r0
 80145c4:	460f      	mov	r7, r1
 80145c6:	b933      	cbnz	r3, 80145d6 <_strtod_l+0xace>
 80145c8:	f1ba 0f00 	cmp.w	sl, #0
 80145cc:	d103      	bne.n	80145d6 <_strtod_l+0xace>
 80145ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80145d2:	2d00      	cmp	r5, #0
 80145d4:	d06d      	beq.n	80146b2 <_strtod_l+0xbaa>
 80145d6:	a30a      	add	r3, pc, #40	; (adr r3, 8014600 <_strtod_l+0xaf8>)
 80145d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145dc:	4630      	mov	r0, r6
 80145de:	4639      	mov	r1, r7
 80145e0:	f7f4 f9b4 	bl	800894c <__aeabi_dcmplt>
 80145e4:	2800      	cmp	r0, #0
 80145e6:	f47f acb8 	bne.w	8013f5a <_strtod_l+0x452>
 80145ea:	a307      	add	r3, pc, #28	; (adr r3, 8014608 <_strtod_l+0xb00>)
 80145ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f0:	4630      	mov	r0, r6
 80145f2:	4639      	mov	r1, r7
 80145f4:	f7f4 f9c8 	bl	8008988 <__aeabi_dcmpgt>
 80145f8:	2800      	cmp	r0, #0
 80145fa:	f43f af79 	beq.w	80144f0 <_strtod_l+0x9e8>
 80145fe:	e4ac      	b.n	8013f5a <_strtod_l+0x452>
 8014600:	94a03595 	.word	0x94a03595
 8014604:	3fdfffff 	.word	0x3fdfffff
 8014608:	35afe535 	.word	0x35afe535
 801460c:	3fe00000 	.word	0x3fe00000
 8014610:	000fffff 	.word	0x000fffff
 8014614:	7ff00000 	.word	0x7ff00000
 8014618:	7fefffff 	.word	0x7fefffff
 801461c:	39500000 	.word	0x39500000
 8014620:	3ff00000 	.word	0x3ff00000
 8014624:	7fe00000 	.word	0x7fe00000
 8014628:	7c9fffff 	.word	0x7c9fffff
 801462c:	3fe00000 	.word	0x3fe00000
 8014630:	bff00000 	.word	0xbff00000
 8014634:	9b04      	ldr	r3, [sp, #16]
 8014636:	b333      	cbz	r3, 8014686 <_strtod_l+0xb7e>
 8014638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801463a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801463e:	d822      	bhi.n	8014686 <_strtod_l+0xb7e>
 8014640:	a327      	add	r3, pc, #156	; (adr r3, 80146e0 <_strtod_l+0xbd8>)
 8014642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014646:	4630      	mov	r0, r6
 8014648:	4639      	mov	r1, r7
 801464a:	f7f4 f989 	bl	8008960 <__aeabi_dcmple>
 801464e:	b1a0      	cbz	r0, 801467a <_strtod_l+0xb72>
 8014650:	4639      	mov	r1, r7
 8014652:	4630      	mov	r0, r6
 8014654:	f7f4 f9e0 	bl	8008a18 <__aeabi_d2uiz>
 8014658:	2800      	cmp	r0, #0
 801465a:	bf08      	it	eq
 801465c:	2001      	moveq	r0, #1
 801465e:	f7f3 fe89 	bl	8008374 <__aeabi_ui2d>
 8014662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014664:	4606      	mov	r6, r0
 8014666:	460f      	mov	r7, r1
 8014668:	bb03      	cbnz	r3, 80146ac <_strtod_l+0xba4>
 801466a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801466e:	9012      	str	r0, [sp, #72]	; 0x48
 8014670:	9313      	str	r3, [sp, #76]	; 0x4c
 8014672:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014676:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801467a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801467c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801467e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014682:	1a9b      	subs	r3, r3, r2
 8014684:	930b      	str	r3, [sp, #44]	; 0x2c
 8014686:	ed9d 0b08 	vldr	d0, [sp, #32]
 801468a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801468e:	f001 ffa7 	bl	80165e0 <__ulp>
 8014692:	4650      	mov	r0, sl
 8014694:	ec53 2b10 	vmov	r2, r3, d0
 8014698:	4659      	mov	r1, fp
 801469a:	f7f3 fee5 	bl	8008468 <__aeabi_dmul>
 801469e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80146a2:	f7f3 fd2b 	bl	80080fc <__adddf3>
 80146a6:	4682      	mov	sl, r0
 80146a8:	468b      	mov	fp, r1
 80146aa:	e772      	b.n	8014592 <_strtod_l+0xa8a>
 80146ac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80146b0:	e7df      	b.n	8014672 <_strtod_l+0xb6a>
 80146b2:	a30d      	add	r3, pc, #52	; (adr r3, 80146e8 <_strtod_l+0xbe0>)
 80146b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b8:	f7f4 f948 	bl	800894c <__aeabi_dcmplt>
 80146bc:	e79c      	b.n	80145f8 <_strtod_l+0xaf0>
 80146be:	2300      	movs	r3, #0
 80146c0:	930d      	str	r3, [sp, #52]	; 0x34
 80146c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80146c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146c6:	6013      	str	r3, [r2, #0]
 80146c8:	f7ff ba61 	b.w	8013b8e <_strtod_l+0x86>
 80146cc:	2b65      	cmp	r3, #101	; 0x65
 80146ce:	f04f 0200 	mov.w	r2, #0
 80146d2:	f43f ab4e 	beq.w	8013d72 <_strtod_l+0x26a>
 80146d6:	2101      	movs	r1, #1
 80146d8:	4614      	mov	r4, r2
 80146da:	9104      	str	r1, [sp, #16]
 80146dc:	f7ff bacb 	b.w	8013c76 <_strtod_l+0x16e>
 80146e0:	ffc00000 	.word	0xffc00000
 80146e4:	41dfffff 	.word	0x41dfffff
 80146e8:	94a03595 	.word	0x94a03595
 80146ec:	3fcfffff 	.word	0x3fcfffff

080146f0 <_strtod_r>:
 80146f0:	4b05      	ldr	r3, [pc, #20]	; (8014708 <_strtod_r+0x18>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	b410      	push	{r4}
 80146f6:	6a1b      	ldr	r3, [r3, #32]
 80146f8:	4c04      	ldr	r4, [pc, #16]	; (801470c <_strtod_r+0x1c>)
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	bf08      	it	eq
 80146fe:	4623      	moveq	r3, r4
 8014700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014704:	f7ff ba00 	b.w	8013b08 <_strtod_l>
 8014708:	20000018 	.word	0x20000018
 801470c:	2000007c 	.word	0x2000007c

08014710 <_strtol_l.isra.0>:
 8014710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014714:	4680      	mov	r8, r0
 8014716:	4689      	mov	r9, r1
 8014718:	4692      	mov	sl, r2
 801471a:	461e      	mov	r6, r3
 801471c:	460f      	mov	r7, r1
 801471e:	463d      	mov	r5, r7
 8014720:	9808      	ldr	r0, [sp, #32]
 8014722:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014726:	f001 fc27 	bl	8015f78 <__locale_ctype_ptr_l>
 801472a:	4420      	add	r0, r4
 801472c:	7843      	ldrb	r3, [r0, #1]
 801472e:	f013 0308 	ands.w	r3, r3, #8
 8014732:	d132      	bne.n	801479a <_strtol_l.isra.0+0x8a>
 8014734:	2c2d      	cmp	r4, #45	; 0x2d
 8014736:	d132      	bne.n	801479e <_strtol_l.isra.0+0x8e>
 8014738:	787c      	ldrb	r4, [r7, #1]
 801473a:	1cbd      	adds	r5, r7, #2
 801473c:	2201      	movs	r2, #1
 801473e:	2e00      	cmp	r6, #0
 8014740:	d05d      	beq.n	80147fe <_strtol_l.isra.0+0xee>
 8014742:	2e10      	cmp	r6, #16
 8014744:	d109      	bne.n	801475a <_strtol_l.isra.0+0x4a>
 8014746:	2c30      	cmp	r4, #48	; 0x30
 8014748:	d107      	bne.n	801475a <_strtol_l.isra.0+0x4a>
 801474a:	782b      	ldrb	r3, [r5, #0]
 801474c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014750:	2b58      	cmp	r3, #88	; 0x58
 8014752:	d14f      	bne.n	80147f4 <_strtol_l.isra.0+0xe4>
 8014754:	786c      	ldrb	r4, [r5, #1]
 8014756:	2610      	movs	r6, #16
 8014758:	3502      	adds	r5, #2
 801475a:	2a00      	cmp	r2, #0
 801475c:	bf14      	ite	ne
 801475e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014762:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014766:	2700      	movs	r7, #0
 8014768:	fbb1 fcf6 	udiv	ip, r1, r6
 801476c:	4638      	mov	r0, r7
 801476e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014772:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014776:	2b09      	cmp	r3, #9
 8014778:	d817      	bhi.n	80147aa <_strtol_l.isra.0+0x9a>
 801477a:	461c      	mov	r4, r3
 801477c:	42a6      	cmp	r6, r4
 801477e:	dd23      	ble.n	80147c8 <_strtol_l.isra.0+0xb8>
 8014780:	1c7b      	adds	r3, r7, #1
 8014782:	d007      	beq.n	8014794 <_strtol_l.isra.0+0x84>
 8014784:	4584      	cmp	ip, r0
 8014786:	d31c      	bcc.n	80147c2 <_strtol_l.isra.0+0xb2>
 8014788:	d101      	bne.n	801478e <_strtol_l.isra.0+0x7e>
 801478a:	45a6      	cmp	lr, r4
 801478c:	db19      	blt.n	80147c2 <_strtol_l.isra.0+0xb2>
 801478e:	fb00 4006 	mla	r0, r0, r6, r4
 8014792:	2701      	movs	r7, #1
 8014794:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014798:	e7eb      	b.n	8014772 <_strtol_l.isra.0+0x62>
 801479a:	462f      	mov	r7, r5
 801479c:	e7bf      	b.n	801471e <_strtol_l.isra.0+0xe>
 801479e:	2c2b      	cmp	r4, #43	; 0x2b
 80147a0:	bf04      	itt	eq
 80147a2:	1cbd      	addeq	r5, r7, #2
 80147a4:	787c      	ldrbeq	r4, [r7, #1]
 80147a6:	461a      	mov	r2, r3
 80147a8:	e7c9      	b.n	801473e <_strtol_l.isra.0+0x2e>
 80147aa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80147ae:	2b19      	cmp	r3, #25
 80147b0:	d801      	bhi.n	80147b6 <_strtol_l.isra.0+0xa6>
 80147b2:	3c37      	subs	r4, #55	; 0x37
 80147b4:	e7e2      	b.n	801477c <_strtol_l.isra.0+0x6c>
 80147b6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80147ba:	2b19      	cmp	r3, #25
 80147bc:	d804      	bhi.n	80147c8 <_strtol_l.isra.0+0xb8>
 80147be:	3c57      	subs	r4, #87	; 0x57
 80147c0:	e7dc      	b.n	801477c <_strtol_l.isra.0+0x6c>
 80147c2:	f04f 37ff 	mov.w	r7, #4294967295
 80147c6:	e7e5      	b.n	8014794 <_strtol_l.isra.0+0x84>
 80147c8:	1c7b      	adds	r3, r7, #1
 80147ca:	d108      	bne.n	80147de <_strtol_l.isra.0+0xce>
 80147cc:	2322      	movs	r3, #34	; 0x22
 80147ce:	f8c8 3000 	str.w	r3, [r8]
 80147d2:	4608      	mov	r0, r1
 80147d4:	f1ba 0f00 	cmp.w	sl, #0
 80147d8:	d107      	bne.n	80147ea <_strtol_l.isra.0+0xda>
 80147da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147de:	b102      	cbz	r2, 80147e2 <_strtol_l.isra.0+0xd2>
 80147e0:	4240      	negs	r0, r0
 80147e2:	f1ba 0f00 	cmp.w	sl, #0
 80147e6:	d0f8      	beq.n	80147da <_strtol_l.isra.0+0xca>
 80147e8:	b10f      	cbz	r7, 80147ee <_strtol_l.isra.0+0xde>
 80147ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80147ee:	f8ca 9000 	str.w	r9, [sl]
 80147f2:	e7f2      	b.n	80147da <_strtol_l.isra.0+0xca>
 80147f4:	2430      	movs	r4, #48	; 0x30
 80147f6:	2e00      	cmp	r6, #0
 80147f8:	d1af      	bne.n	801475a <_strtol_l.isra.0+0x4a>
 80147fa:	2608      	movs	r6, #8
 80147fc:	e7ad      	b.n	801475a <_strtol_l.isra.0+0x4a>
 80147fe:	2c30      	cmp	r4, #48	; 0x30
 8014800:	d0a3      	beq.n	801474a <_strtol_l.isra.0+0x3a>
 8014802:	260a      	movs	r6, #10
 8014804:	e7a9      	b.n	801475a <_strtol_l.isra.0+0x4a>
	...

08014808 <_strtol_r>:
 8014808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801480a:	4c06      	ldr	r4, [pc, #24]	; (8014824 <_strtol_r+0x1c>)
 801480c:	4d06      	ldr	r5, [pc, #24]	; (8014828 <_strtol_r+0x20>)
 801480e:	6824      	ldr	r4, [r4, #0]
 8014810:	6a24      	ldr	r4, [r4, #32]
 8014812:	2c00      	cmp	r4, #0
 8014814:	bf08      	it	eq
 8014816:	462c      	moveq	r4, r5
 8014818:	9400      	str	r4, [sp, #0]
 801481a:	f7ff ff79 	bl	8014710 <_strtol_l.isra.0>
 801481e:	b003      	add	sp, #12
 8014820:	bd30      	pop	{r4, r5, pc}
 8014822:	bf00      	nop
 8014824:	20000018 	.word	0x20000018
 8014828:	2000007c 	.word	0x2000007c

0801482c <_strtoul_l.isra.0>:
 801482c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014830:	4680      	mov	r8, r0
 8014832:	4689      	mov	r9, r1
 8014834:	4692      	mov	sl, r2
 8014836:	461e      	mov	r6, r3
 8014838:	460f      	mov	r7, r1
 801483a:	463d      	mov	r5, r7
 801483c:	9808      	ldr	r0, [sp, #32]
 801483e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014842:	f001 fb99 	bl	8015f78 <__locale_ctype_ptr_l>
 8014846:	4420      	add	r0, r4
 8014848:	7843      	ldrb	r3, [r0, #1]
 801484a:	f013 0308 	ands.w	r3, r3, #8
 801484e:	d130      	bne.n	80148b2 <_strtoul_l.isra.0+0x86>
 8014850:	2c2d      	cmp	r4, #45	; 0x2d
 8014852:	d130      	bne.n	80148b6 <_strtoul_l.isra.0+0x8a>
 8014854:	787c      	ldrb	r4, [r7, #1]
 8014856:	1cbd      	adds	r5, r7, #2
 8014858:	2101      	movs	r1, #1
 801485a:	2e00      	cmp	r6, #0
 801485c:	d05c      	beq.n	8014918 <_strtoul_l.isra.0+0xec>
 801485e:	2e10      	cmp	r6, #16
 8014860:	d109      	bne.n	8014876 <_strtoul_l.isra.0+0x4a>
 8014862:	2c30      	cmp	r4, #48	; 0x30
 8014864:	d107      	bne.n	8014876 <_strtoul_l.isra.0+0x4a>
 8014866:	782b      	ldrb	r3, [r5, #0]
 8014868:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801486c:	2b58      	cmp	r3, #88	; 0x58
 801486e:	d14e      	bne.n	801490e <_strtoul_l.isra.0+0xe2>
 8014870:	786c      	ldrb	r4, [r5, #1]
 8014872:	2610      	movs	r6, #16
 8014874:	3502      	adds	r5, #2
 8014876:	f04f 32ff 	mov.w	r2, #4294967295
 801487a:	2300      	movs	r3, #0
 801487c:	fbb2 f2f6 	udiv	r2, r2, r6
 8014880:	fb06 fc02 	mul.w	ip, r6, r2
 8014884:	ea6f 0c0c 	mvn.w	ip, ip
 8014888:	4618      	mov	r0, r3
 801488a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801488e:	2f09      	cmp	r7, #9
 8014890:	d817      	bhi.n	80148c2 <_strtoul_l.isra.0+0x96>
 8014892:	463c      	mov	r4, r7
 8014894:	42a6      	cmp	r6, r4
 8014896:	dd23      	ble.n	80148e0 <_strtoul_l.isra.0+0xb4>
 8014898:	2b00      	cmp	r3, #0
 801489a:	db1e      	blt.n	80148da <_strtoul_l.isra.0+0xae>
 801489c:	4282      	cmp	r2, r0
 801489e:	d31c      	bcc.n	80148da <_strtoul_l.isra.0+0xae>
 80148a0:	d101      	bne.n	80148a6 <_strtoul_l.isra.0+0x7a>
 80148a2:	45a4      	cmp	ip, r4
 80148a4:	db19      	blt.n	80148da <_strtoul_l.isra.0+0xae>
 80148a6:	fb00 4006 	mla	r0, r0, r6, r4
 80148aa:	2301      	movs	r3, #1
 80148ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80148b0:	e7eb      	b.n	801488a <_strtoul_l.isra.0+0x5e>
 80148b2:	462f      	mov	r7, r5
 80148b4:	e7c1      	b.n	801483a <_strtoul_l.isra.0+0xe>
 80148b6:	2c2b      	cmp	r4, #43	; 0x2b
 80148b8:	bf04      	itt	eq
 80148ba:	1cbd      	addeq	r5, r7, #2
 80148bc:	787c      	ldrbeq	r4, [r7, #1]
 80148be:	4619      	mov	r1, r3
 80148c0:	e7cb      	b.n	801485a <_strtoul_l.isra.0+0x2e>
 80148c2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80148c6:	2f19      	cmp	r7, #25
 80148c8:	d801      	bhi.n	80148ce <_strtoul_l.isra.0+0xa2>
 80148ca:	3c37      	subs	r4, #55	; 0x37
 80148cc:	e7e2      	b.n	8014894 <_strtoul_l.isra.0+0x68>
 80148ce:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80148d2:	2f19      	cmp	r7, #25
 80148d4:	d804      	bhi.n	80148e0 <_strtoul_l.isra.0+0xb4>
 80148d6:	3c57      	subs	r4, #87	; 0x57
 80148d8:	e7dc      	b.n	8014894 <_strtoul_l.isra.0+0x68>
 80148da:	f04f 33ff 	mov.w	r3, #4294967295
 80148de:	e7e5      	b.n	80148ac <_strtoul_l.isra.0+0x80>
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	da09      	bge.n	80148f8 <_strtoul_l.isra.0+0xcc>
 80148e4:	2322      	movs	r3, #34	; 0x22
 80148e6:	f8c8 3000 	str.w	r3, [r8]
 80148ea:	f04f 30ff 	mov.w	r0, #4294967295
 80148ee:	f1ba 0f00 	cmp.w	sl, #0
 80148f2:	d107      	bne.n	8014904 <_strtoul_l.isra.0+0xd8>
 80148f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148f8:	b101      	cbz	r1, 80148fc <_strtoul_l.isra.0+0xd0>
 80148fa:	4240      	negs	r0, r0
 80148fc:	f1ba 0f00 	cmp.w	sl, #0
 8014900:	d0f8      	beq.n	80148f4 <_strtoul_l.isra.0+0xc8>
 8014902:	b10b      	cbz	r3, 8014908 <_strtoul_l.isra.0+0xdc>
 8014904:	f105 39ff 	add.w	r9, r5, #4294967295
 8014908:	f8ca 9000 	str.w	r9, [sl]
 801490c:	e7f2      	b.n	80148f4 <_strtoul_l.isra.0+0xc8>
 801490e:	2430      	movs	r4, #48	; 0x30
 8014910:	2e00      	cmp	r6, #0
 8014912:	d1b0      	bne.n	8014876 <_strtoul_l.isra.0+0x4a>
 8014914:	2608      	movs	r6, #8
 8014916:	e7ae      	b.n	8014876 <_strtoul_l.isra.0+0x4a>
 8014918:	2c30      	cmp	r4, #48	; 0x30
 801491a:	d0a4      	beq.n	8014866 <_strtoul_l.isra.0+0x3a>
 801491c:	260a      	movs	r6, #10
 801491e:	e7aa      	b.n	8014876 <_strtoul_l.isra.0+0x4a>

08014920 <_strtoul_r>:
 8014920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014922:	4c06      	ldr	r4, [pc, #24]	; (801493c <_strtoul_r+0x1c>)
 8014924:	4d06      	ldr	r5, [pc, #24]	; (8014940 <_strtoul_r+0x20>)
 8014926:	6824      	ldr	r4, [r4, #0]
 8014928:	6a24      	ldr	r4, [r4, #32]
 801492a:	2c00      	cmp	r4, #0
 801492c:	bf08      	it	eq
 801492e:	462c      	moveq	r4, r5
 8014930:	9400      	str	r4, [sp, #0]
 8014932:	f7ff ff7b 	bl	801482c <_strtoul_l.isra.0>
 8014936:	b003      	add	sp, #12
 8014938:	bd30      	pop	{r4, r5, pc}
 801493a:	bf00      	nop
 801493c:	20000018 	.word	0x20000018
 8014940:	2000007c 	.word	0x2000007c

08014944 <__submore>:
 8014944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014948:	460c      	mov	r4, r1
 801494a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801494c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014950:	4299      	cmp	r1, r3
 8014952:	d11d      	bne.n	8014990 <__submore+0x4c>
 8014954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014958:	f7fd fa12 	bl	8011d80 <_malloc_r>
 801495c:	b918      	cbnz	r0, 8014966 <__submore+0x22>
 801495e:	f04f 30ff 	mov.w	r0, #4294967295
 8014962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801496a:	63a3      	str	r3, [r4, #56]	; 0x38
 801496c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014970:	6360      	str	r0, [r4, #52]	; 0x34
 8014972:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014976:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801497a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801497e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014982:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014986:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801498a:	6020      	str	r0, [r4, #0]
 801498c:	2000      	movs	r0, #0
 801498e:	e7e8      	b.n	8014962 <__submore+0x1e>
 8014990:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014992:	0077      	lsls	r7, r6, #1
 8014994:	463a      	mov	r2, r7
 8014996:	f001 ff64 	bl	8016862 <_realloc_r>
 801499a:	4605      	mov	r5, r0
 801499c:	2800      	cmp	r0, #0
 801499e:	d0de      	beq.n	801495e <__submore+0x1a>
 80149a0:	eb00 0806 	add.w	r8, r0, r6
 80149a4:	4601      	mov	r1, r0
 80149a6:	4632      	mov	r2, r6
 80149a8:	4640      	mov	r0, r8
 80149aa:	f7fd f987 	bl	8011cbc <memcpy>
 80149ae:	f8c4 8000 	str.w	r8, [r4]
 80149b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80149b6:	e7e9      	b.n	801498c <__submore+0x48>

080149b8 <_ungetc_r>:
 80149b8:	1c4b      	adds	r3, r1, #1
 80149ba:	b570      	push	{r4, r5, r6, lr}
 80149bc:	4606      	mov	r6, r0
 80149be:	460d      	mov	r5, r1
 80149c0:	4614      	mov	r4, r2
 80149c2:	d103      	bne.n	80149cc <_ungetc_r+0x14>
 80149c4:	f04f 35ff 	mov.w	r5, #4294967295
 80149c8:	4628      	mov	r0, r5
 80149ca:	bd70      	pop	{r4, r5, r6, pc}
 80149cc:	b118      	cbz	r0, 80149d6 <_ungetc_r+0x1e>
 80149ce:	6983      	ldr	r3, [r0, #24]
 80149d0:	b90b      	cbnz	r3, 80149d6 <_ungetc_r+0x1e>
 80149d2:	f7fd f845 	bl	8011a60 <__sinit>
 80149d6:	4b2e      	ldr	r3, [pc, #184]	; (8014a90 <_ungetc_r+0xd8>)
 80149d8:	429c      	cmp	r4, r3
 80149da:	d12c      	bne.n	8014a36 <_ungetc_r+0x7e>
 80149dc:	6874      	ldr	r4, [r6, #4]
 80149de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149e2:	f023 0320 	bic.w	r3, r3, #32
 80149e6:	81a3      	strh	r3, [r4, #12]
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	0759      	lsls	r1, r3, #29
 80149ec:	d413      	bmi.n	8014a16 <_ungetc_r+0x5e>
 80149ee:	06da      	lsls	r2, r3, #27
 80149f0:	d5e8      	bpl.n	80149c4 <_ungetc_r+0xc>
 80149f2:	071b      	lsls	r3, r3, #28
 80149f4:	d50b      	bpl.n	8014a0e <_ungetc_r+0x56>
 80149f6:	4621      	mov	r1, r4
 80149f8:	4630      	mov	r0, r6
 80149fa:	f7fc ffb5 	bl	8011968 <_fflush_r>
 80149fe:	2800      	cmp	r0, #0
 8014a00:	d1e0      	bne.n	80149c4 <_ungetc_r+0xc>
 8014a02:	89a3      	ldrh	r3, [r4, #12]
 8014a04:	60a0      	str	r0, [r4, #8]
 8014a06:	f023 0308 	bic.w	r3, r3, #8
 8014a0a:	81a3      	strh	r3, [r4, #12]
 8014a0c:	61a0      	str	r0, [r4, #24]
 8014a0e:	89a3      	ldrh	r3, [r4, #12]
 8014a10:	f043 0304 	orr.w	r3, r3, #4
 8014a14:	81a3      	strh	r3, [r4, #12]
 8014a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014a18:	6862      	ldr	r2, [r4, #4]
 8014a1a:	b2ed      	uxtb	r5, r5
 8014a1c:	b1e3      	cbz	r3, 8014a58 <_ungetc_r+0xa0>
 8014a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014a20:	4293      	cmp	r3, r2
 8014a22:	dd12      	ble.n	8014a4a <_ungetc_r+0x92>
 8014a24:	6823      	ldr	r3, [r4, #0]
 8014a26:	1e5a      	subs	r2, r3, #1
 8014a28:	6022      	str	r2, [r4, #0]
 8014a2a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014a2e:	6863      	ldr	r3, [r4, #4]
 8014a30:	3301      	adds	r3, #1
 8014a32:	6063      	str	r3, [r4, #4]
 8014a34:	e7c8      	b.n	80149c8 <_ungetc_r+0x10>
 8014a36:	4b17      	ldr	r3, [pc, #92]	; (8014a94 <_ungetc_r+0xdc>)
 8014a38:	429c      	cmp	r4, r3
 8014a3a:	d101      	bne.n	8014a40 <_ungetc_r+0x88>
 8014a3c:	68b4      	ldr	r4, [r6, #8]
 8014a3e:	e7ce      	b.n	80149de <_ungetc_r+0x26>
 8014a40:	4b15      	ldr	r3, [pc, #84]	; (8014a98 <_ungetc_r+0xe0>)
 8014a42:	429c      	cmp	r4, r3
 8014a44:	bf08      	it	eq
 8014a46:	68f4      	ldreq	r4, [r6, #12]
 8014a48:	e7c9      	b.n	80149de <_ungetc_r+0x26>
 8014a4a:	4621      	mov	r1, r4
 8014a4c:	4630      	mov	r0, r6
 8014a4e:	f7ff ff79 	bl	8014944 <__submore>
 8014a52:	2800      	cmp	r0, #0
 8014a54:	d0e6      	beq.n	8014a24 <_ungetc_r+0x6c>
 8014a56:	e7b5      	b.n	80149c4 <_ungetc_r+0xc>
 8014a58:	6921      	ldr	r1, [r4, #16]
 8014a5a:	6823      	ldr	r3, [r4, #0]
 8014a5c:	b151      	cbz	r1, 8014a74 <_ungetc_r+0xbc>
 8014a5e:	4299      	cmp	r1, r3
 8014a60:	d208      	bcs.n	8014a74 <_ungetc_r+0xbc>
 8014a62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014a66:	42a9      	cmp	r1, r5
 8014a68:	d104      	bne.n	8014a74 <_ungetc_r+0xbc>
 8014a6a:	3b01      	subs	r3, #1
 8014a6c:	3201      	adds	r2, #1
 8014a6e:	6023      	str	r3, [r4, #0]
 8014a70:	6062      	str	r2, [r4, #4]
 8014a72:	e7a9      	b.n	80149c8 <_ungetc_r+0x10>
 8014a74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014a78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8014a7e:	2303      	movs	r3, #3
 8014a80:	63a3      	str	r3, [r4, #56]	; 0x38
 8014a82:	4623      	mov	r3, r4
 8014a84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014a88:	6023      	str	r3, [r4, #0]
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	e7d1      	b.n	8014a32 <_ungetc_r+0x7a>
 8014a8e:	bf00      	nop
 8014a90:	08016ffc 	.word	0x08016ffc
 8014a94:	0801701c 	.word	0x0801701c
 8014a98:	08016fdc 	.word	0x08016fdc

08014a9c <__swbuf_r>:
 8014a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a9e:	460e      	mov	r6, r1
 8014aa0:	4614      	mov	r4, r2
 8014aa2:	4605      	mov	r5, r0
 8014aa4:	b118      	cbz	r0, 8014aae <__swbuf_r+0x12>
 8014aa6:	6983      	ldr	r3, [r0, #24]
 8014aa8:	b90b      	cbnz	r3, 8014aae <__swbuf_r+0x12>
 8014aaa:	f7fc ffd9 	bl	8011a60 <__sinit>
 8014aae:	4b21      	ldr	r3, [pc, #132]	; (8014b34 <__swbuf_r+0x98>)
 8014ab0:	429c      	cmp	r4, r3
 8014ab2:	d12a      	bne.n	8014b0a <__swbuf_r+0x6e>
 8014ab4:	686c      	ldr	r4, [r5, #4]
 8014ab6:	69a3      	ldr	r3, [r4, #24]
 8014ab8:	60a3      	str	r3, [r4, #8]
 8014aba:	89a3      	ldrh	r3, [r4, #12]
 8014abc:	071a      	lsls	r2, r3, #28
 8014abe:	d52e      	bpl.n	8014b1e <__swbuf_r+0x82>
 8014ac0:	6923      	ldr	r3, [r4, #16]
 8014ac2:	b363      	cbz	r3, 8014b1e <__swbuf_r+0x82>
 8014ac4:	6923      	ldr	r3, [r4, #16]
 8014ac6:	6820      	ldr	r0, [r4, #0]
 8014ac8:	1ac0      	subs	r0, r0, r3
 8014aca:	6963      	ldr	r3, [r4, #20]
 8014acc:	b2f6      	uxtb	r6, r6
 8014ace:	4283      	cmp	r3, r0
 8014ad0:	4637      	mov	r7, r6
 8014ad2:	dc04      	bgt.n	8014ade <__swbuf_r+0x42>
 8014ad4:	4621      	mov	r1, r4
 8014ad6:	4628      	mov	r0, r5
 8014ad8:	f7fc ff46 	bl	8011968 <_fflush_r>
 8014adc:	bb28      	cbnz	r0, 8014b2a <__swbuf_r+0x8e>
 8014ade:	68a3      	ldr	r3, [r4, #8]
 8014ae0:	3b01      	subs	r3, #1
 8014ae2:	60a3      	str	r3, [r4, #8]
 8014ae4:	6823      	ldr	r3, [r4, #0]
 8014ae6:	1c5a      	adds	r2, r3, #1
 8014ae8:	6022      	str	r2, [r4, #0]
 8014aea:	701e      	strb	r6, [r3, #0]
 8014aec:	6963      	ldr	r3, [r4, #20]
 8014aee:	3001      	adds	r0, #1
 8014af0:	4283      	cmp	r3, r0
 8014af2:	d004      	beq.n	8014afe <__swbuf_r+0x62>
 8014af4:	89a3      	ldrh	r3, [r4, #12]
 8014af6:	07db      	lsls	r3, r3, #31
 8014af8:	d519      	bpl.n	8014b2e <__swbuf_r+0x92>
 8014afa:	2e0a      	cmp	r6, #10
 8014afc:	d117      	bne.n	8014b2e <__swbuf_r+0x92>
 8014afe:	4621      	mov	r1, r4
 8014b00:	4628      	mov	r0, r5
 8014b02:	f7fc ff31 	bl	8011968 <_fflush_r>
 8014b06:	b190      	cbz	r0, 8014b2e <__swbuf_r+0x92>
 8014b08:	e00f      	b.n	8014b2a <__swbuf_r+0x8e>
 8014b0a:	4b0b      	ldr	r3, [pc, #44]	; (8014b38 <__swbuf_r+0x9c>)
 8014b0c:	429c      	cmp	r4, r3
 8014b0e:	d101      	bne.n	8014b14 <__swbuf_r+0x78>
 8014b10:	68ac      	ldr	r4, [r5, #8]
 8014b12:	e7d0      	b.n	8014ab6 <__swbuf_r+0x1a>
 8014b14:	4b09      	ldr	r3, [pc, #36]	; (8014b3c <__swbuf_r+0xa0>)
 8014b16:	429c      	cmp	r4, r3
 8014b18:	bf08      	it	eq
 8014b1a:	68ec      	ldreq	r4, [r5, #12]
 8014b1c:	e7cb      	b.n	8014ab6 <__swbuf_r+0x1a>
 8014b1e:	4621      	mov	r1, r4
 8014b20:	4628      	mov	r0, r5
 8014b22:	f000 f81f 	bl	8014b64 <__swsetup_r>
 8014b26:	2800      	cmp	r0, #0
 8014b28:	d0cc      	beq.n	8014ac4 <__swbuf_r+0x28>
 8014b2a:	f04f 37ff 	mov.w	r7, #4294967295
 8014b2e:	4638      	mov	r0, r7
 8014b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b32:	bf00      	nop
 8014b34:	08016ffc 	.word	0x08016ffc
 8014b38:	0801701c 	.word	0x0801701c
 8014b3c:	08016fdc 	.word	0x08016fdc

08014b40 <_write_r>:
 8014b40:	b538      	push	{r3, r4, r5, lr}
 8014b42:	4c07      	ldr	r4, [pc, #28]	; (8014b60 <_write_r+0x20>)
 8014b44:	4605      	mov	r5, r0
 8014b46:	4608      	mov	r0, r1
 8014b48:	4611      	mov	r1, r2
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	6022      	str	r2, [r4, #0]
 8014b4e:	461a      	mov	r2, r3
 8014b50:	f7f9 f82a 	bl	800dba8 <_write>
 8014b54:	1c43      	adds	r3, r0, #1
 8014b56:	d102      	bne.n	8014b5e <_write_r+0x1e>
 8014b58:	6823      	ldr	r3, [r4, #0]
 8014b5a:	b103      	cbz	r3, 8014b5e <_write_r+0x1e>
 8014b5c:	602b      	str	r3, [r5, #0]
 8014b5e:	bd38      	pop	{r3, r4, r5, pc}
 8014b60:	20002044 	.word	0x20002044

08014b64 <__swsetup_r>:
 8014b64:	4b32      	ldr	r3, [pc, #200]	; (8014c30 <__swsetup_r+0xcc>)
 8014b66:	b570      	push	{r4, r5, r6, lr}
 8014b68:	681d      	ldr	r5, [r3, #0]
 8014b6a:	4606      	mov	r6, r0
 8014b6c:	460c      	mov	r4, r1
 8014b6e:	b125      	cbz	r5, 8014b7a <__swsetup_r+0x16>
 8014b70:	69ab      	ldr	r3, [r5, #24]
 8014b72:	b913      	cbnz	r3, 8014b7a <__swsetup_r+0x16>
 8014b74:	4628      	mov	r0, r5
 8014b76:	f7fc ff73 	bl	8011a60 <__sinit>
 8014b7a:	4b2e      	ldr	r3, [pc, #184]	; (8014c34 <__swsetup_r+0xd0>)
 8014b7c:	429c      	cmp	r4, r3
 8014b7e:	d10f      	bne.n	8014ba0 <__swsetup_r+0x3c>
 8014b80:	686c      	ldr	r4, [r5, #4]
 8014b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b86:	b29a      	uxth	r2, r3
 8014b88:	0715      	lsls	r5, r2, #28
 8014b8a:	d42c      	bmi.n	8014be6 <__swsetup_r+0x82>
 8014b8c:	06d0      	lsls	r0, r2, #27
 8014b8e:	d411      	bmi.n	8014bb4 <__swsetup_r+0x50>
 8014b90:	2209      	movs	r2, #9
 8014b92:	6032      	str	r2, [r6, #0]
 8014b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b98:	81a3      	strh	r3, [r4, #12]
 8014b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b9e:	e03e      	b.n	8014c1e <__swsetup_r+0xba>
 8014ba0:	4b25      	ldr	r3, [pc, #148]	; (8014c38 <__swsetup_r+0xd4>)
 8014ba2:	429c      	cmp	r4, r3
 8014ba4:	d101      	bne.n	8014baa <__swsetup_r+0x46>
 8014ba6:	68ac      	ldr	r4, [r5, #8]
 8014ba8:	e7eb      	b.n	8014b82 <__swsetup_r+0x1e>
 8014baa:	4b24      	ldr	r3, [pc, #144]	; (8014c3c <__swsetup_r+0xd8>)
 8014bac:	429c      	cmp	r4, r3
 8014bae:	bf08      	it	eq
 8014bb0:	68ec      	ldreq	r4, [r5, #12]
 8014bb2:	e7e6      	b.n	8014b82 <__swsetup_r+0x1e>
 8014bb4:	0751      	lsls	r1, r2, #29
 8014bb6:	d512      	bpl.n	8014bde <__swsetup_r+0x7a>
 8014bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bba:	b141      	cbz	r1, 8014bce <__swsetup_r+0x6a>
 8014bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014bc0:	4299      	cmp	r1, r3
 8014bc2:	d002      	beq.n	8014bca <__swsetup_r+0x66>
 8014bc4:	4630      	mov	r0, r6
 8014bc6:	f7fd f88d 	bl	8011ce4 <_free_r>
 8014bca:	2300      	movs	r3, #0
 8014bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8014bce:	89a3      	ldrh	r3, [r4, #12]
 8014bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014bd4:	81a3      	strh	r3, [r4, #12]
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	6063      	str	r3, [r4, #4]
 8014bda:	6923      	ldr	r3, [r4, #16]
 8014bdc:	6023      	str	r3, [r4, #0]
 8014bde:	89a3      	ldrh	r3, [r4, #12]
 8014be0:	f043 0308 	orr.w	r3, r3, #8
 8014be4:	81a3      	strh	r3, [r4, #12]
 8014be6:	6923      	ldr	r3, [r4, #16]
 8014be8:	b94b      	cbnz	r3, 8014bfe <__swsetup_r+0x9a>
 8014bea:	89a3      	ldrh	r3, [r4, #12]
 8014bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014bf4:	d003      	beq.n	8014bfe <__swsetup_r+0x9a>
 8014bf6:	4621      	mov	r1, r4
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	f7fd f81f 	bl	8011c3c <__smakebuf_r>
 8014bfe:	89a2      	ldrh	r2, [r4, #12]
 8014c00:	f012 0301 	ands.w	r3, r2, #1
 8014c04:	d00c      	beq.n	8014c20 <__swsetup_r+0xbc>
 8014c06:	2300      	movs	r3, #0
 8014c08:	60a3      	str	r3, [r4, #8]
 8014c0a:	6963      	ldr	r3, [r4, #20]
 8014c0c:	425b      	negs	r3, r3
 8014c0e:	61a3      	str	r3, [r4, #24]
 8014c10:	6923      	ldr	r3, [r4, #16]
 8014c12:	b953      	cbnz	r3, 8014c2a <__swsetup_r+0xc6>
 8014c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c18:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014c1c:	d1ba      	bne.n	8014b94 <__swsetup_r+0x30>
 8014c1e:	bd70      	pop	{r4, r5, r6, pc}
 8014c20:	0792      	lsls	r2, r2, #30
 8014c22:	bf58      	it	pl
 8014c24:	6963      	ldrpl	r3, [r4, #20]
 8014c26:	60a3      	str	r3, [r4, #8]
 8014c28:	e7f2      	b.n	8014c10 <__swsetup_r+0xac>
 8014c2a:	2000      	movs	r0, #0
 8014c2c:	e7f7      	b.n	8014c1e <__swsetup_r+0xba>
 8014c2e:	bf00      	nop
 8014c30:	20000018 	.word	0x20000018
 8014c34:	08016ffc 	.word	0x08016ffc
 8014c38:	0801701c 	.word	0x0801701c
 8014c3c:	08016fdc 	.word	0x08016fdc

08014c40 <_close_r>:
 8014c40:	b538      	push	{r3, r4, r5, lr}
 8014c42:	4c06      	ldr	r4, [pc, #24]	; (8014c5c <_close_r+0x1c>)
 8014c44:	2300      	movs	r3, #0
 8014c46:	4605      	mov	r5, r0
 8014c48:	4608      	mov	r0, r1
 8014c4a:	6023      	str	r3, [r4, #0]
 8014c4c:	f7f8 ffba 	bl	800dbc4 <_close>
 8014c50:	1c43      	adds	r3, r0, #1
 8014c52:	d102      	bne.n	8014c5a <_close_r+0x1a>
 8014c54:	6823      	ldr	r3, [r4, #0]
 8014c56:	b103      	cbz	r3, 8014c5a <_close_r+0x1a>
 8014c58:	602b      	str	r3, [r5, #0]
 8014c5a:	bd38      	pop	{r3, r4, r5, pc}
 8014c5c:	20002044 	.word	0x20002044

08014c60 <quorem>:
 8014c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c64:	6903      	ldr	r3, [r0, #16]
 8014c66:	690c      	ldr	r4, [r1, #16]
 8014c68:	42a3      	cmp	r3, r4
 8014c6a:	4680      	mov	r8, r0
 8014c6c:	f2c0 8082 	blt.w	8014d74 <quorem+0x114>
 8014c70:	3c01      	subs	r4, #1
 8014c72:	f101 0714 	add.w	r7, r1, #20
 8014c76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014c7a:	f100 0614 	add.w	r6, r0, #20
 8014c7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014c82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014c86:	eb06 030c 	add.w	r3, r6, ip
 8014c8a:	3501      	adds	r5, #1
 8014c8c:	eb07 090c 	add.w	r9, r7, ip
 8014c90:	9301      	str	r3, [sp, #4]
 8014c92:	fbb0 f5f5 	udiv	r5, r0, r5
 8014c96:	b395      	cbz	r5, 8014cfe <quorem+0x9e>
 8014c98:	f04f 0a00 	mov.w	sl, #0
 8014c9c:	4638      	mov	r0, r7
 8014c9e:	46b6      	mov	lr, r6
 8014ca0:	46d3      	mov	fp, sl
 8014ca2:	f850 2b04 	ldr.w	r2, [r0], #4
 8014ca6:	b293      	uxth	r3, r2
 8014ca8:	fb05 a303 	mla	r3, r5, r3, sl
 8014cac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	ebab 0303 	sub.w	r3, fp, r3
 8014cb6:	0c12      	lsrs	r2, r2, #16
 8014cb8:	f8de b000 	ldr.w	fp, [lr]
 8014cbc:	fb05 a202 	mla	r2, r5, r2, sl
 8014cc0:	fa13 f38b 	uxtah	r3, r3, fp
 8014cc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014cc8:	fa1f fb82 	uxth.w	fp, r2
 8014ccc:	f8de 2000 	ldr.w	r2, [lr]
 8014cd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014cd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cde:	4581      	cmp	r9, r0
 8014ce0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014ce4:	f84e 3b04 	str.w	r3, [lr], #4
 8014ce8:	d2db      	bcs.n	8014ca2 <quorem+0x42>
 8014cea:	f856 300c 	ldr.w	r3, [r6, ip]
 8014cee:	b933      	cbnz	r3, 8014cfe <quorem+0x9e>
 8014cf0:	9b01      	ldr	r3, [sp, #4]
 8014cf2:	3b04      	subs	r3, #4
 8014cf4:	429e      	cmp	r6, r3
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	d330      	bcc.n	8014d5c <quorem+0xfc>
 8014cfa:	f8c8 4010 	str.w	r4, [r8, #16]
 8014cfe:	4640      	mov	r0, r8
 8014d00:	f001 fbf6 	bl	80164f0 <__mcmp>
 8014d04:	2800      	cmp	r0, #0
 8014d06:	db25      	blt.n	8014d54 <quorem+0xf4>
 8014d08:	3501      	adds	r5, #1
 8014d0a:	4630      	mov	r0, r6
 8014d0c:	f04f 0c00 	mov.w	ip, #0
 8014d10:	f857 2b04 	ldr.w	r2, [r7], #4
 8014d14:	f8d0 e000 	ldr.w	lr, [r0]
 8014d18:	b293      	uxth	r3, r2
 8014d1a:	ebac 0303 	sub.w	r3, ip, r3
 8014d1e:	0c12      	lsrs	r2, r2, #16
 8014d20:	fa13 f38e 	uxtah	r3, r3, lr
 8014d24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014d2c:	b29b      	uxth	r3, r3
 8014d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d32:	45b9      	cmp	r9, r7
 8014d34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014d38:	f840 3b04 	str.w	r3, [r0], #4
 8014d3c:	d2e8      	bcs.n	8014d10 <quorem+0xb0>
 8014d3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014d42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014d46:	b92a      	cbnz	r2, 8014d54 <quorem+0xf4>
 8014d48:	3b04      	subs	r3, #4
 8014d4a:	429e      	cmp	r6, r3
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	d30b      	bcc.n	8014d68 <quorem+0x108>
 8014d50:	f8c8 4010 	str.w	r4, [r8, #16]
 8014d54:	4628      	mov	r0, r5
 8014d56:	b003      	add	sp, #12
 8014d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5c:	6812      	ldr	r2, [r2, #0]
 8014d5e:	3b04      	subs	r3, #4
 8014d60:	2a00      	cmp	r2, #0
 8014d62:	d1ca      	bne.n	8014cfa <quorem+0x9a>
 8014d64:	3c01      	subs	r4, #1
 8014d66:	e7c5      	b.n	8014cf4 <quorem+0x94>
 8014d68:	6812      	ldr	r2, [r2, #0]
 8014d6a:	3b04      	subs	r3, #4
 8014d6c:	2a00      	cmp	r2, #0
 8014d6e:	d1ef      	bne.n	8014d50 <quorem+0xf0>
 8014d70:	3c01      	subs	r4, #1
 8014d72:	e7ea      	b.n	8014d4a <quorem+0xea>
 8014d74:	2000      	movs	r0, #0
 8014d76:	e7ee      	b.n	8014d56 <quorem+0xf6>

08014d78 <_dtoa_r>:
 8014d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d7c:	ec57 6b10 	vmov	r6, r7, d0
 8014d80:	b097      	sub	sp, #92	; 0x5c
 8014d82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014d84:	9106      	str	r1, [sp, #24]
 8014d86:	4604      	mov	r4, r0
 8014d88:	920b      	str	r2, [sp, #44]	; 0x2c
 8014d8a:	9312      	str	r3, [sp, #72]	; 0x48
 8014d8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014d90:	e9cd 6700 	strd	r6, r7, [sp]
 8014d94:	b93d      	cbnz	r5, 8014da6 <_dtoa_r+0x2e>
 8014d96:	2010      	movs	r0, #16
 8014d98:	f001 f922 	bl	8015fe0 <malloc>
 8014d9c:	6260      	str	r0, [r4, #36]	; 0x24
 8014d9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014da2:	6005      	str	r5, [r0, #0]
 8014da4:	60c5      	str	r5, [r0, #12]
 8014da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014da8:	6819      	ldr	r1, [r3, #0]
 8014daa:	b151      	cbz	r1, 8014dc2 <_dtoa_r+0x4a>
 8014dac:	685a      	ldr	r2, [r3, #4]
 8014dae:	604a      	str	r2, [r1, #4]
 8014db0:	2301      	movs	r3, #1
 8014db2:	4093      	lsls	r3, r2
 8014db4:	608b      	str	r3, [r1, #8]
 8014db6:	4620      	mov	r0, r4
 8014db8:	f001 f97b 	bl	80160b2 <_Bfree>
 8014dbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	601a      	str	r2, [r3, #0]
 8014dc2:	1e3b      	subs	r3, r7, #0
 8014dc4:	bfbb      	ittet	lt
 8014dc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014dca:	9301      	strlt	r3, [sp, #4]
 8014dcc:	2300      	movge	r3, #0
 8014dce:	2201      	movlt	r2, #1
 8014dd0:	bfac      	ite	ge
 8014dd2:	f8c8 3000 	strge.w	r3, [r8]
 8014dd6:	f8c8 2000 	strlt.w	r2, [r8]
 8014dda:	4baf      	ldr	r3, [pc, #700]	; (8015098 <_dtoa_r+0x320>)
 8014ddc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014de0:	ea33 0308 	bics.w	r3, r3, r8
 8014de4:	d114      	bne.n	8014e10 <_dtoa_r+0x98>
 8014de6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014de8:	f242 730f 	movw	r3, #9999	; 0x270f
 8014dec:	6013      	str	r3, [r2, #0]
 8014dee:	9b00      	ldr	r3, [sp, #0]
 8014df0:	b923      	cbnz	r3, 8014dfc <_dtoa_r+0x84>
 8014df2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014df6:	2800      	cmp	r0, #0
 8014df8:	f000 8542 	beq.w	8015880 <_dtoa_r+0xb08>
 8014dfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014dfe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80150ac <_dtoa_r+0x334>
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	f000 8544 	beq.w	8015890 <_dtoa_r+0xb18>
 8014e08:	f10b 0303 	add.w	r3, fp, #3
 8014e0c:	f000 bd3e 	b.w	801588c <_dtoa_r+0xb14>
 8014e10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014e14:	2200      	movs	r2, #0
 8014e16:	2300      	movs	r3, #0
 8014e18:	4630      	mov	r0, r6
 8014e1a:	4639      	mov	r1, r7
 8014e1c:	f7f3 fd8c 	bl	8008938 <__aeabi_dcmpeq>
 8014e20:	4681      	mov	r9, r0
 8014e22:	b168      	cbz	r0, 8014e40 <_dtoa_r+0xc8>
 8014e24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e26:	2301      	movs	r3, #1
 8014e28:	6013      	str	r3, [r2, #0]
 8014e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	f000 8524 	beq.w	801587a <_dtoa_r+0xb02>
 8014e32:	4b9a      	ldr	r3, [pc, #616]	; (801509c <_dtoa_r+0x324>)
 8014e34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014e36:	f103 3bff 	add.w	fp, r3, #4294967295
 8014e3a:	6013      	str	r3, [r2, #0]
 8014e3c:	f000 bd28 	b.w	8015890 <_dtoa_r+0xb18>
 8014e40:	aa14      	add	r2, sp, #80	; 0x50
 8014e42:	a915      	add	r1, sp, #84	; 0x54
 8014e44:	ec47 6b10 	vmov	d0, r6, r7
 8014e48:	4620      	mov	r0, r4
 8014e4a:	f001 fc3f 	bl	80166cc <__d2b>
 8014e4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014e52:	9004      	str	r0, [sp, #16]
 8014e54:	2d00      	cmp	r5, #0
 8014e56:	d07c      	beq.n	8014f52 <_dtoa_r+0x1da>
 8014e58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014e5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014e60:	46b2      	mov	sl, r6
 8014e62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014e66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014e6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014e6e:	2200      	movs	r2, #0
 8014e70:	4b8b      	ldr	r3, [pc, #556]	; (80150a0 <_dtoa_r+0x328>)
 8014e72:	4650      	mov	r0, sl
 8014e74:	4659      	mov	r1, fp
 8014e76:	f7f3 f93f 	bl	80080f8 <__aeabi_dsub>
 8014e7a:	a381      	add	r3, pc, #516	; (adr r3, 8015080 <_dtoa_r+0x308>)
 8014e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e80:	f7f3 faf2 	bl	8008468 <__aeabi_dmul>
 8014e84:	a380      	add	r3, pc, #512	; (adr r3, 8015088 <_dtoa_r+0x310>)
 8014e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8a:	f7f3 f937 	bl	80080fc <__adddf3>
 8014e8e:	4606      	mov	r6, r0
 8014e90:	4628      	mov	r0, r5
 8014e92:	460f      	mov	r7, r1
 8014e94:	f7f3 fa7e 	bl	8008394 <__aeabi_i2d>
 8014e98:	a37d      	add	r3, pc, #500	; (adr r3, 8015090 <_dtoa_r+0x318>)
 8014e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e9e:	f7f3 fae3 	bl	8008468 <__aeabi_dmul>
 8014ea2:	4602      	mov	r2, r0
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	4630      	mov	r0, r6
 8014ea8:	4639      	mov	r1, r7
 8014eaa:	f7f3 f927 	bl	80080fc <__adddf3>
 8014eae:	4606      	mov	r6, r0
 8014eb0:	460f      	mov	r7, r1
 8014eb2:	f7f3 fd89 	bl	80089c8 <__aeabi_d2iz>
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	4682      	mov	sl, r0
 8014eba:	2300      	movs	r3, #0
 8014ebc:	4630      	mov	r0, r6
 8014ebe:	4639      	mov	r1, r7
 8014ec0:	f7f3 fd44 	bl	800894c <__aeabi_dcmplt>
 8014ec4:	b148      	cbz	r0, 8014eda <_dtoa_r+0x162>
 8014ec6:	4650      	mov	r0, sl
 8014ec8:	f7f3 fa64 	bl	8008394 <__aeabi_i2d>
 8014ecc:	4632      	mov	r2, r6
 8014ece:	463b      	mov	r3, r7
 8014ed0:	f7f3 fd32 	bl	8008938 <__aeabi_dcmpeq>
 8014ed4:	b908      	cbnz	r0, 8014eda <_dtoa_r+0x162>
 8014ed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014eda:	f1ba 0f16 	cmp.w	sl, #22
 8014ede:	d859      	bhi.n	8014f94 <_dtoa_r+0x21c>
 8014ee0:	4970      	ldr	r1, [pc, #448]	; (80150a4 <_dtoa_r+0x32c>)
 8014ee2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014ee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014eea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014eee:	f7f3 fd4b 	bl	8008988 <__aeabi_dcmpgt>
 8014ef2:	2800      	cmp	r0, #0
 8014ef4:	d050      	beq.n	8014f98 <_dtoa_r+0x220>
 8014ef6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014efa:	2300      	movs	r3, #0
 8014efc:	930f      	str	r3, [sp, #60]	; 0x3c
 8014efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014f00:	1b5d      	subs	r5, r3, r5
 8014f02:	f1b5 0801 	subs.w	r8, r5, #1
 8014f06:	bf49      	itett	mi
 8014f08:	f1c5 0301 	rsbmi	r3, r5, #1
 8014f0c:	2300      	movpl	r3, #0
 8014f0e:	9305      	strmi	r3, [sp, #20]
 8014f10:	f04f 0800 	movmi.w	r8, #0
 8014f14:	bf58      	it	pl
 8014f16:	9305      	strpl	r3, [sp, #20]
 8014f18:	f1ba 0f00 	cmp.w	sl, #0
 8014f1c:	db3e      	blt.n	8014f9c <_dtoa_r+0x224>
 8014f1e:	2300      	movs	r3, #0
 8014f20:	44d0      	add	r8, sl
 8014f22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014f26:	9307      	str	r3, [sp, #28]
 8014f28:	9b06      	ldr	r3, [sp, #24]
 8014f2a:	2b09      	cmp	r3, #9
 8014f2c:	f200 8090 	bhi.w	8015050 <_dtoa_r+0x2d8>
 8014f30:	2b05      	cmp	r3, #5
 8014f32:	bfc4      	itt	gt
 8014f34:	3b04      	subgt	r3, #4
 8014f36:	9306      	strgt	r3, [sp, #24]
 8014f38:	9b06      	ldr	r3, [sp, #24]
 8014f3a:	f1a3 0302 	sub.w	r3, r3, #2
 8014f3e:	bfcc      	ite	gt
 8014f40:	2500      	movgt	r5, #0
 8014f42:	2501      	movle	r5, #1
 8014f44:	2b03      	cmp	r3, #3
 8014f46:	f200 808f 	bhi.w	8015068 <_dtoa_r+0x2f0>
 8014f4a:	e8df f003 	tbb	[pc, r3]
 8014f4e:	7f7d      	.short	0x7f7d
 8014f50:	7131      	.short	0x7131
 8014f52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014f56:	441d      	add	r5, r3
 8014f58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014f5c:	2820      	cmp	r0, #32
 8014f5e:	dd13      	ble.n	8014f88 <_dtoa_r+0x210>
 8014f60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014f64:	9b00      	ldr	r3, [sp, #0]
 8014f66:	fa08 f800 	lsl.w	r8, r8, r0
 8014f6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014f6e:	fa23 f000 	lsr.w	r0, r3, r0
 8014f72:	ea48 0000 	orr.w	r0, r8, r0
 8014f76:	f7f3 f9fd 	bl	8008374 <__aeabi_ui2d>
 8014f7a:	2301      	movs	r3, #1
 8014f7c:	4682      	mov	sl, r0
 8014f7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014f82:	3d01      	subs	r5, #1
 8014f84:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f86:	e772      	b.n	8014e6e <_dtoa_r+0xf6>
 8014f88:	9b00      	ldr	r3, [sp, #0]
 8014f8a:	f1c0 0020 	rsb	r0, r0, #32
 8014f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8014f92:	e7f0      	b.n	8014f76 <_dtoa_r+0x1fe>
 8014f94:	2301      	movs	r3, #1
 8014f96:	e7b1      	b.n	8014efc <_dtoa_r+0x184>
 8014f98:	900f      	str	r0, [sp, #60]	; 0x3c
 8014f9a:	e7b0      	b.n	8014efe <_dtoa_r+0x186>
 8014f9c:	9b05      	ldr	r3, [sp, #20]
 8014f9e:	eba3 030a 	sub.w	r3, r3, sl
 8014fa2:	9305      	str	r3, [sp, #20]
 8014fa4:	f1ca 0300 	rsb	r3, sl, #0
 8014fa8:	9307      	str	r3, [sp, #28]
 8014faa:	2300      	movs	r3, #0
 8014fac:	930e      	str	r3, [sp, #56]	; 0x38
 8014fae:	e7bb      	b.n	8014f28 <_dtoa_r+0x1b0>
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8014fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	dd59      	ble.n	801506e <_dtoa_r+0x2f6>
 8014fba:	9302      	str	r3, [sp, #8]
 8014fbc:	4699      	mov	r9, r3
 8014fbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	6072      	str	r2, [r6, #4]
 8014fc4:	2204      	movs	r2, #4
 8014fc6:	f102 0014 	add.w	r0, r2, #20
 8014fca:	4298      	cmp	r0, r3
 8014fcc:	6871      	ldr	r1, [r6, #4]
 8014fce:	d953      	bls.n	8015078 <_dtoa_r+0x300>
 8014fd0:	4620      	mov	r0, r4
 8014fd2:	f001 f83a 	bl	801604a <_Balloc>
 8014fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fd8:	6030      	str	r0, [r6, #0]
 8014fda:	f1b9 0f0e 	cmp.w	r9, #14
 8014fde:	f8d3 b000 	ldr.w	fp, [r3]
 8014fe2:	f200 80e6 	bhi.w	80151b2 <_dtoa_r+0x43a>
 8014fe6:	2d00      	cmp	r5, #0
 8014fe8:	f000 80e3 	beq.w	80151b2 <_dtoa_r+0x43a>
 8014fec:	ed9d 7b00 	vldr	d7, [sp]
 8014ff0:	f1ba 0f00 	cmp.w	sl, #0
 8014ff4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014ff8:	dd74      	ble.n	80150e4 <_dtoa_r+0x36c>
 8014ffa:	4a2a      	ldr	r2, [pc, #168]	; (80150a4 <_dtoa_r+0x32c>)
 8014ffc:	f00a 030f 	and.w	r3, sl, #15
 8015000:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015004:	ed93 7b00 	vldr	d7, [r3]
 8015008:	ea4f 162a 	mov.w	r6, sl, asr #4
 801500c:	06f0      	lsls	r0, r6, #27
 801500e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015012:	d565      	bpl.n	80150e0 <_dtoa_r+0x368>
 8015014:	4b24      	ldr	r3, [pc, #144]	; (80150a8 <_dtoa_r+0x330>)
 8015016:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801501a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801501e:	f7f3 fb4d 	bl	80086bc <__aeabi_ddiv>
 8015022:	e9cd 0100 	strd	r0, r1, [sp]
 8015026:	f006 060f 	and.w	r6, r6, #15
 801502a:	2503      	movs	r5, #3
 801502c:	4f1e      	ldr	r7, [pc, #120]	; (80150a8 <_dtoa_r+0x330>)
 801502e:	e04c      	b.n	80150ca <_dtoa_r+0x352>
 8015030:	2301      	movs	r3, #1
 8015032:	930a      	str	r3, [sp, #40]	; 0x28
 8015034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015036:	4453      	add	r3, sl
 8015038:	f103 0901 	add.w	r9, r3, #1
 801503c:	9302      	str	r3, [sp, #8]
 801503e:	464b      	mov	r3, r9
 8015040:	2b01      	cmp	r3, #1
 8015042:	bfb8      	it	lt
 8015044:	2301      	movlt	r3, #1
 8015046:	e7ba      	b.n	8014fbe <_dtoa_r+0x246>
 8015048:	2300      	movs	r3, #0
 801504a:	e7b2      	b.n	8014fb2 <_dtoa_r+0x23a>
 801504c:	2300      	movs	r3, #0
 801504e:	e7f0      	b.n	8015032 <_dtoa_r+0x2ba>
 8015050:	2501      	movs	r5, #1
 8015052:	2300      	movs	r3, #0
 8015054:	9306      	str	r3, [sp, #24]
 8015056:	950a      	str	r5, [sp, #40]	; 0x28
 8015058:	f04f 33ff 	mov.w	r3, #4294967295
 801505c:	9302      	str	r3, [sp, #8]
 801505e:	4699      	mov	r9, r3
 8015060:	2200      	movs	r2, #0
 8015062:	2312      	movs	r3, #18
 8015064:	920b      	str	r2, [sp, #44]	; 0x2c
 8015066:	e7aa      	b.n	8014fbe <_dtoa_r+0x246>
 8015068:	2301      	movs	r3, #1
 801506a:	930a      	str	r3, [sp, #40]	; 0x28
 801506c:	e7f4      	b.n	8015058 <_dtoa_r+0x2e0>
 801506e:	2301      	movs	r3, #1
 8015070:	9302      	str	r3, [sp, #8]
 8015072:	4699      	mov	r9, r3
 8015074:	461a      	mov	r2, r3
 8015076:	e7f5      	b.n	8015064 <_dtoa_r+0x2ec>
 8015078:	3101      	adds	r1, #1
 801507a:	6071      	str	r1, [r6, #4]
 801507c:	0052      	lsls	r2, r2, #1
 801507e:	e7a2      	b.n	8014fc6 <_dtoa_r+0x24e>
 8015080:	636f4361 	.word	0x636f4361
 8015084:	3fd287a7 	.word	0x3fd287a7
 8015088:	8b60c8b3 	.word	0x8b60c8b3
 801508c:	3fc68a28 	.word	0x3fc68a28
 8015090:	509f79fb 	.word	0x509f79fb
 8015094:	3fd34413 	.word	0x3fd34413
 8015098:	7ff00000 	.word	0x7ff00000
 801509c:	0801709f 	.word	0x0801709f
 80150a0:	3ff80000 	.word	0x3ff80000
 80150a4:	08017138 	.word	0x08017138
 80150a8:	08017110 	.word	0x08017110
 80150ac:	08017101 	.word	0x08017101
 80150b0:	07f1      	lsls	r1, r6, #31
 80150b2:	d508      	bpl.n	80150c6 <_dtoa_r+0x34e>
 80150b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80150b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80150bc:	f7f3 f9d4 	bl	8008468 <__aeabi_dmul>
 80150c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80150c4:	3501      	adds	r5, #1
 80150c6:	1076      	asrs	r6, r6, #1
 80150c8:	3708      	adds	r7, #8
 80150ca:	2e00      	cmp	r6, #0
 80150cc:	d1f0      	bne.n	80150b0 <_dtoa_r+0x338>
 80150ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80150d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150d6:	f7f3 faf1 	bl	80086bc <__aeabi_ddiv>
 80150da:	e9cd 0100 	strd	r0, r1, [sp]
 80150de:	e01a      	b.n	8015116 <_dtoa_r+0x39e>
 80150e0:	2502      	movs	r5, #2
 80150e2:	e7a3      	b.n	801502c <_dtoa_r+0x2b4>
 80150e4:	f000 80a0 	beq.w	8015228 <_dtoa_r+0x4b0>
 80150e8:	f1ca 0600 	rsb	r6, sl, #0
 80150ec:	4b9f      	ldr	r3, [pc, #636]	; (801536c <_dtoa_r+0x5f4>)
 80150ee:	4fa0      	ldr	r7, [pc, #640]	; (8015370 <_dtoa_r+0x5f8>)
 80150f0:	f006 020f 	and.w	r2, r6, #15
 80150f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80150f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015100:	f7f3 f9b2 	bl	8008468 <__aeabi_dmul>
 8015104:	e9cd 0100 	strd	r0, r1, [sp]
 8015108:	1136      	asrs	r6, r6, #4
 801510a:	2300      	movs	r3, #0
 801510c:	2502      	movs	r5, #2
 801510e:	2e00      	cmp	r6, #0
 8015110:	d17f      	bne.n	8015212 <_dtoa_r+0x49a>
 8015112:	2b00      	cmp	r3, #0
 8015114:	d1e1      	bne.n	80150da <_dtoa_r+0x362>
 8015116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015118:	2b00      	cmp	r3, #0
 801511a:	f000 8087 	beq.w	801522c <_dtoa_r+0x4b4>
 801511e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015122:	2200      	movs	r2, #0
 8015124:	4b93      	ldr	r3, [pc, #588]	; (8015374 <_dtoa_r+0x5fc>)
 8015126:	4630      	mov	r0, r6
 8015128:	4639      	mov	r1, r7
 801512a:	f7f3 fc0f 	bl	800894c <__aeabi_dcmplt>
 801512e:	2800      	cmp	r0, #0
 8015130:	d07c      	beq.n	801522c <_dtoa_r+0x4b4>
 8015132:	f1b9 0f00 	cmp.w	r9, #0
 8015136:	d079      	beq.n	801522c <_dtoa_r+0x4b4>
 8015138:	9b02      	ldr	r3, [sp, #8]
 801513a:	2b00      	cmp	r3, #0
 801513c:	dd35      	ble.n	80151aa <_dtoa_r+0x432>
 801513e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015142:	9308      	str	r3, [sp, #32]
 8015144:	4639      	mov	r1, r7
 8015146:	2200      	movs	r2, #0
 8015148:	4b8b      	ldr	r3, [pc, #556]	; (8015378 <_dtoa_r+0x600>)
 801514a:	4630      	mov	r0, r6
 801514c:	f7f3 f98c 	bl	8008468 <__aeabi_dmul>
 8015150:	e9cd 0100 	strd	r0, r1, [sp]
 8015154:	9f02      	ldr	r7, [sp, #8]
 8015156:	3501      	adds	r5, #1
 8015158:	4628      	mov	r0, r5
 801515a:	f7f3 f91b 	bl	8008394 <__aeabi_i2d>
 801515e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015162:	f7f3 f981 	bl	8008468 <__aeabi_dmul>
 8015166:	2200      	movs	r2, #0
 8015168:	4b84      	ldr	r3, [pc, #528]	; (801537c <_dtoa_r+0x604>)
 801516a:	f7f2 ffc7 	bl	80080fc <__adddf3>
 801516e:	4605      	mov	r5, r0
 8015170:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015174:	2f00      	cmp	r7, #0
 8015176:	d15d      	bne.n	8015234 <_dtoa_r+0x4bc>
 8015178:	2200      	movs	r2, #0
 801517a:	4b81      	ldr	r3, [pc, #516]	; (8015380 <_dtoa_r+0x608>)
 801517c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015180:	f7f2 ffba 	bl	80080f8 <__aeabi_dsub>
 8015184:	462a      	mov	r2, r5
 8015186:	4633      	mov	r3, r6
 8015188:	e9cd 0100 	strd	r0, r1, [sp]
 801518c:	f7f3 fbfc 	bl	8008988 <__aeabi_dcmpgt>
 8015190:	2800      	cmp	r0, #0
 8015192:	f040 8288 	bne.w	80156a6 <_dtoa_r+0x92e>
 8015196:	462a      	mov	r2, r5
 8015198:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801519c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151a0:	f7f3 fbd4 	bl	800894c <__aeabi_dcmplt>
 80151a4:	2800      	cmp	r0, #0
 80151a6:	f040 827c 	bne.w	80156a2 <_dtoa_r+0x92a>
 80151aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80151ae:	e9cd 2300 	strd	r2, r3, [sp]
 80151b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	f2c0 8150 	blt.w	801545a <_dtoa_r+0x6e2>
 80151ba:	f1ba 0f0e 	cmp.w	sl, #14
 80151be:	f300 814c 	bgt.w	801545a <_dtoa_r+0x6e2>
 80151c2:	4b6a      	ldr	r3, [pc, #424]	; (801536c <_dtoa_r+0x5f4>)
 80151c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80151c8:	ed93 7b00 	vldr	d7, [r3]
 80151cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151d4:	f280 80d8 	bge.w	8015388 <_dtoa_r+0x610>
 80151d8:	f1b9 0f00 	cmp.w	r9, #0
 80151dc:	f300 80d4 	bgt.w	8015388 <_dtoa_r+0x610>
 80151e0:	f040 825e 	bne.w	80156a0 <_dtoa_r+0x928>
 80151e4:	2200      	movs	r2, #0
 80151e6:	4b66      	ldr	r3, [pc, #408]	; (8015380 <_dtoa_r+0x608>)
 80151e8:	ec51 0b17 	vmov	r0, r1, d7
 80151ec:	f7f3 f93c 	bl	8008468 <__aeabi_dmul>
 80151f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151f4:	f7f3 fbbe 	bl	8008974 <__aeabi_dcmpge>
 80151f8:	464f      	mov	r7, r9
 80151fa:	464e      	mov	r6, r9
 80151fc:	2800      	cmp	r0, #0
 80151fe:	f040 8234 	bne.w	801566a <_dtoa_r+0x8f2>
 8015202:	2331      	movs	r3, #49	; 0x31
 8015204:	f10b 0501 	add.w	r5, fp, #1
 8015208:	f88b 3000 	strb.w	r3, [fp]
 801520c:	f10a 0a01 	add.w	sl, sl, #1
 8015210:	e22f      	b.n	8015672 <_dtoa_r+0x8fa>
 8015212:	07f2      	lsls	r2, r6, #31
 8015214:	d505      	bpl.n	8015222 <_dtoa_r+0x4aa>
 8015216:	e9d7 2300 	ldrd	r2, r3, [r7]
 801521a:	f7f3 f925 	bl	8008468 <__aeabi_dmul>
 801521e:	3501      	adds	r5, #1
 8015220:	2301      	movs	r3, #1
 8015222:	1076      	asrs	r6, r6, #1
 8015224:	3708      	adds	r7, #8
 8015226:	e772      	b.n	801510e <_dtoa_r+0x396>
 8015228:	2502      	movs	r5, #2
 801522a:	e774      	b.n	8015116 <_dtoa_r+0x39e>
 801522c:	f8cd a020 	str.w	sl, [sp, #32]
 8015230:	464f      	mov	r7, r9
 8015232:	e791      	b.n	8015158 <_dtoa_r+0x3e0>
 8015234:	4b4d      	ldr	r3, [pc, #308]	; (801536c <_dtoa_r+0x5f4>)
 8015236:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801523a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801523e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015240:	2b00      	cmp	r3, #0
 8015242:	d047      	beq.n	80152d4 <_dtoa_r+0x55c>
 8015244:	4602      	mov	r2, r0
 8015246:	460b      	mov	r3, r1
 8015248:	2000      	movs	r0, #0
 801524a:	494e      	ldr	r1, [pc, #312]	; (8015384 <_dtoa_r+0x60c>)
 801524c:	f7f3 fa36 	bl	80086bc <__aeabi_ddiv>
 8015250:	462a      	mov	r2, r5
 8015252:	4633      	mov	r3, r6
 8015254:	f7f2 ff50 	bl	80080f8 <__aeabi_dsub>
 8015258:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801525c:	465d      	mov	r5, fp
 801525e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015262:	f7f3 fbb1 	bl	80089c8 <__aeabi_d2iz>
 8015266:	4606      	mov	r6, r0
 8015268:	f7f3 f894 	bl	8008394 <__aeabi_i2d>
 801526c:	4602      	mov	r2, r0
 801526e:	460b      	mov	r3, r1
 8015270:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015274:	f7f2 ff40 	bl	80080f8 <__aeabi_dsub>
 8015278:	3630      	adds	r6, #48	; 0x30
 801527a:	f805 6b01 	strb.w	r6, [r5], #1
 801527e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015282:	e9cd 0100 	strd	r0, r1, [sp]
 8015286:	f7f3 fb61 	bl	800894c <__aeabi_dcmplt>
 801528a:	2800      	cmp	r0, #0
 801528c:	d163      	bne.n	8015356 <_dtoa_r+0x5de>
 801528e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015292:	2000      	movs	r0, #0
 8015294:	4937      	ldr	r1, [pc, #220]	; (8015374 <_dtoa_r+0x5fc>)
 8015296:	f7f2 ff2f 	bl	80080f8 <__aeabi_dsub>
 801529a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801529e:	f7f3 fb55 	bl	800894c <__aeabi_dcmplt>
 80152a2:	2800      	cmp	r0, #0
 80152a4:	f040 80b7 	bne.w	8015416 <_dtoa_r+0x69e>
 80152a8:	eba5 030b 	sub.w	r3, r5, fp
 80152ac:	429f      	cmp	r7, r3
 80152ae:	f77f af7c 	ble.w	80151aa <_dtoa_r+0x432>
 80152b2:	2200      	movs	r2, #0
 80152b4:	4b30      	ldr	r3, [pc, #192]	; (8015378 <_dtoa_r+0x600>)
 80152b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80152ba:	f7f3 f8d5 	bl	8008468 <__aeabi_dmul>
 80152be:	2200      	movs	r2, #0
 80152c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80152c4:	4b2c      	ldr	r3, [pc, #176]	; (8015378 <_dtoa_r+0x600>)
 80152c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152ca:	f7f3 f8cd 	bl	8008468 <__aeabi_dmul>
 80152ce:	e9cd 0100 	strd	r0, r1, [sp]
 80152d2:	e7c4      	b.n	801525e <_dtoa_r+0x4e6>
 80152d4:	462a      	mov	r2, r5
 80152d6:	4633      	mov	r3, r6
 80152d8:	f7f3 f8c6 	bl	8008468 <__aeabi_dmul>
 80152dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80152e0:	eb0b 0507 	add.w	r5, fp, r7
 80152e4:	465e      	mov	r6, fp
 80152e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152ea:	f7f3 fb6d 	bl	80089c8 <__aeabi_d2iz>
 80152ee:	4607      	mov	r7, r0
 80152f0:	f7f3 f850 	bl	8008394 <__aeabi_i2d>
 80152f4:	3730      	adds	r7, #48	; 0x30
 80152f6:	4602      	mov	r2, r0
 80152f8:	460b      	mov	r3, r1
 80152fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152fe:	f7f2 fefb 	bl	80080f8 <__aeabi_dsub>
 8015302:	f806 7b01 	strb.w	r7, [r6], #1
 8015306:	42ae      	cmp	r6, r5
 8015308:	e9cd 0100 	strd	r0, r1, [sp]
 801530c:	f04f 0200 	mov.w	r2, #0
 8015310:	d126      	bne.n	8015360 <_dtoa_r+0x5e8>
 8015312:	4b1c      	ldr	r3, [pc, #112]	; (8015384 <_dtoa_r+0x60c>)
 8015314:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015318:	f7f2 fef0 	bl	80080fc <__adddf3>
 801531c:	4602      	mov	r2, r0
 801531e:	460b      	mov	r3, r1
 8015320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015324:	f7f3 fb30 	bl	8008988 <__aeabi_dcmpgt>
 8015328:	2800      	cmp	r0, #0
 801532a:	d174      	bne.n	8015416 <_dtoa_r+0x69e>
 801532c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015330:	2000      	movs	r0, #0
 8015332:	4914      	ldr	r1, [pc, #80]	; (8015384 <_dtoa_r+0x60c>)
 8015334:	f7f2 fee0 	bl	80080f8 <__aeabi_dsub>
 8015338:	4602      	mov	r2, r0
 801533a:	460b      	mov	r3, r1
 801533c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015340:	f7f3 fb04 	bl	800894c <__aeabi_dcmplt>
 8015344:	2800      	cmp	r0, #0
 8015346:	f43f af30 	beq.w	80151aa <_dtoa_r+0x432>
 801534a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801534e:	2b30      	cmp	r3, #48	; 0x30
 8015350:	f105 32ff 	add.w	r2, r5, #4294967295
 8015354:	d002      	beq.n	801535c <_dtoa_r+0x5e4>
 8015356:	f8dd a020 	ldr.w	sl, [sp, #32]
 801535a:	e04a      	b.n	80153f2 <_dtoa_r+0x67a>
 801535c:	4615      	mov	r5, r2
 801535e:	e7f4      	b.n	801534a <_dtoa_r+0x5d2>
 8015360:	4b05      	ldr	r3, [pc, #20]	; (8015378 <_dtoa_r+0x600>)
 8015362:	f7f3 f881 	bl	8008468 <__aeabi_dmul>
 8015366:	e9cd 0100 	strd	r0, r1, [sp]
 801536a:	e7bc      	b.n	80152e6 <_dtoa_r+0x56e>
 801536c:	08017138 	.word	0x08017138
 8015370:	08017110 	.word	0x08017110
 8015374:	3ff00000 	.word	0x3ff00000
 8015378:	40240000 	.word	0x40240000
 801537c:	401c0000 	.word	0x401c0000
 8015380:	40140000 	.word	0x40140000
 8015384:	3fe00000 	.word	0x3fe00000
 8015388:	e9dd 6700 	ldrd	r6, r7, [sp]
 801538c:	465d      	mov	r5, fp
 801538e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015392:	4630      	mov	r0, r6
 8015394:	4639      	mov	r1, r7
 8015396:	f7f3 f991 	bl	80086bc <__aeabi_ddiv>
 801539a:	f7f3 fb15 	bl	80089c8 <__aeabi_d2iz>
 801539e:	4680      	mov	r8, r0
 80153a0:	f7f2 fff8 	bl	8008394 <__aeabi_i2d>
 80153a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153a8:	f7f3 f85e 	bl	8008468 <__aeabi_dmul>
 80153ac:	4602      	mov	r2, r0
 80153ae:	460b      	mov	r3, r1
 80153b0:	4630      	mov	r0, r6
 80153b2:	4639      	mov	r1, r7
 80153b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80153b8:	f7f2 fe9e 	bl	80080f8 <__aeabi_dsub>
 80153bc:	f805 6b01 	strb.w	r6, [r5], #1
 80153c0:	eba5 060b 	sub.w	r6, r5, fp
 80153c4:	45b1      	cmp	r9, r6
 80153c6:	4602      	mov	r2, r0
 80153c8:	460b      	mov	r3, r1
 80153ca:	d139      	bne.n	8015440 <_dtoa_r+0x6c8>
 80153cc:	f7f2 fe96 	bl	80080fc <__adddf3>
 80153d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153d4:	4606      	mov	r6, r0
 80153d6:	460f      	mov	r7, r1
 80153d8:	f7f3 fad6 	bl	8008988 <__aeabi_dcmpgt>
 80153dc:	b9c8      	cbnz	r0, 8015412 <_dtoa_r+0x69a>
 80153de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153e2:	4630      	mov	r0, r6
 80153e4:	4639      	mov	r1, r7
 80153e6:	f7f3 faa7 	bl	8008938 <__aeabi_dcmpeq>
 80153ea:	b110      	cbz	r0, 80153f2 <_dtoa_r+0x67a>
 80153ec:	f018 0f01 	tst.w	r8, #1
 80153f0:	d10f      	bne.n	8015412 <_dtoa_r+0x69a>
 80153f2:	9904      	ldr	r1, [sp, #16]
 80153f4:	4620      	mov	r0, r4
 80153f6:	f000 fe5c 	bl	80160b2 <_Bfree>
 80153fa:	2300      	movs	r3, #0
 80153fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80153fe:	702b      	strb	r3, [r5, #0]
 8015400:	f10a 0301 	add.w	r3, sl, #1
 8015404:	6013      	str	r3, [r2, #0]
 8015406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015408:	2b00      	cmp	r3, #0
 801540a:	f000 8241 	beq.w	8015890 <_dtoa_r+0xb18>
 801540e:	601d      	str	r5, [r3, #0]
 8015410:	e23e      	b.n	8015890 <_dtoa_r+0xb18>
 8015412:	f8cd a020 	str.w	sl, [sp, #32]
 8015416:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801541a:	2a39      	cmp	r2, #57	; 0x39
 801541c:	f105 33ff 	add.w	r3, r5, #4294967295
 8015420:	d108      	bne.n	8015434 <_dtoa_r+0x6bc>
 8015422:	459b      	cmp	fp, r3
 8015424:	d10a      	bne.n	801543c <_dtoa_r+0x6c4>
 8015426:	9b08      	ldr	r3, [sp, #32]
 8015428:	3301      	adds	r3, #1
 801542a:	9308      	str	r3, [sp, #32]
 801542c:	2330      	movs	r3, #48	; 0x30
 801542e:	f88b 3000 	strb.w	r3, [fp]
 8015432:	465b      	mov	r3, fp
 8015434:	781a      	ldrb	r2, [r3, #0]
 8015436:	3201      	adds	r2, #1
 8015438:	701a      	strb	r2, [r3, #0]
 801543a:	e78c      	b.n	8015356 <_dtoa_r+0x5de>
 801543c:	461d      	mov	r5, r3
 801543e:	e7ea      	b.n	8015416 <_dtoa_r+0x69e>
 8015440:	2200      	movs	r2, #0
 8015442:	4b9b      	ldr	r3, [pc, #620]	; (80156b0 <_dtoa_r+0x938>)
 8015444:	f7f3 f810 	bl	8008468 <__aeabi_dmul>
 8015448:	2200      	movs	r2, #0
 801544a:	2300      	movs	r3, #0
 801544c:	4606      	mov	r6, r0
 801544e:	460f      	mov	r7, r1
 8015450:	f7f3 fa72 	bl	8008938 <__aeabi_dcmpeq>
 8015454:	2800      	cmp	r0, #0
 8015456:	d09a      	beq.n	801538e <_dtoa_r+0x616>
 8015458:	e7cb      	b.n	80153f2 <_dtoa_r+0x67a>
 801545a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801545c:	2a00      	cmp	r2, #0
 801545e:	f000 808b 	beq.w	8015578 <_dtoa_r+0x800>
 8015462:	9a06      	ldr	r2, [sp, #24]
 8015464:	2a01      	cmp	r2, #1
 8015466:	dc6e      	bgt.n	8015546 <_dtoa_r+0x7ce>
 8015468:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801546a:	2a00      	cmp	r2, #0
 801546c:	d067      	beq.n	801553e <_dtoa_r+0x7c6>
 801546e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015472:	9f07      	ldr	r7, [sp, #28]
 8015474:	9d05      	ldr	r5, [sp, #20]
 8015476:	9a05      	ldr	r2, [sp, #20]
 8015478:	2101      	movs	r1, #1
 801547a:	441a      	add	r2, r3
 801547c:	4620      	mov	r0, r4
 801547e:	9205      	str	r2, [sp, #20]
 8015480:	4498      	add	r8, r3
 8015482:	f000 fef4 	bl	801626e <__i2b>
 8015486:	4606      	mov	r6, r0
 8015488:	2d00      	cmp	r5, #0
 801548a:	dd0c      	ble.n	80154a6 <_dtoa_r+0x72e>
 801548c:	f1b8 0f00 	cmp.w	r8, #0
 8015490:	dd09      	ble.n	80154a6 <_dtoa_r+0x72e>
 8015492:	4545      	cmp	r5, r8
 8015494:	9a05      	ldr	r2, [sp, #20]
 8015496:	462b      	mov	r3, r5
 8015498:	bfa8      	it	ge
 801549a:	4643      	movge	r3, r8
 801549c:	1ad2      	subs	r2, r2, r3
 801549e:	9205      	str	r2, [sp, #20]
 80154a0:	1aed      	subs	r5, r5, r3
 80154a2:	eba8 0803 	sub.w	r8, r8, r3
 80154a6:	9b07      	ldr	r3, [sp, #28]
 80154a8:	b1eb      	cbz	r3, 80154e6 <_dtoa_r+0x76e>
 80154aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d067      	beq.n	8015580 <_dtoa_r+0x808>
 80154b0:	b18f      	cbz	r7, 80154d6 <_dtoa_r+0x75e>
 80154b2:	4631      	mov	r1, r6
 80154b4:	463a      	mov	r2, r7
 80154b6:	4620      	mov	r0, r4
 80154b8:	f000 ff78 	bl	80163ac <__pow5mult>
 80154bc:	9a04      	ldr	r2, [sp, #16]
 80154be:	4601      	mov	r1, r0
 80154c0:	4606      	mov	r6, r0
 80154c2:	4620      	mov	r0, r4
 80154c4:	f000 fedc 	bl	8016280 <__multiply>
 80154c8:	9904      	ldr	r1, [sp, #16]
 80154ca:	9008      	str	r0, [sp, #32]
 80154cc:	4620      	mov	r0, r4
 80154ce:	f000 fdf0 	bl	80160b2 <_Bfree>
 80154d2:	9b08      	ldr	r3, [sp, #32]
 80154d4:	9304      	str	r3, [sp, #16]
 80154d6:	9b07      	ldr	r3, [sp, #28]
 80154d8:	1bda      	subs	r2, r3, r7
 80154da:	d004      	beq.n	80154e6 <_dtoa_r+0x76e>
 80154dc:	9904      	ldr	r1, [sp, #16]
 80154de:	4620      	mov	r0, r4
 80154e0:	f000 ff64 	bl	80163ac <__pow5mult>
 80154e4:	9004      	str	r0, [sp, #16]
 80154e6:	2101      	movs	r1, #1
 80154e8:	4620      	mov	r0, r4
 80154ea:	f000 fec0 	bl	801626e <__i2b>
 80154ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154f0:	4607      	mov	r7, r0
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	f000 81d0 	beq.w	8015898 <_dtoa_r+0xb20>
 80154f8:	461a      	mov	r2, r3
 80154fa:	4601      	mov	r1, r0
 80154fc:	4620      	mov	r0, r4
 80154fe:	f000 ff55 	bl	80163ac <__pow5mult>
 8015502:	9b06      	ldr	r3, [sp, #24]
 8015504:	2b01      	cmp	r3, #1
 8015506:	4607      	mov	r7, r0
 8015508:	dc40      	bgt.n	801558c <_dtoa_r+0x814>
 801550a:	9b00      	ldr	r3, [sp, #0]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d139      	bne.n	8015584 <_dtoa_r+0x80c>
 8015510:	9b01      	ldr	r3, [sp, #4]
 8015512:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015516:	2b00      	cmp	r3, #0
 8015518:	d136      	bne.n	8015588 <_dtoa_r+0x810>
 801551a:	9b01      	ldr	r3, [sp, #4]
 801551c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015520:	0d1b      	lsrs	r3, r3, #20
 8015522:	051b      	lsls	r3, r3, #20
 8015524:	b12b      	cbz	r3, 8015532 <_dtoa_r+0x7ba>
 8015526:	9b05      	ldr	r3, [sp, #20]
 8015528:	3301      	adds	r3, #1
 801552a:	9305      	str	r3, [sp, #20]
 801552c:	f108 0801 	add.w	r8, r8, #1
 8015530:	2301      	movs	r3, #1
 8015532:	9307      	str	r3, [sp, #28]
 8015534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015536:	2b00      	cmp	r3, #0
 8015538:	d12a      	bne.n	8015590 <_dtoa_r+0x818>
 801553a:	2001      	movs	r0, #1
 801553c:	e030      	b.n	80155a0 <_dtoa_r+0x828>
 801553e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015540:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015544:	e795      	b.n	8015472 <_dtoa_r+0x6fa>
 8015546:	9b07      	ldr	r3, [sp, #28]
 8015548:	f109 37ff 	add.w	r7, r9, #4294967295
 801554c:	42bb      	cmp	r3, r7
 801554e:	bfbf      	itttt	lt
 8015550:	9b07      	ldrlt	r3, [sp, #28]
 8015552:	9707      	strlt	r7, [sp, #28]
 8015554:	1afa      	sublt	r2, r7, r3
 8015556:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015558:	bfbb      	ittet	lt
 801555a:	189b      	addlt	r3, r3, r2
 801555c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801555e:	1bdf      	subge	r7, r3, r7
 8015560:	2700      	movlt	r7, #0
 8015562:	f1b9 0f00 	cmp.w	r9, #0
 8015566:	bfb5      	itete	lt
 8015568:	9b05      	ldrlt	r3, [sp, #20]
 801556a:	9d05      	ldrge	r5, [sp, #20]
 801556c:	eba3 0509 	sublt.w	r5, r3, r9
 8015570:	464b      	movge	r3, r9
 8015572:	bfb8      	it	lt
 8015574:	2300      	movlt	r3, #0
 8015576:	e77e      	b.n	8015476 <_dtoa_r+0x6fe>
 8015578:	9f07      	ldr	r7, [sp, #28]
 801557a:	9d05      	ldr	r5, [sp, #20]
 801557c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801557e:	e783      	b.n	8015488 <_dtoa_r+0x710>
 8015580:	9a07      	ldr	r2, [sp, #28]
 8015582:	e7ab      	b.n	80154dc <_dtoa_r+0x764>
 8015584:	2300      	movs	r3, #0
 8015586:	e7d4      	b.n	8015532 <_dtoa_r+0x7ba>
 8015588:	9b00      	ldr	r3, [sp, #0]
 801558a:	e7d2      	b.n	8015532 <_dtoa_r+0x7ba>
 801558c:	2300      	movs	r3, #0
 801558e:	9307      	str	r3, [sp, #28]
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015596:	6918      	ldr	r0, [r3, #16]
 8015598:	f000 fe1b 	bl	80161d2 <__hi0bits>
 801559c:	f1c0 0020 	rsb	r0, r0, #32
 80155a0:	4440      	add	r0, r8
 80155a2:	f010 001f 	ands.w	r0, r0, #31
 80155a6:	d047      	beq.n	8015638 <_dtoa_r+0x8c0>
 80155a8:	f1c0 0320 	rsb	r3, r0, #32
 80155ac:	2b04      	cmp	r3, #4
 80155ae:	dd3b      	ble.n	8015628 <_dtoa_r+0x8b0>
 80155b0:	9b05      	ldr	r3, [sp, #20]
 80155b2:	f1c0 001c 	rsb	r0, r0, #28
 80155b6:	4403      	add	r3, r0
 80155b8:	9305      	str	r3, [sp, #20]
 80155ba:	4405      	add	r5, r0
 80155bc:	4480      	add	r8, r0
 80155be:	9b05      	ldr	r3, [sp, #20]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	dd05      	ble.n	80155d0 <_dtoa_r+0x858>
 80155c4:	461a      	mov	r2, r3
 80155c6:	9904      	ldr	r1, [sp, #16]
 80155c8:	4620      	mov	r0, r4
 80155ca:	f000 ff3d 	bl	8016448 <__lshift>
 80155ce:	9004      	str	r0, [sp, #16]
 80155d0:	f1b8 0f00 	cmp.w	r8, #0
 80155d4:	dd05      	ble.n	80155e2 <_dtoa_r+0x86a>
 80155d6:	4639      	mov	r1, r7
 80155d8:	4642      	mov	r2, r8
 80155da:	4620      	mov	r0, r4
 80155dc:	f000 ff34 	bl	8016448 <__lshift>
 80155e0:	4607      	mov	r7, r0
 80155e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155e4:	b353      	cbz	r3, 801563c <_dtoa_r+0x8c4>
 80155e6:	4639      	mov	r1, r7
 80155e8:	9804      	ldr	r0, [sp, #16]
 80155ea:	f000 ff81 	bl	80164f0 <__mcmp>
 80155ee:	2800      	cmp	r0, #0
 80155f0:	da24      	bge.n	801563c <_dtoa_r+0x8c4>
 80155f2:	2300      	movs	r3, #0
 80155f4:	220a      	movs	r2, #10
 80155f6:	9904      	ldr	r1, [sp, #16]
 80155f8:	4620      	mov	r0, r4
 80155fa:	f000 fd71 	bl	80160e0 <__multadd>
 80155fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015600:	9004      	str	r0, [sp, #16]
 8015602:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015606:	2b00      	cmp	r3, #0
 8015608:	f000 814d 	beq.w	80158a6 <_dtoa_r+0xb2e>
 801560c:	2300      	movs	r3, #0
 801560e:	4631      	mov	r1, r6
 8015610:	220a      	movs	r2, #10
 8015612:	4620      	mov	r0, r4
 8015614:	f000 fd64 	bl	80160e0 <__multadd>
 8015618:	9b02      	ldr	r3, [sp, #8]
 801561a:	2b00      	cmp	r3, #0
 801561c:	4606      	mov	r6, r0
 801561e:	dc4f      	bgt.n	80156c0 <_dtoa_r+0x948>
 8015620:	9b06      	ldr	r3, [sp, #24]
 8015622:	2b02      	cmp	r3, #2
 8015624:	dd4c      	ble.n	80156c0 <_dtoa_r+0x948>
 8015626:	e011      	b.n	801564c <_dtoa_r+0x8d4>
 8015628:	d0c9      	beq.n	80155be <_dtoa_r+0x846>
 801562a:	9a05      	ldr	r2, [sp, #20]
 801562c:	331c      	adds	r3, #28
 801562e:	441a      	add	r2, r3
 8015630:	9205      	str	r2, [sp, #20]
 8015632:	441d      	add	r5, r3
 8015634:	4498      	add	r8, r3
 8015636:	e7c2      	b.n	80155be <_dtoa_r+0x846>
 8015638:	4603      	mov	r3, r0
 801563a:	e7f6      	b.n	801562a <_dtoa_r+0x8b2>
 801563c:	f1b9 0f00 	cmp.w	r9, #0
 8015640:	dc38      	bgt.n	80156b4 <_dtoa_r+0x93c>
 8015642:	9b06      	ldr	r3, [sp, #24]
 8015644:	2b02      	cmp	r3, #2
 8015646:	dd35      	ble.n	80156b4 <_dtoa_r+0x93c>
 8015648:	f8cd 9008 	str.w	r9, [sp, #8]
 801564c:	9b02      	ldr	r3, [sp, #8]
 801564e:	b963      	cbnz	r3, 801566a <_dtoa_r+0x8f2>
 8015650:	4639      	mov	r1, r7
 8015652:	2205      	movs	r2, #5
 8015654:	4620      	mov	r0, r4
 8015656:	f000 fd43 	bl	80160e0 <__multadd>
 801565a:	4601      	mov	r1, r0
 801565c:	4607      	mov	r7, r0
 801565e:	9804      	ldr	r0, [sp, #16]
 8015660:	f000 ff46 	bl	80164f0 <__mcmp>
 8015664:	2800      	cmp	r0, #0
 8015666:	f73f adcc 	bgt.w	8015202 <_dtoa_r+0x48a>
 801566a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801566c:	465d      	mov	r5, fp
 801566e:	ea6f 0a03 	mvn.w	sl, r3
 8015672:	f04f 0900 	mov.w	r9, #0
 8015676:	4639      	mov	r1, r7
 8015678:	4620      	mov	r0, r4
 801567a:	f000 fd1a 	bl	80160b2 <_Bfree>
 801567e:	2e00      	cmp	r6, #0
 8015680:	f43f aeb7 	beq.w	80153f2 <_dtoa_r+0x67a>
 8015684:	f1b9 0f00 	cmp.w	r9, #0
 8015688:	d005      	beq.n	8015696 <_dtoa_r+0x91e>
 801568a:	45b1      	cmp	r9, r6
 801568c:	d003      	beq.n	8015696 <_dtoa_r+0x91e>
 801568e:	4649      	mov	r1, r9
 8015690:	4620      	mov	r0, r4
 8015692:	f000 fd0e 	bl	80160b2 <_Bfree>
 8015696:	4631      	mov	r1, r6
 8015698:	4620      	mov	r0, r4
 801569a:	f000 fd0a 	bl	80160b2 <_Bfree>
 801569e:	e6a8      	b.n	80153f2 <_dtoa_r+0x67a>
 80156a0:	2700      	movs	r7, #0
 80156a2:	463e      	mov	r6, r7
 80156a4:	e7e1      	b.n	801566a <_dtoa_r+0x8f2>
 80156a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80156aa:	463e      	mov	r6, r7
 80156ac:	e5a9      	b.n	8015202 <_dtoa_r+0x48a>
 80156ae:	bf00      	nop
 80156b0:	40240000 	.word	0x40240000
 80156b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	f000 80fa 	beq.w	80158b4 <_dtoa_r+0xb3c>
 80156c0:	2d00      	cmp	r5, #0
 80156c2:	dd05      	ble.n	80156d0 <_dtoa_r+0x958>
 80156c4:	4631      	mov	r1, r6
 80156c6:	462a      	mov	r2, r5
 80156c8:	4620      	mov	r0, r4
 80156ca:	f000 febd 	bl	8016448 <__lshift>
 80156ce:	4606      	mov	r6, r0
 80156d0:	9b07      	ldr	r3, [sp, #28]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d04c      	beq.n	8015770 <_dtoa_r+0x9f8>
 80156d6:	6871      	ldr	r1, [r6, #4]
 80156d8:	4620      	mov	r0, r4
 80156da:	f000 fcb6 	bl	801604a <_Balloc>
 80156de:	6932      	ldr	r2, [r6, #16]
 80156e0:	3202      	adds	r2, #2
 80156e2:	4605      	mov	r5, r0
 80156e4:	0092      	lsls	r2, r2, #2
 80156e6:	f106 010c 	add.w	r1, r6, #12
 80156ea:	300c      	adds	r0, #12
 80156ec:	f7fc fae6 	bl	8011cbc <memcpy>
 80156f0:	2201      	movs	r2, #1
 80156f2:	4629      	mov	r1, r5
 80156f4:	4620      	mov	r0, r4
 80156f6:	f000 fea7 	bl	8016448 <__lshift>
 80156fa:	9b00      	ldr	r3, [sp, #0]
 80156fc:	f8cd b014 	str.w	fp, [sp, #20]
 8015700:	f003 0301 	and.w	r3, r3, #1
 8015704:	46b1      	mov	r9, r6
 8015706:	9307      	str	r3, [sp, #28]
 8015708:	4606      	mov	r6, r0
 801570a:	4639      	mov	r1, r7
 801570c:	9804      	ldr	r0, [sp, #16]
 801570e:	f7ff faa7 	bl	8014c60 <quorem>
 8015712:	4649      	mov	r1, r9
 8015714:	4605      	mov	r5, r0
 8015716:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801571a:	9804      	ldr	r0, [sp, #16]
 801571c:	f000 fee8 	bl	80164f0 <__mcmp>
 8015720:	4632      	mov	r2, r6
 8015722:	9000      	str	r0, [sp, #0]
 8015724:	4639      	mov	r1, r7
 8015726:	4620      	mov	r0, r4
 8015728:	f000 fefc 	bl	8016524 <__mdiff>
 801572c:	68c3      	ldr	r3, [r0, #12]
 801572e:	4602      	mov	r2, r0
 8015730:	bb03      	cbnz	r3, 8015774 <_dtoa_r+0x9fc>
 8015732:	4601      	mov	r1, r0
 8015734:	9008      	str	r0, [sp, #32]
 8015736:	9804      	ldr	r0, [sp, #16]
 8015738:	f000 feda 	bl	80164f0 <__mcmp>
 801573c:	9a08      	ldr	r2, [sp, #32]
 801573e:	4603      	mov	r3, r0
 8015740:	4611      	mov	r1, r2
 8015742:	4620      	mov	r0, r4
 8015744:	9308      	str	r3, [sp, #32]
 8015746:	f000 fcb4 	bl	80160b2 <_Bfree>
 801574a:	9b08      	ldr	r3, [sp, #32]
 801574c:	b9a3      	cbnz	r3, 8015778 <_dtoa_r+0xa00>
 801574e:	9a06      	ldr	r2, [sp, #24]
 8015750:	b992      	cbnz	r2, 8015778 <_dtoa_r+0xa00>
 8015752:	9a07      	ldr	r2, [sp, #28]
 8015754:	b982      	cbnz	r2, 8015778 <_dtoa_r+0xa00>
 8015756:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801575a:	d029      	beq.n	80157b0 <_dtoa_r+0xa38>
 801575c:	9b00      	ldr	r3, [sp, #0]
 801575e:	2b00      	cmp	r3, #0
 8015760:	dd01      	ble.n	8015766 <_dtoa_r+0x9ee>
 8015762:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015766:	9b05      	ldr	r3, [sp, #20]
 8015768:	1c5d      	adds	r5, r3, #1
 801576a:	f883 8000 	strb.w	r8, [r3]
 801576e:	e782      	b.n	8015676 <_dtoa_r+0x8fe>
 8015770:	4630      	mov	r0, r6
 8015772:	e7c2      	b.n	80156fa <_dtoa_r+0x982>
 8015774:	2301      	movs	r3, #1
 8015776:	e7e3      	b.n	8015740 <_dtoa_r+0x9c8>
 8015778:	9a00      	ldr	r2, [sp, #0]
 801577a:	2a00      	cmp	r2, #0
 801577c:	db04      	blt.n	8015788 <_dtoa_r+0xa10>
 801577e:	d125      	bne.n	80157cc <_dtoa_r+0xa54>
 8015780:	9a06      	ldr	r2, [sp, #24]
 8015782:	bb1a      	cbnz	r2, 80157cc <_dtoa_r+0xa54>
 8015784:	9a07      	ldr	r2, [sp, #28]
 8015786:	bb0a      	cbnz	r2, 80157cc <_dtoa_r+0xa54>
 8015788:	2b00      	cmp	r3, #0
 801578a:	ddec      	ble.n	8015766 <_dtoa_r+0x9ee>
 801578c:	2201      	movs	r2, #1
 801578e:	9904      	ldr	r1, [sp, #16]
 8015790:	4620      	mov	r0, r4
 8015792:	f000 fe59 	bl	8016448 <__lshift>
 8015796:	4639      	mov	r1, r7
 8015798:	9004      	str	r0, [sp, #16]
 801579a:	f000 fea9 	bl	80164f0 <__mcmp>
 801579e:	2800      	cmp	r0, #0
 80157a0:	dc03      	bgt.n	80157aa <_dtoa_r+0xa32>
 80157a2:	d1e0      	bne.n	8015766 <_dtoa_r+0x9ee>
 80157a4:	f018 0f01 	tst.w	r8, #1
 80157a8:	d0dd      	beq.n	8015766 <_dtoa_r+0x9ee>
 80157aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80157ae:	d1d8      	bne.n	8015762 <_dtoa_r+0x9ea>
 80157b0:	9b05      	ldr	r3, [sp, #20]
 80157b2:	9a05      	ldr	r2, [sp, #20]
 80157b4:	1c5d      	adds	r5, r3, #1
 80157b6:	2339      	movs	r3, #57	; 0x39
 80157b8:	7013      	strb	r3, [r2, #0]
 80157ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80157be:	2b39      	cmp	r3, #57	; 0x39
 80157c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80157c4:	d04f      	beq.n	8015866 <_dtoa_r+0xaee>
 80157c6:	3301      	adds	r3, #1
 80157c8:	7013      	strb	r3, [r2, #0]
 80157ca:	e754      	b.n	8015676 <_dtoa_r+0x8fe>
 80157cc:	9a05      	ldr	r2, [sp, #20]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	f102 0501 	add.w	r5, r2, #1
 80157d4:	dd06      	ble.n	80157e4 <_dtoa_r+0xa6c>
 80157d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80157da:	d0e9      	beq.n	80157b0 <_dtoa_r+0xa38>
 80157dc:	f108 0801 	add.w	r8, r8, #1
 80157e0:	9b05      	ldr	r3, [sp, #20]
 80157e2:	e7c2      	b.n	801576a <_dtoa_r+0x9f2>
 80157e4:	9a02      	ldr	r2, [sp, #8]
 80157e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80157ea:	eba5 030b 	sub.w	r3, r5, fp
 80157ee:	4293      	cmp	r3, r2
 80157f0:	d021      	beq.n	8015836 <_dtoa_r+0xabe>
 80157f2:	2300      	movs	r3, #0
 80157f4:	220a      	movs	r2, #10
 80157f6:	9904      	ldr	r1, [sp, #16]
 80157f8:	4620      	mov	r0, r4
 80157fa:	f000 fc71 	bl	80160e0 <__multadd>
 80157fe:	45b1      	cmp	r9, r6
 8015800:	9004      	str	r0, [sp, #16]
 8015802:	f04f 0300 	mov.w	r3, #0
 8015806:	f04f 020a 	mov.w	r2, #10
 801580a:	4649      	mov	r1, r9
 801580c:	4620      	mov	r0, r4
 801580e:	d105      	bne.n	801581c <_dtoa_r+0xaa4>
 8015810:	f000 fc66 	bl	80160e0 <__multadd>
 8015814:	4681      	mov	r9, r0
 8015816:	4606      	mov	r6, r0
 8015818:	9505      	str	r5, [sp, #20]
 801581a:	e776      	b.n	801570a <_dtoa_r+0x992>
 801581c:	f000 fc60 	bl	80160e0 <__multadd>
 8015820:	4631      	mov	r1, r6
 8015822:	4681      	mov	r9, r0
 8015824:	2300      	movs	r3, #0
 8015826:	220a      	movs	r2, #10
 8015828:	4620      	mov	r0, r4
 801582a:	f000 fc59 	bl	80160e0 <__multadd>
 801582e:	4606      	mov	r6, r0
 8015830:	e7f2      	b.n	8015818 <_dtoa_r+0xaa0>
 8015832:	f04f 0900 	mov.w	r9, #0
 8015836:	2201      	movs	r2, #1
 8015838:	9904      	ldr	r1, [sp, #16]
 801583a:	4620      	mov	r0, r4
 801583c:	f000 fe04 	bl	8016448 <__lshift>
 8015840:	4639      	mov	r1, r7
 8015842:	9004      	str	r0, [sp, #16]
 8015844:	f000 fe54 	bl	80164f0 <__mcmp>
 8015848:	2800      	cmp	r0, #0
 801584a:	dcb6      	bgt.n	80157ba <_dtoa_r+0xa42>
 801584c:	d102      	bne.n	8015854 <_dtoa_r+0xadc>
 801584e:	f018 0f01 	tst.w	r8, #1
 8015852:	d1b2      	bne.n	80157ba <_dtoa_r+0xa42>
 8015854:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015858:	2b30      	cmp	r3, #48	; 0x30
 801585a:	f105 32ff 	add.w	r2, r5, #4294967295
 801585e:	f47f af0a 	bne.w	8015676 <_dtoa_r+0x8fe>
 8015862:	4615      	mov	r5, r2
 8015864:	e7f6      	b.n	8015854 <_dtoa_r+0xadc>
 8015866:	4593      	cmp	fp, r2
 8015868:	d105      	bne.n	8015876 <_dtoa_r+0xafe>
 801586a:	2331      	movs	r3, #49	; 0x31
 801586c:	f10a 0a01 	add.w	sl, sl, #1
 8015870:	f88b 3000 	strb.w	r3, [fp]
 8015874:	e6ff      	b.n	8015676 <_dtoa_r+0x8fe>
 8015876:	4615      	mov	r5, r2
 8015878:	e79f      	b.n	80157ba <_dtoa_r+0xa42>
 801587a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80158e0 <_dtoa_r+0xb68>
 801587e:	e007      	b.n	8015890 <_dtoa_r+0xb18>
 8015880:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015882:	f8df b060 	ldr.w	fp, [pc, #96]	; 80158e4 <_dtoa_r+0xb6c>
 8015886:	b11b      	cbz	r3, 8015890 <_dtoa_r+0xb18>
 8015888:	f10b 0308 	add.w	r3, fp, #8
 801588c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801588e:	6013      	str	r3, [r2, #0]
 8015890:	4658      	mov	r0, fp
 8015892:	b017      	add	sp, #92	; 0x5c
 8015894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015898:	9b06      	ldr	r3, [sp, #24]
 801589a:	2b01      	cmp	r3, #1
 801589c:	f77f ae35 	ble.w	801550a <_dtoa_r+0x792>
 80158a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158a2:	9307      	str	r3, [sp, #28]
 80158a4:	e649      	b.n	801553a <_dtoa_r+0x7c2>
 80158a6:	9b02      	ldr	r3, [sp, #8]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	dc03      	bgt.n	80158b4 <_dtoa_r+0xb3c>
 80158ac:	9b06      	ldr	r3, [sp, #24]
 80158ae:	2b02      	cmp	r3, #2
 80158b0:	f73f aecc 	bgt.w	801564c <_dtoa_r+0x8d4>
 80158b4:	465d      	mov	r5, fp
 80158b6:	4639      	mov	r1, r7
 80158b8:	9804      	ldr	r0, [sp, #16]
 80158ba:	f7ff f9d1 	bl	8014c60 <quorem>
 80158be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80158c2:	f805 8b01 	strb.w	r8, [r5], #1
 80158c6:	9a02      	ldr	r2, [sp, #8]
 80158c8:	eba5 030b 	sub.w	r3, r5, fp
 80158cc:	429a      	cmp	r2, r3
 80158ce:	ddb0      	ble.n	8015832 <_dtoa_r+0xaba>
 80158d0:	2300      	movs	r3, #0
 80158d2:	220a      	movs	r2, #10
 80158d4:	9904      	ldr	r1, [sp, #16]
 80158d6:	4620      	mov	r0, r4
 80158d8:	f000 fc02 	bl	80160e0 <__multadd>
 80158dc:	9004      	str	r0, [sp, #16]
 80158de:	e7ea      	b.n	80158b6 <_dtoa_r+0xb3e>
 80158e0:	0801709e 	.word	0x0801709e
 80158e4:	080170f8 	.word	0x080170f8

080158e8 <_fstat_r>:
 80158e8:	b538      	push	{r3, r4, r5, lr}
 80158ea:	4c07      	ldr	r4, [pc, #28]	; (8015908 <_fstat_r+0x20>)
 80158ec:	2300      	movs	r3, #0
 80158ee:	4605      	mov	r5, r0
 80158f0:	4608      	mov	r0, r1
 80158f2:	4611      	mov	r1, r2
 80158f4:	6023      	str	r3, [r4, #0]
 80158f6:	f7f8 f969 	bl	800dbcc <_fstat>
 80158fa:	1c43      	adds	r3, r0, #1
 80158fc:	d102      	bne.n	8015904 <_fstat_r+0x1c>
 80158fe:	6823      	ldr	r3, [r4, #0]
 8015900:	b103      	cbz	r3, 8015904 <_fstat_r+0x1c>
 8015902:	602b      	str	r3, [r5, #0]
 8015904:	bd38      	pop	{r3, r4, r5, pc}
 8015906:	bf00      	nop
 8015908:	20002044 	.word	0x20002044

0801590c <rshift>:
 801590c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801590e:	6906      	ldr	r6, [r0, #16]
 8015910:	114b      	asrs	r3, r1, #5
 8015912:	429e      	cmp	r6, r3
 8015914:	f100 0414 	add.w	r4, r0, #20
 8015918:	dd30      	ble.n	801597c <rshift+0x70>
 801591a:	f011 011f 	ands.w	r1, r1, #31
 801591e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015922:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015926:	d108      	bne.n	801593a <rshift+0x2e>
 8015928:	4621      	mov	r1, r4
 801592a:	42b2      	cmp	r2, r6
 801592c:	460b      	mov	r3, r1
 801592e:	d211      	bcs.n	8015954 <rshift+0x48>
 8015930:	f852 3b04 	ldr.w	r3, [r2], #4
 8015934:	f841 3b04 	str.w	r3, [r1], #4
 8015938:	e7f7      	b.n	801592a <rshift+0x1e>
 801593a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801593e:	f1c1 0c20 	rsb	ip, r1, #32
 8015942:	40cd      	lsrs	r5, r1
 8015944:	3204      	adds	r2, #4
 8015946:	4623      	mov	r3, r4
 8015948:	42b2      	cmp	r2, r6
 801594a:	4617      	mov	r7, r2
 801594c:	d30c      	bcc.n	8015968 <rshift+0x5c>
 801594e:	601d      	str	r5, [r3, #0]
 8015950:	b105      	cbz	r5, 8015954 <rshift+0x48>
 8015952:	3304      	adds	r3, #4
 8015954:	1b1a      	subs	r2, r3, r4
 8015956:	42a3      	cmp	r3, r4
 8015958:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801595c:	bf08      	it	eq
 801595e:	2300      	moveq	r3, #0
 8015960:	6102      	str	r2, [r0, #16]
 8015962:	bf08      	it	eq
 8015964:	6143      	streq	r3, [r0, #20]
 8015966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015968:	683f      	ldr	r7, [r7, #0]
 801596a:	fa07 f70c 	lsl.w	r7, r7, ip
 801596e:	433d      	orrs	r5, r7
 8015970:	f843 5b04 	str.w	r5, [r3], #4
 8015974:	f852 5b04 	ldr.w	r5, [r2], #4
 8015978:	40cd      	lsrs	r5, r1
 801597a:	e7e5      	b.n	8015948 <rshift+0x3c>
 801597c:	4623      	mov	r3, r4
 801597e:	e7e9      	b.n	8015954 <rshift+0x48>

08015980 <__hexdig_fun>:
 8015980:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015984:	2b09      	cmp	r3, #9
 8015986:	d802      	bhi.n	801598e <__hexdig_fun+0xe>
 8015988:	3820      	subs	r0, #32
 801598a:	b2c0      	uxtb	r0, r0
 801598c:	4770      	bx	lr
 801598e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015992:	2b05      	cmp	r3, #5
 8015994:	d801      	bhi.n	801599a <__hexdig_fun+0x1a>
 8015996:	3847      	subs	r0, #71	; 0x47
 8015998:	e7f7      	b.n	801598a <__hexdig_fun+0xa>
 801599a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801599e:	2b05      	cmp	r3, #5
 80159a0:	d801      	bhi.n	80159a6 <__hexdig_fun+0x26>
 80159a2:	3827      	subs	r0, #39	; 0x27
 80159a4:	e7f1      	b.n	801598a <__hexdig_fun+0xa>
 80159a6:	2000      	movs	r0, #0
 80159a8:	4770      	bx	lr

080159aa <__gethex>:
 80159aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ae:	b08b      	sub	sp, #44	; 0x2c
 80159b0:	468a      	mov	sl, r1
 80159b2:	9002      	str	r0, [sp, #8]
 80159b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80159b6:	9306      	str	r3, [sp, #24]
 80159b8:	4690      	mov	r8, r2
 80159ba:	f000 faef 	bl	8015f9c <__localeconv_l>
 80159be:	6803      	ldr	r3, [r0, #0]
 80159c0:	9303      	str	r3, [sp, #12]
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7f2 fb3c 	bl	8008040 <strlen>
 80159c8:	9b03      	ldr	r3, [sp, #12]
 80159ca:	9001      	str	r0, [sp, #4]
 80159cc:	4403      	add	r3, r0
 80159ce:	f04f 0b00 	mov.w	fp, #0
 80159d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80159d6:	9307      	str	r3, [sp, #28]
 80159d8:	f8da 3000 	ldr.w	r3, [sl]
 80159dc:	3302      	adds	r3, #2
 80159de:	461f      	mov	r7, r3
 80159e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80159e4:	2830      	cmp	r0, #48	; 0x30
 80159e6:	d06c      	beq.n	8015ac2 <__gethex+0x118>
 80159e8:	f7ff ffca 	bl	8015980 <__hexdig_fun>
 80159ec:	4604      	mov	r4, r0
 80159ee:	2800      	cmp	r0, #0
 80159f0:	d16a      	bne.n	8015ac8 <__gethex+0x11e>
 80159f2:	9a01      	ldr	r2, [sp, #4]
 80159f4:	9903      	ldr	r1, [sp, #12]
 80159f6:	4638      	mov	r0, r7
 80159f8:	f001 f8f4 	bl	8016be4 <strncmp>
 80159fc:	2800      	cmp	r0, #0
 80159fe:	d166      	bne.n	8015ace <__gethex+0x124>
 8015a00:	9b01      	ldr	r3, [sp, #4]
 8015a02:	5cf8      	ldrb	r0, [r7, r3]
 8015a04:	18fe      	adds	r6, r7, r3
 8015a06:	f7ff ffbb 	bl	8015980 <__hexdig_fun>
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	d062      	beq.n	8015ad4 <__gethex+0x12a>
 8015a0e:	4633      	mov	r3, r6
 8015a10:	7818      	ldrb	r0, [r3, #0]
 8015a12:	2830      	cmp	r0, #48	; 0x30
 8015a14:	461f      	mov	r7, r3
 8015a16:	f103 0301 	add.w	r3, r3, #1
 8015a1a:	d0f9      	beq.n	8015a10 <__gethex+0x66>
 8015a1c:	f7ff ffb0 	bl	8015980 <__hexdig_fun>
 8015a20:	fab0 f580 	clz	r5, r0
 8015a24:	096d      	lsrs	r5, r5, #5
 8015a26:	4634      	mov	r4, r6
 8015a28:	f04f 0b01 	mov.w	fp, #1
 8015a2c:	463a      	mov	r2, r7
 8015a2e:	4616      	mov	r6, r2
 8015a30:	3201      	adds	r2, #1
 8015a32:	7830      	ldrb	r0, [r6, #0]
 8015a34:	f7ff ffa4 	bl	8015980 <__hexdig_fun>
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	d1f8      	bne.n	8015a2e <__gethex+0x84>
 8015a3c:	9a01      	ldr	r2, [sp, #4]
 8015a3e:	9903      	ldr	r1, [sp, #12]
 8015a40:	4630      	mov	r0, r6
 8015a42:	f001 f8cf 	bl	8016be4 <strncmp>
 8015a46:	b950      	cbnz	r0, 8015a5e <__gethex+0xb4>
 8015a48:	b954      	cbnz	r4, 8015a60 <__gethex+0xb6>
 8015a4a:	9b01      	ldr	r3, [sp, #4]
 8015a4c:	18f4      	adds	r4, r6, r3
 8015a4e:	4622      	mov	r2, r4
 8015a50:	4616      	mov	r6, r2
 8015a52:	3201      	adds	r2, #1
 8015a54:	7830      	ldrb	r0, [r6, #0]
 8015a56:	f7ff ff93 	bl	8015980 <__hexdig_fun>
 8015a5a:	2800      	cmp	r0, #0
 8015a5c:	d1f8      	bne.n	8015a50 <__gethex+0xa6>
 8015a5e:	b10c      	cbz	r4, 8015a64 <__gethex+0xba>
 8015a60:	1ba4      	subs	r4, r4, r6
 8015a62:	00a4      	lsls	r4, r4, #2
 8015a64:	7833      	ldrb	r3, [r6, #0]
 8015a66:	2b50      	cmp	r3, #80	; 0x50
 8015a68:	d001      	beq.n	8015a6e <__gethex+0xc4>
 8015a6a:	2b70      	cmp	r3, #112	; 0x70
 8015a6c:	d140      	bne.n	8015af0 <__gethex+0x146>
 8015a6e:	7873      	ldrb	r3, [r6, #1]
 8015a70:	2b2b      	cmp	r3, #43	; 0x2b
 8015a72:	d031      	beq.n	8015ad8 <__gethex+0x12e>
 8015a74:	2b2d      	cmp	r3, #45	; 0x2d
 8015a76:	d033      	beq.n	8015ae0 <__gethex+0x136>
 8015a78:	1c71      	adds	r1, r6, #1
 8015a7a:	f04f 0900 	mov.w	r9, #0
 8015a7e:	7808      	ldrb	r0, [r1, #0]
 8015a80:	f7ff ff7e 	bl	8015980 <__hexdig_fun>
 8015a84:	1e43      	subs	r3, r0, #1
 8015a86:	b2db      	uxtb	r3, r3
 8015a88:	2b18      	cmp	r3, #24
 8015a8a:	d831      	bhi.n	8015af0 <__gethex+0x146>
 8015a8c:	f1a0 0210 	sub.w	r2, r0, #16
 8015a90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015a94:	f7ff ff74 	bl	8015980 <__hexdig_fun>
 8015a98:	1e43      	subs	r3, r0, #1
 8015a9a:	b2db      	uxtb	r3, r3
 8015a9c:	2b18      	cmp	r3, #24
 8015a9e:	d922      	bls.n	8015ae6 <__gethex+0x13c>
 8015aa0:	f1b9 0f00 	cmp.w	r9, #0
 8015aa4:	d000      	beq.n	8015aa8 <__gethex+0xfe>
 8015aa6:	4252      	negs	r2, r2
 8015aa8:	4414      	add	r4, r2
 8015aaa:	f8ca 1000 	str.w	r1, [sl]
 8015aae:	b30d      	cbz	r5, 8015af4 <__gethex+0x14a>
 8015ab0:	f1bb 0f00 	cmp.w	fp, #0
 8015ab4:	bf0c      	ite	eq
 8015ab6:	2706      	moveq	r7, #6
 8015ab8:	2700      	movne	r7, #0
 8015aba:	4638      	mov	r0, r7
 8015abc:	b00b      	add	sp, #44	; 0x2c
 8015abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac2:	f10b 0b01 	add.w	fp, fp, #1
 8015ac6:	e78a      	b.n	80159de <__gethex+0x34>
 8015ac8:	2500      	movs	r5, #0
 8015aca:	462c      	mov	r4, r5
 8015acc:	e7ae      	b.n	8015a2c <__gethex+0x82>
 8015ace:	463e      	mov	r6, r7
 8015ad0:	2501      	movs	r5, #1
 8015ad2:	e7c7      	b.n	8015a64 <__gethex+0xba>
 8015ad4:	4604      	mov	r4, r0
 8015ad6:	e7fb      	b.n	8015ad0 <__gethex+0x126>
 8015ad8:	f04f 0900 	mov.w	r9, #0
 8015adc:	1cb1      	adds	r1, r6, #2
 8015ade:	e7ce      	b.n	8015a7e <__gethex+0xd4>
 8015ae0:	f04f 0901 	mov.w	r9, #1
 8015ae4:	e7fa      	b.n	8015adc <__gethex+0x132>
 8015ae6:	230a      	movs	r3, #10
 8015ae8:	fb03 0202 	mla	r2, r3, r2, r0
 8015aec:	3a10      	subs	r2, #16
 8015aee:	e7cf      	b.n	8015a90 <__gethex+0xe6>
 8015af0:	4631      	mov	r1, r6
 8015af2:	e7da      	b.n	8015aaa <__gethex+0x100>
 8015af4:	1bf3      	subs	r3, r6, r7
 8015af6:	3b01      	subs	r3, #1
 8015af8:	4629      	mov	r1, r5
 8015afa:	2b07      	cmp	r3, #7
 8015afc:	dc49      	bgt.n	8015b92 <__gethex+0x1e8>
 8015afe:	9802      	ldr	r0, [sp, #8]
 8015b00:	f000 faa3 	bl	801604a <_Balloc>
 8015b04:	9b01      	ldr	r3, [sp, #4]
 8015b06:	f100 0914 	add.w	r9, r0, #20
 8015b0a:	f04f 0b00 	mov.w	fp, #0
 8015b0e:	f1c3 0301 	rsb	r3, r3, #1
 8015b12:	4605      	mov	r5, r0
 8015b14:	f8cd 9010 	str.w	r9, [sp, #16]
 8015b18:	46da      	mov	sl, fp
 8015b1a:	9308      	str	r3, [sp, #32]
 8015b1c:	42b7      	cmp	r7, r6
 8015b1e:	d33b      	bcc.n	8015b98 <__gethex+0x1ee>
 8015b20:	9804      	ldr	r0, [sp, #16]
 8015b22:	f840 ab04 	str.w	sl, [r0], #4
 8015b26:	eba0 0009 	sub.w	r0, r0, r9
 8015b2a:	1080      	asrs	r0, r0, #2
 8015b2c:	6128      	str	r0, [r5, #16]
 8015b2e:	0147      	lsls	r7, r0, #5
 8015b30:	4650      	mov	r0, sl
 8015b32:	f000 fb4e 	bl	80161d2 <__hi0bits>
 8015b36:	f8d8 6000 	ldr.w	r6, [r8]
 8015b3a:	1a3f      	subs	r7, r7, r0
 8015b3c:	42b7      	cmp	r7, r6
 8015b3e:	dd64      	ble.n	8015c0a <__gethex+0x260>
 8015b40:	1bbf      	subs	r7, r7, r6
 8015b42:	4639      	mov	r1, r7
 8015b44:	4628      	mov	r0, r5
 8015b46:	f000 fe5d 	bl	8016804 <__any_on>
 8015b4a:	4682      	mov	sl, r0
 8015b4c:	b178      	cbz	r0, 8015b6e <__gethex+0x1c4>
 8015b4e:	1e7b      	subs	r3, r7, #1
 8015b50:	1159      	asrs	r1, r3, #5
 8015b52:	f003 021f 	and.w	r2, r3, #31
 8015b56:	f04f 0a01 	mov.w	sl, #1
 8015b5a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015b5e:	fa0a f202 	lsl.w	r2, sl, r2
 8015b62:	420a      	tst	r2, r1
 8015b64:	d003      	beq.n	8015b6e <__gethex+0x1c4>
 8015b66:	4553      	cmp	r3, sl
 8015b68:	dc46      	bgt.n	8015bf8 <__gethex+0x24e>
 8015b6a:	f04f 0a02 	mov.w	sl, #2
 8015b6e:	4639      	mov	r1, r7
 8015b70:	4628      	mov	r0, r5
 8015b72:	f7ff fecb 	bl	801590c <rshift>
 8015b76:	443c      	add	r4, r7
 8015b78:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015b7c:	42a3      	cmp	r3, r4
 8015b7e:	da52      	bge.n	8015c26 <__gethex+0x27c>
 8015b80:	4629      	mov	r1, r5
 8015b82:	9802      	ldr	r0, [sp, #8]
 8015b84:	f000 fa95 	bl	80160b2 <_Bfree>
 8015b88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	6013      	str	r3, [r2, #0]
 8015b8e:	27a3      	movs	r7, #163	; 0xa3
 8015b90:	e793      	b.n	8015aba <__gethex+0x110>
 8015b92:	3101      	adds	r1, #1
 8015b94:	105b      	asrs	r3, r3, #1
 8015b96:	e7b0      	b.n	8015afa <__gethex+0x150>
 8015b98:	1e73      	subs	r3, r6, #1
 8015b9a:	9305      	str	r3, [sp, #20]
 8015b9c:	9a07      	ldr	r2, [sp, #28]
 8015b9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015ba2:	4293      	cmp	r3, r2
 8015ba4:	d018      	beq.n	8015bd8 <__gethex+0x22e>
 8015ba6:	f1bb 0f20 	cmp.w	fp, #32
 8015baa:	d107      	bne.n	8015bbc <__gethex+0x212>
 8015bac:	9b04      	ldr	r3, [sp, #16]
 8015bae:	f8c3 a000 	str.w	sl, [r3]
 8015bb2:	3304      	adds	r3, #4
 8015bb4:	f04f 0a00 	mov.w	sl, #0
 8015bb8:	9304      	str	r3, [sp, #16]
 8015bba:	46d3      	mov	fp, sl
 8015bbc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015bc0:	f7ff fede 	bl	8015980 <__hexdig_fun>
 8015bc4:	f000 000f 	and.w	r0, r0, #15
 8015bc8:	fa00 f00b 	lsl.w	r0, r0, fp
 8015bcc:	ea4a 0a00 	orr.w	sl, sl, r0
 8015bd0:	f10b 0b04 	add.w	fp, fp, #4
 8015bd4:	9b05      	ldr	r3, [sp, #20]
 8015bd6:	e00d      	b.n	8015bf4 <__gethex+0x24a>
 8015bd8:	9b05      	ldr	r3, [sp, #20]
 8015bda:	9a08      	ldr	r2, [sp, #32]
 8015bdc:	4413      	add	r3, r2
 8015bde:	42bb      	cmp	r3, r7
 8015be0:	d3e1      	bcc.n	8015ba6 <__gethex+0x1fc>
 8015be2:	4618      	mov	r0, r3
 8015be4:	9a01      	ldr	r2, [sp, #4]
 8015be6:	9903      	ldr	r1, [sp, #12]
 8015be8:	9309      	str	r3, [sp, #36]	; 0x24
 8015bea:	f000 fffb 	bl	8016be4 <strncmp>
 8015bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bf0:	2800      	cmp	r0, #0
 8015bf2:	d1d8      	bne.n	8015ba6 <__gethex+0x1fc>
 8015bf4:	461e      	mov	r6, r3
 8015bf6:	e791      	b.n	8015b1c <__gethex+0x172>
 8015bf8:	1eb9      	subs	r1, r7, #2
 8015bfa:	4628      	mov	r0, r5
 8015bfc:	f000 fe02 	bl	8016804 <__any_on>
 8015c00:	2800      	cmp	r0, #0
 8015c02:	d0b2      	beq.n	8015b6a <__gethex+0x1c0>
 8015c04:	f04f 0a03 	mov.w	sl, #3
 8015c08:	e7b1      	b.n	8015b6e <__gethex+0x1c4>
 8015c0a:	da09      	bge.n	8015c20 <__gethex+0x276>
 8015c0c:	1bf7      	subs	r7, r6, r7
 8015c0e:	4629      	mov	r1, r5
 8015c10:	463a      	mov	r2, r7
 8015c12:	9802      	ldr	r0, [sp, #8]
 8015c14:	f000 fc18 	bl	8016448 <__lshift>
 8015c18:	1be4      	subs	r4, r4, r7
 8015c1a:	4605      	mov	r5, r0
 8015c1c:	f100 0914 	add.w	r9, r0, #20
 8015c20:	f04f 0a00 	mov.w	sl, #0
 8015c24:	e7a8      	b.n	8015b78 <__gethex+0x1ce>
 8015c26:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015c2a:	42a0      	cmp	r0, r4
 8015c2c:	dd6a      	ble.n	8015d04 <__gethex+0x35a>
 8015c2e:	1b04      	subs	r4, r0, r4
 8015c30:	42a6      	cmp	r6, r4
 8015c32:	dc2e      	bgt.n	8015c92 <__gethex+0x2e8>
 8015c34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015c38:	2b02      	cmp	r3, #2
 8015c3a:	d022      	beq.n	8015c82 <__gethex+0x2d8>
 8015c3c:	2b03      	cmp	r3, #3
 8015c3e:	d024      	beq.n	8015c8a <__gethex+0x2e0>
 8015c40:	2b01      	cmp	r3, #1
 8015c42:	d115      	bne.n	8015c70 <__gethex+0x2c6>
 8015c44:	42a6      	cmp	r6, r4
 8015c46:	d113      	bne.n	8015c70 <__gethex+0x2c6>
 8015c48:	2e01      	cmp	r6, #1
 8015c4a:	dc0b      	bgt.n	8015c64 <__gethex+0x2ba>
 8015c4c:	9a06      	ldr	r2, [sp, #24]
 8015c4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015c52:	6013      	str	r3, [r2, #0]
 8015c54:	2301      	movs	r3, #1
 8015c56:	612b      	str	r3, [r5, #16]
 8015c58:	f8c9 3000 	str.w	r3, [r9]
 8015c5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c5e:	2762      	movs	r7, #98	; 0x62
 8015c60:	601d      	str	r5, [r3, #0]
 8015c62:	e72a      	b.n	8015aba <__gethex+0x110>
 8015c64:	1e71      	subs	r1, r6, #1
 8015c66:	4628      	mov	r0, r5
 8015c68:	f000 fdcc 	bl	8016804 <__any_on>
 8015c6c:	2800      	cmp	r0, #0
 8015c6e:	d1ed      	bne.n	8015c4c <__gethex+0x2a2>
 8015c70:	4629      	mov	r1, r5
 8015c72:	9802      	ldr	r0, [sp, #8]
 8015c74:	f000 fa1d 	bl	80160b2 <_Bfree>
 8015c78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	6013      	str	r3, [r2, #0]
 8015c7e:	2750      	movs	r7, #80	; 0x50
 8015c80:	e71b      	b.n	8015aba <__gethex+0x110>
 8015c82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d0e1      	beq.n	8015c4c <__gethex+0x2a2>
 8015c88:	e7f2      	b.n	8015c70 <__gethex+0x2c6>
 8015c8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d1dd      	bne.n	8015c4c <__gethex+0x2a2>
 8015c90:	e7ee      	b.n	8015c70 <__gethex+0x2c6>
 8015c92:	1e67      	subs	r7, r4, #1
 8015c94:	f1ba 0f00 	cmp.w	sl, #0
 8015c98:	d131      	bne.n	8015cfe <__gethex+0x354>
 8015c9a:	b127      	cbz	r7, 8015ca6 <__gethex+0x2fc>
 8015c9c:	4639      	mov	r1, r7
 8015c9e:	4628      	mov	r0, r5
 8015ca0:	f000 fdb0 	bl	8016804 <__any_on>
 8015ca4:	4682      	mov	sl, r0
 8015ca6:	117a      	asrs	r2, r7, #5
 8015ca8:	2301      	movs	r3, #1
 8015caa:	f007 071f 	and.w	r7, r7, #31
 8015cae:	fa03 f707 	lsl.w	r7, r3, r7
 8015cb2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015cb6:	4621      	mov	r1, r4
 8015cb8:	421f      	tst	r7, r3
 8015cba:	4628      	mov	r0, r5
 8015cbc:	bf18      	it	ne
 8015cbe:	f04a 0a02 	orrne.w	sl, sl, #2
 8015cc2:	1b36      	subs	r6, r6, r4
 8015cc4:	f7ff fe22 	bl	801590c <rshift>
 8015cc8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015ccc:	2702      	movs	r7, #2
 8015cce:	f1ba 0f00 	cmp.w	sl, #0
 8015cd2:	d048      	beq.n	8015d66 <__gethex+0x3bc>
 8015cd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015cd8:	2b02      	cmp	r3, #2
 8015cda:	d015      	beq.n	8015d08 <__gethex+0x35e>
 8015cdc:	2b03      	cmp	r3, #3
 8015cde:	d017      	beq.n	8015d10 <__gethex+0x366>
 8015ce0:	2b01      	cmp	r3, #1
 8015ce2:	d109      	bne.n	8015cf8 <__gethex+0x34e>
 8015ce4:	f01a 0f02 	tst.w	sl, #2
 8015ce8:	d006      	beq.n	8015cf8 <__gethex+0x34e>
 8015cea:	f8d9 3000 	ldr.w	r3, [r9]
 8015cee:	ea4a 0a03 	orr.w	sl, sl, r3
 8015cf2:	f01a 0f01 	tst.w	sl, #1
 8015cf6:	d10e      	bne.n	8015d16 <__gethex+0x36c>
 8015cf8:	f047 0710 	orr.w	r7, r7, #16
 8015cfc:	e033      	b.n	8015d66 <__gethex+0x3bc>
 8015cfe:	f04f 0a01 	mov.w	sl, #1
 8015d02:	e7d0      	b.n	8015ca6 <__gethex+0x2fc>
 8015d04:	2701      	movs	r7, #1
 8015d06:	e7e2      	b.n	8015cce <__gethex+0x324>
 8015d08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d0a:	f1c3 0301 	rsb	r3, r3, #1
 8015d0e:	9315      	str	r3, [sp, #84]	; 0x54
 8015d10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d0f0      	beq.n	8015cf8 <__gethex+0x34e>
 8015d16:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015d1a:	f105 0314 	add.w	r3, r5, #20
 8015d1e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015d22:	eb03 010a 	add.w	r1, r3, sl
 8015d26:	f04f 0c00 	mov.w	ip, #0
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d30:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015d34:	d01c      	beq.n	8015d70 <__gethex+0x3c6>
 8015d36:	3201      	adds	r2, #1
 8015d38:	6002      	str	r2, [r0, #0]
 8015d3a:	2f02      	cmp	r7, #2
 8015d3c:	f105 0314 	add.w	r3, r5, #20
 8015d40:	d138      	bne.n	8015db4 <__gethex+0x40a>
 8015d42:	f8d8 2000 	ldr.w	r2, [r8]
 8015d46:	3a01      	subs	r2, #1
 8015d48:	42b2      	cmp	r2, r6
 8015d4a:	d10a      	bne.n	8015d62 <__gethex+0x3b8>
 8015d4c:	1171      	asrs	r1, r6, #5
 8015d4e:	2201      	movs	r2, #1
 8015d50:	f006 061f 	and.w	r6, r6, #31
 8015d54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015d58:	fa02 f606 	lsl.w	r6, r2, r6
 8015d5c:	421e      	tst	r6, r3
 8015d5e:	bf18      	it	ne
 8015d60:	4617      	movne	r7, r2
 8015d62:	f047 0720 	orr.w	r7, r7, #32
 8015d66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d68:	601d      	str	r5, [r3, #0]
 8015d6a:	9b06      	ldr	r3, [sp, #24]
 8015d6c:	601c      	str	r4, [r3, #0]
 8015d6e:	e6a4      	b.n	8015aba <__gethex+0x110>
 8015d70:	4299      	cmp	r1, r3
 8015d72:	f843 cc04 	str.w	ip, [r3, #-4]
 8015d76:	d8d8      	bhi.n	8015d2a <__gethex+0x380>
 8015d78:	68ab      	ldr	r3, [r5, #8]
 8015d7a:	4599      	cmp	r9, r3
 8015d7c:	db12      	blt.n	8015da4 <__gethex+0x3fa>
 8015d7e:	6869      	ldr	r1, [r5, #4]
 8015d80:	9802      	ldr	r0, [sp, #8]
 8015d82:	3101      	adds	r1, #1
 8015d84:	f000 f961 	bl	801604a <_Balloc>
 8015d88:	692a      	ldr	r2, [r5, #16]
 8015d8a:	3202      	adds	r2, #2
 8015d8c:	f105 010c 	add.w	r1, r5, #12
 8015d90:	4683      	mov	fp, r0
 8015d92:	0092      	lsls	r2, r2, #2
 8015d94:	300c      	adds	r0, #12
 8015d96:	f7fb ff91 	bl	8011cbc <memcpy>
 8015d9a:	4629      	mov	r1, r5
 8015d9c:	9802      	ldr	r0, [sp, #8]
 8015d9e:	f000 f988 	bl	80160b2 <_Bfree>
 8015da2:	465d      	mov	r5, fp
 8015da4:	692b      	ldr	r3, [r5, #16]
 8015da6:	1c5a      	adds	r2, r3, #1
 8015da8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015dac:	612a      	str	r2, [r5, #16]
 8015dae:	2201      	movs	r2, #1
 8015db0:	615a      	str	r2, [r3, #20]
 8015db2:	e7c2      	b.n	8015d3a <__gethex+0x390>
 8015db4:	692a      	ldr	r2, [r5, #16]
 8015db6:	454a      	cmp	r2, r9
 8015db8:	dd0b      	ble.n	8015dd2 <__gethex+0x428>
 8015dba:	2101      	movs	r1, #1
 8015dbc:	4628      	mov	r0, r5
 8015dbe:	f7ff fda5 	bl	801590c <rshift>
 8015dc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015dc6:	3401      	adds	r4, #1
 8015dc8:	42a3      	cmp	r3, r4
 8015dca:	f6ff aed9 	blt.w	8015b80 <__gethex+0x1d6>
 8015dce:	2701      	movs	r7, #1
 8015dd0:	e7c7      	b.n	8015d62 <__gethex+0x3b8>
 8015dd2:	f016 061f 	ands.w	r6, r6, #31
 8015dd6:	d0fa      	beq.n	8015dce <__gethex+0x424>
 8015dd8:	449a      	add	sl, r3
 8015dda:	f1c6 0620 	rsb	r6, r6, #32
 8015dde:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015de2:	f000 f9f6 	bl	80161d2 <__hi0bits>
 8015de6:	42b0      	cmp	r0, r6
 8015de8:	dbe7      	blt.n	8015dba <__gethex+0x410>
 8015dea:	e7f0      	b.n	8015dce <__gethex+0x424>

08015dec <L_shift>:
 8015dec:	f1c2 0208 	rsb	r2, r2, #8
 8015df0:	0092      	lsls	r2, r2, #2
 8015df2:	b570      	push	{r4, r5, r6, lr}
 8015df4:	f1c2 0620 	rsb	r6, r2, #32
 8015df8:	6843      	ldr	r3, [r0, #4]
 8015dfa:	6804      	ldr	r4, [r0, #0]
 8015dfc:	fa03 f506 	lsl.w	r5, r3, r6
 8015e00:	432c      	orrs	r4, r5
 8015e02:	40d3      	lsrs	r3, r2
 8015e04:	6004      	str	r4, [r0, #0]
 8015e06:	f840 3f04 	str.w	r3, [r0, #4]!
 8015e0a:	4288      	cmp	r0, r1
 8015e0c:	d3f4      	bcc.n	8015df8 <L_shift+0xc>
 8015e0e:	bd70      	pop	{r4, r5, r6, pc}

08015e10 <__match>:
 8015e10:	b530      	push	{r4, r5, lr}
 8015e12:	6803      	ldr	r3, [r0, #0]
 8015e14:	3301      	adds	r3, #1
 8015e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e1a:	b914      	cbnz	r4, 8015e22 <__match+0x12>
 8015e1c:	6003      	str	r3, [r0, #0]
 8015e1e:	2001      	movs	r0, #1
 8015e20:	bd30      	pop	{r4, r5, pc}
 8015e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015e2a:	2d19      	cmp	r5, #25
 8015e2c:	bf98      	it	ls
 8015e2e:	3220      	addls	r2, #32
 8015e30:	42a2      	cmp	r2, r4
 8015e32:	d0f0      	beq.n	8015e16 <__match+0x6>
 8015e34:	2000      	movs	r0, #0
 8015e36:	e7f3      	b.n	8015e20 <__match+0x10>

08015e38 <__hexnan>:
 8015e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e3c:	680b      	ldr	r3, [r1, #0]
 8015e3e:	6801      	ldr	r1, [r0, #0]
 8015e40:	115f      	asrs	r7, r3, #5
 8015e42:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015e46:	f013 031f 	ands.w	r3, r3, #31
 8015e4a:	b087      	sub	sp, #28
 8015e4c:	bf18      	it	ne
 8015e4e:	3704      	addne	r7, #4
 8015e50:	2500      	movs	r5, #0
 8015e52:	1f3e      	subs	r6, r7, #4
 8015e54:	4682      	mov	sl, r0
 8015e56:	4690      	mov	r8, r2
 8015e58:	9301      	str	r3, [sp, #4]
 8015e5a:	f847 5c04 	str.w	r5, [r7, #-4]
 8015e5e:	46b1      	mov	r9, r6
 8015e60:	4634      	mov	r4, r6
 8015e62:	9502      	str	r5, [sp, #8]
 8015e64:	46ab      	mov	fp, r5
 8015e66:	784a      	ldrb	r2, [r1, #1]
 8015e68:	1c4b      	adds	r3, r1, #1
 8015e6a:	9303      	str	r3, [sp, #12]
 8015e6c:	b342      	cbz	r2, 8015ec0 <__hexnan+0x88>
 8015e6e:	4610      	mov	r0, r2
 8015e70:	9105      	str	r1, [sp, #20]
 8015e72:	9204      	str	r2, [sp, #16]
 8015e74:	f7ff fd84 	bl	8015980 <__hexdig_fun>
 8015e78:	2800      	cmp	r0, #0
 8015e7a:	d143      	bne.n	8015f04 <__hexnan+0xcc>
 8015e7c:	9a04      	ldr	r2, [sp, #16]
 8015e7e:	9905      	ldr	r1, [sp, #20]
 8015e80:	2a20      	cmp	r2, #32
 8015e82:	d818      	bhi.n	8015eb6 <__hexnan+0x7e>
 8015e84:	9b02      	ldr	r3, [sp, #8]
 8015e86:	459b      	cmp	fp, r3
 8015e88:	dd13      	ble.n	8015eb2 <__hexnan+0x7a>
 8015e8a:	454c      	cmp	r4, r9
 8015e8c:	d206      	bcs.n	8015e9c <__hexnan+0x64>
 8015e8e:	2d07      	cmp	r5, #7
 8015e90:	dc04      	bgt.n	8015e9c <__hexnan+0x64>
 8015e92:	462a      	mov	r2, r5
 8015e94:	4649      	mov	r1, r9
 8015e96:	4620      	mov	r0, r4
 8015e98:	f7ff ffa8 	bl	8015dec <L_shift>
 8015e9c:	4544      	cmp	r4, r8
 8015e9e:	d944      	bls.n	8015f2a <__hexnan+0xf2>
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	f1a4 0904 	sub.w	r9, r4, #4
 8015ea6:	f844 3c04 	str.w	r3, [r4, #-4]
 8015eaa:	f8cd b008 	str.w	fp, [sp, #8]
 8015eae:	464c      	mov	r4, r9
 8015eb0:	461d      	mov	r5, r3
 8015eb2:	9903      	ldr	r1, [sp, #12]
 8015eb4:	e7d7      	b.n	8015e66 <__hexnan+0x2e>
 8015eb6:	2a29      	cmp	r2, #41	; 0x29
 8015eb8:	d14a      	bne.n	8015f50 <__hexnan+0x118>
 8015eba:	3102      	adds	r1, #2
 8015ebc:	f8ca 1000 	str.w	r1, [sl]
 8015ec0:	f1bb 0f00 	cmp.w	fp, #0
 8015ec4:	d044      	beq.n	8015f50 <__hexnan+0x118>
 8015ec6:	454c      	cmp	r4, r9
 8015ec8:	d206      	bcs.n	8015ed8 <__hexnan+0xa0>
 8015eca:	2d07      	cmp	r5, #7
 8015ecc:	dc04      	bgt.n	8015ed8 <__hexnan+0xa0>
 8015ece:	462a      	mov	r2, r5
 8015ed0:	4649      	mov	r1, r9
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	f7ff ff8a 	bl	8015dec <L_shift>
 8015ed8:	4544      	cmp	r4, r8
 8015eda:	d928      	bls.n	8015f2e <__hexnan+0xf6>
 8015edc:	4643      	mov	r3, r8
 8015ede:	f854 2b04 	ldr.w	r2, [r4], #4
 8015ee2:	f843 2b04 	str.w	r2, [r3], #4
 8015ee6:	42a6      	cmp	r6, r4
 8015ee8:	d2f9      	bcs.n	8015ede <__hexnan+0xa6>
 8015eea:	2200      	movs	r2, #0
 8015eec:	f843 2b04 	str.w	r2, [r3], #4
 8015ef0:	429e      	cmp	r6, r3
 8015ef2:	d2fb      	bcs.n	8015eec <__hexnan+0xb4>
 8015ef4:	6833      	ldr	r3, [r6, #0]
 8015ef6:	b91b      	cbnz	r3, 8015f00 <__hexnan+0xc8>
 8015ef8:	4546      	cmp	r6, r8
 8015efa:	d127      	bne.n	8015f4c <__hexnan+0x114>
 8015efc:	2301      	movs	r3, #1
 8015efe:	6033      	str	r3, [r6, #0]
 8015f00:	2005      	movs	r0, #5
 8015f02:	e026      	b.n	8015f52 <__hexnan+0x11a>
 8015f04:	3501      	adds	r5, #1
 8015f06:	2d08      	cmp	r5, #8
 8015f08:	f10b 0b01 	add.w	fp, fp, #1
 8015f0c:	dd06      	ble.n	8015f1c <__hexnan+0xe4>
 8015f0e:	4544      	cmp	r4, r8
 8015f10:	d9cf      	bls.n	8015eb2 <__hexnan+0x7a>
 8015f12:	2300      	movs	r3, #0
 8015f14:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f18:	2501      	movs	r5, #1
 8015f1a:	3c04      	subs	r4, #4
 8015f1c:	6822      	ldr	r2, [r4, #0]
 8015f1e:	f000 000f 	and.w	r0, r0, #15
 8015f22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015f26:	6020      	str	r0, [r4, #0]
 8015f28:	e7c3      	b.n	8015eb2 <__hexnan+0x7a>
 8015f2a:	2508      	movs	r5, #8
 8015f2c:	e7c1      	b.n	8015eb2 <__hexnan+0x7a>
 8015f2e:	9b01      	ldr	r3, [sp, #4]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d0df      	beq.n	8015ef4 <__hexnan+0xbc>
 8015f34:	f04f 32ff 	mov.w	r2, #4294967295
 8015f38:	f1c3 0320 	rsb	r3, r3, #32
 8015f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8015f40:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015f44:	401a      	ands	r2, r3
 8015f46:	f847 2c04 	str.w	r2, [r7, #-4]
 8015f4a:	e7d3      	b.n	8015ef4 <__hexnan+0xbc>
 8015f4c:	3e04      	subs	r6, #4
 8015f4e:	e7d1      	b.n	8015ef4 <__hexnan+0xbc>
 8015f50:	2004      	movs	r0, #4
 8015f52:	b007      	add	sp, #28
 8015f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f58 <_isatty_r>:
 8015f58:	b538      	push	{r3, r4, r5, lr}
 8015f5a:	4c06      	ldr	r4, [pc, #24]	; (8015f74 <_isatty_r+0x1c>)
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	4605      	mov	r5, r0
 8015f60:	4608      	mov	r0, r1
 8015f62:	6023      	str	r3, [r4, #0]
 8015f64:	f7f7 fe38 	bl	800dbd8 <_isatty>
 8015f68:	1c43      	adds	r3, r0, #1
 8015f6a:	d102      	bne.n	8015f72 <_isatty_r+0x1a>
 8015f6c:	6823      	ldr	r3, [r4, #0]
 8015f6e:	b103      	cbz	r3, 8015f72 <_isatty_r+0x1a>
 8015f70:	602b      	str	r3, [r5, #0]
 8015f72:	bd38      	pop	{r3, r4, r5, pc}
 8015f74:	20002044 	.word	0x20002044

08015f78 <__locale_ctype_ptr_l>:
 8015f78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015f7c:	4770      	bx	lr
	...

08015f80 <__locale_ctype_ptr>:
 8015f80:	4b04      	ldr	r3, [pc, #16]	; (8015f94 <__locale_ctype_ptr+0x14>)
 8015f82:	4a05      	ldr	r2, [pc, #20]	; (8015f98 <__locale_ctype_ptr+0x18>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	6a1b      	ldr	r3, [r3, #32]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	bf08      	it	eq
 8015f8c:	4613      	moveq	r3, r2
 8015f8e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8015f92:	4770      	bx	lr
 8015f94:	20000018 	.word	0x20000018
 8015f98:	2000007c 	.word	0x2000007c

08015f9c <__localeconv_l>:
 8015f9c:	30f0      	adds	r0, #240	; 0xf0
 8015f9e:	4770      	bx	lr

08015fa0 <_localeconv_r>:
 8015fa0:	4b04      	ldr	r3, [pc, #16]	; (8015fb4 <_localeconv_r+0x14>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	6a18      	ldr	r0, [r3, #32]
 8015fa6:	4b04      	ldr	r3, [pc, #16]	; (8015fb8 <_localeconv_r+0x18>)
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	bf08      	it	eq
 8015fac:	4618      	moveq	r0, r3
 8015fae:	30f0      	adds	r0, #240	; 0xf0
 8015fb0:	4770      	bx	lr
 8015fb2:	bf00      	nop
 8015fb4:	20000018 	.word	0x20000018
 8015fb8:	2000007c 	.word	0x2000007c

08015fbc <_lseek_r>:
 8015fbc:	b538      	push	{r3, r4, r5, lr}
 8015fbe:	4c07      	ldr	r4, [pc, #28]	; (8015fdc <_lseek_r+0x20>)
 8015fc0:	4605      	mov	r5, r0
 8015fc2:	4608      	mov	r0, r1
 8015fc4:	4611      	mov	r1, r2
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	6022      	str	r2, [r4, #0]
 8015fca:	461a      	mov	r2, r3
 8015fcc:	f7f7 fe06 	bl	800dbdc <_lseek>
 8015fd0:	1c43      	adds	r3, r0, #1
 8015fd2:	d102      	bne.n	8015fda <_lseek_r+0x1e>
 8015fd4:	6823      	ldr	r3, [r4, #0]
 8015fd6:	b103      	cbz	r3, 8015fda <_lseek_r+0x1e>
 8015fd8:	602b      	str	r3, [r5, #0]
 8015fda:	bd38      	pop	{r3, r4, r5, pc}
 8015fdc:	20002044 	.word	0x20002044

08015fe0 <malloc>:
 8015fe0:	4b02      	ldr	r3, [pc, #8]	; (8015fec <malloc+0xc>)
 8015fe2:	4601      	mov	r1, r0
 8015fe4:	6818      	ldr	r0, [r3, #0]
 8015fe6:	f7fb becb 	b.w	8011d80 <_malloc_r>
 8015fea:	bf00      	nop
 8015fec:	20000018 	.word	0x20000018

08015ff0 <__ascii_mbtowc>:
 8015ff0:	b082      	sub	sp, #8
 8015ff2:	b901      	cbnz	r1, 8015ff6 <__ascii_mbtowc+0x6>
 8015ff4:	a901      	add	r1, sp, #4
 8015ff6:	b142      	cbz	r2, 801600a <__ascii_mbtowc+0x1a>
 8015ff8:	b14b      	cbz	r3, 801600e <__ascii_mbtowc+0x1e>
 8015ffa:	7813      	ldrb	r3, [r2, #0]
 8015ffc:	600b      	str	r3, [r1, #0]
 8015ffe:	7812      	ldrb	r2, [r2, #0]
 8016000:	1c10      	adds	r0, r2, #0
 8016002:	bf18      	it	ne
 8016004:	2001      	movne	r0, #1
 8016006:	b002      	add	sp, #8
 8016008:	4770      	bx	lr
 801600a:	4610      	mov	r0, r2
 801600c:	e7fb      	b.n	8016006 <__ascii_mbtowc+0x16>
 801600e:	f06f 0001 	mvn.w	r0, #1
 8016012:	e7f8      	b.n	8016006 <__ascii_mbtowc+0x16>

08016014 <memmove>:
 8016014:	4288      	cmp	r0, r1
 8016016:	b510      	push	{r4, lr}
 8016018:	eb01 0302 	add.w	r3, r1, r2
 801601c:	d807      	bhi.n	801602e <memmove+0x1a>
 801601e:	1e42      	subs	r2, r0, #1
 8016020:	4299      	cmp	r1, r3
 8016022:	d00a      	beq.n	801603a <memmove+0x26>
 8016024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016028:	f802 4f01 	strb.w	r4, [r2, #1]!
 801602c:	e7f8      	b.n	8016020 <memmove+0xc>
 801602e:	4283      	cmp	r3, r0
 8016030:	d9f5      	bls.n	801601e <memmove+0xa>
 8016032:	1881      	adds	r1, r0, r2
 8016034:	1ad2      	subs	r2, r2, r3
 8016036:	42d3      	cmn	r3, r2
 8016038:	d100      	bne.n	801603c <memmove+0x28>
 801603a:	bd10      	pop	{r4, pc}
 801603c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016040:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016044:	e7f7      	b.n	8016036 <memmove+0x22>

08016046 <__malloc_lock>:
 8016046:	4770      	bx	lr

08016048 <__malloc_unlock>:
 8016048:	4770      	bx	lr

0801604a <_Balloc>:
 801604a:	b570      	push	{r4, r5, r6, lr}
 801604c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801604e:	4604      	mov	r4, r0
 8016050:	460e      	mov	r6, r1
 8016052:	b93d      	cbnz	r5, 8016064 <_Balloc+0x1a>
 8016054:	2010      	movs	r0, #16
 8016056:	f7ff ffc3 	bl	8015fe0 <malloc>
 801605a:	6260      	str	r0, [r4, #36]	; 0x24
 801605c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016060:	6005      	str	r5, [r0, #0]
 8016062:	60c5      	str	r5, [r0, #12]
 8016064:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016066:	68eb      	ldr	r3, [r5, #12]
 8016068:	b183      	cbz	r3, 801608c <_Balloc+0x42>
 801606a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801606c:	68db      	ldr	r3, [r3, #12]
 801606e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016072:	b9b8      	cbnz	r0, 80160a4 <_Balloc+0x5a>
 8016074:	2101      	movs	r1, #1
 8016076:	fa01 f506 	lsl.w	r5, r1, r6
 801607a:	1d6a      	adds	r2, r5, #5
 801607c:	0092      	lsls	r2, r2, #2
 801607e:	4620      	mov	r0, r4
 8016080:	f000 fbe1 	bl	8016846 <_calloc_r>
 8016084:	b160      	cbz	r0, 80160a0 <_Balloc+0x56>
 8016086:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801608a:	e00e      	b.n	80160aa <_Balloc+0x60>
 801608c:	2221      	movs	r2, #33	; 0x21
 801608e:	2104      	movs	r1, #4
 8016090:	4620      	mov	r0, r4
 8016092:	f000 fbd8 	bl	8016846 <_calloc_r>
 8016096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016098:	60e8      	str	r0, [r5, #12]
 801609a:	68db      	ldr	r3, [r3, #12]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d1e4      	bne.n	801606a <_Balloc+0x20>
 80160a0:	2000      	movs	r0, #0
 80160a2:	bd70      	pop	{r4, r5, r6, pc}
 80160a4:	6802      	ldr	r2, [r0, #0]
 80160a6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80160aa:	2300      	movs	r3, #0
 80160ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80160b0:	e7f7      	b.n	80160a2 <_Balloc+0x58>

080160b2 <_Bfree>:
 80160b2:	b570      	push	{r4, r5, r6, lr}
 80160b4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80160b6:	4606      	mov	r6, r0
 80160b8:	460d      	mov	r5, r1
 80160ba:	b93c      	cbnz	r4, 80160cc <_Bfree+0x1a>
 80160bc:	2010      	movs	r0, #16
 80160be:	f7ff ff8f 	bl	8015fe0 <malloc>
 80160c2:	6270      	str	r0, [r6, #36]	; 0x24
 80160c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80160c8:	6004      	str	r4, [r0, #0]
 80160ca:	60c4      	str	r4, [r0, #12]
 80160cc:	b13d      	cbz	r5, 80160de <_Bfree+0x2c>
 80160ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80160d0:	686a      	ldr	r2, [r5, #4]
 80160d2:	68db      	ldr	r3, [r3, #12]
 80160d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80160d8:	6029      	str	r1, [r5, #0]
 80160da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80160de:	bd70      	pop	{r4, r5, r6, pc}

080160e0 <__multadd>:
 80160e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160e4:	690d      	ldr	r5, [r1, #16]
 80160e6:	461f      	mov	r7, r3
 80160e8:	4606      	mov	r6, r0
 80160ea:	460c      	mov	r4, r1
 80160ec:	f101 0c14 	add.w	ip, r1, #20
 80160f0:	2300      	movs	r3, #0
 80160f2:	f8dc 0000 	ldr.w	r0, [ip]
 80160f6:	b281      	uxth	r1, r0
 80160f8:	fb02 7101 	mla	r1, r2, r1, r7
 80160fc:	0c0f      	lsrs	r7, r1, #16
 80160fe:	0c00      	lsrs	r0, r0, #16
 8016100:	fb02 7000 	mla	r0, r2, r0, r7
 8016104:	b289      	uxth	r1, r1
 8016106:	3301      	adds	r3, #1
 8016108:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801610c:	429d      	cmp	r5, r3
 801610e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016112:	f84c 1b04 	str.w	r1, [ip], #4
 8016116:	dcec      	bgt.n	80160f2 <__multadd+0x12>
 8016118:	b1d7      	cbz	r7, 8016150 <__multadd+0x70>
 801611a:	68a3      	ldr	r3, [r4, #8]
 801611c:	42ab      	cmp	r3, r5
 801611e:	dc12      	bgt.n	8016146 <__multadd+0x66>
 8016120:	6861      	ldr	r1, [r4, #4]
 8016122:	4630      	mov	r0, r6
 8016124:	3101      	adds	r1, #1
 8016126:	f7ff ff90 	bl	801604a <_Balloc>
 801612a:	6922      	ldr	r2, [r4, #16]
 801612c:	3202      	adds	r2, #2
 801612e:	f104 010c 	add.w	r1, r4, #12
 8016132:	4680      	mov	r8, r0
 8016134:	0092      	lsls	r2, r2, #2
 8016136:	300c      	adds	r0, #12
 8016138:	f7fb fdc0 	bl	8011cbc <memcpy>
 801613c:	4621      	mov	r1, r4
 801613e:	4630      	mov	r0, r6
 8016140:	f7ff ffb7 	bl	80160b2 <_Bfree>
 8016144:	4644      	mov	r4, r8
 8016146:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801614a:	3501      	adds	r5, #1
 801614c:	615f      	str	r7, [r3, #20]
 801614e:	6125      	str	r5, [r4, #16]
 8016150:	4620      	mov	r0, r4
 8016152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016156 <__s2b>:
 8016156:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801615a:	460c      	mov	r4, r1
 801615c:	4615      	mov	r5, r2
 801615e:	461f      	mov	r7, r3
 8016160:	2209      	movs	r2, #9
 8016162:	3308      	adds	r3, #8
 8016164:	4606      	mov	r6, r0
 8016166:	fb93 f3f2 	sdiv	r3, r3, r2
 801616a:	2100      	movs	r1, #0
 801616c:	2201      	movs	r2, #1
 801616e:	429a      	cmp	r2, r3
 8016170:	db20      	blt.n	80161b4 <__s2b+0x5e>
 8016172:	4630      	mov	r0, r6
 8016174:	f7ff ff69 	bl	801604a <_Balloc>
 8016178:	9b08      	ldr	r3, [sp, #32]
 801617a:	6143      	str	r3, [r0, #20]
 801617c:	2d09      	cmp	r5, #9
 801617e:	f04f 0301 	mov.w	r3, #1
 8016182:	6103      	str	r3, [r0, #16]
 8016184:	dd19      	ble.n	80161ba <__s2b+0x64>
 8016186:	f104 0809 	add.w	r8, r4, #9
 801618a:	46c1      	mov	r9, r8
 801618c:	442c      	add	r4, r5
 801618e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016192:	4601      	mov	r1, r0
 8016194:	3b30      	subs	r3, #48	; 0x30
 8016196:	220a      	movs	r2, #10
 8016198:	4630      	mov	r0, r6
 801619a:	f7ff ffa1 	bl	80160e0 <__multadd>
 801619e:	45a1      	cmp	r9, r4
 80161a0:	d1f5      	bne.n	801618e <__s2b+0x38>
 80161a2:	eb08 0405 	add.w	r4, r8, r5
 80161a6:	3c08      	subs	r4, #8
 80161a8:	1b2d      	subs	r5, r5, r4
 80161aa:	1963      	adds	r3, r4, r5
 80161ac:	42bb      	cmp	r3, r7
 80161ae:	db07      	blt.n	80161c0 <__s2b+0x6a>
 80161b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161b4:	0052      	lsls	r2, r2, #1
 80161b6:	3101      	adds	r1, #1
 80161b8:	e7d9      	b.n	801616e <__s2b+0x18>
 80161ba:	340a      	adds	r4, #10
 80161bc:	2509      	movs	r5, #9
 80161be:	e7f3      	b.n	80161a8 <__s2b+0x52>
 80161c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80161c4:	4601      	mov	r1, r0
 80161c6:	3b30      	subs	r3, #48	; 0x30
 80161c8:	220a      	movs	r2, #10
 80161ca:	4630      	mov	r0, r6
 80161cc:	f7ff ff88 	bl	80160e0 <__multadd>
 80161d0:	e7eb      	b.n	80161aa <__s2b+0x54>

080161d2 <__hi0bits>:
 80161d2:	0c02      	lsrs	r2, r0, #16
 80161d4:	0412      	lsls	r2, r2, #16
 80161d6:	4603      	mov	r3, r0
 80161d8:	b9b2      	cbnz	r2, 8016208 <__hi0bits+0x36>
 80161da:	0403      	lsls	r3, r0, #16
 80161dc:	2010      	movs	r0, #16
 80161de:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80161e2:	bf04      	itt	eq
 80161e4:	021b      	lsleq	r3, r3, #8
 80161e6:	3008      	addeq	r0, #8
 80161e8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80161ec:	bf04      	itt	eq
 80161ee:	011b      	lsleq	r3, r3, #4
 80161f0:	3004      	addeq	r0, #4
 80161f2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80161f6:	bf04      	itt	eq
 80161f8:	009b      	lsleq	r3, r3, #2
 80161fa:	3002      	addeq	r0, #2
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	db06      	blt.n	801620e <__hi0bits+0x3c>
 8016200:	005b      	lsls	r3, r3, #1
 8016202:	d503      	bpl.n	801620c <__hi0bits+0x3a>
 8016204:	3001      	adds	r0, #1
 8016206:	4770      	bx	lr
 8016208:	2000      	movs	r0, #0
 801620a:	e7e8      	b.n	80161de <__hi0bits+0xc>
 801620c:	2020      	movs	r0, #32
 801620e:	4770      	bx	lr

08016210 <__lo0bits>:
 8016210:	6803      	ldr	r3, [r0, #0]
 8016212:	f013 0207 	ands.w	r2, r3, #7
 8016216:	4601      	mov	r1, r0
 8016218:	d00b      	beq.n	8016232 <__lo0bits+0x22>
 801621a:	07da      	lsls	r2, r3, #31
 801621c:	d423      	bmi.n	8016266 <__lo0bits+0x56>
 801621e:	0798      	lsls	r0, r3, #30
 8016220:	bf49      	itett	mi
 8016222:	085b      	lsrmi	r3, r3, #1
 8016224:	089b      	lsrpl	r3, r3, #2
 8016226:	2001      	movmi	r0, #1
 8016228:	600b      	strmi	r3, [r1, #0]
 801622a:	bf5c      	itt	pl
 801622c:	600b      	strpl	r3, [r1, #0]
 801622e:	2002      	movpl	r0, #2
 8016230:	4770      	bx	lr
 8016232:	b298      	uxth	r0, r3
 8016234:	b9a8      	cbnz	r0, 8016262 <__lo0bits+0x52>
 8016236:	0c1b      	lsrs	r3, r3, #16
 8016238:	2010      	movs	r0, #16
 801623a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801623e:	bf04      	itt	eq
 8016240:	0a1b      	lsreq	r3, r3, #8
 8016242:	3008      	addeq	r0, #8
 8016244:	071a      	lsls	r2, r3, #28
 8016246:	bf04      	itt	eq
 8016248:	091b      	lsreq	r3, r3, #4
 801624a:	3004      	addeq	r0, #4
 801624c:	079a      	lsls	r2, r3, #30
 801624e:	bf04      	itt	eq
 8016250:	089b      	lsreq	r3, r3, #2
 8016252:	3002      	addeq	r0, #2
 8016254:	07da      	lsls	r2, r3, #31
 8016256:	d402      	bmi.n	801625e <__lo0bits+0x4e>
 8016258:	085b      	lsrs	r3, r3, #1
 801625a:	d006      	beq.n	801626a <__lo0bits+0x5a>
 801625c:	3001      	adds	r0, #1
 801625e:	600b      	str	r3, [r1, #0]
 8016260:	4770      	bx	lr
 8016262:	4610      	mov	r0, r2
 8016264:	e7e9      	b.n	801623a <__lo0bits+0x2a>
 8016266:	2000      	movs	r0, #0
 8016268:	4770      	bx	lr
 801626a:	2020      	movs	r0, #32
 801626c:	4770      	bx	lr

0801626e <__i2b>:
 801626e:	b510      	push	{r4, lr}
 8016270:	460c      	mov	r4, r1
 8016272:	2101      	movs	r1, #1
 8016274:	f7ff fee9 	bl	801604a <_Balloc>
 8016278:	2201      	movs	r2, #1
 801627a:	6144      	str	r4, [r0, #20]
 801627c:	6102      	str	r2, [r0, #16]
 801627e:	bd10      	pop	{r4, pc}

08016280 <__multiply>:
 8016280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016284:	4614      	mov	r4, r2
 8016286:	690a      	ldr	r2, [r1, #16]
 8016288:	6923      	ldr	r3, [r4, #16]
 801628a:	429a      	cmp	r2, r3
 801628c:	bfb8      	it	lt
 801628e:	460b      	movlt	r3, r1
 8016290:	4688      	mov	r8, r1
 8016292:	bfbc      	itt	lt
 8016294:	46a0      	movlt	r8, r4
 8016296:	461c      	movlt	r4, r3
 8016298:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801629c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80162a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80162a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80162a8:	eb07 0609 	add.w	r6, r7, r9
 80162ac:	42b3      	cmp	r3, r6
 80162ae:	bfb8      	it	lt
 80162b0:	3101      	addlt	r1, #1
 80162b2:	f7ff feca 	bl	801604a <_Balloc>
 80162b6:	f100 0514 	add.w	r5, r0, #20
 80162ba:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80162be:	462b      	mov	r3, r5
 80162c0:	2200      	movs	r2, #0
 80162c2:	4573      	cmp	r3, lr
 80162c4:	d316      	bcc.n	80162f4 <__multiply+0x74>
 80162c6:	f104 0214 	add.w	r2, r4, #20
 80162ca:	f108 0114 	add.w	r1, r8, #20
 80162ce:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80162d2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80162d6:	9300      	str	r3, [sp, #0]
 80162d8:	9b00      	ldr	r3, [sp, #0]
 80162da:	9201      	str	r2, [sp, #4]
 80162dc:	4293      	cmp	r3, r2
 80162de:	d80c      	bhi.n	80162fa <__multiply+0x7a>
 80162e0:	2e00      	cmp	r6, #0
 80162e2:	dd03      	ble.n	80162ec <__multiply+0x6c>
 80162e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d05d      	beq.n	80163a8 <__multiply+0x128>
 80162ec:	6106      	str	r6, [r0, #16]
 80162ee:	b003      	add	sp, #12
 80162f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f4:	f843 2b04 	str.w	r2, [r3], #4
 80162f8:	e7e3      	b.n	80162c2 <__multiply+0x42>
 80162fa:	f8b2 b000 	ldrh.w	fp, [r2]
 80162fe:	f1bb 0f00 	cmp.w	fp, #0
 8016302:	d023      	beq.n	801634c <__multiply+0xcc>
 8016304:	4689      	mov	r9, r1
 8016306:	46ac      	mov	ip, r5
 8016308:	f04f 0800 	mov.w	r8, #0
 801630c:	f859 4b04 	ldr.w	r4, [r9], #4
 8016310:	f8dc a000 	ldr.w	sl, [ip]
 8016314:	b2a3      	uxth	r3, r4
 8016316:	fa1f fa8a 	uxth.w	sl, sl
 801631a:	fb0b a303 	mla	r3, fp, r3, sl
 801631e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016322:	f8dc 4000 	ldr.w	r4, [ip]
 8016326:	4443      	add	r3, r8
 8016328:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801632c:	fb0b 840a 	mla	r4, fp, sl, r8
 8016330:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016334:	46e2      	mov	sl, ip
 8016336:	b29b      	uxth	r3, r3
 8016338:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801633c:	454f      	cmp	r7, r9
 801633e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016342:	f84a 3b04 	str.w	r3, [sl], #4
 8016346:	d82b      	bhi.n	80163a0 <__multiply+0x120>
 8016348:	f8cc 8004 	str.w	r8, [ip, #4]
 801634c:	9b01      	ldr	r3, [sp, #4]
 801634e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016352:	3204      	adds	r2, #4
 8016354:	f1ba 0f00 	cmp.w	sl, #0
 8016358:	d020      	beq.n	801639c <__multiply+0x11c>
 801635a:	682b      	ldr	r3, [r5, #0]
 801635c:	4689      	mov	r9, r1
 801635e:	46a8      	mov	r8, r5
 8016360:	f04f 0b00 	mov.w	fp, #0
 8016364:	f8b9 c000 	ldrh.w	ip, [r9]
 8016368:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801636c:	fb0a 440c 	mla	r4, sl, ip, r4
 8016370:	445c      	add	r4, fp
 8016372:	46c4      	mov	ip, r8
 8016374:	b29b      	uxth	r3, r3
 8016376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801637a:	f84c 3b04 	str.w	r3, [ip], #4
 801637e:	f859 3b04 	ldr.w	r3, [r9], #4
 8016382:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016386:	0c1b      	lsrs	r3, r3, #16
 8016388:	fb0a b303 	mla	r3, sl, r3, fp
 801638c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016390:	454f      	cmp	r7, r9
 8016392:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016396:	d805      	bhi.n	80163a4 <__multiply+0x124>
 8016398:	f8c8 3004 	str.w	r3, [r8, #4]
 801639c:	3504      	adds	r5, #4
 801639e:	e79b      	b.n	80162d8 <__multiply+0x58>
 80163a0:	46d4      	mov	ip, sl
 80163a2:	e7b3      	b.n	801630c <__multiply+0x8c>
 80163a4:	46e0      	mov	r8, ip
 80163a6:	e7dd      	b.n	8016364 <__multiply+0xe4>
 80163a8:	3e01      	subs	r6, #1
 80163aa:	e799      	b.n	80162e0 <__multiply+0x60>

080163ac <__pow5mult>:
 80163ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163b0:	4615      	mov	r5, r2
 80163b2:	f012 0203 	ands.w	r2, r2, #3
 80163b6:	4606      	mov	r6, r0
 80163b8:	460f      	mov	r7, r1
 80163ba:	d007      	beq.n	80163cc <__pow5mult+0x20>
 80163bc:	3a01      	subs	r2, #1
 80163be:	4c21      	ldr	r4, [pc, #132]	; (8016444 <__pow5mult+0x98>)
 80163c0:	2300      	movs	r3, #0
 80163c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80163c6:	f7ff fe8b 	bl	80160e0 <__multadd>
 80163ca:	4607      	mov	r7, r0
 80163cc:	10ad      	asrs	r5, r5, #2
 80163ce:	d035      	beq.n	801643c <__pow5mult+0x90>
 80163d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80163d2:	b93c      	cbnz	r4, 80163e4 <__pow5mult+0x38>
 80163d4:	2010      	movs	r0, #16
 80163d6:	f7ff fe03 	bl	8015fe0 <malloc>
 80163da:	6270      	str	r0, [r6, #36]	; 0x24
 80163dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80163e0:	6004      	str	r4, [r0, #0]
 80163e2:	60c4      	str	r4, [r0, #12]
 80163e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80163e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80163ec:	b94c      	cbnz	r4, 8016402 <__pow5mult+0x56>
 80163ee:	f240 2171 	movw	r1, #625	; 0x271
 80163f2:	4630      	mov	r0, r6
 80163f4:	f7ff ff3b 	bl	801626e <__i2b>
 80163f8:	2300      	movs	r3, #0
 80163fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80163fe:	4604      	mov	r4, r0
 8016400:	6003      	str	r3, [r0, #0]
 8016402:	f04f 0800 	mov.w	r8, #0
 8016406:	07eb      	lsls	r3, r5, #31
 8016408:	d50a      	bpl.n	8016420 <__pow5mult+0x74>
 801640a:	4639      	mov	r1, r7
 801640c:	4622      	mov	r2, r4
 801640e:	4630      	mov	r0, r6
 8016410:	f7ff ff36 	bl	8016280 <__multiply>
 8016414:	4639      	mov	r1, r7
 8016416:	4681      	mov	r9, r0
 8016418:	4630      	mov	r0, r6
 801641a:	f7ff fe4a 	bl	80160b2 <_Bfree>
 801641e:	464f      	mov	r7, r9
 8016420:	106d      	asrs	r5, r5, #1
 8016422:	d00b      	beq.n	801643c <__pow5mult+0x90>
 8016424:	6820      	ldr	r0, [r4, #0]
 8016426:	b938      	cbnz	r0, 8016438 <__pow5mult+0x8c>
 8016428:	4622      	mov	r2, r4
 801642a:	4621      	mov	r1, r4
 801642c:	4630      	mov	r0, r6
 801642e:	f7ff ff27 	bl	8016280 <__multiply>
 8016432:	6020      	str	r0, [r4, #0]
 8016434:	f8c0 8000 	str.w	r8, [r0]
 8016438:	4604      	mov	r4, r0
 801643a:	e7e4      	b.n	8016406 <__pow5mult+0x5a>
 801643c:	4638      	mov	r0, r7
 801643e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016442:	bf00      	nop
 8016444:	08017200 	.word	0x08017200

08016448 <__lshift>:
 8016448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801644c:	460c      	mov	r4, r1
 801644e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016452:	6923      	ldr	r3, [r4, #16]
 8016454:	6849      	ldr	r1, [r1, #4]
 8016456:	eb0a 0903 	add.w	r9, sl, r3
 801645a:	68a3      	ldr	r3, [r4, #8]
 801645c:	4607      	mov	r7, r0
 801645e:	4616      	mov	r6, r2
 8016460:	f109 0501 	add.w	r5, r9, #1
 8016464:	42ab      	cmp	r3, r5
 8016466:	db32      	blt.n	80164ce <__lshift+0x86>
 8016468:	4638      	mov	r0, r7
 801646a:	f7ff fdee 	bl	801604a <_Balloc>
 801646e:	2300      	movs	r3, #0
 8016470:	4680      	mov	r8, r0
 8016472:	f100 0114 	add.w	r1, r0, #20
 8016476:	461a      	mov	r2, r3
 8016478:	4553      	cmp	r3, sl
 801647a:	db2b      	blt.n	80164d4 <__lshift+0x8c>
 801647c:	6920      	ldr	r0, [r4, #16]
 801647e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016482:	f104 0314 	add.w	r3, r4, #20
 8016486:	f016 021f 	ands.w	r2, r6, #31
 801648a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801648e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016492:	d025      	beq.n	80164e0 <__lshift+0x98>
 8016494:	f1c2 0e20 	rsb	lr, r2, #32
 8016498:	2000      	movs	r0, #0
 801649a:	681e      	ldr	r6, [r3, #0]
 801649c:	468a      	mov	sl, r1
 801649e:	4096      	lsls	r6, r2
 80164a0:	4330      	orrs	r0, r6
 80164a2:	f84a 0b04 	str.w	r0, [sl], #4
 80164a6:	f853 0b04 	ldr.w	r0, [r3], #4
 80164aa:	459c      	cmp	ip, r3
 80164ac:	fa20 f00e 	lsr.w	r0, r0, lr
 80164b0:	d814      	bhi.n	80164dc <__lshift+0x94>
 80164b2:	6048      	str	r0, [r1, #4]
 80164b4:	b108      	cbz	r0, 80164ba <__lshift+0x72>
 80164b6:	f109 0502 	add.w	r5, r9, #2
 80164ba:	3d01      	subs	r5, #1
 80164bc:	4638      	mov	r0, r7
 80164be:	f8c8 5010 	str.w	r5, [r8, #16]
 80164c2:	4621      	mov	r1, r4
 80164c4:	f7ff fdf5 	bl	80160b2 <_Bfree>
 80164c8:	4640      	mov	r0, r8
 80164ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164ce:	3101      	adds	r1, #1
 80164d0:	005b      	lsls	r3, r3, #1
 80164d2:	e7c7      	b.n	8016464 <__lshift+0x1c>
 80164d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80164d8:	3301      	adds	r3, #1
 80164da:	e7cd      	b.n	8016478 <__lshift+0x30>
 80164dc:	4651      	mov	r1, sl
 80164de:	e7dc      	b.n	801649a <__lshift+0x52>
 80164e0:	3904      	subs	r1, #4
 80164e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80164e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80164ea:	459c      	cmp	ip, r3
 80164ec:	d8f9      	bhi.n	80164e2 <__lshift+0x9a>
 80164ee:	e7e4      	b.n	80164ba <__lshift+0x72>

080164f0 <__mcmp>:
 80164f0:	6903      	ldr	r3, [r0, #16]
 80164f2:	690a      	ldr	r2, [r1, #16]
 80164f4:	1a9b      	subs	r3, r3, r2
 80164f6:	b530      	push	{r4, r5, lr}
 80164f8:	d10c      	bne.n	8016514 <__mcmp+0x24>
 80164fa:	0092      	lsls	r2, r2, #2
 80164fc:	3014      	adds	r0, #20
 80164fe:	3114      	adds	r1, #20
 8016500:	1884      	adds	r4, r0, r2
 8016502:	4411      	add	r1, r2
 8016504:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016508:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801650c:	4295      	cmp	r5, r2
 801650e:	d003      	beq.n	8016518 <__mcmp+0x28>
 8016510:	d305      	bcc.n	801651e <__mcmp+0x2e>
 8016512:	2301      	movs	r3, #1
 8016514:	4618      	mov	r0, r3
 8016516:	bd30      	pop	{r4, r5, pc}
 8016518:	42a0      	cmp	r0, r4
 801651a:	d3f3      	bcc.n	8016504 <__mcmp+0x14>
 801651c:	e7fa      	b.n	8016514 <__mcmp+0x24>
 801651e:	f04f 33ff 	mov.w	r3, #4294967295
 8016522:	e7f7      	b.n	8016514 <__mcmp+0x24>

08016524 <__mdiff>:
 8016524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016528:	460d      	mov	r5, r1
 801652a:	4607      	mov	r7, r0
 801652c:	4611      	mov	r1, r2
 801652e:	4628      	mov	r0, r5
 8016530:	4614      	mov	r4, r2
 8016532:	f7ff ffdd 	bl	80164f0 <__mcmp>
 8016536:	1e06      	subs	r6, r0, #0
 8016538:	d108      	bne.n	801654c <__mdiff+0x28>
 801653a:	4631      	mov	r1, r6
 801653c:	4638      	mov	r0, r7
 801653e:	f7ff fd84 	bl	801604a <_Balloc>
 8016542:	2301      	movs	r3, #1
 8016544:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801654c:	bfa4      	itt	ge
 801654e:	4623      	movge	r3, r4
 8016550:	462c      	movge	r4, r5
 8016552:	4638      	mov	r0, r7
 8016554:	6861      	ldr	r1, [r4, #4]
 8016556:	bfa6      	itte	ge
 8016558:	461d      	movge	r5, r3
 801655a:	2600      	movge	r6, #0
 801655c:	2601      	movlt	r6, #1
 801655e:	f7ff fd74 	bl	801604a <_Balloc>
 8016562:	692b      	ldr	r3, [r5, #16]
 8016564:	60c6      	str	r6, [r0, #12]
 8016566:	6926      	ldr	r6, [r4, #16]
 8016568:	f105 0914 	add.w	r9, r5, #20
 801656c:	f104 0214 	add.w	r2, r4, #20
 8016570:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016574:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016578:	f100 0514 	add.w	r5, r0, #20
 801657c:	f04f 0e00 	mov.w	lr, #0
 8016580:	f852 ab04 	ldr.w	sl, [r2], #4
 8016584:	f859 4b04 	ldr.w	r4, [r9], #4
 8016588:	fa1e f18a 	uxtah	r1, lr, sl
 801658c:	b2a3      	uxth	r3, r4
 801658e:	1ac9      	subs	r1, r1, r3
 8016590:	0c23      	lsrs	r3, r4, #16
 8016592:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016596:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801659a:	b289      	uxth	r1, r1
 801659c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80165a0:	45c8      	cmp	r8, r9
 80165a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80165a6:	4694      	mov	ip, r2
 80165a8:	f845 3b04 	str.w	r3, [r5], #4
 80165ac:	d8e8      	bhi.n	8016580 <__mdiff+0x5c>
 80165ae:	45bc      	cmp	ip, r7
 80165b0:	d304      	bcc.n	80165bc <__mdiff+0x98>
 80165b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80165b6:	b183      	cbz	r3, 80165da <__mdiff+0xb6>
 80165b8:	6106      	str	r6, [r0, #16]
 80165ba:	e7c5      	b.n	8016548 <__mdiff+0x24>
 80165bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80165c0:	fa1e f381 	uxtah	r3, lr, r1
 80165c4:	141a      	asrs	r2, r3, #16
 80165c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80165ca:	b29b      	uxth	r3, r3
 80165cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80165d0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80165d4:	f845 3b04 	str.w	r3, [r5], #4
 80165d8:	e7e9      	b.n	80165ae <__mdiff+0x8a>
 80165da:	3e01      	subs	r6, #1
 80165dc:	e7e9      	b.n	80165b2 <__mdiff+0x8e>
	...

080165e0 <__ulp>:
 80165e0:	4b12      	ldr	r3, [pc, #72]	; (801662c <__ulp+0x4c>)
 80165e2:	ee10 2a90 	vmov	r2, s1
 80165e6:	401a      	ands	r2, r3
 80165e8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	dd04      	ble.n	80165fa <__ulp+0x1a>
 80165f0:	2000      	movs	r0, #0
 80165f2:	4619      	mov	r1, r3
 80165f4:	ec41 0b10 	vmov	d0, r0, r1
 80165f8:	4770      	bx	lr
 80165fa:	425b      	negs	r3, r3
 80165fc:	151b      	asrs	r3, r3, #20
 80165fe:	2b13      	cmp	r3, #19
 8016600:	f04f 0000 	mov.w	r0, #0
 8016604:	f04f 0100 	mov.w	r1, #0
 8016608:	dc04      	bgt.n	8016614 <__ulp+0x34>
 801660a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801660e:	fa42 f103 	asr.w	r1, r2, r3
 8016612:	e7ef      	b.n	80165f4 <__ulp+0x14>
 8016614:	3b14      	subs	r3, #20
 8016616:	2b1e      	cmp	r3, #30
 8016618:	f04f 0201 	mov.w	r2, #1
 801661c:	bfda      	itte	le
 801661e:	f1c3 031f 	rsble	r3, r3, #31
 8016622:	fa02 f303 	lslle.w	r3, r2, r3
 8016626:	4613      	movgt	r3, r2
 8016628:	4618      	mov	r0, r3
 801662a:	e7e3      	b.n	80165f4 <__ulp+0x14>
 801662c:	7ff00000 	.word	0x7ff00000

08016630 <__b2d>:
 8016630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016632:	6905      	ldr	r5, [r0, #16]
 8016634:	f100 0714 	add.w	r7, r0, #20
 8016638:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801663c:	1f2e      	subs	r6, r5, #4
 801663e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016642:	4620      	mov	r0, r4
 8016644:	f7ff fdc5 	bl	80161d2 <__hi0bits>
 8016648:	f1c0 0320 	rsb	r3, r0, #32
 801664c:	280a      	cmp	r0, #10
 801664e:	600b      	str	r3, [r1, #0]
 8016650:	f8df c074 	ldr.w	ip, [pc, #116]	; 80166c8 <__b2d+0x98>
 8016654:	dc14      	bgt.n	8016680 <__b2d+0x50>
 8016656:	f1c0 0e0b 	rsb	lr, r0, #11
 801665a:	fa24 f10e 	lsr.w	r1, r4, lr
 801665e:	42b7      	cmp	r7, r6
 8016660:	ea41 030c 	orr.w	r3, r1, ip
 8016664:	bf34      	ite	cc
 8016666:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801666a:	2100      	movcs	r1, #0
 801666c:	3015      	adds	r0, #21
 801666e:	fa04 f000 	lsl.w	r0, r4, r0
 8016672:	fa21 f10e 	lsr.w	r1, r1, lr
 8016676:	ea40 0201 	orr.w	r2, r0, r1
 801667a:	ec43 2b10 	vmov	d0, r2, r3
 801667e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016680:	42b7      	cmp	r7, r6
 8016682:	bf3a      	itte	cc
 8016684:	f1a5 0608 	subcc.w	r6, r5, #8
 8016688:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801668c:	2100      	movcs	r1, #0
 801668e:	380b      	subs	r0, #11
 8016690:	d015      	beq.n	80166be <__b2d+0x8e>
 8016692:	4084      	lsls	r4, r0
 8016694:	f1c0 0520 	rsb	r5, r0, #32
 8016698:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801669c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80166a0:	42be      	cmp	r6, r7
 80166a2:	fa21 fc05 	lsr.w	ip, r1, r5
 80166a6:	ea44 030c 	orr.w	r3, r4, ip
 80166aa:	bf8c      	ite	hi
 80166ac:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80166b0:	2400      	movls	r4, #0
 80166b2:	fa01 f000 	lsl.w	r0, r1, r0
 80166b6:	40ec      	lsrs	r4, r5
 80166b8:	ea40 0204 	orr.w	r2, r0, r4
 80166bc:	e7dd      	b.n	801667a <__b2d+0x4a>
 80166be:	ea44 030c 	orr.w	r3, r4, ip
 80166c2:	460a      	mov	r2, r1
 80166c4:	e7d9      	b.n	801667a <__b2d+0x4a>
 80166c6:	bf00      	nop
 80166c8:	3ff00000 	.word	0x3ff00000

080166cc <__d2b>:
 80166cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80166d0:	460e      	mov	r6, r1
 80166d2:	2101      	movs	r1, #1
 80166d4:	ec59 8b10 	vmov	r8, r9, d0
 80166d8:	4615      	mov	r5, r2
 80166da:	f7ff fcb6 	bl	801604a <_Balloc>
 80166de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80166e2:	4607      	mov	r7, r0
 80166e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80166e8:	bb34      	cbnz	r4, 8016738 <__d2b+0x6c>
 80166ea:	9301      	str	r3, [sp, #4]
 80166ec:	f1b8 0300 	subs.w	r3, r8, #0
 80166f0:	d027      	beq.n	8016742 <__d2b+0x76>
 80166f2:	a802      	add	r0, sp, #8
 80166f4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80166f8:	f7ff fd8a 	bl	8016210 <__lo0bits>
 80166fc:	9900      	ldr	r1, [sp, #0]
 80166fe:	b1f0      	cbz	r0, 801673e <__d2b+0x72>
 8016700:	9a01      	ldr	r2, [sp, #4]
 8016702:	f1c0 0320 	rsb	r3, r0, #32
 8016706:	fa02 f303 	lsl.w	r3, r2, r3
 801670a:	430b      	orrs	r3, r1
 801670c:	40c2      	lsrs	r2, r0
 801670e:	617b      	str	r3, [r7, #20]
 8016710:	9201      	str	r2, [sp, #4]
 8016712:	9b01      	ldr	r3, [sp, #4]
 8016714:	61bb      	str	r3, [r7, #24]
 8016716:	2b00      	cmp	r3, #0
 8016718:	bf14      	ite	ne
 801671a:	2102      	movne	r1, #2
 801671c:	2101      	moveq	r1, #1
 801671e:	6139      	str	r1, [r7, #16]
 8016720:	b1c4      	cbz	r4, 8016754 <__d2b+0x88>
 8016722:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016726:	4404      	add	r4, r0
 8016728:	6034      	str	r4, [r6, #0]
 801672a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801672e:	6028      	str	r0, [r5, #0]
 8016730:	4638      	mov	r0, r7
 8016732:	b003      	add	sp, #12
 8016734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801673c:	e7d5      	b.n	80166ea <__d2b+0x1e>
 801673e:	6179      	str	r1, [r7, #20]
 8016740:	e7e7      	b.n	8016712 <__d2b+0x46>
 8016742:	a801      	add	r0, sp, #4
 8016744:	f7ff fd64 	bl	8016210 <__lo0bits>
 8016748:	9b01      	ldr	r3, [sp, #4]
 801674a:	617b      	str	r3, [r7, #20]
 801674c:	2101      	movs	r1, #1
 801674e:	6139      	str	r1, [r7, #16]
 8016750:	3020      	adds	r0, #32
 8016752:	e7e5      	b.n	8016720 <__d2b+0x54>
 8016754:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016758:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801675c:	6030      	str	r0, [r6, #0]
 801675e:	6918      	ldr	r0, [r3, #16]
 8016760:	f7ff fd37 	bl	80161d2 <__hi0bits>
 8016764:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016768:	e7e1      	b.n	801672e <__d2b+0x62>

0801676a <__ratio>:
 801676a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801676e:	4688      	mov	r8, r1
 8016770:	4669      	mov	r1, sp
 8016772:	4681      	mov	r9, r0
 8016774:	f7ff ff5c 	bl	8016630 <__b2d>
 8016778:	a901      	add	r1, sp, #4
 801677a:	4640      	mov	r0, r8
 801677c:	ec57 6b10 	vmov	r6, r7, d0
 8016780:	f7ff ff56 	bl	8016630 <__b2d>
 8016784:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016788:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801678c:	eba3 0c02 	sub.w	ip, r3, r2
 8016790:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016794:	1a9b      	subs	r3, r3, r2
 8016796:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801679a:	ec5b ab10 	vmov	sl, fp, d0
 801679e:	2b00      	cmp	r3, #0
 80167a0:	bfce      	itee	gt
 80167a2:	463a      	movgt	r2, r7
 80167a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80167a8:	465a      	movle	r2, fp
 80167aa:	4659      	mov	r1, fp
 80167ac:	463d      	mov	r5, r7
 80167ae:	bfd4      	ite	le
 80167b0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80167b4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80167b8:	4630      	mov	r0, r6
 80167ba:	ee10 2a10 	vmov	r2, s0
 80167be:	460b      	mov	r3, r1
 80167c0:	4629      	mov	r1, r5
 80167c2:	f7f1 ff7b 	bl	80086bc <__aeabi_ddiv>
 80167c6:	ec41 0b10 	vmov	d0, r0, r1
 80167ca:	b003      	add	sp, #12
 80167cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167d0 <__copybits>:
 80167d0:	3901      	subs	r1, #1
 80167d2:	b510      	push	{r4, lr}
 80167d4:	1149      	asrs	r1, r1, #5
 80167d6:	6914      	ldr	r4, [r2, #16]
 80167d8:	3101      	adds	r1, #1
 80167da:	f102 0314 	add.w	r3, r2, #20
 80167de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80167e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80167e6:	42a3      	cmp	r3, r4
 80167e8:	4602      	mov	r2, r0
 80167ea:	d303      	bcc.n	80167f4 <__copybits+0x24>
 80167ec:	2300      	movs	r3, #0
 80167ee:	428a      	cmp	r2, r1
 80167f0:	d305      	bcc.n	80167fe <__copybits+0x2e>
 80167f2:	bd10      	pop	{r4, pc}
 80167f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80167f8:	f840 2b04 	str.w	r2, [r0], #4
 80167fc:	e7f3      	b.n	80167e6 <__copybits+0x16>
 80167fe:	f842 3b04 	str.w	r3, [r2], #4
 8016802:	e7f4      	b.n	80167ee <__copybits+0x1e>

08016804 <__any_on>:
 8016804:	f100 0214 	add.w	r2, r0, #20
 8016808:	6900      	ldr	r0, [r0, #16]
 801680a:	114b      	asrs	r3, r1, #5
 801680c:	4298      	cmp	r0, r3
 801680e:	b510      	push	{r4, lr}
 8016810:	db11      	blt.n	8016836 <__any_on+0x32>
 8016812:	dd0a      	ble.n	801682a <__any_on+0x26>
 8016814:	f011 011f 	ands.w	r1, r1, #31
 8016818:	d007      	beq.n	801682a <__any_on+0x26>
 801681a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801681e:	fa24 f001 	lsr.w	r0, r4, r1
 8016822:	fa00 f101 	lsl.w	r1, r0, r1
 8016826:	428c      	cmp	r4, r1
 8016828:	d10b      	bne.n	8016842 <__any_on+0x3e>
 801682a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801682e:	4293      	cmp	r3, r2
 8016830:	d803      	bhi.n	801683a <__any_on+0x36>
 8016832:	2000      	movs	r0, #0
 8016834:	bd10      	pop	{r4, pc}
 8016836:	4603      	mov	r3, r0
 8016838:	e7f7      	b.n	801682a <__any_on+0x26>
 801683a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801683e:	2900      	cmp	r1, #0
 8016840:	d0f5      	beq.n	801682e <__any_on+0x2a>
 8016842:	2001      	movs	r0, #1
 8016844:	e7f6      	b.n	8016834 <__any_on+0x30>

08016846 <_calloc_r>:
 8016846:	b538      	push	{r3, r4, r5, lr}
 8016848:	fb02 f401 	mul.w	r4, r2, r1
 801684c:	4621      	mov	r1, r4
 801684e:	f7fb fa97 	bl	8011d80 <_malloc_r>
 8016852:	4605      	mov	r5, r0
 8016854:	b118      	cbz	r0, 801685e <_calloc_r+0x18>
 8016856:	4622      	mov	r2, r4
 8016858:	2100      	movs	r1, #0
 801685a:	f7fb fa3a 	bl	8011cd2 <memset>
 801685e:	4628      	mov	r0, r5
 8016860:	bd38      	pop	{r3, r4, r5, pc}

08016862 <_realloc_r>:
 8016862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016864:	4607      	mov	r7, r0
 8016866:	4614      	mov	r4, r2
 8016868:	460e      	mov	r6, r1
 801686a:	b921      	cbnz	r1, 8016876 <_realloc_r+0x14>
 801686c:	4611      	mov	r1, r2
 801686e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016872:	f7fb ba85 	b.w	8011d80 <_malloc_r>
 8016876:	b922      	cbnz	r2, 8016882 <_realloc_r+0x20>
 8016878:	f7fb fa34 	bl	8011ce4 <_free_r>
 801687c:	4625      	mov	r5, r4
 801687e:	4628      	mov	r0, r5
 8016880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016882:	f000 f9ce 	bl	8016c22 <_malloc_usable_size_r>
 8016886:	42a0      	cmp	r0, r4
 8016888:	d20f      	bcs.n	80168aa <_realloc_r+0x48>
 801688a:	4621      	mov	r1, r4
 801688c:	4638      	mov	r0, r7
 801688e:	f7fb fa77 	bl	8011d80 <_malloc_r>
 8016892:	4605      	mov	r5, r0
 8016894:	2800      	cmp	r0, #0
 8016896:	d0f2      	beq.n	801687e <_realloc_r+0x1c>
 8016898:	4631      	mov	r1, r6
 801689a:	4622      	mov	r2, r4
 801689c:	f7fb fa0e 	bl	8011cbc <memcpy>
 80168a0:	4631      	mov	r1, r6
 80168a2:	4638      	mov	r0, r7
 80168a4:	f7fb fa1e 	bl	8011ce4 <_free_r>
 80168a8:	e7e9      	b.n	801687e <_realloc_r+0x1c>
 80168aa:	4635      	mov	r5, r6
 80168ac:	e7e7      	b.n	801687e <_realloc_r+0x1c>

080168ae <__ssputs_r>:
 80168ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168b2:	688e      	ldr	r6, [r1, #8]
 80168b4:	429e      	cmp	r6, r3
 80168b6:	4682      	mov	sl, r0
 80168b8:	460c      	mov	r4, r1
 80168ba:	4690      	mov	r8, r2
 80168bc:	4699      	mov	r9, r3
 80168be:	d837      	bhi.n	8016930 <__ssputs_r+0x82>
 80168c0:	898a      	ldrh	r2, [r1, #12]
 80168c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80168c6:	d031      	beq.n	801692c <__ssputs_r+0x7e>
 80168c8:	6825      	ldr	r5, [r4, #0]
 80168ca:	6909      	ldr	r1, [r1, #16]
 80168cc:	1a6f      	subs	r7, r5, r1
 80168ce:	6965      	ldr	r5, [r4, #20]
 80168d0:	2302      	movs	r3, #2
 80168d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80168d6:	fb95 f5f3 	sdiv	r5, r5, r3
 80168da:	f109 0301 	add.w	r3, r9, #1
 80168de:	443b      	add	r3, r7
 80168e0:	429d      	cmp	r5, r3
 80168e2:	bf38      	it	cc
 80168e4:	461d      	movcc	r5, r3
 80168e6:	0553      	lsls	r3, r2, #21
 80168e8:	d530      	bpl.n	801694c <__ssputs_r+0x9e>
 80168ea:	4629      	mov	r1, r5
 80168ec:	f7fb fa48 	bl	8011d80 <_malloc_r>
 80168f0:	4606      	mov	r6, r0
 80168f2:	b950      	cbnz	r0, 801690a <__ssputs_r+0x5c>
 80168f4:	230c      	movs	r3, #12
 80168f6:	f8ca 3000 	str.w	r3, [sl]
 80168fa:	89a3      	ldrh	r3, [r4, #12]
 80168fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016900:	81a3      	strh	r3, [r4, #12]
 8016902:	f04f 30ff 	mov.w	r0, #4294967295
 8016906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801690a:	463a      	mov	r2, r7
 801690c:	6921      	ldr	r1, [r4, #16]
 801690e:	f7fb f9d5 	bl	8011cbc <memcpy>
 8016912:	89a3      	ldrh	r3, [r4, #12]
 8016914:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801691c:	81a3      	strh	r3, [r4, #12]
 801691e:	6126      	str	r6, [r4, #16]
 8016920:	6165      	str	r5, [r4, #20]
 8016922:	443e      	add	r6, r7
 8016924:	1bed      	subs	r5, r5, r7
 8016926:	6026      	str	r6, [r4, #0]
 8016928:	60a5      	str	r5, [r4, #8]
 801692a:	464e      	mov	r6, r9
 801692c:	454e      	cmp	r6, r9
 801692e:	d900      	bls.n	8016932 <__ssputs_r+0x84>
 8016930:	464e      	mov	r6, r9
 8016932:	4632      	mov	r2, r6
 8016934:	4641      	mov	r1, r8
 8016936:	6820      	ldr	r0, [r4, #0]
 8016938:	f7ff fb6c 	bl	8016014 <memmove>
 801693c:	68a3      	ldr	r3, [r4, #8]
 801693e:	1b9b      	subs	r3, r3, r6
 8016940:	60a3      	str	r3, [r4, #8]
 8016942:	6823      	ldr	r3, [r4, #0]
 8016944:	441e      	add	r6, r3
 8016946:	6026      	str	r6, [r4, #0]
 8016948:	2000      	movs	r0, #0
 801694a:	e7dc      	b.n	8016906 <__ssputs_r+0x58>
 801694c:	462a      	mov	r2, r5
 801694e:	f7ff ff88 	bl	8016862 <_realloc_r>
 8016952:	4606      	mov	r6, r0
 8016954:	2800      	cmp	r0, #0
 8016956:	d1e2      	bne.n	801691e <__ssputs_r+0x70>
 8016958:	6921      	ldr	r1, [r4, #16]
 801695a:	4650      	mov	r0, sl
 801695c:	f7fb f9c2 	bl	8011ce4 <_free_r>
 8016960:	e7c8      	b.n	80168f4 <__ssputs_r+0x46>
	...

08016964 <_svfiprintf_r>:
 8016964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016968:	461d      	mov	r5, r3
 801696a:	898b      	ldrh	r3, [r1, #12]
 801696c:	061f      	lsls	r7, r3, #24
 801696e:	b09d      	sub	sp, #116	; 0x74
 8016970:	4680      	mov	r8, r0
 8016972:	460c      	mov	r4, r1
 8016974:	4616      	mov	r6, r2
 8016976:	d50f      	bpl.n	8016998 <_svfiprintf_r+0x34>
 8016978:	690b      	ldr	r3, [r1, #16]
 801697a:	b96b      	cbnz	r3, 8016998 <_svfiprintf_r+0x34>
 801697c:	2140      	movs	r1, #64	; 0x40
 801697e:	f7fb f9ff 	bl	8011d80 <_malloc_r>
 8016982:	6020      	str	r0, [r4, #0]
 8016984:	6120      	str	r0, [r4, #16]
 8016986:	b928      	cbnz	r0, 8016994 <_svfiprintf_r+0x30>
 8016988:	230c      	movs	r3, #12
 801698a:	f8c8 3000 	str.w	r3, [r8]
 801698e:	f04f 30ff 	mov.w	r0, #4294967295
 8016992:	e0c8      	b.n	8016b26 <_svfiprintf_r+0x1c2>
 8016994:	2340      	movs	r3, #64	; 0x40
 8016996:	6163      	str	r3, [r4, #20]
 8016998:	2300      	movs	r3, #0
 801699a:	9309      	str	r3, [sp, #36]	; 0x24
 801699c:	2320      	movs	r3, #32
 801699e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169a2:	2330      	movs	r3, #48	; 0x30
 80169a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169a8:	9503      	str	r5, [sp, #12]
 80169aa:	f04f 0b01 	mov.w	fp, #1
 80169ae:	4637      	mov	r7, r6
 80169b0:	463d      	mov	r5, r7
 80169b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80169b6:	b10b      	cbz	r3, 80169bc <_svfiprintf_r+0x58>
 80169b8:	2b25      	cmp	r3, #37	; 0x25
 80169ba:	d13e      	bne.n	8016a3a <_svfiprintf_r+0xd6>
 80169bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80169c0:	d00b      	beq.n	80169da <_svfiprintf_r+0x76>
 80169c2:	4653      	mov	r3, sl
 80169c4:	4632      	mov	r2, r6
 80169c6:	4621      	mov	r1, r4
 80169c8:	4640      	mov	r0, r8
 80169ca:	f7ff ff70 	bl	80168ae <__ssputs_r>
 80169ce:	3001      	adds	r0, #1
 80169d0:	f000 80a4 	beq.w	8016b1c <_svfiprintf_r+0x1b8>
 80169d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169d6:	4453      	add	r3, sl
 80169d8:	9309      	str	r3, [sp, #36]	; 0x24
 80169da:	783b      	ldrb	r3, [r7, #0]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	f000 809d 	beq.w	8016b1c <_svfiprintf_r+0x1b8>
 80169e2:	2300      	movs	r3, #0
 80169e4:	f04f 32ff 	mov.w	r2, #4294967295
 80169e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169ec:	9304      	str	r3, [sp, #16]
 80169ee:	9307      	str	r3, [sp, #28]
 80169f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80169f4:	931a      	str	r3, [sp, #104]	; 0x68
 80169f6:	462f      	mov	r7, r5
 80169f8:	2205      	movs	r2, #5
 80169fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80169fe:	4850      	ldr	r0, [pc, #320]	; (8016b40 <_svfiprintf_r+0x1dc>)
 8016a00:	f7f1 fb26 	bl	8008050 <memchr>
 8016a04:	9b04      	ldr	r3, [sp, #16]
 8016a06:	b9d0      	cbnz	r0, 8016a3e <_svfiprintf_r+0xda>
 8016a08:	06d9      	lsls	r1, r3, #27
 8016a0a:	bf44      	itt	mi
 8016a0c:	2220      	movmi	r2, #32
 8016a0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a12:	071a      	lsls	r2, r3, #28
 8016a14:	bf44      	itt	mi
 8016a16:	222b      	movmi	r2, #43	; 0x2b
 8016a18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a1c:	782a      	ldrb	r2, [r5, #0]
 8016a1e:	2a2a      	cmp	r2, #42	; 0x2a
 8016a20:	d015      	beq.n	8016a4e <_svfiprintf_r+0xea>
 8016a22:	9a07      	ldr	r2, [sp, #28]
 8016a24:	462f      	mov	r7, r5
 8016a26:	2000      	movs	r0, #0
 8016a28:	250a      	movs	r5, #10
 8016a2a:	4639      	mov	r1, r7
 8016a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a30:	3b30      	subs	r3, #48	; 0x30
 8016a32:	2b09      	cmp	r3, #9
 8016a34:	d94d      	bls.n	8016ad2 <_svfiprintf_r+0x16e>
 8016a36:	b1b8      	cbz	r0, 8016a68 <_svfiprintf_r+0x104>
 8016a38:	e00f      	b.n	8016a5a <_svfiprintf_r+0xf6>
 8016a3a:	462f      	mov	r7, r5
 8016a3c:	e7b8      	b.n	80169b0 <_svfiprintf_r+0x4c>
 8016a3e:	4a40      	ldr	r2, [pc, #256]	; (8016b40 <_svfiprintf_r+0x1dc>)
 8016a40:	1a80      	subs	r0, r0, r2
 8016a42:	fa0b f000 	lsl.w	r0, fp, r0
 8016a46:	4318      	orrs	r0, r3
 8016a48:	9004      	str	r0, [sp, #16]
 8016a4a:	463d      	mov	r5, r7
 8016a4c:	e7d3      	b.n	80169f6 <_svfiprintf_r+0x92>
 8016a4e:	9a03      	ldr	r2, [sp, #12]
 8016a50:	1d11      	adds	r1, r2, #4
 8016a52:	6812      	ldr	r2, [r2, #0]
 8016a54:	9103      	str	r1, [sp, #12]
 8016a56:	2a00      	cmp	r2, #0
 8016a58:	db01      	blt.n	8016a5e <_svfiprintf_r+0xfa>
 8016a5a:	9207      	str	r2, [sp, #28]
 8016a5c:	e004      	b.n	8016a68 <_svfiprintf_r+0x104>
 8016a5e:	4252      	negs	r2, r2
 8016a60:	f043 0302 	orr.w	r3, r3, #2
 8016a64:	9207      	str	r2, [sp, #28]
 8016a66:	9304      	str	r3, [sp, #16]
 8016a68:	783b      	ldrb	r3, [r7, #0]
 8016a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8016a6c:	d10c      	bne.n	8016a88 <_svfiprintf_r+0x124>
 8016a6e:	787b      	ldrb	r3, [r7, #1]
 8016a70:	2b2a      	cmp	r3, #42	; 0x2a
 8016a72:	d133      	bne.n	8016adc <_svfiprintf_r+0x178>
 8016a74:	9b03      	ldr	r3, [sp, #12]
 8016a76:	1d1a      	adds	r2, r3, #4
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	9203      	str	r2, [sp, #12]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	bfb8      	it	lt
 8016a80:	f04f 33ff 	movlt.w	r3, #4294967295
 8016a84:	3702      	adds	r7, #2
 8016a86:	9305      	str	r3, [sp, #20]
 8016a88:	4d2e      	ldr	r5, [pc, #184]	; (8016b44 <_svfiprintf_r+0x1e0>)
 8016a8a:	7839      	ldrb	r1, [r7, #0]
 8016a8c:	2203      	movs	r2, #3
 8016a8e:	4628      	mov	r0, r5
 8016a90:	f7f1 fade 	bl	8008050 <memchr>
 8016a94:	b138      	cbz	r0, 8016aa6 <_svfiprintf_r+0x142>
 8016a96:	2340      	movs	r3, #64	; 0x40
 8016a98:	1b40      	subs	r0, r0, r5
 8016a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8016a9e:	9b04      	ldr	r3, [sp, #16]
 8016aa0:	4303      	orrs	r3, r0
 8016aa2:	3701      	adds	r7, #1
 8016aa4:	9304      	str	r3, [sp, #16]
 8016aa6:	7839      	ldrb	r1, [r7, #0]
 8016aa8:	4827      	ldr	r0, [pc, #156]	; (8016b48 <_svfiprintf_r+0x1e4>)
 8016aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016aae:	2206      	movs	r2, #6
 8016ab0:	1c7e      	adds	r6, r7, #1
 8016ab2:	f7f1 facd 	bl	8008050 <memchr>
 8016ab6:	2800      	cmp	r0, #0
 8016ab8:	d038      	beq.n	8016b2c <_svfiprintf_r+0x1c8>
 8016aba:	4b24      	ldr	r3, [pc, #144]	; (8016b4c <_svfiprintf_r+0x1e8>)
 8016abc:	bb13      	cbnz	r3, 8016b04 <_svfiprintf_r+0x1a0>
 8016abe:	9b03      	ldr	r3, [sp, #12]
 8016ac0:	3307      	adds	r3, #7
 8016ac2:	f023 0307 	bic.w	r3, r3, #7
 8016ac6:	3308      	adds	r3, #8
 8016ac8:	9303      	str	r3, [sp, #12]
 8016aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016acc:	444b      	add	r3, r9
 8016ace:	9309      	str	r3, [sp, #36]	; 0x24
 8016ad0:	e76d      	b.n	80169ae <_svfiprintf_r+0x4a>
 8016ad2:	fb05 3202 	mla	r2, r5, r2, r3
 8016ad6:	2001      	movs	r0, #1
 8016ad8:	460f      	mov	r7, r1
 8016ada:	e7a6      	b.n	8016a2a <_svfiprintf_r+0xc6>
 8016adc:	2300      	movs	r3, #0
 8016ade:	3701      	adds	r7, #1
 8016ae0:	9305      	str	r3, [sp, #20]
 8016ae2:	4619      	mov	r1, r3
 8016ae4:	250a      	movs	r5, #10
 8016ae6:	4638      	mov	r0, r7
 8016ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016aec:	3a30      	subs	r2, #48	; 0x30
 8016aee:	2a09      	cmp	r2, #9
 8016af0:	d903      	bls.n	8016afa <_svfiprintf_r+0x196>
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d0c8      	beq.n	8016a88 <_svfiprintf_r+0x124>
 8016af6:	9105      	str	r1, [sp, #20]
 8016af8:	e7c6      	b.n	8016a88 <_svfiprintf_r+0x124>
 8016afa:	fb05 2101 	mla	r1, r5, r1, r2
 8016afe:	2301      	movs	r3, #1
 8016b00:	4607      	mov	r7, r0
 8016b02:	e7f0      	b.n	8016ae6 <_svfiprintf_r+0x182>
 8016b04:	ab03      	add	r3, sp, #12
 8016b06:	9300      	str	r3, [sp, #0]
 8016b08:	4622      	mov	r2, r4
 8016b0a:	4b11      	ldr	r3, [pc, #68]	; (8016b50 <_svfiprintf_r+0x1ec>)
 8016b0c:	a904      	add	r1, sp, #16
 8016b0e:	4640      	mov	r0, r8
 8016b10:	f7fb fb64 	bl	80121dc <_printf_float>
 8016b14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016b18:	4681      	mov	r9, r0
 8016b1a:	d1d6      	bne.n	8016aca <_svfiprintf_r+0x166>
 8016b1c:	89a3      	ldrh	r3, [r4, #12]
 8016b1e:	065b      	lsls	r3, r3, #25
 8016b20:	f53f af35 	bmi.w	801698e <_svfiprintf_r+0x2a>
 8016b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b26:	b01d      	add	sp, #116	; 0x74
 8016b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b2c:	ab03      	add	r3, sp, #12
 8016b2e:	9300      	str	r3, [sp, #0]
 8016b30:	4622      	mov	r2, r4
 8016b32:	4b07      	ldr	r3, [pc, #28]	; (8016b50 <_svfiprintf_r+0x1ec>)
 8016b34:	a904      	add	r1, sp, #16
 8016b36:	4640      	mov	r0, r8
 8016b38:	f7fb fe06 	bl	8012748 <_printf_i>
 8016b3c:	e7ea      	b.n	8016b14 <_svfiprintf_r+0x1b0>
 8016b3e:	bf00      	nop
 8016b40:	08017040 	.word	0x08017040
 8016b44:	08017046 	.word	0x08017046
 8016b48:	0801704a 	.word	0x0801704a
 8016b4c:	080121dd 	.word	0x080121dd
 8016b50:	080168af 	.word	0x080168af

08016b54 <_putc_r>:
 8016b54:	b570      	push	{r4, r5, r6, lr}
 8016b56:	460d      	mov	r5, r1
 8016b58:	4614      	mov	r4, r2
 8016b5a:	4606      	mov	r6, r0
 8016b5c:	b118      	cbz	r0, 8016b66 <_putc_r+0x12>
 8016b5e:	6983      	ldr	r3, [r0, #24]
 8016b60:	b90b      	cbnz	r3, 8016b66 <_putc_r+0x12>
 8016b62:	f7fa ff7d 	bl	8011a60 <__sinit>
 8016b66:	4b13      	ldr	r3, [pc, #76]	; (8016bb4 <_putc_r+0x60>)
 8016b68:	429c      	cmp	r4, r3
 8016b6a:	d112      	bne.n	8016b92 <_putc_r+0x3e>
 8016b6c:	6874      	ldr	r4, [r6, #4]
 8016b6e:	68a3      	ldr	r3, [r4, #8]
 8016b70:	3b01      	subs	r3, #1
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	60a3      	str	r3, [r4, #8]
 8016b76:	da16      	bge.n	8016ba6 <_putc_r+0x52>
 8016b78:	69a2      	ldr	r2, [r4, #24]
 8016b7a:	4293      	cmp	r3, r2
 8016b7c:	db02      	blt.n	8016b84 <_putc_r+0x30>
 8016b7e:	b2eb      	uxtb	r3, r5
 8016b80:	2b0a      	cmp	r3, #10
 8016b82:	d110      	bne.n	8016ba6 <_putc_r+0x52>
 8016b84:	4622      	mov	r2, r4
 8016b86:	4629      	mov	r1, r5
 8016b88:	4630      	mov	r0, r6
 8016b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b8e:	f7fd bf85 	b.w	8014a9c <__swbuf_r>
 8016b92:	4b09      	ldr	r3, [pc, #36]	; (8016bb8 <_putc_r+0x64>)
 8016b94:	429c      	cmp	r4, r3
 8016b96:	d101      	bne.n	8016b9c <_putc_r+0x48>
 8016b98:	68b4      	ldr	r4, [r6, #8]
 8016b9a:	e7e8      	b.n	8016b6e <_putc_r+0x1a>
 8016b9c:	4b07      	ldr	r3, [pc, #28]	; (8016bbc <_putc_r+0x68>)
 8016b9e:	429c      	cmp	r4, r3
 8016ba0:	bf08      	it	eq
 8016ba2:	68f4      	ldreq	r4, [r6, #12]
 8016ba4:	e7e3      	b.n	8016b6e <_putc_r+0x1a>
 8016ba6:	6823      	ldr	r3, [r4, #0]
 8016ba8:	1c5a      	adds	r2, r3, #1
 8016baa:	6022      	str	r2, [r4, #0]
 8016bac:	701d      	strb	r5, [r3, #0]
 8016bae:	b2e8      	uxtb	r0, r5
 8016bb0:	bd70      	pop	{r4, r5, r6, pc}
 8016bb2:	bf00      	nop
 8016bb4:	08016ffc 	.word	0x08016ffc
 8016bb8:	0801701c 	.word	0x0801701c
 8016bbc:	08016fdc 	.word	0x08016fdc

08016bc0 <_read_r>:
 8016bc0:	b538      	push	{r3, r4, r5, lr}
 8016bc2:	4c07      	ldr	r4, [pc, #28]	; (8016be0 <_read_r+0x20>)
 8016bc4:	4605      	mov	r5, r0
 8016bc6:	4608      	mov	r0, r1
 8016bc8:	4611      	mov	r1, r2
 8016bca:	2200      	movs	r2, #0
 8016bcc:	6022      	str	r2, [r4, #0]
 8016bce:	461a      	mov	r2, r3
 8016bd0:	f7f6 ffdc 	bl	800db8c <_read>
 8016bd4:	1c43      	adds	r3, r0, #1
 8016bd6:	d102      	bne.n	8016bde <_read_r+0x1e>
 8016bd8:	6823      	ldr	r3, [r4, #0]
 8016bda:	b103      	cbz	r3, 8016bde <_read_r+0x1e>
 8016bdc:	602b      	str	r3, [r5, #0]
 8016bde:	bd38      	pop	{r3, r4, r5, pc}
 8016be0:	20002044 	.word	0x20002044

08016be4 <strncmp>:
 8016be4:	b510      	push	{r4, lr}
 8016be6:	b16a      	cbz	r2, 8016c04 <strncmp+0x20>
 8016be8:	3901      	subs	r1, #1
 8016bea:	1884      	adds	r4, r0, r2
 8016bec:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016bf0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016bf4:	4293      	cmp	r3, r2
 8016bf6:	d103      	bne.n	8016c00 <strncmp+0x1c>
 8016bf8:	42a0      	cmp	r0, r4
 8016bfa:	d001      	beq.n	8016c00 <strncmp+0x1c>
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d1f5      	bne.n	8016bec <strncmp+0x8>
 8016c00:	1a98      	subs	r0, r3, r2
 8016c02:	bd10      	pop	{r4, pc}
 8016c04:	4610      	mov	r0, r2
 8016c06:	e7fc      	b.n	8016c02 <strncmp+0x1e>

08016c08 <__ascii_wctomb>:
 8016c08:	b149      	cbz	r1, 8016c1e <__ascii_wctomb+0x16>
 8016c0a:	2aff      	cmp	r2, #255	; 0xff
 8016c0c:	bf85      	ittet	hi
 8016c0e:	238a      	movhi	r3, #138	; 0x8a
 8016c10:	6003      	strhi	r3, [r0, #0]
 8016c12:	700a      	strbls	r2, [r1, #0]
 8016c14:	f04f 30ff 	movhi.w	r0, #4294967295
 8016c18:	bf98      	it	ls
 8016c1a:	2001      	movls	r0, #1
 8016c1c:	4770      	bx	lr
 8016c1e:	4608      	mov	r0, r1
 8016c20:	4770      	bx	lr

08016c22 <_malloc_usable_size_r>:
 8016c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c26:	1f18      	subs	r0, r3, #4
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	bfbc      	itt	lt
 8016c2c:	580b      	ldrlt	r3, [r1, r0]
 8016c2e:	18c0      	addlt	r0, r0, r3
 8016c30:	4770      	bx	lr
	...

08016c34 <_init>:
 8016c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c36:	bf00      	nop
 8016c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c3a:	bc08      	pop	{r3}
 8016c3c:	469e      	mov	lr, r3
 8016c3e:	4770      	bx	lr

08016c40 <_fini>:
 8016c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c42:	bf00      	nop
 8016c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c46:	bc08      	pop	{r3}
 8016c48:	469e      	mov	lr, r3
 8016c4a:	4770      	bx	lr
