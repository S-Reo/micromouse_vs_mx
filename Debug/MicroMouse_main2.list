
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         00010dec  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000738  08018df0  08018df0  00028df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08019528  08019528  0003020c  2**0
                  CONTENTS
  6 .ARM          00000008  08019528  08019528  00029528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08019530  08019530  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08019530  08019530  00029530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08019534  08019534  00029534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000020c  20000000  08019538  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008d44  2000020c  08019744  0003020c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008f50  08019744  00038f50  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003003b  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000617d  00000000  00000000  00060277  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000057b5  00000000  00000000  000663f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000018d0  00000000  00000000  0006bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000020e8  00000000  00000000  0006d480  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00028901  00000000  00000000  0006f568  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00019f33  00000000  00000000  00097e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000cad53  00000000  00000000  000b1d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  0017caef  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00007a28  00000000  00000000  0017cb6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	2000020c 	.word	0x2000020c
 800801c:	00000000 	.word	0x00000000
 8008020:	08018dd4 	.word	0x08018dd4

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000210 	.word	0x20000210
 800803c:	08018dd4 	.word	0x08018dd4

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
}


void InitPosition()
{
	Pos.X = 0;
 8008df8:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <InitPosition+0x14>)
 8008dfa:	2200      	movs	r2, #0
	Pos.Y = 0;
	Pos.Car = north;
	Pos.Dir = front;
	Pos.Act = Wait;
 8008dfc:	2004      	movs	r0, #4
	Pos.WallSaf = wall_warn;//どっちにするか
 8008dfe:	2101      	movs	r1, #1
	Pos.Act = Wait;
 8008e00:	7198      	strb	r0, [r3, #6]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e02:	71d9      	strb	r1, [r3, #7]
	Pos.X = 0;
 8008e04:	801a      	strh	r2, [r3, #0]
	Pos.Car = north;
 8008e06:	715a      	strb	r2, [r3, #5]
	Pos.Dir = front;
 8008e08:	711a      	strb	r2, [r3, #4]

}
 8008e0a:	4770      	bx	lr
 8008e0c:	20000008 	.word	0x20000008

08008e10 <GetWallCtrlDirection>:

int GetWallCtrlDirection()
{
	//新ライブラリ用に変更
	switch(my_mouse.now.car)
 8008e10:	4a31      	ldr	r2, [pc, #196]	; (8008ed8 <GetWallCtrlDirection+0xc8>)
 8008e12:	7a93      	ldrb	r3, [r2, #10]
 8008e14:	2b06      	cmp	r3, #6
 8008e16:	d855      	bhi.n	8008ec4 <GetWallCtrlDirection+0xb4>
 8008e18:	e8df f003 	tbb	[pc, r3]
 8008e1c:	542c5440 	.word	0x542c5440
 8008e20:	5418      	.short	0x5418
 8008e22:	04          	.byte	0x04
 8008e23:	00          	.byte	0x00
		{
			return N_WALL_PID;
		}
		break;
	case west:
		if(my_mouse.now.wall.west == wall)
 8008e24:	7b13      	ldrb	r3, [r2, #12]
 8008e26:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008e2a:	2a40      	cmp	r2, #64	; 0x40
 8008e2c:	d04c      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		{
			return F_WALL_PID;
		}
		else if ( my_mouse.now.wall.north == wall && my_mouse.now.wall.south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8008e2e:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e32:	2a11      	cmp	r2, #17
 8008e34:	d04a      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		{
			return D_WALL_PID;
		}
		else if ( my_mouse.now.wall.north == wall )
 8008e36:	f003 0203 	and.w	r2, r3, #3
 8008e3a:	2a01      	cmp	r2, #1
 8008e3c:	d048      	beq.n	8008ed0 <GetWallCtrlDirection+0xc0>
		{
			return R_WALL_PID;
		}
		else if ( my_mouse.now.wall.south == wall )
 8008e3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e42:	2b10      	cmp	r3, #16
			return L_WALL_PID;
 8008e44:	bf14      	ite	ne
 8008e46:	2006      	movne	r0, #6
 8008e48:	2002      	moveq	r0, #2
 8008e4a:	4770      	bx	lr
		if(my_mouse.now.wall.south == wall)
 8008e4c:	7b13      	ldrb	r3, [r2, #12]
 8008e4e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008e52:	2a10      	cmp	r2, #16
 8008e54:	d038      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.east == wall && my_mouse.now.wall.west == wall)
 8008e56:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008e5a:	2a44      	cmp	r2, #68	; 0x44
 8008e5c:	d036      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.east == wall)
 8008e5e:	f003 020c 	and.w	r2, r3, #12
 8008e62:	2a04      	cmp	r2, #4
 8008e64:	d036      	beq.n	8008ed4 <GetWallCtrlDirection+0xc4>
		else if(my_mouse.now.wall.west == wall)
 8008e66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e6a:	2b40      	cmp	r3, #64	; 0x40
			return R_WALL_PID;
 8008e6c:	bf14      	ite	ne
 8008e6e:	2006      	movne	r0, #6
 8008e70:	2003      	moveq	r0, #3
 8008e72:	4770      	bx	lr
		if(my_mouse.now.wall.east == wall)
 8008e74:	7b13      	ldrb	r3, [r2, #12]
 8008e76:	f003 020c 	and.w	r2, r3, #12
 8008e7a:	2a04      	cmp	r2, #4
 8008e7c:	d024      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.north == wall && my_mouse.now.wall.south == wall)//south)
 8008e7e:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e82:	2a11      	cmp	r2, #17
 8008e84:	d022      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.north == wall)
 8008e86:	f003 0203 	and.w	r2, r3, #3
 8008e8a:	2a01      	cmp	r2, #1
 8008e8c:	d022      	beq.n	8008ed4 <GetWallCtrlDirection+0xc4>
		else if(my_mouse.now.wall.south == wall)
 8008e8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e92:	2b10      	cmp	r3, #16
			return R_WALL_PID;
 8008e94:	bf14      	ite	ne
 8008e96:	2006      	movne	r0, #6
 8008e98:	2003      	moveq	r0, #3
 8008e9a:	4770      	bx	lr
		if(my_mouse.now.wall.north == wall) //現在の方角と、座標から、壁の存在を確認する処理
 8008e9c:	7b13      	ldrb	r3, [r2, #12]
 8008e9e:	f003 0203 	and.w	r2, r3, #3
 8008ea2:	2a01      	cmp	r2, #1
 8008ea4:	d010      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.east == wall && my_mouse.now.wall.west == wall)
 8008ea6:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008eaa:	2a44      	cmp	r2, #68	; 0x44
 8008eac:	d00e      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.east == wall)
 8008eae:	f003 020c 	and.w	r2, r3, #12
 8008eb2:	2a04      	cmp	r2, #4
 8008eb4:	d00c      	beq.n	8008ed0 <GetWallCtrlDirection+0xc0>
		else if(my_mouse.now.wall.west == wall)
 8008eb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008eba:	2b40      	cmp	r3, #64	; 0x40
			return L_WALL_PID;
 8008ebc:	bf14      	ite	ne
 8008ebe:	2006      	movne	r0, #6
 8008ec0:	2002      	moveq	r0, #2
 8008ec2:	4770      	bx	lr
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8008ec4:	2006      	movs	r0, #6
 8008ec6:	4770      	bx	lr
			return F_WALL_PID;
 8008ec8:	2008      	movs	r0, #8
 8008eca:	4770      	bx	lr
			return D_WALL_PID;
 8008ecc:	2001      	movs	r0, #1
 8008ece:	4770      	bx	lr
			return R_WALL_PID;
 8008ed0:	2003      	movs	r0, #3
		break;
	}

}
 8008ed2:	4770      	bx	lr
			return L_WALL_PID;
 8008ed4:	2002      	movs	r0, #2
 8008ed6:	4770      	bx	lr
 8008ed8:	20008224 	.word	0x20008224

08008edc <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8008edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008f28 <WaitStopAndReset+0x4c>
 8008ee4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8008f2c <WaitStopAndReset+0x50>
 8008ee8:	4f0c      	ldr	r7, [pc, #48]	; (8008f1c <WaitStopAndReset+0x40>)
 8008eea:	4e0d      	ldr	r6, [pc, #52]	; (8008f20 <WaitStopAndReset+0x44>)
 8008eec:	4d0d      	ldr	r5, [pc, #52]	; (8008f24 <WaitStopAndReset+0x48>)
//	ControlWall();//ベイブレード対策
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 8008eee:	2400      	movs	r4, #0
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
		AngularAcceleration = 0;
		//AngularV = 0;
//		if(CurrentVelocity[LEFT] > 500)
			ChangeLED(3);
 8008ef0:	2003      	movs	r0, #3
		TargetVelocity[BODY] = 0;
 8008ef2:	f8c9 4008 	str.w	r4, [r9, #8]
		Acceleration = 0;
 8008ef6:	f8c8 4000 	str.w	r4, [r8]
		TargetAngularV = 0;
 8008efa:	603c      	str	r4, [r7, #0]
		AngularAcceleration = 0;
 8008efc:	6034      	str	r4, [r6, #0]
			ChangeLED(3);
 8008efe:	f004 fe83 	bl	800dc08 <ChangeLED>
			//printf("回転停止中\r\n");

	}while(CurrentVelocity[BODY] != 0);
 8008f02:	edd5 7a02 	vldr	s15, [r5, #8]
 8008f06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0e:	d1ef      	bne.n	8008ef0 <WaitStopAndReset+0x14>
	HAL_Delay(100);
 8008f10:	2064      	movs	r0, #100	; 0x64
}
 8008f12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(100);
 8008f16:	f005 bd79 	b.w	800ea0c <HAL_Delay>
 8008f1a:	bf00      	nop
 8008f1c:	20008998 	.word	0x20008998
 8008f20:	20007f3c 	.word	0x20007f3c
 8008f24:	200089c4 	.word	0x200089c4
 8008f28:	20008988 	.word	0x20008988
 8008f2c:	20007f34 	.word	0x20007f34

08008f30 <Rotate>:
	//加速度が一定。角速度が増加。角速度を積分して角度。角速度の式を作り、角速度を積分して角度を求める等式を立てる。
	//Angle = インテグラル(ang_v(t))dt
	//v = v0+at	|	t=v/a	||		ang_v = ang_v0 + ang_accel *t		||	t = ang_v/ang_accel
	//x=0.5*v*v/a	|	a = 0.5*v*v*/x		||		θ=ang_v0*t+0.5*ang_v^2/ang_accel	||	ang_accel =
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)
	float accel_deg = deg*30/90;
 8008f30:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8008f34:	ee60 6a26 	vmul.f32	s13, s0, s13
 8008f38:	ed9f 6a99 	vldr	s12, [pc, #612]	; 80091a0 <Rotate+0x270>
	float const_deg = deg*30/90;
	float decel_deg = deg*30/90;
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f3c:	eddf 7a99 	vldr	s15, [pc, #612]	; 80091a4 <Rotate+0x274>
	TargetAngularV = 0;
 8008f40:	4b99      	ldr	r3, [pc, #612]	; (80091a8 <Rotate+0x278>)
	float accel_deg = deg*30/90;
 8008f42:	ee86 7a86 	vdiv.f32	s14, s13, s12
{
 8008f46:	b510      	push	{r4, lr}
	TargetAngularV = 0;
 8008f48:	2400      	movs	r4, #0
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f4a:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8008f4e:	ee77 6a07 	vadd.f32	s13, s14, s14
 8008f52:	ee67 7aa0 	vmul.f32	s15, s15, s1
{
 8008f56:	ed2d 8b04 	vpush	{d8-d9}
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f5a:	ee17 0a10 	vmov	r0, s14
	TargetAngularV = 0;
 8008f5e:	601c      	str	r4, [r3, #0]
{
 8008f60:	eef0 8a60 	vmov.f32	s17, s1
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f64:	ee87 8aa6 	vdiv.f32	s16, s15, s13
{
 8008f68:	eeb0 9a40 	vmov.f32	s18, s0
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f6c:	f7ff fa24 	bl	80083b8 <__aeabi_f2d>
 8008f70:	a387      	add	r3, pc, #540	; (adr r3, 8009190 <Rotate+0x260>)
 8008f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f76:	f7ff fa77 	bl	8008468 <__aeabi_dmul>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	4b8b      	ldr	r3, [pc, #556]	; (80091ac <Rotate+0x27c>)
 8008f7e:	f7ff fb9d 	bl	80086bc <__aeabi_ddiv>
 8008f82:	f7ff fd69 	bl	8008a58 <__aeabi_d2f>
		}

	}
#endif

	if( ang_v > 0)	//右回転
 8008f86:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f8e:	ee06 0a90 	vmov	s13, r0
	if( ang_v > 0)	//右回転
 8008f92:	f340 80f2 	ble.w	800917a <Rotate+0x24a>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f96:	4b86      	ldr	r3, [pc, #536]	; (80091b0 <Rotate+0x280>)
//		ChangeLED(2);
		//ここのwhileが抜けないことがある
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f98:	4a86      	ldr	r2, [pc, #536]	; (80091b4 <Rotate+0x284>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f9a:	edd3 7a00 	vldr	s15, [r3]
 8008f9e:	4986      	ldr	r1, [pc, #536]	; (80091b8 <Rotate+0x288>)
 8008fa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa4:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008fa8:	ed93 7a00 	vldr	s14, [r3]
 8008fac:	edd2 7a00 	vldr	s15, [r2]
 8008fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb8:	dd0a      	ble.n	8008fd0 <Rotate+0xa0>
		{
			//最短走行の時だけ、Angleが大きくならない、もしくは目標角度がかなり大きい。初期化？最初の旋回なので、0radから90度ぶん目標角度がズレている必要がある。Angleが積算できていないかも。
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8008fba:	ed81 8a00 	vstr	s16, [r1]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008fbe:	ed93 7a00 	vldr	s14, [r3]
 8008fc2:	edd2 7a00 	vldr	s15, [r2]
 8008fc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fce:	dcf4      	bgt.n	8008fba <Rotate+0x8a>
//					printf("読み出した角速度の値 : %f, オフセット : %f, 角度 : %f\r\n", ZGyro, zg_offset, fin_angle );
//				}
//
//			}
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fd0:	edd3 7a00 	vldr	s15, [r3]
 8008fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd8:	edc3 7a00 	vstr	s15, [r3]
//		ChangeLED(3);
		while(TargetAngle > Angle)
 8008fdc:	ed93 7a00 	vldr	s14, [r3]
 8008fe0:	edd2 7a00 	vldr	s15, [r2]
 8008fe4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fec:	dd0a      	ble.n	8009004 <Rotate+0xd4>
		{
			AngularAcceleration = angular_acceleration[1];//0
 8008fee:	2000      	movs	r0, #0
 8008ff0:	6008      	str	r0, [r1, #0]
		while(TargetAngle > Angle)
 8008ff2:	ed93 7a00 	vldr	s14, [r3]
 8008ff6:	edd2 7a00 	vldr	s15, [r2]
 8008ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009002:	dcf5      	bgt.n	8008ff0 <Rotate+0xc0>
//					printf("読み出した角速度の値 : %f, オフセット : %f, 角度 : %f\r\n", ZGyro, zg_offset, fin_angle );
//				}
//
//			}
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009004:	edd3 7a00 	vldr	s15, [r3]

		while(TargetAngle > Angle)
		{
			 AngularAcceleration = -angular_acceleration[2];
			 if( AngularV <= 0)
 8009008:	486c      	ldr	r0, [pc, #432]	; (80091bc <Rotate+0x28c>)
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800900a:	ee76 6aa7 	vadd.f32	s13, s13, s15
			 AngularAcceleration = -angular_acceleration[2];
 800900e:	eeb1 8a48 	vneg.f32	s16, s16
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009012:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle > Angle)
 8009016:	e008      	b.n	800902a <Rotate+0xfa>
			 AngularAcceleration = -angular_acceleration[2];
 8009018:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV <= 0)
 800901c:	edd0 7a00 	vldr	s15, [r0]
 8009020:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009028:	d908      	bls.n	800903c <Rotate+0x10c>
		while(TargetAngle > Angle)
 800902a:	ed93 7a00 	vldr	s14, [r3]
 800902e:	edd2 7a00 	vldr	s15, [r2]
 8009032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800903a:	dced      	bgt.n	8009018 <Rotate+0xe8>
			 		break;
			 }
		}

	}
	AngularAcceleration = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	600b      	str	r3, [r1, #0]
	//TargetAngularV = 0;
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);

	WaitStopAndReset();
 8009040:	f7ff ff4c 	bl	8008edc <WaitStopAndReset>
//	ControlWall();
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009044:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80091c0 <Rotate+0x290>
 8009048:	eec9 7a27 	vdiv.f32	s15, s18, s15
 800904c:	ee17 0a90 	vmov	r0, s15
 8009050:	f7ff f9b2 	bl	80083b8 <__aeabi_f2d>
 8009054:	a350      	add	r3, pc, #320	; (adr r3, 8009198 <Rotate+0x268>)
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	f7ff fa05 	bl	8008468 <__aeabi_dmul>
 800905e:	f7ff fcb3 	bl	80089c8 <__aeabi_d2iz>
	if(ang_v < 0)
 8009062:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 800906a:	4602      	mov	r2, r0
	if(ang_v < 0)
 800906c:	d475      	bmi.n	800915a <Rotate+0x22a>
		KeepPulse[LEFT] -= target_pulse/2;
		KeepPulse[RIGHT] += target_pulse/2;
	}
	else 	if(ang_v > 0)
	{
		KeepPulse[LEFT] += target_pulse/2;
 800906e:	4b55      	ldr	r3, [pc, #340]	; (80091c4 <Rotate+0x294>)
 8009070:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	1040      	asrs	r0, r0, #1
 8009078:	4402      	add	r2, r0
 800907a:	601a      	str	r2, [r3, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 800907c:	685a      	ldr	r2, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];

	//向いた方角を変える
//	ChangeCardinal();
	//printf("回転終了\r\n");
}
 800907e:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] -= target_pulse/2;
 8009082:	1a10      	subs	r0, r2, r0
 8009084:	6058      	str	r0, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	609a      	str	r2, [r3, #8]
}
 800908a:	bd10      	pop	{r4, pc}
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800908c:	4b48      	ldr	r3, [pc, #288]	; (80091b0 <Rotate+0x280>)
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800908e:	4a49      	ldr	r2, [pc, #292]	; (80091b4 <Rotate+0x284>)
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009090:	edd3 7a00 	vldr	s15, [r3]
 8009094:	4948      	ldr	r1, [pc, #288]	; (80091b8 <Rotate+0x288>)
 8009096:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800909a:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800909e:	ed93 7a00 	vldr	s14, [r3]
 80090a2:	edd2 7a00 	vldr	s15, [r2]
 80090a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ae:	d50c      	bpl.n	80090ca <Rotate+0x19a>
 80090b0:	eeb1 6a48 	vneg.f32	s12, s16
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 80090b4:	ed81 6a00 	vstr	s12, [r1]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 80090b8:	ed93 7a00 	vldr	s14, [r3]
 80090bc:	edd2 7a00 	vldr	s15, [r2]
 80090c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c8:	d4f4      	bmi.n	80090b4 <Rotate+0x184>
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090ca:	edd3 7a00 	vldr	s15, [r3]
 80090ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80090d2:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle < Angle)
 80090d6:	ed93 7a00 	vldr	s14, [r3]
 80090da:	edd2 7a00 	vldr	s15, [r2]
 80090de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e6:	d50a      	bpl.n	80090fe <Rotate+0x1ce>
			AngularAcceleration = angular_acceleration[1];//0
 80090e8:	2000      	movs	r0, #0
 80090ea:	6008      	str	r0, [r1, #0]
		while(TargetAngle < Angle)
 80090ec:	ed93 7a00 	vldr	s14, [r3]
 80090f0:	edd2 7a00 	vldr	s15, [r2]
 80090f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fc:	d4f5      	bmi.n	80090ea <Rotate+0x1ba>
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090fe:	edd3 7a00 	vldr	s15, [r3]
			 if( AngularV >= 0)
 8009102:	482e      	ldr	r0, [pc, #184]	; (80091bc <Rotate+0x28c>)
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009104:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8009108:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle < Angle)
 800910c:	e008      	b.n	8009120 <Rotate+0x1f0>
			 AngularAcceleration = angular_acceleration[2];
 800910e:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV >= 0)
 8009112:	edd0 7a00 	vldr	s15, [r0]
 8009116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800911a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800911e:	da08      	bge.n	8009132 <Rotate+0x202>
		while(TargetAngle < Angle)
 8009120:	ed93 7a00 	vldr	s14, [r3]
 8009124:	edd2 7a00 	vldr	s15, [r2]
 8009128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800912c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009130:	d4ed      	bmi.n	800910e <Rotate+0x1de>
	AngularAcceleration = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	600b      	str	r3, [r1, #0]
	WaitStopAndReset();
 8009136:	f7ff fed1 	bl	8008edc <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 800913a:	eddf 7a21 	vldr	s15, [pc, #132]	; 80091c0 <Rotate+0x290>
 800913e:	eec9 7a27 	vdiv.f32	s15, s18, s15
 8009142:	ee17 0a90 	vmov	r0, s15
 8009146:	f7ff f937 	bl	80083b8 <__aeabi_f2d>
 800914a:	a313      	add	r3, pc, #76	; (adr r3, 8009198 <Rotate+0x268>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7ff f98a 	bl	8008468 <__aeabi_dmul>
 8009154:	f7ff fc38 	bl	80089c8 <__aeabi_d2iz>
 8009158:	4602      	mov	r2, r0
		KeepPulse[LEFT] -= target_pulse/2;
 800915a:	4b1a      	ldr	r3, [pc, #104]	; (80091c4 <Rotate+0x294>)
 800915c:	6819      	ldr	r1, [r3, #0]
 800915e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8009162:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 8009166:	6019      	str	r1, [r3, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 8009168:	6858      	ldr	r0, [r3, #4]
}
 800916a:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] += target_pulse/2;
 800916e:	eb00 0262 	add.w	r2, r0, r2, asr #1
 8009172:	605a      	str	r2, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009174:	689a      	ldr	r2, [r3, #8]
 8009176:	609a      	str	r2, [r3, #8]
}
 8009178:	bd10      	pop	{r4, pc}
	else if( ang_v < 0)
 800917a:	d487      	bmi.n	800908c <Rotate+0x15c>
	AngularAcceleration = 0;
 800917c:	4b0e      	ldr	r3, [pc, #56]	; (80091b8 <Rotate+0x288>)
 800917e:	601c      	str	r4, [r3, #0]
	WaitStopAndReset();
 8009180:	f7ff feac 	bl	8008edc <WaitStopAndReset>
}
 8009184:	ecbd 8b04 	vpop	{d8-d9}
 8009188:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <Rotate+0x294>)
	KeepPulse[BODY] = KeepPulse[BODY];
 800918a:	689a      	ldr	r2, [r3, #8]
 800918c:	609a      	str	r2, [r3, #8]
}
 800918e:	bd10      	pop	{r4, pc}
 8009190:	54442d18 	.word	0x54442d18
 8009194:	400921fb 	.word	0x400921fb
 8009198:	cb326649 	.word	0xcb326649
 800919c:	40fa15d6 	.word	0x40fa15d6
 80091a0:	42b40000 	.word	0x42b40000
 80091a4:	3d83126f 	.word	0x3d83126f
 80091a8:	20008998 	.word	0x20008998
 80091ac:	40668000 	.word	0x40668000
 80091b0:	20007f48 	.word	0x20007f48
 80091b4:	20007f38 	.word	0x20007f38
 80091b8:	20007f3c 	.word	0x20007f3c
 80091bc:	20007f44 	.word	0x20007f44
 80091c0:	43b40000 	.word	0x43b40000
 80091c4:	200089ec 	.word	0x200089ec

080091c8 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80091c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch(my_mouse.now.car)//方角に合わせて、
 80091cc:	489e      	ldr	r0, [pc, #632]	; (8009448 <SlalomRight+0x280>)
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 80091ce:	f8df e2b0 	ldr.w	lr, [pc, #688]	; 8009480 <SlalomRight+0x2b8>

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
	float pre = Sla.Pre;         //スラローム前距離
	float fol = Sla.Fol;         //スラローム後距離
 80091d2:	4a9e      	ldr	r2, [pc, #632]	; (800944c <SlalomRight+0x284>)
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091d4:	4c9e      	ldr	r4, [pc, #632]	; (8009450 <SlalomRight+0x288>)
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80091d6:	4b9f      	ldr	r3, [pc, #636]	; (8009454 <SlalomRight+0x28c>)
	float now_angv = AngularV;
 80091d8:	4f9f      	ldr	r7, [pc, #636]	; (8009458 <SlalomRight+0x290>)
	Control_Mode = A_VELO_PID;
 80091da:	f8df c2a8 	ldr.w	ip, [pc, #680]	; 8009484 <SlalomRight+0x2bc>
	switch(my_mouse.now.car)//方角に合わせて、
 80091de:	7a81      	ldrb	r1, [r0, #10]
	float now_angv = AngularV;
 80091e0:	683d      	ldr	r5, [r7, #0]
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80091e2:	681e      	ldr	r6, [r3, #0]
	float fol = Sla.Fol;         //スラローム後距離
 80091e4:	edd2 4a01 	vldr	s9, [r2, #4]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091e8:	6823      	ldr	r3, [r4, #0]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 80091ea:	ed92 7a02 	vldr	s14, [r2, #8]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091ee:	6865      	ldr	r5, [r4, #4]
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 80091f0:	edd2 5a04 	vldr	s11, [r2, #16]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 80091f4:	ed92 6a05 	vldr	s12, [r2, #20]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 80091f8:	edd2 6a06 	vldr	s13, [r2, #24]
	Pos.Act = slalom;
 80091fc:	f04f 0802 	mov.w	r8, #2
{
 8009200:	ed2d 8b02 	vpush	{d8}
	Pos.Act = slalom;
 8009204:	f88e 8006 	strb.w	r8, [lr, #6]
	Control_Mode = A_VELO_PID;
 8009208:	f04f 0e00 	mov.w	lr, #0
 800920c:	f8cc e000 	str.w	lr, [ip]
	switch(my_mouse.now.car)//方角に合わせて、
 8009210:	2906      	cmp	r1, #6
 8009212:	d808      	bhi.n	8009226 <SlalomRight+0x5e>
 8009214:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009218:	000700ff 	.word	0x000700ff
 800921c:	000700fb 	.word	0x000700fb
 8009220:	000700f7 	.word	0x000700f7
 8009224:	0036      	.short	0x0036
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009226:	442b      	add	r3, r5
 8009228:	ee05 3a10 	vmov	s10, r3
		}

	}
	else//なければ
	{
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	6861      	ldr	r1, [r4, #4]
 8009230:	ed92 4a00 	vldr	s8, [r2]
 8009234:	440b      	add	r3, r1
 8009236:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	ee35 5a04 	vadd.f32	s10, s10, s8
 8009242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009246:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800924a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924e:	f340 80ef 	ble.w	8009430 <SlalomRight+0x268>
 8009252:	4d82      	ldr	r5, [pc, #520]	; (800945c <SlalomRight+0x294>)
 8009254:	4982      	ldr	r1, [pc, #520]	; (8009460 <SlalomRight+0x298>)
 8009256:	4a83      	ldr	r2, [pc, #524]	; (8009464 <SlalomRight+0x29c>)
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009258:	2000      	movs	r0, #0
 800925a:	6028      	str	r0, [r5, #0]
				AngularLeapsity = 0;
				AngularAcceleration = 0;
 800925c:	6008      	str	r0, [r1, #0]
				TargetVelocity[BODY] = v_turn;
 800925e:	6096      	str	r6, [r2, #8]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8009266:	4473      	add	r3, lr
 8009268:	ee07 3a90 	vmov	s15, r3
 800926c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009270:	eef4 7ac5 	vcmpe.f32	s15, s10
 8009274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009278:	d4ef      	bmi.n	800925a <SlalomRight+0x92>
 800927a:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8009488 <SlalomRight+0x2c0>
 800927e:	f8c8 0000 	str.w	r0, [r8]
 8009282:	e02a      	b.n	80092da <SlalomRight+0x112>
	return my_mouse.now.wall.west;
 8009284:	7b01      	ldrb	r1, [r0, #12]
 8009286:	0989      	lsrs	r1, r1, #6
	if (getFrontWall() == WALL/*前に壁があれば、*/) //関数書き換え
 8009288:	2901      	cmp	r1, #1
 800928a:	d1cc      	bne.n	8009226 <SlalomRight+0x5e>
 800928c:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8009488 <SlalomRight+0x2c0>
 8009290:	4d72      	ldr	r5, [pc, #456]	; (800945c <SlalomRight+0x294>)
 8009292:	f8d8 e000 	ldr.w	lr, [r8]
 8009296:	4972      	ldr	r1, [pc, #456]	; (8009460 <SlalomRight+0x298>)
 8009298:	4a73      	ldr	r2, [pc, #460]	; (8009468 <SlalomRight+0x2a0>)
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 800929a:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800946c <SlalomRight+0x2a4>
 800929e:	ed9f 4a74 	vldr	s8, [pc, #464]	; 8009470 <SlalomRight+0x2a8>
			TargetVelocity[BODY] = v_turn;
 80092a2:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8009464 <SlalomRight+0x29c>
			TargetAngularV = 0;
 80092a6:	2300      	movs	r3, #0
	if (getFrontWall() == WALL/*前に壁があれば、*/) //関数書き換え
 80092a8:	2000      	movs	r0, #0
 80092aa:	e005      	b.n	80092b8 <SlalomRight+0xf0>
			TargetAngularV = 0;
 80092ac:	602b      	str	r3, [r5, #0]
			AngularLeapsity = 0;
 80092ae:	469e      	mov	lr, r3
			AngularAcceleration = 0;
 80092b0:	600b      	str	r3, [r1, #0]
 80092b2:	2001      	movs	r0, #1
			TargetVelocity[BODY] = v_turn;
 80092b4:	f8c9 6008 	str.w	r6, [r9, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80092b8:	edd2 7a00 	vldr	s15, [r2]
 80092bc:	eef4 7ac5 	vcmpe.f32	s15, s10
 80092c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c4:	d4f2      	bmi.n	80092ac <SlalomRight+0xe4>
 80092c6:	edd2 7a03 	vldr	s15, [r2, #12]
 80092ca:	eef4 7ac4 	vcmpe.f32	s15, s8
 80092ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d2:	d4eb      	bmi.n	80092ac <SlalomRight+0xe4>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	f040 80b0 	bne.w	800943a <SlalomRight+0x272>
				////printf("直進1\r\n");
		}
	}
	now_angv = AngularV;

	float start_angle = Angle;
 80092da:	4b66      	ldr	r3, [pc, #408]	; (8009474 <SlalomRight+0x2ac>)
	now_angv = AngularV;
 80092dc:	683a      	ldr	r2, [r7, #0]
	float start_angle = Angle;
 80092de:	ed93 5a00 	vldr	s10, [r3]
	Control_Mode = NOT_CTRL_PID;
	while(start_angle + ang1 > Angle)
 80092e2:	edd3 7a00 	vldr	s15, [r3]
 80092e6:	ee75 5a85 	vadd.f32	s11, s11, s10
	Control_Mode = NOT_CTRL_PID;
 80092ea:	220a      	movs	r2, #10
	while(start_angle + ang1 > Angle)
 80092ec:	eef4 5ae7 	vcmpe.f32	s11, s15
 80092f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Control_Mode = NOT_CTRL_PID;
 80092f4:	f8cc 2000 	str.w	r2, [ip]
	while(start_angle + ang1 > Angle)
 80092f8:	dd0a      	ble.n	8009310 <SlalomRight+0x148>
 80092fa:	4a5a      	ldr	r2, [pc, #360]	; (8009464 <SlalomRight+0x29c>)

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
		//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 80092fc:	ed81 7a00 	vstr	s14, [r1]
			TargetVelocity[BODY] = v_turn;
 8009300:	6096      	str	r6, [r2, #8]
	while(start_angle + ang1 > Angle)
 8009302:	edd3 7a00 	vldr	s15, [r3]
 8009306:	eef4 7ae5 	vcmpe.f32	s15, s11
 800930a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930e:	d4f5      	bmi.n	80092fc <SlalomRight+0x134>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009310:	2200      	movs	r2, #0
 8009312:	600a      	str	r2, [r1, #0]
	AngularLeapsity = 0;
	now_angv = AngularV;
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 8009314:	ee36 6a05 	vadd.f32	s12, s12, s10
	now_angv = AngularV;
 8009318:	6838      	ldr	r0, [r7, #0]
	while(start_angle + ang2 > Angle)
 800931a:	edd3 7a00 	vldr	s15, [r3]
	AngularLeapsity = 0;
 800931e:	f8c8 2000 	str.w	r2, [r8]
	while(start_angle + ang2 > Angle)
 8009322:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8009326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800932a:	dd0a      	ble.n	8009342 <SlalomRight+0x17a>
 800932c:	4a4d      	ldr	r2, [pc, #308]	; (8009464 <SlalomRight+0x29c>)
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 800932e:	6828      	ldr	r0, [r5, #0]
 8009330:	6028      	str	r0, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009332:	6096      	str	r6, [r2, #8]
	while(start_angle + ang2 > Angle)
 8009334:	edd3 7a00 	vldr	s15, [r3]
 8009338:	eef4 7ac6 	vcmpe.f32	s15, s12
 800933c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009340:	d4f5      	bmi.n	800932e <SlalomRight+0x166>

			}
#endif
	}

	now_angv = AngularV;
 8009342:	683a      	ldr	r2, [r7, #0]
	while( start_angle + ang3 > Angle)
 8009344:	edd3 7a00 	vldr	s15, [r3]
 8009348:	ee76 6a85 	vadd.f32	s13, s13, s10
 800934c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009354:	dd1d      	ble.n	8009392 <SlalomRight+0x1ca>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009356:	eeb1 7a47 	vneg.f32	s14, s14
 800935a:	ed81 7a00 	vstr	s14, [r1]
			if(TargetAngularV < 0)
 800935e:	edd5 7a00 	vldr	s15, [r5]
 8009362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800936a:	d45e      	bmi.n	800942a <SlalomRight+0x262>
 800936c:	4a3d      	ldr	r2, [pc, #244]	; (8009464 <SlalomRight+0x29c>)
 800936e:	e008      	b.n	8009382 <SlalomRight+0x1ba>
			AngularAcceleration = -alpha_turn;
 8009370:	ed81 7a00 	vstr	s14, [r1]
			if(TargetAngularV < 0)
 8009374:	edd5 7a00 	vldr	s15, [r5]
 8009378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800937c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009380:	d453      	bmi.n	800942a <SlalomRight+0x262>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 8009382:	6096      	str	r6, [r2, #8]
	while( start_angle + ang3 > Angle)
 8009384:	edd3 7a00 	vldr	s15, [r3]
 8009388:	eef4 7ae6 	vcmpe.f32	s15, s13
 800938c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009390:	d4ee      	bmi.n	8009370 <SlalomRight+0x1a8>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009392:	2700      	movs	r7, #0
 8009394:	600f      	str	r7, [r1, #0]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 8009396:	602f      	str	r7, [r5, #0]
	//Calc = SearchOrFast; //関数の前に別で設定する
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	6862      	ldr	r2, [r4, #4]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 800939c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8009464 <SlalomRight+0x29c>
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 80093a0:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800948c <SlalomRight+0x2c4>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80093a4:	4413      	add	r3, r2
 80093a6:	ee08 3a10 	vmov	s16, r3
 80093aa:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80093ae:	ee38 8a24 	vadd.f32	s16, s16, s9
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 80093b2:	e005      	b.n	80093c0 <SlalomRight+0x1f8>
			TargetAngularV = 0;
 80093b4:	602f      	str	r7, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 80093b6:	f8c8 6008 	str.w	r6, [r8, #8]
			if(Calc == 0)
 80093ba:	f8d9 3000 	ldr.w	r3, [r9]
 80093be:	b373      	cbz	r3, 800941e <SlalomRight+0x256>
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	6862      	ldr	r2, [r4, #4]
 80093c4:	4413      	add	r3, r2
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093ce:	eef4 7ac8 	vcmpe.f32	s15, s16
 80093d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d6:	d4ed      	bmi.n	80093b4 <SlalomRight+0x1ec>
				updateRealSearch();
#endif
				Calc = 1;
			}
	}
	TargetAngle += 90*M_PI/180;
 80093d8:	4d27      	ldr	r5, [pc, #156]	; (8009478 <SlalomRight+0x2b0>)
 80093da:	6828      	ldr	r0, [r5, #0]
 80093dc:	f7fe ffec 	bl	80083b8 <__aeabi_f2d>
 80093e0:	a317      	add	r3, pc, #92	; (adr r3, 8009440 <SlalomRight+0x278>)
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	f7fe fe89 	bl	80080fc <__adddf3>
 80093ea:	f7ff fb35 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 80093ee:	4a23      	ldr	r2, [pc, #140]	; (800947c <SlalomRight+0x2b4>)
	TargetAngle += 90*M_PI/180;
 80093f0:	6028      	str	r0, [r5, #0]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 80093f2:	ecbd 8b02 	vpop	{d8}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 80093f6:	68a3      	ldr	r3, [r4, #8]
 80093f8:	6890      	ldr	r0, [r2, #8]
 80093fa:	6891      	ldr	r1, [r2, #8]
 80093fc:	1a1b      	subs	r3, r3, r0
 80093fe:	440b      	add	r3, r1
 8009400:	6093      	str	r3, [r2, #8]
}
 8009402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return my_mouse.now.wall.south;
 8009406:	7b01      	ldrb	r1, [r0, #12]
 8009408:	f3c1 1101 	ubfx	r1, r1, #4, #2
 800940c:	e73c      	b.n	8009288 <SlalomRight+0xc0>
	return my_mouse.now.wall.east;
 800940e:	7b01      	ldrb	r1, [r0, #12]
 8009410:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8009414:	e738      	b.n	8009288 <SlalomRight+0xc0>
	return my_mouse.now.wall.north;
 8009416:	7b01      	ldrb	r1, [r0, #12]
 8009418:	f001 0103 	and.w	r1, r1, #3
 800941c:	e734      	b.n	8009288 <SlalomRight+0xc0>
				updateRealSearch();
 800941e:	f003 fe4d 	bl	800d0bc <updateRealSearch>
				Calc = 1;
 8009422:	2301      	movs	r3, #1
 8009424:	f8c9 3000 	str.w	r3, [r9]
 8009428:	e7ca      	b.n	80093c0 <SlalomRight+0x1f8>
				TargetAngularV = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	602b      	str	r3, [r5, #0]
				break;
 800942e:	e7b0      	b.n	8009392 <SlalomRight+0x1ca>
 8009430:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8009488 <SlalomRight+0x2c0>
 8009434:	4d09      	ldr	r5, [pc, #36]	; (800945c <SlalomRight+0x294>)
 8009436:	490a      	ldr	r1, [pc, #40]	; (8009460 <SlalomRight+0x298>)
 8009438:	e74f      	b.n	80092da <SlalomRight+0x112>
 800943a:	f8c8 e000 	str.w	lr, [r8]
 800943e:	e74c      	b.n	80092da <SlalomRight+0x112>
 8009440:	54442d18 	.word	0x54442d18
 8009444:	3ff921fb 	.word	0x3ff921fb
 8009448:	20008224 	.word	0x20008224
 800944c:	200089d0 	.word	0x200089d0
 8009450:	200089b8 	.word	0x200089b8
 8009454:	20008aac 	.word	0x20008aac
 8009458:	20007f44 	.word	0x20007f44
 800945c:	20008998 	.word	0x20008998
 8009460:	20007f3c 	.word	0x20007f3c
 8009464:	20008988 	.word	0x20008988
 8009468:	200089f8 	.word	0x200089f8
 800946c:	43480000 	.word	0x43480000
 8009470:	437a0000 	.word	0x437a0000
 8009474:	20007f38 	.word	0x20007f38
 8009478:	20007f48 	.word	0x20007f48
 800947c:	200089ec 	.word	0x200089ec
 8009480:	20000008 	.word	0x20000008
 8009484:	2000897c 	.word	0x2000897c
 8009488:	20007f40 	.word	0x20007f40
 800948c:	20008c28 	.word	0x20008c28

08009490 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//→ 前距離後距離を加速時の目標距離に反映すればいい
	Control_Mode = A_VELO_PID;
	//ここの値コピーとその他計算を事前に行う
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
	float pre = Sla.Pre;         //スラローム前距離
	float fol = Sla.Fol;         //スラローム後距離
 8009494:	4a9a      	ldr	r2, [pc, #616]	; (8009700 <SlalomLeft+0x270>)
	switch(my_mouse.now.car)//方角に合わせて、
 8009496:	489b      	ldr	r0, [pc, #620]	; (8009704 <SlalomLeft+0x274>)
	Pos.Act = slalom;
 8009498:	4d9b      	ldr	r5, [pc, #620]	; (8009708 <SlalomLeft+0x278>)
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 800949a:	4c9c      	ldr	r4, [pc, #624]	; (800970c <SlalomLeft+0x27c>)
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 800949c:	edd2 5a02 	vldr	s11, [r2, #8]
	Control_Mode = A_VELO_PID;
 80094a0:	f8df c294 	ldr.w	ip, [pc, #660]	; 8009738 <SlalomLeft+0x2a8>
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80094a4:	4e9a      	ldr	r6, [pc, #616]	; (8009710 <SlalomLeft+0x280>)
	switch(my_mouse.now.car)//方角に合わせて、
 80094a6:	7a81      	ldrb	r1, [r0, #10]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094a8:	6823      	ldr	r3, [r4, #0]
	float fol = Sla.Fol;         //スラローム後距離
 80094aa:	ed92 4a01 	vldr	s8, [r2, #4]
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 80094ae:	ed92 6a04 	vldr	s12, [r2, #16]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 80094b2:	edd2 6a05 	vldr	s13, [r2, #20]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 80094b6:	ed92 3a06 	vldr	s6, [r2, #24]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094ba:	6867      	ldr	r7, [r4, #4]
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80094bc:	6836      	ldr	r6, [r6, #0]
	Pos.Act = slalom;
 80094be:	f04f 0e02 	mov.w	lr, #2
{
 80094c2:	ed2d 8b02 	vpush	{d8}
	Pos.Act = slalom;
 80094c6:	f885 e006 	strb.w	lr, [r5, #6]
	Control_Mode = A_VELO_PID;
 80094ca:	2500      	movs	r5, #0
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 80094cc:	eeb1 5a65 	vneg.f32	s10, s11
	Control_Mode = A_VELO_PID;
 80094d0:	f8cc 5000 	str.w	r5, [ip]
	switch(my_mouse.now.car)//方角に合わせて、
 80094d4:	2906      	cmp	r1, #6
 80094d6:	d808      	bhi.n	80094ea <SlalomLeft+0x5a>
 80094d8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80094dc:	00070102 	.word	0x00070102
 80094e0:	000700fe 	.word	0x000700fe
 80094e4:	000700fa 	.word	0x000700fa
 80094e8:	00cb      	.short	0x00cb
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094ea:	443b      	add	r3, r7
 80094ec:	ee07 3a10 	vmov	s14, r3


	}
	else//なければ
	{
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	6861      	ldr	r1, [r4, #4]
 80094f4:	edd2 7a00 	vldr	s15, [r2]
 80094f8:	440b      	add	r3, r1
 80094fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094fe:	ee04 3a90 	vmov	s9, r3
 8009502:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009506:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800950a:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800950e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009512:	f340 80ec 	ble.w	80096ee <SlalomLeft+0x25e>
 8009516:	4d7f      	ldr	r5, [pc, #508]	; (8009714 <SlalomLeft+0x284>)
 8009518:	497f      	ldr	r1, [pc, #508]	; (8009718 <SlalomLeft+0x288>)
 800951a:	4a80      	ldr	r2, [pc, #512]	; (800971c <SlalomLeft+0x28c>)
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 800951c:	2000      	movs	r0, #0
 800951e:	6028      	str	r0, [r5, #0]
				AngularAcceleration = 0;
 8009520:	6008      	str	r0, [r1, #0]
				TargetVelocity[BODY] = v_turn;
 8009522:	6096      	str	r6, [r2, #8]
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	6867      	ldr	r7, [r4, #4]
 8009528:	443b      	add	r3, r7
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953a:	d4f0      	bmi.n	800951e <SlalomLeft+0x8e>
 800953c:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 800973c <SlalomLeft+0x2ac>
				////printf("直進1\r\n");
		}
	}

	Control_Mode = NOT_CTRL_PID;
	float start_angle = Angle;
 8009540:	4b77      	ldr	r3, [pc, #476]	; (8009720 <SlalomLeft+0x290>)
 8009542:	edd3 7a00 	vldr	s15, [r3]
	while(start_angle - ang1 < Angle)
 8009546:	ed93 7a00 	vldr	s14, [r3]
 800954a:	ee37 6ac6 	vsub.f32	s12, s15, s12
	Control_Mode = NOT_CTRL_PID;
 800954e:	220a      	movs	r2, #10
	while(start_angle - ang1 < Angle)
 8009550:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8009554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Control_Mode = NOT_CTRL_PID;
 8009558:	f8cc 2000 	str.w	r2, [ip]
	while(start_angle - ang1 < Angle)
 800955c:	d50a      	bpl.n	8009574 <SlalomLeft+0xe4>
 800955e:	4a6f      	ldr	r2, [pc, #444]	; (800971c <SlalomLeft+0x28c>)

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009560:	ed81 5a00 	vstr	s10, [r1]
			TargetVelocity[BODY] = v_turn;
 8009564:	6096      	str	r6, [r2, #8]
	while(start_angle - ang1 < Angle)
 8009566:	ed93 7a00 	vldr	s14, [r3]
 800956a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800956e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009572:	dcf5      	bgt.n	8009560 <SlalomLeft+0xd0>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009574:	2200      	movs	r2, #0
 8009576:	600a      	str	r2, [r1, #0]
	AngularLeapsity = 0;
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 8009578:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800957c:	ed93 7a00 	vldr	s14, [r3]
	AngularLeapsity = 0;
 8009580:	f8c8 2000 	str.w	r2, [r8]
	while(start_angle - ang2 < Angle)
 8009584:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800958c:	d50a      	bpl.n	80095a4 <SlalomLeft+0x114>
 800958e:	4a63      	ldr	r2, [pc, #396]	; (800971c <SlalomLeft+0x28c>)
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009590:	6828      	ldr	r0, [r5, #0]
 8009592:	6028      	str	r0, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009594:	6096      	str	r6, [r2, #8]
	while(start_angle - ang2 < Angle)
 8009596:	ed93 7a00 	vldr	s14, [r3]
 800959a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800959e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a2:	dcf5      	bgt.n	8009590 <SlalomLeft+0x100>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 80095a4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80095a8:	ed93 7a00 	vldr	s14, [r3]
 80095ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b4:	d51d      	bpl.n	80095f2 <SlalomLeft+0x162>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 80095b6:	edc1 5a00 	vstr	s11, [r1]
			if(TargetAngularV > 0)
 80095ba:	ed95 7a00 	vldr	s14, [r5]
 80095be:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80095c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c6:	f300 808f 	bgt.w	80096e8 <SlalomLeft+0x258>
 80095ca:	4a54      	ldr	r2, [pc, #336]	; (800971c <SlalomLeft+0x28c>)
 80095cc:	e009      	b.n	80095e2 <SlalomLeft+0x152>
			AngularAcceleration = -alpha_turn;
 80095ce:	edc1 5a00 	vstr	s11, [r1]
			if(TargetAngularV > 0)
 80095d2:	ed95 7a00 	vldr	s14, [r5]
 80095d6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80095da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095de:	f300 8083 	bgt.w	80096e8 <SlalomLeft+0x258>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 80095e2:	6096      	str	r6, [r2, #8]
	while( start_angle - ang3 < Angle)
 80095e4:	ed93 7a00 	vldr	s14, [r3]
 80095e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f0:	dced      	bgt.n	80095ce <SlalomLeft+0x13e>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 80095f2:	2700      	movs	r7, #0
 80095f4:	600f      	str	r7, [r1, #0]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 80095f6:	602f      	str	r7, [r5, #0]
//	Calc = SearchOrFast; //関数の前に別で設定
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	6862      	ldr	r2, [r4, #4]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 80095fc:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800971c <SlalomLeft+0x28c>
			//printf("直進2\r\n");
			if(Calc == 0)
 8009600:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8009740 <SlalomLeft+0x2b0>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009604:	4413      	add	r3, r2
 8009606:	ee08 3a10 	vmov	s16, r3
 800960a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800960e:	ee38 8a04 	vadd.f32	s16, s16, s8
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009612:	e005      	b.n	8009620 <SlalomLeft+0x190>
			TargetAngularV = 0;
 8009614:	602f      	str	r7, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009616:	f8c8 6008 	str.w	r6, [r8, #8]
			if(Calc == 0)
 800961a:	f8d9 3000 	ldr.w	r3, [r9]
 800961e:	b313      	cbz	r3, 8009666 <SlalomLeft+0x1d6>
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	6862      	ldr	r2, [r4, #4]
 8009624:	4413      	add	r3, r2
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800962e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009636:	d4ed      	bmi.n	8009614 <SlalomLeft+0x184>
				updateRealSearch();
#endif
				Calc = 1;
			}
	}
	TargetAngle += -90*M_PI/180;
 8009638:	4d3a      	ldr	r5, [pc, #232]	; (8009724 <SlalomLeft+0x294>)
 800963a:	6828      	ldr	r0, [r5, #0]
 800963c:	f7fe febc 	bl	80083b8 <__aeabi_f2d>
 8009640:	a32d      	add	r3, pc, #180	; (adr r3, 80096f8 <SlalomLeft+0x268>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7fe fd57 	bl	80080f8 <__aeabi_dsub>
 800964a:	f7ff fa05 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800964e:	4a36      	ldr	r2, [pc, #216]	; (8009728 <SlalomLeft+0x298>)
	TargetAngle += -90*M_PI/180;
 8009650:	6028      	str	r0, [r5, #0]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009652:	ecbd 8b02 	vpop	{d8}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009656:	68a3      	ldr	r3, [r4, #8]
 8009658:	6890      	ldr	r0, [r2, #8]
 800965a:	6891      	ldr	r1, [r2, #8]
 800965c:	1a1b      	subs	r3, r3, r0
 800965e:	440b      	add	r3, r1
 8009660:	6093      	str	r3, [r2, #8]
}
 8009662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				updateRealSearch();
 8009666:	f003 fd29 	bl	800d0bc <updateRealSearch>
				Calc = 1;
 800966a:	2301      	movs	r3, #1
 800966c:	f8c9 3000 	str.w	r3, [r9]
 8009670:	e7d6      	b.n	8009620 <SlalomLeft+0x190>
	return my_mouse.now.wall.west;
 8009672:	7b01      	ldrb	r1, [r0, #12]
 8009674:	0989      	lsrs	r1, r1, #6
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009676:	2901      	cmp	r1, #1
 8009678:	f47f af37 	bne.w	80094ea <SlalomLeft+0x5a>
 800967c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800973c <SlalomLeft+0x2ac>
 8009680:	4d24      	ldr	r5, [pc, #144]	; (8009714 <SlalomLeft+0x284>)
 8009682:	f8d8 7000 	ldr.w	r7, [r8]
 8009686:	4924      	ldr	r1, [pc, #144]	; (8009718 <SlalomLeft+0x288>)
 8009688:	4a28      	ldr	r2, [pc, #160]	; (800972c <SlalomLeft+0x29c>)
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 800968a:	eddf 4a29 	vldr	s9, [pc, #164]	; 8009730 <SlalomLeft+0x2a0>
 800968e:	eddf 3a29 	vldr	s7, [pc, #164]	; 8009734 <SlalomLeft+0x2a4>
			TargetVelocity[BODY] = v_turn;
 8009692:	f8df e088 	ldr.w	lr, [pc, #136]	; 800971c <SlalomLeft+0x28c>
			TargetAngularV = 0;
 8009696:	2300      	movs	r3, #0
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009698:	2000      	movs	r0, #0
 800969a:	e005      	b.n	80096a8 <SlalomLeft+0x218>
			TargetAngularV = 0;
 800969c:	602b      	str	r3, [r5, #0]
			AngularLeapsity = 0;
 800969e:	461f      	mov	r7, r3
			AngularAcceleration = 0;
 80096a0:	600b      	str	r3, [r1, #0]
 80096a2:	2001      	movs	r0, #1
			TargetVelocity[BODY] = v_turn;
 80096a4:	f8ce 6008 	str.w	r6, [lr, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80096a8:	ed92 7a00 	vldr	s14, [r2]
 80096ac:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80096b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b4:	d4f2      	bmi.n	800969c <SlalomLeft+0x20c>
 80096b6:	ed92 7a03 	vldr	s14, [r2, #12]
 80096ba:	eeb4 7ae3 	vcmpe.f32	s14, s7
 80096be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c2:	d4eb      	bmi.n	800969c <SlalomLeft+0x20c>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	f43f af3b 	beq.w	8009540 <SlalomLeft+0xb0>
 80096ca:	f8c8 7000 	str.w	r7, [r8]
 80096ce:	e737      	b.n	8009540 <SlalomLeft+0xb0>
	return my_mouse.now.wall.south;
 80096d0:	7b01      	ldrb	r1, [r0, #12]
 80096d2:	f3c1 1101 	ubfx	r1, r1, #4, #2
 80096d6:	e7ce      	b.n	8009676 <SlalomLeft+0x1e6>
	return my_mouse.now.wall.east;
 80096d8:	7b01      	ldrb	r1, [r0, #12]
 80096da:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80096de:	e7ca      	b.n	8009676 <SlalomLeft+0x1e6>
	return my_mouse.now.wall.north;
 80096e0:	7b01      	ldrb	r1, [r0, #12]
 80096e2:	f001 0103 	and.w	r1, r1, #3
 80096e6:	e7c6      	b.n	8009676 <SlalomLeft+0x1e6>
				TargetAngularV = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	602b      	str	r3, [r5, #0]
				break;
 80096ec:	e781      	b.n	80095f2 <SlalomLeft+0x162>
 80096ee:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800973c <SlalomLeft+0x2ac>
 80096f2:	4d08      	ldr	r5, [pc, #32]	; (8009714 <SlalomLeft+0x284>)
 80096f4:	4908      	ldr	r1, [pc, #32]	; (8009718 <SlalomLeft+0x288>)
 80096f6:	e723      	b.n	8009540 <SlalomLeft+0xb0>
 80096f8:	54442d18 	.word	0x54442d18
 80096fc:	3ff921fb 	.word	0x3ff921fb
 8009700:	200089d0 	.word	0x200089d0
 8009704:	20008224 	.word	0x20008224
 8009708:	20000008 	.word	0x20000008
 800970c:	200089b8 	.word	0x200089b8
 8009710:	20008aac 	.word	0x20008aac
 8009714:	20008998 	.word	0x20008998
 8009718:	20007f3c 	.word	0x20007f3c
 800971c:	20008988 	.word	0x20008988
 8009720:	20007f38 	.word	0x20007f38
 8009724:	20007f48 	.word	0x20007f48
 8009728:	200089ec 	.word	0x200089ec
 800972c:	200089f8 	.word	0x200089f8
 8009730:	43480000 	.word	0x43480000
 8009734:	437a0000 	.word	0x437a0000
 8009738:	2000897c 	.word	0x2000897c
 800973c:	20007f40 	.word	0x20007f40
 8009740:	20008c28 	.word	0x20008c28
 8009744:	00000000 	.word	0x00000000

08009748 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
//	Pos.Act = accel;
//	ControlWall();
	TargetAngularV = 0;
 8009748:	4a39      	ldr	r2, [pc, #228]	; (8009830 <Accel+0xe8>)
	//printf("%f,%f,%f\r\n",additional_speed,explore_speed,CurrentVelocity[BODY]);
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
//	HAL_Delay(1000);
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 800974a:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8009834 <Accel+0xec>
{
 800974e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TargetAngularV = 0;
 8009752:	2100      	movs	r1, #0
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8009754:	4b38      	ldr	r3, [pc, #224]	; (8009838 <Accel+0xf0>)
	TargetAngularV = 0;
 8009756:	6011      	str	r1, [r2, #0]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8009758:	ed93 7a02 	vldr	s14, [r3, #8]
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 800975c:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8009848 <Accel+0x100>
 8009760:	4d36      	ldr	r5, [pc, #216]	; (800983c <Accel+0xf4>)
 8009762:	4e37      	ldr	r6, [pc, #220]	; (8009840 <Accel+0xf8>)
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8009764:	ee70 0ac7 	vsub.f32	s1, s1, s14
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009768:	ee30 0a00 	vadd.f32	s0, s0, s0
 800976c:	ee60 7aa7 	vmul.f32	s15, s1, s15
//	WallWarn();
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009770:	ee10 0a10 	vmov	r0, s0
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009774:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8009778:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800977c:	ed8b 7a00 	vstr	s14, [fp]
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009780:	f7fe fe1a 	bl	80083b8 <__aeabi_f2d>
 8009784:	a326      	add	r3, pc, #152	; (adr r3, 8009820 <Accel+0xd8>)
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	f7fe ff97 	bl	80086bc <__aeabi_ddiv>
 800978e:	f7ff f91b 	bl	80089c8 <__aeabi_d2iz>
 8009792:	4604      	mov	r4, r0
	//90mmでうまくやるには0から60000カウントまで
	//printf("");
//	_Bool wall_cut = false;
	//ChangeLED(1);

	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009794:	e020      	b.n	80097d8 <Accel+0x90>
	{
		//printf("%d, %d, %d, %f, %f, %d, %f, %f, %d, %f, %f\r\n", TotalPulse[BODY], target_pulse, KeepPulse[BODY], TargetVelocity[BODY], Acceleration, VelocityLeftOut ,TargetVelocity[LEFT], CurrentVelocity[LEFT], Pid[L_VELO_PID].out, Pid[L_VELO_PID].KP,Pid[L_VELO_PID].KI);
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009796:	f7fe fdfd 	bl	8008394 <__aeabi_i2d>
 800979a:	a323      	add	r3, pc, #140	; (adr r3, 8009828 <Accel+0xe0>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f7fe fe62 	bl	8008468 <__aeabi_dmul>
 80097a4:	f8d5 a008 	ldr.w	sl, [r5, #8]
 80097a8:	68b7      	ldr	r7, [r6, #8]
 80097aa:	4680      	mov	r8, r0
 80097ac:	4650      	mov	r0, sl
 80097ae:	4689      	mov	r9, r1
 80097b0:	f7fe fdf0 	bl	8008394 <__aeabi_i2d>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4640      	mov	r0, r8
 80097ba:	4649      	mov	r1, r9
 80097bc:	f7fe fc9e 	bl	80080fc <__adddf3>
 80097c0:	4680      	mov	r8, r0
 80097c2:	4638      	mov	r0, r7
 80097c4:	4689      	mov	r9, r1
 80097c6:	f7fe fde5 	bl	8008394 <__aeabi_i2d>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4640      	mov	r0, r8
 80097d0:	4649      	mov	r1, r9
 80097d2:	f7ff f8bb 	bl	800894c <__aeabi_dcmplt>
 80097d6:	b9b0      	cbnz	r0, 8009806 <Accel+0xbe>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80097d8:	68ab      	ldr	r3, [r5, #8]
 80097da:	68b2      	ldr	r2, [r6, #8]
 80097dc:	4423      	add	r3, r4
 80097de:	4293      	cmp	r3, r2
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80097e0:	4620      	mov	r0, r4
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 80097e2:	dcd8      	bgt.n	8009796 <Accel+0x4e>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	f8cb 3000 	str.w	r3, [fp]
	//壁読んで、
//	wall_cut = false;
//	ChangeLED(0);
	KeepPulse[BODY] += target_pulse;
 80097ea:	68ab      	ldr	r3, [r5, #8]
 80097ec:	4423      	add	r3, r4
 80097ee:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse/2;
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80097f6:	1064      	asrs	r4, r4, #1
 80097f8:	4423      	add	r3, r4
 80097fa:	602b      	str	r3, [r5, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 80097fc:	686b      	ldr	r3, [r5, #4]
 80097fe:	441c      	add	r4, r3
 8009800:	606c      	str	r4, [r5, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 8009802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009806:	4b0f      	ldr	r3, [pc, #60]	; (8009844 <Accel+0xfc>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1e4      	bne.n	80097d8 <Accel+0x90>
			updateRealSearch();
 800980e:	f003 fc55 	bl	800d0bc <updateRealSearch>
			Calc = 1;
 8009812:	4a0c      	ldr	r2, [pc, #48]	; (8009844 <Accel+0xfc>)
 8009814:	2301      	movs	r3, #1
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	e7de      	b.n	80097d8 <Accel+0x90>
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w
 8009820:	23ca2666 	.word	0x23ca2666
 8009824:	3f509268 	.word	0x3f509268
 8009828:	9999999a 	.word	0x9999999a
 800982c:	3fe99999 	.word	0x3fe99999
 8009830:	20008998 	.word	0x20008998
 8009834:	3a83126f 	.word	0x3a83126f
 8009838:	200089c4 	.word	0x200089c4
 800983c:	200089ec 	.word	0x200089ec
 8009840:	200089b8 	.word	0x200089b8
 8009844:	20008c28 	.word	0x20008c28
 8009848:	20007f34 	.word	0x20007f34
 800984c:	00000000 	.word	0x00000000

08009850 <Decel>:
void Decel(float dec_distance, float end_speed)
{
//	Pos.Act = decel;
	float down_speed=0;
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 8009850:	4b61      	ldr	r3, [pc, #388]	; (80099d8 <Decel+0x188>)
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009852:	eddf 7a62 	vldr	s15, [pc, #392]	; 80099dc <Decel+0x18c>
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 8009856:	ed93 7a02 	vldr	s14, [r3, #8]
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800985a:	4b61      	ldr	r3, [pc, #388]	; (80099e0 <Decel+0x190>)
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 800985c:	ee37 7a60 	vsub.f32	s14, s14, s1
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009860:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009864:	ee67 7a27 	vmul.f32	s15, s14, s15
{
 8009868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800986c:	ee67 7a87 	vmul.f32	s15, s15, s14
{
 8009870:	ed2d 8b02 	vpush	{d8}
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009874:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
 8009878:	b083      	sub	sp, #12
 800987a:	4e5a      	ldr	r6, [pc, #360]	; (80099e4 <Decel+0x194>)
 800987c:	4d5a      	ldr	r5, [pc, #360]	; (80099e8 <Decel+0x198>)
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800987e:	f04f 0a00 	mov.w	sl, #0
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009882:	ee10 0a10 	vmov	r0, s0
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009886:	eef1 7a47 	vneg.f32	s15, s14
 800988a:	edc3 7a00 	vstr	s15, [r3]
{
 800988e:	eeb0 8a60 	vmov.f32	s16, s1
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009892:	f7fe fd91 	bl	80083b8 <__aeabi_f2d>
 8009896:	a34c      	add	r3, pc, #304	; (adr r3, 80099c8 <Decel+0x178>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7fe ff0e 	bl	80086bc <__aeabi_ddiv>
 80098a0:	f7ff f892 	bl	80089c8 <__aeabi_d2iz>
 80098a4:	4b51      	ldr	r3, [pc, #324]	; (80099ec <Decel+0x19c>)
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80098a6:	eddf 8a52 	vldr	s17, [pc, #328]	; 80099f0 <Decel+0x1a0>
 80098aa:	f8d3 b000 	ldr.w	fp, [r3]
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 80098ae:	4604      	mov	r4, r0
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80098b0:	e034      	b.n	800991c <Decel+0xcc>
 80098b2:	4a50      	ldr	r2, [pc, #320]	; (80099f4 <Decel+0x1a4>)
 80098b4:	68ab      	ldr	r3, [r5, #8]
 80098b6:	6892      	ldr	r2, [r2, #8]
 80098b8:	4423      	add	r3, r4
 80098ba:	4293      	cmp	r3, r2
 80098bc:	dd58      	ble.n	8009970 <Decel+0x120>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= end_speed) //
 80098be:	4b4e      	ldr	r3, [pc, #312]	; (80099f8 <Decel+0x1a8>)
 80098c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80098c4:	eef4 7ac8 	vcmpe.f32	s15, s16
 80098c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098cc:	d956      	bls.n	800997c <Decel+0x12c>

			ChangeLED(k);
			k++;
			break;
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 80098ce:	f7fe fd61 	bl	8008394 <__aeabi_i2d>
 80098d2:	a33f      	add	r3, pc, #252	; (adr r3, 80099d0 <Decel+0x180>)
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	68af      	ldr	r7, [r5, #8]
 80098da:	9701      	str	r7, [sp, #4]
 80098dc:	f7fe fdc4 	bl	8008468 <__aeabi_dmul>
 80098e0:	4680      	mov	r8, r0
 80098e2:	9801      	ldr	r0, [sp, #4]
 80098e4:	4f43      	ldr	r7, [pc, #268]	; (80099f4 <Decel+0x1a4>)
 80098e6:	4689      	mov	r9, r1
 80098e8:	f7fe fd54 	bl	8008394 <__aeabi_i2d>
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	4640      	mov	r0, r8
 80098f2:	4649      	mov	r1, r9
 80098f4:	f7fe fc02 	bl	80080fc <__adddf3>
 80098f8:	68bf      	ldr	r7, [r7, #8]
 80098fa:	4680      	mov	r8, r0
 80098fc:	4638      	mov	r0, r7
 80098fe:	4689      	mov	r9, r1
 8009900:	f7fe fd48 	bl	8008394 <__aeabi_i2d>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4640      	mov	r0, r8
 800990a:	4649      	mov	r1, r9
 800990c:	f7ff f81e 	bl	800894c <__aeabi_dcmplt>
 8009910:	2800      	cmp	r0, #0
 8009912:	bf1c      	itt	ne
 8009914:	f04f 0a01 	movne.w	sl, #1
 8009918:	f04f 0b00 	movne.w	fp, #0
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800991c:	ed96 7a03 	vldr	s14, [r6, #12]
 8009920:	edd6 7a00 	vldr	s15, [r6]
 8009924:	ee77 7a27 	vadd.f32	s15, s14, s15
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 8009928:	4620      	mov	r0, r4
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800992a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800992e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009932:	d4be      	bmi.n	80098b2 <Decel+0x62>
 8009934:	f1ba 0f00 	cmp.w	sl, #0
 8009938:	d139      	bne.n	80099ae <Decel+0x15e>
 800993a:	4f30      	ldr	r7, [pc, #192]	; (80099fc <Decel+0x1ac>)
 800993c:	4e30      	ldr	r6, [pc, #192]	; (8009a00 <Decel+0x1b0>)
//			PIDChangeFlag(D_WALL_PID, 0);
//			PIDChangeFlag( A_VELO_PID , 1);
			Control_Mode = A_VELO_PID;
		}
	}
	TargetVelocity[BODY] = end_speed;
 800993e:	4a2e      	ldr	r2, [pc, #184]	; (80099f8 <Decel+0x1a8>)
 8009940:	ed82 8a02 	vstr	s16, [r2, #8]
	Acceleration = 0;
 8009944:	4a26      	ldr	r2, [pc, #152]	; (80099e0 <Decel+0x190>)
 8009946:	2300      	movs	r3, #0
 8009948:	6013      	str	r3, [r2, #0]
	TargetAngularV = 0;
 800994a:	603b      	str	r3, [r7, #0]
	AngularAcceleration = 0;
 800994c:	6033      	str	r3, [r6, #0]
	//ChangeLED(2);
	KeepPulse[BODY] += target_pulse;
 800994e:	68ab      	ldr	r3, [r5, #8]
 8009950:	4423      	add	r3, r4
 8009952:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse/2;
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800995a:	1064      	asrs	r4, r4, #1
 800995c:	4423      	add	r3, r4
 800995e:	602b      	str	r3, [r5, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 8009960:	686b      	ldr	r3, [r5, #4]
 8009962:	441c      	add	r4, r3
 8009964:	606c      	str	r4, [r5, #4]


}
 8009966:	b003      	add	sp, #12
 8009968:	ecbd 8b02 	vpop	{d8}
 800996c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009970:	4f22      	ldr	r7, [pc, #136]	; (80099fc <Decel+0x1ac>)
 8009972:	f1ba 0f00 	cmp.w	sl, #0
 8009976:	d11e      	bne.n	80099b6 <Decel+0x166>
 8009978:	4e21      	ldr	r6, [pc, #132]	; (8009a00 <Decel+0x1b0>)
 800997a:	e7e0      	b.n	800993e <Decel+0xee>
 800997c:	f1ba 0f00 	cmp.w	sl, #0
 8009980:	d11d      	bne.n	80099be <Decel+0x16e>
			TargetVelocity[BODY] = end_speed;
 8009982:	4a1d      	ldr	r2, [pc, #116]	; (80099f8 <Decel+0x1a8>)
			ChangeLED(k);
 8009984:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8009a04 <Decel+0x1b4>
			TargetVelocity[BODY] = end_speed;
 8009988:	ed82 8a02 	vstr	s16, [r2, #8]
			TargetAngularV = 0;
 800998c:	4f1b      	ldr	r7, [pc, #108]	; (80099fc <Decel+0x1ac>)
			Acceleration = 0;
 800998e:	4a14      	ldr	r2, [pc, #80]	; (80099e0 <Decel+0x190>)
			AngularAcceleration = 0;
 8009990:	4e1b      	ldr	r6, [pc, #108]	; (8009a00 <Decel+0x1b0>)
			ChangeLED(k);
 8009992:	f8d8 0000 	ldr.w	r0, [r8]
			Acceleration = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	6013      	str	r3, [r2, #0]
			TargetAngularV = 0;
 800999a:	603b      	str	r3, [r7, #0]
			AngularAcceleration = 0;
 800999c:	6033      	str	r3, [r6, #0]
			ChangeLED(k);
 800999e:	f004 f933 	bl	800dc08 <ChangeLED>
			k++;
 80099a2:	f8d8 3000 	ldr.w	r3, [r8]
 80099a6:	3301      	adds	r3, #1
 80099a8:	f8c8 3000 	str.w	r3, [r8]
			break;
 80099ac:	e7c7      	b.n	800993e <Decel+0xee>
 80099ae:	4b0f      	ldr	r3, [pc, #60]	; (80099ec <Decel+0x19c>)
 80099b0:	f8c3 b000 	str.w	fp, [r3]
 80099b4:	e7c1      	b.n	800993a <Decel+0xea>
 80099b6:	4b0d      	ldr	r3, [pc, #52]	; (80099ec <Decel+0x19c>)
 80099b8:	f8c3 b000 	str.w	fp, [r3]
 80099bc:	e7dc      	b.n	8009978 <Decel+0x128>
 80099be:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <Decel+0x19c>)
 80099c0:	f8c3 b000 	str.w	fp, [r3]
 80099c4:	e7dd      	b.n	8009982 <Decel+0x132>
 80099c6:	bf00      	nop
 80099c8:	23ca2666 	.word	0x23ca2666
 80099cc:	3f509268 	.word	0x3f509268
 80099d0:	cccccccd 	.word	0xcccccccd
 80099d4:	3fe4cccc 	.word	0x3fe4cccc
 80099d8:	200089c4 	.word	0x200089c4
 80099dc:	3a83126f 	.word	0x3a83126f
 80099e0:	20007f34 	.word	0x20007f34
 80099e4:	200089f8 	.word	0x200089f8
 80099e8:	200089ec 	.word	0x200089ec
 80099ec:	2000897c 	.word	0x2000897c
 80099f0:	456d8000 	.word	0x456d8000
 80099f4:	200089b8 	.word	0x200089b8
 80099f8:	20008988 	.word	0x20008988
 80099fc:	20008998 	.word	0x20008998
 8009a00:	20007f3c 	.word	0x20007f3c
 8009a04:	20000000 	.word	0x20000000

08009a08 <GoStraight>:
	Pid[wall_ctrl].flag = 0;
	TargetAngularV = 0;
	return 45;
}
void GoStraight(float move_distance,  float explore_speed, int accel_or_decel)
{
 8009a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	ed2d 8b02 	vpush	{d8}
	//v = v0 + at
	//x = v0t + 0.5*at^2
	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	Control_Mode = A_VELO_PID;
	//加減速時は角度制御だけにしておいてあとで困ったら追加
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009a10:	ee70 7a00 	vadd.f32	s15, s0, s0
	Control_Mode = A_VELO_PID;
 8009a14:	4b8c      	ldr	r3, [pc, #560]	; (8009c48 <GoStraight+0x240>)
 8009a16:	2500      	movs	r5, #0
{
 8009a18:	b083      	sub	sp, #12
 8009a1a:	4604      	mov	r4, r0
	Control_Mode = A_VELO_PID;
 8009a1c:	601d      	str	r5, [r3, #0]
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009a1e:	ee17 0a90 	vmov	r0, s15
{
 8009a22:	eeb0 8a40 	vmov.f32	s16, s0
 8009a26:	eef0 8a60 	vmov.f32	s17, s1
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009a2a:	f7fe fcc5 	bl	80083b8 <__aeabi_f2d>
 8009a2e:	a380      	add	r3, pc, #512	; (adr r3, 8009c30 <GoStraight+0x228>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f7fe fe42 	bl	80086bc <__aeabi_ddiv>
 8009a38:	f7fe ffc6 	bl	80089c8 <__aeabi_d2iz>
	if(accel_or_decel == 1) //加速するとき
 8009a3c:	2c01      	cmp	r4, #1
 8009a3e:	f000 809b 	beq.w	8009b78 <GoStraight+0x170>
	{
		//explore_speed += AddVelocity;
		VelocityMax = true;
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
	}
	else if(accel_or_decel == -1) //探索速度までの減速. ターン速度までの減速も後で入れる
 8009a42:	3401      	adds	r4, #1
 8009a44:	4683      	mov	fp, r0
 8009a46:	f000 80a0 	beq.w	8009b8a <GoStraight+0x182>
//		Pos.Act = straight;
//		WallSafe();
//		ControlWall();
		_Bool wall_cut=false;	//壁切れ用
		_Bool face_check  = false; //一度でも正面領域に収まったか
		int ctrl_mode = GetWallCtrlDirection();
 8009a4a:	f7ff f9e1 	bl	8008e10 <GetWallCtrlDirection>
		//両壁がなければ, 角度制御しつつ柱を見たい. 細かすぎるかも.　今は角度制御
		if (ctrl_mode == N_WALL_PID )//|| ctrl_mode == F_WALL_PID)
			ctrl_mode = A_VELO_PID;
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2806      	cmp	r0, #6
 8009a52:	bf08      	it	eq
 8009a54:	2300      	moveq	r3, #0
 8009a56:	4c7d      	ldr	r4, [pc, #500]	; (8009c4c <GoStraight+0x244>)
 8009a58:	4d7d      	ldr	r5, [pc, #500]	; (8009c50 <GoStraight+0x248>)
 8009a5a:	9301      	str	r3, [sp, #4]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009a5c:	68a3      	ldr	r3, [r4, #8]
 8009a5e:	68aa      	ldr	r2, [r5, #8]
 8009a60:	445b      	add	r3, fp
 8009a62:	4293      	cmp	r3, r2
//				}//壁がなくなるのを見越して角度のみに変更
//				else{
//					Control_Mode = ctrl_mode;
//				}//少しの間壁を見て制御
//			}
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009a64:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009a66:	dd58      	ble.n	8009b1a <GoStraight+0x112>
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009a68:	f7fe fc94 	bl	8008394 <__aeabi_i2d>
 8009a6c:	68a6      	ldr	r6, [r4, #8]
 8009a6e:	4681      	mov	r9, r0
 8009a70:	4630      	mov	r0, r6
 8009a72:	468a      	mov	sl, r1
 8009a74:	f7fe fc8e 	bl	8008394 <__aeabi_i2d>
 8009a78:	a36f      	add	r3, pc, #444	; (adr r3, 8009c38 <GoStraight+0x230>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	4606      	mov	r6, r0
 8009a80:	460f      	mov	r7, r1
 8009a82:	4648      	mov	r0, r9
 8009a84:	4651      	mov	r1, sl
 8009a86:	f7fe fcef 	bl	8008468 <__aeabi_dmul>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4630      	mov	r0, r6
 8009a90:	4639      	mov	r1, r7
 8009a92:	f7fe fb33 	bl	80080fc <__adddf3>
 8009a96:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	460f      	mov	r7, r1
 8009aa0:	f7fe fc78 	bl	8008394 <__aeabi_i2d>
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	4639      	mov	r1, r7
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f7fe ff4e 	bl	800894c <__aeabi_dcmplt>
				Control_Mode = A_VELO_PID;
 8009ab0:	2300      	movs	r3, #0
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d05c      	beq.n	8009b70 <GoStraight+0x168>
				Control_Mode = A_VELO_PID;
 8009ab6:	4a64      	ldr	r2, [pc, #400]	; (8009c48 <GoStraight+0x240>)
 8009ab8:	6013      	str	r3, [r2, #0]
			}
			else Control_Mode = ctrl_mode;//壁見る
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009aba:	68a0      	ldr	r0, [r4, #8]
 8009abc:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009ac0:	f7fe fc68 	bl	8008394 <__aeabi_i2d>
 8009ac4:	a35e      	add	r3, pc, #376	; (adr r3, 8009c40 <GoStraight+0x238>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	4606      	mov	r6, r0
 8009acc:	460f      	mov	r7, r1
 8009ace:	4648      	mov	r0, r9
 8009ad0:	4651      	mov	r1, sl
 8009ad2:	f7fe fcc9 	bl	8008468 <__aeabi_dmul>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4630      	mov	r0, r6
 8009adc:	4639      	mov	r1, r7
 8009ade:	f7fe fb0d 	bl	80080fc <__adddf3>
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	460f      	mov	r7, r1
 8009ae8:	f7fe fc54 	bl	8008394 <__aeabi_i2d>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4630      	mov	r0, r6
 8009af2:	4639      	mov	r1, r7
 8009af4:	f7fe ff2a 	bl	800894c <__aeabi_dcmplt>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d0af      	beq.n	8009a5c <GoStraight+0x54>
 8009afc:	4b55      	ldr	r3, [pc, #340]	; (8009c54 <GoStraight+0x24c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1ab      	bne.n	8009a5c <GoStraight+0x54>
			{
				updateRealSearch();
 8009b04:	f003 fada 	bl	800d0bc <updateRealSearch>
				Calc = 1;
 8009b08:	4a52      	ldr	r2, [pc, #328]	; (8009c54 <GoStraight+0x24c>)
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	6013      	str	r3, [r2, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009b0e:	68a3      	ldr	r3, [r4, #8]
 8009b10:	68aa      	ldr	r2, [r5, #8]
 8009b12:	445b      	add	r3, fp
 8009b14:	4293      	cmp	r3, r2
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009b16:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009b18:	dca6      	bgt.n	8009a68 <GoStraight+0x60>
	//			Acceleration = 0;
	//		}
		}
		Control_Mode = A_VELO_PID;
		wall_cut = false;
		Acceleration = 0;
 8009b1a:	4b4f      	ldr	r3, [pc, #316]	; (8009c58 <GoStraight+0x250>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]
		KeepPulse[BODY] += target_pulse;
 8009b20:	68a3      	ldr	r3, [r4, #8]
		Control_Mode = A_VELO_PID;
 8009b22:	4a49      	ldr	r2, [pc, #292]	; (8009c48 <GoStraight+0x240>)
		KeepPulse[BODY] += target_pulse;
 8009b24:	445b      	add	r3, fp
 8009b26:	60a3      	str	r3, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009b28:	ed94 7a00 	vldr	s14, [r4]
 8009b2c:	ee07 ba90 	vmov	s15, fp
 8009b30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b38:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009b3c:	eea7 7aa6 	vfma.f32	s14, s15, s13
		Control_Mode = A_VELO_PID;
 8009b40:	2300      	movs	r3, #0
 8009b42:	6013      	str	r3, [r2, #0]
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009b44:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009b48:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009b4c:	ed94 7a01 	vldr	s14, [r4, #4]
 8009b50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b54:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009b58:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009b5c:	edc4 7a01 	vstr	s15, [r4, #4]

	}
	ChangeLED(0);
 8009b60:	2000      	movs	r0, #0
	//WallWarn();
	//keep_pulse = TotalPulse[BODY];
	//計算は区切りのいいところで一回するだけ。移動しきるまでそのままか、条件に応じて変える。
	//Uターンは別パターン
	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。
}
 8009b62:	b003      	add	sp, #12
 8009b64:	ecbd 8b02 	vpop	{d8}
 8009b68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ChangeLED(0);
 8009b6c:	f004 b84c 	b.w	800dc08 <ChangeLED>
			else Control_Mode = ctrl_mode;//壁見る
 8009b70:	4b35      	ldr	r3, [pc, #212]	; (8009c48 <GoStraight+0x240>)
 8009b72:	9a01      	ldr	r2, [sp, #4]
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	e7a0      	b.n	8009aba <GoStraight+0xb2>
		VelocityMax = true;
 8009b78:	4b38      	ldr	r3, [pc, #224]	; (8009c5c <GoStraight+0x254>)
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009b7a:	eef0 0a68 	vmov.f32	s1, s17
 8009b7e:	eeb0 0a48 	vmov.f32	s0, s16
		VelocityMax = true;
 8009b82:	701c      	strb	r4, [r3, #0]
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009b84:	f7ff fde0 	bl	8009748 <Accel>
 8009b88:	e7ea      	b.n	8009b60 <GoStraight+0x158>
		VelocityMax = false;
 8009b8a:	4b34      	ldr	r3, [pc, #208]	; (8009c5c <GoStraight+0x254>)
 8009b8c:	4c2f      	ldr	r4, [pc, #188]	; (8009c4c <GoStraight+0x244>)
 8009b8e:	701d      	strb	r5, [r3, #0]
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009b90:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8009b94:	eef0 0a68 	vmov.f32	s1, s17
 8009b98:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009b9c:	f7ff fe58 	bl	8009850 <Decel>
 8009ba0:	ee07 ba90 	vmov	s15, fp
 8009ba4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8009ba8:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
 8009bac:	ee28 8a88 	vmul.f32	s16, s17, s16
 8009bb0:	4d27      	ldr	r5, [pc, #156]	; (8009c50 <GoStraight+0x248>)
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009bb2:	4e28      	ldr	r6, [pc, #160]	; (8009c54 <GoStraight+0x24c>)
				Calc = 1;
 8009bb4:	2701      	movs	r7, #1
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009bb6:	e001      	b.n	8009bbc <GoStraight+0x1b4>
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009bb8:	6833      	ldr	r3, [r6, #0]
 8009bba:	b39b      	cbz	r3, 8009c24 <GoStraight+0x21c>
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009bbc:	edd4 7a02 	vldr	s15, [r4, #8]
 8009bc0:	ed95 7a02 	vldr	s14, [r5, #8]
 8009bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009bcc:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd8:	dcee      	bgt.n	8009bb8 <GoStraight+0x1b0>
		KeepPulse[BODY] += target_pulse*0.2f;
 8009bda:	edd4 7a02 	vldr	s15, [r4, #8]
 8009bde:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009c60 <GoStraight+0x258>
 8009be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009be6:	ee28 7a87 	vmul.f32	s14, s17, s14
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009bea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
		KeepPulse[BODY] += target_pulse*0.2f;
 8009bee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bf6:	edc4 7a02 	vstr	s15, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009bfa:	edd4 7a00 	vldr	s15, [r4]
 8009bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c02:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c0a:	edc4 7a00 	vstr	s15, [r4]
		KeepPulse[RIGHT] += target_pulse*0.2f*0.5f;
 8009c0e:	edd4 7a01 	vldr	s15, [r4, #4]
 8009c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c16:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c1e:	edc4 7a01 	vstr	s15, [r4, #4]
 8009c22:	e79d      	b.n	8009b60 <GoStraight+0x158>
				updateRealSearch();
 8009c24:	f003 fa4a 	bl	800d0bc <updateRealSearch>
				Calc = 1;
 8009c28:	6037      	str	r7, [r6, #0]
 8009c2a:	e7c7      	b.n	8009bbc <GoStraight+0x1b4>
 8009c2c:	f3af 8000 	nop.w
 8009c30:	23ca2666 	.word	0x23ca2666
 8009c34:	3f509268 	.word	0x3f509268
 8009c38:	9999999a 	.word	0x9999999a
 8009c3c:	3fd99999 	.word	0x3fd99999
 8009c40:	9999999a 	.word	0x9999999a
 8009c44:	3fe99999 	.word	0x3fe99999
 8009c48:	2000897c 	.word	0x2000897c
 8009c4c:	200089ec 	.word	0x200089ec
 8009c50:	200089b8 	.word	0x200089b8
 8009c54:	20008c28 	.word	0x20008c28
 8009c58:	20007f34 	.word	0x20007f34
 8009c5c:	20008aaa 	.word	0x20008aaa
 8009c60:	3e4ccccd 	.word	0x3e4ccccd

08009c64 <TurnRight>:
void TurnRight(char mode)
{
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009c64:	2853      	cmp	r0, #83	; 0x53
 8009c66:	d026      	beq.n	8009cb6 <TurnRight+0x52>
 8009c68:	2854      	cmp	r0, #84	; 0x54
 8009c6a:	d123      	bne.n	8009cb4 <TurnRight+0x50>
{
 8009c6c:	b510      	push	{r4, lr}
	{
	case 'T' :

		Decel(45, 0);
 8009c6e:	eddf 0a13 	vldr	s1, [pc, #76]	; 8009cbc <TurnRight+0x58>
 8009c72:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8009cc0 <TurnRight+0x5c>
//		ChangeLED(5);
		//AjustCenter();
		EmitterOFF();
//		Pid[Control_Mode].flag = 0;
//		PIDReset(Control_Mode);
		Control_Mode = NOT_CTRL_PID;
 8009c76:	4c13      	ldr	r4, [pc, #76]	; (8009cc4 <TurnRight+0x60>)
		Decel(45, 0);
 8009c78:	f7ff fdea 	bl	8009850 <Decel>
		WaitStopAndReset();
 8009c7c:	f7ff f92e 	bl	8008edc <WaitStopAndReset>
		EmitterOFF();
 8009c80:	f003 ffb4 	bl	800dbec <EmitterOFF>
		Control_Mode = NOT_CTRL_PID;
 8009c84:	230a      	movs	r3, #10
		//二回目の減速ではマップが完全におかし
		//一回目のターン時の減速終了時は正しい
		//二回目のターン時の減速後までにマップが狂ってる

//		PIDChangeFlag(A_VELO_PID, 0);
		Rotate( 90 , 2*M_PI);//1.5
 8009c86:	eddf 0a10 	vldr	s1, [pc, #64]	; 8009cc8 <TurnRight+0x64>
 8009c8a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009ccc <TurnRight+0x68>
		Control_Mode = NOT_CTRL_PID;
 8009c8e:	6023      	str	r3, [r4, #0]
		Rotate( 90 , 2*M_PI);//1.5
 8009c90:	f7ff f94e 	bl	8008f30 <Rotate>

//		ChangeLED(0);
		//RotateTest(90);

//		float acc = AjustCenter();
		EmitterON();
 8009c94:	f003 ff9c 	bl	800dbd0 <EmitterON>

//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		HAL_Delay(100);
 8009c98:	2064      	movs	r0, #100	; 0x64
 8009c9a:	f004 feb7 	bl	800ea0c <HAL_Delay>
//														printProfile(&my_mouse);
//														printAllWeight(&my_map, &(my_mouse.goal_lesser));
//													}
//												}
//												cc ++;
		Accel(45, ExploreVelocity);
 8009c9e:	4b0c      	ldr	r3, [pc, #48]	; (8009cd0 <TurnRight+0x6c>)
 8009ca0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8009cc0 <TurnRight+0x5c>
 8009ca4:	edd3 0a00 	vldr	s1, [r3]
		Control_Mode = A_VELO_PID; //ゴールを破壊してるのはこれ
 8009ca8:	2300      	movs	r3, #0
 8009caa:	6023      	str	r3, [r4, #0]
	default :
		break;
	}


}
 8009cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Accel(45, ExploreVelocity);
 8009cb0:	f7ff bd4a 	b.w	8009748 <Accel>
 8009cb4:	4770      	bx	lr
		SlalomRight();
 8009cb6:	f7ff ba87 	b.w	80091c8 <SlalomRight>
 8009cba:	bf00      	nop
 8009cbc:	00000000 	.word	0x00000000
 8009cc0:	42340000 	.word	0x42340000
 8009cc4:	2000897c 	.word	0x2000897c
 8009cc8:	40c90fdb 	.word	0x40c90fdb
 8009ccc:	42b40000 	.word	0x42b40000
 8009cd0:	20008aac 	.word	0x20008aac

08009cd4 <TurnLeft>:
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009cd4:	2853      	cmp	r0, #83	; 0x53
 8009cd6:	d029      	beq.n	8009d2c <TurnLeft+0x58>
 8009cd8:	2854      	cmp	r0, #84	; 0x54
 8009cda:	d126      	bne.n	8009d2a <TurnLeft+0x56>
{
 8009cdc:	b510      	push	{r4, lr}
	{
	case 'T' :
		//超信地旋回
		Decel(45, 0);
 8009cde:	eddf 0a14 	vldr	s1, [pc, #80]	; 8009d30 <TurnLeft+0x5c>
 8009ce2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8009d34 <TurnLeft+0x60>
		//ChangeLED(5);

		//AjustCenter();
		EmitterOFF();
//		PIDChangeFlag(A_VELO_PID, 0);
		Control_Mode = NOT_CTRL_PID;
 8009ce6:	4c14      	ldr	r4, [pc, #80]	; (8009d38 <TurnLeft+0x64>)
		Decel(45, 0);
 8009ce8:	f7ff fdb2 	bl	8009850 <Decel>
		WaitStopAndReset();
 8009cec:	f7ff f8f6 	bl	8008edc <WaitStopAndReset>
		EmitterOFF();
 8009cf0:	f003 ff7c 	bl	800dbec <EmitterOFF>
		Control_Mode = NOT_CTRL_PID;
 8009cf4:	230a      	movs	r3, #10
		Rotate( 90 , -2*M_PI);//-1.5
 8009cf6:	eddf 0a11 	vldr	s1, [pc, #68]	; 8009d3c <TurnLeft+0x68>
 8009cfa:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8009d40 <TurnLeft+0x6c>
		Control_Mode = NOT_CTRL_PID;
 8009cfe:	6023      	str	r3, [r4, #0]
		Rotate( 90 , -2*M_PI);//-1.5
 8009d00:	f7ff f916 	bl	8008f30 <Rotate>
		//RotateTest(-90);
//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		EmitterON();
 8009d04:	f003 ff64 	bl	800dbd0 <EmitterON>
		HAL_Delay(100);
 8009d08:	2064      	movs	r0, #100	; 0x64
 8009d0a:	f004 fe7f 	bl	800ea0c <HAL_Delay>
//		float acc = AjustCenter();
		HAL_Delay(100);
 8009d0e:	2064      	movs	r0, #100	; 0x64
 8009d10:	f004 fe7c 	bl	800ea0c <HAL_Delay>
		Control_Mode = A_VELO_PID;
//		PIDChangeFlag( A_VELO_PID , 1);
		Accel(45, ExploreVelocity);
 8009d14:	4b0b      	ldr	r3, [pc, #44]	; (8009d44 <TurnLeft+0x70>)
 8009d16:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8009d34 <TurnLeft+0x60>
 8009d1a:	edd3 0a00 	vldr	s1, [r3]
		Control_Mode = A_VELO_PID;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	6023      	str	r3, [r4, #0]
		break;
	default :
		break;
	}

}
 8009d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Accel(45, ExploreVelocity);
 8009d26:	f7ff bd0f 	b.w	8009748 <Accel>
 8009d2a:	4770      	bx	lr
		SlalomLeft();
 8009d2c:	f7ff bbb0 	b.w	8009490 <SlalomLeft>
 8009d30:	00000000 	.word	0x00000000
 8009d34:	42340000 	.word	0x42340000
 8009d38:	2000897c 	.word	0x2000897c
 8009d3c:	c0c90fdb 	.word	0xc0c90fdb
 8009d40:	42b40000 	.word	0x42b40000
 8009d44:	20008aac 	.word	0x20008aac

08009d48 <GoBack>:
void GoBack()
{
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	ed2d 8b04 	vpush	{d8-d9}
	//減速して
	Decel(45, 0);
 8009d4e:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009db4 <GoBack+0x6c>

#else
	Pos.Dir = right;
	Control_Mode = NOT_CTRL_PID;
//	PIDChangeFlag(A_VELO_PID, 0);
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009d52:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8009db8 <GoBack+0x70>
 8009d56:	eddf 8a19 	vldr	s17, [pc, #100]	; 8009dbc <GoBack+0x74>
	Pos.Dir = right;
 8009d5a:	4c19      	ldr	r4, [pc, #100]	; (8009dc0 <GoBack+0x78>)
	Decel(45, 0);
 8009d5c:	eddf 0a19 	vldr	s1, [pc, #100]	; 8009dc4 <GoBack+0x7c>
	Control_Mode = NOT_CTRL_PID;
 8009d60:	4d19      	ldr	r5, [pc, #100]	; (8009dc8 <GoBack+0x80>)
	Decel(45, 0);
 8009d62:	eeb0 0a48 	vmov.f32	s0, s16
 8009d66:	f7ff fd73 	bl	8009850 <Decel>
	Pos.Dir = right;
 8009d6a:	2601      	movs	r6, #1
	WaitStopAndReset();
 8009d6c:	f7ff f8b6 	bl	8008edc <WaitStopAndReset>
	Control_Mode = NOT_CTRL_PID;
 8009d70:	230a      	movs	r3, #10
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009d72:	eef0 0a49 	vmov.f32	s1, s18
 8009d76:	eeb0 0a68 	vmov.f32	s0, s17
	Control_Mode = NOT_CTRL_PID;
 8009d7a:	602b      	str	r3, [r5, #0]
	Pos.Dir = right;
 8009d7c:	7126      	strb	r6, [r4, #4]
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009d7e:	f7ff f8d7 	bl	8008f30 <Rotate>
	//acc = AjustCenter();
	Pos.Dir = right;
	Rotate(90, 2*M_PI);
 8009d82:	eef0 0a49 	vmov.f32	s1, s18
 8009d86:	eeb0 0a68 	vmov.f32	s0, s17
	Pos.Dir = right;
 8009d8a:	7126      	strb	r6, [r4, #4]
	Rotate(90, 2*M_PI);
 8009d8c:	f7ff f8d0 	bl	8008f30 <Rotate>
	Control_Mode = A_VELO_PID;
//	PIDChangeFlag(A_VELO_PID, 1);
	Pos.Dir = back;
 8009d90:	2303      	movs	r3, #3
	Control_Mode = A_VELO_PID;
 8009d92:	2200      	movs	r2, #0
#endif

	//acc = AjustCenter();
//	/Angle = TargetAngle;

	HAL_Delay(200);
 8009d94:	20c8      	movs	r0, #200	; 0xc8
	Pos.Dir = back;
 8009d96:	7123      	strb	r3, [r4, #4]
	Control_Mode = A_VELO_PID;
 8009d98:	602a      	str	r2, [r5, #0]
	HAL_Delay(200);
 8009d9a:	f004 fe37 	bl	800ea0c <HAL_Delay>

	Accel(45, ExploreVelocity);
 8009d9e:	eeb0 0a48 	vmov.f32	s0, s16
	//ここまでで目標走行距離を完了する

}
 8009da2:	ecbd 8b04 	vpop	{d8-d9}
	Accel(45, ExploreVelocity);
 8009da6:	4b09      	ldr	r3, [pc, #36]	; (8009dcc <GoBack+0x84>)
}
 8009da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Accel(45, ExploreVelocity);
 8009dac:	edd3 0a00 	vldr	s1, [r3]
 8009db0:	f7ff bcca 	b.w	8009748 <Accel>
 8009db4:	42340000 	.word	0x42340000
 8009db8:	40c90fdb 	.word	0x40c90fdb
 8009dbc:	42b40000 	.word	0x42b40000
 8009dc0:	20000008 	.word	0x20000008
 8009dc4:	00000000 	.word	0x00000000
 8009dc8:	2000897c 	.word	0x2000897c
 8009dcc:	20008aac 	.word	0x20008aac

08009dd0 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 8009dd0:	b570      	push	{r4, r5, r6, lr}

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009dd2:	4c71      	ldr	r4, [pc, #452]	; (8009f98 <Explore_IT+0x1c8>)
 8009dd4:	4871      	ldr	r0, [pc, #452]	; (8009f9c <Explore_IT+0x1cc>)
 8009dd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009dd8:	4a71      	ldr	r2, [pc, #452]	; (8009fa0 <Explore_IT+0x1d0>)
	TIM4->CNT = INITIAL_PULSE;

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009dda:	eddf 7a72 	vldr	s15, [pc, #456]	; 8009fa4 <Explore_IT+0x1d4>
 8009dde:	4d72      	ldr	r5, [pc, #456]	; (8009fa8 <Explore_IT+0x1d8>)

	//switch文でどれかひとつに絞らせたい
	static int keep_mode = A_VELO_PID;

	//0から違うモードに変わるとき、前のモードの値をリセットしておく
	if( Control_Mode != keep_mode){
 8009de0:	4e72      	ldr	r6, [pc, #456]	; (8009fac <Explore_IT+0x1dc>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009de2:	f247 532f 	movw	r3, #29999	; 0x752f
 8009de6:	1a59      	subs	r1, r3, r1
 8009de8:	6001      	str	r1, [r0, #0]
	TIM3->CNT = INITIAL_PULSE;
 8009dea:	6263      	str	r3, [r4, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009dec:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 8009dee:	6253      	str	r3, [r2, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009df0:	1b1b      	subs	r3, r3, r4
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009df2:	ee07 3a10 	vmov	s14, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009df6:	ee06 1a90 	vmov	s13, r1
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009dfa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009dfe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009e02:	ee27 7a27 	vmul.f32	s14, s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e06:	ee66 6aa7 	vmul.f32	s13, s13, s15
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e0a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e0e:	edc5 6a00 	vstr	s13, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009e12:	ed85 7a01 	vstr	s14, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e16:	edd5 7a00 	vldr	s15, [r5]
 8009e1a:	ed95 7a01 	vldr	s14, [r5, #4]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009e1e:	4a64      	ldr	r2, [pc, #400]	; (8009fb0 <Explore_IT+0x1e0>)
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009e20:	6043      	str	r3, [r0, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e22:	ee77 7a87 	vadd.f32	s15, s15, s14
	if( Control_Mode != keep_mode){
 8009e26:	4c63      	ldr	r4, [pc, #396]	; (8009fb4 <Explore_IT+0x1e4>)
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e28:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009e2c:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009e30:	6810      	ldr	r0, [r2, #0]
 8009e32:	4401      	add	r1, r0
 8009e34:	6011      	str	r1, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 8009e36:	6851      	ldr	r1, [r2, #4]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 8009e38:	485f      	ldr	r0, [pc, #380]	; (8009fb8 <Explore_IT+0x1e8>)
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 8009e3a:	440b      	add	r3, r1
 8009e3c:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8009e3e:	6813      	ldr	r3, [r2, #0]
 8009e40:	6851      	ldr	r1, [r2, #4]
 8009e42:	440b      	add	r3, r1
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 8009e44:	495d      	ldr	r1, [pc, #372]	; (8009fbc <Explore_IT+0x1ec>)
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8009e46:	6093      	str	r3, [r2, #8]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 8009e48:	f003 fd96 	bl	800d978 <Update_IMU>
	if( Control_Mode != keep_mode){
 8009e4c:	6820      	ldr	r0, [r4, #0]
 8009e4e:	6833      	ldr	r3, [r6, #0]
 8009e50:	4283      	cmp	r3, r0
 8009e52:	f040 808e 	bne.w	8009f72 <Explore_IT+0x1a2>
 8009e56:	4a5a      	ldr	r2, [pc, #360]	; (8009fc0 <Explore_IT+0x1f0>)
		PIDReset(keep_mode);
//		PIDChangeFlag(, 0);
		Pid[keep_mode].flag = 0;
	}
	Pid[Control_Mode].flag = 1;
	keep_mode = Control_Mode;
 8009e58:	6020      	str	r0, [r4, #0]
	Pid[Control_Mode].flag = 1;
 8009e5a:	232c      	movs	r3, #44	; 0x2c
 8009e5c:	fb03 2300 	mla	r3, r3, r0, r2
 8009e60:	2201      	movs	r2, #1
 8009e62:	629a      	str	r2, [r3, #40]	; 0x28
					TargetAngularV = (float)ang_out;

					//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
				}
#endif
	switch(Control_Mode)
 8009e64:	2803      	cmp	r0, #3
 8009e66:	f200 808f 	bhi.w	8009f88 <Explore_IT+0x1b8>
 8009e6a:	e8df f000 	tbb	[pc, r0]
 8009e6e:	6571      	.short	0x6571
 8009e70:	025d      	.short	0x025d
	case L_WALL_PID:
		wall_l = PIDControl( Control_Mode,  Photo[SL], TargetPhoto[SL]);
		TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
		break;
	case R_WALL_PID :
		wall_r = PIDControl( Control_Mode,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 8009e72:	4a54      	ldr	r2, [pc, #336]	; (8009fc4 <Explore_IT+0x1f4>)
 8009e74:	4b54      	ldr	r3, [pc, #336]	; (8009fc8 <Explore_IT+0x1f8>)
 8009e76:	ed92 0a01 	vldr	s0, [r2, #4]
 8009e7a:	edd3 0a01 	vldr	s1, [r3, #4]
 8009e7e:	2003      	movs	r0, #3
 8009e80:	f004 fc02 	bl	800e688 <PIDControl>
		TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 8009e84:	ee07 0a90 	vmov	s15, r0
 8009e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e8c:	ee17 0a90 	vmov	r0, s15
 8009e90:	f7fe fa92 	bl	80083b8 <__aeabi_f2d>
 8009e94:	a33e      	add	r3, pc, #248	; (adr r3, 8009f90 <Explore_IT+0x1c0>)
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	f7fe fae5 	bl	8008468 <__aeabi_dmul>
 8009e9e:	f7fe fddb 	bl	8008a58 <__aeabi_d2f>
 8009ea2:	4b4a      	ldr	r3, [pc, #296]	; (8009fcc <Explore_IT+0x1fc>)
 8009ea4:	6018      	str	r0, [r3, #0]
//
//				//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
//			}
//		}

	TargetVelocity[BODY] += Acceleration;
 8009ea6:	4c4a      	ldr	r4, [pc, #296]	; (8009fd0 <Explore_IT+0x200>)
 8009ea8:	4a4a      	ldr	r2, [pc, #296]	; (8009fd4 <Explore_IT+0x204>)
	//AngularAcceleration += AngularLeapsity;
	TargetAngularV += AngularAcceleration;
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009eaa:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8009fd8 <Explore_IT+0x208>
	TargetVelocity[BODY] += Acceleration;
 8009eae:	ed92 7a00 	vldr	s14, [r2]
 8009eb2:	edd4 7a02 	vldr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 8009eb6:	4a49      	ldr	r2, [pc, #292]	; (8009fdc <Explore_IT+0x20c>)
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009eb8:	4e49      	ldr	r6, [pc, #292]	; (8009fe0 <Explore_IT+0x210>)
	TargetVelocity[BODY] += Acceleration;
 8009eba:	ee77 7a87 	vadd.f32	s15, s15, s14
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009ebe:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	TargetVelocity[BODY] += Acceleration;
 8009ec2:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 8009ec6:	ed92 7a00 	vldr	s14, [r2]
 8009eca:	edd3 7a00 	vldr	s15, [r3]
 8009ece:	ee77 7a87 	vadd.f32	s15, s15, s14
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009ed2:	2004      	movs	r0, #4
	TargetAngularV += AngularAcceleration;
 8009ed4:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009ed8:	edd4 7a02 	vldr	s15, [r4, #8]
 8009edc:	ed93 7a00 	vldr	s14, [r3]
 8009ee0:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 8009ee4:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009ee8:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 8009eec:	ed93 7a00 	vldr	s14, [r3]
 8009ef0:	edd4 7a01 	vldr	s15, [r4, #4]
 8009ef4:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009ef8:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009efc:	ed94 0a00 	vldr	s0, [r4]
 8009f00:	edd5 0a00 	vldr	s1, [r5]
 8009f04:	f004 fbc0 	bl	800e688 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009f08:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009f0c:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009f0e:	edd5 0a01 	vldr	s1, [r5, #4]
 8009f12:	2005      	movs	r0, #5
 8009f14:	f004 fbb8 	bl	800e688 <PIDControl>
 8009f18:	4b32      	ldr	r3, [pc, #200]	; (8009fe4 <Explore_IT+0x214>)
 8009f1a:	4601      	mov	r1, r0

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8009f1c:	6830      	ldr	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009f1e:	6019      	str	r1, [r3, #0]
//			ChangeLED(7);
//	else
//	{
//		ChangeLED(4);
//	}
}
 8009f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8009f24:	f003 bf64 	b.w	800ddf0 <Motor_Switch>
		wall_l = PIDControl( Control_Mode,  Photo[SL], TargetPhoto[SL]);
 8009f28:	4a27      	ldr	r2, [pc, #156]	; (8009fc8 <Explore_IT+0x1f8>)
 8009f2a:	4b26      	ldr	r3, [pc, #152]	; (8009fc4 <Explore_IT+0x1f4>)
 8009f2c:	ed92 0a02 	vldr	s0, [r2, #8]
 8009f30:	edd3 0a02 	vldr	s1, [r3, #8]
 8009f34:	2002      	movs	r0, #2
 8009f36:	e7a3      	b.n	8009e80 <Explore_IT+0xb0>
		wall_d = PIDControl( Control_Mode, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 8009f38:	4b23      	ldr	r3, [pc, #140]	; (8009fc8 <Explore_IT+0x1f8>)
 8009f3a:	4a2b      	ldr	r2, [pc, #172]	; (8009fe8 <Explore_IT+0x218>)
 8009f3c:	ed93 0a02 	vldr	s0, [r3, #8]
 8009f40:	edd3 0a01 	vldr	s1, [r3, #4]
 8009f44:	edd2 7a00 	vldr	s15, [r2]
 8009f48:	2001      	movs	r0, #1
 8009f4a:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8009f4e:	e797      	b.n	8009e80 <Explore_IT+0xb0>
		ang_out = PIDControl( Control_Mode,  TargetAngle, Angle);
 8009f50:	4b1a      	ldr	r3, [pc, #104]	; (8009fbc <Explore_IT+0x1ec>)
 8009f52:	4a26      	ldr	r2, [pc, #152]	; (8009fec <Explore_IT+0x21c>)
 8009f54:	2000      	movs	r0, #0
 8009f56:	ed92 0a00 	vldr	s0, [r2]
 8009f5a:	edd3 0a00 	vldr	s1, [r3]
 8009f5e:	f004 fb93 	bl	800e688 <PIDControl>
		TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 8009f62:	ee07 0a90 	vmov	s15, r0
 8009f66:	4b19      	ldr	r3, [pc, #100]	; (8009fcc <Explore_IT+0x1fc>)
 8009f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f6c:	edc3 7a00 	vstr	s15, [r3]
		break;
 8009f70:	e799      	b.n	8009ea6 <Explore_IT+0xd6>
		PIDReset(keep_mode);
 8009f72:	f004 fb7b 	bl	800e66c <PIDReset>
		Pid[keep_mode].flag = 0;
 8009f76:	4a12      	ldr	r2, [pc, #72]	; (8009fc0 <Explore_IT+0x1f0>)
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	6830      	ldr	r0, [r6, #0]
 8009f7c:	212c      	movs	r1, #44	; 0x2c
 8009f7e:	fb01 2303 	mla	r3, r1, r3, r2
 8009f82:	2100      	movs	r1, #0
 8009f84:	6299      	str	r1, [r3, #40]	; 0x28
 8009f86:	e767      	b.n	8009e58 <Explore_IT+0x88>
 8009f88:	4b10      	ldr	r3, [pc, #64]	; (8009fcc <Explore_IT+0x1fc>)
 8009f8a:	e78c      	b.n	8009ea6 <Explore_IT+0xd6>
 8009f8c:	f3af 8000 	nop.w
 8009f90:	d2f1a9fc 	.word	0xd2f1a9fc
 8009f94:	3f50624d 	.word	0x3f50624d
 8009f98:	40000400 	.word	0x40000400
 8009f9c:	20008b74 	.word	0x20008b74
 8009fa0:	40000800 	.word	0x40000800
 8009fa4:	3f8177cd 	.word	0x3f8177cd
 8009fa8:	200089c4 	.word	0x200089c4
 8009fac:	2000897c 	.word	0x2000897c
 8009fb0:	200089b8 	.word	0x200089b8
 8009fb4:	20007f2c 	.word	0x20007f2c
 8009fb8:	20007f44 	.word	0x20007f44
 8009fbc:	20007f38 	.word	0x20007f38
 8009fc0:	20008034 	.word	0x20008034
 8009fc4:	20008ab8 	.word	0x20008ab8
 8009fc8:	200089f8 	.word	0x200089f8
 8009fcc:	20008998 	.word	0x20008998
 8009fd0:	20008988 	.word	0x20008988
 8009fd4:	20007f34 	.word	0x20007f34
 8009fd8:	4209999a 	.word	0x4209999a
 8009fdc:	20007f3c 	.word	0x20007f3c
 8009fe0:	20008ab0 	.word	0x20008ab0
 8009fe4:	20008acc 	.word	0x20008acc
 8009fe8:	200089ac 	.word	0x200089ac
 8009fec:	20007f48 	.word	0x20007f48

08009ff0 <WritingFree_IT>:
void WritingFree_IT()
{
 8009ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009ff4:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800a1ec <WritingFree_IT+0x1fc>
 8009ff8:	4969      	ldr	r1, [pc, #420]	; (800a1a0 <WritingFree_IT+0x1b0>)
 8009ffa:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009ffe:	4869      	ldr	r0, [pc, #420]	; (800a1a4 <WritingFree_IT+0x1b4>)
	TIM4->CNT = INITIAL_PULSE;

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a000:	eddf 6a69 	vldr	s13, [pc, #420]	; 800a1a8 <WritingFree_IT+0x1b8>
 800a004:	4d69      	ldr	r5, [pc, #420]	; (800a1ac <WritingFree_IT+0x1bc>)
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a006:	4a6a      	ldr	r2, [pc, #424]	; (800a1b0 <WritingFree_IT+0x1c0>)
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a008:	4f6a      	ldr	r7, [pc, #424]	; (800a1b4 <WritingFree_IT+0x1c4>)
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
	TargetVelocity[BODY] += Acceleration;
 800a00a:	4c6b      	ldr	r4, [pc, #428]	; (800a1b8 <WritingFree_IT+0x1c8>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a00c:	f247 532f 	movw	r3, #29999	; 0x752f
 800a010:	1b9e      	subs	r6, r3, r6
{
 800a012:	ed2d 8b02 	vpush	{d8}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a016:	600e      	str	r6, [r1, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a018:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a01c:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a020:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a022:	eba3 030c 	sub.w	r3, r3, ip
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a026:	ee07 3a90 	vmov	s15, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a02a:	ee07 6a10 	vmov	s14, r6
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a02e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a032:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a036:	ee67 7aa6 	vmul.f32	s15, s15, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a03a:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a03e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a042:	ed85 7a00 	vstr	s14, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a046:	edc5 7a01 	vstr	s15, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a04a:	edd5 7a00 	vldr	s15, [r5]
 800a04e:	ed95 7a01 	vldr	s14, [r5, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a052:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a054:	ee77 7a87 	vadd.f32	s15, s15, s14
	ZGyro = ReadIMU(0x37, 0x38);
 800a058:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a05a:	ee67 7aa8 	vmul.f32	s15, s15, s17
	ZGyro = ReadIMU(0x37, 0x38);
 800a05e:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a060:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a064:	f8d2 c000 	ldr.w	ip, [r2]
 800a068:	4466      	add	r6, ip
 800a06a:	6016      	str	r6, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a06c:	6856      	ldr	r6, [r2, #4]
 800a06e:	4433      	add	r3, r6
 800a070:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a072:	6813      	ldr	r3, [r2, #0]
 800a074:	6856      	ldr	r6, [r2, #4]
 800a076:	4433      	add	r3, r6
 800a078:	6093      	str	r3, [r2, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 800a07a:	f003 fc0f 	bl	800d89c <ReadIMU>
 800a07e:	4b4f      	ldr	r3, [pc, #316]	; (800a1bc <WritingFree_IT+0x1cc>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a080:	4a4f      	ldr	r2, [pc, #316]	; (800a1c0 <WritingFree_IT+0x1d0>)
	ZGyro = ReadIMU(0x37, 0x38);
 800a082:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a086:	ed93 8a00 	vldr	s16, [r3]
 800a08a:	ed92 7a00 	vldr	s14, [r2]
 800a08e:	4b4d      	ldr	r3, [pc, #308]	; (800a1c4 <WritingFree_IT+0x1d4>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a090:	6838      	ldr	r0, [r7, #0]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a092:	edd3 7a00 	vldr	s15, [r3]
	AngularAcceleration += AngularLeapsity;
 800a096:	4e4c      	ldr	r6, [pc, #304]	; (800a1c8 <WritingFree_IT+0x1d8>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a098:	ee38 8a47 	vsub.f32	s16, s16, s14
 800a09c:	ee28 8a27 	vmul.f32	s16, s16, s15
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a0a0:	f7fe f98a 	bl	80083b8 <__aeabi_f2d>
 800a0a4:	a33a      	add	r3, pc, #232	; (adr r3, 800a190 <WritingFree_IT+0x1a0>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7fe f9dd 	bl	8008468 <__aeabi_dmul>
 800a0ae:	4680      	mov	r8, r0
 800a0b0:	ee18 0a10 	vmov	r0, s16
 800a0b4:	4689      	mov	r9, r1
 800a0b6:	f7fe f97f 	bl	80083b8 <__aeabi_f2d>
 800a0ba:	a337      	add	r3, pc, #220	; (adr r3, 800a198 <WritingFree_IT+0x1a8>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f7fe f9d2 	bl	8008468 <__aeabi_dmul>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	f7fe f816 	bl	80080fc <__adddf3>
 800a0d0:	f7fe fcc2 	bl	8008a58 <__aeabi_d2f>
 800a0d4:	4b3d      	ldr	r3, [pc, #244]	; (800a1cc <WritingFree_IT+0x1dc>)
	Angle += AngularV * T1;
 800a0d6:	493e      	ldr	r1, [pc, #248]	; (800a1d0 <WritingFree_IT+0x1e0>)
 800a0d8:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800a1d4 <WritingFree_IT+0x1e4>
	AngularAcceleration += AngularLeapsity;
 800a0dc:	4a3e      	ldr	r2, [pc, #248]	; (800a1d8 <WritingFree_IT+0x1e8>)
 800a0de:	ed96 6a00 	vldr	s12, [r6]
	TargetVelocity[BODY] += Acceleration;
 800a0e2:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800a1f0 <WritingFree_IT+0x200>
	TargetAngularV += AngularAcceleration;

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a0e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a1dc <WritingFree_IT+0x1ec>
    zg_last = zg_law;
 800a0ea:	ed87 8a00 	vstr	s16, [r7]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a0ee:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800a0f2:	6018      	str	r0, [r3, #0]
	Angle += AngularV * T1;
 800a0f4:	edd3 5a00 	vldr	s11, [r3]
 800a0f8:	ed91 7a00 	vldr	s14, [r1]
	TargetAngularV += AngularAcceleration;
 800a0fc:	4b38      	ldr	r3, [pc, #224]	; (800a1e0 <WritingFree_IT+0x1f0>)
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a0fe:	4e39      	ldr	r6, [pc, #228]	; (800a1e4 <WritingFree_IT+0x1f4>)
	Angle += AngularV * T1;
 800a100:	eea5 7aa7 	vfma.f32	s14, s11, s15
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a104:	2004      	movs	r0, #4
	Angle += AngularV * T1;
 800a106:	ed81 7a00 	vstr	s14, [r1]
	AngularAcceleration += AngularLeapsity;
 800a10a:	edd2 7a00 	vldr	s15, [r2]
 800a10e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a112:	edc2 7a00 	vstr	s15, [r2]
	TargetVelocity[BODY] += Acceleration;
 800a116:	ed9c 7a00 	vldr	s14, [ip]
 800a11a:	edd4 7a02 	vldr	s15, [r4, #8]
 800a11e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a122:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 800a126:	ed92 7a00 	vldr	s14, [r2]
 800a12a:	edd3 7a00 	vldr	s15, [r3]
 800a12e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a132:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a136:	edd4 7a02 	vldr	s15, [r4, #8]
 800a13a:	ed93 7a00 	vldr	s14, [r3]
 800a13e:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a142:	eee7 7a28 	vfma.f32	s15, s14, s17
 800a146:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a14a:	ed93 7a00 	vldr	s14, [r3]
 800a14e:	edd4 7a01 	vldr	s15, [r4, #4]
 800a152:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a156:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a15a:	ed94 0a00 	vldr	s0, [r4]
 800a15e:	edd5 0a00 	vldr	s1, [r5]
 800a162:	f004 fa91 	bl	800e688 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a166:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a16a:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a16c:	edd5 0a01 	vldr	s1, [r5, #4]
 800a170:	2005      	movs	r0, #5
 800a172:	f004 fa89 	bl	800e688 <PIDControl>

	Motor_Switch( VelocityLeftOut, VelocityRightOut );


}
 800a176:	ecbd 8b02 	vpop	{d8}
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a17a:	4b1b      	ldr	r3, [pc, #108]	; (800a1e8 <WritingFree_IT+0x1f8>)
 800a17c:	4601      	mov	r1, r0
 800a17e:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a180:	6830      	ldr	r0, [r6, #0]
}
 800a182:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a186:	f003 be33 	b.w	800ddf0 <Motor_Switch>
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w
 800a190:	7ae147ae 	.word	0x7ae147ae
 800a194:	3fefae14 	.word	0x3fefae14
 800a198:	47ae147b 	.word	0x47ae147b
 800a19c:	3f847ae1 	.word	0x3f847ae1
 800a1a0:	20008b74 	.word	0x20008b74
 800a1a4:	40000800 	.word	0x40000800
 800a1a8:	3f8177cd 	.word	0x3f8177cd
 800a1ac:	200089c4 	.word	0x200089c4
 800a1b0:	200089b8 	.word	0x200089b8
 800a1b4:	20007f30 	.word	0x20007f30
 800a1b8:	20008988 	.word	0x20008988
 800a1bc:	20007fe4 	.word	0x20007fe4
 800a1c0:	20007ff0 	.word	0x20007ff0
 800a1c4:	08019074 	.word	0x08019074
 800a1c8:	20007f40 	.word	0x20007f40
 800a1cc:	20007f44 	.word	0x20007f44
 800a1d0:	20007f38 	.word	0x20007f38
 800a1d4:	3a83126f 	.word	0x3a83126f
 800a1d8:	20007f3c 	.word	0x20007f3c
 800a1dc:	4209999a 	.word	0x4209999a
 800a1e0:	20008998 	.word	0x20008998
 800a1e4:	20008ab0 	.word	0x20008ab0
 800a1e8:	20008acc 	.word	0x20008acc
 800a1ec:	40000400 	.word	0x40000400
 800a1f0:	20007f34 	.word	0x20007f34

0800a1f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if( htim == &htim1)
 800a1f4:	4b28      	ldr	r3, [pc, #160]	; (800a298 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800a1f6:	4298      	cmp	r0, r3
{
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	4604      	mov	r4, r0
	if( htim == &htim1)
 800a1fc:	d003      	beq.n	800a206 <HAL_TIM_PeriodElapsedCallback+0x12>
		default :
			break;
		}
	}

	if( htim == &htim8)
 800a1fe:	4b27      	ldr	r3, [pc, #156]	; (800a29c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800a200:	429c      	cmp	r4, r3
 800a202:	d012      	beq.n	800a22a <HAL_TIM_PeriodElapsedCallback+0x36>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
	}
}
 800a204:	bd70      	pop	{r4, r5, r6, pc}
		switch(IT_mode){
 800a206:	4b26      	ldr	r3, [pc, #152]	; (800a2a0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b06      	cmp	r3, #6
 800a20c:	d030      	beq.n	800a270 <HAL_TIM_PeriodElapsedCallback+0x7c>
 800a20e:	2b07      	cmp	r3, #7
 800a210:	d02b      	beq.n	800a26a <HAL_TIM_PeriodElapsedCallback+0x76>
 800a212:	2b05      	cmp	r3, #5
 800a214:	d1f3      	bne.n	800a1fe <HAL_TIM_PeriodElapsedCallback+0xa>
			if(timer1 < 5000)
 800a216:	4d23      	ldr	r5, [pc, #140]	; (800a2a4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800a218:	682a      	ldr	r2, [r5, #0]
 800a21a:	f241 3387 	movw	r3, #4999	; 0x1387
 800a21e:	429a      	cmp	r2, r3
 800a220:	dd29      	ble.n	800a276 <HAL_TIM_PeriodElapsedCallback+0x82>
			else t = 0;
 800a222:	4b21      	ldr	r3, [pc, #132]	; (800a2a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800a224:	2200      	movs	r2, #0
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	e7e9      	b.n	800a1fe <HAL_TIM_PeriodElapsedCallback+0xa>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a22a:	4e20      	ldr	r6, [pc, #128]	; (800a2ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800a22c:	4c20      	ldr	r4, [pc, #128]	; (800a2b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800a22e:	6831      	ldr	r1, [r6, #0]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a230:	4d20      	ldr	r5, [pc, #128]	; (800a2b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a232:	2200      	movs	r2, #0
 800a234:	200a      	movs	r0, #10
 800a236:	f003 fe4b 	bl	800ded0 <GetWallDataAverage>
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a23a:	6871      	ldr	r1, [r6, #4]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a23c:	ed84 0a00 	vstr	s0, [r4]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a240:	2201      	movs	r2, #1
 800a242:	200a      	movs	r0, #10
 800a244:	f003 fe44 	bl	800ded0 <GetWallDataAverage>
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a248:	6829      	ldr	r1, [r5, #0]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a24a:	ed84 0a01 	vstr	s0, [r4, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a24e:	2202      	movs	r2, #2
 800a250:	200a      	movs	r0, #10
 800a252:	f003 fe3d 	bl	800ded0 <GetWallDataAverage>
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a256:	6869      	ldr	r1, [r5, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a258:	ed84 0a02 	vstr	s0, [r4, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a25c:	2203      	movs	r2, #3
 800a25e:	200a      	movs	r0, #10
 800a260:	f003 fe36 	bl	800ded0 <GetWallDataAverage>
 800a264:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800a268:	bd70      	pop	{r4, r5, r6, pc}
			WritingFree_IT();
 800a26a:	f7ff fec1 	bl	8009ff0 <WritingFree_IT>
			break;
 800a26e:	e7c6      	b.n	800a1fe <HAL_TIM_PeriodElapsedCallback+0xa>
			Explore_IT();
 800a270:	f7ff fdae 	bl	8009dd0 <Explore_IT>
			break;
 800a274:	e7c3      	b.n	800a1fe <HAL_TIM_PeriodElapsedCallback+0xa>
				Update_IMU(&AngularV, &Angle);
 800a276:	4e10      	ldr	r6, [pc, #64]	; (800a2b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800a278:	4810      	ldr	r0, [pc, #64]	; (800a2bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800a27a:	4631      	mov	r1, r6
 800a27c:	f003 fb7c 	bl	800d978 <Update_IMU>
				timer1 += t;
 800a280:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
				debugVL[timer1] = Angle;
 800a282:	6829      	ldr	r1, [r5, #0]
 800a284:	4a0e      	ldr	r2, [pc, #56]	; (800a2c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
				timer1 += t;
 800a286:	681b      	ldr	r3, [r3, #0]
				debugVL[timer1] = Angle;
 800a288:	6830      	ldr	r0, [r6, #0]
 800a28a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
				timer1 += t;
 800a28e:	440b      	add	r3, r1
				debugVL[timer1] = Angle;
 800a290:	6010      	str	r0, [r2, #0]
				timer1 += t;
 800a292:	602b      	str	r3, [r5, #0]
 800a294:	e7b3      	b.n	800a1fe <HAL_TIM_PeriodElapsedCallback+0xa>
 800a296:	bf00      	nop
 800a298:	20008e74 	.word	0x20008e74
 800a29c:	20008c2c 	.word	0x20008c2c
 800a2a0:	20008974 	.word	0x20008974
 800a2a4:	20008980 	.word	0x20008980
 800a2a8:	20008970 	.word	0x20008970
 800a2ac:	20007fd0 	.word	0x20007fd0
 800a2b0:	200089f8 	.word	0x200089f8
 800a2b4:	20007fdc 	.word	0x20007fdc
 800a2b8:	20007f38 	.word	0x20007f38
 800a2bc:	20007f44 	.word	0x20007f44
 800a2c0:	2000022c 	.word	0x2000022c

0800a2c4 <flashStoreNodes>:
			}
	}
}
void flashStoreNodes()
{
	uint32_t address=start_adress_sector1;
 800a2c4:	4b1b      	ldr	r3, [pc, #108]	; (800a334 <flashStoreNodes+0x70>)
{
 800a2c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t address=start_adress_sector1;
 800a2ca:	f8d3 9000 	ldr.w	r9, [r3]
 800a2ce:	f8df a068 	ldr.w	sl, [pc, #104]	; 800a338 <flashStoreNodes+0x74>
 800a2d2:	ebc9 78c9 	rsb	r8, r9, r9, lsl #31
 800a2d6:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a2da:	464c      	mov	r4, r9
 800a2dc:	2700      	movs	r7, #0
 800a2de:	eb07 0508 	add.w	r5, r7, r8

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				FLASH_Write_Word(address+0, my_map.RawNode[i][j].existence);
 800a2e2:	4455      	add	r5, sl
 800a2e4:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800a2e8:	f815 1014 	ldrb.w	r1, [r5, r4, lsl #1]
 800a2ec:	4620      	mov	r0, r4
				address += 4;
 800a2ee:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, my_map.RawNode[i][j].existence);
 800a2f0:	f003 f9ce 	bl	800d690 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a2f4:	42b4      	cmp	r4, r6
 800a2f6:	d1f7      	bne.n	800a2e8 <flashStoreNodes+0x24>
 800a2f8:	3750      	adds	r7, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a2fa:	f5b7 7f34 	cmp.w	r7, #720	; 0x2d0
 800a2fe:	f1a8 0850 	sub.w	r8, r8, #80	; 0x50
 800a302:	d1ec      	bne.n	800a2de <flashStoreNodes+0x1a>
 800a304:	4f0c      	ldr	r7, [pc, #48]	; (800a338 <flashStoreNodes+0x74>)
 800a306:	f509 74b4 	add.w	r4, r9, #360	; 0x168
 800a30a:	f509 7934 	add.w	r9, r9, #720	; 0x2d0
 800a30e:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800a312:	463d      	mov	r5, r7
	//列
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				FLASH_Write_Word(address+0, my_map.ColumnNode[i][j].existence);
 800a314:	f895 12d0 	ldrb.w	r1, [r5, #720]	; 0x2d0
 800a318:	4620      	mov	r0, r4
				address += 4;
 800a31a:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, my_map.ColumnNode[i][j].existence);
 800a31c:	f003 f9b8 	bl	800d690 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a320:	42a6      	cmp	r6, r4
 800a322:	f105 0508 	add.w	r5, r5, #8
 800a326:	d1f5      	bne.n	800a314 <flashStoreNodes+0x50>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a328:	454e      	cmp	r6, r9
 800a32a:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800a32e:	d1ee      	bne.n	800a30e <flashStoreNodes+0x4a>
			}
	}
}
 800a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a334:	0801906c 	.word	0x0801906c
 800a338:	200083d0 	.word	0x200083d0

0800a33c <wall_init>:
void wall_init(){
 800a33c:	4920      	ldr	r1, [pc, #128]	; (800a3c0 <wall_init+0x84>)
 800a33e:	b470      	push	{r4, r5, r6}

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a340:	2500      	movs	r5, #0
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
				Wall[i][j].north = UNKNOWN;
 800a342:	24aa      	movs	r4, #170	; 0xaa
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a344:	2300      	movs	r3, #0
				Wall[i][j].north = UNKNOWN;
 800a346:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800a34a:	18c2      	adds	r2, r0, r3
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a34c:	3301      	adds	r3, #1
 800a34e:	2b09      	cmp	r3, #9
				Wall[i][j].north = UNKNOWN;
 800a350:	f801 4012 	strb.w	r4, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a354:	d1f9      	bne.n	800a34a <wall_init+0xe>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a356:	3501      	adds	r5, #1
 800a358:	2d09      	cmp	r5, #9
 800a35a:	d1f3      	bne.n	800a344 <wall_init+0x8>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a35c:	2300      	movs	r3, #0
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800a35e:	2201      	movs	r2, #1
 800a360:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 800a364:	eb01 0540 	add.w	r5, r1, r0, lsl #1
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800a368:	f103 0448 	add.w	r4, r3, #72	; 0x48
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800a36c:	7c2e      	ldrb	r6, [r5, #16]
 800a36e:	f362 0601 	bfi	r6, r2, #0, #2
 800a372:	742e      	strb	r6, [r5, #16]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800a374:	f811 5014 	ldrb.w	r5, [r1, r4, lsl #1]
 800a378:	f362 0583 	bfi	r5, r2, #2, #2
 800a37c:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
		Wall[n][0].south = WALL;
 800a380:	f811 4010 	ldrb.w	r4, [r1, r0, lsl #1]
 800a384:	f362 1405 	bfi	r4, r2, #4, #2
 800a388:	f801 4010 	strb.w	r4, [r1, r0, lsl #1]
		Wall[0][n].west = WALL;
 800a38c:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 800a390:	f362 1087 	bfi	r0, r2, #6, #2
 800a394:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a398:	3301      	adds	r3, #1
 800a39a:	2b09      	cmp	r3, #9
 800a39c:	d1e0      	bne.n	800a360 <wall_init+0x24>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800a39e:	780b      	ldrb	r3, [r1, #0]
	Wall[0][0].north = NOWALL;
	Wall[1][0].west = WALL;
 800a3a0:	7c8c      	ldrb	r4, [r1, #18]
	Wall[0][1].south = NOWALL;
 800a3a2:	7888      	ldrb	r0, [r1, #2]
	Wall[0][0].east = WALL;
 800a3a4:	f362 0383 	bfi	r3, r2, #2, #2
	Wall[1][0].west = WALL;
 800a3a8:	f362 1487 	bfi	r4, r2, #6, #2
	Wall[0][0].north = NOWALL;
 800a3ac:	f36f 0301 	bfc	r3, #0, #2
	Wall[0][1].south = NOWALL;
 800a3b0:	f36f 1005 	bfc	r0, #4, #2
	Wall[1][0].west = WALL;
 800a3b4:	748c      	strb	r4, [r1, #18]
	Wall[0][0].north = NOWALL;
 800a3b6:	700b      	strb	r3, [r1, #0]
	Wall[0][1].south = NOWALL;
 800a3b8:	7088      	strb	r0, [r1, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800a3ba:	bc70      	pop	{r4, r5, r6}
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	20008b80 	.word	0x20008b80

0800a3c4 <flashCopyNodesToRam>:
	}

}
//評価値マップ生成。
void flashCopyNodesToRam()
{
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t address=start_adress_sector1;
 800a3c8:	4b21      	ldr	r3, [pc, #132]	; (800a450 <flashCopyNodesToRam+0x8c>)
 800a3ca:	f8df b088 	ldr.w	fp, [pc, #136]	; 800a454 <flashCopyNodesToRam+0x90>
 800a3ce:	f8d3 a000 	ldr.w	sl, [r3]
 800a3d2:	f04f 0800 	mov.w	r8, #0
 800a3d6:	ebca 79ca 	rsb	r9, sl, sl, lsl #31
{
 800a3da:	b083      	sub	sp, #12
 800a3dc:	ea4f 0949 	mov.w	r9, r9, lsl #1
	uint32_t address=start_adress_sector1;
 800a3e0:	4654      	mov	r4, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				uint32_t wall_data=0;
 800a3e2:	4647      	mov	r7, r8
 800a3e4:	eb08 0509 	add.w	r5, r8, r9
				FLASH_Read_Word(address, &wall_data);
				my_map.RawNode[i][j].existence = wall_data;
 800a3e8:	445d      	add	r5, fp
 800a3ea:	f104 0628 	add.w	r6, r4, #40	; 0x28
				FLASH_Read_Word(address, &wall_data);
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	a901      	add	r1, sp, #4
				uint32_t wall_data=0;
 800a3f2:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800a3f4:	f003 f974 	bl	800d6e0 <FLASH_Read_Word>
				my_map.RawNode[i][j].existence = wall_data;
 800a3f8:	9b01      	ldr	r3, [sp, #4]
 800a3fa:	f805 3014 	strb.w	r3, [r5, r4, lsl #1]
				address += 4;
 800a3fe:	3404      	adds	r4, #4
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a400:	42b4      	cmp	r4, r6
 800a402:	d1f4      	bne.n	800a3ee <flashCopyNodesToRam+0x2a>
 800a404:	f108 0850 	add.w	r8, r8, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a408:	f5b8 7f34 	cmp.w	r8, #720	; 0x2d0
 800a40c:	f1a9 0950 	sub.w	r9, r9, #80	; 0x50
 800a410:	d1e8      	bne.n	800a3e4 <flashCopyNodesToRam+0x20>
 800a412:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800a454 <flashCopyNodesToRam+0x90>
 800a416:	f50a 74b4 	add.w	r4, sl, #360	; 0x168
	}
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				uint32_t wall_data=0;
 800a41a:	2700      	movs	r7, #0
 800a41c:	f50a 7a34 	add.w	sl, sl, #720	; 0x2d0
 800a420:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800a424:	4645      	mov	r5, r8
				FLASH_Read_Word(address, &wall_data);
 800a426:	4620      	mov	r0, r4
 800a428:	a901      	add	r1, sp, #4
				my_map.ColumnNode[i][j].existence = wall_data;
				address += 4;
 800a42a:	3404      	adds	r4, #4
				uint32_t wall_data=0;
 800a42c:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800a42e:	f003 f957 	bl	800d6e0 <FLASH_Read_Word>
				my_map.ColumnNode[i][j].existence = wall_data;
 800a432:	9b01      	ldr	r3, [sp, #4]
 800a434:	f885 32d0 	strb.w	r3, [r5, #720]	; 0x2d0
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a438:	42a6      	cmp	r6, r4
 800a43a:	f105 0508 	add.w	r5, r5, #8
 800a43e:	d1f2      	bne.n	800a426 <flashCopyNodesToRam+0x62>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a440:	4556      	cmp	r6, sl
 800a442:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800a446:	d1eb      	bne.n	800a420 <flashCopyNodesToRam+0x5c>
			}
	}
}
 800a448:	b003      	add	sp, #12
 800a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44e:	bf00      	nop
 800a450:	0801906c 	.word	0x0801906c
 800a454:	200083d0 	.word	0x200083d0

0800a458 <printAllWeight>:
        printf("[北 東 南 西] = [%u %u %u %u]\r\n", route[k].wall.north, route[k].wall.east, route[k].wall.south, route[k].wall.west);
        printf("\r\n");
    }
}
void printAllWeight(maze_node *maze, position *pos)
{
 800a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	b085      	sub	sp, #20
 800a45e:	4606      	mov	r6, r0
 800a460:	9003      	str	r0, [sp, #12]
    //全出力を3桁にそろえればよさそう
    //重みが0かつゴールエリア内の座標なら赤色で出力 31;1m
    //行から表示して、
    //列を表示
    //交互に
    printf("全ノードの重み\r\n");
 800a462:	4852      	ldr	r0, [pc, #328]	; (800a5ac <printAllWeight+0x154>)

    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
    {
        //行
        printf("  +  ");
 800a464:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800a5bc <printAllWeight+0x164>
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
            }
            else
            {
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a468:	4d51      	ldr	r5, [pc, #324]	; (800a5b0 <printAllWeight+0x158>)
            else
            {
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
            }
            if(x < NUMBER_OF_SQUARES_X)
                printf("     ");
 800a46a:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800a5c0 <printAllWeight+0x168>
{
 800a46e:	460c      	mov	r4, r1
    printf("全ノードの重み\r\n");
 800a470:	f00b f886 	bl	8015580 <puts>
 800a474:	4633      	mov	r3, r6
 800a476:	3340      	adds	r3, #64	; 0x40
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	2301      	movs	r3, #1
 800a47c:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800a47e:	2709      	movs	r7, #9
        printf("  +  ");
 800a480:	4648      	mov	r0, r9
 800a482:	f00a fff5 	bl	8015470 <iprintf>
 800a486:	9b01      	ldr	r3, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a488:	f04f 0b00 	mov.w	fp, #0
 800a48c:	f103 0608 	add.w	r6, r3, #8
 800a490:	e010      	b.n	800a4b4 <printAllWeight+0x5c>
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800a492:	7823      	ldrb	r3, [r4, #0]
 800a494:	455b      	cmp	r3, fp
 800a496:	d102      	bne.n	800a49e <printAllWeight+0x46>
 800a498:	7863      	ldrb	r3, [r4, #1]
 800a49a:	42bb      	cmp	r3, r7
 800a49c:	d018      	beq.n	800a4d0 <printAllWeight+0x78>
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a49e:	f00a ffe7 	bl	8015470 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800a4a2:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800a4a6:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800a4a8:	d01a      	beq.n	800a4e0 <printAllWeight+0x88>
                 printf("  +  ");
 800a4aa:	f00a ffe1 	bl	8015470 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a4ae:	f10b 0b01 	add.w	fp, fp, #1
 800a4b2:	3650      	adds	r6, #80	; 0x50
    if(maze->RawNode[x][y].weight == 0)
 800a4b4:	8872      	ldrh	r2, [r6, #2]
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a4b6:	f1ab 0307 	sub.w	r3, fp, #7
 800a4ba:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a4bc:	4611      	mov	r1, r2
 800a4be:	4628      	mov	r0, r5
    if(maze->RawNode[x][y].weight == 0)
 800a4c0:	2a00      	cmp	r2, #0
 800a4c2:	d1e6      	bne.n	800a492 <printAllWeight+0x3a>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d8e4      	bhi.n	800a492 <printAllWeight+0x3a>
 800a4c8:	1ffb      	subs	r3, r7, #7
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d8e0      	bhi.n	800a492 <printAllWeight+0x3a>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	4838      	ldr	r0, [pc, #224]	; (800a5b4 <printAllWeight+0x15c>)
 800a4d4:	f00a ffcc 	bl	8015470 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800a4d8:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800a4dc:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800a4de:	d1e4      	bne.n	800a4aa <printAllWeight+0x52>
 800a4e0:	1e7b      	subs	r3, r7, #1
 800a4e2:	461e      	mov	r6, r3
        printf("\r\n");
 800a4e4:	4834      	ldr	r0, [pc, #208]	; (800a5b8 <printAllWeight+0x160>)
 800a4e6:	9302      	str	r3, [sp, #8]
 800a4e8:	f00b f84a 	bl	8015580 <puts>
 800a4ec:	4633      	mov	r3, r6
 800a4ee:	b2f6      	uxtb	r6, r6
 800a4f0:	1af6      	subs	r6, r6, r3
 800a4f2:	00f6      	lsls	r6, r6, #3
 800a4f4:	f8dd a004 	ldr.w	sl, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800a4f8:	f04f 0b00 	mov.w	fp, #0
 800a4fc:	e00d      	b.n	800a51a <printAllWeight+0xc2>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800a4fe:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800a502:	f00a ffb5 	bl	8015470 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800a506:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800a50a:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800a50c:	d022      	beq.n	800a554 <printAllWeight+0xfc>
                printf("     ");
 800a50e:	f00a ffaf 	bl	8015470 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800a512:	f10b 0b01 	add.w	fp, fp, #1
 800a516:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
    if(maze->ColumnNode[x][y].weight == 0)
 800a51a:	eb0a 0106 	add.w	r1, sl, r6
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a51e:	f1ab 0307 	sub.w	r3, fp, #7
    if(maze->ColumnNode[x][y].weight == 0)
 800a522:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a526:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800a528:	4628      	mov	r0, r5
    if(maze->ColumnNode[x][y].weight == 0)
 800a52a:	b921      	cbnz	r1, 800a536 <printAllWeight+0xde>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d802      	bhi.n	800a536 <printAllWeight+0xde>
 800a530:	9b00      	ldr	r3, [sp, #0]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d905      	bls.n	800a542 <printAllWeight+0xea>
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800a536:	7823      	ldrb	r3, [r4, #0]
 800a538:	455b      	cmp	r3, fp
 800a53a:	d1e0      	bne.n	800a4fe <printAllWeight+0xa6>
 800a53c:	7863      	ldrb	r3, [r4, #1]
 800a53e:	42bb      	cmp	r3, r7
 800a540:	d1dd      	bne.n	800a4fe <printAllWeight+0xa6>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800a542:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800a546:	481b      	ldr	r0, [pc, #108]	; (800a5b4 <printAllWeight+0x15c>)
 800a548:	f00a ff92 	bl	8015470 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800a54c:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800a550:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800a552:	d1dc      	bne.n	800a50e <printAllWeight+0xb6>
        }
        printf("\r\n");
 800a554:	4818      	ldr	r0, [pc, #96]	; (800a5b8 <printAllWeight+0x160>)
 800a556:	f00b f813 	bl	8015580 <puts>
 800a55a:	9b00      	ldr	r3, [sp, #0]
 800a55c:	9f02      	ldr	r7, [sp, #8]
 800a55e:	f103 3aff 	add.w	sl, r3, #4294967295
 800a562:	9b01      	ldr	r3, [sp, #4]
 800a564:	3b08      	subs	r3, #8
 800a566:	9301      	str	r3, [sp, #4]
 800a568:	fa5f f38a 	uxtb.w	r3, sl
 800a56c:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800a56e:	2f00      	cmp	r7, #0
 800a570:	d186      	bne.n	800a480 <printAllWeight+0x28>
    }
    //y が0のときの行だけ表示
    printf("  +  ");
 800a572:	4812      	ldr	r0, [pc, #72]	; (800a5bc <printAllWeight+0x164>)
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
    {
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a574:	4e0e      	ldr	r6, [pc, #56]	; (800a5b0 <printAllWeight+0x158>)
        if(x < NUMBER_OF_SQUARES_X-1)
                printf("  +  ");
 800a576:	4607      	mov	r7, r0
    printf("  +  ");
 800a578:	f00a ff7a 	bl	8015470 <iprintf>
 800a57c:	9b03      	ldr	r3, [sp, #12]
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a57e:	4630      	mov	r0, r6
 800a580:	8859      	ldrh	r1, [r3, #2]
 800a582:	461c      	mov	r4, r3
 800a584:	f00a ff74 	bl	8015470 <iprintf>
 800a588:	f504 7520 	add.w	r5, r4, #640	; 0x280
                printf("  +  ");
 800a58c:	4638      	mov	r0, r7
 800a58e:	f00a ff6f 	bl	8015470 <iprintf>
 800a592:	3450      	adds	r4, #80	; 0x50
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a594:	8861      	ldrh	r1, [r4, #2]
 800a596:	4630      	mov	r0, r6
 800a598:	f00a ff6a 	bl	8015470 <iprintf>
        if(x < NUMBER_OF_SQUARES_X-1)
 800a59c:	42ac      	cmp	r4, r5
 800a59e:	d1f5      	bne.n	800a58c <printAllWeight+0x134>
    }
    printf("\r\n");
 800a5a0:	4805      	ldr	r0, [pc, #20]	; (800a5b8 <printAllWeight+0x160>)
    
    
}
 800a5a2:	b005      	add	sp, #20
 800a5a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a5a8:	f00a bfea 	b.w	8015580 <puts>
 800a5ac:	08018e54 	.word	0x08018e54
 800a5b0:	08018e88 	.word	0x08018e88
 800a5b4:	08018e74 	.word	0x08018e74
 800a5b8:	080191a8 	.word	0x080191a8
 800a5bc:	08018e6c 	.word	0x08018e6c
 800a5c0:	08018e90 	.word	0x08018e90

0800a5c4 <initWeight>:
            maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].draw == true) ? MAX_WEIGHT : 0;     //西
        }
    }
}
void initWeight(maze_node *maze)
{
 800a5c4:	b410      	push	{r4}
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	f500 7434 	add.w	r4, r0, #720	; 0x2d0
    // }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a5cc:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a5d0:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800a5d4:	8059      	strh	r1, [r3, #2]
 800a5d6:	3308      	adds	r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d1fb      	bne.n	800a5d4 <initWeight+0x10>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a5dc:	42a3      	cmp	r3, r4
 800a5de:	d1f7      	bne.n	800a5d0 <initWeight+0xc>
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800a5e0:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a5e4:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800a5e8:	f8a0 12d2 	strh.w	r1, [r0, #722]	; 0x2d2
 800a5ec:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a5ee:	4282      	cmp	r2, r0
 800a5f0:	d1fa      	bne.n	800a5e8 <initWeight+0x24>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d1f6      	bne.n	800a5e4 <initWeight+0x20>
        }
    }
}
 800a5f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <initMaze>:
void initMaze(maze_node *maze) //重みは別で初期化
{
 800a5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    //まず未探索状態にする
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a5fe:	2700      	movs	r7, #0
 800a600:	4604      	mov	r4, r0
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a602:	4684      	mov	ip, r0
        {
            maze->RawNode[i][j].existence = UNKNOWN;
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a604:	4639      	mov	r1, r7
            maze->RawNode[i][j].existence = UNKNOWN;
 800a606:	2602      	movs	r6, #2
 800a608:	b2fd      	uxtb	r5, r7
{
 800a60a:	4663      	mov	r3, ip
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a60c:	2201      	movs	r2, #1
            maze->RawNode[i][j].rc = 0;
            maze->RawNode[i][j].pos.x = i;
            maze->RawNode[i][j].pos.y = j;
 800a60e:	73da      	strb	r2, [r3, #15]
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a610:	3201      	adds	r2, #1
 800a612:	2a09      	cmp	r2, #9
            maze->RawNode[i][j].existence = UNKNOWN;
 800a614:	721e      	strb	r6, [r3, #8]
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a616:	7319      	strb	r1, [r3, #12]
            maze->RawNode[i][j].rc = 0;
 800a618:	7359      	strb	r1, [r3, #13]
            maze->RawNode[i][j].pos.x = i;
 800a61a:	739d      	strb	r5, [r3, #14]
 800a61c:	f103 0308 	add.w	r3, r3, #8
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a620:	d1f5      	bne.n	800a60e <initMaze+0x12>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a622:	3701      	adds	r7, #1
 800a624:	2f09      	cmp	r7, #9
 800a626:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800a62a:	d1ed      	bne.n	800a608 <initMaze+0xc>
        }
    }
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a62c:	f04f 0c01 	mov.w	ip, #1
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].existence = UNKNOWN;
            maze->ColumnNode[i][j].draw = false;
            maze->ColumnNode[i][j].rc = 1;
 800a630:	4667      	mov	r7, ip
 800a632:	f100 0e48 	add.w	lr, r0, #72	; 0x48
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a636:	2602      	movs	r6, #2
            maze->ColumnNode[i][j].draw = false;
 800a638:	2500      	movs	r5, #0
 800a63a:	fa5f f18c 	uxtb.w	r1, ip
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a63e:	4673      	mov	r3, lr
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a640:	2200      	movs	r2, #0
            maze->ColumnNode[i][j].pos.x = i;
            maze->ColumnNode[i][j].pos.y = j;
 800a642:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a646:	3201      	adds	r2, #1
 800a648:	2a09      	cmp	r2, #9
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a64a:	f883 62d0 	strb.w	r6, [r3, #720]	; 0x2d0
            maze->ColumnNode[i][j].draw = false;
 800a64e:	f883 52d4 	strb.w	r5, [r3, #724]	; 0x2d4
            maze->ColumnNode[i][j].rc = 1;
 800a652:	f883 72d5 	strb.w	r7, [r3, #725]	; 0x2d5
            maze->ColumnNode[i][j].pos.x = i;
 800a656:	f883 12d6 	strb.w	r1, [r3, #726]	; 0x2d6
 800a65a:	f103 0308 	add.w	r3, r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a65e:	d1f0      	bne.n	800a642 <initMaze+0x46>
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a660:	f10c 0c01 	add.w	ip, ip, #1
 800a664:	f1bc 0f09 	cmp.w	ip, #9
 800a668:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800a66c:	d1e5      	bne.n	800a63a <initMaze+0x3e>
        }
    }
    
    // 壁の有無を初期化
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a66e:	2200      	movs	r2, #0
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1

        maze->RawNode[i][0].draw = true;                        
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;

        maze->RawNode[i][0].rc = 0;
 800a670:	4616      	mov	r6, r2
 800a672:	4603      	mov	r3, r0
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a674:	2101      	movs	r1, #1
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;

        maze->RawNode[i][0].pos.x = i;
 800a676:	b2d5      	uxtb	r5, r2
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a678:	3201      	adds	r2, #1
 800a67a:	2a09      	cmp	r2, #9
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a67c:	7019      	strb	r1, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1
 800a67e:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
        maze->RawNode[i][0].draw = true;                        
 800a682:	7119      	strb	r1, [r3, #4]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;
 800a684:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
        maze->RawNode[i][0].rc = 0;
 800a688:	715e      	strb	r6, [r3, #5]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800a68a:	f883 604d 	strb.w	r6, [r3, #77]	; 0x4d
        maze->RawNode[i][0].pos.y = NUMBER_OF_SQUARES_Y;
 800a68e:	f883 c007 	strb.w	ip, [r3, #7]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800a692:	f883 c04f 	strb.w	ip, [r3, #79]	; 0x4f
        maze->RawNode[i][0].pos.x = i;
 800a696:	719d      	strb	r5, [r3, #6]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800a698:	f883 504e 	strb.w	r5, [r3, #78]	; 0x4e
 800a69c:	f103 0350 	add.w	r3, r3, #80	; 0x50
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a6a0:	d1e9      	bne.n	800a676 <initMaze+0x7a>
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a6a2:	2100      	movs	r1, #0
    {
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a6a4:	2301      	movs	r3, #1

        maze->ColumnNode[0][j].rc = 1;
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;

        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
        maze->ColumnNode[0][j].pos.y = j;
 800a6a6:	b2cd      	uxtb	r5, r1
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a6a8:	3101      	adds	r1, #1
 800a6aa:	2909      	cmp	r1, #9
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a6ac:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;  //東壁すべて1
 800a6b0:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
        maze->ColumnNode[0][j].draw = true;                    
 800a6b4:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800a6b8:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
        maze->ColumnNode[0][j].rc = 1;
 800a6bc:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800a6c0:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
 800a6c4:	f884 22d6 	strb.w	r2, [r4, #726]	; 0x2d6
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800a6c8:	f884 255e 	strb.w	r2, [r4, #1374]	; 0x55e
        maze->ColumnNode[0][j].pos.y = j;
 800a6cc:	f884 52d7 	strb.w	r5, [r4, #727]	; 0x2d7
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800a6d0:	f884 555f 	strb.w	r5, [r4, #1375]	; 0x55f
 800a6d4:	f104 0408 	add.w	r4, r4, #8
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a6d8:	d1e5      	bne.n	800a6a6 <initMaze+0xaa>
    }
    maze->ColumnNode[1][0].existence = WALL;    //東1
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800a6da:	2200      	movs	r2, #0
    maze->ColumnNode[1][0].existence = WALL;    //東1
 800a6dc:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318

    maze->ColumnNode[1][0].draw = true;    //東1
 800a6e0:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800a6e4:	7202      	strb	r2, [r0, #8]
    maze->RawNode[0][1].draw = false;     //北0
 800a6e6:	7302      	strb	r2, [r0, #12]
}
 800a6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ea:	bf00      	nop

0800a6ec <printAllNodeExistence>:
        printf("\r\n");
    }
    printf("\r\n");
}
void printAllNodeExistence(maze_node *mn)
{
 800a6ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	4680      	mov	r8, r0
 800a6f2:	4605      	mov	r5, r0
    printf("全ノードの壁の存在\r\n");
 800a6f4:	481a      	ldr	r0, [pc, #104]	; (800a760 <printAllNodeExistence+0x74>)
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            printf("%u,",mn->RawNode[i][j].existence);
 800a6f6:	4f1b      	ldr	r7, [pc, #108]	; (800a764 <printAllNodeExistence+0x78>)
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a6f8:	4e1b      	ldr	r6, [pc, #108]	; (800a768 <printAllNodeExistence+0x7c>)
            if(j < NUMBER_OF_SQUARES_Y-1)
                printf(",");
        }
        printf("\r\n");
 800a6fa:	f8df a070 	ldr.w	sl, [pc, #112]	; 800a76c <printAllNodeExistence+0x80>
 800a6fe:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800a702:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
    printf("全ノードの壁の存在\r\n");
 800a706:	f00a ff3b 	bl	8015580 <puts>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a70a:	2401      	movs	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800a70c:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 800a710:	4638      	mov	r0, r7
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a712:	3401      	adds	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800a714:	f00a feac 	bl	8015470 <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a718:	2c0a      	cmp	r4, #10
 800a71a:	d1f7      	bne.n	800a70c <printAllNodeExistence+0x20>
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a71c:	f898 12d0 	ldrb.w	r1, [r8, #720]	; 0x2d0
 800a720:	4630      	mov	r0, r6
 800a722:	f00a fea5 	bl	8015470 <iprintf>
 800a726:	f108 0b40 	add.w	fp, r8, #64	; 0x40
 800a72a:	4644      	mov	r4, r8
                printf(",");
 800a72c:	202c      	movs	r0, #44	; 0x2c
 800a72e:	f00a feb7 	bl	80154a0 <putchar>
 800a732:	3408      	adds	r4, #8
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a734:	f894 12d0 	ldrb.w	r1, [r4, #720]	; 0x2d0
 800a738:	4630      	mov	r0, r6
 800a73a:	f00a fe99 	bl	8015470 <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 800a73e:	455c      	cmp	r4, fp
 800a740:	d1f4      	bne.n	800a72c <printAllNodeExistence+0x40>
 800a742:	f108 0848 	add.w	r8, r8, #72	; 0x48
        printf("\r\n");
 800a746:	4650      	mov	r0, sl
 800a748:	f00a ff1a 	bl	8015580 <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a74c:	45c8      	cmp	r8, r9
 800a74e:	f105 0550 	add.w	r5, r5, #80	; 0x50
 800a752:	d1da      	bne.n	800a70a <printAllNodeExistence+0x1e>
    }
    printf("\r\n");
 800a754:	4805      	ldr	r0, [pc, #20]	; (800a76c <printAllNodeExistence+0x80>)
}
 800a756:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a75a:	f00a bf11 	b.w	8015580 <puts>
 800a75e:	bf00      	nop
 800a760:	08018e34 	.word	0x08018e34
 800a764:	08018e2c 	.word	0x08018e2c
 800a768:	08018e30 	.word	0x08018e30
 800a76c:	080191a8 	.word	0x080191a8

0800a770 <printMatrix16ValueFromNode>:
    return val;
}

//機体からTeraTermで出力するための関数
void printMatrix16ValueFromNode(maze_node *maze)
{
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	4604      	mov	r4, r0
 800a776:	b083      	sub	sp, #12
    printf("機体からTeraTermへの出力用\r\n");
 800a778:	4822      	ldr	r0, [pc, #136]	; (800a804 <printMatrix16ValueFromNode+0x94>)
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
    {
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
        {
            printf("%u",convertNodeTo16Value(maze, i,j));
 800a77a:	4e23      	ldr	r6, [pc, #140]	; (800a808 <printMatrix16ValueFromNode+0x98>)
    printf("機体からTeraTermへの出力用\r\n");
 800a77c:	f00a ff00 	bl	8015580 <puts>
 800a780:	f04f 0809 	mov.w	r8, #9
 800a784:	f104 0348 	add.w	r3, r4, #72	; 0x48
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800a788:	f04f 0908 	mov.w	r9, #8
 800a78c:	f1a3 0208 	sub.w	r2, r3, #8
 800a790:	eba9 0408 	sub.w	r4, r9, r8
 800a794:	9201      	str	r2, [sp, #4]
 800a796:	4692      	mov	sl, r2
 800a798:	00e4      	lsls	r4, r4, #3
 800a79a:	f503 7520 	add.w	r5, r3, #640	; 0x280
 800a79e:	f503 7734 	add.w	r7, r3, #720	; 0x2d0
{
 800a7a2:	469b      	mov	fp, r3
 800a7a4:	e003      	b.n	800a7ae <printMatrix16ValueFromNode+0x3e>
            if(i < NUMBER_OF_SQUARES_X-1)
                printf(",");
 800a7a6:	f00a fe7b 	bl	80154a0 <putchar>
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a7aa:	455f      	cmp	r7, fp
 800a7ac:	d01b      	beq.n	800a7e6 <printMatrix16ValueFromNode+0x76>
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a7ae:	f89a 12d4 	ldrb.w	r1, [sl, #724]	; 0x2d4
    val += 2 * maze->ColumnNode[x+1][y].draw;   //東
 800a7b2:	f89a e31c 	ldrb.w	lr, [sl, #796]	; 0x31c
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a7b6:	f89b 0004 	ldrb.w	r0, [fp, #4]
    val += 4 * maze->RawNode[x][y].draw;        //南
 800a7ba:	eb0b 0c04 	add.w	ip, fp, r4
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a7be:	00c9      	lsls	r1, r1, #3
 800a7c0:	eb01 014e 	add.w	r1, r1, lr, lsl #1
    val += 4 * maze->RawNode[x][y].draw;        //南
 800a7c4:	f89c c004 	ldrb.w	ip, [ip, #4]
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a7c8:	4401      	add	r1, r0
 800a7ca:	eb01 018c 	add.w	r1, r1, ip, lsl #2
            printf("%u",convertNodeTo16Value(maze, i,j));
 800a7ce:	b2c9      	uxtb	r1, r1
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f00a fe4d 	bl	8015470 <iprintf>
            if(i < NUMBER_OF_SQUARES_X-1)
 800a7d6:	455d      	cmp	r5, fp
                printf(",");
 800a7d8:	f04f 002c 	mov.w	r0, #44	; 0x2c
 800a7dc:	f10b 0b50 	add.w	fp, fp, #80	; 0x50
 800a7e0:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
            if(i < NUMBER_OF_SQUARES_X-1)
 800a7e4:	d1df      	bne.n	800a7a6 <printMatrix16ValueFromNode+0x36>
        }
        printf("\r\n");
 800a7e6:	4809      	ldr	r0, [pc, #36]	; (800a80c <printMatrix16ValueFromNode+0x9c>)
 800a7e8:	f00a feca 	bl	8015580 <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800a7ec:	f1b8 0801 	subs.w	r8, r8, #1
 800a7f0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a7f4:	9b01      	ldr	r3, [sp, #4]
 800a7f6:	d1c9      	bne.n	800a78c <printMatrix16ValueFromNode+0x1c>
    }
    printf("\r\n");
 800a7f8:	4804      	ldr	r0, [pc, #16]	; (800a80c <printMatrix16ValueFromNode+0x9c>)

}
 800a7fa:	b003      	add	sp, #12
 800a7fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a800:	f00a bebe 	b.w	8015580 <puts>
 800a804:	08018e98 	.word	0x08018e98
 800a808:	08018e30 	.word	0x08018e30
 800a80c:	080191a8 	.word	0x080191a8

0800a810 <updateNodeThree>:


//壁があれば重みはデフォルト値を代入する
//壁がなければそのままにしておく 前左右の情報の方角に合わせた変換は別のところで
void updateNodeThree(maze_node *maze, state *st, uint8_t x, uint8_t y)
{
 800a810:	b5f0      	push	{r4, r5, r6, r7, lr}
    //壁の有無の更新。既知の壁には上書きしない。重みの更新は？既知かどうかは重複するから書かない
        //重みは？壁があればMAX値、なければそのまま   
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800a812:	0094      	lsls	r4, r2, #2
 800a814:	1c5f      	adds	r7, r3, #1
 800a816:	18a5      	adds	r5, r4, r2
 800a818:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 800a81c:	18a6      	adds	r6, r4, r2
 800a81e:	f810 c035 	ldrb.w	ip, [r0, r5, lsl #3]
 800a822:	f1bc 0f02 	cmp.w	ip, #2
 800a826:	bf08      	it	eq
 800a828:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800a82c:	f102 0501 	add.w	r5, r2, #1
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800a830:	eb07 0646 	add.w	r6, r7, r6, lsl #1
 800a834:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800a838:	bf08      	it	eq
 800a83a:	f00c 0c03 	andeq.w	ip, ip, #3
 800a83e:	441d      	add	r5, r3
 800a840:	f800 c036 	strb.w	ip, [r0, r6, lsl #3]
 800a844:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800a848:	eb04 0c02 	add.w	ip, r4, r2
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800a84c:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800a850:	2e02      	cmp	r6, #2
 800a852:	bf08      	it	eq
 800a854:	790e      	ldrbeq	r6, [r1, #4]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800a856:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800a85a:	bf08      	it	eq
 800a85c:	f3c6 0681 	ubfxeq	r6, r6, #2, #2
 800a860:	f885 62d0 	strb.w	r6, [r5, #720]	; 0x2d0
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800a864:	f810 c03c 	ldrb.w	ip, [r0, ip, lsl #3]
 800a868:	f1bc 0f02 	cmp.w	ip, #2
 800a86c:	bf08      	it	eq
 800a86e:	f891 c004 	ldrbeq.w	ip, [r1, #4]
 800a872:	eb04 0e02 	add.w	lr, r4, r2
 800a876:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 800a87a:	f04f 0609 	mov.w	r6, #9
 800a87e:	bf08      	it	eq
 800a880:	f3cc 1c01 	ubfxeq	ip, ip, #4, #2
 800a884:	fb16 3602 	smlabb	r6, r6, r2, r3
 800a888:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 800a88c:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    // maze->RawNode[x][y+1].flag = true;      //北
    // maze->ColumnNode[x+1][y].flag = true;   //東
    // maze->RawNode[x][y].flag = true;        //南
    // maze->ColumnNode[x][y].flag = true;     //西

    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800a890:	4414      	add	r4, r2
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800a892:	f896 c2d0 	ldrb.w	ip, [r6, #720]	; 0x2d0
 800a896:	f1bc 0f02 	cmp.w	ip, #2
 800a89a:	bf08      	it	eq
 800a89c:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800a8a0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a8a4:	eb04 0207 	add.w	r2, r4, r7
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800a8a8:	bf08      	it	eq
 800a8aa:	ea4f 1c9c 	moveq.w	ip, ip, lsr #6
 800a8ae:	f886 c2d0 	strb.w	ip, [r6, #720]	; 0x2d0
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800a8b2:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800a8b6:	f1a1 0101 	sub.w	r1, r1, #1
 800a8ba:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a8be:	fab1 f181 	clz	r1, r1
 800a8c2:	0949      	lsrs	r1, r1, #5
 800a8c4:	7111      	strb	r1, [r2, #4]
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800a8c6:	f895 22d0 	ldrb.w	r2, [r5, #720]	; 0x2d0
 800a8ca:	f1a2 0201 	sub.w	r2, r2, #1
 800a8ce:	fab2 f282 	clz	r2, r2
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800a8d2:	4423      	add	r3, r4
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800a8d4:	0952      	lsrs	r2, r2, #5
 800a8d6:	f885 22d4 	strb.w	r2, [r5, #724]	; 0x2d4
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800a8da:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 800a8de:	f1a2 0201 	sub.w	r2, r2, #1
 800a8e2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a8e6:	fab2 f282 	clz	r2, r2
 800a8ea:	0952      	lsrs	r2, r2, #5
 800a8ec:	711a      	strb	r2, [r3, #4]
    maze->ColumnNode[x][y].draw = (maze->ColumnNode[x][y].existence == WALL) ? true : false;        //西
 800a8ee:	f896 32d0 	ldrb.w	r3, [r6, #720]	; 0x2d0
 800a8f2:	f1a3 0301 	sub.w	r3, r3, #1
 800a8f6:	fab3 f383 	clz	r3, r3
 800a8fa:	095b      	lsrs	r3, r3, #5
 800a8fc:	f886 32d4 	strb.w	r3, [r6, #724]	; 0x2d4
    //重みは毎回リセットして計算しなおすのでここでは要らない
    // maze->RawNode[x][y+1].weight = (maze->RawNode[x][y+1].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y+1].weight;             //北
    // maze->ColumnNode[x+1][y].weight = (maze->ColumnNode[x+1][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x+1][y].weight;    //東
    // maze->RawNode[x][y].weight = (maze->RawNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y].weight;                   //南
    // maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x][y].weight;          //西
}
 800a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a902:	bf00      	nop

0800a904 <initTargetAreaWeight>:
//             maze->ColumnNode[x+i][y+j].weight = 0;      //西
//         }
//     }
// }
void initTargetAreaWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size_x, uint8_t target_size_y)
{
 800a904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a908:	f89d 801c 	ldrb.w	r8, [sp, #28]
    //ゴールエリアの外堀と中のノードは全て0、壁があればMAX。
    for(int i=0; i < target_size_x; i++)
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d044      	beq.n	800a99a <initTargetAreaWeight+0x96>
 800a910:	1c4c      	adds	r4, r1, #1
 800a912:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800a916:	250a      	movs	r5, #10
 800a918:	18a7      	adds	r7, r4, r2
 800a91a:	fb15 2201 	smlabb	r2, r5, r1, r2
 800a91e:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 800a922:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
 800a926:	f04f 0908 	mov.w	r9, #8
 800a92a:	f04f 0e00 	mov.w	lr, #0
            // maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0; //東
            // maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;           //南
            // maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;     //西

        	//なぜdraw == trueでやっていたかわからない
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a92e:	f640 74ff 	movw	r4, #4095	; 0xfff
        for(int j=0; j < target_size_y; j++)
 800a932:	f1b8 0f00 	cmp.w	r8, #0
 800a936:	d028      	beq.n	800a98a <initTargetAreaWeight+0x86>
 800a938:	f1a7 0048 	sub.w	r0, r7, #72	; 0x48
 800a93c:	fb19 7608 	smlabb	r6, r9, r8, r7
 800a940:	4639      	mov	r1, r7
 800a942:	4662      	mov	r2, ip
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a944:	7a15      	ldrb	r5, [r2, #8]
 800a946:	2d01      	cmp	r5, #1
 800a948:	bf14      	ite	ne
 800a94a:	2500      	movne	r5, #0
 800a94c:	4625      	moveq	r5, r4
 800a94e:	8155      	strh	r5, [r2, #10]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].existence == WALL) ? MAX_WEIGHT : 0; //東
 800a950:	f891 52d0 	ldrb.w	r5, [r1, #720]	; 0x2d0
 800a954:	2d01      	cmp	r5, #1
 800a956:	bf14      	ite	ne
 800a958:	2500      	movne	r5, #0
 800a95a:	4625      	moveq	r5, r4
 800a95c:	f8a1 52d2 	strh.w	r5, [r1, #722]	; 0x2d2
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;           //南
 800a960:	7815      	ldrb	r5, [r2, #0]
 800a962:	2d01      	cmp	r5, #1
 800a964:	bf14      	ite	ne
 800a966:	2500      	movne	r5, #0
 800a968:	4625      	moveq	r5, r4
 800a96a:	8055      	strh	r5, [r2, #2]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a96c:	f890 52d0 	ldrb.w	r5, [r0, #720]	; 0x2d0
 800a970:	3108      	adds	r1, #8
 800a972:	2d01      	cmp	r5, #1
 800a974:	bf14      	ite	ne
 800a976:	2500      	movne	r5, #0
 800a978:	4625      	moveq	r5, r4
        for(int j=0; j < target_size_y; j++)
 800a97a:	42b1      	cmp	r1, r6
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a97c:	f8a0 52d2 	strh.w	r5, [r0, #722]	; 0x2d2
 800a980:	f102 0208 	add.w	r2, r2, #8
 800a984:	f100 0008 	add.w	r0, r0, #8
        for(int j=0; j < target_size_y; j++)
 800a988:	d1dc      	bne.n	800a944 <initTargetAreaWeight+0x40>
    for(int i=0; i < target_size_x; i++)
 800a98a:	f10e 0e01 	add.w	lr, lr, #1
 800a98e:	459e      	cmp	lr, r3
 800a990:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800a994:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800a998:	d1cb      	bne.n	800a932 <initTargetAreaWeight+0x2e>
        }
    }
}
 800a99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a99e:	bf00      	nop

0800a9a0 <updateAllNodeWeight>:
    // setTargetWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size);
//ゴールノードを0に初期化
    // setGoalWeight(maze);
    
void updateAllNodeWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t area_size_x, uint8_t area_size_y, int mask)
{
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	b085      	sub	sp, #20
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 800a9ac:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a9ae:	f500 7c34 	add.w	ip, r0, #720	; 0x2d0
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a9b2:	f640 77ff 	movw	r7, #4095	; 0xfff
 800a9b6:	f100 0550 	add.w	r5, r0, #80	; 0x50
 800a9ba:	8047      	strh	r7, [r0, #2]
 800a9bc:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a9be:	42a8      	cmp	r0, r5
 800a9c0:	d1fb      	bne.n	800a9ba <updateAllNodeWeight+0x1a>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a9c2:	4560      	cmp	r0, ip
 800a9c4:	d1f7      	bne.n	800a9b6 <updateAllNodeWeight+0x16>
 800a9c6:	4646      	mov	r6, r8
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800a9c8:	f640 7cff 	movw	ip, #4095	; 0xfff
 800a9cc:	f106 0548 	add.w	r5, r6, #72	; 0x48
 800a9d0:	f8a6 c2d2 	strh.w	ip, [r6, #722]	; 0x2d2
 800a9d4:	3608      	adds	r6, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a9d6:	42ae      	cmp	r6, r5
 800a9d8:	d1fa      	bne.n	800a9d0 <updateAllNodeWeight+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a9da:	4286      	cmp	r6, r0
 800a9dc:	d1f6      	bne.n	800a9cc <updateAllNodeWeight+0x2c>
	//全体に154/20ms = 7.7ms
    //新しい区画に入ったときに、更新

    initWeight(maze); //3/20ms
    
    initTargetAreaWeight(maze, x,y, area_size_x,area_size_y);
 800a9de:	f8cd e000 	str.w	lr, [sp]
 800a9e2:	4640      	mov	r0, r8
 800a9e4:	f7ff ff8e 	bl	800a904 <initTargetAreaWeight>
 800a9e8:	4645      	mov	r5, r8
 800a9ea:	f108 0250 	add.w	r2, r8, #80	; 0x50
 800a9ee:	9203      	str	r2, [sp, #12]
 800a9f0:	f108 0e48 	add.w	lr, r8, #72	; 0x48
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
			{
                //1ノードずつ見る.そこから加算対象が最大6個
                //端を見ないので、一番上の列からスタート j=N; j >= 0, xを1からN-1まで
                //次に行 j=N-1から1まで xを0からN-1まで
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a9f4:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a9f8:	46ac      	mov	ip, r5
					}
                    //南西
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
					{
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
						change_flag = true;		//値が更新されたことを示す
 800a9fa:	f04f 0800 	mov.w	r8, #0
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800a9fe:	4647      	mov	r7, r8
						change_flag = true;		//値が更新されたことを示す
 800aa00:	4661      	mov	r1, ip
 800aa02:	46e2      	mov	sl, ip
 800aa04:	46c1      	mov	r9, r8
 800aa06:	f101 0848 	add.w	r8, r1, #72	; 0x48
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aa0a:	4645      	mov	r5, r8
 800aa0c:	4653      	mov	r3, sl
 800aa0e:	2001      	movs	r0, #1
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800aa10:	895e      	ldrh	r6, [r3, #10]
 800aa12:	4296      	cmp	r6, r2
 800aa14:	d055      	beq.n	800aac2 <updateAllNodeWeight+0x122>
				if(j < NUMBER_OF_SQUARES_Y-1)   //範囲チェック. 座標のxyではなく、ノードのxy
 800aa16:	2808      	cmp	r0, #8
 800aa18:	d010      	beq.n	800aa3c <updateAllNodeWeight+0x9c>
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT) )	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aa1a:	f893 b010 	ldrb.w	fp, [r3, #16]
 800aa1e:	ea1b 0f04 	tst.w	fp, r4
 800aa22:	d109      	bne.n	800aa38 <updateAllNodeWeight+0x98>
 800aa24:	f8b3 b012 	ldrh.w	fp, [r3, #18]
 800aa28:	4593      	cmp	fp, r2
 800aa2a:	d105      	bne.n	800aa38 <updateAllNodeWeight+0x98>
						maze->RawNode[i][j+1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800aa2c:	f106 0907 	add.w	r9, r6, #7
 800aa30:	f8a3 9012 	strh.w	r9, [r3, #18]
						change_flag = true;		//値が更新されたことを示す
 800aa34:	f04f 0901 	mov.w	r9, #1
				if(j > 1)						//範囲チェック.ミスってた
 800aa38:	2801      	cmp	r0, #1
 800aa3a:	d00c      	beq.n	800aa56 <updateAllNodeWeight+0xb6>
					if( ((maze->RawNode[i][j-1].existence & mask) == NOWALL) && (maze->RawNode[i][j-1].weight == MAX_WEIGHT) )	//壁がなければ
 800aa3c:	f893 b000 	ldrb.w	fp, [r3]
 800aa40:	ea1b 0f04 	tst.w	fp, r4
 800aa44:	d107      	bne.n	800aa56 <updateAllNodeWeight+0xb6>
 800aa46:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 800aa4a:	4593      	cmp	fp, r2
 800aa4c:	d103      	bne.n	800aa56 <updateAllNodeWeight+0xb6>
						maze->RawNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800aa4e:	3607      	adds	r6, #7
 800aa50:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800aa52:	f04f 0901 	mov.w	r9, #1
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800aa56:	2f08      	cmp	r7, #8
 800aa58:	d017      	beq.n	800aa8a <updateAllNodeWeight+0xea>
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))		//壁がなければ
 800aa5a:	f895 62d8 	ldrb.w	r6, [r5, #728]	; 0x2d8
 800aa5e:	4226      	tst	r6, r4
 800aa60:	d109      	bne.n	800aa76 <updateAllNodeWeight+0xd6>
 800aa62:	f8b5 62da 	ldrh.w	r6, [r5, #730]	; 0x2da
 800aa66:	4296      	cmp	r6, r2
 800aa68:	d105      	bne.n	800aa76 <updateAllNodeWeight+0xd6>
						maze->ColumnNode[i+1][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aa6a:	895e      	ldrh	r6, [r3, #10]
 800aa6c:	3605      	adds	r6, #5
 800aa6e:	f8a5 62da 	strh.w	r6, [r5, #730]	; 0x2da
						change_flag = true;		//値が更新されたことを示す
 800aa72:	f04f 0901 	mov.w	r9, #1
                    if( ((maze->ColumnNode[i+1][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j-1].weight == MAX_WEIGHT)	)		//壁がなければ
 800aa76:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800aa7a:	4226      	tst	r6, r4
 800aa7c:	d104      	bne.n	800aa88 <updateAllNodeWeight+0xe8>
 800aa7e:	f8b5 62d2 	ldrh.w	r6, [r5, #722]	; 0x2d2
 800aa82:	4296      	cmp	r6, r2
 800aa84:	f000 8092 	beq.w	800abac <updateAllNodeWeight+0x20c>
				if(i > 0)						//範囲チェック
 800aa88:	b1df      	cbz	r7, 800aac2 <updateAllNodeWeight+0x122>
					if( ((maze->ColumnNode[i][j].existence & mask) == NOWALL)  && (maze->ColumnNode[i][j].weight == MAX_WEIGHT) )		//壁がなければ
 800aa8a:	f891 62d8 	ldrb.w	r6, [r1, #728]	; 0x2d8
 800aa8e:	4226      	tst	r6, r4
 800aa90:	d109      	bne.n	800aaa6 <updateAllNodeWeight+0x106>
 800aa92:	f8b1 62da 	ldrh.w	r6, [r1, #730]	; 0x2da
 800aa96:	4296      	cmp	r6, r2
 800aa98:	d105      	bne.n	800aaa6 <updateAllNodeWeight+0x106>
							maze->ColumnNode[i][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aa9a:	895e      	ldrh	r6, [r3, #10]
 800aa9c:	3605      	adds	r6, #5
 800aa9e:	f8a1 62da 	strh.w	r6, [r1, #730]	; 0x2da
							change_flag = true;		//値が更新されたことを示す
 800aaa2:	f04f 0901 	mov.w	r9, #1
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
 800aaa6:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800aaaa:	4226      	tst	r6, r4
 800aaac:	d109      	bne.n	800aac2 <updateAllNodeWeight+0x122>
 800aaae:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800aab2:	4296      	cmp	r6, r2
 800aab4:	d105      	bne.n	800aac2 <updateAllNodeWeight+0x122>
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800aab6:	895e      	ldrh	r6, [r3, #10]
 800aab8:	3605      	adds	r6, #5
 800aaba:	f8a1 62d2 	strh.w	r6, [r1, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800aabe:	f04f 0901 	mov.w	r9, #1
 800aac2:	3001      	adds	r0, #1
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800aac4:	2809      	cmp	r0, #9
 800aac6:	f103 0308 	add.w	r3, r3, #8
 800aaca:	f101 0108 	add.w	r1, r1, #8
 800aace:	f105 0508 	add.w	r5, r5, #8
 800aad2:	d19d      	bne.n	800aa10 <updateAllNodeWeight+0x70>
 800aad4:	3701      	adds	r7, #1
		for( i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800aad6:	2f09      	cmp	r7, #9
 800aad8:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800aadc:	4641      	mov	r1, r8
 800aade:	d192      	bne.n	800aa06 <updateAllNodeWeight+0x66>
 800aae0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800aae4:	464f      	mov	r7, r9
 800aae6:	4671      	mov	r1, lr
 800aae8:	f04f 0801 	mov.w	r8, #1
 800aaec:	f101 0948 	add.w	r9, r1, #72	; 0x48
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800aaf0:	464d      	mov	r5, r9
 800aaf2:	4653      	mov	r3, sl
 800aaf4:	2000      	movs	r0, #0
        //列
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
		{
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
			{
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800aaf6:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800aafa:	4296      	cmp	r6, r2
 800aafc:	d04f      	beq.n	800ab9e <updateAllNodeWeight+0x1fe>
					continue;
				}
                // printf("continueはクリア. Column[%d][%d]\r\n",i,j);
				
                //東側ノード
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800aafe:	f1b8 0f08 	cmp.w	r8, #8
 800ab02:	d00f      	beq.n	800ab24 <updateAllNodeWeight+0x184>
				{
                    // printf("列東%d,mask: %d, result: %d\r\n",maze->ColumnNode[i+1][j].existence, mask,((maze->ColumnNode[i+1][j].existence) & mask));
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ab04:	f895 b2d0 	ldrb.w	fp, [r5, #720]	; 0x2d0
 800ab08:	ea1b 0f04 	tst.w	fp, r4
 800ab0c:	d107      	bne.n	800ab1e <updateAllNodeWeight+0x17e>
 800ab0e:	f8b5 b2d2 	ldrh.w	fp, [r5, #722]	; 0x2d2
 800ab12:	4593      	cmp	fp, r2
 800ab14:	d103      	bne.n	800ab1e <updateAllNodeWeight+0x17e>
					{
						maze->ColumnNode[i+1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800ab16:	3607      	adds	r6, #7
 800ab18:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800ab1c:	2701      	movs	r7, #1
					}
                }
                //西側ノード
				if(i > 1)						//範囲チェック
 800ab1e:	f1b8 0f01 	cmp.w	r8, #1
 800ab22:	d00d      	beq.n	800ab40 <updateAllNodeWeight+0x1a0>
				{
					if( ((maze->ColumnNode[i-1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i-1][j].weight == MAX_WEIGHT))	//壁がなければ
 800ab24:	f891 6288 	ldrb.w	r6, [r1, #648]	; 0x288
 800ab28:	4226      	tst	r6, r4
 800ab2a:	d109      	bne.n	800ab40 <updateAllNodeWeight+0x1a0>
 800ab2c:	f8b1 628a 	ldrh.w	r6, [r1, #650]	; 0x28a
 800ab30:	4296      	cmp	r6, r2
 800ab32:	d105      	bne.n	800ab40 <updateAllNodeWeight+0x1a0>
					{
						maze->ColumnNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800ab34:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab38:	3607      	adds	r6, #7
 800ab3a:	f8a1 628a 	strh.w	r6, [r1, #650]	; 0x28a
						change_flag = true;		//値が更新されたことを示す
 800ab3e:	2701      	movs	r7, #1
					}
				}
                //北側に斜めが2方向
				if(j < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ab40:	2808      	cmp	r0, #8
 800ab42:	d013      	beq.n	800ab6c <updateAllNodeWeight+0x1cc>
				{
                    //北東
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800ab44:	7a1e      	ldrb	r6, [r3, #8]
 800ab46:	4226      	tst	r6, r4
 800ab48:	d107      	bne.n	800ab5a <updateAllNodeWeight+0x1ba>
 800ab4a:	895e      	ldrh	r6, [r3, #10]
 800ab4c:	4296      	cmp	r6, r2
 800ab4e:	d104      	bne.n	800ab5a <updateAllNodeWeight+0x1ba>
					{
						maze->RawNode[i][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab50:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab54:	3605      	adds	r6, #5
 800ab56:	815e      	strh	r6, [r3, #10]
						change_flag = true;		//値が更新されたことを示す
 800ab58:	2701      	movs	r7, #1
					}
                	
                    //北西
                    if( ((maze->RawNode[i-1][j+1].existence & mask) == NOWALL) && (maze->RawNode[i-1][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800ab5a:	f813 6c48 	ldrb.w	r6, [r3, #-72]
 800ab5e:	4226      	tst	r6, r4
 800ab60:	d103      	bne.n	800ab6a <updateAllNodeWeight+0x1ca>
 800ab62:	f833 6c46 	ldrh.w	r6, [r3, #-70]
 800ab66:	4296      	cmp	r6, r2
 800ab68:	d027      	beq.n	800abba <updateAllNodeWeight+0x21a>
						change_flag = true;		//値が更新されたことを示す
					}
				}

                //南側に斜めが2方向
				if(j > 0)						//範囲チェック
 800ab6a:	b1d0      	cbz	r0, 800aba2 <updateAllNodeWeight+0x202>
				{
                    //南東
					if( ((maze->RawNode[i][j].existence & mask) == NOWALL) && (maze->RawNode[i][j].weight == MAX_WEIGHT)	)		//壁がなければ
 800ab6c:	781e      	ldrb	r6, [r3, #0]
 800ab6e:	4226      	tst	r6, r4
 800ab70:	d107      	bne.n	800ab82 <updateAllNodeWeight+0x1e2>
 800ab72:	885e      	ldrh	r6, [r3, #2]
 800ab74:	4296      	cmp	r6, r2
 800ab76:	d104      	bne.n	800ab82 <updateAllNodeWeight+0x1e2>
					{
						maze->RawNode[i][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab78:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab7c:	3605      	adds	r6, #5
 800ab7e:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800ab80:	2701      	movs	r7, #1
					}
                    //南西
    				if( ((maze->RawNode[i-1][j].existence & mask) == NOWALL) && (maze->RawNode[i-1][j].weight == MAX_WEIGHT))		//壁がなければ
 800ab82:	f813 6c50 	ldrb.w	r6, [r3, #-80]
 800ab86:	4226      	tst	r6, r4
 800ab88:	d109      	bne.n	800ab9e <updateAllNodeWeight+0x1fe>
 800ab8a:	f833 6c4e 	ldrh.w	r6, [r3, #-78]
 800ab8e:	4296      	cmp	r6, r2
 800ab90:	d105      	bne.n	800ab9e <updateAllNodeWeight+0x1fe>
					{
							maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800ab92:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800ab96:	3605      	adds	r6, #5
 800ab98:	f823 6c4e 	strh.w	r6, [r3, #-78]
							change_flag = true;		//値が更新されたことを示す
 800ab9c:	2701      	movs	r7, #1
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
 800ab9e:	2808      	cmp	r0, #8
 800aba0:	d012      	beq.n	800abc8 <updateAllNodeWeight+0x228>
 800aba2:	3001      	adds	r0, #1
 800aba4:	3108      	adds	r1, #8
 800aba6:	3308      	adds	r3, #8
 800aba8:	3508      	adds	r5, #8
 800abaa:	e7a4      	b.n	800aaf6 <updateAllNodeWeight+0x156>
						maze->ColumnNode[i+1][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800abac:	895e      	ldrh	r6, [r3, #10]
 800abae:	3605      	adds	r6, #5
 800abb0:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800abb4:	f04f 0901 	mov.w	r9, #1
 800abb8:	e766      	b.n	800aa88 <updateAllNodeWeight+0xe8>
						maze->RawNode[i-1][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800abba:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800abbe:	3605      	adds	r6, #5
 800abc0:	f823 6c46 	strh.w	r6, [r3, #-70]
						change_flag = true;		//値が更新されたことを示す
 800abc4:	2701      	movs	r7, #1
 800abc6:	e7d0      	b.n	800ab6a <updateAllNodeWeight+0x1ca>
 800abc8:	f108 0801 	add.w	r8, r8, #1
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800abcc:	f1b8 0f09 	cmp.w	r8, #9
 800abd0:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800abd4:	4649      	mov	r1, r9
 800abd6:	d189      	bne.n	800aaec <updateAllNodeWeight+0x14c>
				}
            }
        }
        //printf("重みの更新\r\n");//一回しか呼ばれていない
        //cnt++;
	}while(change_flag == true);	//全体を作り終わるまで待つ
 800abd8:	2f00      	cmp	r7, #0
 800abda:	f47f af0e 	bne.w	800a9fa <updateAllNodeWeight+0x5a>
//    t = 0;
//	HAL_TIM_Base_Stop_IT(&htim8);
//	printf("%d/20ms, %d, %d\r\n\r\n",timer8, skip_raw, skip_column);
}
 800abde:	b005      	add	sp, #20
 800abe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abe4 <getNextNode>:
}

//ノード情報から、行けるノードを比較する
// 比較しながらアドレスを更新してしまうので注意:
node *getNextNode(maze_node *maze, cardinal car, node *now_node, int mask)
{
 800abe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t compare_weight=0;
    compare_weight = now_node->weight;

    _Bool flag=false;
    //printf("マイノードが01のどちらか:%d\r\n",now_node->rc);
    if(now_node->rc == 0)
 800abe8:	f892 8005 	ldrb.w	r8, [r2, #5]
 800abec:	7991      	ldrb	r1, [r2, #6]
 800abee:	79d4      	ldrb	r4, [r2, #7]
{
 800abf0:	4605      	mov	r5, r0
 800abf2:	b083      	sub	sp, #12
 800abf4:	4616      	mov	r6, r2
    compare_weight = now_node->weight;
 800abf6:	8850      	ldrh	r0, [r2, #2]
    if(now_node->rc == 0)
 800abf8:	f1b8 0f00 	cmp.w	r8, #0
 800abfc:	f040 8088 	bne.w	800ad10 <getNextNode+0x12c>
#endif
        //条件がおかしい？printしている全ノードの重みと、アドレスを入れたはずのマイノードの重みが違う
        
        //行にいるとき
        //北側ノード
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ac00:	2c07      	cmp	r4, #7
 800ac02:	f104 3eff 	add.w	lr, r4, #4294967295
        {

            //printf("%u\r\n",now_node->pos.y);
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ac06:	ea4f 0c81 	mov.w	ip, r1, lsl #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ac0a:	f200 80d9 	bhi.w	800adc0 <getNextNode+0x1dc>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ac0e:	eb0c 0201 	add.w	r2, ip, r1
 800ac12:	f104 0901 	add.w	r9, r4, #1
 800ac16:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 800ac1a:	f815 a032 	ldrb.w	sl, [r5, r2, lsl #3]
 800ac1e:	ea1a 0f03 	tst.w	sl, r3
 800ac22:	d114      	bne.n	800ac4e <getNextNode+0x6a>
            {
            	static int cnt = 1;
//            				ChangeLED(cnt%7);
            				cnt ++;
 800ac24:	f8df a308 	ldr.w	sl, [pc, #776]	; 800af30 <getNextNode+0x34c>


                // printf("%d\r\n", maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence);//壁があることになってた..
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800ac28:	eb05 0bc2 	add.w	fp, r5, r2, lsl #3
            				cnt ++;
 800ac2c:	f8da 2000 	ldr.w	r2, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800ac30:	f8bb b002 	ldrh.w	fp, [fp, #2]
            				cnt ++;
 800ac34:	3201      	adds	r2, #1
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800ac36:	4583      	cmp	fp, r0
            				cnt ++;
 800ac38:	f8ca 2000 	str.w	r2, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800ac3c:	d207      	bcs.n	800ac4e <getNextNode+0x6a>

#if DEBUG_ON
                    printf("北へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800ac3e:	270a      	movs	r7, #10
 800ac40:	fb17 9701 	smlabb	r7, r7, r1, r9
 800ac44:	4658      	mov	r0, fp
 800ac46:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800ac4a:	f04f 0801 	mov.w	r8, #1
                }
            }
        }
        //南へ側ノード
        if(now_node->pos.y > 1)						//範囲チェック
 800ac4e:	2c01      	cmp	r4, #1
 800ac50:	f200 80b6 	bhi.w	800adc0 <getNextNode+0x1dc>
                    flag = true;
                }
            }
        }
        //東へ側に斜めが2方向
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ac54:	2907      	cmp	r1, #7
 800ac56:	d831      	bhi.n	800acbc <getNextNode+0xd8>
        {
            //北東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ac58:	1c4a      	adds	r2, r1, #1
 800ac5a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800ac5e:	eb02 0c04 	add.w	ip, r2, r4
 800ac62:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 800ac66:	f89c 92d0 	ldrb.w	r9, [ip, #720]	; 0x2d0
 800ac6a:	ea19 0f03 	tst.w	r9, r3
 800ac6e:	d10b      	bne.n	800ac88 <getNextNode+0xa4>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800ac70:	f8bc c2d2 	ldrh.w	ip, [ip, #722]	; 0x2d2
 800ac74:	4584      	cmp	ip, r0
 800ac76:	d207      	bcs.n	800ac88 <getNextNode+0xa4>
                {
#if DEBUG_ON
                    printf("北東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800ac78:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800ac7c:	4417      	add	r7, r2
 800ac7e:	4660      	mov	r0, ip
 800ac80:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800ac84:	f04f 0801 	mov.w	r8, #1
 800ac88:	eb02 0c0e 	add.w	ip, r2, lr
 800ac8c:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
                }
            }

            //南へ東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800ac90:	f89c 92d0 	ldrb.w	r9, [ip, #720]	; 0x2d0
 800ac94:	ea19 0f03 	tst.w	r9, r3
 800ac98:	f040 80fc 	bne.w	800ae94 <getNextNode+0x2b0>
            {  
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800ac9c:	f8bc c2d2 	ldrh.w	ip, [ip, #722]	; 0x2d2
 800aca0:	4584      	cmp	ip, r0
 800aca2:	f080 80f7 	bcs.w	800ae94 <getNextNode+0x2b0>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
 800aca6:	f10e 075a 	add.w	r7, lr, #90	; 0x5a
 800acaa:	4417      	add	r7, r2
 800acac:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                }
            }
        }

        //西へ側に斜めが2方向
        if(now_node->pos.x > 0)						//範囲チェック
 800acb0:	2900      	cmp	r1, #0
 800acb2:	f000 8081 	beq.w	800adb8 <getNextNode+0x1d4>
 800acb6:	4660      	mov	r0, ip
                    flag = true;
 800acb8:	f04f 0801 	mov.w	r8, #1
 800acbc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800acc0:	1862      	adds	r2, r4, r1
 800acc2:	eb0e 0c01 	add.w	ip, lr, r1
 800acc6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800acca:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
        {
            //北西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800acce:	f892 92d0 	ldrb.w	r9, [r2, #720]	; 0x2d0
 800acd2:	f89c a2d0 	ldrb.w	sl, [ip, #720]	; 0x2d0
 800acd6:	ea19 0f03 	tst.w	r9, r3
 800acda:	ea0a 0a03 	and.w	sl, sl, r3
 800acde:	f040 80cf 	bne.w	800ae80 <getNextNode+0x29c>
            {
                //重みを比較して更新
               
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight)
 800ace2:	f8b2 32d2 	ldrh.w	r3, [r2, #722]	; 0x2d2
 800ace6:	4283      	cmp	r3, r0
 800ace8:	f080 80ca 	bcs.w	800ae80 <getNextNode+0x29c>
                {
#if DEBUG_ON
                    printf("北西へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
 800acec:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800acf0:	440f      	add	r7, r1
 800acf2:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800acf6:	f1ba 0f00 	cmp.w	sl, #0
 800acfa:	d15d      	bne.n	800adb8 <getNextNode+0x1d4>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800acfc:	f8bc 22d2 	ldrh.w	r2, [ip, #722]	; 0x2d2
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d259      	bcs.n	800adb8 <getNextNode+0x1d4>
                {
#if DEBUG_ON
                    printf("南西へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y-1]);
 800ad04:	f10e 075a 	add.w	r7, lr, #90	; 0x5a
 800ad08:	440f      	add	r7, r1
 800ad0a:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 800ad0e:	e053      	b.n	800adb8 <getNextNode+0x1d4>
        //列にいるとき
#if DEBUG_ON
        printf("列ノードから");
#endif
        //東へ側ノード
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ad10:	2907      	cmp	r1, #7
 800ad12:	d96d      	bls.n	800adf0 <getNextNode+0x20c>
    _Bool flag=false;
 800ad14:	f04f 0c00 	mov.w	ip, #0
            }
        }
        //西へ側ノード
        if(now_node->pos.x > 1)						//範囲チェック
        {
            if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ
 800ad18:	1e4a      	subs	r2, r1, #1
 800ad1a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800ad1e:	4422      	add	r2, r4
 800ad20:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800ad24:	f892 e2d0 	ldrb.w	lr, [r2, #720]	; 0x2d0
 800ad28:	ea1e 0f03 	tst.w	lr, r3
 800ad2c:	d118      	bne.n	800ad60 <getNextNode+0x17c>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800ad2e:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800ad32:	4282      	cmp	r2, r0
 800ad34:	d214      	bcs.n	800ad60 <getNextNode+0x17c>
                {
                	ChangeLED(3);
 800ad36:	2003      	movs	r0, #3
 800ad38:	9301      	str	r3, [sp, #4]
 800ad3a:	f002 ff65 	bl	800dc08 <ChangeLED>
#if DEBUG_ON
                    printf("西へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight;
 800ad3e:	79b1      	ldrb	r1, [r6, #6]
 800ad40:	79f4      	ldrb	r4, [r6, #7]
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
                    flag = true;
 800ad42:	9b01      	ldr	r3, [sp, #4]
                    compare_weight = maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight;
 800ad44:	1e4f      	subs	r7, r1, #1
 800ad46:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 800ad4a:	193a      	adds	r2, r7, r4
 800ad4c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800ad50:	f104 0c5a 	add.w	ip, r4, #90	; 0x5a
 800ad54:	4467      	add	r7, ip
                    compare_weight = maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight;
 800ad56:	f8b2 02d2 	ldrh.w	r0, [r2, #722]	; 0x2d2
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800ad5a:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800ad5e:	46c4      	mov	ip, r8
                }
            }
        }
        //北側に斜めが2方向
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ad60:	2c07      	cmp	r4, #7
 800ad62:	d856      	bhi.n	800ae12 <getNextNode+0x22e>
        {
            //北東へ
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800ad64:	1c62      	adds	r2, r4, #1
 800ad66:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 800ad6a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 800ad6e:	f815 903e 	ldrb.w	r9, [r5, lr, lsl #3]
 800ad72:	ea19 0f03 	tst.w	r9, r3
 800ad76:	d106      	bne.n	800ad86 <getNextNode+0x1a2>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800ad78:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 800ad7c:	f8be e002 	ldrh.w	lr, [lr, #2]
 800ad80:	4586      	cmp	lr, r0
 800ad82:	f0c0 80be 	bcc.w	800af02 <getNextNode+0x31e>
                    flag = true;
                }
            }
            
            //北西へ
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800ad86:	f101 3eff 	add.w	lr, r1, #4294967295
 800ad8a:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 800ad8e:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 800ad92:	f815 e032 	ldrb.w	lr, [r5, r2, lsl #3]
 800ad96:	ea1e 0f03 	tst.w	lr, r3
 800ad9a:	d105      	bne.n	800ada8 <getNextNode+0x1c4>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800ad9c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800ada0:	8852      	ldrh	r2, [r2, #2]
 800ada2:	4282      	cmp	r2, r0
 800ada4:	f0c0 8095 	bcc.w	800aed2 <getNextNode+0x2ee>
                }
            }
        }

        //南へ側に斜めが2方向
        if(now_node->pos.y > 0)						//範囲チェック
 800ada8:	bb9c      	cbnz	r4, 800ae12 <getNextNode+0x22e>
            }
        }
    }
    //next_node = now_node;
    //printf("ノード更新無し\r\n\r\n");
    if(flag == true)
 800adaa:	f1bc 0f00 	cmp.w	ip, #0
 800adae:	d103      	bne.n	800adb8 <getNextNode+0x1d4>
        return next_node; 
    }
    if(flag == false)
    {

    	ChangeLED(1);
 800adb0:	2001      	movs	r0, #1
 800adb2:	f002 ff29 	bl	800dc08 <ChangeLED>
#if DEBUG_ON
    	printf("ノード更新無し\r\n\r\n");
#endif

        return now_node;//万が一更新されなかったら、今いるノードが目標ノードなので、停止するはず。
 800adb6:	4637      	mov	r7, r6
        //停止しなかった。前回の情報がそのまま反映されるだけ
    }
    return now_node; //
        
}
 800adb8:	4638      	mov	r0, r7
 800adba:	b003      	add	sp, #12
 800adbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)	//壁がなければ
 800adc0:	448c      	add	ip, r1
 800adc2:	eb0e 0c4c 	add.w	ip, lr, ip, lsl #1
 800adc6:	f815 203c 	ldrb.w	r2, [r5, ip, lsl #3]
 800adca:	421a      	tst	r2, r3
 800adcc:	f47f af42 	bne.w	800ac54 <getNextNode+0x70>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800add0:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 800add4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800add8:	4282      	cmp	r2, r0
 800adda:	f4bf af3b 	bcs.w	800ac54 <getNextNode+0x70>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
 800adde:	270a      	movs	r7, #10
 800ade0:	fb17 e701 	smlabb	r7, r7, r1, lr
 800ade4:	4610      	mov	r0, r2
 800ade6:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800adea:	f04f 0801 	mov.w	r8, #1
 800adee:	e731      	b.n	800ac54 <getNextNode+0x70>
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800adf0:	1c4a      	adds	r2, r1, #1
 800adf2:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800adf6:	4422      	add	r2, r4
 800adf8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800adfc:	f892 c2d0 	ldrb.w	ip, [r2, #720]	; 0x2d0
 800ae00:	ea1c 0c03 	ands.w	ip, ip, r3
 800ae04:	d04b      	beq.n	800ae9e <getNextNode+0x2ba>
    _Bool flag=false;
 800ae06:	f04f 0c00 	mov.w	ip, #0
        if(now_node->pos.x > 1)						//範囲チェック
 800ae0a:	2901      	cmp	r1, #1
 800ae0c:	d884      	bhi.n	800ad18 <getNextNode+0x134>
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ae0e:	2c07      	cmp	r4, #7
 800ae10:	d9a8      	bls.n	800ad64 <getNextNode+0x180>
 800ae12:	f101 3eff 	add.w	lr, r1, #4294967295
 800ae16:	ea4f 098e 	mov.w	r9, lr, lsl #2
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ae1a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ae1e:	eb09 020e 	add.w	r2, r9, lr
 800ae22:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800ae26:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800ae2a:	f815 8031 	ldrb.w	r8, [r5, r1, lsl #3]
 800ae2e:	f815 a032 	ldrb.w	sl, [r5, r2, lsl #3]
 800ae32:	ea18 0f03 	tst.w	r8, r3
 800ae36:	ea0a 0a03 	and.w	sl, sl, r3
 800ae3a:	d114      	bne.n	800ae66 <getNextNode+0x282>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800ae3c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800ae40:	884b      	ldrh	r3, [r1, #2]
 800ae42:	4283      	cmp	r3, r0
 800ae44:	d20f      	bcs.n	800ae66 <getNextNode+0x282>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y]);
 800ae46:	460f      	mov	r7, r1
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ae48:	f1ba 0f00 	cmp.w	sl, #0
 800ae4c:	d1b4      	bne.n	800adb8 <getNextNode+0x1d4>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800ae4e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800ae52:	8852      	ldrh	r2, [r2, #2]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d2af      	bcs.n	800adb8 <getNextNode+0x1d4>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y]);
 800ae58:	eb09 070e 	add.w	r7, r9, lr
 800ae5c:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 800ae60:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 800ae64:	e7a8      	b.n	800adb8 <getNextNode+0x1d4>
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ae66:	f1ba 0f00 	cmp.w	sl, #0
 800ae6a:	d19e      	bne.n	800adaa <getNextNode+0x1c6>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800ae6c:	eb09 030e 	add.w	r3, r9, lr
 800ae70:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ae74:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800ae78:	885b      	ldrh	r3, [r3, #2]
 800ae7a:	4283      	cmp	r3, r0
 800ae7c:	d295      	bcs.n	800adaa <getNextNode+0x1c6>
 800ae7e:	e7eb      	b.n	800ae58 <getNextNode+0x274>
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800ae80:	f1ba 0f00 	cmp.w	sl, #0
 800ae84:	d104      	bne.n	800ae90 <getNextNode+0x2ac>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800ae86:	f8bc 32d2 	ldrh.w	r3, [ip, #722]	; 0x2d2
 800ae8a:	4283      	cmp	r3, r0
 800ae8c:	f4ff af3a 	bcc.w	800ad04 <getNextNode+0x120>
 800ae90:	46c4      	mov	ip, r8
 800ae92:	e78a      	b.n	800adaa <getNextNode+0x1c6>
        if(now_node->pos.x > 0)						//範囲チェック
 800ae94:	2900      	cmp	r1, #0
 800ae96:	f47f af11 	bne.w	800acbc <getNextNode+0xd8>
 800ae9a:	46c4      	mov	ip, r8
 800ae9c:	e785      	b.n	800adaa <getNextNode+0x1c6>
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800ae9e:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800aea2:	4282      	cmp	r2, r0
 800aea4:	d2b1      	bcs.n	800ae0a <getNextNode+0x226>
                    ChangeLED(2);
 800aea6:	2002      	movs	r0, #2
 800aea8:	9301      	str	r3, [sp, #4]
 800aeaa:	f002 fead 	bl	800dc08 <ChangeLED>
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
 800aeae:	79b1      	ldrb	r1, [r6, #6]
 800aeb0:	79f4      	ldrb	r4, [r6, #7]
 800aeb2:	9b01      	ldr	r3, [sp, #4]
 800aeb4:	1c4a      	adds	r2, r1, #1
 800aeb6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800aeba:	1910      	adds	r0, r2, r4
 800aebc:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800aec0:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800aec4:	4417      	add	r7, r2
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
 800aec6:	f8b0 02d2 	ldrh.w	r0, [r0, #722]	; 0x2d2
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800aeca:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800aece:	46c4      	mov	ip, r8
 800aed0:	e79b      	b.n	800ae0a <getNextNode+0x226>
                    ChangeLED(5);
 800aed2:	2005      	movs	r0, #5
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	f002 fe97 	bl	800dc08 <ChangeLED>
                    compare_weight = maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight;
 800aeda:	79b1      	ldrb	r1, [r6, #6]
 800aedc:	79f4      	ldrb	r4, [r6, #7]
 800aede:	f101 3eff 	add.w	lr, r1, #4294967295
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800aee2:	ea4f 098e 	mov.w	r9, lr, lsl #2
 800aee6:	eb09 020e 	add.w	r2, r9, lr
                    compare_weight = maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight;
 800aeea:	1c67      	adds	r7, r4, #1
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800aeec:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800aef0:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
        if(now_node->pos.y > 0)						//範囲チェック
 800aef4:	2c00      	cmp	r4, #0
 800aef6:	f43f af5f 	beq.w	800adb8 <getNextNode+0x1d4>
                    flag = true;
 800aefa:	46c4      	mov	ip, r8
                    compare_weight = maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight;
 800aefc:	8878      	ldrh	r0, [r7, #2]
 800aefe:	9b01      	ldr	r3, [sp, #4]
 800af00:	e78b      	b.n	800ae1a <getNextNode+0x236>
                	ChangeLED(4);
 800af02:	2004      	movs	r0, #4
 800af04:	9301      	str	r3, [sp, #4]
 800af06:	f002 fe7f 	bl	800dc08 <ChangeLED>
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
 800af0a:	79b1      	ldrb	r1, [r6, #6]
 800af0c:	79f4      	ldrb	r4, [r6, #7]
                    flag = true;
 800af0e:	9b01      	ldr	r3, [sp, #4]
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
 800af10:	1c62      	adds	r2, r4, #1
 800af12:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800af16:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800af1a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800af1e:	270a      	movs	r7, #10
 800af20:	fb17 2701 	smlabb	r7, r7, r1, r2
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
 800af24:	8840      	ldrh	r0, [r0, #2]
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800af26:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800af2a:	46c4      	mov	ip, r8
 800af2c:	e72b      	b.n	800ad86 <getNextNode+0x1a2>
 800af2e:	bf00      	nop
 800af30:	20000004 	.word	0x20000004

0800af34 <judgeAccelorNot>:
	uint16_t compare_weight=0;
	compare_weight = now_node->weight;

	_Bool flag=false;
	//現ノードから3方向ノードを見て、未知なら即return
	if(now_node->rc == 0)
 800af34:	7953      	ldrb	r3, [r2, #5]
{
 800af36:	b4f0      	push	{r4, r5, r6, r7}
	compare_weight = now_node->weight;
 800af38:	8854      	ldrh	r4, [r2, #2]
	if(now_node->rc == 0)
 800af3a:	bba3      	cbnz	r3, 800afa6 <judgeAccelorNot+0x72>
	{
		switch(car)
 800af3c:	2900      	cmp	r1, #0
 800af3e:	f000 8090 	beq.w	800b062 <judgeAccelorNot+0x12e>
 800af42:	2904      	cmp	r1, #4
 800af44:	d12c      	bne.n	800afa0 <judgeAccelorNot+0x6c>
	            }
	        }
	        break;
		case south:
			//南へ
			if(now_node->pos.y > 1)						//範囲チェック
 800af46:	79d1      	ldrb	r1, [r2, #7]
 800af48:	7992      	ldrb	r2, [r2, #6]
 800af4a:	2901      	cmp	r1, #1
 800af4c:	f101 35ff 	add.w	r5, r1, #4294967295
 800af50:	d90e      	bls.n	800af70 <judgeAccelorNot+0x3c>
			{
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)	//壁がなければ
 800af52:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800af56:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800af5a:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800af5e:	2e02      	cmp	r6, #2
 800af60:	d01e      	beq.n	800afa0 <judgeAccelorNot+0x6c>
				{
					return false;
				}
					//重みを比較して更新
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)
 800af62:	b92e      	cbnz	r6, 800af70 <judgeAccelorNot+0x3c>
				{
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800af64:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800af68:	8849      	ldrh	r1, [r1, #2]
 800af6a:	42a1      	cmp	r1, r4
 800af6c:	f0c0 80bc 	bcc.w	800b0e8 <judgeAccelorNot+0x1b4>
	_Bool flag=false;
 800af70:	461e      	mov	r6, r3
//						next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
						flag = true;
					}
				}
			}
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800af72:	2a07      	cmp	r2, #7
 800af74:	f200 8084 	bhi.w	800b080 <judgeAccelorNot+0x14c>
			{
				//南へ東へ
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800af78:	1c51      	adds	r1, r2, #1
 800af7a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800af7e:	4429      	add	r1, r5
 800af80:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800af84:	f891 72d0 	ldrb.w	r7, [r1, #720]	; 0x2d0
 800af88:	2f02      	cmp	r7, #2
 800af8a:	d009      	beq.n	800afa0 <judgeAccelorNot+0x6c>
				{
					return false;
				}
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800af8c:	b92f      	cbnz	r7, 800af9a <judgeAccelorNot+0x66>
				{
					//重みを比較して更新
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800af8e:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800af92:	42a1      	cmp	r1, r4
					{
						compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
//						next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
						flag = false;
 800af94:	bf3c      	itt	cc
 800af96:	463e      	movcc	r6, r7
 800af98:	460c      	movcc	r4, r1
					}
				}
			}
			if(now_node->pos.x > 0)						//範囲チェック
 800af9a:	2a00      	cmp	r2, #0
 800af9c:	d170      	bne.n	800b080 <judgeAccelorNot+0x14c>
 800af9e:	4633      	mov	r3, r6
	}
	return flag; //壁が全部あるときもfalseになっている
	//未知があった時点でreturn false
	//直進かどうかまで見て、直進でなければfalse
	//既知でかつ直進ならtrue
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	bcf0      	pop	{r4, r5, r6, r7}
 800afa4:	4770      	bx	lr
		switch(car)
 800afa6:	2902      	cmp	r1, #2
 800afa8:	d03a      	beq.n	800b020 <judgeAccelorNot+0xec>
 800afaa:	2906      	cmp	r1, #6
 800afac:	d155      	bne.n	800b05a <judgeAccelorNot+0x126>
			if(now_node->pos.x > 1)						//範囲チェック
 800afae:	7991      	ldrb	r1, [r2, #6]
 800afb0:	79d2      	ldrb	r2, [r2, #7]
 800afb2:	2901      	cmp	r1, #1
 800afb4:	f101 35ff 	add.w	r5, r1, #4294967295
 800afb8:	d90b      	bls.n	800afd2 <judgeAccelorNot+0x9e>
 800afba:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800afbe:	4411      	add	r1, r2
 800afc0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
				if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) ==UNKNOWN)	//壁がなければ
 800afc4:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800afc8:	2e02      	cmp	r6, #2
 800afca:	d046      	beq.n	800b05a <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ
 800afcc:	2e00      	cmp	r6, #0
 800afce:	f000 8084 	beq.w	800b0da <judgeAccelorNot+0x1a6>
	_Bool flag=false;
 800afd2:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800afd4:	2a07      	cmp	r2, #7
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800afd6:	ea4f 0185 	mov.w	r1, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800afda:	d811      	bhi.n	800b000 <judgeAccelorNot+0xcc>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800afdc:	194f      	adds	r7, r1, r5
 800afde:	1c56      	adds	r6, r2, #1
 800afe0:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800afe4:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800afe8:	2f02      	cmp	r7, #2
 800afea:	d036      	beq.n	800b05a <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800afec:	b937      	cbnz	r7, 800affc <judgeAccelorNot+0xc8>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800afee:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800aff2:	8876      	ldrh	r6, [r6, #2]
 800aff4:	42a6      	cmp	r6, r4
 800aff6:	bf3c      	itt	cc
 800aff8:	4634      	movcc	r4, r6
						flag = false;
 800affa:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800affc:	2a00      	cmp	r2, #0
 800affe:	d0cf      	beq.n	800afa0 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b000:	440d      	add	r5, r1
 800b002:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 800b006:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800b00a:	2902      	cmp	r1, #2
 800b00c:	d025      	beq.n	800b05a <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b00e:	2900      	cmp	r1, #0
 800b010:	d1c6      	bne.n	800afa0 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b012:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800b016:	8842      	ldrh	r2, [r0, #2]
	                    flag = false;
 800b018:	42a2      	cmp	r2, r4
 800b01a:	bf38      	it	cc
 800b01c:	2300      	movcc	r3, #0
 800b01e:	e7bf      	b.n	800afa0 <judgeAccelorNot+0x6c>
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b020:	7995      	ldrb	r5, [r2, #6]
 800b022:	79d1      	ldrb	r1, [r2, #7]
 800b024:	2d07      	cmp	r5, #7
 800b026:	d80b      	bhi.n	800b040 <judgeAccelorNot+0x10c>
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b028:	1c6a      	adds	r2, r5, #1
 800b02a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800b02e:	440a      	add	r2, r1
 800b030:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800b034:	f892 62d0 	ldrb.w	r6, [r2, #720]	; 0x2d0
 800b038:	2e02      	cmp	r6, #2
 800b03a:	d00e      	beq.n	800b05a <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b03c:	2e00      	cmp	r6, #0
 800b03e:	d056      	beq.n	800b0ee <judgeAccelorNot+0x1ba>
	_Bool flag=false;
 800b040:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b042:	2907      	cmp	r1, #7
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b044:	ea4f 0285 	mov.w	r2, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b048:	d836      	bhi.n	800b0b8 <judgeAccelorNot+0x184>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b04a:	1957      	adds	r7, r2, r5
 800b04c:	1c4e      	adds	r6, r1, #1
 800b04e:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800b052:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800b056:	2f02      	cmp	r7, #2
 800b058:	d123      	bne.n	800b0a2 <judgeAccelorNot+0x16e>
	                    flag = false;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	bcf0      	pop	{r4, r5, r6, r7}
 800b060:	4770      	bx	lr
	        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b062:	79d5      	ldrb	r5, [r2, #7]
 800b064:	7992      	ldrb	r2, [r2, #6]
 800b066:	2d07      	cmp	r5, #7
 800b068:	d882      	bhi.n	800af70 <judgeAccelorNot+0x3c>
	            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b06a:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800b06e:	1c69      	adds	r1, r5, #1
 800b070:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800b074:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800b078:	2e02      	cmp	r6, #2
 800b07a:	f47f af72 	bne.w	800af62 <judgeAccelorNot+0x2e>
 800b07e:	e78f      	b.n	800afa0 <judgeAccelorNot+0x6c>
 800b080:	2109      	movs	r1, #9
 800b082:	fb11 5202 	smlabb	r2, r1, r2, r5
 800b086:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
				if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800b08a:	f890 22d0 	ldrb.w	r2, [r0, #720]	; 0x2d0
 800b08e:	2a02      	cmp	r2, #2
 800b090:	d086      	beq.n	800afa0 <judgeAccelorNot+0x6c>
				else if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b092:	2a00      	cmp	r2, #0
 800b094:	d183      	bne.n	800af9e <judgeAccelorNot+0x6a>
					if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b096:	f8b0 22d2 	ldrh.w	r2, [r0, #722]	; 0x2d2
 800b09a:	42a2      	cmp	r2, r4
 800b09c:	bf28      	it	cs
 800b09e:	4633      	movcs	r3, r6
 800b0a0:	e77e      	b.n	800afa0 <judgeAccelorNot+0x6c>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800b0a2:	b937      	cbnz	r7, 800b0b2 <judgeAccelorNot+0x17e>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b0a4:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b0a8:	8876      	ldrh	r6, [r6, #2]
 800b0aa:	42a6      	cmp	r6, r4
 800b0ac:	bf3c      	itt	cc
 800b0ae:	4634      	movcc	r4, r6
						flag = false;
 800b0b0:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800b0b2:	2900      	cmp	r1, #0
 800b0b4:	f43f af74 	beq.w	800afa0 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b0b8:	4415      	add	r5, r2
 800b0ba:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800b0be:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 800b0c2:	2a02      	cmp	r2, #2
 800b0c4:	d0c9      	beq.n	800b05a <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b0c6:	2a00      	cmp	r2, #0
 800b0c8:	f47f af6a 	bne.w	800afa0 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800b0cc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b0d0:	884a      	ldrh	r2, [r1, #2]
	                    flag = false;
 800b0d2:	42a2      	cmp	r2, r4
 800b0d4:	bf38      	it	cc
 800b0d6:	2300      	movcc	r3, #0
 800b0d8:	e762      	b.n	800afa0 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b0da:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800b0de:	42a1      	cmp	r1, r4
 800b0e0:	f4bf af77 	bcs.w	800afd2 <judgeAccelorNot+0x9e>
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	e775      	b.n	800afd4 <judgeAccelorNot+0xa0>
 800b0e8:	460c      	mov	r4, r1
						flag = true;
 800b0ea:	2601      	movs	r6, #1
 800b0ec:	e741      	b.n	800af72 <judgeAccelorNot+0x3e>
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b0ee:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800b0f2:	42a2      	cmp	r2, r4
 800b0f4:	d2a4      	bcs.n	800b040 <judgeAccelorNot+0x10c>
 800b0f6:	4614      	mov	r4, r2
 800b0f8:	e7a3      	b.n	800b042 <judgeAccelorNot+0x10e>
 800b0fa:	bf00      	nop

0800b0fc <getNextState>:
//自分の状態から次の状態を得る
state *getNextState(state *now_state, state *next_state, node *next_node)
{
 800b0fc:	b4f0      	push	{r4, r5, r6, r7}
 800b0fe:	4603      	mov	r3, r0
    //state *next_state;
    //差分を見て、次の状態を定義
    //状態の種類に応じて後で追加:探索時と最短時、既知区間走行でうまく変える
    //ノードと方角と座標を使って、次の方角と座標を得る
    
    uint8_t now_x = now_state->node->pos.x;
 800b100:	6880      	ldr	r0, [r0, #8]
    uint8_t now_y = now_state->node->pos.y;
    uint8_t next_x = next_node->pos.x; 
    uint8_t next_y = next_node->pos.y;
    
    switch(now_state->car)
 800b102:	789c      	ldrb	r4, [r3, #2]
    uint8_t now_x = now_state->node->pos.x;
 800b104:	7985      	ldrb	r5, [r0, #6]
    uint8_t now_y = now_state->node->pos.y;
 800b106:	79c6      	ldrb	r6, [r0, #7]
    uint8_t next_y = next_node->pos.y;
 800b108:	79d7      	ldrb	r7, [r2, #7]
    uint8_t next_x = next_node->pos.x; 
 800b10a:	7990      	ldrb	r0, [r2, #6]
    switch(now_state->car)
 800b10c:	2c06      	cmp	r4, #6
 800b10e:	d81e      	bhi.n	800b14e <getNextState+0x52>
 800b110:	e8df f004 	tbb	[pc, r4]
 800b114:	1d4d1d04 	.word	0x1d4d1d04
 800b118:	1d34      	.short	0x1d34
 800b11a:	20          	.byte	0x20
 800b11b:	00          	.byte	0x00
    {
        case north://行から、列に行くのか行に行くのかで、差分の取り方を変える
            if(next_node->rc == 0)
 800b11c:	7952      	ldrb	r2, [r2, #5]
 800b11e:	2a00      	cmp	r2, #0
 800b120:	d058      	beq.n	800b1d4 <getNextState+0xd8>
            if(next_node->rc == 1)
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //北向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b122:	1c6a      	adds	r2, r5, #1
 800b124:	4282      	cmp	r2, r0
 800b126:	f000 80c3 	beq.w	800b2b0 <getNextState+0x1b4>
                    return next_state;
                }

                //左旋回
                //北向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b12a:	4285      	cmp	r5, r0
 800b12c:	d10f      	bne.n	800b14e <getNextState+0x52>
 800b12e:	42be      	cmp	r6, r7
 800b130:	f000 8120 	beq.w	800b374 <getNextState+0x278>
 800b134:	3e01      	subs	r6, #1
                    return next_state;
                }

                //Uターンして右旋回
                //北向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b136:	42be      	cmp	r6, r7
 800b138:	d109      	bne.n	800b14e <getNextState+0x52>
                {
                    next_state->car = west;
 800b13a:	2206      	movs	r2, #6
 800b13c:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b13e:	781a      	ldrb	r2, [r3, #0]
 800b140:	3a01      	subs	r2, #1
                //Uターンして右旋回
                //西向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
                {
                    next_state->car = south;
                    next_state->pos.x = now_state->pos.x + 1;
 800b142:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b144:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800b146:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y - 1;
 800b148:	3b01      	subs	r3, #1
 800b14a:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800b14c:	70ca      	strb	r2, [r1, #3]
#if DEBUG_ON
    printf("エラー in function 'getNextState'.\r\n");
#endif

    return next_state; //ここまで来てしまったらエラー
}
 800b14e:	4608      	mov	r0, r1
 800b150:	bcf0      	pop	{r4, r5, r6, r7}
 800b152:	4770      	bx	lr
            if(next_node->rc == 1)
 800b154:	7952      	ldrb	r2, [r2, #5]
 800b156:	1e6c      	subs	r4, r5, #1
 800b158:	2a00      	cmp	r2, #0
 800b15a:	d05c      	beq.n	800b216 <getNextState+0x11a>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b15c:	4284      	cmp	r4, r0
 800b15e:	f000 808f 	beq.w	800b280 <getNextState+0x184>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b162:	3501      	adds	r5, #1
 800b164:	42a8      	cmp	r0, r5
 800b166:	d1f2      	bne.n	800b14e <getNextState+0x52>
 800b168:	42be      	cmp	r6, r7
 800b16a:	d1f0      	bne.n	800b14e <getNextState+0x52>
                    next_state->car = east;
 800b16c:	2202      	movs	r2, #2
 800b16e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 2;
 800b170:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = back;
 800b172:	2203      	movs	r2, #3
                    next_state->pos.x = now_state->pos.x + 2;
 800b174:	3302      	adds	r3, #2
 800b176:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800b178:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b17a:	e7e8      	b.n	800b14e <getNextState+0x52>
            if(next_node->rc == 0)
 800b17c:	7952      	ldrb	r2, [r2, #5]
 800b17e:	2a00      	cmp	r2, #0
 800b180:	d039      	beq.n	800b1f6 <getNextState+0xfa>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b182:	4285      	cmp	r5, r0
 800b184:	f000 80a9 	beq.w	800b2da <getNextState+0x1de>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b188:	3501      	adds	r5, #1
 800b18a:	42a8      	cmp	r0, r5
 800b18c:	d1df      	bne.n	800b14e <getNextState+0x52>
 800b18e:	1e72      	subs	r2, r6, #1
 800b190:	42ba      	cmp	r2, r7
 800b192:	f000 80e7 	beq.w	800b364 <getNextState+0x268>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b196:	42be      	cmp	r6, r7
 800b198:	d1d9      	bne.n	800b14e <getNextState+0x52>
                    next_state->car = east;
 800b19a:	2002      	movs	r0, #2
 800b19c:	7088      	strb	r0, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	3201      	adds	r2, #1
 800b1a2:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b1a4:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800b1a6:	70c8      	strb	r0, [r1, #3]
                    next_state->pos.y = now_state->pos.y + 1;
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b1ac:	e7cf      	b.n	800b14e <getNextState+0x52>
            if(next_node->rc == 1)
 800b1ae:	7952      	ldrb	r2, [r2, #5]
 800b1b0:	2a00      	cmp	r2, #0
 800b1b2:	d044      	beq.n	800b23e <getNextState+0x142>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b1b4:	1c6a      	adds	r2, r5, #1
 800b1b6:	4282      	cmp	r2, r0
 800b1b8:	d057      	beq.n	800b26a <getNextState+0x16e>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b1ba:	3d01      	subs	r5, #1
 800b1bc:	42a8      	cmp	r0, r5
 800b1be:	d1c6      	bne.n	800b14e <getNextState+0x52>
 800b1c0:	42be      	cmp	r6, r7
 800b1c2:	d1c4      	bne.n	800b14e <getNextState+0x52>
                    next_state->car = west;
 800b1c4:	2206      	movs	r2, #6
 800b1c6:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b1c8:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = back;
 800b1ca:	2203      	movs	r2, #3
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b1cc:	3b02      	subs	r3, #2
 800b1ce:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800b1d0:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b1d2:	e7bc      	b.n	800b14e <getNextState+0x52>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b1d4:	4285      	cmp	r5, r0
 800b1d6:	d1ba      	bne.n	800b14e <getNextState+0x52>
 800b1d8:	1c70      	adds	r0, r6, #1
 800b1da:	42b8      	cmp	r0, r7
 800b1dc:	f000 809d 	beq.w	800b31a <getNextState+0x21e>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b1e0:	3e01      	subs	r6, #1
 800b1e2:	42b7      	cmp	r7, r6
 800b1e4:	d1b3      	bne.n	800b14e <getNextState+0x52>
                    next_state->car = south;
 800b1e6:	2204      	movs	r2, #4
 800b1e8:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b1ea:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = back;
 800b1ec:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b1ee:	3b02      	subs	r3, #2
 800b1f0:	704b      	strb	r3, [r1, #1]
                    next_state->dir = back;
 800b1f2:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b1f4:	e7ab      	b.n	800b14e <getNextState+0x52>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b1f6:	4285      	cmp	r5, r0
 800b1f8:	d1a9      	bne.n	800b14e <getNextState+0x52>
 800b1fa:	1e70      	subs	r0, r6, #1
 800b1fc:	42b8      	cmp	r0, r7
 800b1fe:	f000 8085 	beq.w	800b30c <getNextState+0x210>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b202:	3601      	adds	r6, #1
 800b204:	42b7      	cmp	r7, r6
 800b206:	d1a2      	bne.n	800b14e <getNextState+0x52>
                    next_state->car = north;
 800b208:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 2;
 800b20a:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = back;
 800b20c:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y + 2;
 800b20e:	3302      	adds	r3, #2
 800b210:	704b      	strb	r3, [r1, #1]
                    next_state->dir = back;
 800b212:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b214:	e79b      	b.n	800b14e <getNextState+0x52>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b216:	4284      	cmp	r4, r0
 800b218:	d06a      	beq.n	800b2f0 <getNextState+0x1f4>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b21a:	4285      	cmp	r5, r0
 800b21c:	d197      	bne.n	800b14e <getNextState+0x52>
 800b21e:	42be      	cmp	r6, r7
 800b220:	f000 80ba 	beq.w	800b398 <getNextState+0x29c>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b224:	3601      	adds	r6, #1
 800b226:	42be      	cmp	r6, r7
 800b228:	d191      	bne.n	800b14e <getNextState+0x52>
                    next_state->car = north;
 800b22a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b22c:	781a      	ldrb	r2, [r3, #0]
 800b22e:	3201      	adds	r2, #1
 800b230:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b232:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800b234:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y + 1;
 800b236:	3301      	adds	r3, #1
 800b238:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800b23a:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b23c:	e787      	b.n	800b14e <getNextState+0x52>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b23e:	4285      	cmp	r5, r0
 800b240:	d029      	beq.n	800b296 <getNextState+0x19a>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b242:	3d01      	subs	r5, #1
 800b244:	4285      	cmp	r5, r0
 800b246:	d182      	bne.n	800b14e <getNextState+0x52>
 800b248:	1c70      	adds	r0, r6, #1
 800b24a:	42b8      	cmp	r0, r7
 800b24c:	f000 809a 	beq.w	800b384 <getNextState+0x288>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b250:	42be      	cmp	r6, r7
 800b252:	f47f af7c 	bne.w	800b14e <getNextState+0x52>
                    next_state->car = south;
 800b256:	2004      	movs	r0, #4
 800b258:	7088      	strb	r0, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b25a:	781a      	ldrb	r2, [r3, #0]
 800b25c:	3a01      	subs	r2, #1
 800b25e:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b260:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800b262:	70c8      	strb	r0, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 1;
 800b264:	3b01      	subs	r3, #1
 800b266:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b268:	e771      	b.n	800b14e <getNextState+0x52>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b26a:	42be      	cmp	r6, r7
 800b26c:	f47f af6f 	bne.w	800b14e <getNextState+0x52>
                    next_state->car = east;
 800b270:	2202      	movs	r2, #2
 800b272:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b274:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = front;
 800b276:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x + 1;
 800b278:	3301      	adds	r3, #1
 800b27a:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b27c:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b27e:	e766      	b.n	800b14e <getNextState+0x52>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b280:	42be      	cmp	r6, r7
 800b282:	f47f af64 	bne.w	800b14e <getNextState+0x52>
                    next_state->car = west;
 800b286:	2206      	movs	r2, #6
 800b288:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b28a:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = front;
 800b28c:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b28e:	3b01      	subs	r3, #1
 800b290:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b292:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b294:	e75b      	b.n	800b14e <getNextState+0x52>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b296:	42be      	cmp	r6, r7
 800b298:	d054      	beq.n	800b344 <getNextState+0x248>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b29a:	3601      	adds	r6, #1
 800b29c:	42be      	cmp	r6, r7
 800b29e:	f47f af56 	bne.w	800b14e <getNextState+0x52>
                    next_state->car = north;
 800b2a2:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b2a4:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = left;
 800b2a6:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y + 1;
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b2ac:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b2ae:	e74e      	b.n	800b14e <getNextState+0x52>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b2b0:	42be      	cmp	r6, r7
 800b2b2:	d038      	beq.n	800b326 <getNextState+0x22a>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b2b4:	4285      	cmp	r5, r0
 800b2b6:	f106 36ff 	add.w	r6, r6, #4294967295
 800b2ba:	f43f af3c 	beq.w	800b136 <getNextState+0x3a>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b2be:	42be      	cmp	r6, r7
 800b2c0:	f47f af45 	bne.w	800b14e <getNextState+0x52>
                    next_state->car = east;
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b2c8:	781a      	ldrb	r2, [r3, #0]
 800b2ca:	3201      	adds	r2, #1
 800b2cc:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b2ce:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backleft;
 800b2d0:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y - 1;
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800b2d6:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b2d8:	e739      	b.n	800b14e <getNextState+0x52>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b2da:	1e72      	subs	r2, r6, #1
 800b2dc:	42ba      	cmp	r2, r7
 800b2de:	d039      	beq.n	800b354 <getNextState+0x258>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b2e0:	42be      	cmp	r6, r7
 800b2e2:	f47f af34 	bne.w	800b14e <getNextState+0x52>
                    next_state->car = west;
 800b2e6:	2206      	movs	r2, #6
 800b2e8:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b2ea:	781a      	ldrb	r2, [r3, #0]
 800b2ec:	3a01      	subs	r2, #1
 800b2ee:	e79f      	b.n	800b230 <getNextState+0x134>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b2f0:	1c70      	adds	r0, r6, #1
 800b2f2:	42b8      	cmp	r0, r7
 800b2f4:	d01f      	beq.n	800b336 <getNextState+0x23a>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b2f6:	42be      	cmp	r6, r7
 800b2f8:	f47f af29 	bne.w	800b14e <getNextState+0x52>
                    next_state->car = south;
 800b2fc:	2204      	movs	r2, #4
 800b2fe:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b300:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = left;
 800b302:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y - 1;
 800b304:	3b01      	subs	r3, #1
 800b306:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b308:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b30a:	e720      	b.n	800b14e <getNextState+0x52>
                    next_state->car = south;
 800b30c:	2004      	movs	r0, #4
 800b30e:	7088      	strb	r0, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b310:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = front;
 800b312:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b314:	3b01      	subs	r3, #1
 800b316:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b318:	e719      	b.n	800b14e <getNextState+0x52>
                    next_state->car = north;
 800b31a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b31c:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = front;
 800b31e:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.y = now_state->pos.y + 1;
 800b320:	3301      	adds	r3, #1
 800b322:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b324:	e713      	b.n	800b14e <getNextState+0x52>
                    next_state->car = east;
 800b326:	2202      	movs	r2, #2
 800b328:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b32a:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = right;
 800b32c:	2201      	movs	r2, #1
                    next_state->pos.x = now_state->pos.x + 1;
 800b32e:	4413      	add	r3, r2
 800b330:	700b      	strb	r3, [r1, #0]
                    next_state->dir = right;
 800b332:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b334:	e70b      	b.n	800b14e <getNextState+0x52>
                    next_state->car = north;
 800b336:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b338:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = right;
 800b33a:	2201      	movs	r2, #1
                    next_state->pos.y = now_state->pos.y + 1;
 800b33c:	4413      	add	r3, r2
 800b33e:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b340:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b342:	e704      	b.n	800b14e <getNextState+0x52>
                    next_state->car = south;
 800b344:	2204      	movs	r2, #4
 800b346:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b348:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = right;
 800b34a:	2201      	movs	r2, #1
                    next_state->pos.y = now_state->pos.y - 1;
 800b34c:	3b01      	subs	r3, #1
 800b34e:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b350:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b352:	e6fc      	b.n	800b14e <getNextState+0x52>
                    next_state->car = west;
 800b354:	2206      	movs	r2, #6
 800b356:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b358:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = right;
 800b35a:	2201      	movs	r2, #1
                    next_state->pos.x = now_state->pos.x - 1;
 800b35c:	3b01      	subs	r3, #1
 800b35e:	700b      	strb	r3, [r1, #0]
                    next_state->dir = right;
 800b360:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b362:	e6f4      	b.n	800b14e <getNextState+0x52>
                    next_state->car = east;
 800b364:	2202      	movs	r2, #2
 800b366:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b368:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = left;
 800b36a:	2205      	movs	r2, #5
                    next_state->pos.x = now_state->pos.x + 1;
 800b36c:	3301      	adds	r3, #1
 800b36e:	700b      	strb	r3, [r1, #0]
                    next_state->dir = left;
 800b370:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b372:	e6ec      	b.n	800b14e <getNextState+0x52>
                    next_state->car = west;
 800b374:	2206      	movs	r2, #6
 800b376:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b378:	781b      	ldrb	r3, [r3, #0]
                    next_state->dir = left;
 800b37a:	2205      	movs	r2, #5
                    next_state->pos.x = now_state->pos.x - 1;
 800b37c:	3b01      	subs	r3, #1
 800b37e:	700b      	strb	r3, [r1, #0]
                    next_state->dir = left;
 800b380:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b382:	e6e4      	b.n	800b14e <getNextState+0x52>
                    next_state->car = north;
 800b384:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b386:	781a      	ldrb	r2, [r3, #0]
 800b388:	3a01      	subs	r2, #1
 800b38a:	700a      	strb	r2, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b38c:	785b      	ldrb	r3, [r3, #1]
                    next_state->dir = backright;
 800b38e:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y + 1;
 800b390:	3301      	adds	r3, #1
 800b392:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800b394:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b396:	e6da      	b.n	800b14e <getNextState+0x52>
                    next_state->car = south;
 800b398:	2204      	movs	r2, #4
 800b39a:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b39c:	781a      	ldrb	r2, [r3, #0]
 800b39e:	3201      	adds	r2, #1
 800b3a0:	e6cf      	b.n	800b142 <getNextState+0x46>
 800b3a2:	bf00      	nop

0800b3a4 <initProfile>:
        // log_st[n].wall.west = WALL;
    }
    printf("い\r\n");
}
void initProfile(profile *prof, maze_node *maze)
{
 800b3a4:	b430      	push	{r4, r5}
    };
    setWallExistence(&(prof->now.wall), &w_st[0]);
    setWallExistence(&(prof->next.wall), &next[0]);

    prof->now.node = &(maze->RawNode[0][0]);
    prof->next.node = &(maze->RawNode[0][1]);
 800b3a6:	f101 0208 	add.w	r2, r1, #8
    pos->y = y;
 800b3aa:	2301      	movs	r3, #1
    existence->north = state[0];
 800b3ac:	2554      	movs	r5, #84	; 0x54
 800b3ae:	244a      	movs	r4, #74	; 0x4a
    prof->now.node = &(maze->RawNode[0][0]);
 800b3b0:	6101      	str	r1, [r0, #16]
    prof->next.node = &(maze->RawNode[0][1]);
 800b3b2:	61c2      	str	r2, [r0, #28]
    pos->x = x;
 800b3b4:	2107      	movs	r1, #7
 800b3b6:	2208      	movs	r2, #8
    pos->y = y;
 800b3b8:	7543      	strb	r3, [r0, #21]
    pos->x = x;
 800b3ba:	2300      	movs	r3, #0
    existence->north = state[0];
 800b3bc:	7305      	strb	r5, [r0, #12]
 800b3be:	7604      	strb	r4, [r0, #24]
    pos->x = x;
 800b3c0:	7001      	strb	r1, [r0, #0]
    pos->y = y;
 800b3c2:	7041      	strb	r1, [r0, #1]
    pos->x = x;
 800b3c4:	7082      	strb	r2, [r0, #2]
    pos->y = y;
 800b3c6:	70c2      	strb	r2, [r0, #3]
    pos->x = x;
 800b3c8:	7203      	strb	r3, [r0, #8]
    pos->y = y;
 800b3ca:	7243      	strb	r3, [r0, #9]
    st->car = car;
 800b3cc:	7283      	strb	r3, [r0, #10]
    pos->x = x;
 800b3ce:	7503      	strb	r3, [r0, #20]
    st->car = car;
 800b3d0:	7583      	strb	r3, [r0, #22]
    // prof->now.node->rc = 0;
    // prof->now.node->pos.x = 0;
    // prof->now.node->pos.y = 0;
}
 800b3d2:	bc30      	pop	{r4, r5}
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop

0800b3d8 <shiftState>:
void shiftState(profile *prof)
{
 800b3d8:	b410      	push	{r4}
    prof->now.car = prof->next.car;
    prof->now.pos.x = prof->next.pos.x;
 800b3da:	7d01      	ldrb	r1, [r0, #20]
    prof->now.car = prof->next.car;
 800b3dc:	7d84      	ldrb	r4, [r0, #22]
    prof->now.pos.y = prof->next.pos.y;
 800b3de:	7d42      	ldrb	r2, [r0, #21]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b3e0:	69c3      	ldr	r3, [r0, #28]
    prof->now.car = prof->next.car;
 800b3e2:	7284      	strb	r4, [r0, #10]
    prof->now.pos.x = prof->next.pos.x;
 800b3e4:	7201      	strb	r1, [r0, #8]
    prof->now.pos.y = prof->next.pos.y;
 800b3e6:	7242      	strb	r2, [r0, #9]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b3e8:	6103      	str	r3, [r0, #16]
}
 800b3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <InitExplore>:

	//ハード処理

}
void InitExplore()
{
 800b3f0:	b538      	push	{r3, r4, r5, lr}
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800b3f2:	2100      	movs	r1, #0
{
 800b3f4:	ed2d 8b04 	vpush	{d8-d9}
	PIDChangeFlag(L_VELO_PID, 0);
 800b3f8:	2004      	movs	r0, #4
 800b3fa:	f003 f92f 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b3fe:	2100      	movs	r1, #0
 800b400:	2005      	movs	r0, #5
 800b402:	f003 f92b 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b406:	2100      	movs	r1, #0
 800b408:	2002      	movs	r0, #2
 800b40a:	f003 f927 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b40e:	2100      	movs	r1, #0
 800b410:	2003      	movs	r0, #3
 800b412:	f003 f923 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b416:	2100      	movs	r1, #0
 800b418:	2001      	movs	r0, #1
 800b41a:	f003 f91f 	bl	800e65c <PIDChangeFlag>
//										printf("adc2[1] : %lu\r\n", adc2[1]);
//
//									}
//					Signal( 2 );
	Load_Gain();
					PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);
 800b41e:	eddf 8a5d 	vldr	s17, [pc, #372]	; 800b594 <InitExplore+0x1a4>
 800b422:	eddf 9a5d 	vldr	s19, [pc, #372]	; 800b598 <InitExplore+0x1a8>
 800b426:	ed9f 9a5d 	vldr	s18, [pc, #372]	; 800b59c <InitExplore+0x1ac>
							  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);

							  PIDSetGain(A_VELO_PID, 14.6,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800b42a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800b5a0 <InitExplore+0x1b0>
							  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
							  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);

	uint8_t imu_check;
	imu_check = IMU_init();
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b42e:	4c5d      	ldr	r4, [pc, #372]	; (800b5a4 <InitExplore+0x1b4>)
	}

#endif

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
 800b430:	4d5d      	ldr	r5, [pc, #372]	; (800b5a8 <InitExplore+0x1b8>)
	PIDChangeFlag(A_VELO_PID, 0);
 800b432:	2100      	movs	r1, #0
 800b434:	4608      	mov	r0, r1
 800b436:	f003 f911 	bl	800e65c <PIDChangeFlag>
	Load_Gain();
 800b43a:	f002 fe9b 	bl	800e174 <Load_Gain>
					PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);
 800b43e:	eeb0 1a69 	vmov.f32	s2, s19
 800b442:	eef0 0a49 	vmov.f32	s1, s18
 800b446:	eeb0 0a68 	vmov.f32	s0, s17
 800b44a:	2004      	movs	r0, #4
 800b44c:	f003 f8f8 	bl	800e640 <PIDSetGain>
							  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);
 800b450:	eeb0 1a69 	vmov.f32	s2, s19
 800b454:	eef0 0a49 	vmov.f32	s1, s18
 800b458:	eeb0 0a68 	vmov.f32	s0, s17
 800b45c:	2005      	movs	r0, #5
 800b45e:	f003 f8ef 	bl	800e640 <PIDSetGain>
							  PIDSetGain(A_VELO_PID, 14.6,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800b462:	eeb0 0a68 	vmov.f32	s0, s17
 800b466:	eeb0 1a48 	vmov.f32	s2, s16
 800b46a:	eef0 0a48 	vmov.f32	s1, s16
 800b46e:	2000      	movs	r0, #0
 800b470:	f003 f8e6 	bl	800e640 <PIDSetGain>
							  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800b474:	eeb0 1a48 	vmov.f32	s2, s16
 800b478:	eef0 0a48 	vmov.f32	s1, s16
 800b47c:	eeb0 0a68 	vmov.f32	s0, s17
 800b480:	2008      	movs	r0, #8
 800b482:	f003 f8dd 	bl	800e640 <PIDSetGain>
							  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800b486:	eeb0 1a48 	vmov.f32	s2, s16
 800b48a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800b48e:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800b492:	2001      	movs	r0, #1
 800b494:	f003 f8d4 	bl	800e640 <PIDSetGain>
							  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800b498:	eeb0 1a48 	vmov.f32	s2, s16
 800b49c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b4a0:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800b4a4:	2002      	movs	r0, #2
 800b4a6:	f003 f8cb 	bl	800e640 <PIDSetGain>
							  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800b4aa:	eeb0 1a48 	vmov.f32	s2, s16
 800b4ae:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800b4b2:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800b4b6:	2003      	movs	r0, #3
 800b4b8:	f003 f8c2 	bl	800e640 <PIDSetGain>
	imu_check = IMU_init();
 800b4bc:	f002 fb0e 	bl	800dadc <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b4c0:	4601      	mov	r1, r0
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f009 ffd4 	bl	8015470 <iprintf>
	imu_check =IMU_init();
 800b4c8:	f002 fb08 	bl	800dadc <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b4cc:	4601      	mov	r1, r0
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f009 ffce 	bl	8015470 <iprintf>
	HAL_Delay(100);
 800b4d4:	2064      	movs	r0, #100	; 0x64
 800b4d6:	f003 fa99 	bl	800ea0c <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800b4da:	2138      	movs	r1, #56	; 0x38
 800b4dc:	2037      	movs	r0, #55	; 0x37
 800b4de:	f002 f9dd 	bl	800d89c <ReadIMU>
 800b4e2:	4b32      	ldr	r3, [pc, #200]	; (800b5ac <InitExplore+0x1bc>)
	TargetVelocity[BODY] = 0;
 800b4e4:	4c32      	ldr	r4, [pc, #200]	; (800b5b0 <InitExplore+0x1c0>)
	ZGyro = ReadIMU(0x37, 0x38);
 800b4e6:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b4ea:	6818      	ldr	r0, [r3, #0]
 800b4ec:	f7fc ff64 	bl	80083b8 <__aeabi_f2d>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	482f      	ldr	r0, [pc, #188]	; (800b5b4 <InitExplore+0x1c4>)
 800b4f6:	f009 ffbb 	bl	8015470 <iprintf>
	Motor_PWM_Start();
 800b4fa:	f002 fc43 	bl	800dd84 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b4fe:	f002 fb57 	bl	800dbb0 <EncoderStart>
	EmitterON();
 800b502:	f002 fb65 	bl	800dbd0 <EmitterON>
	ADCStart();
 800b506:	f002 f843 	bl	800d590 <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b50a:	f247 512f 	movw	r1, #29999	; 0x752f
 800b50e:	482a      	ldr	r0, [pc, #168]	; (800b5b8 <InitExplore+0x1c8>)
 800b510:	f002 fcd0 	bl	800deb4 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b514:	f247 512f 	movw	r1, #29999	; 0x752f
 800b518:	4828      	ldr	r0, [pc, #160]	; (800b5bc <InitExplore+0x1cc>)
 800b51a:	f002 fccb 	bl	800deb4 <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b51e:	4828      	ldr	r0, [pc, #160]	; (800b5c0 <InitExplore+0x1d0>)
 800b520:	f006 f95b 	bl	80117da <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b524:	4827      	ldr	r0, [pc, #156]	; (800b5c4 <InitExplore+0x1d4>)
 800b526:	f006 f958 	bl	80117da <HAL_TIM_Base_Start_IT>
	Acceleration = 0;
	AngularAcceleration = 0;
	TotalPulse[LEFT] = 0;
 800b52a:	4b27      	ldr	r3, [pc, #156]	; (800b5c8 <InitExplore+0x1d8>)
	Acceleration = 0;
 800b52c:	4827      	ldr	r0, [pc, #156]	; (800b5cc <InitExplore+0x1dc>)
	AngularAcceleration = 0;
 800b52e:	4928      	ldr	r1, [pc, #160]	; (800b5d0 <InitExplore+0x1e0>)
	TargetVelocity[BODY] = 0;
 800b530:	ed84 8a02 	vstr	s16, [r4, #8]
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
#else


	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b534:	4a27      	ldr	r2, [pc, #156]	; (800b5d4 <InitExplore+0x1e4>)
	TargetAngularV = 0;
 800b536:	ed85 8a00 	vstr	s16, [r5]
	TotalPulse[LEFT] = 0;
 800b53a:	2400      	movs	r4, #0
	Acceleration = 0;
 800b53c:	ed80 8a00 	vstr	s16, [r0]
	AngularAcceleration = 0;
 800b540:	ed81 8a00 	vstr	s16, [r1]
	TotalPulse[LEFT] = 0;
 800b544:	601c      	str	r4, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800b546:	605c      	str	r4, [r3, #4]
	TotalPulse[BODY] = 0;
 800b548:	609c      	str	r4, [r3, #8]
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b54a:	4b23      	ldr	r3, [pc, #140]	; (800b5d8 <InitExplore+0x1e8>)
 800b54c:	6890      	ldr	r0, [r2, #8]
 800b54e:	6098      	str	r0, [r3, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800b550:	6852      	ldr	r2, [r2, #4]
 800b552:	605a      	str	r2, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b554:	edd3 7a02 	vldr	s15, [r3, #8]
 800b558:	ed93 7a01 	vldr	s14, [r3, #4]
 800b55c:	491f      	ldr	r1, [pc, #124]	; (800b5dc <InitExplore+0x1ec>)
 800b55e:	ee77 7ac7 	vsub.f32	s15, s15, s14

#endif
	PIDReset(L_VELO_PID);
 800b562:	2004      	movs	r0, #4
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b564:	edc1 7a00 	vstr	s15, [r1]
	PIDReset(L_VELO_PID);
 800b568:	f003 f880 	bl	800e66c <PIDReset>
	PIDReset(R_VELO_PID);
 800b56c:	2005      	movs	r0, #5
 800b56e:	f003 f87d 	bl	800e66c <PIDReset>

	PIDReset(A_VELO_PID);
 800b572:	4620      	mov	r0, r4
 800b574:	f003 f87a 	bl	800e66c <PIDReset>
	PIDReset(L_WALL_PID);
 800b578:	2002      	movs	r0, #2
 800b57a:	f003 f877 	bl	800e66c <PIDReset>
	PIDReset(R_WALL_PID);
 800b57e:	2003      	movs	r0, #3
 800b580:	f003 f874 	bl	800e66c <PIDReset>
	PIDReset(D_WALL_PID);

#endif
}
 800b584:	ecbd 8b04 	vpop	{d8-d9}
	PIDReset(D_WALL_PID);
 800b588:	2001      	movs	r0, #1
}
 800b58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800b58e:	f003 b86d 	b.w	800e66c <PIDReset>
 800b592:	bf00      	nop
 800b594:	4169999a 	.word	0x4169999a
 800b598:	3a83126f 	.word	0x3a83126f
 800b59c:	452f0000 	.word	0x452f0000
 800b5a0:	00000000 	.word	0x00000000
 800b5a4:	08018ffc 	.word	0x08018ffc
 800b5a8:	20008998 	.word	0x20008998
 800b5ac:	20007fe4 	.word	0x20007fe4
 800b5b0:	20008988 	.word	0x20008988
 800b5b4:	08019018 	.word	0x08019018
 800b5b8:	40000424 	.word	0x40000424
 800b5bc:	40000824 	.word	0x40000824
 800b5c0:	20008e74 	.word	0x20008e74
 800b5c4:	20008c2c 	.word	0x20008c2c
 800b5c8:	200089b8 	.word	0x200089b8
 800b5cc:	20007f34 	.word	0x20007f34
 800b5d0:	20007f3c 	.word	0x20007f3c
 800b5d4:	200089f8 	.word	0x200089f8
 800b5d8:	20008ab8 	.word	0x20008ab8
 800b5dc:	200089ac 	.word	0x200089ac

0800b5e0 <InitFastest>:

void InitFastest()
{
 800b5e0:	b538      	push	{r3, r4, r5, lr}
	Motor_PWM_Start();
 800b5e2:	f002 fbcf 	bl	800dd84 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b5e6:	f002 fae3 	bl	800dbb0 <EncoderStart>
	EmitterON();
 800b5ea:	f002 faf1 	bl	800dbd0 <EmitterON>
	ADCStart();
 800b5ee:	f001 ffcf 	bl	800d590 <ADCStart>

	uint8_t imu_check;
	imu_check = IMU_init();
 800b5f2:	f002 fa73 	bl	800dadc <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b5f6:	4c3d      	ldr	r4, [pc, #244]	; (800b6ec <InitFastest+0x10c>)

	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
 800b5f8:	4d3d      	ldr	r5, [pc, #244]	; (800b6f0 <InitFastest+0x110>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f009 ff37 	bl	8015470 <iprintf>
	imu_check =IMU_init();
 800b602:	f002 fa6b 	bl	800dadc <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b606:	4601      	mov	r1, r0
 800b608:	4620      	mov	r0, r4
 800b60a:	f009 ff31 	bl	8015470 <iprintf>
	HAL_Delay(100);
 800b60e:	2064      	movs	r0, #100	; 0x64
 800b610:	f003 f9fc 	bl	800ea0c <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800b614:	2138      	movs	r1, #56	; 0x38
 800b616:	2037      	movs	r0, #55	; 0x37
 800b618:	f002 f940 	bl	800d89c <ReadIMU>
 800b61c:	4b35      	ldr	r3, [pc, #212]	; (800b6f4 <InitFastest+0x114>)
	TargetVelocity[BODY] = 0;
 800b61e:	4c36      	ldr	r4, [pc, #216]	; (800b6f8 <InitFastest+0x118>)
	ZGyro = ReadIMU(0x37, 0x38);
 800b620:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b624:	6818      	ldr	r0, [r3, #0]
 800b626:	f7fc fec7 	bl	80083b8 <__aeabi_f2d>
 800b62a:	4602      	mov	r2, r0
 800b62c:	460b      	mov	r3, r1
 800b62e:	4833      	ldr	r0, [pc, #204]	; (800b6fc <InitFastest+0x11c>)
 800b630:	f009 ff1e 	bl	8015470 <iprintf>
	PIDChangeFlag(L_VELO_PID, 0);
 800b634:	2100      	movs	r1, #0
 800b636:	2004      	movs	r0, #4
 800b638:	f003 f810 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b63c:	2100      	movs	r1, #0
 800b63e:	2005      	movs	r0, #5
 800b640:	f003 f80c 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b644:	2100      	movs	r1, #0
 800b646:	2002      	movs	r0, #2
 800b648:	f003 f808 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b64c:	2100      	movs	r1, #0
 800b64e:	2003      	movs	r0, #3
 800b650:	f003 f804 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b654:	2100      	movs	r1, #0
 800b656:	2001      	movs	r0, #1
 800b658:	f003 f800 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800b65c:	2100      	movs	r1, #0
 800b65e:	4608      	mov	r0, r1
 800b660:	f002 fffc 	bl	800e65c <PIDChangeFlag>
	Load_Gain();
 800b664:	f002 fd86 	bl	800e174 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b668:	f247 512f 	movw	r1, #29999	; 0x752f
 800b66c:	4824      	ldr	r0, [pc, #144]	; (800b700 <InitFastest+0x120>)
 800b66e:	f002 fc21 	bl	800deb4 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b672:	f247 512f 	movw	r1, #29999	; 0x752f
 800b676:	4823      	ldr	r0, [pc, #140]	; (800b704 <InitFastest+0x124>)
 800b678:	f002 fc1c 	bl	800deb4 <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b67c:	4822      	ldr	r0, [pc, #136]	; (800b708 <InitFastest+0x128>)
 800b67e:	f006 f8ac 	bl	80117da <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b682:	4822      	ldr	r0, [pc, #136]	; (800b70c <InitFastest+0x12c>)
 800b684:	f006 f8a9 	bl	80117da <HAL_TIM_Base_Start_IT>
	TargetVelocity[BODY] = 0;
 800b688:	2300      	movs	r3, #0
	Acceleration = 0;
	AngularAcceleration = 0;
	TotalPulse[LEFT] = 0;
 800b68a:	4a21      	ldr	r2, [pc, #132]	; (800b710 <InitFastest+0x130>)
	Acceleration = 0;
 800b68c:	4821      	ldr	r0, [pc, #132]	; (800b714 <InitFastest+0x134>)
	AngularAcceleration = 0;
 800b68e:	4922      	ldr	r1, [pc, #136]	; (800b718 <InitFastest+0x138>)
	TargetVelocity[BODY] = 0;
 800b690:	60a3      	str	r3, [r4, #8]
	TotalPulse[LEFT] = 0;
 800b692:	2400      	movs	r4, #0
	TargetAngularV = 0;
 800b694:	602b      	str	r3, [r5, #0]
	Acceleration = 0;
 800b696:	6003      	str	r3, [r0, #0]
	AngularAcceleration = 0;
 800b698:	600b      	str	r3, [r1, #0]
	TotalPulse[LEFT] = 0;
 800b69a:	6014      	str	r4, [r2, #0]
	TotalPulse[RIGHT] = 0;
 800b69c:	6054      	str	r4, [r2, #4]
	TotalPulse[BODY] = 0;
 800b69e:	6094      	str	r4, [r2, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800b6a0:	f002 fa60 	bl	800db64 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800b6a4:	4a1d      	ldr	r2, [pc, #116]	; (800b71c <InitFastest+0x13c>)
 800b6a6:	4b1e      	ldr	r3, [pc, #120]	; (800b720 <InitFastest+0x140>)
 800b6a8:	6890      	ldr	r0, [r2, #8]
 800b6aa:	6098      	str	r0, [r3, #8]
	TargetPhoto[SR] = Photo[SR];
 800b6ac:	6852      	ldr	r2, [r2, #4]
 800b6ae:	605a      	str	r2, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b6b0:	edd3 7a02 	vldr	s15, [r3, #8]
 800b6b4:	ed93 7a01 	vldr	s14, [r3, #4]
 800b6b8:	491a      	ldr	r1, [pc, #104]	; (800b724 <InitFastest+0x144>)
 800b6ba:	ee77 7ac7 	vsub.f32	s15, s15, s14

	PIDReset(L_VELO_PID);
 800b6be:	2004      	movs	r0, #4
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b6c0:	edc1 7a00 	vstr	s15, [r1]
	PIDReset(L_VELO_PID);
 800b6c4:	f002 ffd2 	bl	800e66c <PIDReset>
	PIDReset(R_VELO_PID);
 800b6c8:	2005      	movs	r0, #5
 800b6ca:	f002 ffcf 	bl	800e66c <PIDReset>
	PIDReset(A_VELO_PID);
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f002 ffcc 	bl	800e66c <PIDReset>
	PIDReset(L_WALL_PID);
 800b6d4:	2002      	movs	r0, #2
 800b6d6:	f002 ffc9 	bl	800e66c <PIDReset>
	PIDReset(R_WALL_PID);
 800b6da:	2003      	movs	r0, #3
 800b6dc:	f002 ffc6 	bl	800e66c <PIDReset>
	PIDReset(D_WALL_PID);
 800b6e0:	2001      	movs	r0, #1


}
 800b6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800b6e6:	f002 bfc1 	b.w	800e66c <PIDReset>
 800b6ea:	bf00      	nop
 800b6ec:	08018ffc 	.word	0x08018ffc
 800b6f0:	20008998 	.word	0x20008998
 800b6f4:	20007fe4 	.word	0x20007fe4
 800b6f8:	20008988 	.word	0x20008988
 800b6fc:	08019018 	.word	0x08019018
 800b700:	40000424 	.word	0x40000424
 800b704:	40000824 	.word	0x40000824
 800b708:	20008e74 	.word	0x20008e74
 800b70c:	20008c2c 	.word	0x20008c2c
 800b710:	200089b8 	.word	0x200089b8
 800b714:	20007f34 	.word	0x20007f34
 800b718:	20007f3c 	.word	0x20007f3c
 800b71c:	200089f8 	.word	0x200089f8
 800b720:	20008ab8 	.word	0x20008ab8
 800b724:	200089ac 	.word	0x200089ac

0800b728 <Debug>:
void Debug()
{
 800b728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if 1
	InitExplore();
	InitPosition();
	wall_init();

	TotalPulse[RIGHT] = 0;
 800b72a:	4d2a      	ldr	r5, [pc, #168]	; (800b7d4 <Debug+0xac>)
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	PIDChangeFlag(A_VELO_PID, 1);
	ExploreVelocity=0;
 800b72c:	4e2a      	ldr	r6, [pc, #168]	; (800b7d8 <Debug+0xb0>)
	TotalPulse[RIGHT] = 0;
 800b72e:	2400      	movs	r4, #0
	InitExplore();
 800b730:	f7ff fe5e 	bl	800b3f0 <InitExplore>
	InitPosition();
 800b734:	f7fd fb60 	bl	8008df8 <InitPosition>
	wall_init();
 800b738:	f7fe fe00 	bl	800a33c <wall_init>
	PIDChangeFlag(L_VELO_PID, 1);
 800b73c:	2101      	movs	r1, #1
 800b73e:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b740:	606c      	str	r4, [r5, #4]
	TotalPulse[LEFT] = 0;
 800b742:	602c      	str	r4, [r5, #0]
	TotalPulse[BODY] = 0;
 800b744:	60ac      	str	r4, [r5, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b746:	f002 ff89 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b74a:	2101      	movs	r1, #1
 800b74c:	2005      	movs	r0, #5
 800b74e:	f002 ff85 	bl	800e65c <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b752:	68a9      	ldr	r1, [r5, #8]
 800b754:	4821      	ldr	r0, [pc, #132]	; (800b7dc <Debug+0xb4>)
 800b756:	682a      	ldr	r2, [r5, #0]
 800b758:	686b      	ldr	r3, [r5, #4]
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
	Pos.Dir = front;
 800b75a:	4d21      	ldr	r5, [pc, #132]	; (800b7e0 <Debug+0xb8>)
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b75c:	f009 fe88 	bl	8015470 <iprintf>
	PIDChangeFlag(D_WALL_PID, 0);
 800b760:	4621      	mov	r1, r4
 800b762:	2001      	movs	r0, #1
 800b764:	f002 ff7a 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b768:	4621      	mov	r1, r4
 800b76a:	2002      	movs	r0, #2
 800b76c:	f002 ff76 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b770:	4621      	mov	r1, r4
 800b772:	2003      	movs	r0, #3
 800b774:	f002 ff72 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800b778:	2101      	movs	r1, #1
 800b77a:	4620      	mov	r0, r4
 800b77c:	f002 ff6e 	bl	800e65c <PIDChangeFlag>
	ExploreVelocity=0;
 800b780:	2700      	movs	r7, #0
	ChangeLED(3);
 800b782:	2003      	movs	r0, #3
	ExploreVelocity=0;
 800b784:	6037      	str	r7, [r6, #0]
	ChangeLED(3);
 800b786:	f002 fa3f 	bl	800dc08 <ChangeLED>
	ExploreVelocity = 135;
 800b78a:	eddf 0a16 	vldr	s1, [pc, #88]	; 800b7e4 <Debug+0xbc>
	IT_mode = EXPLORE;
 800b78e:	4b16      	ldr	r3, [pc, #88]	; (800b7e8 <Debug+0xc0>)
	Accel(61.75,ExploreVelocity);
 800b790:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800b7ec <Debug+0xc4>
	ExploreVelocity = 135;
 800b794:	edc6 0a00 	vstr	s1, [r6]
	IT_mode = EXPLORE;
 800b798:	2206      	movs	r2, #6
 800b79a:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800b79c:	712c      	strb	r4, [r5, #4]
	Accel(61.75,ExploreVelocity);
 800b79e:	f7fd ffd3 	bl	8009748 <Accel>
	for(int i=0; i < 1; i++)
	{
		Pos.Dir = front;
		GoStraight(90, ExploreVelocity, AddVelocity);
 800b7a2:	4b13      	ldr	r3, [pc, #76]	; (800b7f0 <Debug+0xc8>)
 800b7a4:	edd6 0a00 	vldr	s1, [r6]
 800b7a8:	edd3 7a00 	vldr	s15, [r3]
 800b7ac:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800b7f4 <Debug+0xcc>
		Pos.Dir = front;
 800b7b0:	712c      	strb	r4, [r5, #4]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800b7b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7b6:	ee17 0a90 	vmov	r0, s15
 800b7ba:	f7fe f925 	bl	8009a08 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800b7be:	f7fd fd03 	bl	80091c8 <SlalomRight>

	}
	Pos.Dir = front;
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800b7c2:	4b0d      	ldr	r3, [pc, #52]	; (800b7f8 <Debug+0xd0>)
	Pos.Dir = front;
 800b7c4:	712c      	strb	r4, [r5, #4]
	TargetVelocity[BODY] = 0;
 800b7c6:	609f      	str	r7, [r3, #8]
	HAL_Delay(1000);
 800b7c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800b7cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_Delay(1000);
 800b7d0:	f003 b91c 	b.w	800ea0c <HAL_Delay>
 800b7d4:	200089b8 	.word	0x200089b8
 800b7d8:	20008aac 	.word	0x20008aac
 800b7dc:	08018f44 	.word	0x08018f44
 800b7e0:	20000008 	.word	0x20000008
 800b7e4:	43070000 	.word	0x43070000
 800b7e8:	20008974 	.word	0x20008974
 800b7ec:	42770000 	.word	0x42770000
 800b7f0:	20008994 	.word	0x20008994
 800b7f4:	42b40000 	.word	0x42b40000
 800b7f8:	20008988 	.word	0x20008988

0800b7fc <ParameterSetting>:
void ParameterSetting()
{
 800b7fc:	b508      	push	{r3, lr}
	Load_Gain();
 800b7fe:	f002 fcb9 	bl	800e174 <Load_Gain>
	Change_Gain();

}
 800b802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Change_Gain();
 800b806:	f002 bd8f 	b.w	800e328 <Change_Gain>
 800b80a:	bf00      	nop

0800b80c <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800b80c:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800b80e:	4b16      	ldr	r3, [pc, #88]	; (800b868 <GainTestRWall+0x5c>)
 800b810:	2206      	movs	r2, #6
 800b812:	601a      	str	r2, [r3, #0]
	InitExplore();
 800b814:	f7ff fdec 	bl	800b3f0 <InitExplore>
	InitPosition();
 800b818:	f7fd faee 	bl	8008df8 <InitPosition>
	wall_init();
 800b81c:	f7fe fd8e 	bl	800a33c <wall_init>
	TotalPulse[RIGHT] = 0;
 800b820:	4b12      	ldr	r3, [pc, #72]	; (800b86c <GainTestRWall+0x60>)
 800b822:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800b824:	2101      	movs	r1, #1
 800b826:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b828:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b82a:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800b82c:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b82e:	f002 ff15 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b832:	2101      	movs	r1, #1
 800b834:	2005      	movs	r0, #5
 800b836:	f002 ff11 	bl	800e65c <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800b83a:	4629      	mov	r1, r5
 800b83c:	2001      	movs	r0, #1
 800b83e:	f002 ff0d 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b842:	4629      	mov	r1, r5
 800b844:	2002      	movs	r0, #2
 800b846:	f002 ff09 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800b84a:	2101      	movs	r1, #1
 800b84c:	2003      	movs	r0, #3
 800b84e:	f002 ff05 	bl	800e65c <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800b852:	4b07      	ldr	r3, [pc, #28]	; (800b870 <GainTestRWall+0x64>)
 800b854:	2400      	movs	r4, #0
	ChangeLED(1);
 800b856:	2001      	movs	r0, #1
	ExploreVelocity=0;
 800b858:	601c      	str	r4, [r3, #0]
	ChangeLED(1);
 800b85a:	f002 f9d5 	bl	800dc08 <ChangeLED>
 800b85e:	4a05      	ldr	r2, [pc, #20]	; (800b874 <GainTestRWall+0x68>)
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800b860:	4623      	mov	r3, r4
 800b862:	6093      	str	r3, [r2, #8]
 800b864:	e7fd      	b.n	800b862 <GainTestRWall+0x56>
 800b866:	bf00      	nop
 800b868:	20008974 	.word	0x20008974
 800b86c:	200089b8 	.word	0x200089b8
 800b870:	20008aac 	.word	0x20008aac
 800b874:	20008988 	.word	0x20008988

0800b878 <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800b878:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	IT_mode = EXPLORE;
 800b87c:	4b28      	ldr	r3, [pc, #160]	; (800b920 <GainTestDWall+0xa8>)
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800b87e:	ed9f 8a29 	vldr	s16, [pc, #164]	; 800b924 <GainTestDWall+0xac>
 800b882:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800b934 <GainTestDWall+0xbc>
 800b886:	4c28      	ldr	r4, [pc, #160]	; (800b928 <GainTestDWall+0xb0>)
	ChangeLED(2);
	while(1)
	{
		TargetVelocity[BODY] = 0;
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800b888:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b938 <GainTestDWall+0xc0>
	IT_mode = EXPLORE;
 800b88c:	2206      	movs	r2, #6
{
 800b88e:	b087      	sub	sp, #28
	IT_mode = EXPLORE;
 800b890:	601a      	str	r2, [r3, #0]
	InitExplore();
 800b892:	f7ff fdad 	bl	800b3f0 <InitExplore>
	InitPosition();
 800b896:	f7fd faaf 	bl	8008df8 <InitPosition>
	wall_init();
 800b89a:	f7fe fd4f 	bl	800a33c <wall_init>
	TotalPulse[RIGHT] = 0;
 800b89e:	4b23      	ldr	r3, [pc, #140]	; (800b92c <GainTestDWall+0xb4>)
 800b8a0:	2500      	movs	r5, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800b8a2:	2101      	movs	r1, #1
 800b8a4:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b8a6:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b8a8:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800b8aa:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b8ac:	f002 fed6 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b8b0:	2101      	movs	r1, #1
 800b8b2:	2005      	movs	r0, #5
 800b8b4:	f002 fed2 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 1);
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	4608      	mov	r0, r1
 800b8bc:	f002 fece 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	2002      	movs	r0, #2
 800b8c4:	f002 feca 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b8c8:	2003      	movs	r0, #3
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	f002 fec6 	bl	800e65c <PIDChangeFlag>
	ExploreVelocity=0;
 800b8d0:	4b17      	ldr	r3, [pc, #92]	; (800b930 <GainTestDWall+0xb8>)
	ChangeLED(2);
 800b8d2:	2002      	movs	r0, #2
	ExploreVelocity=0;
 800b8d4:	ed83 8a00 	vstr	s16, [r3]
	ChangeLED(2);
 800b8d8:	f002 f996 	bl	800dc08 <ChangeLED>
		TargetVelocity[BODY] = 0;
 800b8dc:	ed8b 8a02 	vstr	s16, [fp, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800b8e0:	6820      	ldr	r0, [r4, #0]
 800b8e2:	68e5      	ldr	r5, [r4, #12]
 800b8e4:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800b8e8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b8ec:	f7fc fd64 	bl	80083b8 <__aeabi_f2d>
 800b8f0:	4606      	mov	r6, r0
 800b8f2:	4648      	mov	r0, r9
 800b8f4:	460f      	mov	r7, r1
 800b8f6:	f7fc fd5f 	bl	80083b8 <__aeabi_f2d>
 800b8fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8fe:	4640      	mov	r0, r8
 800b900:	f7fc fd5a 	bl	80083b8 <__aeabi_f2d>
 800b904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b908:	4628      	mov	r0, r5
 800b90a:	f7fc fd55 	bl	80083b8 <__aeabi_f2d>
 800b90e:	4632      	mov	r2, r6
 800b910:	e9cd 0100 	strd	r0, r1, [sp]
 800b914:	463b      	mov	r3, r7
 800b916:	4650      	mov	r0, sl
 800b918:	f009 fdaa 	bl	8015470 <iprintf>
 800b91c:	e7de      	b.n	800b8dc <GainTestDWall+0x64>
 800b91e:	bf00      	nop
 800b920:	20008974 	.word	0x20008974
 800b924:	00000000 	.word	0x00000000
 800b928:	200089f8 	.word	0x200089f8
 800b92c:	200089b8 	.word	0x200089b8
 800b930:	20008aac 	.word	0x20008aac
 800b934:	20008988 	.word	0x20008988
 800b938:	08018fcc 	.word	0x08018fcc

0800b93c <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800b93c:	b508      	push	{r3, lr}
	IT_mode = WRITINGFREE;
 800b93e:	4b29      	ldr	r3, [pc, #164]	; (800b9e4 <WritingFree+0xa8>)
	Rotate(90, M_PI);
	HAL_Delay(500);

	while(1)
	{
		Rotate(90, M_PI);
 800b940:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800b9e8 <WritingFree+0xac>
 800b944:	ed9f 8a29 	vldr	s16, [pc, #164]	; 800b9ec <WritingFree+0xb0>

		HAL_Delay(500);
		Rotate(90, -M_PI);
 800b948:	eddf 8a29 	vldr	s17, [pc, #164]	; 800b9f0 <WritingFree+0xb4>
	IT_mode = WRITINGFREE;
 800b94c:	2507      	movs	r5, #7
 800b94e:	601d      	str	r5, [r3, #0]
	InitExplore();
 800b950:	f7ff fd4e 	bl	800b3f0 <InitExplore>
	printf("3\r\n");
 800b954:	4827      	ldr	r0, [pc, #156]	; (800b9f4 <WritingFree+0xb8>)
 800b956:	f009 fe13 	bl	8015580 <puts>
	InitPosition();
 800b95a:	f7fd fa4d 	bl	8008df8 <InitPosition>
	wall_init();
 800b95e:	f7fe fced 	bl	800a33c <wall_init>
	printf("4\r\n");
 800b962:	4825      	ldr	r0, [pc, #148]	; (800b9f8 <WritingFree+0xbc>)
 800b964:	f009 fe0c 	bl	8015580 <puts>
	TotalPulse[RIGHT] = 0;
 800b968:	4b24      	ldr	r3, [pc, #144]	; (800b9fc <WritingFree+0xc0>)
 800b96a:	2400      	movs	r4, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800b96c:	2101      	movs	r1, #1
 800b96e:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b970:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b972:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800b974:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b976:	f002 fe71 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b97a:	2101      	movs	r1, #1
 800b97c:	2005      	movs	r0, #5
 800b97e:	f002 fe6d 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b982:	4621      	mov	r1, r4
 800b984:	2001      	movs	r0, #1
 800b986:	f002 fe69 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b98a:	4621      	mov	r1, r4
 800b98c:	2002      	movs	r0, #2
 800b98e:	f002 fe65 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b992:	4621      	mov	r1, r4
 800b994:	2003      	movs	r0, #3
 800b996:	f002 fe61 	bl	800e65c <PIDChangeFlag>
	ExploreVelocity=0;
 800b99a:	4b19      	ldr	r3, [pc, #100]	; (800ba00 <WritingFree+0xc4>)
 800b99c:	2200      	movs	r2, #0
	ChangeLED(7);
 800b99e:	4628      	mov	r0, r5
	ExploreVelocity=0;
 800b9a0:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800b9a2:	f002 f931 	bl	800dc08 <ChangeLED>
	Rotate(90, M_PI);
 800b9a6:	eef0 0a49 	vmov.f32	s1, s18
 800b9aa:	eeb0 0a48 	vmov.f32	s0, s16
 800b9ae:	f7fd fabf 	bl	8008f30 <Rotate>
	HAL_Delay(500);
 800b9b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b9b6:	f003 f829 	bl	800ea0c <HAL_Delay>
		Rotate(90, M_PI);
 800b9ba:	eef0 0a49 	vmov.f32	s1, s18
 800b9be:	eeb0 0a48 	vmov.f32	s0, s16
 800b9c2:	f7fd fab5 	bl	8008f30 <Rotate>
		HAL_Delay(500);
 800b9c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b9ca:	f003 f81f 	bl	800ea0c <HAL_Delay>
		Rotate(90, -M_PI);
 800b9ce:	eef0 0a68 	vmov.f32	s1, s17
 800b9d2:	eeb0 0a48 	vmov.f32	s0, s16
 800b9d6:	f7fd faab 	bl	8008f30 <Rotate>

		HAL_Delay(500);
 800b9da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b9de:	f003 f815 	bl	800ea0c <HAL_Delay>
 800b9e2:	e7ea      	b.n	800b9ba <WritingFree+0x7e>
 800b9e4:	20008974 	.word	0x20008974
 800b9e8:	40490fdb 	.word	0x40490fdb
 800b9ec:	42b40000 	.word	0x42b40000
 800b9f0:	c0490fdb 	.word	0xc0490fdb
 800b9f4:	0801904c 	.word	0x0801904c
 800b9f8:	08019050 	.word	0x08019050
 800b9fc:	200089b8 	.word	0x200089b8
 800ba00:	20008aac 	.word	0x20008aac
 800ba04:	00000000 	.word	0x00000000

0800ba08 <FastestRun>:
	Sla.Theta1 = 30*M_PI/180;
	Sla.Theta2 = 60*M_PI/180;
	Sla.Theta3 = 90*M_PI/180;
}
void FastestRun()
{
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	ed2d 8b02 	vpush	{d8}
	IT_mode = EXPLORE;
 800ba10:	4bbd      	ldr	r3, [pc, #756]	; (800bd08 <FastestRun+0x300>)
	InitPosition();


//	wall_init();

	TotalPulse[RIGHT] = 0;
 800ba12:	4ebe      	ldr	r6, [pc, #760]	; (800bd0c <FastestRun+0x304>)
{
 800ba14:	b085      	sub	sp, #20
	IT_mode = EXPLORE;
 800ba16:	2206      	movs	r2, #6
	HAL_Delay(100);
 800ba18:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800ba1a:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800ba1c:	f002 fff6 	bl	800ea0c <HAL_Delay>
	int8_t mode=1;
 800ba20:	aa04      	add	r2, sp, #16
 800ba22:	2501      	movs	r5, #1
 800ba24:	f802 5d02 	strb.w	r5, [r2, #-2]!
	  ModeSelect( 1, 2, &mode);
 800ba28:	2102      	movs	r1, #2
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f002 fef0 	bl	800e810 <ModeSelect>
	  Signal( mode );
 800ba30:	f99d 000e 	ldrsb.w	r0, [sp, #14]
 800ba34:	f002 fe80 	bl	800e738 <Signal>
		HAL_Delay(100);
 800ba38:	2064      	movs	r0, #100	; 0x64
 800ba3a:	f002 ffe7 	bl	800ea0c <HAL_Delay>
		  int8_t mode2=1;
 800ba3e:	aa04      	add	r2, sp, #16
		  ModeSelect( 1, 4, &mode2);
 800ba40:	2104      	movs	r1, #4
		  int8_t mode2=1;
 800ba42:	f802 5d01 	strb.w	r5, [r2, #-1]!
		  ModeSelect( 1, 4, &mode2);
 800ba46:	4628      	mov	r0, r5
 800ba48:	f002 fee2 	bl	800e810 <ModeSelect>
		  Signal( mode2 );
 800ba4c:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800ba50:	f002 fe72 	bl	800e738 <Signal>
	TotalPulse[RIGHT] = 0;
 800ba54:	2400      	movs	r4, #0
		  PhotoSwitch();
 800ba56:	f002 feb1 	bl	800e7bc <PhotoSwitch>
	InitFastest();
 800ba5a:	f7ff fdc1 	bl	800b5e0 <InitFastest>
	InitPosition();
 800ba5e:	f7fd f9cb 	bl	8008df8 <InitPosition>
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800ba62:	4629      	mov	r1, r5
 800ba64:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800ba66:	6074      	str	r4, [r6, #4]
	TotalPulse[LEFT] = 0;
 800ba68:	6034      	str	r4, [r6, #0]
	TotalPulse[BODY] = 0;
 800ba6a:	60b4      	str	r4, [r6, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800ba6c:	f002 fdf6 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800ba70:	4629      	mov	r1, r5
 800ba72:	2005      	movs	r0, #5
 800ba74:	f002 fdf2 	bl	800e65c <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800ba78:	68b1      	ldr	r1, [r6, #8]
 800ba7a:	48a5      	ldr	r0, [pc, #660]	; (800bd10 <FastestRun+0x308>)
 800ba7c:	6832      	ldr	r2, [r6, #0]
 800ba7e:	6873      	ldr	r3, [r6, #4]
 800ba80:	f009 fcf6 	bl	8015470 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800ba84:	4621      	mov	r1, r4
 800ba86:	4628      	mov	r0, r5
 800ba88:	f002 fde8 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	2002      	movs	r0, #2
 800ba90:	f002 fde4 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ba94:	4621      	mov	r1, r4
 800ba96:	2003      	movs	r0, #3
 800ba98:	f002 fde0 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f002 fddc 	bl	800e65c <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode = 'T';
	if(mode == 1)
 800baa4:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800baa8:	42ab      	cmp	r3, r5
 800baaa:	d013      	beq.n	800bad4 <FastestRun+0xcc>
		ExploreVelocity = 400;
		turn_mode = 'T';
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800baac:	2b02      	cmp	r3, #2
 800baae:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 800bd84 <FastestRun+0x37c>
 800bab2:	bf14      	ite	ne
 800bab4:	f04f 0a54 	movne.w	sl, #84	; 0x54
 800bab8:	f04f 0a53 	moveq.w	sl, #83	; 0x53
	}

	switch(mode2)
 800babc:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 800bac0:	3b01      	subs	r3, #1
 800bac2:	2b03      	cmp	r3, #3
 800bac4:	f200 817b 	bhi.w	800bdbe <FastestRun+0x3b6>
 800bac8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bacc:	0164016e 	.word	0x0164016e
 800bad0:	000c010d 	.word	0x000c010d
		ExploreVelocity = 400;
 800bad4:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800bd84 <FastestRun+0x37c>
 800bad8:	4b8e      	ldr	r3, [pc, #568]	; (800bd14 <FastestRun+0x30c>)
 800bada:	f8c8 3000 	str.w	r3, [r8]
		turn_mode = 'T';
 800bade:	f04f 0a54 	mov.w	sl, #84	; 0x54
 800bae2:	e7eb      	b.n	800babc <FastestRun+0xb4>
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
		Sla.Pre = 3;
 800bae4:	4c8c      	ldr	r4, [pc, #560]	; (800bd18 <FastestRun+0x310>)
		ExploreVelocity=300;
 800bae6:	4a8d      	ldr	r2, [pc, #564]	; (800bd1c <FastestRun+0x314>)
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800bae8:	4b8d      	ldr	r3, [pc, #564]	; (800bd20 <FastestRun+0x318>)
		ExploreVelocity=300;
 800baea:	f8c8 2000 	str.w	r2, [r8]
		Sla.Pre = 3;
 800baee:	498d      	ldr	r1, [pc, #564]	; (800bd24 <FastestRun+0x31c>)
		Sla.Fol = 5;
 800baf0:	4a8d      	ldr	r2, [pc, #564]	; (800bd28 <FastestRun+0x320>)
		Sla.Pre = 3;
 800baf2:	6021      	str	r1, [r4, #0]
		Sla.Fol = 5;
 800baf4:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.117;
 800baf6:	60a3      	str	r3, [r4, #8]
	Sla.Pre *=  2/MM_PER_PULSE;
 800baf8:	6820      	ldr	r0, [r4, #0]
	initSlalomParam();
	ChangeLED(4);

	VelocityMax = false;

	SearchOrFast = 1;
 800bafa:	f8df 928c 	ldr.w	r9, [pc, #652]	; 800bd88 <FastestRun+0x380>
	Calc = SearchOrFast;
 800bafe:	4f8b      	ldr	r7, [pc, #556]	; (800bd2c <FastestRun+0x324>)
//			HAL_Delay(300);
//			break;
//	}
	//shiftPos();

	TargetVelocity[BODY] = 0;
 800bb00:	ed9f 8a8b 	vldr	s16, [pc, #556]	; 800bd30 <FastestRun+0x328>
 800bb04:	4d8b      	ldr	r5, [pc, #556]	; (800bd34 <FastestRun+0x32c>)
        	case back:
        		//Uターンして直進.加速できる
        		Calc = 1;//マップ更新したくないときは1を代入。
        		GoBack();
        		Calc = SearchOrFast;
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800bb06:	eddf 8a8c 	vldr	s17, [pc, #560]	; 800bd38 <FastestRun+0x330>
	Sla.Pre *=  2/MM_PER_PULSE;
 800bb0a:	f7fc fc55 	bl	80083b8 <__aeabi_f2d>
 800bb0e:	a37c      	add	r3, pc, #496	; (adr r3, 800bd00 <FastestRun+0x2f8>)
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	f7fc fca8 	bl	8008468 <__aeabi_dmul>
 800bb18:	f7fc ff9e 	bl	8008a58 <__aeabi_d2f>
 800bb1c:	6020      	str	r0, [r4, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800bb1e:	6860      	ldr	r0, [r4, #4]
 800bb20:	f7fc fc4a 	bl	80083b8 <__aeabi_f2d>
 800bb24:	a376      	add	r3, pc, #472	; (adr r3, 800bd00 <FastestRun+0x2f8>)
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	f7fc fc9d 	bl	8008468 <__aeabi_dmul>
 800bb2e:	f7fc ff93 	bl	8008a58 <__aeabi_d2f>
	Sla.Theta3 = 90*M_PI/180;
 800bb32:	4b82      	ldr	r3, [pc, #520]	; (800bd3c <FastestRun+0x334>)
	Sla.Theta1 = 30*M_PI/180;
 800bb34:	4982      	ldr	r1, [pc, #520]	; (800bd40 <FastestRun+0x338>)
	Sla.Theta2 = 60*M_PI/180;
 800bb36:	4a83      	ldr	r2, [pc, #524]	; (800bd44 <FastestRun+0x33c>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800bb38:	6060      	str	r0, [r4, #4]
	ChangeLED(4);
 800bb3a:	2004      	movs	r0, #4
	Sla.Theta3 = 90*M_PI/180;
 800bb3c:	61a3      	str	r3, [r4, #24]
	Sla.Theta1 = 30*M_PI/180;
 800bb3e:	6121      	str	r1, [r4, #16]
	Sla.Theta2 = 60*M_PI/180;
 800bb40:	6162      	str	r2, [r4, #20]
	ChangeLED(4);
 800bb42:	f002 f861 	bl	800dc08 <ChangeLED>
	VelocityMax = false;
 800bb46:	4a80      	ldr	r2, [pc, #512]	; (800bd48 <FastestRun+0x340>)
	TargetVelocity[BODY] = 0;
 800bb48:	4880      	ldr	r0, [pc, #512]	; (800bd4c <FastestRun+0x344>)
	Acceleration = 0;
 800bb4a:	4981      	ldr	r1, [pc, #516]	; (800bd50 <FastestRun+0x348>)
	SearchOrFast = 1;
 800bb4c:	f04f 0b01 	mov.w	fp, #1
	VelocityMax = false;
 800bb50:	2400      	movs	r4, #0
 800bb52:	7014      	strb	r4, [r2, #0]
	SearchOrFast = 1;
 800bb54:	f8c9 b000 	str.w	fp, [r9]
	Calc = SearchOrFast;
 800bb58:	f8d9 2000 	ldr.w	r2, [r9]
 800bb5c:	603a      	str	r2, [r7, #0]
	TargetAngularV = 0;
 800bb5e:	4a7d      	ldr	r2, [pc, #500]	; (800bd54 <FastestRun+0x34c>)
	TargetVelocity[BODY] = 0;
 800bb60:	ed80 8a02 	vstr	s16, [r0, #8]
	TargetAngle = 0;
 800bb64:	487c      	ldr	r0, [pc, #496]	; (800bd58 <FastestRun+0x350>)
	Acceleration = 0;
 800bb66:	ed81 8a00 	vstr	s16, [r1]
	Angle = 0;
 800bb6a:	497c      	ldr	r1, [pc, #496]	; (800bd5c <FastestRun+0x354>)
	TargetAngularV = 0;
 800bb6c:	ed82 8a00 	vstr	s16, [r2]
	goal_edge_num = GOAL_SIZE_X;
 800bb70:	4a7b      	ldr	r2, [pc, #492]	; (800bd60 <FastestRun+0x358>)
	TargetAngle = 0;
 800bb72:	ed80 8a00 	vstr	s16, [r0]
	goal_edge_num = GOAL_SIZE_X;
 800bb76:	2602      	movs	r6, #2
	PIDReset(L_VELO_PID);
 800bb78:	2004      	movs	r0, #4
	goal_edge_num = GOAL_SIZE_X;
 800bb7a:	7016      	strb	r6, [r2, #0]
	Angle = 0;
 800bb7c:	ed81 8a00 	vstr	s16, [r1]
	PIDReset(L_VELO_PID);
 800bb80:	f002 fd74 	bl	800e66c <PIDReset>
	PIDReset(R_VELO_PID);
 800bb84:	2005      	movs	r0, #5
 800bb86:	f002 fd71 	bl	800e66c <PIDReset>
	PIDReset(A_VELO_PID);
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f002 fd6e 	bl	800e66c <PIDReset>
	PIDReset(L_WALL_PID);
 800bb90:	4630      	mov	r0, r6
 800bb92:	f002 fd6b 	bl	800e66c <PIDReset>
	PIDReset(R_WALL_PID);
 800bb96:	2003      	movs	r0, #3
 800bb98:	f002 fd68 	bl	800e66c <PIDReset>
	PIDReset(D_WALL_PID);
 800bb9c:	4658      	mov	r0, fp
 800bb9e:	f002 fd65 	bl	800e66c <PIDReset>
	initSearchData(&my_map, &my_mouse);
 800bba2:	4629      	mov	r1, r5
 800bba4:	486f      	ldr	r0, [pc, #444]	; (800bd64 <FastestRun+0x35c>)
 800bba6:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800bd8c <FastestRun+0x384>
 800bbaa:	f001 fa6b 	bl	800d084 <initSearchData>
	flashCopyNodesToRam(); //existenceだけ
 800bbae:	f7fe fc09 	bl	800a3c4 <flashCopyNodesToRam>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800bbb2:	2207      	movs	r2, #7
 800bbb4:	2103      	movs	r1, #3
 800bbb6:	4633      	mov	r3, r6
 800bbb8:	9600      	str	r6, [sp, #0]
 800bbba:	9101      	str	r1, [sp, #4]
 800bbbc:	4869      	ldr	r0, [pc, #420]	; (800bd64 <FastestRun+0x35c>)
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	f7fe feee 	bl	800a9a0 <updateAllNodeWeight>
	HAL_Delay(200);
 800bbc4:	20c8      	movs	r0, #200	; 0xc8
 800bbc6:	f002 ff21 	bl	800ea0c <HAL_Delay>
	Accel(61.5, ExploreVelocity);
 800bbca:	edd8 0a00 	vldr	s1, [r8]
 800bbce:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800bd68 <FastestRun+0x360>
        shiftState(&my_mouse);
 800bbd2:	462e      	mov	r6, r5
	Accel(61.5, ExploreVelocity);
 800bbd4:	f7fd fdb8 	bl	8009748 <Accel>
    while(! ((my_mouse.goal_lesser.x <= my_mouse.next.pos.x && my_mouse.next.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.next.pos.y && my_mouse.next.pos.y <= my_mouse.goal_larger.y)))
 800bbd8:	7d2b      	ldrb	r3, [r5, #20]
 800bbda:	782a      	ldrb	r2, [r5, #0]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d809      	bhi.n	800bbf4 <FastestRun+0x1ec>
 800bbe0:	78aa      	ldrb	r2, [r5, #2]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d306      	bcc.n	800bbf4 <FastestRun+0x1ec>
 800bbe6:	7d6b      	ldrb	r3, [r5, #21]
 800bbe8:	786a      	ldrb	r2, [r5, #1]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d802      	bhi.n	800bbf4 <FastestRun+0x1ec>
 800bbee:	78ea      	ldrb	r2, [r5, #3]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d260      	bcs.n	800bcb6 <FastestRun+0x2ae>
        shiftState(&my_mouse);
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f7ff fbef 	bl	800b3d8 <shiftState>
        my_mouse.next.node = getNextNode(&my_map, my_mouse.now.car, my_mouse.now.node, 0x03);//これらの引数のどれかがいけない. 迷路、方角、ノードポインタ. 一発目の、ノードの重みがfffなのはなぜ？
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	692a      	ldr	r2, [r5, #16]
 800bbfe:	7aa9      	ldrb	r1, [r5, #10]
 800bc00:	4858      	ldr	r0, [pc, #352]	; (800bd64 <FastestRun+0x35c>)
 800bc02:	f7fe ffef 	bl	800abe4 <getNextNode>
        getNextState(&(my_mouse.now),&(my_mouse.next),my_mouse.next.node);
 800bc06:	4959      	ldr	r1, [pc, #356]	; (800bd6c <FastestRun+0x364>)
        my_mouse.next.node = getNextNode(&my_map, my_mouse.now.car, my_mouse.now.node, 0x03);//これらの引数のどれかがいけない. 迷路、方角、ノードポインタ. 一発目の、ノードの重みがfffなのはなぜ？
 800bc08:	61e8      	str	r0, [r5, #28]
 800bc0a:	4602      	mov	r2, r0
        getNextState(&(my_mouse.now),&(my_mouse.next),my_mouse.next.node);
 800bc0c:	f1a1 000c 	sub.w	r0, r1, #12
 800bc10:	f7ff fa74 	bl	800b0fc <getNextState>
        	switch(my_mouse.next.dir)
 800bc14:	7deb      	ldrb	r3, [r5, #23]
        AddVelocity = 0;
 800bc16:	ed8b 8a00 	vstr	s16, [fp]
        	switch(my_mouse.next.dir)
 800bc1a:	2b05      	cmp	r3, #5
 800bc1c:	d80a      	bhi.n	800bc34 <FastestRun+0x22c>
 800bc1e:	e8df f003 	tbb	[pc, r3]
 800bc22:	0b15      	.short	0x0b15
 800bc24:	033f2034 	.word	0x033f2034
        		Calc = SearchOrFast;
        		TurnLeft(turn_mode);
        		break;
        	case left:
        		//左旋回
        		Calc = SearchOrFast;
 800bc28:	f8d9 3000 	ldr.w	r3, [r9]
 800bc2c:	603b      	str	r3, [r7, #0]
        		TurnLeft(turn_mode);
 800bc2e:	4650      	mov	r0, sl
 800bc30:	f7fe f850 	bl	8009cd4 <TurnLeft>
        		break;
        	}
        cnt++;
 800bc34:	3401      	adds	r4, #1
 800bc36:	e7cf      	b.n	800bbd8 <FastestRun+0x1d0>
        		ChangeLED(1);
 800bc38:	2001      	movs	r0, #1
 800bc3a:	f001 ffe5 	bl	800dc08 <ChangeLED>
        		Calc = SearchOrFast;
 800bc3e:	f8d9 3000 	ldr.w	r3, [r9]
 800bc42:	603b      	str	r3, [r7, #0]
        		TurnRight(turn_mode);
 800bc44:	4650      	mov	r0, sl
 800bc46:	f7fe f80d 	bl	8009c64 <TurnRight>
        		break;
 800bc4a:	e7f3      	b.n	800bc34 <FastestRun+0x22c>
        		Calc = SearchOrFast;
 800bc4c:	f8d9 3000 	ldr.w	r3, [r9]
        		GoStraight(90, ExploreVelocity , 0);
 800bc50:	edd8 0a00 	vldr	s1, [r8]
        		Calc = SearchOrFast;
 800bc54:	603b      	str	r3, [r7, #0]
        		GoStraight(90, ExploreVelocity , 0);
 800bc56:	2000      	movs	r0, #0
 800bc58:	eeb0 0a68 	vmov.f32	s0, s17
 800bc5c:	f7fd fed4 	bl	8009a08 <GoStraight>
        		break;
 800bc60:	e7e8      	b.n	800bc34 <FastestRun+0x22c>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800bc62:	2301      	movs	r3, #1
 800bc64:	603b      	str	r3, [r7, #0]
        		GoBack();
 800bc66:	f7fe f86f 	bl	8009d48 <GoBack>
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800bc6a:	eddb 7a00 	vldr	s15, [fp]
        		Calc = SearchOrFast;
 800bc6e:	f8d9 3000 	ldr.w	r3, [r9]
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800bc72:	edd8 0a00 	vldr	s1, [r8]
        		Calc = SearchOrFast;
 800bc76:	603b      	str	r3, [r7, #0]
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800bc78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc7c:	eeb0 0a68 	vmov.f32	s0, s17
 800bc80:	ee17 0a90 	vmov	r0, s15
 800bc84:	f7fd fec0 	bl	8009a08 <GoStraight>
        		break;
 800bc88:	e7d4      	b.n	800bc34 <FastestRun+0x22c>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	603b      	str	r3, [r7, #0]
        		GoBack();
 800bc8e:	f7fe f85b 	bl	8009d48 <GoBack>
        		Calc = SearchOrFast;
 800bc92:	f8d9 3000 	ldr.w	r3, [r9]
 800bc96:	603b      	str	r3, [r7, #0]
        		TurnRight(turn_mode);
 800bc98:	4650      	mov	r0, sl
 800bc9a:	f7fd ffe3 	bl	8009c64 <TurnRight>
        		break;
 800bc9e:	e7c9      	b.n	800bc34 <FastestRun+0x22c>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800bca0:	2301      	movs	r3, #1
 800bca2:	603b      	str	r3, [r7, #0]
        		GoBack();
 800bca4:	f7fe f850 	bl	8009d48 <GoBack>
        		Calc = SearchOrFast;
 800bca8:	f8d9 3000 	ldr.w	r3, [r9]
 800bcac:	603b      	str	r3, [r7, #0]
        		TurnLeft(turn_mode);
 800bcae:	4650      	mov	r0, sl
 800bcb0:	f7fe f810 	bl	8009cd4 <TurnLeft>
        		break;
 800bcb4:	e7be      	b.n	800bc34 <FastestRun+0x22c>
//    outputDataToFile(maze);

	//fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode,0x03);

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800bcb6:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800bd30 <FastestRun+0x328>
 800bcba:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800bd70 <FastestRun+0x368>
 800bcbe:	4d29      	ldr	r5, [pc, #164]	; (800bd64 <FastestRun+0x35c>)
	//終了合図
	Signal(7);

	while(1)
	{
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800bcc0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800bd90 <FastestRun+0x388>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800bcc4:	4f2b      	ldr	r7, [pc, #172]	; (800bd74 <FastestRun+0x36c>)
	Decel(45,0);
 800bcc6:	f7fd fdc3 	bl	8009850 <Decel>
	Signal(7);
 800bcca:	2007      	movs	r0, #7
 800bccc:	f002 fd34 	bl	800e738 <Signal>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800bcd0:	462e      	mov	r6, r5
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	896a      	ldrh	r2, [r5, #10]
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	f009 fbca 	bl	8015470 <iprintf>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800bcdc:	4639      	mov	r1, r7
 800bcde:	4630      	mov	r0, r6
 800bce0:	f7fe fbba 	bl	800a458 <printAllWeight>
 800bce4:	e7f5      	b.n	800bcd2 <FastestRun+0x2ca>
		Sla.Pre = 2;
 800bce6:	4c0c      	ldr	r4, [pc, #48]	; (800bd18 <FastestRun+0x310>)
		ExploreVelocity=180;
 800bce8:	4a23      	ldr	r2, [pc, #140]	; (800bd78 <FastestRun+0x370>)
		Sla.Alpha = 0.04;
 800bcea:	4b24      	ldr	r3, [pc, #144]	; (800bd7c <FastestRun+0x374>)
		ExploreVelocity=180;
 800bcec:	f8c8 2000 	str.w	r2, [r8]
		Sla.Pre = 2;
 800bcf0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		Sla.Fol = 3.5;
 800bcf4:	4a22      	ldr	r2, [pc, #136]	; (800bd80 <FastestRun+0x378>)
		Sla.Pre = 2;
 800bcf6:	6021      	str	r1, [r4, #0]
		Sla.Fol = 3.5;
 800bcf8:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.04;
 800bcfa:	60a3      	str	r3, [r4, #8]
		break;
 800bcfc:	e6fc      	b.n	800baf8 <FastestRun+0xf0>
 800bcfe:	bf00      	nop
 800bd00:	9f8f0d54 	.word	0x9f8f0d54
 800bd04:	409ee54a 	.word	0x409ee54a
 800bd08:	20008974 	.word	0x20008974
 800bd0c:	200089b8 	.word	0x200089b8
 800bd10:	08018f44 	.word	0x08018f44
 800bd14:	43c80000 	.word	0x43c80000
 800bd18:	200089d0 	.word	0x200089d0
 800bd1c:	43960000 	.word	0x43960000
 800bd20:	3def9db2 	.word	0x3def9db2
 800bd24:	40400000 	.word	0x40400000
 800bd28:	40a00000 	.word	0x40a00000
 800bd2c:	20008c28 	.word	0x20008c28
 800bd30:	00000000 	.word	0x00000000
 800bd34:	20008224 	.word	0x20008224
 800bd38:	42b40000 	.word	0x42b40000
 800bd3c:	3fc90fdb 	.word	0x3fc90fdb
 800bd40:	3f060a92 	.word	0x3f060a92
 800bd44:	3f860a92 	.word	0x3f860a92
 800bd48:	20008aaa 	.word	0x20008aaa
 800bd4c:	20008988 	.word	0x20008988
 800bd50:	20007f34 	.word	0x20007f34
 800bd54:	20008998 	.word	0x20008998
 800bd58:	20007f48 	.word	0x20007f48
 800bd5c:	20007f38 	.word	0x20007f38
 800bd60:	200089b4 	.word	0x200089b4
 800bd64:	200083d0 	.word	0x200083d0
 800bd68:	42760000 	.word	0x42760000
 800bd6c:	20008238 	.word	0x20008238
 800bd70:	42340000 	.word	0x42340000
 800bd74:	2000822c 	.word	0x2000822c
 800bd78:	43340000 	.word	0x43340000
 800bd7c:	3d23d70a 	.word	0x3d23d70a
 800bd80:	40600000 	.word	0x40600000
 800bd84:	20008aac 	.word	0x20008aac
 800bd88:	20008c24 	.word	0x20008c24
 800bd8c:	20008994 	.word	0x20008994
 800bd90:	08018f78 	.word	0x08018f78
		Sla.Pre = 5;
 800bd94:	4c0b      	ldr	r4, [pc, #44]	; (800bdc4 <FastestRun+0x3bc>)
		ExploreVelocity=135;
 800bd96:	4b0c      	ldr	r3, [pc, #48]	; (800bdc8 <FastestRun+0x3c0>)
		Sla.Alpha = 0.0273;
 800bd98:	4a0c      	ldr	r2, [pc, #48]	; (800bdcc <FastestRun+0x3c4>)
		ExploreVelocity=135;
 800bd9a:	f8c8 3000 	str.w	r3, [r8]
		Sla.Pre = 5;
 800bd9e:	4b0c      	ldr	r3, [pc, #48]	; (800bdd0 <FastestRun+0x3c8>)
		Sla.Alpha = 0.0273;
 800bda0:	60a2      	str	r2, [r4, #8]
		Sla.Pre = 5;
 800bda2:	6023      	str	r3, [r4, #0]
		Sla.Fol = 5;
 800bda4:	6063      	str	r3, [r4, #4]
		break;
 800bda6:	e6a7      	b.n	800baf8 <FastestRun+0xf0>
		Sla.Pre = 7;//9;
 800bda8:	4c06      	ldr	r4, [pc, #24]	; (800bdc4 <FastestRun+0x3bc>)
		ExploreVelocity=90;
 800bdaa:	4a0a      	ldr	r2, [pc, #40]	; (800bdd4 <FastestRun+0x3cc>)
		Sla.Alpha = 0.014;
 800bdac:	4b0a      	ldr	r3, [pc, #40]	; (800bdd8 <FastestRun+0x3d0>)
		ExploreVelocity=90;
 800bdae:	f8c8 2000 	str.w	r2, [r8]
		Sla.Pre = 7;//9;
 800bdb2:	490a      	ldr	r1, [pc, #40]	; (800bddc <FastestRun+0x3d4>)
		Sla.Fol = 11;//13;
 800bdb4:	4a0a      	ldr	r2, [pc, #40]	; (800bde0 <FastestRun+0x3d8>)
		Sla.Pre = 7;//9;
 800bdb6:	6021      	str	r1, [r4, #0]
		Sla.Fol = 11;//13;
 800bdb8:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.014;
 800bdba:	60a3      	str	r3, [r4, #8]
		break;
 800bdbc:	e69c      	b.n	800baf8 <FastestRun+0xf0>
 800bdbe:	4c01      	ldr	r4, [pc, #4]	; (800bdc4 <FastestRun+0x3bc>)
 800bdc0:	e69a      	b.n	800baf8 <FastestRun+0xf0>
 800bdc2:	bf00      	nop
 800bdc4:	200089d0 	.word	0x200089d0
 800bdc8:	43070000 	.word	0x43070000
 800bdcc:	3cdfa440 	.word	0x3cdfa440
 800bdd0:	40a00000 	.word	0x40a00000
 800bdd4:	42b40000 	.word	0x42b40000
 800bdd8:	3c656042 	.word	0x3c656042
 800bddc:	40e00000 	.word	0x40e00000
 800bde0:	41300000 	.word	0x41300000
 800bde4:	00000000 	.word	0x00000000

0800bde8 <Explore>:
	}
}
void Explore()
{
 800bde8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IT_mode = EXPLORE;
 800bdea:	4b7f      	ldr	r3, [pc, #508]	; (800bfe8 <Explore+0x200>)
{
 800bdec:	b083      	sub	sp, #12
	IT_mode = EXPLORE;
 800bdee:	2206      	movs	r2, #6
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800bdf0:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800bdf2:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800bdf4:	f002 fe0a 	bl	800ea0c <HAL_Delay>
	int8_t mode=1;
 800bdf8:	aa02      	add	r2, sp, #8
 800bdfa:	2501      	movs	r5, #1
 800bdfc:	f802 5d02 	strb.w	r5, [r2, #-2]!
	ModeSelect( 1, 2, &mode);
 800be00:	2102      	movs	r1, #2
 800be02:	4628      	mov	r0, r5
 800be04:	f002 fd04 	bl	800e810 <ModeSelect>
	Signal( mode );
 800be08:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 800be0c:	f002 fc94 	bl	800e738 <Signal>
	HAL_Delay(100);
 800be10:	2064      	movs	r0, #100	; 0x64
 800be12:	f002 fdfb 	bl	800ea0c <HAL_Delay>

	int8_t mode2=1;
 800be16:	aa02      	add	r2, sp, #8
	ModeSelect( 1, 4, &mode2);
 800be18:	2104      	movs	r1, #4
	int8_t mode2=1;
 800be1a:	f802 5d01 	strb.w	r5, [r2, #-1]!
	ModeSelect( 1, 4, &mode2);
 800be1e:	4628      	mov	r0, r5
 800be20:	f002 fcf6 	bl	800e810 <ModeSelect>
	Signal( mode2 );
 800be24:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800be28:	f002 fc86 	bl	800e738 <Signal>
	PhotoSwitch();
 800be2c:	f002 fcc6 	bl	800e7bc <PhotoSwitch>
	//printf("test\r\n");
	HAL_Delay(2000);
 800be30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800be34:	f002 fdea 	bl	800ea0c <HAL_Delay>

	InitExplore();
 800be38:	f7ff fada 	bl	800b3f0 <InitExplore>

	InitPosition();
 800be3c:	f7fc ffdc 	bl	8008df8 <InitPosition>

//	printf("旧式の壁初期化\r\n");
//	wall_init();
//
//	printf("色々セット\r\n");
	TotalPulse[RIGHT] = 0;
 800be40:	4b6a      	ldr	r3, [pc, #424]	; (800bfec <Explore+0x204>)
 800be42:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800be44:	4629      	mov	r1, r5
 800be46:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800be48:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800be4a:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800be4c:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800be4e:	f002 fc05 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800be52:	4629      	mov	r1, r5
 800be54:	2005      	movs	r0, #5
 800be56:	f002 fc01 	bl	800e65c <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800be5a:	4621      	mov	r1, r4
 800be5c:	4628      	mov	r0, r5
 800be5e:	f002 fbfd 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800be62:	4621      	mov	r1, r4
 800be64:	2002      	movs	r0, #2
 800be66:	f002 fbf9 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800be6a:	4621      	mov	r1, r4
 800be6c:	2003      	movs	r0, #3
 800be6e:	f002 fbf5 	bl	800e65c <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800be72:	4621      	mov	r1, r4
 800be74:	4620      	mov	r0, r4
 800be76:	f002 fbf1 	bl	800e65c <PIDChangeFlag>

//	ChangeLED(2);

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode = 'T';
	if(mode == 1)
 800be7a:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 800be7e:	42ab      	cmp	r3, r5
 800be80:	d00e      	beq.n	800bea0 <Explore+0xb8>
		turn_mode = 'T';
		ExploreVelocity=300;
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800be82:	2b02      	cmp	r3, #2
 800be84:	4e5a      	ldr	r6, [pc, #360]	; (800bff0 <Explore+0x208>)
 800be86:	bf14      	ite	ne
 800be88:	2754      	movne	r7, #84	; 0x54
 800be8a:	2753      	moveq	r7, #83	; 0x53
	}

	switch(mode2)
 800be8c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800be90:	3b01      	subs	r3, #1
 800be92:	2b03      	cmp	r3, #3
 800be94:	f200 80a0 	bhi.w	800bfd8 <Explore+0x1f0>
 800be98:	e8df f003 	tbb	[pc, r3]
 800be9c:	077d8994 	.word	0x077d8994
		ExploreVelocity=300;
 800bea0:	4e53      	ldr	r6, [pc, #332]	; (800bff0 <Explore+0x208>)
 800bea2:	4b54      	ldr	r3, [pc, #336]	; (800bff4 <Explore+0x20c>)
 800bea4:	6033      	str	r3, [r6, #0]
		turn_mode = 'T';
 800bea6:	2754      	movs	r7, #84	; 0x54
 800bea8:	e7f0      	b.n	800be8c <Explore+0xa4>
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
		Sla.Pre = 3;
 800beaa:	4c53      	ldr	r4, [pc, #332]	; (800bff8 <Explore+0x210>)
		ExploreVelocity=300;
 800beac:	4a51      	ldr	r2, [pc, #324]	; (800bff4 <Explore+0x20c>)
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800beae:	4b53      	ldr	r3, [pc, #332]	; (800bffc <Explore+0x214>)
		ExploreVelocity=300;
 800beb0:	6032      	str	r2, [r6, #0]
		Sla.Pre = 3;
 800beb2:	4953      	ldr	r1, [pc, #332]	; (800c000 <Explore+0x218>)
		Sla.Fol = 5;
 800beb4:	4a53      	ldr	r2, [pc, #332]	; (800c004 <Explore+0x21c>)
		Sla.Pre = 3;
 800beb6:	6021      	str	r1, [r4, #0]
		Sla.Fol = 5;
 800beb8:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.117;
 800beba:	60a3      	str	r3, [r4, #8]
	Sla.Pre *=  2/MM_PER_PULSE;
 800bebc:	6820      	ldr	r0, [r4, #0]
 800bebe:	4d52      	ldr	r5, [pc, #328]	; (800c008 <Explore+0x220>)
 800bec0:	f7fc fa7a 	bl	80083b8 <__aeabi_f2d>
 800bec4:	a346      	add	r3, pc, #280	; (adr r3, 800bfe0 <Explore+0x1f8>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	f7fc facd 	bl	8008468 <__aeabi_dmul>
 800bece:	f7fc fdc3 	bl	8008a58 <__aeabi_d2f>
 800bed2:	6020      	str	r0, [r4, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800bed4:	6860      	ldr	r0, [r4, #4]
 800bed6:	f7fc fa6f 	bl	80083b8 <__aeabi_f2d>
 800beda:	a341      	add	r3, pc, #260	; (adr r3, 800bfe0 <Explore+0x1f8>)
 800bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee0:	f7fc fac2 	bl	8008468 <__aeabi_dmul>
 800bee4:	f7fc fdb8 	bl	8008a58 <__aeabi_d2f>
//			HAL_Delay(1000);
//		}
//	Pos.TargetX = X_GOAL_LESSER;
//	Pos.TargetY = Y_GOAL_LESSER;
//	goal_edge_num = two;
	VelocityMax = false;
 800bee8:	4948      	ldr	r1, [pc, #288]	; (800c00c <Explore+0x224>)
	SearchOrFast = 0;
 800beea:	f8df c170 	ldr.w	ip, [pc, #368]	; 800c05c <Explore+0x274>
	Calc = 0;
 800beee:	4a48      	ldr	r2, [pc, #288]	; (800c010 <Explore+0x228>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800bef0:	6060      	str	r0, [r4, #4]
	VelocityMax = false;
 800bef2:	2300      	movs	r3, #0
 800bef4:	700b      	strb	r3, [r1, #0]

//	PhotoSwitch();
	Control_Mode=A_VELO_PID; //初期値が0. 減速時に
 800bef6:	4947      	ldr	r1, [pc, #284]	; (800c014 <Explore+0x22c>)
	Sla.Theta1 = 30*M_PI/180;
 800bef8:	4847      	ldr	r0, [pc, #284]	; (800c018 <Explore+0x230>)
	SearchOrFast = 0;
 800befa:	f8cc 3000 	str.w	r3, [ip]
	Control_Mode=A_VELO_PID; //初期値が0. 減速時に
 800befe:	600b      	str	r3, [r1, #0]
	Calc = 0;
 800bf00:	6013      	str	r3, [r2, #0]
	Sla.Theta1 = 30*M_PI/180;
 800bf02:	6120      	str	r0, [r4, #16]
	Sla.Theta2 = 60*M_PI/180;
 800bf04:	4a45      	ldr	r2, [pc, #276]	; (800c01c <Explore+0x234>)
	Sla.Theta3 = 90*M_PI/180;
 800bf06:	4b46      	ldr	r3, [pc, #280]	; (800c020 <Explore+0x238>)
//	Pos.Car = north;
//	Pos.NextX = Pos.X;
//	Pos.NextY = Pos.Y + 1;
//	Pos.NextCar = north;

	initSearchData(&my_map, &my_mouse);
 800bf08:	4846      	ldr	r0, [pc, #280]	; (800c024 <Explore+0x23c>)
	Sla.Theta2 = 60*M_PI/180;
 800bf0a:	6162      	str	r2, [r4, #20]
	initSearchData(&my_map, &my_mouse);
 800bf0c:	4629      	mov	r1, r5
	Sla.Theta3 = 90*M_PI/180;
 800bf0e:	61a3      	str	r3, [r4, #24]
	initSearchData(&my_map, &my_mouse);
 800bf10:	f001 f8b8 	bl	800d084 <initSearchData>
//	printGoal(&my_mouse);
//	printAllWeight(&my_map, &(my_mouse.goal_lesser)); //この時点で右上が0スタート.　合ってる
	dbc = 1;
 800bf14:	4b44      	ldr	r3, [pc, #272]	; (800c028 <Explore+0x240>)
	Accel(61.5, ExploreVelocity);
 800bf16:	edd6 0a00 	vldr	s1, [r6]
 800bf1a:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800c02c <Explore+0x244>

//		//ChangeLED(Pos.Car);
//		KyushinJudge();
//		SelectAction(turn_mode);
//		shiftPos();
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bf1e:	4e41      	ldr	r6, [pc, #260]	; (800c024 <Explore+0x23c>)
	dbc = 1;
 800bf20:	2201      	movs	r2, #1
 800bf22:	601a      	str	r2, [r3, #0]
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bf24:	462c      	mov	r4, r5
	Accel(61.5, ExploreVelocity);
 800bf26:	f7fd fc0f 	bl	8009748 <Accel>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800bf2a:	e001      	b.n	800bf30 <Explore+0x148>
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bf2c:	f001 f9b4 	bl	800d298 <getNextDirection>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800bf30:	782a      	ldrb	r2, [r5, #0]
 800bf32:	7a2b      	ldrb	r3, [r5, #8]
 800bf34:	429a      	cmp	r2, r3
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bf36:	4621      	mov	r1, r4
 800bf38:	463a      	mov	r2, r7
 800bf3a:	4630      	mov	r0, r6
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800bf3c:	d8f6      	bhi.n	800bf2c <Explore+0x144>
 800bf3e:	f895 c002 	ldrb.w	ip, [r5, #2]
 800bf42:	459c      	cmp	ip, r3
 800bf44:	d3f2      	bcc.n	800bf2c <Explore+0x144>
 800bf46:	7a6b      	ldrb	r3, [r5, #9]
 800bf48:	f895 c001 	ldrb.w	ip, [r5, #1]
 800bf4c:	459c      	cmp	ip, r3
 800bf4e:	d8ed      	bhi.n	800bf2c <Explore+0x144>
 800bf50:	f895 c003 	ldrb.w	ip, [r5, #3]
 800bf54:	459c      	cmp	ip, r3
 800bf56:	d3e9      	bcc.n	800bf2c <Explore+0x144>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800bf58:	eddf 0a35 	vldr	s1, [pc, #212]	; 800c030 <Explore+0x248>
 800bf5c:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800c034 <Explore+0x24c>


while(1)
{
	//迷路データの出力
	printAllNodeExistence(&my_map);
 800bf60:	4c30      	ldr	r4, [pc, #192]	; (800c024 <Explore+0x23c>)
	Decel(45, 0);
 800bf62:	f7fd fc75 	bl	8009850 <Decel>
	WaitStopAndReset();//これがないとガクンとなる.
 800bf66:	f7fc ffb9 	bl	8008edc <WaitStopAndReset>
	shiftState(&my_mouse);
 800bf6a:	4827      	ldr	r0, [pc, #156]	; (800c008 <Explore+0x220>)
 800bf6c:	f7ff fa34 	bl	800b3d8 <shiftState>
	Flash_clear_sector1();
 800bf70:	f001 fc34 	bl	800d7dc <Flash_clear_sector1>
	flashStoreNodes();
 800bf74:	f7fe f9a6 	bl	800a2c4 <flashStoreNodes>
	Signal(7);
 800bf78:	2007      	movs	r0, #7
 800bf7a:	f002 fbdd 	bl	800e738 <Signal>
	printAllNodeExistence(&my_map);
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f7fe fbb4 	bl	800a6ec <printAllNodeExistence>
	//printAllNode(&my_map); //drawを読み出す
	printMatrix16ValueFromNode(&my_map);
 800bf84:	4620      	mov	r0, r4
 800bf86:	f7fe fbf3 	bl	800a770 <printMatrix16ValueFromNode>
	printAllWeight(&my_map, &(my_mouse.now.node->pos) );
 800bf8a:	6929      	ldr	r1, [r5, #16]
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	3106      	adds	r1, #6
 800bf90:	f7fe fa62 	bl	800a458 <printAllWeight>
 800bf94:	e7f3      	b.n	800bf7e <Explore+0x196>
		Sla.Pre = 2;
 800bf96:	4c18      	ldr	r4, [pc, #96]	; (800bff8 <Explore+0x210>)
		ExploreVelocity=240;
 800bf98:	4a27      	ldr	r2, [pc, #156]	; (800c038 <Explore+0x250>)
		Sla.Alpha = 0.078;
 800bf9a:	4b28      	ldr	r3, [pc, #160]	; (800c03c <Explore+0x254>)
		ExploreVelocity=240;
 800bf9c:	6032      	str	r2, [r6, #0]
		Sla.Pre = 2;
 800bf9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		Sla.Fol = 16;
 800bfa2:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
		Sla.Pre = 2;
 800bfa6:	6021      	str	r1, [r4, #0]
		Sla.Fol = 16;
 800bfa8:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.078;
 800bfaa:	60a3      	str	r3, [r4, #8]
		break;
 800bfac:	e786      	b.n	800bebc <Explore+0xd4>
		Sla.Pre = 2;
 800bfae:	4c12      	ldr	r4, [pc, #72]	; (800bff8 <Explore+0x210>)
		ExploreVelocity=180;
 800bfb0:	4923      	ldr	r1, [pc, #140]	; (800c040 <Explore+0x258>)
		Sla.Fol = 16.5;
 800bfb2:	4a24      	ldr	r2, [pc, #144]	; (800c044 <Explore+0x25c>)
		Sla.Alpha = 0.043;
 800bfb4:	4b24      	ldr	r3, [pc, #144]	; (800c048 <Explore+0x260>)
		ExploreVelocity=180;
 800bfb6:	6031      	str	r1, [r6, #0]
		Sla.Pre = 2;
 800bfb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bfbc:	6021      	str	r1, [r4, #0]
		Sla.Fol = 16.5;
 800bfbe:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.043;
 800bfc0:	60a3      	str	r3, [r4, #8]
		break;
 800bfc2:	e77b      	b.n	800bebc <Explore+0xd4>
		Sla.Pre = 9;
 800bfc4:	4c0c      	ldr	r4, [pc, #48]	; (800bff8 <Explore+0x210>)
		ExploreVelocity=90;
 800bfc6:	4a21      	ldr	r2, [pc, #132]	; (800c04c <Explore+0x264>)
		Sla.Alpha = 0.014;
 800bfc8:	4b21      	ldr	r3, [pc, #132]	; (800c050 <Explore+0x268>)
		ExploreVelocity=90;
 800bfca:	6032      	str	r2, [r6, #0]
		Sla.Pre = 9;
 800bfcc:	4921      	ldr	r1, [pc, #132]	; (800c054 <Explore+0x26c>)
		Sla.Fol = 20;
 800bfce:	4a22      	ldr	r2, [pc, #136]	; (800c058 <Explore+0x270>)
		Sla.Pre = 9;
 800bfd0:	6021      	str	r1, [r4, #0]
		Sla.Fol = 20;
 800bfd2:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.014;
 800bfd4:	60a3      	str	r3, [r4, #8]
		break;
 800bfd6:	e771      	b.n	800bebc <Explore+0xd4>
 800bfd8:	4c07      	ldr	r4, [pc, #28]	; (800bff8 <Explore+0x210>)
 800bfda:	e76f      	b.n	800bebc <Explore+0xd4>
 800bfdc:	f3af 8000 	nop.w
 800bfe0:	9f8f0d54 	.word	0x9f8f0d54
 800bfe4:	409ee54a 	.word	0x409ee54a
 800bfe8:	20008974 	.word	0x20008974
 800bfec:	200089b8 	.word	0x200089b8
 800bff0:	20008aac 	.word	0x20008aac
 800bff4:	43960000 	.word	0x43960000
 800bff8:	200089d0 	.word	0x200089d0
 800bffc:	3def9db2 	.word	0x3def9db2
 800c000:	40400000 	.word	0x40400000
 800c004:	40a00000 	.word	0x40a00000
 800c008:	20008224 	.word	0x20008224
 800c00c:	20008aaa 	.word	0x20008aaa
 800c010:	20008c28 	.word	0x20008c28
 800c014:	2000897c 	.word	0x2000897c
 800c018:	3f060a92 	.word	0x3f060a92
 800c01c:	3f860a92 	.word	0x3f860a92
 800c020:	3fc90fdb 	.word	0x3fc90fdb
 800c024:	200083d0 	.word	0x200083d0
 800c028:	20000228 	.word	0x20000228
 800c02c:	42760000 	.word	0x42760000
 800c030:	00000000 	.word	0x00000000
 800c034:	42340000 	.word	0x42340000
 800c038:	43700000 	.word	0x43700000
 800c03c:	3d9fbe77 	.word	0x3d9fbe77
 800c040:	43340000 	.word	0x43340000
 800c044:	41840000 	.word	0x41840000
 800c048:	3d3020c5 	.word	0x3d3020c5
 800c04c:	42b40000 	.word	0x42b40000
 800c050:	3c656042 	.word	0x3c656042
 800c054:	41100000 	.word	0x41100000
 800c058:	41a00000 	.word	0x41a00000
 800c05c:	20008c24 	.word	0x20008c24

0800c060 <TestIMU>:
	//合っているか確認する
	printAllNodeExistence(&my_map);
}

void TestIMU()
{
 800c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IT_mode = IMU_TEST;
 800c062:	4b2c      	ldr	r3, [pc, #176]	; (800c114 <TestIMU+0xb4>)
		printf("gyro : %f\r\n",ZGyro);

//		printf("%d, %hd, %f, %f, %f\r\n", m,ZGFilterd,  ZGyro, AngularV, Angle);

		timer1 = 0;
		t = 1;
 800c064:	4d2c      	ldr	r5, [pc, #176]	; (800c118 <TestIMU+0xb8>)
	IT_mode = IMU_TEST;
 800c066:	2205      	movs	r2, #5
 800c068:	601a      	str	r2, [r3, #0]
		imu_check = IMU_init();
 800c06a:	f001 fd37 	bl	800dadc <IMU_init>
		printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c06e:	4601      	mov	r1, r0
 800c070:	482a      	ldr	r0, [pc, #168]	; (800c11c <TestIMU+0xbc>)
 800c072:	f009 f9fd 	bl	8015470 <iprintf>
		imu_check =IMU_init();
 800c076:	f001 fd31 	bl	800dadc <IMU_init>
		printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c07a:	4601      	mov	r1, r0
 800c07c:	4827      	ldr	r0, [pc, #156]	; (800c11c <TestIMU+0xbc>)
 800c07e:	f009 f9f7 	bl	8015470 <iprintf>
		HAL_Delay(100);
 800c082:	2064      	movs	r0, #100	; 0x64
 800c084:	f002 fcc2 	bl	800ea0c <HAL_Delay>
		ZGyro = ReadIMU(0x37, 0x38);
 800c088:	2138      	movs	r1, #56	; 0x38
 800c08a:	2037      	movs	r0, #55	; 0x37
 800c08c:	f001 fc06 	bl	800d89c <ReadIMU>
 800c090:	4b23      	ldr	r3, [pc, #140]	; (800c120 <TestIMU+0xc0>)
 800c092:	ed83 0a00 	vstr	s0, [r3]
		printf("gyro : %f\r\n",ZGyro);
 800c096:	6818      	ldr	r0, [r3, #0]
 800c098:	f7fc f98e 	bl	80083b8 <__aeabi_f2d>
 800c09c:	4602      	mov	r2, r0
 800c09e:	460b      	mov	r3, r1
 800c0a0:	4820      	ldr	r0, [pc, #128]	; (800c124 <TestIMU+0xc4>)
 800c0a2:	f009 f9e5 	bl	8015470 <iprintf>
		//割り込みを有効化

		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800c0a6:	4b20      	ldr	r3, [pc, #128]	; (800c128 <TestIMU+0xc8>)
		timer1 = 0;
 800c0a8:	4a20      	ldr	r2, [pc, #128]	; (800c12c <TestIMU+0xcc>)
		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800c0aa:	6818      	ldr	r0, [r3, #0]
		timer1 = 0;
 800c0ac:	2400      	movs	r4, #0
		t = 1;
 800c0ae:	2301      	movs	r3, #1
		timer1 = 0;
 800c0b0:	6014      	str	r4, [r2, #0]
		t = 1;
 800c0b2:	602b      	str	r3, [r5, #0]
		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800c0b4:	f7fc f980 	bl	80083b8 <__aeabi_f2d>
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	4621      	mov	r1, r4
 800c0be:	481c      	ldr	r0, [pc, #112]	; (800c130 <TestIMU+0xd0>)
 800c0c0:	f009 f9d6 	bl	8015470 <iprintf>
		HAL_TIM_Base_Start_IT(&htim1);
 800c0c4:	481b      	ldr	r0, [pc, #108]	; (800c134 <TestIMU+0xd4>)
 800c0c6:	f005 fb88 	bl	80117da <HAL_TIM_Base_Start_IT>
		while(t == 1) //10s
 800c0ca:	682b      	ldr	r3, [r5, #0]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d106      	bne.n	800c0de <TestIMU+0x7e>
		{
			printf("\r\n");
 800c0d0:	4c19      	ldr	r4, [pc, #100]	; (800c138 <TestIMU+0xd8>)
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f009 fa54 	bl	8015580 <puts>
		while(t == 1) //10s
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d0f9      	beq.n	800c0d2 <TestIMU+0x72>
		}

//		ag = Angle;
		t = 0;
 800c0de:	2400      	movs	r4, #0
		HAL_TIM_Base_Stop_IT(&htim1);
 800c0e0:	4814      	ldr	r0, [pc, #80]	; (800c134 <TestIMU+0xd4>)
		t = 0;
 800c0e2:	602c      	str	r4, [r5, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 800c0e4:	f005 fb9d 	bl	8011822 <HAL_TIM_Base_Stop_IT>
		HAL_Delay(1000);
 800c0e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c0ec:	f002 fc8e 	bl	800ea0c <HAL_Delay>
 800c0f0:	4d12      	ldr	r5, [pc, #72]	; (800c13c <TestIMU+0xdc>)



			for(int i=0; i < 5000; i++) //0.007495 / 5000
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800c0f2:	4f13      	ldr	r7, [pc, #76]	; (800c140 <TestIMU+0xe0>)
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800c0f4:	f241 3688 	movw	r6, #5000	; 0x1388
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800c0f8:	f855 0b04 	ldr.w	r0, [r5], #4
 800c0fc:	f7fc f95c 	bl	80083b8 <__aeabi_f2d>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4638      	mov	r0, r7
 800c106:	4621      	mov	r1, r4
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800c108:	3401      	adds	r4, #1
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800c10a:	f009 f9b1 	bl	8015470 <iprintf>
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800c10e:	42b4      	cmp	r4, r6
 800c110:	d1f2      	bne.n	800c0f8 <TestIMU+0x98>
 800c112:	e7fe      	b.n	800c112 <TestIMU+0xb2>
 800c114:	20008974 	.word	0x20008974
 800c118:	20008970 	.word	0x20008970
 800c11c:	08018ffc 	.word	0x08018ffc
 800c120:	20007fe4 	.word	0x20007fe4
 800c124:	08019018 	.word	0x08019018
 800c128:	20007f38 	.word	0x20007f38
 800c12c:	20008980 	.word	0x20008980
 800c130:	08019024 	.word	0x08019024
 800c134:	20008e74 	.word	0x20008e74
 800c138:	080191a8 	.word	0x080191a8
 800c13c:	2000022c 	.word	0x2000022c
 800c140:	08019040 	.word	0x08019040

0800c144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c148:	2400      	movs	r4, #0
{
 800c14a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c14c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c150:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c154:	4b45      	ldr	r3, [pc, #276]	; (800c26c <MX_GPIO_Init+0x128>)
 800c156:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c158:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c15a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c15c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800c27c <MX_GPIO_Init+0x138>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800c160:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800c280 <MX_GPIO_Init+0x13c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c164:	4f42      	ldr	r7, [pc, #264]	; (800c270 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c166:	4e43      	ldr	r6, [pc, #268]	; (800c274 <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c16c:	631a      	str	r2, [r3, #48]	; 0x30
 800c16e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c170:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c174:	9200      	str	r2, [sp, #0]
 800c176:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c178:	9401      	str	r4, [sp, #4]
 800c17a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c17c:	f042 0204 	orr.w	r2, r2, #4
 800c180:	631a      	str	r2, [r3, #48]	; 0x30
 800c182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c184:	f002 0204 	and.w	r2, r2, #4
 800c188:	9201      	str	r2, [sp, #4]
 800c18a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c18c:	9402      	str	r4, [sp, #8]
 800c18e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c190:	f042 0201 	orr.w	r2, r2, #1
 800c194:	631a      	str	r2, [r3, #48]	; 0x30
 800c196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c198:	f002 0201 	and.w	r2, r2, #1
 800c19c:	9202      	str	r2, [sp, #8]
 800c19e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1a0:	9403      	str	r4, [sp, #12]
 800c1a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1a4:	f042 0202 	orr.w	r2, r2, #2
 800c1a8:	631a      	str	r2, [r3, #48]	; 0x30
 800c1aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1ac:	f002 0202 	and.w	r2, r2, #2
 800c1b0:	9203      	str	r2, [sp, #12]
 800c1b2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c1b4:	9404      	str	r4, [sp, #16]
 800c1b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1b8:	f042 0208 	orr.w	r2, r2, #8
 800c1bc:	631a      	str	r2, [r3, #48]	; 0x30
 800c1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c0:	f003 0308 	and.w	r3, r3, #8
 800c1c4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c1c6:	4622      	mov	r2, r4
 800c1c8:	4648      	mov	r0, r9
 800c1ca:	2105      	movs	r1, #5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c1cc:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800c1ce:	f004 f8f1 	bl	80103b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800c1d2:	4622      	mov	r2, r4
 800c1d4:	4640      	mov	r0, r8
 800c1d6:	f44f 7140 	mov.w	r1, #768	; 0x300
 800c1da:	f004 f8eb 	bl	80103b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c1de:	4622      	mov	r2, r4
 800c1e0:	4638      	mov	r0, r7
 800c1e2:	2104      	movs	r1, #4
 800c1e4:	f004 f8e6 	bl	80103b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c1e8:	4622      	mov	r2, r4
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c1f0:	f004 f8e0 	bl	80103b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1f4:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1f6:	4648      	mov	r0, r9
 800c1f8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800c1fa:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1fc:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c200:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c204:	f003 ff3c 	bl	8010080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c208:	4b1b      	ldr	r3, [pc, #108]	; (800c278 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c20a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c20c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c210:	a905      	add	r1, sp, #20
 800c212:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c214:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c218:	f003 ff32 	bl	8010080 <HAL_GPIO_Init>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c21c:	4640      	mov	r0, r8
 800c21e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800c220:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c224:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c226:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c22a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c22c:	f003 ff28 	bl	8010080 <HAL_GPIO_Init>
  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c230:	4638      	mov	r0, r7
 800c232:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c234:	2304      	movs	r3, #4
 800c236:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c238:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c23c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c23e:	f003 ff1f 	bl	8010080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c242:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c246:	a905      	add	r1, sp, #20
 800c248:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c24a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c24c:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c250:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c252:	f003 ff15 	bl	8010080 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800c256:	4622      	mov	r2, r4
 800c258:	4621      	mov	r1, r4
 800c25a:	2028      	movs	r0, #40	; 0x28
 800c25c:	f003 f911 	bl	800f482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c260:	2028      	movs	r0, #40	; 0x28
 800c262:	f003 f92a 	bl	800f4ba <HAL_NVIC_EnableIRQ>

}
 800c266:	b00b      	add	sp, #44	; 0x2c
 800c268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c26c:	40023800 	.word	0x40023800
 800c270:	40020c00 	.word	0x40020c00
 800c274:	40020400 	.word	0x40020400
 800c278:	10110000 	.word	0x10110000
 800c27c:	40020000 	.word	0x40020000
 800c280:	40020800 	.word	0x40020800

0800c284 <MX_DMA_Init>:
{
 800c284:	b510      	push	{r4, lr}
 800c286:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c288:	2400      	movs	r4, #0
 800c28a:	4b0f      	ldr	r3, [pc, #60]	; (800c2c8 <MX_DMA_Init+0x44>)
 800c28c:	9401      	str	r4, [sp, #4]
 800c28e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c290:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c294:	631a      	str	r2, [r3, #48]	; 0x30
 800c296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c29c:	4622      	mov	r2, r4
 800c29e:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c2a0:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c2a2:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c2a4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c2a6:	f003 f8ec 	bl	800f482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c2aa:	2038      	movs	r0, #56	; 0x38
 800c2ac:	f003 f905 	bl	800f4ba <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800c2b0:	4622      	mov	r2, r4
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	203a      	movs	r0, #58	; 0x3a
 800c2b6:	f003 f8e4 	bl	800f482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c2ba:	203a      	movs	r0, #58	; 0x3a
}
 800c2bc:	b002      	add	sp, #8
 800c2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c2c2:	f003 b8fa 	b.w	800f4ba <HAL_NVIC_EnableIRQ>
 800c2c6:	bf00      	nop
 800c2c8:	40023800 	.word	0x40023800

0800c2cc <MX_ADC1_Init>:
{
 800c2cc:	b570      	push	{r4, r5, r6, lr}
  hadc1.Instance = ADC1;
 800c2ce:	4c21      	ldr	r4, [pc, #132]	; (800c354 <MX_ADC1_Init+0x88>)
 800c2d0:	4b21      	ldr	r3, [pc, #132]	; (800c358 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c2d2:	4a22      	ldr	r2, [pc, #136]	; (800c35c <MX_ADC1_Init+0x90>)
  hadc1.Instance = ADC1;
 800c2d4:	6023      	str	r3, [r4, #0]
{
 800c2d6:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c2d8:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800c2da:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c2dc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc1.Init.NbrOfConversion = 3;
 800c2e0:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c2e2:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c2e4:	6061      	str	r1, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c2e6:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c2e8:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c2ea:	9300      	str	r3, [sp, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c2ec:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c2f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c2f2:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c2f4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c2f8:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 800c2fa:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800c2fc:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800c2fe:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c302:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 3;
 800c304:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c306:	f002 fba3 	bl	800ea50 <HAL_ADC_Init>
 800c30a:	b108      	cbz	r0, 800c310 <MX_ADC1_Init+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c30c:	b672      	cpsid	i
 800c30e:	e7fe      	b.n	800c30e <MX_ADC1_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_10;
 800c310:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c312:	4669      	mov	r1, sp
 800c314:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c316:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c318:	9602      	str	r6, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_10;
 800c31a:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c31c:	f002 fd36 	bl	800ed8c <HAL_ADC_ConfigChannel>
 800c320:	b108      	cbz	r0, 800c326 <MX_ADC1_Init+0x5a>
 800c322:	b672      	cpsid	i
 800c324:	e7fe      	b.n	800c324 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_14;
 800c326:	220e      	movs	r2, #14
  sConfig.Rank = 2;
 800c328:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c32a:	4669      	mov	r1, sp
 800c32c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 800c32e:	9200      	str	r2, [sp, #0]
  sConfig.Rank = 2;
 800c330:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c332:	f002 fd2b 	bl	800ed8c <HAL_ADC_ConfigChannel>
 800c336:	b108      	cbz	r0, 800c33c <MX_ADC1_Init+0x70>
 800c338:	b672      	cpsid	i
 800c33a:	e7fe      	b.n	800c33a <MX_ADC1_Init+0x6e>
  sConfig.Channel = ADC_CHANNEL_9;
 800c33c:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c33e:	4669      	mov	r1, sp
 800c340:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800c342:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c346:	f002 fd21 	bl	800ed8c <HAL_ADC_ConfigChannel>
 800c34a:	b108      	cbz	r0, 800c350 <MX_ADC1_Init+0x84>
 800c34c:	b672      	cpsid	i
 800c34e:	e7fe      	b.n	800c34e <MX_ADC1_Init+0x82>
}
 800c350:	b004      	add	sp, #16
 800c352:	bd70      	pop	{r4, r5, r6, pc}
 800c354:	20008d8c 	.word	0x20008d8c
 800c358:	40012000 	.word	0x40012000
 800c35c:	0f000001 	.word	0x0f000001

0800c360 <MX_ADC2_Init>:
{
 800c360:	b570      	push	{r4, r5, r6, lr}
  hadc2.Instance = ADC2;
 800c362:	4c1c      	ldr	r4, [pc, #112]	; (800c3d4 <MX_ADC2_Init+0x74>)
 800c364:	4b1c      	ldr	r3, [pc, #112]	; (800c3d8 <MX_ADC2_Init+0x78>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c366:	4a1d      	ldr	r2, [pc, #116]	; (800c3dc <MX_ADC2_Init+0x7c>)
  hadc2.Instance = ADC2;
 800c368:	6023      	str	r3, [r4, #0]
{
 800c36a:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c36c:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ENABLE;
 800c36e:	2501      	movs	r5, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c370:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc2.Init.NbrOfConversion = 2;
 800c374:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c376:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c378:	6061      	str	r1, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c37a:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800c37c:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c37e:	9300      	str	r3, [sp, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800c380:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c384:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c386:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c388:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c38c:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ENABLE;
 800c38e:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800c390:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800c392:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c396:	6165      	str	r5, [r4, #20]
  hadc2.Init.NbrOfConversion = 2;
 800c398:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c39a:	f002 fb59 	bl	800ea50 <HAL_ADC_Init>
 800c39e:	b108      	cbz	r0, 800c3a4 <MX_ADC2_Init+0x44>
 800c3a0:	b672      	cpsid	i
 800c3a2:	e7fe      	b.n	800c3a2 <MX_ADC2_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_11;
 800c3a4:	220b      	movs	r2, #11
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c3a6:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c3a8:	4669      	mov	r1, sp
 800c3aa:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c3ac:	9501      	str	r5, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_11;
 800c3ae:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c3b0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c3b2:	f002 fceb 	bl	800ed8c <HAL_ADC_ConfigChannel>
 800c3b6:	b108      	cbz	r0, 800c3bc <MX_ADC2_Init+0x5c>
 800c3b8:	b672      	cpsid	i
 800c3ba:	e7fe      	b.n	800c3ba <MX_ADC2_Init+0x5a>
  sConfig.Channel = ADC_CHANNEL_15;
 800c3bc:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c3be:	4669      	mov	r1, sp
 800c3c0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_15;
 800c3c2:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c3c6:	f002 fce1 	bl	800ed8c <HAL_ADC_ConfigChannel>
 800c3ca:	b108      	cbz	r0, 800c3d0 <MX_ADC2_Init+0x70>
 800c3cc:	b672      	cpsid	i
 800c3ce:	e7fe      	b.n	800c3ce <MX_ADC2_Init+0x6e>
}
 800c3d0:	b004      	add	sp, #16
 800c3d2:	bd70      	pop	{r4, r5, r6, pc}
 800c3d4:	20008cac 	.word	0x20008cac
 800c3d8:	40012100 	.word	0x40012100
 800c3dc:	0f000001 	.word	0x0f000001

0800c3e0 <MX_TIM3_Init>:
{
 800c3e0:	b530      	push	{r4, r5, lr}
 800c3e2:	b08d      	sub	sp, #52	; 0x34
  htim3.Instance = TIM3;
 800c3e4:	4c14      	ldr	r4, [pc, #80]	; (800c438 <MX_TIM3_Init+0x58>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c3e6:	2220      	movs	r2, #32
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	a804      	add	r0, sp, #16
 800c3ec:	f007 fd41 	bl	8013e72 <memset>
  htim3.Instance = TIM3;
 800c3f0:	4b12      	ldr	r3, [pc, #72]	; (800c43c <MX_TIM3_Init+0x5c>)
 800c3f2:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 60000-1;
 800c3f4:	f64e 225f 	movw	r2, #59999	; 0xea5f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c3f8:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c3fa:	2503      	movs	r5, #3
  htim3.Init.Period = 60000-1;
 800c3fc:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c3fe:	4620      	mov	r0, r4
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c400:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c402:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 800c404:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c406:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c408:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c40a:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c40c:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c40e:	9302      	str	r3, [sp, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c410:	9503      	str	r5, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c412:	9205      	str	r2, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c414:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c416:	f005 fc4f 	bl	8011cb8 <HAL_TIM_Encoder_Init>
 800c41a:	b108      	cbz	r0, 800c420 <MX_TIM3_Init+0x40>
 800c41c:	b672      	cpsid	i
 800c41e:	e7fe      	b.n	800c41e <MX_TIM3_Init+0x3e>
 800c420:	4603      	mov	r3, r0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c422:	a901      	add	r1, sp, #4
 800c424:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c426:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c42a:	f006 fc3d 	bl	8012ca8 <HAL_TIMEx_MasterConfigSynchronization>
 800c42e:	b108      	cbz	r0, 800c434 <MX_TIM3_Init+0x54>
 800c430:	b672      	cpsid	i
 800c432:	e7fe      	b.n	800c432 <MX_TIM3_Init+0x52>
}
 800c434:	b00d      	add	sp, #52	; 0x34
 800c436:	bd30      	pop	{r4, r5, pc}
 800c438:	20008cf4 	.word	0x20008cf4
 800c43c:	40000400 	.word	0x40000400

0800c440 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800c440:	4b0a      	ldr	r3, [pc, #40]	; (800c46c <MX_USART1_UART_Init+0x2c>)
 800c442:	4a0b      	ldr	r2, [pc, #44]	; (800c470 <MX_USART1_UART_Init+0x30>)
{
 800c444:	b510      	push	{r4, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c446:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 800c448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c44a:	f44f 5416 	mov.w	r4, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c44e:	2200      	movs	r2, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c450:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 800c452:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c454:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c456:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c45a:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c45c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c460:	f006 fd29 	bl	8012eb6 <HAL_UART_Init>
 800c464:	b108      	cbz	r0, 800c46a <MX_USART1_UART_Init+0x2a>
 800c466:	b672      	cpsid	i
 800c468:	e7fe      	b.n	800c468 <MX_USART1_UART_Init+0x28>
}
 800c46a:	bd10      	pop	{r4, pc}
 800c46c:	20008dd4 	.word	0x20008dd4
 800c470:	40011000 	.word	0x40011000

0800c474 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800c474:	b500      	push	{lr}
 800c476:	b083      	sub	sp, #12
 800c478:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c47a:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 800c47e:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c482:	2201      	movs	r2, #1
 800c484:	4803      	ldr	r0, [pc, #12]	; (800c494 <__io_putchar+0x20>)
 800c486:	f006 fd63 	bl	8012f50 <HAL_UART_Transmit>
}
 800c48a:	9801      	ldr	r0, [sp, #4]
 800c48c:	b003      	add	sp, #12
 800c48e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c492:	bf00      	nop
 800c494:	20008dd4 	.word	0x20008dd4

0800c498 <__io_getchar>:
int __io_getchar(void) {
 800c498:	b510      	push	{r4, lr}
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c49a:	4c07      	ldr	r4, [pc, #28]	; (800c4b8 <__io_getchar+0x20>)
int __io_getchar(void) {
 800c49c:	b082      	sub	sp, #8
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c49e:	230a      	movs	r3, #10
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	f10d 0107 	add.w	r1, sp, #7
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f006 fdeb 	bl	8013082 <HAL_UART_Receive>
while(Status != HAL_OK)
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d1f6      	bne.n	800c49e <__io_getchar+0x6>
}
 800c4b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c4b4:	b002      	add	sp, #8
 800c4b6:	bd10      	pop	{r4, pc}
 800c4b8:	20008dd4 	.word	0x20008dd4

0800c4bc <SystemClock_Config>:
{
 800c4bc:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c4be:	2300      	movs	r3, #0
{
 800c4c0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c4c2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800c4c6:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c4ca:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c4ce:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c4d2:	4920      	ldr	r1, [pc, #128]	; (800c554 <SystemClock_Config+0x98>)
 800c4d4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c4d6:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c4d8:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c4da:	4a1f      	ldr	r2, [pc, #124]	; (800c558 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800c4dc:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800c4e0:	6408      	str	r0, [r1, #64]	; 0x40
 800c4e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c4e4:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800c4e8:	9101      	str	r1, [sp, #4]
 800c4ea:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c4ec:	9302      	str	r3, [sp, #8]
 800c4ee:	6813      	ldr	r3, [r2, #0]
 800c4f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4f4:	6013      	str	r3, [r2, #0]
 800c4f6:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c4f8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c4fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c500:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c502:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c504:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c506:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c508:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c50c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c50e:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c510:	22a8      	movs	r2, #168	; 0xa8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c512:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c514:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c516:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c518:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c51a:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c51e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c520:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c522:	f003 ff79 	bl	8010418 <HAL_RCC_OscConfig>
 800c526:	b108      	cbz	r0, 800c52c <SystemClock_Config+0x70>
 800c528:	b672      	cpsid	i
 800c52a:	e7fe      	b.n	800c52a <SystemClock_Config+0x6e>
 800c52c:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c52e:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c530:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c538:	a803      	add	r0, sp, #12
 800c53a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c53c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c53e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c540:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c542:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c546:	f004 f9d7 	bl	80108f8 <HAL_RCC_ClockConfig>
 800c54a:	b108      	cbz	r0, 800c550 <SystemClock_Config+0x94>
 800c54c:	b672      	cpsid	i
 800c54e:	e7fe      	b.n	800c54e <SystemClock_Config+0x92>
}
 800c550:	b014      	add	sp, #80	; 0x50
 800c552:	bd70      	pop	{r4, r5, r6, pc}
 800c554:	40023800 	.word	0x40023800
 800c558:	40007000 	.word	0x40007000

0800c55c <main>:
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 800c560:	f002 f9e2 	bl	800e928 <HAL_Init>
  MX_GPIO_Init();
 800c564:	f7ff fdee 	bl	800c144 <MX_GPIO_Init>
  MX_DMA_Init();
 800c568:	f7ff fe8c 	bl	800c284 <MX_DMA_Init>
  MX_ADC1_Init();
 800c56c:	f7ff feae 	bl	800c2cc <MX_ADC1_Init>
  MX_ADC2_Init();
 800c570:	f7ff fef6 	bl	800c360 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800c574:	f7ff ff64 	bl	800c440 <MX_USART1_UART_Init>
	ADCStart();
 800c578:	f001 f80a 	bl	800d590 <ADCStart>
	MX_TIM3_Init();
 800c57c:	f7ff ff30 	bl	800c3e0 <MX_TIM3_Init>
	BatteryCheck( (int)adc1[2] );
 800c580:	4ba0      	ldr	r3, [pc, #640]	; (800c804 <main+0x2a8>)
  htim2.Instance = TIM2;
 800c582:	4ca1      	ldr	r4, [pc, #644]	; (800c808 <main+0x2ac>)
	BatteryCheck( (int)adc1[2] );
 800c584:	6898      	ldr	r0, [r3, #8]
 800c586:	f002 f8e9 	bl	800e75c <BatteryCheck>
	ADCStop();
 800c58a:	f001 f821 	bl	800d5d0 <ADCStop>
	ModeSelect(0, 7, &startup_mode);
 800c58e:	f10d 0207 	add.w	r2, sp, #7
 800c592:	2107      	movs	r1, #7
 800c594:	2000      	movs	r0, #0
 800c596:	f002 f93b 	bl	800e810 <ModeSelect>
	Signal( startup_mode );
 800c59a:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800c59e:	f002 f8cb 	bl	800e738 <Signal>
  htim2.Init.Period = 4200-1;
 800c5a2:	f241 0667 	movw	r6, #4199	; 0x1067
  SystemClock_Config();
 800c5a6:	f7ff ff89 	bl	800c4bc <SystemClock_Config>
  MX_GPIO_Init();
 800c5aa:	f7ff fdcb 	bl	800c144 <MX_GPIO_Init>
  MX_DMA_Init();
 800c5ae:	f7ff fe69 	bl	800c284 <MX_DMA_Init>
  MX_ADC1_Init();
 800c5b2:	f7ff fe8b 	bl	800c2cc <MX_ADC1_Init>
  MX_ADC2_Init();
 800c5b6:	f7ff fed3 	bl	800c360 <MX_ADC2_Init>
  MX_TIM3_Init();
 800c5ba:	f7ff ff11 	bl	800c3e0 <MX_TIM3_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c5be:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800c5c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c5c4:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800c5c6:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 0;
 800c5c8:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c5ca:	9308      	str	r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c5cc:	9304      	str	r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c5ce:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c5d0:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c5d2:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c5d4:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c5d6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800c5da:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c5dc:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c5de:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800c5e2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800c5e6:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  htim2.Init.Period = 4200-1;
 800c5ea:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c5ec:	f005 f8ca 	bl	8011784 <HAL_TIM_Base_Init>
 800c5f0:	b108      	cbz	r0, 800c5f6 <main+0x9a>
 800c5f2:	b672      	cpsid	i
 800c5f4:	e7fe      	b.n	800c5f4 <main+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c5f6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c5fa:	a908      	add	r1, sp, #32
 800c5fc:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c5fe:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c600:	f005 fe98 	bl	8012334 <HAL_TIM_ConfigClockSource>
 800c604:	b108      	cbz	r0, 800c60a <main+0xae>
 800c606:	b672      	cpsid	i
 800c608:	e7fe      	b.n	800c608 <main+0xac>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c60a:	4620      	mov	r0, r4
 800c60c:	f005 fa88 	bl	8011b20 <HAL_TIM_PWM_Init>
 800c610:	4603      	mov	r3, r0
 800c612:	b108      	cbz	r0, 800c618 <main+0xbc>
 800c614:	b672      	cpsid	i
 800c616:	e7fe      	b.n	800c616 <main+0xba>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c618:	a904      	add	r1, sp, #16
 800c61a:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c61c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c620:	f006 fb42 	bl	8012ca8 <HAL_TIMEx_MasterConfigSynchronization>
 800c624:	b108      	cbz	r0, 800c62a <main+0xce>
 800c626:	b672      	cpsid	i
 800c628:	e7fe      	b.n	800c628 <main+0xcc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c62a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c62c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c630:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c632:	220c      	movs	r2, #12
 800c634:	a90f      	add	r1, sp, #60	; 0x3c
 800c636:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c638:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c63a:	f005 fdb5 	bl	80121a8 <HAL_TIM_PWM_ConfigChannel>
 800c63e:	4605      	mov	r5, r0
 800c640:	b108      	cbz	r0, 800c646 <main+0xea>
 800c642:	b672      	cpsid	i
 800c644:	e7fe      	b.n	800c644 <main+0xe8>
  HAL_TIM_MspPostInit(&htim2);
 800c646:	4620      	mov	r0, r4
 800c648:	f000 fbc0 	bl	800cdcc <HAL_TIM_MspPostInit>
  hspi3.Instance = SPI3;
 800c64c:	4b6f      	ldr	r3, [pc, #444]	; (800c80c <main+0x2b0>)
 800c64e:	4a70      	ldr	r2, [pc, #448]	; (800c810 <main+0x2b4>)
 800c650:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c652:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c656:	2202      	movs	r2, #2
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c658:	6059      	str	r1, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c65a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c65c:	2101      	movs	r1, #1
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c65e:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c662:	6159      	str	r1, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c664:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c666:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800c668:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c66a:	4618      	mov	r0, r3
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800c66c:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800c670:	e9c3 5508 	strd	r5, r5, [r3, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c674:	629d      	str	r5, [r3, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c676:	61d9      	str	r1, [r3, #28]
  hspi3.Init.CRCPolynomial = 10;
 800c678:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c67a:	f004 fb2f 	bl	8010cdc <HAL_SPI_Init>
 800c67e:	4604      	mov	r4, r0
 800c680:	b108      	cbz	r0, 800c686 <main+0x12a>
 800c682:	b672      	cpsid	i
 800c684:	e7fe      	b.n	800c684 <main+0x128>
  htim5.Instance = TIM5;
 800c686:	4d63      	ldr	r5, [pc, #396]	; (800c814 <main+0x2b8>)
  MX_USART1_UART_Init();
 800c688:	f7ff feda 	bl	800c440 <MX_USART1_UART_Init>
  htim5.Instance = TIM5;
 800c68c:	4b62      	ldr	r3, [pc, #392]	; (800c818 <main+0x2bc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c68e:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c690:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c692:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c696:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c69a:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c69e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800c6a2:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800c6a6:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c6aa:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim5.Init.Period = 4200-1;
 800c6ae:	60ee      	str	r6, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c6b0:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c6b2:	61ac      	str	r4, [r5, #24]
  htim5.Instance = TIM5;
 800c6b4:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c6b6:	f005 f865 	bl	8011784 <HAL_TIM_Base_Init>
 800c6ba:	b108      	cbz	r0, 800c6c0 <main+0x164>
 800c6bc:	b672      	cpsid	i
 800c6be:	e7fe      	b.n	800c6be <main+0x162>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c6c0:	a908      	add	r1, sp, #32
 800c6c2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c6c4:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c6c6:	f005 fe35 	bl	8012334 <HAL_TIM_ConfigClockSource>
 800c6ca:	b108      	cbz	r0, 800c6d0 <main+0x174>
 800c6cc:	b672      	cpsid	i
 800c6ce:	e7fe      	b.n	800c6ce <main+0x172>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f005 fa25 	bl	8011b20 <HAL_TIM_PWM_Init>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	b108      	cbz	r0, 800c6de <main+0x182>
 800c6da:	b672      	cpsid	i
 800c6dc:	e7fe      	b.n	800c6dc <main+0x180>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c6de:	4628      	mov	r0, r5
 800c6e0:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c6e2:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c6e6:	f006 fadf 	bl	8012ca8 <HAL_TIMEx_MasterConfigSynchronization>
 800c6ea:	b108      	cbz	r0, 800c6f0 <main+0x194>
 800c6ec:	b672      	cpsid	i
 800c6ee:	e7fe      	b.n	800c6ee <main+0x192>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c6f0:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 0;
 800c6f2:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c6f4:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c6f6:	2204      	movs	r2, #4
 800c6f8:	a90f      	add	r1, sp, #60	; 0x3c
 800c6fa:	4846      	ldr	r0, [pc, #280]	; (800c814 <main+0x2b8>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c6fc:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c6fe:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c702:	f005 fd51 	bl	80121a8 <HAL_TIM_PWM_ConfigChannel>
 800c706:	4605      	mov	r5, r0
 800c708:	b108      	cbz	r0, 800c70e <main+0x1b2>
 800c70a:	b672      	cpsid	i
 800c70c:	e7fe      	b.n	800c70c <main+0x1b0>
  HAL_TIM_MspPostInit(&htim5);
 800c70e:	4841      	ldr	r0, [pc, #260]	; (800c814 <main+0x2b8>)
  htim4.Instance = TIM4;
 800c710:	4c42      	ldr	r4, [pc, #264]	; (800c81c <main+0x2c0>)
  HAL_TIM_MspPostInit(&htim5);
 800c712:	f000 fb5b 	bl	800cdcc <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c716:	2220      	movs	r2, #32
 800c718:	4629      	mov	r1, r5
 800c71a:	a810      	add	r0, sp, #64	; 0x40
 800c71c:	f007 fba9 	bl	8013e72 <memset>
  htim4.Instance = TIM4;
 800c720:	4b3f      	ldr	r3, [pc, #252]	; (800c820 <main+0x2c4>)
 800c722:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 60000-1;
 800c724:	f64e 215f 	movw	r1, #59999	; 0xea5f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c728:	2301      	movs	r3, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c72a:	2203      	movs	r2, #3
  htim4.Init.Period = 60000-1;
 800c72c:	60e1      	str	r1, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c72e:	4620      	mov	r0, r4
 800c730:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c732:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c734:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c736:	9508      	str	r5, [sp, #32]
 800c738:	9509      	str	r5, [sp, #36]	; 0x24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c73a:	e9c4 5501 	strd	r5, r5, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c73e:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c740:	61a5      	str	r5, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c742:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c744:	f005 fab8 	bl	8011cb8 <HAL_TIM_Encoder_Init>
 800c748:	4603      	mov	r3, r0
 800c74a:	b108      	cbz	r0, 800c750 <main+0x1f4>
 800c74c:	b672      	cpsid	i
 800c74e:	e7fe      	b.n	800c74e <main+0x1f2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c750:	4620      	mov	r0, r4
 800c752:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c754:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c758:	f006 faa6 	bl	8012ca8 <HAL_TIMEx_MasterConfigSynchronization>
 800c75c:	4604      	mov	r4, r0
 800c75e:	b108      	cbz	r0, 800c764 <main+0x208>
 800c760:	b672      	cpsid	i
 800c762:	e7fe      	b.n	800c762 <main+0x206>
  htim8.Instance = TIM8;
 800c764:	4d2f      	ldr	r5, [pc, #188]	; (800c824 <main+0x2c8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c766:	9004      	str	r0, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c768:	4601      	mov	r1, r0
 800c76a:	2220      	movs	r2, #32
 800c76c:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c76e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c772:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c774:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c776:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c77a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800c77e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800c782:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c784:	9403      	str	r4, [sp, #12]
  htim8.Init.Prescaler = 168-1;
 800c786:	26a7      	movs	r6, #167	; 0xa7
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c788:	f007 fb73 	bl	8013e72 <memset>
  htim8.Instance = TIM8;
 800c78c:	4926      	ldr	r1, [pc, #152]	; (800c828 <main+0x2cc>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c78e:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 50-1;
 800c790:	2231      	movs	r2, #49	; 0x31
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c792:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c794:	4628      	mov	r0, r5
  htim8.Init.RepetitionCounter = 0;
 800c796:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim8.Instance = TIM8;
 800c79a:	6029      	str	r1, [r5, #0]
  htim8.Init.Period = 50-1;
 800c79c:	60ea      	str	r2, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c79e:	61ab      	str	r3, [r5, #24]
  htim8.Init.Prescaler = 168-1;
 800c7a0:	606e      	str	r6, [r5, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c7a2:	f004 ffef 	bl	8011784 <HAL_TIM_Base_Init>
 800c7a6:	b108      	cbz	r0, 800c7ac <main+0x250>
 800c7a8:	b672      	cpsid	i
 800c7aa:	e7fe      	b.n	800c7aa <main+0x24e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c7ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c7b0:	a904      	add	r1, sp, #16
 800c7b2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c7b4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c7b6:	f005 fdbd 	bl	8012334 <HAL_TIM_ConfigClockSource>
 800c7ba:	b108      	cbz	r0, 800c7c0 <main+0x264>
 800c7bc:	b672      	cpsid	i
 800c7be:	e7fe      	b.n	800c7be <main+0x262>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	f005 f859 	bl	8011878 <HAL_TIM_OC_Init>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	b108      	cbz	r0, 800c7ce <main+0x272>
 800c7ca:	b672      	cpsid	i
 800c7cc:	e7fe      	b.n	800c7cc <main+0x270>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c7ce:	a902      	add	r1, sp, #8
 800c7d0:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c7d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c7d6:	f006 fa67 	bl	8012ca8 <HAL_TIMEx_MasterConfigSynchronization>
 800c7da:	b108      	cbz	r0, 800c7e0 <main+0x284>
 800c7dc:	b672      	cpsid	i
 800c7de:	e7fe      	b.n	800c7de <main+0x282>
  sConfigOC.Pulse = 25-1;
 800c7e0:	2318      	movs	r3, #24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c7e2:	4602      	mov	r2, r0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c7e4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c7e8:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c7ec:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c7ee:	2430      	movs	r4, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c7f0:	a908      	add	r1, sp, #32
 800c7f2:	4628      	mov	r0, r5
  sConfigOC.Pulse = 25-1;
 800c7f4:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c7f6:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c7f8:	f005 fc76 	bl	80120e8 <HAL_TIM_OC_ConfigChannel>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	b1a8      	cbz	r0, 800c82c <main+0x2d0>
 800c800:	b672      	cpsid	i
 800c802:	e7fe      	b.n	800c802 <main+0x2a6>
 800c804:	20007fd0 	.word	0x20007fd0
 800c808:	20007f50 	.word	0x20007f50
 800c80c:	20008d34 	.word	0x20008d34
 800c810:	40003c00 	.word	0x40003c00
 800c814:	20007f90 	.word	0x20007f90
 800c818:	40000c00 	.word	0x40000c00
 800c81c:	20008c6c 	.word	0x20008c6c
 800c820:	40000800 	.word	0x40000800
 800c824:	20008c2c 	.word	0x20008c2c
 800c828:	40010400 	.word	0x40010400
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800c82c:	6829      	ldr	r1, [r5, #0]
 800c82e:	698a      	ldr	r2, [r1, #24]
 800c830:	f042 0208 	orr.w	r2, r2, #8
 800c834:	618a      	str	r2, [r1, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c836:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c838:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c83c:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c83e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800c842:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c846:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c848:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c84a:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c84c:	f006 faa8 	bl	8012da0 <HAL_TIMEx_ConfigBreakDeadTime>
 800c850:	4604      	mov	r4, r0
 800c852:	b108      	cbz	r0, 800c858 <main+0x2fc>
 800c854:	b672      	cpsid	i
 800c856:	e7fe      	b.n	800c856 <main+0x2fa>
  HAL_TIM_MspPostInit(&htim8);
 800c858:	4628      	mov	r0, r5
 800c85a:	f000 fab7 	bl	800cdcc <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 800c85e:	4b2d      	ldr	r3, [pc, #180]	; (800c914 <main+0x3b8>)
 800c860:	492d      	ldr	r1, [pc, #180]	; (800c918 <main+0x3bc>)
  htim1.Init.Prescaler = 168-1;
 800c862:	605e      	str	r6, [r3, #4]
  htim1.Init.Period = 1000-1;
 800c864:	f240 32e7 	movw	r2, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c868:	4618      	mov	r0, r3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c86a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800c86e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c872:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c876:	609c      	str	r4, [r3, #8]
  htim1.Init.RepetitionCounter = 0;
 800c878:	e9c3 4404 	strd	r4, r4, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c87c:	619c      	str	r4, [r3, #24]
  htim1.Instance = TIM1;
 800c87e:	6019      	str	r1, [r3, #0]
  htim1.Init.Period = 1000-1;
 800c880:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c882:	f004 ff7f 	bl	8011784 <HAL_TIM_Base_Init>
 800c886:	b108      	cbz	r0, 800c88c <main+0x330>
 800c888:	b672      	cpsid	i
 800c88a:	e7fe      	b.n	800c88a <main+0x32e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c88c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c890:	a90f      	add	r1, sp, #60	; 0x3c
 800c892:	4820      	ldr	r0, [pc, #128]	; (800c914 <main+0x3b8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c894:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c896:	f005 fd4d 	bl	8012334 <HAL_TIM_ConfigClockSource>
 800c89a:	4603      	mov	r3, r0
 800c89c:	b108      	cbz	r0, 800c8a2 <main+0x346>
 800c89e:	b672      	cpsid	i
 800c8a0:	e7fe      	b.n	800c8a0 <main+0x344>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c8a2:	a908      	add	r1, sp, #32
 800c8a4:	481b      	ldr	r0, [pc, #108]	; (800c914 <main+0x3b8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c8a6:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c8aa:	f006 f9fd 	bl	8012ca8 <HAL_TIMEx_MasterConfigSynchronization>
 800c8ae:	b118      	cbz	r0, 800c8b8 <main+0x35c>
 800c8b0:	b672      	cpsid	i
 800c8b2:	e7fe      	b.n	800c8b2 <main+0x356>
		  Explore();
 800c8b4:	f7ff fa98 	bl	800bde8 <Explore>
	  switch( startup_mode )
 800c8b8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800c8bc:	2b07      	cmp	r3, #7
 800c8be:	d8fd      	bhi.n	800c8bc <main+0x360>
 800c8c0:	a201      	add	r2, pc, #4	; (adr r2, 800c8c8 <main+0x36c>)
 800c8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c6:	bf00      	nop
 800c8c8:	0800c8e9 	.word	0x0800c8e9
 800c8cc:	0800c90d 	.word	0x0800c90d
 800c8d0:	0800c907 	.word	0x0800c907
 800c8d4:	0800c901 	.word	0x0800c901
 800c8d8:	0800c8fb 	.word	0x0800c8fb
 800c8dc:	0800c8f5 	.word	0x0800c8f5
 800c8e0:	0800c8b5 	.word	0x0800c8b5
 800c8e4:	0800c8ef 	.word	0x0800c8ef
		  ParameterSetting();
 800c8e8:	f7fe ff88 	bl	800b7fc <ParameterSetting>
		  break;
 800c8ec:	e7e4      	b.n	800c8b8 <main+0x35c>
		  WritingFree();
 800c8ee:	f7ff f825 	bl	800b93c <WritingFree>
		  break;
 800c8f2:	e7e1      	b.n	800c8b8 <main+0x35c>
		  TestIMU();
 800c8f4:	f7ff fbb4 	bl	800c060 <TestIMU>
		  break;
 800c8f8:	e7de      	b.n	800c8b8 <main+0x35c>
		  FastestRun();
 800c8fa:	f7ff f885 	bl	800ba08 <FastestRun>
		  break;
 800c8fe:	e7db      	b.n	800c8b8 <main+0x35c>
		  Debug();
 800c900:	f7fe ff12 	bl	800b728 <Debug>
		  break;
 800c904:	e7d8      	b.n	800c8b8 <main+0x35c>
		  GainTestDWall();
 800c906:	f7fe ffb7 	bl	800b878 <GainTestDWall>
		  break;
 800c90a:	e7d5      	b.n	800c8b8 <main+0x35c>
		  GainTestRWall();
 800c90c:	f7fe ff7e 	bl	800b80c <GainTestRWall>
		  break;
 800c910:	e7d2      	b.n	800c8b8 <main+0x35c>
 800c912:	bf00      	nop
 800c914:	20008e74 	.word	0x20008e74
 800c918:	40010000 	.word	0x40010000

0800c91c <Error_Handler>:
 800c91c:	b672      	cpsid	i
 800c91e:	e7fe      	b.n	800c91e <Error_Handler+0x2>

0800c920 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c926:	2300      	movs	r3, #0
 800c928:	607b      	str	r3, [r7, #4]
 800c92a:	4b10      	ldr	r3, [pc, #64]	; (800c96c <HAL_MspInit+0x4c>)
 800c92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c92e:	4a0f      	ldr	r2, [pc, #60]	; (800c96c <HAL_MspInit+0x4c>)
 800c930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c934:	6453      	str	r3, [r2, #68]	; 0x44
 800c936:	4b0d      	ldr	r3, [pc, #52]	; (800c96c <HAL_MspInit+0x4c>)
 800c938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c93a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c93e:	607b      	str	r3, [r7, #4]
 800c940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c942:	2300      	movs	r3, #0
 800c944:	603b      	str	r3, [r7, #0]
 800c946:	4b09      	ldr	r3, [pc, #36]	; (800c96c <HAL_MspInit+0x4c>)
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	4a08      	ldr	r2, [pc, #32]	; (800c96c <HAL_MspInit+0x4c>)
 800c94c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c950:	6413      	str	r3, [r2, #64]	; 0x40
 800c952:	4b06      	ldr	r3, [pc, #24]	; (800c96c <HAL_MspInit+0x4c>)
 800c954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c95a:	603b      	str	r3, [r7, #0]
 800c95c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c95e:	bf00      	nop
 800c960:	370c      	adds	r7, #12
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	40023800 	.word	0x40023800

0800c970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b08c      	sub	sp, #48	; 0x30
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c978:	f107 031c 	add.w	r3, r7, #28
 800c97c:	2200      	movs	r2, #0
 800c97e:	601a      	str	r2, [r3, #0]
 800c980:	605a      	str	r2, [r3, #4]
 800c982:	609a      	str	r2, [r3, #8]
 800c984:	60da      	str	r2, [r3, #12]
 800c986:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a6b      	ldr	r2, [pc, #428]	; (800cb3c <HAL_ADC_MspInit+0x1cc>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d172      	bne.n	800ca78 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c992:	2300      	movs	r3, #0
 800c994:	61bb      	str	r3, [r7, #24]
 800c996:	4b6a      	ldr	r3, [pc, #424]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800c998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c99a:	4a69      	ldr	r2, [pc, #420]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800c99c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9a0:	6453      	str	r3, [r2, #68]	; 0x44
 800c9a2:	4b67      	ldr	r3, [pc, #412]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800c9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9aa:	61bb      	str	r3, [r7, #24]
 800c9ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	617b      	str	r3, [r7, #20]
 800c9b2:	4b63      	ldr	r3, [pc, #396]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800c9b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b6:	4a62      	ldr	r2, [pc, #392]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800c9b8:	f043 0304 	orr.w	r3, r3, #4
 800c9bc:	6313      	str	r3, [r2, #48]	; 0x30
 800c9be:	4b60      	ldr	r3, [pc, #384]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800c9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c2:	f003 0304 	and.w	r3, r3, #4
 800c9c6:	617b      	str	r3, [r7, #20]
 800c9c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	613b      	str	r3, [r7, #16]
 800c9ce:	4b5c      	ldr	r3, [pc, #368]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800c9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d2:	4a5b      	ldr	r2, [pc, #364]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800c9d4:	f043 0302 	orr.w	r3, r3, #2
 800c9d8:	6313      	str	r3, [r2, #48]	; 0x30
 800c9da:	4b59      	ldr	r3, [pc, #356]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800c9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9de:	f003 0302 	and.w	r3, r3, #2
 800c9e2:	613b      	str	r3, [r7, #16]
 800c9e4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800c9e6:	2311      	movs	r3, #17
 800c9e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c9f2:	f107 031c 	add.w	r3, r7, #28
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4852      	ldr	r0, [pc, #328]	; (800cb44 <HAL_ADC_MspInit+0x1d4>)
 800c9fa:	f003 fb41 	bl	8010080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c9fe:	2302      	movs	r3, #2
 800ca00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ca02:	2303      	movs	r3, #3
 800ca04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca0a:	f107 031c 	add.w	r3, r7, #28
 800ca0e:	4619      	mov	r1, r3
 800ca10:	484d      	ldr	r0, [pc, #308]	; (800cb48 <HAL_ADC_MspInit+0x1d8>)
 800ca12:	f003 fb35 	bl	8010080 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800ca16:	4b4d      	ldr	r3, [pc, #308]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca18:	4a4d      	ldr	r2, [pc, #308]	; (800cb50 <HAL_ADC_MspInit+0x1e0>)
 800ca1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800ca1c:	4b4b      	ldr	r3, [pc, #300]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca22:	4b4a      	ldr	r3, [pc, #296]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca28:	4b48      	ldr	r3, [pc, #288]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ca2e:	4b47      	ldr	r3, [pc, #284]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ca34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ca36:	4b45      	ldr	r3, [pc, #276]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ca3e:	4b43      	ldr	r3, [pc, #268]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ca44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800ca46:	4b41      	ldr	r3, [pc, #260]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca48:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800ca4e:	4b3f      	ldr	r3, [pc, #252]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ca54:	4b3d      	ldr	r3, [pc, #244]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800ca5a:	483c      	ldr	r0, [pc, #240]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca5c:	f002 fd48 	bl	800f4f0 <HAL_DMA_Init>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800ca66:	f7ff ff59 	bl	800c91c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a37      	ldr	r2, [pc, #220]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca6e:	639a      	str	r2, [r3, #56]	; 0x38
 800ca70:	4a36      	ldr	r2, [pc, #216]	; (800cb4c <HAL_ADC_MspInit+0x1dc>)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800ca76:	e05d      	b.n	800cb34 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a35      	ldr	r2, [pc, #212]	; (800cb54 <HAL_ADC_MspInit+0x1e4>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d158      	bne.n	800cb34 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800ca82:	2300      	movs	r3, #0
 800ca84:	60fb      	str	r3, [r7, #12]
 800ca86:	4b2e      	ldr	r3, [pc, #184]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800ca88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca8a:	4a2d      	ldr	r2, [pc, #180]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800ca8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca90:	6453      	str	r3, [r2, #68]	; 0x44
 800ca92:	4b2b      	ldr	r3, [pc, #172]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800ca94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca9e:	2300      	movs	r3, #0
 800caa0:	60bb      	str	r3, [r7, #8]
 800caa2:	4b27      	ldr	r3, [pc, #156]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800caa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caa6:	4a26      	ldr	r2, [pc, #152]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800caa8:	f043 0304 	orr.w	r3, r3, #4
 800caac:	6313      	str	r3, [r2, #48]	; 0x30
 800caae:	4b24      	ldr	r3, [pc, #144]	; (800cb40 <HAL_ADC_MspInit+0x1d0>)
 800cab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab2:	f003 0304 	and.w	r3, r3, #4
 800cab6:	60bb      	str	r3, [r7, #8]
 800cab8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800caba:	2322      	movs	r3, #34	; 0x22
 800cabc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cabe:	2303      	movs	r3, #3
 800cac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cac2:	2300      	movs	r3, #0
 800cac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cac6:	f107 031c 	add.w	r3, r7, #28
 800caca:	4619      	mov	r1, r3
 800cacc:	481d      	ldr	r0, [pc, #116]	; (800cb44 <HAL_ADC_MspInit+0x1d4>)
 800cace:	f003 fad7 	bl	8010080 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800cad2:	4b21      	ldr	r3, [pc, #132]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800cad4:	4a21      	ldr	r2, [pc, #132]	; (800cb5c <HAL_ADC_MspInit+0x1ec>)
 800cad6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800cad8:	4b1f      	ldr	r3, [pc, #124]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800cada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cade:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cae0:	4b1d      	ldr	r3, [pc, #116]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800cae6:	4b1c      	ldr	r3, [pc, #112]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800cae8:	2200      	movs	r2, #0
 800caea:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800caec:	4b1a      	ldr	r3, [pc, #104]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800caee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800caf2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800caf4:	4b18      	ldr	r3, [pc, #96]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800caf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cafa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cafc:	4b16      	ldr	r3, [pc, #88]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800cafe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cb02:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800cb04:	4b14      	ldr	r3, [pc, #80]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800cb06:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb0a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800cb0c:	4b12      	ldr	r3, [pc, #72]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cb12:	4b11      	ldr	r3, [pc, #68]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800cb14:	2200      	movs	r2, #0
 800cb16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800cb18:	480f      	ldr	r0, [pc, #60]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800cb1a:	f002 fce9 	bl	800f4f0 <HAL_DMA_Init>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d001      	beq.n	800cb28 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800cb24:	f7ff fefa 	bl	800c91c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a0b      	ldr	r2, [pc, #44]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800cb2c:	639a      	str	r2, [r3, #56]	; 0x38
 800cb2e:	4a0a      	ldr	r2, [pc, #40]	; (800cb58 <HAL_ADC_MspInit+0x1e8>)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6393      	str	r3, [r2, #56]	; 0x38
}
 800cb34:	bf00      	nop
 800cb36:	3730      	adds	r7, #48	; 0x30
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	40012000 	.word	0x40012000
 800cb40:	40023800 	.word	0x40023800
 800cb44:	40020800 	.word	0x40020800
 800cb48:	40020400 	.word	0x40020400
 800cb4c:	20008e14 	.word	0x20008e14
 800cb50:	40026410 	.word	0x40026410
 800cb54:	40012100 	.word	0x40012100
 800cb58:	20008eb4 	.word	0x20008eb4
 800cb5c:	40026440 	.word	0x40026440

0800cb60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b08a      	sub	sp, #40	; 0x28
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb68:	f107 0314 	add.w	r3, r7, #20
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	601a      	str	r2, [r3, #0]
 800cb70:	605a      	str	r2, [r3, #4]
 800cb72:	609a      	str	r2, [r3, #8]
 800cb74:	60da      	str	r2, [r3, #12]
 800cb76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a19      	ldr	r2, [pc, #100]	; (800cbe4 <HAL_SPI_MspInit+0x84>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d12c      	bne.n	800cbdc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800cb82:	2300      	movs	r3, #0
 800cb84:	613b      	str	r3, [r7, #16]
 800cb86:	4b18      	ldr	r3, [pc, #96]	; (800cbe8 <HAL_SPI_MspInit+0x88>)
 800cb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8a:	4a17      	ldr	r2, [pc, #92]	; (800cbe8 <HAL_SPI_MspInit+0x88>)
 800cb8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb90:	6413      	str	r3, [r2, #64]	; 0x40
 800cb92:	4b15      	ldr	r3, [pc, #84]	; (800cbe8 <HAL_SPI_MspInit+0x88>)
 800cb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb9a:	613b      	str	r3, [r7, #16]
 800cb9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb9e:	2300      	movs	r3, #0
 800cba0:	60fb      	str	r3, [r7, #12]
 800cba2:	4b11      	ldr	r3, [pc, #68]	; (800cbe8 <HAL_SPI_MspInit+0x88>)
 800cba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba6:	4a10      	ldr	r2, [pc, #64]	; (800cbe8 <HAL_SPI_MspInit+0x88>)
 800cba8:	f043 0304 	orr.w	r3, r3, #4
 800cbac:	6313      	str	r3, [r2, #48]	; 0x30
 800cbae:	4b0e      	ldr	r3, [pc, #56]	; (800cbe8 <HAL_SPI_MspInit+0x88>)
 800cbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb2:	f003 0304 	and.w	r3, r3, #4
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800cbba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800cbbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbc8:	2303      	movs	r3, #3
 800cbca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800cbcc:	2306      	movs	r3, #6
 800cbce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbd0:	f107 0314 	add.w	r3, r7, #20
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4805      	ldr	r0, [pc, #20]	; (800cbec <HAL_SPI_MspInit+0x8c>)
 800cbd8:	f003 fa52 	bl	8010080 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800cbdc:	bf00      	nop
 800cbde:	3728      	adds	r7, #40	; 0x28
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	40003c00 	.word	0x40003c00
 800cbe8:	40023800 	.word	0x40023800
 800cbec:	40020800 	.word	0x40020800

0800cbf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a30      	ldr	r2, [pc, #192]	; (800ccc0 <HAL_TIM_Base_MspInit+0xd0>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d116      	bne.n	800cc30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800cc02:	2300      	movs	r3, #0
 800cc04:	617b      	str	r3, [r7, #20]
 800cc06:	4b2f      	ldr	r3, [pc, #188]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc0a:	4a2e      	ldr	r2, [pc, #184]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc0c:	f043 0301 	orr.w	r3, r3, #1
 800cc10:	6453      	str	r3, [r2, #68]	; 0x44
 800cc12:	4b2c      	ldr	r3, [pc, #176]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc16:	f003 0301 	and.w	r3, r3, #1
 800cc1a:	617b      	str	r3, [r7, #20]
 800cc1c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800cc1e:	2200      	movs	r2, #0
 800cc20:	2100      	movs	r1, #0
 800cc22:	2019      	movs	r0, #25
 800cc24:	f002 fc2d 	bl	800f482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800cc28:	2019      	movs	r0, #25
 800cc2a:	f002 fc46 	bl	800f4ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800cc2e:	e042      	b.n	800ccb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc38:	d10e      	bne.n	800cc58 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	613b      	str	r3, [r7, #16]
 800cc3e:	4b21      	ldr	r3, [pc, #132]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc42:	4a20      	ldr	r2, [pc, #128]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc44:	f043 0301 	orr.w	r3, r3, #1
 800cc48:	6413      	str	r3, [r2, #64]	; 0x40
 800cc4a:	4b1e      	ldr	r3, [pc, #120]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc4e:	f003 0301 	and.w	r3, r3, #1
 800cc52:	613b      	str	r3, [r7, #16]
 800cc54:	693b      	ldr	r3, [r7, #16]
}
 800cc56:	e02e      	b.n	800ccb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a1a      	ldr	r2, [pc, #104]	; (800ccc8 <HAL_TIM_Base_MspInit+0xd8>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d10e      	bne.n	800cc80 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800cc62:	2300      	movs	r3, #0
 800cc64:	60fb      	str	r3, [r7, #12]
 800cc66:	4b17      	ldr	r3, [pc, #92]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc6a:	4a16      	ldr	r2, [pc, #88]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc6c:	f043 0308 	orr.w	r3, r3, #8
 800cc70:	6413      	str	r3, [r2, #64]	; 0x40
 800cc72:	4b14      	ldr	r3, [pc, #80]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc76:	f003 0308 	and.w	r3, r3, #8
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
}
 800cc7e:	e01a      	b.n	800ccb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a11      	ldr	r2, [pc, #68]	; (800cccc <HAL_TIM_Base_MspInit+0xdc>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d115      	bne.n	800ccb6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	60bb      	str	r3, [r7, #8]
 800cc8e:	4b0d      	ldr	r3, [pc, #52]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc92:	4a0c      	ldr	r2, [pc, #48]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc94:	f043 0302 	orr.w	r3, r3, #2
 800cc98:	6453      	str	r3, [r2, #68]	; 0x44
 800cc9a:	4b0a      	ldr	r3, [pc, #40]	; (800ccc4 <HAL_TIM_Base_MspInit+0xd4>)
 800cc9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc9e:	f003 0302 	and.w	r3, r3, #2
 800cca2:	60bb      	str	r3, [r7, #8]
 800cca4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800cca6:	2200      	movs	r2, #0
 800cca8:	2101      	movs	r1, #1
 800ccaa:	202c      	movs	r0, #44	; 0x2c
 800ccac:	f002 fbe9 	bl	800f482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800ccb0:	202c      	movs	r0, #44	; 0x2c
 800ccb2:	f002 fc02 	bl	800f4ba <HAL_NVIC_EnableIRQ>
}
 800ccb6:	bf00      	nop
 800ccb8:	3718      	adds	r7, #24
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	40010000 	.word	0x40010000
 800ccc4:	40023800 	.word	0x40023800
 800ccc8:	40000c00 	.word	0x40000c00
 800cccc:	40010400 	.word	0x40010400

0800ccd0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08c      	sub	sp, #48	; 0x30
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccd8:	f107 031c 	add.w	r3, r7, #28
 800ccdc:	2200      	movs	r2, #0
 800ccde:	601a      	str	r2, [r3, #0]
 800cce0:	605a      	str	r2, [r3, #4]
 800cce2:	609a      	str	r2, [r3, #8]
 800cce4:	60da      	str	r2, [r3, #12]
 800cce6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a32      	ldr	r2, [pc, #200]	; (800cdb8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d12c      	bne.n	800cd4c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	61bb      	str	r3, [r7, #24]
 800ccf6:	4b31      	ldr	r3, [pc, #196]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	4a30      	ldr	r2, [pc, #192]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800ccfc:	f043 0302 	orr.w	r3, r3, #2
 800cd00:	6413      	str	r3, [r2, #64]	; 0x40
 800cd02:	4b2e      	ldr	r3, [pc, #184]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800cd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd06:	f003 0302 	and.w	r3, r3, #2
 800cd0a:	61bb      	str	r3, [r7, #24]
 800cd0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd0e:	2300      	movs	r3, #0
 800cd10:	617b      	str	r3, [r7, #20]
 800cd12:	4b2a      	ldr	r3, [pc, #168]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800cd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd16:	4a29      	ldr	r2, [pc, #164]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800cd18:	f043 0301 	orr.w	r3, r3, #1
 800cd1c:	6313      	str	r3, [r2, #48]	; 0x30
 800cd1e:	4b27      	ldr	r3, [pc, #156]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800cd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	617b      	str	r3, [r7, #20]
 800cd28:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cd2a:	23c0      	movs	r3, #192	; 0xc0
 800cd2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd2e:	2302      	movs	r3, #2
 800cd30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd36:	2300      	movs	r3, #0
 800cd38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800cd3a:	2302      	movs	r3, #2
 800cd3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd3e:	f107 031c 	add.w	r3, r7, #28
 800cd42:	4619      	mov	r1, r3
 800cd44:	481e      	ldr	r0, [pc, #120]	; (800cdc0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800cd46:	f003 f99b 	bl	8010080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800cd4a:	e030      	b.n	800cdae <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a1c      	ldr	r2, [pc, #112]	; (800cdc4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d12b      	bne.n	800cdae <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800cd56:	2300      	movs	r3, #0
 800cd58:	613b      	str	r3, [r7, #16]
 800cd5a:	4b18      	ldr	r3, [pc, #96]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800cd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5e:	4a17      	ldr	r2, [pc, #92]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800cd60:	f043 0304 	orr.w	r3, r3, #4
 800cd64:	6413      	str	r3, [r2, #64]	; 0x40
 800cd66:	4b15      	ldr	r3, [pc, #84]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800cd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd6a:	f003 0304 	and.w	r3, r3, #4
 800cd6e:	613b      	str	r3, [r7, #16]
 800cd70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd72:	2300      	movs	r3, #0
 800cd74:	60fb      	str	r3, [r7, #12]
 800cd76:	4b11      	ldr	r3, [pc, #68]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800cd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7a:	4a10      	ldr	r2, [pc, #64]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800cd7c:	f043 0302 	orr.w	r3, r3, #2
 800cd80:	6313      	str	r3, [r2, #48]	; 0x30
 800cd82:	4b0e      	ldr	r3, [pc, #56]	; (800cdbc <HAL_TIM_Encoder_MspInit+0xec>)
 800cd84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd86:	f003 0302 	and.w	r3, r3, #2
 800cd8a:	60fb      	str	r3, [r7, #12]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cd8e:	23c0      	movs	r3, #192	; 0xc0
 800cd90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd92:	2302      	movs	r3, #2
 800cd94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd96:	2300      	movs	r3, #0
 800cd98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800cd9e:	2302      	movs	r3, #2
 800cda0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cda2:	f107 031c 	add.w	r3, r7, #28
 800cda6:	4619      	mov	r1, r3
 800cda8:	4807      	ldr	r0, [pc, #28]	; (800cdc8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800cdaa:	f003 f969 	bl	8010080 <HAL_GPIO_Init>
}
 800cdae:	bf00      	nop
 800cdb0:	3730      	adds	r7, #48	; 0x30
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	40000400 	.word	0x40000400
 800cdbc:	40023800 	.word	0x40023800
 800cdc0:	40020000 	.word	0x40020000
 800cdc4:	40000800 	.word	0x40000800
 800cdc8:	40020400 	.word	0x40020400

0800cdcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08c      	sub	sp, #48	; 0x30
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdd4:	f107 031c 	add.w	r3, r7, #28
 800cdd8:	2200      	movs	r2, #0
 800cdda:	601a      	str	r2, [r3, #0]
 800cddc:	605a      	str	r2, [r3, #4]
 800cdde:	609a      	str	r2, [r3, #8]
 800cde0:	60da      	str	r2, [r3, #12]
 800cde2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdec:	d11e      	bne.n	800ce2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdee:	2300      	movs	r3, #0
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	4b43      	ldr	r3, [pc, #268]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800cdf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf6:	4a42      	ldr	r2, [pc, #264]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800cdf8:	f043 0301 	orr.w	r3, r3, #1
 800cdfc:	6313      	str	r3, [r2, #48]	; 0x30
 800cdfe:	4b40      	ldr	r3, [pc, #256]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800ce00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce02:	f003 0301 	and.w	r3, r3, #1
 800ce06:	61bb      	str	r3, [r7, #24]
 800ce08:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ce0a:	2308      	movs	r3, #8
 800ce0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce0e:	2302      	movs	r3, #2
 800ce10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce12:	2300      	movs	r3, #0
 800ce14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce16:	2303      	movs	r3, #3
 800ce18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce1e:	f107 031c 	add.w	r3, r7, #28
 800ce22:	4619      	mov	r1, r3
 800ce24:	4837      	ldr	r0, [pc, #220]	; (800cf04 <HAL_TIM_MspPostInit+0x138>)
 800ce26:	f003 f92b 	bl	8010080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800ce2a:	e064      	b.n	800cef6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a35      	ldr	r2, [pc, #212]	; (800cf08 <HAL_TIM_MspPostInit+0x13c>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d11e      	bne.n	800ce74 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce36:	2300      	movs	r3, #0
 800ce38:	617b      	str	r3, [r7, #20]
 800ce3a:	4b31      	ldr	r3, [pc, #196]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800ce3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce3e:	4a30      	ldr	r2, [pc, #192]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800ce40:	f043 0301 	orr.w	r3, r3, #1
 800ce44:	6313      	str	r3, [r2, #48]	; 0x30
 800ce46:	4b2e      	ldr	r3, [pc, #184]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800ce48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce4a:	f003 0301 	and.w	r3, r3, #1
 800ce4e:	617b      	str	r3, [r7, #20]
 800ce50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ce52:	2302      	movs	r3, #2
 800ce54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce56:	2302      	movs	r3, #2
 800ce58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ce62:	2302      	movs	r3, #2
 800ce64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce66:	f107 031c 	add.w	r3, r7, #28
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4825      	ldr	r0, [pc, #148]	; (800cf04 <HAL_TIM_MspPostInit+0x138>)
 800ce6e:	f003 f907 	bl	8010080 <HAL_GPIO_Init>
}
 800ce72:	e040      	b.n	800cef6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a24      	ldr	r2, [pc, #144]	; (800cf0c <HAL_TIM_MspPostInit+0x140>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d13b      	bne.n	800cef6 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce7e:	2300      	movs	r3, #0
 800ce80:	613b      	str	r3, [r7, #16]
 800ce82:	4b1f      	ldr	r3, [pc, #124]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800ce84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce86:	4a1e      	ldr	r2, [pc, #120]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800ce88:	f043 0301 	orr.w	r3, r3, #1
 800ce8c:	6313      	str	r3, [r2, #48]	; 0x30
 800ce8e:	4b1c      	ldr	r3, [pc, #112]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800ce90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce92:	f003 0301 	and.w	r3, r3, #1
 800ce96:	613b      	str	r3, [r7, #16]
 800ce98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	60fb      	str	r3, [r7, #12]
 800ce9e:	4b18      	ldr	r3, [pc, #96]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800cea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cea2:	4a17      	ldr	r2, [pc, #92]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800cea4:	f043 0304 	orr.w	r3, r3, #4
 800cea8:	6313      	str	r3, [r2, #48]	; 0x30
 800ceaa:	4b15      	ldr	r3, [pc, #84]	; (800cf00 <HAL_TIM_MspPostInit+0x134>)
 800ceac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceae:	f003 0304 	and.w	r3, r3, #4
 800ceb2:	60fb      	str	r3, [r7, #12]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ceb6:	2320      	movs	r3, #32
 800ceb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceba:	2302      	movs	r3, #2
 800cebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cebe:	2300      	movs	r3, #0
 800cec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cec2:	2300      	movs	r3, #0
 800cec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cec6:	2303      	movs	r3, #3
 800cec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ceca:	f107 031c 	add.w	r3, r7, #28
 800cece:	4619      	mov	r1, r3
 800ced0:	480c      	ldr	r0, [pc, #48]	; (800cf04 <HAL_TIM_MspPostInit+0x138>)
 800ced2:	f003 f8d5 	bl	8010080 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ced6:	2340      	movs	r3, #64	; 0x40
 800ced8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceda:	2302      	movs	r3, #2
 800cedc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cede:	2300      	movs	r3, #0
 800cee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cee2:	2300      	movs	r3, #0
 800cee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cee6:	2303      	movs	r3, #3
 800cee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ceea:	f107 031c 	add.w	r3, r7, #28
 800ceee:	4619      	mov	r1, r3
 800cef0:	4807      	ldr	r0, [pc, #28]	; (800cf10 <HAL_TIM_MspPostInit+0x144>)
 800cef2:	f003 f8c5 	bl	8010080 <HAL_GPIO_Init>
}
 800cef6:	bf00      	nop
 800cef8:	3730      	adds	r7, #48	; 0x30
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	40023800 	.word	0x40023800
 800cf04:	40020000 	.word	0x40020000
 800cf08:	40000c00 	.word	0x40000c00
 800cf0c:	40010400 	.word	0x40010400
 800cf10:	40020800 	.word	0x40020800

0800cf14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b08a      	sub	sp, #40	; 0x28
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf1c:	f107 0314 	add.w	r3, r7, #20
 800cf20:	2200      	movs	r2, #0
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	605a      	str	r2, [r3, #4]
 800cf26:	609a      	str	r2, [r3, #8]
 800cf28:	60da      	str	r2, [r3, #12]
 800cf2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a19      	ldr	r2, [pc, #100]	; (800cf98 <HAL_UART_MspInit+0x84>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d12c      	bne.n	800cf90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800cf36:	2300      	movs	r3, #0
 800cf38:	613b      	str	r3, [r7, #16]
 800cf3a:	4b18      	ldr	r3, [pc, #96]	; (800cf9c <HAL_UART_MspInit+0x88>)
 800cf3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf3e:	4a17      	ldr	r2, [pc, #92]	; (800cf9c <HAL_UART_MspInit+0x88>)
 800cf40:	f043 0310 	orr.w	r3, r3, #16
 800cf44:	6453      	str	r3, [r2, #68]	; 0x44
 800cf46:	4b15      	ldr	r3, [pc, #84]	; (800cf9c <HAL_UART_MspInit+0x88>)
 800cf48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf4a:	f003 0310 	and.w	r3, r3, #16
 800cf4e:	613b      	str	r3, [r7, #16]
 800cf50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf52:	2300      	movs	r3, #0
 800cf54:	60fb      	str	r3, [r7, #12]
 800cf56:	4b11      	ldr	r3, [pc, #68]	; (800cf9c <HAL_UART_MspInit+0x88>)
 800cf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5a:	4a10      	ldr	r2, [pc, #64]	; (800cf9c <HAL_UART_MspInit+0x88>)
 800cf5c:	f043 0301 	orr.w	r3, r3, #1
 800cf60:	6313      	str	r3, [r2, #48]	; 0x30
 800cf62:	4b0e      	ldr	r3, [pc, #56]	; (800cf9c <HAL_UART_MspInit+0x88>)
 800cf64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	60fb      	str	r3, [r7, #12]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cf6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800cf72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf74:	2302      	movs	r3, #2
 800cf76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf7c:	2303      	movs	r3, #3
 800cf7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cf80:	2307      	movs	r3, #7
 800cf82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf84:	f107 0314 	add.w	r3, r7, #20
 800cf88:	4619      	mov	r1, r3
 800cf8a:	4805      	ldr	r0, [pc, #20]	; (800cfa0 <HAL_UART_MspInit+0x8c>)
 800cf8c:	f003 f878 	bl	8010080 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800cf90:	bf00      	nop
 800cf92:	3728      	adds	r7, #40	; 0x28
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	40011000 	.word	0x40011000
 800cf9c:	40023800 	.word	0x40023800
 800cfa0:	40020000 	.word	0x40020000

0800cfa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800cfa8:	e7fe      	b.n	800cfa8 <NMI_Handler+0x4>

0800cfaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cfaa:	b480      	push	{r7}
 800cfac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cfae:	e7fe      	b.n	800cfae <HardFault_Handler+0x4>

0800cfb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cfb4:	e7fe      	b.n	800cfb4 <MemManage_Handler+0x4>

0800cfb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cfb6:	b480      	push	{r7}
 800cfb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cfba:	e7fe      	b.n	800cfba <BusFault_Handler+0x4>

0800cfbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cfc0:	e7fe      	b.n	800cfc0 <UsageFault_Handler+0x4>

0800cfc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cfc6:	bf00      	nop
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cfd4:	bf00      	nop
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cfde:	b480      	push	{r7}
 800cfe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cfe2:	bf00      	nop
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cff0:	f001 fcec 	bl	800e9cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cff4:	bf00      	nop
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cffc:	4802      	ldr	r0, [pc, #8]	; (800d008 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800cffe:	f004 ff6b 	bl	8011ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800d002:	bf00      	nop
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	20008e74 	.word	0x20008e74

0800d00c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800d010:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d014:	f003 f9e8 	bl	80103e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800d018:	bf00      	nop
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d020:	4802      	ldr	r0, [pc, #8]	; (800d02c <TIM8_UP_TIM13_IRQHandler+0x10>)
 800d022:	f004 ff59 	bl	8011ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800d026:	bf00      	nop
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	20008c2c 	.word	0x20008c2c

0800d030 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d034:	4802      	ldr	r0, [pc, #8]	; (800d040 <DMA2_Stream0_IRQHandler+0x10>)
 800d036:	f002 fbd1 	bl	800f7dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800d03a:	bf00      	nop
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	20008e14 	.word	0x20008e14

0800d044 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d048:	4802      	ldr	r0, [pc, #8]	; (800d054 <DMA2_Stream2_IRQHandler+0x10>)
 800d04a:	f002 fbc7 	bl	800f7dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800d04e:	bf00      	nop
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	20008eb4 	.word	0x20008eb4

0800d058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d058:	b480      	push	{r7}
 800d05a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d05c:	4b08      	ldr	r3, [pc, #32]	; (800d080 <SystemInit+0x28>)
 800d05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d062:	4a07      	ldr	r2, [pc, #28]	; (800d080 <SystemInit+0x28>)
 800d064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d06c:	4b04      	ldr	r3, [pc, #16]	; (800d080 <SystemInit+0x28>)
 800d06e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d072:	609a      	str	r2, [r3, #8]
#endif
}
 800d074:	bf00      	nop
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	e000ed00 	.word	0xe000ed00

0800d084 <initSearchData>:
#include "MicroMouse.h"
#include "Action.h"
#include "Search.h"

void initSearchData(maze_node *my_maze, profile *Mouse)
{
 800d084:	b570      	push	{r4, r5, r6, lr}
 800d086:	4604      	mov	r4, r0
 800d088:	b082      	sub	sp, #8
 800d08a:	460d      	mov	r5, r1
    initMaze(my_maze);
 800d08c:	f7fd fab6 	bl	800a5fc <initMaze>
    initWeight(my_maze); //3/20ms
 800d090:	4620      	mov	r0, r4
 800d092:	f7fd fa97 	bl	800a5c4 <initWeight>

    //状態の初期化
    initProfile(Mouse, my_maze);
 800d096:	4621      	mov	r1, r4
 800d098:	4628      	mov	r0, r5
 800d09a:	f7fe f983 	bl	800b3a4 <initProfile>
    Mouse->now.node = &(my_maze->RawNode[0][0]);
    Mouse->next.node = &(my_maze->RawNode[0][1]);
 800d09e:	f104 0308 	add.w	r3, r4, #8
 800d0a2:	61eb      	str	r3, [r5, #28]

    //スタート座標にいる状態で、現在の重みを更新
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d0a4:	2601      	movs	r6, #1
 800d0a6:	2302      	movs	r3, #2
 800d0a8:	786a      	ldrb	r2, [r5, #1]
 800d0aa:	7829      	ldrb	r1, [r5, #0]
    Mouse->now.node = &(my_maze->RawNode[0][0]);
 800d0ac:	612c      	str	r4, [r5, #16]
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	e9cd 3600 	strd	r3, r6, [sp]
 800d0b4:	f7fd fc74 	bl	800a9a0 <updateAllNodeWeight>
//     updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
}
 800d0b8:	b002      	add	sp, #8
 800d0ba:	bd70      	pop	{r4, r5, r6, pc}

0800d0bc <updateRealSearch>:

void updateRealSearch()
{
 800d0bc:	b570      	push	{r4, r5, r6, lr}
	//wall_state wall_st[4]={0};

	//壁センサ値を読んで、各方角の壁の有無を判定
		//区画進入直前なので、更新予定の方角と座標がNextに入っているはず
		//前後左右の値として入れる
	shiftState(&my_mouse);
 800d0be:	4d6f      	ldr	r5, [pc, #444]	; (800d27c <updateRealSearch+0x1c0>)
{
 800d0c0:	b082      	sub	sp, #8
	shiftState(&my_mouse);
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	f7fe f988 	bl	800b3d8 <shiftState>

    switch (my_mouse.now.car)
 800d0c8:	7aab      	ldrb	r3, [r5, #10]
 800d0ca:	2b06      	cmp	r3, #6
 800d0cc:	f200 80d0 	bhi.w	800d270 <updateRealSearch+0x1b4>
 800d0d0:	e8df f003 	tbb	[pc, r3]
 800d0d4:	ce76cea2 	.word	0xce76cea2
 800d0d8:	ce4a      	.short	0xce4a
 800d0da:	04          	.byte	0x04
 800d0db:	00          	.byte	0x00
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
    	wall_dir[0] = NOWALL;
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
        break;
    case west:
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d0dc:	4b68      	ldr	r3, [pc, #416]	; (800d280 <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d0de:	eddf 5a69 	vldr	s11, [pc, #420]	; 800d284 <updateRealSearch+0x1c8>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d0e2:	edd3 7a00 	vldr	s15, [r3]
 800d0e6:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d0ea:	ed93 5a01 	vldr	s10, [r3, #4]
    	wall_dir[1] = NOWALL;
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d0ee:	eddf 6a66 	vldr	s13, [pc, #408]	; 800d288 <updateRealSearch+0x1cc>
 800d0f2:	ed93 6a02 	vldr	s12, [r3, #8]
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d0f6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800d28c <updateRealSearch+0x1d0>
 800d0fa:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d0fe:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d102:	eeb4 5ae5 	vcmpe.f32	s10, s11
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d106:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d10e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800d112:	bfcc      	ite	gt
 800d114:	2601      	movgt	r6, #1
 800d116:	2600      	movle	r6, #0
 800d118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d11c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d120:	bfcc      	ite	gt
 800d122:	2101      	movgt	r1, #1
 800d124:	2100      	movle	r1, #0
 800d126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d12a:	bfcc      	ite	gt
 800d12c:	2201      	movgt	r2, #1
 800d12e:	2200      	movle	r2, #0
        break;
 800d130:	2000      	movs	r0, #0
//	Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
//	Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
//	Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
//	Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
    //アクションが終わるときがノードの上にいる状態なので、状態シフト済みとする（この関数はアクション中に呼び出される想定）
    my_mouse.now.wall.north = wall_dir[0];
 800d132:	7b2c      	ldrb	r4, [r5, #12]

	//getWallNow(&(my_mouse->now), &wall[0]);

    //現在方角、壁は、合ってる。座標とノードは？
    //ここで壁の存在を反映
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800d134:	7a6b      	ldrb	r3, [r5, #9]
    my_mouse.now.wall.north = wall_dir[0];
 800d136:	f366 0401 	bfi	r4, r6, #0, #2
    my_mouse.now.wall.east = wall_dir[1];
 800d13a:	f360 0483 	bfi	r4, r0, #2, #2
    my_mouse.now.wall.south = wall_dir[2];
 800d13e:	f361 1405 	bfi	r4, r1, #4, #2
    my_mouse.now.wall.west = wall_dir[3];
 800d142:	f362 1487 	bfi	r4, r2, #6, #2
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800d146:	4952      	ldr	r1, [pc, #328]	; (800d290 <updateRealSearch+0x1d4>)
 800d148:	7a2a      	ldrb	r2, [r5, #8]
 800d14a:	4852      	ldr	r0, [pc, #328]	; (800d294 <updateRealSearch+0x1d8>)
    my_mouse.now.wall.west = wall_dir[3];
 800d14c:	732c      	strb	r4, [r5, #12]
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800d14e:	f7fd fb5f 	bl	800a810 <updateNodeThree>

	//壁の存在を基に重みマップを更新
	updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800d152:	2401      	movs	r4, #1
 800d154:	2302      	movs	r3, #2
 800d156:	786a      	ldrb	r2, [r5, #1]
 800d158:	7829      	ldrb	r1, [r5, #0]
 800d15a:	484e      	ldr	r0, [pc, #312]	; (800d294 <updateRealSearch+0x1d8>)
 800d15c:	e9cd 3400 	strd	r3, r4, [sp]
 800d160:	f7fd fc1e 	bl	800a9a0 <updateAllNodeWeight>
}
 800d164:	b002      	add	sp, #8
 800d166:	bd70      	pop	{r4, r5, r6, pc}
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d168:	4b45      	ldr	r3, [pc, #276]	; (800d280 <updateRealSearch+0x1c4>)
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d16a:	eddf 5a47 	vldr	s11, [pc, #284]	; 800d288 <updateRealSearch+0x1cc>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d16e:	edd3 7a00 	vldr	s15, [r3]
 800d172:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d176:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d17a:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d17e:	ed9f 6a43 	vldr	s12, [pc, #268]	; 800d28c <updateRealSearch+0x1d0>
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d182:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800d284 <updateRealSearch+0x1c8>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d186:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d18a:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d18e:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d192:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800d196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d19a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d19e:	bfcc      	ite	gt
 800d1a0:	2001      	movgt	r0, #1
 800d1a2:	2000      	movle	r0, #0
 800d1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1a8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d1ac:	bfcc      	ite	gt
 800d1ae:	2101      	movgt	r1, #1
 800d1b0:	2100      	movle	r1, #0
 800d1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b6:	bfcc      	ite	gt
 800d1b8:	2201      	movgt	r2, #1
 800d1ba:	2200      	movle	r2, #0
        break;
 800d1bc:	2600      	movs	r6, #0
 800d1be:	e7b8      	b.n	800d132 <updateRealSearch+0x76>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1c0:	4b2f      	ldr	r3, [pc, #188]	; (800d280 <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d1c2:	eddf 5a31 	vldr	s11, [pc, #196]	; 800d288 <updateRealSearch+0x1cc>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1c6:	edd3 7a00 	vldr	s15, [r3]
 800d1ca:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1ce:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d1d2:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1d6:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800d28c <updateRealSearch+0x1d0>
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d1da:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d284 <updateRealSearch+0x1c8>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1de:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d1e2:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d1e6:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d1ea:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800d1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d1f2:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d1f6:	bfcc      	ite	gt
 800d1f8:	2601      	movgt	r6, #1
 800d1fa:	2600      	movle	r6, #0
 800d1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d200:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d204:	bfcc      	ite	gt
 800d206:	2001      	movgt	r0, #1
 800d208:	2000      	movle	r0, #0
 800d20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20e:	bfcc      	ite	gt
 800d210:	2101      	movgt	r1, #1
 800d212:	2100      	movle	r1, #0
        break;
 800d214:	2200      	movs	r2, #0
 800d216:	e78c      	b.n	800d132 <updateRealSearch+0x76>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d218:	4b19      	ldr	r3, [pc, #100]	; (800d280 <updateRealSearch+0x1c4>)
 800d21a:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 800d28c <updateRealSearch+0x1d0>
 800d21e:	edd3 7a00 	vldr	s15, [r3]
 800d222:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d226:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800d284 <updateRealSearch+0x1c8>
 800d22a:	edd3 5a01 	vldr	s11, [r3, #4]
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d22e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800d288 <updateRealSearch+0x1cc>
 800d232:	edd3 6a02 	vldr	s13, [r3, #8]
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d236:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d23a:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800d23e:	ee67 7aa4 	vmul.f32	s15, s15, s9
        break;
 800d242:	2100      	movs	r1, #0
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800d244:	eef4 7ac5 	vcmpe.f32	s15, s10
 800d248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800d24c:	eef4 5ac6 	vcmpe.f32	s11, s12
 800d250:	bfcc      	ite	gt
 800d252:	2601      	movgt	r6, #1
 800d254:	460e      	movle	r6, r1
 800d256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800d25a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d25e:	bfcc      	ite	gt
 800d260:	2001      	movgt	r0, #1
 800d262:	4608      	movle	r0, r1
 800d264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d268:	bfcc      	ite	gt
 800d26a:	2201      	movgt	r2, #1
 800d26c:	460a      	movle	r2, r1
        break;
 800d26e:	e760      	b.n	800d132 <updateRealSearch+0x76>
    switch (my_mouse.now.car)
 800d270:	2200      	movs	r2, #0
 800d272:	4611      	mov	r1, r2
 800d274:	4610      	mov	r0, r2
 800d276:	4616      	mov	r6, r2
 800d278:	e75b      	b.n	800d132 <updateRealSearch+0x76>
 800d27a:	bf00      	nop
 800d27c:	20008224 	.word	0x20008224
 800d280:	200089f8 	.word	0x200089f8
 800d284:	42b40000 	.word	0x42b40000
 800d288:	42c80000 	.word	0x42c80000
 800d28c:	42340000 	.word	0x42340000
 800d290:	2000822c 	.word	0x2000822c
 800d294:	200083d0 	.word	0x200083d0

0800d298 <getNextDirection>:
//↑と↓は新ノードに来た時の処理なので、アクションの区切りをずらせばよさそう。
//現情報と次情報から次の進行方向を得る処理

void getNextDirection(maze_node *my_maze, profile *Mouse, char turn_mode)
{
 800d298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d29c:	460c      	mov	r4, r1
	//選ぶノードがおかしい
	//重みが、壁がある方が小さくなってしまっている.
	//

	//メインでノード選択
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d29e:	2301      	movs	r3, #1
 800d2a0:	7a89      	ldrb	r1, [r1, #10]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);

	//既知区間加速このswitch文中で書くかも
		//コマンドキューのときはここでコマンドを発行してキューに渡す
	AddVelocity = 0;
 800d2a2:	4d5f      	ldr	r5, [pc, #380]	; (800d420 <getNextDirection+0x188>)
{
 800d2a4:	4616      	mov	r6, r2
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d2a6:	6922      	ldr	r2, [r4, #16]
{
 800d2a8:	4607      	mov	r7, r0
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d2aa:	f7fd fc9b 	bl	800abe4 <getNextNode>
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800d2ae:	f104 0114 	add.w	r1, r4, #20
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	61e0      	str	r0, [r4, #28]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800d2b6:	f104 0008 	add.w	r0, r4, #8
 800d2ba:	f7fd ff1f 	bl	800b0fc <getNextState>
	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
	_Bool accel_or_not = false;
	int accel_or_decel = 0;
	switch(Mouse->next.dir) //次の方角からアクションを選択
 800d2be:	7de3      	ldrb	r3, [r4, #23]
	AddVelocity = 0;
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	602a      	str	r2, [r5, #0]
	switch(Mouse->next.dir) //次の方角からアクションを選択
 800d2c4:	2b05      	cmp	r3, #5
 800d2c6:	d85a      	bhi.n	800d37e <getNextDirection+0xe6>
 800d2c8:	e8df f003 	tbb	[pc, r3]
 800d2cc:	274c1e0c 	.word	0x274c1e0c
 800d2d0:	033f      	.short	0x033f
		Calc = SearchOrFast;
		TurnLeft(turn_mode);
		break;
	case left:
		//左旋回
		Calc = SearchOrFast;
 800d2d2:	4a54      	ldr	r2, [pc, #336]	; (800d424 <getNextDirection+0x18c>)
 800d2d4:	4b54      	ldr	r3, [pc, #336]	; (800d428 <getNextDirection+0x190>)
 800d2d6:	6812      	ldr	r2, [r2, #0]
 800d2d8:	601a      	str	r2, [r3, #0]
//		ChangeLED(4);
		TurnLeft(turn_mode);
 800d2da:	4630      	mov	r0, r6
		break;
	}

}
 800d2dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800d2e0:	f7fc bcf8 	b.w	8009cd4 <TurnLeft>
		accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800d2e4:	4638      	mov	r0, r7
 800d2e6:	69e2      	ldr	r2, [r4, #28]
 800d2e8:	7da1      	ldrb	r1, [r4, #22]
 800d2ea:	f7fd fe23 	bl	800af34 <judgeAccelorNot>
			if(VelocityMax == true)
 800d2ee:	4b4f      	ldr	r3, [pc, #316]	; (800d42c <getNextDirection+0x194>)
 800d2f0:	781b      	ldrb	r3, [r3, #0]
		if(accel_or_not == true) //既知で.直進
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d045      	beq.n	800d382 <getNextDirection+0xea>
				AddVelocity = 245;
 800d2f6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800d430 <getNextDirection+0x198>
			if(VelocityMax == true)
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f000 808c 	beq.w	800d418 <getNextDirection+0x180>
				accel_or_decel = 0; //そのまま
 800d300:	2000      	movs	r0, #0
				AddVelocity = 245;
 800d302:	edc5 7a00 	vstr	s15, [r5]
 800d306:	e046      	b.n	800d396 <getNextDirection+0xfe>
		Calc = SearchOrFast;
 800d308:	4a46      	ldr	r2, [pc, #280]	; (800d424 <getNextDirection+0x18c>)
 800d30a:	4b47      	ldr	r3, [pc, #284]	; (800d428 <getNextDirection+0x190>)
 800d30c:	6812      	ldr	r2, [r2, #0]
 800d30e:	601a      	str	r2, [r3, #0]
		TurnRight(turn_mode);
 800d310:	4630      	mov	r0, r6
}
 800d312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800d316:	f7fc bca5 	b.w	8009c64 <TurnRight>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d31a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800d428 <getNextDirection+0x190>
 800d31e:	2601      	movs	r6, #1
 800d320:	f8c8 6000 	str.w	r6, [r8]
		GoBack();
 800d324:	f7fc fd10 	bl	8009d48 <GoBack>
				accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800d328:	4638      	mov	r0, r7
 800d32a:	69e2      	ldr	r2, [r4, #28]
 800d32c:	7da1      	ldrb	r1, [r4, #22]
 800d32e:	f7fd fe01 	bl	800af34 <judgeAccelorNot>
					if(VelocityMax == true)
 800d332:	4b3e      	ldr	r3, [pc, #248]	; (800d42c <getNextDirection+0x194>)
 800d334:	781b      	ldrb	r3, [r3, #0]
				if(accel_or_not == true) //既知で.直進
 800d336:	2800      	cmp	r0, #0
 800d338:	d03c      	beq.n	800d3b4 <getNextDirection+0x11c>
						AddVelocity = 245;
 800d33a:	eddf 7a3d 	vldr	s15, [pc, #244]	; 800d430 <getNextDirection+0x198>
					if(VelocityMax == true)
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d066      	beq.n	800d410 <getNextDirection+0x178>
						accel_or_decel = 0; //そのまま
 800d342:	2000      	movs	r0, #0
						AddVelocity = 245;
 800d344:	edc5 7a00 	vstr	s15, [r5]
 800d348:	e03d      	b.n	800d3c6 <getNextDirection+0x12e>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d34a:	4c37      	ldr	r4, [pc, #220]	; (800d428 <getNextDirection+0x190>)
 800d34c:	2301      	movs	r3, #1
 800d34e:	6023      	str	r3, [r4, #0]
		GoBack();
 800d350:	f7fc fcfa 	bl	8009d48 <GoBack>
		Calc = SearchOrFast;
 800d354:	4b33      	ldr	r3, [pc, #204]	; (800d424 <getNextDirection+0x18c>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	6023      	str	r3, [r4, #0]
		TurnLeft(turn_mode);
 800d35a:	4630      	mov	r0, r6
}
 800d35c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800d360:	f7fc bcb8 	b.w	8009cd4 <TurnLeft>
		Calc = 1;//マップ更新したくないときは1を代入。
 800d364:	4c30      	ldr	r4, [pc, #192]	; (800d428 <getNextDirection+0x190>)
 800d366:	2301      	movs	r3, #1
 800d368:	6023      	str	r3, [r4, #0]
		GoBack();
 800d36a:	f7fc fced 	bl	8009d48 <GoBack>
		Calc = SearchOrFast;
 800d36e:	4b2d      	ldr	r3, [pc, #180]	; (800d424 <getNextDirection+0x18c>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6023      	str	r3, [r4, #0]
		TurnRight(turn_mode);
 800d374:	4630      	mov	r0, r6
}
 800d376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800d37a:	f7fc bc73 	b.w	8009c64 <TurnRight>
}
 800d37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(VelocityMax == true)
 800d382:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800d386:	2b00      	cmp	r3, #0
 800d388:	d137      	bne.n	800d3fa <getNextDirection+0x162>
				AddVelocity = 0;
 800d38a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d434 <getNextDirection+0x19c>
 800d38e:	eef0 7a47 	vmov.f32	s15, s14
 800d392:	ed85 7a00 	vstr	s14, [r5]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d396:	4b28      	ldr	r3, [pc, #160]	; (800d438 <getNextDirection+0x1a0>)
		Calc = SearchOrFast;
 800d398:	4a22      	ldr	r2, [pc, #136]	; (800d424 <getNextDirection+0x18c>)
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d39a:	edd3 0a00 	vldr	s1, [r3]
		Calc = SearchOrFast;
 800d39e:	4b22      	ldr	r3, [pc, #136]	; (800d428 <getNextDirection+0x190>)
 800d3a0:	6812      	ldr	r2, [r2, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d3a2:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800d43c <getNextDirection+0x1a4>
		Calc = SearchOrFast;
 800d3a6:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d3a8:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800d3ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800d3b0:	f7fc bb2a 	b.w	8009a08 <GoStraight>
					if(VelocityMax == true)
 800d3b4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800d3b8:	b9a3      	cbnz	r3, 800d3e4 <getNextDirection+0x14c>
						AddVelocity = 0;
 800d3ba:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d434 <getNextDirection+0x19c>
 800d3be:	eef0 7a47 	vmov.f32	s15, s14
 800d3c2:	ed85 7a00 	vstr	s14, [r5]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d3c6:	4a1c      	ldr	r2, [pc, #112]	; (800d438 <getNextDirection+0x1a0>)
		Calc = SearchOrFast;
 800d3c8:	4b16      	ldr	r3, [pc, #88]	; (800d424 <getNextDirection+0x18c>)
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d3ca:	edd2 0a00 	vldr	s1, [r2]
		Calc = SearchOrFast;
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f8c8 3000 	str.w	r3, [r8]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d3d4:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800d43c <getNextDirection+0x1a4>
 800d3d8:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800d3dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800d3e0:	f7fc bb12 	b.w	8009a08 <GoStraight>
						cnt += 2;
 800d3e4:	4a16      	ldr	r2, [pc, #88]	; (800d440 <getNextDirection+0x1a8>)
						AddVelocity = 0;
 800d3e6:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d434 <getNextDirection+0x19c>
						cnt += 2;
 800d3ea:	6813      	ldr	r3, [r2, #0]
						AddVelocity = 0;
 800d3ec:	edc5 7a00 	vstr	s15, [r5]
						cnt += 2;
 800d3f0:	3302      	adds	r3, #2
 800d3f2:	6013      	str	r3, [r2, #0]
						accel_or_decel = -1; //減速
 800d3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f8:	e7e5      	b.n	800d3c6 <getNextDirection+0x12e>
				cnt += 2;
 800d3fa:	4a12      	ldr	r2, [pc, #72]	; (800d444 <getNextDirection+0x1ac>)
				AddVelocity = 0;
 800d3fc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d434 <getNextDirection+0x19c>
				cnt += 2;
 800d400:	6813      	ldr	r3, [r2, #0]
				AddVelocity = 0;
 800d402:	edc5 7a00 	vstr	s15, [r5]
				cnt += 2;
 800d406:	3302      	adds	r3, #2
 800d408:	6013      	str	r3, [r2, #0]
				accel_or_decel = -1; //減速
 800d40a:	f04f 30ff 	mov.w	r0, #4294967295
 800d40e:	e7c2      	b.n	800d396 <getNextDirection+0xfe>
						accel_or_decel = 1; //加速
 800d410:	4630      	mov	r0, r6
						AddVelocity = 245;
 800d412:	edc5 7a00 	vstr	s15, [r5]
 800d416:	e7d6      	b.n	800d3c6 <getNextDirection+0x12e>
				accel_or_decel = 1; //加速
 800d418:	2001      	movs	r0, #1
				AddVelocity = 245;
 800d41a:	edc5 7a00 	vstr	s15, [r5]
 800d41e:	e7ba      	b.n	800d396 <getNextDirection+0xfe>
 800d420:	20008994 	.word	0x20008994
 800d424:	20008c24 	.word	0x20008c24
 800d428:	20008c28 	.word	0x20008c28
 800d42c:	20008aaa 	.word	0x20008aaa
 800d430:	43750000 	.word	0x43750000
 800d434:	00000000 	.word	0x00000000
 800d438:	20008aac 	.word	0x20008aac
 800d43c:	42b40000 	.word	0x42b40000
 800d440:	20000030 	.word	0x20000030
 800d444:	2000002c 	.word	0x2000002c

0800d448 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b086      	sub	sp, #24
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d454:	2300      	movs	r3, #0
 800d456:	617b      	str	r3, [r7, #20]
 800d458:	e00a      	b.n	800d470 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800d45a:	f7ff f81d 	bl	800c498 <__io_getchar>
 800d45e:	4601      	mov	r1, r0
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	1c5a      	adds	r2, r3, #1
 800d464:	60ba      	str	r2, [r7, #8]
 800d466:	b2ca      	uxtb	r2, r1
 800d468:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	3301      	adds	r3, #1
 800d46e:	617b      	str	r3, [r7, #20]
 800d470:	697a      	ldr	r2, [r7, #20]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	429a      	cmp	r2, r3
 800d476:	dbf0      	blt.n	800d45a <_read+0x12>
	}

return len;
 800d478:	687b      	ldr	r3, [r7, #4]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3718      	adds	r7, #24
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b086      	sub	sp, #24
 800d486:	af00      	add	r7, sp, #0
 800d488:	60f8      	str	r0, [r7, #12]
 800d48a:	60b9      	str	r1, [r7, #8]
 800d48c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d48e:	2300      	movs	r3, #0
 800d490:	617b      	str	r3, [r7, #20]
 800d492:	e009      	b.n	800d4a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	60ba      	str	r2, [r7, #8]
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7fe ffe9 	bl	800c474 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	617b      	str	r3, [r7, #20]
 800d4a8:	697a      	ldr	r2, [r7, #20]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	dbf1      	blt.n	800d494 <_write+0x12>
	}
	return len;
 800d4b0:	687b      	ldr	r3, [r7, #4]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3718      	adds	r7, #24
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <_close>:

int _close(int file)
{
 800d4ba:	b480      	push	{r7}
 800d4bc:	b083      	sub	sp, #12
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
	return -1;
 800d4c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	370c      	adds	r7, #12
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d4d2:	b480      	push	{r7}
 800d4d4:	b083      	sub	sp, #12
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d4e2:	605a      	str	r2, [r3, #4]
	return 0;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	370c      	adds	r7, #12
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <_isatty>:

int _isatty(int file)
{
 800d4f2:	b480      	push	{r7}
 800d4f4:	b083      	sub	sp, #12
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
	return 1;
 800d4fa:	2301      	movs	r3, #1
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d508:	b480      	push	{r7}
 800d50a:	b085      	sub	sp, #20
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
	return 0;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3714      	adds	r7, #20
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
	...

0800d524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b086      	sub	sp, #24
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d52c:	4a14      	ldr	r2, [pc, #80]	; (800d580 <_sbrk+0x5c>)
 800d52e:	4b15      	ldr	r3, [pc, #84]	; (800d584 <_sbrk+0x60>)
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d538:	4b13      	ldr	r3, [pc, #76]	; (800d588 <_sbrk+0x64>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d102      	bne.n	800d546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d540:	4b11      	ldr	r3, [pc, #68]	; (800d588 <_sbrk+0x64>)
 800d542:	4a12      	ldr	r2, [pc, #72]	; (800d58c <_sbrk+0x68>)
 800d544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d546:	4b10      	ldr	r3, [pc, #64]	; (800d588 <_sbrk+0x64>)
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4413      	add	r3, r2
 800d54e:	693a      	ldr	r2, [r7, #16]
 800d550:	429a      	cmp	r2, r3
 800d552:	d207      	bcs.n	800d564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d554:	f006 fa4c 	bl	80139f0 <__errno>
 800d558:	4602      	mov	r2, r0
 800d55a:	230c      	movs	r3, #12
 800d55c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800d55e:	f04f 33ff 	mov.w	r3, #4294967295
 800d562:	e009      	b.n	800d578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d564:	4b08      	ldr	r3, [pc, #32]	; (800d588 <_sbrk+0x64>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d56a:	4b07      	ldr	r3, [pc, #28]	; (800d588 <_sbrk+0x64>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4413      	add	r3, r2
 800d572:	4a05      	ldr	r2, [pc, #20]	; (800d588 <_sbrk+0x64>)
 800d574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d576:	68fb      	ldr	r3, [r7, #12]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3718      	adds	r7, #24
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	20020000 	.word	0x20020000
 800d584:	00000400 	.word	0x00000400
 800d588:	20007f4c 	.word	0x20007f4c
 800d58c:	20008f50 	.word	0x20008f50

0800d590 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800d590:	b580      	push	{r7, lr}
 800d592:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800d594:	2203      	movs	r2, #3
 800d596:	490a      	ldr	r1, [pc, #40]	; (800d5c0 <ADCStart+0x30>)
 800d598:	480a      	ldr	r0, [pc, #40]	; (800d5c4 <ADCStart+0x34>)
 800d59a:	f001 fa9d 	bl	800ead8 <HAL_ADC_Start_DMA>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d001      	beq.n	800d5a8 <ADCStart+0x18>
	{
		Error_Handler();
 800d5a4:	f7ff f9ba 	bl	800c91c <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800d5a8:	2202      	movs	r2, #2
 800d5aa:	4907      	ldr	r1, [pc, #28]	; (800d5c8 <ADCStart+0x38>)
 800d5ac:	4807      	ldr	r0, [pc, #28]	; (800d5cc <ADCStart+0x3c>)
 800d5ae:	f001 fa93 	bl	800ead8 <HAL_ADC_Start_DMA>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <ADCStart+0x2c>
	{
		Error_Handler();
 800d5b8:	f7ff f9b0 	bl	800c91c <Error_Handler>
	}

}
 800d5bc:	bf00      	nop
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	20007fd0 	.word	0x20007fd0
 800d5c4:	20008d8c 	.word	0x20008d8c
 800d5c8:	20007fdc 	.word	0x20007fdc
 800d5cc:	20008cac 	.word	0x20008cac

0800d5d0 <ADCStop>:
void ADCStop()
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800d5d4:	480e      	ldr	r0, [pc, #56]	; (800d610 <ADCStop+0x40>)
 800d5d6:	f001 fb71 	bl	800ecbc <HAL_ADC_Stop_DMA>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d007      	beq.n	800d5f0 <ADCStop+0x20>
	{
		printf("な\r\n");
 800d5e0:	480c      	ldr	r0, [pc, #48]	; (800d614 <ADCStop+0x44>)
 800d5e2:	f007 ffcd 	bl	8015580 <puts>
		Error_Handler();
 800d5e6:	f7ff f999 	bl	800c91c <Error_Handler>
		printf("に\r\n");
 800d5ea:	480b      	ldr	r0, [pc, #44]	; (800d618 <ADCStop+0x48>)
 800d5ec:	f007 ffc8 	bl	8015580 <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800d5f0:	480a      	ldr	r0, [pc, #40]	; (800d61c <ADCStop+0x4c>)
 800d5f2:	f001 fb63 	bl	800ecbc <HAL_ADC_Stop_DMA>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d007      	beq.n	800d60c <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 800d5fc:	4808      	ldr	r0, [pc, #32]	; (800d620 <ADCStop+0x50>)
 800d5fe:	f007 ffbf 	bl	8015580 <puts>
		Error_Handler();
 800d602:	f7ff f98b 	bl	800c91c <Error_Handler>
		printf("ね\r\n");
 800d606:	4807      	ldr	r0, [pc, #28]	; (800d624 <ADCStop+0x54>)
 800d608:	f007 ffba 	bl	8015580 <puts>
	}
}
 800d60c:	bf00      	nop
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	20008d8c 	.word	0x20008d8c
 800d614:	08018df0 	.word	0x08018df0
 800d618:	08018df8 	.word	0x08018df8
 800d61c:	20008cac 	.word	0x20008cac
 800d620:	08018e00 	.word	0x08018e00
 800d624:	08018e08 	.word	0x08018e08

0800d628 <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800d628:	b480      	push	{r7}
 800d62a:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800d62c:	4b05      	ldr	r3, [pc, #20]	; (800d644 <FLASH_Unlock+0x1c>)
 800d62e:	4a06      	ldr	r2, [pc, #24]	; (800d648 <FLASH_Unlock+0x20>)
 800d630:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800d632:	4b04      	ldr	r3, [pc, #16]	; (800d644 <FLASH_Unlock+0x1c>)
 800d634:	4a05      	ldr	r2, [pc, #20]	; (800d64c <FLASH_Unlock+0x24>)
 800d636:	605a      	str	r2, [r3, #4]
}
 800d638:	bf00      	nop
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr
 800d642:	bf00      	nop
 800d644:	40023c00 	.word	0x40023c00
 800d648:	45670123 	.word	0x45670123
 800d64c:	cdef89ab 	.word	0xcdef89ab

0800d650 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800d650:	b480      	push	{r7}
 800d652:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800d654:	4b05      	ldr	r3, [pc, #20]	; (800d66c <FLASH_Lock+0x1c>)
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	4a04      	ldr	r2, [pc, #16]	; (800d66c <FLASH_Lock+0x1c>)
 800d65a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d65e:	6113      	str	r3, [r2, #16]

}
 800d660:	bf00      	nop
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	40023c00 	.word	0x40023c00

0800d670 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800d670:	b480      	push	{r7}
 800d672:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d674:	bf00      	nop
 800d676:	4b05      	ldr	r3, [pc, #20]	; (800d68c <FLASH_WaitBusy+0x1c>)
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1f9      	bne.n	800d676 <FLASH_WaitBusy+0x6>
}
 800d682:	bf00      	nop
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr
 800d68c:	40023c00 	.word	0x40023c00

0800d690 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800d69a:	f7ff ffc5 	bl	800d628 <FLASH_Unlock>

	FLASH_WaitBusy();
 800d69e:	f7ff ffe7 	bl	800d670 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d6a2:	4b0e      	ldr	r3, [pc, #56]	; (800d6dc <FLASH_Write_Word+0x4c>)
 800d6a4:	691b      	ldr	r3, [r3, #16]
 800d6a6:	4a0d      	ldr	r2, [pc, #52]	; (800d6dc <FLASH_Write_Word+0x4c>)
 800d6a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d6ac:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d6ae:	4b0b      	ldr	r3, [pc, #44]	; (800d6dc <FLASH_Write_Word+0x4c>)
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	4a0a      	ldr	r2, [pc, #40]	; (800d6dc <FLASH_Write_Word+0x4c>)
 800d6b4:	f043 0301 	orr.w	r3, r3, #1
 800d6b8:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	683a      	ldr	r2, [r7, #0]
 800d6be:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d6c0:	f7ff ffd6 	bl	800d670 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d6c4:	4b05      	ldr	r3, [pc, #20]	; (800d6dc <FLASH_Write_Word+0x4c>)
 800d6c6:	691b      	ldr	r3, [r3, #16]
 800d6c8:	4a04      	ldr	r2, [pc, #16]	; (800d6dc <FLASH_Write_Word+0x4c>)
 800d6ca:	f023 0301 	bic.w	r3, r3, #1
 800d6ce:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d6d0:	f7ff ffbe 	bl	800d650 <FLASH_Lock>
}
 800d6d4:	bf00      	nop
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	40023c00 	.word	0x40023c00

0800d6e0 <FLASH_Read_Word>:
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800d6ea:	f7ff ff9d 	bl	800d628 <FLASH_Unlock>

	FLASH_WaitBusy();
 800d6ee:	f7ff ffbf 	bl	800d670 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d6f2:	4b0f      	ldr	r3, [pc, #60]	; (800d730 <FLASH_Read_Word+0x50>)
 800d6f4:	691b      	ldr	r3, [r3, #16]
 800d6f6:	4a0e      	ldr	r2, [pc, #56]	; (800d730 <FLASH_Read_Word+0x50>)
 800d6f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d6fc:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d6fe:	4b0c      	ldr	r3, [pc, #48]	; (800d730 <FLASH_Read_Word+0x50>)
 800d700:	691b      	ldr	r3, [r3, #16]
 800d702:	4a0b      	ldr	r2, [pc, #44]	; (800d730 <FLASH_Read_Word+0x50>)
 800d704:	f043 0301 	orr.w	r3, r3, #1
 800d708:	6113      	str	r3, [r2, #16]

	* data = *(__IO uint32_t*)address;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d712:	f7ff ffad 	bl	800d670 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d716:	4b06      	ldr	r3, [pc, #24]	; (800d730 <FLASH_Read_Word+0x50>)
 800d718:	691b      	ldr	r3, [r3, #16]
 800d71a:	4a05      	ldr	r2, [pc, #20]	; (800d730 <FLASH_Read_Word+0x50>)
 800d71c:	f023 0301 	bic.w	r3, r3, #1
 800d720:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d722:	f7ff ff95 	bl	800d650 <FLASH_Lock>
}
 800d726:	bf00      	nop
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	40023c00 	.word	0x40023c00

0800d734 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800d740:	f7ff ff72 	bl	800d628 <FLASH_Unlock>

	FLASH_WaitBusy();
 800d744:	f7ff ff94 	bl	800d670 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d748:	4b0e      	ldr	r3, [pc, #56]	; (800d784 <FLASH_Write_Word_F+0x50>)
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	4a0d      	ldr	r2, [pc, #52]	; (800d784 <FLASH_Write_Word_F+0x50>)
 800d74e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d752:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d754:	4b0b      	ldr	r3, [pc, #44]	; (800d784 <FLASH_Write_Word_F+0x50>)
 800d756:	691b      	ldr	r3, [r3, #16]
 800d758:	4a0a      	ldr	r2, [pc, #40]	; (800d784 <FLASH_Write_Word_F+0x50>)
 800d75a:	f043 0301 	orr.w	r3, r3, #1
 800d75e:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	683a      	ldr	r2, [r7, #0]
 800d764:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d766:	f7ff ff83 	bl	800d670 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d76a:	4b06      	ldr	r3, [pc, #24]	; (800d784 <FLASH_Write_Word_F+0x50>)
 800d76c:	691b      	ldr	r3, [r3, #16]
 800d76e:	4a05      	ldr	r2, [pc, #20]	; (800d784 <FLASH_Write_Word_F+0x50>)
 800d770:	f023 0301 	bic.w	r3, r3, #1
 800d774:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d776:	f7ff ff6b 	bl	800d650 <FLASH_Lock>
}
 800d77a:	bf00      	nop
 800d77c:	3708      	adds	r7, #8
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	40023c00 	.word	0x40023c00

0800d788 <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800d792:	f7ff ff49 	bl	800d628 <FLASH_Unlock>

	FLASH_WaitBusy();
 800d796:	f7ff ff6b 	bl	800d670 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d79a:	4b0f      	ldr	r3, [pc, #60]	; (800d7d8 <FLASH_Read_Word_F+0x50>)
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	4a0e      	ldr	r2, [pc, #56]	; (800d7d8 <FLASH_Read_Word_F+0x50>)
 800d7a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d7a4:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d7a6:	4b0c      	ldr	r3, [pc, #48]	; (800d7d8 <FLASH_Read_Word_F+0x50>)
 800d7a8:	691b      	ldr	r3, [r3, #16]
 800d7aa:	4a0b      	ldr	r2, [pc, #44]	; (800d7d8 <FLASH_Read_Word_F+0x50>)
 800d7ac:	f043 0301 	orr.w	r3, r3, #1
 800d7b0:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800d7ba:	f7ff ff59 	bl	800d670 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800d7be:	4b06      	ldr	r3, [pc, #24]	; (800d7d8 <FLASH_Read_Word_F+0x50>)
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	4a05      	ldr	r2, [pc, #20]	; (800d7d8 <FLASH_Read_Word_F+0x50>)
 800d7c4:	f023 0301 	bic.w	r3, r3, #1
 800d7c8:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800d7ca:	f7ff ff41 	bl	800d650 <FLASH_Lock>
}
 800d7ce:	bf00      	nop
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	40023c00 	.word	0x40023c00

0800d7dc <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b088      	sub	sp, #32
 800d7e0:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800d7e2:	f002 fa63 	bl	800fcac <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d7ee:	2302      	movs	r3, #2
 800d7f0:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d7f6:	1d3a      	adds	r2, r7, #4
 800d7f8:	f107 0308 	add.w	r3, r7, #8
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	4618      	mov	r0, r3
 800d800:	f002 fb1c 	bl	800fe3c <HAL_FLASHEx_Erase>
 800d804:	4603      	mov	r3, r0
 800d806:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800d808:	f002 fa72 	bl	800fcf0 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800d80c:	7ffb      	ldrb	r3, [r7, #31]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d105      	bne.n	800d81e <Flash_clear_sector1+0x42>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d818:	d101      	bne.n	800d81e <Flash_clear_sector1+0x42>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e000      	b.n	800d820 <Flash_clear_sector1+0x44>
 800d81e:	2300      	movs	r3, #0
 800d820:	f003 0301 	and.w	r3, r3, #1
 800d824:	b2db      	uxtb	r3, r3
}
 800d826:	4618      	mov	r0, r3
 800d828:	3720      	adds	r7, #32
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b088      	sub	sp, #32
 800d832:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800d834:	f002 fa3a 	bl	800fcac <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d838:	2300      	movs	r3, #0
 800d83a:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800d83c:	2309      	movs	r3, #9
 800d83e:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d840:	2302      	movs	r3, #2
 800d842:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800d844:	2301      	movs	r3, #1
 800d846:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d848:	1d3a      	adds	r2, r7, #4
 800d84a:	f107 0308 	add.w	r3, r7, #8
 800d84e:	4611      	mov	r1, r2
 800d850:	4618      	mov	r0, r3
 800d852:	f002 faf3 	bl	800fe3c <HAL_FLASHEx_Erase>
 800d856:	4603      	mov	r3, r0
 800d858:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800d85a:	f002 fa49 	bl	800fcf0 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800d85e:	7ffb      	ldrb	r3, [r7, #31]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d105      	bne.n	800d870 <Flash_clear_sector9+0x42>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d86a:	d101      	bne.n	800d870 <Flash_clear_sector9+0x42>
 800d86c:	2301      	movs	r3, #1
 800d86e:	e000      	b.n	800d872 <Flash_clear_sector9+0x44>
 800d870:	2300      	movs	r3, #0
 800d872:	f003 0301 	and.w	r3, r3, #1
 800d876:	b2db      	uxtb	r3, r3
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3720      	adds	r7, #32
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <compare_num>:
}


int compare_num(const void * n1, const void * n2)
{
	if (*(int16_t *)n1 > *(int16_t *)n2)
 800d880:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d884:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d888:	429a      	cmp	r2, r3
 800d88a:	dc04      	bgt.n	800d896 <compare_num+0x16>
	{
		return 1;
	}
	else if (*(int16_t *)n1 < *(int16_t *)n2)
 800d88c:	bfb4      	ite	lt
 800d88e:	f04f 30ff 	movlt.w	r0, #4294967295
 800d892:	2000      	movge	r0, #0
 800d894:	4770      	bx	lr
		return 1;
 800d896:	2001      	movs	r0, #1
	}
	else
	{
		return 0;
	}
}
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop

0800d89c <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800d89c:	b570      	push	{r4, r5, r6, lr}
	CS_RESET;
 800d89e:	4c23      	ldr	r4, [pc, #140]	; (800d92c <ReadIMU+0x90>)
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d8a0:	4d23      	ldr	r5, [pc, #140]	; (800d930 <ReadIMU+0x94>)
inline float ReadIMU(uint8_t a, uint8_t b) {
 800d8a2:	b082      	sub	sp, #8
	ret2 = ret[1] | 0x80;
 800d8a4:	f061 037f 	orn	r3, r1, #127	; 0x7f
	ret1 = ret[0] | 0x80;
 800d8a8:	f060 067f 	orn	r6, r0, #127	; 0x7f
	CS_RESET;
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	2104      	movs	r1, #4
	ret2 = ret[1] | 0x80;
 800d8b2:	f88d 3005 	strb.w	r3, [sp, #5]
	ret1 = ret[0] | 0x80;
 800d8b6:	f88d 6004 	strb.w	r6, [sp, #4]
	CS_RESET;
 800d8ba:	f002 fd7b 	bl	80103b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d8be:	a901      	add	r1, sp, #4
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	2364      	movs	r3, #100	; 0x64
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	f003 fa6d 	bl	8010da4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800d8ca:	2364      	movs	r3, #100	; 0x64
 800d8cc:	f10d 0106 	add.w	r1, sp, #6
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f003 fb9a 	bl	801100c <HAL_SPI_Receive>
	CS_SET;
 800d8d8:	4620      	mov	r0, r4
 800d8da:	2201      	movs	r2, #1
 800d8dc:	2104      	movs	r1, #4
 800d8de:	f002 fd69 	bl	80103b4 <HAL_GPIO_WritePin>
	CS_RESET;
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	2104      	movs	r1, #4
 800d8e8:	f002 fd64 	bl	80103b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800d8ec:	f10d 0105 	add.w	r1, sp, #5
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	2364      	movs	r3, #100	; 0x64
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f003 fa55 	bl	8010da4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800d8fa:	2364      	movs	r3, #100	; 0x64
 800d8fc:	f10d 0107 	add.w	r1, sp, #7
 800d900:	4628      	mov	r0, r5
 800d902:	2201      	movs	r2, #1
 800d904:	f003 fb82 	bl	801100c <HAL_SPI_Receive>
	CS_SET;
 800d908:	4620      	mov	r0, r4
 800d90a:	2201      	movs	r2, #1
 800d90c:	2104      	movs	r1, #4
 800d90e:	f002 fd51 	bl	80103b4 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800d912:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d916:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d91a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	res = (float)law_data;
 800d91e:	b21b      	sxth	r3, r3
 800d920:	ee00 3a10 	vmov	s0, r3
}
 800d924:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d928:	b002      	add	sp, #8
 800d92a:	bd70      	pop	{r4, r5, r6, pc}
 800d92c:	40020c00 	.word	0x40020c00
 800d930:	20008d34 	.word	0x20008d34

0800d934 <median_filter>:
int16_t median_filter(int16_t *new_data) //中身変更しないが、値のコピーを避けて速度維持のためにアドレス
{
 800d934:	b530      	push	{r4, r5, lr}
	filter[cnt+1] = filter[cnt+2];
	filter[cnt+2] = filter[cnt+3];
	filter[cnt+3] = filter[cnt+4];
	filter[cnt+4] = new_data;
#else
	filter[0] = filter[1];
 800d936:	4c0d      	ldr	r4, [pc, #52]	; (800d96c <median_filter+0x38>)
	filter[1] = filter[2];
	filter[2] = *new_data;//filter[3];
 800d938:	f9b0 1000 	ldrsh.w	r1, [r0]
	filter[1] = filter[2];
 800d93c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
	filter[0] = filter[1];
 800d940:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
	filter[2] = *new_data;//filter[3];
 800d944:	80a1      	strh	r1, [r4, #4]
{
 800d946:	b083      	sub	sp, #12
	filter[1] = filter[2];
 800d948:	8060      	strh	r0, [r4, #2]
//	filter[3] = filter[4];
//	filter[4] = *new_data;

	sorted[0] = filter[0];
	sorted[1] = filter[1];
	sorted[2] = *new_data;//filter[2];
 800d94a:	f8ad 1004 	strh.w	r1, [sp, #4]
	sorted[1] = filter[1];
 800d94e:	f8ad 0002 	strh.w	r0, [sp, #2]
//	sorted[4] = filter[4];
#endif


	//ソートする
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d952:	4b07      	ldr	r3, [pc, #28]	; (800d970 <median_filter+0x3c>)
	filter[0] = filter[1];
 800d954:	8025      	strh	r5, [r4, #0]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d956:	4668      	mov	r0, sp
 800d958:	2202      	movs	r2, #2
 800d95a:	2103      	movs	r1, #3
	sorted[0] = filter[0];
 800d95c:	f8ad 5000 	strh.w	r5, [sp]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d960:	f007 fe4e 	bl	8015600 <qsort>
	//qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int),compare_num);
	//中央値を返す
	return sorted[1];
}
 800d964:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 800d968:	b003      	add	sp, #12
 800d96a:	bd30      	pop	{r4, r5, pc}
 800d96c:	20007fe8 	.word	0x20007fe8
 800d970:	0800d881 	.word	0x0800d881
 800d974:	00000000 	.word	0x00000000

0800d978 <Update_IMU>:
//割込み内で呼ぶセット
void Update_IMU(float *angv, float *angle )
{
 800d978:	b5f0      	push	{r4, r5, r6, r7, lr}
				0x38,
		};
		int16_t law_data;
		ret1 = ret[0] | 0x80;
		ret2 = ret[1] | 0x80;
		CS_RESET;
 800d97a:	4c3f      	ldr	r4, [pc, #252]	; (800da78 <Update_IMU+0x100>)
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d97c:	4d3f      	ldr	r5, [pc, #252]	; (800da7c <Update_IMU+0x104>)
{
 800d97e:	b083      	sub	sp, #12
		ret1 = ret[0] | 0x80;
 800d980:	f04f 0cb7 	mov.w	ip, #183	; 0xb7
{
 800d984:	460e      	mov	r6, r1
 800d986:	4607      	mov	r7, r0
		ret2 = ret[1] | 0x80;
 800d988:	23b8      	movs	r3, #184	; 0xb8
		CS_RESET;
 800d98a:	4620      	mov	r0, r4
 800d98c:	2200      	movs	r2, #0
 800d98e:	2104      	movs	r1, #4
		ret1 = ret[0] | 0x80;
 800d990:	f88d c002 	strb.w	ip, [sp, #2]
		ret2 = ret[1] | 0x80;
 800d994:	f88d 3003 	strb.w	r3, [sp, #3]
		CS_RESET;
 800d998:	f002 fd0c 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d99c:	f10d 0102 	add.w	r1, sp, #2
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	2364      	movs	r3, #100	; 0x64
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	f003 f9fd 	bl	8010da4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val1,1,100);
 800d9aa:	2364      	movs	r3, #100	; 0x64
 800d9ac:	a901      	add	r1, sp, #4
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	f003 fb2b 	bl	801100c <HAL_SPI_Receive>
		CS_SET;
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	2104      	movs	r1, #4
 800d9bc:	f002 fcfa 	bl	80103b4 <HAL_GPIO_WritePin>

		CS_RESET;
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	2104      	movs	r1, #4
 800d9c6:	f002 fcf5 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800d9ca:	f10d 0103 	add.w	r1, sp, #3
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	2364      	movs	r3, #100	; 0x64
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	f003 f9e6 	bl	8010da4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val2,1,100);
 800d9d8:	2364      	movs	r3, #100	; 0x64
 800d9da:	f10d 0105 	add.w	r1, sp, #5
 800d9de:	4628      	mov	r0, r5
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	f003 fb13 	bl	801100c <HAL_SPI_Receive>
		CS_SET;
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	2104      	movs	r1, #4
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f002 fce2 	bl	80103b4 <HAL_GPIO_WritePin>
		law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );
 800d9f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d9f8:	a802      	add	r0, sp, #8
 800d9fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d9fe:	f820 3d02 	strh.w	r3, [r0, #-2]!

		//static int16_t zg_last=0;
		int16_t zg_median;

		//2000回目で0.17
		zg_median = median_filter(&law_data);
 800da02:	f7ff ff97 	bl	800d934 <median_filter>
		ZGFilterd = zg_median;
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800da06:	ee07 0a90 	vmov	s15, r0
 800da0a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800da80 <Update_IMU+0x108>
 800da0e:	4b1d      	ldr	r3, [pc, #116]	; (800da84 <Update_IMU+0x10c>)
		ZGFilterd = zg_median;
 800da10:	4a1d      	ldr	r2, [pc, #116]	; (800da88 <Update_IMU+0x110>)
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800da12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ZGFilterd = zg_median;
 800da16:	8010      	strh	r0, [r2, #0]
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800da18:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da1c:	edc3 7a00 	vstr	s15, [r3]
		*angv = -((0.01*ZGyro) + (0.99)* (zg_last));
		zg_last = ZGyro;
		//Angle;
		*angle += *angv *0.001;
#else
		*angv = -ZGyro; //角速度 rad / s
 800da20:	edd3 7a00 	vldr	s15, [r3]
 800da24:	eef1 7a67 	vneg.f32	s15, s15
 800da28:	edc7 7a00 	vstr	s15, [r7]

		//Angle;
		*angle += *angv * 0.001  - 0.000001784;//- 0.0000018432; //角度 rad
 800da2c:	ee17 0a90 	vmov	r0, s15
 800da30:	f7fa fcc2 	bl	80083b8 <__aeabi_f2d>
 800da34:	a30c      	add	r3, pc, #48	; (adr r3, 800da68 <Update_IMU+0xf0>)
 800da36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3a:	f7fa fd15 	bl	8008468 <__aeabi_dmul>
 800da3e:	a30c      	add	r3, pc, #48	; (adr r3, 800da70 <Update_IMU+0xf8>)
 800da40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da44:	f7fa fb58 	bl	80080f8 <__aeabi_dsub>
 800da48:	4604      	mov	r4, r0
 800da4a:	6830      	ldr	r0, [r6, #0]
 800da4c:	460d      	mov	r5, r1
 800da4e:	f7fa fcb3 	bl	80083b8 <__aeabi_f2d>
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	4620      	mov	r0, r4
 800da58:	4629      	mov	r1, r5
 800da5a:	f7fa fb4f 	bl	80080fc <__adddf3>
 800da5e:	f7fa fffb 	bl	8008a58 <__aeabi_d2f>
 800da62:	6030      	str	r0, [r6, #0]
	//*angv = -((0.01*zg_law) + (0.99)* (zg_last));
	zg_last = zg_law;
	//Angle;
	*angle += *angv *0.001;
#endif
}
 800da64:	b003      	add	sp, #12
 800da66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da68:	d2f1a9fc 	.word	0xd2f1a9fc
 800da6c:	3f50624d 	.word	0x3f50624d
 800da70:	be73a9d7 	.word	0xbe73a9d7
 800da74:	3ebdee38 	.word	0x3ebdee38
 800da78:	40020c00 	.word	0x40020c00
 800da7c:	20008d34 	.word	0x20008d34
 800da80:	3a8b7d78 	.word	0x3a8b7d78
 800da84:	20007fe4 	.word	0x20007fe4
 800da88:	20008f1c 	.word	0x20008f1c

0800da8c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800da8c:	b570      	push	{r4, r5, r6, lr}
 800da8e:	b084      	sub	sp, #16
	uint8_t ret;

	ret = reg & 0x7F;
 800da90:	ac04      	add	r4, sp, #16
	CS_RESET;
 800da92:	4d10      	ldr	r5, [pc, #64]	; (800dad4 <write_byte+0x48>)
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800da94:	4e10      	ldr	r6, [pc, #64]	; (800dad8 <write_byte+0x4c>)
void write_byte( uint8_t reg, uint8_t val )  {
 800da96:	f88d 1007 	strb.w	r1, [sp, #7]
	ret = reg & 0x7F;
 800da9a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800da9e:	f804 0d01 	strb.w	r0, [r4, #-1]!
	CS_RESET;
 800daa2:	2200      	movs	r2, #0
 800daa4:	4628      	mov	r0, r5
 800daa6:	2104      	movs	r1, #4
 800daa8:	f002 fc84 	bl	80103b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800daac:	4621      	mov	r1, r4
 800daae:	4630      	mov	r0, r6
 800dab0:	2364      	movs	r3, #100	; 0x64
 800dab2:	2201      	movs	r2, #1
 800dab4:	f003 f976 	bl	8010da4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800dab8:	2364      	movs	r3, #100	; 0x64
 800daba:	f10d 0107 	add.w	r1, sp, #7
 800dabe:	4630      	mov	r0, r6
 800dac0:	2201      	movs	r2, #1
 800dac2:	f003 f96f 	bl	8010da4 <HAL_SPI_Transmit>
	CS_SET;
 800dac6:	4628      	mov	r0, r5
 800dac8:	2201      	movs	r2, #1
 800daca:	2104      	movs	r1, #4
 800dacc:	f002 fc72 	bl	80103b4 <HAL_GPIO_WritePin>
}
 800dad0:	b004      	add	sp, #16
 800dad2:	bd70      	pop	{r4, r5, r6, pc}
 800dad4:	40020c00 	.word	0x40020c00
 800dad8:	20008d34 	.word	0x20008d34

0800dadc <IMU_init>:

uint8_t IMU_init() {
 800dadc:	b510      	push	{r4, lr}
 800dade:	b082      	sub	sp, #8
	ret = reg | 0x80;
 800dae0:	ac02      	add	r4, sp, #8
 800dae2:	2380      	movs	r3, #128	; 0x80
 800dae4:	f804 3d02 	strb.w	r3, [r4, #-2]!
	CS_RESET;
 800dae8:	2200      	movs	r2, #0
 800daea:	2104      	movs	r1, #4
 800daec:	481b      	ldr	r0, [pc, #108]	; (800db5c <IMU_init+0x80>)
 800daee:	f002 fc61 	bl	80103b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800daf2:	4621      	mov	r1, r4
 800daf4:	2364      	movs	r3, #100	; 0x64
 800daf6:	2201      	movs	r2, #1
 800daf8:	4819      	ldr	r0, [pc, #100]	; (800db60 <IMU_init+0x84>)
 800dafa:	f003 f953 	bl	8010da4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800dafe:	2364      	movs	r3, #100	; 0x64
 800db00:	2201      	movs	r2, #1
 800db02:	f10d 0107 	add.w	r1, sp, #7
 800db06:	4816      	ldr	r0, [pc, #88]	; (800db60 <IMU_init+0x84>)
 800db08:	f003 fa80 	bl	801100c <HAL_SPI_Receive>
	CS_SET;
 800db0c:	2201      	movs	r2, #1
 800db0e:	2104      	movs	r1, #4
 800db10:	4812      	ldr	r0, [pc, #72]	; (800db5c <IMU_init+0x80>)
 800db12:	f002 fc4f 	bl	80103b4 <HAL_GPIO_WritePin>
	return val;
 800db16:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
	if ( who_am_i == 0xE0 ) {
 800db1a:	2be0      	cmp	r3, #224	; 0xe0
 800db1c:	d002      	beq.n	800db24 <IMU_init+0x48>
		write_byte(0x7F,0x00);	//USER_BANK0
	}
	return ret;
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800db1e:	2001      	movs	r0, #1
 800db20:	b002      	add	sp, #8
 800db22:	bd10      	pop	{r4, pc}
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800db24:	2101      	movs	r1, #1
 800db26:	2006      	movs	r0, #6
 800db28:	f7ff ffb0 	bl	800da8c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800db2c:	2110      	movs	r1, #16
 800db2e:	2003      	movs	r0, #3
 800db30:	f7ff ffac 	bl	800da8c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800db34:	2120      	movs	r1, #32
 800db36:	207f      	movs	r0, #127	; 0x7f
 800db38:	f7ff ffa8 	bl	800da8c <write_byte>
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800db3c:	2117      	movs	r1, #23
 800db3e:	2001      	movs	r0, #1
 800db40:	f7ff ffa4 	bl	800da8c <write_byte>
		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800db44:	2117      	movs	r1, #23
 800db46:	2014      	movs	r0, #20
 800db48:	f7ff ffa0 	bl	800da8c <write_byte>
		write_byte(0x7F,0x00);	//USER_BANK0
 800db4c:	2100      	movs	r1, #0
 800db4e:	207f      	movs	r0, #127	; 0x7f
 800db50:	f7ff ff9c 	bl	800da8c <write_byte>
}
 800db54:	2001      	movs	r0, #1
 800db56:	b002      	add	sp, #8
 800db58:	bd10      	pop	{r4, pc}
 800db5a:	bf00      	nop
 800db5c:	40020c00 	.word	0x40020c00
 800db60:	20008d34 	.word	0x20008d34

0800db64 <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800db64:	b538      	push	{r3, r4, r5, lr}


	HAL_Delay(100);
 800db66:	2064      	movs	r0, #100	; 0x64
void IMU_Calib(){
 800db68:	ed2d 8b02 	vpush	{d8}
	HAL_Delay(100);
 800db6c:	f000 ff4e 	bl	800ea0c <HAL_Delay>

	int num = 2000;
	float zg_vals[2000]={0.0f};
	float sum=0;
 800db70:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 800dba0 <IMU_Calib+0x3c>
 800db74:	4d0b      	ldr	r5, [pc, #44]	; (800dba4 <IMU_Calib+0x40>)
	HAL_Delay(100);
 800db76:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	for(int i = 0; i < num; i++){
		zg_vals[i] = ZGyro;
 800db7a:	edd5 7a00 	vldr	s15, [r5]
		sum += zg_vals[i];
		HAL_Delay(2);
 800db7e:	2002      	movs	r0, #2
		sum += zg_vals[i];
 800db80:	ee38 8a27 	vadd.f32	s16, s16, s15
		HAL_Delay(2);
 800db84:	f000 ff42 	bl	800ea0c <HAL_Delay>
	for(int i = 0; i < num; i++){
 800db88:	3c01      	subs	r4, #1
 800db8a:	d1f6      	bne.n	800db7a <IMU_Calib+0x16>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800db8c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800dba8 <IMU_Calib+0x44>
 800db90:	4b06      	ldr	r3, [pc, #24]	; (800dbac <IMU_Calib+0x48>)
 800db92:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 800db96:	ecbd 8b02 	vpop	{d8}
	zg_offset = sum / 2000.0f;
 800db9a:	edc3 7a00 	vstr	s15, [r3]
}
 800db9e:	bd38      	pop	{r3, r4, r5, pc}
 800dba0:	00000000 	.word	0x00000000
 800dba4:	20007fe4 	.word	0x20007fe4
 800dba8:	44fa0000 	.word	0x44fa0000
 800dbac:	20007ff0 	.word	0x20007ff0

0800dbb0 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800dbb4:	213c      	movs	r1, #60	; 0x3c
 800dbb6:	4804      	ldr	r0, [pc, #16]	; (800dbc8 <EncoderStart+0x18>)
 800dbb8:	f004 f910 	bl	8011ddc <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800dbbc:	213c      	movs	r1, #60	; 0x3c
 800dbbe:	4803      	ldr	r0, [pc, #12]	; (800dbcc <EncoderStart+0x1c>)
 800dbc0:	f004 f90c 	bl	8011ddc <HAL_TIM_Encoder_Start>
}
 800dbc4:	bf00      	nop
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	20008cf4 	.word	0x20008cf4
 800dbcc:	20008c6c 	.word	0x20008c6c

0800dbd0 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800dbd4:	2100      	movs	r1, #0
 800dbd6:	4804      	ldr	r0, [pc, #16]	; (800dbe8 <EmitterON+0x18>)
 800dbd8:	f003 fe84 	bl	80118e4 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800dbdc:	2100      	movs	r1, #0
 800dbde:	4802      	ldr	r0, [pc, #8]	; (800dbe8 <EmitterON+0x18>)
 800dbe0:	f004 ff97 	bl	8012b12 <HAL_TIMEx_OCN_Start_IT>

}
 800dbe4:	bf00      	nop
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	20008c2c 	.word	0x20008c2c

0800dbec <EmitterOFF>:
void EmitterOFF()
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	4804      	ldr	r0, [pc, #16]	; (800dc04 <EmitterOFF+0x18>)
 800dbf4:	f003 fefa 	bl	80119ec <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	4802      	ldr	r0, [pc, #8]	; (800dc04 <EmitterOFF+0x18>)
 800dbfc:	f004 ffde 	bl	8012bbc <HAL_TIMEx_OCN_Stop_IT>

}
 800dc00:	bf00      	nop
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	20008c2c 	.word	0x20008c2c

0800dc08 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2b07      	cmp	r3, #7
 800dc14:	f200 80ac 	bhi.w	800dd70 <ChangeLED+0x168>
 800dc18:	a201      	add	r2, pc, #4	; (adr r2, 800dc20 <ChangeLED+0x18>)
 800dc1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1e:	bf00      	nop
 800dc20:	0800dc41 	.word	0x0800dc41
 800dc24:	0800dc67 	.word	0x0800dc67
 800dc28:	0800dc8d 	.word	0x0800dc8d
 800dc2c:	0800dcb3 	.word	0x0800dcb3
 800dc30:	0800dcd9 	.word	0x0800dcd9
 800dc34:	0800dcff 	.word	0x0800dcff
 800dc38:	0800dd25 	.word	0x0800dd25
 800dc3c:	0800dd4b 	.word	0x0800dd4b
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800dc40:	2200      	movs	r2, #0
 800dc42:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc46:	484d      	ldr	r0, [pc, #308]	; (800dd7c <ChangeLED+0x174>)
 800dc48:	f002 fbb4 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dc52:	484a      	ldr	r0, [pc, #296]	; (800dd7c <ChangeLED+0x174>)
 800dc54:	f002 fbae 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800dc58:	2200      	movs	r2, #0
 800dc5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc5e:	4848      	ldr	r0, [pc, #288]	; (800dd80 <ChangeLED+0x178>)
 800dc60:	f002 fba8 	bl	80103b4 <HAL_GPIO_WritePin>
		break;
 800dc64:	e085      	b.n	800dd72 <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800dc66:	2201      	movs	r2, #1
 800dc68:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc6c:	4843      	ldr	r0, [pc, #268]	; (800dd7c <ChangeLED+0x174>)
 800dc6e:	f002 fba1 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800dc72:	2200      	movs	r2, #0
 800dc74:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dc78:	4840      	ldr	r0, [pc, #256]	; (800dd7c <ChangeLED+0x174>)
 800dc7a:	f002 fb9b 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc84:	483e      	ldr	r0, [pc, #248]	; (800dd80 <ChangeLED+0x178>)
 800dc86:	f002 fb95 	bl	80103b4 <HAL_GPIO_WritePin>
		break;
 800dc8a:	e072      	b.n	800dd72 <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc92:	483a      	ldr	r0, [pc, #232]	; (800dd7c <ChangeLED+0x174>)
 800dc94:	f002 fb8e 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800dc98:	2201      	movs	r2, #1
 800dc9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dc9e:	4837      	ldr	r0, [pc, #220]	; (800dd7c <ChangeLED+0x174>)
 800dca0:	f002 fb88 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800dca4:	2200      	movs	r2, #0
 800dca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcaa:	4835      	ldr	r0, [pc, #212]	; (800dd80 <ChangeLED+0x178>)
 800dcac:	f002 fb82 	bl	80103b4 <HAL_GPIO_WritePin>

		break;
 800dcb0:	e05f      	b.n	800dd72 <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcb8:	4830      	ldr	r0, [pc, #192]	; (800dd7c <ChangeLED+0x174>)
 800dcba:	f002 fb7b 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dcc4:	482d      	ldr	r0, [pc, #180]	; (800dd7c <ChangeLED+0x174>)
 800dcc6:	f002 fb75 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800dcca:	2200      	movs	r2, #0
 800dccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcd0:	482b      	ldr	r0, [pc, #172]	; (800dd80 <ChangeLED+0x178>)
 800dcd2:	f002 fb6f 	bl	80103b4 <HAL_GPIO_WritePin>
		break;
 800dcd6:	e04c      	b.n	800dd72 <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcde:	4827      	ldr	r0, [pc, #156]	; (800dd7c <ChangeLED+0x174>)
 800dce0:	f002 fb68 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800dce4:	2200      	movs	r2, #0
 800dce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dcea:	4824      	ldr	r0, [pc, #144]	; (800dd7c <ChangeLED+0x174>)
 800dcec:	f002 fb62 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcf6:	4822      	ldr	r0, [pc, #136]	; (800dd80 <ChangeLED+0x178>)
 800dcf8:	f002 fb5c 	bl	80103b4 <HAL_GPIO_WritePin>
		break;
 800dcfc:	e039      	b.n	800dd72 <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd04:	481d      	ldr	r0, [pc, #116]	; (800dd7c <ChangeLED+0x174>)
 800dd06:	f002 fb55 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd10:	481a      	ldr	r0, [pc, #104]	; (800dd7c <ChangeLED+0x174>)
 800dd12:	f002 fb4f 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800dd16:	2201      	movs	r2, #1
 800dd18:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd1c:	4818      	ldr	r0, [pc, #96]	; (800dd80 <ChangeLED+0x178>)
 800dd1e:	f002 fb49 	bl	80103b4 <HAL_GPIO_WritePin>
		break;
 800dd22:	e026      	b.n	800dd72 <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800dd24:	2200      	movs	r2, #0
 800dd26:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd2a:	4814      	ldr	r0, [pc, #80]	; (800dd7c <ChangeLED+0x174>)
 800dd2c:	f002 fb42 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800dd30:	2201      	movs	r2, #1
 800dd32:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd36:	4811      	ldr	r0, [pc, #68]	; (800dd7c <ChangeLED+0x174>)
 800dd38:	f002 fb3c 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd42:	480f      	ldr	r0, [pc, #60]	; (800dd80 <ChangeLED+0x178>)
 800dd44:	f002 fb36 	bl	80103b4 <HAL_GPIO_WritePin>

		break;
 800dd48:	e013      	b.n	800dd72 <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd50:	480a      	ldr	r0, [pc, #40]	; (800dd7c <ChangeLED+0x174>)
 800dd52:	f002 fb2f 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800dd56:	2201      	movs	r2, #1
 800dd58:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd5c:	4807      	ldr	r0, [pc, #28]	; (800dd7c <ChangeLED+0x174>)
 800dd5e:	f002 fb29 	bl	80103b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800dd62:	2201      	movs	r2, #1
 800dd64:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd68:	4805      	ldr	r0, [pc, #20]	; (800dd80 <ChangeLED+0x178>)
 800dd6a:	f002 fb23 	bl	80103b4 <HAL_GPIO_WritePin>

		break;
 800dd6e:	e000      	b.n	800dd72 <ChangeLED+0x16a>
	default: break;
 800dd70:	bf00      	nop

	}
}
 800dd72:	bf00      	nop
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	40020800 	.word	0x40020800
 800dd80:	40020400 	.word	0x40020400

0800dd84 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800dd84:	b580      	push	{r7, lr}
 800dd86:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800dd88:	210c      	movs	r1, #12
 800dd8a:	4809      	ldr	r0, [pc, #36]	; (800ddb0 <Motor_PWM_Start+0x2c>)
 800dd8c:	f003 fefe 	bl	8011b8c <HAL_TIM_PWM_Start>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800dd96:	f7fe fdc1 	bl	800c91c <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800dd9a:	2104      	movs	r1, #4
 800dd9c:	4805      	ldr	r0, [pc, #20]	; (800ddb4 <Motor_PWM_Start+0x30>)
 800dd9e:	f003 fef5 	bl	8011b8c <HAL_TIM_PWM_Start>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d001      	beq.n	800ddac <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800dda8:	f7fe fdb8 	bl	800c91c <Error_Handler>
  }
#endif
}
 800ddac:	bf00      	nop
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	20007f50 	.word	0x20007f50
 800ddb4:	20007f90 	.word	0x20007f90

0800ddb8 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800ddbc:	210c      	movs	r1, #12
 800ddbe:	4809      	ldr	r0, [pc, #36]	; (800dde4 <Motor_PWM_Stop+0x2c>)
 800ddc0:	f003 ff22 	bl	8011c08 <HAL_TIM_PWM_Stop>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 800ddca:	f7fe fda7 	bl	800c91c <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800ddce:	2104      	movs	r1, #4
 800ddd0:	4805      	ldr	r0, [pc, #20]	; (800dde8 <Motor_PWM_Stop+0x30>)
 800ddd2:	f003 ff19 	bl	8011c08 <HAL_TIM_PWM_Stop>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d001      	beq.n	800dde0 <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 800dddc:	f7fe fd9e 	bl	800c91c <Error_Handler>
  }
#endif
}
 800dde0:	bf00      	nop
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	20007f50 	.word	0x20007f50
 800dde8:	20007f90 	.word	0x20007f90
 800ddec:	00000000 	.word	0x00000000

0800ddf0 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	dd05      	ble.n	800de0c <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800de00:	2201      	movs	r2, #1
 800de02:	2104      	movs	r1, #4
 800de04:	4828      	ldr	r0, [pc, #160]	; (800dea8 <Motor_Switch+0xb8>)
 800de06:	f002 fad5 	bl	80103b4 <HAL_GPIO_WritePin>
 800de0a:	e00a      	b.n	800de22 <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	da07      	bge.n	800de22 <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800de12:	2200      	movs	r2, #0
 800de14:	2104      	movs	r1, #4
 800de16:	4824      	ldr	r0, [pc, #144]	; (800dea8 <Motor_Switch+0xb8>)
 800de18:	f002 facc 	bl	80103b4 <HAL_GPIO_WritePin>
		left = -left;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	425b      	negs	r3, r3
 800de20:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	dd05      	ble.n	800de34 <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800de28:	2200      	movs	r2, #0
 800de2a:	2101      	movs	r1, #1
 800de2c:	481e      	ldr	r0, [pc, #120]	; (800dea8 <Motor_Switch+0xb8>)
 800de2e:	f002 fac1 	bl	80103b4 <HAL_GPIO_WritePin>
 800de32:	e00a      	b.n	800de4a <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	da07      	bge.n	800de4a <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800de3a:	2201      	movs	r2, #1
 800de3c:	2101      	movs	r1, #1
 800de3e:	481a      	ldr	r0, [pc, #104]	; (800dea8 <Motor_Switch+0xb8>)
 800de40:	f002 fab8 	bl	80103b4 <HAL_GPIO_WritePin>
	  	right = -right;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	425b      	negs	r3, r3
 800de48:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f7fa faa2 	bl	8008394 <__aeabi_i2d>
 800de50:	a313      	add	r3, pc, #76	; (adr r3, 800dea0 <Motor_Switch+0xb0>)
 800de52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de56:	f7fa fd97 	bl	8008988 <__aeabi_dcmpgt>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <Motor_Switch+0x76>
 800de60:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800de64:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800de66:	6838      	ldr	r0, [r7, #0]
 800de68:	f7fa fa94 	bl	8008394 <__aeabi_i2d>
 800de6c:	a30c      	add	r3, pc, #48	; (adr r3, 800dea0 <Motor_Switch+0xb0>)
 800de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de72:	f7fa fd89 	bl	8008988 <__aeabi_dcmpgt>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d002      	beq.n	800de82 <Motor_Switch+0x92>
 800de7c:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800de80:	603b      	str	r3, [r7, #0]


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800de82:	4b0a      	ldr	r3, [pc, #40]	; (800deac <Motor_Switch+0xbc>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	683a      	ldr	r2, [r7, #0]
 800de88:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800de8a:	4b09      	ldr	r3, [pc, #36]	; (800deb0 <Motor_Switch+0xc0>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	641a      	str	r2, [r3, #64]	; 0x40
}
 800de92:	bf00      	nop
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	f3af 8000 	nop.w
 800dea0:	00000000 	.word	0x00000000
 800dea4:	40a3b000 	.word	0x40a3b000
 800dea8:	40020000 	.word	0x40020000
 800deac:	20007f90 	.word	0x20007f90
 800deb0:	20007f50 	.word	0x20007f50

0800deb4 <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	683a      	ldr	r2, [r7, #0]
 800dec2:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800dec4:	bf00      	nop
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b087      	sub	sp, #28
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 800dee0:	4a2c      	ldr	r2, [pc, #176]	; (800df94 <GetWallDataAverage+0xc4>)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	2b00      	cmp	r3, #0
 800deee:	bfb8      	it	lt
 800def0:	425b      	neglt	r3, r3
 800def2:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 800def4:	4927      	ldr	r1, [pc, #156]	; (800df94 <GetWallDataAverage+0xc4>)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	697a      	ldr	r2, [r7, #20]
 800defa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 800defe:	4a26      	ldr	r2, [pc, #152]	; (800df98 <GetWallDataAverage+0xc8>)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	441a      	add	r2, r3
 800df0a:	4923      	ldr	r1, [pc, #140]	; (800df98 <GetWallDataAverage+0xc8>)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 800df12:	4a22      	ldr	r2, [pc, #136]	; (800df9c <GetWallDataAverage+0xcc>)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df1a:	1c5a      	adds	r2, r3, #1
 800df1c:	491f      	ldr	r1, [pc, #124]	; (800df9c <GetWallDataAverage+0xcc>)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800df24:	4a1d      	ldr	r2, [pc, #116]	; (800df9c <GetWallDataAverage+0xcc>)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d121      	bne.n	800df76 <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800df32:	4a19      	ldr	r2, [pc, #100]	; (800df98 <GetWallDataAverage+0xc8>)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df3a:	ee07 3a90 	vmov	s15, r3
 800df3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800df42:	4a16      	ldr	r2, [pc, #88]	; (800df9c <GetWallDataAverage+0xcc>)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df4a:	ee07 3a90 	vmov	s15, r3
 800df4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800df52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df56:	4a12      	ldr	r2, [pc, #72]	; (800dfa0 <GetWallDataAverage+0xd0>)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 800df62:	4a0d      	ldr	r2, [pc, #52]	; (800df98 <GetWallDataAverage+0xc8>)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2100      	movs	r1, #0
 800df68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 800df6c:	4a0b      	ldr	r2, [pc, #44]	; (800df9c <GetWallDataAverage+0xcc>)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2100      	movs	r1, #0
 800df72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 800df76:	4a0a      	ldr	r2, [pc, #40]	; (800dfa0 <GetWallDataAverage+0xd0>)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	4413      	add	r3, r2
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	ee07 3a90 	vmov	s15, r3
}
 800df84:	eeb0 0a67 	vmov.f32	s0, s15
 800df88:	371c      	adds	r7, #28
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	20007ff4 	.word	0x20007ff4
 800df98:	20008004 	.word	0x20008004
 800df9c:	20008014 	.word	0x20008014
 800dfa0:	20008024 	.word	0x20008024

0800dfa4 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b087      	sub	sp, #28
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	ed87 0a02 	vstr	s0, [r7, #8]
 800dfb0:	edc7 0a01 	vstr	s1, [r7, #4]
 800dfb4:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 800dfb8:	f04f 0300 	mov.w	r3, #0
 800dfbc:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	ee07 3a90 	vmov	s15, r3
 800dfc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dfc8:	edd7 7a02 	vldr	s15, [r7, #8]
 800dfcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfd0:	edd7 7a01 	vldr	s15, [r7, #4]
 800dfd4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800dfd8:	ed97 7a00 	vldr	s14, [r7]
 800dfdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfe0:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	ee07 3a90 	vmov	s15, r3
}
 800dfea:	eeb0 0a67 	vmov.f32	s0, s15
 800dfee:	371c      	adds	r7, #28
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 800e002:	2301      	movs	r3, #1
 800e004:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800e006:	2300      	movs	r3, #0
 800e008:	60bb      	str	r3, [r7, #8]
 800e00a:	e007      	b.n	800e01c <IntegerPower+0x24>
	{
		pattern_num *= integer;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	fb02 f303 	mul.w	r3, r2, r3
 800e014:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	3301      	adds	r3, #1
 800e01a:	60bb      	str	r3, [r7, #8]
 800e01c:	68ba      	ldr	r2, [r7, #8]
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	429a      	cmp	r2, r3
 800e022:	dbf3      	blt.n	800e00c <IntegerPower+0x14>
	}
	return pattern_num;
 800e024:	68fb      	ldr	r3, [r7, #12]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3714      	adds	r7, #20
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 800e032:	b480      	push	{r7}
 800e034:	b08b      	sub	sp, #44	; 0x2c
 800e036:	af00      	add	r7, sp, #0
 800e038:	ed87 0a03 	vstr	s0, [r7, #12]
 800e03c:	edc7 0a02 	vstr	s1, [r7, #8]
 800e040:	ed87 1a01 	vstr	s2, [r7, #4]
 800e044:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 800e046:	edd7 6a03 	vldr	s13, [r7, #12]
 800e04a:	ed97 7a01 	vldr	s14, [r7, #4]
 800e04e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e052:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 800e056:	edd7 6a02 	vldr	s13, [r7, #8]
 800e05a:	ed97 7a01 	vldr	s14, [r7, #4]
 800e05e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e062:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800e066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e06a:	edd7 7a06 	vldr	s15, [r7, #24]
 800e06e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	ee07 3a90 	vmov	s15, r3
 800e078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e07c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e080:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 800e084:	2300      	movs	r3, #0
 800e086:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800e088:	2300      	movs	r3, #0
 800e08a:	623b      	str	r3, [r7, #32]
 800e08c:	e018      	b.n	800e0c0 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800e08e:	6a3b      	ldr	r3, [r7, #32]
 800e090:	ee07 3a90 	vmov	s15, r3
 800e094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e098:	edd7 7a05 	vldr	s15, [r7, #20]
 800e09c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0a0:	edd7 7a06 	vldr	s15, [r7, #24]
 800e0a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0a8:	ed97 7a07 	vldr	s14, [r7, #28]
 800e0ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b4:	db01      	blt.n	800e0ba <GetBatteryLevel+0x88>
		{
			pattern = i;
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	623b      	str	r3, [r7, #32]
 800e0c0:	6a3a      	ldr	r2, [r7, #32]
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	dbe2      	blt.n	800e08e <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	372c      	adds	r7, #44	; 0x2c
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr
	...

0800e0d8 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800e0d8:	b510      	push	{r4, lr}
	  setbuf(stdout,NULL);
 800e0da:	4c06      	ldr	r4, [pc, #24]	; (800e0f4 <Buffering+0x1c>)
 800e0dc:	6823      	ldr	r3, [r4, #0]
 800e0de:	2100      	movs	r1, #0
 800e0e0:	6898      	ldr	r0, [r3, #8]
 800e0e2:	f007 fca3 	bl	8015a2c <setbuf>
	  setbuf(stdin,NULL);
 800e0e6:	6823      	ldr	r3, [r4, #0]
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	6858      	ldr	r0, [r3, #4]
}
 800e0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  setbuf(stdin,NULL);
 800e0f0:	f007 bc9c 	b.w	8015a2c <setbuf>
 800e0f4:	2000003c 	.word	0x2000003c

0800e0f8 <Copy_Gain>:
void Copy_Gain()
{
 800e0f8:	b570      	push	{r4, r5, r6, lr}
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
	float data[16]={0};
	data[0] = Pid[L_VELO_PID].KP;
 800e0fa:	4b1c      	ldr	r3, [pc, #112]	; (800e16c <Copy_Gain+0x74>)
	uint32_t address = start_adress_sector9;
 800e0fc:	4c1c      	ldr	r4, [pc, #112]	; (800e170 <Copy_Gain+0x78>)
	data[1] = Pid[L_VELO_PID].KI;
 800e0fe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
	data[2] = Pid[L_VELO_PID].KD;
 800e102:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8

	data[3] = Pid[A_VELO_PID].KP;
 800e106:	6818      	ldr	r0, [r3, #0]
	data[4] = Pid[A_VELO_PID].KI;
 800e108:	6859      	ldr	r1, [r3, #4]
	data[0] = Pid[L_VELO_PID].KP;
 800e10a:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
	data[6] = Pid[L_WALL_PID].KP;
	data[7] = Pid[L_WALL_PID].KI;
	data[8] = Pid[L_WALL_PID].KD;

	data[9] = Pid[R_WALL_PID].KP;
	data[10] = Pid[R_WALL_PID].KI;
 800e10e:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
	uint32_t address = start_adress_sector9;
 800e112:	6824      	ldr	r4, [r4, #0]
{
 800e114:	b090      	sub	sp, #64	; 0x40
	data[0] = Pid[L_VELO_PID].KP;
 800e116:	ed8d 0a00 	vstr	s0, [sp]
	data[1] = Pid[L_VELO_PID].KI;
 800e11a:	9201      	str	r2, [sp, #4]
	data[5] = Pid[A_VELO_PID].KD;
 800e11c:	689a      	ldr	r2, [r3, #8]
	data[2] = Pid[L_VELO_PID].KD;
 800e11e:	9502      	str	r5, [sp, #8]
	data[3] = Pid[A_VELO_PID].KP;
 800e120:	9003      	str	r0, [sp, #12]
	data[6] = Pid[L_WALL_PID].KP;
 800e122:	6d9d      	ldr	r5, [r3, #88]	; 0x58
	data[7] = Pid[L_WALL_PID].KI;
 800e124:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
	data[4] = Pid[A_VELO_PID].KI;
 800e126:	9104      	str	r1, [sp, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800e128:	9205      	str	r2, [sp, #20]
	data[8] = Pid[L_WALL_PID].KD;
 800e12a:	6e19      	ldr	r1, [r3, #96]	; 0x60
	data[9] = Pid[R_WALL_PID].KP;
 800e12c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	data[6] = Pid[L_WALL_PID].KP;
 800e130:	9506      	str	r5, [sp, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800e132:	9007      	str	r0, [sp, #28]
	data[11] = Pid[R_WALL_PID].KD;
 800e134:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c

	data[12] = Pid[D_WALL_PID].KP;
 800e138:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	data[8] = Pid[L_WALL_PID].KD;
 800e13a:	9108      	str	r1, [sp, #32]
	data[9] = Pid[R_WALL_PID].KP;
 800e13c:	9209      	str	r2, [sp, #36]	; 0x24
	data[13] = Pid[D_WALL_PID].KI;
 800e13e:	6b19      	ldr	r1, [r3, #48]	; 0x30
	data[14] = Pid[D_WALL_PID].KD;
 800e140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	data[10] = Pid[R_WALL_PID].KI;
 800e142:	960a      	str	r6, [sp, #40]	; 0x28
	float data[16]={0};
 800e144:	2300      	movs	r3, #0
	data[11] = Pid[R_WALL_PID].KD;
 800e146:	950b      	str	r5, [sp, #44]	; 0x2c
	data[12] = Pid[D_WALL_PID].KP;
 800e148:	900c      	str	r0, [sp, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800e14a:	910d      	str	r1, [sp, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800e14c:	920e      	str	r2, [sp, #56]	; 0x38
 800e14e:	ad01      	add	r5, sp, #4
	float data[16]={0};
 800e150:	930f      	str	r3, [sp, #60]	; 0x3c
 800e152:	ae0f      	add	r6, sp, #60	; 0x3c
 800e154:	e001      	b.n	800e15a <Copy_Gain+0x62>
 800e156:	ecb5 0a01 	vldmia	r5!, {s0}
	for(int i=0; i < 15; i++)
	{

		FLASH_Write_Word_F( address, data[i]);
 800e15a:	4620      	mov	r0, r4
 800e15c:	f7ff faea 	bl	800d734 <FLASH_Write_Word_F>
	for(int i=0; i < 15; i++)
 800e160:	42b5      	cmp	r5, r6
		address += 0x04;
 800e162:	f104 0404 	add.w	r4, r4, #4
	for(int i=0; i < 15; i++)
 800e166:	d1f6      	bne.n	800e156 <Copy_Gain+0x5e>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800e168:	b010      	add	sp, #64	; 0x40
 800e16a:	bd70      	pop	{r4, r5, r6, pc}
 800e16c:	20008034 	.word	0x20008034
 800e170:	08019070 	.word	0x08019070

0800e174 <Load_Gain>:
void Load_Gain()
{
 800e174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e178:	ed2d 8b02 	vpush	{d8}
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800e17c:	4b61      	ldr	r3, [pc, #388]	; (800e304 <Load_Gain+0x190>)
	uint8_t j=0;
	for(int i=0; i < 15; i++)
	{
		FLASH_Read_Word_F( address, &data[i]);
		address += 0x04;
		printf("%d, %f\r\n",i,data[i]);
 800e17e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800e320 <Load_Gain+0x1ac>
	uint32_t address = start_adress_sector9;//こっちか
 800e182:	681f      	ldr	r7, [r3, #0]
		judge = isnanf(data[i]); //nanでなければ0
		printf("judge : %d\r\n", judge);
 800e184:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800e324 <Load_Gain+0x1b0>
{
 800e188:	b090      	sub	sp, #64	; 0x40
	float data[16]={0};//1個多く要素を作る。
 800e18a:	4668      	mov	r0, sp
 800e18c:	2240      	movs	r2, #64	; 0x40
 800e18e:	2100      	movs	r1, #0
 800e190:	f005 fe6f 	bl	8013e72 <memset>
 800e194:	466c      	mov	r4, sp
	for(int i=0; i < 15; i++)
 800e196:	2500      	movs	r5, #0
 800e198:	1b3f      	subs	r7, r7, r4
	uint8_t j=0;
 800e19a:	46aa      	mov	sl, r5
		FLASH_Read_Word_F( address, &data[i]);
 800e19c:	4621      	mov	r1, r4
 800e19e:	1938      	adds	r0, r7, r4
 800e1a0:	f7ff faf2 	bl	800d788 <FLASH_Read_Word_F>
		printf("%d, %f\r\n",i,data[i]);
 800e1a4:	6820      	ldr	r0, [r4, #0]
 800e1a6:	f7fa f907 	bl	80083b8 <__aeabi_f2d>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	4648      	mov	r0, r9
 800e1b0:	4629      	mov	r1, r5
 800e1b2:	f007 f95d 	bl	8015470 <iprintf>
		judge = isnanf(data[i]); //nanでなければ0
 800e1b6:	ecb4 8a01 	vldmia	r4!, {s16}
 800e1ba:	eeb4 8a48 	vcmp.f32	s16, s16
 800e1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		printf("judge : %d\r\n", judge);
 800e1c2:	bf6c      	ite	vs
 800e1c4:	2101      	movvs	r1, #1
 800e1c6:	2100      	movvc	r1, #0
 800e1c8:	4640      	mov	r0, r8
 800e1ca:	f007 f951 	bl	8015470 <iprintf>
		if(judge == 1) //コンパイラでisnanfの結果が変わる
 800e1ce:	eeb4 8a48 	vcmp.f32	s16, s16
 800e1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			j++;
 800e1d6:	bf68      	it	vs
 800e1d8:	f10a 0a01 	addvs.w	sl, sl, #1
	for(int i=0; i < 15; i++)
 800e1dc:	f105 0501 	add.w	r5, r5, #1
			j++;
 800e1e0:	bf68      	it	vs
 800e1e2:	fa5f fa8a 	uxtbvs.w	sl, sl
	for(int i=0; i < 15; i++)
 800e1e6:	2d0f      	cmp	r5, #15
 800e1e8:	d1d8      	bne.n	800e19c <Load_Gain+0x28>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800e1ea:	4651      	mov	r1, sl
 800e1ec:	4846      	ldr	r0, [pc, #280]	; (800e308 <Load_Gain+0x194>)
 800e1ee:	f007 f93f 	bl	8015470 <iprintf>
		if(j == 15)//全てnan0であれば
 800e1f2:	f1ba 0f0f 	cmp.w	sl, #15
 800e1f6:	d03a      	beq.n	800e26e <Load_Gain+0xfa>
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			//2回目以降こっちが呼ばれる
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800e1f8:	ed9d 1a02 	vldr	s2, [sp, #8]
 800e1fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800e200:	ed9d 0a00 	vldr	s0, [sp]
 800e204:	2004      	movs	r0, #4
 800e206:	f000 fa1b 	bl	800e640 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800e20a:	ed9d 1a02 	vldr	s2, [sp, #8]
 800e20e:	eddd 0a01 	vldr	s1, [sp, #4]
 800e212:	ed9d 0a00 	vldr	s0, [sp]
 800e216:	2005      	movs	r0, #5
 800e218:	f000 fa12 	bl	800e640 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800e21c:	ed9d 1a05 	vldr	s2, [sp, #20]
 800e220:	eddd 0a04 	vldr	s1, [sp, #16]
 800e224:	ed9d 0a03 	vldr	s0, [sp, #12]
 800e228:	2000      	movs	r0, #0
 800e22a:	f000 fa09 	bl	800e640 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800e22e:	ed9d 1a08 	vldr	s2, [sp, #32]
 800e232:	eddd 0a07 	vldr	s1, [sp, #28]
 800e236:	ed9d 0a06 	vldr	s0, [sp, #24]
 800e23a:	2002      	movs	r0, #2
 800e23c:	f000 fa00 	bl	800e640 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800e240:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 800e244:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 800e248:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 800e24c:	2003      	movs	r0, #3
 800e24e:	f000 f9f7 	bl	800e640 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800e252:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
 800e256:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
 800e25a:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 800e25e:	2001      	movs	r0, #1
 800e260:	f000 f9ee 	bl	800e640 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800e264:	b010      	add	sp, #64	; 0x40
 800e266:	ecbd 8b02 	vpop	{d8}
 800e26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("デフォルトゲインセット\r\n");
 800e26e:	4827      	ldr	r0, [pc, #156]	; (800e30c <Load_Gain+0x198>)
 800e270:	f007 f986 	bl	8015580 <puts>
		  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);
 800e274:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800e310 <Load_Gain+0x19c>
 800e278:	eddf 0a26 	vldr	s1, [pc, #152]	; 800e314 <Load_Gain+0x1a0>
 800e27c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800e318 <Load_Gain+0x1a4>
 800e280:	2004      	movs	r0, #4
 800e282:	f000 f9dd 	bl	800e640 <PIDSetGain>
		  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);
 800e286:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800e310 <Load_Gain+0x19c>
 800e28a:	eddf 0a22 	vldr	s1, [pc, #136]	; 800e314 <Load_Gain+0x1a0>
 800e28e:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800e318 <Load_Gain+0x1a4>
 800e292:	2005      	movs	r0, #5
 800e294:	f000 f9d4 	bl	800e640 <PIDSetGain>
		  PIDSetGain(A_VELO_PID, 14.6,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800e298:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800e31c <Load_Gain+0x1a8>
 800e29c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800e318 <Load_Gain+0x1a4>
 800e2a0:	eef0 0a41 	vmov.f32	s1, s2
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	f000 f9cb 	bl	800e640 <PIDSetGain>
		  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800e2aa:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800e31c <Load_Gain+0x1a8>
 800e2ae:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800e318 <Load_Gain+0x1a4>
 800e2b2:	eef0 0a41 	vmov.f32	s1, s2
 800e2b6:	2008      	movs	r0, #8
 800e2b8:	f000 f9c2 	bl	800e640 <PIDSetGain>
		  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800e2bc:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800e31c <Load_Gain+0x1a8>
 800e2c0:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800e2c4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800e2c8:	2001      	movs	r0, #1
 800e2ca:	f000 f9b9 	bl	800e640 <PIDSetGain>
		  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e2ce:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800e31c <Load_Gain+0x1a8>
 800e2d2:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800e2d6:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e2da:	2002      	movs	r0, #2
 800e2dc:	f000 f9b0 	bl	800e640 <PIDSetGain>
		  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e2e0:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 800e31c <Load_Gain+0x1a8>
 800e2e4:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800e2e8:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e2ec:	2003      	movs	r0, #3
 800e2ee:	f000 f9a7 	bl	800e640 <PIDSetGain>
			Flash_clear_sector9();
 800e2f2:	f7ff fa9c 	bl	800d82e <Flash_clear_sector9>
			Copy_Gain();
 800e2f6:	f7ff feff 	bl	800e0f8 <Copy_Gain>
}
 800e2fa:	b010      	add	sp, #64	; 0x40
 800e2fc:	ecbd 8b02 	vpop	{d8}
 800e300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e304:	08019070 	.word	0x08019070
 800e308:	080191b4 	.word	0x080191b4
 800e30c:	080191bc 	.word	0x080191bc
 800e310:	3a83126f 	.word	0x3a83126f
 800e314:	452f0000 	.word	0x452f0000
 800e318:	4169999a 	.word	0x4169999a
 800e31c:	00000000 	.word	0x00000000
 800e320:	08019040 	.word	0x08019040
 800e324:	080191ac 	.word	0x080191ac

0800e328 <Change_Gain>:
void Change_Gain()
{
 800e328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800e32c:	48a4      	ldr	r0, [pc, #656]	; (800e5c0 <Change_Gain+0x298>)
 800e32e:	4ca5      	ldr	r4, [pc, #660]	; (800e5c4 <Change_Gain+0x29c>)
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800e330:	f8df 8304 	ldr.w	r8, [pc, #772]	; 800e638 <Change_Gain+0x310>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e334:	4da4      	ldr	r5, [pc, #656]	; (800e5c8 <Change_Gain+0x2a0>)
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e336:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800e63c <Change_Gain+0x314>
{
 800e33a:	b087      	sub	sp, #28
	HAL_TIM_Base_Stop_IT(&htim1);
 800e33c:	f003 fa71 	bl	8011822 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800e340:	48a2      	ldr	r0, [pc, #648]	; (800e5cc <Change_Gain+0x2a4>)
 800e342:	f003 fa6e 	bl	8011822 <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800e346:	f7ff fd37 	bl	800ddb8 <Motor_PWM_Stop>
	EmitterOFF();
 800e34a:	f7ff fc4f 	bl	800dbec <EmitterOFF>
	HAL_Delay(200);
 800e34e:	20c8      	movs	r0, #200	; 0xc8
 800e350:	f000 fb5c 	bl	800ea0c <HAL_Delay>
	char change_mode='0';
 800e354:	2330      	movs	r3, #48	; 0x30
 800e356:	f88d 3015 	strb.w	r3, [sp, #21]
	char pid = '0';
 800e35a:	f88d 3016 	strb.w	r3, [sp, #22]
		printf("現在のPIDゲイン\r\n");
 800e35e:	4640      	mov	r0, r8
 800e360:	f007 f90e 	bl	8015580 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800e364:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800e368:	f7fa f826 	bl	80083b8 <__aeabi_f2d>
 800e36c:	4606      	mov	r6, r0
 800e36e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800e372:	460f      	mov	r7, r1
 800e374:	f7fa f820 	bl	80083b8 <__aeabi_f2d>
 800e378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e37c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800e380:	f7fa f81a 	bl	80083b8 <__aeabi_f2d>
 800e384:	4632      	mov	r2, r6
 800e386:	463b      	mov	r3, r7
 800e388:	e9cd 0100 	strd	r0, r1, [sp]
 800e38c:	4628      	mov	r0, r5
 800e38e:	f007 f86f 	bl	8015470 <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800e392:	6820      	ldr	r0, [r4, #0]
 800e394:	f7fa f810 	bl	80083b8 <__aeabi_f2d>
 800e398:	4606      	mov	r6, r0
 800e39a:	68a0      	ldr	r0, [r4, #8]
 800e39c:	460f      	mov	r7, r1
 800e39e:	f7fa f80b 	bl	80083b8 <__aeabi_f2d>
 800e3a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3a6:	6860      	ldr	r0, [r4, #4]
 800e3a8:	f7fa f806 	bl	80083b8 <__aeabi_f2d>
 800e3ac:	4632      	mov	r2, r6
 800e3ae:	463b      	mov	r3, r7
 800e3b0:	e9cd 0100 	strd	r0, r1, [sp]
 800e3b4:	4648      	mov	r0, r9
 800e3b6:	f007 f85b 	bl	8015470 <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800e3ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3bc:	f7f9 fffc 	bl	80083b8 <__aeabi_f2d>
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800e3c4:	460f      	mov	r7, r1
 800e3c6:	f7f9 fff7 	bl	80083b8 <__aeabi_f2d>
 800e3ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3ce:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e3d0:	f7f9 fff2 	bl	80083b8 <__aeabi_f2d>
 800e3d4:	4632      	mov	r2, r6
 800e3d6:	463b      	mov	r3, r7
 800e3d8:	e9cd 0100 	strd	r0, r1, [sp]
 800e3dc:	487c      	ldr	r0, [pc, #496]	; (800e5d0 <Change_Gain+0x2a8>)
 800e3de:	f007 f847 	bl	8015470 <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800e3e2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800e3e6:	f7f9 ffe7 	bl	80083b8 <__aeabi_f2d>
 800e3ea:	4606      	mov	r6, r0
 800e3ec:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800e3f0:	460f      	mov	r7, r1
 800e3f2:	f7f9 ffe1 	bl	80083b8 <__aeabi_f2d>
 800e3f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3fa:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800e3fe:	f7f9 ffdb 	bl	80083b8 <__aeabi_f2d>
 800e402:	4632      	mov	r2, r6
 800e404:	463b      	mov	r3, r7
 800e406:	e9cd 0100 	strd	r0, r1, [sp]
 800e40a:	4872      	ldr	r0, [pc, #456]	; (800e5d4 <Change_Gain+0x2ac>)
 800e40c:	f007 f830 	bl	8015470 <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800e410:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e412:	f7f9 ffd1 	bl	80083b8 <__aeabi_f2d>
 800e416:	4606      	mov	r6, r0
 800e418:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e41a:	460f      	mov	r7, r1
 800e41c:	f7f9 ffcc 	bl	80083b8 <__aeabi_f2d>
 800e420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e424:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e426:	f7f9 ffc7 	bl	80083b8 <__aeabi_f2d>
 800e42a:	463b      	mov	r3, r7
 800e42c:	e9cd 0100 	strd	r0, r1, [sp]
 800e430:	4632      	mov	r2, r6
 800e432:	4869      	ldr	r0, [pc, #420]	; (800e5d8 <Change_Gain+0x2b0>)
 800e434:	f007 f81c 	bl	8015470 <iprintf>

		Buffering();
 800e438:	f7ff fe4e 	bl	800e0d8 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800e43c:	4867      	ldr	r0, [pc, #412]	; (800e5dc <Change_Gain+0x2b4>)
 800e43e:	f007 f817 	bl	8015470 <iprintf>
 800e442:	f10d 0115 	add.w	r1, sp, #21
 800e446:	4866      	ldr	r0, [pc, #408]	; (800e5e0 <Change_Gain+0x2b8>)
 800e448:	f007 faa6 	bl	8015998 <iscanf>
		if(change_mode == '0')
 800e44c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e450:	2b30      	cmp	r3, #48	; 0x30
 800e452:	d066      	beq.n	800e522 <Change_Gain+0x1fa>
			break;
		}
		else
		{

			Buffering();
 800e454:	f7ff fe40 	bl	800e0d8 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800e458:	4862      	ldr	r0, [pc, #392]	; (800e5e4 <Change_Gain+0x2bc>)
 800e45a:	f007 f809 	bl	8015470 <iprintf>
 800e45e:	f10d 0116 	add.w	r1, sp, #22
 800e462:	485f      	ldr	r0, [pc, #380]	; (800e5e0 <Change_Gain+0x2b8>)
 800e464:	f007 fa98 	bl	8015998 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800e468:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800e46c:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800e470:	485d      	ldr	r0, [pc, #372]	; (800e5e8 <Change_Gain+0x2c0>)
 800e472:	f006 fffd 	bl	8015470 <iprintf>

			Buffering();
 800e476:	f7ff fe2f 	bl	800e0d8 <Buffering>
			printf("\r\n値を入力 : ");
 800e47a:	485c      	ldr	r0, [pc, #368]	; (800e5ec <Change_Gain+0x2c4>)
 800e47c:	f006 fff8 	bl	8015470 <iprintf>

			switch(change_mode)
 800e480:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e484:	3b31      	subs	r3, #49	; 0x31
 800e486:	2b04      	cmp	r3, #4
 800e488:	d85e      	bhi.n	800e548 <Change_Gain+0x220>
 800e48a:	e8df f003 	tbb	[pc, r3]
 800e48e:	303d      	.short	0x303d
 800e490:	1623      	.short	0x1623
 800e492:	03          	.byte	0x03
 800e493:	00          	.byte	0x00
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800e494:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e498:	2b70      	cmp	r3, #112	; 0x70
 800e49a:	d068      	beq.n	800e56e <Change_Gain+0x246>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
				}
				else if(pid == 'i')
 800e49c:	2b69      	cmp	r3, #105	; 0x69
 800e49e:	d07f      	beq.n	800e5a0 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[D_WALL_PID].KI);
				}
				else if(pid == 'd')
 800e4a0:	2b64      	cmp	r3, #100	; 0x64
 800e4a2:	d055      	beq.n	800e550 <Change_Gain+0x228>
				break;
			default :
				printf("該当しません\r\n");
				break;
			}
			Buffering();
 800e4a4:	f7ff fe18 	bl	800e0d8 <Buffering>
			scanf("%c",&nl);
 800e4a8:	f10d 0117 	add.w	r1, sp, #23
 800e4ac:	484c      	ldr	r0, [pc, #304]	; (800e5e0 <Change_Gain+0x2b8>)
 800e4ae:	f007 fa73 	bl	8015998 <iscanf>
			printf("\r\n");
 800e4b2:	484f      	ldr	r0, [pc, #316]	; (800e5f0 <Change_Gain+0x2c8>)
 800e4b4:	f007 f864 	bl	8015580 <puts>
		printf("現在のPIDゲイン\r\n");
 800e4b8:	e751      	b.n	800e35e <Change_Gain+0x36>
				if(pid == 'p')
 800e4ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e4be:	2b70      	cmp	r3, #112	; 0x70
 800e4c0:	d05a      	beq.n	800e578 <Change_Gain+0x250>
				else if(pid == 'i')
 800e4c2:	2b69      	cmp	r3, #105	; 0x69
 800e4c4:	d071      	beq.n	800e5aa <Change_Gain+0x282>
				else if(pid == 'd')
 800e4c6:	2b64      	cmp	r3, #100	; 0x64
 800e4c8:	d1ec      	bne.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800e4ca:	494a      	ldr	r1, [pc, #296]	; (800e5f4 <Change_Gain+0x2cc>)
 800e4cc:	484a      	ldr	r0, [pc, #296]	; (800e5f8 <Change_Gain+0x2d0>)
 800e4ce:	f007 fa63 	bl	8015998 <iscanf>
 800e4d2:	e7e7      	b.n	800e4a4 <Change_Gain+0x17c>
				if(pid == 'p')
 800e4d4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e4d8:	2b70      	cmp	r3, #112	; 0x70
 800e4da:	d052      	beq.n	800e582 <Change_Gain+0x25a>
				else if(pid == 'i')
 800e4dc:	2b69      	cmp	r3, #105	; 0x69
 800e4de:	d069      	beq.n	800e5b4 <Change_Gain+0x28c>
				else if(pid == 'd')
 800e4e0:	2b64      	cmp	r3, #100	; 0x64
 800e4e2:	d1df      	bne.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800e4e4:	4945      	ldr	r1, [pc, #276]	; (800e5fc <Change_Gain+0x2d4>)
 800e4e6:	4844      	ldr	r0, [pc, #272]	; (800e5f8 <Change_Gain+0x2d0>)
 800e4e8:	f007 fa56 	bl	8015998 <iscanf>
 800e4ec:	e7da      	b.n	800e4a4 <Change_Gain+0x17c>
				if(pid == 'p')
 800e4ee:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e4f2:	2b70      	cmp	r3, #112	; 0x70
 800e4f4:	d036      	beq.n	800e564 <Change_Gain+0x23c>
				else if(pid == 'i')
 800e4f6:	2b69      	cmp	r3, #105	; 0x69
 800e4f8:	d04d      	beq.n	800e596 <Change_Gain+0x26e>
				else if(pid == 'd')
 800e4fa:	2b64      	cmp	r3, #100	; 0x64
 800e4fc:	d1d2      	bne.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800e4fe:	4940      	ldr	r1, [pc, #256]	; (800e600 <Change_Gain+0x2d8>)
 800e500:	483d      	ldr	r0, [pc, #244]	; (800e5f8 <Change_Gain+0x2d0>)
 800e502:	f007 fa49 	bl	8015998 <iscanf>
 800e506:	e7cd      	b.n	800e4a4 <Change_Gain+0x17c>
				if(pid == 'p')
 800e508:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e50c:	2b70      	cmp	r3, #112	; 0x70
 800e50e:	d024      	beq.n	800e55a <Change_Gain+0x232>
				else if(pid == 'i')
 800e510:	2b69      	cmp	r3, #105	; 0x69
 800e512:	d03b      	beq.n	800e58c <Change_Gain+0x264>
				else if(pid == 'd')
 800e514:	2b64      	cmp	r3, #100	; 0x64
 800e516:	d1c5      	bne.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800e518:	493a      	ldr	r1, [pc, #232]	; (800e604 <Change_Gain+0x2dc>)
 800e51a:	4837      	ldr	r0, [pc, #220]	; (800e5f8 <Change_Gain+0x2d0>)
 800e51c:	f007 fa3c 	bl	8015998 <iscanf>
 800e520:	e7c0      	b.n	800e4a4 <Change_Gain+0x17c>
		}

	}
	printf("\r\n完了\r\n");
 800e522:	4839      	ldr	r0, [pc, #228]	; (800e608 <Change_Gain+0x2e0>)
 800e524:	f007 f82c 	bl	8015580 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800e528:	f7ff f981 	bl	800d82e <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800e52c:	f7ff fde4 	bl	800e0f8 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800e530:	2007      	movs	r0, #7
 800e532:	f7ff fb69 	bl	800dc08 <ChangeLED>
	HAL_Delay(200);
 800e536:	20c8      	movs	r0, #200	; 0xc8
 800e538:	f000 fa68 	bl	800ea0c <HAL_Delay>
	ChangeLED(0);
 800e53c:	2000      	movs	r0, #0
 800e53e:	f7ff fb63 	bl	800dc08 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800e542:	b007      	add	sp, #28
 800e544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				printf("該当しません\r\n");
 800e548:	4830      	ldr	r0, [pc, #192]	; (800e60c <Change_Gain+0x2e4>)
 800e54a:	f007 f819 	bl	8015580 <puts>
				break;
 800e54e:	e7a9      	b.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800e550:	492f      	ldr	r1, [pc, #188]	; (800e610 <Change_Gain+0x2e8>)
 800e552:	4829      	ldr	r0, [pc, #164]	; (800e5f8 <Change_Gain+0x2d0>)
 800e554:	f007 fa20 	bl	8015998 <iscanf>
 800e558:	e7a4      	b.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KP);
 800e55a:	492e      	ldr	r1, [pc, #184]	; (800e614 <Change_Gain+0x2ec>)
 800e55c:	4826      	ldr	r0, [pc, #152]	; (800e5f8 <Change_Gain+0x2d0>)
 800e55e:	f007 fa1b 	bl	8015998 <iscanf>
 800e562:	e79f      	b.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KP);
 800e564:	4917      	ldr	r1, [pc, #92]	; (800e5c4 <Change_Gain+0x29c>)
 800e566:	4824      	ldr	r0, [pc, #144]	; (800e5f8 <Change_Gain+0x2d0>)
 800e568:	f007 fa16 	bl	8015998 <iscanf>
 800e56c:	e79a      	b.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KP);
 800e56e:	492a      	ldr	r1, [pc, #168]	; (800e618 <Change_Gain+0x2f0>)
 800e570:	4821      	ldr	r0, [pc, #132]	; (800e5f8 <Change_Gain+0x2d0>)
 800e572:	f007 fa11 	bl	8015998 <iscanf>
 800e576:	e795      	b.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KP);
 800e578:	4928      	ldr	r1, [pc, #160]	; (800e61c <Change_Gain+0x2f4>)
 800e57a:	481f      	ldr	r0, [pc, #124]	; (800e5f8 <Change_Gain+0x2d0>)
 800e57c:	f007 fa0c 	bl	8015998 <iscanf>
 800e580:	e790      	b.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KP);
 800e582:	4927      	ldr	r1, [pc, #156]	; (800e620 <Change_Gain+0x2f8>)
 800e584:	481c      	ldr	r0, [pc, #112]	; (800e5f8 <Change_Gain+0x2d0>)
 800e586:	f007 fa07 	bl	8015998 <iscanf>
 800e58a:	e78b      	b.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800e58c:	4925      	ldr	r1, [pc, #148]	; (800e624 <Change_Gain+0x2fc>)
 800e58e:	481a      	ldr	r0, [pc, #104]	; (800e5f8 <Change_Gain+0x2d0>)
 800e590:	f007 fa02 	bl	8015998 <iscanf>
 800e594:	e786      	b.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800e596:	4924      	ldr	r1, [pc, #144]	; (800e628 <Change_Gain+0x300>)
 800e598:	4817      	ldr	r0, [pc, #92]	; (800e5f8 <Change_Gain+0x2d0>)
 800e59a:	f007 f9fd 	bl	8015998 <iscanf>
 800e59e:	e781      	b.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800e5a0:	4922      	ldr	r1, [pc, #136]	; (800e62c <Change_Gain+0x304>)
 800e5a2:	4815      	ldr	r0, [pc, #84]	; (800e5f8 <Change_Gain+0x2d0>)
 800e5a4:	f007 f9f8 	bl	8015998 <iscanf>
 800e5a8:	e77c      	b.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800e5aa:	4921      	ldr	r1, [pc, #132]	; (800e630 <Change_Gain+0x308>)
 800e5ac:	4812      	ldr	r0, [pc, #72]	; (800e5f8 <Change_Gain+0x2d0>)
 800e5ae:	f007 f9f3 	bl	8015998 <iscanf>
 800e5b2:	e777      	b.n	800e4a4 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800e5b4:	491f      	ldr	r1, [pc, #124]	; (800e634 <Change_Gain+0x30c>)
 800e5b6:	4810      	ldr	r0, [pc, #64]	; (800e5f8 <Change_Gain+0x2d0>)
 800e5b8:	f007 f9ee 	bl	8015998 <iscanf>
 800e5bc:	e772      	b.n	800e4a4 <Change_Gain+0x17c>
 800e5be:	bf00      	nop
 800e5c0:	20008e74 	.word	0x20008e74
 800e5c4:	20008034 	.word	0x20008034
 800e5c8:	08019090 	.word	0x08019090
 800e5cc:	20008c2c 	.word	0x20008c2c
 800e5d0:	080190cc 	.word	0x080190cc
 800e5d4:	080190e8 	.word	0x080190e8
 800e5d8:	08019104 	.word	0x08019104
 800e5dc:	08019120 	.word	0x08019120
 800e5e0:	08019138 	.word	0x08019138
 800e5e4:	0801913c 	.word	0x0801913c
 800e5e8:	08019150 	.word	0x08019150
 800e5ec:	08019174 	.word	0x08019174
 800e5f0:	080191a8 	.word	0x080191a8
 800e5f4:	200080c0 	.word	0x200080c0
 800e5f8:	08019188 	.word	0x08019188
 800e5fc:	20008094 	.word	0x20008094
 800e600:	2000803c 	.word	0x2000803c
 800e604:	200080ec 	.word	0x200080ec
 800e608:	080191a0 	.word	0x080191a0
 800e60c:	0801918c 	.word	0x0801918c
 800e610:	20008068 	.word	0x20008068
 800e614:	200080e4 	.word	0x200080e4
 800e618:	20008060 	.word	0x20008060
 800e61c:	200080b8 	.word	0x200080b8
 800e620:	2000808c 	.word	0x2000808c
 800e624:	200080e8 	.word	0x200080e8
 800e628:	20008038 	.word	0x20008038
 800e62c:	20008064 	.word	0x20008064
 800e630:	200080bc 	.word	0x200080bc
 800e634:	20008090 	.word	0x20008090
 800e638:	08019078 	.word	0x08019078
 800e63c:	080190b0 	.word	0x080190b0

0800e640 <PIDSetGain>:
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
	Pid[n].KP = kp;
 800e640:	4a05      	ldr	r2, [pc, #20]	; (800e658 <PIDSetGain+0x18>)
 800e642:	232c      	movs	r3, #44	; 0x2c
 800e644:	fb03 2000 	mla	r0, r3, r0, r2
 800e648:	ed80 0a00 	vstr	s0, [r0]
	Pid[n].KI = ki;
 800e64c:	edc0 0a01 	vstr	s1, [r0, #4]
	Pid[n].KD = kd;
 800e650:	ed80 1a02 	vstr	s2, [r0, #8]

}
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	20008034 	.word	0x20008034

0800e65c <PIDChangeFlag>:
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
	Pid[n].flag = on_or_off;
 800e65c:	4a02      	ldr	r2, [pc, #8]	; (800e668 <PIDChangeFlag+0xc>)
 800e65e:	232c      	movs	r3, #44	; 0x2c
 800e660:	fb03 2000 	mla	r0, r3, r0, r2
 800e664:	6281      	str	r1, [r0, #40]	; 0x28
}
 800e666:	4770      	bx	lr
 800e668:	20008034 	.word	0x20008034

0800e66c <PIDReset>:
	return Pid[n].flag;
}
void PIDReset(int n)
{
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800e66c:	4905      	ldr	r1, [pc, #20]	; (800e684 <PIDReset+0x18>)
 800e66e:	232c      	movs	r3, #44	; 0x2c
 800e670:	fb03 1000 	mla	r0, r3, r0, r1
 800e674:	2200      	movs	r2, #0
	Pid[n].ei = 0;
	Pid[n].ed = 0;
	Pid[n].elast = 0;
	Pid[n].out = 0;
 800e676:	2300      	movs	r3, #0
 800e678:	6243      	str	r3, [r0, #36]	; 0x24
	Pid[n].e = 0;
 800e67a:	60c2      	str	r2, [r0, #12]
	Pid[n].ei = 0;
 800e67c:	6102      	str	r2, [r0, #16]
	Pid[n].ed = 0;
 800e67e:	6142      	str	r2, [r0, #20]
	Pid[n].elast = 0;
 800e680:	6182      	str	r2, [r0, #24]
}
 800e682:	4770      	bx	lr
 800e684:	20008034 	.word	0x20008034

0800e688 <PIDControl>:
inline int PIDControl(int n, float target, float current)
{
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800e688:	4b21      	ldr	r3, [pc, #132]	; (800e710 <PIDControl+0x88>)
{
 800e68a:	b510      	push	{r4, lr}
	if(Pid[n].flag == 0)
 800e68c:	242c      	movs	r4, #44	; 0x2c
 800e68e:	fb04 3400 	mla	r4, r4, r0, r3
 800e692:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e694:	b3a8      	cbz	r0, 800e702 <PIDControl+0x7a>
	else
	{
		Pid[n].target = target;
		Pid[n].current = current;

		Pid[n].e = Pid[n].target - Pid[n].current;
 800e696:	ee70 6a60 	vsub.f32	s13, s0, s1
		Pid[n].ei += Pid[n].e * pid_T;
 800e69a:	ed9f 4a1e 	vldr	s8, [pc, #120]	; 800e714 <PIDControl+0x8c>
 800e69e:	ed94 6a04 	vldr	s12, [r4, #16]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
		Pid[n].elast = Pid[n].e;
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e6a2:	ed94 7a01 	vldr	s14, [r4, #4]
 800e6a6:	ed94 5a00 	vldr	s10, [r4]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e6aa:	edd4 7a06 	vldr	s15, [r4, #24]
 800e6ae:	eddf 4a1a 	vldr	s9, [pc, #104]	; 800e718 <PIDControl+0x90>
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e6b2:	edd4 5a02 	vldr	s11, [r4, #8]
		Pid[n].e = Pid[n].target - Pid[n].current;
 800e6b6:	edc4 6a03 	vstr	s13, [r4, #12]
		Pid[n].ei += Pid[n].e * pid_T;
 800e6ba:	eea6 6a84 	vfma.f32	s12, s13, s8
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e6be:	ee76 7ae7 	vsub.f32	s15, s13, s15
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e6c2:	ee26 7a07 	vmul.f32	s14, s12, s14
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e6c6:	ee67 7aa4 	vmul.f32	s15, s15, s9
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e6ca:	eea6 7a85 	vfma.f32	s14, s13, s10
		Pid[n].ei += Pid[n].e * pid_T;
 800e6ce:	ed84 6a04 	vstr	s12, [r4, #16]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e6d2:	eea7 7aa5 	vfma.f32	s14, s15, s11
		Pid[n].elast = Pid[n].e;
 800e6d6:	edc4 6a06 	vstr	s13, [r4, #24]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e6da:	edc4 7a05 	vstr	s15, [r4, #20]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e6de:	ee17 0a10 	vmov	r0, s14
		Pid[n].target = target;
 800e6e2:	ed84 0a08 	vstr	s0, [r4, #32]
		Pid[n].current = current;
 800e6e6:	edc4 0a07 	vstr	s1, [r4, #28]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e6ea:	f7f9 fe65 	bl	80083b8 <__aeabi_f2d>
 800e6ee:	ec41 0b10 	vmov	d0, r0, r1
 800e6f2:	f005 f933 	bl	801395c <round>
 800e6f6:	ec51 0b10 	vmov	r0, r1, d0
 800e6fa:	f7fa f965 	bl	80089c8 <__aeabi_d2iz>
 800e6fe:	6260      	str	r0, [r4, #36]	; 0x24
		return Pid[n].out;
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800e700:	bd10      	pop	{r4, pc}
		Pid[n].e = 0.0f;
 800e702:	2300      	movs	r3, #0
		Pid[n].out = 0;
 800e704:	6260      	str	r0, [r4, #36]	; 0x24
		Pid[n].e = 0.0f;
 800e706:	60e3      	str	r3, [r4, #12]
		Pid[n].ei = 0.0f;
 800e708:	6123      	str	r3, [r4, #16]
		Pid[n].ed = 0.0f;
 800e70a:	6163      	str	r3, [r4, #20]
		Pid[n].elast = 0.0f;
 800e70c:	61a3      	str	r3, [r4, #24]
}
 800e70e:	bd10      	pop	{r4, pc}
 800e710:	20008034 	.word	0x20008034
 800e714:	3a83126f 	.word	0x3a83126f
 800e718:	4479ffff 	.word	0x4479ffff

0800e71c <HAL_GPIO_EXTI_Callback>:
#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_12)
 800e71c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e720:	d106      	bne.n	800e730 <HAL_GPIO_EXTI_Callback+0x14>
	{
	  gpio_callback_count++;
 800e722:	4a04      	ldr	r2, [pc, #16]	; (800e734 <HAL_GPIO_EXTI_Callback+0x18>)
 800e724:	6813      	ldr	r3, [r2, #0]
 800e726:	3301      	adds	r3, #1
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800e728:	2b01      	cmp	r3, #1
 800e72a:	bfc8      	it	gt
 800e72c:	2300      	movgt	r3, #0
 800e72e:	6013      	str	r3, [r2, #0]
	}
}
 800e730:	4770      	bx	lr
 800e732:	bf00      	nop
 800e734:	20008218 	.word	0x20008218

0800e738 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 800e738:	b538      	push	{r3, r4, r5, lr}
 800e73a:	4605      	mov	r5, r0
 800e73c:	2405      	movs	r4, #5
	for(int i=0; i < 5; i++)
	{
		ChangeLED(mode);
 800e73e:	4628      	mov	r0, r5
 800e740:	f7ff fa62 	bl	800dc08 <ChangeLED>
		HAL_Delay(100);
 800e744:	2064      	movs	r0, #100	; 0x64
 800e746:	f000 f961 	bl	800ea0c <HAL_Delay>
		ChangeLED(0);
 800e74a:	2000      	movs	r0, #0
 800e74c:	f7ff fa5c 	bl	800dc08 <ChangeLED>
		HAL_Delay(100);
 800e750:	2064      	movs	r0, #100	; 0x64
 800e752:	f000 f95b 	bl	800ea0c <HAL_Delay>
	for(int i=0; i < 5; i++)
 800e756:	3c01      	subs	r4, #1
 800e758:	d1f1      	bne.n	800e73e <Signal+0x6>
	}
}
 800e75a:	bd38      	pop	{r3, r4, r5, pc}

0800e75c <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800e75c:	b510      	push	{r4, lr}

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e75e:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800e7a8 <BatteryCheck+0x4c>
 800e762:	eddf 0a12 	vldr	s1, [pc, #72]	; 800e7ac <BatteryCheck+0x50>
{
 800e766:	ed2d 8b02 	vpush	{d8}
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e76a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800e76e:	f7ff fc19 	bl	800dfa4 <ADCToBatteryVoltage>

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800e772:	2103      	movs	r1, #3
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e774:	eeb0 8a40 	vmov.f32	s16, s0
	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800e778:	2002      	movs	r0, #2
 800e77a:	f7ff fc3d 	bl	800dff8 <IntegerPower>

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800e77e:	eeb0 0a48 	vmov.f32	s0, s16
 800e782:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800e7b0 <BatteryCheck+0x54>
 800e786:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800e7b4 <BatteryCheck+0x58>
 800e78a:	f7ff fc52 	bl	800e032 <GetBatteryLevel>
 800e78e:	4604      	mov	r4, r0

	printf("%d\r\n", battery_level);
 800e790:	4601      	mov	r1, r0
 800e792:	4809      	ldr	r0, [pc, #36]	; (800e7b8 <BatteryCheck+0x5c>)
 800e794:	f006 fe6c 	bl	8015470 <iprintf>
	Signal( battery_level );
}
 800e798:	ecbd 8b02 	vpop	{d8}
	Signal( battery_level );
 800e79c:	b260      	sxtb	r0, r4
}
 800e79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Signal( battery_level );
 800e7a2:	f7ff bfc9 	b.w	800e738 <Signal>
 800e7a6:	bf00      	nop
 800e7a8:	45800000 	.word	0x45800000
 800e7ac:	40533333 	.word	0x40533333
 800e7b0:	41066666 	.word	0x41066666
 800e7b4:	40e66666 	.word	0x40e66666
 800e7b8:	080191b4 	.word	0x080191b4

0800e7bc <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 800e7bc:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 800e7be:	4c10      	ldr	r4, [pc, #64]	; (800e800 <PhotoSwitch+0x44>)
 800e7c0:	4810      	ldr	r0, [pc, #64]	; (800e804 <PhotoSwitch+0x48>)
 800e7c2:	4621      	mov	r1, r4
 800e7c4:	2202      	movs	r2, #2
 800e7c6:	f000 f987 	bl	800ead8 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	480e      	ldr	r0, [pc, #56]	; (800e808 <PhotoSwitch+0x4c>)
 800e7ce:	f004 f9a0 	bl	8012b12 <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 800e7d2:	6861      	ldr	r1, [r4, #4]
 800e7d4:	29c7      	cmp	r1, #199	; 0xc7
 800e7d6:	d806      	bhi.n	800e7e6 <PhotoSwitch+0x2a>
	{
		printf("adc2[1] : %lu\r\n", adc2[1]);
 800e7d8:	4d0c      	ldr	r5, [pc, #48]	; (800e80c <PhotoSwitch+0x50>)
 800e7da:	4628      	mov	r0, r5
 800e7dc:	f006 fe48 	bl	8015470 <iprintf>
	while(adc2[1] < 200)
 800e7e0:	6861      	ldr	r1, [r4, #4]
 800e7e2:	29c7      	cmp	r1, #199	; 0xc7
 800e7e4:	d9f9      	bls.n	800e7da <PhotoSwitch+0x1e>

	}
	HAL_ADC_Stop_DMA(&hadc2);
 800e7e6:	4807      	ldr	r0, [pc, #28]	; (800e804 <PhotoSwitch+0x48>)
 800e7e8:	f000 fa68 	bl	800ecbc <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 800e7ec:	2100      	movs	r1, #0
 800e7ee:	4806      	ldr	r0, [pc, #24]	; (800e808 <PhotoSwitch+0x4c>)
 800e7f0:	f004 f9e4 	bl	8012bbc <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 800e7f4:	2007      	movs	r0, #7
}
 800e7f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Signal( 7 );
 800e7fa:	f7ff bf9d 	b.w	800e738 <Signal>
 800e7fe:	bf00      	nop
 800e800:	20007fdc 	.word	0x20007fdc
 800e804:	20008cac 	.word	0x20008cac
 800e808:	20008c2c 	.word	0x20008c2c
 800e80c:	080191e0 	.word	0x080191e0

0800e810 <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800e810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e814:	4606      	mov	r6, r0
 800e816:	ed2d 8b04 	vpush	{d8-d9}
 800e81a:	460f      	mov	r7, r1
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e81c:	4828      	ldr	r0, [pc, #160]	; (800e8c0 <ModeSelect+0xb0>)
	*pMode=min;

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
	gpio_callback_count = 0;
 800e81e:	4c29      	ldr	r4, [pc, #164]	; (800e8c4 <ModeSelect+0xb4>)
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800e820:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800e8c8 <ModeSelect+0xb8>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800e824:	eddf 8a29 	vldr	s17, [pc, #164]	; 800e8cc <ModeSelect+0xbc>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e828:	2100      	movs	r1, #0
{
 800e82a:	4690      	mov	r8, r2
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e82c:	f003 fad6 	bl	8011ddc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800e830:	2104      	movs	r1, #4
 800e832:	4823      	ldr	r0, [pc, #140]	; (800e8c0 <ModeSelect+0xb0>)
 800e834:	f003 fad2 	bl	8011ddc <HAL_TIM_Encoder_Start>
	TIM3->CNT = INITIAL_PULSE;
 800e838:	4a25      	ldr	r2, [pc, #148]	; (800e8d0 <ModeSelect+0xc0>)
	*pMode=min;
 800e83a:	f888 6000 	strb.w	r6, [r8]
	TIM3->CNT = INITIAL_PULSE;
 800e83e:	f247 552f 	movw	r5, #29999	; 0x752f
	gpio_callback_count = 0;
 800e842:	2300      	movs	r3, #0
	TIM3->CNT = INITIAL_PULSE;
 800e844:	6255      	str	r5, [r2, #36]	; 0x24
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800e846:	4691      	mov	r9, r2
	gpio_callback_count = 0;
 800e848:	6023      	str	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800e84a:	b9eb      	cbnz	r3, 800e888 <ModeSelect+0x78>
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800e84c:	ed99 8a09 	vldr	s16, [r9, #36]	; 0x24
		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800e850:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800e854:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800e858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e85c:	db0c      	blt.n	800e878 <ModeSelect+0x68>
		  	  *pMode += 1;
 800e85e:	f898 0000 	ldrb.w	r0, [r8]
 800e862:	3001      	adds	r0, #1
 800e864:	b240      	sxtb	r0, r0
		  		  *pMode = min;
 800e866:	42b8      	cmp	r0, r7
 800e868:	bfc8      	it	gt
 800e86a:	4630      	movgt	r0, r6
 800e86c:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800e870:	f7ff f9ca 	bl	800dc08 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800e874:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800e878:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e880:	d910      	bls.n	800e8a4 <ModeSelect+0x94>
 800e882:	6823      	ldr	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800e884:	2b00      	cmp	r3, #0
 800e886:	d0e1      	beq.n	800e84c <ModeSelect+0x3c>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;
		  }
	}
	gpio_callback_count = 0;
 800e888:	2300      	movs	r3, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800e88a:	4619      	mov	r1, r3
 800e88c:	480c      	ldr	r0, [pc, #48]	; (800e8c0 <ModeSelect+0xb0>)
	gpio_callback_count = 0;
 800e88e:	6023      	str	r3, [r4, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800e890:	f003 fadb 	bl	8011e4a <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
}
 800e894:	ecbd 8b04 	vpop	{d8-d9}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800e898:	2104      	movs	r1, #4
 800e89a:	4809      	ldr	r0, [pc, #36]	; (800e8c0 <ModeSelect+0xb0>)
}
 800e89c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800e8a0:	f003 bad3 	b.w	8011e4a <HAL_TIM_Encoder_Stop>
		  	  *pMode -= 1;
 800e8a4:	f898 0000 	ldrb.w	r0, [r8]
 800e8a8:	3801      	subs	r0, #1
 800e8aa:	b240      	sxtb	r0, r0
 800e8ac:	42b0      	cmp	r0, r6
 800e8ae:	bfb8      	it	lt
 800e8b0:	4638      	movlt	r0, r7
 800e8b2:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800e8b6:	f7ff f9a7 	bl	800dc08 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800e8ba:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
 800e8be:	e7e0      	b.n	800e882 <ModeSelect+0x72>
 800e8c0:	20008cf4 	.word	0x20008cf4
 800e8c4:	20008218 	.word	0x20008218
 800e8c8:	47352f00 	.word	0x47352f00
 800e8cc:	4654bc00 	.word	0x4654bc00
 800e8d0:	40000400 	.word	0x40000400

0800e8d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e8d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e90c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e8d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e8da:	e003      	b.n	800e8e4 <LoopCopyDataInit>

0800e8dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e8dc:	4b0c      	ldr	r3, [pc, #48]	; (800e910 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e8de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e8e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e8e2:	3104      	adds	r1, #4

0800e8e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e8e4:	480b      	ldr	r0, [pc, #44]	; (800e914 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e8e6:	4b0c      	ldr	r3, [pc, #48]	; (800e918 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e8e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e8ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e8ec:	d3f6      	bcc.n	800e8dc <CopyDataInit>
  ldr  r2, =_sbss
 800e8ee:	4a0b      	ldr	r2, [pc, #44]	; (800e91c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e8f0:	e002      	b.n	800e8f8 <LoopFillZerobss>

0800e8f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e8f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e8f4:	f842 3b04 	str.w	r3, [r2], #4

0800e8f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e8f8:	4b09      	ldr	r3, [pc, #36]	; (800e920 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e8fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e8fc:	d3f9      	bcc.n	800e8f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e8fe:	f7fe fbab 	bl	800d058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e902:	f005 fa23 	bl	8013d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e906:	f7fd fe29 	bl	800c55c <main>
  bx  lr    
 800e90a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e90c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e910:	08019538 	.word	0x08019538
  ldr  r0, =_sdata
 800e914:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e918:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 800e91c:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 800e920:	20008f50 	.word	0x20008f50

0800e924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e924:	e7fe      	b.n	800e924 <ADC_IRQHandler>
	...

0800e928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e92c:	4b0e      	ldr	r3, [pc, #56]	; (800e968 <HAL_Init+0x40>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a0d      	ldr	r2, [pc, #52]	; (800e968 <HAL_Init+0x40>)
 800e932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e938:	4b0b      	ldr	r3, [pc, #44]	; (800e968 <HAL_Init+0x40>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4a0a      	ldr	r2, [pc, #40]	; (800e968 <HAL_Init+0x40>)
 800e93e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e944:	4b08      	ldr	r3, [pc, #32]	; (800e968 <HAL_Init+0x40>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4a07      	ldr	r2, [pc, #28]	; (800e968 <HAL_Init+0x40>)
 800e94a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e94e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e950:	2003      	movs	r0, #3
 800e952:	f000 fd8b 	bl	800f46c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e956:	2000      	movs	r0, #0
 800e958:	f000 f808 	bl	800e96c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e95c:	f7fd ffe0 	bl	800c920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	40023c00 	.word	0x40023c00

0800e96c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e974:	4b12      	ldr	r3, [pc, #72]	; (800e9c0 <HAL_InitTick+0x54>)
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	4b12      	ldr	r3, [pc, #72]	; (800e9c4 <HAL_InitTick+0x58>)
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	4619      	mov	r1, r3
 800e97e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e982:	fbb3 f3f1 	udiv	r3, r3, r1
 800e986:	fbb2 f3f3 	udiv	r3, r2, r3
 800e98a:	4618      	mov	r0, r3
 800e98c:	f000 fda3 	bl	800f4d6 <HAL_SYSTICK_Config>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d001      	beq.n	800e99a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	e00e      	b.n	800e9b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2b0f      	cmp	r3, #15
 800e99e:	d80a      	bhi.n	800e9b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	6879      	ldr	r1, [r7, #4]
 800e9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a8:	f000 fd6b 	bl	800f482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e9ac:	4a06      	ldr	r2, [pc, #24]	; (800e9c8 <HAL_InitTick+0x5c>)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	e000      	b.n	800e9b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e9b6:	2301      	movs	r3, #1
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3708      	adds	r7, #8
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	20000028 	.word	0x20000028
 800e9c4:	20000038 	.word	0x20000038
 800e9c8:	20000034 	.word	0x20000034

0800e9cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e9d0:	4b06      	ldr	r3, [pc, #24]	; (800e9ec <HAL_IncTick+0x20>)
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	4b06      	ldr	r3, [pc, #24]	; (800e9f0 <HAL_IncTick+0x24>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4413      	add	r3, r2
 800e9dc:	4a04      	ldr	r2, [pc, #16]	; (800e9f0 <HAL_IncTick+0x24>)
 800e9de:	6013      	str	r3, [r2, #0]
}
 800e9e0:	bf00      	nop
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
 800e9ea:	bf00      	nop
 800e9ec:	20000038 	.word	0x20000038
 800e9f0:	20008f28 	.word	0x20008f28

0800e9f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	af00      	add	r7, sp, #0
  return uwTick;
 800e9f8:	4b03      	ldr	r3, [pc, #12]	; (800ea08 <HAL_GetTick+0x14>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop
 800ea08:	20008f28 	.word	0x20008f28

0800ea0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ea14:	f7ff ffee 	bl	800e9f4 <HAL_GetTick>
 800ea18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea24:	d005      	beq.n	800ea32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ea26:	4b09      	ldr	r3, [pc, #36]	; (800ea4c <HAL_Delay+0x40>)
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	4413      	add	r3, r2
 800ea30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ea32:	bf00      	nop
 800ea34:	f7ff ffde 	bl	800e9f4 <HAL_GetTick>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	1ad3      	subs	r3, r2, r3
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d8f7      	bhi.n	800ea34 <HAL_Delay+0x28>
  {
  }
}
 800ea44:	bf00      	nop
 800ea46:	3710      	adds	r7, #16
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	20000038 	.word	0x20000038

0800ea50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d101      	bne.n	800ea66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800ea62:	2301      	movs	r3, #1
 800ea64:	e033      	b.n	800eace <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d109      	bne.n	800ea82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7fd ff7e 	bl	800c970 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea86:	f003 0310 	and.w	r3, r3, #16
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d118      	bne.n	800eac0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ea96:	f023 0302 	bic.w	r3, r3, #2
 800ea9a:	f043 0202 	orr.w	r2, r3, #2
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f000 fa94 	bl	800efd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eab2:	f023 0303 	bic.w	r3, r3, #3
 800eab6:	f043 0201 	orr.w	r2, r3, #1
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	641a      	str	r2, [r3, #64]	; 0x40
 800eabe:	e001      	b.n	800eac4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800eac0:	2301      	movs	r3, #1
 800eac2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2200      	movs	r2, #0
 800eac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800eacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
	...

0800ead8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800eae4:	2300      	movs	r3, #0
 800eae6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d101      	bne.n	800eaf6 <HAL_ADC_Start_DMA+0x1e>
 800eaf2:	2302      	movs	r3, #2
 800eaf4:	e0cc      	b.n	800ec90 <HAL_ADC_Start_DMA+0x1b8>
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	689b      	ldr	r3, [r3, #8]
 800eb04:	f003 0301 	and.w	r3, r3, #1
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d018      	beq.n	800eb3e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	689a      	ldr	r2, [r3, #8]
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f042 0201 	orr.w	r2, r2, #1
 800eb1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800eb1c:	4b5e      	ldr	r3, [pc, #376]	; (800ec98 <HAL_ADC_Start_DMA+0x1c0>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a5e      	ldr	r2, [pc, #376]	; (800ec9c <HAL_ADC_Start_DMA+0x1c4>)
 800eb22:	fba2 2303 	umull	r2, r3, r2, r3
 800eb26:	0c9a      	lsrs	r2, r3, #18
 800eb28:	4613      	mov	r3, r2
 800eb2a:	005b      	lsls	r3, r3, #1
 800eb2c:	4413      	add	r3, r2
 800eb2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800eb30:	e002      	b.n	800eb38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	3b01      	subs	r3, #1
 800eb36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1f9      	bne.n	800eb32 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	f003 0301 	and.w	r3, r3, #1
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	f040 80a0 	bne.w	800ec8e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800eb56:	f023 0301 	bic.w	r3, r3, #1
 800eb5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d007      	beq.n	800eb80 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800eb78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eb88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb8c:	d106      	bne.n	800eb9c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb92:	f023 0206 	bic.w	r2, r3, #6
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	645a      	str	r2, [r3, #68]	; 0x44
 800eb9a:	e002      	b.n	800eba2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ebaa:	4b3d      	ldr	r3, [pc, #244]	; (800eca0 <HAL_ADC_Start_DMA+0x1c8>)
 800ebac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebb2:	4a3c      	ldr	r2, [pc, #240]	; (800eca4 <HAL_ADC_Start_DMA+0x1cc>)
 800ebb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebba:	4a3b      	ldr	r2, [pc, #236]	; (800eca8 <HAL_ADC_Start_DMA+0x1d0>)
 800ebbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc2:	4a3a      	ldr	r2, [pc, #232]	; (800ecac <HAL_ADC_Start_DMA+0x1d4>)
 800ebc4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800ebce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	685a      	ldr	r2, [r3, #4]
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ebde:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	689a      	ldr	r2, [r3, #8]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ebee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	334c      	adds	r3, #76	; 0x4c
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	68ba      	ldr	r2, [r7, #8]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f000 fd24 	bl	800f64c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	f003 031f 	and.w	r3, r3, #31
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d12a      	bne.n	800ec66 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4a26      	ldr	r2, [pc, #152]	; (800ecb0 <HAL_ADC_Start_DMA+0x1d8>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d015      	beq.n	800ec46 <HAL_ADC_Start_DMA+0x16e>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4a25      	ldr	r2, [pc, #148]	; (800ecb4 <HAL_ADC_Start_DMA+0x1dc>)
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d105      	bne.n	800ec30 <HAL_ADC_Start_DMA+0x158>
 800ec24:	4b1e      	ldr	r3, [pc, #120]	; (800eca0 <HAL_ADC_Start_DMA+0x1c8>)
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	f003 031f 	and.w	r3, r3, #31
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00a      	beq.n	800ec46 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a20      	ldr	r2, [pc, #128]	; (800ecb8 <HAL_ADC_Start_DMA+0x1e0>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d129      	bne.n	800ec8e <HAL_ADC_Start_DMA+0x1b6>
 800ec3a:	4b19      	ldr	r3, [pc, #100]	; (800eca0 <HAL_ADC_Start_DMA+0x1c8>)
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	f003 031f 	and.w	r3, r3, #31
 800ec42:	2b0f      	cmp	r3, #15
 800ec44:	d823      	bhi.n	800ec8e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d11c      	bne.n	800ec8e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	689a      	ldr	r2, [r3, #8]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ec62:	609a      	str	r2, [r3, #8]
 800ec64:	e013      	b.n	800ec8e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a11      	ldr	r2, [pc, #68]	; (800ecb0 <HAL_ADC_Start_DMA+0x1d8>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d10e      	bne.n	800ec8e <HAL_ADC_Start_DMA+0x1b6>
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d107      	bne.n	800ec8e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	689a      	ldr	r2, [r3, #8]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ec8c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800ec8e:	2300      	movs	r3, #0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3718      	adds	r7, #24
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	20000028 	.word	0x20000028
 800ec9c:	431bde83 	.word	0x431bde83
 800eca0:	40012300 	.word	0x40012300
 800eca4:	0800f1c9 	.word	0x0800f1c9
 800eca8:	0800f283 	.word	0x0800f283
 800ecac:	0800f29f 	.word	0x0800f29f
 800ecb0:	40012000 	.word	0x40012000
 800ecb4:	40012100 	.word	0x40012100
 800ecb8:	40012200 	.word	0x40012200

0800ecbc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d101      	bne.n	800ecd6 <HAL_ADC_Stop_DMA+0x1a>
 800ecd2:	2302      	movs	r3, #2
 800ecd4:	e038      	b.n	800ed48 <HAL_ADC_Stop_DMA+0x8c>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2201      	movs	r2, #1
 800ecda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	689a      	ldr	r2, [r3, #8]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f022 0201 	bic.w	r2, r2, #1
 800ecec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	f003 0301 	and.w	r3, r3, #1
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d120      	bne.n	800ed3e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	689a      	ldr	r2, [r3, #8]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed0a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed10:	4618      	mov	r0, r3
 800ed12:	f000 fcf3 	bl	800f6fc <HAL_DMA_Abort>
 800ed16:	4603      	mov	r3, r0
 800ed18:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	685a      	ldr	r2, [r3, #4]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800ed28:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ed32:	f023 0301 	bic.w	r3, r3, #1
 800ed36:	f043 0201 	orr.w	r2, r3, #1
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800ed46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3710      	adds	r7, #16
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800ed58:	bf00      	nop
 800ed5a:	370c      	adds	r7, #12
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800ed6c:	bf00      	nop
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ed80:	bf00      	nop
 800ed82:	370c      	adds	r7, #12
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b085      	sub	sp, #20
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ed96:	2300      	movs	r3, #0
 800ed98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d101      	bne.n	800eda8 <HAL_ADC_ConfigChannel+0x1c>
 800eda4:	2302      	movs	r3, #2
 800eda6:	e105      	b.n	800efb4 <HAL_ADC_ConfigChannel+0x228>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b09      	cmp	r3, #9
 800edb6:	d925      	bls.n	800ee04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	68d9      	ldr	r1, [r3, #12]
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	461a      	mov	r2, r3
 800edc6:	4613      	mov	r3, r2
 800edc8:	005b      	lsls	r3, r3, #1
 800edca:	4413      	add	r3, r2
 800edcc:	3b1e      	subs	r3, #30
 800edce:	2207      	movs	r2, #7
 800edd0:	fa02 f303 	lsl.w	r3, r2, r3
 800edd4:	43da      	mvns	r2, r3
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	400a      	ands	r2, r1
 800eddc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	68d9      	ldr	r1, [r3, #12]
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	689a      	ldr	r2, [r3, #8]
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	b29b      	uxth	r3, r3
 800edee:	4618      	mov	r0, r3
 800edf0:	4603      	mov	r3, r0
 800edf2:	005b      	lsls	r3, r3, #1
 800edf4:	4403      	add	r3, r0
 800edf6:	3b1e      	subs	r3, #30
 800edf8:	409a      	lsls	r2, r3
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	430a      	orrs	r2, r1
 800ee00:	60da      	str	r2, [r3, #12]
 800ee02:	e022      	b.n	800ee4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6919      	ldr	r1, [r3, #16]
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	461a      	mov	r2, r3
 800ee12:	4613      	mov	r3, r2
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	4413      	add	r3, r2
 800ee18:	2207      	movs	r2, #7
 800ee1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee1e:	43da      	mvns	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	400a      	ands	r2, r1
 800ee26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	6919      	ldr	r1, [r3, #16]
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	689a      	ldr	r2, [r3, #8]
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	4618      	mov	r0, r3
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	005b      	lsls	r3, r3, #1
 800ee3e:	4403      	add	r3, r0
 800ee40:	409a      	lsls	r2, r3
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	430a      	orrs	r2, r1
 800ee48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	2b06      	cmp	r3, #6
 800ee50:	d824      	bhi.n	800ee9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	685a      	ldr	r2, [r3, #4]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	3b05      	subs	r3, #5
 800ee64:	221f      	movs	r2, #31
 800ee66:	fa02 f303 	lsl.w	r3, r2, r3
 800ee6a:	43da      	mvns	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	400a      	ands	r2, r1
 800ee72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	4618      	mov	r0, r3
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	685a      	ldr	r2, [r3, #4]
 800ee86:	4613      	mov	r3, r2
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4413      	add	r3, r2
 800ee8c:	3b05      	subs	r3, #5
 800ee8e:	fa00 f203 	lsl.w	r2, r0, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	430a      	orrs	r2, r1
 800ee98:	635a      	str	r2, [r3, #52]	; 0x34
 800ee9a:	e04c      	b.n	800ef36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	2b0c      	cmp	r3, #12
 800eea2:	d824      	bhi.n	800eeee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	685a      	ldr	r2, [r3, #4]
 800eeae:	4613      	mov	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	4413      	add	r3, r2
 800eeb4:	3b23      	subs	r3, #35	; 0x23
 800eeb6:	221f      	movs	r2, #31
 800eeb8:	fa02 f303 	lsl.w	r3, r2, r3
 800eebc:	43da      	mvns	r2, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	400a      	ands	r2, r1
 800eec4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	4618      	mov	r0, r3
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	685a      	ldr	r2, [r3, #4]
 800eed8:	4613      	mov	r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	4413      	add	r3, r2
 800eede:	3b23      	subs	r3, #35	; 0x23
 800eee0:	fa00 f203 	lsl.w	r2, r0, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	430a      	orrs	r2, r1
 800eeea:	631a      	str	r2, [r3, #48]	; 0x30
 800eeec:	e023      	b.n	800ef36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	685a      	ldr	r2, [r3, #4]
 800eef8:	4613      	mov	r3, r2
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	4413      	add	r3, r2
 800eefe:	3b41      	subs	r3, #65	; 0x41
 800ef00:	221f      	movs	r2, #31
 800ef02:	fa02 f303 	lsl.w	r3, r2, r3
 800ef06:	43da      	mvns	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	400a      	ands	r2, r1
 800ef0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	685a      	ldr	r2, [r3, #4]
 800ef22:	4613      	mov	r3, r2
 800ef24:	009b      	lsls	r3, r3, #2
 800ef26:	4413      	add	r3, r2
 800ef28:	3b41      	subs	r3, #65	; 0x41
 800ef2a:	fa00 f203 	lsl.w	r2, r0, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	430a      	orrs	r2, r1
 800ef34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ef36:	4b22      	ldr	r3, [pc, #136]	; (800efc0 <HAL_ADC_ConfigChannel+0x234>)
 800ef38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4a21      	ldr	r2, [pc, #132]	; (800efc4 <HAL_ADC_ConfigChannel+0x238>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d109      	bne.n	800ef58 <HAL_ADC_ConfigChannel+0x1cc>
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2b12      	cmp	r3, #18
 800ef4a:	d105      	bne.n	800ef58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4a19      	ldr	r2, [pc, #100]	; (800efc4 <HAL_ADC_ConfigChannel+0x238>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d123      	bne.n	800efaa <HAL_ADC_ConfigChannel+0x21e>
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2b10      	cmp	r3, #16
 800ef68:	d003      	beq.n	800ef72 <HAL_ADC_ConfigChannel+0x1e6>
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2b11      	cmp	r3, #17
 800ef70:	d11b      	bne.n	800efaa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2b10      	cmp	r3, #16
 800ef84:	d111      	bne.n	800efaa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ef86:	4b10      	ldr	r3, [pc, #64]	; (800efc8 <HAL_ADC_ConfigChannel+0x23c>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4a10      	ldr	r2, [pc, #64]	; (800efcc <HAL_ADC_ConfigChannel+0x240>)
 800ef8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ef90:	0c9a      	lsrs	r2, r3, #18
 800ef92:	4613      	mov	r3, r2
 800ef94:	009b      	lsls	r3, r3, #2
 800ef96:	4413      	add	r3, r2
 800ef98:	005b      	lsls	r3, r3, #1
 800ef9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ef9c:	e002      	b.n	800efa4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	3b01      	subs	r3, #1
 800efa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d1f9      	bne.n	800ef9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3714      	adds	r7, #20
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr
 800efc0:	40012300 	.word	0x40012300
 800efc4:	40012000 	.word	0x40012000
 800efc8:	20000028 	.word	0x20000028
 800efcc:	431bde83 	.word	0x431bde83

0800efd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800efd8:	4b79      	ldr	r3, [pc, #484]	; (800f1c0 <ADC_Init+0x1f0>)
 800efda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	685a      	ldr	r2, [r3, #4]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	431a      	orrs	r2, r3
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	685a      	ldr	r2, [r3, #4]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	6859      	ldr	r1, [r3, #4]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	021a      	lsls	r2, r3, #8
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	430a      	orrs	r2, r1
 800f018:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	685a      	ldr	r2, [r3, #4]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800f028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	6859      	ldr	r1, [r3, #4]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	689a      	ldr	r2, [r3, #8]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	430a      	orrs	r2, r1
 800f03a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	689a      	ldr	r2, [r3, #8]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f04a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6899      	ldr	r1, [r3, #8]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	68da      	ldr	r2, [r3, #12]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	430a      	orrs	r2, r1
 800f05c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f062:	4a58      	ldr	r2, [pc, #352]	; (800f1c4 <ADC_Init+0x1f4>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d022      	beq.n	800f0ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	689a      	ldr	r2, [r3, #8]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f076:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	6899      	ldr	r1, [r3, #8]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	430a      	orrs	r2, r1
 800f088:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	689a      	ldr	r2, [r3, #8]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	6899      	ldr	r1, [r3, #8]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	430a      	orrs	r2, r1
 800f0aa:	609a      	str	r2, [r3, #8]
 800f0ac:	e00f      	b.n	800f0ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	689a      	ldr	r2, [r3, #8]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f0bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	689a      	ldr	r2, [r3, #8]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f0cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	689a      	ldr	r2, [r3, #8]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f022 0202 	bic.w	r2, r2, #2
 800f0dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	6899      	ldr	r1, [r3, #8]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	7e1b      	ldrb	r3, [r3, #24]
 800f0e8:	005a      	lsls	r2, r3, #1
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	430a      	orrs	r2, r1
 800f0f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d01b      	beq.n	800f134 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	685a      	ldr	r2, [r3, #4]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f10a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	685a      	ldr	r2, [r3, #4]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800f11a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	6859      	ldr	r1, [r3, #4]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f126:	3b01      	subs	r3, #1
 800f128:	035a      	lsls	r2, r3, #13
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	430a      	orrs	r2, r1
 800f130:	605a      	str	r2, [r3, #4]
 800f132:	e007      	b.n	800f144 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	685a      	ldr	r2, [r3, #4]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f142:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800f152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	69db      	ldr	r3, [r3, #28]
 800f15e:	3b01      	subs	r3, #1
 800f160:	051a      	lsls	r2, r3, #20
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	430a      	orrs	r2, r1
 800f168:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	689a      	ldr	r2, [r3, #8]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	6899      	ldr	r1, [r3, #8]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f186:	025a      	lsls	r2, r3, #9
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	430a      	orrs	r2, r1
 800f18e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	689a      	ldr	r2, [r3, #8]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f19e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	6899      	ldr	r1, [r3, #8]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	029a      	lsls	r2, r3, #10
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	430a      	orrs	r2, r1
 800f1b2:	609a      	str	r2, [r3, #8]
}
 800f1b4:	bf00      	nop
 800f1b6:	3714      	adds	r7, #20
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr
 800f1c0:	40012300 	.word	0x40012300
 800f1c4:	0f000001 	.word	0x0f000001

0800f1c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d13c      	bne.n	800f25c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d12b      	bne.n	800f254 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f200:	2b00      	cmp	r3, #0
 800f202:	d127      	bne.n	800f254 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f20a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d006      	beq.n	800f220 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d119      	bne.n	800f254 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	685a      	ldr	r2, [r3, #4]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f022 0220 	bic.w	r2, r2, #32
 800f22e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f244:	2b00      	cmp	r3, #0
 800f246:	d105      	bne.n	800f254 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f24c:	f043 0201 	orr.w	r2, r3, #1
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f7ff fd7b 	bl	800ed50 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800f25a:	e00e      	b.n	800f27a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f260:	f003 0310 	and.w	r3, r3, #16
 800f264:	2b00      	cmp	r3, #0
 800f266:	d003      	beq.n	800f270 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f7ff fd85 	bl	800ed78 <HAL_ADC_ErrorCallback>
}
 800f26e:	e004      	b.n	800f27a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	4798      	blx	r3
}
 800f27a:	bf00      	nop
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b084      	sub	sp, #16
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f28e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f290:	68f8      	ldr	r0, [r7, #12]
 800f292:	f7ff fd67 	bl	800ed64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f296:	bf00      	nop
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b084      	sub	sp, #16
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2240      	movs	r2, #64	; 0x40
 800f2b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2b6:	f043 0204 	orr.w	r2, r3, #4
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f2be:	68f8      	ldr	r0, [r7, #12]
 800f2c0:	f7ff fd5a 	bl	800ed78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f2c4:	bf00      	nop
 800f2c6:	3710      	adds	r7, #16
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f003 0307 	and.w	r3, r3, #7
 800f2da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f2dc:	4b0c      	ldr	r3, [pc, #48]	; (800f310 <__NVIC_SetPriorityGrouping+0x44>)
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f2e2:	68ba      	ldr	r2, [r7, #8]
 800f2e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f2e8:	4013      	ands	r3, r2
 800f2ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f2f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f2f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f2fe:	4a04      	ldr	r2, [pc, #16]	; (800f310 <__NVIC_SetPriorityGrouping+0x44>)
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	60d3      	str	r3, [r2, #12]
}
 800f304:	bf00      	nop
 800f306:	3714      	adds	r7, #20
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr
 800f310:	e000ed00 	.word	0xe000ed00

0800f314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f314:	b480      	push	{r7}
 800f316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f318:	4b04      	ldr	r3, [pc, #16]	; (800f32c <__NVIC_GetPriorityGrouping+0x18>)
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	0a1b      	lsrs	r3, r3, #8
 800f31e:	f003 0307 	and.w	r3, r3, #7
}
 800f322:	4618      	mov	r0, r3
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr
 800f32c:	e000ed00 	.word	0xe000ed00

0800f330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f330:	b480      	push	{r7}
 800f332:	b083      	sub	sp, #12
 800f334:	af00      	add	r7, sp, #0
 800f336:	4603      	mov	r3, r0
 800f338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f33a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	db0b      	blt.n	800f35a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f342:	79fb      	ldrb	r3, [r7, #7]
 800f344:	f003 021f 	and.w	r2, r3, #31
 800f348:	4907      	ldr	r1, [pc, #28]	; (800f368 <__NVIC_EnableIRQ+0x38>)
 800f34a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f34e:	095b      	lsrs	r3, r3, #5
 800f350:	2001      	movs	r0, #1
 800f352:	fa00 f202 	lsl.w	r2, r0, r2
 800f356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800f35a:	bf00      	nop
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	e000e100 	.word	0xe000e100

0800f36c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	4603      	mov	r3, r0
 800f374:	6039      	str	r1, [r7, #0]
 800f376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	db0a      	blt.n	800f396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	b2da      	uxtb	r2, r3
 800f384:	490c      	ldr	r1, [pc, #48]	; (800f3b8 <__NVIC_SetPriority+0x4c>)
 800f386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f38a:	0112      	lsls	r2, r2, #4
 800f38c:	b2d2      	uxtb	r2, r2
 800f38e:	440b      	add	r3, r1
 800f390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f394:	e00a      	b.n	800f3ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	b2da      	uxtb	r2, r3
 800f39a:	4908      	ldr	r1, [pc, #32]	; (800f3bc <__NVIC_SetPriority+0x50>)
 800f39c:	79fb      	ldrb	r3, [r7, #7]
 800f39e:	f003 030f 	and.w	r3, r3, #15
 800f3a2:	3b04      	subs	r3, #4
 800f3a4:	0112      	lsls	r2, r2, #4
 800f3a6:	b2d2      	uxtb	r2, r2
 800f3a8:	440b      	add	r3, r1
 800f3aa:	761a      	strb	r2, [r3, #24]
}
 800f3ac:	bf00      	nop
 800f3ae:	370c      	adds	r7, #12
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr
 800f3b8:	e000e100 	.word	0xe000e100
 800f3bc:	e000ed00 	.word	0xe000ed00

0800f3c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b089      	sub	sp, #36	; 0x24
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f003 0307 	and.w	r3, r3, #7
 800f3d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	f1c3 0307 	rsb	r3, r3, #7
 800f3da:	2b04      	cmp	r3, #4
 800f3dc:	bf28      	it	cs
 800f3de:	2304      	movcs	r3, #4
 800f3e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	3304      	adds	r3, #4
 800f3e6:	2b06      	cmp	r3, #6
 800f3e8:	d902      	bls.n	800f3f0 <NVIC_EncodePriority+0x30>
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	3b03      	subs	r3, #3
 800f3ee:	e000      	b.n	800f3f2 <NVIC_EncodePriority+0x32>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800f3fe:	43da      	mvns	r2, r3
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	401a      	ands	r2, r3
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f408:	f04f 31ff 	mov.w	r1, #4294967295
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	fa01 f303 	lsl.w	r3, r1, r3
 800f412:	43d9      	mvns	r1, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f418:	4313      	orrs	r3, r2
         );
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3724      	adds	r7, #36	; 0x24
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr
	...

0800f428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3b01      	subs	r3, #1
 800f434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f438:	d301      	bcc.n	800f43e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f43a:	2301      	movs	r3, #1
 800f43c:	e00f      	b.n	800f45e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f43e:	4a0a      	ldr	r2, [pc, #40]	; (800f468 <SysTick_Config+0x40>)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	3b01      	subs	r3, #1
 800f444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f446:	210f      	movs	r1, #15
 800f448:	f04f 30ff 	mov.w	r0, #4294967295
 800f44c:	f7ff ff8e 	bl	800f36c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f450:	4b05      	ldr	r3, [pc, #20]	; (800f468 <SysTick_Config+0x40>)
 800f452:	2200      	movs	r2, #0
 800f454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f456:	4b04      	ldr	r3, [pc, #16]	; (800f468 <SysTick_Config+0x40>)
 800f458:	2207      	movs	r2, #7
 800f45a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	e000e010 	.word	0xe000e010

0800f46c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7ff ff29 	bl	800f2cc <__NVIC_SetPriorityGrouping>
}
 800f47a:	bf00      	nop
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f482:	b580      	push	{r7, lr}
 800f484:	b086      	sub	sp, #24
 800f486:	af00      	add	r7, sp, #0
 800f488:	4603      	mov	r3, r0
 800f48a:	60b9      	str	r1, [r7, #8]
 800f48c:	607a      	str	r2, [r7, #4]
 800f48e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f490:	2300      	movs	r3, #0
 800f492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f494:	f7ff ff3e 	bl	800f314 <__NVIC_GetPriorityGrouping>
 800f498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f49a:	687a      	ldr	r2, [r7, #4]
 800f49c:	68b9      	ldr	r1, [r7, #8]
 800f49e:	6978      	ldr	r0, [r7, #20]
 800f4a0:	f7ff ff8e 	bl	800f3c0 <NVIC_EncodePriority>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4aa:	4611      	mov	r1, r2
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7ff ff5d 	bl	800f36c <__NVIC_SetPriority>
}
 800f4b2:	bf00      	nop
 800f4b4:	3718      	adds	r7, #24
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b082      	sub	sp, #8
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f4c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7ff ff31 	bl	800f330 <__NVIC_EnableIRQ>
}
 800f4ce:	bf00      	nop
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}

0800f4d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f4d6:	b580      	push	{r7, lr}
 800f4d8:	b082      	sub	sp, #8
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f7ff ffa2 	bl	800f428 <SysTick_Config>
 800f4e4:	4603      	mov	r3, r0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3708      	adds	r7, #8
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
	...

0800f4f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f4fc:	f7ff fa7a 	bl	800e9f4 <HAL_GetTick>
 800f500:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d101      	bne.n	800f50c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f508:	2301      	movs	r3, #1
 800f50a:	e099      	b.n	800f640 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2202      	movs	r2, #2
 800f518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f022 0201 	bic.w	r2, r2, #1
 800f52a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f52c:	e00f      	b.n	800f54e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f52e:	f7ff fa61 	bl	800e9f4 <HAL_GetTick>
 800f532:	4602      	mov	r2, r0
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	2b05      	cmp	r3, #5
 800f53a:	d908      	bls.n	800f54e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2220      	movs	r2, #32
 800f540:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2203      	movs	r2, #3
 800f546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f54a:	2303      	movs	r3, #3
 800f54c:	e078      	b.n	800f640 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f003 0301 	and.w	r3, r3, #1
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d1e8      	bne.n	800f52e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f564:	697a      	ldr	r2, [r7, #20]
 800f566:	4b38      	ldr	r3, [pc, #224]	; (800f648 <HAL_DMA_Init+0x158>)
 800f568:	4013      	ands	r3, r2
 800f56a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	685a      	ldr	r2, [r3, #4]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	689b      	ldr	r3, [r3, #8]
 800f574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f57a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	691b      	ldr	r3, [r3, #16]
 800f580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	699b      	ldr	r3, [r3, #24]
 800f58c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6a1b      	ldr	r3, [r3, #32]
 800f598:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	4313      	orrs	r3, r2
 800f59e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a4:	2b04      	cmp	r3, #4
 800f5a6:	d107      	bne.n	800f5b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5b0:	4313      	orrs	r3, r2
 800f5b2:	697a      	ldr	r2, [r7, #20]
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	697a      	ldr	r2, [r7, #20]
 800f5be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	695b      	ldr	r3, [r3, #20]
 800f5c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	f023 0307 	bic.w	r3, r3, #7
 800f5ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d4:	697a      	ldr	r2, [r7, #20]
 800f5d6:	4313      	orrs	r3, r2
 800f5d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5de:	2b04      	cmp	r3, #4
 800f5e0:	d117      	bne.n	800f612 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5e6:	697a      	ldr	r2, [r7, #20]
 800f5e8:	4313      	orrs	r3, r2
 800f5ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d00e      	beq.n	800f612 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 fadf 	bl	800fbb8 <DMA_CheckFifoParam>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d008      	beq.n	800f612 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2240      	movs	r2, #64	; 0x40
 800f604:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2201      	movs	r2, #1
 800f60a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f60e:	2301      	movs	r3, #1
 800f610:	e016      	b.n	800f640 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	697a      	ldr	r2, [r7, #20]
 800f618:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 fa96 	bl	800fb4c <DMA_CalcBaseAndBitshift>
 800f620:	4603      	mov	r3, r0
 800f622:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f628:	223f      	movs	r2, #63	; 0x3f
 800f62a:	409a      	lsls	r2, r3
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2200      	movs	r2, #0
 800f634:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2201      	movs	r2, #1
 800f63a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f63e:	2300      	movs	r3, #0
}
 800f640:	4618      	mov	r0, r3
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}
 800f648:	f010803f 	.word	0xf010803f

0800f64c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b086      	sub	sp, #24
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f65a:	2300      	movs	r3, #0
 800f65c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f662:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f66a:	2b01      	cmp	r3, #1
 800f66c:	d101      	bne.n	800f672 <HAL_DMA_Start_IT+0x26>
 800f66e:	2302      	movs	r3, #2
 800f670:	e040      	b.n	800f6f4 <HAL_DMA_Start_IT+0xa8>
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2201      	movs	r2, #1
 800f676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f680:	b2db      	uxtb	r3, r3
 800f682:	2b01      	cmp	r3, #1
 800f684:	d12f      	bne.n	800f6e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2202      	movs	r2, #2
 800f68a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2200      	movs	r2, #0
 800f692:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	68b9      	ldr	r1, [r7, #8]
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	f000 fa28 	bl	800faf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6a4:	223f      	movs	r2, #63	; 0x3f
 800f6a6:	409a      	lsls	r2, r3
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f042 0216 	orr.w	r2, r2, #22
 800f6ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d007      	beq.n	800f6d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f042 0208 	orr.w	r2, r2, #8
 800f6d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f042 0201 	orr.w	r2, r2, #1
 800f6e2:	601a      	str	r2, [r3, #0]
 800f6e4:	e005      	b.n	800f6f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f6ee:	2302      	movs	r3, #2
 800f6f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3718      	adds	r7, #24
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f708:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800f70a:	f7ff f973 	bl	800e9f4 <HAL_GetTick>
 800f70e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f716:	b2db      	uxtb	r3, r3
 800f718:	2b02      	cmp	r3, #2
 800f71a:	d008      	beq.n	800f72e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2280      	movs	r2, #128	; 0x80
 800f720:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800f72a:	2301      	movs	r3, #1
 800f72c:	e052      	b.n	800f7d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f022 0216 	bic.w	r2, r2, #22
 800f73c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	695a      	ldr	r2, [r3, #20]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f74c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f752:	2b00      	cmp	r3, #0
 800f754:	d103      	bne.n	800f75e <HAL_DMA_Abort+0x62>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d007      	beq.n	800f76e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f022 0208 	bic.w	r2, r2, #8
 800f76c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f022 0201 	bic.w	r2, r2, #1
 800f77c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f77e:	e013      	b.n	800f7a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f780:	f7ff f938 	bl	800e9f4 <HAL_GetTick>
 800f784:	4602      	mov	r2, r0
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	1ad3      	subs	r3, r2, r3
 800f78a:	2b05      	cmp	r3, #5
 800f78c:	d90c      	bls.n	800f7a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2220      	movs	r2, #32
 800f792:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2203      	movs	r2, #3
 800f7a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800f7a4:	2303      	movs	r3, #3
 800f7a6:	e015      	b.n	800f7d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f003 0301 	and.w	r3, r3, #1
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d1e4      	bne.n	800f780 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7ba:	223f      	movs	r2, #63	; 0x3f
 800f7bc:	409a      	lsls	r2, r3
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800f7d2:	2300      	movs	r3, #0
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3710      	adds	r7, #16
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b086      	sub	sp, #24
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f7e8:	4b92      	ldr	r3, [pc, #584]	; (800fa34 <HAL_DMA_IRQHandler+0x258>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4a92      	ldr	r2, [pc, #584]	; (800fa38 <HAL_DMA_IRQHandler+0x25c>)
 800f7ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f7f2:	0a9b      	lsrs	r3, r3, #10
 800f7f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f806:	2208      	movs	r2, #8
 800f808:	409a      	lsls	r2, r3
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	4013      	ands	r3, r2
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d01a      	beq.n	800f848 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f003 0304 	and.w	r3, r3, #4
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d013      	beq.n	800f848 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f022 0204 	bic.w	r2, r2, #4
 800f82e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f834:	2208      	movs	r2, #8
 800f836:	409a      	lsls	r2, r3
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f840:	f043 0201 	orr.w	r2, r3, #1
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f84c:	2201      	movs	r2, #1
 800f84e:	409a      	lsls	r2, r3
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	4013      	ands	r3, r2
 800f854:	2b00      	cmp	r3, #0
 800f856:	d012      	beq.n	800f87e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	695b      	ldr	r3, [r3, #20]
 800f85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00b      	beq.n	800f87e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f86a:	2201      	movs	r2, #1
 800f86c:	409a      	lsls	r2, r3
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f876:	f043 0202 	orr.w	r2, r3, #2
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f882:	2204      	movs	r2, #4
 800f884:	409a      	lsls	r2, r3
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	4013      	ands	r3, r2
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d012      	beq.n	800f8b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f003 0302 	and.w	r3, r3, #2
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d00b      	beq.n	800f8b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8a0:	2204      	movs	r2, #4
 800f8a2:	409a      	lsls	r2, r3
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8ac:	f043 0204 	orr.w	r2, r3, #4
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8b8:	2210      	movs	r2, #16
 800f8ba:	409a      	lsls	r2, r3
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	4013      	ands	r3, r2
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d043      	beq.n	800f94c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f003 0308 	and.w	r3, r3, #8
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d03c      	beq.n	800f94c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8d6:	2210      	movs	r2, #16
 800f8d8:	409a      	lsls	r2, r3
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d018      	beq.n	800f91e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d108      	bne.n	800f90c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d024      	beq.n	800f94c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	4798      	blx	r3
 800f90a:	e01f      	b.n	800f94c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f910:	2b00      	cmp	r3, #0
 800f912:	d01b      	beq.n	800f94c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	4798      	blx	r3
 800f91c:	e016      	b.n	800f94c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d107      	bne.n	800f93c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	681a      	ldr	r2, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f022 0208 	bic.w	r2, r2, #8
 800f93a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f940:	2b00      	cmp	r3, #0
 800f942:	d003      	beq.n	800f94c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f950:	2220      	movs	r2, #32
 800f952:	409a      	lsls	r2, r3
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	4013      	ands	r3, r2
 800f958:	2b00      	cmp	r3, #0
 800f95a:	f000 808e 	beq.w	800fa7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	f003 0310 	and.w	r3, r3, #16
 800f968:	2b00      	cmp	r3, #0
 800f96a:	f000 8086 	beq.w	800fa7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f972:	2220      	movs	r2, #32
 800f974:	409a      	lsls	r2, r3
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f980:	b2db      	uxtb	r3, r3
 800f982:	2b05      	cmp	r3, #5
 800f984:	d136      	bne.n	800f9f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f022 0216 	bic.w	r2, r2, #22
 800f994:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	695a      	ldr	r2, [r3, #20]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f9a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d103      	bne.n	800f9b6 <HAL_DMA_IRQHandler+0x1da>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d007      	beq.n	800f9c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f022 0208 	bic.w	r2, r2, #8
 800f9c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9ca:	223f      	movs	r2, #63	; 0x3f
 800f9cc:	409a      	lsls	r2, r3
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d07d      	beq.n	800fae6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	4798      	blx	r3
        }
        return;
 800f9f2:	e078      	b.n	800fae6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d01c      	beq.n	800fa3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d108      	bne.n	800fa22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d030      	beq.n	800fa7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	4798      	blx	r3
 800fa20:	e02b      	b.n	800fa7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d027      	beq.n	800fa7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	4798      	blx	r3
 800fa32:	e022      	b.n	800fa7a <HAL_DMA_IRQHandler+0x29e>
 800fa34:	20000028 	.word	0x20000028
 800fa38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d10f      	bne.n	800fa6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f022 0210 	bic.w	r2, r2, #16
 800fa58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2201      	movs	r2, #1
 800fa66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d003      	beq.n	800fa7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d032      	beq.n	800fae8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa86:	f003 0301 	and.w	r3, r3, #1
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d022      	beq.n	800fad4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2205      	movs	r2, #5
 800fa92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f022 0201 	bic.w	r2, r2, #1
 800faa4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	3301      	adds	r3, #1
 800faaa:	60bb      	str	r3, [r7, #8]
 800faac:	697a      	ldr	r2, [r7, #20]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d307      	bcc.n	800fac2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f003 0301 	and.w	r3, r3, #1
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d1f2      	bne.n	800faa6 <HAL_DMA_IRQHandler+0x2ca>
 800fac0:	e000      	b.n	800fac4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800fac2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2201      	movs	r2, #1
 800fad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d005      	beq.n	800fae8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	4798      	blx	r3
 800fae4:	e000      	b.n	800fae8 <HAL_DMA_IRQHandler+0x30c>
        return;
 800fae6:	bf00      	nop
    }
  }
}
 800fae8:	3718      	adds	r7, #24
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop

0800faf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b085      	sub	sp, #20
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	607a      	str	r2, [r7, #4]
 800fafc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fb0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	683a      	ldr	r2, [r7, #0]
 800fb14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	689b      	ldr	r3, [r3, #8]
 800fb1a:	2b40      	cmp	r3, #64	; 0x40
 800fb1c:	d108      	bne.n	800fb30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800fb2e:	e007      	b.n	800fb40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	68ba      	ldr	r2, [r7, #8]
 800fb36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	60da      	str	r2, [r3, #12]
}
 800fb40:	bf00      	nop
 800fb42:	3714      	adds	r7, #20
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b085      	sub	sp, #20
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	3b10      	subs	r3, #16
 800fb5c:	4a14      	ldr	r2, [pc, #80]	; (800fbb0 <DMA_CalcBaseAndBitshift+0x64>)
 800fb5e:	fba2 2303 	umull	r2, r3, r2, r3
 800fb62:	091b      	lsrs	r3, r3, #4
 800fb64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800fb66:	4a13      	ldr	r2, [pc, #76]	; (800fbb4 <DMA_CalcBaseAndBitshift+0x68>)
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	461a      	mov	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2b03      	cmp	r3, #3
 800fb78:	d909      	bls.n	800fb8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fb82:	f023 0303 	bic.w	r3, r3, #3
 800fb86:	1d1a      	adds	r2, r3, #4
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	659a      	str	r2, [r3, #88]	; 0x58
 800fb8c:	e007      	b.n	800fb9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fb96:	f023 0303 	bic.w	r3, r3, #3
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3714      	adds	r7, #20
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	aaaaaaab 	.word	0xaaaaaaab
 800fbb4:	080191f0 	.word	0x080191f0

0800fbb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b085      	sub	sp, #20
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	699b      	ldr	r3, [r3, #24]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d11f      	bne.n	800fc12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	2b03      	cmp	r3, #3
 800fbd6:	d855      	bhi.n	800fc84 <DMA_CheckFifoParam+0xcc>
 800fbd8:	a201      	add	r2, pc, #4	; (adr r2, 800fbe0 <DMA_CheckFifoParam+0x28>)
 800fbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbde:	bf00      	nop
 800fbe0:	0800fbf1 	.word	0x0800fbf1
 800fbe4:	0800fc03 	.word	0x0800fc03
 800fbe8:	0800fbf1 	.word	0x0800fbf1
 800fbec:	0800fc85 	.word	0x0800fc85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d045      	beq.n	800fc88 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fc00:	e042      	b.n	800fc88 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fc0a:	d13f      	bne.n	800fc8c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fc10:	e03c      	b.n	800fc8c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	699b      	ldr	r3, [r3, #24]
 800fc16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc1a:	d121      	bne.n	800fc60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	2b03      	cmp	r3, #3
 800fc20:	d836      	bhi.n	800fc90 <DMA_CheckFifoParam+0xd8>
 800fc22:	a201      	add	r2, pc, #4	; (adr r2, 800fc28 <DMA_CheckFifoParam+0x70>)
 800fc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc28:	0800fc39 	.word	0x0800fc39
 800fc2c:	0800fc3f 	.word	0x0800fc3f
 800fc30:	0800fc39 	.word	0x0800fc39
 800fc34:	0800fc51 	.word	0x0800fc51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fc38:	2301      	movs	r3, #1
 800fc3a:	73fb      	strb	r3, [r7, #15]
      break;
 800fc3c:	e02f      	b.n	800fc9e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d024      	beq.n	800fc94 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fc4e:	e021      	b.n	800fc94 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fc58:	d11e      	bne.n	800fc98 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800fc5e:	e01b      	b.n	800fc98 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	2b02      	cmp	r3, #2
 800fc64:	d902      	bls.n	800fc6c <DMA_CheckFifoParam+0xb4>
 800fc66:	2b03      	cmp	r3, #3
 800fc68:	d003      	beq.n	800fc72 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fc6a:	e018      	b.n	800fc9e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	73fb      	strb	r3, [r7, #15]
      break;
 800fc70:	e015      	b.n	800fc9e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d00e      	beq.n	800fc9c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	73fb      	strb	r3, [r7, #15]
      break;
 800fc82:	e00b      	b.n	800fc9c <DMA_CheckFifoParam+0xe4>
      break;
 800fc84:	bf00      	nop
 800fc86:	e00a      	b.n	800fc9e <DMA_CheckFifoParam+0xe6>
      break;
 800fc88:	bf00      	nop
 800fc8a:	e008      	b.n	800fc9e <DMA_CheckFifoParam+0xe6>
      break;
 800fc8c:	bf00      	nop
 800fc8e:	e006      	b.n	800fc9e <DMA_CheckFifoParam+0xe6>
      break;
 800fc90:	bf00      	nop
 800fc92:	e004      	b.n	800fc9e <DMA_CheckFifoParam+0xe6>
      break;
 800fc94:	bf00      	nop
 800fc96:	e002      	b.n	800fc9e <DMA_CheckFifoParam+0xe6>
      break;   
 800fc98:	bf00      	nop
 800fc9a:	e000      	b.n	800fc9e <DMA_CheckFifoParam+0xe6>
      break;
 800fc9c:	bf00      	nop
    }
  } 
  
  return status; 
 800fc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3714      	adds	r7, #20
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr

0800fcac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b083      	sub	sp, #12
 800fcb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fcb6:	4b0b      	ldr	r3, [pc, #44]	; (800fce4 <HAL_FLASH_Unlock+0x38>)
 800fcb8:	691b      	ldr	r3, [r3, #16]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	da0b      	bge.n	800fcd6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800fcbe:	4b09      	ldr	r3, [pc, #36]	; (800fce4 <HAL_FLASH_Unlock+0x38>)
 800fcc0:	4a09      	ldr	r2, [pc, #36]	; (800fce8 <HAL_FLASH_Unlock+0x3c>)
 800fcc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800fcc4:	4b07      	ldr	r3, [pc, #28]	; (800fce4 <HAL_FLASH_Unlock+0x38>)
 800fcc6:	4a09      	ldr	r2, [pc, #36]	; (800fcec <HAL_FLASH_Unlock+0x40>)
 800fcc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fcca:	4b06      	ldr	r3, [pc, #24]	; (800fce4 <HAL_FLASH_Unlock+0x38>)
 800fccc:	691b      	ldr	r3, [r3, #16]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	da01      	bge.n	800fcd6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800fcd6:	79fb      	ldrb	r3, [r7, #7]
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	370c      	adds	r7, #12
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr
 800fce4:	40023c00 	.word	0x40023c00
 800fce8:	45670123 	.word	0x45670123
 800fcec:	cdef89ab 	.word	0xcdef89ab

0800fcf0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800fcf4:	4b05      	ldr	r3, [pc, #20]	; (800fd0c <HAL_FLASH_Lock+0x1c>)
 800fcf6:	691b      	ldr	r3, [r3, #16]
 800fcf8:	4a04      	ldr	r2, [pc, #16]	; (800fd0c <HAL_FLASH_Lock+0x1c>)
 800fcfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fcfe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800fd00:	2300      	movs	r3, #0
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr
 800fd0c:	40023c00 	.word	0x40023c00

0800fd10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fd1c:	4b1a      	ldr	r3, [pc, #104]	; (800fd88 <FLASH_WaitForLastOperation+0x78>)
 800fd1e:	2200      	movs	r2, #0
 800fd20:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800fd22:	f7fe fe67 	bl	800e9f4 <HAL_GetTick>
 800fd26:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800fd28:	e010      	b.n	800fd4c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd30:	d00c      	beq.n	800fd4c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d007      	beq.n	800fd48 <FLASH_WaitForLastOperation+0x38>
 800fd38:	f7fe fe5c 	bl	800e9f4 <HAL_GetTick>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	1ad3      	subs	r3, r2, r3
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d201      	bcs.n	800fd4c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800fd48:	2303      	movs	r3, #3
 800fd4a:	e019      	b.n	800fd80 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800fd4c:	4b0f      	ldr	r3, [pc, #60]	; (800fd8c <FLASH_WaitForLastOperation+0x7c>)
 800fd4e:	68db      	ldr	r3, [r3, #12]
 800fd50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1e8      	bne.n	800fd2a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800fd58:	4b0c      	ldr	r3, [pc, #48]	; (800fd8c <FLASH_WaitForLastOperation+0x7c>)
 800fd5a:	68db      	ldr	r3, [r3, #12]
 800fd5c:	f003 0301 	and.w	r3, r3, #1
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d002      	beq.n	800fd6a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fd64:	4b09      	ldr	r3, [pc, #36]	; (800fd8c <FLASH_WaitForLastOperation+0x7c>)
 800fd66:	2201      	movs	r2, #1
 800fd68:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800fd6a:	4b08      	ldr	r3, [pc, #32]	; (800fd8c <FLASH_WaitForLastOperation+0x7c>)
 800fd6c:	68db      	ldr	r3, [r3, #12]
 800fd6e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d003      	beq.n	800fd7e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800fd76:	f000 f80b 	bl	800fd90 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e000      	b.n	800fd80 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800fd7e:	2300      	movs	r3, #0
  
}  
 800fd80:	4618      	mov	r0, r3
 800fd82:	3710      	adds	r7, #16
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	20008f2c 	.word	0x20008f2c
 800fd8c:	40023c00 	.word	0x40023c00

0800fd90 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800fd90:	b480      	push	{r7}
 800fd92:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800fd94:	4b27      	ldr	r3, [pc, #156]	; (800fe34 <FLASH_SetErrorCode+0xa4>)
 800fd96:	68db      	ldr	r3, [r3, #12]
 800fd98:	f003 0310 	and.w	r3, r3, #16
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d008      	beq.n	800fdb2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fda0:	4b25      	ldr	r3, [pc, #148]	; (800fe38 <FLASH_SetErrorCode+0xa8>)
 800fda2:	69db      	ldr	r3, [r3, #28]
 800fda4:	f043 0310 	orr.w	r3, r3, #16
 800fda8:	4a23      	ldr	r2, [pc, #140]	; (800fe38 <FLASH_SetErrorCode+0xa8>)
 800fdaa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800fdac:	4b21      	ldr	r3, [pc, #132]	; (800fe34 <FLASH_SetErrorCode+0xa4>)
 800fdae:	2210      	movs	r2, #16
 800fdb0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800fdb2:	4b20      	ldr	r3, [pc, #128]	; (800fe34 <FLASH_SetErrorCode+0xa4>)
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	f003 0320 	and.w	r3, r3, #32
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d008      	beq.n	800fdd0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fdbe:	4b1e      	ldr	r3, [pc, #120]	; (800fe38 <FLASH_SetErrorCode+0xa8>)
 800fdc0:	69db      	ldr	r3, [r3, #28]
 800fdc2:	f043 0308 	orr.w	r3, r3, #8
 800fdc6:	4a1c      	ldr	r2, [pc, #112]	; (800fe38 <FLASH_SetErrorCode+0xa8>)
 800fdc8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800fdca:	4b1a      	ldr	r3, [pc, #104]	; (800fe34 <FLASH_SetErrorCode+0xa4>)
 800fdcc:	2220      	movs	r2, #32
 800fdce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800fdd0:	4b18      	ldr	r3, [pc, #96]	; (800fe34 <FLASH_SetErrorCode+0xa4>)
 800fdd2:	68db      	ldr	r3, [r3, #12]
 800fdd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d008      	beq.n	800fdee <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800fddc:	4b16      	ldr	r3, [pc, #88]	; (800fe38 <FLASH_SetErrorCode+0xa8>)
 800fdde:	69db      	ldr	r3, [r3, #28]
 800fde0:	f043 0304 	orr.w	r3, r3, #4
 800fde4:	4a14      	ldr	r2, [pc, #80]	; (800fe38 <FLASH_SetErrorCode+0xa8>)
 800fde6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800fde8:	4b12      	ldr	r3, [pc, #72]	; (800fe34 <FLASH_SetErrorCode+0xa4>)
 800fdea:	2240      	movs	r2, #64	; 0x40
 800fdec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800fdee:	4b11      	ldr	r3, [pc, #68]	; (800fe34 <FLASH_SetErrorCode+0xa4>)
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d008      	beq.n	800fe0c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800fdfa:	4b0f      	ldr	r3, [pc, #60]	; (800fe38 <FLASH_SetErrorCode+0xa8>)
 800fdfc:	69db      	ldr	r3, [r3, #28]
 800fdfe:	f043 0302 	orr.w	r3, r3, #2
 800fe02:	4a0d      	ldr	r2, [pc, #52]	; (800fe38 <FLASH_SetErrorCode+0xa8>)
 800fe04:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800fe06:	4b0b      	ldr	r3, [pc, #44]	; (800fe34 <FLASH_SetErrorCode+0xa4>)
 800fe08:	2280      	movs	r2, #128	; 0x80
 800fe0a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800fe0c:	4b09      	ldr	r3, [pc, #36]	; (800fe34 <FLASH_SetErrorCode+0xa4>)
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	f003 0302 	and.w	r3, r3, #2
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d008      	beq.n	800fe2a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800fe18:	4b07      	ldr	r3, [pc, #28]	; (800fe38 <FLASH_SetErrorCode+0xa8>)
 800fe1a:	69db      	ldr	r3, [r3, #28]
 800fe1c:	f043 0320 	orr.w	r3, r3, #32
 800fe20:	4a05      	ldr	r2, [pc, #20]	; (800fe38 <FLASH_SetErrorCode+0xa8>)
 800fe22:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800fe24:	4b03      	ldr	r3, [pc, #12]	; (800fe34 <FLASH_SetErrorCode+0xa4>)
 800fe26:	2202      	movs	r2, #2
 800fe28:	60da      	str	r2, [r3, #12]
  }
}
 800fe2a:	bf00      	nop
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr
 800fe34:	40023c00 	.word	0x40023c00
 800fe38:	20008f2c 	.word	0x20008f2c

0800fe3c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fe46:	2301      	movs	r3, #1
 800fe48:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fe4e:	4b31      	ldr	r3, [pc, #196]	; (800ff14 <HAL_FLASHEx_Erase+0xd8>)
 800fe50:	7e1b      	ldrb	r3, [r3, #24]
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d101      	bne.n	800fe5a <HAL_FLASHEx_Erase+0x1e>
 800fe56:	2302      	movs	r3, #2
 800fe58:	e058      	b.n	800ff0c <HAL_FLASHEx_Erase+0xd0>
 800fe5a:	4b2e      	ldr	r3, [pc, #184]	; (800ff14 <HAL_FLASHEx_Erase+0xd8>)
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fe60:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fe64:	f7ff ff54 	bl	800fd10 <FLASH_WaitForLastOperation>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800fe6c:	7bfb      	ldrb	r3, [r7, #15]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d148      	bne.n	800ff04 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	f04f 32ff 	mov.w	r2, #4294967295
 800fe78:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	d115      	bne.n	800feae <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	691b      	ldr	r3, [r3, #16]
 800fe86:	b2da      	uxtb	r2, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	4610      	mov	r0, r2
 800fe90:	f000 f844 	bl	800ff1c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fe94:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fe98:	f7ff ff3a 	bl	800fd10 <FLASH_WaitForLastOperation>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800fea0:	4b1d      	ldr	r3, [pc, #116]	; (800ff18 <HAL_FLASHEx_Erase+0xdc>)
 800fea2:	691b      	ldr	r3, [r3, #16]
 800fea4:	4a1c      	ldr	r2, [pc, #112]	; (800ff18 <HAL_FLASHEx_Erase+0xdc>)
 800fea6:	f023 0304 	bic.w	r3, r3, #4
 800feaa:	6113      	str	r3, [r2, #16]
 800feac:	e028      	b.n	800ff00 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	689b      	ldr	r3, [r3, #8]
 800feb2:	60bb      	str	r3, [r7, #8]
 800feb4:	e01c      	b.n	800fef0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	691b      	ldr	r3, [r3, #16]
 800feba:	b2db      	uxtb	r3, r3
 800febc:	4619      	mov	r1, r3
 800febe:	68b8      	ldr	r0, [r7, #8]
 800fec0:	f000 f850 	bl	800ff64 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fec4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fec8:	f7ff ff22 	bl	800fd10 <FLASH_WaitForLastOperation>
 800fecc:	4603      	mov	r3, r0
 800fece:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800fed0:	4b11      	ldr	r3, [pc, #68]	; (800ff18 <HAL_FLASHEx_Erase+0xdc>)
 800fed2:	691b      	ldr	r3, [r3, #16]
 800fed4:	4a10      	ldr	r2, [pc, #64]	; (800ff18 <HAL_FLASHEx_Erase+0xdc>)
 800fed6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800feda:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800fedc:	7bfb      	ldrb	r3, [r7, #15]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d003      	beq.n	800feea <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	68ba      	ldr	r2, [r7, #8]
 800fee6:	601a      	str	r2, [r3, #0]
          break;
 800fee8:	e00a      	b.n	800ff00 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	3301      	adds	r3, #1
 800feee:	60bb      	str	r3, [r7, #8]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	68da      	ldr	r2, [r3, #12]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	689b      	ldr	r3, [r3, #8]
 800fef8:	4413      	add	r3, r2
 800fefa:	68ba      	ldr	r2, [r7, #8]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d3da      	bcc.n	800feb6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800ff00:	f000 f878 	bl	800fff4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ff04:	4b03      	ldr	r3, [pc, #12]	; (800ff14 <HAL_FLASHEx_Erase+0xd8>)
 800ff06:	2200      	movs	r2, #0
 800ff08:	761a      	strb	r2, [r3, #24]

  return status;
 800ff0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3710      	adds	r7, #16
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}
 800ff14:	20008f2c 	.word	0x20008f2c
 800ff18:	40023c00 	.word	0x40023c00

0800ff1c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	4603      	mov	r3, r0
 800ff24:	6039      	str	r1, [r7, #0]
 800ff26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ff28:	4b0d      	ldr	r3, [pc, #52]	; (800ff60 <FLASH_MassErase+0x44>)
 800ff2a:	691b      	ldr	r3, [r3, #16]
 800ff2c:	4a0c      	ldr	r2, [pc, #48]	; (800ff60 <FLASH_MassErase+0x44>)
 800ff2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800ff34:	4b0a      	ldr	r3, [pc, #40]	; (800ff60 <FLASH_MassErase+0x44>)
 800ff36:	691b      	ldr	r3, [r3, #16]
 800ff38:	4a09      	ldr	r2, [pc, #36]	; (800ff60 <FLASH_MassErase+0x44>)
 800ff3a:	f043 0304 	orr.w	r3, r3, #4
 800ff3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800ff40:	4b07      	ldr	r3, [pc, #28]	; (800ff60 <FLASH_MassErase+0x44>)
 800ff42:	691a      	ldr	r2, [r3, #16]
 800ff44:	79fb      	ldrb	r3, [r7, #7]
 800ff46:	021b      	lsls	r3, r3, #8
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	4a05      	ldr	r2, [pc, #20]	; (800ff60 <FLASH_MassErase+0x44>)
 800ff4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ff50:	6113      	str	r3, [r2, #16]
}
 800ff52:	bf00      	nop
 800ff54:	370c      	adds	r7, #12
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	40023c00 	.word	0x40023c00

0800ff64 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b085      	sub	sp, #20
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800ff70:	2300      	movs	r3, #0
 800ff72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800ff74:	78fb      	ldrb	r3, [r7, #3]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d102      	bne.n	800ff80 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	60fb      	str	r3, [r7, #12]
 800ff7e:	e010      	b.n	800ffa2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800ff80:	78fb      	ldrb	r3, [r7, #3]
 800ff82:	2b01      	cmp	r3, #1
 800ff84:	d103      	bne.n	800ff8e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800ff86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff8a:	60fb      	str	r3, [r7, #12]
 800ff8c:	e009      	b.n	800ffa2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800ff8e:	78fb      	ldrb	r3, [r7, #3]
 800ff90:	2b02      	cmp	r3, #2
 800ff92:	d103      	bne.n	800ff9c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800ff94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff98:	60fb      	str	r3, [r7, #12]
 800ff9a:	e002      	b.n	800ffa2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800ff9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ffa0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ffa2:	4b13      	ldr	r3, [pc, #76]	; (800fff0 <FLASH_Erase_Sector+0x8c>)
 800ffa4:	691b      	ldr	r3, [r3, #16]
 800ffa6:	4a12      	ldr	r2, [pc, #72]	; (800fff0 <FLASH_Erase_Sector+0x8c>)
 800ffa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ffac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800ffae:	4b10      	ldr	r3, [pc, #64]	; (800fff0 <FLASH_Erase_Sector+0x8c>)
 800ffb0:	691a      	ldr	r2, [r3, #16]
 800ffb2:	490f      	ldr	r1, [pc, #60]	; (800fff0 <FLASH_Erase_Sector+0x8c>)
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800ffba:	4b0d      	ldr	r3, [pc, #52]	; (800fff0 <FLASH_Erase_Sector+0x8c>)
 800ffbc:	691b      	ldr	r3, [r3, #16]
 800ffbe:	4a0c      	ldr	r2, [pc, #48]	; (800fff0 <FLASH_Erase_Sector+0x8c>)
 800ffc0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ffc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800ffc6:	4b0a      	ldr	r3, [pc, #40]	; (800fff0 <FLASH_Erase_Sector+0x8c>)
 800ffc8:	691a      	ldr	r2, [r3, #16]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	00db      	lsls	r3, r3, #3
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	4a07      	ldr	r2, [pc, #28]	; (800fff0 <FLASH_Erase_Sector+0x8c>)
 800ffd2:	f043 0302 	orr.w	r3, r3, #2
 800ffd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800ffd8:	4b05      	ldr	r3, [pc, #20]	; (800fff0 <FLASH_Erase_Sector+0x8c>)
 800ffda:	691b      	ldr	r3, [r3, #16]
 800ffdc:	4a04      	ldr	r2, [pc, #16]	; (800fff0 <FLASH_Erase_Sector+0x8c>)
 800ffde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ffe2:	6113      	str	r3, [r2, #16]
}
 800ffe4:	bf00      	nop
 800ffe6:	3714      	adds	r7, #20
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr
 800fff0:	40023c00 	.word	0x40023c00

0800fff4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800fff4:	b480      	push	{r7}
 800fff6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800fff8:	4b20      	ldr	r3, [pc, #128]	; (801007c <FLASH_FlushCaches+0x88>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010000:	2b00      	cmp	r3, #0
 8010002:	d017      	beq.n	8010034 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8010004:	4b1d      	ldr	r3, [pc, #116]	; (801007c <FLASH_FlushCaches+0x88>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4a1c      	ldr	r2, [pc, #112]	; (801007c <FLASH_FlushCaches+0x88>)
 801000a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801000e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8010010:	4b1a      	ldr	r3, [pc, #104]	; (801007c <FLASH_FlushCaches+0x88>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	4a19      	ldr	r2, [pc, #100]	; (801007c <FLASH_FlushCaches+0x88>)
 8010016:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801001a:	6013      	str	r3, [r2, #0]
 801001c:	4b17      	ldr	r3, [pc, #92]	; (801007c <FLASH_FlushCaches+0x88>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4a16      	ldr	r2, [pc, #88]	; (801007c <FLASH_FlushCaches+0x88>)
 8010022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010026:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010028:	4b14      	ldr	r3, [pc, #80]	; (801007c <FLASH_FlushCaches+0x88>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4a13      	ldr	r2, [pc, #76]	; (801007c <FLASH_FlushCaches+0x88>)
 801002e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010032:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8010034:	4b11      	ldr	r3, [pc, #68]	; (801007c <FLASH_FlushCaches+0x88>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801003c:	2b00      	cmp	r3, #0
 801003e:	d017      	beq.n	8010070 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8010040:	4b0e      	ldr	r3, [pc, #56]	; (801007c <FLASH_FlushCaches+0x88>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	4a0d      	ldr	r2, [pc, #52]	; (801007c <FLASH_FlushCaches+0x88>)
 8010046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801004a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801004c:	4b0b      	ldr	r3, [pc, #44]	; (801007c <FLASH_FlushCaches+0x88>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4a0a      	ldr	r2, [pc, #40]	; (801007c <FLASH_FlushCaches+0x88>)
 8010052:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010056:	6013      	str	r3, [r2, #0]
 8010058:	4b08      	ldr	r3, [pc, #32]	; (801007c <FLASH_FlushCaches+0x88>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4a07      	ldr	r2, [pc, #28]	; (801007c <FLASH_FlushCaches+0x88>)
 801005e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010062:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8010064:	4b05      	ldr	r3, [pc, #20]	; (801007c <FLASH_FlushCaches+0x88>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	4a04      	ldr	r2, [pc, #16]	; (801007c <FLASH_FlushCaches+0x88>)
 801006a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801006e:	6013      	str	r3, [r2, #0]
  }
}
 8010070:	bf00      	nop
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr
 801007a:	bf00      	nop
 801007c:	40023c00 	.word	0x40023c00

08010080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010080:	b480      	push	{r7}
 8010082:	b089      	sub	sp, #36	; 0x24
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801008a:	2300      	movs	r3, #0
 801008c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801008e:	2300      	movs	r3, #0
 8010090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010092:	2300      	movs	r3, #0
 8010094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010096:	2300      	movs	r3, #0
 8010098:	61fb      	str	r3, [r7, #28]
 801009a:	e16b      	b.n	8010374 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801009c:	2201      	movs	r2, #1
 801009e:	69fb      	ldr	r3, [r7, #28]
 80100a0:	fa02 f303 	lsl.w	r3, r2, r3
 80100a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	697a      	ldr	r2, [r7, #20]
 80100ac:	4013      	ands	r3, r2
 80100ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80100b0:	693a      	ldr	r2, [r7, #16]
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	f040 815a 	bne.w	801036e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d00b      	beq.n	80100da <HAL_GPIO_Init+0x5a>
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	2b02      	cmp	r3, #2
 80100c8:	d007      	beq.n	80100da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80100ce:	2b11      	cmp	r3, #17
 80100d0:	d003      	beq.n	80100da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	2b12      	cmp	r3, #18
 80100d8:	d130      	bne.n	801013c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80100e0:	69fb      	ldr	r3, [r7, #28]
 80100e2:	005b      	lsls	r3, r3, #1
 80100e4:	2203      	movs	r2, #3
 80100e6:	fa02 f303 	lsl.w	r3, r2, r3
 80100ea:	43db      	mvns	r3, r3
 80100ec:	69ba      	ldr	r2, [r7, #24]
 80100ee:	4013      	ands	r3, r2
 80100f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	68da      	ldr	r2, [r3, #12]
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	005b      	lsls	r3, r3, #1
 80100fa:	fa02 f303 	lsl.w	r3, r2, r3
 80100fe:	69ba      	ldr	r2, [r7, #24]
 8010100:	4313      	orrs	r3, r2
 8010102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	69ba      	ldr	r2, [r7, #24]
 8010108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010110:	2201      	movs	r2, #1
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	fa02 f303 	lsl.w	r3, r2, r3
 8010118:	43db      	mvns	r3, r3
 801011a:	69ba      	ldr	r2, [r7, #24]
 801011c:	4013      	ands	r3, r2
 801011e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	091b      	lsrs	r3, r3, #4
 8010126:	f003 0201 	and.w	r2, r3, #1
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	fa02 f303 	lsl.w	r3, r2, r3
 8010130:	69ba      	ldr	r2, [r7, #24]
 8010132:	4313      	orrs	r3, r2
 8010134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	69ba      	ldr	r2, [r7, #24]
 801013a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	005b      	lsls	r3, r3, #1
 8010146:	2203      	movs	r2, #3
 8010148:	fa02 f303 	lsl.w	r3, r2, r3
 801014c:	43db      	mvns	r3, r3
 801014e:	69ba      	ldr	r2, [r7, #24]
 8010150:	4013      	ands	r3, r2
 8010152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	689a      	ldr	r2, [r3, #8]
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	005b      	lsls	r3, r3, #1
 801015c:	fa02 f303 	lsl.w	r3, r2, r3
 8010160:	69ba      	ldr	r2, [r7, #24]
 8010162:	4313      	orrs	r3, r2
 8010164:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	69ba      	ldr	r2, [r7, #24]
 801016a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	2b02      	cmp	r3, #2
 8010172:	d003      	beq.n	801017c <HAL_GPIO_Init+0xfc>
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	685b      	ldr	r3, [r3, #4]
 8010178:	2b12      	cmp	r3, #18
 801017a:	d123      	bne.n	80101c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	08da      	lsrs	r2, r3, #3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	3208      	adds	r2, #8
 8010184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	f003 0307 	and.w	r3, r3, #7
 8010190:	009b      	lsls	r3, r3, #2
 8010192:	220f      	movs	r2, #15
 8010194:	fa02 f303 	lsl.w	r3, r2, r3
 8010198:	43db      	mvns	r3, r3
 801019a:	69ba      	ldr	r2, [r7, #24]
 801019c:	4013      	ands	r3, r2
 801019e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	691a      	ldr	r2, [r3, #16]
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	f003 0307 	and.w	r3, r3, #7
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	fa02 f303 	lsl.w	r3, r2, r3
 80101b0:	69ba      	ldr	r2, [r7, #24]
 80101b2:	4313      	orrs	r3, r2
 80101b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	08da      	lsrs	r2, r3, #3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	3208      	adds	r2, #8
 80101be:	69b9      	ldr	r1, [r7, #24]
 80101c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	005b      	lsls	r3, r3, #1
 80101ce:	2203      	movs	r2, #3
 80101d0:	fa02 f303 	lsl.w	r3, r2, r3
 80101d4:	43db      	mvns	r3, r3
 80101d6:	69ba      	ldr	r2, [r7, #24]
 80101d8:	4013      	ands	r3, r2
 80101da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	f003 0203 	and.w	r2, r3, #3
 80101e4:	69fb      	ldr	r3, [r7, #28]
 80101e6:	005b      	lsls	r3, r3, #1
 80101e8:	fa02 f303 	lsl.w	r3, r2, r3
 80101ec:	69ba      	ldr	r2, [r7, #24]
 80101ee:	4313      	orrs	r3, r2
 80101f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	69ba      	ldr	r2, [r7, #24]
 80101f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010200:	2b00      	cmp	r3, #0
 8010202:	f000 80b4 	beq.w	801036e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010206:	2300      	movs	r3, #0
 8010208:	60fb      	str	r3, [r7, #12]
 801020a:	4b5f      	ldr	r3, [pc, #380]	; (8010388 <HAL_GPIO_Init+0x308>)
 801020c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801020e:	4a5e      	ldr	r2, [pc, #376]	; (8010388 <HAL_GPIO_Init+0x308>)
 8010210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010214:	6453      	str	r3, [r2, #68]	; 0x44
 8010216:	4b5c      	ldr	r3, [pc, #368]	; (8010388 <HAL_GPIO_Init+0x308>)
 8010218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801021a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801021e:	60fb      	str	r3, [r7, #12]
 8010220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010222:	4a5a      	ldr	r2, [pc, #360]	; (801038c <HAL_GPIO_Init+0x30c>)
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	089b      	lsrs	r3, r3, #2
 8010228:	3302      	adds	r3, #2
 801022a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801022e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	f003 0303 	and.w	r3, r3, #3
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	220f      	movs	r2, #15
 801023a:	fa02 f303 	lsl.w	r3, r2, r3
 801023e:	43db      	mvns	r3, r3
 8010240:	69ba      	ldr	r2, [r7, #24]
 8010242:	4013      	ands	r3, r2
 8010244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	4a51      	ldr	r2, [pc, #324]	; (8010390 <HAL_GPIO_Init+0x310>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d02b      	beq.n	80102a6 <HAL_GPIO_Init+0x226>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	4a50      	ldr	r2, [pc, #320]	; (8010394 <HAL_GPIO_Init+0x314>)
 8010252:	4293      	cmp	r3, r2
 8010254:	d025      	beq.n	80102a2 <HAL_GPIO_Init+0x222>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4a4f      	ldr	r2, [pc, #316]	; (8010398 <HAL_GPIO_Init+0x318>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d01f      	beq.n	801029e <HAL_GPIO_Init+0x21e>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4a4e      	ldr	r2, [pc, #312]	; (801039c <HAL_GPIO_Init+0x31c>)
 8010262:	4293      	cmp	r3, r2
 8010264:	d019      	beq.n	801029a <HAL_GPIO_Init+0x21a>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4a4d      	ldr	r2, [pc, #308]	; (80103a0 <HAL_GPIO_Init+0x320>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d013      	beq.n	8010296 <HAL_GPIO_Init+0x216>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4a4c      	ldr	r2, [pc, #304]	; (80103a4 <HAL_GPIO_Init+0x324>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d00d      	beq.n	8010292 <HAL_GPIO_Init+0x212>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a4b      	ldr	r2, [pc, #300]	; (80103a8 <HAL_GPIO_Init+0x328>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d007      	beq.n	801028e <HAL_GPIO_Init+0x20e>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4a4a      	ldr	r2, [pc, #296]	; (80103ac <HAL_GPIO_Init+0x32c>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d101      	bne.n	801028a <HAL_GPIO_Init+0x20a>
 8010286:	2307      	movs	r3, #7
 8010288:	e00e      	b.n	80102a8 <HAL_GPIO_Init+0x228>
 801028a:	2308      	movs	r3, #8
 801028c:	e00c      	b.n	80102a8 <HAL_GPIO_Init+0x228>
 801028e:	2306      	movs	r3, #6
 8010290:	e00a      	b.n	80102a8 <HAL_GPIO_Init+0x228>
 8010292:	2305      	movs	r3, #5
 8010294:	e008      	b.n	80102a8 <HAL_GPIO_Init+0x228>
 8010296:	2304      	movs	r3, #4
 8010298:	e006      	b.n	80102a8 <HAL_GPIO_Init+0x228>
 801029a:	2303      	movs	r3, #3
 801029c:	e004      	b.n	80102a8 <HAL_GPIO_Init+0x228>
 801029e:	2302      	movs	r3, #2
 80102a0:	e002      	b.n	80102a8 <HAL_GPIO_Init+0x228>
 80102a2:	2301      	movs	r3, #1
 80102a4:	e000      	b.n	80102a8 <HAL_GPIO_Init+0x228>
 80102a6:	2300      	movs	r3, #0
 80102a8:	69fa      	ldr	r2, [r7, #28]
 80102aa:	f002 0203 	and.w	r2, r2, #3
 80102ae:	0092      	lsls	r2, r2, #2
 80102b0:	4093      	lsls	r3, r2
 80102b2:	69ba      	ldr	r2, [r7, #24]
 80102b4:	4313      	orrs	r3, r2
 80102b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80102b8:	4934      	ldr	r1, [pc, #208]	; (801038c <HAL_GPIO_Init+0x30c>)
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	089b      	lsrs	r3, r3, #2
 80102be:	3302      	adds	r3, #2
 80102c0:	69ba      	ldr	r2, [r7, #24]
 80102c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80102c6:	4b3a      	ldr	r3, [pc, #232]	; (80103b0 <HAL_GPIO_Init+0x330>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	43db      	mvns	r3, r3
 80102d0:	69ba      	ldr	r2, [r7, #24]
 80102d2:	4013      	ands	r3, r2
 80102d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d003      	beq.n	80102ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80102e2:	69ba      	ldr	r2, [r7, #24]
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	4313      	orrs	r3, r2
 80102e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80102ea:	4a31      	ldr	r2, [pc, #196]	; (80103b0 <HAL_GPIO_Init+0x330>)
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80102f0:	4b2f      	ldr	r3, [pc, #188]	; (80103b0 <HAL_GPIO_Init+0x330>)
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	43db      	mvns	r3, r3
 80102fa:	69ba      	ldr	r2, [r7, #24]
 80102fc:	4013      	ands	r3, r2
 80102fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010308:	2b00      	cmp	r3, #0
 801030a:	d003      	beq.n	8010314 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 801030c:	69ba      	ldr	r2, [r7, #24]
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	4313      	orrs	r3, r2
 8010312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010314:	4a26      	ldr	r2, [pc, #152]	; (80103b0 <HAL_GPIO_Init+0x330>)
 8010316:	69bb      	ldr	r3, [r7, #24]
 8010318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801031a:	4b25      	ldr	r3, [pc, #148]	; (80103b0 <HAL_GPIO_Init+0x330>)
 801031c:	689b      	ldr	r3, [r3, #8]
 801031e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	43db      	mvns	r3, r3
 8010324:	69ba      	ldr	r2, [r7, #24]
 8010326:	4013      	ands	r3, r2
 8010328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010332:	2b00      	cmp	r3, #0
 8010334:	d003      	beq.n	801033e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010336:	69ba      	ldr	r2, [r7, #24]
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	4313      	orrs	r3, r2
 801033c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801033e:	4a1c      	ldr	r2, [pc, #112]	; (80103b0 <HAL_GPIO_Init+0x330>)
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010344:	4b1a      	ldr	r3, [pc, #104]	; (80103b0 <HAL_GPIO_Init+0x330>)
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	43db      	mvns	r3, r3
 801034e:	69ba      	ldr	r2, [r7, #24]
 8010350:	4013      	ands	r3, r2
 8010352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801035c:	2b00      	cmp	r3, #0
 801035e:	d003      	beq.n	8010368 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8010360:	69ba      	ldr	r2, [r7, #24]
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	4313      	orrs	r3, r2
 8010366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010368:	4a11      	ldr	r2, [pc, #68]	; (80103b0 <HAL_GPIO_Init+0x330>)
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	3301      	adds	r3, #1
 8010372:	61fb      	str	r3, [r7, #28]
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	2b0f      	cmp	r3, #15
 8010378:	f67f ae90 	bls.w	801009c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801037c:	bf00      	nop
 801037e:	3724      	adds	r7, #36	; 0x24
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr
 8010388:	40023800 	.word	0x40023800
 801038c:	40013800 	.word	0x40013800
 8010390:	40020000 	.word	0x40020000
 8010394:	40020400 	.word	0x40020400
 8010398:	40020800 	.word	0x40020800
 801039c:	40020c00 	.word	0x40020c00
 80103a0:	40021000 	.word	0x40021000
 80103a4:	40021400 	.word	0x40021400
 80103a8:	40021800 	.word	0x40021800
 80103ac:	40021c00 	.word	0x40021c00
 80103b0:	40013c00 	.word	0x40013c00

080103b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	460b      	mov	r3, r1
 80103be:	807b      	strh	r3, [r7, #2]
 80103c0:	4613      	mov	r3, r2
 80103c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80103c4:	787b      	ldrb	r3, [r7, #1]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d003      	beq.n	80103d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80103ca:	887a      	ldrh	r2, [r7, #2]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80103d0:	e003      	b.n	80103da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80103d2:	887b      	ldrh	r3, [r7, #2]
 80103d4:	041a      	lsls	r2, r3, #16
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	619a      	str	r2, [r3, #24]
}
 80103da:	bf00      	nop
 80103dc:	370c      	adds	r7, #12
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr
	...

080103e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	4603      	mov	r3, r0
 80103f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80103f2:	4b08      	ldr	r3, [pc, #32]	; (8010414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80103f4:	695a      	ldr	r2, [r3, #20]
 80103f6:	88fb      	ldrh	r3, [r7, #6]
 80103f8:	4013      	ands	r3, r2
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d006      	beq.n	801040c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80103fe:	4a05      	ldr	r2, [pc, #20]	; (8010414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010400:	88fb      	ldrh	r3, [r7, #6]
 8010402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010404:	88fb      	ldrh	r3, [r7, #6]
 8010406:	4618      	mov	r0, r3
 8010408:	f7fe f988 	bl	800e71c <HAL_GPIO_EXTI_Callback>
  }
}
 801040c:	bf00      	nop
 801040e:	3708      	adds	r7, #8
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}
 8010414:	40013c00 	.word	0x40013c00

08010418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b086      	sub	sp, #24
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d101      	bne.n	801042a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010426:	2301      	movs	r3, #1
 8010428:	e25b      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f003 0301 	and.w	r3, r3, #1
 8010432:	2b00      	cmp	r3, #0
 8010434:	d075      	beq.n	8010522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010436:	4ba3      	ldr	r3, [pc, #652]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010438:	689b      	ldr	r3, [r3, #8]
 801043a:	f003 030c 	and.w	r3, r3, #12
 801043e:	2b04      	cmp	r3, #4
 8010440:	d00c      	beq.n	801045c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010442:	4ba0      	ldr	r3, [pc, #640]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010444:	689b      	ldr	r3, [r3, #8]
 8010446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801044a:	2b08      	cmp	r3, #8
 801044c:	d112      	bne.n	8010474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801044e:	4b9d      	ldr	r3, [pc, #628]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801045a:	d10b      	bne.n	8010474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801045c:	4b99      	ldr	r3, [pc, #612]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010464:	2b00      	cmp	r3, #0
 8010466:	d05b      	beq.n	8010520 <HAL_RCC_OscConfig+0x108>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d157      	bne.n	8010520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010470:	2301      	movs	r3, #1
 8010472:	e236      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801047c:	d106      	bne.n	801048c <HAL_RCC_OscConfig+0x74>
 801047e:	4b91      	ldr	r3, [pc, #580]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4a90      	ldr	r2, [pc, #576]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010488:	6013      	str	r3, [r2, #0]
 801048a:	e01d      	b.n	80104c8 <HAL_RCC_OscConfig+0xb0>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010494:	d10c      	bne.n	80104b0 <HAL_RCC_OscConfig+0x98>
 8010496:	4b8b      	ldr	r3, [pc, #556]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4a8a      	ldr	r2, [pc, #552]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 801049c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80104a0:	6013      	str	r3, [r2, #0]
 80104a2:	4b88      	ldr	r3, [pc, #544]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4a87      	ldr	r2, [pc, #540]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 80104a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80104ac:	6013      	str	r3, [r2, #0]
 80104ae:	e00b      	b.n	80104c8 <HAL_RCC_OscConfig+0xb0>
 80104b0:	4b84      	ldr	r3, [pc, #528]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4a83      	ldr	r2, [pc, #524]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 80104b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80104ba:	6013      	str	r3, [r2, #0]
 80104bc:	4b81      	ldr	r3, [pc, #516]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4a80      	ldr	r2, [pc, #512]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 80104c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80104c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d013      	beq.n	80104f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104d0:	f7fe fa90 	bl	800e9f4 <HAL_GetTick>
 80104d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80104d6:	e008      	b.n	80104ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80104d8:	f7fe fa8c 	bl	800e9f4 <HAL_GetTick>
 80104dc:	4602      	mov	r2, r0
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	2b64      	cmp	r3, #100	; 0x64
 80104e4:	d901      	bls.n	80104ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80104e6:	2303      	movs	r3, #3
 80104e8:	e1fb      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80104ea:	4b76      	ldr	r3, [pc, #472]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d0f0      	beq.n	80104d8 <HAL_RCC_OscConfig+0xc0>
 80104f6:	e014      	b.n	8010522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104f8:	f7fe fa7c 	bl	800e9f4 <HAL_GetTick>
 80104fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80104fe:	e008      	b.n	8010512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010500:	f7fe fa78 	bl	800e9f4 <HAL_GetTick>
 8010504:	4602      	mov	r2, r0
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	1ad3      	subs	r3, r2, r3
 801050a:	2b64      	cmp	r3, #100	; 0x64
 801050c:	d901      	bls.n	8010512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801050e:	2303      	movs	r3, #3
 8010510:	e1e7      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010512:	4b6c      	ldr	r3, [pc, #432]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801051a:	2b00      	cmp	r3, #0
 801051c:	d1f0      	bne.n	8010500 <HAL_RCC_OscConfig+0xe8>
 801051e:	e000      	b.n	8010522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f003 0302 	and.w	r3, r3, #2
 801052a:	2b00      	cmp	r3, #0
 801052c:	d063      	beq.n	80105f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801052e:	4b65      	ldr	r3, [pc, #404]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010530:	689b      	ldr	r3, [r3, #8]
 8010532:	f003 030c 	and.w	r3, r3, #12
 8010536:	2b00      	cmp	r3, #0
 8010538:	d00b      	beq.n	8010552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801053a:	4b62      	ldr	r3, [pc, #392]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 801053c:	689b      	ldr	r3, [r3, #8]
 801053e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010542:	2b08      	cmp	r3, #8
 8010544:	d11c      	bne.n	8010580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010546:	4b5f      	ldr	r3, [pc, #380]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801054e:	2b00      	cmp	r3, #0
 8010550:	d116      	bne.n	8010580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010552:	4b5c      	ldr	r3, [pc, #368]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f003 0302 	and.w	r3, r3, #2
 801055a:	2b00      	cmp	r3, #0
 801055c:	d005      	beq.n	801056a <HAL_RCC_OscConfig+0x152>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	68db      	ldr	r3, [r3, #12]
 8010562:	2b01      	cmp	r3, #1
 8010564:	d001      	beq.n	801056a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	e1bb      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801056a:	4b56      	ldr	r3, [pc, #344]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	691b      	ldr	r3, [r3, #16]
 8010576:	00db      	lsls	r3, r3, #3
 8010578:	4952      	ldr	r1, [pc, #328]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 801057a:	4313      	orrs	r3, r2
 801057c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801057e:	e03a      	b.n	80105f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d020      	beq.n	80105ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010588:	4b4f      	ldr	r3, [pc, #316]	; (80106c8 <HAL_RCC_OscConfig+0x2b0>)
 801058a:	2201      	movs	r2, #1
 801058c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801058e:	f7fe fa31 	bl	800e9f4 <HAL_GetTick>
 8010592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010594:	e008      	b.n	80105a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010596:	f7fe fa2d 	bl	800e9f4 <HAL_GetTick>
 801059a:	4602      	mov	r2, r0
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	1ad3      	subs	r3, r2, r3
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	d901      	bls.n	80105a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80105a4:	2303      	movs	r3, #3
 80105a6:	e19c      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80105a8:	4b46      	ldr	r3, [pc, #280]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f003 0302 	and.w	r3, r3, #2
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d0f0      	beq.n	8010596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80105b4:	4b43      	ldr	r3, [pc, #268]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	691b      	ldr	r3, [r3, #16]
 80105c0:	00db      	lsls	r3, r3, #3
 80105c2:	4940      	ldr	r1, [pc, #256]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 80105c4:	4313      	orrs	r3, r2
 80105c6:	600b      	str	r3, [r1, #0]
 80105c8:	e015      	b.n	80105f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80105ca:	4b3f      	ldr	r3, [pc, #252]	; (80106c8 <HAL_RCC_OscConfig+0x2b0>)
 80105cc:	2200      	movs	r2, #0
 80105ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80105d0:	f7fe fa10 	bl	800e9f4 <HAL_GetTick>
 80105d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80105d6:	e008      	b.n	80105ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80105d8:	f7fe fa0c 	bl	800e9f4 <HAL_GetTick>
 80105dc:	4602      	mov	r2, r0
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	2b02      	cmp	r3, #2
 80105e4:	d901      	bls.n	80105ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80105e6:	2303      	movs	r3, #3
 80105e8:	e17b      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80105ea:	4b36      	ldr	r3, [pc, #216]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f003 0302 	and.w	r3, r3, #2
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1f0      	bne.n	80105d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f003 0308 	and.w	r3, r3, #8
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d030      	beq.n	8010664 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	695b      	ldr	r3, [r3, #20]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d016      	beq.n	8010638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801060a:	4b30      	ldr	r3, [pc, #192]	; (80106cc <HAL_RCC_OscConfig+0x2b4>)
 801060c:	2201      	movs	r2, #1
 801060e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010610:	f7fe f9f0 	bl	800e9f4 <HAL_GetTick>
 8010614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010616:	e008      	b.n	801062a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010618:	f7fe f9ec 	bl	800e9f4 <HAL_GetTick>
 801061c:	4602      	mov	r2, r0
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	2b02      	cmp	r3, #2
 8010624:	d901      	bls.n	801062a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8010626:	2303      	movs	r3, #3
 8010628:	e15b      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801062a:	4b26      	ldr	r3, [pc, #152]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 801062c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801062e:	f003 0302 	and.w	r3, r3, #2
 8010632:	2b00      	cmp	r3, #0
 8010634:	d0f0      	beq.n	8010618 <HAL_RCC_OscConfig+0x200>
 8010636:	e015      	b.n	8010664 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010638:	4b24      	ldr	r3, [pc, #144]	; (80106cc <HAL_RCC_OscConfig+0x2b4>)
 801063a:	2200      	movs	r2, #0
 801063c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801063e:	f7fe f9d9 	bl	800e9f4 <HAL_GetTick>
 8010642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010644:	e008      	b.n	8010658 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010646:	f7fe f9d5 	bl	800e9f4 <HAL_GetTick>
 801064a:	4602      	mov	r2, r0
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	1ad3      	subs	r3, r2, r3
 8010650:	2b02      	cmp	r3, #2
 8010652:	d901      	bls.n	8010658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8010654:	2303      	movs	r3, #3
 8010656:	e144      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010658:	4b1a      	ldr	r3, [pc, #104]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 801065a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801065c:	f003 0302 	and.w	r3, r3, #2
 8010660:	2b00      	cmp	r3, #0
 8010662:	d1f0      	bne.n	8010646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f003 0304 	and.w	r3, r3, #4
 801066c:	2b00      	cmp	r3, #0
 801066e:	f000 80a0 	beq.w	80107b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010672:	2300      	movs	r3, #0
 8010674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010676:	4b13      	ldr	r3, [pc, #76]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801067e:	2b00      	cmp	r3, #0
 8010680:	d10f      	bne.n	80106a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010682:	2300      	movs	r3, #0
 8010684:	60bb      	str	r3, [r7, #8]
 8010686:	4b0f      	ldr	r3, [pc, #60]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801068a:	4a0e      	ldr	r2, [pc, #56]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 801068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010690:	6413      	str	r3, [r2, #64]	; 0x40
 8010692:	4b0c      	ldr	r3, [pc, #48]	; (80106c4 <HAL_RCC_OscConfig+0x2ac>)
 8010694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801069a:	60bb      	str	r3, [r7, #8]
 801069c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801069e:	2301      	movs	r3, #1
 80106a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80106a2:	4b0b      	ldr	r3, [pc, #44]	; (80106d0 <HAL_RCC_OscConfig+0x2b8>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d121      	bne.n	80106f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80106ae:	4b08      	ldr	r3, [pc, #32]	; (80106d0 <HAL_RCC_OscConfig+0x2b8>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	4a07      	ldr	r2, [pc, #28]	; (80106d0 <HAL_RCC_OscConfig+0x2b8>)
 80106b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80106b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80106ba:	f7fe f99b 	bl	800e9f4 <HAL_GetTick>
 80106be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80106c0:	e011      	b.n	80106e6 <HAL_RCC_OscConfig+0x2ce>
 80106c2:	bf00      	nop
 80106c4:	40023800 	.word	0x40023800
 80106c8:	42470000 	.word	0x42470000
 80106cc:	42470e80 	.word	0x42470e80
 80106d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80106d4:	f7fe f98e 	bl	800e9f4 <HAL_GetTick>
 80106d8:	4602      	mov	r2, r0
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	1ad3      	subs	r3, r2, r3
 80106de:	2b02      	cmp	r3, #2
 80106e0:	d901      	bls.n	80106e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80106e2:	2303      	movs	r3, #3
 80106e4:	e0fd      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80106e6:	4b81      	ldr	r3, [pc, #516]	; (80108ec <HAL_RCC_OscConfig+0x4d4>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d0f0      	beq.n	80106d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	689b      	ldr	r3, [r3, #8]
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d106      	bne.n	8010708 <HAL_RCC_OscConfig+0x2f0>
 80106fa:	4b7d      	ldr	r3, [pc, #500]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 80106fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106fe:	4a7c      	ldr	r2, [pc, #496]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 8010700:	f043 0301 	orr.w	r3, r3, #1
 8010704:	6713      	str	r3, [r2, #112]	; 0x70
 8010706:	e01c      	b.n	8010742 <HAL_RCC_OscConfig+0x32a>
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	689b      	ldr	r3, [r3, #8]
 801070c:	2b05      	cmp	r3, #5
 801070e:	d10c      	bne.n	801072a <HAL_RCC_OscConfig+0x312>
 8010710:	4b77      	ldr	r3, [pc, #476]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 8010712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010714:	4a76      	ldr	r2, [pc, #472]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 8010716:	f043 0304 	orr.w	r3, r3, #4
 801071a:	6713      	str	r3, [r2, #112]	; 0x70
 801071c:	4b74      	ldr	r3, [pc, #464]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 801071e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010720:	4a73      	ldr	r2, [pc, #460]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 8010722:	f043 0301 	orr.w	r3, r3, #1
 8010726:	6713      	str	r3, [r2, #112]	; 0x70
 8010728:	e00b      	b.n	8010742 <HAL_RCC_OscConfig+0x32a>
 801072a:	4b71      	ldr	r3, [pc, #452]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 801072c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801072e:	4a70      	ldr	r2, [pc, #448]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 8010730:	f023 0301 	bic.w	r3, r3, #1
 8010734:	6713      	str	r3, [r2, #112]	; 0x70
 8010736:	4b6e      	ldr	r3, [pc, #440]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 8010738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801073a:	4a6d      	ldr	r2, [pc, #436]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 801073c:	f023 0304 	bic.w	r3, r3, #4
 8010740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	689b      	ldr	r3, [r3, #8]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d015      	beq.n	8010776 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801074a:	f7fe f953 	bl	800e9f4 <HAL_GetTick>
 801074e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010750:	e00a      	b.n	8010768 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010752:	f7fe f94f 	bl	800e9f4 <HAL_GetTick>
 8010756:	4602      	mov	r2, r0
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	1ad3      	subs	r3, r2, r3
 801075c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010760:	4293      	cmp	r3, r2
 8010762:	d901      	bls.n	8010768 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8010764:	2303      	movs	r3, #3
 8010766:	e0bc      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010768:	4b61      	ldr	r3, [pc, #388]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 801076a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801076c:	f003 0302 	and.w	r3, r3, #2
 8010770:	2b00      	cmp	r3, #0
 8010772:	d0ee      	beq.n	8010752 <HAL_RCC_OscConfig+0x33a>
 8010774:	e014      	b.n	80107a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010776:	f7fe f93d 	bl	800e9f4 <HAL_GetTick>
 801077a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801077c:	e00a      	b.n	8010794 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801077e:	f7fe f939 	bl	800e9f4 <HAL_GetTick>
 8010782:	4602      	mov	r2, r0
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	f241 3288 	movw	r2, #5000	; 0x1388
 801078c:	4293      	cmp	r3, r2
 801078e:	d901      	bls.n	8010794 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8010790:	2303      	movs	r3, #3
 8010792:	e0a6      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010794:	4b56      	ldr	r3, [pc, #344]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 8010796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010798:	f003 0302 	and.w	r3, r3, #2
 801079c:	2b00      	cmp	r3, #0
 801079e:	d1ee      	bne.n	801077e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80107a0:	7dfb      	ldrb	r3, [r7, #23]
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d105      	bne.n	80107b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80107a6:	4b52      	ldr	r3, [pc, #328]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 80107a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107aa:	4a51      	ldr	r2, [pc, #324]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 80107ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80107b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	699b      	ldr	r3, [r3, #24]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	f000 8092 	beq.w	80108e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80107bc:	4b4c      	ldr	r3, [pc, #304]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 80107be:	689b      	ldr	r3, [r3, #8]
 80107c0:	f003 030c 	and.w	r3, r3, #12
 80107c4:	2b08      	cmp	r3, #8
 80107c6:	d05c      	beq.n	8010882 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	699b      	ldr	r3, [r3, #24]
 80107cc:	2b02      	cmp	r3, #2
 80107ce:	d141      	bne.n	8010854 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80107d0:	4b48      	ldr	r3, [pc, #288]	; (80108f4 <HAL_RCC_OscConfig+0x4dc>)
 80107d2:	2200      	movs	r2, #0
 80107d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80107d6:	f7fe f90d 	bl	800e9f4 <HAL_GetTick>
 80107da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80107dc:	e008      	b.n	80107f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80107de:	f7fe f909 	bl	800e9f4 <HAL_GetTick>
 80107e2:	4602      	mov	r2, r0
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	1ad3      	subs	r3, r2, r3
 80107e8:	2b02      	cmp	r3, #2
 80107ea:	d901      	bls.n	80107f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80107ec:	2303      	movs	r3, #3
 80107ee:	e078      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80107f0:	4b3f      	ldr	r3, [pc, #252]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d1f0      	bne.n	80107de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	69da      	ldr	r2, [r3, #28]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6a1b      	ldr	r3, [r3, #32]
 8010804:	431a      	orrs	r2, r3
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801080a:	019b      	lsls	r3, r3, #6
 801080c:	431a      	orrs	r2, r3
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010812:	085b      	lsrs	r3, r3, #1
 8010814:	3b01      	subs	r3, #1
 8010816:	041b      	lsls	r3, r3, #16
 8010818:	431a      	orrs	r2, r3
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801081e:	061b      	lsls	r3, r3, #24
 8010820:	4933      	ldr	r1, [pc, #204]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 8010822:	4313      	orrs	r3, r2
 8010824:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010826:	4b33      	ldr	r3, [pc, #204]	; (80108f4 <HAL_RCC_OscConfig+0x4dc>)
 8010828:	2201      	movs	r2, #1
 801082a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801082c:	f7fe f8e2 	bl	800e9f4 <HAL_GetTick>
 8010830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010832:	e008      	b.n	8010846 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010834:	f7fe f8de 	bl	800e9f4 <HAL_GetTick>
 8010838:	4602      	mov	r2, r0
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	1ad3      	subs	r3, r2, r3
 801083e:	2b02      	cmp	r3, #2
 8010840:	d901      	bls.n	8010846 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8010842:	2303      	movs	r3, #3
 8010844:	e04d      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010846:	4b2a      	ldr	r3, [pc, #168]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801084e:	2b00      	cmp	r3, #0
 8010850:	d0f0      	beq.n	8010834 <HAL_RCC_OscConfig+0x41c>
 8010852:	e045      	b.n	80108e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010854:	4b27      	ldr	r3, [pc, #156]	; (80108f4 <HAL_RCC_OscConfig+0x4dc>)
 8010856:	2200      	movs	r2, #0
 8010858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801085a:	f7fe f8cb 	bl	800e9f4 <HAL_GetTick>
 801085e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010860:	e008      	b.n	8010874 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010862:	f7fe f8c7 	bl	800e9f4 <HAL_GetTick>
 8010866:	4602      	mov	r2, r0
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	1ad3      	subs	r3, r2, r3
 801086c:	2b02      	cmp	r3, #2
 801086e:	d901      	bls.n	8010874 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8010870:	2303      	movs	r3, #3
 8010872:	e036      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010874:	4b1e      	ldr	r3, [pc, #120]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801087c:	2b00      	cmp	r3, #0
 801087e:	d1f0      	bne.n	8010862 <HAL_RCC_OscConfig+0x44a>
 8010880:	e02e      	b.n	80108e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	699b      	ldr	r3, [r3, #24]
 8010886:	2b01      	cmp	r3, #1
 8010888:	d101      	bne.n	801088e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801088a:	2301      	movs	r3, #1
 801088c:	e029      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801088e:	4b18      	ldr	r3, [pc, #96]	; (80108f0 <HAL_RCC_OscConfig+0x4d8>)
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	69db      	ldr	r3, [r3, #28]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d11c      	bne.n	80108dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d115      	bne.n	80108dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80108b0:	68fa      	ldr	r2, [r7, #12]
 80108b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80108b6:	4013      	ands	r3, r2
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80108bc:	4293      	cmp	r3, r2
 80108be:	d10d      	bne.n	80108dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d106      	bne.n	80108dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80108d8:	429a      	cmp	r2, r3
 80108da:	d001      	beq.n	80108e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80108dc:	2301      	movs	r3, #1
 80108de:	e000      	b.n	80108e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80108e0:	2300      	movs	r3, #0
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3718      	adds	r7, #24
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
 80108ea:	bf00      	nop
 80108ec:	40007000 	.word	0x40007000
 80108f0:	40023800 	.word	0x40023800
 80108f4:	42470060 	.word	0x42470060

080108f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d101      	bne.n	801090c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010908:	2301      	movs	r3, #1
 801090a:	e0cc      	b.n	8010aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801090c:	4b68      	ldr	r3, [pc, #416]	; (8010ab0 <HAL_RCC_ClockConfig+0x1b8>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	f003 030f 	and.w	r3, r3, #15
 8010914:	683a      	ldr	r2, [r7, #0]
 8010916:	429a      	cmp	r2, r3
 8010918:	d90c      	bls.n	8010934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801091a:	4b65      	ldr	r3, [pc, #404]	; (8010ab0 <HAL_RCC_ClockConfig+0x1b8>)
 801091c:	683a      	ldr	r2, [r7, #0]
 801091e:	b2d2      	uxtb	r2, r2
 8010920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010922:	4b63      	ldr	r3, [pc, #396]	; (8010ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f003 030f 	and.w	r3, r3, #15
 801092a:	683a      	ldr	r2, [r7, #0]
 801092c:	429a      	cmp	r2, r3
 801092e:	d001      	beq.n	8010934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010930:	2301      	movs	r3, #1
 8010932:	e0b8      	b.n	8010aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f003 0302 	and.w	r3, r3, #2
 801093c:	2b00      	cmp	r3, #0
 801093e:	d020      	beq.n	8010982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f003 0304 	and.w	r3, r3, #4
 8010948:	2b00      	cmp	r3, #0
 801094a:	d005      	beq.n	8010958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801094c:	4b59      	ldr	r3, [pc, #356]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 801094e:	689b      	ldr	r3, [r3, #8]
 8010950:	4a58      	ldr	r2, [pc, #352]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8010952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f003 0308 	and.w	r3, r3, #8
 8010960:	2b00      	cmp	r3, #0
 8010962:	d005      	beq.n	8010970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010964:	4b53      	ldr	r3, [pc, #332]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8010966:	689b      	ldr	r3, [r3, #8]
 8010968:	4a52      	ldr	r2, [pc, #328]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 801096a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801096e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010970:	4b50      	ldr	r3, [pc, #320]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	494d      	ldr	r1, [pc, #308]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 801097e:	4313      	orrs	r3, r2
 8010980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f003 0301 	and.w	r3, r3, #1
 801098a:	2b00      	cmp	r3, #0
 801098c:	d044      	beq.n	8010a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	2b01      	cmp	r3, #1
 8010994:	d107      	bne.n	80109a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010996:	4b47      	ldr	r3, [pc, #284]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d119      	bne.n	80109d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80109a2:	2301      	movs	r3, #1
 80109a4:	e07f      	b.n	8010aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	2b02      	cmp	r3, #2
 80109ac:	d003      	beq.n	80109b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80109b2:	2b03      	cmp	r3, #3
 80109b4:	d107      	bne.n	80109c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80109b6:	4b3f      	ldr	r3, [pc, #252]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d109      	bne.n	80109d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80109c2:	2301      	movs	r3, #1
 80109c4:	e06f      	b.n	8010aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80109c6:	4b3b      	ldr	r3, [pc, #236]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f003 0302 	and.w	r3, r3, #2
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d101      	bne.n	80109d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80109d2:	2301      	movs	r3, #1
 80109d4:	e067      	b.n	8010aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80109d6:	4b37      	ldr	r3, [pc, #220]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80109d8:	689b      	ldr	r3, [r3, #8]
 80109da:	f023 0203 	bic.w	r2, r3, #3
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	685b      	ldr	r3, [r3, #4]
 80109e2:	4934      	ldr	r1, [pc, #208]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80109e4:	4313      	orrs	r3, r2
 80109e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80109e8:	f7fe f804 	bl	800e9f4 <HAL_GetTick>
 80109ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80109ee:	e00a      	b.n	8010a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80109f0:	f7fe f800 	bl	800e9f4 <HAL_GetTick>
 80109f4:	4602      	mov	r2, r0
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	1ad3      	subs	r3, r2, r3
 80109fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d901      	bls.n	8010a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010a02:	2303      	movs	r3, #3
 8010a04:	e04f      	b.n	8010aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010a06:	4b2b      	ldr	r3, [pc, #172]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8010a08:	689b      	ldr	r3, [r3, #8]
 8010a0a:	f003 020c 	and.w	r2, r3, #12
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	685b      	ldr	r3, [r3, #4]
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d1eb      	bne.n	80109f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010a18:	4b25      	ldr	r3, [pc, #148]	; (8010ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f003 030f 	and.w	r3, r3, #15
 8010a20:	683a      	ldr	r2, [r7, #0]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d20c      	bcs.n	8010a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010a26:	4b22      	ldr	r3, [pc, #136]	; (8010ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8010a28:	683a      	ldr	r2, [r7, #0]
 8010a2a:	b2d2      	uxtb	r2, r2
 8010a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010a2e:	4b20      	ldr	r3, [pc, #128]	; (8010ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f003 030f 	and.w	r3, r3, #15
 8010a36:	683a      	ldr	r2, [r7, #0]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d001      	beq.n	8010a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	e032      	b.n	8010aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f003 0304 	and.w	r3, r3, #4
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d008      	beq.n	8010a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010a4c:	4b19      	ldr	r3, [pc, #100]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	68db      	ldr	r3, [r3, #12]
 8010a58:	4916      	ldr	r1, [pc, #88]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8010a5a:	4313      	orrs	r3, r2
 8010a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f003 0308 	and.w	r3, r3, #8
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d009      	beq.n	8010a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010a6a:	4b12      	ldr	r3, [pc, #72]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8010a6c:	689b      	ldr	r3, [r3, #8]
 8010a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	691b      	ldr	r3, [r3, #16]
 8010a76:	00db      	lsls	r3, r3, #3
 8010a78:	490e      	ldr	r1, [pc, #56]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010a7e:	f000 f821 	bl	8010ac4 <HAL_RCC_GetSysClockFreq>
 8010a82:	4601      	mov	r1, r0
 8010a84:	4b0b      	ldr	r3, [pc, #44]	; (8010ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8010a86:	689b      	ldr	r3, [r3, #8]
 8010a88:	091b      	lsrs	r3, r3, #4
 8010a8a:	f003 030f 	and.w	r3, r3, #15
 8010a8e:	4a0a      	ldr	r2, [pc, #40]	; (8010ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8010a90:	5cd3      	ldrb	r3, [r2, r3]
 8010a92:	fa21 f303 	lsr.w	r3, r1, r3
 8010a96:	4a09      	ldr	r2, [pc, #36]	; (8010abc <HAL_RCC_ClockConfig+0x1c4>)
 8010a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010a9a:	4b09      	ldr	r3, [pc, #36]	; (8010ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fd ff64 	bl	800e96c <HAL_InitTick>

  return HAL_OK;
 8010aa4:	2300      	movs	r3, #0
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	40023c00 	.word	0x40023c00
 8010ab4:	40023800 	.word	0x40023800
 8010ab8:	08019054 	.word	0x08019054
 8010abc:	20000028 	.word	0x20000028
 8010ac0:	20000034 	.word	0x20000034

08010ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010aca:	2300      	movs	r3, #0
 8010acc:	607b      	str	r3, [r7, #4]
 8010ace:	2300      	movs	r3, #0
 8010ad0:	60fb      	str	r3, [r7, #12]
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010ada:	4b63      	ldr	r3, [pc, #396]	; (8010c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010adc:	689b      	ldr	r3, [r3, #8]
 8010ade:	f003 030c 	and.w	r3, r3, #12
 8010ae2:	2b04      	cmp	r3, #4
 8010ae4:	d007      	beq.n	8010af6 <HAL_RCC_GetSysClockFreq+0x32>
 8010ae6:	2b08      	cmp	r3, #8
 8010ae8:	d008      	beq.n	8010afc <HAL_RCC_GetSysClockFreq+0x38>
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	f040 80b4 	bne.w	8010c58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010af0:	4b5e      	ldr	r3, [pc, #376]	; (8010c6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010af2:	60bb      	str	r3, [r7, #8]
       break;
 8010af4:	e0b3      	b.n	8010c5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010af6:	4b5e      	ldr	r3, [pc, #376]	; (8010c70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8010af8:	60bb      	str	r3, [r7, #8]
      break;
 8010afa:	e0b0      	b.n	8010c5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010afc:	4b5a      	ldr	r3, [pc, #360]	; (8010c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010b06:	4b58      	ldr	r3, [pc, #352]	; (8010c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d04a      	beq.n	8010ba8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010b12:	4b55      	ldr	r3, [pc, #340]	; (8010c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	099b      	lsrs	r3, r3, #6
 8010b18:	f04f 0400 	mov.w	r4, #0
 8010b1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010b20:	f04f 0200 	mov.w	r2, #0
 8010b24:	ea03 0501 	and.w	r5, r3, r1
 8010b28:	ea04 0602 	and.w	r6, r4, r2
 8010b2c:	4629      	mov	r1, r5
 8010b2e:	4632      	mov	r2, r6
 8010b30:	f04f 0300 	mov.w	r3, #0
 8010b34:	f04f 0400 	mov.w	r4, #0
 8010b38:	0154      	lsls	r4, r2, #5
 8010b3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010b3e:	014b      	lsls	r3, r1, #5
 8010b40:	4619      	mov	r1, r3
 8010b42:	4622      	mov	r2, r4
 8010b44:	1b49      	subs	r1, r1, r5
 8010b46:	eb62 0206 	sbc.w	r2, r2, r6
 8010b4a:	f04f 0300 	mov.w	r3, #0
 8010b4e:	f04f 0400 	mov.w	r4, #0
 8010b52:	0194      	lsls	r4, r2, #6
 8010b54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010b58:	018b      	lsls	r3, r1, #6
 8010b5a:	1a5b      	subs	r3, r3, r1
 8010b5c:	eb64 0402 	sbc.w	r4, r4, r2
 8010b60:	f04f 0100 	mov.w	r1, #0
 8010b64:	f04f 0200 	mov.w	r2, #0
 8010b68:	00e2      	lsls	r2, r4, #3
 8010b6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010b6e:	00d9      	lsls	r1, r3, #3
 8010b70:	460b      	mov	r3, r1
 8010b72:	4614      	mov	r4, r2
 8010b74:	195b      	adds	r3, r3, r5
 8010b76:	eb44 0406 	adc.w	r4, r4, r6
 8010b7a:	f04f 0100 	mov.w	r1, #0
 8010b7e:	f04f 0200 	mov.w	r2, #0
 8010b82:	0262      	lsls	r2, r4, #9
 8010b84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8010b88:	0259      	lsls	r1, r3, #9
 8010b8a:	460b      	mov	r3, r1
 8010b8c:	4614      	mov	r4, r2
 8010b8e:	4618      	mov	r0, r3
 8010b90:	4621      	mov	r1, r4
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f04f 0400 	mov.w	r4, #0
 8010b98:	461a      	mov	r2, r3
 8010b9a:	4623      	mov	r3, r4
 8010b9c:	f7f7 ffac 	bl	8008af8 <__aeabi_uldivmod>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	460c      	mov	r4, r1
 8010ba4:	60fb      	str	r3, [r7, #12]
 8010ba6:	e049      	b.n	8010c3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010ba8:	4b2f      	ldr	r3, [pc, #188]	; (8010c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	099b      	lsrs	r3, r3, #6
 8010bae:	f04f 0400 	mov.w	r4, #0
 8010bb2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010bb6:	f04f 0200 	mov.w	r2, #0
 8010bba:	ea03 0501 	and.w	r5, r3, r1
 8010bbe:	ea04 0602 	and.w	r6, r4, r2
 8010bc2:	4629      	mov	r1, r5
 8010bc4:	4632      	mov	r2, r6
 8010bc6:	f04f 0300 	mov.w	r3, #0
 8010bca:	f04f 0400 	mov.w	r4, #0
 8010bce:	0154      	lsls	r4, r2, #5
 8010bd0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8010bd4:	014b      	lsls	r3, r1, #5
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	4622      	mov	r2, r4
 8010bda:	1b49      	subs	r1, r1, r5
 8010bdc:	eb62 0206 	sbc.w	r2, r2, r6
 8010be0:	f04f 0300 	mov.w	r3, #0
 8010be4:	f04f 0400 	mov.w	r4, #0
 8010be8:	0194      	lsls	r4, r2, #6
 8010bea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8010bee:	018b      	lsls	r3, r1, #6
 8010bf0:	1a5b      	subs	r3, r3, r1
 8010bf2:	eb64 0402 	sbc.w	r4, r4, r2
 8010bf6:	f04f 0100 	mov.w	r1, #0
 8010bfa:	f04f 0200 	mov.w	r2, #0
 8010bfe:	00e2      	lsls	r2, r4, #3
 8010c00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8010c04:	00d9      	lsls	r1, r3, #3
 8010c06:	460b      	mov	r3, r1
 8010c08:	4614      	mov	r4, r2
 8010c0a:	195b      	adds	r3, r3, r5
 8010c0c:	eb44 0406 	adc.w	r4, r4, r6
 8010c10:	f04f 0100 	mov.w	r1, #0
 8010c14:	f04f 0200 	mov.w	r2, #0
 8010c18:	02a2      	lsls	r2, r4, #10
 8010c1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8010c1e:	0299      	lsls	r1, r3, #10
 8010c20:	460b      	mov	r3, r1
 8010c22:	4614      	mov	r4, r2
 8010c24:	4618      	mov	r0, r3
 8010c26:	4621      	mov	r1, r4
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f04f 0400 	mov.w	r4, #0
 8010c2e:	461a      	mov	r2, r3
 8010c30:	4623      	mov	r3, r4
 8010c32:	f7f7 ff61 	bl	8008af8 <__aeabi_uldivmod>
 8010c36:	4603      	mov	r3, r0
 8010c38:	460c      	mov	r4, r1
 8010c3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010c3c:	4b0a      	ldr	r3, [pc, #40]	; (8010c68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	0c1b      	lsrs	r3, r3, #16
 8010c42:	f003 0303 	and.w	r3, r3, #3
 8010c46:	3301      	adds	r3, #1
 8010c48:	005b      	lsls	r3, r3, #1
 8010c4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8010c4c:	68fa      	ldr	r2, [r7, #12]
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c54:	60bb      	str	r3, [r7, #8]
      break;
 8010c56:	e002      	b.n	8010c5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010c58:	4b04      	ldr	r3, [pc, #16]	; (8010c6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8010c5a:	60bb      	str	r3, [r7, #8]
      break;
 8010c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010c5e:	68bb      	ldr	r3, [r7, #8]
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3714      	adds	r7, #20
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c68:	40023800 	.word	0x40023800
 8010c6c:	00f42400 	.word	0x00f42400
 8010c70:	007a1200 	.word	0x007a1200

08010c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010c74:	b480      	push	{r7}
 8010c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010c78:	4b03      	ldr	r3, [pc, #12]	; (8010c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	20000028 	.word	0x20000028

08010c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010c90:	f7ff fff0 	bl	8010c74 <HAL_RCC_GetHCLKFreq>
 8010c94:	4601      	mov	r1, r0
 8010c96:	4b05      	ldr	r3, [pc, #20]	; (8010cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8010c98:	689b      	ldr	r3, [r3, #8]
 8010c9a:	0a9b      	lsrs	r3, r3, #10
 8010c9c:	f003 0307 	and.w	r3, r3, #7
 8010ca0:	4a03      	ldr	r2, [pc, #12]	; (8010cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010ca2:	5cd3      	ldrb	r3, [r2, r3]
 8010ca4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	40023800 	.word	0x40023800
 8010cb0:	08019064 	.word	0x08019064

08010cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010cb8:	f7ff ffdc 	bl	8010c74 <HAL_RCC_GetHCLKFreq>
 8010cbc:	4601      	mov	r1, r0
 8010cbe:	4b05      	ldr	r3, [pc, #20]	; (8010cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010cc0:	689b      	ldr	r3, [r3, #8]
 8010cc2:	0b5b      	lsrs	r3, r3, #13
 8010cc4:	f003 0307 	and.w	r3, r3, #7
 8010cc8:	4a03      	ldr	r2, [pc, #12]	; (8010cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010cca:	5cd3      	ldrb	r3, [r2, r3]
 8010ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	40023800 	.word	0x40023800
 8010cd8:	08019064 	.word	0x08019064

08010cdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d101      	bne.n	8010cee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010cea:	2301      	movs	r3, #1
 8010cec:	e056      	b.n	8010d9c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d106      	bne.n	8010d0e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2200      	movs	r2, #0
 8010d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f7fb ff29 	bl	800cb60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2202      	movs	r2, #2
 8010d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	681a      	ldr	r2, [r3, #0]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	685a      	ldr	r2, [r3, #4]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	689b      	ldr	r3, [r3, #8]
 8010d2e:	431a      	orrs	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	431a      	orrs	r2, r3
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	691b      	ldr	r3, [r3, #16]
 8010d3a:	431a      	orrs	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	695b      	ldr	r3, [r3, #20]
 8010d40:	431a      	orrs	r2, r3
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	699b      	ldr	r3, [r3, #24]
 8010d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010d4a:	431a      	orrs	r2, r3
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	69db      	ldr	r3, [r3, #28]
 8010d50:	431a      	orrs	r2, r3
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6a1b      	ldr	r3, [r3, #32]
 8010d56:	ea42 0103 	orr.w	r1, r2, r3
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	430a      	orrs	r2, r1
 8010d64:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	699b      	ldr	r3, [r3, #24]
 8010d6a:	0c1b      	lsrs	r3, r3, #16
 8010d6c:	f003 0104 	and.w	r1, r3, #4
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	430a      	orrs	r2, r1
 8010d7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	69da      	ldr	r2, [r3, #28]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010d8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2201      	movs	r2, #1
 8010d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010d9a:	2300      	movs	r3, #0
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b088      	sub	sp, #32
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	60b9      	str	r1, [r7, #8]
 8010dae:	603b      	str	r3, [r7, #0]
 8010db0:	4613      	mov	r3, r2
 8010db2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010db4:	2300      	movs	r3, #0
 8010db6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d101      	bne.n	8010dc6 <HAL_SPI_Transmit+0x22>
 8010dc2:	2302      	movs	r3, #2
 8010dc4:	e11e      	b.n	8011004 <HAL_SPI_Transmit+0x260>
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2201      	movs	r2, #1
 8010dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010dce:	f7fd fe11 	bl	800e9f4 <HAL_GetTick>
 8010dd2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010dd4:	88fb      	ldrh	r3, [r7, #6]
 8010dd6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	2b01      	cmp	r3, #1
 8010de2:	d002      	beq.n	8010dea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010de4:	2302      	movs	r3, #2
 8010de6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010de8:	e103      	b.n	8010ff2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d002      	beq.n	8010df6 <HAL_SPI_Transmit+0x52>
 8010df0:	88fb      	ldrh	r3, [r7, #6]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d102      	bne.n	8010dfc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010df6:	2301      	movs	r3, #1
 8010df8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010dfa:	e0fa      	b.n	8010ff2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2203      	movs	r2, #3
 8010e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	2200      	movs	r2, #0
 8010e08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	68ba      	ldr	r2, [r7, #8]
 8010e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	88fa      	ldrh	r2, [r7, #6]
 8010e14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	88fa      	ldrh	r2, [r7, #6]
 8010e1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	2200      	movs	r2, #0
 8010e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2200      	movs	r2, #0
 8010e32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	2200      	movs	r2, #0
 8010e38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	689b      	ldr	r3, [r3, #8]
 8010e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e42:	d107      	bne.n	8010e54 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	681a      	ldr	r2, [r3, #0]
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010e52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e5e:	2b40      	cmp	r3, #64	; 0x40
 8010e60:	d007      	beq.n	8010e72 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e7a:	d14b      	bne.n	8010f14 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <HAL_SPI_Transmit+0xe6>
 8010e84:	8afb      	ldrh	r3, [r7, #22]
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d13e      	bne.n	8010f08 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e8e:	881a      	ldrh	r2, [r3, #0]
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e9a:	1c9a      	adds	r2, r3, #2
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	3b01      	subs	r3, #1
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010eae:	e02b      	b.n	8010f08 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	689b      	ldr	r3, [r3, #8]
 8010eb6:	f003 0302 	and.w	r3, r3, #2
 8010eba:	2b02      	cmp	r3, #2
 8010ebc:	d112      	bne.n	8010ee4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ec2:	881a      	ldrh	r2, [r3, #0]
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ece:	1c9a      	adds	r2, r3, #2
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	3b01      	subs	r3, #1
 8010edc:	b29a      	uxth	r2, r3
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	86da      	strh	r2, [r3, #54]	; 0x36
 8010ee2:	e011      	b.n	8010f08 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010ee4:	f7fd fd86 	bl	800e9f4 <HAL_GetTick>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	69bb      	ldr	r3, [r7, #24]
 8010eec:	1ad3      	subs	r3, r2, r3
 8010eee:	683a      	ldr	r2, [r7, #0]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d803      	bhi.n	8010efc <HAL_SPI_Transmit+0x158>
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efa:	d102      	bne.n	8010f02 <HAL_SPI_Transmit+0x15e>
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d102      	bne.n	8010f08 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8010f02:	2303      	movs	r3, #3
 8010f04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010f06:	e074      	b.n	8010ff2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d1ce      	bne.n	8010eb0 <HAL_SPI_Transmit+0x10c>
 8010f12:	e04c      	b.n	8010fae <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d002      	beq.n	8010f22 <HAL_SPI_Transmit+0x17e>
 8010f1c:	8afb      	ldrh	r3, [r7, #22]
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d140      	bne.n	8010fa4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	330c      	adds	r3, #12
 8010f2c:	7812      	ldrb	r2, [r2, #0]
 8010f2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f34:	1c5a      	adds	r2, r3, #1
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	3b01      	subs	r3, #1
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8010f48:	e02c      	b.n	8010fa4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	689b      	ldr	r3, [r3, #8]
 8010f50:	f003 0302 	and.w	r3, r3, #2
 8010f54:	2b02      	cmp	r3, #2
 8010f56:	d113      	bne.n	8010f80 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	330c      	adds	r3, #12
 8010f62:	7812      	ldrb	r2, [r2, #0]
 8010f64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f6a:	1c5a      	adds	r2, r3, #1
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010f74:	b29b      	uxth	r3, r3
 8010f76:	3b01      	subs	r3, #1
 8010f78:	b29a      	uxth	r2, r3
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8010f7e:	e011      	b.n	8010fa4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f80:	f7fd fd38 	bl	800e9f4 <HAL_GetTick>
 8010f84:	4602      	mov	r2, r0
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	1ad3      	subs	r3, r2, r3
 8010f8a:	683a      	ldr	r2, [r7, #0]
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d803      	bhi.n	8010f98 <HAL_SPI_Transmit+0x1f4>
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f96:	d102      	bne.n	8010f9e <HAL_SPI_Transmit+0x1fa>
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d102      	bne.n	8010fa4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8010f9e:	2303      	movs	r3, #3
 8010fa0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010fa2:	e026      	b.n	8010ff2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1cd      	bne.n	8010f4a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010fae:	69ba      	ldr	r2, [r7, #24]
 8010fb0:	6839      	ldr	r1, [r7, #0]
 8010fb2:	68f8      	ldr	r0, [r7, #12]
 8010fb4:	f000 fba4 	bl	8011700 <SPI_EndRxTxTransaction>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d002      	beq.n	8010fc4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	2220      	movs	r2, #32
 8010fc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	689b      	ldr	r3, [r3, #8]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d10a      	bne.n	8010fe2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010fcc:	2300      	movs	r3, #0
 8010fce:	613b      	str	r3, [r7, #16]
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	68db      	ldr	r3, [r3, #12]
 8010fd6:	613b      	str	r3, [r7, #16]
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	689b      	ldr	r3, [r3, #8]
 8010fde:	613b      	str	r3, [r7, #16]
 8010fe0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d002      	beq.n	8010ff0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8010fea:	2301      	movs	r3, #1
 8010fec:	77fb      	strb	r3, [r7, #31]
 8010fee:	e000      	b.n	8010ff2 <HAL_SPI_Transmit+0x24e>
  }

error:
 8010ff0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011002:	7ffb      	ldrb	r3, [r7, #31]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3720      	adds	r7, #32
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b088      	sub	sp, #32
 8011010:	af02      	add	r7, sp, #8
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	603b      	str	r3, [r7, #0]
 8011018:	4613      	mov	r3, r2
 801101a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011028:	d112      	bne.n	8011050 <HAL_SPI_Receive+0x44>
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	689b      	ldr	r3, [r3, #8]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d10e      	bne.n	8011050 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2204      	movs	r2, #4
 8011036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801103a:	88fa      	ldrh	r2, [r7, #6]
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	9300      	str	r3, [sp, #0]
 8011040:	4613      	mov	r3, r2
 8011042:	68ba      	ldr	r2, [r7, #8]
 8011044:	68b9      	ldr	r1, [r7, #8]
 8011046:	68f8      	ldr	r0, [r7, #12]
 8011048:	f000 f8e9 	bl	801121e <HAL_SPI_TransmitReceive>
 801104c:	4603      	mov	r3, r0
 801104e:	e0e2      	b.n	8011216 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011056:	2b01      	cmp	r3, #1
 8011058:	d101      	bne.n	801105e <HAL_SPI_Receive+0x52>
 801105a:	2302      	movs	r3, #2
 801105c:	e0db      	b.n	8011216 <HAL_SPI_Receive+0x20a>
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2201      	movs	r2, #1
 8011062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011066:	f7fd fcc5 	bl	800e9f4 <HAL_GetTick>
 801106a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011072:	b2db      	uxtb	r3, r3
 8011074:	2b01      	cmp	r3, #1
 8011076:	d002      	beq.n	801107e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8011078:	2302      	movs	r3, #2
 801107a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801107c:	e0c2      	b.n	8011204 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d002      	beq.n	801108a <HAL_SPI_Receive+0x7e>
 8011084:	88fb      	ldrh	r3, [r7, #6]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d102      	bne.n	8011090 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801108a:	2301      	movs	r3, #1
 801108c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801108e:	e0b9      	b.n	8011204 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2204      	movs	r2, #4
 8011094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2200      	movs	r2, #0
 801109c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	68ba      	ldr	r2, [r7, #8]
 80110a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	88fa      	ldrh	r2, [r7, #6]
 80110a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	88fa      	ldrh	r2, [r7, #6]
 80110ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2200      	movs	r2, #0
 80110b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	2200      	movs	r2, #0
 80110ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2200      	movs	r2, #0
 80110c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	2200      	movs	r2, #0
 80110c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2200      	movs	r2, #0
 80110cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	689b      	ldr	r3, [r3, #8]
 80110d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80110d6:	d107      	bne.n	80110e8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	681a      	ldr	r2, [r3, #0]
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80110e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110f2:	2b40      	cmp	r3, #64	; 0x40
 80110f4:	d007      	beq.n	8011106 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	681a      	ldr	r2, [r3, #0]
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011104:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	68db      	ldr	r3, [r3, #12]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d162      	bne.n	80111d4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801110e:	e02e      	b.n	801116e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	689b      	ldr	r3, [r3, #8]
 8011116:	f003 0301 	and.w	r3, r3, #1
 801111a:	2b01      	cmp	r3, #1
 801111c:	d115      	bne.n	801114a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	f103 020c 	add.w	r2, r3, #12
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801112a:	7812      	ldrb	r2, [r2, #0]
 801112c:	b2d2      	uxtb	r2, r2
 801112e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011134:	1c5a      	adds	r2, r3, #1
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801113e:	b29b      	uxth	r3, r3
 8011140:	3b01      	subs	r3, #1
 8011142:	b29a      	uxth	r2, r3
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011148:	e011      	b.n	801116e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801114a:	f7fd fc53 	bl	800e9f4 <HAL_GetTick>
 801114e:	4602      	mov	r2, r0
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	1ad3      	subs	r3, r2, r3
 8011154:	683a      	ldr	r2, [r7, #0]
 8011156:	429a      	cmp	r2, r3
 8011158:	d803      	bhi.n	8011162 <HAL_SPI_Receive+0x156>
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011160:	d102      	bne.n	8011168 <HAL_SPI_Receive+0x15c>
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d102      	bne.n	801116e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8011168:	2303      	movs	r3, #3
 801116a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801116c:	e04a      	b.n	8011204 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011172:	b29b      	uxth	r3, r3
 8011174:	2b00      	cmp	r3, #0
 8011176:	d1cb      	bne.n	8011110 <HAL_SPI_Receive+0x104>
 8011178:	e031      	b.n	80111de <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	689b      	ldr	r3, [r3, #8]
 8011180:	f003 0301 	and.w	r3, r3, #1
 8011184:	2b01      	cmp	r3, #1
 8011186:	d113      	bne.n	80111b0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	68da      	ldr	r2, [r3, #12]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011192:	b292      	uxth	r2, r2
 8011194:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801119a:	1c9a      	adds	r2, r3, #2
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	3b01      	subs	r3, #1
 80111a8:	b29a      	uxth	r2, r3
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80111ae:	e011      	b.n	80111d4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80111b0:	f7fd fc20 	bl	800e9f4 <HAL_GetTick>
 80111b4:	4602      	mov	r2, r0
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	1ad3      	subs	r3, r2, r3
 80111ba:	683a      	ldr	r2, [r7, #0]
 80111bc:	429a      	cmp	r2, r3
 80111be:	d803      	bhi.n	80111c8 <HAL_SPI_Receive+0x1bc>
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111c6:	d102      	bne.n	80111ce <HAL_SPI_Receive+0x1c2>
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d102      	bne.n	80111d4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80111ce:	2303      	movs	r3, #3
 80111d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80111d2:	e017      	b.n	8011204 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80111d8:	b29b      	uxth	r3, r3
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d1cd      	bne.n	801117a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80111de:	693a      	ldr	r2, [r7, #16]
 80111e0:	6839      	ldr	r1, [r7, #0]
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	f000 fa27 	bl	8011636 <SPI_EndRxTransaction>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d002      	beq.n	80111f4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2220      	movs	r2, #32
 80111f2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d002      	beq.n	8011202 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80111fc:	2301      	movs	r3, #1
 80111fe:	75fb      	strb	r3, [r7, #23]
 8011200:	e000      	b.n	8011204 <HAL_SPI_Receive+0x1f8>
  }

error :
 8011202:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2201      	movs	r2, #1
 8011208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2200      	movs	r2, #0
 8011210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011214:	7dfb      	ldrb	r3, [r7, #23]
}
 8011216:	4618      	mov	r0, r3
 8011218:	3718      	adds	r7, #24
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}

0801121e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801121e:	b580      	push	{r7, lr}
 8011220:	b08c      	sub	sp, #48	; 0x30
 8011222:	af00      	add	r7, sp, #0
 8011224:	60f8      	str	r0, [r7, #12]
 8011226:	60b9      	str	r1, [r7, #8]
 8011228:	607a      	str	r2, [r7, #4]
 801122a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801122c:	2301      	movs	r3, #1
 801122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011230:	2300      	movs	r3, #0
 8011232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801123c:	2b01      	cmp	r3, #1
 801123e:	d101      	bne.n	8011244 <HAL_SPI_TransmitReceive+0x26>
 8011240:	2302      	movs	r3, #2
 8011242:	e18a      	b.n	801155a <HAL_SPI_TransmitReceive+0x33c>
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2201      	movs	r2, #1
 8011248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801124c:	f7fd fbd2 	bl	800e9f4 <HAL_GetTick>
 8011250:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8011262:	887b      	ldrh	r3, [r7, #2]
 8011264:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801126a:	2b01      	cmp	r3, #1
 801126c:	d00f      	beq.n	801128e <HAL_SPI_TransmitReceive+0x70>
 801126e:	69fb      	ldr	r3, [r7, #28]
 8011270:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011274:	d107      	bne.n	8011286 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	689b      	ldr	r3, [r3, #8]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d103      	bne.n	8011286 <HAL_SPI_TransmitReceive+0x68>
 801127e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011282:	2b04      	cmp	r3, #4
 8011284:	d003      	beq.n	801128e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8011286:	2302      	movs	r3, #2
 8011288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801128c:	e15b      	b.n	8011546 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d005      	beq.n	80112a0 <HAL_SPI_TransmitReceive+0x82>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d002      	beq.n	80112a0 <HAL_SPI_TransmitReceive+0x82>
 801129a:	887b      	ldrh	r3, [r7, #2]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d103      	bne.n	80112a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80112a0:	2301      	movs	r3, #1
 80112a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80112a6:	e14e      	b.n	8011546 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	2b04      	cmp	r3, #4
 80112b2:	d003      	beq.n	80112bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2205      	movs	r2, #5
 80112b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2200      	movs	r2, #0
 80112c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	887a      	ldrh	r2, [r7, #2]
 80112cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	887a      	ldrh	r2, [r7, #2]
 80112d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	68ba      	ldr	r2, [r7, #8]
 80112d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	887a      	ldrh	r2, [r7, #2]
 80112de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	887a      	ldrh	r2, [r7, #2]
 80112e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2200      	movs	r2, #0
 80112ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2200      	movs	r2, #0
 80112f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112fc:	2b40      	cmp	r3, #64	; 0x40
 80112fe:	d007      	beq.n	8011310 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	681a      	ldr	r2, [r3, #0]
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801130e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011318:	d178      	bne.n	801140c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d002      	beq.n	8011328 <HAL_SPI_TransmitReceive+0x10a>
 8011322:	8b7b      	ldrh	r3, [r7, #26]
 8011324:	2b01      	cmp	r3, #1
 8011326:	d166      	bne.n	80113f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801132c:	881a      	ldrh	r2, [r3, #0]
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011338:	1c9a      	adds	r2, r3, #2
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011342:	b29b      	uxth	r3, r3
 8011344:	3b01      	subs	r3, #1
 8011346:	b29a      	uxth	r2, r3
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801134c:	e053      	b.n	80113f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	689b      	ldr	r3, [r3, #8]
 8011354:	f003 0302 	and.w	r3, r3, #2
 8011358:	2b02      	cmp	r3, #2
 801135a:	d11b      	bne.n	8011394 <HAL_SPI_TransmitReceive+0x176>
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011360:	b29b      	uxth	r3, r3
 8011362:	2b00      	cmp	r3, #0
 8011364:	d016      	beq.n	8011394 <HAL_SPI_TransmitReceive+0x176>
 8011366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011368:	2b01      	cmp	r3, #1
 801136a:	d113      	bne.n	8011394 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011370:	881a      	ldrh	r2, [r3, #0]
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801137c:	1c9a      	adds	r2, r3, #2
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011386:	b29b      	uxth	r3, r3
 8011388:	3b01      	subs	r3, #1
 801138a:	b29a      	uxth	r2, r3
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011390:	2300      	movs	r3, #0
 8011392:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	689b      	ldr	r3, [r3, #8]
 801139a:	f003 0301 	and.w	r3, r3, #1
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d119      	bne.n	80113d6 <HAL_SPI_TransmitReceive+0x1b8>
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d014      	beq.n	80113d6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	68da      	ldr	r2, [r3, #12]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113b6:	b292      	uxth	r2, r2
 80113b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113be:	1c9a      	adds	r2, r3, #2
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	3b01      	subs	r3, #1
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80113d2:	2301      	movs	r3, #1
 80113d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80113d6:	f7fd fb0d 	bl	800e9f4 <HAL_GetTick>
 80113da:	4602      	mov	r2, r0
 80113dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113de:	1ad3      	subs	r3, r2, r3
 80113e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d807      	bhi.n	80113f6 <HAL_SPI_TransmitReceive+0x1d8>
 80113e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ec:	d003      	beq.n	80113f6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80113ee:	2303      	movs	r3, #3
 80113f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80113f4:	e0a7      	b.n	8011546 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d1a6      	bne.n	801134e <HAL_SPI_TransmitReceive+0x130>
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011404:	b29b      	uxth	r3, r3
 8011406:	2b00      	cmp	r3, #0
 8011408:	d1a1      	bne.n	801134e <HAL_SPI_TransmitReceive+0x130>
 801140a:	e07c      	b.n	8011506 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d002      	beq.n	801141a <HAL_SPI_TransmitReceive+0x1fc>
 8011414:	8b7b      	ldrh	r3, [r7, #26]
 8011416:	2b01      	cmp	r3, #1
 8011418:	d16b      	bne.n	80114f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	330c      	adds	r3, #12
 8011424:	7812      	ldrb	r2, [r2, #0]
 8011426:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801142c:	1c5a      	adds	r2, r3, #1
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011436:	b29b      	uxth	r3, r3
 8011438:	3b01      	subs	r3, #1
 801143a:	b29a      	uxth	r2, r3
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011440:	e057      	b.n	80114f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	689b      	ldr	r3, [r3, #8]
 8011448:	f003 0302 	and.w	r3, r3, #2
 801144c:	2b02      	cmp	r3, #2
 801144e:	d11c      	bne.n	801148a <HAL_SPI_TransmitReceive+0x26c>
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011454:	b29b      	uxth	r3, r3
 8011456:	2b00      	cmp	r3, #0
 8011458:	d017      	beq.n	801148a <HAL_SPI_TransmitReceive+0x26c>
 801145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145c:	2b01      	cmp	r3, #1
 801145e:	d114      	bne.n	801148a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	330c      	adds	r3, #12
 801146a:	7812      	ldrb	r2, [r2, #0]
 801146c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011472:	1c5a      	adds	r2, r3, #1
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801147c:	b29b      	uxth	r3, r3
 801147e:	3b01      	subs	r3, #1
 8011480:	b29a      	uxth	r2, r3
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011486:	2300      	movs	r3, #0
 8011488:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	689b      	ldr	r3, [r3, #8]
 8011490:	f003 0301 	and.w	r3, r3, #1
 8011494:	2b01      	cmp	r3, #1
 8011496:	d119      	bne.n	80114cc <HAL_SPI_TransmitReceive+0x2ae>
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801149c:	b29b      	uxth	r3, r3
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d014      	beq.n	80114cc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	68da      	ldr	r2, [r3, #12]
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ac:	b2d2      	uxtb	r2, r2
 80114ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114b4:	1c5a      	adds	r2, r3, #1
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80114be:	b29b      	uxth	r3, r3
 80114c0:	3b01      	subs	r3, #1
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80114c8:	2301      	movs	r3, #1
 80114ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80114cc:	f7fd fa92 	bl	800e9f4 <HAL_GetTick>
 80114d0:	4602      	mov	r2, r0
 80114d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d4:	1ad3      	subs	r3, r2, r3
 80114d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114d8:	429a      	cmp	r2, r3
 80114da:	d803      	bhi.n	80114e4 <HAL_SPI_TransmitReceive+0x2c6>
 80114dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114e2:	d102      	bne.n	80114ea <HAL_SPI_TransmitReceive+0x2cc>
 80114e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d103      	bne.n	80114f2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80114ea:	2303      	movs	r3, #3
 80114ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80114f0:	e029      	b.n	8011546 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d1a2      	bne.n	8011442 <HAL_SPI_TransmitReceive+0x224>
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011500:	b29b      	uxth	r3, r3
 8011502:	2b00      	cmp	r3, #0
 8011504:	d19d      	bne.n	8011442 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011508:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f000 f8f8 	bl	8011700 <SPI_EndRxTxTransaction>
 8011510:	4603      	mov	r3, r0
 8011512:	2b00      	cmp	r3, #0
 8011514:	d006      	beq.n	8011524 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8011516:	2301      	movs	r3, #1
 8011518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	2220      	movs	r2, #32
 8011520:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8011522:	e010      	b.n	8011546 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	689b      	ldr	r3, [r3, #8]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d10b      	bne.n	8011544 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801152c:	2300      	movs	r3, #0
 801152e:	617b      	str	r3, [r7, #20]
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	617b      	str	r3, [r7, #20]
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	689b      	ldr	r3, [r3, #8]
 801153e:	617b      	str	r3, [r7, #20]
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	e000      	b.n	8011546 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8011544:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2201      	movs	r2, #1
 801154a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2200      	movs	r2, #0
 8011552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011556:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801155a:	4618      	mov	r0, r3
 801155c:	3730      	adds	r7, #48	; 0x30
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}

08011562 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011562:	b580      	push	{r7, lr}
 8011564:	b084      	sub	sp, #16
 8011566:	af00      	add	r7, sp, #0
 8011568:	60f8      	str	r0, [r7, #12]
 801156a:	60b9      	str	r1, [r7, #8]
 801156c:	603b      	str	r3, [r7, #0]
 801156e:	4613      	mov	r3, r2
 8011570:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011572:	e04c      	b.n	801160e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	f1b3 3fff 	cmp.w	r3, #4294967295
 801157a:	d048      	beq.n	801160e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801157c:	f7fd fa3a 	bl	800e9f4 <HAL_GetTick>
 8011580:	4602      	mov	r2, r0
 8011582:	69bb      	ldr	r3, [r7, #24]
 8011584:	1ad3      	subs	r3, r2, r3
 8011586:	683a      	ldr	r2, [r7, #0]
 8011588:	429a      	cmp	r2, r3
 801158a:	d902      	bls.n	8011592 <SPI_WaitFlagStateUntilTimeout+0x30>
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d13d      	bne.n	801160e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	685a      	ldr	r2, [r3, #4]
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80115a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80115aa:	d111      	bne.n	80115d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	689b      	ldr	r3, [r3, #8]
 80115b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115b4:	d004      	beq.n	80115c0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	689b      	ldr	r3, [r3, #8]
 80115ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115be:	d107      	bne.n	80115d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80115ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80115d8:	d10f      	bne.n	80115fa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80115e8:	601a      	str	r2, [r3, #0]
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	681a      	ldr	r2, [r3, #0]
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80115f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	2201      	movs	r2, #1
 80115fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2200      	movs	r2, #0
 8011606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801160a:	2303      	movs	r3, #3
 801160c:	e00f      	b.n	801162e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	689a      	ldr	r2, [r3, #8]
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	4013      	ands	r3, r2
 8011618:	68ba      	ldr	r2, [r7, #8]
 801161a:	429a      	cmp	r2, r3
 801161c:	bf0c      	ite	eq
 801161e:	2301      	moveq	r3, #1
 8011620:	2300      	movne	r3, #0
 8011622:	b2db      	uxtb	r3, r3
 8011624:	461a      	mov	r2, r3
 8011626:	79fb      	ldrb	r3, [r7, #7]
 8011628:	429a      	cmp	r2, r3
 801162a:	d1a3      	bne.n	8011574 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 801162c:	2300      	movs	r3, #0
}
 801162e:	4618      	mov	r0, r3
 8011630:	3710      	adds	r7, #16
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}

08011636 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011636:	b580      	push	{r7, lr}
 8011638:	b086      	sub	sp, #24
 801163a:	af02      	add	r7, sp, #8
 801163c:	60f8      	str	r0, [r7, #12]
 801163e:	60b9      	str	r1, [r7, #8]
 8011640:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801164a:	d111      	bne.n	8011670 <SPI_EndRxTransaction+0x3a>
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	689b      	ldr	r3, [r3, #8]
 8011650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011654:	d004      	beq.n	8011660 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	689b      	ldr	r3, [r3, #8]
 801165a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801165e:	d107      	bne.n	8011670 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	681a      	ldr	r2, [r3, #0]
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801166e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011678:	d12a      	bne.n	80116d0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	689b      	ldr	r3, [r3, #8]
 801167e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011682:	d012      	beq.n	80116aa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	9300      	str	r3, [sp, #0]
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	2200      	movs	r2, #0
 801168c:	2180      	movs	r1, #128	; 0x80
 801168e:	68f8      	ldr	r0, [r7, #12]
 8011690:	f7ff ff67 	bl	8011562 <SPI_WaitFlagStateUntilTimeout>
 8011694:	4603      	mov	r3, r0
 8011696:	2b00      	cmp	r3, #0
 8011698:	d02d      	beq.n	80116f6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801169e:	f043 0220 	orr.w	r2, r3, #32
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80116a6:	2303      	movs	r3, #3
 80116a8:	e026      	b.n	80116f8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	2200      	movs	r2, #0
 80116b2:	2101      	movs	r1, #1
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f7ff ff54 	bl	8011562 <SPI_WaitFlagStateUntilTimeout>
 80116ba:	4603      	mov	r3, r0
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d01a      	beq.n	80116f6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116c4:	f043 0220 	orr.w	r2, r3, #32
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80116cc:	2303      	movs	r3, #3
 80116ce:	e013      	b.n	80116f8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	2200      	movs	r2, #0
 80116d8:	2101      	movs	r1, #1
 80116da:	68f8      	ldr	r0, [r7, #12]
 80116dc:	f7ff ff41 	bl	8011562 <SPI_WaitFlagStateUntilTimeout>
 80116e0:	4603      	mov	r3, r0
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d007      	beq.n	80116f6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116ea:	f043 0220 	orr.w	r2, r3, #32
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80116f2:	2303      	movs	r3, #3
 80116f4:	e000      	b.n	80116f8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80116f6:	2300      	movs	r3, #0
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3710      	adds	r7, #16
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}

08011700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b088      	sub	sp, #32
 8011704:	af02      	add	r7, sp, #8
 8011706:	60f8      	str	r0, [r7, #12]
 8011708:	60b9      	str	r1, [r7, #8]
 801170a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801170c:	4b1b      	ldr	r3, [pc, #108]	; (801177c <SPI_EndRxTxTransaction+0x7c>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	4a1b      	ldr	r2, [pc, #108]	; (8011780 <SPI_EndRxTxTransaction+0x80>)
 8011712:	fba2 2303 	umull	r2, r3, r2, r3
 8011716:	0d5b      	lsrs	r3, r3, #21
 8011718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801171c:	fb02 f303 	mul.w	r3, r2, r3
 8011720:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801172a:	d112      	bne.n	8011752 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	9300      	str	r3, [sp, #0]
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	2200      	movs	r2, #0
 8011734:	2180      	movs	r1, #128	; 0x80
 8011736:	68f8      	ldr	r0, [r7, #12]
 8011738:	f7ff ff13 	bl	8011562 <SPI_WaitFlagStateUntilTimeout>
 801173c:	4603      	mov	r3, r0
 801173e:	2b00      	cmp	r3, #0
 8011740:	d016      	beq.n	8011770 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011746:	f043 0220 	orr.w	r2, r3, #32
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801174e:	2303      	movs	r3, #3
 8011750:	e00f      	b.n	8011772 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d00a      	beq.n	801176e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	3b01      	subs	r3, #1
 801175c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	689b      	ldr	r3, [r3, #8]
 8011764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011768:	2b80      	cmp	r3, #128	; 0x80
 801176a:	d0f2      	beq.n	8011752 <SPI_EndRxTxTransaction+0x52>
 801176c:	e000      	b.n	8011770 <SPI_EndRxTxTransaction+0x70>
        break;
 801176e:	bf00      	nop
  }

  return HAL_OK;
 8011770:	2300      	movs	r3, #0
}
 8011772:	4618      	mov	r0, r3
 8011774:	3718      	adds	r7, #24
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
 801177a:	bf00      	nop
 801177c:	20000028 	.word	0x20000028
 8011780:	165e9f81 	.word	0x165e9f81

08011784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d101      	bne.n	8011796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011792:	2301      	movs	r3, #1
 8011794:	e01d      	b.n	80117d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801179c:	b2db      	uxtb	r3, r3
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d106      	bne.n	80117b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2200      	movs	r2, #0
 80117a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f7fb fa20 	bl	800cbf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2202      	movs	r2, #2
 80117b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	3304      	adds	r3, #4
 80117c0:	4619      	mov	r1, r3
 80117c2:	4610      	mov	r0, r2
 80117c4:	f000 fe96 	bl	80124f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2201      	movs	r2, #1
 80117cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80117d0:	2300      	movs	r3, #0
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3708      	adds	r7, #8
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}

080117da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80117da:	b480      	push	{r7}
 80117dc:	b085      	sub	sp, #20
 80117de:	af00      	add	r7, sp, #0
 80117e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	68da      	ldr	r2, [r3, #12]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f042 0201 	orr.w	r2, r2, #1
 80117f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	689b      	ldr	r3, [r3, #8]
 80117f8:	f003 0307 	and.w	r3, r3, #7
 80117fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2b06      	cmp	r3, #6
 8011802:	d007      	beq.n	8011814 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	f042 0201 	orr.w	r2, r2, #1
 8011812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011814:	2300      	movs	r3, #0
}
 8011816:	4618      	mov	r0, r3
 8011818:	3714      	adds	r7, #20
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr

08011822 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8011822:	b480      	push	{r7}
 8011824:	b083      	sub	sp, #12
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	68da      	ldr	r2, [r3, #12]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	f022 0201 	bic.w	r2, r2, #1
 8011838:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	6a1a      	ldr	r2, [r3, #32]
 8011840:	f241 1311 	movw	r3, #4369	; 0x1111
 8011844:	4013      	ands	r3, r2
 8011846:	2b00      	cmp	r3, #0
 8011848:	d10f      	bne.n	801186a <HAL_TIM_Base_Stop_IT+0x48>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	6a1a      	ldr	r2, [r3, #32]
 8011850:	f240 4344 	movw	r3, #1092	; 0x444
 8011854:	4013      	ands	r3, r2
 8011856:	2b00      	cmp	r3, #0
 8011858:	d107      	bne.n	801186a <HAL_TIM_Base_Stop_IT+0x48>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	f022 0201 	bic.w	r2, r2, #1
 8011868:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801186a:	2300      	movs	r3, #0
}
 801186c:	4618      	mov	r0, r3
 801186e:	370c      	adds	r7, #12
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr

08011878 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d101      	bne.n	801188a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8011886:	2301      	movs	r3, #1
 8011888:	e01d      	b.n	80118c6 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011890:	b2db      	uxtb	r3, r3
 8011892:	2b00      	cmp	r3, #0
 8011894:	d106      	bne.n	80118a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2200      	movs	r2, #0
 801189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f000 f815 	bl	80118ce <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2202      	movs	r2, #2
 80118a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	3304      	adds	r3, #4
 80118b4:	4619      	mov	r1, r3
 80118b6:	4610      	mov	r0, r2
 80118b8:	f000 fe1c 	bl	80124f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2201      	movs	r2, #1
 80118c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80118c4:	2300      	movs	r3, #0
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3708      	adds	r7, #8
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}

080118ce <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80118ce:	b480      	push	{r7}
 80118d0:	b083      	sub	sp, #12
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80118d6:	bf00      	nop
 80118d8:	370c      	adds	r7, #12
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr
	...

080118e4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b084      	sub	sp, #16
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	2b0c      	cmp	r3, #12
 80118f2:	d841      	bhi.n	8011978 <HAL_TIM_OC_Start_IT+0x94>
 80118f4:	a201      	add	r2, pc, #4	; (adr r2, 80118fc <HAL_TIM_OC_Start_IT+0x18>)
 80118f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118fa:	bf00      	nop
 80118fc:	08011931 	.word	0x08011931
 8011900:	08011979 	.word	0x08011979
 8011904:	08011979 	.word	0x08011979
 8011908:	08011979 	.word	0x08011979
 801190c:	08011943 	.word	0x08011943
 8011910:	08011979 	.word	0x08011979
 8011914:	08011979 	.word	0x08011979
 8011918:	08011979 	.word	0x08011979
 801191c:	08011955 	.word	0x08011955
 8011920:	08011979 	.word	0x08011979
 8011924:	08011979 	.word	0x08011979
 8011928:	08011979 	.word	0x08011979
 801192c:	08011967 	.word	0x08011967
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	68da      	ldr	r2, [r3, #12]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f042 0202 	orr.w	r2, r2, #2
 801193e:	60da      	str	r2, [r3, #12]
      break;
 8011940:	e01b      	b.n	801197a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	68da      	ldr	r2, [r3, #12]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	f042 0204 	orr.w	r2, r2, #4
 8011950:	60da      	str	r2, [r3, #12]
      break;
 8011952:	e012      	b.n	801197a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	68da      	ldr	r2, [r3, #12]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f042 0208 	orr.w	r2, r2, #8
 8011962:	60da      	str	r2, [r3, #12]
      break;
 8011964:	e009      	b.n	801197a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	68da      	ldr	r2, [r3, #12]
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f042 0210 	orr.w	r2, r2, #16
 8011974:	60da      	str	r2, [r3, #12]
      break;
 8011976:	e000      	b.n	801197a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8011978:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	2201      	movs	r2, #1
 8011980:	6839      	ldr	r1, [r7, #0]
 8011982:	4618      	mov	r0, r3
 8011984:	f001 f8a0 	bl	8012ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	4a15      	ldr	r2, [pc, #84]	; (80119e4 <HAL_TIM_OC_Start_IT+0x100>)
 801198e:	4293      	cmp	r3, r2
 8011990:	d004      	beq.n	801199c <HAL_TIM_OC_Start_IT+0xb8>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	4a14      	ldr	r2, [pc, #80]	; (80119e8 <HAL_TIM_OC_Start_IT+0x104>)
 8011998:	4293      	cmp	r3, r2
 801199a:	d101      	bne.n	80119a0 <HAL_TIM_OC_Start_IT+0xbc>
 801199c:	2301      	movs	r3, #1
 801199e:	e000      	b.n	80119a2 <HAL_TIM_OC_Start_IT+0xbe>
 80119a0:	2300      	movs	r3, #0
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d007      	beq.n	80119b6 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80119b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	689b      	ldr	r3, [r3, #8]
 80119bc:	f003 0307 	and.w	r3, r3, #7
 80119c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2b06      	cmp	r3, #6
 80119c6:	d007      	beq.n	80119d8 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f042 0201 	orr.w	r2, r2, #1
 80119d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80119d8:	2300      	movs	r3, #0
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3710      	adds	r7, #16
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}
 80119e2:	bf00      	nop
 80119e4:	40010000 	.word	0x40010000
 80119e8:	40010400 	.word	0x40010400

080119ec <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	2b0c      	cmp	r3, #12
 80119fa:	d841      	bhi.n	8011a80 <HAL_TIM_OC_Stop_IT+0x94>
 80119fc:	a201      	add	r2, pc, #4	; (adr r2, 8011a04 <HAL_TIM_OC_Stop_IT+0x18>)
 80119fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a02:	bf00      	nop
 8011a04:	08011a39 	.word	0x08011a39
 8011a08:	08011a81 	.word	0x08011a81
 8011a0c:	08011a81 	.word	0x08011a81
 8011a10:	08011a81 	.word	0x08011a81
 8011a14:	08011a4b 	.word	0x08011a4b
 8011a18:	08011a81 	.word	0x08011a81
 8011a1c:	08011a81 	.word	0x08011a81
 8011a20:	08011a81 	.word	0x08011a81
 8011a24:	08011a5d 	.word	0x08011a5d
 8011a28:	08011a81 	.word	0x08011a81
 8011a2c:	08011a81 	.word	0x08011a81
 8011a30:	08011a81 	.word	0x08011a81
 8011a34:	08011a6f 	.word	0x08011a6f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	68da      	ldr	r2, [r3, #12]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	f022 0202 	bic.w	r2, r2, #2
 8011a46:	60da      	str	r2, [r3, #12]
      break;
 8011a48:	e01b      	b.n	8011a82 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	68da      	ldr	r2, [r3, #12]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f022 0204 	bic.w	r2, r2, #4
 8011a58:	60da      	str	r2, [r3, #12]
      break;
 8011a5a:	e012      	b.n	8011a82 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	68da      	ldr	r2, [r3, #12]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	f022 0208 	bic.w	r2, r2, #8
 8011a6a:	60da      	str	r2, [r3, #12]
      break;
 8011a6c:	e009      	b.n	8011a82 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	68da      	ldr	r2, [r3, #12]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f022 0210 	bic.w	r2, r2, #16
 8011a7c:	60da      	str	r2, [r3, #12]
      break;
 8011a7e:	e000      	b.n	8011a82 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8011a80:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	2200      	movs	r2, #0
 8011a88:	6839      	ldr	r1, [r7, #0]
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f001 f81c 	bl	8012ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	4a20      	ldr	r2, [pc, #128]	; (8011b18 <HAL_TIM_OC_Stop_IT+0x12c>)
 8011a96:	4293      	cmp	r3, r2
 8011a98:	d004      	beq.n	8011aa4 <HAL_TIM_OC_Stop_IT+0xb8>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	4a1f      	ldr	r2, [pc, #124]	; (8011b1c <HAL_TIM_OC_Stop_IT+0x130>)
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	d101      	bne.n	8011aa8 <HAL_TIM_OC_Stop_IT+0xbc>
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e000      	b.n	8011aaa <HAL_TIM_OC_Stop_IT+0xbe>
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d017      	beq.n	8011ade <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	6a1a      	ldr	r2, [r3, #32]
 8011ab4:	f241 1311 	movw	r3, #4369	; 0x1111
 8011ab8:	4013      	ands	r3, r2
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d10f      	bne.n	8011ade <HAL_TIM_OC_Stop_IT+0xf2>
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	6a1a      	ldr	r2, [r3, #32]
 8011ac4:	f240 4344 	movw	r3, #1092	; 0x444
 8011ac8:	4013      	ands	r3, r2
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d107      	bne.n	8011ade <HAL_TIM_OC_Stop_IT+0xf2>
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011adc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	6a1a      	ldr	r2, [r3, #32]
 8011ae4:	f241 1311 	movw	r3, #4369	; 0x1111
 8011ae8:	4013      	ands	r3, r2
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d10f      	bne.n	8011b0e <HAL_TIM_OC_Stop_IT+0x122>
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	6a1a      	ldr	r2, [r3, #32]
 8011af4:	f240 4344 	movw	r3, #1092	; 0x444
 8011af8:	4013      	ands	r3, r2
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d107      	bne.n	8011b0e <HAL_TIM_OC_Stop_IT+0x122>
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	681a      	ldr	r2, [r3, #0]
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	f022 0201 	bic.w	r2, r2, #1
 8011b0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011b0e:	2300      	movs	r3, #0
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3708      	adds	r7, #8
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	40010000 	.word	0x40010000
 8011b1c:	40010400 	.word	0x40010400

08011b20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d101      	bne.n	8011b32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011b2e:	2301      	movs	r3, #1
 8011b30:	e01d      	b.n	8011b6e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d106      	bne.n	8011b4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2200      	movs	r2, #0
 8011b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	f000 f815 	bl	8011b76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2202      	movs	r2, #2
 8011b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681a      	ldr	r2, [r3, #0]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	3304      	adds	r3, #4
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	4610      	mov	r0, r2
 8011b60:	f000 fcc8 	bl	80124f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2201      	movs	r2, #1
 8011b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3708      	adds	r7, #8
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011b76:	b480      	push	{r7}
 8011b78:	b083      	sub	sp, #12
 8011b7a:	af00      	add	r7, sp, #0
 8011b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011b7e:	bf00      	nop
 8011b80:	370c      	adds	r7, #12
 8011b82:	46bd      	mov	sp, r7
 8011b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b88:	4770      	bx	lr
	...

08011b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b084      	sub	sp, #16
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	6839      	ldr	r1, [r7, #0]
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f000 ff92 	bl	8012ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	4a15      	ldr	r2, [pc, #84]	; (8011c00 <HAL_TIM_PWM_Start+0x74>)
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d004      	beq.n	8011bb8 <HAL_TIM_PWM_Start+0x2c>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	4a14      	ldr	r2, [pc, #80]	; (8011c04 <HAL_TIM_PWM_Start+0x78>)
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d101      	bne.n	8011bbc <HAL_TIM_PWM_Start+0x30>
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e000      	b.n	8011bbe <HAL_TIM_PWM_Start+0x32>
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d007      	beq.n	8011bd2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	689b      	ldr	r3, [r3, #8]
 8011bd8:	f003 0307 	and.w	r3, r3, #7
 8011bdc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2b06      	cmp	r3, #6
 8011be2:	d007      	beq.n	8011bf4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f042 0201 	orr.w	r2, r2, #1
 8011bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011bf4:	2300      	movs	r3, #0
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	40010000 	.word	0x40010000
 8011c04:	40010400 	.word	0x40010400

08011c08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	2200      	movs	r2, #0
 8011c18:	6839      	ldr	r1, [r7, #0]
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f000 ff54 	bl	8012ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	4a22      	ldr	r2, [pc, #136]	; (8011cb0 <HAL_TIM_PWM_Stop+0xa8>)
 8011c26:	4293      	cmp	r3, r2
 8011c28:	d004      	beq.n	8011c34 <HAL_TIM_PWM_Stop+0x2c>
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	4a21      	ldr	r2, [pc, #132]	; (8011cb4 <HAL_TIM_PWM_Stop+0xac>)
 8011c30:	4293      	cmp	r3, r2
 8011c32:	d101      	bne.n	8011c38 <HAL_TIM_PWM_Stop+0x30>
 8011c34:	2301      	movs	r3, #1
 8011c36:	e000      	b.n	8011c3a <HAL_TIM_PWM_Stop+0x32>
 8011c38:	2300      	movs	r3, #0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d017      	beq.n	8011c6e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	6a1a      	ldr	r2, [r3, #32]
 8011c44:	f241 1311 	movw	r3, #4369	; 0x1111
 8011c48:	4013      	ands	r3, r2
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d10f      	bne.n	8011c6e <HAL_TIM_PWM_Stop+0x66>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	6a1a      	ldr	r2, [r3, #32]
 8011c54:	f240 4344 	movw	r3, #1092	; 0x444
 8011c58:	4013      	ands	r3, r2
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d107      	bne.n	8011c6e <HAL_TIM_PWM_Stop+0x66>
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011c6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	6a1a      	ldr	r2, [r3, #32]
 8011c74:	f241 1311 	movw	r3, #4369	; 0x1111
 8011c78:	4013      	ands	r3, r2
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d10f      	bne.n	8011c9e <HAL_TIM_PWM_Stop+0x96>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	6a1a      	ldr	r2, [r3, #32]
 8011c84:	f240 4344 	movw	r3, #1092	; 0x444
 8011c88:	4013      	ands	r3, r2
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d107      	bne.n	8011c9e <HAL_TIM_PWM_Stop+0x96>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	681a      	ldr	r2, [r3, #0]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	f022 0201 	bic.w	r2, r2, #1
 8011c9c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2201      	movs	r2, #1
 8011ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8011ca6:	2300      	movs	r3, #0
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3708      	adds	r7, #8
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	40010000 	.word	0x40010000
 8011cb4:	40010400 	.word	0x40010400

08011cb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b086      	sub	sp, #24
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d101      	bne.n	8011ccc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8011cc8:	2301      	movs	r3, #1
 8011cca:	e083      	b.n	8011dd4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d106      	bne.n	8011ce6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f7fa fff5 	bl	800ccd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2202      	movs	r2, #2
 8011cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	689b      	ldr	r3, [r3, #8]
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	6812      	ldr	r2, [r2, #0]
 8011cf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011cfc:	f023 0307 	bic.w	r3, r3, #7
 8011d00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681a      	ldr	r2, [r3, #0]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	3304      	adds	r3, #4
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	4610      	mov	r0, r2
 8011d0e:	f000 fbf1 	bl	80124f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	689b      	ldr	r3, [r3, #8]
 8011d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	699b      	ldr	r3, [r3, #24]
 8011d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	6a1b      	ldr	r3, [r3, #32]
 8011d28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	697a      	ldr	r2, [r7, #20]
 8011d30:	4313      	orrs	r3, r2
 8011d32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011d3a:	f023 0303 	bic.w	r3, r3, #3
 8011d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	689a      	ldr	r2, [r3, #8]
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	699b      	ldr	r3, [r3, #24]
 8011d48:	021b      	lsls	r3, r3, #8
 8011d4a:	4313      	orrs	r3, r2
 8011d4c:	693a      	ldr	r2, [r7, #16]
 8011d4e:	4313      	orrs	r3, r2
 8011d50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8011d58:	f023 030c 	bic.w	r3, r3, #12
 8011d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011d64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	68da      	ldr	r2, [r3, #12]
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	69db      	ldr	r3, [r3, #28]
 8011d72:	021b      	lsls	r3, r3, #8
 8011d74:	4313      	orrs	r3, r2
 8011d76:	693a      	ldr	r2, [r7, #16]
 8011d78:	4313      	orrs	r3, r2
 8011d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011d7c:	683b      	ldr	r3, [r7, #0]
 8011d7e:	691b      	ldr	r3, [r3, #16]
 8011d80:	011a      	lsls	r2, r3, #4
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	6a1b      	ldr	r3, [r3, #32]
 8011d86:	031b      	lsls	r3, r3, #12
 8011d88:	4313      	orrs	r3, r2
 8011d8a:	693a      	ldr	r2, [r7, #16]
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8011d96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8011d9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	685a      	ldr	r2, [r3, #4]
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	695b      	ldr	r3, [r3, #20]
 8011da8:	011b      	lsls	r3, r3, #4
 8011daa:	4313      	orrs	r3, r2
 8011dac:	68fa      	ldr	r2, [r7, #12]
 8011dae:	4313      	orrs	r3, r2
 8011db0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	697a      	ldr	r2, [r7, #20]
 8011db8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	693a      	ldr	r2, [r7, #16]
 8011dc0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	68fa      	ldr	r2, [r7, #12]
 8011dc8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2201      	movs	r2, #1
 8011dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011dd2:	2300      	movs	r3, #0
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3718      	adds	r7, #24
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d002      	beq.n	8011df2 <HAL_TIM_Encoder_Start+0x16>
 8011dec:	2b04      	cmp	r3, #4
 8011dee:	d008      	beq.n	8011e02 <HAL_TIM_Encoder_Start+0x26>
 8011df0:	e00f      	b.n	8011e12 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	2201      	movs	r2, #1
 8011df8:	2100      	movs	r1, #0
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f000 fe64 	bl	8012ac8 <TIM_CCxChannelCmd>
      break;
 8011e00:	e016      	b.n	8011e30 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	2201      	movs	r2, #1
 8011e08:	2104      	movs	r1, #4
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f000 fe5c 	bl	8012ac8 <TIM_CCxChannelCmd>
      break;
 8011e10:	e00e      	b.n	8011e30 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	2201      	movs	r2, #1
 8011e18:	2100      	movs	r1, #0
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f000 fe54 	bl	8012ac8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2201      	movs	r2, #1
 8011e26:	2104      	movs	r1, #4
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f000 fe4d 	bl	8012ac8 <TIM_CCxChannelCmd>
      break;
 8011e2e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f042 0201 	orr.w	r2, r2, #1
 8011e3e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011e40:	2300      	movs	r3, #0
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}

08011e4a <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011e4a:	b580      	push	{r7, lr}
 8011e4c:	b082      	sub	sp, #8
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	6078      	str	r0, [r7, #4]
 8011e52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d002      	beq.n	8011e60 <HAL_TIM_Encoder_Stop+0x16>
 8011e5a:	2b04      	cmp	r3, #4
 8011e5c:	d008      	beq.n	8011e70 <HAL_TIM_Encoder_Stop+0x26>
 8011e5e:	e00f      	b.n	8011e80 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	2200      	movs	r2, #0
 8011e66:	2100      	movs	r1, #0
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f000 fe2d 	bl	8012ac8 <TIM_CCxChannelCmd>
      break;
 8011e6e:	e016      	b.n	8011e9e <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	2200      	movs	r2, #0
 8011e76:	2104      	movs	r1, #4
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f000 fe25 	bl	8012ac8 <TIM_CCxChannelCmd>
      break;
 8011e7e:	e00e      	b.n	8011e9e <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	2200      	movs	r2, #0
 8011e86:	2100      	movs	r1, #0
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f000 fe1d 	bl	8012ac8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	2200      	movs	r2, #0
 8011e94:	2104      	movs	r1, #4
 8011e96:	4618      	mov	r0, r3
 8011e98:	f000 fe16 	bl	8012ac8 <TIM_CCxChannelCmd>
      break;
 8011e9c:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	6a1a      	ldr	r2, [r3, #32]
 8011ea4:	f241 1311 	movw	r3, #4369	; 0x1111
 8011ea8:	4013      	ands	r3, r2
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d10f      	bne.n	8011ece <HAL_TIM_Encoder_Stop+0x84>
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	6a1a      	ldr	r2, [r3, #32]
 8011eb4:	f240 4344 	movw	r3, #1092	; 0x444
 8011eb8:	4013      	ands	r3, r2
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d107      	bne.n	8011ece <HAL_TIM_Encoder_Stop+0x84>
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	681a      	ldr	r2, [r3, #0]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f022 0201 	bic.w	r2, r2, #1
 8011ecc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011ece:	2300      	movs	r3, #0
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	691b      	ldr	r3, [r3, #16]
 8011ee6:	f003 0302 	and.w	r3, r3, #2
 8011eea:	2b02      	cmp	r3, #2
 8011eec:	d122      	bne.n	8011f34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	68db      	ldr	r3, [r3, #12]
 8011ef4:	f003 0302 	and.w	r3, r3, #2
 8011ef8:	2b02      	cmp	r3, #2
 8011efa:	d11b      	bne.n	8011f34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	f06f 0202 	mvn.w	r2, #2
 8011f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2201      	movs	r2, #1
 8011f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	699b      	ldr	r3, [r3, #24]
 8011f12:	f003 0303 	and.w	r3, r3, #3
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d003      	beq.n	8011f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f000 facb 	bl	80124b6 <HAL_TIM_IC_CaptureCallback>
 8011f20:	e005      	b.n	8011f2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 fabd 	bl	80124a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f000 face 	bl	80124ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2200      	movs	r2, #0
 8011f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	691b      	ldr	r3, [r3, #16]
 8011f3a:	f003 0304 	and.w	r3, r3, #4
 8011f3e:	2b04      	cmp	r3, #4
 8011f40:	d122      	bne.n	8011f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	f003 0304 	and.w	r3, r3, #4
 8011f4c:	2b04      	cmp	r3, #4
 8011f4e:	d11b      	bne.n	8011f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	f06f 0204 	mvn.w	r2, #4
 8011f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2202      	movs	r2, #2
 8011f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	699b      	ldr	r3, [r3, #24]
 8011f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d003      	beq.n	8011f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f000 faa1 	bl	80124b6 <HAL_TIM_IC_CaptureCallback>
 8011f74:	e005      	b.n	8011f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f000 fa93 	bl	80124a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f000 faa4 	bl	80124ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2200      	movs	r2, #0
 8011f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	691b      	ldr	r3, [r3, #16]
 8011f8e:	f003 0308 	and.w	r3, r3, #8
 8011f92:	2b08      	cmp	r3, #8
 8011f94:	d122      	bne.n	8011fdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	68db      	ldr	r3, [r3, #12]
 8011f9c:	f003 0308 	and.w	r3, r3, #8
 8011fa0:	2b08      	cmp	r3, #8
 8011fa2:	d11b      	bne.n	8011fdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	f06f 0208 	mvn.w	r2, #8
 8011fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2204      	movs	r2, #4
 8011fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	69db      	ldr	r3, [r3, #28]
 8011fba:	f003 0303 	and.w	r3, r3, #3
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d003      	beq.n	8011fca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f000 fa77 	bl	80124b6 <HAL_TIM_IC_CaptureCallback>
 8011fc8:	e005      	b.n	8011fd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 fa69 	bl	80124a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f000 fa7a 	bl	80124ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	f003 0310 	and.w	r3, r3, #16
 8011fe6:	2b10      	cmp	r3, #16
 8011fe8:	d122      	bne.n	8012030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	68db      	ldr	r3, [r3, #12]
 8011ff0:	f003 0310 	and.w	r3, r3, #16
 8011ff4:	2b10      	cmp	r3, #16
 8011ff6:	d11b      	bne.n	8012030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	f06f 0210 	mvn.w	r2, #16
 8012000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2208      	movs	r2, #8
 8012006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	69db      	ldr	r3, [r3, #28]
 801200e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012012:	2b00      	cmp	r3, #0
 8012014:	d003      	beq.n	801201e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f000 fa4d 	bl	80124b6 <HAL_TIM_IC_CaptureCallback>
 801201c:	e005      	b.n	801202a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f000 fa3f 	bl	80124a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f000 fa50 	bl	80124ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2200      	movs	r2, #0
 801202e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	691b      	ldr	r3, [r3, #16]
 8012036:	f003 0301 	and.w	r3, r3, #1
 801203a:	2b01      	cmp	r3, #1
 801203c:	d10e      	bne.n	801205c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	f003 0301 	and.w	r3, r3, #1
 8012048:	2b01      	cmp	r3, #1
 801204a:	d107      	bne.n	801205c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f06f 0201 	mvn.w	r2, #1
 8012054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f7f8 f8cc 	bl	800a1f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	691b      	ldr	r3, [r3, #16]
 8012062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012066:	2b80      	cmp	r3, #128	; 0x80
 8012068:	d10e      	bne.n	8012088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	68db      	ldr	r3, [r3, #12]
 8012070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012074:	2b80      	cmp	r3, #128	; 0x80
 8012076:	d107      	bne.n	8012088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 fee8 	bl	8012e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	691b      	ldr	r3, [r3, #16]
 801208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012092:	2b40      	cmp	r3, #64	; 0x40
 8012094:	d10e      	bne.n	80120b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120a0:	2b40      	cmp	r3, #64	; 0x40
 80120a2:	d107      	bne.n	80120b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80120ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	f000 fa15 	bl	80124de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	691b      	ldr	r3, [r3, #16]
 80120ba:	f003 0320 	and.w	r3, r3, #32
 80120be:	2b20      	cmp	r3, #32
 80120c0:	d10e      	bne.n	80120e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	f003 0320 	and.w	r3, r3, #32
 80120cc:	2b20      	cmp	r3, #32
 80120ce:	d107      	bne.n	80120e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	f06f 0220 	mvn.w	r2, #32
 80120d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f000 feb2 	bl	8012e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80120e0:	bf00      	nop
 80120e2:	3708      	adds	r7, #8
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}

080120e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b084      	sub	sp, #16
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	60f8      	str	r0, [r7, #12]
 80120f0:	60b9      	str	r1, [r7, #8]
 80120f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80120fa:	2b01      	cmp	r3, #1
 80120fc:	d101      	bne.n	8012102 <HAL_TIM_OC_ConfigChannel+0x1a>
 80120fe:	2302      	movs	r3, #2
 8012100:	e04e      	b.n	80121a0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	2201      	movs	r2, #1
 8012106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2202      	movs	r2, #2
 801210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2b0c      	cmp	r3, #12
 8012116:	d839      	bhi.n	801218c <HAL_TIM_OC_ConfigChannel+0xa4>
 8012118:	a201      	add	r2, pc, #4	; (adr r2, 8012120 <HAL_TIM_OC_ConfigChannel+0x38>)
 801211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801211e:	bf00      	nop
 8012120:	08012155 	.word	0x08012155
 8012124:	0801218d 	.word	0x0801218d
 8012128:	0801218d 	.word	0x0801218d
 801212c:	0801218d 	.word	0x0801218d
 8012130:	08012163 	.word	0x08012163
 8012134:	0801218d 	.word	0x0801218d
 8012138:	0801218d 	.word	0x0801218d
 801213c:	0801218d 	.word	0x0801218d
 8012140:	08012171 	.word	0x08012171
 8012144:	0801218d 	.word	0x0801218d
 8012148:	0801218d 	.word	0x0801218d
 801214c:	0801218d 	.word	0x0801218d
 8012150:	0801217f 	.word	0x0801217f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	68b9      	ldr	r1, [r7, #8]
 801215a:	4618      	mov	r0, r3
 801215c:	f000 fa6a 	bl	8012634 <TIM_OC1_SetConfig>
      break;
 8012160:	e015      	b.n	801218e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	68b9      	ldr	r1, [r7, #8]
 8012168:	4618      	mov	r0, r3
 801216a:	f000 fad3 	bl	8012714 <TIM_OC2_SetConfig>
      break;
 801216e:	e00e      	b.n	801218e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	68b9      	ldr	r1, [r7, #8]
 8012176:	4618      	mov	r0, r3
 8012178:	f000 fb42 	bl	8012800 <TIM_OC3_SetConfig>
      break;
 801217c:	e007      	b.n	801218e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	68b9      	ldr	r1, [r7, #8]
 8012184:	4618      	mov	r0, r3
 8012186:	f000 fbaf 	bl	80128e8 <TIM_OC4_SetConfig>
      break;
 801218a:	e000      	b.n	801218e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 801218c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	2201      	movs	r2, #1
 8012192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2200      	movs	r2, #0
 801219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801219e:	2300      	movs	r3, #0
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3710      	adds	r7, #16
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b084      	sub	sp, #16
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	60f8      	str	r0, [r7, #12]
 80121b0:	60b9      	str	r1, [r7, #8]
 80121b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80121ba:	2b01      	cmp	r3, #1
 80121bc:	d101      	bne.n	80121c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80121be:	2302      	movs	r3, #2
 80121c0:	e0b4      	b.n	801232c <HAL_TIM_PWM_ConfigChannel+0x184>
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2201      	movs	r2, #1
 80121c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2202      	movs	r2, #2
 80121ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2b0c      	cmp	r3, #12
 80121d6:	f200 809f 	bhi.w	8012318 <HAL_TIM_PWM_ConfigChannel+0x170>
 80121da:	a201      	add	r2, pc, #4	; (adr r2, 80121e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80121dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121e0:	08012215 	.word	0x08012215
 80121e4:	08012319 	.word	0x08012319
 80121e8:	08012319 	.word	0x08012319
 80121ec:	08012319 	.word	0x08012319
 80121f0:	08012255 	.word	0x08012255
 80121f4:	08012319 	.word	0x08012319
 80121f8:	08012319 	.word	0x08012319
 80121fc:	08012319 	.word	0x08012319
 8012200:	08012297 	.word	0x08012297
 8012204:	08012319 	.word	0x08012319
 8012208:	08012319 	.word	0x08012319
 801220c:	08012319 	.word	0x08012319
 8012210:	080122d7 	.word	0x080122d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	68b9      	ldr	r1, [r7, #8]
 801221a:	4618      	mov	r0, r3
 801221c:	f000 fa0a 	bl	8012634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	699a      	ldr	r2, [r3, #24]
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f042 0208 	orr.w	r2, r2, #8
 801222e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	699a      	ldr	r2, [r3, #24]
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	f022 0204 	bic.w	r2, r2, #4
 801223e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	6999      	ldr	r1, [r3, #24]
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	691a      	ldr	r2, [r3, #16]
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	430a      	orrs	r2, r1
 8012250:	619a      	str	r2, [r3, #24]
      break;
 8012252:	e062      	b.n	801231a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	68b9      	ldr	r1, [r7, #8]
 801225a:	4618      	mov	r0, r3
 801225c:	f000 fa5a 	bl	8012714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	699a      	ldr	r2, [r3, #24]
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801226e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	699a      	ldr	r2, [r3, #24]
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801227e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	6999      	ldr	r1, [r3, #24]
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	691b      	ldr	r3, [r3, #16]
 801228a:	021a      	lsls	r2, r3, #8
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	430a      	orrs	r2, r1
 8012292:	619a      	str	r2, [r3, #24]
      break;
 8012294:	e041      	b.n	801231a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	68b9      	ldr	r1, [r7, #8]
 801229c:	4618      	mov	r0, r3
 801229e:	f000 faaf 	bl	8012800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	69da      	ldr	r2, [r3, #28]
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f042 0208 	orr.w	r2, r2, #8
 80122b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	69da      	ldr	r2, [r3, #28]
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f022 0204 	bic.w	r2, r2, #4
 80122c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	69d9      	ldr	r1, [r3, #28]
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	691a      	ldr	r2, [r3, #16]
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	430a      	orrs	r2, r1
 80122d2:	61da      	str	r2, [r3, #28]
      break;
 80122d4:	e021      	b.n	801231a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	68b9      	ldr	r1, [r7, #8]
 80122dc:	4618      	mov	r0, r3
 80122de:	f000 fb03 	bl	80128e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	69da      	ldr	r2, [r3, #28]
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80122f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	69da      	ldr	r2, [r3, #28]
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	69d9      	ldr	r1, [r3, #28]
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	691b      	ldr	r3, [r3, #16]
 801230c:	021a      	lsls	r2, r3, #8
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	430a      	orrs	r2, r1
 8012314:	61da      	str	r2, [r3, #28]
      break;
 8012316:	e000      	b.n	801231a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8012318:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	2201      	movs	r2, #1
 801231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	2200      	movs	r2, #0
 8012326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801232a:	2300      	movs	r3, #0
}
 801232c:	4618      	mov	r0, r3
 801232e:	3710      	adds	r7, #16
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012344:	2b01      	cmp	r3, #1
 8012346:	d101      	bne.n	801234c <HAL_TIM_ConfigClockSource+0x18>
 8012348:	2302      	movs	r3, #2
 801234a:	e0a6      	b.n	801249a <HAL_TIM_ConfigClockSource+0x166>
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2201      	movs	r2, #1
 8012350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2202      	movs	r2, #2
 8012358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	689b      	ldr	r3, [r3, #8]
 8012362:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801236a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012372:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	68fa      	ldr	r2, [r7, #12]
 801237a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	2b40      	cmp	r3, #64	; 0x40
 8012382:	d067      	beq.n	8012454 <HAL_TIM_ConfigClockSource+0x120>
 8012384:	2b40      	cmp	r3, #64	; 0x40
 8012386:	d80b      	bhi.n	80123a0 <HAL_TIM_ConfigClockSource+0x6c>
 8012388:	2b10      	cmp	r3, #16
 801238a:	d073      	beq.n	8012474 <HAL_TIM_ConfigClockSource+0x140>
 801238c:	2b10      	cmp	r3, #16
 801238e:	d802      	bhi.n	8012396 <HAL_TIM_ConfigClockSource+0x62>
 8012390:	2b00      	cmp	r3, #0
 8012392:	d06f      	beq.n	8012474 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8012394:	e078      	b.n	8012488 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8012396:	2b20      	cmp	r3, #32
 8012398:	d06c      	beq.n	8012474 <HAL_TIM_ConfigClockSource+0x140>
 801239a:	2b30      	cmp	r3, #48	; 0x30
 801239c:	d06a      	beq.n	8012474 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801239e:	e073      	b.n	8012488 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80123a0:	2b70      	cmp	r3, #112	; 0x70
 80123a2:	d00d      	beq.n	80123c0 <HAL_TIM_ConfigClockSource+0x8c>
 80123a4:	2b70      	cmp	r3, #112	; 0x70
 80123a6:	d804      	bhi.n	80123b2 <HAL_TIM_ConfigClockSource+0x7e>
 80123a8:	2b50      	cmp	r3, #80	; 0x50
 80123aa:	d033      	beq.n	8012414 <HAL_TIM_ConfigClockSource+0xe0>
 80123ac:	2b60      	cmp	r3, #96	; 0x60
 80123ae:	d041      	beq.n	8012434 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80123b0:	e06a      	b.n	8012488 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80123b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123b6:	d066      	beq.n	8012486 <HAL_TIM_ConfigClockSource+0x152>
 80123b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80123bc:	d017      	beq.n	80123ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80123be:	e063      	b.n	8012488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6818      	ldr	r0, [r3, #0]
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	6899      	ldr	r1, [r3, #8]
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	685a      	ldr	r2, [r3, #4]
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	68db      	ldr	r3, [r3, #12]
 80123d0:	f000 fb5a 	bl	8012a88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	689b      	ldr	r3, [r3, #8]
 80123da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80123e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	68fa      	ldr	r2, [r7, #12]
 80123ea:	609a      	str	r2, [r3, #8]
      break;
 80123ec:	e04c      	b.n	8012488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6818      	ldr	r0, [r3, #0]
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	6899      	ldr	r1, [r3, #8]
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	685a      	ldr	r2, [r3, #4]
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	68db      	ldr	r3, [r3, #12]
 80123fe:	f000 fb43 	bl	8012a88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	689a      	ldr	r2, [r3, #8]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012410:	609a      	str	r2, [r3, #8]
      break;
 8012412:	e039      	b.n	8012488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6818      	ldr	r0, [r3, #0]
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	6859      	ldr	r1, [r3, #4]
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	68db      	ldr	r3, [r3, #12]
 8012420:	461a      	mov	r2, r3
 8012422:	f000 fab7 	bl	8012994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	2150      	movs	r1, #80	; 0x50
 801242c:	4618      	mov	r0, r3
 801242e:	f000 fb10 	bl	8012a52 <TIM_ITRx_SetConfig>
      break;
 8012432:	e029      	b.n	8012488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6818      	ldr	r0, [r3, #0]
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	6859      	ldr	r1, [r3, #4]
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	68db      	ldr	r3, [r3, #12]
 8012440:	461a      	mov	r2, r3
 8012442:	f000 fad6 	bl	80129f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2160      	movs	r1, #96	; 0x60
 801244c:	4618      	mov	r0, r3
 801244e:	f000 fb00 	bl	8012a52 <TIM_ITRx_SetConfig>
      break;
 8012452:	e019      	b.n	8012488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6818      	ldr	r0, [r3, #0]
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	6859      	ldr	r1, [r3, #4]
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	68db      	ldr	r3, [r3, #12]
 8012460:	461a      	mov	r2, r3
 8012462:	f000 fa97 	bl	8012994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2140      	movs	r1, #64	; 0x40
 801246c:	4618      	mov	r0, r3
 801246e:	f000 faf0 	bl	8012a52 <TIM_ITRx_SetConfig>
      break;
 8012472:	e009      	b.n	8012488 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681a      	ldr	r2, [r3, #0]
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4619      	mov	r1, r3
 801247e:	4610      	mov	r0, r2
 8012480:	f000 fae7 	bl	8012a52 <TIM_ITRx_SetConfig>
      break;
 8012484:	e000      	b.n	8012488 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8012486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2201      	movs	r2, #1
 801248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2200      	movs	r2, #0
 8012494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012498:	2300      	movs	r3, #0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3710      	adds	r7, #16
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}

080124a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80124a2:	b480      	push	{r7}
 80124a4:	b083      	sub	sp, #12
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80124aa:	bf00      	nop
 80124ac:	370c      	adds	r7, #12
 80124ae:	46bd      	mov	sp, r7
 80124b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b4:	4770      	bx	lr

080124b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80124b6:	b480      	push	{r7}
 80124b8:	b083      	sub	sp, #12
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80124be:	bf00      	nop
 80124c0:	370c      	adds	r7, #12
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr

080124ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80124ca:	b480      	push	{r7}
 80124cc:	b083      	sub	sp, #12
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80124d2:	bf00      	nop
 80124d4:	370c      	adds	r7, #12
 80124d6:	46bd      	mov	sp, r7
 80124d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124dc:	4770      	bx	lr

080124de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80124de:	b480      	push	{r7}
 80124e0:	b083      	sub	sp, #12
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80124e6:	bf00      	nop
 80124e8:	370c      	adds	r7, #12
 80124ea:	46bd      	mov	sp, r7
 80124ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f0:	4770      	bx	lr
	...

080124f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80124f4:	b480      	push	{r7}
 80124f6:	b085      	sub	sp, #20
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	4a40      	ldr	r2, [pc, #256]	; (8012608 <TIM_Base_SetConfig+0x114>)
 8012508:	4293      	cmp	r3, r2
 801250a:	d013      	beq.n	8012534 <TIM_Base_SetConfig+0x40>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012512:	d00f      	beq.n	8012534 <TIM_Base_SetConfig+0x40>
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	4a3d      	ldr	r2, [pc, #244]	; (801260c <TIM_Base_SetConfig+0x118>)
 8012518:	4293      	cmp	r3, r2
 801251a:	d00b      	beq.n	8012534 <TIM_Base_SetConfig+0x40>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4a3c      	ldr	r2, [pc, #240]	; (8012610 <TIM_Base_SetConfig+0x11c>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d007      	beq.n	8012534 <TIM_Base_SetConfig+0x40>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	4a3b      	ldr	r2, [pc, #236]	; (8012614 <TIM_Base_SetConfig+0x120>)
 8012528:	4293      	cmp	r3, r2
 801252a:	d003      	beq.n	8012534 <TIM_Base_SetConfig+0x40>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	4a3a      	ldr	r2, [pc, #232]	; (8012618 <TIM_Base_SetConfig+0x124>)
 8012530:	4293      	cmp	r3, r2
 8012532:	d108      	bne.n	8012546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801253a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	68fa      	ldr	r2, [r7, #12]
 8012542:	4313      	orrs	r3, r2
 8012544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	4a2f      	ldr	r2, [pc, #188]	; (8012608 <TIM_Base_SetConfig+0x114>)
 801254a:	4293      	cmp	r3, r2
 801254c:	d02b      	beq.n	80125a6 <TIM_Base_SetConfig+0xb2>
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012554:	d027      	beq.n	80125a6 <TIM_Base_SetConfig+0xb2>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	4a2c      	ldr	r2, [pc, #176]	; (801260c <TIM_Base_SetConfig+0x118>)
 801255a:	4293      	cmp	r3, r2
 801255c:	d023      	beq.n	80125a6 <TIM_Base_SetConfig+0xb2>
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4a2b      	ldr	r2, [pc, #172]	; (8012610 <TIM_Base_SetConfig+0x11c>)
 8012562:	4293      	cmp	r3, r2
 8012564:	d01f      	beq.n	80125a6 <TIM_Base_SetConfig+0xb2>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	4a2a      	ldr	r2, [pc, #168]	; (8012614 <TIM_Base_SetConfig+0x120>)
 801256a:	4293      	cmp	r3, r2
 801256c:	d01b      	beq.n	80125a6 <TIM_Base_SetConfig+0xb2>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	4a29      	ldr	r2, [pc, #164]	; (8012618 <TIM_Base_SetConfig+0x124>)
 8012572:	4293      	cmp	r3, r2
 8012574:	d017      	beq.n	80125a6 <TIM_Base_SetConfig+0xb2>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4a28      	ldr	r2, [pc, #160]	; (801261c <TIM_Base_SetConfig+0x128>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d013      	beq.n	80125a6 <TIM_Base_SetConfig+0xb2>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4a27      	ldr	r2, [pc, #156]	; (8012620 <TIM_Base_SetConfig+0x12c>)
 8012582:	4293      	cmp	r3, r2
 8012584:	d00f      	beq.n	80125a6 <TIM_Base_SetConfig+0xb2>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	4a26      	ldr	r2, [pc, #152]	; (8012624 <TIM_Base_SetConfig+0x130>)
 801258a:	4293      	cmp	r3, r2
 801258c:	d00b      	beq.n	80125a6 <TIM_Base_SetConfig+0xb2>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	4a25      	ldr	r2, [pc, #148]	; (8012628 <TIM_Base_SetConfig+0x134>)
 8012592:	4293      	cmp	r3, r2
 8012594:	d007      	beq.n	80125a6 <TIM_Base_SetConfig+0xb2>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4a24      	ldr	r2, [pc, #144]	; (801262c <TIM_Base_SetConfig+0x138>)
 801259a:	4293      	cmp	r3, r2
 801259c:	d003      	beq.n	80125a6 <TIM_Base_SetConfig+0xb2>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4a23      	ldr	r2, [pc, #140]	; (8012630 <TIM_Base_SetConfig+0x13c>)
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d108      	bne.n	80125b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80125ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	68db      	ldr	r3, [r3, #12]
 80125b2:	68fa      	ldr	r2, [r7, #12]
 80125b4:	4313      	orrs	r3, r2
 80125b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	695b      	ldr	r3, [r3, #20]
 80125c2:	4313      	orrs	r3, r2
 80125c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	68fa      	ldr	r2, [r7, #12]
 80125ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	689a      	ldr	r2, [r3, #8]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	4a0a      	ldr	r2, [pc, #40]	; (8012608 <TIM_Base_SetConfig+0x114>)
 80125e0:	4293      	cmp	r3, r2
 80125e2:	d003      	beq.n	80125ec <TIM_Base_SetConfig+0xf8>
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	4a0c      	ldr	r2, [pc, #48]	; (8012618 <TIM_Base_SetConfig+0x124>)
 80125e8:	4293      	cmp	r3, r2
 80125ea:	d103      	bne.n	80125f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	691a      	ldr	r2, [r3, #16]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2201      	movs	r2, #1
 80125f8:	615a      	str	r2, [r3, #20]
}
 80125fa:	bf00      	nop
 80125fc:	3714      	adds	r7, #20
 80125fe:	46bd      	mov	sp, r7
 8012600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012604:	4770      	bx	lr
 8012606:	bf00      	nop
 8012608:	40010000 	.word	0x40010000
 801260c:	40000400 	.word	0x40000400
 8012610:	40000800 	.word	0x40000800
 8012614:	40000c00 	.word	0x40000c00
 8012618:	40010400 	.word	0x40010400
 801261c:	40014000 	.word	0x40014000
 8012620:	40014400 	.word	0x40014400
 8012624:	40014800 	.word	0x40014800
 8012628:	40001800 	.word	0x40001800
 801262c:	40001c00 	.word	0x40001c00
 8012630:	40002000 	.word	0x40002000

08012634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012634:	b480      	push	{r7}
 8012636:	b087      	sub	sp, #28
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6a1b      	ldr	r3, [r3, #32]
 8012642:	f023 0201 	bic.w	r2, r3, #1
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	6a1b      	ldr	r3, [r3, #32]
 801264e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	699b      	ldr	r3, [r3, #24]
 801265a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	f023 0303 	bic.w	r3, r3, #3
 801266a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	68fa      	ldr	r2, [r7, #12]
 8012672:	4313      	orrs	r3, r2
 8012674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	f023 0302 	bic.w	r3, r3, #2
 801267c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	689b      	ldr	r3, [r3, #8]
 8012682:	697a      	ldr	r2, [r7, #20]
 8012684:	4313      	orrs	r3, r2
 8012686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	4a20      	ldr	r2, [pc, #128]	; (801270c <TIM_OC1_SetConfig+0xd8>)
 801268c:	4293      	cmp	r3, r2
 801268e:	d003      	beq.n	8012698 <TIM_OC1_SetConfig+0x64>
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	4a1f      	ldr	r2, [pc, #124]	; (8012710 <TIM_OC1_SetConfig+0xdc>)
 8012694:	4293      	cmp	r3, r2
 8012696:	d10c      	bne.n	80126b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	f023 0308 	bic.w	r3, r3, #8
 801269e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	68db      	ldr	r3, [r3, #12]
 80126a4:	697a      	ldr	r2, [r7, #20]
 80126a6:	4313      	orrs	r3, r2
 80126a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	f023 0304 	bic.w	r3, r3, #4
 80126b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4a15      	ldr	r2, [pc, #84]	; (801270c <TIM_OC1_SetConfig+0xd8>)
 80126b6:	4293      	cmp	r3, r2
 80126b8:	d003      	beq.n	80126c2 <TIM_OC1_SetConfig+0x8e>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	4a14      	ldr	r2, [pc, #80]	; (8012710 <TIM_OC1_SetConfig+0xdc>)
 80126be:	4293      	cmp	r3, r2
 80126c0:	d111      	bne.n	80126e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80126c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80126d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	695b      	ldr	r3, [r3, #20]
 80126d6:	693a      	ldr	r2, [r7, #16]
 80126d8:	4313      	orrs	r3, r2
 80126da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	699b      	ldr	r3, [r3, #24]
 80126e0:	693a      	ldr	r2, [r7, #16]
 80126e2:	4313      	orrs	r3, r2
 80126e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	693a      	ldr	r2, [r7, #16]
 80126ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	68fa      	ldr	r2, [r7, #12]
 80126f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	685a      	ldr	r2, [r3, #4]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	697a      	ldr	r2, [r7, #20]
 80126fe:	621a      	str	r2, [r3, #32]
}
 8012700:	bf00      	nop
 8012702:	371c      	adds	r7, #28
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr
 801270c:	40010000 	.word	0x40010000
 8012710:	40010400 	.word	0x40010400

08012714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012714:	b480      	push	{r7}
 8012716:	b087      	sub	sp, #28
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6a1b      	ldr	r3, [r3, #32]
 8012722:	f023 0210 	bic.w	r2, r3, #16
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6a1b      	ldr	r3, [r3, #32]
 801272e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	685b      	ldr	r3, [r3, #4]
 8012734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	699b      	ldr	r3, [r3, #24]
 801273a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801274a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	021b      	lsls	r3, r3, #8
 8012752:	68fa      	ldr	r2, [r7, #12]
 8012754:	4313      	orrs	r3, r2
 8012756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	f023 0320 	bic.w	r3, r3, #32
 801275e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	689b      	ldr	r3, [r3, #8]
 8012764:	011b      	lsls	r3, r3, #4
 8012766:	697a      	ldr	r2, [r7, #20]
 8012768:	4313      	orrs	r3, r2
 801276a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	4a22      	ldr	r2, [pc, #136]	; (80127f8 <TIM_OC2_SetConfig+0xe4>)
 8012770:	4293      	cmp	r3, r2
 8012772:	d003      	beq.n	801277c <TIM_OC2_SetConfig+0x68>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	4a21      	ldr	r2, [pc, #132]	; (80127fc <TIM_OC2_SetConfig+0xe8>)
 8012778:	4293      	cmp	r3, r2
 801277a:	d10d      	bne.n	8012798 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	011b      	lsls	r3, r3, #4
 801278a:	697a      	ldr	r2, [r7, #20]
 801278c:	4313      	orrs	r3, r2
 801278e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	4a17      	ldr	r2, [pc, #92]	; (80127f8 <TIM_OC2_SetConfig+0xe4>)
 801279c:	4293      	cmp	r3, r2
 801279e:	d003      	beq.n	80127a8 <TIM_OC2_SetConfig+0x94>
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	4a16      	ldr	r2, [pc, #88]	; (80127fc <TIM_OC2_SetConfig+0xe8>)
 80127a4:	4293      	cmp	r3, r2
 80127a6:	d113      	bne.n	80127d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80127ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80127b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	695b      	ldr	r3, [r3, #20]
 80127bc:	009b      	lsls	r3, r3, #2
 80127be:	693a      	ldr	r2, [r7, #16]
 80127c0:	4313      	orrs	r3, r2
 80127c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	699b      	ldr	r3, [r3, #24]
 80127c8:	009b      	lsls	r3, r3, #2
 80127ca:	693a      	ldr	r2, [r7, #16]
 80127cc:	4313      	orrs	r3, r2
 80127ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	693a      	ldr	r2, [r7, #16]
 80127d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	68fa      	ldr	r2, [r7, #12]
 80127da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	685a      	ldr	r2, [r3, #4]
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	697a      	ldr	r2, [r7, #20]
 80127e8:	621a      	str	r2, [r3, #32]
}
 80127ea:	bf00      	nop
 80127ec:	371c      	adds	r7, #28
 80127ee:	46bd      	mov	sp, r7
 80127f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop
 80127f8:	40010000 	.word	0x40010000
 80127fc:	40010400 	.word	0x40010400

08012800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012800:	b480      	push	{r7}
 8012802:	b087      	sub	sp, #28
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6a1b      	ldr	r3, [r3, #32]
 801280e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6a1b      	ldr	r3, [r3, #32]
 801281a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	69db      	ldr	r3, [r3, #28]
 8012826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801282e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	f023 0303 	bic.w	r3, r3, #3
 8012836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	68fa      	ldr	r2, [r7, #12]
 801283e:	4313      	orrs	r3, r2
 8012840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	689b      	ldr	r3, [r3, #8]
 801284e:	021b      	lsls	r3, r3, #8
 8012850:	697a      	ldr	r2, [r7, #20]
 8012852:	4313      	orrs	r3, r2
 8012854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4a21      	ldr	r2, [pc, #132]	; (80128e0 <TIM_OC3_SetConfig+0xe0>)
 801285a:	4293      	cmp	r3, r2
 801285c:	d003      	beq.n	8012866 <TIM_OC3_SetConfig+0x66>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4a20      	ldr	r2, [pc, #128]	; (80128e4 <TIM_OC3_SetConfig+0xe4>)
 8012862:	4293      	cmp	r3, r2
 8012864:	d10d      	bne.n	8012882 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801286c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	68db      	ldr	r3, [r3, #12]
 8012872:	021b      	lsls	r3, r3, #8
 8012874:	697a      	ldr	r2, [r7, #20]
 8012876:	4313      	orrs	r3, r2
 8012878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	4a16      	ldr	r2, [pc, #88]	; (80128e0 <TIM_OC3_SetConfig+0xe0>)
 8012886:	4293      	cmp	r3, r2
 8012888:	d003      	beq.n	8012892 <TIM_OC3_SetConfig+0x92>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	4a15      	ldr	r2, [pc, #84]	; (80128e4 <TIM_OC3_SetConfig+0xe4>)
 801288e:	4293      	cmp	r3, r2
 8012890:	d113      	bne.n	80128ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80128a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	695b      	ldr	r3, [r3, #20]
 80128a6:	011b      	lsls	r3, r3, #4
 80128a8:	693a      	ldr	r2, [r7, #16]
 80128aa:	4313      	orrs	r3, r2
 80128ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	699b      	ldr	r3, [r3, #24]
 80128b2:	011b      	lsls	r3, r3, #4
 80128b4:	693a      	ldr	r2, [r7, #16]
 80128b6:	4313      	orrs	r3, r2
 80128b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	693a      	ldr	r2, [r7, #16]
 80128be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	68fa      	ldr	r2, [r7, #12]
 80128c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	685a      	ldr	r2, [r3, #4]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	697a      	ldr	r2, [r7, #20]
 80128d2:	621a      	str	r2, [r3, #32]
}
 80128d4:	bf00      	nop
 80128d6:	371c      	adds	r7, #28
 80128d8:	46bd      	mov	sp, r7
 80128da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128de:	4770      	bx	lr
 80128e0:	40010000 	.word	0x40010000
 80128e4:	40010400 	.word	0x40010400

080128e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80128e8:	b480      	push	{r7}
 80128ea:	b087      	sub	sp, #28
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6a1b      	ldr	r3, [r3, #32]
 80128f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6a1b      	ldr	r3, [r3, #32]
 8012902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	685b      	ldr	r3, [r3, #4]
 8012908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	69db      	ldr	r3, [r3, #28]
 801290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801291e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	021b      	lsls	r3, r3, #8
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	4313      	orrs	r3, r2
 801292a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	689b      	ldr	r3, [r3, #8]
 8012938:	031b      	lsls	r3, r3, #12
 801293a:	693a      	ldr	r2, [r7, #16]
 801293c:	4313      	orrs	r3, r2
 801293e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	4a12      	ldr	r2, [pc, #72]	; (801298c <TIM_OC4_SetConfig+0xa4>)
 8012944:	4293      	cmp	r3, r2
 8012946:	d003      	beq.n	8012950 <TIM_OC4_SetConfig+0x68>
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	4a11      	ldr	r2, [pc, #68]	; (8012990 <TIM_OC4_SetConfig+0xa8>)
 801294c:	4293      	cmp	r3, r2
 801294e:	d109      	bne.n	8012964 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012956:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	695b      	ldr	r3, [r3, #20]
 801295c:	019b      	lsls	r3, r3, #6
 801295e:	697a      	ldr	r2, [r7, #20]
 8012960:	4313      	orrs	r3, r2
 8012962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	697a      	ldr	r2, [r7, #20]
 8012968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	68fa      	ldr	r2, [r7, #12]
 801296e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	685a      	ldr	r2, [r3, #4]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	693a      	ldr	r2, [r7, #16]
 801297c:	621a      	str	r2, [r3, #32]
}
 801297e:	bf00      	nop
 8012980:	371c      	adds	r7, #28
 8012982:	46bd      	mov	sp, r7
 8012984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012988:	4770      	bx	lr
 801298a:	bf00      	nop
 801298c:	40010000 	.word	0x40010000
 8012990:	40010400 	.word	0x40010400

08012994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012994:	b480      	push	{r7}
 8012996:	b087      	sub	sp, #28
 8012998:	af00      	add	r7, sp, #0
 801299a:	60f8      	str	r0, [r7, #12]
 801299c:	60b9      	str	r1, [r7, #8]
 801299e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	6a1b      	ldr	r3, [r3, #32]
 80129a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	6a1b      	ldr	r3, [r3, #32]
 80129aa:	f023 0201 	bic.w	r2, r3, #1
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	699b      	ldr	r3, [r3, #24]
 80129b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80129be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	011b      	lsls	r3, r3, #4
 80129c4:	693a      	ldr	r2, [r7, #16]
 80129c6:	4313      	orrs	r3, r2
 80129c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	f023 030a 	bic.w	r3, r3, #10
 80129d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80129d2:	697a      	ldr	r2, [r7, #20]
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	4313      	orrs	r3, r2
 80129d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	693a      	ldr	r2, [r7, #16]
 80129de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	697a      	ldr	r2, [r7, #20]
 80129e4:	621a      	str	r2, [r3, #32]
}
 80129e6:	bf00      	nop
 80129e8:	371c      	adds	r7, #28
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr

080129f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80129f2:	b480      	push	{r7}
 80129f4:	b087      	sub	sp, #28
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	60f8      	str	r0, [r7, #12]
 80129fa:	60b9      	str	r1, [r7, #8]
 80129fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	6a1b      	ldr	r3, [r3, #32]
 8012a02:	f023 0210 	bic.w	r2, r3, #16
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	699b      	ldr	r3, [r3, #24]
 8012a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	6a1b      	ldr	r3, [r3, #32]
 8012a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	031b      	lsls	r3, r3, #12
 8012a22:	697a      	ldr	r2, [r7, #20]
 8012a24:	4313      	orrs	r3, r2
 8012a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	011b      	lsls	r3, r3, #4
 8012a34:	693a      	ldr	r2, [r7, #16]
 8012a36:	4313      	orrs	r3, r2
 8012a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	697a      	ldr	r2, [r7, #20]
 8012a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	693a      	ldr	r2, [r7, #16]
 8012a44:	621a      	str	r2, [r3, #32]
}
 8012a46:	bf00      	nop
 8012a48:	371c      	adds	r7, #28
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a50:	4770      	bx	lr

08012a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012a52:	b480      	push	{r7}
 8012a54:	b085      	sub	sp, #20
 8012a56:	af00      	add	r7, sp, #0
 8012a58:	6078      	str	r0, [r7, #4]
 8012a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	689b      	ldr	r3, [r3, #8]
 8012a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012a6a:	683a      	ldr	r2, [r7, #0]
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	4313      	orrs	r3, r2
 8012a70:	f043 0307 	orr.w	r3, r3, #7
 8012a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	68fa      	ldr	r2, [r7, #12]
 8012a7a:	609a      	str	r2, [r3, #8]
}
 8012a7c:	bf00      	nop
 8012a7e:	3714      	adds	r7, #20
 8012a80:	46bd      	mov	sp, r7
 8012a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a86:	4770      	bx	lr

08012a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b087      	sub	sp, #28
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
 8012a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	689b      	ldr	r3, [r3, #8]
 8012a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	021a      	lsls	r2, r3, #8
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	431a      	orrs	r2, r3
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	4313      	orrs	r3, r2
 8012ab0:	697a      	ldr	r2, [r7, #20]
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	697a      	ldr	r2, [r7, #20]
 8012aba:	609a      	str	r2, [r3, #8]
}
 8012abc:	bf00      	nop
 8012abe:	371c      	adds	r7, #28
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr

08012ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b087      	sub	sp, #28
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	f003 031f 	and.w	r3, r3, #31
 8012ada:	2201      	movs	r2, #1
 8012adc:	fa02 f303 	lsl.w	r3, r2, r3
 8012ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	6a1a      	ldr	r2, [r3, #32]
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	43db      	mvns	r3, r3
 8012aea:	401a      	ands	r2, r3
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	6a1a      	ldr	r2, [r3, #32]
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	f003 031f 	and.w	r3, r3, #31
 8012afa:	6879      	ldr	r1, [r7, #4]
 8012afc:	fa01 f303 	lsl.w	r3, r1, r3
 8012b00:	431a      	orrs	r2, r3
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	621a      	str	r2, [r3, #32]
}
 8012b06:	bf00      	nop
 8012b08:	371c      	adds	r7, #28
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b10:	4770      	bx	lr

08012b12 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012b12:	b580      	push	{r7, lr}
 8012b14:	b084      	sub	sp, #16
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	6078      	str	r0, [r7, #4]
 8012b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	2b04      	cmp	r3, #4
 8012b20:	d00d      	beq.n	8012b3e <HAL_TIMEx_OCN_Start_IT+0x2c>
 8012b22:	2b08      	cmp	r3, #8
 8012b24:	d014      	beq.n	8012b50 <HAL_TIMEx_OCN_Start_IT+0x3e>
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d000      	beq.n	8012b2c <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8012b2a:	e01a      	b.n	8012b62 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	68da      	ldr	r2, [r3, #12]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	f042 0202 	orr.w	r2, r2, #2
 8012b3a:	60da      	str	r2, [r3, #12]
      break;
 8012b3c:	e011      	b.n	8012b62 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	68da      	ldr	r2, [r3, #12]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	f042 0204 	orr.w	r2, r2, #4
 8012b4c:	60da      	str	r2, [r3, #12]
      break;
 8012b4e:	e008      	b.n	8012b62 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	68da      	ldr	r2, [r3, #12]
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	f042 0208 	orr.w	r2, r2, #8
 8012b5e:	60da      	str	r2, [r3, #12]
      break;
 8012b60:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	68da      	ldr	r2, [r3, #12]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012b70:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	2204      	movs	r2, #4
 8012b78:	6839      	ldr	r1, [r7, #0]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f000 f976 	bl	8012e6c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012b8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	689b      	ldr	r3, [r3, #8]
 8012b96:	f003 0307 	and.w	r3, r3, #7
 8012b9a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	2b06      	cmp	r3, #6
 8012ba0:	d007      	beq.n	8012bb2 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	681a      	ldr	r2, [r3, #0]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	f042 0201 	orr.w	r2, r2, #1
 8012bb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012bb2:	2300      	movs	r3, #0
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3710      	adds	r7, #16
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b084      	sub	sp, #16
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	2b04      	cmp	r3, #4
 8012bca:	d00d      	beq.n	8012be8 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8012bcc:	2b08      	cmp	r3, #8
 8012bce:	d014      	beq.n	8012bfa <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d000      	beq.n	8012bd6 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8012bd4:	e01a      	b.n	8012c0c <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	68da      	ldr	r2, [r3, #12]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	f022 0202 	bic.w	r2, r2, #2
 8012be4:	60da      	str	r2, [r3, #12]
      break;
 8012be6:	e011      	b.n	8012c0c <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	68da      	ldr	r2, [r3, #12]
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	f022 0204 	bic.w	r2, r2, #4
 8012bf6:	60da      	str	r2, [r3, #12]
      break;
 8012bf8:	e008      	b.n	8012c0c <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	68da      	ldr	r2, [r3, #12]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	f022 0208 	bic.w	r2, r2, #8
 8012c08:	60da      	str	r2, [r3, #12]
      break;
 8012c0a:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2200      	movs	r2, #0
 8012c12:	6839      	ldr	r1, [r7, #0]
 8012c14:	4618      	mov	r0, r3
 8012c16:	f000 f929 	bl	8012e6c <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	6a1b      	ldr	r3, [r3, #32]
 8012c20:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8012c22:	68fa      	ldr	r2, [r7, #12]
 8012c24:	f240 4344 	movw	r3, #1092	; 0x444
 8012c28:	4013      	ands	r3, r2
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d107      	bne.n	8012c3e <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	68da      	ldr	r2, [r3, #12]
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012c3c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	6a1a      	ldr	r2, [r3, #32]
 8012c44:	f241 1311 	movw	r3, #4369	; 0x1111
 8012c48:	4013      	ands	r3, r2
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d10f      	bne.n	8012c6e <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	6a1a      	ldr	r2, [r3, #32]
 8012c54:	f240 4344 	movw	r3, #1092	; 0x444
 8012c58:	4013      	ands	r3, r2
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d107      	bne.n	8012c6e <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012c6c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	6a1a      	ldr	r2, [r3, #32]
 8012c74:	f241 1311 	movw	r3, #4369	; 0x1111
 8012c78:	4013      	ands	r3, r2
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d10f      	bne.n	8012c9e <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	6a1a      	ldr	r2, [r3, #32]
 8012c84:	f240 4344 	movw	r3, #1092	; 0x444
 8012c88:	4013      	ands	r3, r2
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d107      	bne.n	8012c9e <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	f022 0201 	bic.w	r2, r2, #1
 8012c9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012c9e:	2300      	movs	r3, #0
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3710      	adds	r7, #16
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}

08012ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b085      	sub	sp, #20
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d101      	bne.n	8012cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012cbc:	2302      	movs	r3, #2
 8012cbe:	e05a      	b.n	8012d76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2202      	movs	r2, #2
 8012ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	685b      	ldr	r3, [r3, #4]
 8012cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	689b      	ldr	r3, [r3, #8]
 8012cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	68fa      	ldr	r2, [r7, #12]
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	68fa      	ldr	r2, [r7, #12]
 8012cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	4a21      	ldr	r2, [pc, #132]	; (8012d84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8012d00:	4293      	cmp	r3, r2
 8012d02:	d022      	beq.n	8012d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d0c:	d01d      	beq.n	8012d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4a1d      	ldr	r2, [pc, #116]	; (8012d88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012d14:	4293      	cmp	r3, r2
 8012d16:	d018      	beq.n	8012d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4a1b      	ldr	r2, [pc, #108]	; (8012d8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d013      	beq.n	8012d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	4a1a      	ldr	r2, [pc, #104]	; (8012d90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8012d28:	4293      	cmp	r3, r2
 8012d2a:	d00e      	beq.n	8012d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	4a18      	ldr	r2, [pc, #96]	; (8012d94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d009      	beq.n	8012d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4a17      	ldr	r2, [pc, #92]	; (8012d98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8012d3c:	4293      	cmp	r3, r2
 8012d3e:	d004      	beq.n	8012d4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4a15      	ldr	r2, [pc, #84]	; (8012d9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8012d46:	4293      	cmp	r3, r2
 8012d48:	d10c      	bne.n	8012d64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	68ba      	ldr	r2, [r7, #8]
 8012d58:	4313      	orrs	r3, r2
 8012d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	68ba      	ldr	r2, [r7, #8]
 8012d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2201      	movs	r2, #1
 8012d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012d74:	2300      	movs	r3, #0
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3714      	adds	r7, #20
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d80:	4770      	bx	lr
 8012d82:	bf00      	nop
 8012d84:	40010000 	.word	0x40010000
 8012d88:	40000400 	.word	0x40000400
 8012d8c:	40000800 	.word	0x40000800
 8012d90:	40000c00 	.word	0x40000c00
 8012d94:	40010400 	.word	0x40010400
 8012d98:	40014000 	.word	0x40014000
 8012d9c:	40001800 	.word	0x40001800

08012da0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b085      	sub	sp, #20
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012daa:	2300      	movs	r3, #0
 8012dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012db4:	2b01      	cmp	r3, #1
 8012db6:	d101      	bne.n	8012dbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012db8:	2302      	movs	r3, #2
 8012dba:	e03d      	b.n	8012e38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	68db      	ldr	r3, [r3, #12]
 8012dce:	4313      	orrs	r3, r2
 8012dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	689b      	ldr	r3, [r3, #8]
 8012ddc:	4313      	orrs	r3, r2
 8012dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	4313      	orrs	r3, r2
 8012dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	691b      	ldr	r3, [r3, #16]
 8012e06:	4313      	orrs	r3, r2
 8012e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	695b      	ldr	r3, [r3, #20]
 8012e14:	4313      	orrs	r3, r2
 8012e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	69db      	ldr	r3, [r3, #28]
 8012e22:	4313      	orrs	r3, r2
 8012e24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	68fa      	ldr	r2, [r7, #12]
 8012e2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2200      	movs	r2, #0
 8012e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012e36:	2300      	movs	r3, #0
}
 8012e38:	4618      	mov	r0, r3
 8012e3a:	3714      	adds	r7, #20
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e42:	4770      	bx	lr

08012e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012e44:	b480      	push	{r7}
 8012e46:	b083      	sub	sp, #12
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012e4c:	bf00      	nop
 8012e4e:	370c      	adds	r7, #12
 8012e50:	46bd      	mov	sp, r7
 8012e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e56:	4770      	bx	lr

08012e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012e58:	b480      	push	{r7}
 8012e5a:	b083      	sub	sp, #12
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012e60:	bf00      	nop
 8012e62:	370c      	adds	r7, #12
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b087      	sub	sp, #28
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	f003 031f 	and.w	r3, r3, #31
 8012e7e:	2204      	movs	r2, #4
 8012e80:	fa02 f303 	lsl.w	r3, r2, r3
 8012e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	6a1a      	ldr	r2, [r3, #32]
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	43db      	mvns	r3, r3
 8012e8e:	401a      	ands	r2, r3
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	6a1a      	ldr	r2, [r3, #32]
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	f003 031f 	and.w	r3, r3, #31
 8012e9e:	6879      	ldr	r1, [r7, #4]
 8012ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8012ea4:	431a      	orrs	r2, r3
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	621a      	str	r2, [r3, #32]
}
 8012eaa:	bf00      	nop
 8012eac:	371c      	adds	r7, #28
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr

08012eb6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012eb6:	b580      	push	{r7, lr}
 8012eb8:	b082      	sub	sp, #8
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d101      	bne.n	8012ec8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	e03f      	b.n	8012f48 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d106      	bne.n	8012ee2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f7fa f819 	bl	800cf14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2224      	movs	r2, #36	; 0x24
 8012ee6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	68da      	ldr	r2, [r3, #12]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012ef8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f000 f9b2 	bl	8013264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	691a      	ldr	r2, [r3, #16]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012f0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	695a      	ldr	r2, [r3, #20]
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012f1e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	68da      	ldr	r2, [r3, #12]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012f2e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2200      	movs	r2, #0
 8012f34:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	2220      	movs	r2, #32
 8012f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2220      	movs	r2, #32
 8012f42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8012f46:	2300      	movs	r3, #0
}
 8012f48:	4618      	mov	r0, r3
 8012f4a:	3708      	adds	r7, #8
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}

08012f50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b088      	sub	sp, #32
 8012f54:	af02      	add	r7, sp, #8
 8012f56:	60f8      	str	r0, [r7, #12]
 8012f58:	60b9      	str	r1, [r7, #8]
 8012f5a:	603b      	str	r3, [r7, #0]
 8012f5c:	4613      	mov	r3, r2
 8012f5e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8012f60:	2300      	movs	r3, #0
 8012f62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012f6a:	b2db      	uxtb	r3, r3
 8012f6c:	2b20      	cmp	r3, #32
 8012f6e:	f040 8083 	bne.w	8013078 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d002      	beq.n	8012f7e <HAL_UART_Transmit+0x2e>
 8012f78:	88fb      	ldrh	r3, [r7, #6]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d101      	bne.n	8012f82 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8012f7e:	2301      	movs	r3, #1
 8012f80:	e07b      	b.n	801307a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012f88:	2b01      	cmp	r3, #1
 8012f8a:	d101      	bne.n	8012f90 <HAL_UART_Transmit+0x40>
 8012f8c:	2302      	movs	r3, #2
 8012f8e:	e074      	b.n	801307a <HAL_UART_Transmit+0x12a>
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2201      	movs	r2, #1
 8012f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	2221      	movs	r2, #33	; 0x21
 8012fa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8012fa6:	f7fb fd25 	bl	800e9f4 <HAL_GetTick>
 8012faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	88fa      	ldrh	r2, [r7, #6]
 8012fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	88fa      	ldrh	r2, [r7, #6]
 8012fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8012fc0:	e042      	b.n	8013048 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012fc6:	b29b      	uxth	r3, r3
 8012fc8:	3b01      	subs	r3, #1
 8012fca:	b29a      	uxth	r2, r3
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	689b      	ldr	r3, [r3, #8]
 8012fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012fd8:	d122      	bne.n	8013020 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	9300      	str	r3, [sp, #0]
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	2180      	movs	r1, #128	; 0x80
 8012fe4:	68f8      	ldr	r0, [r7, #12]
 8012fe6:	f000 f8f2 	bl	80131ce <UART_WaitOnFlagUntilTimeout>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d001      	beq.n	8012ff4 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8012ff0:	2303      	movs	r3, #3
 8012ff2:	e042      	b.n	801307a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	881b      	ldrh	r3, [r3, #0]
 8012ffc:	461a      	mov	r2, r3
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013006:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	691b      	ldr	r3, [r3, #16]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d103      	bne.n	8013018 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	3302      	adds	r3, #2
 8013014:	60bb      	str	r3, [r7, #8]
 8013016:	e017      	b.n	8013048 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	3301      	adds	r3, #1
 801301c:	60bb      	str	r3, [r7, #8]
 801301e:	e013      	b.n	8013048 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	9300      	str	r3, [sp, #0]
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	2200      	movs	r2, #0
 8013028:	2180      	movs	r1, #128	; 0x80
 801302a:	68f8      	ldr	r0, [r7, #12]
 801302c:	f000 f8cf 	bl	80131ce <UART_WaitOnFlagUntilTimeout>
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d001      	beq.n	801303a <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8013036:	2303      	movs	r3, #3
 8013038:	e01f      	b.n	801307a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	1c5a      	adds	r2, r3, #1
 801303e:	60ba      	str	r2, [r7, #8]
 8013040:	781a      	ldrb	r2, [r3, #0]
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801304c:	b29b      	uxth	r3, r3
 801304e:	2b00      	cmp	r3, #0
 8013050:	d1b7      	bne.n	8012fc2 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	9300      	str	r3, [sp, #0]
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	2200      	movs	r2, #0
 801305a:	2140      	movs	r1, #64	; 0x40
 801305c:	68f8      	ldr	r0, [r7, #12]
 801305e:	f000 f8b6 	bl	80131ce <UART_WaitOnFlagUntilTimeout>
 8013062:	4603      	mov	r3, r0
 8013064:	2b00      	cmp	r3, #0
 8013066:	d001      	beq.n	801306c <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8013068:	2303      	movs	r3, #3
 801306a:	e006      	b.n	801307a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2220      	movs	r2, #32
 8013070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8013074:	2300      	movs	r3, #0
 8013076:	e000      	b.n	801307a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8013078:	2302      	movs	r3, #2
  }
}
 801307a:	4618      	mov	r0, r3
 801307c:	3718      	adds	r7, #24
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}

08013082 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013082:	b580      	push	{r7, lr}
 8013084:	b088      	sub	sp, #32
 8013086:	af02      	add	r7, sp, #8
 8013088:	60f8      	str	r0, [r7, #12]
 801308a:	60b9      	str	r1, [r7, #8]
 801308c:	603b      	str	r3, [r7, #0]
 801308e:	4613      	mov	r3, r2
 8013090:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8013092:	2300      	movs	r3, #0
 8013094:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801309c:	b2db      	uxtb	r3, r3
 801309e:	2b20      	cmp	r3, #32
 80130a0:	f040 8090 	bne.w	80131c4 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d002      	beq.n	80130b0 <HAL_UART_Receive+0x2e>
 80130aa:	88fb      	ldrh	r3, [r7, #6]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d101      	bne.n	80130b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80130b0:	2301      	movs	r3, #1
 80130b2:	e088      	b.n	80131c6 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80130ba:	2b01      	cmp	r3, #1
 80130bc:	d101      	bne.n	80130c2 <HAL_UART_Receive+0x40>
 80130be:	2302      	movs	r3, #2
 80130c0:	e081      	b.n	80131c6 <HAL_UART_Receive+0x144>
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	2201      	movs	r2, #1
 80130c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	2200      	movs	r2, #0
 80130ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2222      	movs	r2, #34	; 0x22
 80130d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80130d8:	f7fb fc8c 	bl	800e9f4 <HAL_GetTick>
 80130dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	88fa      	ldrh	r2, [r7, #6]
 80130e2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	88fa      	ldrh	r2, [r7, #6]
 80130e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	2200      	movs	r2, #0
 80130ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80130f2:	e05c      	b.n	80131ae <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	3b01      	subs	r3, #1
 80130fc:	b29a      	uxth	r2, r3
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	689b      	ldr	r3, [r3, #8]
 8013106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801310a:	d12b      	bne.n	8013164 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	9300      	str	r3, [sp, #0]
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	2200      	movs	r2, #0
 8013114:	2120      	movs	r1, #32
 8013116:	68f8      	ldr	r0, [r7, #12]
 8013118:	f000 f859 	bl	80131ce <UART_WaitOnFlagUntilTimeout>
 801311c:	4603      	mov	r3, r0
 801311e:	2b00      	cmp	r3, #0
 8013120:	d001      	beq.n	8013126 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8013122:	2303      	movs	r3, #3
 8013124:	e04f      	b.n	80131c6 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	691b      	ldr	r3, [r3, #16]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d10c      	bne.n	801314c <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	685b      	ldr	r3, [r3, #4]
 8013138:	b29b      	uxth	r3, r3
 801313a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801313e:	b29a      	uxth	r2, r3
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	3302      	adds	r3, #2
 8013148:	60bb      	str	r3, [r7, #8]
 801314a:	e030      	b.n	80131ae <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	685b      	ldr	r3, [r3, #4]
 8013152:	b29b      	uxth	r3, r3
 8013154:	b2db      	uxtb	r3, r3
 8013156:	b29a      	uxth	r2, r3
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	3301      	adds	r3, #1
 8013160:	60bb      	str	r3, [r7, #8]
 8013162:	e024      	b.n	80131ae <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	9300      	str	r3, [sp, #0]
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	2200      	movs	r2, #0
 801316c:	2120      	movs	r1, #32
 801316e:	68f8      	ldr	r0, [r7, #12]
 8013170:	f000 f82d 	bl	80131ce <UART_WaitOnFlagUntilTimeout>
 8013174:	4603      	mov	r3, r0
 8013176:	2b00      	cmp	r3, #0
 8013178:	d001      	beq.n	801317e <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 801317a:	2303      	movs	r3, #3
 801317c:	e023      	b.n	80131c6 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	691b      	ldr	r3, [r3, #16]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d108      	bne.n	8013198 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	6859      	ldr	r1, [r3, #4]
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	1c5a      	adds	r2, r3, #1
 8013190:	60ba      	str	r2, [r7, #8]
 8013192:	b2ca      	uxtb	r2, r1
 8013194:	701a      	strb	r2, [r3, #0]
 8013196:	e00a      	b.n	80131ae <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	685b      	ldr	r3, [r3, #4]
 801319e:	b2da      	uxtb	r2, r3
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	1c59      	adds	r1, r3, #1
 80131a4:	60b9      	str	r1, [r7, #8]
 80131a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80131aa:	b2d2      	uxtb	r2, r2
 80131ac:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d19d      	bne.n	80130f4 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2220      	movs	r2, #32
 80131bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80131c0:	2300      	movs	r3, #0
 80131c2:	e000      	b.n	80131c6 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80131c4:	2302      	movs	r3, #2
  }
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3718      	adds	r7, #24
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80131ce:	b580      	push	{r7, lr}
 80131d0:	b084      	sub	sp, #16
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	60f8      	str	r0, [r7, #12]
 80131d6:	60b9      	str	r1, [r7, #8]
 80131d8:	603b      	str	r3, [r7, #0]
 80131da:	4613      	mov	r3, r2
 80131dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80131de:	e02c      	b.n	801323a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80131e0:	69bb      	ldr	r3, [r7, #24]
 80131e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131e6:	d028      	beq.n	801323a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80131e8:	69bb      	ldr	r3, [r7, #24]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d007      	beq.n	80131fe <UART_WaitOnFlagUntilTimeout+0x30>
 80131ee:	f7fb fc01 	bl	800e9f4 <HAL_GetTick>
 80131f2:	4602      	mov	r2, r0
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	1ad3      	subs	r3, r2, r3
 80131f8:	69ba      	ldr	r2, [r7, #24]
 80131fa:	429a      	cmp	r2, r3
 80131fc:	d21d      	bcs.n	801323a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	68da      	ldr	r2, [r3, #12]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801320c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	695a      	ldr	r2, [r3, #20]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	f022 0201 	bic.w	r2, r2, #1
 801321c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	2220      	movs	r2, #32
 8013222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2220      	movs	r2, #32
 801322a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2200      	movs	r2, #0
 8013232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8013236:	2303      	movs	r3, #3
 8013238:	e00f      	b.n	801325a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	681a      	ldr	r2, [r3, #0]
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	4013      	ands	r3, r2
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	429a      	cmp	r2, r3
 8013248:	bf0c      	ite	eq
 801324a:	2301      	moveq	r3, #1
 801324c:	2300      	movne	r3, #0
 801324e:	b2db      	uxtb	r3, r3
 8013250:	461a      	mov	r2, r3
 8013252:	79fb      	ldrb	r3, [r7, #7]
 8013254:	429a      	cmp	r2, r3
 8013256:	d0c3      	beq.n	80131e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013258:	2300      	movs	r3, #0
}
 801325a:	4618      	mov	r0, r3
 801325c:	3710      	adds	r7, #16
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
	...

08013264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013268:	b085      	sub	sp, #20
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	691b      	ldr	r3, [r3, #16]
 8013274:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	68da      	ldr	r2, [r3, #12]
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	430a      	orrs	r2, r1
 8013282:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	689a      	ldr	r2, [r3, #8]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	691b      	ldr	r3, [r3, #16]
 801328c:	431a      	orrs	r2, r3
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	695b      	ldr	r3, [r3, #20]
 8013292:	431a      	orrs	r2, r3
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	69db      	ldr	r3, [r3, #28]
 8013298:	4313      	orrs	r3, r2
 801329a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	68db      	ldr	r3, [r3, #12]
 80132a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80132a6:	f023 030c 	bic.w	r3, r3, #12
 80132aa:	687a      	ldr	r2, [r7, #4]
 80132ac:	6812      	ldr	r2, [r2, #0]
 80132ae:	68f9      	ldr	r1, [r7, #12]
 80132b0:	430b      	orrs	r3, r1
 80132b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	695b      	ldr	r3, [r3, #20]
 80132ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	699a      	ldr	r2, [r3, #24]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	430a      	orrs	r2, r1
 80132c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	69db      	ldr	r3, [r3, #28]
 80132ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80132d2:	f040 818b 	bne.w	80135ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	4ac1      	ldr	r2, [pc, #772]	; (80135e0 <UART_SetConfig+0x37c>)
 80132dc:	4293      	cmp	r3, r2
 80132de:	d005      	beq.n	80132ec <UART_SetConfig+0x88>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	4abf      	ldr	r2, [pc, #764]	; (80135e4 <UART_SetConfig+0x380>)
 80132e6:	4293      	cmp	r3, r2
 80132e8:	f040 80bd 	bne.w	8013466 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80132ec:	f7fd fce2 	bl	8010cb4 <HAL_RCC_GetPCLK2Freq>
 80132f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	461d      	mov	r5, r3
 80132f6:	f04f 0600 	mov.w	r6, #0
 80132fa:	46a8      	mov	r8, r5
 80132fc:	46b1      	mov	r9, r6
 80132fe:	eb18 0308 	adds.w	r3, r8, r8
 8013302:	eb49 0409 	adc.w	r4, r9, r9
 8013306:	4698      	mov	r8, r3
 8013308:	46a1      	mov	r9, r4
 801330a:	eb18 0805 	adds.w	r8, r8, r5
 801330e:	eb49 0906 	adc.w	r9, r9, r6
 8013312:	f04f 0100 	mov.w	r1, #0
 8013316:	f04f 0200 	mov.w	r2, #0
 801331a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801331e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013322:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013326:	4688      	mov	r8, r1
 8013328:	4691      	mov	r9, r2
 801332a:	eb18 0005 	adds.w	r0, r8, r5
 801332e:	eb49 0106 	adc.w	r1, r9, r6
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	685b      	ldr	r3, [r3, #4]
 8013336:	461d      	mov	r5, r3
 8013338:	f04f 0600 	mov.w	r6, #0
 801333c:	196b      	adds	r3, r5, r5
 801333e:	eb46 0406 	adc.w	r4, r6, r6
 8013342:	461a      	mov	r2, r3
 8013344:	4623      	mov	r3, r4
 8013346:	f7f5 fbd7 	bl	8008af8 <__aeabi_uldivmod>
 801334a:	4603      	mov	r3, r0
 801334c:	460c      	mov	r4, r1
 801334e:	461a      	mov	r2, r3
 8013350:	4ba5      	ldr	r3, [pc, #660]	; (80135e8 <UART_SetConfig+0x384>)
 8013352:	fba3 2302 	umull	r2, r3, r3, r2
 8013356:	095b      	lsrs	r3, r3, #5
 8013358:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	461d      	mov	r5, r3
 8013360:	f04f 0600 	mov.w	r6, #0
 8013364:	46a9      	mov	r9, r5
 8013366:	46b2      	mov	sl, r6
 8013368:	eb19 0309 	adds.w	r3, r9, r9
 801336c:	eb4a 040a 	adc.w	r4, sl, sl
 8013370:	4699      	mov	r9, r3
 8013372:	46a2      	mov	sl, r4
 8013374:	eb19 0905 	adds.w	r9, r9, r5
 8013378:	eb4a 0a06 	adc.w	sl, sl, r6
 801337c:	f04f 0100 	mov.w	r1, #0
 8013380:	f04f 0200 	mov.w	r2, #0
 8013384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013388:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801338c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013390:	4689      	mov	r9, r1
 8013392:	4692      	mov	sl, r2
 8013394:	eb19 0005 	adds.w	r0, r9, r5
 8013398:	eb4a 0106 	adc.w	r1, sl, r6
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	685b      	ldr	r3, [r3, #4]
 80133a0:	461d      	mov	r5, r3
 80133a2:	f04f 0600 	mov.w	r6, #0
 80133a6:	196b      	adds	r3, r5, r5
 80133a8:	eb46 0406 	adc.w	r4, r6, r6
 80133ac:	461a      	mov	r2, r3
 80133ae:	4623      	mov	r3, r4
 80133b0:	f7f5 fba2 	bl	8008af8 <__aeabi_uldivmod>
 80133b4:	4603      	mov	r3, r0
 80133b6:	460c      	mov	r4, r1
 80133b8:	461a      	mov	r2, r3
 80133ba:	4b8b      	ldr	r3, [pc, #556]	; (80135e8 <UART_SetConfig+0x384>)
 80133bc:	fba3 1302 	umull	r1, r3, r3, r2
 80133c0:	095b      	lsrs	r3, r3, #5
 80133c2:	2164      	movs	r1, #100	; 0x64
 80133c4:	fb01 f303 	mul.w	r3, r1, r3
 80133c8:	1ad3      	subs	r3, r2, r3
 80133ca:	00db      	lsls	r3, r3, #3
 80133cc:	3332      	adds	r3, #50	; 0x32
 80133ce:	4a86      	ldr	r2, [pc, #536]	; (80135e8 <UART_SetConfig+0x384>)
 80133d0:	fba2 2303 	umull	r2, r3, r2, r3
 80133d4:	095b      	lsrs	r3, r3, #5
 80133d6:	005b      	lsls	r3, r3, #1
 80133d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80133dc:	4498      	add	r8, r3
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	461d      	mov	r5, r3
 80133e2:	f04f 0600 	mov.w	r6, #0
 80133e6:	46a9      	mov	r9, r5
 80133e8:	46b2      	mov	sl, r6
 80133ea:	eb19 0309 	adds.w	r3, r9, r9
 80133ee:	eb4a 040a 	adc.w	r4, sl, sl
 80133f2:	4699      	mov	r9, r3
 80133f4:	46a2      	mov	sl, r4
 80133f6:	eb19 0905 	adds.w	r9, r9, r5
 80133fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80133fe:	f04f 0100 	mov.w	r1, #0
 8013402:	f04f 0200 	mov.w	r2, #0
 8013406:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801340a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801340e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013412:	4689      	mov	r9, r1
 8013414:	4692      	mov	sl, r2
 8013416:	eb19 0005 	adds.w	r0, r9, r5
 801341a:	eb4a 0106 	adc.w	r1, sl, r6
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	685b      	ldr	r3, [r3, #4]
 8013422:	461d      	mov	r5, r3
 8013424:	f04f 0600 	mov.w	r6, #0
 8013428:	196b      	adds	r3, r5, r5
 801342a:	eb46 0406 	adc.w	r4, r6, r6
 801342e:	461a      	mov	r2, r3
 8013430:	4623      	mov	r3, r4
 8013432:	f7f5 fb61 	bl	8008af8 <__aeabi_uldivmod>
 8013436:	4603      	mov	r3, r0
 8013438:	460c      	mov	r4, r1
 801343a:	461a      	mov	r2, r3
 801343c:	4b6a      	ldr	r3, [pc, #424]	; (80135e8 <UART_SetConfig+0x384>)
 801343e:	fba3 1302 	umull	r1, r3, r3, r2
 8013442:	095b      	lsrs	r3, r3, #5
 8013444:	2164      	movs	r1, #100	; 0x64
 8013446:	fb01 f303 	mul.w	r3, r1, r3
 801344a:	1ad3      	subs	r3, r2, r3
 801344c:	00db      	lsls	r3, r3, #3
 801344e:	3332      	adds	r3, #50	; 0x32
 8013450:	4a65      	ldr	r2, [pc, #404]	; (80135e8 <UART_SetConfig+0x384>)
 8013452:	fba2 2303 	umull	r2, r3, r2, r3
 8013456:	095b      	lsrs	r3, r3, #5
 8013458:	f003 0207 	and.w	r2, r3, #7
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	4442      	add	r2, r8
 8013462:	609a      	str	r2, [r3, #8]
 8013464:	e26f      	b.n	8013946 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8013466:	f7fd fc11 	bl	8010c8c <HAL_RCC_GetPCLK1Freq>
 801346a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	461d      	mov	r5, r3
 8013470:	f04f 0600 	mov.w	r6, #0
 8013474:	46a8      	mov	r8, r5
 8013476:	46b1      	mov	r9, r6
 8013478:	eb18 0308 	adds.w	r3, r8, r8
 801347c:	eb49 0409 	adc.w	r4, r9, r9
 8013480:	4698      	mov	r8, r3
 8013482:	46a1      	mov	r9, r4
 8013484:	eb18 0805 	adds.w	r8, r8, r5
 8013488:	eb49 0906 	adc.w	r9, r9, r6
 801348c:	f04f 0100 	mov.w	r1, #0
 8013490:	f04f 0200 	mov.w	r2, #0
 8013494:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013498:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801349c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80134a0:	4688      	mov	r8, r1
 80134a2:	4691      	mov	r9, r2
 80134a4:	eb18 0005 	adds.w	r0, r8, r5
 80134a8:	eb49 0106 	adc.w	r1, r9, r6
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	685b      	ldr	r3, [r3, #4]
 80134b0:	461d      	mov	r5, r3
 80134b2:	f04f 0600 	mov.w	r6, #0
 80134b6:	196b      	adds	r3, r5, r5
 80134b8:	eb46 0406 	adc.w	r4, r6, r6
 80134bc:	461a      	mov	r2, r3
 80134be:	4623      	mov	r3, r4
 80134c0:	f7f5 fb1a 	bl	8008af8 <__aeabi_uldivmod>
 80134c4:	4603      	mov	r3, r0
 80134c6:	460c      	mov	r4, r1
 80134c8:	461a      	mov	r2, r3
 80134ca:	4b47      	ldr	r3, [pc, #284]	; (80135e8 <UART_SetConfig+0x384>)
 80134cc:	fba3 2302 	umull	r2, r3, r3, r2
 80134d0:	095b      	lsrs	r3, r3, #5
 80134d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	461d      	mov	r5, r3
 80134da:	f04f 0600 	mov.w	r6, #0
 80134de:	46a9      	mov	r9, r5
 80134e0:	46b2      	mov	sl, r6
 80134e2:	eb19 0309 	adds.w	r3, r9, r9
 80134e6:	eb4a 040a 	adc.w	r4, sl, sl
 80134ea:	4699      	mov	r9, r3
 80134ec:	46a2      	mov	sl, r4
 80134ee:	eb19 0905 	adds.w	r9, r9, r5
 80134f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80134f6:	f04f 0100 	mov.w	r1, #0
 80134fa:	f04f 0200 	mov.w	r2, #0
 80134fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013502:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013506:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801350a:	4689      	mov	r9, r1
 801350c:	4692      	mov	sl, r2
 801350e:	eb19 0005 	adds.w	r0, r9, r5
 8013512:	eb4a 0106 	adc.w	r1, sl, r6
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	685b      	ldr	r3, [r3, #4]
 801351a:	461d      	mov	r5, r3
 801351c:	f04f 0600 	mov.w	r6, #0
 8013520:	196b      	adds	r3, r5, r5
 8013522:	eb46 0406 	adc.w	r4, r6, r6
 8013526:	461a      	mov	r2, r3
 8013528:	4623      	mov	r3, r4
 801352a:	f7f5 fae5 	bl	8008af8 <__aeabi_uldivmod>
 801352e:	4603      	mov	r3, r0
 8013530:	460c      	mov	r4, r1
 8013532:	461a      	mov	r2, r3
 8013534:	4b2c      	ldr	r3, [pc, #176]	; (80135e8 <UART_SetConfig+0x384>)
 8013536:	fba3 1302 	umull	r1, r3, r3, r2
 801353a:	095b      	lsrs	r3, r3, #5
 801353c:	2164      	movs	r1, #100	; 0x64
 801353e:	fb01 f303 	mul.w	r3, r1, r3
 8013542:	1ad3      	subs	r3, r2, r3
 8013544:	00db      	lsls	r3, r3, #3
 8013546:	3332      	adds	r3, #50	; 0x32
 8013548:	4a27      	ldr	r2, [pc, #156]	; (80135e8 <UART_SetConfig+0x384>)
 801354a:	fba2 2303 	umull	r2, r3, r2, r3
 801354e:	095b      	lsrs	r3, r3, #5
 8013550:	005b      	lsls	r3, r3, #1
 8013552:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013556:	4498      	add	r8, r3
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	461d      	mov	r5, r3
 801355c:	f04f 0600 	mov.w	r6, #0
 8013560:	46a9      	mov	r9, r5
 8013562:	46b2      	mov	sl, r6
 8013564:	eb19 0309 	adds.w	r3, r9, r9
 8013568:	eb4a 040a 	adc.w	r4, sl, sl
 801356c:	4699      	mov	r9, r3
 801356e:	46a2      	mov	sl, r4
 8013570:	eb19 0905 	adds.w	r9, r9, r5
 8013574:	eb4a 0a06 	adc.w	sl, sl, r6
 8013578:	f04f 0100 	mov.w	r1, #0
 801357c:	f04f 0200 	mov.w	r2, #0
 8013580:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013584:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013588:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801358c:	4689      	mov	r9, r1
 801358e:	4692      	mov	sl, r2
 8013590:	eb19 0005 	adds.w	r0, r9, r5
 8013594:	eb4a 0106 	adc.w	r1, sl, r6
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	685b      	ldr	r3, [r3, #4]
 801359c:	461d      	mov	r5, r3
 801359e:	f04f 0600 	mov.w	r6, #0
 80135a2:	196b      	adds	r3, r5, r5
 80135a4:	eb46 0406 	adc.w	r4, r6, r6
 80135a8:	461a      	mov	r2, r3
 80135aa:	4623      	mov	r3, r4
 80135ac:	f7f5 faa4 	bl	8008af8 <__aeabi_uldivmod>
 80135b0:	4603      	mov	r3, r0
 80135b2:	460c      	mov	r4, r1
 80135b4:	461a      	mov	r2, r3
 80135b6:	4b0c      	ldr	r3, [pc, #48]	; (80135e8 <UART_SetConfig+0x384>)
 80135b8:	fba3 1302 	umull	r1, r3, r3, r2
 80135bc:	095b      	lsrs	r3, r3, #5
 80135be:	2164      	movs	r1, #100	; 0x64
 80135c0:	fb01 f303 	mul.w	r3, r1, r3
 80135c4:	1ad3      	subs	r3, r2, r3
 80135c6:	00db      	lsls	r3, r3, #3
 80135c8:	3332      	adds	r3, #50	; 0x32
 80135ca:	4a07      	ldr	r2, [pc, #28]	; (80135e8 <UART_SetConfig+0x384>)
 80135cc:	fba2 2303 	umull	r2, r3, r2, r3
 80135d0:	095b      	lsrs	r3, r3, #5
 80135d2:	f003 0207 	and.w	r2, r3, #7
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	4442      	add	r2, r8
 80135dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80135de:	e1b2      	b.n	8013946 <UART_SetConfig+0x6e2>
 80135e0:	40011000 	.word	0x40011000
 80135e4:	40011400 	.word	0x40011400
 80135e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	4ad7      	ldr	r2, [pc, #860]	; (8013950 <UART_SetConfig+0x6ec>)
 80135f2:	4293      	cmp	r3, r2
 80135f4:	d005      	beq.n	8013602 <UART_SetConfig+0x39e>
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	4ad6      	ldr	r2, [pc, #856]	; (8013954 <UART_SetConfig+0x6f0>)
 80135fc:	4293      	cmp	r3, r2
 80135fe:	f040 80d1 	bne.w	80137a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8013602:	f7fd fb57 	bl	8010cb4 <HAL_RCC_GetPCLK2Freq>
 8013606:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	469a      	mov	sl, r3
 801360c:	f04f 0b00 	mov.w	fp, #0
 8013610:	46d0      	mov	r8, sl
 8013612:	46d9      	mov	r9, fp
 8013614:	eb18 0308 	adds.w	r3, r8, r8
 8013618:	eb49 0409 	adc.w	r4, r9, r9
 801361c:	4698      	mov	r8, r3
 801361e:	46a1      	mov	r9, r4
 8013620:	eb18 080a 	adds.w	r8, r8, sl
 8013624:	eb49 090b 	adc.w	r9, r9, fp
 8013628:	f04f 0100 	mov.w	r1, #0
 801362c:	f04f 0200 	mov.w	r2, #0
 8013630:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8013634:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8013638:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801363c:	4688      	mov	r8, r1
 801363e:	4691      	mov	r9, r2
 8013640:	eb1a 0508 	adds.w	r5, sl, r8
 8013644:	eb4b 0609 	adc.w	r6, fp, r9
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	685b      	ldr	r3, [r3, #4]
 801364c:	4619      	mov	r1, r3
 801364e:	f04f 0200 	mov.w	r2, #0
 8013652:	f04f 0300 	mov.w	r3, #0
 8013656:	f04f 0400 	mov.w	r4, #0
 801365a:	0094      	lsls	r4, r2, #2
 801365c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013660:	008b      	lsls	r3, r1, #2
 8013662:	461a      	mov	r2, r3
 8013664:	4623      	mov	r3, r4
 8013666:	4628      	mov	r0, r5
 8013668:	4631      	mov	r1, r6
 801366a:	f7f5 fa45 	bl	8008af8 <__aeabi_uldivmod>
 801366e:	4603      	mov	r3, r0
 8013670:	460c      	mov	r4, r1
 8013672:	461a      	mov	r2, r3
 8013674:	4bb8      	ldr	r3, [pc, #736]	; (8013958 <UART_SetConfig+0x6f4>)
 8013676:	fba3 2302 	umull	r2, r3, r3, r2
 801367a:	095b      	lsrs	r3, r3, #5
 801367c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013680:	68bb      	ldr	r3, [r7, #8]
 8013682:	469b      	mov	fp, r3
 8013684:	f04f 0c00 	mov.w	ip, #0
 8013688:	46d9      	mov	r9, fp
 801368a:	46e2      	mov	sl, ip
 801368c:	eb19 0309 	adds.w	r3, r9, r9
 8013690:	eb4a 040a 	adc.w	r4, sl, sl
 8013694:	4699      	mov	r9, r3
 8013696:	46a2      	mov	sl, r4
 8013698:	eb19 090b 	adds.w	r9, r9, fp
 801369c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80136a0:	f04f 0100 	mov.w	r1, #0
 80136a4:	f04f 0200 	mov.w	r2, #0
 80136a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80136ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80136b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80136b4:	4689      	mov	r9, r1
 80136b6:	4692      	mov	sl, r2
 80136b8:	eb1b 0509 	adds.w	r5, fp, r9
 80136bc:	eb4c 060a 	adc.w	r6, ip, sl
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	4619      	mov	r1, r3
 80136c6:	f04f 0200 	mov.w	r2, #0
 80136ca:	f04f 0300 	mov.w	r3, #0
 80136ce:	f04f 0400 	mov.w	r4, #0
 80136d2:	0094      	lsls	r4, r2, #2
 80136d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80136d8:	008b      	lsls	r3, r1, #2
 80136da:	461a      	mov	r2, r3
 80136dc:	4623      	mov	r3, r4
 80136de:	4628      	mov	r0, r5
 80136e0:	4631      	mov	r1, r6
 80136e2:	f7f5 fa09 	bl	8008af8 <__aeabi_uldivmod>
 80136e6:	4603      	mov	r3, r0
 80136e8:	460c      	mov	r4, r1
 80136ea:	461a      	mov	r2, r3
 80136ec:	4b9a      	ldr	r3, [pc, #616]	; (8013958 <UART_SetConfig+0x6f4>)
 80136ee:	fba3 1302 	umull	r1, r3, r3, r2
 80136f2:	095b      	lsrs	r3, r3, #5
 80136f4:	2164      	movs	r1, #100	; 0x64
 80136f6:	fb01 f303 	mul.w	r3, r1, r3
 80136fa:	1ad3      	subs	r3, r2, r3
 80136fc:	011b      	lsls	r3, r3, #4
 80136fe:	3332      	adds	r3, #50	; 0x32
 8013700:	4a95      	ldr	r2, [pc, #596]	; (8013958 <UART_SetConfig+0x6f4>)
 8013702:	fba2 2303 	umull	r2, r3, r2, r3
 8013706:	095b      	lsrs	r3, r3, #5
 8013708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801370c:	4498      	add	r8, r3
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	469b      	mov	fp, r3
 8013712:	f04f 0c00 	mov.w	ip, #0
 8013716:	46d9      	mov	r9, fp
 8013718:	46e2      	mov	sl, ip
 801371a:	eb19 0309 	adds.w	r3, r9, r9
 801371e:	eb4a 040a 	adc.w	r4, sl, sl
 8013722:	4699      	mov	r9, r3
 8013724:	46a2      	mov	sl, r4
 8013726:	eb19 090b 	adds.w	r9, r9, fp
 801372a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801372e:	f04f 0100 	mov.w	r1, #0
 8013732:	f04f 0200 	mov.w	r2, #0
 8013736:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801373a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801373e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013742:	4689      	mov	r9, r1
 8013744:	4692      	mov	sl, r2
 8013746:	eb1b 0509 	adds.w	r5, fp, r9
 801374a:	eb4c 060a 	adc.w	r6, ip, sl
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	4619      	mov	r1, r3
 8013754:	f04f 0200 	mov.w	r2, #0
 8013758:	f04f 0300 	mov.w	r3, #0
 801375c:	f04f 0400 	mov.w	r4, #0
 8013760:	0094      	lsls	r4, r2, #2
 8013762:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013766:	008b      	lsls	r3, r1, #2
 8013768:	461a      	mov	r2, r3
 801376a:	4623      	mov	r3, r4
 801376c:	4628      	mov	r0, r5
 801376e:	4631      	mov	r1, r6
 8013770:	f7f5 f9c2 	bl	8008af8 <__aeabi_uldivmod>
 8013774:	4603      	mov	r3, r0
 8013776:	460c      	mov	r4, r1
 8013778:	461a      	mov	r2, r3
 801377a:	4b77      	ldr	r3, [pc, #476]	; (8013958 <UART_SetConfig+0x6f4>)
 801377c:	fba3 1302 	umull	r1, r3, r3, r2
 8013780:	095b      	lsrs	r3, r3, #5
 8013782:	2164      	movs	r1, #100	; 0x64
 8013784:	fb01 f303 	mul.w	r3, r1, r3
 8013788:	1ad3      	subs	r3, r2, r3
 801378a:	011b      	lsls	r3, r3, #4
 801378c:	3332      	adds	r3, #50	; 0x32
 801378e:	4a72      	ldr	r2, [pc, #456]	; (8013958 <UART_SetConfig+0x6f4>)
 8013790:	fba2 2303 	umull	r2, r3, r2, r3
 8013794:	095b      	lsrs	r3, r3, #5
 8013796:	f003 020f 	and.w	r2, r3, #15
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	4442      	add	r2, r8
 80137a0:	609a      	str	r2, [r3, #8]
 80137a2:	e0d0      	b.n	8013946 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80137a4:	f7fd fa72 	bl	8010c8c <HAL_RCC_GetPCLK1Freq>
 80137a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	469a      	mov	sl, r3
 80137ae:	f04f 0b00 	mov.w	fp, #0
 80137b2:	46d0      	mov	r8, sl
 80137b4:	46d9      	mov	r9, fp
 80137b6:	eb18 0308 	adds.w	r3, r8, r8
 80137ba:	eb49 0409 	adc.w	r4, r9, r9
 80137be:	4698      	mov	r8, r3
 80137c0:	46a1      	mov	r9, r4
 80137c2:	eb18 080a 	adds.w	r8, r8, sl
 80137c6:	eb49 090b 	adc.w	r9, r9, fp
 80137ca:	f04f 0100 	mov.w	r1, #0
 80137ce:	f04f 0200 	mov.w	r2, #0
 80137d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80137d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80137da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80137de:	4688      	mov	r8, r1
 80137e0:	4691      	mov	r9, r2
 80137e2:	eb1a 0508 	adds.w	r5, sl, r8
 80137e6:	eb4b 0609 	adc.w	r6, fp, r9
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	4619      	mov	r1, r3
 80137f0:	f04f 0200 	mov.w	r2, #0
 80137f4:	f04f 0300 	mov.w	r3, #0
 80137f8:	f04f 0400 	mov.w	r4, #0
 80137fc:	0094      	lsls	r4, r2, #2
 80137fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013802:	008b      	lsls	r3, r1, #2
 8013804:	461a      	mov	r2, r3
 8013806:	4623      	mov	r3, r4
 8013808:	4628      	mov	r0, r5
 801380a:	4631      	mov	r1, r6
 801380c:	f7f5 f974 	bl	8008af8 <__aeabi_uldivmod>
 8013810:	4603      	mov	r3, r0
 8013812:	460c      	mov	r4, r1
 8013814:	461a      	mov	r2, r3
 8013816:	4b50      	ldr	r3, [pc, #320]	; (8013958 <UART_SetConfig+0x6f4>)
 8013818:	fba3 2302 	umull	r2, r3, r3, r2
 801381c:	095b      	lsrs	r3, r3, #5
 801381e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	469b      	mov	fp, r3
 8013826:	f04f 0c00 	mov.w	ip, #0
 801382a:	46d9      	mov	r9, fp
 801382c:	46e2      	mov	sl, ip
 801382e:	eb19 0309 	adds.w	r3, r9, r9
 8013832:	eb4a 040a 	adc.w	r4, sl, sl
 8013836:	4699      	mov	r9, r3
 8013838:	46a2      	mov	sl, r4
 801383a:	eb19 090b 	adds.w	r9, r9, fp
 801383e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8013842:	f04f 0100 	mov.w	r1, #0
 8013846:	f04f 0200 	mov.w	r2, #0
 801384a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801384e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8013852:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8013856:	4689      	mov	r9, r1
 8013858:	4692      	mov	sl, r2
 801385a:	eb1b 0509 	adds.w	r5, fp, r9
 801385e:	eb4c 060a 	adc.w	r6, ip, sl
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	685b      	ldr	r3, [r3, #4]
 8013866:	4619      	mov	r1, r3
 8013868:	f04f 0200 	mov.w	r2, #0
 801386c:	f04f 0300 	mov.w	r3, #0
 8013870:	f04f 0400 	mov.w	r4, #0
 8013874:	0094      	lsls	r4, r2, #2
 8013876:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801387a:	008b      	lsls	r3, r1, #2
 801387c:	461a      	mov	r2, r3
 801387e:	4623      	mov	r3, r4
 8013880:	4628      	mov	r0, r5
 8013882:	4631      	mov	r1, r6
 8013884:	f7f5 f938 	bl	8008af8 <__aeabi_uldivmod>
 8013888:	4603      	mov	r3, r0
 801388a:	460c      	mov	r4, r1
 801388c:	461a      	mov	r2, r3
 801388e:	4b32      	ldr	r3, [pc, #200]	; (8013958 <UART_SetConfig+0x6f4>)
 8013890:	fba3 1302 	umull	r1, r3, r3, r2
 8013894:	095b      	lsrs	r3, r3, #5
 8013896:	2164      	movs	r1, #100	; 0x64
 8013898:	fb01 f303 	mul.w	r3, r1, r3
 801389c:	1ad3      	subs	r3, r2, r3
 801389e:	011b      	lsls	r3, r3, #4
 80138a0:	3332      	adds	r3, #50	; 0x32
 80138a2:	4a2d      	ldr	r2, [pc, #180]	; (8013958 <UART_SetConfig+0x6f4>)
 80138a4:	fba2 2303 	umull	r2, r3, r2, r3
 80138a8:	095b      	lsrs	r3, r3, #5
 80138aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80138ae:	4498      	add	r8, r3
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	469b      	mov	fp, r3
 80138b4:	f04f 0c00 	mov.w	ip, #0
 80138b8:	46d9      	mov	r9, fp
 80138ba:	46e2      	mov	sl, ip
 80138bc:	eb19 0309 	adds.w	r3, r9, r9
 80138c0:	eb4a 040a 	adc.w	r4, sl, sl
 80138c4:	4699      	mov	r9, r3
 80138c6:	46a2      	mov	sl, r4
 80138c8:	eb19 090b 	adds.w	r9, r9, fp
 80138cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80138d0:	f04f 0100 	mov.w	r1, #0
 80138d4:	f04f 0200 	mov.w	r2, #0
 80138d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80138dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80138e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80138e4:	4689      	mov	r9, r1
 80138e6:	4692      	mov	sl, r2
 80138e8:	eb1b 0509 	adds.w	r5, fp, r9
 80138ec:	eb4c 060a 	adc.w	r6, ip, sl
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	685b      	ldr	r3, [r3, #4]
 80138f4:	4619      	mov	r1, r3
 80138f6:	f04f 0200 	mov.w	r2, #0
 80138fa:	f04f 0300 	mov.w	r3, #0
 80138fe:	f04f 0400 	mov.w	r4, #0
 8013902:	0094      	lsls	r4, r2, #2
 8013904:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8013908:	008b      	lsls	r3, r1, #2
 801390a:	461a      	mov	r2, r3
 801390c:	4623      	mov	r3, r4
 801390e:	4628      	mov	r0, r5
 8013910:	4631      	mov	r1, r6
 8013912:	f7f5 f8f1 	bl	8008af8 <__aeabi_uldivmod>
 8013916:	4603      	mov	r3, r0
 8013918:	460c      	mov	r4, r1
 801391a:	461a      	mov	r2, r3
 801391c:	4b0e      	ldr	r3, [pc, #56]	; (8013958 <UART_SetConfig+0x6f4>)
 801391e:	fba3 1302 	umull	r1, r3, r3, r2
 8013922:	095b      	lsrs	r3, r3, #5
 8013924:	2164      	movs	r1, #100	; 0x64
 8013926:	fb01 f303 	mul.w	r3, r1, r3
 801392a:	1ad3      	subs	r3, r2, r3
 801392c:	011b      	lsls	r3, r3, #4
 801392e:	3332      	adds	r3, #50	; 0x32
 8013930:	4a09      	ldr	r2, [pc, #36]	; (8013958 <UART_SetConfig+0x6f4>)
 8013932:	fba2 2303 	umull	r2, r3, r2, r3
 8013936:	095b      	lsrs	r3, r3, #5
 8013938:	f003 020f 	and.w	r2, r3, #15
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	4442      	add	r2, r8
 8013942:	609a      	str	r2, [r3, #8]
}
 8013944:	e7ff      	b.n	8013946 <UART_SetConfig+0x6e2>
 8013946:	bf00      	nop
 8013948:	3714      	adds	r7, #20
 801394a:	46bd      	mov	sp, r7
 801394c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013950:	40011000 	.word	0x40011000
 8013954:	40011400 	.word	0x40011400
 8013958:	51eb851f 	.word	0x51eb851f

0801395c <round>:
 801395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801395e:	ec57 6b10 	vmov	r6, r7, d0
 8013962:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8013966:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801396a:	2c13      	cmp	r4, #19
 801396c:	463b      	mov	r3, r7
 801396e:	463d      	mov	r5, r7
 8013970:	dc17      	bgt.n	80139a2 <round+0x46>
 8013972:	2c00      	cmp	r4, #0
 8013974:	da09      	bge.n	801398a <round+0x2e>
 8013976:	3401      	adds	r4, #1
 8013978:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 801397c:	d103      	bne.n	8013986 <round+0x2a>
 801397e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013982:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013986:	2100      	movs	r1, #0
 8013988:	e02c      	b.n	80139e4 <round+0x88>
 801398a:	4a18      	ldr	r2, [pc, #96]	; (80139ec <round+0x90>)
 801398c:	4122      	asrs	r2, r4
 801398e:	4217      	tst	r7, r2
 8013990:	d100      	bne.n	8013994 <round+0x38>
 8013992:	b19e      	cbz	r6, 80139bc <round+0x60>
 8013994:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013998:	4123      	asrs	r3, r4
 801399a:	442b      	add	r3, r5
 801399c:	ea23 0302 	bic.w	r3, r3, r2
 80139a0:	e7f1      	b.n	8013986 <round+0x2a>
 80139a2:	2c33      	cmp	r4, #51	; 0x33
 80139a4:	dd0d      	ble.n	80139c2 <round+0x66>
 80139a6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80139aa:	d107      	bne.n	80139bc <round+0x60>
 80139ac:	4630      	mov	r0, r6
 80139ae:	4639      	mov	r1, r7
 80139b0:	ee10 2a10 	vmov	r2, s0
 80139b4:	f7f4 fba2 	bl	80080fc <__adddf3>
 80139b8:	4606      	mov	r6, r0
 80139ba:	460f      	mov	r7, r1
 80139bc:	ec47 6b10 	vmov	d0, r6, r7
 80139c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139c2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80139c6:	f04f 30ff 	mov.w	r0, #4294967295
 80139ca:	40d0      	lsrs	r0, r2
 80139cc:	4206      	tst	r6, r0
 80139ce:	d0f5      	beq.n	80139bc <round+0x60>
 80139d0:	2201      	movs	r2, #1
 80139d2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80139d6:	fa02 f404 	lsl.w	r4, r2, r4
 80139da:	1931      	adds	r1, r6, r4
 80139dc:	bf28      	it	cs
 80139de:	189b      	addcs	r3, r3, r2
 80139e0:	ea21 0100 	bic.w	r1, r1, r0
 80139e4:	461f      	mov	r7, r3
 80139e6:	460e      	mov	r6, r1
 80139e8:	e7e8      	b.n	80139bc <round+0x60>
 80139ea:	bf00      	nop
 80139ec:	000fffff 	.word	0x000fffff

080139f0 <__errno>:
 80139f0:	4b01      	ldr	r3, [pc, #4]	; (80139f8 <__errno+0x8>)
 80139f2:	6818      	ldr	r0, [r3, #0]
 80139f4:	4770      	bx	lr
 80139f6:	bf00      	nop
 80139f8:	2000003c 	.word	0x2000003c

080139fc <__sflush_r>:
 80139fc:	898a      	ldrh	r2, [r1, #12]
 80139fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a02:	4605      	mov	r5, r0
 8013a04:	0710      	lsls	r0, r2, #28
 8013a06:	460c      	mov	r4, r1
 8013a08:	d458      	bmi.n	8013abc <__sflush_r+0xc0>
 8013a0a:	684b      	ldr	r3, [r1, #4]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	dc05      	bgt.n	8013a1c <__sflush_r+0x20>
 8013a10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	dc02      	bgt.n	8013a1c <__sflush_r+0x20>
 8013a16:	2000      	movs	r0, #0
 8013a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a1e:	2e00      	cmp	r6, #0
 8013a20:	d0f9      	beq.n	8013a16 <__sflush_r+0x1a>
 8013a22:	2300      	movs	r3, #0
 8013a24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013a28:	682f      	ldr	r7, [r5, #0]
 8013a2a:	6a21      	ldr	r1, [r4, #32]
 8013a2c:	602b      	str	r3, [r5, #0]
 8013a2e:	d032      	beq.n	8013a96 <__sflush_r+0x9a>
 8013a30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a32:	89a3      	ldrh	r3, [r4, #12]
 8013a34:	075a      	lsls	r2, r3, #29
 8013a36:	d505      	bpl.n	8013a44 <__sflush_r+0x48>
 8013a38:	6863      	ldr	r3, [r4, #4]
 8013a3a:	1ac0      	subs	r0, r0, r3
 8013a3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a3e:	b10b      	cbz	r3, 8013a44 <__sflush_r+0x48>
 8013a40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a42:	1ac0      	subs	r0, r0, r3
 8013a44:	2300      	movs	r3, #0
 8013a46:	4602      	mov	r2, r0
 8013a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a4a:	6a21      	ldr	r1, [r4, #32]
 8013a4c:	4628      	mov	r0, r5
 8013a4e:	47b0      	blx	r6
 8013a50:	1c43      	adds	r3, r0, #1
 8013a52:	89a3      	ldrh	r3, [r4, #12]
 8013a54:	d106      	bne.n	8013a64 <__sflush_r+0x68>
 8013a56:	6829      	ldr	r1, [r5, #0]
 8013a58:	291d      	cmp	r1, #29
 8013a5a:	d848      	bhi.n	8013aee <__sflush_r+0xf2>
 8013a5c:	4a29      	ldr	r2, [pc, #164]	; (8013b04 <__sflush_r+0x108>)
 8013a5e:	40ca      	lsrs	r2, r1
 8013a60:	07d6      	lsls	r6, r2, #31
 8013a62:	d544      	bpl.n	8013aee <__sflush_r+0xf2>
 8013a64:	2200      	movs	r2, #0
 8013a66:	6062      	str	r2, [r4, #4]
 8013a68:	04d9      	lsls	r1, r3, #19
 8013a6a:	6922      	ldr	r2, [r4, #16]
 8013a6c:	6022      	str	r2, [r4, #0]
 8013a6e:	d504      	bpl.n	8013a7a <__sflush_r+0x7e>
 8013a70:	1c42      	adds	r2, r0, #1
 8013a72:	d101      	bne.n	8013a78 <__sflush_r+0x7c>
 8013a74:	682b      	ldr	r3, [r5, #0]
 8013a76:	b903      	cbnz	r3, 8013a7a <__sflush_r+0x7e>
 8013a78:	6560      	str	r0, [r4, #84]	; 0x54
 8013a7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a7c:	602f      	str	r7, [r5, #0]
 8013a7e:	2900      	cmp	r1, #0
 8013a80:	d0c9      	beq.n	8013a16 <__sflush_r+0x1a>
 8013a82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a86:	4299      	cmp	r1, r3
 8013a88:	d002      	beq.n	8013a90 <__sflush_r+0x94>
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	f000 f9fa 	bl	8013e84 <_free_r>
 8013a90:	2000      	movs	r0, #0
 8013a92:	6360      	str	r0, [r4, #52]	; 0x34
 8013a94:	e7c0      	b.n	8013a18 <__sflush_r+0x1c>
 8013a96:	2301      	movs	r3, #1
 8013a98:	4628      	mov	r0, r5
 8013a9a:	47b0      	blx	r6
 8013a9c:	1c41      	adds	r1, r0, #1
 8013a9e:	d1c8      	bne.n	8013a32 <__sflush_r+0x36>
 8013aa0:	682b      	ldr	r3, [r5, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d0c5      	beq.n	8013a32 <__sflush_r+0x36>
 8013aa6:	2b1d      	cmp	r3, #29
 8013aa8:	d001      	beq.n	8013aae <__sflush_r+0xb2>
 8013aaa:	2b16      	cmp	r3, #22
 8013aac:	d101      	bne.n	8013ab2 <__sflush_r+0xb6>
 8013aae:	602f      	str	r7, [r5, #0]
 8013ab0:	e7b1      	b.n	8013a16 <__sflush_r+0x1a>
 8013ab2:	89a3      	ldrh	r3, [r4, #12]
 8013ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ab8:	81a3      	strh	r3, [r4, #12]
 8013aba:	e7ad      	b.n	8013a18 <__sflush_r+0x1c>
 8013abc:	690f      	ldr	r7, [r1, #16]
 8013abe:	2f00      	cmp	r7, #0
 8013ac0:	d0a9      	beq.n	8013a16 <__sflush_r+0x1a>
 8013ac2:	0793      	lsls	r3, r2, #30
 8013ac4:	680e      	ldr	r6, [r1, #0]
 8013ac6:	bf08      	it	eq
 8013ac8:	694b      	ldreq	r3, [r1, #20]
 8013aca:	600f      	str	r7, [r1, #0]
 8013acc:	bf18      	it	ne
 8013ace:	2300      	movne	r3, #0
 8013ad0:	eba6 0807 	sub.w	r8, r6, r7
 8013ad4:	608b      	str	r3, [r1, #8]
 8013ad6:	f1b8 0f00 	cmp.w	r8, #0
 8013ada:	dd9c      	ble.n	8013a16 <__sflush_r+0x1a>
 8013adc:	4643      	mov	r3, r8
 8013ade:	463a      	mov	r2, r7
 8013ae0:	6a21      	ldr	r1, [r4, #32]
 8013ae2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013ae4:	4628      	mov	r0, r5
 8013ae6:	47b0      	blx	r6
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	dc06      	bgt.n	8013afa <__sflush_r+0xfe>
 8013aec:	89a3      	ldrh	r3, [r4, #12]
 8013aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013af2:	81a3      	strh	r3, [r4, #12]
 8013af4:	f04f 30ff 	mov.w	r0, #4294967295
 8013af8:	e78e      	b.n	8013a18 <__sflush_r+0x1c>
 8013afa:	4407      	add	r7, r0
 8013afc:	eba8 0800 	sub.w	r8, r8, r0
 8013b00:	e7e9      	b.n	8013ad6 <__sflush_r+0xda>
 8013b02:	bf00      	nop
 8013b04:	20400001 	.word	0x20400001

08013b08 <_fflush_r>:
 8013b08:	b538      	push	{r3, r4, r5, lr}
 8013b0a:	690b      	ldr	r3, [r1, #16]
 8013b0c:	4605      	mov	r5, r0
 8013b0e:	460c      	mov	r4, r1
 8013b10:	b1db      	cbz	r3, 8013b4a <_fflush_r+0x42>
 8013b12:	b118      	cbz	r0, 8013b1c <_fflush_r+0x14>
 8013b14:	6983      	ldr	r3, [r0, #24]
 8013b16:	b90b      	cbnz	r3, 8013b1c <_fflush_r+0x14>
 8013b18:	f000 f872 	bl	8013c00 <__sinit>
 8013b1c:	4b0c      	ldr	r3, [pc, #48]	; (8013b50 <_fflush_r+0x48>)
 8013b1e:	429c      	cmp	r4, r3
 8013b20:	d109      	bne.n	8013b36 <_fflush_r+0x2e>
 8013b22:	686c      	ldr	r4, [r5, #4]
 8013b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b28:	b17b      	cbz	r3, 8013b4a <_fflush_r+0x42>
 8013b2a:	4621      	mov	r1, r4
 8013b2c:	4628      	mov	r0, r5
 8013b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b32:	f7ff bf63 	b.w	80139fc <__sflush_r>
 8013b36:	4b07      	ldr	r3, [pc, #28]	; (8013b54 <_fflush_r+0x4c>)
 8013b38:	429c      	cmp	r4, r3
 8013b3a:	d101      	bne.n	8013b40 <_fflush_r+0x38>
 8013b3c:	68ac      	ldr	r4, [r5, #8]
 8013b3e:	e7f1      	b.n	8013b24 <_fflush_r+0x1c>
 8013b40:	4b05      	ldr	r3, [pc, #20]	; (8013b58 <_fflush_r+0x50>)
 8013b42:	429c      	cmp	r4, r3
 8013b44:	bf08      	it	eq
 8013b46:	68ec      	ldreq	r4, [r5, #12]
 8013b48:	e7ec      	b.n	8013b24 <_fflush_r+0x1c>
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	bd38      	pop	{r3, r4, r5, pc}
 8013b4e:	bf00      	nop
 8013b50:	08019218 	.word	0x08019218
 8013b54:	08019238 	.word	0x08019238
 8013b58:	080191f8 	.word	0x080191f8

08013b5c <fflush>:
 8013b5c:	4601      	mov	r1, r0
 8013b5e:	b920      	cbnz	r0, 8013b6a <fflush+0xe>
 8013b60:	4b04      	ldr	r3, [pc, #16]	; (8013b74 <fflush+0x18>)
 8013b62:	4905      	ldr	r1, [pc, #20]	; (8013b78 <fflush+0x1c>)
 8013b64:	6818      	ldr	r0, [r3, #0]
 8013b66:	f000 b8d3 	b.w	8013d10 <_fwalk_reent>
 8013b6a:	4b04      	ldr	r3, [pc, #16]	; (8013b7c <fflush+0x20>)
 8013b6c:	6818      	ldr	r0, [r3, #0]
 8013b6e:	f7ff bfcb 	b.w	8013b08 <_fflush_r>
 8013b72:	bf00      	nop
 8013b74:	08019258 	.word	0x08019258
 8013b78:	08013b09 	.word	0x08013b09
 8013b7c:	2000003c 	.word	0x2000003c

08013b80 <std>:
 8013b80:	2300      	movs	r3, #0
 8013b82:	b510      	push	{r4, lr}
 8013b84:	4604      	mov	r4, r0
 8013b86:	e9c0 3300 	strd	r3, r3, [r0]
 8013b8a:	6083      	str	r3, [r0, #8]
 8013b8c:	8181      	strh	r1, [r0, #12]
 8013b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8013b90:	81c2      	strh	r2, [r0, #14]
 8013b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013b96:	6183      	str	r3, [r0, #24]
 8013b98:	4619      	mov	r1, r3
 8013b9a:	2208      	movs	r2, #8
 8013b9c:	305c      	adds	r0, #92	; 0x5c
 8013b9e:	f000 f968 	bl	8013e72 <memset>
 8013ba2:	4b05      	ldr	r3, [pc, #20]	; (8013bb8 <std+0x38>)
 8013ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8013ba6:	4b05      	ldr	r3, [pc, #20]	; (8013bbc <std+0x3c>)
 8013ba8:	62a3      	str	r3, [r4, #40]	; 0x28
 8013baa:	4b05      	ldr	r3, [pc, #20]	; (8013bc0 <std+0x40>)
 8013bac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013bae:	4b05      	ldr	r3, [pc, #20]	; (8013bc4 <std+0x44>)
 8013bb0:	6224      	str	r4, [r4, #32]
 8013bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8013bb4:	bd10      	pop	{r4, pc}
 8013bb6:	bf00      	nop
 8013bb8:	08015be5 	.word	0x08015be5
 8013bbc:	08015c07 	.word	0x08015c07
 8013bc0:	08015c3f 	.word	0x08015c3f
 8013bc4:	08015c63 	.word	0x08015c63

08013bc8 <_cleanup_r>:
 8013bc8:	4901      	ldr	r1, [pc, #4]	; (8013bd0 <_cleanup_r+0x8>)
 8013bca:	f000 b8a1 	b.w	8013d10 <_fwalk_reent>
 8013bce:	bf00      	nop
 8013bd0:	08013b09 	.word	0x08013b09

08013bd4 <__sfmoreglue>:
 8013bd4:	b570      	push	{r4, r5, r6, lr}
 8013bd6:	1e4a      	subs	r2, r1, #1
 8013bd8:	2568      	movs	r5, #104	; 0x68
 8013bda:	4355      	muls	r5, r2
 8013bdc:	460e      	mov	r6, r1
 8013bde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013be2:	f000 f99d 	bl	8013f20 <_malloc_r>
 8013be6:	4604      	mov	r4, r0
 8013be8:	b140      	cbz	r0, 8013bfc <__sfmoreglue+0x28>
 8013bea:	2100      	movs	r1, #0
 8013bec:	e9c0 1600 	strd	r1, r6, [r0]
 8013bf0:	300c      	adds	r0, #12
 8013bf2:	60a0      	str	r0, [r4, #8]
 8013bf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013bf8:	f000 f93b 	bl	8013e72 <memset>
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	bd70      	pop	{r4, r5, r6, pc}

08013c00 <__sinit>:
 8013c00:	6983      	ldr	r3, [r0, #24]
 8013c02:	b510      	push	{r4, lr}
 8013c04:	4604      	mov	r4, r0
 8013c06:	bb33      	cbnz	r3, 8013c56 <__sinit+0x56>
 8013c08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013c0c:	6503      	str	r3, [r0, #80]	; 0x50
 8013c0e:	4b12      	ldr	r3, [pc, #72]	; (8013c58 <__sinit+0x58>)
 8013c10:	4a12      	ldr	r2, [pc, #72]	; (8013c5c <__sinit+0x5c>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	6282      	str	r2, [r0, #40]	; 0x28
 8013c16:	4298      	cmp	r0, r3
 8013c18:	bf04      	itt	eq
 8013c1a:	2301      	moveq	r3, #1
 8013c1c:	6183      	streq	r3, [r0, #24]
 8013c1e:	f000 f81f 	bl	8013c60 <__sfp>
 8013c22:	6060      	str	r0, [r4, #4]
 8013c24:	4620      	mov	r0, r4
 8013c26:	f000 f81b 	bl	8013c60 <__sfp>
 8013c2a:	60a0      	str	r0, [r4, #8]
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	f000 f817 	bl	8013c60 <__sfp>
 8013c32:	2200      	movs	r2, #0
 8013c34:	60e0      	str	r0, [r4, #12]
 8013c36:	2104      	movs	r1, #4
 8013c38:	6860      	ldr	r0, [r4, #4]
 8013c3a:	f7ff ffa1 	bl	8013b80 <std>
 8013c3e:	2201      	movs	r2, #1
 8013c40:	2109      	movs	r1, #9
 8013c42:	68a0      	ldr	r0, [r4, #8]
 8013c44:	f7ff ff9c 	bl	8013b80 <std>
 8013c48:	2202      	movs	r2, #2
 8013c4a:	2112      	movs	r1, #18
 8013c4c:	68e0      	ldr	r0, [r4, #12]
 8013c4e:	f7ff ff97 	bl	8013b80 <std>
 8013c52:	2301      	movs	r3, #1
 8013c54:	61a3      	str	r3, [r4, #24]
 8013c56:	bd10      	pop	{r4, pc}
 8013c58:	08019258 	.word	0x08019258
 8013c5c:	08013bc9 	.word	0x08013bc9

08013c60 <__sfp>:
 8013c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c62:	4b1b      	ldr	r3, [pc, #108]	; (8013cd0 <__sfp+0x70>)
 8013c64:	681e      	ldr	r6, [r3, #0]
 8013c66:	69b3      	ldr	r3, [r6, #24]
 8013c68:	4607      	mov	r7, r0
 8013c6a:	b913      	cbnz	r3, 8013c72 <__sfp+0x12>
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	f7ff ffc7 	bl	8013c00 <__sinit>
 8013c72:	3648      	adds	r6, #72	; 0x48
 8013c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013c78:	3b01      	subs	r3, #1
 8013c7a:	d503      	bpl.n	8013c84 <__sfp+0x24>
 8013c7c:	6833      	ldr	r3, [r6, #0]
 8013c7e:	b133      	cbz	r3, 8013c8e <__sfp+0x2e>
 8013c80:	6836      	ldr	r6, [r6, #0]
 8013c82:	e7f7      	b.n	8013c74 <__sfp+0x14>
 8013c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c88:	b16d      	cbz	r5, 8013ca6 <__sfp+0x46>
 8013c8a:	3468      	adds	r4, #104	; 0x68
 8013c8c:	e7f4      	b.n	8013c78 <__sfp+0x18>
 8013c8e:	2104      	movs	r1, #4
 8013c90:	4638      	mov	r0, r7
 8013c92:	f7ff ff9f 	bl	8013bd4 <__sfmoreglue>
 8013c96:	6030      	str	r0, [r6, #0]
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	d1f1      	bne.n	8013c80 <__sfp+0x20>
 8013c9c:	230c      	movs	r3, #12
 8013c9e:	603b      	str	r3, [r7, #0]
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ca6:	4b0b      	ldr	r3, [pc, #44]	; (8013cd4 <__sfp+0x74>)
 8013ca8:	6665      	str	r5, [r4, #100]	; 0x64
 8013caa:	e9c4 5500 	strd	r5, r5, [r4]
 8013cae:	60a5      	str	r5, [r4, #8]
 8013cb0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013cb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013cb8:	2208      	movs	r2, #8
 8013cba:	4629      	mov	r1, r5
 8013cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013cc0:	f000 f8d7 	bl	8013e72 <memset>
 8013cc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013cc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013ccc:	e7e9      	b.n	8013ca2 <__sfp+0x42>
 8013cce:	bf00      	nop
 8013cd0:	08019258 	.word	0x08019258
 8013cd4:	ffff0001 	.word	0xffff0001

08013cd8 <_fwalk>:
 8013cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cdc:	4688      	mov	r8, r1
 8013cde:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013ce2:	2600      	movs	r6, #0
 8013ce4:	b914      	cbnz	r4, 8013cec <_fwalk+0x14>
 8013ce6:	4630      	mov	r0, r6
 8013ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cec:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013cf0:	3f01      	subs	r7, #1
 8013cf2:	d501      	bpl.n	8013cf8 <_fwalk+0x20>
 8013cf4:	6824      	ldr	r4, [r4, #0]
 8013cf6:	e7f5      	b.n	8013ce4 <_fwalk+0xc>
 8013cf8:	89ab      	ldrh	r3, [r5, #12]
 8013cfa:	2b01      	cmp	r3, #1
 8013cfc:	d906      	bls.n	8013d0c <_fwalk+0x34>
 8013cfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d02:	3301      	adds	r3, #1
 8013d04:	d002      	beq.n	8013d0c <_fwalk+0x34>
 8013d06:	4628      	mov	r0, r5
 8013d08:	47c0      	blx	r8
 8013d0a:	4306      	orrs	r6, r0
 8013d0c:	3568      	adds	r5, #104	; 0x68
 8013d0e:	e7ef      	b.n	8013cf0 <_fwalk+0x18>

08013d10 <_fwalk_reent>:
 8013d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d14:	4680      	mov	r8, r0
 8013d16:	4689      	mov	r9, r1
 8013d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013d1c:	2600      	movs	r6, #0
 8013d1e:	b914      	cbnz	r4, 8013d26 <_fwalk_reent+0x16>
 8013d20:	4630      	mov	r0, r6
 8013d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013d2a:	3f01      	subs	r7, #1
 8013d2c:	d501      	bpl.n	8013d32 <_fwalk_reent+0x22>
 8013d2e:	6824      	ldr	r4, [r4, #0]
 8013d30:	e7f5      	b.n	8013d1e <_fwalk_reent+0xe>
 8013d32:	89ab      	ldrh	r3, [r5, #12]
 8013d34:	2b01      	cmp	r3, #1
 8013d36:	d907      	bls.n	8013d48 <_fwalk_reent+0x38>
 8013d38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d3c:	3301      	adds	r3, #1
 8013d3e:	d003      	beq.n	8013d48 <_fwalk_reent+0x38>
 8013d40:	4629      	mov	r1, r5
 8013d42:	4640      	mov	r0, r8
 8013d44:	47c8      	blx	r9
 8013d46:	4306      	orrs	r6, r0
 8013d48:	3568      	adds	r5, #104	; 0x68
 8013d4a:	e7ee      	b.n	8013d2a <_fwalk_reent+0x1a>

08013d4c <__libc_init_array>:
 8013d4c:	b570      	push	{r4, r5, r6, lr}
 8013d4e:	4e0d      	ldr	r6, [pc, #52]	; (8013d84 <__libc_init_array+0x38>)
 8013d50:	4c0d      	ldr	r4, [pc, #52]	; (8013d88 <__libc_init_array+0x3c>)
 8013d52:	1ba4      	subs	r4, r4, r6
 8013d54:	10a4      	asrs	r4, r4, #2
 8013d56:	2500      	movs	r5, #0
 8013d58:	42a5      	cmp	r5, r4
 8013d5a:	d109      	bne.n	8013d70 <__libc_init_array+0x24>
 8013d5c:	4e0b      	ldr	r6, [pc, #44]	; (8013d8c <__libc_init_array+0x40>)
 8013d5e:	4c0c      	ldr	r4, [pc, #48]	; (8013d90 <__libc_init_array+0x44>)
 8013d60:	f005 f838 	bl	8018dd4 <_init>
 8013d64:	1ba4      	subs	r4, r4, r6
 8013d66:	10a4      	asrs	r4, r4, #2
 8013d68:	2500      	movs	r5, #0
 8013d6a:	42a5      	cmp	r5, r4
 8013d6c:	d105      	bne.n	8013d7a <__libc_init_array+0x2e>
 8013d6e:	bd70      	pop	{r4, r5, r6, pc}
 8013d70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013d74:	4798      	blx	r3
 8013d76:	3501      	adds	r5, #1
 8013d78:	e7ee      	b.n	8013d58 <__libc_init_array+0xc>
 8013d7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013d7e:	4798      	blx	r3
 8013d80:	3501      	adds	r5, #1
 8013d82:	e7f2      	b.n	8013d6a <__libc_init_array+0x1e>
 8013d84:	08019530 	.word	0x08019530
 8013d88:	08019530 	.word	0x08019530
 8013d8c:	08019530 	.word	0x08019530
 8013d90:	08019534 	.word	0x08019534

08013d94 <__swhatbuf_r>:
 8013d94:	b570      	push	{r4, r5, r6, lr}
 8013d96:	460e      	mov	r6, r1
 8013d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d9c:	2900      	cmp	r1, #0
 8013d9e:	b096      	sub	sp, #88	; 0x58
 8013da0:	4614      	mov	r4, r2
 8013da2:	461d      	mov	r5, r3
 8013da4:	da07      	bge.n	8013db6 <__swhatbuf_r+0x22>
 8013da6:	2300      	movs	r3, #0
 8013da8:	602b      	str	r3, [r5, #0]
 8013daa:	89b3      	ldrh	r3, [r6, #12]
 8013dac:	061a      	lsls	r2, r3, #24
 8013dae:	d410      	bmi.n	8013dd2 <__swhatbuf_r+0x3e>
 8013db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013db4:	e00e      	b.n	8013dd4 <__swhatbuf_r+0x40>
 8013db6:	466a      	mov	r2, sp
 8013db8:	f003 fe66 	bl	8017a88 <_fstat_r>
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	dbf2      	blt.n	8013da6 <__swhatbuf_r+0x12>
 8013dc0:	9a01      	ldr	r2, [sp, #4]
 8013dc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013dc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013dca:	425a      	negs	r2, r3
 8013dcc:	415a      	adcs	r2, r3
 8013dce:	602a      	str	r2, [r5, #0]
 8013dd0:	e7ee      	b.n	8013db0 <__swhatbuf_r+0x1c>
 8013dd2:	2340      	movs	r3, #64	; 0x40
 8013dd4:	2000      	movs	r0, #0
 8013dd6:	6023      	str	r3, [r4, #0]
 8013dd8:	b016      	add	sp, #88	; 0x58
 8013dda:	bd70      	pop	{r4, r5, r6, pc}

08013ddc <__smakebuf_r>:
 8013ddc:	898b      	ldrh	r3, [r1, #12]
 8013dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013de0:	079d      	lsls	r5, r3, #30
 8013de2:	4606      	mov	r6, r0
 8013de4:	460c      	mov	r4, r1
 8013de6:	d507      	bpl.n	8013df8 <__smakebuf_r+0x1c>
 8013de8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013dec:	6023      	str	r3, [r4, #0]
 8013dee:	6123      	str	r3, [r4, #16]
 8013df0:	2301      	movs	r3, #1
 8013df2:	6163      	str	r3, [r4, #20]
 8013df4:	b002      	add	sp, #8
 8013df6:	bd70      	pop	{r4, r5, r6, pc}
 8013df8:	ab01      	add	r3, sp, #4
 8013dfa:	466a      	mov	r2, sp
 8013dfc:	f7ff ffca 	bl	8013d94 <__swhatbuf_r>
 8013e00:	9900      	ldr	r1, [sp, #0]
 8013e02:	4605      	mov	r5, r0
 8013e04:	4630      	mov	r0, r6
 8013e06:	f000 f88b 	bl	8013f20 <_malloc_r>
 8013e0a:	b948      	cbnz	r0, 8013e20 <__smakebuf_r+0x44>
 8013e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e10:	059a      	lsls	r2, r3, #22
 8013e12:	d4ef      	bmi.n	8013df4 <__smakebuf_r+0x18>
 8013e14:	f023 0303 	bic.w	r3, r3, #3
 8013e18:	f043 0302 	orr.w	r3, r3, #2
 8013e1c:	81a3      	strh	r3, [r4, #12]
 8013e1e:	e7e3      	b.n	8013de8 <__smakebuf_r+0xc>
 8013e20:	4b0d      	ldr	r3, [pc, #52]	; (8013e58 <__smakebuf_r+0x7c>)
 8013e22:	62b3      	str	r3, [r6, #40]	; 0x28
 8013e24:	89a3      	ldrh	r3, [r4, #12]
 8013e26:	6020      	str	r0, [r4, #0]
 8013e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e2c:	81a3      	strh	r3, [r4, #12]
 8013e2e:	9b00      	ldr	r3, [sp, #0]
 8013e30:	6163      	str	r3, [r4, #20]
 8013e32:	9b01      	ldr	r3, [sp, #4]
 8013e34:	6120      	str	r0, [r4, #16]
 8013e36:	b15b      	cbz	r3, 8013e50 <__smakebuf_r+0x74>
 8013e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e3c:	4630      	mov	r0, r6
 8013e3e:	f004 f95b 	bl	80180f8 <_isatty_r>
 8013e42:	b128      	cbz	r0, 8013e50 <__smakebuf_r+0x74>
 8013e44:	89a3      	ldrh	r3, [r4, #12]
 8013e46:	f023 0303 	bic.w	r3, r3, #3
 8013e4a:	f043 0301 	orr.w	r3, r3, #1
 8013e4e:	81a3      	strh	r3, [r4, #12]
 8013e50:	89a3      	ldrh	r3, [r4, #12]
 8013e52:	431d      	orrs	r5, r3
 8013e54:	81a5      	strh	r5, [r4, #12]
 8013e56:	e7cd      	b.n	8013df4 <__smakebuf_r+0x18>
 8013e58:	08013bc9 	.word	0x08013bc9

08013e5c <memcpy>:
 8013e5c:	b510      	push	{r4, lr}
 8013e5e:	1e43      	subs	r3, r0, #1
 8013e60:	440a      	add	r2, r1
 8013e62:	4291      	cmp	r1, r2
 8013e64:	d100      	bne.n	8013e68 <memcpy+0xc>
 8013e66:	bd10      	pop	{r4, pc}
 8013e68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e70:	e7f7      	b.n	8013e62 <memcpy+0x6>

08013e72 <memset>:
 8013e72:	4402      	add	r2, r0
 8013e74:	4603      	mov	r3, r0
 8013e76:	4293      	cmp	r3, r2
 8013e78:	d100      	bne.n	8013e7c <memset+0xa>
 8013e7a:	4770      	bx	lr
 8013e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8013e80:	e7f9      	b.n	8013e76 <memset+0x4>
	...

08013e84 <_free_r>:
 8013e84:	b538      	push	{r3, r4, r5, lr}
 8013e86:	4605      	mov	r5, r0
 8013e88:	2900      	cmp	r1, #0
 8013e8a:	d045      	beq.n	8013f18 <_free_r+0x94>
 8013e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e90:	1f0c      	subs	r4, r1, #4
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	bfb8      	it	lt
 8013e96:	18e4      	addlt	r4, r4, r3
 8013e98:	f004 f9a5 	bl	80181e6 <__malloc_lock>
 8013e9c:	4a1f      	ldr	r2, [pc, #124]	; (8013f1c <_free_r+0x98>)
 8013e9e:	6813      	ldr	r3, [r2, #0]
 8013ea0:	4610      	mov	r0, r2
 8013ea2:	b933      	cbnz	r3, 8013eb2 <_free_r+0x2e>
 8013ea4:	6063      	str	r3, [r4, #4]
 8013ea6:	6014      	str	r4, [r2, #0]
 8013ea8:	4628      	mov	r0, r5
 8013eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013eae:	f004 b99b 	b.w	80181e8 <__malloc_unlock>
 8013eb2:	42a3      	cmp	r3, r4
 8013eb4:	d90c      	bls.n	8013ed0 <_free_r+0x4c>
 8013eb6:	6821      	ldr	r1, [r4, #0]
 8013eb8:	1862      	adds	r2, r4, r1
 8013eba:	4293      	cmp	r3, r2
 8013ebc:	bf04      	itt	eq
 8013ebe:	681a      	ldreq	r2, [r3, #0]
 8013ec0:	685b      	ldreq	r3, [r3, #4]
 8013ec2:	6063      	str	r3, [r4, #4]
 8013ec4:	bf04      	itt	eq
 8013ec6:	1852      	addeq	r2, r2, r1
 8013ec8:	6022      	streq	r2, [r4, #0]
 8013eca:	6004      	str	r4, [r0, #0]
 8013ecc:	e7ec      	b.n	8013ea8 <_free_r+0x24>
 8013ece:	4613      	mov	r3, r2
 8013ed0:	685a      	ldr	r2, [r3, #4]
 8013ed2:	b10a      	cbz	r2, 8013ed8 <_free_r+0x54>
 8013ed4:	42a2      	cmp	r2, r4
 8013ed6:	d9fa      	bls.n	8013ece <_free_r+0x4a>
 8013ed8:	6819      	ldr	r1, [r3, #0]
 8013eda:	1858      	adds	r0, r3, r1
 8013edc:	42a0      	cmp	r0, r4
 8013ede:	d10b      	bne.n	8013ef8 <_free_r+0x74>
 8013ee0:	6820      	ldr	r0, [r4, #0]
 8013ee2:	4401      	add	r1, r0
 8013ee4:	1858      	adds	r0, r3, r1
 8013ee6:	4282      	cmp	r2, r0
 8013ee8:	6019      	str	r1, [r3, #0]
 8013eea:	d1dd      	bne.n	8013ea8 <_free_r+0x24>
 8013eec:	6810      	ldr	r0, [r2, #0]
 8013eee:	6852      	ldr	r2, [r2, #4]
 8013ef0:	605a      	str	r2, [r3, #4]
 8013ef2:	4401      	add	r1, r0
 8013ef4:	6019      	str	r1, [r3, #0]
 8013ef6:	e7d7      	b.n	8013ea8 <_free_r+0x24>
 8013ef8:	d902      	bls.n	8013f00 <_free_r+0x7c>
 8013efa:	230c      	movs	r3, #12
 8013efc:	602b      	str	r3, [r5, #0]
 8013efe:	e7d3      	b.n	8013ea8 <_free_r+0x24>
 8013f00:	6820      	ldr	r0, [r4, #0]
 8013f02:	1821      	adds	r1, r4, r0
 8013f04:	428a      	cmp	r2, r1
 8013f06:	bf04      	itt	eq
 8013f08:	6811      	ldreq	r1, [r2, #0]
 8013f0a:	6852      	ldreq	r2, [r2, #4]
 8013f0c:	6062      	str	r2, [r4, #4]
 8013f0e:	bf04      	itt	eq
 8013f10:	1809      	addeq	r1, r1, r0
 8013f12:	6021      	streq	r1, [r4, #0]
 8013f14:	605c      	str	r4, [r3, #4]
 8013f16:	e7c7      	b.n	8013ea8 <_free_r+0x24>
 8013f18:	bd38      	pop	{r3, r4, r5, pc}
 8013f1a:	bf00      	nop
 8013f1c:	2000821c 	.word	0x2000821c

08013f20 <_malloc_r>:
 8013f20:	b570      	push	{r4, r5, r6, lr}
 8013f22:	1ccd      	adds	r5, r1, #3
 8013f24:	f025 0503 	bic.w	r5, r5, #3
 8013f28:	3508      	adds	r5, #8
 8013f2a:	2d0c      	cmp	r5, #12
 8013f2c:	bf38      	it	cc
 8013f2e:	250c      	movcc	r5, #12
 8013f30:	2d00      	cmp	r5, #0
 8013f32:	4606      	mov	r6, r0
 8013f34:	db01      	blt.n	8013f3a <_malloc_r+0x1a>
 8013f36:	42a9      	cmp	r1, r5
 8013f38:	d903      	bls.n	8013f42 <_malloc_r+0x22>
 8013f3a:	230c      	movs	r3, #12
 8013f3c:	6033      	str	r3, [r6, #0]
 8013f3e:	2000      	movs	r0, #0
 8013f40:	bd70      	pop	{r4, r5, r6, pc}
 8013f42:	f004 f950 	bl	80181e6 <__malloc_lock>
 8013f46:	4a21      	ldr	r2, [pc, #132]	; (8013fcc <_malloc_r+0xac>)
 8013f48:	6814      	ldr	r4, [r2, #0]
 8013f4a:	4621      	mov	r1, r4
 8013f4c:	b991      	cbnz	r1, 8013f74 <_malloc_r+0x54>
 8013f4e:	4c20      	ldr	r4, [pc, #128]	; (8013fd0 <_malloc_r+0xb0>)
 8013f50:	6823      	ldr	r3, [r4, #0]
 8013f52:	b91b      	cbnz	r3, 8013f5c <_malloc_r+0x3c>
 8013f54:	4630      	mov	r0, r6
 8013f56:	f001 fd0f 	bl	8015978 <_sbrk_r>
 8013f5a:	6020      	str	r0, [r4, #0]
 8013f5c:	4629      	mov	r1, r5
 8013f5e:	4630      	mov	r0, r6
 8013f60:	f001 fd0a 	bl	8015978 <_sbrk_r>
 8013f64:	1c43      	adds	r3, r0, #1
 8013f66:	d124      	bne.n	8013fb2 <_malloc_r+0x92>
 8013f68:	230c      	movs	r3, #12
 8013f6a:	6033      	str	r3, [r6, #0]
 8013f6c:	4630      	mov	r0, r6
 8013f6e:	f004 f93b 	bl	80181e8 <__malloc_unlock>
 8013f72:	e7e4      	b.n	8013f3e <_malloc_r+0x1e>
 8013f74:	680b      	ldr	r3, [r1, #0]
 8013f76:	1b5b      	subs	r3, r3, r5
 8013f78:	d418      	bmi.n	8013fac <_malloc_r+0x8c>
 8013f7a:	2b0b      	cmp	r3, #11
 8013f7c:	d90f      	bls.n	8013f9e <_malloc_r+0x7e>
 8013f7e:	600b      	str	r3, [r1, #0]
 8013f80:	50cd      	str	r5, [r1, r3]
 8013f82:	18cc      	adds	r4, r1, r3
 8013f84:	4630      	mov	r0, r6
 8013f86:	f004 f92f 	bl	80181e8 <__malloc_unlock>
 8013f8a:	f104 000b 	add.w	r0, r4, #11
 8013f8e:	1d23      	adds	r3, r4, #4
 8013f90:	f020 0007 	bic.w	r0, r0, #7
 8013f94:	1ac3      	subs	r3, r0, r3
 8013f96:	d0d3      	beq.n	8013f40 <_malloc_r+0x20>
 8013f98:	425a      	negs	r2, r3
 8013f9a:	50e2      	str	r2, [r4, r3]
 8013f9c:	e7d0      	b.n	8013f40 <_malloc_r+0x20>
 8013f9e:	428c      	cmp	r4, r1
 8013fa0:	684b      	ldr	r3, [r1, #4]
 8013fa2:	bf16      	itet	ne
 8013fa4:	6063      	strne	r3, [r4, #4]
 8013fa6:	6013      	streq	r3, [r2, #0]
 8013fa8:	460c      	movne	r4, r1
 8013faa:	e7eb      	b.n	8013f84 <_malloc_r+0x64>
 8013fac:	460c      	mov	r4, r1
 8013fae:	6849      	ldr	r1, [r1, #4]
 8013fb0:	e7cc      	b.n	8013f4c <_malloc_r+0x2c>
 8013fb2:	1cc4      	adds	r4, r0, #3
 8013fb4:	f024 0403 	bic.w	r4, r4, #3
 8013fb8:	42a0      	cmp	r0, r4
 8013fba:	d005      	beq.n	8013fc8 <_malloc_r+0xa8>
 8013fbc:	1a21      	subs	r1, r4, r0
 8013fbe:	4630      	mov	r0, r6
 8013fc0:	f001 fcda 	bl	8015978 <_sbrk_r>
 8013fc4:	3001      	adds	r0, #1
 8013fc6:	d0cf      	beq.n	8013f68 <_malloc_r+0x48>
 8013fc8:	6025      	str	r5, [r4, #0]
 8013fca:	e7db      	b.n	8013f84 <_malloc_r+0x64>
 8013fcc:	2000821c 	.word	0x2000821c
 8013fd0:	20008220 	.word	0x20008220

08013fd4 <__sfputc_r>:
 8013fd4:	6893      	ldr	r3, [r2, #8]
 8013fd6:	3b01      	subs	r3, #1
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	b410      	push	{r4}
 8013fdc:	6093      	str	r3, [r2, #8]
 8013fde:	da08      	bge.n	8013ff2 <__sfputc_r+0x1e>
 8013fe0:	6994      	ldr	r4, [r2, #24]
 8013fe2:	42a3      	cmp	r3, r4
 8013fe4:	db01      	blt.n	8013fea <__sfputc_r+0x16>
 8013fe6:	290a      	cmp	r1, #10
 8013fe8:	d103      	bne.n	8013ff2 <__sfputc_r+0x1e>
 8013fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fee:	f002 be25 	b.w	8016c3c <__swbuf_r>
 8013ff2:	6813      	ldr	r3, [r2, #0]
 8013ff4:	1c58      	adds	r0, r3, #1
 8013ff6:	6010      	str	r0, [r2, #0]
 8013ff8:	7019      	strb	r1, [r3, #0]
 8013ffa:	4608      	mov	r0, r1
 8013ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014000:	4770      	bx	lr

08014002 <__sfputs_r>:
 8014002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014004:	4606      	mov	r6, r0
 8014006:	460f      	mov	r7, r1
 8014008:	4614      	mov	r4, r2
 801400a:	18d5      	adds	r5, r2, r3
 801400c:	42ac      	cmp	r4, r5
 801400e:	d101      	bne.n	8014014 <__sfputs_r+0x12>
 8014010:	2000      	movs	r0, #0
 8014012:	e007      	b.n	8014024 <__sfputs_r+0x22>
 8014014:	463a      	mov	r2, r7
 8014016:	f814 1b01 	ldrb.w	r1, [r4], #1
 801401a:	4630      	mov	r0, r6
 801401c:	f7ff ffda 	bl	8013fd4 <__sfputc_r>
 8014020:	1c43      	adds	r3, r0, #1
 8014022:	d1f3      	bne.n	801400c <__sfputs_r+0xa>
 8014024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014028 <_vfiprintf_r>:
 8014028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801402c:	460c      	mov	r4, r1
 801402e:	b09d      	sub	sp, #116	; 0x74
 8014030:	4617      	mov	r7, r2
 8014032:	461d      	mov	r5, r3
 8014034:	4606      	mov	r6, r0
 8014036:	b118      	cbz	r0, 8014040 <_vfiprintf_r+0x18>
 8014038:	6983      	ldr	r3, [r0, #24]
 801403a:	b90b      	cbnz	r3, 8014040 <_vfiprintf_r+0x18>
 801403c:	f7ff fde0 	bl	8013c00 <__sinit>
 8014040:	4b7c      	ldr	r3, [pc, #496]	; (8014234 <_vfiprintf_r+0x20c>)
 8014042:	429c      	cmp	r4, r3
 8014044:	d158      	bne.n	80140f8 <_vfiprintf_r+0xd0>
 8014046:	6874      	ldr	r4, [r6, #4]
 8014048:	89a3      	ldrh	r3, [r4, #12]
 801404a:	0718      	lsls	r0, r3, #28
 801404c:	d55e      	bpl.n	801410c <_vfiprintf_r+0xe4>
 801404e:	6923      	ldr	r3, [r4, #16]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d05b      	beq.n	801410c <_vfiprintf_r+0xe4>
 8014054:	2300      	movs	r3, #0
 8014056:	9309      	str	r3, [sp, #36]	; 0x24
 8014058:	2320      	movs	r3, #32
 801405a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801405e:	2330      	movs	r3, #48	; 0x30
 8014060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014064:	9503      	str	r5, [sp, #12]
 8014066:	f04f 0b01 	mov.w	fp, #1
 801406a:	46b8      	mov	r8, r7
 801406c:	4645      	mov	r5, r8
 801406e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014072:	b10b      	cbz	r3, 8014078 <_vfiprintf_r+0x50>
 8014074:	2b25      	cmp	r3, #37	; 0x25
 8014076:	d154      	bne.n	8014122 <_vfiprintf_r+0xfa>
 8014078:	ebb8 0a07 	subs.w	sl, r8, r7
 801407c:	d00b      	beq.n	8014096 <_vfiprintf_r+0x6e>
 801407e:	4653      	mov	r3, sl
 8014080:	463a      	mov	r2, r7
 8014082:	4621      	mov	r1, r4
 8014084:	4630      	mov	r0, r6
 8014086:	f7ff ffbc 	bl	8014002 <__sfputs_r>
 801408a:	3001      	adds	r0, #1
 801408c:	f000 80c2 	beq.w	8014214 <_vfiprintf_r+0x1ec>
 8014090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014092:	4453      	add	r3, sl
 8014094:	9309      	str	r3, [sp, #36]	; 0x24
 8014096:	f898 3000 	ldrb.w	r3, [r8]
 801409a:	2b00      	cmp	r3, #0
 801409c:	f000 80ba 	beq.w	8014214 <_vfiprintf_r+0x1ec>
 80140a0:	2300      	movs	r3, #0
 80140a2:	f04f 32ff 	mov.w	r2, #4294967295
 80140a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140aa:	9304      	str	r3, [sp, #16]
 80140ac:	9307      	str	r3, [sp, #28]
 80140ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80140b2:	931a      	str	r3, [sp, #104]	; 0x68
 80140b4:	46a8      	mov	r8, r5
 80140b6:	2205      	movs	r2, #5
 80140b8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80140bc:	485e      	ldr	r0, [pc, #376]	; (8014238 <_vfiprintf_r+0x210>)
 80140be:	f7f3 ffc7 	bl	8008050 <memchr>
 80140c2:	9b04      	ldr	r3, [sp, #16]
 80140c4:	bb78      	cbnz	r0, 8014126 <_vfiprintf_r+0xfe>
 80140c6:	06d9      	lsls	r1, r3, #27
 80140c8:	bf44      	itt	mi
 80140ca:	2220      	movmi	r2, #32
 80140cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140d0:	071a      	lsls	r2, r3, #28
 80140d2:	bf44      	itt	mi
 80140d4:	222b      	movmi	r2, #43	; 0x2b
 80140d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140da:	782a      	ldrb	r2, [r5, #0]
 80140dc:	2a2a      	cmp	r2, #42	; 0x2a
 80140de:	d02a      	beq.n	8014136 <_vfiprintf_r+0x10e>
 80140e0:	9a07      	ldr	r2, [sp, #28]
 80140e2:	46a8      	mov	r8, r5
 80140e4:	2000      	movs	r0, #0
 80140e6:	250a      	movs	r5, #10
 80140e8:	4641      	mov	r1, r8
 80140ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140ee:	3b30      	subs	r3, #48	; 0x30
 80140f0:	2b09      	cmp	r3, #9
 80140f2:	d969      	bls.n	80141c8 <_vfiprintf_r+0x1a0>
 80140f4:	b360      	cbz	r0, 8014150 <_vfiprintf_r+0x128>
 80140f6:	e024      	b.n	8014142 <_vfiprintf_r+0x11a>
 80140f8:	4b50      	ldr	r3, [pc, #320]	; (801423c <_vfiprintf_r+0x214>)
 80140fa:	429c      	cmp	r4, r3
 80140fc:	d101      	bne.n	8014102 <_vfiprintf_r+0xda>
 80140fe:	68b4      	ldr	r4, [r6, #8]
 8014100:	e7a2      	b.n	8014048 <_vfiprintf_r+0x20>
 8014102:	4b4f      	ldr	r3, [pc, #316]	; (8014240 <_vfiprintf_r+0x218>)
 8014104:	429c      	cmp	r4, r3
 8014106:	bf08      	it	eq
 8014108:	68f4      	ldreq	r4, [r6, #12]
 801410a:	e79d      	b.n	8014048 <_vfiprintf_r+0x20>
 801410c:	4621      	mov	r1, r4
 801410e:	4630      	mov	r0, r6
 8014110:	f002 fdf8 	bl	8016d04 <__swsetup_r>
 8014114:	2800      	cmp	r0, #0
 8014116:	d09d      	beq.n	8014054 <_vfiprintf_r+0x2c>
 8014118:	f04f 30ff 	mov.w	r0, #4294967295
 801411c:	b01d      	add	sp, #116	; 0x74
 801411e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014122:	46a8      	mov	r8, r5
 8014124:	e7a2      	b.n	801406c <_vfiprintf_r+0x44>
 8014126:	4a44      	ldr	r2, [pc, #272]	; (8014238 <_vfiprintf_r+0x210>)
 8014128:	1a80      	subs	r0, r0, r2
 801412a:	fa0b f000 	lsl.w	r0, fp, r0
 801412e:	4318      	orrs	r0, r3
 8014130:	9004      	str	r0, [sp, #16]
 8014132:	4645      	mov	r5, r8
 8014134:	e7be      	b.n	80140b4 <_vfiprintf_r+0x8c>
 8014136:	9a03      	ldr	r2, [sp, #12]
 8014138:	1d11      	adds	r1, r2, #4
 801413a:	6812      	ldr	r2, [r2, #0]
 801413c:	9103      	str	r1, [sp, #12]
 801413e:	2a00      	cmp	r2, #0
 8014140:	db01      	blt.n	8014146 <_vfiprintf_r+0x11e>
 8014142:	9207      	str	r2, [sp, #28]
 8014144:	e004      	b.n	8014150 <_vfiprintf_r+0x128>
 8014146:	4252      	negs	r2, r2
 8014148:	f043 0302 	orr.w	r3, r3, #2
 801414c:	9207      	str	r2, [sp, #28]
 801414e:	9304      	str	r3, [sp, #16]
 8014150:	f898 3000 	ldrb.w	r3, [r8]
 8014154:	2b2e      	cmp	r3, #46	; 0x2e
 8014156:	d10e      	bne.n	8014176 <_vfiprintf_r+0x14e>
 8014158:	f898 3001 	ldrb.w	r3, [r8, #1]
 801415c:	2b2a      	cmp	r3, #42	; 0x2a
 801415e:	d138      	bne.n	80141d2 <_vfiprintf_r+0x1aa>
 8014160:	9b03      	ldr	r3, [sp, #12]
 8014162:	1d1a      	adds	r2, r3, #4
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	9203      	str	r2, [sp, #12]
 8014168:	2b00      	cmp	r3, #0
 801416a:	bfb8      	it	lt
 801416c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014170:	f108 0802 	add.w	r8, r8, #2
 8014174:	9305      	str	r3, [sp, #20]
 8014176:	4d33      	ldr	r5, [pc, #204]	; (8014244 <_vfiprintf_r+0x21c>)
 8014178:	f898 1000 	ldrb.w	r1, [r8]
 801417c:	2203      	movs	r2, #3
 801417e:	4628      	mov	r0, r5
 8014180:	f7f3 ff66 	bl	8008050 <memchr>
 8014184:	b140      	cbz	r0, 8014198 <_vfiprintf_r+0x170>
 8014186:	2340      	movs	r3, #64	; 0x40
 8014188:	1b40      	subs	r0, r0, r5
 801418a:	fa03 f000 	lsl.w	r0, r3, r0
 801418e:	9b04      	ldr	r3, [sp, #16]
 8014190:	4303      	orrs	r3, r0
 8014192:	f108 0801 	add.w	r8, r8, #1
 8014196:	9304      	str	r3, [sp, #16]
 8014198:	f898 1000 	ldrb.w	r1, [r8]
 801419c:	482a      	ldr	r0, [pc, #168]	; (8014248 <_vfiprintf_r+0x220>)
 801419e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141a2:	2206      	movs	r2, #6
 80141a4:	f108 0701 	add.w	r7, r8, #1
 80141a8:	f7f3 ff52 	bl	8008050 <memchr>
 80141ac:	2800      	cmp	r0, #0
 80141ae:	d037      	beq.n	8014220 <_vfiprintf_r+0x1f8>
 80141b0:	4b26      	ldr	r3, [pc, #152]	; (801424c <_vfiprintf_r+0x224>)
 80141b2:	bb1b      	cbnz	r3, 80141fc <_vfiprintf_r+0x1d4>
 80141b4:	9b03      	ldr	r3, [sp, #12]
 80141b6:	3307      	adds	r3, #7
 80141b8:	f023 0307 	bic.w	r3, r3, #7
 80141bc:	3308      	adds	r3, #8
 80141be:	9303      	str	r3, [sp, #12]
 80141c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141c2:	444b      	add	r3, r9
 80141c4:	9309      	str	r3, [sp, #36]	; 0x24
 80141c6:	e750      	b.n	801406a <_vfiprintf_r+0x42>
 80141c8:	fb05 3202 	mla	r2, r5, r2, r3
 80141cc:	2001      	movs	r0, #1
 80141ce:	4688      	mov	r8, r1
 80141d0:	e78a      	b.n	80140e8 <_vfiprintf_r+0xc0>
 80141d2:	2300      	movs	r3, #0
 80141d4:	f108 0801 	add.w	r8, r8, #1
 80141d8:	9305      	str	r3, [sp, #20]
 80141da:	4619      	mov	r1, r3
 80141dc:	250a      	movs	r5, #10
 80141de:	4640      	mov	r0, r8
 80141e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141e4:	3a30      	subs	r2, #48	; 0x30
 80141e6:	2a09      	cmp	r2, #9
 80141e8:	d903      	bls.n	80141f2 <_vfiprintf_r+0x1ca>
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d0c3      	beq.n	8014176 <_vfiprintf_r+0x14e>
 80141ee:	9105      	str	r1, [sp, #20]
 80141f0:	e7c1      	b.n	8014176 <_vfiprintf_r+0x14e>
 80141f2:	fb05 2101 	mla	r1, r5, r1, r2
 80141f6:	2301      	movs	r3, #1
 80141f8:	4680      	mov	r8, r0
 80141fa:	e7f0      	b.n	80141de <_vfiprintf_r+0x1b6>
 80141fc:	ab03      	add	r3, sp, #12
 80141fe:	9300      	str	r3, [sp, #0]
 8014200:	4622      	mov	r2, r4
 8014202:	4b13      	ldr	r3, [pc, #76]	; (8014250 <_vfiprintf_r+0x228>)
 8014204:	a904      	add	r1, sp, #16
 8014206:	4630      	mov	r0, r6
 8014208:	f000 f8b8 	bl	801437c <_printf_float>
 801420c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014210:	4681      	mov	r9, r0
 8014212:	d1d5      	bne.n	80141c0 <_vfiprintf_r+0x198>
 8014214:	89a3      	ldrh	r3, [r4, #12]
 8014216:	065b      	lsls	r3, r3, #25
 8014218:	f53f af7e 	bmi.w	8014118 <_vfiprintf_r+0xf0>
 801421c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801421e:	e77d      	b.n	801411c <_vfiprintf_r+0xf4>
 8014220:	ab03      	add	r3, sp, #12
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	4622      	mov	r2, r4
 8014226:	4b0a      	ldr	r3, [pc, #40]	; (8014250 <_vfiprintf_r+0x228>)
 8014228:	a904      	add	r1, sp, #16
 801422a:	4630      	mov	r0, r6
 801422c:	f000 fb5c 	bl	80148e8 <_printf_i>
 8014230:	e7ec      	b.n	801420c <_vfiprintf_r+0x1e4>
 8014232:	bf00      	nop
 8014234:	08019218 	.word	0x08019218
 8014238:	0801925c 	.word	0x0801925c
 801423c:	08019238 	.word	0x08019238
 8014240:	080191f8 	.word	0x080191f8
 8014244:	08019262 	.word	0x08019262
 8014248:	08019266 	.word	0x08019266
 801424c:	0801437d 	.word	0x0801437d
 8014250:	08014003 	.word	0x08014003

08014254 <__cvt>:
 8014254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014258:	ec55 4b10 	vmov	r4, r5, d0
 801425c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801425e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014262:	2d00      	cmp	r5, #0
 8014264:	460e      	mov	r6, r1
 8014266:	4691      	mov	r9, r2
 8014268:	4619      	mov	r1, r3
 801426a:	bfb8      	it	lt
 801426c:	4622      	movlt	r2, r4
 801426e:	462b      	mov	r3, r5
 8014270:	f027 0720 	bic.w	r7, r7, #32
 8014274:	bfbb      	ittet	lt
 8014276:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801427a:	461d      	movlt	r5, r3
 801427c:	2300      	movge	r3, #0
 801427e:	232d      	movlt	r3, #45	; 0x2d
 8014280:	bfb8      	it	lt
 8014282:	4614      	movlt	r4, r2
 8014284:	2f46      	cmp	r7, #70	; 0x46
 8014286:	700b      	strb	r3, [r1, #0]
 8014288:	d004      	beq.n	8014294 <__cvt+0x40>
 801428a:	2f45      	cmp	r7, #69	; 0x45
 801428c:	d100      	bne.n	8014290 <__cvt+0x3c>
 801428e:	3601      	adds	r6, #1
 8014290:	2102      	movs	r1, #2
 8014292:	e000      	b.n	8014296 <__cvt+0x42>
 8014294:	2103      	movs	r1, #3
 8014296:	ab03      	add	r3, sp, #12
 8014298:	9301      	str	r3, [sp, #4]
 801429a:	ab02      	add	r3, sp, #8
 801429c:	9300      	str	r3, [sp, #0]
 801429e:	4632      	mov	r2, r6
 80142a0:	4653      	mov	r3, sl
 80142a2:	ec45 4b10 	vmov	d0, r4, r5
 80142a6:	f002 fe37 	bl	8016f18 <_dtoa_r>
 80142aa:	2f47      	cmp	r7, #71	; 0x47
 80142ac:	4680      	mov	r8, r0
 80142ae:	d102      	bne.n	80142b6 <__cvt+0x62>
 80142b0:	f019 0f01 	tst.w	r9, #1
 80142b4:	d026      	beq.n	8014304 <__cvt+0xb0>
 80142b6:	2f46      	cmp	r7, #70	; 0x46
 80142b8:	eb08 0906 	add.w	r9, r8, r6
 80142bc:	d111      	bne.n	80142e2 <__cvt+0x8e>
 80142be:	f898 3000 	ldrb.w	r3, [r8]
 80142c2:	2b30      	cmp	r3, #48	; 0x30
 80142c4:	d10a      	bne.n	80142dc <__cvt+0x88>
 80142c6:	2200      	movs	r2, #0
 80142c8:	2300      	movs	r3, #0
 80142ca:	4620      	mov	r0, r4
 80142cc:	4629      	mov	r1, r5
 80142ce:	f7f4 fb33 	bl	8008938 <__aeabi_dcmpeq>
 80142d2:	b918      	cbnz	r0, 80142dc <__cvt+0x88>
 80142d4:	f1c6 0601 	rsb	r6, r6, #1
 80142d8:	f8ca 6000 	str.w	r6, [sl]
 80142dc:	f8da 3000 	ldr.w	r3, [sl]
 80142e0:	4499      	add	r9, r3
 80142e2:	2200      	movs	r2, #0
 80142e4:	2300      	movs	r3, #0
 80142e6:	4620      	mov	r0, r4
 80142e8:	4629      	mov	r1, r5
 80142ea:	f7f4 fb25 	bl	8008938 <__aeabi_dcmpeq>
 80142ee:	b938      	cbnz	r0, 8014300 <__cvt+0xac>
 80142f0:	2230      	movs	r2, #48	; 0x30
 80142f2:	9b03      	ldr	r3, [sp, #12]
 80142f4:	454b      	cmp	r3, r9
 80142f6:	d205      	bcs.n	8014304 <__cvt+0xb0>
 80142f8:	1c59      	adds	r1, r3, #1
 80142fa:	9103      	str	r1, [sp, #12]
 80142fc:	701a      	strb	r2, [r3, #0]
 80142fe:	e7f8      	b.n	80142f2 <__cvt+0x9e>
 8014300:	f8cd 900c 	str.w	r9, [sp, #12]
 8014304:	9b03      	ldr	r3, [sp, #12]
 8014306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014308:	eba3 0308 	sub.w	r3, r3, r8
 801430c:	4640      	mov	r0, r8
 801430e:	6013      	str	r3, [r2, #0]
 8014310:	b004      	add	sp, #16
 8014312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014316 <__exponent>:
 8014316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014318:	2900      	cmp	r1, #0
 801431a:	4604      	mov	r4, r0
 801431c:	bfba      	itte	lt
 801431e:	4249      	neglt	r1, r1
 8014320:	232d      	movlt	r3, #45	; 0x2d
 8014322:	232b      	movge	r3, #43	; 0x2b
 8014324:	2909      	cmp	r1, #9
 8014326:	f804 2b02 	strb.w	r2, [r4], #2
 801432a:	7043      	strb	r3, [r0, #1]
 801432c:	dd20      	ble.n	8014370 <__exponent+0x5a>
 801432e:	f10d 0307 	add.w	r3, sp, #7
 8014332:	461f      	mov	r7, r3
 8014334:	260a      	movs	r6, #10
 8014336:	fb91 f5f6 	sdiv	r5, r1, r6
 801433a:	fb06 1115 	mls	r1, r6, r5, r1
 801433e:	3130      	adds	r1, #48	; 0x30
 8014340:	2d09      	cmp	r5, #9
 8014342:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014346:	f103 32ff 	add.w	r2, r3, #4294967295
 801434a:	4629      	mov	r1, r5
 801434c:	dc09      	bgt.n	8014362 <__exponent+0x4c>
 801434e:	3130      	adds	r1, #48	; 0x30
 8014350:	3b02      	subs	r3, #2
 8014352:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014356:	42bb      	cmp	r3, r7
 8014358:	4622      	mov	r2, r4
 801435a:	d304      	bcc.n	8014366 <__exponent+0x50>
 801435c:	1a10      	subs	r0, r2, r0
 801435e:	b003      	add	sp, #12
 8014360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014362:	4613      	mov	r3, r2
 8014364:	e7e7      	b.n	8014336 <__exponent+0x20>
 8014366:	f813 2b01 	ldrb.w	r2, [r3], #1
 801436a:	f804 2b01 	strb.w	r2, [r4], #1
 801436e:	e7f2      	b.n	8014356 <__exponent+0x40>
 8014370:	2330      	movs	r3, #48	; 0x30
 8014372:	4419      	add	r1, r3
 8014374:	7083      	strb	r3, [r0, #2]
 8014376:	1d02      	adds	r2, r0, #4
 8014378:	70c1      	strb	r1, [r0, #3]
 801437a:	e7ef      	b.n	801435c <__exponent+0x46>

0801437c <_printf_float>:
 801437c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014380:	b08d      	sub	sp, #52	; 0x34
 8014382:	460c      	mov	r4, r1
 8014384:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014388:	4616      	mov	r6, r2
 801438a:	461f      	mov	r7, r3
 801438c:	4605      	mov	r5, r0
 801438e:	f003 fed7 	bl	8018140 <_localeconv_r>
 8014392:	6803      	ldr	r3, [r0, #0]
 8014394:	9304      	str	r3, [sp, #16]
 8014396:	4618      	mov	r0, r3
 8014398:	f7f3 fe52 	bl	8008040 <strlen>
 801439c:	2300      	movs	r3, #0
 801439e:	930a      	str	r3, [sp, #40]	; 0x28
 80143a0:	f8d8 3000 	ldr.w	r3, [r8]
 80143a4:	9005      	str	r0, [sp, #20]
 80143a6:	3307      	adds	r3, #7
 80143a8:	f023 0307 	bic.w	r3, r3, #7
 80143ac:	f103 0208 	add.w	r2, r3, #8
 80143b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80143b4:	f8d4 b000 	ldr.w	fp, [r4]
 80143b8:	f8c8 2000 	str.w	r2, [r8]
 80143bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80143c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80143c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80143cc:	9307      	str	r3, [sp, #28]
 80143ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80143d2:	f04f 32ff 	mov.w	r2, #4294967295
 80143d6:	4ba7      	ldr	r3, [pc, #668]	; (8014674 <_printf_float+0x2f8>)
 80143d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143dc:	f7f4 fade 	bl	800899c <__aeabi_dcmpun>
 80143e0:	bb70      	cbnz	r0, 8014440 <_printf_float+0xc4>
 80143e2:	f04f 32ff 	mov.w	r2, #4294967295
 80143e6:	4ba3      	ldr	r3, [pc, #652]	; (8014674 <_printf_float+0x2f8>)
 80143e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143ec:	f7f4 fab8 	bl	8008960 <__aeabi_dcmple>
 80143f0:	bb30      	cbnz	r0, 8014440 <_printf_float+0xc4>
 80143f2:	2200      	movs	r2, #0
 80143f4:	2300      	movs	r3, #0
 80143f6:	4640      	mov	r0, r8
 80143f8:	4649      	mov	r1, r9
 80143fa:	f7f4 faa7 	bl	800894c <__aeabi_dcmplt>
 80143fe:	b110      	cbz	r0, 8014406 <_printf_float+0x8a>
 8014400:	232d      	movs	r3, #45	; 0x2d
 8014402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014406:	4a9c      	ldr	r2, [pc, #624]	; (8014678 <_printf_float+0x2fc>)
 8014408:	4b9c      	ldr	r3, [pc, #624]	; (801467c <_printf_float+0x300>)
 801440a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801440e:	bf8c      	ite	hi
 8014410:	4690      	movhi	r8, r2
 8014412:	4698      	movls	r8, r3
 8014414:	2303      	movs	r3, #3
 8014416:	f02b 0204 	bic.w	r2, fp, #4
 801441a:	6123      	str	r3, [r4, #16]
 801441c:	6022      	str	r2, [r4, #0]
 801441e:	f04f 0900 	mov.w	r9, #0
 8014422:	9700      	str	r7, [sp, #0]
 8014424:	4633      	mov	r3, r6
 8014426:	aa0b      	add	r2, sp, #44	; 0x2c
 8014428:	4621      	mov	r1, r4
 801442a:	4628      	mov	r0, r5
 801442c:	f000 f9e6 	bl	80147fc <_printf_common>
 8014430:	3001      	adds	r0, #1
 8014432:	f040 808d 	bne.w	8014550 <_printf_float+0x1d4>
 8014436:	f04f 30ff 	mov.w	r0, #4294967295
 801443a:	b00d      	add	sp, #52	; 0x34
 801443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014440:	4642      	mov	r2, r8
 8014442:	464b      	mov	r3, r9
 8014444:	4640      	mov	r0, r8
 8014446:	4649      	mov	r1, r9
 8014448:	f7f4 faa8 	bl	800899c <__aeabi_dcmpun>
 801444c:	b110      	cbz	r0, 8014454 <_printf_float+0xd8>
 801444e:	4a8c      	ldr	r2, [pc, #560]	; (8014680 <_printf_float+0x304>)
 8014450:	4b8c      	ldr	r3, [pc, #560]	; (8014684 <_printf_float+0x308>)
 8014452:	e7da      	b.n	801440a <_printf_float+0x8e>
 8014454:	6861      	ldr	r1, [r4, #4]
 8014456:	1c4b      	adds	r3, r1, #1
 8014458:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801445c:	a80a      	add	r0, sp, #40	; 0x28
 801445e:	d13e      	bne.n	80144de <_printf_float+0x162>
 8014460:	2306      	movs	r3, #6
 8014462:	6063      	str	r3, [r4, #4]
 8014464:	2300      	movs	r3, #0
 8014466:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801446a:	ab09      	add	r3, sp, #36	; 0x24
 801446c:	9300      	str	r3, [sp, #0]
 801446e:	ec49 8b10 	vmov	d0, r8, r9
 8014472:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014476:	6022      	str	r2, [r4, #0]
 8014478:	f8cd a004 	str.w	sl, [sp, #4]
 801447c:	6861      	ldr	r1, [r4, #4]
 801447e:	4628      	mov	r0, r5
 8014480:	f7ff fee8 	bl	8014254 <__cvt>
 8014484:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014488:	2b47      	cmp	r3, #71	; 0x47
 801448a:	4680      	mov	r8, r0
 801448c:	d109      	bne.n	80144a2 <_printf_float+0x126>
 801448e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014490:	1cd8      	adds	r0, r3, #3
 8014492:	db02      	blt.n	801449a <_printf_float+0x11e>
 8014494:	6862      	ldr	r2, [r4, #4]
 8014496:	4293      	cmp	r3, r2
 8014498:	dd47      	ble.n	801452a <_printf_float+0x1ae>
 801449a:	f1aa 0a02 	sub.w	sl, sl, #2
 801449e:	fa5f fa8a 	uxtb.w	sl, sl
 80144a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80144a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144a8:	d824      	bhi.n	80144f4 <_printf_float+0x178>
 80144aa:	3901      	subs	r1, #1
 80144ac:	4652      	mov	r2, sl
 80144ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80144b2:	9109      	str	r1, [sp, #36]	; 0x24
 80144b4:	f7ff ff2f 	bl	8014316 <__exponent>
 80144b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144ba:	1813      	adds	r3, r2, r0
 80144bc:	2a01      	cmp	r2, #1
 80144be:	4681      	mov	r9, r0
 80144c0:	6123      	str	r3, [r4, #16]
 80144c2:	dc02      	bgt.n	80144ca <_printf_float+0x14e>
 80144c4:	6822      	ldr	r2, [r4, #0]
 80144c6:	07d1      	lsls	r1, r2, #31
 80144c8:	d501      	bpl.n	80144ce <_printf_float+0x152>
 80144ca:	3301      	adds	r3, #1
 80144cc:	6123      	str	r3, [r4, #16]
 80144ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d0a5      	beq.n	8014422 <_printf_float+0xa6>
 80144d6:	232d      	movs	r3, #45	; 0x2d
 80144d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144dc:	e7a1      	b.n	8014422 <_printf_float+0xa6>
 80144de:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80144e2:	f000 8177 	beq.w	80147d4 <_printf_float+0x458>
 80144e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80144ea:	d1bb      	bne.n	8014464 <_printf_float+0xe8>
 80144ec:	2900      	cmp	r1, #0
 80144ee:	d1b9      	bne.n	8014464 <_printf_float+0xe8>
 80144f0:	2301      	movs	r3, #1
 80144f2:	e7b6      	b.n	8014462 <_printf_float+0xe6>
 80144f4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80144f8:	d119      	bne.n	801452e <_printf_float+0x1b2>
 80144fa:	2900      	cmp	r1, #0
 80144fc:	6863      	ldr	r3, [r4, #4]
 80144fe:	dd0c      	ble.n	801451a <_printf_float+0x19e>
 8014500:	6121      	str	r1, [r4, #16]
 8014502:	b913      	cbnz	r3, 801450a <_printf_float+0x18e>
 8014504:	6822      	ldr	r2, [r4, #0]
 8014506:	07d2      	lsls	r2, r2, #31
 8014508:	d502      	bpl.n	8014510 <_printf_float+0x194>
 801450a:	3301      	adds	r3, #1
 801450c:	440b      	add	r3, r1
 801450e:	6123      	str	r3, [r4, #16]
 8014510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014512:	65a3      	str	r3, [r4, #88]	; 0x58
 8014514:	f04f 0900 	mov.w	r9, #0
 8014518:	e7d9      	b.n	80144ce <_printf_float+0x152>
 801451a:	b913      	cbnz	r3, 8014522 <_printf_float+0x1a6>
 801451c:	6822      	ldr	r2, [r4, #0]
 801451e:	07d0      	lsls	r0, r2, #31
 8014520:	d501      	bpl.n	8014526 <_printf_float+0x1aa>
 8014522:	3302      	adds	r3, #2
 8014524:	e7f3      	b.n	801450e <_printf_float+0x192>
 8014526:	2301      	movs	r3, #1
 8014528:	e7f1      	b.n	801450e <_printf_float+0x192>
 801452a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801452e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014532:	4293      	cmp	r3, r2
 8014534:	db05      	blt.n	8014542 <_printf_float+0x1c6>
 8014536:	6822      	ldr	r2, [r4, #0]
 8014538:	6123      	str	r3, [r4, #16]
 801453a:	07d1      	lsls	r1, r2, #31
 801453c:	d5e8      	bpl.n	8014510 <_printf_float+0x194>
 801453e:	3301      	adds	r3, #1
 8014540:	e7e5      	b.n	801450e <_printf_float+0x192>
 8014542:	2b00      	cmp	r3, #0
 8014544:	bfd4      	ite	le
 8014546:	f1c3 0302 	rsble	r3, r3, #2
 801454a:	2301      	movgt	r3, #1
 801454c:	4413      	add	r3, r2
 801454e:	e7de      	b.n	801450e <_printf_float+0x192>
 8014550:	6823      	ldr	r3, [r4, #0]
 8014552:	055a      	lsls	r2, r3, #21
 8014554:	d407      	bmi.n	8014566 <_printf_float+0x1ea>
 8014556:	6923      	ldr	r3, [r4, #16]
 8014558:	4642      	mov	r2, r8
 801455a:	4631      	mov	r1, r6
 801455c:	4628      	mov	r0, r5
 801455e:	47b8      	blx	r7
 8014560:	3001      	adds	r0, #1
 8014562:	d12b      	bne.n	80145bc <_printf_float+0x240>
 8014564:	e767      	b.n	8014436 <_printf_float+0xba>
 8014566:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801456a:	f240 80dc 	bls.w	8014726 <_printf_float+0x3aa>
 801456e:	2200      	movs	r2, #0
 8014570:	2300      	movs	r3, #0
 8014572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014576:	f7f4 f9df 	bl	8008938 <__aeabi_dcmpeq>
 801457a:	2800      	cmp	r0, #0
 801457c:	d033      	beq.n	80145e6 <_printf_float+0x26a>
 801457e:	2301      	movs	r3, #1
 8014580:	4a41      	ldr	r2, [pc, #260]	; (8014688 <_printf_float+0x30c>)
 8014582:	4631      	mov	r1, r6
 8014584:	4628      	mov	r0, r5
 8014586:	47b8      	blx	r7
 8014588:	3001      	adds	r0, #1
 801458a:	f43f af54 	beq.w	8014436 <_printf_float+0xba>
 801458e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014592:	429a      	cmp	r2, r3
 8014594:	db02      	blt.n	801459c <_printf_float+0x220>
 8014596:	6823      	ldr	r3, [r4, #0]
 8014598:	07d8      	lsls	r0, r3, #31
 801459a:	d50f      	bpl.n	80145bc <_printf_float+0x240>
 801459c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80145a0:	4631      	mov	r1, r6
 80145a2:	4628      	mov	r0, r5
 80145a4:	47b8      	blx	r7
 80145a6:	3001      	adds	r0, #1
 80145a8:	f43f af45 	beq.w	8014436 <_printf_float+0xba>
 80145ac:	f04f 0800 	mov.w	r8, #0
 80145b0:	f104 091a 	add.w	r9, r4, #26
 80145b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145b6:	3b01      	subs	r3, #1
 80145b8:	4543      	cmp	r3, r8
 80145ba:	dc09      	bgt.n	80145d0 <_printf_float+0x254>
 80145bc:	6823      	ldr	r3, [r4, #0]
 80145be:	079b      	lsls	r3, r3, #30
 80145c0:	f100 8103 	bmi.w	80147ca <_printf_float+0x44e>
 80145c4:	68e0      	ldr	r0, [r4, #12]
 80145c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145c8:	4298      	cmp	r0, r3
 80145ca:	bfb8      	it	lt
 80145cc:	4618      	movlt	r0, r3
 80145ce:	e734      	b.n	801443a <_printf_float+0xbe>
 80145d0:	2301      	movs	r3, #1
 80145d2:	464a      	mov	r2, r9
 80145d4:	4631      	mov	r1, r6
 80145d6:	4628      	mov	r0, r5
 80145d8:	47b8      	blx	r7
 80145da:	3001      	adds	r0, #1
 80145dc:	f43f af2b 	beq.w	8014436 <_printf_float+0xba>
 80145e0:	f108 0801 	add.w	r8, r8, #1
 80145e4:	e7e6      	b.n	80145b4 <_printf_float+0x238>
 80145e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	dc2b      	bgt.n	8014644 <_printf_float+0x2c8>
 80145ec:	2301      	movs	r3, #1
 80145ee:	4a26      	ldr	r2, [pc, #152]	; (8014688 <_printf_float+0x30c>)
 80145f0:	4631      	mov	r1, r6
 80145f2:	4628      	mov	r0, r5
 80145f4:	47b8      	blx	r7
 80145f6:	3001      	adds	r0, #1
 80145f8:	f43f af1d 	beq.w	8014436 <_printf_float+0xba>
 80145fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145fe:	b923      	cbnz	r3, 801460a <_printf_float+0x28e>
 8014600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014602:	b913      	cbnz	r3, 801460a <_printf_float+0x28e>
 8014604:	6823      	ldr	r3, [r4, #0]
 8014606:	07d9      	lsls	r1, r3, #31
 8014608:	d5d8      	bpl.n	80145bc <_printf_float+0x240>
 801460a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801460e:	4631      	mov	r1, r6
 8014610:	4628      	mov	r0, r5
 8014612:	47b8      	blx	r7
 8014614:	3001      	adds	r0, #1
 8014616:	f43f af0e 	beq.w	8014436 <_printf_float+0xba>
 801461a:	f04f 0900 	mov.w	r9, #0
 801461e:	f104 0a1a 	add.w	sl, r4, #26
 8014622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014624:	425b      	negs	r3, r3
 8014626:	454b      	cmp	r3, r9
 8014628:	dc01      	bgt.n	801462e <_printf_float+0x2b2>
 801462a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801462c:	e794      	b.n	8014558 <_printf_float+0x1dc>
 801462e:	2301      	movs	r3, #1
 8014630:	4652      	mov	r2, sl
 8014632:	4631      	mov	r1, r6
 8014634:	4628      	mov	r0, r5
 8014636:	47b8      	blx	r7
 8014638:	3001      	adds	r0, #1
 801463a:	f43f aefc 	beq.w	8014436 <_printf_float+0xba>
 801463e:	f109 0901 	add.w	r9, r9, #1
 8014642:	e7ee      	b.n	8014622 <_printf_float+0x2a6>
 8014644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014646:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014648:	429a      	cmp	r2, r3
 801464a:	bfa8      	it	ge
 801464c:	461a      	movge	r2, r3
 801464e:	2a00      	cmp	r2, #0
 8014650:	4691      	mov	r9, r2
 8014652:	dd07      	ble.n	8014664 <_printf_float+0x2e8>
 8014654:	4613      	mov	r3, r2
 8014656:	4631      	mov	r1, r6
 8014658:	4642      	mov	r2, r8
 801465a:	4628      	mov	r0, r5
 801465c:	47b8      	blx	r7
 801465e:	3001      	adds	r0, #1
 8014660:	f43f aee9 	beq.w	8014436 <_printf_float+0xba>
 8014664:	f104 031a 	add.w	r3, r4, #26
 8014668:	f04f 0b00 	mov.w	fp, #0
 801466c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014670:	9306      	str	r3, [sp, #24]
 8014672:	e015      	b.n	80146a0 <_printf_float+0x324>
 8014674:	7fefffff 	.word	0x7fefffff
 8014678:	08019271 	.word	0x08019271
 801467c:	0801926d 	.word	0x0801926d
 8014680:	08019279 	.word	0x08019279
 8014684:	08019275 	.word	0x08019275
 8014688:	080192ba 	.word	0x080192ba
 801468c:	2301      	movs	r3, #1
 801468e:	9a06      	ldr	r2, [sp, #24]
 8014690:	4631      	mov	r1, r6
 8014692:	4628      	mov	r0, r5
 8014694:	47b8      	blx	r7
 8014696:	3001      	adds	r0, #1
 8014698:	f43f aecd 	beq.w	8014436 <_printf_float+0xba>
 801469c:	f10b 0b01 	add.w	fp, fp, #1
 80146a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80146a4:	ebaa 0309 	sub.w	r3, sl, r9
 80146a8:	455b      	cmp	r3, fp
 80146aa:	dcef      	bgt.n	801468c <_printf_float+0x310>
 80146ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80146b0:	429a      	cmp	r2, r3
 80146b2:	44d0      	add	r8, sl
 80146b4:	db15      	blt.n	80146e2 <_printf_float+0x366>
 80146b6:	6823      	ldr	r3, [r4, #0]
 80146b8:	07da      	lsls	r2, r3, #31
 80146ba:	d412      	bmi.n	80146e2 <_printf_float+0x366>
 80146bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80146c0:	eba3 020a 	sub.w	r2, r3, sl
 80146c4:	eba3 0a01 	sub.w	sl, r3, r1
 80146c8:	4592      	cmp	sl, r2
 80146ca:	bfa8      	it	ge
 80146cc:	4692      	movge	sl, r2
 80146ce:	f1ba 0f00 	cmp.w	sl, #0
 80146d2:	dc0e      	bgt.n	80146f2 <_printf_float+0x376>
 80146d4:	f04f 0800 	mov.w	r8, #0
 80146d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80146dc:	f104 091a 	add.w	r9, r4, #26
 80146e0:	e019      	b.n	8014716 <_printf_float+0x39a>
 80146e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146e6:	4631      	mov	r1, r6
 80146e8:	4628      	mov	r0, r5
 80146ea:	47b8      	blx	r7
 80146ec:	3001      	adds	r0, #1
 80146ee:	d1e5      	bne.n	80146bc <_printf_float+0x340>
 80146f0:	e6a1      	b.n	8014436 <_printf_float+0xba>
 80146f2:	4653      	mov	r3, sl
 80146f4:	4642      	mov	r2, r8
 80146f6:	4631      	mov	r1, r6
 80146f8:	4628      	mov	r0, r5
 80146fa:	47b8      	blx	r7
 80146fc:	3001      	adds	r0, #1
 80146fe:	d1e9      	bne.n	80146d4 <_printf_float+0x358>
 8014700:	e699      	b.n	8014436 <_printf_float+0xba>
 8014702:	2301      	movs	r3, #1
 8014704:	464a      	mov	r2, r9
 8014706:	4631      	mov	r1, r6
 8014708:	4628      	mov	r0, r5
 801470a:	47b8      	blx	r7
 801470c:	3001      	adds	r0, #1
 801470e:	f43f ae92 	beq.w	8014436 <_printf_float+0xba>
 8014712:	f108 0801 	add.w	r8, r8, #1
 8014716:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801471a:	1a9b      	subs	r3, r3, r2
 801471c:	eba3 030a 	sub.w	r3, r3, sl
 8014720:	4543      	cmp	r3, r8
 8014722:	dcee      	bgt.n	8014702 <_printf_float+0x386>
 8014724:	e74a      	b.n	80145bc <_printf_float+0x240>
 8014726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014728:	2a01      	cmp	r2, #1
 801472a:	dc01      	bgt.n	8014730 <_printf_float+0x3b4>
 801472c:	07db      	lsls	r3, r3, #31
 801472e:	d53a      	bpl.n	80147a6 <_printf_float+0x42a>
 8014730:	2301      	movs	r3, #1
 8014732:	4642      	mov	r2, r8
 8014734:	4631      	mov	r1, r6
 8014736:	4628      	mov	r0, r5
 8014738:	47b8      	blx	r7
 801473a:	3001      	adds	r0, #1
 801473c:	f43f ae7b 	beq.w	8014436 <_printf_float+0xba>
 8014740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014744:	4631      	mov	r1, r6
 8014746:	4628      	mov	r0, r5
 8014748:	47b8      	blx	r7
 801474a:	3001      	adds	r0, #1
 801474c:	f108 0801 	add.w	r8, r8, #1
 8014750:	f43f ae71 	beq.w	8014436 <_printf_float+0xba>
 8014754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014756:	2200      	movs	r2, #0
 8014758:	f103 3aff 	add.w	sl, r3, #4294967295
 801475c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014760:	2300      	movs	r3, #0
 8014762:	f7f4 f8e9 	bl	8008938 <__aeabi_dcmpeq>
 8014766:	b9c8      	cbnz	r0, 801479c <_printf_float+0x420>
 8014768:	4653      	mov	r3, sl
 801476a:	4642      	mov	r2, r8
 801476c:	4631      	mov	r1, r6
 801476e:	4628      	mov	r0, r5
 8014770:	47b8      	blx	r7
 8014772:	3001      	adds	r0, #1
 8014774:	d10e      	bne.n	8014794 <_printf_float+0x418>
 8014776:	e65e      	b.n	8014436 <_printf_float+0xba>
 8014778:	2301      	movs	r3, #1
 801477a:	4652      	mov	r2, sl
 801477c:	4631      	mov	r1, r6
 801477e:	4628      	mov	r0, r5
 8014780:	47b8      	blx	r7
 8014782:	3001      	adds	r0, #1
 8014784:	f43f ae57 	beq.w	8014436 <_printf_float+0xba>
 8014788:	f108 0801 	add.w	r8, r8, #1
 801478c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801478e:	3b01      	subs	r3, #1
 8014790:	4543      	cmp	r3, r8
 8014792:	dcf1      	bgt.n	8014778 <_printf_float+0x3fc>
 8014794:	464b      	mov	r3, r9
 8014796:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801479a:	e6de      	b.n	801455a <_printf_float+0x1de>
 801479c:	f04f 0800 	mov.w	r8, #0
 80147a0:	f104 0a1a 	add.w	sl, r4, #26
 80147a4:	e7f2      	b.n	801478c <_printf_float+0x410>
 80147a6:	2301      	movs	r3, #1
 80147a8:	e7df      	b.n	801476a <_printf_float+0x3ee>
 80147aa:	2301      	movs	r3, #1
 80147ac:	464a      	mov	r2, r9
 80147ae:	4631      	mov	r1, r6
 80147b0:	4628      	mov	r0, r5
 80147b2:	47b8      	blx	r7
 80147b4:	3001      	adds	r0, #1
 80147b6:	f43f ae3e 	beq.w	8014436 <_printf_float+0xba>
 80147ba:	f108 0801 	add.w	r8, r8, #1
 80147be:	68e3      	ldr	r3, [r4, #12]
 80147c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80147c2:	1a9b      	subs	r3, r3, r2
 80147c4:	4543      	cmp	r3, r8
 80147c6:	dcf0      	bgt.n	80147aa <_printf_float+0x42e>
 80147c8:	e6fc      	b.n	80145c4 <_printf_float+0x248>
 80147ca:	f04f 0800 	mov.w	r8, #0
 80147ce:	f104 0919 	add.w	r9, r4, #25
 80147d2:	e7f4      	b.n	80147be <_printf_float+0x442>
 80147d4:	2900      	cmp	r1, #0
 80147d6:	f43f ae8b 	beq.w	80144f0 <_printf_float+0x174>
 80147da:	2300      	movs	r3, #0
 80147dc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80147e0:	ab09      	add	r3, sp, #36	; 0x24
 80147e2:	9300      	str	r3, [sp, #0]
 80147e4:	ec49 8b10 	vmov	d0, r8, r9
 80147e8:	6022      	str	r2, [r4, #0]
 80147ea:	f8cd a004 	str.w	sl, [sp, #4]
 80147ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80147f2:	4628      	mov	r0, r5
 80147f4:	f7ff fd2e 	bl	8014254 <__cvt>
 80147f8:	4680      	mov	r8, r0
 80147fa:	e648      	b.n	801448e <_printf_float+0x112>

080147fc <_printf_common>:
 80147fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014800:	4691      	mov	r9, r2
 8014802:	461f      	mov	r7, r3
 8014804:	688a      	ldr	r2, [r1, #8]
 8014806:	690b      	ldr	r3, [r1, #16]
 8014808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801480c:	4293      	cmp	r3, r2
 801480e:	bfb8      	it	lt
 8014810:	4613      	movlt	r3, r2
 8014812:	f8c9 3000 	str.w	r3, [r9]
 8014816:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801481a:	4606      	mov	r6, r0
 801481c:	460c      	mov	r4, r1
 801481e:	b112      	cbz	r2, 8014826 <_printf_common+0x2a>
 8014820:	3301      	adds	r3, #1
 8014822:	f8c9 3000 	str.w	r3, [r9]
 8014826:	6823      	ldr	r3, [r4, #0]
 8014828:	0699      	lsls	r1, r3, #26
 801482a:	bf42      	ittt	mi
 801482c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014830:	3302      	addmi	r3, #2
 8014832:	f8c9 3000 	strmi.w	r3, [r9]
 8014836:	6825      	ldr	r5, [r4, #0]
 8014838:	f015 0506 	ands.w	r5, r5, #6
 801483c:	d107      	bne.n	801484e <_printf_common+0x52>
 801483e:	f104 0a19 	add.w	sl, r4, #25
 8014842:	68e3      	ldr	r3, [r4, #12]
 8014844:	f8d9 2000 	ldr.w	r2, [r9]
 8014848:	1a9b      	subs	r3, r3, r2
 801484a:	42ab      	cmp	r3, r5
 801484c:	dc28      	bgt.n	80148a0 <_printf_common+0xa4>
 801484e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014852:	6822      	ldr	r2, [r4, #0]
 8014854:	3300      	adds	r3, #0
 8014856:	bf18      	it	ne
 8014858:	2301      	movne	r3, #1
 801485a:	0692      	lsls	r2, r2, #26
 801485c:	d42d      	bmi.n	80148ba <_printf_common+0xbe>
 801485e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014862:	4639      	mov	r1, r7
 8014864:	4630      	mov	r0, r6
 8014866:	47c0      	blx	r8
 8014868:	3001      	adds	r0, #1
 801486a:	d020      	beq.n	80148ae <_printf_common+0xb2>
 801486c:	6823      	ldr	r3, [r4, #0]
 801486e:	68e5      	ldr	r5, [r4, #12]
 8014870:	f8d9 2000 	ldr.w	r2, [r9]
 8014874:	f003 0306 	and.w	r3, r3, #6
 8014878:	2b04      	cmp	r3, #4
 801487a:	bf08      	it	eq
 801487c:	1aad      	subeq	r5, r5, r2
 801487e:	68a3      	ldr	r3, [r4, #8]
 8014880:	6922      	ldr	r2, [r4, #16]
 8014882:	bf0c      	ite	eq
 8014884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014888:	2500      	movne	r5, #0
 801488a:	4293      	cmp	r3, r2
 801488c:	bfc4      	itt	gt
 801488e:	1a9b      	subgt	r3, r3, r2
 8014890:	18ed      	addgt	r5, r5, r3
 8014892:	f04f 0900 	mov.w	r9, #0
 8014896:	341a      	adds	r4, #26
 8014898:	454d      	cmp	r5, r9
 801489a:	d11a      	bne.n	80148d2 <_printf_common+0xd6>
 801489c:	2000      	movs	r0, #0
 801489e:	e008      	b.n	80148b2 <_printf_common+0xb6>
 80148a0:	2301      	movs	r3, #1
 80148a2:	4652      	mov	r2, sl
 80148a4:	4639      	mov	r1, r7
 80148a6:	4630      	mov	r0, r6
 80148a8:	47c0      	blx	r8
 80148aa:	3001      	adds	r0, #1
 80148ac:	d103      	bne.n	80148b6 <_printf_common+0xba>
 80148ae:	f04f 30ff 	mov.w	r0, #4294967295
 80148b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148b6:	3501      	adds	r5, #1
 80148b8:	e7c3      	b.n	8014842 <_printf_common+0x46>
 80148ba:	18e1      	adds	r1, r4, r3
 80148bc:	1c5a      	adds	r2, r3, #1
 80148be:	2030      	movs	r0, #48	; 0x30
 80148c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80148c4:	4422      	add	r2, r4
 80148c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80148ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80148ce:	3302      	adds	r3, #2
 80148d0:	e7c5      	b.n	801485e <_printf_common+0x62>
 80148d2:	2301      	movs	r3, #1
 80148d4:	4622      	mov	r2, r4
 80148d6:	4639      	mov	r1, r7
 80148d8:	4630      	mov	r0, r6
 80148da:	47c0      	blx	r8
 80148dc:	3001      	adds	r0, #1
 80148de:	d0e6      	beq.n	80148ae <_printf_common+0xb2>
 80148e0:	f109 0901 	add.w	r9, r9, #1
 80148e4:	e7d8      	b.n	8014898 <_printf_common+0x9c>
	...

080148e8 <_printf_i>:
 80148e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80148f0:	460c      	mov	r4, r1
 80148f2:	7e09      	ldrb	r1, [r1, #24]
 80148f4:	b085      	sub	sp, #20
 80148f6:	296e      	cmp	r1, #110	; 0x6e
 80148f8:	4617      	mov	r7, r2
 80148fa:	4606      	mov	r6, r0
 80148fc:	4698      	mov	r8, r3
 80148fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014900:	f000 80b3 	beq.w	8014a6a <_printf_i+0x182>
 8014904:	d822      	bhi.n	801494c <_printf_i+0x64>
 8014906:	2963      	cmp	r1, #99	; 0x63
 8014908:	d036      	beq.n	8014978 <_printf_i+0x90>
 801490a:	d80a      	bhi.n	8014922 <_printf_i+0x3a>
 801490c:	2900      	cmp	r1, #0
 801490e:	f000 80b9 	beq.w	8014a84 <_printf_i+0x19c>
 8014912:	2958      	cmp	r1, #88	; 0x58
 8014914:	f000 8083 	beq.w	8014a1e <_printf_i+0x136>
 8014918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801491c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014920:	e032      	b.n	8014988 <_printf_i+0xa0>
 8014922:	2964      	cmp	r1, #100	; 0x64
 8014924:	d001      	beq.n	801492a <_printf_i+0x42>
 8014926:	2969      	cmp	r1, #105	; 0x69
 8014928:	d1f6      	bne.n	8014918 <_printf_i+0x30>
 801492a:	6820      	ldr	r0, [r4, #0]
 801492c:	6813      	ldr	r3, [r2, #0]
 801492e:	0605      	lsls	r5, r0, #24
 8014930:	f103 0104 	add.w	r1, r3, #4
 8014934:	d52a      	bpl.n	801498c <_printf_i+0xa4>
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	6011      	str	r1, [r2, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	da03      	bge.n	8014946 <_printf_i+0x5e>
 801493e:	222d      	movs	r2, #45	; 0x2d
 8014940:	425b      	negs	r3, r3
 8014942:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014946:	486f      	ldr	r0, [pc, #444]	; (8014b04 <_printf_i+0x21c>)
 8014948:	220a      	movs	r2, #10
 801494a:	e039      	b.n	80149c0 <_printf_i+0xd8>
 801494c:	2973      	cmp	r1, #115	; 0x73
 801494e:	f000 809d 	beq.w	8014a8c <_printf_i+0x1a4>
 8014952:	d808      	bhi.n	8014966 <_printf_i+0x7e>
 8014954:	296f      	cmp	r1, #111	; 0x6f
 8014956:	d020      	beq.n	801499a <_printf_i+0xb2>
 8014958:	2970      	cmp	r1, #112	; 0x70
 801495a:	d1dd      	bne.n	8014918 <_printf_i+0x30>
 801495c:	6823      	ldr	r3, [r4, #0]
 801495e:	f043 0320 	orr.w	r3, r3, #32
 8014962:	6023      	str	r3, [r4, #0]
 8014964:	e003      	b.n	801496e <_printf_i+0x86>
 8014966:	2975      	cmp	r1, #117	; 0x75
 8014968:	d017      	beq.n	801499a <_printf_i+0xb2>
 801496a:	2978      	cmp	r1, #120	; 0x78
 801496c:	d1d4      	bne.n	8014918 <_printf_i+0x30>
 801496e:	2378      	movs	r3, #120	; 0x78
 8014970:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014974:	4864      	ldr	r0, [pc, #400]	; (8014b08 <_printf_i+0x220>)
 8014976:	e055      	b.n	8014a24 <_printf_i+0x13c>
 8014978:	6813      	ldr	r3, [r2, #0]
 801497a:	1d19      	adds	r1, r3, #4
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	6011      	str	r1, [r2, #0]
 8014980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014988:	2301      	movs	r3, #1
 801498a:	e08c      	b.n	8014aa6 <_printf_i+0x1be>
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	6011      	str	r1, [r2, #0]
 8014990:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014994:	bf18      	it	ne
 8014996:	b21b      	sxthne	r3, r3
 8014998:	e7cf      	b.n	801493a <_printf_i+0x52>
 801499a:	6813      	ldr	r3, [r2, #0]
 801499c:	6825      	ldr	r5, [r4, #0]
 801499e:	1d18      	adds	r0, r3, #4
 80149a0:	6010      	str	r0, [r2, #0]
 80149a2:	0628      	lsls	r0, r5, #24
 80149a4:	d501      	bpl.n	80149aa <_printf_i+0xc2>
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	e002      	b.n	80149b0 <_printf_i+0xc8>
 80149aa:	0668      	lsls	r0, r5, #25
 80149ac:	d5fb      	bpl.n	80149a6 <_printf_i+0xbe>
 80149ae:	881b      	ldrh	r3, [r3, #0]
 80149b0:	4854      	ldr	r0, [pc, #336]	; (8014b04 <_printf_i+0x21c>)
 80149b2:	296f      	cmp	r1, #111	; 0x6f
 80149b4:	bf14      	ite	ne
 80149b6:	220a      	movne	r2, #10
 80149b8:	2208      	moveq	r2, #8
 80149ba:	2100      	movs	r1, #0
 80149bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80149c0:	6865      	ldr	r5, [r4, #4]
 80149c2:	60a5      	str	r5, [r4, #8]
 80149c4:	2d00      	cmp	r5, #0
 80149c6:	f2c0 8095 	blt.w	8014af4 <_printf_i+0x20c>
 80149ca:	6821      	ldr	r1, [r4, #0]
 80149cc:	f021 0104 	bic.w	r1, r1, #4
 80149d0:	6021      	str	r1, [r4, #0]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d13d      	bne.n	8014a52 <_printf_i+0x16a>
 80149d6:	2d00      	cmp	r5, #0
 80149d8:	f040 808e 	bne.w	8014af8 <_printf_i+0x210>
 80149dc:	4665      	mov	r5, ip
 80149de:	2a08      	cmp	r2, #8
 80149e0:	d10b      	bne.n	80149fa <_printf_i+0x112>
 80149e2:	6823      	ldr	r3, [r4, #0]
 80149e4:	07db      	lsls	r3, r3, #31
 80149e6:	d508      	bpl.n	80149fa <_printf_i+0x112>
 80149e8:	6923      	ldr	r3, [r4, #16]
 80149ea:	6862      	ldr	r2, [r4, #4]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	bfde      	ittt	le
 80149f0:	2330      	movle	r3, #48	; 0x30
 80149f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80149f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80149fa:	ebac 0305 	sub.w	r3, ip, r5
 80149fe:	6123      	str	r3, [r4, #16]
 8014a00:	f8cd 8000 	str.w	r8, [sp]
 8014a04:	463b      	mov	r3, r7
 8014a06:	aa03      	add	r2, sp, #12
 8014a08:	4621      	mov	r1, r4
 8014a0a:	4630      	mov	r0, r6
 8014a0c:	f7ff fef6 	bl	80147fc <_printf_common>
 8014a10:	3001      	adds	r0, #1
 8014a12:	d14d      	bne.n	8014ab0 <_printf_i+0x1c8>
 8014a14:	f04f 30ff 	mov.w	r0, #4294967295
 8014a18:	b005      	add	sp, #20
 8014a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a1e:	4839      	ldr	r0, [pc, #228]	; (8014b04 <_printf_i+0x21c>)
 8014a20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014a24:	6813      	ldr	r3, [r2, #0]
 8014a26:	6821      	ldr	r1, [r4, #0]
 8014a28:	1d1d      	adds	r5, r3, #4
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	6015      	str	r5, [r2, #0]
 8014a2e:	060a      	lsls	r2, r1, #24
 8014a30:	d50b      	bpl.n	8014a4a <_printf_i+0x162>
 8014a32:	07ca      	lsls	r2, r1, #31
 8014a34:	bf44      	itt	mi
 8014a36:	f041 0120 	orrmi.w	r1, r1, #32
 8014a3a:	6021      	strmi	r1, [r4, #0]
 8014a3c:	b91b      	cbnz	r3, 8014a46 <_printf_i+0x15e>
 8014a3e:	6822      	ldr	r2, [r4, #0]
 8014a40:	f022 0220 	bic.w	r2, r2, #32
 8014a44:	6022      	str	r2, [r4, #0]
 8014a46:	2210      	movs	r2, #16
 8014a48:	e7b7      	b.n	80149ba <_printf_i+0xd2>
 8014a4a:	064d      	lsls	r5, r1, #25
 8014a4c:	bf48      	it	mi
 8014a4e:	b29b      	uxthmi	r3, r3
 8014a50:	e7ef      	b.n	8014a32 <_printf_i+0x14a>
 8014a52:	4665      	mov	r5, ip
 8014a54:	fbb3 f1f2 	udiv	r1, r3, r2
 8014a58:	fb02 3311 	mls	r3, r2, r1, r3
 8014a5c:	5cc3      	ldrb	r3, [r0, r3]
 8014a5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014a62:	460b      	mov	r3, r1
 8014a64:	2900      	cmp	r1, #0
 8014a66:	d1f5      	bne.n	8014a54 <_printf_i+0x16c>
 8014a68:	e7b9      	b.n	80149de <_printf_i+0xf6>
 8014a6a:	6813      	ldr	r3, [r2, #0]
 8014a6c:	6825      	ldr	r5, [r4, #0]
 8014a6e:	6961      	ldr	r1, [r4, #20]
 8014a70:	1d18      	adds	r0, r3, #4
 8014a72:	6010      	str	r0, [r2, #0]
 8014a74:	0628      	lsls	r0, r5, #24
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	d501      	bpl.n	8014a7e <_printf_i+0x196>
 8014a7a:	6019      	str	r1, [r3, #0]
 8014a7c:	e002      	b.n	8014a84 <_printf_i+0x19c>
 8014a7e:	066a      	lsls	r2, r5, #25
 8014a80:	d5fb      	bpl.n	8014a7a <_printf_i+0x192>
 8014a82:	8019      	strh	r1, [r3, #0]
 8014a84:	2300      	movs	r3, #0
 8014a86:	6123      	str	r3, [r4, #16]
 8014a88:	4665      	mov	r5, ip
 8014a8a:	e7b9      	b.n	8014a00 <_printf_i+0x118>
 8014a8c:	6813      	ldr	r3, [r2, #0]
 8014a8e:	1d19      	adds	r1, r3, #4
 8014a90:	6011      	str	r1, [r2, #0]
 8014a92:	681d      	ldr	r5, [r3, #0]
 8014a94:	6862      	ldr	r2, [r4, #4]
 8014a96:	2100      	movs	r1, #0
 8014a98:	4628      	mov	r0, r5
 8014a9a:	f7f3 fad9 	bl	8008050 <memchr>
 8014a9e:	b108      	cbz	r0, 8014aa4 <_printf_i+0x1bc>
 8014aa0:	1b40      	subs	r0, r0, r5
 8014aa2:	6060      	str	r0, [r4, #4]
 8014aa4:	6863      	ldr	r3, [r4, #4]
 8014aa6:	6123      	str	r3, [r4, #16]
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014aae:	e7a7      	b.n	8014a00 <_printf_i+0x118>
 8014ab0:	6923      	ldr	r3, [r4, #16]
 8014ab2:	462a      	mov	r2, r5
 8014ab4:	4639      	mov	r1, r7
 8014ab6:	4630      	mov	r0, r6
 8014ab8:	47c0      	blx	r8
 8014aba:	3001      	adds	r0, #1
 8014abc:	d0aa      	beq.n	8014a14 <_printf_i+0x12c>
 8014abe:	6823      	ldr	r3, [r4, #0]
 8014ac0:	079b      	lsls	r3, r3, #30
 8014ac2:	d413      	bmi.n	8014aec <_printf_i+0x204>
 8014ac4:	68e0      	ldr	r0, [r4, #12]
 8014ac6:	9b03      	ldr	r3, [sp, #12]
 8014ac8:	4298      	cmp	r0, r3
 8014aca:	bfb8      	it	lt
 8014acc:	4618      	movlt	r0, r3
 8014ace:	e7a3      	b.n	8014a18 <_printf_i+0x130>
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	464a      	mov	r2, r9
 8014ad4:	4639      	mov	r1, r7
 8014ad6:	4630      	mov	r0, r6
 8014ad8:	47c0      	blx	r8
 8014ada:	3001      	adds	r0, #1
 8014adc:	d09a      	beq.n	8014a14 <_printf_i+0x12c>
 8014ade:	3501      	adds	r5, #1
 8014ae0:	68e3      	ldr	r3, [r4, #12]
 8014ae2:	9a03      	ldr	r2, [sp, #12]
 8014ae4:	1a9b      	subs	r3, r3, r2
 8014ae6:	42ab      	cmp	r3, r5
 8014ae8:	dcf2      	bgt.n	8014ad0 <_printf_i+0x1e8>
 8014aea:	e7eb      	b.n	8014ac4 <_printf_i+0x1dc>
 8014aec:	2500      	movs	r5, #0
 8014aee:	f104 0919 	add.w	r9, r4, #25
 8014af2:	e7f5      	b.n	8014ae0 <_printf_i+0x1f8>
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d1ac      	bne.n	8014a52 <_printf_i+0x16a>
 8014af8:	7803      	ldrb	r3, [r0, #0]
 8014afa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014afe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b02:	e76c      	b.n	80149de <_printf_i+0xf6>
 8014b04:	0801927d 	.word	0x0801927d
 8014b08:	0801928e 	.word	0x0801928e

08014b0c <__svfiscanf_r>:
 8014b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b10:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8014b14:	460c      	mov	r4, r1
 8014b16:	2100      	movs	r1, #0
 8014b18:	9144      	str	r1, [sp, #272]	; 0x110
 8014b1a:	9145      	str	r1, [sp, #276]	; 0x114
 8014b1c:	499f      	ldr	r1, [pc, #636]	; (8014d9c <__svfiscanf_r+0x290>)
 8014b1e:	91a0      	str	r1, [sp, #640]	; 0x280
 8014b20:	f10d 0804 	add.w	r8, sp, #4
 8014b24:	499e      	ldr	r1, [pc, #632]	; (8014da0 <__svfiscanf_r+0x294>)
 8014b26:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8014da4 <__svfiscanf_r+0x298>
 8014b2a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014b2e:	4606      	mov	r6, r0
 8014b30:	4692      	mov	sl, r2
 8014b32:	91a1      	str	r1, [sp, #644]	; 0x284
 8014b34:	9300      	str	r3, [sp, #0]
 8014b36:	270a      	movs	r7, #10
 8014b38:	f89a 3000 	ldrb.w	r3, [sl]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	f000 812a 	beq.w	8014d96 <__svfiscanf_r+0x28a>
 8014b42:	4655      	mov	r5, sl
 8014b44:	f003 faec 	bl	8018120 <__locale_ctype_ptr>
 8014b48:	f815 bb01 	ldrb.w	fp, [r5], #1
 8014b4c:	4458      	add	r0, fp
 8014b4e:	7843      	ldrb	r3, [r0, #1]
 8014b50:	f013 0308 	ands.w	r3, r3, #8
 8014b54:	d01c      	beq.n	8014b90 <__svfiscanf_r+0x84>
 8014b56:	6863      	ldr	r3, [r4, #4]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	dd12      	ble.n	8014b82 <__svfiscanf_r+0x76>
 8014b5c:	f003 fae0 	bl	8018120 <__locale_ctype_ptr>
 8014b60:	6823      	ldr	r3, [r4, #0]
 8014b62:	781a      	ldrb	r2, [r3, #0]
 8014b64:	4410      	add	r0, r2
 8014b66:	7842      	ldrb	r2, [r0, #1]
 8014b68:	0712      	lsls	r2, r2, #28
 8014b6a:	d401      	bmi.n	8014b70 <__svfiscanf_r+0x64>
 8014b6c:	46aa      	mov	sl, r5
 8014b6e:	e7e3      	b.n	8014b38 <__svfiscanf_r+0x2c>
 8014b70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014b72:	3201      	adds	r2, #1
 8014b74:	9245      	str	r2, [sp, #276]	; 0x114
 8014b76:	6862      	ldr	r2, [r4, #4]
 8014b78:	3301      	adds	r3, #1
 8014b7a:	3a01      	subs	r2, #1
 8014b7c:	6062      	str	r2, [r4, #4]
 8014b7e:	6023      	str	r3, [r4, #0]
 8014b80:	e7e9      	b.n	8014b56 <__svfiscanf_r+0x4a>
 8014b82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014b84:	4621      	mov	r1, r4
 8014b86:	4630      	mov	r0, r6
 8014b88:	4798      	blx	r3
 8014b8a:	2800      	cmp	r0, #0
 8014b8c:	d0e6      	beq.n	8014b5c <__svfiscanf_r+0x50>
 8014b8e:	e7ed      	b.n	8014b6c <__svfiscanf_r+0x60>
 8014b90:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8014b94:	f040 8082 	bne.w	8014c9c <__svfiscanf_r+0x190>
 8014b98:	9343      	str	r3, [sp, #268]	; 0x10c
 8014b9a:	9341      	str	r3, [sp, #260]	; 0x104
 8014b9c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8014ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8014ba2:	d103      	bne.n	8014bac <__svfiscanf_r+0xa0>
 8014ba4:	2310      	movs	r3, #16
 8014ba6:	9341      	str	r3, [sp, #260]	; 0x104
 8014ba8:	f10a 0502 	add.w	r5, sl, #2
 8014bac:	46aa      	mov	sl, r5
 8014bae:	f815 1b01 	ldrb.w	r1, [r5], #1
 8014bb2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014bb6:	2a09      	cmp	r2, #9
 8014bb8:	d922      	bls.n	8014c00 <__svfiscanf_r+0xf4>
 8014bba:	2203      	movs	r2, #3
 8014bbc:	4879      	ldr	r0, [pc, #484]	; (8014da4 <__svfiscanf_r+0x298>)
 8014bbe:	f7f3 fa47 	bl	8008050 <memchr>
 8014bc2:	b138      	cbz	r0, 8014bd4 <__svfiscanf_r+0xc8>
 8014bc4:	eba0 0309 	sub.w	r3, r0, r9
 8014bc8:	2001      	movs	r0, #1
 8014bca:	4098      	lsls	r0, r3
 8014bcc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014bce:	4318      	orrs	r0, r3
 8014bd0:	9041      	str	r0, [sp, #260]	; 0x104
 8014bd2:	46aa      	mov	sl, r5
 8014bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8014bd8:	2b67      	cmp	r3, #103	; 0x67
 8014bda:	f10a 0501 	add.w	r5, sl, #1
 8014bde:	d82b      	bhi.n	8014c38 <__svfiscanf_r+0x12c>
 8014be0:	2b65      	cmp	r3, #101	; 0x65
 8014be2:	f080 809f 	bcs.w	8014d24 <__svfiscanf_r+0x218>
 8014be6:	2b47      	cmp	r3, #71	; 0x47
 8014be8:	d810      	bhi.n	8014c0c <__svfiscanf_r+0x100>
 8014bea:	2b45      	cmp	r3, #69	; 0x45
 8014bec:	f080 809a 	bcs.w	8014d24 <__svfiscanf_r+0x218>
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d06c      	beq.n	8014cce <__svfiscanf_r+0x1c2>
 8014bf4:	2b25      	cmp	r3, #37	; 0x25
 8014bf6:	d051      	beq.n	8014c9c <__svfiscanf_r+0x190>
 8014bf8:	2303      	movs	r3, #3
 8014bfa:	9347      	str	r3, [sp, #284]	; 0x11c
 8014bfc:	9742      	str	r7, [sp, #264]	; 0x108
 8014bfe:	e027      	b.n	8014c50 <__svfiscanf_r+0x144>
 8014c00:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014c02:	fb07 1303 	mla	r3, r7, r3, r1
 8014c06:	3b30      	subs	r3, #48	; 0x30
 8014c08:	9343      	str	r3, [sp, #268]	; 0x10c
 8014c0a:	e7cf      	b.n	8014bac <__svfiscanf_r+0xa0>
 8014c0c:	2b5b      	cmp	r3, #91	; 0x5b
 8014c0e:	d06a      	beq.n	8014ce6 <__svfiscanf_r+0x1da>
 8014c10:	d80c      	bhi.n	8014c2c <__svfiscanf_r+0x120>
 8014c12:	2b58      	cmp	r3, #88	; 0x58
 8014c14:	d1f0      	bne.n	8014bf8 <__svfiscanf_r+0xec>
 8014c16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014c1c:	9241      	str	r2, [sp, #260]	; 0x104
 8014c1e:	2210      	movs	r2, #16
 8014c20:	9242      	str	r2, [sp, #264]	; 0x108
 8014c22:	2b6e      	cmp	r3, #110	; 0x6e
 8014c24:	bf8c      	ite	hi
 8014c26:	2304      	movhi	r3, #4
 8014c28:	2303      	movls	r3, #3
 8014c2a:	e010      	b.n	8014c4e <__svfiscanf_r+0x142>
 8014c2c:	2b63      	cmp	r3, #99	; 0x63
 8014c2e:	d065      	beq.n	8014cfc <__svfiscanf_r+0x1f0>
 8014c30:	2b64      	cmp	r3, #100	; 0x64
 8014c32:	d1e1      	bne.n	8014bf8 <__svfiscanf_r+0xec>
 8014c34:	9742      	str	r7, [sp, #264]	; 0x108
 8014c36:	e7f4      	b.n	8014c22 <__svfiscanf_r+0x116>
 8014c38:	2b70      	cmp	r3, #112	; 0x70
 8014c3a:	d04b      	beq.n	8014cd4 <__svfiscanf_r+0x1c8>
 8014c3c:	d826      	bhi.n	8014c8c <__svfiscanf_r+0x180>
 8014c3e:	2b6e      	cmp	r3, #110	; 0x6e
 8014c40:	d062      	beq.n	8014d08 <__svfiscanf_r+0x1fc>
 8014c42:	d84c      	bhi.n	8014cde <__svfiscanf_r+0x1d2>
 8014c44:	2b69      	cmp	r3, #105	; 0x69
 8014c46:	d1d7      	bne.n	8014bf8 <__svfiscanf_r+0xec>
 8014c48:	2300      	movs	r3, #0
 8014c4a:	9342      	str	r3, [sp, #264]	; 0x108
 8014c4c:	2303      	movs	r3, #3
 8014c4e:	9347      	str	r3, [sp, #284]	; 0x11c
 8014c50:	6863      	ldr	r3, [r4, #4]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	dd68      	ble.n	8014d28 <__svfiscanf_r+0x21c>
 8014c56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014c58:	0659      	lsls	r1, r3, #25
 8014c5a:	d407      	bmi.n	8014c6c <__svfiscanf_r+0x160>
 8014c5c:	f003 fa60 	bl	8018120 <__locale_ctype_ptr>
 8014c60:	6823      	ldr	r3, [r4, #0]
 8014c62:	781a      	ldrb	r2, [r3, #0]
 8014c64:	4410      	add	r0, r2
 8014c66:	7842      	ldrb	r2, [r0, #1]
 8014c68:	0712      	lsls	r2, r2, #28
 8014c6a:	d464      	bmi.n	8014d36 <__svfiscanf_r+0x22a>
 8014c6c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014c6e:	2b02      	cmp	r3, #2
 8014c70:	dc73      	bgt.n	8014d5a <__svfiscanf_r+0x24e>
 8014c72:	466b      	mov	r3, sp
 8014c74:	4622      	mov	r2, r4
 8014c76:	a941      	add	r1, sp, #260	; 0x104
 8014c78:	4630      	mov	r0, r6
 8014c7a:	f000 faa1 	bl	80151c0 <_scanf_chars>
 8014c7e:	2801      	cmp	r0, #1
 8014c80:	f000 8089 	beq.w	8014d96 <__svfiscanf_r+0x28a>
 8014c84:	2802      	cmp	r0, #2
 8014c86:	f47f af71 	bne.w	8014b6c <__svfiscanf_r+0x60>
 8014c8a:	e01d      	b.n	8014cc8 <__svfiscanf_r+0x1bc>
 8014c8c:	2b75      	cmp	r3, #117	; 0x75
 8014c8e:	d0d1      	beq.n	8014c34 <__svfiscanf_r+0x128>
 8014c90:	2b78      	cmp	r3, #120	; 0x78
 8014c92:	d0c0      	beq.n	8014c16 <__svfiscanf_r+0x10a>
 8014c94:	2b73      	cmp	r3, #115	; 0x73
 8014c96:	d1af      	bne.n	8014bf8 <__svfiscanf_r+0xec>
 8014c98:	2302      	movs	r3, #2
 8014c9a:	e7d8      	b.n	8014c4e <__svfiscanf_r+0x142>
 8014c9c:	6863      	ldr	r3, [r4, #4]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	dd0c      	ble.n	8014cbc <__svfiscanf_r+0x1b0>
 8014ca2:	6823      	ldr	r3, [r4, #0]
 8014ca4:	781a      	ldrb	r2, [r3, #0]
 8014ca6:	455a      	cmp	r2, fp
 8014ca8:	d175      	bne.n	8014d96 <__svfiscanf_r+0x28a>
 8014caa:	3301      	adds	r3, #1
 8014cac:	6862      	ldr	r2, [r4, #4]
 8014cae:	6023      	str	r3, [r4, #0]
 8014cb0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014cb2:	3a01      	subs	r2, #1
 8014cb4:	3301      	adds	r3, #1
 8014cb6:	6062      	str	r2, [r4, #4]
 8014cb8:	9345      	str	r3, [sp, #276]	; 0x114
 8014cba:	e757      	b.n	8014b6c <__svfiscanf_r+0x60>
 8014cbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014cbe:	4621      	mov	r1, r4
 8014cc0:	4630      	mov	r0, r6
 8014cc2:	4798      	blx	r3
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d0ec      	beq.n	8014ca2 <__svfiscanf_r+0x196>
 8014cc8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014cca:	2800      	cmp	r0, #0
 8014ccc:	d159      	bne.n	8014d82 <__svfiscanf_r+0x276>
 8014cce:	f04f 30ff 	mov.w	r0, #4294967295
 8014cd2:	e05c      	b.n	8014d8e <__svfiscanf_r+0x282>
 8014cd4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014cd6:	f042 0220 	orr.w	r2, r2, #32
 8014cda:	9241      	str	r2, [sp, #260]	; 0x104
 8014cdc:	e79b      	b.n	8014c16 <__svfiscanf_r+0x10a>
 8014cde:	2308      	movs	r3, #8
 8014ce0:	9342      	str	r3, [sp, #264]	; 0x108
 8014ce2:	2304      	movs	r3, #4
 8014ce4:	e7b3      	b.n	8014c4e <__svfiscanf_r+0x142>
 8014ce6:	4629      	mov	r1, r5
 8014ce8:	4640      	mov	r0, r8
 8014cea:	f000 fe6d 	bl	80159c8 <__sccl>
 8014cee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cf4:	9341      	str	r3, [sp, #260]	; 0x104
 8014cf6:	4605      	mov	r5, r0
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	e7a8      	b.n	8014c4e <__svfiscanf_r+0x142>
 8014cfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d02:	9341      	str	r3, [sp, #260]	; 0x104
 8014d04:	2300      	movs	r3, #0
 8014d06:	e7a2      	b.n	8014c4e <__svfiscanf_r+0x142>
 8014d08:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014d0a:	06c3      	lsls	r3, r0, #27
 8014d0c:	f53f af2e 	bmi.w	8014b6c <__svfiscanf_r+0x60>
 8014d10:	9b00      	ldr	r3, [sp, #0]
 8014d12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014d14:	1d19      	adds	r1, r3, #4
 8014d16:	9100      	str	r1, [sp, #0]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	07c0      	lsls	r0, r0, #31
 8014d1c:	bf4c      	ite	mi
 8014d1e:	801a      	strhmi	r2, [r3, #0]
 8014d20:	601a      	strpl	r2, [r3, #0]
 8014d22:	e723      	b.n	8014b6c <__svfiscanf_r+0x60>
 8014d24:	2305      	movs	r3, #5
 8014d26:	e792      	b.n	8014c4e <__svfiscanf_r+0x142>
 8014d28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014d2a:	4621      	mov	r1, r4
 8014d2c:	4630      	mov	r0, r6
 8014d2e:	4798      	blx	r3
 8014d30:	2800      	cmp	r0, #0
 8014d32:	d090      	beq.n	8014c56 <__svfiscanf_r+0x14a>
 8014d34:	e7c8      	b.n	8014cc8 <__svfiscanf_r+0x1bc>
 8014d36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014d38:	3201      	adds	r2, #1
 8014d3a:	9245      	str	r2, [sp, #276]	; 0x114
 8014d3c:	6862      	ldr	r2, [r4, #4]
 8014d3e:	3a01      	subs	r2, #1
 8014d40:	2a00      	cmp	r2, #0
 8014d42:	6062      	str	r2, [r4, #4]
 8014d44:	dd02      	ble.n	8014d4c <__svfiscanf_r+0x240>
 8014d46:	3301      	adds	r3, #1
 8014d48:	6023      	str	r3, [r4, #0]
 8014d4a:	e787      	b.n	8014c5c <__svfiscanf_r+0x150>
 8014d4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014d4e:	4621      	mov	r1, r4
 8014d50:	4630      	mov	r0, r6
 8014d52:	4798      	blx	r3
 8014d54:	2800      	cmp	r0, #0
 8014d56:	d081      	beq.n	8014c5c <__svfiscanf_r+0x150>
 8014d58:	e7b6      	b.n	8014cc8 <__svfiscanf_r+0x1bc>
 8014d5a:	2b04      	cmp	r3, #4
 8014d5c:	dc06      	bgt.n	8014d6c <__svfiscanf_r+0x260>
 8014d5e:	466b      	mov	r3, sp
 8014d60:	4622      	mov	r2, r4
 8014d62:	a941      	add	r1, sp, #260	; 0x104
 8014d64:	4630      	mov	r0, r6
 8014d66:	f000 fa8f 	bl	8015288 <_scanf_i>
 8014d6a:	e788      	b.n	8014c7e <__svfiscanf_r+0x172>
 8014d6c:	4b0e      	ldr	r3, [pc, #56]	; (8014da8 <__svfiscanf_r+0x29c>)
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	f43f aefc 	beq.w	8014b6c <__svfiscanf_r+0x60>
 8014d74:	466b      	mov	r3, sp
 8014d76:	4622      	mov	r2, r4
 8014d78:	a941      	add	r1, sp, #260	; 0x104
 8014d7a:	4630      	mov	r0, r6
 8014d7c:	f000 f83e 	bl	8014dfc <_scanf_float>
 8014d80:	e77d      	b.n	8014c7e <__svfiscanf_r+0x172>
 8014d82:	89a3      	ldrh	r3, [r4, #12]
 8014d84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014d88:	bf18      	it	ne
 8014d8a:	f04f 30ff 	movne.w	r0, #4294967295
 8014d8e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8014d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d96:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014d98:	e7f9      	b.n	8014d8e <__svfiscanf_r+0x282>
 8014d9a:	bf00      	nop
 8014d9c:	08016b59 	.word	0x08016b59
 8014da0:	08015861 	.word	0x08015861
 8014da4:	08019262 	.word	0x08019262
 8014da8:	08014dfd 	.word	0x08014dfd

08014dac <_vfiscanf_r>:
 8014dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014db0:	460c      	mov	r4, r1
 8014db2:	4616      	mov	r6, r2
 8014db4:	461f      	mov	r7, r3
 8014db6:	4605      	mov	r5, r0
 8014db8:	b118      	cbz	r0, 8014dc2 <_vfiscanf_r+0x16>
 8014dba:	6983      	ldr	r3, [r0, #24]
 8014dbc:	b90b      	cbnz	r3, 8014dc2 <_vfiscanf_r+0x16>
 8014dbe:	f7fe ff1f 	bl	8013c00 <__sinit>
 8014dc2:	4b0b      	ldr	r3, [pc, #44]	; (8014df0 <_vfiscanf_r+0x44>)
 8014dc4:	429c      	cmp	r4, r3
 8014dc6:	d108      	bne.n	8014dda <_vfiscanf_r+0x2e>
 8014dc8:	686c      	ldr	r4, [r5, #4]
 8014dca:	463b      	mov	r3, r7
 8014dcc:	4632      	mov	r2, r6
 8014dce:	4621      	mov	r1, r4
 8014dd0:	4628      	mov	r0, r5
 8014dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014dd6:	f7ff be99 	b.w	8014b0c <__svfiscanf_r>
 8014dda:	4b06      	ldr	r3, [pc, #24]	; (8014df4 <_vfiscanf_r+0x48>)
 8014ddc:	429c      	cmp	r4, r3
 8014dde:	d101      	bne.n	8014de4 <_vfiscanf_r+0x38>
 8014de0:	68ac      	ldr	r4, [r5, #8]
 8014de2:	e7f2      	b.n	8014dca <_vfiscanf_r+0x1e>
 8014de4:	4b04      	ldr	r3, [pc, #16]	; (8014df8 <_vfiscanf_r+0x4c>)
 8014de6:	429c      	cmp	r4, r3
 8014de8:	bf08      	it	eq
 8014dea:	68ec      	ldreq	r4, [r5, #12]
 8014dec:	e7ed      	b.n	8014dca <_vfiscanf_r+0x1e>
 8014dee:	bf00      	nop
 8014df0:	08019218 	.word	0x08019218
 8014df4:	08019238 	.word	0x08019238
 8014df8:	080191f8 	.word	0x080191f8

08014dfc <_scanf_float>:
 8014dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e00:	469a      	mov	sl, r3
 8014e02:	688b      	ldr	r3, [r1, #8]
 8014e04:	4616      	mov	r6, r2
 8014e06:	1e5a      	subs	r2, r3, #1
 8014e08:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014e0c:	b087      	sub	sp, #28
 8014e0e:	bf83      	ittte	hi
 8014e10:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8014e14:	189b      	addhi	r3, r3, r2
 8014e16:	9301      	strhi	r3, [sp, #4]
 8014e18:	2300      	movls	r3, #0
 8014e1a:	bf86      	itte	hi
 8014e1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014e20:	608b      	strhi	r3, [r1, #8]
 8014e22:	9301      	strls	r3, [sp, #4]
 8014e24:	680b      	ldr	r3, [r1, #0]
 8014e26:	4688      	mov	r8, r1
 8014e28:	f04f 0b00 	mov.w	fp, #0
 8014e2c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014e30:	f848 3b1c 	str.w	r3, [r8], #28
 8014e34:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8014e38:	4607      	mov	r7, r0
 8014e3a:	460c      	mov	r4, r1
 8014e3c:	4645      	mov	r5, r8
 8014e3e:	465a      	mov	r2, fp
 8014e40:	46d9      	mov	r9, fp
 8014e42:	f8cd b008 	str.w	fp, [sp, #8]
 8014e46:	68a1      	ldr	r1, [r4, #8]
 8014e48:	b181      	cbz	r1, 8014e6c <_scanf_float+0x70>
 8014e4a:	6833      	ldr	r3, [r6, #0]
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	2b49      	cmp	r3, #73	; 0x49
 8014e50:	d071      	beq.n	8014f36 <_scanf_float+0x13a>
 8014e52:	d84d      	bhi.n	8014ef0 <_scanf_float+0xf4>
 8014e54:	2b39      	cmp	r3, #57	; 0x39
 8014e56:	d840      	bhi.n	8014eda <_scanf_float+0xde>
 8014e58:	2b31      	cmp	r3, #49	; 0x31
 8014e5a:	f080 8088 	bcs.w	8014f6e <_scanf_float+0x172>
 8014e5e:	2b2d      	cmp	r3, #45	; 0x2d
 8014e60:	f000 8090 	beq.w	8014f84 <_scanf_float+0x188>
 8014e64:	d815      	bhi.n	8014e92 <_scanf_float+0x96>
 8014e66:	2b2b      	cmp	r3, #43	; 0x2b
 8014e68:	f000 808c 	beq.w	8014f84 <_scanf_float+0x188>
 8014e6c:	f1b9 0f00 	cmp.w	r9, #0
 8014e70:	d003      	beq.n	8014e7a <_scanf_float+0x7e>
 8014e72:	6823      	ldr	r3, [r4, #0]
 8014e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014e78:	6023      	str	r3, [r4, #0]
 8014e7a:	3a01      	subs	r2, #1
 8014e7c:	2a01      	cmp	r2, #1
 8014e7e:	f200 80ea 	bhi.w	8015056 <_scanf_float+0x25a>
 8014e82:	4545      	cmp	r5, r8
 8014e84:	f200 80dc 	bhi.w	8015040 <_scanf_float+0x244>
 8014e88:	2601      	movs	r6, #1
 8014e8a:	4630      	mov	r0, r6
 8014e8c:	b007      	add	sp, #28
 8014e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e92:	2b2e      	cmp	r3, #46	; 0x2e
 8014e94:	f000 809f 	beq.w	8014fd6 <_scanf_float+0x1da>
 8014e98:	2b30      	cmp	r3, #48	; 0x30
 8014e9a:	d1e7      	bne.n	8014e6c <_scanf_float+0x70>
 8014e9c:	6820      	ldr	r0, [r4, #0]
 8014e9e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8014ea2:	d064      	beq.n	8014f6e <_scanf_float+0x172>
 8014ea4:	9b01      	ldr	r3, [sp, #4]
 8014ea6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8014eaa:	6020      	str	r0, [r4, #0]
 8014eac:	f109 0901 	add.w	r9, r9, #1
 8014eb0:	b11b      	cbz	r3, 8014eba <_scanf_float+0xbe>
 8014eb2:	3b01      	subs	r3, #1
 8014eb4:	3101      	adds	r1, #1
 8014eb6:	9301      	str	r3, [sp, #4]
 8014eb8:	60a1      	str	r1, [r4, #8]
 8014eba:	68a3      	ldr	r3, [r4, #8]
 8014ebc:	3b01      	subs	r3, #1
 8014ebe:	60a3      	str	r3, [r4, #8]
 8014ec0:	6923      	ldr	r3, [r4, #16]
 8014ec2:	3301      	adds	r3, #1
 8014ec4:	6123      	str	r3, [r4, #16]
 8014ec6:	6873      	ldr	r3, [r6, #4]
 8014ec8:	3b01      	subs	r3, #1
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	6073      	str	r3, [r6, #4]
 8014ece:	f340 80ac 	ble.w	801502a <_scanf_float+0x22e>
 8014ed2:	6833      	ldr	r3, [r6, #0]
 8014ed4:	3301      	adds	r3, #1
 8014ed6:	6033      	str	r3, [r6, #0]
 8014ed8:	e7b5      	b.n	8014e46 <_scanf_float+0x4a>
 8014eda:	2b45      	cmp	r3, #69	; 0x45
 8014edc:	f000 8085 	beq.w	8014fea <_scanf_float+0x1ee>
 8014ee0:	2b46      	cmp	r3, #70	; 0x46
 8014ee2:	d06a      	beq.n	8014fba <_scanf_float+0x1be>
 8014ee4:	2b41      	cmp	r3, #65	; 0x41
 8014ee6:	d1c1      	bne.n	8014e6c <_scanf_float+0x70>
 8014ee8:	2a01      	cmp	r2, #1
 8014eea:	d1bf      	bne.n	8014e6c <_scanf_float+0x70>
 8014eec:	2202      	movs	r2, #2
 8014eee:	e046      	b.n	8014f7e <_scanf_float+0x182>
 8014ef0:	2b65      	cmp	r3, #101	; 0x65
 8014ef2:	d07a      	beq.n	8014fea <_scanf_float+0x1ee>
 8014ef4:	d818      	bhi.n	8014f28 <_scanf_float+0x12c>
 8014ef6:	2b54      	cmp	r3, #84	; 0x54
 8014ef8:	d066      	beq.n	8014fc8 <_scanf_float+0x1cc>
 8014efa:	d811      	bhi.n	8014f20 <_scanf_float+0x124>
 8014efc:	2b4e      	cmp	r3, #78	; 0x4e
 8014efe:	d1b5      	bne.n	8014e6c <_scanf_float+0x70>
 8014f00:	2a00      	cmp	r2, #0
 8014f02:	d146      	bne.n	8014f92 <_scanf_float+0x196>
 8014f04:	f1b9 0f00 	cmp.w	r9, #0
 8014f08:	d145      	bne.n	8014f96 <_scanf_float+0x19a>
 8014f0a:	6821      	ldr	r1, [r4, #0]
 8014f0c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014f10:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014f14:	d13f      	bne.n	8014f96 <_scanf_float+0x19a>
 8014f16:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014f1a:	6021      	str	r1, [r4, #0]
 8014f1c:	2201      	movs	r2, #1
 8014f1e:	e02e      	b.n	8014f7e <_scanf_float+0x182>
 8014f20:	2b59      	cmp	r3, #89	; 0x59
 8014f22:	d01e      	beq.n	8014f62 <_scanf_float+0x166>
 8014f24:	2b61      	cmp	r3, #97	; 0x61
 8014f26:	e7de      	b.n	8014ee6 <_scanf_float+0xea>
 8014f28:	2b6e      	cmp	r3, #110	; 0x6e
 8014f2a:	d0e9      	beq.n	8014f00 <_scanf_float+0x104>
 8014f2c:	d815      	bhi.n	8014f5a <_scanf_float+0x15e>
 8014f2e:	2b66      	cmp	r3, #102	; 0x66
 8014f30:	d043      	beq.n	8014fba <_scanf_float+0x1be>
 8014f32:	2b69      	cmp	r3, #105	; 0x69
 8014f34:	d19a      	bne.n	8014e6c <_scanf_float+0x70>
 8014f36:	f1bb 0f00 	cmp.w	fp, #0
 8014f3a:	d138      	bne.n	8014fae <_scanf_float+0x1b2>
 8014f3c:	f1b9 0f00 	cmp.w	r9, #0
 8014f40:	d197      	bne.n	8014e72 <_scanf_float+0x76>
 8014f42:	6821      	ldr	r1, [r4, #0]
 8014f44:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014f48:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014f4c:	d195      	bne.n	8014e7a <_scanf_float+0x7e>
 8014f4e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014f52:	6021      	str	r1, [r4, #0]
 8014f54:	f04f 0b01 	mov.w	fp, #1
 8014f58:	e011      	b.n	8014f7e <_scanf_float+0x182>
 8014f5a:	2b74      	cmp	r3, #116	; 0x74
 8014f5c:	d034      	beq.n	8014fc8 <_scanf_float+0x1cc>
 8014f5e:	2b79      	cmp	r3, #121	; 0x79
 8014f60:	d184      	bne.n	8014e6c <_scanf_float+0x70>
 8014f62:	f1bb 0f07 	cmp.w	fp, #7
 8014f66:	d181      	bne.n	8014e6c <_scanf_float+0x70>
 8014f68:	f04f 0b08 	mov.w	fp, #8
 8014f6c:	e007      	b.n	8014f7e <_scanf_float+0x182>
 8014f6e:	eb12 0f0b 	cmn.w	r2, fp
 8014f72:	f47f af7b 	bne.w	8014e6c <_scanf_float+0x70>
 8014f76:	6821      	ldr	r1, [r4, #0]
 8014f78:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8014f7c:	6021      	str	r1, [r4, #0]
 8014f7e:	702b      	strb	r3, [r5, #0]
 8014f80:	3501      	adds	r5, #1
 8014f82:	e79a      	b.n	8014eba <_scanf_float+0xbe>
 8014f84:	6821      	ldr	r1, [r4, #0]
 8014f86:	0608      	lsls	r0, r1, #24
 8014f88:	f57f af70 	bpl.w	8014e6c <_scanf_float+0x70>
 8014f8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014f90:	e7f4      	b.n	8014f7c <_scanf_float+0x180>
 8014f92:	2a02      	cmp	r2, #2
 8014f94:	d047      	beq.n	8015026 <_scanf_float+0x22a>
 8014f96:	f1bb 0f01 	cmp.w	fp, #1
 8014f9a:	d003      	beq.n	8014fa4 <_scanf_float+0x1a8>
 8014f9c:	f1bb 0f04 	cmp.w	fp, #4
 8014fa0:	f47f af64 	bne.w	8014e6c <_scanf_float+0x70>
 8014fa4:	f10b 0b01 	add.w	fp, fp, #1
 8014fa8:	fa5f fb8b 	uxtb.w	fp, fp
 8014fac:	e7e7      	b.n	8014f7e <_scanf_float+0x182>
 8014fae:	f1bb 0f03 	cmp.w	fp, #3
 8014fb2:	d0f7      	beq.n	8014fa4 <_scanf_float+0x1a8>
 8014fb4:	f1bb 0f05 	cmp.w	fp, #5
 8014fb8:	e7f2      	b.n	8014fa0 <_scanf_float+0x1a4>
 8014fba:	f1bb 0f02 	cmp.w	fp, #2
 8014fbe:	f47f af55 	bne.w	8014e6c <_scanf_float+0x70>
 8014fc2:	f04f 0b03 	mov.w	fp, #3
 8014fc6:	e7da      	b.n	8014f7e <_scanf_float+0x182>
 8014fc8:	f1bb 0f06 	cmp.w	fp, #6
 8014fcc:	f47f af4e 	bne.w	8014e6c <_scanf_float+0x70>
 8014fd0:	f04f 0b07 	mov.w	fp, #7
 8014fd4:	e7d3      	b.n	8014f7e <_scanf_float+0x182>
 8014fd6:	6821      	ldr	r1, [r4, #0]
 8014fd8:	0588      	lsls	r0, r1, #22
 8014fda:	f57f af47 	bpl.w	8014e6c <_scanf_float+0x70>
 8014fde:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8014fe2:	6021      	str	r1, [r4, #0]
 8014fe4:	f8cd 9008 	str.w	r9, [sp, #8]
 8014fe8:	e7c9      	b.n	8014f7e <_scanf_float+0x182>
 8014fea:	6821      	ldr	r1, [r4, #0]
 8014fec:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8014ff0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014ff4:	d006      	beq.n	8015004 <_scanf_float+0x208>
 8014ff6:	0548      	lsls	r0, r1, #21
 8014ff8:	f57f af38 	bpl.w	8014e6c <_scanf_float+0x70>
 8014ffc:	f1b9 0f00 	cmp.w	r9, #0
 8015000:	f43f af3b 	beq.w	8014e7a <_scanf_float+0x7e>
 8015004:	0588      	lsls	r0, r1, #22
 8015006:	bf58      	it	pl
 8015008:	9802      	ldrpl	r0, [sp, #8]
 801500a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801500e:	bf58      	it	pl
 8015010:	eba9 0000 	subpl.w	r0, r9, r0
 8015014:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015018:	bf58      	it	pl
 801501a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801501e:	6021      	str	r1, [r4, #0]
 8015020:	f04f 0900 	mov.w	r9, #0
 8015024:	e7ab      	b.n	8014f7e <_scanf_float+0x182>
 8015026:	2203      	movs	r2, #3
 8015028:	e7a9      	b.n	8014f7e <_scanf_float+0x182>
 801502a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801502e:	9205      	str	r2, [sp, #20]
 8015030:	4631      	mov	r1, r6
 8015032:	4638      	mov	r0, r7
 8015034:	4798      	blx	r3
 8015036:	9a05      	ldr	r2, [sp, #20]
 8015038:	2800      	cmp	r0, #0
 801503a:	f43f af04 	beq.w	8014e46 <_scanf_float+0x4a>
 801503e:	e715      	b.n	8014e6c <_scanf_float+0x70>
 8015040:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015044:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015048:	4632      	mov	r2, r6
 801504a:	4638      	mov	r0, r7
 801504c:	4798      	blx	r3
 801504e:	6923      	ldr	r3, [r4, #16]
 8015050:	3b01      	subs	r3, #1
 8015052:	6123      	str	r3, [r4, #16]
 8015054:	e715      	b.n	8014e82 <_scanf_float+0x86>
 8015056:	f10b 33ff 	add.w	r3, fp, #4294967295
 801505a:	2b06      	cmp	r3, #6
 801505c:	d80a      	bhi.n	8015074 <_scanf_float+0x278>
 801505e:	f1bb 0f02 	cmp.w	fp, #2
 8015062:	d968      	bls.n	8015136 <_scanf_float+0x33a>
 8015064:	f1ab 0b03 	sub.w	fp, fp, #3
 8015068:	fa5f fb8b 	uxtb.w	fp, fp
 801506c:	eba5 0b0b 	sub.w	fp, r5, fp
 8015070:	455d      	cmp	r5, fp
 8015072:	d14b      	bne.n	801510c <_scanf_float+0x310>
 8015074:	6823      	ldr	r3, [r4, #0]
 8015076:	05da      	lsls	r2, r3, #23
 8015078:	d51f      	bpl.n	80150ba <_scanf_float+0x2be>
 801507a:	055b      	lsls	r3, r3, #21
 801507c:	d468      	bmi.n	8015150 <_scanf_float+0x354>
 801507e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015082:	6923      	ldr	r3, [r4, #16]
 8015084:	2965      	cmp	r1, #101	; 0x65
 8015086:	f103 33ff 	add.w	r3, r3, #4294967295
 801508a:	f105 3bff 	add.w	fp, r5, #4294967295
 801508e:	6123      	str	r3, [r4, #16]
 8015090:	d00d      	beq.n	80150ae <_scanf_float+0x2b2>
 8015092:	2945      	cmp	r1, #69	; 0x45
 8015094:	d00b      	beq.n	80150ae <_scanf_float+0x2b2>
 8015096:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801509a:	4632      	mov	r2, r6
 801509c:	4638      	mov	r0, r7
 801509e:	4798      	blx	r3
 80150a0:	6923      	ldr	r3, [r4, #16]
 80150a2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80150a6:	3b01      	subs	r3, #1
 80150a8:	f1a5 0b02 	sub.w	fp, r5, #2
 80150ac:	6123      	str	r3, [r4, #16]
 80150ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80150b2:	4632      	mov	r2, r6
 80150b4:	4638      	mov	r0, r7
 80150b6:	4798      	blx	r3
 80150b8:	465d      	mov	r5, fp
 80150ba:	6826      	ldr	r6, [r4, #0]
 80150bc:	f016 0610 	ands.w	r6, r6, #16
 80150c0:	d17a      	bne.n	80151b8 <_scanf_float+0x3bc>
 80150c2:	702e      	strb	r6, [r5, #0]
 80150c4:	6823      	ldr	r3, [r4, #0]
 80150c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80150ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80150ce:	d142      	bne.n	8015156 <_scanf_float+0x35a>
 80150d0:	9b02      	ldr	r3, [sp, #8]
 80150d2:	eba9 0303 	sub.w	r3, r9, r3
 80150d6:	425a      	negs	r2, r3
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d149      	bne.n	8015170 <_scanf_float+0x374>
 80150dc:	2200      	movs	r2, #0
 80150de:	4641      	mov	r1, r8
 80150e0:	4638      	mov	r0, r7
 80150e2:	f001 fbd5 	bl	8016890 <_strtod_r>
 80150e6:	6825      	ldr	r5, [r4, #0]
 80150e8:	f8da 3000 	ldr.w	r3, [sl]
 80150ec:	f015 0f02 	tst.w	r5, #2
 80150f0:	f103 0204 	add.w	r2, r3, #4
 80150f4:	ec59 8b10 	vmov	r8, r9, d0
 80150f8:	f8ca 2000 	str.w	r2, [sl]
 80150fc:	d043      	beq.n	8015186 <_scanf_float+0x38a>
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	e9c3 8900 	strd	r8, r9, [r3]
 8015104:	68e3      	ldr	r3, [r4, #12]
 8015106:	3301      	adds	r3, #1
 8015108:	60e3      	str	r3, [r4, #12]
 801510a:	e6be      	b.n	8014e8a <_scanf_float+0x8e>
 801510c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015110:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015114:	4632      	mov	r2, r6
 8015116:	4638      	mov	r0, r7
 8015118:	4798      	blx	r3
 801511a:	6923      	ldr	r3, [r4, #16]
 801511c:	3b01      	subs	r3, #1
 801511e:	6123      	str	r3, [r4, #16]
 8015120:	e7a6      	b.n	8015070 <_scanf_float+0x274>
 8015122:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015126:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801512a:	4632      	mov	r2, r6
 801512c:	4638      	mov	r0, r7
 801512e:	4798      	blx	r3
 8015130:	6923      	ldr	r3, [r4, #16]
 8015132:	3b01      	subs	r3, #1
 8015134:	6123      	str	r3, [r4, #16]
 8015136:	4545      	cmp	r5, r8
 8015138:	d8f3      	bhi.n	8015122 <_scanf_float+0x326>
 801513a:	e6a5      	b.n	8014e88 <_scanf_float+0x8c>
 801513c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015140:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015144:	4632      	mov	r2, r6
 8015146:	4638      	mov	r0, r7
 8015148:	4798      	blx	r3
 801514a:	6923      	ldr	r3, [r4, #16]
 801514c:	3b01      	subs	r3, #1
 801514e:	6123      	str	r3, [r4, #16]
 8015150:	4545      	cmp	r5, r8
 8015152:	d8f3      	bhi.n	801513c <_scanf_float+0x340>
 8015154:	e698      	b.n	8014e88 <_scanf_float+0x8c>
 8015156:	9b03      	ldr	r3, [sp, #12]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d0bf      	beq.n	80150dc <_scanf_float+0x2e0>
 801515c:	9904      	ldr	r1, [sp, #16]
 801515e:	230a      	movs	r3, #10
 8015160:	4632      	mov	r2, r6
 8015162:	3101      	adds	r1, #1
 8015164:	4638      	mov	r0, r7
 8015166:	f001 fc1f 	bl	80169a8 <_strtol_r>
 801516a:	9b03      	ldr	r3, [sp, #12]
 801516c:	9d04      	ldr	r5, [sp, #16]
 801516e:	1ac2      	subs	r2, r0, r3
 8015170:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015174:	429d      	cmp	r5, r3
 8015176:	bf28      	it	cs
 8015178:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801517c:	490f      	ldr	r1, [pc, #60]	; (80151bc <_scanf_float+0x3c0>)
 801517e:	4628      	mov	r0, r5
 8015180:	f000 fd10 	bl	8015ba4 <siprintf>
 8015184:	e7aa      	b.n	80150dc <_scanf_float+0x2e0>
 8015186:	f015 0504 	ands.w	r5, r5, #4
 801518a:	d1b8      	bne.n	80150fe <_scanf_float+0x302>
 801518c:	681f      	ldr	r7, [r3, #0]
 801518e:	ee10 2a10 	vmov	r2, s0
 8015192:	464b      	mov	r3, r9
 8015194:	ee10 0a10 	vmov	r0, s0
 8015198:	4649      	mov	r1, r9
 801519a:	f7f3 fbff 	bl	800899c <__aeabi_dcmpun>
 801519e:	b128      	cbz	r0, 80151ac <_scanf_float+0x3b0>
 80151a0:	4628      	mov	r0, r5
 80151a2:	f000 fcf9 	bl	8015b98 <nanf>
 80151a6:	ed87 0a00 	vstr	s0, [r7]
 80151aa:	e7ab      	b.n	8015104 <_scanf_float+0x308>
 80151ac:	4640      	mov	r0, r8
 80151ae:	4649      	mov	r1, r9
 80151b0:	f7f3 fc52 	bl	8008a58 <__aeabi_d2f>
 80151b4:	6038      	str	r0, [r7, #0]
 80151b6:	e7a5      	b.n	8015104 <_scanf_float+0x308>
 80151b8:	2600      	movs	r6, #0
 80151ba:	e666      	b.n	8014e8a <_scanf_float+0x8e>
 80151bc:	0801929f 	.word	0x0801929f

080151c0 <_scanf_chars>:
 80151c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151c4:	4615      	mov	r5, r2
 80151c6:	688a      	ldr	r2, [r1, #8]
 80151c8:	4680      	mov	r8, r0
 80151ca:	460c      	mov	r4, r1
 80151cc:	b932      	cbnz	r2, 80151dc <_scanf_chars+0x1c>
 80151ce:	698a      	ldr	r2, [r1, #24]
 80151d0:	2a00      	cmp	r2, #0
 80151d2:	bf14      	ite	ne
 80151d4:	f04f 32ff 	movne.w	r2, #4294967295
 80151d8:	2201      	moveq	r2, #1
 80151da:	608a      	str	r2, [r1, #8]
 80151dc:	6822      	ldr	r2, [r4, #0]
 80151de:	06d1      	lsls	r1, r2, #27
 80151e0:	bf5f      	itttt	pl
 80151e2:	681a      	ldrpl	r2, [r3, #0]
 80151e4:	1d11      	addpl	r1, r2, #4
 80151e6:	6019      	strpl	r1, [r3, #0]
 80151e8:	6817      	ldrpl	r7, [r2, #0]
 80151ea:	2600      	movs	r6, #0
 80151ec:	69a3      	ldr	r3, [r4, #24]
 80151ee:	b1db      	cbz	r3, 8015228 <_scanf_chars+0x68>
 80151f0:	2b01      	cmp	r3, #1
 80151f2:	d107      	bne.n	8015204 <_scanf_chars+0x44>
 80151f4:	682b      	ldr	r3, [r5, #0]
 80151f6:	6962      	ldr	r2, [r4, #20]
 80151f8:	781b      	ldrb	r3, [r3, #0]
 80151fa:	5cd3      	ldrb	r3, [r2, r3]
 80151fc:	b9a3      	cbnz	r3, 8015228 <_scanf_chars+0x68>
 80151fe:	2e00      	cmp	r6, #0
 8015200:	d132      	bne.n	8015268 <_scanf_chars+0xa8>
 8015202:	e006      	b.n	8015212 <_scanf_chars+0x52>
 8015204:	2b02      	cmp	r3, #2
 8015206:	d007      	beq.n	8015218 <_scanf_chars+0x58>
 8015208:	2e00      	cmp	r6, #0
 801520a:	d12d      	bne.n	8015268 <_scanf_chars+0xa8>
 801520c:	69a3      	ldr	r3, [r4, #24]
 801520e:	2b01      	cmp	r3, #1
 8015210:	d12a      	bne.n	8015268 <_scanf_chars+0xa8>
 8015212:	2001      	movs	r0, #1
 8015214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015218:	f002 ff82 	bl	8018120 <__locale_ctype_ptr>
 801521c:	682b      	ldr	r3, [r5, #0]
 801521e:	781b      	ldrb	r3, [r3, #0]
 8015220:	4418      	add	r0, r3
 8015222:	7843      	ldrb	r3, [r0, #1]
 8015224:	071b      	lsls	r3, r3, #28
 8015226:	d4ef      	bmi.n	8015208 <_scanf_chars+0x48>
 8015228:	6823      	ldr	r3, [r4, #0]
 801522a:	06da      	lsls	r2, r3, #27
 801522c:	bf5e      	ittt	pl
 801522e:	682b      	ldrpl	r3, [r5, #0]
 8015230:	781b      	ldrbpl	r3, [r3, #0]
 8015232:	703b      	strbpl	r3, [r7, #0]
 8015234:	682a      	ldr	r2, [r5, #0]
 8015236:	686b      	ldr	r3, [r5, #4]
 8015238:	f102 0201 	add.w	r2, r2, #1
 801523c:	602a      	str	r2, [r5, #0]
 801523e:	68a2      	ldr	r2, [r4, #8]
 8015240:	f103 33ff 	add.w	r3, r3, #4294967295
 8015244:	f102 32ff 	add.w	r2, r2, #4294967295
 8015248:	606b      	str	r3, [r5, #4]
 801524a:	f106 0601 	add.w	r6, r6, #1
 801524e:	bf58      	it	pl
 8015250:	3701      	addpl	r7, #1
 8015252:	60a2      	str	r2, [r4, #8]
 8015254:	b142      	cbz	r2, 8015268 <_scanf_chars+0xa8>
 8015256:	2b00      	cmp	r3, #0
 8015258:	dcc8      	bgt.n	80151ec <_scanf_chars+0x2c>
 801525a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801525e:	4629      	mov	r1, r5
 8015260:	4640      	mov	r0, r8
 8015262:	4798      	blx	r3
 8015264:	2800      	cmp	r0, #0
 8015266:	d0c1      	beq.n	80151ec <_scanf_chars+0x2c>
 8015268:	6823      	ldr	r3, [r4, #0]
 801526a:	f013 0310 	ands.w	r3, r3, #16
 801526e:	d105      	bne.n	801527c <_scanf_chars+0xbc>
 8015270:	68e2      	ldr	r2, [r4, #12]
 8015272:	3201      	adds	r2, #1
 8015274:	60e2      	str	r2, [r4, #12]
 8015276:	69a2      	ldr	r2, [r4, #24]
 8015278:	b102      	cbz	r2, 801527c <_scanf_chars+0xbc>
 801527a:	703b      	strb	r3, [r7, #0]
 801527c:	6923      	ldr	r3, [r4, #16]
 801527e:	441e      	add	r6, r3
 8015280:	6126      	str	r6, [r4, #16]
 8015282:	2000      	movs	r0, #0
 8015284:	e7c6      	b.n	8015214 <_scanf_chars+0x54>
	...

08015288 <_scanf_i>:
 8015288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801528c:	469a      	mov	sl, r3
 801528e:	4b74      	ldr	r3, [pc, #464]	; (8015460 <_scanf_i+0x1d8>)
 8015290:	460c      	mov	r4, r1
 8015292:	4683      	mov	fp, r0
 8015294:	4616      	mov	r6, r2
 8015296:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801529a:	b087      	sub	sp, #28
 801529c:	ab03      	add	r3, sp, #12
 801529e:	68a7      	ldr	r7, [r4, #8]
 80152a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80152a4:	4b6f      	ldr	r3, [pc, #444]	; (8015464 <_scanf_i+0x1dc>)
 80152a6:	69a1      	ldr	r1, [r4, #24]
 80152a8:	4a6f      	ldr	r2, [pc, #444]	; (8015468 <_scanf_i+0x1e0>)
 80152aa:	2903      	cmp	r1, #3
 80152ac:	bf08      	it	eq
 80152ae:	461a      	moveq	r2, r3
 80152b0:	1e7b      	subs	r3, r7, #1
 80152b2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80152b6:	bf84      	itt	hi
 80152b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80152bc:	60a3      	strhi	r3, [r4, #8]
 80152be:	6823      	ldr	r3, [r4, #0]
 80152c0:	9200      	str	r2, [sp, #0]
 80152c2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80152c6:	bf88      	it	hi
 80152c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80152cc:	f104 091c 	add.w	r9, r4, #28
 80152d0:	6023      	str	r3, [r4, #0]
 80152d2:	bf8c      	ite	hi
 80152d4:	197f      	addhi	r7, r7, r5
 80152d6:	2700      	movls	r7, #0
 80152d8:	464b      	mov	r3, r9
 80152da:	f04f 0800 	mov.w	r8, #0
 80152de:	9301      	str	r3, [sp, #4]
 80152e0:	6831      	ldr	r1, [r6, #0]
 80152e2:	ab03      	add	r3, sp, #12
 80152e4:	2202      	movs	r2, #2
 80152e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80152ea:	7809      	ldrb	r1, [r1, #0]
 80152ec:	f7f2 feb0 	bl	8008050 <memchr>
 80152f0:	9b01      	ldr	r3, [sp, #4]
 80152f2:	b330      	cbz	r0, 8015342 <_scanf_i+0xba>
 80152f4:	f1b8 0f01 	cmp.w	r8, #1
 80152f8:	d15a      	bne.n	80153b0 <_scanf_i+0x128>
 80152fa:	6862      	ldr	r2, [r4, #4]
 80152fc:	b92a      	cbnz	r2, 801530a <_scanf_i+0x82>
 80152fe:	6822      	ldr	r2, [r4, #0]
 8015300:	2108      	movs	r1, #8
 8015302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015306:	6061      	str	r1, [r4, #4]
 8015308:	6022      	str	r2, [r4, #0]
 801530a:	6822      	ldr	r2, [r4, #0]
 801530c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015310:	6022      	str	r2, [r4, #0]
 8015312:	68a2      	ldr	r2, [r4, #8]
 8015314:	1e51      	subs	r1, r2, #1
 8015316:	60a1      	str	r1, [r4, #8]
 8015318:	b19a      	cbz	r2, 8015342 <_scanf_i+0xba>
 801531a:	6832      	ldr	r2, [r6, #0]
 801531c:	1c51      	adds	r1, r2, #1
 801531e:	6031      	str	r1, [r6, #0]
 8015320:	7812      	ldrb	r2, [r2, #0]
 8015322:	701a      	strb	r2, [r3, #0]
 8015324:	1c5d      	adds	r5, r3, #1
 8015326:	6873      	ldr	r3, [r6, #4]
 8015328:	3b01      	subs	r3, #1
 801532a:	2b00      	cmp	r3, #0
 801532c:	6073      	str	r3, [r6, #4]
 801532e:	dc07      	bgt.n	8015340 <_scanf_i+0xb8>
 8015330:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015334:	4631      	mov	r1, r6
 8015336:	4658      	mov	r0, fp
 8015338:	4798      	blx	r3
 801533a:	2800      	cmp	r0, #0
 801533c:	f040 8086 	bne.w	801544c <_scanf_i+0x1c4>
 8015340:	462b      	mov	r3, r5
 8015342:	f108 0801 	add.w	r8, r8, #1
 8015346:	f1b8 0f03 	cmp.w	r8, #3
 801534a:	d1c8      	bne.n	80152de <_scanf_i+0x56>
 801534c:	6862      	ldr	r2, [r4, #4]
 801534e:	b90a      	cbnz	r2, 8015354 <_scanf_i+0xcc>
 8015350:	220a      	movs	r2, #10
 8015352:	6062      	str	r2, [r4, #4]
 8015354:	6862      	ldr	r2, [r4, #4]
 8015356:	4945      	ldr	r1, [pc, #276]	; (801546c <_scanf_i+0x1e4>)
 8015358:	6960      	ldr	r0, [r4, #20]
 801535a:	9301      	str	r3, [sp, #4]
 801535c:	1a89      	subs	r1, r1, r2
 801535e:	f000 fb33 	bl	80159c8 <__sccl>
 8015362:	9b01      	ldr	r3, [sp, #4]
 8015364:	f04f 0800 	mov.w	r8, #0
 8015368:	461d      	mov	r5, r3
 801536a:	68a3      	ldr	r3, [r4, #8]
 801536c:	6822      	ldr	r2, [r4, #0]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d03a      	beq.n	80153e8 <_scanf_i+0x160>
 8015372:	6831      	ldr	r1, [r6, #0]
 8015374:	6960      	ldr	r0, [r4, #20]
 8015376:	f891 c000 	ldrb.w	ip, [r1]
 801537a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801537e:	2800      	cmp	r0, #0
 8015380:	d032      	beq.n	80153e8 <_scanf_i+0x160>
 8015382:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8015386:	d121      	bne.n	80153cc <_scanf_i+0x144>
 8015388:	0510      	lsls	r0, r2, #20
 801538a:	d51f      	bpl.n	80153cc <_scanf_i+0x144>
 801538c:	f108 0801 	add.w	r8, r8, #1
 8015390:	b117      	cbz	r7, 8015398 <_scanf_i+0x110>
 8015392:	3301      	adds	r3, #1
 8015394:	3f01      	subs	r7, #1
 8015396:	60a3      	str	r3, [r4, #8]
 8015398:	6873      	ldr	r3, [r6, #4]
 801539a:	3b01      	subs	r3, #1
 801539c:	2b00      	cmp	r3, #0
 801539e:	6073      	str	r3, [r6, #4]
 80153a0:	dd1b      	ble.n	80153da <_scanf_i+0x152>
 80153a2:	6833      	ldr	r3, [r6, #0]
 80153a4:	3301      	adds	r3, #1
 80153a6:	6033      	str	r3, [r6, #0]
 80153a8:	68a3      	ldr	r3, [r4, #8]
 80153aa:	3b01      	subs	r3, #1
 80153ac:	60a3      	str	r3, [r4, #8]
 80153ae:	e7dc      	b.n	801536a <_scanf_i+0xe2>
 80153b0:	f1b8 0f02 	cmp.w	r8, #2
 80153b4:	d1ad      	bne.n	8015312 <_scanf_i+0x8a>
 80153b6:	6822      	ldr	r2, [r4, #0]
 80153b8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80153bc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80153c0:	d1bf      	bne.n	8015342 <_scanf_i+0xba>
 80153c2:	2110      	movs	r1, #16
 80153c4:	6061      	str	r1, [r4, #4]
 80153c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80153ca:	e7a1      	b.n	8015310 <_scanf_i+0x88>
 80153cc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80153d0:	6022      	str	r2, [r4, #0]
 80153d2:	780b      	ldrb	r3, [r1, #0]
 80153d4:	702b      	strb	r3, [r5, #0]
 80153d6:	3501      	adds	r5, #1
 80153d8:	e7de      	b.n	8015398 <_scanf_i+0x110>
 80153da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80153de:	4631      	mov	r1, r6
 80153e0:	4658      	mov	r0, fp
 80153e2:	4798      	blx	r3
 80153e4:	2800      	cmp	r0, #0
 80153e6:	d0df      	beq.n	80153a8 <_scanf_i+0x120>
 80153e8:	6823      	ldr	r3, [r4, #0]
 80153ea:	05d9      	lsls	r1, r3, #23
 80153ec:	d50c      	bpl.n	8015408 <_scanf_i+0x180>
 80153ee:	454d      	cmp	r5, r9
 80153f0:	d908      	bls.n	8015404 <_scanf_i+0x17c>
 80153f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80153f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80153fa:	4632      	mov	r2, r6
 80153fc:	4658      	mov	r0, fp
 80153fe:	4798      	blx	r3
 8015400:	1e6f      	subs	r7, r5, #1
 8015402:	463d      	mov	r5, r7
 8015404:	454d      	cmp	r5, r9
 8015406:	d029      	beq.n	801545c <_scanf_i+0x1d4>
 8015408:	6822      	ldr	r2, [r4, #0]
 801540a:	f012 0210 	ands.w	r2, r2, #16
 801540e:	d113      	bne.n	8015438 <_scanf_i+0x1b0>
 8015410:	702a      	strb	r2, [r5, #0]
 8015412:	6863      	ldr	r3, [r4, #4]
 8015414:	9e00      	ldr	r6, [sp, #0]
 8015416:	4649      	mov	r1, r9
 8015418:	4658      	mov	r0, fp
 801541a:	47b0      	blx	r6
 801541c:	f8da 3000 	ldr.w	r3, [sl]
 8015420:	6821      	ldr	r1, [r4, #0]
 8015422:	1d1a      	adds	r2, r3, #4
 8015424:	f8ca 2000 	str.w	r2, [sl]
 8015428:	f011 0f20 	tst.w	r1, #32
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	d010      	beq.n	8015452 <_scanf_i+0x1ca>
 8015430:	6018      	str	r0, [r3, #0]
 8015432:	68e3      	ldr	r3, [r4, #12]
 8015434:	3301      	adds	r3, #1
 8015436:	60e3      	str	r3, [r4, #12]
 8015438:	eba5 0509 	sub.w	r5, r5, r9
 801543c:	44a8      	add	r8, r5
 801543e:	6925      	ldr	r5, [r4, #16]
 8015440:	4445      	add	r5, r8
 8015442:	6125      	str	r5, [r4, #16]
 8015444:	2000      	movs	r0, #0
 8015446:	b007      	add	sp, #28
 8015448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801544c:	f04f 0800 	mov.w	r8, #0
 8015450:	e7ca      	b.n	80153e8 <_scanf_i+0x160>
 8015452:	07ca      	lsls	r2, r1, #31
 8015454:	bf4c      	ite	mi
 8015456:	8018      	strhmi	r0, [r3, #0]
 8015458:	6018      	strpl	r0, [r3, #0]
 801545a:	e7ea      	b.n	8015432 <_scanf_i+0x1aa>
 801545c:	2001      	movs	r0, #1
 801545e:	e7f2      	b.n	8015446 <_scanf_i+0x1be>
 8015460:	08018e10 	.word	0x08018e10
 8015464:	080169a9 	.word	0x080169a9
 8015468:	08016ac1 	.word	0x08016ac1
 801546c:	080192b4 	.word	0x080192b4

08015470 <iprintf>:
 8015470:	b40f      	push	{r0, r1, r2, r3}
 8015472:	4b0a      	ldr	r3, [pc, #40]	; (801549c <iprintf+0x2c>)
 8015474:	b513      	push	{r0, r1, r4, lr}
 8015476:	681c      	ldr	r4, [r3, #0]
 8015478:	b124      	cbz	r4, 8015484 <iprintf+0x14>
 801547a:	69a3      	ldr	r3, [r4, #24]
 801547c:	b913      	cbnz	r3, 8015484 <iprintf+0x14>
 801547e:	4620      	mov	r0, r4
 8015480:	f7fe fbbe 	bl	8013c00 <__sinit>
 8015484:	ab05      	add	r3, sp, #20
 8015486:	9a04      	ldr	r2, [sp, #16]
 8015488:	68a1      	ldr	r1, [r4, #8]
 801548a:	9301      	str	r3, [sp, #4]
 801548c:	4620      	mov	r0, r4
 801548e:	f7fe fdcb 	bl	8014028 <_vfiprintf_r>
 8015492:	b002      	add	sp, #8
 8015494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015498:	b004      	add	sp, #16
 801549a:	4770      	bx	lr
 801549c:	2000003c 	.word	0x2000003c

080154a0 <putchar>:
 80154a0:	b538      	push	{r3, r4, r5, lr}
 80154a2:	4b08      	ldr	r3, [pc, #32]	; (80154c4 <putchar+0x24>)
 80154a4:	681c      	ldr	r4, [r3, #0]
 80154a6:	4605      	mov	r5, r0
 80154a8:	b124      	cbz	r4, 80154b4 <putchar+0x14>
 80154aa:	69a3      	ldr	r3, [r4, #24]
 80154ac:	b913      	cbnz	r3, 80154b4 <putchar+0x14>
 80154ae:	4620      	mov	r0, r4
 80154b0:	f7fe fba6 	bl	8013c00 <__sinit>
 80154b4:	68a2      	ldr	r2, [r4, #8]
 80154b6:	4629      	mov	r1, r5
 80154b8:	4620      	mov	r0, r4
 80154ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154be:	f003 bc19 	b.w	8018cf4 <_putc_r>
 80154c2:	bf00      	nop
 80154c4:	2000003c 	.word	0x2000003c

080154c8 <_puts_r>:
 80154c8:	b570      	push	{r4, r5, r6, lr}
 80154ca:	460e      	mov	r6, r1
 80154cc:	4605      	mov	r5, r0
 80154ce:	b118      	cbz	r0, 80154d8 <_puts_r+0x10>
 80154d0:	6983      	ldr	r3, [r0, #24]
 80154d2:	b90b      	cbnz	r3, 80154d8 <_puts_r+0x10>
 80154d4:	f7fe fb94 	bl	8013c00 <__sinit>
 80154d8:	69ab      	ldr	r3, [r5, #24]
 80154da:	68ac      	ldr	r4, [r5, #8]
 80154dc:	b913      	cbnz	r3, 80154e4 <_puts_r+0x1c>
 80154de:	4628      	mov	r0, r5
 80154e0:	f7fe fb8e 	bl	8013c00 <__sinit>
 80154e4:	4b23      	ldr	r3, [pc, #140]	; (8015574 <_puts_r+0xac>)
 80154e6:	429c      	cmp	r4, r3
 80154e8:	d117      	bne.n	801551a <_puts_r+0x52>
 80154ea:	686c      	ldr	r4, [r5, #4]
 80154ec:	89a3      	ldrh	r3, [r4, #12]
 80154ee:	071b      	lsls	r3, r3, #28
 80154f0:	d51d      	bpl.n	801552e <_puts_r+0x66>
 80154f2:	6923      	ldr	r3, [r4, #16]
 80154f4:	b1db      	cbz	r3, 801552e <_puts_r+0x66>
 80154f6:	3e01      	subs	r6, #1
 80154f8:	68a3      	ldr	r3, [r4, #8]
 80154fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80154fe:	3b01      	subs	r3, #1
 8015500:	60a3      	str	r3, [r4, #8]
 8015502:	b9e9      	cbnz	r1, 8015540 <_puts_r+0x78>
 8015504:	2b00      	cmp	r3, #0
 8015506:	da2e      	bge.n	8015566 <_puts_r+0x9e>
 8015508:	4622      	mov	r2, r4
 801550a:	210a      	movs	r1, #10
 801550c:	4628      	mov	r0, r5
 801550e:	f001 fb95 	bl	8016c3c <__swbuf_r>
 8015512:	3001      	adds	r0, #1
 8015514:	d011      	beq.n	801553a <_puts_r+0x72>
 8015516:	200a      	movs	r0, #10
 8015518:	e011      	b.n	801553e <_puts_r+0x76>
 801551a:	4b17      	ldr	r3, [pc, #92]	; (8015578 <_puts_r+0xb0>)
 801551c:	429c      	cmp	r4, r3
 801551e:	d101      	bne.n	8015524 <_puts_r+0x5c>
 8015520:	68ac      	ldr	r4, [r5, #8]
 8015522:	e7e3      	b.n	80154ec <_puts_r+0x24>
 8015524:	4b15      	ldr	r3, [pc, #84]	; (801557c <_puts_r+0xb4>)
 8015526:	429c      	cmp	r4, r3
 8015528:	bf08      	it	eq
 801552a:	68ec      	ldreq	r4, [r5, #12]
 801552c:	e7de      	b.n	80154ec <_puts_r+0x24>
 801552e:	4621      	mov	r1, r4
 8015530:	4628      	mov	r0, r5
 8015532:	f001 fbe7 	bl	8016d04 <__swsetup_r>
 8015536:	2800      	cmp	r0, #0
 8015538:	d0dd      	beq.n	80154f6 <_puts_r+0x2e>
 801553a:	f04f 30ff 	mov.w	r0, #4294967295
 801553e:	bd70      	pop	{r4, r5, r6, pc}
 8015540:	2b00      	cmp	r3, #0
 8015542:	da04      	bge.n	801554e <_puts_r+0x86>
 8015544:	69a2      	ldr	r2, [r4, #24]
 8015546:	429a      	cmp	r2, r3
 8015548:	dc06      	bgt.n	8015558 <_puts_r+0x90>
 801554a:	290a      	cmp	r1, #10
 801554c:	d004      	beq.n	8015558 <_puts_r+0x90>
 801554e:	6823      	ldr	r3, [r4, #0]
 8015550:	1c5a      	adds	r2, r3, #1
 8015552:	6022      	str	r2, [r4, #0]
 8015554:	7019      	strb	r1, [r3, #0]
 8015556:	e7cf      	b.n	80154f8 <_puts_r+0x30>
 8015558:	4622      	mov	r2, r4
 801555a:	4628      	mov	r0, r5
 801555c:	f001 fb6e 	bl	8016c3c <__swbuf_r>
 8015560:	3001      	adds	r0, #1
 8015562:	d1c9      	bne.n	80154f8 <_puts_r+0x30>
 8015564:	e7e9      	b.n	801553a <_puts_r+0x72>
 8015566:	6823      	ldr	r3, [r4, #0]
 8015568:	200a      	movs	r0, #10
 801556a:	1c5a      	adds	r2, r3, #1
 801556c:	6022      	str	r2, [r4, #0]
 801556e:	7018      	strb	r0, [r3, #0]
 8015570:	e7e5      	b.n	801553e <_puts_r+0x76>
 8015572:	bf00      	nop
 8015574:	08019218 	.word	0x08019218
 8015578:	08019238 	.word	0x08019238
 801557c:	080191f8 	.word	0x080191f8

08015580 <puts>:
 8015580:	4b02      	ldr	r3, [pc, #8]	; (801558c <puts+0xc>)
 8015582:	4601      	mov	r1, r0
 8015584:	6818      	ldr	r0, [r3, #0]
 8015586:	f7ff bf9f 	b.w	80154c8 <_puts_r>
 801558a:	bf00      	nop
 801558c:	2000003c 	.word	0x2000003c

08015590 <swapfunc>:
 8015590:	2b02      	cmp	r3, #2
 8015592:	b510      	push	{r4, lr}
 8015594:	d00a      	beq.n	80155ac <swapfunc+0x1c>
 8015596:	0892      	lsrs	r2, r2, #2
 8015598:	3a01      	subs	r2, #1
 801559a:	6803      	ldr	r3, [r0, #0]
 801559c:	680c      	ldr	r4, [r1, #0]
 801559e:	f840 4b04 	str.w	r4, [r0], #4
 80155a2:	2a00      	cmp	r2, #0
 80155a4:	f841 3b04 	str.w	r3, [r1], #4
 80155a8:	dcf6      	bgt.n	8015598 <swapfunc+0x8>
 80155aa:	bd10      	pop	{r4, pc}
 80155ac:	4402      	add	r2, r0
 80155ae:	780c      	ldrb	r4, [r1, #0]
 80155b0:	7803      	ldrb	r3, [r0, #0]
 80155b2:	f800 4b01 	strb.w	r4, [r0], #1
 80155b6:	f801 3b01 	strb.w	r3, [r1], #1
 80155ba:	1a13      	subs	r3, r2, r0
 80155bc:	2b00      	cmp	r3, #0
 80155be:	dcf6      	bgt.n	80155ae <swapfunc+0x1e>
 80155c0:	e7f3      	b.n	80155aa <swapfunc+0x1a>

080155c2 <med3.isra.1>:
 80155c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155c4:	460c      	mov	r4, r1
 80155c6:	4615      	mov	r5, r2
 80155c8:	4607      	mov	r7, r0
 80155ca:	461e      	mov	r6, r3
 80155cc:	4798      	blx	r3
 80155ce:	2800      	cmp	r0, #0
 80155d0:	4629      	mov	r1, r5
 80155d2:	4620      	mov	r0, r4
 80155d4:	da0a      	bge.n	80155ec <med3.isra.1+0x2a>
 80155d6:	47b0      	blx	r6
 80155d8:	2800      	cmp	r0, #0
 80155da:	db05      	blt.n	80155e8 <med3.isra.1+0x26>
 80155dc:	4629      	mov	r1, r5
 80155de:	4638      	mov	r0, r7
 80155e0:	47b0      	blx	r6
 80155e2:	2800      	cmp	r0, #0
 80155e4:	db0a      	blt.n	80155fc <med3.isra.1+0x3a>
 80155e6:	463c      	mov	r4, r7
 80155e8:	4620      	mov	r0, r4
 80155ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155ec:	47b0      	blx	r6
 80155ee:	2800      	cmp	r0, #0
 80155f0:	dcfa      	bgt.n	80155e8 <med3.isra.1+0x26>
 80155f2:	4629      	mov	r1, r5
 80155f4:	4638      	mov	r0, r7
 80155f6:	47b0      	blx	r6
 80155f8:	2800      	cmp	r0, #0
 80155fa:	dbf4      	blt.n	80155e6 <med3.isra.1+0x24>
 80155fc:	462c      	mov	r4, r5
 80155fe:	e7f3      	b.n	80155e8 <med3.isra.1+0x26>

08015600 <qsort>:
 8015600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015604:	b085      	sub	sp, #20
 8015606:	4606      	mov	r6, r0
 8015608:	468a      	mov	sl, r1
 801560a:	4614      	mov	r4, r2
 801560c:	9300      	str	r3, [sp, #0]
 801560e:	07b2      	lsls	r2, r6, #30
 8015610:	d110      	bne.n	8015634 <qsort+0x34>
 8015612:	07a3      	lsls	r3, r4, #30
 8015614:	d10e      	bne.n	8015634 <qsort+0x34>
 8015616:	1f27      	subs	r7, r4, #4
 8015618:	bf18      	it	ne
 801561a:	2701      	movne	r7, #1
 801561c:	f1ba 0f06 	cmp.w	sl, #6
 8015620:	eb06 0b04 	add.w	fp, r6, r4
 8015624:	d828      	bhi.n	8015678 <qsort+0x78>
 8015626:	fb04 6a0a 	mla	sl, r4, sl, r6
 801562a:	45da      	cmp	sl, fp
 801562c:	d80b      	bhi.n	8015646 <qsort+0x46>
 801562e:	b005      	add	sp, #20
 8015630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015634:	2702      	movs	r7, #2
 8015636:	e7f1      	b.n	801561c <qsort+0x1c>
 8015638:	463b      	mov	r3, r7
 801563a:	4622      	mov	r2, r4
 801563c:	4649      	mov	r1, r9
 801563e:	4640      	mov	r0, r8
 8015640:	f7ff ffa6 	bl	8015590 <swapfunc>
 8015644:	e013      	b.n	801566e <qsort+0x6e>
 8015646:	46d8      	mov	r8, fp
 8015648:	e012      	b.n	8015670 <qsort+0x70>
 801564a:	eba8 0904 	sub.w	r9, r8, r4
 801564e:	4641      	mov	r1, r8
 8015650:	4648      	mov	r0, r9
 8015652:	9b00      	ldr	r3, [sp, #0]
 8015654:	4798      	blx	r3
 8015656:	2800      	cmp	r0, #0
 8015658:	dd0c      	ble.n	8015674 <qsort+0x74>
 801565a:	2f00      	cmp	r7, #0
 801565c:	d1ec      	bne.n	8015638 <qsort+0x38>
 801565e:	f8d8 3000 	ldr.w	r3, [r8]
 8015662:	f8d9 2000 	ldr.w	r2, [r9]
 8015666:	f8c8 2000 	str.w	r2, [r8]
 801566a:	f8c9 3000 	str.w	r3, [r9]
 801566e:	46c8      	mov	r8, r9
 8015670:	4546      	cmp	r6, r8
 8015672:	d3ea      	bcc.n	801564a <qsort+0x4a>
 8015674:	44a3      	add	fp, r4
 8015676:	e7d8      	b.n	801562a <qsort+0x2a>
 8015678:	ea4f 085a 	mov.w	r8, sl, lsr #1
 801567c:	f10a 35ff 	add.w	r5, sl, #4294967295
 8015680:	f1ba 0f07 	cmp.w	sl, #7
 8015684:	fb04 6808 	mla	r8, r4, r8, r6
 8015688:	fb04 6505 	mla	r5, r4, r5, r6
 801568c:	d027      	beq.n	80156de <qsort+0xde>
 801568e:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
 8015692:	d94a      	bls.n	801572a <qsort+0x12a>
 8015694:	ea4f 09da 	mov.w	r9, sl, lsr #3
 8015698:	fb04 f909 	mul.w	r9, r4, r9
 801569c:	eb06 0109 	add.w	r1, r6, r9
 80156a0:	eb01 0209 	add.w	r2, r1, r9
 80156a4:	9b00      	ldr	r3, [sp, #0]
 80156a6:	4630      	mov	r0, r6
 80156a8:	f7ff ff8b 	bl	80155c2 <med3.isra.1>
 80156ac:	eb08 0209 	add.w	r2, r8, r9
 80156b0:	4641      	mov	r1, r8
 80156b2:	9001      	str	r0, [sp, #4]
 80156b4:	9b00      	ldr	r3, [sp, #0]
 80156b6:	eba8 0009 	sub.w	r0, r8, r9
 80156ba:	f7ff ff82 	bl	80155c2 <med3.isra.1>
 80156be:	4680      	mov	r8, r0
 80156c0:	eba5 0049 	sub.w	r0, r5, r9, lsl #1
 80156c4:	462a      	mov	r2, r5
 80156c6:	9b00      	ldr	r3, [sp, #0]
 80156c8:	eb00 0109 	add.w	r1, r0, r9
 80156cc:	f7ff ff79 	bl	80155c2 <med3.isra.1>
 80156d0:	4602      	mov	r2, r0
 80156d2:	4641      	mov	r1, r8
 80156d4:	9b00      	ldr	r3, [sp, #0]
 80156d6:	9801      	ldr	r0, [sp, #4]
 80156d8:	f7ff ff73 	bl	80155c2 <med3.isra.1>
 80156dc:	4680      	mov	r8, r0
 80156de:	bb3f      	cbnz	r7, 8015730 <qsort+0x130>
 80156e0:	6833      	ldr	r3, [r6, #0]
 80156e2:	f8d8 2000 	ldr.w	r2, [r8]
 80156e6:	6032      	str	r2, [r6, #0]
 80156e8:	f8c8 3000 	str.w	r3, [r8]
 80156ec:	46d8      	mov	r8, fp
 80156ee:	46a9      	mov	r9, r5
 80156f0:	f8cd b004 	str.w	fp, [sp, #4]
 80156f4:	2300      	movs	r3, #0
 80156f6:	45a8      	cmp	r8, r5
 80156f8:	d857      	bhi.n	80157aa <qsort+0x1aa>
 80156fa:	9302      	str	r3, [sp, #8]
 80156fc:	4631      	mov	r1, r6
 80156fe:	9b00      	ldr	r3, [sp, #0]
 8015700:	4640      	mov	r0, r8
 8015702:	4798      	blx	r3
 8015704:	2800      	cmp	r0, #0
 8015706:	9b02      	ldr	r3, [sp, #8]
 8015708:	dc2e      	bgt.n	8015768 <qsort+0x168>
 801570a:	d10c      	bne.n	8015726 <qsort+0x126>
 801570c:	b9bf      	cbnz	r7, 801573e <qsort+0x13e>
 801570e:	9b01      	ldr	r3, [sp, #4]
 8015710:	9901      	ldr	r1, [sp, #4]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	f8d8 2000 	ldr.w	r2, [r8]
 8015718:	600a      	str	r2, [r1, #0]
 801571a:	f8c8 3000 	str.w	r3, [r8]
 801571e:	9b01      	ldr	r3, [sp, #4]
 8015720:	4423      	add	r3, r4
 8015722:	9301      	str	r3, [sp, #4]
 8015724:	2301      	movs	r3, #1
 8015726:	44a0      	add	r8, r4
 8015728:	e7e5      	b.n	80156f6 <qsort+0xf6>
 801572a:	462a      	mov	r2, r5
 801572c:	9601      	str	r6, [sp, #4]
 801572e:	e7d0      	b.n	80156d2 <qsort+0xd2>
 8015730:	463b      	mov	r3, r7
 8015732:	4622      	mov	r2, r4
 8015734:	4641      	mov	r1, r8
 8015736:	4630      	mov	r0, r6
 8015738:	f7ff ff2a 	bl	8015590 <swapfunc>
 801573c:	e7d6      	b.n	80156ec <qsort+0xec>
 801573e:	463b      	mov	r3, r7
 8015740:	4622      	mov	r2, r4
 8015742:	4641      	mov	r1, r8
 8015744:	9801      	ldr	r0, [sp, #4]
 8015746:	f7ff ff23 	bl	8015590 <swapfunc>
 801574a:	e7e8      	b.n	801571e <qsort+0x11e>
 801574c:	d109      	bne.n	8015762 <qsort+0x162>
 801574e:	b9f7      	cbnz	r7, 801578e <qsort+0x18e>
 8015750:	682b      	ldr	r3, [r5, #0]
 8015752:	f8d9 2000 	ldr.w	r2, [r9]
 8015756:	602a      	str	r2, [r5, #0]
 8015758:	f8c9 3000 	str.w	r3, [r9]
 801575c:	eba9 0904 	sub.w	r9, r9, r4
 8015760:	2301      	movs	r3, #1
 8015762:	9d02      	ldr	r5, [sp, #8]
 8015764:	45a8      	cmp	r8, r5
 8015766:	d820      	bhi.n	80157aa <qsort+0x1aa>
 8015768:	9303      	str	r3, [sp, #12]
 801576a:	4631      	mov	r1, r6
 801576c:	9b00      	ldr	r3, [sp, #0]
 801576e:	4628      	mov	r0, r5
 8015770:	4798      	blx	r3
 8015772:	1b2b      	subs	r3, r5, r4
 8015774:	2800      	cmp	r0, #0
 8015776:	9302      	str	r3, [sp, #8]
 8015778:	9b03      	ldr	r3, [sp, #12]
 801577a:	dae7      	bge.n	801574c <qsort+0x14c>
 801577c:	b977      	cbnz	r7, 801579c <qsort+0x19c>
 801577e:	f8d8 3000 	ldr.w	r3, [r8]
 8015782:	682a      	ldr	r2, [r5, #0]
 8015784:	f8c8 2000 	str.w	r2, [r8]
 8015788:	602b      	str	r3, [r5, #0]
 801578a:	9d02      	ldr	r5, [sp, #8]
 801578c:	e7ca      	b.n	8015724 <qsort+0x124>
 801578e:	463b      	mov	r3, r7
 8015790:	4622      	mov	r2, r4
 8015792:	4649      	mov	r1, r9
 8015794:	4628      	mov	r0, r5
 8015796:	f7ff fefb 	bl	8015590 <swapfunc>
 801579a:	e7df      	b.n	801575c <qsort+0x15c>
 801579c:	463b      	mov	r3, r7
 801579e:	4622      	mov	r2, r4
 80157a0:	4629      	mov	r1, r5
 80157a2:	4640      	mov	r0, r8
 80157a4:	f7ff fef4 	bl	8015590 <swapfunc>
 80157a8:	e7ef      	b.n	801578a <qsort+0x18a>
 80157aa:	fb04 6a0a 	mla	sl, r4, sl, r6
 80157ae:	bb03      	cbnz	r3, 80157f2 <qsort+0x1f2>
 80157b0:	45d3      	cmp	fp, sl
 80157b2:	f4bf af3c 	bcs.w	801562e <qsort+0x2e>
 80157b6:	465d      	mov	r5, fp
 80157b8:	e017      	b.n	80157ea <qsort+0x1ea>
 80157ba:	463b      	mov	r3, r7
 80157bc:	4622      	mov	r2, r4
 80157be:	4641      	mov	r1, r8
 80157c0:	4628      	mov	r0, r5
 80157c2:	f7ff fee5 	bl	8015590 <swapfunc>
 80157c6:	e00f      	b.n	80157e8 <qsort+0x1e8>
 80157c8:	eba5 0804 	sub.w	r8, r5, r4
 80157cc:	4629      	mov	r1, r5
 80157ce:	4640      	mov	r0, r8
 80157d0:	9b00      	ldr	r3, [sp, #0]
 80157d2:	4798      	blx	r3
 80157d4:	2800      	cmp	r0, #0
 80157d6:	dd0a      	ble.n	80157ee <qsort+0x1ee>
 80157d8:	2f00      	cmp	r7, #0
 80157da:	d1ee      	bne.n	80157ba <qsort+0x1ba>
 80157dc:	682b      	ldr	r3, [r5, #0]
 80157de:	f8d8 2000 	ldr.w	r2, [r8]
 80157e2:	602a      	str	r2, [r5, #0]
 80157e4:	f8c8 3000 	str.w	r3, [r8]
 80157e8:	4645      	mov	r5, r8
 80157ea:	42ae      	cmp	r6, r5
 80157ec:	d3ec      	bcc.n	80157c8 <qsort+0x1c8>
 80157ee:	44a3      	add	fp, r4
 80157f0:	e7de      	b.n	80157b0 <qsort+0x1b0>
 80157f2:	9b01      	ldr	r3, [sp, #4]
 80157f4:	eba8 0b03 	sub.w	fp, r8, r3
 80157f8:	1b9a      	subs	r2, r3, r6
 80157fa:	455a      	cmp	r2, fp
 80157fc:	bfa8      	it	ge
 80157fe:	465a      	movge	r2, fp
 8015800:	b12a      	cbz	r2, 801580e <qsort+0x20e>
 8015802:	463b      	mov	r3, r7
 8015804:	eba8 0102 	sub.w	r1, r8, r2
 8015808:	4630      	mov	r0, r6
 801580a:	f7ff fec1 	bl	8015590 <swapfunc>
 801580e:	ebaa 0209 	sub.w	r2, sl, r9
 8015812:	eba9 0505 	sub.w	r5, r9, r5
 8015816:	1b12      	subs	r2, r2, r4
 8015818:	42aa      	cmp	r2, r5
 801581a:	bf28      	it	cs
 801581c:	462a      	movcs	r2, r5
 801581e:	b12a      	cbz	r2, 801582c <qsort+0x22c>
 8015820:	463b      	mov	r3, r7
 8015822:	ebaa 0102 	sub.w	r1, sl, r2
 8015826:	4640      	mov	r0, r8
 8015828:	f7ff feb2 	bl	8015590 <swapfunc>
 801582c:	455c      	cmp	r4, fp
 801582e:	d206      	bcs.n	801583e <qsort+0x23e>
 8015830:	fbbb f1f4 	udiv	r1, fp, r4
 8015834:	9b00      	ldr	r3, [sp, #0]
 8015836:	4622      	mov	r2, r4
 8015838:	4630      	mov	r0, r6
 801583a:	f7ff fee1 	bl	8015600 <qsort>
 801583e:	42a5      	cmp	r5, r4
 8015840:	f67f aef5 	bls.w	801562e <qsort+0x2e>
 8015844:	ebaa 0605 	sub.w	r6, sl, r5
 8015848:	fbb5 faf4 	udiv	sl, r5, r4
 801584c:	e6df      	b.n	801560e <qsort+0xe>

0801584e <lflush>:
 801584e:	8983      	ldrh	r3, [r0, #12]
 8015850:	f003 0309 	and.w	r3, r3, #9
 8015854:	2b09      	cmp	r3, #9
 8015856:	d101      	bne.n	801585c <lflush+0xe>
 8015858:	f7fe b980 	b.w	8013b5c <fflush>
 801585c:	2000      	movs	r0, #0
 801585e:	4770      	bx	lr

08015860 <__srefill_r>:
 8015860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015862:	460c      	mov	r4, r1
 8015864:	4605      	mov	r5, r0
 8015866:	b118      	cbz	r0, 8015870 <__srefill_r+0x10>
 8015868:	6983      	ldr	r3, [r0, #24]
 801586a:	b90b      	cbnz	r3, 8015870 <__srefill_r+0x10>
 801586c:	f7fe f9c8 	bl	8013c00 <__sinit>
 8015870:	4b3c      	ldr	r3, [pc, #240]	; (8015964 <__srefill_r+0x104>)
 8015872:	429c      	cmp	r4, r3
 8015874:	d10a      	bne.n	801588c <__srefill_r+0x2c>
 8015876:	686c      	ldr	r4, [r5, #4]
 8015878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801587c:	2300      	movs	r3, #0
 801587e:	6063      	str	r3, [r4, #4]
 8015880:	b293      	uxth	r3, r2
 8015882:	069e      	lsls	r6, r3, #26
 8015884:	d50c      	bpl.n	80158a0 <__srefill_r+0x40>
 8015886:	f04f 30ff 	mov.w	r0, #4294967295
 801588a:	e067      	b.n	801595c <__srefill_r+0xfc>
 801588c:	4b36      	ldr	r3, [pc, #216]	; (8015968 <__srefill_r+0x108>)
 801588e:	429c      	cmp	r4, r3
 8015890:	d101      	bne.n	8015896 <__srefill_r+0x36>
 8015892:	68ac      	ldr	r4, [r5, #8]
 8015894:	e7f0      	b.n	8015878 <__srefill_r+0x18>
 8015896:	4b35      	ldr	r3, [pc, #212]	; (801596c <__srefill_r+0x10c>)
 8015898:	429c      	cmp	r4, r3
 801589a:	bf08      	it	eq
 801589c:	68ec      	ldreq	r4, [r5, #12]
 801589e:	e7eb      	b.n	8015878 <__srefill_r+0x18>
 80158a0:	0758      	lsls	r0, r3, #29
 80158a2:	d449      	bmi.n	8015938 <__srefill_r+0xd8>
 80158a4:	06d9      	lsls	r1, r3, #27
 80158a6:	d405      	bmi.n	80158b4 <__srefill_r+0x54>
 80158a8:	2309      	movs	r3, #9
 80158aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80158ae:	602b      	str	r3, [r5, #0]
 80158b0:	81a2      	strh	r2, [r4, #12]
 80158b2:	e7e8      	b.n	8015886 <__srefill_r+0x26>
 80158b4:	071a      	lsls	r2, r3, #28
 80158b6:	d50b      	bpl.n	80158d0 <__srefill_r+0x70>
 80158b8:	4621      	mov	r1, r4
 80158ba:	4628      	mov	r0, r5
 80158bc:	f7fe f924 	bl	8013b08 <_fflush_r>
 80158c0:	2800      	cmp	r0, #0
 80158c2:	d1e0      	bne.n	8015886 <__srefill_r+0x26>
 80158c4:	89a3      	ldrh	r3, [r4, #12]
 80158c6:	60a0      	str	r0, [r4, #8]
 80158c8:	f023 0308 	bic.w	r3, r3, #8
 80158cc:	81a3      	strh	r3, [r4, #12]
 80158ce:	61a0      	str	r0, [r4, #24]
 80158d0:	89a3      	ldrh	r3, [r4, #12]
 80158d2:	f043 0304 	orr.w	r3, r3, #4
 80158d6:	81a3      	strh	r3, [r4, #12]
 80158d8:	6923      	ldr	r3, [r4, #16]
 80158da:	b91b      	cbnz	r3, 80158e4 <__srefill_r+0x84>
 80158dc:	4621      	mov	r1, r4
 80158de:	4628      	mov	r0, r5
 80158e0:	f7fe fa7c 	bl	8013ddc <__smakebuf_r>
 80158e4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80158e8:	b2be      	uxth	r6, r7
 80158ea:	07b3      	lsls	r3, r6, #30
 80158ec:	d00f      	beq.n	801590e <__srefill_r+0xae>
 80158ee:	2301      	movs	r3, #1
 80158f0:	81a3      	strh	r3, [r4, #12]
 80158f2:	4b1f      	ldr	r3, [pc, #124]	; (8015970 <__srefill_r+0x110>)
 80158f4:	491f      	ldr	r1, [pc, #124]	; (8015974 <__srefill_r+0x114>)
 80158f6:	6818      	ldr	r0, [r3, #0]
 80158f8:	f006 0609 	and.w	r6, r6, #9
 80158fc:	f7fe f9ec 	bl	8013cd8 <_fwalk>
 8015900:	2e09      	cmp	r6, #9
 8015902:	81a7      	strh	r7, [r4, #12]
 8015904:	d103      	bne.n	801590e <__srefill_r+0xae>
 8015906:	4621      	mov	r1, r4
 8015908:	4628      	mov	r0, r5
 801590a:	f7fe f877 	bl	80139fc <__sflush_r>
 801590e:	6922      	ldr	r2, [r4, #16]
 8015910:	6022      	str	r2, [r4, #0]
 8015912:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015914:	6963      	ldr	r3, [r4, #20]
 8015916:	6a21      	ldr	r1, [r4, #32]
 8015918:	4628      	mov	r0, r5
 801591a:	47b0      	blx	r6
 801591c:	2800      	cmp	r0, #0
 801591e:	6060      	str	r0, [r4, #4]
 8015920:	dc1d      	bgt.n	801595e <__srefill_r+0xfe>
 8015922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015926:	bf17      	itett	ne
 8015928:	2200      	movne	r2, #0
 801592a:	f043 0320 	orreq.w	r3, r3, #32
 801592e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8015932:	6062      	strne	r2, [r4, #4]
 8015934:	81a3      	strh	r3, [r4, #12]
 8015936:	e7a6      	b.n	8015886 <__srefill_r+0x26>
 8015938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801593a:	2900      	cmp	r1, #0
 801593c:	d0cc      	beq.n	80158d8 <__srefill_r+0x78>
 801593e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015942:	4299      	cmp	r1, r3
 8015944:	d002      	beq.n	801594c <__srefill_r+0xec>
 8015946:	4628      	mov	r0, r5
 8015948:	f7fe fa9c 	bl	8013e84 <_free_r>
 801594c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801594e:	6063      	str	r3, [r4, #4]
 8015950:	2000      	movs	r0, #0
 8015952:	6360      	str	r0, [r4, #52]	; 0x34
 8015954:	2b00      	cmp	r3, #0
 8015956:	d0bf      	beq.n	80158d8 <__srefill_r+0x78>
 8015958:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801595a:	6023      	str	r3, [r4, #0]
 801595c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801595e:	2000      	movs	r0, #0
 8015960:	e7fc      	b.n	801595c <__srefill_r+0xfc>
 8015962:	bf00      	nop
 8015964:	08019218 	.word	0x08019218
 8015968:	08019238 	.word	0x08019238
 801596c:	080191f8 	.word	0x080191f8
 8015970:	08019258 	.word	0x08019258
 8015974:	0801584f 	.word	0x0801584f

08015978 <_sbrk_r>:
 8015978:	b538      	push	{r3, r4, r5, lr}
 801597a:	4c06      	ldr	r4, [pc, #24]	; (8015994 <_sbrk_r+0x1c>)
 801597c:	2300      	movs	r3, #0
 801597e:	4605      	mov	r5, r0
 8015980:	4608      	mov	r0, r1
 8015982:	6023      	str	r3, [r4, #0]
 8015984:	f7f7 fdce 	bl	800d524 <_sbrk>
 8015988:	1c43      	adds	r3, r0, #1
 801598a:	d102      	bne.n	8015992 <_sbrk_r+0x1a>
 801598c:	6823      	ldr	r3, [r4, #0]
 801598e:	b103      	cbz	r3, 8015992 <_sbrk_r+0x1a>
 8015990:	602b      	str	r3, [r5, #0]
 8015992:	bd38      	pop	{r3, r4, r5, pc}
 8015994:	20008f4c 	.word	0x20008f4c

08015998 <iscanf>:
 8015998:	b40f      	push	{r0, r1, r2, r3}
 801599a:	4b0a      	ldr	r3, [pc, #40]	; (80159c4 <iscanf+0x2c>)
 801599c:	b513      	push	{r0, r1, r4, lr}
 801599e:	681c      	ldr	r4, [r3, #0]
 80159a0:	b124      	cbz	r4, 80159ac <iscanf+0x14>
 80159a2:	69a3      	ldr	r3, [r4, #24]
 80159a4:	b913      	cbnz	r3, 80159ac <iscanf+0x14>
 80159a6:	4620      	mov	r0, r4
 80159a8:	f7fe f92a 	bl	8013c00 <__sinit>
 80159ac:	ab05      	add	r3, sp, #20
 80159ae:	9a04      	ldr	r2, [sp, #16]
 80159b0:	6861      	ldr	r1, [r4, #4]
 80159b2:	9301      	str	r3, [sp, #4]
 80159b4:	4620      	mov	r0, r4
 80159b6:	f7ff f9f9 	bl	8014dac <_vfiscanf_r>
 80159ba:	b002      	add	sp, #8
 80159bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159c0:	b004      	add	sp, #16
 80159c2:	4770      	bx	lr
 80159c4:	2000003c 	.word	0x2000003c

080159c8 <__sccl>:
 80159c8:	b570      	push	{r4, r5, r6, lr}
 80159ca:	780b      	ldrb	r3, [r1, #0]
 80159cc:	2b5e      	cmp	r3, #94	; 0x5e
 80159ce:	bf13      	iteet	ne
 80159d0:	1c4a      	addne	r2, r1, #1
 80159d2:	1c8a      	addeq	r2, r1, #2
 80159d4:	784b      	ldrbeq	r3, [r1, #1]
 80159d6:	2100      	movne	r1, #0
 80159d8:	bf08      	it	eq
 80159da:	2101      	moveq	r1, #1
 80159dc:	1e44      	subs	r4, r0, #1
 80159de:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80159e2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80159e6:	42ac      	cmp	r4, r5
 80159e8:	d1fb      	bne.n	80159e2 <__sccl+0x1a>
 80159ea:	b913      	cbnz	r3, 80159f2 <__sccl+0x2a>
 80159ec:	3a01      	subs	r2, #1
 80159ee:	4610      	mov	r0, r2
 80159f0:	bd70      	pop	{r4, r5, r6, pc}
 80159f2:	f081 0401 	eor.w	r4, r1, #1
 80159f6:	54c4      	strb	r4, [r0, r3]
 80159f8:	1c51      	adds	r1, r2, #1
 80159fa:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80159fe:	2d2d      	cmp	r5, #45	; 0x2d
 8015a00:	f101 36ff 	add.w	r6, r1, #4294967295
 8015a04:	460a      	mov	r2, r1
 8015a06:	d006      	beq.n	8015a16 <__sccl+0x4e>
 8015a08:	2d5d      	cmp	r5, #93	; 0x5d
 8015a0a:	d0f0      	beq.n	80159ee <__sccl+0x26>
 8015a0c:	b90d      	cbnz	r5, 8015a12 <__sccl+0x4a>
 8015a0e:	4632      	mov	r2, r6
 8015a10:	e7ed      	b.n	80159ee <__sccl+0x26>
 8015a12:	462b      	mov	r3, r5
 8015a14:	e7ef      	b.n	80159f6 <__sccl+0x2e>
 8015a16:	780e      	ldrb	r6, [r1, #0]
 8015a18:	2e5d      	cmp	r6, #93	; 0x5d
 8015a1a:	d0fa      	beq.n	8015a12 <__sccl+0x4a>
 8015a1c:	42b3      	cmp	r3, r6
 8015a1e:	dcf8      	bgt.n	8015a12 <__sccl+0x4a>
 8015a20:	3301      	adds	r3, #1
 8015a22:	429e      	cmp	r6, r3
 8015a24:	54c4      	strb	r4, [r0, r3]
 8015a26:	dcfb      	bgt.n	8015a20 <__sccl+0x58>
 8015a28:	3102      	adds	r1, #2
 8015a2a:	e7e6      	b.n	80159fa <__sccl+0x32>

08015a2c <setbuf>:
 8015a2c:	2900      	cmp	r1, #0
 8015a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a32:	bf0c      	ite	eq
 8015a34:	2202      	moveq	r2, #2
 8015a36:	2200      	movne	r2, #0
 8015a38:	f000 b800 	b.w	8015a3c <setvbuf>

08015a3c <setvbuf>:
 8015a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015a40:	461d      	mov	r5, r3
 8015a42:	4b51      	ldr	r3, [pc, #324]	; (8015b88 <setvbuf+0x14c>)
 8015a44:	681e      	ldr	r6, [r3, #0]
 8015a46:	4604      	mov	r4, r0
 8015a48:	460f      	mov	r7, r1
 8015a4a:	4690      	mov	r8, r2
 8015a4c:	b126      	cbz	r6, 8015a58 <setvbuf+0x1c>
 8015a4e:	69b3      	ldr	r3, [r6, #24]
 8015a50:	b913      	cbnz	r3, 8015a58 <setvbuf+0x1c>
 8015a52:	4630      	mov	r0, r6
 8015a54:	f7fe f8d4 	bl	8013c00 <__sinit>
 8015a58:	4b4c      	ldr	r3, [pc, #304]	; (8015b8c <setvbuf+0x150>)
 8015a5a:	429c      	cmp	r4, r3
 8015a5c:	d152      	bne.n	8015b04 <setvbuf+0xc8>
 8015a5e:	6874      	ldr	r4, [r6, #4]
 8015a60:	f1b8 0f02 	cmp.w	r8, #2
 8015a64:	d006      	beq.n	8015a74 <setvbuf+0x38>
 8015a66:	f1b8 0f01 	cmp.w	r8, #1
 8015a6a:	f200 8089 	bhi.w	8015b80 <setvbuf+0x144>
 8015a6e:	2d00      	cmp	r5, #0
 8015a70:	f2c0 8086 	blt.w	8015b80 <setvbuf+0x144>
 8015a74:	4621      	mov	r1, r4
 8015a76:	4630      	mov	r0, r6
 8015a78:	f7fe f846 	bl	8013b08 <_fflush_r>
 8015a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a7e:	b141      	cbz	r1, 8015a92 <setvbuf+0x56>
 8015a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a84:	4299      	cmp	r1, r3
 8015a86:	d002      	beq.n	8015a8e <setvbuf+0x52>
 8015a88:	4630      	mov	r0, r6
 8015a8a:	f7fe f9fb 	bl	8013e84 <_free_r>
 8015a8e:	2300      	movs	r3, #0
 8015a90:	6363      	str	r3, [r4, #52]	; 0x34
 8015a92:	2300      	movs	r3, #0
 8015a94:	61a3      	str	r3, [r4, #24]
 8015a96:	6063      	str	r3, [r4, #4]
 8015a98:	89a3      	ldrh	r3, [r4, #12]
 8015a9a:	061b      	lsls	r3, r3, #24
 8015a9c:	d503      	bpl.n	8015aa6 <setvbuf+0x6a>
 8015a9e:	6921      	ldr	r1, [r4, #16]
 8015aa0:	4630      	mov	r0, r6
 8015aa2:	f7fe f9ef 	bl	8013e84 <_free_r>
 8015aa6:	89a3      	ldrh	r3, [r4, #12]
 8015aa8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8015aac:	f023 0303 	bic.w	r3, r3, #3
 8015ab0:	f1b8 0f02 	cmp.w	r8, #2
 8015ab4:	81a3      	strh	r3, [r4, #12]
 8015ab6:	d05d      	beq.n	8015b74 <setvbuf+0x138>
 8015ab8:	ab01      	add	r3, sp, #4
 8015aba:	466a      	mov	r2, sp
 8015abc:	4621      	mov	r1, r4
 8015abe:	4630      	mov	r0, r6
 8015ac0:	f7fe f968 	bl	8013d94 <__swhatbuf_r>
 8015ac4:	89a3      	ldrh	r3, [r4, #12]
 8015ac6:	4318      	orrs	r0, r3
 8015ac8:	81a0      	strh	r0, [r4, #12]
 8015aca:	bb2d      	cbnz	r5, 8015b18 <setvbuf+0xdc>
 8015acc:	9d00      	ldr	r5, [sp, #0]
 8015ace:	4628      	mov	r0, r5
 8015ad0:	f002 fb56 	bl	8018180 <malloc>
 8015ad4:	4607      	mov	r7, r0
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	d14e      	bne.n	8015b78 <setvbuf+0x13c>
 8015ada:	f8dd 9000 	ldr.w	r9, [sp]
 8015ade:	45a9      	cmp	r9, r5
 8015ae0:	d13c      	bne.n	8015b5c <setvbuf+0x120>
 8015ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ae6:	89a3      	ldrh	r3, [r4, #12]
 8015ae8:	f043 0302 	orr.w	r3, r3, #2
 8015aec:	81a3      	strh	r3, [r4, #12]
 8015aee:	2300      	movs	r3, #0
 8015af0:	60a3      	str	r3, [r4, #8]
 8015af2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015af6:	6023      	str	r3, [r4, #0]
 8015af8:	6123      	str	r3, [r4, #16]
 8015afa:	2301      	movs	r3, #1
 8015afc:	6163      	str	r3, [r4, #20]
 8015afe:	b003      	add	sp, #12
 8015b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b04:	4b22      	ldr	r3, [pc, #136]	; (8015b90 <setvbuf+0x154>)
 8015b06:	429c      	cmp	r4, r3
 8015b08:	d101      	bne.n	8015b0e <setvbuf+0xd2>
 8015b0a:	68b4      	ldr	r4, [r6, #8]
 8015b0c:	e7a8      	b.n	8015a60 <setvbuf+0x24>
 8015b0e:	4b21      	ldr	r3, [pc, #132]	; (8015b94 <setvbuf+0x158>)
 8015b10:	429c      	cmp	r4, r3
 8015b12:	bf08      	it	eq
 8015b14:	68f4      	ldreq	r4, [r6, #12]
 8015b16:	e7a3      	b.n	8015a60 <setvbuf+0x24>
 8015b18:	2f00      	cmp	r7, #0
 8015b1a:	d0d8      	beq.n	8015ace <setvbuf+0x92>
 8015b1c:	69b3      	ldr	r3, [r6, #24]
 8015b1e:	b913      	cbnz	r3, 8015b26 <setvbuf+0xea>
 8015b20:	4630      	mov	r0, r6
 8015b22:	f7fe f86d 	bl	8013c00 <__sinit>
 8015b26:	f1b8 0f01 	cmp.w	r8, #1
 8015b2a:	bf08      	it	eq
 8015b2c:	89a3      	ldrheq	r3, [r4, #12]
 8015b2e:	6027      	str	r7, [r4, #0]
 8015b30:	bf04      	itt	eq
 8015b32:	f043 0301 	orreq.w	r3, r3, #1
 8015b36:	81a3      	strheq	r3, [r4, #12]
 8015b38:	89a3      	ldrh	r3, [r4, #12]
 8015b3a:	f013 0008 	ands.w	r0, r3, #8
 8015b3e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8015b42:	d01b      	beq.n	8015b7c <setvbuf+0x140>
 8015b44:	f013 0001 	ands.w	r0, r3, #1
 8015b48:	bf18      	it	ne
 8015b4a:	426d      	negne	r5, r5
 8015b4c:	f04f 0300 	mov.w	r3, #0
 8015b50:	bf1d      	ittte	ne
 8015b52:	60a3      	strne	r3, [r4, #8]
 8015b54:	61a5      	strne	r5, [r4, #24]
 8015b56:	4618      	movne	r0, r3
 8015b58:	60a5      	streq	r5, [r4, #8]
 8015b5a:	e7d0      	b.n	8015afe <setvbuf+0xc2>
 8015b5c:	4648      	mov	r0, r9
 8015b5e:	f002 fb0f 	bl	8018180 <malloc>
 8015b62:	4607      	mov	r7, r0
 8015b64:	2800      	cmp	r0, #0
 8015b66:	d0bc      	beq.n	8015ae2 <setvbuf+0xa6>
 8015b68:	89a3      	ldrh	r3, [r4, #12]
 8015b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b6e:	81a3      	strh	r3, [r4, #12]
 8015b70:	464d      	mov	r5, r9
 8015b72:	e7d3      	b.n	8015b1c <setvbuf+0xe0>
 8015b74:	2000      	movs	r0, #0
 8015b76:	e7b6      	b.n	8015ae6 <setvbuf+0xaa>
 8015b78:	46a9      	mov	r9, r5
 8015b7a:	e7f5      	b.n	8015b68 <setvbuf+0x12c>
 8015b7c:	60a0      	str	r0, [r4, #8]
 8015b7e:	e7be      	b.n	8015afe <setvbuf+0xc2>
 8015b80:	f04f 30ff 	mov.w	r0, #4294967295
 8015b84:	e7bb      	b.n	8015afe <setvbuf+0xc2>
 8015b86:	bf00      	nop
 8015b88:	2000003c 	.word	0x2000003c
 8015b8c:	08019218 	.word	0x08019218
 8015b90:	08019238 	.word	0x08019238
 8015b94:	080191f8 	.word	0x080191f8

08015b98 <nanf>:
 8015b98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015ba0 <nanf+0x8>
 8015b9c:	4770      	bx	lr
 8015b9e:	bf00      	nop
 8015ba0:	7fc00000 	.word	0x7fc00000

08015ba4 <siprintf>:
 8015ba4:	b40e      	push	{r1, r2, r3}
 8015ba6:	b500      	push	{lr}
 8015ba8:	b09c      	sub	sp, #112	; 0x70
 8015baa:	ab1d      	add	r3, sp, #116	; 0x74
 8015bac:	9002      	str	r0, [sp, #8]
 8015bae:	9006      	str	r0, [sp, #24]
 8015bb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015bb4:	4809      	ldr	r0, [pc, #36]	; (8015bdc <siprintf+0x38>)
 8015bb6:	9107      	str	r1, [sp, #28]
 8015bb8:	9104      	str	r1, [sp, #16]
 8015bba:	4909      	ldr	r1, [pc, #36]	; (8015be0 <siprintf+0x3c>)
 8015bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015bc0:	9105      	str	r1, [sp, #20]
 8015bc2:	6800      	ldr	r0, [r0, #0]
 8015bc4:	9301      	str	r3, [sp, #4]
 8015bc6:	a902      	add	r1, sp, #8
 8015bc8:	f002 ff9c 	bl	8018b04 <_svfiprintf_r>
 8015bcc:	9b02      	ldr	r3, [sp, #8]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	701a      	strb	r2, [r3, #0]
 8015bd2:	b01c      	add	sp, #112	; 0x70
 8015bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015bd8:	b003      	add	sp, #12
 8015bda:	4770      	bx	lr
 8015bdc:	2000003c 	.word	0x2000003c
 8015be0:	ffff0208 	.word	0xffff0208

08015be4 <__sread>:
 8015be4:	b510      	push	{r4, lr}
 8015be6:	460c      	mov	r4, r1
 8015be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bec:	f003 f8b8 	bl	8018d60 <_read_r>
 8015bf0:	2800      	cmp	r0, #0
 8015bf2:	bfab      	itete	ge
 8015bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8015bf8:	181b      	addge	r3, r3, r0
 8015bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015bfe:	bfac      	ite	ge
 8015c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8015c02:	81a3      	strhlt	r3, [r4, #12]
 8015c04:	bd10      	pop	{r4, pc}

08015c06 <__swrite>:
 8015c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c0a:	461f      	mov	r7, r3
 8015c0c:	898b      	ldrh	r3, [r1, #12]
 8015c0e:	05db      	lsls	r3, r3, #23
 8015c10:	4605      	mov	r5, r0
 8015c12:	460c      	mov	r4, r1
 8015c14:	4616      	mov	r6, r2
 8015c16:	d505      	bpl.n	8015c24 <__swrite+0x1e>
 8015c18:	2302      	movs	r3, #2
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c20:	f002 fa9c 	bl	801815c <_lseek_r>
 8015c24:	89a3      	ldrh	r3, [r4, #12]
 8015c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c2e:	81a3      	strh	r3, [r4, #12]
 8015c30:	4632      	mov	r2, r6
 8015c32:	463b      	mov	r3, r7
 8015c34:	4628      	mov	r0, r5
 8015c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c3a:	f001 b851 	b.w	8016ce0 <_write_r>

08015c3e <__sseek>:
 8015c3e:	b510      	push	{r4, lr}
 8015c40:	460c      	mov	r4, r1
 8015c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c46:	f002 fa89 	bl	801815c <_lseek_r>
 8015c4a:	1c43      	adds	r3, r0, #1
 8015c4c:	89a3      	ldrh	r3, [r4, #12]
 8015c4e:	bf15      	itete	ne
 8015c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8015c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015c5a:	81a3      	strheq	r3, [r4, #12]
 8015c5c:	bf18      	it	ne
 8015c5e:	81a3      	strhne	r3, [r4, #12]
 8015c60:	bd10      	pop	{r4, pc}

08015c62 <__sclose>:
 8015c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c66:	f001 b8bb 	b.w	8016de0 <_close_r>

08015c6a <sulp>:
 8015c6a:	b570      	push	{r4, r5, r6, lr}
 8015c6c:	4604      	mov	r4, r0
 8015c6e:	460d      	mov	r5, r1
 8015c70:	ec45 4b10 	vmov	d0, r4, r5
 8015c74:	4616      	mov	r6, r2
 8015c76:	f002 fd83 	bl	8018780 <__ulp>
 8015c7a:	ec51 0b10 	vmov	r0, r1, d0
 8015c7e:	b17e      	cbz	r6, 8015ca0 <sulp+0x36>
 8015c80:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015c84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	dd09      	ble.n	8015ca0 <sulp+0x36>
 8015c8c:	051b      	lsls	r3, r3, #20
 8015c8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015c92:	2400      	movs	r4, #0
 8015c94:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015c98:	4622      	mov	r2, r4
 8015c9a:	462b      	mov	r3, r5
 8015c9c:	f7f2 fbe4 	bl	8008468 <__aeabi_dmul>
 8015ca0:	bd70      	pop	{r4, r5, r6, pc}
 8015ca2:	0000      	movs	r0, r0
 8015ca4:	0000      	movs	r0, r0
	...

08015ca8 <_strtod_l>:
 8015ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cac:	461f      	mov	r7, r3
 8015cae:	b0a1      	sub	sp, #132	; 0x84
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	4681      	mov	r9, r0
 8015cb4:	4638      	mov	r0, r7
 8015cb6:	460e      	mov	r6, r1
 8015cb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8015cba:	931c      	str	r3, [sp, #112]	; 0x70
 8015cbc:	f002 fa3e 	bl	801813c <__localeconv_l>
 8015cc0:	4680      	mov	r8, r0
 8015cc2:	6800      	ldr	r0, [r0, #0]
 8015cc4:	f7f2 f9bc 	bl	8008040 <strlen>
 8015cc8:	f04f 0a00 	mov.w	sl, #0
 8015ccc:	4604      	mov	r4, r0
 8015cce:	f04f 0b00 	mov.w	fp, #0
 8015cd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8015cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015cd6:	781a      	ldrb	r2, [r3, #0]
 8015cd8:	2a0d      	cmp	r2, #13
 8015cda:	d832      	bhi.n	8015d42 <_strtod_l+0x9a>
 8015cdc:	2a09      	cmp	r2, #9
 8015cde:	d236      	bcs.n	8015d4e <_strtod_l+0xa6>
 8015ce0:	2a00      	cmp	r2, #0
 8015ce2:	d03e      	beq.n	8015d62 <_strtod_l+0xba>
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	930d      	str	r3, [sp, #52]	; 0x34
 8015ce8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015cea:	782b      	ldrb	r3, [r5, #0]
 8015cec:	2b30      	cmp	r3, #48	; 0x30
 8015cee:	f040 80ac 	bne.w	8015e4a <_strtod_l+0x1a2>
 8015cf2:	786b      	ldrb	r3, [r5, #1]
 8015cf4:	2b58      	cmp	r3, #88	; 0x58
 8015cf6:	d001      	beq.n	8015cfc <_strtod_l+0x54>
 8015cf8:	2b78      	cmp	r3, #120	; 0x78
 8015cfa:	d167      	bne.n	8015dcc <_strtod_l+0x124>
 8015cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015cfe:	9301      	str	r3, [sp, #4]
 8015d00:	ab1c      	add	r3, sp, #112	; 0x70
 8015d02:	9300      	str	r3, [sp, #0]
 8015d04:	9702      	str	r7, [sp, #8]
 8015d06:	ab1d      	add	r3, sp, #116	; 0x74
 8015d08:	4a88      	ldr	r2, [pc, #544]	; (8015f2c <_strtod_l+0x284>)
 8015d0a:	a91b      	add	r1, sp, #108	; 0x6c
 8015d0c:	4648      	mov	r0, r9
 8015d0e:	f001 ff1c 	bl	8017b4a <__gethex>
 8015d12:	f010 0407 	ands.w	r4, r0, #7
 8015d16:	4606      	mov	r6, r0
 8015d18:	d005      	beq.n	8015d26 <_strtod_l+0x7e>
 8015d1a:	2c06      	cmp	r4, #6
 8015d1c:	d12b      	bne.n	8015d76 <_strtod_l+0xce>
 8015d1e:	3501      	adds	r5, #1
 8015d20:	2300      	movs	r3, #0
 8015d22:	951b      	str	r5, [sp, #108]	; 0x6c
 8015d24:	930d      	str	r3, [sp, #52]	; 0x34
 8015d26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	f040 859a 	bne.w	8016862 <_strtod_l+0xbba>
 8015d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d30:	b1e3      	cbz	r3, 8015d6c <_strtod_l+0xc4>
 8015d32:	4652      	mov	r2, sl
 8015d34:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015d38:	ec43 2b10 	vmov	d0, r2, r3
 8015d3c:	b021      	add	sp, #132	; 0x84
 8015d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d42:	2a2b      	cmp	r2, #43	; 0x2b
 8015d44:	d015      	beq.n	8015d72 <_strtod_l+0xca>
 8015d46:	2a2d      	cmp	r2, #45	; 0x2d
 8015d48:	d004      	beq.n	8015d54 <_strtod_l+0xac>
 8015d4a:	2a20      	cmp	r2, #32
 8015d4c:	d1ca      	bne.n	8015ce4 <_strtod_l+0x3c>
 8015d4e:	3301      	adds	r3, #1
 8015d50:	931b      	str	r3, [sp, #108]	; 0x6c
 8015d52:	e7bf      	b.n	8015cd4 <_strtod_l+0x2c>
 8015d54:	2201      	movs	r2, #1
 8015d56:	920d      	str	r2, [sp, #52]	; 0x34
 8015d58:	1c5a      	adds	r2, r3, #1
 8015d5a:	921b      	str	r2, [sp, #108]	; 0x6c
 8015d5c:	785b      	ldrb	r3, [r3, #1]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d1c2      	bne.n	8015ce8 <_strtod_l+0x40>
 8015d62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d64:	961b      	str	r6, [sp, #108]	; 0x6c
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	f040 8579 	bne.w	801685e <_strtod_l+0xbb6>
 8015d6c:	4652      	mov	r2, sl
 8015d6e:	465b      	mov	r3, fp
 8015d70:	e7e2      	b.n	8015d38 <_strtod_l+0x90>
 8015d72:	2200      	movs	r2, #0
 8015d74:	e7ef      	b.n	8015d56 <_strtod_l+0xae>
 8015d76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015d78:	b13a      	cbz	r2, 8015d8a <_strtod_l+0xe2>
 8015d7a:	2135      	movs	r1, #53	; 0x35
 8015d7c:	a81e      	add	r0, sp, #120	; 0x78
 8015d7e:	f002 fdf7 	bl	8018970 <__copybits>
 8015d82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015d84:	4648      	mov	r0, r9
 8015d86:	f002 fa64 	bl	8018252 <_Bfree>
 8015d8a:	3c01      	subs	r4, #1
 8015d8c:	2c04      	cmp	r4, #4
 8015d8e:	d806      	bhi.n	8015d9e <_strtod_l+0xf6>
 8015d90:	e8df f004 	tbb	[pc, r4]
 8015d94:	1714030a 	.word	0x1714030a
 8015d98:	0a          	.byte	0x0a
 8015d99:	00          	.byte	0x00
 8015d9a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015d9e:	0730      	lsls	r0, r6, #28
 8015da0:	d5c1      	bpl.n	8015d26 <_strtod_l+0x7e>
 8015da2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015da6:	e7be      	b.n	8015d26 <_strtod_l+0x7e>
 8015da8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015dac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015dae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015db2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015db6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015dba:	e7f0      	b.n	8015d9e <_strtod_l+0xf6>
 8015dbc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015f30 <_strtod_l+0x288>
 8015dc0:	e7ed      	b.n	8015d9e <_strtod_l+0xf6>
 8015dc2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015dc6:	f04f 3aff 	mov.w	sl, #4294967295
 8015dca:	e7e8      	b.n	8015d9e <_strtod_l+0xf6>
 8015dcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015dce:	1c5a      	adds	r2, r3, #1
 8015dd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8015dd2:	785b      	ldrb	r3, [r3, #1]
 8015dd4:	2b30      	cmp	r3, #48	; 0x30
 8015dd6:	d0f9      	beq.n	8015dcc <_strtod_l+0x124>
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d0a4      	beq.n	8015d26 <_strtod_l+0x7e>
 8015ddc:	2301      	movs	r3, #1
 8015dde:	2500      	movs	r5, #0
 8015de0:	9306      	str	r3, [sp, #24]
 8015de2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015de4:	9308      	str	r3, [sp, #32]
 8015de6:	9507      	str	r5, [sp, #28]
 8015de8:	9505      	str	r5, [sp, #20]
 8015dea:	220a      	movs	r2, #10
 8015dec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015dee:	7807      	ldrb	r7, [r0, #0]
 8015df0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015df4:	b2d9      	uxtb	r1, r3
 8015df6:	2909      	cmp	r1, #9
 8015df8:	d929      	bls.n	8015e4e <_strtod_l+0x1a6>
 8015dfa:	4622      	mov	r2, r4
 8015dfc:	f8d8 1000 	ldr.w	r1, [r8]
 8015e00:	f002 ffc0 	bl	8018d84 <strncmp>
 8015e04:	2800      	cmp	r0, #0
 8015e06:	d031      	beq.n	8015e6c <_strtod_l+0x1c4>
 8015e08:	2000      	movs	r0, #0
 8015e0a:	9c05      	ldr	r4, [sp, #20]
 8015e0c:	9004      	str	r0, [sp, #16]
 8015e0e:	463b      	mov	r3, r7
 8015e10:	4602      	mov	r2, r0
 8015e12:	2b65      	cmp	r3, #101	; 0x65
 8015e14:	d001      	beq.n	8015e1a <_strtod_l+0x172>
 8015e16:	2b45      	cmp	r3, #69	; 0x45
 8015e18:	d114      	bne.n	8015e44 <_strtod_l+0x19c>
 8015e1a:	b924      	cbnz	r4, 8015e26 <_strtod_l+0x17e>
 8015e1c:	b910      	cbnz	r0, 8015e24 <_strtod_l+0x17c>
 8015e1e:	9b06      	ldr	r3, [sp, #24]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d09e      	beq.n	8015d62 <_strtod_l+0xba>
 8015e24:	2400      	movs	r4, #0
 8015e26:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015e28:	1c73      	adds	r3, r6, #1
 8015e2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8015e2c:	7873      	ldrb	r3, [r6, #1]
 8015e2e:	2b2b      	cmp	r3, #43	; 0x2b
 8015e30:	d078      	beq.n	8015f24 <_strtod_l+0x27c>
 8015e32:	2b2d      	cmp	r3, #45	; 0x2d
 8015e34:	d070      	beq.n	8015f18 <_strtod_l+0x270>
 8015e36:	f04f 0c00 	mov.w	ip, #0
 8015e3a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015e3e:	2f09      	cmp	r7, #9
 8015e40:	d97c      	bls.n	8015f3c <_strtod_l+0x294>
 8015e42:	961b      	str	r6, [sp, #108]	; 0x6c
 8015e44:	f04f 0e00 	mov.w	lr, #0
 8015e48:	e09a      	b.n	8015f80 <_strtod_l+0x2d8>
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	e7c7      	b.n	8015dde <_strtod_l+0x136>
 8015e4e:	9905      	ldr	r1, [sp, #20]
 8015e50:	2908      	cmp	r1, #8
 8015e52:	bfdd      	ittte	le
 8015e54:	9907      	ldrle	r1, [sp, #28]
 8015e56:	fb02 3301 	mlale	r3, r2, r1, r3
 8015e5a:	9307      	strle	r3, [sp, #28]
 8015e5c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015e60:	9b05      	ldr	r3, [sp, #20]
 8015e62:	3001      	adds	r0, #1
 8015e64:	3301      	adds	r3, #1
 8015e66:	9305      	str	r3, [sp, #20]
 8015e68:	901b      	str	r0, [sp, #108]	; 0x6c
 8015e6a:	e7bf      	b.n	8015dec <_strtod_l+0x144>
 8015e6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e6e:	191a      	adds	r2, r3, r4
 8015e70:	921b      	str	r2, [sp, #108]	; 0x6c
 8015e72:	9a05      	ldr	r2, [sp, #20]
 8015e74:	5d1b      	ldrb	r3, [r3, r4]
 8015e76:	2a00      	cmp	r2, #0
 8015e78:	d037      	beq.n	8015eea <_strtod_l+0x242>
 8015e7a:	9c05      	ldr	r4, [sp, #20]
 8015e7c:	4602      	mov	r2, r0
 8015e7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015e82:	2909      	cmp	r1, #9
 8015e84:	d913      	bls.n	8015eae <_strtod_l+0x206>
 8015e86:	2101      	movs	r1, #1
 8015e88:	9104      	str	r1, [sp, #16]
 8015e8a:	e7c2      	b.n	8015e12 <_strtod_l+0x16a>
 8015e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e8e:	1c5a      	adds	r2, r3, #1
 8015e90:	921b      	str	r2, [sp, #108]	; 0x6c
 8015e92:	785b      	ldrb	r3, [r3, #1]
 8015e94:	3001      	adds	r0, #1
 8015e96:	2b30      	cmp	r3, #48	; 0x30
 8015e98:	d0f8      	beq.n	8015e8c <_strtod_l+0x1e4>
 8015e9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015e9e:	2a08      	cmp	r2, #8
 8015ea0:	f200 84e4 	bhi.w	801686c <_strtod_l+0xbc4>
 8015ea4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015ea6:	9208      	str	r2, [sp, #32]
 8015ea8:	4602      	mov	r2, r0
 8015eaa:	2000      	movs	r0, #0
 8015eac:	4604      	mov	r4, r0
 8015eae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015eb2:	f100 0101 	add.w	r1, r0, #1
 8015eb6:	d012      	beq.n	8015ede <_strtod_l+0x236>
 8015eb8:	440a      	add	r2, r1
 8015eba:	eb00 0c04 	add.w	ip, r0, r4
 8015ebe:	4621      	mov	r1, r4
 8015ec0:	270a      	movs	r7, #10
 8015ec2:	458c      	cmp	ip, r1
 8015ec4:	d113      	bne.n	8015eee <_strtod_l+0x246>
 8015ec6:	1821      	adds	r1, r4, r0
 8015ec8:	2908      	cmp	r1, #8
 8015eca:	f104 0401 	add.w	r4, r4, #1
 8015ece:	4404      	add	r4, r0
 8015ed0:	dc19      	bgt.n	8015f06 <_strtod_l+0x25e>
 8015ed2:	9b07      	ldr	r3, [sp, #28]
 8015ed4:	210a      	movs	r1, #10
 8015ed6:	fb01 e303 	mla	r3, r1, r3, lr
 8015eda:	9307      	str	r3, [sp, #28]
 8015edc:	2100      	movs	r1, #0
 8015ede:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ee0:	1c58      	adds	r0, r3, #1
 8015ee2:	901b      	str	r0, [sp, #108]	; 0x6c
 8015ee4:	785b      	ldrb	r3, [r3, #1]
 8015ee6:	4608      	mov	r0, r1
 8015ee8:	e7c9      	b.n	8015e7e <_strtod_l+0x1d6>
 8015eea:	9805      	ldr	r0, [sp, #20]
 8015eec:	e7d3      	b.n	8015e96 <_strtod_l+0x1ee>
 8015eee:	2908      	cmp	r1, #8
 8015ef0:	f101 0101 	add.w	r1, r1, #1
 8015ef4:	dc03      	bgt.n	8015efe <_strtod_l+0x256>
 8015ef6:	9b07      	ldr	r3, [sp, #28]
 8015ef8:	437b      	muls	r3, r7
 8015efa:	9307      	str	r3, [sp, #28]
 8015efc:	e7e1      	b.n	8015ec2 <_strtod_l+0x21a>
 8015efe:	2910      	cmp	r1, #16
 8015f00:	bfd8      	it	le
 8015f02:	437d      	mulle	r5, r7
 8015f04:	e7dd      	b.n	8015ec2 <_strtod_l+0x21a>
 8015f06:	2c10      	cmp	r4, #16
 8015f08:	bfdc      	itt	le
 8015f0a:	210a      	movle	r1, #10
 8015f0c:	fb01 e505 	mlale	r5, r1, r5, lr
 8015f10:	e7e4      	b.n	8015edc <_strtod_l+0x234>
 8015f12:	2301      	movs	r3, #1
 8015f14:	9304      	str	r3, [sp, #16]
 8015f16:	e781      	b.n	8015e1c <_strtod_l+0x174>
 8015f18:	f04f 0c01 	mov.w	ip, #1
 8015f1c:	1cb3      	adds	r3, r6, #2
 8015f1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015f20:	78b3      	ldrb	r3, [r6, #2]
 8015f22:	e78a      	b.n	8015e3a <_strtod_l+0x192>
 8015f24:	f04f 0c00 	mov.w	ip, #0
 8015f28:	e7f8      	b.n	8015f1c <_strtod_l+0x274>
 8015f2a:	bf00      	nop
 8015f2c:	080192c0 	.word	0x080192c0
 8015f30:	7ff00000 	.word	0x7ff00000
 8015f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f36:	1c5f      	adds	r7, r3, #1
 8015f38:	971b      	str	r7, [sp, #108]	; 0x6c
 8015f3a:	785b      	ldrb	r3, [r3, #1]
 8015f3c:	2b30      	cmp	r3, #48	; 0x30
 8015f3e:	d0f9      	beq.n	8015f34 <_strtod_l+0x28c>
 8015f40:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015f44:	2f08      	cmp	r7, #8
 8015f46:	f63f af7d 	bhi.w	8015e44 <_strtod_l+0x19c>
 8015f4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015f4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f50:	930a      	str	r3, [sp, #40]	; 0x28
 8015f52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f54:	1c5f      	adds	r7, r3, #1
 8015f56:	971b      	str	r7, [sp, #108]	; 0x6c
 8015f58:	785b      	ldrb	r3, [r3, #1]
 8015f5a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015f5e:	f1b8 0f09 	cmp.w	r8, #9
 8015f62:	d937      	bls.n	8015fd4 <_strtod_l+0x32c>
 8015f64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015f66:	1a7f      	subs	r7, r7, r1
 8015f68:	2f08      	cmp	r7, #8
 8015f6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015f6e:	dc37      	bgt.n	8015fe0 <_strtod_l+0x338>
 8015f70:	45be      	cmp	lr, r7
 8015f72:	bfa8      	it	ge
 8015f74:	46be      	movge	lr, r7
 8015f76:	f1bc 0f00 	cmp.w	ip, #0
 8015f7a:	d001      	beq.n	8015f80 <_strtod_l+0x2d8>
 8015f7c:	f1ce 0e00 	rsb	lr, lr, #0
 8015f80:	2c00      	cmp	r4, #0
 8015f82:	d151      	bne.n	8016028 <_strtod_l+0x380>
 8015f84:	2800      	cmp	r0, #0
 8015f86:	f47f aece 	bne.w	8015d26 <_strtod_l+0x7e>
 8015f8a:	9a06      	ldr	r2, [sp, #24]
 8015f8c:	2a00      	cmp	r2, #0
 8015f8e:	f47f aeca 	bne.w	8015d26 <_strtod_l+0x7e>
 8015f92:	9a04      	ldr	r2, [sp, #16]
 8015f94:	2a00      	cmp	r2, #0
 8015f96:	f47f aee4 	bne.w	8015d62 <_strtod_l+0xba>
 8015f9a:	2b4e      	cmp	r3, #78	; 0x4e
 8015f9c:	d027      	beq.n	8015fee <_strtod_l+0x346>
 8015f9e:	dc21      	bgt.n	8015fe4 <_strtod_l+0x33c>
 8015fa0:	2b49      	cmp	r3, #73	; 0x49
 8015fa2:	f47f aede 	bne.w	8015d62 <_strtod_l+0xba>
 8015fa6:	49a0      	ldr	r1, [pc, #640]	; (8016228 <_strtod_l+0x580>)
 8015fa8:	a81b      	add	r0, sp, #108	; 0x6c
 8015faa:	f002 f801 	bl	8017fb0 <__match>
 8015fae:	2800      	cmp	r0, #0
 8015fb0:	f43f aed7 	beq.w	8015d62 <_strtod_l+0xba>
 8015fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fb6:	499d      	ldr	r1, [pc, #628]	; (801622c <_strtod_l+0x584>)
 8015fb8:	3b01      	subs	r3, #1
 8015fba:	a81b      	add	r0, sp, #108	; 0x6c
 8015fbc:	931b      	str	r3, [sp, #108]	; 0x6c
 8015fbe:	f001 fff7 	bl	8017fb0 <__match>
 8015fc2:	b910      	cbnz	r0, 8015fca <_strtod_l+0x322>
 8015fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fc6:	3301      	adds	r3, #1
 8015fc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8015fca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016240 <_strtod_l+0x598>
 8015fce:	f04f 0a00 	mov.w	sl, #0
 8015fd2:	e6a8      	b.n	8015d26 <_strtod_l+0x7e>
 8015fd4:	210a      	movs	r1, #10
 8015fd6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015fda:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015fde:	e7b8      	b.n	8015f52 <_strtod_l+0x2aa>
 8015fe0:	46be      	mov	lr, r7
 8015fe2:	e7c8      	b.n	8015f76 <_strtod_l+0x2ce>
 8015fe4:	2b69      	cmp	r3, #105	; 0x69
 8015fe6:	d0de      	beq.n	8015fa6 <_strtod_l+0x2fe>
 8015fe8:	2b6e      	cmp	r3, #110	; 0x6e
 8015fea:	f47f aeba 	bne.w	8015d62 <_strtod_l+0xba>
 8015fee:	4990      	ldr	r1, [pc, #576]	; (8016230 <_strtod_l+0x588>)
 8015ff0:	a81b      	add	r0, sp, #108	; 0x6c
 8015ff2:	f001 ffdd 	bl	8017fb0 <__match>
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	f43f aeb3 	beq.w	8015d62 <_strtod_l+0xba>
 8015ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ffe:	781b      	ldrb	r3, [r3, #0]
 8016000:	2b28      	cmp	r3, #40	; 0x28
 8016002:	d10e      	bne.n	8016022 <_strtod_l+0x37a>
 8016004:	aa1e      	add	r2, sp, #120	; 0x78
 8016006:	498b      	ldr	r1, [pc, #556]	; (8016234 <_strtod_l+0x58c>)
 8016008:	a81b      	add	r0, sp, #108	; 0x6c
 801600a:	f001 ffe5 	bl	8017fd8 <__hexnan>
 801600e:	2805      	cmp	r0, #5
 8016010:	d107      	bne.n	8016022 <_strtod_l+0x37a>
 8016012:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016014:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016018:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801601c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016020:	e681      	b.n	8015d26 <_strtod_l+0x7e>
 8016022:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016248 <_strtod_l+0x5a0>
 8016026:	e7d2      	b.n	8015fce <_strtod_l+0x326>
 8016028:	ebae 0302 	sub.w	r3, lr, r2
 801602c:	9306      	str	r3, [sp, #24]
 801602e:	9b05      	ldr	r3, [sp, #20]
 8016030:	9807      	ldr	r0, [sp, #28]
 8016032:	2b00      	cmp	r3, #0
 8016034:	bf08      	it	eq
 8016036:	4623      	moveq	r3, r4
 8016038:	2c10      	cmp	r4, #16
 801603a:	9305      	str	r3, [sp, #20]
 801603c:	46a0      	mov	r8, r4
 801603e:	bfa8      	it	ge
 8016040:	f04f 0810 	movge.w	r8, #16
 8016044:	f7f2 f996 	bl	8008374 <__aeabi_ui2d>
 8016048:	2c09      	cmp	r4, #9
 801604a:	4682      	mov	sl, r0
 801604c:	468b      	mov	fp, r1
 801604e:	dc13      	bgt.n	8016078 <_strtod_l+0x3d0>
 8016050:	9b06      	ldr	r3, [sp, #24]
 8016052:	2b00      	cmp	r3, #0
 8016054:	f43f ae67 	beq.w	8015d26 <_strtod_l+0x7e>
 8016058:	9b06      	ldr	r3, [sp, #24]
 801605a:	dd7a      	ble.n	8016152 <_strtod_l+0x4aa>
 801605c:	2b16      	cmp	r3, #22
 801605e:	dc61      	bgt.n	8016124 <_strtod_l+0x47c>
 8016060:	4a75      	ldr	r2, [pc, #468]	; (8016238 <_strtod_l+0x590>)
 8016062:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016066:	e9de 0100 	ldrd	r0, r1, [lr]
 801606a:	4652      	mov	r2, sl
 801606c:	465b      	mov	r3, fp
 801606e:	f7f2 f9fb 	bl	8008468 <__aeabi_dmul>
 8016072:	4682      	mov	sl, r0
 8016074:	468b      	mov	fp, r1
 8016076:	e656      	b.n	8015d26 <_strtod_l+0x7e>
 8016078:	4b6f      	ldr	r3, [pc, #444]	; (8016238 <_strtod_l+0x590>)
 801607a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801607e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016082:	f7f2 f9f1 	bl	8008468 <__aeabi_dmul>
 8016086:	4606      	mov	r6, r0
 8016088:	4628      	mov	r0, r5
 801608a:	460f      	mov	r7, r1
 801608c:	f7f2 f972 	bl	8008374 <__aeabi_ui2d>
 8016090:	4602      	mov	r2, r0
 8016092:	460b      	mov	r3, r1
 8016094:	4630      	mov	r0, r6
 8016096:	4639      	mov	r1, r7
 8016098:	f7f2 f830 	bl	80080fc <__adddf3>
 801609c:	2c0f      	cmp	r4, #15
 801609e:	4682      	mov	sl, r0
 80160a0:	468b      	mov	fp, r1
 80160a2:	ddd5      	ble.n	8016050 <_strtod_l+0x3a8>
 80160a4:	9b06      	ldr	r3, [sp, #24]
 80160a6:	eba4 0808 	sub.w	r8, r4, r8
 80160aa:	4498      	add	r8, r3
 80160ac:	f1b8 0f00 	cmp.w	r8, #0
 80160b0:	f340 8096 	ble.w	80161e0 <_strtod_l+0x538>
 80160b4:	f018 030f 	ands.w	r3, r8, #15
 80160b8:	d00a      	beq.n	80160d0 <_strtod_l+0x428>
 80160ba:	495f      	ldr	r1, [pc, #380]	; (8016238 <_strtod_l+0x590>)
 80160bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80160c0:	4652      	mov	r2, sl
 80160c2:	465b      	mov	r3, fp
 80160c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160c8:	f7f2 f9ce 	bl	8008468 <__aeabi_dmul>
 80160cc:	4682      	mov	sl, r0
 80160ce:	468b      	mov	fp, r1
 80160d0:	f038 080f 	bics.w	r8, r8, #15
 80160d4:	d073      	beq.n	80161be <_strtod_l+0x516>
 80160d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80160da:	dd47      	ble.n	801616c <_strtod_l+0x4c4>
 80160dc:	2400      	movs	r4, #0
 80160de:	46a0      	mov	r8, r4
 80160e0:	9407      	str	r4, [sp, #28]
 80160e2:	9405      	str	r4, [sp, #20]
 80160e4:	2322      	movs	r3, #34	; 0x22
 80160e6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016240 <_strtod_l+0x598>
 80160ea:	f8c9 3000 	str.w	r3, [r9]
 80160ee:	f04f 0a00 	mov.w	sl, #0
 80160f2:	9b07      	ldr	r3, [sp, #28]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	f43f ae16 	beq.w	8015d26 <_strtod_l+0x7e>
 80160fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80160fc:	4648      	mov	r0, r9
 80160fe:	f002 f8a8 	bl	8018252 <_Bfree>
 8016102:	9905      	ldr	r1, [sp, #20]
 8016104:	4648      	mov	r0, r9
 8016106:	f002 f8a4 	bl	8018252 <_Bfree>
 801610a:	4641      	mov	r1, r8
 801610c:	4648      	mov	r0, r9
 801610e:	f002 f8a0 	bl	8018252 <_Bfree>
 8016112:	9907      	ldr	r1, [sp, #28]
 8016114:	4648      	mov	r0, r9
 8016116:	f002 f89c 	bl	8018252 <_Bfree>
 801611a:	4621      	mov	r1, r4
 801611c:	4648      	mov	r0, r9
 801611e:	f002 f898 	bl	8018252 <_Bfree>
 8016122:	e600      	b.n	8015d26 <_strtod_l+0x7e>
 8016124:	9a06      	ldr	r2, [sp, #24]
 8016126:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801612a:	4293      	cmp	r3, r2
 801612c:	dbba      	blt.n	80160a4 <_strtod_l+0x3fc>
 801612e:	4d42      	ldr	r5, [pc, #264]	; (8016238 <_strtod_l+0x590>)
 8016130:	f1c4 040f 	rsb	r4, r4, #15
 8016134:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016138:	4652      	mov	r2, sl
 801613a:	465b      	mov	r3, fp
 801613c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016140:	f7f2 f992 	bl	8008468 <__aeabi_dmul>
 8016144:	9b06      	ldr	r3, [sp, #24]
 8016146:	1b1c      	subs	r4, r3, r4
 8016148:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801614c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016150:	e78d      	b.n	801606e <_strtod_l+0x3c6>
 8016152:	f113 0f16 	cmn.w	r3, #22
 8016156:	dba5      	blt.n	80160a4 <_strtod_l+0x3fc>
 8016158:	4a37      	ldr	r2, [pc, #220]	; (8016238 <_strtod_l+0x590>)
 801615a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801615e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016162:	4650      	mov	r0, sl
 8016164:	4659      	mov	r1, fp
 8016166:	f7f2 faa9 	bl	80086bc <__aeabi_ddiv>
 801616a:	e782      	b.n	8016072 <_strtod_l+0x3ca>
 801616c:	2300      	movs	r3, #0
 801616e:	4e33      	ldr	r6, [pc, #204]	; (801623c <_strtod_l+0x594>)
 8016170:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016174:	4650      	mov	r0, sl
 8016176:	4659      	mov	r1, fp
 8016178:	461d      	mov	r5, r3
 801617a:	f1b8 0f01 	cmp.w	r8, #1
 801617e:	dc21      	bgt.n	80161c4 <_strtod_l+0x51c>
 8016180:	b10b      	cbz	r3, 8016186 <_strtod_l+0x4de>
 8016182:	4682      	mov	sl, r0
 8016184:	468b      	mov	fp, r1
 8016186:	4b2d      	ldr	r3, [pc, #180]	; (801623c <_strtod_l+0x594>)
 8016188:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801618c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016190:	4652      	mov	r2, sl
 8016192:	465b      	mov	r3, fp
 8016194:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016198:	f7f2 f966 	bl	8008468 <__aeabi_dmul>
 801619c:	4b28      	ldr	r3, [pc, #160]	; (8016240 <_strtod_l+0x598>)
 801619e:	460a      	mov	r2, r1
 80161a0:	400b      	ands	r3, r1
 80161a2:	4928      	ldr	r1, [pc, #160]	; (8016244 <_strtod_l+0x59c>)
 80161a4:	428b      	cmp	r3, r1
 80161a6:	4682      	mov	sl, r0
 80161a8:	d898      	bhi.n	80160dc <_strtod_l+0x434>
 80161aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80161ae:	428b      	cmp	r3, r1
 80161b0:	bf86      	itte	hi
 80161b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801624c <_strtod_l+0x5a4>
 80161b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80161ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80161be:	2300      	movs	r3, #0
 80161c0:	9304      	str	r3, [sp, #16]
 80161c2:	e077      	b.n	80162b4 <_strtod_l+0x60c>
 80161c4:	f018 0f01 	tst.w	r8, #1
 80161c8:	d006      	beq.n	80161d8 <_strtod_l+0x530>
 80161ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80161ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d2:	f7f2 f949 	bl	8008468 <__aeabi_dmul>
 80161d6:	2301      	movs	r3, #1
 80161d8:	3501      	adds	r5, #1
 80161da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80161de:	e7cc      	b.n	801617a <_strtod_l+0x4d2>
 80161e0:	d0ed      	beq.n	80161be <_strtod_l+0x516>
 80161e2:	f1c8 0800 	rsb	r8, r8, #0
 80161e6:	f018 020f 	ands.w	r2, r8, #15
 80161ea:	d00a      	beq.n	8016202 <_strtod_l+0x55a>
 80161ec:	4b12      	ldr	r3, [pc, #72]	; (8016238 <_strtod_l+0x590>)
 80161ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80161f2:	4650      	mov	r0, sl
 80161f4:	4659      	mov	r1, fp
 80161f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161fa:	f7f2 fa5f 	bl	80086bc <__aeabi_ddiv>
 80161fe:	4682      	mov	sl, r0
 8016200:	468b      	mov	fp, r1
 8016202:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016206:	d0da      	beq.n	80161be <_strtod_l+0x516>
 8016208:	f1b8 0f1f 	cmp.w	r8, #31
 801620c:	dd20      	ble.n	8016250 <_strtod_l+0x5a8>
 801620e:	2400      	movs	r4, #0
 8016210:	46a0      	mov	r8, r4
 8016212:	9407      	str	r4, [sp, #28]
 8016214:	9405      	str	r4, [sp, #20]
 8016216:	2322      	movs	r3, #34	; 0x22
 8016218:	f04f 0a00 	mov.w	sl, #0
 801621c:	f04f 0b00 	mov.w	fp, #0
 8016220:	f8c9 3000 	str.w	r3, [r9]
 8016224:	e765      	b.n	80160f2 <_strtod_l+0x44a>
 8016226:	bf00      	nop
 8016228:	08019272 	.word	0x08019272
 801622c:	08019313 	.word	0x08019313
 8016230:	0801927a 	.word	0x0801927a
 8016234:	080192d4 	.word	0x080192d4
 8016238:	08019350 	.word	0x08019350
 801623c:	08019328 	.word	0x08019328
 8016240:	7ff00000 	.word	0x7ff00000
 8016244:	7ca00000 	.word	0x7ca00000
 8016248:	fff80000 	.word	0xfff80000
 801624c:	7fefffff 	.word	0x7fefffff
 8016250:	f018 0310 	ands.w	r3, r8, #16
 8016254:	bf18      	it	ne
 8016256:	236a      	movne	r3, #106	; 0x6a
 8016258:	4da0      	ldr	r5, [pc, #640]	; (80164dc <_strtod_l+0x834>)
 801625a:	9304      	str	r3, [sp, #16]
 801625c:	4650      	mov	r0, sl
 801625e:	4659      	mov	r1, fp
 8016260:	2300      	movs	r3, #0
 8016262:	f1b8 0f00 	cmp.w	r8, #0
 8016266:	f300 810a 	bgt.w	801647e <_strtod_l+0x7d6>
 801626a:	b10b      	cbz	r3, 8016270 <_strtod_l+0x5c8>
 801626c:	4682      	mov	sl, r0
 801626e:	468b      	mov	fp, r1
 8016270:	9b04      	ldr	r3, [sp, #16]
 8016272:	b1bb      	cbz	r3, 80162a4 <_strtod_l+0x5fc>
 8016274:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016278:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801627c:	2b00      	cmp	r3, #0
 801627e:	4659      	mov	r1, fp
 8016280:	dd10      	ble.n	80162a4 <_strtod_l+0x5fc>
 8016282:	2b1f      	cmp	r3, #31
 8016284:	f340 8107 	ble.w	8016496 <_strtod_l+0x7ee>
 8016288:	2b34      	cmp	r3, #52	; 0x34
 801628a:	bfde      	ittt	le
 801628c:	3b20      	suble	r3, #32
 801628e:	f04f 32ff 	movle.w	r2, #4294967295
 8016292:	fa02 f303 	lslle.w	r3, r2, r3
 8016296:	f04f 0a00 	mov.w	sl, #0
 801629a:	bfcc      	ite	gt
 801629c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80162a0:	ea03 0b01 	andle.w	fp, r3, r1
 80162a4:	2200      	movs	r2, #0
 80162a6:	2300      	movs	r3, #0
 80162a8:	4650      	mov	r0, sl
 80162aa:	4659      	mov	r1, fp
 80162ac:	f7f2 fb44 	bl	8008938 <__aeabi_dcmpeq>
 80162b0:	2800      	cmp	r0, #0
 80162b2:	d1ac      	bne.n	801620e <_strtod_l+0x566>
 80162b4:	9b07      	ldr	r3, [sp, #28]
 80162b6:	9300      	str	r3, [sp, #0]
 80162b8:	9a05      	ldr	r2, [sp, #20]
 80162ba:	9908      	ldr	r1, [sp, #32]
 80162bc:	4623      	mov	r3, r4
 80162be:	4648      	mov	r0, r9
 80162c0:	f002 f819 	bl	80182f6 <__s2b>
 80162c4:	9007      	str	r0, [sp, #28]
 80162c6:	2800      	cmp	r0, #0
 80162c8:	f43f af08 	beq.w	80160dc <_strtod_l+0x434>
 80162cc:	9a06      	ldr	r2, [sp, #24]
 80162ce:	9b06      	ldr	r3, [sp, #24]
 80162d0:	2a00      	cmp	r2, #0
 80162d2:	f1c3 0300 	rsb	r3, r3, #0
 80162d6:	bfa8      	it	ge
 80162d8:	2300      	movge	r3, #0
 80162da:	930e      	str	r3, [sp, #56]	; 0x38
 80162dc:	2400      	movs	r4, #0
 80162de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80162e2:	9316      	str	r3, [sp, #88]	; 0x58
 80162e4:	46a0      	mov	r8, r4
 80162e6:	9b07      	ldr	r3, [sp, #28]
 80162e8:	4648      	mov	r0, r9
 80162ea:	6859      	ldr	r1, [r3, #4]
 80162ec:	f001 ff7d 	bl	80181ea <_Balloc>
 80162f0:	9005      	str	r0, [sp, #20]
 80162f2:	2800      	cmp	r0, #0
 80162f4:	f43f aef6 	beq.w	80160e4 <_strtod_l+0x43c>
 80162f8:	9b07      	ldr	r3, [sp, #28]
 80162fa:	691a      	ldr	r2, [r3, #16]
 80162fc:	3202      	adds	r2, #2
 80162fe:	f103 010c 	add.w	r1, r3, #12
 8016302:	0092      	lsls	r2, r2, #2
 8016304:	300c      	adds	r0, #12
 8016306:	f7fd fda9 	bl	8013e5c <memcpy>
 801630a:	aa1e      	add	r2, sp, #120	; 0x78
 801630c:	a91d      	add	r1, sp, #116	; 0x74
 801630e:	ec4b ab10 	vmov	d0, sl, fp
 8016312:	4648      	mov	r0, r9
 8016314:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016318:	f002 faa8 	bl	801886c <__d2b>
 801631c:	901c      	str	r0, [sp, #112]	; 0x70
 801631e:	2800      	cmp	r0, #0
 8016320:	f43f aee0 	beq.w	80160e4 <_strtod_l+0x43c>
 8016324:	2101      	movs	r1, #1
 8016326:	4648      	mov	r0, r9
 8016328:	f002 f871 	bl	801840e <__i2b>
 801632c:	4680      	mov	r8, r0
 801632e:	2800      	cmp	r0, #0
 8016330:	f43f aed8 	beq.w	80160e4 <_strtod_l+0x43c>
 8016334:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016336:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016338:	2e00      	cmp	r6, #0
 801633a:	bfab      	itete	ge
 801633c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801633e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016340:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016342:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016344:	bfac      	ite	ge
 8016346:	18f7      	addge	r7, r6, r3
 8016348:	1b9d      	sublt	r5, r3, r6
 801634a:	9b04      	ldr	r3, [sp, #16]
 801634c:	1af6      	subs	r6, r6, r3
 801634e:	4416      	add	r6, r2
 8016350:	4b63      	ldr	r3, [pc, #396]	; (80164e0 <_strtod_l+0x838>)
 8016352:	3e01      	subs	r6, #1
 8016354:	429e      	cmp	r6, r3
 8016356:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801635a:	f280 80af 	bge.w	80164bc <_strtod_l+0x814>
 801635e:	1b9b      	subs	r3, r3, r6
 8016360:	2b1f      	cmp	r3, #31
 8016362:	eba2 0203 	sub.w	r2, r2, r3
 8016366:	f04f 0101 	mov.w	r1, #1
 801636a:	f300 809b 	bgt.w	80164a4 <_strtod_l+0x7fc>
 801636e:	fa01 f303 	lsl.w	r3, r1, r3
 8016372:	930f      	str	r3, [sp, #60]	; 0x3c
 8016374:	2300      	movs	r3, #0
 8016376:	930a      	str	r3, [sp, #40]	; 0x28
 8016378:	18be      	adds	r6, r7, r2
 801637a:	9b04      	ldr	r3, [sp, #16]
 801637c:	42b7      	cmp	r7, r6
 801637e:	4415      	add	r5, r2
 8016380:	441d      	add	r5, r3
 8016382:	463b      	mov	r3, r7
 8016384:	bfa8      	it	ge
 8016386:	4633      	movge	r3, r6
 8016388:	42ab      	cmp	r3, r5
 801638a:	bfa8      	it	ge
 801638c:	462b      	movge	r3, r5
 801638e:	2b00      	cmp	r3, #0
 8016390:	bfc2      	ittt	gt
 8016392:	1af6      	subgt	r6, r6, r3
 8016394:	1aed      	subgt	r5, r5, r3
 8016396:	1aff      	subgt	r7, r7, r3
 8016398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801639a:	b1bb      	cbz	r3, 80163cc <_strtod_l+0x724>
 801639c:	4641      	mov	r1, r8
 801639e:	461a      	mov	r2, r3
 80163a0:	4648      	mov	r0, r9
 80163a2:	f002 f8d3 	bl	801854c <__pow5mult>
 80163a6:	4680      	mov	r8, r0
 80163a8:	2800      	cmp	r0, #0
 80163aa:	f43f ae9b 	beq.w	80160e4 <_strtod_l+0x43c>
 80163ae:	4601      	mov	r1, r0
 80163b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80163b2:	4648      	mov	r0, r9
 80163b4:	f002 f834 	bl	8018420 <__multiply>
 80163b8:	900c      	str	r0, [sp, #48]	; 0x30
 80163ba:	2800      	cmp	r0, #0
 80163bc:	f43f ae92 	beq.w	80160e4 <_strtod_l+0x43c>
 80163c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80163c2:	4648      	mov	r0, r9
 80163c4:	f001 ff45 	bl	8018252 <_Bfree>
 80163c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163ca:	931c      	str	r3, [sp, #112]	; 0x70
 80163cc:	2e00      	cmp	r6, #0
 80163ce:	dc7a      	bgt.n	80164c6 <_strtod_l+0x81e>
 80163d0:	9b06      	ldr	r3, [sp, #24]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	dd08      	ble.n	80163e8 <_strtod_l+0x740>
 80163d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80163d8:	9905      	ldr	r1, [sp, #20]
 80163da:	4648      	mov	r0, r9
 80163dc:	f002 f8b6 	bl	801854c <__pow5mult>
 80163e0:	9005      	str	r0, [sp, #20]
 80163e2:	2800      	cmp	r0, #0
 80163e4:	f43f ae7e 	beq.w	80160e4 <_strtod_l+0x43c>
 80163e8:	2d00      	cmp	r5, #0
 80163ea:	dd08      	ble.n	80163fe <_strtod_l+0x756>
 80163ec:	462a      	mov	r2, r5
 80163ee:	9905      	ldr	r1, [sp, #20]
 80163f0:	4648      	mov	r0, r9
 80163f2:	f002 f8f9 	bl	80185e8 <__lshift>
 80163f6:	9005      	str	r0, [sp, #20]
 80163f8:	2800      	cmp	r0, #0
 80163fa:	f43f ae73 	beq.w	80160e4 <_strtod_l+0x43c>
 80163fe:	2f00      	cmp	r7, #0
 8016400:	dd08      	ble.n	8016414 <_strtod_l+0x76c>
 8016402:	4641      	mov	r1, r8
 8016404:	463a      	mov	r2, r7
 8016406:	4648      	mov	r0, r9
 8016408:	f002 f8ee 	bl	80185e8 <__lshift>
 801640c:	4680      	mov	r8, r0
 801640e:	2800      	cmp	r0, #0
 8016410:	f43f ae68 	beq.w	80160e4 <_strtod_l+0x43c>
 8016414:	9a05      	ldr	r2, [sp, #20]
 8016416:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016418:	4648      	mov	r0, r9
 801641a:	f002 f953 	bl	80186c4 <__mdiff>
 801641e:	4604      	mov	r4, r0
 8016420:	2800      	cmp	r0, #0
 8016422:	f43f ae5f 	beq.w	80160e4 <_strtod_l+0x43c>
 8016426:	68c3      	ldr	r3, [r0, #12]
 8016428:	930c      	str	r3, [sp, #48]	; 0x30
 801642a:	2300      	movs	r3, #0
 801642c:	60c3      	str	r3, [r0, #12]
 801642e:	4641      	mov	r1, r8
 8016430:	f002 f92e 	bl	8018690 <__mcmp>
 8016434:	2800      	cmp	r0, #0
 8016436:	da55      	bge.n	80164e4 <_strtod_l+0x83c>
 8016438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801643a:	b9e3      	cbnz	r3, 8016476 <_strtod_l+0x7ce>
 801643c:	f1ba 0f00 	cmp.w	sl, #0
 8016440:	d119      	bne.n	8016476 <_strtod_l+0x7ce>
 8016442:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016446:	b9b3      	cbnz	r3, 8016476 <_strtod_l+0x7ce>
 8016448:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801644c:	0d1b      	lsrs	r3, r3, #20
 801644e:	051b      	lsls	r3, r3, #20
 8016450:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016454:	d90f      	bls.n	8016476 <_strtod_l+0x7ce>
 8016456:	6963      	ldr	r3, [r4, #20]
 8016458:	b913      	cbnz	r3, 8016460 <_strtod_l+0x7b8>
 801645a:	6923      	ldr	r3, [r4, #16]
 801645c:	2b01      	cmp	r3, #1
 801645e:	dd0a      	ble.n	8016476 <_strtod_l+0x7ce>
 8016460:	4621      	mov	r1, r4
 8016462:	2201      	movs	r2, #1
 8016464:	4648      	mov	r0, r9
 8016466:	f002 f8bf 	bl	80185e8 <__lshift>
 801646a:	4641      	mov	r1, r8
 801646c:	4604      	mov	r4, r0
 801646e:	f002 f90f 	bl	8018690 <__mcmp>
 8016472:	2800      	cmp	r0, #0
 8016474:	dc67      	bgt.n	8016546 <_strtod_l+0x89e>
 8016476:	9b04      	ldr	r3, [sp, #16]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d171      	bne.n	8016560 <_strtod_l+0x8b8>
 801647c:	e63d      	b.n	80160fa <_strtod_l+0x452>
 801647e:	f018 0f01 	tst.w	r8, #1
 8016482:	d004      	beq.n	801648e <_strtod_l+0x7e6>
 8016484:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016488:	f7f1 ffee 	bl	8008468 <__aeabi_dmul>
 801648c:	2301      	movs	r3, #1
 801648e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016492:	3508      	adds	r5, #8
 8016494:	e6e5      	b.n	8016262 <_strtod_l+0x5ba>
 8016496:	f04f 32ff 	mov.w	r2, #4294967295
 801649a:	fa02 f303 	lsl.w	r3, r2, r3
 801649e:	ea03 0a0a 	and.w	sl, r3, sl
 80164a2:	e6ff      	b.n	80162a4 <_strtod_l+0x5fc>
 80164a4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80164a8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80164ac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80164b0:	36e2      	adds	r6, #226	; 0xe2
 80164b2:	fa01 f306 	lsl.w	r3, r1, r6
 80164b6:	930a      	str	r3, [sp, #40]	; 0x28
 80164b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80164ba:	e75d      	b.n	8016378 <_strtod_l+0x6d0>
 80164bc:	2300      	movs	r3, #0
 80164be:	930a      	str	r3, [sp, #40]	; 0x28
 80164c0:	2301      	movs	r3, #1
 80164c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80164c4:	e758      	b.n	8016378 <_strtod_l+0x6d0>
 80164c6:	4632      	mov	r2, r6
 80164c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80164ca:	4648      	mov	r0, r9
 80164cc:	f002 f88c 	bl	80185e8 <__lshift>
 80164d0:	901c      	str	r0, [sp, #112]	; 0x70
 80164d2:	2800      	cmp	r0, #0
 80164d4:	f47f af7c 	bne.w	80163d0 <_strtod_l+0x728>
 80164d8:	e604      	b.n	80160e4 <_strtod_l+0x43c>
 80164da:	bf00      	nop
 80164dc:	080192e8 	.word	0x080192e8
 80164e0:	fffffc02 	.word	0xfffffc02
 80164e4:	465d      	mov	r5, fp
 80164e6:	f040 8086 	bne.w	80165f6 <_strtod_l+0x94e>
 80164ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80164ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80164f0:	b32a      	cbz	r2, 801653e <_strtod_l+0x896>
 80164f2:	4aaf      	ldr	r2, [pc, #700]	; (80167b0 <_strtod_l+0xb08>)
 80164f4:	4293      	cmp	r3, r2
 80164f6:	d153      	bne.n	80165a0 <_strtod_l+0x8f8>
 80164f8:	9b04      	ldr	r3, [sp, #16]
 80164fa:	4650      	mov	r0, sl
 80164fc:	b1d3      	cbz	r3, 8016534 <_strtod_l+0x88c>
 80164fe:	4aad      	ldr	r2, [pc, #692]	; (80167b4 <_strtod_l+0xb0c>)
 8016500:	402a      	ands	r2, r5
 8016502:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016506:	f04f 31ff 	mov.w	r1, #4294967295
 801650a:	d816      	bhi.n	801653a <_strtod_l+0x892>
 801650c:	0d12      	lsrs	r2, r2, #20
 801650e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016512:	fa01 f303 	lsl.w	r3, r1, r3
 8016516:	4298      	cmp	r0, r3
 8016518:	d142      	bne.n	80165a0 <_strtod_l+0x8f8>
 801651a:	4ba7      	ldr	r3, [pc, #668]	; (80167b8 <_strtod_l+0xb10>)
 801651c:	429d      	cmp	r5, r3
 801651e:	d102      	bne.n	8016526 <_strtod_l+0x87e>
 8016520:	3001      	adds	r0, #1
 8016522:	f43f addf 	beq.w	80160e4 <_strtod_l+0x43c>
 8016526:	4ba3      	ldr	r3, [pc, #652]	; (80167b4 <_strtod_l+0xb0c>)
 8016528:	402b      	ands	r3, r5
 801652a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801652e:	f04f 0a00 	mov.w	sl, #0
 8016532:	e7a0      	b.n	8016476 <_strtod_l+0x7ce>
 8016534:	f04f 33ff 	mov.w	r3, #4294967295
 8016538:	e7ed      	b.n	8016516 <_strtod_l+0x86e>
 801653a:	460b      	mov	r3, r1
 801653c:	e7eb      	b.n	8016516 <_strtod_l+0x86e>
 801653e:	bb7b      	cbnz	r3, 80165a0 <_strtod_l+0x8f8>
 8016540:	f1ba 0f00 	cmp.w	sl, #0
 8016544:	d12c      	bne.n	80165a0 <_strtod_l+0x8f8>
 8016546:	9904      	ldr	r1, [sp, #16]
 8016548:	4a9a      	ldr	r2, [pc, #616]	; (80167b4 <_strtod_l+0xb0c>)
 801654a:	465b      	mov	r3, fp
 801654c:	b1f1      	cbz	r1, 801658c <_strtod_l+0x8e4>
 801654e:	ea02 010b 	and.w	r1, r2, fp
 8016552:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016556:	dc19      	bgt.n	801658c <_strtod_l+0x8e4>
 8016558:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801655c:	f77f ae5b 	ble.w	8016216 <_strtod_l+0x56e>
 8016560:	4a96      	ldr	r2, [pc, #600]	; (80167bc <_strtod_l+0xb14>)
 8016562:	2300      	movs	r3, #0
 8016564:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016568:	4650      	mov	r0, sl
 801656a:	4659      	mov	r1, fp
 801656c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016570:	f7f1 ff7a 	bl	8008468 <__aeabi_dmul>
 8016574:	4682      	mov	sl, r0
 8016576:	468b      	mov	fp, r1
 8016578:	2900      	cmp	r1, #0
 801657a:	f47f adbe 	bne.w	80160fa <_strtod_l+0x452>
 801657e:	2800      	cmp	r0, #0
 8016580:	f47f adbb 	bne.w	80160fa <_strtod_l+0x452>
 8016584:	2322      	movs	r3, #34	; 0x22
 8016586:	f8c9 3000 	str.w	r3, [r9]
 801658a:	e5b6      	b.n	80160fa <_strtod_l+0x452>
 801658c:	4013      	ands	r3, r2
 801658e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016592:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016596:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801659a:	f04f 3aff 	mov.w	sl, #4294967295
 801659e:	e76a      	b.n	8016476 <_strtod_l+0x7ce>
 80165a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165a2:	b193      	cbz	r3, 80165ca <_strtod_l+0x922>
 80165a4:	422b      	tst	r3, r5
 80165a6:	f43f af66 	beq.w	8016476 <_strtod_l+0x7ce>
 80165aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165ac:	9a04      	ldr	r2, [sp, #16]
 80165ae:	4650      	mov	r0, sl
 80165b0:	4659      	mov	r1, fp
 80165b2:	b173      	cbz	r3, 80165d2 <_strtod_l+0x92a>
 80165b4:	f7ff fb59 	bl	8015c6a <sulp>
 80165b8:	4602      	mov	r2, r0
 80165ba:	460b      	mov	r3, r1
 80165bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80165c0:	f7f1 fd9c 	bl	80080fc <__adddf3>
 80165c4:	4682      	mov	sl, r0
 80165c6:	468b      	mov	fp, r1
 80165c8:	e755      	b.n	8016476 <_strtod_l+0x7ce>
 80165ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165cc:	ea13 0f0a 	tst.w	r3, sl
 80165d0:	e7e9      	b.n	80165a6 <_strtod_l+0x8fe>
 80165d2:	f7ff fb4a 	bl	8015c6a <sulp>
 80165d6:	4602      	mov	r2, r0
 80165d8:	460b      	mov	r3, r1
 80165da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80165de:	f7f1 fd8b 	bl	80080f8 <__aeabi_dsub>
 80165e2:	2200      	movs	r2, #0
 80165e4:	2300      	movs	r3, #0
 80165e6:	4682      	mov	sl, r0
 80165e8:	468b      	mov	fp, r1
 80165ea:	f7f2 f9a5 	bl	8008938 <__aeabi_dcmpeq>
 80165ee:	2800      	cmp	r0, #0
 80165f0:	f47f ae11 	bne.w	8016216 <_strtod_l+0x56e>
 80165f4:	e73f      	b.n	8016476 <_strtod_l+0x7ce>
 80165f6:	4641      	mov	r1, r8
 80165f8:	4620      	mov	r0, r4
 80165fa:	f002 f986 	bl	801890a <__ratio>
 80165fe:	ec57 6b10 	vmov	r6, r7, d0
 8016602:	2200      	movs	r2, #0
 8016604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016608:	ee10 0a10 	vmov	r0, s0
 801660c:	4639      	mov	r1, r7
 801660e:	f7f2 f9a7 	bl	8008960 <__aeabi_dcmple>
 8016612:	2800      	cmp	r0, #0
 8016614:	d077      	beq.n	8016706 <_strtod_l+0xa5e>
 8016616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016618:	2b00      	cmp	r3, #0
 801661a:	d04a      	beq.n	80166b2 <_strtod_l+0xa0a>
 801661c:	4b68      	ldr	r3, [pc, #416]	; (80167c0 <_strtod_l+0xb18>)
 801661e:	2200      	movs	r2, #0
 8016620:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016624:	4f66      	ldr	r7, [pc, #408]	; (80167c0 <_strtod_l+0xb18>)
 8016626:	2600      	movs	r6, #0
 8016628:	4b62      	ldr	r3, [pc, #392]	; (80167b4 <_strtod_l+0xb0c>)
 801662a:	402b      	ands	r3, r5
 801662c:	930f      	str	r3, [sp, #60]	; 0x3c
 801662e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016630:	4b64      	ldr	r3, [pc, #400]	; (80167c4 <_strtod_l+0xb1c>)
 8016632:	429a      	cmp	r2, r3
 8016634:	f040 80ce 	bne.w	80167d4 <_strtod_l+0xb2c>
 8016638:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801663c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016640:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016644:	ec4b ab10 	vmov	d0, sl, fp
 8016648:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801664c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016650:	f002 f896 	bl	8018780 <__ulp>
 8016654:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016658:	ec53 2b10 	vmov	r2, r3, d0
 801665c:	f7f1 ff04 	bl	8008468 <__aeabi_dmul>
 8016660:	4652      	mov	r2, sl
 8016662:	465b      	mov	r3, fp
 8016664:	f7f1 fd4a 	bl	80080fc <__adddf3>
 8016668:	460b      	mov	r3, r1
 801666a:	4952      	ldr	r1, [pc, #328]	; (80167b4 <_strtod_l+0xb0c>)
 801666c:	4a56      	ldr	r2, [pc, #344]	; (80167c8 <_strtod_l+0xb20>)
 801666e:	4019      	ands	r1, r3
 8016670:	4291      	cmp	r1, r2
 8016672:	4682      	mov	sl, r0
 8016674:	d95b      	bls.n	801672e <_strtod_l+0xa86>
 8016676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016678:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801667c:	4293      	cmp	r3, r2
 801667e:	d103      	bne.n	8016688 <_strtod_l+0x9e0>
 8016680:	9b08      	ldr	r3, [sp, #32]
 8016682:	3301      	adds	r3, #1
 8016684:	f43f ad2e 	beq.w	80160e4 <_strtod_l+0x43c>
 8016688:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80167b8 <_strtod_l+0xb10>
 801668c:	f04f 3aff 	mov.w	sl, #4294967295
 8016690:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016692:	4648      	mov	r0, r9
 8016694:	f001 fddd 	bl	8018252 <_Bfree>
 8016698:	9905      	ldr	r1, [sp, #20]
 801669a:	4648      	mov	r0, r9
 801669c:	f001 fdd9 	bl	8018252 <_Bfree>
 80166a0:	4641      	mov	r1, r8
 80166a2:	4648      	mov	r0, r9
 80166a4:	f001 fdd5 	bl	8018252 <_Bfree>
 80166a8:	4621      	mov	r1, r4
 80166aa:	4648      	mov	r0, r9
 80166ac:	f001 fdd1 	bl	8018252 <_Bfree>
 80166b0:	e619      	b.n	80162e6 <_strtod_l+0x63e>
 80166b2:	f1ba 0f00 	cmp.w	sl, #0
 80166b6:	d11a      	bne.n	80166ee <_strtod_l+0xa46>
 80166b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80166bc:	b9eb      	cbnz	r3, 80166fa <_strtod_l+0xa52>
 80166be:	2200      	movs	r2, #0
 80166c0:	4b3f      	ldr	r3, [pc, #252]	; (80167c0 <_strtod_l+0xb18>)
 80166c2:	4630      	mov	r0, r6
 80166c4:	4639      	mov	r1, r7
 80166c6:	f7f2 f941 	bl	800894c <__aeabi_dcmplt>
 80166ca:	b9c8      	cbnz	r0, 8016700 <_strtod_l+0xa58>
 80166cc:	4630      	mov	r0, r6
 80166ce:	4639      	mov	r1, r7
 80166d0:	2200      	movs	r2, #0
 80166d2:	4b3e      	ldr	r3, [pc, #248]	; (80167cc <_strtod_l+0xb24>)
 80166d4:	f7f1 fec8 	bl	8008468 <__aeabi_dmul>
 80166d8:	4606      	mov	r6, r0
 80166da:	460f      	mov	r7, r1
 80166dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80166e0:	9618      	str	r6, [sp, #96]	; 0x60
 80166e2:	9319      	str	r3, [sp, #100]	; 0x64
 80166e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80166e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80166ec:	e79c      	b.n	8016628 <_strtod_l+0x980>
 80166ee:	f1ba 0f01 	cmp.w	sl, #1
 80166f2:	d102      	bne.n	80166fa <_strtod_l+0xa52>
 80166f4:	2d00      	cmp	r5, #0
 80166f6:	f43f ad8e 	beq.w	8016216 <_strtod_l+0x56e>
 80166fa:	2200      	movs	r2, #0
 80166fc:	4b34      	ldr	r3, [pc, #208]	; (80167d0 <_strtod_l+0xb28>)
 80166fe:	e78f      	b.n	8016620 <_strtod_l+0x978>
 8016700:	2600      	movs	r6, #0
 8016702:	4f32      	ldr	r7, [pc, #200]	; (80167cc <_strtod_l+0xb24>)
 8016704:	e7ea      	b.n	80166dc <_strtod_l+0xa34>
 8016706:	4b31      	ldr	r3, [pc, #196]	; (80167cc <_strtod_l+0xb24>)
 8016708:	4630      	mov	r0, r6
 801670a:	4639      	mov	r1, r7
 801670c:	2200      	movs	r2, #0
 801670e:	f7f1 feab 	bl	8008468 <__aeabi_dmul>
 8016712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016714:	4606      	mov	r6, r0
 8016716:	460f      	mov	r7, r1
 8016718:	b933      	cbnz	r3, 8016728 <_strtod_l+0xa80>
 801671a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801671e:	9010      	str	r0, [sp, #64]	; 0x40
 8016720:	9311      	str	r3, [sp, #68]	; 0x44
 8016722:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016726:	e7df      	b.n	80166e8 <_strtod_l+0xa40>
 8016728:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801672c:	e7f9      	b.n	8016722 <_strtod_l+0xa7a>
 801672e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016732:	9b04      	ldr	r3, [sp, #16]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d1ab      	bne.n	8016690 <_strtod_l+0x9e8>
 8016738:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801673c:	0d1b      	lsrs	r3, r3, #20
 801673e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016740:	051b      	lsls	r3, r3, #20
 8016742:	429a      	cmp	r2, r3
 8016744:	465d      	mov	r5, fp
 8016746:	d1a3      	bne.n	8016690 <_strtod_l+0x9e8>
 8016748:	4639      	mov	r1, r7
 801674a:	4630      	mov	r0, r6
 801674c:	f7f2 f93c 	bl	80089c8 <__aeabi_d2iz>
 8016750:	f7f1 fe20 	bl	8008394 <__aeabi_i2d>
 8016754:	460b      	mov	r3, r1
 8016756:	4602      	mov	r2, r0
 8016758:	4639      	mov	r1, r7
 801675a:	4630      	mov	r0, r6
 801675c:	f7f1 fccc 	bl	80080f8 <__aeabi_dsub>
 8016760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016762:	4606      	mov	r6, r0
 8016764:	460f      	mov	r7, r1
 8016766:	b933      	cbnz	r3, 8016776 <_strtod_l+0xace>
 8016768:	f1ba 0f00 	cmp.w	sl, #0
 801676c:	d103      	bne.n	8016776 <_strtod_l+0xace>
 801676e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016772:	2d00      	cmp	r5, #0
 8016774:	d06d      	beq.n	8016852 <_strtod_l+0xbaa>
 8016776:	a30a      	add	r3, pc, #40	; (adr r3, 80167a0 <_strtod_l+0xaf8>)
 8016778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801677c:	4630      	mov	r0, r6
 801677e:	4639      	mov	r1, r7
 8016780:	f7f2 f8e4 	bl	800894c <__aeabi_dcmplt>
 8016784:	2800      	cmp	r0, #0
 8016786:	f47f acb8 	bne.w	80160fa <_strtod_l+0x452>
 801678a:	a307      	add	r3, pc, #28	; (adr r3, 80167a8 <_strtod_l+0xb00>)
 801678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016790:	4630      	mov	r0, r6
 8016792:	4639      	mov	r1, r7
 8016794:	f7f2 f8f8 	bl	8008988 <__aeabi_dcmpgt>
 8016798:	2800      	cmp	r0, #0
 801679a:	f43f af79 	beq.w	8016690 <_strtod_l+0x9e8>
 801679e:	e4ac      	b.n	80160fa <_strtod_l+0x452>
 80167a0:	94a03595 	.word	0x94a03595
 80167a4:	3fdfffff 	.word	0x3fdfffff
 80167a8:	35afe535 	.word	0x35afe535
 80167ac:	3fe00000 	.word	0x3fe00000
 80167b0:	000fffff 	.word	0x000fffff
 80167b4:	7ff00000 	.word	0x7ff00000
 80167b8:	7fefffff 	.word	0x7fefffff
 80167bc:	39500000 	.word	0x39500000
 80167c0:	3ff00000 	.word	0x3ff00000
 80167c4:	7fe00000 	.word	0x7fe00000
 80167c8:	7c9fffff 	.word	0x7c9fffff
 80167cc:	3fe00000 	.word	0x3fe00000
 80167d0:	bff00000 	.word	0xbff00000
 80167d4:	9b04      	ldr	r3, [sp, #16]
 80167d6:	b333      	cbz	r3, 8016826 <_strtod_l+0xb7e>
 80167d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80167de:	d822      	bhi.n	8016826 <_strtod_l+0xb7e>
 80167e0:	a327      	add	r3, pc, #156	; (adr r3, 8016880 <_strtod_l+0xbd8>)
 80167e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167e6:	4630      	mov	r0, r6
 80167e8:	4639      	mov	r1, r7
 80167ea:	f7f2 f8b9 	bl	8008960 <__aeabi_dcmple>
 80167ee:	b1a0      	cbz	r0, 801681a <_strtod_l+0xb72>
 80167f0:	4639      	mov	r1, r7
 80167f2:	4630      	mov	r0, r6
 80167f4:	f7f2 f910 	bl	8008a18 <__aeabi_d2uiz>
 80167f8:	2800      	cmp	r0, #0
 80167fa:	bf08      	it	eq
 80167fc:	2001      	moveq	r0, #1
 80167fe:	f7f1 fdb9 	bl	8008374 <__aeabi_ui2d>
 8016802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016804:	4606      	mov	r6, r0
 8016806:	460f      	mov	r7, r1
 8016808:	bb03      	cbnz	r3, 801684c <_strtod_l+0xba4>
 801680a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801680e:	9012      	str	r0, [sp, #72]	; 0x48
 8016810:	9313      	str	r3, [sp, #76]	; 0x4c
 8016812:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016816:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801681a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801681c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801681e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016822:	1a9b      	subs	r3, r3, r2
 8016824:	930b      	str	r3, [sp, #44]	; 0x2c
 8016826:	ed9d 0b08 	vldr	d0, [sp, #32]
 801682a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801682e:	f001 ffa7 	bl	8018780 <__ulp>
 8016832:	4650      	mov	r0, sl
 8016834:	ec53 2b10 	vmov	r2, r3, d0
 8016838:	4659      	mov	r1, fp
 801683a:	f7f1 fe15 	bl	8008468 <__aeabi_dmul>
 801683e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016842:	f7f1 fc5b 	bl	80080fc <__adddf3>
 8016846:	4682      	mov	sl, r0
 8016848:	468b      	mov	fp, r1
 801684a:	e772      	b.n	8016732 <_strtod_l+0xa8a>
 801684c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016850:	e7df      	b.n	8016812 <_strtod_l+0xb6a>
 8016852:	a30d      	add	r3, pc, #52	; (adr r3, 8016888 <_strtod_l+0xbe0>)
 8016854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016858:	f7f2 f878 	bl	800894c <__aeabi_dcmplt>
 801685c:	e79c      	b.n	8016798 <_strtod_l+0xaf0>
 801685e:	2300      	movs	r3, #0
 8016860:	930d      	str	r3, [sp, #52]	; 0x34
 8016862:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016866:	6013      	str	r3, [r2, #0]
 8016868:	f7ff ba61 	b.w	8015d2e <_strtod_l+0x86>
 801686c:	2b65      	cmp	r3, #101	; 0x65
 801686e:	f04f 0200 	mov.w	r2, #0
 8016872:	f43f ab4e 	beq.w	8015f12 <_strtod_l+0x26a>
 8016876:	2101      	movs	r1, #1
 8016878:	4614      	mov	r4, r2
 801687a:	9104      	str	r1, [sp, #16]
 801687c:	f7ff bacb 	b.w	8015e16 <_strtod_l+0x16e>
 8016880:	ffc00000 	.word	0xffc00000
 8016884:	41dfffff 	.word	0x41dfffff
 8016888:	94a03595 	.word	0x94a03595
 801688c:	3fcfffff 	.word	0x3fcfffff

08016890 <_strtod_r>:
 8016890:	4b05      	ldr	r3, [pc, #20]	; (80168a8 <_strtod_r+0x18>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	b410      	push	{r4}
 8016896:	6a1b      	ldr	r3, [r3, #32]
 8016898:	4c04      	ldr	r4, [pc, #16]	; (80168ac <_strtod_r+0x1c>)
 801689a:	2b00      	cmp	r3, #0
 801689c:	bf08      	it	eq
 801689e:	4623      	moveq	r3, r4
 80168a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168a4:	f7ff ba00 	b.w	8015ca8 <_strtod_l>
 80168a8:	2000003c 	.word	0x2000003c
 80168ac:	200000a0 	.word	0x200000a0

080168b0 <_strtol_l.isra.0>:
 80168b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168b4:	4680      	mov	r8, r0
 80168b6:	4689      	mov	r9, r1
 80168b8:	4692      	mov	sl, r2
 80168ba:	461e      	mov	r6, r3
 80168bc:	460f      	mov	r7, r1
 80168be:	463d      	mov	r5, r7
 80168c0:	9808      	ldr	r0, [sp, #32]
 80168c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80168c6:	f001 fc27 	bl	8018118 <__locale_ctype_ptr_l>
 80168ca:	4420      	add	r0, r4
 80168cc:	7843      	ldrb	r3, [r0, #1]
 80168ce:	f013 0308 	ands.w	r3, r3, #8
 80168d2:	d132      	bne.n	801693a <_strtol_l.isra.0+0x8a>
 80168d4:	2c2d      	cmp	r4, #45	; 0x2d
 80168d6:	d132      	bne.n	801693e <_strtol_l.isra.0+0x8e>
 80168d8:	787c      	ldrb	r4, [r7, #1]
 80168da:	1cbd      	adds	r5, r7, #2
 80168dc:	2201      	movs	r2, #1
 80168de:	2e00      	cmp	r6, #0
 80168e0:	d05d      	beq.n	801699e <_strtol_l.isra.0+0xee>
 80168e2:	2e10      	cmp	r6, #16
 80168e4:	d109      	bne.n	80168fa <_strtol_l.isra.0+0x4a>
 80168e6:	2c30      	cmp	r4, #48	; 0x30
 80168e8:	d107      	bne.n	80168fa <_strtol_l.isra.0+0x4a>
 80168ea:	782b      	ldrb	r3, [r5, #0]
 80168ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80168f0:	2b58      	cmp	r3, #88	; 0x58
 80168f2:	d14f      	bne.n	8016994 <_strtol_l.isra.0+0xe4>
 80168f4:	786c      	ldrb	r4, [r5, #1]
 80168f6:	2610      	movs	r6, #16
 80168f8:	3502      	adds	r5, #2
 80168fa:	2a00      	cmp	r2, #0
 80168fc:	bf14      	ite	ne
 80168fe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016902:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016906:	2700      	movs	r7, #0
 8016908:	fbb1 fcf6 	udiv	ip, r1, r6
 801690c:	4638      	mov	r0, r7
 801690e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016912:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016916:	2b09      	cmp	r3, #9
 8016918:	d817      	bhi.n	801694a <_strtol_l.isra.0+0x9a>
 801691a:	461c      	mov	r4, r3
 801691c:	42a6      	cmp	r6, r4
 801691e:	dd23      	ble.n	8016968 <_strtol_l.isra.0+0xb8>
 8016920:	1c7b      	adds	r3, r7, #1
 8016922:	d007      	beq.n	8016934 <_strtol_l.isra.0+0x84>
 8016924:	4584      	cmp	ip, r0
 8016926:	d31c      	bcc.n	8016962 <_strtol_l.isra.0+0xb2>
 8016928:	d101      	bne.n	801692e <_strtol_l.isra.0+0x7e>
 801692a:	45a6      	cmp	lr, r4
 801692c:	db19      	blt.n	8016962 <_strtol_l.isra.0+0xb2>
 801692e:	fb00 4006 	mla	r0, r0, r6, r4
 8016932:	2701      	movs	r7, #1
 8016934:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016938:	e7eb      	b.n	8016912 <_strtol_l.isra.0+0x62>
 801693a:	462f      	mov	r7, r5
 801693c:	e7bf      	b.n	80168be <_strtol_l.isra.0+0xe>
 801693e:	2c2b      	cmp	r4, #43	; 0x2b
 8016940:	bf04      	itt	eq
 8016942:	1cbd      	addeq	r5, r7, #2
 8016944:	787c      	ldrbeq	r4, [r7, #1]
 8016946:	461a      	mov	r2, r3
 8016948:	e7c9      	b.n	80168de <_strtol_l.isra.0+0x2e>
 801694a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801694e:	2b19      	cmp	r3, #25
 8016950:	d801      	bhi.n	8016956 <_strtol_l.isra.0+0xa6>
 8016952:	3c37      	subs	r4, #55	; 0x37
 8016954:	e7e2      	b.n	801691c <_strtol_l.isra.0+0x6c>
 8016956:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801695a:	2b19      	cmp	r3, #25
 801695c:	d804      	bhi.n	8016968 <_strtol_l.isra.0+0xb8>
 801695e:	3c57      	subs	r4, #87	; 0x57
 8016960:	e7dc      	b.n	801691c <_strtol_l.isra.0+0x6c>
 8016962:	f04f 37ff 	mov.w	r7, #4294967295
 8016966:	e7e5      	b.n	8016934 <_strtol_l.isra.0+0x84>
 8016968:	1c7b      	adds	r3, r7, #1
 801696a:	d108      	bne.n	801697e <_strtol_l.isra.0+0xce>
 801696c:	2322      	movs	r3, #34	; 0x22
 801696e:	f8c8 3000 	str.w	r3, [r8]
 8016972:	4608      	mov	r0, r1
 8016974:	f1ba 0f00 	cmp.w	sl, #0
 8016978:	d107      	bne.n	801698a <_strtol_l.isra.0+0xda>
 801697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801697e:	b102      	cbz	r2, 8016982 <_strtol_l.isra.0+0xd2>
 8016980:	4240      	negs	r0, r0
 8016982:	f1ba 0f00 	cmp.w	sl, #0
 8016986:	d0f8      	beq.n	801697a <_strtol_l.isra.0+0xca>
 8016988:	b10f      	cbz	r7, 801698e <_strtol_l.isra.0+0xde>
 801698a:	f105 39ff 	add.w	r9, r5, #4294967295
 801698e:	f8ca 9000 	str.w	r9, [sl]
 8016992:	e7f2      	b.n	801697a <_strtol_l.isra.0+0xca>
 8016994:	2430      	movs	r4, #48	; 0x30
 8016996:	2e00      	cmp	r6, #0
 8016998:	d1af      	bne.n	80168fa <_strtol_l.isra.0+0x4a>
 801699a:	2608      	movs	r6, #8
 801699c:	e7ad      	b.n	80168fa <_strtol_l.isra.0+0x4a>
 801699e:	2c30      	cmp	r4, #48	; 0x30
 80169a0:	d0a3      	beq.n	80168ea <_strtol_l.isra.0+0x3a>
 80169a2:	260a      	movs	r6, #10
 80169a4:	e7a9      	b.n	80168fa <_strtol_l.isra.0+0x4a>
	...

080169a8 <_strtol_r>:
 80169a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80169aa:	4c06      	ldr	r4, [pc, #24]	; (80169c4 <_strtol_r+0x1c>)
 80169ac:	4d06      	ldr	r5, [pc, #24]	; (80169c8 <_strtol_r+0x20>)
 80169ae:	6824      	ldr	r4, [r4, #0]
 80169b0:	6a24      	ldr	r4, [r4, #32]
 80169b2:	2c00      	cmp	r4, #0
 80169b4:	bf08      	it	eq
 80169b6:	462c      	moveq	r4, r5
 80169b8:	9400      	str	r4, [sp, #0]
 80169ba:	f7ff ff79 	bl	80168b0 <_strtol_l.isra.0>
 80169be:	b003      	add	sp, #12
 80169c0:	bd30      	pop	{r4, r5, pc}
 80169c2:	bf00      	nop
 80169c4:	2000003c 	.word	0x2000003c
 80169c8:	200000a0 	.word	0x200000a0

080169cc <_strtoul_l.isra.0>:
 80169cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169d0:	4680      	mov	r8, r0
 80169d2:	4689      	mov	r9, r1
 80169d4:	4692      	mov	sl, r2
 80169d6:	461e      	mov	r6, r3
 80169d8:	460f      	mov	r7, r1
 80169da:	463d      	mov	r5, r7
 80169dc:	9808      	ldr	r0, [sp, #32]
 80169de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80169e2:	f001 fb99 	bl	8018118 <__locale_ctype_ptr_l>
 80169e6:	4420      	add	r0, r4
 80169e8:	7843      	ldrb	r3, [r0, #1]
 80169ea:	f013 0308 	ands.w	r3, r3, #8
 80169ee:	d130      	bne.n	8016a52 <_strtoul_l.isra.0+0x86>
 80169f0:	2c2d      	cmp	r4, #45	; 0x2d
 80169f2:	d130      	bne.n	8016a56 <_strtoul_l.isra.0+0x8a>
 80169f4:	787c      	ldrb	r4, [r7, #1]
 80169f6:	1cbd      	adds	r5, r7, #2
 80169f8:	2101      	movs	r1, #1
 80169fa:	2e00      	cmp	r6, #0
 80169fc:	d05c      	beq.n	8016ab8 <_strtoul_l.isra.0+0xec>
 80169fe:	2e10      	cmp	r6, #16
 8016a00:	d109      	bne.n	8016a16 <_strtoul_l.isra.0+0x4a>
 8016a02:	2c30      	cmp	r4, #48	; 0x30
 8016a04:	d107      	bne.n	8016a16 <_strtoul_l.isra.0+0x4a>
 8016a06:	782b      	ldrb	r3, [r5, #0]
 8016a08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016a0c:	2b58      	cmp	r3, #88	; 0x58
 8016a0e:	d14e      	bne.n	8016aae <_strtoul_l.isra.0+0xe2>
 8016a10:	786c      	ldrb	r4, [r5, #1]
 8016a12:	2610      	movs	r6, #16
 8016a14:	3502      	adds	r5, #2
 8016a16:	f04f 32ff 	mov.w	r2, #4294967295
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	fbb2 f2f6 	udiv	r2, r2, r6
 8016a20:	fb06 fc02 	mul.w	ip, r6, r2
 8016a24:	ea6f 0c0c 	mvn.w	ip, ip
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016a2e:	2f09      	cmp	r7, #9
 8016a30:	d817      	bhi.n	8016a62 <_strtoul_l.isra.0+0x96>
 8016a32:	463c      	mov	r4, r7
 8016a34:	42a6      	cmp	r6, r4
 8016a36:	dd23      	ble.n	8016a80 <_strtoul_l.isra.0+0xb4>
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	db1e      	blt.n	8016a7a <_strtoul_l.isra.0+0xae>
 8016a3c:	4282      	cmp	r2, r0
 8016a3e:	d31c      	bcc.n	8016a7a <_strtoul_l.isra.0+0xae>
 8016a40:	d101      	bne.n	8016a46 <_strtoul_l.isra.0+0x7a>
 8016a42:	45a4      	cmp	ip, r4
 8016a44:	db19      	blt.n	8016a7a <_strtoul_l.isra.0+0xae>
 8016a46:	fb00 4006 	mla	r0, r0, r6, r4
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a50:	e7eb      	b.n	8016a2a <_strtoul_l.isra.0+0x5e>
 8016a52:	462f      	mov	r7, r5
 8016a54:	e7c1      	b.n	80169da <_strtoul_l.isra.0+0xe>
 8016a56:	2c2b      	cmp	r4, #43	; 0x2b
 8016a58:	bf04      	itt	eq
 8016a5a:	1cbd      	addeq	r5, r7, #2
 8016a5c:	787c      	ldrbeq	r4, [r7, #1]
 8016a5e:	4619      	mov	r1, r3
 8016a60:	e7cb      	b.n	80169fa <_strtoul_l.isra.0+0x2e>
 8016a62:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016a66:	2f19      	cmp	r7, #25
 8016a68:	d801      	bhi.n	8016a6e <_strtoul_l.isra.0+0xa2>
 8016a6a:	3c37      	subs	r4, #55	; 0x37
 8016a6c:	e7e2      	b.n	8016a34 <_strtoul_l.isra.0+0x68>
 8016a6e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016a72:	2f19      	cmp	r7, #25
 8016a74:	d804      	bhi.n	8016a80 <_strtoul_l.isra.0+0xb4>
 8016a76:	3c57      	subs	r4, #87	; 0x57
 8016a78:	e7dc      	b.n	8016a34 <_strtoul_l.isra.0+0x68>
 8016a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a7e:	e7e5      	b.n	8016a4c <_strtoul_l.isra.0+0x80>
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	da09      	bge.n	8016a98 <_strtoul_l.isra.0+0xcc>
 8016a84:	2322      	movs	r3, #34	; 0x22
 8016a86:	f8c8 3000 	str.w	r3, [r8]
 8016a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a8e:	f1ba 0f00 	cmp.w	sl, #0
 8016a92:	d107      	bne.n	8016aa4 <_strtoul_l.isra.0+0xd8>
 8016a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a98:	b101      	cbz	r1, 8016a9c <_strtoul_l.isra.0+0xd0>
 8016a9a:	4240      	negs	r0, r0
 8016a9c:	f1ba 0f00 	cmp.w	sl, #0
 8016aa0:	d0f8      	beq.n	8016a94 <_strtoul_l.isra.0+0xc8>
 8016aa2:	b10b      	cbz	r3, 8016aa8 <_strtoul_l.isra.0+0xdc>
 8016aa4:	f105 39ff 	add.w	r9, r5, #4294967295
 8016aa8:	f8ca 9000 	str.w	r9, [sl]
 8016aac:	e7f2      	b.n	8016a94 <_strtoul_l.isra.0+0xc8>
 8016aae:	2430      	movs	r4, #48	; 0x30
 8016ab0:	2e00      	cmp	r6, #0
 8016ab2:	d1b0      	bne.n	8016a16 <_strtoul_l.isra.0+0x4a>
 8016ab4:	2608      	movs	r6, #8
 8016ab6:	e7ae      	b.n	8016a16 <_strtoul_l.isra.0+0x4a>
 8016ab8:	2c30      	cmp	r4, #48	; 0x30
 8016aba:	d0a4      	beq.n	8016a06 <_strtoul_l.isra.0+0x3a>
 8016abc:	260a      	movs	r6, #10
 8016abe:	e7aa      	b.n	8016a16 <_strtoul_l.isra.0+0x4a>

08016ac0 <_strtoul_r>:
 8016ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016ac2:	4c06      	ldr	r4, [pc, #24]	; (8016adc <_strtoul_r+0x1c>)
 8016ac4:	4d06      	ldr	r5, [pc, #24]	; (8016ae0 <_strtoul_r+0x20>)
 8016ac6:	6824      	ldr	r4, [r4, #0]
 8016ac8:	6a24      	ldr	r4, [r4, #32]
 8016aca:	2c00      	cmp	r4, #0
 8016acc:	bf08      	it	eq
 8016ace:	462c      	moveq	r4, r5
 8016ad0:	9400      	str	r4, [sp, #0]
 8016ad2:	f7ff ff7b 	bl	80169cc <_strtoul_l.isra.0>
 8016ad6:	b003      	add	sp, #12
 8016ad8:	bd30      	pop	{r4, r5, pc}
 8016ada:	bf00      	nop
 8016adc:	2000003c 	.word	0x2000003c
 8016ae0:	200000a0 	.word	0x200000a0

08016ae4 <__submore>:
 8016ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ae8:	460c      	mov	r4, r1
 8016aea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016af0:	4299      	cmp	r1, r3
 8016af2:	d11d      	bne.n	8016b30 <__submore+0x4c>
 8016af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016af8:	f7fd fa12 	bl	8013f20 <_malloc_r>
 8016afc:	b918      	cbnz	r0, 8016b06 <__submore+0x22>
 8016afe:	f04f 30ff 	mov.w	r0, #4294967295
 8016b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8016b0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016b10:	6360      	str	r0, [r4, #52]	; 0x34
 8016b12:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016b16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016b1a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016b1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016b22:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016b26:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016b2a:	6020      	str	r0, [r4, #0]
 8016b2c:	2000      	movs	r0, #0
 8016b2e:	e7e8      	b.n	8016b02 <__submore+0x1e>
 8016b30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016b32:	0077      	lsls	r7, r6, #1
 8016b34:	463a      	mov	r2, r7
 8016b36:	f001 ff64 	bl	8018a02 <_realloc_r>
 8016b3a:	4605      	mov	r5, r0
 8016b3c:	2800      	cmp	r0, #0
 8016b3e:	d0de      	beq.n	8016afe <__submore+0x1a>
 8016b40:	eb00 0806 	add.w	r8, r0, r6
 8016b44:	4601      	mov	r1, r0
 8016b46:	4632      	mov	r2, r6
 8016b48:	4640      	mov	r0, r8
 8016b4a:	f7fd f987 	bl	8013e5c <memcpy>
 8016b4e:	f8c4 8000 	str.w	r8, [r4]
 8016b52:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016b56:	e7e9      	b.n	8016b2c <__submore+0x48>

08016b58 <_ungetc_r>:
 8016b58:	1c4b      	adds	r3, r1, #1
 8016b5a:	b570      	push	{r4, r5, r6, lr}
 8016b5c:	4606      	mov	r6, r0
 8016b5e:	460d      	mov	r5, r1
 8016b60:	4614      	mov	r4, r2
 8016b62:	d103      	bne.n	8016b6c <_ungetc_r+0x14>
 8016b64:	f04f 35ff 	mov.w	r5, #4294967295
 8016b68:	4628      	mov	r0, r5
 8016b6a:	bd70      	pop	{r4, r5, r6, pc}
 8016b6c:	b118      	cbz	r0, 8016b76 <_ungetc_r+0x1e>
 8016b6e:	6983      	ldr	r3, [r0, #24]
 8016b70:	b90b      	cbnz	r3, 8016b76 <_ungetc_r+0x1e>
 8016b72:	f7fd f845 	bl	8013c00 <__sinit>
 8016b76:	4b2e      	ldr	r3, [pc, #184]	; (8016c30 <_ungetc_r+0xd8>)
 8016b78:	429c      	cmp	r4, r3
 8016b7a:	d12c      	bne.n	8016bd6 <_ungetc_r+0x7e>
 8016b7c:	6874      	ldr	r4, [r6, #4]
 8016b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b82:	f023 0320 	bic.w	r3, r3, #32
 8016b86:	81a3      	strh	r3, [r4, #12]
 8016b88:	b29b      	uxth	r3, r3
 8016b8a:	0759      	lsls	r1, r3, #29
 8016b8c:	d413      	bmi.n	8016bb6 <_ungetc_r+0x5e>
 8016b8e:	06da      	lsls	r2, r3, #27
 8016b90:	d5e8      	bpl.n	8016b64 <_ungetc_r+0xc>
 8016b92:	071b      	lsls	r3, r3, #28
 8016b94:	d50b      	bpl.n	8016bae <_ungetc_r+0x56>
 8016b96:	4621      	mov	r1, r4
 8016b98:	4630      	mov	r0, r6
 8016b9a:	f7fc ffb5 	bl	8013b08 <_fflush_r>
 8016b9e:	2800      	cmp	r0, #0
 8016ba0:	d1e0      	bne.n	8016b64 <_ungetc_r+0xc>
 8016ba2:	89a3      	ldrh	r3, [r4, #12]
 8016ba4:	60a0      	str	r0, [r4, #8]
 8016ba6:	f023 0308 	bic.w	r3, r3, #8
 8016baa:	81a3      	strh	r3, [r4, #12]
 8016bac:	61a0      	str	r0, [r4, #24]
 8016bae:	89a3      	ldrh	r3, [r4, #12]
 8016bb0:	f043 0304 	orr.w	r3, r3, #4
 8016bb4:	81a3      	strh	r3, [r4, #12]
 8016bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016bb8:	6862      	ldr	r2, [r4, #4]
 8016bba:	b2ed      	uxtb	r5, r5
 8016bbc:	b1e3      	cbz	r3, 8016bf8 <_ungetc_r+0xa0>
 8016bbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016bc0:	4293      	cmp	r3, r2
 8016bc2:	dd12      	ble.n	8016bea <_ungetc_r+0x92>
 8016bc4:	6823      	ldr	r3, [r4, #0]
 8016bc6:	1e5a      	subs	r2, r3, #1
 8016bc8:	6022      	str	r2, [r4, #0]
 8016bca:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016bce:	6863      	ldr	r3, [r4, #4]
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	6063      	str	r3, [r4, #4]
 8016bd4:	e7c8      	b.n	8016b68 <_ungetc_r+0x10>
 8016bd6:	4b17      	ldr	r3, [pc, #92]	; (8016c34 <_ungetc_r+0xdc>)
 8016bd8:	429c      	cmp	r4, r3
 8016bda:	d101      	bne.n	8016be0 <_ungetc_r+0x88>
 8016bdc:	68b4      	ldr	r4, [r6, #8]
 8016bde:	e7ce      	b.n	8016b7e <_ungetc_r+0x26>
 8016be0:	4b15      	ldr	r3, [pc, #84]	; (8016c38 <_ungetc_r+0xe0>)
 8016be2:	429c      	cmp	r4, r3
 8016be4:	bf08      	it	eq
 8016be6:	68f4      	ldreq	r4, [r6, #12]
 8016be8:	e7c9      	b.n	8016b7e <_ungetc_r+0x26>
 8016bea:	4621      	mov	r1, r4
 8016bec:	4630      	mov	r0, r6
 8016bee:	f7ff ff79 	bl	8016ae4 <__submore>
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	d0e6      	beq.n	8016bc4 <_ungetc_r+0x6c>
 8016bf6:	e7b5      	b.n	8016b64 <_ungetc_r+0xc>
 8016bf8:	6921      	ldr	r1, [r4, #16]
 8016bfa:	6823      	ldr	r3, [r4, #0]
 8016bfc:	b151      	cbz	r1, 8016c14 <_ungetc_r+0xbc>
 8016bfe:	4299      	cmp	r1, r3
 8016c00:	d208      	bcs.n	8016c14 <_ungetc_r+0xbc>
 8016c02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016c06:	42a9      	cmp	r1, r5
 8016c08:	d104      	bne.n	8016c14 <_ungetc_r+0xbc>
 8016c0a:	3b01      	subs	r3, #1
 8016c0c:	3201      	adds	r2, #1
 8016c0e:	6023      	str	r3, [r4, #0]
 8016c10:	6062      	str	r2, [r4, #4]
 8016c12:	e7a9      	b.n	8016b68 <_ungetc_r+0x10>
 8016c14:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8016c1e:	2303      	movs	r3, #3
 8016c20:	63a3      	str	r3, [r4, #56]	; 0x38
 8016c22:	4623      	mov	r3, r4
 8016c24:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016c28:	6023      	str	r3, [r4, #0]
 8016c2a:	2301      	movs	r3, #1
 8016c2c:	e7d1      	b.n	8016bd2 <_ungetc_r+0x7a>
 8016c2e:	bf00      	nop
 8016c30:	08019218 	.word	0x08019218
 8016c34:	08019238 	.word	0x08019238
 8016c38:	080191f8 	.word	0x080191f8

08016c3c <__swbuf_r>:
 8016c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c3e:	460e      	mov	r6, r1
 8016c40:	4614      	mov	r4, r2
 8016c42:	4605      	mov	r5, r0
 8016c44:	b118      	cbz	r0, 8016c4e <__swbuf_r+0x12>
 8016c46:	6983      	ldr	r3, [r0, #24]
 8016c48:	b90b      	cbnz	r3, 8016c4e <__swbuf_r+0x12>
 8016c4a:	f7fc ffd9 	bl	8013c00 <__sinit>
 8016c4e:	4b21      	ldr	r3, [pc, #132]	; (8016cd4 <__swbuf_r+0x98>)
 8016c50:	429c      	cmp	r4, r3
 8016c52:	d12a      	bne.n	8016caa <__swbuf_r+0x6e>
 8016c54:	686c      	ldr	r4, [r5, #4]
 8016c56:	69a3      	ldr	r3, [r4, #24]
 8016c58:	60a3      	str	r3, [r4, #8]
 8016c5a:	89a3      	ldrh	r3, [r4, #12]
 8016c5c:	071a      	lsls	r2, r3, #28
 8016c5e:	d52e      	bpl.n	8016cbe <__swbuf_r+0x82>
 8016c60:	6923      	ldr	r3, [r4, #16]
 8016c62:	b363      	cbz	r3, 8016cbe <__swbuf_r+0x82>
 8016c64:	6923      	ldr	r3, [r4, #16]
 8016c66:	6820      	ldr	r0, [r4, #0]
 8016c68:	1ac0      	subs	r0, r0, r3
 8016c6a:	6963      	ldr	r3, [r4, #20]
 8016c6c:	b2f6      	uxtb	r6, r6
 8016c6e:	4283      	cmp	r3, r0
 8016c70:	4637      	mov	r7, r6
 8016c72:	dc04      	bgt.n	8016c7e <__swbuf_r+0x42>
 8016c74:	4621      	mov	r1, r4
 8016c76:	4628      	mov	r0, r5
 8016c78:	f7fc ff46 	bl	8013b08 <_fflush_r>
 8016c7c:	bb28      	cbnz	r0, 8016cca <__swbuf_r+0x8e>
 8016c7e:	68a3      	ldr	r3, [r4, #8]
 8016c80:	3b01      	subs	r3, #1
 8016c82:	60a3      	str	r3, [r4, #8]
 8016c84:	6823      	ldr	r3, [r4, #0]
 8016c86:	1c5a      	adds	r2, r3, #1
 8016c88:	6022      	str	r2, [r4, #0]
 8016c8a:	701e      	strb	r6, [r3, #0]
 8016c8c:	6963      	ldr	r3, [r4, #20]
 8016c8e:	3001      	adds	r0, #1
 8016c90:	4283      	cmp	r3, r0
 8016c92:	d004      	beq.n	8016c9e <__swbuf_r+0x62>
 8016c94:	89a3      	ldrh	r3, [r4, #12]
 8016c96:	07db      	lsls	r3, r3, #31
 8016c98:	d519      	bpl.n	8016cce <__swbuf_r+0x92>
 8016c9a:	2e0a      	cmp	r6, #10
 8016c9c:	d117      	bne.n	8016cce <__swbuf_r+0x92>
 8016c9e:	4621      	mov	r1, r4
 8016ca0:	4628      	mov	r0, r5
 8016ca2:	f7fc ff31 	bl	8013b08 <_fflush_r>
 8016ca6:	b190      	cbz	r0, 8016cce <__swbuf_r+0x92>
 8016ca8:	e00f      	b.n	8016cca <__swbuf_r+0x8e>
 8016caa:	4b0b      	ldr	r3, [pc, #44]	; (8016cd8 <__swbuf_r+0x9c>)
 8016cac:	429c      	cmp	r4, r3
 8016cae:	d101      	bne.n	8016cb4 <__swbuf_r+0x78>
 8016cb0:	68ac      	ldr	r4, [r5, #8]
 8016cb2:	e7d0      	b.n	8016c56 <__swbuf_r+0x1a>
 8016cb4:	4b09      	ldr	r3, [pc, #36]	; (8016cdc <__swbuf_r+0xa0>)
 8016cb6:	429c      	cmp	r4, r3
 8016cb8:	bf08      	it	eq
 8016cba:	68ec      	ldreq	r4, [r5, #12]
 8016cbc:	e7cb      	b.n	8016c56 <__swbuf_r+0x1a>
 8016cbe:	4621      	mov	r1, r4
 8016cc0:	4628      	mov	r0, r5
 8016cc2:	f000 f81f 	bl	8016d04 <__swsetup_r>
 8016cc6:	2800      	cmp	r0, #0
 8016cc8:	d0cc      	beq.n	8016c64 <__swbuf_r+0x28>
 8016cca:	f04f 37ff 	mov.w	r7, #4294967295
 8016cce:	4638      	mov	r0, r7
 8016cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cd2:	bf00      	nop
 8016cd4:	08019218 	.word	0x08019218
 8016cd8:	08019238 	.word	0x08019238
 8016cdc:	080191f8 	.word	0x080191f8

08016ce0 <_write_r>:
 8016ce0:	b538      	push	{r3, r4, r5, lr}
 8016ce2:	4c07      	ldr	r4, [pc, #28]	; (8016d00 <_write_r+0x20>)
 8016ce4:	4605      	mov	r5, r0
 8016ce6:	4608      	mov	r0, r1
 8016ce8:	4611      	mov	r1, r2
 8016cea:	2200      	movs	r2, #0
 8016cec:	6022      	str	r2, [r4, #0]
 8016cee:	461a      	mov	r2, r3
 8016cf0:	f7f6 fbc7 	bl	800d482 <_write>
 8016cf4:	1c43      	adds	r3, r0, #1
 8016cf6:	d102      	bne.n	8016cfe <_write_r+0x1e>
 8016cf8:	6823      	ldr	r3, [r4, #0]
 8016cfa:	b103      	cbz	r3, 8016cfe <_write_r+0x1e>
 8016cfc:	602b      	str	r3, [r5, #0]
 8016cfe:	bd38      	pop	{r3, r4, r5, pc}
 8016d00:	20008f4c 	.word	0x20008f4c

08016d04 <__swsetup_r>:
 8016d04:	4b32      	ldr	r3, [pc, #200]	; (8016dd0 <__swsetup_r+0xcc>)
 8016d06:	b570      	push	{r4, r5, r6, lr}
 8016d08:	681d      	ldr	r5, [r3, #0]
 8016d0a:	4606      	mov	r6, r0
 8016d0c:	460c      	mov	r4, r1
 8016d0e:	b125      	cbz	r5, 8016d1a <__swsetup_r+0x16>
 8016d10:	69ab      	ldr	r3, [r5, #24]
 8016d12:	b913      	cbnz	r3, 8016d1a <__swsetup_r+0x16>
 8016d14:	4628      	mov	r0, r5
 8016d16:	f7fc ff73 	bl	8013c00 <__sinit>
 8016d1a:	4b2e      	ldr	r3, [pc, #184]	; (8016dd4 <__swsetup_r+0xd0>)
 8016d1c:	429c      	cmp	r4, r3
 8016d1e:	d10f      	bne.n	8016d40 <__swsetup_r+0x3c>
 8016d20:	686c      	ldr	r4, [r5, #4]
 8016d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d26:	b29a      	uxth	r2, r3
 8016d28:	0715      	lsls	r5, r2, #28
 8016d2a:	d42c      	bmi.n	8016d86 <__swsetup_r+0x82>
 8016d2c:	06d0      	lsls	r0, r2, #27
 8016d2e:	d411      	bmi.n	8016d54 <__swsetup_r+0x50>
 8016d30:	2209      	movs	r2, #9
 8016d32:	6032      	str	r2, [r6, #0]
 8016d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d38:	81a3      	strh	r3, [r4, #12]
 8016d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d3e:	e03e      	b.n	8016dbe <__swsetup_r+0xba>
 8016d40:	4b25      	ldr	r3, [pc, #148]	; (8016dd8 <__swsetup_r+0xd4>)
 8016d42:	429c      	cmp	r4, r3
 8016d44:	d101      	bne.n	8016d4a <__swsetup_r+0x46>
 8016d46:	68ac      	ldr	r4, [r5, #8]
 8016d48:	e7eb      	b.n	8016d22 <__swsetup_r+0x1e>
 8016d4a:	4b24      	ldr	r3, [pc, #144]	; (8016ddc <__swsetup_r+0xd8>)
 8016d4c:	429c      	cmp	r4, r3
 8016d4e:	bf08      	it	eq
 8016d50:	68ec      	ldreq	r4, [r5, #12]
 8016d52:	e7e6      	b.n	8016d22 <__swsetup_r+0x1e>
 8016d54:	0751      	lsls	r1, r2, #29
 8016d56:	d512      	bpl.n	8016d7e <__swsetup_r+0x7a>
 8016d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d5a:	b141      	cbz	r1, 8016d6e <__swsetup_r+0x6a>
 8016d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d60:	4299      	cmp	r1, r3
 8016d62:	d002      	beq.n	8016d6a <__swsetup_r+0x66>
 8016d64:	4630      	mov	r0, r6
 8016d66:	f7fd f88d 	bl	8013e84 <_free_r>
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	6363      	str	r3, [r4, #52]	; 0x34
 8016d6e:	89a3      	ldrh	r3, [r4, #12]
 8016d70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016d74:	81a3      	strh	r3, [r4, #12]
 8016d76:	2300      	movs	r3, #0
 8016d78:	6063      	str	r3, [r4, #4]
 8016d7a:	6923      	ldr	r3, [r4, #16]
 8016d7c:	6023      	str	r3, [r4, #0]
 8016d7e:	89a3      	ldrh	r3, [r4, #12]
 8016d80:	f043 0308 	orr.w	r3, r3, #8
 8016d84:	81a3      	strh	r3, [r4, #12]
 8016d86:	6923      	ldr	r3, [r4, #16]
 8016d88:	b94b      	cbnz	r3, 8016d9e <__swsetup_r+0x9a>
 8016d8a:	89a3      	ldrh	r3, [r4, #12]
 8016d8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d94:	d003      	beq.n	8016d9e <__swsetup_r+0x9a>
 8016d96:	4621      	mov	r1, r4
 8016d98:	4630      	mov	r0, r6
 8016d9a:	f7fd f81f 	bl	8013ddc <__smakebuf_r>
 8016d9e:	89a2      	ldrh	r2, [r4, #12]
 8016da0:	f012 0301 	ands.w	r3, r2, #1
 8016da4:	d00c      	beq.n	8016dc0 <__swsetup_r+0xbc>
 8016da6:	2300      	movs	r3, #0
 8016da8:	60a3      	str	r3, [r4, #8]
 8016daa:	6963      	ldr	r3, [r4, #20]
 8016dac:	425b      	negs	r3, r3
 8016dae:	61a3      	str	r3, [r4, #24]
 8016db0:	6923      	ldr	r3, [r4, #16]
 8016db2:	b953      	cbnz	r3, 8016dca <__swsetup_r+0xc6>
 8016db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016db8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016dbc:	d1ba      	bne.n	8016d34 <__swsetup_r+0x30>
 8016dbe:	bd70      	pop	{r4, r5, r6, pc}
 8016dc0:	0792      	lsls	r2, r2, #30
 8016dc2:	bf58      	it	pl
 8016dc4:	6963      	ldrpl	r3, [r4, #20]
 8016dc6:	60a3      	str	r3, [r4, #8]
 8016dc8:	e7f2      	b.n	8016db0 <__swsetup_r+0xac>
 8016dca:	2000      	movs	r0, #0
 8016dcc:	e7f7      	b.n	8016dbe <__swsetup_r+0xba>
 8016dce:	bf00      	nop
 8016dd0:	2000003c 	.word	0x2000003c
 8016dd4:	08019218 	.word	0x08019218
 8016dd8:	08019238 	.word	0x08019238
 8016ddc:	080191f8 	.word	0x080191f8

08016de0 <_close_r>:
 8016de0:	b538      	push	{r3, r4, r5, lr}
 8016de2:	4c06      	ldr	r4, [pc, #24]	; (8016dfc <_close_r+0x1c>)
 8016de4:	2300      	movs	r3, #0
 8016de6:	4605      	mov	r5, r0
 8016de8:	4608      	mov	r0, r1
 8016dea:	6023      	str	r3, [r4, #0]
 8016dec:	f7f6 fb65 	bl	800d4ba <_close>
 8016df0:	1c43      	adds	r3, r0, #1
 8016df2:	d102      	bne.n	8016dfa <_close_r+0x1a>
 8016df4:	6823      	ldr	r3, [r4, #0]
 8016df6:	b103      	cbz	r3, 8016dfa <_close_r+0x1a>
 8016df8:	602b      	str	r3, [r5, #0]
 8016dfa:	bd38      	pop	{r3, r4, r5, pc}
 8016dfc:	20008f4c 	.word	0x20008f4c

08016e00 <quorem>:
 8016e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e04:	6903      	ldr	r3, [r0, #16]
 8016e06:	690c      	ldr	r4, [r1, #16]
 8016e08:	42a3      	cmp	r3, r4
 8016e0a:	4680      	mov	r8, r0
 8016e0c:	f2c0 8082 	blt.w	8016f14 <quorem+0x114>
 8016e10:	3c01      	subs	r4, #1
 8016e12:	f101 0714 	add.w	r7, r1, #20
 8016e16:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016e1a:	f100 0614 	add.w	r6, r0, #20
 8016e1e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016e22:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016e26:	eb06 030c 	add.w	r3, r6, ip
 8016e2a:	3501      	adds	r5, #1
 8016e2c:	eb07 090c 	add.w	r9, r7, ip
 8016e30:	9301      	str	r3, [sp, #4]
 8016e32:	fbb0 f5f5 	udiv	r5, r0, r5
 8016e36:	b395      	cbz	r5, 8016e9e <quorem+0x9e>
 8016e38:	f04f 0a00 	mov.w	sl, #0
 8016e3c:	4638      	mov	r0, r7
 8016e3e:	46b6      	mov	lr, r6
 8016e40:	46d3      	mov	fp, sl
 8016e42:	f850 2b04 	ldr.w	r2, [r0], #4
 8016e46:	b293      	uxth	r3, r2
 8016e48:	fb05 a303 	mla	r3, r5, r3, sl
 8016e4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016e50:	b29b      	uxth	r3, r3
 8016e52:	ebab 0303 	sub.w	r3, fp, r3
 8016e56:	0c12      	lsrs	r2, r2, #16
 8016e58:	f8de b000 	ldr.w	fp, [lr]
 8016e5c:	fb05 a202 	mla	r2, r5, r2, sl
 8016e60:	fa13 f38b 	uxtah	r3, r3, fp
 8016e64:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016e68:	fa1f fb82 	uxth.w	fp, r2
 8016e6c:	f8de 2000 	ldr.w	r2, [lr]
 8016e70:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016e74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016e78:	b29b      	uxth	r3, r3
 8016e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016e7e:	4581      	cmp	r9, r0
 8016e80:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016e84:	f84e 3b04 	str.w	r3, [lr], #4
 8016e88:	d2db      	bcs.n	8016e42 <quorem+0x42>
 8016e8a:	f856 300c 	ldr.w	r3, [r6, ip]
 8016e8e:	b933      	cbnz	r3, 8016e9e <quorem+0x9e>
 8016e90:	9b01      	ldr	r3, [sp, #4]
 8016e92:	3b04      	subs	r3, #4
 8016e94:	429e      	cmp	r6, r3
 8016e96:	461a      	mov	r2, r3
 8016e98:	d330      	bcc.n	8016efc <quorem+0xfc>
 8016e9a:	f8c8 4010 	str.w	r4, [r8, #16]
 8016e9e:	4640      	mov	r0, r8
 8016ea0:	f001 fbf6 	bl	8018690 <__mcmp>
 8016ea4:	2800      	cmp	r0, #0
 8016ea6:	db25      	blt.n	8016ef4 <quorem+0xf4>
 8016ea8:	3501      	adds	r5, #1
 8016eaa:	4630      	mov	r0, r6
 8016eac:	f04f 0c00 	mov.w	ip, #0
 8016eb0:	f857 2b04 	ldr.w	r2, [r7], #4
 8016eb4:	f8d0 e000 	ldr.w	lr, [r0]
 8016eb8:	b293      	uxth	r3, r2
 8016eba:	ebac 0303 	sub.w	r3, ip, r3
 8016ebe:	0c12      	lsrs	r2, r2, #16
 8016ec0:	fa13 f38e 	uxtah	r3, r3, lr
 8016ec4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016ecc:	b29b      	uxth	r3, r3
 8016ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ed2:	45b9      	cmp	r9, r7
 8016ed4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016ed8:	f840 3b04 	str.w	r3, [r0], #4
 8016edc:	d2e8      	bcs.n	8016eb0 <quorem+0xb0>
 8016ede:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016ee2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016ee6:	b92a      	cbnz	r2, 8016ef4 <quorem+0xf4>
 8016ee8:	3b04      	subs	r3, #4
 8016eea:	429e      	cmp	r6, r3
 8016eec:	461a      	mov	r2, r3
 8016eee:	d30b      	bcc.n	8016f08 <quorem+0x108>
 8016ef0:	f8c8 4010 	str.w	r4, [r8, #16]
 8016ef4:	4628      	mov	r0, r5
 8016ef6:	b003      	add	sp, #12
 8016ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016efc:	6812      	ldr	r2, [r2, #0]
 8016efe:	3b04      	subs	r3, #4
 8016f00:	2a00      	cmp	r2, #0
 8016f02:	d1ca      	bne.n	8016e9a <quorem+0x9a>
 8016f04:	3c01      	subs	r4, #1
 8016f06:	e7c5      	b.n	8016e94 <quorem+0x94>
 8016f08:	6812      	ldr	r2, [r2, #0]
 8016f0a:	3b04      	subs	r3, #4
 8016f0c:	2a00      	cmp	r2, #0
 8016f0e:	d1ef      	bne.n	8016ef0 <quorem+0xf0>
 8016f10:	3c01      	subs	r4, #1
 8016f12:	e7ea      	b.n	8016eea <quorem+0xea>
 8016f14:	2000      	movs	r0, #0
 8016f16:	e7ee      	b.n	8016ef6 <quorem+0xf6>

08016f18 <_dtoa_r>:
 8016f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f1c:	ec57 6b10 	vmov	r6, r7, d0
 8016f20:	b097      	sub	sp, #92	; 0x5c
 8016f22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016f24:	9106      	str	r1, [sp, #24]
 8016f26:	4604      	mov	r4, r0
 8016f28:	920b      	str	r2, [sp, #44]	; 0x2c
 8016f2a:	9312      	str	r3, [sp, #72]	; 0x48
 8016f2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016f30:	e9cd 6700 	strd	r6, r7, [sp]
 8016f34:	b93d      	cbnz	r5, 8016f46 <_dtoa_r+0x2e>
 8016f36:	2010      	movs	r0, #16
 8016f38:	f001 f922 	bl	8018180 <malloc>
 8016f3c:	6260      	str	r0, [r4, #36]	; 0x24
 8016f3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016f42:	6005      	str	r5, [r0, #0]
 8016f44:	60c5      	str	r5, [r0, #12]
 8016f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f48:	6819      	ldr	r1, [r3, #0]
 8016f4a:	b151      	cbz	r1, 8016f62 <_dtoa_r+0x4a>
 8016f4c:	685a      	ldr	r2, [r3, #4]
 8016f4e:	604a      	str	r2, [r1, #4]
 8016f50:	2301      	movs	r3, #1
 8016f52:	4093      	lsls	r3, r2
 8016f54:	608b      	str	r3, [r1, #8]
 8016f56:	4620      	mov	r0, r4
 8016f58:	f001 f97b 	bl	8018252 <_Bfree>
 8016f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f5e:	2200      	movs	r2, #0
 8016f60:	601a      	str	r2, [r3, #0]
 8016f62:	1e3b      	subs	r3, r7, #0
 8016f64:	bfbb      	ittet	lt
 8016f66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016f6a:	9301      	strlt	r3, [sp, #4]
 8016f6c:	2300      	movge	r3, #0
 8016f6e:	2201      	movlt	r2, #1
 8016f70:	bfac      	ite	ge
 8016f72:	f8c8 3000 	strge.w	r3, [r8]
 8016f76:	f8c8 2000 	strlt.w	r2, [r8]
 8016f7a:	4baf      	ldr	r3, [pc, #700]	; (8017238 <_dtoa_r+0x320>)
 8016f7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016f80:	ea33 0308 	bics.w	r3, r3, r8
 8016f84:	d114      	bne.n	8016fb0 <_dtoa_r+0x98>
 8016f86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f88:	f242 730f 	movw	r3, #9999	; 0x270f
 8016f8c:	6013      	str	r3, [r2, #0]
 8016f8e:	9b00      	ldr	r3, [sp, #0]
 8016f90:	b923      	cbnz	r3, 8016f9c <_dtoa_r+0x84>
 8016f92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016f96:	2800      	cmp	r0, #0
 8016f98:	f000 8542 	beq.w	8017a20 <_dtoa_r+0xb08>
 8016f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801724c <_dtoa_r+0x334>
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	f000 8544 	beq.w	8017a30 <_dtoa_r+0xb18>
 8016fa8:	f10b 0303 	add.w	r3, fp, #3
 8016fac:	f000 bd3e 	b.w	8017a2c <_dtoa_r+0xb14>
 8016fb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	4630      	mov	r0, r6
 8016fba:	4639      	mov	r1, r7
 8016fbc:	f7f1 fcbc 	bl	8008938 <__aeabi_dcmpeq>
 8016fc0:	4681      	mov	r9, r0
 8016fc2:	b168      	cbz	r0, 8016fe0 <_dtoa_r+0xc8>
 8016fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	6013      	str	r3, [r2, #0]
 8016fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	f000 8524 	beq.w	8017a1a <_dtoa_r+0xb02>
 8016fd2:	4b9a      	ldr	r3, [pc, #616]	; (801723c <_dtoa_r+0x324>)
 8016fd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016fd6:	f103 3bff 	add.w	fp, r3, #4294967295
 8016fda:	6013      	str	r3, [r2, #0]
 8016fdc:	f000 bd28 	b.w	8017a30 <_dtoa_r+0xb18>
 8016fe0:	aa14      	add	r2, sp, #80	; 0x50
 8016fe2:	a915      	add	r1, sp, #84	; 0x54
 8016fe4:	ec47 6b10 	vmov	d0, r6, r7
 8016fe8:	4620      	mov	r0, r4
 8016fea:	f001 fc3f 	bl	801886c <__d2b>
 8016fee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016ff2:	9004      	str	r0, [sp, #16]
 8016ff4:	2d00      	cmp	r5, #0
 8016ff6:	d07c      	beq.n	80170f2 <_dtoa_r+0x1da>
 8016ff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016ffc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017000:	46b2      	mov	sl, r6
 8017002:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801700a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801700e:	2200      	movs	r2, #0
 8017010:	4b8b      	ldr	r3, [pc, #556]	; (8017240 <_dtoa_r+0x328>)
 8017012:	4650      	mov	r0, sl
 8017014:	4659      	mov	r1, fp
 8017016:	f7f1 f86f 	bl	80080f8 <__aeabi_dsub>
 801701a:	a381      	add	r3, pc, #516	; (adr r3, 8017220 <_dtoa_r+0x308>)
 801701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017020:	f7f1 fa22 	bl	8008468 <__aeabi_dmul>
 8017024:	a380      	add	r3, pc, #512	; (adr r3, 8017228 <_dtoa_r+0x310>)
 8017026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801702a:	f7f1 f867 	bl	80080fc <__adddf3>
 801702e:	4606      	mov	r6, r0
 8017030:	4628      	mov	r0, r5
 8017032:	460f      	mov	r7, r1
 8017034:	f7f1 f9ae 	bl	8008394 <__aeabi_i2d>
 8017038:	a37d      	add	r3, pc, #500	; (adr r3, 8017230 <_dtoa_r+0x318>)
 801703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801703e:	f7f1 fa13 	bl	8008468 <__aeabi_dmul>
 8017042:	4602      	mov	r2, r0
 8017044:	460b      	mov	r3, r1
 8017046:	4630      	mov	r0, r6
 8017048:	4639      	mov	r1, r7
 801704a:	f7f1 f857 	bl	80080fc <__adddf3>
 801704e:	4606      	mov	r6, r0
 8017050:	460f      	mov	r7, r1
 8017052:	f7f1 fcb9 	bl	80089c8 <__aeabi_d2iz>
 8017056:	2200      	movs	r2, #0
 8017058:	4682      	mov	sl, r0
 801705a:	2300      	movs	r3, #0
 801705c:	4630      	mov	r0, r6
 801705e:	4639      	mov	r1, r7
 8017060:	f7f1 fc74 	bl	800894c <__aeabi_dcmplt>
 8017064:	b148      	cbz	r0, 801707a <_dtoa_r+0x162>
 8017066:	4650      	mov	r0, sl
 8017068:	f7f1 f994 	bl	8008394 <__aeabi_i2d>
 801706c:	4632      	mov	r2, r6
 801706e:	463b      	mov	r3, r7
 8017070:	f7f1 fc62 	bl	8008938 <__aeabi_dcmpeq>
 8017074:	b908      	cbnz	r0, 801707a <_dtoa_r+0x162>
 8017076:	f10a 3aff 	add.w	sl, sl, #4294967295
 801707a:	f1ba 0f16 	cmp.w	sl, #22
 801707e:	d859      	bhi.n	8017134 <_dtoa_r+0x21c>
 8017080:	4970      	ldr	r1, [pc, #448]	; (8017244 <_dtoa_r+0x32c>)
 8017082:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017086:	e9dd 2300 	ldrd	r2, r3, [sp]
 801708a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801708e:	f7f1 fc7b 	bl	8008988 <__aeabi_dcmpgt>
 8017092:	2800      	cmp	r0, #0
 8017094:	d050      	beq.n	8017138 <_dtoa_r+0x220>
 8017096:	f10a 3aff 	add.w	sl, sl, #4294967295
 801709a:	2300      	movs	r3, #0
 801709c:	930f      	str	r3, [sp, #60]	; 0x3c
 801709e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80170a0:	1b5d      	subs	r5, r3, r5
 80170a2:	f1b5 0801 	subs.w	r8, r5, #1
 80170a6:	bf49      	itett	mi
 80170a8:	f1c5 0301 	rsbmi	r3, r5, #1
 80170ac:	2300      	movpl	r3, #0
 80170ae:	9305      	strmi	r3, [sp, #20]
 80170b0:	f04f 0800 	movmi.w	r8, #0
 80170b4:	bf58      	it	pl
 80170b6:	9305      	strpl	r3, [sp, #20]
 80170b8:	f1ba 0f00 	cmp.w	sl, #0
 80170bc:	db3e      	blt.n	801713c <_dtoa_r+0x224>
 80170be:	2300      	movs	r3, #0
 80170c0:	44d0      	add	r8, sl
 80170c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80170c6:	9307      	str	r3, [sp, #28]
 80170c8:	9b06      	ldr	r3, [sp, #24]
 80170ca:	2b09      	cmp	r3, #9
 80170cc:	f200 8090 	bhi.w	80171f0 <_dtoa_r+0x2d8>
 80170d0:	2b05      	cmp	r3, #5
 80170d2:	bfc4      	itt	gt
 80170d4:	3b04      	subgt	r3, #4
 80170d6:	9306      	strgt	r3, [sp, #24]
 80170d8:	9b06      	ldr	r3, [sp, #24]
 80170da:	f1a3 0302 	sub.w	r3, r3, #2
 80170de:	bfcc      	ite	gt
 80170e0:	2500      	movgt	r5, #0
 80170e2:	2501      	movle	r5, #1
 80170e4:	2b03      	cmp	r3, #3
 80170e6:	f200 808f 	bhi.w	8017208 <_dtoa_r+0x2f0>
 80170ea:	e8df f003 	tbb	[pc, r3]
 80170ee:	7f7d      	.short	0x7f7d
 80170f0:	7131      	.short	0x7131
 80170f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80170f6:	441d      	add	r5, r3
 80170f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80170fc:	2820      	cmp	r0, #32
 80170fe:	dd13      	ble.n	8017128 <_dtoa_r+0x210>
 8017100:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017104:	9b00      	ldr	r3, [sp, #0]
 8017106:	fa08 f800 	lsl.w	r8, r8, r0
 801710a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801710e:	fa23 f000 	lsr.w	r0, r3, r0
 8017112:	ea48 0000 	orr.w	r0, r8, r0
 8017116:	f7f1 f92d 	bl	8008374 <__aeabi_ui2d>
 801711a:	2301      	movs	r3, #1
 801711c:	4682      	mov	sl, r0
 801711e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017122:	3d01      	subs	r5, #1
 8017124:	9313      	str	r3, [sp, #76]	; 0x4c
 8017126:	e772      	b.n	801700e <_dtoa_r+0xf6>
 8017128:	9b00      	ldr	r3, [sp, #0]
 801712a:	f1c0 0020 	rsb	r0, r0, #32
 801712e:	fa03 f000 	lsl.w	r0, r3, r0
 8017132:	e7f0      	b.n	8017116 <_dtoa_r+0x1fe>
 8017134:	2301      	movs	r3, #1
 8017136:	e7b1      	b.n	801709c <_dtoa_r+0x184>
 8017138:	900f      	str	r0, [sp, #60]	; 0x3c
 801713a:	e7b0      	b.n	801709e <_dtoa_r+0x186>
 801713c:	9b05      	ldr	r3, [sp, #20]
 801713e:	eba3 030a 	sub.w	r3, r3, sl
 8017142:	9305      	str	r3, [sp, #20]
 8017144:	f1ca 0300 	rsb	r3, sl, #0
 8017148:	9307      	str	r3, [sp, #28]
 801714a:	2300      	movs	r3, #0
 801714c:	930e      	str	r3, [sp, #56]	; 0x38
 801714e:	e7bb      	b.n	80170c8 <_dtoa_r+0x1b0>
 8017150:	2301      	movs	r3, #1
 8017152:	930a      	str	r3, [sp, #40]	; 0x28
 8017154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017156:	2b00      	cmp	r3, #0
 8017158:	dd59      	ble.n	801720e <_dtoa_r+0x2f6>
 801715a:	9302      	str	r3, [sp, #8]
 801715c:	4699      	mov	r9, r3
 801715e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017160:	2200      	movs	r2, #0
 8017162:	6072      	str	r2, [r6, #4]
 8017164:	2204      	movs	r2, #4
 8017166:	f102 0014 	add.w	r0, r2, #20
 801716a:	4298      	cmp	r0, r3
 801716c:	6871      	ldr	r1, [r6, #4]
 801716e:	d953      	bls.n	8017218 <_dtoa_r+0x300>
 8017170:	4620      	mov	r0, r4
 8017172:	f001 f83a 	bl	80181ea <_Balloc>
 8017176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017178:	6030      	str	r0, [r6, #0]
 801717a:	f1b9 0f0e 	cmp.w	r9, #14
 801717e:	f8d3 b000 	ldr.w	fp, [r3]
 8017182:	f200 80e6 	bhi.w	8017352 <_dtoa_r+0x43a>
 8017186:	2d00      	cmp	r5, #0
 8017188:	f000 80e3 	beq.w	8017352 <_dtoa_r+0x43a>
 801718c:	ed9d 7b00 	vldr	d7, [sp]
 8017190:	f1ba 0f00 	cmp.w	sl, #0
 8017194:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017198:	dd74      	ble.n	8017284 <_dtoa_r+0x36c>
 801719a:	4a2a      	ldr	r2, [pc, #168]	; (8017244 <_dtoa_r+0x32c>)
 801719c:	f00a 030f 	and.w	r3, sl, #15
 80171a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80171a4:	ed93 7b00 	vldr	d7, [r3]
 80171a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80171ac:	06f0      	lsls	r0, r6, #27
 80171ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 80171b2:	d565      	bpl.n	8017280 <_dtoa_r+0x368>
 80171b4:	4b24      	ldr	r3, [pc, #144]	; (8017248 <_dtoa_r+0x330>)
 80171b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80171ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80171be:	f7f1 fa7d 	bl	80086bc <__aeabi_ddiv>
 80171c2:	e9cd 0100 	strd	r0, r1, [sp]
 80171c6:	f006 060f 	and.w	r6, r6, #15
 80171ca:	2503      	movs	r5, #3
 80171cc:	4f1e      	ldr	r7, [pc, #120]	; (8017248 <_dtoa_r+0x330>)
 80171ce:	e04c      	b.n	801726a <_dtoa_r+0x352>
 80171d0:	2301      	movs	r3, #1
 80171d2:	930a      	str	r3, [sp, #40]	; 0x28
 80171d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171d6:	4453      	add	r3, sl
 80171d8:	f103 0901 	add.w	r9, r3, #1
 80171dc:	9302      	str	r3, [sp, #8]
 80171de:	464b      	mov	r3, r9
 80171e0:	2b01      	cmp	r3, #1
 80171e2:	bfb8      	it	lt
 80171e4:	2301      	movlt	r3, #1
 80171e6:	e7ba      	b.n	801715e <_dtoa_r+0x246>
 80171e8:	2300      	movs	r3, #0
 80171ea:	e7b2      	b.n	8017152 <_dtoa_r+0x23a>
 80171ec:	2300      	movs	r3, #0
 80171ee:	e7f0      	b.n	80171d2 <_dtoa_r+0x2ba>
 80171f0:	2501      	movs	r5, #1
 80171f2:	2300      	movs	r3, #0
 80171f4:	9306      	str	r3, [sp, #24]
 80171f6:	950a      	str	r5, [sp, #40]	; 0x28
 80171f8:	f04f 33ff 	mov.w	r3, #4294967295
 80171fc:	9302      	str	r3, [sp, #8]
 80171fe:	4699      	mov	r9, r3
 8017200:	2200      	movs	r2, #0
 8017202:	2312      	movs	r3, #18
 8017204:	920b      	str	r2, [sp, #44]	; 0x2c
 8017206:	e7aa      	b.n	801715e <_dtoa_r+0x246>
 8017208:	2301      	movs	r3, #1
 801720a:	930a      	str	r3, [sp, #40]	; 0x28
 801720c:	e7f4      	b.n	80171f8 <_dtoa_r+0x2e0>
 801720e:	2301      	movs	r3, #1
 8017210:	9302      	str	r3, [sp, #8]
 8017212:	4699      	mov	r9, r3
 8017214:	461a      	mov	r2, r3
 8017216:	e7f5      	b.n	8017204 <_dtoa_r+0x2ec>
 8017218:	3101      	adds	r1, #1
 801721a:	6071      	str	r1, [r6, #4]
 801721c:	0052      	lsls	r2, r2, #1
 801721e:	e7a2      	b.n	8017166 <_dtoa_r+0x24e>
 8017220:	636f4361 	.word	0x636f4361
 8017224:	3fd287a7 	.word	0x3fd287a7
 8017228:	8b60c8b3 	.word	0x8b60c8b3
 801722c:	3fc68a28 	.word	0x3fc68a28
 8017230:	509f79fb 	.word	0x509f79fb
 8017234:	3fd34413 	.word	0x3fd34413
 8017238:	7ff00000 	.word	0x7ff00000
 801723c:	080192bb 	.word	0x080192bb
 8017240:	3ff80000 	.word	0x3ff80000
 8017244:	08019350 	.word	0x08019350
 8017248:	08019328 	.word	0x08019328
 801724c:	08019319 	.word	0x08019319
 8017250:	07f1      	lsls	r1, r6, #31
 8017252:	d508      	bpl.n	8017266 <_dtoa_r+0x34e>
 8017254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017258:	e9d7 2300 	ldrd	r2, r3, [r7]
 801725c:	f7f1 f904 	bl	8008468 <__aeabi_dmul>
 8017260:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017264:	3501      	adds	r5, #1
 8017266:	1076      	asrs	r6, r6, #1
 8017268:	3708      	adds	r7, #8
 801726a:	2e00      	cmp	r6, #0
 801726c:	d1f0      	bne.n	8017250 <_dtoa_r+0x338>
 801726e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017272:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017276:	f7f1 fa21 	bl	80086bc <__aeabi_ddiv>
 801727a:	e9cd 0100 	strd	r0, r1, [sp]
 801727e:	e01a      	b.n	80172b6 <_dtoa_r+0x39e>
 8017280:	2502      	movs	r5, #2
 8017282:	e7a3      	b.n	80171cc <_dtoa_r+0x2b4>
 8017284:	f000 80a0 	beq.w	80173c8 <_dtoa_r+0x4b0>
 8017288:	f1ca 0600 	rsb	r6, sl, #0
 801728c:	4b9f      	ldr	r3, [pc, #636]	; (801750c <_dtoa_r+0x5f4>)
 801728e:	4fa0      	ldr	r7, [pc, #640]	; (8017510 <_dtoa_r+0x5f8>)
 8017290:	f006 020f 	and.w	r2, r6, #15
 8017294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801729c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80172a0:	f7f1 f8e2 	bl	8008468 <__aeabi_dmul>
 80172a4:	e9cd 0100 	strd	r0, r1, [sp]
 80172a8:	1136      	asrs	r6, r6, #4
 80172aa:	2300      	movs	r3, #0
 80172ac:	2502      	movs	r5, #2
 80172ae:	2e00      	cmp	r6, #0
 80172b0:	d17f      	bne.n	80173b2 <_dtoa_r+0x49a>
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d1e1      	bne.n	801727a <_dtoa_r+0x362>
 80172b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	f000 8087 	beq.w	80173cc <_dtoa_r+0x4b4>
 80172be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80172c2:	2200      	movs	r2, #0
 80172c4:	4b93      	ldr	r3, [pc, #588]	; (8017514 <_dtoa_r+0x5fc>)
 80172c6:	4630      	mov	r0, r6
 80172c8:	4639      	mov	r1, r7
 80172ca:	f7f1 fb3f 	bl	800894c <__aeabi_dcmplt>
 80172ce:	2800      	cmp	r0, #0
 80172d0:	d07c      	beq.n	80173cc <_dtoa_r+0x4b4>
 80172d2:	f1b9 0f00 	cmp.w	r9, #0
 80172d6:	d079      	beq.n	80173cc <_dtoa_r+0x4b4>
 80172d8:	9b02      	ldr	r3, [sp, #8]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	dd35      	ble.n	801734a <_dtoa_r+0x432>
 80172de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80172e2:	9308      	str	r3, [sp, #32]
 80172e4:	4639      	mov	r1, r7
 80172e6:	2200      	movs	r2, #0
 80172e8:	4b8b      	ldr	r3, [pc, #556]	; (8017518 <_dtoa_r+0x600>)
 80172ea:	4630      	mov	r0, r6
 80172ec:	f7f1 f8bc 	bl	8008468 <__aeabi_dmul>
 80172f0:	e9cd 0100 	strd	r0, r1, [sp]
 80172f4:	9f02      	ldr	r7, [sp, #8]
 80172f6:	3501      	adds	r5, #1
 80172f8:	4628      	mov	r0, r5
 80172fa:	f7f1 f84b 	bl	8008394 <__aeabi_i2d>
 80172fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017302:	f7f1 f8b1 	bl	8008468 <__aeabi_dmul>
 8017306:	2200      	movs	r2, #0
 8017308:	4b84      	ldr	r3, [pc, #528]	; (801751c <_dtoa_r+0x604>)
 801730a:	f7f0 fef7 	bl	80080fc <__adddf3>
 801730e:	4605      	mov	r5, r0
 8017310:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017314:	2f00      	cmp	r7, #0
 8017316:	d15d      	bne.n	80173d4 <_dtoa_r+0x4bc>
 8017318:	2200      	movs	r2, #0
 801731a:	4b81      	ldr	r3, [pc, #516]	; (8017520 <_dtoa_r+0x608>)
 801731c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017320:	f7f0 feea 	bl	80080f8 <__aeabi_dsub>
 8017324:	462a      	mov	r2, r5
 8017326:	4633      	mov	r3, r6
 8017328:	e9cd 0100 	strd	r0, r1, [sp]
 801732c:	f7f1 fb2c 	bl	8008988 <__aeabi_dcmpgt>
 8017330:	2800      	cmp	r0, #0
 8017332:	f040 8288 	bne.w	8017846 <_dtoa_r+0x92e>
 8017336:	462a      	mov	r2, r5
 8017338:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801733c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017340:	f7f1 fb04 	bl	800894c <__aeabi_dcmplt>
 8017344:	2800      	cmp	r0, #0
 8017346:	f040 827c 	bne.w	8017842 <_dtoa_r+0x92a>
 801734a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801734e:	e9cd 2300 	strd	r2, r3, [sp]
 8017352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017354:	2b00      	cmp	r3, #0
 8017356:	f2c0 8150 	blt.w	80175fa <_dtoa_r+0x6e2>
 801735a:	f1ba 0f0e 	cmp.w	sl, #14
 801735e:	f300 814c 	bgt.w	80175fa <_dtoa_r+0x6e2>
 8017362:	4b6a      	ldr	r3, [pc, #424]	; (801750c <_dtoa_r+0x5f4>)
 8017364:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017368:	ed93 7b00 	vldr	d7, [r3]
 801736c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801736e:	2b00      	cmp	r3, #0
 8017370:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017374:	f280 80d8 	bge.w	8017528 <_dtoa_r+0x610>
 8017378:	f1b9 0f00 	cmp.w	r9, #0
 801737c:	f300 80d4 	bgt.w	8017528 <_dtoa_r+0x610>
 8017380:	f040 825e 	bne.w	8017840 <_dtoa_r+0x928>
 8017384:	2200      	movs	r2, #0
 8017386:	4b66      	ldr	r3, [pc, #408]	; (8017520 <_dtoa_r+0x608>)
 8017388:	ec51 0b17 	vmov	r0, r1, d7
 801738c:	f7f1 f86c 	bl	8008468 <__aeabi_dmul>
 8017390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017394:	f7f1 faee 	bl	8008974 <__aeabi_dcmpge>
 8017398:	464f      	mov	r7, r9
 801739a:	464e      	mov	r6, r9
 801739c:	2800      	cmp	r0, #0
 801739e:	f040 8234 	bne.w	801780a <_dtoa_r+0x8f2>
 80173a2:	2331      	movs	r3, #49	; 0x31
 80173a4:	f10b 0501 	add.w	r5, fp, #1
 80173a8:	f88b 3000 	strb.w	r3, [fp]
 80173ac:	f10a 0a01 	add.w	sl, sl, #1
 80173b0:	e22f      	b.n	8017812 <_dtoa_r+0x8fa>
 80173b2:	07f2      	lsls	r2, r6, #31
 80173b4:	d505      	bpl.n	80173c2 <_dtoa_r+0x4aa>
 80173b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80173ba:	f7f1 f855 	bl	8008468 <__aeabi_dmul>
 80173be:	3501      	adds	r5, #1
 80173c0:	2301      	movs	r3, #1
 80173c2:	1076      	asrs	r6, r6, #1
 80173c4:	3708      	adds	r7, #8
 80173c6:	e772      	b.n	80172ae <_dtoa_r+0x396>
 80173c8:	2502      	movs	r5, #2
 80173ca:	e774      	b.n	80172b6 <_dtoa_r+0x39e>
 80173cc:	f8cd a020 	str.w	sl, [sp, #32]
 80173d0:	464f      	mov	r7, r9
 80173d2:	e791      	b.n	80172f8 <_dtoa_r+0x3e0>
 80173d4:	4b4d      	ldr	r3, [pc, #308]	; (801750c <_dtoa_r+0x5f4>)
 80173d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80173da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80173de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d047      	beq.n	8017474 <_dtoa_r+0x55c>
 80173e4:	4602      	mov	r2, r0
 80173e6:	460b      	mov	r3, r1
 80173e8:	2000      	movs	r0, #0
 80173ea:	494e      	ldr	r1, [pc, #312]	; (8017524 <_dtoa_r+0x60c>)
 80173ec:	f7f1 f966 	bl	80086bc <__aeabi_ddiv>
 80173f0:	462a      	mov	r2, r5
 80173f2:	4633      	mov	r3, r6
 80173f4:	f7f0 fe80 	bl	80080f8 <__aeabi_dsub>
 80173f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80173fc:	465d      	mov	r5, fp
 80173fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017402:	f7f1 fae1 	bl	80089c8 <__aeabi_d2iz>
 8017406:	4606      	mov	r6, r0
 8017408:	f7f0 ffc4 	bl	8008394 <__aeabi_i2d>
 801740c:	4602      	mov	r2, r0
 801740e:	460b      	mov	r3, r1
 8017410:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017414:	f7f0 fe70 	bl	80080f8 <__aeabi_dsub>
 8017418:	3630      	adds	r6, #48	; 0x30
 801741a:	f805 6b01 	strb.w	r6, [r5], #1
 801741e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017422:	e9cd 0100 	strd	r0, r1, [sp]
 8017426:	f7f1 fa91 	bl	800894c <__aeabi_dcmplt>
 801742a:	2800      	cmp	r0, #0
 801742c:	d163      	bne.n	80174f6 <_dtoa_r+0x5de>
 801742e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017432:	2000      	movs	r0, #0
 8017434:	4937      	ldr	r1, [pc, #220]	; (8017514 <_dtoa_r+0x5fc>)
 8017436:	f7f0 fe5f 	bl	80080f8 <__aeabi_dsub>
 801743a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801743e:	f7f1 fa85 	bl	800894c <__aeabi_dcmplt>
 8017442:	2800      	cmp	r0, #0
 8017444:	f040 80b7 	bne.w	80175b6 <_dtoa_r+0x69e>
 8017448:	eba5 030b 	sub.w	r3, r5, fp
 801744c:	429f      	cmp	r7, r3
 801744e:	f77f af7c 	ble.w	801734a <_dtoa_r+0x432>
 8017452:	2200      	movs	r2, #0
 8017454:	4b30      	ldr	r3, [pc, #192]	; (8017518 <_dtoa_r+0x600>)
 8017456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801745a:	f7f1 f805 	bl	8008468 <__aeabi_dmul>
 801745e:	2200      	movs	r2, #0
 8017460:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017464:	4b2c      	ldr	r3, [pc, #176]	; (8017518 <_dtoa_r+0x600>)
 8017466:	e9dd 0100 	ldrd	r0, r1, [sp]
 801746a:	f7f0 fffd 	bl	8008468 <__aeabi_dmul>
 801746e:	e9cd 0100 	strd	r0, r1, [sp]
 8017472:	e7c4      	b.n	80173fe <_dtoa_r+0x4e6>
 8017474:	462a      	mov	r2, r5
 8017476:	4633      	mov	r3, r6
 8017478:	f7f0 fff6 	bl	8008468 <__aeabi_dmul>
 801747c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017480:	eb0b 0507 	add.w	r5, fp, r7
 8017484:	465e      	mov	r6, fp
 8017486:	e9dd 0100 	ldrd	r0, r1, [sp]
 801748a:	f7f1 fa9d 	bl	80089c8 <__aeabi_d2iz>
 801748e:	4607      	mov	r7, r0
 8017490:	f7f0 ff80 	bl	8008394 <__aeabi_i2d>
 8017494:	3730      	adds	r7, #48	; 0x30
 8017496:	4602      	mov	r2, r0
 8017498:	460b      	mov	r3, r1
 801749a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801749e:	f7f0 fe2b 	bl	80080f8 <__aeabi_dsub>
 80174a2:	f806 7b01 	strb.w	r7, [r6], #1
 80174a6:	42ae      	cmp	r6, r5
 80174a8:	e9cd 0100 	strd	r0, r1, [sp]
 80174ac:	f04f 0200 	mov.w	r2, #0
 80174b0:	d126      	bne.n	8017500 <_dtoa_r+0x5e8>
 80174b2:	4b1c      	ldr	r3, [pc, #112]	; (8017524 <_dtoa_r+0x60c>)
 80174b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80174b8:	f7f0 fe20 	bl	80080fc <__adddf3>
 80174bc:	4602      	mov	r2, r0
 80174be:	460b      	mov	r3, r1
 80174c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80174c4:	f7f1 fa60 	bl	8008988 <__aeabi_dcmpgt>
 80174c8:	2800      	cmp	r0, #0
 80174ca:	d174      	bne.n	80175b6 <_dtoa_r+0x69e>
 80174cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80174d0:	2000      	movs	r0, #0
 80174d2:	4914      	ldr	r1, [pc, #80]	; (8017524 <_dtoa_r+0x60c>)
 80174d4:	f7f0 fe10 	bl	80080f8 <__aeabi_dsub>
 80174d8:	4602      	mov	r2, r0
 80174da:	460b      	mov	r3, r1
 80174dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80174e0:	f7f1 fa34 	bl	800894c <__aeabi_dcmplt>
 80174e4:	2800      	cmp	r0, #0
 80174e6:	f43f af30 	beq.w	801734a <_dtoa_r+0x432>
 80174ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80174ee:	2b30      	cmp	r3, #48	; 0x30
 80174f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80174f4:	d002      	beq.n	80174fc <_dtoa_r+0x5e4>
 80174f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80174fa:	e04a      	b.n	8017592 <_dtoa_r+0x67a>
 80174fc:	4615      	mov	r5, r2
 80174fe:	e7f4      	b.n	80174ea <_dtoa_r+0x5d2>
 8017500:	4b05      	ldr	r3, [pc, #20]	; (8017518 <_dtoa_r+0x600>)
 8017502:	f7f0 ffb1 	bl	8008468 <__aeabi_dmul>
 8017506:	e9cd 0100 	strd	r0, r1, [sp]
 801750a:	e7bc      	b.n	8017486 <_dtoa_r+0x56e>
 801750c:	08019350 	.word	0x08019350
 8017510:	08019328 	.word	0x08019328
 8017514:	3ff00000 	.word	0x3ff00000
 8017518:	40240000 	.word	0x40240000
 801751c:	401c0000 	.word	0x401c0000
 8017520:	40140000 	.word	0x40140000
 8017524:	3fe00000 	.word	0x3fe00000
 8017528:	e9dd 6700 	ldrd	r6, r7, [sp]
 801752c:	465d      	mov	r5, fp
 801752e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017532:	4630      	mov	r0, r6
 8017534:	4639      	mov	r1, r7
 8017536:	f7f1 f8c1 	bl	80086bc <__aeabi_ddiv>
 801753a:	f7f1 fa45 	bl	80089c8 <__aeabi_d2iz>
 801753e:	4680      	mov	r8, r0
 8017540:	f7f0 ff28 	bl	8008394 <__aeabi_i2d>
 8017544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017548:	f7f0 ff8e 	bl	8008468 <__aeabi_dmul>
 801754c:	4602      	mov	r2, r0
 801754e:	460b      	mov	r3, r1
 8017550:	4630      	mov	r0, r6
 8017552:	4639      	mov	r1, r7
 8017554:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017558:	f7f0 fdce 	bl	80080f8 <__aeabi_dsub>
 801755c:	f805 6b01 	strb.w	r6, [r5], #1
 8017560:	eba5 060b 	sub.w	r6, r5, fp
 8017564:	45b1      	cmp	r9, r6
 8017566:	4602      	mov	r2, r0
 8017568:	460b      	mov	r3, r1
 801756a:	d139      	bne.n	80175e0 <_dtoa_r+0x6c8>
 801756c:	f7f0 fdc6 	bl	80080fc <__adddf3>
 8017570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017574:	4606      	mov	r6, r0
 8017576:	460f      	mov	r7, r1
 8017578:	f7f1 fa06 	bl	8008988 <__aeabi_dcmpgt>
 801757c:	b9c8      	cbnz	r0, 80175b2 <_dtoa_r+0x69a>
 801757e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017582:	4630      	mov	r0, r6
 8017584:	4639      	mov	r1, r7
 8017586:	f7f1 f9d7 	bl	8008938 <__aeabi_dcmpeq>
 801758a:	b110      	cbz	r0, 8017592 <_dtoa_r+0x67a>
 801758c:	f018 0f01 	tst.w	r8, #1
 8017590:	d10f      	bne.n	80175b2 <_dtoa_r+0x69a>
 8017592:	9904      	ldr	r1, [sp, #16]
 8017594:	4620      	mov	r0, r4
 8017596:	f000 fe5c 	bl	8018252 <_Bfree>
 801759a:	2300      	movs	r3, #0
 801759c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801759e:	702b      	strb	r3, [r5, #0]
 80175a0:	f10a 0301 	add.w	r3, sl, #1
 80175a4:	6013      	str	r3, [r2, #0]
 80175a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	f000 8241 	beq.w	8017a30 <_dtoa_r+0xb18>
 80175ae:	601d      	str	r5, [r3, #0]
 80175b0:	e23e      	b.n	8017a30 <_dtoa_r+0xb18>
 80175b2:	f8cd a020 	str.w	sl, [sp, #32]
 80175b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80175ba:	2a39      	cmp	r2, #57	; 0x39
 80175bc:	f105 33ff 	add.w	r3, r5, #4294967295
 80175c0:	d108      	bne.n	80175d4 <_dtoa_r+0x6bc>
 80175c2:	459b      	cmp	fp, r3
 80175c4:	d10a      	bne.n	80175dc <_dtoa_r+0x6c4>
 80175c6:	9b08      	ldr	r3, [sp, #32]
 80175c8:	3301      	adds	r3, #1
 80175ca:	9308      	str	r3, [sp, #32]
 80175cc:	2330      	movs	r3, #48	; 0x30
 80175ce:	f88b 3000 	strb.w	r3, [fp]
 80175d2:	465b      	mov	r3, fp
 80175d4:	781a      	ldrb	r2, [r3, #0]
 80175d6:	3201      	adds	r2, #1
 80175d8:	701a      	strb	r2, [r3, #0]
 80175da:	e78c      	b.n	80174f6 <_dtoa_r+0x5de>
 80175dc:	461d      	mov	r5, r3
 80175de:	e7ea      	b.n	80175b6 <_dtoa_r+0x69e>
 80175e0:	2200      	movs	r2, #0
 80175e2:	4b9b      	ldr	r3, [pc, #620]	; (8017850 <_dtoa_r+0x938>)
 80175e4:	f7f0 ff40 	bl	8008468 <__aeabi_dmul>
 80175e8:	2200      	movs	r2, #0
 80175ea:	2300      	movs	r3, #0
 80175ec:	4606      	mov	r6, r0
 80175ee:	460f      	mov	r7, r1
 80175f0:	f7f1 f9a2 	bl	8008938 <__aeabi_dcmpeq>
 80175f4:	2800      	cmp	r0, #0
 80175f6:	d09a      	beq.n	801752e <_dtoa_r+0x616>
 80175f8:	e7cb      	b.n	8017592 <_dtoa_r+0x67a>
 80175fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175fc:	2a00      	cmp	r2, #0
 80175fe:	f000 808b 	beq.w	8017718 <_dtoa_r+0x800>
 8017602:	9a06      	ldr	r2, [sp, #24]
 8017604:	2a01      	cmp	r2, #1
 8017606:	dc6e      	bgt.n	80176e6 <_dtoa_r+0x7ce>
 8017608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801760a:	2a00      	cmp	r2, #0
 801760c:	d067      	beq.n	80176de <_dtoa_r+0x7c6>
 801760e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017612:	9f07      	ldr	r7, [sp, #28]
 8017614:	9d05      	ldr	r5, [sp, #20]
 8017616:	9a05      	ldr	r2, [sp, #20]
 8017618:	2101      	movs	r1, #1
 801761a:	441a      	add	r2, r3
 801761c:	4620      	mov	r0, r4
 801761e:	9205      	str	r2, [sp, #20]
 8017620:	4498      	add	r8, r3
 8017622:	f000 fef4 	bl	801840e <__i2b>
 8017626:	4606      	mov	r6, r0
 8017628:	2d00      	cmp	r5, #0
 801762a:	dd0c      	ble.n	8017646 <_dtoa_r+0x72e>
 801762c:	f1b8 0f00 	cmp.w	r8, #0
 8017630:	dd09      	ble.n	8017646 <_dtoa_r+0x72e>
 8017632:	4545      	cmp	r5, r8
 8017634:	9a05      	ldr	r2, [sp, #20]
 8017636:	462b      	mov	r3, r5
 8017638:	bfa8      	it	ge
 801763a:	4643      	movge	r3, r8
 801763c:	1ad2      	subs	r2, r2, r3
 801763e:	9205      	str	r2, [sp, #20]
 8017640:	1aed      	subs	r5, r5, r3
 8017642:	eba8 0803 	sub.w	r8, r8, r3
 8017646:	9b07      	ldr	r3, [sp, #28]
 8017648:	b1eb      	cbz	r3, 8017686 <_dtoa_r+0x76e>
 801764a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801764c:	2b00      	cmp	r3, #0
 801764e:	d067      	beq.n	8017720 <_dtoa_r+0x808>
 8017650:	b18f      	cbz	r7, 8017676 <_dtoa_r+0x75e>
 8017652:	4631      	mov	r1, r6
 8017654:	463a      	mov	r2, r7
 8017656:	4620      	mov	r0, r4
 8017658:	f000 ff78 	bl	801854c <__pow5mult>
 801765c:	9a04      	ldr	r2, [sp, #16]
 801765e:	4601      	mov	r1, r0
 8017660:	4606      	mov	r6, r0
 8017662:	4620      	mov	r0, r4
 8017664:	f000 fedc 	bl	8018420 <__multiply>
 8017668:	9904      	ldr	r1, [sp, #16]
 801766a:	9008      	str	r0, [sp, #32]
 801766c:	4620      	mov	r0, r4
 801766e:	f000 fdf0 	bl	8018252 <_Bfree>
 8017672:	9b08      	ldr	r3, [sp, #32]
 8017674:	9304      	str	r3, [sp, #16]
 8017676:	9b07      	ldr	r3, [sp, #28]
 8017678:	1bda      	subs	r2, r3, r7
 801767a:	d004      	beq.n	8017686 <_dtoa_r+0x76e>
 801767c:	9904      	ldr	r1, [sp, #16]
 801767e:	4620      	mov	r0, r4
 8017680:	f000 ff64 	bl	801854c <__pow5mult>
 8017684:	9004      	str	r0, [sp, #16]
 8017686:	2101      	movs	r1, #1
 8017688:	4620      	mov	r0, r4
 801768a:	f000 fec0 	bl	801840e <__i2b>
 801768e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017690:	4607      	mov	r7, r0
 8017692:	2b00      	cmp	r3, #0
 8017694:	f000 81d0 	beq.w	8017a38 <_dtoa_r+0xb20>
 8017698:	461a      	mov	r2, r3
 801769a:	4601      	mov	r1, r0
 801769c:	4620      	mov	r0, r4
 801769e:	f000 ff55 	bl	801854c <__pow5mult>
 80176a2:	9b06      	ldr	r3, [sp, #24]
 80176a4:	2b01      	cmp	r3, #1
 80176a6:	4607      	mov	r7, r0
 80176a8:	dc40      	bgt.n	801772c <_dtoa_r+0x814>
 80176aa:	9b00      	ldr	r3, [sp, #0]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d139      	bne.n	8017724 <_dtoa_r+0x80c>
 80176b0:	9b01      	ldr	r3, [sp, #4]
 80176b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d136      	bne.n	8017728 <_dtoa_r+0x810>
 80176ba:	9b01      	ldr	r3, [sp, #4]
 80176bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80176c0:	0d1b      	lsrs	r3, r3, #20
 80176c2:	051b      	lsls	r3, r3, #20
 80176c4:	b12b      	cbz	r3, 80176d2 <_dtoa_r+0x7ba>
 80176c6:	9b05      	ldr	r3, [sp, #20]
 80176c8:	3301      	adds	r3, #1
 80176ca:	9305      	str	r3, [sp, #20]
 80176cc:	f108 0801 	add.w	r8, r8, #1
 80176d0:	2301      	movs	r3, #1
 80176d2:	9307      	str	r3, [sp, #28]
 80176d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d12a      	bne.n	8017730 <_dtoa_r+0x818>
 80176da:	2001      	movs	r0, #1
 80176dc:	e030      	b.n	8017740 <_dtoa_r+0x828>
 80176de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80176e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80176e4:	e795      	b.n	8017612 <_dtoa_r+0x6fa>
 80176e6:	9b07      	ldr	r3, [sp, #28]
 80176e8:	f109 37ff 	add.w	r7, r9, #4294967295
 80176ec:	42bb      	cmp	r3, r7
 80176ee:	bfbf      	itttt	lt
 80176f0:	9b07      	ldrlt	r3, [sp, #28]
 80176f2:	9707      	strlt	r7, [sp, #28]
 80176f4:	1afa      	sublt	r2, r7, r3
 80176f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80176f8:	bfbb      	ittet	lt
 80176fa:	189b      	addlt	r3, r3, r2
 80176fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80176fe:	1bdf      	subge	r7, r3, r7
 8017700:	2700      	movlt	r7, #0
 8017702:	f1b9 0f00 	cmp.w	r9, #0
 8017706:	bfb5      	itete	lt
 8017708:	9b05      	ldrlt	r3, [sp, #20]
 801770a:	9d05      	ldrge	r5, [sp, #20]
 801770c:	eba3 0509 	sublt.w	r5, r3, r9
 8017710:	464b      	movge	r3, r9
 8017712:	bfb8      	it	lt
 8017714:	2300      	movlt	r3, #0
 8017716:	e77e      	b.n	8017616 <_dtoa_r+0x6fe>
 8017718:	9f07      	ldr	r7, [sp, #28]
 801771a:	9d05      	ldr	r5, [sp, #20]
 801771c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801771e:	e783      	b.n	8017628 <_dtoa_r+0x710>
 8017720:	9a07      	ldr	r2, [sp, #28]
 8017722:	e7ab      	b.n	801767c <_dtoa_r+0x764>
 8017724:	2300      	movs	r3, #0
 8017726:	e7d4      	b.n	80176d2 <_dtoa_r+0x7ba>
 8017728:	9b00      	ldr	r3, [sp, #0]
 801772a:	e7d2      	b.n	80176d2 <_dtoa_r+0x7ba>
 801772c:	2300      	movs	r3, #0
 801772e:	9307      	str	r3, [sp, #28]
 8017730:	693b      	ldr	r3, [r7, #16]
 8017732:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017736:	6918      	ldr	r0, [r3, #16]
 8017738:	f000 fe1b 	bl	8018372 <__hi0bits>
 801773c:	f1c0 0020 	rsb	r0, r0, #32
 8017740:	4440      	add	r0, r8
 8017742:	f010 001f 	ands.w	r0, r0, #31
 8017746:	d047      	beq.n	80177d8 <_dtoa_r+0x8c0>
 8017748:	f1c0 0320 	rsb	r3, r0, #32
 801774c:	2b04      	cmp	r3, #4
 801774e:	dd3b      	ble.n	80177c8 <_dtoa_r+0x8b0>
 8017750:	9b05      	ldr	r3, [sp, #20]
 8017752:	f1c0 001c 	rsb	r0, r0, #28
 8017756:	4403      	add	r3, r0
 8017758:	9305      	str	r3, [sp, #20]
 801775a:	4405      	add	r5, r0
 801775c:	4480      	add	r8, r0
 801775e:	9b05      	ldr	r3, [sp, #20]
 8017760:	2b00      	cmp	r3, #0
 8017762:	dd05      	ble.n	8017770 <_dtoa_r+0x858>
 8017764:	461a      	mov	r2, r3
 8017766:	9904      	ldr	r1, [sp, #16]
 8017768:	4620      	mov	r0, r4
 801776a:	f000 ff3d 	bl	80185e8 <__lshift>
 801776e:	9004      	str	r0, [sp, #16]
 8017770:	f1b8 0f00 	cmp.w	r8, #0
 8017774:	dd05      	ble.n	8017782 <_dtoa_r+0x86a>
 8017776:	4639      	mov	r1, r7
 8017778:	4642      	mov	r2, r8
 801777a:	4620      	mov	r0, r4
 801777c:	f000 ff34 	bl	80185e8 <__lshift>
 8017780:	4607      	mov	r7, r0
 8017782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017784:	b353      	cbz	r3, 80177dc <_dtoa_r+0x8c4>
 8017786:	4639      	mov	r1, r7
 8017788:	9804      	ldr	r0, [sp, #16]
 801778a:	f000 ff81 	bl	8018690 <__mcmp>
 801778e:	2800      	cmp	r0, #0
 8017790:	da24      	bge.n	80177dc <_dtoa_r+0x8c4>
 8017792:	2300      	movs	r3, #0
 8017794:	220a      	movs	r2, #10
 8017796:	9904      	ldr	r1, [sp, #16]
 8017798:	4620      	mov	r0, r4
 801779a:	f000 fd71 	bl	8018280 <__multadd>
 801779e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177a0:	9004      	str	r0, [sp, #16]
 80177a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	f000 814d 	beq.w	8017a46 <_dtoa_r+0xb2e>
 80177ac:	2300      	movs	r3, #0
 80177ae:	4631      	mov	r1, r6
 80177b0:	220a      	movs	r2, #10
 80177b2:	4620      	mov	r0, r4
 80177b4:	f000 fd64 	bl	8018280 <__multadd>
 80177b8:	9b02      	ldr	r3, [sp, #8]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	4606      	mov	r6, r0
 80177be:	dc4f      	bgt.n	8017860 <_dtoa_r+0x948>
 80177c0:	9b06      	ldr	r3, [sp, #24]
 80177c2:	2b02      	cmp	r3, #2
 80177c4:	dd4c      	ble.n	8017860 <_dtoa_r+0x948>
 80177c6:	e011      	b.n	80177ec <_dtoa_r+0x8d4>
 80177c8:	d0c9      	beq.n	801775e <_dtoa_r+0x846>
 80177ca:	9a05      	ldr	r2, [sp, #20]
 80177cc:	331c      	adds	r3, #28
 80177ce:	441a      	add	r2, r3
 80177d0:	9205      	str	r2, [sp, #20]
 80177d2:	441d      	add	r5, r3
 80177d4:	4498      	add	r8, r3
 80177d6:	e7c2      	b.n	801775e <_dtoa_r+0x846>
 80177d8:	4603      	mov	r3, r0
 80177da:	e7f6      	b.n	80177ca <_dtoa_r+0x8b2>
 80177dc:	f1b9 0f00 	cmp.w	r9, #0
 80177e0:	dc38      	bgt.n	8017854 <_dtoa_r+0x93c>
 80177e2:	9b06      	ldr	r3, [sp, #24]
 80177e4:	2b02      	cmp	r3, #2
 80177e6:	dd35      	ble.n	8017854 <_dtoa_r+0x93c>
 80177e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80177ec:	9b02      	ldr	r3, [sp, #8]
 80177ee:	b963      	cbnz	r3, 801780a <_dtoa_r+0x8f2>
 80177f0:	4639      	mov	r1, r7
 80177f2:	2205      	movs	r2, #5
 80177f4:	4620      	mov	r0, r4
 80177f6:	f000 fd43 	bl	8018280 <__multadd>
 80177fa:	4601      	mov	r1, r0
 80177fc:	4607      	mov	r7, r0
 80177fe:	9804      	ldr	r0, [sp, #16]
 8017800:	f000 ff46 	bl	8018690 <__mcmp>
 8017804:	2800      	cmp	r0, #0
 8017806:	f73f adcc 	bgt.w	80173a2 <_dtoa_r+0x48a>
 801780a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801780c:	465d      	mov	r5, fp
 801780e:	ea6f 0a03 	mvn.w	sl, r3
 8017812:	f04f 0900 	mov.w	r9, #0
 8017816:	4639      	mov	r1, r7
 8017818:	4620      	mov	r0, r4
 801781a:	f000 fd1a 	bl	8018252 <_Bfree>
 801781e:	2e00      	cmp	r6, #0
 8017820:	f43f aeb7 	beq.w	8017592 <_dtoa_r+0x67a>
 8017824:	f1b9 0f00 	cmp.w	r9, #0
 8017828:	d005      	beq.n	8017836 <_dtoa_r+0x91e>
 801782a:	45b1      	cmp	r9, r6
 801782c:	d003      	beq.n	8017836 <_dtoa_r+0x91e>
 801782e:	4649      	mov	r1, r9
 8017830:	4620      	mov	r0, r4
 8017832:	f000 fd0e 	bl	8018252 <_Bfree>
 8017836:	4631      	mov	r1, r6
 8017838:	4620      	mov	r0, r4
 801783a:	f000 fd0a 	bl	8018252 <_Bfree>
 801783e:	e6a8      	b.n	8017592 <_dtoa_r+0x67a>
 8017840:	2700      	movs	r7, #0
 8017842:	463e      	mov	r6, r7
 8017844:	e7e1      	b.n	801780a <_dtoa_r+0x8f2>
 8017846:	f8dd a020 	ldr.w	sl, [sp, #32]
 801784a:	463e      	mov	r6, r7
 801784c:	e5a9      	b.n	80173a2 <_dtoa_r+0x48a>
 801784e:	bf00      	nop
 8017850:	40240000 	.word	0x40240000
 8017854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017856:	f8cd 9008 	str.w	r9, [sp, #8]
 801785a:	2b00      	cmp	r3, #0
 801785c:	f000 80fa 	beq.w	8017a54 <_dtoa_r+0xb3c>
 8017860:	2d00      	cmp	r5, #0
 8017862:	dd05      	ble.n	8017870 <_dtoa_r+0x958>
 8017864:	4631      	mov	r1, r6
 8017866:	462a      	mov	r2, r5
 8017868:	4620      	mov	r0, r4
 801786a:	f000 febd 	bl	80185e8 <__lshift>
 801786e:	4606      	mov	r6, r0
 8017870:	9b07      	ldr	r3, [sp, #28]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d04c      	beq.n	8017910 <_dtoa_r+0x9f8>
 8017876:	6871      	ldr	r1, [r6, #4]
 8017878:	4620      	mov	r0, r4
 801787a:	f000 fcb6 	bl	80181ea <_Balloc>
 801787e:	6932      	ldr	r2, [r6, #16]
 8017880:	3202      	adds	r2, #2
 8017882:	4605      	mov	r5, r0
 8017884:	0092      	lsls	r2, r2, #2
 8017886:	f106 010c 	add.w	r1, r6, #12
 801788a:	300c      	adds	r0, #12
 801788c:	f7fc fae6 	bl	8013e5c <memcpy>
 8017890:	2201      	movs	r2, #1
 8017892:	4629      	mov	r1, r5
 8017894:	4620      	mov	r0, r4
 8017896:	f000 fea7 	bl	80185e8 <__lshift>
 801789a:	9b00      	ldr	r3, [sp, #0]
 801789c:	f8cd b014 	str.w	fp, [sp, #20]
 80178a0:	f003 0301 	and.w	r3, r3, #1
 80178a4:	46b1      	mov	r9, r6
 80178a6:	9307      	str	r3, [sp, #28]
 80178a8:	4606      	mov	r6, r0
 80178aa:	4639      	mov	r1, r7
 80178ac:	9804      	ldr	r0, [sp, #16]
 80178ae:	f7ff faa7 	bl	8016e00 <quorem>
 80178b2:	4649      	mov	r1, r9
 80178b4:	4605      	mov	r5, r0
 80178b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80178ba:	9804      	ldr	r0, [sp, #16]
 80178bc:	f000 fee8 	bl	8018690 <__mcmp>
 80178c0:	4632      	mov	r2, r6
 80178c2:	9000      	str	r0, [sp, #0]
 80178c4:	4639      	mov	r1, r7
 80178c6:	4620      	mov	r0, r4
 80178c8:	f000 fefc 	bl	80186c4 <__mdiff>
 80178cc:	68c3      	ldr	r3, [r0, #12]
 80178ce:	4602      	mov	r2, r0
 80178d0:	bb03      	cbnz	r3, 8017914 <_dtoa_r+0x9fc>
 80178d2:	4601      	mov	r1, r0
 80178d4:	9008      	str	r0, [sp, #32]
 80178d6:	9804      	ldr	r0, [sp, #16]
 80178d8:	f000 feda 	bl	8018690 <__mcmp>
 80178dc:	9a08      	ldr	r2, [sp, #32]
 80178de:	4603      	mov	r3, r0
 80178e0:	4611      	mov	r1, r2
 80178e2:	4620      	mov	r0, r4
 80178e4:	9308      	str	r3, [sp, #32]
 80178e6:	f000 fcb4 	bl	8018252 <_Bfree>
 80178ea:	9b08      	ldr	r3, [sp, #32]
 80178ec:	b9a3      	cbnz	r3, 8017918 <_dtoa_r+0xa00>
 80178ee:	9a06      	ldr	r2, [sp, #24]
 80178f0:	b992      	cbnz	r2, 8017918 <_dtoa_r+0xa00>
 80178f2:	9a07      	ldr	r2, [sp, #28]
 80178f4:	b982      	cbnz	r2, 8017918 <_dtoa_r+0xa00>
 80178f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80178fa:	d029      	beq.n	8017950 <_dtoa_r+0xa38>
 80178fc:	9b00      	ldr	r3, [sp, #0]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	dd01      	ble.n	8017906 <_dtoa_r+0x9ee>
 8017902:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017906:	9b05      	ldr	r3, [sp, #20]
 8017908:	1c5d      	adds	r5, r3, #1
 801790a:	f883 8000 	strb.w	r8, [r3]
 801790e:	e782      	b.n	8017816 <_dtoa_r+0x8fe>
 8017910:	4630      	mov	r0, r6
 8017912:	e7c2      	b.n	801789a <_dtoa_r+0x982>
 8017914:	2301      	movs	r3, #1
 8017916:	e7e3      	b.n	80178e0 <_dtoa_r+0x9c8>
 8017918:	9a00      	ldr	r2, [sp, #0]
 801791a:	2a00      	cmp	r2, #0
 801791c:	db04      	blt.n	8017928 <_dtoa_r+0xa10>
 801791e:	d125      	bne.n	801796c <_dtoa_r+0xa54>
 8017920:	9a06      	ldr	r2, [sp, #24]
 8017922:	bb1a      	cbnz	r2, 801796c <_dtoa_r+0xa54>
 8017924:	9a07      	ldr	r2, [sp, #28]
 8017926:	bb0a      	cbnz	r2, 801796c <_dtoa_r+0xa54>
 8017928:	2b00      	cmp	r3, #0
 801792a:	ddec      	ble.n	8017906 <_dtoa_r+0x9ee>
 801792c:	2201      	movs	r2, #1
 801792e:	9904      	ldr	r1, [sp, #16]
 8017930:	4620      	mov	r0, r4
 8017932:	f000 fe59 	bl	80185e8 <__lshift>
 8017936:	4639      	mov	r1, r7
 8017938:	9004      	str	r0, [sp, #16]
 801793a:	f000 fea9 	bl	8018690 <__mcmp>
 801793e:	2800      	cmp	r0, #0
 8017940:	dc03      	bgt.n	801794a <_dtoa_r+0xa32>
 8017942:	d1e0      	bne.n	8017906 <_dtoa_r+0x9ee>
 8017944:	f018 0f01 	tst.w	r8, #1
 8017948:	d0dd      	beq.n	8017906 <_dtoa_r+0x9ee>
 801794a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801794e:	d1d8      	bne.n	8017902 <_dtoa_r+0x9ea>
 8017950:	9b05      	ldr	r3, [sp, #20]
 8017952:	9a05      	ldr	r2, [sp, #20]
 8017954:	1c5d      	adds	r5, r3, #1
 8017956:	2339      	movs	r3, #57	; 0x39
 8017958:	7013      	strb	r3, [r2, #0]
 801795a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801795e:	2b39      	cmp	r3, #57	; 0x39
 8017960:	f105 32ff 	add.w	r2, r5, #4294967295
 8017964:	d04f      	beq.n	8017a06 <_dtoa_r+0xaee>
 8017966:	3301      	adds	r3, #1
 8017968:	7013      	strb	r3, [r2, #0]
 801796a:	e754      	b.n	8017816 <_dtoa_r+0x8fe>
 801796c:	9a05      	ldr	r2, [sp, #20]
 801796e:	2b00      	cmp	r3, #0
 8017970:	f102 0501 	add.w	r5, r2, #1
 8017974:	dd06      	ble.n	8017984 <_dtoa_r+0xa6c>
 8017976:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801797a:	d0e9      	beq.n	8017950 <_dtoa_r+0xa38>
 801797c:	f108 0801 	add.w	r8, r8, #1
 8017980:	9b05      	ldr	r3, [sp, #20]
 8017982:	e7c2      	b.n	801790a <_dtoa_r+0x9f2>
 8017984:	9a02      	ldr	r2, [sp, #8]
 8017986:	f805 8c01 	strb.w	r8, [r5, #-1]
 801798a:	eba5 030b 	sub.w	r3, r5, fp
 801798e:	4293      	cmp	r3, r2
 8017990:	d021      	beq.n	80179d6 <_dtoa_r+0xabe>
 8017992:	2300      	movs	r3, #0
 8017994:	220a      	movs	r2, #10
 8017996:	9904      	ldr	r1, [sp, #16]
 8017998:	4620      	mov	r0, r4
 801799a:	f000 fc71 	bl	8018280 <__multadd>
 801799e:	45b1      	cmp	r9, r6
 80179a0:	9004      	str	r0, [sp, #16]
 80179a2:	f04f 0300 	mov.w	r3, #0
 80179a6:	f04f 020a 	mov.w	r2, #10
 80179aa:	4649      	mov	r1, r9
 80179ac:	4620      	mov	r0, r4
 80179ae:	d105      	bne.n	80179bc <_dtoa_r+0xaa4>
 80179b0:	f000 fc66 	bl	8018280 <__multadd>
 80179b4:	4681      	mov	r9, r0
 80179b6:	4606      	mov	r6, r0
 80179b8:	9505      	str	r5, [sp, #20]
 80179ba:	e776      	b.n	80178aa <_dtoa_r+0x992>
 80179bc:	f000 fc60 	bl	8018280 <__multadd>
 80179c0:	4631      	mov	r1, r6
 80179c2:	4681      	mov	r9, r0
 80179c4:	2300      	movs	r3, #0
 80179c6:	220a      	movs	r2, #10
 80179c8:	4620      	mov	r0, r4
 80179ca:	f000 fc59 	bl	8018280 <__multadd>
 80179ce:	4606      	mov	r6, r0
 80179d0:	e7f2      	b.n	80179b8 <_dtoa_r+0xaa0>
 80179d2:	f04f 0900 	mov.w	r9, #0
 80179d6:	2201      	movs	r2, #1
 80179d8:	9904      	ldr	r1, [sp, #16]
 80179da:	4620      	mov	r0, r4
 80179dc:	f000 fe04 	bl	80185e8 <__lshift>
 80179e0:	4639      	mov	r1, r7
 80179e2:	9004      	str	r0, [sp, #16]
 80179e4:	f000 fe54 	bl	8018690 <__mcmp>
 80179e8:	2800      	cmp	r0, #0
 80179ea:	dcb6      	bgt.n	801795a <_dtoa_r+0xa42>
 80179ec:	d102      	bne.n	80179f4 <_dtoa_r+0xadc>
 80179ee:	f018 0f01 	tst.w	r8, #1
 80179f2:	d1b2      	bne.n	801795a <_dtoa_r+0xa42>
 80179f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80179f8:	2b30      	cmp	r3, #48	; 0x30
 80179fa:	f105 32ff 	add.w	r2, r5, #4294967295
 80179fe:	f47f af0a 	bne.w	8017816 <_dtoa_r+0x8fe>
 8017a02:	4615      	mov	r5, r2
 8017a04:	e7f6      	b.n	80179f4 <_dtoa_r+0xadc>
 8017a06:	4593      	cmp	fp, r2
 8017a08:	d105      	bne.n	8017a16 <_dtoa_r+0xafe>
 8017a0a:	2331      	movs	r3, #49	; 0x31
 8017a0c:	f10a 0a01 	add.w	sl, sl, #1
 8017a10:	f88b 3000 	strb.w	r3, [fp]
 8017a14:	e6ff      	b.n	8017816 <_dtoa_r+0x8fe>
 8017a16:	4615      	mov	r5, r2
 8017a18:	e79f      	b.n	801795a <_dtoa_r+0xa42>
 8017a1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017a80 <_dtoa_r+0xb68>
 8017a1e:	e007      	b.n	8017a30 <_dtoa_r+0xb18>
 8017a20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a22:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017a84 <_dtoa_r+0xb6c>
 8017a26:	b11b      	cbz	r3, 8017a30 <_dtoa_r+0xb18>
 8017a28:	f10b 0308 	add.w	r3, fp, #8
 8017a2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017a2e:	6013      	str	r3, [r2, #0]
 8017a30:	4658      	mov	r0, fp
 8017a32:	b017      	add	sp, #92	; 0x5c
 8017a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a38:	9b06      	ldr	r3, [sp, #24]
 8017a3a:	2b01      	cmp	r3, #1
 8017a3c:	f77f ae35 	ble.w	80176aa <_dtoa_r+0x792>
 8017a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a42:	9307      	str	r3, [sp, #28]
 8017a44:	e649      	b.n	80176da <_dtoa_r+0x7c2>
 8017a46:	9b02      	ldr	r3, [sp, #8]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	dc03      	bgt.n	8017a54 <_dtoa_r+0xb3c>
 8017a4c:	9b06      	ldr	r3, [sp, #24]
 8017a4e:	2b02      	cmp	r3, #2
 8017a50:	f73f aecc 	bgt.w	80177ec <_dtoa_r+0x8d4>
 8017a54:	465d      	mov	r5, fp
 8017a56:	4639      	mov	r1, r7
 8017a58:	9804      	ldr	r0, [sp, #16]
 8017a5a:	f7ff f9d1 	bl	8016e00 <quorem>
 8017a5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017a62:	f805 8b01 	strb.w	r8, [r5], #1
 8017a66:	9a02      	ldr	r2, [sp, #8]
 8017a68:	eba5 030b 	sub.w	r3, r5, fp
 8017a6c:	429a      	cmp	r2, r3
 8017a6e:	ddb0      	ble.n	80179d2 <_dtoa_r+0xaba>
 8017a70:	2300      	movs	r3, #0
 8017a72:	220a      	movs	r2, #10
 8017a74:	9904      	ldr	r1, [sp, #16]
 8017a76:	4620      	mov	r0, r4
 8017a78:	f000 fc02 	bl	8018280 <__multadd>
 8017a7c:	9004      	str	r0, [sp, #16]
 8017a7e:	e7ea      	b.n	8017a56 <_dtoa_r+0xb3e>
 8017a80:	080192ba 	.word	0x080192ba
 8017a84:	08019310 	.word	0x08019310

08017a88 <_fstat_r>:
 8017a88:	b538      	push	{r3, r4, r5, lr}
 8017a8a:	4c07      	ldr	r4, [pc, #28]	; (8017aa8 <_fstat_r+0x20>)
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	4605      	mov	r5, r0
 8017a90:	4608      	mov	r0, r1
 8017a92:	4611      	mov	r1, r2
 8017a94:	6023      	str	r3, [r4, #0]
 8017a96:	f7f5 fd1c 	bl	800d4d2 <_fstat>
 8017a9a:	1c43      	adds	r3, r0, #1
 8017a9c:	d102      	bne.n	8017aa4 <_fstat_r+0x1c>
 8017a9e:	6823      	ldr	r3, [r4, #0]
 8017aa0:	b103      	cbz	r3, 8017aa4 <_fstat_r+0x1c>
 8017aa2:	602b      	str	r3, [r5, #0]
 8017aa4:	bd38      	pop	{r3, r4, r5, pc}
 8017aa6:	bf00      	nop
 8017aa8:	20008f4c 	.word	0x20008f4c

08017aac <rshift>:
 8017aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017aae:	6906      	ldr	r6, [r0, #16]
 8017ab0:	114b      	asrs	r3, r1, #5
 8017ab2:	429e      	cmp	r6, r3
 8017ab4:	f100 0414 	add.w	r4, r0, #20
 8017ab8:	dd30      	ble.n	8017b1c <rshift+0x70>
 8017aba:	f011 011f 	ands.w	r1, r1, #31
 8017abe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017ac2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017ac6:	d108      	bne.n	8017ada <rshift+0x2e>
 8017ac8:	4621      	mov	r1, r4
 8017aca:	42b2      	cmp	r2, r6
 8017acc:	460b      	mov	r3, r1
 8017ace:	d211      	bcs.n	8017af4 <rshift+0x48>
 8017ad0:	f852 3b04 	ldr.w	r3, [r2], #4
 8017ad4:	f841 3b04 	str.w	r3, [r1], #4
 8017ad8:	e7f7      	b.n	8017aca <rshift+0x1e>
 8017ada:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017ade:	f1c1 0c20 	rsb	ip, r1, #32
 8017ae2:	40cd      	lsrs	r5, r1
 8017ae4:	3204      	adds	r2, #4
 8017ae6:	4623      	mov	r3, r4
 8017ae8:	42b2      	cmp	r2, r6
 8017aea:	4617      	mov	r7, r2
 8017aec:	d30c      	bcc.n	8017b08 <rshift+0x5c>
 8017aee:	601d      	str	r5, [r3, #0]
 8017af0:	b105      	cbz	r5, 8017af4 <rshift+0x48>
 8017af2:	3304      	adds	r3, #4
 8017af4:	1b1a      	subs	r2, r3, r4
 8017af6:	42a3      	cmp	r3, r4
 8017af8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017afc:	bf08      	it	eq
 8017afe:	2300      	moveq	r3, #0
 8017b00:	6102      	str	r2, [r0, #16]
 8017b02:	bf08      	it	eq
 8017b04:	6143      	streq	r3, [r0, #20]
 8017b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b08:	683f      	ldr	r7, [r7, #0]
 8017b0a:	fa07 f70c 	lsl.w	r7, r7, ip
 8017b0e:	433d      	orrs	r5, r7
 8017b10:	f843 5b04 	str.w	r5, [r3], #4
 8017b14:	f852 5b04 	ldr.w	r5, [r2], #4
 8017b18:	40cd      	lsrs	r5, r1
 8017b1a:	e7e5      	b.n	8017ae8 <rshift+0x3c>
 8017b1c:	4623      	mov	r3, r4
 8017b1e:	e7e9      	b.n	8017af4 <rshift+0x48>

08017b20 <__hexdig_fun>:
 8017b20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017b24:	2b09      	cmp	r3, #9
 8017b26:	d802      	bhi.n	8017b2e <__hexdig_fun+0xe>
 8017b28:	3820      	subs	r0, #32
 8017b2a:	b2c0      	uxtb	r0, r0
 8017b2c:	4770      	bx	lr
 8017b2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017b32:	2b05      	cmp	r3, #5
 8017b34:	d801      	bhi.n	8017b3a <__hexdig_fun+0x1a>
 8017b36:	3847      	subs	r0, #71	; 0x47
 8017b38:	e7f7      	b.n	8017b2a <__hexdig_fun+0xa>
 8017b3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017b3e:	2b05      	cmp	r3, #5
 8017b40:	d801      	bhi.n	8017b46 <__hexdig_fun+0x26>
 8017b42:	3827      	subs	r0, #39	; 0x27
 8017b44:	e7f1      	b.n	8017b2a <__hexdig_fun+0xa>
 8017b46:	2000      	movs	r0, #0
 8017b48:	4770      	bx	lr

08017b4a <__gethex>:
 8017b4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b4e:	b08b      	sub	sp, #44	; 0x2c
 8017b50:	468a      	mov	sl, r1
 8017b52:	9002      	str	r0, [sp, #8]
 8017b54:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017b56:	9306      	str	r3, [sp, #24]
 8017b58:	4690      	mov	r8, r2
 8017b5a:	f000 faef 	bl	801813c <__localeconv_l>
 8017b5e:	6803      	ldr	r3, [r0, #0]
 8017b60:	9303      	str	r3, [sp, #12]
 8017b62:	4618      	mov	r0, r3
 8017b64:	f7f0 fa6c 	bl	8008040 <strlen>
 8017b68:	9b03      	ldr	r3, [sp, #12]
 8017b6a:	9001      	str	r0, [sp, #4]
 8017b6c:	4403      	add	r3, r0
 8017b6e:	f04f 0b00 	mov.w	fp, #0
 8017b72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017b76:	9307      	str	r3, [sp, #28]
 8017b78:	f8da 3000 	ldr.w	r3, [sl]
 8017b7c:	3302      	adds	r3, #2
 8017b7e:	461f      	mov	r7, r3
 8017b80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017b84:	2830      	cmp	r0, #48	; 0x30
 8017b86:	d06c      	beq.n	8017c62 <__gethex+0x118>
 8017b88:	f7ff ffca 	bl	8017b20 <__hexdig_fun>
 8017b8c:	4604      	mov	r4, r0
 8017b8e:	2800      	cmp	r0, #0
 8017b90:	d16a      	bne.n	8017c68 <__gethex+0x11e>
 8017b92:	9a01      	ldr	r2, [sp, #4]
 8017b94:	9903      	ldr	r1, [sp, #12]
 8017b96:	4638      	mov	r0, r7
 8017b98:	f001 f8f4 	bl	8018d84 <strncmp>
 8017b9c:	2800      	cmp	r0, #0
 8017b9e:	d166      	bne.n	8017c6e <__gethex+0x124>
 8017ba0:	9b01      	ldr	r3, [sp, #4]
 8017ba2:	5cf8      	ldrb	r0, [r7, r3]
 8017ba4:	18fe      	adds	r6, r7, r3
 8017ba6:	f7ff ffbb 	bl	8017b20 <__hexdig_fun>
 8017baa:	2800      	cmp	r0, #0
 8017bac:	d062      	beq.n	8017c74 <__gethex+0x12a>
 8017bae:	4633      	mov	r3, r6
 8017bb0:	7818      	ldrb	r0, [r3, #0]
 8017bb2:	2830      	cmp	r0, #48	; 0x30
 8017bb4:	461f      	mov	r7, r3
 8017bb6:	f103 0301 	add.w	r3, r3, #1
 8017bba:	d0f9      	beq.n	8017bb0 <__gethex+0x66>
 8017bbc:	f7ff ffb0 	bl	8017b20 <__hexdig_fun>
 8017bc0:	fab0 f580 	clz	r5, r0
 8017bc4:	096d      	lsrs	r5, r5, #5
 8017bc6:	4634      	mov	r4, r6
 8017bc8:	f04f 0b01 	mov.w	fp, #1
 8017bcc:	463a      	mov	r2, r7
 8017bce:	4616      	mov	r6, r2
 8017bd0:	3201      	adds	r2, #1
 8017bd2:	7830      	ldrb	r0, [r6, #0]
 8017bd4:	f7ff ffa4 	bl	8017b20 <__hexdig_fun>
 8017bd8:	2800      	cmp	r0, #0
 8017bda:	d1f8      	bne.n	8017bce <__gethex+0x84>
 8017bdc:	9a01      	ldr	r2, [sp, #4]
 8017bde:	9903      	ldr	r1, [sp, #12]
 8017be0:	4630      	mov	r0, r6
 8017be2:	f001 f8cf 	bl	8018d84 <strncmp>
 8017be6:	b950      	cbnz	r0, 8017bfe <__gethex+0xb4>
 8017be8:	b954      	cbnz	r4, 8017c00 <__gethex+0xb6>
 8017bea:	9b01      	ldr	r3, [sp, #4]
 8017bec:	18f4      	adds	r4, r6, r3
 8017bee:	4622      	mov	r2, r4
 8017bf0:	4616      	mov	r6, r2
 8017bf2:	3201      	adds	r2, #1
 8017bf4:	7830      	ldrb	r0, [r6, #0]
 8017bf6:	f7ff ff93 	bl	8017b20 <__hexdig_fun>
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	d1f8      	bne.n	8017bf0 <__gethex+0xa6>
 8017bfe:	b10c      	cbz	r4, 8017c04 <__gethex+0xba>
 8017c00:	1ba4      	subs	r4, r4, r6
 8017c02:	00a4      	lsls	r4, r4, #2
 8017c04:	7833      	ldrb	r3, [r6, #0]
 8017c06:	2b50      	cmp	r3, #80	; 0x50
 8017c08:	d001      	beq.n	8017c0e <__gethex+0xc4>
 8017c0a:	2b70      	cmp	r3, #112	; 0x70
 8017c0c:	d140      	bne.n	8017c90 <__gethex+0x146>
 8017c0e:	7873      	ldrb	r3, [r6, #1]
 8017c10:	2b2b      	cmp	r3, #43	; 0x2b
 8017c12:	d031      	beq.n	8017c78 <__gethex+0x12e>
 8017c14:	2b2d      	cmp	r3, #45	; 0x2d
 8017c16:	d033      	beq.n	8017c80 <__gethex+0x136>
 8017c18:	1c71      	adds	r1, r6, #1
 8017c1a:	f04f 0900 	mov.w	r9, #0
 8017c1e:	7808      	ldrb	r0, [r1, #0]
 8017c20:	f7ff ff7e 	bl	8017b20 <__hexdig_fun>
 8017c24:	1e43      	subs	r3, r0, #1
 8017c26:	b2db      	uxtb	r3, r3
 8017c28:	2b18      	cmp	r3, #24
 8017c2a:	d831      	bhi.n	8017c90 <__gethex+0x146>
 8017c2c:	f1a0 0210 	sub.w	r2, r0, #16
 8017c30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017c34:	f7ff ff74 	bl	8017b20 <__hexdig_fun>
 8017c38:	1e43      	subs	r3, r0, #1
 8017c3a:	b2db      	uxtb	r3, r3
 8017c3c:	2b18      	cmp	r3, #24
 8017c3e:	d922      	bls.n	8017c86 <__gethex+0x13c>
 8017c40:	f1b9 0f00 	cmp.w	r9, #0
 8017c44:	d000      	beq.n	8017c48 <__gethex+0xfe>
 8017c46:	4252      	negs	r2, r2
 8017c48:	4414      	add	r4, r2
 8017c4a:	f8ca 1000 	str.w	r1, [sl]
 8017c4e:	b30d      	cbz	r5, 8017c94 <__gethex+0x14a>
 8017c50:	f1bb 0f00 	cmp.w	fp, #0
 8017c54:	bf0c      	ite	eq
 8017c56:	2706      	moveq	r7, #6
 8017c58:	2700      	movne	r7, #0
 8017c5a:	4638      	mov	r0, r7
 8017c5c:	b00b      	add	sp, #44	; 0x2c
 8017c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c62:	f10b 0b01 	add.w	fp, fp, #1
 8017c66:	e78a      	b.n	8017b7e <__gethex+0x34>
 8017c68:	2500      	movs	r5, #0
 8017c6a:	462c      	mov	r4, r5
 8017c6c:	e7ae      	b.n	8017bcc <__gethex+0x82>
 8017c6e:	463e      	mov	r6, r7
 8017c70:	2501      	movs	r5, #1
 8017c72:	e7c7      	b.n	8017c04 <__gethex+0xba>
 8017c74:	4604      	mov	r4, r0
 8017c76:	e7fb      	b.n	8017c70 <__gethex+0x126>
 8017c78:	f04f 0900 	mov.w	r9, #0
 8017c7c:	1cb1      	adds	r1, r6, #2
 8017c7e:	e7ce      	b.n	8017c1e <__gethex+0xd4>
 8017c80:	f04f 0901 	mov.w	r9, #1
 8017c84:	e7fa      	b.n	8017c7c <__gethex+0x132>
 8017c86:	230a      	movs	r3, #10
 8017c88:	fb03 0202 	mla	r2, r3, r2, r0
 8017c8c:	3a10      	subs	r2, #16
 8017c8e:	e7cf      	b.n	8017c30 <__gethex+0xe6>
 8017c90:	4631      	mov	r1, r6
 8017c92:	e7da      	b.n	8017c4a <__gethex+0x100>
 8017c94:	1bf3      	subs	r3, r6, r7
 8017c96:	3b01      	subs	r3, #1
 8017c98:	4629      	mov	r1, r5
 8017c9a:	2b07      	cmp	r3, #7
 8017c9c:	dc49      	bgt.n	8017d32 <__gethex+0x1e8>
 8017c9e:	9802      	ldr	r0, [sp, #8]
 8017ca0:	f000 faa3 	bl	80181ea <_Balloc>
 8017ca4:	9b01      	ldr	r3, [sp, #4]
 8017ca6:	f100 0914 	add.w	r9, r0, #20
 8017caa:	f04f 0b00 	mov.w	fp, #0
 8017cae:	f1c3 0301 	rsb	r3, r3, #1
 8017cb2:	4605      	mov	r5, r0
 8017cb4:	f8cd 9010 	str.w	r9, [sp, #16]
 8017cb8:	46da      	mov	sl, fp
 8017cba:	9308      	str	r3, [sp, #32]
 8017cbc:	42b7      	cmp	r7, r6
 8017cbe:	d33b      	bcc.n	8017d38 <__gethex+0x1ee>
 8017cc0:	9804      	ldr	r0, [sp, #16]
 8017cc2:	f840 ab04 	str.w	sl, [r0], #4
 8017cc6:	eba0 0009 	sub.w	r0, r0, r9
 8017cca:	1080      	asrs	r0, r0, #2
 8017ccc:	6128      	str	r0, [r5, #16]
 8017cce:	0147      	lsls	r7, r0, #5
 8017cd0:	4650      	mov	r0, sl
 8017cd2:	f000 fb4e 	bl	8018372 <__hi0bits>
 8017cd6:	f8d8 6000 	ldr.w	r6, [r8]
 8017cda:	1a3f      	subs	r7, r7, r0
 8017cdc:	42b7      	cmp	r7, r6
 8017cde:	dd64      	ble.n	8017daa <__gethex+0x260>
 8017ce0:	1bbf      	subs	r7, r7, r6
 8017ce2:	4639      	mov	r1, r7
 8017ce4:	4628      	mov	r0, r5
 8017ce6:	f000 fe5d 	bl	80189a4 <__any_on>
 8017cea:	4682      	mov	sl, r0
 8017cec:	b178      	cbz	r0, 8017d0e <__gethex+0x1c4>
 8017cee:	1e7b      	subs	r3, r7, #1
 8017cf0:	1159      	asrs	r1, r3, #5
 8017cf2:	f003 021f 	and.w	r2, r3, #31
 8017cf6:	f04f 0a01 	mov.w	sl, #1
 8017cfa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017cfe:	fa0a f202 	lsl.w	r2, sl, r2
 8017d02:	420a      	tst	r2, r1
 8017d04:	d003      	beq.n	8017d0e <__gethex+0x1c4>
 8017d06:	4553      	cmp	r3, sl
 8017d08:	dc46      	bgt.n	8017d98 <__gethex+0x24e>
 8017d0a:	f04f 0a02 	mov.w	sl, #2
 8017d0e:	4639      	mov	r1, r7
 8017d10:	4628      	mov	r0, r5
 8017d12:	f7ff fecb 	bl	8017aac <rshift>
 8017d16:	443c      	add	r4, r7
 8017d18:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017d1c:	42a3      	cmp	r3, r4
 8017d1e:	da52      	bge.n	8017dc6 <__gethex+0x27c>
 8017d20:	4629      	mov	r1, r5
 8017d22:	9802      	ldr	r0, [sp, #8]
 8017d24:	f000 fa95 	bl	8018252 <_Bfree>
 8017d28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	6013      	str	r3, [r2, #0]
 8017d2e:	27a3      	movs	r7, #163	; 0xa3
 8017d30:	e793      	b.n	8017c5a <__gethex+0x110>
 8017d32:	3101      	adds	r1, #1
 8017d34:	105b      	asrs	r3, r3, #1
 8017d36:	e7b0      	b.n	8017c9a <__gethex+0x150>
 8017d38:	1e73      	subs	r3, r6, #1
 8017d3a:	9305      	str	r3, [sp, #20]
 8017d3c:	9a07      	ldr	r2, [sp, #28]
 8017d3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017d42:	4293      	cmp	r3, r2
 8017d44:	d018      	beq.n	8017d78 <__gethex+0x22e>
 8017d46:	f1bb 0f20 	cmp.w	fp, #32
 8017d4a:	d107      	bne.n	8017d5c <__gethex+0x212>
 8017d4c:	9b04      	ldr	r3, [sp, #16]
 8017d4e:	f8c3 a000 	str.w	sl, [r3]
 8017d52:	3304      	adds	r3, #4
 8017d54:	f04f 0a00 	mov.w	sl, #0
 8017d58:	9304      	str	r3, [sp, #16]
 8017d5a:	46d3      	mov	fp, sl
 8017d5c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017d60:	f7ff fede 	bl	8017b20 <__hexdig_fun>
 8017d64:	f000 000f 	and.w	r0, r0, #15
 8017d68:	fa00 f00b 	lsl.w	r0, r0, fp
 8017d6c:	ea4a 0a00 	orr.w	sl, sl, r0
 8017d70:	f10b 0b04 	add.w	fp, fp, #4
 8017d74:	9b05      	ldr	r3, [sp, #20]
 8017d76:	e00d      	b.n	8017d94 <__gethex+0x24a>
 8017d78:	9b05      	ldr	r3, [sp, #20]
 8017d7a:	9a08      	ldr	r2, [sp, #32]
 8017d7c:	4413      	add	r3, r2
 8017d7e:	42bb      	cmp	r3, r7
 8017d80:	d3e1      	bcc.n	8017d46 <__gethex+0x1fc>
 8017d82:	4618      	mov	r0, r3
 8017d84:	9a01      	ldr	r2, [sp, #4]
 8017d86:	9903      	ldr	r1, [sp, #12]
 8017d88:	9309      	str	r3, [sp, #36]	; 0x24
 8017d8a:	f000 fffb 	bl	8018d84 <strncmp>
 8017d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d90:	2800      	cmp	r0, #0
 8017d92:	d1d8      	bne.n	8017d46 <__gethex+0x1fc>
 8017d94:	461e      	mov	r6, r3
 8017d96:	e791      	b.n	8017cbc <__gethex+0x172>
 8017d98:	1eb9      	subs	r1, r7, #2
 8017d9a:	4628      	mov	r0, r5
 8017d9c:	f000 fe02 	bl	80189a4 <__any_on>
 8017da0:	2800      	cmp	r0, #0
 8017da2:	d0b2      	beq.n	8017d0a <__gethex+0x1c0>
 8017da4:	f04f 0a03 	mov.w	sl, #3
 8017da8:	e7b1      	b.n	8017d0e <__gethex+0x1c4>
 8017daa:	da09      	bge.n	8017dc0 <__gethex+0x276>
 8017dac:	1bf7      	subs	r7, r6, r7
 8017dae:	4629      	mov	r1, r5
 8017db0:	463a      	mov	r2, r7
 8017db2:	9802      	ldr	r0, [sp, #8]
 8017db4:	f000 fc18 	bl	80185e8 <__lshift>
 8017db8:	1be4      	subs	r4, r4, r7
 8017dba:	4605      	mov	r5, r0
 8017dbc:	f100 0914 	add.w	r9, r0, #20
 8017dc0:	f04f 0a00 	mov.w	sl, #0
 8017dc4:	e7a8      	b.n	8017d18 <__gethex+0x1ce>
 8017dc6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017dca:	42a0      	cmp	r0, r4
 8017dcc:	dd6a      	ble.n	8017ea4 <__gethex+0x35a>
 8017dce:	1b04      	subs	r4, r0, r4
 8017dd0:	42a6      	cmp	r6, r4
 8017dd2:	dc2e      	bgt.n	8017e32 <__gethex+0x2e8>
 8017dd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017dd8:	2b02      	cmp	r3, #2
 8017dda:	d022      	beq.n	8017e22 <__gethex+0x2d8>
 8017ddc:	2b03      	cmp	r3, #3
 8017dde:	d024      	beq.n	8017e2a <__gethex+0x2e0>
 8017de0:	2b01      	cmp	r3, #1
 8017de2:	d115      	bne.n	8017e10 <__gethex+0x2c6>
 8017de4:	42a6      	cmp	r6, r4
 8017de6:	d113      	bne.n	8017e10 <__gethex+0x2c6>
 8017de8:	2e01      	cmp	r6, #1
 8017dea:	dc0b      	bgt.n	8017e04 <__gethex+0x2ba>
 8017dec:	9a06      	ldr	r2, [sp, #24]
 8017dee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017df2:	6013      	str	r3, [r2, #0]
 8017df4:	2301      	movs	r3, #1
 8017df6:	612b      	str	r3, [r5, #16]
 8017df8:	f8c9 3000 	str.w	r3, [r9]
 8017dfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017dfe:	2762      	movs	r7, #98	; 0x62
 8017e00:	601d      	str	r5, [r3, #0]
 8017e02:	e72a      	b.n	8017c5a <__gethex+0x110>
 8017e04:	1e71      	subs	r1, r6, #1
 8017e06:	4628      	mov	r0, r5
 8017e08:	f000 fdcc 	bl	80189a4 <__any_on>
 8017e0c:	2800      	cmp	r0, #0
 8017e0e:	d1ed      	bne.n	8017dec <__gethex+0x2a2>
 8017e10:	4629      	mov	r1, r5
 8017e12:	9802      	ldr	r0, [sp, #8]
 8017e14:	f000 fa1d 	bl	8018252 <_Bfree>
 8017e18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	6013      	str	r3, [r2, #0]
 8017e1e:	2750      	movs	r7, #80	; 0x50
 8017e20:	e71b      	b.n	8017c5a <__gethex+0x110>
 8017e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d0e1      	beq.n	8017dec <__gethex+0x2a2>
 8017e28:	e7f2      	b.n	8017e10 <__gethex+0x2c6>
 8017e2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d1dd      	bne.n	8017dec <__gethex+0x2a2>
 8017e30:	e7ee      	b.n	8017e10 <__gethex+0x2c6>
 8017e32:	1e67      	subs	r7, r4, #1
 8017e34:	f1ba 0f00 	cmp.w	sl, #0
 8017e38:	d131      	bne.n	8017e9e <__gethex+0x354>
 8017e3a:	b127      	cbz	r7, 8017e46 <__gethex+0x2fc>
 8017e3c:	4639      	mov	r1, r7
 8017e3e:	4628      	mov	r0, r5
 8017e40:	f000 fdb0 	bl	80189a4 <__any_on>
 8017e44:	4682      	mov	sl, r0
 8017e46:	117a      	asrs	r2, r7, #5
 8017e48:	2301      	movs	r3, #1
 8017e4a:	f007 071f 	and.w	r7, r7, #31
 8017e4e:	fa03 f707 	lsl.w	r7, r3, r7
 8017e52:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017e56:	4621      	mov	r1, r4
 8017e58:	421f      	tst	r7, r3
 8017e5a:	4628      	mov	r0, r5
 8017e5c:	bf18      	it	ne
 8017e5e:	f04a 0a02 	orrne.w	sl, sl, #2
 8017e62:	1b36      	subs	r6, r6, r4
 8017e64:	f7ff fe22 	bl	8017aac <rshift>
 8017e68:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017e6c:	2702      	movs	r7, #2
 8017e6e:	f1ba 0f00 	cmp.w	sl, #0
 8017e72:	d048      	beq.n	8017f06 <__gethex+0x3bc>
 8017e74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017e78:	2b02      	cmp	r3, #2
 8017e7a:	d015      	beq.n	8017ea8 <__gethex+0x35e>
 8017e7c:	2b03      	cmp	r3, #3
 8017e7e:	d017      	beq.n	8017eb0 <__gethex+0x366>
 8017e80:	2b01      	cmp	r3, #1
 8017e82:	d109      	bne.n	8017e98 <__gethex+0x34e>
 8017e84:	f01a 0f02 	tst.w	sl, #2
 8017e88:	d006      	beq.n	8017e98 <__gethex+0x34e>
 8017e8a:	f8d9 3000 	ldr.w	r3, [r9]
 8017e8e:	ea4a 0a03 	orr.w	sl, sl, r3
 8017e92:	f01a 0f01 	tst.w	sl, #1
 8017e96:	d10e      	bne.n	8017eb6 <__gethex+0x36c>
 8017e98:	f047 0710 	orr.w	r7, r7, #16
 8017e9c:	e033      	b.n	8017f06 <__gethex+0x3bc>
 8017e9e:	f04f 0a01 	mov.w	sl, #1
 8017ea2:	e7d0      	b.n	8017e46 <__gethex+0x2fc>
 8017ea4:	2701      	movs	r7, #1
 8017ea6:	e7e2      	b.n	8017e6e <__gethex+0x324>
 8017ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017eaa:	f1c3 0301 	rsb	r3, r3, #1
 8017eae:	9315      	str	r3, [sp, #84]	; 0x54
 8017eb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d0f0      	beq.n	8017e98 <__gethex+0x34e>
 8017eb6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017eba:	f105 0314 	add.w	r3, r5, #20
 8017ebe:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017ec2:	eb03 010a 	add.w	r1, r3, sl
 8017ec6:	f04f 0c00 	mov.w	ip, #0
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ed0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017ed4:	d01c      	beq.n	8017f10 <__gethex+0x3c6>
 8017ed6:	3201      	adds	r2, #1
 8017ed8:	6002      	str	r2, [r0, #0]
 8017eda:	2f02      	cmp	r7, #2
 8017edc:	f105 0314 	add.w	r3, r5, #20
 8017ee0:	d138      	bne.n	8017f54 <__gethex+0x40a>
 8017ee2:	f8d8 2000 	ldr.w	r2, [r8]
 8017ee6:	3a01      	subs	r2, #1
 8017ee8:	42b2      	cmp	r2, r6
 8017eea:	d10a      	bne.n	8017f02 <__gethex+0x3b8>
 8017eec:	1171      	asrs	r1, r6, #5
 8017eee:	2201      	movs	r2, #1
 8017ef0:	f006 061f 	and.w	r6, r6, #31
 8017ef4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017ef8:	fa02 f606 	lsl.w	r6, r2, r6
 8017efc:	421e      	tst	r6, r3
 8017efe:	bf18      	it	ne
 8017f00:	4617      	movne	r7, r2
 8017f02:	f047 0720 	orr.w	r7, r7, #32
 8017f06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017f08:	601d      	str	r5, [r3, #0]
 8017f0a:	9b06      	ldr	r3, [sp, #24]
 8017f0c:	601c      	str	r4, [r3, #0]
 8017f0e:	e6a4      	b.n	8017c5a <__gethex+0x110>
 8017f10:	4299      	cmp	r1, r3
 8017f12:	f843 cc04 	str.w	ip, [r3, #-4]
 8017f16:	d8d8      	bhi.n	8017eca <__gethex+0x380>
 8017f18:	68ab      	ldr	r3, [r5, #8]
 8017f1a:	4599      	cmp	r9, r3
 8017f1c:	db12      	blt.n	8017f44 <__gethex+0x3fa>
 8017f1e:	6869      	ldr	r1, [r5, #4]
 8017f20:	9802      	ldr	r0, [sp, #8]
 8017f22:	3101      	adds	r1, #1
 8017f24:	f000 f961 	bl	80181ea <_Balloc>
 8017f28:	692a      	ldr	r2, [r5, #16]
 8017f2a:	3202      	adds	r2, #2
 8017f2c:	f105 010c 	add.w	r1, r5, #12
 8017f30:	4683      	mov	fp, r0
 8017f32:	0092      	lsls	r2, r2, #2
 8017f34:	300c      	adds	r0, #12
 8017f36:	f7fb ff91 	bl	8013e5c <memcpy>
 8017f3a:	4629      	mov	r1, r5
 8017f3c:	9802      	ldr	r0, [sp, #8]
 8017f3e:	f000 f988 	bl	8018252 <_Bfree>
 8017f42:	465d      	mov	r5, fp
 8017f44:	692b      	ldr	r3, [r5, #16]
 8017f46:	1c5a      	adds	r2, r3, #1
 8017f48:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017f4c:	612a      	str	r2, [r5, #16]
 8017f4e:	2201      	movs	r2, #1
 8017f50:	615a      	str	r2, [r3, #20]
 8017f52:	e7c2      	b.n	8017eda <__gethex+0x390>
 8017f54:	692a      	ldr	r2, [r5, #16]
 8017f56:	454a      	cmp	r2, r9
 8017f58:	dd0b      	ble.n	8017f72 <__gethex+0x428>
 8017f5a:	2101      	movs	r1, #1
 8017f5c:	4628      	mov	r0, r5
 8017f5e:	f7ff fda5 	bl	8017aac <rshift>
 8017f62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f66:	3401      	adds	r4, #1
 8017f68:	42a3      	cmp	r3, r4
 8017f6a:	f6ff aed9 	blt.w	8017d20 <__gethex+0x1d6>
 8017f6e:	2701      	movs	r7, #1
 8017f70:	e7c7      	b.n	8017f02 <__gethex+0x3b8>
 8017f72:	f016 061f 	ands.w	r6, r6, #31
 8017f76:	d0fa      	beq.n	8017f6e <__gethex+0x424>
 8017f78:	449a      	add	sl, r3
 8017f7a:	f1c6 0620 	rsb	r6, r6, #32
 8017f7e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017f82:	f000 f9f6 	bl	8018372 <__hi0bits>
 8017f86:	42b0      	cmp	r0, r6
 8017f88:	dbe7      	blt.n	8017f5a <__gethex+0x410>
 8017f8a:	e7f0      	b.n	8017f6e <__gethex+0x424>

08017f8c <L_shift>:
 8017f8c:	f1c2 0208 	rsb	r2, r2, #8
 8017f90:	0092      	lsls	r2, r2, #2
 8017f92:	b570      	push	{r4, r5, r6, lr}
 8017f94:	f1c2 0620 	rsb	r6, r2, #32
 8017f98:	6843      	ldr	r3, [r0, #4]
 8017f9a:	6804      	ldr	r4, [r0, #0]
 8017f9c:	fa03 f506 	lsl.w	r5, r3, r6
 8017fa0:	432c      	orrs	r4, r5
 8017fa2:	40d3      	lsrs	r3, r2
 8017fa4:	6004      	str	r4, [r0, #0]
 8017fa6:	f840 3f04 	str.w	r3, [r0, #4]!
 8017faa:	4288      	cmp	r0, r1
 8017fac:	d3f4      	bcc.n	8017f98 <L_shift+0xc>
 8017fae:	bd70      	pop	{r4, r5, r6, pc}

08017fb0 <__match>:
 8017fb0:	b530      	push	{r4, r5, lr}
 8017fb2:	6803      	ldr	r3, [r0, #0]
 8017fb4:	3301      	adds	r3, #1
 8017fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017fba:	b914      	cbnz	r4, 8017fc2 <__match+0x12>
 8017fbc:	6003      	str	r3, [r0, #0]
 8017fbe:	2001      	movs	r0, #1
 8017fc0:	bd30      	pop	{r4, r5, pc}
 8017fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017fca:	2d19      	cmp	r5, #25
 8017fcc:	bf98      	it	ls
 8017fce:	3220      	addls	r2, #32
 8017fd0:	42a2      	cmp	r2, r4
 8017fd2:	d0f0      	beq.n	8017fb6 <__match+0x6>
 8017fd4:	2000      	movs	r0, #0
 8017fd6:	e7f3      	b.n	8017fc0 <__match+0x10>

08017fd8 <__hexnan>:
 8017fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fdc:	680b      	ldr	r3, [r1, #0]
 8017fde:	6801      	ldr	r1, [r0, #0]
 8017fe0:	115f      	asrs	r7, r3, #5
 8017fe2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017fe6:	f013 031f 	ands.w	r3, r3, #31
 8017fea:	b087      	sub	sp, #28
 8017fec:	bf18      	it	ne
 8017fee:	3704      	addne	r7, #4
 8017ff0:	2500      	movs	r5, #0
 8017ff2:	1f3e      	subs	r6, r7, #4
 8017ff4:	4682      	mov	sl, r0
 8017ff6:	4690      	mov	r8, r2
 8017ff8:	9301      	str	r3, [sp, #4]
 8017ffa:	f847 5c04 	str.w	r5, [r7, #-4]
 8017ffe:	46b1      	mov	r9, r6
 8018000:	4634      	mov	r4, r6
 8018002:	9502      	str	r5, [sp, #8]
 8018004:	46ab      	mov	fp, r5
 8018006:	784a      	ldrb	r2, [r1, #1]
 8018008:	1c4b      	adds	r3, r1, #1
 801800a:	9303      	str	r3, [sp, #12]
 801800c:	b342      	cbz	r2, 8018060 <__hexnan+0x88>
 801800e:	4610      	mov	r0, r2
 8018010:	9105      	str	r1, [sp, #20]
 8018012:	9204      	str	r2, [sp, #16]
 8018014:	f7ff fd84 	bl	8017b20 <__hexdig_fun>
 8018018:	2800      	cmp	r0, #0
 801801a:	d143      	bne.n	80180a4 <__hexnan+0xcc>
 801801c:	9a04      	ldr	r2, [sp, #16]
 801801e:	9905      	ldr	r1, [sp, #20]
 8018020:	2a20      	cmp	r2, #32
 8018022:	d818      	bhi.n	8018056 <__hexnan+0x7e>
 8018024:	9b02      	ldr	r3, [sp, #8]
 8018026:	459b      	cmp	fp, r3
 8018028:	dd13      	ble.n	8018052 <__hexnan+0x7a>
 801802a:	454c      	cmp	r4, r9
 801802c:	d206      	bcs.n	801803c <__hexnan+0x64>
 801802e:	2d07      	cmp	r5, #7
 8018030:	dc04      	bgt.n	801803c <__hexnan+0x64>
 8018032:	462a      	mov	r2, r5
 8018034:	4649      	mov	r1, r9
 8018036:	4620      	mov	r0, r4
 8018038:	f7ff ffa8 	bl	8017f8c <L_shift>
 801803c:	4544      	cmp	r4, r8
 801803e:	d944      	bls.n	80180ca <__hexnan+0xf2>
 8018040:	2300      	movs	r3, #0
 8018042:	f1a4 0904 	sub.w	r9, r4, #4
 8018046:	f844 3c04 	str.w	r3, [r4, #-4]
 801804a:	f8cd b008 	str.w	fp, [sp, #8]
 801804e:	464c      	mov	r4, r9
 8018050:	461d      	mov	r5, r3
 8018052:	9903      	ldr	r1, [sp, #12]
 8018054:	e7d7      	b.n	8018006 <__hexnan+0x2e>
 8018056:	2a29      	cmp	r2, #41	; 0x29
 8018058:	d14a      	bne.n	80180f0 <__hexnan+0x118>
 801805a:	3102      	adds	r1, #2
 801805c:	f8ca 1000 	str.w	r1, [sl]
 8018060:	f1bb 0f00 	cmp.w	fp, #0
 8018064:	d044      	beq.n	80180f0 <__hexnan+0x118>
 8018066:	454c      	cmp	r4, r9
 8018068:	d206      	bcs.n	8018078 <__hexnan+0xa0>
 801806a:	2d07      	cmp	r5, #7
 801806c:	dc04      	bgt.n	8018078 <__hexnan+0xa0>
 801806e:	462a      	mov	r2, r5
 8018070:	4649      	mov	r1, r9
 8018072:	4620      	mov	r0, r4
 8018074:	f7ff ff8a 	bl	8017f8c <L_shift>
 8018078:	4544      	cmp	r4, r8
 801807a:	d928      	bls.n	80180ce <__hexnan+0xf6>
 801807c:	4643      	mov	r3, r8
 801807e:	f854 2b04 	ldr.w	r2, [r4], #4
 8018082:	f843 2b04 	str.w	r2, [r3], #4
 8018086:	42a6      	cmp	r6, r4
 8018088:	d2f9      	bcs.n	801807e <__hexnan+0xa6>
 801808a:	2200      	movs	r2, #0
 801808c:	f843 2b04 	str.w	r2, [r3], #4
 8018090:	429e      	cmp	r6, r3
 8018092:	d2fb      	bcs.n	801808c <__hexnan+0xb4>
 8018094:	6833      	ldr	r3, [r6, #0]
 8018096:	b91b      	cbnz	r3, 80180a0 <__hexnan+0xc8>
 8018098:	4546      	cmp	r6, r8
 801809a:	d127      	bne.n	80180ec <__hexnan+0x114>
 801809c:	2301      	movs	r3, #1
 801809e:	6033      	str	r3, [r6, #0]
 80180a0:	2005      	movs	r0, #5
 80180a2:	e026      	b.n	80180f2 <__hexnan+0x11a>
 80180a4:	3501      	adds	r5, #1
 80180a6:	2d08      	cmp	r5, #8
 80180a8:	f10b 0b01 	add.w	fp, fp, #1
 80180ac:	dd06      	ble.n	80180bc <__hexnan+0xe4>
 80180ae:	4544      	cmp	r4, r8
 80180b0:	d9cf      	bls.n	8018052 <__hexnan+0x7a>
 80180b2:	2300      	movs	r3, #0
 80180b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80180b8:	2501      	movs	r5, #1
 80180ba:	3c04      	subs	r4, #4
 80180bc:	6822      	ldr	r2, [r4, #0]
 80180be:	f000 000f 	and.w	r0, r0, #15
 80180c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80180c6:	6020      	str	r0, [r4, #0]
 80180c8:	e7c3      	b.n	8018052 <__hexnan+0x7a>
 80180ca:	2508      	movs	r5, #8
 80180cc:	e7c1      	b.n	8018052 <__hexnan+0x7a>
 80180ce:	9b01      	ldr	r3, [sp, #4]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d0df      	beq.n	8018094 <__hexnan+0xbc>
 80180d4:	f04f 32ff 	mov.w	r2, #4294967295
 80180d8:	f1c3 0320 	rsb	r3, r3, #32
 80180dc:	fa22 f303 	lsr.w	r3, r2, r3
 80180e0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80180e4:	401a      	ands	r2, r3
 80180e6:	f847 2c04 	str.w	r2, [r7, #-4]
 80180ea:	e7d3      	b.n	8018094 <__hexnan+0xbc>
 80180ec:	3e04      	subs	r6, #4
 80180ee:	e7d1      	b.n	8018094 <__hexnan+0xbc>
 80180f0:	2004      	movs	r0, #4
 80180f2:	b007      	add	sp, #28
 80180f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180f8 <_isatty_r>:
 80180f8:	b538      	push	{r3, r4, r5, lr}
 80180fa:	4c06      	ldr	r4, [pc, #24]	; (8018114 <_isatty_r+0x1c>)
 80180fc:	2300      	movs	r3, #0
 80180fe:	4605      	mov	r5, r0
 8018100:	4608      	mov	r0, r1
 8018102:	6023      	str	r3, [r4, #0]
 8018104:	f7f5 f9f5 	bl	800d4f2 <_isatty>
 8018108:	1c43      	adds	r3, r0, #1
 801810a:	d102      	bne.n	8018112 <_isatty_r+0x1a>
 801810c:	6823      	ldr	r3, [r4, #0]
 801810e:	b103      	cbz	r3, 8018112 <_isatty_r+0x1a>
 8018110:	602b      	str	r3, [r5, #0]
 8018112:	bd38      	pop	{r3, r4, r5, pc}
 8018114:	20008f4c 	.word	0x20008f4c

08018118 <__locale_ctype_ptr_l>:
 8018118:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801811c:	4770      	bx	lr
	...

08018120 <__locale_ctype_ptr>:
 8018120:	4b04      	ldr	r3, [pc, #16]	; (8018134 <__locale_ctype_ptr+0x14>)
 8018122:	4a05      	ldr	r2, [pc, #20]	; (8018138 <__locale_ctype_ptr+0x18>)
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	6a1b      	ldr	r3, [r3, #32]
 8018128:	2b00      	cmp	r3, #0
 801812a:	bf08      	it	eq
 801812c:	4613      	moveq	r3, r2
 801812e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018132:	4770      	bx	lr
 8018134:	2000003c 	.word	0x2000003c
 8018138:	200000a0 	.word	0x200000a0

0801813c <__localeconv_l>:
 801813c:	30f0      	adds	r0, #240	; 0xf0
 801813e:	4770      	bx	lr

08018140 <_localeconv_r>:
 8018140:	4b04      	ldr	r3, [pc, #16]	; (8018154 <_localeconv_r+0x14>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	6a18      	ldr	r0, [r3, #32]
 8018146:	4b04      	ldr	r3, [pc, #16]	; (8018158 <_localeconv_r+0x18>)
 8018148:	2800      	cmp	r0, #0
 801814a:	bf08      	it	eq
 801814c:	4618      	moveq	r0, r3
 801814e:	30f0      	adds	r0, #240	; 0xf0
 8018150:	4770      	bx	lr
 8018152:	bf00      	nop
 8018154:	2000003c 	.word	0x2000003c
 8018158:	200000a0 	.word	0x200000a0

0801815c <_lseek_r>:
 801815c:	b538      	push	{r3, r4, r5, lr}
 801815e:	4c07      	ldr	r4, [pc, #28]	; (801817c <_lseek_r+0x20>)
 8018160:	4605      	mov	r5, r0
 8018162:	4608      	mov	r0, r1
 8018164:	4611      	mov	r1, r2
 8018166:	2200      	movs	r2, #0
 8018168:	6022      	str	r2, [r4, #0]
 801816a:	461a      	mov	r2, r3
 801816c:	f7f5 f9cc 	bl	800d508 <_lseek>
 8018170:	1c43      	adds	r3, r0, #1
 8018172:	d102      	bne.n	801817a <_lseek_r+0x1e>
 8018174:	6823      	ldr	r3, [r4, #0]
 8018176:	b103      	cbz	r3, 801817a <_lseek_r+0x1e>
 8018178:	602b      	str	r3, [r5, #0]
 801817a:	bd38      	pop	{r3, r4, r5, pc}
 801817c:	20008f4c 	.word	0x20008f4c

08018180 <malloc>:
 8018180:	4b02      	ldr	r3, [pc, #8]	; (801818c <malloc+0xc>)
 8018182:	4601      	mov	r1, r0
 8018184:	6818      	ldr	r0, [r3, #0]
 8018186:	f7fb becb 	b.w	8013f20 <_malloc_r>
 801818a:	bf00      	nop
 801818c:	2000003c 	.word	0x2000003c

08018190 <__ascii_mbtowc>:
 8018190:	b082      	sub	sp, #8
 8018192:	b901      	cbnz	r1, 8018196 <__ascii_mbtowc+0x6>
 8018194:	a901      	add	r1, sp, #4
 8018196:	b142      	cbz	r2, 80181aa <__ascii_mbtowc+0x1a>
 8018198:	b14b      	cbz	r3, 80181ae <__ascii_mbtowc+0x1e>
 801819a:	7813      	ldrb	r3, [r2, #0]
 801819c:	600b      	str	r3, [r1, #0]
 801819e:	7812      	ldrb	r2, [r2, #0]
 80181a0:	1c10      	adds	r0, r2, #0
 80181a2:	bf18      	it	ne
 80181a4:	2001      	movne	r0, #1
 80181a6:	b002      	add	sp, #8
 80181a8:	4770      	bx	lr
 80181aa:	4610      	mov	r0, r2
 80181ac:	e7fb      	b.n	80181a6 <__ascii_mbtowc+0x16>
 80181ae:	f06f 0001 	mvn.w	r0, #1
 80181b2:	e7f8      	b.n	80181a6 <__ascii_mbtowc+0x16>

080181b4 <memmove>:
 80181b4:	4288      	cmp	r0, r1
 80181b6:	b510      	push	{r4, lr}
 80181b8:	eb01 0302 	add.w	r3, r1, r2
 80181bc:	d807      	bhi.n	80181ce <memmove+0x1a>
 80181be:	1e42      	subs	r2, r0, #1
 80181c0:	4299      	cmp	r1, r3
 80181c2:	d00a      	beq.n	80181da <memmove+0x26>
 80181c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80181c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80181cc:	e7f8      	b.n	80181c0 <memmove+0xc>
 80181ce:	4283      	cmp	r3, r0
 80181d0:	d9f5      	bls.n	80181be <memmove+0xa>
 80181d2:	1881      	adds	r1, r0, r2
 80181d4:	1ad2      	subs	r2, r2, r3
 80181d6:	42d3      	cmn	r3, r2
 80181d8:	d100      	bne.n	80181dc <memmove+0x28>
 80181da:	bd10      	pop	{r4, pc}
 80181dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80181e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80181e4:	e7f7      	b.n	80181d6 <memmove+0x22>

080181e6 <__malloc_lock>:
 80181e6:	4770      	bx	lr

080181e8 <__malloc_unlock>:
 80181e8:	4770      	bx	lr

080181ea <_Balloc>:
 80181ea:	b570      	push	{r4, r5, r6, lr}
 80181ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80181ee:	4604      	mov	r4, r0
 80181f0:	460e      	mov	r6, r1
 80181f2:	b93d      	cbnz	r5, 8018204 <_Balloc+0x1a>
 80181f4:	2010      	movs	r0, #16
 80181f6:	f7ff ffc3 	bl	8018180 <malloc>
 80181fa:	6260      	str	r0, [r4, #36]	; 0x24
 80181fc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018200:	6005      	str	r5, [r0, #0]
 8018202:	60c5      	str	r5, [r0, #12]
 8018204:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018206:	68eb      	ldr	r3, [r5, #12]
 8018208:	b183      	cbz	r3, 801822c <_Balloc+0x42>
 801820a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801820c:	68db      	ldr	r3, [r3, #12]
 801820e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018212:	b9b8      	cbnz	r0, 8018244 <_Balloc+0x5a>
 8018214:	2101      	movs	r1, #1
 8018216:	fa01 f506 	lsl.w	r5, r1, r6
 801821a:	1d6a      	adds	r2, r5, #5
 801821c:	0092      	lsls	r2, r2, #2
 801821e:	4620      	mov	r0, r4
 8018220:	f000 fbe1 	bl	80189e6 <_calloc_r>
 8018224:	b160      	cbz	r0, 8018240 <_Balloc+0x56>
 8018226:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801822a:	e00e      	b.n	801824a <_Balloc+0x60>
 801822c:	2221      	movs	r2, #33	; 0x21
 801822e:	2104      	movs	r1, #4
 8018230:	4620      	mov	r0, r4
 8018232:	f000 fbd8 	bl	80189e6 <_calloc_r>
 8018236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018238:	60e8      	str	r0, [r5, #12]
 801823a:	68db      	ldr	r3, [r3, #12]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d1e4      	bne.n	801820a <_Balloc+0x20>
 8018240:	2000      	movs	r0, #0
 8018242:	bd70      	pop	{r4, r5, r6, pc}
 8018244:	6802      	ldr	r2, [r0, #0]
 8018246:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801824a:	2300      	movs	r3, #0
 801824c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018250:	e7f7      	b.n	8018242 <_Balloc+0x58>

08018252 <_Bfree>:
 8018252:	b570      	push	{r4, r5, r6, lr}
 8018254:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018256:	4606      	mov	r6, r0
 8018258:	460d      	mov	r5, r1
 801825a:	b93c      	cbnz	r4, 801826c <_Bfree+0x1a>
 801825c:	2010      	movs	r0, #16
 801825e:	f7ff ff8f 	bl	8018180 <malloc>
 8018262:	6270      	str	r0, [r6, #36]	; 0x24
 8018264:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018268:	6004      	str	r4, [r0, #0]
 801826a:	60c4      	str	r4, [r0, #12]
 801826c:	b13d      	cbz	r5, 801827e <_Bfree+0x2c>
 801826e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018270:	686a      	ldr	r2, [r5, #4]
 8018272:	68db      	ldr	r3, [r3, #12]
 8018274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018278:	6029      	str	r1, [r5, #0]
 801827a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801827e:	bd70      	pop	{r4, r5, r6, pc}

08018280 <__multadd>:
 8018280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018284:	690d      	ldr	r5, [r1, #16]
 8018286:	461f      	mov	r7, r3
 8018288:	4606      	mov	r6, r0
 801828a:	460c      	mov	r4, r1
 801828c:	f101 0c14 	add.w	ip, r1, #20
 8018290:	2300      	movs	r3, #0
 8018292:	f8dc 0000 	ldr.w	r0, [ip]
 8018296:	b281      	uxth	r1, r0
 8018298:	fb02 7101 	mla	r1, r2, r1, r7
 801829c:	0c0f      	lsrs	r7, r1, #16
 801829e:	0c00      	lsrs	r0, r0, #16
 80182a0:	fb02 7000 	mla	r0, r2, r0, r7
 80182a4:	b289      	uxth	r1, r1
 80182a6:	3301      	adds	r3, #1
 80182a8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80182ac:	429d      	cmp	r5, r3
 80182ae:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80182b2:	f84c 1b04 	str.w	r1, [ip], #4
 80182b6:	dcec      	bgt.n	8018292 <__multadd+0x12>
 80182b8:	b1d7      	cbz	r7, 80182f0 <__multadd+0x70>
 80182ba:	68a3      	ldr	r3, [r4, #8]
 80182bc:	42ab      	cmp	r3, r5
 80182be:	dc12      	bgt.n	80182e6 <__multadd+0x66>
 80182c0:	6861      	ldr	r1, [r4, #4]
 80182c2:	4630      	mov	r0, r6
 80182c4:	3101      	adds	r1, #1
 80182c6:	f7ff ff90 	bl	80181ea <_Balloc>
 80182ca:	6922      	ldr	r2, [r4, #16]
 80182cc:	3202      	adds	r2, #2
 80182ce:	f104 010c 	add.w	r1, r4, #12
 80182d2:	4680      	mov	r8, r0
 80182d4:	0092      	lsls	r2, r2, #2
 80182d6:	300c      	adds	r0, #12
 80182d8:	f7fb fdc0 	bl	8013e5c <memcpy>
 80182dc:	4621      	mov	r1, r4
 80182de:	4630      	mov	r0, r6
 80182e0:	f7ff ffb7 	bl	8018252 <_Bfree>
 80182e4:	4644      	mov	r4, r8
 80182e6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80182ea:	3501      	adds	r5, #1
 80182ec:	615f      	str	r7, [r3, #20]
 80182ee:	6125      	str	r5, [r4, #16]
 80182f0:	4620      	mov	r0, r4
 80182f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080182f6 <__s2b>:
 80182f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182fa:	460c      	mov	r4, r1
 80182fc:	4615      	mov	r5, r2
 80182fe:	461f      	mov	r7, r3
 8018300:	2209      	movs	r2, #9
 8018302:	3308      	adds	r3, #8
 8018304:	4606      	mov	r6, r0
 8018306:	fb93 f3f2 	sdiv	r3, r3, r2
 801830a:	2100      	movs	r1, #0
 801830c:	2201      	movs	r2, #1
 801830e:	429a      	cmp	r2, r3
 8018310:	db20      	blt.n	8018354 <__s2b+0x5e>
 8018312:	4630      	mov	r0, r6
 8018314:	f7ff ff69 	bl	80181ea <_Balloc>
 8018318:	9b08      	ldr	r3, [sp, #32]
 801831a:	6143      	str	r3, [r0, #20]
 801831c:	2d09      	cmp	r5, #9
 801831e:	f04f 0301 	mov.w	r3, #1
 8018322:	6103      	str	r3, [r0, #16]
 8018324:	dd19      	ble.n	801835a <__s2b+0x64>
 8018326:	f104 0809 	add.w	r8, r4, #9
 801832a:	46c1      	mov	r9, r8
 801832c:	442c      	add	r4, r5
 801832e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018332:	4601      	mov	r1, r0
 8018334:	3b30      	subs	r3, #48	; 0x30
 8018336:	220a      	movs	r2, #10
 8018338:	4630      	mov	r0, r6
 801833a:	f7ff ffa1 	bl	8018280 <__multadd>
 801833e:	45a1      	cmp	r9, r4
 8018340:	d1f5      	bne.n	801832e <__s2b+0x38>
 8018342:	eb08 0405 	add.w	r4, r8, r5
 8018346:	3c08      	subs	r4, #8
 8018348:	1b2d      	subs	r5, r5, r4
 801834a:	1963      	adds	r3, r4, r5
 801834c:	42bb      	cmp	r3, r7
 801834e:	db07      	blt.n	8018360 <__s2b+0x6a>
 8018350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018354:	0052      	lsls	r2, r2, #1
 8018356:	3101      	adds	r1, #1
 8018358:	e7d9      	b.n	801830e <__s2b+0x18>
 801835a:	340a      	adds	r4, #10
 801835c:	2509      	movs	r5, #9
 801835e:	e7f3      	b.n	8018348 <__s2b+0x52>
 8018360:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018364:	4601      	mov	r1, r0
 8018366:	3b30      	subs	r3, #48	; 0x30
 8018368:	220a      	movs	r2, #10
 801836a:	4630      	mov	r0, r6
 801836c:	f7ff ff88 	bl	8018280 <__multadd>
 8018370:	e7eb      	b.n	801834a <__s2b+0x54>

08018372 <__hi0bits>:
 8018372:	0c02      	lsrs	r2, r0, #16
 8018374:	0412      	lsls	r2, r2, #16
 8018376:	4603      	mov	r3, r0
 8018378:	b9b2      	cbnz	r2, 80183a8 <__hi0bits+0x36>
 801837a:	0403      	lsls	r3, r0, #16
 801837c:	2010      	movs	r0, #16
 801837e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018382:	bf04      	itt	eq
 8018384:	021b      	lsleq	r3, r3, #8
 8018386:	3008      	addeq	r0, #8
 8018388:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801838c:	bf04      	itt	eq
 801838e:	011b      	lsleq	r3, r3, #4
 8018390:	3004      	addeq	r0, #4
 8018392:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018396:	bf04      	itt	eq
 8018398:	009b      	lsleq	r3, r3, #2
 801839a:	3002      	addeq	r0, #2
 801839c:	2b00      	cmp	r3, #0
 801839e:	db06      	blt.n	80183ae <__hi0bits+0x3c>
 80183a0:	005b      	lsls	r3, r3, #1
 80183a2:	d503      	bpl.n	80183ac <__hi0bits+0x3a>
 80183a4:	3001      	adds	r0, #1
 80183a6:	4770      	bx	lr
 80183a8:	2000      	movs	r0, #0
 80183aa:	e7e8      	b.n	801837e <__hi0bits+0xc>
 80183ac:	2020      	movs	r0, #32
 80183ae:	4770      	bx	lr

080183b0 <__lo0bits>:
 80183b0:	6803      	ldr	r3, [r0, #0]
 80183b2:	f013 0207 	ands.w	r2, r3, #7
 80183b6:	4601      	mov	r1, r0
 80183b8:	d00b      	beq.n	80183d2 <__lo0bits+0x22>
 80183ba:	07da      	lsls	r2, r3, #31
 80183bc:	d423      	bmi.n	8018406 <__lo0bits+0x56>
 80183be:	0798      	lsls	r0, r3, #30
 80183c0:	bf49      	itett	mi
 80183c2:	085b      	lsrmi	r3, r3, #1
 80183c4:	089b      	lsrpl	r3, r3, #2
 80183c6:	2001      	movmi	r0, #1
 80183c8:	600b      	strmi	r3, [r1, #0]
 80183ca:	bf5c      	itt	pl
 80183cc:	600b      	strpl	r3, [r1, #0]
 80183ce:	2002      	movpl	r0, #2
 80183d0:	4770      	bx	lr
 80183d2:	b298      	uxth	r0, r3
 80183d4:	b9a8      	cbnz	r0, 8018402 <__lo0bits+0x52>
 80183d6:	0c1b      	lsrs	r3, r3, #16
 80183d8:	2010      	movs	r0, #16
 80183da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80183de:	bf04      	itt	eq
 80183e0:	0a1b      	lsreq	r3, r3, #8
 80183e2:	3008      	addeq	r0, #8
 80183e4:	071a      	lsls	r2, r3, #28
 80183e6:	bf04      	itt	eq
 80183e8:	091b      	lsreq	r3, r3, #4
 80183ea:	3004      	addeq	r0, #4
 80183ec:	079a      	lsls	r2, r3, #30
 80183ee:	bf04      	itt	eq
 80183f0:	089b      	lsreq	r3, r3, #2
 80183f2:	3002      	addeq	r0, #2
 80183f4:	07da      	lsls	r2, r3, #31
 80183f6:	d402      	bmi.n	80183fe <__lo0bits+0x4e>
 80183f8:	085b      	lsrs	r3, r3, #1
 80183fa:	d006      	beq.n	801840a <__lo0bits+0x5a>
 80183fc:	3001      	adds	r0, #1
 80183fe:	600b      	str	r3, [r1, #0]
 8018400:	4770      	bx	lr
 8018402:	4610      	mov	r0, r2
 8018404:	e7e9      	b.n	80183da <__lo0bits+0x2a>
 8018406:	2000      	movs	r0, #0
 8018408:	4770      	bx	lr
 801840a:	2020      	movs	r0, #32
 801840c:	4770      	bx	lr

0801840e <__i2b>:
 801840e:	b510      	push	{r4, lr}
 8018410:	460c      	mov	r4, r1
 8018412:	2101      	movs	r1, #1
 8018414:	f7ff fee9 	bl	80181ea <_Balloc>
 8018418:	2201      	movs	r2, #1
 801841a:	6144      	str	r4, [r0, #20]
 801841c:	6102      	str	r2, [r0, #16]
 801841e:	bd10      	pop	{r4, pc}

08018420 <__multiply>:
 8018420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018424:	4614      	mov	r4, r2
 8018426:	690a      	ldr	r2, [r1, #16]
 8018428:	6923      	ldr	r3, [r4, #16]
 801842a:	429a      	cmp	r2, r3
 801842c:	bfb8      	it	lt
 801842e:	460b      	movlt	r3, r1
 8018430:	4688      	mov	r8, r1
 8018432:	bfbc      	itt	lt
 8018434:	46a0      	movlt	r8, r4
 8018436:	461c      	movlt	r4, r3
 8018438:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801843c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018440:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018444:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018448:	eb07 0609 	add.w	r6, r7, r9
 801844c:	42b3      	cmp	r3, r6
 801844e:	bfb8      	it	lt
 8018450:	3101      	addlt	r1, #1
 8018452:	f7ff feca 	bl	80181ea <_Balloc>
 8018456:	f100 0514 	add.w	r5, r0, #20
 801845a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801845e:	462b      	mov	r3, r5
 8018460:	2200      	movs	r2, #0
 8018462:	4573      	cmp	r3, lr
 8018464:	d316      	bcc.n	8018494 <__multiply+0x74>
 8018466:	f104 0214 	add.w	r2, r4, #20
 801846a:	f108 0114 	add.w	r1, r8, #20
 801846e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018472:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018476:	9300      	str	r3, [sp, #0]
 8018478:	9b00      	ldr	r3, [sp, #0]
 801847a:	9201      	str	r2, [sp, #4]
 801847c:	4293      	cmp	r3, r2
 801847e:	d80c      	bhi.n	801849a <__multiply+0x7a>
 8018480:	2e00      	cmp	r6, #0
 8018482:	dd03      	ble.n	801848c <__multiply+0x6c>
 8018484:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018488:	2b00      	cmp	r3, #0
 801848a:	d05d      	beq.n	8018548 <__multiply+0x128>
 801848c:	6106      	str	r6, [r0, #16]
 801848e:	b003      	add	sp, #12
 8018490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018494:	f843 2b04 	str.w	r2, [r3], #4
 8018498:	e7e3      	b.n	8018462 <__multiply+0x42>
 801849a:	f8b2 b000 	ldrh.w	fp, [r2]
 801849e:	f1bb 0f00 	cmp.w	fp, #0
 80184a2:	d023      	beq.n	80184ec <__multiply+0xcc>
 80184a4:	4689      	mov	r9, r1
 80184a6:	46ac      	mov	ip, r5
 80184a8:	f04f 0800 	mov.w	r8, #0
 80184ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80184b0:	f8dc a000 	ldr.w	sl, [ip]
 80184b4:	b2a3      	uxth	r3, r4
 80184b6:	fa1f fa8a 	uxth.w	sl, sl
 80184ba:	fb0b a303 	mla	r3, fp, r3, sl
 80184be:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80184c2:	f8dc 4000 	ldr.w	r4, [ip]
 80184c6:	4443      	add	r3, r8
 80184c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80184cc:	fb0b 840a 	mla	r4, fp, sl, r8
 80184d0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80184d4:	46e2      	mov	sl, ip
 80184d6:	b29b      	uxth	r3, r3
 80184d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80184dc:	454f      	cmp	r7, r9
 80184de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80184e2:	f84a 3b04 	str.w	r3, [sl], #4
 80184e6:	d82b      	bhi.n	8018540 <__multiply+0x120>
 80184e8:	f8cc 8004 	str.w	r8, [ip, #4]
 80184ec:	9b01      	ldr	r3, [sp, #4]
 80184ee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80184f2:	3204      	adds	r2, #4
 80184f4:	f1ba 0f00 	cmp.w	sl, #0
 80184f8:	d020      	beq.n	801853c <__multiply+0x11c>
 80184fa:	682b      	ldr	r3, [r5, #0]
 80184fc:	4689      	mov	r9, r1
 80184fe:	46a8      	mov	r8, r5
 8018500:	f04f 0b00 	mov.w	fp, #0
 8018504:	f8b9 c000 	ldrh.w	ip, [r9]
 8018508:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801850c:	fb0a 440c 	mla	r4, sl, ip, r4
 8018510:	445c      	add	r4, fp
 8018512:	46c4      	mov	ip, r8
 8018514:	b29b      	uxth	r3, r3
 8018516:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801851a:	f84c 3b04 	str.w	r3, [ip], #4
 801851e:	f859 3b04 	ldr.w	r3, [r9], #4
 8018522:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018526:	0c1b      	lsrs	r3, r3, #16
 8018528:	fb0a b303 	mla	r3, sl, r3, fp
 801852c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018530:	454f      	cmp	r7, r9
 8018532:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018536:	d805      	bhi.n	8018544 <__multiply+0x124>
 8018538:	f8c8 3004 	str.w	r3, [r8, #4]
 801853c:	3504      	adds	r5, #4
 801853e:	e79b      	b.n	8018478 <__multiply+0x58>
 8018540:	46d4      	mov	ip, sl
 8018542:	e7b3      	b.n	80184ac <__multiply+0x8c>
 8018544:	46e0      	mov	r8, ip
 8018546:	e7dd      	b.n	8018504 <__multiply+0xe4>
 8018548:	3e01      	subs	r6, #1
 801854a:	e799      	b.n	8018480 <__multiply+0x60>

0801854c <__pow5mult>:
 801854c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018550:	4615      	mov	r5, r2
 8018552:	f012 0203 	ands.w	r2, r2, #3
 8018556:	4606      	mov	r6, r0
 8018558:	460f      	mov	r7, r1
 801855a:	d007      	beq.n	801856c <__pow5mult+0x20>
 801855c:	3a01      	subs	r2, #1
 801855e:	4c21      	ldr	r4, [pc, #132]	; (80185e4 <__pow5mult+0x98>)
 8018560:	2300      	movs	r3, #0
 8018562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018566:	f7ff fe8b 	bl	8018280 <__multadd>
 801856a:	4607      	mov	r7, r0
 801856c:	10ad      	asrs	r5, r5, #2
 801856e:	d035      	beq.n	80185dc <__pow5mult+0x90>
 8018570:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018572:	b93c      	cbnz	r4, 8018584 <__pow5mult+0x38>
 8018574:	2010      	movs	r0, #16
 8018576:	f7ff fe03 	bl	8018180 <malloc>
 801857a:	6270      	str	r0, [r6, #36]	; 0x24
 801857c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018580:	6004      	str	r4, [r0, #0]
 8018582:	60c4      	str	r4, [r0, #12]
 8018584:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018588:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801858c:	b94c      	cbnz	r4, 80185a2 <__pow5mult+0x56>
 801858e:	f240 2171 	movw	r1, #625	; 0x271
 8018592:	4630      	mov	r0, r6
 8018594:	f7ff ff3b 	bl	801840e <__i2b>
 8018598:	2300      	movs	r3, #0
 801859a:	f8c8 0008 	str.w	r0, [r8, #8]
 801859e:	4604      	mov	r4, r0
 80185a0:	6003      	str	r3, [r0, #0]
 80185a2:	f04f 0800 	mov.w	r8, #0
 80185a6:	07eb      	lsls	r3, r5, #31
 80185a8:	d50a      	bpl.n	80185c0 <__pow5mult+0x74>
 80185aa:	4639      	mov	r1, r7
 80185ac:	4622      	mov	r2, r4
 80185ae:	4630      	mov	r0, r6
 80185b0:	f7ff ff36 	bl	8018420 <__multiply>
 80185b4:	4639      	mov	r1, r7
 80185b6:	4681      	mov	r9, r0
 80185b8:	4630      	mov	r0, r6
 80185ba:	f7ff fe4a 	bl	8018252 <_Bfree>
 80185be:	464f      	mov	r7, r9
 80185c0:	106d      	asrs	r5, r5, #1
 80185c2:	d00b      	beq.n	80185dc <__pow5mult+0x90>
 80185c4:	6820      	ldr	r0, [r4, #0]
 80185c6:	b938      	cbnz	r0, 80185d8 <__pow5mult+0x8c>
 80185c8:	4622      	mov	r2, r4
 80185ca:	4621      	mov	r1, r4
 80185cc:	4630      	mov	r0, r6
 80185ce:	f7ff ff27 	bl	8018420 <__multiply>
 80185d2:	6020      	str	r0, [r4, #0]
 80185d4:	f8c0 8000 	str.w	r8, [r0]
 80185d8:	4604      	mov	r4, r0
 80185da:	e7e4      	b.n	80185a6 <__pow5mult+0x5a>
 80185dc:	4638      	mov	r0, r7
 80185de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185e2:	bf00      	nop
 80185e4:	08019418 	.word	0x08019418

080185e8 <__lshift>:
 80185e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185ec:	460c      	mov	r4, r1
 80185ee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80185f2:	6923      	ldr	r3, [r4, #16]
 80185f4:	6849      	ldr	r1, [r1, #4]
 80185f6:	eb0a 0903 	add.w	r9, sl, r3
 80185fa:	68a3      	ldr	r3, [r4, #8]
 80185fc:	4607      	mov	r7, r0
 80185fe:	4616      	mov	r6, r2
 8018600:	f109 0501 	add.w	r5, r9, #1
 8018604:	42ab      	cmp	r3, r5
 8018606:	db32      	blt.n	801866e <__lshift+0x86>
 8018608:	4638      	mov	r0, r7
 801860a:	f7ff fdee 	bl	80181ea <_Balloc>
 801860e:	2300      	movs	r3, #0
 8018610:	4680      	mov	r8, r0
 8018612:	f100 0114 	add.w	r1, r0, #20
 8018616:	461a      	mov	r2, r3
 8018618:	4553      	cmp	r3, sl
 801861a:	db2b      	blt.n	8018674 <__lshift+0x8c>
 801861c:	6920      	ldr	r0, [r4, #16]
 801861e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018622:	f104 0314 	add.w	r3, r4, #20
 8018626:	f016 021f 	ands.w	r2, r6, #31
 801862a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801862e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018632:	d025      	beq.n	8018680 <__lshift+0x98>
 8018634:	f1c2 0e20 	rsb	lr, r2, #32
 8018638:	2000      	movs	r0, #0
 801863a:	681e      	ldr	r6, [r3, #0]
 801863c:	468a      	mov	sl, r1
 801863e:	4096      	lsls	r6, r2
 8018640:	4330      	orrs	r0, r6
 8018642:	f84a 0b04 	str.w	r0, [sl], #4
 8018646:	f853 0b04 	ldr.w	r0, [r3], #4
 801864a:	459c      	cmp	ip, r3
 801864c:	fa20 f00e 	lsr.w	r0, r0, lr
 8018650:	d814      	bhi.n	801867c <__lshift+0x94>
 8018652:	6048      	str	r0, [r1, #4]
 8018654:	b108      	cbz	r0, 801865a <__lshift+0x72>
 8018656:	f109 0502 	add.w	r5, r9, #2
 801865a:	3d01      	subs	r5, #1
 801865c:	4638      	mov	r0, r7
 801865e:	f8c8 5010 	str.w	r5, [r8, #16]
 8018662:	4621      	mov	r1, r4
 8018664:	f7ff fdf5 	bl	8018252 <_Bfree>
 8018668:	4640      	mov	r0, r8
 801866a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801866e:	3101      	adds	r1, #1
 8018670:	005b      	lsls	r3, r3, #1
 8018672:	e7c7      	b.n	8018604 <__lshift+0x1c>
 8018674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018678:	3301      	adds	r3, #1
 801867a:	e7cd      	b.n	8018618 <__lshift+0x30>
 801867c:	4651      	mov	r1, sl
 801867e:	e7dc      	b.n	801863a <__lshift+0x52>
 8018680:	3904      	subs	r1, #4
 8018682:	f853 2b04 	ldr.w	r2, [r3], #4
 8018686:	f841 2f04 	str.w	r2, [r1, #4]!
 801868a:	459c      	cmp	ip, r3
 801868c:	d8f9      	bhi.n	8018682 <__lshift+0x9a>
 801868e:	e7e4      	b.n	801865a <__lshift+0x72>

08018690 <__mcmp>:
 8018690:	6903      	ldr	r3, [r0, #16]
 8018692:	690a      	ldr	r2, [r1, #16]
 8018694:	1a9b      	subs	r3, r3, r2
 8018696:	b530      	push	{r4, r5, lr}
 8018698:	d10c      	bne.n	80186b4 <__mcmp+0x24>
 801869a:	0092      	lsls	r2, r2, #2
 801869c:	3014      	adds	r0, #20
 801869e:	3114      	adds	r1, #20
 80186a0:	1884      	adds	r4, r0, r2
 80186a2:	4411      	add	r1, r2
 80186a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80186a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80186ac:	4295      	cmp	r5, r2
 80186ae:	d003      	beq.n	80186b8 <__mcmp+0x28>
 80186b0:	d305      	bcc.n	80186be <__mcmp+0x2e>
 80186b2:	2301      	movs	r3, #1
 80186b4:	4618      	mov	r0, r3
 80186b6:	bd30      	pop	{r4, r5, pc}
 80186b8:	42a0      	cmp	r0, r4
 80186ba:	d3f3      	bcc.n	80186a4 <__mcmp+0x14>
 80186bc:	e7fa      	b.n	80186b4 <__mcmp+0x24>
 80186be:	f04f 33ff 	mov.w	r3, #4294967295
 80186c2:	e7f7      	b.n	80186b4 <__mcmp+0x24>

080186c4 <__mdiff>:
 80186c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186c8:	460d      	mov	r5, r1
 80186ca:	4607      	mov	r7, r0
 80186cc:	4611      	mov	r1, r2
 80186ce:	4628      	mov	r0, r5
 80186d0:	4614      	mov	r4, r2
 80186d2:	f7ff ffdd 	bl	8018690 <__mcmp>
 80186d6:	1e06      	subs	r6, r0, #0
 80186d8:	d108      	bne.n	80186ec <__mdiff+0x28>
 80186da:	4631      	mov	r1, r6
 80186dc:	4638      	mov	r0, r7
 80186de:	f7ff fd84 	bl	80181ea <_Balloc>
 80186e2:	2301      	movs	r3, #1
 80186e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80186e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186ec:	bfa4      	itt	ge
 80186ee:	4623      	movge	r3, r4
 80186f0:	462c      	movge	r4, r5
 80186f2:	4638      	mov	r0, r7
 80186f4:	6861      	ldr	r1, [r4, #4]
 80186f6:	bfa6      	itte	ge
 80186f8:	461d      	movge	r5, r3
 80186fa:	2600      	movge	r6, #0
 80186fc:	2601      	movlt	r6, #1
 80186fe:	f7ff fd74 	bl	80181ea <_Balloc>
 8018702:	692b      	ldr	r3, [r5, #16]
 8018704:	60c6      	str	r6, [r0, #12]
 8018706:	6926      	ldr	r6, [r4, #16]
 8018708:	f105 0914 	add.w	r9, r5, #20
 801870c:	f104 0214 	add.w	r2, r4, #20
 8018710:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018714:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018718:	f100 0514 	add.w	r5, r0, #20
 801871c:	f04f 0e00 	mov.w	lr, #0
 8018720:	f852 ab04 	ldr.w	sl, [r2], #4
 8018724:	f859 4b04 	ldr.w	r4, [r9], #4
 8018728:	fa1e f18a 	uxtah	r1, lr, sl
 801872c:	b2a3      	uxth	r3, r4
 801872e:	1ac9      	subs	r1, r1, r3
 8018730:	0c23      	lsrs	r3, r4, #16
 8018732:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018736:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801873a:	b289      	uxth	r1, r1
 801873c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018740:	45c8      	cmp	r8, r9
 8018742:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018746:	4694      	mov	ip, r2
 8018748:	f845 3b04 	str.w	r3, [r5], #4
 801874c:	d8e8      	bhi.n	8018720 <__mdiff+0x5c>
 801874e:	45bc      	cmp	ip, r7
 8018750:	d304      	bcc.n	801875c <__mdiff+0x98>
 8018752:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018756:	b183      	cbz	r3, 801877a <__mdiff+0xb6>
 8018758:	6106      	str	r6, [r0, #16]
 801875a:	e7c5      	b.n	80186e8 <__mdiff+0x24>
 801875c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018760:	fa1e f381 	uxtah	r3, lr, r1
 8018764:	141a      	asrs	r2, r3, #16
 8018766:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801876a:	b29b      	uxth	r3, r3
 801876c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018770:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018774:	f845 3b04 	str.w	r3, [r5], #4
 8018778:	e7e9      	b.n	801874e <__mdiff+0x8a>
 801877a:	3e01      	subs	r6, #1
 801877c:	e7e9      	b.n	8018752 <__mdiff+0x8e>
	...

08018780 <__ulp>:
 8018780:	4b12      	ldr	r3, [pc, #72]	; (80187cc <__ulp+0x4c>)
 8018782:	ee10 2a90 	vmov	r2, s1
 8018786:	401a      	ands	r2, r3
 8018788:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801878c:	2b00      	cmp	r3, #0
 801878e:	dd04      	ble.n	801879a <__ulp+0x1a>
 8018790:	2000      	movs	r0, #0
 8018792:	4619      	mov	r1, r3
 8018794:	ec41 0b10 	vmov	d0, r0, r1
 8018798:	4770      	bx	lr
 801879a:	425b      	negs	r3, r3
 801879c:	151b      	asrs	r3, r3, #20
 801879e:	2b13      	cmp	r3, #19
 80187a0:	f04f 0000 	mov.w	r0, #0
 80187a4:	f04f 0100 	mov.w	r1, #0
 80187a8:	dc04      	bgt.n	80187b4 <__ulp+0x34>
 80187aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80187ae:	fa42 f103 	asr.w	r1, r2, r3
 80187b2:	e7ef      	b.n	8018794 <__ulp+0x14>
 80187b4:	3b14      	subs	r3, #20
 80187b6:	2b1e      	cmp	r3, #30
 80187b8:	f04f 0201 	mov.w	r2, #1
 80187bc:	bfda      	itte	le
 80187be:	f1c3 031f 	rsble	r3, r3, #31
 80187c2:	fa02 f303 	lslle.w	r3, r2, r3
 80187c6:	4613      	movgt	r3, r2
 80187c8:	4618      	mov	r0, r3
 80187ca:	e7e3      	b.n	8018794 <__ulp+0x14>
 80187cc:	7ff00000 	.word	0x7ff00000

080187d0 <__b2d>:
 80187d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187d2:	6905      	ldr	r5, [r0, #16]
 80187d4:	f100 0714 	add.w	r7, r0, #20
 80187d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80187dc:	1f2e      	subs	r6, r5, #4
 80187de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80187e2:	4620      	mov	r0, r4
 80187e4:	f7ff fdc5 	bl	8018372 <__hi0bits>
 80187e8:	f1c0 0320 	rsb	r3, r0, #32
 80187ec:	280a      	cmp	r0, #10
 80187ee:	600b      	str	r3, [r1, #0]
 80187f0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018868 <__b2d+0x98>
 80187f4:	dc14      	bgt.n	8018820 <__b2d+0x50>
 80187f6:	f1c0 0e0b 	rsb	lr, r0, #11
 80187fa:	fa24 f10e 	lsr.w	r1, r4, lr
 80187fe:	42b7      	cmp	r7, r6
 8018800:	ea41 030c 	orr.w	r3, r1, ip
 8018804:	bf34      	ite	cc
 8018806:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801880a:	2100      	movcs	r1, #0
 801880c:	3015      	adds	r0, #21
 801880e:	fa04 f000 	lsl.w	r0, r4, r0
 8018812:	fa21 f10e 	lsr.w	r1, r1, lr
 8018816:	ea40 0201 	orr.w	r2, r0, r1
 801881a:	ec43 2b10 	vmov	d0, r2, r3
 801881e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018820:	42b7      	cmp	r7, r6
 8018822:	bf3a      	itte	cc
 8018824:	f1a5 0608 	subcc.w	r6, r5, #8
 8018828:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801882c:	2100      	movcs	r1, #0
 801882e:	380b      	subs	r0, #11
 8018830:	d015      	beq.n	801885e <__b2d+0x8e>
 8018832:	4084      	lsls	r4, r0
 8018834:	f1c0 0520 	rsb	r5, r0, #32
 8018838:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801883c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018840:	42be      	cmp	r6, r7
 8018842:	fa21 fc05 	lsr.w	ip, r1, r5
 8018846:	ea44 030c 	orr.w	r3, r4, ip
 801884a:	bf8c      	ite	hi
 801884c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018850:	2400      	movls	r4, #0
 8018852:	fa01 f000 	lsl.w	r0, r1, r0
 8018856:	40ec      	lsrs	r4, r5
 8018858:	ea40 0204 	orr.w	r2, r0, r4
 801885c:	e7dd      	b.n	801881a <__b2d+0x4a>
 801885e:	ea44 030c 	orr.w	r3, r4, ip
 8018862:	460a      	mov	r2, r1
 8018864:	e7d9      	b.n	801881a <__b2d+0x4a>
 8018866:	bf00      	nop
 8018868:	3ff00000 	.word	0x3ff00000

0801886c <__d2b>:
 801886c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018870:	460e      	mov	r6, r1
 8018872:	2101      	movs	r1, #1
 8018874:	ec59 8b10 	vmov	r8, r9, d0
 8018878:	4615      	mov	r5, r2
 801887a:	f7ff fcb6 	bl	80181ea <_Balloc>
 801887e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018882:	4607      	mov	r7, r0
 8018884:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018888:	bb34      	cbnz	r4, 80188d8 <__d2b+0x6c>
 801888a:	9301      	str	r3, [sp, #4]
 801888c:	f1b8 0300 	subs.w	r3, r8, #0
 8018890:	d027      	beq.n	80188e2 <__d2b+0x76>
 8018892:	a802      	add	r0, sp, #8
 8018894:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018898:	f7ff fd8a 	bl	80183b0 <__lo0bits>
 801889c:	9900      	ldr	r1, [sp, #0]
 801889e:	b1f0      	cbz	r0, 80188de <__d2b+0x72>
 80188a0:	9a01      	ldr	r2, [sp, #4]
 80188a2:	f1c0 0320 	rsb	r3, r0, #32
 80188a6:	fa02 f303 	lsl.w	r3, r2, r3
 80188aa:	430b      	orrs	r3, r1
 80188ac:	40c2      	lsrs	r2, r0
 80188ae:	617b      	str	r3, [r7, #20]
 80188b0:	9201      	str	r2, [sp, #4]
 80188b2:	9b01      	ldr	r3, [sp, #4]
 80188b4:	61bb      	str	r3, [r7, #24]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	bf14      	ite	ne
 80188ba:	2102      	movne	r1, #2
 80188bc:	2101      	moveq	r1, #1
 80188be:	6139      	str	r1, [r7, #16]
 80188c0:	b1c4      	cbz	r4, 80188f4 <__d2b+0x88>
 80188c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80188c6:	4404      	add	r4, r0
 80188c8:	6034      	str	r4, [r6, #0]
 80188ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80188ce:	6028      	str	r0, [r5, #0]
 80188d0:	4638      	mov	r0, r7
 80188d2:	b003      	add	sp, #12
 80188d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80188dc:	e7d5      	b.n	801888a <__d2b+0x1e>
 80188de:	6179      	str	r1, [r7, #20]
 80188e0:	e7e7      	b.n	80188b2 <__d2b+0x46>
 80188e2:	a801      	add	r0, sp, #4
 80188e4:	f7ff fd64 	bl	80183b0 <__lo0bits>
 80188e8:	9b01      	ldr	r3, [sp, #4]
 80188ea:	617b      	str	r3, [r7, #20]
 80188ec:	2101      	movs	r1, #1
 80188ee:	6139      	str	r1, [r7, #16]
 80188f0:	3020      	adds	r0, #32
 80188f2:	e7e5      	b.n	80188c0 <__d2b+0x54>
 80188f4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80188f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80188fc:	6030      	str	r0, [r6, #0]
 80188fe:	6918      	ldr	r0, [r3, #16]
 8018900:	f7ff fd37 	bl	8018372 <__hi0bits>
 8018904:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018908:	e7e1      	b.n	80188ce <__d2b+0x62>

0801890a <__ratio>:
 801890a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801890e:	4688      	mov	r8, r1
 8018910:	4669      	mov	r1, sp
 8018912:	4681      	mov	r9, r0
 8018914:	f7ff ff5c 	bl	80187d0 <__b2d>
 8018918:	a901      	add	r1, sp, #4
 801891a:	4640      	mov	r0, r8
 801891c:	ec57 6b10 	vmov	r6, r7, d0
 8018920:	f7ff ff56 	bl	80187d0 <__b2d>
 8018924:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018928:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801892c:	eba3 0c02 	sub.w	ip, r3, r2
 8018930:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018934:	1a9b      	subs	r3, r3, r2
 8018936:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801893a:	ec5b ab10 	vmov	sl, fp, d0
 801893e:	2b00      	cmp	r3, #0
 8018940:	bfce      	itee	gt
 8018942:	463a      	movgt	r2, r7
 8018944:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018948:	465a      	movle	r2, fp
 801894a:	4659      	mov	r1, fp
 801894c:	463d      	mov	r5, r7
 801894e:	bfd4      	ite	le
 8018950:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018954:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018958:	4630      	mov	r0, r6
 801895a:	ee10 2a10 	vmov	r2, s0
 801895e:	460b      	mov	r3, r1
 8018960:	4629      	mov	r1, r5
 8018962:	f7ef feab 	bl	80086bc <__aeabi_ddiv>
 8018966:	ec41 0b10 	vmov	d0, r0, r1
 801896a:	b003      	add	sp, #12
 801896c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018970 <__copybits>:
 8018970:	3901      	subs	r1, #1
 8018972:	b510      	push	{r4, lr}
 8018974:	1149      	asrs	r1, r1, #5
 8018976:	6914      	ldr	r4, [r2, #16]
 8018978:	3101      	adds	r1, #1
 801897a:	f102 0314 	add.w	r3, r2, #20
 801897e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018982:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018986:	42a3      	cmp	r3, r4
 8018988:	4602      	mov	r2, r0
 801898a:	d303      	bcc.n	8018994 <__copybits+0x24>
 801898c:	2300      	movs	r3, #0
 801898e:	428a      	cmp	r2, r1
 8018990:	d305      	bcc.n	801899e <__copybits+0x2e>
 8018992:	bd10      	pop	{r4, pc}
 8018994:	f853 2b04 	ldr.w	r2, [r3], #4
 8018998:	f840 2b04 	str.w	r2, [r0], #4
 801899c:	e7f3      	b.n	8018986 <__copybits+0x16>
 801899e:	f842 3b04 	str.w	r3, [r2], #4
 80189a2:	e7f4      	b.n	801898e <__copybits+0x1e>

080189a4 <__any_on>:
 80189a4:	f100 0214 	add.w	r2, r0, #20
 80189a8:	6900      	ldr	r0, [r0, #16]
 80189aa:	114b      	asrs	r3, r1, #5
 80189ac:	4298      	cmp	r0, r3
 80189ae:	b510      	push	{r4, lr}
 80189b0:	db11      	blt.n	80189d6 <__any_on+0x32>
 80189b2:	dd0a      	ble.n	80189ca <__any_on+0x26>
 80189b4:	f011 011f 	ands.w	r1, r1, #31
 80189b8:	d007      	beq.n	80189ca <__any_on+0x26>
 80189ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80189be:	fa24 f001 	lsr.w	r0, r4, r1
 80189c2:	fa00 f101 	lsl.w	r1, r0, r1
 80189c6:	428c      	cmp	r4, r1
 80189c8:	d10b      	bne.n	80189e2 <__any_on+0x3e>
 80189ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80189ce:	4293      	cmp	r3, r2
 80189d0:	d803      	bhi.n	80189da <__any_on+0x36>
 80189d2:	2000      	movs	r0, #0
 80189d4:	bd10      	pop	{r4, pc}
 80189d6:	4603      	mov	r3, r0
 80189d8:	e7f7      	b.n	80189ca <__any_on+0x26>
 80189da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80189de:	2900      	cmp	r1, #0
 80189e0:	d0f5      	beq.n	80189ce <__any_on+0x2a>
 80189e2:	2001      	movs	r0, #1
 80189e4:	e7f6      	b.n	80189d4 <__any_on+0x30>

080189e6 <_calloc_r>:
 80189e6:	b538      	push	{r3, r4, r5, lr}
 80189e8:	fb02 f401 	mul.w	r4, r2, r1
 80189ec:	4621      	mov	r1, r4
 80189ee:	f7fb fa97 	bl	8013f20 <_malloc_r>
 80189f2:	4605      	mov	r5, r0
 80189f4:	b118      	cbz	r0, 80189fe <_calloc_r+0x18>
 80189f6:	4622      	mov	r2, r4
 80189f8:	2100      	movs	r1, #0
 80189fa:	f7fb fa3a 	bl	8013e72 <memset>
 80189fe:	4628      	mov	r0, r5
 8018a00:	bd38      	pop	{r3, r4, r5, pc}

08018a02 <_realloc_r>:
 8018a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a04:	4607      	mov	r7, r0
 8018a06:	4614      	mov	r4, r2
 8018a08:	460e      	mov	r6, r1
 8018a0a:	b921      	cbnz	r1, 8018a16 <_realloc_r+0x14>
 8018a0c:	4611      	mov	r1, r2
 8018a0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018a12:	f7fb ba85 	b.w	8013f20 <_malloc_r>
 8018a16:	b922      	cbnz	r2, 8018a22 <_realloc_r+0x20>
 8018a18:	f7fb fa34 	bl	8013e84 <_free_r>
 8018a1c:	4625      	mov	r5, r4
 8018a1e:	4628      	mov	r0, r5
 8018a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a22:	f000 f9ce 	bl	8018dc2 <_malloc_usable_size_r>
 8018a26:	42a0      	cmp	r0, r4
 8018a28:	d20f      	bcs.n	8018a4a <_realloc_r+0x48>
 8018a2a:	4621      	mov	r1, r4
 8018a2c:	4638      	mov	r0, r7
 8018a2e:	f7fb fa77 	bl	8013f20 <_malloc_r>
 8018a32:	4605      	mov	r5, r0
 8018a34:	2800      	cmp	r0, #0
 8018a36:	d0f2      	beq.n	8018a1e <_realloc_r+0x1c>
 8018a38:	4631      	mov	r1, r6
 8018a3a:	4622      	mov	r2, r4
 8018a3c:	f7fb fa0e 	bl	8013e5c <memcpy>
 8018a40:	4631      	mov	r1, r6
 8018a42:	4638      	mov	r0, r7
 8018a44:	f7fb fa1e 	bl	8013e84 <_free_r>
 8018a48:	e7e9      	b.n	8018a1e <_realloc_r+0x1c>
 8018a4a:	4635      	mov	r5, r6
 8018a4c:	e7e7      	b.n	8018a1e <_realloc_r+0x1c>

08018a4e <__ssputs_r>:
 8018a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a52:	688e      	ldr	r6, [r1, #8]
 8018a54:	429e      	cmp	r6, r3
 8018a56:	4682      	mov	sl, r0
 8018a58:	460c      	mov	r4, r1
 8018a5a:	4690      	mov	r8, r2
 8018a5c:	4699      	mov	r9, r3
 8018a5e:	d837      	bhi.n	8018ad0 <__ssputs_r+0x82>
 8018a60:	898a      	ldrh	r2, [r1, #12]
 8018a62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018a66:	d031      	beq.n	8018acc <__ssputs_r+0x7e>
 8018a68:	6825      	ldr	r5, [r4, #0]
 8018a6a:	6909      	ldr	r1, [r1, #16]
 8018a6c:	1a6f      	subs	r7, r5, r1
 8018a6e:	6965      	ldr	r5, [r4, #20]
 8018a70:	2302      	movs	r3, #2
 8018a72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018a76:	fb95 f5f3 	sdiv	r5, r5, r3
 8018a7a:	f109 0301 	add.w	r3, r9, #1
 8018a7e:	443b      	add	r3, r7
 8018a80:	429d      	cmp	r5, r3
 8018a82:	bf38      	it	cc
 8018a84:	461d      	movcc	r5, r3
 8018a86:	0553      	lsls	r3, r2, #21
 8018a88:	d530      	bpl.n	8018aec <__ssputs_r+0x9e>
 8018a8a:	4629      	mov	r1, r5
 8018a8c:	f7fb fa48 	bl	8013f20 <_malloc_r>
 8018a90:	4606      	mov	r6, r0
 8018a92:	b950      	cbnz	r0, 8018aaa <__ssputs_r+0x5c>
 8018a94:	230c      	movs	r3, #12
 8018a96:	f8ca 3000 	str.w	r3, [sl]
 8018a9a:	89a3      	ldrh	r3, [r4, #12]
 8018a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018aa0:	81a3      	strh	r3, [r4, #12]
 8018aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8018aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018aaa:	463a      	mov	r2, r7
 8018aac:	6921      	ldr	r1, [r4, #16]
 8018aae:	f7fb f9d5 	bl	8013e5c <memcpy>
 8018ab2:	89a3      	ldrh	r3, [r4, #12]
 8018ab4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018abc:	81a3      	strh	r3, [r4, #12]
 8018abe:	6126      	str	r6, [r4, #16]
 8018ac0:	6165      	str	r5, [r4, #20]
 8018ac2:	443e      	add	r6, r7
 8018ac4:	1bed      	subs	r5, r5, r7
 8018ac6:	6026      	str	r6, [r4, #0]
 8018ac8:	60a5      	str	r5, [r4, #8]
 8018aca:	464e      	mov	r6, r9
 8018acc:	454e      	cmp	r6, r9
 8018ace:	d900      	bls.n	8018ad2 <__ssputs_r+0x84>
 8018ad0:	464e      	mov	r6, r9
 8018ad2:	4632      	mov	r2, r6
 8018ad4:	4641      	mov	r1, r8
 8018ad6:	6820      	ldr	r0, [r4, #0]
 8018ad8:	f7ff fb6c 	bl	80181b4 <memmove>
 8018adc:	68a3      	ldr	r3, [r4, #8]
 8018ade:	1b9b      	subs	r3, r3, r6
 8018ae0:	60a3      	str	r3, [r4, #8]
 8018ae2:	6823      	ldr	r3, [r4, #0]
 8018ae4:	441e      	add	r6, r3
 8018ae6:	6026      	str	r6, [r4, #0]
 8018ae8:	2000      	movs	r0, #0
 8018aea:	e7dc      	b.n	8018aa6 <__ssputs_r+0x58>
 8018aec:	462a      	mov	r2, r5
 8018aee:	f7ff ff88 	bl	8018a02 <_realloc_r>
 8018af2:	4606      	mov	r6, r0
 8018af4:	2800      	cmp	r0, #0
 8018af6:	d1e2      	bne.n	8018abe <__ssputs_r+0x70>
 8018af8:	6921      	ldr	r1, [r4, #16]
 8018afa:	4650      	mov	r0, sl
 8018afc:	f7fb f9c2 	bl	8013e84 <_free_r>
 8018b00:	e7c8      	b.n	8018a94 <__ssputs_r+0x46>
	...

08018b04 <_svfiprintf_r>:
 8018b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b08:	461d      	mov	r5, r3
 8018b0a:	898b      	ldrh	r3, [r1, #12]
 8018b0c:	061f      	lsls	r7, r3, #24
 8018b0e:	b09d      	sub	sp, #116	; 0x74
 8018b10:	4680      	mov	r8, r0
 8018b12:	460c      	mov	r4, r1
 8018b14:	4616      	mov	r6, r2
 8018b16:	d50f      	bpl.n	8018b38 <_svfiprintf_r+0x34>
 8018b18:	690b      	ldr	r3, [r1, #16]
 8018b1a:	b96b      	cbnz	r3, 8018b38 <_svfiprintf_r+0x34>
 8018b1c:	2140      	movs	r1, #64	; 0x40
 8018b1e:	f7fb f9ff 	bl	8013f20 <_malloc_r>
 8018b22:	6020      	str	r0, [r4, #0]
 8018b24:	6120      	str	r0, [r4, #16]
 8018b26:	b928      	cbnz	r0, 8018b34 <_svfiprintf_r+0x30>
 8018b28:	230c      	movs	r3, #12
 8018b2a:	f8c8 3000 	str.w	r3, [r8]
 8018b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8018b32:	e0c8      	b.n	8018cc6 <_svfiprintf_r+0x1c2>
 8018b34:	2340      	movs	r3, #64	; 0x40
 8018b36:	6163      	str	r3, [r4, #20]
 8018b38:	2300      	movs	r3, #0
 8018b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8018b3c:	2320      	movs	r3, #32
 8018b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018b42:	2330      	movs	r3, #48	; 0x30
 8018b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018b48:	9503      	str	r5, [sp, #12]
 8018b4a:	f04f 0b01 	mov.w	fp, #1
 8018b4e:	4637      	mov	r7, r6
 8018b50:	463d      	mov	r5, r7
 8018b52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018b56:	b10b      	cbz	r3, 8018b5c <_svfiprintf_r+0x58>
 8018b58:	2b25      	cmp	r3, #37	; 0x25
 8018b5a:	d13e      	bne.n	8018bda <_svfiprintf_r+0xd6>
 8018b5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8018b60:	d00b      	beq.n	8018b7a <_svfiprintf_r+0x76>
 8018b62:	4653      	mov	r3, sl
 8018b64:	4632      	mov	r2, r6
 8018b66:	4621      	mov	r1, r4
 8018b68:	4640      	mov	r0, r8
 8018b6a:	f7ff ff70 	bl	8018a4e <__ssputs_r>
 8018b6e:	3001      	adds	r0, #1
 8018b70:	f000 80a4 	beq.w	8018cbc <_svfiprintf_r+0x1b8>
 8018b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b76:	4453      	add	r3, sl
 8018b78:	9309      	str	r3, [sp, #36]	; 0x24
 8018b7a:	783b      	ldrb	r3, [r7, #0]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	f000 809d 	beq.w	8018cbc <_svfiprintf_r+0x1b8>
 8018b82:	2300      	movs	r3, #0
 8018b84:	f04f 32ff 	mov.w	r2, #4294967295
 8018b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b8c:	9304      	str	r3, [sp, #16]
 8018b8e:	9307      	str	r3, [sp, #28]
 8018b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b94:	931a      	str	r3, [sp, #104]	; 0x68
 8018b96:	462f      	mov	r7, r5
 8018b98:	2205      	movs	r2, #5
 8018b9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018b9e:	4850      	ldr	r0, [pc, #320]	; (8018ce0 <_svfiprintf_r+0x1dc>)
 8018ba0:	f7ef fa56 	bl	8008050 <memchr>
 8018ba4:	9b04      	ldr	r3, [sp, #16]
 8018ba6:	b9d0      	cbnz	r0, 8018bde <_svfiprintf_r+0xda>
 8018ba8:	06d9      	lsls	r1, r3, #27
 8018baa:	bf44      	itt	mi
 8018bac:	2220      	movmi	r2, #32
 8018bae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018bb2:	071a      	lsls	r2, r3, #28
 8018bb4:	bf44      	itt	mi
 8018bb6:	222b      	movmi	r2, #43	; 0x2b
 8018bb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018bbc:	782a      	ldrb	r2, [r5, #0]
 8018bbe:	2a2a      	cmp	r2, #42	; 0x2a
 8018bc0:	d015      	beq.n	8018bee <_svfiprintf_r+0xea>
 8018bc2:	9a07      	ldr	r2, [sp, #28]
 8018bc4:	462f      	mov	r7, r5
 8018bc6:	2000      	movs	r0, #0
 8018bc8:	250a      	movs	r5, #10
 8018bca:	4639      	mov	r1, r7
 8018bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018bd0:	3b30      	subs	r3, #48	; 0x30
 8018bd2:	2b09      	cmp	r3, #9
 8018bd4:	d94d      	bls.n	8018c72 <_svfiprintf_r+0x16e>
 8018bd6:	b1b8      	cbz	r0, 8018c08 <_svfiprintf_r+0x104>
 8018bd8:	e00f      	b.n	8018bfa <_svfiprintf_r+0xf6>
 8018bda:	462f      	mov	r7, r5
 8018bdc:	e7b8      	b.n	8018b50 <_svfiprintf_r+0x4c>
 8018bde:	4a40      	ldr	r2, [pc, #256]	; (8018ce0 <_svfiprintf_r+0x1dc>)
 8018be0:	1a80      	subs	r0, r0, r2
 8018be2:	fa0b f000 	lsl.w	r0, fp, r0
 8018be6:	4318      	orrs	r0, r3
 8018be8:	9004      	str	r0, [sp, #16]
 8018bea:	463d      	mov	r5, r7
 8018bec:	e7d3      	b.n	8018b96 <_svfiprintf_r+0x92>
 8018bee:	9a03      	ldr	r2, [sp, #12]
 8018bf0:	1d11      	adds	r1, r2, #4
 8018bf2:	6812      	ldr	r2, [r2, #0]
 8018bf4:	9103      	str	r1, [sp, #12]
 8018bf6:	2a00      	cmp	r2, #0
 8018bf8:	db01      	blt.n	8018bfe <_svfiprintf_r+0xfa>
 8018bfa:	9207      	str	r2, [sp, #28]
 8018bfc:	e004      	b.n	8018c08 <_svfiprintf_r+0x104>
 8018bfe:	4252      	negs	r2, r2
 8018c00:	f043 0302 	orr.w	r3, r3, #2
 8018c04:	9207      	str	r2, [sp, #28]
 8018c06:	9304      	str	r3, [sp, #16]
 8018c08:	783b      	ldrb	r3, [r7, #0]
 8018c0a:	2b2e      	cmp	r3, #46	; 0x2e
 8018c0c:	d10c      	bne.n	8018c28 <_svfiprintf_r+0x124>
 8018c0e:	787b      	ldrb	r3, [r7, #1]
 8018c10:	2b2a      	cmp	r3, #42	; 0x2a
 8018c12:	d133      	bne.n	8018c7c <_svfiprintf_r+0x178>
 8018c14:	9b03      	ldr	r3, [sp, #12]
 8018c16:	1d1a      	adds	r2, r3, #4
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	9203      	str	r2, [sp, #12]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	bfb8      	it	lt
 8018c20:	f04f 33ff 	movlt.w	r3, #4294967295
 8018c24:	3702      	adds	r7, #2
 8018c26:	9305      	str	r3, [sp, #20]
 8018c28:	4d2e      	ldr	r5, [pc, #184]	; (8018ce4 <_svfiprintf_r+0x1e0>)
 8018c2a:	7839      	ldrb	r1, [r7, #0]
 8018c2c:	2203      	movs	r2, #3
 8018c2e:	4628      	mov	r0, r5
 8018c30:	f7ef fa0e 	bl	8008050 <memchr>
 8018c34:	b138      	cbz	r0, 8018c46 <_svfiprintf_r+0x142>
 8018c36:	2340      	movs	r3, #64	; 0x40
 8018c38:	1b40      	subs	r0, r0, r5
 8018c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8018c3e:	9b04      	ldr	r3, [sp, #16]
 8018c40:	4303      	orrs	r3, r0
 8018c42:	3701      	adds	r7, #1
 8018c44:	9304      	str	r3, [sp, #16]
 8018c46:	7839      	ldrb	r1, [r7, #0]
 8018c48:	4827      	ldr	r0, [pc, #156]	; (8018ce8 <_svfiprintf_r+0x1e4>)
 8018c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018c4e:	2206      	movs	r2, #6
 8018c50:	1c7e      	adds	r6, r7, #1
 8018c52:	f7ef f9fd 	bl	8008050 <memchr>
 8018c56:	2800      	cmp	r0, #0
 8018c58:	d038      	beq.n	8018ccc <_svfiprintf_r+0x1c8>
 8018c5a:	4b24      	ldr	r3, [pc, #144]	; (8018cec <_svfiprintf_r+0x1e8>)
 8018c5c:	bb13      	cbnz	r3, 8018ca4 <_svfiprintf_r+0x1a0>
 8018c5e:	9b03      	ldr	r3, [sp, #12]
 8018c60:	3307      	adds	r3, #7
 8018c62:	f023 0307 	bic.w	r3, r3, #7
 8018c66:	3308      	adds	r3, #8
 8018c68:	9303      	str	r3, [sp, #12]
 8018c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c6c:	444b      	add	r3, r9
 8018c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8018c70:	e76d      	b.n	8018b4e <_svfiprintf_r+0x4a>
 8018c72:	fb05 3202 	mla	r2, r5, r2, r3
 8018c76:	2001      	movs	r0, #1
 8018c78:	460f      	mov	r7, r1
 8018c7a:	e7a6      	b.n	8018bca <_svfiprintf_r+0xc6>
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	3701      	adds	r7, #1
 8018c80:	9305      	str	r3, [sp, #20]
 8018c82:	4619      	mov	r1, r3
 8018c84:	250a      	movs	r5, #10
 8018c86:	4638      	mov	r0, r7
 8018c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c8c:	3a30      	subs	r2, #48	; 0x30
 8018c8e:	2a09      	cmp	r2, #9
 8018c90:	d903      	bls.n	8018c9a <_svfiprintf_r+0x196>
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d0c8      	beq.n	8018c28 <_svfiprintf_r+0x124>
 8018c96:	9105      	str	r1, [sp, #20]
 8018c98:	e7c6      	b.n	8018c28 <_svfiprintf_r+0x124>
 8018c9a:	fb05 2101 	mla	r1, r5, r1, r2
 8018c9e:	2301      	movs	r3, #1
 8018ca0:	4607      	mov	r7, r0
 8018ca2:	e7f0      	b.n	8018c86 <_svfiprintf_r+0x182>
 8018ca4:	ab03      	add	r3, sp, #12
 8018ca6:	9300      	str	r3, [sp, #0]
 8018ca8:	4622      	mov	r2, r4
 8018caa:	4b11      	ldr	r3, [pc, #68]	; (8018cf0 <_svfiprintf_r+0x1ec>)
 8018cac:	a904      	add	r1, sp, #16
 8018cae:	4640      	mov	r0, r8
 8018cb0:	f7fb fb64 	bl	801437c <_printf_float>
 8018cb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018cb8:	4681      	mov	r9, r0
 8018cba:	d1d6      	bne.n	8018c6a <_svfiprintf_r+0x166>
 8018cbc:	89a3      	ldrh	r3, [r4, #12]
 8018cbe:	065b      	lsls	r3, r3, #25
 8018cc0:	f53f af35 	bmi.w	8018b2e <_svfiprintf_r+0x2a>
 8018cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018cc6:	b01d      	add	sp, #116	; 0x74
 8018cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ccc:	ab03      	add	r3, sp, #12
 8018cce:	9300      	str	r3, [sp, #0]
 8018cd0:	4622      	mov	r2, r4
 8018cd2:	4b07      	ldr	r3, [pc, #28]	; (8018cf0 <_svfiprintf_r+0x1ec>)
 8018cd4:	a904      	add	r1, sp, #16
 8018cd6:	4640      	mov	r0, r8
 8018cd8:	f7fb fe06 	bl	80148e8 <_printf_i>
 8018cdc:	e7ea      	b.n	8018cb4 <_svfiprintf_r+0x1b0>
 8018cde:	bf00      	nop
 8018ce0:	0801925c 	.word	0x0801925c
 8018ce4:	08019262 	.word	0x08019262
 8018ce8:	08019266 	.word	0x08019266
 8018cec:	0801437d 	.word	0x0801437d
 8018cf0:	08018a4f 	.word	0x08018a4f

08018cf4 <_putc_r>:
 8018cf4:	b570      	push	{r4, r5, r6, lr}
 8018cf6:	460d      	mov	r5, r1
 8018cf8:	4614      	mov	r4, r2
 8018cfa:	4606      	mov	r6, r0
 8018cfc:	b118      	cbz	r0, 8018d06 <_putc_r+0x12>
 8018cfe:	6983      	ldr	r3, [r0, #24]
 8018d00:	b90b      	cbnz	r3, 8018d06 <_putc_r+0x12>
 8018d02:	f7fa ff7d 	bl	8013c00 <__sinit>
 8018d06:	4b13      	ldr	r3, [pc, #76]	; (8018d54 <_putc_r+0x60>)
 8018d08:	429c      	cmp	r4, r3
 8018d0a:	d112      	bne.n	8018d32 <_putc_r+0x3e>
 8018d0c:	6874      	ldr	r4, [r6, #4]
 8018d0e:	68a3      	ldr	r3, [r4, #8]
 8018d10:	3b01      	subs	r3, #1
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	60a3      	str	r3, [r4, #8]
 8018d16:	da16      	bge.n	8018d46 <_putc_r+0x52>
 8018d18:	69a2      	ldr	r2, [r4, #24]
 8018d1a:	4293      	cmp	r3, r2
 8018d1c:	db02      	blt.n	8018d24 <_putc_r+0x30>
 8018d1e:	b2eb      	uxtb	r3, r5
 8018d20:	2b0a      	cmp	r3, #10
 8018d22:	d110      	bne.n	8018d46 <_putc_r+0x52>
 8018d24:	4622      	mov	r2, r4
 8018d26:	4629      	mov	r1, r5
 8018d28:	4630      	mov	r0, r6
 8018d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d2e:	f7fd bf85 	b.w	8016c3c <__swbuf_r>
 8018d32:	4b09      	ldr	r3, [pc, #36]	; (8018d58 <_putc_r+0x64>)
 8018d34:	429c      	cmp	r4, r3
 8018d36:	d101      	bne.n	8018d3c <_putc_r+0x48>
 8018d38:	68b4      	ldr	r4, [r6, #8]
 8018d3a:	e7e8      	b.n	8018d0e <_putc_r+0x1a>
 8018d3c:	4b07      	ldr	r3, [pc, #28]	; (8018d5c <_putc_r+0x68>)
 8018d3e:	429c      	cmp	r4, r3
 8018d40:	bf08      	it	eq
 8018d42:	68f4      	ldreq	r4, [r6, #12]
 8018d44:	e7e3      	b.n	8018d0e <_putc_r+0x1a>
 8018d46:	6823      	ldr	r3, [r4, #0]
 8018d48:	1c5a      	adds	r2, r3, #1
 8018d4a:	6022      	str	r2, [r4, #0]
 8018d4c:	701d      	strb	r5, [r3, #0]
 8018d4e:	b2e8      	uxtb	r0, r5
 8018d50:	bd70      	pop	{r4, r5, r6, pc}
 8018d52:	bf00      	nop
 8018d54:	08019218 	.word	0x08019218
 8018d58:	08019238 	.word	0x08019238
 8018d5c:	080191f8 	.word	0x080191f8

08018d60 <_read_r>:
 8018d60:	b538      	push	{r3, r4, r5, lr}
 8018d62:	4c07      	ldr	r4, [pc, #28]	; (8018d80 <_read_r+0x20>)
 8018d64:	4605      	mov	r5, r0
 8018d66:	4608      	mov	r0, r1
 8018d68:	4611      	mov	r1, r2
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	6022      	str	r2, [r4, #0]
 8018d6e:	461a      	mov	r2, r3
 8018d70:	f7f4 fb6a 	bl	800d448 <_read>
 8018d74:	1c43      	adds	r3, r0, #1
 8018d76:	d102      	bne.n	8018d7e <_read_r+0x1e>
 8018d78:	6823      	ldr	r3, [r4, #0]
 8018d7a:	b103      	cbz	r3, 8018d7e <_read_r+0x1e>
 8018d7c:	602b      	str	r3, [r5, #0]
 8018d7e:	bd38      	pop	{r3, r4, r5, pc}
 8018d80:	20008f4c 	.word	0x20008f4c

08018d84 <strncmp>:
 8018d84:	b510      	push	{r4, lr}
 8018d86:	b16a      	cbz	r2, 8018da4 <strncmp+0x20>
 8018d88:	3901      	subs	r1, #1
 8018d8a:	1884      	adds	r4, r0, r2
 8018d8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018d90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018d94:	4293      	cmp	r3, r2
 8018d96:	d103      	bne.n	8018da0 <strncmp+0x1c>
 8018d98:	42a0      	cmp	r0, r4
 8018d9a:	d001      	beq.n	8018da0 <strncmp+0x1c>
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d1f5      	bne.n	8018d8c <strncmp+0x8>
 8018da0:	1a98      	subs	r0, r3, r2
 8018da2:	bd10      	pop	{r4, pc}
 8018da4:	4610      	mov	r0, r2
 8018da6:	e7fc      	b.n	8018da2 <strncmp+0x1e>

08018da8 <__ascii_wctomb>:
 8018da8:	b149      	cbz	r1, 8018dbe <__ascii_wctomb+0x16>
 8018daa:	2aff      	cmp	r2, #255	; 0xff
 8018dac:	bf85      	ittet	hi
 8018dae:	238a      	movhi	r3, #138	; 0x8a
 8018db0:	6003      	strhi	r3, [r0, #0]
 8018db2:	700a      	strbls	r2, [r1, #0]
 8018db4:	f04f 30ff 	movhi.w	r0, #4294967295
 8018db8:	bf98      	it	ls
 8018dba:	2001      	movls	r0, #1
 8018dbc:	4770      	bx	lr
 8018dbe:	4608      	mov	r0, r1
 8018dc0:	4770      	bx	lr

08018dc2 <_malloc_usable_size_r>:
 8018dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018dc6:	1f18      	subs	r0, r3, #4
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	bfbc      	itt	lt
 8018dcc:	580b      	ldrlt	r3, [r1, r0]
 8018dce:	18c0      	addlt	r0, r0, r3
 8018dd0:	4770      	bx	lr
	...

08018dd4 <_init>:
 8018dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dd6:	bf00      	nop
 8018dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018dda:	bc08      	pop	{r3}
 8018ddc:	469e      	mov	lr, r3
 8018dde:	4770      	bx	lr

08018de0 <_fini>:
 8018de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018de2:	bf00      	nop
 8018de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018de6:	bc08      	pop	{r3}
 8018de8:	469e      	mov	lr, r3
 8018dea:	4770      	bx	lr
