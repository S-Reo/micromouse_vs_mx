
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         00011e94  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000760  08019e98  08019e98  00029e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0801a5f8  0801a5f8  0003020c  2**0
                  CONTENTS
  6 .ARM          00000008  0801a5f8  0801a5f8  0002a5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0801a600  0801a600  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0801a600  0801a600  0002a600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801a604  0801a604  0002a604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000020c  20000000  0801a608  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008d44  2000020c  0801a814  0003020c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008f50  0801a814  00038f50  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002b995  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00005b2b  00000000  00000000  0005bbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001918  00000000  00000000  00061700  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b68  00000000  00000000  00063018  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00028901  00000000  00000000  00064b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000199a5  00000000  00000000  0008d481  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000cad2b  00000000  00000000  000a6e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00171b51  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007bb4  00000000  00000000  00171bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00002721  00000000  00000000  00179780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	2000020c 	.word	0x2000020c
 800801c:	00000000 	.word	0x00000000
 8008020:	08019e7c 	.word	0x08019e7c

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000210 	.word	0x20000210
 800803c:	08019e7c 	.word	0x08019e7c

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
	/* 出力 */
}


void InitPosition()
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	Pos.X = 0;
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <InitPosition+0x34>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
	Pos.Y = 0;
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <InitPosition+0x34>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	705a      	strb	r2, [r3, #1]
	Pos.Car = north;
 8008e08:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <InitPosition+0x34>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	715a      	strb	r2, [r3, #5]
	Pos.Dir = front;
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <InitPosition+0x34>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	711a      	strb	r2, [r3, #4]
	Pos.Act = Wait;
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <InitPosition+0x34>)
 8008e16:	2204      	movs	r2, #4
 8008e18:	719a      	strb	r2, [r3, #6]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <InitPosition+0x34>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	71da      	strb	r2, [r3, #7]

}
 8008e20:	bf00      	nop
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000008 	.word	0x20000008

08008e30 <GetWallCtrlDirection>:

int GetWallCtrlDirection()
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0
	//新ライブラリ用に変更
	switch(my_mouse.now.car)
 8008e34:	4b67      	ldr	r3, [pc, #412]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008e36:	7a9b      	ldrb	r3, [r3, #10]
 8008e38:	2b06      	cmp	r3, #6
 8008e3a:	f200 80c5 	bhi.w	8008fc8 <GetWallCtrlDirection+0x198>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <GetWallCtrlDirection+0x14>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e61 	.word	0x08008e61
 8008e48:	08008fc9 	.word	0x08008fc9
 8008e4c:	08008ebb 	.word	0x08008ebb
 8008e50:	08008fc9 	.word	0x08008fc9
 8008e54:	08008f15 	.word	0x08008f15
 8008e58:	08008fc9 	.word	0x08008fc9
 8008e5c:	08008f6f 	.word	0x08008f6f
	{
	case north:
		if(my_mouse.now.wall.north == wall) //現在の方角と、座標から、壁の存在を確認する処理
 8008e60:	4b5c      	ldr	r3, [pc, #368]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008e62:	7b1b      	ldrb	r3, [r3, #12]
 8008e64:	f003 0303 	and.w	r3, r3, #3
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <GetWallCtrlDirection+0x42>
		{
			return F_WALL_PID;
 8008e6e:	2308      	movs	r3, #8
 8008e70:	e0ab      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if(my_mouse.now.wall.east == wall && my_mouse.now.wall.west == wall)
 8008e72:	4b58      	ldr	r3, [pc, #352]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008e74:	7b1b      	ldrb	r3, [r3, #12]
 8008e76:	f003 030c 	and.w	r3, r3, #12
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d108      	bne.n	8008e92 <GetWallCtrlDirection+0x62>
 8008e80:	4b54      	ldr	r3, [pc, #336]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008e82:	7b1b      	ldrb	r3, [r3, #12]
 8008e84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b40      	cmp	r3, #64	; 0x40
 8008e8c:	d101      	bne.n	8008e92 <GetWallCtrlDirection+0x62>
		{
			return D_WALL_PID;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e09b      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if(my_mouse.now.wall.east == wall)
 8008e92:	4b50      	ldr	r3, [pc, #320]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008e94:	7b1b      	ldrb	r3, [r3, #12]
 8008e96:	f003 030c 	and.w	r3, r3, #12
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d101      	bne.n	8008ea4 <GetWallCtrlDirection+0x74>
		{
			return R_WALL_PID;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e092      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if(my_mouse.now.wall.west == wall)
 8008ea4:	4b4b      	ldr	r3, [pc, #300]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008ea6:	7b1b      	ldrb	r3, [r3, #12]
 8008ea8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b40      	cmp	r3, #64	; 0x40
 8008eb0:	d101      	bne.n	8008eb6 <GetWallCtrlDirection+0x86>
		{
			return L_WALL_PID;
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	e089      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else
		{
			return N_WALL_PID;
 8008eb6:	2306      	movs	r3, #6
 8008eb8:	e087      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		break;

	case east:
		if(my_mouse.now.wall.east == wall)
 8008eba:	4b46      	ldr	r3, [pc, #280]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008ebc:	7b1b      	ldrb	r3, [r3, #12]
 8008ebe:	f003 030c 	and.w	r3, r3, #12
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	d101      	bne.n	8008ecc <GetWallCtrlDirection+0x9c>
		{
			return F_WALL_PID;
 8008ec8:	2308      	movs	r3, #8
 8008eca:	e07e      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if(my_mouse.now.wall.north == wall && my_mouse.now.wall.south == wall)//south)
 8008ecc:	4b41      	ldr	r3, [pc, #260]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008ece:	7b1b      	ldrb	r3, [r3, #12]
 8008ed0:	f003 0303 	and.w	r3, r3, #3
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d108      	bne.n	8008eec <GetWallCtrlDirection+0xbc>
 8008eda:	4b3e      	ldr	r3, [pc, #248]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008edc:	7b1b      	ldrb	r3, [r3, #12]
 8008ede:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b10      	cmp	r3, #16
 8008ee6:	d101      	bne.n	8008eec <GetWallCtrlDirection+0xbc>
		{
			return D_WALL_PID;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e06e      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if(my_mouse.now.wall.north == wall)
 8008eec:	4b39      	ldr	r3, [pc, #228]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008eee:	7b1b      	ldrb	r3, [r3, #12]
 8008ef0:	f003 0303 	and.w	r3, r3, #3
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d101      	bne.n	8008efe <GetWallCtrlDirection+0xce>
		{
			return L_WALL_PID;
 8008efa:	2302      	movs	r3, #2
 8008efc:	e065      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if(my_mouse.now.wall.south == wall)
 8008efe:	4b35      	ldr	r3, [pc, #212]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008f00:	7b1b      	ldrb	r3, [r3, #12]
 8008f02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b10      	cmp	r3, #16
 8008f0a:	d101      	bne.n	8008f10 <GetWallCtrlDirection+0xe0>
		{
			return R_WALL_PID;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e05c      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else
		{
			return N_WALL_PID;
 8008f10:	2306      	movs	r3, #6
 8008f12:	e05a      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		break;
	case south:
		if(my_mouse.now.wall.south == wall)
 8008f14:	4b2f      	ldr	r3, [pc, #188]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008f16:	7b1b      	ldrb	r3, [r3, #12]
 8008f18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b10      	cmp	r3, #16
 8008f20:	d101      	bne.n	8008f26 <GetWallCtrlDirection+0xf6>
		{
			return F_WALL_PID;
 8008f22:	2308      	movs	r3, #8
 8008f24:	e051      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if(my_mouse.now.wall.east == wall && my_mouse.now.wall.west == wall)
 8008f26:	4b2b      	ldr	r3, [pc, #172]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008f28:	7b1b      	ldrb	r3, [r3, #12]
 8008f2a:	f003 030c 	and.w	r3, r3, #12
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b04      	cmp	r3, #4
 8008f32:	d108      	bne.n	8008f46 <GetWallCtrlDirection+0x116>
 8008f34:	4b27      	ldr	r3, [pc, #156]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008f36:	7b1b      	ldrb	r3, [r3, #12]
 8008f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b40      	cmp	r3, #64	; 0x40
 8008f40:	d101      	bne.n	8008f46 <GetWallCtrlDirection+0x116>
		{
			return D_WALL_PID;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e041      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if(my_mouse.now.wall.east == wall)
 8008f46:	4b23      	ldr	r3, [pc, #140]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008f48:	7b1b      	ldrb	r3, [r3, #12]
 8008f4a:	f003 030c 	and.w	r3, r3, #12
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b04      	cmp	r3, #4
 8008f52:	d101      	bne.n	8008f58 <GetWallCtrlDirection+0x128>
		{
			return L_WALL_PID;
 8008f54:	2302      	movs	r3, #2
 8008f56:	e038      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if(my_mouse.now.wall.west == wall)
 8008f58:	4b1e      	ldr	r3, [pc, #120]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008f5a:	7b1b      	ldrb	r3, [r3, #12]
 8008f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b40      	cmp	r3, #64	; 0x40
 8008f64:	d101      	bne.n	8008f6a <GetWallCtrlDirection+0x13a>
		{
			return R_WALL_PID;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e02f      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else
		{
			return N_WALL_PID;
 8008f6a:	2306      	movs	r3, #6
 8008f6c:	e02d      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		break;
	case west:
		if(my_mouse.now.wall.west == wall)
 8008f6e:	4b19      	ldr	r3, [pc, #100]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008f70:	7b1b      	ldrb	r3, [r3, #12]
 8008f72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b40      	cmp	r3, #64	; 0x40
 8008f7a:	d101      	bne.n	8008f80 <GetWallCtrlDirection+0x150>
		{
			return F_WALL_PID;
 8008f7c:	2308      	movs	r3, #8
 8008f7e:	e024      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if ( my_mouse.now.wall.north == wall && my_mouse.now.wall.south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8008f80:	4b14      	ldr	r3, [pc, #80]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008f82:	7b1b      	ldrb	r3, [r3, #12]
 8008f84:	f003 0303 	and.w	r3, r3, #3
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d108      	bne.n	8008fa0 <GetWallCtrlDirection+0x170>
 8008f8e:	4b11      	ldr	r3, [pc, #68]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008f90:	7b1b      	ldrb	r3, [r3, #12]
 8008f92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b10      	cmp	r3, #16
 8008f9a:	d101      	bne.n	8008fa0 <GetWallCtrlDirection+0x170>
		{
			return D_WALL_PID;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e014      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if ( my_mouse.now.wall.north == wall )
 8008fa0:	4b0c      	ldr	r3, [pc, #48]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008fa2:	7b1b      	ldrb	r3, [r3, #12]
 8008fa4:	f003 0303 	and.w	r3, r3, #3
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <GetWallCtrlDirection+0x182>
		{
			return R_WALL_PID;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e00b      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else if ( my_mouse.now.wall.south == wall )
 8008fb2:	4b08      	ldr	r3, [pc, #32]	; (8008fd4 <GetWallCtrlDirection+0x1a4>)
 8008fb4:	7b1b      	ldrb	r3, [r3, #12]
 8008fb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b10      	cmp	r3, #16
 8008fbe:	d101      	bne.n	8008fc4 <GetWallCtrlDirection+0x194>
		{
			return L_WALL_PID;
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	e002      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		else
		{
			return N_WALL_PID;
 8008fc4:	2306      	movs	r3, #6
 8008fc6:	e000      	b.n	8008fca <GetWallCtrlDirection+0x19a>
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8008fc8:	2306      	movs	r3, #6
		break;
	}

}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	20008224 	.word	0x20008224

08008fd8 <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
//	ControlWall();//ベイブレード対策
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 8008fdc:	4b0f      	ldr	r3, [pc, #60]	; (800901c <WaitStopAndReset+0x44>)
 8008fde:	f04f 0200 	mov.w	r2, #0
 8008fe2:	609a      	str	r2, [r3, #8]
		Acceleration = 0;
 8008fe4:	4b0e      	ldr	r3, [pc, #56]	; (8009020 <WaitStopAndReset+0x48>)
 8008fe6:	f04f 0200 	mov.w	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
 8008fec:	4b0d      	ldr	r3, [pc, #52]	; (8009024 <WaitStopAndReset+0x4c>)
 8008fee:	f04f 0200 	mov.w	r2, #0
 8008ff2:	601a      	str	r2, [r3, #0]
		AngularAcceleration = 0;
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <WaitStopAndReset+0x50>)
 8008ff6:	f04f 0200 	mov.w	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]
		//AngularV = 0;
//		if(CurrentVelocity[LEFT] > 500)
			ChangeLED(3);
 8008ffc:	2003      	movs	r0, #3
 8008ffe:	f005 fc1f 	bl	800e840 <ChangeLED>
			//printf("回転停止中\r\n");

	}while(CurrentVelocity[BODY] != 0);
 8009002:	4b0a      	ldr	r3, [pc, #40]	; (800902c <WaitStopAndReset+0x54>)
 8009004:	edd3 7a02 	vldr	s15, [r3, #8]
 8009008:	eef5 7a40 	vcmp.f32	s15, #0.0
 800900c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009010:	d1e4      	bne.n	8008fdc <WaitStopAndReset+0x4>
	HAL_Delay(100);
 8009012:	2064      	movs	r0, #100	; 0x64
 8009014:	f006 fd50 	bl	800fab8 <HAL_Delay>
}
 8009018:	bf00      	nop
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20008988 	.word	0x20008988
 8009020:	20007f3c 	.word	0x20007f3c
 8009024:	20008998 	.word	0x20008998
 8009028:	20007f40 	.word	0x20007f40
 800902c:	200089c4 	.word	0x200089c4

08009030 <Rotate>:
	//向いた方角を変える
	ChangeCardinal();
	//printf("回転終了\r\n");
}
void Rotate(float deg, float ang_v)
{
 8009030:	b590      	push	{r4, r7, lr}
 8009032:	b08d      	sub	sp, #52	; 0x34
 8009034:	af00      	add	r7, sp, #0
 8009036:	ed87 0a01 	vstr	s0, [r7, #4]
 800903a:	edc7 0a00 	vstr	s1, [r7]
//	Pos.Act = rotate;
//	WallWarn();
//	ControlWall(); //壁の読み間違いによる制御方式選択ミスで角加速から抜け出せないか、角度がリセットされている。
	TargetAngularV = 0;
 800903e:	4bce      	ldr	r3, [pc, #824]	; (8009378 <Rotate+0x348>)
 8009040:	f04f 0200 	mov.w	r2, #0
 8009044:	601a      	str	r2, [r3, #0]
	//加速度が一定。角速度が増加。角速度を積分して角度。角速度の式を作り、角速度を積分して角度を求める等式を立てる。
	//Angle = インテグラル(ang_v(t))dt
	//v = v0+at	|	t=v/a	||		ang_v = ang_v0 + ang_accel *t		||	t = ang_v/ang_accel
	//x=0.5*v*v/a	|	a = 0.5*v*v*/x		||		θ=ang_v0*t+0.5*ang_v^2/ang_accel	||	ang_accel =
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)
	float accel_deg = deg*30/90;
 8009046:	edd7 7a01 	vldr	s15, [r7, #4]
 800904a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800904e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009052:	eddf 6aca 	vldr	s13, [pc, #808]	; 800937c <Rotate+0x34c>
 8009056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800905a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float const_deg = deg*30/90;
 800905e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009062:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8009066:	ee27 7a87 	vmul.f32	s14, s15, s14
 800906a:	eddf 6ac4 	vldr	s13, [pc, #784]	; 800937c <Rotate+0x34c>
 800906e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009072:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float decel_deg = deg*30/90;
 8009076:	edd7 7a01 	vldr	s15, [r7, #4]
 800907a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800907e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009082:	eddf 6abe 	vldr	s13, [pc, #760]	; 800937c <Rotate+0x34c>
 8009086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800908a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 800908e:	edd7 7a00 	vldr	s15, [r7]
 8009092:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8009380 <Rotate+0x350>
 8009096:	ee27 7a87 	vmul.f32	s14, s15, s14
 800909a:	edd7 7a00 	vldr	s15, [r7]
 800909e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80090a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80090a6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80090aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 80090ae:	edc7 7a05 	vstr	s15, [r7, #20]
 80090b2:	f04f 0300 	mov.w	r3, #0
 80090b6:	61bb      	str	r3, [r7, #24]
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
 80090b8:	edd7 7a00 	vldr	s15, [r7]
 80090bc:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8009380 <Rotate+0x350>
 80090c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80090c4:	edd7 7a00 	vldr	s15, [r7]
 80090c8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80090cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80090d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 80090d8:	edc7 7a07 	vstr	s15, [r7, #28]
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 80090dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090de:	f7ff f96b 	bl	80083b8 <__aeabi_f2d>
 80090e2:	a3a1      	add	r3, pc, #644	; (adr r3, 8009368 <Rotate+0x338>)
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f7ff f9be 	bl	8008468 <__aeabi_dmul>
 80090ec:	4603      	mov	r3, r0
 80090ee:	460c      	mov	r4, r1
 80090f0:	4618      	mov	r0, r3
 80090f2:	4621      	mov	r1, r4
 80090f4:	f04f 0200 	mov.w	r2, #0
 80090f8:	4ba2      	ldr	r3, [pc, #648]	; (8009384 <Rotate+0x354>)
 80090fa:	f7ff fadf 	bl	80086bc <__aeabi_ddiv>
 80090fe:	4603      	mov	r3, r0
 8009100:	460c      	mov	r4, r1
 8009102:	4618      	mov	r0, r3
 8009104:	4621      	mov	r1, r4
 8009106:	f7ff fca7 	bl	8008a58 <__aeabi_d2f>
 800910a:	4603      	mov	r3, r0
	float move_angle[3] = {
 800910c:	60bb      	str	r3, [r7, #8]
			const_deg * M_PI/ 180,
 800910e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009110:	f7ff f952 	bl	80083b8 <__aeabi_f2d>
 8009114:	a394      	add	r3, pc, #592	; (adr r3, 8009368 <Rotate+0x338>)
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	f7ff f9a5 	bl	8008468 <__aeabi_dmul>
 800911e:	4603      	mov	r3, r0
 8009120:	460c      	mov	r4, r1
 8009122:	4618      	mov	r0, r3
 8009124:	4621      	mov	r1, r4
 8009126:	f04f 0200 	mov.w	r2, #0
 800912a:	4b96      	ldr	r3, [pc, #600]	; (8009384 <Rotate+0x354>)
 800912c:	f7ff fac6 	bl	80086bc <__aeabi_ddiv>
 8009130:	4603      	mov	r3, r0
 8009132:	460c      	mov	r4, r1
 8009134:	4618      	mov	r0, r3
 8009136:	4621      	mov	r1, r4
 8009138:	f7ff fc8e 	bl	8008a58 <__aeabi_d2f>
 800913c:	4603      	mov	r3, r0
	float move_angle[3] = {
 800913e:	60fb      	str	r3, [r7, #12]
			decel_deg * M_PI/ 180,
 8009140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009142:	f7ff f939 	bl	80083b8 <__aeabi_f2d>
 8009146:	a388      	add	r3, pc, #544	; (adr r3, 8009368 <Rotate+0x338>)
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f7ff f98c 	bl	8008468 <__aeabi_dmul>
 8009150:	4603      	mov	r3, r0
 8009152:	460c      	mov	r4, r1
 8009154:	4618      	mov	r0, r3
 8009156:	4621      	mov	r1, r4
 8009158:	f04f 0200 	mov.w	r2, #0
 800915c:	4b89      	ldr	r3, [pc, #548]	; (8009384 <Rotate+0x354>)
 800915e:	f7ff faad 	bl	80086bc <__aeabi_ddiv>
 8009162:	4603      	mov	r3, r0
 8009164:	460c      	mov	r4, r1
 8009166:	4618      	mov	r0, r3
 8009168:	4621      	mov	r1, r4
 800916a:	f7ff fc75 	bl	8008a58 <__aeabi_d2f>
 800916e:	4603      	mov	r3, r0
	float move_angle[3] = {
 8009170:	613b      	str	r3, [r7, #16]
		}

	}
#endif

	if( ang_v > 0)	//右回転
 8009172:	edd7 7a00 	vldr	s15, [r7]
 8009176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800917a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800917e:	dd57      	ble.n	8009230 <Rotate+0x200>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009180:	ed97 7a02 	vldr	s14, [r7, #8]
 8009184:	4b80      	ldr	r3, [pc, #512]	; (8009388 <Rotate+0x358>)
 8009186:	edd3 7a00 	vldr	s15, [r3]
 800918a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800918e:	4b7e      	ldr	r3, [pc, #504]	; (8009388 <Rotate+0x358>)
 8009190:	edc3 7a00 	vstr	s15, [r3]
//		ChangeLED(2);
		//ここのwhileが抜けないことがある
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009194:	e002      	b.n	800919c <Rotate+0x16c>
		{
			//最短走行の時だけ、Angleが大きくならない、もしくは目標角度がかなり大きい。初期化？最初の旋回なので、0radから90度ぶん目標角度がズレている必要がある。Angleが積算できていないかも。
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	4a7c      	ldr	r2, [pc, #496]	; (800938c <Rotate+0x35c>)
 800919a:	6013      	str	r3, [r2, #0]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800919c:	4b7a      	ldr	r3, [pc, #488]	; (8009388 <Rotate+0x358>)
 800919e:	ed93 7a00 	vldr	s14, [r3]
 80091a2:	4b7b      	ldr	r3, [pc, #492]	; (8009390 <Rotate+0x360>)
 80091a4:	edd3 7a00 	vldr	s15, [r3]
 80091a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80091ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b0:	dcf1      	bgt.n	8009196 <Rotate+0x166>
//					printf("読み出した角速度の値 : %f, オフセット : %f, 角度 : %f\r\n", ZGyro, zg_offset, fin_angle );
//				}
//
//			}
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80091b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80091b6:	4b74      	ldr	r3, [pc, #464]	; (8009388 <Rotate+0x358>)
 80091b8:	edd3 7a00 	vldr	s15, [r3]
 80091bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091c0:	4b71      	ldr	r3, [pc, #452]	; (8009388 <Rotate+0x358>)
 80091c2:	edc3 7a00 	vstr	s15, [r3]
//		ChangeLED(3);
		while(TargetAngle > Angle)
 80091c6:	e002      	b.n	80091ce <Rotate+0x19e>
		{
			AngularAcceleration = angular_acceleration[1];//0
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	4a70      	ldr	r2, [pc, #448]	; (800938c <Rotate+0x35c>)
 80091cc:	6013      	str	r3, [r2, #0]
		while(TargetAngle > Angle)
 80091ce:	4b6e      	ldr	r3, [pc, #440]	; (8009388 <Rotate+0x358>)
 80091d0:	ed93 7a00 	vldr	s14, [r3]
 80091d4:	4b6e      	ldr	r3, [pc, #440]	; (8009390 <Rotate+0x360>)
 80091d6:	edd3 7a00 	vldr	s15, [r3]
 80091da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80091de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e2:	dcf1      	bgt.n	80091c8 <Rotate+0x198>
//					printf("読み出した角速度の値 : %f, オフセット : %f, 角度 : %f\r\n", ZGyro, zg_offset, fin_angle );
//				}
//
//			}
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80091e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80091e8:	4b67      	ldr	r3, [pc, #412]	; (8009388 <Rotate+0x358>)
 80091ea:	edd3 7a00 	vldr	s15, [r3]
 80091ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091f2:	4b65      	ldr	r3, [pc, #404]	; (8009388 <Rotate+0x358>)
 80091f4:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle > Angle)
 80091f8:	e00e      	b.n	8009218 <Rotate+0x1e8>
		{
			 AngularAcceleration = -angular_acceleration[2];
 80091fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80091fe:	eef1 7a67 	vneg.f32	s15, s15
 8009202:	4b62      	ldr	r3, [pc, #392]	; (800938c <Rotate+0x35c>)
 8009204:	edc3 7a00 	vstr	s15, [r3]
			 if( AngularV <= 0)
 8009208:	4b62      	ldr	r3, [pc, #392]	; (8009394 <Rotate+0x364>)
 800920a:	edd3 7a00 	vldr	s15, [r3]
 800920e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009216:	d96a      	bls.n	80092ee <Rotate+0x2be>
		while(TargetAngle > Angle)
 8009218:	4b5b      	ldr	r3, [pc, #364]	; (8009388 <Rotate+0x358>)
 800921a:	ed93 7a00 	vldr	s14, [r3]
 800921e:	4b5c      	ldr	r3, [pc, #368]	; (8009390 <Rotate+0x360>)
 8009220:	edd3 7a00 	vldr	s15, [r3]
 8009224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800922c:	dce5      	bgt.n	80091fa <Rotate+0x1ca>
 800922e:	e061      	b.n	80092f4 <Rotate+0x2c4>
				 break;
			 }
		}

	}
	else if( ang_v < 0)
 8009230:	edd7 7a00 	vldr	s15, [r7]
 8009234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800923c:	d55a      	bpl.n	80092f4 <Rotate+0x2c4>
	{
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800923e:	4b52      	ldr	r3, [pc, #328]	; (8009388 <Rotate+0x358>)
 8009240:	ed93 7a00 	vldr	s14, [r3]
 8009244:	edd7 7a02 	vldr	s15, [r7, #8]
 8009248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800924c:	4b4e      	ldr	r3, [pc, #312]	; (8009388 <Rotate+0x358>)
 800924e:	edc3 7a00 	vstr	s15, [r3]

		//ここのwhileが抜けないことがある
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009252:	e006      	b.n	8009262 <Rotate+0x232>
		{
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 8009254:	edd7 7a05 	vldr	s15, [r7, #20]
 8009258:	eef1 7a67 	vneg.f32	s15, s15
 800925c:	4b4b      	ldr	r3, [pc, #300]	; (800938c <Rotate+0x35c>)
 800925e:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009262:	4b49      	ldr	r3, [pc, #292]	; (8009388 <Rotate+0x358>)
 8009264:	ed93 7a00 	vldr	s14, [r3]
 8009268:	4b49      	ldr	r3, [pc, #292]	; (8009390 <Rotate+0x360>)
 800926a:	edd3 7a00 	vldr	s15, [r3]
 800926e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009276:	d4ed      	bmi.n	8009254 <Rotate+0x224>
		}
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009278:	4b43      	ldr	r3, [pc, #268]	; (8009388 <Rotate+0x358>)
 800927a:	ed93 7a00 	vldr	s14, [r3]
 800927e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009286:	4b40      	ldr	r3, [pc, #256]	; (8009388 <Rotate+0x358>)
 8009288:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 800928c:	e002      	b.n	8009294 <Rotate+0x264>
		{
			AngularAcceleration = angular_acceleration[1];//0
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	4a3e      	ldr	r2, [pc, #248]	; (800938c <Rotate+0x35c>)
 8009292:	6013      	str	r3, [r2, #0]
		while(TargetAngle < Angle)
 8009294:	4b3c      	ldr	r3, [pc, #240]	; (8009388 <Rotate+0x358>)
 8009296:	ed93 7a00 	vldr	s14, [r3]
 800929a:	4b3d      	ldr	r3, [pc, #244]	; (8009390 <Rotate+0x360>)
 800929c:	edd3 7a00 	vldr	s15, [r3]
 80092a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a8:	d4f1      	bmi.n	800928e <Rotate+0x25e>
		}
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80092aa:	4b37      	ldr	r3, [pc, #220]	; (8009388 <Rotate+0x358>)
 80092ac:	ed93 7a00 	vldr	s14, [r3]
 80092b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80092b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092b8:	4b33      	ldr	r3, [pc, #204]	; (8009388 <Rotate+0x358>)
 80092ba:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 80092be:	e00a      	b.n	80092d6 <Rotate+0x2a6>
		{
			 AngularAcceleration = angular_acceleration[2];
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	4a32      	ldr	r2, [pc, #200]	; (800938c <Rotate+0x35c>)
 80092c4:	6013      	str	r3, [r2, #0]
			 if( AngularV >= 0)
 80092c6:	4b33      	ldr	r3, [pc, #204]	; (8009394 <Rotate+0x364>)
 80092c8:	edd3 7a00 	vldr	s15, [r3]
 80092cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d4:	da0d      	bge.n	80092f2 <Rotate+0x2c2>
		while(TargetAngle < Angle)
 80092d6:	4b2c      	ldr	r3, [pc, #176]	; (8009388 <Rotate+0x358>)
 80092d8:	ed93 7a00 	vldr	s14, [r3]
 80092dc:	4b2c      	ldr	r3, [pc, #176]	; (8009390 <Rotate+0x360>)
 80092de:	edd3 7a00 	vldr	s15, [r3]
 80092e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ea:	d4e9      	bmi.n	80092c0 <Rotate+0x290>
 80092ec:	e002      	b.n	80092f4 <Rotate+0x2c4>
				 break;
 80092ee:	bf00      	nop
 80092f0:	e000      	b.n	80092f4 <Rotate+0x2c4>
			 {
			 		break;
 80092f2:	bf00      	nop
			 }
		}

	}
	AngularAcceleration = 0;
 80092f4:	4b25      	ldr	r3, [pc, #148]	; (800938c <Rotate+0x35c>)
 80092f6:	f04f 0200 	mov.w	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);

	WaitStopAndReset();
 80092fc:	f7ff fe6c 	bl	8008fd8 <WaitStopAndReset>
//	ControlWall();
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009300:	edd7 7a01 	vldr	s15, [r7, #4]
 8009304:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8009398 <Rotate+0x368>
 8009308:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800930c:	ee16 0a90 	vmov	r0, s13
 8009310:	f7ff f852 	bl	80083b8 <__aeabi_f2d>
 8009314:	a316      	add	r3, pc, #88	; (adr r3, 8009370 <Rotate+0x340>)
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	f7ff f8a5 	bl	8008468 <__aeabi_dmul>
 800931e:	4603      	mov	r3, r0
 8009320:	460c      	mov	r4, r1
 8009322:	4618      	mov	r0, r3
 8009324:	4621      	mov	r1, r4
 8009326:	f7ff fb4f 	bl	80089c8 <__aeabi_d2iz>
 800932a:	4603      	mov	r3, r0
 800932c:	623b      	str	r3, [r7, #32]
	if(ang_v < 0)
 800932e:	edd7 7a00 	vldr	s15, [r7]
 8009332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800933a:	d531      	bpl.n	80093a0 <Rotate+0x370>
	{
		KeepPulse[LEFT] -= target_pulse/2;
 800933c:	4b17      	ldr	r3, [pc, #92]	; (800939c <Rotate+0x36c>)
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	0fd9      	lsrs	r1, r3, #31
 8009344:	440b      	add	r3, r1
 8009346:	105b      	asrs	r3, r3, #1
 8009348:	425b      	negs	r3, r3
 800934a:	4413      	add	r3, r2
 800934c:	4a13      	ldr	r2, [pc, #76]	; (800939c <Rotate+0x36c>)
 800934e:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 8009350:	4b12      	ldr	r3, [pc, #72]	; (800939c <Rotate+0x36c>)
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	0fd9      	lsrs	r1, r3, #31
 8009358:	440b      	add	r3, r1
 800935a:	105b      	asrs	r3, r3, #1
 800935c:	4413      	add	r3, r2
 800935e:	4a0f      	ldr	r2, [pc, #60]	; (800939c <Rotate+0x36c>)
 8009360:	6053      	str	r3, [r2, #4]
 8009362:	e037      	b.n	80093d4 <Rotate+0x3a4>
 8009364:	f3af 8000 	nop.w
 8009368:	54442d18 	.word	0x54442d18
 800936c:	400921fb 	.word	0x400921fb
 8009370:	cb326649 	.word	0xcb326649
 8009374:	40fa15d6 	.word	0x40fa15d6
 8009378:	20008998 	.word	0x20008998
 800937c:	42b40000 	.word	0x42b40000
 8009380:	3d83126f 	.word	0x3d83126f
 8009384:	40668000 	.word	0x40668000
 8009388:	20007f48 	.word	0x20007f48
 800938c:	20007f40 	.word	0x20007f40
 8009390:	20007f38 	.word	0x20007f38
 8009394:	20007f34 	.word	0x20007f34
 8009398:	43b40000 	.word	0x43b40000
 800939c:	200089ec 	.word	0x200089ec
	}
	else 	if(ang_v > 0)
 80093a0:	edd7 7a00 	vldr	s15, [r7]
 80093a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ac:	dd12      	ble.n	80093d4 <Rotate+0x3a4>
	{
		KeepPulse[LEFT] += target_pulse/2;
 80093ae:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <Rotate+0x3b4>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	0fd9      	lsrs	r1, r3, #31
 80093b6:	440b      	add	r3, r1
 80093b8:	105b      	asrs	r3, r3, #1
 80093ba:	4413      	add	r3, r2
 80093bc:	4a09      	ldr	r2, [pc, #36]	; (80093e4 <Rotate+0x3b4>)
 80093be:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 80093c0:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <Rotate+0x3b4>)
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	0fd9      	lsrs	r1, r3, #31
 80093c8:	440b      	add	r3, r1
 80093ca:	105b      	asrs	r3, r3, #1
 80093cc:	425b      	negs	r3, r3
 80093ce:	4413      	add	r3, r2
 80093d0:	4a04      	ldr	r2, [pc, #16]	; (80093e4 <Rotate+0x3b4>)
 80093d2:	6053      	str	r3, [r2, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];
 80093d4:	4b03      	ldr	r3, [pc, #12]	; (80093e4 <Rotate+0x3b4>)
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	4a02      	ldr	r2, [pc, #8]	; (80093e4 <Rotate+0x3b4>)
 80093da:	6093      	str	r3, [r2, #8]

	//向いた方角を変える
//	ChangeCardinal();
	//printf("回転終了\r\n");
}
 80093dc:	bf00      	nop
 80093de:	3734      	adds	r7, #52	; 0x34
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd90      	pop	{r4, r7, pc}
 80093e4:	200089ec 	.word	0x200089ec

080093e8 <getFrontWall>:
{

}

int getFrontWall()
{
 80093e8:	b480      	push	{r7}
 80093ea:	af00      	add	r7, sp, #0

	switch(my_mouse.now.car)//方角に合わせて、
 80093ec:	4b1a      	ldr	r3, [pc, #104]	; (8009458 <getFrontWall+0x70>)
 80093ee:	7a9b      	ldrb	r3, [r3, #10]
 80093f0:	2b06      	cmp	r3, #6
 80093f2:	d829      	bhi.n	8009448 <getFrontWall+0x60>
 80093f4:	a201      	add	r2, pc, #4	; (adr r2, 80093fc <getFrontWall+0x14>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	08009419 	.word	0x08009419
 8009400:	08009449 	.word	0x08009449
 8009404:	08009425 	.word	0x08009425
 8009408:	08009449 	.word	0x08009449
 800940c:	08009431 	.word	0x08009431
 8009410:	08009449 	.word	0x08009449
 8009414:	0800943d 	.word	0x0800943d
	{

	case north:

	return my_mouse.now.wall.north;
 8009418:	4b0f      	ldr	r3, [pc, #60]	; (8009458 <getFrontWall+0x70>)
 800941a:	7b1b      	ldrb	r3, [r3, #12]
 800941c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009420:	b2db      	uxtb	r3, r3
 8009422:	e013      	b.n	800944c <getFrontWall+0x64>

	break;

	case east:

	return my_mouse.now.wall.east;
 8009424:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <getFrontWall+0x70>)
 8009426:	7b1b      	ldrb	r3, [r3, #12]
 8009428:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800942c:	b2db      	uxtb	r3, r3
 800942e:	e00d      	b.n	800944c <getFrontWall+0x64>

	break;

	case south:

	return my_mouse.now.wall.south;
 8009430:	4b09      	ldr	r3, [pc, #36]	; (8009458 <getFrontWall+0x70>)
 8009432:	7b1b      	ldrb	r3, [r3, #12]
 8009434:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009438:	b2db      	uxtb	r3, r3
 800943a:	e007      	b.n	800944c <getFrontWall+0x64>

	break;

	case west:

	return my_mouse.now.wall.west;
 800943c:	4b06      	ldr	r3, [pc, #24]	; (8009458 <getFrontWall+0x70>)
 800943e:	7b1b      	ldrb	r3, [r3, #12]
 8009440:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009444:	b2db      	uxtb	r3, r3
 8009446:	e001      	b.n	800944c <getFrontWall+0x64>

	break;

	default:
		return 999;
 8009448:	f240 33e7 	movw	r3, #999	; 0x3e7
	break;

	}

}
 800944c:	4618      	mov	r0, r3
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	20008224 	.word	0x20008224
 800945c:	00000000 	.word	0x00000000

08009460 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009460:	b590      	push	{r4, r7, lr}
 8009462:	b08b      	sub	sp, #44	; 0x2c
 8009464:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009466:	4b9e      	ldr	r3, [pc, #632]	; (80096e0 <SlalomRight+0x280>)
 8009468:	2202      	movs	r2, #2
 800946a:	719a      	strb	r2, [r3, #6]
	Control_Mode = A_VELO_PID;
 800946c:	4b9d      	ldr	r3, [pc, #628]	; (80096e4 <SlalomRight+0x284>)
 800946e:	2200      	movs	r2, #0
 8009470:	601a      	str	r2, [r3, #0]
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009472:	4b9d      	ldr	r3, [pc, #628]	; (80096e8 <SlalomRight+0x288>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009478:	4b9c      	ldr	r3, [pc, #624]	; (80096ec <SlalomRight+0x28c>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 800947e:	4b9b      	ldr	r3, [pc, #620]	; (80096ec <SlalomRight+0x28c>)
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	61fb      	str	r3, [r7, #28]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 8009484:	4b99      	ldr	r3, [pc, #612]	; (80096ec <SlalomRight+0x28c>)
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	61bb      	str	r3, [r7, #24]
	//float alalpha_turn = Sla.Alalpha;
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 800948a:	4b98      	ldr	r3, [pc, #608]	; (80096ec <SlalomRight+0x28c>)
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 8009490:	4b96      	ldr	r3, [pc, #600]	; (80096ec <SlalomRight+0x28c>)
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 8009496:	4b95      	ldr	r3, [pc, #596]	; (80096ec <SlalomRight+0x28c>)
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
 800949c:	4b94      	ldr	r3, [pc, #592]	; (80096f0 <SlalomRight+0x290>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	60bb      	str	r3, [r7, #8]
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80094a2:	4b94      	ldr	r3, [pc, #592]	; (80096f4 <SlalomRight+0x294>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	4b93      	ldr	r3, [pc, #588]	; (80096f4 <SlalomRight+0x294>)
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	4413      	add	r3, r2
 80094ac:	607b      	str	r3, [r7, #4]
	if (getFrontWall() == WALL/*前に壁があれば、*/) //Uターン後にスラロームするときは、壁の情報が間違っている.壁の情報を毎回正しくする
 80094ae:	f7ff ff9b 	bl	80093e8 <getFrontWall>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d133      	bne.n	8009520 <SlalomRight+0xc0>
	{
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80094b8:	e00e      	b.n	80094d8 <SlalomRight+0x78>
		{
			TargetAngularV = 0;
 80094ba:	4b8f      	ldr	r3, [pc, #572]	; (80096f8 <SlalomRight+0x298>)
 80094bc:	f04f 0200 	mov.w	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 80094c2:	4b8e      	ldr	r3, [pc, #568]	; (80096fc <SlalomRight+0x29c>)
 80094c4:	f04f 0200 	mov.w	r2, #0
 80094c8:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 80094ca:	4b8d      	ldr	r3, [pc, #564]	; (8009700 <SlalomRight+0x2a0>)
 80094cc:	f04f 0200 	mov.w	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 80094d2:	4a8c      	ldr	r2, [pc, #560]	; (8009704 <SlalomRight+0x2a4>)
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80094d8:	4b8b      	ldr	r3, [pc, #556]	; (8009708 <SlalomRight+0x2a8>)
 80094da:	edd3 7a00 	vldr	s15, [r3]
 80094de:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800970c <SlalomRight+0x2ac>
 80094e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ea:	d4e6      	bmi.n	80094ba <SlalomRight+0x5a>
 80094ec:	4b86      	ldr	r3, [pc, #536]	; (8009708 <SlalomRight+0x2a8>)
 80094ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80094f2:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8009710 <SlalomRight+0x2b0>
 80094f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fe:	d4dc      	bmi.n	80094ba <SlalomRight+0x5a>
 8009500:	e025      	b.n	800954e <SlalomRight+0xee>
	else//なければ
	{
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009502:	4b7d      	ldr	r3, [pc, #500]	; (80096f8 <SlalomRight+0x298>)
 8009504:	f04f 0200 	mov.w	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
				AngularLeapsity = 0;
 800950a:	4b7c      	ldr	r3, [pc, #496]	; (80096fc <SlalomRight+0x29c>)
 800950c:	f04f 0200 	mov.w	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 8009512:	4b7b      	ldr	r3, [pc, #492]	; (8009700 <SlalomRight+0x2a0>)
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 800951a:	4a7a      	ldr	r2, [pc, #488]	; (8009704 <SlalomRight+0x2a4>)
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	6093      	str	r3, [r2, #8]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800952a:	edd7 7a08 	vldr	s15, [r7, #32]
 800952e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009532:	4b70      	ldr	r3, [pc, #448]	; (80096f4 <SlalomRight+0x294>)
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	4b6f      	ldr	r3, [pc, #444]	; (80096f4 <SlalomRight+0x294>)
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	4413      	add	r3, r2
 800953c:	ee07 3a90 	vmov	s15, r3
 8009540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954c:	dcd9      	bgt.n	8009502 <SlalomRight+0xa2>

				////printf("直進1\r\n");
		}
	}
	now_angv = AngularV;
 800954e:	4b68      	ldr	r3, [pc, #416]	; (80096f0 <SlalomRight+0x290>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60bb      	str	r3, [r7, #8]

	float start_angle = Angle;
 8009554:	4b6f      	ldr	r3, [pc, #444]	; (8009714 <SlalomRight+0x2b4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	603b      	str	r3, [r7, #0]
	Control_Mode = NOT_CTRL_PID;
 800955a:	4b62      	ldr	r3, [pc, #392]	; (80096e4 <SlalomRight+0x284>)
 800955c:	220a      	movs	r2, #10
 800955e:	601a      	str	r2, [r3, #0]
	while(start_angle + ang1 > Angle)
 8009560:	e005      	b.n	800956e <SlalomRight+0x10e>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
		//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009562:	4a67      	ldr	r2, [pc, #412]	; (8009700 <SlalomRight+0x2a0>)
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009568:	4a66      	ldr	r2, [pc, #408]	; (8009704 <SlalomRight+0x2a4>)
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	6093      	str	r3, [r2, #8]
	while(start_angle + ang1 > Angle)
 800956e:	ed97 7a00 	vldr	s14, [r7]
 8009572:	edd7 7a05 	vldr	s15, [r7, #20]
 8009576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800957a:	4b66      	ldr	r3, [pc, #408]	; (8009714 <SlalomRight+0x2b4>)
 800957c:	edd3 7a00 	vldr	s15, [r3]
 8009580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009588:	dceb      	bgt.n	8009562 <SlalomRight+0x102>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 800958a:	4b5d      	ldr	r3, [pc, #372]	; (8009700 <SlalomRight+0x2a0>)
 800958c:	f04f 0200 	mov.w	r2, #0
 8009590:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009592:	4b5a      	ldr	r3, [pc, #360]	; (80096fc <SlalomRight+0x29c>)
 8009594:	f04f 0200 	mov.w	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
	now_angv = AngularV;
 800959a:	4b55      	ldr	r3, [pc, #340]	; (80096f0 <SlalomRight+0x290>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	60bb      	str	r3, [r7, #8]
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 80095a0:	e006      	b.n	80095b0 <SlalomRight+0x150>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 80095a2:	4b55      	ldr	r3, [pc, #340]	; (80096f8 <SlalomRight+0x298>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a54      	ldr	r2, [pc, #336]	; (80096f8 <SlalomRight+0x298>)
 80095a8:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 80095aa:	4a56      	ldr	r2, [pc, #344]	; (8009704 <SlalomRight+0x2a4>)
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	6093      	str	r3, [r2, #8]
	while(start_angle + ang2 > Angle)
 80095b0:	ed97 7a00 	vldr	s14, [r7]
 80095b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80095b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095bc:	4b55      	ldr	r3, [pc, #340]	; (8009714 <SlalomRight+0x2b4>)
 80095be:	edd3 7a00 	vldr	s15, [r3]
 80095c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ca:	dcea      	bgt.n	80095a2 <SlalomRight+0x142>

			}
#endif
	}

	now_angv = AngularV;
 80095cc:	4b48      	ldr	r3, [pc, #288]	; (80096f0 <SlalomRight+0x290>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60bb      	str	r3, [r7, #8]
	while( start_angle + ang3 > Angle)
 80095d2:	e016      	b.n	8009602 <SlalomRight+0x1a2>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 80095d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80095d8:	eef1 7a67 	vneg.f32	s15, s15
 80095dc:	4b48      	ldr	r3, [pc, #288]	; (8009700 <SlalomRight+0x2a0>)
 80095de:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV < 0)
 80095e2:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <SlalomRight+0x298>)
 80095e4:	edd3 7a00 	vldr	s15, [r3]
 80095e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f0:	d504      	bpl.n	80095fc <SlalomRight+0x19c>
			{
				TargetAngularV = 0;
 80095f2:	4b41      	ldr	r3, [pc, #260]	; (80096f8 <SlalomRight+0x298>)
 80095f4:	f04f 0200 	mov.w	r2, #0
 80095f8:	601a      	str	r2, [r3, #0]
				break;
 80095fa:	e010      	b.n	800961e <SlalomRight+0x1be>
			}
			TargetVelocity[BODY] = v_turn;
 80095fc:	4a41      	ldr	r2, [pc, #260]	; (8009704 <SlalomRight+0x2a4>)
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	6093      	str	r3, [r2, #8]
	while( start_angle + ang3 > Angle)
 8009602:	ed97 7a00 	vldr	s14, [r7]
 8009606:	edd7 7a03 	vldr	s15, [r7, #12]
 800960a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800960e:	4b41      	ldr	r3, [pc, #260]	; (8009714 <SlalomRight+0x2b4>)
 8009610:	edd3 7a00 	vldr	s15, [r3]
 8009614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961c:	dcda      	bgt.n	80095d4 <SlalomRight+0x174>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 800961e:	4b38      	ldr	r3, [pc, #224]	; (8009700 <SlalomRight+0x2a0>)
 8009620:	f04f 0200 	mov.w	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009626:	4b35      	ldr	r3, [pc, #212]	; (80096fc <SlalomRight+0x29c>)
 8009628:	f04f 0200 	mov.w	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 800962e:	4b32      	ldr	r3, [pc, #200]	; (80096f8 <SlalomRight+0x298>)
 8009630:	f04f 0200 	mov.w	r2, #0
 8009634:	601a      	str	r2, [r3, #0]
	//Calc = SearchOrFast; //関数の前に別で設定する
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009636:	4b2f      	ldr	r3, [pc, #188]	; (80096f4 <SlalomRight+0x294>)
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b2e      	ldr	r3, [pc, #184]	; (80096f4 <SlalomRight+0x294>)
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	4413      	add	r3, r2
 8009640:	607b      	str	r3, [r7, #4]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009642:	e00f      	b.n	8009664 <SlalomRight+0x204>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009644:	4b2c      	ldr	r3, [pc, #176]	; (80096f8 <SlalomRight+0x298>)
 8009646:	f04f 0200 	mov.w	r2, #0
 800964a:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 800964c:	4a2d      	ldr	r2, [pc, #180]	; (8009704 <SlalomRight+0x2a4>)
 800964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009650:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 8009652:	4b31      	ldr	r3, [pc, #196]	; (8009718 <SlalomRight+0x2b8>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d104      	bne.n	8009664 <SlalomRight+0x204>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
#else
				updateRealSearch();
 800965a:	f004 fa75 	bl	800db48 <updateRealSearch>
#endif
				Calc = 1;
 800965e:	4b2e      	ldr	r3, [pc, #184]	; (8009718 <SlalomRight+0x2b8>)
 8009660:	2201      	movs	r2, #1
 8009662:	601a      	str	r2, [r3, #0]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	ee07 3a90 	vmov	s15, r3
 800966a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800966e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009676:	4b1f      	ldr	r3, [pc, #124]	; (80096f4 <SlalomRight+0x294>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	4b1e      	ldr	r3, [pc, #120]	; (80096f4 <SlalomRight+0x294>)
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	4413      	add	r3, r2
 8009680:	ee07 3a90 	vmov	s15, r3
 8009684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800968c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009690:	dcd8      	bgt.n	8009644 <SlalomRight+0x1e4>
			}
	}
	TargetAngle += 90*M_PI/180;
 8009692:	4b22      	ldr	r3, [pc, #136]	; (800971c <SlalomRight+0x2bc>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe fe8e 	bl	80083b8 <__aeabi_f2d>
 800969c:	a30e      	add	r3, pc, #56	; (adr r3, 80096d8 <SlalomRight+0x278>)
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	f7fe fd2b 	bl	80080fc <__adddf3>
 80096a6:	4603      	mov	r3, r0
 80096a8:	460c      	mov	r4, r1
 80096aa:	4618      	mov	r0, r3
 80096ac:	4621      	mov	r1, r4
 80096ae:	f7ff f9d3 	bl	8008a58 <__aeabi_d2f>
 80096b2:	4602      	mov	r2, r0
 80096b4:	4b19      	ldr	r3, [pc, #100]	; (800971c <SlalomRight+0x2bc>)
 80096b6:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 80096b8:	4b0e      	ldr	r3, [pc, #56]	; (80096f4 <SlalomRight+0x294>)
 80096ba:	689a      	ldr	r2, [r3, #8]
 80096bc:	4b18      	ldr	r3, [pc, #96]	; (8009720 <SlalomRight+0x2c0>)
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	1ad2      	subs	r2, r2, r3
 80096c2:	4b17      	ldr	r3, [pc, #92]	; (8009720 <SlalomRight+0x2c0>)
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	4413      	add	r3, r2
 80096c8:	4a15      	ldr	r2, [pc, #84]	; (8009720 <SlalomRight+0x2c0>)
 80096ca:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 80096cc:	bf00      	nop
 80096ce:	372c      	adds	r7, #44	; 0x2c
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd90      	pop	{r4, r7, pc}
 80096d4:	f3af 8000 	nop.w
 80096d8:	54442d18 	.word	0x54442d18
 80096dc:	3ff921fb 	.word	0x3ff921fb
 80096e0:	20000008 	.word	0x20000008
 80096e4:	2000897c 	.word	0x2000897c
 80096e8:	20008aac 	.word	0x20008aac
 80096ec:	200089d0 	.word	0x200089d0
 80096f0:	20007f34 	.word	0x20007f34
 80096f4:	200089b8 	.word	0x200089b8
 80096f8:	20008998 	.word	0x20008998
 80096fc:	20007f44 	.word	0x20007f44
 8009700:	20007f40 	.word	0x20007f40
 8009704:	20008988 	.word	0x20008988
 8009708:	200089f8 	.word	0x200089f8
 800970c:	43480000 	.word	0x43480000
 8009710:	437a0000 	.word	0x437a0000
 8009714:	20007f38 	.word	0x20007f38
 8009718:	20008c28 	.word	0x20008c28
 800971c:	20007f48 	.word	0x20007f48
 8009720:	200089ec 	.word	0x200089ec
 8009724:	00000000 	.word	0x00000000

08009728 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009728:	b590      	push	{r4, r7, lr}
 800972a:	b08b      	sub	sp, #44	; 0x2c
 800972c:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 800972e:	4b98      	ldr	r3, [pc, #608]	; (8009990 <SlalomLeft+0x268>)
 8009730:	2202      	movs	r2, #2
 8009732:	719a      	strb	r2, [r3, #6]

	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい
	Control_Mode = A_VELO_PID;
 8009734:	4b97      	ldr	r3, [pc, #604]	; (8009994 <SlalomLeft+0x26c>)
 8009736:	2200      	movs	r2, #0
 8009738:	601a      	str	r2, [r3, #0]
	//ここの値コピーとその他計算を事前に行う
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 800973a:	4b97      	ldr	r3, [pc, #604]	; (8009998 <SlalomLeft+0x270>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009740:	4b96      	ldr	r3, [pc, #600]	; (800999c <SlalomLeft+0x274>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 8009746:	4b95      	ldr	r3, [pc, #596]	; (800999c <SlalomLeft+0x274>)
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 800974c:	4b93      	ldr	r3, [pc, #588]	; (800999c <SlalomLeft+0x274>)
 800974e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009752:	eef1 7a67 	vneg.f32	s15, s15
 8009756:	edc7 7a06 	vstr	s15, [r7, #24]
	//float alalpha_turn = -Sla.Alalpha;
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 800975a:	4b90      	ldr	r3, [pc, #576]	; (800999c <SlalomLeft+0x274>)
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 8009760:	4b8e      	ldr	r3, [pc, #568]	; (800999c <SlalomLeft+0x274>)
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 8009766:	4b8d      	ldr	r3, [pc, #564]	; (800999c <SlalomLeft+0x274>)
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 800976c:	4b8c      	ldr	r3, [pc, #560]	; (80099a0 <SlalomLeft+0x278>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	4b8b      	ldr	r3, [pc, #556]	; (80099a0 <SlalomLeft+0x278>)
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	4413      	add	r3, r2
 8009776:	60bb      	str	r3, [r7, #8]
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009778:	f7ff fe36 	bl	80093e8 <getFrontWall>
 800977c:	4603      	mov	r3, r0
 800977e:	2b01      	cmp	r3, #1
 8009780:	d12f      	bne.n	80097e2 <SlalomLeft+0xba>
	{
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009782:	e00e      	b.n	80097a2 <SlalomLeft+0x7a>
		{
			TargetAngularV = 0;
 8009784:	4b87      	ldr	r3, [pc, #540]	; (80099a4 <SlalomLeft+0x27c>)
 8009786:	f04f 0200 	mov.w	r2, #0
 800978a:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 800978c:	4b86      	ldr	r3, [pc, #536]	; (80099a8 <SlalomLeft+0x280>)
 800978e:	f04f 0200 	mov.w	r2, #0
 8009792:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009794:	4b85      	ldr	r3, [pc, #532]	; (80099ac <SlalomLeft+0x284>)
 8009796:	f04f 0200 	mov.w	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 800979c:	4a84      	ldr	r2, [pc, #528]	; (80099b0 <SlalomLeft+0x288>)
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 80097a2:	4b84      	ldr	r3, [pc, #528]	; (80099b4 <SlalomLeft+0x28c>)
 80097a4:	edd3 7a00 	vldr	s15, [r3]
 80097a8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80099b8 <SlalomLeft+0x290>
 80097ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b4:	d4e6      	bmi.n	8009784 <SlalomLeft+0x5c>
 80097b6:	4b7f      	ldr	r3, [pc, #508]	; (80099b4 <SlalomLeft+0x28c>)
 80097b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80097bc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80099bc <SlalomLeft+0x294>
 80097c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c8:	d4dc      	bmi.n	8009784 <SlalomLeft+0x5c>
 80097ca:	e021      	b.n	8009810 <SlalomLeft+0xe8>
	else//なければ
	{
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 80097cc:	4b75      	ldr	r3, [pc, #468]	; (80099a4 <SlalomLeft+0x27c>)
 80097ce:	f04f 0200 	mov.w	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 80097d4:	4b75      	ldr	r3, [pc, #468]	; (80099ac <SlalomLeft+0x284>)
 80097d6:	f04f 0200 	mov.w	r2, #0
 80097da:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 80097dc:	4a74      	ldr	r2, [pc, #464]	; (80099b0 <SlalomLeft+0x288>)
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	6093      	str	r3, [r2, #8]
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	ee07 3a90 	vmov	s15, r3
 80097e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80097f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097f4:	4b6a      	ldr	r3, [pc, #424]	; (80099a0 <SlalomLeft+0x278>)
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	4b69      	ldr	r3, [pc, #420]	; (80099a0 <SlalomLeft+0x278>)
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	4413      	add	r3, r2
 80097fe:	ee07 3a90 	vmov	s15, r3
 8009802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800980a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800980e:	dcdd      	bgt.n	80097cc <SlalomLeft+0xa4>

				////printf("直進1\r\n");
		}
	}

	Control_Mode = NOT_CTRL_PID;
 8009810:	4b60      	ldr	r3, [pc, #384]	; (8009994 <SlalomLeft+0x26c>)
 8009812:	220a      	movs	r2, #10
 8009814:	601a      	str	r2, [r3, #0]
	float start_angle = Angle;
 8009816:	4b6a      	ldr	r3, [pc, #424]	; (80099c0 <SlalomLeft+0x298>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < Angle)
 800981c:	e005      	b.n	800982a <SlalomLeft+0x102>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 800981e:	4a63      	ldr	r2, [pc, #396]	; (80099ac <SlalomLeft+0x284>)
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009824:	4a62      	ldr	r2, [pc, #392]	; (80099b0 <SlalomLeft+0x288>)
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	6093      	str	r3, [r2, #8]
	while(start_angle - ang1 < Angle)
 800982a:	ed97 7a01 	vldr	s14, [r7, #4]
 800982e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009832:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009836:	4b62      	ldr	r3, [pc, #392]	; (80099c0 <SlalomLeft+0x298>)
 8009838:	edd3 7a00 	vldr	s15, [r3]
 800983c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009844:	d4eb      	bmi.n	800981e <SlalomLeft+0xf6>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009846:	4b59      	ldr	r3, [pc, #356]	; (80099ac <SlalomLeft+0x284>)
 8009848:	f04f 0200 	mov.w	r2, #0
 800984c:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 800984e:	4b56      	ldr	r3, [pc, #344]	; (80099a8 <SlalomLeft+0x280>)
 8009850:	f04f 0200 	mov.w	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 8009856:	e006      	b.n	8009866 <SlalomLeft+0x13e>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009858:	4b52      	ldr	r3, [pc, #328]	; (80099a4 <SlalomLeft+0x27c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a51      	ldr	r2, [pc, #324]	; (80099a4 <SlalomLeft+0x27c>)
 800985e:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009860:	4a53      	ldr	r2, [pc, #332]	; (80099b0 <SlalomLeft+0x288>)
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	6093      	str	r3, [r2, #8]
	while(start_angle - ang2 < Angle)
 8009866:	ed97 7a01 	vldr	s14, [r7, #4]
 800986a:	edd7 7a04 	vldr	s15, [r7, #16]
 800986e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009872:	4b53      	ldr	r3, [pc, #332]	; (80099c0 <SlalomLeft+0x298>)
 8009874:	edd3 7a00 	vldr	s15, [r3]
 8009878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800987c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009880:	d4ea      	bmi.n	8009858 <SlalomLeft+0x130>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 8009882:	e016      	b.n	80098b2 <SlalomLeft+0x18a>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009884:	edd7 7a06 	vldr	s15, [r7, #24]
 8009888:	eef1 7a67 	vneg.f32	s15, s15
 800988c:	4b47      	ldr	r3, [pc, #284]	; (80099ac <SlalomLeft+0x284>)
 800988e:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV > 0)
 8009892:	4b44      	ldr	r3, [pc, #272]	; (80099a4 <SlalomLeft+0x27c>)
 8009894:	edd3 7a00 	vldr	s15, [r3]
 8009898:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800989c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a0:	dd04      	ble.n	80098ac <SlalomLeft+0x184>
			{
				TargetAngularV = 0;
 80098a2:	4b40      	ldr	r3, [pc, #256]	; (80099a4 <SlalomLeft+0x27c>)
 80098a4:	f04f 0200 	mov.w	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]
				break;
 80098aa:	e010      	b.n	80098ce <SlalomLeft+0x1a6>
			}
			TargetVelocity[BODY] = v_turn;
 80098ac:	4a40      	ldr	r2, [pc, #256]	; (80099b0 <SlalomLeft+0x288>)
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	6093      	str	r3, [r2, #8]
	while( start_angle - ang3 < Angle)
 80098b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80098b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80098ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098be:	4b40      	ldr	r3, [pc, #256]	; (80099c0 <SlalomLeft+0x298>)
 80098c0:	edd3 7a00 	vldr	s15, [r3]
 80098c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098cc:	d4da      	bmi.n	8009884 <SlalomLeft+0x15c>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 80098ce:	4b37      	ldr	r3, [pc, #220]	; (80099ac <SlalomLeft+0x284>)
 80098d0:	f04f 0200 	mov.w	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 80098d6:	4b34      	ldr	r3, [pc, #208]	; (80099a8 <SlalomLeft+0x280>)
 80098d8:	f04f 0200 	mov.w	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 80098de:	4b31      	ldr	r3, [pc, #196]	; (80099a4 <SlalomLeft+0x27c>)
 80098e0:	f04f 0200 	mov.w	r2, #0
 80098e4:	601a      	str	r2, [r3, #0]
//	Calc = SearchOrFast; //関数の前に別で設定
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 80098e6:	4b2e      	ldr	r3, [pc, #184]	; (80099a0 <SlalomLeft+0x278>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	4b2d      	ldr	r3, [pc, #180]	; (80099a0 <SlalomLeft+0x278>)
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	4413      	add	r3, r2
 80098f0:	60bb      	str	r3, [r7, #8]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 80098f2:	e00f      	b.n	8009914 <SlalomLeft+0x1ec>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 80098f4:	4b2b      	ldr	r3, [pc, #172]	; (80099a4 <SlalomLeft+0x27c>)
 80098f6:	f04f 0200 	mov.w	r2, #0
 80098fa:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 80098fc:	4a2c      	ldr	r2, [pc, #176]	; (80099b0 <SlalomLeft+0x288>)
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");
			if(Calc == 0)
 8009902:	4b30      	ldr	r3, [pc, #192]	; (80099c4 <SlalomLeft+0x29c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d104      	bne.n	8009914 <SlalomLeft+0x1ec>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
#else
				updateRealSearch();
 800990a:	f004 f91d 	bl	800db48 <updateRealSearch>
#endif
				Calc = 1;
 800990e:	4b2d      	ldr	r3, [pc, #180]	; (80099c4 <SlalomLeft+0x29c>)
 8009910:	2201      	movs	r2, #1
 8009912:	601a      	str	r2, [r3, #0]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800991e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009926:	4b1e      	ldr	r3, [pc, #120]	; (80099a0 <SlalomLeft+0x278>)
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	4b1d      	ldr	r3, [pc, #116]	; (80099a0 <SlalomLeft+0x278>)
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	4413      	add	r3, r2
 8009930:	ee07 3a90 	vmov	s15, r3
 8009934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800993c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009940:	dcd8      	bgt.n	80098f4 <SlalomLeft+0x1cc>
			}
	}
	TargetAngle += -90*M_PI/180;
 8009942:	4b21      	ldr	r3, [pc, #132]	; (80099c8 <SlalomLeft+0x2a0>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe fd36 	bl	80083b8 <__aeabi_f2d>
 800994c:	a30e      	add	r3, pc, #56	; (adr r3, 8009988 <SlalomLeft+0x260>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f7fe fbd1 	bl	80080f8 <__aeabi_dsub>
 8009956:	4603      	mov	r3, r0
 8009958:	460c      	mov	r4, r1
 800995a:	4618      	mov	r0, r3
 800995c:	4621      	mov	r1, r4
 800995e:	f7ff f87b 	bl	8008a58 <__aeabi_d2f>
 8009962:	4602      	mov	r2, r0
 8009964:	4b18      	ldr	r3, [pc, #96]	; (80099c8 <SlalomLeft+0x2a0>)
 8009966:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009968:	4b0d      	ldr	r3, [pc, #52]	; (80099a0 <SlalomLeft+0x278>)
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	4b17      	ldr	r3, [pc, #92]	; (80099cc <SlalomLeft+0x2a4>)
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	1ad2      	subs	r2, r2, r3
 8009972:	4b16      	ldr	r3, [pc, #88]	; (80099cc <SlalomLeft+0x2a4>)
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	4413      	add	r3, r2
 8009978:	4a14      	ldr	r2, [pc, #80]	; (80099cc <SlalomLeft+0x2a4>)
 800997a:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 800997c:	bf00      	nop
 800997e:	372c      	adds	r7, #44	; 0x2c
 8009980:	46bd      	mov	sp, r7
 8009982:	bd90      	pop	{r4, r7, pc}
 8009984:	f3af 8000 	nop.w
 8009988:	54442d18 	.word	0x54442d18
 800998c:	3ff921fb 	.word	0x3ff921fb
 8009990:	20000008 	.word	0x20000008
 8009994:	2000897c 	.word	0x2000897c
 8009998:	20008aac 	.word	0x20008aac
 800999c:	200089d0 	.word	0x200089d0
 80099a0:	200089b8 	.word	0x200089b8
 80099a4:	20008998 	.word	0x20008998
 80099a8:	20007f44 	.word	0x20007f44
 80099ac:	20007f40 	.word	0x20007f40
 80099b0:	20008988 	.word	0x20008988
 80099b4:	200089f8 	.word	0x200089f8
 80099b8:	43480000 	.word	0x43480000
 80099bc:	437a0000 	.word	0x437a0000
 80099c0:	20007f38 	.word	0x20007f38
 80099c4:	20008c28 	.word	0x20008c28
 80099c8:	20007f48 	.word	0x20007f48
 80099cc:	200089ec 	.word	0x200089ec

080099d0 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 80099d0:	b5b0      	push	{r4, r5, r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80099da:	edc7 0a00 	vstr	s1, [r7]
//	Pos.Act = accel;
//	ControlWall();
	TargetAngularV = 0;
 80099de:	4b4e      	ldr	r3, [pc, #312]	; (8009b18 <Accel+0x148>)
 80099e0:	f04f 0200 	mov.w	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]
	float additional_speed=0;
 80099e6:	f04f 0300 	mov.w	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 80099ec:	4b4b      	ldr	r3, [pc, #300]	; (8009b1c <Accel+0x14c>)
 80099ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80099f2:	ed97 7a00 	vldr	s14, [r7]
 80099f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099fa:	edc7 7a03 	vstr	s15, [r7, #12]
	//printf("%f,%f,%f\r\n",additional_speed,explore_speed,CurrentVelocity[BODY]);
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
//	HAL_Delay(1000);
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 80099fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8009a02:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8009b20 <Accel+0x150>
 8009a06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009a0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009a0e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009a12:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a16:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a1e:	4b41      	ldr	r3, [pc, #260]	; (8009b24 <Accel+0x154>)
 8009a20:	edc3 7a00 	vstr	s15, [r3]
//	WallWarn();
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009a24:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009a2c:	ee17 0a90 	vmov	r0, s15
 8009a30:	f7fe fcc2 	bl	80083b8 <__aeabi_f2d>
 8009a34:	a334      	add	r3, pc, #208	; (adr r3, 8009b08 <Accel+0x138>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f7fe fe3f 	bl	80086bc <__aeabi_ddiv>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	460c      	mov	r4, r1
 8009a42:	4618      	mov	r0, r3
 8009a44:	4621      	mov	r1, r4
 8009a46:	f7fe ffbf 	bl	80089c8 <__aeabi_d2iz>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	60bb      	str	r3, [r7, #8]
	//90mmでうまくやるには0から60000カウントまで
	//printf("");
//	_Bool wall_cut = false;
	//ChangeLED(1);

	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009a4e:	e030      	b.n	8009ab2 <Accel+0xe2>
	{
		//printf("%d, %d, %d, %f, %f, %d, %f, %f, %d, %f, %f\r\n", TotalPulse[BODY], target_pulse, KeepPulse[BODY], TargetVelocity[BODY], Acceleration, VelocityLeftOut ,TargetVelocity[LEFT], CurrentVelocity[LEFT], Pid[L_VELO_PID].out, Pid[L_VELO_PID].KP,Pid[L_VELO_PID].KI);
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009a50:	4b35      	ldr	r3, [pc, #212]	; (8009b28 <Accel+0x158>)
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fe fc9d 	bl	8008394 <__aeabi_i2d>
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	460d      	mov	r5, r1
 8009a5e:	68b8      	ldr	r0, [r7, #8]
 8009a60:	f7fe fc98 	bl	8008394 <__aeabi_i2d>
 8009a64:	a32a      	add	r3, pc, #168	; (adr r3, 8009b10 <Accel+0x140>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f7fe fcfd 	bl	8008468 <__aeabi_dmul>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	4620      	mov	r0, r4
 8009a74:	4629      	mov	r1, r5
 8009a76:	f7fe fb41 	bl	80080fc <__adddf3>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	4625      	mov	r5, r4
 8009a80:	461c      	mov	r4, r3
 8009a82:	4b2a      	ldr	r3, [pc, #168]	; (8009b2c <Accel+0x15c>)
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe fc84 	bl	8008394 <__aeabi_i2d>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4620      	mov	r0, r4
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7fe ff5a 	bl	800894c <__aeabi_dcmplt>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d100      	bne.n	8009aa0 <Accel+0xd0>
 8009a9e:	e008      	b.n	8009ab2 <Accel+0xe2>
 8009aa0:	4b23      	ldr	r3, [pc, #140]	; (8009b30 <Accel+0x160>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d104      	bne.n	8009ab2 <Accel+0xe2>
//			wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
//			//計算して
//			make_map(Pos.TargetX, Pos.TargetY, 0x01);
			//現在壁の情報が切り替わるので、壁制御を切り替える必要あり?
			//壁制御オフはここより前に移動量で判断
			updateRealSearch();
 8009aa8:	f004 f84e 	bl	800db48 <updateRealSearch>
			//UpdateWalkMap();
			//次のアクションを渡すのは別のところで。
			Calc = 1;
 8009aac:	4b20      	ldr	r3, [pc, #128]	; (8009b30 <Accel+0x160>)
 8009aae:	2201      	movs	r2, #1
 8009ab0:	601a      	str	r2, [r3, #0]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009ab2:	4b1d      	ldr	r3, [pc, #116]	; (8009b28 <Accel+0x158>)
 8009ab4:	689a      	ldr	r2, [r3, #8]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	441a      	add	r2, r3
 8009aba:	4b1c      	ldr	r3, [pc, #112]	; (8009b2c <Accel+0x15c>)
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	dcc6      	bgt.n	8009a50 <Accel+0x80>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 8009ac2:	4b18      	ldr	r3, [pc, #96]	; (8009b24 <Accel+0x154>)
 8009ac4:	f04f 0200 	mov.w	r2, #0
 8009ac8:	601a      	str	r2, [r3, #0]
	//壁読んで、
//	wall_cut = false;
//	ChangeLED(0);
	KeepPulse[BODY] += target_pulse;
 8009aca:	4b17      	ldr	r3, [pc, #92]	; (8009b28 <Accel+0x158>)
 8009acc:	689a      	ldr	r2, [r3, #8]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	4a15      	ldr	r2, [pc, #84]	; (8009b28 <Accel+0x158>)
 8009ad4:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 8009ad6:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <Accel+0x158>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	0fd9      	lsrs	r1, r3, #31
 8009ade:	440b      	add	r3, r1
 8009ae0:	105b      	asrs	r3, r3, #1
 8009ae2:	4413      	add	r3, r2
 8009ae4:	4a10      	ldr	r2, [pc, #64]	; (8009b28 <Accel+0x158>)
 8009ae6:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 8009ae8:	4b0f      	ldr	r3, [pc, #60]	; (8009b28 <Accel+0x158>)
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	0fd9      	lsrs	r1, r3, #31
 8009af0:	440b      	add	r3, r1
 8009af2:	105b      	asrs	r3, r3, #1
 8009af4:	4413      	add	r3, r2
 8009af6:	4a0c      	ldr	r2, [pc, #48]	; (8009b28 <Accel+0x158>)
 8009af8:	6053      	str	r3, [r2, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bdb0      	pop	{r4, r5, r7, pc}
 8009b02:	bf00      	nop
 8009b04:	f3af 8000 	nop.w
 8009b08:	23ca2666 	.word	0x23ca2666
 8009b0c:	3f509268 	.word	0x3f509268
 8009b10:	9999999a 	.word	0x9999999a
 8009b14:	3fe99999 	.word	0x3fe99999
 8009b18:	20008998 	.word	0x20008998
 8009b1c:	200089c4 	.word	0x200089c4
 8009b20:	3a83126f 	.word	0x3a83126f
 8009b24:	20007f3c 	.word	0x20007f3c
 8009b28:	200089ec 	.word	0x200089ec
 8009b2c:	200089b8 	.word	0x200089b8
 8009b30:	20008c28 	.word	0x20008c28
 8009b34:	00000000 	.word	0x00000000

08009b38 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 8009b38:	b5b0      	push	{r4, r5, r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009b42:	edc7 0a00 	vstr	s1, [r7]
//	Pos.Act = decel;
	float down_speed=0;
 8009b46:	f04f 0300 	mov.w	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 8009b4c:	4b66      	ldr	r3, [pc, #408]	; (8009ce8 <Decel+0x1b0>)
 8009b4e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009b52:	edd7 7a00 	vldr	s15, [r7]
 8009b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b5a:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009b5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b62:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8009cec <Decel+0x1b4>
 8009b66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009b6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009b72:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b76:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b7e:	eef1 7a67 	vneg.f32	s15, s15
 8009b82:	4b5b      	ldr	r3, [pc, #364]	; (8009cf0 <Decel+0x1b8>)
 8009b84:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
//	WallSafe();
//	ControlWall();
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009b88:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009b90:	ee17 0a90 	vmov	r0, s15
 8009b94:	f7fe fc10 	bl	80083b8 <__aeabi_f2d>
 8009b98:	a34f      	add	r3, pc, #316	; (adr r3, 8009cd8 <Decel+0x1a0>)
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f7fe fd8d 	bl	80086bc <__aeabi_ddiv>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	4621      	mov	r1, r4
 8009baa:	f7fe ff0d 	bl	80089c8 <__aeabi_d2iz>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	60bb      	str	r3, [r7, #8]
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009bb2:	e04e      	b.n	8009c52 <Decel+0x11a>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= end_speed) //
 8009bb4:	4b4f      	ldr	r3, [pc, #316]	; (8009cf4 <Decel+0x1bc>)
 8009bb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8009bba:	ed97 7a00 	vldr	s14, [r7]
 8009bbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc6:	db19      	blt.n	8009bfc <Decel+0xc4>
		{
//			ChangeLED(7);
			TargetVelocity[BODY] = end_speed;
 8009bc8:	4a4a      	ldr	r2, [pc, #296]	; (8009cf4 <Decel+0x1bc>)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	6093      	str	r3, [r2, #8]
			Acceleration = 0;
 8009bce:	4b48      	ldr	r3, [pc, #288]	; (8009cf0 <Decel+0x1b8>)
 8009bd0:	f04f 0200 	mov.w	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]
			TargetAngularV = 0;
 8009bd6:	4b48      	ldr	r3, [pc, #288]	; (8009cf8 <Decel+0x1c0>)
 8009bd8:	f04f 0200 	mov.w	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009bde:	4b47      	ldr	r3, [pc, #284]	; (8009cfc <Decel+0x1c4>)
 8009be0:	f04f 0200 	mov.w	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
			static int k = 1;

			ChangeLED(k);
 8009be6:	4b46      	ldr	r3, [pc, #280]	; (8009d00 <Decel+0x1c8>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f004 fe28 	bl	800e840 <ChangeLED>
			k++;
 8009bf0:	4b43      	ldr	r3, [pc, #268]	; (8009d00 <Decel+0x1c8>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	4a42      	ldr	r2, [pc, #264]	; (8009d00 <Decel+0x1c8>)
 8009bf8:	6013      	str	r3, [r2, #0]
			break;
 8009bfa:	e041      	b.n	8009c80 <Decel+0x148>
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 8009bfc:	4b41      	ldr	r3, [pc, #260]	; (8009d04 <Decel+0x1cc>)
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe fbc7 	bl	8008394 <__aeabi_i2d>
 8009c06:	4604      	mov	r4, r0
 8009c08:	460d      	mov	r5, r1
 8009c0a:	68b8      	ldr	r0, [r7, #8]
 8009c0c:	f7fe fbc2 	bl	8008394 <__aeabi_i2d>
 8009c10:	a333      	add	r3, pc, #204	; (adr r3, 8009ce0 <Decel+0x1a8>)
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	f7fe fc27 	bl	8008468 <__aeabi_dmul>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4620      	mov	r0, r4
 8009c20:	4629      	mov	r1, r5
 8009c22:	f7fe fa6b 	bl	80080fc <__adddf3>
 8009c26:	4603      	mov	r3, r0
 8009c28:	460c      	mov	r4, r1
 8009c2a:	4625      	mov	r5, r4
 8009c2c:	461c      	mov	r4, r3
 8009c2e:	4b36      	ldr	r3, [pc, #216]	; (8009d08 <Decel+0x1d0>)
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fbae 	bl	8008394 <__aeabi_i2d>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	4629      	mov	r1, r5
 8009c40:	f7fe fe84 	bl	800894c <__aeabi_dcmplt>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d100      	bne.n	8009c4c <Decel+0x114>
 8009c4a:	e002      	b.n	8009c52 <Decel+0x11a>
//			//ControlWall();
//			PIDChangeFlag(L_WALL_PID, 0);
//			PIDChangeFlag(R_WALL_PID, 0);
//			PIDChangeFlag(D_WALL_PID, 0);
//			PIDChangeFlag( A_VELO_PID , 1);
			Control_Mode = A_VELO_PID;
 8009c4c:	4b2f      	ldr	r3, [pc, #188]	; (8009d0c <Decel+0x1d4>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	601a      	str	r2, [r3, #0]
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009c52:	4b2f      	ldr	r3, [pc, #188]	; (8009d10 <Decel+0x1d8>)
 8009c54:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c58:	4b2d      	ldr	r3, [pc, #180]	; (8009d10 <Decel+0x1d8>)
 8009c5a:	edd3 7a00 	vldr	s15, [r3]
 8009c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c62:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8009d14 <Decel+0x1dc>
 8009c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c6e:	d507      	bpl.n	8009c80 <Decel+0x148>
 8009c70:	4b24      	ldr	r3, [pc, #144]	; (8009d04 <Decel+0x1cc>)
 8009c72:	689a      	ldr	r2, [r3, #8]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	441a      	add	r2, r3
 8009c78:	4b23      	ldr	r3, [pc, #140]	; (8009d08 <Decel+0x1d0>)
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	dc99      	bgt.n	8009bb4 <Decel+0x7c>
		}
	}
	TargetVelocity[BODY] = end_speed;
 8009c80:	4a1c      	ldr	r2, [pc, #112]	; (8009cf4 <Decel+0x1bc>)
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	6093      	str	r3, [r2, #8]
	Acceleration = 0;
 8009c86:	4b1a      	ldr	r3, [pc, #104]	; (8009cf0 <Decel+0x1b8>)
 8009c88:	f04f 0200 	mov.w	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009c8e:	4b1a      	ldr	r3, [pc, #104]	; (8009cf8 <Decel+0x1c0>)
 8009c90:	f04f 0200 	mov.w	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 8009c96:	4b19      	ldr	r3, [pc, #100]	; (8009cfc <Decel+0x1c4>)
 8009c98:	f04f 0200 	mov.w	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]
	//ChangeLED(2);
	KeepPulse[BODY] += target_pulse;
 8009c9e:	4b19      	ldr	r3, [pc, #100]	; (8009d04 <Decel+0x1cc>)
 8009ca0:	689a      	ldr	r2, [r3, #8]
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	4a17      	ldr	r2, [pc, #92]	; (8009d04 <Decel+0x1cc>)
 8009ca8:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 8009caa:	4b16      	ldr	r3, [pc, #88]	; (8009d04 <Decel+0x1cc>)
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	0fd9      	lsrs	r1, r3, #31
 8009cb2:	440b      	add	r3, r1
 8009cb4:	105b      	asrs	r3, r3, #1
 8009cb6:	4413      	add	r3, r2
 8009cb8:	4a12      	ldr	r2, [pc, #72]	; (8009d04 <Decel+0x1cc>)
 8009cba:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 8009cbc:	4b11      	ldr	r3, [pc, #68]	; (8009d04 <Decel+0x1cc>)
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	0fd9      	lsrs	r1, r3, #31
 8009cc4:	440b      	add	r3, r1
 8009cc6:	105b      	asrs	r3, r3, #1
 8009cc8:	4413      	add	r3, r2
 8009cca:	4a0e      	ldr	r2, [pc, #56]	; (8009d04 <Decel+0x1cc>)
 8009ccc:	6053      	str	r3, [r2, #4]


}
 8009cce:	bf00      	nop
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	23ca2666 	.word	0x23ca2666
 8009cdc:	3f509268 	.word	0x3f509268
 8009ce0:	cccccccd 	.word	0xcccccccd
 8009ce4:	3fe4cccc 	.word	0x3fe4cccc
 8009ce8:	200089c4 	.word	0x200089c4
 8009cec:	3a83126f 	.word	0x3a83126f
 8009cf0:	20007f3c 	.word	0x20007f3c
 8009cf4:	20008988 	.word	0x20008988
 8009cf8:	20008998 	.word	0x20008998
 8009cfc:	20007f40 	.word	0x20007f40
 8009d00:	20000000 	.word	0x20000000
 8009d04:	200089ec 	.word	0x200089ec
 8009d08:	200089b8 	.word	0x200089b8
 8009d0c:	2000897c 	.word	0x2000897c
 8009d10:	200089f8 	.word	0x200089f8
 8009d14:	456d8000 	.word	0x456d8000

08009d18 <GoStraight>:
	Pid[wall_ctrl].flag = 0;
	TargetAngularV = 0;
	return 45;
}
void GoStraight(float move_distance,  float explore_speed, int accel_or_decel)
{
 8009d18:	b5b0      	push	{r4, r5, r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009d22:	edc7 0a02 	vstr	s1, [r7, #8]
 8009d26:	6078      	str	r0, [r7, #4]
	//斜め走行時の直進は別で作る

	//v = v0 + at
	//x = v0t + 0.5*at^2
	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	Control_Mode = A_VELO_PID;
 8009d28:	4bb9      	ldr	r3, [pc, #740]	; (800a010 <GoStraight+0x2f8>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
	//加減速時は角度制御だけにしておいてあとで困ったら追加
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009d2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009d32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009d36:	ee17 0a90 	vmov	r0, s15
 8009d3a:	f7fe fb3d 	bl	80083b8 <__aeabi_f2d>
 8009d3e:	a3ae      	add	r3, pc, #696	; (adr r3, 8009ff8 <GoStraight+0x2e0>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	f7fe fcba 	bl	80086bc <__aeabi_ddiv>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	4621      	mov	r1, r4
 8009d50:	f7fe fe3a 	bl	80089c8 <__aeabi_d2iz>
 8009d54:	4603      	mov	r3, r0
 8009d56:	61bb      	str	r3, [r7, #24]
	if(accel_or_decel == 1) //加速するとき
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d109      	bne.n	8009d72 <GoStraight+0x5a>
	{
		//explore_speed += AddVelocity;
		VelocityMax = true;
 8009d5e:	4bad      	ldr	r3, [pc, #692]	; (800a014 <GoStraight+0x2fc>)
 8009d60:	2201      	movs	r2, #1
 8009d62:	701a      	strb	r2, [r3, #0]
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009d64:	edd7 0a02 	vldr	s1, [r7, #8]
 8009d68:	ed97 0a03 	vldr	s0, [r7, #12]
 8009d6c:	f7ff fe30 	bl	80099d0 <Accel>
 8009d70:	e138      	b.n	8009fe4 <GoStraight+0x2cc>
	}
	else if(accel_or_decel == -1) //探索速度までの減速. ターン速度までの減速も後で入れる
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d78:	f040 8083 	bne.w	8009e82 <GoStraight+0x16a>
	{
		VelocityMax = false;
 8009d7c:	4ba5      	ldr	r3, [pc, #660]	; (800a014 <GoStraight+0x2fc>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	701a      	strb	r2, [r3, #0]
		//ChangeLED(5);
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009d82:	edd7 7a03 	vldr	s15, [r7, #12]
 8009d86:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8009d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d8e:	edd7 0a02 	vldr	s1, [r7, #8]
 8009d92:	eeb0 0a67 	vmov.f32	s0, s15
 8009d96:	f7ff fecf 	bl	8009b38 <Decel>
//		ChangeLED(6);
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009d9a:	e008      	b.n	8009dae <GoStraight+0x96>
		{
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009d9c:	4b9e      	ldr	r3, [pc, #632]	; (800a018 <GoStraight+0x300>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d104      	bne.n	8009dae <GoStraight+0x96>
			{
				updateRealSearch();
 8009da4:	f003 fed0 	bl	800db48 <updateRealSearch>
				//ChangeLED(7);
				Calc = 1;
 8009da8:	4b9b      	ldr	r3, [pc, #620]	; (800a018 <GoStraight+0x300>)
 8009daa:	2201      	movs	r2, #1
 8009dac:	601a      	str	r2, [r3, #0]
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009dae:	4b9b      	ldr	r3, [pc, #620]	; (800a01c <GoStraight+0x304>)
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	ee07 3a90 	vmov	s15, r3
 8009db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	ee07 3a90 	vmov	s15, r3
 8009dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dc4:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8009dc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009dcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009dd0:	4b93      	ldr	r3, [pc, #588]	; (800a020 <GoStraight+0x308>)
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	ee07 3a90 	vmov	s15, r3
 8009dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de4:	dcda      	bgt.n	8009d9c <GoStraight+0x84>
			}
		}
		KeepPulse[BODY] += target_pulse*0.2f;
 8009de6:	4b8d      	ldr	r3, [pc, #564]	; (800a01c <GoStraight+0x304>)
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	ee07 3a90 	vmov	s15, r3
 8009df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dfc:	eddf 6a89 	vldr	s13, [pc, #548]	; 800a024 <GoStraight+0x30c>
 8009e00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e0c:	ee17 2a90 	vmov	r2, s15
 8009e10:	4b82      	ldr	r3, [pc, #520]	; (800a01c <GoStraight+0x304>)
 8009e12:	609a      	str	r2, [r3, #8]
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009e14:	4b81      	ldr	r3, [pc, #516]	; (800a01c <GoStraight+0x304>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	ee07 3a90 	vmov	s15, r3
 8009e1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	ee07 3a90 	vmov	s15, r3
 8009e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e2a:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a024 <GoStraight+0x30c>
 8009e2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e32:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009e36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e42:	ee17 2a90 	vmov	r2, s15
 8009e46:	4b75      	ldr	r3, [pc, #468]	; (800a01c <GoStraight+0x304>)
 8009e48:	601a      	str	r2, [r3, #0]
		KeepPulse[RIGHT] += target_pulse*0.2f*0.5f;
 8009e4a:	4b74      	ldr	r3, [pc, #464]	; (800a01c <GoStraight+0x304>)
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	ee07 3a90 	vmov	s15, r3
 8009e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	ee07 3a90 	vmov	s15, r3
 8009e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e60:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a024 <GoStraight+0x30c>
 8009e64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e68:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009e6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e78:	ee17 2a90 	vmov	r2, s15
 8009e7c:	4b67      	ldr	r3, [pc, #412]	; (800a01c <GoStraight+0x304>)
 8009e7e:	605a      	str	r2, [r3, #4]
 8009e80:	e0b0      	b.n	8009fe4 <GoStraight+0x2cc>
			//あとは区画使って調整すればいい
		//それを設定してwhileループ
//		Pos.Act = straight;
//		WallSafe();
//		ControlWall();
		_Bool wall_cut=false;	//壁切れ用
 8009e82:	2300      	movs	r3, #0
 8009e84:	75fb      	strb	r3, [r7, #23]
		_Bool face_check  = false; //一度でも正面領域に収まったか
 8009e86:	2300      	movs	r3, #0
 8009e88:	75bb      	strb	r3, [r7, #22]
		int ctrl_mode = GetWallCtrlDirection();
 8009e8a:	f7fe ffd1 	bl	8008e30 <GetWallCtrlDirection>
 8009e8e:	61f8      	str	r0, [r7, #28]
		//両壁がなければ, 角度制御しつつ柱を見たい. 細かすぎるかも.　今は角度制御
		if (ctrl_mode == N_WALL_PID )//|| ctrl_mode == F_WALL_PID)
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	2b06      	cmp	r3, #6
 8009e94:	d161      	bne.n	8009f5a <GoStraight+0x242>
			ctrl_mode = A_VELO_PID;
 8009e96:	2300      	movs	r3, #0
 8009e98:	61fb      	str	r3, [r7, #28]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009e9a:	e05e      	b.n	8009f5a <GoStraight+0x242>
//				}//壁がなくなるのを見越して角度のみに変更
//				else{
//					Control_Mode = ctrl_mode;
//				}//少しの間壁を見て制御
//			}
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 8009e9c:	4b5f      	ldr	r3, [pc, #380]	; (800a01c <GoStraight+0x304>)
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fe fa77 	bl	8008394 <__aeabi_i2d>
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	69b8      	ldr	r0, [r7, #24]
 8009eac:	f7fe fa72 	bl	8008394 <__aeabi_i2d>
 8009eb0:	a353      	add	r3, pc, #332	; (adr r3, 800a000 <GoStraight+0x2e8>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7fe fad7 	bl	8008468 <__aeabi_dmul>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	f7fe f91b 	bl	80080fc <__adddf3>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	460c      	mov	r4, r1
 8009eca:	4625      	mov	r5, r4
 8009ecc:	461c      	mov	r4, r3
 8009ece:	4b54      	ldr	r3, [pc, #336]	; (800a020 <GoStraight+0x308>)
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fa5e 	bl	8008394 <__aeabi_i2d>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4620      	mov	r0, r4
 8009ede:	4629      	mov	r1, r5
 8009ee0:	f7fe fd34 	bl	800894c <__aeabi_dcmplt>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d003      	beq.n	8009ef2 <GoStraight+0x1da>
				Control_Mode = A_VELO_PID;
 8009eea:	4b49      	ldr	r3, [pc, #292]	; (800a010 <GoStraight+0x2f8>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	e002      	b.n	8009ef8 <GoStraight+0x1e0>
			}
			else Control_Mode = ctrl_mode;//壁見る
 8009ef2:	4a47      	ldr	r2, [pc, #284]	; (800a010 <GoStraight+0x2f8>)
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	6013      	str	r3, [r2, #0]
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009ef8:	4b48      	ldr	r3, [pc, #288]	; (800a01c <GoStraight+0x304>)
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe fa49 	bl	8008394 <__aeabi_i2d>
 8009f02:	4604      	mov	r4, r0
 8009f04:	460d      	mov	r5, r1
 8009f06:	69b8      	ldr	r0, [r7, #24]
 8009f08:	f7fe fa44 	bl	8008394 <__aeabi_i2d>
 8009f0c:	a33e      	add	r3, pc, #248	; (adr r3, 800a008 <GoStraight+0x2f0>)
 8009f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f12:	f7fe faa9 	bl	8008468 <__aeabi_dmul>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	f7fe f8ed 	bl	80080fc <__adddf3>
 8009f22:	4603      	mov	r3, r0
 8009f24:	460c      	mov	r4, r1
 8009f26:	4625      	mov	r5, r4
 8009f28:	461c      	mov	r4, r3
 8009f2a:	4b3d      	ldr	r3, [pc, #244]	; (800a020 <GoStraight+0x308>)
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fa30 	bl	8008394 <__aeabi_i2d>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4620      	mov	r0, r4
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	f7fe fd06 	bl	800894c <__aeabi_dcmplt>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d100      	bne.n	8009f48 <GoStraight+0x230>
 8009f46:	e008      	b.n	8009f5a <GoStraight+0x242>
 8009f48:	4b33      	ldr	r3, [pc, #204]	; (800a018 <GoStraight+0x300>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d104      	bne.n	8009f5a <GoStraight+0x242>
			{
				updateRealSearch();
 8009f50:	f003 fdfa 	bl	800db48 <updateRealSearch>
				Calc = 1;
 8009f54:	4b30      	ldr	r3, [pc, #192]	; (800a018 <GoStraight+0x300>)
 8009f56:	2201      	movs	r2, #1
 8009f58:	601a      	str	r2, [r3, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009f5a:	4b30      	ldr	r3, [pc, #192]	; (800a01c <GoStraight+0x304>)
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	441a      	add	r2, r3
 8009f62:	4b2f      	ldr	r3, [pc, #188]	; (800a020 <GoStraight+0x308>)
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	dc98      	bgt.n	8009e9c <GoStraight+0x184>
	//		if( ( keep_pulse + (target_pulse/2) )  <= ( TotalPulse[BODY]) )	//移動量に応じて処理を変える。
	//		{
	//			Acceleration = 0;
	//		}
		}
		Control_Mode = A_VELO_PID;
 8009f6a:	4b29      	ldr	r3, [pc, #164]	; (800a010 <GoStraight+0x2f8>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	601a      	str	r2, [r3, #0]
		wall_cut = false;
 8009f70:	2300      	movs	r3, #0
 8009f72:	75fb      	strb	r3, [r7, #23]
		Acceleration = 0;
 8009f74:	4b2c      	ldr	r3, [pc, #176]	; (800a028 <GoStraight+0x310>)
 8009f76:	f04f 0200 	mov.w	r2, #0
 8009f7a:	601a      	str	r2, [r3, #0]
		KeepPulse[BODY] += target_pulse;
 8009f7c:	4b27      	ldr	r3, [pc, #156]	; (800a01c <GoStraight+0x304>)
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	4413      	add	r3, r2
 8009f84:	4a25      	ldr	r2, [pc, #148]	; (800a01c <GoStraight+0x304>)
 8009f86:	6093      	str	r3, [r2, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 8009f88:	4b24      	ldr	r3, [pc, #144]	; (800a01c <GoStraight+0x304>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	ee07 3a90 	vmov	s15, r3
 8009f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	ee07 3a90 	vmov	s15, r3
 8009f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f9e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009fa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fae:	ee17 2a90 	vmov	r2, s15
 8009fb2:	4b1a      	ldr	r3, [pc, #104]	; (800a01c <GoStraight+0x304>)
 8009fb4:	601a      	str	r2, [r3, #0]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 8009fb6:	4b19      	ldr	r3, [pc, #100]	; (800a01c <GoStraight+0x304>)
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	ee07 3a90 	vmov	s15, r3
 8009fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	ee07 3a90 	vmov	s15, r3
 8009fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fcc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009fd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fdc:	ee17 2a90 	vmov	r2, s15
 8009fe0:	4b0e      	ldr	r3, [pc, #56]	; (800a01c <GoStraight+0x304>)
 8009fe2:	605a      	str	r2, [r3, #4]

	}
	ChangeLED(0);
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	f004 fc2b 	bl	800e840 <ChangeLED>
	//WallWarn();
	//keep_pulse = TotalPulse[BODY];
	//計算は区切りのいいところで一回するだけ。移動しきるまでそのままか、条件に応じて変える。
	//Uターンは別パターン
	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。
}
 8009fea:	bf00      	nop
 8009fec:	3720      	adds	r7, #32
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	f3af 8000 	nop.w
 8009ff8:	23ca2666 	.word	0x23ca2666
 8009ffc:	3f509268 	.word	0x3f509268
 800a000:	9999999a 	.word	0x9999999a
 800a004:	3fd99999 	.word	0x3fd99999
 800a008:	9999999a 	.word	0x9999999a
 800a00c:	3fe99999 	.word	0x3fe99999
 800a010:	2000897c 	.word	0x2000897c
 800a014:	20008aaa 	.word	0x20008aaa
 800a018:	20008c28 	.word	0x20008c28
 800a01c:	200089ec 	.word	0x200089ec
 800a020:	200089b8 	.word	0x200089b8
 800a024:	3e4ccccd 	.word	0x3e4ccccd
 800a028:	20007f3c 	.word	0x20007f3c

0800a02c <TurnRight>:
void TurnRight(char mode)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅い。

	switch( mode )
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	2b53      	cmp	r3, #83	; 0x53
 800a03a:	d02d      	beq.n	800a098 <TurnRight+0x6c>
 800a03c:	2b54      	cmp	r3, #84	; 0x54
 800a03e:	d000      	beq.n	800a042 <TurnRight+0x16>
	case 'S':
		//スラローム
		SlalomRight();
		break;
	default :
		break;
 800a040:	e02d      	b.n	800a09e <TurnRight+0x72>
		Decel(45, 0);
 800a042:	eddf 0a19 	vldr	s1, [pc, #100]	; 800a0a8 <TurnRight+0x7c>
 800a046:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a0ac <TurnRight+0x80>
 800a04a:	f7ff fd75 	bl	8009b38 <Decel>
		WaitStopAndReset();
 800a04e:	f7fe ffc3 	bl	8008fd8 <WaitStopAndReset>
		EmitterOFF();
 800a052:	f004 fbe7 	bl	800e824 <EmitterOFF>
		Control_Mode = NOT_CTRL_PID;
 800a056:	4b16      	ldr	r3, [pc, #88]	; (800a0b0 <TurnRight+0x84>)
 800a058:	220a      	movs	r2, #10
 800a05a:	601a      	str	r2, [r3, #0]
		Rotate( 90 , 2*M_PI);//1.5
 800a05c:	eddf 0a15 	vldr	s1, [pc, #84]	; 800a0b4 <TurnRight+0x88>
 800a060:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800a0b8 <TurnRight+0x8c>
 800a064:	f7fe ffe4 	bl	8009030 <Rotate>
		my_mouse.now.car += 2;
 800a068:	4b14      	ldr	r3, [pc, #80]	; (800a0bc <TurnRight+0x90>)
 800a06a:	7a9b      	ldrb	r3, [r3, #10]
 800a06c:	3302      	adds	r3, #2
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	4b12      	ldr	r3, [pc, #72]	; (800a0bc <TurnRight+0x90>)
 800a072:	729a      	strb	r2, [r3, #10]
		EmitterON();
 800a074:	f004 fbc8 	bl	800e808 <EmitterON>
		HAL_Delay(100);
 800a078:	2064      	movs	r0, #100	; 0x64
 800a07a:	f005 fd1d 	bl	800fab8 <HAL_Delay>
		Control_Mode = A_VELO_PID; //ゴールを破壊してるのはこれ
 800a07e:	4b0c      	ldr	r3, [pc, #48]	; (800a0b0 <TurnRight+0x84>)
 800a080:	2200      	movs	r2, #0
 800a082:	601a      	str	r2, [r3, #0]
		Accel(45, ExploreVelocity);
 800a084:	4b0e      	ldr	r3, [pc, #56]	; (800a0c0 <TurnRight+0x94>)
 800a086:	edd3 7a00 	vldr	s15, [r3]
 800a08a:	eef0 0a67 	vmov.f32	s1, s15
 800a08e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800a0ac <TurnRight+0x80>
 800a092:	f7ff fc9d 	bl	80099d0 <Accel>
		break;
 800a096:	e002      	b.n	800a09e <TurnRight+0x72>
		SlalomRight();
 800a098:	f7ff f9e2 	bl	8009460 <SlalomRight>
		break;
 800a09c:	bf00      	nop
	}


}
 800a09e:	bf00      	nop
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	00000000 	.word	0x00000000
 800a0ac:	42340000 	.word	0x42340000
 800a0b0:	2000897c 	.word	0x2000897c
 800a0b4:	40c90fdb 	.word	0x40c90fdb
 800a0b8:	42b40000 	.word	0x42b40000
 800a0bc:	20008224 	.word	0x20008224
 800a0c0:	20008aac 	.word	0x20008aac

0800a0c4 <TurnLeft>:
void TurnLeft(char mode)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	2b53      	cmp	r3, #83	; 0x53
 800a0d2:	d030      	beq.n	800a136 <TurnLeft+0x72>
 800a0d4:	2b54      	cmp	r3, #84	; 0x54
 800a0d6:	d000      	beq.n	800a0da <TurnLeft+0x16>
	case 'S':
		//スラローム
		SlalomLeft();
		break;
	default :
		break;
 800a0d8:	e030      	b.n	800a13c <TurnLeft+0x78>
		Decel(45, 0);
 800a0da:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a144 <TurnLeft+0x80>
 800a0de:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800a148 <TurnLeft+0x84>
 800a0e2:	f7ff fd29 	bl	8009b38 <Decel>
		WaitStopAndReset();
 800a0e6:	f7fe ff77 	bl	8008fd8 <WaitStopAndReset>
		EmitterOFF();
 800a0ea:	f004 fb9b 	bl	800e824 <EmitterOFF>
		Control_Mode = NOT_CTRL_PID;
 800a0ee:	4b17      	ldr	r3, [pc, #92]	; (800a14c <TurnLeft+0x88>)
 800a0f0:	220a      	movs	r2, #10
 800a0f2:	601a      	str	r2, [r3, #0]
		Rotate( 90 , -2*M_PI);//-1.5
 800a0f4:	eddf 0a16 	vldr	s1, [pc, #88]	; 800a150 <TurnLeft+0x8c>
 800a0f8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800a154 <TurnLeft+0x90>
 800a0fc:	f7fe ff98 	bl	8009030 <Rotate>
		my_mouse.now.car -= 2;
 800a100:	4b15      	ldr	r3, [pc, #84]	; (800a158 <TurnLeft+0x94>)
 800a102:	7a9b      	ldrb	r3, [r3, #10]
 800a104:	3b02      	subs	r3, #2
 800a106:	b2da      	uxtb	r2, r3
 800a108:	4b13      	ldr	r3, [pc, #76]	; (800a158 <TurnLeft+0x94>)
 800a10a:	729a      	strb	r2, [r3, #10]
		EmitterON();
 800a10c:	f004 fb7c 	bl	800e808 <EmitterON>
		HAL_Delay(100);
 800a110:	2064      	movs	r0, #100	; 0x64
 800a112:	f005 fcd1 	bl	800fab8 <HAL_Delay>
		HAL_Delay(100);
 800a116:	2064      	movs	r0, #100	; 0x64
 800a118:	f005 fcce 	bl	800fab8 <HAL_Delay>
		Control_Mode = A_VELO_PID;
 800a11c:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <TurnLeft+0x88>)
 800a11e:	2200      	movs	r2, #0
 800a120:	601a      	str	r2, [r3, #0]
		Accel(45, ExploreVelocity);
 800a122:	4b0e      	ldr	r3, [pc, #56]	; (800a15c <TurnLeft+0x98>)
 800a124:	edd3 7a00 	vldr	s15, [r3]
 800a128:	eef0 0a67 	vmov.f32	s1, s15
 800a12c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800a148 <TurnLeft+0x84>
 800a130:	f7ff fc4e 	bl	80099d0 <Accel>
		break;
 800a134:	e002      	b.n	800a13c <TurnLeft+0x78>
		SlalomLeft();
 800a136:	f7ff faf7 	bl	8009728 <SlalomLeft>
		break;
 800a13a:	bf00      	nop
	}

}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	00000000 	.word	0x00000000
 800a148:	42340000 	.word	0x42340000
 800a14c:	2000897c 	.word	0x2000897c
 800a150:	c0c90fdb 	.word	0xc0c90fdb
 800a154:	42b40000 	.word	0x42b40000
 800a158:	20008224 	.word	0x20008224
 800a15c:	20008aac 	.word	0x20008aac

0800a160 <GoBack>:
void GoBack()
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 800a164:	eddf 0a18 	vldr	s1, [pc, #96]	; 800a1c8 <GoBack+0x68>
 800a168:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a1cc <GoBack+0x6c>
 800a16c:	f7ff fce4 	bl	8009b38 <Decel>
	//float acc = AjustCenter();
	WaitStopAndReset();
 800a170:	f7fe ff32 	bl	8008fd8 <WaitStopAndReset>

	Rotate(180, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
	EmitterON();

#else
	Pos.Dir = right;
 800a174:	4b16      	ldr	r3, [pc, #88]	; (800a1d0 <GoBack+0x70>)
 800a176:	2202      	movs	r2, #2
 800a178:	711a      	strb	r2, [r3, #4]
	Control_Mode = NOT_CTRL_PID;
 800a17a:	4b16      	ldr	r3, [pc, #88]	; (800a1d4 <GoBack+0x74>)
 800a17c:	220a      	movs	r2, #10
 800a17e:	601a      	str	r2, [r3, #0]
//	PIDChangeFlag(A_VELO_PID, 0);
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800a180:	eddf 0a15 	vldr	s1, [pc, #84]	; 800a1d8 <GoBack+0x78>
 800a184:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800a1dc <GoBack+0x7c>
 800a188:	f7fe ff52 	bl	8009030 <Rotate>
	//acc = AjustCenter();
	Pos.Dir = right;
 800a18c:	4b10      	ldr	r3, [pc, #64]	; (800a1d0 <GoBack+0x70>)
 800a18e:	2202      	movs	r2, #2
 800a190:	711a      	strb	r2, [r3, #4]
	Rotate(90, 2*M_PI);
 800a192:	eddf 0a11 	vldr	s1, [pc, #68]	; 800a1d8 <GoBack+0x78>
 800a196:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800a1dc <GoBack+0x7c>
 800a19a:	f7fe ff49 	bl	8009030 <Rotate>
	Control_Mode = A_VELO_PID;
 800a19e:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <GoBack+0x74>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	601a      	str	r2, [r3, #0]
//	PIDChangeFlag(A_VELO_PID, 1);
	Pos.Dir = back;
 800a1a4:	4b0a      	ldr	r3, [pc, #40]	; (800a1d0 <GoBack+0x70>)
 800a1a6:	2204      	movs	r2, #4
 800a1a8:	711a      	strb	r2, [r3, #4]
#endif

	//acc = AjustCenter();
//	/Angle = TargetAngle;

	HAL_Delay(200);
 800a1aa:	20c8      	movs	r0, #200	; 0xc8
 800a1ac:	f005 fc84 	bl	800fab8 <HAL_Delay>

	Accel(45, ExploreVelocity);
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <GoBack+0x80>)
 800a1b2:	edd3 7a00 	vldr	s15, [r3]
 800a1b6:	eef0 0a67 	vmov.f32	s1, s15
 800a1ba:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800a1cc <GoBack+0x6c>
 800a1be:	f7ff fc07 	bl	80099d0 <Accel>
	//ここまでで目標走行距離を完了する

}
 800a1c2:	bf00      	nop
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	00000000 	.word	0x00000000
 800a1cc:	42340000 	.word	0x42340000
 800a1d0:	20000008 	.word	0x20000008
 800a1d4:	2000897c 	.word	0x2000897c
 800a1d8:	40c90fdb 	.word	0x40c90fdb
 800a1dc:	42b40000 	.word	0x42b40000
 800a1e0:	20008aac 	.word	0x20008aac
 800a1e4:	00000000 	.word	0x00000000

0800a1e8 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 800a1e8:	b570      	push	{r4, r5, r6, lr}

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a1ea:	4c71      	ldr	r4, [pc, #452]	; (800a3b0 <Explore_IT+0x1c8>)
 800a1ec:	4871      	ldr	r0, [pc, #452]	; (800a3b4 <Explore_IT+0x1cc>)
 800a1ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a1f0:	4a71      	ldr	r2, [pc, #452]	; (800a3b8 <Explore_IT+0x1d0>)
	TIM4->CNT = INITIAL_PULSE;

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a1f2:	eddf 7a72 	vldr	s15, [pc, #456]	; 800a3bc <Explore_IT+0x1d4>
 800a1f6:	4d72      	ldr	r5, [pc, #456]	; (800a3c0 <Explore_IT+0x1d8>)

	//switch文でどれかひとつに絞らせたい
	static int keep_mode = A_VELO_PID;

	//0から違うモードに変わるとき、前のモードの値をリセットしておく
	if( Control_Mode != keep_mode){
 800a1f8:	4e72      	ldr	r6, [pc, #456]	; (800a3c4 <Explore_IT+0x1dc>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a1fa:	f247 532f 	movw	r3, #29999	; 0x752f
 800a1fe:	1a59      	subs	r1, r3, r1
 800a200:	6001      	str	r1, [r0, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a202:	6263      	str	r3, [r4, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a204:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a206:	6253      	str	r3, [r2, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a208:	1b1b      	subs	r3, r3, r4
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a20a:	ee07 3a10 	vmov	s14, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a20e:	ee06 1a90 	vmov	s13, r1
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a212:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a216:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a21a:	ee27 7a27 	vmul.f32	s14, s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a21e:	ee66 6aa7 	vmul.f32	s13, s13, s15
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a222:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a226:	edc5 6a00 	vstr	s13, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a22a:	ed85 7a01 	vstr	s14, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a22e:	edd5 7a00 	vldr	s15, [r5]
 800a232:	ed95 7a01 	vldr	s14, [r5, #4]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a236:	4a64      	ldr	r2, [pc, #400]	; (800a3c8 <Explore_IT+0x1e0>)
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a238:	6043      	str	r3, [r0, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a23a:	ee77 7a87 	vadd.f32	s15, s15, s14
	if( Control_Mode != keep_mode){
 800a23e:	4c63      	ldr	r4, [pc, #396]	; (800a3cc <Explore_IT+0x1e4>)
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a240:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a244:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a248:	6810      	ldr	r0, [r2, #0]
 800a24a:	4401      	add	r1, r0
 800a24c:	6011      	str	r1, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a24e:	6851      	ldr	r1, [r2, #4]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a250:	485f      	ldr	r0, [pc, #380]	; (800a3d0 <Explore_IT+0x1e8>)
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a252:	440b      	add	r3, r1
 800a254:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a256:	6813      	ldr	r3, [r2, #0]
 800a258:	6851      	ldr	r1, [r2, #4]
 800a25a:	440b      	add	r3, r1
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a25c:	495d      	ldr	r1, [pc, #372]	; (800a3d4 <Explore_IT+0x1ec>)
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a25e:	6093      	str	r3, [r2, #8]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 800a260:	f004 f93e 	bl	800e4e0 <Update_IMU>
	if( Control_Mode != keep_mode){
 800a264:	6820      	ldr	r0, [r4, #0]
 800a266:	6833      	ldr	r3, [r6, #0]
 800a268:	4283      	cmp	r3, r0
 800a26a:	f040 808e 	bne.w	800a38a <Explore_IT+0x1a2>
 800a26e:	4a5a      	ldr	r2, [pc, #360]	; (800a3d8 <Explore_IT+0x1f0>)
		PIDReset(keep_mode);
//		PIDChangeFlag(, 0);
		Pid[keep_mode].flag = 0;
	}
	Pid[Control_Mode].flag = 1;
	keep_mode = Control_Mode;
 800a270:	6020      	str	r0, [r4, #0]
	Pid[Control_Mode].flag = 1;
 800a272:	232c      	movs	r3, #44	; 0x2c
 800a274:	fb03 2300 	mla	r3, r3, r0, r2
 800a278:	2201      	movs	r2, #1
 800a27a:	629a      	str	r2, [r3, #40]	; 0x28
					TargetAngularV = (float)ang_out;

					//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
				}
#endif
	switch(Control_Mode)
 800a27c:	2803      	cmp	r0, #3
 800a27e:	f200 808f 	bhi.w	800a3a0 <Explore_IT+0x1b8>
 800a282:	e8df f000 	tbb	[pc, r0]
 800a286:	6571      	.short	0x6571
 800a288:	025d      	.short	0x025d
	case L_WALL_PID:
		wall_l = PIDControl( Control_Mode,  Photo[SL], TargetPhoto[SL]);
		TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
		break;
	case R_WALL_PID :
		wall_r = PIDControl( Control_Mode,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800a28a:	4a54      	ldr	r2, [pc, #336]	; (800a3dc <Explore_IT+0x1f4>)
 800a28c:	4b54      	ldr	r3, [pc, #336]	; (800a3e0 <Explore_IT+0x1f8>)
 800a28e:	ed92 0a01 	vldr	s0, [r2, #4]
 800a292:	edd3 0a01 	vldr	s1, [r3, #4]
 800a296:	2003      	movs	r0, #3
 800a298:	f005 f916 	bl	800f4c8 <PIDControl>
		TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800a29c:	ee07 0a90 	vmov	s15, r0
 800a2a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2a4:	ee17 0a90 	vmov	r0, s15
 800a2a8:	f7fe f886 	bl	80083b8 <__aeabi_f2d>
 800a2ac:	a33e      	add	r3, pc, #248	; (adr r3, 800a3a8 <Explore_IT+0x1c0>)
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	f7fe f8d9 	bl	8008468 <__aeabi_dmul>
 800a2b6:	f7fe fbcf 	bl	8008a58 <__aeabi_d2f>
 800a2ba:	4b4a      	ldr	r3, [pc, #296]	; (800a3e4 <Explore_IT+0x1fc>)
 800a2bc:	6018      	str	r0, [r3, #0]
//
//				//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
//			}
//		}

	TargetVelocity[BODY] += Acceleration;
 800a2be:	4c4a      	ldr	r4, [pc, #296]	; (800a3e8 <Explore_IT+0x200>)
 800a2c0:	4a4a      	ldr	r2, [pc, #296]	; (800a3ec <Explore_IT+0x204>)
	//AngularAcceleration += AngularLeapsity;
	TargetAngularV += AngularAcceleration;
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a2c2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800a3f0 <Explore_IT+0x208>
	TargetVelocity[BODY] += Acceleration;
 800a2c6:	ed92 7a00 	vldr	s14, [r2]
 800a2ca:	edd4 7a02 	vldr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 800a2ce:	4a49      	ldr	r2, [pc, #292]	; (800a3f4 <Explore_IT+0x20c>)
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a2d0:	4e49      	ldr	r6, [pc, #292]	; (800a3f8 <Explore_IT+0x210>)
	TargetVelocity[BODY] += Acceleration;
 800a2d2:	ee77 7a87 	vadd.f32	s15, s15, s14
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a2d6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	TargetVelocity[BODY] += Acceleration;
 800a2da:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 800a2de:	ed92 7a00 	vldr	s14, [r2]
 800a2e2:	edd3 7a00 	vldr	s15, [r3]
 800a2e6:	ee77 7a87 	vadd.f32	s15, s15, s14
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a2ea:	2004      	movs	r0, #4
	TargetAngularV += AngularAcceleration;
 800a2ec:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a2f0:	edd4 7a02 	vldr	s15, [r4, #8]
 800a2f4:	ed93 7a00 	vldr	s14, [r3]
 800a2f8:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a2fc:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a300:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a304:	ed93 7a00 	vldr	s14, [r3]
 800a308:	edd4 7a01 	vldr	s15, [r4, #4]
 800a30c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a310:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a314:	ed94 0a00 	vldr	s0, [r4]
 800a318:	edd5 0a00 	vldr	s1, [r5]
 800a31c:	f005 f8d4 	bl	800f4c8 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a320:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a324:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a326:	edd5 0a01 	vldr	s1, [r5, #4]
 800a32a:	2005      	movs	r0, #5
 800a32c:	f005 f8cc 	bl	800f4c8 <PIDControl>
 800a330:	4b32      	ldr	r3, [pc, #200]	; (800a3fc <Explore_IT+0x214>)
 800a332:	4601      	mov	r1, r0

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a334:	6830      	ldr	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a336:	6019      	str	r1, [r3, #0]
//			ChangeLED(7);
//	else
//	{
//		ChangeLED(4);
//	}
}
 800a338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a33c:	f004 bb74 	b.w	800ea28 <Motor_Switch>
		wall_l = PIDControl( Control_Mode,  Photo[SL], TargetPhoto[SL]);
 800a340:	4a27      	ldr	r2, [pc, #156]	; (800a3e0 <Explore_IT+0x1f8>)
 800a342:	4b26      	ldr	r3, [pc, #152]	; (800a3dc <Explore_IT+0x1f4>)
 800a344:	ed92 0a02 	vldr	s0, [r2, #8]
 800a348:	edd3 0a02 	vldr	s1, [r3, #8]
 800a34c:	2002      	movs	r0, #2
 800a34e:	e7a3      	b.n	800a298 <Explore_IT+0xb0>
		wall_d = PIDControl( Control_Mode, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800a350:	4b23      	ldr	r3, [pc, #140]	; (800a3e0 <Explore_IT+0x1f8>)
 800a352:	4a2b      	ldr	r2, [pc, #172]	; (800a400 <Explore_IT+0x218>)
 800a354:	ed93 0a02 	vldr	s0, [r3, #8]
 800a358:	edd3 0a01 	vldr	s1, [r3, #4]
 800a35c:	edd2 7a00 	vldr	s15, [r2]
 800a360:	2001      	movs	r0, #1
 800a362:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800a366:	e797      	b.n	800a298 <Explore_IT+0xb0>
		ang_out = PIDControl( Control_Mode,  TargetAngle, Angle);
 800a368:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <Explore_IT+0x1ec>)
 800a36a:	4a26      	ldr	r2, [pc, #152]	; (800a404 <Explore_IT+0x21c>)
 800a36c:	2000      	movs	r0, #0
 800a36e:	ed92 0a00 	vldr	s0, [r2]
 800a372:	edd3 0a00 	vldr	s1, [r3]
 800a376:	f005 f8a7 	bl	800f4c8 <PIDControl>
		TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 800a37a:	ee07 0a90 	vmov	s15, r0
 800a37e:	4b19      	ldr	r3, [pc, #100]	; (800a3e4 <Explore_IT+0x1fc>)
 800a380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a384:	edc3 7a00 	vstr	s15, [r3]
		break;
 800a388:	e799      	b.n	800a2be <Explore_IT+0xd6>
		PIDReset(keep_mode);
 800a38a:	f005 f85f 	bl	800f44c <PIDReset>
		Pid[keep_mode].flag = 0;
 800a38e:	4a12      	ldr	r2, [pc, #72]	; (800a3d8 <Explore_IT+0x1f0>)
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	6830      	ldr	r0, [r6, #0]
 800a394:	212c      	movs	r1, #44	; 0x2c
 800a396:	fb01 2303 	mla	r3, r1, r3, r2
 800a39a:	2100      	movs	r1, #0
 800a39c:	6299      	str	r1, [r3, #40]	; 0x28
 800a39e:	e767      	b.n	800a270 <Explore_IT+0x88>
 800a3a0:	4b10      	ldr	r3, [pc, #64]	; (800a3e4 <Explore_IT+0x1fc>)
 800a3a2:	e78c      	b.n	800a2be <Explore_IT+0xd6>
 800a3a4:	f3af 8000 	nop.w
 800a3a8:	d2f1a9fc 	.word	0xd2f1a9fc
 800a3ac:	3f50624d 	.word	0x3f50624d
 800a3b0:	40000400 	.word	0x40000400
 800a3b4:	20008b74 	.word	0x20008b74
 800a3b8:	40000800 	.word	0x40000800
 800a3bc:	3f8177cd 	.word	0x3f8177cd
 800a3c0:	200089c4 	.word	0x200089c4
 800a3c4:	2000897c 	.word	0x2000897c
 800a3c8:	200089b8 	.word	0x200089b8
 800a3cc:	20007f2c 	.word	0x20007f2c
 800a3d0:	20007f34 	.word	0x20007f34
 800a3d4:	20007f38 	.word	0x20007f38
 800a3d8:	20008034 	.word	0x20008034
 800a3dc:	20008ab8 	.word	0x20008ab8
 800a3e0:	200089f8 	.word	0x200089f8
 800a3e4:	20008998 	.word	0x20008998
 800a3e8:	20008988 	.word	0x20008988
 800a3ec:	20007f3c 	.word	0x20007f3c
 800a3f0:	4209999a 	.word	0x4209999a
 800a3f4:	20007f40 	.word	0x20007f40
 800a3f8:	20008ab0 	.word	0x20008ab0
 800a3fc:	20008acc 	.word	0x20008acc
 800a400:	200089ac 	.word	0x200089ac
 800a404:	20007f48 	.word	0x20007f48

0800a408 <WritingFree_IT>:
void WritingFree_IT()
{
 800a408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a40c:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800a604 <WritingFree_IT+0x1fc>
 800a410:	4969      	ldr	r1, [pc, #420]	; (800a5b8 <WritingFree_IT+0x1b0>)
 800a412:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a416:	4869      	ldr	r0, [pc, #420]	; (800a5bc <WritingFree_IT+0x1b4>)
	TIM4->CNT = INITIAL_PULSE;

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a418:	eddf 6a69 	vldr	s13, [pc, #420]	; 800a5c0 <WritingFree_IT+0x1b8>
 800a41c:	4d69      	ldr	r5, [pc, #420]	; (800a5c4 <WritingFree_IT+0x1bc>)
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a41e:	4a6a      	ldr	r2, [pc, #424]	; (800a5c8 <WritingFree_IT+0x1c0>)
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a420:	4f6a      	ldr	r7, [pc, #424]	; (800a5cc <WritingFree_IT+0x1c4>)
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
	TargetVelocity[BODY] += Acceleration;
 800a422:	4c6b      	ldr	r4, [pc, #428]	; (800a5d0 <WritingFree_IT+0x1c8>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a424:	f247 532f 	movw	r3, #29999	; 0x752f
 800a428:	1b9e      	subs	r6, r3, r6
{
 800a42a:	ed2d 8b02 	vpush	{d8}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800a42e:	600e      	str	r6, [r1, #0]
	TIM3->CNT = INITIAL_PULSE;
 800a430:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a434:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 800a438:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a43a:	eba3 030c 	sub.w	r3, r3, ip
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a43e:	ee07 3a90 	vmov	s15, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a442:	ee07 6a10 	vmov	s14, r6
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a44a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a44e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a452:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a456:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800a45a:	ed85 7a00 	vstr	s14, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800a45e:	edc5 7a01 	vstr	s15, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a462:	edd5 7a00 	vldr	s15, [r5]
 800a466:	ed95 7a01 	vldr	s14, [r5, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800a46a:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a46c:	ee77 7a87 	vadd.f32	s15, s15, s14
	ZGyro = ReadIMU(0x37, 0x38);
 800a470:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a472:	ee67 7aa8 	vmul.f32	s15, s15, s17
	ZGyro = ReadIMU(0x37, 0x38);
 800a476:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800a478:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800a47c:	f8d2 c000 	ldr.w	ip, [r2]
 800a480:	4466      	add	r6, ip
 800a482:	6016      	str	r6, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800a484:	6856      	ldr	r6, [r2, #4]
 800a486:	4433      	add	r3, r6
 800a488:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800a48a:	6813      	ldr	r3, [r2, #0]
 800a48c:	6856      	ldr	r6, [r2, #4]
 800a48e:	4433      	add	r3, r6
 800a490:	6093      	str	r3, [r2, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 800a492:	f003 ff6b 	bl	800e36c <ReadIMU>
 800a496:	4b4f      	ldr	r3, [pc, #316]	; (800a5d4 <WritingFree_IT+0x1cc>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a498:	4a4f      	ldr	r2, [pc, #316]	; (800a5d8 <WritingFree_IT+0x1d0>)
	ZGyro = ReadIMU(0x37, 0x38);
 800a49a:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a49e:	ed93 8a00 	vldr	s16, [r3]
 800a4a2:	ed92 7a00 	vldr	s14, [r2]
 800a4a6:	4b4d      	ldr	r3, [pc, #308]	; (800a5dc <WritingFree_IT+0x1d4>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a4a8:	6838      	ldr	r0, [r7, #0]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a4aa:	edd3 7a00 	vldr	s15, [r3]
	AngularAcceleration += AngularLeapsity;
 800a4ae:	4e4c      	ldr	r6, [pc, #304]	; (800a5e0 <WritingFree_IT+0x1d8>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800a4b0:	ee38 8a47 	vsub.f32	s16, s16, s14
 800a4b4:	ee28 8a27 	vmul.f32	s16, s16, s15
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a4b8:	f7fd ff7e 	bl	80083b8 <__aeabi_f2d>
 800a4bc:	a33a      	add	r3, pc, #232	; (adr r3, 800a5a8 <WritingFree_IT+0x1a0>)
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	f7fd ffd1 	bl	8008468 <__aeabi_dmul>
 800a4c6:	4680      	mov	r8, r0
 800a4c8:	ee18 0a10 	vmov	r0, s16
 800a4cc:	4689      	mov	r9, r1
 800a4ce:	f7fd ff73 	bl	80083b8 <__aeabi_f2d>
 800a4d2:	a337      	add	r3, pc, #220	; (adr r3, 800a5b0 <WritingFree_IT+0x1a8>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f7fd ffc6 	bl	8008468 <__aeabi_dmul>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4640      	mov	r0, r8
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	f7fd fe0a 	bl	80080fc <__adddf3>
 800a4e8:	f7fe fab6 	bl	8008a58 <__aeabi_d2f>
 800a4ec:	4b3d      	ldr	r3, [pc, #244]	; (800a5e4 <WritingFree_IT+0x1dc>)
	Angle += AngularV * T1;
 800a4ee:	493e      	ldr	r1, [pc, #248]	; (800a5e8 <WritingFree_IT+0x1e0>)
 800a4f0:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800a5ec <WritingFree_IT+0x1e4>
	AngularAcceleration += AngularLeapsity;
 800a4f4:	4a3e      	ldr	r2, [pc, #248]	; (800a5f0 <WritingFree_IT+0x1e8>)
 800a4f6:	ed96 6a00 	vldr	s12, [r6]
	TargetVelocity[BODY] += Acceleration;
 800a4fa:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800a608 <WritingFree_IT+0x200>
	TargetAngularV += AngularAcceleration;

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a4fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a5f4 <WritingFree_IT+0x1ec>
    zg_last = zg_law;
 800a502:	ed87 8a00 	vstr	s16, [r7]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800a506:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800a50a:	6018      	str	r0, [r3, #0]
	Angle += AngularV * T1;
 800a50c:	edd3 5a00 	vldr	s11, [r3]
 800a510:	ed91 7a00 	vldr	s14, [r1]
	TargetAngularV += AngularAcceleration;
 800a514:	4b38      	ldr	r3, [pc, #224]	; (800a5f8 <WritingFree_IT+0x1f0>)
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a516:	4e39      	ldr	r6, [pc, #228]	; (800a5fc <WritingFree_IT+0x1f4>)
	Angle += AngularV * T1;
 800a518:	eea5 7aa7 	vfma.f32	s14, s11, s15
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a51c:	2004      	movs	r0, #4
	Angle += AngularV * T1;
 800a51e:	ed81 7a00 	vstr	s14, [r1]
	AngularAcceleration += AngularLeapsity;
 800a522:	edd2 7a00 	vldr	s15, [r2]
 800a526:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a52a:	edc2 7a00 	vstr	s15, [r2]
	TargetVelocity[BODY] += Acceleration;
 800a52e:	ed9c 7a00 	vldr	s14, [ip]
 800a532:	edd4 7a02 	vldr	s15, [r4, #8]
 800a536:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a53a:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 800a53e:	ed92 7a00 	vldr	s14, [r2]
 800a542:	edd3 7a00 	vldr	s15, [r3]
 800a546:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a54a:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800a54e:	edd4 7a02 	vldr	s15, [r4, #8]
 800a552:	ed93 7a00 	vldr	s14, [r3]
 800a556:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800a55a:	eee7 7a28 	vfma.f32	s15, s14, s17
 800a55e:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800a562:	ed93 7a00 	vldr	s14, [r3]
 800a566:	edd4 7a01 	vldr	s15, [r4, #4]
 800a56a:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a56e:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a572:	ed94 0a00 	vldr	s0, [r4]
 800a576:	edd5 0a00 	vldr	s1, [r5]
 800a57a:	f004 ffa5 	bl	800f4c8 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a57e:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800a582:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a584:	edd5 0a01 	vldr	s1, [r5, #4]
 800a588:	2005      	movs	r0, #5
 800a58a:	f004 ff9d 	bl	800f4c8 <PIDControl>

	Motor_Switch( VelocityLeftOut, VelocityRightOut );


}
 800a58e:	ecbd 8b02 	vpop	{d8}
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800a592:	4b1b      	ldr	r3, [pc, #108]	; (800a600 <WritingFree_IT+0x1f8>)
 800a594:	4601      	mov	r1, r0
 800a596:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a598:	6830      	ldr	r0, [r6, #0]
}
 800a59a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800a59e:	f004 ba43 	b.w	800ea28 <Motor_Switch>
 800a5a2:	bf00      	nop
 800a5a4:	f3af 8000 	nop.w
 800a5a8:	7ae147ae 	.word	0x7ae147ae
 800a5ac:	3fefae14 	.word	0x3fefae14
 800a5b0:	47ae147b 	.word	0x47ae147b
 800a5b4:	3f847ae1 	.word	0x3f847ae1
 800a5b8:	20008b74 	.word	0x20008b74
 800a5bc:	40000800 	.word	0x40000800
 800a5c0:	3f8177cd 	.word	0x3f8177cd
 800a5c4:	200089c4 	.word	0x200089c4
 800a5c8:	200089b8 	.word	0x200089b8
 800a5cc:	20007f30 	.word	0x20007f30
 800a5d0:	20008988 	.word	0x20008988
 800a5d4:	20007fe8 	.word	0x20007fe8
 800a5d8:	20007fe4 	.word	0x20007fe4
 800a5dc:	0801a2bc 	.word	0x0801a2bc
 800a5e0:	20007f44 	.word	0x20007f44
 800a5e4:	20007f34 	.word	0x20007f34
 800a5e8:	20007f38 	.word	0x20007f38
 800a5ec:	3a83126f 	.word	0x3a83126f
 800a5f0:	20007f40 	.word	0x20007f40
 800a5f4:	4209999a 	.word	0x4209999a
 800a5f8:	20008998 	.word	0x20008998
 800a5fc:	20008ab0 	.word	0x20008ab0
 800a600:	20008acc 	.word	0x20008acc
 800a604:	40000400 	.word	0x40000400
 800a608:	20007f3c 	.word	0x20007f3c

0800a60c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if( htim == &htim1)
 800a60c:	4b28      	ldr	r3, [pc, #160]	; (800a6b0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800a60e:	4298      	cmp	r0, r3
{
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	4604      	mov	r4, r0
	if( htim == &htim1)
 800a614:	d003      	beq.n	800a61e <HAL_TIM_PeriodElapsedCallback+0x12>
		default :
			break;
		}
	}

	if( htim == &htim8)
 800a616:	4b27      	ldr	r3, [pc, #156]	; (800a6b4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800a618:	429c      	cmp	r4, r3
 800a61a:	d012      	beq.n	800a642 <HAL_TIM_PeriodElapsedCallback+0x36>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
	}
}
 800a61c:	bd70      	pop	{r4, r5, r6, pc}
		switch(IT_mode){
 800a61e:	4b26      	ldr	r3, [pc, #152]	; (800a6b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b06      	cmp	r3, #6
 800a624:	d030      	beq.n	800a688 <HAL_TIM_PeriodElapsedCallback+0x7c>
 800a626:	2b07      	cmp	r3, #7
 800a628:	d02b      	beq.n	800a682 <HAL_TIM_PeriodElapsedCallback+0x76>
 800a62a:	2b05      	cmp	r3, #5
 800a62c:	d1f3      	bne.n	800a616 <HAL_TIM_PeriodElapsedCallback+0xa>
			if(timer1 < 5000)
 800a62e:	4d23      	ldr	r5, [pc, #140]	; (800a6bc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800a630:	682a      	ldr	r2, [r5, #0]
 800a632:	f241 3387 	movw	r3, #4999	; 0x1387
 800a636:	429a      	cmp	r2, r3
 800a638:	dd29      	ble.n	800a68e <HAL_TIM_PeriodElapsedCallback+0x82>
			else t = 0;
 800a63a:	4b21      	ldr	r3, [pc, #132]	; (800a6c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	e7e9      	b.n	800a616 <HAL_TIM_PeriodElapsedCallback+0xa>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a642:	4e20      	ldr	r6, [pc, #128]	; (800a6c4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800a644:	4c20      	ldr	r4, [pc, #128]	; (800a6c8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800a646:	6831      	ldr	r1, [r6, #0]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a648:	4d20      	ldr	r5, [pc, #128]	; (800a6cc <HAL_TIM_PeriodElapsedCallback+0xc0>)
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a64a:	2200      	movs	r2, #0
 800a64c:	200a      	movs	r0, #10
 800a64e:	f004 fa5b 	bl	800eb08 <GetWallDataAverage>
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a652:	6871      	ldr	r1, [r6, #4]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a654:	ed84 0a00 	vstr	s0, [r4]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a658:	2201      	movs	r2, #1
 800a65a:	200a      	movs	r0, #10
 800a65c:	f004 fa54 	bl	800eb08 <GetWallDataAverage>
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a660:	6829      	ldr	r1, [r5, #0]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a662:	ed84 0a01 	vstr	s0, [r4, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a666:	2202      	movs	r2, #2
 800a668:	200a      	movs	r0, #10
 800a66a:	f004 fa4d 	bl	800eb08 <GetWallDataAverage>
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a66e:	6869      	ldr	r1, [r5, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a670:	ed84 0a02 	vstr	s0, [r4, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a674:	2203      	movs	r2, #3
 800a676:	200a      	movs	r0, #10
 800a678:	f004 fa46 	bl	800eb08 <GetWallDataAverage>
 800a67c:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800a680:	bd70      	pop	{r4, r5, r6, pc}
			WritingFree_IT();
 800a682:	f7ff fec1 	bl	800a408 <WritingFree_IT>
			break;
 800a686:	e7c6      	b.n	800a616 <HAL_TIM_PeriodElapsedCallback+0xa>
			Explore_IT();
 800a688:	f7ff fdae 	bl	800a1e8 <Explore_IT>
			break;
 800a68c:	e7c3      	b.n	800a616 <HAL_TIM_PeriodElapsedCallback+0xa>
				Update_IMU(&AngularV, &Angle);
 800a68e:	4e10      	ldr	r6, [pc, #64]	; (800a6d0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800a690:	4810      	ldr	r0, [pc, #64]	; (800a6d4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800a692:	4631      	mov	r1, r6
 800a694:	f003 ff24 	bl	800e4e0 <Update_IMU>
				timer1 += t;
 800a698:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
				debugVL[timer1] = Angle;
 800a69a:	6829      	ldr	r1, [r5, #0]
 800a69c:	4a0e      	ldr	r2, [pc, #56]	; (800a6d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
				timer1 += t;
 800a69e:	681b      	ldr	r3, [r3, #0]
				debugVL[timer1] = Angle;
 800a6a0:	6830      	ldr	r0, [r6, #0]
 800a6a2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
				timer1 += t;
 800a6a6:	440b      	add	r3, r1
				debugVL[timer1] = Angle;
 800a6a8:	6010      	str	r0, [r2, #0]
				timer1 += t;
 800a6aa:	602b      	str	r3, [r5, #0]
 800a6ac:	e7b3      	b.n	800a616 <HAL_TIM_PeriodElapsedCallback+0xa>
 800a6ae:	bf00      	nop
 800a6b0:	20008e74 	.word	0x20008e74
 800a6b4:	20008c2c 	.word	0x20008c2c
 800a6b8:	20008974 	.word	0x20008974
 800a6bc:	20008980 	.word	0x20008980
 800a6c0:	20008970 	.word	0x20008970
 800a6c4:	20007fd0 	.word	0x20007fd0
 800a6c8:	200089f8 	.word	0x200089f8
 800a6cc:	20007fdc 	.word	0x20007fdc
 800a6d0:	20007f38 	.word	0x20007f38
 800a6d4:	20007f34 	.word	0x20007f34
 800a6d8:	2000022c 	.word	0x2000022c

0800a6dc <flashStoreNodes>:
				address += 16;
			}
	}
}
void flashStoreNodes()
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800a6e2:	4b26      	ldr	r3, [pc, #152]	; (800a77c <flashStoreNodes+0xa0>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	617b      	str	r3, [r7, #20]

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	613b      	str	r3, [r7, #16]
 800a6ec:	e01c      	b.n	800a728 <flashStoreNodes+0x4c>
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	e013      	b.n	800a71c <flashStoreNodes+0x40>
			{
				FLASH_Write_Word(address+0, my_map.RawNode[i][j].existence);
 800a6f4:	4922      	ldr	r1, [pc, #136]	; (800a780 <flashStoreNodes+0xa4>)
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 800a708:	4619      	mov	r1, r3
 800a70a:	6978      	ldr	r0, [r7, #20]
 800a70c:	f003 fd0a 	bl	800e124 <FLASH_Write_Word>
				address += 4;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	3304      	adds	r3, #4
 800a714:	617b      	str	r3, [r7, #20]
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	3301      	adds	r3, #1
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2b09      	cmp	r3, #9
 800a720:	dde8      	ble.n	800a6f4 <flashStoreNodes+0x18>
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	3301      	adds	r3, #1
 800a726:	613b      	str	r3, [r7, #16]
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	2b08      	cmp	r3, #8
 800a72c:	dddf      	ble.n	800a6ee <flashStoreNodes+0x12>
			}
	}//2*N*(N+1)*4byte = 64*33*4byte
	//列
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a72e:	2300      	movs	r3, #0
 800a730:	60bb      	str	r3, [r7, #8]
 800a732:	e01c      	b.n	800a76e <flashStoreNodes+0x92>
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a734:	2300      	movs	r3, #0
 800a736:	607b      	str	r3, [r7, #4]
 800a738:	e013      	b.n	800a762 <flashStoreNodes+0x86>
			{
				FLASH_Write_Word(address+0, my_map.ColumnNode[i][j].existence);
 800a73a:	4911      	ldr	r1, [pc, #68]	; (800a780 <flashStoreNodes+0xa4>)
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	4613      	mov	r3, r2
 800a740:	00db      	lsls	r3, r3, #3
 800a742:	4413      	add	r3, r2
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	4413      	add	r3, r2
 800a748:	335a      	adds	r3, #90	; 0x5a
 800a74a:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 800a74e:	4619      	mov	r1, r3
 800a750:	6978      	ldr	r0, [r7, #20]
 800a752:	f003 fce7 	bl	800e124 <FLASH_Write_Word>
				address += 4;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	3304      	adds	r3, #4
 800a75a:	617b      	str	r3, [r7, #20]
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3301      	adds	r3, #1
 800a760:	607b      	str	r3, [r7, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b08      	cmp	r3, #8
 800a766:	dde8      	ble.n	800a73a <flashStoreNodes+0x5e>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	3301      	adds	r3, #1
 800a76c:	60bb      	str	r3, [r7, #8]
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	2b09      	cmp	r3, #9
 800a772:	dddf      	ble.n	800a734 <flashStoreNodes+0x58>
			}
	}
}
 800a774:	bf00      	nop
 800a776:	3718      	adds	r7, #24
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	0801a2b4 	.word	0x0801a2b4
 800a780:	200083d0 	.word	0x200083d0

0800a784 <wall_init>:
void wall_init(){
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a78a:	2300      	movs	r3, #0
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	e043      	b.n	800a818 <wall_init+0x94>
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a790:	2300      	movs	r3, #0
 800a792:	60bb      	str	r3, [r7, #8]
 800a794:	e03a      	b.n	800a80c <wall_init+0x88>
				Wall[i][j].north = UNKNOWN;
 800a796:	494b      	ldr	r1, [pc, #300]	; (800a8c4 <wall_init+0x140>)
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	4613      	mov	r3, r2
 800a79c:	00db      	lsls	r3, r3, #3
 800a79e:	4413      	add	r3, r2
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	441a      	add	r2, r3
 800a7a4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a7a8:	2002      	movs	r0, #2
 800a7aa:	f360 0301 	bfi	r3, r0, #0, #2
 800a7ae:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = UNKNOWN;
 800a7b2:	4944      	ldr	r1, [pc, #272]	; (800a8c4 <wall_init+0x140>)
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	00db      	lsls	r3, r3, #3
 800a7ba:	4413      	add	r3, r2
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	441a      	add	r2, r3
 800a7c0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a7c4:	2002      	movs	r0, #2
 800a7c6:	f360 0383 	bfi	r3, r0, #2, #2
 800a7ca:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = UNKNOWN;
 800a7ce:	493d      	ldr	r1, [pc, #244]	; (800a8c4 <wall_init+0x140>)
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	4413      	add	r3, r2
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	441a      	add	r2, r3
 800a7dc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a7e0:	2002      	movs	r0, #2
 800a7e2:	f360 1305 	bfi	r3, r0, #4, #2
 800a7e6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = UNKNOWN;
 800a7ea:	4936      	ldr	r1, [pc, #216]	; (800a8c4 <wall_init+0x140>)
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	00db      	lsls	r3, r3, #3
 800a7f2:	4413      	add	r3, r2
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	441a      	add	r2, r3
 800a7f8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a7fc:	2002      	movs	r0, #2
 800a7fe:	f360 1387 	bfi	r3, r0, #6, #2
 800a802:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	3301      	adds	r3, #1
 800a80a:	60bb      	str	r3, [r7, #8]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	2b08      	cmp	r3, #8
 800a810:	ddc1      	ble.n	800a796 <wall_init+0x12>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3301      	adds	r3, #1
 800a816:	60fb      	str	r3, [r7, #12]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b08      	cmp	r3, #8
 800a81c:	ddb8      	ble.n	800a790 <wall_init+0xc>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a81e:	2300      	movs	r3, #0
 800a820:	607b      	str	r3, [r7, #4]
 800a822:	e030      	b.n	800a886 <wall_init+0x102>
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800a824:	4927      	ldr	r1, [pc, #156]	; (800a8c4 <wall_init+0x140>)
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	4613      	mov	r3, r2
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	4413      	add	r3, r2
 800a82e:	005b      	lsls	r3, r3, #1
 800a830:	440b      	add	r3, r1
 800a832:	f103 0210 	add.w	r2, r3, #16
 800a836:	7813      	ldrb	r3, [r2, #0]
 800a838:	2101      	movs	r1, #1
 800a83a:	f361 0301 	bfi	r3, r1, #0, #2
 800a83e:	7013      	strb	r3, [r2, #0]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800a840:	4920      	ldr	r1, [pc, #128]	; (800a8c4 <wall_init+0x140>)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a848:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a84c:	2001      	movs	r0, #1
 800a84e:	f360 0383 	bfi	r3, r0, #2, #2
 800a852:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		Wall[n][0].south = WALL;
 800a856:	491b      	ldr	r1, [pc, #108]	; (800a8c4 <wall_init+0x140>)
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	4613      	mov	r3, r2
 800a85c:	00db      	lsls	r3, r3, #3
 800a85e:	4413      	add	r3, r2
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	18ca      	adds	r2, r1, r3
 800a864:	7813      	ldrb	r3, [r2, #0]
 800a866:	2101      	movs	r1, #1
 800a868:	f361 1305 	bfi	r3, r1, #4, #2
 800a86c:	7013      	strb	r3, [r2, #0]
		Wall[0][n].west = WALL;
 800a86e:	4915      	ldr	r1, [pc, #84]	; (800a8c4 <wall_init+0x140>)
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800a876:	2001      	movs	r0, #1
 800a878:	f360 1387 	bfi	r3, r0, #6, #2
 800a87c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	3301      	adds	r3, #1
 800a884:	607b      	str	r3, [r7, #4]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b08      	cmp	r3, #8
 800a88a:	ddcb      	ble.n	800a824 <wall_init+0xa0>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800a88c:	4a0d      	ldr	r2, [pc, #52]	; (800a8c4 <wall_init+0x140>)
 800a88e:	7813      	ldrb	r3, [r2, #0]
 800a890:	2101      	movs	r1, #1
 800a892:	f361 0383 	bfi	r3, r1, #2, #2
 800a896:	7013      	strb	r3, [r2, #0]
	Wall[0][0].north = NOWALL;
 800a898:	4a0a      	ldr	r2, [pc, #40]	; (800a8c4 <wall_init+0x140>)
 800a89a:	7813      	ldrb	r3, [r2, #0]
 800a89c:	f36f 0301 	bfc	r3, #0, #2
 800a8a0:	7013      	strb	r3, [r2, #0]
	Wall[1][0].west = WALL;
 800a8a2:	4a08      	ldr	r2, [pc, #32]	; (800a8c4 <wall_init+0x140>)
 800a8a4:	7c93      	ldrb	r3, [r2, #18]
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	f361 1387 	bfi	r3, r1, #6, #2
 800a8ac:	7493      	strb	r3, [r2, #18]
	Wall[0][1].south = NOWALL;
 800a8ae:	4a05      	ldr	r2, [pc, #20]	; (800a8c4 <wall_init+0x140>)
 800a8b0:	7893      	ldrb	r3, [r2, #2]
 800a8b2:	f36f 1305 	bfc	r3, #4, #2
 800a8b6:	7093      	strb	r3, [r2, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800a8b8:	bf00      	nop
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	20008b80 	.word	0x20008b80

0800a8c8 <flashCopyNodesToRam>:
	}

}
//評価値マップ生成。
void flashCopyNodesToRam()
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b088      	sub	sp, #32
 800a8cc:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800a8ce:	4b2d      	ldr	r3, [pc, #180]	; (800a984 <flashCopyNodesToRam+0xbc>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	61fb      	str	r3, [r7, #28]

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	61bb      	str	r3, [r7, #24]
 800a8d8:	e023      	b.n	800a922 <flashCopyNodesToRam+0x5a>
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]
 800a8de:	e01a      	b.n	800a916 <flashCopyNodesToRam+0x4e>
			{
				uint32_t wall_data=0;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60bb      	str	r3, [r7, #8]
				FLASH_Read_Word(address, &wall_data);
 800a8e4:	f107 0308 	add.w	r3, r7, #8
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	69f8      	ldr	r0, [r7, #28]
 800a8ec:	f003 fc42 	bl	800e174 <FLASH_Read_Word>
				my_map.RawNode[i][j].existence = wall_data;
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	b2d8      	uxtb	r0, r3
 800a8f4:	4924      	ldr	r1, [pc, #144]	; (800a988 <flashCopyNodesToRam+0xc0>)
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4413      	add	r3, r2
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	4413      	add	r3, r2
 800a904:	4602      	mov	r2, r0
 800a906:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
				address += 4;
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	3304      	adds	r3, #4
 800a90e:	61fb      	str	r3, [r7, #28]
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	3301      	adds	r3, #1
 800a914:	617b      	str	r3, [r7, #20]
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2b09      	cmp	r3, #9
 800a91a:	dde1      	ble.n	800a8e0 <flashCopyNodesToRam+0x18>
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	3301      	adds	r3, #1
 800a920:	61bb      	str	r3, [r7, #24]
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	2b08      	cmp	r3, #8
 800a926:	ddd8      	ble.n	800a8da <flashCopyNodesToRam+0x12>
			}
	}
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a928:	2300      	movs	r3, #0
 800a92a:	613b      	str	r3, [r7, #16]
 800a92c:	e022      	b.n	800a974 <flashCopyNodesToRam+0xac>
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a92e:	2300      	movs	r3, #0
 800a930:	60fb      	str	r3, [r7, #12]
 800a932:	e019      	b.n	800a968 <flashCopyNodesToRam+0xa0>
			{
				uint32_t wall_data=0;
 800a934:	2300      	movs	r3, #0
 800a936:	607b      	str	r3, [r7, #4]
				FLASH_Read_Word(address, &wall_data);
 800a938:	1d3b      	adds	r3, r7, #4
 800a93a:	4619      	mov	r1, r3
 800a93c:	69f8      	ldr	r0, [r7, #28]
 800a93e:	f003 fc19 	bl	800e174 <FLASH_Read_Word>
				my_map.ColumnNode[i][j].existence = wall_data;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	b2d8      	uxtb	r0, r3
 800a946:	4910      	ldr	r1, [pc, #64]	; (800a988 <flashCopyNodesToRam+0xc0>)
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	4613      	mov	r3, r2
 800a94c:	00db      	lsls	r3, r3, #3
 800a94e:	4413      	add	r3, r2
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	4413      	add	r3, r2
 800a954:	335a      	adds	r3, #90	; 0x5a
 800a956:	4602      	mov	r2, r0
 800a958:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
				address += 4;
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	3304      	adds	r3, #4
 800a960:	61fb      	str	r3, [r7, #28]
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3301      	adds	r3, #1
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2b08      	cmp	r3, #8
 800a96c:	dde2      	ble.n	800a934 <flashCopyNodesToRam+0x6c>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	3301      	adds	r3, #1
 800a972:	613b      	str	r3, [r7, #16]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	2b09      	cmp	r3, #9
 800a978:	ddd9      	ble.n	800a92e <flashCopyNodesToRam+0x66>
			}
	}
}
 800a97a:	bf00      	nop
 800a97c:	3720      	adds	r7, #32
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	0801a2b4 	.word	0x0801a2b4
 800a988:	200083d0 	.word	0x200083d0

0800a98c <printAllWeight>:
        printf("[北 東 南 西] = [%u %u %u %u]\r\n", route[k].wall.north, route[k].wall.east, route[k].wall.south, route[k].wall.west);
        printf("\r\n");
    }
}
void printAllWeight(maze_node *maze, position *pos)
{
 800a98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a990:	b085      	sub	sp, #20
 800a992:	4606      	mov	r6, r0
 800a994:	9003      	str	r0, [sp, #12]
    //全出力を3桁にそろえればよさそう
    //重みが0かつゴールエリア内の座標なら赤色で出力 31;1m
    //行から表示して、
    //列を表示
    //交互に
    printf("全ノードの重み\r\n");
 800a996:	4852      	ldr	r0, [pc, #328]	; (800aae0 <printAllWeight+0x154>)

    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
    {
        //行
        printf("  +  ");
 800a998:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800aaf0 <printAllWeight+0x164>
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
            }
            else
            {
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a99c:	4d51      	ldr	r5, [pc, #324]	; (800aae4 <printAllWeight+0x158>)
            else
            {
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
            }
            if(x < NUMBER_OF_SQUARES_X)
                printf("     ");
 800a99e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800aaf4 <printAllWeight+0x168>
{
 800a9a2:	460c      	mov	r4, r1
    printf("全ノードの重み\r\n");
 800a9a4:	f00b fe42 	bl	801662c <puts>
 800a9a8:	4633      	mov	r3, r6
 800a9aa:	3340      	adds	r3, #64	; 0x40
 800a9ac:	9301      	str	r3, [sp, #4]
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800a9b2:	2709      	movs	r7, #9
        printf("  +  ");
 800a9b4:	4648      	mov	r0, r9
 800a9b6:	f00b fdb1 	bl	801651c <iprintf>
 800a9ba:	9b01      	ldr	r3, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a9bc:	f04f 0b00 	mov.w	fp, #0
 800a9c0:	f103 0608 	add.w	r6, r3, #8
 800a9c4:	e010      	b.n	800a9e8 <printAllWeight+0x5c>
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800a9c6:	7823      	ldrb	r3, [r4, #0]
 800a9c8:	455b      	cmp	r3, fp
 800a9ca:	d102      	bne.n	800a9d2 <printAllWeight+0x46>
 800a9cc:	7863      	ldrb	r3, [r4, #1]
 800a9ce:	42bb      	cmp	r3, r7
 800a9d0:	d018      	beq.n	800aa04 <printAllWeight+0x78>
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a9d2:	f00b fda3 	bl	801651c <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800a9d6:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800a9da:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800a9dc:	d01a      	beq.n	800aa14 <printAllWeight+0x88>
                 printf("  +  ");
 800a9de:	f00b fd9d 	bl	801651c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a9e2:	f10b 0b01 	add.w	fp, fp, #1
 800a9e6:	3650      	adds	r6, #80	; 0x50
    if(maze->RawNode[x][y].weight == 0)
 800a9e8:	8872      	ldrh	r2, [r6, #2]
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a9ea:	f1ab 0307 	sub.w	r3, fp, #7
 800a9ee:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a9f0:	4611      	mov	r1, r2
 800a9f2:	4628      	mov	r0, r5
    if(maze->RawNode[x][y].weight == 0)
 800a9f4:	2a00      	cmp	r2, #0
 800a9f6:	d1e6      	bne.n	800a9c6 <printAllWeight+0x3a>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d8e4      	bhi.n	800a9c6 <printAllWeight+0x3a>
 800a9fc:	1ffb      	subs	r3, r7, #7
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d8e0      	bhi.n	800a9c6 <printAllWeight+0x3a>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800aa04:	4611      	mov	r1, r2
 800aa06:	4838      	ldr	r0, [pc, #224]	; (800aae8 <printAllWeight+0x15c>)
 800aa08:	f00b fd88 	bl	801651c <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800aa0c:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800aa10:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800aa12:	d1e4      	bne.n	800a9de <printAllWeight+0x52>
 800aa14:	1e7b      	subs	r3, r7, #1
 800aa16:	461e      	mov	r6, r3
        printf("\r\n");
 800aa18:	4834      	ldr	r0, [pc, #208]	; (800aaec <printAllWeight+0x160>)
 800aa1a:	9302      	str	r3, [sp, #8]
 800aa1c:	f00b fe06 	bl	801662c <puts>
 800aa20:	4633      	mov	r3, r6
 800aa22:	b2f6      	uxtb	r6, r6
 800aa24:	1af6      	subs	r6, r6, r3
 800aa26:	00f6      	lsls	r6, r6, #3
 800aa28:	f8dd a004 	ldr.w	sl, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800aa2c:	f04f 0b00 	mov.w	fp, #0
 800aa30:	e00d      	b.n	800aa4e <printAllWeight+0xc2>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800aa32:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800aa36:	f00b fd71 	bl	801651c <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800aa3a:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800aa3e:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800aa40:	d022      	beq.n	800aa88 <printAllWeight+0xfc>
                printf("     ");
 800aa42:	f00b fd6b 	bl	801651c <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800aa46:	f10b 0b01 	add.w	fp, fp, #1
 800aa4a:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
    if(maze->ColumnNode[x][y].weight == 0)
 800aa4e:	eb0a 0106 	add.w	r1, sl, r6
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800aa52:	f1ab 0307 	sub.w	r3, fp, #7
    if(maze->ColumnNode[x][y].weight == 0)
 800aa56:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800aa5a:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800aa5c:	4628      	mov	r0, r5
    if(maze->ColumnNode[x][y].weight == 0)
 800aa5e:	b921      	cbnz	r1, 800aa6a <printAllWeight+0xde>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d802      	bhi.n	800aa6a <printAllWeight+0xde>
 800aa64:	9b00      	ldr	r3, [sp, #0]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d905      	bls.n	800aa76 <printAllWeight+0xea>
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800aa6a:	7823      	ldrb	r3, [r4, #0]
 800aa6c:	455b      	cmp	r3, fp
 800aa6e:	d1e0      	bne.n	800aa32 <printAllWeight+0xa6>
 800aa70:	7863      	ldrb	r3, [r4, #1]
 800aa72:	42bb      	cmp	r3, r7
 800aa74:	d1dd      	bne.n	800aa32 <printAllWeight+0xa6>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800aa76:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800aa7a:	481b      	ldr	r0, [pc, #108]	; (800aae8 <printAllWeight+0x15c>)
 800aa7c:	f00b fd4e 	bl	801651c <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800aa80:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800aa84:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800aa86:	d1dc      	bne.n	800aa42 <printAllWeight+0xb6>
        }
        printf("\r\n");
 800aa88:	4818      	ldr	r0, [pc, #96]	; (800aaec <printAllWeight+0x160>)
 800aa8a:	f00b fdcf 	bl	801662c <puts>
 800aa8e:	9b00      	ldr	r3, [sp, #0]
 800aa90:	9f02      	ldr	r7, [sp, #8]
 800aa92:	f103 3aff 	add.w	sl, r3, #4294967295
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	3b08      	subs	r3, #8
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	fa5f f38a 	uxtb.w	r3, sl
 800aaa0:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800aaa2:	2f00      	cmp	r7, #0
 800aaa4:	d186      	bne.n	800a9b4 <printAllWeight+0x28>
    }
    //y が0のときの行だけ表示
    printf("  +  ");
 800aaa6:	4812      	ldr	r0, [pc, #72]	; (800aaf0 <printAllWeight+0x164>)
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
    {
        printf(" %3x ",maze->RawNode[x][0].weight);
 800aaa8:	4e0e      	ldr	r6, [pc, #56]	; (800aae4 <printAllWeight+0x158>)
        if(x < NUMBER_OF_SQUARES_X-1)
                printf("  +  ");
 800aaaa:	4607      	mov	r7, r0
    printf("  +  ");
 800aaac:	f00b fd36 	bl	801651c <iprintf>
 800aab0:	9b03      	ldr	r3, [sp, #12]
        printf(" %3x ",maze->RawNode[x][0].weight);
 800aab2:	4630      	mov	r0, r6
 800aab4:	8859      	ldrh	r1, [r3, #2]
 800aab6:	461c      	mov	r4, r3
 800aab8:	f00b fd30 	bl	801651c <iprintf>
 800aabc:	f504 7520 	add.w	r5, r4, #640	; 0x280
                printf("  +  ");
 800aac0:	4638      	mov	r0, r7
 800aac2:	f00b fd2b 	bl	801651c <iprintf>
 800aac6:	3450      	adds	r4, #80	; 0x50
        printf(" %3x ",maze->RawNode[x][0].weight);
 800aac8:	8861      	ldrh	r1, [r4, #2]
 800aaca:	4630      	mov	r0, r6
 800aacc:	f00b fd26 	bl	801651c <iprintf>
        if(x < NUMBER_OF_SQUARES_X-1)
 800aad0:	42ac      	cmp	r4, r5
 800aad2:	d1f5      	bne.n	800aac0 <printAllWeight+0x134>
    }
    printf("\r\n");
 800aad4:	4805      	ldr	r0, [pc, #20]	; (800aaec <printAllWeight+0x160>)
    
    
}
 800aad6:	b005      	add	sp, #20
 800aad8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800aadc:	f00b bda6 	b.w	801662c <puts>
 800aae0:	0801a1ac 	.word	0x0801a1ac
 800aae4:	0801a1e0 	.word	0x0801a1e0
 800aae8:	0801a1cc 	.word	0x0801a1cc
 800aaec:	0801a180 	.word	0x0801a180
 800aaf0:	0801a1c4 	.word	0x0801a1c4
 800aaf4:	0801a1e8 	.word	0x0801a1e8

0800aaf8 <initWeight>:
            maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].draw == true) ? MAX_WEIGHT : 0;     //西
        }
    }
}
void initWeight(maze_node *maze)
{
 800aaf8:	b410      	push	{r4}
 800aafa:	4603      	mov	r3, r0
 800aafc:	f500 7434 	add.w	r4, r0, #720	; 0x2d0
    // }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800ab00:	f640 71ff 	movw	r1, #4095	; 0xfff
 800ab04:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ab08:	8059      	strh	r1, [r3, #2]
 800ab0a:	3308      	adds	r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d1fb      	bne.n	800ab08 <initWeight+0x10>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	d1f7      	bne.n	800ab04 <initWeight+0xc>
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800ab14:	f640 71ff 	movw	r1, #4095	; 0xfff
 800ab18:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800ab1c:	f8a0 12d2 	strh.w	r1, [r0, #722]	; 0x2d2
 800ab20:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800ab22:	4282      	cmp	r2, r0
 800ab24:	d1fa      	bne.n	800ab1c <initWeight+0x24>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d1f6      	bne.n	800ab18 <initWeight+0x20>
        }
    }
}
 800ab2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <initMaze>:
void initMaze(maze_node *maze) //重みは別で初期化
{
 800ab30:	b5f0      	push	{r4, r5, r6, r7, lr}
    //まず未探索状態にする
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ab32:	2700      	movs	r7, #0
 800ab34:	4604      	mov	r4, r0
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800ab36:	4684      	mov	ip, r0
        {
            maze->RawNode[i][j].existence = UNKNOWN;
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800ab38:	4639      	mov	r1, r7
            maze->RawNode[i][j].existence = UNKNOWN;
 800ab3a:	2602      	movs	r6, #2
 800ab3c:	b2fd      	uxtb	r5, r7
{
 800ab3e:	4663      	mov	r3, ip
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800ab40:	2201      	movs	r2, #1
            maze->RawNode[i][j].rc = 0;
            maze->RawNode[i][j].pos.x = i;
            maze->RawNode[i][j].pos.y = j;
 800ab42:	73da      	strb	r2, [r3, #15]
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800ab44:	3201      	adds	r2, #1
 800ab46:	2a09      	cmp	r2, #9
            maze->RawNode[i][j].existence = UNKNOWN;
 800ab48:	721e      	strb	r6, [r3, #8]
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800ab4a:	7319      	strb	r1, [r3, #12]
            maze->RawNode[i][j].rc = 0;
 800ab4c:	7359      	strb	r1, [r3, #13]
            maze->RawNode[i][j].pos.x = i;
 800ab4e:	739d      	strb	r5, [r3, #14]
 800ab50:	f103 0308 	add.w	r3, r3, #8
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800ab54:	d1f5      	bne.n	800ab42 <initMaze+0x12>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ab56:	3701      	adds	r7, #1
 800ab58:	2f09      	cmp	r7, #9
 800ab5a:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800ab5e:	d1ed      	bne.n	800ab3c <initMaze+0xc>
        }
    }
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800ab60:	f04f 0c01 	mov.w	ip, #1
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].existence = UNKNOWN;
            maze->ColumnNode[i][j].draw = false;
            maze->ColumnNode[i][j].rc = 1;
 800ab64:	4667      	mov	r7, ip
 800ab66:	f100 0e48 	add.w	lr, r0, #72	; 0x48
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800ab6a:	2602      	movs	r6, #2
            maze->ColumnNode[i][j].draw = false;
 800ab6c:	2500      	movs	r5, #0
 800ab6e:	fa5f f18c 	uxtb.w	r1, ip
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ab72:	4673      	mov	r3, lr
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800ab74:	2200      	movs	r2, #0
            maze->ColumnNode[i][j].pos.x = i;
            maze->ColumnNode[i][j].pos.y = j;
 800ab76:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800ab7a:	3201      	adds	r2, #1
 800ab7c:	2a09      	cmp	r2, #9
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800ab7e:	f883 62d0 	strb.w	r6, [r3, #720]	; 0x2d0
            maze->ColumnNode[i][j].draw = false;
 800ab82:	f883 52d4 	strb.w	r5, [r3, #724]	; 0x2d4
            maze->ColumnNode[i][j].rc = 1;
 800ab86:	f883 72d5 	strb.w	r7, [r3, #725]	; 0x2d5
            maze->ColumnNode[i][j].pos.x = i;
 800ab8a:	f883 12d6 	strb.w	r1, [r3, #726]	; 0x2d6
 800ab8e:	f103 0308 	add.w	r3, r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800ab92:	d1f0      	bne.n	800ab76 <initMaze+0x46>
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800ab94:	f10c 0c01 	add.w	ip, ip, #1
 800ab98:	f1bc 0f09 	cmp.w	ip, #9
 800ab9c:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800aba0:	d1e5      	bne.n	800ab6e <initMaze+0x3e>
        }
    }
    
    // 壁の有無を初期化
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aba2:	2200      	movs	r2, #0
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1

        maze->RawNode[i][0].draw = true;                        
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;

        maze->RawNode[i][0].rc = 0;
 800aba4:	4616      	mov	r6, r2
 800aba6:	4603      	mov	r3, r0
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800aba8:	2101      	movs	r1, #1
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;

        maze->RawNode[i][0].pos.x = i;
 800abaa:	b2d5      	uxtb	r5, r2
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800abac:	3201      	adds	r2, #1
 800abae:	2a09      	cmp	r2, #9
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800abb0:	7019      	strb	r1, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1
 800abb2:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
        maze->RawNode[i][0].draw = true;                        
 800abb6:	7119      	strb	r1, [r3, #4]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;
 800abb8:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
        maze->RawNode[i][0].rc = 0;
 800abbc:	715e      	strb	r6, [r3, #5]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800abbe:	f883 604d 	strb.w	r6, [r3, #77]	; 0x4d
        maze->RawNode[i][0].pos.y = NUMBER_OF_SQUARES_Y;
 800abc2:	f883 c007 	strb.w	ip, [r3, #7]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800abc6:	f883 c04f 	strb.w	ip, [r3, #79]	; 0x4f
        maze->RawNode[i][0].pos.x = i;
 800abca:	719d      	strb	r5, [r3, #6]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800abcc:	f883 504e 	strb.w	r5, [r3, #78]	; 0x4e
 800abd0:	f103 0350 	add.w	r3, r3, #80	; 0x50
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800abd4:	d1e9      	bne.n	800abaa <initMaze+0x7a>
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800abd6:	2100      	movs	r1, #0
    {
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800abd8:	2301      	movs	r3, #1

        maze->ColumnNode[0][j].rc = 1;
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;

        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
        maze->ColumnNode[0][j].pos.y = j;
 800abda:	b2cd      	uxtb	r5, r1
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800abdc:	3101      	adds	r1, #1
 800abde:	2909      	cmp	r1, #9
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800abe0:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;  //東壁すべて1
 800abe4:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
        maze->ColumnNode[0][j].draw = true;                    
 800abe8:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800abec:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
        maze->ColumnNode[0][j].rc = 1;
 800abf0:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800abf4:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
 800abf8:	f884 22d6 	strb.w	r2, [r4, #726]	; 0x2d6
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800abfc:	f884 255e 	strb.w	r2, [r4, #1374]	; 0x55e
        maze->ColumnNode[0][j].pos.y = j;
 800ac00:	f884 52d7 	strb.w	r5, [r4, #727]	; 0x2d7
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800ac04:	f884 555f 	strb.w	r5, [r4, #1375]	; 0x55f
 800ac08:	f104 0408 	add.w	r4, r4, #8
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800ac0c:	d1e5      	bne.n	800abda <initMaze+0xaa>
    }
    maze->ColumnNode[1][0].existence = WALL;    //東1
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800ac0e:	2200      	movs	r2, #0
    maze->ColumnNode[1][0].existence = WALL;    //東1
 800ac10:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318

    maze->ColumnNode[1][0].draw = true;    //東1
 800ac14:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800ac18:	7202      	strb	r2, [r0, #8]
    maze->RawNode[0][1].draw = false;     //北0
 800ac1a:	7302      	strb	r2, [r0, #12]
}
 800ac1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac1e:	bf00      	nop

0800ac20 <printAllNodeExistence>:
        printf("\r\n");
    }
    printf("\r\n");
}
void printAllNodeExistence(maze_node *mn)
{
 800ac20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	4680      	mov	r8, r0
 800ac26:	4605      	mov	r5, r0
    printf("全ノードの壁の存在\r\n");
 800ac28:	481a      	ldr	r0, [pc, #104]	; (800ac94 <printAllNodeExistence+0x74>)
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            printf("%u,",mn->RawNode[i][j].existence);
 800ac2a:	4f1b      	ldr	r7, [pc, #108]	; (800ac98 <printAllNodeExistence+0x78>)
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ac2c:	4e1b      	ldr	r6, [pc, #108]	; (800ac9c <printAllNodeExistence+0x7c>)
            if(j < NUMBER_OF_SQUARES_Y-1)
                printf(",");
        }
        printf("\r\n");
 800ac2e:	f8df a070 	ldr.w	sl, [pc, #112]	; 800aca0 <printAllNodeExistence+0x80>
 800ac32:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800ac36:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
    printf("全ノードの壁の存在\r\n");
 800ac3a:	f00b fcf7 	bl	801662c <puts>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ac3e:	2401      	movs	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800ac40:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 800ac44:	4638      	mov	r0, r7
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ac46:	3401      	adds	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800ac48:	f00b fc68 	bl	801651c <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800ac4c:	2c0a      	cmp	r4, #10
 800ac4e:	d1f7      	bne.n	800ac40 <printAllNodeExistence+0x20>
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ac50:	f898 12d0 	ldrb.w	r1, [r8, #720]	; 0x2d0
 800ac54:	4630      	mov	r0, r6
 800ac56:	f00b fc61 	bl	801651c <iprintf>
 800ac5a:	f108 0b40 	add.w	fp, r8, #64	; 0x40
 800ac5e:	4644      	mov	r4, r8
                printf(",");
 800ac60:	202c      	movs	r0, #44	; 0x2c
 800ac62:	f00b fc73 	bl	801654c <putchar>
 800ac66:	3408      	adds	r4, #8
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800ac68:	f894 12d0 	ldrb.w	r1, [r4, #720]	; 0x2d0
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f00b fc55 	bl	801651c <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 800ac72:	455c      	cmp	r4, fp
 800ac74:	d1f4      	bne.n	800ac60 <printAllNodeExistence+0x40>
 800ac76:	f108 0848 	add.w	r8, r8, #72	; 0x48
        printf("\r\n");
 800ac7a:	4650      	mov	r0, sl
 800ac7c:	f00b fcd6 	bl	801662c <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800ac80:	45c8      	cmp	r8, r9
 800ac82:	f105 0550 	add.w	r5, r5, #80	; 0x50
 800ac86:	d1da      	bne.n	800ac3e <printAllNodeExistence+0x1e>
    }
    printf("\r\n");
 800ac88:	4805      	ldr	r0, [pc, #20]	; (800aca0 <printAllNodeExistence+0x80>)
}
 800ac8a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800ac8e:	f00b bccd 	b.w	801662c <puts>
 800ac92:	bf00      	nop
 800ac94:	0801a18c 	.word	0x0801a18c
 800ac98:	0801a184 	.word	0x0801a184
 800ac9c:	0801a188 	.word	0x0801a188
 800aca0:	0801a180 	.word	0x0801a180

0800aca4 <printMatrix16ValueFromNode>:
    return val;
}

//機体からTeraTermで出力するための関数
void printMatrix16ValueFromNode(maze_node *maze)
{
 800aca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca8:	4604      	mov	r4, r0
 800acaa:	b083      	sub	sp, #12
    printf("機体からTeraTermへの出力用\r\n");
 800acac:	4822      	ldr	r0, [pc, #136]	; (800ad38 <printMatrix16ValueFromNode+0x94>)
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
    {
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
        {
            printf("%u",convertNodeTo16Value(maze, i,j));
 800acae:	4e23      	ldr	r6, [pc, #140]	; (800ad3c <printMatrix16ValueFromNode+0x98>)
    printf("機体からTeraTermへの出力用\r\n");
 800acb0:	f00b fcbc 	bl	801662c <puts>
 800acb4:	f04f 0809 	mov.w	r8, #9
 800acb8:	f104 0348 	add.w	r3, r4, #72	; 0x48
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800acbc:	f04f 0908 	mov.w	r9, #8
 800acc0:	f1a3 0208 	sub.w	r2, r3, #8
 800acc4:	eba9 0408 	sub.w	r4, r9, r8
 800acc8:	9201      	str	r2, [sp, #4]
 800acca:	4692      	mov	sl, r2
 800accc:	00e4      	lsls	r4, r4, #3
 800acce:	f503 7520 	add.w	r5, r3, #640	; 0x280
 800acd2:	f503 7734 	add.w	r7, r3, #720	; 0x2d0
{
 800acd6:	469b      	mov	fp, r3
 800acd8:	e003      	b.n	800ace2 <printMatrix16ValueFromNode+0x3e>
            if(i < NUMBER_OF_SQUARES_X-1)
                printf(",");
 800acda:	f00b fc37 	bl	801654c <putchar>
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800acde:	455f      	cmp	r7, fp
 800ace0:	d01b      	beq.n	800ad1a <printMatrix16ValueFromNode+0x76>
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800ace2:	f89a 12d4 	ldrb.w	r1, [sl, #724]	; 0x2d4
    val += 2 * maze->ColumnNode[x+1][y].draw;   //東
 800ace6:	f89a e31c 	ldrb.w	lr, [sl, #796]	; 0x31c
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800acea:	f89b 0004 	ldrb.w	r0, [fp, #4]
    val += 4 * maze->RawNode[x][y].draw;        //南
 800acee:	eb0b 0c04 	add.w	ip, fp, r4
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800acf2:	00c9      	lsls	r1, r1, #3
 800acf4:	eb01 014e 	add.w	r1, r1, lr, lsl #1
    val += 4 * maze->RawNode[x][y].draw;        //南
 800acf8:	f89c c004 	ldrb.w	ip, [ip, #4]
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800acfc:	4401      	add	r1, r0
 800acfe:	eb01 018c 	add.w	r1, r1, ip, lsl #2
            printf("%u",convertNodeTo16Value(maze, i,j));
 800ad02:	b2c9      	uxtb	r1, r1
 800ad04:	4630      	mov	r0, r6
 800ad06:	f00b fc09 	bl	801651c <iprintf>
            if(i < NUMBER_OF_SQUARES_X-1)
 800ad0a:	455d      	cmp	r5, fp
                printf(",");
 800ad0c:	f04f 002c 	mov.w	r0, #44	; 0x2c
 800ad10:	f10b 0b50 	add.w	fp, fp, #80	; 0x50
 800ad14:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
            if(i < NUMBER_OF_SQUARES_X-1)
 800ad18:	d1df      	bne.n	800acda <printMatrix16ValueFromNode+0x36>
        }
        printf("\r\n");
 800ad1a:	4809      	ldr	r0, [pc, #36]	; (800ad40 <printMatrix16ValueFromNode+0x9c>)
 800ad1c:	f00b fc86 	bl	801662c <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800ad20:	f1b8 0801 	subs.w	r8, r8, #1
 800ad24:	f109 39ff 	add.w	r9, r9, #4294967295
 800ad28:	9b01      	ldr	r3, [sp, #4]
 800ad2a:	d1c9      	bne.n	800acc0 <printMatrix16ValueFromNode+0x1c>
    }
    printf("\r\n");
 800ad2c:	4804      	ldr	r0, [pc, #16]	; (800ad40 <printMatrix16ValueFromNode+0x9c>)

}
 800ad2e:	b003      	add	sp, #12
 800ad30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800ad34:	f00b bc7a 	b.w	801662c <puts>
 800ad38:	0801a1f0 	.word	0x0801a1f0
 800ad3c:	0801a188 	.word	0x0801a188
 800ad40:	0801a180 	.word	0x0801a180

0800ad44 <updateNodeThree>:


//壁があれば重みはデフォルト値を代入する
//壁がなければそのままにしておく 前左右の情報の方角に合わせた変換は別のところで
void updateNodeThree(maze_node *maze, state *st, uint8_t x, uint8_t y)
{
 800ad44:	b5f0      	push	{r4, r5, r6, r7, lr}
    //壁の有無の更新。既知の壁には上書きしない。重みの更新は？既知かどうかは重複するから書かない
        //重みは？壁があればMAX値、なければそのまま   
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800ad46:	0094      	lsls	r4, r2, #2
 800ad48:	1c5f      	adds	r7, r3, #1
 800ad4a:	18a5      	adds	r5, r4, r2
 800ad4c:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 800ad50:	18a6      	adds	r6, r4, r2
 800ad52:	f810 c035 	ldrb.w	ip, [r0, r5, lsl #3]
 800ad56:	f1bc 0f02 	cmp.w	ip, #2
 800ad5a:	bf08      	it	eq
 800ad5c:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800ad60:	f102 0501 	add.w	r5, r2, #1
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800ad64:	eb07 0646 	add.w	r6, r7, r6, lsl #1
 800ad68:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800ad6c:	bf08      	it	eq
 800ad6e:	f00c 0c03 	andeq.w	ip, ip, #3
 800ad72:	441d      	add	r5, r3
 800ad74:	f800 c036 	strb.w	ip, [r0, r6, lsl #3]
 800ad78:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800ad7c:	eb04 0c02 	add.w	ip, r4, r2
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800ad80:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800ad84:	2e02      	cmp	r6, #2
 800ad86:	bf08      	it	eq
 800ad88:	790e      	ldrbeq	r6, [r1, #4]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800ad8a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800ad8e:	bf08      	it	eq
 800ad90:	f3c6 0681 	ubfxeq	r6, r6, #2, #2
 800ad94:	f885 62d0 	strb.w	r6, [r5, #720]	; 0x2d0
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800ad98:	f810 c03c 	ldrb.w	ip, [r0, ip, lsl #3]
 800ad9c:	f1bc 0f02 	cmp.w	ip, #2
 800ada0:	bf08      	it	eq
 800ada2:	f891 c004 	ldrbeq.w	ip, [r1, #4]
 800ada6:	eb04 0e02 	add.w	lr, r4, r2
 800adaa:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 800adae:	f04f 0609 	mov.w	r6, #9
 800adb2:	bf08      	it	eq
 800adb4:	f3cc 1c01 	ubfxeq	ip, ip, #4, #2
 800adb8:	fb16 3602 	smlabb	r6, r6, r2, r3
 800adbc:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 800adc0:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    // maze->RawNode[x][y+1].flag = true;      //北
    // maze->ColumnNode[x+1][y].flag = true;   //東
    // maze->RawNode[x][y].flag = true;        //南
    // maze->ColumnNode[x][y].flag = true;     //西

    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800adc4:	4414      	add	r4, r2
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800adc6:	f896 c2d0 	ldrb.w	ip, [r6, #720]	; 0x2d0
 800adca:	f1bc 0f02 	cmp.w	ip, #2
 800adce:	bf08      	it	eq
 800add0:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800add4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800add8:	eb04 0207 	add.w	r2, r4, r7
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800addc:	bf08      	it	eq
 800adde:	ea4f 1c9c 	moveq.w	ip, ip, lsr #6
 800ade2:	f886 c2d0 	strb.w	ip, [r6, #720]	; 0x2d0
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800ade6:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800adea:	f1a1 0101 	sub.w	r1, r1, #1
 800adee:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800adf2:	fab1 f181 	clz	r1, r1
 800adf6:	0949      	lsrs	r1, r1, #5
 800adf8:	7111      	strb	r1, [r2, #4]
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800adfa:	f895 22d0 	ldrb.w	r2, [r5, #720]	; 0x2d0
 800adfe:	f1a2 0201 	sub.w	r2, r2, #1
 800ae02:	fab2 f282 	clz	r2, r2
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800ae06:	4423      	add	r3, r4
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800ae08:	0952      	lsrs	r2, r2, #5
 800ae0a:	f885 22d4 	strb.w	r2, [r5, #724]	; 0x2d4
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800ae0e:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 800ae12:	f1a2 0201 	sub.w	r2, r2, #1
 800ae16:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ae1a:	fab2 f282 	clz	r2, r2
 800ae1e:	0952      	lsrs	r2, r2, #5
 800ae20:	711a      	strb	r2, [r3, #4]
    maze->ColumnNode[x][y].draw = (maze->ColumnNode[x][y].existence == WALL) ? true : false;        //西
 800ae22:	f896 32d0 	ldrb.w	r3, [r6, #720]	; 0x2d0
 800ae26:	f1a3 0301 	sub.w	r3, r3, #1
 800ae2a:	fab3 f383 	clz	r3, r3
 800ae2e:	095b      	lsrs	r3, r3, #5
 800ae30:	f886 32d4 	strb.w	r3, [r6, #724]	; 0x2d4
    //重みは毎回リセットして計算しなおすのでここでは要らない
    // maze->RawNode[x][y+1].weight = (maze->RawNode[x][y+1].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y+1].weight;             //北
    // maze->ColumnNode[x+1][y].weight = (maze->ColumnNode[x+1][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x+1][y].weight;    //東
    // maze->RawNode[x][y].weight = (maze->RawNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y].weight;                   //南
    // maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x][y].weight;          //西
}
 800ae34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae36:	bf00      	nop

0800ae38 <initTargetAreaWeight>:
//             maze->ColumnNode[x+i][y+j].weight = 0;      //西
//         }
//     }
// }
void initTargetAreaWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size_x, uint8_t target_size_y)
{
 800ae38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae3c:	f89d 801c 	ldrb.w	r8, [sp, #28]
    //ゴールエリアの外堀と中のノードは全て0、壁があればMAX。
    for(int i=0; i < target_size_x; i++)
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d044      	beq.n	800aece <initTargetAreaWeight+0x96>
 800ae44:	1c4c      	adds	r4, r1, #1
 800ae46:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800ae4a:	250a      	movs	r5, #10
 800ae4c:	18a7      	adds	r7, r4, r2
 800ae4e:	fb15 2201 	smlabb	r2, r5, r1, r2
 800ae52:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 800ae56:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
 800ae5a:	f04f 0908 	mov.w	r9, #8
 800ae5e:	f04f 0e00 	mov.w	lr, #0
            // maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0; //東
            // maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;           //南
            // maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;     //西

        	//なぜdraw == trueでやっていたかわからない
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800ae62:	f640 74ff 	movw	r4, #4095	; 0xfff
        for(int j=0; j < target_size_y; j++)
 800ae66:	f1b8 0f00 	cmp.w	r8, #0
 800ae6a:	d028      	beq.n	800aebe <initTargetAreaWeight+0x86>
 800ae6c:	f1a7 0048 	sub.w	r0, r7, #72	; 0x48
 800ae70:	fb19 7608 	smlabb	r6, r9, r8, r7
 800ae74:	4639      	mov	r1, r7
 800ae76:	4662      	mov	r2, ip
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800ae78:	7a15      	ldrb	r5, [r2, #8]
 800ae7a:	2d01      	cmp	r5, #1
 800ae7c:	bf14      	ite	ne
 800ae7e:	2500      	movne	r5, #0
 800ae80:	4625      	moveq	r5, r4
 800ae82:	8155      	strh	r5, [r2, #10]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].existence == WALL) ? MAX_WEIGHT : 0; //東
 800ae84:	f891 52d0 	ldrb.w	r5, [r1, #720]	; 0x2d0
 800ae88:	2d01      	cmp	r5, #1
 800ae8a:	bf14      	ite	ne
 800ae8c:	2500      	movne	r5, #0
 800ae8e:	4625      	moveq	r5, r4
 800ae90:	f8a1 52d2 	strh.w	r5, [r1, #722]	; 0x2d2
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;           //南
 800ae94:	7815      	ldrb	r5, [r2, #0]
 800ae96:	2d01      	cmp	r5, #1
 800ae98:	bf14      	ite	ne
 800ae9a:	2500      	movne	r5, #0
 800ae9c:	4625      	moveq	r5, r4
 800ae9e:	8055      	strh	r5, [r2, #2]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800aea0:	f890 52d0 	ldrb.w	r5, [r0, #720]	; 0x2d0
 800aea4:	3108      	adds	r1, #8
 800aea6:	2d01      	cmp	r5, #1
 800aea8:	bf14      	ite	ne
 800aeaa:	2500      	movne	r5, #0
 800aeac:	4625      	moveq	r5, r4
        for(int j=0; j < target_size_y; j++)
 800aeae:	42b1      	cmp	r1, r6
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800aeb0:	f8a0 52d2 	strh.w	r5, [r0, #722]	; 0x2d2
 800aeb4:	f102 0208 	add.w	r2, r2, #8
 800aeb8:	f100 0008 	add.w	r0, r0, #8
        for(int j=0; j < target_size_y; j++)
 800aebc:	d1dc      	bne.n	800ae78 <initTargetAreaWeight+0x40>
    for(int i=0; i < target_size_x; i++)
 800aebe:	f10e 0e01 	add.w	lr, lr, #1
 800aec2:	459e      	cmp	lr, r3
 800aec4:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800aec8:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800aecc:	d1cb      	bne.n	800ae66 <initTargetAreaWeight+0x2e>
        }
    }
}
 800aece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aed2:	bf00      	nop

0800aed4 <updateAllNodeWeight>:
    // setTargetWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size);
//ゴールノードを0に初期化
    // setGoalWeight(maze);
    
void updateAllNodeWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t area_size_x, uint8_t area_size_y, int mask)
{
 800aed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed8:	b085      	sub	sp, #20
 800aeda:	4680      	mov	r8, r0
 800aedc:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 800aee0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800aee2:	f500 7c34 	add.w	ip, r0, #720	; 0x2d0
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800aee6:	f640 77ff 	movw	r7, #4095	; 0xfff
 800aeea:	f100 0550 	add.w	r5, r0, #80	; 0x50
 800aeee:	8047      	strh	r7, [r0, #2]
 800aef0:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800aef2:	42a8      	cmp	r0, r5
 800aef4:	d1fb      	bne.n	800aeee <updateAllNodeWeight+0x1a>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800aef6:	4560      	cmp	r0, ip
 800aef8:	d1f7      	bne.n	800aeea <updateAllNodeWeight+0x16>
 800aefa:	4646      	mov	r6, r8
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800aefc:	f640 7cff 	movw	ip, #4095	; 0xfff
 800af00:	f106 0548 	add.w	r5, r6, #72	; 0x48
 800af04:	f8a6 c2d2 	strh.w	ip, [r6, #722]	; 0x2d2
 800af08:	3608      	adds	r6, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800af0a:	42ae      	cmp	r6, r5
 800af0c:	d1fa      	bne.n	800af04 <updateAllNodeWeight+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800af0e:	4286      	cmp	r6, r0
 800af10:	d1f6      	bne.n	800af00 <updateAllNodeWeight+0x2c>
	//全体に154/20ms = 7.7ms
    //新しい区画に入ったときに、更新

    initWeight(maze); //3/20ms
    
    initTargetAreaWeight(maze, x,y, area_size_x,area_size_y);
 800af12:	f8cd e000 	str.w	lr, [sp]
 800af16:	4640      	mov	r0, r8
 800af18:	f7ff ff8e 	bl	800ae38 <initTargetAreaWeight>
 800af1c:	4645      	mov	r5, r8
 800af1e:	f108 0250 	add.w	r2, r8, #80	; 0x50
 800af22:	9203      	str	r2, [sp, #12]
 800af24:	f108 0e48 	add.w	lr, r8, #72	; 0x48
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
			{
                //1ノードずつ見る.そこから加算対象が最大6個
                //端を見ないので、一番上の列からスタート j=N; j >= 0, xを1からN-1まで
                //次に行 j=N-1から1まで xを0からN-1まで
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800af28:	f640 72ff 	movw	r2, #4095	; 0xfff
 800af2c:	46ac      	mov	ip, r5
					}
                    //南西
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
					{
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
						change_flag = true;		//値が更新されたことを示す
 800af2e:	f04f 0800 	mov.w	r8, #0
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800af32:	4647      	mov	r7, r8
						change_flag = true;		//値が更新されたことを示す
 800af34:	4661      	mov	r1, ip
 800af36:	46e2      	mov	sl, ip
 800af38:	46c1      	mov	r9, r8
 800af3a:	f101 0848 	add.w	r8, r1, #72	; 0x48
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800af3e:	4645      	mov	r5, r8
 800af40:	4653      	mov	r3, sl
 800af42:	2001      	movs	r0, #1
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800af44:	895e      	ldrh	r6, [r3, #10]
 800af46:	4296      	cmp	r6, r2
 800af48:	d055      	beq.n	800aff6 <updateAllNodeWeight+0x122>
				if(j < NUMBER_OF_SQUARES_Y-1)   //範囲チェック. 座標のxyではなく、ノードのxy
 800af4a:	2808      	cmp	r0, #8
 800af4c:	d010      	beq.n	800af70 <updateAllNodeWeight+0x9c>
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT) )	//壁がなければ(maskの意味はstatic_parametersを参照)
 800af4e:	f893 b010 	ldrb.w	fp, [r3, #16]
 800af52:	ea1b 0f04 	tst.w	fp, r4
 800af56:	d109      	bne.n	800af6c <updateAllNodeWeight+0x98>
 800af58:	f8b3 b012 	ldrh.w	fp, [r3, #18]
 800af5c:	4593      	cmp	fp, r2
 800af5e:	d105      	bne.n	800af6c <updateAllNodeWeight+0x98>
						maze->RawNode[i][j+1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800af60:	f106 0907 	add.w	r9, r6, #7
 800af64:	f8a3 9012 	strh.w	r9, [r3, #18]
						change_flag = true;		//値が更新されたことを示す
 800af68:	f04f 0901 	mov.w	r9, #1
				if(j > 1)						//範囲チェック.ミスってた
 800af6c:	2801      	cmp	r0, #1
 800af6e:	d00c      	beq.n	800af8a <updateAllNodeWeight+0xb6>
					if( ((maze->RawNode[i][j-1].existence & mask) == NOWALL) && (maze->RawNode[i][j-1].weight == MAX_WEIGHT) )	//壁がなければ
 800af70:	f893 b000 	ldrb.w	fp, [r3]
 800af74:	ea1b 0f04 	tst.w	fp, r4
 800af78:	d107      	bne.n	800af8a <updateAllNodeWeight+0xb6>
 800af7a:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 800af7e:	4593      	cmp	fp, r2
 800af80:	d103      	bne.n	800af8a <updateAllNodeWeight+0xb6>
						maze->RawNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800af82:	3607      	adds	r6, #7
 800af84:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800af86:	f04f 0901 	mov.w	r9, #1
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800af8a:	2f08      	cmp	r7, #8
 800af8c:	d017      	beq.n	800afbe <updateAllNodeWeight+0xea>
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))		//壁がなければ
 800af8e:	f895 62d8 	ldrb.w	r6, [r5, #728]	; 0x2d8
 800af92:	4226      	tst	r6, r4
 800af94:	d109      	bne.n	800afaa <updateAllNodeWeight+0xd6>
 800af96:	f8b5 62da 	ldrh.w	r6, [r5, #730]	; 0x2da
 800af9a:	4296      	cmp	r6, r2
 800af9c:	d105      	bne.n	800afaa <updateAllNodeWeight+0xd6>
						maze->ColumnNode[i+1][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800af9e:	895e      	ldrh	r6, [r3, #10]
 800afa0:	3605      	adds	r6, #5
 800afa2:	f8a5 62da 	strh.w	r6, [r5, #730]	; 0x2da
						change_flag = true;		//値が更新されたことを示す
 800afa6:	f04f 0901 	mov.w	r9, #1
                    if( ((maze->ColumnNode[i+1][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j-1].weight == MAX_WEIGHT)	)		//壁がなければ
 800afaa:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800afae:	4226      	tst	r6, r4
 800afb0:	d104      	bne.n	800afbc <updateAllNodeWeight+0xe8>
 800afb2:	f8b5 62d2 	ldrh.w	r6, [r5, #722]	; 0x2d2
 800afb6:	4296      	cmp	r6, r2
 800afb8:	f000 8092 	beq.w	800b0e0 <updateAllNodeWeight+0x20c>
				if(i > 0)						//範囲チェック
 800afbc:	b1df      	cbz	r7, 800aff6 <updateAllNodeWeight+0x122>
					if( ((maze->ColumnNode[i][j].existence & mask) == NOWALL)  && (maze->ColumnNode[i][j].weight == MAX_WEIGHT) )		//壁がなければ
 800afbe:	f891 62d8 	ldrb.w	r6, [r1, #728]	; 0x2d8
 800afc2:	4226      	tst	r6, r4
 800afc4:	d109      	bne.n	800afda <updateAllNodeWeight+0x106>
 800afc6:	f8b1 62da 	ldrh.w	r6, [r1, #730]	; 0x2da
 800afca:	4296      	cmp	r6, r2
 800afcc:	d105      	bne.n	800afda <updateAllNodeWeight+0x106>
							maze->ColumnNode[i][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800afce:	895e      	ldrh	r6, [r3, #10]
 800afd0:	3605      	adds	r6, #5
 800afd2:	f8a1 62da 	strh.w	r6, [r1, #730]	; 0x2da
							change_flag = true;		//値が更新されたことを示す
 800afd6:	f04f 0901 	mov.w	r9, #1
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
 800afda:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800afde:	4226      	tst	r6, r4
 800afe0:	d109      	bne.n	800aff6 <updateAllNodeWeight+0x122>
 800afe2:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800afe6:	4296      	cmp	r6, r2
 800afe8:	d105      	bne.n	800aff6 <updateAllNodeWeight+0x122>
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800afea:	895e      	ldrh	r6, [r3, #10]
 800afec:	3605      	adds	r6, #5
 800afee:	f8a1 62d2 	strh.w	r6, [r1, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800aff2:	f04f 0901 	mov.w	r9, #1
 800aff6:	3001      	adds	r0, #1
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800aff8:	2809      	cmp	r0, #9
 800affa:	f103 0308 	add.w	r3, r3, #8
 800affe:	f101 0108 	add.w	r1, r1, #8
 800b002:	f105 0508 	add.w	r5, r5, #8
 800b006:	d19d      	bne.n	800af44 <updateAllNodeWeight+0x70>
 800b008:	3701      	adds	r7, #1
		for( i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800b00a:	2f09      	cmp	r7, #9
 800b00c:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800b010:	4641      	mov	r1, r8
 800b012:	d192      	bne.n	800af3a <updateAllNodeWeight+0x66>
 800b014:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800b018:	464f      	mov	r7, r9
 800b01a:	4671      	mov	r1, lr
 800b01c:	f04f 0801 	mov.w	r8, #1
 800b020:	f101 0948 	add.w	r9, r1, #72	; 0x48
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800b024:	464d      	mov	r5, r9
 800b026:	4653      	mov	r3, sl
 800b028:	2000      	movs	r0, #0
        //列
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
		{
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
			{
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800b02a:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800b02e:	4296      	cmp	r6, r2
 800b030:	d04f      	beq.n	800b0d2 <updateAllNodeWeight+0x1fe>
					continue;
				}
                // printf("continueはクリア. Column[%d][%d]\r\n",i,j);
				
                //東側ノード
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b032:	f1b8 0f08 	cmp.w	r8, #8
 800b036:	d00f      	beq.n	800b058 <updateAllNodeWeight+0x184>
				{
                    // printf("列東%d,mask: %d, result: %d\r\n",maze->ColumnNode[i+1][j].existence, mask,((maze->ColumnNode[i+1][j].existence) & mask));
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b038:	f895 b2d0 	ldrb.w	fp, [r5, #720]	; 0x2d0
 800b03c:	ea1b 0f04 	tst.w	fp, r4
 800b040:	d107      	bne.n	800b052 <updateAllNodeWeight+0x17e>
 800b042:	f8b5 b2d2 	ldrh.w	fp, [r5, #722]	; 0x2d2
 800b046:	4593      	cmp	fp, r2
 800b048:	d103      	bne.n	800b052 <updateAllNodeWeight+0x17e>
					{
						maze->ColumnNode[i+1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800b04a:	3607      	adds	r6, #7
 800b04c:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800b050:	2701      	movs	r7, #1
					}
                }
                //西側ノード
				if(i > 1)						//範囲チェック
 800b052:	f1b8 0f01 	cmp.w	r8, #1
 800b056:	d00d      	beq.n	800b074 <updateAllNodeWeight+0x1a0>
				{
					if( ((maze->ColumnNode[i-1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i-1][j].weight == MAX_WEIGHT))	//壁がなければ
 800b058:	f891 6288 	ldrb.w	r6, [r1, #648]	; 0x288
 800b05c:	4226      	tst	r6, r4
 800b05e:	d109      	bne.n	800b074 <updateAllNodeWeight+0x1a0>
 800b060:	f8b1 628a 	ldrh.w	r6, [r1, #650]	; 0x28a
 800b064:	4296      	cmp	r6, r2
 800b066:	d105      	bne.n	800b074 <updateAllNodeWeight+0x1a0>
					{
						maze->ColumnNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800b068:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800b06c:	3607      	adds	r6, #7
 800b06e:	f8a1 628a 	strh.w	r6, [r1, #650]	; 0x28a
						change_flag = true;		//値が更新されたことを示す
 800b072:	2701      	movs	r7, #1
					}
				}
                //北側に斜めが2方向
				if(j < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b074:	2808      	cmp	r0, #8
 800b076:	d013      	beq.n	800b0a0 <updateAllNodeWeight+0x1cc>
				{
                    //北東
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800b078:	7a1e      	ldrb	r6, [r3, #8]
 800b07a:	4226      	tst	r6, r4
 800b07c:	d107      	bne.n	800b08e <updateAllNodeWeight+0x1ba>
 800b07e:	895e      	ldrh	r6, [r3, #10]
 800b080:	4296      	cmp	r6, r2
 800b082:	d104      	bne.n	800b08e <updateAllNodeWeight+0x1ba>
					{
						maze->RawNode[i][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b084:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800b088:	3605      	adds	r6, #5
 800b08a:	815e      	strh	r6, [r3, #10]
						change_flag = true;		//値が更新されたことを示す
 800b08c:	2701      	movs	r7, #1
					}
                	
                    //北西
                    if( ((maze->RawNode[i-1][j+1].existence & mask) == NOWALL) && (maze->RawNode[i-1][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800b08e:	f813 6c48 	ldrb.w	r6, [r3, #-72]
 800b092:	4226      	tst	r6, r4
 800b094:	d103      	bne.n	800b09e <updateAllNodeWeight+0x1ca>
 800b096:	f833 6c46 	ldrh.w	r6, [r3, #-70]
 800b09a:	4296      	cmp	r6, r2
 800b09c:	d027      	beq.n	800b0ee <updateAllNodeWeight+0x21a>
						change_flag = true;		//値が更新されたことを示す
					}
				}

                //南側に斜めが2方向
				if(j > 0)						//範囲チェック
 800b09e:	b1d0      	cbz	r0, 800b0d6 <updateAllNodeWeight+0x202>
				{
                    //南東
					if( ((maze->RawNode[i][j].existence & mask) == NOWALL) && (maze->RawNode[i][j].weight == MAX_WEIGHT)	)		//壁がなければ
 800b0a0:	781e      	ldrb	r6, [r3, #0]
 800b0a2:	4226      	tst	r6, r4
 800b0a4:	d107      	bne.n	800b0b6 <updateAllNodeWeight+0x1e2>
 800b0a6:	885e      	ldrh	r6, [r3, #2]
 800b0a8:	4296      	cmp	r6, r2
 800b0aa:	d104      	bne.n	800b0b6 <updateAllNodeWeight+0x1e2>
					{
						maze->RawNode[i][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b0ac:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800b0b0:	3605      	adds	r6, #5
 800b0b2:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800b0b4:	2701      	movs	r7, #1
					}
                    //南西
    				if( ((maze->RawNode[i-1][j].existence & mask) == NOWALL) && (maze->RawNode[i-1][j].weight == MAX_WEIGHT))		//壁がなければ
 800b0b6:	f813 6c50 	ldrb.w	r6, [r3, #-80]
 800b0ba:	4226      	tst	r6, r4
 800b0bc:	d109      	bne.n	800b0d2 <updateAllNodeWeight+0x1fe>
 800b0be:	f833 6c4e 	ldrh.w	r6, [r3, #-78]
 800b0c2:	4296      	cmp	r6, r2
 800b0c4:	d105      	bne.n	800b0d2 <updateAllNodeWeight+0x1fe>
					{
							maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b0c6:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800b0ca:	3605      	adds	r6, #5
 800b0cc:	f823 6c4e 	strh.w	r6, [r3, #-78]
							change_flag = true;		//値が更新されたことを示す
 800b0d0:	2701      	movs	r7, #1
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
 800b0d2:	2808      	cmp	r0, #8
 800b0d4:	d012      	beq.n	800b0fc <updateAllNodeWeight+0x228>
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	3108      	adds	r1, #8
 800b0da:	3308      	adds	r3, #8
 800b0dc:	3508      	adds	r5, #8
 800b0de:	e7a4      	b.n	800b02a <updateAllNodeWeight+0x156>
						maze->ColumnNode[i+1][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b0e0:	895e      	ldrh	r6, [r3, #10]
 800b0e2:	3605      	adds	r6, #5
 800b0e4:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800b0e8:	f04f 0901 	mov.w	r9, #1
 800b0ec:	e766      	b.n	800afbc <updateAllNodeWeight+0xe8>
						maze->RawNode[i-1][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800b0ee:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800b0f2:	3605      	adds	r6, #5
 800b0f4:	f823 6c46 	strh.w	r6, [r3, #-70]
						change_flag = true;		//値が更新されたことを示す
 800b0f8:	2701      	movs	r7, #1
 800b0fa:	e7d0      	b.n	800b09e <updateAllNodeWeight+0x1ca>
 800b0fc:	f108 0801 	add.w	r8, r8, #1
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800b100:	f1b8 0f09 	cmp.w	r8, #9
 800b104:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800b108:	4649      	mov	r1, r9
 800b10a:	d189      	bne.n	800b020 <updateAllNodeWeight+0x14c>
				}
            }
        }
        //printf("重みの更新\r\n");//一回しか呼ばれていない
        //cnt++;
	}while(change_flag == true);	//全体を作り終わるまで待つ
 800b10c:	2f00      	cmp	r7, #0
 800b10e:	f47f af0e 	bne.w	800af2e <updateAllNodeWeight+0x5a>
//    t = 0;
//	HAL_TIM_Base_Stop_IT(&htim8);
//	printf("%d/20ms, %d, %d\r\n\r\n",timer8, skip_raw, skip_column);
}
 800b112:	b005      	add	sp, #20
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b118 <getNextNode>:
}

//ノード情報から、行けるノードを比較する
// 比較しながらアドレスを更新してしまうので注意:
node *getNextNode(maze_node *maze, cardinal car, node *now_node, int mask)
{
 800b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t compare_weight=0;
    compare_weight = now_node->weight;

    _Bool flag=false;
    //printf("マイノードが01のどちらか:%d\r\n",now_node->rc);
    if(now_node->rc == 0)
 800b11c:	f892 8005 	ldrb.w	r8, [r2, #5]
 800b120:	7991      	ldrb	r1, [r2, #6]
 800b122:	79d4      	ldrb	r4, [r2, #7]
{
 800b124:	4605      	mov	r5, r0
 800b126:	b083      	sub	sp, #12
 800b128:	4616      	mov	r6, r2
    compare_weight = now_node->weight;
 800b12a:	8850      	ldrh	r0, [r2, #2]
    if(now_node->rc == 0)
 800b12c:	f1b8 0f00 	cmp.w	r8, #0
 800b130:	f040 8088 	bne.w	800b244 <getNextNode+0x12c>
#endif
        //条件がおかしい？printしている全ノードの重みと、アドレスを入れたはずのマイノードの重みが違う
        
        //行にいるとき
        //北側ノード
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b134:	2c07      	cmp	r4, #7
 800b136:	f104 3eff 	add.w	lr, r4, #4294967295
        {

            //printf("%u\r\n",now_node->pos.y);
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b13a:	ea4f 0c81 	mov.w	ip, r1, lsl #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b13e:	f200 80d9 	bhi.w	800b2f4 <getNextNode+0x1dc>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b142:	eb0c 0201 	add.w	r2, ip, r1
 800b146:	f104 0901 	add.w	r9, r4, #1
 800b14a:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 800b14e:	f815 a032 	ldrb.w	sl, [r5, r2, lsl #3]
 800b152:	ea1a 0f03 	tst.w	sl, r3
 800b156:	d114      	bne.n	800b182 <getNextNode+0x6a>
            {
            	static int cnt = 1;
//            				ChangeLED(cnt%7);
            				cnt ++;
 800b158:	f8df a308 	ldr.w	sl, [pc, #776]	; 800b464 <getNextNode+0x34c>


                // printf("%d\r\n", maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence);//壁があることになってた..
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b15c:	eb05 0bc2 	add.w	fp, r5, r2, lsl #3
            				cnt ++;
 800b160:	f8da 2000 	ldr.w	r2, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b164:	f8bb b002 	ldrh.w	fp, [fp, #2]
            				cnt ++;
 800b168:	3201      	adds	r2, #1
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b16a:	4583      	cmp	fp, r0
            				cnt ++;
 800b16c:	f8ca 2000 	str.w	r2, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b170:	d207      	bcs.n	800b182 <getNextNode+0x6a>

#if DEBUG_ON
                    printf("北へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800b172:	270a      	movs	r7, #10
 800b174:	fb17 9701 	smlabb	r7, r7, r1, r9
 800b178:	4658      	mov	r0, fp
 800b17a:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b17e:	f04f 0801 	mov.w	r8, #1
                }
            }
        }
        //南へ側ノード
        if(now_node->pos.y > 1)						//範囲チェック
 800b182:	2c01      	cmp	r4, #1
 800b184:	f200 80b6 	bhi.w	800b2f4 <getNextNode+0x1dc>
                    flag = true;
                }
            }
        }
        //東へ側に斜めが2方向
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b188:	2907      	cmp	r1, #7
 800b18a:	d831      	bhi.n	800b1f0 <getNextNode+0xd8>
        {
            //北東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b18c:	1c4a      	adds	r2, r1, #1
 800b18e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800b192:	eb02 0c04 	add.w	ip, r2, r4
 800b196:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 800b19a:	f89c 92d0 	ldrb.w	r9, [ip, #720]	; 0x2d0
 800b19e:	ea19 0f03 	tst.w	r9, r3
 800b1a2:	d10b      	bne.n	800b1bc <getNextNode+0xa4>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b1a4:	f8bc c2d2 	ldrh.w	ip, [ip, #722]	; 0x2d2
 800b1a8:	4584      	cmp	ip, r0
 800b1aa:	d207      	bcs.n	800b1bc <getNextNode+0xa4>
                {
#if DEBUG_ON
                    printf("北東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800b1ac:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800b1b0:	4417      	add	r7, r2
 800b1b2:	4660      	mov	r0, ip
 800b1b4:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b1b8:	f04f 0801 	mov.w	r8, #1
 800b1bc:	eb02 0c0e 	add.w	ip, r2, lr
 800b1c0:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
                }
            }

            //南へ東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800b1c4:	f89c 92d0 	ldrb.w	r9, [ip, #720]	; 0x2d0
 800b1c8:	ea19 0f03 	tst.w	r9, r3
 800b1cc:	f040 80fc 	bne.w	800b3c8 <getNextNode+0x2b0>
            {  
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800b1d0:	f8bc c2d2 	ldrh.w	ip, [ip, #722]	; 0x2d2
 800b1d4:	4584      	cmp	ip, r0
 800b1d6:	f080 80f7 	bcs.w	800b3c8 <getNextNode+0x2b0>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
 800b1da:	f10e 075a 	add.w	r7, lr, #90	; 0x5a
 800b1de:	4417      	add	r7, r2
 800b1e0:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                }
            }
        }

        //西へ側に斜めが2方向
        if(now_node->pos.x > 0)						//範囲チェック
 800b1e4:	2900      	cmp	r1, #0
 800b1e6:	f000 8081 	beq.w	800b2ec <getNextNode+0x1d4>
 800b1ea:	4660      	mov	r0, ip
                    flag = true;
 800b1ec:	f04f 0801 	mov.w	r8, #1
 800b1f0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800b1f4:	1862      	adds	r2, r4, r1
 800b1f6:	eb0e 0c01 	add.w	ip, lr, r1
 800b1fa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800b1fe:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
        {
            //北西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b202:	f892 92d0 	ldrb.w	r9, [r2, #720]	; 0x2d0
 800b206:	f89c a2d0 	ldrb.w	sl, [ip, #720]	; 0x2d0
 800b20a:	ea19 0f03 	tst.w	r9, r3
 800b20e:	ea0a 0a03 	and.w	sl, sl, r3
 800b212:	f040 80cf 	bne.w	800b3b4 <getNextNode+0x29c>
            {
                //重みを比較して更新
               
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight)
 800b216:	f8b2 32d2 	ldrh.w	r3, [r2, #722]	; 0x2d2
 800b21a:	4283      	cmp	r3, r0
 800b21c:	f080 80ca 	bcs.w	800b3b4 <getNextNode+0x29c>
                {
#if DEBUG_ON
                    printf("北西へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
 800b220:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800b224:	440f      	add	r7, r1
 800b226:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800b22a:	f1ba 0f00 	cmp.w	sl, #0
 800b22e:	d15d      	bne.n	800b2ec <getNextNode+0x1d4>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b230:	f8bc 22d2 	ldrh.w	r2, [ip, #722]	; 0x2d2
 800b234:	429a      	cmp	r2, r3
 800b236:	d259      	bcs.n	800b2ec <getNextNode+0x1d4>
                {
#if DEBUG_ON
                    printf("南西へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y-1]);
 800b238:	f10e 075a 	add.w	r7, lr, #90	; 0x5a
 800b23c:	440f      	add	r7, r1
 800b23e:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 800b242:	e053      	b.n	800b2ec <getNextNode+0x1d4>
        //列にいるとき
#if DEBUG_ON
        printf("列ノードから");
#endif
        //東へ側ノード
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b244:	2907      	cmp	r1, #7
 800b246:	d96d      	bls.n	800b324 <getNextNode+0x20c>
    _Bool flag=false;
 800b248:	f04f 0c00 	mov.w	ip, #0
            }
        }
        //西へ側ノード
        if(now_node->pos.x > 1)						//範囲チェック
        {
            if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ
 800b24c:	1e4a      	subs	r2, r1, #1
 800b24e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800b252:	4422      	add	r2, r4
 800b254:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800b258:	f892 e2d0 	ldrb.w	lr, [r2, #720]	; 0x2d0
 800b25c:	ea1e 0f03 	tst.w	lr, r3
 800b260:	d118      	bne.n	800b294 <getNextNode+0x17c>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b262:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800b266:	4282      	cmp	r2, r0
 800b268:	d214      	bcs.n	800b294 <getNextNode+0x17c>
                {
                	ChangeLED(3);
 800b26a:	2003      	movs	r0, #3
 800b26c:	9301      	str	r3, [sp, #4]
 800b26e:	f003 fae7 	bl	800e840 <ChangeLED>
#if DEBUG_ON
                    printf("西へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight;
 800b272:	79b1      	ldrb	r1, [r6, #6]
 800b274:	79f4      	ldrb	r4, [r6, #7]
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
                    flag = true;
 800b276:	9b01      	ldr	r3, [sp, #4]
                    compare_weight = maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight;
 800b278:	1e4f      	subs	r7, r1, #1
 800b27a:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 800b27e:	193a      	adds	r2, r7, r4
 800b280:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800b284:	f104 0c5a 	add.w	ip, r4, #90	; 0x5a
 800b288:	4467      	add	r7, ip
                    compare_weight = maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight;
 800b28a:	f8b2 02d2 	ldrh.w	r0, [r2, #722]	; 0x2d2
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800b28e:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b292:	46c4      	mov	ip, r8
                }
            }
        }
        //北側に斜めが2方向
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b294:	2c07      	cmp	r4, #7
 800b296:	d856      	bhi.n	800b346 <getNextNode+0x22e>
        {
            //北東へ
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b298:	1c62      	adds	r2, r4, #1
 800b29a:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 800b29e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 800b2a2:	f815 903e 	ldrb.w	r9, [r5, lr, lsl #3]
 800b2a6:	ea19 0f03 	tst.w	r9, r3
 800b2aa:	d106      	bne.n	800b2ba <getNextNode+0x1a2>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b2ac:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 800b2b0:	f8be e002 	ldrh.w	lr, [lr, #2]
 800b2b4:	4586      	cmp	lr, r0
 800b2b6:	f0c0 80be 	bcc.w	800b436 <getNextNode+0x31e>
                    flag = true;
                }
            }
            
            //北西へ
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800b2ba:	f101 3eff 	add.w	lr, r1, #4294967295
 800b2be:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 800b2c2:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 800b2c6:	f815 e032 	ldrb.w	lr, [r5, r2, lsl #3]
 800b2ca:	ea1e 0f03 	tst.w	lr, r3
 800b2ce:	d105      	bne.n	800b2dc <getNextNode+0x1c4>
            {
                //重みを比較して更新
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800b2d0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800b2d4:	8852      	ldrh	r2, [r2, #2]
 800b2d6:	4282      	cmp	r2, r0
 800b2d8:	f0c0 8095 	bcc.w	800b406 <getNextNode+0x2ee>
                }
            }
        }

        //南へ側に斜めが2方向
        if(now_node->pos.y > 0)						//範囲チェック
 800b2dc:	bb9c      	cbnz	r4, 800b346 <getNextNode+0x22e>
            }
        }
    }
    //next_node = now_node;
    //printf("ノード更新無し\r\n\r\n");
    if(flag == true)
 800b2de:	f1bc 0f00 	cmp.w	ip, #0
 800b2e2:	d103      	bne.n	800b2ec <getNextNode+0x1d4>
        return next_node; 
    }
    if(flag == false)
    {

    	ChangeLED(1);
 800b2e4:	2001      	movs	r0, #1
 800b2e6:	f003 faab 	bl	800e840 <ChangeLED>
#if DEBUG_ON
    	printf("ノード更新無し\r\n\r\n");
#endif

        return now_node;//万が一更新されなかったら、今いるノードが目標ノードなので、停止するはず。
 800b2ea:	4637      	mov	r7, r6
        //停止しなかった。前回の情報がそのまま反映されるだけ
    }
    return now_node; //
        
}
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	b003      	add	sp, #12
 800b2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)	//壁がなければ
 800b2f4:	448c      	add	ip, r1
 800b2f6:	eb0e 0c4c 	add.w	ip, lr, ip, lsl #1
 800b2fa:	f815 203c 	ldrb.w	r2, [r5, ip, lsl #3]
 800b2fe:	421a      	tst	r2, r3
 800b300:	f47f af42 	bne.w	800b188 <getNextNode+0x70>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b304:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 800b308:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b30c:	4282      	cmp	r2, r0
 800b30e:	f4bf af3b 	bcs.w	800b188 <getNextNode+0x70>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
 800b312:	270a      	movs	r7, #10
 800b314:	fb17 e701 	smlabb	r7, r7, r1, lr
 800b318:	4610      	mov	r0, r2
 800b31a:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b31e:	f04f 0801 	mov.w	r8, #1
 800b322:	e731      	b.n	800b188 <getNextNode+0x70>
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b324:	1c4a      	adds	r2, r1, #1
 800b326:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800b32a:	4422      	add	r2, r4
 800b32c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800b330:	f892 c2d0 	ldrb.w	ip, [r2, #720]	; 0x2d0
 800b334:	ea1c 0c03 	ands.w	ip, ip, r3
 800b338:	d04b      	beq.n	800b3d2 <getNextNode+0x2ba>
    _Bool flag=false;
 800b33a:	f04f 0c00 	mov.w	ip, #0
        if(now_node->pos.x > 1)						//範囲チェック
 800b33e:	2901      	cmp	r1, #1
 800b340:	d884      	bhi.n	800b24c <getNextNode+0x134>
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b342:	2c07      	cmp	r4, #7
 800b344:	d9a8      	bls.n	800b298 <getNextNode+0x180>
 800b346:	f101 3eff 	add.w	lr, r1, #4294967295
 800b34a:	ea4f 098e 	mov.w	r9, lr, lsl #2
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b34e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b352:	eb09 020e 	add.w	r2, r9, lr
 800b356:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800b35a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800b35e:	f815 8031 	ldrb.w	r8, [r5, r1, lsl #3]
 800b362:	f815 a032 	ldrb.w	sl, [r5, r2, lsl #3]
 800b366:	ea18 0f03 	tst.w	r8, r3
 800b36a:	ea0a 0a03 	and.w	sl, sl, r3
 800b36e:	d114      	bne.n	800b39a <getNextNode+0x282>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800b370:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800b374:	884b      	ldrh	r3, [r1, #2]
 800b376:	4283      	cmp	r3, r0
 800b378:	d20f      	bcs.n	800b39a <getNextNode+0x282>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y]);
 800b37a:	460f      	mov	r7, r1
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b37c:	f1ba 0f00 	cmp.w	sl, #0
 800b380:	d1b4      	bne.n	800b2ec <getNextNode+0x1d4>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b382:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800b386:	8852      	ldrh	r2, [r2, #2]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d2af      	bcs.n	800b2ec <getNextNode+0x1d4>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y]);
 800b38c:	eb09 070e 	add.w	r7, r9, lr
 800b390:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 800b394:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 800b398:	e7a8      	b.n	800b2ec <getNextNode+0x1d4>
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800b39a:	f1ba 0f00 	cmp.w	sl, #0
 800b39e:	d19e      	bne.n	800b2de <getNextNode+0x1c6>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b3a0:	eb09 030e 	add.w	r3, r9, lr
 800b3a4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800b3a8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800b3ac:	885b      	ldrh	r3, [r3, #2]
 800b3ae:	4283      	cmp	r3, r0
 800b3b0:	d295      	bcs.n	800b2de <getNextNode+0x1c6>
 800b3b2:	e7eb      	b.n	800b38c <getNextNode+0x274>
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800b3b4:	f1ba 0f00 	cmp.w	sl, #0
 800b3b8:	d104      	bne.n	800b3c4 <getNextNode+0x2ac>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b3ba:	f8bc 32d2 	ldrh.w	r3, [ip, #722]	; 0x2d2
 800b3be:	4283      	cmp	r3, r0
 800b3c0:	f4ff af3a 	bcc.w	800b238 <getNextNode+0x120>
 800b3c4:	46c4      	mov	ip, r8
 800b3c6:	e78a      	b.n	800b2de <getNextNode+0x1c6>
        if(now_node->pos.x > 0)						//範囲チェック
 800b3c8:	2900      	cmp	r1, #0
 800b3ca:	f47f af11 	bne.w	800b1f0 <getNextNode+0xd8>
 800b3ce:	46c4      	mov	ip, r8
 800b3d0:	e785      	b.n	800b2de <getNextNode+0x1c6>
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b3d2:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800b3d6:	4282      	cmp	r2, r0
 800b3d8:	d2b1      	bcs.n	800b33e <getNextNode+0x226>
                    ChangeLED(2);
 800b3da:	2002      	movs	r0, #2
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	f003 fa2f 	bl	800e840 <ChangeLED>
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
 800b3e2:	79b1      	ldrb	r1, [r6, #6]
 800b3e4:	79f4      	ldrb	r4, [r6, #7]
 800b3e6:	9b01      	ldr	r3, [sp, #4]
 800b3e8:	1c4a      	adds	r2, r1, #1
 800b3ea:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800b3ee:	1910      	adds	r0, r2, r4
 800b3f0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800b3f4:	f104 075a 	add.w	r7, r4, #90	; 0x5a
 800b3f8:	4417      	add	r7, r2
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
 800b3fa:	f8b0 02d2 	ldrh.w	r0, [r0, #722]	; 0x2d2
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800b3fe:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b402:	46c4      	mov	ip, r8
 800b404:	e79b      	b.n	800b33e <getNextNode+0x226>
                    ChangeLED(5);
 800b406:	2005      	movs	r0, #5
 800b408:	9301      	str	r3, [sp, #4]
 800b40a:	f003 fa19 	bl	800e840 <ChangeLED>
                    compare_weight = maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight;
 800b40e:	79b1      	ldrb	r1, [r6, #6]
 800b410:	79f4      	ldrb	r4, [r6, #7]
 800b412:	f101 3eff 	add.w	lr, r1, #4294967295
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800b416:	ea4f 098e 	mov.w	r9, lr, lsl #2
 800b41a:	eb09 020e 	add.w	r2, r9, lr
                    compare_weight = maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight;
 800b41e:	1c67      	adds	r7, r4, #1
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800b420:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800b424:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
        if(now_node->pos.y > 0)						//範囲チェック
 800b428:	2c00      	cmp	r4, #0
 800b42a:	f43f af5f 	beq.w	800b2ec <getNextNode+0x1d4>
                    flag = true;
 800b42e:	46c4      	mov	ip, r8
                    compare_weight = maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight;
 800b430:	8878      	ldrh	r0, [r7, #2]
 800b432:	9b01      	ldr	r3, [sp, #4]
 800b434:	e78b      	b.n	800b34e <getNextNode+0x236>
                	ChangeLED(4);
 800b436:	2004      	movs	r0, #4
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	f003 fa01 	bl	800e840 <ChangeLED>
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
 800b43e:	79b1      	ldrb	r1, [r6, #6]
 800b440:	79f4      	ldrb	r4, [r6, #7]
                    flag = true;
 800b442:	9b01      	ldr	r3, [sp, #4]
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
 800b444:	1c62      	adds	r2, r4, #1
 800b446:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800b44a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800b44e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800b452:	270a      	movs	r7, #10
 800b454:	fb17 2701 	smlabb	r7, r7, r1, r2
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
 800b458:	8840      	ldrh	r0, [r0, #2]
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800b45a:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
                    flag = true;
 800b45e:	46c4      	mov	ip, r8
 800b460:	e72b      	b.n	800b2ba <getNextNode+0x1a2>
 800b462:	bf00      	nop
 800b464:	20000004 	.word	0x20000004

0800b468 <judgeAccelorNot>:
	uint16_t compare_weight=0;
	compare_weight = now_node->weight;

	_Bool flag=false;
	//現ノードから3方向ノードを見て、未知なら即return
	if(now_node->rc == 0)
 800b468:	7953      	ldrb	r3, [r2, #5]
{
 800b46a:	b4f0      	push	{r4, r5, r6, r7}
	compare_weight = now_node->weight;
 800b46c:	8854      	ldrh	r4, [r2, #2]
	if(now_node->rc == 0)
 800b46e:	bba3      	cbnz	r3, 800b4da <judgeAccelorNot+0x72>
	{
		switch(car)
 800b470:	2900      	cmp	r1, #0
 800b472:	f000 8090 	beq.w	800b596 <judgeAccelorNot+0x12e>
 800b476:	2904      	cmp	r1, #4
 800b478:	d12c      	bne.n	800b4d4 <judgeAccelorNot+0x6c>
	            }
	        }
	        break;
		case south:
			//南へ
			if(now_node->pos.y > 1)						//範囲チェック
 800b47a:	79d1      	ldrb	r1, [r2, #7]
 800b47c:	7992      	ldrb	r2, [r2, #6]
 800b47e:	2901      	cmp	r1, #1
 800b480:	f101 35ff 	add.w	r5, r1, #4294967295
 800b484:	d90e      	bls.n	800b4a4 <judgeAccelorNot+0x3c>
			{
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)	//壁がなければ
 800b486:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800b48a:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800b48e:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800b492:	2e02      	cmp	r6, #2
 800b494:	d01e      	beq.n	800b4d4 <judgeAccelorNot+0x6c>
				{
					return false;
				}
					//重みを比較して更新
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)
 800b496:	b92e      	cbnz	r6, 800b4a4 <judgeAccelorNot+0x3c>
				{
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b498:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b49c:	8849      	ldrh	r1, [r1, #2]
 800b49e:	42a1      	cmp	r1, r4
 800b4a0:	f0c0 80bc 	bcc.w	800b61c <judgeAccelorNot+0x1b4>
	_Bool flag=false;
 800b4a4:	461e      	mov	r6, r3
//						next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
						flag = true;
					}
				}
			}
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b4a6:	2a07      	cmp	r2, #7
 800b4a8:	f200 8084 	bhi.w	800b5b4 <judgeAccelorNot+0x14c>
			{
				//南へ東へ
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800b4ac:	1c51      	adds	r1, r2, #1
 800b4ae:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800b4b2:	4429      	add	r1, r5
 800b4b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b4b8:	f891 72d0 	ldrb.w	r7, [r1, #720]	; 0x2d0
 800b4bc:	2f02      	cmp	r7, #2
 800b4be:	d009      	beq.n	800b4d4 <judgeAccelorNot+0x6c>
				{
					return false;
				}
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b4c0:	b92f      	cbnz	r7, 800b4ce <judgeAccelorNot+0x66>
				{
					//重みを比較して更新
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800b4c2:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800b4c6:	42a1      	cmp	r1, r4
					{
						compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
//						next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
						flag = false;
 800b4c8:	bf3c      	itt	cc
 800b4ca:	463e      	movcc	r6, r7
 800b4cc:	460c      	movcc	r4, r1
					}
				}
			}
			if(now_node->pos.x > 0)						//範囲チェック
 800b4ce:	2a00      	cmp	r2, #0
 800b4d0:	d170      	bne.n	800b5b4 <judgeAccelorNot+0x14c>
 800b4d2:	4633      	mov	r3, r6
	}
	return flag; //壁が全部あるときもfalseになっている
	//未知があった時点でreturn false
	//直進かどうかまで見て、直進でなければfalse
	//既知でかつ直進ならtrue
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	bcf0      	pop	{r4, r5, r6, r7}
 800b4d8:	4770      	bx	lr
		switch(car)
 800b4da:	2902      	cmp	r1, #2
 800b4dc:	d03a      	beq.n	800b554 <judgeAccelorNot+0xec>
 800b4de:	2906      	cmp	r1, #6
 800b4e0:	d155      	bne.n	800b58e <judgeAccelorNot+0x126>
			if(now_node->pos.x > 1)						//範囲チェック
 800b4e2:	7991      	ldrb	r1, [r2, #6]
 800b4e4:	79d2      	ldrb	r2, [r2, #7]
 800b4e6:	2901      	cmp	r1, #1
 800b4e8:	f101 35ff 	add.w	r5, r1, #4294967295
 800b4ec:	d90b      	bls.n	800b506 <judgeAccelorNot+0x9e>
 800b4ee:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800b4f2:	4411      	add	r1, r2
 800b4f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
				if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) ==UNKNOWN)	//壁がなければ
 800b4f8:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800b4fc:	2e02      	cmp	r6, #2
 800b4fe:	d046      	beq.n	800b58e <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ
 800b500:	2e00      	cmp	r6, #0
 800b502:	f000 8084 	beq.w	800b60e <judgeAccelorNot+0x1a6>
	_Bool flag=false;
 800b506:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b508:	2a07      	cmp	r2, #7
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b50a:	ea4f 0185 	mov.w	r1, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b50e:	d811      	bhi.n	800b534 <judgeAccelorNot+0xcc>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b510:	194f      	adds	r7, r1, r5
 800b512:	1c56      	adds	r6, r2, #1
 800b514:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800b518:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800b51c:	2f02      	cmp	r7, #2
 800b51e:	d036      	beq.n	800b58e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800b520:	b937      	cbnz	r7, 800b530 <judgeAccelorNot+0xc8>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800b522:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b526:	8876      	ldrh	r6, [r6, #2]
 800b528:	42a6      	cmp	r6, r4
 800b52a:	bf3c      	itt	cc
 800b52c:	4634      	movcc	r4, r6
						flag = false;
 800b52e:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800b530:	2a00      	cmp	r2, #0
 800b532:	d0cf      	beq.n	800b4d4 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b534:	440d      	add	r5, r1
 800b536:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 800b53a:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800b53e:	2902      	cmp	r1, #2
 800b540:	d025      	beq.n	800b58e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b542:	2900      	cmp	r1, #0
 800b544:	d1c6      	bne.n	800b4d4 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b546:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800b54a:	8842      	ldrh	r2, [r0, #2]
	                    flag = false;
 800b54c:	42a2      	cmp	r2, r4
 800b54e:	bf38      	it	cc
 800b550:	2300      	movcc	r3, #0
 800b552:	e7bf      	b.n	800b4d4 <judgeAccelorNot+0x6c>
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800b554:	7995      	ldrb	r5, [r2, #6]
 800b556:	79d1      	ldrb	r1, [r2, #7]
 800b558:	2d07      	cmp	r5, #7
 800b55a:	d80b      	bhi.n	800b574 <judgeAccelorNot+0x10c>
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b55c:	1c6a      	adds	r2, r5, #1
 800b55e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800b562:	440a      	add	r2, r1
 800b564:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800b568:	f892 62d0 	ldrb.w	r6, [r2, #720]	; 0x2d0
 800b56c:	2e02      	cmp	r6, #2
 800b56e:	d00e      	beq.n	800b58e <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b570:	2e00      	cmp	r6, #0
 800b572:	d056      	beq.n	800b622 <judgeAccelorNot+0x1ba>
	_Bool flag=false;
 800b574:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b576:	2907      	cmp	r1, #7
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b578:	ea4f 0285 	mov.w	r2, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b57c:	d836      	bhi.n	800b5ec <judgeAccelorNot+0x184>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800b57e:	1957      	adds	r7, r2, r5
 800b580:	1c4e      	adds	r6, r1, #1
 800b582:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800b586:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800b58a:	2f02      	cmp	r7, #2
 800b58c:	d123      	bne.n	800b5d6 <judgeAccelorNot+0x16e>
	                    flag = false;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	bcf0      	pop	{r4, r5, r6, r7}
 800b594:	4770      	bx	lr
	        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800b596:	79d5      	ldrb	r5, [r2, #7]
 800b598:	7992      	ldrb	r2, [r2, #6]
 800b59a:	2d07      	cmp	r5, #7
 800b59c:	d882      	bhi.n	800b4a4 <judgeAccelorNot+0x3c>
	            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800b59e:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800b5a2:	1c69      	adds	r1, r5, #1
 800b5a4:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800b5a8:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800b5ac:	2e02      	cmp	r6, #2
 800b5ae:	f47f af72 	bne.w	800b496 <judgeAccelorNot+0x2e>
 800b5b2:	e78f      	b.n	800b4d4 <judgeAccelorNot+0x6c>
 800b5b4:	2109      	movs	r1, #9
 800b5b6:	fb11 5202 	smlabb	r2, r1, r2, r5
 800b5ba:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
				if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800b5be:	f890 22d0 	ldrb.w	r2, [r0, #720]	; 0x2d0
 800b5c2:	2a02      	cmp	r2, #2
 800b5c4:	d086      	beq.n	800b4d4 <judgeAccelorNot+0x6c>
				else if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	d183      	bne.n	800b4d2 <judgeAccelorNot+0x6a>
					if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800b5ca:	f8b0 22d2 	ldrh.w	r2, [r0, #722]	; 0x2d2
 800b5ce:	42a2      	cmp	r2, r4
 800b5d0:	bf28      	it	cs
 800b5d2:	4633      	movcs	r3, r6
 800b5d4:	e77e      	b.n	800b4d4 <judgeAccelorNot+0x6c>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800b5d6:	b937      	cbnz	r7, 800b5e6 <judgeAccelorNot+0x17e>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800b5d8:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b5dc:	8876      	ldrh	r6, [r6, #2]
 800b5de:	42a6      	cmp	r6, r4
 800b5e0:	bf3c      	itt	cc
 800b5e2:	4634      	movcc	r4, r6
						flag = false;
 800b5e4:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800b5e6:	2900      	cmp	r1, #0
 800b5e8:	f43f af74 	beq.w	800b4d4 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800b5ec:	4415      	add	r5, r2
 800b5ee:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800b5f2:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 800b5f6:	2a02      	cmp	r2, #2
 800b5f8:	d0c9      	beq.n	800b58e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800b5fa:	2a00      	cmp	r2, #0
 800b5fc:	f47f af6a 	bne.w	800b4d4 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800b600:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800b604:	884a      	ldrh	r2, [r1, #2]
	                    flag = false;
 800b606:	42a2      	cmp	r2, r4
 800b608:	bf38      	it	cc
 800b60a:	2300      	movcc	r3, #0
 800b60c:	e762      	b.n	800b4d4 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800b60e:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800b612:	42a1      	cmp	r1, r4
 800b614:	f4bf af77 	bcs.w	800b506 <judgeAccelorNot+0x9e>
 800b618:	460c      	mov	r4, r1
 800b61a:	e775      	b.n	800b508 <judgeAccelorNot+0xa0>
 800b61c:	460c      	mov	r4, r1
						flag = true;
 800b61e:	2601      	movs	r6, #1
 800b620:	e741      	b.n	800b4a6 <judgeAccelorNot+0x3e>
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800b622:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800b626:	42a2      	cmp	r2, r4
 800b628:	d2a4      	bcs.n	800b574 <judgeAccelorNot+0x10c>
 800b62a:	4614      	mov	r4, r2
 800b62c:	e7a3      	b.n	800b576 <judgeAccelorNot+0x10e>
 800b62e:	bf00      	nop

0800b630 <getNextState>:
//自分の状態から次の状態を得る
state *getNextState(state *now_state, state *next_state, node *next_node)
{
 800b630:	b4f0      	push	{r4, r5, r6, r7}
    uint8_t now_x = now_state->node->pos.x;
    uint8_t now_y = now_state->node->pos.y;
    uint8_t next_x = next_node->pos.x; 
    uint8_t next_y = next_node->pos.y;
    
    switch(now_state->car%8)
 800b632:	7883      	ldrb	r3, [r0, #2]
    uint8_t now_x = now_state->node->pos.x;
 800b634:	6884      	ldr	r4, [r0, #8]
    uint8_t next_x = next_node->pos.x; 
 800b636:	7996      	ldrb	r6, [r2, #6]
    uint8_t now_x = now_state->node->pos.x;
 800b638:	79a5      	ldrb	r5, [r4, #6]
    uint8_t next_y = next_node->pos.y;
 800b63a:	79d7      	ldrb	r7, [r2, #7]
    uint8_t now_y = now_state->node->pos.y;
 800b63c:	79e4      	ldrb	r4, [r4, #7]
    switch(now_state->car%8)
 800b63e:	f003 0307 	and.w	r3, r3, #7
 800b642:	2b06      	cmp	r3, #6
 800b644:	d81e      	bhi.n	800b684 <getNextState+0x54>
 800b646:	e8df f003 	tbb	[pc, r3]
 800b64a:	1d04      	.short	0x1d04
 800b64c:	1d341d4e 	.word	0x1d341d4e
 800b650:	20          	.byte	0x20
 800b651:	00          	.byte	0x00
    {
        case north://行から、列に行くのか行に行くのかで、差分の取り方を変える
            if(next_node->rc == 0)
 800b652:	7953      	ldrb	r3, [r2, #5]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d059      	beq.n	800b70c <getNextState+0xdc>
            if(next_node->rc == 1)
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //北向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b658:	1c6b      	adds	r3, r5, #1
 800b65a:	42b3      	cmp	r3, r6
 800b65c:	f000 80c3 	beq.w	800b7e6 <getNextState+0x1b6>
                    return next_state;
                }

                //左旋回
                //北向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b660:	42b5      	cmp	r5, r6
 800b662:	d10f      	bne.n	800b684 <getNextState+0x54>
 800b664:	42bc      	cmp	r4, r7
 800b666:	f000 8119 	beq.w	800b89c <getNextState+0x26c>
 800b66a:	3c01      	subs	r4, #1
                    return next_state;
                }

                //Uターンして右旋回
                //北向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b66c:	42bc      	cmp	r4, r7
 800b66e:	d109      	bne.n	800b684 <getNextState+0x54>
                {
                    next_state->car = west;
 800b670:	2306      	movs	r3, #6
 800b672:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b674:	7803      	ldrb	r3, [r0, #0]
 800b676:	3b01      	subs	r3, #1
                //Uターンして右旋回
                //西向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
                {
                    next_state->car = south;
                    next_state->pos.x = now_state->pos.x + 1;
 800b678:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b67a:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backright;
 800b67c:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y - 1;
 800b67e:	3b01      	subs	r3, #1
 800b680:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800b682:	70ca      	strb	r2, [r1, #3]
#if DEBUG_ON
    printf("エラー in function 'getNextState'.\r\n");
#endif

    return next_state; //ここまで来てしまったらエラー
}
 800b684:	4608      	mov	r0, r1
 800b686:	bcf0      	pop	{r4, r5, r6, r7}
 800b688:	4770      	bx	lr
            if(next_node->rc == 1)
 800b68a:	7953      	ldrb	r3, [r2, #5]
 800b68c:	1e6a      	subs	r2, r5, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d05b      	beq.n	800b74a <getNextState+0x11a>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b692:	42b2      	cmp	r2, r6
 800b694:	f000 808f 	beq.w	800b7b6 <getNextState+0x186>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b698:	3501      	adds	r5, #1
 800b69a:	42ae      	cmp	r6, r5
 800b69c:	d1f2      	bne.n	800b684 <getNextState+0x54>
 800b69e:	42bc      	cmp	r4, r7
 800b6a0:	d1f0      	bne.n	800b684 <getNextState+0x54>
                    next_state->car = east;
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 2;
 800b6a6:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = back;
 800b6a8:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x + 2;
 800b6aa:	3302      	adds	r3, #2
 800b6ac:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800b6ae:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b6b0:	e7e8      	b.n	800b684 <getNextState+0x54>
            if(next_node->rc == 0)
 800b6b2:	7953      	ldrb	r3, [r2, #5]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d039      	beq.n	800b72c <getNextState+0xfc>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b6b8:	42b5      	cmp	r5, r6
 800b6ba:	f000 80a3 	beq.w	800b804 <getNextState+0x1d4>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b6be:	3501      	adds	r5, #1
 800b6c0:	42ae      	cmp	r6, r5
 800b6c2:	d1df      	bne.n	800b684 <getNextState+0x54>
 800b6c4:	1e63      	subs	r3, r4, #1
 800b6c6:	42bb      	cmp	r3, r7
 800b6c8:	f000 80e0 	beq.w	800b88c <getNextState+0x25c>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b6cc:	42bc      	cmp	r4, r7
 800b6ce:	d1d9      	bne.n	800b684 <getNextState+0x54>
                    next_state->car = east;
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b6d4:	7803      	ldrb	r3, [r0, #0]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b6da:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backright;
 800b6dc:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y + 1;
 800b6de:	3301      	adds	r3, #1
 800b6e0:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800b6e2:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b6e4:	e7ce      	b.n	800b684 <getNextState+0x54>
            if(next_node->rc == 1)
 800b6e6:	7953      	ldrb	r3, [r2, #5]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d042      	beq.n	800b772 <getNextState+0x142>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b6ec:	1c6b      	adds	r3, r5, #1
 800b6ee:	42b3      	cmp	r3, r6
 800b6f0:	d056      	beq.n	800b7a0 <getNextState+0x170>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b6f2:	3d01      	subs	r5, #1
 800b6f4:	42ae      	cmp	r6, r5
 800b6f6:	d1c5      	bne.n	800b684 <getNextState+0x54>
 800b6f8:	42bc      	cmp	r4, r7
 800b6fa:	d1c3      	bne.n	800b684 <getNextState+0x54>
                    next_state->car = west;
 800b6fc:	2306      	movs	r3, #6
 800b6fe:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b700:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = back;
 800b702:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b704:	3b02      	subs	r3, #2
 800b706:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800b708:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b70a:	e7bb      	b.n	800b684 <getNextState+0x54>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b70c:	42b5      	cmp	r5, r6
 800b70e:	d1b9      	bne.n	800b684 <getNextState+0x54>
 800b710:	1c62      	adds	r2, r4, #1
 800b712:	42ba      	cmp	r2, r7
 800b714:	f000 8096 	beq.w	800b844 <getNextState+0x214>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b718:	3c01      	subs	r4, #1
 800b71a:	42a7      	cmp	r7, r4
 800b71c:	d1b2      	bne.n	800b684 <getNextState+0x54>
                    next_state->car = south;
 800b71e:	2204      	movs	r2, #4
 800b720:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b722:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = back;
 800b724:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b726:	3b02      	subs	r3, #2
 800b728:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b72a:	e7ab      	b.n	800b684 <getNextState+0x54>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800b72c:	42b5      	cmp	r5, r6
 800b72e:	d1a9      	bne.n	800b684 <getNextState+0x54>
 800b730:	1e62      	subs	r2, r4, #1
 800b732:	42ba      	cmp	r2, r7
 800b734:	d07f      	beq.n	800b836 <getNextState+0x206>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800b736:	3401      	adds	r4, #1
 800b738:	42a7      	cmp	r7, r4
 800b73a:	d1a3      	bne.n	800b684 <getNextState+0x54>
                    next_state->car = north;
 800b73c:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 2;
 800b73e:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = back;
 800b740:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y + 2;
 800b742:	3302      	adds	r3, #2
 800b744:	704b      	strb	r3, [r1, #1]
                    next_state->dir = back;
 800b746:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b748:	e79c      	b.n	800b684 <getNextState+0x54>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b74a:	42b2      	cmp	r2, r6
 800b74c:	d065      	beq.n	800b81a <getNextState+0x1ea>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b74e:	42b5      	cmp	r5, r6
 800b750:	d198      	bne.n	800b684 <getNextState+0x54>
 800b752:	42bc      	cmp	r4, r7
 800b754:	f000 80ad 	beq.w	800b8b2 <getNextState+0x282>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b758:	3401      	adds	r4, #1
 800b75a:	42bc      	cmp	r4, r7
 800b75c:	d192      	bne.n	800b684 <getNextState+0x54>
                    next_state->car = north;
 800b75e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b760:	7803      	ldrb	r3, [r0, #0]
 800b762:	3301      	adds	r3, #1
 800b764:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800b766:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backleft;
 800b768:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y + 1;
 800b76a:	3301      	adds	r3, #1
 800b76c:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800b76e:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b770:	e788      	b.n	800b684 <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b772:	42b5      	cmp	r5, r6
 800b774:	d02a      	beq.n	800b7cc <getNextState+0x19c>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b776:	3d01      	subs	r5, #1
 800b778:	42b5      	cmp	r5, r6
 800b77a:	d183      	bne.n	800b684 <getNextState+0x54>
 800b77c:	1c62      	adds	r2, r4, #1
 800b77e:	42ba      	cmp	r2, r7
 800b780:	f000 8093 	beq.w	800b8aa <getNextState+0x27a>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b784:	42bc      	cmp	r4, r7
 800b786:	f47f af7d 	bne.w	800b684 <getNextState+0x54>
                    next_state->car = south;
 800b78a:	2304      	movs	r3, #4
 800b78c:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b78e:	7803      	ldrb	r3, [r0, #0]
 800b790:	3b01      	subs	r3, #1
 800b792:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b794:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backleft;
 800b796:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y - 1;
 800b798:	3b01      	subs	r3, #1
 800b79a:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800b79c:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b79e:	e771      	b.n	800b684 <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b7a0:	42bc      	cmp	r4, r7
 800b7a2:	f47f af6f 	bne.w	800b684 <getNextState+0x54>
                    next_state->car = east;
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b7aa:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = front;
 800b7ac:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x + 1;
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b7b2:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b7b4:	e766      	b.n	800b684 <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b7b6:	42bc      	cmp	r4, r7
 800b7b8:	f47f af64 	bne.w	800b684 <getNextState+0x54>
                    next_state->car = west;
 800b7bc:	2306      	movs	r3, #6
 800b7be:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b7c0:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = front;
 800b7c2:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b7c8:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b7ca:	e75b      	b.n	800b684 <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b7cc:	42bc      	cmp	r4, r7
 800b7ce:	d04d      	beq.n	800b86c <getNextState+0x23c>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b7d0:	3401      	adds	r4, #1
 800b7d2:	42bc      	cmp	r4, r7
 800b7d4:	f47f af56 	bne.w	800b684 <getNextState+0x54>
                    next_state->car = north;
 800b7d8:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b7da:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = left;
 800b7dc:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y + 1;
 800b7de:	3301      	adds	r3, #1
 800b7e0:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b7e2:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b7e4:	e74e      	b.n	800b684 <getNextState+0x54>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b7e6:	42bc      	cmp	r4, r7
 800b7e8:	d032      	beq.n	800b850 <getNextState+0x220>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b7ea:	42b5      	cmp	r5, r6
 800b7ec:	f104 34ff 	add.w	r4, r4, #4294967295
 800b7f0:	f43f af3c 	beq.w	800b66c <getNextState+0x3c>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b7f4:	42bc      	cmp	r4, r7
 800b7f6:	f47f af45 	bne.w	800b684 <getNextState+0x54>
                    next_state->car = east;
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b7fe:	7803      	ldrb	r3, [r0, #0]
 800b800:	3301      	adds	r3, #1
 800b802:	e7c6      	b.n	800b792 <getNextState+0x162>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b804:	1e63      	subs	r3, r4, #1
 800b806:	42bb      	cmp	r3, r7
 800b808:	d038      	beq.n	800b87c <getNextState+0x24c>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b80a:	42bc      	cmp	r4, r7
 800b80c:	f47f af3a 	bne.w	800b684 <getNextState+0x54>
                    next_state->car = west;
 800b810:	2306      	movs	r3, #6
 800b812:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b814:	7803      	ldrb	r3, [r0, #0]
 800b816:	3b01      	subs	r3, #1
 800b818:	e7a4      	b.n	800b764 <getNextState+0x134>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b81a:	1c62      	adds	r2, r4, #1
 800b81c:	42ba      	cmp	r2, r7
 800b81e:	d01e      	beq.n	800b85e <getNextState+0x22e>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b820:	42bc      	cmp	r4, r7
 800b822:	f47f af2f 	bne.w	800b684 <getNextState+0x54>
                    next_state->car = south;
 800b826:	2304      	movs	r3, #4
 800b828:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b82a:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = left;
 800b82c:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y - 1;
 800b82e:	3b01      	subs	r3, #1
 800b830:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b832:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b834:	e726      	b.n	800b684 <getNextState+0x54>
                    next_state->car = south;
 800b836:	2204      	movs	r2, #4
 800b838:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b83a:	7842      	ldrb	r2, [r0, #1]
                    next_state->dir = front;
 800b83c:	70cb      	strb	r3, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b83e:	1e53      	subs	r3, r2, #1
 800b840:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b842:	e71f      	b.n	800b684 <getNextState+0x54>
                    next_state->car = north;
 800b844:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b846:	7842      	ldrb	r2, [r0, #1]
                    next_state->dir = front;
 800b848:	70cb      	strb	r3, [r1, #3]
                    next_state->pos.y = now_state->pos.y + 1;
 800b84a:	1c53      	adds	r3, r2, #1
 800b84c:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b84e:	e719      	b.n	800b684 <getNextState+0x54>
                    next_state->car = east;
 800b850:	2202      	movs	r2, #2
 800b852:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b854:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = right;
 800b856:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.x = now_state->pos.x + 1;
 800b858:	3301      	adds	r3, #1
 800b85a:	700b      	strb	r3, [r1, #0]
                    return next_state;
 800b85c:	e712      	b.n	800b684 <getNextState+0x54>
                    next_state->car = north;
 800b85e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b860:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = right;
 800b862:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y + 1;
 800b864:	3301      	adds	r3, #1
 800b866:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b868:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b86a:	e70b      	b.n	800b684 <getNextState+0x54>
                    next_state->car = south;
 800b86c:	2304      	movs	r3, #4
 800b86e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b870:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = right;
 800b872:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y - 1;
 800b874:	3b01      	subs	r3, #1
 800b876:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b878:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b87a:	e703      	b.n	800b684 <getNextState+0x54>
                    next_state->car = west;
 800b87c:	2306      	movs	r3, #6
 800b87e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b880:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = right;
 800b882:	2202      	movs	r2, #2
                    next_state->pos.x = now_state->pos.x - 1;
 800b884:	3b01      	subs	r3, #1
 800b886:	700b      	strb	r3, [r1, #0]
                    next_state->dir = right;
 800b888:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b88a:	e6fb      	b.n	800b684 <getNextState+0x54>
                    next_state->car = east;
 800b88c:	2302      	movs	r3, #2
 800b88e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b890:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = left;
 800b892:	2206      	movs	r2, #6
                    next_state->pos.x = now_state->pos.x + 1;
 800b894:	3301      	adds	r3, #1
 800b896:	700b      	strb	r3, [r1, #0]
                    next_state->dir = left;
 800b898:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b89a:	e6f3      	b.n	800b684 <getNextState+0x54>
                    next_state->car = west;
 800b89c:	2206      	movs	r2, #6
 800b89e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b8a0:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = left;
 800b8a2:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.x = now_state->pos.x - 1;
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	700b      	strb	r3, [r1, #0]
                    return next_state;
 800b8a8:	e6ec      	b.n	800b684 <getNextState+0x54>
                    next_state->car = north;
 800b8aa:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b8ac:	7803      	ldrb	r3, [r0, #0]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	e712      	b.n	800b6d8 <getNextState+0xa8>
                    next_state->car = south;
 800b8b2:	2304      	movs	r3, #4
 800b8b4:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b8b6:	7803      	ldrb	r3, [r0, #0]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	e6dd      	b.n	800b678 <getNextState+0x48>

0800b8bc <initProfile>:
        // log_st[n].wall.west = WALL;
    }
    printf("い\r\n");
}
void initProfile(profile *prof, maze_node *maze)
{
 800b8bc:	b430      	push	{r4, r5}
    };
    setWallExistence(&(prof->now.wall), &w_st[0]);
    setWallExistence(&(prof->next.wall), &next[0]);

    prof->now.node = &(maze->RawNode[0][0]);
    prof->next.node = &(maze->RawNode[0][1]);
 800b8be:	f101 0208 	add.w	r2, r1, #8
    pos->y = y;
 800b8c2:	2301      	movs	r3, #1
    existence->north = state[0];
 800b8c4:	2554      	movs	r5, #84	; 0x54
 800b8c6:	244a      	movs	r4, #74	; 0x4a
    prof->now.node = &(maze->RawNode[0][0]);
 800b8c8:	6101      	str	r1, [r0, #16]
    prof->next.node = &(maze->RawNode[0][1]);
 800b8ca:	61c2      	str	r2, [r0, #28]
    pos->x = x;
 800b8cc:	2107      	movs	r1, #7
 800b8ce:	2208      	movs	r2, #8
    pos->y = y;
 800b8d0:	7543      	strb	r3, [r0, #21]
    pos->x = x;
 800b8d2:	2300      	movs	r3, #0
    existence->north = state[0];
 800b8d4:	7305      	strb	r5, [r0, #12]
 800b8d6:	7604      	strb	r4, [r0, #24]
    pos->x = x;
 800b8d8:	7001      	strb	r1, [r0, #0]
    pos->y = y;
 800b8da:	7041      	strb	r1, [r0, #1]
    pos->x = x;
 800b8dc:	7082      	strb	r2, [r0, #2]
    pos->y = y;
 800b8de:	70c2      	strb	r2, [r0, #3]
    pos->x = x;
 800b8e0:	7203      	strb	r3, [r0, #8]
    pos->y = y;
 800b8e2:	7243      	strb	r3, [r0, #9]
    st->car = car;
 800b8e4:	7283      	strb	r3, [r0, #10]
    pos->x = x;
 800b8e6:	7503      	strb	r3, [r0, #20]
    st->car = car;
 800b8e8:	7583      	strb	r3, [r0, #22]
    // prof->now.node->rc = 0;
    // prof->now.node->pos.x = 0;
    // prof->now.node->pos.y = 0;
}
 800b8ea:	bc30      	pop	{r4, r5}
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop

0800b8f0 <shiftState>:
void shiftState(profile *prof)
{
 800b8f0:	b410      	push	{r4}
    prof->now.car = prof->next.car;
    prof->now.pos.x = prof->next.pos.x;
 800b8f2:	7d01      	ldrb	r1, [r0, #20]
    prof->now.car = prof->next.car;
 800b8f4:	7d84      	ldrb	r4, [r0, #22]
    prof->now.pos.y = prof->next.pos.y;
 800b8f6:	7d42      	ldrb	r2, [r0, #21]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b8f8:	69c3      	ldr	r3, [r0, #28]
    prof->now.car = prof->next.car;
 800b8fa:	7284      	strb	r4, [r0, #10]
    prof->now.pos.x = prof->next.pos.x;
 800b8fc:	7201      	strb	r1, [r0, #8]
    prof->now.pos.y = prof->next.pos.y;
 800b8fe:	7242      	strb	r2, [r0, #9]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b900:	6103      	str	r3, [r0, #16]
}
 800b902:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <InitExplore>:

	//ハード処理

}
void InitExplore()
{
 800b908:	b590      	push	{r4, r7, lr}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800b90e:	2100      	movs	r1, #0
 800b910:	2004      	movs	r0, #4
 800b912:	f003 fd85 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b916:	2100      	movs	r1, #0
 800b918:	2005      	movs	r0, #5
 800b91a:	f003 fd81 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b91e:	2100      	movs	r1, #0
 800b920:	2002      	movs	r0, #2
 800b922:	f003 fd7d 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b926:	2100      	movs	r1, #0
 800b928:	2003      	movs	r0, #3
 800b92a:	f003 fd79 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b92e:	2100      	movs	r1, #0
 800b930:	2001      	movs	r0, #1
 800b932:	f003 fd75 	bl	800f420 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800b936:	2100      	movs	r1, #0
 800b938:	2000      	movs	r0, #0
 800b93a:	f003 fd71 	bl	800f420 <PIDChangeFlag>
//									{
//										printf("adc2[1] : %lu\r\n", adc2[1]);
//
//									}
//					Signal( 2 );
	Load_Gain();
 800b93e:	f003 fa5b 	bl	800edf8 <Load_Gain>
//							  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
//							  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
//							  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);

	uint8_t imu_check;
	imu_check = IMU_init();
 800b942:	f002 fea5 	bl	800e690 <IMU_init>
 800b946:	4603      	mov	r3, r0
 800b948:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b94a:	79fb      	ldrb	r3, [r7, #7]
 800b94c:	4619      	mov	r1, r3
 800b94e:	483f      	ldr	r0, [pc, #252]	; (800ba4c <InitExplore+0x144>)
 800b950:	f00a fde4 	bl	801651c <iprintf>
#if 1 //IMUから値が来なくなる現象の対策
	imu_check =IMU_init();
 800b954:	f002 fe9c 	bl	800e690 <IMU_init>
 800b958:	4603      	mov	r3, r0
 800b95a:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b95c:	79fb      	ldrb	r3, [r7, #7]
 800b95e:	4619      	mov	r1, r3
 800b960:	483a      	ldr	r0, [pc, #232]	; (800ba4c <InitExplore+0x144>)
 800b962:	f00a fddb 	bl	801651c <iprintf>
#endif
	HAL_Delay(100);
 800b966:	2064      	movs	r0, #100	; 0x64
 800b968:	f004 f8a6 	bl	800fab8 <HAL_Delay>

	ZGyro = ReadIMU(0x37, 0x38);
 800b96c:	2138      	movs	r1, #56	; 0x38
 800b96e:	2037      	movs	r0, #55	; 0x37
 800b970:	f002 fcfc 	bl	800e36c <ReadIMU>
 800b974:	eef0 7a40 	vmov.f32	s15, s0
 800b978:	4b35      	ldr	r3, [pc, #212]	; (800ba50 <InitExplore+0x148>)
 800b97a:	edc3 7a00 	vstr	s15, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b97e:	4b34      	ldr	r3, [pc, #208]	; (800ba50 <InitExplore+0x148>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4618      	mov	r0, r3
 800b984:	f7fc fd18 	bl	80083b8 <__aeabi_f2d>
 800b988:	4603      	mov	r3, r0
 800b98a:	460c      	mov	r4, r1
 800b98c:	461a      	mov	r2, r3
 800b98e:	4623      	mov	r3, r4
 800b990:	4830      	ldr	r0, [pc, #192]	; (800ba54 <InitExplore+0x14c>)
 800b992:	f00a fdc3 	bl	801651c <iprintf>
//	  }

  }
#endif
	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800b996:	f003 f811 	bl	800e9bc <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b99a:	f002 ff25 	bl	800e7e8 <EncoderStart>
	EmitterON();
 800b99e:	f002 ff33 	bl	800e808 <EmitterON>
	ADCStart();
 800b9a2:	f002 fb3f 	bl	800e024 <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b9a6:	f247 512f 	movw	r1, #29999	; 0x752f
 800b9aa:	482b      	ldr	r0, [pc, #172]	; (800ba58 <InitExplore+0x150>)
 800b9ac:	f003 f89e 	bl	800eaec <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b9b0:	f247 512f 	movw	r1, #29999	; 0x752f
 800b9b4:	4829      	ldr	r0, [pc, #164]	; (800ba5c <InitExplore+0x154>)
 800b9b6:	f003 f899 	bl	800eaec <InitPulse>



	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800b9ba:	4829      	ldr	r0, [pc, #164]	; (800ba60 <InitExplore+0x158>)
 800b9bc:	f006 ff63 	bl	8012886 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b9c0:	4828      	ldr	r0, [pc, #160]	; (800ba64 <InitExplore+0x15c>)
 800b9c2:	f006 ff60 	bl	8012886 <HAL_TIM_Base_Start_IT>
		printf("生値%f, 角速度%f ang/s, %f rad/s\r\n",ZGyro,ZGyro/16.4f, AngularV);
	}

#endif

	TargetVelocity[BODY] = 0;
 800b9c6:	4b28      	ldr	r3, [pc, #160]	; (800ba68 <InitExplore+0x160>)
 800b9c8:	f04f 0200 	mov.w	r2, #0
 800b9cc:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800b9ce:	4b27      	ldr	r3, [pc, #156]	; (800ba6c <InitExplore+0x164>)
 800b9d0:	f04f 0200 	mov.w	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800b9d6:	4b26      	ldr	r3, [pc, #152]	; (800ba70 <InitExplore+0x168>)
 800b9d8:	f04f 0200 	mov.w	r2, #0
 800b9dc:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800b9de:	4b25      	ldr	r3, [pc, #148]	; (800ba74 <InitExplore+0x16c>)
 800b9e0:	f04f 0200 	mov.w	r2, #0
 800b9e4:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800b9e6:	4b24      	ldr	r3, [pc, #144]	; (800ba78 <InitExplore+0x170>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800b9ec:	4b22      	ldr	r3, [pc, #136]	; (800ba78 <InitExplore+0x170>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800b9f2:	4b21      	ldr	r3, [pc, #132]	; (800ba78 <InitExplore+0x170>)
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	609a      	str	r2, [r3, #8]
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
#else


	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b9f8:	4b20      	ldr	r3, [pc, #128]	; (800ba7c <InitExplore+0x174>)
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	4a20      	ldr	r2, [pc, #128]	; (800ba80 <InitExplore+0x178>)
 800b9fe:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800ba00:	4b1e      	ldr	r3, [pc, #120]	; (800ba7c <InitExplore+0x174>)
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	4a1e      	ldr	r2, [pc, #120]	; (800ba80 <InitExplore+0x178>)
 800ba06:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800ba08:	4b1d      	ldr	r3, [pc, #116]	; (800ba80 <InitExplore+0x178>)
 800ba0a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ba0e:	4b1c      	ldr	r3, [pc, #112]	; (800ba80 <InitExplore+0x178>)
 800ba10:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba18:	4b1a      	ldr	r3, [pc, #104]	; (800ba84 <InitExplore+0x17c>)
 800ba1a:	edc3 7a00 	vstr	s15, [r3]

#endif
	PIDReset(L_VELO_PID);
 800ba1e:	2004      	movs	r0, #4
 800ba20:	f003 fd14 	bl	800f44c <PIDReset>
	PIDReset(R_VELO_PID);
 800ba24:	2005      	movs	r0, #5
 800ba26:	f003 fd11 	bl	800f44c <PIDReset>

	PIDReset(A_VELO_PID);
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	f003 fd0e 	bl	800f44c <PIDReset>
	PIDReset(L_WALL_PID);
 800ba30:	2002      	movs	r0, #2
 800ba32:	f003 fd0b 	bl	800f44c <PIDReset>
	PIDReset(R_WALL_PID);
 800ba36:	2003      	movs	r0, #3
 800ba38:	f003 fd08 	bl	800f44c <PIDReset>
	PIDReset(D_WALL_PID);
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	f003 fd05 	bl	800f44c <PIDReset>

#endif
}
 800ba42:	bf00      	nop
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd90      	pop	{r4, r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	08019e98 	.word	0x08019e98
 800ba50:	20007fe8 	.word	0x20007fe8
 800ba54:	08019eb4 	.word	0x08019eb4
 800ba58:	40000424 	.word	0x40000424
 800ba5c:	40000824 	.word	0x40000824
 800ba60:	20008e74 	.word	0x20008e74
 800ba64:	20008c2c 	.word	0x20008c2c
 800ba68:	20008988 	.word	0x20008988
 800ba6c:	20008998 	.word	0x20008998
 800ba70:	20007f3c 	.word	0x20007f3c
 800ba74:	20007f40 	.word	0x20007f40
 800ba78:	200089b8 	.word	0x200089b8
 800ba7c:	200089f8 	.word	0x200089f8
 800ba80:	20008ab8 	.word	0x20008ab8
 800ba84:	200089ac 	.word	0x200089ac

0800ba88 <InitFastest>:

void InitFastest()
{
 800ba88:	b590      	push	{r4, r7, lr}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
	Motor_PWM_Start();
 800ba8e:	f002 ff95 	bl	800e9bc <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800ba92:	f002 fea9 	bl	800e7e8 <EncoderStart>
	EmitterON();
 800ba96:	f002 feb7 	bl	800e808 <EmitterON>
	ADCStart();
 800ba9a:	f002 fac3 	bl	800e024 <ADCStart>

	uint8_t imu_check;
	imu_check = IMU_init();
 800ba9e:	f002 fdf7 	bl	800e690 <IMU_init>
 800baa2:	4603      	mov	r3, r0
 800baa4:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	4619      	mov	r1, r3
 800baaa:	4849      	ldr	r0, [pc, #292]	; (800bbd0 <InitFastest+0x148>)
 800baac:	f00a fd36 	bl	801651c <iprintf>
#if 1 //IMUから値が来なくなる現象の対策
	imu_check =IMU_init();
 800bab0:	f002 fdee 	bl	800e690 <IMU_init>
 800bab4:	4603      	mov	r3, r0
 800bab6:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800bab8:	79fb      	ldrb	r3, [r7, #7]
 800baba:	4619      	mov	r1, r3
 800babc:	4844      	ldr	r0, [pc, #272]	; (800bbd0 <InitFastest+0x148>)
 800babe:	f00a fd2d 	bl	801651c <iprintf>
#endif
	HAL_Delay(100);
 800bac2:	2064      	movs	r0, #100	; 0x64
 800bac4:	f003 fff8 	bl	800fab8 <HAL_Delay>

	ZGyro = ReadIMU(0x37, 0x38);
 800bac8:	2138      	movs	r1, #56	; 0x38
 800baca:	2037      	movs	r0, #55	; 0x37
 800bacc:	f002 fc4e 	bl	800e36c <ReadIMU>
 800bad0:	eef0 7a40 	vmov.f32	s15, s0
 800bad4:	4b3f      	ldr	r3, [pc, #252]	; (800bbd4 <InitFastest+0x14c>)
 800bad6:	edc3 7a00 	vstr	s15, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800bada:	4b3e      	ldr	r3, [pc, #248]	; (800bbd4 <InitFastest+0x14c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fc fc6a 	bl	80083b8 <__aeabi_f2d>
 800bae4:	4603      	mov	r3, r0
 800bae6:	460c      	mov	r4, r1
 800bae8:	461a      	mov	r2, r3
 800baea:	4623      	mov	r3, r4
 800baec:	483a      	ldr	r0, [pc, #232]	; (800bbd8 <InitFastest+0x150>)
 800baee:	f00a fd15 	bl	801651c <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800baf2:	2100      	movs	r1, #0
 800baf4:	2004      	movs	r0, #4
 800baf6:	f003 fc93 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800bafa:	2100      	movs	r1, #0
 800bafc:	2005      	movs	r0, #5
 800bafe:	f003 fc8f 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bb02:	2100      	movs	r1, #0
 800bb04:	2002      	movs	r0, #2
 800bb06:	f003 fc8b 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	2003      	movs	r0, #3
 800bb0e:	f003 fc87 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800bb12:	2100      	movs	r1, #0
 800bb14:	2001      	movs	r0, #1
 800bb16:	f003 fc83 	bl	800f420 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	f003 fc7f 	bl	800f420 <PIDChangeFlag>


	Load_Gain();
 800bb22:	f003 f969 	bl	800edf8 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800bb26:	f247 512f 	movw	r1, #29999	; 0x752f
 800bb2a:	482c      	ldr	r0, [pc, #176]	; (800bbdc <InitFastest+0x154>)
 800bb2c:	f002 ffde 	bl	800eaec <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800bb30:	f247 512f 	movw	r1, #29999	; 0x752f
 800bb34:	482a      	ldr	r0, [pc, #168]	; (800bbe0 <InitFastest+0x158>)
 800bb36:	f002 ffd9 	bl	800eaec <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800bb3a:	482a      	ldr	r0, [pc, #168]	; (800bbe4 <InitFastest+0x15c>)
 800bb3c:	f006 fea3 	bl	8012886 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800bb40:	4829      	ldr	r0, [pc, #164]	; (800bbe8 <InitFastest+0x160>)
 800bb42:	f006 fea0 	bl	8012886 <HAL_TIM_Base_Start_IT>


	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
 800bb46:	4b29      	ldr	r3, [pc, #164]	; (800bbec <InitFastest+0x164>)
 800bb48:	f04f 0200 	mov.w	r2, #0
 800bb4c:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800bb4e:	4b28      	ldr	r3, [pc, #160]	; (800bbf0 <InitFastest+0x168>)
 800bb50:	f04f 0200 	mov.w	r2, #0
 800bb54:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800bb56:	4b27      	ldr	r3, [pc, #156]	; (800bbf4 <InitFastest+0x16c>)
 800bb58:	f04f 0200 	mov.w	r2, #0
 800bb5c:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800bb5e:	4b26      	ldr	r3, [pc, #152]	; (800bbf8 <InitFastest+0x170>)
 800bb60:	f04f 0200 	mov.w	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800bb66:	4b25      	ldr	r3, [pc, #148]	; (800bbfc <InitFastest+0x174>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800bb6c:	4b23      	ldr	r3, [pc, #140]	; (800bbfc <InitFastest+0x174>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800bb72:	4b22      	ldr	r3, [pc, #136]	; (800bbfc <InitFastest+0x174>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800bb78:	f002 fdb4 	bl	800e6e4 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800bb7c:	4b20      	ldr	r3, [pc, #128]	; (800bc00 <InitFastest+0x178>)
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	4a20      	ldr	r2, [pc, #128]	; (800bc04 <InitFastest+0x17c>)
 800bb82:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];
 800bb84:	4b1e      	ldr	r3, [pc, #120]	; (800bc00 <InitFastest+0x178>)
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	4a1e      	ldr	r2, [pc, #120]	; (800bc04 <InitFastest+0x17c>)
 800bb8a:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800bb8c:	4b1d      	ldr	r3, [pc, #116]	; (800bc04 <InitFastest+0x17c>)
 800bb8e:	ed93 7a02 	vldr	s14, [r3, #8]
 800bb92:	4b1c      	ldr	r3, [pc, #112]	; (800bc04 <InitFastest+0x17c>)
 800bb94:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb9c:	4b1a      	ldr	r3, [pc, #104]	; (800bc08 <InitFastest+0x180>)
 800bb9e:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO_PID);
 800bba2:	2004      	movs	r0, #4
 800bba4:	f003 fc52 	bl	800f44c <PIDReset>
	PIDReset(R_VELO_PID);
 800bba8:	2005      	movs	r0, #5
 800bbaa:	f003 fc4f 	bl	800f44c <PIDReset>
	PIDReset(A_VELO_PID);
 800bbae:	2000      	movs	r0, #0
 800bbb0:	f003 fc4c 	bl	800f44c <PIDReset>
	PIDReset(L_WALL_PID);
 800bbb4:	2002      	movs	r0, #2
 800bbb6:	f003 fc49 	bl	800f44c <PIDReset>
	PIDReset(R_WALL_PID);
 800bbba:	2003      	movs	r0, #3
 800bbbc:	f003 fc46 	bl	800f44c <PIDReset>
	PIDReset(D_WALL_PID);
 800bbc0:	2001      	movs	r0, #1
 800bbc2:	f003 fc43 	bl	800f44c <PIDReset>


}
 800bbc6:	bf00      	nop
 800bbc8:	370c      	adds	r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd90      	pop	{r4, r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	08019e98 	.word	0x08019e98
 800bbd4:	20007fe8 	.word	0x20007fe8
 800bbd8:	08019eb4 	.word	0x08019eb4
 800bbdc:	40000424 	.word	0x40000424
 800bbe0:	40000824 	.word	0x40000824
 800bbe4:	20008e74 	.word	0x20008e74
 800bbe8:	20008c2c 	.word	0x20008c2c
 800bbec:	20008988 	.word	0x20008988
 800bbf0:	20008998 	.word	0x20008998
 800bbf4:	20007f3c 	.word	0x20007f3c
 800bbf8:	20007f40 	.word	0x20007f40
 800bbfc:	200089b8 	.word	0x200089b8
 800bc00:	200089f8 	.word	0x200089f8
 800bc04:	20008ab8 	.word	0x20008ab8
 800bc08:	200089ac 	.word	0x200089ac

0800bc0c <Debug>:
void Debug()
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
//	while(1)
//	{
//
//	}
#if 1
	InitExplore();
 800bc12:	f7ff fe79 	bl	800b908 <InitExplore>
	InitPosition();
 800bc16:	f7fd f8ef 	bl	8008df8 <InitPosition>
	wall_init();
 800bc1a:	f7fe fdb3 	bl	800a784 <wall_init>

	TotalPulse[RIGHT] = 0;
 800bc1e:	4b38      	ldr	r3, [pc, #224]	; (800bd00 <Debug+0xf4>)
 800bc20:	2200      	movs	r2, #0
 800bc22:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bc24:	4b36      	ldr	r3, [pc, #216]	; (800bd00 <Debug+0xf4>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800bc2a:	4b35      	ldr	r3, [pc, #212]	; (800bd00 <Debug+0xf4>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800bc30:	2101      	movs	r1, #1
 800bc32:	2004      	movs	r0, #4
 800bc34:	f003 fbf4 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bc38:	2101      	movs	r1, #1
 800bc3a:	2005      	movs	r0, #5
 800bc3c:	f003 fbf0 	bl	800f420 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800bc40:	4b2f      	ldr	r3, [pc, #188]	; (800bd00 <Debug+0xf4>)
 800bc42:	6899      	ldr	r1, [r3, #8]
 800bc44:	4b2e      	ldr	r3, [pc, #184]	; (800bd00 <Debug+0xf4>)
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	4b2d      	ldr	r3, [pc, #180]	; (800bd00 <Debug+0xf4>)
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	482d      	ldr	r0, [pc, #180]	; (800bd04 <Debug+0xf8>)
 800bc4e:	f00a fc65 	bl	801651c <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bc52:	2100      	movs	r1, #0
 800bc54:	2001      	movs	r0, #1
 800bc56:	f003 fbe3 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	2002      	movs	r0, #2
 800bc5e:	f003 fbdf 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bc62:	2100      	movs	r1, #0
 800bc64:	2003      	movs	r0, #3
 800bc66:	f003 fbdb 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800bc6a:	2101      	movs	r1, #1
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	f003 fbd7 	bl	800f420 <PIDChangeFlag>
	ExploreVelocity=0;
 800bc72:	4b25      	ldr	r3, [pc, #148]	; (800bd08 <Debug+0xfc>)
 800bc74:	f04f 0200 	mov.w	r2, #0
 800bc78:	601a      	str	r2, [r3, #0]
	ChangeLED(3);
 800bc7a:	2003      	movs	r0, #3
 800bc7c:	f002 fde0 	bl	800e840 <ChangeLED>
	//HAL_Delay(500);

	//IT_mode = WRITINGFREE;
	IT_mode = EXPLORE;
 800bc80:	4b22      	ldr	r3, [pc, #136]	; (800bd0c <Debug+0x100>)
 800bc82:	2206      	movs	r2, #6
 800bc84:	601a      	str	r2, [r3, #0]
		printf("%f, %f, %f, %f\r\n", Photo[FL], Photo[FR], Photo[FL] - Photo[FR],Photo[FL] + Photo[FR] );
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
 800bc86:	4b20      	ldr	r3, [pc, #128]	; (800bd08 <Debug+0xfc>)
 800bc88:	4a21      	ldr	r2, [pc, #132]	; (800bd10 <Debug+0x104>)
 800bc8a:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800bc8c:	4b21      	ldr	r3, [pc, #132]	; (800bd14 <Debug+0x108>)
 800bc8e:	2200      	movs	r2, #0
 800bc90:	711a      	strb	r2, [r3, #4]
	Accel(61.75,ExploreVelocity);
 800bc92:	4b1d      	ldr	r3, [pc, #116]	; (800bd08 <Debug+0xfc>)
 800bc94:	edd3 7a00 	vldr	s15, [r3]
 800bc98:	eef0 0a67 	vmov.f32	s1, s15
 800bc9c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800bd18 <Debug+0x10c>
 800bca0:	f7fd fe96 	bl	80099d0 <Accel>
	for(int i=0; i < 1; i++)
 800bca4:	2300      	movs	r3, #0
 800bca6:	607b      	str	r3, [r7, #4]
 800bca8:	e017      	b.n	800bcda <Debug+0xce>
	{
		Pos.Dir = front;
 800bcaa:	4b1a      	ldr	r3, [pc, #104]	; (800bd14 <Debug+0x108>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	711a      	strb	r2, [r3, #4]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800bcb0:	4b15      	ldr	r3, [pc, #84]	; (800bd08 <Debug+0xfc>)
 800bcb2:	ed93 7a00 	vldr	s14, [r3]
 800bcb6:	4b19      	ldr	r3, [pc, #100]	; (800bd1c <Debug+0x110>)
 800bcb8:	edd3 7a00 	vldr	s15, [r3]
 800bcbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcc0:	ee17 0a90 	vmov	r0, s15
 800bcc4:	eef0 0a47 	vmov.f32	s1, s14
 800bcc8:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800bd20 <Debug+0x114>
 800bccc:	f7fe f824 	bl	8009d18 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800bcd0:	f7fd fbc6 	bl	8009460 <SlalomRight>
	for(int i=0; i < 1; i++)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	607b      	str	r3, [r7, #4]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dde4      	ble.n	800bcaa <Debug+0x9e>

	}
	Pos.Dir = front;
 800bce0:	4b0c      	ldr	r3, [pc, #48]	; (800bd14 <Debug+0x108>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	711a      	strb	r2, [r3, #4]
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800bce6:	4b0f      	ldr	r3, [pc, #60]	; (800bd24 <Debug+0x118>)
 800bce8:	f04f 0200 	mov.w	r2, #0
 800bcec:	609a      	str	r2, [r3, #8]
	HAL_Delay(1000);
 800bcee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bcf2:	f003 fee1 	bl	800fab8 <HAL_Delay>
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800bcf6:	bf00      	nop
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	200089b8 	.word	0x200089b8
 800bd04:	08019ec0 	.word	0x08019ec0
 800bd08:	20008aac 	.word	0x20008aac
 800bd0c:	20008974 	.word	0x20008974
 800bd10:	43070000 	.word	0x43070000
 800bd14:	20000008 	.word	0x20000008
 800bd18:	42770000 	.word	0x42770000
 800bd1c:	20008994 	.word	0x20008994
 800bd20:	42b40000 	.word	0x42b40000
 800bd24:	20008988 	.word	0x20008988

0800bd28 <ParameterSetting>:
void ParameterSetting()
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	af00      	add	r7, sp, #0
	Load_Gain();
 800bd2c:	f003 f864 	bl	800edf8 <Load_Gain>
	Change_Gain();
 800bd30:	f003 f976 	bl	800f020 <Change_Gain>

}
 800bd34:	bf00      	nop
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800bd3c:	4b18      	ldr	r3, [pc, #96]	; (800bda0 <GainTestRWall+0x68>)
 800bd3e:	2206      	movs	r2, #6
 800bd40:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bd42:	f7ff fde1 	bl	800b908 <InitExplore>
	InitPosition();
 800bd46:	f7fd f857 	bl	8008df8 <InitPosition>
	wall_init();
 800bd4a:	f7fe fd1b 	bl	800a784 <wall_init>
	TotalPulse[RIGHT] = 0;
 800bd4e:	4b15      	ldr	r3, [pc, #84]	; (800bda4 <GainTestRWall+0x6c>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bd54:	4b13      	ldr	r3, [pc, #76]	; (800bda4 <GainTestRWall+0x6c>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800bd5a:	4b12      	ldr	r3, [pc, #72]	; (800bda4 <GainTestRWall+0x6c>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800bd60:	2101      	movs	r1, #1
 800bd62:	2004      	movs	r0, #4
 800bd64:	f003 fb5c 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bd68:	2101      	movs	r1, #1
 800bd6a:	2005      	movs	r0, #5
 800bd6c:	f003 fb58 	bl	800f420 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bd70:	2100      	movs	r1, #0
 800bd72:	2001      	movs	r0, #1
 800bd74:	f003 fb54 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bd78:	2100      	movs	r1, #0
 800bd7a:	2002      	movs	r0, #2
 800bd7c:	f003 fb50 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800bd80:	2101      	movs	r1, #1
 800bd82:	2003      	movs	r0, #3
 800bd84:	f003 fb4c 	bl	800f420 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800bd88:	4b07      	ldr	r3, [pc, #28]	; (800bda8 <GainTestRWall+0x70>)
 800bd8a:	f04f 0200 	mov.w	r2, #0
 800bd8e:	601a      	str	r2, [r3, #0]
	ChangeLED(1);
 800bd90:	2001      	movs	r0, #1
 800bd92:	f002 fd55 	bl	800e840 <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800bd96:	4b05      	ldr	r3, [pc, #20]	; (800bdac <GainTestRWall+0x74>)
 800bd98:	f04f 0200 	mov.w	r2, #0
 800bd9c:	609a      	str	r2, [r3, #8]
 800bd9e:	e7fa      	b.n	800bd96 <GainTestRWall+0x5e>
 800bda0:	20008974 	.word	0x20008974
 800bda4:	200089b8 	.word	0x200089b8
 800bda8:	20008aac 	.word	0x20008aac
 800bdac:	20008988 	.word	0x20008988

0800bdb0 <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800bdb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bdb4:	b086      	sub	sp, #24
 800bdb6:	af06      	add	r7, sp, #24
	IT_mode = EXPLORE;
 800bdb8:	4b2c      	ldr	r3, [pc, #176]	; (800be6c <GainTestDWall+0xbc>)
 800bdba:	2206      	movs	r2, #6
 800bdbc:	601a      	str	r2, [r3, #0]
	InitExplore();
 800bdbe:	f7ff fda3 	bl	800b908 <InitExplore>
	InitPosition();
 800bdc2:	f7fd f819 	bl	8008df8 <InitPosition>
	wall_init();
 800bdc6:	f7fe fcdd 	bl	800a784 <wall_init>
	TotalPulse[RIGHT] = 0;
 800bdca:	4b29      	ldr	r3, [pc, #164]	; (800be70 <GainTestDWall+0xc0>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bdd0:	4b27      	ldr	r3, [pc, #156]	; (800be70 <GainTestDWall+0xc0>)
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800bdd6:	4b26      	ldr	r3, [pc, #152]	; (800be70 <GainTestDWall+0xc0>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800bddc:	2101      	movs	r1, #1
 800bdde:	2004      	movs	r0, #4
 800bde0:	f003 fb1e 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bde4:	2101      	movs	r1, #1
 800bde6:	2005      	movs	r0, #5
 800bde8:	f003 fb1a 	bl	800f420 <PIDChangeFlag>
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
 800bdec:	2101      	movs	r1, #1
 800bdee:	2001      	movs	r0, #1
 800bdf0:	f003 fb16 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	2002      	movs	r0, #2
 800bdf8:	f003 fb12 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	2003      	movs	r0, #3
 800be00:	f003 fb0e 	bl	800f420 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800be04:	4b1b      	ldr	r3, [pc, #108]	; (800be74 <GainTestDWall+0xc4>)
 800be06:	f04f 0200 	mov.w	r2, #0
 800be0a:	601a      	str	r2, [r3, #0]
	ChangeLED(2);
 800be0c:	2002      	movs	r0, #2
 800be0e:	f002 fd17 	bl	800e840 <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800be12:	4b19      	ldr	r3, [pc, #100]	; (800be78 <GainTestDWall+0xc8>)
 800be14:	f04f 0200 	mov.w	r2, #0
 800be18:	609a      	str	r2, [r3, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800be1a:	4b18      	ldr	r3, [pc, #96]	; (800be7c <GainTestDWall+0xcc>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fc faca 	bl	80083b8 <__aeabi_f2d>
 800be24:	4682      	mov	sl, r0
 800be26:	468b      	mov	fp, r1
 800be28:	4b14      	ldr	r3, [pc, #80]	; (800be7c <GainTestDWall+0xcc>)
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fc fac3 	bl	80083b8 <__aeabi_f2d>
 800be32:	4604      	mov	r4, r0
 800be34:	460d      	mov	r5, r1
 800be36:	4b11      	ldr	r3, [pc, #68]	; (800be7c <GainTestDWall+0xcc>)
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fc fabc 	bl	80083b8 <__aeabi_f2d>
 800be40:	4680      	mov	r8, r0
 800be42:	4689      	mov	r9, r1
 800be44:	4b0d      	ldr	r3, [pc, #52]	; (800be7c <GainTestDWall+0xcc>)
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fc fab5 	bl	80083b8 <__aeabi_f2d>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be56:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800be5a:	e9cd 4500 	strd	r4, r5, [sp]
 800be5e:	4652      	mov	r2, sl
 800be60:	465b      	mov	r3, fp
 800be62:	4807      	ldr	r0, [pc, #28]	; (800be80 <GainTestDWall+0xd0>)
 800be64:	f00a fb5a 	bl	801651c <iprintf>
		TargetVelocity[BODY] = 0;
 800be68:	e7d3      	b.n	800be12 <GainTestDWall+0x62>
 800be6a:	bf00      	nop
 800be6c:	20008974 	.word	0x20008974
 800be70:	200089b8 	.word	0x200089b8
 800be74:	20008aac 	.word	0x20008aac
 800be78:	20008988 	.word	0x20008988
 800be7c:	200089f8 	.word	0x200089f8
 800be80:	08019ef4 	.word	0x08019ef4

0800be84 <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800be84:	b580      	push	{r7, lr}
 800be86:	af00      	add	r7, sp, #0
	IT_mode = WRITINGFREE;
 800be88:	4b28      	ldr	r3, [pc, #160]	; (800bf2c <WritingFree+0xa8>)
 800be8a:	2207      	movs	r2, #7
 800be8c:	601a      	str	r2, [r3, #0]

	InitExplore();
 800be8e:	f7ff fd3b 	bl	800b908 <InitExplore>

	printf("3\r\n");
 800be92:	4827      	ldr	r0, [pc, #156]	; (800bf30 <WritingFree+0xac>)
 800be94:	f00a fbca 	bl	801662c <puts>

	InitPosition();
 800be98:	f7fc ffae 	bl	8008df8 <InitPosition>

	wall_init();
 800be9c:	f7fe fc72 	bl	800a784 <wall_init>
	printf("4\r\n");
 800bea0:	4824      	ldr	r0, [pc, #144]	; (800bf34 <WritingFree+0xb0>)
 800bea2:	f00a fbc3 	bl	801662c <puts>

	TotalPulse[RIGHT] = 0;
 800bea6:	4b24      	ldr	r3, [pc, #144]	; (800bf38 <WritingFree+0xb4>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800beac:	4b22      	ldr	r3, [pc, #136]	; (800bf38 <WritingFree+0xb4>)
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800beb2:	4b21      	ldr	r3, [pc, #132]	; (800bf38 <WritingFree+0xb4>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800beb8:	2101      	movs	r1, #1
 800beba:	2004      	movs	r0, #4
 800bebc:	f003 fab0 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bec0:	2101      	movs	r1, #1
 800bec2:	2005      	movs	r0, #5
 800bec4:	f003 faac 	bl	800f420 <PIDChangeFlag>

	PIDChangeFlag(D_WALL_PID, 0);
 800bec8:	2100      	movs	r1, #0
 800beca:	2001      	movs	r0, #1
 800becc:	f003 faa8 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bed0:	2100      	movs	r1, #0
 800bed2:	2002      	movs	r0, #2
 800bed4:	f003 faa4 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bed8:	2100      	movs	r1, #0
 800beda:	2003      	movs	r0, #3
 800bedc:	f003 faa0 	bl	800f420 <PIDChangeFlag>
	ExploreVelocity=0;
 800bee0:	4b16      	ldr	r3, [pc, #88]	; (800bf3c <WritingFree+0xb8>)
 800bee2:	f04f 0200 	mov.w	r2, #0
 800bee6:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800bee8:	2007      	movs	r0, #7
 800beea:	f002 fca9 	bl	800e840 <ChangeLED>

	Rotate(90, M_PI);
 800beee:	eddf 0a14 	vldr	s1, [pc, #80]	; 800bf40 <WritingFree+0xbc>
 800bef2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800bf44 <WritingFree+0xc0>
 800bef6:	f7fd f89b 	bl	8009030 <Rotate>
	HAL_Delay(500);
 800befa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800befe:	f003 fddb 	bl	800fab8 <HAL_Delay>

	while(1)
	{
		Rotate(90, M_PI);
 800bf02:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800bf40 <WritingFree+0xbc>
 800bf06:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800bf44 <WritingFree+0xc0>
 800bf0a:	f7fd f891 	bl	8009030 <Rotate>

		HAL_Delay(500);
 800bf0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bf12:	f003 fdd1 	bl	800fab8 <HAL_Delay>
		Rotate(90, -M_PI);
 800bf16:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800bf48 <WritingFree+0xc4>
 800bf1a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800bf44 <WritingFree+0xc0>
 800bf1e:	f7fd f887 	bl	8009030 <Rotate>

		HAL_Delay(500);
 800bf22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bf26:	f003 fdc7 	bl	800fab8 <HAL_Delay>
		Rotate(90, M_PI);
 800bf2a:	e7ea      	b.n	800bf02 <WritingFree+0x7e>
 800bf2c:	20008974 	.word	0x20008974
 800bf30:	08019f24 	.word	0x08019f24
 800bf34:	08019f28 	.word	0x08019f28
 800bf38:	200089b8 	.word	0x200089b8
 800bf3c:	20008aac 	.word	0x20008aac
 800bf40:	40490fdb 	.word	0x40490fdb
 800bf44:	42b40000 	.word	0x42b40000
 800bf48:	c0490fdb 	.word	0xc0490fdb
 800bf4c:	00000000 	.word	0x00000000

0800bf50 <initSlalomParam>:
	}
	//探索の場合は迷路とステータスの準備
}

void initSlalomParam()
{
 800bf50:	b598      	push	{r3, r4, r7, lr}
 800bf52:	af00      	add	r7, sp, #0
	Sla.Pre *=  2/MM_PER_PULSE;
 800bf54:	4b1a      	ldr	r3, [pc, #104]	; (800bfc0 <initSlalomParam+0x70>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fc fa2d 	bl	80083b8 <__aeabi_f2d>
 800bf5e:	a316      	add	r3, pc, #88	; (adr r3, 800bfb8 <initSlalomParam+0x68>)
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	f7fc fa80 	bl	8008468 <__aeabi_dmul>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	4621      	mov	r1, r4
 800bf70:	f7fc fd72 	bl	8008a58 <__aeabi_d2f>
 800bf74:	4602      	mov	r2, r0
 800bf76:	4b12      	ldr	r3, [pc, #72]	; (800bfc0 <initSlalomParam+0x70>)
 800bf78:	601a      	str	r2, [r3, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800bf7a:	4b11      	ldr	r3, [pc, #68]	; (800bfc0 <initSlalomParam+0x70>)
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fc fa1a 	bl	80083b8 <__aeabi_f2d>
 800bf84:	a30c      	add	r3, pc, #48	; (adr r3, 800bfb8 <initSlalomParam+0x68>)
 800bf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8a:	f7fc fa6d 	bl	8008468 <__aeabi_dmul>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	460c      	mov	r4, r1
 800bf92:	4618      	mov	r0, r3
 800bf94:	4621      	mov	r1, r4
 800bf96:	f7fc fd5f 	bl	8008a58 <__aeabi_d2f>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	4b08      	ldr	r3, [pc, #32]	; (800bfc0 <initSlalomParam+0x70>)
 800bf9e:	605a      	str	r2, [r3, #4]
	Sla.Theta1 = 30*M_PI/180;
 800bfa0:	4b07      	ldr	r3, [pc, #28]	; (800bfc0 <initSlalomParam+0x70>)
 800bfa2:	4a08      	ldr	r2, [pc, #32]	; (800bfc4 <initSlalomParam+0x74>)
 800bfa4:	611a      	str	r2, [r3, #16]
	Sla.Theta2 = 60*M_PI/180;
 800bfa6:	4b06      	ldr	r3, [pc, #24]	; (800bfc0 <initSlalomParam+0x70>)
 800bfa8:	4a07      	ldr	r2, [pc, #28]	; (800bfc8 <initSlalomParam+0x78>)
 800bfaa:	615a      	str	r2, [r3, #20]
	Sla.Theta3 = 90*M_PI/180;
 800bfac:	4b04      	ldr	r3, [pc, #16]	; (800bfc0 <initSlalomParam+0x70>)
 800bfae:	4a07      	ldr	r2, [pc, #28]	; (800bfcc <initSlalomParam+0x7c>)
 800bfb0:	619a      	str	r2, [r3, #24]
}
 800bfb2:	bf00      	nop
 800bfb4:	bd98      	pop	{r3, r4, r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	9f8f0d54 	.word	0x9f8f0d54
 800bfbc:	409ee54a 	.word	0x409ee54a
 800bfc0:	200089d0 	.word	0x200089d0
 800bfc4:	3f060a92 	.word	0x3f060a92
 800bfc8:	3f860a92 	.word	0x3f860a92
 800bfcc:	3fc90fdb 	.word	0x3fc90fdb

0800bfd0 <FastestRun>:
void FastestRun()
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af02      	add	r7, sp, #8
	IT_mode = EXPLORE;
 800bfd6:	4bab      	ldr	r3, [pc, #684]	; (800c284 <FastestRun+0x2b4>)
 800bfd8:	2206      	movs	r2, #6
 800bfda:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//諸々の初期化
	HAL_Delay(100);
 800bfdc:	2064      	movs	r0, #100	; 0x64
 800bfde:	f003 fd6b 	bl	800fab8 <HAL_Delay>
	int8_t mode=1;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	71fb      	strb	r3, [r7, #7]
	  ModeSelect( 1, 2, &mode);
 800bfe6:	1dfb      	adds	r3, r7, #7
 800bfe8:	461a      	mov	r2, r3
 800bfea:	2102      	movs	r1, #2
 800bfec:	2001      	movs	r0, #1
 800bfee:	f003 fc39 	bl	800f864 <ModeSelect>
	  Signal( mode );
 800bff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f003 fbb4 	bl	800f764 <Signal>

		HAL_Delay(100);
 800bffc:	2064      	movs	r0, #100	; 0x64
 800bffe:	f003 fd5b 	bl	800fab8 <HAL_Delay>
		  int8_t mode2=1;
 800c002:	2301      	movs	r3, #1
 800c004:	71bb      	strb	r3, [r7, #6]
		  ModeSelect( 1, 4, &mode2);
 800c006:	1dbb      	adds	r3, r7, #6
 800c008:	461a      	mov	r2, r3
 800c00a:	2104      	movs	r1, #4
 800c00c:	2001      	movs	r0, #1
 800c00e:	f003 fc29 	bl	800f864 <ModeSelect>
		  Signal( mode2 );
 800c012:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c016:	4618      	mov	r0, r3
 800c018:	f003 fba4 	bl	800f764 <Signal>

		  PhotoSwitch();
 800c01c:	f003 fbf8 	bl	800f810 <PhotoSwitch>
	InitFastest();
 800c020:	f7ff fd32 	bl	800ba88 <InitFastest>
	InitPosition();
 800c024:	f7fc fee8 	bl	8008df8 <InitPosition>


//	wall_init();

	TotalPulse[RIGHT] = 0;
 800c028:	4b97      	ldr	r3, [pc, #604]	; (800c288 <FastestRun+0x2b8>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c02e:	4b96      	ldr	r3, [pc, #600]	; (800c288 <FastestRun+0x2b8>)
 800c030:	2200      	movs	r2, #0
 800c032:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c034:	4b94      	ldr	r3, [pc, #592]	; (800c288 <FastestRun+0x2b8>)
 800c036:	2200      	movs	r2, #0
 800c038:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c03a:	2101      	movs	r1, #1
 800c03c:	2004      	movs	r0, #4
 800c03e:	f003 f9ef 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c042:	2101      	movs	r1, #1
 800c044:	2005      	movs	r0, #5
 800c046:	f003 f9eb 	bl	800f420 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c04a:	4b8f      	ldr	r3, [pc, #572]	; (800c288 <FastestRun+0x2b8>)
 800c04c:	6899      	ldr	r1, [r3, #8]
 800c04e:	4b8e      	ldr	r3, [pc, #568]	; (800c288 <FastestRun+0x2b8>)
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	4b8d      	ldr	r3, [pc, #564]	; (800c288 <FastestRun+0x2b8>)
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	488d      	ldr	r0, [pc, #564]	; (800c28c <FastestRun+0x2bc>)
 800c058:	f00a fa60 	bl	801651c <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c05c:	2100      	movs	r1, #0
 800c05e:	2001      	movs	r0, #1
 800c060:	f003 f9de 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c064:	2100      	movs	r1, #0
 800c066:	2002      	movs	r0, #2
 800c068:	f003 f9da 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c06c:	2100      	movs	r1, #0
 800c06e:	2003      	movs	r0, #3
 800c070:	f003 f9d6 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800c074:	2100      	movs	r1, #0
 800c076:	2000      	movs	r0, #0
 800c078:	f003 f9d2 	bl	800f420 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode = 'T';
 800c07c:	2354      	movs	r3, #84	; 0x54
 800c07e:	73fb      	strb	r3, [r7, #15]
	if(mode == 1)
 800c080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d105      	bne.n	800c094 <FastestRun+0xc4>
	{
		ExploreVelocity = 400;
 800c088:	4b81      	ldr	r3, [pc, #516]	; (800c290 <FastestRun+0x2c0>)
 800c08a:	4a82      	ldr	r2, [pc, #520]	; (800c294 <FastestRun+0x2c4>)
 800c08c:	601a      	str	r2, [r3, #0]
		turn_mode = 'T';
 800c08e:	2354      	movs	r3, #84	; 0x54
 800c090:	73fb      	strb	r3, [r7, #15]
 800c092:	e005      	b.n	800c0a0 <FastestRun+0xd0>
	}
	else if(mode == 2)
 800c094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d101      	bne.n	800c0a0 <FastestRun+0xd0>
	{
		turn_mode = 'S';
 800c09c:	2353      	movs	r3, #83	; 0x53
 800c09e:	73fb      	strb	r3, [r7, #15]
	}

	switch(mode2)
 800c0a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	d863      	bhi.n	800c172 <FastestRun+0x1a2>
 800c0aa:	a201      	add	r2, pc, #4	; (adr r2, 800c0b0 <FastestRun+0xe0>)
 800c0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b0:	0800c0c1 	.word	0x0800c0c1
 800c0b4:	0800c0ed 	.word	0x0800c0ed
 800c0b8:	0800c119 	.word	0x0800c119
 800c0bc:	0800c147 	.word	0x0800c147
	{
	case 1:
		ExploreVelocity=90;
 800c0c0:	4b73      	ldr	r3, [pc, #460]	; (800c290 <FastestRun+0x2c0>)
 800c0c2:	4a75      	ldr	r2, [pc, #468]	; (800c298 <FastestRun+0x2c8>)
 800c0c4:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 7;//9;
 800c0c6:	4b75      	ldr	r3, [pc, #468]	; (800c29c <FastestRun+0x2cc>)
 800c0c8:	4a75      	ldr	r2, [pc, #468]	; (800c2a0 <FastestRun+0x2d0>)
 800c0ca:	601a      	str	r2, [r3, #0]
		Sla.Fol = 11;//13;
 800c0cc:	4b73      	ldr	r3, [pc, #460]	; (800c29c <FastestRun+0x2cc>)
 800c0ce:	4a75      	ldr	r2, [pc, #468]	; (800c2a4 <FastestRun+0x2d4>)
 800c0d0:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800c0d2:	4b72      	ldr	r3, [pc, #456]	; (800c29c <FastestRun+0x2cc>)
 800c0d4:	4a74      	ldr	r2, [pc, #464]	; (800c2a8 <FastestRun+0x2d8>)
 800c0d6:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c0d8:	4b70      	ldr	r3, [pc, #448]	; (800c29c <FastestRun+0x2cc>)
 800c0da:	4a74      	ldr	r2, [pc, #464]	; (800c2ac <FastestRun+0x2dc>)
 800c0dc:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c0de:	4b6f      	ldr	r3, [pc, #444]	; (800c29c <FastestRun+0x2cc>)
 800c0e0:	4a73      	ldr	r2, [pc, #460]	; (800c2b0 <FastestRun+0x2e0>)
 800c0e2:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c0e4:	4b6d      	ldr	r3, [pc, #436]	; (800c29c <FastestRun+0x2cc>)
 800c0e6:	4a6c      	ldr	r2, [pc, #432]	; (800c298 <FastestRun+0x2c8>)
 800c0e8:	619a      	str	r2, [r3, #24]
		break;
 800c0ea:	e042      	b.n	800c172 <FastestRun+0x1a2>
	case 2:
		//完
		ExploreVelocity=135;
 800c0ec:	4b68      	ldr	r3, [pc, #416]	; (800c290 <FastestRun+0x2c0>)
 800c0ee:	4a71      	ldr	r2, [pc, #452]	; (800c2b4 <FastestRun+0x2e4>)
 800c0f0:	601a      	str	r2, [r3, #0]
		Sla.Pre = 5;
 800c0f2:	4b6a      	ldr	r3, [pc, #424]	; (800c29c <FastestRun+0x2cc>)
 800c0f4:	4a70      	ldr	r2, [pc, #448]	; (800c2b8 <FastestRun+0x2e8>)
 800c0f6:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800c0f8:	4b68      	ldr	r3, [pc, #416]	; (800c29c <FastestRun+0x2cc>)
 800c0fa:	4a6f      	ldr	r2, [pc, #444]	; (800c2b8 <FastestRun+0x2e8>)
 800c0fc:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.0273;
 800c0fe:	4b67      	ldr	r3, [pc, #412]	; (800c29c <FastestRun+0x2cc>)
 800c100:	4a6e      	ldr	r2, [pc, #440]	; (800c2bc <FastestRun+0x2ec>)
 800c102:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c104:	4b65      	ldr	r3, [pc, #404]	; (800c29c <FastestRun+0x2cc>)
 800c106:	4a69      	ldr	r2, [pc, #420]	; (800c2ac <FastestRun+0x2dc>)
 800c108:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c10a:	4b64      	ldr	r3, [pc, #400]	; (800c29c <FastestRun+0x2cc>)
 800c10c:	4a68      	ldr	r2, [pc, #416]	; (800c2b0 <FastestRun+0x2e0>)
 800c10e:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c110:	4b62      	ldr	r3, [pc, #392]	; (800c29c <FastestRun+0x2cc>)
 800c112:	4a61      	ldr	r2, [pc, #388]	; (800c298 <FastestRun+0x2c8>)
 800c114:	619a      	str	r2, [r3, #24]
		break;
 800c116:	e02c      	b.n	800c172 <FastestRun+0x1a2>
//		Sla.Fol = 10;
//		Sla.Alpha = 0.04478;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		ExploreVelocity=180;
 800c118:	4b5d      	ldr	r3, [pc, #372]	; (800c290 <FastestRun+0x2c0>)
 800c11a:	4a69      	ldr	r2, [pc, #420]	; (800c2c0 <FastestRun+0x2f0>)
 800c11c:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800c11e:	4b5f      	ldr	r3, [pc, #380]	; (800c29c <FastestRun+0x2cc>)
 800c120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c124:	601a      	str	r2, [r3, #0]
		Sla.Fol = 3.5;
 800c126:	4b5d      	ldr	r3, [pc, #372]	; (800c29c <FastestRun+0x2cc>)
 800c128:	4a66      	ldr	r2, [pc, #408]	; (800c2c4 <FastestRun+0x2f4>)
 800c12a:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.04;
 800c12c:	4b5b      	ldr	r3, [pc, #364]	; (800c29c <FastestRun+0x2cc>)
 800c12e:	4a66      	ldr	r2, [pc, #408]	; (800c2c8 <FastestRun+0x2f8>)
 800c130:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c132:	4b5a      	ldr	r3, [pc, #360]	; (800c29c <FastestRun+0x2cc>)
 800c134:	4a5d      	ldr	r2, [pc, #372]	; (800c2ac <FastestRun+0x2dc>)
 800c136:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c138:	4b58      	ldr	r3, [pc, #352]	; (800c29c <FastestRun+0x2cc>)
 800c13a:	4a5d      	ldr	r2, [pc, #372]	; (800c2b0 <FastestRun+0x2e0>)
 800c13c:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c13e:	4b57      	ldr	r3, [pc, #348]	; (800c29c <FastestRun+0x2cc>)
 800c140:	4a55      	ldr	r2, [pc, #340]	; (800c298 <FastestRun+0x2c8>)
 800c142:	619a      	str	r2, [r3, #24]
		break;
 800c144:	e015      	b.n	800c172 <FastestRun+0x1a2>
	case 4:
		ExploreVelocity=300;
 800c146:	4b52      	ldr	r3, [pc, #328]	; (800c290 <FastestRun+0x2c0>)
 800c148:	4a60      	ldr	r2, [pc, #384]	; (800c2cc <FastestRun+0x2fc>)
 800c14a:	601a      	str	r2, [r3, #0]
		Sla.Pre = 3;
 800c14c:	4b53      	ldr	r3, [pc, #332]	; (800c29c <FastestRun+0x2cc>)
 800c14e:	4a60      	ldr	r2, [pc, #384]	; (800c2d0 <FastestRun+0x300>)
 800c150:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800c152:	4b52      	ldr	r3, [pc, #328]	; (800c29c <FastestRun+0x2cc>)
 800c154:	4a58      	ldr	r2, [pc, #352]	; (800c2b8 <FastestRun+0x2e8>)
 800c156:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800c158:	4b50      	ldr	r3, [pc, #320]	; (800c29c <FastestRun+0x2cc>)
 800c15a:	4a5e      	ldr	r2, [pc, #376]	; (800c2d4 <FastestRun+0x304>)
 800c15c:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c15e:	4b4f      	ldr	r3, [pc, #316]	; (800c29c <FastestRun+0x2cc>)
 800c160:	4a52      	ldr	r2, [pc, #328]	; (800c2ac <FastestRun+0x2dc>)
 800c162:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c164:	4b4d      	ldr	r3, [pc, #308]	; (800c29c <FastestRun+0x2cc>)
 800c166:	4a52      	ldr	r2, [pc, #328]	; (800c2b0 <FastestRun+0x2e0>)
 800c168:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c16a:	4b4c      	ldr	r3, [pc, #304]	; (800c29c <FastestRun+0x2cc>)
 800c16c:	4a4a      	ldr	r2, [pc, #296]	; (800c298 <FastestRun+0x2c8>)
 800c16e:	619a      	str	r2, [r3, #24]
		break;
 800c170:	bf00      	nop

	}
	initSlalomParam();
 800c172:	f7ff feed 	bl	800bf50 <initSlalomParam>
	ChangeLED(4);
 800c176:	2004      	movs	r0, #4
 800c178:	f002 fb62 	bl	800e840 <ChangeLED>

	VelocityMax = false;
 800c17c:	4b56      	ldr	r3, [pc, #344]	; (800c2d8 <FastestRun+0x308>)
 800c17e:	2200      	movs	r2, #0
 800c180:	701a      	strb	r2, [r3, #0]

	SearchOrFast = 1;
 800c182:	4b56      	ldr	r3, [pc, #344]	; (800c2dc <FastestRun+0x30c>)
 800c184:	2201      	movs	r2, #1
 800c186:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 800c188:	4b54      	ldr	r3, [pc, #336]	; (800c2dc <FastestRun+0x30c>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a54      	ldr	r2, [pc, #336]	; (800c2e0 <FastestRun+0x310>)
 800c18e:	6013      	str	r3, [r2, #0]
	//走る
	goal_edge_num = GOAL_SIZE_X;
 800c190:	4b54      	ldr	r3, [pc, #336]	; (800c2e4 <FastestRun+0x314>)
 800c192:	2202      	movs	r2, #2
 800c194:	701a      	strb	r2, [r3, #0]
//			HAL_Delay(300);
//			break;
//	}
	//shiftPos();

	TargetVelocity[BODY] = 0;
 800c196:	4b54      	ldr	r3, [pc, #336]	; (800c2e8 <FastestRun+0x318>)
 800c198:	f04f 0200 	mov.w	r2, #0
 800c19c:	609a      	str	r2, [r3, #8]
	Acceleration = 0;
 800c19e:	4b53      	ldr	r3, [pc, #332]	; (800c2ec <FastestRun+0x31c>)
 800c1a0:	f04f 0200 	mov.w	r2, #0
 800c1a4:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 800c1a6:	4b52      	ldr	r3, [pc, #328]	; (800c2f0 <FastestRun+0x320>)
 800c1a8:	f04f 0200 	mov.w	r2, #0
 800c1ac:	601a      	str	r2, [r3, #0]
	TargetAngle = 0;
 800c1ae:	4b51      	ldr	r3, [pc, #324]	; (800c2f4 <FastestRun+0x324>)
 800c1b0:	f04f 0200 	mov.w	r2, #0
 800c1b4:	601a      	str	r2, [r3, #0]
	Angle = 0;
 800c1b6:	4b50      	ldr	r3, [pc, #320]	; (800c2f8 <FastestRun+0x328>)
 800c1b8:	f04f 0200 	mov.w	r2, #0
 800c1bc:	601a      	str	r2, [r3, #0]
	PIDReset(L_VELO_PID);
 800c1be:	2004      	movs	r0, #4
 800c1c0:	f003 f944 	bl	800f44c <PIDReset>
	PIDReset(R_VELO_PID);
 800c1c4:	2005      	movs	r0, #5
 800c1c6:	f003 f941 	bl	800f44c <PIDReset>
	PIDReset(A_VELO_PID);
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	f003 f93e 	bl	800f44c <PIDReset>

	PIDReset(L_WALL_PID);
 800c1d0:	2002      	movs	r0, #2
 800c1d2:	f003 f93b 	bl	800f44c <PIDReset>
	PIDReset(R_WALL_PID);
 800c1d6:	2003      	movs	r0, #3
 800c1d8:	f003 f938 	bl	800f44c <PIDReset>
	PIDReset(D_WALL_PID);
 800c1dc:	2001      	movs	r0, #1
 800c1de:	f003 f935 	bl	800f44c <PIDReset>
//		Rotate( 90 , 2*M_PI);
//		//TurnRight(turn_mode);
//		HAL_Delay(1000);
//	}
	//迷路データ
	initSearchData(&my_map, &my_mouse);
 800c1e2:	4946      	ldr	r1, [pc, #280]	; (800c2fc <FastestRun+0x32c>)
 800c1e4:	4846      	ldr	r0, [pc, #280]	; (800c300 <FastestRun+0x330>)
 800c1e6:	f001 fc93 	bl	800db10 <initSearchData>
//	printAllNodeExistence(&my_map);
	//マップデータの取得。flashから壁データを取得。
	flashCopyNodesToRam(); //existenceだけ
 800c1ea:	f7fe fb6d 	bl	800a8c8 <flashCopyNodesToRam>
//	printAllNodeExistence(&my_map);
	//flash_copy_to_ram();
	//マップデータはあるので、最初だけ重みを計算
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	2302      	movs	r3, #2
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	2302      	movs	r3, #2
 800c1f8:	2207      	movs	r2, #7
 800c1fa:	2107      	movs	r1, #7
 800c1fc:	4840      	ldr	r0, [pc, #256]	; (800c300 <FastestRun+0x330>)
 800c1fe:	f7fe fe69 	bl	800aed4 <updateAllNodeWeight>

	HAL_Delay(200);
 800c202:	20c8      	movs	r0, #200	; 0xc8
 800c204:	f003 fc58 	bl	800fab8 <HAL_Delay>
	//壁のあるなしと重みをprintしてチェック
//	printAllNodeExistence(&my_map);
//	printAllWeight(&my_map, &(my_mouse.goal_lesser));
	//最初の加速
	Accel(61.5, ExploreVelocity);
 800c208:	4b21      	ldr	r3, [pc, #132]	; (800c290 <FastestRun+0x2c0>)
 800c20a:	edd3 7a00 	vldr	s15, [r3]
 800c20e:	eef0 0a67 	vmov.f32	s1, s15
 800c212:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800c304 <FastestRun+0x334>
 800c216:	f7fd fbdb 	bl	80099d0 <Accel>

    //理想は、ゴールまで重み更新なしで、コマンドによるモータ制御のみ
    //シミュレーションの1stステップとしては、重み更新無しでノード選択しながら、stateの更新だけする

    //最初の加速コマンド
    int cnt=0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	60bb      	str	r3, [r7, #8]

//    char r[]="行";
//	char c[]="列";

    while(! ((my_mouse.goal_lesser.x <= my_mouse.next.pos.x && my_mouse.next.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.next.pos.y && my_mouse.next.pos.y <= my_mouse.goal_larger.y)))
 800c21e:	e0d6      	b.n	800c3ce <FastestRun+0x3fe>
    {
        shiftState(&my_mouse);
 800c220:	4836      	ldr	r0, [pc, #216]	; (800c2fc <FastestRun+0x32c>)
 800c222:	f7ff fb65 	bl	800b8f0 <shiftState>
        //mouse->now.node = getNodeInfo(maze,mouse->now.pos.x,mouse->now.pos.y, mouse->now.car);
        //選んだノードと、迷路上のノードの、アドレスが一致していればOK.


        //printf("現ノード    重み:%x\r\n            %s x:%u, y:%u\r\n            侵入方角:%d, x:%d, y:%d\r\n",mouse->now.node->weight, (mouse->now.node->rc == 1) ? c:r, mouse->now.node->pos.x, mouse->now.node->pos.y, mouse->now.car, mouse->now.pos.x,mouse->now.pos.y);
        my_mouse.next.node = getNextNode(&my_map, my_mouse.now.car, my_mouse.now.node, 0x03);//これらの引数のどれかがいけない. 迷路、方角、ノードポインタ. 一発目の、ノードの重みがfffなのはなぜ？
 800c226:	4b35      	ldr	r3, [pc, #212]	; (800c2fc <FastestRun+0x32c>)
 800c228:	7a99      	ldrb	r1, [r3, #10]
 800c22a:	4b34      	ldr	r3, [pc, #208]	; (800c2fc <FastestRun+0x32c>)
 800c22c:	691a      	ldr	r2, [r3, #16]
 800c22e:	2303      	movs	r3, #3
 800c230:	4833      	ldr	r0, [pc, #204]	; (800c300 <FastestRun+0x330>)
 800c232:	f7fe ff71 	bl	800b118 <getNextNode>
 800c236:	4602      	mov	r2, r0
 800c238:	4b30      	ldr	r3, [pc, #192]	; (800c2fc <FastestRun+0x32c>)
 800c23a:	61da      	str	r2, [r3, #28]

        //printf("次ノード    重み:%x\r\n            %s x:%u, y:%u\r\n            ", mouse->next.node->weight, (mouse->next.node->rc == 1) ? c:r , mouse->next.node->pos.x, mouse->next.node->pos.y);

        getNextState(&(my_mouse.now),&(my_mouse.next),my_mouse.next.node);
 800c23c:	4b2f      	ldr	r3, [pc, #188]	; (800c2fc <FastestRun+0x32c>)
 800c23e:	69db      	ldr	r3, [r3, #28]
 800c240:	461a      	mov	r2, r3
 800c242:	4931      	ldr	r1, [pc, #196]	; (800c308 <FastestRun+0x338>)
 800c244:	4831      	ldr	r0, [pc, #196]	; (800c30c <FastestRun+0x33c>)
 800c246:	f7ff f9f3 	bl	800b630 <getNextState>
        //printf("侵入方角:%d, x:%d, y:%d\r\n\r\n",mouse->next.car, mouse->next.pos.x,mouse->next.pos.y);
        //デバッグ用
        //getRouteFastRun( route_log, &(mouse->now), cnt);
        AddVelocity = 0;
 800c24a:	4b31      	ldr	r3, [pc, #196]	; (800c310 <FastestRun+0x340>)
 800c24c:	f04f 0200 	mov.w	r2, #0
 800c250:	601a      	str	r2, [r3, #0]
        //ChangeLED(0);
        	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
        	switch(my_mouse.next.dir%8)
 800c252:	4b2a      	ldr	r3, [pc, #168]	; (800c2fc <FastestRun+0x32c>)
 800c254:	7ddb      	ldrb	r3, [r3, #23]
 800c256:	f003 0307 	and.w	r3, r3, #7
 800c25a:	2b06      	cmp	r3, #6
 800c25c:	f200 80b4 	bhi.w	800c3c8 <FastestRun+0x3f8>
 800c260:	a201      	add	r2, pc, #4	; (adr r2, 800c268 <FastestRun+0x298>)
 800c262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c266:	bf00      	nop
 800c268:	0800c315 	.word	0x0800c315
 800c26c:	0800c3c9 	.word	0x0800c3c9
 800c270:	0800c333 	.word	0x0800c333
 800c274:	0800c34b 	.word	0x0800c34b
 800c278:	0800c367 	.word	0x0800c367
 800c27c:	0800c39b 	.word	0x0800c39b
 800c280:	0800c3b7 	.word	0x0800c3b7
 800c284:	20008974 	.word	0x20008974
 800c288:	200089b8 	.word	0x200089b8
 800c28c:	08019ec0 	.word	0x08019ec0
 800c290:	20008aac 	.word	0x20008aac
 800c294:	43c80000 	.word	0x43c80000
 800c298:	42b40000 	.word	0x42b40000
 800c29c:	200089d0 	.word	0x200089d0
 800c2a0:	40e00000 	.word	0x40e00000
 800c2a4:	41300000 	.word	0x41300000
 800c2a8:	3c656042 	.word	0x3c656042
 800c2ac:	41f00000 	.word	0x41f00000
 800c2b0:	42700000 	.word	0x42700000
 800c2b4:	43070000 	.word	0x43070000
 800c2b8:	40a00000 	.word	0x40a00000
 800c2bc:	3cdfa440 	.word	0x3cdfa440
 800c2c0:	43340000 	.word	0x43340000
 800c2c4:	40600000 	.word	0x40600000
 800c2c8:	3d23d70a 	.word	0x3d23d70a
 800c2cc:	43960000 	.word	0x43960000
 800c2d0:	40400000 	.word	0x40400000
 800c2d4:	3def9db2 	.word	0x3def9db2
 800c2d8:	20008aaa 	.word	0x20008aaa
 800c2dc:	20008c24 	.word	0x20008c24
 800c2e0:	20008c28 	.word	0x20008c28
 800c2e4:	200089b4 	.word	0x200089b4
 800c2e8:	20008988 	.word	0x20008988
 800c2ec:	20007f3c 	.word	0x20007f3c
 800c2f0:	20008998 	.word	0x20008998
 800c2f4:	20007f48 	.word	0x20007f48
 800c2f8:	20007f38 	.word	0x20007f38
 800c2fc:	20008224 	.word	0x20008224
 800c300:	200083d0 	.word	0x200083d0
 800c304:	42760000 	.word	0x42760000
 800c308:	20008238 	.word	0x20008238
 800c30c:	2000822c 	.word	0x2000822c
 800c310:	20008994 	.word	0x20008994
        	{
        	case front:
        		//ただ直進
        		Calc = SearchOrFast;
 800c314:	4b46      	ldr	r3, [pc, #280]	; (800c430 <FastestRun+0x460>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a46      	ldr	r2, [pc, #280]	; (800c434 <FastestRun+0x464>)
 800c31a:	6013      	str	r3, [r2, #0]
        		GoStraight(90, ExploreVelocity , 0);
 800c31c:	4b46      	ldr	r3, [pc, #280]	; (800c438 <FastestRun+0x468>)
 800c31e:	edd3 7a00 	vldr	s15, [r3]
 800c322:	2000      	movs	r0, #0
 800c324:	eef0 0a67 	vmov.f32	s1, s15
 800c328:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800c43c <FastestRun+0x46c>
 800c32c:	f7fd fcf4 	bl	8009d18 <GoStraight>
        		break;
 800c330:	e04a      	b.n	800c3c8 <FastestRun+0x3f8>
        	case right:
        		//右旋回
        		ChangeLED(1);
 800c332:	2001      	movs	r0, #1
 800c334:	f002 fa84 	bl	800e840 <ChangeLED>
        		Calc = SearchOrFast;
 800c338:	4b3d      	ldr	r3, [pc, #244]	; (800c430 <FastestRun+0x460>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a3d      	ldr	r2, [pc, #244]	; (800c434 <FastestRun+0x464>)
 800c33e:	6013      	str	r3, [r2, #0]
        		TurnRight(turn_mode);
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	4618      	mov	r0, r3
 800c344:	f7fd fe72 	bl	800a02c <TurnRight>
        		break;
 800c348:	e03e      	b.n	800c3c8 <FastestRun+0x3f8>
        	case backright:
        		//Uターンして右旋回
        		//壁の更新の処理を呼ばない
        //		SearchOrFast = 1;
        		Calc = 1;//マップ更新したくないときは1を代入。
 800c34a:	4b3a      	ldr	r3, [pc, #232]	; (800c434 <FastestRun+0x464>)
 800c34c:	2201      	movs	r2, #1
 800c34e:	601a      	str	r2, [r3, #0]
        		GoBack();
 800c350:	f7fd ff06 	bl	800a160 <GoBack>
        		//座標の更新が無いので、壁の判断をしない

        		Calc = SearchOrFast;
 800c354:	4b36      	ldr	r3, [pc, #216]	; (800c430 <FastestRun+0x460>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a36      	ldr	r2, [pc, #216]	; (800c434 <FastestRun+0x464>)
 800c35a:	6013      	str	r3, [r2, #0]
        		TurnRight(turn_mode);
 800c35c:	7bfb      	ldrb	r3, [r7, #15]
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fd fe64 	bl	800a02c <TurnRight>


        		break;
 800c364:	e030      	b.n	800c3c8 <FastestRun+0x3f8>
        	case back:
        		//Uターンして直進.加速できる
        		Calc = 1;//マップ更新したくないときは1を代入。
 800c366:	4b33      	ldr	r3, [pc, #204]	; (800c434 <FastestRun+0x464>)
 800c368:	2201      	movs	r2, #1
 800c36a:	601a      	str	r2, [r3, #0]
        		GoBack();
 800c36c:	f7fd fef8 	bl	800a160 <GoBack>
        		Calc = SearchOrFast;
 800c370:	4b2f      	ldr	r3, [pc, #188]	; (800c430 <FastestRun+0x460>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a2f      	ldr	r2, [pc, #188]	; (800c434 <FastestRun+0x464>)
 800c376:	6013      	str	r3, [r2, #0]
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800c378:	4b2f      	ldr	r3, [pc, #188]	; (800c438 <FastestRun+0x468>)
 800c37a:	ed93 7a00 	vldr	s14, [r3]
 800c37e:	4b30      	ldr	r3, [pc, #192]	; (800c440 <FastestRun+0x470>)
 800c380:	edd3 7a00 	vldr	s15, [r3]
 800c384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c388:	ee17 0a90 	vmov	r0, s15
 800c38c:	eef0 0a47 	vmov.f32	s1, s14
 800c390:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800c43c <FastestRun+0x46c>
 800c394:	f7fd fcc0 	bl	8009d18 <GoStraight>
        		break;
 800c398:	e016      	b.n	800c3c8 <FastestRun+0x3f8>
        	case backleft:
        		//Uターンして左旋回
        		Calc = 1;//マップ更新したくないときは1を代入。
 800c39a:	4b26      	ldr	r3, [pc, #152]	; (800c434 <FastestRun+0x464>)
 800c39c:	2201      	movs	r2, #1
 800c39e:	601a      	str	r2, [r3, #0]
        		GoBack();
 800c3a0:	f7fd fede 	bl	800a160 <GoBack>
        		Calc = SearchOrFast;
 800c3a4:	4b22      	ldr	r3, [pc, #136]	; (800c430 <FastestRun+0x460>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a22      	ldr	r2, [pc, #136]	; (800c434 <FastestRun+0x464>)
 800c3aa:	6013      	str	r3, [r2, #0]
        		TurnLeft(turn_mode);
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fd fe88 	bl	800a0c4 <TurnLeft>
        		break;
 800c3b4:	e008      	b.n	800c3c8 <FastestRun+0x3f8>
        	case left:
        		//左旋回
        		Calc = SearchOrFast;
 800c3b6:	4b1e      	ldr	r3, [pc, #120]	; (800c430 <FastestRun+0x460>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a1e      	ldr	r2, [pc, #120]	; (800c434 <FastestRun+0x464>)
 800c3bc:	6013      	str	r3, [r2, #0]
        		TurnLeft(turn_mode);
 800c3be:	7bfb      	ldrb	r3, [r7, #15]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fd fe7f 	bl	800a0c4 <TurnLeft>
        		break;
 800c3c6:	bf00      	nop
        	}
        cnt++;
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	60bb      	str	r3, [r7, #8]
    while(! ((my_mouse.goal_lesser.x <= my_mouse.next.pos.x && my_mouse.next.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.next.pos.y && my_mouse.next.pos.y <= my_mouse.goal_larger.y)))
 800c3ce:	4b1d      	ldr	r3, [pc, #116]	; (800c444 <FastestRun+0x474>)
 800c3d0:	781a      	ldrb	r2, [r3, #0]
 800c3d2:	4b1c      	ldr	r3, [pc, #112]	; (800c444 <FastestRun+0x474>)
 800c3d4:	7d1b      	ldrb	r3, [r3, #20]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	f63f af22 	bhi.w	800c220 <FastestRun+0x250>
 800c3dc:	4b19      	ldr	r3, [pc, #100]	; (800c444 <FastestRun+0x474>)
 800c3de:	7d1a      	ldrb	r2, [r3, #20]
 800c3e0:	4b18      	ldr	r3, [pc, #96]	; (800c444 <FastestRun+0x474>)
 800c3e2:	789b      	ldrb	r3, [r3, #2]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	f63f af1b 	bhi.w	800c220 <FastestRun+0x250>
 800c3ea:	4b16      	ldr	r3, [pc, #88]	; (800c444 <FastestRun+0x474>)
 800c3ec:	785a      	ldrb	r2, [r3, #1]
 800c3ee:	4b15      	ldr	r3, [pc, #84]	; (800c444 <FastestRun+0x474>)
 800c3f0:	7d5b      	ldrb	r3, [r3, #21]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	f63f af14 	bhi.w	800c220 <FastestRun+0x250>
 800c3f8:	4b12      	ldr	r3, [pc, #72]	; (800c444 <FastestRun+0x474>)
 800c3fa:	7d5a      	ldrb	r2, [r3, #21]
 800c3fc:	4b11      	ldr	r3, [pc, #68]	; (800c444 <FastestRun+0x474>)
 800c3fe:	78db      	ldrb	r3, [r3, #3]
 800c400:	429a      	cmp	r2, r3
 800c402:	f63f af0d 	bhi.w	800c220 <FastestRun+0x250>
//    outputDataToFile(maze);

	//fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode,0x03);

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800c406:	eddf 0a10 	vldr	s1, [pc, #64]	; 800c448 <FastestRun+0x478>
 800c40a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c44c <FastestRun+0x47c>
 800c40e:	f7fd fb93 	bl	8009b38 <Decel>
	//終了合図
	Signal(7);
 800c412:	2007      	movs	r0, #7
 800c414:	f003 f9a6 	bl	800f764 <Signal>

	while(1)
	{
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800c418:	4b0d      	ldr	r3, [pc, #52]	; (800c450 <FastestRun+0x480>)
 800c41a:	895b      	ldrh	r3, [r3, #10]
 800c41c:	461a      	mov	r2, r3
 800c41e:	68b9      	ldr	r1, [r7, #8]
 800c420:	480c      	ldr	r0, [pc, #48]	; (800c454 <FastestRun+0x484>)
 800c422:	f00a f87b 	bl	801651c <iprintf>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800c426:	490c      	ldr	r1, [pc, #48]	; (800c458 <FastestRun+0x488>)
 800c428:	4809      	ldr	r0, [pc, #36]	; (800c450 <FastestRun+0x480>)
 800c42a:	f7fe faaf 	bl	800a98c <printAllWeight>
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800c42e:	e7f3      	b.n	800c418 <FastestRun+0x448>
 800c430:	20008c24 	.word	0x20008c24
 800c434:	20008c28 	.word	0x20008c28
 800c438:	20008aac 	.word	0x20008aac
 800c43c:	42b40000 	.word	0x42b40000
 800c440:	20008994 	.word	0x20008994
 800c444:	20008224 	.word	0x20008224
 800c448:	00000000 	.word	0x00000000
 800c44c:	42340000 	.word	0x42340000
 800c450:	200083d0 	.word	0x200083d0
 800c454:	08019f2c 	.word	0x08019f2c
 800c458:	2000822c 	.word	0x2000822c

0800c45c <Explore>:
	}
}
void Explore()
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b0d4      	sub	sp, #336	; 0x150
 800c460:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800c462:	4b96      	ldr	r3, [pc, #600]	; (800c6bc <Explore+0x260>)
 800c464:	2206      	movs	r2, #6
 800c466:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800c468:	2064      	movs	r0, #100	; 0x64
 800c46a:	f003 fb25 	bl	800fab8 <HAL_Delay>
	int8_t mode=1;
 800c46e:	2301      	movs	r3, #1
 800c470:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
	ModeSelect( 1, 2, &mode);
 800c474:	f507 73a7 	add.w	r3, r7, #334	; 0x14e
 800c478:	461a      	mov	r2, r3
 800c47a:	2102      	movs	r1, #2
 800c47c:	2001      	movs	r0, #1
 800c47e:	f003 f9f1 	bl	800f864 <ModeSelect>
	Signal( mode );
 800c482:	f997 314e 	ldrsb.w	r3, [r7, #334]	; 0x14e
 800c486:	4618      	mov	r0, r3
 800c488:	f003 f96c 	bl	800f764 <Signal>
	HAL_Delay(100);
 800c48c:	2064      	movs	r0, #100	; 0x64
 800c48e:	f003 fb13 	bl	800fab8 <HAL_Delay>

	int8_t mode2=1;
 800c492:	2301      	movs	r3, #1
 800c494:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
	ModeSelect( 1, 4, &mode2);
 800c498:	f207 134d 	addw	r3, r7, #333	; 0x14d
 800c49c:	461a      	mov	r2, r3
 800c49e:	2104      	movs	r1, #4
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	f003 f9df 	bl	800f864 <ModeSelect>
	Signal( mode2 );
 800c4a6:	f997 314d 	ldrsb.w	r3, [r7, #333]	; 0x14d
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f003 f95a 	bl	800f764 <Signal>
	PhotoSwitch();
 800c4b0:	f003 f9ae 	bl	800f810 <PhotoSwitch>
	//printf("test\r\n");
	//HAL_Delay(2000);

	InitExplore();
 800c4b4:	f7ff fa28 	bl	800b908 <InitExplore>

	InitPosition();
 800c4b8:	f7fc fc9e 	bl	8008df8 <InitPosition>

//	printf("旧式の壁初期化\r\n");
//	wall_init();
//
//	printf("色々セット\r\n");
	TotalPulse[RIGHT] = 0;
 800c4bc:	4b80      	ldr	r3, [pc, #512]	; (800c6c0 <Explore+0x264>)
 800c4be:	2200      	movs	r2, #0
 800c4c0:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c4c2:	4b7f      	ldr	r3, [pc, #508]	; (800c6c0 <Explore+0x264>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c4c8:	4b7d      	ldr	r3, [pc, #500]	; (800c6c0 <Explore+0x264>)
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c4ce:	2101      	movs	r1, #1
 800c4d0:	2004      	movs	r0, #4
 800c4d2:	f002 ffa5 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	2005      	movs	r0, #5
 800c4da:	f002 ffa1 	bl	800f420 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c4de:	2100      	movs	r1, #0
 800c4e0:	2001      	movs	r0, #1
 800c4e2:	f002 ff9d 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	2002      	movs	r0, #2
 800c4ea:	f002 ff99 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	2003      	movs	r0, #3
 800c4f2:	f002 ff95 	bl	800f420 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	f002 ff91 	bl	800f420 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

//	ChangeLED(2);

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode = 'T';
 800c4fe:	2354      	movs	r3, #84	; 0x54
 800c500:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	if(mode == 1)
 800c504:	f997 314e 	ldrsb.w	r3, [r7, #334]	; 0x14e
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d106      	bne.n	800c51a <Explore+0xbe>
	{
		turn_mode = 'T';
 800c50c:	2354      	movs	r3, #84	; 0x54
 800c50e:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
		ExploreVelocity=300;
 800c512:	4b6c      	ldr	r3, [pc, #432]	; (800c6c4 <Explore+0x268>)
 800c514:	4a6c      	ldr	r2, [pc, #432]	; (800c6c8 <Explore+0x26c>)
 800c516:	601a      	str	r2, [r3, #0]
 800c518:	e006      	b.n	800c528 <Explore+0xcc>
	}
	else if(mode == 2)
 800c51a:	f997 314e 	ldrsb.w	r3, [r7, #334]	; 0x14e
 800c51e:	2b02      	cmp	r3, #2
 800c520:	d102      	bne.n	800c528 <Explore+0xcc>
	{
		turn_mode = 'S';
 800c522:	2353      	movs	r3, #83	; 0x53
 800c524:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	}

	switch(mode2)
 800c528:	f997 314d 	ldrsb.w	r3, [r7, #333]	; 0x14d
 800c52c:	3b01      	subs	r3, #1
 800c52e:	2b03      	cmp	r3, #3
 800c530:	d865      	bhi.n	800c5fe <Explore+0x1a2>
 800c532:	a201      	add	r2, pc, #4	; (adr r2, 800c538 <Explore+0xdc>)
 800c534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c538:	0800c549 	.word	0x0800c549
 800c53c:	0800c575 	.word	0x0800c575
 800c540:	0800c5a3 	.word	0x0800c5a3
 800c544:	0800c5d3 	.word	0x0800c5d3
	{
	case 1:
		ExploreVelocity=90;
 800c548:	4b5e      	ldr	r3, [pc, #376]	; (800c6c4 <Explore+0x268>)
 800c54a:	4a60      	ldr	r2, [pc, #384]	; (800c6cc <Explore+0x270>)
 800c54c:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 9;
 800c54e:	4b60      	ldr	r3, [pc, #384]	; (800c6d0 <Explore+0x274>)
 800c550:	4a60      	ldr	r2, [pc, #384]	; (800c6d4 <Explore+0x278>)
 800c552:	601a      	str	r2, [r3, #0]
		Sla.Fol = 20;
 800c554:	4b5e      	ldr	r3, [pc, #376]	; (800c6d0 <Explore+0x274>)
 800c556:	4a60      	ldr	r2, [pc, #384]	; (800c6d8 <Explore+0x27c>)
 800c558:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800c55a:	4b5d      	ldr	r3, [pc, #372]	; (800c6d0 <Explore+0x274>)
 800c55c:	4a5f      	ldr	r2, [pc, #380]	; (800c6dc <Explore+0x280>)
 800c55e:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c560:	4b5b      	ldr	r3, [pc, #364]	; (800c6d0 <Explore+0x274>)
 800c562:	4a5f      	ldr	r2, [pc, #380]	; (800c6e0 <Explore+0x284>)
 800c564:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c566:	4b5a      	ldr	r3, [pc, #360]	; (800c6d0 <Explore+0x274>)
 800c568:	4a5e      	ldr	r2, [pc, #376]	; (800c6e4 <Explore+0x288>)
 800c56a:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c56c:	4b58      	ldr	r3, [pc, #352]	; (800c6d0 <Explore+0x274>)
 800c56e:	4a57      	ldr	r2, [pc, #348]	; (800c6cc <Explore+0x270>)
 800c570:	619a      	str	r2, [r3, #24]
//		Sla.Fol = 12;
//		Sla.Alalpha = 0.0007;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		break;
 800c572:	e044      	b.n	800c5fe <Explore+0x1a2>
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;



		ExploreVelocity=180;
 800c574:	4b53      	ldr	r3, [pc, #332]	; (800c6c4 <Explore+0x268>)
 800c576:	4a5c      	ldr	r2, [pc, #368]	; (800c6e8 <Explore+0x28c>)
 800c578:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800c57a:	4b55      	ldr	r3, [pc, #340]	; (800c6d0 <Explore+0x274>)
 800c57c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c580:	601a      	str	r2, [r3, #0]
		Sla.Fol = 16.5;
 800c582:	4b53      	ldr	r3, [pc, #332]	; (800c6d0 <Explore+0x274>)
 800c584:	4a59      	ldr	r2, [pc, #356]	; (800c6ec <Explore+0x290>)
 800c586:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.043;
 800c588:	4b51      	ldr	r3, [pc, #324]	; (800c6d0 <Explore+0x274>)
 800c58a:	4a59      	ldr	r2, [pc, #356]	; (800c6f0 <Explore+0x294>)
 800c58c:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c58e:	4b50      	ldr	r3, [pc, #320]	; (800c6d0 <Explore+0x274>)
 800c590:	4a53      	ldr	r2, [pc, #332]	; (800c6e0 <Explore+0x284>)
 800c592:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c594:	4b4e      	ldr	r3, [pc, #312]	; (800c6d0 <Explore+0x274>)
 800c596:	4a53      	ldr	r2, [pc, #332]	; (800c6e4 <Explore+0x288>)
 800c598:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c59a:	4b4d      	ldr	r3, [pc, #308]	; (800c6d0 <Explore+0x274>)
 800c59c:	4a4b      	ldr	r2, [pc, #300]	; (800c6cc <Explore+0x270>)
 800c59e:	619a      	str	r2, [r3, #24]
		break;
 800c5a0:	e02d      	b.n	800c5fe <Explore+0x1a2>
	case 3:
		ExploreVelocity=240;
 800c5a2:	4b48      	ldr	r3, [pc, #288]	; (800c6c4 <Explore+0x268>)
 800c5a4:	4a53      	ldr	r2, [pc, #332]	; (800c6f4 <Explore+0x298>)
 800c5a6:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800c5a8:	4b49      	ldr	r3, [pc, #292]	; (800c6d0 <Explore+0x274>)
 800c5aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c5ae:	601a      	str	r2, [r3, #0]
		Sla.Fol = 16;
 800c5b0:	4b47      	ldr	r3, [pc, #284]	; (800c6d0 <Explore+0x274>)
 800c5b2:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800c5b6:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.078;
 800c5b8:	4b45      	ldr	r3, [pc, #276]	; (800c6d0 <Explore+0x274>)
 800c5ba:	4a4f      	ldr	r2, [pc, #316]	; (800c6f8 <Explore+0x29c>)
 800c5bc:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c5be:	4b44      	ldr	r3, [pc, #272]	; (800c6d0 <Explore+0x274>)
 800c5c0:	4a47      	ldr	r2, [pc, #284]	; (800c6e0 <Explore+0x284>)
 800c5c2:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c5c4:	4b42      	ldr	r3, [pc, #264]	; (800c6d0 <Explore+0x274>)
 800c5c6:	4a47      	ldr	r2, [pc, #284]	; (800c6e4 <Explore+0x288>)
 800c5c8:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c5ca:	4b41      	ldr	r3, [pc, #260]	; (800c6d0 <Explore+0x274>)
 800c5cc:	4a3f      	ldr	r2, [pc, #252]	; (800c6cc <Explore+0x270>)
 800c5ce:	619a      	str	r2, [r3, #24]
		break;
 800c5d0:	e015      	b.n	800c5fe <Explore+0x1a2>
	case 4:
		ExploreVelocity=300;
 800c5d2:	4b3c      	ldr	r3, [pc, #240]	; (800c6c4 <Explore+0x268>)
 800c5d4:	4a3c      	ldr	r2, [pc, #240]	; (800c6c8 <Explore+0x26c>)
 800c5d6:	601a      	str	r2, [r3, #0]
		Sla.Pre = 3;
 800c5d8:	4b3d      	ldr	r3, [pc, #244]	; (800c6d0 <Explore+0x274>)
 800c5da:	4a48      	ldr	r2, [pc, #288]	; (800c6fc <Explore+0x2a0>)
 800c5dc:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800c5de:	4b3c      	ldr	r3, [pc, #240]	; (800c6d0 <Explore+0x274>)
 800c5e0:	4a47      	ldr	r2, [pc, #284]	; (800c700 <Explore+0x2a4>)
 800c5e2:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800c5e4:	4b3a      	ldr	r3, [pc, #232]	; (800c6d0 <Explore+0x274>)
 800c5e6:	4a47      	ldr	r2, [pc, #284]	; (800c704 <Explore+0x2a8>)
 800c5e8:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800c5ea:	4b39      	ldr	r3, [pc, #228]	; (800c6d0 <Explore+0x274>)
 800c5ec:	4a3c      	ldr	r2, [pc, #240]	; (800c6e0 <Explore+0x284>)
 800c5ee:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800c5f0:	4b37      	ldr	r3, [pc, #220]	; (800c6d0 <Explore+0x274>)
 800c5f2:	4a3c      	ldr	r2, [pc, #240]	; (800c6e4 <Explore+0x288>)
 800c5f4:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800c5f6:	4b36      	ldr	r3, [pc, #216]	; (800c6d0 <Explore+0x274>)
 800c5f8:	4a34      	ldr	r2, [pc, #208]	; (800c6cc <Explore+0x270>)
 800c5fa:	619a      	str	r2, [r3, #24]
		//		//未

		break;
 800c5fc:	bf00      	nop
	}
	initSlalomParam();
 800c5fe:	f7ff fca7 	bl	800bf50 <initSlalomParam>
//			HAL_Delay(1000);
//		}
//	Pos.TargetX = X_GOAL_LESSER;
//	Pos.TargetY = Y_GOAL_LESSER;
//	goal_edge_num = two;
	VelocityMax = false;
 800c602:	4b41      	ldr	r3, [pc, #260]	; (800c708 <Explore+0x2ac>)
 800c604:	2200      	movs	r2, #0
 800c606:	701a      	strb	r2, [r3, #0]
	SearchOrFast = 0;
 800c608:	4b40      	ldr	r3, [pc, #256]	; (800c70c <Explore+0x2b0>)
 800c60a:	2200      	movs	r2, #0
 800c60c:	601a      	str	r2, [r3, #0]
	Calc = 0;
 800c60e:	4b40      	ldr	r3, [pc, #256]	; (800c710 <Explore+0x2b4>)
 800c610:	2200      	movs	r2, #0
 800c612:	601a      	str	r2, [r3, #0]

//	PhotoSwitch();
	Control_Mode=A_VELO_PID; //初期値が0. 減速時に
 800c614:	4b3f      	ldr	r3, [pc, #252]	; (800c714 <Explore+0x2b8>)
 800c616:	2200      	movs	r2, #0
 800c618:	601a      	str	r2, [r3, #0]
//	Pos.Car = north;
//	Pos.NextX = Pos.X;
//	Pos.NextY = Pos.Y + 1;
//	Pos.NextCar = north;

	initSearchData(&my_map, &my_mouse);
 800c61a:	493f      	ldr	r1, [pc, #252]	; (800c718 <Explore+0x2bc>)
 800c61c:	483f      	ldr	r0, [pc, #252]	; (800c71c <Explore+0x2c0>)
 800c61e:	f001 fa77 	bl	800db10 <initSearchData>
//	printGoal(&my_mouse);
//	printAllWeight(&my_map, &(my_mouse.goal_lesser)); //この時点で右上が0スタート.　合ってる
	dbc = 1;
 800c622:	4b3f      	ldr	r3, [pc, #252]	; (800c720 <Explore+0x2c4>)
 800c624:	2201      	movs	r2, #1
 800c626:	601a      	str	r2, [r3, #0]
	Accel(61.5, ExploreVelocity);
 800c628:	4b26      	ldr	r3, [pc, #152]	; (800c6c4 <Explore+0x268>)
 800c62a:	edd3 7a00 	vldr	s15, [r3]
 800c62e:	eef0 0a67 	vmov.f32	s1, s15
 800c632:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800c724 <Explore+0x2c8>
 800c636:	f7fd f9cb 	bl	80099d0 <Accel>
//	{
//		ChangeLED(7);
//		TargetVelocity[BODY] = 0;
//	}

	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c63a:	e006      	b.n	800c64a <Explore+0x1ee>

//		//ChangeLED(Pos.Car);
//		KyushinJudge();
//		SelectAction(turn_mode);
//		shiftPos();
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800c63c:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 800c640:	461a      	mov	r2, r3
 800c642:	4935      	ldr	r1, [pc, #212]	; (800c718 <Explore+0x2bc>)
 800c644:	4835      	ldr	r0, [pc, #212]	; (800c71c <Explore+0x2c0>)
 800c646:	f001 fb6d 	bl	800dd24 <getNextDirection>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800c64a:	4b33      	ldr	r3, [pc, #204]	; (800c718 <Explore+0x2bc>)
 800c64c:	781a      	ldrb	r2, [r3, #0]
 800c64e:	4b32      	ldr	r3, [pc, #200]	; (800c718 <Explore+0x2bc>)
 800c650:	7a1b      	ldrb	r3, [r3, #8]
 800c652:	429a      	cmp	r2, r3
 800c654:	d8f2      	bhi.n	800c63c <Explore+0x1e0>
 800c656:	4b30      	ldr	r3, [pc, #192]	; (800c718 <Explore+0x2bc>)
 800c658:	7a1a      	ldrb	r2, [r3, #8]
 800c65a:	4b2f      	ldr	r3, [pc, #188]	; (800c718 <Explore+0x2bc>)
 800c65c:	789b      	ldrb	r3, [r3, #2]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d8ec      	bhi.n	800c63c <Explore+0x1e0>
 800c662:	4b2d      	ldr	r3, [pc, #180]	; (800c718 <Explore+0x2bc>)
 800c664:	785a      	ldrb	r2, [r3, #1]
 800c666:	4b2c      	ldr	r3, [pc, #176]	; (800c718 <Explore+0x2bc>)
 800c668:	7a5b      	ldrb	r3, [r3, #9]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d8e6      	bhi.n	800c63c <Explore+0x1e0>
 800c66e:	4b2a      	ldr	r3, [pc, #168]	; (800c718 <Explore+0x2bc>)
 800c670:	7a5a      	ldrb	r2, [r3, #9]
 800c672:	4b29      	ldr	r3, [pc, #164]	; (800c718 <Explore+0x2bc>)
 800c674:	78db      	ldrb	r3, [r3, #3]
 800c676:	429a      	cmp	r2, r3
 800c678:	d8e0      	bhi.n	800c63c <Explore+0x1e0>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800c67a:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800c728 <Explore+0x2cc>
 800c67e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800c72c <Explore+0x2d0>
 800c682:	f7fd fa59 	bl	8009b38 <Decel>
	WaitStopAndReset();//これがないとガクンとなる.
 800c686:	f7fc fca7 	bl	8008fd8 <WaitStopAndReset>
	shiftState(&my_mouse);
 800c68a:	4823      	ldr	r0, [pc, #140]	; (800c718 <Explore+0x2bc>)
 800c68c:	f7ff f930 	bl	800b8f0 <shiftState>
//		printf("total L: %d, total R: %d\r\n",TotalPulse[LEFT],TotalPulse[RIGHT]);
//		HAL_Delay(1000);


	//flashのクリア。
	Flash_clear_sector1();
 800c690:	f001 fdee 	bl	800e270 <Flash_clear_sector1>
	//マップ書き込み
	flashStoreNodes();
 800c694:	f7fe f822 	bl	800a6dc <flashStoreNodes>
	//完了の合図
	Signal(7);
 800c698:	2007      	movs	r0, #7
 800c69a:	f003 f863 	bl	800f764 <Signal>


while(1)
{
	//迷路データの出力
	printAllNodeExistence(&my_map);
 800c69e:	481f      	ldr	r0, [pc, #124]	; (800c71c <Explore+0x2c0>)
 800c6a0:	f7fe fabe 	bl	800ac20 <printAllNodeExistence>
	//printAllNode(&my_map); //drawを読み出す
	printMatrix16ValueFromNode(&my_map);
 800c6a4:	481d      	ldr	r0, [pc, #116]	; (800c71c <Explore+0x2c0>)
 800c6a6:	f7fe fafd 	bl	800aca4 <printMatrix16ValueFromNode>
	printAllWeight(&my_map, &(my_mouse.now.node->pos) );
 800c6aa:	4b1b      	ldr	r3, [pc, #108]	; (800c718 <Explore+0x2bc>)
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	3306      	adds	r3, #6
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	481a      	ldr	r0, [pc, #104]	; (800c71c <Explore+0x2c0>)
 800c6b4:	f7fe f96a 	bl	800a98c <printAllWeight>
	printAllNodeExistence(&my_map);
 800c6b8:	e7f1      	b.n	800c69e <Explore+0x242>
 800c6ba:	bf00      	nop
 800c6bc:	20008974 	.word	0x20008974
 800c6c0:	200089b8 	.word	0x200089b8
 800c6c4:	20008aac 	.word	0x20008aac
 800c6c8:	43960000 	.word	0x43960000
 800c6cc:	42b40000 	.word	0x42b40000
 800c6d0:	200089d0 	.word	0x200089d0
 800c6d4:	41100000 	.word	0x41100000
 800c6d8:	41a00000 	.word	0x41a00000
 800c6dc:	3c656042 	.word	0x3c656042
 800c6e0:	41f00000 	.word	0x41f00000
 800c6e4:	42700000 	.word	0x42700000
 800c6e8:	43340000 	.word	0x43340000
 800c6ec:	41840000 	.word	0x41840000
 800c6f0:	3d3020c5 	.word	0x3d3020c5
 800c6f4:	43700000 	.word	0x43700000
 800c6f8:	3d9fbe77 	.word	0x3d9fbe77
 800c6fc:	40400000 	.word	0x40400000
 800c700:	40a00000 	.word	0x40a00000
 800c704:	3def9db2 	.word	0x3def9db2
 800c708:	20008aaa 	.word	0x20008aaa
 800c70c:	20008c24 	.word	0x20008c24
 800c710:	20008c28 	.word	0x20008c28
 800c714:	2000897c 	.word	0x2000897c
 800c718:	20008224 	.word	0x20008224
 800c71c:	200083d0 	.word	0x200083d0
 800c720:	20000228 	.word	0x20000228
 800c724:	42760000 	.word	0x42760000
 800c728:	00000000 	.word	0x00000000
 800c72c:	42340000 	.word	0x42340000

0800c730 <TestIMU>:
	//合っているか確認する
	printAllNodeExistence(&my_map);
}

void TestIMU()
{
 800c730:	b590      	push	{r4, r7, lr}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
	IT_mode = IMU_TEST;
 800c736:	4b38      	ldr	r3, [pc, #224]	; (800c818 <TestIMU+0xe8>)
 800c738:	2205      	movs	r2, #5
 800c73a:	601a      	str	r2, [r3, #0]

	uint8_t imu_check;
		imu_check = IMU_init();
 800c73c:	f001 ffa8 	bl	800e690 <IMU_init>
 800c740:	4603      	mov	r3, r0
 800c742:	70fb      	strb	r3, [r7, #3]
		printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c744:	78fb      	ldrb	r3, [r7, #3]
 800c746:	4619      	mov	r1, r3
 800c748:	4834      	ldr	r0, [pc, #208]	; (800c81c <TestIMU+0xec>)
 800c74a:	f009 fee7 	bl	801651c <iprintf>
	#if 1 //IMUから値が来なくなる現象の対策
		imu_check =IMU_init();
 800c74e:	f001 ff9f 	bl	800e690 <IMU_init>
 800c752:	4603      	mov	r3, r0
 800c754:	70fb      	strb	r3, [r7, #3]
		printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c756:	78fb      	ldrb	r3, [r7, #3]
 800c758:	4619      	mov	r1, r3
 800c75a:	4830      	ldr	r0, [pc, #192]	; (800c81c <TestIMU+0xec>)
 800c75c:	f009 fede 	bl	801651c <iprintf>
	#endif
		HAL_Delay(100);
 800c760:	2064      	movs	r0, #100	; 0x64
 800c762:	f003 f9a9 	bl	800fab8 <HAL_Delay>

		ZGyro = ReadIMU(0x37, 0x38);
 800c766:	2138      	movs	r1, #56	; 0x38
 800c768:	2037      	movs	r0, #55	; 0x37
 800c76a:	f001 fdff 	bl	800e36c <ReadIMU>
 800c76e:	eef0 7a40 	vmov.f32	s15, s0
 800c772:	4b2b      	ldr	r3, [pc, #172]	; (800c820 <TestIMU+0xf0>)
 800c774:	edc3 7a00 	vstr	s15, [r3]
		printf("gyro : %f\r\n",ZGyro);
 800c778:	4b29      	ldr	r3, [pc, #164]	; (800c820 <TestIMU+0xf0>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7fb fe1b 	bl	80083b8 <__aeabi_f2d>
 800c782:	4603      	mov	r3, r0
 800c784:	460c      	mov	r4, r1
 800c786:	461a      	mov	r2, r3
 800c788:	4623      	mov	r3, r4
 800c78a:	4826      	ldr	r0, [pc, #152]	; (800c824 <TestIMU+0xf4>)
 800c78c:	f009 fec6 	bl	801651c <iprintf>

//		printf("%d, %hd, %f, %f, %f\r\n", m,ZGFilterd,  ZGyro, AngularV, Angle);

		timer1 = 0;
 800c790:	4b25      	ldr	r3, [pc, #148]	; (800c828 <TestIMU+0xf8>)
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]
		t = 1;
 800c796:	4b25      	ldr	r3, [pc, #148]	; (800c82c <TestIMU+0xfc>)
 800c798:	2201      	movs	r2, #1
 800c79a:	601a      	str	r2, [r3, #0]
		//割り込みを有効化

		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800c79c:	4b22      	ldr	r3, [pc, #136]	; (800c828 <TestIMU+0xf8>)
 800c79e:	681c      	ldr	r4, [r3, #0]
 800c7a0:	4b23      	ldr	r3, [pc, #140]	; (800c830 <TestIMU+0x100>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fb fe07 	bl	80083b8 <__aeabi_f2d>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4820      	ldr	r0, [pc, #128]	; (800c834 <TestIMU+0x104>)
 800c7b2:	f009 feb3 	bl	801651c <iprintf>
		HAL_TIM_Base_Start_IT(&htim1);
 800c7b6:	4820      	ldr	r0, [pc, #128]	; (800c838 <TestIMU+0x108>)
 800c7b8:	f006 f865 	bl	8012886 <HAL_TIM_Base_Start_IT>
		while(t == 1) //10s
 800c7bc:	e002      	b.n	800c7c4 <TestIMU+0x94>
		{
			printf("\r\n");
 800c7be:	481f      	ldr	r0, [pc, #124]	; (800c83c <TestIMU+0x10c>)
 800c7c0:	f009 ff34 	bl	801662c <puts>
		while(t == 1) //10s
 800c7c4:	4b19      	ldr	r3, [pc, #100]	; (800c82c <TestIMU+0xfc>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d0f8      	beq.n	800c7be <TestIMU+0x8e>
		}

//		ag = Angle;
		t = 0;
 800c7cc:	4b17      	ldr	r3, [pc, #92]	; (800c82c <TestIMU+0xfc>)
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 800c7d2:	4819      	ldr	r0, [pc, #100]	; (800c838 <TestIMU+0x108>)
 800c7d4:	f006 f87b 	bl	80128ce <HAL_TIM_Base_Stop_IT>
		HAL_Delay(1000);
 800c7d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c7dc:	f003 f96c 	bl	800fab8 <HAL_Delay>



			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	607b      	str	r3, [r7, #4]
 800c7e4:	e012      	b.n	800c80c <TestIMU+0xdc>
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800c7e6:	4a16      	ldr	r2, [pc, #88]	; (800c840 <TestIMU+0x110>)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4413      	add	r3, r2
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fb fde1 	bl	80083b8 <__aeabi_f2d>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	4623      	mov	r3, r4
 800c7fe:	6879      	ldr	r1, [r7, #4]
 800c800:	4810      	ldr	r0, [pc, #64]	; (800c844 <TestIMU+0x114>)
 800c802:	f009 fe8b 	bl	801651c <iprintf>
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3301      	adds	r3, #1
 800c80a:	607b      	str	r3, [r7, #4]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f241 3287 	movw	r2, #4999	; 0x1387
 800c812:	4293      	cmp	r3, r2
 800c814:	dde7      	ble.n	800c7e6 <TestIMU+0xb6>
			while(1)
 800c816:	e7fe      	b.n	800c816 <TestIMU+0xe6>
 800c818:	20008974 	.word	0x20008974
 800c81c:	08019e98 	.word	0x08019e98
 800c820:	20007fe8 	.word	0x20007fe8
 800c824:	08019eb4 	.word	0x08019eb4
 800c828:	20008980 	.word	0x20008980
 800c82c:	20008970 	.word	0x20008970
 800c830:	20007f38 	.word	0x20007f38
 800c834:	08019f80 	.word	0x08019f80
 800c838:	20008e74 	.word	0x20008e74
 800c83c:	08019f9c 	.word	0x08019f9c
 800c840:	2000022c 	.word	0x2000022c
 800c844:	08019fa0 	.word	0x08019fa0

0800c848 <__io_putchar>:
	#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int f getc(FILE* f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c850:	1d39      	adds	r1, r7, #4
 800c852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c856:	2201      	movs	r2, #1
 800c858:	4803      	ldr	r0, [pc, #12]	; (800c868 <__io_putchar+0x20>)
 800c85a:	f007 fbcf 	bl	8013ffc <HAL_UART_Transmit>
	return ch;
 800c85e:	687b      	ldr	r3, [r7, #4]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	20008dd4 	.word	0x20008dd4

0800c86c <__io_getchar>:
int __io_getchar(void) {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
HAL_StatusTypeDef Status = HAL_BUSY;
 800c872:	2302      	movs	r3, #2
 800c874:	71fb      	strb	r3, [r7, #7]
uint8_t Data;

while(Status != HAL_OK)
 800c876:	e007      	b.n	800c888 <__io_getchar+0x1c>
{
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c878:	1db9      	adds	r1, r7, #6
 800c87a:	230a      	movs	r3, #10
 800c87c:	2201      	movs	r2, #1
 800c87e:	4806      	ldr	r0, [pc, #24]	; (800c898 <__io_getchar+0x2c>)
 800c880:	f007 fc55 	bl	801412e <HAL_UART_Receive>
 800c884:	4603      	mov	r3, r0
 800c886:	71fb      	strb	r3, [r7, #7]
while(Status != HAL_OK)
 800c888:	79fb      	ldrb	r3, [r7, #7]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1f4      	bne.n	800c878 <__io_getchar+0xc>
//{
//	return 0;
//	break;
//}
}
return(Data);
 800c88e:	79bb      	ldrb	r3, [r7, #6]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	20008dd4 	.word	0x20008dd4

0800c89c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c8a2:	f003 f897 	bl	800f9d4 <HAL_Init>

  /* USER CODE BEGIN Init */

  //バッ?��?リチェ?��?ク
  MX_GPIO_Init();
 800c8a6:	f000 fcb7 	bl	800d218 <MX_GPIO_Init>
  MX_DMA_Init();
 800c8aa:	f000 fc8d 	bl	800d1c8 <MX_DMA_Init>
  MX_ADC1_Init();
 800c8ae:	f000 f8d1 	bl	800ca54 <MX_ADC1_Init>
  MX_ADC2_Init();
 800c8b2:	f000 f93d 	bl	800cb30 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800c8b6:	f000 fc5d 	bl	800d174 <MX_USART1_UART_Init>

	ADCStart();
 800c8ba:	f001 fbb3 	bl	800e024 <ADCStart>
	MX_TIM3_Init();
 800c8be:	f000 fa93 	bl	800cde8 <MX_TIM3_Init>
	BatteryCheck( (int)adc1[2] );
 800c8c2:	4b2e      	ldr	r3, [pc, #184]	; (800c97c <main+0xe0>)
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f002 ff6c 	bl	800f7a4 <BatteryCheck>
	ADCStop();
 800c8cc:	f001 fbca 	bl	800e064 <ADCStop>

	int8_t startup_mode;
	ModeSelect(0, 7, &startup_mode);
 800c8d0:	1dfb      	adds	r3, r7, #7
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	2107      	movs	r1, #7
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	f002 ffc4 	bl	800f864 <ModeSelect>
	Signal( startup_mode );
 800c8dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f002 ff3f 	bl	800f764 <Signal>
  //MAX45mAでモード選択できる

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c8e6:	f000 f84b 	bl	800c980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c8ea:	f000 fc95 	bl	800d218 <MX_GPIO_Init>
  MX_DMA_Init();
 800c8ee:	f000 fc6b 	bl	800d1c8 <MX_DMA_Init>
  MX_ADC1_Init();
 800c8f2:	f000 f8af 	bl	800ca54 <MX_ADC1_Init>
  MX_ADC2_Init();
 800c8f6:	f000 f91b 	bl	800cb30 <MX_ADC2_Init>
  MX_TIM3_Init();
 800c8fa:	f000 fa75 	bl	800cde8 <MX_TIM3_Init>
  MX_TIM2_Init();
 800c8fe:	f000 f9fd 	bl	800ccfc <MX_TIM2_Init>
  MX_SPI3_Init();
 800c902:	f000 f975 	bl	800cbf0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800c906:	f000 fc35 	bl	800d174 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800c90a:	f000 fb15 	bl	800cf38 <MX_TIM5_Init>
  MX_TIM4_Init();
 800c90e:	f000 fabf 	bl	800ce90 <MX_TIM4_Init>
  MX_TIM8_Init();
 800c912:	f000 fb87 	bl	800d024 <MX_TIM8_Init>
  MX_TIM1_Init();
 800c916:	f000 f9a1 	bl	800cc5c <MX_TIM1_Init>



  while (1)
  {
	  switch( startup_mode )
 800c91a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c91e:	2b07      	cmp	r3, #7
 800c920:	d82a      	bhi.n	800c978 <main+0xdc>
 800c922:	a201      	add	r2, pc, #4	; (adr r2, 800c928 <main+0x8c>)
 800c924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c928:	0800c949 	.word	0x0800c949
 800c92c:	0800c94f 	.word	0x0800c94f
 800c930:	0800c955 	.word	0x0800c955
 800c934:	0800c95b 	.word	0x0800c95b
 800c938:	0800c961 	.word	0x0800c961
 800c93c:	0800c967 	.word	0x0800c967
 800c940:	0800c96d 	.word	0x0800c96d
 800c944:	0800c973 	.word	0x0800c973
	  {
	  case PARAMETERSETTING:

		  ParameterSetting();
 800c948:	f7ff f9ee 	bl	800bd28 <ParameterSetting>
		//wall_flash_print();
		  break;
 800c94c:	e015      	b.n	800c97a <main+0xde>
	  case 1:
		  GainTestRWall();
 800c94e:	f7ff f9f3 	bl	800bd38 <GainTestRWall>
		  break;
 800c952:	e012      	b.n	800c97a <main+0xde>
	  case GAINTEST:
		  GainTestDWall();
 800c954:	f7ff fa2c 	bl	800bdb0 <GainTestDWall>
		  break;
 800c958:	e00f      	b.n	800c97a <main+0xde>
	  case DEBUGGER:
		  Debug();
 800c95a:	f7ff f957 	bl	800bc0c <Debug>
		  break;
 800c95e:	e00c      	b.n	800c97a <main+0xde>
//		  FlashReadTest();
//		  printf("読み込み終了\r\n");
//		  while(1){
//
//		  		  }
		  FastestRun();
 800c960:	f7ff fb36 	bl	800bfd0 <FastestRun>
		  break;
 800c964:	e009      	b.n	800c97a <main+0xde>
	  case IMU_TEST:
		  TestIMU();
 800c966:	f7ff fee3 	bl	800c730 <TestIMU>
//		  GainTestAVelo();
		  break;
 800c96a:	e006      	b.n	800c97a <main+0xde>
//		  FlashWriteTest();
//		  printf("書き込み終了\r\n");
//		  while(1){
//
//		  }
		  Explore();
 800c96c:	f7ff fd76 	bl	800c45c <Explore>
		  break;
 800c970:	e003      	b.n	800c97a <main+0xde>
	  case WRITINGFREE:
		  WritingFree();
 800c972:	f7ff fa87 	bl	800be84 <WritingFree>
		  break;
 800c976:	e000      	b.n	800c97a <main+0xde>
	  default :
		  break;
 800c978:	bf00      	nop
	  switch( startup_mode )
 800c97a:	e7ce      	b.n	800c91a <main+0x7e>
 800c97c:	20007fd0 	.word	0x20007fd0

0800c980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b094      	sub	sp, #80	; 0x50
 800c984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c986:	f107 0320 	add.w	r3, r7, #32
 800c98a:	2230      	movs	r2, #48	; 0x30
 800c98c:	2100      	movs	r1, #0
 800c98e:	4618      	mov	r0, r3
 800c990:	f008 fac5 	bl	8014f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c994:	f107 030c 	add.w	r3, r7, #12
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	605a      	str	r2, [r3, #4]
 800c99e:	609a      	str	r2, [r3, #8]
 800c9a0:	60da      	str	r2, [r3, #12]
 800c9a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	60bb      	str	r3, [r7, #8]
 800c9a8:	4b28      	ldr	r3, [pc, #160]	; (800ca4c <SystemClock_Config+0xcc>)
 800c9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ac:	4a27      	ldr	r2, [pc, #156]	; (800ca4c <SystemClock_Config+0xcc>)
 800c9ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9b2:	6413      	str	r3, [r2, #64]	; 0x40
 800c9b4:	4b25      	ldr	r3, [pc, #148]	; (800ca4c <SystemClock_Config+0xcc>)
 800c9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9bc:	60bb      	str	r3, [r7, #8]
 800c9be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	607b      	str	r3, [r7, #4]
 800c9c4:	4b22      	ldr	r3, [pc, #136]	; (800ca50 <SystemClock_Config+0xd0>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a21      	ldr	r2, [pc, #132]	; (800ca50 <SystemClock_Config+0xd0>)
 800c9ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c9ce:	6013      	str	r3, [r2, #0]
 800c9d0:	4b1f      	ldr	r3, [pc, #124]	; (800ca50 <SystemClock_Config+0xd0>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9d8:	607b      	str	r3, [r7, #4]
 800c9da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c9e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c9e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c9ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c9f0:	2304      	movs	r3, #4
 800c9f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c9f4:	23a8      	movs	r3, #168	; 0xa8
 800c9f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c9fc:	2304      	movs	r3, #4
 800c9fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ca00:	f107 0320 	add.w	r3, r7, #32
 800ca04:	4618      	mov	r0, r3
 800ca06:	f004 fd5d 	bl	80114c4 <HAL_RCC_OscConfig>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800ca10:	f000 fcc8 	bl	800d3a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ca14:	230f      	movs	r3, #15
 800ca16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ca18:	2302      	movs	r3, #2
 800ca1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ca20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ca24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ca26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ca2c:	f107 030c 	add.w	r3, r7, #12
 800ca30:	2105      	movs	r1, #5
 800ca32:	4618      	mov	r0, r3
 800ca34:	f004 ffb6 	bl	80119a4 <HAL_RCC_ClockConfig>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d001      	beq.n	800ca42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800ca3e:	f000 fcb1 	bl	800d3a4 <Error_Handler>
  }
}
 800ca42:	bf00      	nop
 800ca44:	3750      	adds	r7, #80	; 0x50
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	40023800 	.word	0x40023800
 800ca50:	40007000 	.word	0x40007000

0800ca54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ca5a:	463b      	mov	r3, r7
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	601a      	str	r2, [r3, #0]
 800ca60:	605a      	str	r2, [r3, #4]
 800ca62:	609a      	str	r2, [r3, #8]
 800ca64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ca66:	4b2f      	ldr	r3, [pc, #188]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800ca68:	4a2f      	ldr	r2, [pc, #188]	; (800cb28 <MX_ADC1_Init+0xd4>)
 800ca6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ca6c:	4b2d      	ldr	r3, [pc, #180]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800ca6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ca72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ca74:	4b2b      	ldr	r3, [pc, #172]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800ca7a:	4b2a      	ldr	r3, [pc, #168]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800ca80:	4b28      	ldr	r3, [pc, #160]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800ca82:	2201      	movs	r2, #1
 800ca84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ca86:	4b27      	ldr	r3, [pc, #156]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ca8e:	4b25      	ldr	r3, [pc, #148]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ca94:	4b23      	ldr	r3, [pc, #140]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800ca96:	4a25      	ldr	r2, [pc, #148]	; (800cb2c <MX_ADC1_Init+0xd8>)
 800ca98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ca9a:	4b22      	ldr	r3, [pc, #136]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800caa0:	4b20      	ldr	r3, [pc, #128]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800caa2:	2203      	movs	r2, #3
 800caa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800caa6:	4b1f      	ldr	r3, [pc, #124]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800caa8:	2201      	movs	r2, #1
 800caaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800caae:	4b1d      	ldr	r3, [pc, #116]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800cab0:	2201      	movs	r2, #1
 800cab2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cab4:	481b      	ldr	r0, [pc, #108]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800cab6:	f003 f821 	bl	800fafc <HAL_ADC_Init>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800cac0:	f000 fc70 	bl	800d3a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800cac4:	230a      	movs	r3, #10
 800cac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800cac8:	2301      	movs	r3, #1
 800caca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800cacc:	2303      	movs	r3, #3
 800cace:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cad0:	463b      	mov	r3, r7
 800cad2:	4619      	mov	r1, r3
 800cad4:	4813      	ldr	r0, [pc, #76]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800cad6:	f003 f9af 	bl	800fe38 <HAL_ADC_ConfigChannel>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800cae0:	f000 fc60 	bl	800d3a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800cae4:	230e      	movs	r3, #14
 800cae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800cae8:	2302      	movs	r3, #2
 800caea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800caec:	463b      	mov	r3, r7
 800caee:	4619      	mov	r1, r3
 800caf0:	480c      	ldr	r0, [pc, #48]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800caf2:	f003 f9a1 	bl	800fe38 <HAL_ADC_ConfigChannel>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d001      	beq.n	800cb00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800cafc:	f000 fc52 	bl	800d3a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800cb00:	2309      	movs	r3, #9
 800cb02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800cb04:	2303      	movs	r3, #3
 800cb06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cb08:	463b      	mov	r3, r7
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	4805      	ldr	r0, [pc, #20]	; (800cb24 <MX_ADC1_Init+0xd0>)
 800cb0e:	f003 f993 	bl	800fe38 <HAL_ADC_ConfigChannel>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d001      	beq.n	800cb1c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800cb18:	f000 fc44 	bl	800d3a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800cb1c:	bf00      	nop
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	20008d8c 	.word	0x20008d8c
 800cb28:	40012000 	.word	0x40012000
 800cb2c:	0f000001 	.word	0x0f000001

0800cb30 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800cb36:	463b      	mov	r3, r7
 800cb38:	2200      	movs	r2, #0
 800cb3a:	601a      	str	r2, [r3, #0]
 800cb3c:	605a      	str	r2, [r3, #4]
 800cb3e:	609a      	str	r2, [r3, #8]
 800cb40:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800cb42:	4b28      	ldr	r3, [pc, #160]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb44:	4a28      	ldr	r2, [pc, #160]	; (800cbe8 <MX_ADC2_Init+0xb8>)
 800cb46:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800cb48:	4b26      	ldr	r3, [pc, #152]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cb4e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800cb50:	4b24      	ldr	r3, [pc, #144]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800cb56:	4b23      	ldr	r3, [pc, #140]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb58:	2201      	movs	r2, #1
 800cb5a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800cb5c:	4b21      	ldr	r3, [pc, #132]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb5e:	2201      	movs	r2, #1
 800cb60:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800cb62:	4b20      	ldr	r3, [pc, #128]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cb6a:	4b1e      	ldr	r3, [pc, #120]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cb70:	4b1c      	ldr	r3, [pc, #112]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb72:	4a1e      	ldr	r2, [pc, #120]	; (800cbec <MX_ADC2_Init+0xbc>)
 800cb74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cb76:	4b1b      	ldr	r3, [pc, #108]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800cb7c:	4b19      	ldr	r3, [pc, #100]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb7e:	2202      	movs	r2, #2
 800cb80:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800cb82:	4b18      	ldr	r3, [pc, #96]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb84:	2201      	movs	r2, #1
 800cb86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cb8a:	4b16      	ldr	r3, [pc, #88]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800cb90:	4814      	ldr	r0, [pc, #80]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cb92:	f002 ffb3 	bl	800fafc <HAL_ADC_Init>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d001      	beq.n	800cba0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800cb9c:	f000 fc02 	bl	800d3a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800cba0:	230b      	movs	r3, #11
 800cba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800cba4:	2301      	movs	r3, #1
 800cba6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800cbac:	463b      	mov	r3, r7
 800cbae:	4619      	mov	r1, r3
 800cbb0:	480c      	ldr	r0, [pc, #48]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cbb2:	f003 f941 	bl	800fe38 <HAL_ADC_ConfigChannel>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800cbbc:	f000 fbf2 	bl	800d3a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800cbc0:	230f      	movs	r3, #15
 800cbc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800cbc8:	463b      	mov	r3, r7
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4805      	ldr	r0, [pc, #20]	; (800cbe4 <MX_ADC2_Init+0xb4>)
 800cbce:	f003 f933 	bl	800fe38 <HAL_ADC_ConfigChannel>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d001      	beq.n	800cbdc <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800cbd8:	f000 fbe4 	bl	800d3a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800cbdc:	bf00      	nop
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	20008cac 	.word	0x20008cac
 800cbe8:	40012100 	.word	0x40012100
 800cbec:	0f000001 	.word	0x0f000001

0800cbf0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800cbf4:	4b17      	ldr	r3, [pc, #92]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cbf6:	4a18      	ldr	r2, [pc, #96]	; (800cc58 <MX_SPI3_Init+0x68>)
 800cbf8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800cbfa:	4b16      	ldr	r3, [pc, #88]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cbfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 800cc00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800cc02:	4b14      	ldr	r3, [pc, #80]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800cc08:	4b12      	ldr	r3, [pc, #72]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800cc0e:	4b11      	ldr	r3, [pc, #68]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cc10:	2202      	movs	r2, #2
 800cc12:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800cc14:	4b0f      	ldr	r3, [pc, #60]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cc16:	2201      	movs	r2, #1
 800cc18:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800cc1a:	4b0e      	ldr	r3, [pc, #56]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cc1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc20:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800cc22:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cc24:	2228      	movs	r2, #40	; 0x28
 800cc26:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800cc28:	4b0a      	ldr	r3, [pc, #40]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800cc2e:	4b09      	ldr	r3, [pc, #36]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc34:	4b07      	ldr	r3, [pc, #28]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800cc3a:	4b06      	ldr	r3, [pc, #24]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cc3c:	220a      	movs	r2, #10
 800cc3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800cc40:	4804      	ldr	r0, [pc, #16]	; (800cc54 <MX_SPI3_Init+0x64>)
 800cc42:	f005 f8a1 	bl	8011d88 <HAL_SPI_Init>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d001      	beq.n	800cc50 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800cc4c:	f000 fbaa 	bl	800d3a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800cc50:	bf00      	nop
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	20008d34 	.word	0x20008d34
 800cc58:	40003c00 	.word	0x40003c00

0800cc5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b086      	sub	sp, #24
 800cc60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cc62:	f107 0308 	add.w	r3, r7, #8
 800cc66:	2200      	movs	r2, #0
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	605a      	str	r2, [r3, #4]
 800cc6c:	609a      	str	r2, [r3, #8]
 800cc6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cc70:	463b      	mov	r3, r7
 800cc72:	2200      	movs	r2, #0
 800cc74:	601a      	str	r2, [r3, #0]
 800cc76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800cc78:	4b1e      	ldr	r3, [pc, #120]	; (800ccf4 <MX_TIM1_Init+0x98>)
 800cc7a:	4a1f      	ldr	r2, [pc, #124]	; (800ccf8 <MX_TIM1_Init+0x9c>)
 800cc7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800cc7e:	4b1d      	ldr	r3, [pc, #116]	; (800ccf4 <MX_TIM1_Init+0x98>)
 800cc80:	22a7      	movs	r2, #167	; 0xa7
 800cc82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cc84:	4b1b      	ldr	r3, [pc, #108]	; (800ccf4 <MX_TIM1_Init+0x98>)
 800cc86:	2200      	movs	r2, #0
 800cc88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800cc8a:	4b1a      	ldr	r3, [pc, #104]	; (800ccf4 <MX_TIM1_Init+0x98>)
 800cc8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cc90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cc92:	4b18      	ldr	r3, [pc, #96]	; (800ccf4 <MX_TIM1_Init+0x98>)
 800cc94:	2200      	movs	r2, #0
 800cc96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800cc98:	4b16      	ldr	r3, [pc, #88]	; (800ccf4 <MX_TIM1_Init+0x98>)
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cc9e:	4b15      	ldr	r3, [pc, #84]	; (800ccf4 <MX_TIM1_Init+0x98>)
 800cca0:	2200      	movs	r2, #0
 800cca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800cca4:	4813      	ldr	r0, [pc, #76]	; (800ccf4 <MX_TIM1_Init+0x98>)
 800cca6:	f005 fdc3 	bl	8012830 <HAL_TIM_Base_Init>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800ccb0:	f000 fb78 	bl	800d3a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ccb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ccba:	f107 0308 	add.w	r3, r7, #8
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	480c      	ldr	r0, [pc, #48]	; (800ccf4 <MX_TIM1_Init+0x98>)
 800ccc2:	f006 fb8d 	bl	80133e0 <HAL_TIM_ConfigClockSource>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d001      	beq.n	800ccd0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800cccc:	f000 fb6a 	bl	800d3a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ccd8:	463b      	mov	r3, r7
 800ccda:	4619      	mov	r1, r3
 800ccdc:	4805      	ldr	r0, [pc, #20]	; (800ccf4 <MX_TIM1_Init+0x98>)
 800ccde:	f007 f839 	bl	8013d54 <HAL_TIMEx_MasterConfigSynchronization>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d001      	beq.n	800ccec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800cce8:	f000 fb5c 	bl	800d3a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ccec:	bf00      	nop
 800ccee:	3718      	adds	r7, #24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	20008e74 	.word	0x20008e74
 800ccf8:	40010000 	.word	0x40010000

0800ccfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08e      	sub	sp, #56	; 0x38
 800cd00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cd02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd06:	2200      	movs	r2, #0
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	605a      	str	r2, [r3, #4]
 800cd0c:	609a      	str	r2, [r3, #8]
 800cd0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cd10:	f107 0320 	add.w	r3, r7, #32
 800cd14:	2200      	movs	r2, #0
 800cd16:	601a      	str	r2, [r3, #0]
 800cd18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cd1a:	1d3b      	adds	r3, r7, #4
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	601a      	str	r2, [r3, #0]
 800cd20:	605a      	str	r2, [r3, #4]
 800cd22:	609a      	str	r2, [r3, #8]
 800cd24:	60da      	str	r2, [r3, #12]
 800cd26:	611a      	str	r2, [r3, #16]
 800cd28:	615a      	str	r2, [r3, #20]
 800cd2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800cd2c:	4b2d      	ldr	r3, [pc, #180]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cd2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cd32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800cd34:	4b2b      	ldr	r3, [pc, #172]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cd36:	2200      	movs	r2, #0
 800cd38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cd3a:	4b2a      	ldr	r3, [pc, #168]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800cd40:	4b28      	ldr	r3, [pc, #160]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cd42:	f241 0267 	movw	r2, #4199	; 0x1067
 800cd46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cd48:	4b26      	ldr	r3, [pc, #152]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cd4e:	4b25      	ldr	r3, [pc, #148]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800cd54:	4823      	ldr	r0, [pc, #140]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cd56:	f005 fd6b 	bl	8012830 <HAL_TIM_Base_Init>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800cd60:	f000 fb20 	bl	800d3a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cd64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800cd6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd6e:	4619      	mov	r1, r3
 800cd70:	481c      	ldr	r0, [pc, #112]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cd72:	f006 fb35 	bl	80133e0 <HAL_TIM_ConfigClockSource>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800cd7c:	f000 fb12 	bl	800d3a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800cd80:	4818      	ldr	r0, [pc, #96]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cd82:	f005 ff23 	bl	8012bcc <HAL_TIM_PWM_Init>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d001      	beq.n	800cd90 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800cd8c:	f000 fb0a 	bl	800d3a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cd90:	2300      	movs	r3, #0
 800cd92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cd94:	2300      	movs	r3, #0
 800cd96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800cd98:	f107 0320 	add.w	r3, r7, #32
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4811      	ldr	r0, [pc, #68]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cda0:	f006 ffd8 	bl	8013d54 <HAL_TIMEx_MasterConfigSynchronization>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d001      	beq.n	800cdae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800cdaa:	f000 fafb 	bl	800d3a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cdae:	2360      	movs	r3, #96	; 0x60
 800cdb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800cdbe:	1d3b      	adds	r3, r7, #4
 800cdc0:	220c      	movs	r2, #12
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	4807      	ldr	r0, [pc, #28]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cdc6:	f006 fa45 	bl	8013254 <HAL_TIM_PWM_ConfigChannel>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d001      	beq.n	800cdd4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800cdd0:	f000 fae8 	bl	800d3a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800cdd4:	4803      	ldr	r0, [pc, #12]	; (800cde4 <MX_TIM2_Init+0xe8>)
 800cdd6:	f000 fd3f 	bl	800d858 <HAL_TIM_MspPostInit>

}
 800cdda:	bf00      	nop
 800cddc:	3738      	adds	r7, #56	; 0x38
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	20007f50 	.word	0x20007f50

0800cde8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b08c      	sub	sp, #48	; 0x30
 800cdec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800cdee:	f107 030c 	add.w	r3, r7, #12
 800cdf2:	2224      	movs	r2, #36	; 0x24
 800cdf4:	2100      	movs	r1, #0
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f008 f891 	bl	8014f1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cdfc:	1d3b      	adds	r3, r7, #4
 800cdfe:	2200      	movs	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]
 800ce02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ce04:	4b20      	ldr	r3, [pc, #128]	; (800ce88 <MX_TIM3_Init+0xa0>)
 800ce06:	4a21      	ldr	r2, [pc, #132]	; (800ce8c <MX_TIM3_Init+0xa4>)
 800ce08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ce0a:	4b1f      	ldr	r3, [pc, #124]	; (800ce88 <MX_TIM3_Init+0xa0>)
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ce10:	4b1d      	ldr	r3, [pc, #116]	; (800ce88 <MX_TIM3_Init+0xa0>)
 800ce12:	2200      	movs	r2, #0
 800ce14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800ce16:	4b1c      	ldr	r3, [pc, #112]	; (800ce88 <MX_TIM3_Init+0xa0>)
 800ce18:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800ce1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ce1e:	4b1a      	ldr	r3, [pc, #104]	; (800ce88 <MX_TIM3_Init+0xa0>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ce24:	4b18      	ldr	r3, [pc, #96]	; (800ce88 <MX_TIM3_Init+0xa0>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ce32:	2301      	movs	r3, #1
 800ce34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ce36:	2300      	movs	r3, #0
 800ce38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ce42:	2301      	movs	r3, #1
 800ce44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ce46:	2300      	movs	r3, #0
 800ce48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800ce4e:	f107 030c 	add.w	r3, r7, #12
 800ce52:	4619      	mov	r1, r3
 800ce54:	480c      	ldr	r0, [pc, #48]	; (800ce88 <MX_TIM3_Init+0xa0>)
 800ce56:	f005 ff85 	bl	8012d64 <HAL_TIM_Encoder_Init>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d001      	beq.n	800ce64 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800ce60:	f000 faa0 	bl	800d3a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ce64:	2300      	movs	r3, #0
 800ce66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ce6c:	1d3b      	adds	r3, r7, #4
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4805      	ldr	r0, [pc, #20]	; (800ce88 <MX_TIM3_Init+0xa0>)
 800ce72:	f006 ff6f 	bl	8013d54 <HAL_TIMEx_MasterConfigSynchronization>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d001      	beq.n	800ce80 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800ce7c:	f000 fa92 	bl	800d3a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800ce80:	bf00      	nop
 800ce82:	3730      	adds	r7, #48	; 0x30
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	20008cf4 	.word	0x20008cf4
 800ce8c:	40000400 	.word	0x40000400

0800ce90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08c      	sub	sp, #48	; 0x30
 800ce94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ce96:	f107 030c 	add.w	r3, r7, #12
 800ce9a:	2224      	movs	r2, #36	; 0x24
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f008 f83d 	bl	8014f1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cea4:	1d3b      	adds	r3, r7, #4
 800cea6:	2200      	movs	r2, #0
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ceac:	4b20      	ldr	r3, [pc, #128]	; (800cf30 <MX_TIM4_Init+0xa0>)
 800ceae:	4a21      	ldr	r2, [pc, #132]	; (800cf34 <MX_TIM4_Init+0xa4>)
 800ceb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800ceb2:	4b1f      	ldr	r3, [pc, #124]	; (800cf30 <MX_TIM4_Init+0xa0>)
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ceb8:	4b1d      	ldr	r3, [pc, #116]	; (800cf30 <MX_TIM4_Init+0xa0>)
 800ceba:	2200      	movs	r2, #0
 800cebc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800cebe:	4b1c      	ldr	r3, [pc, #112]	; (800cf30 <MX_TIM4_Init+0xa0>)
 800cec0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800cec4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cec6:	4b1a      	ldr	r3, [pc, #104]	; (800cf30 <MX_TIM4_Init+0xa0>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cecc:	4b18      	ldr	r3, [pc, #96]	; (800cf30 <MX_TIM4_Init+0xa0>)
 800cece:	2200      	movs	r2, #0
 800ced0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800ced2:	2303      	movs	r3, #3
 800ced4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ced6:	2300      	movs	r3, #0
 800ced8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ceda:	2301      	movs	r3, #1
 800cedc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800cede:	2300      	movs	r3, #0
 800cee0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800cee6:	2300      	movs	r3, #0
 800cee8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ceea:	2301      	movs	r3, #1
 800ceec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ceee:	2300      	movs	r3, #0
 800cef0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800cef6:	f107 030c 	add.w	r3, r7, #12
 800cefa:	4619      	mov	r1, r3
 800cefc:	480c      	ldr	r0, [pc, #48]	; (800cf30 <MX_TIM4_Init+0xa0>)
 800cefe:	f005 ff31 	bl	8012d64 <HAL_TIM_Encoder_Init>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800cf08:	f000 fa4c 	bl	800d3a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf10:	2300      	movs	r3, #0
 800cf12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800cf14:	1d3b      	adds	r3, r7, #4
 800cf16:	4619      	mov	r1, r3
 800cf18:	4805      	ldr	r0, [pc, #20]	; (800cf30 <MX_TIM4_Init+0xa0>)
 800cf1a:	f006 ff1b 	bl	8013d54 <HAL_TIMEx_MasterConfigSynchronization>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800cf24:	f000 fa3e 	bl	800d3a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800cf28:	bf00      	nop
 800cf2a:	3730      	adds	r7, #48	; 0x30
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	20008c6c 	.word	0x20008c6c
 800cf34:	40000800 	.word	0x40000800

0800cf38 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b08e      	sub	sp, #56	; 0x38
 800cf3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cf3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf42:	2200      	movs	r2, #0
 800cf44:	601a      	str	r2, [r3, #0]
 800cf46:	605a      	str	r2, [r3, #4]
 800cf48:	609a      	str	r2, [r3, #8]
 800cf4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cf4c:	f107 0320 	add.w	r3, r7, #32
 800cf50:	2200      	movs	r2, #0
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cf56:	1d3b      	adds	r3, r7, #4
 800cf58:	2200      	movs	r2, #0
 800cf5a:	601a      	str	r2, [r3, #0]
 800cf5c:	605a      	str	r2, [r3, #4]
 800cf5e:	609a      	str	r2, [r3, #8]
 800cf60:	60da      	str	r2, [r3, #12]
 800cf62:	611a      	str	r2, [r3, #16]
 800cf64:	615a      	str	r2, [r3, #20]
 800cf66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800cf68:	4b2c      	ldr	r3, [pc, #176]	; (800d01c <MX_TIM5_Init+0xe4>)
 800cf6a:	4a2d      	ldr	r2, [pc, #180]	; (800d020 <MX_TIM5_Init+0xe8>)
 800cf6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800cf6e:	4b2b      	ldr	r3, [pc, #172]	; (800d01c <MX_TIM5_Init+0xe4>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf74:	4b29      	ldr	r3, [pc, #164]	; (800d01c <MX_TIM5_Init+0xe4>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800cf7a:	4b28      	ldr	r3, [pc, #160]	; (800d01c <MX_TIM5_Init+0xe4>)
 800cf7c:	f241 0267 	movw	r2, #4199	; 0x1067
 800cf80:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cf82:	4b26      	ldr	r3, [pc, #152]	; (800d01c <MX_TIM5_Init+0xe4>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cf88:	4b24      	ldr	r3, [pc, #144]	; (800d01c <MX_TIM5_Init+0xe4>)
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800cf8e:	4823      	ldr	r0, [pc, #140]	; (800d01c <MX_TIM5_Init+0xe4>)
 800cf90:	f005 fc4e 	bl	8012830 <HAL_TIM_Base_Init>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d001      	beq.n	800cf9e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800cf9a:	f000 fa03 	bl	800d3a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cf9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfa2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800cfa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	481c      	ldr	r0, [pc, #112]	; (800d01c <MX_TIM5_Init+0xe4>)
 800cfac:	f006 fa18 	bl	80133e0 <HAL_TIM_ConfigClockSource>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800cfb6:	f000 f9f5 	bl	800d3a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800cfba:	4818      	ldr	r0, [pc, #96]	; (800d01c <MX_TIM5_Init+0xe4>)
 800cfbc:	f005 fe06 	bl	8012bcc <HAL_TIM_PWM_Init>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d001      	beq.n	800cfca <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800cfc6:	f000 f9ed 	bl	800d3a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800cfd2:	f107 0320 	add.w	r3, r7, #32
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	4810      	ldr	r0, [pc, #64]	; (800d01c <MX_TIM5_Init+0xe4>)
 800cfda:	f006 febb 	bl	8013d54 <HAL_TIMEx_MasterConfigSynchronization>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800cfe4:	f000 f9de 	bl	800d3a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cfe8:	2360      	movs	r3, #96	; 0x60
 800cfea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800cfec:	2300      	movs	r3, #0
 800cfee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cff0:	2300      	movs	r3, #0
 800cff2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cff4:	2300      	movs	r3, #0
 800cff6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800cff8:	1d3b      	adds	r3, r7, #4
 800cffa:	2204      	movs	r2, #4
 800cffc:	4619      	mov	r1, r3
 800cffe:	4807      	ldr	r0, [pc, #28]	; (800d01c <MX_TIM5_Init+0xe4>)
 800d000:	f006 f928 	bl	8013254 <HAL_TIM_PWM_ConfigChannel>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d001      	beq.n	800d00e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800d00a:	f000 f9cb 	bl	800d3a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800d00e:	4803      	ldr	r0, [pc, #12]	; (800d01c <MX_TIM5_Init+0xe4>)
 800d010:	f000 fc22 	bl	800d858 <HAL_TIM_MspPostInit>

}
 800d014:	bf00      	nop
 800d016:	3738      	adds	r7, #56	; 0x38
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	20007f90 	.word	0x20007f90
 800d020:	40000c00 	.word	0x40000c00

0800d024 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b096      	sub	sp, #88	; 0x58
 800d028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d02a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d02e:	2200      	movs	r2, #0
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	605a      	str	r2, [r3, #4]
 800d034:	609a      	str	r2, [r3, #8]
 800d036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d038:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d03c:	2200      	movs	r2, #0
 800d03e:	601a      	str	r2, [r3, #0]
 800d040:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d046:	2200      	movs	r2, #0
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	605a      	str	r2, [r3, #4]
 800d04c:	609a      	str	r2, [r3, #8]
 800d04e:	60da      	str	r2, [r3, #12]
 800d050:	611a      	str	r2, [r3, #16]
 800d052:	615a      	str	r2, [r3, #20]
 800d054:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d056:	1d3b      	adds	r3, r7, #4
 800d058:	2220      	movs	r2, #32
 800d05a:	2100      	movs	r1, #0
 800d05c:	4618      	mov	r0, r3
 800d05e:	f007 ff5e 	bl	8014f1e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800d062:	4b42      	ldr	r3, [pc, #264]	; (800d16c <MX_TIM8_Init+0x148>)
 800d064:	4a42      	ldr	r2, [pc, #264]	; (800d170 <MX_TIM8_Init+0x14c>)
 800d066:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800d068:	4b40      	ldr	r3, [pc, #256]	; (800d16c <MX_TIM8_Init+0x148>)
 800d06a:	22a7      	movs	r2, #167	; 0xa7
 800d06c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d06e:	4b3f      	ldr	r3, [pc, #252]	; (800d16c <MX_TIM8_Init+0x148>)
 800d070:	2200      	movs	r2, #0
 800d072:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800d074:	4b3d      	ldr	r3, [pc, #244]	; (800d16c <MX_TIM8_Init+0x148>)
 800d076:	2231      	movs	r2, #49	; 0x31
 800d078:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d07a:	4b3c      	ldr	r3, [pc, #240]	; (800d16c <MX_TIM8_Init+0x148>)
 800d07c:	2200      	movs	r2, #0
 800d07e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800d080:	4b3a      	ldr	r3, [pc, #232]	; (800d16c <MX_TIM8_Init+0x148>)
 800d082:	2200      	movs	r2, #0
 800d084:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d086:	4b39      	ldr	r3, [pc, #228]	; (800d16c <MX_TIM8_Init+0x148>)
 800d088:	2280      	movs	r2, #128	; 0x80
 800d08a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800d08c:	4837      	ldr	r0, [pc, #220]	; (800d16c <MX_TIM8_Init+0x148>)
 800d08e:	f005 fbcf 	bl	8012830 <HAL_TIM_Base_Init>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800d098:	f000 f984 	bl	800d3a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d09c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800d0a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	4830      	ldr	r0, [pc, #192]	; (800d16c <MX_TIM8_Init+0x148>)
 800d0aa:	f006 f999 	bl	80133e0 <HAL_TIM_ConfigClockSource>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800d0b4:	f000 f976 	bl	800d3a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800d0b8:	482c      	ldr	r0, [pc, #176]	; (800d16c <MX_TIM8_Init+0x148>)
 800d0ba:	f005 fc33 	bl	8012924 <HAL_TIM_OC_Init>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d001      	beq.n	800d0c8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800d0c4:	f000 f96e 	bl	800d3a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d0d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	4825      	ldr	r0, [pc, #148]	; (800d16c <MX_TIM8_Init+0x148>)
 800d0d8:	f006 fe3c 	bl	8013d54 <HAL_TIMEx_MasterConfigSynchronization>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800d0e2:	f000 f95f 	bl	800d3a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800d0e6:	2330      	movs	r3, #48	; 0x30
 800d0e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800d0ea:	2318      	movs	r3, #24
 800d0ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d0fe:	2300      	movs	r3, #0
 800d100:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d106:	2200      	movs	r2, #0
 800d108:	4619      	mov	r1, r3
 800d10a:	4818      	ldr	r0, [pc, #96]	; (800d16c <MX_TIM8_Init+0x148>)
 800d10c:	f006 f842 	bl	8013194 <HAL_TIM_OC_ConfigChannel>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800d116:	f000 f945 	bl	800d3a4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800d11a:	4b14      	ldr	r3, [pc, #80]	; (800d16c <MX_TIM8_Init+0x148>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	699a      	ldr	r2, [r3, #24]
 800d120:	4b12      	ldr	r3, [pc, #72]	; (800d16c <MX_TIM8_Init+0x148>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f042 0208 	orr.w	r2, r2, #8
 800d128:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d12a:	2300      	movs	r3, #0
 800d12c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d12e:	2300      	movs	r3, #0
 800d130:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d132:	2300      	movs	r3, #0
 800d134:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800d136:	2300      	movs	r3, #0
 800d138:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d13a:	2300      	movs	r3, #0
 800d13c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d13e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d142:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d144:	2300      	movs	r3, #0
 800d146:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800d148:	1d3b      	adds	r3, r7, #4
 800d14a:	4619      	mov	r1, r3
 800d14c:	4807      	ldr	r0, [pc, #28]	; (800d16c <MX_TIM8_Init+0x148>)
 800d14e:	f006 fe7d 	bl	8013e4c <HAL_TIMEx_ConfigBreakDeadTime>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800d158:	f000 f924 	bl	800d3a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800d15c:	4803      	ldr	r0, [pc, #12]	; (800d16c <MX_TIM8_Init+0x148>)
 800d15e:	f000 fb7b 	bl	800d858 <HAL_TIM_MspPostInit>

}
 800d162:	bf00      	nop
 800d164:	3758      	adds	r7, #88	; 0x58
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	20008c2c 	.word	0x20008c2c
 800d170:	40010400 	.word	0x40010400

0800d174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d178:	4b11      	ldr	r3, [pc, #68]	; (800d1c0 <MX_USART1_UART_Init+0x4c>)
 800d17a:	4a12      	ldr	r2, [pc, #72]	; (800d1c4 <MX_USART1_UART_Init+0x50>)
 800d17c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800d17e:	4b10      	ldr	r3, [pc, #64]	; (800d1c0 <MX_USART1_UART_Init+0x4c>)
 800d180:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800d184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d186:	4b0e      	ldr	r3, [pc, #56]	; (800d1c0 <MX_USART1_UART_Init+0x4c>)
 800d188:	2200      	movs	r2, #0
 800d18a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d18c:	4b0c      	ldr	r3, [pc, #48]	; (800d1c0 <MX_USART1_UART_Init+0x4c>)
 800d18e:	2200      	movs	r2, #0
 800d190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d192:	4b0b      	ldr	r3, [pc, #44]	; (800d1c0 <MX_USART1_UART_Init+0x4c>)
 800d194:	2200      	movs	r2, #0
 800d196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d198:	4b09      	ldr	r3, [pc, #36]	; (800d1c0 <MX_USART1_UART_Init+0x4c>)
 800d19a:	220c      	movs	r2, #12
 800d19c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d19e:	4b08      	ldr	r3, [pc, #32]	; (800d1c0 <MX_USART1_UART_Init+0x4c>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d1a4:	4b06      	ldr	r3, [pc, #24]	; (800d1c0 <MX_USART1_UART_Init+0x4c>)
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d1aa:	4805      	ldr	r0, [pc, #20]	; (800d1c0 <MX_USART1_UART_Init+0x4c>)
 800d1ac:	f006 fed9 	bl	8013f62 <HAL_UART_Init>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d1b6:	f000 f8f5 	bl	800d3a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d1ba:	bf00      	nop
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	20008dd4 	.word	0x20008dd4
 800d1c4:	40011000 	.word	0x40011000

0800d1c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	607b      	str	r3, [r7, #4]
 800d1d2:	4b10      	ldr	r3, [pc, #64]	; (800d214 <MX_DMA_Init+0x4c>)
 800d1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d6:	4a0f      	ldr	r2, [pc, #60]	; (800d214 <MX_DMA_Init+0x4c>)
 800d1d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d1dc:	6313      	str	r3, [r2, #48]	; 0x30
 800d1de:	4b0d      	ldr	r3, [pc, #52]	; (800d214 <MX_DMA_Init+0x4c>)
 800d1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1e6:	607b      	str	r3, [r7, #4]
 800d1e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	2038      	movs	r0, #56	; 0x38
 800d1f0:	f003 f99d 	bl	801052e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800d1f4:	2038      	movs	r0, #56	; 0x38
 800d1f6:	f003 f9b6 	bl	8010566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	203a      	movs	r0, #58	; 0x3a
 800d200:	f003 f995 	bl	801052e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800d204:	203a      	movs	r0, #58	; 0x3a
 800d206:	f003 f9ae 	bl	8010566 <HAL_NVIC_EnableIRQ>

}
 800d20a:	bf00      	nop
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	40023800 	.word	0x40023800

0800d218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b08a      	sub	sp, #40	; 0x28
 800d21c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d21e:	f107 0314 	add.w	r3, r7, #20
 800d222:	2200      	movs	r2, #0
 800d224:	601a      	str	r2, [r3, #0]
 800d226:	605a      	str	r2, [r3, #4]
 800d228:	609a      	str	r2, [r3, #8]
 800d22a:	60da      	str	r2, [r3, #12]
 800d22c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d22e:	2300      	movs	r3, #0
 800d230:	613b      	str	r3, [r7, #16]
 800d232:	4b56      	ldr	r3, [pc, #344]	; (800d38c <MX_GPIO_Init+0x174>)
 800d234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d236:	4a55      	ldr	r2, [pc, #340]	; (800d38c <MX_GPIO_Init+0x174>)
 800d238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d23c:	6313      	str	r3, [r2, #48]	; 0x30
 800d23e:	4b53      	ldr	r3, [pc, #332]	; (800d38c <MX_GPIO_Init+0x174>)
 800d240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d246:	613b      	str	r3, [r7, #16]
 800d248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d24a:	2300      	movs	r3, #0
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	4b4f      	ldr	r3, [pc, #316]	; (800d38c <MX_GPIO_Init+0x174>)
 800d250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d252:	4a4e      	ldr	r2, [pc, #312]	; (800d38c <MX_GPIO_Init+0x174>)
 800d254:	f043 0304 	orr.w	r3, r3, #4
 800d258:	6313      	str	r3, [r2, #48]	; 0x30
 800d25a:	4b4c      	ldr	r3, [pc, #304]	; (800d38c <MX_GPIO_Init+0x174>)
 800d25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25e:	f003 0304 	and.w	r3, r3, #4
 800d262:	60fb      	str	r3, [r7, #12]
 800d264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d266:	2300      	movs	r3, #0
 800d268:	60bb      	str	r3, [r7, #8]
 800d26a:	4b48      	ldr	r3, [pc, #288]	; (800d38c <MX_GPIO_Init+0x174>)
 800d26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d26e:	4a47      	ldr	r2, [pc, #284]	; (800d38c <MX_GPIO_Init+0x174>)
 800d270:	f043 0301 	orr.w	r3, r3, #1
 800d274:	6313      	str	r3, [r2, #48]	; 0x30
 800d276:	4b45      	ldr	r3, [pc, #276]	; (800d38c <MX_GPIO_Init+0x174>)
 800d278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d27a:	f003 0301 	and.w	r3, r3, #1
 800d27e:	60bb      	str	r3, [r7, #8]
 800d280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d282:	2300      	movs	r3, #0
 800d284:	607b      	str	r3, [r7, #4]
 800d286:	4b41      	ldr	r3, [pc, #260]	; (800d38c <MX_GPIO_Init+0x174>)
 800d288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d28a:	4a40      	ldr	r2, [pc, #256]	; (800d38c <MX_GPIO_Init+0x174>)
 800d28c:	f043 0302 	orr.w	r3, r3, #2
 800d290:	6313      	str	r3, [r2, #48]	; 0x30
 800d292:	4b3e      	ldr	r3, [pc, #248]	; (800d38c <MX_GPIO_Init+0x174>)
 800d294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	607b      	str	r3, [r7, #4]
 800d29c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d29e:	2300      	movs	r3, #0
 800d2a0:	603b      	str	r3, [r7, #0]
 800d2a2:	4b3a      	ldr	r3, [pc, #232]	; (800d38c <MX_GPIO_Init+0x174>)
 800d2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a6:	4a39      	ldr	r2, [pc, #228]	; (800d38c <MX_GPIO_Init+0x174>)
 800d2a8:	f043 0308 	orr.w	r3, r3, #8
 800d2ac:	6313      	str	r3, [r2, #48]	; 0x30
 800d2ae:	4b37      	ldr	r3, [pc, #220]	; (800d38c <MX_GPIO_Init+0x174>)
 800d2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2b2:	f003 0308 	and.w	r3, r3, #8
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	2105      	movs	r1, #5
 800d2be:	4834      	ldr	r0, [pc, #208]	; (800d390 <MX_GPIO_Init+0x178>)
 800d2c0:	f004 f8ce 	bl	8011460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f44f 7140 	mov.w	r1, #768	; 0x300
 800d2ca:	4832      	ldr	r0, [pc, #200]	; (800d394 <MX_GPIO_Init+0x17c>)
 800d2cc:	f004 f8c8 	bl	8011460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	2104      	movs	r1, #4
 800d2d4:	4830      	ldr	r0, [pc, #192]	; (800d398 <MX_GPIO_Init+0x180>)
 800d2d6:	f004 f8c3 	bl	8011460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d2e0:	482e      	ldr	r0, [pc, #184]	; (800d39c <MX_GPIO_Init+0x184>)
 800d2e2:	f004 f8bd 	bl	8011460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800d2e6:	2305      	movs	r3, #5
 800d2e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2f6:	f107 0314 	add.w	r3, r7, #20
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4824      	ldr	r0, [pc, #144]	; (800d390 <MX_GPIO_Init+0x178>)
 800d2fe:	f003 ff15 	bl	801112c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800d302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d308:	4b25      	ldr	r3, [pc, #148]	; (800d3a0 <MX_GPIO_Init+0x188>)
 800d30a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d30c:	2300      	movs	r3, #0
 800d30e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d310:	f107 0314 	add.w	r3, r7, #20
 800d314:	4619      	mov	r1, r3
 800d316:	4821      	ldr	r0, [pc, #132]	; (800d39c <MX_GPIO_Init+0x184>)
 800d318:	f003 ff08 	bl	801112c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800d31c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d322:	2301      	movs	r3, #1
 800d324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d326:	2300      	movs	r3, #0
 800d328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d32a:	2300      	movs	r3, #0
 800d32c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d32e:	f107 0314 	add.w	r3, r7, #20
 800d332:	4619      	mov	r1, r3
 800d334:	4817      	ldr	r0, [pc, #92]	; (800d394 <MX_GPIO_Init+0x17c>)
 800d336:	f003 fef9 	bl	801112c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d33a:	2304      	movs	r3, #4
 800d33c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d33e:	2301      	movs	r3, #1
 800d340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d342:	2300      	movs	r3, #0
 800d344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d346:	2300      	movs	r3, #0
 800d348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d34a:	f107 0314 	add.w	r3, r7, #20
 800d34e:	4619      	mov	r1, r3
 800d350:	4811      	ldr	r0, [pc, #68]	; (800d398 <MX_GPIO_Init+0x180>)
 800d352:	f003 feeb 	bl	801112c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d35a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d35c:	2301      	movs	r3, #1
 800d35e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d360:	2300      	movs	r3, #0
 800d362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d364:	2300      	movs	r3, #0
 800d366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d368:	f107 0314 	add.w	r3, r7, #20
 800d36c:	4619      	mov	r1, r3
 800d36e:	480b      	ldr	r0, [pc, #44]	; (800d39c <MX_GPIO_Init+0x184>)
 800d370:	f003 fedc 	bl	801112c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800d374:	2200      	movs	r2, #0
 800d376:	2100      	movs	r1, #0
 800d378:	2028      	movs	r0, #40	; 0x28
 800d37a:	f003 f8d8 	bl	801052e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d37e:	2028      	movs	r0, #40	; 0x28
 800d380:	f003 f8f1 	bl	8010566 <HAL_NVIC_EnableIRQ>

}
 800d384:	bf00      	nop
 800d386:	3728      	adds	r7, #40	; 0x28
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	40023800 	.word	0x40023800
 800d390:	40020000 	.word	0x40020000
 800d394:	40020800 	.word	0x40020800
 800d398:	40020c00 	.word	0x40020c00
 800d39c:	40020400 	.word	0x40020400
 800d3a0:	10110000 	.word	0x10110000

0800d3a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d3a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d3aa:	e7fe      	b.n	800d3aa <Error_Handler+0x6>

0800d3ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	607b      	str	r3, [r7, #4]
 800d3b6:	4b10      	ldr	r3, [pc, #64]	; (800d3f8 <HAL_MspInit+0x4c>)
 800d3b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3ba:	4a0f      	ldr	r2, [pc, #60]	; (800d3f8 <HAL_MspInit+0x4c>)
 800d3bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d3c0:	6453      	str	r3, [r2, #68]	; 0x44
 800d3c2:	4b0d      	ldr	r3, [pc, #52]	; (800d3f8 <HAL_MspInit+0x4c>)
 800d3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3ca:	607b      	str	r3, [r7, #4]
 800d3cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	603b      	str	r3, [r7, #0]
 800d3d2:	4b09      	ldr	r3, [pc, #36]	; (800d3f8 <HAL_MspInit+0x4c>)
 800d3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d6:	4a08      	ldr	r2, [pc, #32]	; (800d3f8 <HAL_MspInit+0x4c>)
 800d3d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3dc:	6413      	str	r3, [r2, #64]	; 0x40
 800d3de:	4b06      	ldr	r3, [pc, #24]	; (800d3f8 <HAL_MspInit+0x4c>)
 800d3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3e6:	603b      	str	r3, [r7, #0]
 800d3e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d3ea:	bf00      	nop
 800d3ec:	370c      	adds	r7, #12
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	40023800 	.word	0x40023800

0800d3fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08c      	sub	sp, #48	; 0x30
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d404:	f107 031c 	add.w	r3, r7, #28
 800d408:	2200      	movs	r2, #0
 800d40a:	601a      	str	r2, [r3, #0]
 800d40c:	605a      	str	r2, [r3, #4]
 800d40e:	609a      	str	r2, [r3, #8]
 800d410:	60da      	str	r2, [r3, #12]
 800d412:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a6b      	ldr	r2, [pc, #428]	; (800d5c8 <HAL_ADC_MspInit+0x1cc>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d172      	bne.n	800d504 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d41e:	2300      	movs	r3, #0
 800d420:	61bb      	str	r3, [r7, #24]
 800d422:	4b6a      	ldr	r3, [pc, #424]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d426:	4a69      	ldr	r2, [pc, #420]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d42c:	6453      	str	r3, [r2, #68]	; 0x44
 800d42e:	4b67      	ldr	r3, [pc, #412]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d436:	61bb      	str	r3, [r7, #24]
 800d438:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d43a:	2300      	movs	r3, #0
 800d43c:	617b      	str	r3, [r7, #20]
 800d43e:	4b63      	ldr	r3, [pc, #396]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d442:	4a62      	ldr	r2, [pc, #392]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d444:	f043 0304 	orr.w	r3, r3, #4
 800d448:	6313      	str	r3, [r2, #48]	; 0x30
 800d44a:	4b60      	ldr	r3, [pc, #384]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d44e:	f003 0304 	and.w	r3, r3, #4
 800d452:	617b      	str	r3, [r7, #20]
 800d454:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d456:	2300      	movs	r3, #0
 800d458:	613b      	str	r3, [r7, #16]
 800d45a:	4b5c      	ldr	r3, [pc, #368]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d45e:	4a5b      	ldr	r2, [pc, #364]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d460:	f043 0302 	orr.w	r3, r3, #2
 800d464:	6313      	str	r3, [r2, #48]	; 0x30
 800d466:	4b59      	ldr	r3, [pc, #356]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d46a:	f003 0302 	and.w	r3, r3, #2
 800d46e:	613b      	str	r3, [r7, #16]
 800d470:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800d472:	2311      	movs	r3, #17
 800d474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d476:	2303      	movs	r3, #3
 800d478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d47a:	2300      	movs	r3, #0
 800d47c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d47e:	f107 031c 	add.w	r3, r7, #28
 800d482:	4619      	mov	r1, r3
 800d484:	4852      	ldr	r0, [pc, #328]	; (800d5d0 <HAL_ADC_MspInit+0x1d4>)
 800d486:	f003 fe51 	bl	801112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d48a:	2302      	movs	r3, #2
 800d48c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d48e:	2303      	movs	r3, #3
 800d490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d492:	2300      	movs	r3, #0
 800d494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d496:	f107 031c 	add.w	r3, r7, #28
 800d49a:	4619      	mov	r1, r3
 800d49c:	484d      	ldr	r0, [pc, #308]	; (800d5d4 <HAL_ADC_MspInit+0x1d8>)
 800d49e:	f003 fe45 	bl	801112c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800d4a2:	4b4d      	ldr	r3, [pc, #308]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4a4:	4a4d      	ldr	r2, [pc, #308]	; (800d5dc <HAL_ADC_MspInit+0x1e0>)
 800d4a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800d4a8:	4b4b      	ldr	r3, [pc, #300]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d4ae:	4b4a      	ldr	r3, [pc, #296]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800d4b4:	4b48      	ldr	r3, [pc, #288]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800d4ba:	4b47      	ldr	r3, [pc, #284]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d4c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d4c2:	4b45      	ldr	r3, [pc, #276]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d4c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d4ca:	4b43      	ldr	r3, [pc, #268]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d4d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800d4d2:	4b41      	ldr	r3, [pc, #260]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800d4da:	4b3f      	ldr	r3, [pc, #252]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d4e0:	4b3d      	ldr	r3, [pc, #244]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800d4e6:	483c      	ldr	r0, [pc, #240]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4e8:	f003 f858 	bl	801059c <HAL_DMA_Init>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d001      	beq.n	800d4f6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800d4f2:	f7ff ff57 	bl	800d3a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	4a37      	ldr	r2, [pc, #220]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4fa:	639a      	str	r2, [r3, #56]	; 0x38
 800d4fc:	4a36      	ldr	r2, [pc, #216]	; (800d5d8 <HAL_ADC_MspInit+0x1dc>)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800d502:	e05d      	b.n	800d5c0 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a35      	ldr	r2, [pc, #212]	; (800d5e0 <HAL_ADC_MspInit+0x1e4>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d158      	bne.n	800d5c0 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800d50e:	2300      	movs	r3, #0
 800d510:	60fb      	str	r3, [r7, #12]
 800d512:	4b2e      	ldr	r3, [pc, #184]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d516:	4a2d      	ldr	r2, [pc, #180]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d518:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d51c:	6453      	str	r3, [r2, #68]	; 0x44
 800d51e:	4b2b      	ldr	r3, [pc, #172]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d526:	60fb      	str	r3, [r7, #12]
 800d528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d52a:	2300      	movs	r3, #0
 800d52c:	60bb      	str	r3, [r7, #8]
 800d52e:	4b27      	ldr	r3, [pc, #156]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d532:	4a26      	ldr	r2, [pc, #152]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d534:	f043 0304 	orr.w	r3, r3, #4
 800d538:	6313      	str	r3, [r2, #48]	; 0x30
 800d53a:	4b24      	ldr	r3, [pc, #144]	; (800d5cc <HAL_ADC_MspInit+0x1d0>)
 800d53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d53e:	f003 0304 	and.w	r3, r3, #4
 800d542:	60bb      	str	r3, [r7, #8]
 800d544:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800d546:	2322      	movs	r3, #34	; 0x22
 800d548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d54a:	2303      	movs	r3, #3
 800d54c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d54e:	2300      	movs	r3, #0
 800d550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d552:	f107 031c 	add.w	r3, r7, #28
 800d556:	4619      	mov	r1, r3
 800d558:	481d      	ldr	r0, [pc, #116]	; (800d5d0 <HAL_ADC_MspInit+0x1d4>)
 800d55a:	f003 fde7 	bl	801112c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800d55e:	4b21      	ldr	r3, [pc, #132]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d560:	4a21      	ldr	r2, [pc, #132]	; (800d5e8 <HAL_ADC_MspInit+0x1ec>)
 800d562:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800d564:	4b1f      	ldr	r3, [pc, #124]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d56a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d56c:	4b1d      	ldr	r3, [pc, #116]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d56e:	2200      	movs	r2, #0
 800d570:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800d572:	4b1c      	ldr	r3, [pc, #112]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d574:	2200      	movs	r2, #0
 800d576:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800d578:	4b1a      	ldr	r3, [pc, #104]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d57a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d57e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d580:	4b18      	ldr	r3, [pc, #96]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d582:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d586:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d588:	4b16      	ldr	r3, [pc, #88]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d58a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d58e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800d590:	4b14      	ldr	r3, [pc, #80]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d592:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d596:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800d598:	4b12      	ldr	r3, [pc, #72]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d59e:	4b11      	ldr	r3, [pc, #68]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800d5a4:	480f      	ldr	r0, [pc, #60]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d5a6:	f002 fff9 	bl	801059c <HAL_DMA_Init>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d001      	beq.n	800d5b4 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800d5b0:	f7ff fef8 	bl	800d3a4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a0b      	ldr	r2, [pc, #44]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d5b8:	639a      	str	r2, [r3, #56]	; 0x38
 800d5ba:	4a0a      	ldr	r2, [pc, #40]	; (800d5e4 <HAL_ADC_MspInit+0x1e8>)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6393      	str	r3, [r2, #56]	; 0x38
}
 800d5c0:	bf00      	nop
 800d5c2:	3730      	adds	r7, #48	; 0x30
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	40012000 	.word	0x40012000
 800d5cc:	40023800 	.word	0x40023800
 800d5d0:	40020800 	.word	0x40020800
 800d5d4:	40020400 	.word	0x40020400
 800d5d8:	20008e14 	.word	0x20008e14
 800d5dc:	40026410 	.word	0x40026410
 800d5e0:	40012100 	.word	0x40012100
 800d5e4:	20008eb4 	.word	0x20008eb4
 800d5e8:	40026440 	.word	0x40026440

0800d5ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b08a      	sub	sp, #40	; 0x28
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d5f4:	f107 0314 	add.w	r3, r7, #20
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	601a      	str	r2, [r3, #0]
 800d5fc:	605a      	str	r2, [r3, #4]
 800d5fe:	609a      	str	r2, [r3, #8]
 800d600:	60da      	str	r2, [r3, #12]
 800d602:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a19      	ldr	r2, [pc, #100]	; (800d670 <HAL_SPI_MspInit+0x84>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d12c      	bne.n	800d668 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800d60e:	2300      	movs	r3, #0
 800d610:	613b      	str	r3, [r7, #16]
 800d612:	4b18      	ldr	r3, [pc, #96]	; (800d674 <HAL_SPI_MspInit+0x88>)
 800d614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d616:	4a17      	ldr	r2, [pc, #92]	; (800d674 <HAL_SPI_MspInit+0x88>)
 800d618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d61c:	6413      	str	r3, [r2, #64]	; 0x40
 800d61e:	4b15      	ldr	r3, [pc, #84]	; (800d674 <HAL_SPI_MspInit+0x88>)
 800d620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d626:	613b      	str	r3, [r7, #16]
 800d628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d62a:	2300      	movs	r3, #0
 800d62c:	60fb      	str	r3, [r7, #12]
 800d62e:	4b11      	ldr	r3, [pc, #68]	; (800d674 <HAL_SPI_MspInit+0x88>)
 800d630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d632:	4a10      	ldr	r2, [pc, #64]	; (800d674 <HAL_SPI_MspInit+0x88>)
 800d634:	f043 0304 	orr.w	r3, r3, #4
 800d638:	6313      	str	r3, [r2, #48]	; 0x30
 800d63a:	4b0e      	ldr	r3, [pc, #56]	; (800d674 <HAL_SPI_MspInit+0x88>)
 800d63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d63e:	f003 0304 	and.w	r3, r3, #4
 800d642:	60fb      	str	r3, [r7, #12]
 800d644:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800d646:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d64a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d64c:	2302      	movs	r3, #2
 800d64e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d650:	2300      	movs	r3, #0
 800d652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d654:	2303      	movs	r3, #3
 800d656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d658:	2306      	movs	r3, #6
 800d65a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d65c:	f107 0314 	add.w	r3, r7, #20
 800d660:	4619      	mov	r1, r3
 800d662:	4805      	ldr	r0, [pc, #20]	; (800d678 <HAL_SPI_MspInit+0x8c>)
 800d664:	f003 fd62 	bl	801112c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800d668:	bf00      	nop
 800d66a:	3728      	adds	r7, #40	; 0x28
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	40003c00 	.word	0x40003c00
 800d674:	40023800 	.word	0x40023800
 800d678:	40020800 	.word	0x40020800

0800d67c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b086      	sub	sp, #24
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a30      	ldr	r2, [pc, #192]	; (800d74c <HAL_TIM_Base_MspInit+0xd0>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d116      	bne.n	800d6bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d68e:	2300      	movs	r3, #0
 800d690:	617b      	str	r3, [r7, #20]
 800d692:	4b2f      	ldr	r3, [pc, #188]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d696:	4a2e      	ldr	r2, [pc, #184]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d698:	f043 0301 	orr.w	r3, r3, #1
 800d69c:	6453      	str	r3, [r2, #68]	; 0x44
 800d69e:	4b2c      	ldr	r3, [pc, #176]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d6a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6a2:	f003 0301 	and.w	r3, r3, #1
 800d6a6:	617b      	str	r3, [r7, #20]
 800d6a8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	2019      	movs	r0, #25
 800d6b0:	f002 ff3d 	bl	801052e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800d6b4:	2019      	movs	r0, #25
 800d6b6:	f002 ff56 	bl	8010566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d6ba:	e042      	b.n	800d742 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6c4:	d10e      	bne.n	800d6e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	613b      	str	r3, [r7, #16]
 800d6ca:	4b21      	ldr	r3, [pc, #132]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ce:	4a20      	ldr	r2, [pc, #128]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d6d0:	f043 0301 	orr.w	r3, r3, #1
 800d6d4:	6413      	str	r3, [r2, #64]	; 0x40
 800d6d6:	4b1e      	ldr	r3, [pc, #120]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	613b      	str	r3, [r7, #16]
 800d6e0:	693b      	ldr	r3, [r7, #16]
}
 800d6e2:	e02e      	b.n	800d742 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a1a      	ldr	r2, [pc, #104]	; (800d754 <HAL_TIM_Base_MspInit+0xd8>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d10e      	bne.n	800d70c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	4b17      	ldr	r3, [pc, #92]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6f6:	4a16      	ldr	r2, [pc, #88]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d6f8:	f043 0308 	orr.w	r3, r3, #8
 800d6fc:	6413      	str	r3, [r2, #64]	; 0x40
 800d6fe:	4b14      	ldr	r3, [pc, #80]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d702:	f003 0308 	and.w	r3, r3, #8
 800d706:	60fb      	str	r3, [r7, #12]
 800d708:	68fb      	ldr	r3, [r7, #12]
}
 800d70a:	e01a      	b.n	800d742 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a11      	ldr	r2, [pc, #68]	; (800d758 <HAL_TIM_Base_MspInit+0xdc>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d115      	bne.n	800d742 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d716:	2300      	movs	r3, #0
 800d718:	60bb      	str	r3, [r7, #8]
 800d71a:	4b0d      	ldr	r3, [pc, #52]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d71e:	4a0c      	ldr	r2, [pc, #48]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d720:	f043 0302 	orr.w	r3, r3, #2
 800d724:	6453      	str	r3, [r2, #68]	; 0x44
 800d726:	4b0a      	ldr	r3, [pc, #40]	; (800d750 <HAL_TIM_Base_MspInit+0xd4>)
 800d728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d72a:	f003 0302 	and.w	r3, r3, #2
 800d72e:	60bb      	str	r3, [r7, #8]
 800d730:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800d732:	2200      	movs	r2, #0
 800d734:	2101      	movs	r1, #1
 800d736:	202c      	movs	r0, #44	; 0x2c
 800d738:	f002 fef9 	bl	801052e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800d73c:	202c      	movs	r0, #44	; 0x2c
 800d73e:	f002 ff12 	bl	8010566 <HAL_NVIC_EnableIRQ>
}
 800d742:	bf00      	nop
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	40010000 	.word	0x40010000
 800d750:	40023800 	.word	0x40023800
 800d754:	40000c00 	.word	0x40000c00
 800d758:	40010400 	.word	0x40010400

0800d75c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08c      	sub	sp, #48	; 0x30
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d764:	f107 031c 	add.w	r3, r7, #28
 800d768:	2200      	movs	r2, #0
 800d76a:	601a      	str	r2, [r3, #0]
 800d76c:	605a      	str	r2, [r3, #4]
 800d76e:	609a      	str	r2, [r3, #8]
 800d770:	60da      	str	r2, [r3, #12]
 800d772:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a32      	ldr	r2, [pc, #200]	; (800d844 <HAL_TIM_Encoder_MspInit+0xe8>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d12c      	bne.n	800d7d8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d77e:	2300      	movs	r3, #0
 800d780:	61bb      	str	r3, [r7, #24]
 800d782:	4b31      	ldr	r3, [pc, #196]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d786:	4a30      	ldr	r2, [pc, #192]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d788:	f043 0302 	orr.w	r3, r3, #2
 800d78c:	6413      	str	r3, [r2, #64]	; 0x40
 800d78e:	4b2e      	ldr	r3, [pc, #184]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d792:	f003 0302 	and.w	r3, r3, #2
 800d796:	61bb      	str	r3, [r7, #24]
 800d798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d79a:	2300      	movs	r3, #0
 800d79c:	617b      	str	r3, [r7, #20]
 800d79e:	4b2a      	ldr	r3, [pc, #168]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a2:	4a29      	ldr	r2, [pc, #164]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d7a4:	f043 0301 	orr.w	r3, r3, #1
 800d7a8:	6313      	str	r3, [r2, #48]	; 0x30
 800d7aa:	4b27      	ldr	r3, [pc, #156]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ae:	f003 0301 	and.w	r3, r3, #1
 800d7b2:	617b      	str	r3, [r7, #20]
 800d7b4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d7b6:	23c0      	movs	r3, #192	; 0xc0
 800d7b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7ba:	2302      	movs	r3, #2
 800d7bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d7c6:	2302      	movs	r3, #2
 800d7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7ca:	f107 031c 	add.w	r3, r7, #28
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	481e      	ldr	r0, [pc, #120]	; (800d84c <HAL_TIM_Encoder_MspInit+0xf0>)
 800d7d2:	f003 fcab 	bl	801112c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800d7d6:	e030      	b.n	800d83a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4a1c      	ldr	r2, [pc, #112]	; (800d850 <HAL_TIM_Encoder_MspInit+0xf4>)
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d12b      	bne.n	800d83a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	613b      	str	r3, [r7, #16]
 800d7e6:	4b18      	ldr	r3, [pc, #96]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ea:	4a17      	ldr	r2, [pc, #92]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d7ec:	f043 0304 	orr.w	r3, r3, #4
 800d7f0:	6413      	str	r3, [r2, #64]	; 0x40
 800d7f2:	4b15      	ldr	r3, [pc, #84]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f6:	f003 0304 	and.w	r3, r3, #4
 800d7fa:	613b      	str	r3, [r7, #16]
 800d7fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d7fe:	2300      	movs	r3, #0
 800d800:	60fb      	str	r3, [r7, #12]
 800d802:	4b11      	ldr	r3, [pc, #68]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d806:	4a10      	ldr	r2, [pc, #64]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d808:	f043 0302 	orr.w	r3, r3, #2
 800d80c:	6313      	str	r3, [r2, #48]	; 0x30
 800d80e:	4b0e      	ldr	r3, [pc, #56]	; (800d848 <HAL_TIM_Encoder_MspInit+0xec>)
 800d810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d812:	f003 0302 	and.w	r3, r3, #2
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d81a:	23c0      	movs	r3, #192	; 0xc0
 800d81c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d81e:	2302      	movs	r3, #2
 800d820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d822:	2300      	movs	r3, #0
 800d824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d826:	2300      	movs	r3, #0
 800d828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800d82a:	2302      	movs	r3, #2
 800d82c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d82e:	f107 031c 	add.w	r3, r7, #28
 800d832:	4619      	mov	r1, r3
 800d834:	4807      	ldr	r0, [pc, #28]	; (800d854 <HAL_TIM_Encoder_MspInit+0xf8>)
 800d836:	f003 fc79 	bl	801112c <HAL_GPIO_Init>
}
 800d83a:	bf00      	nop
 800d83c:	3730      	adds	r7, #48	; 0x30
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	40000400 	.word	0x40000400
 800d848:	40023800 	.word	0x40023800
 800d84c:	40020000 	.word	0x40020000
 800d850:	40000800 	.word	0x40000800
 800d854:	40020400 	.word	0x40020400

0800d858 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b08c      	sub	sp, #48	; 0x30
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d860:	f107 031c 	add.w	r3, r7, #28
 800d864:	2200      	movs	r2, #0
 800d866:	601a      	str	r2, [r3, #0]
 800d868:	605a      	str	r2, [r3, #4]
 800d86a:	609a      	str	r2, [r3, #8]
 800d86c:	60da      	str	r2, [r3, #12]
 800d86e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d878:	d11e      	bne.n	800d8b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d87a:	2300      	movs	r3, #0
 800d87c:	61bb      	str	r3, [r7, #24]
 800d87e:	4b43      	ldr	r3, [pc, #268]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d882:	4a42      	ldr	r2, [pc, #264]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d884:	f043 0301 	orr.w	r3, r3, #1
 800d888:	6313      	str	r3, [r2, #48]	; 0x30
 800d88a:	4b40      	ldr	r3, [pc, #256]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	61bb      	str	r3, [r7, #24]
 800d894:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d896:	2308      	movs	r3, #8
 800d898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d89a:	2302      	movs	r3, #2
 800d89c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8a2:	2303      	movs	r3, #3
 800d8a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8aa:	f107 031c 	add.w	r3, r7, #28
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	4837      	ldr	r0, [pc, #220]	; (800d990 <HAL_TIM_MspPostInit+0x138>)
 800d8b2:	f003 fc3b 	bl	801112c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800d8b6:	e064      	b.n	800d982 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a35      	ldr	r2, [pc, #212]	; (800d994 <HAL_TIM_MspPostInit+0x13c>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d11e      	bne.n	800d900 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	617b      	str	r3, [r7, #20]
 800d8c6:	4b31      	ldr	r3, [pc, #196]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ca:	4a30      	ldr	r2, [pc, #192]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d8cc:	f043 0301 	orr.w	r3, r3, #1
 800d8d0:	6313      	str	r3, [r2, #48]	; 0x30
 800d8d2:	4b2e      	ldr	r3, [pc, #184]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d6:	f003 0301 	and.w	r3, r3, #1
 800d8da:	617b      	str	r3, [r7, #20]
 800d8dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d8de:	2302      	movs	r3, #2
 800d8e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8e2:	2302      	movs	r3, #2
 800d8e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800d8ee:	2302      	movs	r3, #2
 800d8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8f2:	f107 031c 	add.w	r3, r7, #28
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	4825      	ldr	r0, [pc, #148]	; (800d990 <HAL_TIM_MspPostInit+0x138>)
 800d8fa:	f003 fc17 	bl	801112c <HAL_GPIO_Init>
}
 800d8fe:	e040      	b.n	800d982 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a24      	ldr	r2, [pc, #144]	; (800d998 <HAL_TIM_MspPostInit+0x140>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d13b      	bne.n	800d982 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d90a:	2300      	movs	r3, #0
 800d90c:	613b      	str	r3, [r7, #16]
 800d90e:	4b1f      	ldr	r3, [pc, #124]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d912:	4a1e      	ldr	r2, [pc, #120]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d914:	f043 0301 	orr.w	r3, r3, #1
 800d918:	6313      	str	r3, [r2, #48]	; 0x30
 800d91a:	4b1c      	ldr	r3, [pc, #112]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d91e:	f003 0301 	and.w	r3, r3, #1
 800d922:	613b      	str	r3, [r7, #16]
 800d924:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d926:	2300      	movs	r3, #0
 800d928:	60fb      	str	r3, [r7, #12]
 800d92a:	4b18      	ldr	r3, [pc, #96]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d92e:	4a17      	ldr	r2, [pc, #92]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d930:	f043 0304 	orr.w	r3, r3, #4
 800d934:	6313      	str	r3, [r2, #48]	; 0x30
 800d936:	4b15      	ldr	r3, [pc, #84]	; (800d98c <HAL_TIM_MspPostInit+0x134>)
 800d938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d93a:	f003 0304 	and.w	r3, r3, #4
 800d93e:	60fb      	str	r3, [r7, #12]
 800d940:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800d942:	2320      	movs	r3, #32
 800d944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d946:	2302      	movs	r3, #2
 800d948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d94a:	2300      	movs	r3, #0
 800d94c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d94e:	2300      	movs	r3, #0
 800d950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d952:	2303      	movs	r3, #3
 800d954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d956:	f107 031c 	add.w	r3, r7, #28
 800d95a:	4619      	mov	r1, r3
 800d95c:	480c      	ldr	r0, [pc, #48]	; (800d990 <HAL_TIM_MspPostInit+0x138>)
 800d95e:	f003 fbe5 	bl	801112c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d962:	2340      	movs	r3, #64	; 0x40
 800d964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d966:	2302      	movs	r3, #2
 800d968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d96a:	2300      	movs	r3, #0
 800d96c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d96e:	2300      	movs	r3, #0
 800d970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d972:	2303      	movs	r3, #3
 800d974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d976:	f107 031c 	add.w	r3, r7, #28
 800d97a:	4619      	mov	r1, r3
 800d97c:	4807      	ldr	r0, [pc, #28]	; (800d99c <HAL_TIM_MspPostInit+0x144>)
 800d97e:	f003 fbd5 	bl	801112c <HAL_GPIO_Init>
}
 800d982:	bf00      	nop
 800d984:	3730      	adds	r7, #48	; 0x30
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	40023800 	.word	0x40023800
 800d990:	40020000 	.word	0x40020000
 800d994:	40000c00 	.word	0x40000c00
 800d998:	40010400 	.word	0x40010400
 800d99c:	40020800 	.word	0x40020800

0800d9a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b08a      	sub	sp, #40	; 0x28
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9a8:	f107 0314 	add.w	r3, r7, #20
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]
 800d9b0:	605a      	str	r2, [r3, #4]
 800d9b2:	609a      	str	r2, [r3, #8]
 800d9b4:	60da      	str	r2, [r3, #12]
 800d9b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a19      	ldr	r2, [pc, #100]	; (800da24 <HAL_UART_MspInit+0x84>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d12c      	bne.n	800da1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	613b      	str	r3, [r7, #16]
 800d9c6:	4b18      	ldr	r3, [pc, #96]	; (800da28 <HAL_UART_MspInit+0x88>)
 800d9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ca:	4a17      	ldr	r2, [pc, #92]	; (800da28 <HAL_UART_MspInit+0x88>)
 800d9cc:	f043 0310 	orr.w	r3, r3, #16
 800d9d0:	6453      	str	r3, [r2, #68]	; 0x44
 800d9d2:	4b15      	ldr	r3, [pc, #84]	; (800da28 <HAL_UART_MspInit+0x88>)
 800d9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9d6:	f003 0310 	and.w	r3, r3, #16
 800d9da:	613b      	str	r3, [r7, #16]
 800d9dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9de:	2300      	movs	r3, #0
 800d9e0:	60fb      	str	r3, [r7, #12]
 800d9e2:	4b11      	ldr	r3, [pc, #68]	; (800da28 <HAL_UART_MspInit+0x88>)
 800d9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9e6:	4a10      	ldr	r2, [pc, #64]	; (800da28 <HAL_UART_MspInit+0x88>)
 800d9e8:	f043 0301 	orr.w	r3, r3, #1
 800d9ec:	6313      	str	r3, [r2, #48]	; 0x30
 800d9ee:	4b0e      	ldr	r3, [pc, #56]	; (800da28 <HAL_UART_MspInit+0x88>)
 800d9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9f2:	f003 0301 	and.w	r3, r3, #1
 800d9f6:	60fb      	str	r3, [r7, #12]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d9fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800d9fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da00:	2302      	movs	r3, #2
 800da02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da04:	2300      	movs	r3, #0
 800da06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da08:	2303      	movs	r3, #3
 800da0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800da0c:	2307      	movs	r3, #7
 800da0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da10:	f107 0314 	add.w	r3, r7, #20
 800da14:	4619      	mov	r1, r3
 800da16:	4805      	ldr	r0, [pc, #20]	; (800da2c <HAL_UART_MspInit+0x8c>)
 800da18:	f003 fb88 	bl	801112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800da1c:	bf00      	nop
 800da1e:	3728      	adds	r7, #40	; 0x28
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	40011000 	.word	0x40011000
 800da28:	40023800 	.word	0x40023800
 800da2c:	40020000 	.word	0x40020000

0800da30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800da30:	b480      	push	{r7}
 800da32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800da34:	e7fe      	b.n	800da34 <NMI_Handler+0x4>

0800da36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800da36:	b480      	push	{r7}
 800da38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800da3a:	e7fe      	b.n	800da3a <HardFault_Handler+0x4>

0800da3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800da3c:	b480      	push	{r7}
 800da3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800da40:	e7fe      	b.n	800da40 <MemManage_Handler+0x4>

0800da42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800da42:	b480      	push	{r7}
 800da44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800da46:	e7fe      	b.n	800da46 <BusFault_Handler+0x4>

0800da48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800da48:	b480      	push	{r7}
 800da4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800da4c:	e7fe      	b.n	800da4c <UsageFault_Handler+0x4>

0800da4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800da4e:	b480      	push	{r7}
 800da50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800da52:	bf00      	nop
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800da5c:	b480      	push	{r7}
 800da5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800da60:	bf00      	nop
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr

0800da6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800da6a:	b480      	push	{r7}
 800da6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800da6e:	bf00      	nop
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800da7c:	f001 fffc 	bl	800fa78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800da80:	bf00      	nop
 800da82:	bd80      	pop	{r7, pc}

0800da84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800da88:	4802      	ldr	r0, [pc, #8]	; (800da94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800da8a:	f005 fa7b 	bl	8012f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800da8e:	bf00      	nop
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	20008e74 	.word	0x20008e74

0800da98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800da9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800daa0:	f003 fcf8 	bl	8011494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800daa4:	bf00      	nop
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800daac:	4802      	ldr	r0, [pc, #8]	; (800dab8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800daae:	f005 fa69 	bl	8012f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800dab2:	bf00      	nop
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	20008c2c 	.word	0x20008c2c

0800dabc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800dac0:	4802      	ldr	r0, [pc, #8]	; (800dacc <DMA2_Stream0_IRQHandler+0x10>)
 800dac2:	f002 fee1 	bl	8010888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800dac6:	bf00      	nop
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	20008e14 	.word	0x20008e14

0800dad0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800dad4:	4802      	ldr	r0, [pc, #8]	; (800dae0 <DMA2_Stream2_IRQHandler+0x10>)
 800dad6:	f002 fed7 	bl	8010888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800dada:	bf00      	nop
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	20008eb4 	.word	0x20008eb4

0800dae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800dae4:	b480      	push	{r7}
 800dae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dae8:	4b08      	ldr	r3, [pc, #32]	; (800db0c <SystemInit+0x28>)
 800daea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daee:	4a07      	ldr	r2, [pc, #28]	; (800db0c <SystemInit+0x28>)
 800daf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800daf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800daf8:	4b04      	ldr	r3, [pc, #16]	; (800db0c <SystemInit+0x28>)
 800dafa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dafe:	609a      	str	r2, [r3, #8]
#endif
}
 800db00:	bf00      	nop
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	e000ed00 	.word	0xe000ed00

0800db10 <initSearchData>:
#include "MicroMouse.h"
#include "Action.h"
#include "Search.h"

void initSearchData(maze_node *my_maze, profile *Mouse)
{
 800db10:	b570      	push	{r4, r5, r6, lr}
 800db12:	4604      	mov	r4, r0
 800db14:	b082      	sub	sp, #8
 800db16:	460d      	mov	r5, r1
    initMaze(my_maze);
 800db18:	f7fd f80a 	bl	800ab30 <initMaze>
    initWeight(my_maze); //3/20ms
 800db1c:	4620      	mov	r0, r4
 800db1e:	f7fc ffeb 	bl	800aaf8 <initWeight>

    //状態の初期化
    initProfile(Mouse, my_maze);
 800db22:	4621      	mov	r1, r4
 800db24:	4628      	mov	r0, r5
 800db26:	f7fd fec9 	bl	800b8bc <initProfile>
    Mouse->now.node = &(my_maze->RawNode[0][0]);
    Mouse->next.node = &(my_maze->RawNode[0][1]);
 800db2a:	f104 0308 	add.w	r3, r4, #8
 800db2e:	61eb      	str	r3, [r5, #28]

    //スタート座標にいる状態で、現在の重みを更新
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800db30:	2601      	movs	r6, #1
 800db32:	2302      	movs	r3, #2
 800db34:	786a      	ldrb	r2, [r5, #1]
 800db36:	7829      	ldrb	r1, [r5, #0]
    Mouse->now.node = &(my_maze->RawNode[0][0]);
 800db38:	612c      	str	r4, [r5, #16]
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800db3a:	4620      	mov	r0, r4
 800db3c:	e9cd 3600 	strd	r3, r6, [sp]
 800db40:	f7fd f9c8 	bl	800aed4 <updateAllNodeWeight>
//     updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
}
 800db44:	b002      	add	sp, #8
 800db46:	bd70      	pop	{r4, r5, r6, pc}

0800db48 <updateRealSearch>:

void updateRealSearch()
{
 800db48:	b570      	push	{r4, r5, r6, lr}
	//wall_state wall_st[4]={0};

	//壁センサ値を読んで、各方角の壁の有無を判定
		//区画進入直前なので、更新予定の方角と座標がNextに入っているはず
		//前後左右の値として入れる
	shiftState(&my_mouse);
 800db4a:	4d6f      	ldr	r5, [pc, #444]	; (800dd08 <updateRealSearch+0x1c0>)
{
 800db4c:	b082      	sub	sp, #8
	shiftState(&my_mouse);
 800db4e:	4628      	mov	r0, r5
 800db50:	f7fd fece 	bl	800b8f0 <shiftState>

    switch (my_mouse.now.car)
 800db54:	7aab      	ldrb	r3, [r5, #10]
 800db56:	2b06      	cmp	r3, #6
 800db58:	f200 80d0 	bhi.w	800dcfc <updateRealSearch+0x1b4>
 800db5c:	e8df f003 	tbb	[pc, r3]
 800db60:	ce76cea2 	.word	0xce76cea2
 800db64:	ce4a      	.short	0xce4a
 800db66:	04          	.byte	0x04
 800db67:	00          	.byte	0x00
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
    	wall_dir[0] = NOWALL;
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
        break;
    case west:
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800db68:	4b68      	ldr	r3, [pc, #416]	; (800dd0c <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800db6a:	eddf 5a69 	vldr	s11, [pc, #420]	; 800dd10 <updateRealSearch+0x1c8>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800db6e:	edd3 7a00 	vldr	s15, [r3]
 800db72:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800db76:	ed93 5a01 	vldr	s10, [r3, #4]
    	wall_dir[1] = NOWALL;
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800db7a:	eddf 6a66 	vldr	s13, [pc, #408]	; 800dd14 <updateRealSearch+0x1cc>
 800db7e:	ed93 6a02 	vldr	s12, [r3, #8]
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800db82:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800dd18 <updateRealSearch+0x1d0>
 800db86:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800db8a:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800db8e:	eeb4 5ae5 	vcmpe.f32	s10, s11
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800db92:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800db96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800db9a:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800db9e:	bfcc      	ite	gt
 800dba0:	2601      	movgt	r6, #1
 800dba2:	2600      	movle	r6, #0
 800dba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dbac:	bfcc      	ite	gt
 800dbae:	2101      	movgt	r1, #1
 800dbb0:	2100      	movle	r1, #0
 800dbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb6:	bfcc      	ite	gt
 800dbb8:	2201      	movgt	r2, #1
 800dbba:	2200      	movle	r2, #0
        break;
 800dbbc:	2000      	movs	r0, #0
//	Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
//	Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
//	Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
//	Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
    //アクションが終わるときがノードの上にいる状態なので、状態シフト済みとする（この関数はアクション中に呼び出される想定）
    my_mouse.now.wall.north = wall_dir[0];
 800dbbe:	7b2c      	ldrb	r4, [r5, #12]

	//getWallNow(&(my_mouse->now), &wall[0]);

    //現在方角、壁は、合ってる。座標とノードは？
    //ここで壁の存在を反映
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800dbc0:	7a6b      	ldrb	r3, [r5, #9]
    my_mouse.now.wall.north = wall_dir[0];
 800dbc2:	f366 0401 	bfi	r4, r6, #0, #2
    my_mouse.now.wall.east = wall_dir[1];
 800dbc6:	f360 0483 	bfi	r4, r0, #2, #2
    my_mouse.now.wall.south = wall_dir[2];
 800dbca:	f361 1405 	bfi	r4, r1, #4, #2
    my_mouse.now.wall.west = wall_dir[3];
 800dbce:	f362 1487 	bfi	r4, r2, #6, #2
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800dbd2:	4952      	ldr	r1, [pc, #328]	; (800dd1c <updateRealSearch+0x1d4>)
 800dbd4:	7a2a      	ldrb	r2, [r5, #8]
 800dbd6:	4852      	ldr	r0, [pc, #328]	; (800dd20 <updateRealSearch+0x1d8>)
    my_mouse.now.wall.west = wall_dir[3];
 800dbd8:	732c      	strb	r4, [r5, #12]
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800dbda:	f7fd f8b3 	bl	800ad44 <updateNodeThree>

	//壁の存在を基に重みマップを更新
	updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800dbde:	2401      	movs	r4, #1
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	786a      	ldrb	r2, [r5, #1]
 800dbe4:	7829      	ldrb	r1, [r5, #0]
 800dbe6:	484e      	ldr	r0, [pc, #312]	; (800dd20 <updateRealSearch+0x1d8>)
 800dbe8:	e9cd 3400 	strd	r3, r4, [sp]
 800dbec:	f7fd f972 	bl	800aed4 <updateAllNodeWeight>
}
 800dbf0:	b002      	add	sp, #8
 800dbf2:	bd70      	pop	{r4, r5, r6, pc}
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dbf4:	4b45      	ldr	r3, [pc, #276]	; (800dd0c <updateRealSearch+0x1c4>)
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dbf6:	eddf 5a47 	vldr	s11, [pc, #284]	; 800dd14 <updateRealSearch+0x1cc>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dbfa:	edd3 7a00 	vldr	s15, [r3]
 800dbfe:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dc02:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dc06:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dc0a:	ed9f 6a43 	vldr	s12, [pc, #268]	; 800dd18 <updateRealSearch+0x1d0>
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dc0e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800dd10 <updateRealSearch+0x1c8>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dc12:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800dc16:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800dc1a:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dc1e:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800dc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dc26:	eef4 7ac6 	vcmpe.f32	s15, s12
 800dc2a:	bfcc      	ite	gt
 800dc2c:	2001      	movgt	r0, #1
 800dc2e:	2000      	movle	r0, #0
 800dc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dc34:	eef4 6ac7 	vcmpe.f32	s13, s14
 800dc38:	bfcc      	ite	gt
 800dc3a:	2101      	movgt	r1, #1
 800dc3c:	2100      	movle	r1, #0
 800dc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc42:	bfcc      	ite	gt
 800dc44:	2201      	movgt	r2, #1
 800dc46:	2200      	movle	r2, #0
        break;
 800dc48:	2600      	movs	r6, #0
 800dc4a:	e7b8      	b.n	800dbbe <updateRealSearch+0x76>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dc4c:	4b2f      	ldr	r3, [pc, #188]	; (800dd0c <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dc4e:	eddf 5a31 	vldr	s11, [pc, #196]	; 800dd14 <updateRealSearch+0x1cc>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dc52:	edd3 7a00 	vldr	s15, [r3]
 800dc56:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dc5a:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dc5e:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dc62:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800dd18 <updateRealSearch+0x1d0>
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dc66:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800dd10 <updateRealSearch+0x1c8>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dc6a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800dc6e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800dc72:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dc76:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800dc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dc7e:	eef4 7ac6 	vcmpe.f32	s15, s12
 800dc82:	bfcc      	ite	gt
 800dc84:	2601      	movgt	r6, #1
 800dc86:	2600      	movle	r6, #0
 800dc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dc8c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800dc90:	bfcc      	ite	gt
 800dc92:	2001      	movgt	r0, #1
 800dc94:	2000      	movle	r0, #0
 800dc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc9a:	bfcc      	ite	gt
 800dc9c:	2101      	movgt	r1, #1
 800dc9e:	2100      	movle	r1, #0
        break;
 800dca0:	2200      	movs	r2, #0
 800dca2:	e78c      	b.n	800dbbe <updateRealSearch+0x76>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dca4:	4b19      	ldr	r3, [pc, #100]	; (800dd0c <updateRealSearch+0x1c4>)
 800dca6:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 800dd18 <updateRealSearch+0x1d0>
 800dcaa:	edd3 7a00 	vldr	s15, [r3]
 800dcae:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dcb2:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800dd10 <updateRealSearch+0x1c8>
 800dcb6:	edd3 5a01 	vldr	s11, [r3, #4]
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dcba:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800dd14 <updateRealSearch+0x1cc>
 800dcbe:	edd3 6a02 	vldr	s13, [r3, #8]
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dcc2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800dcc6:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800dcca:	ee67 7aa4 	vmul.f32	s15, s15, s9
        break;
 800dcce:	2100      	movs	r1, #0
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800dcd0:	eef4 7ac5 	vcmpe.f32	s15, s10
 800dcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800dcd8:	eef4 5ac6 	vcmpe.f32	s11, s12
 800dcdc:	bfcc      	ite	gt
 800dcde:	2601      	movgt	r6, #1
 800dce0:	460e      	movle	r6, r1
 800dce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800dce6:	eef4 6ac7 	vcmpe.f32	s13, s14
 800dcea:	bfcc      	ite	gt
 800dcec:	2001      	movgt	r0, #1
 800dcee:	4608      	movle	r0, r1
 800dcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf4:	bfcc      	ite	gt
 800dcf6:	2201      	movgt	r2, #1
 800dcf8:	460a      	movle	r2, r1
        break;
 800dcfa:	e760      	b.n	800dbbe <updateRealSearch+0x76>
    switch (my_mouse.now.car)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	4611      	mov	r1, r2
 800dd00:	4610      	mov	r0, r2
 800dd02:	4616      	mov	r6, r2
 800dd04:	e75b      	b.n	800dbbe <updateRealSearch+0x76>
 800dd06:	bf00      	nop
 800dd08:	20008224 	.word	0x20008224
 800dd0c:	200089f8 	.word	0x200089f8
 800dd10:	42b40000 	.word	0x42b40000
 800dd14:	42c80000 	.word	0x42c80000
 800dd18:	42340000 	.word	0x42340000
 800dd1c:	2000822c 	.word	0x2000822c
 800dd20:	200083d0 	.word	0x200083d0

0800dd24 <getNextDirection>:
//↑と↓は新ノードに来た時の処理なので、アクションの区切りをずらせばよさそう。
//現情報と次情報から次の進行方向を得る処理

void getNextDirection(maze_node *my_maze, profile *Mouse, char turn_mode)
{
 800dd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd28:	460c      	mov	r4, r1
	//選ぶノードがおかしい
	//重みが、壁がある方が小さくなってしまっている.
	//

	//メインでノード選択
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	7a89      	ldrb	r1, [r1, #10]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);

	//既知区間加速このswitch文中で書くかも
		//コマンドキューのときはここでコマンドを発行してキューに渡す
	AddVelocity = 0;
 800dd2e:	4d61      	ldr	r5, [pc, #388]	; (800deb4 <getNextDirection+0x190>)
{
 800dd30:	4616      	mov	r6, r2
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800dd32:	6922      	ldr	r2, [r4, #16]
{
 800dd34:	4607      	mov	r7, r0
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800dd36:	f7fd f9ef 	bl	800b118 <getNextNode>
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800dd3a:	f104 0114 	add.w	r1, r4, #20
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800dd3e:	4602      	mov	r2, r0
 800dd40:	61e0      	str	r0, [r4, #28]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800dd42:	f104 0008 	add.w	r0, r4, #8
 800dd46:	f7fd fc73 	bl	800b630 <getNextState>
	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
	_Bool accel_or_not = false;
	int accel_or_decel = 0;
	switch(Mouse->next.dir%8) //次の方角からアクションを選択
 800dd4a:	7de3      	ldrb	r3, [r4, #23]
	AddVelocity = 0;
 800dd4c:	2200      	movs	r2, #0
	switch(Mouse->next.dir%8) //次の方角からアクションを選択
 800dd4e:	f003 0307 	and.w	r3, r3, #7
	AddVelocity = 0;
 800dd52:	602a      	str	r2, [r5, #0]
	switch(Mouse->next.dir%8) //次の方角からアクションを選択
 800dd54:	2b06      	cmp	r3, #6
 800dd56:	d85b      	bhi.n	800de10 <getNextDirection+0xec>
 800dd58:	e8df f003 	tbb	[pc, r3]
 800dd5c:	4d1f5a0d 	.word	0x4d1f5a0d
 800dd60:	4028      	.short	0x4028
 800dd62:	04          	.byte	0x04
 800dd63:	00          	.byte	0x00
		Calc = SearchOrFast;
		TurnLeft(turn_mode);
		break;
	case left:
		//左旋回
		Calc = SearchOrFast;
 800dd64:	4a54      	ldr	r2, [pc, #336]	; (800deb8 <getNextDirection+0x194>)
 800dd66:	4b55      	ldr	r3, [pc, #340]	; (800debc <getNextDirection+0x198>)
 800dd68:	6812      	ldr	r2, [r2, #0]
 800dd6a:	601a      	str	r2, [r3, #0]
//		ChangeLED(4);
		TurnLeft(turn_mode);
 800dd6c:	4630      	mov	r0, r6
		break;
	}

}
 800dd6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800dd72:	f7fc b9a7 	b.w	800a0c4 <TurnLeft>
		accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800dd76:	4638      	mov	r0, r7
 800dd78:	69e2      	ldr	r2, [r4, #28]
 800dd7a:	7da1      	ldrb	r1, [r4, #22]
 800dd7c:	f7fd fb74 	bl	800b468 <judgeAccelorNot>
			if(VelocityMax == true)
 800dd80:	4b4f      	ldr	r3, [pc, #316]	; (800dec0 <getNextDirection+0x19c>)
 800dd82:	781b      	ldrb	r3, [r3, #0]
		if(accel_or_not == true) //既知で.直進
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d045      	beq.n	800de14 <getNextDirection+0xf0>
				AddVelocity = 245;
 800dd88:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800dec4 <getNextDirection+0x1a0>
			if(VelocityMax == true)
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f000 808c 	beq.w	800deaa <getNextDirection+0x186>
				accel_or_decel = 0; //そのまま
 800dd92:	2000      	movs	r0, #0
				AddVelocity = 245;
 800dd94:	edc5 7a00 	vstr	s15, [r5]
 800dd98:	e046      	b.n	800de28 <getNextDirection+0x104>
		Calc = SearchOrFast;
 800dd9a:	4a47      	ldr	r2, [pc, #284]	; (800deb8 <getNextDirection+0x194>)
 800dd9c:	4b47      	ldr	r3, [pc, #284]	; (800debc <getNextDirection+0x198>)
 800dd9e:	6812      	ldr	r2, [r2, #0]
 800dda0:	601a      	str	r2, [r3, #0]
		TurnRight(turn_mode);
 800dda2:	4630      	mov	r0, r6
}
 800dda4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800dda8:	f7fc b940 	b.w	800a02c <TurnRight>
		Calc = 1;//マップ更新したくないときは1を代入。
 800ddac:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800debc <getNextDirection+0x198>
 800ddb0:	2601      	movs	r6, #1
 800ddb2:	f8c8 6000 	str.w	r6, [r8]
		GoBack();
 800ddb6:	f7fc f9d3 	bl	800a160 <GoBack>
				accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800ddba:	4638      	mov	r0, r7
 800ddbc:	69e2      	ldr	r2, [r4, #28]
 800ddbe:	7da1      	ldrb	r1, [r4, #22]
 800ddc0:	f7fd fb52 	bl	800b468 <judgeAccelorNot>
					if(VelocityMax == true)
 800ddc4:	4b3e      	ldr	r3, [pc, #248]	; (800dec0 <getNextDirection+0x19c>)
 800ddc6:	781b      	ldrb	r3, [r3, #0]
				if(accel_or_not == true) //既知で.直進
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d03c      	beq.n	800de46 <getNextDirection+0x122>
						AddVelocity = 245;
 800ddcc:	eddf 7a3d 	vldr	s15, [pc, #244]	; 800dec4 <getNextDirection+0x1a0>
					if(VelocityMax == true)
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d066      	beq.n	800dea2 <getNextDirection+0x17e>
						accel_or_decel = 0; //そのまま
 800ddd4:	2000      	movs	r0, #0
						AddVelocity = 245;
 800ddd6:	edc5 7a00 	vstr	s15, [r5]
 800ddda:	e03d      	b.n	800de58 <getNextDirection+0x134>
		Calc = 1;//マップ更新したくないときは1を代入。
 800dddc:	4c37      	ldr	r4, [pc, #220]	; (800debc <getNextDirection+0x198>)
 800ddde:	2301      	movs	r3, #1
 800dde0:	6023      	str	r3, [r4, #0]
		GoBack();
 800dde2:	f7fc f9bd 	bl	800a160 <GoBack>
		Calc = SearchOrFast;
 800dde6:	4b34      	ldr	r3, [pc, #208]	; (800deb8 <getNextDirection+0x194>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	6023      	str	r3, [r4, #0]
		TurnLeft(turn_mode);
 800ddec:	4630      	mov	r0, r6
}
 800ddee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800ddf2:	f7fc b967 	b.w	800a0c4 <TurnLeft>
		Calc = 1;//マップ更新したくないときは1を代入。
 800ddf6:	4c31      	ldr	r4, [pc, #196]	; (800debc <getNextDirection+0x198>)
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	6023      	str	r3, [r4, #0]
		GoBack(); //間の座標変動を
 800ddfc:	f7fc f9b0 	bl	800a160 <GoBack>
		Calc = SearchOrFast;
 800de00:	4b2d      	ldr	r3, [pc, #180]	; (800deb8 <getNextDirection+0x194>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	6023      	str	r3, [r4, #0]
		TurnRight(turn_mode);
 800de06:	4630      	mov	r0, r6
}
 800de08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800de0c:	f7fc b90e 	b.w	800a02c <TurnRight>
}
 800de10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(VelocityMax == true)
 800de14:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d137      	bne.n	800de8c <getNextDirection+0x168>
				AddVelocity = 0;
 800de1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800dec8 <getNextDirection+0x1a4>
 800de20:	eef0 7a47 	vmov.f32	s15, s14
 800de24:	ed85 7a00 	vstr	s14, [r5]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800de28:	4b28      	ldr	r3, [pc, #160]	; (800decc <getNextDirection+0x1a8>)
		Calc = SearchOrFast;
 800de2a:	4a23      	ldr	r2, [pc, #140]	; (800deb8 <getNextDirection+0x194>)
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800de2c:	edd3 0a00 	vldr	s1, [r3]
		Calc = SearchOrFast;
 800de30:	4b22      	ldr	r3, [pc, #136]	; (800debc <getNextDirection+0x198>)
 800de32:	6812      	ldr	r2, [r2, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800de34:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800ded0 <getNextDirection+0x1ac>
		Calc = SearchOrFast;
 800de38:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800de3a:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800de3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800de42:	f7fb bf69 	b.w	8009d18 <GoStraight>
					if(VelocityMax == true)
 800de46:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800de4a:	b9a3      	cbnz	r3, 800de76 <getNextDirection+0x152>
						AddVelocity = 0;
 800de4c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800dec8 <getNextDirection+0x1a4>
 800de50:	eef0 7a47 	vmov.f32	s15, s14
 800de54:	ed85 7a00 	vstr	s14, [r5]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800de58:	4a1c      	ldr	r2, [pc, #112]	; (800decc <getNextDirection+0x1a8>)
		Calc = SearchOrFast;
 800de5a:	4b17      	ldr	r3, [pc, #92]	; (800deb8 <getNextDirection+0x194>)
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800de5c:	edd2 0a00 	vldr	s1, [r2]
		Calc = SearchOrFast;
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f8c8 3000 	str.w	r3, [r8]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800de66:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800ded0 <getNextDirection+0x1ac>
 800de6a:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800de6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800de72:	f7fb bf51 	b.w	8009d18 <GoStraight>
						cnt += 2;
 800de76:	4a17      	ldr	r2, [pc, #92]	; (800ded4 <getNextDirection+0x1b0>)
						AddVelocity = 0;
 800de78:	eddf 7a13 	vldr	s15, [pc, #76]	; 800dec8 <getNextDirection+0x1a4>
						cnt += 2;
 800de7c:	6813      	ldr	r3, [r2, #0]
						AddVelocity = 0;
 800de7e:	edc5 7a00 	vstr	s15, [r5]
						cnt += 2;
 800de82:	3302      	adds	r3, #2
 800de84:	6013      	str	r3, [r2, #0]
						accel_or_decel = -1; //減速
 800de86:	f04f 30ff 	mov.w	r0, #4294967295
 800de8a:	e7e5      	b.n	800de58 <getNextDirection+0x134>
				cnt += 2;
 800de8c:	4a12      	ldr	r2, [pc, #72]	; (800ded8 <getNextDirection+0x1b4>)
				AddVelocity = 0;
 800de8e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800dec8 <getNextDirection+0x1a4>
				cnt += 2;
 800de92:	6813      	ldr	r3, [r2, #0]
				AddVelocity = 0;
 800de94:	edc5 7a00 	vstr	s15, [r5]
				cnt += 2;
 800de98:	3302      	adds	r3, #2
 800de9a:	6013      	str	r3, [r2, #0]
				accel_or_decel = -1; //減速
 800de9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dea0:	e7c2      	b.n	800de28 <getNextDirection+0x104>
						accel_or_decel = 1; //加速
 800dea2:	4630      	mov	r0, r6
						AddVelocity = 245;
 800dea4:	edc5 7a00 	vstr	s15, [r5]
 800dea8:	e7d6      	b.n	800de58 <getNextDirection+0x134>
				accel_or_decel = 1; //加速
 800deaa:	2001      	movs	r0, #1
				AddVelocity = 245;
 800deac:	edc5 7a00 	vstr	s15, [r5]
 800deb0:	e7ba      	b.n	800de28 <getNextDirection+0x104>
 800deb2:	bf00      	nop
 800deb4:	20008994 	.word	0x20008994
 800deb8:	20008c24 	.word	0x20008c24
 800debc:	20008c28 	.word	0x20008c28
 800dec0:	20008aaa 	.word	0x20008aaa
 800dec4:	43750000 	.word	0x43750000
 800dec8:	00000000 	.word	0x00000000
 800decc:	20008aac 	.word	0x20008aac
 800ded0:	42b40000 	.word	0x42b40000
 800ded4:	20000030 	.word	0x20000030
 800ded8:	2000002c 	.word	0x2000002c

0800dedc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b086      	sub	sp, #24
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dee8:	2300      	movs	r3, #0
 800deea:	617b      	str	r3, [r7, #20]
 800deec:	e00a      	b.n	800df04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800deee:	f7fe fcbd 	bl	800c86c <__io_getchar>
 800def2:	4601      	mov	r1, r0
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	1c5a      	adds	r2, r3, #1
 800def8:	60ba      	str	r2, [r7, #8]
 800defa:	b2ca      	uxtb	r2, r1
 800defc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	3301      	adds	r3, #1
 800df02:	617b      	str	r3, [r7, #20]
 800df04:	697a      	ldr	r2, [r7, #20]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	429a      	cmp	r2, r3
 800df0a:	dbf0      	blt.n	800deee <_read+0x12>
	}

return len;
 800df0c:	687b      	ldr	r3, [r7, #4]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3718      	adds	r7, #24
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b086      	sub	sp, #24
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	60f8      	str	r0, [r7, #12]
 800df1e:	60b9      	str	r1, [r7, #8]
 800df20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800df22:	2300      	movs	r3, #0
 800df24:	617b      	str	r3, [r7, #20]
 800df26:	e009      	b.n	800df3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	60ba      	str	r2, [r7, #8]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	4618      	mov	r0, r3
 800df32:	f7fe fc89 	bl	800c848 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	3301      	adds	r3, #1
 800df3a:	617b      	str	r3, [r7, #20]
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	429a      	cmp	r2, r3
 800df42:	dbf1      	blt.n	800df28 <_write+0x12>
	}
	return len;
 800df44:	687b      	ldr	r3, [r7, #4]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3718      	adds	r7, #24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <_close>:

int _close(int file)
{
 800df4e:	b480      	push	{r7}
 800df50:	b083      	sub	sp, #12
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
	return -1;
 800df56:	f04f 33ff 	mov.w	r3, #4294967295
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	370c      	adds	r7, #12
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800df66:	b480      	push	{r7}
 800df68:	b083      	sub	sp, #12
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
 800df6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800df76:	605a      	str	r2, [r3, #4]
	return 0;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <_isatty>:

int _isatty(int file)
{
 800df86:	b480      	push	{r7}
 800df88:	b083      	sub	sp, #12
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
	return 1;
 800df8e:	2301      	movs	r3, #1
}
 800df90:	4618      	mov	r0, r3
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b085      	sub	sp, #20
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
	return 0;
 800dfa8:	2300      	movs	r3, #0
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3714      	adds	r7, #20
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr
	...

0800dfb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b086      	sub	sp, #24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dfc0:	4a14      	ldr	r2, [pc, #80]	; (800e014 <_sbrk+0x5c>)
 800dfc2:	4b15      	ldr	r3, [pc, #84]	; (800e018 <_sbrk+0x60>)
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dfcc:	4b13      	ldr	r3, [pc, #76]	; (800e01c <_sbrk+0x64>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d102      	bne.n	800dfda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800dfd4:	4b11      	ldr	r3, [pc, #68]	; (800e01c <_sbrk+0x64>)
 800dfd6:	4a12      	ldr	r2, [pc, #72]	; (800e020 <_sbrk+0x68>)
 800dfd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dfda:	4b10      	ldr	r3, [pc, #64]	; (800e01c <_sbrk+0x64>)
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	693a      	ldr	r2, [r7, #16]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d207      	bcs.n	800dff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dfe8:	f006 fd58 	bl	8014a9c <__errno>
 800dfec:	4602      	mov	r2, r0
 800dfee:	230c      	movs	r3, #12
 800dff0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800dff2:	f04f 33ff 	mov.w	r3, #4294967295
 800dff6:	e009      	b.n	800e00c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dff8:	4b08      	ldr	r3, [pc, #32]	; (800e01c <_sbrk+0x64>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dffe:	4b07      	ldr	r3, [pc, #28]	; (800e01c <_sbrk+0x64>)
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4413      	add	r3, r2
 800e006:	4a05      	ldr	r2, [pc, #20]	; (800e01c <_sbrk+0x64>)
 800e008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e00a:	68fb      	ldr	r3, [r7, #12]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3718      	adds	r7, #24
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	20020000 	.word	0x20020000
 800e018:	00000400 	.word	0x00000400
 800e01c:	20007f4c 	.word	0x20007f4c
 800e020:	20008f50 	.word	0x20008f50

0800e024 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800e024:	b580      	push	{r7, lr}
 800e026:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800e028:	2203      	movs	r2, #3
 800e02a:	490a      	ldr	r1, [pc, #40]	; (800e054 <ADCStart+0x30>)
 800e02c:	480a      	ldr	r0, [pc, #40]	; (800e058 <ADCStart+0x34>)
 800e02e:	f001 fda9 	bl	800fb84 <HAL_ADC_Start_DMA>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d001      	beq.n	800e03c <ADCStart+0x18>
	{
		Error_Handler();
 800e038:	f7ff f9b4 	bl	800d3a4 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800e03c:	2202      	movs	r2, #2
 800e03e:	4907      	ldr	r1, [pc, #28]	; (800e05c <ADCStart+0x38>)
 800e040:	4807      	ldr	r0, [pc, #28]	; (800e060 <ADCStart+0x3c>)
 800e042:	f001 fd9f 	bl	800fb84 <HAL_ADC_Start_DMA>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d001      	beq.n	800e050 <ADCStart+0x2c>
	{
		Error_Handler();
 800e04c:	f7ff f9aa 	bl	800d3a4 <Error_Handler>
	}

}
 800e050:	bf00      	nop
 800e052:	bd80      	pop	{r7, pc}
 800e054:	20007fd0 	.word	0x20007fd0
 800e058:	20008d8c 	.word	0x20008d8c
 800e05c:	20007fdc 	.word	0x20007fdc
 800e060:	20008cac 	.word	0x20008cac

0800e064 <ADCStop>:
void ADCStop()
{
 800e064:	b580      	push	{r7, lr}
 800e066:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800e068:	480e      	ldr	r0, [pc, #56]	; (800e0a4 <ADCStop+0x40>)
 800e06a:	f001 fe7d 	bl	800fd68 <HAL_ADC_Stop_DMA>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d007      	beq.n	800e084 <ADCStop+0x20>
	{
		printf("な\r\n");
 800e074:	480c      	ldr	r0, [pc, #48]	; (800e0a8 <ADCStop+0x44>)
 800e076:	f008 fad9 	bl	801662c <puts>
		Error_Handler();
 800e07a:	f7ff f993 	bl	800d3a4 <Error_Handler>
		printf("に\r\n");
 800e07e:	480b      	ldr	r0, [pc, #44]	; (800e0ac <ADCStop+0x48>)
 800e080:	f008 fad4 	bl	801662c <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800e084:	480a      	ldr	r0, [pc, #40]	; (800e0b0 <ADCStop+0x4c>)
 800e086:	f001 fe6f 	bl	800fd68 <HAL_ADC_Stop_DMA>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d007      	beq.n	800e0a0 <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 800e090:	4808      	ldr	r0, [pc, #32]	; (800e0b4 <ADCStop+0x50>)
 800e092:	f008 facb 	bl	801662c <puts>
		Error_Handler();
 800e096:	f7ff f985 	bl	800d3a4 <Error_Handler>
		printf("ね\r\n");
 800e09a:	4807      	ldr	r0, [pc, #28]	; (800e0b8 <ADCStop+0x54>)
 800e09c:	f008 fac6 	bl	801662c <puts>
	}
}
 800e0a0:	bf00      	nop
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	20008d8c 	.word	0x20008d8c
 800e0a8:	08019fac 	.word	0x08019fac
 800e0ac:	08019fb4 	.word	0x08019fb4
 800e0b0:	20008cac 	.word	0x20008cac
 800e0b4:	08019fbc 	.word	0x08019fbc
 800e0b8:	08019fc4 	.word	0x08019fc4

0800e0bc <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800e0c0:	4b05      	ldr	r3, [pc, #20]	; (800e0d8 <FLASH_Unlock+0x1c>)
 800e0c2:	4a06      	ldr	r2, [pc, #24]	; (800e0dc <FLASH_Unlock+0x20>)
 800e0c4:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800e0c6:	4b04      	ldr	r3, [pc, #16]	; (800e0d8 <FLASH_Unlock+0x1c>)
 800e0c8:	4a05      	ldr	r2, [pc, #20]	; (800e0e0 <FLASH_Unlock+0x24>)
 800e0ca:	605a      	str	r2, [r3, #4]
}
 800e0cc:	bf00      	nop
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr
 800e0d6:	bf00      	nop
 800e0d8:	40023c00 	.word	0x40023c00
 800e0dc:	45670123 	.word	0x45670123
 800e0e0:	cdef89ab 	.word	0xcdef89ab

0800e0e4 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800e0e8:	4b05      	ldr	r3, [pc, #20]	; (800e100 <FLASH_Lock+0x1c>)
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	4a04      	ldr	r2, [pc, #16]	; (800e100 <FLASH_Lock+0x1c>)
 800e0ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e0f2:	6113      	str	r3, [r2, #16]

}
 800e0f4:	bf00      	nop
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop
 800e100:	40023c00 	.word	0x40023c00

0800e104 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800e104:	b480      	push	{r7}
 800e106:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800e108:	bf00      	nop
 800e10a:	4b05      	ldr	r3, [pc, #20]	; (800e120 <FLASH_WaitBusy+0x1c>)
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1f9      	bne.n	800e10a <FLASH_WaitBusy+0x6>
}
 800e116:	bf00      	nop
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr
 800e120:	40023c00 	.word	0x40023c00

0800e124 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800e12e:	f7ff ffc5 	bl	800e0bc <FLASH_Unlock>

	FLASH_WaitBusy();
 800e132:	f7ff ffe7 	bl	800e104 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800e136:	4b0e      	ldr	r3, [pc, #56]	; (800e170 <FLASH_Write_Word+0x4c>)
 800e138:	691b      	ldr	r3, [r3, #16]
 800e13a:	4a0d      	ldr	r2, [pc, #52]	; (800e170 <FLASH_Write_Word+0x4c>)
 800e13c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e140:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800e142:	4b0b      	ldr	r3, [pc, #44]	; (800e170 <FLASH_Write_Word+0x4c>)
 800e144:	691b      	ldr	r3, [r3, #16]
 800e146:	4a0a      	ldr	r2, [pc, #40]	; (800e170 <FLASH_Write_Word+0x4c>)
 800e148:	f043 0301 	orr.w	r3, r3, #1
 800e14c:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	683a      	ldr	r2, [r7, #0]
 800e152:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800e154:	f7ff ffd6 	bl	800e104 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800e158:	4b05      	ldr	r3, [pc, #20]	; (800e170 <FLASH_Write_Word+0x4c>)
 800e15a:	691b      	ldr	r3, [r3, #16]
 800e15c:	4a04      	ldr	r2, [pc, #16]	; (800e170 <FLASH_Write_Word+0x4c>)
 800e15e:	f023 0301 	bic.w	r3, r3, #1
 800e162:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800e164:	f7ff ffbe 	bl	800e0e4 <FLASH_Lock>
}
 800e168:	bf00      	nop
 800e16a:	3708      	adds	r7, #8
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	40023c00 	.word	0x40023c00

0800e174 <FLASH_Read_Word>:
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800e17e:	f7ff ff9d 	bl	800e0bc <FLASH_Unlock>

	FLASH_WaitBusy();
 800e182:	f7ff ffbf 	bl	800e104 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800e186:	4b0f      	ldr	r3, [pc, #60]	; (800e1c4 <FLASH_Read_Word+0x50>)
 800e188:	691b      	ldr	r3, [r3, #16]
 800e18a:	4a0e      	ldr	r2, [pc, #56]	; (800e1c4 <FLASH_Read_Word+0x50>)
 800e18c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e190:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800e192:	4b0c      	ldr	r3, [pc, #48]	; (800e1c4 <FLASH_Read_Word+0x50>)
 800e194:	691b      	ldr	r3, [r3, #16]
 800e196:	4a0b      	ldr	r2, [pc, #44]	; (800e1c4 <FLASH_Read_Word+0x50>)
 800e198:	f043 0301 	orr.w	r3, r3, #1
 800e19c:	6113      	str	r3, [r2, #16]

	* data = *(__IO uint32_t*)address;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800e1a6:	f7ff ffad 	bl	800e104 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800e1aa:	4b06      	ldr	r3, [pc, #24]	; (800e1c4 <FLASH_Read_Word+0x50>)
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	4a05      	ldr	r2, [pc, #20]	; (800e1c4 <FLASH_Read_Word+0x50>)
 800e1b0:	f023 0301 	bic.w	r3, r3, #1
 800e1b4:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800e1b6:	f7ff ff95 	bl	800e0e4 <FLASH_Lock>
}
 800e1ba:	bf00      	nop
 800e1bc:	3708      	adds	r7, #8
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	40023c00 	.word	0x40023c00

0800e1c8 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800e1d4:	f7ff ff72 	bl	800e0bc <FLASH_Unlock>

	FLASH_WaitBusy();
 800e1d8:	f7ff ff94 	bl	800e104 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800e1dc:	4b0e      	ldr	r3, [pc, #56]	; (800e218 <FLASH_Write_Word_F+0x50>)
 800e1de:	691b      	ldr	r3, [r3, #16]
 800e1e0:	4a0d      	ldr	r2, [pc, #52]	; (800e218 <FLASH_Write_Word_F+0x50>)
 800e1e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e1e6:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800e1e8:	4b0b      	ldr	r3, [pc, #44]	; (800e218 <FLASH_Write_Word_F+0x50>)
 800e1ea:	691b      	ldr	r3, [r3, #16]
 800e1ec:	4a0a      	ldr	r2, [pc, #40]	; (800e218 <FLASH_Write_Word_F+0x50>)
 800e1ee:	f043 0301 	orr.w	r3, r3, #1
 800e1f2:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	683a      	ldr	r2, [r7, #0]
 800e1f8:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800e1fa:	f7ff ff83 	bl	800e104 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800e1fe:	4b06      	ldr	r3, [pc, #24]	; (800e218 <FLASH_Write_Word_F+0x50>)
 800e200:	691b      	ldr	r3, [r3, #16]
 800e202:	4a05      	ldr	r2, [pc, #20]	; (800e218 <FLASH_Write_Word_F+0x50>)
 800e204:	f023 0301 	bic.w	r3, r3, #1
 800e208:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800e20a:	f7ff ff6b 	bl	800e0e4 <FLASH_Lock>
}
 800e20e:	bf00      	nop
 800e210:	3708      	adds	r7, #8
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	40023c00 	.word	0x40023c00

0800e21c <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800e226:	f7ff ff49 	bl	800e0bc <FLASH_Unlock>

	FLASH_WaitBusy();
 800e22a:	f7ff ff6b 	bl	800e104 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800e22e:	4b0f      	ldr	r3, [pc, #60]	; (800e26c <FLASH_Read_Word_F+0x50>)
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	4a0e      	ldr	r2, [pc, #56]	; (800e26c <FLASH_Read_Word_F+0x50>)
 800e234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e238:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800e23a:	4b0c      	ldr	r3, [pc, #48]	; (800e26c <FLASH_Read_Word_F+0x50>)
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	4a0b      	ldr	r2, [pc, #44]	; (800e26c <FLASH_Read_Word_F+0x50>)
 800e240:	f043 0301 	orr.w	r3, r3, #1
 800e244:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800e24e:	f7ff ff59 	bl	800e104 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800e252:	4b06      	ldr	r3, [pc, #24]	; (800e26c <FLASH_Read_Word_F+0x50>)
 800e254:	691b      	ldr	r3, [r3, #16]
 800e256:	4a05      	ldr	r2, [pc, #20]	; (800e26c <FLASH_Read_Word_F+0x50>)
 800e258:	f023 0301 	bic.w	r3, r3, #1
 800e25c:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800e25e:	f7ff ff41 	bl	800e0e4 <FLASH_Lock>
}
 800e262:	bf00      	nop
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	40023c00 	.word	0x40023c00

0800e270 <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b088      	sub	sp, #32
 800e274:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800e276:	f002 fd6f 	bl	8010d58 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800e27a:	2300      	movs	r3, #0
 800e27c:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800e27e:	2301      	movs	r3, #1
 800e280:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800e282:	2302      	movs	r3, #2
 800e284:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800e286:	2301      	movs	r3, #1
 800e288:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800e28a:	1d3a      	adds	r2, r7, #4
 800e28c:	f107 0308 	add.w	r3, r7, #8
 800e290:	4611      	mov	r1, r2
 800e292:	4618      	mov	r0, r3
 800e294:	f002 fe28 	bl	8010ee8 <HAL_FLASHEx_Erase>
 800e298:	4603      	mov	r3, r0
 800e29a:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800e29c:	f002 fd7e 	bl	8010d9c <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800e2a0:	7ffb      	ldrb	r3, [r7, #31]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d105      	bne.n	800e2b2 <Flash_clear_sector1+0x42>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ac:	d101      	bne.n	800e2b2 <Flash_clear_sector1+0x42>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	e000      	b.n	800e2b4 <Flash_clear_sector1+0x44>
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	f003 0301 	and.w	r3, r3, #1
 800e2b8:	b2db      	uxtb	r3, r3
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3720      	adds	r7, #32
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}

0800e2c2 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800e2c2:	b580      	push	{r7, lr}
 800e2c4:	b088      	sub	sp, #32
 800e2c6:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800e2c8:	f002 fd46 	bl	8010d58 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800e2d0:	2309      	movs	r3, #9
 800e2d2:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800e2d4:	2302      	movs	r3, #2
 800e2d6:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800e2dc:	1d3a      	adds	r2, r7, #4
 800e2de:	f107 0308 	add.w	r3, r7, #8
 800e2e2:	4611      	mov	r1, r2
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f002 fdff 	bl	8010ee8 <HAL_FLASHEx_Erase>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800e2ee:	f002 fd55 	bl	8010d9c <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800e2f2:	7ffb      	ldrb	r3, [r7, #31]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d105      	bne.n	800e304 <Flash_clear_sector9+0x42>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fe:	d101      	bne.n	800e304 <Flash_clear_sector9+0x42>
 800e300:	2301      	movs	r3, #1
 800e302:	e000      	b.n	800e306 <Flash_clear_sector9+0x44>
 800e304:	2300      	movs	r3, #0
 800e306:	f003 0301 	and.w	r3, r3, #1
 800e30a:	b2db      	uxtb	r3, r3
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3720      	adds	r7, #32
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <read_byte>:
//		Error_Handler();
//		printf("エラー2\r\n");
//	}
//	printf("ok\r\n");
//}
inline uint8_t read_byte( uint8_t reg ) {
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	4603      	mov	r3, r0
 800e31c:	71fb      	strb	r3, [r7, #7]

	uint8_t ret,val;

	ret = reg | 0x80;
 800e31e:	79fb      	ldrb	r3, [r7, #7]
 800e320:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e324:	b2db      	uxtb	r3, r3
 800e326:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800e328:	2200      	movs	r2, #0
 800e32a:	2104      	movs	r1, #4
 800e32c:	480d      	ldr	r0, [pc, #52]	; (800e364 <read_byte+0x50>)
 800e32e:	f003 f897 	bl	8011460 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e332:	f107 010f 	add.w	r1, r7, #15
 800e336:	2364      	movs	r3, #100	; 0x64
 800e338:	2201      	movs	r2, #1
 800e33a:	480b      	ldr	r0, [pc, #44]	; (800e368 <read_byte+0x54>)
 800e33c:	f003 fd88 	bl	8011e50 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800e340:	f107 010e 	add.w	r1, r7, #14
 800e344:	2364      	movs	r3, #100	; 0x64
 800e346:	2201      	movs	r2, #1
 800e348:	4807      	ldr	r0, [pc, #28]	; (800e368 <read_byte+0x54>)
 800e34a:	f003 feb5 	bl	80120b8 <HAL_SPI_Receive>
	CS_SET;
 800e34e:	2201      	movs	r2, #1
 800e350:	2104      	movs	r1, #4
 800e352:	4804      	ldr	r0, [pc, #16]	; (800e364 <read_byte+0x50>)
 800e354:	f003 f884 	bl	8011460 <HAL_GPIO_WritePin>
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
 800e358:	7bbb      	ldrb	r3, [r7, #14]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	40020c00 	.word	0x40020c00
 800e368:	20008d34 	.word	0x20008d34

0800e36c <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b086      	sub	sp, #24
 800e370:	af00      	add	r7, sp, #0
 800e372:	4603      	mov	r3, r0
 800e374:	460a      	mov	r2, r1
 800e376:	71fb      	strb	r3, [r7, #7]
 800e378:	4613      	mov	r3, r2
 800e37a:	71bb      	strb	r3, [r7, #6]

	uint8_t ret1, ret2,val1,val2;
	uint8_t ret[2] = {
 800e37c:	79fb      	ldrb	r3, [r7, #7]
 800e37e:	723b      	strb	r3, [r7, #8]
 800e380:	79bb      	ldrb	r3, [r7, #6]
 800e382:	727b      	strb	r3, [r7, #9]
			a,//0x37,
			b//0x38,
	};
	int16_t law_data;
	float res;
	ret1 = ret[0] | 0x80;
 800e384:	7a3b      	ldrb	r3, [r7, #8]
 800e386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	73fb      	strb	r3, [r7, #15]
	ret2 = ret[1] | 0x80;
 800e38e:	7a7b      	ldrb	r3, [r7, #9]
 800e390:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e394:	b2db      	uxtb	r3, r3
 800e396:	73bb      	strb	r3, [r7, #14]
//	reg[0] = 0x37;
//	reg[1] = 0x38;
//
//	ret = reg[0] | 0x80;
	CS_RESET;
 800e398:	2200      	movs	r2, #0
 800e39a:	2104      	movs	r1, #4
 800e39c:	4822      	ldr	r0, [pc, #136]	; (800e428 <ReadIMU+0xbc>)
 800e39e:	f003 f85f 	bl	8011460 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800e3a2:	f107 010f 	add.w	r1, r7, #15
 800e3a6:	2364      	movs	r3, #100	; 0x64
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	4820      	ldr	r0, [pc, #128]	; (800e42c <ReadIMU+0xc0>)
 800e3ac:	f003 fd50 	bl	8011e50 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800e3b0:	f107 010d 	add.w	r1, r7, #13
 800e3b4:	2364      	movs	r3, #100	; 0x64
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	481c      	ldr	r0, [pc, #112]	; (800e42c <ReadIMU+0xc0>)
 800e3ba:	f003 fe7d 	bl	80120b8 <HAL_SPI_Receive>
	CS_SET;
 800e3be:	2201      	movs	r2, #1
 800e3c0:	2104      	movs	r1, #4
 800e3c2:	4819      	ldr	r0, [pc, #100]	; (800e428 <ReadIMU+0xbc>)
 800e3c4:	f003 f84c 	bl	8011460 <HAL_GPIO_WritePin>

//	ret = reg[1] | 0x80;
	CS_RESET;
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	2104      	movs	r1, #4
 800e3cc:	4816      	ldr	r0, [pc, #88]	; (800e428 <ReadIMU+0xbc>)
 800e3ce:	f003 f847 	bl	8011460 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800e3d2:	f107 010e 	add.w	r1, r7, #14
 800e3d6:	2364      	movs	r3, #100	; 0x64
 800e3d8:	2201      	movs	r2, #1
 800e3da:	4814      	ldr	r0, [pc, #80]	; (800e42c <ReadIMU+0xc0>)
 800e3dc:	f003 fd38 	bl	8011e50 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800e3e0:	f107 010c 	add.w	r1, r7, #12
 800e3e4:	2364      	movs	r3, #100	; 0x64
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	4810      	ldr	r0, [pc, #64]	; (800e42c <ReadIMU+0xc0>)
 800e3ea:	f003 fe65 	bl	80120b8 <HAL_SPI_Receive>
	CS_SET;
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	2104      	movs	r1, #4
 800e3f2:	480d      	ldr	r0, [pc, #52]	; (800e428 <ReadIMU+0xbc>)
 800e3f4:	f003 f834 	bl	8011460 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800e3f8:	7b7b      	ldrb	r3, [r7, #13]
 800e3fa:	021b      	lsls	r3, r3, #8
 800e3fc:	b21a      	sxth	r2, r3
 800e3fe:	7b3b      	ldrb	r3, [r7, #12]
 800e400:	b21b      	sxth	r3, r3
 800e402:	4313      	orrs	r3, r2
 800e404:	82fb      	strh	r3, [r7, #22]
	res = (float)law_data;
 800e406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e40a:	ee07 3a90 	vmov	s15, r3
 800e40e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e412:	edc7 7a04 	vstr	s15, [r7, #16]
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return res;
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	ee07 3a90 	vmov	s15, r3
}
 800e41c:	eeb0 0a67 	vmov.f32	s0, s15
 800e420:	3718      	adds	r7, #24
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	40020c00 	.word	0x40020c00
 800e42c:	20008d34 	.word	0x20008d34

0800e430 <compare_num>:


int compare_num(const void * n1, const void * n2)
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
	if (*(int16_t *)n1 > *(int16_t *)n2)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e446:	429a      	cmp	r2, r3
 800e448:	dd01      	ble.n	800e44e <compare_num+0x1e>
	{
		return 1;
 800e44a:	2301      	movs	r3, #1
 800e44c:	e00b      	b.n	800e466 <compare_num+0x36>
	}
	else if (*(int16_t *)n1 < *(int16_t *)n2)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	da02      	bge.n	800e464 <compare_num+0x34>
	{
		return -1;
 800e45e:	f04f 33ff 	mov.w	r3, #4294967295
 800e462:	e000      	b.n	800e466 <compare_num+0x36>
	}
	else
	{
		return 0;
 800e464:	2300      	movs	r3, #0
	}
}
 800e466:	4618      	mov	r0, r3
 800e468:	370c      	adds	r7, #12
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
	...

0800e474 <median_filter>:
int16_t median_filter(int16_t *new_data) //中身変更しないが、値のコピーを避けて速度維持のためにアドレス
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
	static int16_t filter[3]={0};
	int16_t sorted[3]={0};
 800e47c:	f107 0308 	add.w	r3, r7, #8
 800e480:	2200      	movs	r2, #0
 800e482:	601a      	str	r2, [r3, #0]
 800e484:	809a      	strh	r2, [r3, #4]
	filter[cnt+1] = filter[cnt+2];
	filter[cnt+2] = filter[cnt+3];
	filter[cnt+3] = filter[cnt+4];
	filter[cnt+4] = new_data;
#else
	filter[0] = filter[1];
 800e486:	4b14      	ldr	r3, [pc, #80]	; (800e4d8 <median_filter+0x64>)
 800e488:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e48c:	4b12      	ldr	r3, [pc, #72]	; (800e4d8 <median_filter+0x64>)
 800e48e:	801a      	strh	r2, [r3, #0]
	filter[1] = filter[2];
 800e490:	4b11      	ldr	r3, [pc, #68]	; (800e4d8 <median_filter+0x64>)
 800e492:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e496:	4b10      	ldr	r3, [pc, #64]	; (800e4d8 <median_filter+0x64>)
 800e498:	805a      	strh	r2, [r3, #2]
	filter[2] = *new_data;//filter[3];
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e4a0:	4b0d      	ldr	r3, [pc, #52]	; (800e4d8 <median_filter+0x64>)
 800e4a2:	809a      	strh	r2, [r3, #4]
//	filter[3] = filter[4];
//	filter[4] = *new_data;

	sorted[0] = filter[0];
 800e4a4:	4b0c      	ldr	r3, [pc, #48]	; (800e4d8 <median_filter+0x64>)
 800e4a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4aa:	813b      	strh	r3, [r7, #8]
	sorted[1] = filter[1];
 800e4ac:	4b0a      	ldr	r3, [pc, #40]	; (800e4d8 <median_filter+0x64>)
 800e4ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4b2:	817b      	strh	r3, [r7, #10]
	sorted[2] = *new_data;//filter[2];
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4ba:	81bb      	strh	r3, [r7, #12]
//	sorted[4] = filter[4];
#endif


	//ソートする
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800e4bc:	f107 0008 	add.w	r0, r7, #8
 800e4c0:	4b06      	ldr	r3, [pc, #24]	; (800e4dc <median_filter+0x68>)
 800e4c2:	2202      	movs	r2, #2
 800e4c4:	2103      	movs	r1, #3
 800e4c6:	f008 f8f1 	bl	80166ac <qsort>
	//qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int),compare_num);
	//中央値を返す
	return sorted[1];
 800e4ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3710      	adds	r7, #16
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	20007fec 	.word	0x20007fec
 800e4dc:	0800e431 	.word	0x0800e431

0800e4e0 <Update_IMU>:
//割込み内で呼ぶセット
void Update_IMU(float *angv, float *angle )
{
 800e4e0:	b5b0      	push	{r4, r5, r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
#if 1
	uint8_t ret1, ret2,val1,val2;
		uint8_t ret[2] = {
 800e4ea:	4b4d      	ldr	r3, [pc, #308]	; (800e620 <Update_IMU+0x140>)
 800e4ec:	881b      	ldrh	r3, [r3, #0]
 800e4ee:	823b      	strh	r3, [r7, #16]
				0x37,
				0x38,
		};
		int16_t law_data;
		ret1 = ret[0] | 0x80;
 800e4f0:	7c3b      	ldrb	r3, [r7, #16]
 800e4f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	757b      	strb	r3, [r7, #21]
		ret2 = ret[1] | 0x80;
 800e4fa:	7c7b      	ldrb	r3, [r7, #17]
 800e4fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e500:	b2db      	uxtb	r3, r3
 800e502:	753b      	strb	r3, [r7, #20]
		CS_RESET;
 800e504:	2200      	movs	r2, #0
 800e506:	2104      	movs	r1, #4
 800e508:	4846      	ldr	r0, [pc, #280]	; (800e624 <Update_IMU+0x144>)
 800e50a:	f002 ffa9 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800e50e:	f107 0115 	add.w	r1, r7, #21
 800e512:	2364      	movs	r3, #100	; 0x64
 800e514:	2201      	movs	r2, #1
 800e516:	4844      	ldr	r0, [pc, #272]	; (800e628 <Update_IMU+0x148>)
 800e518:	f003 fc9a 	bl	8011e50 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val1,1,100);
 800e51c:	f107 0113 	add.w	r1, r7, #19
 800e520:	2364      	movs	r3, #100	; 0x64
 800e522:	2201      	movs	r2, #1
 800e524:	4840      	ldr	r0, [pc, #256]	; (800e628 <Update_IMU+0x148>)
 800e526:	f003 fdc7 	bl	80120b8 <HAL_SPI_Receive>
		CS_SET;
 800e52a:	2201      	movs	r2, #1
 800e52c:	2104      	movs	r1, #4
 800e52e:	483d      	ldr	r0, [pc, #244]	; (800e624 <Update_IMU+0x144>)
 800e530:	f002 ff96 	bl	8011460 <HAL_GPIO_WritePin>

		CS_RESET;
 800e534:	2200      	movs	r2, #0
 800e536:	2104      	movs	r1, #4
 800e538:	483a      	ldr	r0, [pc, #232]	; (800e624 <Update_IMU+0x144>)
 800e53a:	f002 ff91 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800e53e:	f107 0114 	add.w	r1, r7, #20
 800e542:	2364      	movs	r3, #100	; 0x64
 800e544:	2201      	movs	r2, #1
 800e546:	4838      	ldr	r0, [pc, #224]	; (800e628 <Update_IMU+0x148>)
 800e548:	f003 fc82 	bl	8011e50 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val2,1,100);
 800e54c:	f107 0112 	add.w	r1, r7, #18
 800e550:	2364      	movs	r3, #100	; 0x64
 800e552:	2201      	movs	r2, #1
 800e554:	4834      	ldr	r0, [pc, #208]	; (800e628 <Update_IMU+0x148>)
 800e556:	f003 fdaf 	bl	80120b8 <HAL_SPI_Receive>
		CS_SET;
 800e55a:	2201      	movs	r2, #1
 800e55c:	2104      	movs	r1, #4
 800e55e:	4831      	ldr	r0, [pc, #196]	; (800e624 <Update_IMU+0x144>)
 800e560:	f002 ff7e 	bl	8011460 <HAL_GPIO_WritePin>
		law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );
 800e564:	7cfb      	ldrb	r3, [r7, #19]
 800e566:	021b      	lsls	r3, r3, #8
 800e568:	b21a      	sxth	r2, r3
 800e56a:	7cbb      	ldrb	r3, [r7, #18]
 800e56c:	b21b      	sxth	r3, r3
 800e56e:	4313      	orrs	r3, r2
 800e570:	b21b      	sxth	r3, r3
 800e572:	81fb      	strh	r3, [r7, #14]

		//static int16_t zg_last=0;
		int16_t zg_median;

		//2000回目で0.17
		zg_median = median_filter(&law_data);
 800e574:	f107 030e 	add.w	r3, r7, #14
 800e578:	4618      	mov	r0, r3
 800e57a:	f7ff ff7b 	bl	800e474 <median_filter>
 800e57e:	4603      	mov	r3, r0
 800e580:	82fb      	strh	r3, [r7, #22]
		ZGFilterd = zg_median;
 800e582:	4a2a      	ldr	r2, [pc, #168]	; (800e62c <Update_IMU+0x14c>)
 800e584:	8afb      	ldrh	r3, [r7, #22]
 800e586:	8013      	strh	r3, [r2, #0]
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800e588:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e58c:	ee07 3a90 	vmov	s15, r3
 800e590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e594:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800e630 <Update_IMU+0x150>
 800e598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e59c:	4b25      	ldr	r3, [pc, #148]	; (800e634 <Update_IMU+0x154>)
 800e59e:	edc3 7a00 	vstr	s15, [r3]
		*angv = -((0.01*ZGyro) + (0.99)* (zg_last));
		zg_last = ZGyro;
		//Angle;
		*angle += *angv *0.001;
#else
		*angv = -ZGyro; //角速度 rad / s
 800e5a2:	4b24      	ldr	r3, [pc, #144]	; (800e634 <Update_IMU+0x154>)
 800e5a4:	edd3 7a00 	vldr	s15, [r3]
 800e5a8:	eef1 7a67 	vneg.f32	s15, s15
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	edc3 7a00 	vstr	s15, [r3]

		//Angle;
		*angle += *angv * 0.001  - 0.000001784;//- 0.0000018432; //角度 rad
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7f9 fefe 	bl	80083b8 <__aeabi_f2d>
 800e5bc:	4604      	mov	r4, r0
 800e5be:	460d      	mov	r5, r1
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7f9 fef7 	bl	80083b8 <__aeabi_f2d>
 800e5ca:	a311      	add	r3, pc, #68	; (adr r3, 800e610 <Update_IMU+0x130>)
 800e5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d0:	f7f9 ff4a 	bl	8008468 <__aeabi_dmul>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	4610      	mov	r0, r2
 800e5da:	4619      	mov	r1, r3
 800e5dc:	a30e      	add	r3, pc, #56	; (adr r3, 800e618 <Update_IMU+0x138>)
 800e5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e2:	f7f9 fd89 	bl	80080f8 <__aeabi_dsub>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	f7f9 fd85 	bl	80080fc <__adddf3>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	460c      	mov	r4, r1
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	f7fa fa2d 	bl	8008a58 <__aeabi_d2f>
 800e5fe:	4602      	mov	r2, r0
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	601a      	str	r2, [r3, #0]
	//*angv = -((0.01*zg_law) + (0.99)* (zg_last));
	zg_last = zg_law;
	//Angle;
	*angle += *angv *0.001;
#endif
}
 800e604:	bf00      	nop
 800e606:	3718      	adds	r7, #24
 800e608:	46bd      	mov	sp, r7
 800e60a:	bdb0      	pop	{r4, r5, r7, pc}
 800e60c:	f3af 8000 	nop.w
 800e610:	d2f1a9fc 	.word	0xd2f1a9fc
 800e614:	3f50624d 	.word	0x3f50624d
 800e618:	be73a9d7 	.word	0xbe73a9d7
 800e61c:	3ebdee38 	.word	0x3ebdee38
 800e620:	08019fcc 	.word	0x08019fcc
 800e624:	40020c00 	.word	0x40020c00
 800e628:	20008d34 	.word	0x20008d34
 800e62c:	20008f1c 	.word	0x20008f1c
 800e630:	3a8b7d78 	.word	0x3a8b7d78
 800e634:	20007fe8 	.word	0x20007fe8

0800e638 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	4603      	mov	r3, r0
 800e640:	460a      	mov	r2, r1
 800e642:	71fb      	strb	r3, [r7, #7]
 800e644:	4613      	mov	r3, r2
 800e646:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800e648:	79fb      	ldrb	r3, [r7, #7]
 800e64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800e652:	2200      	movs	r2, #0
 800e654:	2104      	movs	r1, #4
 800e656:	480c      	ldr	r0, [pc, #48]	; (800e688 <write_byte+0x50>)
 800e658:	f002 ff02 	bl	8011460 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800e65c:	f107 010f 	add.w	r1, r7, #15
 800e660:	2364      	movs	r3, #100	; 0x64
 800e662:	2201      	movs	r2, #1
 800e664:	4809      	ldr	r0, [pc, #36]	; (800e68c <write_byte+0x54>)
 800e666:	f003 fbf3 	bl	8011e50 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800e66a:	1db9      	adds	r1, r7, #6
 800e66c:	2364      	movs	r3, #100	; 0x64
 800e66e:	2201      	movs	r2, #1
 800e670:	4806      	ldr	r0, [pc, #24]	; (800e68c <write_byte+0x54>)
 800e672:	f003 fbed 	bl	8011e50 <HAL_SPI_Transmit>
	CS_SET;
 800e676:	2201      	movs	r2, #1
 800e678:	2104      	movs	r1, #4
 800e67a:	4803      	ldr	r0, [pc, #12]	; (800e688 <write_byte+0x50>)
 800e67c:	f002 fef0 	bl	8011460 <HAL_GPIO_WritePin>
}
 800e680:	bf00      	nop
 800e682:	3710      	adds	r7, #16
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	40020c00 	.word	0x40020c00
 800e68c:	20008d34 	.word	0x20008d34

0800e690 <IMU_init>:

uint8_t IMU_init() {
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800e696:	2000      	movs	r0, #0
 800e698:	f7ff fe3c 	bl	800e314 <read_byte>
 800e69c:	4603      	mov	r3, r0
 800e69e:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800e6a0:	79bb      	ldrb	r3, [r7, #6]
 800e6a2:	2be0      	cmp	r3, #224	; 0xe0
 800e6a4:	d119      	bne.n	800e6da <IMU_init+0x4a>
		ret = 1;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800e6aa:	2101      	movs	r1, #1
 800e6ac:	2006      	movs	r0, #6
 800e6ae:	f7ff ffc3 	bl	800e638 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800e6b2:	2110      	movs	r1, #16
 800e6b4:	2003      	movs	r0, #3
 800e6b6:	f7ff ffbf 	bl	800e638 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800e6ba:	2120      	movs	r1, #32
 800e6bc:	207f      	movs	r0, #127	; 0x7f
 800e6be:	f7ff ffbb 	bl	800e638 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800e6c2:	2117      	movs	r1, #23
 800e6c4:	2001      	movs	r0, #1
 800e6c6:	f7ff ffb7 	bl	800e638 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000

		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800e6ca:	2117      	movs	r1, #23
 800e6cc:	2014      	movs	r0, #20
 800e6ce:	f7ff ffb3 	bl	800e638 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16

		write_byte(0x7F,0x00);	//USER_BANK0
 800e6d2:	2100      	movs	r1, #0
 800e6d4:	207f      	movs	r0, #127	; 0x7f
 800e6d6:	f7ff ffaf 	bl	800e638 <write_byte>
	}
	return ret;
 800e6da:	79fb      	ldrb	r3, [r7, #7]
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	f5ad 5dfa 	sub.w	sp, sp, #8000	; 0x1f40
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0


	HAL_Delay(100);
 800e6ee:	2064      	movs	r0, #100	; 0x64
 800e6f0:	f001 f9e2 	bl	800fab8 <HAL_Delay>

	int num = 2000;
 800e6f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e6f8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800e6fc:	f102 0204 	add.w	r2, r2, #4
 800e700:	6013      	str	r3, [r2, #0]
	float zg_vals[2000]={0.0f};
 800e702:	f107 0310 	add.w	r3, r7, #16
 800e706:	3b0c      	subs	r3, #12
 800e708:	4618      	mov	r0, r3
 800e70a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800e70e:	461a      	mov	r2, r3
 800e710:	2100      	movs	r1, #0
 800e712:	f006 fc04 	bl	8014f1e <memset>
	float sum=0;
 800e716:	f04f 0300 	mov.w	r3, #0
 800e71a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800e71e:	f102 020c 	add.w	r2, r2, #12
 800e722:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < num; i++){
 800e724:	2300      	movs	r3, #0
 800e726:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800e72a:	f102 0208 	add.w	r2, r2, #8
 800e72e:	6013      	str	r3, [r2, #0]
 800e730:	e034      	b.n	800e79c <IMU_Calib+0xb8>
		zg_vals[i] = ZGyro;
 800e732:	4b2a      	ldr	r3, [pc, #168]	; (800e7dc <IMU_Calib+0xf8>)
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	f107 0310 	add.w	r3, r7, #16
 800e73a:	3b0c      	subs	r3, #12
 800e73c:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 800e740:	f101 0108 	add.w	r1, r1, #8
 800e744:	6809      	ldr	r1, [r1, #0]
 800e746:	0089      	lsls	r1, r1, #2
 800e748:	440b      	add	r3, r1
 800e74a:	601a      	str	r2, [r3, #0]
		sum += zg_vals[i];
 800e74c:	f107 0310 	add.w	r3, r7, #16
 800e750:	3b0c      	subs	r3, #12
 800e752:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800e756:	f102 0208 	add.w	r2, r2, #8
 800e75a:	6812      	ldr	r2, [r2, #0]
 800e75c:	0092      	lsls	r2, r2, #2
 800e75e:	4413      	add	r3, r2
 800e760:	edd3 7a00 	vldr	s15, [r3]
 800e764:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800e768:	f103 030c 	add.w	r3, r3, #12
 800e76c:	ed93 7a00 	vldr	s14, [r3]
 800e770:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e774:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800e778:	f103 030c 	add.w	r3, r3, #12
 800e77c:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800e780:	2002      	movs	r0, #2
 800e782:	f001 f999 	bl	800fab8 <HAL_Delay>
	for(int i = 0; i < num; i++){
 800e786:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800e78a:	f103 0308 	add.w	r3, r3, #8
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3301      	adds	r3, #1
 800e792:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800e796:	f102 0208 	add.w	r2, r2, #8
 800e79a:	6013      	str	r3, [r2, #0]
 800e79c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800e7a0:	f103 0308 	add.w	r3, r3, #8
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800e7aa:	f103 0304 	add.w	r3, r3, #4
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	dbbe      	blt.n	800e732 <IMU_Calib+0x4e>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800e7b4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800e7b8:	f103 030c 	add.w	r3, r3, #12
 800e7bc:	ed93 7a00 	vldr	s14, [r3]
 800e7c0:	eddf 6a07 	vldr	s13, [pc, #28]	; 800e7e0 <IMU_Calib+0xfc>
 800e7c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e7c8:	4b06      	ldr	r3, [pc, #24]	; (800e7e4 <IMU_Calib+0x100>)
 800e7ca:	edc3 7a00 	vstr	s15, [r3]
}
 800e7ce:	bf00      	nop
 800e7d0:	f507 57fa 	add.w	r7, r7, #8000	; 0x1f40
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	20007fe8 	.word	0x20007fe8
 800e7e0:	44fa0000 	.word	0x44fa0000
 800e7e4:	20007fe4 	.word	0x20007fe4

0800e7e8 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800e7ec:	213c      	movs	r1, #60	; 0x3c
 800e7ee:	4804      	ldr	r0, [pc, #16]	; (800e800 <EncoderStart+0x18>)
 800e7f0:	f004 fb4a 	bl	8012e88 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e7f4:	213c      	movs	r1, #60	; 0x3c
 800e7f6:	4803      	ldr	r0, [pc, #12]	; (800e804 <EncoderStart+0x1c>)
 800e7f8:	f004 fb46 	bl	8012e88 <HAL_TIM_Encoder_Start>
}
 800e7fc:	bf00      	nop
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	20008cf4 	.word	0x20008cf4
 800e804:	20008c6c 	.word	0x20008c6c

0800e808 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800e80c:	2100      	movs	r1, #0
 800e80e:	4804      	ldr	r0, [pc, #16]	; (800e820 <EmitterON+0x18>)
 800e810:	f004 f8be 	bl	8012990 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e814:	2100      	movs	r1, #0
 800e816:	4802      	ldr	r0, [pc, #8]	; (800e820 <EmitterON+0x18>)
 800e818:	f005 f9d1 	bl	8013bbe <HAL_TIMEx_OCN_Start_IT>

}
 800e81c:	bf00      	nop
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	20008c2c 	.word	0x20008c2c

0800e824 <EmitterOFF>:
void EmitterOFF()
{
 800e824:	b580      	push	{r7, lr}
 800e826:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800e828:	2100      	movs	r1, #0
 800e82a:	4804      	ldr	r0, [pc, #16]	; (800e83c <EmitterOFF+0x18>)
 800e82c:	f004 f934 	bl	8012a98 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800e830:	2100      	movs	r1, #0
 800e832:	4802      	ldr	r0, [pc, #8]	; (800e83c <EmitterOFF+0x18>)
 800e834:	f005 fa18 	bl	8013c68 <HAL_TIMEx_OCN_Stop_IT>

}
 800e838:	bf00      	nop
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	20008c2c 	.word	0x20008c2c

0800e840 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2b07      	cmp	r3, #7
 800e84c:	f200 80ac 	bhi.w	800e9a8 <ChangeLED+0x168>
 800e850:	a201      	add	r2, pc, #4	; (adr r2, 800e858 <ChangeLED+0x18>)
 800e852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e856:	bf00      	nop
 800e858:	0800e879 	.word	0x0800e879
 800e85c:	0800e89f 	.word	0x0800e89f
 800e860:	0800e8c5 	.word	0x0800e8c5
 800e864:	0800e8eb 	.word	0x0800e8eb
 800e868:	0800e911 	.word	0x0800e911
 800e86c:	0800e937 	.word	0x0800e937
 800e870:	0800e95d 	.word	0x0800e95d
 800e874:	0800e983 	.word	0x0800e983
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e878:	2200      	movs	r2, #0
 800e87a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e87e:	484d      	ldr	r0, [pc, #308]	; (800e9b4 <ChangeLED+0x174>)
 800e880:	f002 fdee 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e884:	2200      	movs	r2, #0
 800e886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e88a:	484a      	ldr	r0, [pc, #296]	; (800e9b4 <ChangeLED+0x174>)
 800e88c:	f002 fde8 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e890:	2200      	movs	r2, #0
 800e892:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e896:	4848      	ldr	r0, [pc, #288]	; (800e9b8 <ChangeLED+0x178>)
 800e898:	f002 fde2 	bl	8011460 <HAL_GPIO_WritePin>
		break;
 800e89c:	e085      	b.n	800e9aa <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e8a4:	4843      	ldr	r0, [pc, #268]	; (800e9b4 <ChangeLED+0x174>)
 800e8a6:	f002 fddb 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e8b0:	4840      	ldr	r0, [pc, #256]	; (800e9b4 <ChangeLED+0x174>)
 800e8b2:	f002 fdd5 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e8bc:	483e      	ldr	r0, [pc, #248]	; (800e9b8 <ChangeLED+0x178>)
 800e8be:	f002 fdcf 	bl	8011460 <HAL_GPIO_WritePin>
		break;
 800e8c2:	e072      	b.n	800e9aa <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e8ca:	483a      	ldr	r0, [pc, #232]	; (800e9b4 <ChangeLED+0x174>)
 800e8cc:	f002 fdc8 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e8d6:	4837      	ldr	r0, [pc, #220]	; (800e9b4 <ChangeLED+0x174>)
 800e8d8:	f002 fdc2 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e8dc:	2200      	movs	r2, #0
 800e8de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e8e2:	4835      	ldr	r0, [pc, #212]	; (800e9b8 <ChangeLED+0x178>)
 800e8e4:	f002 fdbc 	bl	8011460 <HAL_GPIO_WritePin>

		break;
 800e8e8:	e05f      	b.n	800e9aa <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e8f0:	4830      	ldr	r0, [pc, #192]	; (800e9b4 <ChangeLED+0x174>)
 800e8f2:	f002 fdb5 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e8fc:	482d      	ldr	r0, [pc, #180]	; (800e9b4 <ChangeLED+0x174>)
 800e8fe:	f002 fdaf 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e902:	2200      	movs	r2, #0
 800e904:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e908:	482b      	ldr	r0, [pc, #172]	; (800e9b8 <ChangeLED+0x178>)
 800e90a:	f002 fda9 	bl	8011460 <HAL_GPIO_WritePin>
		break;
 800e90e:	e04c      	b.n	800e9aa <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e910:	2200      	movs	r2, #0
 800e912:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e916:	4827      	ldr	r0, [pc, #156]	; (800e9b4 <ChangeLED+0x174>)
 800e918:	f002 fda2 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e91c:	2200      	movs	r2, #0
 800e91e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e922:	4824      	ldr	r0, [pc, #144]	; (800e9b4 <ChangeLED+0x174>)
 800e924:	f002 fd9c 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e928:	2201      	movs	r2, #1
 800e92a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e92e:	4822      	ldr	r0, [pc, #136]	; (800e9b8 <ChangeLED+0x178>)
 800e930:	f002 fd96 	bl	8011460 <HAL_GPIO_WritePin>
		break;
 800e934:	e039      	b.n	800e9aa <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e936:	2201      	movs	r2, #1
 800e938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e93c:	481d      	ldr	r0, [pc, #116]	; (800e9b4 <ChangeLED+0x174>)
 800e93e:	f002 fd8f 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800e942:	2200      	movs	r2, #0
 800e944:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e948:	481a      	ldr	r0, [pc, #104]	; (800e9b4 <ChangeLED+0x174>)
 800e94a:	f002 fd89 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e94e:	2201      	movs	r2, #1
 800e950:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e954:	4818      	ldr	r0, [pc, #96]	; (800e9b8 <ChangeLED+0x178>)
 800e956:	f002 fd83 	bl	8011460 <HAL_GPIO_WritePin>
		break;
 800e95a:	e026      	b.n	800e9aa <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e95c:	2200      	movs	r2, #0
 800e95e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e962:	4814      	ldr	r0, [pc, #80]	; (800e9b4 <ChangeLED+0x174>)
 800e964:	f002 fd7c 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e968:	2201      	movs	r2, #1
 800e96a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e96e:	4811      	ldr	r0, [pc, #68]	; (800e9b4 <ChangeLED+0x174>)
 800e970:	f002 fd76 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e974:	2201      	movs	r2, #1
 800e976:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e97a:	480f      	ldr	r0, [pc, #60]	; (800e9b8 <ChangeLED+0x178>)
 800e97c:	f002 fd70 	bl	8011460 <HAL_GPIO_WritePin>

		break;
 800e980:	e013      	b.n	800e9aa <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800e982:	2201      	movs	r2, #1
 800e984:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e988:	480a      	ldr	r0, [pc, #40]	; (800e9b4 <ChangeLED+0x174>)
 800e98a:	f002 fd69 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800e98e:	2201      	movs	r2, #1
 800e990:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e994:	4807      	ldr	r0, [pc, #28]	; (800e9b4 <ChangeLED+0x174>)
 800e996:	f002 fd63 	bl	8011460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800e99a:	2201      	movs	r2, #1
 800e99c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e9a0:	4805      	ldr	r0, [pc, #20]	; (800e9b8 <ChangeLED+0x178>)
 800e9a2:	f002 fd5d 	bl	8011460 <HAL_GPIO_WritePin>

		break;
 800e9a6:	e000      	b.n	800e9aa <ChangeLED+0x16a>
	default: break;
 800e9a8:	bf00      	nop

	}
}
 800e9aa:	bf00      	nop
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	40020800 	.word	0x40020800
 800e9b8:	40020400 	.word	0x40020400

0800e9bc <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800e9c0:	210c      	movs	r1, #12
 800e9c2:	4809      	ldr	r0, [pc, #36]	; (800e9e8 <Motor_PWM_Start+0x2c>)
 800e9c4:	f004 f938 	bl	8012c38 <HAL_TIM_PWM_Start>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d001      	beq.n	800e9d2 <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800e9ce:	f7fe fce9 	bl	800d3a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800e9d2:	2104      	movs	r1, #4
 800e9d4:	4805      	ldr	r0, [pc, #20]	; (800e9ec <Motor_PWM_Start+0x30>)
 800e9d6:	f004 f92f 	bl	8012c38 <HAL_TIM_PWM_Start>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d001      	beq.n	800e9e4 <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800e9e0:	f7fe fce0 	bl	800d3a4 <Error_Handler>
  }
#endif
}
 800e9e4:	bf00      	nop
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	20007f50 	.word	0x20007f50
 800e9ec:	20007f90 	.word	0x20007f90

0800e9f0 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800e9f4:	210c      	movs	r1, #12
 800e9f6:	4809      	ldr	r0, [pc, #36]	; (800ea1c <Motor_PWM_Stop+0x2c>)
 800e9f8:	f004 f95c 	bl	8012cb4 <HAL_TIM_PWM_Stop>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d001      	beq.n	800ea06 <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 800ea02:	f7fe fccf 	bl	800d3a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800ea06:	2104      	movs	r1, #4
 800ea08:	4805      	ldr	r0, [pc, #20]	; (800ea20 <Motor_PWM_Stop+0x30>)
 800ea0a:	f004 f953 	bl	8012cb4 <HAL_TIM_PWM_Stop>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d001      	beq.n	800ea18 <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 800ea14:	f7fe fcc6 	bl	800d3a4 <Error_Handler>
  }
#endif
}
 800ea18:	bf00      	nop
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	20007f50 	.word	0x20007f50
 800ea20:	20007f90 	.word	0x20007f90
 800ea24:	00000000 	.word	0x00000000

0800ea28 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	dd05      	ble.n	800ea44 <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800ea38:	2201      	movs	r2, #1
 800ea3a:	2104      	movs	r1, #4
 800ea3c:	4828      	ldr	r0, [pc, #160]	; (800eae0 <Motor_Switch+0xb8>)
 800ea3e:	f002 fd0f 	bl	8011460 <HAL_GPIO_WritePin>
 800ea42:	e00a      	b.n	800ea5a <Motor_Switch+0x32>

	}
	else  if (left < 0){
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	da07      	bge.n	800ea5a <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	2104      	movs	r1, #4
 800ea4e:	4824      	ldr	r0, [pc, #144]	; (800eae0 <Motor_Switch+0xb8>)
 800ea50:	f002 fd06 	bl	8011460 <HAL_GPIO_WritePin>
		left = -left;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	425b      	negs	r3, r3
 800ea58:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	dd05      	ble.n	800ea6c <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800ea60:	2200      	movs	r2, #0
 800ea62:	2101      	movs	r1, #1
 800ea64:	481e      	ldr	r0, [pc, #120]	; (800eae0 <Motor_Switch+0xb8>)
 800ea66:	f002 fcfb 	bl	8011460 <HAL_GPIO_WritePin>
 800ea6a:	e00a      	b.n	800ea82 <Motor_Switch+0x5a>

	}

	else if (right < 0){
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	da07      	bge.n	800ea82 <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800ea72:	2201      	movs	r2, #1
 800ea74:	2101      	movs	r1, #1
 800ea76:	481a      	ldr	r0, [pc, #104]	; (800eae0 <Motor_Switch+0xb8>)
 800ea78:	f002 fcf2 	bl	8011460 <HAL_GPIO_WritePin>
	  	right = -right;
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	425b      	negs	r3, r3
 800ea80:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f7f9 fc86 	bl	8008394 <__aeabi_i2d>
 800ea88:	a313      	add	r3, pc, #76	; (adr r3, 800ead8 <Motor_Switch+0xb0>)
 800ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8e:	f7f9 ff7b 	bl	8008988 <__aeabi_dcmpgt>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d002      	beq.n	800ea9e <Motor_Switch+0x76>
 800ea98:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800ea9c:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 800ea9e:	6838      	ldr	r0, [r7, #0]
 800eaa0:	f7f9 fc78 	bl	8008394 <__aeabi_i2d>
 800eaa4:	a30c      	add	r3, pc, #48	; (adr r3, 800ead8 <Motor_Switch+0xb0>)
 800eaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaaa:	f7f9 ff6d 	bl	8008988 <__aeabi_dcmpgt>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d002      	beq.n	800eaba <Motor_Switch+0x92>
 800eab4:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800eab8:	603b      	str	r3, [r7, #0]


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800eaba:	4b0a      	ldr	r3, [pc, #40]	; (800eae4 <Motor_Switch+0xbc>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800eac2:	4b09      	ldr	r3, [pc, #36]	; (800eae8 <Motor_Switch+0xc0>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	641a      	str	r2, [r3, #64]	; 0x40
}
 800eaca:	bf00      	nop
 800eacc:	3708      	adds	r7, #8
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	f3af 8000 	nop.w
 800ead8:	00000000 	.word	0x00000000
 800eadc:	40a3b000 	.word	0x40a3b000
 800eae0:	40020000 	.word	0x40020000
 800eae4:	20007f90 	.word	0x20007f90
 800eae8:	20007f50 	.word	0x20007f50

0800eaec <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	683a      	ldr	r2, [r7, #0]
 800eafa:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800eafc:	bf00      	nop
 800eafe:	370c      	adds	r7, #12
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b087      	sub	sp, #28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 800eb18:	4a2c      	ldr	r2, [pc, #176]	; (800ebcc <GetWallDataAverage+0xc4>)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	bfb8      	it	lt
 800eb28:	425b      	neglt	r3, r3
 800eb2a:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 800eb2c:	4927      	ldr	r1, [pc, #156]	; (800ebcc <GetWallDataAverage+0xc4>)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	697a      	ldr	r2, [r7, #20]
 800eb32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 800eb36:	4a26      	ldr	r2, [pc, #152]	; (800ebd0 <GetWallDataAverage+0xc8>)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	441a      	add	r2, r3
 800eb42:	4923      	ldr	r1, [pc, #140]	; (800ebd0 <GetWallDataAverage+0xc8>)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 800eb4a:	4a22      	ldr	r2, [pc, #136]	; (800ebd4 <GetWallDataAverage+0xcc>)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb52:	1c5a      	adds	r2, r3, #1
 800eb54:	491f      	ldr	r1, [pc, #124]	; (800ebd4 <GetWallDataAverage+0xcc>)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800eb5c:	4a1d      	ldr	r2, [pc, #116]	; (800ebd4 <GetWallDataAverage+0xcc>)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d121      	bne.n	800ebae <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800eb6a:	4a19      	ldr	r2, [pc, #100]	; (800ebd0 <GetWallDataAverage+0xc8>)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb72:	ee07 3a90 	vmov	s15, r3
 800eb76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eb7a:	4a16      	ldr	r2, [pc, #88]	; (800ebd4 <GetWallDataAverage+0xcc>)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb82:	ee07 3a90 	vmov	s15, r3
 800eb86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eb8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb8e:	4a12      	ldr	r2, [pc, #72]	; (800ebd8 <GetWallDataAverage+0xd0>)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4413      	add	r3, r2
 800eb96:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 800eb9a:	4a0d      	ldr	r2, [pc, #52]	; (800ebd0 <GetWallDataAverage+0xc8>)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2100      	movs	r1, #0
 800eba0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 800eba4:	4a0b      	ldr	r2, [pc, #44]	; (800ebd4 <GetWallDataAverage+0xcc>)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2100      	movs	r1, #0
 800ebaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 800ebae:	4a0a      	ldr	r2, [pc, #40]	; (800ebd8 <GetWallDataAverage+0xd0>)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	009b      	lsls	r3, r3, #2
 800ebb4:	4413      	add	r3, r2
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	ee07 3a90 	vmov	s15, r3
}
 800ebbc:	eeb0 0a67 	vmov.f32	s0, s15
 800ebc0:	371c      	adds	r7, #28
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	20007ff4 	.word	0x20007ff4
 800ebd0:	20008004 	.word	0x20008004
 800ebd4:	20008014 	.word	0x20008014
 800ebd8:	20008024 	.word	0x20008024

0800ebdc <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b087      	sub	sp, #28
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	ed87 0a02 	vstr	s0, [r7, #8]
 800ebe8:	edc7 0a01 	vstr	s1, [r7, #4]
 800ebec:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 800ebf0:	f04f 0300 	mov.w	r3, #0
 800ebf4:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	ee07 3a90 	vmov	s15, r3
 800ebfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ec00:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec08:	edd7 7a01 	vldr	s15, [r7, #4]
 800ec0c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ec10:	ed97 7a00 	vldr	s14, [r7]
 800ec14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec18:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	ee07 3a90 	vmov	s15, r3
}
 800ec22:	eeb0 0a67 	vmov.f32	s0, s15
 800ec26:	371c      	adds	r7, #28
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b085      	sub	sp, #20
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800ec3e:	2300      	movs	r3, #0
 800ec40:	60bb      	str	r3, [r7, #8]
 800ec42:	e007      	b.n	800ec54 <IntegerPower+0x24>
	{
		pattern_num *= integer;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	fb02 f303 	mul.w	r3, r2, r3
 800ec4c:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	3301      	adds	r3, #1
 800ec52:	60bb      	str	r3, [r7, #8]
 800ec54:	68ba      	ldr	r2, [r7, #8]
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	dbf3      	blt.n	800ec44 <IntegerPower+0x14>
	}
	return pattern_num;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3714      	adds	r7, #20
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr

0800ec6a <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 800ec6a:	b480      	push	{r7}
 800ec6c:	b08b      	sub	sp, #44	; 0x2c
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	ed87 0a03 	vstr	s0, [r7, #12]
 800ec74:	edc7 0a02 	vstr	s1, [r7, #8]
 800ec78:	ed87 1a01 	vstr	s2, [r7, #4]
 800ec7c:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 800ec7e:	edd7 6a03 	vldr	s13, [r7, #12]
 800ec82:	ed97 7a01 	vldr	s14, [r7, #4]
 800ec86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec8a:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 800ec8e:	edd7 6a02 	vldr	s13, [r7, #8]
 800ec92:	ed97 7a01 	vldr	s14, [r7, #4]
 800ec96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec9a:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800ec9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eca2:	edd7 7a06 	vldr	s15, [r7, #24]
 800eca6:	ee77 6a67 	vsub.f32	s13, s14, s15
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	ee07 3a90 	vmov	s15, r3
 800ecb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ecb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecb8:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	623b      	str	r3, [r7, #32]
 800ecc4:	e018      	b.n	800ecf8 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800ecc6:	6a3b      	ldr	r3, [r7, #32]
 800ecc8:	ee07 3a90 	vmov	s15, r3
 800eccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ecd0:	edd7 7a05 	vldr	s15, [r7, #20]
 800ecd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ecd8:	edd7 7a06 	vldr	s15, [r7, #24]
 800ecdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ece0:	ed97 7a07 	vldr	s14, [r7, #28]
 800ece4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ece8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecec:	db01      	blt.n	800ecf2 <GetBatteryLevel+0x88>
		{
			pattern = i;
 800ecee:	6a3b      	ldr	r3, [r7, #32]
 800ecf0:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 800ecf2:	6a3b      	ldr	r3, [r7, #32]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	623b      	str	r3, [r7, #32]
 800ecf8:	6a3a      	ldr	r2, [r7, #32]
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	dbe2      	blt.n	800ecc6 <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 800ed00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	372c      	adds	r7, #44	; 0x2c
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr
	...

0800ed10 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	af00      	add	r7, sp, #0
	  setbuf(stdout,NULL);
 800ed14:	4b07      	ldr	r3, [pc, #28]	; (800ed34 <Buffering+0x24>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	689b      	ldr	r3, [r3, #8]
 800ed1a:	2100      	movs	r1, #0
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f007 fedb 	bl	8016ad8 <setbuf>
	  setbuf(stdin,NULL);
 800ed22:	4b04      	ldr	r3, [pc, #16]	; (800ed34 <Buffering+0x24>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	2100      	movs	r1, #0
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f007 fed4 	bl	8016ad8 <setbuf>
}
 800ed30:	bf00      	nop
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	2000003c 	.word	0x2000003c

0800ed38 <Copy_Gain>:
void Copy_Gain()
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b092      	sub	sp, #72	; 0x48
 800ed3c:	af00      	add	r7, sp, #0
	//コピーしなくても、単品で書き込める。
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
 800ed3e:	4b2c      	ldr	r3, [pc, #176]	; (800edf0 <Copy_Gain+0xb8>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	647b      	str	r3, [r7, #68]	; 0x44
	float data[16]={0};
 800ed44:	463b      	mov	r3, r7
 800ed46:	2240      	movs	r2, #64	; 0x40
 800ed48:	2100      	movs	r1, #0
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f006 f8e7 	bl	8014f1e <memset>
	data[0] = Pid[L_VELO_PID].KP;
 800ed50:	4b28      	ldr	r3, [pc, #160]	; (800edf4 <Copy_Gain+0xbc>)
 800ed52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ed56:	603b      	str	r3, [r7, #0]
	data[1] = Pid[L_VELO_PID].KI;
 800ed58:	4b26      	ldr	r3, [pc, #152]	; (800edf4 <Copy_Gain+0xbc>)
 800ed5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ed5e:	607b      	str	r3, [r7, #4]
	data[2] = Pid[L_VELO_PID].KD;
 800ed60:	4b24      	ldr	r3, [pc, #144]	; (800edf4 <Copy_Gain+0xbc>)
 800ed62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ed66:	60bb      	str	r3, [r7, #8]

	data[3] = Pid[A_VELO_PID].KP;
 800ed68:	4b22      	ldr	r3, [pc, #136]	; (800edf4 <Copy_Gain+0xbc>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	60fb      	str	r3, [r7, #12]
	data[4] = Pid[A_VELO_PID].KI;
 800ed6e:	4b21      	ldr	r3, [pc, #132]	; (800edf4 <Copy_Gain+0xbc>)
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	613b      	str	r3, [r7, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800ed74:	4b1f      	ldr	r3, [pc, #124]	; (800edf4 <Copy_Gain+0xbc>)
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	617b      	str	r3, [r7, #20]

	data[6] = Pid[L_WALL_PID].KP;
 800ed7a:	4b1e      	ldr	r3, [pc, #120]	; (800edf4 <Copy_Gain+0xbc>)
 800ed7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed7e:	61bb      	str	r3, [r7, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800ed80:	4b1c      	ldr	r3, [pc, #112]	; (800edf4 <Copy_Gain+0xbc>)
 800ed82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed84:	61fb      	str	r3, [r7, #28]
	data[8] = Pid[L_WALL_PID].KD;
 800ed86:	4b1b      	ldr	r3, [pc, #108]	; (800edf4 <Copy_Gain+0xbc>)
 800ed88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed8a:	623b      	str	r3, [r7, #32]

	data[9] = Pid[R_WALL_PID].KP;
 800ed8c:	4b19      	ldr	r3, [pc, #100]	; (800edf4 <Copy_Gain+0xbc>)
 800ed8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed92:	627b      	str	r3, [r7, #36]	; 0x24
	data[10] = Pid[R_WALL_PID].KI;
 800ed94:	4b17      	ldr	r3, [pc, #92]	; (800edf4 <Copy_Gain+0xbc>)
 800ed96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed9a:	62bb      	str	r3, [r7, #40]	; 0x28
	data[11] = Pid[R_WALL_PID].KD;
 800ed9c:	4b15      	ldr	r3, [pc, #84]	; (800edf4 <Copy_Gain+0xbc>)
 800ed9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eda2:	62fb      	str	r3, [r7, #44]	; 0x2c

	data[12] = Pid[D_WALL_PID].KP;
 800eda4:	4b13      	ldr	r3, [pc, #76]	; (800edf4 <Copy_Gain+0xbc>)
 800eda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda8:	633b      	str	r3, [r7, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800edaa:	4b12      	ldr	r3, [pc, #72]	; (800edf4 <Copy_Gain+0xbc>)
 800edac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edae:	637b      	str	r3, [r7, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800edb0:	4b10      	ldr	r3, [pc, #64]	; (800edf4 <Copy_Gain+0xbc>)
 800edb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edb4:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0; i < 15; i++)
 800edb6:	2300      	movs	r3, #0
 800edb8:	643b      	str	r3, [r7, #64]	; 0x40
 800edba:	e012      	b.n	800ede2 <Copy_Gain+0xaa>
	{

		FLASH_Write_Word_F( address, data[i]);
 800edbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edbe:	009b      	lsls	r3, r3, #2
 800edc0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800edc4:	4413      	add	r3, r2
 800edc6:	3b48      	subs	r3, #72	; 0x48
 800edc8:	edd3 7a00 	vldr	s15, [r3]
 800edcc:	eeb0 0a67 	vmov.f32	s0, s15
 800edd0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800edd2:	f7ff f9f9 	bl	800e1c8 <FLASH_Write_Word_F>
		address += 0x04;
 800edd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edd8:	3304      	adds	r3, #4
 800edda:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i < 15; i++)
 800eddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edde:	3301      	adds	r3, #1
 800ede0:	643b      	str	r3, [r7, #64]	; 0x40
 800ede2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ede4:	2b0e      	cmp	r3, #14
 800ede6:	dde9      	ble.n	800edbc <Copy_Gain+0x84>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800ede8:	bf00      	nop
 800edea:	3748      	adds	r7, #72	; 0x48
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}
 800edf0:	0801a2b8 	.word	0x0801a2b8
 800edf4:	20008034 	.word	0x20008034

0800edf8 <Load_Gain>:
void Load_Gain()
{
 800edf8:	b590      	push	{r4, r7, lr}
 800edfa:	b095      	sub	sp, #84	; 0x54
 800edfc:	af00      	add	r7, sp, #0
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800edfe:	4b7f      	ldr	r3, [pc, #508]	; (800effc <Load_Gain+0x204>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	64fb      	str	r3, [r7, #76]	; 0x4c
	float data[16]={0};//1個多く要素を作る。
 800ee04:	463b      	mov	r3, r7
 800ee06:	2240      	movs	r2, #64	; 0x40
 800ee08:	2100      	movs	r1, #0
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f006 f887 	bl	8014f1e <memset>

	//チェック
	int judge;
	uint8_t j=0;
 800ee10:	2300      	movs	r3, #0
 800ee12:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800ee16:	2300      	movs	r3, #0
 800ee18:	647b      	str	r3, [r7, #68]	; 0x44
 800ee1a:	e03c      	b.n	800ee96 <Load_Gain+0x9e>
	{
		FLASH_Read_Word_F( address, &data[i]);
 800ee1c:	463a      	mov	r2, r7
 800ee1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	4413      	add	r3, r2
 800ee24:	4619      	mov	r1, r3
 800ee26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ee28:	f7ff f9f8 	bl	800e21c <FLASH_Read_Word_F>
		address += 0x04;
 800ee2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee2e:	3304      	adds	r3, #4
 800ee30:	64fb      	str	r3, [r7, #76]	; 0x4c
		printf("%d, %f\r\n",i,data[i]);
 800ee32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ee3a:	4413      	add	r3, r2
 800ee3c:	3b50      	subs	r3, #80	; 0x50
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7f9 fab9 	bl	80083b8 <__aeabi_f2d>
 800ee46:	4603      	mov	r3, r0
 800ee48:	460c      	mov	r4, r1
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	4623      	mov	r3, r4
 800ee4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee50:	486b      	ldr	r0, [pc, #428]	; (800f000 <Load_Gain+0x208>)
 800ee52:	f007 fb63 	bl	801651c <iprintf>
		judge = isnanf(data[i]); //nanでなければ0
 800ee56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ee5e:	4413      	add	r3, r2
 800ee60:	3b50      	subs	r3, #80	; 0x50
 800ee62:	edd3 7a00 	vldr	s15, [r3]
 800ee66:	eef4 7a67 	vcmp.f32	s15, s15
 800ee6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6e:	bf6c      	ite	vs
 800ee70:	2301      	movvs	r3, #1
 800ee72:	2300      	movvc	r3, #0
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	643b      	str	r3, [r7, #64]	; 0x40
		printf("judge : %d\r\n", judge);
 800ee78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee7a:	4862      	ldr	r0, [pc, #392]	; (800f004 <Load_Gain+0x20c>)
 800ee7c:	f007 fb4e 	bl	801651c <iprintf>
		if(judge == 1) //コンパイラでisnanfの結果が変わる
 800ee80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d104      	bne.n	800ee90 <Load_Gain+0x98>
		{
			j++;
 800ee86:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 800ee90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee92:	3301      	adds	r3, #1
 800ee94:	647b      	str	r3, [r7, #68]	; 0x44
 800ee96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee98:	2b0e      	cmp	r3, #14
 800ee9a:	ddbf      	ble.n	800ee1c <Load_Gain+0x24>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800ee9c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800eea0:	4619      	mov	r1, r3
 800eea2:	4859      	ldr	r0, [pc, #356]	; (800f008 <Load_Gain+0x210>)
 800eea4:	f007 fb3a 	bl	801651c <iprintf>
		if(j == 15)//全てnan0であれば
 800eea8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800eeac:	2b0f      	cmp	r3, #15
 800eeae:	d146      	bne.n	800ef3e <Load_Gain+0x146>
		{
			printf("デフォルトゲインセット\r\n");
 800eeb0:	4856      	ldr	r0, [pc, #344]	; (800f00c <Load_Gain+0x214>)
 800eeb2:	f007 fbbb 	bl	801662c <puts>
			//何も入っていないときは、デフォルト値を書き込む
		  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);
 800eeb6:	ed9f 1a56 	vldr	s2, [pc, #344]	; 800f010 <Load_Gain+0x218>
 800eeba:	eddf 0a56 	vldr	s1, [pc, #344]	; 800f014 <Load_Gain+0x21c>
 800eebe:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800f018 <Load_Gain+0x220>
 800eec2:	2004      	movs	r0, #4
 800eec4:	f000 fa80 	bl	800f3c8 <PIDSetGain>
		  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);
 800eec8:	ed9f 1a51 	vldr	s2, [pc, #324]	; 800f010 <Load_Gain+0x218>
 800eecc:	eddf 0a51 	vldr	s1, [pc, #324]	; 800f014 <Load_Gain+0x21c>
 800eed0:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800f018 <Load_Gain+0x220>
 800eed4:	2005      	movs	r0, #5
 800eed6:	f000 fa77 	bl	800f3c8 <PIDSetGain>

		  PIDSetGain(A_VELO_PID, 14.6,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800eeda:	ed9f 1a50 	vldr	s2, [pc, #320]	; 800f01c <Load_Gain+0x224>
 800eede:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800f01c <Load_Gain+0x224>
 800eee2:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800f018 <Load_Gain+0x220>
 800eee6:	2000      	movs	r0, #0
 800eee8:	f000 fa6e 	bl	800f3c8 <PIDSetGain>
		  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800eeec:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 800f01c <Load_Gain+0x224>
 800eef0:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800f01c <Load_Gain+0x224>
 800eef4:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800f018 <Load_Gain+0x220>
 800eef8:	2008      	movs	r0, #8
 800eefa:	f000 fa65 	bl	800f3c8 <PIDSetGain>
		  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800eefe:	ed9f 1a47 	vldr	s2, [pc, #284]	; 800f01c <Load_Gain+0x224>
 800ef02:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800ef06:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800ef0a:	2001      	movs	r0, #1
 800ef0c:	f000 fa5c 	bl	800f3c8 <PIDSetGain>
		  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800ef10:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800f01c <Load_Gain+0x224>
 800ef14:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800ef18:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800ef1c:	2002      	movs	r0, #2
 800ef1e:	f000 fa53 	bl	800f3c8 <PIDSetGain>
		  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800ef22:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 800f01c <Load_Gain+0x224>
 800ef26:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800ef2a:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800ef2e:	2003      	movs	r0, #3
 800ef30:	f000 fa4a 	bl	800f3c8 <PIDSetGain>

			Flash_clear_sector9();
 800ef34:	f7ff f9c5 	bl	800e2c2 <Flash_clear_sector9>
			//printf("\r\nどや\r\n");
			Copy_Gain();
 800ef38:	f7ff fefe 	bl	800ed38 <Copy_Gain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800ef3c:	e059      	b.n	800eff2 <Load_Gain+0x1fa>
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800ef3e:	edd7 7a00 	vldr	s15, [r7]
 800ef42:	ed97 7a01 	vldr	s14, [r7, #4]
 800ef46:	edd7 6a02 	vldr	s13, [r7, #8]
 800ef4a:	eeb0 1a66 	vmov.f32	s2, s13
 800ef4e:	eef0 0a47 	vmov.f32	s1, s14
 800ef52:	eeb0 0a67 	vmov.f32	s0, s15
 800ef56:	2004      	movs	r0, #4
 800ef58:	f000 fa36 	bl	800f3c8 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800ef5c:	edd7 7a00 	vldr	s15, [r7]
 800ef60:	ed97 7a01 	vldr	s14, [r7, #4]
 800ef64:	edd7 6a02 	vldr	s13, [r7, #8]
 800ef68:	eeb0 1a66 	vmov.f32	s2, s13
 800ef6c:	eef0 0a47 	vmov.f32	s1, s14
 800ef70:	eeb0 0a67 	vmov.f32	s0, s15
 800ef74:	2005      	movs	r0, #5
 800ef76:	f000 fa27 	bl	800f3c8 <PIDSetGain>
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800ef7a:	edd7 7a03 	vldr	s15, [r7, #12]
 800ef7e:	ed97 7a04 	vldr	s14, [r7, #16]
 800ef82:	edd7 6a05 	vldr	s13, [r7, #20]
 800ef86:	eeb0 1a66 	vmov.f32	s2, s13
 800ef8a:	eef0 0a47 	vmov.f32	s1, s14
 800ef8e:	eeb0 0a67 	vmov.f32	s0, s15
 800ef92:	2000      	movs	r0, #0
 800ef94:	f000 fa18 	bl	800f3c8 <PIDSetGain>
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800ef98:	edd7 7a06 	vldr	s15, [r7, #24]
 800ef9c:	ed97 7a07 	vldr	s14, [r7, #28]
 800efa0:	edd7 6a08 	vldr	s13, [r7, #32]
 800efa4:	eeb0 1a66 	vmov.f32	s2, s13
 800efa8:	eef0 0a47 	vmov.f32	s1, s14
 800efac:	eeb0 0a67 	vmov.f32	s0, s15
 800efb0:	2002      	movs	r0, #2
 800efb2:	f000 fa09 	bl	800f3c8 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800efb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800efba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800efbe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800efc2:	eeb0 1a66 	vmov.f32	s2, s13
 800efc6:	eef0 0a47 	vmov.f32	s1, s14
 800efca:	eeb0 0a67 	vmov.f32	s0, s15
 800efce:	2003      	movs	r0, #3
 800efd0:	f000 f9fa 	bl	800f3c8 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800efd4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800efd8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800efdc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800efe0:	eeb0 1a66 	vmov.f32	s2, s13
 800efe4:	eef0 0a47 	vmov.f32	s1, s14
 800efe8:	eeb0 0a67 	vmov.f32	s0, s15
 800efec:	2001      	movs	r0, #1
 800efee:	f000 f9eb 	bl	800f3c8 <PIDSetGain>
}
 800eff2:	bf00      	nop
 800eff4:	3754      	adds	r7, #84	; 0x54
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd90      	pop	{r4, r7, pc}
 800effa:	bf00      	nop
 800effc:	0801a2b8 	.word	0x0801a2b8
 800f000:	08019fd0 	.word	0x08019fd0
 800f004:	08019fdc 	.word	0x08019fdc
 800f008:	08019fec 	.word	0x08019fec
 800f00c:	08019ff4 	.word	0x08019ff4
 800f010:	3a83126f 	.word	0x3a83126f
 800f014:	452f0000 	.word	0x452f0000
 800f018:	4169999a 	.word	0x4169999a
 800f01c:	00000000 	.word	0x00000000

0800f020 <Change_Gain>:
void Change_Gain()
{
 800f020:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f024:	b086      	sub	sp, #24
 800f026:	af04      	add	r7, sp, #16
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800f028:	48af      	ldr	r0, [pc, #700]	; (800f2e8 <Change_Gain+0x2c8>)
 800f02a:	f003 fc50 	bl	80128ce <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800f02e:	48af      	ldr	r0, [pc, #700]	; (800f2ec <Change_Gain+0x2cc>)
 800f030:	f003 fc4d 	bl	80128ce <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800f034:	f7ff fcdc 	bl	800e9f0 <Motor_PWM_Stop>
	EmitterOFF();
 800f038:	f7ff fbf4 	bl	800e824 <EmitterOFF>
//	ADCStart();
//	printf("start\r\n");
	//ADCStop();//ここ
	HAL_Delay(200);
 800f03c:	20c8      	movs	r0, #200	; 0xc8
 800f03e:	f000 fd3b 	bl	800fab8 <HAL_Delay>

	//ゲイン調整する
	char change_mode='0';
 800f042:	2330      	movs	r3, #48	; 0x30
 800f044:	71fb      	strb	r3, [r7, #7]
	char pid = '0';
 800f046:	2330      	movs	r3, #48	; 0x30
 800f048:	71bb      	strb	r3, [r7, #6]
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800f04a:	48a9      	ldr	r0, [pc, #676]	; (800f2f0 <Change_Gain+0x2d0>)
 800f04c:	f007 faee 	bl	801662c <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800f050:	4ba8      	ldr	r3, [pc, #672]	; (800f2f4 <Change_Gain+0x2d4>)
 800f052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f056:	4618      	mov	r0, r3
 800f058:	f7f9 f9ae 	bl	80083b8 <__aeabi_f2d>
 800f05c:	4680      	mov	r8, r0
 800f05e:	4689      	mov	r9, r1
 800f060:	4ba4      	ldr	r3, [pc, #656]	; (800f2f4 <Change_Gain+0x2d4>)
 800f062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f066:	4618      	mov	r0, r3
 800f068:	f7f9 f9a6 	bl	80083b8 <__aeabi_f2d>
 800f06c:	4604      	mov	r4, r0
 800f06e:	460d      	mov	r5, r1
 800f070:	4ba0      	ldr	r3, [pc, #640]	; (800f2f4 <Change_Gain+0x2d4>)
 800f072:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f076:	4618      	mov	r0, r3
 800f078:	f7f9 f99e 	bl	80083b8 <__aeabi_f2d>
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
 800f080:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f084:	e9cd 4500 	strd	r4, r5, [sp]
 800f088:	4642      	mov	r2, r8
 800f08a:	464b      	mov	r3, r9
 800f08c:	489a      	ldr	r0, [pc, #616]	; (800f2f8 <Change_Gain+0x2d8>)
 800f08e:	f007 fa45 	bl	801651c <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800f092:	4b98      	ldr	r3, [pc, #608]	; (800f2f4 <Change_Gain+0x2d4>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4618      	mov	r0, r3
 800f098:	f7f9 f98e 	bl	80083b8 <__aeabi_f2d>
 800f09c:	4680      	mov	r8, r0
 800f09e:	4689      	mov	r9, r1
 800f0a0:	4b94      	ldr	r3, [pc, #592]	; (800f2f4 <Change_Gain+0x2d4>)
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7f9 f987 	bl	80083b8 <__aeabi_f2d>
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	460d      	mov	r5, r1
 800f0ae:	4b91      	ldr	r3, [pc, #580]	; (800f2f4 <Change_Gain+0x2d4>)
 800f0b0:	689b      	ldr	r3, [r3, #8]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7f9 f980 	bl	80083b8 <__aeabi_f2d>
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f0c0:	e9cd 4500 	strd	r4, r5, [sp]
 800f0c4:	4642      	mov	r2, r8
 800f0c6:	464b      	mov	r3, r9
 800f0c8:	488c      	ldr	r0, [pc, #560]	; (800f2fc <Change_Gain+0x2dc>)
 800f0ca:	f007 fa27 	bl	801651c <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800f0ce:	4b89      	ldr	r3, [pc, #548]	; (800f2f4 <Change_Gain+0x2d4>)
 800f0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7f9 f970 	bl	80083b8 <__aeabi_f2d>
 800f0d8:	4680      	mov	r8, r0
 800f0da:	4689      	mov	r9, r1
 800f0dc:	4b85      	ldr	r3, [pc, #532]	; (800f2f4 <Change_Gain+0x2d4>)
 800f0de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7f9 f969 	bl	80083b8 <__aeabi_f2d>
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	460d      	mov	r5, r1
 800f0ea:	4b82      	ldr	r3, [pc, #520]	; (800f2f4 <Change_Gain+0x2d4>)
 800f0ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7f9 f962 	bl	80083b8 <__aeabi_f2d>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f0fc:	e9cd 4500 	strd	r4, r5, [sp]
 800f100:	4642      	mov	r2, r8
 800f102:	464b      	mov	r3, r9
 800f104:	487e      	ldr	r0, [pc, #504]	; (800f300 <Change_Gain+0x2e0>)
 800f106:	f007 fa09 	bl	801651c <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800f10a:	4b7a      	ldr	r3, [pc, #488]	; (800f2f4 <Change_Gain+0x2d4>)
 800f10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f110:	4618      	mov	r0, r3
 800f112:	f7f9 f951 	bl	80083b8 <__aeabi_f2d>
 800f116:	4680      	mov	r8, r0
 800f118:	4689      	mov	r9, r1
 800f11a:	4b76      	ldr	r3, [pc, #472]	; (800f2f4 <Change_Gain+0x2d4>)
 800f11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f120:	4618      	mov	r0, r3
 800f122:	f7f9 f949 	bl	80083b8 <__aeabi_f2d>
 800f126:	4604      	mov	r4, r0
 800f128:	460d      	mov	r5, r1
 800f12a:	4b72      	ldr	r3, [pc, #456]	; (800f2f4 <Change_Gain+0x2d4>)
 800f12c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f130:	4618      	mov	r0, r3
 800f132:	f7f9 f941 	bl	80083b8 <__aeabi_f2d>
 800f136:	4602      	mov	r2, r0
 800f138:	460b      	mov	r3, r1
 800f13a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f13e:	e9cd 4500 	strd	r4, r5, [sp]
 800f142:	4642      	mov	r2, r8
 800f144:	464b      	mov	r3, r9
 800f146:	486f      	ldr	r0, [pc, #444]	; (800f304 <Change_Gain+0x2e4>)
 800f148:	f007 f9e8 	bl	801651c <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800f14c:	4b69      	ldr	r3, [pc, #420]	; (800f2f4 <Change_Gain+0x2d4>)
 800f14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f150:	4618      	mov	r0, r3
 800f152:	f7f9 f931 	bl	80083b8 <__aeabi_f2d>
 800f156:	4680      	mov	r8, r0
 800f158:	4689      	mov	r9, r1
 800f15a:	4b66      	ldr	r3, [pc, #408]	; (800f2f4 <Change_Gain+0x2d4>)
 800f15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f15e:	4618      	mov	r0, r3
 800f160:	f7f9 f92a 	bl	80083b8 <__aeabi_f2d>
 800f164:	4604      	mov	r4, r0
 800f166:	460d      	mov	r5, r1
 800f168:	4b62      	ldr	r3, [pc, #392]	; (800f2f4 <Change_Gain+0x2d4>)
 800f16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7f9 f923 	bl	80083b8 <__aeabi_f2d>
 800f172:	4602      	mov	r2, r0
 800f174:	460b      	mov	r3, r1
 800f176:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f17a:	e9cd 4500 	strd	r4, r5, [sp]
 800f17e:	4642      	mov	r2, r8
 800f180:	464b      	mov	r3, r9
 800f182:	4861      	ldr	r0, [pc, #388]	; (800f308 <Change_Gain+0x2e8>)
 800f184:	f007 f9ca 	bl	801651c <iprintf>

		Buffering();
 800f188:	f7ff fdc2 	bl	800ed10 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800f18c:	485f      	ldr	r0, [pc, #380]	; (800f30c <Change_Gain+0x2ec>)
 800f18e:	f007 f9c5 	bl	801651c <iprintf>
 800f192:	1dfb      	adds	r3, r7, #7
 800f194:	4619      	mov	r1, r3
 800f196:	485e      	ldr	r0, [pc, #376]	; (800f310 <Change_Gain+0x2f0>)
 800f198:	f007 fc54 	bl	8016a44 <iscanf>
		if(change_mode == '0')
 800f19c:	79fb      	ldrb	r3, [r7, #7]
 800f19e:	2b30      	cmp	r3, #48	; 0x30
 800f1a0:	f000 80f4 	beq.w	800f38c <Change_Gain+0x36c>
			break;
		}
		else
		{

			Buffering();
 800f1a4:	f7ff fdb4 	bl	800ed10 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800f1a8:	485a      	ldr	r0, [pc, #360]	; (800f314 <Change_Gain+0x2f4>)
 800f1aa:	f007 f9b7 	bl	801651c <iprintf>
 800f1ae:	1dbb      	adds	r3, r7, #6
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	4857      	ldr	r0, [pc, #348]	; (800f310 <Change_Gain+0x2f0>)
 800f1b4:	f007 fc46 	bl	8016a44 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800f1b8:	79fb      	ldrb	r3, [r7, #7]
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	79bb      	ldrb	r3, [r7, #6]
 800f1be:	461a      	mov	r2, r3
 800f1c0:	4855      	ldr	r0, [pc, #340]	; (800f318 <Change_Gain+0x2f8>)
 800f1c2:	f007 f9ab 	bl	801651c <iprintf>

			Buffering();
 800f1c6:	f7ff fda3 	bl	800ed10 <Buffering>
			printf("\r\n値を入力 : ");
 800f1ca:	4854      	ldr	r0, [pc, #336]	; (800f31c <Change_Gain+0x2fc>)
 800f1cc:	f007 f9a6 	bl	801651c <iprintf>

			switch(change_mode)
 800f1d0:	79fb      	ldrb	r3, [r7, #7]
 800f1d2:	3b31      	subs	r3, #49	; 0x31
 800f1d4:	2b04      	cmp	r3, #4
 800f1d6:	f200 80c1 	bhi.w	800f35c <Change_Gain+0x33c>
 800f1da:	a201      	add	r2, pc, #4	; (adr r2, 800f1e0 <Change_Gain+0x1c0>)
 800f1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e0:	0800f1f5 	.word	0x0800f1f5
 800f1e4:	0800f227 	.word	0x0800f227
 800f1e8:	0800f259 	.word	0x0800f259
 800f1ec:	0800f289 	.word	0x0800f289
 800f1f0:	0800f2b9 	.word	0x0800f2b9
			{
			case '1'://並進速度制御ゲイン
				//printf("p , i or d ?");scanf("%c",pid);

				if(pid == 'p')
 800f1f4:	79bb      	ldrb	r3, [r7, #6]
 800f1f6:	2b70      	cmp	r3, #112	; 0x70
 800f1f8:	d104      	bne.n	800f204 <Change_Gain+0x1e4>
				{
					scanf("%f",&Pid[L_VELO_PID].KP);
 800f1fa:	4949      	ldr	r1, [pc, #292]	; (800f320 <Change_Gain+0x300>)
 800f1fc:	4849      	ldr	r0, [pc, #292]	; (800f324 <Change_Gain+0x304>)
 800f1fe:	f007 fc21 	bl	8016a44 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_VELO_PID].KD);
				}
				break;
 800f202:	e0af      	b.n	800f364 <Change_Gain+0x344>
				else if(pid == 'i')
 800f204:	79bb      	ldrb	r3, [r7, #6]
 800f206:	2b69      	cmp	r3, #105	; 0x69
 800f208:	d104      	bne.n	800f214 <Change_Gain+0x1f4>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800f20a:	4947      	ldr	r1, [pc, #284]	; (800f328 <Change_Gain+0x308>)
 800f20c:	4845      	ldr	r0, [pc, #276]	; (800f324 <Change_Gain+0x304>)
 800f20e:	f007 fc19 	bl	8016a44 <iscanf>
				break;
 800f212:	e0a7      	b.n	800f364 <Change_Gain+0x344>
				else if(pid == 'd')
 800f214:	79bb      	ldrb	r3, [r7, #6]
 800f216:	2b64      	cmp	r3, #100	; 0x64
 800f218:	f040 80a4 	bne.w	800f364 <Change_Gain+0x344>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800f21c:	4943      	ldr	r1, [pc, #268]	; (800f32c <Change_Gain+0x30c>)
 800f21e:	4841      	ldr	r0, [pc, #260]	; (800f324 <Change_Gain+0x304>)
 800f220:	f007 fc10 	bl	8016a44 <iscanf>
				break;
 800f224:	e09e      	b.n	800f364 <Change_Gain+0x344>

			case '2'://回転角速度制御ゲイン
				if(pid == 'p')
 800f226:	79bb      	ldrb	r3, [r7, #6]
 800f228:	2b70      	cmp	r3, #112	; 0x70
 800f22a:	d104      	bne.n	800f236 <Change_Gain+0x216>
				{
					scanf("%f",&Pid[A_VELO_PID].KP);
 800f22c:	4931      	ldr	r1, [pc, #196]	; (800f2f4 <Change_Gain+0x2d4>)
 800f22e:	483d      	ldr	r0, [pc, #244]	; (800f324 <Change_Gain+0x304>)
 800f230:	f007 fc08 	bl	8016a44 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[A_VELO_PID].KD);
				}
				break;
 800f234:	e098      	b.n	800f368 <Change_Gain+0x348>
				else if(pid == 'i')
 800f236:	79bb      	ldrb	r3, [r7, #6]
 800f238:	2b69      	cmp	r3, #105	; 0x69
 800f23a:	d104      	bne.n	800f246 <Change_Gain+0x226>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800f23c:	493c      	ldr	r1, [pc, #240]	; (800f330 <Change_Gain+0x310>)
 800f23e:	4839      	ldr	r0, [pc, #228]	; (800f324 <Change_Gain+0x304>)
 800f240:	f007 fc00 	bl	8016a44 <iscanf>
				break;
 800f244:	e090      	b.n	800f368 <Change_Gain+0x348>
				else if(pid == 'd')
 800f246:	79bb      	ldrb	r3, [r7, #6]
 800f248:	2b64      	cmp	r3, #100	; 0x64
 800f24a:	f040 808d 	bne.w	800f368 <Change_Gain+0x348>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800f24e:	4939      	ldr	r1, [pc, #228]	; (800f334 <Change_Gain+0x314>)
 800f250:	4834      	ldr	r0, [pc, #208]	; (800f324 <Change_Gain+0x304>)
 800f252:	f007 fbf7 	bl	8016a44 <iscanf>
				break;
 800f256:	e087      	b.n	800f368 <Change_Gain+0x348>

			case '3'://壁制御ゲイン
				if(pid == 'p')
 800f258:	79bb      	ldrb	r3, [r7, #6]
 800f25a:	2b70      	cmp	r3, #112	; 0x70
 800f25c:	d104      	bne.n	800f268 <Change_Gain+0x248>
				{
					scanf("%f",&Pid[L_WALL_PID].KP);
 800f25e:	4936      	ldr	r1, [pc, #216]	; (800f338 <Change_Gain+0x318>)
 800f260:	4830      	ldr	r0, [pc, #192]	; (800f324 <Change_Gain+0x304>)
 800f262:	f007 fbef 	bl	8016a44 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_WALL_PID].KD);
				}
				break;
 800f266:	e081      	b.n	800f36c <Change_Gain+0x34c>
				else if(pid == 'i')
 800f268:	79bb      	ldrb	r3, [r7, #6]
 800f26a:	2b69      	cmp	r3, #105	; 0x69
 800f26c:	d104      	bne.n	800f278 <Change_Gain+0x258>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800f26e:	4933      	ldr	r1, [pc, #204]	; (800f33c <Change_Gain+0x31c>)
 800f270:	482c      	ldr	r0, [pc, #176]	; (800f324 <Change_Gain+0x304>)
 800f272:	f007 fbe7 	bl	8016a44 <iscanf>
				break;
 800f276:	e079      	b.n	800f36c <Change_Gain+0x34c>
				else if(pid == 'd')
 800f278:	79bb      	ldrb	r3, [r7, #6]
 800f27a:	2b64      	cmp	r3, #100	; 0x64
 800f27c:	d176      	bne.n	800f36c <Change_Gain+0x34c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800f27e:	4930      	ldr	r1, [pc, #192]	; (800f340 <Change_Gain+0x320>)
 800f280:	4828      	ldr	r0, [pc, #160]	; (800f324 <Change_Gain+0x304>)
 800f282:	f007 fbdf 	bl	8016a44 <iscanf>
				break;
 800f286:	e071      	b.n	800f36c <Change_Gain+0x34c>
			case '4'://壁制御ゲイン
				if(pid == 'p')
 800f288:	79bb      	ldrb	r3, [r7, #6]
 800f28a:	2b70      	cmp	r3, #112	; 0x70
 800f28c:	d104      	bne.n	800f298 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[R_WALL_PID].KP);
 800f28e:	492d      	ldr	r1, [pc, #180]	; (800f344 <Change_Gain+0x324>)
 800f290:	4824      	ldr	r0, [pc, #144]	; (800f324 <Change_Gain+0x304>)
 800f292:	f007 fbd7 	bl	8016a44 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
 800f296:	e06b      	b.n	800f370 <Change_Gain+0x350>
				else if(pid == 'i')
 800f298:	79bb      	ldrb	r3, [r7, #6]
 800f29a:	2b69      	cmp	r3, #105	; 0x69
 800f29c:	d104      	bne.n	800f2a8 <Change_Gain+0x288>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800f29e:	492a      	ldr	r1, [pc, #168]	; (800f348 <Change_Gain+0x328>)
 800f2a0:	4820      	ldr	r0, [pc, #128]	; (800f324 <Change_Gain+0x304>)
 800f2a2:	f007 fbcf 	bl	8016a44 <iscanf>
				break;
 800f2a6:	e063      	b.n	800f370 <Change_Gain+0x350>
				else if(pid == 'd')
 800f2a8:	79bb      	ldrb	r3, [r7, #6]
 800f2aa:	2b64      	cmp	r3, #100	; 0x64
 800f2ac:	d160      	bne.n	800f370 <Change_Gain+0x350>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800f2ae:	4927      	ldr	r1, [pc, #156]	; (800f34c <Change_Gain+0x32c>)
 800f2b0:	481c      	ldr	r0, [pc, #112]	; (800f324 <Change_Gain+0x304>)
 800f2b2:	f007 fbc7 	bl	8016a44 <iscanf>
				break;
 800f2b6:	e05b      	b.n	800f370 <Change_Gain+0x350>
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800f2b8:	79bb      	ldrb	r3, [r7, #6]
 800f2ba:	2b70      	cmp	r3, #112	; 0x70
 800f2bc:	d104      	bne.n	800f2c8 <Change_Gain+0x2a8>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
 800f2be:	4924      	ldr	r1, [pc, #144]	; (800f350 <Change_Gain+0x330>)
 800f2c0:	4818      	ldr	r0, [pc, #96]	; (800f324 <Change_Gain+0x304>)
 800f2c2:	f007 fbbf 	bl	8016a44 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[D_WALL_PID].KD);
				}
				break;
 800f2c6:	e055      	b.n	800f374 <Change_Gain+0x354>
				else if(pid == 'i')
 800f2c8:	79bb      	ldrb	r3, [r7, #6]
 800f2ca:	2b69      	cmp	r3, #105	; 0x69
 800f2cc:	d104      	bne.n	800f2d8 <Change_Gain+0x2b8>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800f2ce:	4921      	ldr	r1, [pc, #132]	; (800f354 <Change_Gain+0x334>)
 800f2d0:	4814      	ldr	r0, [pc, #80]	; (800f324 <Change_Gain+0x304>)
 800f2d2:	f007 fbb7 	bl	8016a44 <iscanf>
				break;
 800f2d6:	e04d      	b.n	800f374 <Change_Gain+0x354>
				else if(pid == 'd')
 800f2d8:	79bb      	ldrb	r3, [r7, #6]
 800f2da:	2b64      	cmp	r3, #100	; 0x64
 800f2dc:	d14a      	bne.n	800f374 <Change_Gain+0x354>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800f2de:	491e      	ldr	r1, [pc, #120]	; (800f358 <Change_Gain+0x338>)
 800f2e0:	4810      	ldr	r0, [pc, #64]	; (800f324 <Change_Gain+0x304>)
 800f2e2:	f007 fbaf 	bl	8016a44 <iscanf>
				break;
 800f2e6:	e045      	b.n	800f374 <Change_Gain+0x354>
 800f2e8:	20008e74 	.word	0x20008e74
 800f2ec:	20008c2c 	.word	0x20008c2c
 800f2f0:	0801a018 	.word	0x0801a018
 800f2f4:	20008034 	.word	0x20008034
 800f2f8:	0801a030 	.word	0x0801a030
 800f2fc:	0801a050 	.word	0x0801a050
 800f300:	0801a06c 	.word	0x0801a06c
 800f304:	0801a088 	.word	0x0801a088
 800f308:	0801a0a4 	.word	0x0801a0a4
 800f30c:	0801a0c0 	.word	0x0801a0c0
 800f310:	0801a0d8 	.word	0x0801a0d8
 800f314:	0801a0dc 	.word	0x0801a0dc
 800f318:	0801a0f0 	.word	0x0801a0f0
 800f31c:	0801a114 	.word	0x0801a114
 800f320:	200080e4 	.word	0x200080e4
 800f324:	0801a128 	.word	0x0801a128
 800f328:	200080e8 	.word	0x200080e8
 800f32c:	200080ec 	.word	0x200080ec
 800f330:	20008038 	.word	0x20008038
 800f334:	2000803c 	.word	0x2000803c
 800f338:	2000808c 	.word	0x2000808c
 800f33c:	20008090 	.word	0x20008090
 800f340:	20008094 	.word	0x20008094
 800f344:	200080b8 	.word	0x200080b8
 800f348:	200080bc 	.word	0x200080bc
 800f34c:	200080c0 	.word	0x200080c0
 800f350:	20008060 	.word	0x20008060
 800f354:	20008064 	.word	0x20008064
 800f358:	20008068 	.word	0x20008068
			default :
				printf("該当しません\r\n");
 800f35c:	4816      	ldr	r0, [pc, #88]	; (800f3b8 <Change_Gain+0x398>)
 800f35e:	f007 f965 	bl	801662c <puts>
				break;
 800f362:	e008      	b.n	800f376 <Change_Gain+0x356>
				break;
 800f364:	bf00      	nop
 800f366:	e006      	b.n	800f376 <Change_Gain+0x356>
				break;
 800f368:	bf00      	nop
 800f36a:	e004      	b.n	800f376 <Change_Gain+0x356>
				break;
 800f36c:	bf00      	nop
 800f36e:	e002      	b.n	800f376 <Change_Gain+0x356>
				break;
 800f370:	bf00      	nop
 800f372:	e000      	b.n	800f376 <Change_Gain+0x356>
				break;
 800f374:	bf00      	nop
			}
			Buffering();
 800f376:	f7ff fccb 	bl	800ed10 <Buffering>
			scanf("%c",&nl);
 800f37a:	1d7b      	adds	r3, r7, #5
 800f37c:	4619      	mov	r1, r3
 800f37e:	480f      	ldr	r0, [pc, #60]	; (800f3bc <Change_Gain+0x39c>)
 800f380:	f007 fb60 	bl	8016a44 <iscanf>
			printf("\r\n");
 800f384:	480e      	ldr	r0, [pc, #56]	; (800f3c0 <Change_Gain+0x3a0>)
 800f386:	f007 f951 	bl	801662c <puts>
		printf("現在のPIDゲイン\r\n");
 800f38a:	e65e      	b.n	800f04a <Change_Gain+0x2a>
			break;
 800f38c:	bf00      	nop
		}

	}
	printf("\r\n完了\r\n");
 800f38e:	480d      	ldr	r0, [pc, #52]	; (800f3c4 <Change_Gain+0x3a4>)
 800f390:	f007 f94c 	bl	801662c <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800f394:	f7fe ff95 	bl	800e2c2 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800f398:	f7ff fcce 	bl	800ed38 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800f39c:	2007      	movs	r0, #7
 800f39e:	f7ff fa4f 	bl	800e840 <ChangeLED>
	HAL_Delay(200);
 800f3a2:	20c8      	movs	r0, #200	; 0xc8
 800f3a4:	f000 fb88 	bl	800fab8 <HAL_Delay>
	ChangeLED(0);
 800f3a8:	2000      	movs	r0, #0
 800f3aa:	f7ff fa49 	bl	800e840 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800f3ae:	bf00      	nop
 800f3b0:	3708      	adds	r7, #8
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f3b8:	0801a12c 	.word	0x0801a12c
 800f3bc:	0801a0d8 	.word	0x0801a0d8
 800f3c0:	0801a140 	.word	0x0801a140
 800f3c4:	0801a144 	.word	0x0801a144

0800f3c8 <PIDSetGain>:
//		elast[i] = 0;
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b085      	sub	sp, #20
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	ed87 0a02 	vstr	s0, [r7, #8]
 800f3d4:	edc7 0a01 	vstr	s1, [r7, #4]
 800f3d8:	ed87 1a00 	vstr	s2, [r7]
	Pid[n].KP = kp;
 800f3dc:	4a0f      	ldr	r2, [pc, #60]	; (800f41c <PIDSetGain+0x54>)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	212c      	movs	r1, #44	; 0x2c
 800f3e2:	fb01 f303 	mul.w	r3, r1, r3
 800f3e6:	4413      	add	r3, r2
 800f3e8:	68ba      	ldr	r2, [r7, #8]
 800f3ea:	601a      	str	r2, [r3, #0]
	Pid[n].KI = ki;
 800f3ec:	4a0b      	ldr	r2, [pc, #44]	; (800f41c <PIDSetGain+0x54>)
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	212c      	movs	r1, #44	; 0x2c
 800f3f2:	fb01 f303 	mul.w	r3, r1, r3
 800f3f6:	4413      	add	r3, r2
 800f3f8:	3304      	adds	r3, #4
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	601a      	str	r2, [r3, #0]
	Pid[n].KD = kd;
 800f3fe:	4a07      	ldr	r2, [pc, #28]	; (800f41c <PIDSetGain+0x54>)
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	212c      	movs	r1, #44	; 0x2c
 800f404:	fb01 f303 	mul.w	r3, r1, r3
 800f408:	4413      	add	r3, r2
 800f40a:	3308      	adds	r3, #8
 800f40c:	683a      	ldr	r2, [r7, #0]
 800f40e:	601a      	str	r2, [r3, #0]

}
 800f410:	bf00      	nop
 800f412:	3714      	adds	r7, #20
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr
 800f41c:	20008034 	.word	0x20008034

0800f420 <PIDChangeFlag>:
//	ei[n] = 0;
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
 800f420:	b480      	push	{r7}
 800f422:	b083      	sub	sp, #12
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
	Pid[n].flag = on_or_off;
 800f42a:	4a07      	ldr	r2, [pc, #28]	; (800f448 <PIDChangeFlag+0x28>)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	212c      	movs	r1, #44	; 0x2c
 800f430:	fb01 f303 	mul.w	r3, r1, r3
 800f434:	4413      	add	r3, r2
 800f436:	3328      	adds	r3, #40	; 0x28
 800f438:	683a      	ldr	r2, [r7, #0]
 800f43a:	601a      	str	r2, [r3, #0]
}
 800f43c:	bf00      	nop
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr
 800f448:	20008034 	.word	0x20008034

0800f44c <PIDReset>:
int PIDGetFlag(int n)
{
	return Pid[n].flag;
}
void PIDReset(int n)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800f454:	4a1b      	ldr	r2, [pc, #108]	; (800f4c4 <PIDReset+0x78>)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	212c      	movs	r1, #44	; 0x2c
 800f45a:	fb01 f303 	mul.w	r3, r1, r3
 800f45e:	4413      	add	r3, r2
 800f460:	330c      	adds	r3, #12
 800f462:	f04f 0200 	mov.w	r2, #0
 800f466:	601a      	str	r2, [r3, #0]
	Pid[n].ei = 0;
 800f468:	4a16      	ldr	r2, [pc, #88]	; (800f4c4 <PIDReset+0x78>)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	212c      	movs	r1, #44	; 0x2c
 800f46e:	fb01 f303 	mul.w	r3, r1, r3
 800f472:	4413      	add	r3, r2
 800f474:	3310      	adds	r3, #16
 800f476:	f04f 0200 	mov.w	r2, #0
 800f47a:	601a      	str	r2, [r3, #0]
	Pid[n].ed = 0;
 800f47c:	4a11      	ldr	r2, [pc, #68]	; (800f4c4 <PIDReset+0x78>)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	212c      	movs	r1, #44	; 0x2c
 800f482:	fb01 f303 	mul.w	r3, r1, r3
 800f486:	4413      	add	r3, r2
 800f488:	3314      	adds	r3, #20
 800f48a:	f04f 0200 	mov.w	r2, #0
 800f48e:	601a      	str	r2, [r3, #0]
	Pid[n].elast = 0;
 800f490:	4a0c      	ldr	r2, [pc, #48]	; (800f4c4 <PIDReset+0x78>)
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	212c      	movs	r1, #44	; 0x2c
 800f496:	fb01 f303 	mul.w	r3, r1, r3
 800f49a:	4413      	add	r3, r2
 800f49c:	3318      	adds	r3, #24
 800f49e:	f04f 0200 	mov.w	r2, #0
 800f4a2:	601a      	str	r2, [r3, #0]
	Pid[n].out = 0;
 800f4a4:	4a07      	ldr	r2, [pc, #28]	; (800f4c4 <PIDReset+0x78>)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	212c      	movs	r1, #44	; 0x2c
 800f4aa:	fb01 f303 	mul.w	r3, r1, r3
 800f4ae:	4413      	add	r3, r2
 800f4b0:	3324      	adds	r3, #36	; 0x24
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	601a      	str	r2, [r3, #0]
}
 800f4b6:	bf00      	nop
 800f4b8:	370c      	adds	r7, #12
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c0:	4770      	bx	lr
 800f4c2:	bf00      	nop
 800f4c4:	20008034 	.word	0x20008034

0800f4c8 <PIDControl>:
//{
//	Pid[n].target = target;
//	Pid[n].current = current;
//}
inline int PIDControl(int n, float target, float current)
{
 800f4c8:	b590      	push	{r4, r7, lr}
 800f4ca:	b085      	sub	sp, #20
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	ed87 0a02 	vstr	s0, [r7, #8]
 800f4d4:	edc7 0a01 	vstr	s1, [r7, #4]
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800f4d8:	4a90      	ldr	r2, [pc, #576]	; (800f71c <PIDControl+0x254>)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	212c      	movs	r1, #44	; 0x2c
 800f4de:	fb01 f303 	mul.w	r3, r1, r3
 800f4e2:	4413      	add	r3, r2
 800f4e4:	3328      	adds	r3, #40	; 0x28
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d132      	bne.n	800f552 <PIDControl+0x8a>
	{
		Pid[n].e = 0.0f;
 800f4ec:	4a8b      	ldr	r2, [pc, #556]	; (800f71c <PIDControl+0x254>)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	212c      	movs	r1, #44	; 0x2c
 800f4f2:	fb01 f303 	mul.w	r3, r1, r3
 800f4f6:	4413      	add	r3, r2
 800f4f8:	330c      	adds	r3, #12
 800f4fa:	f04f 0200 	mov.w	r2, #0
 800f4fe:	601a      	str	r2, [r3, #0]
		Pid[n].ei = 0.0f;
 800f500:	4a86      	ldr	r2, [pc, #536]	; (800f71c <PIDControl+0x254>)
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	212c      	movs	r1, #44	; 0x2c
 800f506:	fb01 f303 	mul.w	r3, r1, r3
 800f50a:	4413      	add	r3, r2
 800f50c:	3310      	adds	r3, #16
 800f50e:	f04f 0200 	mov.w	r2, #0
 800f512:	601a      	str	r2, [r3, #0]
		Pid[n].ed = 0.0f;
 800f514:	4a81      	ldr	r2, [pc, #516]	; (800f71c <PIDControl+0x254>)
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	212c      	movs	r1, #44	; 0x2c
 800f51a:	fb01 f303 	mul.w	r3, r1, r3
 800f51e:	4413      	add	r3, r2
 800f520:	3314      	adds	r3, #20
 800f522:	f04f 0200 	mov.w	r2, #0
 800f526:	601a      	str	r2, [r3, #0]
		Pid[n].elast = 0.0f;
 800f528:	4a7c      	ldr	r2, [pc, #496]	; (800f71c <PIDControl+0x254>)
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	212c      	movs	r1, #44	; 0x2c
 800f52e:	fb01 f303 	mul.w	r3, r1, r3
 800f532:	4413      	add	r3, r2
 800f534:	3318      	adds	r3, #24
 800f536:	f04f 0200 	mov.w	r2, #0
 800f53a:	601a      	str	r2, [r3, #0]
		Pid[n].out = 0;
 800f53c:	4a77      	ldr	r2, [pc, #476]	; (800f71c <PIDControl+0x254>)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	212c      	movs	r1, #44	; 0x2c
 800f542:	fb01 f303 	mul.w	r3, r1, r3
 800f546:	4413      	add	r3, r2
 800f548:	3324      	adds	r3, #36	; 0x24
 800f54a:	2200      	movs	r2, #0
 800f54c:	601a      	str	r2, [r3, #0]
		return 0;
 800f54e:	2300      	movs	r3, #0
 800f550:	e0df      	b.n	800f712 <PIDControl+0x24a>
		//PIDReset(n);
	}
	else
	{
		Pid[n].target = target;
 800f552:	4a72      	ldr	r2, [pc, #456]	; (800f71c <PIDControl+0x254>)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	212c      	movs	r1, #44	; 0x2c
 800f558:	fb01 f303 	mul.w	r3, r1, r3
 800f55c:	4413      	add	r3, r2
 800f55e:	3320      	adds	r3, #32
 800f560:	68ba      	ldr	r2, [r7, #8]
 800f562:	601a      	str	r2, [r3, #0]
		Pid[n].current = current;
 800f564:	4a6d      	ldr	r2, [pc, #436]	; (800f71c <PIDControl+0x254>)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	212c      	movs	r1, #44	; 0x2c
 800f56a:	fb01 f303 	mul.w	r3, r1, r3
 800f56e:	4413      	add	r3, r2
 800f570:	331c      	adds	r3, #28
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	601a      	str	r2, [r3, #0]

		Pid[n].e = Pid[n].target - Pid[n].current;
 800f576:	4a69      	ldr	r2, [pc, #420]	; (800f71c <PIDControl+0x254>)
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	212c      	movs	r1, #44	; 0x2c
 800f57c:	fb01 f303 	mul.w	r3, r1, r3
 800f580:	4413      	add	r3, r2
 800f582:	3320      	adds	r3, #32
 800f584:	ed93 7a00 	vldr	s14, [r3]
 800f588:	4a64      	ldr	r2, [pc, #400]	; (800f71c <PIDControl+0x254>)
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	212c      	movs	r1, #44	; 0x2c
 800f58e:	fb01 f303 	mul.w	r3, r1, r3
 800f592:	4413      	add	r3, r2
 800f594:	331c      	adds	r3, #28
 800f596:	edd3 7a00 	vldr	s15, [r3]
 800f59a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f59e:	4a5f      	ldr	r2, [pc, #380]	; (800f71c <PIDControl+0x254>)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	212c      	movs	r1, #44	; 0x2c
 800f5a4:	fb01 f303 	mul.w	r3, r1, r3
 800f5a8:	4413      	add	r3, r2
 800f5aa:	330c      	adds	r3, #12
 800f5ac:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ei += Pid[n].e * pid_T;
 800f5b0:	4a5a      	ldr	r2, [pc, #360]	; (800f71c <PIDControl+0x254>)
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	212c      	movs	r1, #44	; 0x2c
 800f5b6:	fb01 f303 	mul.w	r3, r1, r3
 800f5ba:	4413      	add	r3, r2
 800f5bc:	3310      	adds	r3, #16
 800f5be:	ed93 7a00 	vldr	s14, [r3]
 800f5c2:	4a56      	ldr	r2, [pc, #344]	; (800f71c <PIDControl+0x254>)
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	212c      	movs	r1, #44	; 0x2c
 800f5c8:	fb01 f303 	mul.w	r3, r1, r3
 800f5cc:	4413      	add	r3, r2
 800f5ce:	330c      	adds	r3, #12
 800f5d0:	edd3 7a00 	vldr	s15, [r3]
 800f5d4:	eddf 6a52 	vldr	s13, [pc, #328]	; 800f720 <PIDControl+0x258>
 800f5d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f5dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5e0:	4a4e      	ldr	r2, [pc, #312]	; (800f71c <PIDControl+0x254>)
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	212c      	movs	r1, #44	; 0x2c
 800f5e6:	fb01 f303 	mul.w	r3, r1, r3
 800f5ea:	4413      	add	r3, r2
 800f5ec:	3310      	adds	r3, #16
 800f5ee:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800f5f2:	4a4a      	ldr	r2, [pc, #296]	; (800f71c <PIDControl+0x254>)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	212c      	movs	r1, #44	; 0x2c
 800f5f8:	fb01 f303 	mul.w	r3, r1, r3
 800f5fc:	4413      	add	r3, r2
 800f5fe:	330c      	adds	r3, #12
 800f600:	ed93 7a00 	vldr	s14, [r3]
 800f604:	4a45      	ldr	r2, [pc, #276]	; (800f71c <PIDControl+0x254>)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	212c      	movs	r1, #44	; 0x2c
 800f60a:	fb01 f303 	mul.w	r3, r1, r3
 800f60e:	4413      	add	r3, r2
 800f610:	3318      	adds	r3, #24
 800f612:	edd3 7a00 	vldr	s15, [r3]
 800f616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f61a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800f724 <PIDControl+0x25c>
 800f61e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f622:	4a3e      	ldr	r2, [pc, #248]	; (800f71c <PIDControl+0x254>)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	212c      	movs	r1, #44	; 0x2c
 800f628:	fb01 f303 	mul.w	r3, r1, r3
 800f62c:	4413      	add	r3, r2
 800f62e:	3314      	adds	r3, #20
 800f630:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].elast = Pid[n].e;
 800f634:	4a39      	ldr	r2, [pc, #228]	; (800f71c <PIDControl+0x254>)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	212c      	movs	r1, #44	; 0x2c
 800f63a:	fb01 f303 	mul.w	r3, r1, r3
 800f63e:	4413      	add	r3, r2
 800f640:	330c      	adds	r3, #12
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	4935      	ldr	r1, [pc, #212]	; (800f71c <PIDControl+0x254>)
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	202c      	movs	r0, #44	; 0x2c
 800f64a:	fb00 f303 	mul.w	r3, r0, r3
 800f64e:	440b      	add	r3, r1
 800f650:	3318      	adds	r3, #24
 800f652:	601a      	str	r2, [r3, #0]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800f654:	4a31      	ldr	r2, [pc, #196]	; (800f71c <PIDControl+0x254>)
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	212c      	movs	r1, #44	; 0x2c
 800f65a:	fb01 f303 	mul.w	r3, r1, r3
 800f65e:	4413      	add	r3, r2
 800f660:	ed93 7a00 	vldr	s14, [r3]
 800f664:	4a2d      	ldr	r2, [pc, #180]	; (800f71c <PIDControl+0x254>)
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	212c      	movs	r1, #44	; 0x2c
 800f66a:	fb01 f303 	mul.w	r3, r1, r3
 800f66e:	4413      	add	r3, r2
 800f670:	330c      	adds	r3, #12
 800f672:	edd3 7a00 	vldr	s15, [r3]
 800f676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f67a:	4a28      	ldr	r2, [pc, #160]	; (800f71c <PIDControl+0x254>)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	212c      	movs	r1, #44	; 0x2c
 800f680:	fb01 f303 	mul.w	r3, r1, r3
 800f684:	4413      	add	r3, r2
 800f686:	3304      	adds	r3, #4
 800f688:	edd3 6a00 	vldr	s13, [r3]
 800f68c:	4a23      	ldr	r2, [pc, #140]	; (800f71c <PIDControl+0x254>)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	212c      	movs	r1, #44	; 0x2c
 800f692:	fb01 f303 	mul.w	r3, r1, r3
 800f696:	4413      	add	r3, r2
 800f698:	3310      	adds	r3, #16
 800f69a:	edd3 7a00 	vldr	s15, [r3]
 800f69e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f6a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f6a6:	4a1d      	ldr	r2, [pc, #116]	; (800f71c <PIDControl+0x254>)
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	212c      	movs	r1, #44	; 0x2c
 800f6ac:	fb01 f303 	mul.w	r3, r1, r3
 800f6b0:	4413      	add	r3, r2
 800f6b2:	3308      	adds	r3, #8
 800f6b4:	edd3 6a00 	vldr	s13, [r3]
 800f6b8:	4a18      	ldr	r2, [pc, #96]	; (800f71c <PIDControl+0x254>)
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	212c      	movs	r1, #44	; 0x2c
 800f6be:	fb01 f303 	mul.w	r3, r1, r3
 800f6c2:	4413      	add	r3, r2
 800f6c4:	3314      	adds	r3, #20
 800f6c6:	edd3 7a00 	vldr	s15, [r3]
 800f6ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f6ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6d2:	ee17 0a90 	vmov	r0, s15
 800f6d6:	f7f8 fe6f 	bl	80083b8 <__aeabi_f2d>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	460c      	mov	r4, r1
 800f6de:	ec44 3b10 	vmov	d0, r3, r4
 800f6e2:	f005 f991 	bl	8014a08 <round>
 800f6e6:	ec54 3b10 	vmov	r3, r4, d0
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	f7f9 f96b 	bl	80089c8 <__aeabi_d2iz>
 800f6f2:	4a0a      	ldr	r2, [pc, #40]	; (800f71c <PIDControl+0x254>)
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	212c      	movs	r1, #44	; 0x2c
 800f6f8:	fb01 f303 	mul.w	r3, r1, r3
 800f6fc:	4413      	add	r3, r2
 800f6fe:	3324      	adds	r3, #36	; 0x24
 800f700:	6018      	str	r0, [r3, #0]
		return Pid[n].out;
 800f702:	4a06      	ldr	r2, [pc, #24]	; (800f71c <PIDControl+0x254>)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	212c      	movs	r1, #44	; 0x2c
 800f708:	fb01 f303 	mul.w	r3, r1, r3
 800f70c:	4413      	add	r3, r2
 800f70e:	3324      	adds	r3, #36	; 0x24
 800f710:	681b      	ldr	r3, [r3, #0]
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800f712:	4618      	mov	r0, r3
 800f714:	3714      	adds	r7, #20
 800f716:	46bd      	mov	sp, r7
 800f718:	bd90      	pop	{r4, r7, pc}
 800f71a:	bf00      	nop
 800f71c:	20008034 	.word	0x20008034
 800f720:	3a83126f 	.word	0x3a83126f
 800f724:	4479ffff 	.word	0x4479ffff

0800f728 <HAL_GPIO_EXTI_Callback>:

#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800f728:	b480      	push	{r7}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	4603      	mov	r3, r0
 800f730:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12)
 800f732:	88fb      	ldrh	r3, [r7, #6]
 800f734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f738:	d10b      	bne.n	800f752 <HAL_GPIO_EXTI_Callback+0x2a>
	{
	  gpio_callback_count++;
 800f73a:	4b09      	ldr	r3, [pc, #36]	; (800f760 <HAL_GPIO_EXTI_Callback+0x38>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3301      	adds	r3, #1
 800f740:	4a07      	ldr	r2, [pc, #28]	; (800f760 <HAL_GPIO_EXTI_Callback+0x38>)
 800f742:	6013      	str	r3, [r2, #0]
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800f744:	4b06      	ldr	r3, [pc, #24]	; (800f760 <HAL_GPIO_EXTI_Callback+0x38>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2b01      	cmp	r3, #1
 800f74a:	dd02      	ble.n	800f752 <HAL_GPIO_EXTI_Callback+0x2a>
 800f74c:	4b04      	ldr	r3, [pc, #16]	; (800f760 <HAL_GPIO_EXTI_Callback+0x38>)
 800f74e:	2200      	movs	r2, #0
 800f750:	601a      	str	r2, [r3, #0]
	}
}
 800f752:	bf00      	nop
 800f754:	370c      	adds	r7, #12
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop
 800f760:	20008218 	.word	0x20008218

0800f764 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	4603      	mov	r3, r0
 800f76c:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i < 5; i++)
 800f76e:	2300      	movs	r3, #0
 800f770:	60fb      	str	r3, [r7, #12]
 800f772:	e010      	b.n	800f796 <Signal+0x32>
	{
		ChangeLED(mode);
 800f774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f778:	4618      	mov	r0, r3
 800f77a:	f7ff f861 	bl	800e840 <ChangeLED>
		HAL_Delay(100);
 800f77e:	2064      	movs	r0, #100	; 0x64
 800f780:	f000 f99a 	bl	800fab8 <HAL_Delay>
		ChangeLED(0);
 800f784:	2000      	movs	r0, #0
 800f786:	f7ff f85b 	bl	800e840 <ChangeLED>
		HAL_Delay(100);
 800f78a:	2064      	movs	r0, #100	; 0x64
 800f78c:	f000 f994 	bl	800fab8 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	3301      	adds	r3, #1
 800f794:	60fb      	str	r3, [r7, #12]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2b04      	cmp	r3, #4
 800f79a:	ddeb      	ble.n	800f774 <Signal+0x10>
	}
}
 800f79c:	bf00      	nop
 800f79e:	3710      	adds	r7, #16
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800f7ac:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800f7fc <BatteryCheck+0x58>
 800f7b0:	eddf 0a13 	vldr	s1, [pc, #76]	; 800f800 <BatteryCheck+0x5c>
 800f7b4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7ff fa0f 	bl	800ebdc <ADCToBatteryVoltage>
 800f7be:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800f7c2:	2103      	movs	r1, #3
 800f7c4:	2002      	movs	r0, #2
 800f7c6:	f7ff fa33 	bl	800ec30 <IntegerPower>
 800f7ca:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800f7cc:	6938      	ldr	r0, [r7, #16]
 800f7ce:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 800f804 <BatteryCheck+0x60>
 800f7d2:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800f808 <BatteryCheck+0x64>
 800f7d6:	ed97 0a05 	vldr	s0, [r7, #20]
 800f7da:	f7ff fa46 	bl	800ec6a <GetBatteryLevel>
 800f7de:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 800f7e0:	68f9      	ldr	r1, [r7, #12]
 800f7e2:	480a      	ldr	r0, [pc, #40]	; (800f80c <BatteryCheck+0x68>)
 800f7e4:	f006 fe9a 	bl	801651c <iprintf>
	Signal( battery_level );
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	b25b      	sxtb	r3, r3
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7ff ffb9 	bl	800f764 <Signal>
}
 800f7f2:	bf00      	nop
 800f7f4:	3718      	adds	r7, #24
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	45800000 	.word	0x45800000
 800f800:	40533333 	.word	0x40533333
 800f804:	41066666 	.word	0x41066666
 800f808:	40e66666 	.word	0x40e66666
 800f80c:	0801a150 	.word	0x0801a150

0800f810 <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 800f810:	b580      	push	{r7, lr}
 800f812:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 800f814:	2202      	movs	r2, #2
 800f816:	490f      	ldr	r1, [pc, #60]	; (800f854 <PhotoSwitch+0x44>)
 800f818:	480f      	ldr	r0, [pc, #60]	; (800f858 <PhotoSwitch+0x48>)
 800f81a:	f000 f9b3 	bl	800fb84 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 800f81e:	2100      	movs	r1, #0
 800f820:	480e      	ldr	r0, [pc, #56]	; (800f85c <PhotoSwitch+0x4c>)
 800f822:	f004 f9cc 	bl	8013bbe <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 800f826:	e005      	b.n	800f834 <PhotoSwitch+0x24>
	{
		printf("adc2[1] : %lu\r\n", adc2[1]);
 800f828:	4b0a      	ldr	r3, [pc, #40]	; (800f854 <PhotoSwitch+0x44>)
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	4619      	mov	r1, r3
 800f82e:	480c      	ldr	r0, [pc, #48]	; (800f860 <PhotoSwitch+0x50>)
 800f830:	f006 fe74 	bl	801651c <iprintf>
	while(adc2[1] < 200)
 800f834:	4b07      	ldr	r3, [pc, #28]	; (800f854 <PhotoSwitch+0x44>)
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	2bc7      	cmp	r3, #199	; 0xc7
 800f83a:	d9f5      	bls.n	800f828 <PhotoSwitch+0x18>

	}
	HAL_ADC_Stop_DMA(&hadc2);
 800f83c:	4806      	ldr	r0, [pc, #24]	; (800f858 <PhotoSwitch+0x48>)
 800f83e:	f000 fa93 	bl	800fd68 <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 800f842:	2100      	movs	r1, #0
 800f844:	4805      	ldr	r0, [pc, #20]	; (800f85c <PhotoSwitch+0x4c>)
 800f846:	f004 fa0f 	bl	8013c68 <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 800f84a:	2007      	movs	r0, #7
 800f84c:	f7ff ff8a 	bl	800f764 <Signal>
}
 800f850:	bf00      	nop
 800f852:	bd80      	pop	{r7, pc}
 800f854:	20007fdc 	.word	0x20007fdc
 800f858:	20008cac 	.word	0x20008cac
 800f85c:	20008c2c 	.word	0x20008c2c
 800f860:	0801a158 	.word	0x0801a158

0800f864 <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	4603      	mov	r3, r0
 800f86c:	603a      	str	r2, [r7, #0]
 800f86e:	71fb      	strb	r3, [r7, #7]
 800f870:	460b      	mov	r3, r1
 800f872:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800f874:	2100      	movs	r1, #0
 800f876:	483d      	ldr	r0, [pc, #244]	; (800f96c <ModeSelect+0x108>)
 800f878:	f003 fb06 	bl	8012e88 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800f87c:	2104      	movs	r1, #4
 800f87e:	483b      	ldr	r0, [pc, #236]	; (800f96c <ModeSelect+0x108>)
 800f880:	f003 fb02 	bl	8012e88 <HAL_TIM_Encoder_Start>
	//while中で選択
	*pMode=min;
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	79fa      	ldrb	r2, [r7, #7]
 800f888:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
 800f88a:	4b39      	ldr	r3, [pc, #228]	; (800f970 <ModeSelect+0x10c>)
 800f88c:	f247 522f 	movw	r2, #29999	; 0x752f
 800f890:	625a      	str	r2, [r3, #36]	; 0x24
	gpio_callback_count = 0;
 800f892:	4b38      	ldr	r3, [pc, #224]	; (800f974 <ModeSelect+0x110>)
 800f894:	2200      	movs	r2, #0
 800f896:	601a      	str	r2, [r3, #0]
	int ENC3_LEFT;
	while(gpio_callback_count == 0/**/) //前向きの
 800f898:	e055      	b.n	800f946 <ModeSelect+0xe2>
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800f89a:	4b35      	ldr	r3, [pc, #212]	; (800f970 <ModeSelect+0x10c>)
 800f89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89e:	60fb      	str	r3, [r7, #12]

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	ee07 3a90 	vmov	s15, r3
 800f8a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8aa:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800f978 <ModeSelect+0x114>
 800f8ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8b6:	db1c      	blt.n	800f8f2 <ModeSelect+0x8e>
		  {
		  	  *pMode += 1;
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	f993 3000 	ldrsb.w	r3, [r3]
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	b25a      	sxtb	r2, r3
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	f993 3000 	ldrsb.w	r3, [r3]
 800f8d0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	da02      	bge.n	800f8de <ModeSelect+0x7a>
		  	  {
		  		  *pMode = min;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	79fa      	ldrb	r2, [r7, #7]
 800f8dc:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	f993 3000 	ldrsb.w	r3, [r3]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7fe ffab 	bl	800e840 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800f8ea:	4b21      	ldr	r3, [pc, #132]	; (800f970 <ModeSelect+0x10c>)
 800f8ec:	f247 522f 	movw	r2, #29999	; 0x752f
 800f8f0:	625a      	str	r2, [r3, #36]	; 0x24

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	ee07 3a90 	vmov	s15, r3
 800f8f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8fc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800f97c <ModeSelect+0x118>
 800f900:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f908:	d900      	bls.n	800f90c <ModeSelect+0xa8>
 800f90a:	e01c      	b.n	800f946 <ModeSelect+0xe2>
		  {
		  	  *pMode -= 1;
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	f993 3000 	ldrsb.w	r3, [r3]
 800f912:	b2db      	uxtb	r3, r3
 800f914:	3b01      	subs	r3, #1
 800f916:	b2db      	uxtb	r3, r3
 800f918:	b25a      	sxtb	r2, r3
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	f993 3000 	ldrsb.w	r3, [r3]
 800f924:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800f928:	429a      	cmp	r2, r3
 800f92a:	dd02      	ble.n	800f932 <ModeSelect+0xce>
		  	  {
		  	  		  *pMode = max;
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	79ba      	ldrb	r2, [r7, #6]
 800f930:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	f993 3000 	ldrsb.w	r3, [r3]
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fe ff81 	bl	800e840 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800f93e:	4b0c      	ldr	r3, [pc, #48]	; (800f970 <ModeSelect+0x10c>)
 800f940:	f247 522f 	movw	r2, #29999	; 0x752f
 800f944:	625a      	str	r2, [r3, #36]	; 0x24
	while(gpio_callback_count == 0/**/) //前向きの
 800f946:	4b0b      	ldr	r3, [pc, #44]	; (800f974 <ModeSelect+0x110>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d0a5      	beq.n	800f89a <ModeSelect+0x36>
		  }
	}
	gpio_callback_count = 0;
 800f94e:	4b09      	ldr	r3, [pc, #36]	; (800f974 <ModeSelect+0x110>)
 800f950:	2200      	movs	r2, #0
 800f952:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800f954:	2100      	movs	r1, #0
 800f956:	4805      	ldr	r0, [pc, #20]	; (800f96c <ModeSelect+0x108>)
 800f958:	f003 facd 	bl	8012ef6 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800f95c:	2104      	movs	r1, #4
 800f95e:	4803      	ldr	r0, [pc, #12]	; (800f96c <ModeSelect+0x108>)
 800f960:	f003 fac9 	bl	8012ef6 <HAL_TIM_Encoder_Stop>
}
 800f964:	bf00      	nop
 800f966:	3710      	adds	r7, #16
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	20008cf4 	.word	0x20008cf4
 800f970:	40000400 	.word	0x40000400
 800f974:	20008218 	.word	0x20008218
 800f978:	47352f00 	.word	0x47352f00
 800f97c:	4654bc00 	.word	0x4654bc00

0800f980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f980:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f9b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f984:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f986:	e003      	b.n	800f990 <LoopCopyDataInit>

0800f988 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f988:	4b0c      	ldr	r3, [pc, #48]	; (800f9bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f98a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f98c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f98e:	3104      	adds	r1, #4

0800f990 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f990:	480b      	ldr	r0, [pc, #44]	; (800f9c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f992:	4b0c      	ldr	r3, [pc, #48]	; (800f9c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f994:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f996:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f998:	d3f6      	bcc.n	800f988 <CopyDataInit>
  ldr  r2, =_sbss
 800f99a:	4a0b      	ldr	r2, [pc, #44]	; (800f9c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f99c:	e002      	b.n	800f9a4 <LoopFillZerobss>

0800f99e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f99e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f9a0:	f842 3b04 	str.w	r3, [r2], #4

0800f9a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f9a4:	4b09      	ldr	r3, [pc, #36]	; (800f9cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f9a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f9a8:	d3f9      	bcc.n	800f99e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f9aa:	f7fe f89b 	bl	800dae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f9ae:	f005 fa23 	bl	8014df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f9b2:	f7fc ff73 	bl	800c89c <main>
  bx  lr    
 800f9b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f9b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800f9bc:	0801a608 	.word	0x0801a608
  ldr  r0, =_sdata
 800f9c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f9c4:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 800f9c8:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 800f9cc:	20008f50 	.word	0x20008f50

0800f9d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f9d0:	e7fe      	b.n	800f9d0 <ADC_IRQHandler>
	...

0800f9d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f9d8:	4b0e      	ldr	r3, [pc, #56]	; (800fa14 <HAL_Init+0x40>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	4a0d      	ldr	r2, [pc, #52]	; (800fa14 <HAL_Init+0x40>)
 800f9de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f9e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f9e4:	4b0b      	ldr	r3, [pc, #44]	; (800fa14 <HAL_Init+0x40>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a0a      	ldr	r2, [pc, #40]	; (800fa14 <HAL_Init+0x40>)
 800f9ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f9ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f9f0:	4b08      	ldr	r3, [pc, #32]	; (800fa14 <HAL_Init+0x40>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a07      	ldr	r2, [pc, #28]	; (800fa14 <HAL_Init+0x40>)
 800f9f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f9fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f9fc:	2003      	movs	r0, #3
 800f9fe:	f000 fd8b 	bl	8010518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800fa02:	2000      	movs	r0, #0
 800fa04:	f000 f808 	bl	800fa18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800fa08:	f7fd fcd0 	bl	800d3ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	40023c00 	.word	0x40023c00

0800fa18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800fa20:	4b12      	ldr	r3, [pc, #72]	; (800fa6c <HAL_InitTick+0x54>)
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	4b12      	ldr	r3, [pc, #72]	; (800fa70 <HAL_InitTick+0x58>)
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	4619      	mov	r1, r3
 800fa2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa32:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa36:	4618      	mov	r0, r3
 800fa38:	f000 fda3 	bl	8010582 <HAL_SYSTICK_Config>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d001      	beq.n	800fa46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800fa42:	2301      	movs	r3, #1
 800fa44:	e00e      	b.n	800fa64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2b0f      	cmp	r3, #15
 800fa4a:	d80a      	bhi.n	800fa62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	6879      	ldr	r1, [r7, #4]
 800fa50:	f04f 30ff 	mov.w	r0, #4294967295
 800fa54:	f000 fd6b 	bl	801052e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800fa58:	4a06      	ldr	r2, [pc, #24]	; (800fa74 <HAL_InitTick+0x5c>)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	e000      	b.n	800fa64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800fa62:	2301      	movs	r3, #1
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	20000028 	.word	0x20000028
 800fa70:	20000038 	.word	0x20000038
 800fa74:	20000034 	.word	0x20000034

0800fa78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800fa7c:	4b06      	ldr	r3, [pc, #24]	; (800fa98 <HAL_IncTick+0x20>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	461a      	mov	r2, r3
 800fa82:	4b06      	ldr	r3, [pc, #24]	; (800fa9c <HAL_IncTick+0x24>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	4413      	add	r3, r2
 800fa88:	4a04      	ldr	r2, [pc, #16]	; (800fa9c <HAL_IncTick+0x24>)
 800fa8a:	6013      	str	r3, [r2, #0]
}
 800fa8c:	bf00      	nop
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop
 800fa98:	20000038 	.word	0x20000038
 800fa9c:	20008f28 	.word	0x20008f28

0800faa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800faa0:	b480      	push	{r7}
 800faa2:	af00      	add	r7, sp, #0
  return uwTick;
 800faa4:	4b03      	ldr	r3, [pc, #12]	; (800fab4 <HAL_GetTick+0x14>)
 800faa6:	681b      	ldr	r3, [r3, #0]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	20008f28 	.word	0x20008f28

0800fab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800fac0:	f7ff ffee 	bl	800faa0 <HAL_GetTick>
 800fac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad0:	d005      	beq.n	800fade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800fad2:	4b09      	ldr	r3, [pc, #36]	; (800faf8 <HAL_Delay+0x40>)
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	461a      	mov	r2, r3
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	4413      	add	r3, r2
 800fadc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800fade:	bf00      	nop
 800fae0:	f7ff ffde 	bl	800faa0 <HAL_GetTick>
 800fae4:	4602      	mov	r2, r0
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	1ad3      	subs	r3, r2, r3
 800faea:	68fa      	ldr	r2, [r7, #12]
 800faec:	429a      	cmp	r2, r3
 800faee:	d8f7      	bhi.n	800fae0 <HAL_Delay+0x28>
  {
  }
}
 800faf0:	bf00      	nop
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	20000038 	.word	0x20000038

0800fafc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb04:	2300      	movs	r3, #0
 800fb06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d101      	bne.n	800fb12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e033      	b.n	800fb7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d109      	bne.n	800fb2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7fd fc6e 	bl	800d3fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2200      	movs	r2, #0
 800fb24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb32:	f003 0310 	and.w	r3, r3, #16
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d118      	bne.n	800fb6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800fb42:	f023 0302 	bic.w	r3, r3, #2
 800fb46:	f043 0202 	orr.w	r2, r3, #2
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 fa94 	bl	801007c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2200      	movs	r2, #0
 800fb58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb5e:	f023 0303 	bic.w	r3, r3, #3
 800fb62:	f043 0201 	orr.w	r2, r3, #1
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	641a      	str	r2, [r3, #64]	; 0x40
 800fb6a:	e001      	b.n	800fb70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800fb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b086      	sub	sp, #24
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800fb90:	2300      	movs	r3, #0
 800fb92:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d101      	bne.n	800fba2 <HAL_ADC_Start_DMA+0x1e>
 800fb9e:	2302      	movs	r3, #2
 800fba0:	e0cc      	b.n	800fd3c <HAL_ADC_Start_DMA+0x1b8>
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2201      	movs	r2, #1
 800fba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	689b      	ldr	r3, [r3, #8]
 800fbb0:	f003 0301 	and.w	r3, r3, #1
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d018      	beq.n	800fbea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	689a      	ldr	r2, [r3, #8]
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f042 0201 	orr.w	r2, r2, #1
 800fbc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800fbc8:	4b5e      	ldr	r3, [pc, #376]	; (800fd44 <HAL_ADC_Start_DMA+0x1c0>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4a5e      	ldr	r2, [pc, #376]	; (800fd48 <HAL_ADC_Start_DMA+0x1c4>)
 800fbce:	fba2 2303 	umull	r2, r3, r2, r3
 800fbd2:	0c9a      	lsrs	r2, r3, #18
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	005b      	lsls	r3, r3, #1
 800fbd8:	4413      	add	r3, r2
 800fbda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800fbdc:	e002      	b.n	800fbe4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	3b01      	subs	r3, #1
 800fbe2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1f9      	bne.n	800fbde <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	689b      	ldr	r3, [r3, #8]
 800fbf0:	f003 0301 	and.w	r3, r3, #1
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	f040 80a0 	bne.w	800fd3a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbfe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800fc02:	f023 0301 	bic.w	r3, r3, #1
 800fc06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d007      	beq.n	800fc2c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800fc24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fc34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc38:	d106      	bne.n	800fc48 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc3e:	f023 0206 	bic.w	r2, r3, #6
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	645a      	str	r2, [r3, #68]	; 0x44
 800fc46:	e002      	b.n	800fc4e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	2200      	movs	r2, #0
 800fc52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fc56:	4b3d      	ldr	r3, [pc, #244]	; (800fd4c <HAL_ADC_Start_DMA+0x1c8>)
 800fc58:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc5e:	4a3c      	ldr	r2, [pc, #240]	; (800fd50 <HAL_ADC_Start_DMA+0x1cc>)
 800fc60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc66:	4a3b      	ldr	r2, [pc, #236]	; (800fd54 <HAL_ADC_Start_DMA+0x1d0>)
 800fc68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc6e:	4a3a      	ldr	r2, [pc, #232]	; (800fd58 <HAL_ADC_Start_DMA+0x1d4>)
 800fc70:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800fc7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	685a      	ldr	r2, [r3, #4]
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800fc8a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	689a      	ldr	r2, [r3, #8]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fc9a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	334c      	adds	r3, #76	; 0x4c
 800fca6:	4619      	mov	r1, r3
 800fca8:	68ba      	ldr	r2, [r7, #8]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f000 fd24 	bl	80106f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	f003 031f 	and.w	r3, r3, #31
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d12a      	bne.n	800fd12 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a26      	ldr	r2, [pc, #152]	; (800fd5c <HAL_ADC_Start_DMA+0x1d8>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d015      	beq.n	800fcf2 <HAL_ADC_Start_DMA+0x16e>
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4a25      	ldr	r2, [pc, #148]	; (800fd60 <HAL_ADC_Start_DMA+0x1dc>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d105      	bne.n	800fcdc <HAL_ADC_Start_DMA+0x158>
 800fcd0:	4b1e      	ldr	r3, [pc, #120]	; (800fd4c <HAL_ADC_Start_DMA+0x1c8>)
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	f003 031f 	and.w	r3, r3, #31
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d00a      	beq.n	800fcf2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4a20      	ldr	r2, [pc, #128]	; (800fd64 <HAL_ADC_Start_DMA+0x1e0>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d129      	bne.n	800fd3a <HAL_ADC_Start_DMA+0x1b6>
 800fce6:	4b19      	ldr	r3, [pc, #100]	; (800fd4c <HAL_ADC_Start_DMA+0x1c8>)
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	f003 031f 	and.w	r3, r3, #31
 800fcee:	2b0f      	cmp	r3, #15
 800fcf0:	d823      	bhi.n	800fd3a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	689b      	ldr	r3, [r3, #8]
 800fcf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d11c      	bne.n	800fd3a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	689a      	ldr	r2, [r3, #8]
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800fd0e:	609a      	str	r2, [r3, #8]
 800fd10:	e013      	b.n	800fd3a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4a11      	ldr	r2, [pc, #68]	; (800fd5c <HAL_ADC_Start_DMA+0x1d8>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d10e      	bne.n	800fd3a <HAL_ADC_Start_DMA+0x1b6>
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d107      	bne.n	800fd3a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	689a      	ldr	r2, [r3, #8]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800fd38:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3718      	adds	r7, #24
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	20000028 	.word	0x20000028
 800fd48:	431bde83 	.word	0x431bde83
 800fd4c:	40012300 	.word	0x40012300
 800fd50:	08010275 	.word	0x08010275
 800fd54:	0801032f 	.word	0x0801032f
 800fd58:	0801034b 	.word	0x0801034b
 800fd5c:	40012000 	.word	0x40012000
 800fd60:	40012100 	.word	0x40012100
 800fd64:	40012200 	.word	0x40012200

0800fd68 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd70:	2300      	movs	r3, #0
 800fd72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd7a:	2b01      	cmp	r3, #1
 800fd7c:	d101      	bne.n	800fd82 <HAL_ADC_Stop_DMA+0x1a>
 800fd7e:	2302      	movs	r3, #2
 800fd80:	e038      	b.n	800fdf4 <HAL_ADC_Stop_DMA+0x8c>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2201      	movs	r2, #1
 800fd86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	689a      	ldr	r2, [r3, #8]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f022 0201 	bic.w	r2, r2, #1
 800fd98:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	f003 0301 	and.w	r3, r3, #1
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d120      	bne.n	800fdea <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	689a      	ldr	r2, [r3, #8]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fdb6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f000 fcf3 	bl	80107a8 <HAL_DMA_Abort>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	685a      	ldr	r2, [r3, #4]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800fdd4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800fdde:	f023 0301 	bic.w	r3, r3, #1
 800fde2:	f043 0201 	orr.w	r2, r3, #1
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2200      	movs	r2, #0
 800fdee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800fdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3710      	adds	r7, #16
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800fe04:	bf00      	nop
 800fe06:	370c      	adds	r7, #12
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr

0800fe10 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800fe18:	bf00      	nop
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800fe2c:	bf00      	nop
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800fe42:	2300      	movs	r3, #0
 800fe44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe4c:	2b01      	cmp	r3, #1
 800fe4e:	d101      	bne.n	800fe54 <HAL_ADC_ConfigChannel+0x1c>
 800fe50:	2302      	movs	r3, #2
 800fe52:	e105      	b.n	8010060 <HAL_ADC_ConfigChannel+0x228>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2201      	movs	r2, #1
 800fe58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	2b09      	cmp	r3, #9
 800fe62:	d925      	bls.n	800feb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	68d9      	ldr	r1, [r3, #12]
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	461a      	mov	r2, r3
 800fe72:	4613      	mov	r3, r2
 800fe74:	005b      	lsls	r3, r3, #1
 800fe76:	4413      	add	r3, r2
 800fe78:	3b1e      	subs	r3, #30
 800fe7a:	2207      	movs	r2, #7
 800fe7c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe80:	43da      	mvns	r2, r3
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	400a      	ands	r2, r1
 800fe88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	68d9      	ldr	r1, [r3, #12]
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	689a      	ldr	r2, [r3, #8]
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	005b      	lsls	r3, r3, #1
 800fea0:	4403      	add	r3, r0
 800fea2:	3b1e      	subs	r3, #30
 800fea4:	409a      	lsls	r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	430a      	orrs	r2, r1
 800feac:	60da      	str	r2, [r3, #12]
 800feae:	e022      	b.n	800fef6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	6919      	ldr	r1, [r3, #16]
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	b29b      	uxth	r3, r3
 800febc:	461a      	mov	r2, r3
 800febe:	4613      	mov	r3, r2
 800fec0:	005b      	lsls	r3, r3, #1
 800fec2:	4413      	add	r3, r2
 800fec4:	2207      	movs	r2, #7
 800fec6:	fa02 f303 	lsl.w	r3, r2, r3
 800feca:	43da      	mvns	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	400a      	ands	r2, r1
 800fed2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	6919      	ldr	r1, [r3, #16]
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	689a      	ldr	r2, [r3, #8]
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	4618      	mov	r0, r3
 800fee6:	4603      	mov	r3, r0
 800fee8:	005b      	lsls	r3, r3, #1
 800feea:	4403      	add	r3, r0
 800feec:	409a      	lsls	r2, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	430a      	orrs	r2, r1
 800fef4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	2b06      	cmp	r3, #6
 800fefc:	d824      	bhi.n	800ff48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	685a      	ldr	r2, [r3, #4]
 800ff08:	4613      	mov	r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	4413      	add	r3, r2
 800ff0e:	3b05      	subs	r3, #5
 800ff10:	221f      	movs	r2, #31
 800ff12:	fa02 f303 	lsl.w	r3, r2, r3
 800ff16:	43da      	mvns	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	400a      	ands	r2, r1
 800ff1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	685a      	ldr	r2, [r3, #4]
 800ff32:	4613      	mov	r3, r2
 800ff34:	009b      	lsls	r3, r3, #2
 800ff36:	4413      	add	r3, r2
 800ff38:	3b05      	subs	r3, #5
 800ff3a:	fa00 f203 	lsl.w	r2, r0, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	430a      	orrs	r2, r1
 800ff44:	635a      	str	r2, [r3, #52]	; 0x34
 800ff46:	e04c      	b.n	800ffe2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	2b0c      	cmp	r3, #12
 800ff4e:	d824      	bhi.n	800ff9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	685a      	ldr	r2, [r3, #4]
 800ff5a:	4613      	mov	r3, r2
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	4413      	add	r3, r2
 800ff60:	3b23      	subs	r3, #35	; 0x23
 800ff62:	221f      	movs	r2, #31
 800ff64:	fa02 f303 	lsl.w	r3, r2, r3
 800ff68:	43da      	mvns	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	400a      	ands	r2, r1
 800ff70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	b29b      	uxth	r3, r3
 800ff7e:	4618      	mov	r0, r3
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	685a      	ldr	r2, [r3, #4]
 800ff84:	4613      	mov	r3, r2
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	4413      	add	r3, r2
 800ff8a:	3b23      	subs	r3, #35	; 0x23
 800ff8c:	fa00 f203 	lsl.w	r2, r0, r3
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	430a      	orrs	r2, r1
 800ff96:	631a      	str	r2, [r3, #48]	; 0x30
 800ff98:	e023      	b.n	800ffe2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	685a      	ldr	r2, [r3, #4]
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	009b      	lsls	r3, r3, #2
 800ffa8:	4413      	add	r3, r2
 800ffaa:	3b41      	subs	r3, #65	; 0x41
 800ffac:	221f      	movs	r2, #31
 800ffae:	fa02 f303 	lsl.w	r3, r2, r3
 800ffb2:	43da      	mvns	r2, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	400a      	ands	r2, r1
 800ffba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	4618      	mov	r0, r3
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	685a      	ldr	r2, [r3, #4]
 800ffce:	4613      	mov	r3, r2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	4413      	add	r3, r2
 800ffd4:	3b41      	subs	r3, #65	; 0x41
 800ffd6:	fa00 f203 	lsl.w	r2, r0, r3
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	430a      	orrs	r2, r1
 800ffe0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ffe2:	4b22      	ldr	r3, [pc, #136]	; (801006c <HAL_ADC_ConfigChannel+0x234>)
 800ffe4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4a21      	ldr	r2, [pc, #132]	; (8010070 <HAL_ADC_ConfigChannel+0x238>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d109      	bne.n	8010004 <HAL_ADC_ConfigChannel+0x1cc>
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b12      	cmp	r3, #18
 800fff6:	d105      	bne.n	8010004 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4a19      	ldr	r2, [pc, #100]	; (8010070 <HAL_ADC_ConfigChannel+0x238>)
 801000a:	4293      	cmp	r3, r2
 801000c:	d123      	bne.n	8010056 <HAL_ADC_ConfigChannel+0x21e>
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b10      	cmp	r3, #16
 8010014:	d003      	beq.n	801001e <HAL_ADC_ConfigChannel+0x1e6>
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2b11      	cmp	r3, #17
 801001c:	d11b      	bne.n	8010056 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	2b10      	cmp	r3, #16
 8010030:	d111      	bne.n	8010056 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8010032:	4b10      	ldr	r3, [pc, #64]	; (8010074 <HAL_ADC_ConfigChannel+0x23c>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4a10      	ldr	r2, [pc, #64]	; (8010078 <HAL_ADC_ConfigChannel+0x240>)
 8010038:	fba2 2303 	umull	r2, r3, r2, r3
 801003c:	0c9a      	lsrs	r2, r3, #18
 801003e:	4613      	mov	r3, r2
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	4413      	add	r3, r2
 8010044:	005b      	lsls	r3, r3, #1
 8010046:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010048:	e002      	b.n	8010050 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	3b01      	subs	r3, #1
 801004e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d1f9      	bne.n	801004a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2200      	movs	r2, #0
 801005a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801005e:	2300      	movs	r3, #0
}
 8010060:	4618      	mov	r0, r3
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr
 801006c:	40012300 	.word	0x40012300
 8010070:	40012000 	.word	0x40012000
 8010074:	20000028 	.word	0x20000028
 8010078:	431bde83 	.word	0x431bde83

0801007c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801007c:	b480      	push	{r7}
 801007e:	b085      	sub	sp, #20
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010084:	4b79      	ldr	r3, [pc, #484]	; (801026c <ADC_Init+0x1f0>)
 8010086:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	685a      	ldr	r2, [r3, #4]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	431a      	orrs	r2, r3
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	685a      	ldr	r2, [r3, #4]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80100b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	6859      	ldr	r1, [r3, #4]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	691b      	ldr	r3, [r3, #16]
 80100bc:	021a      	lsls	r2, r3, #8
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	430a      	orrs	r2, r1
 80100c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	685a      	ldr	r2, [r3, #4]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80100d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	6859      	ldr	r1, [r3, #4]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	689a      	ldr	r2, [r3, #8]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	430a      	orrs	r2, r1
 80100e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	689a      	ldr	r2, [r3, #8]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80100f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	6899      	ldr	r1, [r3, #8]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	68da      	ldr	r2, [r3, #12]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	430a      	orrs	r2, r1
 8010108:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801010e:	4a58      	ldr	r2, [pc, #352]	; (8010270 <ADC_Init+0x1f4>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d022      	beq.n	801015a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	689a      	ldr	r2, [r3, #8]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010122:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	6899      	ldr	r1, [r3, #8]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	430a      	orrs	r2, r1
 8010134:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	689a      	ldr	r2, [r3, #8]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010144:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	6899      	ldr	r1, [r3, #8]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	430a      	orrs	r2, r1
 8010156:	609a      	str	r2, [r3, #8]
 8010158:	e00f      	b.n	801017a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	689a      	ldr	r2, [r3, #8]
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	689a      	ldr	r2, [r3, #8]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010178:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	689a      	ldr	r2, [r3, #8]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f022 0202 	bic.w	r2, r2, #2
 8010188:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	6899      	ldr	r1, [r3, #8]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	7e1b      	ldrb	r3, [r3, #24]
 8010194:	005a      	lsls	r2, r3, #1
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	430a      	orrs	r2, r1
 801019c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d01b      	beq.n	80101e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	685a      	ldr	r2, [r3, #4]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80101b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	685a      	ldr	r2, [r3, #4]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80101c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	6859      	ldr	r1, [r3, #4]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d2:	3b01      	subs	r3, #1
 80101d4:	035a      	lsls	r2, r3, #13
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	430a      	orrs	r2, r1
 80101dc:	605a      	str	r2, [r3, #4]
 80101de:	e007      	b.n	80101f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	685a      	ldr	r2, [r3, #4]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80101ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80101fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	69db      	ldr	r3, [r3, #28]
 801020a:	3b01      	subs	r3, #1
 801020c:	051a      	lsls	r2, r3, #20
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	430a      	orrs	r2, r1
 8010214:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	689a      	ldr	r2, [r3, #8]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	6899      	ldr	r1, [r3, #8]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010232:	025a      	lsls	r2, r3, #9
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	430a      	orrs	r2, r1
 801023a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	689a      	ldr	r2, [r3, #8]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801024a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	6899      	ldr	r1, [r3, #8]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	695b      	ldr	r3, [r3, #20]
 8010256:	029a      	lsls	r2, r3, #10
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	430a      	orrs	r2, r1
 801025e:	609a      	str	r2, [r3, #8]
}
 8010260:	bf00      	nop
 8010262:	3714      	adds	r7, #20
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr
 801026c:	40012300 	.word	0x40012300
 8010270:	0f000001 	.word	0x0f000001

08010274 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010280:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010286:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801028a:	2b00      	cmp	r3, #0
 801028c:	d13c      	bne.n	8010308 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010292:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d12b      	bne.n	8010300 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d127      	bne.n	8010300 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d006      	beq.n	80102cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	689b      	ldr	r3, [r3, #8]
 80102c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d119      	bne.n	8010300 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	685a      	ldr	r2, [r3, #4]
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	f022 0220 	bic.w	r2, r2, #32
 80102da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d105      	bne.n	8010300 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102f8:	f043 0201 	orr.w	r2, r3, #1
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f7ff fd7b 	bl	800fdfc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8010306:	e00e      	b.n	8010326 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801030c:	f003 0310 	and.w	r3, r3, #16
 8010310:	2b00      	cmp	r3, #0
 8010312:	d003      	beq.n	801031c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8010314:	68f8      	ldr	r0, [r7, #12]
 8010316:	f7ff fd85 	bl	800fe24 <HAL_ADC_ErrorCallback>
}
 801031a:	e004      	b.n	8010326 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	4798      	blx	r3
}
 8010326:	bf00      	nop
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b084      	sub	sp, #16
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801033a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801033c:	68f8      	ldr	r0, [r7, #12]
 801033e:	f7ff fd67 	bl	800fe10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010342:	bf00      	nop
 8010344:	3710      	adds	r7, #16
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b084      	sub	sp, #16
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010356:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2240      	movs	r2, #64	; 0x40
 801035c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010362:	f043 0204 	orr.w	r2, r3, #4
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f7ff fd5a 	bl	800fe24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010370:	bf00      	nop
 8010372:	3710      	adds	r7, #16
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010378:	b480      	push	{r7}
 801037a:	b085      	sub	sp, #20
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f003 0307 	and.w	r3, r3, #7
 8010386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010388:	4b0c      	ldr	r3, [pc, #48]	; (80103bc <__NVIC_SetPriorityGrouping+0x44>)
 801038a:	68db      	ldr	r3, [r3, #12]
 801038c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801038e:	68ba      	ldr	r2, [r7, #8]
 8010390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010394:	4013      	ands	r3, r2
 8010396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80103a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80103a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80103a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80103aa:	4a04      	ldr	r2, [pc, #16]	; (80103bc <__NVIC_SetPriorityGrouping+0x44>)
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	60d3      	str	r3, [r2, #12]
}
 80103b0:	bf00      	nop
 80103b2:	3714      	adds	r7, #20
 80103b4:	46bd      	mov	sp, r7
 80103b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ba:	4770      	bx	lr
 80103bc:	e000ed00 	.word	0xe000ed00

080103c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80103c0:	b480      	push	{r7}
 80103c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80103c4:	4b04      	ldr	r3, [pc, #16]	; (80103d8 <__NVIC_GetPriorityGrouping+0x18>)
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	0a1b      	lsrs	r3, r3, #8
 80103ca:	f003 0307 	and.w	r3, r3, #7
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr
 80103d8:	e000ed00 	.word	0xe000ed00

080103dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	4603      	mov	r3, r0
 80103e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80103e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	db0b      	blt.n	8010406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80103ee:	79fb      	ldrb	r3, [r7, #7]
 80103f0:	f003 021f 	and.w	r2, r3, #31
 80103f4:	4907      	ldr	r1, [pc, #28]	; (8010414 <__NVIC_EnableIRQ+0x38>)
 80103f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103fa:	095b      	lsrs	r3, r3, #5
 80103fc:	2001      	movs	r0, #1
 80103fe:	fa00 f202 	lsl.w	r2, r0, r2
 8010402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010406:	bf00      	nop
 8010408:	370c      	adds	r7, #12
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop
 8010414:	e000e100 	.word	0xe000e100

08010418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010418:	b480      	push	{r7}
 801041a:	b083      	sub	sp, #12
 801041c:	af00      	add	r7, sp, #0
 801041e:	4603      	mov	r3, r0
 8010420:	6039      	str	r1, [r7, #0]
 8010422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010428:	2b00      	cmp	r3, #0
 801042a:	db0a      	blt.n	8010442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	b2da      	uxtb	r2, r3
 8010430:	490c      	ldr	r1, [pc, #48]	; (8010464 <__NVIC_SetPriority+0x4c>)
 8010432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010436:	0112      	lsls	r2, r2, #4
 8010438:	b2d2      	uxtb	r2, r2
 801043a:	440b      	add	r3, r1
 801043c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010440:	e00a      	b.n	8010458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	b2da      	uxtb	r2, r3
 8010446:	4908      	ldr	r1, [pc, #32]	; (8010468 <__NVIC_SetPriority+0x50>)
 8010448:	79fb      	ldrb	r3, [r7, #7]
 801044a:	f003 030f 	and.w	r3, r3, #15
 801044e:	3b04      	subs	r3, #4
 8010450:	0112      	lsls	r2, r2, #4
 8010452:	b2d2      	uxtb	r2, r2
 8010454:	440b      	add	r3, r1
 8010456:	761a      	strb	r2, [r3, #24]
}
 8010458:	bf00      	nop
 801045a:	370c      	adds	r7, #12
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr
 8010464:	e000e100 	.word	0xe000e100
 8010468:	e000ed00 	.word	0xe000ed00

0801046c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801046c:	b480      	push	{r7}
 801046e:	b089      	sub	sp, #36	; 0x24
 8010470:	af00      	add	r7, sp, #0
 8010472:	60f8      	str	r0, [r7, #12]
 8010474:	60b9      	str	r1, [r7, #8]
 8010476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f003 0307 	and.w	r3, r3, #7
 801047e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010480:	69fb      	ldr	r3, [r7, #28]
 8010482:	f1c3 0307 	rsb	r3, r3, #7
 8010486:	2b04      	cmp	r3, #4
 8010488:	bf28      	it	cs
 801048a:	2304      	movcs	r3, #4
 801048c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801048e:	69fb      	ldr	r3, [r7, #28]
 8010490:	3304      	adds	r3, #4
 8010492:	2b06      	cmp	r3, #6
 8010494:	d902      	bls.n	801049c <NVIC_EncodePriority+0x30>
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	3b03      	subs	r3, #3
 801049a:	e000      	b.n	801049e <NVIC_EncodePriority+0x32>
 801049c:	2300      	movs	r3, #0
 801049e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80104a0:	f04f 32ff 	mov.w	r2, #4294967295
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	fa02 f303 	lsl.w	r3, r2, r3
 80104aa:	43da      	mvns	r2, r3
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	401a      	ands	r2, r3
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80104b4:	f04f 31ff 	mov.w	r1, #4294967295
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	fa01 f303 	lsl.w	r3, r1, r3
 80104be:	43d9      	mvns	r1, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80104c4:	4313      	orrs	r3, r2
         );
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3724      	adds	r7, #36	; 0x24
 80104ca:	46bd      	mov	sp, r7
 80104cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d0:	4770      	bx	lr
	...

080104d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	3b01      	subs	r3, #1
 80104e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80104e4:	d301      	bcc.n	80104ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80104e6:	2301      	movs	r3, #1
 80104e8:	e00f      	b.n	801050a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80104ea:	4a0a      	ldr	r2, [pc, #40]	; (8010514 <SysTick_Config+0x40>)
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	3b01      	subs	r3, #1
 80104f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80104f2:	210f      	movs	r1, #15
 80104f4:	f04f 30ff 	mov.w	r0, #4294967295
 80104f8:	f7ff ff8e 	bl	8010418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80104fc:	4b05      	ldr	r3, [pc, #20]	; (8010514 <SysTick_Config+0x40>)
 80104fe:	2200      	movs	r2, #0
 8010500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010502:	4b04      	ldr	r3, [pc, #16]	; (8010514 <SysTick_Config+0x40>)
 8010504:	2207      	movs	r2, #7
 8010506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3708      	adds	r7, #8
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	e000e010 	.word	0xe000e010

08010518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f7ff ff29 	bl	8010378 <__NVIC_SetPriorityGrouping>
}
 8010526:	bf00      	nop
 8010528:	3708      	adds	r7, #8
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801052e:	b580      	push	{r7, lr}
 8010530:	b086      	sub	sp, #24
 8010532:	af00      	add	r7, sp, #0
 8010534:	4603      	mov	r3, r0
 8010536:	60b9      	str	r1, [r7, #8]
 8010538:	607a      	str	r2, [r7, #4]
 801053a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801053c:	2300      	movs	r3, #0
 801053e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010540:	f7ff ff3e 	bl	80103c0 <__NVIC_GetPriorityGrouping>
 8010544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	68b9      	ldr	r1, [r7, #8]
 801054a:	6978      	ldr	r0, [r7, #20]
 801054c:	f7ff ff8e 	bl	801046c <NVIC_EncodePriority>
 8010550:	4602      	mov	r2, r0
 8010552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010556:	4611      	mov	r1, r2
 8010558:	4618      	mov	r0, r3
 801055a:	f7ff ff5d 	bl	8010418 <__NVIC_SetPriority>
}
 801055e:	bf00      	nop
 8010560:	3718      	adds	r7, #24
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010566:	b580      	push	{r7, lr}
 8010568:	b082      	sub	sp, #8
 801056a:	af00      	add	r7, sp, #0
 801056c:	4603      	mov	r3, r0
 801056e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010574:	4618      	mov	r0, r3
 8010576:	f7ff ff31 	bl	80103dc <__NVIC_EnableIRQ>
}
 801057a:	bf00      	nop
 801057c:	3708      	adds	r7, #8
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010582:	b580      	push	{r7, lr}
 8010584:	b082      	sub	sp, #8
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff ffa2 	bl	80104d4 <SysTick_Config>
 8010590:	4603      	mov	r3, r0
}
 8010592:	4618      	mov	r0, r3
 8010594:	3708      	adds	r7, #8
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
	...

0801059c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b086      	sub	sp, #24
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80105a4:	2300      	movs	r3, #0
 80105a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80105a8:	f7ff fa7a 	bl	800faa0 <HAL_GetTick>
 80105ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d101      	bne.n	80105b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80105b4:	2301      	movs	r3, #1
 80105b6:	e099      	b.n	80106ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2202      	movs	r2, #2
 80105c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f022 0201 	bic.w	r2, r2, #1
 80105d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80105d8:	e00f      	b.n	80105fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80105da:	f7ff fa61 	bl	800faa0 <HAL_GetTick>
 80105de:	4602      	mov	r2, r0
 80105e0:	693b      	ldr	r3, [r7, #16]
 80105e2:	1ad3      	subs	r3, r2, r3
 80105e4:	2b05      	cmp	r3, #5
 80105e6:	d908      	bls.n	80105fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2220      	movs	r2, #32
 80105ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2203      	movs	r2, #3
 80105f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80105f6:	2303      	movs	r3, #3
 80105f8:	e078      	b.n	80106ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	f003 0301 	and.w	r3, r3, #1
 8010604:	2b00      	cmp	r3, #0
 8010606:	d1e8      	bne.n	80105da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8010610:	697a      	ldr	r2, [r7, #20]
 8010612:	4b38      	ldr	r3, [pc, #224]	; (80106f4 <HAL_DMA_Init+0x158>)
 8010614:	4013      	ands	r3, r2
 8010616:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	685a      	ldr	r2, [r3, #4]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	689b      	ldr	r3, [r3, #8]
 8010620:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010626:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	691b      	ldr	r3, [r3, #16]
 801062c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010632:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	699b      	ldr	r3, [r3, #24]
 8010638:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801063e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6a1b      	ldr	r3, [r3, #32]
 8010644:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010646:	697a      	ldr	r2, [r7, #20]
 8010648:	4313      	orrs	r3, r2
 801064a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010650:	2b04      	cmp	r3, #4
 8010652:	d107      	bne.n	8010664 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801065c:	4313      	orrs	r3, r2
 801065e:	697a      	ldr	r2, [r7, #20]
 8010660:	4313      	orrs	r3, r2
 8010662:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	697a      	ldr	r2, [r7, #20]
 801066a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	695b      	ldr	r3, [r3, #20]
 8010672:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	f023 0307 	bic.w	r3, r3, #7
 801067a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010680:	697a      	ldr	r2, [r7, #20]
 8010682:	4313      	orrs	r3, r2
 8010684:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801068a:	2b04      	cmp	r3, #4
 801068c:	d117      	bne.n	80106be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010692:	697a      	ldr	r2, [r7, #20]
 8010694:	4313      	orrs	r3, r2
 8010696:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801069c:	2b00      	cmp	r3, #0
 801069e:	d00e      	beq.n	80106be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f000 fadf 	bl	8010c64 <DMA_CheckFifoParam>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d008      	beq.n	80106be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2240      	movs	r2, #64	; 0x40
 80106b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2201      	movs	r2, #1
 80106b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80106ba:	2301      	movs	r3, #1
 80106bc:	e016      	b.n	80106ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	697a      	ldr	r2, [r7, #20]
 80106c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f000 fa96 	bl	8010bf8 <DMA_CalcBaseAndBitshift>
 80106cc:	4603      	mov	r3, r0
 80106ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106d4:	223f      	movs	r2, #63	; 0x3f
 80106d6:	409a      	lsls	r2, r3
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2201      	movs	r2, #1
 80106e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80106ea:	2300      	movs	r3, #0
}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3718      	adds	r7, #24
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}
 80106f4:	f010803f 	.word	0xf010803f

080106f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b086      	sub	sp, #24
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	60f8      	str	r0, [r7, #12]
 8010700:	60b9      	str	r1, [r7, #8]
 8010702:	607a      	str	r2, [r7, #4]
 8010704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010706:	2300      	movs	r3, #0
 8010708:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801070e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010716:	2b01      	cmp	r3, #1
 8010718:	d101      	bne.n	801071e <HAL_DMA_Start_IT+0x26>
 801071a:	2302      	movs	r3, #2
 801071c:	e040      	b.n	80107a0 <HAL_DMA_Start_IT+0xa8>
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2201      	movs	r2, #1
 8010722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801072c:	b2db      	uxtb	r3, r3
 801072e:	2b01      	cmp	r3, #1
 8010730:	d12f      	bne.n	8010792 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2202      	movs	r2, #2
 8010736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2200      	movs	r2, #0
 801073e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	68b9      	ldr	r1, [r7, #8]
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f000 fa28 	bl	8010b9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010750:	223f      	movs	r2, #63	; 0x3f
 8010752:	409a      	lsls	r2, r3
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	f042 0216 	orr.w	r2, r2, #22
 8010766:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801076c:	2b00      	cmp	r3, #0
 801076e:	d007      	beq.n	8010780 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f042 0208 	orr.w	r2, r2, #8
 801077e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f042 0201 	orr.w	r2, r2, #1
 801078e:	601a      	str	r2, [r3, #0]
 8010790:	e005      	b.n	801079e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	2200      	movs	r2, #0
 8010796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801079a:	2302      	movs	r3, #2
 801079c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801079e:	7dfb      	ldrb	r3, [r7, #23]
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3718      	adds	r7, #24
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80107b6:	f7ff f973 	bl	800faa0 <HAL_GetTick>
 80107ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	d008      	beq.n	80107da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2280      	movs	r2, #128	; 0x80
 80107cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2200      	movs	r2, #0
 80107d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80107d6:	2301      	movs	r3, #1
 80107d8:	e052      	b.n	8010880 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	681a      	ldr	r2, [r3, #0]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	f022 0216 	bic.w	r2, r2, #22
 80107e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	695a      	ldr	r2, [r3, #20]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d103      	bne.n	801080a <HAL_DMA_Abort+0x62>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010806:	2b00      	cmp	r3, #0
 8010808:	d007      	beq.n	801081a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	681a      	ldr	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f022 0208 	bic.w	r2, r2, #8
 8010818:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f022 0201 	bic.w	r2, r2, #1
 8010828:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801082a:	e013      	b.n	8010854 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801082c:	f7ff f938 	bl	800faa0 <HAL_GetTick>
 8010830:	4602      	mov	r2, r0
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	1ad3      	subs	r3, r2, r3
 8010836:	2b05      	cmp	r3, #5
 8010838:	d90c      	bls.n	8010854 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2220      	movs	r2, #32
 801083e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2200      	movs	r2, #0
 8010844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2203      	movs	r2, #3
 801084c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8010850:	2303      	movs	r3, #3
 8010852:	e015      	b.n	8010880 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	2b00      	cmp	r3, #0
 8010860:	d1e4      	bne.n	801082c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010866:	223f      	movs	r2, #63	; 0x3f
 8010868:	409a      	lsls	r2, r3
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2200      	movs	r2, #0
 8010872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2201      	movs	r2, #1
 801087a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 801087e:	2300      	movs	r3, #0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3710      	adds	r7, #16
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}

08010888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b086      	sub	sp, #24
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8010890:	2300      	movs	r3, #0
 8010892:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010894:	4b92      	ldr	r3, [pc, #584]	; (8010ae0 <HAL_DMA_IRQHandler+0x258>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4a92      	ldr	r2, [pc, #584]	; (8010ae4 <HAL_DMA_IRQHandler+0x25c>)
 801089a:	fba2 2303 	umull	r2, r3, r2, r3
 801089e:	0a9b      	lsrs	r3, r3, #10
 80108a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108b2:	2208      	movs	r2, #8
 80108b4:	409a      	lsls	r2, r3
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	4013      	ands	r3, r2
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d01a      	beq.n	80108f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f003 0304 	and.w	r3, r3, #4
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d013      	beq.n	80108f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f022 0204 	bic.w	r2, r2, #4
 80108da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108e0:	2208      	movs	r2, #8
 80108e2:	409a      	lsls	r2, r3
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108ec:	f043 0201 	orr.w	r2, r3, #1
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108f8:	2201      	movs	r2, #1
 80108fa:	409a      	lsls	r2, r3
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	4013      	ands	r3, r2
 8010900:	2b00      	cmp	r3, #0
 8010902:	d012      	beq.n	801092a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	695b      	ldr	r3, [r3, #20]
 801090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00b      	beq.n	801092a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010916:	2201      	movs	r2, #1
 8010918:	409a      	lsls	r2, r3
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010922:	f043 0202 	orr.w	r2, r3, #2
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801092e:	2204      	movs	r2, #4
 8010930:	409a      	lsls	r2, r3
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	4013      	ands	r3, r2
 8010936:	2b00      	cmp	r3, #0
 8010938:	d012      	beq.n	8010960 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f003 0302 	and.w	r3, r3, #2
 8010944:	2b00      	cmp	r3, #0
 8010946:	d00b      	beq.n	8010960 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801094c:	2204      	movs	r2, #4
 801094e:	409a      	lsls	r2, r3
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010958:	f043 0204 	orr.w	r2, r3, #4
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010964:	2210      	movs	r2, #16
 8010966:	409a      	lsls	r2, r3
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	4013      	ands	r3, r2
 801096c:	2b00      	cmp	r3, #0
 801096e:	d043      	beq.n	80109f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f003 0308 	and.w	r3, r3, #8
 801097a:	2b00      	cmp	r3, #0
 801097c:	d03c      	beq.n	80109f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010982:	2210      	movs	r2, #16
 8010984:	409a      	lsls	r2, r3
 8010986:	693b      	ldr	r3, [r7, #16]
 8010988:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010994:	2b00      	cmp	r3, #0
 8010996:	d018      	beq.n	80109ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d108      	bne.n	80109b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d024      	beq.n	80109f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	4798      	blx	r3
 80109b6:	e01f      	b.n	80109f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d01b      	beq.n	80109f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	4798      	blx	r3
 80109c8:	e016      	b.n	80109f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d107      	bne.n	80109e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f022 0208 	bic.w	r2, r2, #8
 80109e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d003      	beq.n	80109f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109fc:	2220      	movs	r2, #32
 80109fe:	409a      	lsls	r2, r3
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	4013      	ands	r3, r2
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f000 808e 	beq.w	8010b26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f003 0310 	and.w	r3, r3, #16
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f000 8086 	beq.w	8010b26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a1e:	2220      	movs	r2, #32
 8010a20:	409a      	lsls	r2, r3
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	2b05      	cmp	r3, #5
 8010a30:	d136      	bne.n	8010aa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f022 0216 	bic.w	r2, r2, #22
 8010a40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	695a      	ldr	r2, [r3, #20]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010a50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d103      	bne.n	8010a62 <HAL_DMA_IRQHandler+0x1da>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d007      	beq.n	8010a72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f022 0208 	bic.w	r2, r2, #8
 8010a70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a76:	223f      	movs	r2, #63	; 0x3f
 8010a78:	409a      	lsls	r2, r3
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2200      	movs	r2, #0
 8010a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2201      	movs	r2, #1
 8010a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d07d      	beq.n	8010b92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	4798      	blx	r3
        }
        return;
 8010a9e:	e078      	b.n	8010b92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d01c      	beq.n	8010ae8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d108      	bne.n	8010ace <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d030      	beq.n	8010b26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	4798      	blx	r3
 8010acc:	e02b      	b.n	8010b26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d027      	beq.n	8010b26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	4798      	blx	r3
 8010ade:	e022      	b.n	8010b26 <HAL_DMA_IRQHandler+0x29e>
 8010ae0:	20000028 	.word	0x20000028
 8010ae4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d10f      	bne.n	8010b16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f022 0210 	bic.w	r2, r2, #16
 8010b04:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2201      	movs	r2, #1
 8010b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d003      	beq.n	8010b26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d032      	beq.n	8010b94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b32:	f003 0301 	and.w	r3, r3, #1
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d022      	beq.n	8010b80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2205      	movs	r2, #5
 8010b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	681a      	ldr	r2, [r3, #0]
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f022 0201 	bic.w	r2, r2, #1
 8010b50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	3301      	adds	r3, #1
 8010b56:	60bb      	str	r3, [r7, #8]
 8010b58:	697a      	ldr	r2, [r7, #20]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d307      	bcc.n	8010b6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f003 0301 	and.w	r3, r3, #1
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d1f2      	bne.n	8010b52 <HAL_DMA_IRQHandler+0x2ca>
 8010b6c:	e000      	b.n	8010b70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8010b6e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d005      	beq.n	8010b94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	4798      	blx	r3
 8010b90:	e000      	b.n	8010b94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8010b92:	bf00      	nop
    }
  }
}
 8010b94:	3718      	adds	r7, #24
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop

08010b9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	607a      	str	r2, [r7, #4]
 8010ba8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	681a      	ldr	r2, [r3, #0]
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010bb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	683a      	ldr	r2, [r7, #0]
 8010bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	689b      	ldr	r3, [r3, #8]
 8010bc6:	2b40      	cmp	r3, #64	; 0x40
 8010bc8:	d108      	bne.n	8010bdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	68ba      	ldr	r2, [r7, #8]
 8010bd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8010bda:	e007      	b.n	8010bec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	68ba      	ldr	r2, [r7, #8]
 8010be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	687a      	ldr	r2, [r7, #4]
 8010bea:	60da      	str	r2, [r3, #12]
}
 8010bec:	bf00      	nop
 8010bee:	3714      	adds	r7, #20
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr

08010bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b085      	sub	sp, #20
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	b2db      	uxtb	r3, r3
 8010c06:	3b10      	subs	r3, #16
 8010c08:	4a14      	ldr	r2, [pc, #80]	; (8010c5c <DMA_CalcBaseAndBitshift+0x64>)
 8010c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8010c0e:	091b      	lsrs	r3, r3, #4
 8010c10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8010c12:	4a13      	ldr	r2, [pc, #76]	; (8010c60 <DMA_CalcBaseAndBitshift+0x68>)
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	4413      	add	r3, r2
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	2b03      	cmp	r3, #3
 8010c24:	d909      	bls.n	8010c3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010c2e:	f023 0303 	bic.w	r3, r3, #3
 8010c32:	1d1a      	adds	r2, r3, #4
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	659a      	str	r2, [r3, #88]	; 0x58
 8010c38:	e007      	b.n	8010c4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010c42:	f023 0303 	bic.w	r3, r3, #3
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3714      	adds	r7, #20
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr
 8010c5a:	bf00      	nop
 8010c5c:	aaaaaaab 	.word	0xaaaaaaab
 8010c60:	0801a2c0 	.word	0x0801a2c0

08010c64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b085      	sub	sp, #20
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	699b      	ldr	r3, [r3, #24]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d11f      	bne.n	8010cbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	2b03      	cmp	r3, #3
 8010c82:	d855      	bhi.n	8010d30 <DMA_CheckFifoParam+0xcc>
 8010c84:	a201      	add	r2, pc, #4	; (adr r2, 8010c8c <DMA_CheckFifoParam+0x28>)
 8010c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c8a:	bf00      	nop
 8010c8c:	08010c9d 	.word	0x08010c9d
 8010c90:	08010caf 	.word	0x08010caf
 8010c94:	08010c9d 	.word	0x08010c9d
 8010c98:	08010d31 	.word	0x08010d31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d045      	beq.n	8010d34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010cac:	e042      	b.n	8010d34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010cb6:	d13f      	bne.n	8010d38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010cbc:	e03c      	b.n	8010d38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	699b      	ldr	r3, [r3, #24]
 8010cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010cc6:	d121      	bne.n	8010d0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	2b03      	cmp	r3, #3
 8010ccc:	d836      	bhi.n	8010d3c <DMA_CheckFifoParam+0xd8>
 8010cce:	a201      	add	r2, pc, #4	; (adr r2, 8010cd4 <DMA_CheckFifoParam+0x70>)
 8010cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd4:	08010ce5 	.word	0x08010ce5
 8010cd8:	08010ceb 	.word	0x08010ceb
 8010cdc:	08010ce5 	.word	0x08010ce5
 8010ce0:	08010cfd 	.word	0x08010cfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8010ce8:	e02f      	b.n	8010d4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d024      	beq.n	8010d40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010cfa:	e021      	b.n	8010d40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010d04:	d11e      	bne.n	8010d44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8010d06:	2301      	movs	r3, #1
 8010d08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010d0a:	e01b      	b.n	8010d44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	2b02      	cmp	r3, #2
 8010d10:	d902      	bls.n	8010d18 <DMA_CheckFifoParam+0xb4>
 8010d12:	2b03      	cmp	r3, #3
 8010d14:	d003      	beq.n	8010d1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010d16:	e018      	b.n	8010d4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8010d18:	2301      	movs	r3, #1
 8010d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8010d1c:	e015      	b.n	8010d4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d00e      	beq.n	8010d48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8010d2e:	e00b      	b.n	8010d48 <DMA_CheckFifoParam+0xe4>
      break;
 8010d30:	bf00      	nop
 8010d32:	e00a      	b.n	8010d4a <DMA_CheckFifoParam+0xe6>
      break;
 8010d34:	bf00      	nop
 8010d36:	e008      	b.n	8010d4a <DMA_CheckFifoParam+0xe6>
      break;
 8010d38:	bf00      	nop
 8010d3a:	e006      	b.n	8010d4a <DMA_CheckFifoParam+0xe6>
      break;
 8010d3c:	bf00      	nop
 8010d3e:	e004      	b.n	8010d4a <DMA_CheckFifoParam+0xe6>
      break;
 8010d40:	bf00      	nop
 8010d42:	e002      	b.n	8010d4a <DMA_CheckFifoParam+0xe6>
      break;   
 8010d44:	bf00      	nop
 8010d46:	e000      	b.n	8010d4a <DMA_CheckFifoParam+0xe6>
      break;
 8010d48:	bf00      	nop
    }
  } 
  
  return status; 
 8010d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3714      	adds	r7, #20
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010d62:	4b0b      	ldr	r3, [pc, #44]	; (8010d90 <HAL_FLASH_Unlock+0x38>)
 8010d64:	691b      	ldr	r3, [r3, #16]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	da0b      	bge.n	8010d82 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010d6a:	4b09      	ldr	r3, [pc, #36]	; (8010d90 <HAL_FLASH_Unlock+0x38>)
 8010d6c:	4a09      	ldr	r2, [pc, #36]	; (8010d94 <HAL_FLASH_Unlock+0x3c>)
 8010d6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010d70:	4b07      	ldr	r3, [pc, #28]	; (8010d90 <HAL_FLASH_Unlock+0x38>)
 8010d72:	4a09      	ldr	r2, [pc, #36]	; (8010d98 <HAL_FLASH_Unlock+0x40>)
 8010d74:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010d76:	4b06      	ldr	r3, [pc, #24]	; (8010d90 <HAL_FLASH_Unlock+0x38>)
 8010d78:	691b      	ldr	r3, [r3, #16]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	da01      	bge.n	8010d82 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8010d7e:	2301      	movs	r3, #1
 8010d80:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8010d82:	79fb      	ldrb	r3, [r7, #7]
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	370c      	adds	r7, #12
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr
 8010d90:	40023c00 	.word	0x40023c00
 8010d94:	45670123 	.word	0x45670123
 8010d98:	cdef89ab 	.word	0xcdef89ab

08010d9c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8010da0:	4b05      	ldr	r3, [pc, #20]	; (8010db8 <HAL_FLASH_Lock+0x1c>)
 8010da2:	691b      	ldr	r3, [r3, #16]
 8010da4:	4a04      	ldr	r2, [pc, #16]	; (8010db8 <HAL_FLASH_Lock+0x1c>)
 8010da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010daa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8010dac:	2300      	movs	r3, #0
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	46bd      	mov	sp, r7
 8010db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db6:	4770      	bx	lr
 8010db8:	40023c00 	.word	0x40023c00

08010dbc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010dc8:	4b1a      	ldr	r3, [pc, #104]	; (8010e34 <FLASH_WaitForLastOperation+0x78>)
 8010dca:	2200      	movs	r2, #0
 8010dcc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8010dce:	f7fe fe67 	bl	800faa0 <HAL_GetTick>
 8010dd2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010dd4:	e010      	b.n	8010df8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ddc:	d00c      	beq.n	8010df8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d007      	beq.n	8010df4 <FLASH_WaitForLastOperation+0x38>
 8010de4:	f7fe fe5c 	bl	800faa0 <HAL_GetTick>
 8010de8:	4602      	mov	r2, r0
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	1ad3      	subs	r3, r2, r3
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	429a      	cmp	r2, r3
 8010df2:	d201      	bcs.n	8010df8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8010df4:	2303      	movs	r3, #3
 8010df6:	e019      	b.n	8010e2c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010df8:	4b0f      	ldr	r3, [pc, #60]	; (8010e38 <FLASH_WaitForLastOperation+0x7c>)
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d1e8      	bne.n	8010dd6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8010e04:	4b0c      	ldr	r3, [pc, #48]	; (8010e38 <FLASH_WaitForLastOperation+0x7c>)
 8010e06:	68db      	ldr	r3, [r3, #12]
 8010e08:	f003 0301 	and.w	r3, r3, #1
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d002      	beq.n	8010e16 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010e10:	4b09      	ldr	r3, [pc, #36]	; (8010e38 <FLASH_WaitForLastOperation+0x7c>)
 8010e12:	2201      	movs	r2, #1
 8010e14:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8010e16:	4b08      	ldr	r3, [pc, #32]	; (8010e38 <FLASH_WaitForLastOperation+0x7c>)
 8010e18:	68db      	ldr	r3, [r3, #12]
 8010e1a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d003      	beq.n	8010e2a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8010e22:	f000 f80b 	bl	8010e3c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010e26:	2301      	movs	r3, #1
 8010e28:	e000      	b.n	8010e2c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8010e2a:	2300      	movs	r3, #0
  
}  
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3710      	adds	r7, #16
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	20008f2c 	.word	0x20008f2c
 8010e38:	40023c00 	.word	0x40023c00

08010e3c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8010e3c:	b480      	push	{r7}
 8010e3e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8010e40:	4b27      	ldr	r3, [pc, #156]	; (8010ee0 <FLASH_SetErrorCode+0xa4>)
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	f003 0310 	and.w	r3, r3, #16
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d008      	beq.n	8010e5e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010e4c:	4b25      	ldr	r3, [pc, #148]	; (8010ee4 <FLASH_SetErrorCode+0xa8>)
 8010e4e:	69db      	ldr	r3, [r3, #28]
 8010e50:	f043 0310 	orr.w	r3, r3, #16
 8010e54:	4a23      	ldr	r2, [pc, #140]	; (8010ee4 <FLASH_SetErrorCode+0xa8>)
 8010e56:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8010e58:	4b21      	ldr	r3, [pc, #132]	; (8010ee0 <FLASH_SetErrorCode+0xa4>)
 8010e5a:	2210      	movs	r2, #16
 8010e5c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8010e5e:	4b20      	ldr	r3, [pc, #128]	; (8010ee0 <FLASH_SetErrorCode+0xa4>)
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	f003 0320 	and.w	r3, r3, #32
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d008      	beq.n	8010e7c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8010e6a:	4b1e      	ldr	r3, [pc, #120]	; (8010ee4 <FLASH_SetErrorCode+0xa8>)
 8010e6c:	69db      	ldr	r3, [r3, #28]
 8010e6e:	f043 0308 	orr.w	r3, r3, #8
 8010e72:	4a1c      	ldr	r2, [pc, #112]	; (8010ee4 <FLASH_SetErrorCode+0xa8>)
 8010e74:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8010e76:	4b1a      	ldr	r3, [pc, #104]	; (8010ee0 <FLASH_SetErrorCode+0xa4>)
 8010e78:	2220      	movs	r2, #32
 8010e7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8010e7c:	4b18      	ldr	r3, [pc, #96]	; (8010ee0 <FLASH_SetErrorCode+0xa4>)
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d008      	beq.n	8010e9a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8010e88:	4b16      	ldr	r3, [pc, #88]	; (8010ee4 <FLASH_SetErrorCode+0xa8>)
 8010e8a:	69db      	ldr	r3, [r3, #28]
 8010e8c:	f043 0304 	orr.w	r3, r3, #4
 8010e90:	4a14      	ldr	r2, [pc, #80]	; (8010ee4 <FLASH_SetErrorCode+0xa8>)
 8010e92:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8010e94:	4b12      	ldr	r3, [pc, #72]	; (8010ee0 <FLASH_SetErrorCode+0xa4>)
 8010e96:	2240      	movs	r2, #64	; 0x40
 8010e98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8010e9a:	4b11      	ldr	r3, [pc, #68]	; (8010ee0 <FLASH_SetErrorCode+0xa4>)
 8010e9c:	68db      	ldr	r3, [r3, #12]
 8010e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d008      	beq.n	8010eb8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8010ea6:	4b0f      	ldr	r3, [pc, #60]	; (8010ee4 <FLASH_SetErrorCode+0xa8>)
 8010ea8:	69db      	ldr	r3, [r3, #28]
 8010eaa:	f043 0302 	orr.w	r3, r3, #2
 8010eae:	4a0d      	ldr	r2, [pc, #52]	; (8010ee4 <FLASH_SetErrorCode+0xa8>)
 8010eb0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8010eb2:	4b0b      	ldr	r3, [pc, #44]	; (8010ee0 <FLASH_SetErrorCode+0xa4>)
 8010eb4:	2280      	movs	r2, #128	; 0x80
 8010eb6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8010eb8:	4b09      	ldr	r3, [pc, #36]	; (8010ee0 <FLASH_SetErrorCode+0xa4>)
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	f003 0302 	and.w	r3, r3, #2
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d008      	beq.n	8010ed6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8010ec4:	4b07      	ldr	r3, [pc, #28]	; (8010ee4 <FLASH_SetErrorCode+0xa8>)
 8010ec6:	69db      	ldr	r3, [r3, #28]
 8010ec8:	f043 0320 	orr.w	r3, r3, #32
 8010ecc:	4a05      	ldr	r2, [pc, #20]	; (8010ee4 <FLASH_SetErrorCode+0xa8>)
 8010ece:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8010ed0:	4b03      	ldr	r3, [pc, #12]	; (8010ee0 <FLASH_SetErrorCode+0xa4>)
 8010ed2:	2202      	movs	r2, #2
 8010ed4:	60da      	str	r2, [r3, #12]
  }
}
 8010ed6:	bf00      	nop
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr
 8010ee0:	40023c00 	.word	0x40023c00
 8010ee4:	20008f2c 	.word	0x20008f2c

08010ee8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010efa:	4b31      	ldr	r3, [pc, #196]	; (8010fc0 <HAL_FLASHEx_Erase+0xd8>)
 8010efc:	7e1b      	ldrb	r3, [r3, #24]
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d101      	bne.n	8010f06 <HAL_FLASHEx_Erase+0x1e>
 8010f02:	2302      	movs	r3, #2
 8010f04:	e058      	b.n	8010fb8 <HAL_FLASHEx_Erase+0xd0>
 8010f06:	4b2e      	ldr	r3, [pc, #184]	; (8010fc0 <HAL_FLASHEx_Erase+0xd8>)
 8010f08:	2201      	movs	r2, #1
 8010f0a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f10:	f7ff ff54 	bl	8010dbc <FLASH_WaitForLastOperation>
 8010f14:	4603      	mov	r3, r0
 8010f16:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8010f18:	7bfb      	ldrb	r3, [r7, #15]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d148      	bne.n	8010fb0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	f04f 32ff 	mov.w	r2, #4294967295
 8010f24:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	2b01      	cmp	r3, #1
 8010f2c:	d115      	bne.n	8010f5a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	691b      	ldr	r3, [r3, #16]
 8010f32:	b2da      	uxtb	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	4619      	mov	r1, r3
 8010f3a:	4610      	mov	r0, r2
 8010f3c:	f000 f844 	bl	8010fc8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f44:	f7ff ff3a 	bl	8010dbc <FLASH_WaitForLastOperation>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8010f4c:	4b1d      	ldr	r3, [pc, #116]	; (8010fc4 <HAL_FLASHEx_Erase+0xdc>)
 8010f4e:	691b      	ldr	r3, [r3, #16]
 8010f50:	4a1c      	ldr	r2, [pc, #112]	; (8010fc4 <HAL_FLASHEx_Erase+0xdc>)
 8010f52:	f023 0304 	bic.w	r3, r3, #4
 8010f56:	6113      	str	r3, [r2, #16]
 8010f58:	e028      	b.n	8010fac <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	689b      	ldr	r3, [r3, #8]
 8010f5e:	60bb      	str	r3, [r7, #8]
 8010f60:	e01c      	b.n	8010f9c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	b2db      	uxtb	r3, r3
 8010f68:	4619      	mov	r1, r3
 8010f6a:	68b8      	ldr	r0, [r7, #8]
 8010f6c:	f000 f850 	bl	8011010 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f74:	f7ff ff22 	bl	8010dbc <FLASH_WaitForLastOperation>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8010f7c:	4b11      	ldr	r3, [pc, #68]	; (8010fc4 <HAL_FLASHEx_Erase+0xdc>)
 8010f7e:	691b      	ldr	r3, [r3, #16]
 8010f80:	4a10      	ldr	r2, [pc, #64]	; (8010fc4 <HAL_FLASHEx_Erase+0xdc>)
 8010f82:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8010f86:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8010f88:	7bfb      	ldrb	r3, [r7, #15]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d003      	beq.n	8010f96 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	601a      	str	r2, [r3, #0]
          break;
 8010f94:	e00a      	b.n	8010fac <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	3301      	adds	r3, #1
 8010f9a:	60bb      	str	r3, [r7, #8]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	68da      	ldr	r2, [r3, #12]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	689b      	ldr	r3, [r3, #8]
 8010fa4:	4413      	add	r3, r2
 8010fa6:	68ba      	ldr	r2, [r7, #8]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d3da      	bcc.n	8010f62 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8010fac:	f000 f878 	bl	80110a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010fb0:	4b03      	ldr	r3, [pc, #12]	; (8010fc0 <HAL_FLASHEx_Erase+0xd8>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	761a      	strb	r2, [r3, #24]

  return status;
 8010fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3710      	adds	r7, #16
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	20008f2c 	.word	0x20008f2c
 8010fc4:	40023c00 	.word	0x40023c00

08010fc8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b083      	sub	sp, #12
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	4603      	mov	r3, r0
 8010fd0:	6039      	str	r1, [r7, #0]
 8010fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010fd4:	4b0d      	ldr	r3, [pc, #52]	; (801100c <FLASH_MassErase+0x44>)
 8010fd6:	691b      	ldr	r3, [r3, #16]
 8010fd8:	4a0c      	ldr	r2, [pc, #48]	; (801100c <FLASH_MassErase+0x44>)
 8010fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010fde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8010fe0:	4b0a      	ldr	r3, [pc, #40]	; (801100c <FLASH_MassErase+0x44>)
 8010fe2:	691b      	ldr	r3, [r3, #16]
 8010fe4:	4a09      	ldr	r2, [pc, #36]	; (801100c <FLASH_MassErase+0x44>)
 8010fe6:	f043 0304 	orr.w	r3, r3, #4
 8010fea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8010fec:	4b07      	ldr	r3, [pc, #28]	; (801100c <FLASH_MassErase+0x44>)
 8010fee:	691a      	ldr	r2, [r3, #16]
 8010ff0:	79fb      	ldrb	r3, [r7, #7]
 8010ff2:	021b      	lsls	r3, r3, #8
 8010ff4:	4313      	orrs	r3, r2
 8010ff6:	4a05      	ldr	r2, [pc, #20]	; (801100c <FLASH_MassErase+0x44>)
 8010ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010ffc:	6113      	str	r3, [r2, #16]
}
 8010ffe:	bf00      	nop
 8011000:	370c      	adds	r7, #12
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
 801100a:	bf00      	nop
 801100c:	40023c00 	.word	0x40023c00

08011010 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8011010:	b480      	push	{r7}
 8011012:	b085      	sub	sp, #20
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	460b      	mov	r3, r1
 801101a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 801101c:	2300      	movs	r3, #0
 801101e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8011020:	78fb      	ldrb	r3, [r7, #3]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d102      	bne.n	801102c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8011026:	2300      	movs	r3, #0
 8011028:	60fb      	str	r3, [r7, #12]
 801102a:	e010      	b.n	801104e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 801102c:	78fb      	ldrb	r3, [r7, #3]
 801102e:	2b01      	cmp	r3, #1
 8011030:	d103      	bne.n	801103a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8011032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011036:	60fb      	str	r3, [r7, #12]
 8011038:	e009      	b.n	801104e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801103a:	78fb      	ldrb	r3, [r7, #3]
 801103c:	2b02      	cmp	r3, #2
 801103e:	d103      	bne.n	8011048 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8011040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011044:	60fb      	str	r3, [r7, #12]
 8011046:	e002      	b.n	801104e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011048:	f44f 7340 	mov.w	r3, #768	; 0x300
 801104c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801104e:	4b13      	ldr	r3, [pc, #76]	; (801109c <FLASH_Erase_Sector+0x8c>)
 8011050:	691b      	ldr	r3, [r3, #16]
 8011052:	4a12      	ldr	r2, [pc, #72]	; (801109c <FLASH_Erase_Sector+0x8c>)
 8011054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011058:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801105a:	4b10      	ldr	r3, [pc, #64]	; (801109c <FLASH_Erase_Sector+0x8c>)
 801105c:	691a      	ldr	r2, [r3, #16]
 801105e:	490f      	ldr	r1, [pc, #60]	; (801109c <FLASH_Erase_Sector+0x8c>)
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	4313      	orrs	r3, r2
 8011064:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8011066:	4b0d      	ldr	r3, [pc, #52]	; (801109c <FLASH_Erase_Sector+0x8c>)
 8011068:	691b      	ldr	r3, [r3, #16]
 801106a:	4a0c      	ldr	r2, [pc, #48]	; (801109c <FLASH_Erase_Sector+0x8c>)
 801106c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011070:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8011072:	4b0a      	ldr	r3, [pc, #40]	; (801109c <FLASH_Erase_Sector+0x8c>)
 8011074:	691a      	ldr	r2, [r3, #16]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	00db      	lsls	r3, r3, #3
 801107a:	4313      	orrs	r3, r2
 801107c:	4a07      	ldr	r2, [pc, #28]	; (801109c <FLASH_Erase_Sector+0x8c>)
 801107e:	f043 0302 	orr.w	r3, r3, #2
 8011082:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8011084:	4b05      	ldr	r3, [pc, #20]	; (801109c <FLASH_Erase_Sector+0x8c>)
 8011086:	691b      	ldr	r3, [r3, #16]
 8011088:	4a04      	ldr	r2, [pc, #16]	; (801109c <FLASH_Erase_Sector+0x8c>)
 801108a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801108e:	6113      	str	r3, [r2, #16]
}
 8011090:	bf00      	nop
 8011092:	3714      	adds	r7, #20
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr
 801109c:	40023c00 	.word	0x40023c00

080110a0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80110a0:	b480      	push	{r7}
 80110a2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80110a4:	4b20      	ldr	r3, [pc, #128]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d017      	beq.n	80110e0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80110b0:	4b1d      	ldr	r3, [pc, #116]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	4a1c      	ldr	r2, [pc, #112]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80110ba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80110bc:	4b1a      	ldr	r3, [pc, #104]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4a19      	ldr	r2, [pc, #100]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110c6:	6013      	str	r3, [r2, #0]
 80110c8:	4b17      	ldr	r3, [pc, #92]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4a16      	ldr	r2, [pc, #88]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110d2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80110d4:	4b14      	ldr	r3, [pc, #80]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	4a13      	ldr	r2, [pc, #76]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80110de:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80110e0:	4b11      	ldr	r3, [pc, #68]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d017      	beq.n	801111c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80110ec:	4b0e      	ldr	r3, [pc, #56]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	4a0d      	ldr	r2, [pc, #52]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80110f6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80110f8:	4b0b      	ldr	r3, [pc, #44]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	4a0a      	ldr	r2, [pc, #40]	; (8011128 <FLASH_FlushCaches+0x88>)
 80110fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011102:	6013      	str	r3, [r2, #0]
 8011104:	4b08      	ldr	r3, [pc, #32]	; (8011128 <FLASH_FlushCaches+0x88>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	4a07      	ldr	r2, [pc, #28]	; (8011128 <FLASH_FlushCaches+0x88>)
 801110a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801110e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8011110:	4b05      	ldr	r3, [pc, #20]	; (8011128 <FLASH_FlushCaches+0x88>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	4a04      	ldr	r2, [pc, #16]	; (8011128 <FLASH_FlushCaches+0x88>)
 8011116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801111a:	6013      	str	r3, [r2, #0]
  }
}
 801111c:	bf00      	nop
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr
 8011126:	bf00      	nop
 8011128:	40023c00 	.word	0x40023c00

0801112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801112c:	b480      	push	{r7}
 801112e:	b089      	sub	sp, #36	; 0x24
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011136:	2300      	movs	r3, #0
 8011138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801113a:	2300      	movs	r3, #0
 801113c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801113e:	2300      	movs	r3, #0
 8011140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011142:	2300      	movs	r3, #0
 8011144:	61fb      	str	r3, [r7, #28]
 8011146:	e16b      	b.n	8011420 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011148:	2201      	movs	r2, #1
 801114a:	69fb      	ldr	r3, [r7, #28]
 801114c:	fa02 f303 	lsl.w	r3, r2, r3
 8011150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	697a      	ldr	r2, [r7, #20]
 8011158:	4013      	ands	r3, r2
 801115a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801115c:	693a      	ldr	r2, [r7, #16]
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	429a      	cmp	r2, r3
 8011162:	f040 815a 	bne.w	801141a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	2b01      	cmp	r3, #1
 801116c:	d00b      	beq.n	8011186 <HAL_GPIO_Init+0x5a>
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	2b02      	cmp	r3, #2
 8011174:	d007      	beq.n	8011186 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801117a:	2b11      	cmp	r3, #17
 801117c:	d003      	beq.n	8011186 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	2b12      	cmp	r3, #18
 8011184:	d130      	bne.n	80111e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	689b      	ldr	r3, [r3, #8]
 801118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	005b      	lsls	r3, r3, #1
 8011190:	2203      	movs	r2, #3
 8011192:	fa02 f303 	lsl.w	r3, r2, r3
 8011196:	43db      	mvns	r3, r3
 8011198:	69ba      	ldr	r2, [r7, #24]
 801119a:	4013      	ands	r3, r2
 801119c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	68da      	ldr	r2, [r3, #12]
 80111a2:	69fb      	ldr	r3, [r7, #28]
 80111a4:	005b      	lsls	r3, r3, #1
 80111a6:	fa02 f303 	lsl.w	r3, r2, r3
 80111aa:	69ba      	ldr	r2, [r7, #24]
 80111ac:	4313      	orrs	r3, r2
 80111ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	69ba      	ldr	r2, [r7, #24]
 80111b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80111bc:	2201      	movs	r2, #1
 80111be:	69fb      	ldr	r3, [r7, #28]
 80111c0:	fa02 f303 	lsl.w	r3, r2, r3
 80111c4:	43db      	mvns	r3, r3
 80111c6:	69ba      	ldr	r2, [r7, #24]
 80111c8:	4013      	ands	r3, r2
 80111ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	091b      	lsrs	r3, r3, #4
 80111d2:	f003 0201 	and.w	r2, r3, #1
 80111d6:	69fb      	ldr	r3, [r7, #28]
 80111d8:	fa02 f303 	lsl.w	r3, r2, r3
 80111dc:	69ba      	ldr	r2, [r7, #24]
 80111de:	4313      	orrs	r3, r2
 80111e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	69ba      	ldr	r2, [r7, #24]
 80111e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80111ee:	69fb      	ldr	r3, [r7, #28]
 80111f0:	005b      	lsls	r3, r3, #1
 80111f2:	2203      	movs	r2, #3
 80111f4:	fa02 f303 	lsl.w	r3, r2, r3
 80111f8:	43db      	mvns	r3, r3
 80111fa:	69ba      	ldr	r2, [r7, #24]
 80111fc:	4013      	ands	r3, r2
 80111fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	689a      	ldr	r2, [r3, #8]
 8011204:	69fb      	ldr	r3, [r7, #28]
 8011206:	005b      	lsls	r3, r3, #1
 8011208:	fa02 f303 	lsl.w	r3, r2, r3
 801120c:	69ba      	ldr	r2, [r7, #24]
 801120e:	4313      	orrs	r3, r2
 8011210:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	69ba      	ldr	r2, [r7, #24]
 8011216:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	2b02      	cmp	r3, #2
 801121e:	d003      	beq.n	8011228 <HAL_GPIO_Init+0xfc>
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	2b12      	cmp	r3, #18
 8011226:	d123      	bne.n	8011270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011228:	69fb      	ldr	r3, [r7, #28]
 801122a:	08da      	lsrs	r2, r3, #3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	3208      	adds	r2, #8
 8011230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011236:	69fb      	ldr	r3, [r7, #28]
 8011238:	f003 0307 	and.w	r3, r3, #7
 801123c:	009b      	lsls	r3, r3, #2
 801123e:	220f      	movs	r2, #15
 8011240:	fa02 f303 	lsl.w	r3, r2, r3
 8011244:	43db      	mvns	r3, r3
 8011246:	69ba      	ldr	r2, [r7, #24]
 8011248:	4013      	ands	r3, r2
 801124a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	691a      	ldr	r2, [r3, #16]
 8011250:	69fb      	ldr	r3, [r7, #28]
 8011252:	f003 0307 	and.w	r3, r3, #7
 8011256:	009b      	lsls	r3, r3, #2
 8011258:	fa02 f303 	lsl.w	r3, r2, r3
 801125c:	69ba      	ldr	r2, [r7, #24]
 801125e:	4313      	orrs	r3, r2
 8011260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011262:	69fb      	ldr	r3, [r7, #28]
 8011264:	08da      	lsrs	r2, r3, #3
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	3208      	adds	r2, #8
 801126a:	69b9      	ldr	r1, [r7, #24]
 801126c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	005b      	lsls	r3, r3, #1
 801127a:	2203      	movs	r2, #3
 801127c:	fa02 f303 	lsl.w	r3, r2, r3
 8011280:	43db      	mvns	r3, r3
 8011282:	69ba      	ldr	r2, [r7, #24]
 8011284:	4013      	ands	r3, r2
 8011286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	685b      	ldr	r3, [r3, #4]
 801128c:	f003 0203 	and.w	r2, r3, #3
 8011290:	69fb      	ldr	r3, [r7, #28]
 8011292:	005b      	lsls	r3, r3, #1
 8011294:	fa02 f303 	lsl.w	r3, r2, r3
 8011298:	69ba      	ldr	r2, [r7, #24]
 801129a:	4313      	orrs	r3, r2
 801129c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	69ba      	ldr	r2, [r7, #24]
 80112a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	f000 80b4 	beq.w	801141a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112b2:	2300      	movs	r3, #0
 80112b4:	60fb      	str	r3, [r7, #12]
 80112b6:	4b5f      	ldr	r3, [pc, #380]	; (8011434 <HAL_GPIO_Init+0x308>)
 80112b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112ba:	4a5e      	ldr	r2, [pc, #376]	; (8011434 <HAL_GPIO_Init+0x308>)
 80112bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80112c0:	6453      	str	r3, [r2, #68]	; 0x44
 80112c2:	4b5c      	ldr	r3, [pc, #368]	; (8011434 <HAL_GPIO_Init+0x308>)
 80112c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112ca:	60fb      	str	r3, [r7, #12]
 80112cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80112ce:	4a5a      	ldr	r2, [pc, #360]	; (8011438 <HAL_GPIO_Init+0x30c>)
 80112d0:	69fb      	ldr	r3, [r7, #28]
 80112d2:	089b      	lsrs	r3, r3, #2
 80112d4:	3302      	adds	r3, #2
 80112d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	f003 0303 	and.w	r3, r3, #3
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	220f      	movs	r2, #15
 80112e6:	fa02 f303 	lsl.w	r3, r2, r3
 80112ea:	43db      	mvns	r3, r3
 80112ec:	69ba      	ldr	r2, [r7, #24]
 80112ee:	4013      	ands	r3, r2
 80112f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	4a51      	ldr	r2, [pc, #324]	; (801143c <HAL_GPIO_Init+0x310>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d02b      	beq.n	8011352 <HAL_GPIO_Init+0x226>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	4a50      	ldr	r2, [pc, #320]	; (8011440 <HAL_GPIO_Init+0x314>)
 80112fe:	4293      	cmp	r3, r2
 8011300:	d025      	beq.n	801134e <HAL_GPIO_Init+0x222>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	4a4f      	ldr	r2, [pc, #316]	; (8011444 <HAL_GPIO_Init+0x318>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d01f      	beq.n	801134a <HAL_GPIO_Init+0x21e>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	4a4e      	ldr	r2, [pc, #312]	; (8011448 <HAL_GPIO_Init+0x31c>)
 801130e:	4293      	cmp	r3, r2
 8011310:	d019      	beq.n	8011346 <HAL_GPIO_Init+0x21a>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	4a4d      	ldr	r2, [pc, #308]	; (801144c <HAL_GPIO_Init+0x320>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d013      	beq.n	8011342 <HAL_GPIO_Init+0x216>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	4a4c      	ldr	r2, [pc, #304]	; (8011450 <HAL_GPIO_Init+0x324>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d00d      	beq.n	801133e <HAL_GPIO_Init+0x212>
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	4a4b      	ldr	r2, [pc, #300]	; (8011454 <HAL_GPIO_Init+0x328>)
 8011326:	4293      	cmp	r3, r2
 8011328:	d007      	beq.n	801133a <HAL_GPIO_Init+0x20e>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	4a4a      	ldr	r2, [pc, #296]	; (8011458 <HAL_GPIO_Init+0x32c>)
 801132e:	4293      	cmp	r3, r2
 8011330:	d101      	bne.n	8011336 <HAL_GPIO_Init+0x20a>
 8011332:	2307      	movs	r3, #7
 8011334:	e00e      	b.n	8011354 <HAL_GPIO_Init+0x228>
 8011336:	2308      	movs	r3, #8
 8011338:	e00c      	b.n	8011354 <HAL_GPIO_Init+0x228>
 801133a:	2306      	movs	r3, #6
 801133c:	e00a      	b.n	8011354 <HAL_GPIO_Init+0x228>
 801133e:	2305      	movs	r3, #5
 8011340:	e008      	b.n	8011354 <HAL_GPIO_Init+0x228>
 8011342:	2304      	movs	r3, #4
 8011344:	e006      	b.n	8011354 <HAL_GPIO_Init+0x228>
 8011346:	2303      	movs	r3, #3
 8011348:	e004      	b.n	8011354 <HAL_GPIO_Init+0x228>
 801134a:	2302      	movs	r3, #2
 801134c:	e002      	b.n	8011354 <HAL_GPIO_Init+0x228>
 801134e:	2301      	movs	r3, #1
 8011350:	e000      	b.n	8011354 <HAL_GPIO_Init+0x228>
 8011352:	2300      	movs	r3, #0
 8011354:	69fa      	ldr	r2, [r7, #28]
 8011356:	f002 0203 	and.w	r2, r2, #3
 801135a:	0092      	lsls	r2, r2, #2
 801135c:	4093      	lsls	r3, r2
 801135e:	69ba      	ldr	r2, [r7, #24]
 8011360:	4313      	orrs	r3, r2
 8011362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011364:	4934      	ldr	r1, [pc, #208]	; (8011438 <HAL_GPIO_Init+0x30c>)
 8011366:	69fb      	ldr	r3, [r7, #28]
 8011368:	089b      	lsrs	r3, r3, #2
 801136a:	3302      	adds	r3, #2
 801136c:	69ba      	ldr	r2, [r7, #24]
 801136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011372:	4b3a      	ldr	r3, [pc, #232]	; (801145c <HAL_GPIO_Init+0x330>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	43db      	mvns	r3, r3
 801137c:	69ba      	ldr	r2, [r7, #24]
 801137e:	4013      	ands	r3, r2
 8011380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801138a:	2b00      	cmp	r3, #0
 801138c:	d003      	beq.n	8011396 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 801138e:	69ba      	ldr	r2, [r7, #24]
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	4313      	orrs	r3, r2
 8011394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011396:	4a31      	ldr	r2, [pc, #196]	; (801145c <HAL_GPIO_Init+0x330>)
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801139c:	4b2f      	ldr	r3, [pc, #188]	; (801145c <HAL_GPIO_Init+0x330>)
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	43db      	mvns	r3, r3
 80113a6:	69ba      	ldr	r2, [r7, #24]
 80113a8:	4013      	ands	r3, r2
 80113aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d003      	beq.n	80113c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80113b8:	69ba      	ldr	r2, [r7, #24]
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	4313      	orrs	r3, r2
 80113be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80113c0:	4a26      	ldr	r2, [pc, #152]	; (801145c <HAL_GPIO_Init+0x330>)
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80113c6:	4b25      	ldr	r3, [pc, #148]	; (801145c <HAL_GPIO_Init+0x330>)
 80113c8:	689b      	ldr	r3, [r3, #8]
 80113ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	43db      	mvns	r3, r3
 80113d0:	69ba      	ldr	r2, [r7, #24]
 80113d2:	4013      	ands	r3, r2
 80113d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d003      	beq.n	80113ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80113e2:	69ba      	ldr	r2, [r7, #24]
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	4313      	orrs	r3, r2
 80113e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80113ea:	4a1c      	ldr	r2, [pc, #112]	; (801145c <HAL_GPIO_Init+0x330>)
 80113ec:	69bb      	ldr	r3, [r7, #24]
 80113ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80113f0:	4b1a      	ldr	r3, [pc, #104]	; (801145c <HAL_GPIO_Init+0x330>)
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	43db      	mvns	r3, r3
 80113fa:	69ba      	ldr	r2, [r7, #24]
 80113fc:	4013      	ands	r3, r2
 80113fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011408:	2b00      	cmp	r3, #0
 801140a:	d003      	beq.n	8011414 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 801140c:	69ba      	ldr	r2, [r7, #24]
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	4313      	orrs	r3, r2
 8011412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011414:	4a11      	ldr	r2, [pc, #68]	; (801145c <HAL_GPIO_Init+0x330>)
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	3301      	adds	r3, #1
 801141e:	61fb      	str	r3, [r7, #28]
 8011420:	69fb      	ldr	r3, [r7, #28]
 8011422:	2b0f      	cmp	r3, #15
 8011424:	f67f ae90 	bls.w	8011148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011428:	bf00      	nop
 801142a:	3724      	adds	r7, #36	; 0x24
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr
 8011434:	40023800 	.word	0x40023800
 8011438:	40013800 	.word	0x40013800
 801143c:	40020000 	.word	0x40020000
 8011440:	40020400 	.word	0x40020400
 8011444:	40020800 	.word	0x40020800
 8011448:	40020c00 	.word	0x40020c00
 801144c:	40021000 	.word	0x40021000
 8011450:	40021400 	.word	0x40021400
 8011454:	40021800 	.word	0x40021800
 8011458:	40021c00 	.word	0x40021c00
 801145c:	40013c00 	.word	0x40013c00

08011460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011460:	b480      	push	{r7}
 8011462:	b083      	sub	sp, #12
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	460b      	mov	r3, r1
 801146a:	807b      	strh	r3, [r7, #2]
 801146c:	4613      	mov	r3, r2
 801146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011470:	787b      	ldrb	r3, [r7, #1]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d003      	beq.n	801147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011476:	887a      	ldrh	r2, [r7, #2]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801147c:	e003      	b.n	8011486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801147e:	887b      	ldrh	r3, [r7, #2]
 8011480:	041a      	lsls	r2, r3, #16
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	619a      	str	r2, [r3, #24]
}
 8011486:	bf00      	nop
 8011488:	370c      	adds	r7, #12
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr
	...

08011494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	4603      	mov	r3, r0
 801149c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801149e:	4b08      	ldr	r3, [pc, #32]	; (80114c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80114a0:	695a      	ldr	r2, [r3, #20]
 80114a2:	88fb      	ldrh	r3, [r7, #6]
 80114a4:	4013      	ands	r3, r2
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d006      	beq.n	80114b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80114aa:	4a05      	ldr	r2, [pc, #20]	; (80114c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80114ac:	88fb      	ldrh	r3, [r7, #6]
 80114ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80114b0:	88fb      	ldrh	r3, [r7, #6]
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fe f938 	bl	800f728 <HAL_GPIO_EXTI_Callback>
  }
}
 80114b8:	bf00      	nop
 80114ba:	3708      	adds	r7, #8
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	40013c00 	.word	0x40013c00

080114c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b086      	sub	sp, #24
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d101      	bne.n	80114d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80114d2:	2301      	movs	r3, #1
 80114d4:	e25b      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f003 0301 	and.w	r3, r3, #1
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d075      	beq.n	80115ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80114e2:	4ba3      	ldr	r3, [pc, #652]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 80114e4:	689b      	ldr	r3, [r3, #8]
 80114e6:	f003 030c 	and.w	r3, r3, #12
 80114ea:	2b04      	cmp	r3, #4
 80114ec:	d00c      	beq.n	8011508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80114ee:	4ba0      	ldr	r3, [pc, #640]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 80114f0:	689b      	ldr	r3, [r3, #8]
 80114f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80114f6:	2b08      	cmp	r3, #8
 80114f8:	d112      	bne.n	8011520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80114fa:	4b9d      	ldr	r3, [pc, #628]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011506:	d10b      	bne.n	8011520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011508:	4b99      	ldr	r3, [pc, #612]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011510:	2b00      	cmp	r3, #0
 8011512:	d05b      	beq.n	80115cc <HAL_RCC_OscConfig+0x108>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d157      	bne.n	80115cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801151c:	2301      	movs	r3, #1
 801151e:	e236      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011528:	d106      	bne.n	8011538 <HAL_RCC_OscConfig+0x74>
 801152a:	4b91      	ldr	r3, [pc, #580]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	4a90      	ldr	r2, [pc, #576]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011534:	6013      	str	r3, [r2, #0]
 8011536:	e01d      	b.n	8011574 <HAL_RCC_OscConfig+0xb0>
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011540:	d10c      	bne.n	801155c <HAL_RCC_OscConfig+0x98>
 8011542:	4b8b      	ldr	r3, [pc, #556]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4a8a      	ldr	r2, [pc, #552]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801154c:	6013      	str	r3, [r2, #0]
 801154e:	4b88      	ldr	r3, [pc, #544]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	4a87      	ldr	r2, [pc, #540]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011558:	6013      	str	r3, [r2, #0]
 801155a:	e00b      	b.n	8011574 <HAL_RCC_OscConfig+0xb0>
 801155c:	4b84      	ldr	r3, [pc, #528]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	4a83      	ldr	r2, [pc, #524]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011566:	6013      	str	r3, [r2, #0]
 8011568:	4b81      	ldr	r3, [pc, #516]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	4a80      	ldr	r2, [pc, #512]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 801156e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d013      	beq.n	80115a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801157c:	f7fe fa90 	bl	800faa0 <HAL_GetTick>
 8011580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011582:	e008      	b.n	8011596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011584:	f7fe fa8c 	bl	800faa0 <HAL_GetTick>
 8011588:	4602      	mov	r2, r0
 801158a:	693b      	ldr	r3, [r7, #16]
 801158c:	1ad3      	subs	r3, r2, r3
 801158e:	2b64      	cmp	r3, #100	; 0x64
 8011590:	d901      	bls.n	8011596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8011592:	2303      	movs	r3, #3
 8011594:	e1fb      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011596:	4b76      	ldr	r3, [pc, #472]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d0f0      	beq.n	8011584 <HAL_RCC_OscConfig+0xc0>
 80115a2:	e014      	b.n	80115ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80115a4:	f7fe fa7c 	bl	800faa0 <HAL_GetTick>
 80115a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80115aa:	e008      	b.n	80115be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80115ac:	f7fe fa78 	bl	800faa0 <HAL_GetTick>
 80115b0:	4602      	mov	r2, r0
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	1ad3      	subs	r3, r2, r3
 80115b6:	2b64      	cmp	r3, #100	; 0x64
 80115b8:	d901      	bls.n	80115be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80115ba:	2303      	movs	r3, #3
 80115bc:	e1e7      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80115be:	4b6c      	ldr	r3, [pc, #432]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d1f0      	bne.n	80115ac <HAL_RCC_OscConfig+0xe8>
 80115ca:	e000      	b.n	80115ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80115cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f003 0302 	and.w	r3, r3, #2
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d063      	beq.n	80116a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80115da:	4b65      	ldr	r3, [pc, #404]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	f003 030c 	and.w	r3, r3, #12
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d00b      	beq.n	80115fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80115e6:	4b62      	ldr	r3, [pc, #392]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 80115e8:	689b      	ldr	r3, [r3, #8]
 80115ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80115ee:	2b08      	cmp	r3, #8
 80115f0:	d11c      	bne.n	801162c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80115f2:	4b5f      	ldr	r3, [pc, #380]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d116      	bne.n	801162c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80115fe:	4b5c      	ldr	r3, [pc, #368]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f003 0302 	and.w	r3, r3, #2
 8011606:	2b00      	cmp	r3, #0
 8011608:	d005      	beq.n	8011616 <HAL_RCC_OscConfig+0x152>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	68db      	ldr	r3, [r3, #12]
 801160e:	2b01      	cmp	r3, #1
 8011610:	d001      	beq.n	8011616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011612:	2301      	movs	r3, #1
 8011614:	e1bb      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011616:	4b56      	ldr	r3, [pc, #344]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	691b      	ldr	r3, [r3, #16]
 8011622:	00db      	lsls	r3, r3, #3
 8011624:	4952      	ldr	r1, [pc, #328]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011626:	4313      	orrs	r3, r2
 8011628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801162a:	e03a      	b.n	80116a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d020      	beq.n	8011676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011634:	4b4f      	ldr	r3, [pc, #316]	; (8011774 <HAL_RCC_OscConfig+0x2b0>)
 8011636:	2201      	movs	r2, #1
 8011638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801163a:	f7fe fa31 	bl	800faa0 <HAL_GetTick>
 801163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011640:	e008      	b.n	8011654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011642:	f7fe fa2d 	bl	800faa0 <HAL_GetTick>
 8011646:	4602      	mov	r2, r0
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	1ad3      	subs	r3, r2, r3
 801164c:	2b02      	cmp	r3, #2
 801164e:	d901      	bls.n	8011654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011650:	2303      	movs	r3, #3
 8011652:	e19c      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011654:	4b46      	ldr	r3, [pc, #280]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	f003 0302 	and.w	r3, r3, #2
 801165c:	2b00      	cmp	r3, #0
 801165e:	d0f0      	beq.n	8011642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011660:	4b43      	ldr	r3, [pc, #268]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	00db      	lsls	r3, r3, #3
 801166e:	4940      	ldr	r1, [pc, #256]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011670:	4313      	orrs	r3, r2
 8011672:	600b      	str	r3, [r1, #0]
 8011674:	e015      	b.n	80116a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011676:	4b3f      	ldr	r3, [pc, #252]	; (8011774 <HAL_RCC_OscConfig+0x2b0>)
 8011678:	2200      	movs	r2, #0
 801167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801167c:	f7fe fa10 	bl	800faa0 <HAL_GetTick>
 8011680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011682:	e008      	b.n	8011696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011684:	f7fe fa0c 	bl	800faa0 <HAL_GetTick>
 8011688:	4602      	mov	r2, r0
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	1ad3      	subs	r3, r2, r3
 801168e:	2b02      	cmp	r3, #2
 8011690:	d901      	bls.n	8011696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8011692:	2303      	movs	r3, #3
 8011694:	e17b      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011696:	4b36      	ldr	r3, [pc, #216]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f003 0302 	and.w	r3, r3, #2
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d1f0      	bne.n	8011684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	f003 0308 	and.w	r3, r3, #8
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d030      	beq.n	8011710 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	695b      	ldr	r3, [r3, #20]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d016      	beq.n	80116e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80116b6:	4b30      	ldr	r3, [pc, #192]	; (8011778 <HAL_RCC_OscConfig+0x2b4>)
 80116b8:	2201      	movs	r2, #1
 80116ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116bc:	f7fe f9f0 	bl	800faa0 <HAL_GetTick>
 80116c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80116c2:	e008      	b.n	80116d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80116c4:	f7fe f9ec 	bl	800faa0 <HAL_GetTick>
 80116c8:	4602      	mov	r2, r0
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	1ad3      	subs	r3, r2, r3
 80116ce:	2b02      	cmp	r3, #2
 80116d0:	d901      	bls.n	80116d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80116d2:	2303      	movs	r3, #3
 80116d4:	e15b      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80116d6:	4b26      	ldr	r3, [pc, #152]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 80116d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116da:	f003 0302 	and.w	r3, r3, #2
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d0f0      	beq.n	80116c4 <HAL_RCC_OscConfig+0x200>
 80116e2:	e015      	b.n	8011710 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80116e4:	4b24      	ldr	r3, [pc, #144]	; (8011778 <HAL_RCC_OscConfig+0x2b4>)
 80116e6:	2200      	movs	r2, #0
 80116e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80116ea:	f7fe f9d9 	bl	800faa0 <HAL_GetTick>
 80116ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80116f0:	e008      	b.n	8011704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80116f2:	f7fe f9d5 	bl	800faa0 <HAL_GetTick>
 80116f6:	4602      	mov	r2, r0
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	1ad3      	subs	r3, r2, r3
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	d901      	bls.n	8011704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8011700:	2303      	movs	r3, #3
 8011702:	e144      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011704:	4b1a      	ldr	r3, [pc, #104]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011708:	f003 0302 	and.w	r3, r3, #2
 801170c:	2b00      	cmp	r3, #0
 801170e:	d1f0      	bne.n	80116f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	f003 0304 	and.w	r3, r3, #4
 8011718:	2b00      	cmp	r3, #0
 801171a:	f000 80a0 	beq.w	801185e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801171e:	2300      	movs	r3, #0
 8011720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011722:	4b13      	ldr	r3, [pc, #76]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801172a:	2b00      	cmp	r3, #0
 801172c:	d10f      	bne.n	801174e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801172e:	2300      	movs	r3, #0
 8011730:	60bb      	str	r3, [r7, #8]
 8011732:	4b0f      	ldr	r3, [pc, #60]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011736:	4a0e      	ldr	r2, [pc, #56]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801173c:	6413      	str	r3, [r2, #64]	; 0x40
 801173e:	4b0c      	ldr	r3, [pc, #48]	; (8011770 <HAL_RCC_OscConfig+0x2ac>)
 8011740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011746:	60bb      	str	r3, [r7, #8]
 8011748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801174a:	2301      	movs	r3, #1
 801174c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801174e:	4b0b      	ldr	r3, [pc, #44]	; (801177c <HAL_RCC_OscConfig+0x2b8>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011756:	2b00      	cmp	r3, #0
 8011758:	d121      	bne.n	801179e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801175a:	4b08      	ldr	r3, [pc, #32]	; (801177c <HAL_RCC_OscConfig+0x2b8>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	4a07      	ldr	r2, [pc, #28]	; (801177c <HAL_RCC_OscConfig+0x2b8>)
 8011760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011766:	f7fe f99b 	bl	800faa0 <HAL_GetTick>
 801176a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801176c:	e011      	b.n	8011792 <HAL_RCC_OscConfig+0x2ce>
 801176e:	bf00      	nop
 8011770:	40023800 	.word	0x40023800
 8011774:	42470000 	.word	0x42470000
 8011778:	42470e80 	.word	0x42470e80
 801177c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011780:	f7fe f98e 	bl	800faa0 <HAL_GetTick>
 8011784:	4602      	mov	r2, r0
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	1ad3      	subs	r3, r2, r3
 801178a:	2b02      	cmp	r3, #2
 801178c:	d901      	bls.n	8011792 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801178e:	2303      	movs	r3, #3
 8011790:	e0fd      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011792:	4b81      	ldr	r3, [pc, #516]	; (8011998 <HAL_RCC_OscConfig+0x4d4>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801179a:	2b00      	cmp	r3, #0
 801179c:	d0f0      	beq.n	8011780 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	689b      	ldr	r3, [r3, #8]
 80117a2:	2b01      	cmp	r3, #1
 80117a4:	d106      	bne.n	80117b4 <HAL_RCC_OscConfig+0x2f0>
 80117a6:	4b7d      	ldr	r3, [pc, #500]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80117a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117aa:	4a7c      	ldr	r2, [pc, #496]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80117ac:	f043 0301 	orr.w	r3, r3, #1
 80117b0:	6713      	str	r3, [r2, #112]	; 0x70
 80117b2:	e01c      	b.n	80117ee <HAL_RCC_OscConfig+0x32a>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	689b      	ldr	r3, [r3, #8]
 80117b8:	2b05      	cmp	r3, #5
 80117ba:	d10c      	bne.n	80117d6 <HAL_RCC_OscConfig+0x312>
 80117bc:	4b77      	ldr	r3, [pc, #476]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80117be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117c0:	4a76      	ldr	r2, [pc, #472]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80117c2:	f043 0304 	orr.w	r3, r3, #4
 80117c6:	6713      	str	r3, [r2, #112]	; 0x70
 80117c8:	4b74      	ldr	r3, [pc, #464]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80117ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117cc:	4a73      	ldr	r2, [pc, #460]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80117ce:	f043 0301 	orr.w	r3, r3, #1
 80117d2:	6713      	str	r3, [r2, #112]	; 0x70
 80117d4:	e00b      	b.n	80117ee <HAL_RCC_OscConfig+0x32a>
 80117d6:	4b71      	ldr	r3, [pc, #452]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80117d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117da:	4a70      	ldr	r2, [pc, #448]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80117dc:	f023 0301 	bic.w	r3, r3, #1
 80117e0:	6713      	str	r3, [r2, #112]	; 0x70
 80117e2:	4b6e      	ldr	r3, [pc, #440]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80117e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117e6:	4a6d      	ldr	r2, [pc, #436]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80117e8:	f023 0304 	bic.w	r3, r3, #4
 80117ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	689b      	ldr	r3, [r3, #8]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d015      	beq.n	8011822 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80117f6:	f7fe f953 	bl	800faa0 <HAL_GetTick>
 80117fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80117fc:	e00a      	b.n	8011814 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80117fe:	f7fe f94f 	bl	800faa0 <HAL_GetTick>
 8011802:	4602      	mov	r2, r0
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	1ad3      	subs	r3, r2, r3
 8011808:	f241 3288 	movw	r2, #5000	; 0x1388
 801180c:	4293      	cmp	r3, r2
 801180e:	d901      	bls.n	8011814 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8011810:	2303      	movs	r3, #3
 8011812:	e0bc      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011814:	4b61      	ldr	r3, [pc, #388]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 8011816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011818:	f003 0302 	and.w	r3, r3, #2
 801181c:	2b00      	cmp	r3, #0
 801181e:	d0ee      	beq.n	80117fe <HAL_RCC_OscConfig+0x33a>
 8011820:	e014      	b.n	801184c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011822:	f7fe f93d 	bl	800faa0 <HAL_GetTick>
 8011826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011828:	e00a      	b.n	8011840 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801182a:	f7fe f939 	bl	800faa0 <HAL_GetTick>
 801182e:	4602      	mov	r2, r0
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	1ad3      	subs	r3, r2, r3
 8011834:	f241 3288 	movw	r2, #5000	; 0x1388
 8011838:	4293      	cmp	r3, r2
 801183a:	d901      	bls.n	8011840 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801183c:	2303      	movs	r3, #3
 801183e:	e0a6      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011840:	4b56      	ldr	r3, [pc, #344]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 8011842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011844:	f003 0302 	and.w	r3, r3, #2
 8011848:	2b00      	cmp	r3, #0
 801184a:	d1ee      	bne.n	801182a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801184c:	7dfb      	ldrb	r3, [r7, #23]
 801184e:	2b01      	cmp	r3, #1
 8011850:	d105      	bne.n	801185e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011852:	4b52      	ldr	r3, [pc, #328]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 8011854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011856:	4a51      	ldr	r2, [pc, #324]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 8011858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801185c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	699b      	ldr	r3, [r3, #24]
 8011862:	2b00      	cmp	r3, #0
 8011864:	f000 8092 	beq.w	801198c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011868:	4b4c      	ldr	r3, [pc, #304]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	f003 030c 	and.w	r3, r3, #12
 8011870:	2b08      	cmp	r3, #8
 8011872:	d05c      	beq.n	801192e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	699b      	ldr	r3, [r3, #24]
 8011878:	2b02      	cmp	r3, #2
 801187a:	d141      	bne.n	8011900 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801187c:	4b48      	ldr	r3, [pc, #288]	; (80119a0 <HAL_RCC_OscConfig+0x4dc>)
 801187e:	2200      	movs	r2, #0
 8011880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011882:	f7fe f90d 	bl	800faa0 <HAL_GetTick>
 8011886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011888:	e008      	b.n	801189c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801188a:	f7fe f909 	bl	800faa0 <HAL_GetTick>
 801188e:	4602      	mov	r2, r0
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	1ad3      	subs	r3, r2, r3
 8011894:	2b02      	cmp	r3, #2
 8011896:	d901      	bls.n	801189c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8011898:	2303      	movs	r3, #3
 801189a:	e078      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801189c:	4b3f      	ldr	r3, [pc, #252]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d1f0      	bne.n	801188a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	69da      	ldr	r2, [r3, #28]
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6a1b      	ldr	r3, [r3, #32]
 80118b0:	431a      	orrs	r2, r3
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b6:	019b      	lsls	r3, r3, #6
 80118b8:	431a      	orrs	r2, r3
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118be:	085b      	lsrs	r3, r3, #1
 80118c0:	3b01      	subs	r3, #1
 80118c2:	041b      	lsls	r3, r3, #16
 80118c4:	431a      	orrs	r2, r3
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ca:	061b      	lsls	r3, r3, #24
 80118cc:	4933      	ldr	r1, [pc, #204]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80118ce:	4313      	orrs	r3, r2
 80118d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80118d2:	4b33      	ldr	r3, [pc, #204]	; (80119a0 <HAL_RCC_OscConfig+0x4dc>)
 80118d4:	2201      	movs	r2, #1
 80118d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80118d8:	f7fe f8e2 	bl	800faa0 <HAL_GetTick>
 80118dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80118de:	e008      	b.n	80118f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80118e0:	f7fe f8de 	bl	800faa0 <HAL_GetTick>
 80118e4:	4602      	mov	r2, r0
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	1ad3      	subs	r3, r2, r3
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	d901      	bls.n	80118f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80118ee:	2303      	movs	r3, #3
 80118f0:	e04d      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80118f2:	4b2a      	ldr	r3, [pc, #168]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d0f0      	beq.n	80118e0 <HAL_RCC_OscConfig+0x41c>
 80118fe:	e045      	b.n	801198c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011900:	4b27      	ldr	r3, [pc, #156]	; (80119a0 <HAL_RCC_OscConfig+0x4dc>)
 8011902:	2200      	movs	r2, #0
 8011904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011906:	f7fe f8cb 	bl	800faa0 <HAL_GetTick>
 801190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801190c:	e008      	b.n	8011920 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801190e:	f7fe f8c7 	bl	800faa0 <HAL_GetTick>
 8011912:	4602      	mov	r2, r0
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	1ad3      	subs	r3, r2, r3
 8011918:	2b02      	cmp	r3, #2
 801191a:	d901      	bls.n	8011920 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801191c:	2303      	movs	r3, #3
 801191e:	e036      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011920:	4b1e      	ldr	r3, [pc, #120]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011928:	2b00      	cmp	r3, #0
 801192a:	d1f0      	bne.n	801190e <HAL_RCC_OscConfig+0x44a>
 801192c:	e02e      	b.n	801198c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	699b      	ldr	r3, [r3, #24]
 8011932:	2b01      	cmp	r3, #1
 8011934:	d101      	bne.n	801193a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8011936:	2301      	movs	r3, #1
 8011938:	e029      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801193a:	4b18      	ldr	r3, [pc, #96]	; (801199c <HAL_RCC_OscConfig+0x4d8>)
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	69db      	ldr	r3, [r3, #28]
 801194a:	429a      	cmp	r2, r3
 801194c:	d11c      	bne.n	8011988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011958:	429a      	cmp	r2, r3
 801195a:	d115      	bne.n	8011988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801195c:	68fa      	ldr	r2, [r7, #12]
 801195e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011962:	4013      	ands	r3, r2
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011968:	4293      	cmp	r3, r2
 801196a:	d10d      	bne.n	8011988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8011976:	429a      	cmp	r2, r3
 8011978:	d106      	bne.n	8011988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8011984:	429a      	cmp	r2, r3
 8011986:	d001      	beq.n	801198c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8011988:	2301      	movs	r3, #1
 801198a:	e000      	b.n	801198e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801198c:	2300      	movs	r3, #0
}
 801198e:	4618      	mov	r0, r3
 8011990:	3718      	adds	r7, #24
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	40007000 	.word	0x40007000
 801199c:	40023800 	.word	0x40023800
 80119a0:	42470060 	.word	0x42470060

080119a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d101      	bne.n	80119b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80119b4:	2301      	movs	r3, #1
 80119b6:	e0cc      	b.n	8011b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80119b8:	4b68      	ldr	r3, [pc, #416]	; (8011b5c <HAL_RCC_ClockConfig+0x1b8>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f003 030f 	and.w	r3, r3, #15
 80119c0:	683a      	ldr	r2, [r7, #0]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d90c      	bls.n	80119e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80119c6:	4b65      	ldr	r3, [pc, #404]	; (8011b5c <HAL_RCC_ClockConfig+0x1b8>)
 80119c8:	683a      	ldr	r2, [r7, #0]
 80119ca:	b2d2      	uxtb	r2, r2
 80119cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80119ce:	4b63      	ldr	r3, [pc, #396]	; (8011b5c <HAL_RCC_ClockConfig+0x1b8>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f003 030f 	and.w	r3, r3, #15
 80119d6:	683a      	ldr	r2, [r7, #0]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d001      	beq.n	80119e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80119dc:	2301      	movs	r3, #1
 80119de:	e0b8      	b.n	8011b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	f003 0302 	and.w	r3, r3, #2
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d020      	beq.n	8011a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f003 0304 	and.w	r3, r3, #4
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d005      	beq.n	8011a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80119f8:	4b59      	ldr	r3, [pc, #356]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 80119fa:	689b      	ldr	r3, [r3, #8]
 80119fc:	4a58      	ldr	r2, [pc, #352]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 80119fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	f003 0308 	and.w	r3, r3, #8
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d005      	beq.n	8011a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011a10:	4b53      	ldr	r3, [pc, #332]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011a12:	689b      	ldr	r3, [r3, #8]
 8011a14:	4a52      	ldr	r2, [pc, #328]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011a1c:	4b50      	ldr	r3, [pc, #320]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011a1e:	689b      	ldr	r3, [r3, #8]
 8011a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	689b      	ldr	r3, [r3, #8]
 8011a28:	494d      	ldr	r1, [pc, #308]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	f003 0301 	and.w	r3, r3, #1
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d044      	beq.n	8011ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	2b01      	cmp	r3, #1
 8011a40:	d107      	bne.n	8011a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a42:	4b47      	ldr	r3, [pc, #284]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d119      	bne.n	8011a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011a4e:	2301      	movs	r3, #1
 8011a50:	e07f      	b.n	8011b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	685b      	ldr	r3, [r3, #4]
 8011a56:	2b02      	cmp	r3, #2
 8011a58:	d003      	beq.n	8011a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011a5e:	2b03      	cmp	r3, #3
 8011a60:	d107      	bne.n	8011a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011a62:	4b3f      	ldr	r3, [pc, #252]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d109      	bne.n	8011a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e06f      	b.n	8011b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011a72:	4b3b      	ldr	r3, [pc, #236]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	f003 0302 	and.w	r3, r3, #2
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d101      	bne.n	8011a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011a7e:	2301      	movs	r3, #1
 8011a80:	e067      	b.n	8011b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011a82:	4b37      	ldr	r3, [pc, #220]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011a84:	689b      	ldr	r3, [r3, #8]
 8011a86:	f023 0203 	bic.w	r2, r3, #3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	4934      	ldr	r1, [pc, #208]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011a90:	4313      	orrs	r3, r2
 8011a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011a94:	f7fe f804 	bl	800faa0 <HAL_GetTick>
 8011a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011a9a:	e00a      	b.n	8011ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a9c:	f7fe f800 	bl	800faa0 <HAL_GetTick>
 8011aa0:	4602      	mov	r2, r0
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	1ad3      	subs	r3, r2, r3
 8011aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	d901      	bls.n	8011ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011aae:	2303      	movs	r3, #3
 8011ab0:	e04f      	b.n	8011b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011ab2:	4b2b      	ldr	r3, [pc, #172]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011ab4:	689b      	ldr	r3, [r3, #8]
 8011ab6:	f003 020c 	and.w	r2, r3, #12
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d1eb      	bne.n	8011a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011ac4:	4b25      	ldr	r3, [pc, #148]	; (8011b5c <HAL_RCC_ClockConfig+0x1b8>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	f003 030f 	and.w	r3, r3, #15
 8011acc:	683a      	ldr	r2, [r7, #0]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d20c      	bcs.n	8011aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011ad2:	4b22      	ldr	r3, [pc, #136]	; (8011b5c <HAL_RCC_ClockConfig+0x1b8>)
 8011ad4:	683a      	ldr	r2, [r7, #0]
 8011ad6:	b2d2      	uxtb	r2, r2
 8011ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011ada:	4b20      	ldr	r3, [pc, #128]	; (8011b5c <HAL_RCC_ClockConfig+0x1b8>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	f003 030f 	and.w	r3, r3, #15
 8011ae2:	683a      	ldr	r2, [r7, #0]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d001      	beq.n	8011aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011ae8:	2301      	movs	r3, #1
 8011aea:	e032      	b.n	8011b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	f003 0304 	and.w	r3, r3, #4
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d008      	beq.n	8011b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011af8:	4b19      	ldr	r3, [pc, #100]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011afa:	689b      	ldr	r3, [r3, #8]
 8011afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	4916      	ldr	r1, [pc, #88]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011b06:	4313      	orrs	r3, r2
 8011b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	f003 0308 	and.w	r3, r3, #8
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d009      	beq.n	8011b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011b16:	4b12      	ldr	r3, [pc, #72]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011b18:	689b      	ldr	r3, [r3, #8]
 8011b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	691b      	ldr	r3, [r3, #16]
 8011b22:	00db      	lsls	r3, r3, #3
 8011b24:	490e      	ldr	r1, [pc, #56]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011b26:	4313      	orrs	r3, r2
 8011b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011b2a:	f000 f821 	bl	8011b70 <HAL_RCC_GetSysClockFreq>
 8011b2e:	4601      	mov	r1, r0
 8011b30:	4b0b      	ldr	r3, [pc, #44]	; (8011b60 <HAL_RCC_ClockConfig+0x1bc>)
 8011b32:	689b      	ldr	r3, [r3, #8]
 8011b34:	091b      	lsrs	r3, r3, #4
 8011b36:	f003 030f 	and.w	r3, r3, #15
 8011b3a:	4a0a      	ldr	r2, [pc, #40]	; (8011b64 <HAL_RCC_ClockConfig+0x1c0>)
 8011b3c:	5cd3      	ldrb	r3, [r2, r3]
 8011b3e:	fa21 f303 	lsr.w	r3, r1, r3
 8011b42:	4a09      	ldr	r2, [pc, #36]	; (8011b68 <HAL_RCC_ClockConfig+0x1c4>)
 8011b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011b46:	4b09      	ldr	r3, [pc, #36]	; (8011b6c <HAL_RCC_ClockConfig+0x1c8>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fd ff64 	bl	800fa18 <HAL_InitTick>

  return HAL_OK;
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3710      	adds	r7, #16
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	40023c00 	.word	0x40023c00
 8011b60:	40023800 	.word	0x40023800
 8011b64:	0801a29c 	.word	0x0801a29c
 8011b68:	20000028 	.word	0x20000028
 8011b6c:	20000034 	.word	0x20000034

08011b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b72:	b085      	sub	sp, #20
 8011b74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011b76:	2300      	movs	r3, #0
 8011b78:	607b      	str	r3, [r7, #4]
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	60fb      	str	r3, [r7, #12]
 8011b7e:	2300      	movs	r3, #0
 8011b80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8011b82:	2300      	movs	r3, #0
 8011b84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011b86:	4b63      	ldr	r3, [pc, #396]	; (8011d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011b88:	689b      	ldr	r3, [r3, #8]
 8011b8a:	f003 030c 	and.w	r3, r3, #12
 8011b8e:	2b04      	cmp	r3, #4
 8011b90:	d007      	beq.n	8011ba2 <HAL_RCC_GetSysClockFreq+0x32>
 8011b92:	2b08      	cmp	r3, #8
 8011b94:	d008      	beq.n	8011ba8 <HAL_RCC_GetSysClockFreq+0x38>
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	f040 80b4 	bne.w	8011d04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011b9c:	4b5e      	ldr	r3, [pc, #376]	; (8011d18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8011b9e:	60bb      	str	r3, [r7, #8]
       break;
 8011ba0:	e0b3      	b.n	8011d0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011ba2:	4b5e      	ldr	r3, [pc, #376]	; (8011d1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8011ba4:	60bb      	str	r3, [r7, #8]
      break;
 8011ba6:	e0b0      	b.n	8011d0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011ba8:	4b5a      	ldr	r3, [pc, #360]	; (8011d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011baa:	685b      	ldr	r3, [r3, #4]
 8011bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011bb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011bb2:	4b58      	ldr	r3, [pc, #352]	; (8011d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011bb4:	685b      	ldr	r3, [r3, #4]
 8011bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d04a      	beq.n	8011c54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011bbe:	4b55      	ldr	r3, [pc, #340]	; (8011d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	099b      	lsrs	r3, r3, #6
 8011bc4:	f04f 0400 	mov.w	r4, #0
 8011bc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011bcc:	f04f 0200 	mov.w	r2, #0
 8011bd0:	ea03 0501 	and.w	r5, r3, r1
 8011bd4:	ea04 0602 	and.w	r6, r4, r2
 8011bd8:	4629      	mov	r1, r5
 8011bda:	4632      	mov	r2, r6
 8011bdc:	f04f 0300 	mov.w	r3, #0
 8011be0:	f04f 0400 	mov.w	r4, #0
 8011be4:	0154      	lsls	r4, r2, #5
 8011be6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8011bea:	014b      	lsls	r3, r1, #5
 8011bec:	4619      	mov	r1, r3
 8011bee:	4622      	mov	r2, r4
 8011bf0:	1b49      	subs	r1, r1, r5
 8011bf2:	eb62 0206 	sbc.w	r2, r2, r6
 8011bf6:	f04f 0300 	mov.w	r3, #0
 8011bfa:	f04f 0400 	mov.w	r4, #0
 8011bfe:	0194      	lsls	r4, r2, #6
 8011c00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8011c04:	018b      	lsls	r3, r1, #6
 8011c06:	1a5b      	subs	r3, r3, r1
 8011c08:	eb64 0402 	sbc.w	r4, r4, r2
 8011c0c:	f04f 0100 	mov.w	r1, #0
 8011c10:	f04f 0200 	mov.w	r2, #0
 8011c14:	00e2      	lsls	r2, r4, #3
 8011c16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8011c1a:	00d9      	lsls	r1, r3, #3
 8011c1c:	460b      	mov	r3, r1
 8011c1e:	4614      	mov	r4, r2
 8011c20:	195b      	adds	r3, r3, r5
 8011c22:	eb44 0406 	adc.w	r4, r4, r6
 8011c26:	f04f 0100 	mov.w	r1, #0
 8011c2a:	f04f 0200 	mov.w	r2, #0
 8011c2e:	0262      	lsls	r2, r4, #9
 8011c30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8011c34:	0259      	lsls	r1, r3, #9
 8011c36:	460b      	mov	r3, r1
 8011c38:	4614      	mov	r4, r2
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f04f 0400 	mov.w	r4, #0
 8011c44:	461a      	mov	r2, r3
 8011c46:	4623      	mov	r3, r4
 8011c48:	f7f6 ff56 	bl	8008af8 <__aeabi_uldivmod>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	460c      	mov	r4, r1
 8011c50:	60fb      	str	r3, [r7, #12]
 8011c52:	e049      	b.n	8011ce8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011c54:	4b2f      	ldr	r3, [pc, #188]	; (8011d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	099b      	lsrs	r3, r3, #6
 8011c5a:	f04f 0400 	mov.w	r4, #0
 8011c5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011c62:	f04f 0200 	mov.w	r2, #0
 8011c66:	ea03 0501 	and.w	r5, r3, r1
 8011c6a:	ea04 0602 	and.w	r6, r4, r2
 8011c6e:	4629      	mov	r1, r5
 8011c70:	4632      	mov	r2, r6
 8011c72:	f04f 0300 	mov.w	r3, #0
 8011c76:	f04f 0400 	mov.w	r4, #0
 8011c7a:	0154      	lsls	r4, r2, #5
 8011c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8011c80:	014b      	lsls	r3, r1, #5
 8011c82:	4619      	mov	r1, r3
 8011c84:	4622      	mov	r2, r4
 8011c86:	1b49      	subs	r1, r1, r5
 8011c88:	eb62 0206 	sbc.w	r2, r2, r6
 8011c8c:	f04f 0300 	mov.w	r3, #0
 8011c90:	f04f 0400 	mov.w	r4, #0
 8011c94:	0194      	lsls	r4, r2, #6
 8011c96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8011c9a:	018b      	lsls	r3, r1, #6
 8011c9c:	1a5b      	subs	r3, r3, r1
 8011c9e:	eb64 0402 	sbc.w	r4, r4, r2
 8011ca2:	f04f 0100 	mov.w	r1, #0
 8011ca6:	f04f 0200 	mov.w	r2, #0
 8011caa:	00e2      	lsls	r2, r4, #3
 8011cac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8011cb0:	00d9      	lsls	r1, r3, #3
 8011cb2:	460b      	mov	r3, r1
 8011cb4:	4614      	mov	r4, r2
 8011cb6:	195b      	adds	r3, r3, r5
 8011cb8:	eb44 0406 	adc.w	r4, r4, r6
 8011cbc:	f04f 0100 	mov.w	r1, #0
 8011cc0:	f04f 0200 	mov.w	r2, #0
 8011cc4:	02a2      	lsls	r2, r4, #10
 8011cc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8011cca:	0299      	lsls	r1, r3, #10
 8011ccc:	460b      	mov	r3, r1
 8011cce:	4614      	mov	r4, r2
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	4621      	mov	r1, r4
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f04f 0400 	mov.w	r4, #0
 8011cda:	461a      	mov	r2, r3
 8011cdc:	4623      	mov	r3, r4
 8011cde:	f7f6 ff0b 	bl	8008af8 <__aeabi_uldivmod>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	460c      	mov	r4, r1
 8011ce6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011ce8:	4b0a      	ldr	r3, [pc, #40]	; (8011d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011cea:	685b      	ldr	r3, [r3, #4]
 8011cec:	0c1b      	lsrs	r3, r3, #16
 8011cee:	f003 0303 	and.w	r3, r3, #3
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	005b      	lsls	r3, r3, #1
 8011cf6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8011cf8:	68fa      	ldr	r2, [r7, #12]
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d00:	60bb      	str	r3, [r7, #8]
      break;
 8011d02:	e002      	b.n	8011d0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011d04:	4b04      	ldr	r3, [pc, #16]	; (8011d18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8011d06:	60bb      	str	r3, [r7, #8]
      break;
 8011d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011d0a:	68bb      	ldr	r3, [r7, #8]
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3714      	adds	r7, #20
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d14:	40023800 	.word	0x40023800
 8011d18:	00f42400 	.word	0x00f42400
 8011d1c:	007a1200 	.word	0x007a1200

08011d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011d20:	b480      	push	{r7}
 8011d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011d24:	4b03      	ldr	r3, [pc, #12]	; (8011d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8011d26:	681b      	ldr	r3, [r3, #0]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d30:	4770      	bx	lr
 8011d32:	bf00      	nop
 8011d34:	20000028 	.word	0x20000028

08011d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011d3c:	f7ff fff0 	bl	8011d20 <HAL_RCC_GetHCLKFreq>
 8011d40:	4601      	mov	r1, r0
 8011d42:	4b05      	ldr	r3, [pc, #20]	; (8011d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011d44:	689b      	ldr	r3, [r3, #8]
 8011d46:	0a9b      	lsrs	r3, r3, #10
 8011d48:	f003 0307 	and.w	r3, r3, #7
 8011d4c:	4a03      	ldr	r2, [pc, #12]	; (8011d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8011d4e:	5cd3      	ldrb	r3, [r2, r3]
 8011d50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	40023800 	.word	0x40023800
 8011d5c:	0801a2ac 	.word	0x0801a2ac

08011d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011d64:	f7ff ffdc 	bl	8011d20 <HAL_RCC_GetHCLKFreq>
 8011d68:	4601      	mov	r1, r0
 8011d6a:	4b05      	ldr	r3, [pc, #20]	; (8011d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011d6c:	689b      	ldr	r3, [r3, #8]
 8011d6e:	0b5b      	lsrs	r3, r3, #13
 8011d70:	f003 0307 	and.w	r3, r3, #7
 8011d74:	4a03      	ldr	r2, [pc, #12]	; (8011d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011d76:	5cd3      	ldrb	r3, [r2, r3]
 8011d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	40023800 	.word	0x40023800
 8011d84:	0801a2ac 	.word	0x0801a2ac

08011d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d101      	bne.n	8011d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011d96:	2301      	movs	r3, #1
 8011d98:	e056      	b.n	8011e48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d106      	bne.n	8011dba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2200      	movs	r2, #0
 8011db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f7fb fc19 	bl	800d5ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2202      	movs	r2, #2
 8011dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	681a      	ldr	r2, [r3, #0]
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011dd0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	685a      	ldr	r2, [r3, #4]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	689b      	ldr	r3, [r3, #8]
 8011dda:	431a      	orrs	r2, r3
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	431a      	orrs	r2, r3
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	691b      	ldr	r3, [r3, #16]
 8011de6:	431a      	orrs	r2, r3
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	695b      	ldr	r3, [r3, #20]
 8011dec:	431a      	orrs	r2, r3
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	699b      	ldr	r3, [r3, #24]
 8011df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011df6:	431a      	orrs	r2, r3
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	69db      	ldr	r3, [r3, #28]
 8011dfc:	431a      	orrs	r2, r3
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	6a1b      	ldr	r3, [r3, #32]
 8011e02:	ea42 0103 	orr.w	r1, r2, r3
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	430a      	orrs	r2, r1
 8011e10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	699b      	ldr	r3, [r3, #24]
 8011e16:	0c1b      	lsrs	r3, r3, #16
 8011e18:	f003 0104 	and.w	r1, r3, #4
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	430a      	orrs	r2, r1
 8011e26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	69da      	ldr	r2, [r3, #28]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011e36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2201      	movs	r2, #1
 8011e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8011e46:	2300      	movs	r3, #0
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3708      	adds	r7, #8
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b088      	sub	sp, #32
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	60b9      	str	r1, [r7, #8]
 8011e5a:	603b      	str	r3, [r7, #0]
 8011e5c:	4613      	mov	r3, r2
 8011e5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011e60:	2300      	movs	r3, #0
 8011e62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011e6a:	2b01      	cmp	r3, #1
 8011e6c:	d101      	bne.n	8011e72 <HAL_SPI_Transmit+0x22>
 8011e6e:	2302      	movs	r3, #2
 8011e70:	e11e      	b.n	80120b0 <HAL_SPI_Transmit+0x260>
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	2201      	movs	r2, #1
 8011e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011e7a:	f7fd fe11 	bl	800faa0 <HAL_GetTick>
 8011e7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8011e80:	88fb      	ldrh	r3, [r7, #6]
 8011e82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d002      	beq.n	8011e96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011e90:	2302      	movs	r3, #2
 8011e92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011e94:	e103      	b.n	801209e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d002      	beq.n	8011ea2 <HAL_SPI_Transmit+0x52>
 8011e9c:	88fb      	ldrh	r3, [r7, #6]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d102      	bne.n	8011ea8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011ea6:	e0fa      	b.n	801209e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	2203      	movs	r2, #3
 8011eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	68ba      	ldr	r2, [r7, #8]
 8011eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	88fa      	ldrh	r2, [r7, #6]
 8011ec0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	88fa      	ldrh	r2, [r7, #6]
 8011ec6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	2200      	movs	r2, #0
 8011ede:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011eee:	d107      	bne.n	8011f00 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	681a      	ldr	r2, [r3, #0]
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011efe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f0a:	2b40      	cmp	r3, #64	; 0x40
 8011f0c:	d007      	beq.n	8011f1e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	681a      	ldr	r2, [r3, #0]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	68db      	ldr	r3, [r3, #12]
 8011f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f26:	d14b      	bne.n	8011fc0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d002      	beq.n	8011f36 <HAL_SPI_Transmit+0xe6>
 8011f30:	8afb      	ldrh	r3, [r7, #22]
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	d13e      	bne.n	8011fb4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f3a:	881a      	ldrh	r2, [r3, #0]
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f46:	1c9a      	adds	r2, r3, #2
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	3b01      	subs	r3, #1
 8011f54:	b29a      	uxth	r2, r3
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011f5a:	e02b      	b.n	8011fb4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	689b      	ldr	r3, [r3, #8]
 8011f62:	f003 0302 	and.w	r3, r3, #2
 8011f66:	2b02      	cmp	r3, #2
 8011f68:	d112      	bne.n	8011f90 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f6e:	881a      	ldrh	r2, [r3, #0]
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f7a:	1c9a      	adds	r2, r3, #2
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011f84:	b29b      	uxth	r3, r3
 8011f86:	3b01      	subs	r3, #1
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8011f8e:	e011      	b.n	8011fb4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011f90:	f7fd fd86 	bl	800faa0 <HAL_GetTick>
 8011f94:	4602      	mov	r2, r0
 8011f96:	69bb      	ldr	r3, [r7, #24]
 8011f98:	1ad3      	subs	r3, r2, r3
 8011f9a:	683a      	ldr	r2, [r7, #0]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d803      	bhi.n	8011fa8 <HAL_SPI_Transmit+0x158>
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fa6:	d102      	bne.n	8011fae <HAL_SPI_Transmit+0x15e>
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d102      	bne.n	8011fb4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8011fae:	2303      	movs	r3, #3
 8011fb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011fb2:	e074      	b.n	801209e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d1ce      	bne.n	8011f5c <HAL_SPI_Transmit+0x10c>
 8011fbe:	e04c      	b.n	801205a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	685b      	ldr	r3, [r3, #4]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d002      	beq.n	8011fce <HAL_SPI_Transmit+0x17e>
 8011fc8:	8afb      	ldrh	r3, [r7, #22]
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	d140      	bne.n	8012050 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	330c      	adds	r3, #12
 8011fd8:	7812      	ldrb	r2, [r2, #0]
 8011fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fe0:	1c5a      	adds	r2, r3, #1
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	3b01      	subs	r3, #1
 8011fee:	b29a      	uxth	r2, r3
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8011ff4:	e02c      	b.n	8012050 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	689b      	ldr	r3, [r3, #8]
 8011ffc:	f003 0302 	and.w	r3, r3, #2
 8012000:	2b02      	cmp	r3, #2
 8012002:	d113      	bne.n	801202c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	330c      	adds	r3, #12
 801200e:	7812      	ldrb	r2, [r2, #0]
 8012010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012016:	1c5a      	adds	r2, r3, #1
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012020:	b29b      	uxth	r3, r3
 8012022:	3b01      	subs	r3, #1
 8012024:	b29a      	uxth	r2, r3
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	86da      	strh	r2, [r3, #54]	; 0x36
 801202a:	e011      	b.n	8012050 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801202c:	f7fd fd38 	bl	800faa0 <HAL_GetTick>
 8012030:	4602      	mov	r2, r0
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	1ad3      	subs	r3, r2, r3
 8012036:	683a      	ldr	r2, [r7, #0]
 8012038:	429a      	cmp	r2, r3
 801203a:	d803      	bhi.n	8012044 <HAL_SPI_Transmit+0x1f4>
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012042:	d102      	bne.n	801204a <HAL_SPI_Transmit+0x1fa>
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d102      	bne.n	8012050 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 801204a:	2303      	movs	r3, #3
 801204c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801204e:	e026      	b.n	801209e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012054:	b29b      	uxth	r3, r3
 8012056:	2b00      	cmp	r3, #0
 8012058:	d1cd      	bne.n	8011ff6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801205a:	69ba      	ldr	r2, [r7, #24]
 801205c:	6839      	ldr	r1, [r7, #0]
 801205e:	68f8      	ldr	r0, [r7, #12]
 8012060:	f000 fba4 	bl	80127ac <SPI_EndRxTxTransaction>
 8012064:	4603      	mov	r3, r0
 8012066:	2b00      	cmp	r3, #0
 8012068:	d002      	beq.n	8012070 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2220      	movs	r2, #32
 801206e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	689b      	ldr	r3, [r3, #8]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d10a      	bne.n	801208e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012078:	2300      	movs	r3, #0
 801207a:	613b      	str	r3, [r7, #16]
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	68db      	ldr	r3, [r3, #12]
 8012082:	613b      	str	r3, [r7, #16]
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	689b      	ldr	r3, [r3, #8]
 801208a:	613b      	str	r3, [r7, #16]
 801208c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012092:	2b00      	cmp	r3, #0
 8012094:	d002      	beq.n	801209c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8012096:	2301      	movs	r3, #1
 8012098:	77fb      	strb	r3, [r7, #31]
 801209a:	e000      	b.n	801209e <HAL_SPI_Transmit+0x24e>
  }

error:
 801209c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	2201      	movs	r2, #1
 80120a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	2200      	movs	r2, #0
 80120aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80120ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3720      	adds	r7, #32
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b088      	sub	sp, #32
 80120bc:	af02      	add	r7, sp, #8
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	60b9      	str	r1, [r7, #8]
 80120c2:	603b      	str	r3, [r7, #0]
 80120c4:	4613      	mov	r3, r2
 80120c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80120c8:	2300      	movs	r3, #0
 80120ca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	685b      	ldr	r3, [r3, #4]
 80120d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80120d4:	d112      	bne.n	80120fc <HAL_SPI_Receive+0x44>
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	689b      	ldr	r3, [r3, #8]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d10e      	bne.n	80120fc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2204      	movs	r2, #4
 80120e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80120e6:	88fa      	ldrh	r2, [r7, #6]
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	9300      	str	r3, [sp, #0]
 80120ec:	4613      	mov	r3, r2
 80120ee:	68ba      	ldr	r2, [r7, #8]
 80120f0:	68b9      	ldr	r1, [r7, #8]
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f000 f8e9 	bl	80122ca <HAL_SPI_TransmitReceive>
 80120f8:	4603      	mov	r3, r0
 80120fa:	e0e2      	b.n	80122c2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012102:	2b01      	cmp	r3, #1
 8012104:	d101      	bne.n	801210a <HAL_SPI_Receive+0x52>
 8012106:	2302      	movs	r3, #2
 8012108:	e0db      	b.n	80122c2 <HAL_SPI_Receive+0x20a>
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2201      	movs	r2, #1
 801210e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012112:	f7fd fcc5 	bl	800faa0 <HAL_GetTick>
 8012116:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801211e:	b2db      	uxtb	r3, r3
 8012120:	2b01      	cmp	r3, #1
 8012122:	d002      	beq.n	801212a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8012124:	2302      	movs	r3, #2
 8012126:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012128:	e0c2      	b.n	80122b0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d002      	beq.n	8012136 <HAL_SPI_Receive+0x7e>
 8012130:	88fb      	ldrh	r3, [r7, #6]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d102      	bne.n	801213c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012136:	2301      	movs	r3, #1
 8012138:	75fb      	strb	r3, [r7, #23]
    goto error;
 801213a:	e0b9      	b.n	80122b0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	2204      	movs	r2, #4
 8012140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	2200      	movs	r2, #0
 8012148:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	68ba      	ldr	r2, [r7, #8]
 801214e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	88fa      	ldrh	r2, [r7, #6]
 8012154:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	88fa      	ldrh	r2, [r7, #6]
 801215a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	2200      	movs	r2, #0
 8012160:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2200      	movs	r2, #0
 8012166:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2200      	movs	r2, #0
 801216c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	2200      	movs	r2, #0
 8012172:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2200      	movs	r2, #0
 8012178:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	689b      	ldr	r3, [r3, #8]
 801217e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012182:	d107      	bne.n	8012194 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012192:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801219e:	2b40      	cmp	r3, #64	; 0x40
 80121a0:	d007      	beq.n	80121b2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	681a      	ldr	r2, [r3, #0]
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80121b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d162      	bne.n	8012280 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80121ba:	e02e      	b.n	801221a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	689b      	ldr	r3, [r3, #8]
 80121c2:	f003 0301 	and.w	r3, r3, #1
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d115      	bne.n	80121f6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	f103 020c 	add.w	r2, r3, #12
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121d6:	7812      	ldrb	r2, [r2, #0]
 80121d8:	b2d2      	uxtb	r2, r2
 80121da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121e0:	1c5a      	adds	r2, r3, #1
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	3b01      	subs	r3, #1
 80121ee:	b29a      	uxth	r2, r3
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80121f4:	e011      	b.n	801221a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80121f6:	f7fd fc53 	bl	800faa0 <HAL_GetTick>
 80121fa:	4602      	mov	r2, r0
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	1ad3      	subs	r3, r2, r3
 8012200:	683a      	ldr	r2, [r7, #0]
 8012202:	429a      	cmp	r2, r3
 8012204:	d803      	bhi.n	801220e <HAL_SPI_Receive+0x156>
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801220c:	d102      	bne.n	8012214 <HAL_SPI_Receive+0x15c>
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d102      	bne.n	801221a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8012214:	2303      	movs	r3, #3
 8012216:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012218:	e04a      	b.n	80122b0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801221e:	b29b      	uxth	r3, r3
 8012220:	2b00      	cmp	r3, #0
 8012222:	d1cb      	bne.n	80121bc <HAL_SPI_Receive+0x104>
 8012224:	e031      	b.n	801228a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	689b      	ldr	r3, [r3, #8]
 801222c:	f003 0301 	and.w	r3, r3, #1
 8012230:	2b01      	cmp	r3, #1
 8012232:	d113      	bne.n	801225c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	68da      	ldr	r2, [r3, #12]
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801223e:	b292      	uxth	r2, r2
 8012240:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012246:	1c9a      	adds	r2, r3, #2
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012250:	b29b      	uxth	r3, r3
 8012252:	3b01      	subs	r3, #1
 8012254:	b29a      	uxth	r2, r3
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	87da      	strh	r2, [r3, #62]	; 0x3e
 801225a:	e011      	b.n	8012280 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801225c:	f7fd fc20 	bl	800faa0 <HAL_GetTick>
 8012260:	4602      	mov	r2, r0
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	1ad3      	subs	r3, r2, r3
 8012266:	683a      	ldr	r2, [r7, #0]
 8012268:	429a      	cmp	r2, r3
 801226a:	d803      	bhi.n	8012274 <HAL_SPI_Receive+0x1bc>
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012272:	d102      	bne.n	801227a <HAL_SPI_Receive+0x1c2>
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d102      	bne.n	8012280 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 801227a:	2303      	movs	r3, #3
 801227c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801227e:	e017      	b.n	80122b0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012284:	b29b      	uxth	r3, r3
 8012286:	2b00      	cmp	r3, #0
 8012288:	d1cd      	bne.n	8012226 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801228a:	693a      	ldr	r2, [r7, #16]
 801228c:	6839      	ldr	r1, [r7, #0]
 801228e:	68f8      	ldr	r0, [r7, #12]
 8012290:	f000 fa27 	bl	80126e2 <SPI_EndRxTransaction>
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d002      	beq.n	80122a0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	2220      	movs	r2, #32
 801229e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d002      	beq.n	80122ae <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80122a8:	2301      	movs	r3, #1
 80122aa:	75fb      	strb	r3, [r7, #23]
 80122ac:	e000      	b.n	80122b0 <HAL_SPI_Receive+0x1f8>
  }

error :
 80122ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	2201      	movs	r2, #1
 80122b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	2200      	movs	r2, #0
 80122bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80122c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3718      	adds	r7, #24
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}

080122ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80122ca:	b580      	push	{r7, lr}
 80122cc:	b08c      	sub	sp, #48	; 0x30
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	60f8      	str	r0, [r7, #12]
 80122d2:	60b9      	str	r1, [r7, #8]
 80122d4:	607a      	str	r2, [r7, #4]
 80122d6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80122d8:	2301      	movs	r3, #1
 80122da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80122dc:	2300      	movs	r3, #0
 80122de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	d101      	bne.n	80122f0 <HAL_SPI_TransmitReceive+0x26>
 80122ec:	2302      	movs	r3, #2
 80122ee:	e18a      	b.n	8012606 <HAL_SPI_TransmitReceive+0x33c>
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	2201      	movs	r2, #1
 80122f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80122f8:	f7fd fbd2 	bl	800faa0 <HAL_GetTick>
 80122fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	685b      	ldr	r3, [r3, #4]
 801230c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801230e:	887b      	ldrh	r3, [r7, #2]
 8012310:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012316:	2b01      	cmp	r3, #1
 8012318:	d00f      	beq.n	801233a <HAL_SPI_TransmitReceive+0x70>
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012320:	d107      	bne.n	8012332 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	689b      	ldr	r3, [r3, #8]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d103      	bne.n	8012332 <HAL_SPI_TransmitReceive+0x68>
 801232a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801232e:	2b04      	cmp	r3, #4
 8012330:	d003      	beq.n	801233a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8012332:	2302      	movs	r3, #2
 8012334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012338:	e15b      	b.n	80125f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d005      	beq.n	801234c <HAL_SPI_TransmitReceive+0x82>
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d002      	beq.n	801234c <HAL_SPI_TransmitReceive+0x82>
 8012346:	887b      	ldrh	r3, [r7, #2]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d103      	bne.n	8012354 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801234c:	2301      	movs	r3, #1
 801234e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012352:	e14e      	b.n	80125f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801235a:	b2db      	uxtb	r3, r3
 801235c:	2b04      	cmp	r3, #4
 801235e:	d003      	beq.n	8012368 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	2205      	movs	r2, #5
 8012364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	2200      	movs	r2, #0
 801236c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	887a      	ldrh	r2, [r7, #2]
 8012378:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	887a      	ldrh	r2, [r7, #2]
 801237e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	68ba      	ldr	r2, [r7, #8]
 8012384:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	887a      	ldrh	r2, [r7, #2]
 801238a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	887a      	ldrh	r2, [r7, #2]
 8012390:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	2200      	movs	r2, #0
 8012396:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2200      	movs	r2, #0
 801239c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123a8:	2b40      	cmp	r3, #64	; 0x40
 80123aa:	d007      	beq.n	80123bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	681a      	ldr	r2, [r3, #0]
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80123ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80123c4:	d178      	bne.n	80124b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d002      	beq.n	80123d4 <HAL_SPI_TransmitReceive+0x10a>
 80123ce:	8b7b      	ldrh	r3, [r7, #26]
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d166      	bne.n	80124a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123d8:	881a      	ldrh	r2, [r3, #0]
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123e4:	1c9a      	adds	r2, r3, #2
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80123ee:	b29b      	uxth	r3, r3
 80123f0:	3b01      	subs	r3, #1
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80123f8:	e053      	b.n	80124a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	689b      	ldr	r3, [r3, #8]
 8012400:	f003 0302 	and.w	r3, r3, #2
 8012404:	2b02      	cmp	r3, #2
 8012406:	d11b      	bne.n	8012440 <HAL_SPI_TransmitReceive+0x176>
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801240c:	b29b      	uxth	r3, r3
 801240e:	2b00      	cmp	r3, #0
 8012410:	d016      	beq.n	8012440 <HAL_SPI_TransmitReceive+0x176>
 8012412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012414:	2b01      	cmp	r3, #1
 8012416:	d113      	bne.n	8012440 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801241c:	881a      	ldrh	r2, [r3, #0]
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012428:	1c9a      	adds	r2, r3, #2
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012432:	b29b      	uxth	r3, r3
 8012434:	3b01      	subs	r3, #1
 8012436:	b29a      	uxth	r2, r3
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801243c:	2300      	movs	r3, #0
 801243e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	689b      	ldr	r3, [r3, #8]
 8012446:	f003 0301 	and.w	r3, r3, #1
 801244a:	2b01      	cmp	r3, #1
 801244c:	d119      	bne.n	8012482 <HAL_SPI_TransmitReceive+0x1b8>
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012452:	b29b      	uxth	r3, r3
 8012454:	2b00      	cmp	r3, #0
 8012456:	d014      	beq.n	8012482 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	68da      	ldr	r2, [r3, #12]
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012462:	b292      	uxth	r2, r2
 8012464:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801246a:	1c9a      	adds	r2, r3, #2
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012474:	b29b      	uxth	r3, r3
 8012476:	3b01      	subs	r3, #1
 8012478:	b29a      	uxth	r2, r3
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801247e:	2301      	movs	r3, #1
 8012480:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012482:	f7fd fb0d 	bl	800faa0 <HAL_GetTick>
 8012486:	4602      	mov	r2, r0
 8012488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248a:	1ad3      	subs	r3, r2, r3
 801248c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801248e:	429a      	cmp	r2, r3
 8012490:	d807      	bhi.n	80124a2 <HAL_SPI_TransmitReceive+0x1d8>
 8012492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012498:	d003      	beq.n	80124a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801249a:	2303      	movs	r3, #3
 801249c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80124a0:	e0a7      	b.n	80125f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d1a6      	bne.n	80123fa <HAL_SPI_TransmitReceive+0x130>
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d1a1      	bne.n	80123fa <HAL_SPI_TransmitReceive+0x130>
 80124b6:	e07c      	b.n	80125b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	685b      	ldr	r3, [r3, #4]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d002      	beq.n	80124c6 <HAL_SPI_TransmitReceive+0x1fc>
 80124c0:	8b7b      	ldrh	r3, [r7, #26]
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d16b      	bne.n	801259e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	330c      	adds	r3, #12
 80124d0:	7812      	ldrb	r2, [r2, #0]
 80124d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124d8:	1c5a      	adds	r2, r3, #1
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	3b01      	subs	r3, #1
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80124ec:	e057      	b.n	801259e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	689b      	ldr	r3, [r3, #8]
 80124f4:	f003 0302 	and.w	r3, r3, #2
 80124f8:	2b02      	cmp	r3, #2
 80124fa:	d11c      	bne.n	8012536 <HAL_SPI_TransmitReceive+0x26c>
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012500:	b29b      	uxth	r3, r3
 8012502:	2b00      	cmp	r3, #0
 8012504:	d017      	beq.n	8012536 <HAL_SPI_TransmitReceive+0x26c>
 8012506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012508:	2b01      	cmp	r3, #1
 801250a:	d114      	bne.n	8012536 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	330c      	adds	r3, #12
 8012516:	7812      	ldrb	r2, [r2, #0]
 8012518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801251e:	1c5a      	adds	r2, r3, #1
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012528:	b29b      	uxth	r3, r3
 801252a:	3b01      	subs	r3, #1
 801252c:	b29a      	uxth	r2, r3
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012532:	2300      	movs	r3, #0
 8012534:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	f003 0301 	and.w	r3, r3, #1
 8012540:	2b01      	cmp	r3, #1
 8012542:	d119      	bne.n	8012578 <HAL_SPI_TransmitReceive+0x2ae>
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012548:	b29b      	uxth	r3, r3
 801254a:	2b00      	cmp	r3, #0
 801254c:	d014      	beq.n	8012578 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	68da      	ldr	r2, [r3, #12]
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012558:	b2d2      	uxtb	r2, r2
 801255a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012560:	1c5a      	adds	r2, r3, #1
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801256a:	b29b      	uxth	r3, r3
 801256c:	3b01      	subs	r3, #1
 801256e:	b29a      	uxth	r2, r3
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012574:	2301      	movs	r3, #1
 8012576:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012578:	f7fd fa92 	bl	800faa0 <HAL_GetTick>
 801257c:	4602      	mov	r2, r0
 801257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012580:	1ad3      	subs	r3, r2, r3
 8012582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012584:	429a      	cmp	r2, r3
 8012586:	d803      	bhi.n	8012590 <HAL_SPI_TransmitReceive+0x2c6>
 8012588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801258e:	d102      	bne.n	8012596 <HAL_SPI_TransmitReceive+0x2cc>
 8012590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012592:	2b00      	cmp	r3, #0
 8012594:	d103      	bne.n	801259e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8012596:	2303      	movs	r3, #3
 8012598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801259c:	e029      	b.n	80125f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d1a2      	bne.n	80124ee <HAL_SPI_TransmitReceive+0x224>
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d19d      	bne.n	80124ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80125b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80125b6:	68f8      	ldr	r0, [r7, #12]
 80125b8:	f000 f8f8 	bl	80127ac <SPI_EndRxTxTransaction>
 80125bc:	4603      	mov	r3, r0
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d006      	beq.n	80125d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80125c2:	2301      	movs	r3, #1
 80125c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	2220      	movs	r2, #32
 80125cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80125ce:	e010      	b.n	80125f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	689b      	ldr	r3, [r3, #8]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d10b      	bne.n	80125f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80125d8:	2300      	movs	r3, #0
 80125da:	617b      	str	r3, [r7, #20]
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	617b      	str	r3, [r7, #20]
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	689b      	ldr	r3, [r3, #8]
 80125ea:	617b      	str	r3, [r7, #20]
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	e000      	b.n	80125f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80125f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	2201      	movs	r2, #1
 80125f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	2200      	movs	r2, #0
 80125fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8012606:	4618      	mov	r0, r3
 8012608:	3730      	adds	r7, #48	; 0x30
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801260e:	b580      	push	{r7, lr}
 8012610:	b084      	sub	sp, #16
 8012612:	af00      	add	r7, sp, #0
 8012614:	60f8      	str	r0, [r7, #12]
 8012616:	60b9      	str	r1, [r7, #8]
 8012618:	603b      	str	r3, [r7, #0]
 801261a:	4613      	mov	r3, r2
 801261c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801261e:	e04c      	b.n	80126ba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012626:	d048      	beq.n	80126ba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8012628:	f7fd fa3a 	bl	800faa0 <HAL_GetTick>
 801262c:	4602      	mov	r2, r0
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	1ad3      	subs	r3, r2, r3
 8012632:	683a      	ldr	r2, [r7, #0]
 8012634:	429a      	cmp	r2, r3
 8012636:	d902      	bls.n	801263e <SPI_WaitFlagStateUntilTimeout+0x30>
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d13d      	bne.n	80126ba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	685a      	ldr	r2, [r3, #4]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801264c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	685b      	ldr	r3, [r3, #4]
 8012652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012656:	d111      	bne.n	801267c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	689b      	ldr	r3, [r3, #8]
 801265c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012660:	d004      	beq.n	801266c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	689b      	ldr	r3, [r3, #8]
 8012666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801266a:	d107      	bne.n	801267c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801267a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012684:	d10f      	bne.n	80126a6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	681a      	ldr	r2, [r3, #0]
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012694:	601a      	str	r2, [r3, #0]
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	681a      	ldr	r2, [r3, #0]
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80126a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	2201      	movs	r2, #1
 80126aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	2200      	movs	r2, #0
 80126b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80126b6:	2303      	movs	r3, #3
 80126b8:	e00f      	b.n	80126da <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	689a      	ldr	r2, [r3, #8]
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	4013      	ands	r3, r2
 80126c4:	68ba      	ldr	r2, [r7, #8]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	bf0c      	ite	eq
 80126ca:	2301      	moveq	r3, #1
 80126cc:	2300      	movne	r3, #0
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	461a      	mov	r2, r3
 80126d2:	79fb      	ldrb	r3, [r7, #7]
 80126d4:	429a      	cmp	r2, r3
 80126d6:	d1a3      	bne.n	8012620 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80126d8:	2300      	movs	r3, #0
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3710      	adds	r7, #16
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}

080126e2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80126e2:	b580      	push	{r7, lr}
 80126e4:	b086      	sub	sp, #24
 80126e6:	af02      	add	r7, sp, #8
 80126e8:	60f8      	str	r0, [r7, #12]
 80126ea:	60b9      	str	r1, [r7, #8]
 80126ec:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80126f6:	d111      	bne.n	801271c <SPI_EndRxTransaction+0x3a>
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	689b      	ldr	r3, [r3, #8]
 80126fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012700:	d004      	beq.n	801270c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	689b      	ldr	r3, [r3, #8]
 8012706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801270a:	d107      	bne.n	801271c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	681a      	ldr	r2, [r3, #0]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801271a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012724:	d12a      	bne.n	801277c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	689b      	ldr	r3, [r3, #8]
 801272a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801272e:	d012      	beq.n	8012756 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	9300      	str	r3, [sp, #0]
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	2200      	movs	r2, #0
 8012738:	2180      	movs	r1, #128	; 0x80
 801273a:	68f8      	ldr	r0, [r7, #12]
 801273c:	f7ff ff67 	bl	801260e <SPI_WaitFlagStateUntilTimeout>
 8012740:	4603      	mov	r3, r0
 8012742:	2b00      	cmp	r3, #0
 8012744:	d02d      	beq.n	80127a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801274a:	f043 0220 	orr.w	r2, r3, #32
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8012752:	2303      	movs	r3, #3
 8012754:	e026      	b.n	80127a4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	9300      	str	r3, [sp, #0]
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	2200      	movs	r2, #0
 801275e:	2101      	movs	r1, #1
 8012760:	68f8      	ldr	r0, [r7, #12]
 8012762:	f7ff ff54 	bl	801260e <SPI_WaitFlagStateUntilTimeout>
 8012766:	4603      	mov	r3, r0
 8012768:	2b00      	cmp	r3, #0
 801276a:	d01a      	beq.n	80127a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012770:	f043 0220 	orr.w	r2, r3, #32
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8012778:	2303      	movs	r3, #3
 801277a:	e013      	b.n	80127a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	9300      	str	r3, [sp, #0]
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	2200      	movs	r2, #0
 8012784:	2101      	movs	r1, #1
 8012786:	68f8      	ldr	r0, [r7, #12]
 8012788:	f7ff ff41 	bl	801260e <SPI_WaitFlagStateUntilTimeout>
 801278c:	4603      	mov	r3, r0
 801278e:	2b00      	cmp	r3, #0
 8012790:	d007      	beq.n	80127a2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012796:	f043 0220 	orr.w	r2, r3, #32
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801279e:	2303      	movs	r3, #3
 80127a0:	e000      	b.n	80127a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80127a2:	2300      	movs	r3, #0
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3710      	adds	r7, #16
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}

080127ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b088      	sub	sp, #32
 80127b0:	af02      	add	r7, sp, #8
 80127b2:	60f8      	str	r0, [r7, #12]
 80127b4:	60b9      	str	r1, [r7, #8]
 80127b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80127b8:	4b1b      	ldr	r3, [pc, #108]	; (8012828 <SPI_EndRxTxTransaction+0x7c>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	4a1b      	ldr	r2, [pc, #108]	; (801282c <SPI_EndRxTxTransaction+0x80>)
 80127be:	fba2 2303 	umull	r2, r3, r2, r3
 80127c2:	0d5b      	lsrs	r3, r3, #21
 80127c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80127c8:	fb02 f303 	mul.w	r3, r2, r3
 80127cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	685b      	ldr	r3, [r3, #4]
 80127d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80127d6:	d112      	bne.n	80127fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	9300      	str	r3, [sp, #0]
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	2200      	movs	r2, #0
 80127e0:	2180      	movs	r1, #128	; 0x80
 80127e2:	68f8      	ldr	r0, [r7, #12]
 80127e4:	f7ff ff13 	bl	801260e <SPI_WaitFlagStateUntilTimeout>
 80127e8:	4603      	mov	r3, r0
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d016      	beq.n	801281c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127f2:	f043 0220 	orr.w	r2, r3, #32
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80127fa:	2303      	movs	r3, #3
 80127fc:	e00f      	b.n	801281e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80127fe:	697b      	ldr	r3, [r7, #20]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d00a      	beq.n	801281a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	3b01      	subs	r3, #1
 8012808:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	689b      	ldr	r3, [r3, #8]
 8012810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012814:	2b80      	cmp	r3, #128	; 0x80
 8012816:	d0f2      	beq.n	80127fe <SPI_EndRxTxTransaction+0x52>
 8012818:	e000      	b.n	801281c <SPI_EndRxTxTransaction+0x70>
        break;
 801281a:	bf00      	nop
  }

  return HAL_OK;
 801281c:	2300      	movs	r3, #0
}
 801281e:	4618      	mov	r0, r3
 8012820:	3718      	adds	r7, #24
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	20000028 	.word	0x20000028
 801282c:	165e9f81 	.word	0x165e9f81

08012830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d101      	bne.n	8012842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801283e:	2301      	movs	r3, #1
 8012840:	e01d      	b.n	801287e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012848:	b2db      	uxtb	r3, r3
 801284a:	2b00      	cmp	r3, #0
 801284c:	d106      	bne.n	801285c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2200      	movs	r2, #0
 8012852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f7fa ff10 	bl	800d67c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2202      	movs	r2, #2
 8012860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	681a      	ldr	r2, [r3, #0]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	3304      	adds	r3, #4
 801286c:	4619      	mov	r1, r3
 801286e:	4610      	mov	r0, r2
 8012870:	f000 fe96 	bl	80135a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2201      	movs	r2, #1
 8012878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801287c:	2300      	movs	r3, #0
}
 801287e:	4618      	mov	r0, r3
 8012880:	3708      	adds	r7, #8
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}

08012886 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012886:	b480      	push	{r7}
 8012888:	b085      	sub	sp, #20
 801288a:	af00      	add	r7, sp, #0
 801288c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	68da      	ldr	r2, [r3, #12]
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	f042 0201 	orr.w	r2, r2, #1
 801289c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	689b      	ldr	r3, [r3, #8]
 80128a4:	f003 0307 	and.w	r3, r3, #7
 80128a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2b06      	cmp	r3, #6
 80128ae:	d007      	beq.n	80128c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	681a      	ldr	r2, [r3, #0]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	f042 0201 	orr.w	r2, r2, #1
 80128be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80128c0:	2300      	movs	r3, #0
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3714      	adds	r7, #20
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr

080128ce <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80128ce:	b480      	push	{r7}
 80128d0:	b083      	sub	sp, #12
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	68da      	ldr	r2, [r3, #12]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	f022 0201 	bic.w	r2, r2, #1
 80128e4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	6a1a      	ldr	r2, [r3, #32]
 80128ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80128f0:	4013      	ands	r3, r2
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d10f      	bne.n	8012916 <HAL_TIM_Base_Stop_IT+0x48>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	6a1a      	ldr	r2, [r3, #32]
 80128fc:	f240 4344 	movw	r3, #1092	; 0x444
 8012900:	4013      	ands	r3, r2
 8012902:	2b00      	cmp	r3, #0
 8012904:	d107      	bne.n	8012916 <HAL_TIM_Base_Stop_IT+0x48>
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	681a      	ldr	r2, [r3, #0]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	f022 0201 	bic.w	r2, r2, #1
 8012914:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012916:	2300      	movs	r3, #0
}
 8012918:	4618      	mov	r0, r3
 801291a:	370c      	adds	r7, #12
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b082      	sub	sp, #8
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d101      	bne.n	8012936 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8012932:	2301      	movs	r3, #1
 8012934:	e01d      	b.n	8012972 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801293c:	b2db      	uxtb	r3, r3
 801293e:	2b00      	cmp	r3, #0
 8012940:	d106      	bne.n	8012950 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2200      	movs	r2, #0
 8012946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 f815 	bl	801297a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2202      	movs	r2, #2
 8012954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681a      	ldr	r2, [r3, #0]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	3304      	adds	r3, #4
 8012960:	4619      	mov	r1, r3
 8012962:	4610      	mov	r0, r2
 8012964:	f000 fe1c 	bl	80135a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2201      	movs	r2, #1
 801296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012970:	2300      	movs	r3, #0
}
 8012972:	4618      	mov	r0, r3
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}

0801297a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 801297a:	b480      	push	{r7}
 801297c:	b083      	sub	sp, #12
 801297e:	af00      	add	r7, sp, #0
 8012980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8012982:	bf00      	nop
 8012984:	370c      	adds	r7, #12
 8012986:	46bd      	mov	sp, r7
 8012988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298c:	4770      	bx	lr
	...

08012990 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	2b0c      	cmp	r3, #12
 801299e:	d841      	bhi.n	8012a24 <HAL_TIM_OC_Start_IT+0x94>
 80129a0:	a201      	add	r2, pc, #4	; (adr r2, 80129a8 <HAL_TIM_OC_Start_IT+0x18>)
 80129a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129a6:	bf00      	nop
 80129a8:	080129dd 	.word	0x080129dd
 80129ac:	08012a25 	.word	0x08012a25
 80129b0:	08012a25 	.word	0x08012a25
 80129b4:	08012a25 	.word	0x08012a25
 80129b8:	080129ef 	.word	0x080129ef
 80129bc:	08012a25 	.word	0x08012a25
 80129c0:	08012a25 	.word	0x08012a25
 80129c4:	08012a25 	.word	0x08012a25
 80129c8:	08012a01 	.word	0x08012a01
 80129cc:	08012a25 	.word	0x08012a25
 80129d0:	08012a25 	.word	0x08012a25
 80129d4:	08012a25 	.word	0x08012a25
 80129d8:	08012a13 	.word	0x08012a13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	68da      	ldr	r2, [r3, #12]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f042 0202 	orr.w	r2, r2, #2
 80129ea:	60da      	str	r2, [r3, #12]
      break;
 80129ec:	e01b      	b.n	8012a26 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	68da      	ldr	r2, [r3, #12]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f042 0204 	orr.w	r2, r2, #4
 80129fc:	60da      	str	r2, [r3, #12]
      break;
 80129fe:	e012      	b.n	8012a26 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	68da      	ldr	r2, [r3, #12]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f042 0208 	orr.w	r2, r2, #8
 8012a0e:	60da      	str	r2, [r3, #12]
      break;
 8012a10:	e009      	b.n	8012a26 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	68da      	ldr	r2, [r3, #12]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	f042 0210 	orr.w	r2, r2, #16
 8012a20:	60da      	str	r2, [r3, #12]
      break;
 8012a22:	e000      	b.n	8012a26 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8012a24:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	6839      	ldr	r1, [r7, #0]
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f001 f8a0 	bl	8013b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	4a15      	ldr	r2, [pc, #84]	; (8012a90 <HAL_TIM_OC_Start_IT+0x100>)
 8012a3a:	4293      	cmp	r3, r2
 8012a3c:	d004      	beq.n	8012a48 <HAL_TIM_OC_Start_IT+0xb8>
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	4a14      	ldr	r2, [pc, #80]	; (8012a94 <HAL_TIM_OC_Start_IT+0x104>)
 8012a44:	4293      	cmp	r3, r2
 8012a46:	d101      	bne.n	8012a4c <HAL_TIM_OC_Start_IT+0xbc>
 8012a48:	2301      	movs	r3, #1
 8012a4a:	e000      	b.n	8012a4e <HAL_TIM_OC_Start_IT+0xbe>
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d007      	beq.n	8012a62 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012a60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	689b      	ldr	r3, [r3, #8]
 8012a68:	f003 0307 	and.w	r3, r3, #7
 8012a6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2b06      	cmp	r3, #6
 8012a72:	d007      	beq.n	8012a84 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	681a      	ldr	r2, [r3, #0]
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	f042 0201 	orr.w	r2, r2, #1
 8012a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012a84:	2300      	movs	r3, #0
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3710      	adds	r7, #16
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	40010000 	.word	0x40010000
 8012a94:	40010400 	.word	0x40010400

08012a98 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b082      	sub	sp, #8
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	2b0c      	cmp	r3, #12
 8012aa6:	d841      	bhi.n	8012b2c <HAL_TIM_OC_Stop_IT+0x94>
 8012aa8:	a201      	add	r2, pc, #4	; (adr r2, 8012ab0 <HAL_TIM_OC_Stop_IT+0x18>)
 8012aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aae:	bf00      	nop
 8012ab0:	08012ae5 	.word	0x08012ae5
 8012ab4:	08012b2d 	.word	0x08012b2d
 8012ab8:	08012b2d 	.word	0x08012b2d
 8012abc:	08012b2d 	.word	0x08012b2d
 8012ac0:	08012af7 	.word	0x08012af7
 8012ac4:	08012b2d 	.word	0x08012b2d
 8012ac8:	08012b2d 	.word	0x08012b2d
 8012acc:	08012b2d 	.word	0x08012b2d
 8012ad0:	08012b09 	.word	0x08012b09
 8012ad4:	08012b2d 	.word	0x08012b2d
 8012ad8:	08012b2d 	.word	0x08012b2d
 8012adc:	08012b2d 	.word	0x08012b2d
 8012ae0:	08012b1b 	.word	0x08012b1b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	68da      	ldr	r2, [r3, #12]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f022 0202 	bic.w	r2, r2, #2
 8012af2:	60da      	str	r2, [r3, #12]
      break;
 8012af4:	e01b      	b.n	8012b2e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	68da      	ldr	r2, [r3, #12]
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	f022 0204 	bic.w	r2, r2, #4
 8012b04:	60da      	str	r2, [r3, #12]
      break;
 8012b06:	e012      	b.n	8012b2e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	68da      	ldr	r2, [r3, #12]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f022 0208 	bic.w	r2, r2, #8
 8012b16:	60da      	str	r2, [r3, #12]
      break;
 8012b18:	e009      	b.n	8012b2e <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	68da      	ldr	r2, [r3, #12]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f022 0210 	bic.w	r2, r2, #16
 8012b28:	60da      	str	r2, [r3, #12]
      break;
 8012b2a:	e000      	b.n	8012b2e <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8012b2c:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	2200      	movs	r2, #0
 8012b34:	6839      	ldr	r1, [r7, #0]
 8012b36:	4618      	mov	r0, r3
 8012b38:	f001 f81c 	bl	8013b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	4a20      	ldr	r2, [pc, #128]	; (8012bc4 <HAL_TIM_OC_Stop_IT+0x12c>)
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d004      	beq.n	8012b50 <HAL_TIM_OC_Stop_IT+0xb8>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	4a1f      	ldr	r2, [pc, #124]	; (8012bc8 <HAL_TIM_OC_Stop_IT+0x130>)
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d101      	bne.n	8012b54 <HAL_TIM_OC_Stop_IT+0xbc>
 8012b50:	2301      	movs	r3, #1
 8012b52:	e000      	b.n	8012b56 <HAL_TIM_OC_Stop_IT+0xbe>
 8012b54:	2300      	movs	r3, #0
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d017      	beq.n	8012b8a <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	6a1a      	ldr	r2, [r3, #32]
 8012b60:	f241 1311 	movw	r3, #4369	; 0x1111
 8012b64:	4013      	ands	r3, r2
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d10f      	bne.n	8012b8a <HAL_TIM_OC_Stop_IT+0xf2>
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	6a1a      	ldr	r2, [r3, #32]
 8012b70:	f240 4344 	movw	r3, #1092	; 0x444
 8012b74:	4013      	ands	r3, r2
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d107      	bne.n	8012b8a <HAL_TIM_OC_Stop_IT+0xf2>
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012b88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	6a1a      	ldr	r2, [r3, #32]
 8012b90:	f241 1311 	movw	r3, #4369	; 0x1111
 8012b94:	4013      	ands	r3, r2
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d10f      	bne.n	8012bba <HAL_TIM_OC_Stop_IT+0x122>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	6a1a      	ldr	r2, [r3, #32]
 8012ba0:	f240 4344 	movw	r3, #1092	; 0x444
 8012ba4:	4013      	ands	r3, r2
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d107      	bne.n	8012bba <HAL_TIM_OC_Stop_IT+0x122>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	f022 0201 	bic.w	r2, r2, #1
 8012bb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012bba:	2300      	movs	r3, #0
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3708      	adds	r7, #8
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}
 8012bc4:	40010000 	.word	0x40010000
 8012bc8:	40010400 	.word	0x40010400

08012bcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b082      	sub	sp, #8
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d101      	bne.n	8012bde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012bda:	2301      	movs	r3, #1
 8012bdc:	e01d      	b.n	8012c1a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012be4:	b2db      	uxtb	r3, r3
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d106      	bne.n	8012bf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2200      	movs	r2, #0
 8012bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f000 f815 	bl	8012c22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2202      	movs	r2, #2
 8012bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	3304      	adds	r3, #4
 8012c08:	4619      	mov	r1, r3
 8012c0a:	4610      	mov	r0, r2
 8012c0c:	f000 fcc8 	bl	80135a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2201      	movs	r2, #1
 8012c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012c18:	2300      	movs	r3, #0
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}

08012c22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012c22:	b480      	push	{r7}
 8012c24:	b083      	sub	sp, #12
 8012c26:	af00      	add	r7, sp, #0
 8012c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012c2a:	bf00      	nop
 8012c2c:	370c      	adds	r7, #12
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c34:	4770      	bx	lr
	...

08012c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b084      	sub	sp, #16
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	2201      	movs	r2, #1
 8012c48:	6839      	ldr	r1, [r7, #0]
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f000 ff92 	bl	8013b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	4a15      	ldr	r2, [pc, #84]	; (8012cac <HAL_TIM_PWM_Start+0x74>)
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d004      	beq.n	8012c64 <HAL_TIM_PWM_Start+0x2c>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	4a14      	ldr	r2, [pc, #80]	; (8012cb0 <HAL_TIM_PWM_Start+0x78>)
 8012c60:	4293      	cmp	r3, r2
 8012c62:	d101      	bne.n	8012c68 <HAL_TIM_PWM_Start+0x30>
 8012c64:	2301      	movs	r3, #1
 8012c66:	e000      	b.n	8012c6a <HAL_TIM_PWM_Start+0x32>
 8012c68:	2300      	movs	r3, #0
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d007      	beq.n	8012c7e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012c7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	689b      	ldr	r3, [r3, #8]
 8012c84:	f003 0307 	and.w	r3, r3, #7
 8012c88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	2b06      	cmp	r3, #6
 8012c8e:	d007      	beq.n	8012ca0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	681a      	ldr	r2, [r3, #0]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	f042 0201 	orr.w	r2, r2, #1
 8012c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012ca0:	2300      	movs	r3, #0
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3710      	adds	r7, #16
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
 8012caa:	bf00      	nop
 8012cac:	40010000 	.word	0x40010000
 8012cb0:	40010400 	.word	0x40010400

08012cb4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	6839      	ldr	r1, [r7, #0]
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f000 ff54 	bl	8013b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4a22      	ldr	r2, [pc, #136]	; (8012d5c <HAL_TIM_PWM_Stop+0xa8>)
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d004      	beq.n	8012ce0 <HAL_TIM_PWM_Stop+0x2c>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	4a21      	ldr	r2, [pc, #132]	; (8012d60 <HAL_TIM_PWM_Stop+0xac>)
 8012cdc:	4293      	cmp	r3, r2
 8012cde:	d101      	bne.n	8012ce4 <HAL_TIM_PWM_Stop+0x30>
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e000      	b.n	8012ce6 <HAL_TIM_PWM_Stop+0x32>
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d017      	beq.n	8012d1a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	6a1a      	ldr	r2, [r3, #32]
 8012cf0:	f241 1311 	movw	r3, #4369	; 0x1111
 8012cf4:	4013      	ands	r3, r2
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d10f      	bne.n	8012d1a <HAL_TIM_PWM_Stop+0x66>
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	6a1a      	ldr	r2, [r3, #32]
 8012d00:	f240 4344 	movw	r3, #1092	; 0x444
 8012d04:	4013      	ands	r3, r2
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d107      	bne.n	8012d1a <HAL_TIM_PWM_Stop+0x66>
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012d18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	6a1a      	ldr	r2, [r3, #32]
 8012d20:	f241 1311 	movw	r3, #4369	; 0x1111
 8012d24:	4013      	ands	r3, r2
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d10f      	bne.n	8012d4a <HAL_TIM_PWM_Stop+0x96>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	6a1a      	ldr	r2, [r3, #32]
 8012d30:	f240 4344 	movw	r3, #1092	; 0x444
 8012d34:	4013      	ands	r3, r2
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d107      	bne.n	8012d4a <HAL_TIM_PWM_Stop+0x96>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	f022 0201 	bic.w	r2, r2, #1
 8012d48:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2201      	movs	r2, #1
 8012d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8012d52:	2300      	movs	r3, #0
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	3708      	adds	r7, #8
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	40010000 	.word	0x40010000
 8012d60:	40010400 	.word	0x40010400

08012d64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b086      	sub	sp, #24
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d101      	bne.n	8012d78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8012d74:	2301      	movs	r3, #1
 8012d76:	e083      	b.n	8012e80 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d7e:	b2db      	uxtb	r3, r3
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d106      	bne.n	8012d92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2200      	movs	r2, #0
 8012d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f7fa fce5 	bl	800d75c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2202      	movs	r2, #2
 8012d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	689b      	ldr	r3, [r3, #8]
 8012da0:	687a      	ldr	r2, [r7, #4]
 8012da2:	6812      	ldr	r2, [r2, #0]
 8012da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012da8:	f023 0307 	bic.w	r3, r3, #7
 8012dac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681a      	ldr	r2, [r3, #0]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	3304      	adds	r3, #4
 8012db6:	4619      	mov	r1, r3
 8012db8:	4610      	mov	r0, r2
 8012dba:	f000 fbf1 	bl	80135a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	689b      	ldr	r3, [r3, #8]
 8012dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	699b      	ldr	r3, [r3, #24]
 8012dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	6a1b      	ldr	r3, [r3, #32]
 8012dd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	697a      	ldr	r2, [r7, #20]
 8012ddc:	4313      	orrs	r3, r2
 8012dde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012de6:	f023 0303 	bic.w	r3, r3, #3
 8012dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	689a      	ldr	r2, [r3, #8]
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	699b      	ldr	r3, [r3, #24]
 8012df4:	021b      	lsls	r3, r3, #8
 8012df6:	4313      	orrs	r3, r2
 8012df8:	693a      	ldr	r2, [r7, #16]
 8012dfa:	4313      	orrs	r3, r2
 8012dfc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8012e04:	f023 030c 	bic.w	r3, r3, #12
 8012e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	68da      	ldr	r2, [r3, #12]
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	69db      	ldr	r3, [r3, #28]
 8012e1e:	021b      	lsls	r3, r3, #8
 8012e20:	4313      	orrs	r3, r2
 8012e22:	693a      	ldr	r2, [r7, #16]
 8012e24:	4313      	orrs	r3, r2
 8012e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	691b      	ldr	r3, [r3, #16]
 8012e2c:	011a      	lsls	r2, r3, #4
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	6a1b      	ldr	r3, [r3, #32]
 8012e32:	031b      	lsls	r3, r3, #12
 8012e34:	4313      	orrs	r3, r2
 8012e36:	693a      	ldr	r2, [r7, #16]
 8012e38:	4313      	orrs	r3, r2
 8012e3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8012e42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8012e4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	685a      	ldr	r2, [r3, #4]
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	695b      	ldr	r3, [r3, #20]
 8012e54:	011b      	lsls	r3, r3, #4
 8012e56:	4313      	orrs	r3, r2
 8012e58:	68fa      	ldr	r2, [r7, #12]
 8012e5a:	4313      	orrs	r3, r2
 8012e5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	697a      	ldr	r2, [r7, #20]
 8012e64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	693a      	ldr	r2, [r7, #16]
 8012e6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2201      	movs	r2, #1
 8012e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012e7e:	2300      	movs	r3, #0
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3718      	adds	r7, #24
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d002      	beq.n	8012e9e <HAL_TIM_Encoder_Start+0x16>
 8012e98:	2b04      	cmp	r3, #4
 8012e9a:	d008      	beq.n	8012eae <HAL_TIM_Encoder_Start+0x26>
 8012e9c:	e00f      	b.n	8012ebe <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	2201      	movs	r2, #1
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f000 fe64 	bl	8013b74 <TIM_CCxChannelCmd>
      break;
 8012eac:	e016      	b.n	8012edc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	2104      	movs	r1, #4
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f000 fe5c 	bl	8013b74 <TIM_CCxChannelCmd>
      break;
 8012ebc:	e00e      	b.n	8012edc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	2100      	movs	r1, #0
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f000 fe54 	bl	8013b74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	2104      	movs	r1, #4
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f000 fe4d 	bl	8013b74 <TIM_CCxChannelCmd>
      break;
 8012eda:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	f042 0201 	orr.w	r2, r2, #1
 8012eea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012eec:	2300      	movs	r3, #0
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	3708      	adds	r7, #8
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bd80      	pop	{r7, pc}

08012ef6 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ef6:	b580      	push	{r7, lr}
 8012ef8:	b082      	sub	sp, #8
 8012efa:	af00      	add	r7, sp, #0
 8012efc:	6078      	str	r0, [r7, #4]
 8012efe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d002      	beq.n	8012f0c <HAL_TIM_Encoder_Stop+0x16>
 8012f06:	2b04      	cmp	r3, #4
 8012f08:	d008      	beq.n	8012f1c <HAL_TIM_Encoder_Stop+0x26>
 8012f0a:	e00f      	b.n	8012f2c <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	2200      	movs	r2, #0
 8012f12:	2100      	movs	r1, #0
 8012f14:	4618      	mov	r0, r3
 8012f16:	f000 fe2d 	bl	8013b74 <TIM_CCxChannelCmd>
      break;
 8012f1a:	e016      	b.n	8012f4a <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	2200      	movs	r2, #0
 8012f22:	2104      	movs	r1, #4
 8012f24:	4618      	mov	r0, r3
 8012f26:	f000 fe25 	bl	8013b74 <TIM_CCxChannelCmd>
      break;
 8012f2a:	e00e      	b.n	8012f4a <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	2200      	movs	r2, #0
 8012f32:	2100      	movs	r1, #0
 8012f34:	4618      	mov	r0, r3
 8012f36:	f000 fe1d 	bl	8013b74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2200      	movs	r2, #0
 8012f40:	2104      	movs	r1, #4
 8012f42:	4618      	mov	r0, r3
 8012f44:	f000 fe16 	bl	8013b74 <TIM_CCxChannelCmd>
      break;
 8012f48:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	6a1a      	ldr	r2, [r3, #32]
 8012f50:	f241 1311 	movw	r3, #4369	; 0x1111
 8012f54:	4013      	ands	r3, r2
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d10f      	bne.n	8012f7a <HAL_TIM_Encoder_Stop+0x84>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	6a1a      	ldr	r2, [r3, #32]
 8012f60:	f240 4344 	movw	r3, #1092	; 0x444
 8012f64:	4013      	ands	r3, r2
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d107      	bne.n	8012f7a <HAL_TIM_Encoder_Stop+0x84>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	681a      	ldr	r2, [r3, #0]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	f022 0201 	bic.w	r2, r2, #1
 8012f78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012f7a:	2300      	movs	r3, #0
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3708      	adds	r7, #8
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b082      	sub	sp, #8
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	691b      	ldr	r3, [r3, #16]
 8012f92:	f003 0302 	and.w	r3, r3, #2
 8012f96:	2b02      	cmp	r3, #2
 8012f98:	d122      	bne.n	8012fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	68db      	ldr	r3, [r3, #12]
 8012fa0:	f003 0302 	and.w	r3, r3, #2
 8012fa4:	2b02      	cmp	r3, #2
 8012fa6:	d11b      	bne.n	8012fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	f06f 0202 	mvn.w	r2, #2
 8012fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	699b      	ldr	r3, [r3, #24]
 8012fbe:	f003 0303 	and.w	r3, r3, #3
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d003      	beq.n	8012fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f000 facb 	bl	8013562 <HAL_TIM_IC_CaptureCallback>
 8012fcc:	e005      	b.n	8012fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f000 fabd 	bl	801354e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f000 face 	bl	8013576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	691b      	ldr	r3, [r3, #16]
 8012fe6:	f003 0304 	and.w	r3, r3, #4
 8012fea:	2b04      	cmp	r3, #4
 8012fec:	d122      	bne.n	8013034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	68db      	ldr	r3, [r3, #12]
 8012ff4:	f003 0304 	and.w	r3, r3, #4
 8012ff8:	2b04      	cmp	r3, #4
 8012ffa:	d11b      	bne.n	8013034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	f06f 0204 	mvn.w	r2, #4
 8013004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2202      	movs	r2, #2
 801300a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	699b      	ldr	r3, [r3, #24]
 8013012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013016:	2b00      	cmp	r3, #0
 8013018:	d003      	beq.n	8013022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f000 faa1 	bl	8013562 <HAL_TIM_IC_CaptureCallback>
 8013020:	e005      	b.n	801302e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f000 fa93 	bl	801354e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f000 faa4 	bl	8013576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2200      	movs	r2, #0
 8013032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	691b      	ldr	r3, [r3, #16]
 801303a:	f003 0308 	and.w	r3, r3, #8
 801303e:	2b08      	cmp	r3, #8
 8013040:	d122      	bne.n	8013088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	68db      	ldr	r3, [r3, #12]
 8013048:	f003 0308 	and.w	r3, r3, #8
 801304c:	2b08      	cmp	r3, #8
 801304e:	d11b      	bne.n	8013088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	f06f 0208 	mvn.w	r2, #8
 8013058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2204      	movs	r2, #4
 801305e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	69db      	ldr	r3, [r3, #28]
 8013066:	f003 0303 	and.w	r3, r3, #3
 801306a:	2b00      	cmp	r3, #0
 801306c:	d003      	beq.n	8013076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f000 fa77 	bl	8013562 <HAL_TIM_IC_CaptureCallback>
 8013074:	e005      	b.n	8013082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f000 fa69 	bl	801354e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f000 fa7a 	bl	8013576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2200      	movs	r2, #0
 8013086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	691b      	ldr	r3, [r3, #16]
 801308e:	f003 0310 	and.w	r3, r3, #16
 8013092:	2b10      	cmp	r3, #16
 8013094:	d122      	bne.n	80130dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	68db      	ldr	r3, [r3, #12]
 801309c:	f003 0310 	and.w	r3, r3, #16
 80130a0:	2b10      	cmp	r3, #16
 80130a2:	d11b      	bne.n	80130dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	f06f 0210 	mvn.w	r2, #16
 80130ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2208      	movs	r2, #8
 80130b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	69db      	ldr	r3, [r3, #28]
 80130ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d003      	beq.n	80130ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f000 fa4d 	bl	8013562 <HAL_TIM_IC_CaptureCallback>
 80130c8:	e005      	b.n	80130d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	f000 fa3f 	bl	801354e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f000 fa50 	bl	8013576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2200      	movs	r2, #0
 80130da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	691b      	ldr	r3, [r3, #16]
 80130e2:	f003 0301 	and.w	r3, r3, #1
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	d10e      	bne.n	8013108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	68db      	ldr	r3, [r3, #12]
 80130f0:	f003 0301 	and.w	r3, r3, #1
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d107      	bne.n	8013108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	f06f 0201 	mvn.w	r2, #1
 8013100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f7f7 fa82 	bl	800a60c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	691b      	ldr	r3, [r3, #16]
 801310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013112:	2b80      	cmp	r3, #128	; 0x80
 8013114:	d10e      	bne.n	8013134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	68db      	ldr	r3, [r3, #12]
 801311c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013120:	2b80      	cmp	r3, #128	; 0x80
 8013122:	d107      	bne.n	8013134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801312c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f000 fee8 	bl	8013f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	691b      	ldr	r3, [r3, #16]
 801313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801313e:	2b40      	cmp	r3, #64	; 0x40
 8013140:	d10e      	bne.n	8013160 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	68db      	ldr	r3, [r3, #12]
 8013148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801314c:	2b40      	cmp	r3, #64	; 0x40
 801314e:	d107      	bne.n	8013160 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f000 fa15 	bl	801358a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	691b      	ldr	r3, [r3, #16]
 8013166:	f003 0320 	and.w	r3, r3, #32
 801316a:	2b20      	cmp	r3, #32
 801316c:	d10e      	bne.n	801318c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	f003 0320 	and.w	r3, r3, #32
 8013178:	2b20      	cmp	r3, #32
 801317a:	d107      	bne.n	801318c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f06f 0220 	mvn.w	r2, #32
 8013184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f000 feb2 	bl	8013ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801318c:	bf00      	nop
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b084      	sub	sp, #16
 8013198:	af00      	add	r7, sp, #0
 801319a:	60f8      	str	r0, [r7, #12]
 801319c:	60b9      	str	r1, [r7, #8]
 801319e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80131a6:	2b01      	cmp	r3, #1
 80131a8:	d101      	bne.n	80131ae <HAL_TIM_OC_ConfigChannel+0x1a>
 80131aa:	2302      	movs	r3, #2
 80131ac:	e04e      	b.n	801324c <HAL_TIM_OC_ConfigChannel+0xb8>
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2201      	movs	r2, #1
 80131b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	2202      	movs	r2, #2
 80131ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	2b0c      	cmp	r3, #12
 80131c2:	d839      	bhi.n	8013238 <HAL_TIM_OC_ConfigChannel+0xa4>
 80131c4:	a201      	add	r2, pc, #4	; (adr r2, 80131cc <HAL_TIM_OC_ConfigChannel+0x38>)
 80131c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131ca:	bf00      	nop
 80131cc:	08013201 	.word	0x08013201
 80131d0:	08013239 	.word	0x08013239
 80131d4:	08013239 	.word	0x08013239
 80131d8:	08013239 	.word	0x08013239
 80131dc:	0801320f 	.word	0x0801320f
 80131e0:	08013239 	.word	0x08013239
 80131e4:	08013239 	.word	0x08013239
 80131e8:	08013239 	.word	0x08013239
 80131ec:	0801321d 	.word	0x0801321d
 80131f0:	08013239 	.word	0x08013239
 80131f4:	08013239 	.word	0x08013239
 80131f8:	08013239 	.word	0x08013239
 80131fc:	0801322b 	.word	0x0801322b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	68b9      	ldr	r1, [r7, #8]
 8013206:	4618      	mov	r0, r3
 8013208:	f000 fa6a 	bl	80136e0 <TIM_OC1_SetConfig>
      break;
 801320c:	e015      	b.n	801323a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	68b9      	ldr	r1, [r7, #8]
 8013214:	4618      	mov	r0, r3
 8013216:	f000 fad3 	bl	80137c0 <TIM_OC2_SetConfig>
      break;
 801321a:	e00e      	b.n	801323a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	68b9      	ldr	r1, [r7, #8]
 8013222:	4618      	mov	r0, r3
 8013224:	f000 fb42 	bl	80138ac <TIM_OC3_SetConfig>
      break;
 8013228:	e007      	b.n	801323a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	68b9      	ldr	r1, [r7, #8]
 8013230:	4618      	mov	r0, r3
 8013232:	f000 fbaf 	bl	8013994 <TIM_OC4_SetConfig>
      break;
 8013236:	e000      	b.n	801323a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8013238:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2201      	movs	r2, #1
 801323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	2200      	movs	r2, #0
 8013246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801324a:	2300      	movs	r3, #0
}
 801324c:	4618      	mov	r0, r3
 801324e:	3710      	adds	r7, #16
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}

08013254 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b084      	sub	sp, #16
 8013258:	af00      	add	r7, sp, #0
 801325a:	60f8      	str	r0, [r7, #12]
 801325c:	60b9      	str	r1, [r7, #8]
 801325e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013266:	2b01      	cmp	r3, #1
 8013268:	d101      	bne.n	801326e <HAL_TIM_PWM_ConfigChannel+0x1a>
 801326a:	2302      	movs	r3, #2
 801326c:	e0b4      	b.n	80133d8 <HAL_TIM_PWM_ConfigChannel+0x184>
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	2201      	movs	r2, #1
 8013272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2202      	movs	r2, #2
 801327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2b0c      	cmp	r3, #12
 8013282:	f200 809f 	bhi.w	80133c4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8013286:	a201      	add	r2, pc, #4	; (adr r2, 801328c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8013288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801328c:	080132c1 	.word	0x080132c1
 8013290:	080133c5 	.word	0x080133c5
 8013294:	080133c5 	.word	0x080133c5
 8013298:	080133c5 	.word	0x080133c5
 801329c:	08013301 	.word	0x08013301
 80132a0:	080133c5 	.word	0x080133c5
 80132a4:	080133c5 	.word	0x080133c5
 80132a8:	080133c5 	.word	0x080133c5
 80132ac:	08013343 	.word	0x08013343
 80132b0:	080133c5 	.word	0x080133c5
 80132b4:	080133c5 	.word	0x080133c5
 80132b8:	080133c5 	.word	0x080133c5
 80132bc:	08013383 	.word	0x08013383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	68b9      	ldr	r1, [r7, #8]
 80132c6:	4618      	mov	r0, r3
 80132c8:	f000 fa0a 	bl	80136e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	699a      	ldr	r2, [r3, #24]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	f042 0208 	orr.w	r2, r2, #8
 80132da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	699a      	ldr	r2, [r3, #24]
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f022 0204 	bic.w	r2, r2, #4
 80132ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	6999      	ldr	r1, [r3, #24]
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	691a      	ldr	r2, [r3, #16]
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	430a      	orrs	r2, r1
 80132fc:	619a      	str	r2, [r3, #24]
      break;
 80132fe:	e062      	b.n	80133c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	68b9      	ldr	r1, [r7, #8]
 8013306:	4618      	mov	r0, r3
 8013308:	f000 fa5a 	bl	80137c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	699a      	ldr	r2, [r3, #24]
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801331a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	699a      	ldr	r2, [r3, #24]
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801332a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	6999      	ldr	r1, [r3, #24]
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	691b      	ldr	r3, [r3, #16]
 8013336:	021a      	lsls	r2, r3, #8
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	430a      	orrs	r2, r1
 801333e:	619a      	str	r2, [r3, #24]
      break;
 8013340:	e041      	b.n	80133c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	68b9      	ldr	r1, [r7, #8]
 8013348:	4618      	mov	r0, r3
 801334a:	f000 faaf 	bl	80138ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	69da      	ldr	r2, [r3, #28]
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	f042 0208 	orr.w	r2, r2, #8
 801335c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	69da      	ldr	r2, [r3, #28]
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	f022 0204 	bic.w	r2, r2, #4
 801336c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	69d9      	ldr	r1, [r3, #28]
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	691a      	ldr	r2, [r3, #16]
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	430a      	orrs	r2, r1
 801337e:	61da      	str	r2, [r3, #28]
      break;
 8013380:	e021      	b.n	80133c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	68b9      	ldr	r1, [r7, #8]
 8013388:	4618      	mov	r0, r3
 801338a:	f000 fb03 	bl	8013994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	69da      	ldr	r2, [r3, #28]
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801339c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	69da      	ldr	r2, [r3, #28]
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80133ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	69d9      	ldr	r1, [r3, #28]
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	691b      	ldr	r3, [r3, #16]
 80133b8:	021a      	lsls	r2, r3, #8
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	430a      	orrs	r2, r1
 80133c0:	61da      	str	r2, [r3, #28]
      break;
 80133c2:	e000      	b.n	80133c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80133c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	2201      	movs	r2, #1
 80133ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	2200      	movs	r2, #0
 80133d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80133d6:	2300      	movs	r3, #0
}
 80133d8:	4618      	mov	r0, r3
 80133da:	3710      	adds	r7, #16
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}

080133e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b084      	sub	sp, #16
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80133f0:	2b01      	cmp	r3, #1
 80133f2:	d101      	bne.n	80133f8 <HAL_TIM_ConfigClockSource+0x18>
 80133f4:	2302      	movs	r3, #2
 80133f6:	e0a6      	b.n	8013546 <HAL_TIM_ConfigClockSource+0x166>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2201      	movs	r2, #1
 80133fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2202      	movs	r2, #2
 8013404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	689b      	ldr	r3, [r3, #8]
 801340e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8013416:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801341e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	68fa      	ldr	r2, [r7, #12]
 8013426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	2b40      	cmp	r3, #64	; 0x40
 801342e:	d067      	beq.n	8013500 <HAL_TIM_ConfigClockSource+0x120>
 8013430:	2b40      	cmp	r3, #64	; 0x40
 8013432:	d80b      	bhi.n	801344c <HAL_TIM_ConfigClockSource+0x6c>
 8013434:	2b10      	cmp	r3, #16
 8013436:	d073      	beq.n	8013520 <HAL_TIM_ConfigClockSource+0x140>
 8013438:	2b10      	cmp	r3, #16
 801343a:	d802      	bhi.n	8013442 <HAL_TIM_ConfigClockSource+0x62>
 801343c:	2b00      	cmp	r3, #0
 801343e:	d06f      	beq.n	8013520 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8013440:	e078      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8013442:	2b20      	cmp	r3, #32
 8013444:	d06c      	beq.n	8013520 <HAL_TIM_ConfigClockSource+0x140>
 8013446:	2b30      	cmp	r3, #48	; 0x30
 8013448:	d06a      	beq.n	8013520 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801344a:	e073      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801344c:	2b70      	cmp	r3, #112	; 0x70
 801344e:	d00d      	beq.n	801346c <HAL_TIM_ConfigClockSource+0x8c>
 8013450:	2b70      	cmp	r3, #112	; 0x70
 8013452:	d804      	bhi.n	801345e <HAL_TIM_ConfigClockSource+0x7e>
 8013454:	2b50      	cmp	r3, #80	; 0x50
 8013456:	d033      	beq.n	80134c0 <HAL_TIM_ConfigClockSource+0xe0>
 8013458:	2b60      	cmp	r3, #96	; 0x60
 801345a:	d041      	beq.n	80134e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 801345c:	e06a      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801345e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013462:	d066      	beq.n	8013532 <HAL_TIM_ConfigClockSource+0x152>
 8013464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013468:	d017      	beq.n	801349a <HAL_TIM_ConfigClockSource+0xba>
      break;
 801346a:	e063      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6818      	ldr	r0, [r3, #0]
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	6899      	ldr	r1, [r3, #8]
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	685a      	ldr	r2, [r3, #4]
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	f000 fb5a 	bl	8013b34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801348e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	68fa      	ldr	r2, [r7, #12]
 8013496:	609a      	str	r2, [r3, #8]
      break;
 8013498:	e04c      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6818      	ldr	r0, [r3, #0]
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	6899      	ldr	r1, [r3, #8]
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	685a      	ldr	r2, [r3, #4]
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	68db      	ldr	r3, [r3, #12]
 80134aa:	f000 fb43 	bl	8013b34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	689a      	ldr	r2, [r3, #8]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80134bc:	609a      	str	r2, [r3, #8]
      break;
 80134be:	e039      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6818      	ldr	r0, [r3, #0]
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	6859      	ldr	r1, [r3, #4]
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	68db      	ldr	r3, [r3, #12]
 80134cc:	461a      	mov	r2, r3
 80134ce:	f000 fab7 	bl	8013a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	2150      	movs	r1, #80	; 0x50
 80134d8:	4618      	mov	r0, r3
 80134da:	f000 fb10 	bl	8013afe <TIM_ITRx_SetConfig>
      break;
 80134de:	e029      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	6818      	ldr	r0, [r3, #0]
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	6859      	ldr	r1, [r3, #4]
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	68db      	ldr	r3, [r3, #12]
 80134ec:	461a      	mov	r2, r3
 80134ee:	f000 fad6 	bl	8013a9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2160      	movs	r1, #96	; 0x60
 80134f8:	4618      	mov	r0, r3
 80134fa:	f000 fb00 	bl	8013afe <TIM_ITRx_SetConfig>
      break;
 80134fe:	e019      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	6818      	ldr	r0, [r3, #0]
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	6859      	ldr	r1, [r3, #4]
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	68db      	ldr	r3, [r3, #12]
 801350c:	461a      	mov	r2, r3
 801350e:	f000 fa97 	bl	8013a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	2140      	movs	r1, #64	; 0x40
 8013518:	4618      	mov	r0, r3
 801351a:	f000 faf0 	bl	8013afe <TIM_ITRx_SetConfig>
      break;
 801351e:	e009      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	4619      	mov	r1, r3
 801352a:	4610      	mov	r0, r2
 801352c:	f000 fae7 	bl	8013afe <TIM_ITRx_SetConfig>
      break;
 8013530:	e000      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8013532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2201      	movs	r2, #1
 8013538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2200      	movs	r2, #0
 8013540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013544:	2300      	movs	r3, #0
}
 8013546:	4618      	mov	r0, r3
 8013548:	3710      	adds	r7, #16
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}

0801354e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801354e:	b480      	push	{r7}
 8013550:	b083      	sub	sp, #12
 8013552:	af00      	add	r7, sp, #0
 8013554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013556:	bf00      	nop
 8013558:	370c      	adds	r7, #12
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr

08013562 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013562:	b480      	push	{r7}
 8013564:	b083      	sub	sp, #12
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801356a:	bf00      	nop
 801356c:	370c      	adds	r7, #12
 801356e:	46bd      	mov	sp, r7
 8013570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013574:	4770      	bx	lr

08013576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013576:	b480      	push	{r7}
 8013578:	b083      	sub	sp, #12
 801357a:	af00      	add	r7, sp, #0
 801357c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801357e:	bf00      	nop
 8013580:	370c      	adds	r7, #12
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr

0801358a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801358a:	b480      	push	{r7}
 801358c:	b083      	sub	sp, #12
 801358e:	af00      	add	r7, sp, #0
 8013590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013592:	bf00      	nop
 8013594:	370c      	adds	r7, #12
 8013596:	46bd      	mov	sp, r7
 8013598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359c:	4770      	bx	lr
	...

080135a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80135a0:	b480      	push	{r7}
 80135a2:	b085      	sub	sp, #20
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	4a40      	ldr	r2, [pc, #256]	; (80136b4 <TIM_Base_SetConfig+0x114>)
 80135b4:	4293      	cmp	r3, r2
 80135b6:	d013      	beq.n	80135e0 <TIM_Base_SetConfig+0x40>
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80135be:	d00f      	beq.n	80135e0 <TIM_Base_SetConfig+0x40>
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	4a3d      	ldr	r2, [pc, #244]	; (80136b8 <TIM_Base_SetConfig+0x118>)
 80135c4:	4293      	cmp	r3, r2
 80135c6:	d00b      	beq.n	80135e0 <TIM_Base_SetConfig+0x40>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	4a3c      	ldr	r2, [pc, #240]	; (80136bc <TIM_Base_SetConfig+0x11c>)
 80135cc:	4293      	cmp	r3, r2
 80135ce:	d007      	beq.n	80135e0 <TIM_Base_SetConfig+0x40>
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	4a3b      	ldr	r2, [pc, #236]	; (80136c0 <TIM_Base_SetConfig+0x120>)
 80135d4:	4293      	cmp	r3, r2
 80135d6:	d003      	beq.n	80135e0 <TIM_Base_SetConfig+0x40>
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	4a3a      	ldr	r2, [pc, #232]	; (80136c4 <TIM_Base_SetConfig+0x124>)
 80135dc:	4293      	cmp	r3, r2
 80135de:	d108      	bne.n	80135f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80135e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	685b      	ldr	r3, [r3, #4]
 80135ec:	68fa      	ldr	r2, [r7, #12]
 80135ee:	4313      	orrs	r3, r2
 80135f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	4a2f      	ldr	r2, [pc, #188]	; (80136b4 <TIM_Base_SetConfig+0x114>)
 80135f6:	4293      	cmp	r3, r2
 80135f8:	d02b      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013600:	d027      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	4a2c      	ldr	r2, [pc, #176]	; (80136b8 <TIM_Base_SetConfig+0x118>)
 8013606:	4293      	cmp	r3, r2
 8013608:	d023      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	4a2b      	ldr	r2, [pc, #172]	; (80136bc <TIM_Base_SetConfig+0x11c>)
 801360e:	4293      	cmp	r3, r2
 8013610:	d01f      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	4a2a      	ldr	r2, [pc, #168]	; (80136c0 <TIM_Base_SetConfig+0x120>)
 8013616:	4293      	cmp	r3, r2
 8013618:	d01b      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	4a29      	ldr	r2, [pc, #164]	; (80136c4 <TIM_Base_SetConfig+0x124>)
 801361e:	4293      	cmp	r3, r2
 8013620:	d017      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4a28      	ldr	r2, [pc, #160]	; (80136c8 <TIM_Base_SetConfig+0x128>)
 8013626:	4293      	cmp	r3, r2
 8013628:	d013      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	4a27      	ldr	r2, [pc, #156]	; (80136cc <TIM_Base_SetConfig+0x12c>)
 801362e:	4293      	cmp	r3, r2
 8013630:	d00f      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	4a26      	ldr	r2, [pc, #152]	; (80136d0 <TIM_Base_SetConfig+0x130>)
 8013636:	4293      	cmp	r3, r2
 8013638:	d00b      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	4a25      	ldr	r2, [pc, #148]	; (80136d4 <TIM_Base_SetConfig+0x134>)
 801363e:	4293      	cmp	r3, r2
 8013640:	d007      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	4a24      	ldr	r2, [pc, #144]	; (80136d8 <TIM_Base_SetConfig+0x138>)
 8013646:	4293      	cmp	r3, r2
 8013648:	d003      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4a23      	ldr	r2, [pc, #140]	; (80136dc <TIM_Base_SetConfig+0x13c>)
 801364e:	4293      	cmp	r3, r2
 8013650:	d108      	bne.n	8013664 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	68db      	ldr	r3, [r3, #12]
 801365e:	68fa      	ldr	r2, [r7, #12]
 8013660:	4313      	orrs	r3, r2
 8013662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	695b      	ldr	r3, [r3, #20]
 801366e:	4313      	orrs	r3, r2
 8013670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	68fa      	ldr	r2, [r7, #12]
 8013676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	689a      	ldr	r2, [r3, #8]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	681a      	ldr	r2, [r3, #0]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	4a0a      	ldr	r2, [pc, #40]	; (80136b4 <TIM_Base_SetConfig+0x114>)
 801368c:	4293      	cmp	r3, r2
 801368e:	d003      	beq.n	8013698 <TIM_Base_SetConfig+0xf8>
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	4a0c      	ldr	r2, [pc, #48]	; (80136c4 <TIM_Base_SetConfig+0x124>)
 8013694:	4293      	cmp	r3, r2
 8013696:	d103      	bne.n	80136a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	691a      	ldr	r2, [r3, #16]
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2201      	movs	r2, #1
 80136a4:	615a      	str	r2, [r3, #20]
}
 80136a6:	bf00      	nop
 80136a8:	3714      	adds	r7, #20
 80136aa:	46bd      	mov	sp, r7
 80136ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b0:	4770      	bx	lr
 80136b2:	bf00      	nop
 80136b4:	40010000 	.word	0x40010000
 80136b8:	40000400 	.word	0x40000400
 80136bc:	40000800 	.word	0x40000800
 80136c0:	40000c00 	.word	0x40000c00
 80136c4:	40010400 	.word	0x40010400
 80136c8:	40014000 	.word	0x40014000
 80136cc:	40014400 	.word	0x40014400
 80136d0:	40014800 	.word	0x40014800
 80136d4:	40001800 	.word	0x40001800
 80136d8:	40001c00 	.word	0x40001c00
 80136dc:	40002000 	.word	0x40002000

080136e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80136e0:	b480      	push	{r7}
 80136e2:	b087      	sub	sp, #28
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6a1b      	ldr	r3, [r3, #32]
 80136ee:	f023 0201 	bic.w	r2, r3, #1
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	6a1b      	ldr	r3, [r3, #32]
 80136fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	699b      	ldr	r3, [r3, #24]
 8013706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801370e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	f023 0303 	bic.w	r3, r3, #3
 8013716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	68fa      	ldr	r2, [r7, #12]
 801371e:	4313      	orrs	r3, r2
 8013720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	f023 0302 	bic.w	r3, r3, #2
 8013728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	689b      	ldr	r3, [r3, #8]
 801372e:	697a      	ldr	r2, [r7, #20]
 8013730:	4313      	orrs	r3, r2
 8013732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	4a20      	ldr	r2, [pc, #128]	; (80137b8 <TIM_OC1_SetConfig+0xd8>)
 8013738:	4293      	cmp	r3, r2
 801373a:	d003      	beq.n	8013744 <TIM_OC1_SetConfig+0x64>
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	4a1f      	ldr	r2, [pc, #124]	; (80137bc <TIM_OC1_SetConfig+0xdc>)
 8013740:	4293      	cmp	r3, r2
 8013742:	d10c      	bne.n	801375e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	f023 0308 	bic.w	r3, r3, #8
 801374a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	697a      	ldr	r2, [r7, #20]
 8013752:	4313      	orrs	r3, r2
 8013754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	f023 0304 	bic.w	r3, r3, #4
 801375c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	4a15      	ldr	r2, [pc, #84]	; (80137b8 <TIM_OC1_SetConfig+0xd8>)
 8013762:	4293      	cmp	r3, r2
 8013764:	d003      	beq.n	801376e <TIM_OC1_SetConfig+0x8e>
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	4a14      	ldr	r2, [pc, #80]	; (80137bc <TIM_OC1_SetConfig+0xdc>)
 801376a:	4293      	cmp	r3, r2
 801376c:	d111      	bne.n	8013792 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801377c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	695b      	ldr	r3, [r3, #20]
 8013782:	693a      	ldr	r2, [r7, #16]
 8013784:	4313      	orrs	r3, r2
 8013786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	699b      	ldr	r3, [r3, #24]
 801378c:	693a      	ldr	r2, [r7, #16]
 801378e:	4313      	orrs	r3, r2
 8013790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	693a      	ldr	r2, [r7, #16]
 8013796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	68fa      	ldr	r2, [r7, #12]
 801379c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	685a      	ldr	r2, [r3, #4]
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	697a      	ldr	r2, [r7, #20]
 80137aa:	621a      	str	r2, [r3, #32]
}
 80137ac:	bf00      	nop
 80137ae:	371c      	adds	r7, #28
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr
 80137b8:	40010000 	.word	0x40010000
 80137bc:	40010400 	.word	0x40010400

080137c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80137c0:	b480      	push	{r7}
 80137c2:	b087      	sub	sp, #28
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
 80137c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6a1b      	ldr	r3, [r3, #32]
 80137ce:	f023 0210 	bic.w	r2, r3, #16
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6a1b      	ldr	r3, [r3, #32]
 80137da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	699b      	ldr	r3, [r3, #24]
 80137e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80137ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80137f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	021b      	lsls	r3, r3, #8
 80137fe:	68fa      	ldr	r2, [r7, #12]
 8013800:	4313      	orrs	r3, r2
 8013802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	f023 0320 	bic.w	r3, r3, #32
 801380a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	689b      	ldr	r3, [r3, #8]
 8013810:	011b      	lsls	r3, r3, #4
 8013812:	697a      	ldr	r2, [r7, #20]
 8013814:	4313      	orrs	r3, r2
 8013816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	4a22      	ldr	r2, [pc, #136]	; (80138a4 <TIM_OC2_SetConfig+0xe4>)
 801381c:	4293      	cmp	r3, r2
 801381e:	d003      	beq.n	8013828 <TIM_OC2_SetConfig+0x68>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	4a21      	ldr	r2, [pc, #132]	; (80138a8 <TIM_OC2_SetConfig+0xe8>)
 8013824:	4293      	cmp	r3, r2
 8013826:	d10d      	bne.n	8013844 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801382e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	011b      	lsls	r3, r3, #4
 8013836:	697a      	ldr	r2, [r7, #20]
 8013838:	4313      	orrs	r3, r2
 801383a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013842:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	4a17      	ldr	r2, [pc, #92]	; (80138a4 <TIM_OC2_SetConfig+0xe4>)
 8013848:	4293      	cmp	r3, r2
 801384a:	d003      	beq.n	8013854 <TIM_OC2_SetConfig+0x94>
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	4a16      	ldr	r2, [pc, #88]	; (80138a8 <TIM_OC2_SetConfig+0xe8>)
 8013850:	4293      	cmp	r3, r2
 8013852:	d113      	bne.n	801387c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801385a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801385c:	693b      	ldr	r3, [r7, #16]
 801385e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013862:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	695b      	ldr	r3, [r3, #20]
 8013868:	009b      	lsls	r3, r3, #2
 801386a:	693a      	ldr	r2, [r7, #16]
 801386c:	4313      	orrs	r3, r2
 801386e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	699b      	ldr	r3, [r3, #24]
 8013874:	009b      	lsls	r3, r3, #2
 8013876:	693a      	ldr	r2, [r7, #16]
 8013878:	4313      	orrs	r3, r2
 801387a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	693a      	ldr	r2, [r7, #16]
 8013880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	68fa      	ldr	r2, [r7, #12]
 8013886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	685a      	ldr	r2, [r3, #4]
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	697a      	ldr	r2, [r7, #20]
 8013894:	621a      	str	r2, [r3, #32]
}
 8013896:	bf00      	nop
 8013898:	371c      	adds	r7, #28
 801389a:	46bd      	mov	sp, r7
 801389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a0:	4770      	bx	lr
 80138a2:	bf00      	nop
 80138a4:	40010000 	.word	0x40010000
 80138a8:	40010400 	.word	0x40010400

080138ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80138ac:	b480      	push	{r7}
 80138ae:	b087      	sub	sp, #28
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	6a1b      	ldr	r3, [r3, #32]
 80138ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6a1b      	ldr	r3, [r3, #32]
 80138c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	69db      	ldr	r3, [r3, #28]
 80138d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80138da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	f023 0303 	bic.w	r3, r3, #3
 80138e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	68fa      	ldr	r2, [r7, #12]
 80138ea:	4313      	orrs	r3, r2
 80138ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80138f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	689b      	ldr	r3, [r3, #8]
 80138fa:	021b      	lsls	r3, r3, #8
 80138fc:	697a      	ldr	r2, [r7, #20]
 80138fe:	4313      	orrs	r3, r2
 8013900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	4a21      	ldr	r2, [pc, #132]	; (801398c <TIM_OC3_SetConfig+0xe0>)
 8013906:	4293      	cmp	r3, r2
 8013908:	d003      	beq.n	8013912 <TIM_OC3_SetConfig+0x66>
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	4a20      	ldr	r2, [pc, #128]	; (8013990 <TIM_OC3_SetConfig+0xe4>)
 801390e:	4293      	cmp	r3, r2
 8013910:	d10d      	bne.n	801392e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	68db      	ldr	r3, [r3, #12]
 801391e:	021b      	lsls	r3, r3, #8
 8013920:	697a      	ldr	r2, [r7, #20]
 8013922:	4313      	orrs	r3, r2
 8013924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801392c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	4a16      	ldr	r2, [pc, #88]	; (801398c <TIM_OC3_SetConfig+0xe0>)
 8013932:	4293      	cmp	r3, r2
 8013934:	d003      	beq.n	801393e <TIM_OC3_SetConfig+0x92>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	4a15      	ldr	r2, [pc, #84]	; (8013990 <TIM_OC3_SetConfig+0xe4>)
 801393a:	4293      	cmp	r3, r2
 801393c:	d113      	bne.n	8013966 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801394c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	695b      	ldr	r3, [r3, #20]
 8013952:	011b      	lsls	r3, r3, #4
 8013954:	693a      	ldr	r2, [r7, #16]
 8013956:	4313      	orrs	r3, r2
 8013958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	699b      	ldr	r3, [r3, #24]
 801395e:	011b      	lsls	r3, r3, #4
 8013960:	693a      	ldr	r2, [r7, #16]
 8013962:	4313      	orrs	r3, r2
 8013964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	693a      	ldr	r2, [r7, #16]
 801396a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	68fa      	ldr	r2, [r7, #12]
 8013970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	685a      	ldr	r2, [r3, #4]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	697a      	ldr	r2, [r7, #20]
 801397e:	621a      	str	r2, [r3, #32]
}
 8013980:	bf00      	nop
 8013982:	371c      	adds	r7, #28
 8013984:	46bd      	mov	sp, r7
 8013986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398a:	4770      	bx	lr
 801398c:	40010000 	.word	0x40010000
 8013990:	40010400 	.word	0x40010400

08013994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013994:	b480      	push	{r7}
 8013996:	b087      	sub	sp, #28
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6a1b      	ldr	r3, [r3, #32]
 80139a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	6a1b      	ldr	r3, [r3, #32]
 80139ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	685b      	ldr	r3, [r3, #4]
 80139b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	69db      	ldr	r3, [r3, #28]
 80139ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80139c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80139ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	021b      	lsls	r3, r3, #8
 80139d2:	68fa      	ldr	r2, [r7, #12]
 80139d4:	4313      	orrs	r3, r2
 80139d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80139de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	689b      	ldr	r3, [r3, #8]
 80139e4:	031b      	lsls	r3, r3, #12
 80139e6:	693a      	ldr	r2, [r7, #16]
 80139e8:	4313      	orrs	r3, r2
 80139ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	4a12      	ldr	r2, [pc, #72]	; (8013a38 <TIM_OC4_SetConfig+0xa4>)
 80139f0:	4293      	cmp	r3, r2
 80139f2:	d003      	beq.n	80139fc <TIM_OC4_SetConfig+0x68>
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	4a11      	ldr	r2, [pc, #68]	; (8013a3c <TIM_OC4_SetConfig+0xa8>)
 80139f8:	4293      	cmp	r3, r2
 80139fa:	d109      	bne.n	8013a10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	695b      	ldr	r3, [r3, #20]
 8013a08:	019b      	lsls	r3, r3, #6
 8013a0a:	697a      	ldr	r2, [r7, #20]
 8013a0c:	4313      	orrs	r3, r2
 8013a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	697a      	ldr	r2, [r7, #20]
 8013a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	68fa      	ldr	r2, [r7, #12]
 8013a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	685a      	ldr	r2, [r3, #4]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	693a      	ldr	r2, [r7, #16]
 8013a28:	621a      	str	r2, [r3, #32]
}
 8013a2a:	bf00      	nop
 8013a2c:	371c      	adds	r7, #28
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop
 8013a38:	40010000 	.word	0x40010000
 8013a3c:	40010400 	.word	0x40010400

08013a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013a40:	b480      	push	{r7}
 8013a42:	b087      	sub	sp, #28
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	60f8      	str	r0, [r7, #12]
 8013a48:	60b9      	str	r1, [r7, #8]
 8013a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	6a1b      	ldr	r3, [r3, #32]
 8013a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	6a1b      	ldr	r3, [r3, #32]
 8013a56:	f023 0201 	bic.w	r2, r3, #1
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	699b      	ldr	r3, [r3, #24]
 8013a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	011b      	lsls	r3, r3, #4
 8013a70:	693a      	ldr	r2, [r7, #16]
 8013a72:	4313      	orrs	r3, r2
 8013a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	f023 030a 	bic.w	r3, r3, #10
 8013a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013a7e:	697a      	ldr	r2, [r7, #20]
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	4313      	orrs	r3, r2
 8013a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	693a      	ldr	r2, [r7, #16]
 8013a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	697a      	ldr	r2, [r7, #20]
 8013a90:	621a      	str	r2, [r3, #32]
}
 8013a92:	bf00      	nop
 8013a94:	371c      	adds	r7, #28
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr

08013a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013a9e:	b480      	push	{r7}
 8013aa0:	b087      	sub	sp, #28
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	60f8      	str	r0, [r7, #12]
 8013aa6:	60b9      	str	r1, [r7, #8]
 8013aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	6a1b      	ldr	r3, [r3, #32]
 8013aae:	f023 0210 	bic.w	r2, r3, #16
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	699b      	ldr	r3, [r3, #24]
 8013aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	6a1b      	ldr	r3, [r3, #32]
 8013ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	031b      	lsls	r3, r3, #12
 8013ace:	697a      	ldr	r2, [r7, #20]
 8013ad0:	4313      	orrs	r3, r2
 8013ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013ad4:	693b      	ldr	r3, [r7, #16]
 8013ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013ada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	011b      	lsls	r3, r3, #4
 8013ae0:	693a      	ldr	r2, [r7, #16]
 8013ae2:	4313      	orrs	r3, r2
 8013ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	697a      	ldr	r2, [r7, #20]
 8013aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	693a      	ldr	r2, [r7, #16]
 8013af0:	621a      	str	r2, [r3, #32]
}
 8013af2:	bf00      	nop
 8013af4:	371c      	adds	r7, #28
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr

08013afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013afe:	b480      	push	{r7}
 8013b00:	b085      	sub	sp, #20
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	6078      	str	r0, [r7, #4]
 8013b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	689b      	ldr	r3, [r3, #8]
 8013b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013b16:	683a      	ldr	r2, [r7, #0]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	f043 0307 	orr.w	r3, r3, #7
 8013b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	68fa      	ldr	r2, [r7, #12]
 8013b26:	609a      	str	r2, [r3, #8]
}
 8013b28:	bf00      	nop
 8013b2a:	3714      	adds	r7, #20
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b32:	4770      	bx	lr

08013b34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013b34:	b480      	push	{r7}
 8013b36:	b087      	sub	sp, #28
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	60f8      	str	r0, [r7, #12]
 8013b3c:	60b9      	str	r1, [r7, #8]
 8013b3e:	607a      	str	r2, [r7, #4]
 8013b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	689b      	ldr	r3, [r3, #8]
 8013b46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013b4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	021a      	lsls	r2, r3, #8
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	431a      	orrs	r2, r3
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	4313      	orrs	r3, r2
 8013b5c:	697a      	ldr	r2, [r7, #20]
 8013b5e:	4313      	orrs	r3, r2
 8013b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	697a      	ldr	r2, [r7, #20]
 8013b66:	609a      	str	r2, [r3, #8]
}
 8013b68:	bf00      	nop
 8013b6a:	371c      	adds	r7, #28
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b72:	4770      	bx	lr

08013b74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013b74:	b480      	push	{r7}
 8013b76:	b087      	sub	sp, #28
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	60f8      	str	r0, [r7, #12]
 8013b7c:	60b9      	str	r1, [r7, #8]
 8013b7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	f003 031f 	and.w	r3, r3, #31
 8013b86:	2201      	movs	r2, #1
 8013b88:	fa02 f303 	lsl.w	r3, r2, r3
 8013b8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	6a1a      	ldr	r2, [r3, #32]
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	43db      	mvns	r3, r3
 8013b96:	401a      	ands	r2, r3
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	6a1a      	ldr	r2, [r3, #32]
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	f003 031f 	and.w	r3, r3, #31
 8013ba6:	6879      	ldr	r1, [r7, #4]
 8013ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8013bac:	431a      	orrs	r2, r3
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	621a      	str	r2, [r3, #32]
}
 8013bb2:	bf00      	nop
 8013bb4:	371c      	adds	r7, #28
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bbc:	4770      	bx	lr

08013bbe <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013bbe:	b580      	push	{r7, lr}
 8013bc0:	b084      	sub	sp, #16
 8013bc2:	af00      	add	r7, sp, #0
 8013bc4:	6078      	str	r0, [r7, #4]
 8013bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	2b04      	cmp	r3, #4
 8013bcc:	d00d      	beq.n	8013bea <HAL_TIMEx_OCN_Start_IT+0x2c>
 8013bce:	2b08      	cmp	r3, #8
 8013bd0:	d014      	beq.n	8013bfc <HAL_TIMEx_OCN_Start_IT+0x3e>
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d000      	beq.n	8013bd8 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8013bd6:	e01a      	b.n	8013c0e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	68da      	ldr	r2, [r3, #12]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	f042 0202 	orr.w	r2, r2, #2
 8013be6:	60da      	str	r2, [r3, #12]
      break;
 8013be8:	e011      	b.n	8013c0e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	68da      	ldr	r2, [r3, #12]
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	f042 0204 	orr.w	r2, r2, #4
 8013bf8:	60da      	str	r2, [r3, #12]
      break;
 8013bfa:	e008      	b.n	8013c0e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	68da      	ldr	r2, [r3, #12]
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	f042 0208 	orr.w	r2, r2, #8
 8013c0a:	60da      	str	r2, [r3, #12]
      break;
 8013c0c:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	68da      	ldr	r2, [r3, #12]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013c1c:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	2204      	movs	r2, #4
 8013c24:	6839      	ldr	r1, [r7, #0]
 8013c26:	4618      	mov	r0, r3
 8013c28:	f000 f976 	bl	8013f18 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013c3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	689b      	ldr	r3, [r3, #8]
 8013c42:	f003 0307 	and.w	r3, r3, #7
 8013c46:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	2b06      	cmp	r3, #6
 8013c4c:	d007      	beq.n	8013c5e <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	f042 0201 	orr.w	r2, r2, #1
 8013c5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013c5e:	2300      	movs	r3, #0
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3710      	adds	r7, #16
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b084      	sub	sp, #16
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
 8013c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	2b04      	cmp	r3, #4
 8013c76:	d00d      	beq.n	8013c94 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8013c78:	2b08      	cmp	r3, #8
 8013c7a:	d014      	beq.n	8013ca6 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d000      	beq.n	8013c82 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8013c80:	e01a      	b.n	8013cb8 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	68da      	ldr	r2, [r3, #12]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	f022 0202 	bic.w	r2, r2, #2
 8013c90:	60da      	str	r2, [r3, #12]
      break;
 8013c92:	e011      	b.n	8013cb8 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	68da      	ldr	r2, [r3, #12]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	f022 0204 	bic.w	r2, r2, #4
 8013ca2:	60da      	str	r2, [r3, #12]
      break;
 8013ca4:	e008      	b.n	8013cb8 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	68da      	ldr	r2, [r3, #12]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	f022 0208 	bic.w	r2, r2, #8
 8013cb4:	60da      	str	r2, [r3, #12]
      break;
 8013cb6:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	6839      	ldr	r1, [r7, #0]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f000 f929 	bl	8013f18 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	6a1b      	ldr	r3, [r3, #32]
 8013ccc:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8013cce:	68fa      	ldr	r2, [r7, #12]
 8013cd0:	f240 4344 	movw	r3, #1092	; 0x444
 8013cd4:	4013      	ands	r3, r2
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d107      	bne.n	8013cea <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	68da      	ldr	r2, [r3, #12]
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013ce8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	6a1a      	ldr	r2, [r3, #32]
 8013cf0:	f241 1311 	movw	r3, #4369	; 0x1111
 8013cf4:	4013      	ands	r3, r2
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d10f      	bne.n	8013d1a <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	6a1a      	ldr	r2, [r3, #32]
 8013d00:	f240 4344 	movw	r3, #1092	; 0x444
 8013d04:	4013      	ands	r3, r2
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d107      	bne.n	8013d1a <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013d18:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	6a1a      	ldr	r2, [r3, #32]
 8013d20:	f241 1311 	movw	r3, #4369	; 0x1111
 8013d24:	4013      	ands	r3, r2
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d10f      	bne.n	8013d4a <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	6a1a      	ldr	r2, [r3, #32]
 8013d30:	f240 4344 	movw	r3, #1092	; 0x444
 8013d34:	4013      	ands	r3, r2
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d107      	bne.n	8013d4a <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	681a      	ldr	r2, [r3, #0]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	f022 0201 	bic.w	r2, r2, #1
 8013d48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013d4a:	2300      	movs	r3, #0
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3710      	adds	r7, #16
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}

08013d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013d54:	b480      	push	{r7}
 8013d56:	b085      	sub	sp, #20
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d64:	2b01      	cmp	r3, #1
 8013d66:	d101      	bne.n	8013d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013d68:	2302      	movs	r3, #2
 8013d6a:	e05a      	b.n	8013e22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2201      	movs	r2, #1
 8013d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2202      	movs	r2, #2
 8013d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	689b      	ldr	r3, [r3, #8]
 8013d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	68fa      	ldr	r2, [r7, #12]
 8013d9a:	4313      	orrs	r3, r2
 8013d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	68fa      	ldr	r2, [r7, #12]
 8013da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	4a21      	ldr	r2, [pc, #132]	; (8013e30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8013dac:	4293      	cmp	r3, r2
 8013dae:	d022      	beq.n	8013df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013db8:	d01d      	beq.n	8013df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	4a1d      	ldr	r2, [pc, #116]	; (8013e34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8013dc0:	4293      	cmp	r3, r2
 8013dc2:	d018      	beq.n	8013df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	4a1b      	ldr	r2, [pc, #108]	; (8013e38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8013dca:	4293      	cmp	r3, r2
 8013dcc:	d013      	beq.n	8013df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	4a1a      	ldr	r2, [pc, #104]	; (8013e3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013dd4:	4293      	cmp	r3, r2
 8013dd6:	d00e      	beq.n	8013df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	4a18      	ldr	r2, [pc, #96]	; (8013e40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8013dde:	4293      	cmp	r3, r2
 8013de0:	d009      	beq.n	8013df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	4a17      	ldr	r2, [pc, #92]	; (8013e44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8013de8:	4293      	cmp	r3, r2
 8013dea:	d004      	beq.n	8013df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	4a15      	ldr	r2, [pc, #84]	; (8013e48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013df2:	4293      	cmp	r3, r2
 8013df4:	d10c      	bne.n	8013e10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	685b      	ldr	r3, [r3, #4]
 8013e02:	68ba      	ldr	r2, [r7, #8]
 8013e04:	4313      	orrs	r3, r2
 8013e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	68ba      	ldr	r2, [r7, #8]
 8013e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2201      	movs	r2, #1
 8013e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013e20:	2300      	movs	r3, #0
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3714      	adds	r7, #20
 8013e26:	46bd      	mov	sp, r7
 8013e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2c:	4770      	bx	lr
 8013e2e:	bf00      	nop
 8013e30:	40010000 	.word	0x40010000
 8013e34:	40000400 	.word	0x40000400
 8013e38:	40000800 	.word	0x40000800
 8013e3c:	40000c00 	.word	0x40000c00
 8013e40:	40010400 	.word	0x40010400
 8013e44:	40014000 	.word	0x40014000
 8013e48:	40001800 	.word	0x40001800

08013e4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b085      	sub	sp, #20
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013e56:	2300      	movs	r3, #0
 8013e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013e60:	2b01      	cmp	r3, #1
 8013e62:	d101      	bne.n	8013e68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013e64:	2302      	movs	r3, #2
 8013e66:	e03d      	b.n	8013ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2201      	movs	r2, #1
 8013e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	68db      	ldr	r3, [r3, #12]
 8013e7a:	4313      	orrs	r3, r2
 8013e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	689b      	ldr	r3, [r3, #8]
 8013e88:	4313      	orrs	r3, r2
 8013e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013e92:	683b      	ldr	r3, [r7, #0]
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	4313      	orrs	r3, r2
 8013e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	4313      	orrs	r3, r2
 8013ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	691b      	ldr	r3, [r3, #16]
 8013eb2:	4313      	orrs	r3, r2
 8013eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	695b      	ldr	r3, [r3, #20]
 8013ec0:	4313      	orrs	r3, r2
 8013ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	69db      	ldr	r3, [r3, #28]
 8013ece:	4313      	orrs	r3, r2
 8013ed0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	68fa      	ldr	r2, [r7, #12]
 8013ed8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2200      	movs	r2, #0
 8013ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013ee2:	2300      	movs	r3, #0
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3714      	adds	r7, #20
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr

08013ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013ef0:	b480      	push	{r7}
 8013ef2:	b083      	sub	sp, #12
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013ef8:	bf00      	nop
 8013efa:	370c      	adds	r7, #12
 8013efc:	46bd      	mov	sp, r7
 8013efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f02:	4770      	bx	lr

08013f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013f04:	b480      	push	{r7}
 8013f06:	b083      	sub	sp, #12
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013f0c:	bf00      	nop
 8013f0e:	370c      	adds	r7, #12
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr

08013f18 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b087      	sub	sp, #28
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	60f8      	str	r0, [r7, #12]
 8013f20:	60b9      	str	r1, [r7, #8]
 8013f22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	f003 031f 	and.w	r3, r3, #31
 8013f2a:	2204      	movs	r2, #4
 8013f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8013f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	6a1a      	ldr	r2, [r3, #32]
 8013f36:	697b      	ldr	r3, [r7, #20]
 8013f38:	43db      	mvns	r3, r3
 8013f3a:	401a      	ands	r2, r3
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	6a1a      	ldr	r2, [r3, #32]
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	f003 031f 	and.w	r3, r3, #31
 8013f4a:	6879      	ldr	r1, [r7, #4]
 8013f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8013f50:	431a      	orrs	r2, r3
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	621a      	str	r2, [r3, #32]
}
 8013f56:	bf00      	nop
 8013f58:	371c      	adds	r7, #28
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f60:	4770      	bx	lr

08013f62 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b082      	sub	sp, #8
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d101      	bne.n	8013f74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013f70:	2301      	movs	r3, #1
 8013f72:	e03f      	b.n	8013ff4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013f7a:	b2db      	uxtb	r3, r3
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d106      	bne.n	8013f8e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2200      	movs	r2, #0
 8013f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f7f9 fd09 	bl	800d9a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2224      	movs	r2, #36	; 0x24
 8013f92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	68da      	ldr	r2, [r3, #12]
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013fa4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f000 f9b2 	bl	8014310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	691a      	ldr	r2, [r3, #16]
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013fba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	695a      	ldr	r2, [r3, #20]
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013fca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	68da      	ldr	r2, [r3, #12]
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013fda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2220      	movs	r2, #32
 8013fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	2220      	movs	r2, #32
 8013fee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8013ff2:	2300      	movs	r3, #0
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3708      	adds	r7, #8
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b088      	sub	sp, #32
 8014000:	af02      	add	r7, sp, #8
 8014002:	60f8      	str	r0, [r7, #12]
 8014004:	60b9      	str	r1, [r7, #8]
 8014006:	603b      	str	r3, [r7, #0]
 8014008:	4613      	mov	r3, r2
 801400a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801400c:	2300      	movs	r3, #0
 801400e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014016:	b2db      	uxtb	r3, r3
 8014018:	2b20      	cmp	r3, #32
 801401a:	f040 8083 	bne.w	8014124 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d002      	beq.n	801402a <HAL_UART_Transmit+0x2e>
 8014024:	88fb      	ldrh	r3, [r7, #6]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d101      	bne.n	801402e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801402a:	2301      	movs	r3, #1
 801402c:	e07b      	b.n	8014126 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014034:	2b01      	cmp	r3, #1
 8014036:	d101      	bne.n	801403c <HAL_UART_Transmit+0x40>
 8014038:	2302      	movs	r3, #2
 801403a:	e074      	b.n	8014126 <HAL_UART_Transmit+0x12a>
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	2201      	movs	r2, #1
 8014040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2200      	movs	r2, #0
 8014048:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	2221      	movs	r2, #33	; 0x21
 801404e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8014052:	f7fb fd25 	bl	800faa0 <HAL_GetTick>
 8014056:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	88fa      	ldrh	r2, [r7, #6]
 801405c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	88fa      	ldrh	r2, [r7, #6]
 8014062:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	2200      	movs	r2, #0
 8014068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801406c:	e042      	b.n	80140f4 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014072:	b29b      	uxth	r3, r3
 8014074:	3b01      	subs	r3, #1
 8014076:	b29a      	uxth	r2, r3
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	689b      	ldr	r3, [r3, #8]
 8014080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014084:	d122      	bne.n	80140cc <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	9300      	str	r3, [sp, #0]
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	2200      	movs	r2, #0
 801408e:	2180      	movs	r1, #128	; 0x80
 8014090:	68f8      	ldr	r0, [r7, #12]
 8014092:	f000 f8f2 	bl	801427a <UART_WaitOnFlagUntilTimeout>
 8014096:	4603      	mov	r3, r0
 8014098:	2b00      	cmp	r3, #0
 801409a:	d001      	beq.n	80140a0 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801409c:	2303      	movs	r3, #3
 801409e:	e042      	b.n	8014126 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80140a4:	693b      	ldr	r3, [r7, #16]
 80140a6:	881b      	ldrh	r3, [r3, #0]
 80140a8:	461a      	mov	r2, r3
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80140b2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	691b      	ldr	r3, [r3, #16]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d103      	bne.n	80140c4 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	3302      	adds	r3, #2
 80140c0:	60bb      	str	r3, [r7, #8]
 80140c2:	e017      	b.n	80140f4 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	3301      	adds	r3, #1
 80140c8:	60bb      	str	r3, [r7, #8]
 80140ca:	e013      	b.n	80140f4 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	9300      	str	r3, [sp, #0]
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	2200      	movs	r2, #0
 80140d4:	2180      	movs	r1, #128	; 0x80
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	f000 f8cf 	bl	801427a <UART_WaitOnFlagUntilTimeout>
 80140dc:	4603      	mov	r3, r0
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d001      	beq.n	80140e6 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80140e2:	2303      	movs	r3, #3
 80140e4:	e01f      	b.n	8014126 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	1c5a      	adds	r2, r3, #1
 80140ea:	60ba      	str	r2, [r7, #8]
 80140ec:	781a      	ldrb	r2, [r3, #0]
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80140f8:	b29b      	uxth	r3, r3
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d1b7      	bne.n	801406e <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	9300      	str	r3, [sp, #0]
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	2200      	movs	r2, #0
 8014106:	2140      	movs	r1, #64	; 0x40
 8014108:	68f8      	ldr	r0, [r7, #12]
 801410a:	f000 f8b6 	bl	801427a <UART_WaitOnFlagUntilTimeout>
 801410e:	4603      	mov	r3, r0
 8014110:	2b00      	cmp	r3, #0
 8014112:	d001      	beq.n	8014118 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8014114:	2303      	movs	r3, #3
 8014116:	e006      	b.n	8014126 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	2220      	movs	r2, #32
 801411c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8014120:	2300      	movs	r3, #0
 8014122:	e000      	b.n	8014126 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8014124:	2302      	movs	r3, #2
  }
}
 8014126:	4618      	mov	r0, r3
 8014128:	3718      	adds	r7, #24
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}

0801412e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801412e:	b580      	push	{r7, lr}
 8014130:	b088      	sub	sp, #32
 8014132:	af02      	add	r7, sp, #8
 8014134:	60f8      	str	r0, [r7, #12]
 8014136:	60b9      	str	r1, [r7, #8]
 8014138:	603b      	str	r3, [r7, #0]
 801413a:	4613      	mov	r3, r2
 801413c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801413e:	2300      	movs	r3, #0
 8014140:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014148:	b2db      	uxtb	r3, r3
 801414a:	2b20      	cmp	r3, #32
 801414c:	f040 8090 	bne.w	8014270 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d002      	beq.n	801415c <HAL_UART_Receive+0x2e>
 8014156:	88fb      	ldrh	r3, [r7, #6]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d101      	bne.n	8014160 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 801415c:	2301      	movs	r3, #1
 801415e:	e088      	b.n	8014272 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014166:	2b01      	cmp	r3, #1
 8014168:	d101      	bne.n	801416e <HAL_UART_Receive+0x40>
 801416a:	2302      	movs	r3, #2
 801416c:	e081      	b.n	8014272 <HAL_UART_Receive+0x144>
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2201      	movs	r2, #1
 8014172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	2200      	movs	r2, #0
 801417a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	2222      	movs	r2, #34	; 0x22
 8014180:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8014184:	f7fb fc8c 	bl	800faa0 <HAL_GetTick>
 8014188:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	88fa      	ldrh	r2, [r7, #6]
 801418e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	88fa      	ldrh	r2, [r7, #6]
 8014194:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	2200      	movs	r2, #0
 801419a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 801419e:	e05c      	b.n	801425a <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80141a4:	b29b      	uxth	r3, r3
 80141a6:	3b01      	subs	r3, #1
 80141a8:	b29a      	uxth	r2, r3
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	689b      	ldr	r3, [r3, #8]
 80141b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80141b6:	d12b      	bne.n	8014210 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	9300      	str	r3, [sp, #0]
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	2200      	movs	r2, #0
 80141c0:	2120      	movs	r1, #32
 80141c2:	68f8      	ldr	r0, [r7, #12]
 80141c4:	f000 f859 	bl	801427a <UART_WaitOnFlagUntilTimeout>
 80141c8:	4603      	mov	r3, r0
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d001      	beq.n	80141d2 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80141ce:	2303      	movs	r3, #3
 80141d0:	e04f      	b.n	8014272 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	691b      	ldr	r3, [r3, #16]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d10c      	bne.n	80141f8 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141ea:	b29a      	uxth	r2, r3
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	3302      	adds	r3, #2
 80141f4:	60bb      	str	r3, [r7, #8]
 80141f6:	e030      	b.n	801425a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	b29b      	uxth	r3, r3
 8014200:	b2db      	uxtb	r3, r3
 8014202:	b29a      	uxth	r2, r3
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	3301      	adds	r3, #1
 801420c:	60bb      	str	r3, [r7, #8]
 801420e:	e024      	b.n	801425a <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	9300      	str	r3, [sp, #0]
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	2200      	movs	r2, #0
 8014218:	2120      	movs	r1, #32
 801421a:	68f8      	ldr	r0, [r7, #12]
 801421c:	f000 f82d 	bl	801427a <UART_WaitOnFlagUntilTimeout>
 8014220:	4603      	mov	r3, r0
 8014222:	2b00      	cmp	r3, #0
 8014224:	d001      	beq.n	801422a <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8014226:	2303      	movs	r3, #3
 8014228:	e023      	b.n	8014272 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	691b      	ldr	r3, [r3, #16]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d108      	bne.n	8014244 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	6859      	ldr	r1, [r3, #4]
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	1c5a      	adds	r2, r3, #1
 801423c:	60ba      	str	r2, [r7, #8]
 801423e:	b2ca      	uxtb	r2, r1
 8014240:	701a      	strb	r2, [r3, #0]
 8014242:	e00a      	b.n	801425a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	685b      	ldr	r3, [r3, #4]
 801424a:	b2da      	uxtb	r2, r3
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	1c59      	adds	r1, r3, #1
 8014250:	60b9      	str	r1, [r7, #8]
 8014252:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014256:	b2d2      	uxtb	r2, r2
 8014258:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801425e:	b29b      	uxth	r3, r3
 8014260:	2b00      	cmp	r3, #0
 8014262:	d19d      	bne.n	80141a0 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	2220      	movs	r2, #32
 8014268:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 801426c:	2300      	movs	r3, #0
 801426e:	e000      	b.n	8014272 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8014270:	2302      	movs	r3, #2
  }
}
 8014272:	4618      	mov	r0, r3
 8014274:	3718      	adds	r7, #24
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}

0801427a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801427a:	b580      	push	{r7, lr}
 801427c:	b084      	sub	sp, #16
 801427e:	af00      	add	r7, sp, #0
 8014280:	60f8      	str	r0, [r7, #12]
 8014282:	60b9      	str	r1, [r7, #8]
 8014284:	603b      	str	r3, [r7, #0]
 8014286:	4613      	mov	r3, r2
 8014288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801428a:	e02c      	b.n	80142e6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801428c:	69bb      	ldr	r3, [r7, #24]
 801428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014292:	d028      	beq.n	80142e6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8014294:	69bb      	ldr	r3, [r7, #24]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d007      	beq.n	80142aa <UART_WaitOnFlagUntilTimeout+0x30>
 801429a:	f7fb fc01 	bl	800faa0 <HAL_GetTick>
 801429e:	4602      	mov	r2, r0
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	1ad3      	subs	r3, r2, r3
 80142a4:	69ba      	ldr	r2, [r7, #24]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d21d      	bcs.n	80142e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	68da      	ldr	r2, [r3, #12]
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80142b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	695a      	ldr	r2, [r3, #20]
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	f022 0201 	bic.w	r2, r2, #1
 80142c8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	2220      	movs	r2, #32
 80142ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	2220      	movs	r2, #32
 80142d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	2200      	movs	r2, #0
 80142de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80142e2:	2303      	movs	r3, #3
 80142e4:	e00f      	b.n	8014306 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	681a      	ldr	r2, [r3, #0]
 80142ec:	68bb      	ldr	r3, [r7, #8]
 80142ee:	4013      	ands	r3, r2
 80142f0:	68ba      	ldr	r2, [r7, #8]
 80142f2:	429a      	cmp	r2, r3
 80142f4:	bf0c      	ite	eq
 80142f6:	2301      	moveq	r3, #1
 80142f8:	2300      	movne	r3, #0
 80142fa:	b2db      	uxtb	r3, r3
 80142fc:	461a      	mov	r2, r3
 80142fe:	79fb      	ldrb	r3, [r7, #7]
 8014300:	429a      	cmp	r2, r3
 8014302:	d0c3      	beq.n	801428c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014304:	2300      	movs	r3, #0
}
 8014306:	4618      	mov	r0, r3
 8014308:	3710      	adds	r7, #16
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
	...

08014310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014314:	b085      	sub	sp, #20
 8014316:	af00      	add	r7, sp, #0
 8014318:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	691b      	ldr	r3, [r3, #16]
 8014320:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	68da      	ldr	r2, [r3, #12]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	430a      	orrs	r2, r1
 801432e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	689a      	ldr	r2, [r3, #8]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	691b      	ldr	r3, [r3, #16]
 8014338:	431a      	orrs	r2, r3
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	695b      	ldr	r3, [r3, #20]
 801433e:	431a      	orrs	r2, r3
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	69db      	ldr	r3, [r3, #28]
 8014344:	4313      	orrs	r3, r2
 8014346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	68db      	ldr	r3, [r3, #12]
 801434e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8014352:	f023 030c 	bic.w	r3, r3, #12
 8014356:	687a      	ldr	r2, [r7, #4]
 8014358:	6812      	ldr	r2, [r2, #0]
 801435a:	68f9      	ldr	r1, [r7, #12]
 801435c:	430b      	orrs	r3, r1
 801435e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	695b      	ldr	r3, [r3, #20]
 8014366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	699a      	ldr	r2, [r3, #24]
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	430a      	orrs	r2, r1
 8014374:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	69db      	ldr	r3, [r3, #28]
 801437a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801437e:	f040 818b 	bne.w	8014698 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	4ac1      	ldr	r2, [pc, #772]	; (801468c <UART_SetConfig+0x37c>)
 8014388:	4293      	cmp	r3, r2
 801438a:	d005      	beq.n	8014398 <UART_SetConfig+0x88>
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	4abf      	ldr	r2, [pc, #764]	; (8014690 <UART_SetConfig+0x380>)
 8014392:	4293      	cmp	r3, r2
 8014394:	f040 80bd 	bne.w	8014512 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014398:	f7fd fce2 	bl	8011d60 <HAL_RCC_GetPCLK2Freq>
 801439c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	461d      	mov	r5, r3
 80143a2:	f04f 0600 	mov.w	r6, #0
 80143a6:	46a8      	mov	r8, r5
 80143a8:	46b1      	mov	r9, r6
 80143aa:	eb18 0308 	adds.w	r3, r8, r8
 80143ae:	eb49 0409 	adc.w	r4, r9, r9
 80143b2:	4698      	mov	r8, r3
 80143b4:	46a1      	mov	r9, r4
 80143b6:	eb18 0805 	adds.w	r8, r8, r5
 80143ba:	eb49 0906 	adc.w	r9, r9, r6
 80143be:	f04f 0100 	mov.w	r1, #0
 80143c2:	f04f 0200 	mov.w	r2, #0
 80143c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80143ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80143ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80143d2:	4688      	mov	r8, r1
 80143d4:	4691      	mov	r9, r2
 80143d6:	eb18 0005 	adds.w	r0, r8, r5
 80143da:	eb49 0106 	adc.w	r1, r9, r6
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	685b      	ldr	r3, [r3, #4]
 80143e2:	461d      	mov	r5, r3
 80143e4:	f04f 0600 	mov.w	r6, #0
 80143e8:	196b      	adds	r3, r5, r5
 80143ea:	eb46 0406 	adc.w	r4, r6, r6
 80143ee:	461a      	mov	r2, r3
 80143f0:	4623      	mov	r3, r4
 80143f2:	f7f4 fb81 	bl	8008af8 <__aeabi_uldivmod>
 80143f6:	4603      	mov	r3, r0
 80143f8:	460c      	mov	r4, r1
 80143fa:	461a      	mov	r2, r3
 80143fc:	4ba5      	ldr	r3, [pc, #660]	; (8014694 <UART_SetConfig+0x384>)
 80143fe:	fba3 2302 	umull	r2, r3, r3, r2
 8014402:	095b      	lsrs	r3, r3, #5
 8014404:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	461d      	mov	r5, r3
 801440c:	f04f 0600 	mov.w	r6, #0
 8014410:	46a9      	mov	r9, r5
 8014412:	46b2      	mov	sl, r6
 8014414:	eb19 0309 	adds.w	r3, r9, r9
 8014418:	eb4a 040a 	adc.w	r4, sl, sl
 801441c:	4699      	mov	r9, r3
 801441e:	46a2      	mov	sl, r4
 8014420:	eb19 0905 	adds.w	r9, r9, r5
 8014424:	eb4a 0a06 	adc.w	sl, sl, r6
 8014428:	f04f 0100 	mov.w	r1, #0
 801442c:	f04f 0200 	mov.w	r2, #0
 8014430:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014434:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014438:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801443c:	4689      	mov	r9, r1
 801443e:	4692      	mov	sl, r2
 8014440:	eb19 0005 	adds.w	r0, r9, r5
 8014444:	eb4a 0106 	adc.w	r1, sl, r6
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	461d      	mov	r5, r3
 801444e:	f04f 0600 	mov.w	r6, #0
 8014452:	196b      	adds	r3, r5, r5
 8014454:	eb46 0406 	adc.w	r4, r6, r6
 8014458:	461a      	mov	r2, r3
 801445a:	4623      	mov	r3, r4
 801445c:	f7f4 fb4c 	bl	8008af8 <__aeabi_uldivmod>
 8014460:	4603      	mov	r3, r0
 8014462:	460c      	mov	r4, r1
 8014464:	461a      	mov	r2, r3
 8014466:	4b8b      	ldr	r3, [pc, #556]	; (8014694 <UART_SetConfig+0x384>)
 8014468:	fba3 1302 	umull	r1, r3, r3, r2
 801446c:	095b      	lsrs	r3, r3, #5
 801446e:	2164      	movs	r1, #100	; 0x64
 8014470:	fb01 f303 	mul.w	r3, r1, r3
 8014474:	1ad3      	subs	r3, r2, r3
 8014476:	00db      	lsls	r3, r3, #3
 8014478:	3332      	adds	r3, #50	; 0x32
 801447a:	4a86      	ldr	r2, [pc, #536]	; (8014694 <UART_SetConfig+0x384>)
 801447c:	fba2 2303 	umull	r2, r3, r2, r3
 8014480:	095b      	lsrs	r3, r3, #5
 8014482:	005b      	lsls	r3, r3, #1
 8014484:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014488:	4498      	add	r8, r3
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	461d      	mov	r5, r3
 801448e:	f04f 0600 	mov.w	r6, #0
 8014492:	46a9      	mov	r9, r5
 8014494:	46b2      	mov	sl, r6
 8014496:	eb19 0309 	adds.w	r3, r9, r9
 801449a:	eb4a 040a 	adc.w	r4, sl, sl
 801449e:	4699      	mov	r9, r3
 80144a0:	46a2      	mov	sl, r4
 80144a2:	eb19 0905 	adds.w	r9, r9, r5
 80144a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80144aa:	f04f 0100 	mov.w	r1, #0
 80144ae:	f04f 0200 	mov.w	r2, #0
 80144b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80144b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80144ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80144be:	4689      	mov	r9, r1
 80144c0:	4692      	mov	sl, r2
 80144c2:	eb19 0005 	adds.w	r0, r9, r5
 80144c6:	eb4a 0106 	adc.w	r1, sl, r6
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	461d      	mov	r5, r3
 80144d0:	f04f 0600 	mov.w	r6, #0
 80144d4:	196b      	adds	r3, r5, r5
 80144d6:	eb46 0406 	adc.w	r4, r6, r6
 80144da:	461a      	mov	r2, r3
 80144dc:	4623      	mov	r3, r4
 80144de:	f7f4 fb0b 	bl	8008af8 <__aeabi_uldivmod>
 80144e2:	4603      	mov	r3, r0
 80144e4:	460c      	mov	r4, r1
 80144e6:	461a      	mov	r2, r3
 80144e8:	4b6a      	ldr	r3, [pc, #424]	; (8014694 <UART_SetConfig+0x384>)
 80144ea:	fba3 1302 	umull	r1, r3, r3, r2
 80144ee:	095b      	lsrs	r3, r3, #5
 80144f0:	2164      	movs	r1, #100	; 0x64
 80144f2:	fb01 f303 	mul.w	r3, r1, r3
 80144f6:	1ad3      	subs	r3, r2, r3
 80144f8:	00db      	lsls	r3, r3, #3
 80144fa:	3332      	adds	r3, #50	; 0x32
 80144fc:	4a65      	ldr	r2, [pc, #404]	; (8014694 <UART_SetConfig+0x384>)
 80144fe:	fba2 2303 	umull	r2, r3, r2, r3
 8014502:	095b      	lsrs	r3, r3, #5
 8014504:	f003 0207 	and.w	r2, r3, #7
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	4442      	add	r2, r8
 801450e:	609a      	str	r2, [r3, #8]
 8014510:	e26f      	b.n	80149f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014512:	f7fd fc11 	bl	8011d38 <HAL_RCC_GetPCLK1Freq>
 8014516:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	461d      	mov	r5, r3
 801451c:	f04f 0600 	mov.w	r6, #0
 8014520:	46a8      	mov	r8, r5
 8014522:	46b1      	mov	r9, r6
 8014524:	eb18 0308 	adds.w	r3, r8, r8
 8014528:	eb49 0409 	adc.w	r4, r9, r9
 801452c:	4698      	mov	r8, r3
 801452e:	46a1      	mov	r9, r4
 8014530:	eb18 0805 	adds.w	r8, r8, r5
 8014534:	eb49 0906 	adc.w	r9, r9, r6
 8014538:	f04f 0100 	mov.w	r1, #0
 801453c:	f04f 0200 	mov.w	r2, #0
 8014540:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8014544:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8014548:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801454c:	4688      	mov	r8, r1
 801454e:	4691      	mov	r9, r2
 8014550:	eb18 0005 	adds.w	r0, r8, r5
 8014554:	eb49 0106 	adc.w	r1, r9, r6
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	461d      	mov	r5, r3
 801455e:	f04f 0600 	mov.w	r6, #0
 8014562:	196b      	adds	r3, r5, r5
 8014564:	eb46 0406 	adc.w	r4, r6, r6
 8014568:	461a      	mov	r2, r3
 801456a:	4623      	mov	r3, r4
 801456c:	f7f4 fac4 	bl	8008af8 <__aeabi_uldivmod>
 8014570:	4603      	mov	r3, r0
 8014572:	460c      	mov	r4, r1
 8014574:	461a      	mov	r2, r3
 8014576:	4b47      	ldr	r3, [pc, #284]	; (8014694 <UART_SetConfig+0x384>)
 8014578:	fba3 2302 	umull	r2, r3, r3, r2
 801457c:	095b      	lsrs	r3, r3, #5
 801457e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	461d      	mov	r5, r3
 8014586:	f04f 0600 	mov.w	r6, #0
 801458a:	46a9      	mov	r9, r5
 801458c:	46b2      	mov	sl, r6
 801458e:	eb19 0309 	adds.w	r3, r9, r9
 8014592:	eb4a 040a 	adc.w	r4, sl, sl
 8014596:	4699      	mov	r9, r3
 8014598:	46a2      	mov	sl, r4
 801459a:	eb19 0905 	adds.w	r9, r9, r5
 801459e:	eb4a 0a06 	adc.w	sl, sl, r6
 80145a2:	f04f 0100 	mov.w	r1, #0
 80145a6:	f04f 0200 	mov.w	r2, #0
 80145aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80145ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80145b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80145b6:	4689      	mov	r9, r1
 80145b8:	4692      	mov	sl, r2
 80145ba:	eb19 0005 	adds.w	r0, r9, r5
 80145be:	eb4a 0106 	adc.w	r1, sl, r6
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	461d      	mov	r5, r3
 80145c8:	f04f 0600 	mov.w	r6, #0
 80145cc:	196b      	adds	r3, r5, r5
 80145ce:	eb46 0406 	adc.w	r4, r6, r6
 80145d2:	461a      	mov	r2, r3
 80145d4:	4623      	mov	r3, r4
 80145d6:	f7f4 fa8f 	bl	8008af8 <__aeabi_uldivmod>
 80145da:	4603      	mov	r3, r0
 80145dc:	460c      	mov	r4, r1
 80145de:	461a      	mov	r2, r3
 80145e0:	4b2c      	ldr	r3, [pc, #176]	; (8014694 <UART_SetConfig+0x384>)
 80145e2:	fba3 1302 	umull	r1, r3, r3, r2
 80145e6:	095b      	lsrs	r3, r3, #5
 80145e8:	2164      	movs	r1, #100	; 0x64
 80145ea:	fb01 f303 	mul.w	r3, r1, r3
 80145ee:	1ad3      	subs	r3, r2, r3
 80145f0:	00db      	lsls	r3, r3, #3
 80145f2:	3332      	adds	r3, #50	; 0x32
 80145f4:	4a27      	ldr	r2, [pc, #156]	; (8014694 <UART_SetConfig+0x384>)
 80145f6:	fba2 2303 	umull	r2, r3, r2, r3
 80145fa:	095b      	lsrs	r3, r3, #5
 80145fc:	005b      	lsls	r3, r3, #1
 80145fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014602:	4498      	add	r8, r3
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	461d      	mov	r5, r3
 8014608:	f04f 0600 	mov.w	r6, #0
 801460c:	46a9      	mov	r9, r5
 801460e:	46b2      	mov	sl, r6
 8014610:	eb19 0309 	adds.w	r3, r9, r9
 8014614:	eb4a 040a 	adc.w	r4, sl, sl
 8014618:	4699      	mov	r9, r3
 801461a:	46a2      	mov	sl, r4
 801461c:	eb19 0905 	adds.w	r9, r9, r5
 8014620:	eb4a 0a06 	adc.w	sl, sl, r6
 8014624:	f04f 0100 	mov.w	r1, #0
 8014628:	f04f 0200 	mov.w	r2, #0
 801462c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014630:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014634:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014638:	4689      	mov	r9, r1
 801463a:	4692      	mov	sl, r2
 801463c:	eb19 0005 	adds.w	r0, r9, r5
 8014640:	eb4a 0106 	adc.w	r1, sl, r6
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	685b      	ldr	r3, [r3, #4]
 8014648:	461d      	mov	r5, r3
 801464a:	f04f 0600 	mov.w	r6, #0
 801464e:	196b      	adds	r3, r5, r5
 8014650:	eb46 0406 	adc.w	r4, r6, r6
 8014654:	461a      	mov	r2, r3
 8014656:	4623      	mov	r3, r4
 8014658:	f7f4 fa4e 	bl	8008af8 <__aeabi_uldivmod>
 801465c:	4603      	mov	r3, r0
 801465e:	460c      	mov	r4, r1
 8014660:	461a      	mov	r2, r3
 8014662:	4b0c      	ldr	r3, [pc, #48]	; (8014694 <UART_SetConfig+0x384>)
 8014664:	fba3 1302 	umull	r1, r3, r3, r2
 8014668:	095b      	lsrs	r3, r3, #5
 801466a:	2164      	movs	r1, #100	; 0x64
 801466c:	fb01 f303 	mul.w	r3, r1, r3
 8014670:	1ad3      	subs	r3, r2, r3
 8014672:	00db      	lsls	r3, r3, #3
 8014674:	3332      	adds	r3, #50	; 0x32
 8014676:	4a07      	ldr	r2, [pc, #28]	; (8014694 <UART_SetConfig+0x384>)
 8014678:	fba2 2303 	umull	r2, r3, r2, r3
 801467c:	095b      	lsrs	r3, r3, #5
 801467e:	f003 0207 	and.w	r2, r3, #7
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	4442      	add	r2, r8
 8014688:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801468a:	e1b2      	b.n	80149f2 <UART_SetConfig+0x6e2>
 801468c:	40011000 	.word	0x40011000
 8014690:	40011400 	.word	0x40011400
 8014694:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	4ad7      	ldr	r2, [pc, #860]	; (80149fc <UART_SetConfig+0x6ec>)
 801469e:	4293      	cmp	r3, r2
 80146a0:	d005      	beq.n	80146ae <UART_SetConfig+0x39e>
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	4ad6      	ldr	r2, [pc, #856]	; (8014a00 <UART_SetConfig+0x6f0>)
 80146a8:	4293      	cmp	r3, r2
 80146aa:	f040 80d1 	bne.w	8014850 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80146ae:	f7fd fb57 	bl	8011d60 <HAL_RCC_GetPCLK2Freq>
 80146b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	469a      	mov	sl, r3
 80146b8:	f04f 0b00 	mov.w	fp, #0
 80146bc:	46d0      	mov	r8, sl
 80146be:	46d9      	mov	r9, fp
 80146c0:	eb18 0308 	adds.w	r3, r8, r8
 80146c4:	eb49 0409 	adc.w	r4, r9, r9
 80146c8:	4698      	mov	r8, r3
 80146ca:	46a1      	mov	r9, r4
 80146cc:	eb18 080a 	adds.w	r8, r8, sl
 80146d0:	eb49 090b 	adc.w	r9, r9, fp
 80146d4:	f04f 0100 	mov.w	r1, #0
 80146d8:	f04f 0200 	mov.w	r2, #0
 80146dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80146e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80146e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80146e8:	4688      	mov	r8, r1
 80146ea:	4691      	mov	r9, r2
 80146ec:	eb1a 0508 	adds.w	r5, sl, r8
 80146f0:	eb4b 0609 	adc.w	r6, fp, r9
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	685b      	ldr	r3, [r3, #4]
 80146f8:	4619      	mov	r1, r3
 80146fa:	f04f 0200 	mov.w	r2, #0
 80146fe:	f04f 0300 	mov.w	r3, #0
 8014702:	f04f 0400 	mov.w	r4, #0
 8014706:	0094      	lsls	r4, r2, #2
 8014708:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801470c:	008b      	lsls	r3, r1, #2
 801470e:	461a      	mov	r2, r3
 8014710:	4623      	mov	r3, r4
 8014712:	4628      	mov	r0, r5
 8014714:	4631      	mov	r1, r6
 8014716:	f7f4 f9ef 	bl	8008af8 <__aeabi_uldivmod>
 801471a:	4603      	mov	r3, r0
 801471c:	460c      	mov	r4, r1
 801471e:	461a      	mov	r2, r3
 8014720:	4bb8      	ldr	r3, [pc, #736]	; (8014a04 <UART_SetConfig+0x6f4>)
 8014722:	fba3 2302 	umull	r2, r3, r3, r2
 8014726:	095b      	lsrs	r3, r3, #5
 8014728:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	469b      	mov	fp, r3
 8014730:	f04f 0c00 	mov.w	ip, #0
 8014734:	46d9      	mov	r9, fp
 8014736:	46e2      	mov	sl, ip
 8014738:	eb19 0309 	adds.w	r3, r9, r9
 801473c:	eb4a 040a 	adc.w	r4, sl, sl
 8014740:	4699      	mov	r9, r3
 8014742:	46a2      	mov	sl, r4
 8014744:	eb19 090b 	adds.w	r9, r9, fp
 8014748:	eb4a 0a0c 	adc.w	sl, sl, ip
 801474c:	f04f 0100 	mov.w	r1, #0
 8014750:	f04f 0200 	mov.w	r2, #0
 8014754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014758:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801475c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014760:	4689      	mov	r9, r1
 8014762:	4692      	mov	sl, r2
 8014764:	eb1b 0509 	adds.w	r5, fp, r9
 8014768:	eb4c 060a 	adc.w	r6, ip, sl
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	685b      	ldr	r3, [r3, #4]
 8014770:	4619      	mov	r1, r3
 8014772:	f04f 0200 	mov.w	r2, #0
 8014776:	f04f 0300 	mov.w	r3, #0
 801477a:	f04f 0400 	mov.w	r4, #0
 801477e:	0094      	lsls	r4, r2, #2
 8014780:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014784:	008b      	lsls	r3, r1, #2
 8014786:	461a      	mov	r2, r3
 8014788:	4623      	mov	r3, r4
 801478a:	4628      	mov	r0, r5
 801478c:	4631      	mov	r1, r6
 801478e:	f7f4 f9b3 	bl	8008af8 <__aeabi_uldivmod>
 8014792:	4603      	mov	r3, r0
 8014794:	460c      	mov	r4, r1
 8014796:	461a      	mov	r2, r3
 8014798:	4b9a      	ldr	r3, [pc, #616]	; (8014a04 <UART_SetConfig+0x6f4>)
 801479a:	fba3 1302 	umull	r1, r3, r3, r2
 801479e:	095b      	lsrs	r3, r3, #5
 80147a0:	2164      	movs	r1, #100	; 0x64
 80147a2:	fb01 f303 	mul.w	r3, r1, r3
 80147a6:	1ad3      	subs	r3, r2, r3
 80147a8:	011b      	lsls	r3, r3, #4
 80147aa:	3332      	adds	r3, #50	; 0x32
 80147ac:	4a95      	ldr	r2, [pc, #596]	; (8014a04 <UART_SetConfig+0x6f4>)
 80147ae:	fba2 2303 	umull	r2, r3, r2, r3
 80147b2:	095b      	lsrs	r3, r3, #5
 80147b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80147b8:	4498      	add	r8, r3
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	469b      	mov	fp, r3
 80147be:	f04f 0c00 	mov.w	ip, #0
 80147c2:	46d9      	mov	r9, fp
 80147c4:	46e2      	mov	sl, ip
 80147c6:	eb19 0309 	adds.w	r3, r9, r9
 80147ca:	eb4a 040a 	adc.w	r4, sl, sl
 80147ce:	4699      	mov	r9, r3
 80147d0:	46a2      	mov	sl, r4
 80147d2:	eb19 090b 	adds.w	r9, r9, fp
 80147d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80147da:	f04f 0100 	mov.w	r1, #0
 80147de:	f04f 0200 	mov.w	r2, #0
 80147e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80147e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80147ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80147ee:	4689      	mov	r9, r1
 80147f0:	4692      	mov	sl, r2
 80147f2:	eb1b 0509 	adds.w	r5, fp, r9
 80147f6:	eb4c 060a 	adc.w	r6, ip, sl
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	685b      	ldr	r3, [r3, #4]
 80147fe:	4619      	mov	r1, r3
 8014800:	f04f 0200 	mov.w	r2, #0
 8014804:	f04f 0300 	mov.w	r3, #0
 8014808:	f04f 0400 	mov.w	r4, #0
 801480c:	0094      	lsls	r4, r2, #2
 801480e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014812:	008b      	lsls	r3, r1, #2
 8014814:	461a      	mov	r2, r3
 8014816:	4623      	mov	r3, r4
 8014818:	4628      	mov	r0, r5
 801481a:	4631      	mov	r1, r6
 801481c:	f7f4 f96c 	bl	8008af8 <__aeabi_uldivmod>
 8014820:	4603      	mov	r3, r0
 8014822:	460c      	mov	r4, r1
 8014824:	461a      	mov	r2, r3
 8014826:	4b77      	ldr	r3, [pc, #476]	; (8014a04 <UART_SetConfig+0x6f4>)
 8014828:	fba3 1302 	umull	r1, r3, r3, r2
 801482c:	095b      	lsrs	r3, r3, #5
 801482e:	2164      	movs	r1, #100	; 0x64
 8014830:	fb01 f303 	mul.w	r3, r1, r3
 8014834:	1ad3      	subs	r3, r2, r3
 8014836:	011b      	lsls	r3, r3, #4
 8014838:	3332      	adds	r3, #50	; 0x32
 801483a:	4a72      	ldr	r2, [pc, #456]	; (8014a04 <UART_SetConfig+0x6f4>)
 801483c:	fba2 2303 	umull	r2, r3, r2, r3
 8014840:	095b      	lsrs	r3, r3, #5
 8014842:	f003 020f 	and.w	r2, r3, #15
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	4442      	add	r2, r8
 801484c:	609a      	str	r2, [r3, #8]
 801484e:	e0d0      	b.n	80149f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8014850:	f7fd fa72 	bl	8011d38 <HAL_RCC_GetPCLK1Freq>
 8014854:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	469a      	mov	sl, r3
 801485a:	f04f 0b00 	mov.w	fp, #0
 801485e:	46d0      	mov	r8, sl
 8014860:	46d9      	mov	r9, fp
 8014862:	eb18 0308 	adds.w	r3, r8, r8
 8014866:	eb49 0409 	adc.w	r4, r9, r9
 801486a:	4698      	mov	r8, r3
 801486c:	46a1      	mov	r9, r4
 801486e:	eb18 080a 	adds.w	r8, r8, sl
 8014872:	eb49 090b 	adc.w	r9, r9, fp
 8014876:	f04f 0100 	mov.w	r1, #0
 801487a:	f04f 0200 	mov.w	r2, #0
 801487e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8014882:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8014886:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801488a:	4688      	mov	r8, r1
 801488c:	4691      	mov	r9, r2
 801488e:	eb1a 0508 	adds.w	r5, sl, r8
 8014892:	eb4b 0609 	adc.w	r6, fp, r9
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	685b      	ldr	r3, [r3, #4]
 801489a:	4619      	mov	r1, r3
 801489c:	f04f 0200 	mov.w	r2, #0
 80148a0:	f04f 0300 	mov.w	r3, #0
 80148a4:	f04f 0400 	mov.w	r4, #0
 80148a8:	0094      	lsls	r4, r2, #2
 80148aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80148ae:	008b      	lsls	r3, r1, #2
 80148b0:	461a      	mov	r2, r3
 80148b2:	4623      	mov	r3, r4
 80148b4:	4628      	mov	r0, r5
 80148b6:	4631      	mov	r1, r6
 80148b8:	f7f4 f91e 	bl	8008af8 <__aeabi_uldivmod>
 80148bc:	4603      	mov	r3, r0
 80148be:	460c      	mov	r4, r1
 80148c0:	461a      	mov	r2, r3
 80148c2:	4b50      	ldr	r3, [pc, #320]	; (8014a04 <UART_SetConfig+0x6f4>)
 80148c4:	fba3 2302 	umull	r2, r3, r3, r2
 80148c8:	095b      	lsrs	r3, r3, #5
 80148ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	469b      	mov	fp, r3
 80148d2:	f04f 0c00 	mov.w	ip, #0
 80148d6:	46d9      	mov	r9, fp
 80148d8:	46e2      	mov	sl, ip
 80148da:	eb19 0309 	adds.w	r3, r9, r9
 80148de:	eb4a 040a 	adc.w	r4, sl, sl
 80148e2:	4699      	mov	r9, r3
 80148e4:	46a2      	mov	sl, r4
 80148e6:	eb19 090b 	adds.w	r9, r9, fp
 80148ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80148ee:	f04f 0100 	mov.w	r1, #0
 80148f2:	f04f 0200 	mov.w	r2, #0
 80148f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80148fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80148fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014902:	4689      	mov	r9, r1
 8014904:	4692      	mov	sl, r2
 8014906:	eb1b 0509 	adds.w	r5, fp, r9
 801490a:	eb4c 060a 	adc.w	r6, ip, sl
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	685b      	ldr	r3, [r3, #4]
 8014912:	4619      	mov	r1, r3
 8014914:	f04f 0200 	mov.w	r2, #0
 8014918:	f04f 0300 	mov.w	r3, #0
 801491c:	f04f 0400 	mov.w	r4, #0
 8014920:	0094      	lsls	r4, r2, #2
 8014922:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014926:	008b      	lsls	r3, r1, #2
 8014928:	461a      	mov	r2, r3
 801492a:	4623      	mov	r3, r4
 801492c:	4628      	mov	r0, r5
 801492e:	4631      	mov	r1, r6
 8014930:	f7f4 f8e2 	bl	8008af8 <__aeabi_uldivmod>
 8014934:	4603      	mov	r3, r0
 8014936:	460c      	mov	r4, r1
 8014938:	461a      	mov	r2, r3
 801493a:	4b32      	ldr	r3, [pc, #200]	; (8014a04 <UART_SetConfig+0x6f4>)
 801493c:	fba3 1302 	umull	r1, r3, r3, r2
 8014940:	095b      	lsrs	r3, r3, #5
 8014942:	2164      	movs	r1, #100	; 0x64
 8014944:	fb01 f303 	mul.w	r3, r1, r3
 8014948:	1ad3      	subs	r3, r2, r3
 801494a:	011b      	lsls	r3, r3, #4
 801494c:	3332      	adds	r3, #50	; 0x32
 801494e:	4a2d      	ldr	r2, [pc, #180]	; (8014a04 <UART_SetConfig+0x6f4>)
 8014950:	fba2 2303 	umull	r2, r3, r2, r3
 8014954:	095b      	lsrs	r3, r3, #5
 8014956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801495a:	4498      	add	r8, r3
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	469b      	mov	fp, r3
 8014960:	f04f 0c00 	mov.w	ip, #0
 8014964:	46d9      	mov	r9, fp
 8014966:	46e2      	mov	sl, ip
 8014968:	eb19 0309 	adds.w	r3, r9, r9
 801496c:	eb4a 040a 	adc.w	r4, sl, sl
 8014970:	4699      	mov	r9, r3
 8014972:	46a2      	mov	sl, r4
 8014974:	eb19 090b 	adds.w	r9, r9, fp
 8014978:	eb4a 0a0c 	adc.w	sl, sl, ip
 801497c:	f04f 0100 	mov.w	r1, #0
 8014980:	f04f 0200 	mov.w	r2, #0
 8014984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014988:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801498c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014990:	4689      	mov	r9, r1
 8014992:	4692      	mov	sl, r2
 8014994:	eb1b 0509 	adds.w	r5, fp, r9
 8014998:	eb4c 060a 	adc.w	r6, ip, sl
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	685b      	ldr	r3, [r3, #4]
 80149a0:	4619      	mov	r1, r3
 80149a2:	f04f 0200 	mov.w	r2, #0
 80149a6:	f04f 0300 	mov.w	r3, #0
 80149aa:	f04f 0400 	mov.w	r4, #0
 80149ae:	0094      	lsls	r4, r2, #2
 80149b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80149b4:	008b      	lsls	r3, r1, #2
 80149b6:	461a      	mov	r2, r3
 80149b8:	4623      	mov	r3, r4
 80149ba:	4628      	mov	r0, r5
 80149bc:	4631      	mov	r1, r6
 80149be:	f7f4 f89b 	bl	8008af8 <__aeabi_uldivmod>
 80149c2:	4603      	mov	r3, r0
 80149c4:	460c      	mov	r4, r1
 80149c6:	461a      	mov	r2, r3
 80149c8:	4b0e      	ldr	r3, [pc, #56]	; (8014a04 <UART_SetConfig+0x6f4>)
 80149ca:	fba3 1302 	umull	r1, r3, r3, r2
 80149ce:	095b      	lsrs	r3, r3, #5
 80149d0:	2164      	movs	r1, #100	; 0x64
 80149d2:	fb01 f303 	mul.w	r3, r1, r3
 80149d6:	1ad3      	subs	r3, r2, r3
 80149d8:	011b      	lsls	r3, r3, #4
 80149da:	3332      	adds	r3, #50	; 0x32
 80149dc:	4a09      	ldr	r2, [pc, #36]	; (8014a04 <UART_SetConfig+0x6f4>)
 80149de:	fba2 2303 	umull	r2, r3, r2, r3
 80149e2:	095b      	lsrs	r3, r3, #5
 80149e4:	f003 020f 	and.w	r2, r3, #15
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	4442      	add	r2, r8
 80149ee:	609a      	str	r2, [r3, #8]
}
 80149f0:	e7ff      	b.n	80149f2 <UART_SetConfig+0x6e2>
 80149f2:	bf00      	nop
 80149f4:	3714      	adds	r7, #20
 80149f6:	46bd      	mov	sp, r7
 80149f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149fc:	40011000 	.word	0x40011000
 8014a00:	40011400 	.word	0x40011400
 8014a04:	51eb851f 	.word	0x51eb851f

08014a08 <round>:
 8014a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a0a:	ec57 6b10 	vmov	r6, r7, d0
 8014a0e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8014a12:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8014a16:	2c13      	cmp	r4, #19
 8014a18:	463b      	mov	r3, r7
 8014a1a:	463d      	mov	r5, r7
 8014a1c:	dc17      	bgt.n	8014a4e <round+0x46>
 8014a1e:	2c00      	cmp	r4, #0
 8014a20:	da09      	bge.n	8014a36 <round+0x2e>
 8014a22:	3401      	adds	r4, #1
 8014a24:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8014a28:	d103      	bne.n	8014a32 <round+0x2a>
 8014a2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014a2e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014a32:	2100      	movs	r1, #0
 8014a34:	e02c      	b.n	8014a90 <round+0x88>
 8014a36:	4a18      	ldr	r2, [pc, #96]	; (8014a98 <round+0x90>)
 8014a38:	4122      	asrs	r2, r4
 8014a3a:	4217      	tst	r7, r2
 8014a3c:	d100      	bne.n	8014a40 <round+0x38>
 8014a3e:	b19e      	cbz	r6, 8014a68 <round+0x60>
 8014a40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014a44:	4123      	asrs	r3, r4
 8014a46:	442b      	add	r3, r5
 8014a48:	ea23 0302 	bic.w	r3, r3, r2
 8014a4c:	e7f1      	b.n	8014a32 <round+0x2a>
 8014a4e:	2c33      	cmp	r4, #51	; 0x33
 8014a50:	dd0d      	ble.n	8014a6e <round+0x66>
 8014a52:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8014a56:	d107      	bne.n	8014a68 <round+0x60>
 8014a58:	4630      	mov	r0, r6
 8014a5a:	4639      	mov	r1, r7
 8014a5c:	ee10 2a10 	vmov	r2, s0
 8014a60:	f7f3 fb4c 	bl	80080fc <__adddf3>
 8014a64:	4606      	mov	r6, r0
 8014a66:	460f      	mov	r7, r1
 8014a68:	ec47 6b10 	vmov	d0, r6, r7
 8014a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a6e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8014a72:	f04f 30ff 	mov.w	r0, #4294967295
 8014a76:	40d0      	lsrs	r0, r2
 8014a78:	4206      	tst	r6, r0
 8014a7a:	d0f5      	beq.n	8014a68 <round+0x60>
 8014a7c:	2201      	movs	r2, #1
 8014a7e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8014a82:	fa02 f404 	lsl.w	r4, r2, r4
 8014a86:	1931      	adds	r1, r6, r4
 8014a88:	bf28      	it	cs
 8014a8a:	189b      	addcs	r3, r3, r2
 8014a8c:	ea21 0100 	bic.w	r1, r1, r0
 8014a90:	461f      	mov	r7, r3
 8014a92:	460e      	mov	r6, r1
 8014a94:	e7e8      	b.n	8014a68 <round+0x60>
 8014a96:	bf00      	nop
 8014a98:	000fffff 	.word	0x000fffff

08014a9c <__errno>:
 8014a9c:	4b01      	ldr	r3, [pc, #4]	; (8014aa4 <__errno+0x8>)
 8014a9e:	6818      	ldr	r0, [r3, #0]
 8014aa0:	4770      	bx	lr
 8014aa2:	bf00      	nop
 8014aa4:	2000003c 	.word	0x2000003c

08014aa8 <__sflush_r>:
 8014aa8:	898a      	ldrh	r2, [r1, #12]
 8014aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014aae:	4605      	mov	r5, r0
 8014ab0:	0710      	lsls	r0, r2, #28
 8014ab2:	460c      	mov	r4, r1
 8014ab4:	d458      	bmi.n	8014b68 <__sflush_r+0xc0>
 8014ab6:	684b      	ldr	r3, [r1, #4]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	dc05      	bgt.n	8014ac8 <__sflush_r+0x20>
 8014abc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	dc02      	bgt.n	8014ac8 <__sflush_r+0x20>
 8014ac2:	2000      	movs	r0, #0
 8014ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014aca:	2e00      	cmp	r6, #0
 8014acc:	d0f9      	beq.n	8014ac2 <__sflush_r+0x1a>
 8014ace:	2300      	movs	r3, #0
 8014ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014ad4:	682f      	ldr	r7, [r5, #0]
 8014ad6:	6a21      	ldr	r1, [r4, #32]
 8014ad8:	602b      	str	r3, [r5, #0]
 8014ada:	d032      	beq.n	8014b42 <__sflush_r+0x9a>
 8014adc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014ade:	89a3      	ldrh	r3, [r4, #12]
 8014ae0:	075a      	lsls	r2, r3, #29
 8014ae2:	d505      	bpl.n	8014af0 <__sflush_r+0x48>
 8014ae4:	6863      	ldr	r3, [r4, #4]
 8014ae6:	1ac0      	subs	r0, r0, r3
 8014ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014aea:	b10b      	cbz	r3, 8014af0 <__sflush_r+0x48>
 8014aec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014aee:	1ac0      	subs	r0, r0, r3
 8014af0:	2300      	movs	r3, #0
 8014af2:	4602      	mov	r2, r0
 8014af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014af6:	6a21      	ldr	r1, [r4, #32]
 8014af8:	4628      	mov	r0, r5
 8014afa:	47b0      	blx	r6
 8014afc:	1c43      	adds	r3, r0, #1
 8014afe:	89a3      	ldrh	r3, [r4, #12]
 8014b00:	d106      	bne.n	8014b10 <__sflush_r+0x68>
 8014b02:	6829      	ldr	r1, [r5, #0]
 8014b04:	291d      	cmp	r1, #29
 8014b06:	d848      	bhi.n	8014b9a <__sflush_r+0xf2>
 8014b08:	4a29      	ldr	r2, [pc, #164]	; (8014bb0 <__sflush_r+0x108>)
 8014b0a:	40ca      	lsrs	r2, r1
 8014b0c:	07d6      	lsls	r6, r2, #31
 8014b0e:	d544      	bpl.n	8014b9a <__sflush_r+0xf2>
 8014b10:	2200      	movs	r2, #0
 8014b12:	6062      	str	r2, [r4, #4]
 8014b14:	04d9      	lsls	r1, r3, #19
 8014b16:	6922      	ldr	r2, [r4, #16]
 8014b18:	6022      	str	r2, [r4, #0]
 8014b1a:	d504      	bpl.n	8014b26 <__sflush_r+0x7e>
 8014b1c:	1c42      	adds	r2, r0, #1
 8014b1e:	d101      	bne.n	8014b24 <__sflush_r+0x7c>
 8014b20:	682b      	ldr	r3, [r5, #0]
 8014b22:	b903      	cbnz	r3, 8014b26 <__sflush_r+0x7e>
 8014b24:	6560      	str	r0, [r4, #84]	; 0x54
 8014b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b28:	602f      	str	r7, [r5, #0]
 8014b2a:	2900      	cmp	r1, #0
 8014b2c:	d0c9      	beq.n	8014ac2 <__sflush_r+0x1a>
 8014b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b32:	4299      	cmp	r1, r3
 8014b34:	d002      	beq.n	8014b3c <__sflush_r+0x94>
 8014b36:	4628      	mov	r0, r5
 8014b38:	f000 f9fa 	bl	8014f30 <_free_r>
 8014b3c:	2000      	movs	r0, #0
 8014b3e:	6360      	str	r0, [r4, #52]	; 0x34
 8014b40:	e7c0      	b.n	8014ac4 <__sflush_r+0x1c>
 8014b42:	2301      	movs	r3, #1
 8014b44:	4628      	mov	r0, r5
 8014b46:	47b0      	blx	r6
 8014b48:	1c41      	adds	r1, r0, #1
 8014b4a:	d1c8      	bne.n	8014ade <__sflush_r+0x36>
 8014b4c:	682b      	ldr	r3, [r5, #0]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d0c5      	beq.n	8014ade <__sflush_r+0x36>
 8014b52:	2b1d      	cmp	r3, #29
 8014b54:	d001      	beq.n	8014b5a <__sflush_r+0xb2>
 8014b56:	2b16      	cmp	r3, #22
 8014b58:	d101      	bne.n	8014b5e <__sflush_r+0xb6>
 8014b5a:	602f      	str	r7, [r5, #0]
 8014b5c:	e7b1      	b.n	8014ac2 <__sflush_r+0x1a>
 8014b5e:	89a3      	ldrh	r3, [r4, #12]
 8014b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b64:	81a3      	strh	r3, [r4, #12]
 8014b66:	e7ad      	b.n	8014ac4 <__sflush_r+0x1c>
 8014b68:	690f      	ldr	r7, [r1, #16]
 8014b6a:	2f00      	cmp	r7, #0
 8014b6c:	d0a9      	beq.n	8014ac2 <__sflush_r+0x1a>
 8014b6e:	0793      	lsls	r3, r2, #30
 8014b70:	680e      	ldr	r6, [r1, #0]
 8014b72:	bf08      	it	eq
 8014b74:	694b      	ldreq	r3, [r1, #20]
 8014b76:	600f      	str	r7, [r1, #0]
 8014b78:	bf18      	it	ne
 8014b7a:	2300      	movne	r3, #0
 8014b7c:	eba6 0807 	sub.w	r8, r6, r7
 8014b80:	608b      	str	r3, [r1, #8]
 8014b82:	f1b8 0f00 	cmp.w	r8, #0
 8014b86:	dd9c      	ble.n	8014ac2 <__sflush_r+0x1a>
 8014b88:	4643      	mov	r3, r8
 8014b8a:	463a      	mov	r2, r7
 8014b8c:	6a21      	ldr	r1, [r4, #32]
 8014b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014b90:	4628      	mov	r0, r5
 8014b92:	47b0      	blx	r6
 8014b94:	2800      	cmp	r0, #0
 8014b96:	dc06      	bgt.n	8014ba6 <__sflush_r+0xfe>
 8014b98:	89a3      	ldrh	r3, [r4, #12]
 8014b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b9e:	81a3      	strh	r3, [r4, #12]
 8014ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ba4:	e78e      	b.n	8014ac4 <__sflush_r+0x1c>
 8014ba6:	4407      	add	r7, r0
 8014ba8:	eba8 0800 	sub.w	r8, r8, r0
 8014bac:	e7e9      	b.n	8014b82 <__sflush_r+0xda>
 8014bae:	bf00      	nop
 8014bb0:	20400001 	.word	0x20400001

08014bb4 <_fflush_r>:
 8014bb4:	b538      	push	{r3, r4, r5, lr}
 8014bb6:	690b      	ldr	r3, [r1, #16]
 8014bb8:	4605      	mov	r5, r0
 8014bba:	460c      	mov	r4, r1
 8014bbc:	b1db      	cbz	r3, 8014bf6 <_fflush_r+0x42>
 8014bbe:	b118      	cbz	r0, 8014bc8 <_fflush_r+0x14>
 8014bc0:	6983      	ldr	r3, [r0, #24]
 8014bc2:	b90b      	cbnz	r3, 8014bc8 <_fflush_r+0x14>
 8014bc4:	f000 f872 	bl	8014cac <__sinit>
 8014bc8:	4b0c      	ldr	r3, [pc, #48]	; (8014bfc <_fflush_r+0x48>)
 8014bca:	429c      	cmp	r4, r3
 8014bcc:	d109      	bne.n	8014be2 <_fflush_r+0x2e>
 8014bce:	686c      	ldr	r4, [r5, #4]
 8014bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bd4:	b17b      	cbz	r3, 8014bf6 <_fflush_r+0x42>
 8014bd6:	4621      	mov	r1, r4
 8014bd8:	4628      	mov	r0, r5
 8014bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bde:	f7ff bf63 	b.w	8014aa8 <__sflush_r>
 8014be2:	4b07      	ldr	r3, [pc, #28]	; (8014c00 <_fflush_r+0x4c>)
 8014be4:	429c      	cmp	r4, r3
 8014be6:	d101      	bne.n	8014bec <_fflush_r+0x38>
 8014be8:	68ac      	ldr	r4, [r5, #8]
 8014bea:	e7f1      	b.n	8014bd0 <_fflush_r+0x1c>
 8014bec:	4b05      	ldr	r3, [pc, #20]	; (8014c04 <_fflush_r+0x50>)
 8014bee:	429c      	cmp	r4, r3
 8014bf0:	bf08      	it	eq
 8014bf2:	68ec      	ldreq	r4, [r5, #12]
 8014bf4:	e7ec      	b.n	8014bd0 <_fflush_r+0x1c>
 8014bf6:	2000      	movs	r0, #0
 8014bf8:	bd38      	pop	{r3, r4, r5, pc}
 8014bfa:	bf00      	nop
 8014bfc:	0801a2e8 	.word	0x0801a2e8
 8014c00:	0801a308 	.word	0x0801a308
 8014c04:	0801a2c8 	.word	0x0801a2c8

08014c08 <fflush>:
 8014c08:	4601      	mov	r1, r0
 8014c0a:	b920      	cbnz	r0, 8014c16 <fflush+0xe>
 8014c0c:	4b04      	ldr	r3, [pc, #16]	; (8014c20 <fflush+0x18>)
 8014c0e:	4905      	ldr	r1, [pc, #20]	; (8014c24 <fflush+0x1c>)
 8014c10:	6818      	ldr	r0, [r3, #0]
 8014c12:	f000 b8d3 	b.w	8014dbc <_fwalk_reent>
 8014c16:	4b04      	ldr	r3, [pc, #16]	; (8014c28 <fflush+0x20>)
 8014c18:	6818      	ldr	r0, [r3, #0]
 8014c1a:	f7ff bfcb 	b.w	8014bb4 <_fflush_r>
 8014c1e:	bf00      	nop
 8014c20:	0801a328 	.word	0x0801a328
 8014c24:	08014bb5 	.word	0x08014bb5
 8014c28:	2000003c 	.word	0x2000003c

08014c2c <std>:
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	b510      	push	{r4, lr}
 8014c30:	4604      	mov	r4, r0
 8014c32:	e9c0 3300 	strd	r3, r3, [r0]
 8014c36:	6083      	str	r3, [r0, #8]
 8014c38:	8181      	strh	r1, [r0, #12]
 8014c3a:	6643      	str	r3, [r0, #100]	; 0x64
 8014c3c:	81c2      	strh	r2, [r0, #14]
 8014c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014c42:	6183      	str	r3, [r0, #24]
 8014c44:	4619      	mov	r1, r3
 8014c46:	2208      	movs	r2, #8
 8014c48:	305c      	adds	r0, #92	; 0x5c
 8014c4a:	f000 f968 	bl	8014f1e <memset>
 8014c4e:	4b05      	ldr	r3, [pc, #20]	; (8014c64 <std+0x38>)
 8014c50:	6263      	str	r3, [r4, #36]	; 0x24
 8014c52:	4b05      	ldr	r3, [pc, #20]	; (8014c68 <std+0x3c>)
 8014c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8014c56:	4b05      	ldr	r3, [pc, #20]	; (8014c6c <std+0x40>)
 8014c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014c5a:	4b05      	ldr	r3, [pc, #20]	; (8014c70 <std+0x44>)
 8014c5c:	6224      	str	r4, [r4, #32]
 8014c5e:	6323      	str	r3, [r4, #48]	; 0x30
 8014c60:	bd10      	pop	{r4, pc}
 8014c62:	bf00      	nop
 8014c64:	08016c91 	.word	0x08016c91
 8014c68:	08016cb3 	.word	0x08016cb3
 8014c6c:	08016ceb 	.word	0x08016ceb
 8014c70:	08016d0f 	.word	0x08016d0f

08014c74 <_cleanup_r>:
 8014c74:	4901      	ldr	r1, [pc, #4]	; (8014c7c <_cleanup_r+0x8>)
 8014c76:	f000 b8a1 	b.w	8014dbc <_fwalk_reent>
 8014c7a:	bf00      	nop
 8014c7c:	08014bb5 	.word	0x08014bb5

08014c80 <__sfmoreglue>:
 8014c80:	b570      	push	{r4, r5, r6, lr}
 8014c82:	1e4a      	subs	r2, r1, #1
 8014c84:	2568      	movs	r5, #104	; 0x68
 8014c86:	4355      	muls	r5, r2
 8014c88:	460e      	mov	r6, r1
 8014c8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014c8e:	f000 f99d 	bl	8014fcc <_malloc_r>
 8014c92:	4604      	mov	r4, r0
 8014c94:	b140      	cbz	r0, 8014ca8 <__sfmoreglue+0x28>
 8014c96:	2100      	movs	r1, #0
 8014c98:	e9c0 1600 	strd	r1, r6, [r0]
 8014c9c:	300c      	adds	r0, #12
 8014c9e:	60a0      	str	r0, [r4, #8]
 8014ca0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014ca4:	f000 f93b 	bl	8014f1e <memset>
 8014ca8:	4620      	mov	r0, r4
 8014caa:	bd70      	pop	{r4, r5, r6, pc}

08014cac <__sinit>:
 8014cac:	6983      	ldr	r3, [r0, #24]
 8014cae:	b510      	push	{r4, lr}
 8014cb0:	4604      	mov	r4, r0
 8014cb2:	bb33      	cbnz	r3, 8014d02 <__sinit+0x56>
 8014cb4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014cb8:	6503      	str	r3, [r0, #80]	; 0x50
 8014cba:	4b12      	ldr	r3, [pc, #72]	; (8014d04 <__sinit+0x58>)
 8014cbc:	4a12      	ldr	r2, [pc, #72]	; (8014d08 <__sinit+0x5c>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	6282      	str	r2, [r0, #40]	; 0x28
 8014cc2:	4298      	cmp	r0, r3
 8014cc4:	bf04      	itt	eq
 8014cc6:	2301      	moveq	r3, #1
 8014cc8:	6183      	streq	r3, [r0, #24]
 8014cca:	f000 f81f 	bl	8014d0c <__sfp>
 8014cce:	6060      	str	r0, [r4, #4]
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	f000 f81b 	bl	8014d0c <__sfp>
 8014cd6:	60a0      	str	r0, [r4, #8]
 8014cd8:	4620      	mov	r0, r4
 8014cda:	f000 f817 	bl	8014d0c <__sfp>
 8014cde:	2200      	movs	r2, #0
 8014ce0:	60e0      	str	r0, [r4, #12]
 8014ce2:	2104      	movs	r1, #4
 8014ce4:	6860      	ldr	r0, [r4, #4]
 8014ce6:	f7ff ffa1 	bl	8014c2c <std>
 8014cea:	2201      	movs	r2, #1
 8014cec:	2109      	movs	r1, #9
 8014cee:	68a0      	ldr	r0, [r4, #8]
 8014cf0:	f7ff ff9c 	bl	8014c2c <std>
 8014cf4:	2202      	movs	r2, #2
 8014cf6:	2112      	movs	r1, #18
 8014cf8:	68e0      	ldr	r0, [r4, #12]
 8014cfa:	f7ff ff97 	bl	8014c2c <std>
 8014cfe:	2301      	movs	r3, #1
 8014d00:	61a3      	str	r3, [r4, #24]
 8014d02:	bd10      	pop	{r4, pc}
 8014d04:	0801a328 	.word	0x0801a328
 8014d08:	08014c75 	.word	0x08014c75

08014d0c <__sfp>:
 8014d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d0e:	4b1b      	ldr	r3, [pc, #108]	; (8014d7c <__sfp+0x70>)
 8014d10:	681e      	ldr	r6, [r3, #0]
 8014d12:	69b3      	ldr	r3, [r6, #24]
 8014d14:	4607      	mov	r7, r0
 8014d16:	b913      	cbnz	r3, 8014d1e <__sfp+0x12>
 8014d18:	4630      	mov	r0, r6
 8014d1a:	f7ff ffc7 	bl	8014cac <__sinit>
 8014d1e:	3648      	adds	r6, #72	; 0x48
 8014d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014d24:	3b01      	subs	r3, #1
 8014d26:	d503      	bpl.n	8014d30 <__sfp+0x24>
 8014d28:	6833      	ldr	r3, [r6, #0]
 8014d2a:	b133      	cbz	r3, 8014d3a <__sfp+0x2e>
 8014d2c:	6836      	ldr	r6, [r6, #0]
 8014d2e:	e7f7      	b.n	8014d20 <__sfp+0x14>
 8014d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014d34:	b16d      	cbz	r5, 8014d52 <__sfp+0x46>
 8014d36:	3468      	adds	r4, #104	; 0x68
 8014d38:	e7f4      	b.n	8014d24 <__sfp+0x18>
 8014d3a:	2104      	movs	r1, #4
 8014d3c:	4638      	mov	r0, r7
 8014d3e:	f7ff ff9f 	bl	8014c80 <__sfmoreglue>
 8014d42:	6030      	str	r0, [r6, #0]
 8014d44:	2800      	cmp	r0, #0
 8014d46:	d1f1      	bne.n	8014d2c <__sfp+0x20>
 8014d48:	230c      	movs	r3, #12
 8014d4a:	603b      	str	r3, [r7, #0]
 8014d4c:	4604      	mov	r4, r0
 8014d4e:	4620      	mov	r0, r4
 8014d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d52:	4b0b      	ldr	r3, [pc, #44]	; (8014d80 <__sfp+0x74>)
 8014d54:	6665      	str	r5, [r4, #100]	; 0x64
 8014d56:	e9c4 5500 	strd	r5, r5, [r4]
 8014d5a:	60a5      	str	r5, [r4, #8]
 8014d5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014d60:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014d64:	2208      	movs	r2, #8
 8014d66:	4629      	mov	r1, r5
 8014d68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014d6c:	f000 f8d7 	bl	8014f1e <memset>
 8014d70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014d74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014d78:	e7e9      	b.n	8014d4e <__sfp+0x42>
 8014d7a:	bf00      	nop
 8014d7c:	0801a328 	.word	0x0801a328
 8014d80:	ffff0001 	.word	0xffff0001

08014d84 <_fwalk>:
 8014d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d88:	4688      	mov	r8, r1
 8014d8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014d8e:	2600      	movs	r6, #0
 8014d90:	b914      	cbnz	r4, 8014d98 <_fwalk+0x14>
 8014d92:	4630      	mov	r0, r6
 8014d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d98:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014d9c:	3f01      	subs	r7, #1
 8014d9e:	d501      	bpl.n	8014da4 <_fwalk+0x20>
 8014da0:	6824      	ldr	r4, [r4, #0]
 8014da2:	e7f5      	b.n	8014d90 <_fwalk+0xc>
 8014da4:	89ab      	ldrh	r3, [r5, #12]
 8014da6:	2b01      	cmp	r3, #1
 8014da8:	d906      	bls.n	8014db8 <_fwalk+0x34>
 8014daa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014dae:	3301      	adds	r3, #1
 8014db0:	d002      	beq.n	8014db8 <_fwalk+0x34>
 8014db2:	4628      	mov	r0, r5
 8014db4:	47c0      	blx	r8
 8014db6:	4306      	orrs	r6, r0
 8014db8:	3568      	adds	r5, #104	; 0x68
 8014dba:	e7ef      	b.n	8014d9c <_fwalk+0x18>

08014dbc <_fwalk_reent>:
 8014dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dc0:	4680      	mov	r8, r0
 8014dc2:	4689      	mov	r9, r1
 8014dc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014dc8:	2600      	movs	r6, #0
 8014dca:	b914      	cbnz	r4, 8014dd2 <_fwalk_reent+0x16>
 8014dcc:	4630      	mov	r0, r6
 8014dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014dd6:	3f01      	subs	r7, #1
 8014dd8:	d501      	bpl.n	8014dde <_fwalk_reent+0x22>
 8014dda:	6824      	ldr	r4, [r4, #0]
 8014ddc:	e7f5      	b.n	8014dca <_fwalk_reent+0xe>
 8014dde:	89ab      	ldrh	r3, [r5, #12]
 8014de0:	2b01      	cmp	r3, #1
 8014de2:	d907      	bls.n	8014df4 <_fwalk_reent+0x38>
 8014de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014de8:	3301      	adds	r3, #1
 8014dea:	d003      	beq.n	8014df4 <_fwalk_reent+0x38>
 8014dec:	4629      	mov	r1, r5
 8014dee:	4640      	mov	r0, r8
 8014df0:	47c8      	blx	r9
 8014df2:	4306      	orrs	r6, r0
 8014df4:	3568      	adds	r5, #104	; 0x68
 8014df6:	e7ee      	b.n	8014dd6 <_fwalk_reent+0x1a>

08014df8 <__libc_init_array>:
 8014df8:	b570      	push	{r4, r5, r6, lr}
 8014dfa:	4e0d      	ldr	r6, [pc, #52]	; (8014e30 <__libc_init_array+0x38>)
 8014dfc:	4c0d      	ldr	r4, [pc, #52]	; (8014e34 <__libc_init_array+0x3c>)
 8014dfe:	1ba4      	subs	r4, r4, r6
 8014e00:	10a4      	asrs	r4, r4, #2
 8014e02:	2500      	movs	r5, #0
 8014e04:	42a5      	cmp	r5, r4
 8014e06:	d109      	bne.n	8014e1c <__libc_init_array+0x24>
 8014e08:	4e0b      	ldr	r6, [pc, #44]	; (8014e38 <__libc_init_array+0x40>)
 8014e0a:	4c0c      	ldr	r4, [pc, #48]	; (8014e3c <__libc_init_array+0x44>)
 8014e0c:	f005 f836 	bl	8019e7c <_init>
 8014e10:	1ba4      	subs	r4, r4, r6
 8014e12:	10a4      	asrs	r4, r4, #2
 8014e14:	2500      	movs	r5, #0
 8014e16:	42a5      	cmp	r5, r4
 8014e18:	d105      	bne.n	8014e26 <__libc_init_array+0x2e>
 8014e1a:	bd70      	pop	{r4, r5, r6, pc}
 8014e1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e20:	4798      	blx	r3
 8014e22:	3501      	adds	r5, #1
 8014e24:	e7ee      	b.n	8014e04 <__libc_init_array+0xc>
 8014e26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014e2a:	4798      	blx	r3
 8014e2c:	3501      	adds	r5, #1
 8014e2e:	e7f2      	b.n	8014e16 <__libc_init_array+0x1e>
 8014e30:	0801a600 	.word	0x0801a600
 8014e34:	0801a600 	.word	0x0801a600
 8014e38:	0801a600 	.word	0x0801a600
 8014e3c:	0801a604 	.word	0x0801a604

08014e40 <__swhatbuf_r>:
 8014e40:	b570      	push	{r4, r5, r6, lr}
 8014e42:	460e      	mov	r6, r1
 8014e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e48:	2900      	cmp	r1, #0
 8014e4a:	b096      	sub	sp, #88	; 0x58
 8014e4c:	4614      	mov	r4, r2
 8014e4e:	461d      	mov	r5, r3
 8014e50:	da07      	bge.n	8014e62 <__swhatbuf_r+0x22>
 8014e52:	2300      	movs	r3, #0
 8014e54:	602b      	str	r3, [r5, #0]
 8014e56:	89b3      	ldrh	r3, [r6, #12]
 8014e58:	061a      	lsls	r2, r3, #24
 8014e5a:	d410      	bmi.n	8014e7e <__swhatbuf_r+0x3e>
 8014e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e60:	e00e      	b.n	8014e80 <__swhatbuf_r+0x40>
 8014e62:	466a      	mov	r2, sp
 8014e64:	f003 fe64 	bl	8018b30 <_fstat_r>
 8014e68:	2800      	cmp	r0, #0
 8014e6a:	dbf2      	blt.n	8014e52 <__swhatbuf_r+0x12>
 8014e6c:	9a01      	ldr	r2, [sp, #4]
 8014e6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014e72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014e76:	425a      	negs	r2, r3
 8014e78:	415a      	adcs	r2, r3
 8014e7a:	602a      	str	r2, [r5, #0]
 8014e7c:	e7ee      	b.n	8014e5c <__swhatbuf_r+0x1c>
 8014e7e:	2340      	movs	r3, #64	; 0x40
 8014e80:	2000      	movs	r0, #0
 8014e82:	6023      	str	r3, [r4, #0]
 8014e84:	b016      	add	sp, #88	; 0x58
 8014e86:	bd70      	pop	{r4, r5, r6, pc}

08014e88 <__smakebuf_r>:
 8014e88:	898b      	ldrh	r3, [r1, #12]
 8014e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014e8c:	079d      	lsls	r5, r3, #30
 8014e8e:	4606      	mov	r6, r0
 8014e90:	460c      	mov	r4, r1
 8014e92:	d507      	bpl.n	8014ea4 <__smakebuf_r+0x1c>
 8014e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014e98:	6023      	str	r3, [r4, #0]
 8014e9a:	6123      	str	r3, [r4, #16]
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	6163      	str	r3, [r4, #20]
 8014ea0:	b002      	add	sp, #8
 8014ea2:	bd70      	pop	{r4, r5, r6, pc}
 8014ea4:	ab01      	add	r3, sp, #4
 8014ea6:	466a      	mov	r2, sp
 8014ea8:	f7ff ffca 	bl	8014e40 <__swhatbuf_r>
 8014eac:	9900      	ldr	r1, [sp, #0]
 8014eae:	4605      	mov	r5, r0
 8014eb0:	4630      	mov	r0, r6
 8014eb2:	f000 f88b 	bl	8014fcc <_malloc_r>
 8014eb6:	b948      	cbnz	r0, 8014ecc <__smakebuf_r+0x44>
 8014eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ebc:	059a      	lsls	r2, r3, #22
 8014ebe:	d4ef      	bmi.n	8014ea0 <__smakebuf_r+0x18>
 8014ec0:	f023 0303 	bic.w	r3, r3, #3
 8014ec4:	f043 0302 	orr.w	r3, r3, #2
 8014ec8:	81a3      	strh	r3, [r4, #12]
 8014eca:	e7e3      	b.n	8014e94 <__smakebuf_r+0xc>
 8014ecc:	4b0d      	ldr	r3, [pc, #52]	; (8014f04 <__smakebuf_r+0x7c>)
 8014ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8014ed0:	89a3      	ldrh	r3, [r4, #12]
 8014ed2:	6020      	str	r0, [r4, #0]
 8014ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ed8:	81a3      	strh	r3, [r4, #12]
 8014eda:	9b00      	ldr	r3, [sp, #0]
 8014edc:	6163      	str	r3, [r4, #20]
 8014ede:	9b01      	ldr	r3, [sp, #4]
 8014ee0:	6120      	str	r0, [r4, #16]
 8014ee2:	b15b      	cbz	r3, 8014efc <__smakebuf_r+0x74>
 8014ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ee8:	4630      	mov	r0, r6
 8014eea:	f004 f959 	bl	80191a0 <_isatty_r>
 8014eee:	b128      	cbz	r0, 8014efc <__smakebuf_r+0x74>
 8014ef0:	89a3      	ldrh	r3, [r4, #12]
 8014ef2:	f023 0303 	bic.w	r3, r3, #3
 8014ef6:	f043 0301 	orr.w	r3, r3, #1
 8014efa:	81a3      	strh	r3, [r4, #12]
 8014efc:	89a3      	ldrh	r3, [r4, #12]
 8014efe:	431d      	orrs	r5, r3
 8014f00:	81a5      	strh	r5, [r4, #12]
 8014f02:	e7cd      	b.n	8014ea0 <__smakebuf_r+0x18>
 8014f04:	08014c75 	.word	0x08014c75

08014f08 <memcpy>:
 8014f08:	b510      	push	{r4, lr}
 8014f0a:	1e43      	subs	r3, r0, #1
 8014f0c:	440a      	add	r2, r1
 8014f0e:	4291      	cmp	r1, r2
 8014f10:	d100      	bne.n	8014f14 <memcpy+0xc>
 8014f12:	bd10      	pop	{r4, pc}
 8014f14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f1c:	e7f7      	b.n	8014f0e <memcpy+0x6>

08014f1e <memset>:
 8014f1e:	4402      	add	r2, r0
 8014f20:	4603      	mov	r3, r0
 8014f22:	4293      	cmp	r3, r2
 8014f24:	d100      	bne.n	8014f28 <memset+0xa>
 8014f26:	4770      	bx	lr
 8014f28:	f803 1b01 	strb.w	r1, [r3], #1
 8014f2c:	e7f9      	b.n	8014f22 <memset+0x4>
	...

08014f30 <_free_r>:
 8014f30:	b538      	push	{r3, r4, r5, lr}
 8014f32:	4605      	mov	r5, r0
 8014f34:	2900      	cmp	r1, #0
 8014f36:	d045      	beq.n	8014fc4 <_free_r+0x94>
 8014f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f3c:	1f0c      	subs	r4, r1, #4
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	bfb8      	it	lt
 8014f42:	18e4      	addlt	r4, r4, r3
 8014f44:	f004 f9a3 	bl	801928e <__malloc_lock>
 8014f48:	4a1f      	ldr	r2, [pc, #124]	; (8014fc8 <_free_r+0x98>)
 8014f4a:	6813      	ldr	r3, [r2, #0]
 8014f4c:	4610      	mov	r0, r2
 8014f4e:	b933      	cbnz	r3, 8014f5e <_free_r+0x2e>
 8014f50:	6063      	str	r3, [r4, #4]
 8014f52:	6014      	str	r4, [r2, #0]
 8014f54:	4628      	mov	r0, r5
 8014f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f5a:	f004 b999 	b.w	8019290 <__malloc_unlock>
 8014f5e:	42a3      	cmp	r3, r4
 8014f60:	d90c      	bls.n	8014f7c <_free_r+0x4c>
 8014f62:	6821      	ldr	r1, [r4, #0]
 8014f64:	1862      	adds	r2, r4, r1
 8014f66:	4293      	cmp	r3, r2
 8014f68:	bf04      	itt	eq
 8014f6a:	681a      	ldreq	r2, [r3, #0]
 8014f6c:	685b      	ldreq	r3, [r3, #4]
 8014f6e:	6063      	str	r3, [r4, #4]
 8014f70:	bf04      	itt	eq
 8014f72:	1852      	addeq	r2, r2, r1
 8014f74:	6022      	streq	r2, [r4, #0]
 8014f76:	6004      	str	r4, [r0, #0]
 8014f78:	e7ec      	b.n	8014f54 <_free_r+0x24>
 8014f7a:	4613      	mov	r3, r2
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	b10a      	cbz	r2, 8014f84 <_free_r+0x54>
 8014f80:	42a2      	cmp	r2, r4
 8014f82:	d9fa      	bls.n	8014f7a <_free_r+0x4a>
 8014f84:	6819      	ldr	r1, [r3, #0]
 8014f86:	1858      	adds	r0, r3, r1
 8014f88:	42a0      	cmp	r0, r4
 8014f8a:	d10b      	bne.n	8014fa4 <_free_r+0x74>
 8014f8c:	6820      	ldr	r0, [r4, #0]
 8014f8e:	4401      	add	r1, r0
 8014f90:	1858      	adds	r0, r3, r1
 8014f92:	4282      	cmp	r2, r0
 8014f94:	6019      	str	r1, [r3, #0]
 8014f96:	d1dd      	bne.n	8014f54 <_free_r+0x24>
 8014f98:	6810      	ldr	r0, [r2, #0]
 8014f9a:	6852      	ldr	r2, [r2, #4]
 8014f9c:	605a      	str	r2, [r3, #4]
 8014f9e:	4401      	add	r1, r0
 8014fa0:	6019      	str	r1, [r3, #0]
 8014fa2:	e7d7      	b.n	8014f54 <_free_r+0x24>
 8014fa4:	d902      	bls.n	8014fac <_free_r+0x7c>
 8014fa6:	230c      	movs	r3, #12
 8014fa8:	602b      	str	r3, [r5, #0]
 8014faa:	e7d3      	b.n	8014f54 <_free_r+0x24>
 8014fac:	6820      	ldr	r0, [r4, #0]
 8014fae:	1821      	adds	r1, r4, r0
 8014fb0:	428a      	cmp	r2, r1
 8014fb2:	bf04      	itt	eq
 8014fb4:	6811      	ldreq	r1, [r2, #0]
 8014fb6:	6852      	ldreq	r2, [r2, #4]
 8014fb8:	6062      	str	r2, [r4, #4]
 8014fba:	bf04      	itt	eq
 8014fbc:	1809      	addeq	r1, r1, r0
 8014fbe:	6021      	streq	r1, [r4, #0]
 8014fc0:	605c      	str	r4, [r3, #4]
 8014fc2:	e7c7      	b.n	8014f54 <_free_r+0x24>
 8014fc4:	bd38      	pop	{r3, r4, r5, pc}
 8014fc6:	bf00      	nop
 8014fc8:	2000821c 	.word	0x2000821c

08014fcc <_malloc_r>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	1ccd      	adds	r5, r1, #3
 8014fd0:	f025 0503 	bic.w	r5, r5, #3
 8014fd4:	3508      	adds	r5, #8
 8014fd6:	2d0c      	cmp	r5, #12
 8014fd8:	bf38      	it	cc
 8014fda:	250c      	movcc	r5, #12
 8014fdc:	2d00      	cmp	r5, #0
 8014fde:	4606      	mov	r6, r0
 8014fe0:	db01      	blt.n	8014fe6 <_malloc_r+0x1a>
 8014fe2:	42a9      	cmp	r1, r5
 8014fe4:	d903      	bls.n	8014fee <_malloc_r+0x22>
 8014fe6:	230c      	movs	r3, #12
 8014fe8:	6033      	str	r3, [r6, #0]
 8014fea:	2000      	movs	r0, #0
 8014fec:	bd70      	pop	{r4, r5, r6, pc}
 8014fee:	f004 f94e 	bl	801928e <__malloc_lock>
 8014ff2:	4a21      	ldr	r2, [pc, #132]	; (8015078 <_malloc_r+0xac>)
 8014ff4:	6814      	ldr	r4, [r2, #0]
 8014ff6:	4621      	mov	r1, r4
 8014ff8:	b991      	cbnz	r1, 8015020 <_malloc_r+0x54>
 8014ffa:	4c20      	ldr	r4, [pc, #128]	; (801507c <_malloc_r+0xb0>)
 8014ffc:	6823      	ldr	r3, [r4, #0]
 8014ffe:	b91b      	cbnz	r3, 8015008 <_malloc_r+0x3c>
 8015000:	4630      	mov	r0, r6
 8015002:	f001 fd0f 	bl	8016a24 <_sbrk_r>
 8015006:	6020      	str	r0, [r4, #0]
 8015008:	4629      	mov	r1, r5
 801500a:	4630      	mov	r0, r6
 801500c:	f001 fd0a 	bl	8016a24 <_sbrk_r>
 8015010:	1c43      	adds	r3, r0, #1
 8015012:	d124      	bne.n	801505e <_malloc_r+0x92>
 8015014:	230c      	movs	r3, #12
 8015016:	6033      	str	r3, [r6, #0]
 8015018:	4630      	mov	r0, r6
 801501a:	f004 f939 	bl	8019290 <__malloc_unlock>
 801501e:	e7e4      	b.n	8014fea <_malloc_r+0x1e>
 8015020:	680b      	ldr	r3, [r1, #0]
 8015022:	1b5b      	subs	r3, r3, r5
 8015024:	d418      	bmi.n	8015058 <_malloc_r+0x8c>
 8015026:	2b0b      	cmp	r3, #11
 8015028:	d90f      	bls.n	801504a <_malloc_r+0x7e>
 801502a:	600b      	str	r3, [r1, #0]
 801502c:	50cd      	str	r5, [r1, r3]
 801502e:	18cc      	adds	r4, r1, r3
 8015030:	4630      	mov	r0, r6
 8015032:	f004 f92d 	bl	8019290 <__malloc_unlock>
 8015036:	f104 000b 	add.w	r0, r4, #11
 801503a:	1d23      	adds	r3, r4, #4
 801503c:	f020 0007 	bic.w	r0, r0, #7
 8015040:	1ac3      	subs	r3, r0, r3
 8015042:	d0d3      	beq.n	8014fec <_malloc_r+0x20>
 8015044:	425a      	negs	r2, r3
 8015046:	50e2      	str	r2, [r4, r3]
 8015048:	e7d0      	b.n	8014fec <_malloc_r+0x20>
 801504a:	428c      	cmp	r4, r1
 801504c:	684b      	ldr	r3, [r1, #4]
 801504e:	bf16      	itet	ne
 8015050:	6063      	strne	r3, [r4, #4]
 8015052:	6013      	streq	r3, [r2, #0]
 8015054:	460c      	movne	r4, r1
 8015056:	e7eb      	b.n	8015030 <_malloc_r+0x64>
 8015058:	460c      	mov	r4, r1
 801505a:	6849      	ldr	r1, [r1, #4]
 801505c:	e7cc      	b.n	8014ff8 <_malloc_r+0x2c>
 801505e:	1cc4      	adds	r4, r0, #3
 8015060:	f024 0403 	bic.w	r4, r4, #3
 8015064:	42a0      	cmp	r0, r4
 8015066:	d005      	beq.n	8015074 <_malloc_r+0xa8>
 8015068:	1a21      	subs	r1, r4, r0
 801506a:	4630      	mov	r0, r6
 801506c:	f001 fcda 	bl	8016a24 <_sbrk_r>
 8015070:	3001      	adds	r0, #1
 8015072:	d0cf      	beq.n	8015014 <_malloc_r+0x48>
 8015074:	6025      	str	r5, [r4, #0]
 8015076:	e7db      	b.n	8015030 <_malloc_r+0x64>
 8015078:	2000821c 	.word	0x2000821c
 801507c:	20008220 	.word	0x20008220

08015080 <__sfputc_r>:
 8015080:	6893      	ldr	r3, [r2, #8]
 8015082:	3b01      	subs	r3, #1
 8015084:	2b00      	cmp	r3, #0
 8015086:	b410      	push	{r4}
 8015088:	6093      	str	r3, [r2, #8]
 801508a:	da08      	bge.n	801509e <__sfputc_r+0x1e>
 801508c:	6994      	ldr	r4, [r2, #24]
 801508e:	42a3      	cmp	r3, r4
 8015090:	db01      	blt.n	8015096 <__sfputc_r+0x16>
 8015092:	290a      	cmp	r1, #10
 8015094:	d103      	bne.n	801509e <__sfputc_r+0x1e>
 8015096:	f85d 4b04 	ldr.w	r4, [sp], #4
 801509a:	f002 be23 	b.w	8017ce4 <__swbuf_r>
 801509e:	6813      	ldr	r3, [r2, #0]
 80150a0:	1c58      	adds	r0, r3, #1
 80150a2:	6010      	str	r0, [r2, #0]
 80150a4:	7019      	strb	r1, [r3, #0]
 80150a6:	4608      	mov	r0, r1
 80150a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150ac:	4770      	bx	lr

080150ae <__sfputs_r>:
 80150ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150b0:	4606      	mov	r6, r0
 80150b2:	460f      	mov	r7, r1
 80150b4:	4614      	mov	r4, r2
 80150b6:	18d5      	adds	r5, r2, r3
 80150b8:	42ac      	cmp	r4, r5
 80150ba:	d101      	bne.n	80150c0 <__sfputs_r+0x12>
 80150bc:	2000      	movs	r0, #0
 80150be:	e007      	b.n	80150d0 <__sfputs_r+0x22>
 80150c0:	463a      	mov	r2, r7
 80150c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150c6:	4630      	mov	r0, r6
 80150c8:	f7ff ffda 	bl	8015080 <__sfputc_r>
 80150cc:	1c43      	adds	r3, r0, #1
 80150ce:	d1f3      	bne.n	80150b8 <__sfputs_r+0xa>
 80150d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080150d4 <_vfiprintf_r>:
 80150d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d8:	460c      	mov	r4, r1
 80150da:	b09d      	sub	sp, #116	; 0x74
 80150dc:	4617      	mov	r7, r2
 80150de:	461d      	mov	r5, r3
 80150e0:	4606      	mov	r6, r0
 80150e2:	b118      	cbz	r0, 80150ec <_vfiprintf_r+0x18>
 80150e4:	6983      	ldr	r3, [r0, #24]
 80150e6:	b90b      	cbnz	r3, 80150ec <_vfiprintf_r+0x18>
 80150e8:	f7ff fde0 	bl	8014cac <__sinit>
 80150ec:	4b7c      	ldr	r3, [pc, #496]	; (80152e0 <_vfiprintf_r+0x20c>)
 80150ee:	429c      	cmp	r4, r3
 80150f0:	d158      	bne.n	80151a4 <_vfiprintf_r+0xd0>
 80150f2:	6874      	ldr	r4, [r6, #4]
 80150f4:	89a3      	ldrh	r3, [r4, #12]
 80150f6:	0718      	lsls	r0, r3, #28
 80150f8:	d55e      	bpl.n	80151b8 <_vfiprintf_r+0xe4>
 80150fa:	6923      	ldr	r3, [r4, #16]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d05b      	beq.n	80151b8 <_vfiprintf_r+0xe4>
 8015100:	2300      	movs	r3, #0
 8015102:	9309      	str	r3, [sp, #36]	; 0x24
 8015104:	2320      	movs	r3, #32
 8015106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801510a:	2330      	movs	r3, #48	; 0x30
 801510c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015110:	9503      	str	r5, [sp, #12]
 8015112:	f04f 0b01 	mov.w	fp, #1
 8015116:	46b8      	mov	r8, r7
 8015118:	4645      	mov	r5, r8
 801511a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801511e:	b10b      	cbz	r3, 8015124 <_vfiprintf_r+0x50>
 8015120:	2b25      	cmp	r3, #37	; 0x25
 8015122:	d154      	bne.n	80151ce <_vfiprintf_r+0xfa>
 8015124:	ebb8 0a07 	subs.w	sl, r8, r7
 8015128:	d00b      	beq.n	8015142 <_vfiprintf_r+0x6e>
 801512a:	4653      	mov	r3, sl
 801512c:	463a      	mov	r2, r7
 801512e:	4621      	mov	r1, r4
 8015130:	4630      	mov	r0, r6
 8015132:	f7ff ffbc 	bl	80150ae <__sfputs_r>
 8015136:	3001      	adds	r0, #1
 8015138:	f000 80c2 	beq.w	80152c0 <_vfiprintf_r+0x1ec>
 801513c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801513e:	4453      	add	r3, sl
 8015140:	9309      	str	r3, [sp, #36]	; 0x24
 8015142:	f898 3000 	ldrb.w	r3, [r8]
 8015146:	2b00      	cmp	r3, #0
 8015148:	f000 80ba 	beq.w	80152c0 <_vfiprintf_r+0x1ec>
 801514c:	2300      	movs	r3, #0
 801514e:	f04f 32ff 	mov.w	r2, #4294967295
 8015152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015156:	9304      	str	r3, [sp, #16]
 8015158:	9307      	str	r3, [sp, #28]
 801515a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801515e:	931a      	str	r3, [sp, #104]	; 0x68
 8015160:	46a8      	mov	r8, r5
 8015162:	2205      	movs	r2, #5
 8015164:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015168:	485e      	ldr	r0, [pc, #376]	; (80152e4 <_vfiprintf_r+0x210>)
 801516a:	f7f2 ff71 	bl	8008050 <memchr>
 801516e:	9b04      	ldr	r3, [sp, #16]
 8015170:	bb78      	cbnz	r0, 80151d2 <_vfiprintf_r+0xfe>
 8015172:	06d9      	lsls	r1, r3, #27
 8015174:	bf44      	itt	mi
 8015176:	2220      	movmi	r2, #32
 8015178:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801517c:	071a      	lsls	r2, r3, #28
 801517e:	bf44      	itt	mi
 8015180:	222b      	movmi	r2, #43	; 0x2b
 8015182:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015186:	782a      	ldrb	r2, [r5, #0]
 8015188:	2a2a      	cmp	r2, #42	; 0x2a
 801518a:	d02a      	beq.n	80151e2 <_vfiprintf_r+0x10e>
 801518c:	9a07      	ldr	r2, [sp, #28]
 801518e:	46a8      	mov	r8, r5
 8015190:	2000      	movs	r0, #0
 8015192:	250a      	movs	r5, #10
 8015194:	4641      	mov	r1, r8
 8015196:	f811 3b01 	ldrb.w	r3, [r1], #1
 801519a:	3b30      	subs	r3, #48	; 0x30
 801519c:	2b09      	cmp	r3, #9
 801519e:	d969      	bls.n	8015274 <_vfiprintf_r+0x1a0>
 80151a0:	b360      	cbz	r0, 80151fc <_vfiprintf_r+0x128>
 80151a2:	e024      	b.n	80151ee <_vfiprintf_r+0x11a>
 80151a4:	4b50      	ldr	r3, [pc, #320]	; (80152e8 <_vfiprintf_r+0x214>)
 80151a6:	429c      	cmp	r4, r3
 80151a8:	d101      	bne.n	80151ae <_vfiprintf_r+0xda>
 80151aa:	68b4      	ldr	r4, [r6, #8]
 80151ac:	e7a2      	b.n	80150f4 <_vfiprintf_r+0x20>
 80151ae:	4b4f      	ldr	r3, [pc, #316]	; (80152ec <_vfiprintf_r+0x218>)
 80151b0:	429c      	cmp	r4, r3
 80151b2:	bf08      	it	eq
 80151b4:	68f4      	ldreq	r4, [r6, #12]
 80151b6:	e79d      	b.n	80150f4 <_vfiprintf_r+0x20>
 80151b8:	4621      	mov	r1, r4
 80151ba:	4630      	mov	r0, r6
 80151bc:	f002 fdf6 	bl	8017dac <__swsetup_r>
 80151c0:	2800      	cmp	r0, #0
 80151c2:	d09d      	beq.n	8015100 <_vfiprintf_r+0x2c>
 80151c4:	f04f 30ff 	mov.w	r0, #4294967295
 80151c8:	b01d      	add	sp, #116	; 0x74
 80151ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ce:	46a8      	mov	r8, r5
 80151d0:	e7a2      	b.n	8015118 <_vfiprintf_r+0x44>
 80151d2:	4a44      	ldr	r2, [pc, #272]	; (80152e4 <_vfiprintf_r+0x210>)
 80151d4:	1a80      	subs	r0, r0, r2
 80151d6:	fa0b f000 	lsl.w	r0, fp, r0
 80151da:	4318      	orrs	r0, r3
 80151dc:	9004      	str	r0, [sp, #16]
 80151de:	4645      	mov	r5, r8
 80151e0:	e7be      	b.n	8015160 <_vfiprintf_r+0x8c>
 80151e2:	9a03      	ldr	r2, [sp, #12]
 80151e4:	1d11      	adds	r1, r2, #4
 80151e6:	6812      	ldr	r2, [r2, #0]
 80151e8:	9103      	str	r1, [sp, #12]
 80151ea:	2a00      	cmp	r2, #0
 80151ec:	db01      	blt.n	80151f2 <_vfiprintf_r+0x11e>
 80151ee:	9207      	str	r2, [sp, #28]
 80151f0:	e004      	b.n	80151fc <_vfiprintf_r+0x128>
 80151f2:	4252      	negs	r2, r2
 80151f4:	f043 0302 	orr.w	r3, r3, #2
 80151f8:	9207      	str	r2, [sp, #28]
 80151fa:	9304      	str	r3, [sp, #16]
 80151fc:	f898 3000 	ldrb.w	r3, [r8]
 8015200:	2b2e      	cmp	r3, #46	; 0x2e
 8015202:	d10e      	bne.n	8015222 <_vfiprintf_r+0x14e>
 8015204:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015208:	2b2a      	cmp	r3, #42	; 0x2a
 801520a:	d138      	bne.n	801527e <_vfiprintf_r+0x1aa>
 801520c:	9b03      	ldr	r3, [sp, #12]
 801520e:	1d1a      	adds	r2, r3, #4
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	9203      	str	r2, [sp, #12]
 8015214:	2b00      	cmp	r3, #0
 8015216:	bfb8      	it	lt
 8015218:	f04f 33ff 	movlt.w	r3, #4294967295
 801521c:	f108 0802 	add.w	r8, r8, #2
 8015220:	9305      	str	r3, [sp, #20]
 8015222:	4d33      	ldr	r5, [pc, #204]	; (80152f0 <_vfiprintf_r+0x21c>)
 8015224:	f898 1000 	ldrb.w	r1, [r8]
 8015228:	2203      	movs	r2, #3
 801522a:	4628      	mov	r0, r5
 801522c:	f7f2 ff10 	bl	8008050 <memchr>
 8015230:	b140      	cbz	r0, 8015244 <_vfiprintf_r+0x170>
 8015232:	2340      	movs	r3, #64	; 0x40
 8015234:	1b40      	subs	r0, r0, r5
 8015236:	fa03 f000 	lsl.w	r0, r3, r0
 801523a:	9b04      	ldr	r3, [sp, #16]
 801523c:	4303      	orrs	r3, r0
 801523e:	f108 0801 	add.w	r8, r8, #1
 8015242:	9304      	str	r3, [sp, #16]
 8015244:	f898 1000 	ldrb.w	r1, [r8]
 8015248:	482a      	ldr	r0, [pc, #168]	; (80152f4 <_vfiprintf_r+0x220>)
 801524a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801524e:	2206      	movs	r2, #6
 8015250:	f108 0701 	add.w	r7, r8, #1
 8015254:	f7f2 fefc 	bl	8008050 <memchr>
 8015258:	2800      	cmp	r0, #0
 801525a:	d037      	beq.n	80152cc <_vfiprintf_r+0x1f8>
 801525c:	4b26      	ldr	r3, [pc, #152]	; (80152f8 <_vfiprintf_r+0x224>)
 801525e:	bb1b      	cbnz	r3, 80152a8 <_vfiprintf_r+0x1d4>
 8015260:	9b03      	ldr	r3, [sp, #12]
 8015262:	3307      	adds	r3, #7
 8015264:	f023 0307 	bic.w	r3, r3, #7
 8015268:	3308      	adds	r3, #8
 801526a:	9303      	str	r3, [sp, #12]
 801526c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801526e:	444b      	add	r3, r9
 8015270:	9309      	str	r3, [sp, #36]	; 0x24
 8015272:	e750      	b.n	8015116 <_vfiprintf_r+0x42>
 8015274:	fb05 3202 	mla	r2, r5, r2, r3
 8015278:	2001      	movs	r0, #1
 801527a:	4688      	mov	r8, r1
 801527c:	e78a      	b.n	8015194 <_vfiprintf_r+0xc0>
 801527e:	2300      	movs	r3, #0
 8015280:	f108 0801 	add.w	r8, r8, #1
 8015284:	9305      	str	r3, [sp, #20]
 8015286:	4619      	mov	r1, r3
 8015288:	250a      	movs	r5, #10
 801528a:	4640      	mov	r0, r8
 801528c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015290:	3a30      	subs	r2, #48	; 0x30
 8015292:	2a09      	cmp	r2, #9
 8015294:	d903      	bls.n	801529e <_vfiprintf_r+0x1ca>
 8015296:	2b00      	cmp	r3, #0
 8015298:	d0c3      	beq.n	8015222 <_vfiprintf_r+0x14e>
 801529a:	9105      	str	r1, [sp, #20]
 801529c:	e7c1      	b.n	8015222 <_vfiprintf_r+0x14e>
 801529e:	fb05 2101 	mla	r1, r5, r1, r2
 80152a2:	2301      	movs	r3, #1
 80152a4:	4680      	mov	r8, r0
 80152a6:	e7f0      	b.n	801528a <_vfiprintf_r+0x1b6>
 80152a8:	ab03      	add	r3, sp, #12
 80152aa:	9300      	str	r3, [sp, #0]
 80152ac:	4622      	mov	r2, r4
 80152ae:	4b13      	ldr	r3, [pc, #76]	; (80152fc <_vfiprintf_r+0x228>)
 80152b0:	a904      	add	r1, sp, #16
 80152b2:	4630      	mov	r0, r6
 80152b4:	f000 f8b8 	bl	8015428 <_printf_float>
 80152b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80152bc:	4681      	mov	r9, r0
 80152be:	d1d5      	bne.n	801526c <_vfiprintf_r+0x198>
 80152c0:	89a3      	ldrh	r3, [r4, #12]
 80152c2:	065b      	lsls	r3, r3, #25
 80152c4:	f53f af7e 	bmi.w	80151c4 <_vfiprintf_r+0xf0>
 80152c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152ca:	e77d      	b.n	80151c8 <_vfiprintf_r+0xf4>
 80152cc:	ab03      	add	r3, sp, #12
 80152ce:	9300      	str	r3, [sp, #0]
 80152d0:	4622      	mov	r2, r4
 80152d2:	4b0a      	ldr	r3, [pc, #40]	; (80152fc <_vfiprintf_r+0x228>)
 80152d4:	a904      	add	r1, sp, #16
 80152d6:	4630      	mov	r0, r6
 80152d8:	f000 fb5c 	bl	8015994 <_printf_i>
 80152dc:	e7ec      	b.n	80152b8 <_vfiprintf_r+0x1e4>
 80152de:	bf00      	nop
 80152e0:	0801a2e8 	.word	0x0801a2e8
 80152e4:	0801a32c 	.word	0x0801a32c
 80152e8:	0801a308 	.word	0x0801a308
 80152ec:	0801a2c8 	.word	0x0801a2c8
 80152f0:	0801a332 	.word	0x0801a332
 80152f4:	0801a336 	.word	0x0801a336
 80152f8:	08015429 	.word	0x08015429
 80152fc:	080150af 	.word	0x080150af

08015300 <__cvt>:
 8015300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015304:	ec55 4b10 	vmov	r4, r5, d0
 8015308:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801530a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801530e:	2d00      	cmp	r5, #0
 8015310:	460e      	mov	r6, r1
 8015312:	4691      	mov	r9, r2
 8015314:	4619      	mov	r1, r3
 8015316:	bfb8      	it	lt
 8015318:	4622      	movlt	r2, r4
 801531a:	462b      	mov	r3, r5
 801531c:	f027 0720 	bic.w	r7, r7, #32
 8015320:	bfbb      	ittet	lt
 8015322:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015326:	461d      	movlt	r5, r3
 8015328:	2300      	movge	r3, #0
 801532a:	232d      	movlt	r3, #45	; 0x2d
 801532c:	bfb8      	it	lt
 801532e:	4614      	movlt	r4, r2
 8015330:	2f46      	cmp	r7, #70	; 0x46
 8015332:	700b      	strb	r3, [r1, #0]
 8015334:	d004      	beq.n	8015340 <__cvt+0x40>
 8015336:	2f45      	cmp	r7, #69	; 0x45
 8015338:	d100      	bne.n	801533c <__cvt+0x3c>
 801533a:	3601      	adds	r6, #1
 801533c:	2102      	movs	r1, #2
 801533e:	e000      	b.n	8015342 <__cvt+0x42>
 8015340:	2103      	movs	r1, #3
 8015342:	ab03      	add	r3, sp, #12
 8015344:	9301      	str	r3, [sp, #4]
 8015346:	ab02      	add	r3, sp, #8
 8015348:	9300      	str	r3, [sp, #0]
 801534a:	4632      	mov	r2, r6
 801534c:	4653      	mov	r3, sl
 801534e:	ec45 4b10 	vmov	d0, r4, r5
 8015352:	f002 fe35 	bl	8017fc0 <_dtoa_r>
 8015356:	2f47      	cmp	r7, #71	; 0x47
 8015358:	4680      	mov	r8, r0
 801535a:	d102      	bne.n	8015362 <__cvt+0x62>
 801535c:	f019 0f01 	tst.w	r9, #1
 8015360:	d026      	beq.n	80153b0 <__cvt+0xb0>
 8015362:	2f46      	cmp	r7, #70	; 0x46
 8015364:	eb08 0906 	add.w	r9, r8, r6
 8015368:	d111      	bne.n	801538e <__cvt+0x8e>
 801536a:	f898 3000 	ldrb.w	r3, [r8]
 801536e:	2b30      	cmp	r3, #48	; 0x30
 8015370:	d10a      	bne.n	8015388 <__cvt+0x88>
 8015372:	2200      	movs	r2, #0
 8015374:	2300      	movs	r3, #0
 8015376:	4620      	mov	r0, r4
 8015378:	4629      	mov	r1, r5
 801537a:	f7f3 fadd 	bl	8008938 <__aeabi_dcmpeq>
 801537e:	b918      	cbnz	r0, 8015388 <__cvt+0x88>
 8015380:	f1c6 0601 	rsb	r6, r6, #1
 8015384:	f8ca 6000 	str.w	r6, [sl]
 8015388:	f8da 3000 	ldr.w	r3, [sl]
 801538c:	4499      	add	r9, r3
 801538e:	2200      	movs	r2, #0
 8015390:	2300      	movs	r3, #0
 8015392:	4620      	mov	r0, r4
 8015394:	4629      	mov	r1, r5
 8015396:	f7f3 facf 	bl	8008938 <__aeabi_dcmpeq>
 801539a:	b938      	cbnz	r0, 80153ac <__cvt+0xac>
 801539c:	2230      	movs	r2, #48	; 0x30
 801539e:	9b03      	ldr	r3, [sp, #12]
 80153a0:	454b      	cmp	r3, r9
 80153a2:	d205      	bcs.n	80153b0 <__cvt+0xb0>
 80153a4:	1c59      	adds	r1, r3, #1
 80153a6:	9103      	str	r1, [sp, #12]
 80153a8:	701a      	strb	r2, [r3, #0]
 80153aa:	e7f8      	b.n	801539e <__cvt+0x9e>
 80153ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80153b0:	9b03      	ldr	r3, [sp, #12]
 80153b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153b4:	eba3 0308 	sub.w	r3, r3, r8
 80153b8:	4640      	mov	r0, r8
 80153ba:	6013      	str	r3, [r2, #0]
 80153bc:	b004      	add	sp, #16
 80153be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080153c2 <__exponent>:
 80153c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80153c4:	2900      	cmp	r1, #0
 80153c6:	4604      	mov	r4, r0
 80153c8:	bfba      	itte	lt
 80153ca:	4249      	neglt	r1, r1
 80153cc:	232d      	movlt	r3, #45	; 0x2d
 80153ce:	232b      	movge	r3, #43	; 0x2b
 80153d0:	2909      	cmp	r1, #9
 80153d2:	f804 2b02 	strb.w	r2, [r4], #2
 80153d6:	7043      	strb	r3, [r0, #1]
 80153d8:	dd20      	ble.n	801541c <__exponent+0x5a>
 80153da:	f10d 0307 	add.w	r3, sp, #7
 80153de:	461f      	mov	r7, r3
 80153e0:	260a      	movs	r6, #10
 80153e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80153e6:	fb06 1115 	mls	r1, r6, r5, r1
 80153ea:	3130      	adds	r1, #48	; 0x30
 80153ec:	2d09      	cmp	r5, #9
 80153ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80153f2:	f103 32ff 	add.w	r2, r3, #4294967295
 80153f6:	4629      	mov	r1, r5
 80153f8:	dc09      	bgt.n	801540e <__exponent+0x4c>
 80153fa:	3130      	adds	r1, #48	; 0x30
 80153fc:	3b02      	subs	r3, #2
 80153fe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015402:	42bb      	cmp	r3, r7
 8015404:	4622      	mov	r2, r4
 8015406:	d304      	bcc.n	8015412 <__exponent+0x50>
 8015408:	1a10      	subs	r0, r2, r0
 801540a:	b003      	add	sp, #12
 801540c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801540e:	4613      	mov	r3, r2
 8015410:	e7e7      	b.n	80153e2 <__exponent+0x20>
 8015412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015416:	f804 2b01 	strb.w	r2, [r4], #1
 801541a:	e7f2      	b.n	8015402 <__exponent+0x40>
 801541c:	2330      	movs	r3, #48	; 0x30
 801541e:	4419      	add	r1, r3
 8015420:	7083      	strb	r3, [r0, #2]
 8015422:	1d02      	adds	r2, r0, #4
 8015424:	70c1      	strb	r1, [r0, #3]
 8015426:	e7ef      	b.n	8015408 <__exponent+0x46>

08015428 <_printf_float>:
 8015428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801542c:	b08d      	sub	sp, #52	; 0x34
 801542e:	460c      	mov	r4, r1
 8015430:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015434:	4616      	mov	r6, r2
 8015436:	461f      	mov	r7, r3
 8015438:	4605      	mov	r5, r0
 801543a:	f003 fed5 	bl	80191e8 <_localeconv_r>
 801543e:	6803      	ldr	r3, [r0, #0]
 8015440:	9304      	str	r3, [sp, #16]
 8015442:	4618      	mov	r0, r3
 8015444:	f7f2 fdfc 	bl	8008040 <strlen>
 8015448:	2300      	movs	r3, #0
 801544a:	930a      	str	r3, [sp, #40]	; 0x28
 801544c:	f8d8 3000 	ldr.w	r3, [r8]
 8015450:	9005      	str	r0, [sp, #20]
 8015452:	3307      	adds	r3, #7
 8015454:	f023 0307 	bic.w	r3, r3, #7
 8015458:	f103 0208 	add.w	r2, r3, #8
 801545c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015460:	f8d4 b000 	ldr.w	fp, [r4]
 8015464:	f8c8 2000 	str.w	r2, [r8]
 8015468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801546c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015470:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015474:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015478:	9307      	str	r3, [sp, #28]
 801547a:	f8cd 8018 	str.w	r8, [sp, #24]
 801547e:	f04f 32ff 	mov.w	r2, #4294967295
 8015482:	4ba7      	ldr	r3, [pc, #668]	; (8015720 <_printf_float+0x2f8>)
 8015484:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015488:	f7f3 fa88 	bl	800899c <__aeabi_dcmpun>
 801548c:	bb70      	cbnz	r0, 80154ec <_printf_float+0xc4>
 801548e:	f04f 32ff 	mov.w	r2, #4294967295
 8015492:	4ba3      	ldr	r3, [pc, #652]	; (8015720 <_printf_float+0x2f8>)
 8015494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015498:	f7f3 fa62 	bl	8008960 <__aeabi_dcmple>
 801549c:	bb30      	cbnz	r0, 80154ec <_printf_float+0xc4>
 801549e:	2200      	movs	r2, #0
 80154a0:	2300      	movs	r3, #0
 80154a2:	4640      	mov	r0, r8
 80154a4:	4649      	mov	r1, r9
 80154a6:	f7f3 fa51 	bl	800894c <__aeabi_dcmplt>
 80154aa:	b110      	cbz	r0, 80154b2 <_printf_float+0x8a>
 80154ac:	232d      	movs	r3, #45	; 0x2d
 80154ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154b2:	4a9c      	ldr	r2, [pc, #624]	; (8015724 <_printf_float+0x2fc>)
 80154b4:	4b9c      	ldr	r3, [pc, #624]	; (8015728 <_printf_float+0x300>)
 80154b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80154ba:	bf8c      	ite	hi
 80154bc:	4690      	movhi	r8, r2
 80154be:	4698      	movls	r8, r3
 80154c0:	2303      	movs	r3, #3
 80154c2:	f02b 0204 	bic.w	r2, fp, #4
 80154c6:	6123      	str	r3, [r4, #16]
 80154c8:	6022      	str	r2, [r4, #0]
 80154ca:	f04f 0900 	mov.w	r9, #0
 80154ce:	9700      	str	r7, [sp, #0]
 80154d0:	4633      	mov	r3, r6
 80154d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80154d4:	4621      	mov	r1, r4
 80154d6:	4628      	mov	r0, r5
 80154d8:	f000 f9e6 	bl	80158a8 <_printf_common>
 80154dc:	3001      	adds	r0, #1
 80154de:	f040 808d 	bne.w	80155fc <_printf_float+0x1d4>
 80154e2:	f04f 30ff 	mov.w	r0, #4294967295
 80154e6:	b00d      	add	sp, #52	; 0x34
 80154e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ec:	4642      	mov	r2, r8
 80154ee:	464b      	mov	r3, r9
 80154f0:	4640      	mov	r0, r8
 80154f2:	4649      	mov	r1, r9
 80154f4:	f7f3 fa52 	bl	800899c <__aeabi_dcmpun>
 80154f8:	b110      	cbz	r0, 8015500 <_printf_float+0xd8>
 80154fa:	4a8c      	ldr	r2, [pc, #560]	; (801572c <_printf_float+0x304>)
 80154fc:	4b8c      	ldr	r3, [pc, #560]	; (8015730 <_printf_float+0x308>)
 80154fe:	e7da      	b.n	80154b6 <_printf_float+0x8e>
 8015500:	6861      	ldr	r1, [r4, #4]
 8015502:	1c4b      	adds	r3, r1, #1
 8015504:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015508:	a80a      	add	r0, sp, #40	; 0x28
 801550a:	d13e      	bne.n	801558a <_printf_float+0x162>
 801550c:	2306      	movs	r3, #6
 801550e:	6063      	str	r3, [r4, #4]
 8015510:	2300      	movs	r3, #0
 8015512:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015516:	ab09      	add	r3, sp, #36	; 0x24
 8015518:	9300      	str	r3, [sp, #0]
 801551a:	ec49 8b10 	vmov	d0, r8, r9
 801551e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015522:	6022      	str	r2, [r4, #0]
 8015524:	f8cd a004 	str.w	sl, [sp, #4]
 8015528:	6861      	ldr	r1, [r4, #4]
 801552a:	4628      	mov	r0, r5
 801552c:	f7ff fee8 	bl	8015300 <__cvt>
 8015530:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015534:	2b47      	cmp	r3, #71	; 0x47
 8015536:	4680      	mov	r8, r0
 8015538:	d109      	bne.n	801554e <_printf_float+0x126>
 801553a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801553c:	1cd8      	adds	r0, r3, #3
 801553e:	db02      	blt.n	8015546 <_printf_float+0x11e>
 8015540:	6862      	ldr	r2, [r4, #4]
 8015542:	4293      	cmp	r3, r2
 8015544:	dd47      	ble.n	80155d6 <_printf_float+0x1ae>
 8015546:	f1aa 0a02 	sub.w	sl, sl, #2
 801554a:	fa5f fa8a 	uxtb.w	sl, sl
 801554e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015552:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015554:	d824      	bhi.n	80155a0 <_printf_float+0x178>
 8015556:	3901      	subs	r1, #1
 8015558:	4652      	mov	r2, sl
 801555a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801555e:	9109      	str	r1, [sp, #36]	; 0x24
 8015560:	f7ff ff2f 	bl	80153c2 <__exponent>
 8015564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015566:	1813      	adds	r3, r2, r0
 8015568:	2a01      	cmp	r2, #1
 801556a:	4681      	mov	r9, r0
 801556c:	6123      	str	r3, [r4, #16]
 801556e:	dc02      	bgt.n	8015576 <_printf_float+0x14e>
 8015570:	6822      	ldr	r2, [r4, #0]
 8015572:	07d1      	lsls	r1, r2, #31
 8015574:	d501      	bpl.n	801557a <_printf_float+0x152>
 8015576:	3301      	adds	r3, #1
 8015578:	6123      	str	r3, [r4, #16]
 801557a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801557e:	2b00      	cmp	r3, #0
 8015580:	d0a5      	beq.n	80154ce <_printf_float+0xa6>
 8015582:	232d      	movs	r3, #45	; 0x2d
 8015584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015588:	e7a1      	b.n	80154ce <_printf_float+0xa6>
 801558a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801558e:	f000 8177 	beq.w	8015880 <_printf_float+0x458>
 8015592:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015596:	d1bb      	bne.n	8015510 <_printf_float+0xe8>
 8015598:	2900      	cmp	r1, #0
 801559a:	d1b9      	bne.n	8015510 <_printf_float+0xe8>
 801559c:	2301      	movs	r3, #1
 801559e:	e7b6      	b.n	801550e <_printf_float+0xe6>
 80155a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80155a4:	d119      	bne.n	80155da <_printf_float+0x1b2>
 80155a6:	2900      	cmp	r1, #0
 80155a8:	6863      	ldr	r3, [r4, #4]
 80155aa:	dd0c      	ble.n	80155c6 <_printf_float+0x19e>
 80155ac:	6121      	str	r1, [r4, #16]
 80155ae:	b913      	cbnz	r3, 80155b6 <_printf_float+0x18e>
 80155b0:	6822      	ldr	r2, [r4, #0]
 80155b2:	07d2      	lsls	r2, r2, #31
 80155b4:	d502      	bpl.n	80155bc <_printf_float+0x194>
 80155b6:	3301      	adds	r3, #1
 80155b8:	440b      	add	r3, r1
 80155ba:	6123      	str	r3, [r4, #16]
 80155bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155be:	65a3      	str	r3, [r4, #88]	; 0x58
 80155c0:	f04f 0900 	mov.w	r9, #0
 80155c4:	e7d9      	b.n	801557a <_printf_float+0x152>
 80155c6:	b913      	cbnz	r3, 80155ce <_printf_float+0x1a6>
 80155c8:	6822      	ldr	r2, [r4, #0]
 80155ca:	07d0      	lsls	r0, r2, #31
 80155cc:	d501      	bpl.n	80155d2 <_printf_float+0x1aa>
 80155ce:	3302      	adds	r3, #2
 80155d0:	e7f3      	b.n	80155ba <_printf_float+0x192>
 80155d2:	2301      	movs	r3, #1
 80155d4:	e7f1      	b.n	80155ba <_printf_float+0x192>
 80155d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80155da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80155de:	4293      	cmp	r3, r2
 80155e0:	db05      	blt.n	80155ee <_printf_float+0x1c6>
 80155e2:	6822      	ldr	r2, [r4, #0]
 80155e4:	6123      	str	r3, [r4, #16]
 80155e6:	07d1      	lsls	r1, r2, #31
 80155e8:	d5e8      	bpl.n	80155bc <_printf_float+0x194>
 80155ea:	3301      	adds	r3, #1
 80155ec:	e7e5      	b.n	80155ba <_printf_float+0x192>
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	bfd4      	ite	le
 80155f2:	f1c3 0302 	rsble	r3, r3, #2
 80155f6:	2301      	movgt	r3, #1
 80155f8:	4413      	add	r3, r2
 80155fa:	e7de      	b.n	80155ba <_printf_float+0x192>
 80155fc:	6823      	ldr	r3, [r4, #0]
 80155fe:	055a      	lsls	r2, r3, #21
 8015600:	d407      	bmi.n	8015612 <_printf_float+0x1ea>
 8015602:	6923      	ldr	r3, [r4, #16]
 8015604:	4642      	mov	r2, r8
 8015606:	4631      	mov	r1, r6
 8015608:	4628      	mov	r0, r5
 801560a:	47b8      	blx	r7
 801560c:	3001      	adds	r0, #1
 801560e:	d12b      	bne.n	8015668 <_printf_float+0x240>
 8015610:	e767      	b.n	80154e2 <_printf_float+0xba>
 8015612:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015616:	f240 80dc 	bls.w	80157d2 <_printf_float+0x3aa>
 801561a:	2200      	movs	r2, #0
 801561c:	2300      	movs	r3, #0
 801561e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015622:	f7f3 f989 	bl	8008938 <__aeabi_dcmpeq>
 8015626:	2800      	cmp	r0, #0
 8015628:	d033      	beq.n	8015692 <_printf_float+0x26a>
 801562a:	2301      	movs	r3, #1
 801562c:	4a41      	ldr	r2, [pc, #260]	; (8015734 <_printf_float+0x30c>)
 801562e:	4631      	mov	r1, r6
 8015630:	4628      	mov	r0, r5
 8015632:	47b8      	blx	r7
 8015634:	3001      	adds	r0, #1
 8015636:	f43f af54 	beq.w	80154e2 <_printf_float+0xba>
 801563a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801563e:	429a      	cmp	r2, r3
 8015640:	db02      	blt.n	8015648 <_printf_float+0x220>
 8015642:	6823      	ldr	r3, [r4, #0]
 8015644:	07d8      	lsls	r0, r3, #31
 8015646:	d50f      	bpl.n	8015668 <_printf_float+0x240>
 8015648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801564c:	4631      	mov	r1, r6
 801564e:	4628      	mov	r0, r5
 8015650:	47b8      	blx	r7
 8015652:	3001      	adds	r0, #1
 8015654:	f43f af45 	beq.w	80154e2 <_printf_float+0xba>
 8015658:	f04f 0800 	mov.w	r8, #0
 801565c:	f104 091a 	add.w	r9, r4, #26
 8015660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015662:	3b01      	subs	r3, #1
 8015664:	4543      	cmp	r3, r8
 8015666:	dc09      	bgt.n	801567c <_printf_float+0x254>
 8015668:	6823      	ldr	r3, [r4, #0]
 801566a:	079b      	lsls	r3, r3, #30
 801566c:	f100 8103 	bmi.w	8015876 <_printf_float+0x44e>
 8015670:	68e0      	ldr	r0, [r4, #12]
 8015672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015674:	4298      	cmp	r0, r3
 8015676:	bfb8      	it	lt
 8015678:	4618      	movlt	r0, r3
 801567a:	e734      	b.n	80154e6 <_printf_float+0xbe>
 801567c:	2301      	movs	r3, #1
 801567e:	464a      	mov	r2, r9
 8015680:	4631      	mov	r1, r6
 8015682:	4628      	mov	r0, r5
 8015684:	47b8      	blx	r7
 8015686:	3001      	adds	r0, #1
 8015688:	f43f af2b 	beq.w	80154e2 <_printf_float+0xba>
 801568c:	f108 0801 	add.w	r8, r8, #1
 8015690:	e7e6      	b.n	8015660 <_printf_float+0x238>
 8015692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015694:	2b00      	cmp	r3, #0
 8015696:	dc2b      	bgt.n	80156f0 <_printf_float+0x2c8>
 8015698:	2301      	movs	r3, #1
 801569a:	4a26      	ldr	r2, [pc, #152]	; (8015734 <_printf_float+0x30c>)
 801569c:	4631      	mov	r1, r6
 801569e:	4628      	mov	r0, r5
 80156a0:	47b8      	blx	r7
 80156a2:	3001      	adds	r0, #1
 80156a4:	f43f af1d 	beq.w	80154e2 <_printf_float+0xba>
 80156a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156aa:	b923      	cbnz	r3, 80156b6 <_printf_float+0x28e>
 80156ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156ae:	b913      	cbnz	r3, 80156b6 <_printf_float+0x28e>
 80156b0:	6823      	ldr	r3, [r4, #0]
 80156b2:	07d9      	lsls	r1, r3, #31
 80156b4:	d5d8      	bpl.n	8015668 <_printf_float+0x240>
 80156b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156ba:	4631      	mov	r1, r6
 80156bc:	4628      	mov	r0, r5
 80156be:	47b8      	blx	r7
 80156c0:	3001      	adds	r0, #1
 80156c2:	f43f af0e 	beq.w	80154e2 <_printf_float+0xba>
 80156c6:	f04f 0900 	mov.w	r9, #0
 80156ca:	f104 0a1a 	add.w	sl, r4, #26
 80156ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156d0:	425b      	negs	r3, r3
 80156d2:	454b      	cmp	r3, r9
 80156d4:	dc01      	bgt.n	80156da <_printf_float+0x2b2>
 80156d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d8:	e794      	b.n	8015604 <_printf_float+0x1dc>
 80156da:	2301      	movs	r3, #1
 80156dc:	4652      	mov	r2, sl
 80156de:	4631      	mov	r1, r6
 80156e0:	4628      	mov	r0, r5
 80156e2:	47b8      	blx	r7
 80156e4:	3001      	adds	r0, #1
 80156e6:	f43f aefc 	beq.w	80154e2 <_printf_float+0xba>
 80156ea:	f109 0901 	add.w	r9, r9, #1
 80156ee:	e7ee      	b.n	80156ce <_printf_float+0x2a6>
 80156f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80156f4:	429a      	cmp	r2, r3
 80156f6:	bfa8      	it	ge
 80156f8:	461a      	movge	r2, r3
 80156fa:	2a00      	cmp	r2, #0
 80156fc:	4691      	mov	r9, r2
 80156fe:	dd07      	ble.n	8015710 <_printf_float+0x2e8>
 8015700:	4613      	mov	r3, r2
 8015702:	4631      	mov	r1, r6
 8015704:	4642      	mov	r2, r8
 8015706:	4628      	mov	r0, r5
 8015708:	47b8      	blx	r7
 801570a:	3001      	adds	r0, #1
 801570c:	f43f aee9 	beq.w	80154e2 <_printf_float+0xba>
 8015710:	f104 031a 	add.w	r3, r4, #26
 8015714:	f04f 0b00 	mov.w	fp, #0
 8015718:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801571c:	9306      	str	r3, [sp, #24]
 801571e:	e015      	b.n	801574c <_printf_float+0x324>
 8015720:	7fefffff 	.word	0x7fefffff
 8015724:	0801a341 	.word	0x0801a341
 8015728:	0801a33d 	.word	0x0801a33d
 801572c:	0801a349 	.word	0x0801a349
 8015730:	0801a345 	.word	0x0801a345
 8015734:	0801a38a 	.word	0x0801a38a
 8015738:	2301      	movs	r3, #1
 801573a:	9a06      	ldr	r2, [sp, #24]
 801573c:	4631      	mov	r1, r6
 801573e:	4628      	mov	r0, r5
 8015740:	47b8      	blx	r7
 8015742:	3001      	adds	r0, #1
 8015744:	f43f aecd 	beq.w	80154e2 <_printf_float+0xba>
 8015748:	f10b 0b01 	add.w	fp, fp, #1
 801574c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015750:	ebaa 0309 	sub.w	r3, sl, r9
 8015754:	455b      	cmp	r3, fp
 8015756:	dcef      	bgt.n	8015738 <_printf_float+0x310>
 8015758:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801575c:	429a      	cmp	r2, r3
 801575e:	44d0      	add	r8, sl
 8015760:	db15      	blt.n	801578e <_printf_float+0x366>
 8015762:	6823      	ldr	r3, [r4, #0]
 8015764:	07da      	lsls	r2, r3, #31
 8015766:	d412      	bmi.n	801578e <_printf_float+0x366>
 8015768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801576a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801576c:	eba3 020a 	sub.w	r2, r3, sl
 8015770:	eba3 0a01 	sub.w	sl, r3, r1
 8015774:	4592      	cmp	sl, r2
 8015776:	bfa8      	it	ge
 8015778:	4692      	movge	sl, r2
 801577a:	f1ba 0f00 	cmp.w	sl, #0
 801577e:	dc0e      	bgt.n	801579e <_printf_float+0x376>
 8015780:	f04f 0800 	mov.w	r8, #0
 8015784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015788:	f104 091a 	add.w	r9, r4, #26
 801578c:	e019      	b.n	80157c2 <_printf_float+0x39a>
 801578e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015792:	4631      	mov	r1, r6
 8015794:	4628      	mov	r0, r5
 8015796:	47b8      	blx	r7
 8015798:	3001      	adds	r0, #1
 801579a:	d1e5      	bne.n	8015768 <_printf_float+0x340>
 801579c:	e6a1      	b.n	80154e2 <_printf_float+0xba>
 801579e:	4653      	mov	r3, sl
 80157a0:	4642      	mov	r2, r8
 80157a2:	4631      	mov	r1, r6
 80157a4:	4628      	mov	r0, r5
 80157a6:	47b8      	blx	r7
 80157a8:	3001      	adds	r0, #1
 80157aa:	d1e9      	bne.n	8015780 <_printf_float+0x358>
 80157ac:	e699      	b.n	80154e2 <_printf_float+0xba>
 80157ae:	2301      	movs	r3, #1
 80157b0:	464a      	mov	r2, r9
 80157b2:	4631      	mov	r1, r6
 80157b4:	4628      	mov	r0, r5
 80157b6:	47b8      	blx	r7
 80157b8:	3001      	adds	r0, #1
 80157ba:	f43f ae92 	beq.w	80154e2 <_printf_float+0xba>
 80157be:	f108 0801 	add.w	r8, r8, #1
 80157c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80157c6:	1a9b      	subs	r3, r3, r2
 80157c8:	eba3 030a 	sub.w	r3, r3, sl
 80157cc:	4543      	cmp	r3, r8
 80157ce:	dcee      	bgt.n	80157ae <_printf_float+0x386>
 80157d0:	e74a      	b.n	8015668 <_printf_float+0x240>
 80157d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157d4:	2a01      	cmp	r2, #1
 80157d6:	dc01      	bgt.n	80157dc <_printf_float+0x3b4>
 80157d8:	07db      	lsls	r3, r3, #31
 80157da:	d53a      	bpl.n	8015852 <_printf_float+0x42a>
 80157dc:	2301      	movs	r3, #1
 80157de:	4642      	mov	r2, r8
 80157e0:	4631      	mov	r1, r6
 80157e2:	4628      	mov	r0, r5
 80157e4:	47b8      	blx	r7
 80157e6:	3001      	adds	r0, #1
 80157e8:	f43f ae7b 	beq.w	80154e2 <_printf_float+0xba>
 80157ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80157f0:	4631      	mov	r1, r6
 80157f2:	4628      	mov	r0, r5
 80157f4:	47b8      	blx	r7
 80157f6:	3001      	adds	r0, #1
 80157f8:	f108 0801 	add.w	r8, r8, #1
 80157fc:	f43f ae71 	beq.w	80154e2 <_printf_float+0xba>
 8015800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015802:	2200      	movs	r2, #0
 8015804:	f103 3aff 	add.w	sl, r3, #4294967295
 8015808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801580c:	2300      	movs	r3, #0
 801580e:	f7f3 f893 	bl	8008938 <__aeabi_dcmpeq>
 8015812:	b9c8      	cbnz	r0, 8015848 <_printf_float+0x420>
 8015814:	4653      	mov	r3, sl
 8015816:	4642      	mov	r2, r8
 8015818:	4631      	mov	r1, r6
 801581a:	4628      	mov	r0, r5
 801581c:	47b8      	blx	r7
 801581e:	3001      	adds	r0, #1
 8015820:	d10e      	bne.n	8015840 <_printf_float+0x418>
 8015822:	e65e      	b.n	80154e2 <_printf_float+0xba>
 8015824:	2301      	movs	r3, #1
 8015826:	4652      	mov	r2, sl
 8015828:	4631      	mov	r1, r6
 801582a:	4628      	mov	r0, r5
 801582c:	47b8      	blx	r7
 801582e:	3001      	adds	r0, #1
 8015830:	f43f ae57 	beq.w	80154e2 <_printf_float+0xba>
 8015834:	f108 0801 	add.w	r8, r8, #1
 8015838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801583a:	3b01      	subs	r3, #1
 801583c:	4543      	cmp	r3, r8
 801583e:	dcf1      	bgt.n	8015824 <_printf_float+0x3fc>
 8015840:	464b      	mov	r3, r9
 8015842:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015846:	e6de      	b.n	8015606 <_printf_float+0x1de>
 8015848:	f04f 0800 	mov.w	r8, #0
 801584c:	f104 0a1a 	add.w	sl, r4, #26
 8015850:	e7f2      	b.n	8015838 <_printf_float+0x410>
 8015852:	2301      	movs	r3, #1
 8015854:	e7df      	b.n	8015816 <_printf_float+0x3ee>
 8015856:	2301      	movs	r3, #1
 8015858:	464a      	mov	r2, r9
 801585a:	4631      	mov	r1, r6
 801585c:	4628      	mov	r0, r5
 801585e:	47b8      	blx	r7
 8015860:	3001      	adds	r0, #1
 8015862:	f43f ae3e 	beq.w	80154e2 <_printf_float+0xba>
 8015866:	f108 0801 	add.w	r8, r8, #1
 801586a:	68e3      	ldr	r3, [r4, #12]
 801586c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801586e:	1a9b      	subs	r3, r3, r2
 8015870:	4543      	cmp	r3, r8
 8015872:	dcf0      	bgt.n	8015856 <_printf_float+0x42e>
 8015874:	e6fc      	b.n	8015670 <_printf_float+0x248>
 8015876:	f04f 0800 	mov.w	r8, #0
 801587a:	f104 0919 	add.w	r9, r4, #25
 801587e:	e7f4      	b.n	801586a <_printf_float+0x442>
 8015880:	2900      	cmp	r1, #0
 8015882:	f43f ae8b 	beq.w	801559c <_printf_float+0x174>
 8015886:	2300      	movs	r3, #0
 8015888:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801588c:	ab09      	add	r3, sp, #36	; 0x24
 801588e:	9300      	str	r3, [sp, #0]
 8015890:	ec49 8b10 	vmov	d0, r8, r9
 8015894:	6022      	str	r2, [r4, #0]
 8015896:	f8cd a004 	str.w	sl, [sp, #4]
 801589a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801589e:	4628      	mov	r0, r5
 80158a0:	f7ff fd2e 	bl	8015300 <__cvt>
 80158a4:	4680      	mov	r8, r0
 80158a6:	e648      	b.n	801553a <_printf_float+0x112>

080158a8 <_printf_common>:
 80158a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158ac:	4691      	mov	r9, r2
 80158ae:	461f      	mov	r7, r3
 80158b0:	688a      	ldr	r2, [r1, #8]
 80158b2:	690b      	ldr	r3, [r1, #16]
 80158b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80158b8:	4293      	cmp	r3, r2
 80158ba:	bfb8      	it	lt
 80158bc:	4613      	movlt	r3, r2
 80158be:	f8c9 3000 	str.w	r3, [r9]
 80158c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80158c6:	4606      	mov	r6, r0
 80158c8:	460c      	mov	r4, r1
 80158ca:	b112      	cbz	r2, 80158d2 <_printf_common+0x2a>
 80158cc:	3301      	adds	r3, #1
 80158ce:	f8c9 3000 	str.w	r3, [r9]
 80158d2:	6823      	ldr	r3, [r4, #0]
 80158d4:	0699      	lsls	r1, r3, #26
 80158d6:	bf42      	ittt	mi
 80158d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80158dc:	3302      	addmi	r3, #2
 80158de:	f8c9 3000 	strmi.w	r3, [r9]
 80158e2:	6825      	ldr	r5, [r4, #0]
 80158e4:	f015 0506 	ands.w	r5, r5, #6
 80158e8:	d107      	bne.n	80158fa <_printf_common+0x52>
 80158ea:	f104 0a19 	add.w	sl, r4, #25
 80158ee:	68e3      	ldr	r3, [r4, #12]
 80158f0:	f8d9 2000 	ldr.w	r2, [r9]
 80158f4:	1a9b      	subs	r3, r3, r2
 80158f6:	42ab      	cmp	r3, r5
 80158f8:	dc28      	bgt.n	801594c <_printf_common+0xa4>
 80158fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80158fe:	6822      	ldr	r2, [r4, #0]
 8015900:	3300      	adds	r3, #0
 8015902:	bf18      	it	ne
 8015904:	2301      	movne	r3, #1
 8015906:	0692      	lsls	r2, r2, #26
 8015908:	d42d      	bmi.n	8015966 <_printf_common+0xbe>
 801590a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801590e:	4639      	mov	r1, r7
 8015910:	4630      	mov	r0, r6
 8015912:	47c0      	blx	r8
 8015914:	3001      	adds	r0, #1
 8015916:	d020      	beq.n	801595a <_printf_common+0xb2>
 8015918:	6823      	ldr	r3, [r4, #0]
 801591a:	68e5      	ldr	r5, [r4, #12]
 801591c:	f8d9 2000 	ldr.w	r2, [r9]
 8015920:	f003 0306 	and.w	r3, r3, #6
 8015924:	2b04      	cmp	r3, #4
 8015926:	bf08      	it	eq
 8015928:	1aad      	subeq	r5, r5, r2
 801592a:	68a3      	ldr	r3, [r4, #8]
 801592c:	6922      	ldr	r2, [r4, #16]
 801592e:	bf0c      	ite	eq
 8015930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015934:	2500      	movne	r5, #0
 8015936:	4293      	cmp	r3, r2
 8015938:	bfc4      	itt	gt
 801593a:	1a9b      	subgt	r3, r3, r2
 801593c:	18ed      	addgt	r5, r5, r3
 801593e:	f04f 0900 	mov.w	r9, #0
 8015942:	341a      	adds	r4, #26
 8015944:	454d      	cmp	r5, r9
 8015946:	d11a      	bne.n	801597e <_printf_common+0xd6>
 8015948:	2000      	movs	r0, #0
 801594a:	e008      	b.n	801595e <_printf_common+0xb6>
 801594c:	2301      	movs	r3, #1
 801594e:	4652      	mov	r2, sl
 8015950:	4639      	mov	r1, r7
 8015952:	4630      	mov	r0, r6
 8015954:	47c0      	blx	r8
 8015956:	3001      	adds	r0, #1
 8015958:	d103      	bne.n	8015962 <_printf_common+0xba>
 801595a:	f04f 30ff 	mov.w	r0, #4294967295
 801595e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015962:	3501      	adds	r5, #1
 8015964:	e7c3      	b.n	80158ee <_printf_common+0x46>
 8015966:	18e1      	adds	r1, r4, r3
 8015968:	1c5a      	adds	r2, r3, #1
 801596a:	2030      	movs	r0, #48	; 0x30
 801596c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015970:	4422      	add	r2, r4
 8015972:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015976:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801597a:	3302      	adds	r3, #2
 801597c:	e7c5      	b.n	801590a <_printf_common+0x62>
 801597e:	2301      	movs	r3, #1
 8015980:	4622      	mov	r2, r4
 8015982:	4639      	mov	r1, r7
 8015984:	4630      	mov	r0, r6
 8015986:	47c0      	blx	r8
 8015988:	3001      	adds	r0, #1
 801598a:	d0e6      	beq.n	801595a <_printf_common+0xb2>
 801598c:	f109 0901 	add.w	r9, r9, #1
 8015990:	e7d8      	b.n	8015944 <_printf_common+0x9c>
	...

08015994 <_printf_i>:
 8015994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015998:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801599c:	460c      	mov	r4, r1
 801599e:	7e09      	ldrb	r1, [r1, #24]
 80159a0:	b085      	sub	sp, #20
 80159a2:	296e      	cmp	r1, #110	; 0x6e
 80159a4:	4617      	mov	r7, r2
 80159a6:	4606      	mov	r6, r0
 80159a8:	4698      	mov	r8, r3
 80159aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159ac:	f000 80b3 	beq.w	8015b16 <_printf_i+0x182>
 80159b0:	d822      	bhi.n	80159f8 <_printf_i+0x64>
 80159b2:	2963      	cmp	r1, #99	; 0x63
 80159b4:	d036      	beq.n	8015a24 <_printf_i+0x90>
 80159b6:	d80a      	bhi.n	80159ce <_printf_i+0x3a>
 80159b8:	2900      	cmp	r1, #0
 80159ba:	f000 80b9 	beq.w	8015b30 <_printf_i+0x19c>
 80159be:	2958      	cmp	r1, #88	; 0x58
 80159c0:	f000 8083 	beq.w	8015aca <_printf_i+0x136>
 80159c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80159c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80159cc:	e032      	b.n	8015a34 <_printf_i+0xa0>
 80159ce:	2964      	cmp	r1, #100	; 0x64
 80159d0:	d001      	beq.n	80159d6 <_printf_i+0x42>
 80159d2:	2969      	cmp	r1, #105	; 0x69
 80159d4:	d1f6      	bne.n	80159c4 <_printf_i+0x30>
 80159d6:	6820      	ldr	r0, [r4, #0]
 80159d8:	6813      	ldr	r3, [r2, #0]
 80159da:	0605      	lsls	r5, r0, #24
 80159dc:	f103 0104 	add.w	r1, r3, #4
 80159e0:	d52a      	bpl.n	8015a38 <_printf_i+0xa4>
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	6011      	str	r1, [r2, #0]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	da03      	bge.n	80159f2 <_printf_i+0x5e>
 80159ea:	222d      	movs	r2, #45	; 0x2d
 80159ec:	425b      	negs	r3, r3
 80159ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80159f2:	486f      	ldr	r0, [pc, #444]	; (8015bb0 <_printf_i+0x21c>)
 80159f4:	220a      	movs	r2, #10
 80159f6:	e039      	b.n	8015a6c <_printf_i+0xd8>
 80159f8:	2973      	cmp	r1, #115	; 0x73
 80159fa:	f000 809d 	beq.w	8015b38 <_printf_i+0x1a4>
 80159fe:	d808      	bhi.n	8015a12 <_printf_i+0x7e>
 8015a00:	296f      	cmp	r1, #111	; 0x6f
 8015a02:	d020      	beq.n	8015a46 <_printf_i+0xb2>
 8015a04:	2970      	cmp	r1, #112	; 0x70
 8015a06:	d1dd      	bne.n	80159c4 <_printf_i+0x30>
 8015a08:	6823      	ldr	r3, [r4, #0]
 8015a0a:	f043 0320 	orr.w	r3, r3, #32
 8015a0e:	6023      	str	r3, [r4, #0]
 8015a10:	e003      	b.n	8015a1a <_printf_i+0x86>
 8015a12:	2975      	cmp	r1, #117	; 0x75
 8015a14:	d017      	beq.n	8015a46 <_printf_i+0xb2>
 8015a16:	2978      	cmp	r1, #120	; 0x78
 8015a18:	d1d4      	bne.n	80159c4 <_printf_i+0x30>
 8015a1a:	2378      	movs	r3, #120	; 0x78
 8015a1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015a20:	4864      	ldr	r0, [pc, #400]	; (8015bb4 <_printf_i+0x220>)
 8015a22:	e055      	b.n	8015ad0 <_printf_i+0x13c>
 8015a24:	6813      	ldr	r3, [r2, #0]
 8015a26:	1d19      	adds	r1, r3, #4
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	6011      	str	r1, [r2, #0]
 8015a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a34:	2301      	movs	r3, #1
 8015a36:	e08c      	b.n	8015b52 <_printf_i+0x1be>
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	6011      	str	r1, [r2, #0]
 8015a3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015a40:	bf18      	it	ne
 8015a42:	b21b      	sxthne	r3, r3
 8015a44:	e7cf      	b.n	80159e6 <_printf_i+0x52>
 8015a46:	6813      	ldr	r3, [r2, #0]
 8015a48:	6825      	ldr	r5, [r4, #0]
 8015a4a:	1d18      	adds	r0, r3, #4
 8015a4c:	6010      	str	r0, [r2, #0]
 8015a4e:	0628      	lsls	r0, r5, #24
 8015a50:	d501      	bpl.n	8015a56 <_printf_i+0xc2>
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	e002      	b.n	8015a5c <_printf_i+0xc8>
 8015a56:	0668      	lsls	r0, r5, #25
 8015a58:	d5fb      	bpl.n	8015a52 <_printf_i+0xbe>
 8015a5a:	881b      	ldrh	r3, [r3, #0]
 8015a5c:	4854      	ldr	r0, [pc, #336]	; (8015bb0 <_printf_i+0x21c>)
 8015a5e:	296f      	cmp	r1, #111	; 0x6f
 8015a60:	bf14      	ite	ne
 8015a62:	220a      	movne	r2, #10
 8015a64:	2208      	moveq	r2, #8
 8015a66:	2100      	movs	r1, #0
 8015a68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015a6c:	6865      	ldr	r5, [r4, #4]
 8015a6e:	60a5      	str	r5, [r4, #8]
 8015a70:	2d00      	cmp	r5, #0
 8015a72:	f2c0 8095 	blt.w	8015ba0 <_printf_i+0x20c>
 8015a76:	6821      	ldr	r1, [r4, #0]
 8015a78:	f021 0104 	bic.w	r1, r1, #4
 8015a7c:	6021      	str	r1, [r4, #0]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d13d      	bne.n	8015afe <_printf_i+0x16a>
 8015a82:	2d00      	cmp	r5, #0
 8015a84:	f040 808e 	bne.w	8015ba4 <_printf_i+0x210>
 8015a88:	4665      	mov	r5, ip
 8015a8a:	2a08      	cmp	r2, #8
 8015a8c:	d10b      	bne.n	8015aa6 <_printf_i+0x112>
 8015a8e:	6823      	ldr	r3, [r4, #0]
 8015a90:	07db      	lsls	r3, r3, #31
 8015a92:	d508      	bpl.n	8015aa6 <_printf_i+0x112>
 8015a94:	6923      	ldr	r3, [r4, #16]
 8015a96:	6862      	ldr	r2, [r4, #4]
 8015a98:	429a      	cmp	r2, r3
 8015a9a:	bfde      	ittt	le
 8015a9c:	2330      	movle	r3, #48	; 0x30
 8015a9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015aa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015aa6:	ebac 0305 	sub.w	r3, ip, r5
 8015aaa:	6123      	str	r3, [r4, #16]
 8015aac:	f8cd 8000 	str.w	r8, [sp]
 8015ab0:	463b      	mov	r3, r7
 8015ab2:	aa03      	add	r2, sp, #12
 8015ab4:	4621      	mov	r1, r4
 8015ab6:	4630      	mov	r0, r6
 8015ab8:	f7ff fef6 	bl	80158a8 <_printf_common>
 8015abc:	3001      	adds	r0, #1
 8015abe:	d14d      	bne.n	8015b5c <_printf_i+0x1c8>
 8015ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8015ac4:	b005      	add	sp, #20
 8015ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015aca:	4839      	ldr	r0, [pc, #228]	; (8015bb0 <_printf_i+0x21c>)
 8015acc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015ad0:	6813      	ldr	r3, [r2, #0]
 8015ad2:	6821      	ldr	r1, [r4, #0]
 8015ad4:	1d1d      	adds	r5, r3, #4
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	6015      	str	r5, [r2, #0]
 8015ada:	060a      	lsls	r2, r1, #24
 8015adc:	d50b      	bpl.n	8015af6 <_printf_i+0x162>
 8015ade:	07ca      	lsls	r2, r1, #31
 8015ae0:	bf44      	itt	mi
 8015ae2:	f041 0120 	orrmi.w	r1, r1, #32
 8015ae6:	6021      	strmi	r1, [r4, #0]
 8015ae8:	b91b      	cbnz	r3, 8015af2 <_printf_i+0x15e>
 8015aea:	6822      	ldr	r2, [r4, #0]
 8015aec:	f022 0220 	bic.w	r2, r2, #32
 8015af0:	6022      	str	r2, [r4, #0]
 8015af2:	2210      	movs	r2, #16
 8015af4:	e7b7      	b.n	8015a66 <_printf_i+0xd2>
 8015af6:	064d      	lsls	r5, r1, #25
 8015af8:	bf48      	it	mi
 8015afa:	b29b      	uxthmi	r3, r3
 8015afc:	e7ef      	b.n	8015ade <_printf_i+0x14a>
 8015afe:	4665      	mov	r5, ip
 8015b00:	fbb3 f1f2 	udiv	r1, r3, r2
 8015b04:	fb02 3311 	mls	r3, r2, r1, r3
 8015b08:	5cc3      	ldrb	r3, [r0, r3]
 8015b0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015b0e:	460b      	mov	r3, r1
 8015b10:	2900      	cmp	r1, #0
 8015b12:	d1f5      	bne.n	8015b00 <_printf_i+0x16c>
 8015b14:	e7b9      	b.n	8015a8a <_printf_i+0xf6>
 8015b16:	6813      	ldr	r3, [r2, #0]
 8015b18:	6825      	ldr	r5, [r4, #0]
 8015b1a:	6961      	ldr	r1, [r4, #20]
 8015b1c:	1d18      	adds	r0, r3, #4
 8015b1e:	6010      	str	r0, [r2, #0]
 8015b20:	0628      	lsls	r0, r5, #24
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	d501      	bpl.n	8015b2a <_printf_i+0x196>
 8015b26:	6019      	str	r1, [r3, #0]
 8015b28:	e002      	b.n	8015b30 <_printf_i+0x19c>
 8015b2a:	066a      	lsls	r2, r5, #25
 8015b2c:	d5fb      	bpl.n	8015b26 <_printf_i+0x192>
 8015b2e:	8019      	strh	r1, [r3, #0]
 8015b30:	2300      	movs	r3, #0
 8015b32:	6123      	str	r3, [r4, #16]
 8015b34:	4665      	mov	r5, ip
 8015b36:	e7b9      	b.n	8015aac <_printf_i+0x118>
 8015b38:	6813      	ldr	r3, [r2, #0]
 8015b3a:	1d19      	adds	r1, r3, #4
 8015b3c:	6011      	str	r1, [r2, #0]
 8015b3e:	681d      	ldr	r5, [r3, #0]
 8015b40:	6862      	ldr	r2, [r4, #4]
 8015b42:	2100      	movs	r1, #0
 8015b44:	4628      	mov	r0, r5
 8015b46:	f7f2 fa83 	bl	8008050 <memchr>
 8015b4a:	b108      	cbz	r0, 8015b50 <_printf_i+0x1bc>
 8015b4c:	1b40      	subs	r0, r0, r5
 8015b4e:	6060      	str	r0, [r4, #4]
 8015b50:	6863      	ldr	r3, [r4, #4]
 8015b52:	6123      	str	r3, [r4, #16]
 8015b54:	2300      	movs	r3, #0
 8015b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b5a:	e7a7      	b.n	8015aac <_printf_i+0x118>
 8015b5c:	6923      	ldr	r3, [r4, #16]
 8015b5e:	462a      	mov	r2, r5
 8015b60:	4639      	mov	r1, r7
 8015b62:	4630      	mov	r0, r6
 8015b64:	47c0      	blx	r8
 8015b66:	3001      	adds	r0, #1
 8015b68:	d0aa      	beq.n	8015ac0 <_printf_i+0x12c>
 8015b6a:	6823      	ldr	r3, [r4, #0]
 8015b6c:	079b      	lsls	r3, r3, #30
 8015b6e:	d413      	bmi.n	8015b98 <_printf_i+0x204>
 8015b70:	68e0      	ldr	r0, [r4, #12]
 8015b72:	9b03      	ldr	r3, [sp, #12]
 8015b74:	4298      	cmp	r0, r3
 8015b76:	bfb8      	it	lt
 8015b78:	4618      	movlt	r0, r3
 8015b7a:	e7a3      	b.n	8015ac4 <_printf_i+0x130>
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	464a      	mov	r2, r9
 8015b80:	4639      	mov	r1, r7
 8015b82:	4630      	mov	r0, r6
 8015b84:	47c0      	blx	r8
 8015b86:	3001      	adds	r0, #1
 8015b88:	d09a      	beq.n	8015ac0 <_printf_i+0x12c>
 8015b8a:	3501      	adds	r5, #1
 8015b8c:	68e3      	ldr	r3, [r4, #12]
 8015b8e:	9a03      	ldr	r2, [sp, #12]
 8015b90:	1a9b      	subs	r3, r3, r2
 8015b92:	42ab      	cmp	r3, r5
 8015b94:	dcf2      	bgt.n	8015b7c <_printf_i+0x1e8>
 8015b96:	e7eb      	b.n	8015b70 <_printf_i+0x1dc>
 8015b98:	2500      	movs	r5, #0
 8015b9a:	f104 0919 	add.w	r9, r4, #25
 8015b9e:	e7f5      	b.n	8015b8c <_printf_i+0x1f8>
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d1ac      	bne.n	8015afe <_printf_i+0x16a>
 8015ba4:	7803      	ldrb	r3, [r0, #0]
 8015ba6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015baa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015bae:	e76c      	b.n	8015a8a <_printf_i+0xf6>
 8015bb0:	0801a34d 	.word	0x0801a34d
 8015bb4:	0801a35e 	.word	0x0801a35e

08015bb8 <__svfiscanf_r>:
 8015bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bbc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8015bc0:	460c      	mov	r4, r1
 8015bc2:	2100      	movs	r1, #0
 8015bc4:	9144      	str	r1, [sp, #272]	; 0x110
 8015bc6:	9145      	str	r1, [sp, #276]	; 0x114
 8015bc8:	499f      	ldr	r1, [pc, #636]	; (8015e48 <__svfiscanf_r+0x290>)
 8015bca:	91a0      	str	r1, [sp, #640]	; 0x280
 8015bcc:	f10d 0804 	add.w	r8, sp, #4
 8015bd0:	499e      	ldr	r1, [pc, #632]	; (8015e4c <__svfiscanf_r+0x294>)
 8015bd2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8015e50 <__svfiscanf_r+0x298>
 8015bd6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015bda:	4606      	mov	r6, r0
 8015bdc:	4692      	mov	sl, r2
 8015bde:	91a1      	str	r1, [sp, #644]	; 0x284
 8015be0:	9300      	str	r3, [sp, #0]
 8015be2:	270a      	movs	r7, #10
 8015be4:	f89a 3000 	ldrb.w	r3, [sl]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	f000 812a 	beq.w	8015e42 <__svfiscanf_r+0x28a>
 8015bee:	4655      	mov	r5, sl
 8015bf0:	f003 faea 	bl	80191c8 <__locale_ctype_ptr>
 8015bf4:	f815 bb01 	ldrb.w	fp, [r5], #1
 8015bf8:	4458      	add	r0, fp
 8015bfa:	7843      	ldrb	r3, [r0, #1]
 8015bfc:	f013 0308 	ands.w	r3, r3, #8
 8015c00:	d01c      	beq.n	8015c3c <__svfiscanf_r+0x84>
 8015c02:	6863      	ldr	r3, [r4, #4]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	dd12      	ble.n	8015c2e <__svfiscanf_r+0x76>
 8015c08:	f003 fade 	bl	80191c8 <__locale_ctype_ptr>
 8015c0c:	6823      	ldr	r3, [r4, #0]
 8015c0e:	781a      	ldrb	r2, [r3, #0]
 8015c10:	4410      	add	r0, r2
 8015c12:	7842      	ldrb	r2, [r0, #1]
 8015c14:	0712      	lsls	r2, r2, #28
 8015c16:	d401      	bmi.n	8015c1c <__svfiscanf_r+0x64>
 8015c18:	46aa      	mov	sl, r5
 8015c1a:	e7e3      	b.n	8015be4 <__svfiscanf_r+0x2c>
 8015c1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015c1e:	3201      	adds	r2, #1
 8015c20:	9245      	str	r2, [sp, #276]	; 0x114
 8015c22:	6862      	ldr	r2, [r4, #4]
 8015c24:	3301      	adds	r3, #1
 8015c26:	3a01      	subs	r2, #1
 8015c28:	6062      	str	r2, [r4, #4]
 8015c2a:	6023      	str	r3, [r4, #0]
 8015c2c:	e7e9      	b.n	8015c02 <__svfiscanf_r+0x4a>
 8015c2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015c30:	4621      	mov	r1, r4
 8015c32:	4630      	mov	r0, r6
 8015c34:	4798      	blx	r3
 8015c36:	2800      	cmp	r0, #0
 8015c38:	d0e6      	beq.n	8015c08 <__svfiscanf_r+0x50>
 8015c3a:	e7ed      	b.n	8015c18 <__svfiscanf_r+0x60>
 8015c3c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8015c40:	f040 8082 	bne.w	8015d48 <__svfiscanf_r+0x190>
 8015c44:	9343      	str	r3, [sp, #268]	; 0x10c
 8015c46:	9341      	str	r3, [sp, #260]	; 0x104
 8015c48:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8015c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8015c4e:	d103      	bne.n	8015c58 <__svfiscanf_r+0xa0>
 8015c50:	2310      	movs	r3, #16
 8015c52:	9341      	str	r3, [sp, #260]	; 0x104
 8015c54:	f10a 0502 	add.w	r5, sl, #2
 8015c58:	46aa      	mov	sl, r5
 8015c5a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8015c5e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015c62:	2a09      	cmp	r2, #9
 8015c64:	d922      	bls.n	8015cac <__svfiscanf_r+0xf4>
 8015c66:	2203      	movs	r2, #3
 8015c68:	4879      	ldr	r0, [pc, #484]	; (8015e50 <__svfiscanf_r+0x298>)
 8015c6a:	f7f2 f9f1 	bl	8008050 <memchr>
 8015c6e:	b138      	cbz	r0, 8015c80 <__svfiscanf_r+0xc8>
 8015c70:	eba0 0309 	sub.w	r3, r0, r9
 8015c74:	2001      	movs	r0, #1
 8015c76:	4098      	lsls	r0, r3
 8015c78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015c7a:	4318      	orrs	r0, r3
 8015c7c:	9041      	str	r0, [sp, #260]	; 0x104
 8015c7e:	46aa      	mov	sl, r5
 8015c80:	f89a 3000 	ldrb.w	r3, [sl]
 8015c84:	2b67      	cmp	r3, #103	; 0x67
 8015c86:	f10a 0501 	add.w	r5, sl, #1
 8015c8a:	d82b      	bhi.n	8015ce4 <__svfiscanf_r+0x12c>
 8015c8c:	2b65      	cmp	r3, #101	; 0x65
 8015c8e:	f080 809f 	bcs.w	8015dd0 <__svfiscanf_r+0x218>
 8015c92:	2b47      	cmp	r3, #71	; 0x47
 8015c94:	d810      	bhi.n	8015cb8 <__svfiscanf_r+0x100>
 8015c96:	2b45      	cmp	r3, #69	; 0x45
 8015c98:	f080 809a 	bcs.w	8015dd0 <__svfiscanf_r+0x218>
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d06c      	beq.n	8015d7a <__svfiscanf_r+0x1c2>
 8015ca0:	2b25      	cmp	r3, #37	; 0x25
 8015ca2:	d051      	beq.n	8015d48 <__svfiscanf_r+0x190>
 8015ca4:	2303      	movs	r3, #3
 8015ca6:	9347      	str	r3, [sp, #284]	; 0x11c
 8015ca8:	9742      	str	r7, [sp, #264]	; 0x108
 8015caa:	e027      	b.n	8015cfc <__svfiscanf_r+0x144>
 8015cac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015cae:	fb07 1303 	mla	r3, r7, r3, r1
 8015cb2:	3b30      	subs	r3, #48	; 0x30
 8015cb4:	9343      	str	r3, [sp, #268]	; 0x10c
 8015cb6:	e7cf      	b.n	8015c58 <__svfiscanf_r+0xa0>
 8015cb8:	2b5b      	cmp	r3, #91	; 0x5b
 8015cba:	d06a      	beq.n	8015d92 <__svfiscanf_r+0x1da>
 8015cbc:	d80c      	bhi.n	8015cd8 <__svfiscanf_r+0x120>
 8015cbe:	2b58      	cmp	r3, #88	; 0x58
 8015cc0:	d1f0      	bne.n	8015ca4 <__svfiscanf_r+0xec>
 8015cc2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015cc8:	9241      	str	r2, [sp, #260]	; 0x104
 8015cca:	2210      	movs	r2, #16
 8015ccc:	9242      	str	r2, [sp, #264]	; 0x108
 8015cce:	2b6e      	cmp	r3, #110	; 0x6e
 8015cd0:	bf8c      	ite	hi
 8015cd2:	2304      	movhi	r3, #4
 8015cd4:	2303      	movls	r3, #3
 8015cd6:	e010      	b.n	8015cfa <__svfiscanf_r+0x142>
 8015cd8:	2b63      	cmp	r3, #99	; 0x63
 8015cda:	d065      	beq.n	8015da8 <__svfiscanf_r+0x1f0>
 8015cdc:	2b64      	cmp	r3, #100	; 0x64
 8015cde:	d1e1      	bne.n	8015ca4 <__svfiscanf_r+0xec>
 8015ce0:	9742      	str	r7, [sp, #264]	; 0x108
 8015ce2:	e7f4      	b.n	8015cce <__svfiscanf_r+0x116>
 8015ce4:	2b70      	cmp	r3, #112	; 0x70
 8015ce6:	d04b      	beq.n	8015d80 <__svfiscanf_r+0x1c8>
 8015ce8:	d826      	bhi.n	8015d38 <__svfiscanf_r+0x180>
 8015cea:	2b6e      	cmp	r3, #110	; 0x6e
 8015cec:	d062      	beq.n	8015db4 <__svfiscanf_r+0x1fc>
 8015cee:	d84c      	bhi.n	8015d8a <__svfiscanf_r+0x1d2>
 8015cf0:	2b69      	cmp	r3, #105	; 0x69
 8015cf2:	d1d7      	bne.n	8015ca4 <__svfiscanf_r+0xec>
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	9342      	str	r3, [sp, #264]	; 0x108
 8015cf8:	2303      	movs	r3, #3
 8015cfa:	9347      	str	r3, [sp, #284]	; 0x11c
 8015cfc:	6863      	ldr	r3, [r4, #4]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	dd68      	ble.n	8015dd4 <__svfiscanf_r+0x21c>
 8015d02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015d04:	0659      	lsls	r1, r3, #25
 8015d06:	d407      	bmi.n	8015d18 <__svfiscanf_r+0x160>
 8015d08:	f003 fa5e 	bl	80191c8 <__locale_ctype_ptr>
 8015d0c:	6823      	ldr	r3, [r4, #0]
 8015d0e:	781a      	ldrb	r2, [r3, #0]
 8015d10:	4410      	add	r0, r2
 8015d12:	7842      	ldrb	r2, [r0, #1]
 8015d14:	0712      	lsls	r2, r2, #28
 8015d16:	d464      	bmi.n	8015de2 <__svfiscanf_r+0x22a>
 8015d18:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015d1a:	2b02      	cmp	r3, #2
 8015d1c:	dc73      	bgt.n	8015e06 <__svfiscanf_r+0x24e>
 8015d1e:	466b      	mov	r3, sp
 8015d20:	4622      	mov	r2, r4
 8015d22:	a941      	add	r1, sp, #260	; 0x104
 8015d24:	4630      	mov	r0, r6
 8015d26:	f000 faa1 	bl	801626c <_scanf_chars>
 8015d2a:	2801      	cmp	r0, #1
 8015d2c:	f000 8089 	beq.w	8015e42 <__svfiscanf_r+0x28a>
 8015d30:	2802      	cmp	r0, #2
 8015d32:	f47f af71 	bne.w	8015c18 <__svfiscanf_r+0x60>
 8015d36:	e01d      	b.n	8015d74 <__svfiscanf_r+0x1bc>
 8015d38:	2b75      	cmp	r3, #117	; 0x75
 8015d3a:	d0d1      	beq.n	8015ce0 <__svfiscanf_r+0x128>
 8015d3c:	2b78      	cmp	r3, #120	; 0x78
 8015d3e:	d0c0      	beq.n	8015cc2 <__svfiscanf_r+0x10a>
 8015d40:	2b73      	cmp	r3, #115	; 0x73
 8015d42:	d1af      	bne.n	8015ca4 <__svfiscanf_r+0xec>
 8015d44:	2302      	movs	r3, #2
 8015d46:	e7d8      	b.n	8015cfa <__svfiscanf_r+0x142>
 8015d48:	6863      	ldr	r3, [r4, #4]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	dd0c      	ble.n	8015d68 <__svfiscanf_r+0x1b0>
 8015d4e:	6823      	ldr	r3, [r4, #0]
 8015d50:	781a      	ldrb	r2, [r3, #0]
 8015d52:	455a      	cmp	r2, fp
 8015d54:	d175      	bne.n	8015e42 <__svfiscanf_r+0x28a>
 8015d56:	3301      	adds	r3, #1
 8015d58:	6862      	ldr	r2, [r4, #4]
 8015d5a:	6023      	str	r3, [r4, #0]
 8015d5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015d5e:	3a01      	subs	r2, #1
 8015d60:	3301      	adds	r3, #1
 8015d62:	6062      	str	r2, [r4, #4]
 8015d64:	9345      	str	r3, [sp, #276]	; 0x114
 8015d66:	e757      	b.n	8015c18 <__svfiscanf_r+0x60>
 8015d68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015d6a:	4621      	mov	r1, r4
 8015d6c:	4630      	mov	r0, r6
 8015d6e:	4798      	blx	r3
 8015d70:	2800      	cmp	r0, #0
 8015d72:	d0ec      	beq.n	8015d4e <__svfiscanf_r+0x196>
 8015d74:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015d76:	2800      	cmp	r0, #0
 8015d78:	d159      	bne.n	8015e2e <__svfiscanf_r+0x276>
 8015d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8015d7e:	e05c      	b.n	8015e3a <__svfiscanf_r+0x282>
 8015d80:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015d82:	f042 0220 	orr.w	r2, r2, #32
 8015d86:	9241      	str	r2, [sp, #260]	; 0x104
 8015d88:	e79b      	b.n	8015cc2 <__svfiscanf_r+0x10a>
 8015d8a:	2308      	movs	r3, #8
 8015d8c:	9342      	str	r3, [sp, #264]	; 0x108
 8015d8e:	2304      	movs	r3, #4
 8015d90:	e7b3      	b.n	8015cfa <__svfiscanf_r+0x142>
 8015d92:	4629      	mov	r1, r5
 8015d94:	4640      	mov	r0, r8
 8015d96:	f000 fe6d 	bl	8016a74 <__sccl>
 8015d9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015da0:	9341      	str	r3, [sp, #260]	; 0x104
 8015da2:	4605      	mov	r5, r0
 8015da4:	2301      	movs	r3, #1
 8015da6:	e7a8      	b.n	8015cfa <__svfiscanf_r+0x142>
 8015da8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dae:	9341      	str	r3, [sp, #260]	; 0x104
 8015db0:	2300      	movs	r3, #0
 8015db2:	e7a2      	b.n	8015cfa <__svfiscanf_r+0x142>
 8015db4:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015db6:	06c3      	lsls	r3, r0, #27
 8015db8:	f53f af2e 	bmi.w	8015c18 <__svfiscanf_r+0x60>
 8015dbc:	9b00      	ldr	r3, [sp, #0]
 8015dbe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015dc0:	1d19      	adds	r1, r3, #4
 8015dc2:	9100      	str	r1, [sp, #0]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	07c0      	lsls	r0, r0, #31
 8015dc8:	bf4c      	ite	mi
 8015dca:	801a      	strhmi	r2, [r3, #0]
 8015dcc:	601a      	strpl	r2, [r3, #0]
 8015dce:	e723      	b.n	8015c18 <__svfiscanf_r+0x60>
 8015dd0:	2305      	movs	r3, #5
 8015dd2:	e792      	b.n	8015cfa <__svfiscanf_r+0x142>
 8015dd4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015dd6:	4621      	mov	r1, r4
 8015dd8:	4630      	mov	r0, r6
 8015dda:	4798      	blx	r3
 8015ddc:	2800      	cmp	r0, #0
 8015dde:	d090      	beq.n	8015d02 <__svfiscanf_r+0x14a>
 8015de0:	e7c8      	b.n	8015d74 <__svfiscanf_r+0x1bc>
 8015de2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015de4:	3201      	adds	r2, #1
 8015de6:	9245      	str	r2, [sp, #276]	; 0x114
 8015de8:	6862      	ldr	r2, [r4, #4]
 8015dea:	3a01      	subs	r2, #1
 8015dec:	2a00      	cmp	r2, #0
 8015dee:	6062      	str	r2, [r4, #4]
 8015df0:	dd02      	ble.n	8015df8 <__svfiscanf_r+0x240>
 8015df2:	3301      	adds	r3, #1
 8015df4:	6023      	str	r3, [r4, #0]
 8015df6:	e787      	b.n	8015d08 <__svfiscanf_r+0x150>
 8015df8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015dfa:	4621      	mov	r1, r4
 8015dfc:	4630      	mov	r0, r6
 8015dfe:	4798      	blx	r3
 8015e00:	2800      	cmp	r0, #0
 8015e02:	d081      	beq.n	8015d08 <__svfiscanf_r+0x150>
 8015e04:	e7b6      	b.n	8015d74 <__svfiscanf_r+0x1bc>
 8015e06:	2b04      	cmp	r3, #4
 8015e08:	dc06      	bgt.n	8015e18 <__svfiscanf_r+0x260>
 8015e0a:	466b      	mov	r3, sp
 8015e0c:	4622      	mov	r2, r4
 8015e0e:	a941      	add	r1, sp, #260	; 0x104
 8015e10:	4630      	mov	r0, r6
 8015e12:	f000 fa8f 	bl	8016334 <_scanf_i>
 8015e16:	e788      	b.n	8015d2a <__svfiscanf_r+0x172>
 8015e18:	4b0e      	ldr	r3, [pc, #56]	; (8015e54 <__svfiscanf_r+0x29c>)
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	f43f aefc 	beq.w	8015c18 <__svfiscanf_r+0x60>
 8015e20:	466b      	mov	r3, sp
 8015e22:	4622      	mov	r2, r4
 8015e24:	a941      	add	r1, sp, #260	; 0x104
 8015e26:	4630      	mov	r0, r6
 8015e28:	f000 f83e 	bl	8015ea8 <_scanf_float>
 8015e2c:	e77d      	b.n	8015d2a <__svfiscanf_r+0x172>
 8015e2e:	89a3      	ldrh	r3, [r4, #12]
 8015e30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015e34:	bf18      	it	ne
 8015e36:	f04f 30ff 	movne.w	r0, #4294967295
 8015e3a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8015e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e42:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015e44:	e7f9      	b.n	8015e3a <__svfiscanf_r+0x282>
 8015e46:	bf00      	nop
 8015e48:	08017c01 	.word	0x08017c01
 8015e4c:	0801690d 	.word	0x0801690d
 8015e50:	0801a332 	.word	0x0801a332
 8015e54:	08015ea9 	.word	0x08015ea9

08015e58 <_vfiscanf_r>:
 8015e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e5c:	460c      	mov	r4, r1
 8015e5e:	4616      	mov	r6, r2
 8015e60:	461f      	mov	r7, r3
 8015e62:	4605      	mov	r5, r0
 8015e64:	b118      	cbz	r0, 8015e6e <_vfiscanf_r+0x16>
 8015e66:	6983      	ldr	r3, [r0, #24]
 8015e68:	b90b      	cbnz	r3, 8015e6e <_vfiscanf_r+0x16>
 8015e6a:	f7fe ff1f 	bl	8014cac <__sinit>
 8015e6e:	4b0b      	ldr	r3, [pc, #44]	; (8015e9c <_vfiscanf_r+0x44>)
 8015e70:	429c      	cmp	r4, r3
 8015e72:	d108      	bne.n	8015e86 <_vfiscanf_r+0x2e>
 8015e74:	686c      	ldr	r4, [r5, #4]
 8015e76:	463b      	mov	r3, r7
 8015e78:	4632      	mov	r2, r6
 8015e7a:	4621      	mov	r1, r4
 8015e7c:	4628      	mov	r0, r5
 8015e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e82:	f7ff be99 	b.w	8015bb8 <__svfiscanf_r>
 8015e86:	4b06      	ldr	r3, [pc, #24]	; (8015ea0 <_vfiscanf_r+0x48>)
 8015e88:	429c      	cmp	r4, r3
 8015e8a:	d101      	bne.n	8015e90 <_vfiscanf_r+0x38>
 8015e8c:	68ac      	ldr	r4, [r5, #8]
 8015e8e:	e7f2      	b.n	8015e76 <_vfiscanf_r+0x1e>
 8015e90:	4b04      	ldr	r3, [pc, #16]	; (8015ea4 <_vfiscanf_r+0x4c>)
 8015e92:	429c      	cmp	r4, r3
 8015e94:	bf08      	it	eq
 8015e96:	68ec      	ldreq	r4, [r5, #12]
 8015e98:	e7ed      	b.n	8015e76 <_vfiscanf_r+0x1e>
 8015e9a:	bf00      	nop
 8015e9c:	0801a2e8 	.word	0x0801a2e8
 8015ea0:	0801a308 	.word	0x0801a308
 8015ea4:	0801a2c8 	.word	0x0801a2c8

08015ea8 <_scanf_float>:
 8015ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eac:	469a      	mov	sl, r3
 8015eae:	688b      	ldr	r3, [r1, #8]
 8015eb0:	4616      	mov	r6, r2
 8015eb2:	1e5a      	subs	r2, r3, #1
 8015eb4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015eb8:	b087      	sub	sp, #28
 8015eba:	bf83      	ittte	hi
 8015ebc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015ec0:	189b      	addhi	r3, r3, r2
 8015ec2:	9301      	strhi	r3, [sp, #4]
 8015ec4:	2300      	movls	r3, #0
 8015ec6:	bf86      	itte	hi
 8015ec8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015ecc:	608b      	strhi	r3, [r1, #8]
 8015ece:	9301      	strls	r3, [sp, #4]
 8015ed0:	680b      	ldr	r3, [r1, #0]
 8015ed2:	4688      	mov	r8, r1
 8015ed4:	f04f 0b00 	mov.w	fp, #0
 8015ed8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015edc:	f848 3b1c 	str.w	r3, [r8], #28
 8015ee0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015ee4:	4607      	mov	r7, r0
 8015ee6:	460c      	mov	r4, r1
 8015ee8:	4645      	mov	r5, r8
 8015eea:	465a      	mov	r2, fp
 8015eec:	46d9      	mov	r9, fp
 8015eee:	f8cd b008 	str.w	fp, [sp, #8]
 8015ef2:	68a1      	ldr	r1, [r4, #8]
 8015ef4:	b181      	cbz	r1, 8015f18 <_scanf_float+0x70>
 8015ef6:	6833      	ldr	r3, [r6, #0]
 8015ef8:	781b      	ldrb	r3, [r3, #0]
 8015efa:	2b49      	cmp	r3, #73	; 0x49
 8015efc:	d071      	beq.n	8015fe2 <_scanf_float+0x13a>
 8015efe:	d84d      	bhi.n	8015f9c <_scanf_float+0xf4>
 8015f00:	2b39      	cmp	r3, #57	; 0x39
 8015f02:	d840      	bhi.n	8015f86 <_scanf_float+0xde>
 8015f04:	2b31      	cmp	r3, #49	; 0x31
 8015f06:	f080 8088 	bcs.w	801601a <_scanf_float+0x172>
 8015f0a:	2b2d      	cmp	r3, #45	; 0x2d
 8015f0c:	f000 8090 	beq.w	8016030 <_scanf_float+0x188>
 8015f10:	d815      	bhi.n	8015f3e <_scanf_float+0x96>
 8015f12:	2b2b      	cmp	r3, #43	; 0x2b
 8015f14:	f000 808c 	beq.w	8016030 <_scanf_float+0x188>
 8015f18:	f1b9 0f00 	cmp.w	r9, #0
 8015f1c:	d003      	beq.n	8015f26 <_scanf_float+0x7e>
 8015f1e:	6823      	ldr	r3, [r4, #0]
 8015f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015f24:	6023      	str	r3, [r4, #0]
 8015f26:	3a01      	subs	r2, #1
 8015f28:	2a01      	cmp	r2, #1
 8015f2a:	f200 80ea 	bhi.w	8016102 <_scanf_float+0x25a>
 8015f2e:	4545      	cmp	r5, r8
 8015f30:	f200 80dc 	bhi.w	80160ec <_scanf_float+0x244>
 8015f34:	2601      	movs	r6, #1
 8015f36:	4630      	mov	r0, r6
 8015f38:	b007      	add	sp, #28
 8015f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8015f40:	f000 809f 	beq.w	8016082 <_scanf_float+0x1da>
 8015f44:	2b30      	cmp	r3, #48	; 0x30
 8015f46:	d1e7      	bne.n	8015f18 <_scanf_float+0x70>
 8015f48:	6820      	ldr	r0, [r4, #0]
 8015f4a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015f4e:	d064      	beq.n	801601a <_scanf_float+0x172>
 8015f50:	9b01      	ldr	r3, [sp, #4]
 8015f52:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015f56:	6020      	str	r0, [r4, #0]
 8015f58:	f109 0901 	add.w	r9, r9, #1
 8015f5c:	b11b      	cbz	r3, 8015f66 <_scanf_float+0xbe>
 8015f5e:	3b01      	subs	r3, #1
 8015f60:	3101      	adds	r1, #1
 8015f62:	9301      	str	r3, [sp, #4]
 8015f64:	60a1      	str	r1, [r4, #8]
 8015f66:	68a3      	ldr	r3, [r4, #8]
 8015f68:	3b01      	subs	r3, #1
 8015f6a:	60a3      	str	r3, [r4, #8]
 8015f6c:	6923      	ldr	r3, [r4, #16]
 8015f6e:	3301      	adds	r3, #1
 8015f70:	6123      	str	r3, [r4, #16]
 8015f72:	6873      	ldr	r3, [r6, #4]
 8015f74:	3b01      	subs	r3, #1
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	6073      	str	r3, [r6, #4]
 8015f7a:	f340 80ac 	ble.w	80160d6 <_scanf_float+0x22e>
 8015f7e:	6833      	ldr	r3, [r6, #0]
 8015f80:	3301      	adds	r3, #1
 8015f82:	6033      	str	r3, [r6, #0]
 8015f84:	e7b5      	b.n	8015ef2 <_scanf_float+0x4a>
 8015f86:	2b45      	cmp	r3, #69	; 0x45
 8015f88:	f000 8085 	beq.w	8016096 <_scanf_float+0x1ee>
 8015f8c:	2b46      	cmp	r3, #70	; 0x46
 8015f8e:	d06a      	beq.n	8016066 <_scanf_float+0x1be>
 8015f90:	2b41      	cmp	r3, #65	; 0x41
 8015f92:	d1c1      	bne.n	8015f18 <_scanf_float+0x70>
 8015f94:	2a01      	cmp	r2, #1
 8015f96:	d1bf      	bne.n	8015f18 <_scanf_float+0x70>
 8015f98:	2202      	movs	r2, #2
 8015f9a:	e046      	b.n	801602a <_scanf_float+0x182>
 8015f9c:	2b65      	cmp	r3, #101	; 0x65
 8015f9e:	d07a      	beq.n	8016096 <_scanf_float+0x1ee>
 8015fa0:	d818      	bhi.n	8015fd4 <_scanf_float+0x12c>
 8015fa2:	2b54      	cmp	r3, #84	; 0x54
 8015fa4:	d066      	beq.n	8016074 <_scanf_float+0x1cc>
 8015fa6:	d811      	bhi.n	8015fcc <_scanf_float+0x124>
 8015fa8:	2b4e      	cmp	r3, #78	; 0x4e
 8015faa:	d1b5      	bne.n	8015f18 <_scanf_float+0x70>
 8015fac:	2a00      	cmp	r2, #0
 8015fae:	d146      	bne.n	801603e <_scanf_float+0x196>
 8015fb0:	f1b9 0f00 	cmp.w	r9, #0
 8015fb4:	d145      	bne.n	8016042 <_scanf_float+0x19a>
 8015fb6:	6821      	ldr	r1, [r4, #0]
 8015fb8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015fbc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015fc0:	d13f      	bne.n	8016042 <_scanf_float+0x19a>
 8015fc2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015fc6:	6021      	str	r1, [r4, #0]
 8015fc8:	2201      	movs	r2, #1
 8015fca:	e02e      	b.n	801602a <_scanf_float+0x182>
 8015fcc:	2b59      	cmp	r3, #89	; 0x59
 8015fce:	d01e      	beq.n	801600e <_scanf_float+0x166>
 8015fd0:	2b61      	cmp	r3, #97	; 0x61
 8015fd2:	e7de      	b.n	8015f92 <_scanf_float+0xea>
 8015fd4:	2b6e      	cmp	r3, #110	; 0x6e
 8015fd6:	d0e9      	beq.n	8015fac <_scanf_float+0x104>
 8015fd8:	d815      	bhi.n	8016006 <_scanf_float+0x15e>
 8015fda:	2b66      	cmp	r3, #102	; 0x66
 8015fdc:	d043      	beq.n	8016066 <_scanf_float+0x1be>
 8015fde:	2b69      	cmp	r3, #105	; 0x69
 8015fe0:	d19a      	bne.n	8015f18 <_scanf_float+0x70>
 8015fe2:	f1bb 0f00 	cmp.w	fp, #0
 8015fe6:	d138      	bne.n	801605a <_scanf_float+0x1b2>
 8015fe8:	f1b9 0f00 	cmp.w	r9, #0
 8015fec:	d197      	bne.n	8015f1e <_scanf_float+0x76>
 8015fee:	6821      	ldr	r1, [r4, #0]
 8015ff0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015ff4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015ff8:	d195      	bne.n	8015f26 <_scanf_float+0x7e>
 8015ffa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015ffe:	6021      	str	r1, [r4, #0]
 8016000:	f04f 0b01 	mov.w	fp, #1
 8016004:	e011      	b.n	801602a <_scanf_float+0x182>
 8016006:	2b74      	cmp	r3, #116	; 0x74
 8016008:	d034      	beq.n	8016074 <_scanf_float+0x1cc>
 801600a:	2b79      	cmp	r3, #121	; 0x79
 801600c:	d184      	bne.n	8015f18 <_scanf_float+0x70>
 801600e:	f1bb 0f07 	cmp.w	fp, #7
 8016012:	d181      	bne.n	8015f18 <_scanf_float+0x70>
 8016014:	f04f 0b08 	mov.w	fp, #8
 8016018:	e007      	b.n	801602a <_scanf_float+0x182>
 801601a:	eb12 0f0b 	cmn.w	r2, fp
 801601e:	f47f af7b 	bne.w	8015f18 <_scanf_float+0x70>
 8016022:	6821      	ldr	r1, [r4, #0]
 8016024:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016028:	6021      	str	r1, [r4, #0]
 801602a:	702b      	strb	r3, [r5, #0]
 801602c:	3501      	adds	r5, #1
 801602e:	e79a      	b.n	8015f66 <_scanf_float+0xbe>
 8016030:	6821      	ldr	r1, [r4, #0]
 8016032:	0608      	lsls	r0, r1, #24
 8016034:	f57f af70 	bpl.w	8015f18 <_scanf_float+0x70>
 8016038:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801603c:	e7f4      	b.n	8016028 <_scanf_float+0x180>
 801603e:	2a02      	cmp	r2, #2
 8016040:	d047      	beq.n	80160d2 <_scanf_float+0x22a>
 8016042:	f1bb 0f01 	cmp.w	fp, #1
 8016046:	d003      	beq.n	8016050 <_scanf_float+0x1a8>
 8016048:	f1bb 0f04 	cmp.w	fp, #4
 801604c:	f47f af64 	bne.w	8015f18 <_scanf_float+0x70>
 8016050:	f10b 0b01 	add.w	fp, fp, #1
 8016054:	fa5f fb8b 	uxtb.w	fp, fp
 8016058:	e7e7      	b.n	801602a <_scanf_float+0x182>
 801605a:	f1bb 0f03 	cmp.w	fp, #3
 801605e:	d0f7      	beq.n	8016050 <_scanf_float+0x1a8>
 8016060:	f1bb 0f05 	cmp.w	fp, #5
 8016064:	e7f2      	b.n	801604c <_scanf_float+0x1a4>
 8016066:	f1bb 0f02 	cmp.w	fp, #2
 801606a:	f47f af55 	bne.w	8015f18 <_scanf_float+0x70>
 801606e:	f04f 0b03 	mov.w	fp, #3
 8016072:	e7da      	b.n	801602a <_scanf_float+0x182>
 8016074:	f1bb 0f06 	cmp.w	fp, #6
 8016078:	f47f af4e 	bne.w	8015f18 <_scanf_float+0x70>
 801607c:	f04f 0b07 	mov.w	fp, #7
 8016080:	e7d3      	b.n	801602a <_scanf_float+0x182>
 8016082:	6821      	ldr	r1, [r4, #0]
 8016084:	0588      	lsls	r0, r1, #22
 8016086:	f57f af47 	bpl.w	8015f18 <_scanf_float+0x70>
 801608a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801608e:	6021      	str	r1, [r4, #0]
 8016090:	f8cd 9008 	str.w	r9, [sp, #8]
 8016094:	e7c9      	b.n	801602a <_scanf_float+0x182>
 8016096:	6821      	ldr	r1, [r4, #0]
 8016098:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801609c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80160a0:	d006      	beq.n	80160b0 <_scanf_float+0x208>
 80160a2:	0548      	lsls	r0, r1, #21
 80160a4:	f57f af38 	bpl.w	8015f18 <_scanf_float+0x70>
 80160a8:	f1b9 0f00 	cmp.w	r9, #0
 80160ac:	f43f af3b 	beq.w	8015f26 <_scanf_float+0x7e>
 80160b0:	0588      	lsls	r0, r1, #22
 80160b2:	bf58      	it	pl
 80160b4:	9802      	ldrpl	r0, [sp, #8]
 80160b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80160ba:	bf58      	it	pl
 80160bc:	eba9 0000 	subpl.w	r0, r9, r0
 80160c0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80160c4:	bf58      	it	pl
 80160c6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80160ca:	6021      	str	r1, [r4, #0]
 80160cc:	f04f 0900 	mov.w	r9, #0
 80160d0:	e7ab      	b.n	801602a <_scanf_float+0x182>
 80160d2:	2203      	movs	r2, #3
 80160d4:	e7a9      	b.n	801602a <_scanf_float+0x182>
 80160d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80160da:	9205      	str	r2, [sp, #20]
 80160dc:	4631      	mov	r1, r6
 80160de:	4638      	mov	r0, r7
 80160e0:	4798      	blx	r3
 80160e2:	9a05      	ldr	r2, [sp, #20]
 80160e4:	2800      	cmp	r0, #0
 80160e6:	f43f af04 	beq.w	8015ef2 <_scanf_float+0x4a>
 80160ea:	e715      	b.n	8015f18 <_scanf_float+0x70>
 80160ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80160f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80160f4:	4632      	mov	r2, r6
 80160f6:	4638      	mov	r0, r7
 80160f8:	4798      	blx	r3
 80160fa:	6923      	ldr	r3, [r4, #16]
 80160fc:	3b01      	subs	r3, #1
 80160fe:	6123      	str	r3, [r4, #16]
 8016100:	e715      	b.n	8015f2e <_scanf_float+0x86>
 8016102:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016106:	2b06      	cmp	r3, #6
 8016108:	d80a      	bhi.n	8016120 <_scanf_float+0x278>
 801610a:	f1bb 0f02 	cmp.w	fp, #2
 801610e:	d968      	bls.n	80161e2 <_scanf_float+0x33a>
 8016110:	f1ab 0b03 	sub.w	fp, fp, #3
 8016114:	fa5f fb8b 	uxtb.w	fp, fp
 8016118:	eba5 0b0b 	sub.w	fp, r5, fp
 801611c:	455d      	cmp	r5, fp
 801611e:	d14b      	bne.n	80161b8 <_scanf_float+0x310>
 8016120:	6823      	ldr	r3, [r4, #0]
 8016122:	05da      	lsls	r2, r3, #23
 8016124:	d51f      	bpl.n	8016166 <_scanf_float+0x2be>
 8016126:	055b      	lsls	r3, r3, #21
 8016128:	d468      	bmi.n	80161fc <_scanf_float+0x354>
 801612a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801612e:	6923      	ldr	r3, [r4, #16]
 8016130:	2965      	cmp	r1, #101	; 0x65
 8016132:	f103 33ff 	add.w	r3, r3, #4294967295
 8016136:	f105 3bff 	add.w	fp, r5, #4294967295
 801613a:	6123      	str	r3, [r4, #16]
 801613c:	d00d      	beq.n	801615a <_scanf_float+0x2b2>
 801613e:	2945      	cmp	r1, #69	; 0x45
 8016140:	d00b      	beq.n	801615a <_scanf_float+0x2b2>
 8016142:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016146:	4632      	mov	r2, r6
 8016148:	4638      	mov	r0, r7
 801614a:	4798      	blx	r3
 801614c:	6923      	ldr	r3, [r4, #16]
 801614e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016152:	3b01      	subs	r3, #1
 8016154:	f1a5 0b02 	sub.w	fp, r5, #2
 8016158:	6123      	str	r3, [r4, #16]
 801615a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801615e:	4632      	mov	r2, r6
 8016160:	4638      	mov	r0, r7
 8016162:	4798      	blx	r3
 8016164:	465d      	mov	r5, fp
 8016166:	6826      	ldr	r6, [r4, #0]
 8016168:	f016 0610 	ands.w	r6, r6, #16
 801616c:	d17a      	bne.n	8016264 <_scanf_float+0x3bc>
 801616e:	702e      	strb	r6, [r5, #0]
 8016170:	6823      	ldr	r3, [r4, #0]
 8016172:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801617a:	d142      	bne.n	8016202 <_scanf_float+0x35a>
 801617c:	9b02      	ldr	r3, [sp, #8]
 801617e:	eba9 0303 	sub.w	r3, r9, r3
 8016182:	425a      	negs	r2, r3
 8016184:	2b00      	cmp	r3, #0
 8016186:	d149      	bne.n	801621c <_scanf_float+0x374>
 8016188:	2200      	movs	r2, #0
 801618a:	4641      	mov	r1, r8
 801618c:	4638      	mov	r0, r7
 801618e:	f001 fbd3 	bl	8017938 <_strtod_r>
 8016192:	6825      	ldr	r5, [r4, #0]
 8016194:	f8da 3000 	ldr.w	r3, [sl]
 8016198:	f015 0f02 	tst.w	r5, #2
 801619c:	f103 0204 	add.w	r2, r3, #4
 80161a0:	ec59 8b10 	vmov	r8, r9, d0
 80161a4:	f8ca 2000 	str.w	r2, [sl]
 80161a8:	d043      	beq.n	8016232 <_scanf_float+0x38a>
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	e9c3 8900 	strd	r8, r9, [r3]
 80161b0:	68e3      	ldr	r3, [r4, #12]
 80161b2:	3301      	adds	r3, #1
 80161b4:	60e3      	str	r3, [r4, #12]
 80161b6:	e6be      	b.n	8015f36 <_scanf_float+0x8e>
 80161b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80161c0:	4632      	mov	r2, r6
 80161c2:	4638      	mov	r0, r7
 80161c4:	4798      	blx	r3
 80161c6:	6923      	ldr	r3, [r4, #16]
 80161c8:	3b01      	subs	r3, #1
 80161ca:	6123      	str	r3, [r4, #16]
 80161cc:	e7a6      	b.n	801611c <_scanf_float+0x274>
 80161ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161d2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80161d6:	4632      	mov	r2, r6
 80161d8:	4638      	mov	r0, r7
 80161da:	4798      	blx	r3
 80161dc:	6923      	ldr	r3, [r4, #16]
 80161de:	3b01      	subs	r3, #1
 80161e0:	6123      	str	r3, [r4, #16]
 80161e2:	4545      	cmp	r5, r8
 80161e4:	d8f3      	bhi.n	80161ce <_scanf_float+0x326>
 80161e6:	e6a5      	b.n	8015f34 <_scanf_float+0x8c>
 80161e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80161f0:	4632      	mov	r2, r6
 80161f2:	4638      	mov	r0, r7
 80161f4:	4798      	blx	r3
 80161f6:	6923      	ldr	r3, [r4, #16]
 80161f8:	3b01      	subs	r3, #1
 80161fa:	6123      	str	r3, [r4, #16]
 80161fc:	4545      	cmp	r5, r8
 80161fe:	d8f3      	bhi.n	80161e8 <_scanf_float+0x340>
 8016200:	e698      	b.n	8015f34 <_scanf_float+0x8c>
 8016202:	9b03      	ldr	r3, [sp, #12]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d0bf      	beq.n	8016188 <_scanf_float+0x2e0>
 8016208:	9904      	ldr	r1, [sp, #16]
 801620a:	230a      	movs	r3, #10
 801620c:	4632      	mov	r2, r6
 801620e:	3101      	adds	r1, #1
 8016210:	4638      	mov	r0, r7
 8016212:	f001 fc1d 	bl	8017a50 <_strtol_r>
 8016216:	9b03      	ldr	r3, [sp, #12]
 8016218:	9d04      	ldr	r5, [sp, #16]
 801621a:	1ac2      	subs	r2, r0, r3
 801621c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016220:	429d      	cmp	r5, r3
 8016222:	bf28      	it	cs
 8016224:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016228:	490f      	ldr	r1, [pc, #60]	; (8016268 <_scanf_float+0x3c0>)
 801622a:	4628      	mov	r0, r5
 801622c:	f000 fd10 	bl	8016c50 <siprintf>
 8016230:	e7aa      	b.n	8016188 <_scanf_float+0x2e0>
 8016232:	f015 0504 	ands.w	r5, r5, #4
 8016236:	d1b8      	bne.n	80161aa <_scanf_float+0x302>
 8016238:	681f      	ldr	r7, [r3, #0]
 801623a:	ee10 2a10 	vmov	r2, s0
 801623e:	464b      	mov	r3, r9
 8016240:	ee10 0a10 	vmov	r0, s0
 8016244:	4649      	mov	r1, r9
 8016246:	f7f2 fba9 	bl	800899c <__aeabi_dcmpun>
 801624a:	b128      	cbz	r0, 8016258 <_scanf_float+0x3b0>
 801624c:	4628      	mov	r0, r5
 801624e:	f000 fcf9 	bl	8016c44 <nanf>
 8016252:	ed87 0a00 	vstr	s0, [r7]
 8016256:	e7ab      	b.n	80161b0 <_scanf_float+0x308>
 8016258:	4640      	mov	r0, r8
 801625a:	4649      	mov	r1, r9
 801625c:	f7f2 fbfc 	bl	8008a58 <__aeabi_d2f>
 8016260:	6038      	str	r0, [r7, #0]
 8016262:	e7a5      	b.n	80161b0 <_scanf_float+0x308>
 8016264:	2600      	movs	r6, #0
 8016266:	e666      	b.n	8015f36 <_scanf_float+0x8e>
 8016268:	0801a36f 	.word	0x0801a36f

0801626c <_scanf_chars>:
 801626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016270:	4615      	mov	r5, r2
 8016272:	688a      	ldr	r2, [r1, #8]
 8016274:	4680      	mov	r8, r0
 8016276:	460c      	mov	r4, r1
 8016278:	b932      	cbnz	r2, 8016288 <_scanf_chars+0x1c>
 801627a:	698a      	ldr	r2, [r1, #24]
 801627c:	2a00      	cmp	r2, #0
 801627e:	bf14      	ite	ne
 8016280:	f04f 32ff 	movne.w	r2, #4294967295
 8016284:	2201      	moveq	r2, #1
 8016286:	608a      	str	r2, [r1, #8]
 8016288:	6822      	ldr	r2, [r4, #0]
 801628a:	06d1      	lsls	r1, r2, #27
 801628c:	bf5f      	itttt	pl
 801628e:	681a      	ldrpl	r2, [r3, #0]
 8016290:	1d11      	addpl	r1, r2, #4
 8016292:	6019      	strpl	r1, [r3, #0]
 8016294:	6817      	ldrpl	r7, [r2, #0]
 8016296:	2600      	movs	r6, #0
 8016298:	69a3      	ldr	r3, [r4, #24]
 801629a:	b1db      	cbz	r3, 80162d4 <_scanf_chars+0x68>
 801629c:	2b01      	cmp	r3, #1
 801629e:	d107      	bne.n	80162b0 <_scanf_chars+0x44>
 80162a0:	682b      	ldr	r3, [r5, #0]
 80162a2:	6962      	ldr	r2, [r4, #20]
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	5cd3      	ldrb	r3, [r2, r3]
 80162a8:	b9a3      	cbnz	r3, 80162d4 <_scanf_chars+0x68>
 80162aa:	2e00      	cmp	r6, #0
 80162ac:	d132      	bne.n	8016314 <_scanf_chars+0xa8>
 80162ae:	e006      	b.n	80162be <_scanf_chars+0x52>
 80162b0:	2b02      	cmp	r3, #2
 80162b2:	d007      	beq.n	80162c4 <_scanf_chars+0x58>
 80162b4:	2e00      	cmp	r6, #0
 80162b6:	d12d      	bne.n	8016314 <_scanf_chars+0xa8>
 80162b8:	69a3      	ldr	r3, [r4, #24]
 80162ba:	2b01      	cmp	r3, #1
 80162bc:	d12a      	bne.n	8016314 <_scanf_chars+0xa8>
 80162be:	2001      	movs	r0, #1
 80162c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162c4:	f002 ff80 	bl	80191c8 <__locale_ctype_ptr>
 80162c8:	682b      	ldr	r3, [r5, #0]
 80162ca:	781b      	ldrb	r3, [r3, #0]
 80162cc:	4418      	add	r0, r3
 80162ce:	7843      	ldrb	r3, [r0, #1]
 80162d0:	071b      	lsls	r3, r3, #28
 80162d2:	d4ef      	bmi.n	80162b4 <_scanf_chars+0x48>
 80162d4:	6823      	ldr	r3, [r4, #0]
 80162d6:	06da      	lsls	r2, r3, #27
 80162d8:	bf5e      	ittt	pl
 80162da:	682b      	ldrpl	r3, [r5, #0]
 80162dc:	781b      	ldrbpl	r3, [r3, #0]
 80162de:	703b      	strbpl	r3, [r7, #0]
 80162e0:	682a      	ldr	r2, [r5, #0]
 80162e2:	686b      	ldr	r3, [r5, #4]
 80162e4:	f102 0201 	add.w	r2, r2, #1
 80162e8:	602a      	str	r2, [r5, #0]
 80162ea:	68a2      	ldr	r2, [r4, #8]
 80162ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80162f0:	f102 32ff 	add.w	r2, r2, #4294967295
 80162f4:	606b      	str	r3, [r5, #4]
 80162f6:	f106 0601 	add.w	r6, r6, #1
 80162fa:	bf58      	it	pl
 80162fc:	3701      	addpl	r7, #1
 80162fe:	60a2      	str	r2, [r4, #8]
 8016300:	b142      	cbz	r2, 8016314 <_scanf_chars+0xa8>
 8016302:	2b00      	cmp	r3, #0
 8016304:	dcc8      	bgt.n	8016298 <_scanf_chars+0x2c>
 8016306:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801630a:	4629      	mov	r1, r5
 801630c:	4640      	mov	r0, r8
 801630e:	4798      	blx	r3
 8016310:	2800      	cmp	r0, #0
 8016312:	d0c1      	beq.n	8016298 <_scanf_chars+0x2c>
 8016314:	6823      	ldr	r3, [r4, #0]
 8016316:	f013 0310 	ands.w	r3, r3, #16
 801631a:	d105      	bne.n	8016328 <_scanf_chars+0xbc>
 801631c:	68e2      	ldr	r2, [r4, #12]
 801631e:	3201      	adds	r2, #1
 8016320:	60e2      	str	r2, [r4, #12]
 8016322:	69a2      	ldr	r2, [r4, #24]
 8016324:	b102      	cbz	r2, 8016328 <_scanf_chars+0xbc>
 8016326:	703b      	strb	r3, [r7, #0]
 8016328:	6923      	ldr	r3, [r4, #16]
 801632a:	441e      	add	r6, r3
 801632c:	6126      	str	r6, [r4, #16]
 801632e:	2000      	movs	r0, #0
 8016330:	e7c6      	b.n	80162c0 <_scanf_chars+0x54>
	...

08016334 <_scanf_i>:
 8016334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016338:	469a      	mov	sl, r3
 801633a:	4b74      	ldr	r3, [pc, #464]	; (801650c <_scanf_i+0x1d8>)
 801633c:	460c      	mov	r4, r1
 801633e:	4683      	mov	fp, r0
 8016340:	4616      	mov	r6, r2
 8016342:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016346:	b087      	sub	sp, #28
 8016348:	ab03      	add	r3, sp, #12
 801634a:	68a7      	ldr	r7, [r4, #8]
 801634c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016350:	4b6f      	ldr	r3, [pc, #444]	; (8016510 <_scanf_i+0x1dc>)
 8016352:	69a1      	ldr	r1, [r4, #24]
 8016354:	4a6f      	ldr	r2, [pc, #444]	; (8016514 <_scanf_i+0x1e0>)
 8016356:	2903      	cmp	r1, #3
 8016358:	bf08      	it	eq
 801635a:	461a      	moveq	r2, r3
 801635c:	1e7b      	subs	r3, r7, #1
 801635e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8016362:	bf84      	itt	hi
 8016364:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016368:	60a3      	strhi	r3, [r4, #8]
 801636a:	6823      	ldr	r3, [r4, #0]
 801636c:	9200      	str	r2, [sp, #0]
 801636e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016372:	bf88      	it	hi
 8016374:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016378:	f104 091c 	add.w	r9, r4, #28
 801637c:	6023      	str	r3, [r4, #0]
 801637e:	bf8c      	ite	hi
 8016380:	197f      	addhi	r7, r7, r5
 8016382:	2700      	movls	r7, #0
 8016384:	464b      	mov	r3, r9
 8016386:	f04f 0800 	mov.w	r8, #0
 801638a:	9301      	str	r3, [sp, #4]
 801638c:	6831      	ldr	r1, [r6, #0]
 801638e:	ab03      	add	r3, sp, #12
 8016390:	2202      	movs	r2, #2
 8016392:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016396:	7809      	ldrb	r1, [r1, #0]
 8016398:	f7f1 fe5a 	bl	8008050 <memchr>
 801639c:	9b01      	ldr	r3, [sp, #4]
 801639e:	b330      	cbz	r0, 80163ee <_scanf_i+0xba>
 80163a0:	f1b8 0f01 	cmp.w	r8, #1
 80163a4:	d15a      	bne.n	801645c <_scanf_i+0x128>
 80163a6:	6862      	ldr	r2, [r4, #4]
 80163a8:	b92a      	cbnz	r2, 80163b6 <_scanf_i+0x82>
 80163aa:	6822      	ldr	r2, [r4, #0]
 80163ac:	2108      	movs	r1, #8
 80163ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80163b2:	6061      	str	r1, [r4, #4]
 80163b4:	6022      	str	r2, [r4, #0]
 80163b6:	6822      	ldr	r2, [r4, #0]
 80163b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80163bc:	6022      	str	r2, [r4, #0]
 80163be:	68a2      	ldr	r2, [r4, #8]
 80163c0:	1e51      	subs	r1, r2, #1
 80163c2:	60a1      	str	r1, [r4, #8]
 80163c4:	b19a      	cbz	r2, 80163ee <_scanf_i+0xba>
 80163c6:	6832      	ldr	r2, [r6, #0]
 80163c8:	1c51      	adds	r1, r2, #1
 80163ca:	6031      	str	r1, [r6, #0]
 80163cc:	7812      	ldrb	r2, [r2, #0]
 80163ce:	701a      	strb	r2, [r3, #0]
 80163d0:	1c5d      	adds	r5, r3, #1
 80163d2:	6873      	ldr	r3, [r6, #4]
 80163d4:	3b01      	subs	r3, #1
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	6073      	str	r3, [r6, #4]
 80163da:	dc07      	bgt.n	80163ec <_scanf_i+0xb8>
 80163dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80163e0:	4631      	mov	r1, r6
 80163e2:	4658      	mov	r0, fp
 80163e4:	4798      	blx	r3
 80163e6:	2800      	cmp	r0, #0
 80163e8:	f040 8086 	bne.w	80164f8 <_scanf_i+0x1c4>
 80163ec:	462b      	mov	r3, r5
 80163ee:	f108 0801 	add.w	r8, r8, #1
 80163f2:	f1b8 0f03 	cmp.w	r8, #3
 80163f6:	d1c8      	bne.n	801638a <_scanf_i+0x56>
 80163f8:	6862      	ldr	r2, [r4, #4]
 80163fa:	b90a      	cbnz	r2, 8016400 <_scanf_i+0xcc>
 80163fc:	220a      	movs	r2, #10
 80163fe:	6062      	str	r2, [r4, #4]
 8016400:	6862      	ldr	r2, [r4, #4]
 8016402:	4945      	ldr	r1, [pc, #276]	; (8016518 <_scanf_i+0x1e4>)
 8016404:	6960      	ldr	r0, [r4, #20]
 8016406:	9301      	str	r3, [sp, #4]
 8016408:	1a89      	subs	r1, r1, r2
 801640a:	f000 fb33 	bl	8016a74 <__sccl>
 801640e:	9b01      	ldr	r3, [sp, #4]
 8016410:	f04f 0800 	mov.w	r8, #0
 8016414:	461d      	mov	r5, r3
 8016416:	68a3      	ldr	r3, [r4, #8]
 8016418:	6822      	ldr	r2, [r4, #0]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d03a      	beq.n	8016494 <_scanf_i+0x160>
 801641e:	6831      	ldr	r1, [r6, #0]
 8016420:	6960      	ldr	r0, [r4, #20]
 8016422:	f891 c000 	ldrb.w	ip, [r1]
 8016426:	f810 000c 	ldrb.w	r0, [r0, ip]
 801642a:	2800      	cmp	r0, #0
 801642c:	d032      	beq.n	8016494 <_scanf_i+0x160>
 801642e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016432:	d121      	bne.n	8016478 <_scanf_i+0x144>
 8016434:	0510      	lsls	r0, r2, #20
 8016436:	d51f      	bpl.n	8016478 <_scanf_i+0x144>
 8016438:	f108 0801 	add.w	r8, r8, #1
 801643c:	b117      	cbz	r7, 8016444 <_scanf_i+0x110>
 801643e:	3301      	adds	r3, #1
 8016440:	3f01      	subs	r7, #1
 8016442:	60a3      	str	r3, [r4, #8]
 8016444:	6873      	ldr	r3, [r6, #4]
 8016446:	3b01      	subs	r3, #1
 8016448:	2b00      	cmp	r3, #0
 801644a:	6073      	str	r3, [r6, #4]
 801644c:	dd1b      	ble.n	8016486 <_scanf_i+0x152>
 801644e:	6833      	ldr	r3, [r6, #0]
 8016450:	3301      	adds	r3, #1
 8016452:	6033      	str	r3, [r6, #0]
 8016454:	68a3      	ldr	r3, [r4, #8]
 8016456:	3b01      	subs	r3, #1
 8016458:	60a3      	str	r3, [r4, #8]
 801645a:	e7dc      	b.n	8016416 <_scanf_i+0xe2>
 801645c:	f1b8 0f02 	cmp.w	r8, #2
 8016460:	d1ad      	bne.n	80163be <_scanf_i+0x8a>
 8016462:	6822      	ldr	r2, [r4, #0]
 8016464:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016468:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801646c:	d1bf      	bne.n	80163ee <_scanf_i+0xba>
 801646e:	2110      	movs	r1, #16
 8016470:	6061      	str	r1, [r4, #4]
 8016472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016476:	e7a1      	b.n	80163bc <_scanf_i+0x88>
 8016478:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801647c:	6022      	str	r2, [r4, #0]
 801647e:	780b      	ldrb	r3, [r1, #0]
 8016480:	702b      	strb	r3, [r5, #0]
 8016482:	3501      	adds	r5, #1
 8016484:	e7de      	b.n	8016444 <_scanf_i+0x110>
 8016486:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801648a:	4631      	mov	r1, r6
 801648c:	4658      	mov	r0, fp
 801648e:	4798      	blx	r3
 8016490:	2800      	cmp	r0, #0
 8016492:	d0df      	beq.n	8016454 <_scanf_i+0x120>
 8016494:	6823      	ldr	r3, [r4, #0]
 8016496:	05d9      	lsls	r1, r3, #23
 8016498:	d50c      	bpl.n	80164b4 <_scanf_i+0x180>
 801649a:	454d      	cmp	r5, r9
 801649c:	d908      	bls.n	80164b0 <_scanf_i+0x17c>
 801649e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80164a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164a6:	4632      	mov	r2, r6
 80164a8:	4658      	mov	r0, fp
 80164aa:	4798      	blx	r3
 80164ac:	1e6f      	subs	r7, r5, #1
 80164ae:	463d      	mov	r5, r7
 80164b0:	454d      	cmp	r5, r9
 80164b2:	d029      	beq.n	8016508 <_scanf_i+0x1d4>
 80164b4:	6822      	ldr	r2, [r4, #0]
 80164b6:	f012 0210 	ands.w	r2, r2, #16
 80164ba:	d113      	bne.n	80164e4 <_scanf_i+0x1b0>
 80164bc:	702a      	strb	r2, [r5, #0]
 80164be:	6863      	ldr	r3, [r4, #4]
 80164c0:	9e00      	ldr	r6, [sp, #0]
 80164c2:	4649      	mov	r1, r9
 80164c4:	4658      	mov	r0, fp
 80164c6:	47b0      	blx	r6
 80164c8:	f8da 3000 	ldr.w	r3, [sl]
 80164cc:	6821      	ldr	r1, [r4, #0]
 80164ce:	1d1a      	adds	r2, r3, #4
 80164d0:	f8ca 2000 	str.w	r2, [sl]
 80164d4:	f011 0f20 	tst.w	r1, #32
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	d010      	beq.n	80164fe <_scanf_i+0x1ca>
 80164dc:	6018      	str	r0, [r3, #0]
 80164de:	68e3      	ldr	r3, [r4, #12]
 80164e0:	3301      	adds	r3, #1
 80164e2:	60e3      	str	r3, [r4, #12]
 80164e4:	eba5 0509 	sub.w	r5, r5, r9
 80164e8:	44a8      	add	r8, r5
 80164ea:	6925      	ldr	r5, [r4, #16]
 80164ec:	4445      	add	r5, r8
 80164ee:	6125      	str	r5, [r4, #16]
 80164f0:	2000      	movs	r0, #0
 80164f2:	b007      	add	sp, #28
 80164f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164f8:	f04f 0800 	mov.w	r8, #0
 80164fc:	e7ca      	b.n	8016494 <_scanf_i+0x160>
 80164fe:	07ca      	lsls	r2, r1, #31
 8016500:	bf4c      	ite	mi
 8016502:	8018      	strhmi	r0, [r3, #0]
 8016504:	6018      	strpl	r0, [r3, #0]
 8016506:	e7ea      	b.n	80164de <_scanf_i+0x1aa>
 8016508:	2001      	movs	r0, #1
 801650a:	e7f2      	b.n	80164f2 <_scanf_i+0x1be>
 801650c:	0801a168 	.word	0x0801a168
 8016510:	08017a51 	.word	0x08017a51
 8016514:	08017b69 	.word	0x08017b69
 8016518:	0801a384 	.word	0x0801a384

0801651c <iprintf>:
 801651c:	b40f      	push	{r0, r1, r2, r3}
 801651e:	4b0a      	ldr	r3, [pc, #40]	; (8016548 <iprintf+0x2c>)
 8016520:	b513      	push	{r0, r1, r4, lr}
 8016522:	681c      	ldr	r4, [r3, #0]
 8016524:	b124      	cbz	r4, 8016530 <iprintf+0x14>
 8016526:	69a3      	ldr	r3, [r4, #24]
 8016528:	b913      	cbnz	r3, 8016530 <iprintf+0x14>
 801652a:	4620      	mov	r0, r4
 801652c:	f7fe fbbe 	bl	8014cac <__sinit>
 8016530:	ab05      	add	r3, sp, #20
 8016532:	9a04      	ldr	r2, [sp, #16]
 8016534:	68a1      	ldr	r1, [r4, #8]
 8016536:	9301      	str	r3, [sp, #4]
 8016538:	4620      	mov	r0, r4
 801653a:	f7fe fdcb 	bl	80150d4 <_vfiprintf_r>
 801653e:	b002      	add	sp, #8
 8016540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016544:	b004      	add	sp, #16
 8016546:	4770      	bx	lr
 8016548:	2000003c 	.word	0x2000003c

0801654c <putchar>:
 801654c:	b538      	push	{r3, r4, r5, lr}
 801654e:	4b08      	ldr	r3, [pc, #32]	; (8016570 <putchar+0x24>)
 8016550:	681c      	ldr	r4, [r3, #0]
 8016552:	4605      	mov	r5, r0
 8016554:	b124      	cbz	r4, 8016560 <putchar+0x14>
 8016556:	69a3      	ldr	r3, [r4, #24]
 8016558:	b913      	cbnz	r3, 8016560 <putchar+0x14>
 801655a:	4620      	mov	r0, r4
 801655c:	f7fe fba6 	bl	8014cac <__sinit>
 8016560:	68a2      	ldr	r2, [r4, #8]
 8016562:	4629      	mov	r1, r5
 8016564:	4620      	mov	r0, r4
 8016566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801656a:	f003 bc17 	b.w	8019d9c <_putc_r>
 801656e:	bf00      	nop
 8016570:	2000003c 	.word	0x2000003c

08016574 <_puts_r>:
 8016574:	b570      	push	{r4, r5, r6, lr}
 8016576:	460e      	mov	r6, r1
 8016578:	4605      	mov	r5, r0
 801657a:	b118      	cbz	r0, 8016584 <_puts_r+0x10>
 801657c:	6983      	ldr	r3, [r0, #24]
 801657e:	b90b      	cbnz	r3, 8016584 <_puts_r+0x10>
 8016580:	f7fe fb94 	bl	8014cac <__sinit>
 8016584:	69ab      	ldr	r3, [r5, #24]
 8016586:	68ac      	ldr	r4, [r5, #8]
 8016588:	b913      	cbnz	r3, 8016590 <_puts_r+0x1c>
 801658a:	4628      	mov	r0, r5
 801658c:	f7fe fb8e 	bl	8014cac <__sinit>
 8016590:	4b23      	ldr	r3, [pc, #140]	; (8016620 <_puts_r+0xac>)
 8016592:	429c      	cmp	r4, r3
 8016594:	d117      	bne.n	80165c6 <_puts_r+0x52>
 8016596:	686c      	ldr	r4, [r5, #4]
 8016598:	89a3      	ldrh	r3, [r4, #12]
 801659a:	071b      	lsls	r3, r3, #28
 801659c:	d51d      	bpl.n	80165da <_puts_r+0x66>
 801659e:	6923      	ldr	r3, [r4, #16]
 80165a0:	b1db      	cbz	r3, 80165da <_puts_r+0x66>
 80165a2:	3e01      	subs	r6, #1
 80165a4:	68a3      	ldr	r3, [r4, #8]
 80165a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80165aa:	3b01      	subs	r3, #1
 80165ac:	60a3      	str	r3, [r4, #8]
 80165ae:	b9e9      	cbnz	r1, 80165ec <_puts_r+0x78>
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	da2e      	bge.n	8016612 <_puts_r+0x9e>
 80165b4:	4622      	mov	r2, r4
 80165b6:	210a      	movs	r1, #10
 80165b8:	4628      	mov	r0, r5
 80165ba:	f001 fb93 	bl	8017ce4 <__swbuf_r>
 80165be:	3001      	adds	r0, #1
 80165c0:	d011      	beq.n	80165e6 <_puts_r+0x72>
 80165c2:	200a      	movs	r0, #10
 80165c4:	e011      	b.n	80165ea <_puts_r+0x76>
 80165c6:	4b17      	ldr	r3, [pc, #92]	; (8016624 <_puts_r+0xb0>)
 80165c8:	429c      	cmp	r4, r3
 80165ca:	d101      	bne.n	80165d0 <_puts_r+0x5c>
 80165cc:	68ac      	ldr	r4, [r5, #8]
 80165ce:	e7e3      	b.n	8016598 <_puts_r+0x24>
 80165d0:	4b15      	ldr	r3, [pc, #84]	; (8016628 <_puts_r+0xb4>)
 80165d2:	429c      	cmp	r4, r3
 80165d4:	bf08      	it	eq
 80165d6:	68ec      	ldreq	r4, [r5, #12]
 80165d8:	e7de      	b.n	8016598 <_puts_r+0x24>
 80165da:	4621      	mov	r1, r4
 80165dc:	4628      	mov	r0, r5
 80165de:	f001 fbe5 	bl	8017dac <__swsetup_r>
 80165e2:	2800      	cmp	r0, #0
 80165e4:	d0dd      	beq.n	80165a2 <_puts_r+0x2e>
 80165e6:	f04f 30ff 	mov.w	r0, #4294967295
 80165ea:	bd70      	pop	{r4, r5, r6, pc}
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	da04      	bge.n	80165fa <_puts_r+0x86>
 80165f0:	69a2      	ldr	r2, [r4, #24]
 80165f2:	429a      	cmp	r2, r3
 80165f4:	dc06      	bgt.n	8016604 <_puts_r+0x90>
 80165f6:	290a      	cmp	r1, #10
 80165f8:	d004      	beq.n	8016604 <_puts_r+0x90>
 80165fa:	6823      	ldr	r3, [r4, #0]
 80165fc:	1c5a      	adds	r2, r3, #1
 80165fe:	6022      	str	r2, [r4, #0]
 8016600:	7019      	strb	r1, [r3, #0]
 8016602:	e7cf      	b.n	80165a4 <_puts_r+0x30>
 8016604:	4622      	mov	r2, r4
 8016606:	4628      	mov	r0, r5
 8016608:	f001 fb6c 	bl	8017ce4 <__swbuf_r>
 801660c:	3001      	adds	r0, #1
 801660e:	d1c9      	bne.n	80165a4 <_puts_r+0x30>
 8016610:	e7e9      	b.n	80165e6 <_puts_r+0x72>
 8016612:	6823      	ldr	r3, [r4, #0]
 8016614:	200a      	movs	r0, #10
 8016616:	1c5a      	adds	r2, r3, #1
 8016618:	6022      	str	r2, [r4, #0]
 801661a:	7018      	strb	r0, [r3, #0]
 801661c:	e7e5      	b.n	80165ea <_puts_r+0x76>
 801661e:	bf00      	nop
 8016620:	0801a2e8 	.word	0x0801a2e8
 8016624:	0801a308 	.word	0x0801a308
 8016628:	0801a2c8 	.word	0x0801a2c8

0801662c <puts>:
 801662c:	4b02      	ldr	r3, [pc, #8]	; (8016638 <puts+0xc>)
 801662e:	4601      	mov	r1, r0
 8016630:	6818      	ldr	r0, [r3, #0]
 8016632:	f7ff bf9f 	b.w	8016574 <_puts_r>
 8016636:	bf00      	nop
 8016638:	2000003c 	.word	0x2000003c

0801663c <swapfunc>:
 801663c:	2b02      	cmp	r3, #2
 801663e:	b510      	push	{r4, lr}
 8016640:	d00a      	beq.n	8016658 <swapfunc+0x1c>
 8016642:	0892      	lsrs	r2, r2, #2
 8016644:	3a01      	subs	r2, #1
 8016646:	6803      	ldr	r3, [r0, #0]
 8016648:	680c      	ldr	r4, [r1, #0]
 801664a:	f840 4b04 	str.w	r4, [r0], #4
 801664e:	2a00      	cmp	r2, #0
 8016650:	f841 3b04 	str.w	r3, [r1], #4
 8016654:	dcf6      	bgt.n	8016644 <swapfunc+0x8>
 8016656:	bd10      	pop	{r4, pc}
 8016658:	4402      	add	r2, r0
 801665a:	780c      	ldrb	r4, [r1, #0]
 801665c:	7803      	ldrb	r3, [r0, #0]
 801665e:	f800 4b01 	strb.w	r4, [r0], #1
 8016662:	f801 3b01 	strb.w	r3, [r1], #1
 8016666:	1a13      	subs	r3, r2, r0
 8016668:	2b00      	cmp	r3, #0
 801666a:	dcf6      	bgt.n	801665a <swapfunc+0x1e>
 801666c:	e7f3      	b.n	8016656 <swapfunc+0x1a>

0801666e <med3.isra.1>:
 801666e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016670:	460c      	mov	r4, r1
 8016672:	4615      	mov	r5, r2
 8016674:	4607      	mov	r7, r0
 8016676:	461e      	mov	r6, r3
 8016678:	4798      	blx	r3
 801667a:	2800      	cmp	r0, #0
 801667c:	4629      	mov	r1, r5
 801667e:	4620      	mov	r0, r4
 8016680:	da0a      	bge.n	8016698 <med3.isra.1+0x2a>
 8016682:	47b0      	blx	r6
 8016684:	2800      	cmp	r0, #0
 8016686:	db05      	blt.n	8016694 <med3.isra.1+0x26>
 8016688:	4629      	mov	r1, r5
 801668a:	4638      	mov	r0, r7
 801668c:	47b0      	blx	r6
 801668e:	2800      	cmp	r0, #0
 8016690:	db0a      	blt.n	80166a8 <med3.isra.1+0x3a>
 8016692:	463c      	mov	r4, r7
 8016694:	4620      	mov	r0, r4
 8016696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016698:	47b0      	blx	r6
 801669a:	2800      	cmp	r0, #0
 801669c:	dcfa      	bgt.n	8016694 <med3.isra.1+0x26>
 801669e:	4629      	mov	r1, r5
 80166a0:	4638      	mov	r0, r7
 80166a2:	47b0      	blx	r6
 80166a4:	2800      	cmp	r0, #0
 80166a6:	dbf4      	blt.n	8016692 <med3.isra.1+0x24>
 80166a8:	462c      	mov	r4, r5
 80166aa:	e7f3      	b.n	8016694 <med3.isra.1+0x26>

080166ac <qsort>:
 80166ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166b0:	b085      	sub	sp, #20
 80166b2:	4606      	mov	r6, r0
 80166b4:	468a      	mov	sl, r1
 80166b6:	4614      	mov	r4, r2
 80166b8:	9300      	str	r3, [sp, #0]
 80166ba:	07b2      	lsls	r2, r6, #30
 80166bc:	d110      	bne.n	80166e0 <qsort+0x34>
 80166be:	07a3      	lsls	r3, r4, #30
 80166c0:	d10e      	bne.n	80166e0 <qsort+0x34>
 80166c2:	1f27      	subs	r7, r4, #4
 80166c4:	bf18      	it	ne
 80166c6:	2701      	movne	r7, #1
 80166c8:	f1ba 0f06 	cmp.w	sl, #6
 80166cc:	eb06 0b04 	add.w	fp, r6, r4
 80166d0:	d828      	bhi.n	8016724 <qsort+0x78>
 80166d2:	fb04 6a0a 	mla	sl, r4, sl, r6
 80166d6:	45da      	cmp	sl, fp
 80166d8:	d80b      	bhi.n	80166f2 <qsort+0x46>
 80166da:	b005      	add	sp, #20
 80166dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166e0:	2702      	movs	r7, #2
 80166e2:	e7f1      	b.n	80166c8 <qsort+0x1c>
 80166e4:	463b      	mov	r3, r7
 80166e6:	4622      	mov	r2, r4
 80166e8:	4649      	mov	r1, r9
 80166ea:	4640      	mov	r0, r8
 80166ec:	f7ff ffa6 	bl	801663c <swapfunc>
 80166f0:	e013      	b.n	801671a <qsort+0x6e>
 80166f2:	46d8      	mov	r8, fp
 80166f4:	e012      	b.n	801671c <qsort+0x70>
 80166f6:	eba8 0904 	sub.w	r9, r8, r4
 80166fa:	4641      	mov	r1, r8
 80166fc:	4648      	mov	r0, r9
 80166fe:	9b00      	ldr	r3, [sp, #0]
 8016700:	4798      	blx	r3
 8016702:	2800      	cmp	r0, #0
 8016704:	dd0c      	ble.n	8016720 <qsort+0x74>
 8016706:	2f00      	cmp	r7, #0
 8016708:	d1ec      	bne.n	80166e4 <qsort+0x38>
 801670a:	f8d8 3000 	ldr.w	r3, [r8]
 801670e:	f8d9 2000 	ldr.w	r2, [r9]
 8016712:	f8c8 2000 	str.w	r2, [r8]
 8016716:	f8c9 3000 	str.w	r3, [r9]
 801671a:	46c8      	mov	r8, r9
 801671c:	4546      	cmp	r6, r8
 801671e:	d3ea      	bcc.n	80166f6 <qsort+0x4a>
 8016720:	44a3      	add	fp, r4
 8016722:	e7d8      	b.n	80166d6 <qsort+0x2a>
 8016724:	ea4f 085a 	mov.w	r8, sl, lsr #1
 8016728:	f10a 35ff 	add.w	r5, sl, #4294967295
 801672c:	f1ba 0f07 	cmp.w	sl, #7
 8016730:	fb04 6808 	mla	r8, r4, r8, r6
 8016734:	fb04 6505 	mla	r5, r4, r5, r6
 8016738:	d027      	beq.n	801678a <qsort+0xde>
 801673a:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
 801673e:	d94a      	bls.n	80167d6 <qsort+0x12a>
 8016740:	ea4f 09da 	mov.w	r9, sl, lsr #3
 8016744:	fb04 f909 	mul.w	r9, r4, r9
 8016748:	eb06 0109 	add.w	r1, r6, r9
 801674c:	eb01 0209 	add.w	r2, r1, r9
 8016750:	9b00      	ldr	r3, [sp, #0]
 8016752:	4630      	mov	r0, r6
 8016754:	f7ff ff8b 	bl	801666e <med3.isra.1>
 8016758:	eb08 0209 	add.w	r2, r8, r9
 801675c:	4641      	mov	r1, r8
 801675e:	9001      	str	r0, [sp, #4]
 8016760:	9b00      	ldr	r3, [sp, #0]
 8016762:	eba8 0009 	sub.w	r0, r8, r9
 8016766:	f7ff ff82 	bl	801666e <med3.isra.1>
 801676a:	4680      	mov	r8, r0
 801676c:	eba5 0049 	sub.w	r0, r5, r9, lsl #1
 8016770:	462a      	mov	r2, r5
 8016772:	9b00      	ldr	r3, [sp, #0]
 8016774:	eb00 0109 	add.w	r1, r0, r9
 8016778:	f7ff ff79 	bl	801666e <med3.isra.1>
 801677c:	4602      	mov	r2, r0
 801677e:	4641      	mov	r1, r8
 8016780:	9b00      	ldr	r3, [sp, #0]
 8016782:	9801      	ldr	r0, [sp, #4]
 8016784:	f7ff ff73 	bl	801666e <med3.isra.1>
 8016788:	4680      	mov	r8, r0
 801678a:	bb3f      	cbnz	r7, 80167dc <qsort+0x130>
 801678c:	6833      	ldr	r3, [r6, #0]
 801678e:	f8d8 2000 	ldr.w	r2, [r8]
 8016792:	6032      	str	r2, [r6, #0]
 8016794:	f8c8 3000 	str.w	r3, [r8]
 8016798:	46d8      	mov	r8, fp
 801679a:	46a9      	mov	r9, r5
 801679c:	f8cd b004 	str.w	fp, [sp, #4]
 80167a0:	2300      	movs	r3, #0
 80167a2:	45a8      	cmp	r8, r5
 80167a4:	d857      	bhi.n	8016856 <qsort+0x1aa>
 80167a6:	9302      	str	r3, [sp, #8]
 80167a8:	4631      	mov	r1, r6
 80167aa:	9b00      	ldr	r3, [sp, #0]
 80167ac:	4640      	mov	r0, r8
 80167ae:	4798      	blx	r3
 80167b0:	2800      	cmp	r0, #0
 80167b2:	9b02      	ldr	r3, [sp, #8]
 80167b4:	dc2e      	bgt.n	8016814 <qsort+0x168>
 80167b6:	d10c      	bne.n	80167d2 <qsort+0x126>
 80167b8:	b9bf      	cbnz	r7, 80167ea <qsort+0x13e>
 80167ba:	9b01      	ldr	r3, [sp, #4]
 80167bc:	9901      	ldr	r1, [sp, #4]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	f8d8 2000 	ldr.w	r2, [r8]
 80167c4:	600a      	str	r2, [r1, #0]
 80167c6:	f8c8 3000 	str.w	r3, [r8]
 80167ca:	9b01      	ldr	r3, [sp, #4]
 80167cc:	4423      	add	r3, r4
 80167ce:	9301      	str	r3, [sp, #4]
 80167d0:	2301      	movs	r3, #1
 80167d2:	44a0      	add	r8, r4
 80167d4:	e7e5      	b.n	80167a2 <qsort+0xf6>
 80167d6:	462a      	mov	r2, r5
 80167d8:	9601      	str	r6, [sp, #4]
 80167da:	e7d0      	b.n	801677e <qsort+0xd2>
 80167dc:	463b      	mov	r3, r7
 80167de:	4622      	mov	r2, r4
 80167e0:	4641      	mov	r1, r8
 80167e2:	4630      	mov	r0, r6
 80167e4:	f7ff ff2a 	bl	801663c <swapfunc>
 80167e8:	e7d6      	b.n	8016798 <qsort+0xec>
 80167ea:	463b      	mov	r3, r7
 80167ec:	4622      	mov	r2, r4
 80167ee:	4641      	mov	r1, r8
 80167f0:	9801      	ldr	r0, [sp, #4]
 80167f2:	f7ff ff23 	bl	801663c <swapfunc>
 80167f6:	e7e8      	b.n	80167ca <qsort+0x11e>
 80167f8:	d109      	bne.n	801680e <qsort+0x162>
 80167fa:	b9f7      	cbnz	r7, 801683a <qsort+0x18e>
 80167fc:	682b      	ldr	r3, [r5, #0]
 80167fe:	f8d9 2000 	ldr.w	r2, [r9]
 8016802:	602a      	str	r2, [r5, #0]
 8016804:	f8c9 3000 	str.w	r3, [r9]
 8016808:	eba9 0904 	sub.w	r9, r9, r4
 801680c:	2301      	movs	r3, #1
 801680e:	9d02      	ldr	r5, [sp, #8]
 8016810:	45a8      	cmp	r8, r5
 8016812:	d820      	bhi.n	8016856 <qsort+0x1aa>
 8016814:	9303      	str	r3, [sp, #12]
 8016816:	4631      	mov	r1, r6
 8016818:	9b00      	ldr	r3, [sp, #0]
 801681a:	4628      	mov	r0, r5
 801681c:	4798      	blx	r3
 801681e:	1b2b      	subs	r3, r5, r4
 8016820:	2800      	cmp	r0, #0
 8016822:	9302      	str	r3, [sp, #8]
 8016824:	9b03      	ldr	r3, [sp, #12]
 8016826:	dae7      	bge.n	80167f8 <qsort+0x14c>
 8016828:	b977      	cbnz	r7, 8016848 <qsort+0x19c>
 801682a:	f8d8 3000 	ldr.w	r3, [r8]
 801682e:	682a      	ldr	r2, [r5, #0]
 8016830:	f8c8 2000 	str.w	r2, [r8]
 8016834:	602b      	str	r3, [r5, #0]
 8016836:	9d02      	ldr	r5, [sp, #8]
 8016838:	e7ca      	b.n	80167d0 <qsort+0x124>
 801683a:	463b      	mov	r3, r7
 801683c:	4622      	mov	r2, r4
 801683e:	4649      	mov	r1, r9
 8016840:	4628      	mov	r0, r5
 8016842:	f7ff fefb 	bl	801663c <swapfunc>
 8016846:	e7df      	b.n	8016808 <qsort+0x15c>
 8016848:	463b      	mov	r3, r7
 801684a:	4622      	mov	r2, r4
 801684c:	4629      	mov	r1, r5
 801684e:	4640      	mov	r0, r8
 8016850:	f7ff fef4 	bl	801663c <swapfunc>
 8016854:	e7ef      	b.n	8016836 <qsort+0x18a>
 8016856:	fb04 6a0a 	mla	sl, r4, sl, r6
 801685a:	bb03      	cbnz	r3, 801689e <qsort+0x1f2>
 801685c:	45d3      	cmp	fp, sl
 801685e:	f4bf af3c 	bcs.w	80166da <qsort+0x2e>
 8016862:	465d      	mov	r5, fp
 8016864:	e017      	b.n	8016896 <qsort+0x1ea>
 8016866:	463b      	mov	r3, r7
 8016868:	4622      	mov	r2, r4
 801686a:	4641      	mov	r1, r8
 801686c:	4628      	mov	r0, r5
 801686e:	f7ff fee5 	bl	801663c <swapfunc>
 8016872:	e00f      	b.n	8016894 <qsort+0x1e8>
 8016874:	eba5 0804 	sub.w	r8, r5, r4
 8016878:	4629      	mov	r1, r5
 801687a:	4640      	mov	r0, r8
 801687c:	9b00      	ldr	r3, [sp, #0]
 801687e:	4798      	blx	r3
 8016880:	2800      	cmp	r0, #0
 8016882:	dd0a      	ble.n	801689a <qsort+0x1ee>
 8016884:	2f00      	cmp	r7, #0
 8016886:	d1ee      	bne.n	8016866 <qsort+0x1ba>
 8016888:	682b      	ldr	r3, [r5, #0]
 801688a:	f8d8 2000 	ldr.w	r2, [r8]
 801688e:	602a      	str	r2, [r5, #0]
 8016890:	f8c8 3000 	str.w	r3, [r8]
 8016894:	4645      	mov	r5, r8
 8016896:	42ae      	cmp	r6, r5
 8016898:	d3ec      	bcc.n	8016874 <qsort+0x1c8>
 801689a:	44a3      	add	fp, r4
 801689c:	e7de      	b.n	801685c <qsort+0x1b0>
 801689e:	9b01      	ldr	r3, [sp, #4]
 80168a0:	eba8 0b03 	sub.w	fp, r8, r3
 80168a4:	1b9a      	subs	r2, r3, r6
 80168a6:	455a      	cmp	r2, fp
 80168a8:	bfa8      	it	ge
 80168aa:	465a      	movge	r2, fp
 80168ac:	b12a      	cbz	r2, 80168ba <qsort+0x20e>
 80168ae:	463b      	mov	r3, r7
 80168b0:	eba8 0102 	sub.w	r1, r8, r2
 80168b4:	4630      	mov	r0, r6
 80168b6:	f7ff fec1 	bl	801663c <swapfunc>
 80168ba:	ebaa 0209 	sub.w	r2, sl, r9
 80168be:	eba9 0505 	sub.w	r5, r9, r5
 80168c2:	1b12      	subs	r2, r2, r4
 80168c4:	42aa      	cmp	r2, r5
 80168c6:	bf28      	it	cs
 80168c8:	462a      	movcs	r2, r5
 80168ca:	b12a      	cbz	r2, 80168d8 <qsort+0x22c>
 80168cc:	463b      	mov	r3, r7
 80168ce:	ebaa 0102 	sub.w	r1, sl, r2
 80168d2:	4640      	mov	r0, r8
 80168d4:	f7ff feb2 	bl	801663c <swapfunc>
 80168d8:	455c      	cmp	r4, fp
 80168da:	d206      	bcs.n	80168ea <qsort+0x23e>
 80168dc:	fbbb f1f4 	udiv	r1, fp, r4
 80168e0:	9b00      	ldr	r3, [sp, #0]
 80168e2:	4622      	mov	r2, r4
 80168e4:	4630      	mov	r0, r6
 80168e6:	f7ff fee1 	bl	80166ac <qsort>
 80168ea:	42a5      	cmp	r5, r4
 80168ec:	f67f aef5 	bls.w	80166da <qsort+0x2e>
 80168f0:	ebaa 0605 	sub.w	r6, sl, r5
 80168f4:	fbb5 faf4 	udiv	sl, r5, r4
 80168f8:	e6df      	b.n	80166ba <qsort+0xe>

080168fa <lflush>:
 80168fa:	8983      	ldrh	r3, [r0, #12]
 80168fc:	f003 0309 	and.w	r3, r3, #9
 8016900:	2b09      	cmp	r3, #9
 8016902:	d101      	bne.n	8016908 <lflush+0xe>
 8016904:	f7fe b980 	b.w	8014c08 <fflush>
 8016908:	2000      	movs	r0, #0
 801690a:	4770      	bx	lr

0801690c <__srefill_r>:
 801690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801690e:	460c      	mov	r4, r1
 8016910:	4605      	mov	r5, r0
 8016912:	b118      	cbz	r0, 801691c <__srefill_r+0x10>
 8016914:	6983      	ldr	r3, [r0, #24]
 8016916:	b90b      	cbnz	r3, 801691c <__srefill_r+0x10>
 8016918:	f7fe f9c8 	bl	8014cac <__sinit>
 801691c:	4b3c      	ldr	r3, [pc, #240]	; (8016a10 <__srefill_r+0x104>)
 801691e:	429c      	cmp	r4, r3
 8016920:	d10a      	bne.n	8016938 <__srefill_r+0x2c>
 8016922:	686c      	ldr	r4, [r5, #4]
 8016924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016928:	2300      	movs	r3, #0
 801692a:	6063      	str	r3, [r4, #4]
 801692c:	b293      	uxth	r3, r2
 801692e:	069e      	lsls	r6, r3, #26
 8016930:	d50c      	bpl.n	801694c <__srefill_r+0x40>
 8016932:	f04f 30ff 	mov.w	r0, #4294967295
 8016936:	e067      	b.n	8016a08 <__srefill_r+0xfc>
 8016938:	4b36      	ldr	r3, [pc, #216]	; (8016a14 <__srefill_r+0x108>)
 801693a:	429c      	cmp	r4, r3
 801693c:	d101      	bne.n	8016942 <__srefill_r+0x36>
 801693e:	68ac      	ldr	r4, [r5, #8]
 8016940:	e7f0      	b.n	8016924 <__srefill_r+0x18>
 8016942:	4b35      	ldr	r3, [pc, #212]	; (8016a18 <__srefill_r+0x10c>)
 8016944:	429c      	cmp	r4, r3
 8016946:	bf08      	it	eq
 8016948:	68ec      	ldreq	r4, [r5, #12]
 801694a:	e7eb      	b.n	8016924 <__srefill_r+0x18>
 801694c:	0758      	lsls	r0, r3, #29
 801694e:	d449      	bmi.n	80169e4 <__srefill_r+0xd8>
 8016950:	06d9      	lsls	r1, r3, #27
 8016952:	d405      	bmi.n	8016960 <__srefill_r+0x54>
 8016954:	2309      	movs	r3, #9
 8016956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801695a:	602b      	str	r3, [r5, #0]
 801695c:	81a2      	strh	r2, [r4, #12]
 801695e:	e7e8      	b.n	8016932 <__srefill_r+0x26>
 8016960:	071a      	lsls	r2, r3, #28
 8016962:	d50b      	bpl.n	801697c <__srefill_r+0x70>
 8016964:	4621      	mov	r1, r4
 8016966:	4628      	mov	r0, r5
 8016968:	f7fe f924 	bl	8014bb4 <_fflush_r>
 801696c:	2800      	cmp	r0, #0
 801696e:	d1e0      	bne.n	8016932 <__srefill_r+0x26>
 8016970:	89a3      	ldrh	r3, [r4, #12]
 8016972:	60a0      	str	r0, [r4, #8]
 8016974:	f023 0308 	bic.w	r3, r3, #8
 8016978:	81a3      	strh	r3, [r4, #12]
 801697a:	61a0      	str	r0, [r4, #24]
 801697c:	89a3      	ldrh	r3, [r4, #12]
 801697e:	f043 0304 	orr.w	r3, r3, #4
 8016982:	81a3      	strh	r3, [r4, #12]
 8016984:	6923      	ldr	r3, [r4, #16]
 8016986:	b91b      	cbnz	r3, 8016990 <__srefill_r+0x84>
 8016988:	4621      	mov	r1, r4
 801698a:	4628      	mov	r0, r5
 801698c:	f7fe fa7c 	bl	8014e88 <__smakebuf_r>
 8016990:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8016994:	b2be      	uxth	r6, r7
 8016996:	07b3      	lsls	r3, r6, #30
 8016998:	d00f      	beq.n	80169ba <__srefill_r+0xae>
 801699a:	2301      	movs	r3, #1
 801699c:	81a3      	strh	r3, [r4, #12]
 801699e:	4b1f      	ldr	r3, [pc, #124]	; (8016a1c <__srefill_r+0x110>)
 80169a0:	491f      	ldr	r1, [pc, #124]	; (8016a20 <__srefill_r+0x114>)
 80169a2:	6818      	ldr	r0, [r3, #0]
 80169a4:	f006 0609 	and.w	r6, r6, #9
 80169a8:	f7fe f9ec 	bl	8014d84 <_fwalk>
 80169ac:	2e09      	cmp	r6, #9
 80169ae:	81a7      	strh	r7, [r4, #12]
 80169b0:	d103      	bne.n	80169ba <__srefill_r+0xae>
 80169b2:	4621      	mov	r1, r4
 80169b4:	4628      	mov	r0, r5
 80169b6:	f7fe f877 	bl	8014aa8 <__sflush_r>
 80169ba:	6922      	ldr	r2, [r4, #16]
 80169bc:	6022      	str	r2, [r4, #0]
 80169be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80169c0:	6963      	ldr	r3, [r4, #20]
 80169c2:	6a21      	ldr	r1, [r4, #32]
 80169c4:	4628      	mov	r0, r5
 80169c6:	47b0      	blx	r6
 80169c8:	2800      	cmp	r0, #0
 80169ca:	6060      	str	r0, [r4, #4]
 80169cc:	dc1d      	bgt.n	8016a0a <__srefill_r+0xfe>
 80169ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169d2:	bf17      	itett	ne
 80169d4:	2200      	movne	r2, #0
 80169d6:	f043 0320 	orreq.w	r3, r3, #32
 80169da:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80169de:	6062      	strne	r2, [r4, #4]
 80169e0:	81a3      	strh	r3, [r4, #12]
 80169e2:	e7a6      	b.n	8016932 <__srefill_r+0x26>
 80169e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80169e6:	2900      	cmp	r1, #0
 80169e8:	d0cc      	beq.n	8016984 <__srefill_r+0x78>
 80169ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80169ee:	4299      	cmp	r1, r3
 80169f0:	d002      	beq.n	80169f8 <__srefill_r+0xec>
 80169f2:	4628      	mov	r0, r5
 80169f4:	f7fe fa9c 	bl	8014f30 <_free_r>
 80169f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80169fa:	6063      	str	r3, [r4, #4]
 80169fc:	2000      	movs	r0, #0
 80169fe:	6360      	str	r0, [r4, #52]	; 0x34
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d0bf      	beq.n	8016984 <__srefill_r+0x78>
 8016a04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016a06:	6023      	str	r3, [r4, #0]
 8016a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a0a:	2000      	movs	r0, #0
 8016a0c:	e7fc      	b.n	8016a08 <__srefill_r+0xfc>
 8016a0e:	bf00      	nop
 8016a10:	0801a2e8 	.word	0x0801a2e8
 8016a14:	0801a308 	.word	0x0801a308
 8016a18:	0801a2c8 	.word	0x0801a2c8
 8016a1c:	0801a328 	.word	0x0801a328
 8016a20:	080168fb 	.word	0x080168fb

08016a24 <_sbrk_r>:
 8016a24:	b538      	push	{r3, r4, r5, lr}
 8016a26:	4c06      	ldr	r4, [pc, #24]	; (8016a40 <_sbrk_r+0x1c>)
 8016a28:	2300      	movs	r3, #0
 8016a2a:	4605      	mov	r5, r0
 8016a2c:	4608      	mov	r0, r1
 8016a2e:	6023      	str	r3, [r4, #0]
 8016a30:	f7f7 fac2 	bl	800dfb8 <_sbrk>
 8016a34:	1c43      	adds	r3, r0, #1
 8016a36:	d102      	bne.n	8016a3e <_sbrk_r+0x1a>
 8016a38:	6823      	ldr	r3, [r4, #0]
 8016a3a:	b103      	cbz	r3, 8016a3e <_sbrk_r+0x1a>
 8016a3c:	602b      	str	r3, [r5, #0]
 8016a3e:	bd38      	pop	{r3, r4, r5, pc}
 8016a40:	20008f4c 	.word	0x20008f4c

08016a44 <iscanf>:
 8016a44:	b40f      	push	{r0, r1, r2, r3}
 8016a46:	4b0a      	ldr	r3, [pc, #40]	; (8016a70 <iscanf+0x2c>)
 8016a48:	b513      	push	{r0, r1, r4, lr}
 8016a4a:	681c      	ldr	r4, [r3, #0]
 8016a4c:	b124      	cbz	r4, 8016a58 <iscanf+0x14>
 8016a4e:	69a3      	ldr	r3, [r4, #24]
 8016a50:	b913      	cbnz	r3, 8016a58 <iscanf+0x14>
 8016a52:	4620      	mov	r0, r4
 8016a54:	f7fe f92a 	bl	8014cac <__sinit>
 8016a58:	ab05      	add	r3, sp, #20
 8016a5a:	9a04      	ldr	r2, [sp, #16]
 8016a5c:	6861      	ldr	r1, [r4, #4]
 8016a5e:	9301      	str	r3, [sp, #4]
 8016a60:	4620      	mov	r0, r4
 8016a62:	f7ff f9f9 	bl	8015e58 <_vfiscanf_r>
 8016a66:	b002      	add	sp, #8
 8016a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a6c:	b004      	add	sp, #16
 8016a6e:	4770      	bx	lr
 8016a70:	2000003c 	.word	0x2000003c

08016a74 <__sccl>:
 8016a74:	b570      	push	{r4, r5, r6, lr}
 8016a76:	780b      	ldrb	r3, [r1, #0]
 8016a78:	2b5e      	cmp	r3, #94	; 0x5e
 8016a7a:	bf13      	iteet	ne
 8016a7c:	1c4a      	addne	r2, r1, #1
 8016a7e:	1c8a      	addeq	r2, r1, #2
 8016a80:	784b      	ldrbeq	r3, [r1, #1]
 8016a82:	2100      	movne	r1, #0
 8016a84:	bf08      	it	eq
 8016a86:	2101      	moveq	r1, #1
 8016a88:	1e44      	subs	r4, r0, #1
 8016a8a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8016a8e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8016a92:	42ac      	cmp	r4, r5
 8016a94:	d1fb      	bne.n	8016a8e <__sccl+0x1a>
 8016a96:	b913      	cbnz	r3, 8016a9e <__sccl+0x2a>
 8016a98:	3a01      	subs	r2, #1
 8016a9a:	4610      	mov	r0, r2
 8016a9c:	bd70      	pop	{r4, r5, r6, pc}
 8016a9e:	f081 0401 	eor.w	r4, r1, #1
 8016aa2:	54c4      	strb	r4, [r0, r3]
 8016aa4:	1c51      	adds	r1, r2, #1
 8016aa6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016aaa:	2d2d      	cmp	r5, #45	; 0x2d
 8016aac:	f101 36ff 	add.w	r6, r1, #4294967295
 8016ab0:	460a      	mov	r2, r1
 8016ab2:	d006      	beq.n	8016ac2 <__sccl+0x4e>
 8016ab4:	2d5d      	cmp	r5, #93	; 0x5d
 8016ab6:	d0f0      	beq.n	8016a9a <__sccl+0x26>
 8016ab8:	b90d      	cbnz	r5, 8016abe <__sccl+0x4a>
 8016aba:	4632      	mov	r2, r6
 8016abc:	e7ed      	b.n	8016a9a <__sccl+0x26>
 8016abe:	462b      	mov	r3, r5
 8016ac0:	e7ef      	b.n	8016aa2 <__sccl+0x2e>
 8016ac2:	780e      	ldrb	r6, [r1, #0]
 8016ac4:	2e5d      	cmp	r6, #93	; 0x5d
 8016ac6:	d0fa      	beq.n	8016abe <__sccl+0x4a>
 8016ac8:	42b3      	cmp	r3, r6
 8016aca:	dcf8      	bgt.n	8016abe <__sccl+0x4a>
 8016acc:	3301      	adds	r3, #1
 8016ace:	429e      	cmp	r6, r3
 8016ad0:	54c4      	strb	r4, [r0, r3]
 8016ad2:	dcfb      	bgt.n	8016acc <__sccl+0x58>
 8016ad4:	3102      	adds	r1, #2
 8016ad6:	e7e6      	b.n	8016aa6 <__sccl+0x32>

08016ad8 <setbuf>:
 8016ad8:	2900      	cmp	r1, #0
 8016ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ade:	bf0c      	ite	eq
 8016ae0:	2202      	moveq	r2, #2
 8016ae2:	2200      	movne	r2, #0
 8016ae4:	f000 b800 	b.w	8016ae8 <setvbuf>

08016ae8 <setvbuf>:
 8016ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016aec:	461d      	mov	r5, r3
 8016aee:	4b51      	ldr	r3, [pc, #324]	; (8016c34 <setvbuf+0x14c>)
 8016af0:	681e      	ldr	r6, [r3, #0]
 8016af2:	4604      	mov	r4, r0
 8016af4:	460f      	mov	r7, r1
 8016af6:	4690      	mov	r8, r2
 8016af8:	b126      	cbz	r6, 8016b04 <setvbuf+0x1c>
 8016afa:	69b3      	ldr	r3, [r6, #24]
 8016afc:	b913      	cbnz	r3, 8016b04 <setvbuf+0x1c>
 8016afe:	4630      	mov	r0, r6
 8016b00:	f7fe f8d4 	bl	8014cac <__sinit>
 8016b04:	4b4c      	ldr	r3, [pc, #304]	; (8016c38 <setvbuf+0x150>)
 8016b06:	429c      	cmp	r4, r3
 8016b08:	d152      	bne.n	8016bb0 <setvbuf+0xc8>
 8016b0a:	6874      	ldr	r4, [r6, #4]
 8016b0c:	f1b8 0f02 	cmp.w	r8, #2
 8016b10:	d006      	beq.n	8016b20 <setvbuf+0x38>
 8016b12:	f1b8 0f01 	cmp.w	r8, #1
 8016b16:	f200 8089 	bhi.w	8016c2c <setvbuf+0x144>
 8016b1a:	2d00      	cmp	r5, #0
 8016b1c:	f2c0 8086 	blt.w	8016c2c <setvbuf+0x144>
 8016b20:	4621      	mov	r1, r4
 8016b22:	4630      	mov	r0, r6
 8016b24:	f7fe f846 	bl	8014bb4 <_fflush_r>
 8016b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b2a:	b141      	cbz	r1, 8016b3e <setvbuf+0x56>
 8016b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b30:	4299      	cmp	r1, r3
 8016b32:	d002      	beq.n	8016b3a <setvbuf+0x52>
 8016b34:	4630      	mov	r0, r6
 8016b36:	f7fe f9fb 	bl	8014f30 <_free_r>
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8016b3e:	2300      	movs	r3, #0
 8016b40:	61a3      	str	r3, [r4, #24]
 8016b42:	6063      	str	r3, [r4, #4]
 8016b44:	89a3      	ldrh	r3, [r4, #12]
 8016b46:	061b      	lsls	r3, r3, #24
 8016b48:	d503      	bpl.n	8016b52 <setvbuf+0x6a>
 8016b4a:	6921      	ldr	r1, [r4, #16]
 8016b4c:	4630      	mov	r0, r6
 8016b4e:	f7fe f9ef 	bl	8014f30 <_free_r>
 8016b52:	89a3      	ldrh	r3, [r4, #12]
 8016b54:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8016b58:	f023 0303 	bic.w	r3, r3, #3
 8016b5c:	f1b8 0f02 	cmp.w	r8, #2
 8016b60:	81a3      	strh	r3, [r4, #12]
 8016b62:	d05d      	beq.n	8016c20 <setvbuf+0x138>
 8016b64:	ab01      	add	r3, sp, #4
 8016b66:	466a      	mov	r2, sp
 8016b68:	4621      	mov	r1, r4
 8016b6a:	4630      	mov	r0, r6
 8016b6c:	f7fe f968 	bl	8014e40 <__swhatbuf_r>
 8016b70:	89a3      	ldrh	r3, [r4, #12]
 8016b72:	4318      	orrs	r0, r3
 8016b74:	81a0      	strh	r0, [r4, #12]
 8016b76:	bb2d      	cbnz	r5, 8016bc4 <setvbuf+0xdc>
 8016b78:	9d00      	ldr	r5, [sp, #0]
 8016b7a:	4628      	mov	r0, r5
 8016b7c:	f002 fb54 	bl	8019228 <malloc>
 8016b80:	4607      	mov	r7, r0
 8016b82:	2800      	cmp	r0, #0
 8016b84:	d14e      	bne.n	8016c24 <setvbuf+0x13c>
 8016b86:	f8dd 9000 	ldr.w	r9, [sp]
 8016b8a:	45a9      	cmp	r9, r5
 8016b8c:	d13c      	bne.n	8016c08 <setvbuf+0x120>
 8016b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8016b92:	89a3      	ldrh	r3, [r4, #12]
 8016b94:	f043 0302 	orr.w	r3, r3, #2
 8016b98:	81a3      	strh	r3, [r4, #12]
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	60a3      	str	r3, [r4, #8]
 8016b9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016ba2:	6023      	str	r3, [r4, #0]
 8016ba4:	6123      	str	r3, [r4, #16]
 8016ba6:	2301      	movs	r3, #1
 8016ba8:	6163      	str	r3, [r4, #20]
 8016baa:	b003      	add	sp, #12
 8016bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bb0:	4b22      	ldr	r3, [pc, #136]	; (8016c3c <setvbuf+0x154>)
 8016bb2:	429c      	cmp	r4, r3
 8016bb4:	d101      	bne.n	8016bba <setvbuf+0xd2>
 8016bb6:	68b4      	ldr	r4, [r6, #8]
 8016bb8:	e7a8      	b.n	8016b0c <setvbuf+0x24>
 8016bba:	4b21      	ldr	r3, [pc, #132]	; (8016c40 <setvbuf+0x158>)
 8016bbc:	429c      	cmp	r4, r3
 8016bbe:	bf08      	it	eq
 8016bc0:	68f4      	ldreq	r4, [r6, #12]
 8016bc2:	e7a3      	b.n	8016b0c <setvbuf+0x24>
 8016bc4:	2f00      	cmp	r7, #0
 8016bc6:	d0d8      	beq.n	8016b7a <setvbuf+0x92>
 8016bc8:	69b3      	ldr	r3, [r6, #24]
 8016bca:	b913      	cbnz	r3, 8016bd2 <setvbuf+0xea>
 8016bcc:	4630      	mov	r0, r6
 8016bce:	f7fe f86d 	bl	8014cac <__sinit>
 8016bd2:	f1b8 0f01 	cmp.w	r8, #1
 8016bd6:	bf08      	it	eq
 8016bd8:	89a3      	ldrheq	r3, [r4, #12]
 8016bda:	6027      	str	r7, [r4, #0]
 8016bdc:	bf04      	itt	eq
 8016bde:	f043 0301 	orreq.w	r3, r3, #1
 8016be2:	81a3      	strheq	r3, [r4, #12]
 8016be4:	89a3      	ldrh	r3, [r4, #12]
 8016be6:	f013 0008 	ands.w	r0, r3, #8
 8016bea:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8016bee:	d01b      	beq.n	8016c28 <setvbuf+0x140>
 8016bf0:	f013 0001 	ands.w	r0, r3, #1
 8016bf4:	bf18      	it	ne
 8016bf6:	426d      	negne	r5, r5
 8016bf8:	f04f 0300 	mov.w	r3, #0
 8016bfc:	bf1d      	ittte	ne
 8016bfe:	60a3      	strne	r3, [r4, #8]
 8016c00:	61a5      	strne	r5, [r4, #24]
 8016c02:	4618      	movne	r0, r3
 8016c04:	60a5      	streq	r5, [r4, #8]
 8016c06:	e7d0      	b.n	8016baa <setvbuf+0xc2>
 8016c08:	4648      	mov	r0, r9
 8016c0a:	f002 fb0d 	bl	8019228 <malloc>
 8016c0e:	4607      	mov	r7, r0
 8016c10:	2800      	cmp	r0, #0
 8016c12:	d0bc      	beq.n	8016b8e <setvbuf+0xa6>
 8016c14:	89a3      	ldrh	r3, [r4, #12]
 8016c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c1a:	81a3      	strh	r3, [r4, #12]
 8016c1c:	464d      	mov	r5, r9
 8016c1e:	e7d3      	b.n	8016bc8 <setvbuf+0xe0>
 8016c20:	2000      	movs	r0, #0
 8016c22:	e7b6      	b.n	8016b92 <setvbuf+0xaa>
 8016c24:	46a9      	mov	r9, r5
 8016c26:	e7f5      	b.n	8016c14 <setvbuf+0x12c>
 8016c28:	60a0      	str	r0, [r4, #8]
 8016c2a:	e7be      	b.n	8016baa <setvbuf+0xc2>
 8016c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8016c30:	e7bb      	b.n	8016baa <setvbuf+0xc2>
 8016c32:	bf00      	nop
 8016c34:	2000003c 	.word	0x2000003c
 8016c38:	0801a2e8 	.word	0x0801a2e8
 8016c3c:	0801a308 	.word	0x0801a308
 8016c40:	0801a2c8 	.word	0x0801a2c8

08016c44 <nanf>:
 8016c44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016c4c <nanf+0x8>
 8016c48:	4770      	bx	lr
 8016c4a:	bf00      	nop
 8016c4c:	7fc00000 	.word	0x7fc00000

08016c50 <siprintf>:
 8016c50:	b40e      	push	{r1, r2, r3}
 8016c52:	b500      	push	{lr}
 8016c54:	b09c      	sub	sp, #112	; 0x70
 8016c56:	ab1d      	add	r3, sp, #116	; 0x74
 8016c58:	9002      	str	r0, [sp, #8]
 8016c5a:	9006      	str	r0, [sp, #24]
 8016c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c60:	4809      	ldr	r0, [pc, #36]	; (8016c88 <siprintf+0x38>)
 8016c62:	9107      	str	r1, [sp, #28]
 8016c64:	9104      	str	r1, [sp, #16]
 8016c66:	4909      	ldr	r1, [pc, #36]	; (8016c8c <siprintf+0x3c>)
 8016c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c6c:	9105      	str	r1, [sp, #20]
 8016c6e:	6800      	ldr	r0, [r0, #0]
 8016c70:	9301      	str	r3, [sp, #4]
 8016c72:	a902      	add	r1, sp, #8
 8016c74:	f002 ff9a 	bl	8019bac <_svfiprintf_r>
 8016c78:	9b02      	ldr	r3, [sp, #8]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	701a      	strb	r2, [r3, #0]
 8016c7e:	b01c      	add	sp, #112	; 0x70
 8016c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c84:	b003      	add	sp, #12
 8016c86:	4770      	bx	lr
 8016c88:	2000003c 	.word	0x2000003c
 8016c8c:	ffff0208 	.word	0xffff0208

08016c90 <__sread>:
 8016c90:	b510      	push	{r4, lr}
 8016c92:	460c      	mov	r4, r1
 8016c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c98:	f003 f8b6 	bl	8019e08 <_read_r>
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	bfab      	itete	ge
 8016ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8016ca4:	181b      	addge	r3, r3, r0
 8016ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016caa:	bfac      	ite	ge
 8016cac:	6563      	strge	r3, [r4, #84]	; 0x54
 8016cae:	81a3      	strhlt	r3, [r4, #12]
 8016cb0:	bd10      	pop	{r4, pc}

08016cb2 <__swrite>:
 8016cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cb6:	461f      	mov	r7, r3
 8016cb8:	898b      	ldrh	r3, [r1, #12]
 8016cba:	05db      	lsls	r3, r3, #23
 8016cbc:	4605      	mov	r5, r0
 8016cbe:	460c      	mov	r4, r1
 8016cc0:	4616      	mov	r6, r2
 8016cc2:	d505      	bpl.n	8016cd0 <__swrite+0x1e>
 8016cc4:	2302      	movs	r3, #2
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ccc:	f002 fa9a 	bl	8019204 <_lseek_r>
 8016cd0:	89a3      	ldrh	r3, [r4, #12]
 8016cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016cda:	81a3      	strh	r3, [r4, #12]
 8016cdc:	4632      	mov	r2, r6
 8016cde:	463b      	mov	r3, r7
 8016ce0:	4628      	mov	r0, r5
 8016ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ce6:	f001 b84f 	b.w	8017d88 <_write_r>

08016cea <__sseek>:
 8016cea:	b510      	push	{r4, lr}
 8016cec:	460c      	mov	r4, r1
 8016cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cf2:	f002 fa87 	bl	8019204 <_lseek_r>
 8016cf6:	1c43      	adds	r3, r0, #1
 8016cf8:	89a3      	ldrh	r3, [r4, #12]
 8016cfa:	bf15      	itete	ne
 8016cfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8016cfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016d02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016d06:	81a3      	strheq	r3, [r4, #12]
 8016d08:	bf18      	it	ne
 8016d0a:	81a3      	strhne	r3, [r4, #12]
 8016d0c:	bd10      	pop	{r4, pc}

08016d0e <__sclose>:
 8016d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d12:	f001 b8b9 	b.w	8017e88 <_close_r>

08016d16 <sulp>:
 8016d16:	b570      	push	{r4, r5, r6, lr}
 8016d18:	4604      	mov	r4, r0
 8016d1a:	460d      	mov	r5, r1
 8016d1c:	ec45 4b10 	vmov	d0, r4, r5
 8016d20:	4616      	mov	r6, r2
 8016d22:	f002 fd81 	bl	8019828 <__ulp>
 8016d26:	ec51 0b10 	vmov	r0, r1, d0
 8016d2a:	b17e      	cbz	r6, 8016d4c <sulp+0x36>
 8016d2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016d30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	dd09      	ble.n	8016d4c <sulp+0x36>
 8016d38:	051b      	lsls	r3, r3, #20
 8016d3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016d3e:	2400      	movs	r4, #0
 8016d40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016d44:	4622      	mov	r2, r4
 8016d46:	462b      	mov	r3, r5
 8016d48:	f7f1 fb8e 	bl	8008468 <__aeabi_dmul>
 8016d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016d50 <_strtod_l>:
 8016d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d54:	461f      	mov	r7, r3
 8016d56:	b0a1      	sub	sp, #132	; 0x84
 8016d58:	2300      	movs	r3, #0
 8016d5a:	4681      	mov	r9, r0
 8016d5c:	4638      	mov	r0, r7
 8016d5e:	460e      	mov	r6, r1
 8016d60:	9217      	str	r2, [sp, #92]	; 0x5c
 8016d62:	931c      	str	r3, [sp, #112]	; 0x70
 8016d64:	f002 fa3e 	bl	80191e4 <__localeconv_l>
 8016d68:	4680      	mov	r8, r0
 8016d6a:	6800      	ldr	r0, [r0, #0]
 8016d6c:	f7f1 f968 	bl	8008040 <strlen>
 8016d70:	f04f 0a00 	mov.w	sl, #0
 8016d74:	4604      	mov	r4, r0
 8016d76:	f04f 0b00 	mov.w	fp, #0
 8016d7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8016d7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d7e:	781a      	ldrb	r2, [r3, #0]
 8016d80:	2a0d      	cmp	r2, #13
 8016d82:	d832      	bhi.n	8016dea <_strtod_l+0x9a>
 8016d84:	2a09      	cmp	r2, #9
 8016d86:	d236      	bcs.n	8016df6 <_strtod_l+0xa6>
 8016d88:	2a00      	cmp	r2, #0
 8016d8a:	d03e      	beq.n	8016e0a <_strtod_l+0xba>
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	930d      	str	r3, [sp, #52]	; 0x34
 8016d90:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016d92:	782b      	ldrb	r3, [r5, #0]
 8016d94:	2b30      	cmp	r3, #48	; 0x30
 8016d96:	f040 80ac 	bne.w	8016ef2 <_strtod_l+0x1a2>
 8016d9a:	786b      	ldrb	r3, [r5, #1]
 8016d9c:	2b58      	cmp	r3, #88	; 0x58
 8016d9e:	d001      	beq.n	8016da4 <_strtod_l+0x54>
 8016da0:	2b78      	cmp	r3, #120	; 0x78
 8016da2:	d167      	bne.n	8016e74 <_strtod_l+0x124>
 8016da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016da6:	9301      	str	r3, [sp, #4]
 8016da8:	ab1c      	add	r3, sp, #112	; 0x70
 8016daa:	9300      	str	r3, [sp, #0]
 8016dac:	9702      	str	r7, [sp, #8]
 8016dae:	ab1d      	add	r3, sp, #116	; 0x74
 8016db0:	4a88      	ldr	r2, [pc, #544]	; (8016fd4 <_strtod_l+0x284>)
 8016db2:	a91b      	add	r1, sp, #108	; 0x6c
 8016db4:	4648      	mov	r0, r9
 8016db6:	f001 ff1c 	bl	8018bf2 <__gethex>
 8016dba:	f010 0407 	ands.w	r4, r0, #7
 8016dbe:	4606      	mov	r6, r0
 8016dc0:	d005      	beq.n	8016dce <_strtod_l+0x7e>
 8016dc2:	2c06      	cmp	r4, #6
 8016dc4:	d12b      	bne.n	8016e1e <_strtod_l+0xce>
 8016dc6:	3501      	adds	r5, #1
 8016dc8:	2300      	movs	r3, #0
 8016dca:	951b      	str	r5, [sp, #108]	; 0x6c
 8016dcc:	930d      	str	r3, [sp, #52]	; 0x34
 8016dce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	f040 859a 	bne.w	801790a <_strtod_l+0xbba>
 8016dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016dd8:	b1e3      	cbz	r3, 8016e14 <_strtod_l+0xc4>
 8016dda:	4652      	mov	r2, sl
 8016ddc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016de0:	ec43 2b10 	vmov	d0, r2, r3
 8016de4:	b021      	add	sp, #132	; 0x84
 8016de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dea:	2a2b      	cmp	r2, #43	; 0x2b
 8016dec:	d015      	beq.n	8016e1a <_strtod_l+0xca>
 8016dee:	2a2d      	cmp	r2, #45	; 0x2d
 8016df0:	d004      	beq.n	8016dfc <_strtod_l+0xac>
 8016df2:	2a20      	cmp	r2, #32
 8016df4:	d1ca      	bne.n	8016d8c <_strtod_l+0x3c>
 8016df6:	3301      	adds	r3, #1
 8016df8:	931b      	str	r3, [sp, #108]	; 0x6c
 8016dfa:	e7bf      	b.n	8016d7c <_strtod_l+0x2c>
 8016dfc:	2201      	movs	r2, #1
 8016dfe:	920d      	str	r2, [sp, #52]	; 0x34
 8016e00:	1c5a      	adds	r2, r3, #1
 8016e02:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e04:	785b      	ldrb	r3, [r3, #1]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d1c2      	bne.n	8016d90 <_strtod_l+0x40>
 8016e0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e0c:	961b      	str	r6, [sp, #108]	; 0x6c
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	f040 8579 	bne.w	8017906 <_strtod_l+0xbb6>
 8016e14:	4652      	mov	r2, sl
 8016e16:	465b      	mov	r3, fp
 8016e18:	e7e2      	b.n	8016de0 <_strtod_l+0x90>
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	e7ef      	b.n	8016dfe <_strtod_l+0xae>
 8016e1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016e20:	b13a      	cbz	r2, 8016e32 <_strtod_l+0xe2>
 8016e22:	2135      	movs	r1, #53	; 0x35
 8016e24:	a81e      	add	r0, sp, #120	; 0x78
 8016e26:	f002 fdf7 	bl	8019a18 <__copybits>
 8016e2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e2c:	4648      	mov	r0, r9
 8016e2e:	f002 fa64 	bl	80192fa <_Bfree>
 8016e32:	3c01      	subs	r4, #1
 8016e34:	2c04      	cmp	r4, #4
 8016e36:	d806      	bhi.n	8016e46 <_strtod_l+0xf6>
 8016e38:	e8df f004 	tbb	[pc, r4]
 8016e3c:	1714030a 	.word	0x1714030a
 8016e40:	0a          	.byte	0x0a
 8016e41:	00          	.byte	0x00
 8016e42:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016e46:	0730      	lsls	r0, r6, #28
 8016e48:	d5c1      	bpl.n	8016dce <_strtod_l+0x7e>
 8016e4a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016e4e:	e7be      	b.n	8016dce <_strtod_l+0x7e>
 8016e50:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016e54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016e56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016e5a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016e5e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016e62:	e7f0      	b.n	8016e46 <_strtod_l+0xf6>
 8016e64:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016fd8 <_strtod_l+0x288>
 8016e68:	e7ed      	b.n	8016e46 <_strtod_l+0xf6>
 8016e6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016e6e:	f04f 3aff 	mov.w	sl, #4294967295
 8016e72:	e7e8      	b.n	8016e46 <_strtod_l+0xf6>
 8016e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e76:	1c5a      	adds	r2, r3, #1
 8016e78:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e7a:	785b      	ldrb	r3, [r3, #1]
 8016e7c:	2b30      	cmp	r3, #48	; 0x30
 8016e7e:	d0f9      	beq.n	8016e74 <_strtod_l+0x124>
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d0a4      	beq.n	8016dce <_strtod_l+0x7e>
 8016e84:	2301      	movs	r3, #1
 8016e86:	2500      	movs	r5, #0
 8016e88:	9306      	str	r3, [sp, #24]
 8016e8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e8c:	9308      	str	r3, [sp, #32]
 8016e8e:	9507      	str	r5, [sp, #28]
 8016e90:	9505      	str	r5, [sp, #20]
 8016e92:	220a      	movs	r2, #10
 8016e94:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016e96:	7807      	ldrb	r7, [r0, #0]
 8016e98:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016e9c:	b2d9      	uxtb	r1, r3
 8016e9e:	2909      	cmp	r1, #9
 8016ea0:	d929      	bls.n	8016ef6 <_strtod_l+0x1a6>
 8016ea2:	4622      	mov	r2, r4
 8016ea4:	f8d8 1000 	ldr.w	r1, [r8]
 8016ea8:	f002 ffc0 	bl	8019e2c <strncmp>
 8016eac:	2800      	cmp	r0, #0
 8016eae:	d031      	beq.n	8016f14 <_strtod_l+0x1c4>
 8016eb0:	2000      	movs	r0, #0
 8016eb2:	9c05      	ldr	r4, [sp, #20]
 8016eb4:	9004      	str	r0, [sp, #16]
 8016eb6:	463b      	mov	r3, r7
 8016eb8:	4602      	mov	r2, r0
 8016eba:	2b65      	cmp	r3, #101	; 0x65
 8016ebc:	d001      	beq.n	8016ec2 <_strtod_l+0x172>
 8016ebe:	2b45      	cmp	r3, #69	; 0x45
 8016ec0:	d114      	bne.n	8016eec <_strtod_l+0x19c>
 8016ec2:	b924      	cbnz	r4, 8016ece <_strtod_l+0x17e>
 8016ec4:	b910      	cbnz	r0, 8016ecc <_strtod_l+0x17c>
 8016ec6:	9b06      	ldr	r3, [sp, #24]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d09e      	beq.n	8016e0a <_strtod_l+0xba>
 8016ecc:	2400      	movs	r4, #0
 8016ece:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016ed0:	1c73      	adds	r3, r6, #1
 8016ed2:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ed4:	7873      	ldrb	r3, [r6, #1]
 8016ed6:	2b2b      	cmp	r3, #43	; 0x2b
 8016ed8:	d078      	beq.n	8016fcc <_strtod_l+0x27c>
 8016eda:	2b2d      	cmp	r3, #45	; 0x2d
 8016edc:	d070      	beq.n	8016fc0 <_strtod_l+0x270>
 8016ede:	f04f 0c00 	mov.w	ip, #0
 8016ee2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016ee6:	2f09      	cmp	r7, #9
 8016ee8:	d97c      	bls.n	8016fe4 <_strtod_l+0x294>
 8016eea:	961b      	str	r6, [sp, #108]	; 0x6c
 8016eec:	f04f 0e00 	mov.w	lr, #0
 8016ef0:	e09a      	b.n	8017028 <_strtod_l+0x2d8>
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	e7c7      	b.n	8016e86 <_strtod_l+0x136>
 8016ef6:	9905      	ldr	r1, [sp, #20]
 8016ef8:	2908      	cmp	r1, #8
 8016efa:	bfdd      	ittte	le
 8016efc:	9907      	ldrle	r1, [sp, #28]
 8016efe:	fb02 3301 	mlale	r3, r2, r1, r3
 8016f02:	9307      	strle	r3, [sp, #28]
 8016f04:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016f08:	9b05      	ldr	r3, [sp, #20]
 8016f0a:	3001      	adds	r0, #1
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	9305      	str	r3, [sp, #20]
 8016f10:	901b      	str	r0, [sp, #108]	; 0x6c
 8016f12:	e7bf      	b.n	8016e94 <_strtod_l+0x144>
 8016f14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f16:	191a      	adds	r2, r3, r4
 8016f18:	921b      	str	r2, [sp, #108]	; 0x6c
 8016f1a:	9a05      	ldr	r2, [sp, #20]
 8016f1c:	5d1b      	ldrb	r3, [r3, r4]
 8016f1e:	2a00      	cmp	r2, #0
 8016f20:	d037      	beq.n	8016f92 <_strtod_l+0x242>
 8016f22:	9c05      	ldr	r4, [sp, #20]
 8016f24:	4602      	mov	r2, r0
 8016f26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016f2a:	2909      	cmp	r1, #9
 8016f2c:	d913      	bls.n	8016f56 <_strtod_l+0x206>
 8016f2e:	2101      	movs	r1, #1
 8016f30:	9104      	str	r1, [sp, #16]
 8016f32:	e7c2      	b.n	8016eba <_strtod_l+0x16a>
 8016f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f36:	1c5a      	adds	r2, r3, #1
 8016f38:	921b      	str	r2, [sp, #108]	; 0x6c
 8016f3a:	785b      	ldrb	r3, [r3, #1]
 8016f3c:	3001      	adds	r0, #1
 8016f3e:	2b30      	cmp	r3, #48	; 0x30
 8016f40:	d0f8      	beq.n	8016f34 <_strtod_l+0x1e4>
 8016f42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016f46:	2a08      	cmp	r2, #8
 8016f48:	f200 84e4 	bhi.w	8017914 <_strtod_l+0xbc4>
 8016f4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016f4e:	9208      	str	r2, [sp, #32]
 8016f50:	4602      	mov	r2, r0
 8016f52:	2000      	movs	r0, #0
 8016f54:	4604      	mov	r4, r0
 8016f56:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016f5a:	f100 0101 	add.w	r1, r0, #1
 8016f5e:	d012      	beq.n	8016f86 <_strtod_l+0x236>
 8016f60:	440a      	add	r2, r1
 8016f62:	eb00 0c04 	add.w	ip, r0, r4
 8016f66:	4621      	mov	r1, r4
 8016f68:	270a      	movs	r7, #10
 8016f6a:	458c      	cmp	ip, r1
 8016f6c:	d113      	bne.n	8016f96 <_strtod_l+0x246>
 8016f6e:	1821      	adds	r1, r4, r0
 8016f70:	2908      	cmp	r1, #8
 8016f72:	f104 0401 	add.w	r4, r4, #1
 8016f76:	4404      	add	r4, r0
 8016f78:	dc19      	bgt.n	8016fae <_strtod_l+0x25e>
 8016f7a:	9b07      	ldr	r3, [sp, #28]
 8016f7c:	210a      	movs	r1, #10
 8016f7e:	fb01 e303 	mla	r3, r1, r3, lr
 8016f82:	9307      	str	r3, [sp, #28]
 8016f84:	2100      	movs	r1, #0
 8016f86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f88:	1c58      	adds	r0, r3, #1
 8016f8a:	901b      	str	r0, [sp, #108]	; 0x6c
 8016f8c:	785b      	ldrb	r3, [r3, #1]
 8016f8e:	4608      	mov	r0, r1
 8016f90:	e7c9      	b.n	8016f26 <_strtod_l+0x1d6>
 8016f92:	9805      	ldr	r0, [sp, #20]
 8016f94:	e7d3      	b.n	8016f3e <_strtod_l+0x1ee>
 8016f96:	2908      	cmp	r1, #8
 8016f98:	f101 0101 	add.w	r1, r1, #1
 8016f9c:	dc03      	bgt.n	8016fa6 <_strtod_l+0x256>
 8016f9e:	9b07      	ldr	r3, [sp, #28]
 8016fa0:	437b      	muls	r3, r7
 8016fa2:	9307      	str	r3, [sp, #28]
 8016fa4:	e7e1      	b.n	8016f6a <_strtod_l+0x21a>
 8016fa6:	2910      	cmp	r1, #16
 8016fa8:	bfd8      	it	le
 8016faa:	437d      	mulle	r5, r7
 8016fac:	e7dd      	b.n	8016f6a <_strtod_l+0x21a>
 8016fae:	2c10      	cmp	r4, #16
 8016fb0:	bfdc      	itt	le
 8016fb2:	210a      	movle	r1, #10
 8016fb4:	fb01 e505 	mlale	r5, r1, r5, lr
 8016fb8:	e7e4      	b.n	8016f84 <_strtod_l+0x234>
 8016fba:	2301      	movs	r3, #1
 8016fbc:	9304      	str	r3, [sp, #16]
 8016fbe:	e781      	b.n	8016ec4 <_strtod_l+0x174>
 8016fc0:	f04f 0c01 	mov.w	ip, #1
 8016fc4:	1cb3      	adds	r3, r6, #2
 8016fc6:	931b      	str	r3, [sp, #108]	; 0x6c
 8016fc8:	78b3      	ldrb	r3, [r6, #2]
 8016fca:	e78a      	b.n	8016ee2 <_strtod_l+0x192>
 8016fcc:	f04f 0c00 	mov.w	ip, #0
 8016fd0:	e7f8      	b.n	8016fc4 <_strtod_l+0x274>
 8016fd2:	bf00      	nop
 8016fd4:	0801a390 	.word	0x0801a390
 8016fd8:	7ff00000 	.word	0x7ff00000
 8016fdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fde:	1c5f      	adds	r7, r3, #1
 8016fe0:	971b      	str	r7, [sp, #108]	; 0x6c
 8016fe2:	785b      	ldrb	r3, [r3, #1]
 8016fe4:	2b30      	cmp	r3, #48	; 0x30
 8016fe6:	d0f9      	beq.n	8016fdc <_strtod_l+0x28c>
 8016fe8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016fec:	2f08      	cmp	r7, #8
 8016fee:	f63f af7d 	bhi.w	8016eec <_strtod_l+0x19c>
 8016ff2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016ff6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ff8:	930a      	str	r3, [sp, #40]	; 0x28
 8016ffa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ffc:	1c5f      	adds	r7, r3, #1
 8016ffe:	971b      	str	r7, [sp, #108]	; 0x6c
 8017000:	785b      	ldrb	r3, [r3, #1]
 8017002:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8017006:	f1b8 0f09 	cmp.w	r8, #9
 801700a:	d937      	bls.n	801707c <_strtod_l+0x32c>
 801700c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801700e:	1a7f      	subs	r7, r7, r1
 8017010:	2f08      	cmp	r7, #8
 8017012:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8017016:	dc37      	bgt.n	8017088 <_strtod_l+0x338>
 8017018:	45be      	cmp	lr, r7
 801701a:	bfa8      	it	ge
 801701c:	46be      	movge	lr, r7
 801701e:	f1bc 0f00 	cmp.w	ip, #0
 8017022:	d001      	beq.n	8017028 <_strtod_l+0x2d8>
 8017024:	f1ce 0e00 	rsb	lr, lr, #0
 8017028:	2c00      	cmp	r4, #0
 801702a:	d151      	bne.n	80170d0 <_strtod_l+0x380>
 801702c:	2800      	cmp	r0, #0
 801702e:	f47f aece 	bne.w	8016dce <_strtod_l+0x7e>
 8017032:	9a06      	ldr	r2, [sp, #24]
 8017034:	2a00      	cmp	r2, #0
 8017036:	f47f aeca 	bne.w	8016dce <_strtod_l+0x7e>
 801703a:	9a04      	ldr	r2, [sp, #16]
 801703c:	2a00      	cmp	r2, #0
 801703e:	f47f aee4 	bne.w	8016e0a <_strtod_l+0xba>
 8017042:	2b4e      	cmp	r3, #78	; 0x4e
 8017044:	d027      	beq.n	8017096 <_strtod_l+0x346>
 8017046:	dc21      	bgt.n	801708c <_strtod_l+0x33c>
 8017048:	2b49      	cmp	r3, #73	; 0x49
 801704a:	f47f aede 	bne.w	8016e0a <_strtod_l+0xba>
 801704e:	49a0      	ldr	r1, [pc, #640]	; (80172d0 <_strtod_l+0x580>)
 8017050:	a81b      	add	r0, sp, #108	; 0x6c
 8017052:	f002 f801 	bl	8019058 <__match>
 8017056:	2800      	cmp	r0, #0
 8017058:	f43f aed7 	beq.w	8016e0a <_strtod_l+0xba>
 801705c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801705e:	499d      	ldr	r1, [pc, #628]	; (80172d4 <_strtod_l+0x584>)
 8017060:	3b01      	subs	r3, #1
 8017062:	a81b      	add	r0, sp, #108	; 0x6c
 8017064:	931b      	str	r3, [sp, #108]	; 0x6c
 8017066:	f001 fff7 	bl	8019058 <__match>
 801706a:	b910      	cbnz	r0, 8017072 <_strtod_l+0x322>
 801706c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801706e:	3301      	adds	r3, #1
 8017070:	931b      	str	r3, [sp, #108]	; 0x6c
 8017072:	f8df b274 	ldr.w	fp, [pc, #628]	; 80172e8 <_strtod_l+0x598>
 8017076:	f04f 0a00 	mov.w	sl, #0
 801707a:	e6a8      	b.n	8016dce <_strtod_l+0x7e>
 801707c:	210a      	movs	r1, #10
 801707e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017082:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017086:	e7b8      	b.n	8016ffa <_strtod_l+0x2aa>
 8017088:	46be      	mov	lr, r7
 801708a:	e7c8      	b.n	801701e <_strtod_l+0x2ce>
 801708c:	2b69      	cmp	r3, #105	; 0x69
 801708e:	d0de      	beq.n	801704e <_strtod_l+0x2fe>
 8017090:	2b6e      	cmp	r3, #110	; 0x6e
 8017092:	f47f aeba 	bne.w	8016e0a <_strtod_l+0xba>
 8017096:	4990      	ldr	r1, [pc, #576]	; (80172d8 <_strtod_l+0x588>)
 8017098:	a81b      	add	r0, sp, #108	; 0x6c
 801709a:	f001 ffdd 	bl	8019058 <__match>
 801709e:	2800      	cmp	r0, #0
 80170a0:	f43f aeb3 	beq.w	8016e0a <_strtod_l+0xba>
 80170a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170a6:	781b      	ldrb	r3, [r3, #0]
 80170a8:	2b28      	cmp	r3, #40	; 0x28
 80170aa:	d10e      	bne.n	80170ca <_strtod_l+0x37a>
 80170ac:	aa1e      	add	r2, sp, #120	; 0x78
 80170ae:	498b      	ldr	r1, [pc, #556]	; (80172dc <_strtod_l+0x58c>)
 80170b0:	a81b      	add	r0, sp, #108	; 0x6c
 80170b2:	f001 ffe5 	bl	8019080 <__hexnan>
 80170b6:	2805      	cmp	r0, #5
 80170b8:	d107      	bne.n	80170ca <_strtod_l+0x37a>
 80170ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80170bc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80170c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80170c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80170c8:	e681      	b.n	8016dce <_strtod_l+0x7e>
 80170ca:	f8df b224 	ldr.w	fp, [pc, #548]	; 80172f0 <_strtod_l+0x5a0>
 80170ce:	e7d2      	b.n	8017076 <_strtod_l+0x326>
 80170d0:	ebae 0302 	sub.w	r3, lr, r2
 80170d4:	9306      	str	r3, [sp, #24]
 80170d6:	9b05      	ldr	r3, [sp, #20]
 80170d8:	9807      	ldr	r0, [sp, #28]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	bf08      	it	eq
 80170de:	4623      	moveq	r3, r4
 80170e0:	2c10      	cmp	r4, #16
 80170e2:	9305      	str	r3, [sp, #20]
 80170e4:	46a0      	mov	r8, r4
 80170e6:	bfa8      	it	ge
 80170e8:	f04f 0810 	movge.w	r8, #16
 80170ec:	f7f1 f942 	bl	8008374 <__aeabi_ui2d>
 80170f0:	2c09      	cmp	r4, #9
 80170f2:	4682      	mov	sl, r0
 80170f4:	468b      	mov	fp, r1
 80170f6:	dc13      	bgt.n	8017120 <_strtod_l+0x3d0>
 80170f8:	9b06      	ldr	r3, [sp, #24]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	f43f ae67 	beq.w	8016dce <_strtod_l+0x7e>
 8017100:	9b06      	ldr	r3, [sp, #24]
 8017102:	dd7a      	ble.n	80171fa <_strtod_l+0x4aa>
 8017104:	2b16      	cmp	r3, #22
 8017106:	dc61      	bgt.n	80171cc <_strtod_l+0x47c>
 8017108:	4a75      	ldr	r2, [pc, #468]	; (80172e0 <_strtod_l+0x590>)
 801710a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801710e:	e9de 0100 	ldrd	r0, r1, [lr]
 8017112:	4652      	mov	r2, sl
 8017114:	465b      	mov	r3, fp
 8017116:	f7f1 f9a7 	bl	8008468 <__aeabi_dmul>
 801711a:	4682      	mov	sl, r0
 801711c:	468b      	mov	fp, r1
 801711e:	e656      	b.n	8016dce <_strtod_l+0x7e>
 8017120:	4b6f      	ldr	r3, [pc, #444]	; (80172e0 <_strtod_l+0x590>)
 8017122:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017126:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801712a:	f7f1 f99d 	bl	8008468 <__aeabi_dmul>
 801712e:	4606      	mov	r6, r0
 8017130:	4628      	mov	r0, r5
 8017132:	460f      	mov	r7, r1
 8017134:	f7f1 f91e 	bl	8008374 <__aeabi_ui2d>
 8017138:	4602      	mov	r2, r0
 801713a:	460b      	mov	r3, r1
 801713c:	4630      	mov	r0, r6
 801713e:	4639      	mov	r1, r7
 8017140:	f7f0 ffdc 	bl	80080fc <__adddf3>
 8017144:	2c0f      	cmp	r4, #15
 8017146:	4682      	mov	sl, r0
 8017148:	468b      	mov	fp, r1
 801714a:	ddd5      	ble.n	80170f8 <_strtod_l+0x3a8>
 801714c:	9b06      	ldr	r3, [sp, #24]
 801714e:	eba4 0808 	sub.w	r8, r4, r8
 8017152:	4498      	add	r8, r3
 8017154:	f1b8 0f00 	cmp.w	r8, #0
 8017158:	f340 8096 	ble.w	8017288 <_strtod_l+0x538>
 801715c:	f018 030f 	ands.w	r3, r8, #15
 8017160:	d00a      	beq.n	8017178 <_strtod_l+0x428>
 8017162:	495f      	ldr	r1, [pc, #380]	; (80172e0 <_strtod_l+0x590>)
 8017164:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017168:	4652      	mov	r2, sl
 801716a:	465b      	mov	r3, fp
 801716c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017170:	f7f1 f97a 	bl	8008468 <__aeabi_dmul>
 8017174:	4682      	mov	sl, r0
 8017176:	468b      	mov	fp, r1
 8017178:	f038 080f 	bics.w	r8, r8, #15
 801717c:	d073      	beq.n	8017266 <_strtod_l+0x516>
 801717e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017182:	dd47      	ble.n	8017214 <_strtod_l+0x4c4>
 8017184:	2400      	movs	r4, #0
 8017186:	46a0      	mov	r8, r4
 8017188:	9407      	str	r4, [sp, #28]
 801718a:	9405      	str	r4, [sp, #20]
 801718c:	2322      	movs	r3, #34	; 0x22
 801718e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80172e8 <_strtod_l+0x598>
 8017192:	f8c9 3000 	str.w	r3, [r9]
 8017196:	f04f 0a00 	mov.w	sl, #0
 801719a:	9b07      	ldr	r3, [sp, #28]
 801719c:	2b00      	cmp	r3, #0
 801719e:	f43f ae16 	beq.w	8016dce <_strtod_l+0x7e>
 80171a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80171a4:	4648      	mov	r0, r9
 80171a6:	f002 f8a8 	bl	80192fa <_Bfree>
 80171aa:	9905      	ldr	r1, [sp, #20]
 80171ac:	4648      	mov	r0, r9
 80171ae:	f002 f8a4 	bl	80192fa <_Bfree>
 80171b2:	4641      	mov	r1, r8
 80171b4:	4648      	mov	r0, r9
 80171b6:	f002 f8a0 	bl	80192fa <_Bfree>
 80171ba:	9907      	ldr	r1, [sp, #28]
 80171bc:	4648      	mov	r0, r9
 80171be:	f002 f89c 	bl	80192fa <_Bfree>
 80171c2:	4621      	mov	r1, r4
 80171c4:	4648      	mov	r0, r9
 80171c6:	f002 f898 	bl	80192fa <_Bfree>
 80171ca:	e600      	b.n	8016dce <_strtod_l+0x7e>
 80171cc:	9a06      	ldr	r2, [sp, #24]
 80171ce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80171d2:	4293      	cmp	r3, r2
 80171d4:	dbba      	blt.n	801714c <_strtod_l+0x3fc>
 80171d6:	4d42      	ldr	r5, [pc, #264]	; (80172e0 <_strtod_l+0x590>)
 80171d8:	f1c4 040f 	rsb	r4, r4, #15
 80171dc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80171e0:	4652      	mov	r2, sl
 80171e2:	465b      	mov	r3, fp
 80171e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80171e8:	f7f1 f93e 	bl	8008468 <__aeabi_dmul>
 80171ec:	9b06      	ldr	r3, [sp, #24]
 80171ee:	1b1c      	subs	r4, r3, r4
 80171f0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80171f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80171f8:	e78d      	b.n	8017116 <_strtod_l+0x3c6>
 80171fa:	f113 0f16 	cmn.w	r3, #22
 80171fe:	dba5      	blt.n	801714c <_strtod_l+0x3fc>
 8017200:	4a37      	ldr	r2, [pc, #220]	; (80172e0 <_strtod_l+0x590>)
 8017202:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8017206:	e9d2 2300 	ldrd	r2, r3, [r2]
 801720a:	4650      	mov	r0, sl
 801720c:	4659      	mov	r1, fp
 801720e:	f7f1 fa55 	bl	80086bc <__aeabi_ddiv>
 8017212:	e782      	b.n	801711a <_strtod_l+0x3ca>
 8017214:	2300      	movs	r3, #0
 8017216:	4e33      	ldr	r6, [pc, #204]	; (80172e4 <_strtod_l+0x594>)
 8017218:	ea4f 1828 	mov.w	r8, r8, asr #4
 801721c:	4650      	mov	r0, sl
 801721e:	4659      	mov	r1, fp
 8017220:	461d      	mov	r5, r3
 8017222:	f1b8 0f01 	cmp.w	r8, #1
 8017226:	dc21      	bgt.n	801726c <_strtod_l+0x51c>
 8017228:	b10b      	cbz	r3, 801722e <_strtod_l+0x4de>
 801722a:	4682      	mov	sl, r0
 801722c:	468b      	mov	fp, r1
 801722e:	4b2d      	ldr	r3, [pc, #180]	; (80172e4 <_strtod_l+0x594>)
 8017230:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017234:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017238:	4652      	mov	r2, sl
 801723a:	465b      	mov	r3, fp
 801723c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017240:	f7f1 f912 	bl	8008468 <__aeabi_dmul>
 8017244:	4b28      	ldr	r3, [pc, #160]	; (80172e8 <_strtod_l+0x598>)
 8017246:	460a      	mov	r2, r1
 8017248:	400b      	ands	r3, r1
 801724a:	4928      	ldr	r1, [pc, #160]	; (80172ec <_strtod_l+0x59c>)
 801724c:	428b      	cmp	r3, r1
 801724e:	4682      	mov	sl, r0
 8017250:	d898      	bhi.n	8017184 <_strtod_l+0x434>
 8017252:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017256:	428b      	cmp	r3, r1
 8017258:	bf86      	itte	hi
 801725a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80172f4 <_strtod_l+0x5a4>
 801725e:	f04f 3aff 	movhi.w	sl, #4294967295
 8017262:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017266:	2300      	movs	r3, #0
 8017268:	9304      	str	r3, [sp, #16]
 801726a:	e077      	b.n	801735c <_strtod_l+0x60c>
 801726c:	f018 0f01 	tst.w	r8, #1
 8017270:	d006      	beq.n	8017280 <_strtod_l+0x530>
 8017272:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8017276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801727a:	f7f1 f8f5 	bl	8008468 <__aeabi_dmul>
 801727e:	2301      	movs	r3, #1
 8017280:	3501      	adds	r5, #1
 8017282:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017286:	e7cc      	b.n	8017222 <_strtod_l+0x4d2>
 8017288:	d0ed      	beq.n	8017266 <_strtod_l+0x516>
 801728a:	f1c8 0800 	rsb	r8, r8, #0
 801728e:	f018 020f 	ands.w	r2, r8, #15
 8017292:	d00a      	beq.n	80172aa <_strtod_l+0x55a>
 8017294:	4b12      	ldr	r3, [pc, #72]	; (80172e0 <_strtod_l+0x590>)
 8017296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801729a:	4650      	mov	r0, sl
 801729c:	4659      	mov	r1, fp
 801729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a2:	f7f1 fa0b 	bl	80086bc <__aeabi_ddiv>
 80172a6:	4682      	mov	sl, r0
 80172a8:	468b      	mov	fp, r1
 80172aa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80172ae:	d0da      	beq.n	8017266 <_strtod_l+0x516>
 80172b0:	f1b8 0f1f 	cmp.w	r8, #31
 80172b4:	dd20      	ble.n	80172f8 <_strtod_l+0x5a8>
 80172b6:	2400      	movs	r4, #0
 80172b8:	46a0      	mov	r8, r4
 80172ba:	9407      	str	r4, [sp, #28]
 80172bc:	9405      	str	r4, [sp, #20]
 80172be:	2322      	movs	r3, #34	; 0x22
 80172c0:	f04f 0a00 	mov.w	sl, #0
 80172c4:	f04f 0b00 	mov.w	fp, #0
 80172c8:	f8c9 3000 	str.w	r3, [r9]
 80172cc:	e765      	b.n	801719a <_strtod_l+0x44a>
 80172ce:	bf00      	nop
 80172d0:	0801a342 	.word	0x0801a342
 80172d4:	0801a3e3 	.word	0x0801a3e3
 80172d8:	0801a34a 	.word	0x0801a34a
 80172dc:	0801a3a4 	.word	0x0801a3a4
 80172e0:	0801a420 	.word	0x0801a420
 80172e4:	0801a3f8 	.word	0x0801a3f8
 80172e8:	7ff00000 	.word	0x7ff00000
 80172ec:	7ca00000 	.word	0x7ca00000
 80172f0:	fff80000 	.word	0xfff80000
 80172f4:	7fefffff 	.word	0x7fefffff
 80172f8:	f018 0310 	ands.w	r3, r8, #16
 80172fc:	bf18      	it	ne
 80172fe:	236a      	movne	r3, #106	; 0x6a
 8017300:	4da0      	ldr	r5, [pc, #640]	; (8017584 <_strtod_l+0x834>)
 8017302:	9304      	str	r3, [sp, #16]
 8017304:	4650      	mov	r0, sl
 8017306:	4659      	mov	r1, fp
 8017308:	2300      	movs	r3, #0
 801730a:	f1b8 0f00 	cmp.w	r8, #0
 801730e:	f300 810a 	bgt.w	8017526 <_strtod_l+0x7d6>
 8017312:	b10b      	cbz	r3, 8017318 <_strtod_l+0x5c8>
 8017314:	4682      	mov	sl, r0
 8017316:	468b      	mov	fp, r1
 8017318:	9b04      	ldr	r3, [sp, #16]
 801731a:	b1bb      	cbz	r3, 801734c <_strtod_l+0x5fc>
 801731c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017320:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017324:	2b00      	cmp	r3, #0
 8017326:	4659      	mov	r1, fp
 8017328:	dd10      	ble.n	801734c <_strtod_l+0x5fc>
 801732a:	2b1f      	cmp	r3, #31
 801732c:	f340 8107 	ble.w	801753e <_strtod_l+0x7ee>
 8017330:	2b34      	cmp	r3, #52	; 0x34
 8017332:	bfde      	ittt	le
 8017334:	3b20      	suble	r3, #32
 8017336:	f04f 32ff 	movle.w	r2, #4294967295
 801733a:	fa02 f303 	lslle.w	r3, r2, r3
 801733e:	f04f 0a00 	mov.w	sl, #0
 8017342:	bfcc      	ite	gt
 8017344:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017348:	ea03 0b01 	andle.w	fp, r3, r1
 801734c:	2200      	movs	r2, #0
 801734e:	2300      	movs	r3, #0
 8017350:	4650      	mov	r0, sl
 8017352:	4659      	mov	r1, fp
 8017354:	f7f1 faf0 	bl	8008938 <__aeabi_dcmpeq>
 8017358:	2800      	cmp	r0, #0
 801735a:	d1ac      	bne.n	80172b6 <_strtod_l+0x566>
 801735c:	9b07      	ldr	r3, [sp, #28]
 801735e:	9300      	str	r3, [sp, #0]
 8017360:	9a05      	ldr	r2, [sp, #20]
 8017362:	9908      	ldr	r1, [sp, #32]
 8017364:	4623      	mov	r3, r4
 8017366:	4648      	mov	r0, r9
 8017368:	f002 f819 	bl	801939e <__s2b>
 801736c:	9007      	str	r0, [sp, #28]
 801736e:	2800      	cmp	r0, #0
 8017370:	f43f af08 	beq.w	8017184 <_strtod_l+0x434>
 8017374:	9a06      	ldr	r2, [sp, #24]
 8017376:	9b06      	ldr	r3, [sp, #24]
 8017378:	2a00      	cmp	r2, #0
 801737a:	f1c3 0300 	rsb	r3, r3, #0
 801737e:	bfa8      	it	ge
 8017380:	2300      	movge	r3, #0
 8017382:	930e      	str	r3, [sp, #56]	; 0x38
 8017384:	2400      	movs	r4, #0
 8017386:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801738a:	9316      	str	r3, [sp, #88]	; 0x58
 801738c:	46a0      	mov	r8, r4
 801738e:	9b07      	ldr	r3, [sp, #28]
 8017390:	4648      	mov	r0, r9
 8017392:	6859      	ldr	r1, [r3, #4]
 8017394:	f001 ff7d 	bl	8019292 <_Balloc>
 8017398:	9005      	str	r0, [sp, #20]
 801739a:	2800      	cmp	r0, #0
 801739c:	f43f aef6 	beq.w	801718c <_strtod_l+0x43c>
 80173a0:	9b07      	ldr	r3, [sp, #28]
 80173a2:	691a      	ldr	r2, [r3, #16]
 80173a4:	3202      	adds	r2, #2
 80173a6:	f103 010c 	add.w	r1, r3, #12
 80173aa:	0092      	lsls	r2, r2, #2
 80173ac:	300c      	adds	r0, #12
 80173ae:	f7fd fdab 	bl	8014f08 <memcpy>
 80173b2:	aa1e      	add	r2, sp, #120	; 0x78
 80173b4:	a91d      	add	r1, sp, #116	; 0x74
 80173b6:	ec4b ab10 	vmov	d0, sl, fp
 80173ba:	4648      	mov	r0, r9
 80173bc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80173c0:	f002 faa8 	bl	8019914 <__d2b>
 80173c4:	901c      	str	r0, [sp, #112]	; 0x70
 80173c6:	2800      	cmp	r0, #0
 80173c8:	f43f aee0 	beq.w	801718c <_strtod_l+0x43c>
 80173cc:	2101      	movs	r1, #1
 80173ce:	4648      	mov	r0, r9
 80173d0:	f002 f871 	bl	80194b6 <__i2b>
 80173d4:	4680      	mov	r8, r0
 80173d6:	2800      	cmp	r0, #0
 80173d8:	f43f aed8 	beq.w	801718c <_strtod_l+0x43c>
 80173dc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80173de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80173e0:	2e00      	cmp	r6, #0
 80173e2:	bfab      	itete	ge
 80173e4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80173e6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80173e8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80173ea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80173ec:	bfac      	ite	ge
 80173ee:	18f7      	addge	r7, r6, r3
 80173f0:	1b9d      	sublt	r5, r3, r6
 80173f2:	9b04      	ldr	r3, [sp, #16]
 80173f4:	1af6      	subs	r6, r6, r3
 80173f6:	4416      	add	r6, r2
 80173f8:	4b63      	ldr	r3, [pc, #396]	; (8017588 <_strtod_l+0x838>)
 80173fa:	3e01      	subs	r6, #1
 80173fc:	429e      	cmp	r6, r3
 80173fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017402:	f280 80af 	bge.w	8017564 <_strtod_l+0x814>
 8017406:	1b9b      	subs	r3, r3, r6
 8017408:	2b1f      	cmp	r3, #31
 801740a:	eba2 0203 	sub.w	r2, r2, r3
 801740e:	f04f 0101 	mov.w	r1, #1
 8017412:	f300 809b 	bgt.w	801754c <_strtod_l+0x7fc>
 8017416:	fa01 f303 	lsl.w	r3, r1, r3
 801741a:	930f      	str	r3, [sp, #60]	; 0x3c
 801741c:	2300      	movs	r3, #0
 801741e:	930a      	str	r3, [sp, #40]	; 0x28
 8017420:	18be      	adds	r6, r7, r2
 8017422:	9b04      	ldr	r3, [sp, #16]
 8017424:	42b7      	cmp	r7, r6
 8017426:	4415      	add	r5, r2
 8017428:	441d      	add	r5, r3
 801742a:	463b      	mov	r3, r7
 801742c:	bfa8      	it	ge
 801742e:	4633      	movge	r3, r6
 8017430:	42ab      	cmp	r3, r5
 8017432:	bfa8      	it	ge
 8017434:	462b      	movge	r3, r5
 8017436:	2b00      	cmp	r3, #0
 8017438:	bfc2      	ittt	gt
 801743a:	1af6      	subgt	r6, r6, r3
 801743c:	1aed      	subgt	r5, r5, r3
 801743e:	1aff      	subgt	r7, r7, r3
 8017440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017442:	b1bb      	cbz	r3, 8017474 <_strtod_l+0x724>
 8017444:	4641      	mov	r1, r8
 8017446:	461a      	mov	r2, r3
 8017448:	4648      	mov	r0, r9
 801744a:	f002 f8d3 	bl	80195f4 <__pow5mult>
 801744e:	4680      	mov	r8, r0
 8017450:	2800      	cmp	r0, #0
 8017452:	f43f ae9b 	beq.w	801718c <_strtod_l+0x43c>
 8017456:	4601      	mov	r1, r0
 8017458:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801745a:	4648      	mov	r0, r9
 801745c:	f002 f834 	bl	80194c8 <__multiply>
 8017460:	900c      	str	r0, [sp, #48]	; 0x30
 8017462:	2800      	cmp	r0, #0
 8017464:	f43f ae92 	beq.w	801718c <_strtod_l+0x43c>
 8017468:	991c      	ldr	r1, [sp, #112]	; 0x70
 801746a:	4648      	mov	r0, r9
 801746c:	f001 ff45 	bl	80192fa <_Bfree>
 8017470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017472:	931c      	str	r3, [sp, #112]	; 0x70
 8017474:	2e00      	cmp	r6, #0
 8017476:	dc7a      	bgt.n	801756e <_strtod_l+0x81e>
 8017478:	9b06      	ldr	r3, [sp, #24]
 801747a:	2b00      	cmp	r3, #0
 801747c:	dd08      	ble.n	8017490 <_strtod_l+0x740>
 801747e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017480:	9905      	ldr	r1, [sp, #20]
 8017482:	4648      	mov	r0, r9
 8017484:	f002 f8b6 	bl	80195f4 <__pow5mult>
 8017488:	9005      	str	r0, [sp, #20]
 801748a:	2800      	cmp	r0, #0
 801748c:	f43f ae7e 	beq.w	801718c <_strtod_l+0x43c>
 8017490:	2d00      	cmp	r5, #0
 8017492:	dd08      	ble.n	80174a6 <_strtod_l+0x756>
 8017494:	462a      	mov	r2, r5
 8017496:	9905      	ldr	r1, [sp, #20]
 8017498:	4648      	mov	r0, r9
 801749a:	f002 f8f9 	bl	8019690 <__lshift>
 801749e:	9005      	str	r0, [sp, #20]
 80174a0:	2800      	cmp	r0, #0
 80174a2:	f43f ae73 	beq.w	801718c <_strtod_l+0x43c>
 80174a6:	2f00      	cmp	r7, #0
 80174a8:	dd08      	ble.n	80174bc <_strtod_l+0x76c>
 80174aa:	4641      	mov	r1, r8
 80174ac:	463a      	mov	r2, r7
 80174ae:	4648      	mov	r0, r9
 80174b0:	f002 f8ee 	bl	8019690 <__lshift>
 80174b4:	4680      	mov	r8, r0
 80174b6:	2800      	cmp	r0, #0
 80174b8:	f43f ae68 	beq.w	801718c <_strtod_l+0x43c>
 80174bc:	9a05      	ldr	r2, [sp, #20]
 80174be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80174c0:	4648      	mov	r0, r9
 80174c2:	f002 f953 	bl	801976c <__mdiff>
 80174c6:	4604      	mov	r4, r0
 80174c8:	2800      	cmp	r0, #0
 80174ca:	f43f ae5f 	beq.w	801718c <_strtod_l+0x43c>
 80174ce:	68c3      	ldr	r3, [r0, #12]
 80174d0:	930c      	str	r3, [sp, #48]	; 0x30
 80174d2:	2300      	movs	r3, #0
 80174d4:	60c3      	str	r3, [r0, #12]
 80174d6:	4641      	mov	r1, r8
 80174d8:	f002 f92e 	bl	8019738 <__mcmp>
 80174dc:	2800      	cmp	r0, #0
 80174de:	da55      	bge.n	801758c <_strtod_l+0x83c>
 80174e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174e2:	b9e3      	cbnz	r3, 801751e <_strtod_l+0x7ce>
 80174e4:	f1ba 0f00 	cmp.w	sl, #0
 80174e8:	d119      	bne.n	801751e <_strtod_l+0x7ce>
 80174ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174ee:	b9b3      	cbnz	r3, 801751e <_strtod_l+0x7ce>
 80174f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80174f4:	0d1b      	lsrs	r3, r3, #20
 80174f6:	051b      	lsls	r3, r3, #20
 80174f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80174fc:	d90f      	bls.n	801751e <_strtod_l+0x7ce>
 80174fe:	6963      	ldr	r3, [r4, #20]
 8017500:	b913      	cbnz	r3, 8017508 <_strtod_l+0x7b8>
 8017502:	6923      	ldr	r3, [r4, #16]
 8017504:	2b01      	cmp	r3, #1
 8017506:	dd0a      	ble.n	801751e <_strtod_l+0x7ce>
 8017508:	4621      	mov	r1, r4
 801750a:	2201      	movs	r2, #1
 801750c:	4648      	mov	r0, r9
 801750e:	f002 f8bf 	bl	8019690 <__lshift>
 8017512:	4641      	mov	r1, r8
 8017514:	4604      	mov	r4, r0
 8017516:	f002 f90f 	bl	8019738 <__mcmp>
 801751a:	2800      	cmp	r0, #0
 801751c:	dc67      	bgt.n	80175ee <_strtod_l+0x89e>
 801751e:	9b04      	ldr	r3, [sp, #16]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d171      	bne.n	8017608 <_strtod_l+0x8b8>
 8017524:	e63d      	b.n	80171a2 <_strtod_l+0x452>
 8017526:	f018 0f01 	tst.w	r8, #1
 801752a:	d004      	beq.n	8017536 <_strtod_l+0x7e6>
 801752c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017530:	f7f0 ff9a 	bl	8008468 <__aeabi_dmul>
 8017534:	2301      	movs	r3, #1
 8017536:	ea4f 0868 	mov.w	r8, r8, asr #1
 801753a:	3508      	adds	r5, #8
 801753c:	e6e5      	b.n	801730a <_strtod_l+0x5ba>
 801753e:	f04f 32ff 	mov.w	r2, #4294967295
 8017542:	fa02 f303 	lsl.w	r3, r2, r3
 8017546:	ea03 0a0a 	and.w	sl, r3, sl
 801754a:	e6ff      	b.n	801734c <_strtod_l+0x5fc>
 801754c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017550:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017554:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017558:	36e2      	adds	r6, #226	; 0xe2
 801755a:	fa01 f306 	lsl.w	r3, r1, r6
 801755e:	930a      	str	r3, [sp, #40]	; 0x28
 8017560:	910f      	str	r1, [sp, #60]	; 0x3c
 8017562:	e75d      	b.n	8017420 <_strtod_l+0x6d0>
 8017564:	2300      	movs	r3, #0
 8017566:	930a      	str	r3, [sp, #40]	; 0x28
 8017568:	2301      	movs	r3, #1
 801756a:	930f      	str	r3, [sp, #60]	; 0x3c
 801756c:	e758      	b.n	8017420 <_strtod_l+0x6d0>
 801756e:	4632      	mov	r2, r6
 8017570:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017572:	4648      	mov	r0, r9
 8017574:	f002 f88c 	bl	8019690 <__lshift>
 8017578:	901c      	str	r0, [sp, #112]	; 0x70
 801757a:	2800      	cmp	r0, #0
 801757c:	f47f af7c 	bne.w	8017478 <_strtod_l+0x728>
 8017580:	e604      	b.n	801718c <_strtod_l+0x43c>
 8017582:	bf00      	nop
 8017584:	0801a3b8 	.word	0x0801a3b8
 8017588:	fffffc02 	.word	0xfffffc02
 801758c:	465d      	mov	r5, fp
 801758e:	f040 8086 	bne.w	801769e <_strtod_l+0x94e>
 8017592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017594:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017598:	b32a      	cbz	r2, 80175e6 <_strtod_l+0x896>
 801759a:	4aaf      	ldr	r2, [pc, #700]	; (8017858 <_strtod_l+0xb08>)
 801759c:	4293      	cmp	r3, r2
 801759e:	d153      	bne.n	8017648 <_strtod_l+0x8f8>
 80175a0:	9b04      	ldr	r3, [sp, #16]
 80175a2:	4650      	mov	r0, sl
 80175a4:	b1d3      	cbz	r3, 80175dc <_strtod_l+0x88c>
 80175a6:	4aad      	ldr	r2, [pc, #692]	; (801785c <_strtod_l+0xb0c>)
 80175a8:	402a      	ands	r2, r5
 80175aa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80175ae:	f04f 31ff 	mov.w	r1, #4294967295
 80175b2:	d816      	bhi.n	80175e2 <_strtod_l+0x892>
 80175b4:	0d12      	lsrs	r2, r2, #20
 80175b6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80175ba:	fa01 f303 	lsl.w	r3, r1, r3
 80175be:	4298      	cmp	r0, r3
 80175c0:	d142      	bne.n	8017648 <_strtod_l+0x8f8>
 80175c2:	4ba7      	ldr	r3, [pc, #668]	; (8017860 <_strtod_l+0xb10>)
 80175c4:	429d      	cmp	r5, r3
 80175c6:	d102      	bne.n	80175ce <_strtod_l+0x87e>
 80175c8:	3001      	adds	r0, #1
 80175ca:	f43f addf 	beq.w	801718c <_strtod_l+0x43c>
 80175ce:	4ba3      	ldr	r3, [pc, #652]	; (801785c <_strtod_l+0xb0c>)
 80175d0:	402b      	ands	r3, r5
 80175d2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80175d6:	f04f 0a00 	mov.w	sl, #0
 80175da:	e7a0      	b.n	801751e <_strtod_l+0x7ce>
 80175dc:	f04f 33ff 	mov.w	r3, #4294967295
 80175e0:	e7ed      	b.n	80175be <_strtod_l+0x86e>
 80175e2:	460b      	mov	r3, r1
 80175e4:	e7eb      	b.n	80175be <_strtod_l+0x86e>
 80175e6:	bb7b      	cbnz	r3, 8017648 <_strtod_l+0x8f8>
 80175e8:	f1ba 0f00 	cmp.w	sl, #0
 80175ec:	d12c      	bne.n	8017648 <_strtod_l+0x8f8>
 80175ee:	9904      	ldr	r1, [sp, #16]
 80175f0:	4a9a      	ldr	r2, [pc, #616]	; (801785c <_strtod_l+0xb0c>)
 80175f2:	465b      	mov	r3, fp
 80175f4:	b1f1      	cbz	r1, 8017634 <_strtod_l+0x8e4>
 80175f6:	ea02 010b 	and.w	r1, r2, fp
 80175fa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80175fe:	dc19      	bgt.n	8017634 <_strtod_l+0x8e4>
 8017600:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017604:	f77f ae5b 	ble.w	80172be <_strtod_l+0x56e>
 8017608:	4a96      	ldr	r2, [pc, #600]	; (8017864 <_strtod_l+0xb14>)
 801760a:	2300      	movs	r3, #0
 801760c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017610:	4650      	mov	r0, sl
 8017612:	4659      	mov	r1, fp
 8017614:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017618:	f7f0 ff26 	bl	8008468 <__aeabi_dmul>
 801761c:	4682      	mov	sl, r0
 801761e:	468b      	mov	fp, r1
 8017620:	2900      	cmp	r1, #0
 8017622:	f47f adbe 	bne.w	80171a2 <_strtod_l+0x452>
 8017626:	2800      	cmp	r0, #0
 8017628:	f47f adbb 	bne.w	80171a2 <_strtod_l+0x452>
 801762c:	2322      	movs	r3, #34	; 0x22
 801762e:	f8c9 3000 	str.w	r3, [r9]
 8017632:	e5b6      	b.n	80171a2 <_strtod_l+0x452>
 8017634:	4013      	ands	r3, r2
 8017636:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801763a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801763e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017642:	f04f 3aff 	mov.w	sl, #4294967295
 8017646:	e76a      	b.n	801751e <_strtod_l+0x7ce>
 8017648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801764a:	b193      	cbz	r3, 8017672 <_strtod_l+0x922>
 801764c:	422b      	tst	r3, r5
 801764e:	f43f af66 	beq.w	801751e <_strtod_l+0x7ce>
 8017652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017654:	9a04      	ldr	r2, [sp, #16]
 8017656:	4650      	mov	r0, sl
 8017658:	4659      	mov	r1, fp
 801765a:	b173      	cbz	r3, 801767a <_strtod_l+0x92a>
 801765c:	f7ff fb5b 	bl	8016d16 <sulp>
 8017660:	4602      	mov	r2, r0
 8017662:	460b      	mov	r3, r1
 8017664:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017668:	f7f0 fd48 	bl	80080fc <__adddf3>
 801766c:	4682      	mov	sl, r0
 801766e:	468b      	mov	fp, r1
 8017670:	e755      	b.n	801751e <_strtod_l+0x7ce>
 8017672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017674:	ea13 0f0a 	tst.w	r3, sl
 8017678:	e7e9      	b.n	801764e <_strtod_l+0x8fe>
 801767a:	f7ff fb4c 	bl	8016d16 <sulp>
 801767e:	4602      	mov	r2, r0
 8017680:	460b      	mov	r3, r1
 8017682:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017686:	f7f0 fd37 	bl	80080f8 <__aeabi_dsub>
 801768a:	2200      	movs	r2, #0
 801768c:	2300      	movs	r3, #0
 801768e:	4682      	mov	sl, r0
 8017690:	468b      	mov	fp, r1
 8017692:	f7f1 f951 	bl	8008938 <__aeabi_dcmpeq>
 8017696:	2800      	cmp	r0, #0
 8017698:	f47f ae11 	bne.w	80172be <_strtod_l+0x56e>
 801769c:	e73f      	b.n	801751e <_strtod_l+0x7ce>
 801769e:	4641      	mov	r1, r8
 80176a0:	4620      	mov	r0, r4
 80176a2:	f002 f986 	bl	80199b2 <__ratio>
 80176a6:	ec57 6b10 	vmov	r6, r7, d0
 80176aa:	2200      	movs	r2, #0
 80176ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80176b0:	ee10 0a10 	vmov	r0, s0
 80176b4:	4639      	mov	r1, r7
 80176b6:	f7f1 f953 	bl	8008960 <__aeabi_dcmple>
 80176ba:	2800      	cmp	r0, #0
 80176bc:	d077      	beq.n	80177ae <_strtod_l+0xa5e>
 80176be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d04a      	beq.n	801775a <_strtod_l+0xa0a>
 80176c4:	4b68      	ldr	r3, [pc, #416]	; (8017868 <_strtod_l+0xb18>)
 80176c6:	2200      	movs	r2, #0
 80176c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80176cc:	4f66      	ldr	r7, [pc, #408]	; (8017868 <_strtod_l+0xb18>)
 80176ce:	2600      	movs	r6, #0
 80176d0:	4b62      	ldr	r3, [pc, #392]	; (801785c <_strtod_l+0xb0c>)
 80176d2:	402b      	ands	r3, r5
 80176d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80176d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80176d8:	4b64      	ldr	r3, [pc, #400]	; (801786c <_strtod_l+0xb1c>)
 80176da:	429a      	cmp	r2, r3
 80176dc:	f040 80ce 	bne.w	801787c <_strtod_l+0xb2c>
 80176e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80176e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80176e8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80176ec:	ec4b ab10 	vmov	d0, sl, fp
 80176f0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80176f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80176f8:	f002 f896 	bl	8019828 <__ulp>
 80176fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017700:	ec53 2b10 	vmov	r2, r3, d0
 8017704:	f7f0 feb0 	bl	8008468 <__aeabi_dmul>
 8017708:	4652      	mov	r2, sl
 801770a:	465b      	mov	r3, fp
 801770c:	f7f0 fcf6 	bl	80080fc <__adddf3>
 8017710:	460b      	mov	r3, r1
 8017712:	4952      	ldr	r1, [pc, #328]	; (801785c <_strtod_l+0xb0c>)
 8017714:	4a56      	ldr	r2, [pc, #344]	; (8017870 <_strtod_l+0xb20>)
 8017716:	4019      	ands	r1, r3
 8017718:	4291      	cmp	r1, r2
 801771a:	4682      	mov	sl, r0
 801771c:	d95b      	bls.n	80177d6 <_strtod_l+0xa86>
 801771e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017720:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017724:	4293      	cmp	r3, r2
 8017726:	d103      	bne.n	8017730 <_strtod_l+0x9e0>
 8017728:	9b08      	ldr	r3, [sp, #32]
 801772a:	3301      	adds	r3, #1
 801772c:	f43f ad2e 	beq.w	801718c <_strtod_l+0x43c>
 8017730:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017860 <_strtod_l+0xb10>
 8017734:	f04f 3aff 	mov.w	sl, #4294967295
 8017738:	991c      	ldr	r1, [sp, #112]	; 0x70
 801773a:	4648      	mov	r0, r9
 801773c:	f001 fddd 	bl	80192fa <_Bfree>
 8017740:	9905      	ldr	r1, [sp, #20]
 8017742:	4648      	mov	r0, r9
 8017744:	f001 fdd9 	bl	80192fa <_Bfree>
 8017748:	4641      	mov	r1, r8
 801774a:	4648      	mov	r0, r9
 801774c:	f001 fdd5 	bl	80192fa <_Bfree>
 8017750:	4621      	mov	r1, r4
 8017752:	4648      	mov	r0, r9
 8017754:	f001 fdd1 	bl	80192fa <_Bfree>
 8017758:	e619      	b.n	801738e <_strtod_l+0x63e>
 801775a:	f1ba 0f00 	cmp.w	sl, #0
 801775e:	d11a      	bne.n	8017796 <_strtod_l+0xa46>
 8017760:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017764:	b9eb      	cbnz	r3, 80177a2 <_strtod_l+0xa52>
 8017766:	2200      	movs	r2, #0
 8017768:	4b3f      	ldr	r3, [pc, #252]	; (8017868 <_strtod_l+0xb18>)
 801776a:	4630      	mov	r0, r6
 801776c:	4639      	mov	r1, r7
 801776e:	f7f1 f8ed 	bl	800894c <__aeabi_dcmplt>
 8017772:	b9c8      	cbnz	r0, 80177a8 <_strtod_l+0xa58>
 8017774:	4630      	mov	r0, r6
 8017776:	4639      	mov	r1, r7
 8017778:	2200      	movs	r2, #0
 801777a:	4b3e      	ldr	r3, [pc, #248]	; (8017874 <_strtod_l+0xb24>)
 801777c:	f7f0 fe74 	bl	8008468 <__aeabi_dmul>
 8017780:	4606      	mov	r6, r0
 8017782:	460f      	mov	r7, r1
 8017784:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017788:	9618      	str	r6, [sp, #96]	; 0x60
 801778a:	9319      	str	r3, [sp, #100]	; 0x64
 801778c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017790:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017794:	e79c      	b.n	80176d0 <_strtod_l+0x980>
 8017796:	f1ba 0f01 	cmp.w	sl, #1
 801779a:	d102      	bne.n	80177a2 <_strtod_l+0xa52>
 801779c:	2d00      	cmp	r5, #0
 801779e:	f43f ad8e 	beq.w	80172be <_strtod_l+0x56e>
 80177a2:	2200      	movs	r2, #0
 80177a4:	4b34      	ldr	r3, [pc, #208]	; (8017878 <_strtod_l+0xb28>)
 80177a6:	e78f      	b.n	80176c8 <_strtod_l+0x978>
 80177a8:	2600      	movs	r6, #0
 80177aa:	4f32      	ldr	r7, [pc, #200]	; (8017874 <_strtod_l+0xb24>)
 80177ac:	e7ea      	b.n	8017784 <_strtod_l+0xa34>
 80177ae:	4b31      	ldr	r3, [pc, #196]	; (8017874 <_strtod_l+0xb24>)
 80177b0:	4630      	mov	r0, r6
 80177b2:	4639      	mov	r1, r7
 80177b4:	2200      	movs	r2, #0
 80177b6:	f7f0 fe57 	bl	8008468 <__aeabi_dmul>
 80177ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177bc:	4606      	mov	r6, r0
 80177be:	460f      	mov	r7, r1
 80177c0:	b933      	cbnz	r3, 80177d0 <_strtod_l+0xa80>
 80177c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80177c6:	9010      	str	r0, [sp, #64]	; 0x40
 80177c8:	9311      	str	r3, [sp, #68]	; 0x44
 80177ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80177ce:	e7df      	b.n	8017790 <_strtod_l+0xa40>
 80177d0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80177d4:	e7f9      	b.n	80177ca <_strtod_l+0xa7a>
 80177d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80177da:	9b04      	ldr	r3, [sp, #16]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d1ab      	bne.n	8017738 <_strtod_l+0x9e8>
 80177e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80177e4:	0d1b      	lsrs	r3, r3, #20
 80177e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177e8:	051b      	lsls	r3, r3, #20
 80177ea:	429a      	cmp	r2, r3
 80177ec:	465d      	mov	r5, fp
 80177ee:	d1a3      	bne.n	8017738 <_strtod_l+0x9e8>
 80177f0:	4639      	mov	r1, r7
 80177f2:	4630      	mov	r0, r6
 80177f4:	f7f1 f8e8 	bl	80089c8 <__aeabi_d2iz>
 80177f8:	f7f0 fdcc 	bl	8008394 <__aeabi_i2d>
 80177fc:	460b      	mov	r3, r1
 80177fe:	4602      	mov	r2, r0
 8017800:	4639      	mov	r1, r7
 8017802:	4630      	mov	r0, r6
 8017804:	f7f0 fc78 	bl	80080f8 <__aeabi_dsub>
 8017808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801780a:	4606      	mov	r6, r0
 801780c:	460f      	mov	r7, r1
 801780e:	b933      	cbnz	r3, 801781e <_strtod_l+0xace>
 8017810:	f1ba 0f00 	cmp.w	sl, #0
 8017814:	d103      	bne.n	801781e <_strtod_l+0xace>
 8017816:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801781a:	2d00      	cmp	r5, #0
 801781c:	d06d      	beq.n	80178fa <_strtod_l+0xbaa>
 801781e:	a30a      	add	r3, pc, #40	; (adr r3, 8017848 <_strtod_l+0xaf8>)
 8017820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017824:	4630      	mov	r0, r6
 8017826:	4639      	mov	r1, r7
 8017828:	f7f1 f890 	bl	800894c <__aeabi_dcmplt>
 801782c:	2800      	cmp	r0, #0
 801782e:	f47f acb8 	bne.w	80171a2 <_strtod_l+0x452>
 8017832:	a307      	add	r3, pc, #28	; (adr r3, 8017850 <_strtod_l+0xb00>)
 8017834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017838:	4630      	mov	r0, r6
 801783a:	4639      	mov	r1, r7
 801783c:	f7f1 f8a4 	bl	8008988 <__aeabi_dcmpgt>
 8017840:	2800      	cmp	r0, #0
 8017842:	f43f af79 	beq.w	8017738 <_strtod_l+0x9e8>
 8017846:	e4ac      	b.n	80171a2 <_strtod_l+0x452>
 8017848:	94a03595 	.word	0x94a03595
 801784c:	3fdfffff 	.word	0x3fdfffff
 8017850:	35afe535 	.word	0x35afe535
 8017854:	3fe00000 	.word	0x3fe00000
 8017858:	000fffff 	.word	0x000fffff
 801785c:	7ff00000 	.word	0x7ff00000
 8017860:	7fefffff 	.word	0x7fefffff
 8017864:	39500000 	.word	0x39500000
 8017868:	3ff00000 	.word	0x3ff00000
 801786c:	7fe00000 	.word	0x7fe00000
 8017870:	7c9fffff 	.word	0x7c9fffff
 8017874:	3fe00000 	.word	0x3fe00000
 8017878:	bff00000 	.word	0xbff00000
 801787c:	9b04      	ldr	r3, [sp, #16]
 801787e:	b333      	cbz	r3, 80178ce <_strtod_l+0xb7e>
 8017880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017882:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017886:	d822      	bhi.n	80178ce <_strtod_l+0xb7e>
 8017888:	a327      	add	r3, pc, #156	; (adr r3, 8017928 <_strtod_l+0xbd8>)
 801788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801788e:	4630      	mov	r0, r6
 8017890:	4639      	mov	r1, r7
 8017892:	f7f1 f865 	bl	8008960 <__aeabi_dcmple>
 8017896:	b1a0      	cbz	r0, 80178c2 <_strtod_l+0xb72>
 8017898:	4639      	mov	r1, r7
 801789a:	4630      	mov	r0, r6
 801789c:	f7f1 f8bc 	bl	8008a18 <__aeabi_d2uiz>
 80178a0:	2800      	cmp	r0, #0
 80178a2:	bf08      	it	eq
 80178a4:	2001      	moveq	r0, #1
 80178a6:	f7f0 fd65 	bl	8008374 <__aeabi_ui2d>
 80178aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178ac:	4606      	mov	r6, r0
 80178ae:	460f      	mov	r7, r1
 80178b0:	bb03      	cbnz	r3, 80178f4 <_strtod_l+0xba4>
 80178b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80178b6:	9012      	str	r0, [sp, #72]	; 0x48
 80178b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80178ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80178be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80178c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80178c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80178ca:	1a9b      	subs	r3, r3, r2
 80178cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80178ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80178d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80178d6:	f001 ffa7 	bl	8019828 <__ulp>
 80178da:	4650      	mov	r0, sl
 80178dc:	ec53 2b10 	vmov	r2, r3, d0
 80178e0:	4659      	mov	r1, fp
 80178e2:	f7f0 fdc1 	bl	8008468 <__aeabi_dmul>
 80178e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80178ea:	f7f0 fc07 	bl	80080fc <__adddf3>
 80178ee:	4682      	mov	sl, r0
 80178f0:	468b      	mov	fp, r1
 80178f2:	e772      	b.n	80177da <_strtod_l+0xa8a>
 80178f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80178f8:	e7df      	b.n	80178ba <_strtod_l+0xb6a>
 80178fa:	a30d      	add	r3, pc, #52	; (adr r3, 8017930 <_strtod_l+0xbe0>)
 80178fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017900:	f7f1 f824 	bl	800894c <__aeabi_dcmplt>
 8017904:	e79c      	b.n	8017840 <_strtod_l+0xaf0>
 8017906:	2300      	movs	r3, #0
 8017908:	930d      	str	r3, [sp, #52]	; 0x34
 801790a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801790c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801790e:	6013      	str	r3, [r2, #0]
 8017910:	f7ff ba61 	b.w	8016dd6 <_strtod_l+0x86>
 8017914:	2b65      	cmp	r3, #101	; 0x65
 8017916:	f04f 0200 	mov.w	r2, #0
 801791a:	f43f ab4e 	beq.w	8016fba <_strtod_l+0x26a>
 801791e:	2101      	movs	r1, #1
 8017920:	4614      	mov	r4, r2
 8017922:	9104      	str	r1, [sp, #16]
 8017924:	f7ff bacb 	b.w	8016ebe <_strtod_l+0x16e>
 8017928:	ffc00000 	.word	0xffc00000
 801792c:	41dfffff 	.word	0x41dfffff
 8017930:	94a03595 	.word	0x94a03595
 8017934:	3fcfffff 	.word	0x3fcfffff

08017938 <_strtod_r>:
 8017938:	4b05      	ldr	r3, [pc, #20]	; (8017950 <_strtod_r+0x18>)
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	b410      	push	{r4}
 801793e:	6a1b      	ldr	r3, [r3, #32]
 8017940:	4c04      	ldr	r4, [pc, #16]	; (8017954 <_strtod_r+0x1c>)
 8017942:	2b00      	cmp	r3, #0
 8017944:	bf08      	it	eq
 8017946:	4623      	moveq	r3, r4
 8017948:	f85d 4b04 	ldr.w	r4, [sp], #4
 801794c:	f7ff ba00 	b.w	8016d50 <_strtod_l>
 8017950:	2000003c 	.word	0x2000003c
 8017954:	200000a0 	.word	0x200000a0

08017958 <_strtol_l.isra.0>:
 8017958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801795c:	4680      	mov	r8, r0
 801795e:	4689      	mov	r9, r1
 8017960:	4692      	mov	sl, r2
 8017962:	461e      	mov	r6, r3
 8017964:	460f      	mov	r7, r1
 8017966:	463d      	mov	r5, r7
 8017968:	9808      	ldr	r0, [sp, #32]
 801796a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801796e:	f001 fc27 	bl	80191c0 <__locale_ctype_ptr_l>
 8017972:	4420      	add	r0, r4
 8017974:	7843      	ldrb	r3, [r0, #1]
 8017976:	f013 0308 	ands.w	r3, r3, #8
 801797a:	d132      	bne.n	80179e2 <_strtol_l.isra.0+0x8a>
 801797c:	2c2d      	cmp	r4, #45	; 0x2d
 801797e:	d132      	bne.n	80179e6 <_strtol_l.isra.0+0x8e>
 8017980:	787c      	ldrb	r4, [r7, #1]
 8017982:	1cbd      	adds	r5, r7, #2
 8017984:	2201      	movs	r2, #1
 8017986:	2e00      	cmp	r6, #0
 8017988:	d05d      	beq.n	8017a46 <_strtol_l.isra.0+0xee>
 801798a:	2e10      	cmp	r6, #16
 801798c:	d109      	bne.n	80179a2 <_strtol_l.isra.0+0x4a>
 801798e:	2c30      	cmp	r4, #48	; 0x30
 8017990:	d107      	bne.n	80179a2 <_strtol_l.isra.0+0x4a>
 8017992:	782b      	ldrb	r3, [r5, #0]
 8017994:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017998:	2b58      	cmp	r3, #88	; 0x58
 801799a:	d14f      	bne.n	8017a3c <_strtol_l.isra.0+0xe4>
 801799c:	786c      	ldrb	r4, [r5, #1]
 801799e:	2610      	movs	r6, #16
 80179a0:	3502      	adds	r5, #2
 80179a2:	2a00      	cmp	r2, #0
 80179a4:	bf14      	ite	ne
 80179a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80179aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80179ae:	2700      	movs	r7, #0
 80179b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80179b4:	4638      	mov	r0, r7
 80179b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80179ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80179be:	2b09      	cmp	r3, #9
 80179c0:	d817      	bhi.n	80179f2 <_strtol_l.isra.0+0x9a>
 80179c2:	461c      	mov	r4, r3
 80179c4:	42a6      	cmp	r6, r4
 80179c6:	dd23      	ble.n	8017a10 <_strtol_l.isra.0+0xb8>
 80179c8:	1c7b      	adds	r3, r7, #1
 80179ca:	d007      	beq.n	80179dc <_strtol_l.isra.0+0x84>
 80179cc:	4584      	cmp	ip, r0
 80179ce:	d31c      	bcc.n	8017a0a <_strtol_l.isra.0+0xb2>
 80179d0:	d101      	bne.n	80179d6 <_strtol_l.isra.0+0x7e>
 80179d2:	45a6      	cmp	lr, r4
 80179d4:	db19      	blt.n	8017a0a <_strtol_l.isra.0+0xb2>
 80179d6:	fb00 4006 	mla	r0, r0, r6, r4
 80179da:	2701      	movs	r7, #1
 80179dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80179e0:	e7eb      	b.n	80179ba <_strtol_l.isra.0+0x62>
 80179e2:	462f      	mov	r7, r5
 80179e4:	e7bf      	b.n	8017966 <_strtol_l.isra.0+0xe>
 80179e6:	2c2b      	cmp	r4, #43	; 0x2b
 80179e8:	bf04      	itt	eq
 80179ea:	1cbd      	addeq	r5, r7, #2
 80179ec:	787c      	ldrbeq	r4, [r7, #1]
 80179ee:	461a      	mov	r2, r3
 80179f0:	e7c9      	b.n	8017986 <_strtol_l.isra.0+0x2e>
 80179f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80179f6:	2b19      	cmp	r3, #25
 80179f8:	d801      	bhi.n	80179fe <_strtol_l.isra.0+0xa6>
 80179fa:	3c37      	subs	r4, #55	; 0x37
 80179fc:	e7e2      	b.n	80179c4 <_strtol_l.isra.0+0x6c>
 80179fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017a02:	2b19      	cmp	r3, #25
 8017a04:	d804      	bhi.n	8017a10 <_strtol_l.isra.0+0xb8>
 8017a06:	3c57      	subs	r4, #87	; 0x57
 8017a08:	e7dc      	b.n	80179c4 <_strtol_l.isra.0+0x6c>
 8017a0a:	f04f 37ff 	mov.w	r7, #4294967295
 8017a0e:	e7e5      	b.n	80179dc <_strtol_l.isra.0+0x84>
 8017a10:	1c7b      	adds	r3, r7, #1
 8017a12:	d108      	bne.n	8017a26 <_strtol_l.isra.0+0xce>
 8017a14:	2322      	movs	r3, #34	; 0x22
 8017a16:	f8c8 3000 	str.w	r3, [r8]
 8017a1a:	4608      	mov	r0, r1
 8017a1c:	f1ba 0f00 	cmp.w	sl, #0
 8017a20:	d107      	bne.n	8017a32 <_strtol_l.isra.0+0xda>
 8017a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a26:	b102      	cbz	r2, 8017a2a <_strtol_l.isra.0+0xd2>
 8017a28:	4240      	negs	r0, r0
 8017a2a:	f1ba 0f00 	cmp.w	sl, #0
 8017a2e:	d0f8      	beq.n	8017a22 <_strtol_l.isra.0+0xca>
 8017a30:	b10f      	cbz	r7, 8017a36 <_strtol_l.isra.0+0xde>
 8017a32:	f105 39ff 	add.w	r9, r5, #4294967295
 8017a36:	f8ca 9000 	str.w	r9, [sl]
 8017a3a:	e7f2      	b.n	8017a22 <_strtol_l.isra.0+0xca>
 8017a3c:	2430      	movs	r4, #48	; 0x30
 8017a3e:	2e00      	cmp	r6, #0
 8017a40:	d1af      	bne.n	80179a2 <_strtol_l.isra.0+0x4a>
 8017a42:	2608      	movs	r6, #8
 8017a44:	e7ad      	b.n	80179a2 <_strtol_l.isra.0+0x4a>
 8017a46:	2c30      	cmp	r4, #48	; 0x30
 8017a48:	d0a3      	beq.n	8017992 <_strtol_l.isra.0+0x3a>
 8017a4a:	260a      	movs	r6, #10
 8017a4c:	e7a9      	b.n	80179a2 <_strtol_l.isra.0+0x4a>
	...

08017a50 <_strtol_r>:
 8017a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a52:	4c06      	ldr	r4, [pc, #24]	; (8017a6c <_strtol_r+0x1c>)
 8017a54:	4d06      	ldr	r5, [pc, #24]	; (8017a70 <_strtol_r+0x20>)
 8017a56:	6824      	ldr	r4, [r4, #0]
 8017a58:	6a24      	ldr	r4, [r4, #32]
 8017a5a:	2c00      	cmp	r4, #0
 8017a5c:	bf08      	it	eq
 8017a5e:	462c      	moveq	r4, r5
 8017a60:	9400      	str	r4, [sp, #0]
 8017a62:	f7ff ff79 	bl	8017958 <_strtol_l.isra.0>
 8017a66:	b003      	add	sp, #12
 8017a68:	bd30      	pop	{r4, r5, pc}
 8017a6a:	bf00      	nop
 8017a6c:	2000003c 	.word	0x2000003c
 8017a70:	200000a0 	.word	0x200000a0

08017a74 <_strtoul_l.isra.0>:
 8017a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a78:	4680      	mov	r8, r0
 8017a7a:	4689      	mov	r9, r1
 8017a7c:	4692      	mov	sl, r2
 8017a7e:	461e      	mov	r6, r3
 8017a80:	460f      	mov	r7, r1
 8017a82:	463d      	mov	r5, r7
 8017a84:	9808      	ldr	r0, [sp, #32]
 8017a86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a8a:	f001 fb99 	bl	80191c0 <__locale_ctype_ptr_l>
 8017a8e:	4420      	add	r0, r4
 8017a90:	7843      	ldrb	r3, [r0, #1]
 8017a92:	f013 0308 	ands.w	r3, r3, #8
 8017a96:	d130      	bne.n	8017afa <_strtoul_l.isra.0+0x86>
 8017a98:	2c2d      	cmp	r4, #45	; 0x2d
 8017a9a:	d130      	bne.n	8017afe <_strtoul_l.isra.0+0x8a>
 8017a9c:	787c      	ldrb	r4, [r7, #1]
 8017a9e:	1cbd      	adds	r5, r7, #2
 8017aa0:	2101      	movs	r1, #1
 8017aa2:	2e00      	cmp	r6, #0
 8017aa4:	d05c      	beq.n	8017b60 <_strtoul_l.isra.0+0xec>
 8017aa6:	2e10      	cmp	r6, #16
 8017aa8:	d109      	bne.n	8017abe <_strtoul_l.isra.0+0x4a>
 8017aaa:	2c30      	cmp	r4, #48	; 0x30
 8017aac:	d107      	bne.n	8017abe <_strtoul_l.isra.0+0x4a>
 8017aae:	782b      	ldrb	r3, [r5, #0]
 8017ab0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017ab4:	2b58      	cmp	r3, #88	; 0x58
 8017ab6:	d14e      	bne.n	8017b56 <_strtoul_l.isra.0+0xe2>
 8017ab8:	786c      	ldrb	r4, [r5, #1]
 8017aba:	2610      	movs	r6, #16
 8017abc:	3502      	adds	r5, #2
 8017abe:	f04f 32ff 	mov.w	r2, #4294967295
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	fbb2 f2f6 	udiv	r2, r2, r6
 8017ac8:	fb06 fc02 	mul.w	ip, r6, r2
 8017acc:	ea6f 0c0c 	mvn.w	ip, ip
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017ad6:	2f09      	cmp	r7, #9
 8017ad8:	d817      	bhi.n	8017b0a <_strtoul_l.isra.0+0x96>
 8017ada:	463c      	mov	r4, r7
 8017adc:	42a6      	cmp	r6, r4
 8017ade:	dd23      	ble.n	8017b28 <_strtoul_l.isra.0+0xb4>
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	db1e      	blt.n	8017b22 <_strtoul_l.isra.0+0xae>
 8017ae4:	4282      	cmp	r2, r0
 8017ae6:	d31c      	bcc.n	8017b22 <_strtoul_l.isra.0+0xae>
 8017ae8:	d101      	bne.n	8017aee <_strtoul_l.isra.0+0x7a>
 8017aea:	45a4      	cmp	ip, r4
 8017aec:	db19      	blt.n	8017b22 <_strtoul_l.isra.0+0xae>
 8017aee:	fb00 4006 	mla	r0, r0, r6, r4
 8017af2:	2301      	movs	r3, #1
 8017af4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017af8:	e7eb      	b.n	8017ad2 <_strtoul_l.isra.0+0x5e>
 8017afa:	462f      	mov	r7, r5
 8017afc:	e7c1      	b.n	8017a82 <_strtoul_l.isra.0+0xe>
 8017afe:	2c2b      	cmp	r4, #43	; 0x2b
 8017b00:	bf04      	itt	eq
 8017b02:	1cbd      	addeq	r5, r7, #2
 8017b04:	787c      	ldrbeq	r4, [r7, #1]
 8017b06:	4619      	mov	r1, r3
 8017b08:	e7cb      	b.n	8017aa2 <_strtoul_l.isra.0+0x2e>
 8017b0a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017b0e:	2f19      	cmp	r7, #25
 8017b10:	d801      	bhi.n	8017b16 <_strtoul_l.isra.0+0xa2>
 8017b12:	3c37      	subs	r4, #55	; 0x37
 8017b14:	e7e2      	b.n	8017adc <_strtoul_l.isra.0+0x68>
 8017b16:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017b1a:	2f19      	cmp	r7, #25
 8017b1c:	d804      	bhi.n	8017b28 <_strtoul_l.isra.0+0xb4>
 8017b1e:	3c57      	subs	r4, #87	; 0x57
 8017b20:	e7dc      	b.n	8017adc <_strtoul_l.isra.0+0x68>
 8017b22:	f04f 33ff 	mov.w	r3, #4294967295
 8017b26:	e7e5      	b.n	8017af4 <_strtoul_l.isra.0+0x80>
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	da09      	bge.n	8017b40 <_strtoul_l.isra.0+0xcc>
 8017b2c:	2322      	movs	r3, #34	; 0x22
 8017b2e:	f8c8 3000 	str.w	r3, [r8]
 8017b32:	f04f 30ff 	mov.w	r0, #4294967295
 8017b36:	f1ba 0f00 	cmp.w	sl, #0
 8017b3a:	d107      	bne.n	8017b4c <_strtoul_l.isra.0+0xd8>
 8017b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b40:	b101      	cbz	r1, 8017b44 <_strtoul_l.isra.0+0xd0>
 8017b42:	4240      	negs	r0, r0
 8017b44:	f1ba 0f00 	cmp.w	sl, #0
 8017b48:	d0f8      	beq.n	8017b3c <_strtoul_l.isra.0+0xc8>
 8017b4a:	b10b      	cbz	r3, 8017b50 <_strtoul_l.isra.0+0xdc>
 8017b4c:	f105 39ff 	add.w	r9, r5, #4294967295
 8017b50:	f8ca 9000 	str.w	r9, [sl]
 8017b54:	e7f2      	b.n	8017b3c <_strtoul_l.isra.0+0xc8>
 8017b56:	2430      	movs	r4, #48	; 0x30
 8017b58:	2e00      	cmp	r6, #0
 8017b5a:	d1b0      	bne.n	8017abe <_strtoul_l.isra.0+0x4a>
 8017b5c:	2608      	movs	r6, #8
 8017b5e:	e7ae      	b.n	8017abe <_strtoul_l.isra.0+0x4a>
 8017b60:	2c30      	cmp	r4, #48	; 0x30
 8017b62:	d0a4      	beq.n	8017aae <_strtoul_l.isra.0+0x3a>
 8017b64:	260a      	movs	r6, #10
 8017b66:	e7aa      	b.n	8017abe <_strtoul_l.isra.0+0x4a>

08017b68 <_strtoul_r>:
 8017b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b6a:	4c06      	ldr	r4, [pc, #24]	; (8017b84 <_strtoul_r+0x1c>)
 8017b6c:	4d06      	ldr	r5, [pc, #24]	; (8017b88 <_strtoul_r+0x20>)
 8017b6e:	6824      	ldr	r4, [r4, #0]
 8017b70:	6a24      	ldr	r4, [r4, #32]
 8017b72:	2c00      	cmp	r4, #0
 8017b74:	bf08      	it	eq
 8017b76:	462c      	moveq	r4, r5
 8017b78:	9400      	str	r4, [sp, #0]
 8017b7a:	f7ff ff7b 	bl	8017a74 <_strtoul_l.isra.0>
 8017b7e:	b003      	add	sp, #12
 8017b80:	bd30      	pop	{r4, r5, pc}
 8017b82:	bf00      	nop
 8017b84:	2000003c 	.word	0x2000003c
 8017b88:	200000a0 	.word	0x200000a0

08017b8c <__submore>:
 8017b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b90:	460c      	mov	r4, r1
 8017b92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b98:	4299      	cmp	r1, r3
 8017b9a:	d11d      	bne.n	8017bd8 <__submore+0x4c>
 8017b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017ba0:	f7fd fa14 	bl	8014fcc <_malloc_r>
 8017ba4:	b918      	cbnz	r0, 8017bae <__submore+0x22>
 8017ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8017baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017bb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8017bb4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8017bba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017bbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017bc2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017bc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017bca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017bce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017bd2:	6020      	str	r0, [r4, #0]
 8017bd4:	2000      	movs	r0, #0
 8017bd6:	e7e8      	b.n	8017baa <__submore+0x1e>
 8017bd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017bda:	0077      	lsls	r7, r6, #1
 8017bdc:	463a      	mov	r2, r7
 8017bde:	f001 ff64 	bl	8019aaa <_realloc_r>
 8017be2:	4605      	mov	r5, r0
 8017be4:	2800      	cmp	r0, #0
 8017be6:	d0de      	beq.n	8017ba6 <__submore+0x1a>
 8017be8:	eb00 0806 	add.w	r8, r0, r6
 8017bec:	4601      	mov	r1, r0
 8017bee:	4632      	mov	r2, r6
 8017bf0:	4640      	mov	r0, r8
 8017bf2:	f7fd f989 	bl	8014f08 <memcpy>
 8017bf6:	f8c4 8000 	str.w	r8, [r4]
 8017bfa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017bfe:	e7e9      	b.n	8017bd4 <__submore+0x48>

08017c00 <_ungetc_r>:
 8017c00:	1c4b      	adds	r3, r1, #1
 8017c02:	b570      	push	{r4, r5, r6, lr}
 8017c04:	4606      	mov	r6, r0
 8017c06:	460d      	mov	r5, r1
 8017c08:	4614      	mov	r4, r2
 8017c0a:	d103      	bne.n	8017c14 <_ungetc_r+0x14>
 8017c0c:	f04f 35ff 	mov.w	r5, #4294967295
 8017c10:	4628      	mov	r0, r5
 8017c12:	bd70      	pop	{r4, r5, r6, pc}
 8017c14:	b118      	cbz	r0, 8017c1e <_ungetc_r+0x1e>
 8017c16:	6983      	ldr	r3, [r0, #24]
 8017c18:	b90b      	cbnz	r3, 8017c1e <_ungetc_r+0x1e>
 8017c1a:	f7fd f847 	bl	8014cac <__sinit>
 8017c1e:	4b2e      	ldr	r3, [pc, #184]	; (8017cd8 <_ungetc_r+0xd8>)
 8017c20:	429c      	cmp	r4, r3
 8017c22:	d12c      	bne.n	8017c7e <_ungetc_r+0x7e>
 8017c24:	6874      	ldr	r4, [r6, #4]
 8017c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c2a:	f023 0320 	bic.w	r3, r3, #32
 8017c2e:	81a3      	strh	r3, [r4, #12]
 8017c30:	b29b      	uxth	r3, r3
 8017c32:	0759      	lsls	r1, r3, #29
 8017c34:	d413      	bmi.n	8017c5e <_ungetc_r+0x5e>
 8017c36:	06da      	lsls	r2, r3, #27
 8017c38:	d5e8      	bpl.n	8017c0c <_ungetc_r+0xc>
 8017c3a:	071b      	lsls	r3, r3, #28
 8017c3c:	d50b      	bpl.n	8017c56 <_ungetc_r+0x56>
 8017c3e:	4621      	mov	r1, r4
 8017c40:	4630      	mov	r0, r6
 8017c42:	f7fc ffb7 	bl	8014bb4 <_fflush_r>
 8017c46:	2800      	cmp	r0, #0
 8017c48:	d1e0      	bne.n	8017c0c <_ungetc_r+0xc>
 8017c4a:	89a3      	ldrh	r3, [r4, #12]
 8017c4c:	60a0      	str	r0, [r4, #8]
 8017c4e:	f023 0308 	bic.w	r3, r3, #8
 8017c52:	81a3      	strh	r3, [r4, #12]
 8017c54:	61a0      	str	r0, [r4, #24]
 8017c56:	89a3      	ldrh	r3, [r4, #12]
 8017c58:	f043 0304 	orr.w	r3, r3, #4
 8017c5c:	81a3      	strh	r3, [r4, #12]
 8017c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017c60:	6862      	ldr	r2, [r4, #4]
 8017c62:	b2ed      	uxtb	r5, r5
 8017c64:	b1e3      	cbz	r3, 8017ca0 <_ungetc_r+0xa0>
 8017c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017c68:	4293      	cmp	r3, r2
 8017c6a:	dd12      	ble.n	8017c92 <_ungetc_r+0x92>
 8017c6c:	6823      	ldr	r3, [r4, #0]
 8017c6e:	1e5a      	subs	r2, r3, #1
 8017c70:	6022      	str	r2, [r4, #0]
 8017c72:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017c76:	6863      	ldr	r3, [r4, #4]
 8017c78:	3301      	adds	r3, #1
 8017c7a:	6063      	str	r3, [r4, #4]
 8017c7c:	e7c8      	b.n	8017c10 <_ungetc_r+0x10>
 8017c7e:	4b17      	ldr	r3, [pc, #92]	; (8017cdc <_ungetc_r+0xdc>)
 8017c80:	429c      	cmp	r4, r3
 8017c82:	d101      	bne.n	8017c88 <_ungetc_r+0x88>
 8017c84:	68b4      	ldr	r4, [r6, #8]
 8017c86:	e7ce      	b.n	8017c26 <_ungetc_r+0x26>
 8017c88:	4b15      	ldr	r3, [pc, #84]	; (8017ce0 <_ungetc_r+0xe0>)
 8017c8a:	429c      	cmp	r4, r3
 8017c8c:	bf08      	it	eq
 8017c8e:	68f4      	ldreq	r4, [r6, #12]
 8017c90:	e7c9      	b.n	8017c26 <_ungetc_r+0x26>
 8017c92:	4621      	mov	r1, r4
 8017c94:	4630      	mov	r0, r6
 8017c96:	f7ff ff79 	bl	8017b8c <__submore>
 8017c9a:	2800      	cmp	r0, #0
 8017c9c:	d0e6      	beq.n	8017c6c <_ungetc_r+0x6c>
 8017c9e:	e7b5      	b.n	8017c0c <_ungetc_r+0xc>
 8017ca0:	6921      	ldr	r1, [r4, #16]
 8017ca2:	6823      	ldr	r3, [r4, #0]
 8017ca4:	b151      	cbz	r1, 8017cbc <_ungetc_r+0xbc>
 8017ca6:	4299      	cmp	r1, r3
 8017ca8:	d208      	bcs.n	8017cbc <_ungetc_r+0xbc>
 8017caa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017cae:	42a9      	cmp	r1, r5
 8017cb0:	d104      	bne.n	8017cbc <_ungetc_r+0xbc>
 8017cb2:	3b01      	subs	r3, #1
 8017cb4:	3201      	adds	r2, #1
 8017cb6:	6023      	str	r3, [r4, #0]
 8017cb8:	6062      	str	r2, [r4, #4]
 8017cba:	e7a9      	b.n	8017c10 <_ungetc_r+0x10>
 8017cbc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017cc4:	6363      	str	r3, [r4, #52]	; 0x34
 8017cc6:	2303      	movs	r3, #3
 8017cc8:	63a3      	str	r3, [r4, #56]	; 0x38
 8017cca:	4623      	mov	r3, r4
 8017ccc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017cd0:	6023      	str	r3, [r4, #0]
 8017cd2:	2301      	movs	r3, #1
 8017cd4:	e7d1      	b.n	8017c7a <_ungetc_r+0x7a>
 8017cd6:	bf00      	nop
 8017cd8:	0801a2e8 	.word	0x0801a2e8
 8017cdc:	0801a308 	.word	0x0801a308
 8017ce0:	0801a2c8 	.word	0x0801a2c8

08017ce4 <__swbuf_r>:
 8017ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ce6:	460e      	mov	r6, r1
 8017ce8:	4614      	mov	r4, r2
 8017cea:	4605      	mov	r5, r0
 8017cec:	b118      	cbz	r0, 8017cf6 <__swbuf_r+0x12>
 8017cee:	6983      	ldr	r3, [r0, #24]
 8017cf0:	b90b      	cbnz	r3, 8017cf6 <__swbuf_r+0x12>
 8017cf2:	f7fc ffdb 	bl	8014cac <__sinit>
 8017cf6:	4b21      	ldr	r3, [pc, #132]	; (8017d7c <__swbuf_r+0x98>)
 8017cf8:	429c      	cmp	r4, r3
 8017cfa:	d12a      	bne.n	8017d52 <__swbuf_r+0x6e>
 8017cfc:	686c      	ldr	r4, [r5, #4]
 8017cfe:	69a3      	ldr	r3, [r4, #24]
 8017d00:	60a3      	str	r3, [r4, #8]
 8017d02:	89a3      	ldrh	r3, [r4, #12]
 8017d04:	071a      	lsls	r2, r3, #28
 8017d06:	d52e      	bpl.n	8017d66 <__swbuf_r+0x82>
 8017d08:	6923      	ldr	r3, [r4, #16]
 8017d0a:	b363      	cbz	r3, 8017d66 <__swbuf_r+0x82>
 8017d0c:	6923      	ldr	r3, [r4, #16]
 8017d0e:	6820      	ldr	r0, [r4, #0]
 8017d10:	1ac0      	subs	r0, r0, r3
 8017d12:	6963      	ldr	r3, [r4, #20]
 8017d14:	b2f6      	uxtb	r6, r6
 8017d16:	4283      	cmp	r3, r0
 8017d18:	4637      	mov	r7, r6
 8017d1a:	dc04      	bgt.n	8017d26 <__swbuf_r+0x42>
 8017d1c:	4621      	mov	r1, r4
 8017d1e:	4628      	mov	r0, r5
 8017d20:	f7fc ff48 	bl	8014bb4 <_fflush_r>
 8017d24:	bb28      	cbnz	r0, 8017d72 <__swbuf_r+0x8e>
 8017d26:	68a3      	ldr	r3, [r4, #8]
 8017d28:	3b01      	subs	r3, #1
 8017d2a:	60a3      	str	r3, [r4, #8]
 8017d2c:	6823      	ldr	r3, [r4, #0]
 8017d2e:	1c5a      	adds	r2, r3, #1
 8017d30:	6022      	str	r2, [r4, #0]
 8017d32:	701e      	strb	r6, [r3, #0]
 8017d34:	6963      	ldr	r3, [r4, #20]
 8017d36:	3001      	adds	r0, #1
 8017d38:	4283      	cmp	r3, r0
 8017d3a:	d004      	beq.n	8017d46 <__swbuf_r+0x62>
 8017d3c:	89a3      	ldrh	r3, [r4, #12]
 8017d3e:	07db      	lsls	r3, r3, #31
 8017d40:	d519      	bpl.n	8017d76 <__swbuf_r+0x92>
 8017d42:	2e0a      	cmp	r6, #10
 8017d44:	d117      	bne.n	8017d76 <__swbuf_r+0x92>
 8017d46:	4621      	mov	r1, r4
 8017d48:	4628      	mov	r0, r5
 8017d4a:	f7fc ff33 	bl	8014bb4 <_fflush_r>
 8017d4e:	b190      	cbz	r0, 8017d76 <__swbuf_r+0x92>
 8017d50:	e00f      	b.n	8017d72 <__swbuf_r+0x8e>
 8017d52:	4b0b      	ldr	r3, [pc, #44]	; (8017d80 <__swbuf_r+0x9c>)
 8017d54:	429c      	cmp	r4, r3
 8017d56:	d101      	bne.n	8017d5c <__swbuf_r+0x78>
 8017d58:	68ac      	ldr	r4, [r5, #8]
 8017d5a:	e7d0      	b.n	8017cfe <__swbuf_r+0x1a>
 8017d5c:	4b09      	ldr	r3, [pc, #36]	; (8017d84 <__swbuf_r+0xa0>)
 8017d5e:	429c      	cmp	r4, r3
 8017d60:	bf08      	it	eq
 8017d62:	68ec      	ldreq	r4, [r5, #12]
 8017d64:	e7cb      	b.n	8017cfe <__swbuf_r+0x1a>
 8017d66:	4621      	mov	r1, r4
 8017d68:	4628      	mov	r0, r5
 8017d6a:	f000 f81f 	bl	8017dac <__swsetup_r>
 8017d6e:	2800      	cmp	r0, #0
 8017d70:	d0cc      	beq.n	8017d0c <__swbuf_r+0x28>
 8017d72:	f04f 37ff 	mov.w	r7, #4294967295
 8017d76:	4638      	mov	r0, r7
 8017d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d7a:	bf00      	nop
 8017d7c:	0801a2e8 	.word	0x0801a2e8
 8017d80:	0801a308 	.word	0x0801a308
 8017d84:	0801a2c8 	.word	0x0801a2c8

08017d88 <_write_r>:
 8017d88:	b538      	push	{r3, r4, r5, lr}
 8017d8a:	4c07      	ldr	r4, [pc, #28]	; (8017da8 <_write_r+0x20>)
 8017d8c:	4605      	mov	r5, r0
 8017d8e:	4608      	mov	r0, r1
 8017d90:	4611      	mov	r1, r2
 8017d92:	2200      	movs	r2, #0
 8017d94:	6022      	str	r2, [r4, #0]
 8017d96:	461a      	mov	r2, r3
 8017d98:	f7f6 f8bd 	bl	800df16 <_write>
 8017d9c:	1c43      	adds	r3, r0, #1
 8017d9e:	d102      	bne.n	8017da6 <_write_r+0x1e>
 8017da0:	6823      	ldr	r3, [r4, #0]
 8017da2:	b103      	cbz	r3, 8017da6 <_write_r+0x1e>
 8017da4:	602b      	str	r3, [r5, #0]
 8017da6:	bd38      	pop	{r3, r4, r5, pc}
 8017da8:	20008f4c 	.word	0x20008f4c

08017dac <__swsetup_r>:
 8017dac:	4b32      	ldr	r3, [pc, #200]	; (8017e78 <__swsetup_r+0xcc>)
 8017dae:	b570      	push	{r4, r5, r6, lr}
 8017db0:	681d      	ldr	r5, [r3, #0]
 8017db2:	4606      	mov	r6, r0
 8017db4:	460c      	mov	r4, r1
 8017db6:	b125      	cbz	r5, 8017dc2 <__swsetup_r+0x16>
 8017db8:	69ab      	ldr	r3, [r5, #24]
 8017dba:	b913      	cbnz	r3, 8017dc2 <__swsetup_r+0x16>
 8017dbc:	4628      	mov	r0, r5
 8017dbe:	f7fc ff75 	bl	8014cac <__sinit>
 8017dc2:	4b2e      	ldr	r3, [pc, #184]	; (8017e7c <__swsetup_r+0xd0>)
 8017dc4:	429c      	cmp	r4, r3
 8017dc6:	d10f      	bne.n	8017de8 <__swsetup_r+0x3c>
 8017dc8:	686c      	ldr	r4, [r5, #4]
 8017dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dce:	b29a      	uxth	r2, r3
 8017dd0:	0715      	lsls	r5, r2, #28
 8017dd2:	d42c      	bmi.n	8017e2e <__swsetup_r+0x82>
 8017dd4:	06d0      	lsls	r0, r2, #27
 8017dd6:	d411      	bmi.n	8017dfc <__swsetup_r+0x50>
 8017dd8:	2209      	movs	r2, #9
 8017dda:	6032      	str	r2, [r6, #0]
 8017ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017de0:	81a3      	strh	r3, [r4, #12]
 8017de2:	f04f 30ff 	mov.w	r0, #4294967295
 8017de6:	e03e      	b.n	8017e66 <__swsetup_r+0xba>
 8017de8:	4b25      	ldr	r3, [pc, #148]	; (8017e80 <__swsetup_r+0xd4>)
 8017dea:	429c      	cmp	r4, r3
 8017dec:	d101      	bne.n	8017df2 <__swsetup_r+0x46>
 8017dee:	68ac      	ldr	r4, [r5, #8]
 8017df0:	e7eb      	b.n	8017dca <__swsetup_r+0x1e>
 8017df2:	4b24      	ldr	r3, [pc, #144]	; (8017e84 <__swsetup_r+0xd8>)
 8017df4:	429c      	cmp	r4, r3
 8017df6:	bf08      	it	eq
 8017df8:	68ec      	ldreq	r4, [r5, #12]
 8017dfa:	e7e6      	b.n	8017dca <__swsetup_r+0x1e>
 8017dfc:	0751      	lsls	r1, r2, #29
 8017dfe:	d512      	bpl.n	8017e26 <__swsetup_r+0x7a>
 8017e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e02:	b141      	cbz	r1, 8017e16 <__swsetup_r+0x6a>
 8017e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e08:	4299      	cmp	r1, r3
 8017e0a:	d002      	beq.n	8017e12 <__swsetup_r+0x66>
 8017e0c:	4630      	mov	r0, r6
 8017e0e:	f7fd f88f 	bl	8014f30 <_free_r>
 8017e12:	2300      	movs	r3, #0
 8017e14:	6363      	str	r3, [r4, #52]	; 0x34
 8017e16:	89a3      	ldrh	r3, [r4, #12]
 8017e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017e1c:	81a3      	strh	r3, [r4, #12]
 8017e1e:	2300      	movs	r3, #0
 8017e20:	6063      	str	r3, [r4, #4]
 8017e22:	6923      	ldr	r3, [r4, #16]
 8017e24:	6023      	str	r3, [r4, #0]
 8017e26:	89a3      	ldrh	r3, [r4, #12]
 8017e28:	f043 0308 	orr.w	r3, r3, #8
 8017e2c:	81a3      	strh	r3, [r4, #12]
 8017e2e:	6923      	ldr	r3, [r4, #16]
 8017e30:	b94b      	cbnz	r3, 8017e46 <__swsetup_r+0x9a>
 8017e32:	89a3      	ldrh	r3, [r4, #12]
 8017e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e3c:	d003      	beq.n	8017e46 <__swsetup_r+0x9a>
 8017e3e:	4621      	mov	r1, r4
 8017e40:	4630      	mov	r0, r6
 8017e42:	f7fd f821 	bl	8014e88 <__smakebuf_r>
 8017e46:	89a2      	ldrh	r2, [r4, #12]
 8017e48:	f012 0301 	ands.w	r3, r2, #1
 8017e4c:	d00c      	beq.n	8017e68 <__swsetup_r+0xbc>
 8017e4e:	2300      	movs	r3, #0
 8017e50:	60a3      	str	r3, [r4, #8]
 8017e52:	6963      	ldr	r3, [r4, #20]
 8017e54:	425b      	negs	r3, r3
 8017e56:	61a3      	str	r3, [r4, #24]
 8017e58:	6923      	ldr	r3, [r4, #16]
 8017e5a:	b953      	cbnz	r3, 8017e72 <__swsetup_r+0xc6>
 8017e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e60:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017e64:	d1ba      	bne.n	8017ddc <__swsetup_r+0x30>
 8017e66:	bd70      	pop	{r4, r5, r6, pc}
 8017e68:	0792      	lsls	r2, r2, #30
 8017e6a:	bf58      	it	pl
 8017e6c:	6963      	ldrpl	r3, [r4, #20]
 8017e6e:	60a3      	str	r3, [r4, #8]
 8017e70:	e7f2      	b.n	8017e58 <__swsetup_r+0xac>
 8017e72:	2000      	movs	r0, #0
 8017e74:	e7f7      	b.n	8017e66 <__swsetup_r+0xba>
 8017e76:	bf00      	nop
 8017e78:	2000003c 	.word	0x2000003c
 8017e7c:	0801a2e8 	.word	0x0801a2e8
 8017e80:	0801a308 	.word	0x0801a308
 8017e84:	0801a2c8 	.word	0x0801a2c8

08017e88 <_close_r>:
 8017e88:	b538      	push	{r3, r4, r5, lr}
 8017e8a:	4c06      	ldr	r4, [pc, #24]	; (8017ea4 <_close_r+0x1c>)
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	4605      	mov	r5, r0
 8017e90:	4608      	mov	r0, r1
 8017e92:	6023      	str	r3, [r4, #0]
 8017e94:	f7f6 f85b 	bl	800df4e <_close>
 8017e98:	1c43      	adds	r3, r0, #1
 8017e9a:	d102      	bne.n	8017ea2 <_close_r+0x1a>
 8017e9c:	6823      	ldr	r3, [r4, #0]
 8017e9e:	b103      	cbz	r3, 8017ea2 <_close_r+0x1a>
 8017ea0:	602b      	str	r3, [r5, #0]
 8017ea2:	bd38      	pop	{r3, r4, r5, pc}
 8017ea4:	20008f4c 	.word	0x20008f4c

08017ea8 <quorem>:
 8017ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eac:	6903      	ldr	r3, [r0, #16]
 8017eae:	690c      	ldr	r4, [r1, #16]
 8017eb0:	42a3      	cmp	r3, r4
 8017eb2:	4680      	mov	r8, r0
 8017eb4:	f2c0 8082 	blt.w	8017fbc <quorem+0x114>
 8017eb8:	3c01      	subs	r4, #1
 8017eba:	f101 0714 	add.w	r7, r1, #20
 8017ebe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017ec2:	f100 0614 	add.w	r6, r0, #20
 8017ec6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017eca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017ece:	eb06 030c 	add.w	r3, r6, ip
 8017ed2:	3501      	adds	r5, #1
 8017ed4:	eb07 090c 	add.w	r9, r7, ip
 8017ed8:	9301      	str	r3, [sp, #4]
 8017eda:	fbb0 f5f5 	udiv	r5, r0, r5
 8017ede:	b395      	cbz	r5, 8017f46 <quorem+0x9e>
 8017ee0:	f04f 0a00 	mov.w	sl, #0
 8017ee4:	4638      	mov	r0, r7
 8017ee6:	46b6      	mov	lr, r6
 8017ee8:	46d3      	mov	fp, sl
 8017eea:	f850 2b04 	ldr.w	r2, [r0], #4
 8017eee:	b293      	uxth	r3, r2
 8017ef0:	fb05 a303 	mla	r3, r5, r3, sl
 8017ef4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017ef8:	b29b      	uxth	r3, r3
 8017efa:	ebab 0303 	sub.w	r3, fp, r3
 8017efe:	0c12      	lsrs	r2, r2, #16
 8017f00:	f8de b000 	ldr.w	fp, [lr]
 8017f04:	fb05 a202 	mla	r2, r5, r2, sl
 8017f08:	fa13 f38b 	uxtah	r3, r3, fp
 8017f0c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017f10:	fa1f fb82 	uxth.w	fp, r2
 8017f14:	f8de 2000 	ldr.w	r2, [lr]
 8017f18:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017f1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f26:	4581      	cmp	r9, r0
 8017f28:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017f2c:	f84e 3b04 	str.w	r3, [lr], #4
 8017f30:	d2db      	bcs.n	8017eea <quorem+0x42>
 8017f32:	f856 300c 	ldr.w	r3, [r6, ip]
 8017f36:	b933      	cbnz	r3, 8017f46 <quorem+0x9e>
 8017f38:	9b01      	ldr	r3, [sp, #4]
 8017f3a:	3b04      	subs	r3, #4
 8017f3c:	429e      	cmp	r6, r3
 8017f3e:	461a      	mov	r2, r3
 8017f40:	d330      	bcc.n	8017fa4 <quorem+0xfc>
 8017f42:	f8c8 4010 	str.w	r4, [r8, #16]
 8017f46:	4640      	mov	r0, r8
 8017f48:	f001 fbf6 	bl	8019738 <__mcmp>
 8017f4c:	2800      	cmp	r0, #0
 8017f4e:	db25      	blt.n	8017f9c <quorem+0xf4>
 8017f50:	3501      	adds	r5, #1
 8017f52:	4630      	mov	r0, r6
 8017f54:	f04f 0c00 	mov.w	ip, #0
 8017f58:	f857 2b04 	ldr.w	r2, [r7], #4
 8017f5c:	f8d0 e000 	ldr.w	lr, [r0]
 8017f60:	b293      	uxth	r3, r2
 8017f62:	ebac 0303 	sub.w	r3, ip, r3
 8017f66:	0c12      	lsrs	r2, r2, #16
 8017f68:	fa13 f38e 	uxtah	r3, r3, lr
 8017f6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017f70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f74:	b29b      	uxth	r3, r3
 8017f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f7a:	45b9      	cmp	r9, r7
 8017f7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017f80:	f840 3b04 	str.w	r3, [r0], #4
 8017f84:	d2e8      	bcs.n	8017f58 <quorem+0xb0>
 8017f86:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017f8a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017f8e:	b92a      	cbnz	r2, 8017f9c <quorem+0xf4>
 8017f90:	3b04      	subs	r3, #4
 8017f92:	429e      	cmp	r6, r3
 8017f94:	461a      	mov	r2, r3
 8017f96:	d30b      	bcc.n	8017fb0 <quorem+0x108>
 8017f98:	f8c8 4010 	str.w	r4, [r8, #16]
 8017f9c:	4628      	mov	r0, r5
 8017f9e:	b003      	add	sp, #12
 8017fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa4:	6812      	ldr	r2, [r2, #0]
 8017fa6:	3b04      	subs	r3, #4
 8017fa8:	2a00      	cmp	r2, #0
 8017faa:	d1ca      	bne.n	8017f42 <quorem+0x9a>
 8017fac:	3c01      	subs	r4, #1
 8017fae:	e7c5      	b.n	8017f3c <quorem+0x94>
 8017fb0:	6812      	ldr	r2, [r2, #0]
 8017fb2:	3b04      	subs	r3, #4
 8017fb4:	2a00      	cmp	r2, #0
 8017fb6:	d1ef      	bne.n	8017f98 <quorem+0xf0>
 8017fb8:	3c01      	subs	r4, #1
 8017fba:	e7ea      	b.n	8017f92 <quorem+0xea>
 8017fbc:	2000      	movs	r0, #0
 8017fbe:	e7ee      	b.n	8017f9e <quorem+0xf6>

08017fc0 <_dtoa_r>:
 8017fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fc4:	ec57 6b10 	vmov	r6, r7, d0
 8017fc8:	b097      	sub	sp, #92	; 0x5c
 8017fca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017fcc:	9106      	str	r1, [sp, #24]
 8017fce:	4604      	mov	r4, r0
 8017fd0:	920b      	str	r2, [sp, #44]	; 0x2c
 8017fd2:	9312      	str	r3, [sp, #72]	; 0x48
 8017fd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017fd8:	e9cd 6700 	strd	r6, r7, [sp]
 8017fdc:	b93d      	cbnz	r5, 8017fee <_dtoa_r+0x2e>
 8017fde:	2010      	movs	r0, #16
 8017fe0:	f001 f922 	bl	8019228 <malloc>
 8017fe4:	6260      	str	r0, [r4, #36]	; 0x24
 8017fe6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017fea:	6005      	str	r5, [r0, #0]
 8017fec:	60c5      	str	r5, [r0, #12]
 8017fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ff0:	6819      	ldr	r1, [r3, #0]
 8017ff2:	b151      	cbz	r1, 801800a <_dtoa_r+0x4a>
 8017ff4:	685a      	ldr	r2, [r3, #4]
 8017ff6:	604a      	str	r2, [r1, #4]
 8017ff8:	2301      	movs	r3, #1
 8017ffa:	4093      	lsls	r3, r2
 8017ffc:	608b      	str	r3, [r1, #8]
 8017ffe:	4620      	mov	r0, r4
 8018000:	f001 f97b 	bl	80192fa <_Bfree>
 8018004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018006:	2200      	movs	r2, #0
 8018008:	601a      	str	r2, [r3, #0]
 801800a:	1e3b      	subs	r3, r7, #0
 801800c:	bfbb      	ittet	lt
 801800e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018012:	9301      	strlt	r3, [sp, #4]
 8018014:	2300      	movge	r3, #0
 8018016:	2201      	movlt	r2, #1
 8018018:	bfac      	ite	ge
 801801a:	f8c8 3000 	strge.w	r3, [r8]
 801801e:	f8c8 2000 	strlt.w	r2, [r8]
 8018022:	4baf      	ldr	r3, [pc, #700]	; (80182e0 <_dtoa_r+0x320>)
 8018024:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018028:	ea33 0308 	bics.w	r3, r3, r8
 801802c:	d114      	bne.n	8018058 <_dtoa_r+0x98>
 801802e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018030:	f242 730f 	movw	r3, #9999	; 0x270f
 8018034:	6013      	str	r3, [r2, #0]
 8018036:	9b00      	ldr	r3, [sp, #0]
 8018038:	b923      	cbnz	r3, 8018044 <_dtoa_r+0x84>
 801803a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801803e:	2800      	cmp	r0, #0
 8018040:	f000 8542 	beq.w	8018ac8 <_dtoa_r+0xb08>
 8018044:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018046:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80182f4 <_dtoa_r+0x334>
 801804a:	2b00      	cmp	r3, #0
 801804c:	f000 8544 	beq.w	8018ad8 <_dtoa_r+0xb18>
 8018050:	f10b 0303 	add.w	r3, fp, #3
 8018054:	f000 bd3e 	b.w	8018ad4 <_dtoa_r+0xb14>
 8018058:	e9dd 6700 	ldrd	r6, r7, [sp]
 801805c:	2200      	movs	r2, #0
 801805e:	2300      	movs	r3, #0
 8018060:	4630      	mov	r0, r6
 8018062:	4639      	mov	r1, r7
 8018064:	f7f0 fc68 	bl	8008938 <__aeabi_dcmpeq>
 8018068:	4681      	mov	r9, r0
 801806a:	b168      	cbz	r0, 8018088 <_dtoa_r+0xc8>
 801806c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801806e:	2301      	movs	r3, #1
 8018070:	6013      	str	r3, [r2, #0]
 8018072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018074:	2b00      	cmp	r3, #0
 8018076:	f000 8524 	beq.w	8018ac2 <_dtoa_r+0xb02>
 801807a:	4b9a      	ldr	r3, [pc, #616]	; (80182e4 <_dtoa_r+0x324>)
 801807c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801807e:	f103 3bff 	add.w	fp, r3, #4294967295
 8018082:	6013      	str	r3, [r2, #0]
 8018084:	f000 bd28 	b.w	8018ad8 <_dtoa_r+0xb18>
 8018088:	aa14      	add	r2, sp, #80	; 0x50
 801808a:	a915      	add	r1, sp, #84	; 0x54
 801808c:	ec47 6b10 	vmov	d0, r6, r7
 8018090:	4620      	mov	r0, r4
 8018092:	f001 fc3f 	bl	8019914 <__d2b>
 8018096:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801809a:	9004      	str	r0, [sp, #16]
 801809c:	2d00      	cmp	r5, #0
 801809e:	d07c      	beq.n	801819a <_dtoa_r+0x1da>
 80180a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80180a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80180a8:	46b2      	mov	sl, r6
 80180aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80180ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80180b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80180b6:	2200      	movs	r2, #0
 80180b8:	4b8b      	ldr	r3, [pc, #556]	; (80182e8 <_dtoa_r+0x328>)
 80180ba:	4650      	mov	r0, sl
 80180bc:	4659      	mov	r1, fp
 80180be:	f7f0 f81b 	bl	80080f8 <__aeabi_dsub>
 80180c2:	a381      	add	r3, pc, #516	; (adr r3, 80182c8 <_dtoa_r+0x308>)
 80180c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180c8:	f7f0 f9ce 	bl	8008468 <__aeabi_dmul>
 80180cc:	a380      	add	r3, pc, #512	; (adr r3, 80182d0 <_dtoa_r+0x310>)
 80180ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d2:	f7f0 f813 	bl	80080fc <__adddf3>
 80180d6:	4606      	mov	r6, r0
 80180d8:	4628      	mov	r0, r5
 80180da:	460f      	mov	r7, r1
 80180dc:	f7f0 f95a 	bl	8008394 <__aeabi_i2d>
 80180e0:	a37d      	add	r3, pc, #500	; (adr r3, 80182d8 <_dtoa_r+0x318>)
 80180e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180e6:	f7f0 f9bf 	bl	8008468 <__aeabi_dmul>
 80180ea:	4602      	mov	r2, r0
 80180ec:	460b      	mov	r3, r1
 80180ee:	4630      	mov	r0, r6
 80180f0:	4639      	mov	r1, r7
 80180f2:	f7f0 f803 	bl	80080fc <__adddf3>
 80180f6:	4606      	mov	r6, r0
 80180f8:	460f      	mov	r7, r1
 80180fa:	f7f0 fc65 	bl	80089c8 <__aeabi_d2iz>
 80180fe:	2200      	movs	r2, #0
 8018100:	4682      	mov	sl, r0
 8018102:	2300      	movs	r3, #0
 8018104:	4630      	mov	r0, r6
 8018106:	4639      	mov	r1, r7
 8018108:	f7f0 fc20 	bl	800894c <__aeabi_dcmplt>
 801810c:	b148      	cbz	r0, 8018122 <_dtoa_r+0x162>
 801810e:	4650      	mov	r0, sl
 8018110:	f7f0 f940 	bl	8008394 <__aeabi_i2d>
 8018114:	4632      	mov	r2, r6
 8018116:	463b      	mov	r3, r7
 8018118:	f7f0 fc0e 	bl	8008938 <__aeabi_dcmpeq>
 801811c:	b908      	cbnz	r0, 8018122 <_dtoa_r+0x162>
 801811e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018122:	f1ba 0f16 	cmp.w	sl, #22
 8018126:	d859      	bhi.n	80181dc <_dtoa_r+0x21c>
 8018128:	4970      	ldr	r1, [pc, #448]	; (80182ec <_dtoa_r+0x32c>)
 801812a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801812e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018136:	f7f0 fc27 	bl	8008988 <__aeabi_dcmpgt>
 801813a:	2800      	cmp	r0, #0
 801813c:	d050      	beq.n	80181e0 <_dtoa_r+0x220>
 801813e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018142:	2300      	movs	r3, #0
 8018144:	930f      	str	r3, [sp, #60]	; 0x3c
 8018146:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018148:	1b5d      	subs	r5, r3, r5
 801814a:	f1b5 0801 	subs.w	r8, r5, #1
 801814e:	bf49      	itett	mi
 8018150:	f1c5 0301 	rsbmi	r3, r5, #1
 8018154:	2300      	movpl	r3, #0
 8018156:	9305      	strmi	r3, [sp, #20]
 8018158:	f04f 0800 	movmi.w	r8, #0
 801815c:	bf58      	it	pl
 801815e:	9305      	strpl	r3, [sp, #20]
 8018160:	f1ba 0f00 	cmp.w	sl, #0
 8018164:	db3e      	blt.n	80181e4 <_dtoa_r+0x224>
 8018166:	2300      	movs	r3, #0
 8018168:	44d0      	add	r8, sl
 801816a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801816e:	9307      	str	r3, [sp, #28]
 8018170:	9b06      	ldr	r3, [sp, #24]
 8018172:	2b09      	cmp	r3, #9
 8018174:	f200 8090 	bhi.w	8018298 <_dtoa_r+0x2d8>
 8018178:	2b05      	cmp	r3, #5
 801817a:	bfc4      	itt	gt
 801817c:	3b04      	subgt	r3, #4
 801817e:	9306      	strgt	r3, [sp, #24]
 8018180:	9b06      	ldr	r3, [sp, #24]
 8018182:	f1a3 0302 	sub.w	r3, r3, #2
 8018186:	bfcc      	ite	gt
 8018188:	2500      	movgt	r5, #0
 801818a:	2501      	movle	r5, #1
 801818c:	2b03      	cmp	r3, #3
 801818e:	f200 808f 	bhi.w	80182b0 <_dtoa_r+0x2f0>
 8018192:	e8df f003 	tbb	[pc, r3]
 8018196:	7f7d      	.short	0x7f7d
 8018198:	7131      	.short	0x7131
 801819a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801819e:	441d      	add	r5, r3
 80181a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80181a4:	2820      	cmp	r0, #32
 80181a6:	dd13      	ble.n	80181d0 <_dtoa_r+0x210>
 80181a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80181ac:	9b00      	ldr	r3, [sp, #0]
 80181ae:	fa08 f800 	lsl.w	r8, r8, r0
 80181b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80181b6:	fa23 f000 	lsr.w	r0, r3, r0
 80181ba:	ea48 0000 	orr.w	r0, r8, r0
 80181be:	f7f0 f8d9 	bl	8008374 <__aeabi_ui2d>
 80181c2:	2301      	movs	r3, #1
 80181c4:	4682      	mov	sl, r0
 80181c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80181ca:	3d01      	subs	r5, #1
 80181cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80181ce:	e772      	b.n	80180b6 <_dtoa_r+0xf6>
 80181d0:	9b00      	ldr	r3, [sp, #0]
 80181d2:	f1c0 0020 	rsb	r0, r0, #32
 80181d6:	fa03 f000 	lsl.w	r0, r3, r0
 80181da:	e7f0      	b.n	80181be <_dtoa_r+0x1fe>
 80181dc:	2301      	movs	r3, #1
 80181de:	e7b1      	b.n	8018144 <_dtoa_r+0x184>
 80181e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80181e2:	e7b0      	b.n	8018146 <_dtoa_r+0x186>
 80181e4:	9b05      	ldr	r3, [sp, #20]
 80181e6:	eba3 030a 	sub.w	r3, r3, sl
 80181ea:	9305      	str	r3, [sp, #20]
 80181ec:	f1ca 0300 	rsb	r3, sl, #0
 80181f0:	9307      	str	r3, [sp, #28]
 80181f2:	2300      	movs	r3, #0
 80181f4:	930e      	str	r3, [sp, #56]	; 0x38
 80181f6:	e7bb      	b.n	8018170 <_dtoa_r+0x1b0>
 80181f8:	2301      	movs	r3, #1
 80181fa:	930a      	str	r3, [sp, #40]	; 0x28
 80181fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181fe:	2b00      	cmp	r3, #0
 8018200:	dd59      	ble.n	80182b6 <_dtoa_r+0x2f6>
 8018202:	9302      	str	r3, [sp, #8]
 8018204:	4699      	mov	r9, r3
 8018206:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018208:	2200      	movs	r2, #0
 801820a:	6072      	str	r2, [r6, #4]
 801820c:	2204      	movs	r2, #4
 801820e:	f102 0014 	add.w	r0, r2, #20
 8018212:	4298      	cmp	r0, r3
 8018214:	6871      	ldr	r1, [r6, #4]
 8018216:	d953      	bls.n	80182c0 <_dtoa_r+0x300>
 8018218:	4620      	mov	r0, r4
 801821a:	f001 f83a 	bl	8019292 <_Balloc>
 801821e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018220:	6030      	str	r0, [r6, #0]
 8018222:	f1b9 0f0e 	cmp.w	r9, #14
 8018226:	f8d3 b000 	ldr.w	fp, [r3]
 801822a:	f200 80e6 	bhi.w	80183fa <_dtoa_r+0x43a>
 801822e:	2d00      	cmp	r5, #0
 8018230:	f000 80e3 	beq.w	80183fa <_dtoa_r+0x43a>
 8018234:	ed9d 7b00 	vldr	d7, [sp]
 8018238:	f1ba 0f00 	cmp.w	sl, #0
 801823c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8018240:	dd74      	ble.n	801832c <_dtoa_r+0x36c>
 8018242:	4a2a      	ldr	r2, [pc, #168]	; (80182ec <_dtoa_r+0x32c>)
 8018244:	f00a 030f 	and.w	r3, sl, #15
 8018248:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801824c:	ed93 7b00 	vldr	d7, [r3]
 8018250:	ea4f 162a 	mov.w	r6, sl, asr #4
 8018254:	06f0      	lsls	r0, r6, #27
 8018256:	ed8d 7b08 	vstr	d7, [sp, #32]
 801825a:	d565      	bpl.n	8018328 <_dtoa_r+0x368>
 801825c:	4b24      	ldr	r3, [pc, #144]	; (80182f0 <_dtoa_r+0x330>)
 801825e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018262:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018266:	f7f0 fa29 	bl	80086bc <__aeabi_ddiv>
 801826a:	e9cd 0100 	strd	r0, r1, [sp]
 801826e:	f006 060f 	and.w	r6, r6, #15
 8018272:	2503      	movs	r5, #3
 8018274:	4f1e      	ldr	r7, [pc, #120]	; (80182f0 <_dtoa_r+0x330>)
 8018276:	e04c      	b.n	8018312 <_dtoa_r+0x352>
 8018278:	2301      	movs	r3, #1
 801827a:	930a      	str	r3, [sp, #40]	; 0x28
 801827c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801827e:	4453      	add	r3, sl
 8018280:	f103 0901 	add.w	r9, r3, #1
 8018284:	9302      	str	r3, [sp, #8]
 8018286:	464b      	mov	r3, r9
 8018288:	2b01      	cmp	r3, #1
 801828a:	bfb8      	it	lt
 801828c:	2301      	movlt	r3, #1
 801828e:	e7ba      	b.n	8018206 <_dtoa_r+0x246>
 8018290:	2300      	movs	r3, #0
 8018292:	e7b2      	b.n	80181fa <_dtoa_r+0x23a>
 8018294:	2300      	movs	r3, #0
 8018296:	e7f0      	b.n	801827a <_dtoa_r+0x2ba>
 8018298:	2501      	movs	r5, #1
 801829a:	2300      	movs	r3, #0
 801829c:	9306      	str	r3, [sp, #24]
 801829e:	950a      	str	r5, [sp, #40]	; 0x28
 80182a0:	f04f 33ff 	mov.w	r3, #4294967295
 80182a4:	9302      	str	r3, [sp, #8]
 80182a6:	4699      	mov	r9, r3
 80182a8:	2200      	movs	r2, #0
 80182aa:	2312      	movs	r3, #18
 80182ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80182ae:	e7aa      	b.n	8018206 <_dtoa_r+0x246>
 80182b0:	2301      	movs	r3, #1
 80182b2:	930a      	str	r3, [sp, #40]	; 0x28
 80182b4:	e7f4      	b.n	80182a0 <_dtoa_r+0x2e0>
 80182b6:	2301      	movs	r3, #1
 80182b8:	9302      	str	r3, [sp, #8]
 80182ba:	4699      	mov	r9, r3
 80182bc:	461a      	mov	r2, r3
 80182be:	e7f5      	b.n	80182ac <_dtoa_r+0x2ec>
 80182c0:	3101      	adds	r1, #1
 80182c2:	6071      	str	r1, [r6, #4]
 80182c4:	0052      	lsls	r2, r2, #1
 80182c6:	e7a2      	b.n	801820e <_dtoa_r+0x24e>
 80182c8:	636f4361 	.word	0x636f4361
 80182cc:	3fd287a7 	.word	0x3fd287a7
 80182d0:	8b60c8b3 	.word	0x8b60c8b3
 80182d4:	3fc68a28 	.word	0x3fc68a28
 80182d8:	509f79fb 	.word	0x509f79fb
 80182dc:	3fd34413 	.word	0x3fd34413
 80182e0:	7ff00000 	.word	0x7ff00000
 80182e4:	0801a38b 	.word	0x0801a38b
 80182e8:	3ff80000 	.word	0x3ff80000
 80182ec:	0801a420 	.word	0x0801a420
 80182f0:	0801a3f8 	.word	0x0801a3f8
 80182f4:	0801a3e9 	.word	0x0801a3e9
 80182f8:	07f1      	lsls	r1, r6, #31
 80182fa:	d508      	bpl.n	801830e <_dtoa_r+0x34e>
 80182fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018304:	f7f0 f8b0 	bl	8008468 <__aeabi_dmul>
 8018308:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801830c:	3501      	adds	r5, #1
 801830e:	1076      	asrs	r6, r6, #1
 8018310:	3708      	adds	r7, #8
 8018312:	2e00      	cmp	r6, #0
 8018314:	d1f0      	bne.n	80182f8 <_dtoa_r+0x338>
 8018316:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801831a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801831e:	f7f0 f9cd 	bl	80086bc <__aeabi_ddiv>
 8018322:	e9cd 0100 	strd	r0, r1, [sp]
 8018326:	e01a      	b.n	801835e <_dtoa_r+0x39e>
 8018328:	2502      	movs	r5, #2
 801832a:	e7a3      	b.n	8018274 <_dtoa_r+0x2b4>
 801832c:	f000 80a0 	beq.w	8018470 <_dtoa_r+0x4b0>
 8018330:	f1ca 0600 	rsb	r6, sl, #0
 8018334:	4b9f      	ldr	r3, [pc, #636]	; (80185b4 <_dtoa_r+0x5f4>)
 8018336:	4fa0      	ldr	r7, [pc, #640]	; (80185b8 <_dtoa_r+0x5f8>)
 8018338:	f006 020f 	and.w	r2, r6, #15
 801833c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018344:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018348:	f7f0 f88e 	bl	8008468 <__aeabi_dmul>
 801834c:	e9cd 0100 	strd	r0, r1, [sp]
 8018350:	1136      	asrs	r6, r6, #4
 8018352:	2300      	movs	r3, #0
 8018354:	2502      	movs	r5, #2
 8018356:	2e00      	cmp	r6, #0
 8018358:	d17f      	bne.n	801845a <_dtoa_r+0x49a>
 801835a:	2b00      	cmp	r3, #0
 801835c:	d1e1      	bne.n	8018322 <_dtoa_r+0x362>
 801835e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018360:	2b00      	cmp	r3, #0
 8018362:	f000 8087 	beq.w	8018474 <_dtoa_r+0x4b4>
 8018366:	e9dd 6700 	ldrd	r6, r7, [sp]
 801836a:	2200      	movs	r2, #0
 801836c:	4b93      	ldr	r3, [pc, #588]	; (80185bc <_dtoa_r+0x5fc>)
 801836e:	4630      	mov	r0, r6
 8018370:	4639      	mov	r1, r7
 8018372:	f7f0 faeb 	bl	800894c <__aeabi_dcmplt>
 8018376:	2800      	cmp	r0, #0
 8018378:	d07c      	beq.n	8018474 <_dtoa_r+0x4b4>
 801837a:	f1b9 0f00 	cmp.w	r9, #0
 801837e:	d079      	beq.n	8018474 <_dtoa_r+0x4b4>
 8018380:	9b02      	ldr	r3, [sp, #8]
 8018382:	2b00      	cmp	r3, #0
 8018384:	dd35      	ble.n	80183f2 <_dtoa_r+0x432>
 8018386:	f10a 33ff 	add.w	r3, sl, #4294967295
 801838a:	9308      	str	r3, [sp, #32]
 801838c:	4639      	mov	r1, r7
 801838e:	2200      	movs	r2, #0
 8018390:	4b8b      	ldr	r3, [pc, #556]	; (80185c0 <_dtoa_r+0x600>)
 8018392:	4630      	mov	r0, r6
 8018394:	f7f0 f868 	bl	8008468 <__aeabi_dmul>
 8018398:	e9cd 0100 	strd	r0, r1, [sp]
 801839c:	9f02      	ldr	r7, [sp, #8]
 801839e:	3501      	adds	r5, #1
 80183a0:	4628      	mov	r0, r5
 80183a2:	f7ef fff7 	bl	8008394 <__aeabi_i2d>
 80183a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80183aa:	f7f0 f85d 	bl	8008468 <__aeabi_dmul>
 80183ae:	2200      	movs	r2, #0
 80183b0:	4b84      	ldr	r3, [pc, #528]	; (80185c4 <_dtoa_r+0x604>)
 80183b2:	f7ef fea3 	bl	80080fc <__adddf3>
 80183b6:	4605      	mov	r5, r0
 80183b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80183bc:	2f00      	cmp	r7, #0
 80183be:	d15d      	bne.n	801847c <_dtoa_r+0x4bc>
 80183c0:	2200      	movs	r2, #0
 80183c2:	4b81      	ldr	r3, [pc, #516]	; (80185c8 <_dtoa_r+0x608>)
 80183c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183c8:	f7ef fe96 	bl	80080f8 <__aeabi_dsub>
 80183cc:	462a      	mov	r2, r5
 80183ce:	4633      	mov	r3, r6
 80183d0:	e9cd 0100 	strd	r0, r1, [sp]
 80183d4:	f7f0 fad8 	bl	8008988 <__aeabi_dcmpgt>
 80183d8:	2800      	cmp	r0, #0
 80183da:	f040 8288 	bne.w	80188ee <_dtoa_r+0x92e>
 80183de:	462a      	mov	r2, r5
 80183e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80183e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183e8:	f7f0 fab0 	bl	800894c <__aeabi_dcmplt>
 80183ec:	2800      	cmp	r0, #0
 80183ee:	f040 827c 	bne.w	80188ea <_dtoa_r+0x92a>
 80183f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80183f6:	e9cd 2300 	strd	r2, r3, [sp]
 80183fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	f2c0 8150 	blt.w	80186a2 <_dtoa_r+0x6e2>
 8018402:	f1ba 0f0e 	cmp.w	sl, #14
 8018406:	f300 814c 	bgt.w	80186a2 <_dtoa_r+0x6e2>
 801840a:	4b6a      	ldr	r3, [pc, #424]	; (80185b4 <_dtoa_r+0x5f4>)
 801840c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018410:	ed93 7b00 	vldr	d7, [r3]
 8018414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018416:	2b00      	cmp	r3, #0
 8018418:	ed8d 7b02 	vstr	d7, [sp, #8]
 801841c:	f280 80d8 	bge.w	80185d0 <_dtoa_r+0x610>
 8018420:	f1b9 0f00 	cmp.w	r9, #0
 8018424:	f300 80d4 	bgt.w	80185d0 <_dtoa_r+0x610>
 8018428:	f040 825e 	bne.w	80188e8 <_dtoa_r+0x928>
 801842c:	2200      	movs	r2, #0
 801842e:	4b66      	ldr	r3, [pc, #408]	; (80185c8 <_dtoa_r+0x608>)
 8018430:	ec51 0b17 	vmov	r0, r1, d7
 8018434:	f7f0 f818 	bl	8008468 <__aeabi_dmul>
 8018438:	e9dd 2300 	ldrd	r2, r3, [sp]
 801843c:	f7f0 fa9a 	bl	8008974 <__aeabi_dcmpge>
 8018440:	464f      	mov	r7, r9
 8018442:	464e      	mov	r6, r9
 8018444:	2800      	cmp	r0, #0
 8018446:	f040 8234 	bne.w	80188b2 <_dtoa_r+0x8f2>
 801844a:	2331      	movs	r3, #49	; 0x31
 801844c:	f10b 0501 	add.w	r5, fp, #1
 8018450:	f88b 3000 	strb.w	r3, [fp]
 8018454:	f10a 0a01 	add.w	sl, sl, #1
 8018458:	e22f      	b.n	80188ba <_dtoa_r+0x8fa>
 801845a:	07f2      	lsls	r2, r6, #31
 801845c:	d505      	bpl.n	801846a <_dtoa_r+0x4aa>
 801845e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018462:	f7f0 f801 	bl	8008468 <__aeabi_dmul>
 8018466:	3501      	adds	r5, #1
 8018468:	2301      	movs	r3, #1
 801846a:	1076      	asrs	r6, r6, #1
 801846c:	3708      	adds	r7, #8
 801846e:	e772      	b.n	8018356 <_dtoa_r+0x396>
 8018470:	2502      	movs	r5, #2
 8018472:	e774      	b.n	801835e <_dtoa_r+0x39e>
 8018474:	f8cd a020 	str.w	sl, [sp, #32]
 8018478:	464f      	mov	r7, r9
 801847a:	e791      	b.n	80183a0 <_dtoa_r+0x3e0>
 801847c:	4b4d      	ldr	r3, [pc, #308]	; (80185b4 <_dtoa_r+0x5f4>)
 801847e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8018482:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8018486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018488:	2b00      	cmp	r3, #0
 801848a:	d047      	beq.n	801851c <_dtoa_r+0x55c>
 801848c:	4602      	mov	r2, r0
 801848e:	460b      	mov	r3, r1
 8018490:	2000      	movs	r0, #0
 8018492:	494e      	ldr	r1, [pc, #312]	; (80185cc <_dtoa_r+0x60c>)
 8018494:	f7f0 f912 	bl	80086bc <__aeabi_ddiv>
 8018498:	462a      	mov	r2, r5
 801849a:	4633      	mov	r3, r6
 801849c:	f7ef fe2c 	bl	80080f8 <__aeabi_dsub>
 80184a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80184a4:	465d      	mov	r5, fp
 80184a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184aa:	f7f0 fa8d 	bl	80089c8 <__aeabi_d2iz>
 80184ae:	4606      	mov	r6, r0
 80184b0:	f7ef ff70 	bl	8008394 <__aeabi_i2d>
 80184b4:	4602      	mov	r2, r0
 80184b6:	460b      	mov	r3, r1
 80184b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184bc:	f7ef fe1c 	bl	80080f8 <__aeabi_dsub>
 80184c0:	3630      	adds	r6, #48	; 0x30
 80184c2:	f805 6b01 	strb.w	r6, [r5], #1
 80184c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80184ca:	e9cd 0100 	strd	r0, r1, [sp]
 80184ce:	f7f0 fa3d 	bl	800894c <__aeabi_dcmplt>
 80184d2:	2800      	cmp	r0, #0
 80184d4:	d163      	bne.n	801859e <_dtoa_r+0x5de>
 80184d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80184da:	2000      	movs	r0, #0
 80184dc:	4937      	ldr	r1, [pc, #220]	; (80185bc <_dtoa_r+0x5fc>)
 80184de:	f7ef fe0b 	bl	80080f8 <__aeabi_dsub>
 80184e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80184e6:	f7f0 fa31 	bl	800894c <__aeabi_dcmplt>
 80184ea:	2800      	cmp	r0, #0
 80184ec:	f040 80b7 	bne.w	801865e <_dtoa_r+0x69e>
 80184f0:	eba5 030b 	sub.w	r3, r5, fp
 80184f4:	429f      	cmp	r7, r3
 80184f6:	f77f af7c 	ble.w	80183f2 <_dtoa_r+0x432>
 80184fa:	2200      	movs	r2, #0
 80184fc:	4b30      	ldr	r3, [pc, #192]	; (80185c0 <_dtoa_r+0x600>)
 80184fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018502:	f7ef ffb1 	bl	8008468 <__aeabi_dmul>
 8018506:	2200      	movs	r2, #0
 8018508:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801850c:	4b2c      	ldr	r3, [pc, #176]	; (80185c0 <_dtoa_r+0x600>)
 801850e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018512:	f7ef ffa9 	bl	8008468 <__aeabi_dmul>
 8018516:	e9cd 0100 	strd	r0, r1, [sp]
 801851a:	e7c4      	b.n	80184a6 <_dtoa_r+0x4e6>
 801851c:	462a      	mov	r2, r5
 801851e:	4633      	mov	r3, r6
 8018520:	f7ef ffa2 	bl	8008468 <__aeabi_dmul>
 8018524:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018528:	eb0b 0507 	add.w	r5, fp, r7
 801852c:	465e      	mov	r6, fp
 801852e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018532:	f7f0 fa49 	bl	80089c8 <__aeabi_d2iz>
 8018536:	4607      	mov	r7, r0
 8018538:	f7ef ff2c 	bl	8008394 <__aeabi_i2d>
 801853c:	3730      	adds	r7, #48	; 0x30
 801853e:	4602      	mov	r2, r0
 8018540:	460b      	mov	r3, r1
 8018542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018546:	f7ef fdd7 	bl	80080f8 <__aeabi_dsub>
 801854a:	f806 7b01 	strb.w	r7, [r6], #1
 801854e:	42ae      	cmp	r6, r5
 8018550:	e9cd 0100 	strd	r0, r1, [sp]
 8018554:	f04f 0200 	mov.w	r2, #0
 8018558:	d126      	bne.n	80185a8 <_dtoa_r+0x5e8>
 801855a:	4b1c      	ldr	r3, [pc, #112]	; (80185cc <_dtoa_r+0x60c>)
 801855c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018560:	f7ef fdcc 	bl	80080fc <__adddf3>
 8018564:	4602      	mov	r2, r0
 8018566:	460b      	mov	r3, r1
 8018568:	e9dd 0100 	ldrd	r0, r1, [sp]
 801856c:	f7f0 fa0c 	bl	8008988 <__aeabi_dcmpgt>
 8018570:	2800      	cmp	r0, #0
 8018572:	d174      	bne.n	801865e <_dtoa_r+0x69e>
 8018574:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018578:	2000      	movs	r0, #0
 801857a:	4914      	ldr	r1, [pc, #80]	; (80185cc <_dtoa_r+0x60c>)
 801857c:	f7ef fdbc 	bl	80080f8 <__aeabi_dsub>
 8018580:	4602      	mov	r2, r0
 8018582:	460b      	mov	r3, r1
 8018584:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018588:	f7f0 f9e0 	bl	800894c <__aeabi_dcmplt>
 801858c:	2800      	cmp	r0, #0
 801858e:	f43f af30 	beq.w	80183f2 <_dtoa_r+0x432>
 8018592:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018596:	2b30      	cmp	r3, #48	; 0x30
 8018598:	f105 32ff 	add.w	r2, r5, #4294967295
 801859c:	d002      	beq.n	80185a4 <_dtoa_r+0x5e4>
 801859e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80185a2:	e04a      	b.n	801863a <_dtoa_r+0x67a>
 80185a4:	4615      	mov	r5, r2
 80185a6:	e7f4      	b.n	8018592 <_dtoa_r+0x5d2>
 80185a8:	4b05      	ldr	r3, [pc, #20]	; (80185c0 <_dtoa_r+0x600>)
 80185aa:	f7ef ff5d 	bl	8008468 <__aeabi_dmul>
 80185ae:	e9cd 0100 	strd	r0, r1, [sp]
 80185b2:	e7bc      	b.n	801852e <_dtoa_r+0x56e>
 80185b4:	0801a420 	.word	0x0801a420
 80185b8:	0801a3f8 	.word	0x0801a3f8
 80185bc:	3ff00000 	.word	0x3ff00000
 80185c0:	40240000 	.word	0x40240000
 80185c4:	401c0000 	.word	0x401c0000
 80185c8:	40140000 	.word	0x40140000
 80185cc:	3fe00000 	.word	0x3fe00000
 80185d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80185d4:	465d      	mov	r5, fp
 80185d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80185da:	4630      	mov	r0, r6
 80185dc:	4639      	mov	r1, r7
 80185de:	f7f0 f86d 	bl	80086bc <__aeabi_ddiv>
 80185e2:	f7f0 f9f1 	bl	80089c8 <__aeabi_d2iz>
 80185e6:	4680      	mov	r8, r0
 80185e8:	f7ef fed4 	bl	8008394 <__aeabi_i2d>
 80185ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80185f0:	f7ef ff3a 	bl	8008468 <__aeabi_dmul>
 80185f4:	4602      	mov	r2, r0
 80185f6:	460b      	mov	r3, r1
 80185f8:	4630      	mov	r0, r6
 80185fa:	4639      	mov	r1, r7
 80185fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018600:	f7ef fd7a 	bl	80080f8 <__aeabi_dsub>
 8018604:	f805 6b01 	strb.w	r6, [r5], #1
 8018608:	eba5 060b 	sub.w	r6, r5, fp
 801860c:	45b1      	cmp	r9, r6
 801860e:	4602      	mov	r2, r0
 8018610:	460b      	mov	r3, r1
 8018612:	d139      	bne.n	8018688 <_dtoa_r+0x6c8>
 8018614:	f7ef fd72 	bl	80080fc <__adddf3>
 8018618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801861c:	4606      	mov	r6, r0
 801861e:	460f      	mov	r7, r1
 8018620:	f7f0 f9b2 	bl	8008988 <__aeabi_dcmpgt>
 8018624:	b9c8      	cbnz	r0, 801865a <_dtoa_r+0x69a>
 8018626:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801862a:	4630      	mov	r0, r6
 801862c:	4639      	mov	r1, r7
 801862e:	f7f0 f983 	bl	8008938 <__aeabi_dcmpeq>
 8018632:	b110      	cbz	r0, 801863a <_dtoa_r+0x67a>
 8018634:	f018 0f01 	tst.w	r8, #1
 8018638:	d10f      	bne.n	801865a <_dtoa_r+0x69a>
 801863a:	9904      	ldr	r1, [sp, #16]
 801863c:	4620      	mov	r0, r4
 801863e:	f000 fe5c 	bl	80192fa <_Bfree>
 8018642:	2300      	movs	r3, #0
 8018644:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018646:	702b      	strb	r3, [r5, #0]
 8018648:	f10a 0301 	add.w	r3, sl, #1
 801864c:	6013      	str	r3, [r2, #0]
 801864e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018650:	2b00      	cmp	r3, #0
 8018652:	f000 8241 	beq.w	8018ad8 <_dtoa_r+0xb18>
 8018656:	601d      	str	r5, [r3, #0]
 8018658:	e23e      	b.n	8018ad8 <_dtoa_r+0xb18>
 801865a:	f8cd a020 	str.w	sl, [sp, #32]
 801865e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018662:	2a39      	cmp	r2, #57	; 0x39
 8018664:	f105 33ff 	add.w	r3, r5, #4294967295
 8018668:	d108      	bne.n	801867c <_dtoa_r+0x6bc>
 801866a:	459b      	cmp	fp, r3
 801866c:	d10a      	bne.n	8018684 <_dtoa_r+0x6c4>
 801866e:	9b08      	ldr	r3, [sp, #32]
 8018670:	3301      	adds	r3, #1
 8018672:	9308      	str	r3, [sp, #32]
 8018674:	2330      	movs	r3, #48	; 0x30
 8018676:	f88b 3000 	strb.w	r3, [fp]
 801867a:	465b      	mov	r3, fp
 801867c:	781a      	ldrb	r2, [r3, #0]
 801867e:	3201      	adds	r2, #1
 8018680:	701a      	strb	r2, [r3, #0]
 8018682:	e78c      	b.n	801859e <_dtoa_r+0x5de>
 8018684:	461d      	mov	r5, r3
 8018686:	e7ea      	b.n	801865e <_dtoa_r+0x69e>
 8018688:	2200      	movs	r2, #0
 801868a:	4b9b      	ldr	r3, [pc, #620]	; (80188f8 <_dtoa_r+0x938>)
 801868c:	f7ef feec 	bl	8008468 <__aeabi_dmul>
 8018690:	2200      	movs	r2, #0
 8018692:	2300      	movs	r3, #0
 8018694:	4606      	mov	r6, r0
 8018696:	460f      	mov	r7, r1
 8018698:	f7f0 f94e 	bl	8008938 <__aeabi_dcmpeq>
 801869c:	2800      	cmp	r0, #0
 801869e:	d09a      	beq.n	80185d6 <_dtoa_r+0x616>
 80186a0:	e7cb      	b.n	801863a <_dtoa_r+0x67a>
 80186a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186a4:	2a00      	cmp	r2, #0
 80186a6:	f000 808b 	beq.w	80187c0 <_dtoa_r+0x800>
 80186aa:	9a06      	ldr	r2, [sp, #24]
 80186ac:	2a01      	cmp	r2, #1
 80186ae:	dc6e      	bgt.n	801878e <_dtoa_r+0x7ce>
 80186b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80186b2:	2a00      	cmp	r2, #0
 80186b4:	d067      	beq.n	8018786 <_dtoa_r+0x7c6>
 80186b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80186ba:	9f07      	ldr	r7, [sp, #28]
 80186bc:	9d05      	ldr	r5, [sp, #20]
 80186be:	9a05      	ldr	r2, [sp, #20]
 80186c0:	2101      	movs	r1, #1
 80186c2:	441a      	add	r2, r3
 80186c4:	4620      	mov	r0, r4
 80186c6:	9205      	str	r2, [sp, #20]
 80186c8:	4498      	add	r8, r3
 80186ca:	f000 fef4 	bl	80194b6 <__i2b>
 80186ce:	4606      	mov	r6, r0
 80186d0:	2d00      	cmp	r5, #0
 80186d2:	dd0c      	ble.n	80186ee <_dtoa_r+0x72e>
 80186d4:	f1b8 0f00 	cmp.w	r8, #0
 80186d8:	dd09      	ble.n	80186ee <_dtoa_r+0x72e>
 80186da:	4545      	cmp	r5, r8
 80186dc:	9a05      	ldr	r2, [sp, #20]
 80186de:	462b      	mov	r3, r5
 80186e0:	bfa8      	it	ge
 80186e2:	4643      	movge	r3, r8
 80186e4:	1ad2      	subs	r2, r2, r3
 80186e6:	9205      	str	r2, [sp, #20]
 80186e8:	1aed      	subs	r5, r5, r3
 80186ea:	eba8 0803 	sub.w	r8, r8, r3
 80186ee:	9b07      	ldr	r3, [sp, #28]
 80186f0:	b1eb      	cbz	r3, 801872e <_dtoa_r+0x76e>
 80186f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d067      	beq.n	80187c8 <_dtoa_r+0x808>
 80186f8:	b18f      	cbz	r7, 801871e <_dtoa_r+0x75e>
 80186fa:	4631      	mov	r1, r6
 80186fc:	463a      	mov	r2, r7
 80186fe:	4620      	mov	r0, r4
 8018700:	f000 ff78 	bl	80195f4 <__pow5mult>
 8018704:	9a04      	ldr	r2, [sp, #16]
 8018706:	4601      	mov	r1, r0
 8018708:	4606      	mov	r6, r0
 801870a:	4620      	mov	r0, r4
 801870c:	f000 fedc 	bl	80194c8 <__multiply>
 8018710:	9904      	ldr	r1, [sp, #16]
 8018712:	9008      	str	r0, [sp, #32]
 8018714:	4620      	mov	r0, r4
 8018716:	f000 fdf0 	bl	80192fa <_Bfree>
 801871a:	9b08      	ldr	r3, [sp, #32]
 801871c:	9304      	str	r3, [sp, #16]
 801871e:	9b07      	ldr	r3, [sp, #28]
 8018720:	1bda      	subs	r2, r3, r7
 8018722:	d004      	beq.n	801872e <_dtoa_r+0x76e>
 8018724:	9904      	ldr	r1, [sp, #16]
 8018726:	4620      	mov	r0, r4
 8018728:	f000 ff64 	bl	80195f4 <__pow5mult>
 801872c:	9004      	str	r0, [sp, #16]
 801872e:	2101      	movs	r1, #1
 8018730:	4620      	mov	r0, r4
 8018732:	f000 fec0 	bl	80194b6 <__i2b>
 8018736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018738:	4607      	mov	r7, r0
 801873a:	2b00      	cmp	r3, #0
 801873c:	f000 81d0 	beq.w	8018ae0 <_dtoa_r+0xb20>
 8018740:	461a      	mov	r2, r3
 8018742:	4601      	mov	r1, r0
 8018744:	4620      	mov	r0, r4
 8018746:	f000 ff55 	bl	80195f4 <__pow5mult>
 801874a:	9b06      	ldr	r3, [sp, #24]
 801874c:	2b01      	cmp	r3, #1
 801874e:	4607      	mov	r7, r0
 8018750:	dc40      	bgt.n	80187d4 <_dtoa_r+0x814>
 8018752:	9b00      	ldr	r3, [sp, #0]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d139      	bne.n	80187cc <_dtoa_r+0x80c>
 8018758:	9b01      	ldr	r3, [sp, #4]
 801875a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801875e:	2b00      	cmp	r3, #0
 8018760:	d136      	bne.n	80187d0 <_dtoa_r+0x810>
 8018762:	9b01      	ldr	r3, [sp, #4]
 8018764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018768:	0d1b      	lsrs	r3, r3, #20
 801876a:	051b      	lsls	r3, r3, #20
 801876c:	b12b      	cbz	r3, 801877a <_dtoa_r+0x7ba>
 801876e:	9b05      	ldr	r3, [sp, #20]
 8018770:	3301      	adds	r3, #1
 8018772:	9305      	str	r3, [sp, #20]
 8018774:	f108 0801 	add.w	r8, r8, #1
 8018778:	2301      	movs	r3, #1
 801877a:	9307      	str	r3, [sp, #28]
 801877c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801877e:	2b00      	cmp	r3, #0
 8018780:	d12a      	bne.n	80187d8 <_dtoa_r+0x818>
 8018782:	2001      	movs	r0, #1
 8018784:	e030      	b.n	80187e8 <_dtoa_r+0x828>
 8018786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018788:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801878c:	e795      	b.n	80186ba <_dtoa_r+0x6fa>
 801878e:	9b07      	ldr	r3, [sp, #28]
 8018790:	f109 37ff 	add.w	r7, r9, #4294967295
 8018794:	42bb      	cmp	r3, r7
 8018796:	bfbf      	itttt	lt
 8018798:	9b07      	ldrlt	r3, [sp, #28]
 801879a:	9707      	strlt	r7, [sp, #28]
 801879c:	1afa      	sublt	r2, r7, r3
 801879e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80187a0:	bfbb      	ittet	lt
 80187a2:	189b      	addlt	r3, r3, r2
 80187a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80187a6:	1bdf      	subge	r7, r3, r7
 80187a8:	2700      	movlt	r7, #0
 80187aa:	f1b9 0f00 	cmp.w	r9, #0
 80187ae:	bfb5      	itete	lt
 80187b0:	9b05      	ldrlt	r3, [sp, #20]
 80187b2:	9d05      	ldrge	r5, [sp, #20]
 80187b4:	eba3 0509 	sublt.w	r5, r3, r9
 80187b8:	464b      	movge	r3, r9
 80187ba:	bfb8      	it	lt
 80187bc:	2300      	movlt	r3, #0
 80187be:	e77e      	b.n	80186be <_dtoa_r+0x6fe>
 80187c0:	9f07      	ldr	r7, [sp, #28]
 80187c2:	9d05      	ldr	r5, [sp, #20]
 80187c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80187c6:	e783      	b.n	80186d0 <_dtoa_r+0x710>
 80187c8:	9a07      	ldr	r2, [sp, #28]
 80187ca:	e7ab      	b.n	8018724 <_dtoa_r+0x764>
 80187cc:	2300      	movs	r3, #0
 80187ce:	e7d4      	b.n	801877a <_dtoa_r+0x7ba>
 80187d0:	9b00      	ldr	r3, [sp, #0]
 80187d2:	e7d2      	b.n	801877a <_dtoa_r+0x7ba>
 80187d4:	2300      	movs	r3, #0
 80187d6:	9307      	str	r3, [sp, #28]
 80187d8:	693b      	ldr	r3, [r7, #16]
 80187da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80187de:	6918      	ldr	r0, [r3, #16]
 80187e0:	f000 fe1b 	bl	801941a <__hi0bits>
 80187e4:	f1c0 0020 	rsb	r0, r0, #32
 80187e8:	4440      	add	r0, r8
 80187ea:	f010 001f 	ands.w	r0, r0, #31
 80187ee:	d047      	beq.n	8018880 <_dtoa_r+0x8c0>
 80187f0:	f1c0 0320 	rsb	r3, r0, #32
 80187f4:	2b04      	cmp	r3, #4
 80187f6:	dd3b      	ble.n	8018870 <_dtoa_r+0x8b0>
 80187f8:	9b05      	ldr	r3, [sp, #20]
 80187fa:	f1c0 001c 	rsb	r0, r0, #28
 80187fe:	4403      	add	r3, r0
 8018800:	9305      	str	r3, [sp, #20]
 8018802:	4405      	add	r5, r0
 8018804:	4480      	add	r8, r0
 8018806:	9b05      	ldr	r3, [sp, #20]
 8018808:	2b00      	cmp	r3, #0
 801880a:	dd05      	ble.n	8018818 <_dtoa_r+0x858>
 801880c:	461a      	mov	r2, r3
 801880e:	9904      	ldr	r1, [sp, #16]
 8018810:	4620      	mov	r0, r4
 8018812:	f000 ff3d 	bl	8019690 <__lshift>
 8018816:	9004      	str	r0, [sp, #16]
 8018818:	f1b8 0f00 	cmp.w	r8, #0
 801881c:	dd05      	ble.n	801882a <_dtoa_r+0x86a>
 801881e:	4639      	mov	r1, r7
 8018820:	4642      	mov	r2, r8
 8018822:	4620      	mov	r0, r4
 8018824:	f000 ff34 	bl	8019690 <__lshift>
 8018828:	4607      	mov	r7, r0
 801882a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801882c:	b353      	cbz	r3, 8018884 <_dtoa_r+0x8c4>
 801882e:	4639      	mov	r1, r7
 8018830:	9804      	ldr	r0, [sp, #16]
 8018832:	f000 ff81 	bl	8019738 <__mcmp>
 8018836:	2800      	cmp	r0, #0
 8018838:	da24      	bge.n	8018884 <_dtoa_r+0x8c4>
 801883a:	2300      	movs	r3, #0
 801883c:	220a      	movs	r2, #10
 801883e:	9904      	ldr	r1, [sp, #16]
 8018840:	4620      	mov	r0, r4
 8018842:	f000 fd71 	bl	8019328 <__multadd>
 8018846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018848:	9004      	str	r0, [sp, #16]
 801884a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801884e:	2b00      	cmp	r3, #0
 8018850:	f000 814d 	beq.w	8018aee <_dtoa_r+0xb2e>
 8018854:	2300      	movs	r3, #0
 8018856:	4631      	mov	r1, r6
 8018858:	220a      	movs	r2, #10
 801885a:	4620      	mov	r0, r4
 801885c:	f000 fd64 	bl	8019328 <__multadd>
 8018860:	9b02      	ldr	r3, [sp, #8]
 8018862:	2b00      	cmp	r3, #0
 8018864:	4606      	mov	r6, r0
 8018866:	dc4f      	bgt.n	8018908 <_dtoa_r+0x948>
 8018868:	9b06      	ldr	r3, [sp, #24]
 801886a:	2b02      	cmp	r3, #2
 801886c:	dd4c      	ble.n	8018908 <_dtoa_r+0x948>
 801886e:	e011      	b.n	8018894 <_dtoa_r+0x8d4>
 8018870:	d0c9      	beq.n	8018806 <_dtoa_r+0x846>
 8018872:	9a05      	ldr	r2, [sp, #20]
 8018874:	331c      	adds	r3, #28
 8018876:	441a      	add	r2, r3
 8018878:	9205      	str	r2, [sp, #20]
 801887a:	441d      	add	r5, r3
 801887c:	4498      	add	r8, r3
 801887e:	e7c2      	b.n	8018806 <_dtoa_r+0x846>
 8018880:	4603      	mov	r3, r0
 8018882:	e7f6      	b.n	8018872 <_dtoa_r+0x8b2>
 8018884:	f1b9 0f00 	cmp.w	r9, #0
 8018888:	dc38      	bgt.n	80188fc <_dtoa_r+0x93c>
 801888a:	9b06      	ldr	r3, [sp, #24]
 801888c:	2b02      	cmp	r3, #2
 801888e:	dd35      	ble.n	80188fc <_dtoa_r+0x93c>
 8018890:	f8cd 9008 	str.w	r9, [sp, #8]
 8018894:	9b02      	ldr	r3, [sp, #8]
 8018896:	b963      	cbnz	r3, 80188b2 <_dtoa_r+0x8f2>
 8018898:	4639      	mov	r1, r7
 801889a:	2205      	movs	r2, #5
 801889c:	4620      	mov	r0, r4
 801889e:	f000 fd43 	bl	8019328 <__multadd>
 80188a2:	4601      	mov	r1, r0
 80188a4:	4607      	mov	r7, r0
 80188a6:	9804      	ldr	r0, [sp, #16]
 80188a8:	f000 ff46 	bl	8019738 <__mcmp>
 80188ac:	2800      	cmp	r0, #0
 80188ae:	f73f adcc 	bgt.w	801844a <_dtoa_r+0x48a>
 80188b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188b4:	465d      	mov	r5, fp
 80188b6:	ea6f 0a03 	mvn.w	sl, r3
 80188ba:	f04f 0900 	mov.w	r9, #0
 80188be:	4639      	mov	r1, r7
 80188c0:	4620      	mov	r0, r4
 80188c2:	f000 fd1a 	bl	80192fa <_Bfree>
 80188c6:	2e00      	cmp	r6, #0
 80188c8:	f43f aeb7 	beq.w	801863a <_dtoa_r+0x67a>
 80188cc:	f1b9 0f00 	cmp.w	r9, #0
 80188d0:	d005      	beq.n	80188de <_dtoa_r+0x91e>
 80188d2:	45b1      	cmp	r9, r6
 80188d4:	d003      	beq.n	80188de <_dtoa_r+0x91e>
 80188d6:	4649      	mov	r1, r9
 80188d8:	4620      	mov	r0, r4
 80188da:	f000 fd0e 	bl	80192fa <_Bfree>
 80188de:	4631      	mov	r1, r6
 80188e0:	4620      	mov	r0, r4
 80188e2:	f000 fd0a 	bl	80192fa <_Bfree>
 80188e6:	e6a8      	b.n	801863a <_dtoa_r+0x67a>
 80188e8:	2700      	movs	r7, #0
 80188ea:	463e      	mov	r6, r7
 80188ec:	e7e1      	b.n	80188b2 <_dtoa_r+0x8f2>
 80188ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80188f2:	463e      	mov	r6, r7
 80188f4:	e5a9      	b.n	801844a <_dtoa_r+0x48a>
 80188f6:	bf00      	nop
 80188f8:	40240000 	.word	0x40240000
 80188fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8018902:	2b00      	cmp	r3, #0
 8018904:	f000 80fa 	beq.w	8018afc <_dtoa_r+0xb3c>
 8018908:	2d00      	cmp	r5, #0
 801890a:	dd05      	ble.n	8018918 <_dtoa_r+0x958>
 801890c:	4631      	mov	r1, r6
 801890e:	462a      	mov	r2, r5
 8018910:	4620      	mov	r0, r4
 8018912:	f000 febd 	bl	8019690 <__lshift>
 8018916:	4606      	mov	r6, r0
 8018918:	9b07      	ldr	r3, [sp, #28]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d04c      	beq.n	80189b8 <_dtoa_r+0x9f8>
 801891e:	6871      	ldr	r1, [r6, #4]
 8018920:	4620      	mov	r0, r4
 8018922:	f000 fcb6 	bl	8019292 <_Balloc>
 8018926:	6932      	ldr	r2, [r6, #16]
 8018928:	3202      	adds	r2, #2
 801892a:	4605      	mov	r5, r0
 801892c:	0092      	lsls	r2, r2, #2
 801892e:	f106 010c 	add.w	r1, r6, #12
 8018932:	300c      	adds	r0, #12
 8018934:	f7fc fae8 	bl	8014f08 <memcpy>
 8018938:	2201      	movs	r2, #1
 801893a:	4629      	mov	r1, r5
 801893c:	4620      	mov	r0, r4
 801893e:	f000 fea7 	bl	8019690 <__lshift>
 8018942:	9b00      	ldr	r3, [sp, #0]
 8018944:	f8cd b014 	str.w	fp, [sp, #20]
 8018948:	f003 0301 	and.w	r3, r3, #1
 801894c:	46b1      	mov	r9, r6
 801894e:	9307      	str	r3, [sp, #28]
 8018950:	4606      	mov	r6, r0
 8018952:	4639      	mov	r1, r7
 8018954:	9804      	ldr	r0, [sp, #16]
 8018956:	f7ff faa7 	bl	8017ea8 <quorem>
 801895a:	4649      	mov	r1, r9
 801895c:	4605      	mov	r5, r0
 801895e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018962:	9804      	ldr	r0, [sp, #16]
 8018964:	f000 fee8 	bl	8019738 <__mcmp>
 8018968:	4632      	mov	r2, r6
 801896a:	9000      	str	r0, [sp, #0]
 801896c:	4639      	mov	r1, r7
 801896e:	4620      	mov	r0, r4
 8018970:	f000 fefc 	bl	801976c <__mdiff>
 8018974:	68c3      	ldr	r3, [r0, #12]
 8018976:	4602      	mov	r2, r0
 8018978:	bb03      	cbnz	r3, 80189bc <_dtoa_r+0x9fc>
 801897a:	4601      	mov	r1, r0
 801897c:	9008      	str	r0, [sp, #32]
 801897e:	9804      	ldr	r0, [sp, #16]
 8018980:	f000 feda 	bl	8019738 <__mcmp>
 8018984:	9a08      	ldr	r2, [sp, #32]
 8018986:	4603      	mov	r3, r0
 8018988:	4611      	mov	r1, r2
 801898a:	4620      	mov	r0, r4
 801898c:	9308      	str	r3, [sp, #32]
 801898e:	f000 fcb4 	bl	80192fa <_Bfree>
 8018992:	9b08      	ldr	r3, [sp, #32]
 8018994:	b9a3      	cbnz	r3, 80189c0 <_dtoa_r+0xa00>
 8018996:	9a06      	ldr	r2, [sp, #24]
 8018998:	b992      	cbnz	r2, 80189c0 <_dtoa_r+0xa00>
 801899a:	9a07      	ldr	r2, [sp, #28]
 801899c:	b982      	cbnz	r2, 80189c0 <_dtoa_r+0xa00>
 801899e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80189a2:	d029      	beq.n	80189f8 <_dtoa_r+0xa38>
 80189a4:	9b00      	ldr	r3, [sp, #0]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	dd01      	ble.n	80189ae <_dtoa_r+0x9ee>
 80189aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80189ae:	9b05      	ldr	r3, [sp, #20]
 80189b0:	1c5d      	adds	r5, r3, #1
 80189b2:	f883 8000 	strb.w	r8, [r3]
 80189b6:	e782      	b.n	80188be <_dtoa_r+0x8fe>
 80189b8:	4630      	mov	r0, r6
 80189ba:	e7c2      	b.n	8018942 <_dtoa_r+0x982>
 80189bc:	2301      	movs	r3, #1
 80189be:	e7e3      	b.n	8018988 <_dtoa_r+0x9c8>
 80189c0:	9a00      	ldr	r2, [sp, #0]
 80189c2:	2a00      	cmp	r2, #0
 80189c4:	db04      	blt.n	80189d0 <_dtoa_r+0xa10>
 80189c6:	d125      	bne.n	8018a14 <_dtoa_r+0xa54>
 80189c8:	9a06      	ldr	r2, [sp, #24]
 80189ca:	bb1a      	cbnz	r2, 8018a14 <_dtoa_r+0xa54>
 80189cc:	9a07      	ldr	r2, [sp, #28]
 80189ce:	bb0a      	cbnz	r2, 8018a14 <_dtoa_r+0xa54>
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	ddec      	ble.n	80189ae <_dtoa_r+0x9ee>
 80189d4:	2201      	movs	r2, #1
 80189d6:	9904      	ldr	r1, [sp, #16]
 80189d8:	4620      	mov	r0, r4
 80189da:	f000 fe59 	bl	8019690 <__lshift>
 80189de:	4639      	mov	r1, r7
 80189e0:	9004      	str	r0, [sp, #16]
 80189e2:	f000 fea9 	bl	8019738 <__mcmp>
 80189e6:	2800      	cmp	r0, #0
 80189e8:	dc03      	bgt.n	80189f2 <_dtoa_r+0xa32>
 80189ea:	d1e0      	bne.n	80189ae <_dtoa_r+0x9ee>
 80189ec:	f018 0f01 	tst.w	r8, #1
 80189f0:	d0dd      	beq.n	80189ae <_dtoa_r+0x9ee>
 80189f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80189f6:	d1d8      	bne.n	80189aa <_dtoa_r+0x9ea>
 80189f8:	9b05      	ldr	r3, [sp, #20]
 80189fa:	9a05      	ldr	r2, [sp, #20]
 80189fc:	1c5d      	adds	r5, r3, #1
 80189fe:	2339      	movs	r3, #57	; 0x39
 8018a00:	7013      	strb	r3, [r2, #0]
 8018a02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018a06:	2b39      	cmp	r3, #57	; 0x39
 8018a08:	f105 32ff 	add.w	r2, r5, #4294967295
 8018a0c:	d04f      	beq.n	8018aae <_dtoa_r+0xaee>
 8018a0e:	3301      	adds	r3, #1
 8018a10:	7013      	strb	r3, [r2, #0]
 8018a12:	e754      	b.n	80188be <_dtoa_r+0x8fe>
 8018a14:	9a05      	ldr	r2, [sp, #20]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	f102 0501 	add.w	r5, r2, #1
 8018a1c:	dd06      	ble.n	8018a2c <_dtoa_r+0xa6c>
 8018a1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018a22:	d0e9      	beq.n	80189f8 <_dtoa_r+0xa38>
 8018a24:	f108 0801 	add.w	r8, r8, #1
 8018a28:	9b05      	ldr	r3, [sp, #20]
 8018a2a:	e7c2      	b.n	80189b2 <_dtoa_r+0x9f2>
 8018a2c:	9a02      	ldr	r2, [sp, #8]
 8018a2e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018a32:	eba5 030b 	sub.w	r3, r5, fp
 8018a36:	4293      	cmp	r3, r2
 8018a38:	d021      	beq.n	8018a7e <_dtoa_r+0xabe>
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	220a      	movs	r2, #10
 8018a3e:	9904      	ldr	r1, [sp, #16]
 8018a40:	4620      	mov	r0, r4
 8018a42:	f000 fc71 	bl	8019328 <__multadd>
 8018a46:	45b1      	cmp	r9, r6
 8018a48:	9004      	str	r0, [sp, #16]
 8018a4a:	f04f 0300 	mov.w	r3, #0
 8018a4e:	f04f 020a 	mov.w	r2, #10
 8018a52:	4649      	mov	r1, r9
 8018a54:	4620      	mov	r0, r4
 8018a56:	d105      	bne.n	8018a64 <_dtoa_r+0xaa4>
 8018a58:	f000 fc66 	bl	8019328 <__multadd>
 8018a5c:	4681      	mov	r9, r0
 8018a5e:	4606      	mov	r6, r0
 8018a60:	9505      	str	r5, [sp, #20]
 8018a62:	e776      	b.n	8018952 <_dtoa_r+0x992>
 8018a64:	f000 fc60 	bl	8019328 <__multadd>
 8018a68:	4631      	mov	r1, r6
 8018a6a:	4681      	mov	r9, r0
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	220a      	movs	r2, #10
 8018a70:	4620      	mov	r0, r4
 8018a72:	f000 fc59 	bl	8019328 <__multadd>
 8018a76:	4606      	mov	r6, r0
 8018a78:	e7f2      	b.n	8018a60 <_dtoa_r+0xaa0>
 8018a7a:	f04f 0900 	mov.w	r9, #0
 8018a7e:	2201      	movs	r2, #1
 8018a80:	9904      	ldr	r1, [sp, #16]
 8018a82:	4620      	mov	r0, r4
 8018a84:	f000 fe04 	bl	8019690 <__lshift>
 8018a88:	4639      	mov	r1, r7
 8018a8a:	9004      	str	r0, [sp, #16]
 8018a8c:	f000 fe54 	bl	8019738 <__mcmp>
 8018a90:	2800      	cmp	r0, #0
 8018a92:	dcb6      	bgt.n	8018a02 <_dtoa_r+0xa42>
 8018a94:	d102      	bne.n	8018a9c <_dtoa_r+0xadc>
 8018a96:	f018 0f01 	tst.w	r8, #1
 8018a9a:	d1b2      	bne.n	8018a02 <_dtoa_r+0xa42>
 8018a9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018aa0:	2b30      	cmp	r3, #48	; 0x30
 8018aa2:	f105 32ff 	add.w	r2, r5, #4294967295
 8018aa6:	f47f af0a 	bne.w	80188be <_dtoa_r+0x8fe>
 8018aaa:	4615      	mov	r5, r2
 8018aac:	e7f6      	b.n	8018a9c <_dtoa_r+0xadc>
 8018aae:	4593      	cmp	fp, r2
 8018ab0:	d105      	bne.n	8018abe <_dtoa_r+0xafe>
 8018ab2:	2331      	movs	r3, #49	; 0x31
 8018ab4:	f10a 0a01 	add.w	sl, sl, #1
 8018ab8:	f88b 3000 	strb.w	r3, [fp]
 8018abc:	e6ff      	b.n	80188be <_dtoa_r+0x8fe>
 8018abe:	4615      	mov	r5, r2
 8018ac0:	e79f      	b.n	8018a02 <_dtoa_r+0xa42>
 8018ac2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018b28 <_dtoa_r+0xb68>
 8018ac6:	e007      	b.n	8018ad8 <_dtoa_r+0xb18>
 8018ac8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018aca:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018b2c <_dtoa_r+0xb6c>
 8018ace:	b11b      	cbz	r3, 8018ad8 <_dtoa_r+0xb18>
 8018ad0:	f10b 0308 	add.w	r3, fp, #8
 8018ad4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018ad6:	6013      	str	r3, [r2, #0]
 8018ad8:	4658      	mov	r0, fp
 8018ada:	b017      	add	sp, #92	; 0x5c
 8018adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ae0:	9b06      	ldr	r3, [sp, #24]
 8018ae2:	2b01      	cmp	r3, #1
 8018ae4:	f77f ae35 	ble.w	8018752 <_dtoa_r+0x792>
 8018ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018aea:	9307      	str	r3, [sp, #28]
 8018aec:	e649      	b.n	8018782 <_dtoa_r+0x7c2>
 8018aee:	9b02      	ldr	r3, [sp, #8]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	dc03      	bgt.n	8018afc <_dtoa_r+0xb3c>
 8018af4:	9b06      	ldr	r3, [sp, #24]
 8018af6:	2b02      	cmp	r3, #2
 8018af8:	f73f aecc 	bgt.w	8018894 <_dtoa_r+0x8d4>
 8018afc:	465d      	mov	r5, fp
 8018afe:	4639      	mov	r1, r7
 8018b00:	9804      	ldr	r0, [sp, #16]
 8018b02:	f7ff f9d1 	bl	8017ea8 <quorem>
 8018b06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018b0a:	f805 8b01 	strb.w	r8, [r5], #1
 8018b0e:	9a02      	ldr	r2, [sp, #8]
 8018b10:	eba5 030b 	sub.w	r3, r5, fp
 8018b14:	429a      	cmp	r2, r3
 8018b16:	ddb0      	ble.n	8018a7a <_dtoa_r+0xaba>
 8018b18:	2300      	movs	r3, #0
 8018b1a:	220a      	movs	r2, #10
 8018b1c:	9904      	ldr	r1, [sp, #16]
 8018b1e:	4620      	mov	r0, r4
 8018b20:	f000 fc02 	bl	8019328 <__multadd>
 8018b24:	9004      	str	r0, [sp, #16]
 8018b26:	e7ea      	b.n	8018afe <_dtoa_r+0xb3e>
 8018b28:	0801a38a 	.word	0x0801a38a
 8018b2c:	0801a3e0 	.word	0x0801a3e0

08018b30 <_fstat_r>:
 8018b30:	b538      	push	{r3, r4, r5, lr}
 8018b32:	4c07      	ldr	r4, [pc, #28]	; (8018b50 <_fstat_r+0x20>)
 8018b34:	2300      	movs	r3, #0
 8018b36:	4605      	mov	r5, r0
 8018b38:	4608      	mov	r0, r1
 8018b3a:	4611      	mov	r1, r2
 8018b3c:	6023      	str	r3, [r4, #0]
 8018b3e:	f7f5 fa12 	bl	800df66 <_fstat>
 8018b42:	1c43      	adds	r3, r0, #1
 8018b44:	d102      	bne.n	8018b4c <_fstat_r+0x1c>
 8018b46:	6823      	ldr	r3, [r4, #0]
 8018b48:	b103      	cbz	r3, 8018b4c <_fstat_r+0x1c>
 8018b4a:	602b      	str	r3, [r5, #0]
 8018b4c:	bd38      	pop	{r3, r4, r5, pc}
 8018b4e:	bf00      	nop
 8018b50:	20008f4c 	.word	0x20008f4c

08018b54 <rshift>:
 8018b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b56:	6906      	ldr	r6, [r0, #16]
 8018b58:	114b      	asrs	r3, r1, #5
 8018b5a:	429e      	cmp	r6, r3
 8018b5c:	f100 0414 	add.w	r4, r0, #20
 8018b60:	dd30      	ble.n	8018bc4 <rshift+0x70>
 8018b62:	f011 011f 	ands.w	r1, r1, #31
 8018b66:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018b6a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018b6e:	d108      	bne.n	8018b82 <rshift+0x2e>
 8018b70:	4621      	mov	r1, r4
 8018b72:	42b2      	cmp	r2, r6
 8018b74:	460b      	mov	r3, r1
 8018b76:	d211      	bcs.n	8018b9c <rshift+0x48>
 8018b78:	f852 3b04 	ldr.w	r3, [r2], #4
 8018b7c:	f841 3b04 	str.w	r3, [r1], #4
 8018b80:	e7f7      	b.n	8018b72 <rshift+0x1e>
 8018b82:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018b86:	f1c1 0c20 	rsb	ip, r1, #32
 8018b8a:	40cd      	lsrs	r5, r1
 8018b8c:	3204      	adds	r2, #4
 8018b8e:	4623      	mov	r3, r4
 8018b90:	42b2      	cmp	r2, r6
 8018b92:	4617      	mov	r7, r2
 8018b94:	d30c      	bcc.n	8018bb0 <rshift+0x5c>
 8018b96:	601d      	str	r5, [r3, #0]
 8018b98:	b105      	cbz	r5, 8018b9c <rshift+0x48>
 8018b9a:	3304      	adds	r3, #4
 8018b9c:	1b1a      	subs	r2, r3, r4
 8018b9e:	42a3      	cmp	r3, r4
 8018ba0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018ba4:	bf08      	it	eq
 8018ba6:	2300      	moveq	r3, #0
 8018ba8:	6102      	str	r2, [r0, #16]
 8018baa:	bf08      	it	eq
 8018bac:	6143      	streq	r3, [r0, #20]
 8018bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bb0:	683f      	ldr	r7, [r7, #0]
 8018bb2:	fa07 f70c 	lsl.w	r7, r7, ip
 8018bb6:	433d      	orrs	r5, r7
 8018bb8:	f843 5b04 	str.w	r5, [r3], #4
 8018bbc:	f852 5b04 	ldr.w	r5, [r2], #4
 8018bc0:	40cd      	lsrs	r5, r1
 8018bc2:	e7e5      	b.n	8018b90 <rshift+0x3c>
 8018bc4:	4623      	mov	r3, r4
 8018bc6:	e7e9      	b.n	8018b9c <rshift+0x48>

08018bc8 <__hexdig_fun>:
 8018bc8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018bcc:	2b09      	cmp	r3, #9
 8018bce:	d802      	bhi.n	8018bd6 <__hexdig_fun+0xe>
 8018bd0:	3820      	subs	r0, #32
 8018bd2:	b2c0      	uxtb	r0, r0
 8018bd4:	4770      	bx	lr
 8018bd6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018bda:	2b05      	cmp	r3, #5
 8018bdc:	d801      	bhi.n	8018be2 <__hexdig_fun+0x1a>
 8018bde:	3847      	subs	r0, #71	; 0x47
 8018be0:	e7f7      	b.n	8018bd2 <__hexdig_fun+0xa>
 8018be2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018be6:	2b05      	cmp	r3, #5
 8018be8:	d801      	bhi.n	8018bee <__hexdig_fun+0x26>
 8018bea:	3827      	subs	r0, #39	; 0x27
 8018bec:	e7f1      	b.n	8018bd2 <__hexdig_fun+0xa>
 8018bee:	2000      	movs	r0, #0
 8018bf0:	4770      	bx	lr

08018bf2 <__gethex>:
 8018bf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bf6:	b08b      	sub	sp, #44	; 0x2c
 8018bf8:	468a      	mov	sl, r1
 8018bfa:	9002      	str	r0, [sp, #8]
 8018bfc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018bfe:	9306      	str	r3, [sp, #24]
 8018c00:	4690      	mov	r8, r2
 8018c02:	f000 faef 	bl	80191e4 <__localeconv_l>
 8018c06:	6803      	ldr	r3, [r0, #0]
 8018c08:	9303      	str	r3, [sp, #12]
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f7ef fa18 	bl	8008040 <strlen>
 8018c10:	9b03      	ldr	r3, [sp, #12]
 8018c12:	9001      	str	r0, [sp, #4]
 8018c14:	4403      	add	r3, r0
 8018c16:	f04f 0b00 	mov.w	fp, #0
 8018c1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018c1e:	9307      	str	r3, [sp, #28]
 8018c20:	f8da 3000 	ldr.w	r3, [sl]
 8018c24:	3302      	adds	r3, #2
 8018c26:	461f      	mov	r7, r3
 8018c28:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018c2c:	2830      	cmp	r0, #48	; 0x30
 8018c2e:	d06c      	beq.n	8018d0a <__gethex+0x118>
 8018c30:	f7ff ffca 	bl	8018bc8 <__hexdig_fun>
 8018c34:	4604      	mov	r4, r0
 8018c36:	2800      	cmp	r0, #0
 8018c38:	d16a      	bne.n	8018d10 <__gethex+0x11e>
 8018c3a:	9a01      	ldr	r2, [sp, #4]
 8018c3c:	9903      	ldr	r1, [sp, #12]
 8018c3e:	4638      	mov	r0, r7
 8018c40:	f001 f8f4 	bl	8019e2c <strncmp>
 8018c44:	2800      	cmp	r0, #0
 8018c46:	d166      	bne.n	8018d16 <__gethex+0x124>
 8018c48:	9b01      	ldr	r3, [sp, #4]
 8018c4a:	5cf8      	ldrb	r0, [r7, r3]
 8018c4c:	18fe      	adds	r6, r7, r3
 8018c4e:	f7ff ffbb 	bl	8018bc8 <__hexdig_fun>
 8018c52:	2800      	cmp	r0, #0
 8018c54:	d062      	beq.n	8018d1c <__gethex+0x12a>
 8018c56:	4633      	mov	r3, r6
 8018c58:	7818      	ldrb	r0, [r3, #0]
 8018c5a:	2830      	cmp	r0, #48	; 0x30
 8018c5c:	461f      	mov	r7, r3
 8018c5e:	f103 0301 	add.w	r3, r3, #1
 8018c62:	d0f9      	beq.n	8018c58 <__gethex+0x66>
 8018c64:	f7ff ffb0 	bl	8018bc8 <__hexdig_fun>
 8018c68:	fab0 f580 	clz	r5, r0
 8018c6c:	096d      	lsrs	r5, r5, #5
 8018c6e:	4634      	mov	r4, r6
 8018c70:	f04f 0b01 	mov.w	fp, #1
 8018c74:	463a      	mov	r2, r7
 8018c76:	4616      	mov	r6, r2
 8018c78:	3201      	adds	r2, #1
 8018c7a:	7830      	ldrb	r0, [r6, #0]
 8018c7c:	f7ff ffa4 	bl	8018bc8 <__hexdig_fun>
 8018c80:	2800      	cmp	r0, #0
 8018c82:	d1f8      	bne.n	8018c76 <__gethex+0x84>
 8018c84:	9a01      	ldr	r2, [sp, #4]
 8018c86:	9903      	ldr	r1, [sp, #12]
 8018c88:	4630      	mov	r0, r6
 8018c8a:	f001 f8cf 	bl	8019e2c <strncmp>
 8018c8e:	b950      	cbnz	r0, 8018ca6 <__gethex+0xb4>
 8018c90:	b954      	cbnz	r4, 8018ca8 <__gethex+0xb6>
 8018c92:	9b01      	ldr	r3, [sp, #4]
 8018c94:	18f4      	adds	r4, r6, r3
 8018c96:	4622      	mov	r2, r4
 8018c98:	4616      	mov	r6, r2
 8018c9a:	3201      	adds	r2, #1
 8018c9c:	7830      	ldrb	r0, [r6, #0]
 8018c9e:	f7ff ff93 	bl	8018bc8 <__hexdig_fun>
 8018ca2:	2800      	cmp	r0, #0
 8018ca4:	d1f8      	bne.n	8018c98 <__gethex+0xa6>
 8018ca6:	b10c      	cbz	r4, 8018cac <__gethex+0xba>
 8018ca8:	1ba4      	subs	r4, r4, r6
 8018caa:	00a4      	lsls	r4, r4, #2
 8018cac:	7833      	ldrb	r3, [r6, #0]
 8018cae:	2b50      	cmp	r3, #80	; 0x50
 8018cb0:	d001      	beq.n	8018cb6 <__gethex+0xc4>
 8018cb2:	2b70      	cmp	r3, #112	; 0x70
 8018cb4:	d140      	bne.n	8018d38 <__gethex+0x146>
 8018cb6:	7873      	ldrb	r3, [r6, #1]
 8018cb8:	2b2b      	cmp	r3, #43	; 0x2b
 8018cba:	d031      	beq.n	8018d20 <__gethex+0x12e>
 8018cbc:	2b2d      	cmp	r3, #45	; 0x2d
 8018cbe:	d033      	beq.n	8018d28 <__gethex+0x136>
 8018cc0:	1c71      	adds	r1, r6, #1
 8018cc2:	f04f 0900 	mov.w	r9, #0
 8018cc6:	7808      	ldrb	r0, [r1, #0]
 8018cc8:	f7ff ff7e 	bl	8018bc8 <__hexdig_fun>
 8018ccc:	1e43      	subs	r3, r0, #1
 8018cce:	b2db      	uxtb	r3, r3
 8018cd0:	2b18      	cmp	r3, #24
 8018cd2:	d831      	bhi.n	8018d38 <__gethex+0x146>
 8018cd4:	f1a0 0210 	sub.w	r2, r0, #16
 8018cd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018cdc:	f7ff ff74 	bl	8018bc8 <__hexdig_fun>
 8018ce0:	1e43      	subs	r3, r0, #1
 8018ce2:	b2db      	uxtb	r3, r3
 8018ce4:	2b18      	cmp	r3, #24
 8018ce6:	d922      	bls.n	8018d2e <__gethex+0x13c>
 8018ce8:	f1b9 0f00 	cmp.w	r9, #0
 8018cec:	d000      	beq.n	8018cf0 <__gethex+0xfe>
 8018cee:	4252      	negs	r2, r2
 8018cf0:	4414      	add	r4, r2
 8018cf2:	f8ca 1000 	str.w	r1, [sl]
 8018cf6:	b30d      	cbz	r5, 8018d3c <__gethex+0x14a>
 8018cf8:	f1bb 0f00 	cmp.w	fp, #0
 8018cfc:	bf0c      	ite	eq
 8018cfe:	2706      	moveq	r7, #6
 8018d00:	2700      	movne	r7, #0
 8018d02:	4638      	mov	r0, r7
 8018d04:	b00b      	add	sp, #44	; 0x2c
 8018d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d0a:	f10b 0b01 	add.w	fp, fp, #1
 8018d0e:	e78a      	b.n	8018c26 <__gethex+0x34>
 8018d10:	2500      	movs	r5, #0
 8018d12:	462c      	mov	r4, r5
 8018d14:	e7ae      	b.n	8018c74 <__gethex+0x82>
 8018d16:	463e      	mov	r6, r7
 8018d18:	2501      	movs	r5, #1
 8018d1a:	e7c7      	b.n	8018cac <__gethex+0xba>
 8018d1c:	4604      	mov	r4, r0
 8018d1e:	e7fb      	b.n	8018d18 <__gethex+0x126>
 8018d20:	f04f 0900 	mov.w	r9, #0
 8018d24:	1cb1      	adds	r1, r6, #2
 8018d26:	e7ce      	b.n	8018cc6 <__gethex+0xd4>
 8018d28:	f04f 0901 	mov.w	r9, #1
 8018d2c:	e7fa      	b.n	8018d24 <__gethex+0x132>
 8018d2e:	230a      	movs	r3, #10
 8018d30:	fb03 0202 	mla	r2, r3, r2, r0
 8018d34:	3a10      	subs	r2, #16
 8018d36:	e7cf      	b.n	8018cd8 <__gethex+0xe6>
 8018d38:	4631      	mov	r1, r6
 8018d3a:	e7da      	b.n	8018cf2 <__gethex+0x100>
 8018d3c:	1bf3      	subs	r3, r6, r7
 8018d3e:	3b01      	subs	r3, #1
 8018d40:	4629      	mov	r1, r5
 8018d42:	2b07      	cmp	r3, #7
 8018d44:	dc49      	bgt.n	8018dda <__gethex+0x1e8>
 8018d46:	9802      	ldr	r0, [sp, #8]
 8018d48:	f000 faa3 	bl	8019292 <_Balloc>
 8018d4c:	9b01      	ldr	r3, [sp, #4]
 8018d4e:	f100 0914 	add.w	r9, r0, #20
 8018d52:	f04f 0b00 	mov.w	fp, #0
 8018d56:	f1c3 0301 	rsb	r3, r3, #1
 8018d5a:	4605      	mov	r5, r0
 8018d5c:	f8cd 9010 	str.w	r9, [sp, #16]
 8018d60:	46da      	mov	sl, fp
 8018d62:	9308      	str	r3, [sp, #32]
 8018d64:	42b7      	cmp	r7, r6
 8018d66:	d33b      	bcc.n	8018de0 <__gethex+0x1ee>
 8018d68:	9804      	ldr	r0, [sp, #16]
 8018d6a:	f840 ab04 	str.w	sl, [r0], #4
 8018d6e:	eba0 0009 	sub.w	r0, r0, r9
 8018d72:	1080      	asrs	r0, r0, #2
 8018d74:	6128      	str	r0, [r5, #16]
 8018d76:	0147      	lsls	r7, r0, #5
 8018d78:	4650      	mov	r0, sl
 8018d7a:	f000 fb4e 	bl	801941a <__hi0bits>
 8018d7e:	f8d8 6000 	ldr.w	r6, [r8]
 8018d82:	1a3f      	subs	r7, r7, r0
 8018d84:	42b7      	cmp	r7, r6
 8018d86:	dd64      	ble.n	8018e52 <__gethex+0x260>
 8018d88:	1bbf      	subs	r7, r7, r6
 8018d8a:	4639      	mov	r1, r7
 8018d8c:	4628      	mov	r0, r5
 8018d8e:	f000 fe5d 	bl	8019a4c <__any_on>
 8018d92:	4682      	mov	sl, r0
 8018d94:	b178      	cbz	r0, 8018db6 <__gethex+0x1c4>
 8018d96:	1e7b      	subs	r3, r7, #1
 8018d98:	1159      	asrs	r1, r3, #5
 8018d9a:	f003 021f 	and.w	r2, r3, #31
 8018d9e:	f04f 0a01 	mov.w	sl, #1
 8018da2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018da6:	fa0a f202 	lsl.w	r2, sl, r2
 8018daa:	420a      	tst	r2, r1
 8018dac:	d003      	beq.n	8018db6 <__gethex+0x1c4>
 8018dae:	4553      	cmp	r3, sl
 8018db0:	dc46      	bgt.n	8018e40 <__gethex+0x24e>
 8018db2:	f04f 0a02 	mov.w	sl, #2
 8018db6:	4639      	mov	r1, r7
 8018db8:	4628      	mov	r0, r5
 8018dba:	f7ff fecb 	bl	8018b54 <rshift>
 8018dbe:	443c      	add	r4, r7
 8018dc0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018dc4:	42a3      	cmp	r3, r4
 8018dc6:	da52      	bge.n	8018e6e <__gethex+0x27c>
 8018dc8:	4629      	mov	r1, r5
 8018dca:	9802      	ldr	r0, [sp, #8]
 8018dcc:	f000 fa95 	bl	80192fa <_Bfree>
 8018dd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018dd2:	2300      	movs	r3, #0
 8018dd4:	6013      	str	r3, [r2, #0]
 8018dd6:	27a3      	movs	r7, #163	; 0xa3
 8018dd8:	e793      	b.n	8018d02 <__gethex+0x110>
 8018dda:	3101      	adds	r1, #1
 8018ddc:	105b      	asrs	r3, r3, #1
 8018dde:	e7b0      	b.n	8018d42 <__gethex+0x150>
 8018de0:	1e73      	subs	r3, r6, #1
 8018de2:	9305      	str	r3, [sp, #20]
 8018de4:	9a07      	ldr	r2, [sp, #28]
 8018de6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018dea:	4293      	cmp	r3, r2
 8018dec:	d018      	beq.n	8018e20 <__gethex+0x22e>
 8018dee:	f1bb 0f20 	cmp.w	fp, #32
 8018df2:	d107      	bne.n	8018e04 <__gethex+0x212>
 8018df4:	9b04      	ldr	r3, [sp, #16]
 8018df6:	f8c3 a000 	str.w	sl, [r3]
 8018dfa:	3304      	adds	r3, #4
 8018dfc:	f04f 0a00 	mov.w	sl, #0
 8018e00:	9304      	str	r3, [sp, #16]
 8018e02:	46d3      	mov	fp, sl
 8018e04:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018e08:	f7ff fede 	bl	8018bc8 <__hexdig_fun>
 8018e0c:	f000 000f 	and.w	r0, r0, #15
 8018e10:	fa00 f00b 	lsl.w	r0, r0, fp
 8018e14:	ea4a 0a00 	orr.w	sl, sl, r0
 8018e18:	f10b 0b04 	add.w	fp, fp, #4
 8018e1c:	9b05      	ldr	r3, [sp, #20]
 8018e1e:	e00d      	b.n	8018e3c <__gethex+0x24a>
 8018e20:	9b05      	ldr	r3, [sp, #20]
 8018e22:	9a08      	ldr	r2, [sp, #32]
 8018e24:	4413      	add	r3, r2
 8018e26:	42bb      	cmp	r3, r7
 8018e28:	d3e1      	bcc.n	8018dee <__gethex+0x1fc>
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	9a01      	ldr	r2, [sp, #4]
 8018e2e:	9903      	ldr	r1, [sp, #12]
 8018e30:	9309      	str	r3, [sp, #36]	; 0x24
 8018e32:	f000 fffb 	bl	8019e2c <strncmp>
 8018e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	d1d8      	bne.n	8018dee <__gethex+0x1fc>
 8018e3c:	461e      	mov	r6, r3
 8018e3e:	e791      	b.n	8018d64 <__gethex+0x172>
 8018e40:	1eb9      	subs	r1, r7, #2
 8018e42:	4628      	mov	r0, r5
 8018e44:	f000 fe02 	bl	8019a4c <__any_on>
 8018e48:	2800      	cmp	r0, #0
 8018e4a:	d0b2      	beq.n	8018db2 <__gethex+0x1c0>
 8018e4c:	f04f 0a03 	mov.w	sl, #3
 8018e50:	e7b1      	b.n	8018db6 <__gethex+0x1c4>
 8018e52:	da09      	bge.n	8018e68 <__gethex+0x276>
 8018e54:	1bf7      	subs	r7, r6, r7
 8018e56:	4629      	mov	r1, r5
 8018e58:	463a      	mov	r2, r7
 8018e5a:	9802      	ldr	r0, [sp, #8]
 8018e5c:	f000 fc18 	bl	8019690 <__lshift>
 8018e60:	1be4      	subs	r4, r4, r7
 8018e62:	4605      	mov	r5, r0
 8018e64:	f100 0914 	add.w	r9, r0, #20
 8018e68:	f04f 0a00 	mov.w	sl, #0
 8018e6c:	e7a8      	b.n	8018dc0 <__gethex+0x1ce>
 8018e6e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018e72:	42a0      	cmp	r0, r4
 8018e74:	dd6a      	ble.n	8018f4c <__gethex+0x35a>
 8018e76:	1b04      	subs	r4, r0, r4
 8018e78:	42a6      	cmp	r6, r4
 8018e7a:	dc2e      	bgt.n	8018eda <__gethex+0x2e8>
 8018e7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018e80:	2b02      	cmp	r3, #2
 8018e82:	d022      	beq.n	8018eca <__gethex+0x2d8>
 8018e84:	2b03      	cmp	r3, #3
 8018e86:	d024      	beq.n	8018ed2 <__gethex+0x2e0>
 8018e88:	2b01      	cmp	r3, #1
 8018e8a:	d115      	bne.n	8018eb8 <__gethex+0x2c6>
 8018e8c:	42a6      	cmp	r6, r4
 8018e8e:	d113      	bne.n	8018eb8 <__gethex+0x2c6>
 8018e90:	2e01      	cmp	r6, #1
 8018e92:	dc0b      	bgt.n	8018eac <__gethex+0x2ba>
 8018e94:	9a06      	ldr	r2, [sp, #24]
 8018e96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018e9a:	6013      	str	r3, [r2, #0]
 8018e9c:	2301      	movs	r3, #1
 8018e9e:	612b      	str	r3, [r5, #16]
 8018ea0:	f8c9 3000 	str.w	r3, [r9]
 8018ea4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018ea6:	2762      	movs	r7, #98	; 0x62
 8018ea8:	601d      	str	r5, [r3, #0]
 8018eaa:	e72a      	b.n	8018d02 <__gethex+0x110>
 8018eac:	1e71      	subs	r1, r6, #1
 8018eae:	4628      	mov	r0, r5
 8018eb0:	f000 fdcc 	bl	8019a4c <__any_on>
 8018eb4:	2800      	cmp	r0, #0
 8018eb6:	d1ed      	bne.n	8018e94 <__gethex+0x2a2>
 8018eb8:	4629      	mov	r1, r5
 8018eba:	9802      	ldr	r0, [sp, #8]
 8018ebc:	f000 fa1d 	bl	80192fa <_Bfree>
 8018ec0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	6013      	str	r3, [r2, #0]
 8018ec6:	2750      	movs	r7, #80	; 0x50
 8018ec8:	e71b      	b.n	8018d02 <__gethex+0x110>
 8018eca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d0e1      	beq.n	8018e94 <__gethex+0x2a2>
 8018ed0:	e7f2      	b.n	8018eb8 <__gethex+0x2c6>
 8018ed2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d1dd      	bne.n	8018e94 <__gethex+0x2a2>
 8018ed8:	e7ee      	b.n	8018eb8 <__gethex+0x2c6>
 8018eda:	1e67      	subs	r7, r4, #1
 8018edc:	f1ba 0f00 	cmp.w	sl, #0
 8018ee0:	d131      	bne.n	8018f46 <__gethex+0x354>
 8018ee2:	b127      	cbz	r7, 8018eee <__gethex+0x2fc>
 8018ee4:	4639      	mov	r1, r7
 8018ee6:	4628      	mov	r0, r5
 8018ee8:	f000 fdb0 	bl	8019a4c <__any_on>
 8018eec:	4682      	mov	sl, r0
 8018eee:	117a      	asrs	r2, r7, #5
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	f007 071f 	and.w	r7, r7, #31
 8018ef6:	fa03 f707 	lsl.w	r7, r3, r7
 8018efa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018efe:	4621      	mov	r1, r4
 8018f00:	421f      	tst	r7, r3
 8018f02:	4628      	mov	r0, r5
 8018f04:	bf18      	it	ne
 8018f06:	f04a 0a02 	orrne.w	sl, sl, #2
 8018f0a:	1b36      	subs	r6, r6, r4
 8018f0c:	f7ff fe22 	bl	8018b54 <rshift>
 8018f10:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018f14:	2702      	movs	r7, #2
 8018f16:	f1ba 0f00 	cmp.w	sl, #0
 8018f1a:	d048      	beq.n	8018fae <__gethex+0x3bc>
 8018f1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018f20:	2b02      	cmp	r3, #2
 8018f22:	d015      	beq.n	8018f50 <__gethex+0x35e>
 8018f24:	2b03      	cmp	r3, #3
 8018f26:	d017      	beq.n	8018f58 <__gethex+0x366>
 8018f28:	2b01      	cmp	r3, #1
 8018f2a:	d109      	bne.n	8018f40 <__gethex+0x34e>
 8018f2c:	f01a 0f02 	tst.w	sl, #2
 8018f30:	d006      	beq.n	8018f40 <__gethex+0x34e>
 8018f32:	f8d9 3000 	ldr.w	r3, [r9]
 8018f36:	ea4a 0a03 	orr.w	sl, sl, r3
 8018f3a:	f01a 0f01 	tst.w	sl, #1
 8018f3e:	d10e      	bne.n	8018f5e <__gethex+0x36c>
 8018f40:	f047 0710 	orr.w	r7, r7, #16
 8018f44:	e033      	b.n	8018fae <__gethex+0x3bc>
 8018f46:	f04f 0a01 	mov.w	sl, #1
 8018f4a:	e7d0      	b.n	8018eee <__gethex+0x2fc>
 8018f4c:	2701      	movs	r7, #1
 8018f4e:	e7e2      	b.n	8018f16 <__gethex+0x324>
 8018f50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f52:	f1c3 0301 	rsb	r3, r3, #1
 8018f56:	9315      	str	r3, [sp, #84]	; 0x54
 8018f58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d0f0      	beq.n	8018f40 <__gethex+0x34e>
 8018f5e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018f62:	f105 0314 	add.w	r3, r5, #20
 8018f66:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018f6a:	eb03 010a 	add.w	r1, r3, sl
 8018f6e:	f04f 0c00 	mov.w	ip, #0
 8018f72:	4618      	mov	r0, r3
 8018f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f78:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018f7c:	d01c      	beq.n	8018fb8 <__gethex+0x3c6>
 8018f7e:	3201      	adds	r2, #1
 8018f80:	6002      	str	r2, [r0, #0]
 8018f82:	2f02      	cmp	r7, #2
 8018f84:	f105 0314 	add.w	r3, r5, #20
 8018f88:	d138      	bne.n	8018ffc <__gethex+0x40a>
 8018f8a:	f8d8 2000 	ldr.w	r2, [r8]
 8018f8e:	3a01      	subs	r2, #1
 8018f90:	42b2      	cmp	r2, r6
 8018f92:	d10a      	bne.n	8018faa <__gethex+0x3b8>
 8018f94:	1171      	asrs	r1, r6, #5
 8018f96:	2201      	movs	r2, #1
 8018f98:	f006 061f 	and.w	r6, r6, #31
 8018f9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018fa0:	fa02 f606 	lsl.w	r6, r2, r6
 8018fa4:	421e      	tst	r6, r3
 8018fa6:	bf18      	it	ne
 8018fa8:	4617      	movne	r7, r2
 8018faa:	f047 0720 	orr.w	r7, r7, #32
 8018fae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018fb0:	601d      	str	r5, [r3, #0]
 8018fb2:	9b06      	ldr	r3, [sp, #24]
 8018fb4:	601c      	str	r4, [r3, #0]
 8018fb6:	e6a4      	b.n	8018d02 <__gethex+0x110>
 8018fb8:	4299      	cmp	r1, r3
 8018fba:	f843 cc04 	str.w	ip, [r3, #-4]
 8018fbe:	d8d8      	bhi.n	8018f72 <__gethex+0x380>
 8018fc0:	68ab      	ldr	r3, [r5, #8]
 8018fc2:	4599      	cmp	r9, r3
 8018fc4:	db12      	blt.n	8018fec <__gethex+0x3fa>
 8018fc6:	6869      	ldr	r1, [r5, #4]
 8018fc8:	9802      	ldr	r0, [sp, #8]
 8018fca:	3101      	adds	r1, #1
 8018fcc:	f000 f961 	bl	8019292 <_Balloc>
 8018fd0:	692a      	ldr	r2, [r5, #16]
 8018fd2:	3202      	adds	r2, #2
 8018fd4:	f105 010c 	add.w	r1, r5, #12
 8018fd8:	4683      	mov	fp, r0
 8018fda:	0092      	lsls	r2, r2, #2
 8018fdc:	300c      	adds	r0, #12
 8018fde:	f7fb ff93 	bl	8014f08 <memcpy>
 8018fe2:	4629      	mov	r1, r5
 8018fe4:	9802      	ldr	r0, [sp, #8]
 8018fe6:	f000 f988 	bl	80192fa <_Bfree>
 8018fea:	465d      	mov	r5, fp
 8018fec:	692b      	ldr	r3, [r5, #16]
 8018fee:	1c5a      	adds	r2, r3, #1
 8018ff0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018ff4:	612a      	str	r2, [r5, #16]
 8018ff6:	2201      	movs	r2, #1
 8018ff8:	615a      	str	r2, [r3, #20]
 8018ffa:	e7c2      	b.n	8018f82 <__gethex+0x390>
 8018ffc:	692a      	ldr	r2, [r5, #16]
 8018ffe:	454a      	cmp	r2, r9
 8019000:	dd0b      	ble.n	801901a <__gethex+0x428>
 8019002:	2101      	movs	r1, #1
 8019004:	4628      	mov	r0, r5
 8019006:	f7ff fda5 	bl	8018b54 <rshift>
 801900a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801900e:	3401      	adds	r4, #1
 8019010:	42a3      	cmp	r3, r4
 8019012:	f6ff aed9 	blt.w	8018dc8 <__gethex+0x1d6>
 8019016:	2701      	movs	r7, #1
 8019018:	e7c7      	b.n	8018faa <__gethex+0x3b8>
 801901a:	f016 061f 	ands.w	r6, r6, #31
 801901e:	d0fa      	beq.n	8019016 <__gethex+0x424>
 8019020:	449a      	add	sl, r3
 8019022:	f1c6 0620 	rsb	r6, r6, #32
 8019026:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801902a:	f000 f9f6 	bl	801941a <__hi0bits>
 801902e:	42b0      	cmp	r0, r6
 8019030:	dbe7      	blt.n	8019002 <__gethex+0x410>
 8019032:	e7f0      	b.n	8019016 <__gethex+0x424>

08019034 <L_shift>:
 8019034:	f1c2 0208 	rsb	r2, r2, #8
 8019038:	0092      	lsls	r2, r2, #2
 801903a:	b570      	push	{r4, r5, r6, lr}
 801903c:	f1c2 0620 	rsb	r6, r2, #32
 8019040:	6843      	ldr	r3, [r0, #4]
 8019042:	6804      	ldr	r4, [r0, #0]
 8019044:	fa03 f506 	lsl.w	r5, r3, r6
 8019048:	432c      	orrs	r4, r5
 801904a:	40d3      	lsrs	r3, r2
 801904c:	6004      	str	r4, [r0, #0]
 801904e:	f840 3f04 	str.w	r3, [r0, #4]!
 8019052:	4288      	cmp	r0, r1
 8019054:	d3f4      	bcc.n	8019040 <L_shift+0xc>
 8019056:	bd70      	pop	{r4, r5, r6, pc}

08019058 <__match>:
 8019058:	b530      	push	{r4, r5, lr}
 801905a:	6803      	ldr	r3, [r0, #0]
 801905c:	3301      	adds	r3, #1
 801905e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019062:	b914      	cbnz	r4, 801906a <__match+0x12>
 8019064:	6003      	str	r3, [r0, #0]
 8019066:	2001      	movs	r0, #1
 8019068:	bd30      	pop	{r4, r5, pc}
 801906a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801906e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019072:	2d19      	cmp	r5, #25
 8019074:	bf98      	it	ls
 8019076:	3220      	addls	r2, #32
 8019078:	42a2      	cmp	r2, r4
 801907a:	d0f0      	beq.n	801905e <__match+0x6>
 801907c:	2000      	movs	r0, #0
 801907e:	e7f3      	b.n	8019068 <__match+0x10>

08019080 <__hexnan>:
 8019080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019084:	680b      	ldr	r3, [r1, #0]
 8019086:	6801      	ldr	r1, [r0, #0]
 8019088:	115f      	asrs	r7, r3, #5
 801908a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801908e:	f013 031f 	ands.w	r3, r3, #31
 8019092:	b087      	sub	sp, #28
 8019094:	bf18      	it	ne
 8019096:	3704      	addne	r7, #4
 8019098:	2500      	movs	r5, #0
 801909a:	1f3e      	subs	r6, r7, #4
 801909c:	4682      	mov	sl, r0
 801909e:	4690      	mov	r8, r2
 80190a0:	9301      	str	r3, [sp, #4]
 80190a2:	f847 5c04 	str.w	r5, [r7, #-4]
 80190a6:	46b1      	mov	r9, r6
 80190a8:	4634      	mov	r4, r6
 80190aa:	9502      	str	r5, [sp, #8]
 80190ac:	46ab      	mov	fp, r5
 80190ae:	784a      	ldrb	r2, [r1, #1]
 80190b0:	1c4b      	adds	r3, r1, #1
 80190b2:	9303      	str	r3, [sp, #12]
 80190b4:	b342      	cbz	r2, 8019108 <__hexnan+0x88>
 80190b6:	4610      	mov	r0, r2
 80190b8:	9105      	str	r1, [sp, #20]
 80190ba:	9204      	str	r2, [sp, #16]
 80190bc:	f7ff fd84 	bl	8018bc8 <__hexdig_fun>
 80190c0:	2800      	cmp	r0, #0
 80190c2:	d143      	bne.n	801914c <__hexnan+0xcc>
 80190c4:	9a04      	ldr	r2, [sp, #16]
 80190c6:	9905      	ldr	r1, [sp, #20]
 80190c8:	2a20      	cmp	r2, #32
 80190ca:	d818      	bhi.n	80190fe <__hexnan+0x7e>
 80190cc:	9b02      	ldr	r3, [sp, #8]
 80190ce:	459b      	cmp	fp, r3
 80190d0:	dd13      	ble.n	80190fa <__hexnan+0x7a>
 80190d2:	454c      	cmp	r4, r9
 80190d4:	d206      	bcs.n	80190e4 <__hexnan+0x64>
 80190d6:	2d07      	cmp	r5, #7
 80190d8:	dc04      	bgt.n	80190e4 <__hexnan+0x64>
 80190da:	462a      	mov	r2, r5
 80190dc:	4649      	mov	r1, r9
 80190de:	4620      	mov	r0, r4
 80190e0:	f7ff ffa8 	bl	8019034 <L_shift>
 80190e4:	4544      	cmp	r4, r8
 80190e6:	d944      	bls.n	8019172 <__hexnan+0xf2>
 80190e8:	2300      	movs	r3, #0
 80190ea:	f1a4 0904 	sub.w	r9, r4, #4
 80190ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80190f2:	f8cd b008 	str.w	fp, [sp, #8]
 80190f6:	464c      	mov	r4, r9
 80190f8:	461d      	mov	r5, r3
 80190fa:	9903      	ldr	r1, [sp, #12]
 80190fc:	e7d7      	b.n	80190ae <__hexnan+0x2e>
 80190fe:	2a29      	cmp	r2, #41	; 0x29
 8019100:	d14a      	bne.n	8019198 <__hexnan+0x118>
 8019102:	3102      	adds	r1, #2
 8019104:	f8ca 1000 	str.w	r1, [sl]
 8019108:	f1bb 0f00 	cmp.w	fp, #0
 801910c:	d044      	beq.n	8019198 <__hexnan+0x118>
 801910e:	454c      	cmp	r4, r9
 8019110:	d206      	bcs.n	8019120 <__hexnan+0xa0>
 8019112:	2d07      	cmp	r5, #7
 8019114:	dc04      	bgt.n	8019120 <__hexnan+0xa0>
 8019116:	462a      	mov	r2, r5
 8019118:	4649      	mov	r1, r9
 801911a:	4620      	mov	r0, r4
 801911c:	f7ff ff8a 	bl	8019034 <L_shift>
 8019120:	4544      	cmp	r4, r8
 8019122:	d928      	bls.n	8019176 <__hexnan+0xf6>
 8019124:	4643      	mov	r3, r8
 8019126:	f854 2b04 	ldr.w	r2, [r4], #4
 801912a:	f843 2b04 	str.w	r2, [r3], #4
 801912e:	42a6      	cmp	r6, r4
 8019130:	d2f9      	bcs.n	8019126 <__hexnan+0xa6>
 8019132:	2200      	movs	r2, #0
 8019134:	f843 2b04 	str.w	r2, [r3], #4
 8019138:	429e      	cmp	r6, r3
 801913a:	d2fb      	bcs.n	8019134 <__hexnan+0xb4>
 801913c:	6833      	ldr	r3, [r6, #0]
 801913e:	b91b      	cbnz	r3, 8019148 <__hexnan+0xc8>
 8019140:	4546      	cmp	r6, r8
 8019142:	d127      	bne.n	8019194 <__hexnan+0x114>
 8019144:	2301      	movs	r3, #1
 8019146:	6033      	str	r3, [r6, #0]
 8019148:	2005      	movs	r0, #5
 801914a:	e026      	b.n	801919a <__hexnan+0x11a>
 801914c:	3501      	adds	r5, #1
 801914e:	2d08      	cmp	r5, #8
 8019150:	f10b 0b01 	add.w	fp, fp, #1
 8019154:	dd06      	ble.n	8019164 <__hexnan+0xe4>
 8019156:	4544      	cmp	r4, r8
 8019158:	d9cf      	bls.n	80190fa <__hexnan+0x7a>
 801915a:	2300      	movs	r3, #0
 801915c:	f844 3c04 	str.w	r3, [r4, #-4]
 8019160:	2501      	movs	r5, #1
 8019162:	3c04      	subs	r4, #4
 8019164:	6822      	ldr	r2, [r4, #0]
 8019166:	f000 000f 	and.w	r0, r0, #15
 801916a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801916e:	6020      	str	r0, [r4, #0]
 8019170:	e7c3      	b.n	80190fa <__hexnan+0x7a>
 8019172:	2508      	movs	r5, #8
 8019174:	e7c1      	b.n	80190fa <__hexnan+0x7a>
 8019176:	9b01      	ldr	r3, [sp, #4]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d0df      	beq.n	801913c <__hexnan+0xbc>
 801917c:	f04f 32ff 	mov.w	r2, #4294967295
 8019180:	f1c3 0320 	rsb	r3, r3, #32
 8019184:	fa22 f303 	lsr.w	r3, r2, r3
 8019188:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801918c:	401a      	ands	r2, r3
 801918e:	f847 2c04 	str.w	r2, [r7, #-4]
 8019192:	e7d3      	b.n	801913c <__hexnan+0xbc>
 8019194:	3e04      	subs	r6, #4
 8019196:	e7d1      	b.n	801913c <__hexnan+0xbc>
 8019198:	2004      	movs	r0, #4
 801919a:	b007      	add	sp, #28
 801919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191a0 <_isatty_r>:
 80191a0:	b538      	push	{r3, r4, r5, lr}
 80191a2:	4c06      	ldr	r4, [pc, #24]	; (80191bc <_isatty_r+0x1c>)
 80191a4:	2300      	movs	r3, #0
 80191a6:	4605      	mov	r5, r0
 80191a8:	4608      	mov	r0, r1
 80191aa:	6023      	str	r3, [r4, #0]
 80191ac:	f7f4 feeb 	bl	800df86 <_isatty>
 80191b0:	1c43      	adds	r3, r0, #1
 80191b2:	d102      	bne.n	80191ba <_isatty_r+0x1a>
 80191b4:	6823      	ldr	r3, [r4, #0]
 80191b6:	b103      	cbz	r3, 80191ba <_isatty_r+0x1a>
 80191b8:	602b      	str	r3, [r5, #0]
 80191ba:	bd38      	pop	{r3, r4, r5, pc}
 80191bc:	20008f4c 	.word	0x20008f4c

080191c0 <__locale_ctype_ptr_l>:
 80191c0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80191c4:	4770      	bx	lr
	...

080191c8 <__locale_ctype_ptr>:
 80191c8:	4b04      	ldr	r3, [pc, #16]	; (80191dc <__locale_ctype_ptr+0x14>)
 80191ca:	4a05      	ldr	r2, [pc, #20]	; (80191e0 <__locale_ctype_ptr+0x18>)
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	6a1b      	ldr	r3, [r3, #32]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	bf08      	it	eq
 80191d4:	4613      	moveq	r3, r2
 80191d6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80191da:	4770      	bx	lr
 80191dc:	2000003c 	.word	0x2000003c
 80191e0:	200000a0 	.word	0x200000a0

080191e4 <__localeconv_l>:
 80191e4:	30f0      	adds	r0, #240	; 0xf0
 80191e6:	4770      	bx	lr

080191e8 <_localeconv_r>:
 80191e8:	4b04      	ldr	r3, [pc, #16]	; (80191fc <_localeconv_r+0x14>)
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	6a18      	ldr	r0, [r3, #32]
 80191ee:	4b04      	ldr	r3, [pc, #16]	; (8019200 <_localeconv_r+0x18>)
 80191f0:	2800      	cmp	r0, #0
 80191f2:	bf08      	it	eq
 80191f4:	4618      	moveq	r0, r3
 80191f6:	30f0      	adds	r0, #240	; 0xf0
 80191f8:	4770      	bx	lr
 80191fa:	bf00      	nop
 80191fc:	2000003c 	.word	0x2000003c
 8019200:	200000a0 	.word	0x200000a0

08019204 <_lseek_r>:
 8019204:	b538      	push	{r3, r4, r5, lr}
 8019206:	4c07      	ldr	r4, [pc, #28]	; (8019224 <_lseek_r+0x20>)
 8019208:	4605      	mov	r5, r0
 801920a:	4608      	mov	r0, r1
 801920c:	4611      	mov	r1, r2
 801920e:	2200      	movs	r2, #0
 8019210:	6022      	str	r2, [r4, #0]
 8019212:	461a      	mov	r2, r3
 8019214:	f7f4 fec2 	bl	800df9c <_lseek>
 8019218:	1c43      	adds	r3, r0, #1
 801921a:	d102      	bne.n	8019222 <_lseek_r+0x1e>
 801921c:	6823      	ldr	r3, [r4, #0]
 801921e:	b103      	cbz	r3, 8019222 <_lseek_r+0x1e>
 8019220:	602b      	str	r3, [r5, #0]
 8019222:	bd38      	pop	{r3, r4, r5, pc}
 8019224:	20008f4c 	.word	0x20008f4c

08019228 <malloc>:
 8019228:	4b02      	ldr	r3, [pc, #8]	; (8019234 <malloc+0xc>)
 801922a:	4601      	mov	r1, r0
 801922c:	6818      	ldr	r0, [r3, #0]
 801922e:	f7fb becd 	b.w	8014fcc <_malloc_r>
 8019232:	bf00      	nop
 8019234:	2000003c 	.word	0x2000003c

08019238 <__ascii_mbtowc>:
 8019238:	b082      	sub	sp, #8
 801923a:	b901      	cbnz	r1, 801923e <__ascii_mbtowc+0x6>
 801923c:	a901      	add	r1, sp, #4
 801923e:	b142      	cbz	r2, 8019252 <__ascii_mbtowc+0x1a>
 8019240:	b14b      	cbz	r3, 8019256 <__ascii_mbtowc+0x1e>
 8019242:	7813      	ldrb	r3, [r2, #0]
 8019244:	600b      	str	r3, [r1, #0]
 8019246:	7812      	ldrb	r2, [r2, #0]
 8019248:	1c10      	adds	r0, r2, #0
 801924a:	bf18      	it	ne
 801924c:	2001      	movne	r0, #1
 801924e:	b002      	add	sp, #8
 8019250:	4770      	bx	lr
 8019252:	4610      	mov	r0, r2
 8019254:	e7fb      	b.n	801924e <__ascii_mbtowc+0x16>
 8019256:	f06f 0001 	mvn.w	r0, #1
 801925a:	e7f8      	b.n	801924e <__ascii_mbtowc+0x16>

0801925c <memmove>:
 801925c:	4288      	cmp	r0, r1
 801925e:	b510      	push	{r4, lr}
 8019260:	eb01 0302 	add.w	r3, r1, r2
 8019264:	d807      	bhi.n	8019276 <memmove+0x1a>
 8019266:	1e42      	subs	r2, r0, #1
 8019268:	4299      	cmp	r1, r3
 801926a:	d00a      	beq.n	8019282 <memmove+0x26>
 801926c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019270:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019274:	e7f8      	b.n	8019268 <memmove+0xc>
 8019276:	4283      	cmp	r3, r0
 8019278:	d9f5      	bls.n	8019266 <memmove+0xa>
 801927a:	1881      	adds	r1, r0, r2
 801927c:	1ad2      	subs	r2, r2, r3
 801927e:	42d3      	cmn	r3, r2
 8019280:	d100      	bne.n	8019284 <memmove+0x28>
 8019282:	bd10      	pop	{r4, pc}
 8019284:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019288:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801928c:	e7f7      	b.n	801927e <memmove+0x22>

0801928e <__malloc_lock>:
 801928e:	4770      	bx	lr

08019290 <__malloc_unlock>:
 8019290:	4770      	bx	lr

08019292 <_Balloc>:
 8019292:	b570      	push	{r4, r5, r6, lr}
 8019294:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019296:	4604      	mov	r4, r0
 8019298:	460e      	mov	r6, r1
 801929a:	b93d      	cbnz	r5, 80192ac <_Balloc+0x1a>
 801929c:	2010      	movs	r0, #16
 801929e:	f7ff ffc3 	bl	8019228 <malloc>
 80192a2:	6260      	str	r0, [r4, #36]	; 0x24
 80192a4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80192a8:	6005      	str	r5, [r0, #0]
 80192aa:	60c5      	str	r5, [r0, #12]
 80192ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80192ae:	68eb      	ldr	r3, [r5, #12]
 80192b0:	b183      	cbz	r3, 80192d4 <_Balloc+0x42>
 80192b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80192b4:	68db      	ldr	r3, [r3, #12]
 80192b6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80192ba:	b9b8      	cbnz	r0, 80192ec <_Balloc+0x5a>
 80192bc:	2101      	movs	r1, #1
 80192be:	fa01 f506 	lsl.w	r5, r1, r6
 80192c2:	1d6a      	adds	r2, r5, #5
 80192c4:	0092      	lsls	r2, r2, #2
 80192c6:	4620      	mov	r0, r4
 80192c8:	f000 fbe1 	bl	8019a8e <_calloc_r>
 80192cc:	b160      	cbz	r0, 80192e8 <_Balloc+0x56>
 80192ce:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80192d2:	e00e      	b.n	80192f2 <_Balloc+0x60>
 80192d4:	2221      	movs	r2, #33	; 0x21
 80192d6:	2104      	movs	r1, #4
 80192d8:	4620      	mov	r0, r4
 80192da:	f000 fbd8 	bl	8019a8e <_calloc_r>
 80192de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80192e0:	60e8      	str	r0, [r5, #12]
 80192e2:	68db      	ldr	r3, [r3, #12]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d1e4      	bne.n	80192b2 <_Balloc+0x20>
 80192e8:	2000      	movs	r0, #0
 80192ea:	bd70      	pop	{r4, r5, r6, pc}
 80192ec:	6802      	ldr	r2, [r0, #0]
 80192ee:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80192f2:	2300      	movs	r3, #0
 80192f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80192f8:	e7f7      	b.n	80192ea <_Balloc+0x58>

080192fa <_Bfree>:
 80192fa:	b570      	push	{r4, r5, r6, lr}
 80192fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80192fe:	4606      	mov	r6, r0
 8019300:	460d      	mov	r5, r1
 8019302:	b93c      	cbnz	r4, 8019314 <_Bfree+0x1a>
 8019304:	2010      	movs	r0, #16
 8019306:	f7ff ff8f 	bl	8019228 <malloc>
 801930a:	6270      	str	r0, [r6, #36]	; 0x24
 801930c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019310:	6004      	str	r4, [r0, #0]
 8019312:	60c4      	str	r4, [r0, #12]
 8019314:	b13d      	cbz	r5, 8019326 <_Bfree+0x2c>
 8019316:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019318:	686a      	ldr	r2, [r5, #4]
 801931a:	68db      	ldr	r3, [r3, #12]
 801931c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019320:	6029      	str	r1, [r5, #0]
 8019322:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8019326:	bd70      	pop	{r4, r5, r6, pc}

08019328 <__multadd>:
 8019328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801932c:	690d      	ldr	r5, [r1, #16]
 801932e:	461f      	mov	r7, r3
 8019330:	4606      	mov	r6, r0
 8019332:	460c      	mov	r4, r1
 8019334:	f101 0c14 	add.w	ip, r1, #20
 8019338:	2300      	movs	r3, #0
 801933a:	f8dc 0000 	ldr.w	r0, [ip]
 801933e:	b281      	uxth	r1, r0
 8019340:	fb02 7101 	mla	r1, r2, r1, r7
 8019344:	0c0f      	lsrs	r7, r1, #16
 8019346:	0c00      	lsrs	r0, r0, #16
 8019348:	fb02 7000 	mla	r0, r2, r0, r7
 801934c:	b289      	uxth	r1, r1
 801934e:	3301      	adds	r3, #1
 8019350:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8019354:	429d      	cmp	r5, r3
 8019356:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801935a:	f84c 1b04 	str.w	r1, [ip], #4
 801935e:	dcec      	bgt.n	801933a <__multadd+0x12>
 8019360:	b1d7      	cbz	r7, 8019398 <__multadd+0x70>
 8019362:	68a3      	ldr	r3, [r4, #8]
 8019364:	42ab      	cmp	r3, r5
 8019366:	dc12      	bgt.n	801938e <__multadd+0x66>
 8019368:	6861      	ldr	r1, [r4, #4]
 801936a:	4630      	mov	r0, r6
 801936c:	3101      	adds	r1, #1
 801936e:	f7ff ff90 	bl	8019292 <_Balloc>
 8019372:	6922      	ldr	r2, [r4, #16]
 8019374:	3202      	adds	r2, #2
 8019376:	f104 010c 	add.w	r1, r4, #12
 801937a:	4680      	mov	r8, r0
 801937c:	0092      	lsls	r2, r2, #2
 801937e:	300c      	adds	r0, #12
 8019380:	f7fb fdc2 	bl	8014f08 <memcpy>
 8019384:	4621      	mov	r1, r4
 8019386:	4630      	mov	r0, r6
 8019388:	f7ff ffb7 	bl	80192fa <_Bfree>
 801938c:	4644      	mov	r4, r8
 801938e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019392:	3501      	adds	r5, #1
 8019394:	615f      	str	r7, [r3, #20]
 8019396:	6125      	str	r5, [r4, #16]
 8019398:	4620      	mov	r0, r4
 801939a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801939e <__s2b>:
 801939e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193a2:	460c      	mov	r4, r1
 80193a4:	4615      	mov	r5, r2
 80193a6:	461f      	mov	r7, r3
 80193a8:	2209      	movs	r2, #9
 80193aa:	3308      	adds	r3, #8
 80193ac:	4606      	mov	r6, r0
 80193ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80193b2:	2100      	movs	r1, #0
 80193b4:	2201      	movs	r2, #1
 80193b6:	429a      	cmp	r2, r3
 80193b8:	db20      	blt.n	80193fc <__s2b+0x5e>
 80193ba:	4630      	mov	r0, r6
 80193bc:	f7ff ff69 	bl	8019292 <_Balloc>
 80193c0:	9b08      	ldr	r3, [sp, #32]
 80193c2:	6143      	str	r3, [r0, #20]
 80193c4:	2d09      	cmp	r5, #9
 80193c6:	f04f 0301 	mov.w	r3, #1
 80193ca:	6103      	str	r3, [r0, #16]
 80193cc:	dd19      	ble.n	8019402 <__s2b+0x64>
 80193ce:	f104 0809 	add.w	r8, r4, #9
 80193d2:	46c1      	mov	r9, r8
 80193d4:	442c      	add	r4, r5
 80193d6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80193da:	4601      	mov	r1, r0
 80193dc:	3b30      	subs	r3, #48	; 0x30
 80193de:	220a      	movs	r2, #10
 80193e0:	4630      	mov	r0, r6
 80193e2:	f7ff ffa1 	bl	8019328 <__multadd>
 80193e6:	45a1      	cmp	r9, r4
 80193e8:	d1f5      	bne.n	80193d6 <__s2b+0x38>
 80193ea:	eb08 0405 	add.w	r4, r8, r5
 80193ee:	3c08      	subs	r4, #8
 80193f0:	1b2d      	subs	r5, r5, r4
 80193f2:	1963      	adds	r3, r4, r5
 80193f4:	42bb      	cmp	r3, r7
 80193f6:	db07      	blt.n	8019408 <__s2b+0x6a>
 80193f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193fc:	0052      	lsls	r2, r2, #1
 80193fe:	3101      	adds	r1, #1
 8019400:	e7d9      	b.n	80193b6 <__s2b+0x18>
 8019402:	340a      	adds	r4, #10
 8019404:	2509      	movs	r5, #9
 8019406:	e7f3      	b.n	80193f0 <__s2b+0x52>
 8019408:	f814 3b01 	ldrb.w	r3, [r4], #1
 801940c:	4601      	mov	r1, r0
 801940e:	3b30      	subs	r3, #48	; 0x30
 8019410:	220a      	movs	r2, #10
 8019412:	4630      	mov	r0, r6
 8019414:	f7ff ff88 	bl	8019328 <__multadd>
 8019418:	e7eb      	b.n	80193f2 <__s2b+0x54>

0801941a <__hi0bits>:
 801941a:	0c02      	lsrs	r2, r0, #16
 801941c:	0412      	lsls	r2, r2, #16
 801941e:	4603      	mov	r3, r0
 8019420:	b9b2      	cbnz	r2, 8019450 <__hi0bits+0x36>
 8019422:	0403      	lsls	r3, r0, #16
 8019424:	2010      	movs	r0, #16
 8019426:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801942a:	bf04      	itt	eq
 801942c:	021b      	lsleq	r3, r3, #8
 801942e:	3008      	addeq	r0, #8
 8019430:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019434:	bf04      	itt	eq
 8019436:	011b      	lsleq	r3, r3, #4
 8019438:	3004      	addeq	r0, #4
 801943a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801943e:	bf04      	itt	eq
 8019440:	009b      	lsleq	r3, r3, #2
 8019442:	3002      	addeq	r0, #2
 8019444:	2b00      	cmp	r3, #0
 8019446:	db06      	blt.n	8019456 <__hi0bits+0x3c>
 8019448:	005b      	lsls	r3, r3, #1
 801944a:	d503      	bpl.n	8019454 <__hi0bits+0x3a>
 801944c:	3001      	adds	r0, #1
 801944e:	4770      	bx	lr
 8019450:	2000      	movs	r0, #0
 8019452:	e7e8      	b.n	8019426 <__hi0bits+0xc>
 8019454:	2020      	movs	r0, #32
 8019456:	4770      	bx	lr

08019458 <__lo0bits>:
 8019458:	6803      	ldr	r3, [r0, #0]
 801945a:	f013 0207 	ands.w	r2, r3, #7
 801945e:	4601      	mov	r1, r0
 8019460:	d00b      	beq.n	801947a <__lo0bits+0x22>
 8019462:	07da      	lsls	r2, r3, #31
 8019464:	d423      	bmi.n	80194ae <__lo0bits+0x56>
 8019466:	0798      	lsls	r0, r3, #30
 8019468:	bf49      	itett	mi
 801946a:	085b      	lsrmi	r3, r3, #1
 801946c:	089b      	lsrpl	r3, r3, #2
 801946e:	2001      	movmi	r0, #1
 8019470:	600b      	strmi	r3, [r1, #0]
 8019472:	bf5c      	itt	pl
 8019474:	600b      	strpl	r3, [r1, #0]
 8019476:	2002      	movpl	r0, #2
 8019478:	4770      	bx	lr
 801947a:	b298      	uxth	r0, r3
 801947c:	b9a8      	cbnz	r0, 80194aa <__lo0bits+0x52>
 801947e:	0c1b      	lsrs	r3, r3, #16
 8019480:	2010      	movs	r0, #16
 8019482:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019486:	bf04      	itt	eq
 8019488:	0a1b      	lsreq	r3, r3, #8
 801948a:	3008      	addeq	r0, #8
 801948c:	071a      	lsls	r2, r3, #28
 801948e:	bf04      	itt	eq
 8019490:	091b      	lsreq	r3, r3, #4
 8019492:	3004      	addeq	r0, #4
 8019494:	079a      	lsls	r2, r3, #30
 8019496:	bf04      	itt	eq
 8019498:	089b      	lsreq	r3, r3, #2
 801949a:	3002      	addeq	r0, #2
 801949c:	07da      	lsls	r2, r3, #31
 801949e:	d402      	bmi.n	80194a6 <__lo0bits+0x4e>
 80194a0:	085b      	lsrs	r3, r3, #1
 80194a2:	d006      	beq.n	80194b2 <__lo0bits+0x5a>
 80194a4:	3001      	adds	r0, #1
 80194a6:	600b      	str	r3, [r1, #0]
 80194a8:	4770      	bx	lr
 80194aa:	4610      	mov	r0, r2
 80194ac:	e7e9      	b.n	8019482 <__lo0bits+0x2a>
 80194ae:	2000      	movs	r0, #0
 80194b0:	4770      	bx	lr
 80194b2:	2020      	movs	r0, #32
 80194b4:	4770      	bx	lr

080194b6 <__i2b>:
 80194b6:	b510      	push	{r4, lr}
 80194b8:	460c      	mov	r4, r1
 80194ba:	2101      	movs	r1, #1
 80194bc:	f7ff fee9 	bl	8019292 <_Balloc>
 80194c0:	2201      	movs	r2, #1
 80194c2:	6144      	str	r4, [r0, #20]
 80194c4:	6102      	str	r2, [r0, #16]
 80194c6:	bd10      	pop	{r4, pc}

080194c8 <__multiply>:
 80194c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194cc:	4614      	mov	r4, r2
 80194ce:	690a      	ldr	r2, [r1, #16]
 80194d0:	6923      	ldr	r3, [r4, #16]
 80194d2:	429a      	cmp	r2, r3
 80194d4:	bfb8      	it	lt
 80194d6:	460b      	movlt	r3, r1
 80194d8:	4688      	mov	r8, r1
 80194da:	bfbc      	itt	lt
 80194dc:	46a0      	movlt	r8, r4
 80194de:	461c      	movlt	r4, r3
 80194e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80194e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80194e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80194ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80194f0:	eb07 0609 	add.w	r6, r7, r9
 80194f4:	42b3      	cmp	r3, r6
 80194f6:	bfb8      	it	lt
 80194f8:	3101      	addlt	r1, #1
 80194fa:	f7ff feca 	bl	8019292 <_Balloc>
 80194fe:	f100 0514 	add.w	r5, r0, #20
 8019502:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8019506:	462b      	mov	r3, r5
 8019508:	2200      	movs	r2, #0
 801950a:	4573      	cmp	r3, lr
 801950c:	d316      	bcc.n	801953c <__multiply+0x74>
 801950e:	f104 0214 	add.w	r2, r4, #20
 8019512:	f108 0114 	add.w	r1, r8, #20
 8019516:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801951a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801951e:	9300      	str	r3, [sp, #0]
 8019520:	9b00      	ldr	r3, [sp, #0]
 8019522:	9201      	str	r2, [sp, #4]
 8019524:	4293      	cmp	r3, r2
 8019526:	d80c      	bhi.n	8019542 <__multiply+0x7a>
 8019528:	2e00      	cmp	r6, #0
 801952a:	dd03      	ble.n	8019534 <__multiply+0x6c>
 801952c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8019530:	2b00      	cmp	r3, #0
 8019532:	d05d      	beq.n	80195f0 <__multiply+0x128>
 8019534:	6106      	str	r6, [r0, #16]
 8019536:	b003      	add	sp, #12
 8019538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801953c:	f843 2b04 	str.w	r2, [r3], #4
 8019540:	e7e3      	b.n	801950a <__multiply+0x42>
 8019542:	f8b2 b000 	ldrh.w	fp, [r2]
 8019546:	f1bb 0f00 	cmp.w	fp, #0
 801954a:	d023      	beq.n	8019594 <__multiply+0xcc>
 801954c:	4689      	mov	r9, r1
 801954e:	46ac      	mov	ip, r5
 8019550:	f04f 0800 	mov.w	r8, #0
 8019554:	f859 4b04 	ldr.w	r4, [r9], #4
 8019558:	f8dc a000 	ldr.w	sl, [ip]
 801955c:	b2a3      	uxth	r3, r4
 801955e:	fa1f fa8a 	uxth.w	sl, sl
 8019562:	fb0b a303 	mla	r3, fp, r3, sl
 8019566:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801956a:	f8dc 4000 	ldr.w	r4, [ip]
 801956e:	4443      	add	r3, r8
 8019570:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019574:	fb0b 840a 	mla	r4, fp, sl, r8
 8019578:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801957c:	46e2      	mov	sl, ip
 801957e:	b29b      	uxth	r3, r3
 8019580:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019584:	454f      	cmp	r7, r9
 8019586:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801958a:	f84a 3b04 	str.w	r3, [sl], #4
 801958e:	d82b      	bhi.n	80195e8 <__multiply+0x120>
 8019590:	f8cc 8004 	str.w	r8, [ip, #4]
 8019594:	9b01      	ldr	r3, [sp, #4]
 8019596:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801959a:	3204      	adds	r2, #4
 801959c:	f1ba 0f00 	cmp.w	sl, #0
 80195a0:	d020      	beq.n	80195e4 <__multiply+0x11c>
 80195a2:	682b      	ldr	r3, [r5, #0]
 80195a4:	4689      	mov	r9, r1
 80195a6:	46a8      	mov	r8, r5
 80195a8:	f04f 0b00 	mov.w	fp, #0
 80195ac:	f8b9 c000 	ldrh.w	ip, [r9]
 80195b0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80195b4:	fb0a 440c 	mla	r4, sl, ip, r4
 80195b8:	445c      	add	r4, fp
 80195ba:	46c4      	mov	ip, r8
 80195bc:	b29b      	uxth	r3, r3
 80195be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80195c2:	f84c 3b04 	str.w	r3, [ip], #4
 80195c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80195ca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80195ce:	0c1b      	lsrs	r3, r3, #16
 80195d0:	fb0a b303 	mla	r3, sl, r3, fp
 80195d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80195d8:	454f      	cmp	r7, r9
 80195da:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80195de:	d805      	bhi.n	80195ec <__multiply+0x124>
 80195e0:	f8c8 3004 	str.w	r3, [r8, #4]
 80195e4:	3504      	adds	r5, #4
 80195e6:	e79b      	b.n	8019520 <__multiply+0x58>
 80195e8:	46d4      	mov	ip, sl
 80195ea:	e7b3      	b.n	8019554 <__multiply+0x8c>
 80195ec:	46e0      	mov	r8, ip
 80195ee:	e7dd      	b.n	80195ac <__multiply+0xe4>
 80195f0:	3e01      	subs	r6, #1
 80195f2:	e799      	b.n	8019528 <__multiply+0x60>

080195f4 <__pow5mult>:
 80195f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195f8:	4615      	mov	r5, r2
 80195fa:	f012 0203 	ands.w	r2, r2, #3
 80195fe:	4606      	mov	r6, r0
 8019600:	460f      	mov	r7, r1
 8019602:	d007      	beq.n	8019614 <__pow5mult+0x20>
 8019604:	3a01      	subs	r2, #1
 8019606:	4c21      	ldr	r4, [pc, #132]	; (801968c <__pow5mult+0x98>)
 8019608:	2300      	movs	r3, #0
 801960a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801960e:	f7ff fe8b 	bl	8019328 <__multadd>
 8019612:	4607      	mov	r7, r0
 8019614:	10ad      	asrs	r5, r5, #2
 8019616:	d035      	beq.n	8019684 <__pow5mult+0x90>
 8019618:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801961a:	b93c      	cbnz	r4, 801962c <__pow5mult+0x38>
 801961c:	2010      	movs	r0, #16
 801961e:	f7ff fe03 	bl	8019228 <malloc>
 8019622:	6270      	str	r0, [r6, #36]	; 0x24
 8019624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019628:	6004      	str	r4, [r0, #0]
 801962a:	60c4      	str	r4, [r0, #12]
 801962c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019634:	b94c      	cbnz	r4, 801964a <__pow5mult+0x56>
 8019636:	f240 2171 	movw	r1, #625	; 0x271
 801963a:	4630      	mov	r0, r6
 801963c:	f7ff ff3b 	bl	80194b6 <__i2b>
 8019640:	2300      	movs	r3, #0
 8019642:	f8c8 0008 	str.w	r0, [r8, #8]
 8019646:	4604      	mov	r4, r0
 8019648:	6003      	str	r3, [r0, #0]
 801964a:	f04f 0800 	mov.w	r8, #0
 801964e:	07eb      	lsls	r3, r5, #31
 8019650:	d50a      	bpl.n	8019668 <__pow5mult+0x74>
 8019652:	4639      	mov	r1, r7
 8019654:	4622      	mov	r2, r4
 8019656:	4630      	mov	r0, r6
 8019658:	f7ff ff36 	bl	80194c8 <__multiply>
 801965c:	4639      	mov	r1, r7
 801965e:	4681      	mov	r9, r0
 8019660:	4630      	mov	r0, r6
 8019662:	f7ff fe4a 	bl	80192fa <_Bfree>
 8019666:	464f      	mov	r7, r9
 8019668:	106d      	asrs	r5, r5, #1
 801966a:	d00b      	beq.n	8019684 <__pow5mult+0x90>
 801966c:	6820      	ldr	r0, [r4, #0]
 801966e:	b938      	cbnz	r0, 8019680 <__pow5mult+0x8c>
 8019670:	4622      	mov	r2, r4
 8019672:	4621      	mov	r1, r4
 8019674:	4630      	mov	r0, r6
 8019676:	f7ff ff27 	bl	80194c8 <__multiply>
 801967a:	6020      	str	r0, [r4, #0]
 801967c:	f8c0 8000 	str.w	r8, [r0]
 8019680:	4604      	mov	r4, r0
 8019682:	e7e4      	b.n	801964e <__pow5mult+0x5a>
 8019684:	4638      	mov	r0, r7
 8019686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801968a:	bf00      	nop
 801968c:	0801a4e8 	.word	0x0801a4e8

08019690 <__lshift>:
 8019690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019694:	460c      	mov	r4, r1
 8019696:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801969a:	6923      	ldr	r3, [r4, #16]
 801969c:	6849      	ldr	r1, [r1, #4]
 801969e:	eb0a 0903 	add.w	r9, sl, r3
 80196a2:	68a3      	ldr	r3, [r4, #8]
 80196a4:	4607      	mov	r7, r0
 80196a6:	4616      	mov	r6, r2
 80196a8:	f109 0501 	add.w	r5, r9, #1
 80196ac:	42ab      	cmp	r3, r5
 80196ae:	db32      	blt.n	8019716 <__lshift+0x86>
 80196b0:	4638      	mov	r0, r7
 80196b2:	f7ff fdee 	bl	8019292 <_Balloc>
 80196b6:	2300      	movs	r3, #0
 80196b8:	4680      	mov	r8, r0
 80196ba:	f100 0114 	add.w	r1, r0, #20
 80196be:	461a      	mov	r2, r3
 80196c0:	4553      	cmp	r3, sl
 80196c2:	db2b      	blt.n	801971c <__lshift+0x8c>
 80196c4:	6920      	ldr	r0, [r4, #16]
 80196c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80196ca:	f104 0314 	add.w	r3, r4, #20
 80196ce:	f016 021f 	ands.w	r2, r6, #31
 80196d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80196d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80196da:	d025      	beq.n	8019728 <__lshift+0x98>
 80196dc:	f1c2 0e20 	rsb	lr, r2, #32
 80196e0:	2000      	movs	r0, #0
 80196e2:	681e      	ldr	r6, [r3, #0]
 80196e4:	468a      	mov	sl, r1
 80196e6:	4096      	lsls	r6, r2
 80196e8:	4330      	orrs	r0, r6
 80196ea:	f84a 0b04 	str.w	r0, [sl], #4
 80196ee:	f853 0b04 	ldr.w	r0, [r3], #4
 80196f2:	459c      	cmp	ip, r3
 80196f4:	fa20 f00e 	lsr.w	r0, r0, lr
 80196f8:	d814      	bhi.n	8019724 <__lshift+0x94>
 80196fa:	6048      	str	r0, [r1, #4]
 80196fc:	b108      	cbz	r0, 8019702 <__lshift+0x72>
 80196fe:	f109 0502 	add.w	r5, r9, #2
 8019702:	3d01      	subs	r5, #1
 8019704:	4638      	mov	r0, r7
 8019706:	f8c8 5010 	str.w	r5, [r8, #16]
 801970a:	4621      	mov	r1, r4
 801970c:	f7ff fdf5 	bl	80192fa <_Bfree>
 8019710:	4640      	mov	r0, r8
 8019712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019716:	3101      	adds	r1, #1
 8019718:	005b      	lsls	r3, r3, #1
 801971a:	e7c7      	b.n	80196ac <__lshift+0x1c>
 801971c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019720:	3301      	adds	r3, #1
 8019722:	e7cd      	b.n	80196c0 <__lshift+0x30>
 8019724:	4651      	mov	r1, sl
 8019726:	e7dc      	b.n	80196e2 <__lshift+0x52>
 8019728:	3904      	subs	r1, #4
 801972a:	f853 2b04 	ldr.w	r2, [r3], #4
 801972e:	f841 2f04 	str.w	r2, [r1, #4]!
 8019732:	459c      	cmp	ip, r3
 8019734:	d8f9      	bhi.n	801972a <__lshift+0x9a>
 8019736:	e7e4      	b.n	8019702 <__lshift+0x72>

08019738 <__mcmp>:
 8019738:	6903      	ldr	r3, [r0, #16]
 801973a:	690a      	ldr	r2, [r1, #16]
 801973c:	1a9b      	subs	r3, r3, r2
 801973e:	b530      	push	{r4, r5, lr}
 8019740:	d10c      	bne.n	801975c <__mcmp+0x24>
 8019742:	0092      	lsls	r2, r2, #2
 8019744:	3014      	adds	r0, #20
 8019746:	3114      	adds	r1, #20
 8019748:	1884      	adds	r4, r0, r2
 801974a:	4411      	add	r1, r2
 801974c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019750:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019754:	4295      	cmp	r5, r2
 8019756:	d003      	beq.n	8019760 <__mcmp+0x28>
 8019758:	d305      	bcc.n	8019766 <__mcmp+0x2e>
 801975a:	2301      	movs	r3, #1
 801975c:	4618      	mov	r0, r3
 801975e:	bd30      	pop	{r4, r5, pc}
 8019760:	42a0      	cmp	r0, r4
 8019762:	d3f3      	bcc.n	801974c <__mcmp+0x14>
 8019764:	e7fa      	b.n	801975c <__mcmp+0x24>
 8019766:	f04f 33ff 	mov.w	r3, #4294967295
 801976a:	e7f7      	b.n	801975c <__mcmp+0x24>

0801976c <__mdiff>:
 801976c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019770:	460d      	mov	r5, r1
 8019772:	4607      	mov	r7, r0
 8019774:	4611      	mov	r1, r2
 8019776:	4628      	mov	r0, r5
 8019778:	4614      	mov	r4, r2
 801977a:	f7ff ffdd 	bl	8019738 <__mcmp>
 801977e:	1e06      	subs	r6, r0, #0
 8019780:	d108      	bne.n	8019794 <__mdiff+0x28>
 8019782:	4631      	mov	r1, r6
 8019784:	4638      	mov	r0, r7
 8019786:	f7ff fd84 	bl	8019292 <_Balloc>
 801978a:	2301      	movs	r3, #1
 801978c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8019790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019794:	bfa4      	itt	ge
 8019796:	4623      	movge	r3, r4
 8019798:	462c      	movge	r4, r5
 801979a:	4638      	mov	r0, r7
 801979c:	6861      	ldr	r1, [r4, #4]
 801979e:	bfa6      	itte	ge
 80197a0:	461d      	movge	r5, r3
 80197a2:	2600      	movge	r6, #0
 80197a4:	2601      	movlt	r6, #1
 80197a6:	f7ff fd74 	bl	8019292 <_Balloc>
 80197aa:	692b      	ldr	r3, [r5, #16]
 80197ac:	60c6      	str	r6, [r0, #12]
 80197ae:	6926      	ldr	r6, [r4, #16]
 80197b0:	f105 0914 	add.w	r9, r5, #20
 80197b4:	f104 0214 	add.w	r2, r4, #20
 80197b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80197bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80197c0:	f100 0514 	add.w	r5, r0, #20
 80197c4:	f04f 0e00 	mov.w	lr, #0
 80197c8:	f852 ab04 	ldr.w	sl, [r2], #4
 80197cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80197d0:	fa1e f18a 	uxtah	r1, lr, sl
 80197d4:	b2a3      	uxth	r3, r4
 80197d6:	1ac9      	subs	r1, r1, r3
 80197d8:	0c23      	lsrs	r3, r4, #16
 80197da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80197de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80197e2:	b289      	uxth	r1, r1
 80197e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80197e8:	45c8      	cmp	r8, r9
 80197ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80197ee:	4694      	mov	ip, r2
 80197f0:	f845 3b04 	str.w	r3, [r5], #4
 80197f4:	d8e8      	bhi.n	80197c8 <__mdiff+0x5c>
 80197f6:	45bc      	cmp	ip, r7
 80197f8:	d304      	bcc.n	8019804 <__mdiff+0x98>
 80197fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80197fe:	b183      	cbz	r3, 8019822 <__mdiff+0xb6>
 8019800:	6106      	str	r6, [r0, #16]
 8019802:	e7c5      	b.n	8019790 <__mdiff+0x24>
 8019804:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019808:	fa1e f381 	uxtah	r3, lr, r1
 801980c:	141a      	asrs	r2, r3, #16
 801980e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019812:	b29b      	uxth	r3, r3
 8019814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019818:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801981c:	f845 3b04 	str.w	r3, [r5], #4
 8019820:	e7e9      	b.n	80197f6 <__mdiff+0x8a>
 8019822:	3e01      	subs	r6, #1
 8019824:	e7e9      	b.n	80197fa <__mdiff+0x8e>
	...

08019828 <__ulp>:
 8019828:	4b12      	ldr	r3, [pc, #72]	; (8019874 <__ulp+0x4c>)
 801982a:	ee10 2a90 	vmov	r2, s1
 801982e:	401a      	ands	r2, r3
 8019830:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8019834:	2b00      	cmp	r3, #0
 8019836:	dd04      	ble.n	8019842 <__ulp+0x1a>
 8019838:	2000      	movs	r0, #0
 801983a:	4619      	mov	r1, r3
 801983c:	ec41 0b10 	vmov	d0, r0, r1
 8019840:	4770      	bx	lr
 8019842:	425b      	negs	r3, r3
 8019844:	151b      	asrs	r3, r3, #20
 8019846:	2b13      	cmp	r3, #19
 8019848:	f04f 0000 	mov.w	r0, #0
 801984c:	f04f 0100 	mov.w	r1, #0
 8019850:	dc04      	bgt.n	801985c <__ulp+0x34>
 8019852:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8019856:	fa42 f103 	asr.w	r1, r2, r3
 801985a:	e7ef      	b.n	801983c <__ulp+0x14>
 801985c:	3b14      	subs	r3, #20
 801985e:	2b1e      	cmp	r3, #30
 8019860:	f04f 0201 	mov.w	r2, #1
 8019864:	bfda      	itte	le
 8019866:	f1c3 031f 	rsble	r3, r3, #31
 801986a:	fa02 f303 	lslle.w	r3, r2, r3
 801986e:	4613      	movgt	r3, r2
 8019870:	4618      	mov	r0, r3
 8019872:	e7e3      	b.n	801983c <__ulp+0x14>
 8019874:	7ff00000 	.word	0x7ff00000

08019878 <__b2d>:
 8019878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801987a:	6905      	ldr	r5, [r0, #16]
 801987c:	f100 0714 	add.w	r7, r0, #20
 8019880:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019884:	1f2e      	subs	r6, r5, #4
 8019886:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801988a:	4620      	mov	r0, r4
 801988c:	f7ff fdc5 	bl	801941a <__hi0bits>
 8019890:	f1c0 0320 	rsb	r3, r0, #32
 8019894:	280a      	cmp	r0, #10
 8019896:	600b      	str	r3, [r1, #0]
 8019898:	f8df c074 	ldr.w	ip, [pc, #116]	; 8019910 <__b2d+0x98>
 801989c:	dc14      	bgt.n	80198c8 <__b2d+0x50>
 801989e:	f1c0 0e0b 	rsb	lr, r0, #11
 80198a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80198a6:	42b7      	cmp	r7, r6
 80198a8:	ea41 030c 	orr.w	r3, r1, ip
 80198ac:	bf34      	ite	cc
 80198ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80198b2:	2100      	movcs	r1, #0
 80198b4:	3015      	adds	r0, #21
 80198b6:	fa04 f000 	lsl.w	r0, r4, r0
 80198ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80198be:	ea40 0201 	orr.w	r2, r0, r1
 80198c2:	ec43 2b10 	vmov	d0, r2, r3
 80198c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198c8:	42b7      	cmp	r7, r6
 80198ca:	bf3a      	itte	cc
 80198cc:	f1a5 0608 	subcc.w	r6, r5, #8
 80198d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80198d4:	2100      	movcs	r1, #0
 80198d6:	380b      	subs	r0, #11
 80198d8:	d015      	beq.n	8019906 <__b2d+0x8e>
 80198da:	4084      	lsls	r4, r0
 80198dc:	f1c0 0520 	rsb	r5, r0, #32
 80198e0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80198e4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80198e8:	42be      	cmp	r6, r7
 80198ea:	fa21 fc05 	lsr.w	ip, r1, r5
 80198ee:	ea44 030c 	orr.w	r3, r4, ip
 80198f2:	bf8c      	ite	hi
 80198f4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80198f8:	2400      	movls	r4, #0
 80198fa:	fa01 f000 	lsl.w	r0, r1, r0
 80198fe:	40ec      	lsrs	r4, r5
 8019900:	ea40 0204 	orr.w	r2, r0, r4
 8019904:	e7dd      	b.n	80198c2 <__b2d+0x4a>
 8019906:	ea44 030c 	orr.w	r3, r4, ip
 801990a:	460a      	mov	r2, r1
 801990c:	e7d9      	b.n	80198c2 <__b2d+0x4a>
 801990e:	bf00      	nop
 8019910:	3ff00000 	.word	0x3ff00000

08019914 <__d2b>:
 8019914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019918:	460e      	mov	r6, r1
 801991a:	2101      	movs	r1, #1
 801991c:	ec59 8b10 	vmov	r8, r9, d0
 8019920:	4615      	mov	r5, r2
 8019922:	f7ff fcb6 	bl	8019292 <_Balloc>
 8019926:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801992a:	4607      	mov	r7, r0
 801992c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019930:	bb34      	cbnz	r4, 8019980 <__d2b+0x6c>
 8019932:	9301      	str	r3, [sp, #4]
 8019934:	f1b8 0300 	subs.w	r3, r8, #0
 8019938:	d027      	beq.n	801998a <__d2b+0x76>
 801993a:	a802      	add	r0, sp, #8
 801993c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8019940:	f7ff fd8a 	bl	8019458 <__lo0bits>
 8019944:	9900      	ldr	r1, [sp, #0]
 8019946:	b1f0      	cbz	r0, 8019986 <__d2b+0x72>
 8019948:	9a01      	ldr	r2, [sp, #4]
 801994a:	f1c0 0320 	rsb	r3, r0, #32
 801994e:	fa02 f303 	lsl.w	r3, r2, r3
 8019952:	430b      	orrs	r3, r1
 8019954:	40c2      	lsrs	r2, r0
 8019956:	617b      	str	r3, [r7, #20]
 8019958:	9201      	str	r2, [sp, #4]
 801995a:	9b01      	ldr	r3, [sp, #4]
 801995c:	61bb      	str	r3, [r7, #24]
 801995e:	2b00      	cmp	r3, #0
 8019960:	bf14      	ite	ne
 8019962:	2102      	movne	r1, #2
 8019964:	2101      	moveq	r1, #1
 8019966:	6139      	str	r1, [r7, #16]
 8019968:	b1c4      	cbz	r4, 801999c <__d2b+0x88>
 801996a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801996e:	4404      	add	r4, r0
 8019970:	6034      	str	r4, [r6, #0]
 8019972:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019976:	6028      	str	r0, [r5, #0]
 8019978:	4638      	mov	r0, r7
 801997a:	b003      	add	sp, #12
 801997c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019984:	e7d5      	b.n	8019932 <__d2b+0x1e>
 8019986:	6179      	str	r1, [r7, #20]
 8019988:	e7e7      	b.n	801995a <__d2b+0x46>
 801998a:	a801      	add	r0, sp, #4
 801998c:	f7ff fd64 	bl	8019458 <__lo0bits>
 8019990:	9b01      	ldr	r3, [sp, #4]
 8019992:	617b      	str	r3, [r7, #20]
 8019994:	2101      	movs	r1, #1
 8019996:	6139      	str	r1, [r7, #16]
 8019998:	3020      	adds	r0, #32
 801999a:	e7e5      	b.n	8019968 <__d2b+0x54>
 801999c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80199a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80199a4:	6030      	str	r0, [r6, #0]
 80199a6:	6918      	ldr	r0, [r3, #16]
 80199a8:	f7ff fd37 	bl	801941a <__hi0bits>
 80199ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80199b0:	e7e1      	b.n	8019976 <__d2b+0x62>

080199b2 <__ratio>:
 80199b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199b6:	4688      	mov	r8, r1
 80199b8:	4669      	mov	r1, sp
 80199ba:	4681      	mov	r9, r0
 80199bc:	f7ff ff5c 	bl	8019878 <__b2d>
 80199c0:	a901      	add	r1, sp, #4
 80199c2:	4640      	mov	r0, r8
 80199c4:	ec57 6b10 	vmov	r6, r7, d0
 80199c8:	f7ff ff56 	bl	8019878 <__b2d>
 80199cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80199d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80199d4:	eba3 0c02 	sub.w	ip, r3, r2
 80199d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80199dc:	1a9b      	subs	r3, r3, r2
 80199de:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80199e2:	ec5b ab10 	vmov	sl, fp, d0
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	bfce      	itee	gt
 80199ea:	463a      	movgt	r2, r7
 80199ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80199f0:	465a      	movle	r2, fp
 80199f2:	4659      	mov	r1, fp
 80199f4:	463d      	mov	r5, r7
 80199f6:	bfd4      	ite	le
 80199f8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80199fc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019a00:	4630      	mov	r0, r6
 8019a02:	ee10 2a10 	vmov	r2, s0
 8019a06:	460b      	mov	r3, r1
 8019a08:	4629      	mov	r1, r5
 8019a0a:	f7ee fe57 	bl	80086bc <__aeabi_ddiv>
 8019a0e:	ec41 0b10 	vmov	d0, r0, r1
 8019a12:	b003      	add	sp, #12
 8019a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a18 <__copybits>:
 8019a18:	3901      	subs	r1, #1
 8019a1a:	b510      	push	{r4, lr}
 8019a1c:	1149      	asrs	r1, r1, #5
 8019a1e:	6914      	ldr	r4, [r2, #16]
 8019a20:	3101      	adds	r1, #1
 8019a22:	f102 0314 	add.w	r3, r2, #20
 8019a26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019a2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019a2e:	42a3      	cmp	r3, r4
 8019a30:	4602      	mov	r2, r0
 8019a32:	d303      	bcc.n	8019a3c <__copybits+0x24>
 8019a34:	2300      	movs	r3, #0
 8019a36:	428a      	cmp	r2, r1
 8019a38:	d305      	bcc.n	8019a46 <__copybits+0x2e>
 8019a3a:	bd10      	pop	{r4, pc}
 8019a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a40:	f840 2b04 	str.w	r2, [r0], #4
 8019a44:	e7f3      	b.n	8019a2e <__copybits+0x16>
 8019a46:	f842 3b04 	str.w	r3, [r2], #4
 8019a4a:	e7f4      	b.n	8019a36 <__copybits+0x1e>

08019a4c <__any_on>:
 8019a4c:	f100 0214 	add.w	r2, r0, #20
 8019a50:	6900      	ldr	r0, [r0, #16]
 8019a52:	114b      	asrs	r3, r1, #5
 8019a54:	4298      	cmp	r0, r3
 8019a56:	b510      	push	{r4, lr}
 8019a58:	db11      	blt.n	8019a7e <__any_on+0x32>
 8019a5a:	dd0a      	ble.n	8019a72 <__any_on+0x26>
 8019a5c:	f011 011f 	ands.w	r1, r1, #31
 8019a60:	d007      	beq.n	8019a72 <__any_on+0x26>
 8019a62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019a66:	fa24 f001 	lsr.w	r0, r4, r1
 8019a6a:	fa00 f101 	lsl.w	r1, r0, r1
 8019a6e:	428c      	cmp	r4, r1
 8019a70:	d10b      	bne.n	8019a8a <__any_on+0x3e>
 8019a72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019a76:	4293      	cmp	r3, r2
 8019a78:	d803      	bhi.n	8019a82 <__any_on+0x36>
 8019a7a:	2000      	movs	r0, #0
 8019a7c:	bd10      	pop	{r4, pc}
 8019a7e:	4603      	mov	r3, r0
 8019a80:	e7f7      	b.n	8019a72 <__any_on+0x26>
 8019a82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019a86:	2900      	cmp	r1, #0
 8019a88:	d0f5      	beq.n	8019a76 <__any_on+0x2a>
 8019a8a:	2001      	movs	r0, #1
 8019a8c:	e7f6      	b.n	8019a7c <__any_on+0x30>

08019a8e <_calloc_r>:
 8019a8e:	b538      	push	{r3, r4, r5, lr}
 8019a90:	fb02 f401 	mul.w	r4, r2, r1
 8019a94:	4621      	mov	r1, r4
 8019a96:	f7fb fa99 	bl	8014fcc <_malloc_r>
 8019a9a:	4605      	mov	r5, r0
 8019a9c:	b118      	cbz	r0, 8019aa6 <_calloc_r+0x18>
 8019a9e:	4622      	mov	r2, r4
 8019aa0:	2100      	movs	r1, #0
 8019aa2:	f7fb fa3c 	bl	8014f1e <memset>
 8019aa6:	4628      	mov	r0, r5
 8019aa8:	bd38      	pop	{r3, r4, r5, pc}

08019aaa <_realloc_r>:
 8019aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aac:	4607      	mov	r7, r0
 8019aae:	4614      	mov	r4, r2
 8019ab0:	460e      	mov	r6, r1
 8019ab2:	b921      	cbnz	r1, 8019abe <_realloc_r+0x14>
 8019ab4:	4611      	mov	r1, r2
 8019ab6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019aba:	f7fb ba87 	b.w	8014fcc <_malloc_r>
 8019abe:	b922      	cbnz	r2, 8019aca <_realloc_r+0x20>
 8019ac0:	f7fb fa36 	bl	8014f30 <_free_r>
 8019ac4:	4625      	mov	r5, r4
 8019ac6:	4628      	mov	r0, r5
 8019ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019aca:	f000 f9ce 	bl	8019e6a <_malloc_usable_size_r>
 8019ace:	42a0      	cmp	r0, r4
 8019ad0:	d20f      	bcs.n	8019af2 <_realloc_r+0x48>
 8019ad2:	4621      	mov	r1, r4
 8019ad4:	4638      	mov	r0, r7
 8019ad6:	f7fb fa79 	bl	8014fcc <_malloc_r>
 8019ada:	4605      	mov	r5, r0
 8019adc:	2800      	cmp	r0, #0
 8019ade:	d0f2      	beq.n	8019ac6 <_realloc_r+0x1c>
 8019ae0:	4631      	mov	r1, r6
 8019ae2:	4622      	mov	r2, r4
 8019ae4:	f7fb fa10 	bl	8014f08 <memcpy>
 8019ae8:	4631      	mov	r1, r6
 8019aea:	4638      	mov	r0, r7
 8019aec:	f7fb fa20 	bl	8014f30 <_free_r>
 8019af0:	e7e9      	b.n	8019ac6 <_realloc_r+0x1c>
 8019af2:	4635      	mov	r5, r6
 8019af4:	e7e7      	b.n	8019ac6 <_realloc_r+0x1c>

08019af6 <__ssputs_r>:
 8019af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019afa:	688e      	ldr	r6, [r1, #8]
 8019afc:	429e      	cmp	r6, r3
 8019afe:	4682      	mov	sl, r0
 8019b00:	460c      	mov	r4, r1
 8019b02:	4690      	mov	r8, r2
 8019b04:	4699      	mov	r9, r3
 8019b06:	d837      	bhi.n	8019b78 <__ssputs_r+0x82>
 8019b08:	898a      	ldrh	r2, [r1, #12]
 8019b0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019b0e:	d031      	beq.n	8019b74 <__ssputs_r+0x7e>
 8019b10:	6825      	ldr	r5, [r4, #0]
 8019b12:	6909      	ldr	r1, [r1, #16]
 8019b14:	1a6f      	subs	r7, r5, r1
 8019b16:	6965      	ldr	r5, [r4, #20]
 8019b18:	2302      	movs	r3, #2
 8019b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019b1e:	fb95 f5f3 	sdiv	r5, r5, r3
 8019b22:	f109 0301 	add.w	r3, r9, #1
 8019b26:	443b      	add	r3, r7
 8019b28:	429d      	cmp	r5, r3
 8019b2a:	bf38      	it	cc
 8019b2c:	461d      	movcc	r5, r3
 8019b2e:	0553      	lsls	r3, r2, #21
 8019b30:	d530      	bpl.n	8019b94 <__ssputs_r+0x9e>
 8019b32:	4629      	mov	r1, r5
 8019b34:	f7fb fa4a 	bl	8014fcc <_malloc_r>
 8019b38:	4606      	mov	r6, r0
 8019b3a:	b950      	cbnz	r0, 8019b52 <__ssputs_r+0x5c>
 8019b3c:	230c      	movs	r3, #12
 8019b3e:	f8ca 3000 	str.w	r3, [sl]
 8019b42:	89a3      	ldrh	r3, [r4, #12]
 8019b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b48:	81a3      	strh	r3, [r4, #12]
 8019b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8019b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b52:	463a      	mov	r2, r7
 8019b54:	6921      	ldr	r1, [r4, #16]
 8019b56:	f7fb f9d7 	bl	8014f08 <memcpy>
 8019b5a:	89a3      	ldrh	r3, [r4, #12]
 8019b5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b64:	81a3      	strh	r3, [r4, #12]
 8019b66:	6126      	str	r6, [r4, #16]
 8019b68:	6165      	str	r5, [r4, #20]
 8019b6a:	443e      	add	r6, r7
 8019b6c:	1bed      	subs	r5, r5, r7
 8019b6e:	6026      	str	r6, [r4, #0]
 8019b70:	60a5      	str	r5, [r4, #8]
 8019b72:	464e      	mov	r6, r9
 8019b74:	454e      	cmp	r6, r9
 8019b76:	d900      	bls.n	8019b7a <__ssputs_r+0x84>
 8019b78:	464e      	mov	r6, r9
 8019b7a:	4632      	mov	r2, r6
 8019b7c:	4641      	mov	r1, r8
 8019b7e:	6820      	ldr	r0, [r4, #0]
 8019b80:	f7ff fb6c 	bl	801925c <memmove>
 8019b84:	68a3      	ldr	r3, [r4, #8]
 8019b86:	1b9b      	subs	r3, r3, r6
 8019b88:	60a3      	str	r3, [r4, #8]
 8019b8a:	6823      	ldr	r3, [r4, #0]
 8019b8c:	441e      	add	r6, r3
 8019b8e:	6026      	str	r6, [r4, #0]
 8019b90:	2000      	movs	r0, #0
 8019b92:	e7dc      	b.n	8019b4e <__ssputs_r+0x58>
 8019b94:	462a      	mov	r2, r5
 8019b96:	f7ff ff88 	bl	8019aaa <_realloc_r>
 8019b9a:	4606      	mov	r6, r0
 8019b9c:	2800      	cmp	r0, #0
 8019b9e:	d1e2      	bne.n	8019b66 <__ssputs_r+0x70>
 8019ba0:	6921      	ldr	r1, [r4, #16]
 8019ba2:	4650      	mov	r0, sl
 8019ba4:	f7fb f9c4 	bl	8014f30 <_free_r>
 8019ba8:	e7c8      	b.n	8019b3c <__ssputs_r+0x46>
	...

08019bac <_svfiprintf_r>:
 8019bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bb0:	461d      	mov	r5, r3
 8019bb2:	898b      	ldrh	r3, [r1, #12]
 8019bb4:	061f      	lsls	r7, r3, #24
 8019bb6:	b09d      	sub	sp, #116	; 0x74
 8019bb8:	4680      	mov	r8, r0
 8019bba:	460c      	mov	r4, r1
 8019bbc:	4616      	mov	r6, r2
 8019bbe:	d50f      	bpl.n	8019be0 <_svfiprintf_r+0x34>
 8019bc0:	690b      	ldr	r3, [r1, #16]
 8019bc2:	b96b      	cbnz	r3, 8019be0 <_svfiprintf_r+0x34>
 8019bc4:	2140      	movs	r1, #64	; 0x40
 8019bc6:	f7fb fa01 	bl	8014fcc <_malloc_r>
 8019bca:	6020      	str	r0, [r4, #0]
 8019bcc:	6120      	str	r0, [r4, #16]
 8019bce:	b928      	cbnz	r0, 8019bdc <_svfiprintf_r+0x30>
 8019bd0:	230c      	movs	r3, #12
 8019bd2:	f8c8 3000 	str.w	r3, [r8]
 8019bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8019bda:	e0c8      	b.n	8019d6e <_svfiprintf_r+0x1c2>
 8019bdc:	2340      	movs	r3, #64	; 0x40
 8019bde:	6163      	str	r3, [r4, #20]
 8019be0:	2300      	movs	r3, #0
 8019be2:	9309      	str	r3, [sp, #36]	; 0x24
 8019be4:	2320      	movs	r3, #32
 8019be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019bea:	2330      	movs	r3, #48	; 0x30
 8019bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019bf0:	9503      	str	r5, [sp, #12]
 8019bf2:	f04f 0b01 	mov.w	fp, #1
 8019bf6:	4637      	mov	r7, r6
 8019bf8:	463d      	mov	r5, r7
 8019bfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019bfe:	b10b      	cbz	r3, 8019c04 <_svfiprintf_r+0x58>
 8019c00:	2b25      	cmp	r3, #37	; 0x25
 8019c02:	d13e      	bne.n	8019c82 <_svfiprintf_r+0xd6>
 8019c04:	ebb7 0a06 	subs.w	sl, r7, r6
 8019c08:	d00b      	beq.n	8019c22 <_svfiprintf_r+0x76>
 8019c0a:	4653      	mov	r3, sl
 8019c0c:	4632      	mov	r2, r6
 8019c0e:	4621      	mov	r1, r4
 8019c10:	4640      	mov	r0, r8
 8019c12:	f7ff ff70 	bl	8019af6 <__ssputs_r>
 8019c16:	3001      	adds	r0, #1
 8019c18:	f000 80a4 	beq.w	8019d64 <_svfiprintf_r+0x1b8>
 8019c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c1e:	4453      	add	r3, sl
 8019c20:	9309      	str	r3, [sp, #36]	; 0x24
 8019c22:	783b      	ldrb	r3, [r7, #0]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	f000 809d 	beq.w	8019d64 <_svfiprintf_r+0x1b8>
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8019c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c34:	9304      	str	r3, [sp, #16]
 8019c36:	9307      	str	r3, [sp, #28]
 8019c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8019c3e:	462f      	mov	r7, r5
 8019c40:	2205      	movs	r2, #5
 8019c42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019c46:	4850      	ldr	r0, [pc, #320]	; (8019d88 <_svfiprintf_r+0x1dc>)
 8019c48:	f7ee fa02 	bl	8008050 <memchr>
 8019c4c:	9b04      	ldr	r3, [sp, #16]
 8019c4e:	b9d0      	cbnz	r0, 8019c86 <_svfiprintf_r+0xda>
 8019c50:	06d9      	lsls	r1, r3, #27
 8019c52:	bf44      	itt	mi
 8019c54:	2220      	movmi	r2, #32
 8019c56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019c5a:	071a      	lsls	r2, r3, #28
 8019c5c:	bf44      	itt	mi
 8019c5e:	222b      	movmi	r2, #43	; 0x2b
 8019c60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019c64:	782a      	ldrb	r2, [r5, #0]
 8019c66:	2a2a      	cmp	r2, #42	; 0x2a
 8019c68:	d015      	beq.n	8019c96 <_svfiprintf_r+0xea>
 8019c6a:	9a07      	ldr	r2, [sp, #28]
 8019c6c:	462f      	mov	r7, r5
 8019c6e:	2000      	movs	r0, #0
 8019c70:	250a      	movs	r5, #10
 8019c72:	4639      	mov	r1, r7
 8019c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c78:	3b30      	subs	r3, #48	; 0x30
 8019c7a:	2b09      	cmp	r3, #9
 8019c7c:	d94d      	bls.n	8019d1a <_svfiprintf_r+0x16e>
 8019c7e:	b1b8      	cbz	r0, 8019cb0 <_svfiprintf_r+0x104>
 8019c80:	e00f      	b.n	8019ca2 <_svfiprintf_r+0xf6>
 8019c82:	462f      	mov	r7, r5
 8019c84:	e7b8      	b.n	8019bf8 <_svfiprintf_r+0x4c>
 8019c86:	4a40      	ldr	r2, [pc, #256]	; (8019d88 <_svfiprintf_r+0x1dc>)
 8019c88:	1a80      	subs	r0, r0, r2
 8019c8a:	fa0b f000 	lsl.w	r0, fp, r0
 8019c8e:	4318      	orrs	r0, r3
 8019c90:	9004      	str	r0, [sp, #16]
 8019c92:	463d      	mov	r5, r7
 8019c94:	e7d3      	b.n	8019c3e <_svfiprintf_r+0x92>
 8019c96:	9a03      	ldr	r2, [sp, #12]
 8019c98:	1d11      	adds	r1, r2, #4
 8019c9a:	6812      	ldr	r2, [r2, #0]
 8019c9c:	9103      	str	r1, [sp, #12]
 8019c9e:	2a00      	cmp	r2, #0
 8019ca0:	db01      	blt.n	8019ca6 <_svfiprintf_r+0xfa>
 8019ca2:	9207      	str	r2, [sp, #28]
 8019ca4:	e004      	b.n	8019cb0 <_svfiprintf_r+0x104>
 8019ca6:	4252      	negs	r2, r2
 8019ca8:	f043 0302 	orr.w	r3, r3, #2
 8019cac:	9207      	str	r2, [sp, #28]
 8019cae:	9304      	str	r3, [sp, #16]
 8019cb0:	783b      	ldrb	r3, [r7, #0]
 8019cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8019cb4:	d10c      	bne.n	8019cd0 <_svfiprintf_r+0x124>
 8019cb6:	787b      	ldrb	r3, [r7, #1]
 8019cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8019cba:	d133      	bne.n	8019d24 <_svfiprintf_r+0x178>
 8019cbc:	9b03      	ldr	r3, [sp, #12]
 8019cbe:	1d1a      	adds	r2, r3, #4
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	9203      	str	r2, [sp, #12]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	bfb8      	it	lt
 8019cc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ccc:	3702      	adds	r7, #2
 8019cce:	9305      	str	r3, [sp, #20]
 8019cd0:	4d2e      	ldr	r5, [pc, #184]	; (8019d8c <_svfiprintf_r+0x1e0>)
 8019cd2:	7839      	ldrb	r1, [r7, #0]
 8019cd4:	2203      	movs	r2, #3
 8019cd6:	4628      	mov	r0, r5
 8019cd8:	f7ee f9ba 	bl	8008050 <memchr>
 8019cdc:	b138      	cbz	r0, 8019cee <_svfiprintf_r+0x142>
 8019cde:	2340      	movs	r3, #64	; 0x40
 8019ce0:	1b40      	subs	r0, r0, r5
 8019ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8019ce6:	9b04      	ldr	r3, [sp, #16]
 8019ce8:	4303      	orrs	r3, r0
 8019cea:	3701      	adds	r7, #1
 8019cec:	9304      	str	r3, [sp, #16]
 8019cee:	7839      	ldrb	r1, [r7, #0]
 8019cf0:	4827      	ldr	r0, [pc, #156]	; (8019d90 <_svfiprintf_r+0x1e4>)
 8019cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019cf6:	2206      	movs	r2, #6
 8019cf8:	1c7e      	adds	r6, r7, #1
 8019cfa:	f7ee f9a9 	bl	8008050 <memchr>
 8019cfe:	2800      	cmp	r0, #0
 8019d00:	d038      	beq.n	8019d74 <_svfiprintf_r+0x1c8>
 8019d02:	4b24      	ldr	r3, [pc, #144]	; (8019d94 <_svfiprintf_r+0x1e8>)
 8019d04:	bb13      	cbnz	r3, 8019d4c <_svfiprintf_r+0x1a0>
 8019d06:	9b03      	ldr	r3, [sp, #12]
 8019d08:	3307      	adds	r3, #7
 8019d0a:	f023 0307 	bic.w	r3, r3, #7
 8019d0e:	3308      	adds	r3, #8
 8019d10:	9303      	str	r3, [sp, #12]
 8019d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d14:	444b      	add	r3, r9
 8019d16:	9309      	str	r3, [sp, #36]	; 0x24
 8019d18:	e76d      	b.n	8019bf6 <_svfiprintf_r+0x4a>
 8019d1a:	fb05 3202 	mla	r2, r5, r2, r3
 8019d1e:	2001      	movs	r0, #1
 8019d20:	460f      	mov	r7, r1
 8019d22:	e7a6      	b.n	8019c72 <_svfiprintf_r+0xc6>
 8019d24:	2300      	movs	r3, #0
 8019d26:	3701      	adds	r7, #1
 8019d28:	9305      	str	r3, [sp, #20]
 8019d2a:	4619      	mov	r1, r3
 8019d2c:	250a      	movs	r5, #10
 8019d2e:	4638      	mov	r0, r7
 8019d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d34:	3a30      	subs	r2, #48	; 0x30
 8019d36:	2a09      	cmp	r2, #9
 8019d38:	d903      	bls.n	8019d42 <_svfiprintf_r+0x196>
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d0c8      	beq.n	8019cd0 <_svfiprintf_r+0x124>
 8019d3e:	9105      	str	r1, [sp, #20]
 8019d40:	e7c6      	b.n	8019cd0 <_svfiprintf_r+0x124>
 8019d42:	fb05 2101 	mla	r1, r5, r1, r2
 8019d46:	2301      	movs	r3, #1
 8019d48:	4607      	mov	r7, r0
 8019d4a:	e7f0      	b.n	8019d2e <_svfiprintf_r+0x182>
 8019d4c:	ab03      	add	r3, sp, #12
 8019d4e:	9300      	str	r3, [sp, #0]
 8019d50:	4622      	mov	r2, r4
 8019d52:	4b11      	ldr	r3, [pc, #68]	; (8019d98 <_svfiprintf_r+0x1ec>)
 8019d54:	a904      	add	r1, sp, #16
 8019d56:	4640      	mov	r0, r8
 8019d58:	f7fb fb66 	bl	8015428 <_printf_float>
 8019d5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019d60:	4681      	mov	r9, r0
 8019d62:	d1d6      	bne.n	8019d12 <_svfiprintf_r+0x166>
 8019d64:	89a3      	ldrh	r3, [r4, #12]
 8019d66:	065b      	lsls	r3, r3, #25
 8019d68:	f53f af35 	bmi.w	8019bd6 <_svfiprintf_r+0x2a>
 8019d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d6e:	b01d      	add	sp, #116	; 0x74
 8019d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d74:	ab03      	add	r3, sp, #12
 8019d76:	9300      	str	r3, [sp, #0]
 8019d78:	4622      	mov	r2, r4
 8019d7a:	4b07      	ldr	r3, [pc, #28]	; (8019d98 <_svfiprintf_r+0x1ec>)
 8019d7c:	a904      	add	r1, sp, #16
 8019d7e:	4640      	mov	r0, r8
 8019d80:	f7fb fe08 	bl	8015994 <_printf_i>
 8019d84:	e7ea      	b.n	8019d5c <_svfiprintf_r+0x1b0>
 8019d86:	bf00      	nop
 8019d88:	0801a32c 	.word	0x0801a32c
 8019d8c:	0801a332 	.word	0x0801a332
 8019d90:	0801a336 	.word	0x0801a336
 8019d94:	08015429 	.word	0x08015429
 8019d98:	08019af7 	.word	0x08019af7

08019d9c <_putc_r>:
 8019d9c:	b570      	push	{r4, r5, r6, lr}
 8019d9e:	460d      	mov	r5, r1
 8019da0:	4614      	mov	r4, r2
 8019da2:	4606      	mov	r6, r0
 8019da4:	b118      	cbz	r0, 8019dae <_putc_r+0x12>
 8019da6:	6983      	ldr	r3, [r0, #24]
 8019da8:	b90b      	cbnz	r3, 8019dae <_putc_r+0x12>
 8019daa:	f7fa ff7f 	bl	8014cac <__sinit>
 8019dae:	4b13      	ldr	r3, [pc, #76]	; (8019dfc <_putc_r+0x60>)
 8019db0:	429c      	cmp	r4, r3
 8019db2:	d112      	bne.n	8019dda <_putc_r+0x3e>
 8019db4:	6874      	ldr	r4, [r6, #4]
 8019db6:	68a3      	ldr	r3, [r4, #8]
 8019db8:	3b01      	subs	r3, #1
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	60a3      	str	r3, [r4, #8]
 8019dbe:	da16      	bge.n	8019dee <_putc_r+0x52>
 8019dc0:	69a2      	ldr	r2, [r4, #24]
 8019dc2:	4293      	cmp	r3, r2
 8019dc4:	db02      	blt.n	8019dcc <_putc_r+0x30>
 8019dc6:	b2eb      	uxtb	r3, r5
 8019dc8:	2b0a      	cmp	r3, #10
 8019dca:	d110      	bne.n	8019dee <_putc_r+0x52>
 8019dcc:	4622      	mov	r2, r4
 8019dce:	4629      	mov	r1, r5
 8019dd0:	4630      	mov	r0, r6
 8019dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019dd6:	f7fd bf85 	b.w	8017ce4 <__swbuf_r>
 8019dda:	4b09      	ldr	r3, [pc, #36]	; (8019e00 <_putc_r+0x64>)
 8019ddc:	429c      	cmp	r4, r3
 8019dde:	d101      	bne.n	8019de4 <_putc_r+0x48>
 8019de0:	68b4      	ldr	r4, [r6, #8]
 8019de2:	e7e8      	b.n	8019db6 <_putc_r+0x1a>
 8019de4:	4b07      	ldr	r3, [pc, #28]	; (8019e04 <_putc_r+0x68>)
 8019de6:	429c      	cmp	r4, r3
 8019de8:	bf08      	it	eq
 8019dea:	68f4      	ldreq	r4, [r6, #12]
 8019dec:	e7e3      	b.n	8019db6 <_putc_r+0x1a>
 8019dee:	6823      	ldr	r3, [r4, #0]
 8019df0:	1c5a      	adds	r2, r3, #1
 8019df2:	6022      	str	r2, [r4, #0]
 8019df4:	701d      	strb	r5, [r3, #0]
 8019df6:	b2e8      	uxtb	r0, r5
 8019df8:	bd70      	pop	{r4, r5, r6, pc}
 8019dfa:	bf00      	nop
 8019dfc:	0801a2e8 	.word	0x0801a2e8
 8019e00:	0801a308 	.word	0x0801a308
 8019e04:	0801a2c8 	.word	0x0801a2c8

08019e08 <_read_r>:
 8019e08:	b538      	push	{r3, r4, r5, lr}
 8019e0a:	4c07      	ldr	r4, [pc, #28]	; (8019e28 <_read_r+0x20>)
 8019e0c:	4605      	mov	r5, r0
 8019e0e:	4608      	mov	r0, r1
 8019e10:	4611      	mov	r1, r2
 8019e12:	2200      	movs	r2, #0
 8019e14:	6022      	str	r2, [r4, #0]
 8019e16:	461a      	mov	r2, r3
 8019e18:	f7f4 f860 	bl	800dedc <_read>
 8019e1c:	1c43      	adds	r3, r0, #1
 8019e1e:	d102      	bne.n	8019e26 <_read_r+0x1e>
 8019e20:	6823      	ldr	r3, [r4, #0]
 8019e22:	b103      	cbz	r3, 8019e26 <_read_r+0x1e>
 8019e24:	602b      	str	r3, [r5, #0]
 8019e26:	bd38      	pop	{r3, r4, r5, pc}
 8019e28:	20008f4c 	.word	0x20008f4c

08019e2c <strncmp>:
 8019e2c:	b510      	push	{r4, lr}
 8019e2e:	b16a      	cbz	r2, 8019e4c <strncmp+0x20>
 8019e30:	3901      	subs	r1, #1
 8019e32:	1884      	adds	r4, r0, r2
 8019e34:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019e38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019e3c:	4293      	cmp	r3, r2
 8019e3e:	d103      	bne.n	8019e48 <strncmp+0x1c>
 8019e40:	42a0      	cmp	r0, r4
 8019e42:	d001      	beq.n	8019e48 <strncmp+0x1c>
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d1f5      	bne.n	8019e34 <strncmp+0x8>
 8019e48:	1a98      	subs	r0, r3, r2
 8019e4a:	bd10      	pop	{r4, pc}
 8019e4c:	4610      	mov	r0, r2
 8019e4e:	e7fc      	b.n	8019e4a <strncmp+0x1e>

08019e50 <__ascii_wctomb>:
 8019e50:	b149      	cbz	r1, 8019e66 <__ascii_wctomb+0x16>
 8019e52:	2aff      	cmp	r2, #255	; 0xff
 8019e54:	bf85      	ittet	hi
 8019e56:	238a      	movhi	r3, #138	; 0x8a
 8019e58:	6003      	strhi	r3, [r0, #0]
 8019e5a:	700a      	strbls	r2, [r1, #0]
 8019e5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019e60:	bf98      	it	ls
 8019e62:	2001      	movls	r0, #1
 8019e64:	4770      	bx	lr
 8019e66:	4608      	mov	r0, r1
 8019e68:	4770      	bx	lr

08019e6a <_malloc_usable_size_r>:
 8019e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e6e:	1f18      	subs	r0, r3, #4
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	bfbc      	itt	lt
 8019e74:	580b      	ldrlt	r3, [r1, r0]
 8019e76:	18c0      	addlt	r0, r0, r3
 8019e78:	4770      	bx	lr
	...

08019e7c <_init>:
 8019e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e7e:	bf00      	nop
 8019e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e82:	bc08      	pop	{r3}
 8019e84:	469e      	mov	lr, r3
 8019e86:	4770      	bx	lr

08019e88 <_fini>:
 8019e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e8a:	bf00      	nop
 8019e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e8e:	bc08      	pop	{r3}
 8019e90:	469e      	mov	lr, r3
 8019e92:	4770      	bx	lr
