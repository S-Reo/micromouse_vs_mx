
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000e234  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000868  08016238  08016238  00026238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08016aa0  08016aa0  00030208  2**0
                  CONTENTS
  6 .ARM          00000008  08016aa0  08016aa0  00026aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08016aa8  08016aa8  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08016aa8  08016aa8  00026aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08016aac  08016aac  00026aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000208  20000000  08016ab0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a548  20000208  08016cb8  00030208  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000a750  08016cb8  0003a750  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033f2c  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006ebe  00000000  00000000  00064164  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00011379  00000000  00000000  0006b022  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001550  00000000  00000000  0007c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002980  00000000  00000000  0007d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00027eb1  00000000  00000000  00080270  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0001aab6  00000000  00000000  000a8121  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    000cad24  00000000  00000000  000c2bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  0018d8fb  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005e80  00000000  00000000  0018d978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000208 	.word	0x20000208
 800801c:	00000000 	.word	0x00000000
 8008020:	0801621c 	.word	0x0801621c

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	2000020c 	.word	0x2000020c
 800803c:	0801621c 	.word	0x0801621c

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
}


void InitPosition()
{
	Pos.X = 0;
 8008df8:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <InitPosition+0x14>)
 8008dfa:	2200      	movs	r2, #0
	Pos.Y = 0;
	Pos.Car = north;
	Pos.Dir = front;
	Pos.Act = Wait;
 8008dfc:	2004      	movs	r0, #4
	Pos.WallSaf = wall_warn;//どっちにするか
 8008dfe:	2101      	movs	r1, #1
	Pos.Act = Wait;
 8008e00:	7198      	strb	r0, [r3, #6]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e02:	71d9      	strb	r1, [r3, #7]
	Pos.X = 0;
 8008e04:	801a      	strh	r2, [r3, #0]
	Pos.Car = north;
 8008e06:	715a      	strb	r2, [r3, #5]
	Pos.Dir = front;
 8008e08:	711a      	strb	r2, [r3, #4]

}
 8008e0a:	4770      	bx	lr
 8008e0c:	20000004 	.word	0x20000004

08008e10 <GetWallCtrlDirection>:

int GetWallCtrlDirection()
{
	//新ライブラリ用に変更
	switch(my_mouse.now.car)
 8008e10:	4a31      	ldr	r2, [pc, #196]	; (8008ed8 <GetWallCtrlDirection+0xc8>)
 8008e12:	7a93      	ldrb	r3, [r2, #10]
 8008e14:	2b06      	cmp	r3, #6
 8008e16:	d855      	bhi.n	8008ec4 <GetWallCtrlDirection+0xb4>
 8008e18:	e8df f003 	tbb	[pc, r3]
 8008e1c:	542c5440 	.word	0x542c5440
 8008e20:	5418      	.short	0x5418
 8008e22:	04          	.byte	0x04
 8008e23:	00          	.byte	0x00
		{
			return N_WALL_PID;
		}
		break;
	case west:
		if(my_mouse.now.wall.west == wall)
 8008e24:	7b13      	ldrb	r3, [r2, #12]
 8008e26:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008e2a:	2a40      	cmp	r2, #64	; 0x40
 8008e2c:	d04c      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		{
			return F_WALL_PID;
		}
		else if ( my_mouse.now.wall.north == wall && my_mouse.now.wall.south == wall)//.westになってた。あと == south )で意味わからない処理に。
 8008e2e:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e32:	2a11      	cmp	r2, #17
 8008e34:	d04a      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		{
			return D_WALL_PID;
		}
		else if ( my_mouse.now.wall.north == wall )
 8008e36:	f003 0203 	and.w	r2, r3, #3
 8008e3a:	2a01      	cmp	r2, #1
 8008e3c:	d048      	beq.n	8008ed0 <GetWallCtrlDirection+0xc0>
		{
			return R_WALL_PID;
		}
		else if ( my_mouse.now.wall.south == wall )
 8008e3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e42:	2b10      	cmp	r3, #16
			return L_WALL_PID;
 8008e44:	bf14      	ite	ne
 8008e46:	2006      	movne	r0, #6
 8008e48:	2002      	moveq	r0, #2
 8008e4a:	4770      	bx	lr
		if(my_mouse.now.wall.south == wall)
 8008e4c:	7b13      	ldrb	r3, [r2, #12]
 8008e4e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8008e52:	2a10      	cmp	r2, #16
 8008e54:	d038      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.east == wall && my_mouse.now.wall.west == wall)
 8008e56:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008e5a:	2a44      	cmp	r2, #68	; 0x44
 8008e5c:	d036      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.east == wall)
 8008e5e:	f003 020c 	and.w	r2, r3, #12
 8008e62:	2a04      	cmp	r2, #4
 8008e64:	d036      	beq.n	8008ed4 <GetWallCtrlDirection+0xc4>
		else if(my_mouse.now.wall.west == wall)
 8008e66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e6a:	2b40      	cmp	r3, #64	; 0x40
			return R_WALL_PID;
 8008e6c:	bf14      	ite	ne
 8008e6e:	2006      	movne	r0, #6
 8008e70:	2003      	moveq	r0, #3
 8008e72:	4770      	bx	lr
		if(my_mouse.now.wall.east == wall)
 8008e74:	7b13      	ldrb	r3, [r2, #12]
 8008e76:	f003 020c 	and.w	r2, r3, #12
 8008e7a:	2a04      	cmp	r2, #4
 8008e7c:	d024      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.north == wall && my_mouse.now.wall.south == wall)//south)
 8008e7e:	f003 0233 	and.w	r2, r3, #51	; 0x33
 8008e82:	2a11      	cmp	r2, #17
 8008e84:	d022      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.north == wall)
 8008e86:	f003 0203 	and.w	r2, r3, #3
 8008e8a:	2a01      	cmp	r2, #1
 8008e8c:	d022      	beq.n	8008ed4 <GetWallCtrlDirection+0xc4>
		else if(my_mouse.now.wall.south == wall)
 8008e8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e92:	2b10      	cmp	r3, #16
			return R_WALL_PID;
 8008e94:	bf14      	ite	ne
 8008e96:	2006      	movne	r0, #6
 8008e98:	2003      	moveq	r0, #3
 8008e9a:	4770      	bx	lr
		if(my_mouse.now.wall.north == wall) //現在の方角と、座標から、壁の存在を確認する処理
 8008e9c:	7b13      	ldrb	r3, [r2, #12]
 8008e9e:	f003 0203 	and.w	r2, r3, #3
 8008ea2:	2a01      	cmp	r2, #1
 8008ea4:	d010      	beq.n	8008ec8 <GetWallCtrlDirection+0xb8>
		else if(my_mouse.now.wall.east == wall && my_mouse.now.wall.west == wall)
 8008ea6:	f003 02cc 	and.w	r2, r3, #204	; 0xcc
 8008eaa:	2a44      	cmp	r2, #68	; 0x44
 8008eac:	d00e      	beq.n	8008ecc <GetWallCtrlDirection+0xbc>
		else if(my_mouse.now.wall.east == wall)
 8008eae:	f003 020c 	and.w	r2, r3, #12
 8008eb2:	2a04      	cmp	r2, #4
 8008eb4:	d00c      	beq.n	8008ed0 <GetWallCtrlDirection+0xc0>
		else if(my_mouse.now.wall.west == wall)
 8008eb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008eba:	2b40      	cmp	r3, #64	; 0x40
			return L_WALL_PID;
 8008ebc:	bf14      	ite	ne
 8008ebe:	2006      	movne	r0, #6
 8008ec0:	2002      	moveq	r0, #2
 8008ec2:	4770      	bx	lr
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 8008ec4:	2006      	movs	r0, #6
 8008ec6:	4770      	bx	lr
			return F_WALL_PID;
 8008ec8:	2008      	movs	r0, #8
 8008eca:	4770      	bx	lr
			return D_WALL_PID;
 8008ecc:	2001      	movs	r0, #1
 8008ece:	4770      	bx	lr
			return R_WALL_PID;
 8008ed0:	2003      	movs	r0, #3
		break;
	}

}
 8008ed2:	4770      	bx	lr
			return L_WALL_PID;
 8008ed4:	2002      	movs	r0, #2
 8008ed6:	4770      	bx	lr
 8008ed8:	20009a24 	.word	0x20009a24

08008edc <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8008edc:	b430      	push	{r4, r5}
 8008ede:	480a      	ldr	r0, [pc, #40]	; (8008f08 <WaitStopAndReset+0x2c>)
 8008ee0:	4d0a      	ldr	r5, [pc, #40]	; (8008f0c <WaitStopAndReset+0x30>)
 8008ee2:	4c0b      	ldr	r4, [pc, #44]	; (8008f10 <WaitStopAndReset+0x34>)
 8008ee4:	490b      	ldr	r1, [pc, #44]	; (8008f14 <WaitStopAndReset+0x38>)
 8008ee6:	4a0c      	ldr	r2, [pc, #48]	; (8008f18 <WaitStopAndReset+0x3c>)
//	ControlWall();//ベイブレード対策
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60ab      	str	r3, [r5, #8]
		Acceleration = 0;
 8008eec:	6023      	str	r3, [r4, #0]
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
 8008eee:	6003      	str	r3, [r0, #0]
		AngularAcceleration = 0;
 8008ef0:	600b      	str	r3, [r1, #0]
		//AngularV = 0;
//		if(CurrentVelocity[LEFT] > 500)
//			ChangeLED(3);
			//printf("回転停止中\r\n");

	}while(CurrentVelocity[BODY] != 0);
 8008ef2:	edd2 7a02 	vldr	s15, [r2, #8]
 8008ef6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efe:	d1f4      	bne.n	8008eea <WaitStopAndReset+0xe>
	HAL_Delay(100);
 8008f00:	2064      	movs	r0, #100	; 0x64
}
 8008f02:	bc30      	pop	{r4, r5}
	HAL_Delay(100);
 8008f04:	f005 ba20 	b.w	800e348 <HAL_Delay>
 8008f08:	2000a198 	.word	0x2000a198
 8008f0c:	2000a188 	.word	0x2000a188
 8008f10:	20007f30 	.word	0x20007f30
 8008f14:	20007f38 	.word	0x20007f38
 8008f18:	2000a1c4 	.word	0x2000a1c4
 8008f1c:	00000000 	.word	0x00000000

08008f20 <Rotate>:
	//加速度が一定。角速度が増加。角速度を積分して角度。角速度の式を作り、角速度を積分して角度を求める等式を立てる。
	//Angle = インテグラル(ang_v(t))dt
	//v = v0+at	|	t=v/a	||		ang_v = ang_v0 + ang_accel *t		||	t = ang_v/ang_accel
	//x=0.5*v*v/a	|	a = 0.5*v*v*/x		||		θ=ang_v0*t+0.5*ang_v^2/ang_accel	||	ang_accel =
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)
	float accel_deg = deg*30/90;
 8008f20:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8008f24:	ee60 6a26 	vmul.f32	s13, s0, s13
 8008f28:	ed9f 6a99 	vldr	s12, [pc, #612]	; 8009190 <Rotate+0x270>
	float const_deg = deg*30/90;
	float decel_deg = deg*30/90;
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f2c:	eddf 7a99 	vldr	s15, [pc, #612]	; 8009194 <Rotate+0x274>
	TargetAngularV = 0;
 8008f30:	4b99      	ldr	r3, [pc, #612]	; (8009198 <Rotate+0x278>)
	float accel_deg = deg*30/90;
 8008f32:	ee86 7a86 	vdiv.f32	s14, s13, s12
{
 8008f36:	b510      	push	{r4, lr}
	TargetAngularV = 0;
 8008f38:	2400      	movs	r4, #0
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f3a:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8008f3e:	ee77 6a07 	vadd.f32	s13, s14, s14
 8008f42:	ee67 7aa0 	vmul.f32	s15, s15, s1
{
 8008f46:	ed2d 8b04 	vpush	{d8-d9}
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f4a:	ee17 0a10 	vmov	r0, s14
	TargetAngularV = 0;
 8008f4e:	601c      	str	r4, [r3, #0]
{
 8008f50:	eef0 8a60 	vmov.f32	s17, s1
			64*T1*ang_v*ang_v / (2*accel_deg),
 8008f54:	ee87 8aa6 	vdiv.f32	s16, s15, s13
{
 8008f58:	eeb0 9a40 	vmov.f32	s18, s0
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f5c:	f7ff fa2c 	bl	80083b8 <__aeabi_f2d>
 8008f60:	a387      	add	r3, pc, #540	; (adr r3, 8009180 <Rotate+0x260>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f7ff fa7f 	bl	8008468 <__aeabi_dmul>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	4b8b      	ldr	r3, [pc, #556]	; (800919c <Rotate+0x27c>)
 8008f6e:	f7ff fba5 	bl	80086bc <__aeabi_ddiv>
 8008f72:	f7ff fd71 	bl	8008a58 <__aeabi_d2f>
		}

	}
#endif

	if( ang_v > 0)	//右回転
 8008f76:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8008f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8008f7e:	ee06 0a90 	vmov	s13, r0
	if( ang_v > 0)	//右回転
 8008f82:	f340 80f2 	ble.w	800916a <Rotate+0x24a>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f86:	4b86      	ldr	r3, [pc, #536]	; (80091a0 <Rotate+0x280>)
//		ChangeLED(2);
		//ここのwhileが抜けないことがある
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f88:	4a86      	ldr	r2, [pc, #536]	; (80091a4 <Rotate+0x284>)
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008f8a:	edd3 7a00 	vldr	s15, [r3]
 8008f8e:	4986      	ldr	r1, [pc, #536]	; (80091a8 <Rotate+0x288>)
 8008f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f94:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008f98:	ed93 7a00 	vldr	s14, [r3]
 8008f9c:	edd2 7a00 	vldr	s15, [r2]
 8008fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa8:	dd0a      	ble.n	8008fc0 <Rotate+0xa0>
		{
			//最短走行の時だけ、Angleが大きくならない、もしくは目標角度がかなり大きい。初期化？最初の旋回なので、0radから90度ぶん目標角度がズレている必要がある。Angleが積算できていないかも。
			AngularAcceleration = angular_acceleration[0]; //ここまで
 8008faa:	ed81 8a00 	vstr	s16, [r1]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8008fae:	ed93 7a00 	vldr	s14, [r3]
 8008fb2:	edd2 7a00 	vldr	s15, [r2]
 8008fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbe:	dcf4      	bgt.n	8008faa <Rotate+0x8a>
//					printf("読み出した角速度の値 : %f, オフセット : %f, 角度 : %f\r\n", ZGyro, zg_offset, fin_angle );
//				}
//
//			}
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008fc0:	edd3 7a00 	vldr	s15, [r3]
 8008fc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc8:	edc3 7a00 	vstr	s15, [r3]
//		ChangeLED(3);
		while(TargetAngle > Angle)
 8008fcc:	ed93 7a00 	vldr	s14, [r3]
 8008fd0:	edd2 7a00 	vldr	s15, [r2]
 8008fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fdc:	dd0a      	ble.n	8008ff4 <Rotate+0xd4>
		{
			AngularAcceleration = angular_acceleration[1];//0
 8008fde:	2000      	movs	r0, #0
 8008fe0:	6008      	str	r0, [r1, #0]
		while(TargetAngle > Angle)
 8008fe2:	ed93 7a00 	vldr	s14, [r3]
 8008fe6:	edd2 7a00 	vldr	s15, [r2]
 8008fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff2:	dcf5      	bgt.n	8008fe0 <Rotate+0xc0>
//					printf("読み出した角速度の値 : %f, オフセット : %f, 角度 : %f\r\n", ZGyro, zg_offset, fin_angle );
//				}
//
//			}
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008ff4:	edd3 7a00 	vldr	s15, [r3]

		while(TargetAngle > Angle)
		{
			 AngularAcceleration = -angular_acceleration[2];
			 if( AngularV <= 0)
 8008ff8:	486c      	ldr	r0, [pc, #432]	; (80091ac <Rotate+0x28c>)
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8008ffa:	ee76 6aa7 	vadd.f32	s13, s13, s15
			 AngularAcceleration = -angular_acceleration[2];
 8008ffe:	eeb1 8a48 	vneg.f32	s16, s16
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009002:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle > Angle)
 8009006:	e008      	b.n	800901a <Rotate+0xfa>
			 AngularAcceleration = -angular_acceleration[2];
 8009008:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV <= 0)
 800900c:	edd0 7a00 	vldr	s15, [r0]
 8009010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009018:	d908      	bls.n	800902c <Rotate+0x10c>
		while(TargetAngle > Angle)
 800901a:	ed93 7a00 	vldr	s14, [r3]
 800901e:	edd2 7a00 	vldr	s15, [r2]
 8009022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902a:	dced      	bgt.n	8009008 <Rotate+0xe8>
			 		break;
			 }
		}

	}
	AngularAcceleration = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	600b      	str	r3, [r1, #0]
	//TargetAngularV = 0;
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);

	WaitStopAndReset();
 8009030:	f7ff ff54 	bl	8008edc <WaitStopAndReset>
//	ControlWall();
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 8009034:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80091b0 <Rotate+0x290>
 8009038:	eec9 7a27 	vdiv.f32	s15, s18, s15
 800903c:	ee17 0a90 	vmov	r0, s15
 8009040:	f7ff f9ba 	bl	80083b8 <__aeabi_f2d>
 8009044:	a350      	add	r3, pc, #320	; (adr r3, 8009188 <Rotate+0x268>)
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	f7ff fa0d 	bl	8008468 <__aeabi_dmul>
 800904e:	f7ff fcbb 	bl	80089c8 <__aeabi_d2iz>
	if(ang_v < 0)
 8009052:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 800905a:	4602      	mov	r2, r0
	if(ang_v < 0)
 800905c:	d475      	bmi.n	800914a <Rotate+0x22a>
		KeepPulse[LEFT] -= target_pulse/2;
		KeepPulse[RIGHT] += target_pulse/2;
	}
	else 	if(ang_v > 0)
	{
		KeepPulse[LEFT] += target_pulse/2;
 800905e:	4b55      	ldr	r3, [pc, #340]	; (80091b4 <Rotate+0x294>)
 8009060:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	1040      	asrs	r0, r0, #1
 8009068:	4402      	add	r2, r0
 800906a:	601a      	str	r2, [r3, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 800906c:	685a      	ldr	r2, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];

	//向いた方角を変える
//	ChangeCardinal();
	//printf("回転終了\r\n");
}
 800906e:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] -= target_pulse/2;
 8009072:	1a10      	subs	r0, r2, r0
 8009074:	6058      	str	r0, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009076:	689a      	ldr	r2, [r3, #8]
 8009078:	609a      	str	r2, [r3, #8]
}
 800907a:	bd10      	pop	{r4, pc}
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800907c:	4b48      	ldr	r3, [pc, #288]	; (80091a0 <Rotate+0x280>)
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800907e:	4a49      	ldr	r2, [pc, #292]	; (80091a4 <Rotate+0x284>)
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009080:	edd3 7a00 	vldr	s15, [r3]
 8009084:	4948      	ldr	r1, [pc, #288]	; (80091a8 <Rotate+0x288>)
 8009086:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800908a:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800908e:	ed93 7a00 	vldr	s14, [r3]
 8009092:	edd2 7a00 	vldr	s15, [r2]
 8009096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800909a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909e:	d50c      	bpl.n	80090ba <Rotate+0x19a>
 80090a0:	eeb1 6a48 	vneg.f32	s12, s16
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 80090a4:	ed81 6a00 	vstr	s12, [r1]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 80090a8:	ed93 7a00 	vldr	s14, [r3]
 80090ac:	edd2 7a00 	vldr	s15, [r2]
 80090b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b8:	d4f4      	bmi.n	80090a4 <Rotate+0x184>
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090ba:	edd3 7a00 	vldr	s15, [r3]
 80090be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80090c2:	edc3 7a00 	vstr	s15, [r3]
		while(TargetAngle < Angle)
 80090c6:	ed93 7a00 	vldr	s14, [r3]
 80090ca:	edd2 7a00 	vldr	s15, [r2]
 80090ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d6:	d50a      	bpl.n	80090ee <Rotate+0x1ce>
			AngularAcceleration = angular_acceleration[1];//0
 80090d8:	2000      	movs	r0, #0
 80090da:	6008      	str	r0, [r1, #0]
		while(TargetAngle < Angle)
 80090dc:	ed93 7a00 	vldr	s14, [r3]
 80090e0:	edd2 7a00 	vldr	s15, [r2]
 80090e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ec:	d4f5      	bmi.n	80090da <Rotate+0x1ba>
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090ee:	edd3 7a00 	vldr	s15, [r3]
			 if( AngularV >= 0)
 80090f2:	482e      	ldr	r0, [pc, #184]	; (80091ac <Rotate+0x28c>)
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80090f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80090f8:	edc3 6a00 	vstr	s13, [r3]
		while(TargetAngle < Angle)
 80090fc:	e008      	b.n	8009110 <Rotate+0x1f0>
			 AngularAcceleration = angular_acceleration[2];
 80090fe:	ed81 8a00 	vstr	s16, [r1]
			 if( AngularV >= 0)
 8009102:	edd0 7a00 	vldr	s15, [r0]
 8009106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800910a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910e:	da08      	bge.n	8009122 <Rotate+0x202>
		while(TargetAngle < Angle)
 8009110:	ed93 7a00 	vldr	s14, [r3]
 8009114:	edd2 7a00 	vldr	s15, [r2]
 8009118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800911c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009120:	d4ed      	bmi.n	80090fe <Rotate+0x1de>
	AngularAcceleration = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	600b      	str	r3, [r1, #0]
	WaitStopAndReset();
 8009126:	f7ff fed9 	bl	8008edc <WaitStopAndReset>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 800912a:	eddf 7a21 	vldr	s15, [pc, #132]	; 80091b0 <Rotate+0x290>
 800912e:	eec9 7a27 	vdiv.f32	s15, s18, s15
 8009132:	ee17 0a90 	vmov	r0, s15
 8009136:	f7ff f93f 	bl	80083b8 <__aeabi_f2d>
 800913a:	a313      	add	r3, pc, #76	; (adr r3, 8009188 <Rotate+0x268>)
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7ff f992 	bl	8008468 <__aeabi_dmul>
 8009144:	f7ff fc40 	bl	80089c8 <__aeabi_d2iz>
 8009148:	4602      	mov	r2, r0
		KeepPulse[LEFT] -= target_pulse/2;
 800914a:	4b1a      	ldr	r3, [pc, #104]	; (80091b4 <Rotate+0x294>)
 800914c:	6819      	ldr	r1, [r3, #0]
 800914e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8009152:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 8009156:	6019      	str	r1, [r3, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 8009158:	6858      	ldr	r0, [r3, #4]
}
 800915a:	ecbd 8b04 	vpop	{d8-d9}
		KeepPulse[RIGHT] += target_pulse/2;
 800915e:	eb00 0262 	add.w	r2, r0, r2, asr #1
 8009162:	605a      	str	r2, [r3, #4]
	KeepPulse[BODY] = KeepPulse[BODY];
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	609a      	str	r2, [r3, #8]
}
 8009168:	bd10      	pop	{r4, pc}
	else if( ang_v < 0)
 800916a:	d487      	bmi.n	800907c <Rotate+0x15c>
	AngularAcceleration = 0;
 800916c:	4b0e      	ldr	r3, [pc, #56]	; (80091a8 <Rotate+0x288>)
 800916e:	601c      	str	r4, [r3, #0]
	WaitStopAndReset();
 8009170:	f7ff feb4 	bl	8008edc <WaitStopAndReset>
}
 8009174:	ecbd 8b04 	vpop	{d8-d9}
 8009178:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <Rotate+0x294>)
	KeepPulse[BODY] = KeepPulse[BODY];
 800917a:	689a      	ldr	r2, [r3, #8]
 800917c:	609a      	str	r2, [r3, #8]
}
 800917e:	bd10      	pop	{r4, pc}
 8009180:	54442d18 	.word	0x54442d18
 8009184:	400921fb 	.word	0x400921fb
 8009188:	cb326649 	.word	0xcb326649
 800918c:	40fa15d6 	.word	0x40fa15d6
 8009190:	42b40000 	.word	0x42b40000
 8009194:	3d83126f 	.word	0x3d83126f
 8009198:	2000a198 	.word	0x2000a198
 800919c:	40668000 	.word	0x40668000
 80091a0:	20007f44 	.word	0x20007f44
 80091a4:	20007f34 	.word	0x20007f34
 80091a8:	20007f38 	.word	0x20007f38
 80091ac:	20007f40 	.word	0x20007f40
 80091b0:	43b40000 	.word	0x43b40000
 80091b4:	2000a1ec 	.word	0x2000a1ec

080091b8 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80091b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091bc:	4c7c      	ldr	r4, [pc, #496]	; (80093b0 <SlalomRight+0x1f8>)
	float now_angv = AngularV;
 80091be:	f8df 8218 	ldr.w	r8, [pc, #536]	; 80093d8 <SlalomRight+0x220>
	float fol = Sla.Fol;         //スラローム後距離
 80091c2:	4a7c      	ldr	r2, [pc, #496]	; (80093b4 <SlalomRight+0x1fc>)
	float now_angv = AngularV;
 80091c4:	f8d8 3000 	ldr.w	r3, [r8]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	6860      	ldr	r0, [r4, #4]
//		}
//
//	}
//	else//なければ
//	{
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80091cc:	edd2 7a00 	vldr	s15, [r2]
 80091d0:	6821      	ldr	r1, [r4, #0]
	Control_Mode = A_VELO_PID;
 80091d2:	f8df a208 	ldr.w	sl, [pc, #520]	; 80093dc <SlalomRight+0x224>
 80091d6:	4d78      	ldr	r5, [pc, #480]	; (80093b8 <SlalomRight+0x200>)
 80091d8:	4f78      	ldr	r7, [pc, #480]	; (80093bc <SlalomRight+0x204>)
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80091da:	4403      	add	r3, r0
 80091dc:	ee07 3a10 	vmov	s14, r3
{
 80091e0:	ed2d 8b06 	vpush	{d8-d10}
	float fol = Sla.Fol;         //スラローム後距離
 80091e4:	edd2 aa01 	vldr	s21, [r2, #4]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 80091e8:	edd2 8a02 	vldr	s17, [r2, #8]
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 80091ec:	ed92 aa04 	vldr	s20, [r2, #16]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 80091f0:	edd2 9a05 	vldr	s19, [r2, #20]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 80091f4:	ed92 9a06 	vldr	s18, [r2, #24]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80091f8:	6862      	ldr	r2, [r4, #4]
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 80091fa:	4b71      	ldr	r3, [pc, #452]	; (80093c0 <SlalomRight+0x208>)
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80091fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009200:	4411      	add	r1, r2
 8009202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009206:	ee07 1a90 	vmov	s15, r1
 800920a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Pos.Act = slalom;
 800920e:	4a6d      	ldr	r2, [pc, #436]	; (80093c4 <SlalomRight+0x20c>)
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009210:	681e      	ldr	r6, [r3, #0]
	Pos.Act = slalom;
 8009212:	2102      	movs	r1, #2
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009214:	eeb4 7ae7 	vcmpe.f32	s14, s15
	Pos.Act = slalom;
 8009218:	7191      	strb	r1, [r2, #6]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800921a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Control_Mode = A_VELO_PID;
 800921e:	f04f 0200 	mov.w	r2, #0
 8009222:	f8ca 2000 	str.w	r2, [sl]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009226:	dd15      	ble.n	8009254 <SlalomRight+0x9c>
 8009228:	4a67      	ldr	r2, [pc, #412]	; (80093c8 <SlalomRight+0x210>)
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 800922a:	2100      	movs	r1, #0
 800922c:	6029      	str	r1, [r5, #0]
				AngularLeapsity = 0;
				AngularAcceleration = 0;
 800922e:	6039      	str	r1, [r7, #0]
				TargetVelocity[BODY] = v_turn;
 8009230:	6096      	str	r6, [r2, #8]
		while( now_pulse + pre > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	6860      	ldr	r0, [r4, #4]
 8009236:	4403      	add	r3, r0
 8009238:	ee07 3a90 	vmov	s15, r3
 800923c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009248:	d4f0      	bmi.n	800922c <SlalomRight+0x74>
 800924a:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80093e0 <SlalomRight+0x228>
 800924e:	f8c9 1000 	str.w	r1, [r9]
 8009252:	e001      	b.n	8009258 <SlalomRight+0xa0>
 8009254:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80093e0 <SlalomRight+0x228>

				////printf("直進1\r\n");
		}
//	}
	now_angv = AngularV;
 8009258:	f8d8 3000 	ldr.w	r3, [r8]
	ChangeLED(3);
 800925c:	2003      	movs	r0, #3
 800925e:	f004 fa93 	bl	800d788 <ChangeLED>
	float start_angle = Angle;
 8009262:	4b5a      	ldr	r3, [pc, #360]	; (80093cc <SlalomRight+0x214>)
 8009264:	ed93 7a00 	vldr	s14, [r3]
	Control_Mode = NOT_CTRL_PID;
	while(start_angle + ang1 > Angle)
 8009268:	edd3 7a00 	vldr	s15, [r3]
 800926c:	ee7a 6a07 	vadd.f32	s13, s20, s14
	Control_Mode = NOT_CTRL_PID;
 8009270:	220a      	movs	r2, #10
	while(start_angle + ang1 > Angle)
 8009272:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Control_Mode = NOT_CTRL_PID;
 800927a:	f8ca 2000 	str.w	r2, [sl]
	while(start_angle + ang1 > Angle)
 800927e:	dd0a      	ble.n	8009296 <SlalomRight+0xde>
 8009280:	4a51      	ldr	r2, [pc, #324]	; (80093c8 <SlalomRight+0x210>)

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
		//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009282:	edc7 8a00 	vstr	s17, [r7]
			TargetVelocity[BODY] = v_turn;
 8009286:	6096      	str	r6, [r2, #8]
	while(start_angle + ang1 > Angle)
 8009288:	edd3 7a00 	vldr	s15, [r3]
 800928c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009294:	d4f5      	bmi.n	8009282 <SlalomRight+0xca>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009296:	2200      	movs	r2, #0
 8009298:	603a      	str	r2, [r7, #0]
	AngularLeapsity = 0;
	now_angv = AngularV;
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 800929a:	ee79 6a87 	vadd.f32	s13, s19, s14
	now_angv = AngularV;
 800929e:	f8d8 1000 	ldr.w	r1, [r8]
	while(start_angle + ang2 > Angle)
 80092a2:	edd3 7a00 	vldr	s15, [r3]
	AngularLeapsity = 0;
 80092a6:	f8c9 2000 	str.w	r2, [r9]
	while(start_angle + ang2 > Angle)
 80092aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80092ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b2:	dd0a      	ble.n	80092ca <SlalomRight+0x112>
 80092b4:	4a44      	ldr	r2, [pc, #272]	; (80093c8 <SlalomRight+0x210>)
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 80092b6:	6829      	ldr	r1, [r5, #0]
 80092b8:	6029      	str	r1, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 80092ba:	6096      	str	r6, [r2, #8]
	while(start_angle + ang2 > Angle)
 80092bc:	edd3 7a00 	vldr	s15, [r3]
 80092c0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80092c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c8:	d4f5      	bmi.n	80092b6 <SlalomRight+0xfe>

			}
#endif
	}

	now_angv = AngularV;
 80092ca:	f8d8 2000 	ldr.w	r2, [r8]
	while( start_angle + ang3 > Angle)
 80092ce:	edd3 7a00 	vldr	s15, [r3]
 80092d2:	ee39 7a07 	vadd.f32	s14, s18, s14
 80092d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092de:	dd1d      	ble.n	800931c <SlalomRight+0x164>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 80092e0:	eef1 8a68 	vneg.f32	s17, s17
 80092e4:	edc7 8a00 	vstr	s17, [r7]
			if(TargetAngularV < 0)
 80092e8:	edd5 7a00 	vldr	s15, [r5]
 80092ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f4:	d453      	bmi.n	800939e <SlalomRight+0x1e6>
 80092f6:	4a34      	ldr	r2, [pc, #208]	; (80093c8 <SlalomRight+0x210>)
 80092f8:	e008      	b.n	800930c <SlalomRight+0x154>
			AngularAcceleration = -alpha_turn;
 80092fa:	edc7 8a00 	vstr	s17, [r7]
			if(TargetAngularV < 0)
 80092fe:	edd5 7a00 	vldr	s15, [r5]
 8009302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930a:	d448      	bmi.n	800939e <SlalomRight+0x1e6>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 800930c:	6096      	str	r6, [r2, #8]
	while( start_angle + ang3 > Angle)
 800930e:	edd3 7a00 	vldr	s15, [r3]
 8009312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931a:	d4ee      	bmi.n	80092fa <SlalomRight+0x142>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 800931c:	2200      	movs	r2, #0
 800931e:	603a      	str	r2, [r7, #0]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 8009320:	602a      	str	r2, [r5, #0]
	//Calc = SearchOrFast; //関数の前に別で設定する
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	6861      	ldr	r1, [r4, #4]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 8009326:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80093c8 <SlalomRight+0x210>
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 800932a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80093e4 <SlalomRight+0x22c>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 800932e:	440b      	add	r3, r1
 8009330:	ee08 3a10 	vmov	s16, r3
 8009334:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
			TargetAngularV = 0;
 8009338:	4617      	mov	r7, r2
 800933a:	ee38 8a2a 	vadd.f32	s16, s16, s21
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800933e:	e005      	b.n	800934c <SlalomRight+0x194>
			TargetAngularV = 0;
 8009340:	602f      	str	r7, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009342:	f8c8 6008 	str.w	r6, [r8, #8]
			if(Calc == 0)
 8009346:	f8d9 3000 	ldr.w	r3, [r9]
 800934a:	b313      	cbz	r3, 8009392 <SlalomRight+0x1da>
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	6862      	ldr	r2, [r4, #4]
 8009350:	4413      	add	r3, r2
 8009352:	ee07 3a90 	vmov	s15, r3
 8009356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800935a:	eef4 7ac8 	vcmpe.f32	s15, s16
 800935e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009362:	d4ed      	bmi.n	8009340 <SlalomRight+0x188>
				updateRealSearch();
#endif
				Calc = 1;
			}
	}
	TargetAngle += 90*M_PI/180;
 8009364:	4d1a      	ldr	r5, [pc, #104]	; (80093d0 <SlalomRight+0x218>)
 8009366:	6828      	ldr	r0, [r5, #0]
 8009368:	f7ff f826 	bl	80083b8 <__aeabi_f2d>
 800936c:	a30e      	add	r3, pc, #56	; (adr r3, 80093a8 <SlalomRight+0x1f0>)
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	f7fe fec3 	bl	80080fc <__adddf3>
 8009376:	f7ff fb6f 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800937a:	4a16      	ldr	r2, [pc, #88]	; (80093d4 <SlalomRight+0x21c>)
	TargetAngle += 90*M_PI/180;
 800937c:	6028      	str	r0, [r5, #0]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 800937e:	ecbd 8b06 	vpop	{d8-d10}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009382:	68a3      	ldr	r3, [r4, #8]
 8009384:	6890      	ldr	r0, [r2, #8]
 8009386:	6891      	ldr	r1, [r2, #8]
 8009388:	1a1b      	subs	r3, r3, r0
 800938a:	440b      	add	r3, r1
 800938c:	6093      	str	r3, [r2, #8]
}
 800938e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				updateRealSearch();
 8009392:	f003 fc5b 	bl	800cc4c <updateRealSearch>
				Calc = 1;
 8009396:	2301      	movs	r3, #1
 8009398:	f8c9 3000 	str.w	r3, [r9]
 800939c:	e7d6      	b.n	800934c <SlalomRight+0x194>
				TargetAngularV = 0;
 800939e:	2300      	movs	r3, #0
 80093a0:	602b      	str	r3, [r5, #0]
				break;
 80093a2:	e7bb      	b.n	800931c <SlalomRight+0x164>
 80093a4:	f3af 8000 	nop.w
 80093a8:	54442d18 	.word	0x54442d18
 80093ac:	3ff921fb 	.word	0x3ff921fb
 80093b0:	2000a1b8 	.word	0x2000a1b8
 80093b4:	2000a1d0 	.word	0x2000a1d0
 80093b8:	2000a198 	.word	0x2000a198
 80093bc:	20007f38 	.word	0x20007f38
 80093c0:	2000a2ac 	.word	0x2000a2ac
 80093c4:	20000004 	.word	0x20000004
 80093c8:	2000a188 	.word	0x2000a188
 80093cc:	20007f34 	.word	0x20007f34
 80093d0:	20007f44 	.word	0x20007f44
 80093d4:	2000a1ec 	.word	0x2000a1ec
 80093d8:	20007f40 	.word	0x20007f40
 80093dc:	2000a17c 	.word	0x2000a17c
 80093e0:	20007f3c 	.word	0x20007f3c
 80093e4:	2000a428 	.word	0x2000a428

080093e8 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 80093e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80093ec:	4c70      	ldr	r4, [pc, #448]	; (80095b0 <SlalomLeft+0x1c8>)
	float fol = Sla.Fol;         //スラローム後距離
 80093ee:	4a71      	ldr	r2, [pc, #452]	; (80095b4 <SlalomLeft+0x1cc>)
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	6866      	ldr	r6, [r4, #4]
//
//
//	}
//	else//なければ
//	{
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 80093f4:	6821      	ldr	r1, [r4, #0]
 80093f6:	6865      	ldr	r5, [r4, #4]
 80093f8:	edd2 7a00 	vldr	s15, [r2]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 80093fc:	edd2 5a02 	vldr	s11, [r2, #8]
	Pos.Act = slalom;
 8009400:	486d      	ldr	r0, [pc, #436]	; (80095b8 <SlalomLeft+0x1d0>)
	Control_Mode = A_VELO_PID;
 8009402:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80095dc <SlalomLeft+0x1f4>
	float fol = Sla.Fol;         //スラローム後距離
 8009406:	ed92 4a01 	vldr	s8, [r2, #4]
	float ang1 = Sla.Theta1;         //角速度が上がるのは0からang1まで
 800940a:	ed92 6a04 	vldr	s12, [r2, #16]
	float ang2 = Sla.Theta2;         //角速度が一定なのはang1からang2まで
 800940e:	edd2 6a05 	vldr	s13, [r2, #20]
	float ang3 = Sla.Theta3;         //角速度が下がるのはang2からang3まで
 8009412:	edd2 3a06 	vldr	s7, [r2, #24]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009416:	4433      	add	r3, r6
 8009418:	ee07 3a10 	vmov	s14, r3
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800941c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009420:	4429      	add	r1, r5
 8009422:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009426:	ee07 1a90 	vmov	s15, r1
 800942a:	eef8 4ae7 	vcvt.f32.s32	s9, s15
	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 800942e:	4b63      	ldr	r3, [pc, #396]	; (80095bc <SlalomLeft+0x1d4>)
 8009430:	4d63      	ldr	r5, [pc, #396]	; (80095c0 <SlalomLeft+0x1d8>)
 8009432:	681e      	ldr	r6, [r3, #0]
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009434:	eeb4 7ae4 	vcmpe.f32	s14, s9
	Pos.Act = slalom;
 8009438:	2102      	movs	r1, #2
	Control_Mode = A_VELO_PID;
 800943a:	2200      	movs	r2, #0
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800943c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8009440:	ed2d 8b02 	vpush	{d8}
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 8009444:	eeb1 5a65 	vneg.f32	s10, s11
	Pos.Act = slalom;
 8009448:	7181      	strb	r1, [r0, #6]
	Control_Mode = A_VELO_PID;
 800944a:	f8cc 2000 	str.w	r2, [ip]
 800944e:	495d      	ldr	r1, [pc, #372]	; (80095c4 <SlalomLeft+0x1dc>)
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009450:	dd10      	ble.n	8009474 <SlalomLeft+0x8c>
 8009452:	4a5d      	ldr	r2, [pc, #372]	; (80095c8 <SlalomLeft+0x1e0>)
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009454:	2000      	movs	r0, #0
 8009456:	6028      	str	r0, [r5, #0]
				AngularAcceleration = 0;
 8009458:	6008      	str	r0, [r1, #0]
				TargetVelocity[BODY] = v_turn;
 800945a:	6096      	str	r6, [r2, #8]
		while( now_pulse + pre  > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	6867      	ldr	r7, [r4, #4]
 8009460:	443b      	add	r3, r7
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800946a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800946e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009472:	d4f0      	bmi.n	8009456 <SlalomLeft+0x6e>
				////printf("直進1\r\n");
		}
//	}

	Control_Mode = NOT_CTRL_PID;
	float start_angle = Angle;
 8009474:	4b55      	ldr	r3, [pc, #340]	; (80095cc <SlalomLeft+0x1e4>)
 8009476:	edd3 7a00 	vldr	s15, [r3]
	while(start_angle - ang1 < Angle)
 800947a:	ed93 7a00 	vldr	s14, [r3]
 800947e:	ee37 6ac6 	vsub.f32	s12, s15, s12
	Control_Mode = NOT_CTRL_PID;
 8009482:	220a      	movs	r2, #10
	while(start_angle - ang1 < Angle)
 8009484:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8009488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Control_Mode = NOT_CTRL_PID;
 800948c:	f8cc 2000 	str.w	r2, [ip]
	while(start_angle - ang1 < Angle)
 8009490:	d50a      	bpl.n	80094a8 <SlalomLeft+0xc0>
 8009492:	4a4d      	ldr	r2, [pc, #308]	; (80095c8 <SlalomLeft+0x1e0>)

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009494:	ed81 5a00 	vstr	s10, [r1]
			TargetVelocity[BODY] = v_turn;
 8009498:	6096      	str	r6, [r2, #8]
	while(start_angle - ang1 < Angle)
 800949a:	ed93 7a00 	vldr	s14, [r3]
 800949e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80094a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a6:	dcf5      	bgt.n	8009494 <SlalomLeft+0xac>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 80094a8:	2200      	movs	r2, #0
 80094aa:	600a      	str	r2, [r1, #0]
	AngularLeapsity = 0;
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 80094ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80094b0:	ed93 7a00 	vldr	s14, [r3]
	AngularLeapsity = 0;
 80094b4:	4846      	ldr	r0, [pc, #280]	; (80095d0 <SlalomLeft+0x1e8>)
	while(start_angle - ang2 < Angle)
 80094b6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80094ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	AngularLeapsity = 0;
 80094be:	6002      	str	r2, [r0, #0]
	while(start_angle - ang2 < Angle)
 80094c0:	d50a      	bpl.n	80094d8 <SlalomLeft+0xf0>
 80094c2:	4a41      	ldr	r2, [pc, #260]	; (80095c8 <SlalomLeft+0x1e0>)
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 80094c4:	6828      	ldr	r0, [r5, #0]
 80094c6:	6028      	str	r0, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 80094c8:	6096      	str	r6, [r2, #8]
	while(start_angle - ang2 < Angle)
 80094ca:	ed93 7a00 	vldr	s14, [r3]
 80094ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80094d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d6:	dcf5      	bgt.n	80094c4 <SlalomLeft+0xdc>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 80094d8:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80094dc:	ed93 7a00 	vldr	s14, [r3]
 80094e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e8:	d51b      	bpl.n	8009522 <SlalomLeft+0x13a>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 80094ea:	edc1 5a00 	vstr	s11, [r1]
			if(TargetAngularV > 0)
 80094ee:	ed95 7a00 	vldr	s14, [r5]
 80094f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80094f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fa:	dc52      	bgt.n	80095a2 <SlalomLeft+0x1ba>
 80094fc:	4a32      	ldr	r2, [pc, #200]	; (80095c8 <SlalomLeft+0x1e0>)
 80094fe:	e008      	b.n	8009512 <SlalomLeft+0x12a>
			AngularAcceleration = -alpha_turn;
 8009500:	edc1 5a00 	vstr	s11, [r1]
			if(TargetAngularV > 0)
 8009504:	ed95 7a00 	vldr	s14, [r5]
 8009508:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800950c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009510:	dc47      	bgt.n	80095a2 <SlalomLeft+0x1ba>
			{
				TargetAngularV = 0;
				break;
			}
			TargetVelocity[BODY] = v_turn;
 8009512:	6096      	str	r6, [r2, #8]
	while( start_angle - ang3 < Angle)
 8009514:	ed93 7a00 	vldr	s14, [r3]
 8009518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800951c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009520:	dcee      	bgt.n	8009500 <SlalomLeft+0x118>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009522:	2700      	movs	r7, #0
 8009524:	600f      	str	r7, [r1, #0]
	AngularLeapsity = 0;
	TargetAngularV = 0;
 8009526:	602f      	str	r7, [r5, #0]
//	Calc = SearchOrFast; //関数の前に別で設定
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009528:	6823      	ldr	r3, [r4, #0]
 800952a:	6862      	ldr	r2, [r4, #4]
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
			TargetVelocity[BODY] = v_turn;
 800952c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80095c8 <SlalomLeft+0x1e0>
			//printf("直進2\r\n");
			if(Calc == 0)
 8009530:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80095e0 <SlalomLeft+0x1f8>
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009534:	4413      	add	r3, r2
 8009536:	ee08 3a10 	vmov	s16, r3
 800953a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800953e:	ee38 8a04 	vadd.f32	s16, s16, s8
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009542:	e005      	b.n	8009550 <SlalomLeft+0x168>
			TargetAngularV = 0;
 8009544:	602f      	str	r7, [r5, #0]
			TargetVelocity[BODY] = v_turn;
 8009546:	f8c8 6008 	str.w	r6, [r8, #8]
			if(Calc == 0)
 800954a:	f8d9 3000 	ldr.w	r3, [r9]
 800954e:	b313      	cbz	r3, 8009596 <SlalomLeft+0x1ae>
	while( now_pulse + fol > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	6862      	ldr	r2, [r4, #4]
 8009554:	4413      	add	r3, r2
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800955e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009566:	dced      	bgt.n	8009544 <SlalomLeft+0x15c>
				updateRealSearch();
#endif
				Calc = 1;
			}
	}
	TargetAngle += -90*M_PI/180;
 8009568:	4d1a      	ldr	r5, [pc, #104]	; (80095d4 <SlalomLeft+0x1ec>)
 800956a:	6828      	ldr	r0, [r5, #0]
 800956c:	f7fe ff24 	bl	80083b8 <__aeabi_f2d>
 8009570:	a30d      	add	r3, pc, #52	; (adr r3, 80095a8 <SlalomLeft+0x1c0>)
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	f7fe fdbf 	bl	80080f8 <__aeabi_dsub>
 800957a:	f7ff fa6d 	bl	8008a58 <__aeabi_d2f>
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800957e:	4a16      	ldr	r2, [pc, #88]	; (80095d8 <SlalomLeft+0x1f0>)
	TargetAngle += -90*M_PI/180;
 8009580:	6028      	str	r0, [r5, #0]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009582:	ecbd 8b02 	vpop	{d8}
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009586:	68a3      	ldr	r3, [r4, #8]
 8009588:	6890      	ldr	r0, [r2, #8]
 800958a:	6891      	ldr	r1, [r2, #8]
 800958c:	1a1b      	subs	r3, r3, r0
 800958e:	440b      	add	r3, r1
 8009590:	6093      	str	r3, [r2, #8]
}
 8009592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				updateRealSearch();
 8009596:	f003 fb59 	bl	800cc4c <updateRealSearch>
				Calc = 1;
 800959a:	2301      	movs	r3, #1
 800959c:	f8c9 3000 	str.w	r3, [r9]
 80095a0:	e7d6      	b.n	8009550 <SlalomLeft+0x168>
				TargetAngularV = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	602b      	str	r3, [r5, #0]
				break;
 80095a6:	e7bc      	b.n	8009522 <SlalomLeft+0x13a>
 80095a8:	54442d18 	.word	0x54442d18
 80095ac:	3ff921fb 	.word	0x3ff921fb
 80095b0:	2000a1b8 	.word	0x2000a1b8
 80095b4:	2000a1d0 	.word	0x2000a1d0
 80095b8:	20000004 	.word	0x20000004
 80095bc:	2000a2ac 	.word	0x2000a2ac
 80095c0:	2000a198 	.word	0x2000a198
 80095c4:	20007f38 	.word	0x20007f38
 80095c8:	2000a188 	.word	0x2000a188
 80095cc:	20007f34 	.word	0x20007f34
 80095d0:	20007f3c 	.word	0x20007f3c
 80095d4:	20007f44 	.word	0x20007f44
 80095d8:	2000a1ec 	.word	0x2000a1ec
 80095dc:	2000a17c 	.word	0x2000a17c
 80095e0:	2000a428 	.word	0x2000a428
 80095e4:	00000000 	.word	0x00000000

080095e8 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
//	Pos.Act = accel;
//	ControlWall();
	TargetAngularV = 0;
 80095e8:	4a39      	ldr	r2, [pc, #228]	; (80096d0 <Accel+0xe8>)
	//printf("%f,%f,%f\r\n",additional_speed,explore_speed,CurrentVelocity[BODY]);
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
//	HAL_Delay(1000);
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 80095ea:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80096d4 <Accel+0xec>
{
 80095ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TargetAngularV = 0;
 80095f2:	2100      	movs	r1, #0
	additional_speed = explore_speed - CurrentVelocity[BODY];
 80095f4:	4b38      	ldr	r3, [pc, #224]	; (80096d8 <Accel+0xf0>)
	TargetAngularV = 0;
 80095f6:	6011      	str	r1, [r2, #0]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 80095f8:	ed93 7a02 	vldr	s14, [r3, #8]
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 80095fc:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 80096e8 <Accel+0x100>
 8009600:	4d36      	ldr	r5, [pc, #216]	; (80096dc <Accel+0xf4>)
 8009602:	4e37      	ldr	r6, [pc, #220]	; (80096e0 <Accel+0xf8>)
	additional_speed = explore_speed - CurrentVelocity[BODY];
 8009604:	ee70 0ac7 	vsub.f32	s1, s1, s14
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009608:	ee30 0a00 	vadd.f32	s0, s0, s0
 800960c:	ee60 7aa7 	vmul.f32	s15, s1, s15
//	WallWarn();
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009610:	ee10 0a10 	vmov	r0, s0
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 8009614:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8009618:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800961c:	ed8b 7a00 	vstr	s14, [fp]
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 8009620:	f7fe feca 	bl	80083b8 <__aeabi_f2d>
 8009624:	a326      	add	r3, pc, #152	; (adr r3, 80096c0 <Accel+0xd8>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7ff f847 	bl	80086bc <__aeabi_ddiv>
 800962e:	f7ff f9cb 	bl	80089c8 <__aeabi_d2iz>
 8009632:	4604      	mov	r4, r0
	//90mmでうまくやるには0から60000カウントまで
	//printf("");
//	_Bool wall_cut = false;
	//ChangeLED(1);

	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009634:	e020      	b.n	8009678 <Accel+0x90>
	{
		//printf("%d, %d, %d, %f, %f, %d, %f, %f, %d, %f, %f\r\n", TotalPulse[BODY], target_pulse, KeepPulse[BODY], TargetVelocity[BODY], Acceleration, VelocityLeftOut ,TargetVelocity[LEFT], CurrentVelocity[LEFT], Pid[L_VELO_PID].out, Pid[L_VELO_PID].KP,Pid[L_VELO_PID].KI);
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009636:	f7fe fead 	bl	8008394 <__aeabi_i2d>
 800963a:	a323      	add	r3, pc, #140	; (adr r3, 80096c8 <Accel+0xe0>)
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	f7fe ff12 	bl	8008468 <__aeabi_dmul>
 8009644:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8009648:	68b7      	ldr	r7, [r6, #8]
 800964a:	4680      	mov	r8, r0
 800964c:	4650      	mov	r0, sl
 800964e:	4689      	mov	r9, r1
 8009650:	f7fe fea0 	bl	8008394 <__aeabi_i2d>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4640      	mov	r0, r8
 800965a:	4649      	mov	r1, r9
 800965c:	f7fe fd4e 	bl	80080fc <__adddf3>
 8009660:	4680      	mov	r8, r0
 8009662:	4638      	mov	r0, r7
 8009664:	4689      	mov	r9, r1
 8009666:	f7fe fe95 	bl	8008394 <__aeabi_i2d>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	4640      	mov	r0, r8
 8009670:	4649      	mov	r1, r9
 8009672:	f7ff f96b 	bl	800894c <__aeabi_dcmplt>
 8009676:	b9b0      	cbnz	r0, 80096a6 <Accel+0xbe>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009678:	68ab      	ldr	r3, [r5, #8]
 800967a:	68b2      	ldr	r2, [r6, #8]
 800967c:	4423      	add	r3, r4
 800967e:	4293      	cmp	r3, r2
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009680:	4620      	mov	r0, r4
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 8009682:	dcd8      	bgt.n	8009636 <Accel+0x4e>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 8009684:	2300      	movs	r3, #0
 8009686:	f8cb 3000 	str.w	r3, [fp]
	//壁読んで、
//	wall_cut = false;
//	ChangeLED(0);
	KeepPulse[BODY] += target_pulse;
 800968a:	68ab      	ldr	r3, [r5, #8]
 800968c:	4423      	add	r3, r4
 800968e:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse/2;
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8009696:	1064      	asrs	r4, r4, #1
 8009698:	4423      	add	r3, r4
 800969a:	602b      	str	r3, [r5, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800969c:	686b      	ldr	r3, [r5, #4]
 800969e:	441c      	add	r4, r3
 80096a0:	606c      	str	r4, [r5, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 80096a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 80096a6:	4b0f      	ldr	r3, [pc, #60]	; (80096e4 <Accel+0xfc>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e4      	bne.n	8009678 <Accel+0x90>
			updateRealSearch();
 80096ae:	f003 facd 	bl	800cc4c <updateRealSearch>
			Calc = 1;
 80096b2:	4a0c      	ldr	r2, [pc, #48]	; (80096e4 <Accel+0xfc>)
 80096b4:	2301      	movs	r3, #1
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	e7de      	b.n	8009678 <Accel+0x90>
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	23ca2666 	.word	0x23ca2666
 80096c4:	3f509268 	.word	0x3f509268
 80096c8:	9999999a 	.word	0x9999999a
 80096cc:	3fe99999 	.word	0x3fe99999
 80096d0:	2000a198 	.word	0x2000a198
 80096d4:	3a83126f 	.word	0x3a83126f
 80096d8:	2000a1c4 	.word	0x2000a1c4
 80096dc:	2000a1ec 	.word	0x2000a1ec
 80096e0:	2000a1b8 	.word	0x2000a1b8
 80096e4:	2000a428 	.word	0x2000a428
 80096e8:	20007f30 	.word	0x20007f30
 80096ec:	00000000 	.word	0x00000000

080096f0 <Decel>:
void Decel(float dec_distance, float end_speed)
{
//	Pos.Act = decel;
	float down_speed=0;
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 80096f0:	4b5b      	ldr	r3, [pc, #364]	; (8009860 <Decel+0x170>)
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 80096f2:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8009864 <Decel+0x174>
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 80096f6:	ed93 7a02 	vldr	s14, [r3, #8]
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 80096fa:	4b5b      	ldr	r3, [pc, #364]	; (8009868 <Decel+0x178>)
	down_speed = CurrentVelocity[BODY] - end_speed; //end_speedが0かそうでないか
 80096fc:	ee37 7a60 	vsub.f32	s14, s14, s1
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009700:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009704:	ee67 7a27 	vmul.f32	s15, s14, s15
{
 8009708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800970c:	ee67 7a87 	vmul.f32	s15, s15, s14
{
 8009710:	ed2d 8b02 	vpush	{d8}
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009714:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
 8009718:	b083      	sub	sp, #12
 800971a:	4e54      	ldr	r6, [pc, #336]	; (800986c <Decel+0x17c>)
 800971c:	4d54      	ldr	r5, [pc, #336]	; (8009870 <Decel+0x180>)
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800971e:	f04f 0a00 	mov.w	sl, #0
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009722:	ee10 0a10 	vmov	r0, s0
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 8009726:	eef1 7a47 	vneg.f32	s15, s14
 800972a:	edc3 7a00 	vstr	s15, [r3]
{
 800972e:	eeb0 8a60 	vmov.f32	s16, s1
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 8009732:	f7fe fe41 	bl	80083b8 <__aeabi_f2d>
 8009736:	a346      	add	r3, pc, #280	; (adr r3, 8009850 <Decel+0x160>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	f7fe ffbe 	bl	80086bc <__aeabi_ddiv>
 8009740:	f7ff f942 	bl	80089c8 <__aeabi_d2iz>
 8009744:	4b4b      	ldr	r3, [pc, #300]	; (8009874 <Decel+0x184>)
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009746:	eddf 8a4c 	vldr	s17, [pc, #304]	; 8009878 <Decel+0x188>
 800974a:	f8d3 b000 	ldr.w	fp, [r3]
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 800974e:	4604      	mov	r4, r0
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 8009750:	e034      	b.n	80097bc <Decel+0xcc>
 8009752:	4a4a      	ldr	r2, [pc, #296]	; (800987c <Decel+0x18c>)
 8009754:	68ab      	ldr	r3, [r5, #8]
 8009756:	6892      	ldr	r2, [r2, #8]
 8009758:	4423      	add	r3, r4
 800975a:	4293      	cmp	r3, r2
 800975c:	dd58      	ble.n	8009810 <Decel+0x120>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= end_speed) //
 800975e:	4b48      	ldr	r3, [pc, #288]	; (8009880 <Decel+0x190>)
 8009760:	edd3 7a02 	vldr	s15, [r3, #8]
 8009764:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800976c:	d956      	bls.n	800981c <Decel+0x12c>
//
//			ChangeLED(k);
//			k++;
			break;
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 800976e:	f7fe fe11 	bl	8008394 <__aeabi_i2d>
 8009772:	a339      	add	r3, pc, #228	; (adr r3, 8009858 <Decel+0x168>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	68af      	ldr	r7, [r5, #8]
 800977a:	9701      	str	r7, [sp, #4]
 800977c:	f7fe fe74 	bl	8008468 <__aeabi_dmul>
 8009780:	4680      	mov	r8, r0
 8009782:	9801      	ldr	r0, [sp, #4]
 8009784:	4f3d      	ldr	r7, [pc, #244]	; (800987c <Decel+0x18c>)
 8009786:	4689      	mov	r9, r1
 8009788:	f7fe fe04 	bl	8008394 <__aeabi_i2d>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	4640      	mov	r0, r8
 8009792:	4649      	mov	r1, r9
 8009794:	f7fe fcb2 	bl	80080fc <__adddf3>
 8009798:	68bf      	ldr	r7, [r7, #8]
 800979a:	4680      	mov	r8, r0
 800979c:	4638      	mov	r0, r7
 800979e:	4689      	mov	r9, r1
 80097a0:	f7fe fdf8 	bl	8008394 <__aeabi_i2d>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4640      	mov	r0, r8
 80097aa:	4649      	mov	r1, r9
 80097ac:	f7ff f8ce 	bl	800894c <__aeabi_dcmplt>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	bf1c      	itt	ne
 80097b4:	f04f 0a01 	movne.w	sl, #1
 80097b8:	f04f 0b00 	movne.w	fp, #0
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80097bc:	ed96 7a03 	vldr	s14, [r6, #12]
 80097c0:	edd6 7a00 	vldr	s15, [r6]
 80097c4:	ee77 7a27 	vadd.f32	s15, s14, s15
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 80097c8:	4620      	mov	r0, r4
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 80097ca:	eef4 7ae8 	vcmpe.f32	s15, s17
 80097ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d2:	d4be      	bmi.n	8009752 <Decel+0x62>
 80097d4:	f1ba 0f00 	cmp.w	sl, #0
 80097d8:	d12e      	bne.n	8009838 <Decel+0x148>
 80097da:	492a      	ldr	r1, [pc, #168]	; (8009884 <Decel+0x194>)
 80097dc:	4a2a      	ldr	r2, [pc, #168]	; (8009888 <Decel+0x198>)
//			PIDChangeFlag(D_WALL_PID, 0);
//			PIDChangeFlag( A_VELO_PID , 1);
			Control_Mode = A_VELO_PID;
		}
	}
	TargetVelocity[BODY] = end_speed;
 80097de:	4828      	ldr	r0, [pc, #160]	; (8009880 <Decel+0x190>)
 80097e0:	ed80 8a02 	vstr	s16, [r0, #8]
	Acceleration = 0;
 80097e4:	4820      	ldr	r0, [pc, #128]	; (8009868 <Decel+0x178>)
 80097e6:	2300      	movs	r3, #0
 80097e8:	6003      	str	r3, [r0, #0]
	TargetAngularV = 0;
 80097ea:	600b      	str	r3, [r1, #0]
	AngularAcceleration = 0;
 80097ec:	6013      	str	r3, [r2, #0]
	//ChangeLED(2);
	KeepPulse[BODY] += target_pulse;
 80097ee:	68ab      	ldr	r3, [r5, #8]
 80097f0:	4423      	add	r3, r4
 80097f2:	60ab      	str	r3, [r5, #8]
	KeepPulse[LEFT] += target_pulse/2;
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80097fa:	1064      	asrs	r4, r4, #1
 80097fc:	4423      	add	r3, r4
 80097fe:	602b      	str	r3, [r5, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 8009800:	686b      	ldr	r3, [r5, #4]
 8009802:	441c      	add	r4, r3
 8009804:	606c      	str	r4, [r5, #4]


}
 8009806:	b003      	add	sp, #12
 8009808:	ecbd 8b02 	vpop	{d8}
 800980c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009810:	491c      	ldr	r1, [pc, #112]	; (8009884 <Decel+0x194>)
 8009812:	f1ba 0f00 	cmp.w	sl, #0
 8009816:	d113      	bne.n	8009840 <Decel+0x150>
 8009818:	4a1b      	ldr	r2, [pc, #108]	; (8009888 <Decel+0x198>)
 800981a:	e7e0      	b.n	80097de <Decel+0xee>
 800981c:	f1ba 0f00 	cmp.w	sl, #0
 8009820:	d112      	bne.n	8009848 <Decel+0x158>
			TargetVelocity[BODY] = end_speed;
 8009822:	4817      	ldr	r0, [pc, #92]	; (8009880 <Decel+0x190>)
			TargetAngularV = 0;
 8009824:	4917      	ldr	r1, [pc, #92]	; (8009884 <Decel+0x194>)
			TargetVelocity[BODY] = end_speed;
 8009826:	ed80 8a02 	vstr	s16, [r0, #8]
			AngularAcceleration = 0;
 800982a:	4a17      	ldr	r2, [pc, #92]	; (8009888 <Decel+0x198>)
			Acceleration = 0;
 800982c:	480e      	ldr	r0, [pc, #56]	; (8009868 <Decel+0x178>)
 800982e:	2300      	movs	r3, #0
 8009830:	6003      	str	r3, [r0, #0]
			TargetAngularV = 0;
 8009832:	600b      	str	r3, [r1, #0]
			AngularAcceleration = 0;
 8009834:	6013      	str	r3, [r2, #0]
			break;
 8009836:	e7d2      	b.n	80097de <Decel+0xee>
 8009838:	4b0e      	ldr	r3, [pc, #56]	; (8009874 <Decel+0x184>)
 800983a:	f8c3 b000 	str.w	fp, [r3]
 800983e:	e7cc      	b.n	80097da <Decel+0xea>
 8009840:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <Decel+0x184>)
 8009842:	f8c3 b000 	str.w	fp, [r3]
 8009846:	e7e7      	b.n	8009818 <Decel+0x128>
 8009848:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <Decel+0x184>)
 800984a:	f8c3 b000 	str.w	fp, [r3]
 800984e:	e7e8      	b.n	8009822 <Decel+0x132>
 8009850:	23ca2666 	.word	0x23ca2666
 8009854:	3f509268 	.word	0x3f509268
 8009858:	cccccccd 	.word	0xcccccccd
 800985c:	3fe4cccc 	.word	0x3fe4cccc
 8009860:	2000a1c4 	.word	0x2000a1c4
 8009864:	3a83126f 	.word	0x3a83126f
 8009868:	20007f30 	.word	0x20007f30
 800986c:	2000a1f8 	.word	0x2000a1f8
 8009870:	2000a1ec 	.word	0x2000a1ec
 8009874:	2000a17c 	.word	0x2000a17c
 8009878:	456d8000 	.word	0x456d8000
 800987c:	2000a1b8 	.word	0x2000a1b8
 8009880:	2000a188 	.word	0x2000a188
 8009884:	2000a198 	.word	0x2000a198
 8009888:	20007f38 	.word	0x20007f38
 800988c:	00000000 	.word	0x00000000

08009890 <GoStraight>:
	Pid[wall_ctrl].flag = 0;
	TargetAngularV = 0;
	return 45;
}
void GoStraight(float move_distance,  float explore_speed, int accel_or_decel)
{
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	ed2d 8b02 	vpush	{d8}
	//v = v0 + at
	//x = v0t + 0.5*at^2
	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	Control_Mode = A_VELO_PID;
	//加減速時は角度制御だけにしておいてあとで困ったら追加
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 8009898:	ee70 7a00 	vadd.f32	s15, s0, s0
	Control_Mode = A_VELO_PID;
 800989c:	4b8e      	ldr	r3, [pc, #568]	; (8009ad8 <GoStraight+0x248>)
 800989e:	2500      	movs	r5, #0
{
 80098a0:	b083      	sub	sp, #12
 80098a2:	4604      	mov	r4, r0
	Control_Mode = A_VELO_PID;
 80098a4:	601d      	str	r5, [r3, #0]
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 80098a6:	ee17 0a90 	vmov	r0, s15
{
 80098aa:	eeb0 8a40 	vmov.f32	s16, s0
 80098ae:	eef0 8a60 	vmov.f32	s17, s1
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 80098b2:	f7fe fd81 	bl	80083b8 <__aeabi_f2d>
 80098b6:	a382      	add	r3, pc, #520	; (adr r3, 8009ac0 <GoStraight+0x230>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f7fe fefe 	bl	80086bc <__aeabi_ddiv>
 80098c0:	f7ff f882 	bl	80089c8 <__aeabi_d2iz>
	if(accel_or_decel == 1) //加速するとき
 80098c4:	2c01      	cmp	r4, #1
 80098c6:	f000 8098 	beq.w	80099fa <GoStraight+0x16a>
	{
		//explore_speed += AddVelocity;
		VelocityMax = true;
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
	}
	else if(accel_or_decel == -1) //探索速度までの減速. ターン速度までの減速も後で入れる
 80098ca:	3401      	adds	r4, #1
 80098cc:	4683      	mov	fp, r0
 80098ce:	f000 80a1 	beq.w	8009a14 <GoStraight+0x184>
//		Pos.Act = straight;
//		WallSafe();
//		ControlWall();
		_Bool wall_cut=false;	//壁切れ用
		_Bool face_check  = false; //一度でも正面領域に収まったか
		int ctrl_mode = GetWallCtrlDirection();
 80098d2:	f7ff fa9d 	bl	8008e10 <GetWallCtrlDirection>
		//両壁がなければ, 角度制御しつつ柱を見たい. 細かすぎるかも.　今は角度制御
		if (ctrl_mode == N_WALL_PID )//|| ctrl_mode == F_WALL_PID)
			ctrl_mode = A_VELO_PID;
 80098d6:	4603      	mov	r3, r0
 80098d8:	2806      	cmp	r0, #6
 80098da:	bf08      	it	eq
 80098dc:	2300      	moveq	r3, #0
 80098de:	4c7f      	ldr	r4, [pc, #508]	; (8009adc <GoStraight+0x24c>)
 80098e0:	4d7f      	ldr	r5, [pc, #508]	; (8009ae0 <GoStraight+0x250>)
 80098e2:	9301      	str	r3, [sp, #4]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 80098e4:	68a3      	ldr	r3, [r4, #8]
 80098e6:	68aa      	ldr	r2, [r5, #8]
 80098e8:	445b      	add	r3, fp
 80098ea:	4293      	cmp	r3, r2
//				}//壁がなくなるのを見越して角度のみに変更
//				else{
//					Control_Mode = ctrl_mode;
//				}//少しの間壁を見て制御
//			}
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 80098ec:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 80098ee:	dd58      	ble.n	80099a2 <GoStraight+0x112>
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 80098f0:	f7fe fd50 	bl	8008394 <__aeabi_i2d>
 80098f4:	68a6      	ldr	r6, [r4, #8]
 80098f6:	4681      	mov	r9, r0
 80098f8:	4630      	mov	r0, r6
 80098fa:	468a      	mov	sl, r1
 80098fc:	f7fe fd4a 	bl	8008394 <__aeabi_i2d>
 8009900:	a371      	add	r3, pc, #452	; (adr r3, 8009ac8 <GoStraight+0x238>)
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	4606      	mov	r6, r0
 8009908:	460f      	mov	r7, r1
 800990a:	4648      	mov	r0, r9
 800990c:	4651      	mov	r1, sl
 800990e:	f7fe fdab 	bl	8008468 <__aeabi_dmul>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7fe fbef 	bl	80080fc <__adddf3>
 800991e:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009922:	4606      	mov	r6, r0
 8009924:	4640      	mov	r0, r8
 8009926:	460f      	mov	r7, r1
 8009928:	f7fe fd34 	bl	8008394 <__aeabi_i2d>
 800992c:	460b      	mov	r3, r1
 800992e:	4602      	mov	r2, r0
 8009930:	4639      	mov	r1, r7
 8009932:	4630      	mov	r0, r6
 8009934:	f7ff f80a 	bl	800894c <__aeabi_dcmplt>
				Control_Mode = A_VELO_PID;
 8009938:	2300      	movs	r3, #0
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 800993a:	2800      	cmp	r0, #0
 800993c:	d059      	beq.n	80099f2 <GoStraight+0x162>
				Control_Mode = A_VELO_PID;
 800993e:	4a66      	ldr	r2, [pc, #408]	; (8009ad8 <GoStraight+0x248>)
 8009940:	6013      	str	r3, [r2, #0]
			}
			else Control_Mode = ctrl_mode;//壁見る
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 8009942:	68a0      	ldr	r0, [r4, #8]
 8009944:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009948:	f7fe fd24 	bl	8008394 <__aeabi_i2d>
 800994c:	a360      	add	r3, pc, #384	; (adr r3, 8009ad0 <GoStraight+0x240>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	4606      	mov	r6, r0
 8009954:	460f      	mov	r7, r1
 8009956:	4648      	mov	r0, r9
 8009958:	4651      	mov	r1, sl
 800995a:	f7fe fd85 	bl	8008468 <__aeabi_dmul>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4630      	mov	r0, r6
 8009964:	4639      	mov	r1, r7
 8009966:	f7fe fbc9 	bl	80080fc <__adddf3>
 800996a:	4606      	mov	r6, r0
 800996c:	4640      	mov	r0, r8
 800996e:	460f      	mov	r7, r1
 8009970:	f7fe fd10 	bl	8008394 <__aeabi_i2d>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7fe ffe6 	bl	800894c <__aeabi_dcmplt>
 8009980:	2800      	cmp	r0, #0
 8009982:	d0af      	beq.n	80098e4 <GoStraight+0x54>
 8009984:	4b57      	ldr	r3, [pc, #348]	; (8009ae4 <GoStraight+0x254>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1ab      	bne.n	80098e4 <GoStraight+0x54>
			{
				updateRealSearch();
 800998c:	f003 f95e 	bl	800cc4c <updateRealSearch>
				Calc = 1;
 8009990:	4a54      	ldr	r2, [pc, #336]	; (8009ae4 <GoStraight+0x254>)
 8009992:	2301      	movs	r3, #1
 8009994:	6013      	str	r3, [r2, #0]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 8009996:	68a3      	ldr	r3, [r4, #8]
 8009998:	68aa      	ldr	r2, [r5, #8]
 800999a:	445b      	add	r3, fp
 800999c:	4293      	cmp	r3, r2
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] ){
 800999e:	4658      	mov	r0, fp
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 80099a0:	dca6      	bgt.n	80098f0 <GoStraight+0x60>
	//			Acceleration = 0;
	//		}
		}
		Control_Mode = A_VELO_PID;
		wall_cut = false;
		Acceleration = 0;
 80099a2:	4b51      	ldr	r3, [pc, #324]	; (8009ae8 <GoStraight+0x258>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
		KeepPulse[BODY] += target_pulse;
 80099a8:	68a3      	ldr	r3, [r4, #8]
		Control_Mode = A_VELO_PID;
 80099aa:	4a4b      	ldr	r2, [pc, #300]	; (8009ad8 <GoStraight+0x248>)
		KeepPulse[BODY] += target_pulse;
 80099ac:	445b      	add	r3, fp
 80099ae:	60a3      	str	r3, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.5f;
 80099b0:	ed94 7a00 	vldr	s14, [r4]
 80099b4:	ee07 ba90 	vmov	s15, fp
 80099b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099c0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80099c4:	eea7 7aa6 	vfma.f32	s14, s15, s13
		Control_Mode = A_VELO_PID;
 80099c8:	2300      	movs	r3, #0
 80099ca:	6013      	str	r3, [r2, #0]
		KeepPulse[LEFT] += target_pulse*0.5f;
 80099cc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80099d0:	ed84 7a00 	vstr	s14, [r4]
		KeepPulse[RIGHT] += target_pulse*0.5f;
 80099d4:	ed94 7a01 	vldr	s14, [r4, #4]
 80099d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099dc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80099e0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80099e4:	edc4 7a01 	vstr	s15, [r4, #4]
	//WallWarn();
	//keep_pulse = TotalPulse[BODY];
	//計算は区切りのいいところで一回するだけ。移動しきるまでそのままか、条件に応じて変える。
	//Uターンは別パターン
	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。
}
 80099e8:	b003      	add	sp, #12
 80099ea:	ecbd 8b02 	vpop	{d8}
 80099ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else Control_Mode = ctrl_mode;//壁見る
 80099f2:	4b39      	ldr	r3, [pc, #228]	; (8009ad8 <GoStraight+0x248>)
 80099f4:	9a01      	ldr	r2, [sp, #4]
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	e7a3      	b.n	8009942 <GoStraight+0xb2>
		VelocityMax = true;
 80099fa:	4b3c      	ldr	r3, [pc, #240]	; (8009aec <GoStraight+0x25c>)
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 80099fc:	eef0 0a68 	vmov.f32	s1, s17
 8009a00:	eeb0 0a48 	vmov.f32	s0, s16
		VelocityMax = true;
 8009a04:	701c      	strb	r4, [r3, #0]
}
 8009a06:	b003      	add	sp, #12
 8009a08:	ecbd 8b02 	vpop	{d8}
 8009a0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Accel( move_distance , explore_speed);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 8009a10:	f7ff bdea 	b.w	80095e8 <Accel>
		VelocityMax = false;
 8009a14:	4b35      	ldr	r3, [pc, #212]	; (8009aec <GoStraight+0x25c>)
 8009a16:	4c31      	ldr	r4, [pc, #196]	; (8009adc <GoStraight+0x24c>)
 8009a18:	701d      	strb	r5, [r3, #0]
		Decel( move_distance*0.75f, explore_speed); //0.8で減速
 8009a1a:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8009a1e:	eef0 0a68 	vmov.f32	s1, s17
 8009a22:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009a26:	f7ff fe63 	bl	80096f0 <Decel>
 8009a2a:	ee07 ba90 	vmov	s15, fp
 8009a2e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8009a32:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
 8009a36:	ee28 8a88 	vmul.f32	s16, s17, s16
 8009a3a:	4d29      	ldr	r5, [pc, #164]	; (8009ae0 <GoStraight+0x250>)
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009a3c:	4e29      	ldr	r6, [pc, #164]	; (8009ae4 <GoStraight+0x254>)
				Calc = 1;
 8009a3e:	2701      	movs	r7, #1
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009a40:	e001      	b.n	8009a46 <GoStraight+0x1b6>
			if(Calc == 0)//減速終了後直ぐにマップ更新
 8009a42:	6833      	ldr	r3, [r6, #0]
 8009a44:	b3bb      	cbz	r3, 8009ab6 <GoStraight+0x226>
		while( ( KeepPulse[BODY] +(target_pulse*0.25f)) > ( TotalPulse[BODY]) ) //残り0.2でマップの更新
 8009a46:	edd4 7a02 	vldr	s15, [r4, #8]
 8009a4a:	ed95 7a02 	vldr	s14, [r5, #8]
 8009a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a56:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a62:	dcee      	bgt.n	8009a42 <GoStraight+0x1b2>
		KeepPulse[BODY] += target_pulse*0.2f;
 8009a64:	edd4 7a02 	vldr	s15, [r4, #8]
 8009a68:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009af0 <GoStraight+0x260>
 8009a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a70:	ee28 7a87 	vmul.f32	s14, s17, s14
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009a74:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
		KeepPulse[BODY] += target_pulse*0.2f;
 8009a78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a80:	edc4 7a02 	vstr	s15, [r4, #8]
		KeepPulse[LEFT] += target_pulse*0.2f*0.5f;
 8009a84:	edd4 7a00 	vldr	s15, [r4]
 8009a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a8c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a94:	edc4 7a00 	vstr	s15, [r4]
		KeepPulse[RIGHT] += target_pulse*0.2f*0.5f;
 8009a98:	edd4 7a01 	vldr	s15, [r4, #4]
 8009a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aa0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009aa8:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8009aac:	b003      	add	sp, #12
 8009aae:	ecbd 8b02 	vpop	{d8}
 8009ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				updateRealSearch();
 8009ab6:	f003 f8c9 	bl	800cc4c <updateRealSearch>
				Calc = 1;
 8009aba:	6037      	str	r7, [r6, #0]
 8009abc:	e7c3      	b.n	8009a46 <GoStraight+0x1b6>
 8009abe:	bf00      	nop
 8009ac0:	23ca2666 	.word	0x23ca2666
 8009ac4:	3f509268 	.word	0x3f509268
 8009ac8:	9999999a 	.word	0x9999999a
 8009acc:	3fd99999 	.word	0x3fd99999
 8009ad0:	9999999a 	.word	0x9999999a
 8009ad4:	3fe99999 	.word	0x3fe99999
 8009ad8:	2000a17c 	.word	0x2000a17c
 8009adc:	2000a1ec 	.word	0x2000a1ec
 8009ae0:	2000a1b8 	.word	0x2000a1b8
 8009ae4:	2000a428 	.word	0x2000a428
 8009ae8:	20007f30 	.word	0x20007f30
 8009aec:	2000a2aa 	.word	0x2000a2aa
 8009af0:	3e4ccccd 	.word	0x3e4ccccd

08009af4 <TurnRight>:
void TurnRight(char mode)
{
	//関数呼び出しと判定処理が多いと遅い。

	switch( mode )
 8009af4:	2853      	cmp	r0, #83	; 0x53
 8009af6:	d02a      	beq.n	8009b4e <TurnRight+0x5a>
 8009af8:	2854      	cmp	r0, #84	; 0x54
 8009afa:	d127      	bne.n	8009b4c <TurnRight+0x58>
{
 8009afc:	b510      	push	{r4, lr}
	{
	case 'T' :

		Decel(45, 0);
 8009afe:	eddf 0a15 	vldr	s1, [pc, #84]	; 8009b54 <TurnRight+0x60>
 8009b02:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8009b58 <TurnRight+0x64>
//		ChangeLED(5);
		//AjustCenter();
		EmitterOFF();
//		Pid[Control_Mode].flag = 0;
//		PIDReset(Control_Mode);
		Control_Mode = NOT_CTRL_PID;
 8009b06:	4c15      	ldr	r4, [pc, #84]	; (8009b5c <TurnRight+0x68>)
		Decel(45, 0);
 8009b08:	f7ff fdf2 	bl	80096f0 <Decel>
		WaitStopAndReset();
 8009b0c:	f7ff f9e6 	bl	8008edc <WaitStopAndReset>
		EmitterOFF();
 8009b10:	f003 fe2c 	bl	800d76c <EmitterOFF>
		//二回目の減速ではマップが完全におかし
		//一回目のターン時の減速終了時は正しい
		//二回目のターン時の減速後までにマップが狂ってる

//		PIDChangeFlag(A_VELO_PID, 0);
		Rotate( 90 , 2*M_PI);//1.5
 8009b14:	eddf 0a12 	vldr	s1, [pc, #72]	; 8009b60 <TurnRight+0x6c>
 8009b18:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8009b64 <TurnRight+0x70>
		Control_Mode = NOT_CTRL_PID;
 8009b1c:	230a      	movs	r3, #10
 8009b1e:	6023      	str	r3, [r4, #0]
		Rotate( 90 , 2*M_PI);//1.5
 8009b20:	f7ff f9fe 	bl	8008f20 <Rotate>
		my_mouse.now.car += 2;
 8009b24:	4a10      	ldr	r2, [pc, #64]	; (8009b68 <TurnRight+0x74>)
 8009b26:	7a93      	ldrb	r3, [r2, #10]
 8009b28:	3302      	adds	r3, #2
 8009b2a:	7293      	strb	r3, [r2, #10]

//		ChangeLED(0);
		//RotateTest(90);

//		float acc = AjustCenter();
		EmitterON();
 8009b2c:	f003 fe10 	bl	800d750 <EmitterON>

//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		HAL_Delay(100);
 8009b30:	2064      	movs	r0, #100	; 0x64
 8009b32:	f004 fc09 	bl	800e348 <HAL_Delay>
//														printProfile(&my_mouse);
//														printAllWeight(&my_map, &(my_mouse.goal_lesser));
//													}
//												}
//												cc ++;
		Accel(45, ExploreVelocity);
 8009b36:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <TurnRight+0x78>)
 8009b38:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8009b58 <TurnRight+0x64>
 8009b3c:	edd3 0a00 	vldr	s1, [r3]
		Control_Mode = A_VELO_PID; //ゴールを破壊してるのはこれ
 8009b40:	2300      	movs	r3, #0
 8009b42:	6023      	str	r3, [r4, #0]
	default :
		break;
	}


}
 8009b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Accel(45, ExploreVelocity);
 8009b48:	f7ff bd4e 	b.w	80095e8 <Accel>
 8009b4c:	4770      	bx	lr
		SlalomRight();
 8009b4e:	f7ff bb33 	b.w	80091b8 <SlalomRight>
 8009b52:	bf00      	nop
 8009b54:	00000000 	.word	0x00000000
 8009b58:	42340000 	.word	0x42340000
 8009b5c:	2000a17c 	.word	0x2000a17c
 8009b60:	40c90fdb 	.word	0x40c90fdb
 8009b64:	42b40000 	.word	0x42b40000
 8009b68:	20009a24 	.word	0x20009a24
 8009b6c:	2000a2ac 	.word	0x2000a2ac

08009b70 <TurnLeft>:
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 8009b70:	2853      	cmp	r0, #83	; 0x53
 8009b72:	d02d      	beq.n	8009bd0 <TurnLeft+0x60>
 8009b74:	2854      	cmp	r0, #84	; 0x54
 8009b76:	d12a      	bne.n	8009bce <TurnLeft+0x5e>
{
 8009b78:	b510      	push	{r4, lr}
	{
	case 'T' :
		//超信地旋回
		Decel(45, 0);
 8009b7a:	eddf 0a16 	vldr	s1, [pc, #88]	; 8009bd4 <TurnLeft+0x64>
 8009b7e:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8009bd8 <TurnLeft+0x68>
		//ChangeLED(5);

		//AjustCenter();
		EmitterOFF();
//		PIDChangeFlag(A_VELO_PID, 0);
		Control_Mode = NOT_CTRL_PID;
 8009b82:	4c16      	ldr	r4, [pc, #88]	; (8009bdc <TurnLeft+0x6c>)
		Decel(45, 0);
 8009b84:	f7ff fdb4 	bl	80096f0 <Decel>
		WaitStopAndReset();
 8009b88:	f7ff f9a8 	bl	8008edc <WaitStopAndReset>
		EmitterOFF();
 8009b8c:	f003 fdee 	bl	800d76c <EmitterOFF>
		Rotate( 90 , -2*M_PI);//-1.5
 8009b90:	eddf 0a13 	vldr	s1, [pc, #76]	; 8009be0 <TurnLeft+0x70>
 8009b94:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8009be4 <TurnLeft+0x74>
		Control_Mode = NOT_CTRL_PID;
 8009b98:	230a      	movs	r3, #10
 8009b9a:	6023      	str	r3, [r4, #0]
		Rotate( 90 , -2*M_PI);//-1.5
 8009b9c:	f7ff f9c0 	bl	8008f20 <Rotate>
		my_mouse.now.car -= 2;
 8009ba0:	4a11      	ldr	r2, [pc, #68]	; (8009be8 <TurnLeft+0x78>)
 8009ba2:	7a93      	ldrb	r3, [r2, #10]
 8009ba4:	3b02      	subs	r3, #2
 8009ba6:	7293      	strb	r3, [r2, #10]
		//RotateTest(-90);
//		PIDReset(L_VELO_PID);
//		PIDReset(R_VELO_PID);
//		PIDReset(A_VELO_PID);
		EmitterON();
 8009ba8:	f003 fdd2 	bl	800d750 <EmitterON>
		HAL_Delay(100);
 8009bac:	2064      	movs	r0, #100	; 0x64
 8009bae:	f004 fbcb 	bl	800e348 <HAL_Delay>
//		float acc = AjustCenter();
		HAL_Delay(100);
 8009bb2:	2064      	movs	r0, #100	; 0x64
 8009bb4:	f004 fbc8 	bl	800e348 <HAL_Delay>
		Control_Mode = A_VELO_PID;
//		PIDChangeFlag( A_VELO_PID , 1);
		Accel(45, ExploreVelocity);
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <TurnLeft+0x7c>)
 8009bba:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8009bd8 <TurnLeft+0x68>
 8009bbe:	edd3 0a00 	vldr	s1, [r3]
		Control_Mode = A_VELO_PID;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	6023      	str	r3, [r4, #0]
		break;
	default :
		break;
	}

}
 8009bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Accel(45, ExploreVelocity);
 8009bca:	f7ff bd0d 	b.w	80095e8 <Accel>
 8009bce:	4770      	bx	lr
		SlalomLeft();
 8009bd0:	f7ff bc0a 	b.w	80093e8 <SlalomLeft>
 8009bd4:	00000000 	.word	0x00000000
 8009bd8:	42340000 	.word	0x42340000
 8009bdc:	2000a17c 	.word	0x2000a17c
 8009be0:	c0c90fdb 	.word	0xc0c90fdb
 8009be4:	42b40000 	.word	0x42b40000
 8009be8:	20009a24 	.word	0x20009a24
 8009bec:	2000a2ac 	.word	0x2000a2ac

08009bf0 <GoBack>:
void GoBack()
{
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	ed2d 8b04 	vpush	{d8-d9}
	//減速して
	Decel(45, 0);
 8009bf6:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009c5c <GoBack+0x6c>

#else
	Pos.Dir = right;
	Control_Mode = NOT_CTRL_PID;
//	PIDChangeFlag(A_VELO_PID, 0);
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009bfa:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8009c60 <GoBack+0x70>
 8009bfe:	eddf 8a19 	vldr	s17, [pc, #100]	; 8009c64 <GoBack+0x74>
	Pos.Dir = right;
 8009c02:	4c19      	ldr	r4, [pc, #100]	; (8009c68 <GoBack+0x78>)
	Decel(45, 0);
 8009c04:	eddf 0a19 	vldr	s1, [pc, #100]	; 8009c6c <GoBack+0x7c>
	Control_Mode = NOT_CTRL_PID;
 8009c08:	4d19      	ldr	r5, [pc, #100]	; (8009c70 <GoBack+0x80>)
	Decel(45, 0);
 8009c0a:	eeb0 0a48 	vmov.f32	s0, s16
 8009c0e:	f7ff fd6f 	bl	80096f0 <Decel>
	Pos.Dir = right;
 8009c12:	2602      	movs	r6, #2
	WaitStopAndReset();
 8009c14:	f7ff f962 	bl	8008edc <WaitStopAndReset>
	Control_Mode = NOT_CTRL_PID;
 8009c18:	230a      	movs	r3, #10
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009c1a:	eef0 0a49 	vmov.f32	s1, s18
 8009c1e:	eeb0 0a68 	vmov.f32	s0, s17
	Control_Mode = NOT_CTRL_PID;
 8009c22:	602b      	str	r3, [r5, #0]
	Pos.Dir = right;
 8009c24:	7126      	strb	r6, [r4, #4]
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 8009c26:	f7ff f97b 	bl	8008f20 <Rotate>
	//acc = AjustCenter();
	Pos.Dir = right;
	Rotate(90, 2*M_PI);
 8009c2a:	eef0 0a49 	vmov.f32	s1, s18
 8009c2e:	eeb0 0a68 	vmov.f32	s0, s17
	Pos.Dir = right;
 8009c32:	7126      	strb	r6, [r4, #4]
	Rotate(90, 2*M_PI);
 8009c34:	f7ff f974 	bl	8008f20 <Rotate>
	Control_Mode = A_VELO_PID;
//	PIDChangeFlag(A_VELO_PID, 1);
	Pos.Dir = back;
 8009c38:	2304      	movs	r3, #4
	Control_Mode = A_VELO_PID;
 8009c3a:	2200      	movs	r2, #0
#endif

	//acc = AjustCenter();
//	/Angle = TargetAngle;

	HAL_Delay(200);
 8009c3c:	20c8      	movs	r0, #200	; 0xc8
	Pos.Dir = back;
 8009c3e:	7123      	strb	r3, [r4, #4]
	Control_Mode = A_VELO_PID;
 8009c40:	602a      	str	r2, [r5, #0]
	HAL_Delay(200);
 8009c42:	f004 fb81 	bl	800e348 <HAL_Delay>

	Accel(45, ExploreVelocity);
 8009c46:	eeb0 0a48 	vmov.f32	s0, s16
	//ここまでで目標走行距離を完了する

}
 8009c4a:	ecbd 8b04 	vpop	{d8-d9}
	Accel(45, ExploreVelocity);
 8009c4e:	4b09      	ldr	r3, [pc, #36]	; (8009c74 <GoBack+0x84>)
}
 8009c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Accel(45, ExploreVelocity);
 8009c54:	edd3 0a00 	vldr	s1, [r3]
 8009c58:	f7ff bcc6 	b.w	80095e8 <Accel>
 8009c5c:	42340000 	.word	0x42340000
 8009c60:	40c90fdb 	.word	0x40c90fdb
 8009c64:	42b40000 	.word	0x42b40000
 8009c68:	20000004 	.word	0x20000004
 8009c6c:	00000000 	.word	0x00000000
 8009c70:	2000a17c 	.word	0x2000a17c
 8009c74:	2000a2ac 	.word	0x2000a2ac

08009c78 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 8009c78:	b570      	push	{r4, r5, r6, lr}

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009c7a:	4c53      	ldr	r4, [pc, #332]	; (8009dc8 <Explore_IT+0x150>)
 8009c7c:	4853      	ldr	r0, [pc, #332]	; (8009dcc <Explore_IT+0x154>)
 8009c7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009c80:	4a53      	ldr	r2, [pc, #332]	; (8009dd0 <Explore_IT+0x158>)
	TIM4->CNT = INITIAL_PULSE;

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009c82:	eddf 7a54 	vldr	s15, [pc, #336]	; 8009dd4 <Explore_IT+0x15c>
 8009c86:	4d54      	ldr	r5, [pc, #336]	; (8009dd8 <Explore_IT+0x160>)

	//switch文でどれかひとつに絞らせたい
	static int keep_mode = A_VELO_PID;

	//0から違うモードに変わるとき、前のモードの値をリセットしておく
	if( Control_Mode != keep_mode){
 8009c88:	4e54      	ldr	r6, [pc, #336]	; (8009ddc <Explore_IT+0x164>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009c8a:	f247 532f 	movw	r3, #29999	; 0x752f
 8009c8e:	1a59      	subs	r1, r3, r1
 8009c90:	6001      	str	r1, [r0, #0]
	TIM3->CNT = INITIAL_PULSE;
 8009c92:	6263      	str	r3, [r4, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009c94:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 8009c96:	6253      	str	r3, [r2, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009c98:	1b1b      	subs	r3, r3, r4
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009c9a:	ee07 3a10 	vmov	s14, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009c9e:	ee06 1a90 	vmov	s13, r1
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009ca6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009caa:	ee27 7a27 	vmul.f32	s14, s14, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009cae:	ee66 6aa7 	vmul.f32	s13, s13, s15
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009cb2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009cb6:	edc5 6a00 	vstr	s13, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009cba:	ed85 7a01 	vstr	s14, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009cbe:	edd5 7a00 	vldr	s15, [r5]
 8009cc2:	ed95 7a01 	vldr	s14, [r5, #4]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009cc6:	4a46      	ldr	r2, [pc, #280]	; (8009de0 <Explore_IT+0x168>)
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009cc8:	6043      	str	r3, [r0, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009cca:	ee77 7a87 	vadd.f32	s15, s15, s14
	if( Control_Mode != keep_mode){
 8009cce:	4c45      	ldr	r4, [pc, #276]	; (8009de4 <Explore_IT+0x16c>)
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009cd0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009cd4:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009cd8:	6810      	ldr	r0, [r2, #0]
 8009cda:	4401      	add	r1, r0
 8009cdc:	6011      	str	r1, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 8009cde:	6851      	ldr	r1, [r2, #4]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 8009ce0:	4841      	ldr	r0, [pc, #260]	; (8009de8 <Explore_IT+0x170>)
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 8009ce2:	440b      	add	r3, r1
 8009ce4:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8009ce6:	6813      	ldr	r3, [r2, #0]
 8009ce8:	6851      	ldr	r1, [r2, #4]
 8009cea:	440b      	add	r3, r1
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 8009cec:	493f      	ldr	r1, [pc, #252]	; (8009dec <Explore_IT+0x174>)
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8009cee:	6093      	str	r3, [r2, #8]
	Update_IMU(&AngularV, &Angle); //メディアンフィルタとオフセットだけで何とかした.
 8009cf0:	f003 fc02 	bl	800d4f8 <Update_IMU>
	if( Control_Mode != keep_mode){
 8009cf4:	6820      	ldr	r0, [r4, #0]
 8009cf6:	6833      	ldr	r3, [r6, #0]
 8009cf8:	4283      	cmp	r3, r0
 8009cfa:	d14a      	bne.n	8009d92 <Explore_IT+0x11a>
 8009cfc:	4a3c      	ldr	r2, [pc, #240]	; (8009df0 <Explore_IT+0x178>)
		PIDReset(keep_mode);
//		PIDChangeFlag(, 0);
		Pid[keep_mode].flag = 0;
	}
	Pid[Control_Mode].flag = 1;
	keep_mode = Control_Mode;
 8009cfe:	6020      	str	r0, [r4, #0]
	Pid[Control_Mode].flag = 1;
 8009d00:	232c      	movs	r3, #44	; 0x2c
 8009d02:	fb03 2300 	mla	r3, r3, r0, r2
 8009d06:	2201      	movs	r2, #1
 8009d08:	629a      	str	r2, [r3, #40]	; 0x28
					TargetAngularV = (float)ang_out;

					//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
				}
#endif
	switch(Control_Mode)
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d04c      	beq.n	8009da8 <Explore_IT+0x130>
 8009d0e:	4b39      	ldr	r3, [pc, #228]	; (8009df4 <Explore_IT+0x17c>)
//
//				//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
//			}
//		}

	TargetVelocity[BODY] += Acceleration;
 8009d10:	4c39      	ldr	r4, [pc, #228]	; (8009df8 <Explore_IT+0x180>)
 8009d12:	4a3a      	ldr	r2, [pc, #232]	; (8009dfc <Explore_IT+0x184>)
	//AngularAcceleration += AngularLeapsity;
	TargetAngularV += AngularAcceleration;
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009d14:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8009e00 <Explore_IT+0x188>
	TargetVelocity[BODY] += Acceleration;
 8009d18:	ed92 7a00 	vldr	s14, [r2]
 8009d1c:	edd4 7a02 	vldr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 8009d20:	4a38      	ldr	r2, [pc, #224]	; (8009e04 <Explore_IT+0x18c>)
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009d22:	4e39      	ldr	r6, [pc, #228]	; (8009e08 <Explore_IT+0x190>)
	TargetVelocity[BODY] += Acceleration;
 8009d24:	ee77 7a87 	vadd.f32	s15, s15, s14
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009d28:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	TargetVelocity[BODY] += Acceleration;
 8009d2c:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 8009d30:	ed92 7a00 	vldr	s14, [r2]
 8009d34:	edd3 7a00 	vldr	s15, [r3]
 8009d38:	ee77 7a87 	vadd.f32	s15, s15, s14
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009d3c:	2004      	movs	r0, #4
	TargetAngularV += AngularAcceleration;
 8009d3e:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009d42:	edd4 7a02 	vldr	s15, [r4, #8]
 8009d46:	ed93 7a00 	vldr	s14, [r3]
 8009d4a:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 8009d4e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009d52:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 8009d56:	ed93 7a00 	vldr	s14, [r3]
 8009d5a:	edd4 7a01 	vldr	s15, [r4, #4]
 8009d5e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009d62:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009d66:	ed94 0a00 	vldr	s0, [r4]
 8009d6a:	edd5 0a00 	vldr	s1, [r5]
 8009d6e:	f004 f94b 	bl	800e008 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009d72:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009d76:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009d78:	edd5 0a01 	vldr	s1, [r5, #4]
 8009d7c:	2005      	movs	r0, #5
 8009d7e:	f004 f943 	bl	800e008 <PIDControl>
 8009d82:	4b22      	ldr	r3, [pc, #136]	; (8009e0c <Explore_IT+0x194>)
 8009d84:	4601      	mov	r1, r0

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8009d86:	6830      	ldr	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009d88:	6019      	str	r1, [r3, #0]
//			ChangeLED(7);
//	else
//	{
//		ChangeLED(4);
//	}
}
 8009d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8009d8e:	f003 bd87 	b.w	800d8a0 <Motor_Switch>
		PIDReset(keep_mode);
 8009d92:	f004 f92b 	bl	800dfec <PIDReset>
		Pid[keep_mode].flag = 0;
 8009d96:	4a16      	ldr	r2, [pc, #88]	; (8009df0 <Explore_IT+0x178>)
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	6830      	ldr	r0, [r6, #0]
 8009d9c:	212c      	movs	r1, #44	; 0x2c
 8009d9e:	fb01 2303 	mla	r3, r1, r3, r2
 8009da2:	2100      	movs	r1, #0
 8009da4:	6299      	str	r1, [r3, #40]	; 0x28
 8009da6:	e7aa      	b.n	8009cfe <Explore_IT+0x86>
		ang_out = PIDControl( Control_Mode,  TargetAngle, Angle);
 8009da8:	4b10      	ldr	r3, [pc, #64]	; (8009dec <Explore_IT+0x174>)
 8009daa:	4a19      	ldr	r2, [pc, #100]	; (8009e10 <Explore_IT+0x198>)
 8009dac:	ed92 0a00 	vldr	s0, [r2]
 8009db0:	edd3 0a00 	vldr	s1, [r3]
 8009db4:	f004 f928 	bl	800e008 <PIDControl>
		TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 8009db8:	ee07 0a90 	vmov	s15, r0
 8009dbc:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <Explore_IT+0x17c>)
 8009dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dc2:	edc3 7a00 	vstr	s15, [r3]
		break;
 8009dc6:	e7a3      	b.n	8009d10 <Explore_IT+0x98>
 8009dc8:	40000400 	.word	0x40000400
 8009dcc:	2000a374 	.word	0x2000a374
 8009dd0:	40000800 	.word	0x40000800
 8009dd4:	3f8177cd 	.word	0x3f8177cd
 8009dd8:	2000a1c4 	.word	0x2000a1c4
 8009ddc:	2000a17c 	.word	0x2000a17c
 8009de0:	2000a1b8 	.word	0x2000a1b8
 8009de4:	20007f28 	.word	0x20007f28
 8009de8:	20007f40 	.word	0x20007f40
 8009dec:	20007f34 	.word	0x20007f34
 8009df0:	20009834 	.word	0x20009834
 8009df4:	2000a198 	.word	0x2000a198
 8009df8:	2000a188 	.word	0x2000a188
 8009dfc:	20007f30 	.word	0x20007f30
 8009e00:	4209999a 	.word	0x4209999a
 8009e04:	20007f38 	.word	0x20007f38
 8009e08:	2000a2b0 	.word	0x2000a2b0
 8009e0c:	2000a2cc 	.word	0x2000a2cc
 8009e10:	20007f44 	.word	0x20007f44
 8009e14:	00000000 	.word	0x00000000

08009e18 <WritingFree_IT>:
void WritingFree_IT()
{
 8009e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009e1c:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800a014 <WritingFree_IT+0x1fc>
 8009e20:	4969      	ldr	r1, [pc, #420]	; (8009fc8 <WritingFree_IT+0x1b0>)
 8009e22:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
	TIM3->CNT = INITIAL_PULSE;
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009e26:	4869      	ldr	r0, [pc, #420]	; (8009fcc <WritingFree_IT+0x1b4>)
	TIM4->CNT = INITIAL_PULSE;

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e28:	eddf 6a69 	vldr	s13, [pc, #420]	; 8009fd0 <WritingFree_IT+0x1b8>
 8009e2c:	4d69      	ldr	r5, [pc, #420]	; (8009fd4 <WritingFree_IT+0x1bc>)
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009e2e:	4a6a      	ldr	r2, [pc, #424]	; (8009fd8 <WritingFree_IT+0x1c0>)
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009e30:	4f6a      	ldr	r7, [pc, #424]	; (8009fdc <WritingFree_IT+0x1c4>)
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
	TargetVelocity[BODY] += Acceleration;
 8009e32:	4c6b      	ldr	r4, [pc, #428]	; (8009fe0 <WritingFree_IT+0x1c8>)
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009e34:	f247 532f 	movw	r3, #29999	; 0x752f
 8009e38:	1b9e      	subs	r6, r3, r6
{
 8009e3a:	ed2d 8b02 	vpush	{d8}
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 8009e3e:	600e      	str	r6, [r1, #0]
	TIM3->CNT = INITIAL_PULSE;
 8009e40:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009e44:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
	TIM4->CNT = INITIAL_PULSE;
 8009e48:	6243      	str	r3, [r0, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009e4a:	eba3 030c 	sub.w	r3, r3, ip
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009e4e:	ee07 3a90 	vmov	s15, r3
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e52:	ee07 6a10 	vmov	s14, r6
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009e5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e62:	ee27 7a26 	vmul.f32	s14, s14, s13
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e66:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 8009e6a:	ed85 7a00 	vstr	s14, [r5]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 8009e6e:	edc5 7a01 	vstr	s15, [r5, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e72:	edd5 7a00 	vldr	s15, [r5]
 8009e76:	ed95 7a01 	vldr	s14, [r5, #4]
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 8009e7a:	604b      	str	r3, [r1, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
	ZGyro = ReadIMU(0x37, 0x38);
 8009e80:	2138      	movs	r1, #56	; 0x38
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e82:	ee67 7aa8 	vmul.f32	s15, s15, s17
	ZGyro = ReadIMU(0x37, 0x38);
 8009e86:	2037      	movs	r0, #55	; 0x37
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 8009e88:	edc5 7a02 	vstr	s15, [r5, #8]
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 8009e8c:	f8d2 c000 	ldr.w	ip, [r2]
 8009e90:	4466      	add	r6, ip
 8009e92:	6016      	str	r6, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 8009e94:	6856      	ldr	r6, [r2, #4]
 8009e96:	4433      	add	r3, r6
 8009e98:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 8009e9a:	6813      	ldr	r3, [r2, #0]
 8009e9c:	6856      	ldr	r6, [r2, #4]
 8009e9e:	4433      	add	r3, r6
 8009ea0:	6093      	str	r3, [r2, #8]
	ZGyro = ReadIMU(0x37, 0x38);
 8009ea2:	f003 fabb 	bl	800d41c <ReadIMU>
 8009ea6:	4b4f      	ldr	r3, [pc, #316]	; (8009fe4 <WritingFree_IT+0x1cc>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009ea8:	4a4f      	ldr	r2, [pc, #316]	; (8009fe8 <WritingFree_IT+0x1d0>)
	ZGyro = ReadIMU(0x37, 0x38);
 8009eaa:	ed83 0a00 	vstr	s0, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009eae:	ed93 8a00 	vldr	s16, [r3]
 8009eb2:	ed92 7a00 	vldr	s14, [r2]
 8009eb6:	4b4d      	ldr	r3, [pc, #308]	; (8009fec <WritingFree_IT+0x1d4>)
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009eb8:	6838      	ldr	r0, [r7, #0]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009eba:	edd3 7a00 	vldr	s15, [r3]
	AngularAcceleration += AngularLeapsity;
 8009ebe:	4e4c      	ldr	r6, [pc, #304]	; (8009ff0 <WritingFree_IT+0x1d8>)
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 8009ec0:	ee38 8a47 	vsub.f32	s16, s16, s14
 8009ec4:	ee28 8a27 	vmul.f32	s16, s16, s15
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009ec8:	f7fe fa76 	bl	80083b8 <__aeabi_f2d>
 8009ecc:	a33a      	add	r3, pc, #232	; (adr r3, 8009fb8 <WritingFree_IT+0x1a0>)
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	f7fe fac9 	bl	8008468 <__aeabi_dmul>
 8009ed6:	4680      	mov	r8, r0
 8009ed8:	ee18 0a10 	vmov	r0, s16
 8009edc:	4689      	mov	r9, r1
 8009ede:	f7fe fa6b 	bl	80083b8 <__aeabi_f2d>
 8009ee2:	a337      	add	r3, pc, #220	; (adr r3, 8009fc0 <WritingFree_IT+0x1a8>)
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f7fe fabe 	bl	8008468 <__aeabi_dmul>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	f7fe f902 	bl	80080fc <__adddf3>
 8009ef8:	f7fe fdae 	bl	8008a58 <__aeabi_d2f>
 8009efc:	4b3d      	ldr	r3, [pc, #244]	; (8009ff4 <WritingFree_IT+0x1dc>)
	Angle += AngularV * T1;
 8009efe:	493e      	ldr	r1, [pc, #248]	; (8009ff8 <WritingFree_IT+0x1e0>)
 8009f00:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8009ffc <WritingFree_IT+0x1e4>
	AngularAcceleration += AngularLeapsity;
 8009f04:	4a3e      	ldr	r2, [pc, #248]	; (800a000 <WritingFree_IT+0x1e8>)
 8009f06:	ed96 6a00 	vldr	s12, [r6]
	TargetVelocity[BODY] += Acceleration;
 8009f0a:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800a018 <WritingFree_IT+0x200>
	TargetAngularV += AngularAcceleration;

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009f0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a004 <WritingFree_IT+0x1ec>
    zg_last = zg_law;
 8009f12:	ed87 8a00 	vstr	s16, [r7]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 8009f16:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8009f1a:	6018      	str	r0, [r3, #0]
	Angle += AngularV * T1;
 8009f1c:	edd3 5a00 	vldr	s11, [r3]
 8009f20:	ed91 7a00 	vldr	s14, [r1]
	TargetAngularV += AngularAcceleration;
 8009f24:	4b38      	ldr	r3, [pc, #224]	; (800a008 <WritingFree_IT+0x1f0>)
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009f26:	4e39      	ldr	r6, [pc, #228]	; (800a00c <WritingFree_IT+0x1f4>)
	Angle += AngularV * T1;
 8009f28:	eea5 7aa7 	vfma.f32	s14, s11, s15
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009f2c:	2004      	movs	r0, #4
	Angle += AngularV * T1;
 8009f2e:	ed81 7a00 	vstr	s14, [r1]
	AngularAcceleration += AngularLeapsity;
 8009f32:	edd2 7a00 	vldr	s15, [r2]
 8009f36:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009f3a:	edc2 7a00 	vstr	s15, [r2]
	TargetVelocity[BODY] += Acceleration;
 8009f3e:	ed9c 7a00 	vldr	s14, [ip]
 8009f42:	edd4 7a02 	vldr	s15, [r4, #8]
 8009f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f4a:	edc4 7a02 	vstr	s15, [r4, #8]
	TargetAngularV += AngularAcceleration;
 8009f4e:	ed92 7a00 	vldr	s14, [r2]
 8009f52:	edd3 7a00 	vldr	s15, [r3]
 8009f56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f5a:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 8009f5e:	edd4 7a02 	vldr	s15, [r4, #8]
 8009f62:	ed93 7a00 	vldr	s14, [r3]
 8009f66:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 8009f6a:	eee7 7a28 	vfma.f32	s15, s14, s17
 8009f6e:	edc4 7a01 	vstr	s15, [r4, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 8009f72:	ed93 7a00 	vldr	s14, [r3]
 8009f76:	edd4 7a01 	vldr	s15, [r4, #4]
 8009f7a:	eee7 7a26 	vfma.f32	s15, s14, s13
 8009f7e:	edc4 7a00 	vstr	s15, [r4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009f82:	ed94 0a00 	vldr	s0, [r4]
 8009f86:	edd5 0a00 	vldr	s1, [r5]
 8009f8a:	f004 f83d 	bl	800e008 <PIDControl>
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009f8e:	ed94 0a01 	vldr	s0, [r4, #4]
	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 8009f92:	6030      	str	r0, [r6, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009f94:	edd5 0a01 	vldr	s1, [r5, #4]
 8009f98:	2005      	movs	r0, #5
 8009f9a:	f004 f835 	bl	800e008 <PIDControl>

	Motor_Switch( VelocityLeftOut, VelocityRightOut );


}
 8009f9e:	ecbd 8b02 	vpop	{d8}
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 8009fa2:	4b1b      	ldr	r3, [pc, #108]	; (800a010 <WritingFree_IT+0x1f8>)
 8009fa4:	4601      	mov	r1, r0
 8009fa6:	6019      	str	r1, [r3, #0]
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8009fa8:	6830      	ldr	r0, [r6, #0]
}
 8009faa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 8009fae:	f003 bc77 	b.w	800d8a0 <Motor_Switch>
 8009fb2:	bf00      	nop
 8009fb4:	f3af 8000 	nop.w
 8009fb8:	7ae147ae 	.word	0x7ae147ae
 8009fbc:	3fefae14 	.word	0x3fefae14
 8009fc0:	47ae147b 	.word	0x47ae147b
 8009fc4:	3f847ae1 	.word	0x3f847ae1
 8009fc8:	2000a374 	.word	0x2000a374
 8009fcc:	40000800 	.word	0x40000800
 8009fd0:	3f8177cd 	.word	0x3f8177cd
 8009fd4:	2000a1c4 	.word	0x2000a1c4
 8009fd8:	2000a1b8 	.word	0x2000a1b8
 8009fdc:	20007f2c 	.word	0x20007f2c
 8009fe0:	2000a188 	.word	0x2000a188
 8009fe4:	200097e4 	.word	0x200097e4
 8009fe8:	200097f0 	.word	0x200097f0
 8009fec:	080165ec 	.word	0x080165ec
 8009ff0:	20007f3c 	.word	0x20007f3c
 8009ff4:	20007f40 	.word	0x20007f40
 8009ff8:	20007f34 	.word	0x20007f34
 8009ffc:	3a83126f 	.word	0x3a83126f
 800a000:	20007f38 	.word	0x20007f38
 800a004:	4209999a 	.word	0x4209999a
 800a008:	2000a198 	.word	0x2000a198
 800a00c:	2000a2b0 	.word	0x2000a2b0
 800a010:	2000a2cc 	.word	0x2000a2cc
 800a014:	40000400 	.word	0x40000400
 800a018:	20007f30 	.word	0x20007f30

0800a01c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if( htim == &htim1)
 800a01c:	4b28      	ldr	r3, [pc, #160]	; (800a0c0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800a01e:	4298      	cmp	r0, r3
{
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	4604      	mov	r4, r0
	if( htim == &htim1)
 800a024:	d003      	beq.n	800a02e <HAL_TIM_PeriodElapsedCallback+0x12>
		default :
			break;
		}
	}

	if( htim == &htim8)
 800a026:	4b27      	ldr	r3, [pc, #156]	; (800a0c4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800a028:	429c      	cmp	r4, r3
 800a02a:	d012      	beq.n	800a052 <HAL_TIM_PeriodElapsedCallback+0x36>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
	}
}
 800a02c:	bd70      	pop	{r4, r5, r6, pc}
		switch(IT_mode){
 800a02e:	4b26      	ldr	r3, [pc, #152]	; (800a0c8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b06      	cmp	r3, #6
 800a034:	d030      	beq.n	800a098 <HAL_TIM_PeriodElapsedCallback+0x7c>
 800a036:	2b07      	cmp	r3, #7
 800a038:	d02b      	beq.n	800a092 <HAL_TIM_PeriodElapsedCallback+0x76>
 800a03a:	2b05      	cmp	r3, #5
 800a03c:	d1f3      	bne.n	800a026 <HAL_TIM_PeriodElapsedCallback+0xa>
			if(timer1 < 5000)
 800a03e:	4d23      	ldr	r5, [pc, #140]	; (800a0cc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800a040:	682a      	ldr	r2, [r5, #0]
 800a042:	f241 3387 	movw	r3, #4999	; 0x1387
 800a046:	429a      	cmp	r2, r3
 800a048:	dd29      	ble.n	800a09e <HAL_TIM_PeriodElapsedCallback+0x82>
			else t = 0;
 800a04a:	4b21      	ldr	r3, [pc, #132]	; (800a0d0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	e7e9      	b.n	800a026 <HAL_TIM_PeriodElapsedCallback+0xa>
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a052:	4e20      	ldr	r6, [pc, #128]	; (800a0d4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800a054:	4c20      	ldr	r4, [pc, #128]	; (800a0d8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800a056:	6831      	ldr	r1, [r6, #0]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a058:	4d20      	ldr	r5, [pc, #128]	; (800a0dc <HAL_TIM_PeriodElapsedCallback+0xc0>)
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a05a:	2200      	movs	r2, #0
 800a05c:	200a      	movs	r0, #10
 800a05e:	f003 fc7b 	bl	800d958 <GetWallDataAverage>
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a062:	6871      	ldr	r1, [r6, #4]
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800a064:	ed84 0a00 	vstr	s0, [r4]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a068:	2201      	movs	r2, #1
 800a06a:	200a      	movs	r0, #10
 800a06c:	f003 fc74 	bl	800d958 <GetWallDataAverage>
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a070:	6829      	ldr	r1, [r5, #0]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800a072:	ed84 0a01 	vstr	s0, [r4, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a076:	2202      	movs	r2, #2
 800a078:	200a      	movs	r0, #10
 800a07a:	f003 fc6d 	bl	800d958 <GetWallDataAverage>
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a07e:	6869      	ldr	r1, [r5, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800a080:	ed84 0a02 	vstr	s0, [r4, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800a084:	2203      	movs	r2, #3
 800a086:	200a      	movs	r0, #10
 800a088:	f003 fc66 	bl	800d958 <GetWallDataAverage>
 800a08c:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800a090:	bd70      	pop	{r4, r5, r6, pc}
			WritingFree_IT();
 800a092:	f7ff fec1 	bl	8009e18 <WritingFree_IT>
			break;
 800a096:	e7c6      	b.n	800a026 <HAL_TIM_PeriodElapsedCallback+0xa>
			Explore_IT();
 800a098:	f7ff fdee 	bl	8009c78 <Explore_IT>
			break;
 800a09c:	e7c3      	b.n	800a026 <HAL_TIM_PeriodElapsedCallback+0xa>
				Update_IMU(&AngularV, &Angle);
 800a09e:	4e10      	ldr	r6, [pc, #64]	; (800a0e0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800a0a0:	4810      	ldr	r0, [pc, #64]	; (800a0e4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	f003 fa28 	bl	800d4f8 <Update_IMU>
				timer1 += t;
 800a0a8:	4b09      	ldr	r3, [pc, #36]	; (800a0d0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
				debugVL[timer1] = Angle;
 800a0aa:	6829      	ldr	r1, [r5, #0]
 800a0ac:	4a0e      	ldr	r2, [pc, #56]	; (800a0e8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
				timer1 += t;
 800a0ae:	681b      	ldr	r3, [r3, #0]
				debugVL[timer1] = Angle;
 800a0b0:	6830      	ldr	r0, [r6, #0]
 800a0b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
				timer1 += t;
 800a0b6:	440b      	add	r3, r1
				debugVL[timer1] = Angle;
 800a0b8:	6010      	str	r0, [r2, #0]
				timer1 += t;
 800a0ba:	602b      	str	r3, [r5, #0]
 800a0bc:	e7b3      	b.n	800a026 <HAL_TIM_PeriodElapsedCallback+0xa>
 800a0be:	bf00      	nop
 800a0c0:	2000a674 	.word	0x2000a674
 800a0c4:	2000a42c 	.word	0x2000a42c
 800a0c8:	2000a174 	.word	0x2000a174
 800a0cc:	2000a180 	.word	0x2000a180
 800a0d0:	2000a170 	.word	0x2000a170
 800a0d4:	200097d0 	.word	0x200097d0
 800a0d8:	2000a1f8 	.word	0x2000a1f8
 800a0dc:	200097dc 	.word	0x200097dc
 800a0e0:	20007f34 	.word	0x20007f34
 800a0e4:	20007f40 	.word	0x20007f40
 800a0e8:	20000228 	.word	0x20000228

0800a0ec <flashStoreNodes>:
			}
	}
}
void flashStoreNodes()
{
	uint32_t address=start_adress_sector1;
 800a0ec:	4b1b      	ldr	r3, [pc, #108]	; (800a15c <flashStoreNodes+0x70>)
{
 800a0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t address=start_adress_sector1;
 800a0f2:	f8d3 9000 	ldr.w	r9, [r3]
 800a0f6:	f8df a068 	ldr.w	sl, [pc, #104]	; 800a160 <flashStoreNodes+0x74>
 800a0fa:	ebc9 78c9 	rsb	r8, r9, r9, lsl #31
 800a0fe:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a102:	464c      	mov	r4, r9
 800a104:	2700      	movs	r7, #0
 800a106:	eb07 0508 	add.w	r5, r7, r8

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				FLASH_Write_Word(address+0, my_map.RawNode[i][j].existence);
 800a10a:	4455      	add	r5, sl
 800a10c:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800a110:	f815 1014 	ldrb.w	r1, [r5, r4, lsl #1]
 800a114:	4620      	mov	r0, r4
				address += 4;
 800a116:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, my_map.RawNode[i][j].existence);
 800a118:	f003 f896 	bl	800d248 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a11c:	42b4      	cmp	r4, r6
 800a11e:	d1f7      	bne.n	800a110 <flashStoreNodes+0x24>
 800a120:	3750      	adds	r7, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a122:	f5b7 7f34 	cmp.w	r7, #720	; 0x2d0
 800a126:	f1a8 0850 	sub.w	r8, r8, #80	; 0x50
 800a12a:	d1ec      	bne.n	800a106 <flashStoreNodes+0x1a>
 800a12c:	4f0c      	ldr	r7, [pc, #48]	; (800a160 <flashStoreNodes+0x74>)
 800a12e:	f509 74b4 	add.w	r4, r9, #360	; 0x168
 800a132:	f509 7934 	add.w	r9, r9, #720	; 0x2d0
 800a136:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800a13a:	463d      	mov	r5, r7
	//列
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				FLASH_Write_Word(address+0, my_map.ColumnNode[i][j].existence);
 800a13c:	f895 12d0 	ldrb.w	r1, [r5, #720]	; 0x2d0
 800a140:	4620      	mov	r0, r4
				address += 4;
 800a142:	3404      	adds	r4, #4
				FLASH_Write_Word(address+0, my_map.ColumnNode[i][j].existence);
 800a144:	f003 f880 	bl	800d248 <FLASH_Write_Word>
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a148:	42a6      	cmp	r6, r4
 800a14a:	f105 0508 	add.w	r5, r5, #8
 800a14e:	d1f5      	bne.n	800a13c <flashStoreNodes+0x50>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a150:	454e      	cmp	r6, r9
 800a152:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800a156:	d1ee      	bne.n	800a136 <flashStoreNodes+0x4a>
			}
	}
}
 800a158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15c:	080165e4 	.word	0x080165e4
 800a160:	20009bd0 	.word	0x20009bd0

0800a164 <wall_init>:
void wall_init(){
 800a164:	4920      	ldr	r1, [pc, #128]	; (800a1e8 <wall_init+0x84>)
 800a166:	b470      	push	{r4, r5, r6}

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a168:	2500      	movs	r5, #0
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
				Wall[i][j].north = UNKNOWN;
 800a16a:	24aa      	movs	r4, #170	; 0xaa
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a16c:	2300      	movs	r3, #0
				Wall[i][j].north = UNKNOWN;
 800a16e:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800a172:	18c2      	adds	r2, r0, r3
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a174:	3301      	adds	r3, #1
 800a176:	2b09      	cmp	r3, #9
				Wall[i][j].north = UNKNOWN;
 800a178:	f801 4012 	strb.w	r4, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800a17c:	d1f9      	bne.n	800a172 <wall_init+0xe>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800a17e:	3501      	adds	r5, #1
 800a180:	2d09      	cmp	r5, #9
 800a182:	d1f3      	bne.n	800a16c <wall_init+0x8>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a184:	2300      	movs	r3, #0
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800a186:	2201      	movs	r2, #1
 800a188:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 800a18c:	eb01 0540 	add.w	r5, r1, r0, lsl #1
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800a190:	f103 0448 	add.w	r4, r3, #72	; 0x48
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800a194:	7c2e      	ldrb	r6, [r5, #16]
 800a196:	f362 0601 	bfi	r6, r2, #0, #2
 800a19a:	742e      	strb	r6, [r5, #16]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800a19c:	f811 5014 	ldrb.w	r5, [r1, r4, lsl #1]
 800a1a0:	f362 0583 	bfi	r5, r2, #2, #2
 800a1a4:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
		Wall[n][0].south = WALL;
 800a1a8:	f811 4010 	ldrb.w	r4, [r1, r0, lsl #1]
 800a1ac:	f362 1405 	bfi	r4, r2, #4, #2
 800a1b0:	f801 4010 	strb.w	r4, [r1, r0, lsl #1]
		Wall[0][n].west = WALL;
 800a1b4:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 800a1b8:	f362 1087 	bfi	r0, r2, #6, #2
 800a1bc:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	2b09      	cmp	r3, #9
 800a1c4:	d1e0      	bne.n	800a188 <wall_init+0x24>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800a1c6:	780b      	ldrb	r3, [r1, #0]
	Wall[0][0].north = NOWALL;
	Wall[1][0].west = WALL;
 800a1c8:	7c8c      	ldrb	r4, [r1, #18]
	Wall[0][1].south = NOWALL;
 800a1ca:	7888      	ldrb	r0, [r1, #2]
	Wall[0][0].east = WALL;
 800a1cc:	f362 0383 	bfi	r3, r2, #2, #2
	Wall[1][0].west = WALL;
 800a1d0:	f362 1487 	bfi	r4, r2, #6, #2
	Wall[0][0].north = NOWALL;
 800a1d4:	f36f 0301 	bfc	r3, #0, #2
	Wall[0][1].south = NOWALL;
 800a1d8:	f36f 1005 	bfc	r0, #4, #2
	Wall[1][0].west = WALL;
 800a1dc:	748c      	strb	r4, [r1, #18]
	Wall[0][0].north = NOWALL;
 800a1de:	700b      	strb	r3, [r1, #0]
	Wall[0][1].south = NOWALL;
 800a1e0:	7088      	strb	r0, [r1, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800a1e2:	bc70      	pop	{r4, r5, r6}
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	2000a380 	.word	0x2000a380

0800a1ec <flashCopyNodesToRam>:
	}

}
//評価値マップ生成。
void flashCopyNodesToRam()
{
 800a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t address=start_adress_sector1;
 800a1f0:	4b21      	ldr	r3, [pc, #132]	; (800a278 <flashCopyNodesToRam+0x8c>)
 800a1f2:	f8df b088 	ldr.w	fp, [pc, #136]	; 800a27c <flashCopyNodesToRam+0x90>
 800a1f6:	f8d3 a000 	ldr.w	sl, [r3]
 800a1fa:	f04f 0800 	mov.w	r8, #0
 800a1fe:	ebca 79ca 	rsb	r9, sl, sl, lsl #31
{
 800a202:	b083      	sub	sp, #12
 800a204:	ea4f 0949 	mov.w	r9, r9, lsl #1
	uint32_t address=start_adress_sector1;
 800a208:	4654      	mov	r4, sl

	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
			{
				uint32_t wall_data=0;
 800a20a:	4647      	mov	r7, r8
 800a20c:	eb08 0509 	add.w	r5, r8, r9
				FLASH_Read_Word(address, &wall_data);
				my_map.RawNode[i][j].existence = wall_data;
 800a210:	445d      	add	r5, fp
 800a212:	f104 0628 	add.w	r6, r4, #40	; 0x28
				FLASH_Read_Word(address, &wall_data);
 800a216:	4620      	mov	r0, r4
 800a218:	a901      	add	r1, sp, #4
				uint32_t wall_data=0;
 800a21a:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800a21c:	f003 f83c 	bl	800d298 <FLASH_Read_Word>
				my_map.RawNode[i][j].existence = wall_data;
 800a220:	9b01      	ldr	r3, [sp, #4]
 800a222:	f805 3014 	strb.w	r3, [r5, r4, lsl #1]
				address += 4;
 800a226:	3404      	adds	r4, #4
			for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a228:	42b4      	cmp	r4, r6
 800a22a:	d1f4      	bne.n	800a216 <flashCopyNodesToRam+0x2a>
 800a22c:	f108 0850 	add.w	r8, r8, #80	; 0x50
	for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a230:	f5b8 7f34 	cmp.w	r8, #720	; 0x2d0
 800a234:	f1a9 0950 	sub.w	r9, r9, #80	; 0x50
 800a238:	d1e8      	bne.n	800a20c <flashCopyNodesToRam+0x20>
 800a23a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800a27c <flashCopyNodesToRam+0x90>
 800a23e:	f50a 74b4 	add.w	r4, sl, #360	; 0x168
	}
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
	{
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
			{
				uint32_t wall_data=0;
 800a242:	2700      	movs	r7, #0
 800a244:	f50a 7a34 	add.w	sl, sl, #720	; 0x2d0
 800a248:	f104 0624 	add.w	r6, r4, #36	; 0x24
	uint32_t address=start_adress_sector1;
 800a24c:	4645      	mov	r5, r8
				FLASH_Read_Word(address, &wall_data);
 800a24e:	4620      	mov	r0, r4
 800a250:	a901      	add	r1, sp, #4
				my_map.ColumnNode[i][j].existence = wall_data;
				address += 4;
 800a252:	3404      	adds	r4, #4
				uint32_t wall_data=0;
 800a254:	9701      	str	r7, [sp, #4]
				FLASH_Read_Word(address, &wall_data);
 800a256:	f003 f81f 	bl	800d298 <FLASH_Read_Word>
				my_map.ColumnNode[i][j].existence = wall_data;
 800a25a:	9b01      	ldr	r3, [sp, #4]
 800a25c:	f885 32d0 	strb.w	r3, [r5, #720]	; 0x2d0
			for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a260:	42a6      	cmp	r6, r4
 800a262:	f105 0508 	add.w	r5, r5, #8
 800a266:	d1f2      	bne.n	800a24e <flashCopyNodesToRam+0x62>
	for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a268:	4556      	cmp	r6, sl
 800a26a:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800a26e:	d1eb      	bne.n	800a248 <flashCopyNodesToRam+0x5c>
			}
	}
}
 800a270:	b003      	add	sp, #12
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	bf00      	nop
 800a278:	080165e4 	.word	0x080165e4
 800a27c:	20009bd0 	.word	0x20009bd0

0800a280 <printAllWeight>:
        printf("[北 東 南 西] = [%u %u %u %u]\r\n", route[k].wall.north, route[k].wall.east, route[k].wall.south, route[k].wall.west);
        printf("\r\n");
    }
}
void printAllWeight(maze_node *maze, position *pos)
{
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	b085      	sub	sp, #20
 800a286:	4606      	mov	r6, r0
 800a288:	9003      	str	r0, [sp, #12]
    //全出力を3桁にそろえればよさそう
    //重みが0かつゴールエリア内の座標なら赤色で出力 31;1m
    //行から表示して、
    //列を表示
    //交互に
    printf("全ノードの重み\r\n");
 800a28a:	4852      	ldr	r0, [pc, #328]	; (800a3d4 <printAllWeight+0x154>)

    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
    {
        //行
        printf("  +  ");
 800a28c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800a3e4 <printAllWeight+0x164>
            {
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
            }
            else
            {
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a290:	4d51      	ldr	r5, [pc, #324]	; (800a3d8 <printAllWeight+0x158>)
            else
            {
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
            }
            if(x < NUMBER_OF_SQUARES_X)
                printf("     ");
 800a292:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800a3e8 <printAllWeight+0x168>
{
 800a296:	460c      	mov	r4, r1
    printf("全ノードの重み\r\n");
 800a298:	f008 fb96 	bl	80129c8 <puts>
 800a29c:	4633      	mov	r3, r6
 800a29e:	3340      	adds	r3, #64	; 0x40
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	2304      	movs	r3, #4
 800a2a4:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800a2a6:	2709      	movs	r7, #9
        printf("  +  ");
 800a2a8:	4648      	mov	r0, r9
 800a2aa:	f008 fb05 	bl	80128b8 <iprintf>
 800a2ae:	9b01      	ldr	r3, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a2b0:	f04f 0b00 	mov.w	fp, #0
 800a2b4:	f103 0608 	add.w	r6, r3, #8
 800a2b8:	e010      	b.n	800a2dc <printAllWeight+0x5c>
            if(judgeRawNodeGoal(maze, x,y) == true || ((pos->x == x) && (pos->y == y)))//辿った経路を赤で表示
 800a2ba:	7823      	ldrb	r3, [r4, #0]
 800a2bc:	455b      	cmp	r3, fp
 800a2be:	d102      	bne.n	800a2c6 <printAllWeight+0x46>
 800a2c0:	7863      	ldrb	r3, [r4, #1]
 800a2c2:	42bb      	cmp	r3, r7
 800a2c4:	d018      	beq.n	800a2f8 <printAllWeight+0x78>
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a2c6:	f008 faf7 	bl	80128b8 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800a2ca:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800a2ce:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800a2d0:	d01a      	beq.n	800a308 <printAllWeight+0x88>
                 printf("  +  ");
 800a2d2:	f008 faf1 	bl	80128b8 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
 800a2d6:	f10b 0b01 	add.w	fp, fp, #1
 800a2da:	3650      	adds	r6, #80	; 0x50
    if(maze->RawNode[x][y].weight == 0)
 800a2dc:	8872      	ldrh	r2, [r6, #2]
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a2de:	f1ab 0304 	sub.w	r3, fp, #4
 800a2e2:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->RawNode[x][y].weight);
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	4628      	mov	r0, r5
    if(maze->RawNode[x][y].weight == 0)
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	d1e6      	bne.n	800a2ba <printAllWeight+0x3a>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x,y-1) )
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d8e4      	bhi.n	800a2ba <printAllWeight+0x3a>
 800a2f0:	1f3b      	subs	r3, r7, #4
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d8e0      	bhi.n	800a2ba <printAllWeight+0x3a>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->RawNode[x][y].weight);
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4838      	ldr	r0, [pc, #224]	; (800a3dc <printAllWeight+0x15c>)
 800a2fc:	f008 fadc 	bl	80128b8 <iprintf>
            if(x < NUMBER_OF_SQUARES_X-1)
 800a300:	f1bb 0f08 	cmp.w	fp, #8
                 printf("  +  ");
 800a304:	4648      	mov	r0, r9
            if(x < NUMBER_OF_SQUARES_X-1)
 800a306:	d1e4      	bne.n	800a2d2 <printAllWeight+0x52>
 800a308:	1e7b      	subs	r3, r7, #1
 800a30a:	461e      	mov	r6, r3
        printf("\r\n");
 800a30c:	4834      	ldr	r0, [pc, #208]	; (800a3e0 <printAllWeight+0x160>)
 800a30e:	9302      	str	r3, [sp, #8]
 800a310:	f008 fb5a 	bl	80129c8 <puts>
 800a314:	4633      	mov	r3, r6
 800a316:	b2f6      	uxtb	r6, r6
 800a318:	1af6      	subs	r6, r6, r3
 800a31a:	00f6      	lsls	r6, r6, #3
 800a31c:	f8dd a004 	ldr.w	sl, [sp, #4]
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800a320:	f04f 0b00 	mov.w	fp, #0
 800a324:	e00d      	b.n	800a342 <printAllWeight+0xc2>
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800a326:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800a32a:	f008 fac5 	bl	80128b8 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800a32e:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800a332:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800a334:	d022      	beq.n	800a37c <printAllWeight+0xfc>
                printf("     ");
 800a336:	f008 fabf 	bl	80128b8 <iprintf>
        for(int x=0; x < NUMBER_OF_SQUARES_X+1; x++)
 800a33a:	f10b 0b01 	add.w	fp, fp, #1
 800a33e:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
    if(maze->ColumnNode[x][y].weight == 0)
 800a342:	eb0a 0106 	add.w	r1, sl, r6
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a346:	f1ab 0304 	sub.w	r3, fp, #4
    if(maze->ColumnNode[x][y].weight == 0)
 800a34a:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a34e:	b2db      	uxtb	r3, r3
                printf(" %3x ",maze->ColumnNode[x][y-1].weight);
 800a350:	4628      	mov	r0, r5
    if(maze->ColumnNode[x][y].weight == 0)
 800a352:	b921      	cbnz	r1, 800a35e <printAllWeight+0xde>
        if ( __JUDGE_GOAL__ (x,y) || __JUDGE_GOAL__(x-1,y) )
 800a354:	2b02      	cmp	r3, #2
 800a356:	d802      	bhi.n	800a35e <printAllWeight+0xde>
 800a358:	9b00      	ldr	r3, [sp, #0]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d905      	bls.n	800a36a <printAllWeight+0xea>
            if(judgeColumnNodeGoal(maze, x,y-1) == true || ((pos->x == x) && (pos->y == y)))
 800a35e:	7823      	ldrb	r3, [r4, #0]
 800a360:	455b      	cmp	r3, fp
 800a362:	d1e0      	bne.n	800a326 <printAllWeight+0xa6>
 800a364:	7863      	ldrb	r3, [r4, #1]
 800a366:	42bb      	cmp	r3, r7
 800a368:	d1dd      	bne.n	800a326 <printAllWeight+0xa6>
                printf(" \x1B[31;1m%3x\x1B[37;m ",maze->ColumnNode[x][y-1].weight);
 800a36a:	f8ba 12d2 	ldrh.w	r1, [sl, #722]	; 0x2d2
 800a36e:	481b      	ldr	r0, [pc, #108]	; (800a3dc <printAllWeight+0x15c>)
 800a370:	f008 faa2 	bl	80128b8 <iprintf>
            if(x < NUMBER_OF_SQUARES_X)
 800a374:	f1bb 0f09 	cmp.w	fp, #9
                printf("     ");
 800a378:	4640      	mov	r0, r8
            if(x < NUMBER_OF_SQUARES_X)
 800a37a:	d1dc      	bne.n	800a336 <printAllWeight+0xb6>
        }
        printf("\r\n");
 800a37c:	4818      	ldr	r0, [pc, #96]	; (800a3e0 <printAllWeight+0x160>)
 800a37e:	f008 fb23 	bl	80129c8 <puts>
 800a382:	9b00      	ldr	r3, [sp, #0]
 800a384:	9f02      	ldr	r7, [sp, #8]
 800a386:	f103 3aff 	add.w	sl, r3, #4294967295
 800a38a:	9b01      	ldr	r3, [sp, #4]
 800a38c:	3b08      	subs	r3, #8
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	fa5f f38a 	uxtb.w	r3, sl
 800a394:	9300      	str	r3, [sp, #0]
    for(int y=NUMBER_OF_SQUARES_Y; y > 0; y--)
 800a396:	2f00      	cmp	r7, #0
 800a398:	d186      	bne.n	800a2a8 <printAllWeight+0x28>
    }
    //y が0のときの行だけ表示
    printf("  +  ");
 800a39a:	4812      	ldr	r0, [pc, #72]	; (800a3e4 <printAllWeight+0x164>)
    for(int x=0; x < NUMBER_OF_SQUARES_X; x++)
    {
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a39c:	4e0e      	ldr	r6, [pc, #56]	; (800a3d8 <printAllWeight+0x158>)
        if(x < NUMBER_OF_SQUARES_X-1)
                printf("  +  ");
 800a39e:	4607      	mov	r7, r0
    printf("  +  ");
 800a3a0:	f008 fa8a 	bl	80128b8 <iprintf>
 800a3a4:	9b03      	ldr	r3, [sp, #12]
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	8859      	ldrh	r1, [r3, #2]
 800a3aa:	461c      	mov	r4, r3
 800a3ac:	f008 fa84 	bl	80128b8 <iprintf>
 800a3b0:	f504 7520 	add.w	r5, r4, #640	; 0x280
                printf("  +  ");
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f008 fa7f 	bl	80128b8 <iprintf>
 800a3ba:	3450      	adds	r4, #80	; 0x50
        printf(" %3x ",maze->RawNode[x][0].weight);
 800a3bc:	8861      	ldrh	r1, [r4, #2]
 800a3be:	4630      	mov	r0, r6
 800a3c0:	f008 fa7a 	bl	80128b8 <iprintf>
        if(x < NUMBER_OF_SQUARES_X-1)
 800a3c4:	42ac      	cmp	r4, r5
 800a3c6:	d1f5      	bne.n	800a3b4 <printAllWeight+0x134>
    }
    printf("\r\n");
 800a3c8:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <printAllWeight+0x160>)
    
    
}
 800a3ca:	b005      	add	sp, #20
 800a3cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a3d0:	f008 bafa 	b.w	80129c8 <puts>
 800a3d4:	0801627c 	.word	0x0801627c
 800a3d8:	080162b0 	.word	0x080162b0
 800a3dc:	0801629c 	.word	0x0801629c
 800a3e0:	08016720 	.word	0x08016720
 800a3e4:	08016294 	.word	0x08016294
 800a3e8:	080162b8 	.word	0x080162b8

0800a3ec <initWeight>:
            maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].draw == true) ? MAX_WEIGHT : 0;     //西
        }
    }
}
void initWeight(maze_node *maze)
{
 800a3ec:	b410      	push	{r4}
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	f500 7434 	add.w	r4, r0, #720	; 0x2d0
    // }
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a3f4:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a3f8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800a3fc:	8059      	strh	r1, [r3, #2]
 800a3fe:	3308      	adds	r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a400:	4293      	cmp	r3, r2
 800a402:	d1fb      	bne.n	800a3fc <initWeight+0x10>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a404:	42a3      	cmp	r3, r4
 800a406:	d1f7      	bne.n	800a3f8 <initWeight+0xc>
    }
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800a408:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a40c:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800a410:	f8a0 12d2 	strh.w	r1, [r0, #722]	; 0x2d2
 800a414:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a416:	4282      	cmp	r2, r0
 800a418:	d1fa      	bne.n	800a410 <initWeight+0x24>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d1f6      	bne.n	800a40c <initWeight+0x20>
        }
    }
}
 800a41e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <initMaze>:
void initMaze(maze_node *maze) //重みは別で初期化
{
 800a424:	b5f0      	push	{r4, r5, r6, r7, lr}
    //まず未探索状態にする
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a426:	2700      	movs	r7, #0
 800a428:	4604      	mov	r4, r0
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a42a:	4684      	mov	ip, r0
        {
            maze->RawNode[i][j].existence = UNKNOWN;
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a42c:	4639      	mov	r1, r7
            maze->RawNode[i][j].existence = UNKNOWN;
 800a42e:	2602      	movs	r6, #2
 800a430:	b2fd      	uxtb	r5, r7
{
 800a432:	4663      	mov	r3, ip
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a434:	2201      	movs	r2, #1
            maze->RawNode[i][j].rc = 0;
            maze->RawNode[i][j].pos.x = i;
            maze->RawNode[i][j].pos.y = j;
 800a436:	73da      	strb	r2, [r3, #15]
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a438:	3201      	adds	r2, #1
 800a43a:	2a09      	cmp	r2, #9
            maze->RawNode[i][j].existence = UNKNOWN;
 800a43c:	721e      	strb	r6, [r3, #8]
            maze->RawNode[i][j].draw = false;//未知壁は描画のときに無いものとする
 800a43e:	7319      	strb	r1, [r3, #12]
            maze->RawNode[i][j].rc = 0;
 800a440:	7359      	strb	r1, [r3, #13]
            maze->RawNode[i][j].pos.x = i;
 800a442:	739d      	strb	r5, [r3, #14]
 800a444:	f103 0308 	add.w	r3, r3, #8
        for(int j=1; j < NUMBER_OF_SQUARES_Y; j++)
 800a448:	d1f5      	bne.n	800a436 <initMaze+0x12>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a44a:	3701      	adds	r7, #1
 800a44c:	2f09      	cmp	r7, #9
 800a44e:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800a452:	d1ed      	bne.n	800a430 <initMaze+0xc>
        }
    }
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a454:	f04f 0c01 	mov.w	ip, #1
    {
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            maze->ColumnNode[i][j].existence = UNKNOWN;
            maze->ColumnNode[i][j].draw = false;
            maze->ColumnNode[i][j].rc = 1;
 800a458:	4667      	mov	r7, ip
 800a45a:	f100 0e48 	add.w	lr, r0, #72	; 0x48
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a45e:	2602      	movs	r6, #2
            maze->ColumnNode[i][j].draw = false;
 800a460:	2500      	movs	r5, #0
 800a462:	fa5f f18c 	uxtb.w	r1, ip
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a466:	4673      	mov	r3, lr
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a468:	2200      	movs	r2, #0
            maze->ColumnNode[i][j].pos.x = i;
            maze->ColumnNode[i][j].pos.y = j;
 800a46a:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a46e:	3201      	adds	r2, #1
 800a470:	2a09      	cmp	r2, #9
            maze->ColumnNode[i][j].existence = UNKNOWN;
 800a472:	f883 62d0 	strb.w	r6, [r3, #720]	; 0x2d0
            maze->ColumnNode[i][j].draw = false;
 800a476:	f883 52d4 	strb.w	r5, [r3, #724]	; 0x2d4
            maze->ColumnNode[i][j].rc = 1;
 800a47a:	f883 72d5 	strb.w	r7, [r3, #725]	; 0x2d5
            maze->ColumnNode[i][j].pos.x = i;
 800a47e:	f883 12d6 	strb.w	r1, [r3, #726]	; 0x2d6
 800a482:	f103 0308 	add.w	r3, r3, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a486:	d1f0      	bne.n	800a46a <initMaze+0x46>
    for(int i=1; i < NUMBER_OF_SQUARES_X; i++)
 800a488:	f10c 0c01 	add.w	ip, ip, #1
 800a48c:	f1bc 0f09 	cmp.w	ip, #9
 800a490:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800a494:	d1e5      	bne.n	800a462 <initMaze+0x3e>
        }
    }
    
    // 壁の有無を初期化
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a496:	2200      	movs	r2, #0
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1

        maze->RawNode[i][0].draw = true;                        
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;

        maze->RawNode[i][0].rc = 0;
 800a498:	4616      	mov	r6, r2
 800a49a:	4603      	mov	r3, r0
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a49c:	2101      	movs	r1, #1
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;

        maze->RawNode[i][0].pos.x = i;
 800a49e:	b2d5      	uxtb	r5, r2
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a4a0:	3201      	adds	r2, #1
 800a4a2:	2a09      	cmp	r2, #9
        maze->RawNode[i][0].existence = WALL;                       //南壁すべて1
 800a4a4:	7019      	strb	r1, [r3, #0]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].existence = WALL;     //北壁すべて1
 800a4a6:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
        maze->RawNode[i][0].draw = true;                        
 800a4aa:	7119      	strb	r1, [r3, #4]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].draw = true;
 800a4ac:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
        maze->RawNode[i][0].rc = 0;
 800a4b0:	715e      	strb	r6, [r3, #5]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].rc = 0;
 800a4b2:	f883 604d 	strb.w	r6, [r3, #77]	; 0x4d
        maze->RawNode[i][0].pos.y = NUMBER_OF_SQUARES_Y;
 800a4b6:	f883 c007 	strb.w	ip, [r3, #7]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.y = NUMBER_OF_SQUARES_Y;
 800a4ba:	f883 c04f 	strb.w	ip, [r3, #79]	; 0x4f
        maze->RawNode[i][0].pos.x = i;
 800a4be:	719d      	strb	r5, [r3, #6]
        maze->RawNode[i][NUMBER_OF_SQUARES_Y].pos.x = i;
 800a4c0:	f883 504e 	strb.w	r5, [r3, #78]	; 0x4e
 800a4c4:	f103 0350 	add.w	r3, r3, #80	; 0x50
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a4c8:	d1e9      	bne.n	800a49e <initMaze+0x7a>
    }
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a4ca:	2100      	movs	r1, #0
    {
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a4cc:	2301      	movs	r3, #1

        maze->ColumnNode[0][j].rc = 1;
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;

        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
        maze->ColumnNode[0][j].pos.y = j;
 800a4ce:	b2cd      	uxtb	r5, r1
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a4d0:	3101      	adds	r1, #1
 800a4d2:	2909      	cmp	r1, #9
        maze->ColumnNode[0][j].existence = WALL;                    //西壁すべて1
 800a4d4:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].existence = WALL;  //東壁すべて1
 800a4d8:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
        maze->ColumnNode[0][j].draw = true;                    
 800a4dc:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].draw = true;
 800a4e0:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
        maze->ColumnNode[0][j].rc = 1;
 800a4e4:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].rc = 1;
 800a4e8:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
        maze->ColumnNode[0][j].pos.x = NUMBER_OF_SQUARES_X;
 800a4ec:	f884 22d6 	strb.w	r2, [r4, #726]	; 0x2d6
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.x = NUMBER_OF_SQUARES_X;
 800a4f0:	f884 255e 	strb.w	r2, [r4, #1374]	; 0x55e
        maze->ColumnNode[0][j].pos.y = j;
 800a4f4:	f884 52d7 	strb.w	r5, [r4, #727]	; 0x2d7
        maze->ColumnNode[NUMBER_OF_SQUARES_X][j].pos.y = j;
 800a4f8:	f884 555f 	strb.w	r5, [r4, #1375]	; 0x55f
 800a4fc:	f104 0408 	add.w	r4, r4, #8
    for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a500:	d1e5      	bne.n	800a4ce <initMaze+0xaa>
    }
    maze->ColumnNode[1][0].existence = WALL;    //東1
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800a502:	2200      	movs	r2, #0
    maze->ColumnNode[1][0].existence = WALL;    //東1
 800a504:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318

    maze->ColumnNode[1][0].draw = true;    //東1
 800a508:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
    maze->RawNode[0][1].existence = NOWALL;     //北0
 800a50c:	7202      	strb	r2, [r0, #8]
    maze->RawNode[0][1].draw = false;     //北0
 800a50e:	7302      	strb	r2, [r0, #12]
}
 800a510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a512:	bf00      	nop

0800a514 <printAllNodeExistence>:
        printf("\r\n");
    }
    printf("\r\n");
}
void printAllNodeExistence(maze_node *mn)
{
 800a514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a518:	4680      	mov	r8, r0
 800a51a:	4605      	mov	r5, r0
    printf("全ノードの壁の存在\r\n");
 800a51c:	481a      	ldr	r0, [pc, #104]	; (800a588 <printAllNodeExistence+0x74>)
    //行を増やして同じ処理
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
    {
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
        {
            printf("%u,",mn->RawNode[i][j].existence);
 800a51e:	4f1b      	ldr	r7, [pc, #108]	; (800a58c <printAllNodeExistence+0x78>)
        }
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
        {
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a520:	4e1b      	ldr	r6, [pc, #108]	; (800a590 <printAllNodeExistence+0x7c>)
            if(j < NUMBER_OF_SQUARES_Y-1)
                printf(",");
        }
        printf("\r\n");
 800a522:	f8df a070 	ldr.w	sl, [pc, #112]	; 800a594 <printAllNodeExistence+0x80>
 800a526:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800a52a:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
    printf("全ノードの壁の存在\r\n");
 800a52e:	f008 fa4b 	bl	80129c8 <puts>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a532:	2401      	movs	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800a534:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 800a538:	4638      	mov	r0, r7
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a53a:	3401      	adds	r4, #1
            printf("%u,",mn->RawNode[i][j].existence);
 800a53c:	f008 f9bc 	bl	80128b8 <iprintf>
        for(int j=1; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a540:	2c0a      	cmp	r4, #10
 800a542:	d1f7      	bne.n	800a534 <printAllNodeExistence+0x20>
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a544:	f898 12d0 	ldrb.w	r1, [r8, #720]	; 0x2d0
 800a548:	4630      	mov	r0, r6
 800a54a:	f008 f9b5 	bl	80128b8 <iprintf>
 800a54e:	f108 0b40 	add.w	fp, r8, #64	; 0x40
 800a552:	4644      	mov	r4, r8
                printf(",");
 800a554:	202c      	movs	r0, #44	; 0x2c
 800a556:	f008 f9c7 	bl	80128e8 <putchar>
 800a55a:	3408      	adds	r4, #8
            printf("%u",mn->ColumnNode[i+1][j].existence);
 800a55c:	f894 12d0 	ldrb.w	r1, [r4, #720]	; 0x2d0
 800a560:	4630      	mov	r0, r6
 800a562:	f008 f9a9 	bl	80128b8 <iprintf>
            if(j < NUMBER_OF_SQUARES_Y-1)
 800a566:	455c      	cmp	r4, fp
 800a568:	d1f4      	bne.n	800a554 <printAllNodeExistence+0x40>
 800a56a:	f108 0848 	add.w	r8, r8, #72	; 0x48
        printf("\r\n");
 800a56e:	4650      	mov	r0, sl
 800a570:	f008 fa2a 	bl	80129c8 <puts>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a574:	45c8      	cmp	r8, r9
 800a576:	f105 0550 	add.w	r5, r5, #80	; 0x50
 800a57a:	d1da      	bne.n	800a532 <printAllNodeExistence+0x1e>
    }
    printf("\r\n");
 800a57c:	4805      	ldr	r0, [pc, #20]	; (800a594 <printAllNodeExistence+0x80>)
}
 800a57e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a582:	f008 ba21 	b.w	80129c8 <puts>
 800a586:	bf00      	nop
 800a588:	0801625c 	.word	0x0801625c
 800a58c:	08016254 	.word	0x08016254
 800a590:	08016258 	.word	0x08016258
 800a594:	08016720 	.word	0x08016720

0800a598 <printMatrix16ValueFromNode>:
    return val;
}

//機体からTeraTermで出力するための関数
void printMatrix16ValueFromNode(maze_node *maze)
{
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	4604      	mov	r4, r0
 800a59e:	b083      	sub	sp, #12
    printf("機体からTeraTermへの出力用\r\n");
 800a5a0:	4822      	ldr	r0, [pc, #136]	; (800a62c <printMatrix16ValueFromNode+0x94>)
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
    {
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
        {
            printf("%u",convertNodeTo16Value(maze, i,j));
 800a5a2:	4e23      	ldr	r6, [pc, #140]	; (800a630 <printMatrix16ValueFromNode+0x98>)
    printf("機体からTeraTermへの出力用\r\n");
 800a5a4:	f008 fa10 	bl	80129c8 <puts>
 800a5a8:	f04f 0809 	mov.w	r8, #9
 800a5ac:	f104 0348 	add.w	r3, r4, #72	; 0x48
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800a5b0:	f04f 0908 	mov.w	r9, #8
 800a5b4:	f1a3 0208 	sub.w	r2, r3, #8
 800a5b8:	eba9 0408 	sub.w	r4, r9, r8
 800a5bc:	9201      	str	r2, [sp, #4]
 800a5be:	4692      	mov	sl, r2
 800a5c0:	00e4      	lsls	r4, r4, #3
 800a5c2:	f503 7520 	add.w	r5, r3, #640	; 0x280
 800a5c6:	f503 7734 	add.w	r7, r3, #720	; 0x2d0
{
 800a5ca:	469b      	mov	fp, r3
 800a5cc:	e003      	b.n	800a5d6 <printMatrix16ValueFromNode+0x3e>
            if(i < NUMBER_OF_SQUARES_X-1)
                printf(",");
 800a5ce:	f008 f98b 	bl	80128e8 <putchar>
        for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a5d2:	455f      	cmp	r7, fp
 800a5d4:	d01b      	beq.n	800a60e <printMatrix16ValueFromNode+0x76>
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a5d6:	f89a 12d4 	ldrb.w	r1, [sl, #724]	; 0x2d4
    val += 2 * maze->ColumnNode[x+1][y].draw;   //東
 800a5da:	f89a e31c 	ldrb.w	lr, [sl, #796]	; 0x31c
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a5de:	f89b 0004 	ldrb.w	r0, [fp, #4]
    val += 4 * maze->RawNode[x][y].draw;        //南
 800a5e2:	eb0b 0c04 	add.w	ip, fp, r4
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a5e6:	00c9      	lsls	r1, r1, #3
 800a5e8:	eb01 014e 	add.w	r1, r1, lr, lsl #1
    val += 4 * maze->RawNode[x][y].draw;        //南
 800a5ec:	f89c c004 	ldrb.w	ip, [ip, #4]
    val += 8 * maze->ColumnNode[x][y].draw;     //西    
 800a5f0:	4401      	add	r1, r0
 800a5f2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
            printf("%u",convertNodeTo16Value(maze, i,j));
 800a5f6:	b2c9      	uxtb	r1, r1
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f008 f95d 	bl	80128b8 <iprintf>
            if(i < NUMBER_OF_SQUARES_X-1)
 800a5fe:	455d      	cmp	r5, fp
                printf(",");
 800a600:	f04f 002c 	mov.w	r0, #44	; 0x2c
 800a604:	f10b 0b50 	add.w	fp, fp, #80	; 0x50
 800a608:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
            if(i < NUMBER_OF_SQUARES_X-1)
 800a60c:	d1df      	bne.n	800a5ce <printMatrix16ValueFromNode+0x36>
        }
        printf("\r\n");
 800a60e:	4809      	ldr	r0, [pc, #36]	; (800a634 <printMatrix16ValueFromNode+0x9c>)
 800a610:	f008 f9da 	bl	80129c8 <puts>
    for(int j=NUMBER_OF_SQUARES_Y-1; j >= 0; j--)
 800a614:	f1b8 0801 	subs.w	r8, r8, #1
 800a618:	f109 39ff 	add.w	r9, r9, #4294967295
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	d1c9      	bne.n	800a5b4 <printMatrix16ValueFromNode+0x1c>
    }
    printf("\r\n");
 800a620:	4804      	ldr	r0, [pc, #16]	; (800a634 <printMatrix16ValueFromNode+0x9c>)

}
 800a622:	b003      	add	sp, #12
 800a624:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("\r\n");
 800a628:	f008 b9ce 	b.w	80129c8 <puts>
 800a62c:	080162c0 	.word	0x080162c0
 800a630:	08016258 	.word	0x08016258
 800a634:	08016720 	.word	0x08016720

0800a638 <updateNodeThree>:


//壁があれば重みはデフォルト値を代入する
//壁がなければそのままにしておく 前左右の情報の方角に合わせた変換は別のところで
void updateNodeThree(maze_node *maze, state *st, uint8_t x, uint8_t y)
{
 800a638:	b5f0      	push	{r4, r5, r6, r7, lr}
    //壁の有無の更新。既知の壁には上書きしない。重みの更新は？既知かどうかは重複するから書かない
        //重みは？壁があればMAX値、なければそのまま   
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800a63a:	0094      	lsls	r4, r2, #2
 800a63c:	1c5f      	adds	r7, r3, #1
 800a63e:	18a5      	adds	r5, r4, r2
 800a640:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 800a644:	18a6      	adds	r6, r4, r2
 800a646:	f810 c035 	ldrb.w	ip, [r0, r5, lsl #3]
 800a64a:	f1bc 0f02 	cmp.w	ip, #2
 800a64e:	bf08      	it	eq
 800a650:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800a654:	f102 0501 	add.w	r5, r2, #1
    maze->RawNode[x][y+1].existence = (maze->RawNode[x][y+1].existence == UNKNOWN) ? st->wall.north : maze->RawNode[x][y+1].existence;             //北
 800a658:	eb07 0646 	add.w	r6, r7, r6, lsl #1
 800a65c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800a660:	bf08      	it	eq
 800a662:	f00c 0c03 	andeq.w	ip, ip, #3
 800a666:	441d      	add	r5, r3
 800a668:	f800 c036 	strb.w	ip, [r0, r6, lsl #3]
 800a66c:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800a670:	eb04 0c02 	add.w	ip, r4, r2
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800a674:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800a678:	2e02      	cmp	r6, #2
 800a67a:	bf08      	it	eq
 800a67c:	790e      	ldrbeq	r6, [r1, #4]
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800a67e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    maze->ColumnNode[x+1][y].existence = (maze->ColumnNode[x+1][y].existence == UNKNOWN) ? st->wall.east : maze->ColumnNode[x+1][y].existence;    //東
 800a682:	bf08      	it	eq
 800a684:	f3c6 0681 	ubfxeq	r6, r6, #2, #2
 800a688:	f885 62d0 	strb.w	r6, [r5, #720]	; 0x2d0
    maze->RawNode[x][y].existence = (maze->RawNode[x][y].existence == UNKNOWN) ? st->wall.south : maze->RawNode[x][y].existence;                   //南
 800a68c:	f810 c03c 	ldrb.w	ip, [r0, ip, lsl #3]
 800a690:	f1bc 0f02 	cmp.w	ip, #2
 800a694:	bf08      	it	eq
 800a696:	f891 c004 	ldrbeq.w	ip, [r1, #4]
 800a69a:	eb04 0e02 	add.w	lr, r4, r2
 800a69e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 800a6a2:	f04f 0609 	mov.w	r6, #9
 800a6a6:	bf08      	it	eq
 800a6a8:	f3cc 1c01 	ubfxeq	ip, ip, #4, #2
 800a6ac:	fb16 3602 	smlabb	r6, r6, r2, r3
 800a6b0:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 800a6b4:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
    // maze->RawNode[x][y+1].flag = true;      //北
    // maze->ColumnNode[x+1][y].flag = true;   //東
    // maze->RawNode[x][y].flag = true;        //南
    // maze->ColumnNode[x][y].flag = true;     //西

    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800a6b8:	4414      	add	r4, r2
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800a6ba:	f896 c2d0 	ldrb.w	ip, [r6, #720]	; 0x2d0
 800a6be:	f1bc 0f02 	cmp.w	ip, #2
 800a6c2:	bf08      	it	eq
 800a6c4:	f891 c004 	ldrbeq.w	ip, [r1, #4]
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800a6c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a6cc:	eb04 0207 	add.w	r2, r4, r7
    maze->ColumnNode[x][y].existence = (maze->ColumnNode[x][y].existence == UNKNOWN) ? st->wall.west : maze->ColumnNode[x][y].existence;          //西
 800a6d0:	bf08      	it	eq
 800a6d2:	ea4f 1c9c 	moveq.w	ip, ip, lsr #6
 800a6d6:	f886 c2d0 	strb.w	ip, [r6, #720]	; 0x2d0
    maze->RawNode[x][y+1].draw = (maze->RawNode[x][y+1].existence == WALL) ? true : false;          //北
 800a6da:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800a6de:	f1a1 0101 	sub.w	r1, r1, #1
 800a6e2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a6e6:	fab1 f181 	clz	r1, r1
 800a6ea:	0949      	lsrs	r1, r1, #5
 800a6ec:	7111      	strb	r1, [r2, #4]
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800a6ee:	f895 22d0 	ldrb.w	r2, [r5, #720]	; 0x2d0
 800a6f2:	f1a2 0201 	sub.w	r2, r2, #1
 800a6f6:	fab2 f282 	clz	r2, r2
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800a6fa:	4423      	add	r3, r4
    maze->ColumnNode[x+1][y].draw = (maze->ColumnNode[x+1][y].existence == WALL) ? true : false;    //東
 800a6fc:	0952      	lsrs	r2, r2, #5
 800a6fe:	f885 22d4 	strb.w	r2, [r5, #724]	; 0x2d4
    maze->RawNode[x][y].draw = (maze->RawNode[x][y].existence == WALL) ? true : false;              //南
 800a702:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 800a706:	f1a2 0201 	sub.w	r2, r2, #1
 800a70a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a70e:	fab2 f282 	clz	r2, r2
 800a712:	0952      	lsrs	r2, r2, #5
 800a714:	711a      	strb	r2, [r3, #4]
    maze->ColumnNode[x][y].draw = (maze->ColumnNode[x][y].existence == WALL) ? true : false;        //西
 800a716:	f896 32d0 	ldrb.w	r3, [r6, #720]	; 0x2d0
 800a71a:	f1a3 0301 	sub.w	r3, r3, #1
 800a71e:	fab3 f383 	clz	r3, r3
 800a722:	095b      	lsrs	r3, r3, #5
 800a724:	f886 32d4 	strb.w	r3, [r6, #724]	; 0x2d4
    //重みは毎回リセットして計算しなおすのでここでは要らない
    // maze->RawNode[x][y+1].weight = (maze->RawNode[x][y+1].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y+1].weight;             //北
    // maze->ColumnNode[x+1][y].weight = (maze->ColumnNode[x+1][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x+1][y].weight;    //東
    // maze->RawNode[x][y].weight = (maze->RawNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->RawNode[x][y].weight;                   //南
    // maze->ColumnNode[x][y].weight = (maze->ColumnNode[x][y].existence == WALL) ? MAX_WEIGHT : maze->ColumnNode[x][y].weight;          //西
}
 800a728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a72a:	bf00      	nop

0800a72c <initTargetAreaWeight>:
//             maze->ColumnNode[x+i][y+j].weight = 0;      //西
//         }
//     }
// }
void initTargetAreaWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size_x, uint8_t target_size_y)
{
 800a72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a730:	f89d 801c 	ldrb.w	r8, [sp, #28]
    //ゴールエリアの外堀と中のノードは全て0、壁があればMAX。
    for(int i=0; i < target_size_x; i++)
 800a734:	2b00      	cmp	r3, #0
 800a736:	d044      	beq.n	800a7c2 <initTargetAreaWeight+0x96>
 800a738:	1c4c      	adds	r4, r1, #1
 800a73a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800a73e:	250a      	movs	r5, #10
 800a740:	18a7      	adds	r7, r4, r2
 800a742:	fb15 2201 	smlabb	r2, r5, r1, r2
 800a746:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 800a74a:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
 800a74e:	f04f 0908 	mov.w	r9, #8
 800a752:	f04f 0e00 	mov.w	lr, #0
            // maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0; //東
            // maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;           //南
            // maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].weight == MAX_WEIGHT) ? MAX_WEIGHT : 0;     //西

        	//なぜdraw == trueでやっていたかわからない
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a756:	f640 74ff 	movw	r4, #4095	; 0xfff
        for(int j=0; j < target_size_y; j++)
 800a75a:	f1b8 0f00 	cmp.w	r8, #0
 800a75e:	d028      	beq.n	800a7b2 <initTargetAreaWeight+0x86>
 800a760:	f1a7 0048 	sub.w	r0, r7, #72	; 0x48
 800a764:	fb19 7608 	smlabb	r6, r9, r8, r7
 800a768:	4639      	mov	r1, r7
 800a76a:	4662      	mov	r2, ip
            maze->RawNode[x+i][y+1+j].weight = (maze->RawNode[x+i][y+1+j].existence == WALL) ? MAX_WEIGHT : 0;       //北
 800a76c:	7a15      	ldrb	r5, [r2, #8]
 800a76e:	2d01      	cmp	r5, #1
 800a770:	bf14      	ite	ne
 800a772:	2500      	movne	r5, #0
 800a774:	4625      	moveq	r5, r4
 800a776:	8155      	strh	r5, [r2, #10]
            maze->ColumnNode[x+1+i][y+j].weight = (maze->ColumnNode[x+1+i][y+j].existence == WALL) ? MAX_WEIGHT : 0; //東
 800a778:	f891 52d0 	ldrb.w	r5, [r1, #720]	; 0x2d0
 800a77c:	2d01      	cmp	r5, #1
 800a77e:	bf14      	ite	ne
 800a780:	2500      	movne	r5, #0
 800a782:	4625      	moveq	r5, r4
 800a784:	f8a1 52d2 	strh.w	r5, [r1, #722]	; 0x2d2
            maze->RawNode[x+i][y+j].weight = (maze->RawNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;           //南
 800a788:	7815      	ldrb	r5, [r2, #0]
 800a78a:	2d01      	cmp	r5, #1
 800a78c:	bf14      	ite	ne
 800a78e:	2500      	movne	r5, #0
 800a790:	4625      	moveq	r5, r4
 800a792:	8055      	strh	r5, [r2, #2]
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a794:	f890 52d0 	ldrb.w	r5, [r0, #720]	; 0x2d0
 800a798:	3108      	adds	r1, #8
 800a79a:	2d01      	cmp	r5, #1
 800a79c:	bf14      	ite	ne
 800a79e:	2500      	movne	r5, #0
 800a7a0:	4625      	moveq	r5, r4
        for(int j=0; j < target_size_y; j++)
 800a7a2:	42b1      	cmp	r1, r6
            maze->ColumnNode[x+i][y+j].weight = (maze->ColumnNode[x+i][y+j].existence == WALL) ? MAX_WEIGHT : 0;     //西
 800a7a4:	f8a0 52d2 	strh.w	r5, [r0, #722]	; 0x2d2
 800a7a8:	f102 0208 	add.w	r2, r2, #8
 800a7ac:	f100 0008 	add.w	r0, r0, #8
        for(int j=0; j < target_size_y; j++)
 800a7b0:	d1dc      	bne.n	800a76c <initTargetAreaWeight+0x40>
    for(int i=0; i < target_size_x; i++)
 800a7b2:	f10e 0e01 	add.w	lr, lr, #1
 800a7b6:	459e      	cmp	lr, r3
 800a7b8:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 800a7bc:	f107 0748 	add.w	r7, r7, #72	; 0x48
 800a7c0:	d1cb      	bne.n	800a75a <initTargetAreaWeight+0x2e>
        }
    }
}
 800a7c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7c6:	bf00      	nop

0800a7c8 <updateAllNodeWeight>:
    // setTargetWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t target_size);
//ゴールノードを0に初期化
    // setGoalWeight(maze);
    
void updateAllNodeWeight(maze_node *maze, uint8_t x, uint8_t y, uint8_t area_size_x, uint8_t area_size_y, int mask)
{
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	b085      	sub	sp, #20
 800a7ce:	4680      	mov	r8, r0
 800a7d0:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 800a7d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a7d6:	f500 7c34 	add.w	ip, r0, #720	; 0x2d0
            maze->RawNode[i][j].weight = MAX_WEIGHT;  
 800a7da:	f640 77ff 	movw	r7, #4095	; 0xfff
 800a7de:	f100 0550 	add.w	r5, r0, #80	; 0x50
 800a7e2:	8047      	strh	r7, [r0, #2]
 800a7e4:	3008      	adds	r0, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y+1; j++)
 800a7e6:	42a8      	cmp	r0, r5
 800a7e8:	d1fb      	bne.n	800a7e2 <updateAllNodeWeight+0x1a>
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a7ea:	4560      	cmp	r0, ip
 800a7ec:	d1f7      	bne.n	800a7de <updateAllNodeWeight+0x16>
 800a7ee:	4646      	mov	r6, r8
            maze->ColumnNode[i][j].weight = MAX_WEIGHT;
 800a7f0:	f640 7cff 	movw	ip, #4095	; 0xfff
 800a7f4:	f106 0548 	add.w	r5, r6, #72	; 0x48
 800a7f8:	f8a6 c2d2 	strh.w	ip, [r6, #722]	; 0x2d2
 800a7fc:	3608      	adds	r6, #8
        for(int j=0; j < NUMBER_OF_SQUARES_Y; j++)
 800a7fe:	42ae      	cmp	r6, r5
 800a800:	d1fa      	bne.n	800a7f8 <updateAllNodeWeight+0x30>
    for(int i=0; i < NUMBER_OF_SQUARES_X+1; i++)
 800a802:	4286      	cmp	r6, r0
 800a804:	d1f6      	bne.n	800a7f4 <updateAllNodeWeight+0x2c>
	//全体に154/20ms = 7.7ms
    //新しい区画に入ったときに、更新

    initWeight(maze); //3/20ms
    
    initTargetAreaWeight(maze, x,y, area_size_x,area_size_y);
 800a806:	f8cd e000 	str.w	lr, [sp]
 800a80a:	4640      	mov	r0, r8
 800a80c:	f7ff ff8e 	bl	800a72c <initTargetAreaWeight>
 800a810:	4645      	mov	r5, r8
 800a812:	f108 0250 	add.w	r2, r8, #80	; 0x50
 800a816:	9203      	str	r2, [sp, #12]
 800a818:	f108 0e48 	add.w	lr, r8, #72	; 0x48
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
			{
                //1ノードずつ見る.そこから加算対象が最大6個
                //端を見ないので、一番上の列からスタート j=N; j >= 0, xを1からN-1まで
                //次に行 j=N-1から1まで xを0からN-1まで
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a81c:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a820:	46ac      	mov	ip, r5
					}
                    //南西
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
					{
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
						change_flag = true;		//値が更新されたことを示す
 800a822:	f04f 0800 	mov.w	r8, #0
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800a826:	4647      	mov	r7, r8
						change_flag = true;		//値が更新されたことを示す
 800a828:	4661      	mov	r1, ip
 800a82a:	46e2      	mov	sl, ip
 800a82c:	46c1      	mov	r9, r8
 800a82e:	f101 0848 	add.w	r8, r1, #72	; 0x48
    for(int i=0; i < NUMBER_OF_SQUARES_X; i++)
 800a832:	4645      	mov	r5, r8
 800a834:	4653      	mov	r3, sl
 800a836:	2001      	movs	r0, #1
				if(maze->RawNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a838:	895e      	ldrh	r6, [r3, #10]
 800a83a:	4296      	cmp	r6, r2
 800a83c:	d055      	beq.n	800a8ea <updateAllNodeWeight+0x122>
				if(j < NUMBER_OF_SQUARES_Y-1)   //範囲チェック. 座標のxyではなく、ノードのxy
 800a83e:	2808      	cmp	r0, #8
 800a840:	d010      	beq.n	800a864 <updateAllNodeWeight+0x9c>
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT) )	//壁がなければ(maskの意味はstatic_parametersを参照)
 800a842:	f893 b010 	ldrb.w	fp, [r3, #16]
 800a846:	ea1b 0f04 	tst.w	fp, r4
 800a84a:	d109      	bne.n	800a860 <updateAllNodeWeight+0x98>
 800a84c:	f8b3 b012 	ldrh.w	fp, [r3, #18]
 800a850:	4593      	cmp	fp, r2
 800a852:	d105      	bne.n	800a860 <updateAllNodeWeight+0x98>
						maze->RawNode[i][j+1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a854:	f106 0907 	add.w	r9, r6, #7
 800a858:	f8a3 9012 	strh.w	r9, [r3, #18]
						change_flag = true;		//値が更新されたことを示す
 800a85c:	f04f 0901 	mov.w	r9, #1
				if(j > 1)						//範囲チェック.ミスってた
 800a860:	2801      	cmp	r0, #1
 800a862:	d00c      	beq.n	800a87e <updateAllNodeWeight+0xb6>
					if( ((maze->RawNode[i][j-1].existence & mask) == NOWALL) && (maze->RawNode[i][j-1].weight == MAX_WEIGHT) )	//壁がなければ
 800a864:	f893 b000 	ldrb.w	fp, [r3]
 800a868:	ea1b 0f04 	tst.w	fp, r4
 800a86c:	d107      	bne.n	800a87e <updateAllNodeWeight+0xb6>
 800a86e:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 800a872:	4593      	cmp	fp, r2
 800a874:	d103      	bne.n	800a87e <updateAllNodeWeight+0xb6>
						maze->RawNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a876:	3607      	adds	r6, #7
 800a878:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800a87a:	f04f 0901 	mov.w	r9, #1
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800a87e:	2f08      	cmp	r7, #8
 800a880:	d017      	beq.n	800a8b2 <updateAllNodeWeight+0xea>
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))		//壁がなければ
 800a882:	f895 62d8 	ldrb.w	r6, [r5, #728]	; 0x2d8
 800a886:	4226      	tst	r6, r4
 800a888:	d109      	bne.n	800a89e <updateAllNodeWeight+0xd6>
 800a88a:	f8b5 62da 	ldrh.w	r6, [r5, #730]	; 0x2da
 800a88e:	4296      	cmp	r6, r2
 800a890:	d105      	bne.n	800a89e <updateAllNodeWeight+0xd6>
						maze->ColumnNode[i+1][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a892:	895e      	ldrh	r6, [r3, #10]
 800a894:	3605      	adds	r6, #5
 800a896:	f8a5 62da 	strh.w	r6, [r5, #730]	; 0x2da
						change_flag = true;		//値が更新されたことを示す
 800a89a:	f04f 0901 	mov.w	r9, #1
                    if( ((maze->ColumnNode[i+1][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j-1].weight == MAX_WEIGHT)	)		//壁がなければ
 800a89e:	f895 62d0 	ldrb.w	r6, [r5, #720]	; 0x2d0
 800a8a2:	4226      	tst	r6, r4
 800a8a4:	d104      	bne.n	800a8b0 <updateAllNodeWeight+0xe8>
 800a8a6:	f8b5 62d2 	ldrh.w	r6, [r5, #722]	; 0x2d2
 800a8aa:	4296      	cmp	r6, r2
 800a8ac:	f000 8092 	beq.w	800a9d4 <updateAllNodeWeight+0x20c>
				if(i > 0)						//範囲チェック
 800a8b0:	b1df      	cbz	r7, 800a8ea <updateAllNodeWeight+0x122>
					if( ((maze->ColumnNode[i][j].existence & mask) == NOWALL)  && (maze->ColumnNode[i][j].weight == MAX_WEIGHT) )		//壁がなければ
 800a8b2:	f891 62d8 	ldrb.w	r6, [r1, #728]	; 0x2d8
 800a8b6:	4226      	tst	r6, r4
 800a8b8:	d109      	bne.n	800a8ce <updateAllNodeWeight+0x106>
 800a8ba:	f8b1 62da 	ldrh.w	r6, [r1, #730]	; 0x2da
 800a8be:	4296      	cmp	r6, r2
 800a8c0:	d105      	bne.n	800a8ce <updateAllNodeWeight+0x106>
							maze->ColumnNode[i][j].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a8c2:	895e      	ldrh	r6, [r3, #10]
 800a8c4:	3605      	adds	r6, #5
 800a8c6:	f8a1 62da 	strh.w	r6, [r1, #730]	; 0x2da
							change_flag = true;		//値が更新されたことを示す
 800a8ca:	f04f 0901 	mov.w	r9, #1
    				if( ((maze->ColumnNode[i][j-1].existence & mask) == NOWALL) && (maze->ColumnNode[i][j-1].weight == MAX_WEIGHT))		//壁がなければ
 800a8ce:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800a8d2:	4226      	tst	r6, r4
 800a8d4:	d109      	bne.n	800a8ea <updateAllNodeWeight+0x122>
 800a8d6:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a8da:	4296      	cmp	r6, r2
 800a8dc:	d105      	bne.n	800a8ea <updateAllNodeWeight+0x122>
						maze->ColumnNode[i][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a8de:	895e      	ldrh	r6, [r3, #10]
 800a8e0:	3605      	adds	r6, #5
 800a8e2:	f8a1 62d2 	strh.w	r6, [r1, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800a8e6:	f04f 0901 	mov.w	r9, #1
 800a8ea:	3001      	adds	r0, #1
			for(j = 1; j < NUMBER_OF_SQUARES_Y; j++)		//迷路の大きさ分ループ(y座標)
 800a8ec:	2809      	cmp	r0, #9
 800a8ee:	f103 0308 	add.w	r3, r3, #8
 800a8f2:	f101 0108 	add.w	r1, r1, #8
 800a8f6:	f105 0508 	add.w	r5, r5, #8
 800a8fa:	d19d      	bne.n	800a838 <updateAllNodeWeight+0x70>
 800a8fc:	3701      	adds	r7, #1
		for( i = 0; i < NUMBER_OF_SQUARES_X; i++)			//迷路の大きさ分ループ(x座標)
 800a8fe:	2f09      	cmp	r7, #9
 800a900:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800a904:	4641      	mov	r1, r8
 800a906:	d192      	bne.n	800a82e <updateAllNodeWeight+0x66>
 800a908:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800a90c:	464f      	mov	r7, r9
 800a90e:	4671      	mov	r1, lr
 800a910:	f04f 0801 	mov.w	r8, #1
 800a914:	f101 0948 	add.w	r9, r1, #72	; 0x48
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800a918:	464d      	mov	r5, r9
 800a91a:	4653      	mov	r3, sl
 800a91c:	2000      	movs	r0, #0
        //列
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
		{
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
			{
                if(maze->ColumnNode[i][j].weight == MAX_WEIGHT)		//MAXの場合は次へ
 800a91e:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a922:	4296      	cmp	r6, r2
 800a924:	d04f      	beq.n	800a9c6 <updateAllNodeWeight+0x1fe>
					continue;
				}
                // printf("continueはクリア. Column[%d][%d]\r\n",i,j);
				
                //東側ノード
				if(i < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800a926:	f1b8 0f08 	cmp.w	r8, #8
 800a92a:	d00f      	beq.n	800a94c <updateAllNodeWeight+0x184>
				{
                    // printf("列東%d,mask: %d, result: %d\r\n",maze->ColumnNode[i+1][j].existence, mask,((maze->ColumnNode[i+1][j].existence) & mask));
					if( ((maze->ColumnNode[i+1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i+1][j].weight == MAX_WEIGHT))	//壁がなければ(maskの意味はstatic_parametersを参照)
 800a92c:	f895 b2d0 	ldrb.w	fp, [r5, #720]	; 0x2d0
 800a930:	ea1b 0f04 	tst.w	fp, r4
 800a934:	d107      	bne.n	800a946 <updateAllNodeWeight+0x17e>
 800a936:	f8b5 b2d2 	ldrh.w	fp, [r5, #722]	; 0x2d2
 800a93a:	4593      	cmp	fp, r2
 800a93c:	d103      	bne.n	800a946 <updateAllNodeWeight+0x17e>
					{
						maze->ColumnNode[i+1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a93e:	3607      	adds	r6, #7
 800a940:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800a944:	2701      	movs	r7, #1
					}
                }
                //西側ノード
				if(i > 1)						//範囲チェック
 800a946:	f1b8 0f01 	cmp.w	r8, #1
 800a94a:	d00d      	beq.n	800a968 <updateAllNodeWeight+0x1a0>
				{
					if( ((maze->ColumnNode[i-1][j].existence & mask) == NOWALL) && (maze->ColumnNode[i-1][j].weight == MAX_WEIGHT))	//壁がなければ
 800a94c:	f891 6288 	ldrb.w	r6, [r1, #648]	; 0x288
 800a950:	4226      	tst	r6, r4
 800a952:	d109      	bne.n	800a968 <updateAllNodeWeight+0x1a0>
 800a954:	f8b1 628a 	ldrh.w	r6, [r1, #650]	; 0x28a
 800a958:	4296      	cmp	r6, r2
 800a95a:	d105      	bne.n	800a968 <updateAllNodeWeight+0x1a0>
					{
						maze->ColumnNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_STRAIGHT;	//値を代入
 800a95c:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a960:	3607      	adds	r6, #7
 800a962:	f8a1 628a 	strh.w	r6, [r1, #650]	; 0x28a
						change_flag = true;		//値が更新されたことを示す
 800a966:	2701      	movs	r7, #1
					}
				}
                //北側に斜めが2方向
				if(j < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800a968:	2808      	cmp	r0, #8
 800a96a:	d013      	beq.n	800a994 <updateAllNodeWeight+0x1cc>
				{
                    //北東
					if( ((maze->RawNode[i][j+1].existence & mask) == NOWALL) && (maze->RawNode[i][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800a96c:	7a1e      	ldrb	r6, [r3, #8]
 800a96e:	4226      	tst	r6, r4
 800a970:	d107      	bne.n	800a982 <updateAllNodeWeight+0x1ba>
 800a972:	895e      	ldrh	r6, [r3, #10]
 800a974:	4296      	cmp	r6, r2
 800a976:	d104      	bne.n	800a982 <updateAllNodeWeight+0x1ba>
					{
						maze->RawNode[i][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a978:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a97c:	3605      	adds	r6, #5
 800a97e:	815e      	strh	r6, [r3, #10]
						change_flag = true;		//値が更新されたことを示す
 800a980:	2701      	movs	r7, #1
					}
                	
                    //北西
                    if( ((maze->RawNode[i-1][j+1].existence & mask) == NOWALL) && (maze->RawNode[i-1][j+1].weight == MAX_WEIGHT))		//壁がなければ
 800a982:	f813 6c48 	ldrb.w	r6, [r3, #-72]
 800a986:	4226      	tst	r6, r4
 800a988:	d103      	bne.n	800a992 <updateAllNodeWeight+0x1ca>
 800a98a:	f833 6c46 	ldrh.w	r6, [r3, #-70]
 800a98e:	4296      	cmp	r6, r2
 800a990:	d027      	beq.n	800a9e2 <updateAllNodeWeight+0x21a>
						change_flag = true;		//値が更新されたことを示す
					}
				}

                //南側に斜めが2方向
				if(j > 0)						//範囲チェック
 800a992:	b1d0      	cbz	r0, 800a9ca <updateAllNodeWeight+0x202>
				{
                    //南東
					if( ((maze->RawNode[i][j].existence & mask) == NOWALL) && (maze->RawNode[i][j].weight == MAX_WEIGHT)	)		//壁がなければ
 800a994:	781e      	ldrb	r6, [r3, #0]
 800a996:	4226      	tst	r6, r4
 800a998:	d107      	bne.n	800a9aa <updateAllNodeWeight+0x1e2>
 800a99a:	885e      	ldrh	r6, [r3, #2]
 800a99c:	4296      	cmp	r6, r2
 800a99e:	d104      	bne.n	800a9aa <updateAllNodeWeight+0x1e2>
					{
						maze->RawNode[i][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a9a0:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a9a4:	3605      	adds	r6, #5
 800a9a6:	805e      	strh	r6, [r3, #2]
						change_flag = true;		//値が更新されたことを示す
 800a9a8:	2701      	movs	r7, #1
					}
                    //南西
    				if( ((maze->RawNode[i-1][j].existence & mask) == NOWALL) && (maze->RawNode[i-1][j].weight == MAX_WEIGHT))		//壁がなければ
 800a9aa:	f813 6c50 	ldrb.w	r6, [r3, #-80]
 800a9ae:	4226      	tst	r6, r4
 800a9b0:	d109      	bne.n	800a9c6 <updateAllNodeWeight+0x1fe>
 800a9b2:	f833 6c4e 	ldrh.w	r6, [r3, #-78]
 800a9b6:	4296      	cmp	r6, r2
 800a9b8:	d105      	bne.n	800a9c6 <updateAllNodeWeight+0x1fe>
					{
							maze->RawNode[i-1][j].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a9ba:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a9be:	3605      	adds	r6, #5
 800a9c0:	f823 6c4e 	strh.w	r6, [r3, #-78]
							change_flag = true;		//値が更新されたことを示す
 800a9c4:	2701      	movs	r7, #1
			for( j = 0; j < NUMBER_OF_SQUARES_Y; j++)
 800a9c6:	2808      	cmp	r0, #8
 800a9c8:	d012      	beq.n	800a9f0 <updateAllNodeWeight+0x228>
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	3108      	adds	r1, #8
 800a9ce:	3308      	adds	r3, #8
 800a9d0:	3508      	adds	r5, #8
 800a9d2:	e7a4      	b.n	800a91e <updateAllNodeWeight+0x156>
						maze->ColumnNode[i+1][j-1].weight = maze->RawNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a9d4:	895e      	ldrh	r6, [r3, #10]
 800a9d6:	3605      	adds	r6, #5
 800a9d8:	f8a5 62d2 	strh.w	r6, [r5, #722]	; 0x2d2
						change_flag = true;		//値が更新されたことを示す
 800a9dc:	f04f 0901 	mov.w	r9, #1
 800a9e0:	e766      	b.n	800a8b0 <updateAllNodeWeight+0xe8>
						maze->RawNode[i-1][j+1].weight = maze->ColumnNode[i][j].weight + WEIGHT_NANAME;	//値を代入
 800a9e2:	f8b1 62d2 	ldrh.w	r6, [r1, #722]	; 0x2d2
 800a9e6:	3605      	adds	r6, #5
 800a9e8:	f823 6c46 	strh.w	r6, [r3, #-70]
						change_flag = true;		//値が更新されたことを示す
 800a9ec:	2701      	movs	r7, #1
 800a9ee:	e7d0      	b.n	800a992 <updateAllNodeWeight+0x1ca>
 800a9f0:	f108 0801 	add.w	r8, r8, #1
        for(i = 1; i < NUMBER_OF_SQUARES_X; i++)
 800a9f4:	f1b8 0f09 	cmp.w	r8, #9
 800a9f8:	f10a 0a50 	add.w	sl, sl, #80	; 0x50
 800a9fc:	4649      	mov	r1, r9
 800a9fe:	d189      	bne.n	800a914 <updateAllNodeWeight+0x14c>
				}
            }
        }
        //printf("重みの更新\r\n");//一回しか呼ばれていない
        //cnt++;
	}while(change_flag == true);	//全体を作り終わるまで待つ
 800aa00:	2f00      	cmp	r7, #0
 800aa02:	f47f af0e 	bne.w	800a822 <updateAllNodeWeight+0x5a>
//    t = 0;
//	HAL_TIM_Base_Stop_IT(&htim8);
//	printf("%d/20ms, %d, %d\r\n\r\n",timer8, skip_raw, skip_column);
}
 800aa06:	b005      	add	sp, #20
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa0c <getNextNode>:
}

//ノード情報から、行けるノードを比較する
// 比較しながらアドレスを更新してしまうので注意:
node *getNextNode(maze_node *maze, cardinal car, node *now_node, int mask)
{
 800aa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t compare_weight=0;
    compare_weight = now_node->weight;

    _Bool flag=false;
    //printf("マイノードが01のどちらか:%d\r\n",now_node->rc);
    if(now_node->rc == 0)
 800aa10:	f892 c005 	ldrb.w	ip, [r2, #5]
    compare_weight = now_node->weight;
 800aa14:	8857      	ldrh	r7, [r2, #2]
 800aa16:	7991      	ldrb	r1, [r2, #6]
 800aa18:	79d4      	ldrb	r4, [r2, #7]
{
 800aa1a:	b083      	sub	sp, #12
    if(now_node->rc == 0)
 800aa1c:	f1bc 0f00 	cmp.w	ip, #0
 800aa20:	d17f      	bne.n	800ab22 <getNextNode+0x116>
        //北側ノード
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
        {

            //printf("%u\r\n",now_node->pos.y);
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aa22:	008e      	lsls	r6, r1, #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800aa24:	2c07      	cmp	r4, #7
 800aa26:	f104 3eff 	add.w	lr, r4, #4294967295
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aa2a:	9601      	str	r6, [sp, #4]
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800aa2c:	f200 80bd 	bhi.w	800abaa <getNextNode+0x19e>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800aa30:	eb06 0801 	add.w	r8, r6, r1
 800aa34:	f104 0901 	add.w	r9, r4, #1
 800aa38:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 800aa3c:	f810 a038 	ldrb.w	sl, [r0, r8, lsl #3]
 800aa40:	ea1a 0f03 	tst.w	sl, r3
 800aa44:	d115      	bne.n	800aa72 <getNextNode+0x66>
            {
            	static int cnt = 1;
//            				ChangeLED(cnt%7);
            				cnt ++;
 800aa46:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 800acf4 <getNextNode+0x2e8>


                // printf("%d\r\n", maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence);//壁があることになってた..
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800aa4a:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
            				cnt ++;
 800aa4e:	f8da 6000 	ldr.w	r6, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800aa52:	f8b8 8002 	ldrh.w	r8, [r8, #2]
            				cnt ++;
 800aa56:	f106 0b01 	add.w	fp, r6, #1
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800aa5a:	45b8      	cmp	r8, r7
            				cnt ++;
 800aa5c:	f8ca b000 	str.w	fp, [sl]
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800aa60:	d207      	bcs.n	800aa72 <getNextNode+0x66>

#if DEBUG_ON
                    printf("北へ\r\n");
#endif
                    compare_weight = maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight;
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800aa62:	250a      	movs	r5, #10
 800aa64:	fb15 9501 	smlabb	r5, r5, r1, r9
 800aa68:	4647      	mov	r7, r8
 800aa6a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800aa6e:	f04f 0c01 	mov.w	ip, #1
                }
            }
        }
        //南へ側ノード
        if(now_node->pos.y > 1)						//範囲チェック
 800aa72:	2c01      	cmp	r4, #1
 800aa74:	f200 8099 	bhi.w	800abaa <getNextNode+0x19e>
                    flag = true;
                }
            }
        }
        //東へ側に斜めが2方向
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800aa78:	2907      	cmp	r1, #7
 800aa7a:	d82f      	bhi.n	800aadc <getNextNode+0xd0>
        {
            //北東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800aa7c:	1c4e      	adds	r6, r1, #1
 800aa7e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800aa82:	eb06 0804 	add.w	r8, r6, r4
 800aa86:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
 800aa8a:	f898 92d0 	ldrb.w	r9, [r8, #720]	; 0x2d0
 800aa8e:	ea19 0f03 	tst.w	r9, r3
 800aa92:	d10b      	bne.n	800aaac <getNextNode+0xa0>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800aa94:	f8b8 82d2 	ldrh.w	r8, [r8, #722]	; 0x2d2
 800aa98:	45b8      	cmp	r8, r7
 800aa9a:	d207      	bcs.n	800aaac <getNextNode+0xa0>
                {
#if DEBUG_ON
                    printf("北東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800aa9c:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800aaa0:	4435      	add	r5, r6
 800aaa2:	4647      	mov	r7, r8
 800aaa4:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800aaa8:	f04f 0c01 	mov.w	ip, #1
 800aaac:	eb0e 0806 	add.w	r8, lr, r6
 800aab0:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
                }
            }

            //南へ東へ
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800aab4:	f898 92d0 	ldrb.w	r9, [r8, #720]	; 0x2d0
 800aab8:	ea19 0f03 	tst.w	r9, r3
 800aabc:	f040 80e8 	bne.w	800ac90 <getNextNode+0x284>
            {  
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800aac0:	f8b8 82d2 	ldrh.w	r8, [r8, #722]	; 0x2d2
 800aac4:	45b8      	cmp	r8, r7
 800aac6:	f080 80e3 	bcs.w	800ac90 <getNextNode+0x284>
                {
#if DEBUG_ON
                    printf("南東へ\r\n");
#endif
                    compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
 800aaca:	f10e 055a 	add.w	r5, lr, #90	; 0x5a
 800aace:	4435      	add	r5, r6
 800aad0:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                }
            }
        }

        //西へ側に斜めが2方向
        if(now_node->pos.x > 0)						//範囲チェック
 800aad4:	b309      	cbz	r1, 800ab1a <getNextNode+0x10e>
 800aad6:	4647      	mov	r7, r8
                    flag = true;
 800aad8:	f04f 0c01 	mov.w	ip, #1
 800aadc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800aae0:	1866      	adds	r6, r4, r1
 800aae2:	eb01 080e 	add.w	r8, r1, lr
 800aae6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800aaea:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
        {
            //北西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800aaee:	f896 92d0 	ldrb.w	r9, [r6, #720]	; 0x2d0
 800aaf2:	f898 a2d0 	ldrb.w	sl, [r8, #720]	; 0x2d0
 800aaf6:	ea19 0f03 	tst.w	r9, r3
 800aafa:	ea0a 0a03 	and.w	sl, sl, r3
 800aafe:	f000 80da 	beq.w	800acb6 <getNextNode+0x2aa>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
                    flag = true;
                }
            }
            //南へ西へ
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800ab02:	f1ba 0f00 	cmp.w	sl, #0
 800ab06:	d104      	bne.n	800ab12 <getNextNode+0x106>
            {
                //重みを比較して更新
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800ab08:	f8b8 32d2 	ldrh.w	r3, [r8, #722]	; 0x2d2
 800ab0c:	42bb      	cmp	r3, r7
 800ab0e:	f0c0 80e4 	bcc.w	800acda <getNextNode+0x2ce>
 800ab12:	f1bc 0f00 	cmp.w	ip, #0
 800ab16:	bf08      	it	eq
 800ab18:	4615      	moveq	r5, r2
        return now_node;//万が一更新されなかったら、今いるノードが目標ノードなので、停止するはず。
        //停止しなかった。前回の情報がそのまま反映されるだけ
    }
    return now_node; //
        
}
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	b003      	add	sp, #12
 800ab1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ab22:	2907      	cmp	r1, #7
 800ab24:	f101 3eff 	add.w	lr, r1, #4294967295
 800ab28:	d958      	bls.n	800abdc <getNextNode+0x1d0>
    _Bool flag=false;
 800ab2a:	f04f 0800 	mov.w	r8, #0
 800ab2e:	eb0e 0ace 	add.w	sl, lr, lr, lsl #3
 800ab32:	eb0a 0604 	add.w	r6, sl, r4
 800ab36:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
            if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ
 800ab3a:	f896 92d0 	ldrb.w	r9, [r6, #720]	; 0x2d0
 800ab3e:	ea19 0f03 	tst.w	r9, r3
 800ab42:	f000 8093 	beq.w	800ac6c <getNextNode+0x260>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800ab46:	008e      	lsls	r6, r1, #2
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ab48:	2c07      	cmp	r4, #7
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800ab4a:	9601      	str	r6, [sp, #4]
        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ab4c:	d95e      	bls.n	800ac0c <getNextNode+0x200>
 800ab4e:	ea4f 098e 	mov.w	r9, lr, lsl #2
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ab52:	9e01      	ldr	r6, [sp, #4]
 800ab54:	440e      	add	r6, r1
 800ab56:	eb09 0c0e 	add.w	ip, r9, lr
 800ab5a:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800ab5e:	eb04 0c4c 	add.w	ip, r4, ip, lsl #1
 800ab62:	f810 b036 	ldrb.w	fp, [r0, r6, lsl #3]
 800ab66:	f810 a03c 	ldrb.w	sl, [r0, ip, lsl #3]
 800ab6a:	ea1b 0f03 	tst.w	fp, r3
 800ab6e:	ea0a 0a03 	and.w	sl, sl, r3
 800ab72:	f040 8091 	bne.w	800ac98 <getNextNode+0x28c>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800ab76:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800ab7a:	8873      	ldrh	r3, [r6, #2]
 800ab7c:	42bb      	cmp	r3, r7
 800ab7e:	f080 808b 	bcs.w	800ac98 <getNextNode+0x28c>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y]);
 800ab82:	250a      	movs	r5, #10
 800ab84:	fb15 4101 	smlabb	r1, r5, r1, r4
 800ab88:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ab8c:	f1ba 0f00 	cmp.w	sl, #0
 800ab90:	d1c3      	bne.n	800ab1a <getNextNode+0x10e>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800ab92:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800ab96:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d2bd      	bcs.n	800ab1a <getNextNode+0x10e>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y]);
 800ab9e:	44ce      	add	lr, r9
 800aba0:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 800aba4:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 800aba8:	e7b7      	b.n	800ab1a <getNextNode+0x10e>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)	//壁がなければ
 800abaa:	9e01      	ldr	r6, [sp, #4]
 800abac:	440e      	add	r6, r1
 800abae:	eb0e 0646 	add.w	r6, lr, r6, lsl #1
 800abb2:	f810 8036 	ldrb.w	r8, [r0, r6, lsl #3]
 800abb6:	ea18 0f03 	tst.w	r8, r3
 800abba:	f47f af5d 	bne.w	800aa78 <getNextNode+0x6c>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800abbe:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800abc2:	8876      	ldrh	r6, [r6, #2]
 800abc4:	42be      	cmp	r6, r7
 800abc6:	f4bf af57 	bcs.w	800aa78 <getNextNode+0x6c>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
 800abca:	250a      	movs	r5, #10
 800abcc:	fb15 e501 	smlabb	r5, r5, r1, lr
 800abd0:	4637      	mov	r7, r6
 800abd2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800abd6:	f04f 0c01 	mov.w	ip, #1
 800abda:	e74d      	b.n	800aa78 <getNextNode+0x6c>
            if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800abdc:	1c4e      	adds	r6, r1, #1
 800abde:	eb06 09c6 	add.w	r9, r6, r6, lsl #3
 800abe2:	eb04 0609 	add.w	r6, r4, r9
 800abe6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800abea:	f896 82d0 	ldrb.w	r8, [r6, #720]	; 0x2d0
 800abee:	ea18 0803 	ands.w	r8, r8, r3
 800abf2:	d178      	bne.n	800ace6 <getNextNode+0x2da>
                if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800abf4:	f8b6 a2d2 	ldrh.w	sl, [r6, #722]	; 0x2d2
 800abf8:	45ba      	cmp	sl, r7
 800abfa:	d276      	bcs.n	800acea <getNextNode+0x2de>
                    next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y]);
 800abfc:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800ac00:	444d      	add	r5, r9
 800ac02:	4657      	mov	r7, sl
 800ac04:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800ac08:	46e0      	mov	r8, ip
 800ac0a:	e06e      	b.n	800acea <getNextNode+0x2de>
            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800ac0c:	eb06 0901 	add.w	r9, r6, r1
 800ac10:	f104 0a01 	add.w	sl, r4, #1
 800ac14:	eb0a 0949 	add.w	r9, sl, r9, lsl #1
 800ac18:	f810 b039 	ldrb.w	fp, [r0, r9, lsl #3]
 800ac1c:	ea1b 0f03 	tst.w	fp, r3
 800ac20:	d10c      	bne.n	800ac3c <getNextNode+0x230>
                if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800ac22:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
 800ac26:	f8b9 9002 	ldrh.w	r9, [r9, #2]
 800ac2a:	45b9      	cmp	r9, r7
 800ac2c:	d206      	bcs.n	800ac3c <getNextNode+0x230>
                    next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y+1]);
 800ac2e:	250a      	movs	r5, #10
 800ac30:	fb15 a501 	smlabb	r5, r5, r1, sl
 800ac34:	464f      	mov	r7, r9
 800ac36:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800ac3a:	46e0      	mov	r8, ip
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence & mask) == NOWALL)		//壁がなければ
 800ac3c:	ea4f 098e 	mov.w	r9, lr, lsl #2
 800ac40:	eb09 0b0e 	add.w	fp, r9, lr
 800ac44:	eb0a 0a4b 	add.w	sl, sl, fp, lsl #1
 800ac48:	f810 b03a 	ldrb.w	fp, [r0, sl, lsl #3]
 800ac4c:	ea1b 0f03 	tst.w	fp, r3
 800ac50:	d119      	bne.n	800ac86 <getNextNode+0x27a>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800ac52:	eb00 0aca 	add.w	sl, r0, sl, lsl #3
 800ac56:	f8ba b002 	ldrh.w	fp, [sl, #2]
 800ac5a:	45bb      	cmp	fp, r7
 800ac5c:	d213      	bcs.n	800ac86 <getNextNode+0x27a>
                    next_node = &(maze->RawNode[now_node->pos.x-1][now_node->pos.y+1]);
 800ac5e:	4655      	mov	r5, sl
        if(now_node->pos.y > 0)						//範囲チェック
 800ac60:	2c00      	cmp	r4, #0
 800ac62:	f43f af5a 	beq.w	800ab1a <getNextNode+0x10e>
                    flag = true;
 800ac66:	46e0      	mov	r8, ip
        if(now_node->pos.y > 0)						//範囲チェック
 800ac68:	465f      	mov	r7, fp
 800ac6a:	e772      	b.n	800ab52 <getNextNode+0x146>
                if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800ac6c:	f8b6 62d2 	ldrh.w	r6, [r6, #722]	; 0x2d2
 800ac70:	42be      	cmp	r6, r7
 800ac72:	f4bf af68 	bcs.w	800ab46 <getNextNode+0x13a>
                    next_node = &(maze->ColumnNode[now_node->pos.x-1][now_node->pos.y]);
 800ac76:	f104 055a 	add.w	r5, r4, #90	; 0x5a
 800ac7a:	4455      	add	r5, sl
 800ac7c:	4637      	mov	r7, r6
 800ac7e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
                    flag = true;
 800ac82:	46e0      	mov	r8, ip
 800ac84:	e75f      	b.n	800ab46 <getNextNode+0x13a>
        if(now_node->pos.y > 0)						//範囲チェック
 800ac86:	2c00      	cmp	r4, #0
 800ac88:	f47f af63 	bne.w	800ab52 <getNextNode+0x146>
 800ac8c:	46c4      	mov	ip, r8
 800ac8e:	e740      	b.n	800ab12 <getNextNode+0x106>
        if(now_node->pos.x > 0)						//範囲チェック
 800ac90:	2900      	cmp	r1, #0
 800ac92:	f43f af3e 	beq.w	800ab12 <getNextNode+0x106>
 800ac96:	e721      	b.n	800aadc <getNextNode+0xd0>
            if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence & mask) == NOWALL)		//壁がなければ
 800ac98:	f1ba 0f00 	cmp.w	sl, #0
 800ac9c:	d1f6      	bne.n	800ac8c <getNextNode+0x280>
                if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800ac9e:	eb09 030e 	add.w	r3, r9, lr
 800aca2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800aca6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800acaa:	885b      	ldrh	r3, [r3, #2]
 800acac:	42bb      	cmp	r3, r7
 800acae:	f4ff af76 	bcc.w	800ab9e <getNextNode+0x192>
 800acb2:	46c4      	mov	ip, r8
 800acb4:	e72d      	b.n	800ab12 <getNextNode+0x106>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y].weight)
 800acb6:	f8b6 32d2 	ldrh.w	r3, [r6, #722]	; 0x2d2
 800acba:	42bb      	cmp	r3, r7
 800acbc:	f4bf af21 	bcs.w	800ab02 <getNextNode+0xf6>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y]);
 800acc0:	345a      	adds	r4, #90	; 0x5a
 800acc2:	440c      	add	r4, r1
 800acc4:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
            if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence & mask) == NOWALL)		//壁がなければ
 800acc8:	f1ba 0f00 	cmp.w	sl, #0
 800accc:	f47f af25 	bne.w	800ab1a <getNextNode+0x10e>
                if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800acd0:	f8b8 22d2 	ldrh.w	r2, [r8, #722]	; 0x2d2
 800acd4:	429a      	cmp	r2, r3
 800acd6:	f4bf af20 	bcs.w	800ab1a <getNextNode+0x10e>
                    next_node = &(maze->ColumnNode[now_node->pos.x][now_node->pos.y-1]);
 800acda:	f10e 045a 	add.w	r4, lr, #90	; 0x5a
 800acde:	440c      	add	r4, r1
 800ace0:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 800ace4:	e719      	b.n	800ab1a <getNextNode+0x10e>
    _Bool flag=false;
 800ace6:	f04f 0800 	mov.w	r8, #0
        if(now_node->pos.x > 1)						//範囲チェック
 800acea:	2901      	cmp	r1, #1
 800acec:	f67f af2b 	bls.w	800ab46 <getNextNode+0x13a>
 800acf0:	e71d      	b.n	800ab2e <getNextNode+0x122>
 800acf2:	bf00      	nop
 800acf4:	20000000 	.word	0x20000000

0800acf8 <judgeAccelorNot>:
	uint16_t compare_weight=0;
	compare_weight = now_node->weight;

	_Bool flag=false;
	//現ノードから3方向ノードを見て、未知なら即return
	if(now_node->rc == 0)
 800acf8:	7953      	ldrb	r3, [r2, #5]
{
 800acfa:	b4f0      	push	{r4, r5, r6, r7}
	compare_weight = now_node->weight;
 800acfc:	8854      	ldrh	r4, [r2, #2]
	if(now_node->rc == 0)
 800acfe:	bba3      	cbnz	r3, 800ad6a <judgeAccelorNot+0x72>
	{
		switch(car)
 800ad00:	2900      	cmp	r1, #0
 800ad02:	f000 8090 	beq.w	800ae26 <judgeAccelorNot+0x12e>
 800ad06:	2904      	cmp	r1, #4
 800ad08:	d12c      	bne.n	800ad64 <judgeAccelorNot+0x6c>
	            }
	        }
	        break;
		case south:
			//南へ
			if(now_node->pos.y > 1)						//範囲チェック
 800ad0a:	79d1      	ldrb	r1, [r2, #7]
 800ad0c:	7992      	ldrb	r2, [r2, #6]
 800ad0e:	2901      	cmp	r1, #1
 800ad10:	f101 35ff 	add.w	r5, r1, #4294967295
 800ad14:	d90e      	bls.n	800ad34 <judgeAccelorNot+0x3c>
			{
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)	//壁がなければ
 800ad16:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800ad1a:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800ad1e:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800ad22:	2e02      	cmp	r6, #2
 800ad24:	d01e      	beq.n	800ad64 <judgeAccelorNot+0x6c>
				{
					return false;
				}
					//重みを比較して更新
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)
 800ad26:	b92e      	cbnz	r6, 800ad34 <judgeAccelorNot+0x3c>
				{
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y-1].weight)
 800ad28:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ad2c:	8849      	ldrh	r1, [r1, #2]
 800ad2e:	42a1      	cmp	r1, r4
 800ad30:	f0c0 80bc 	bcc.w	800aeac <judgeAccelorNot+0x1b4>
	_Bool flag=false;
 800ad34:	461e      	mov	r6, r3
//						next_node = &(maze->RawNode[now_node->pos.x][now_node->pos.y-1]);
						flag = true;
					}
				}
			}
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ad36:	2a07      	cmp	r2, #7
 800ad38:	f200 8084 	bhi.w	800ae44 <judgeAccelorNot+0x14c>
			{
				//南へ東へ
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800ad3c:	1c51      	adds	r1, r2, #1
 800ad3e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800ad42:	4429      	add	r1, r5
 800ad44:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ad48:	f891 72d0 	ldrb.w	r7, [r1, #720]	; 0x2d0
 800ad4c:	2f02      	cmp	r7, #2
 800ad4e:	d009      	beq.n	800ad64 <judgeAccelorNot+0x6c>
				{
					return false;
				}
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800ad50:	b92f      	cbnz	r7, 800ad5e <judgeAccelorNot+0x66>
				{
					//重みを比較して更新
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight)
 800ad52:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800ad56:	42a1      	cmp	r1, r4
					{
						compare_weight = maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1].weight;
//						next_node = &(maze->ColumnNode[now_node->pos.x+1][now_node->pos.y-1]);
						flag = false;
 800ad58:	bf3c      	itt	cc
 800ad5a:	463e      	movcc	r6, r7
 800ad5c:	460c      	movcc	r4, r1
					}
				}
			}
			if(now_node->pos.x > 0)						//範囲チェック
 800ad5e:	2a00      	cmp	r2, #0
 800ad60:	d170      	bne.n	800ae44 <judgeAccelorNot+0x14c>
 800ad62:	4633      	mov	r3, r6
	}
	return flag; //壁が全部あるときもfalseになっている
	//未知があった時点でreturn false
	//直進かどうかまで見て、直進でなければfalse
	//既知でかつ直進ならtrue
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	bcf0      	pop	{r4, r5, r6, r7}
 800ad68:	4770      	bx	lr
		switch(car)
 800ad6a:	2902      	cmp	r1, #2
 800ad6c:	d03a      	beq.n	800ade4 <judgeAccelorNot+0xec>
 800ad6e:	2906      	cmp	r1, #6
 800ad70:	d155      	bne.n	800ae1e <judgeAccelorNot+0x126>
			if(now_node->pos.x > 1)						//範囲チェック
 800ad72:	7991      	ldrb	r1, [r2, #6]
 800ad74:	79d2      	ldrb	r2, [r2, #7]
 800ad76:	2901      	cmp	r1, #1
 800ad78:	f101 35ff 	add.w	r5, r1, #4294967295
 800ad7c:	d90b      	bls.n	800ad96 <judgeAccelorNot+0x9e>
 800ad7e:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800ad82:	4411      	add	r1, r2
 800ad84:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
				if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) ==UNKNOWN)	//壁がなければ
 800ad88:	f891 62d0 	ldrb.w	r6, [r1, #720]	; 0x2d0
 800ad8c:	2e02      	cmp	r6, #2
 800ad8e:	d046      	beq.n	800ae1e <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ
 800ad90:	2e00      	cmp	r6, #0
 800ad92:	f000 8084 	beq.w	800ae9e <judgeAccelorNot+0x1a6>
	_Bool flag=false;
 800ad96:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ad98:	2a07      	cmp	r2, #7
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800ad9a:	ea4f 0185 	mov.w	r1, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ad9e:	d811      	bhi.n	800adc4 <judgeAccelorNot+0xcc>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800ada0:	194f      	adds	r7, r1, r5
 800ada2:	1c56      	adds	r6, r2, #1
 800ada4:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800ada8:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800adac:	2f02      	cmp	r7, #2
 800adae:	d036      	beq.n	800ae1e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800adb0:	b937      	cbnz	r7, 800adc0 <judgeAccelorNot+0xc8>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y+1].weight)
 800adb2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800adb6:	8876      	ldrh	r6, [r6, #2]
 800adb8:	42a6      	cmp	r6, r4
 800adba:	bf3c      	itt	cc
 800adbc:	4634      	movcc	r4, r6
						flag = false;
 800adbe:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800adc0:	2a00      	cmp	r2, #0
 800adc2:	d0cf      	beq.n	800ad64 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800adc4:	440d      	add	r5, r1
 800adc6:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 800adca:	f810 1032 	ldrb.w	r1, [r0, r2, lsl #3]
 800adce:	2902      	cmp	r1, #2
 800add0:	d025      	beq.n	800ae1e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x-1][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800add2:	2900      	cmp	r1, #0
 800add4:	d1c6      	bne.n	800ad64 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x-1][now_node->pos.y].weight)
 800add6:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800adda:	8842      	ldrh	r2, [r0, #2]
	                    flag = false;
 800addc:	42a2      	cmp	r2, r4
 800adde:	bf38      	it	cc
 800ade0:	2300      	movcc	r3, #0
 800ade2:	e7bf      	b.n	800ad64 <judgeAccelorNot+0x6c>
			if(now_node->pos.x < NUMBER_OF_SQUARES_X-1)					//範囲チェック
 800ade4:	7995      	ldrb	r5, [r2, #6]
 800ade6:	79d1      	ldrb	r1, [r2, #7]
 800ade8:	2d07      	cmp	r5, #7
 800adea:	d80b      	bhi.n	800ae04 <judgeAccelorNot+0x10c>
				if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800adec:	1c6a      	adds	r2, r5, #1
 800adee:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800adf2:	440a      	add	r2, r1
 800adf4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800adf8:	f892 62d0 	ldrb.w	r6, [r2, #720]	; 0x2d0
 800adfc:	2e02      	cmp	r6, #2
 800adfe:	d00e      	beq.n	800ae1e <judgeAccelorNot+0x126>
				else if( (maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].existence ) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ae00:	2e00      	cmp	r6, #0
 800ae02:	d056      	beq.n	800aeb2 <judgeAccelorNot+0x1ba>
	_Bool flag=false;
 800ae04:	2300      	movs	r3, #0
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ae06:	2907      	cmp	r1, #7
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800ae08:	ea4f 0285 	mov.w	r2, r5, lsl #2
			if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ae0c:	d836      	bhi.n	800ae7c <judgeAccelorNot+0x184>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)		//壁がなければ
 800ae0e:	1957      	adds	r7, r2, r5
 800ae10:	1c4e      	adds	r6, r1, #1
 800ae12:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 800ae16:	f810 7036 	ldrb.w	r7, [r0, r6, lsl #3]
 800ae1a:	2f02      	cmp	r7, #2
 800ae1c:	d123      	bne.n	800ae66 <judgeAccelorNot+0x16e>
	                    flag = false;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	bcf0      	pop	{r4, r5, r6, r7}
 800ae24:	4770      	bx	lr
	        if(now_node->pos.y < NUMBER_OF_SQUARES_Y-1)					//範囲チェック
 800ae26:	79d5      	ldrb	r5, [r2, #7]
 800ae28:	7992      	ldrb	r2, [r2, #6]
 800ae2a:	2d07      	cmp	r5, #7
 800ae2c:	d882      	bhi.n	800ad34 <judgeAccelorNot+0x3c>
	            if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == UNKNOWN)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800ae2e:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800ae32:	1c69      	adds	r1, r5, #1
 800ae34:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800ae38:	f810 6031 	ldrb.w	r6, [r0, r1, lsl #3]
 800ae3c:	2e02      	cmp	r6, #2
 800ae3e:	f47f af72 	bne.w	800ad26 <judgeAccelorNot+0x2e>
 800ae42:	e78f      	b.n	800ad64 <judgeAccelorNot+0x6c>
 800ae44:	2109      	movs	r1, #9
 800ae46:	fb11 5202 	smlabb	r2, r1, r2, r5
 800ae4a:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
				if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == UNKNOWN)		//壁がなければ
 800ae4e:	f890 22d0 	ldrb.w	r2, [r0, #720]	; 0x2d0
 800ae52:	2a02      	cmp	r2, #2
 800ae54:	d086      	beq.n	800ad64 <judgeAccelorNot+0x6c>
				else if( (maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].existence ) == NOWALL)		//壁がなければ
 800ae56:	2a00      	cmp	r2, #0
 800ae58:	d183      	bne.n	800ad62 <judgeAccelorNot+0x6a>
					if(compare_weight > maze->ColumnNode[now_node->pos.x][now_node->pos.y-1].weight)
 800ae5a:	f8b0 22d2 	ldrh.w	r2, [r0, #722]	; 0x2d2
 800ae5e:	42a2      	cmp	r2, r4
 800ae60:	bf28      	it	cs
 800ae62:	4633      	movcs	r3, r6
 800ae64:	e77e      	b.n	800ad64 <judgeAccelorNot+0x6c>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y+1].existence ) == NOWALL)		//壁がなければ
 800ae66:	b937      	cbnz	r7, 800ae76 <judgeAccelorNot+0x17e>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y+1].weight)
 800ae68:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800ae6c:	8876      	ldrh	r6, [r6, #2]
 800ae6e:	42a6      	cmp	r6, r4
 800ae70:	bf3c      	itt	cc
 800ae72:	4634      	movcc	r4, r6
						flag = false;
 800ae74:	463b      	movcc	r3, r7
			if(now_node->pos.y > 0)						//範囲チェック
 800ae76:	2900      	cmp	r1, #0
 800ae78:	f43f af74 	beq.w	800ad64 <judgeAccelorNot+0x6c>
				if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == UNKNOWN)		//壁がなければ
 800ae7c:	4415      	add	r5, r2
 800ae7e:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800ae82:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
 800ae86:	2a02      	cmp	r2, #2
 800ae88:	d0c9      	beq.n	800ae1e <judgeAccelorNot+0x126>
				else if( (maze->RawNode[now_node->pos.x][now_node->pos.y].existence ) == NOWALL)		//壁がなければ
 800ae8a:	2a00      	cmp	r2, #0
 800ae8c:	f47f af6a 	bne.w	800ad64 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->RawNode[now_node->pos.x][now_node->pos.y].weight)
 800ae90:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ae94:	884a      	ldrh	r2, [r1, #2]
	                    flag = false;
 800ae96:	42a2      	cmp	r2, r4
 800ae98:	bf38      	it	cc
 800ae9a:	2300      	movcc	r3, #0
 800ae9c:	e762      	b.n	800ad64 <judgeAccelorNot+0x6c>
					if(compare_weight > maze->ColumnNode[now_node->pos.x-1][now_node->pos.y].weight)
 800ae9e:	f8b1 12d2 	ldrh.w	r1, [r1, #722]	; 0x2d2
 800aea2:	42a1      	cmp	r1, r4
 800aea4:	f4bf af77 	bcs.w	800ad96 <judgeAccelorNot+0x9e>
 800aea8:	460c      	mov	r4, r1
 800aeaa:	e775      	b.n	800ad98 <judgeAccelorNot+0xa0>
 800aeac:	460c      	mov	r4, r1
						flag = true;
 800aeae:	2601      	movs	r6, #1
 800aeb0:	e741      	b.n	800ad36 <judgeAccelorNot+0x3e>
					if(compare_weight > maze->ColumnNode[now_node->pos.x+1][now_node->pos.y].weight)
 800aeb2:	f8b2 22d2 	ldrh.w	r2, [r2, #722]	; 0x2d2
 800aeb6:	42a2      	cmp	r2, r4
 800aeb8:	d2a4      	bcs.n	800ae04 <judgeAccelorNot+0x10c>
 800aeba:	4614      	mov	r4, r2
 800aebc:	e7a3      	b.n	800ae06 <judgeAccelorNot+0x10e>
 800aebe:	bf00      	nop

0800aec0 <getNextState>:
//自分の状態から次の状態を得る
state *getNextState(state *now_state, state *next_state, node *next_node)
{
 800aec0:	b4f0      	push	{r4, r5, r6, r7}
    uint8_t now_x = now_state->node->pos.x;
    uint8_t now_y = now_state->node->pos.y;
    uint8_t next_x = next_node->pos.x; 
    uint8_t next_y = next_node->pos.y;
    
    switch(now_state->car%8)
 800aec2:	7883      	ldrb	r3, [r0, #2]
    uint8_t now_x = now_state->node->pos.x;
 800aec4:	6884      	ldr	r4, [r0, #8]
    uint8_t next_x = next_node->pos.x; 
 800aec6:	7996      	ldrb	r6, [r2, #6]
    uint8_t now_x = now_state->node->pos.x;
 800aec8:	79a5      	ldrb	r5, [r4, #6]
    uint8_t next_y = next_node->pos.y;
 800aeca:	79d7      	ldrb	r7, [r2, #7]
    uint8_t now_y = now_state->node->pos.y;
 800aecc:	79e4      	ldrb	r4, [r4, #7]
    switch(now_state->car%8)
 800aece:	f003 0307 	and.w	r3, r3, #7
 800aed2:	2b06      	cmp	r3, #6
 800aed4:	d81e      	bhi.n	800af14 <getNextState+0x54>
 800aed6:	e8df f003 	tbb	[pc, r3]
 800aeda:	1d04      	.short	0x1d04
 800aedc:	1d341d4e 	.word	0x1d341d4e
 800aee0:	20          	.byte	0x20
 800aee1:	00          	.byte	0x00
    {
        case north://行から、列に行くのか行に行くのかで、差分の取り方を変える
            if(next_node->rc == 0)
 800aee2:	7953      	ldrb	r3, [r2, #5]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d059      	beq.n	800af9c <getNextState+0xdc>
            if(next_node->rc == 1)
            {
                //行から列.左右のどちらか判断.あとで後ろも候補にあげる
                //右旋回
                //北向きから北東
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800aee8:	1c6b      	adds	r3, r5, #1
 800aeea:	42b3      	cmp	r3, r6
 800aeec:	f000 80c3 	beq.w	800b076 <getNextState+0x1b6>
                    return next_state;
                }

                //左旋回
                //北向きから北西
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800aef0:	42b5      	cmp	r5, r6
 800aef2:	d10f      	bne.n	800af14 <getNextState+0x54>
 800aef4:	42bc      	cmp	r4, r7
 800aef6:	f000 8119 	beq.w	800b12c <getNextState+0x26c>
 800aefa:	3c01      	subs	r4, #1
                    return next_state;
                }

                //Uターンして右旋回
                //北向きから南西
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800aefc:	42bc      	cmp	r4, r7
 800aefe:	d109      	bne.n	800af14 <getNextState+0x54>
                {
                    next_state->car = west;
 800af00:	2306      	movs	r3, #6
 800af02:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800af04:	7803      	ldrb	r3, [r0, #0]
 800af06:	3b01      	subs	r3, #1
                //Uターンして右旋回
                //西向きから南東
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
                {
                    next_state->car = south;
                    next_state->pos.x = now_state->pos.x + 1;
 800af08:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800af0a:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backright;
 800af0c:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y - 1;
 800af0e:	3b01      	subs	r3, #1
 800af10:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800af12:	70ca      	strb	r2, [r1, #3]
#if DEBUG_ON
    printf("エラー in function 'getNextState'.\r\n");
#endif

    return next_state; //ここまで来てしまったらエラー
}
 800af14:	4608      	mov	r0, r1
 800af16:	bcf0      	pop	{r4, r5, r6, r7}
 800af18:	4770      	bx	lr
            if(next_node->rc == 1)
 800af1a:	7953      	ldrb	r3, [r2, #5]
 800af1c:	1e6a      	subs	r2, r5, #1
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d05b      	beq.n	800afda <getNextState+0x11a>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800af22:	42b2      	cmp	r2, r6
 800af24:	f000 808f 	beq.w	800b046 <getNextState+0x186>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800af28:	3501      	adds	r5, #1
 800af2a:	42ae      	cmp	r6, r5
 800af2c:	d1f2      	bne.n	800af14 <getNextState+0x54>
 800af2e:	42bc      	cmp	r4, r7
 800af30:	d1f0      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = east;
 800af32:	2302      	movs	r3, #2
 800af34:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 2;
 800af36:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = back;
 800af38:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x + 2;
 800af3a:	3302      	adds	r3, #2
 800af3c:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800af3e:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800af40:	e7e8      	b.n	800af14 <getNextState+0x54>
            if(next_node->rc == 0)
 800af42:	7953      	ldrb	r3, [r2, #5]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d039      	beq.n	800afbc <getNextState+0xfc>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800af48:	42b5      	cmp	r5, r6
 800af4a:	f000 80a3 	beq.w	800b094 <getNextState+0x1d4>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800af4e:	3501      	adds	r5, #1
 800af50:	42ae      	cmp	r6, r5
 800af52:	d1df      	bne.n	800af14 <getNextState+0x54>
 800af54:	1e63      	subs	r3, r4, #1
 800af56:	42bb      	cmp	r3, r7
 800af58:	f000 80e0 	beq.w	800b11c <getNextState+0x25c>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800af5c:	42bc      	cmp	r4, r7
 800af5e:	d1d9      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = east;
 800af60:	2302      	movs	r3, #2
 800af62:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800af64:	7803      	ldrb	r3, [r0, #0]
 800af66:	3301      	adds	r3, #1
 800af68:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800af6a:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backright;
 800af6c:	2203      	movs	r2, #3
                    next_state->pos.y = now_state->pos.y + 1;
 800af6e:	3301      	adds	r3, #1
 800af70:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backright;
 800af72:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800af74:	e7ce      	b.n	800af14 <getNextState+0x54>
            if(next_node->rc == 1)
 800af76:	7953      	ldrb	r3, [r2, #5]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d042      	beq.n	800b002 <getNextState+0x142>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800af7c:	1c6b      	adds	r3, r5, #1
 800af7e:	42b3      	cmp	r3, r6
 800af80:	d056      	beq.n	800b030 <getNextState+0x170>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800af82:	3d01      	subs	r5, #1
 800af84:	42ae      	cmp	r6, r5
 800af86:	d1c5      	bne.n	800af14 <getNextState+0x54>
 800af88:	42bc      	cmp	r4, r7
 800af8a:	d1c3      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = west;
 800af8c:	2306      	movs	r3, #6
 800af8e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800af90:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = back;
 800af92:	2204      	movs	r2, #4
                    next_state->pos.x = now_state->pos.x - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800af94:	3b02      	subs	r3, #2
 800af96:	700b      	strb	r3, [r1, #0]
                    next_state->dir = back;
 800af98:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800af9a:	e7bb      	b.n	800af14 <getNextState+0x54>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800af9c:	42b5      	cmp	r5, r6
 800af9e:	d1b9      	bne.n	800af14 <getNextState+0x54>
 800afa0:	1c62      	adds	r2, r4, #1
 800afa2:	42ba      	cmp	r2, r7
 800afa4:	f000 8096 	beq.w	800b0d4 <getNextState+0x214>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800afa8:	3c01      	subs	r4, #1
 800afaa:	42a7      	cmp	r7, r4
 800afac:	d1b2      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = south;
 800afae:	2204      	movs	r2, #4
 800afb0:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800afb2:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = back;
 800afb4:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 2; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800afb6:	3b02      	subs	r3, #2
 800afb8:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800afba:	e7ab      	b.n	800af14 <getNextState+0x54>
                if( __RAW_TO_RAW_SOUTH__(now_x, now_y, next_x, next_y) )
 800afbc:	42b5      	cmp	r5, r6
 800afbe:	d1a9      	bne.n	800af14 <getNextState+0x54>
 800afc0:	1e62      	subs	r2, r4, #1
 800afc2:	42ba      	cmp	r2, r7
 800afc4:	d07f      	beq.n	800b0c6 <getNextState+0x206>
                if( __RAW_TO_RAW_NORTH__(now_x, now_y, next_x, next_y) )
 800afc6:	3401      	adds	r4, #1
 800afc8:	42a7      	cmp	r7, r4
 800afca:	d1a3      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = north;
 800afcc:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 2;
 800afce:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = back;
 800afd0:	2204      	movs	r2, #4
                    next_state->pos.y = now_state->pos.y + 2;
 800afd2:	3302      	adds	r3, #2
 800afd4:	704b      	strb	r3, [r1, #1]
                    next_state->dir = back;
 800afd6:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800afd8:	e79c      	b.n	800af14 <getNextState+0x54>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800afda:	42b2      	cmp	r2, r6
 800afdc:	d065      	beq.n	800b0aa <getNextState+0x1ea>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800afde:	42b5      	cmp	r5, r6
 800afe0:	d198      	bne.n	800af14 <getNextState+0x54>
 800afe2:	42bc      	cmp	r4, r7
 800afe4:	f000 80ad 	beq.w	800b142 <getNextState+0x282>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800afe8:	3401      	adds	r4, #1
 800afea:	42bc      	cmp	r4, r7
 800afec:	d192      	bne.n	800af14 <getNextState+0x54>
                    next_state->car = north;
 800afee:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800aff0:	7803      	ldrb	r3, [r0, #0]
 800aff2:	3301      	adds	r3, #1
 800aff4:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y + 1;
 800aff6:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backleft;
 800aff8:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y + 1;
 800affa:	3301      	adds	r3, #1
 800affc:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800affe:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b000:	e788      	b.n	800af14 <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b002:	42b5      	cmp	r5, r6
 800b004:	d02a      	beq.n	800b05c <getNextState+0x19c>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b006:	3d01      	subs	r5, #1
 800b008:	42b5      	cmp	r5, r6
 800b00a:	d183      	bne.n	800af14 <getNextState+0x54>
 800b00c:	1c62      	adds	r2, r4, #1
 800b00e:	42ba      	cmp	r2, r7
 800b010:	f000 8093 	beq.w	800b13a <getNextState+0x27a>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b014:	42bc      	cmp	r4, r7
 800b016:	f47f af7d 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = south;
 800b01a:	2304      	movs	r3, #4
 800b01c:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b01e:	7803      	ldrb	r3, [r0, #0]
 800b020:	3b01      	subs	r3, #1
 800b022:	700b      	strb	r3, [r1, #0]
                    next_state->pos.y = now_state->pos.y - 1;
 800b024:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = backleft;
 800b026:	2205      	movs	r2, #5
                    next_state->pos.y = now_state->pos.y - 1;
 800b028:	3b01      	subs	r3, #1
 800b02a:	704b      	strb	r3, [r1, #1]
                    next_state->dir = backleft;
 800b02c:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b02e:	e771      	b.n	800af14 <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_EAST__(now_x, now_y, next_x, next_y) )
 800b030:	42bc      	cmp	r4, r7
 800b032:	f47f af6f 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = east;
 800b036:	2302      	movs	r3, #2
 800b038:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b03a:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = front;
 800b03c:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x + 1;
 800b03e:	3301      	adds	r3, #1
 800b040:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b042:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b044:	e766      	b.n	800af14 <getNextState+0x54>
                if( __COLUMN_TO_COLUMN_WEST__(now_x, now_y, next_x, next_y) )
 800b046:	42bc      	cmp	r4, r7
 800b048:	f47f af64 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = west;
 800b04c:	2306      	movs	r3, #6
 800b04e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b050:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = front;
 800b052:	2200      	movs	r2, #0
                    next_state->pos.x = now_state->pos.x - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b054:	3b01      	subs	r3, #1
 800b056:	700b      	strb	r3, [r1, #0]
                    next_state->dir = front;
 800b058:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b05a:	e75b      	b.n	800af14 <getNextState+0x54>
                if( __COLUMN_TO_RAW_SE__(now_x, now_y, next_x, next_y) )
 800b05c:	42bc      	cmp	r4, r7
 800b05e:	d04d      	beq.n	800b0fc <getNextState+0x23c>
                if( __COLUMN_TO_RAW_NE__(now_x, now_y, next_x, next_y) )
 800b060:	3401      	adds	r4, #1
 800b062:	42bc      	cmp	r4, r7
 800b064:	f47f af56 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = north;
 800b068:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b06a:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = left;
 800b06c:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y + 1;
 800b06e:	3301      	adds	r3, #1
 800b070:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b072:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b074:	e74e      	b.n	800af14 <getNextState+0x54>
                if( __RAW_TO_COLUMN_NE__(now_x, now_y, next_x, next_y) )
 800b076:	42bc      	cmp	r4, r7
 800b078:	d032      	beq.n	800b0e0 <getNextState+0x220>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b07a:	42b5      	cmp	r5, r6
 800b07c:	f104 34ff 	add.w	r4, r4, #4294967295
 800b080:	f43f af3c 	beq.w	800aefc <getNextState+0x3c>
                if( __RAW_TO_COLUMN_SE__(now_x, now_y, next_x, next_y) )
 800b084:	42bc      	cmp	r4, r7
 800b086:	f47f af45 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = east;
 800b08a:	2302      	movs	r3, #2
 800b08c:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b08e:	7803      	ldrb	r3, [r0, #0]
 800b090:	3301      	adds	r3, #1
 800b092:	e7c6      	b.n	800b022 <getNextState+0x162>
                if( __RAW_TO_COLUMN_SW__(now_x, now_y, next_x, next_y) )
 800b094:	1e63      	subs	r3, r4, #1
 800b096:	42bb      	cmp	r3, r7
 800b098:	d038      	beq.n	800b10c <getNextState+0x24c>
                if( __RAW_TO_COLUMN_NW__(now_x, now_y, next_x, next_y) )
 800b09a:	42bc      	cmp	r4, r7
 800b09c:	f47f af3a 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = west;
 800b0a0:	2306      	movs	r3, #6
 800b0a2:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b0a4:	7803      	ldrb	r3, [r0, #0]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	e7a4      	b.n	800aff4 <getNextState+0x134>
                if( __COLUMN_TO_RAW_NW__(now_x, now_y, next_x, next_y) )
 800b0aa:	1c62      	adds	r2, r4, #1
 800b0ac:	42ba      	cmp	r2, r7
 800b0ae:	d01e      	beq.n	800b0ee <getNextState+0x22e>
                if( __COLUMN_TO_RAW_SW__(now_x, now_y, next_x, next_y) )
 800b0b0:	42bc      	cmp	r4, r7
 800b0b2:	f47f af2f 	bne.w	800af14 <getNextState+0x54>
                    next_state->car = south;
 800b0b6:	2304      	movs	r3, #4
 800b0b8:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b0ba:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = left;
 800b0bc:	2206      	movs	r2, #6
                    next_state->pos.y = now_state->pos.y - 1;
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	704b      	strb	r3, [r1, #1]
                    next_state->dir = left;
 800b0c2:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b0c4:	e726      	b.n	800af14 <getNextState+0x54>
                    next_state->car = south;
 800b0c6:	2204      	movs	r2, #4
 800b0c8:	708a      	strb	r2, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b0ca:	7842      	ldrb	r2, [r0, #1]
                    next_state->dir = front;
 800b0cc:	70cb      	strb	r3, [r1, #3]
                    next_state->pos.y = now_state->pos.y - 1; //次に壁を更新するタイミングは、この座標に到達したとき。コマンドでここまで進ませる.Uターンは既知区間であることを考慮する
 800b0ce:	1e53      	subs	r3, r2, #1
 800b0d0:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b0d2:	e71f      	b.n	800af14 <getNextState+0x54>
                    next_state->car = north;
 800b0d4:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b0d6:	7842      	ldrb	r2, [r0, #1]
                    next_state->dir = front;
 800b0d8:	70cb      	strb	r3, [r1, #3]
                    next_state->pos.y = now_state->pos.y + 1;
 800b0da:	1c53      	adds	r3, r2, #1
 800b0dc:	704b      	strb	r3, [r1, #1]
                    return next_state;
 800b0de:	e719      	b.n	800af14 <getNextState+0x54>
                    next_state->car = east;
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b0e4:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = right;
 800b0e6:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.x = now_state->pos.x + 1;
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	700b      	strb	r3, [r1, #0]
                    return next_state;
 800b0ec:	e712      	b.n	800af14 <getNextState+0x54>
                    next_state->car = north;
 800b0ee:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y + 1;
 800b0f0:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = right;
 800b0f2:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y + 1;
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b0f8:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b0fa:	e70b      	b.n	800af14 <getNextState+0x54>
                    next_state->car = south;
 800b0fc:	2304      	movs	r3, #4
 800b0fe:	708b      	strb	r3, [r1, #2]
                    next_state->pos.y = now_state->pos.y - 1;
 800b100:	7843      	ldrb	r3, [r0, #1]
                    next_state->dir = right;
 800b102:	2202      	movs	r2, #2
                    next_state->pos.y = now_state->pos.y - 1;
 800b104:	3b01      	subs	r3, #1
 800b106:	704b      	strb	r3, [r1, #1]
                    next_state->dir = right;
 800b108:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b10a:	e703      	b.n	800af14 <getNextState+0x54>
                    next_state->car = west;
 800b10c:	2306      	movs	r3, #6
 800b10e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b110:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = right;
 800b112:	2202      	movs	r2, #2
                    next_state->pos.x = now_state->pos.x - 1;
 800b114:	3b01      	subs	r3, #1
 800b116:	700b      	strb	r3, [r1, #0]
                    next_state->dir = right;
 800b118:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b11a:	e6fb      	b.n	800af14 <getNextState+0x54>
                    next_state->car = east;
 800b11c:	2302      	movs	r3, #2
 800b11e:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b120:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = left;
 800b122:	2206      	movs	r2, #6
                    next_state->pos.x = now_state->pos.x + 1;
 800b124:	3301      	adds	r3, #1
 800b126:	700b      	strb	r3, [r1, #0]
                    next_state->dir = left;
 800b128:	70ca      	strb	r2, [r1, #3]
                    return next_state;
 800b12a:	e6f3      	b.n	800af14 <getNextState+0x54>
                    next_state->car = west;
 800b12c:	2206      	movs	r2, #6
 800b12e:	708a      	strb	r2, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b130:	7803      	ldrb	r3, [r0, #0]
                    next_state->dir = left;
 800b132:	70ca      	strb	r2, [r1, #3]
                    next_state->pos.x = now_state->pos.x - 1;
 800b134:	3b01      	subs	r3, #1
 800b136:	700b      	strb	r3, [r1, #0]
                    return next_state;
 800b138:	e6ec      	b.n	800af14 <getNextState+0x54>
                    next_state->car = north;
 800b13a:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x - 1;
 800b13c:	7803      	ldrb	r3, [r0, #0]
 800b13e:	3b01      	subs	r3, #1
 800b140:	e712      	b.n	800af68 <getNextState+0xa8>
                    next_state->car = south;
 800b142:	2304      	movs	r3, #4
 800b144:	708b      	strb	r3, [r1, #2]
                    next_state->pos.x = now_state->pos.x + 1;
 800b146:	7803      	ldrb	r3, [r0, #0]
 800b148:	3301      	adds	r3, #1
 800b14a:	e6dd      	b.n	800af08 <getNextState+0x48>

0800b14c <initProfile>:
        // log_st[n].wall.west = WALL;
    }
    printf("い\r\n");
}
void initProfile(profile *prof, maze_node *maze)
{
 800b14c:	b430      	push	{r4, r5}
    };
    setWallExistence(&(prof->now.wall), &w_st[0]);
    setWallExistence(&(prof->next.wall), &next[0]);

    prof->now.node = &(maze->RawNode[0][0]);
    prof->next.node = &(maze->RawNode[0][1]);
 800b14e:	f101 0208 	add.w	r2, r1, #8
    pos->y = y;
 800b152:	2301      	movs	r3, #1
    existence->north = state[0];
 800b154:	2554      	movs	r5, #84	; 0x54
 800b156:	244a      	movs	r4, #74	; 0x4a
    prof->now.node = &(maze->RawNode[0][0]);
 800b158:	6101      	str	r1, [r0, #16]
    prof->next.node = &(maze->RawNode[0][1]);
 800b15a:	61c2      	str	r2, [r0, #28]
    pos->x = x;
 800b15c:	2104      	movs	r1, #4
 800b15e:	2205      	movs	r2, #5
    pos->y = y;
 800b160:	7543      	strb	r3, [r0, #21]
    pos->x = x;
 800b162:	2300      	movs	r3, #0
    existence->north = state[0];
 800b164:	7305      	strb	r5, [r0, #12]
 800b166:	7604      	strb	r4, [r0, #24]
    pos->x = x;
 800b168:	7001      	strb	r1, [r0, #0]
    pos->y = y;
 800b16a:	7041      	strb	r1, [r0, #1]
    pos->x = x;
 800b16c:	7082      	strb	r2, [r0, #2]
    pos->y = y;
 800b16e:	70c2      	strb	r2, [r0, #3]
    pos->x = x;
 800b170:	7203      	strb	r3, [r0, #8]
    pos->y = y;
 800b172:	7243      	strb	r3, [r0, #9]
    st->car = car;
 800b174:	7283      	strb	r3, [r0, #10]
    pos->x = x;
 800b176:	7503      	strb	r3, [r0, #20]
    st->car = car;
 800b178:	7583      	strb	r3, [r0, #22]
    // prof->now.node->rc = 0;
    // prof->now.node->pos.x = 0;
    // prof->now.node->pos.y = 0;
}
 800b17a:	bc30      	pop	{r4, r5}
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop

0800b180 <shiftState>:
void shiftState(profile *prof)
{
 800b180:	b430      	push	{r4, r5}
    prof->now.car = prof->next.car;
    prof->now.dir = prof->next.dir;
    prof->now.pos.x = prof->next.pos.x;
 800b182:	7d01      	ldrb	r1, [r0, #20]
    prof->now.car = prof->next.car;
 800b184:	7d85      	ldrb	r5, [r0, #22]
    prof->now.dir = prof->next.dir;
 800b186:	7dc4      	ldrb	r4, [r0, #23]
    prof->now.pos.y = prof->next.pos.y;
 800b188:	7d42      	ldrb	r2, [r0, #21]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b18a:	69c3      	ldr	r3, [r0, #28]
    prof->now.car = prof->next.car;
 800b18c:	7285      	strb	r5, [r0, #10]
    prof->now.dir = prof->next.dir;
 800b18e:	72c4      	strb	r4, [r0, #11]
    prof->now.pos.x = prof->next.pos.x;
 800b190:	7201      	strb	r1, [r0, #8]
    prof->now.pos.y = prof->next.pos.y;
 800b192:	7242      	strb	r2, [r0, #9]
    prof->now.node = prof->next.node;//ポインタ渡し
 800b194:	6103      	str	r3, [r0, #16]
}
 800b196:	bc30      	pop	{r4, r5}
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop

0800b19c <printState>:
void printState(state *st)
{
 800b19c:	b530      	push	{r4, r5, lr}
 800b19e:	4604      	mov	r4, r0
 800b1a0:	b083      	sub	sp, #12
	  node *node;
    printf("    座標    :   %u, %u\r\n", st->pos.x, st->pos.y);
 800b1a2:	7862      	ldrb	r2, [r4, #1]
 800b1a4:	7821      	ldrb	r1, [r4, #0]
 800b1a6:	4812      	ldr	r0, [pc, #72]	; (800b1f0 <printState+0x54>)
 800b1a8:	f007 fb86 	bl	80128b8 <iprintf>
    printf("    方角    :   %d\r\n", st->car);
 800b1ac:	78a1      	ldrb	r1, [r4, #2]
 800b1ae:	4811      	ldr	r0, [pc, #68]	; (800b1f4 <printState+0x58>)
 800b1b0:	f007 fb82 	bl	80128b8 <iprintf>
    printf("    アクション    :   %d\r\n", st->dir);
 800b1b4:	78e1      	ldrb	r1, [r4, #3]
 800b1b6:	4810      	ldr	r0, [pc, #64]	; (800b1f8 <printState+0x5c>)
 800b1b8:	f007 fb7e 	bl	80128b8 <iprintf>
    printf("    壁      :   %u, %u, %u, %u\r\n", st->wall.north, st->wall.east, st->wall.south, st->wall.west);
 800b1bc:	7921      	ldrb	r1, [r4, #4]
 800b1be:	480f      	ldr	r0, [pc, #60]	; (800b1fc <printState+0x60>)
 800b1c0:	098b      	lsrs	r3, r1, #6
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	f3c1 0281 	ubfx	r2, r1, #2, #2
 800b1c8:	f3c1 1301 	ubfx	r3, r1, #4, #2
 800b1cc:	f001 0103 	and.w	r1, r1, #3
 800b1d0:	f007 fb72 	bl	80128b8 <iprintf>

    printf("    ノード      :   行(0) or 列(1) : %d, ノードx : %u, ノードy : %u, 重み : %u, 壁の状態 : %u\r\n", st->node->rc, st->node->pos.x, st->node->pos.y, st->node->weight, st->node->existence);
 800b1d4:	68a4      	ldr	r4, [r4, #8]
 800b1d6:	480a      	ldr	r0, [pc, #40]	; (800b200 <printState+0x64>)
 800b1d8:	7825      	ldrb	r5, [r4, #0]
 800b1da:	79e3      	ldrb	r3, [r4, #7]
 800b1dc:	79a2      	ldrb	r2, [r4, #6]
 800b1de:	7961      	ldrb	r1, [r4, #5]
 800b1e0:	9501      	str	r5, [sp, #4]
 800b1e2:	8864      	ldrh	r4, [r4, #2]
 800b1e4:	9400      	str	r4, [sp, #0]
 800b1e6:	f007 fb67 	bl	80128b8 <iprintf>
}
 800b1ea:	b003      	add	sp, #12
 800b1ec:	bd30      	pop	{r4, r5, pc}
 800b1ee:	bf00      	nop
 800b1f0:	0801636c 	.word	0x0801636c
 800b1f4:	08016388 	.word	0x08016388
 800b1f8:	080163a0 	.word	0x080163a0
 800b1fc:	080163c0 	.word	0x080163c0
 800b200:	080163e4 	.word	0x080163e4

0800b204 <InitExplore>:

	//ハード処理

}
void InitExplore()
{
 800b204:	b538      	push	{r3, r4, r5, lr}
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800b206:	2100      	movs	r1, #0
 800b208:	2004      	movs	r0, #4
 800b20a:	f002 fee7 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b20e:	2100      	movs	r1, #0
 800b210:	2005      	movs	r0, #5
 800b212:	f002 fee3 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b216:	2100      	movs	r1, #0
 800b218:	2002      	movs	r0, #2
 800b21a:	f002 fedf 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b21e:	2100      	movs	r1, #0
 800b220:	2003      	movs	r0, #3
 800b222:	f002 fedb 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b226:	2100      	movs	r1, #0
 800b228:	2001      	movs	r0, #1
 800b22a:	f002 fed7 	bl	800dfdc <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800b22e:	2100      	movs	r1, #0
 800b230:	4608      	mov	r0, r1
 800b232:	f002 fed3 	bl	800dfdc <PIDChangeFlag>
//									{
//										printf("adc2[1] : %lu\r\n", adc2[1]);
//
//									}
//					Signal( 2 );
	Load_Gain();
 800b236:	f002 fc5d 	bl	800daf4 <Load_Gain>
//							  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
//							  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
//							  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);

	uint8_t imu_check;
	imu_check = IMU_init();
 800b23a:	f002 fa0f 	bl	800d65c <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b23e:	4c33      	ldr	r4, [pc, #204]	; (800b30c <InitExplore+0x108>)

#endif

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
	Acceleration = 0;
 800b240:	4d33      	ldr	r5, [pc, #204]	; (800b310 <InitExplore+0x10c>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b242:	4601      	mov	r1, r0
 800b244:	4620      	mov	r0, r4
 800b246:	f007 fb37 	bl	80128b8 <iprintf>
	imu_check =IMU_init();
 800b24a:	f002 fa07 	bl	800d65c <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b24e:	4601      	mov	r1, r0
 800b250:	4620      	mov	r0, r4
 800b252:	f007 fb31 	bl	80128b8 <iprintf>
	HAL_Delay(100);
 800b256:	2064      	movs	r0, #100	; 0x64
 800b258:	f003 f876 	bl	800e348 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800b25c:	2138      	movs	r1, #56	; 0x38
 800b25e:	2037      	movs	r0, #55	; 0x37
 800b260:	f002 f8dc 	bl	800d41c <ReadIMU>
 800b264:	4b2b      	ldr	r3, [pc, #172]	; (800b314 <InitExplore+0x110>)
	TargetVelocity[BODY] = 0;
 800b266:	4c2c      	ldr	r4, [pc, #176]	; (800b318 <InitExplore+0x114>)
	ZGyro = ReadIMU(0x37, 0x38);
 800b268:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b26c:	6818      	ldr	r0, [r3, #0]
 800b26e:	f7fd f8a3 	bl	80083b8 <__aeabi_f2d>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4829      	ldr	r0, [pc, #164]	; (800b31c <InitExplore+0x118>)
 800b278:	f007 fb1e 	bl	80128b8 <iprintf>
	Motor_PWM_Start();
 800b27c:	f002 fade 	bl	800d83c <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b280:	f002 fa56 	bl	800d730 <EncoderStart>
	EmitterON();
 800b284:	f002 fa64 	bl	800d750 <EmitterON>
	ADCStart();
 800b288:	f001 ff96 	bl	800d1b8 <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b28c:	f247 512f 	movw	r1, #29999	; 0x752f
 800b290:	4823      	ldr	r0, [pc, #140]	; (800b320 <InitExplore+0x11c>)
 800b292:	f002 fb5f 	bl	800d954 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b296:	f247 512f 	movw	r1, #29999	; 0x752f
 800b29a:	4822      	ldr	r0, [pc, #136]	; (800b324 <InitExplore+0x120>)
 800b29c:	f002 fb5a 	bl	800d954 <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b2a0:	4821      	ldr	r0, [pc, #132]	; (800b328 <InitExplore+0x124>)
 800b2a2:	f004 fe29 	bl	800fef8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b2a6:	4821      	ldr	r0, [pc, #132]	; (800b32c <InitExplore+0x128>)
 800b2a8:	f004 fe26 	bl	800fef8 <HAL_TIM_Base_Start_IT>
	TargetAngularV = 0;
 800b2ac:	4920      	ldr	r1, [pc, #128]	; (800b330 <InitExplore+0x12c>)
	AngularAcceleration = 0;
	TotalPulse[LEFT] = 0;
 800b2ae:	4a21      	ldr	r2, [pc, #132]	; (800b334 <InitExplore+0x130>)
	AngularAcceleration = 0;
 800b2b0:	4821      	ldr	r0, [pc, #132]	; (800b338 <InitExplore+0x134>)
	TargetVelocity[BODY] = 0;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60a3      	str	r3, [r4, #8]
	TargetAngularV = 0;
 800b2b6:	600b      	str	r3, [r1, #0]
	TotalPulse[LEFT] = 0;
 800b2b8:	2400      	movs	r4, #0
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
#else


	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b2ba:	4920      	ldr	r1, [pc, #128]	; (800b33c <InitExplore+0x138>)
	Acceleration = 0;
 800b2bc:	602b      	str	r3, [r5, #0]
	AngularAcceleration = 0;
 800b2be:	6003      	str	r3, [r0, #0]
	TotalPulse[LEFT] = 0;
 800b2c0:	6014      	str	r4, [r2, #0]
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b2c2:	4b1f      	ldr	r3, [pc, #124]	; (800b340 <InitExplore+0x13c>)
	TotalPulse[RIGHT] = 0;
 800b2c4:	6054      	str	r4, [r2, #4]
	TotalPulse[BODY] = 0;
 800b2c6:	6094      	str	r4, [r2, #8]
	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800b2c8:	6888      	ldr	r0, [r1, #8]
 800b2ca:	6098      	str	r0, [r3, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800b2cc:	6849      	ldr	r1, [r1, #4]
 800b2ce:	6059      	str	r1, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b2d0:	edd3 7a02 	vldr	s15, [r3, #8]
 800b2d4:	ed93 7a01 	vldr	s14, [r3, #4]
 800b2d8:	4a1a      	ldr	r2, [pc, #104]	; (800b344 <InitExplore+0x140>)
 800b2da:	ee77 7ac7 	vsub.f32	s15, s15, s14

#endif
	PIDReset(L_VELO_PID);
 800b2de:	2004      	movs	r0, #4
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b2e0:	edc2 7a00 	vstr	s15, [r2]
	PIDReset(L_VELO_PID);
 800b2e4:	f002 fe82 	bl	800dfec <PIDReset>
	PIDReset(R_VELO_PID);
 800b2e8:	2005      	movs	r0, #5
 800b2ea:	f002 fe7f 	bl	800dfec <PIDReset>

	PIDReset(A_VELO_PID);
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f002 fe7c 	bl	800dfec <PIDReset>
	PIDReset(L_WALL_PID);
 800b2f4:	2002      	movs	r0, #2
 800b2f6:	f002 fe79 	bl	800dfec <PIDReset>
	PIDReset(R_WALL_PID);
 800b2fa:	2003      	movs	r0, #3
 800b2fc:	f002 fe76 	bl	800dfec <PIDReset>
	PIDReset(D_WALL_PID);
 800b300:	2001      	movs	r0, #1

#endif
}
 800b302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800b306:	f002 be71 	b.w	800dfec <PIDReset>
 800b30a:	bf00      	nop
 800b30c:	08016510 	.word	0x08016510
 800b310:	20007f30 	.word	0x20007f30
 800b314:	200097e4 	.word	0x200097e4
 800b318:	2000a188 	.word	0x2000a188
 800b31c:	0801652c 	.word	0x0801652c
 800b320:	40000424 	.word	0x40000424
 800b324:	40000824 	.word	0x40000824
 800b328:	2000a674 	.word	0x2000a674
 800b32c:	2000a42c 	.word	0x2000a42c
 800b330:	2000a198 	.word	0x2000a198
 800b334:	2000a1b8 	.word	0x2000a1b8
 800b338:	20007f38 	.word	0x20007f38
 800b33c:	2000a1f8 	.word	0x2000a1f8
 800b340:	2000a2b8 	.word	0x2000a2b8
 800b344:	2000a1ac 	.word	0x2000a1ac

0800b348 <InitFastest>:

void InitFastest()
{
 800b348:	b538      	push	{r3, r4, r5, lr}
	Motor_PWM_Start();
 800b34a:	f002 fa77 	bl	800d83c <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800b34e:	f002 f9ef 	bl	800d730 <EncoderStart>
	EmitterON();
 800b352:	f002 f9fd 	bl	800d750 <EmitterON>
	ADCStart();
 800b356:	f001 ff2f 	bl	800d1b8 <ADCStart>

	uint8_t imu_check;
	imu_check = IMU_init();
 800b35a:	f002 f97f 	bl	800d65c <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b35e:	4c3d      	ldr	r4, [pc, #244]	; (800b454 <InitFastest+0x10c>)

	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
	TargetAngularV = 0;
 800b360:	4d3d      	ldr	r5, [pc, #244]	; (800b458 <InitFastest+0x110>)
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b362:	4601      	mov	r1, r0
 800b364:	4620      	mov	r0, r4
 800b366:	f007 faa7 	bl	80128b8 <iprintf>
	imu_check =IMU_init();
 800b36a:	f002 f977 	bl	800d65c <IMU_init>
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800b36e:	4601      	mov	r1, r0
 800b370:	4620      	mov	r0, r4
 800b372:	f007 faa1 	bl	80128b8 <iprintf>
	HAL_Delay(100);
 800b376:	2064      	movs	r0, #100	; 0x64
 800b378:	f002 ffe6 	bl	800e348 <HAL_Delay>
	ZGyro = ReadIMU(0x37, 0x38);
 800b37c:	2138      	movs	r1, #56	; 0x38
 800b37e:	2037      	movs	r0, #55	; 0x37
 800b380:	f002 f84c 	bl	800d41c <ReadIMU>
 800b384:	4b35      	ldr	r3, [pc, #212]	; (800b45c <InitFastest+0x114>)
	TargetVelocity[BODY] = 0;
 800b386:	4c36      	ldr	r4, [pc, #216]	; (800b460 <InitFastest+0x118>)
	ZGyro = ReadIMU(0x37, 0x38);
 800b388:	ed83 0a00 	vstr	s0, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800b38c:	6818      	ldr	r0, [r3, #0]
 800b38e:	f7fd f813 	bl	80083b8 <__aeabi_f2d>
 800b392:	4602      	mov	r2, r0
 800b394:	460b      	mov	r3, r1
 800b396:	4833      	ldr	r0, [pc, #204]	; (800b464 <InitFastest+0x11c>)
 800b398:	f007 fa8e 	bl	80128b8 <iprintf>
	PIDChangeFlag(L_VELO_PID, 0);
 800b39c:	2100      	movs	r1, #0
 800b39e:	2004      	movs	r0, #4
 800b3a0:	f002 fe1c 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	2005      	movs	r0, #5
 800b3a8:	f002 fe18 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	2002      	movs	r0, #2
 800b3b0:	f002 fe14 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	2003      	movs	r0, #3
 800b3b8:	f002 fe10 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b3bc:	2100      	movs	r1, #0
 800b3be:	2001      	movs	r0, #1
 800b3c0:	f002 fe0c 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	4608      	mov	r0, r1
 800b3c8:	f002 fe08 	bl	800dfdc <PIDChangeFlag>
	Load_Gain();
 800b3cc:	f002 fb92 	bl	800daf4 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800b3d0:	f247 512f 	movw	r1, #29999	; 0x752f
 800b3d4:	4824      	ldr	r0, [pc, #144]	; (800b468 <InitFastest+0x120>)
 800b3d6:	f002 fabd 	bl	800d954 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800b3da:	f247 512f 	movw	r1, #29999	; 0x752f
 800b3de:	4823      	ldr	r0, [pc, #140]	; (800b46c <InitFastest+0x124>)
 800b3e0:	f002 fab8 	bl	800d954 <InitPulse>
	HAL_TIM_Base_Start_IT(&htim1);
 800b3e4:	4822      	ldr	r0, [pc, #136]	; (800b470 <InitFastest+0x128>)
 800b3e6:	f004 fd87 	bl	800fef8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800b3ea:	4822      	ldr	r0, [pc, #136]	; (800b474 <InitFastest+0x12c>)
 800b3ec:	f004 fd84 	bl	800fef8 <HAL_TIM_Base_Start_IT>
	TargetVelocity[BODY] = 0;
 800b3f0:	2300      	movs	r3, #0
	Acceleration = 0;
	AngularAcceleration = 0;
	TotalPulse[LEFT] = 0;
 800b3f2:	4a21      	ldr	r2, [pc, #132]	; (800b478 <InitFastest+0x130>)
	Acceleration = 0;
 800b3f4:	4821      	ldr	r0, [pc, #132]	; (800b47c <InitFastest+0x134>)
	AngularAcceleration = 0;
 800b3f6:	4922      	ldr	r1, [pc, #136]	; (800b480 <InitFastest+0x138>)
	TargetVelocity[BODY] = 0;
 800b3f8:	60a3      	str	r3, [r4, #8]
	TotalPulse[LEFT] = 0;
 800b3fa:	2400      	movs	r4, #0
	TargetAngularV = 0;
 800b3fc:	602b      	str	r3, [r5, #0]
	Acceleration = 0;
 800b3fe:	6003      	str	r3, [r0, #0]
	AngularAcceleration = 0;
 800b400:	600b      	str	r3, [r1, #0]
	TotalPulse[LEFT] = 0;
 800b402:	6014      	str	r4, [r2, #0]
	TotalPulse[RIGHT] = 0;
 800b404:	6054      	str	r4, [r2, #4]
	TotalPulse[BODY] = 0;
 800b406:	6094      	str	r4, [r2, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800b408:	f002 f96c 	bl	800d6e4 <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800b40c:	4a1d      	ldr	r2, [pc, #116]	; (800b484 <InitFastest+0x13c>)
 800b40e:	4b1e      	ldr	r3, [pc, #120]	; (800b488 <InitFastest+0x140>)
 800b410:	6890      	ldr	r0, [r2, #8]
 800b412:	6098      	str	r0, [r3, #8]
	TargetPhoto[SR] = Photo[SR];
 800b414:	6852      	ldr	r2, [r2, #4]
 800b416:	605a      	str	r2, [r3, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b418:	edd3 7a02 	vldr	s15, [r3, #8]
 800b41c:	ed93 7a01 	vldr	s14, [r3, #4]
 800b420:	491a      	ldr	r1, [pc, #104]	; (800b48c <InitFastest+0x144>)
 800b422:	ee77 7ac7 	vsub.f32	s15, s15, s14

	PIDReset(L_VELO_PID);
 800b426:	2004      	movs	r0, #4
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800b428:	edc1 7a00 	vstr	s15, [r1]
	PIDReset(L_VELO_PID);
 800b42c:	f002 fdde 	bl	800dfec <PIDReset>
	PIDReset(R_VELO_PID);
 800b430:	2005      	movs	r0, #5
 800b432:	f002 fddb 	bl	800dfec <PIDReset>
	PIDReset(A_VELO_PID);
 800b436:	4620      	mov	r0, r4
 800b438:	f002 fdd8 	bl	800dfec <PIDReset>
	PIDReset(L_WALL_PID);
 800b43c:	2002      	movs	r0, #2
 800b43e:	f002 fdd5 	bl	800dfec <PIDReset>
	PIDReset(R_WALL_PID);
 800b442:	2003      	movs	r0, #3
 800b444:	f002 fdd2 	bl	800dfec <PIDReset>
	PIDReset(D_WALL_PID);
 800b448:	2001      	movs	r0, #1


}
 800b44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PIDReset(D_WALL_PID);
 800b44e:	f002 bdcd 	b.w	800dfec <PIDReset>
 800b452:	bf00      	nop
 800b454:	08016510 	.word	0x08016510
 800b458:	2000a198 	.word	0x2000a198
 800b45c:	200097e4 	.word	0x200097e4
 800b460:	2000a188 	.word	0x2000a188
 800b464:	0801652c 	.word	0x0801652c
 800b468:	40000424 	.word	0x40000424
 800b46c:	40000824 	.word	0x40000824
 800b470:	2000a674 	.word	0x2000a674
 800b474:	2000a42c 	.word	0x2000a42c
 800b478:	2000a1b8 	.word	0x2000a1b8
 800b47c:	20007f30 	.word	0x20007f30
 800b480:	20007f38 	.word	0x20007f38
 800b484:	2000a1f8 	.word	0x2000a1f8
 800b488:	2000a2b8 	.word	0x2000a2b8
 800b48c:	2000a1ac 	.word	0x2000a1ac

0800b490 <Debug>:
void Debug()
{
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if 1
	InitExplore();
	InitPosition();
	wall_init();

	TotalPulse[RIGHT] = 0;
 800b492:	4d2a      	ldr	r5, [pc, #168]	; (800b53c <Debug+0xac>)
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	PIDChangeFlag(A_VELO_PID, 1);
	ExploreVelocity=0;
 800b494:	4e2a      	ldr	r6, [pc, #168]	; (800b540 <Debug+0xb0>)
	TotalPulse[RIGHT] = 0;
 800b496:	2400      	movs	r4, #0
	InitExplore();
 800b498:	f7ff feb4 	bl	800b204 <InitExplore>
	InitPosition();
 800b49c:	f7fd fcac 	bl	8008df8 <InitPosition>
	wall_init();
 800b4a0:	f7fe fe60 	bl	800a164 <wall_init>
	PIDChangeFlag(L_VELO_PID, 1);
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b4a8:	606c      	str	r4, [r5, #4]
	TotalPulse[LEFT] = 0;
 800b4aa:	602c      	str	r4, [r5, #0]
	TotalPulse[BODY] = 0;
 800b4ac:	60ac      	str	r4, [r5, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b4ae:	f002 fd95 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b4b2:	2101      	movs	r1, #1
 800b4b4:	2005      	movs	r0, #5
 800b4b6:	f002 fd91 	bl	800dfdc <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b4ba:	68a9      	ldr	r1, [r5, #8]
 800b4bc:	4821      	ldr	r0, [pc, #132]	; (800b544 <Debug+0xb4>)
 800b4be:	682a      	ldr	r2, [r5, #0]
 800b4c0:	686b      	ldr	r3, [r5, #4]
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
	Pos.Dir = front;
 800b4c2:	4d21      	ldr	r5, [pc, #132]	; (800b548 <Debug+0xb8>)
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b4c4:	f007 f9f8 	bl	80128b8 <iprintf>
	PIDChangeFlag(D_WALL_PID, 0);
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	2001      	movs	r0, #1
 800b4cc:	f002 fd86 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	2002      	movs	r0, #2
 800b4d4:	f002 fd82 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b4d8:	4621      	mov	r1, r4
 800b4da:	2003      	movs	r0, #3
 800b4dc:	f002 fd7e 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f002 fd7a 	bl	800dfdc <PIDChangeFlag>
	ExploreVelocity=0;
 800b4e8:	2700      	movs	r7, #0
	ChangeLED(3);
 800b4ea:	2003      	movs	r0, #3
	ExploreVelocity=0;
 800b4ec:	6037      	str	r7, [r6, #0]
	ChangeLED(3);
 800b4ee:	f002 f94b 	bl	800d788 <ChangeLED>
	ExploreVelocity = 135;
 800b4f2:	eddf 0a16 	vldr	s1, [pc, #88]	; 800b54c <Debug+0xbc>
	IT_mode = EXPLORE;
 800b4f6:	4b16      	ldr	r3, [pc, #88]	; (800b550 <Debug+0xc0>)
	Accel(61.75,ExploreVelocity);
 800b4f8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800b554 <Debug+0xc4>
	ExploreVelocity = 135;
 800b4fc:	edc6 0a00 	vstr	s1, [r6]
	IT_mode = EXPLORE;
 800b500:	2206      	movs	r2, #6
 800b502:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800b504:	712c      	strb	r4, [r5, #4]
	Accel(61.75,ExploreVelocity);
 800b506:	f7fe f86f 	bl	80095e8 <Accel>
	for(int i=0; i < 1; i++)
	{
		Pos.Dir = front;
		GoStraight(90, ExploreVelocity, AddVelocity);
 800b50a:	4b13      	ldr	r3, [pc, #76]	; (800b558 <Debug+0xc8>)
 800b50c:	edd6 0a00 	vldr	s1, [r6]
 800b510:	edd3 7a00 	vldr	s15, [r3]
 800b514:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800b55c <Debug+0xcc>
		Pos.Dir = front;
 800b518:	712c      	strb	r4, [r5, #4]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800b51a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b51e:	ee17 0a90 	vmov	r0, s15
 800b522:	f7fe f9b5 	bl	8009890 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800b526:	f7fd fe47 	bl	80091b8 <SlalomRight>

	}
	Pos.Dir = front;
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800b52a:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <Debug+0xd0>)
	Pos.Dir = front;
 800b52c:	712c      	strb	r4, [r5, #4]
	TargetVelocity[BODY] = 0;
 800b52e:	609f      	str	r7, [r3, #8]
	HAL_Delay(1000);
 800b530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800b534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_Delay(1000);
 800b538:	f002 bf06 	b.w	800e348 <HAL_Delay>
 800b53c:	2000a1b8 	.word	0x2000a1b8
 800b540:	2000a2ac 	.word	0x2000a2ac
 800b544:	08016458 	.word	0x08016458
 800b548:	20000004 	.word	0x20000004
 800b54c:	43070000 	.word	0x43070000
 800b550:	2000a174 	.word	0x2000a174
 800b554:	42770000 	.word	0x42770000
 800b558:	2000a194 	.word	0x2000a194
 800b55c:	42b40000 	.word	0x42b40000
 800b560:	2000a188 	.word	0x2000a188

0800b564 <ParameterSetting>:
void ParameterSetting()
{
 800b564:	b508      	push	{r3, lr}
	Load_Gain();
 800b566:	f002 fac5 	bl	800daf4 <Load_Gain>
	Change_Gain();

}
 800b56a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Change_Gain();
 800b56e:	f002 bb9b 	b.w	800dca8 <Change_Gain>
 800b572:	bf00      	nop

0800b574 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800b574:	b508      	push	{r3, lr}
	IT_mode = EXPLORE;
 800b576:	4b16      	ldr	r3, [pc, #88]	; (800b5d0 <GainTestRWall+0x5c>)
 800b578:	2206      	movs	r2, #6
 800b57a:	601a      	str	r2, [r3, #0]
	InitExplore();
 800b57c:	f7ff fe42 	bl	800b204 <InitExplore>
	InitPosition();
 800b580:	f7fd fc3a 	bl	8008df8 <InitPosition>
	wall_init();
 800b584:	f7fe fdee 	bl	800a164 <wall_init>
	TotalPulse[RIGHT] = 0;
 800b588:	4b12      	ldr	r3, [pc, #72]	; (800b5d4 <GainTestRWall+0x60>)
 800b58a:	2500      	movs	r5, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800b58c:	2101      	movs	r1, #1
 800b58e:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b590:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b592:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800b594:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b596:	f002 fd21 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b59a:	2101      	movs	r1, #1
 800b59c:	2005      	movs	r0, #5
 800b59e:	f002 fd1d 	bl	800dfdc <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	2001      	movs	r0, #1
 800b5a6:	f002 fd19 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	2002      	movs	r0, #2
 800b5ae:	f002 fd15 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800b5b2:	2101      	movs	r1, #1
 800b5b4:	2003      	movs	r0, #3
 800b5b6:	f002 fd11 	bl	800dfdc <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800b5ba:	4b07      	ldr	r3, [pc, #28]	; (800b5d8 <GainTestRWall+0x64>)
 800b5bc:	2400      	movs	r4, #0
	ChangeLED(1);
 800b5be:	2001      	movs	r0, #1
	ExploreVelocity=0;
 800b5c0:	601c      	str	r4, [r3, #0]
	ChangeLED(1);
 800b5c2:	f002 f8e1 	bl	800d788 <ChangeLED>
 800b5c6:	4a05      	ldr	r2, [pc, #20]	; (800b5dc <GainTestRWall+0x68>)
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800b5c8:	4623      	mov	r3, r4
 800b5ca:	6093      	str	r3, [r2, #8]
 800b5cc:	e7fd      	b.n	800b5ca <GainTestRWall+0x56>
 800b5ce:	bf00      	nop
 800b5d0:	2000a174 	.word	0x2000a174
 800b5d4:	2000a1b8 	.word	0x2000a1b8
 800b5d8:	2000a2ac 	.word	0x2000a2ac
 800b5dc:	2000a188 	.word	0x2000a188

0800b5e0 <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800b5e0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	IT_mode = EXPLORE;
 800b5e4:	4b28      	ldr	r3, [pc, #160]	; (800b688 <GainTestDWall+0xa8>)
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
	PIDChangeFlag(L_WALL_PID, 0);
	PIDChangeFlag(R_WALL_PID, 0);
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800b5e6:	ed9f 8a29 	vldr	s16, [pc, #164]	; 800b68c <GainTestDWall+0xac>
 800b5ea:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800b69c <GainTestDWall+0xbc>
 800b5ee:	4c28      	ldr	r4, [pc, #160]	; (800b690 <GainTestDWall+0xb0>)
	ChangeLED(2);
	while(1)
	{
		TargetVelocity[BODY] = 0;
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800b5f0:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b6a0 <GainTestDWall+0xc0>
	IT_mode = EXPLORE;
 800b5f4:	2206      	movs	r2, #6
{
 800b5f6:	b087      	sub	sp, #28
	IT_mode = EXPLORE;
 800b5f8:	601a      	str	r2, [r3, #0]
	InitExplore();
 800b5fa:	f7ff fe03 	bl	800b204 <InitExplore>
	InitPosition();
 800b5fe:	f7fd fbfb 	bl	8008df8 <InitPosition>
	wall_init();
 800b602:	f7fe fdaf 	bl	800a164 <wall_init>
	TotalPulse[RIGHT] = 0;
 800b606:	4b23      	ldr	r3, [pc, #140]	; (800b694 <GainTestDWall+0xb4>)
 800b608:	2500      	movs	r5, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800b60a:	2101      	movs	r1, #1
 800b60c:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b60e:	605d      	str	r5, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b610:	601d      	str	r5, [r3, #0]
	TotalPulse[BODY] = 0;
 800b612:	609d      	str	r5, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b614:	f002 fce2 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b618:	2101      	movs	r1, #1
 800b61a:	2005      	movs	r0, #5
 800b61c:	f002 fcde 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 1);
 800b620:	2101      	movs	r1, #1
 800b622:	4608      	mov	r0, r1
 800b624:	f002 fcda 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b628:	4629      	mov	r1, r5
 800b62a:	2002      	movs	r0, #2
 800b62c:	f002 fcd6 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b630:	2003      	movs	r0, #3
 800b632:	4629      	mov	r1, r5
 800b634:	f002 fcd2 	bl	800dfdc <PIDChangeFlag>
	ExploreVelocity=0;
 800b638:	4b17      	ldr	r3, [pc, #92]	; (800b698 <GainTestDWall+0xb8>)
	ChangeLED(2);
 800b63a:	2002      	movs	r0, #2
	ExploreVelocity=0;
 800b63c:	ed83 8a00 	vstr	s16, [r3]
	ChangeLED(2);
 800b640:	f002 f8a2 	bl	800d788 <ChangeLED>
		TargetVelocity[BODY] = 0;
 800b644:	ed8b 8a02 	vstr	s16, [fp, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800b648:	6820      	ldr	r0, [r4, #0]
 800b64a:	68e5      	ldr	r5, [r4, #12]
 800b64c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800b650:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b654:	f7fc feb0 	bl	80083b8 <__aeabi_f2d>
 800b658:	4606      	mov	r6, r0
 800b65a:	4648      	mov	r0, r9
 800b65c:	460f      	mov	r7, r1
 800b65e:	f7fc feab 	bl	80083b8 <__aeabi_f2d>
 800b662:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b666:	4640      	mov	r0, r8
 800b668:	f7fc fea6 	bl	80083b8 <__aeabi_f2d>
 800b66c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b670:	4628      	mov	r0, r5
 800b672:	f7fc fea1 	bl	80083b8 <__aeabi_f2d>
 800b676:	4632      	mov	r2, r6
 800b678:	e9cd 0100 	strd	r0, r1, [sp]
 800b67c:	463b      	mov	r3, r7
 800b67e:	4650      	mov	r0, sl
 800b680:	f007 f91a 	bl	80128b8 <iprintf>
 800b684:	e7de      	b.n	800b644 <GainTestDWall+0x64>
 800b686:	bf00      	nop
 800b688:	2000a174 	.word	0x2000a174
 800b68c:	00000000 	.word	0x00000000
 800b690:	2000a1f8 	.word	0x2000a1f8
 800b694:	2000a1b8 	.word	0x2000a1b8
 800b698:	2000a2ac 	.word	0x2000a2ac
 800b69c:	2000a188 	.word	0x2000a188
 800b6a0:	080164e0 	.word	0x080164e0

0800b6a4 <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800b6a4:	b538      	push	{r3, r4, r5, lr}
	IT_mode = WRITINGFREE;
 800b6a6:	4b34      	ldr	r3, [pc, #208]	; (800b778 <WritingFree+0xd4>)
{
 800b6a8:	ed2d 8b02 	vpush	{d8}
	IT_mode = WRITINGFREE;
 800b6ac:	2507      	movs	r5, #7
 800b6ae:	601d      	str	r5, [r3, #0]

	InitExplore();
 800b6b0:	f7ff fda8 	bl	800b204 <InitExplore>

	printf("3\r\n");
 800b6b4:	4831      	ldr	r0, [pc, #196]	; (800b77c <WritingFree+0xd8>)
	Calc = 1;
	Accel(61.5, 240);

	for(int i=0; i < 4; i ++)
	{
		GoStraight(90, 240, 1);
 800b6b6:	eddf 8a32 	vldr	s17, [pc, #200]	; 800b780 <WritingFree+0xdc>
 800b6ba:	ed9f 8a32 	vldr	s16, [pc, #200]	; 800b784 <WritingFree+0xe0>
	printf("3\r\n");
 800b6be:	f007 f983 	bl	80129c8 <puts>
	InitPosition();
 800b6c2:	f7fd fb99 	bl	8008df8 <InitPosition>
	wall_init();
 800b6c6:	f7fe fd4d 	bl	800a164 <wall_init>
	printf("4\r\n");
 800b6ca:	482f      	ldr	r0, [pc, #188]	; (800b788 <WritingFree+0xe4>)
 800b6cc:	f007 f97c 	bl	80129c8 <puts>
	TotalPulse[RIGHT] = 0;
 800b6d0:	4b2e      	ldr	r3, [pc, #184]	; (800b78c <WritingFree+0xe8>)
 800b6d2:	2400      	movs	r4, #0
	PIDChangeFlag(L_VELO_PID, 1);
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b6d8:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800b6da:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800b6dc:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b6de:	f002 fc7d 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	2005      	movs	r0, #5
 800b6e6:	f002 fc79 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	2001      	movs	r0, #1
 800b6ee:	f002 fc75 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	2002      	movs	r0, #2
 800b6f6:	f002 fc71 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b6fa:	4621      	mov	r1, r4
 800b6fc:	2003      	movs	r0, #3
 800b6fe:	f002 fc6d 	bl	800dfdc <PIDChangeFlag>
	ExploreVelocity=0;
 800b702:	4b23      	ldr	r3, [pc, #140]	; (800b790 <WritingFree+0xec>)
 800b704:	2200      	movs	r2, #0
	ChangeLED(7);
 800b706:	4628      	mov	r0, r5
	ExploreVelocity=0;
 800b708:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800b70a:	f002 f83d 	bl	800d788 <ChangeLED>
	Calc = 1;
 800b70e:	4b21      	ldr	r3, [pc, #132]	; (800b794 <WritingFree+0xf0>)
	Accel(61.5, 240);
 800b710:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b798 <WritingFree+0xf4>
	Calc = 1;
 800b714:	2201      	movs	r2, #1
	Accel(61.5, 240);
 800b716:	eef0 0a68 	vmov.f32	s1, s17
	Calc = 1;
 800b71a:	601a      	str	r2, [r3, #0]
	Accel(61.5, 240);
 800b71c:	f7fd ff64 	bl	80095e8 <Accel>
 800b720:	2404      	movs	r4, #4
		GoStraight(90, 240, 1);
 800b722:	2001      	movs	r0, #1
 800b724:	eef0 0a68 	vmov.f32	s1, s17
 800b728:	eeb0 0a48 	vmov.f32	s0, s16
 800b72c:	f7fe f8b0 	bl	8009890 <GoStraight>
	for(int i=0; i < 4; i ++)
 800b730:	3c01      	subs	r4, #1
 800b732:	d1f6      	bne.n	800b722 <WritingFree+0x7e>
	}
	for(int i=0; i < 4; i ++)
	{
		GoStraight(90, 240, -1);
 800b734:	eddf 8a12 	vldr	s17, [pc, #72]	; 800b780 <WritingFree+0xdc>
 800b738:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800b784 <WritingFree+0xe0>
 800b73c:	2404      	movs	r4, #4
 800b73e:	f04f 30ff 	mov.w	r0, #4294967295
 800b742:	eef0 0a68 	vmov.f32	s1, s17
 800b746:	eeb0 0a48 	vmov.f32	s0, s16
 800b74a:	f7fe f8a1 	bl	8009890 <GoStraight>
	for(int i=0; i < 4; i ++)
 800b74e:	3c01      	subs	r4, #1
 800b750:	d1f5      	bne.n	800b73e <WritingFree+0x9a>
	}
	Decel(45, 0);
 800b752:	eddf 0a12 	vldr	s1, [pc, #72]	; 800b79c <WritingFree+0xf8>
 800b756:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800b7a0 <WritingFree+0xfc>
 800b75a:	f7fd ffc9 	bl	80096f0 <Decel>
	//	initSearchData(&my_map, &my_mouse);
		t = 0;
		HAL_TIM_Base_Stop_IT(&htim1);
		printf("%dms\r\n",timer1);
#else
	printf("初期化時重み更新タイム\r\n");
 800b75e:	4811      	ldr	r0, [pc, #68]	; (800b7a4 <WritingFree+0x100>)
 800b760:	f007 f932 	bl	80129c8 <puts>
	initSearchData(&my_map, &my_mouse); //全体8.4ms . 初期化処理で1.2ms + 全体の重み更新で7.2ms
 800b764:	4910      	ldr	r1, [pc, #64]	; (800b7a8 <WritingFree+0x104>)
 800b766:	4811      	ldr	r0, [pc, #68]	; (800b7ac <WritingFree+0x108>)
 800b768:	f001 fa54 	bl	800cc14 <initSearchData>

	printf("走行時タイム\r\n");
 800b76c:	4810      	ldr	r0, [pc, #64]	; (800b7b0 <WritingFree+0x10c>)
 800b76e:	f007 f92b 	bl	80129c8 <puts>
	updateRealSearch();	//7.6ms
 800b772:	f001 fa6b 	bl	800cc4c <updateRealSearch>
 800b776:	e7fe      	b.n	800b776 <WritingFree+0xd2>
 800b778:	2000a174 	.word	0x2000a174
 800b77c:	08016560 	.word	0x08016560
 800b780:	43700000 	.word	0x43700000
 800b784:	42b40000 	.word	0x42b40000
 800b788:	08016564 	.word	0x08016564
 800b78c:	2000a1b8 	.word	0x2000a1b8
 800b790:	2000a2ac 	.word	0x2000a2ac
 800b794:	2000a428 	.word	0x2000a428
 800b798:	42760000 	.word	0x42760000
 800b79c:	00000000 	.word	0x00000000
 800b7a0:	42340000 	.word	0x42340000
 800b7a4:	08016568 	.word	0x08016568
 800b7a8:	20009a24 	.word	0x20009a24
 800b7ac:	20009bd0 	.word	0x20009bd0
 800b7b0:	0801658c 	.word	0x0801658c
 800b7b4:	00000000 	.word	0x00000000

0800b7b8 <FastestRun>:
	Sla.Theta1 = 30*M_PI/180;
	Sla.Theta2 = 60*M_PI/180;
	Sla.Theta3 = 90*M_PI/180;
}
void FastestRun()
{
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	ed2d 8b02 	vpush	{d8}
	IT_mode = EXPLORE;
 800b7c0:	4bbf      	ldr	r3, [pc, #764]	; (800bac0 <FastestRun+0x308>)
	InitPosition();


//	wall_init();

	TotalPulse[RIGHT] = 0;
 800b7c2:	4ec0      	ldr	r6, [pc, #768]	; (800bac4 <FastestRun+0x30c>)
{
 800b7c4:	b085      	sub	sp, #20
	IT_mode = EXPLORE;
 800b7c6:	2206      	movs	r2, #6
	HAL_Delay(100);
 800b7c8:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800b7ca:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800b7cc:	f002 fdbc 	bl	800e348 <HAL_Delay>
	int8_t mode=1;
 800b7d0:	aa04      	add	r2, sp, #16
 800b7d2:	2501      	movs	r5, #1
 800b7d4:	f802 5d02 	strb.w	r5, [r2, #-2]!
	  ModeSelect( 1, 2, &mode);
 800b7d8:	2102      	movs	r1, #2
 800b7da:	4628      	mov	r0, r5
 800b7dc:	f002 fcd8 	bl	800e190 <ModeSelect>
	  Signal( mode );
 800b7e0:	f99d 000e 	ldrsb.w	r0, [sp, #14]
 800b7e4:	f002 fc68 	bl	800e0b8 <Signal>
		HAL_Delay(100);
 800b7e8:	2064      	movs	r0, #100	; 0x64
 800b7ea:	f002 fdad 	bl	800e348 <HAL_Delay>
		  int8_t mode2=1;
 800b7ee:	aa04      	add	r2, sp, #16
		  ModeSelect( 1, 4, &mode2);
 800b7f0:	2104      	movs	r1, #4
		  int8_t mode2=1;
 800b7f2:	f802 5d01 	strb.w	r5, [r2, #-1]!
		  ModeSelect( 1, 4, &mode2);
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f002 fcca 	bl	800e190 <ModeSelect>
		  Signal( mode2 );
 800b7fc:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800b800:	f002 fc5a 	bl	800e0b8 <Signal>
	TotalPulse[RIGHT] = 0;
 800b804:	2400      	movs	r4, #0
		  PhotoSwitch();
 800b806:	f002 fc99 	bl	800e13c <PhotoSwitch>
	InitFastest();
 800b80a:	f7ff fd9d 	bl	800b348 <InitFastest>
	InitPosition();
 800b80e:	f7fd faf3 	bl	8008df8 <InitPosition>
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800b812:	4629      	mov	r1, r5
 800b814:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800b816:	6074      	str	r4, [r6, #4]
	TotalPulse[LEFT] = 0;
 800b818:	6034      	str	r4, [r6, #0]
	TotalPulse[BODY] = 0;
 800b81a:	60b4      	str	r4, [r6, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800b81c:	f002 fbde 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800b820:	4629      	mov	r1, r5
 800b822:	2005      	movs	r0, #5
 800b824:	f002 fbda 	bl	800dfdc <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800b828:	68b1      	ldr	r1, [r6, #8]
 800b82a:	48a7      	ldr	r0, [pc, #668]	; (800bac8 <FastestRun+0x310>)
 800b82c:	6832      	ldr	r2, [r6, #0]
 800b82e:	6873      	ldr	r3, [r6, #4]
 800b830:	f007 f842 	bl	80128b8 <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800b834:	4621      	mov	r1, r4
 800b836:	4628      	mov	r0, r5
 800b838:	f002 fbd0 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800b83c:	4621      	mov	r1, r4
 800b83e:	2002      	movs	r0, #2
 800b840:	f002 fbcc 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800b844:	4621      	mov	r1, r4
 800b846:	2003      	movs	r0, #3
 800b848:	f002 fbc8 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800b84c:	4621      	mov	r1, r4
 800b84e:	4620      	mov	r0, r4
 800b850:	f002 fbc4 	bl	800dfdc <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode = 'T';
	if(mode == 1)
 800b854:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 800b858:	42ab      	cmp	r3, r5
 800b85a:	d012      	beq.n	800b882 <FastestRun+0xca>
		ExploreVelocity = 400;
		turn_mode = 'T';
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	4f9b      	ldr	r7, [pc, #620]	; (800bacc <FastestRun+0x314>)
 800b860:	bf14      	ite	ne
 800b862:	f04f 0954 	movne.w	r9, #84	; 0x54
 800b866:	f04f 0953 	moveq.w	r9, #83	; 0x53
	}

	switch(mode2)
 800b86a:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 800b86e:	3b01      	subs	r3, #1
 800b870:	2b03      	cmp	r3, #3
 800b872:	f200 817e 	bhi.w	800bb72 <FastestRun+0x3ba>
 800b876:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b87a:	0172      	.short	0x0172
 800b87c:	01130169 	.word	0x01130169
 800b880:	000a      	.short	0x000a
		ExploreVelocity = 400;
 800b882:	4f92      	ldr	r7, [pc, #584]	; (800bacc <FastestRun+0x314>)
 800b884:	4b92      	ldr	r3, [pc, #584]	; (800bad0 <FastestRun+0x318>)
 800b886:	603b      	str	r3, [r7, #0]
		turn_mode = 'T';
 800b888:	f04f 0954 	mov.w	r9, #84	; 0x54
 800b88c:	e7ed      	b.n	800b86a <FastestRun+0xb2>
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
		Sla.Pre = 3;
 800b88e:	4c91      	ldr	r4, [pc, #580]	; (800bad4 <FastestRun+0x31c>)
		ExploreVelocity=300;
 800b890:	4a91      	ldr	r2, [pc, #580]	; (800bad8 <FastestRun+0x320>)
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800b892:	4b92      	ldr	r3, [pc, #584]	; (800badc <FastestRun+0x324>)
		ExploreVelocity=300;
 800b894:	603a      	str	r2, [r7, #0]
		Sla.Pre = 3;
 800b896:	4992      	ldr	r1, [pc, #584]	; (800bae0 <FastestRun+0x328>)
		Sla.Fol = 5;
 800b898:	4a92      	ldr	r2, [pc, #584]	; (800bae4 <FastestRun+0x32c>)
		Sla.Pre = 3;
 800b89a:	6021      	str	r1, [r4, #0]
		Sla.Fol = 5;
 800b89c:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.117;
 800b89e:	60a3      	str	r3, [r4, #8]
	Sla.Pre *=  2/MM_PER_PULSE;
 800b8a0:	6820      	ldr	r0, [r4, #0]
	initSlalomParam();
	ChangeLED(4);

	VelocityMax = false;

	SearchOrFast = 1;
 800b8a2:	f8df 829c 	ldr.w	r8, [pc, #668]	; 800bb40 <FastestRun+0x388>
	Calc = SearchOrFast;
 800b8a6:	4e90      	ldr	r6, [pc, #576]	; (800bae8 <FastestRun+0x330>)
//			HAL_Delay(300);
//			break;
//	}
	//shiftPos();

	TargetVelocity[BODY] = 0;
 800b8a8:	ed9f 8a90 	vldr	s16, [pc, #576]	; 800baec <FastestRun+0x334>
 800b8ac:	4d90      	ldr	r5, [pc, #576]	; (800baf0 <FastestRun+0x338>)
        	case back:
        		//Uターンして直進.加速できる
        		Calc = 1;//マップ更新したくないときは1を代入。
        		GoBack();
        		Calc = SearchOrFast;
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800b8ae:	eddf 8a91 	vldr	s17, [pc, #580]	; 800baf4 <FastestRun+0x33c>
	Sla.Pre *=  2/MM_PER_PULSE;
 800b8b2:	f7fc fd81 	bl	80083b8 <__aeabi_f2d>
 800b8b6:	a380      	add	r3, pc, #512	; (adr r3, 800bab8 <FastestRun+0x300>)
 800b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8bc:	f7fc fdd4 	bl	8008468 <__aeabi_dmul>
 800b8c0:	f7fd f8ca 	bl	8008a58 <__aeabi_d2f>
 800b8c4:	6020      	str	r0, [r4, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800b8c6:	6860      	ldr	r0, [r4, #4]
 800b8c8:	f7fc fd76 	bl	80083b8 <__aeabi_f2d>
 800b8cc:	a37a      	add	r3, pc, #488	; (adr r3, 800bab8 <FastestRun+0x300>)
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	f7fc fdc9 	bl	8008468 <__aeabi_dmul>
 800b8d6:	f7fd f8bf 	bl	8008a58 <__aeabi_d2f>
	Sla.Theta3 = 90*M_PI/180;
 800b8da:	4b87      	ldr	r3, [pc, #540]	; (800baf8 <FastestRun+0x340>)
	Sla.Theta1 = 30*M_PI/180;
 800b8dc:	4987      	ldr	r1, [pc, #540]	; (800bafc <FastestRun+0x344>)
	Sla.Theta2 = 60*M_PI/180;
 800b8de:	4a88      	ldr	r2, [pc, #544]	; (800bb00 <FastestRun+0x348>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800b8e0:	6060      	str	r0, [r4, #4]
	ChangeLED(4);
 800b8e2:	2004      	movs	r0, #4
	Sla.Theta3 = 90*M_PI/180;
 800b8e4:	61a3      	str	r3, [r4, #24]
	Sla.Theta1 = 30*M_PI/180;
 800b8e6:	6121      	str	r1, [r4, #16]
	Sla.Theta2 = 60*M_PI/180;
 800b8e8:	6162      	str	r2, [r4, #20]
	ChangeLED(4);
 800b8ea:	f001 ff4d 	bl	800d788 <ChangeLED>
	VelocityMax = false;
 800b8ee:	4a85      	ldr	r2, [pc, #532]	; (800bb04 <FastestRun+0x34c>)
	TargetVelocity[BODY] = 0;
 800b8f0:	4885      	ldr	r0, [pc, #532]	; (800bb08 <FastestRun+0x350>)
	Acceleration = 0;
 800b8f2:	4986      	ldr	r1, [pc, #536]	; (800bb0c <FastestRun+0x354>)
	SearchOrFast = 1;
 800b8f4:	f04f 0b01 	mov.w	fp, #1
	VelocityMax = false;
 800b8f8:	2400      	movs	r4, #0
 800b8fa:	7014      	strb	r4, [r2, #0]
	SearchOrFast = 1;
 800b8fc:	f8c8 b000 	str.w	fp, [r8]
	Calc = SearchOrFast;
 800b900:	f8d8 2000 	ldr.w	r2, [r8]
 800b904:	6032      	str	r2, [r6, #0]
	TargetAngularV = 0;
 800b906:	4a82      	ldr	r2, [pc, #520]	; (800bb10 <FastestRun+0x358>)
	TargetVelocity[BODY] = 0;
 800b908:	ed80 8a02 	vstr	s16, [r0, #8]
	TargetAngle = 0;
 800b90c:	4881      	ldr	r0, [pc, #516]	; (800bb14 <FastestRun+0x35c>)
	Acceleration = 0;
 800b90e:	ed81 8a00 	vstr	s16, [r1]
	Angle = 0;
 800b912:	4981      	ldr	r1, [pc, #516]	; (800bb18 <FastestRun+0x360>)
	TargetAngularV = 0;
 800b914:	ed82 8a00 	vstr	s16, [r2]
	goal_edge_num = GOAL_SIZE_X;
 800b918:	4a80      	ldr	r2, [pc, #512]	; (800bb1c <FastestRun+0x364>)
	TargetAngle = 0;
 800b91a:	ed80 8a00 	vstr	s16, [r0]
	goal_edge_num = GOAL_SIZE_X;
 800b91e:	f04f 0a02 	mov.w	sl, #2
	PIDReset(L_VELO_PID);
 800b922:	2004      	movs	r0, #4
	goal_edge_num = GOAL_SIZE_X;
 800b924:	f882 a000 	strb.w	sl, [r2]
	Angle = 0;
 800b928:	ed81 8a00 	vstr	s16, [r1]
	PIDReset(L_VELO_PID);
 800b92c:	f002 fb5e 	bl	800dfec <PIDReset>
	PIDReset(R_VELO_PID);
 800b930:	2005      	movs	r0, #5
 800b932:	f002 fb5b 	bl	800dfec <PIDReset>
	PIDReset(A_VELO_PID);
 800b936:	4620      	mov	r0, r4
 800b938:	f002 fb58 	bl	800dfec <PIDReset>
	PIDReset(L_WALL_PID);
 800b93c:	4650      	mov	r0, sl
 800b93e:	f002 fb55 	bl	800dfec <PIDReset>
	PIDReset(R_WALL_PID);
 800b942:	2003      	movs	r0, #3
 800b944:	f002 fb52 	bl	800dfec <PIDReset>
	PIDReset(D_WALL_PID);
 800b948:	4658      	mov	r0, fp
 800b94a:	f002 fb4f 	bl	800dfec <PIDReset>
	initSearchData(&my_map, &my_mouse);
 800b94e:	4629      	mov	r1, r5
 800b950:	4873      	ldr	r0, [pc, #460]	; (800bb20 <FastestRun+0x368>)
 800b952:	f001 f95f 	bl	800cc14 <initSearchData>
	flashCopyNodesToRam(); //existenceだけ
 800b956:	f7fe fc49 	bl	800a1ec <flashCopyNodesToRam>
	updateAllNodeWeight(&my_map, GOAL_X, GOAL_Y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x03);
 800b95a:	2204      	movs	r2, #4
 800b95c:	2103      	movs	r1, #3
 800b95e:	4653      	mov	r3, sl
 800b960:	f8cd a000 	str.w	sl, [sp]
 800b964:	9101      	str	r1, [sp, #4]
 800b966:	486e      	ldr	r0, [pc, #440]	; (800bb20 <FastestRun+0x368>)
 800b968:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 800bb44 <FastestRun+0x38c>
 800b96c:	4611      	mov	r1, r2
 800b96e:	f7fe ff2b 	bl	800a7c8 <updateAllNodeWeight>
	getPathNode(&my_map);
 800b972:	486b      	ldr	r0, [pc, #428]	; (800bb20 <FastestRun+0x368>)
 800b974:	f001 fb46 	bl	800d004 <getPathNode>
	HAL_Delay(200);
 800b978:	20c8      	movs	r0, #200	; 0xc8
 800b97a:	f002 fce5 	bl	800e348 <HAL_Delay>
	Accel(61.5, ExploreVelocity);
 800b97e:	edd7 0a00 	vldr	s1, [r7]
 800b982:	ed9f 0a68 	vldr	s0, [pc, #416]	; 800bb24 <FastestRun+0x36c>
        shiftState(&my_mouse);
 800b986:	46ab      	mov	fp, r5
	Accel(61.5, ExploreVelocity);
 800b988:	f7fd fe2e 	bl	80095e8 <Accel>
    while(! ((my_mouse.goal_lesser.x <= my_mouse.next.pos.x && my_mouse.next.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.next.pos.y && my_mouse.next.pos.y <= my_mouse.goal_larger.y)))
 800b98c:	7d2b      	ldrb	r3, [r5, #20]
 800b98e:	782a      	ldrb	r2, [r5, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d809      	bhi.n	800b9a8 <FastestRun+0x1f0>
 800b994:	78aa      	ldrb	r2, [r5, #2]
 800b996:	429a      	cmp	r2, r3
 800b998:	d306      	bcc.n	800b9a8 <FastestRun+0x1f0>
 800b99a:	7d6b      	ldrb	r3, [r5, #21]
 800b99c:	786a      	ldrb	r2, [r5, #1]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d802      	bhi.n	800b9a8 <FastestRun+0x1f0>
 800b9a2:	78ea      	ldrb	r2, [r5, #3]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d263      	bcs.n	800ba70 <FastestRun+0x2b8>
        shiftState(&my_mouse);
 800b9a8:	4658      	mov	r0, fp
 800b9aa:	f7ff fbe9 	bl	800b180 <shiftState>
        my_mouse.next.node = getNextNode(&my_map, my_mouse.now.car, my_mouse.now.node, 0x03);//これらの引数のどれかがいけない. 迷路、方角、ノードポインタ. 一発目の、ノードの重みがfffなのはなぜ？
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	692a      	ldr	r2, [r5, #16]
 800b9b2:	7aa9      	ldrb	r1, [r5, #10]
 800b9b4:	485a      	ldr	r0, [pc, #360]	; (800bb20 <FastestRun+0x368>)
 800b9b6:	f7ff f829 	bl	800aa0c <getNextNode>
        getNextState(&(my_mouse.now),&(my_mouse.next),my_mouse.next.node);
 800b9ba:	495b      	ldr	r1, [pc, #364]	; (800bb28 <FastestRun+0x370>)
        my_mouse.next.node = getNextNode(&my_map, my_mouse.now.car, my_mouse.now.node, 0x03);//これらの引数のどれかがいけない. 迷路、方角、ノードポインタ. 一発目の、ノードの重みがfffなのはなぜ？
 800b9bc:	61e8      	str	r0, [r5, #28]
 800b9be:	4602      	mov	r2, r0
        getNextState(&(my_mouse.now),&(my_mouse.next),my_mouse.next.node);
 800b9c0:	f1a1 000c 	sub.w	r0, r1, #12
 800b9c4:	f7ff fa7c 	bl	800aec0 <getNextState>
        	switch(my_mouse.next.dir%8)
 800b9c8:	7deb      	ldrb	r3, [r5, #23]
        AddVelocity = 0;
 800b9ca:	ed8a 8a00 	vstr	s16, [sl]
        	switch(my_mouse.next.dir%8)
 800b9ce:	f003 0307 	and.w	r3, r3, #7
 800b9d2:	2b06      	cmp	r3, #6
 800b9d4:	d80b      	bhi.n	800b9ee <FastestRun+0x236>
 800b9d6:	e8df f003 	tbb	[pc, r3]
 800b9da:	0a16      	.short	0x0a16
 800b9dc:	4021350c 	.word	0x4021350c
 800b9e0:	04          	.byte	0x04
 800b9e1:	00          	.byte	0x00
        		Calc = SearchOrFast;
        		TurnLeft(turn_mode);
        		break;
        	case left:
        		//左旋回
        		Calc = SearchOrFast;
 800b9e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9e6:	6033      	str	r3, [r6, #0]
        		TurnLeft(turn_mode);
 800b9e8:	4648      	mov	r0, r9
 800b9ea:	f7fe f8c1 	bl	8009b70 <TurnLeft>
        		break;
        	}
        cnt++;
 800b9ee:	3401      	adds	r4, #1
 800b9f0:	e7cc      	b.n	800b98c <FastestRun+0x1d4>
        		ChangeLED(1);
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	f001 fec8 	bl	800d788 <ChangeLED>
        		Calc = SearchOrFast;
 800b9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b9fc:	6033      	str	r3, [r6, #0]
        		TurnRight(turn_mode);
 800b9fe:	4648      	mov	r0, r9
 800ba00:	f7fe f878 	bl	8009af4 <TurnRight>
        		break;
 800ba04:	e7f3      	b.n	800b9ee <FastestRun+0x236>
        		Calc = SearchOrFast;
 800ba06:	f8d8 3000 	ldr.w	r3, [r8]
        		GoStraight(90, ExploreVelocity , 0);
 800ba0a:	edd7 0a00 	vldr	s1, [r7]
        		Calc = SearchOrFast;
 800ba0e:	6033      	str	r3, [r6, #0]
        		GoStraight(90, ExploreVelocity , 0);
 800ba10:	2000      	movs	r0, #0
 800ba12:	eeb0 0a68 	vmov.f32	s0, s17
 800ba16:	f7fd ff3b 	bl	8009890 <GoStraight>
        		break;
 800ba1a:	e7e8      	b.n	800b9ee <FastestRun+0x236>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	6033      	str	r3, [r6, #0]
        		GoBack();
 800ba20:	f7fe f8e6 	bl	8009bf0 <GoBack>
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800ba24:	edda 7a00 	vldr	s15, [sl]
        		Calc = SearchOrFast;
 800ba28:	f8d8 3000 	ldr.w	r3, [r8]
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800ba2c:	edd7 0a00 	vldr	s1, [r7]
        		Calc = SearchOrFast;
 800ba30:	6033      	str	r3, [r6, #0]
        		GoStraight(90, ExploreVelocity , AddVelocity);
 800ba32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba36:	eeb0 0a68 	vmov.f32	s0, s17
 800ba3a:	ee17 0a90 	vmov	r0, s15
 800ba3e:	f7fd ff27 	bl	8009890 <GoStraight>
        		break;
 800ba42:	e7d4      	b.n	800b9ee <FastestRun+0x236>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800ba44:	2301      	movs	r3, #1
 800ba46:	6033      	str	r3, [r6, #0]
        		GoBack();
 800ba48:	f7fe f8d2 	bl	8009bf0 <GoBack>
        		Calc = SearchOrFast;
 800ba4c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba50:	6033      	str	r3, [r6, #0]
        		TurnRight(turn_mode);
 800ba52:	4648      	mov	r0, r9
 800ba54:	f7fe f84e 	bl	8009af4 <TurnRight>
        		break;
 800ba58:	e7c9      	b.n	800b9ee <FastestRun+0x236>
        		Calc = 1;//マップ更新したくないときは1を代入。
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	6033      	str	r3, [r6, #0]
        		GoBack();
 800ba5e:	f7fe f8c7 	bl	8009bf0 <GoBack>
        		Calc = SearchOrFast;
 800ba62:	f8d8 3000 	ldr.w	r3, [r8]
 800ba66:	6033      	str	r3, [r6, #0]
        		TurnLeft(turn_mode);
 800ba68:	4648      	mov	r0, r9
 800ba6a:	f7fe f881 	bl	8009b70 <TurnLeft>
        		break;
 800ba6e:	e7be      	b.n	800b9ee <FastestRun+0x236>
//    outputDataToFile(maze);

	//fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode,0x03);

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800ba70:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800baec <FastestRun+0x334>
 800ba74:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800bb2c <FastestRun+0x374>
 800ba78:	4d29      	ldr	r5, [pc, #164]	; (800bb20 <FastestRun+0x368>)
	//終了合図
	Signal(7);

	while(1)
	{
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800ba7a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800bb48 <FastestRun+0x390>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800ba7e:	4f2c      	ldr	r7, [pc, #176]	; (800bb30 <FastestRun+0x378>)
	Decel(45,0);
 800ba80:	f7fd fe36 	bl	80096f0 <Decel>
	Signal(7);
 800ba84:	2007      	movs	r0, #7
 800ba86:	f002 fb17 	bl	800e0b8 <Signal>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800ba8a:	462e      	mov	r6, r5
		printf("最短走行終了: かかった歩数: %d, スタートノードの重み: %d\r\n",cnt, my_map.RawNode[0][1].weight);
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	896a      	ldrh	r2, [r5, #10]
 800ba90:	4640      	mov	r0, r8
 800ba92:	f006 ff11 	bl	80128b8 <iprintf>
		printAllWeight(&my_map, &(my_mouse.now.pos));
 800ba96:	4639      	mov	r1, r7
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f7fe fbf1 	bl	800a280 <printAllWeight>
 800ba9e:	e7f5      	b.n	800ba8c <FastestRun+0x2d4>
		Sla.Pre = 2;
 800baa0:	4c0c      	ldr	r4, [pc, #48]	; (800bad4 <FastestRun+0x31c>)
		ExploreVelocity=180;
 800baa2:	4a24      	ldr	r2, [pc, #144]	; (800bb34 <FastestRun+0x37c>)
		Sla.Alpha = 0.04;
 800baa4:	4b24      	ldr	r3, [pc, #144]	; (800bb38 <FastestRun+0x380>)
		ExploreVelocity=180;
 800baa6:	603a      	str	r2, [r7, #0]
		Sla.Pre = 2;
 800baa8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		Sla.Fol = 3.5;
 800baac:	4a23      	ldr	r2, [pc, #140]	; (800bb3c <FastestRun+0x384>)
		Sla.Pre = 2;
 800baae:	6021      	str	r1, [r4, #0]
		Sla.Fol = 3.5;
 800bab0:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.04;
 800bab2:	60a3      	str	r3, [r4, #8]
		break;
 800bab4:	e6f4      	b.n	800b8a0 <FastestRun+0xe8>
 800bab6:	bf00      	nop
 800bab8:	9f8f0d54 	.word	0x9f8f0d54
 800babc:	409ee54a 	.word	0x409ee54a
 800bac0:	2000a174 	.word	0x2000a174
 800bac4:	2000a1b8 	.word	0x2000a1b8
 800bac8:	08016458 	.word	0x08016458
 800bacc:	2000a2ac 	.word	0x2000a2ac
 800bad0:	43c80000 	.word	0x43c80000
 800bad4:	2000a1d0 	.word	0x2000a1d0
 800bad8:	43960000 	.word	0x43960000
 800badc:	3def9db2 	.word	0x3def9db2
 800bae0:	40400000 	.word	0x40400000
 800bae4:	40a00000 	.word	0x40a00000
 800bae8:	2000a428 	.word	0x2000a428
 800baec:	00000000 	.word	0x00000000
 800baf0:	20009a24 	.word	0x20009a24
 800baf4:	42b40000 	.word	0x42b40000
 800baf8:	3fc90fdb 	.word	0x3fc90fdb
 800bafc:	3f060a92 	.word	0x3f060a92
 800bb00:	3f860a92 	.word	0x3f860a92
 800bb04:	2000a2aa 	.word	0x2000a2aa
 800bb08:	2000a188 	.word	0x2000a188
 800bb0c:	20007f30 	.word	0x20007f30
 800bb10:	2000a198 	.word	0x2000a198
 800bb14:	20007f44 	.word	0x20007f44
 800bb18:	20007f34 	.word	0x20007f34
 800bb1c:	2000a1b4 	.word	0x2000a1b4
 800bb20:	20009bd0 	.word	0x20009bd0
 800bb24:	42760000 	.word	0x42760000
 800bb28:	20009a38 	.word	0x20009a38
 800bb2c:	42340000 	.word	0x42340000
 800bb30:	20009a2c 	.word	0x20009a2c
 800bb34:	43340000 	.word	0x43340000
 800bb38:	3d23d70a 	.word	0x3d23d70a
 800bb3c:	40600000 	.word	0x40600000
 800bb40:	2000a424 	.word	0x2000a424
 800bb44:	2000a194 	.word	0x2000a194
 800bb48:	0801648c 	.word	0x0801648c
		Sla.Pre = 5;
 800bb4c:	4c0a      	ldr	r4, [pc, #40]	; (800bb78 <FastestRun+0x3c0>)
		ExploreVelocity=135;
 800bb4e:	4b0b      	ldr	r3, [pc, #44]	; (800bb7c <FastestRun+0x3c4>)
		Sla.Alpha = 0.0273;
 800bb50:	4a0b      	ldr	r2, [pc, #44]	; (800bb80 <FastestRun+0x3c8>)
		ExploreVelocity=135;
 800bb52:	603b      	str	r3, [r7, #0]
		Sla.Pre = 5;
 800bb54:	4b0b      	ldr	r3, [pc, #44]	; (800bb84 <FastestRun+0x3cc>)
		Sla.Alpha = 0.0273;
 800bb56:	60a2      	str	r2, [r4, #8]
		Sla.Pre = 5;
 800bb58:	6023      	str	r3, [r4, #0]
		Sla.Fol = 5;
 800bb5a:	6063      	str	r3, [r4, #4]
		break;
 800bb5c:	e6a0      	b.n	800b8a0 <FastestRun+0xe8>
		Sla.Pre = 7;//9;
 800bb5e:	4c06      	ldr	r4, [pc, #24]	; (800bb78 <FastestRun+0x3c0>)
		ExploreVelocity=90;
 800bb60:	4a09      	ldr	r2, [pc, #36]	; (800bb88 <FastestRun+0x3d0>)
		Sla.Alpha = 0.014;
 800bb62:	4b0a      	ldr	r3, [pc, #40]	; (800bb8c <FastestRun+0x3d4>)
		ExploreVelocity=90;
 800bb64:	603a      	str	r2, [r7, #0]
		Sla.Pre = 7;//9;
 800bb66:	490a      	ldr	r1, [pc, #40]	; (800bb90 <FastestRun+0x3d8>)
		Sla.Fol = 11;//13;
 800bb68:	4a0a      	ldr	r2, [pc, #40]	; (800bb94 <FastestRun+0x3dc>)
		Sla.Pre = 7;//9;
 800bb6a:	6021      	str	r1, [r4, #0]
		Sla.Fol = 11;//13;
 800bb6c:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.014;
 800bb6e:	60a3      	str	r3, [r4, #8]
		break;
 800bb70:	e696      	b.n	800b8a0 <FastestRun+0xe8>
 800bb72:	4c01      	ldr	r4, [pc, #4]	; (800bb78 <FastestRun+0x3c0>)
 800bb74:	e694      	b.n	800b8a0 <FastestRun+0xe8>
 800bb76:	bf00      	nop
 800bb78:	2000a1d0 	.word	0x2000a1d0
 800bb7c:	43070000 	.word	0x43070000
 800bb80:	3cdfa440 	.word	0x3cdfa440
 800bb84:	40a00000 	.word	0x40a00000
 800bb88:	42b40000 	.word	0x42b40000
 800bb8c:	3c656042 	.word	0x3c656042
 800bb90:	40e00000 	.word	0x40e00000
 800bb94:	41300000 	.word	0x41300000

0800bb98 <Explore>:
	}
}
void Explore()
{
 800bb98:	b5f0      	push	{r4, r5, r6, r7, lr}
	IT_mode = EXPLORE;
 800bb9a:	4b7f      	ldr	r3, [pc, #508]	; (800bd98 <Explore+0x200>)
{
 800bb9c:	b083      	sub	sp, #12
	IT_mode = EXPLORE;
 800bb9e:	2206      	movs	r2, #6
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800bba0:	2064      	movs	r0, #100	; 0x64
	IT_mode = EXPLORE;
 800bba2:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800bba4:	f002 fbd0 	bl	800e348 <HAL_Delay>
	int8_t mode=1;
 800bba8:	aa02      	add	r2, sp, #8
 800bbaa:	2501      	movs	r5, #1
 800bbac:	f802 5d02 	strb.w	r5, [r2, #-2]!
	ModeSelect( 1, 2, &mode);
 800bbb0:	2102      	movs	r1, #2
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f002 faec 	bl	800e190 <ModeSelect>
	Signal( mode );
 800bbb8:	f99d 0006 	ldrsb.w	r0, [sp, #6]
 800bbbc:	f002 fa7c 	bl	800e0b8 <Signal>
	HAL_Delay(100);
 800bbc0:	2064      	movs	r0, #100	; 0x64
 800bbc2:	f002 fbc1 	bl	800e348 <HAL_Delay>

	int8_t mode2=1;
 800bbc6:	aa02      	add	r2, sp, #8
	ModeSelect( 1, 4, &mode2);
 800bbc8:	2104      	movs	r1, #4
	int8_t mode2=1;
 800bbca:	f802 5d01 	strb.w	r5, [r2, #-1]!
	ModeSelect( 1, 4, &mode2);
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f002 fade 	bl	800e190 <ModeSelect>
	Signal( mode2 );
 800bbd4:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800bbd8:	f002 fa6e 	bl	800e0b8 <Signal>
	PhotoSwitch();
 800bbdc:	f002 faae 	bl	800e13c <PhotoSwitch>
	//printf("test\r\n");
	//HAL_Delay(2000);

	InitExplore();
 800bbe0:	f7ff fb10 	bl	800b204 <InitExplore>

	InitPosition();
 800bbe4:	f7fd f908 	bl	8008df8 <InitPosition>

//	printf("旧式の壁初期化\r\n");
//	wall_init();
//
//	printf("色々セット\r\n");
	TotalPulse[RIGHT] = 0;
 800bbe8:	4b6c      	ldr	r3, [pc, #432]	; (800bd9c <Explore+0x204>)
 800bbea:	2400      	movs	r4, #0
	TotalPulse[LEFT] = 0;
	TotalPulse[BODY] = 0;

	PIDChangeFlag(L_VELO_PID, 1);
 800bbec:	4629      	mov	r1, r5
 800bbee:	2004      	movs	r0, #4
	TotalPulse[RIGHT] = 0;
 800bbf0:	605c      	str	r4, [r3, #4]
	TotalPulse[LEFT] = 0;
 800bbf2:	601c      	str	r4, [r3, #0]
	TotalPulse[BODY] = 0;
 800bbf4:	609c      	str	r4, [r3, #8]
	PIDChangeFlag(L_VELO_PID, 1);
 800bbf6:	f002 f9f1 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	2005      	movs	r0, #5
 800bbfe:	f002 f9ed 	bl	800dfdc <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800bc02:	4621      	mov	r1, r4
 800bc04:	4628      	mov	r0, r5
 800bc06:	f002 f9e9 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	2002      	movs	r0, #2
 800bc0e:	f002 f9e5 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800bc12:	4621      	mov	r1, r4
 800bc14:	2003      	movs	r0, #3
 800bc16:	f002 f9e1 	bl	800dfdc <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 0);
 800bc1a:	4621      	mov	r1, r4
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f002 f9dd 	bl	800dfdc <PIDChangeFlag>

//	ChangeLED(2);

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode = 'T';
	if(mode == 1)
 800bc22:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 800bc26:	42ab      	cmp	r3, r5
 800bc28:	d00e      	beq.n	800bc48 <Explore+0xb0>
		turn_mode = 'T';
		ExploreVelocity=300;
	}
	else if(mode == 2)
	{
		turn_mode = 'S';
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	4e5c      	ldr	r6, [pc, #368]	; (800bda0 <Explore+0x208>)
 800bc2e:	bf14      	ite	ne
 800bc30:	2754      	movne	r7, #84	; 0x54
 800bc32:	2753      	moveq	r7, #83	; 0x53
	}

	switch(mode2)
 800bc34:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	2b03      	cmp	r3, #3
 800bc3c:	f200 80a4 	bhi.w	800bd88 <Explore+0x1f0>
 800bc40:	e8df f003 	tbb	[pc, r3]
 800bc44:	07818d98 	.word	0x07818d98
		ExploreVelocity=300;
 800bc48:	4e55      	ldr	r6, [pc, #340]	; (800bda0 <Explore+0x208>)
 800bc4a:	4b56      	ldr	r3, [pc, #344]	; (800bda4 <Explore+0x20c>)
 800bc4c:	6033      	str	r3, [r6, #0]
		turn_mode = 'T';
 800bc4e:	2754      	movs	r7, #84	; 0x54
 800bc50:	e7f0      	b.n	800bc34 <Explore+0x9c>
		Sla.Theta2 = 60;
		Sla.Theta3 = 90;
		break;
	case 4:
		ExploreVelocity=300;
		Sla.Pre = 3;
 800bc52:	4c55      	ldr	r4, [pc, #340]	; (800bda8 <Explore+0x210>)
		ExploreVelocity=300;
 800bc54:	4a53      	ldr	r2, [pc, #332]	; (800bda4 <Explore+0x20c>)
		Sla.Fol = 5;
		Sla.Alpha = 0.117;
 800bc56:	4b55      	ldr	r3, [pc, #340]	; (800bdac <Explore+0x214>)
		ExploreVelocity=300;
 800bc58:	6032      	str	r2, [r6, #0]
		Sla.Pre = 3;
 800bc5a:	4955      	ldr	r1, [pc, #340]	; (800bdb0 <Explore+0x218>)
		Sla.Fol = 5;
 800bc5c:	4a55      	ldr	r2, [pc, #340]	; (800bdb4 <Explore+0x21c>)
		Sla.Pre = 3;
 800bc5e:	6021      	str	r1, [r4, #0]
		Sla.Fol = 5;
 800bc60:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.117;
 800bc62:	60a3      	str	r3, [r4, #8]
	Sla.Pre *=  2/MM_PER_PULSE;
 800bc64:	6820      	ldr	r0, [r4, #0]
 800bc66:	4d54      	ldr	r5, [pc, #336]	; (800bdb8 <Explore+0x220>)
 800bc68:	f7fc fba6 	bl	80083b8 <__aeabi_f2d>
 800bc6c:	a348      	add	r3, pc, #288	; (adr r3, 800bd90 <Explore+0x1f8>)
 800bc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc72:	f7fc fbf9 	bl	8008468 <__aeabi_dmul>
 800bc76:	f7fc feef 	bl	8008a58 <__aeabi_d2f>
 800bc7a:	6020      	str	r0, [r4, #0]
	Sla.Fol *=  2/MM_PER_PULSE;
 800bc7c:	6860      	ldr	r0, [r4, #4]
 800bc7e:	f7fc fb9b 	bl	80083b8 <__aeabi_f2d>
 800bc82:	a343      	add	r3, pc, #268	; (adr r3, 800bd90 <Explore+0x1f8>)
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	f7fc fbee 	bl	8008468 <__aeabi_dmul>
 800bc8c:	f7fc fee4 	bl	8008a58 <__aeabi_d2f>
//			HAL_Delay(1000);
//		}
//	Pos.TargetX = X_GOAL_LESSER;
//	Pos.TargetY = Y_GOAL_LESSER;
//	goal_edge_num = two;
	VelocityMax = false;
 800bc90:	494a      	ldr	r1, [pc, #296]	; (800bdbc <Explore+0x224>)
	SearchOrFast = 0;
 800bc92:	f8df c178 	ldr.w	ip, [pc, #376]	; 800be0c <Explore+0x274>
	Calc = 0;
 800bc96:	4a4a      	ldr	r2, [pc, #296]	; (800bdc0 <Explore+0x228>)
	Sla.Fol *=  2/MM_PER_PULSE;
 800bc98:	6060      	str	r0, [r4, #4]
	VelocityMax = false;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	700b      	strb	r3, [r1, #0]

//	PhotoSwitch();
	Control_Mode=A_VELO_PID; //初期値が0. 減速時に
 800bc9e:	4949      	ldr	r1, [pc, #292]	; (800bdc4 <Explore+0x22c>)
	Sla.Theta1 = 30*M_PI/180;
 800bca0:	4849      	ldr	r0, [pc, #292]	; (800bdc8 <Explore+0x230>)
	SearchOrFast = 0;
 800bca2:	f8cc 3000 	str.w	r3, [ip]
	Control_Mode=A_VELO_PID; //初期値が0. 減速時に
 800bca6:	600b      	str	r3, [r1, #0]
	Calc = 0;
 800bca8:	6013      	str	r3, [r2, #0]
	Sla.Theta1 = 30*M_PI/180;
 800bcaa:	6120      	str	r0, [r4, #16]
	Sla.Theta2 = 60*M_PI/180;
 800bcac:	4a47      	ldr	r2, [pc, #284]	; (800bdcc <Explore+0x234>)
	Sla.Theta3 = 90*M_PI/180;
 800bcae:	4b48      	ldr	r3, [pc, #288]	; (800bdd0 <Explore+0x238>)
//	Pos.Car = north;
//	Pos.NextX = Pos.X;
//	Pos.NextY = Pos.Y + 1;
//	Pos.NextCar = north;

	initSearchData(&my_map, &my_mouse);
 800bcb0:	4848      	ldr	r0, [pc, #288]	; (800bdd4 <Explore+0x23c>)
	Sla.Theta2 = 60*M_PI/180;
 800bcb2:	6162      	str	r2, [r4, #20]
	initSearchData(&my_map, &my_mouse);
 800bcb4:	4629      	mov	r1, r5
	Sla.Theta3 = 90*M_PI/180;
 800bcb6:	61a3      	str	r3, [r4, #24]
	initSearchData(&my_map, &my_mouse);
 800bcb8:	f000 ffac 	bl	800cc14 <initSearchData>
//	printGoal(&my_mouse);
//	printAllWeight(&my_map, &(my_mouse.goal_lesser)); //この時点で右上が0スタート.　合ってる
	dbc = 1;
 800bcbc:	4b46      	ldr	r3, [pc, #280]	; (800bdd8 <Explore+0x240>)
	Accel(61.5, ExploreVelocity);
 800bcbe:	edd6 0a00 	vldr	s1, [r6]
 800bcc2:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800bddc <Explore+0x244>

//		//ChangeLED(Pos.Car);
//		KyushinJudge();
//		SelectAction(turn_mode);
//		shiftPos();
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bcc6:	4e43      	ldr	r6, [pc, #268]	; (800bdd4 <Explore+0x23c>)
	dbc = 1;
 800bcc8:	2201      	movs	r2, #1
 800bcca:	601a      	str	r2, [r3, #0]
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bccc:	462c      	mov	r4, r5
	Accel(61.5, ExploreVelocity);
 800bcce:	f7fd fc8b 	bl	80095e8 <Accel>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800bcd2:	e001      	b.n	800bcd8 <Explore+0x140>
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bcd4:	f001 f8a8 	bl	800ce28 <getNextDirection>
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800bcd8:	782a      	ldrb	r2, [r5, #0]
 800bcda:	7a2b      	ldrb	r3, [r5, #8]
 800bcdc:	429a      	cmp	r2, r3
		getNextDirection(&my_map, &my_mouse, turn_mode);
 800bcde:	4621      	mov	r1, r4
 800bce0:	463a      	mov	r2, r7
 800bce2:	4630      	mov	r0, r6
	while( ! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800bce4:	d8f6      	bhi.n	800bcd4 <Explore+0x13c>
 800bce6:	f895 c002 	ldrb.w	ip, [r5, #2]
 800bcea:	459c      	cmp	ip, r3
 800bcec:	d3f2      	bcc.n	800bcd4 <Explore+0x13c>
 800bcee:	7a6b      	ldrb	r3, [r5, #9]
 800bcf0:	f895 c001 	ldrb.w	ip, [r5, #1]
 800bcf4:	459c      	cmp	ip, r3
 800bcf6:	d8ed      	bhi.n	800bcd4 <Explore+0x13c>
 800bcf8:	f895 c003 	ldrb.w	ip, [r5, #3]
 800bcfc:	459c      	cmp	ip, r3
 800bcfe:	d3e9      	bcc.n	800bcd4 <Explore+0x13c>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800bd00:	eddf 0a37 	vldr	s1, [pc, #220]	; 800bde0 <Explore+0x248>
 800bd04:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800bde4 <Explore+0x24c>


while(1)
{
	//迷路データの出力
	printAllNodeExistence(&my_map);
 800bd08:	4c32      	ldr	r4, [pc, #200]	; (800bdd4 <Explore+0x23c>)
	Decel(45, 0);
 800bd0a:	f7fd fcf1 	bl	80096f0 <Decel>
	WaitStopAndReset();//これがないとガクンとなる.
 800bd0e:	f7fd f8e5 	bl	8008edc <WaitStopAndReset>
	shiftState(&my_mouse);
 800bd12:	4829      	ldr	r0, [pc, #164]	; (800bdb8 <Explore+0x220>)
 800bd14:	f7ff fa34 	bl	800b180 <shiftState>
	PIDChangeFlag(A_VELO_PID, 0);
 800bd18:	2100      	movs	r1, #0
 800bd1a:	4608      	mov	r0, r1
 800bd1c:	f002 f95e 	bl	800dfdc <PIDChangeFlag>
	Flash_clear_sector1();
 800bd20:	f001 fb30 	bl	800d384 <Flash_clear_sector1>
	flashStoreNodes();
 800bd24:	f7fe f9e2 	bl	800a0ec <flashStoreNodes>
	Signal(7);
 800bd28:	2007      	movs	r0, #7
 800bd2a:	f002 f9c5 	bl	800e0b8 <Signal>
	printAllNodeExistence(&my_map);
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f7fe fbf0 	bl	800a514 <printAllNodeExistence>
	//printAllNode(&my_map); //drawを読み出す
	printMatrix16ValueFromNode(&my_map);
 800bd34:	4620      	mov	r0, r4
 800bd36:	f7fe fc2f 	bl	800a598 <printMatrix16ValueFromNode>
	printAllWeight(&my_map, &(my_mouse.now.node->pos) );
 800bd3a:	6929      	ldr	r1, [r5, #16]
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	3106      	adds	r1, #6
 800bd40:	f7fe fa9e 	bl	800a280 <printAllWeight>
 800bd44:	e7f3      	b.n	800bd2e <Explore+0x196>
		Sla.Pre = 2;
 800bd46:	4c18      	ldr	r4, [pc, #96]	; (800bda8 <Explore+0x210>)
		ExploreVelocity=240;
 800bd48:	4a27      	ldr	r2, [pc, #156]	; (800bde8 <Explore+0x250>)
		Sla.Alpha = 0.078;
 800bd4a:	4b28      	ldr	r3, [pc, #160]	; (800bdec <Explore+0x254>)
		ExploreVelocity=240;
 800bd4c:	6032      	str	r2, [r6, #0]
		Sla.Pre = 2;
 800bd4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		Sla.Fol = 16;
 800bd52:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
		Sla.Pre = 2;
 800bd56:	6021      	str	r1, [r4, #0]
		Sla.Fol = 16;
 800bd58:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.078;
 800bd5a:	60a3      	str	r3, [r4, #8]
		break;
 800bd5c:	e782      	b.n	800bc64 <Explore+0xcc>
		Sla.Pre = 2;
 800bd5e:	4c12      	ldr	r4, [pc, #72]	; (800bda8 <Explore+0x210>)
		ExploreVelocity=180;
 800bd60:	4923      	ldr	r1, [pc, #140]	; (800bdf0 <Explore+0x258>)
		Sla.Fol = 16.5;
 800bd62:	4a24      	ldr	r2, [pc, #144]	; (800bdf4 <Explore+0x25c>)
		Sla.Alpha = 0.043;
 800bd64:	4b24      	ldr	r3, [pc, #144]	; (800bdf8 <Explore+0x260>)
		ExploreVelocity=180;
 800bd66:	6031      	str	r1, [r6, #0]
		Sla.Pre = 2;
 800bd68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bd6c:	6021      	str	r1, [r4, #0]
		Sla.Fol = 16.5;
 800bd6e:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.043;
 800bd70:	60a3      	str	r3, [r4, #8]
		break;
 800bd72:	e777      	b.n	800bc64 <Explore+0xcc>
		Sla.Pre = 9;
 800bd74:	4c0c      	ldr	r4, [pc, #48]	; (800bda8 <Explore+0x210>)
		ExploreVelocity=90;
 800bd76:	4a21      	ldr	r2, [pc, #132]	; (800bdfc <Explore+0x264>)
		Sla.Alpha = 0.014;
 800bd78:	4b21      	ldr	r3, [pc, #132]	; (800be00 <Explore+0x268>)
		ExploreVelocity=90;
 800bd7a:	6032      	str	r2, [r6, #0]
		Sla.Pre = 9;
 800bd7c:	4921      	ldr	r1, [pc, #132]	; (800be04 <Explore+0x26c>)
		Sla.Fol = 20;
 800bd7e:	4a22      	ldr	r2, [pc, #136]	; (800be08 <Explore+0x270>)
		Sla.Pre = 9;
 800bd80:	6021      	str	r1, [r4, #0]
		Sla.Fol = 20;
 800bd82:	6062      	str	r2, [r4, #4]
		Sla.Alpha = 0.014;
 800bd84:	60a3      	str	r3, [r4, #8]
		break;
 800bd86:	e76d      	b.n	800bc64 <Explore+0xcc>
 800bd88:	4c07      	ldr	r4, [pc, #28]	; (800bda8 <Explore+0x210>)
 800bd8a:	e76b      	b.n	800bc64 <Explore+0xcc>
 800bd8c:	f3af 8000 	nop.w
 800bd90:	9f8f0d54 	.word	0x9f8f0d54
 800bd94:	409ee54a 	.word	0x409ee54a
 800bd98:	2000a174 	.word	0x2000a174
 800bd9c:	2000a1b8 	.word	0x2000a1b8
 800bda0:	2000a2ac 	.word	0x2000a2ac
 800bda4:	43960000 	.word	0x43960000
 800bda8:	2000a1d0 	.word	0x2000a1d0
 800bdac:	3def9db2 	.word	0x3def9db2
 800bdb0:	40400000 	.word	0x40400000
 800bdb4:	40a00000 	.word	0x40a00000
 800bdb8:	20009a24 	.word	0x20009a24
 800bdbc:	2000a2aa 	.word	0x2000a2aa
 800bdc0:	2000a428 	.word	0x2000a428
 800bdc4:	2000a17c 	.word	0x2000a17c
 800bdc8:	3f060a92 	.word	0x3f060a92
 800bdcc:	3f860a92 	.word	0x3f860a92
 800bdd0:	3fc90fdb 	.word	0x3fc90fdb
 800bdd4:	20009bd0 	.word	0x20009bd0
 800bdd8:	20000224 	.word	0x20000224
 800bddc:	42760000 	.word	0x42760000
 800bde0:	00000000 	.word	0x00000000
 800bde4:	42340000 	.word	0x42340000
 800bde8:	43700000 	.word	0x43700000
 800bdec:	3d9fbe77 	.word	0x3d9fbe77
 800bdf0:	43340000 	.word	0x43340000
 800bdf4:	41840000 	.word	0x41840000
 800bdf8:	3d3020c5 	.word	0x3d3020c5
 800bdfc:	42b40000 	.word	0x42b40000
 800be00:	3c656042 	.word	0x3c656042
 800be04:	41100000 	.word	0x41100000
 800be08:	41a00000 	.word	0x41a00000
 800be0c:	2000a424 	.word	0x2000a424

0800be10 <TestIMU>:
	//合っているか確認する
	printAllNodeExistence(&my_map);
}

void TestIMU()
{
 800be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IT_mode = IMU_TEST;
 800be12:	4b2c      	ldr	r3, [pc, #176]	; (800bec4 <TestIMU+0xb4>)
		printf("gyro : %f\r\n",ZGyro);

//		printf("%d, %hd, %f, %f, %f\r\n", m,ZGFilterd,  ZGyro, AngularV, Angle);

		timer1 = 0;
		t = 1;
 800be14:	4d2c      	ldr	r5, [pc, #176]	; (800bec8 <TestIMU+0xb8>)
	IT_mode = IMU_TEST;
 800be16:	2205      	movs	r2, #5
 800be18:	601a      	str	r2, [r3, #0]
		imu_check = IMU_init();
 800be1a:	f001 fc1f 	bl	800d65c <IMU_init>
		printf("imu_check 1ならOK: %d\r\n",imu_check);
 800be1e:	4601      	mov	r1, r0
 800be20:	482a      	ldr	r0, [pc, #168]	; (800becc <TestIMU+0xbc>)
 800be22:	f006 fd49 	bl	80128b8 <iprintf>
		imu_check =IMU_init();
 800be26:	f001 fc19 	bl	800d65c <IMU_init>
		printf("imu_check 1ならOK: %d\r\n",imu_check);
 800be2a:	4601      	mov	r1, r0
 800be2c:	4827      	ldr	r0, [pc, #156]	; (800becc <TestIMU+0xbc>)
 800be2e:	f006 fd43 	bl	80128b8 <iprintf>
		HAL_Delay(100);
 800be32:	2064      	movs	r0, #100	; 0x64
 800be34:	f002 fa88 	bl	800e348 <HAL_Delay>
		ZGyro = ReadIMU(0x37, 0x38);
 800be38:	2138      	movs	r1, #56	; 0x38
 800be3a:	2037      	movs	r0, #55	; 0x37
 800be3c:	f001 faee 	bl	800d41c <ReadIMU>
 800be40:	4b23      	ldr	r3, [pc, #140]	; (800bed0 <TestIMU+0xc0>)
 800be42:	ed83 0a00 	vstr	s0, [r3]
		printf("gyro : %f\r\n",ZGyro);
 800be46:	6818      	ldr	r0, [r3, #0]
 800be48:	f7fc fab6 	bl	80083b8 <__aeabi_f2d>
 800be4c:	4602      	mov	r2, r0
 800be4e:	460b      	mov	r3, r1
 800be50:	4820      	ldr	r0, [pc, #128]	; (800bed4 <TestIMU+0xc4>)
 800be52:	f006 fd31 	bl	80128b8 <iprintf>
		//割り込みを有効化

		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800be56:	4b20      	ldr	r3, [pc, #128]	; (800bed8 <TestIMU+0xc8>)
		timer1 = 0;
 800be58:	4a20      	ldr	r2, [pc, #128]	; (800bedc <TestIMU+0xcc>)
		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800be5a:	6818      	ldr	r0, [r3, #0]
		timer1 = 0;
 800be5c:	2400      	movs	r4, #0
		t = 1;
 800be5e:	2301      	movs	r3, #1
		timer1 = 0;
 800be60:	6014      	str	r4, [r2, #0]
		t = 1;
 800be62:	602b      	str	r3, [r5, #0]
		printf("timer1 : %d, 角度 : %f\r\n",timer1, Angle);
 800be64:	f7fc faa8 	bl	80083b8 <__aeabi_f2d>
 800be68:	460b      	mov	r3, r1
 800be6a:	4602      	mov	r2, r0
 800be6c:	4621      	mov	r1, r4
 800be6e:	481c      	ldr	r0, [pc, #112]	; (800bee0 <TestIMU+0xd0>)
 800be70:	f006 fd22 	bl	80128b8 <iprintf>
		HAL_TIM_Base_Start_IT(&htim1);
 800be74:	481b      	ldr	r0, [pc, #108]	; (800bee4 <TestIMU+0xd4>)
 800be76:	f004 f83f 	bl	800fef8 <HAL_TIM_Base_Start_IT>
		while(t == 1) //10s
 800be7a:	682b      	ldr	r3, [r5, #0]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d106      	bne.n	800be8e <TestIMU+0x7e>
		{
			printf("\r\n");
 800be80:	4c19      	ldr	r4, [pc, #100]	; (800bee8 <TestIMU+0xd8>)
 800be82:	4620      	mov	r0, r4
 800be84:	f006 fda0 	bl	80129c8 <puts>
		while(t == 1) //10s
 800be88:	682b      	ldr	r3, [r5, #0]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d0f9      	beq.n	800be82 <TestIMU+0x72>
		}

//		ag = Angle;
		t = 0;
 800be8e:	2400      	movs	r4, #0
		HAL_TIM_Base_Stop_IT(&htim1);
 800be90:	4814      	ldr	r0, [pc, #80]	; (800bee4 <TestIMU+0xd4>)
		t = 0;
 800be92:	602c      	str	r4, [r5, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 800be94:	f004 f840 	bl	800ff18 <HAL_TIM_Base_Stop_IT>
		HAL_Delay(1000);
 800be98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800be9c:	f002 fa54 	bl	800e348 <HAL_Delay>
 800bea0:	4d12      	ldr	r5, [pc, #72]	; (800beec <TestIMU+0xdc>)



			for(int i=0; i < 5000; i++) //0.007495 / 5000
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800bea2:	4f13      	ldr	r7, [pc, #76]	; (800bef0 <TestIMU+0xe0>)
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800bea4:	f241 3688 	movw	r6, #5000	; 0x1388
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800bea8:	f855 0b04 	ldr.w	r0, [r5], #4
 800beac:	f7fc fa84 	bl	80083b8 <__aeabi_f2d>
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	4638      	mov	r0, r7
 800beb6:	4621      	mov	r1, r4
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800beb8:	3401      	adds	r4, #1
				printf("%d, %f\r\n",i, debugVL[i]); //-0.001331
 800beba:	f006 fcfd 	bl	80128b8 <iprintf>
			for(int i=0; i < 5000; i++) //0.007495 / 5000
 800bebe:	42b4      	cmp	r4, r6
 800bec0:	d1f2      	bne.n	800bea8 <TestIMU+0x98>
 800bec2:	e7fe      	b.n	800bec2 <TestIMU+0xb2>
 800bec4:	2000a174 	.word	0x2000a174
 800bec8:	2000a170 	.word	0x2000a170
 800becc:	08016510 	.word	0x08016510
 800bed0:	200097e4 	.word	0x200097e4
 800bed4:	0801652c 	.word	0x0801652c
 800bed8:	20007f34 	.word	0x20007f34
 800bedc:	2000a180 	.word	0x2000a180
 800bee0:	08016538 	.word	0x08016538
 800bee4:	2000a674 	.word	0x2000a674
 800bee8:	08016720 	.word	0x08016720
 800beec:	20000228 	.word	0x20000228
 800bef0:	08016554 	.word	0x08016554

0800bef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bef8:	2400      	movs	r4, #0
{
 800befa:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800befc:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800bf00:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bf04:	4b45      	ldr	r3, [pc, #276]	; (800c01c <MX_GPIO_Init+0x128>)
 800bf06:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf08:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bf0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800bf0c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800c02c <MX_GPIO_Init+0x138>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800bf10:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800c030 <MX_GPIO_Init+0x13c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800bf14:	4f42      	ldr	r7, [pc, #264]	; (800c020 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800bf16:	4e43      	ldr	r6, [pc, #268]	; (800c024 <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bf18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bf1c:	631a      	str	r2, [r3, #48]	; 0x30
 800bf1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf20:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800bf24:	9200      	str	r2, [sp, #0]
 800bf26:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bf28:	9401      	str	r4, [sp, #4]
 800bf2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf2c:	f042 0204 	orr.w	r2, r2, #4
 800bf30:	631a      	str	r2, [r3, #48]	; 0x30
 800bf32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf34:	f002 0204 	and.w	r2, r2, #4
 800bf38:	9201      	str	r2, [sp, #4]
 800bf3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf3c:	9402      	str	r4, [sp, #8]
 800bf3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf40:	f042 0201 	orr.w	r2, r2, #1
 800bf44:	631a      	str	r2, [r3, #48]	; 0x30
 800bf46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf48:	f002 0201 	and.w	r2, r2, #1
 800bf4c:	9202      	str	r2, [sp, #8]
 800bf4e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf50:	9403      	str	r4, [sp, #12]
 800bf52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf54:	f042 0202 	orr.w	r2, r2, #2
 800bf58:	631a      	str	r2, [r3, #48]	; 0x30
 800bf5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf5c:	f002 0202 	and.w	r2, r2, #2
 800bf60:	9203      	str	r2, [sp, #12]
 800bf62:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bf64:	9404      	str	r4, [sp, #16]
 800bf66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf68:	f042 0208 	orr.w	r2, r2, #8
 800bf6c:	631a      	str	r2, [r3, #48]	; 0x30
 800bf6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf70:	f003 0308 	and.w	r3, r3, #8
 800bf74:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800bf76:	4622      	mov	r2, r4
 800bf78:	4648      	mov	r0, r9
 800bf7a:	2105      	movs	r1, #5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bf7c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800bf7e:	f003 f911 	bl	800f1a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800bf82:	4622      	mov	r2, r4
 800bf84:	4640      	mov	r0, r8
 800bf86:	f44f 7140 	mov.w	r1, #768	; 0x300
 800bf8a:	f003 f90b 	bl	800f1a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800bf8e:	4622      	mov	r2, r4
 800bf90:	4638      	mov	r0, r7
 800bf92:	2104      	movs	r1, #4
 800bf94:	f003 f906 	bl	800f1a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800bf98:	4622      	mov	r2, r4
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bfa0:	f003 f900 	bl	800f1a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bfa4:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfa6:	4648      	mov	r0, r9
 800bfa8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800bfaa:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bfac:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfb0:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfb4:	f002 fff2 	bl	800ef9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bfb8:	4b1b      	ldr	r3, [pc, #108]	; (800c028 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfba:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800bfbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfc0:	a905      	add	r1, sp, #20
 800bfc2:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bfc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfc8:	f002 ffe8 	bl	800ef9c <HAL_GPIO_Init>
  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bfcc:	4640      	mov	r0, r8
 800bfce:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800bfd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bfd4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfd6:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfda:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bfdc:	f002 ffde 	bl	800ef9c <HAL_GPIO_Init>
  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bfe0:	4638      	mov	r0, r7
 800bfe2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800bfe4:	2304      	movs	r3, #4
 800bfe6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfe8:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfec:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bfee:	f002 ffd5 	bl	800ef9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bff2:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bff6:	a905      	add	r1, sp, #20
 800bff8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bffa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bffc:	e9cd 5406 	strd	r5, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c000:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c002:	f002 ffcb 	bl	800ef9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800c006:	4622      	mov	r2, r4
 800c008:	4621      	mov	r1, r4
 800c00a:	2028      	movs	r0, #40	; 0x28
 800c00c:	f002 fc3a 	bl	800e884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c010:	2028      	movs	r0, #40	; 0x28
 800c012:	f002 fc6d 	bl	800e8f0 <HAL_NVIC_EnableIRQ>

}
 800c016:	b00b      	add	sp, #44	; 0x2c
 800c018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c01c:	40023800 	.word	0x40023800
 800c020:	40020c00 	.word	0x40020c00
 800c024:	40020400 	.word	0x40020400
 800c028:	10110000 	.word	0x10110000
 800c02c:	40020000 	.word	0x40020000
 800c030:	40020800 	.word	0x40020800

0800c034 <MX_DMA_Init>:
{
 800c034:	b510      	push	{r4, lr}
 800c036:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c038:	2400      	movs	r4, #0
 800c03a:	4b0f      	ldr	r3, [pc, #60]	; (800c078 <MX_DMA_Init+0x44>)
 800c03c:	9401      	str	r4, [sp, #4]
 800c03e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c040:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c044:	631a      	str	r2, [r3, #48]	; 0x30
 800c046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c04c:	4622      	mov	r2, r4
 800c04e:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c050:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c052:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c054:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800c056:	f002 fc15 	bl	800e884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800c05a:	2038      	movs	r0, #56	; 0x38
 800c05c:	f002 fc48 	bl	800e8f0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800c060:	4622      	mov	r2, r4
 800c062:	4621      	mov	r1, r4
 800c064:	203a      	movs	r0, #58	; 0x3a
 800c066:	f002 fc0d 	bl	800e884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c06a:	203a      	movs	r0, #58	; 0x3a
}
 800c06c:	b002      	add	sp, #8
 800c06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800c072:	f002 bc3d 	b.w	800e8f0 <HAL_NVIC_EnableIRQ>
 800c076:	bf00      	nop
 800c078:	40023800 	.word	0x40023800

0800c07c <MX_ADC1_Init>:
{
 800c07c:	b570      	push	{r4, r5, r6, lr}
  hadc1.Instance = ADC1;
 800c07e:	4c21      	ldr	r4, [pc, #132]	; (800c104 <MX_ADC1_Init+0x88>)
 800c080:	4b21      	ldr	r3, [pc, #132]	; (800c108 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c082:	4a22      	ldr	r2, [pc, #136]	; (800c10c <MX_ADC1_Init+0x90>)
  hadc1.Instance = ADC1;
 800c084:	6023      	str	r3, [r4, #0]
{
 800c086:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c088:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 800c08a:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c08c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc1.Init.NbrOfConversion = 3;
 800c090:	2603      	movs	r6, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c092:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c094:	6061      	str	r1, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c096:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c098:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c09a:	9300      	str	r3, [sp, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c09c:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c0a0:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c0a2:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c0a4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c0a8:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ENABLE;
 800c0aa:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800c0ac:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800c0ae:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c0b2:	6165      	str	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 3;
 800c0b4:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c0b6:	f002 f959 	bl	800e36c <HAL_ADC_Init>
 800c0ba:	b108      	cbz	r0, 800c0c0 <MX_ADC1_Init+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c0bc:	b672      	cpsid	i
 800c0be:	e7fe      	b.n	800c0be <MX_ADC1_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_10;
 800c0c0:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c0c2:	4669      	mov	r1, sp
 800c0c4:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c0c6:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c0c8:	9602      	str	r6, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_10;
 800c0ca:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c0cc:	f002 fb20 	bl	800e710 <HAL_ADC_ConfigChannel>
 800c0d0:	b108      	cbz	r0, 800c0d6 <MX_ADC1_Init+0x5a>
 800c0d2:	b672      	cpsid	i
 800c0d4:	e7fe      	b.n	800c0d4 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_14;
 800c0d6:	220e      	movs	r2, #14
  sConfig.Rank = 2;
 800c0d8:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c0da:	4669      	mov	r1, sp
 800c0dc:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 800c0de:	9200      	str	r2, [sp, #0]
  sConfig.Rank = 2;
 800c0e0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c0e2:	f002 fb15 	bl	800e710 <HAL_ADC_ConfigChannel>
 800c0e6:	b108      	cbz	r0, 800c0ec <MX_ADC1_Init+0x70>
 800c0e8:	b672      	cpsid	i
 800c0ea:	e7fe      	b.n	800c0ea <MX_ADC1_Init+0x6e>
  sConfig.Channel = ADC_CHANNEL_9;
 800c0ec:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c0ee:	4669      	mov	r1, sp
 800c0f0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800c0f2:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c0f6:	f002 fb0b 	bl	800e710 <HAL_ADC_ConfigChannel>
 800c0fa:	b108      	cbz	r0, 800c100 <MX_ADC1_Init+0x84>
 800c0fc:	b672      	cpsid	i
 800c0fe:	e7fe      	b.n	800c0fe <MX_ADC1_Init+0x82>
}
 800c100:	b004      	add	sp, #16
 800c102:	bd70      	pop	{r4, r5, r6, pc}
 800c104:	2000a58c 	.word	0x2000a58c
 800c108:	40012000 	.word	0x40012000
 800c10c:	0f000001 	.word	0x0f000001

0800c110 <MX_ADC2_Init>:
{
 800c110:	b570      	push	{r4, r5, r6, lr}
  hadc2.Instance = ADC2;
 800c112:	4c1c      	ldr	r4, [pc, #112]	; (800c184 <MX_ADC2_Init+0x74>)
 800c114:	4b1c      	ldr	r3, [pc, #112]	; (800c188 <MX_ADC2_Init+0x78>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c116:	4a1d      	ldr	r2, [pc, #116]	; (800c18c <MX_ADC2_Init+0x7c>)
  hadc2.Instance = ADC2;
 800c118:	6023      	str	r3, [r4, #0]
{
 800c11a:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 800c11c:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ENABLE;
 800c11e:	2501      	movs	r5, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c120:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc2.Init.NbrOfConversion = 2;
 800c124:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c126:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800c128:	6061      	str	r1, [r4, #4]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c12a:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800c12c:	60a3      	str	r3, [r4, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c12e:	9300      	str	r3, [sp, #0]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800c130:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c134:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c136:	60e3      	str	r3, [r4, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800c138:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c13c:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ENABLE;
 800c13e:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800c140:	7625      	strb	r5, [r4, #24]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800c142:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c146:	6165      	str	r5, [r4, #20]
  hadc2.Init.NbrOfConversion = 2;
 800c148:	61e6      	str	r6, [r4, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c14a:	f002 f90f 	bl	800e36c <HAL_ADC_Init>
 800c14e:	b108      	cbz	r0, 800c154 <MX_ADC2_Init+0x44>
 800c150:	b672      	cpsid	i
 800c152:	e7fe      	b.n	800c152 <MX_ADC2_Init+0x42>
  sConfig.Channel = ADC_CHANNEL_11;
 800c154:	220b      	movs	r2, #11
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c156:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c158:	4669      	mov	r1, sp
 800c15a:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800c15c:	9501      	str	r5, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_11;
 800c15e:	9200      	str	r2, [sp, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800c160:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c162:	f002 fad5 	bl	800e710 <HAL_ADC_ConfigChannel>
 800c166:	b108      	cbz	r0, 800c16c <MX_ADC2_Init+0x5c>
 800c168:	b672      	cpsid	i
 800c16a:	e7fe      	b.n	800c16a <MX_ADC2_Init+0x5a>
  sConfig.Channel = ADC_CHANNEL_15;
 800c16c:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c16e:	4669      	mov	r1, sp
 800c170:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_15;
 800c172:	e9cd 3600 	strd	r3, r6, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c176:	f002 facb 	bl	800e710 <HAL_ADC_ConfigChannel>
 800c17a:	b108      	cbz	r0, 800c180 <MX_ADC2_Init+0x70>
 800c17c:	b672      	cpsid	i
 800c17e:	e7fe      	b.n	800c17e <MX_ADC2_Init+0x6e>
}
 800c180:	b004      	add	sp, #16
 800c182:	bd70      	pop	{r4, r5, r6, pc}
 800c184:	2000a4ac 	.word	0x2000a4ac
 800c188:	40012100 	.word	0x40012100
 800c18c:	0f000001 	.word	0x0f000001

0800c190 <MX_TIM3_Init>:
{
 800c190:	b530      	push	{r4, r5, lr}
 800c192:	b08d      	sub	sp, #52	; 0x34
  htim3.Instance = TIM3;
 800c194:	4c14      	ldr	r4, [pc, #80]	; (800c1e8 <MX_TIM3_Init+0x58>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c196:	2220      	movs	r2, #32
 800c198:	2100      	movs	r1, #0
 800c19a:	a804      	add	r0, sp, #16
 800c19c:	f005 f88d 	bl	80112ba <memset>
  htim3.Instance = TIM3;
 800c1a0:	4b12      	ldr	r3, [pc, #72]	; (800c1ec <MX_TIM3_Init+0x5c>)
 800c1a2:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 60000-1;
 800c1a4:	f64e 225f 	movw	r2, #59999	; 0xea5f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c1a8:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c1aa:	2503      	movs	r5, #3
  htim3.Init.Period = 60000-1;
 800c1ac:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c1ae:	4620      	mov	r0, r4
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c1b0:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c1b2:	a903      	add	r1, sp, #12
  htim3.Init.Prescaler = 0;
 800c1b4:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c1b6:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c1b8:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c1ba:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c1bc:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c1be:	9302      	str	r3, [sp, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c1c0:	9503      	str	r5, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c1c2:	9205      	str	r2, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c1c4:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c1c6:	f004 fa2f 	bl	8010628 <HAL_TIM_Encoder_Init>
 800c1ca:	b108      	cbz	r0, 800c1d0 <MX_TIM3_Init+0x40>
 800c1cc:	b672      	cpsid	i
 800c1ce:	e7fe      	b.n	800c1ce <MX_TIM3_Init+0x3e>
 800c1d0:	4603      	mov	r3, r0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c1d2:	a901      	add	r1, sp, #4
 800c1d4:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c1d6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c1da:	f004 fbd5 	bl	8010988 <HAL_TIMEx_MasterConfigSynchronization>
 800c1de:	b108      	cbz	r0, 800c1e4 <MX_TIM3_Init+0x54>
 800c1e0:	b672      	cpsid	i
 800c1e2:	e7fe      	b.n	800c1e2 <MX_TIM3_Init+0x52>
}
 800c1e4:	b00d      	add	sp, #52	; 0x34
 800c1e6:	bd30      	pop	{r4, r5, pc}
 800c1e8:	2000a4f4 	.word	0x2000a4f4
 800c1ec:	40000400 	.word	0x40000400

0800c1f0 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 800c1f0:	4b0a      	ldr	r3, [pc, #40]	; (800c21c <MX_USART1_UART_Init+0x2c>)
 800c1f2:	4a0b      	ldr	r2, [pc, #44]	; (800c220 <MX_USART1_UART_Init+0x30>)
{
 800c1f4:	b510      	push	{r4, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c1f6:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 800c1f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c1fa:	f44f 5416 	mov.w	r4, #9600	; 0x2580
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c1fe:	2200      	movs	r2, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c200:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 800c202:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c204:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c206:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c20a:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c20c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c210:	f004 fcd2 	bl	8010bb8 <HAL_UART_Init>
 800c214:	b108      	cbz	r0, 800c21a <MX_USART1_UART_Init+0x2a>
 800c216:	b672      	cpsid	i
 800c218:	e7fe      	b.n	800c218 <MX_USART1_UART_Init+0x28>
}
 800c21a:	bd10      	pop	{r4, pc}
 800c21c:	2000a5d4 	.word	0x2000a5d4
 800c220:	40011000 	.word	0x40011000

0800c224 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800c224:	b500      	push	{lr}
 800c226:	b083      	sub	sp, #12
 800c228:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c22a:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 800c22e:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800c232:	2201      	movs	r2, #1
 800c234:	4803      	ldr	r0, [pc, #12]	; (800c244 <__io_putchar+0x20>)
 800c236:	f004 fcef 	bl	8010c18 <HAL_UART_Transmit>
}
 800c23a:	9801      	ldr	r0, [sp, #4]
 800c23c:	b003      	add	sp, #12
 800c23e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c242:	bf00      	nop
 800c244:	2000a5d4 	.word	0x2000a5d4

0800c248 <__io_getchar>:
int __io_getchar(void) {
 800c248:	b510      	push	{r4, lr}
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c24a:	4c07      	ldr	r4, [pc, #28]	; (800c268 <__io_getchar+0x20>)
int __io_getchar(void) {
 800c24c:	b082      	sub	sp, #8
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800c24e:	230a      	movs	r3, #10
 800c250:	2201      	movs	r2, #1
 800c252:	f10d 0107 	add.w	r1, sp, #7
 800c256:	4620      	mov	r0, r4
 800c258:	f004 fd3c 	bl	8010cd4 <HAL_UART_Receive>
while(Status != HAL_OK)
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d1f6      	bne.n	800c24e <__io_getchar+0x6>
}
 800c260:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c264:	b002      	add	sp, #8
 800c266:	bd10      	pop	{r4, pc}
 800c268:	2000a5d4 	.word	0x2000a5d4

0800c26c <SystemClock_Config>:
{
 800c26c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c26e:	2300      	movs	r3, #0
{
 800c270:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c272:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800c276:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c27a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c27e:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c282:	4920      	ldr	r1, [pc, #128]	; (800c304 <SystemClock_Config+0x98>)
 800c284:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c286:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c288:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c28a:	4a1f      	ldr	r2, [pc, #124]	; (800c308 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800c28c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800c290:	6408      	str	r0, [r1, #64]	; 0x40
 800c292:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c294:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800c298:	9101      	str	r1, [sp, #4]
 800c29a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c29c:	9302      	str	r3, [sp, #8]
 800c29e:	6813      	ldr	r3, [r2, #0]
 800c2a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c2a4:	6013      	str	r3, [r2, #0]
 800c2a6:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c2a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c2ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c2b0:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c2b2:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c2b4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c2b6:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c2b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c2bc:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c2be:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c2c0:	22a8      	movs	r2, #168	; 0xa8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c2c2:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c2c4:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c2c6:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c2c8:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c2ca:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c2ce:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c2d0:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c2d2:	f002 ff77 	bl	800f1c4 <HAL_RCC_OscConfig>
 800c2d6:	b108      	cbz	r0, 800c2dc <SystemClock_Config+0x70>
 800c2d8:	b672      	cpsid	i
 800c2da:	e7fe      	b.n	800c2da <SystemClock_Config+0x6e>
 800c2dc:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c2de:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c2e0:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c2e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c2e8:	a803      	add	r0, sp, #12
 800c2ea:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c2ec:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c2ee:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c2f0:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c2f2:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c2f6:	f003 f979 	bl	800f5ec <HAL_RCC_ClockConfig>
 800c2fa:	b108      	cbz	r0, 800c300 <SystemClock_Config+0x94>
 800c2fc:	b672      	cpsid	i
 800c2fe:	e7fe      	b.n	800c2fe <SystemClock_Config+0x92>
}
 800c300:	b014      	add	sp, #80	; 0x50
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	40023800 	.word	0x40023800
 800c308:	40007000 	.word	0x40007000

0800c30c <main>:
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 800c310:	f001 ffee 	bl	800e2f0 <HAL_Init>
  MX_GPIO_Init();
 800c314:	f7ff fdee 	bl	800bef4 <MX_GPIO_Init>
  MX_DMA_Init();
 800c318:	f7ff fe8c 	bl	800c034 <MX_DMA_Init>
  MX_ADC1_Init();
 800c31c:	f7ff feae 	bl	800c07c <MX_ADC1_Init>
  MX_ADC2_Init();
 800c320:	f7ff fef6 	bl	800c110 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 800c324:	f7ff ff64 	bl	800c1f0 <MX_USART1_UART_Init>
	ADCStart();
 800c328:	f000 ff46 	bl	800d1b8 <ADCStart>
	MX_TIM3_Init();
 800c32c:	f7ff ff30 	bl	800c190 <MX_TIM3_Init>
	BatteryCheck( (int)adc1[2] );
 800c330:	4ba0      	ldr	r3, [pc, #640]	; (800c5b4 <main+0x2a8>)
  htim2.Instance = TIM2;
 800c332:	4ca1      	ldr	r4, [pc, #644]	; (800c5b8 <main+0x2ac>)
	BatteryCheck( (int)adc1[2] );
 800c334:	6898      	ldr	r0, [r3, #8]
 800c336:	f001 fed1 	bl	800e0dc <BatteryCheck>
	ADCStop();
 800c33a:	f000 ff5b 	bl	800d1f4 <ADCStop>
	ModeSelect(0, 7, &startup_mode);
 800c33e:	f10d 0207 	add.w	r2, sp, #7
 800c342:	2107      	movs	r1, #7
 800c344:	2000      	movs	r0, #0
 800c346:	f001 ff23 	bl	800e190 <ModeSelect>
	Signal( startup_mode );
 800c34a:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800c34e:	f001 feb3 	bl	800e0b8 <Signal>
  htim2.Init.Period = 4200-1;
 800c352:	f241 0667 	movw	r6, #4199	; 0x1067
  SystemClock_Config();
 800c356:	f7ff ff89 	bl	800c26c <SystemClock_Config>
  MX_GPIO_Init();
 800c35a:	f7ff fdcb 	bl	800bef4 <MX_GPIO_Init>
  MX_DMA_Init();
 800c35e:	f7ff fe69 	bl	800c034 <MX_DMA_Init>
  MX_ADC1_Init();
 800c362:	f7ff fe8b 	bl	800c07c <MX_ADC1_Init>
  MX_ADC2_Init();
 800c366:	f7ff fed3 	bl	800c110 <MX_ADC2_Init>
  MX_TIM3_Init();
 800c36a:	f7ff ff11 	bl	800c190 <MX_TIM3_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c36e:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800c370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c374:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 800c376:	6022      	str	r2, [r4, #0]
  htim2.Init.Prescaler = 0;
 800c378:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c37a:	9308      	str	r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c37c:	9304      	str	r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c37e:	930f      	str	r3, [sp, #60]	; 0x3c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c380:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c382:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c384:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c386:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800c38a:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c38c:	9305      	str	r3, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c38e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800c392:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800c396:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  htim2.Init.Period = 4200-1;
 800c39a:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c39c:	f004 f8f0 	bl	8010580 <HAL_TIM_Base_Init>
 800c3a0:	b108      	cbz	r0, 800c3a6 <main+0x9a>
 800c3a2:	b672      	cpsid	i
 800c3a4:	e7fe      	b.n	800c3a4 <main+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c3a6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c3aa:	a908      	add	r1, sp, #32
 800c3ac:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c3ae:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c3b0:	f003 ff1c 	bl	80101ec <HAL_TIM_ConfigClockSource>
 800c3b4:	b108      	cbz	r0, 800c3ba <main+0xae>
 800c3b6:	b672      	cpsid	i
 800c3b8:	e7fe      	b.n	800c3b8 <main+0xac>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f004 f918 	bl	80105f0 <HAL_TIM_PWM_Init>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	b108      	cbz	r0, 800c3c8 <main+0xbc>
 800c3c4:	b672      	cpsid	i
 800c3c6:	e7fe      	b.n	800c3c6 <main+0xba>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c3c8:	a904      	add	r1, sp, #16
 800c3ca:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c3cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c3d0:	f004 fada 	bl	8010988 <HAL_TIMEx_MasterConfigSynchronization>
 800c3d4:	b108      	cbz	r0, 800c3da <main+0xce>
 800c3d6:	b672      	cpsid	i
 800c3d8:	e7fe      	b.n	800c3d8 <main+0xcc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c3da:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c3dc:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c3e0:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c3e2:	220c      	movs	r2, #12
 800c3e4:	a90f      	add	r1, sp, #60	; 0x3c
 800c3e6:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c3e8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c3ea:	f004 f9d3 	bl	8010794 <HAL_TIM_PWM_ConfigChannel>
 800c3ee:	4605      	mov	r5, r0
 800c3f0:	b108      	cbz	r0, 800c3f6 <main+0xea>
 800c3f2:	b672      	cpsid	i
 800c3f4:	e7fe      	b.n	800c3f4 <main+0xe8>
  HAL_TIM_MspPostInit(&htim2);
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 fb20 	bl	800ca3c <HAL_TIM_MspPostInit>
  hspi3.Instance = SPI3;
 800c3fc:	4b6f      	ldr	r3, [pc, #444]	; (800c5bc <main+0x2b0>)
 800c3fe:	4a70      	ldr	r2, [pc, #448]	; (800c5c0 <main+0x2b4>)
 800c400:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c402:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c406:	2202      	movs	r2, #2
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c408:	6059      	str	r1, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c40a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c40c:	2101      	movs	r1, #1
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c40e:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c412:	6159      	str	r1, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c414:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c416:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800c418:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c41a:	4618      	mov	r0, r3
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800c41c:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800c420:	e9c3 5508 	strd	r5, r5, [r3, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c424:	629d      	str	r5, [r3, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800c426:	61d9      	str	r1, [r3, #28]
  hspi3.Init.CRCPolynomial = 10;
 800c428:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c42a:	f003 fb35 	bl	800fa98 <HAL_SPI_Init>
 800c42e:	4604      	mov	r4, r0
 800c430:	b108      	cbz	r0, 800c436 <main+0x12a>
 800c432:	b672      	cpsid	i
 800c434:	e7fe      	b.n	800c434 <main+0x128>
  htim5.Instance = TIM5;
 800c436:	4d63      	ldr	r5, [pc, #396]	; (800c5c4 <main+0x2b8>)
  MX_USART1_UART_Init();
 800c438:	f7ff feda 	bl	800c1f0 <MX_USART1_UART_Init>
  htim5.Instance = TIM5;
 800c43c:	4b62      	ldr	r3, [pc, #392]	; (800c5c8 <main+0x2bc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c43e:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c440:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c442:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c446:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c44a:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c44e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800c452:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800c456:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c45a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim5.Init.Period = 4200-1;
 800c45e:	60ee      	str	r6, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c460:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c462:	61ac      	str	r4, [r5, #24]
  htim5.Instance = TIM5;
 800c464:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800c466:	f004 f88b 	bl	8010580 <HAL_TIM_Base_Init>
 800c46a:	b108      	cbz	r0, 800c470 <main+0x164>
 800c46c:	b672      	cpsid	i
 800c46e:	e7fe      	b.n	800c46e <main+0x162>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c470:	a908      	add	r1, sp, #32
 800c472:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c474:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800c476:	f003 feb9 	bl	80101ec <HAL_TIM_ConfigClockSource>
 800c47a:	b108      	cbz	r0, 800c480 <main+0x174>
 800c47c:	b672      	cpsid	i
 800c47e:	e7fe      	b.n	800c47e <main+0x172>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800c480:	4628      	mov	r0, r5
 800c482:	f004 f8b5 	bl	80105f0 <HAL_TIM_PWM_Init>
 800c486:	4603      	mov	r3, r0
 800c488:	b108      	cbz	r0, 800c48e <main+0x182>
 800c48a:	b672      	cpsid	i
 800c48c:	e7fe      	b.n	800c48c <main+0x180>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c48e:	4628      	mov	r0, r5
 800c490:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c492:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800c496:	f004 fa77 	bl	8010988 <HAL_TIMEx_MasterConfigSynchronization>
 800c49a:	b108      	cbz	r0, 800c4a0 <main+0x194>
 800c49c:	b672      	cpsid	i
 800c49e:	e7fe      	b.n	800c49e <main+0x192>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c4a0:	2060      	movs	r0, #96	; 0x60
  sConfigOC.Pulse = 0;
 800c4a2:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c4a4:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c4a6:	2204      	movs	r2, #4
 800c4a8:	a90f      	add	r1, sp, #60	; 0x3c
 800c4aa:	4846      	ldr	r0, [pc, #280]	; (800c5c4 <main+0x2b8>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c4ac:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c4ae:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c4b2:	f004 f96f 	bl	8010794 <HAL_TIM_PWM_ConfigChannel>
 800c4b6:	4605      	mov	r5, r0
 800c4b8:	b108      	cbz	r0, 800c4be <main+0x1b2>
 800c4ba:	b672      	cpsid	i
 800c4bc:	e7fe      	b.n	800c4bc <main+0x1b0>
  HAL_TIM_MspPostInit(&htim5);
 800c4be:	4841      	ldr	r0, [pc, #260]	; (800c5c4 <main+0x2b8>)
  htim4.Instance = TIM4;
 800c4c0:	4c42      	ldr	r4, [pc, #264]	; (800c5cc <main+0x2c0>)
  HAL_TIM_MspPostInit(&htim5);
 800c4c2:	f000 fabb 	bl	800ca3c <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	a810      	add	r0, sp, #64	; 0x40
 800c4cc:	f004 fef5 	bl	80112ba <memset>
  htim4.Instance = TIM4;
 800c4d0:	4b3f      	ldr	r3, [pc, #252]	; (800c5d0 <main+0x2c4>)
 800c4d2:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 60000-1;
 800c4d4:	f64e 215f 	movw	r1, #59999	; 0xea5f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c4d8:	2301      	movs	r3, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c4da:	2203      	movs	r2, #3
  htim4.Init.Period = 60000-1;
 800c4dc:	60e1      	str	r1, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c4de:	4620      	mov	r0, r4
 800c4e0:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c4e2:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c4e4:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c4e6:	9508      	str	r5, [sp, #32]
 800c4e8:	9509      	str	r5, [sp, #36]	; 0x24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c4ea:	e9c4 5501 	strd	r5, r5, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c4ee:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c4f0:	61a5      	str	r5, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c4f2:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c4f4:	f004 f898 	bl	8010628 <HAL_TIM_Encoder_Init>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	b108      	cbz	r0, 800c500 <main+0x1f4>
 800c4fc:	b672      	cpsid	i
 800c4fe:	e7fe      	b.n	800c4fe <main+0x1f2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c500:	4620      	mov	r0, r4
 800c502:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c504:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c508:	f004 fa3e 	bl	8010988 <HAL_TIMEx_MasterConfigSynchronization>
 800c50c:	4604      	mov	r4, r0
 800c50e:	b108      	cbz	r0, 800c514 <main+0x208>
 800c510:	b672      	cpsid	i
 800c512:	e7fe      	b.n	800c512 <main+0x206>
  htim8.Instance = TIM8;
 800c514:	4d2f      	ldr	r5, [pc, #188]	; (800c5d4 <main+0x2c8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c516:	9004      	str	r0, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c518:	4601      	mov	r1, r0
 800c51a:	2220      	movs	r2, #32
 800c51c:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c51e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c522:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c524:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c526:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800c52a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800c52e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800c532:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c534:	9403      	str	r4, [sp, #12]
  htim8.Init.Prescaler = 168-1;
 800c536:	26a7      	movs	r6, #167	; 0xa7
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c538:	f004 febf 	bl	80112ba <memset>
  htim8.Instance = TIM8;
 800c53c:	4926      	ldr	r1, [pc, #152]	; (800c5d8 <main+0x2cc>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c53e:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 50-1;
 800c540:	2231      	movs	r2, #49	; 0x31
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c542:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c544:	4628      	mov	r0, r5
  htim8.Init.RepetitionCounter = 0;
 800c546:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim8.Instance = TIM8;
 800c54a:	6029      	str	r1, [r5, #0]
  htim8.Init.Period = 50-1;
 800c54c:	60ea      	str	r2, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800c54e:	61ab      	str	r3, [r5, #24]
  htim8.Init.Prescaler = 168-1;
 800c550:	606e      	str	r6, [r5, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c552:	f004 f815 	bl	8010580 <HAL_TIM_Base_Init>
 800c556:	b108      	cbz	r0, 800c55c <main+0x250>
 800c558:	b672      	cpsid	i
 800c55a:	e7fe      	b.n	800c55a <main+0x24e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c55c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c560:	a904      	add	r1, sp, #16
 800c562:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c564:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800c566:	f003 fe41 	bl	80101ec <HAL_TIM_ConfigClockSource>
 800c56a:	b108      	cbz	r0, 800c570 <main+0x264>
 800c56c:	b672      	cpsid	i
 800c56e:	e7fe      	b.n	800c56e <main+0x262>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800c570:	4628      	mov	r0, r5
 800c572:	f004 f821 	bl	80105b8 <HAL_TIM_OC_Init>
 800c576:	4603      	mov	r3, r0
 800c578:	b108      	cbz	r0, 800c57e <main+0x272>
 800c57a:	b672      	cpsid	i
 800c57c:	e7fe      	b.n	800c57c <main+0x270>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c57e:	a902      	add	r1, sp, #8
 800c580:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c582:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c586:	f004 f9ff 	bl	8010988 <HAL_TIMEx_MasterConfigSynchronization>
 800c58a:	b108      	cbz	r0, 800c590 <main+0x284>
 800c58c:	b672      	cpsid	i
 800c58e:	e7fe      	b.n	800c58e <main+0x282>
  sConfigOC.Pulse = 25-1;
 800c590:	2318      	movs	r3, #24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c592:	4602      	mov	r2, r0
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c594:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c598:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c59c:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c59e:	2430      	movs	r4, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c5a0:	a908      	add	r1, sp, #32
 800c5a2:	4628      	mov	r0, r5
  sConfigOC.Pulse = 25-1;
 800c5a4:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800c5a6:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c5a8:	f004 f8c4 	bl	8010734 <HAL_TIM_OC_ConfigChannel>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	b1a8      	cbz	r0, 800c5dc <main+0x2d0>
 800c5b0:	b672      	cpsid	i
 800c5b2:	e7fe      	b.n	800c5b2 <main+0x2a6>
 800c5b4:	200097d0 	.word	0x200097d0
 800c5b8:	20009750 	.word	0x20009750
 800c5bc:	2000a534 	.word	0x2000a534
 800c5c0:	40003c00 	.word	0x40003c00
 800c5c4:	20009790 	.word	0x20009790
 800c5c8:	40000c00 	.word	0x40000c00
 800c5cc:	2000a46c 	.word	0x2000a46c
 800c5d0:	40000800 	.word	0x40000800
 800c5d4:	2000a42c 	.word	0x2000a42c
 800c5d8:	40010400 	.word	0x40010400
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800c5dc:	6829      	ldr	r1, [r5, #0]
 800c5de:	698a      	ldr	r2, [r1, #24]
 800c5e0:	f042 0208 	orr.w	r2, r2, #8
 800c5e4:	618a      	str	r2, [r1, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c5e6:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c5e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c5ec:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c5ee:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800c5f2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c5f6:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c5f8:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c5fa:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800c5fc:	f004 fa0a 	bl	8010a14 <HAL_TIMEx_ConfigBreakDeadTime>
 800c600:	4604      	mov	r4, r0
 800c602:	b108      	cbz	r0, 800c608 <main+0x2fc>
 800c604:	b672      	cpsid	i
 800c606:	e7fe      	b.n	800c606 <main+0x2fa>
  HAL_TIM_MspPostInit(&htim8);
 800c608:	4628      	mov	r0, r5
 800c60a:	f000 fa17 	bl	800ca3c <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 800c60e:	4b2d      	ldr	r3, [pc, #180]	; (800c6c4 <main+0x3b8>)
 800c610:	492d      	ldr	r1, [pc, #180]	; (800c6c8 <main+0x3bc>)
  htim1.Init.Prescaler = 168-1;
 800c612:	605e      	str	r6, [r3, #4]
  htim1.Init.Period = 1000-1;
 800c614:	f240 32e7 	movw	r2, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c618:	4618      	mov	r0, r3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c61a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800c61e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c622:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c626:	609c      	str	r4, [r3, #8]
  htim1.Init.RepetitionCounter = 0;
 800c628:	e9c3 4404 	strd	r4, r4, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c62c:	619c      	str	r4, [r3, #24]
  htim1.Instance = TIM1;
 800c62e:	6019      	str	r1, [r3, #0]
  htim1.Init.Period = 1000-1;
 800c630:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c632:	f003 ffa5 	bl	8010580 <HAL_TIM_Base_Init>
 800c636:	b108      	cbz	r0, 800c63c <main+0x330>
 800c638:	b672      	cpsid	i
 800c63a:	e7fe      	b.n	800c63a <main+0x32e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c63c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c640:	a90f      	add	r1, sp, #60	; 0x3c
 800c642:	4820      	ldr	r0, [pc, #128]	; (800c6c4 <main+0x3b8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c644:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c646:	f003 fdd1 	bl	80101ec <HAL_TIM_ConfigClockSource>
 800c64a:	4603      	mov	r3, r0
 800c64c:	b108      	cbz	r0, 800c652 <main+0x346>
 800c64e:	b672      	cpsid	i
 800c650:	e7fe      	b.n	800c650 <main+0x344>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c652:	a908      	add	r1, sp, #32
 800c654:	481b      	ldr	r0, [pc, #108]	; (800c6c4 <main+0x3b8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c656:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c65a:	f004 f995 	bl	8010988 <HAL_TIMEx_MasterConfigSynchronization>
 800c65e:	b118      	cbz	r0, 800c668 <main+0x35c>
 800c660:	b672      	cpsid	i
 800c662:	e7fe      	b.n	800c662 <main+0x356>
		  Explore();
 800c664:	f7ff fa98 	bl	800bb98 <Explore>
	  switch( startup_mode )
 800c668:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800c66c:	2b07      	cmp	r3, #7
 800c66e:	d8fd      	bhi.n	800c66c <main+0x360>
 800c670:	a201      	add	r2, pc, #4	; (adr r2, 800c678 <main+0x36c>)
 800c672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c676:	bf00      	nop
 800c678:	0800c699 	.word	0x0800c699
 800c67c:	0800c6bd 	.word	0x0800c6bd
 800c680:	0800c6b7 	.word	0x0800c6b7
 800c684:	0800c6b1 	.word	0x0800c6b1
 800c688:	0800c6ab 	.word	0x0800c6ab
 800c68c:	0800c6a5 	.word	0x0800c6a5
 800c690:	0800c665 	.word	0x0800c665
 800c694:	0800c69f 	.word	0x0800c69f
		  ParameterSetting();
 800c698:	f7fe ff64 	bl	800b564 <ParameterSetting>
		  break;
 800c69c:	e7e4      	b.n	800c668 <main+0x35c>
		  WritingFree();
 800c69e:	f7ff f801 	bl	800b6a4 <WritingFree>
		  break;
 800c6a2:	e7e1      	b.n	800c668 <main+0x35c>
		  TestIMU();
 800c6a4:	f7ff fbb4 	bl	800be10 <TestIMU>
		  break;
 800c6a8:	e7de      	b.n	800c668 <main+0x35c>
		  FastestRun();
 800c6aa:	f7ff f885 	bl	800b7b8 <FastestRun>
		  break;
 800c6ae:	e7db      	b.n	800c668 <main+0x35c>
		  Debug();
 800c6b0:	f7fe feee 	bl	800b490 <Debug>
		  break;
 800c6b4:	e7d8      	b.n	800c668 <main+0x35c>
		  GainTestDWall();
 800c6b6:	f7fe ff93 	bl	800b5e0 <GainTestDWall>
		  break;
 800c6ba:	e7d5      	b.n	800c668 <main+0x35c>
		  GainTestRWall();
 800c6bc:	f7fe ff5a 	bl	800b574 <GainTestRWall>
		  break;
 800c6c0:	e7d2      	b.n	800c668 <main+0x35c>
 800c6c2:	bf00      	nop
 800c6c4:	2000a674 	.word	0x2000a674
 800c6c8:	40010000 	.word	0x40010000

0800c6cc <Error_Handler>:
 800c6cc:	b672      	cpsid	i
 800c6ce:	e7fe      	b.n	800c6ce <Error_Handler+0x2>

0800c6d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c6d0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c6d2:	4b0c      	ldr	r3, [pc, #48]	; (800c704 <HAL_MspInit+0x34>)
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	9100      	str	r1, [sp, #0]
 800c6d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6de:	645a      	str	r2, [r3, #68]	; 0x44
 800c6e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6e2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800c6e6:	9200      	str	r2, [sp, #0]
 800c6e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c6ea:	9101      	str	r1, [sp, #4]
 800c6ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c6f2:	641a      	str	r2, [r3, #64]	; 0x40
 800c6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6fa:	9301      	str	r3, [sp, #4]
 800c6fc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c6fe:	b002      	add	sp, #8
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	40023800 	.word	0x40023800

0800c708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c708:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800c70a:	6803      	ldr	r3, [r0, #0]
 800c70c:	4a47      	ldr	r2, [pc, #284]	; (800c82c <HAL_ADC_MspInit+0x124>)
{
 800c70e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c710:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800c712:	4293      	cmp	r3, r2
{
 800c714:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c716:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800c71a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800c71e:	9409      	str	r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 800c720:	d004      	beq.n	800c72c <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800c722:	4a43      	ldr	r2, [pc, #268]	; (800c830 <HAL_ADC_MspInit+0x128>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d04e      	beq.n	800c7c6 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800c728:	b00b      	add	sp, #44	; 0x2c
 800c72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c72c:	4b41      	ldr	r3, [pc, #260]	; (800c834 <HAL_ADC_MspInit+0x12c>)
 800c72e:	9400      	str	r4, [sp, #0]
 800c730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 800c732:	4e41      	ldr	r6, [pc, #260]	; (800c838 <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c734:	4841      	ldr	r0, [pc, #260]	; (800c83c <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c73a:	645a      	str	r2, [r3, #68]	; 0x44
 800c73c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c73e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800c742:	9200      	str	r2, [sp, #0]
 800c744:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c746:	9401      	str	r4, [sp, #4]
 800c748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c74a:	f042 0204 	orr.w	r2, r2, #4
 800c74e:	631a      	str	r2, [r3, #48]	; 0x30
 800c750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c752:	f002 0204 	and.w	r2, r2, #4
 800c756:	9201      	str	r2, [sp, #4]
 800c758:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c75a:	9402      	str	r4, [sp, #8]
 800c75c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c75e:	f042 0202 	orr.w	r2, r2, #2
 800c762:	631a      	str	r2, [r3, #48]	; 0x30
 800c764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c766:	f003 0302 	and.w	r3, r3, #2
 800c76a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c76c:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800c76e:	2311      	movs	r3, #17
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c770:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c772:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800c774:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c776:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c778:	f002 fc10 	bl	800ef9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c77c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c77e:	a905      	add	r1, sp, #20
 800c780:	482f      	ldr	r0, [pc, #188]	; (800c840 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c782:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c784:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c788:	f002 fc08 	bl	800ef9c <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c78c:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c790:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Instance = DMA2_Stream0;
 800c794:	482b      	ldr	r0, [pc, #172]	; (800c844 <HAL_ADC_MspInit+0x13c>)
 800c796:	6030      	str	r0, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c798:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c79c:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c79e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c7a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c7a6:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c7aa:	4630      	mov	r0, r6
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c7ac:	6137      	str	r7, [r6, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c7ae:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800c7b2:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800c7b4:	f002 f8c4 	bl	800e940 <HAL_DMA_Init>
 800c7b8:	b108      	cbz	r0, 800c7be <HAL_ADC_MspInit+0xb6>
      Error_Handler();
 800c7ba:	f7ff ff87 	bl	800c6cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800c7be:	63ae      	str	r6, [r5, #56]	; 0x38
 800c7c0:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800c7c2:	b00b      	add	sp, #44	; 0x2c
 800c7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c7c6:	4b1b      	ldr	r3, [pc, #108]	; (800c834 <HAL_ADC_MspInit+0x12c>)
 800c7c8:	9403      	str	r4, [sp, #12]
 800c7ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc2.Instance = DMA2_Stream2;
 800c7cc:	4e1e      	ldr	r6, [pc, #120]	; (800c848 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c7ce:	481b      	ldr	r0, [pc, #108]	; (800c83c <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c7d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7d4:	645a      	str	r2, [r3, #68]	; 0x44
 800c7d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7d8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800c7dc:	9203      	str	r2, [sp, #12]
 800c7de:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c7e0:	9404      	str	r4, [sp, #16]
 800c7e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7e4:	f042 0204 	orr.w	r2, r2, #4
 800c7e8:	631a      	str	r2, [r3, #48]	; 0x30
 800c7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ec:	f003 0304 	and.w	r3, r3, #4
 800c7f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800c7f2:	2322      	movs	r3, #34	; 0x22
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c7f4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800c7f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7f8:	2303      	movs	r3, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c7fa:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7fc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c7fe:	f002 fbcd 	bl	800ef9c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800c802:	4a12      	ldr	r2, [pc, #72]	; (800c84c <HAL_ADC_MspInit+0x144>)
 800c804:	6032      	str	r2, [r6, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800c806:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c80a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800c80e:	6073      	str	r3, [r6, #4]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c810:	6130      	str	r0, [r6, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c812:	60b4      	str	r4, [r6, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c814:	60f4      	str	r4, [r6, #12]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c816:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c81a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800c81e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800c822:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800c826:	4630      	mov	r0, r6
 800c828:	e7c1      	b.n	800c7ae <HAL_ADC_MspInit+0xa6>
 800c82a:	bf00      	nop
 800c82c:	40012000 	.word	0x40012000
 800c830:	40012100 	.word	0x40012100
 800c834:	40023800 	.word	0x40023800
 800c838:	2000a614 	.word	0x2000a614
 800c83c:	40020800 	.word	0x40020800
 800c840:	40020400 	.word	0x40020400
 800c844:	40026410 	.word	0x40026410
 800c848:	2000a6b4 	.word	0x2000a6b4
 800c84c:	40026440 	.word	0x40026440

0800c850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c850:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 800c852:	6801      	ldr	r1, [r0, #0]
 800c854:	4a18      	ldr	r2, [pc, #96]	; (800c8b8 <HAL_SPI_MspInit+0x68>)
{
 800c856:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c858:	2300      	movs	r3, #0
  if(hspi->Instance==SPI3)
 800c85a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c85c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c860:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c864:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 800c866:	d001      	beq.n	800c86c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800c868:	b008      	add	sp, #32
 800c86a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800c86c:	f502 32fe 	add.w	r2, r2, #130048	; 0x1fc00
 800c870:	9301      	str	r3, [sp, #4]
 800c872:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c874:	4811      	ldr	r0, [pc, #68]	; (800c8bc <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800c876:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800c87a:	6411      	str	r1, [r2, #64]	; 0x40
 800c87c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c87e:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
 800c882:	9101      	str	r1, [sp, #4]
 800c884:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c886:	9302      	str	r3, [sp, #8]
 800c888:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c88a:	f043 0304 	orr.w	r3, r3, #4
 800c88e:	6313      	str	r3, [r2, #48]	; 0x30
 800c890:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c892:	f003 0304 	and.w	r3, r3, #4
 800c896:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c898:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c89a:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c89c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800c89e:	f44f 55e0 	mov.w	r5, #7168	; 0x1c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8a2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c8a4:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8a6:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c8aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c8ae:	f002 fb75 	bl	800ef9c <HAL_GPIO_Init>
}
 800c8b2:	b008      	add	sp, #32
 800c8b4:	bd70      	pop	{r4, r5, r6, pc}
 800c8b6:	bf00      	nop
 800c8b8:	40003c00 	.word	0x40003c00
 800c8bc:	40020800 	.word	0x40020800

0800c8c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c8c0:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 800c8c2:	6803      	ldr	r3, [r0, #0]
 800c8c4:	4a2b      	ldr	r2, [pc, #172]	; (800c974 <HAL_TIM_Base_MspInit+0xb4>)
 800c8c6:	4293      	cmp	r3, r2
{
 800c8c8:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 800c8ca:	d02a      	beq.n	800c922 <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800c8cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8d0:	d008      	beq.n	800c8e4 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800c8d2:	4a29      	ldr	r2, [pc, #164]	; (800c978 <HAL_TIM_Base_MspInit+0xb8>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d015      	beq.n	800c904 <HAL_TIM_Base_MspInit+0x44>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 800c8d8:	4a28      	ldr	r2, [pc, #160]	; (800c97c <HAL_TIM_Base_MspInit+0xbc>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d037      	beq.n	800c94e <HAL_TIM_Base_MspInit+0x8e>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800c8de:	b005      	add	sp, #20
 800c8e0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c8e4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	9201      	str	r2, [sp, #4]
 800c8ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8ee:	f042 0201 	orr.w	r2, r2, #1
 800c8f2:	641a      	str	r2, [r3, #64]	; 0x40
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	9301      	str	r3, [sp, #4]
 800c8fc:	9b01      	ldr	r3, [sp, #4]
}
 800c8fe:	b005      	add	sp, #20
 800c900:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c904:	4b1e      	ldr	r3, [pc, #120]	; (800c980 <HAL_TIM_Base_MspInit+0xc0>)
 800c906:	2200      	movs	r2, #0
 800c908:	9202      	str	r2, [sp, #8]
 800c90a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c90c:	f042 0208 	orr.w	r2, r2, #8
 800c910:	641a      	str	r2, [r3, #64]	; 0x40
 800c912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c914:	f003 0308 	and.w	r3, r3, #8
 800c918:	9302      	str	r3, [sp, #8]
 800c91a:	9b02      	ldr	r3, [sp, #8]
}
 800c91c:	b005      	add	sp, #20
 800c91e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c922:	2200      	movs	r2, #0
 800c924:	4b16      	ldr	r3, [pc, #88]	; (800c980 <HAL_TIM_Base_MspInit+0xc0>)
 800c926:	9200      	str	r2, [sp, #0]
 800c928:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c92a:	f041 0101 	orr.w	r1, r1, #1
 800c92e:	6459      	str	r1, [r3, #68]	; 0x44
 800c930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800c938:	2019      	movs	r0, #25
 800c93a:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c93c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800c93e:	f001 ffa1 	bl	800e884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c942:	2019      	movs	r0, #25
}
 800c944:	b005      	add	sp, #20
 800c946:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800c94a:	f001 bfd1 	b.w	800e8f0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800c94e:	4b0c      	ldr	r3, [pc, #48]	; (800c980 <HAL_TIM_Base_MspInit+0xc0>)
 800c950:	2200      	movs	r2, #0
 800c952:	9203      	str	r2, [sp, #12]
 800c954:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c956:	f041 0102 	orr.w	r1, r1, #2
 800c95a:	6459      	str	r1, [r3, #68]	; 0x44
 800c95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c95e:	f003 0302 	and.w	r3, r3, #2
 800c962:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800c964:	202c      	movs	r0, #44	; 0x2c
 800c966:	2101      	movs	r1, #1
    __HAL_RCC_TIM8_CLK_ENABLE();
 800c968:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800c96a:	f001 ff8b 	bl	800e884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800c96e:	202c      	movs	r0, #44	; 0x2c
 800c970:	e7e8      	b.n	800c944 <HAL_TIM_Base_MspInit+0x84>
 800c972:	bf00      	nop
 800c974:	40010000 	.word	0x40010000
 800c978:	40000c00 	.word	0x40000c00
 800c97c:	40010400 	.word	0x40010400
 800c980:	40023800 	.word	0x40023800

0800c984 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800c984:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM3)
 800c986:	6802      	ldr	r2, [r0, #0]
 800c988:	4927      	ldr	r1, [pc, #156]	; (800ca28 <HAL_TIM_Encoder_MspInit+0xa4>)
{
 800c98a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c98c:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM3)
 800c98e:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c990:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c994:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c998:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_encoder->Instance==TIM3)
 800c99a:	d024      	beq.n	800c9e6 <HAL_TIM_Encoder_MspInit+0x62>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM4)
 800c99c:	4923      	ldr	r1, [pc, #140]	; (800ca2c <HAL_TIM_Encoder_MspInit+0xa8>)
 800c99e:	428a      	cmp	r2, r1
 800c9a0:	d001      	beq.n	800c9a6 <HAL_TIM_Encoder_MspInit+0x22>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800c9a2:	b00a      	add	sp, #40	; 0x28
 800c9a4:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c9a6:	4a22      	ldr	r2, [pc, #136]	; (800ca30 <HAL_TIM_Encoder_MspInit+0xac>)
 800c9a8:	9303      	str	r3, [sp, #12]
 800c9aa:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9ac:	4821      	ldr	r0, [pc, #132]	; (800ca34 <HAL_TIM_Encoder_MspInit+0xb0>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c9ae:	f041 0104 	orr.w	r1, r1, #4
 800c9b2:	6411      	str	r1, [r2, #64]	; 0x40
 800c9b4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c9b6:	f001 0104 	and.w	r1, r1, #4
 800c9ba:	9103      	str	r1, [sp, #12]
 800c9bc:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9be:	9304      	str	r3, [sp, #16]
 800c9c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c9c2:	f043 0302 	orr.w	r3, r3, #2
 800c9c6:	6313      	str	r3, [r2, #48]	; 0x30
 800c9c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c9ca:	f003 0302 	and.w	r3, r3, #2
 800c9ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c9d0:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9d2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9d4:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9d6:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800c9d8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9da:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9de:	f002 fadd 	bl	800ef9c <HAL_GPIO_Init>
}
 800c9e2:	b00a      	add	sp, #40	; 0x28
 800c9e4:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c9e6:	4a12      	ldr	r2, [pc, #72]	; (800ca30 <HAL_TIM_Encoder_MspInit+0xac>)
 800c9e8:	9301      	str	r3, [sp, #4]
 800c9ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9ec:	4812      	ldr	r0, [pc, #72]	; (800ca38 <HAL_TIM_Encoder_MspInit+0xb4>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c9ee:	f041 0102 	orr.w	r1, r1, #2
 800c9f2:	6411      	str	r1, [r2, #64]	; 0x40
 800c9f4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c9f6:	f001 0102 	and.w	r1, r1, #2
 800c9fa:	9101      	str	r1, [sp, #4]
 800c9fc:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9fe:	9302      	str	r3, [sp, #8]
 800ca00:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ca02:	f043 0301 	orr.w	r3, r3, #1
 800ca06:	6313      	str	r3, [r2, #48]	; 0x30
 800ca08:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ca0a:	f003 0301 	and.w	r3, r3, #1
 800ca0e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ca10:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca12:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca14:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca16:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ca18:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca1e:	f002 fabd 	bl	800ef9c <HAL_GPIO_Init>
}
 800ca22:	b00a      	add	sp, #40	; 0x28
 800ca24:	bd10      	pop	{r4, pc}
 800ca26:	bf00      	nop
 800ca28:	40000400 	.word	0x40000400
 800ca2c:	40000800 	.word	0x40000800
 800ca30:	40023800 	.word	0x40023800
 800ca34:	40020400 	.word	0x40020400
 800ca38:	40020000 	.word	0x40020000

0800ca3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ca3c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM2)
 800ca3e:	6803      	ldr	r3, [r0, #0]
{
 800ca40:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca42:	2400      	movs	r4, #0
  if(htim->Instance==TIM2)
 800ca44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca48:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800ca4c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800ca50:	9409      	str	r4, [sp, #36]	; 0x24
  if(htim->Instance==TIM2)
 800ca52:	d007      	beq.n	800ca64 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 800ca54:	4a30      	ldr	r2, [pc, #192]	; (800cb18 <HAL_TIM_MspPostInit+0xdc>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d049      	beq.n	800caee <HAL_TIM_MspPostInit+0xb2>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 800ca5a:	4a30      	ldr	r2, [pc, #192]	; (800cb1c <HAL_TIM_MspPostInit+0xe0>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d01b      	beq.n	800ca98 <HAL_TIM_MspPostInit+0x5c>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800ca60:	b00a      	add	sp, #40	; 0x28
 800ca62:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca64:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800ca68:	9401      	str	r4, [sp, #4]
 800ca6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca6c:	482c      	ldr	r0, [pc, #176]	; (800cb20 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca6e:	f042 0201 	orr.w	r2, r2, #1
 800ca72:	631a      	str	r2, [r3, #48]	; 0x30
 800ca74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca76:	f003 0301 	and.w	r3, r3, #1
 800ca7a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca7c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ca7e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca80:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ca82:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca84:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca86:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca88:	e9cd 5405 	strd	r5, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ca8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca90:	f002 fa84 	bl	800ef9c <HAL_GPIO_Init>
}
 800ca94:	b00a      	add	sp, #40	; 0x28
 800ca96:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca98:	4b22      	ldr	r3, [pc, #136]	; (800cb24 <HAL_TIM_MspPostInit+0xe8>)
 800ca9a:	9403      	str	r4, [sp, #12]
 800ca9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca9e:	4820      	ldr	r0, [pc, #128]	; (800cb20 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800caa0:	f042 0201 	orr.w	r2, r2, #1
 800caa4:	631a      	str	r2, [r3, #48]	; 0x30
 800caa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800caa8:	f002 0201 	and.w	r2, r2, #1
 800caac:	9203      	str	r2, [sp, #12]
 800caae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cab0:	9404      	str	r4, [sp, #16]
 800cab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cab4:	f042 0204 	orr.w	r2, r2, #4
 800cab8:	631a      	str	r2, [r3, #48]	; 0x30
 800caba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cabc:	f003 0304 	and.w	r3, r3, #4
 800cac0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cac2:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cac4:	2320      	movs	r3, #32
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cac6:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cac8:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800caca:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cacc:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cace:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cad2:	f002 fa63 	bl	800ef9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cad6:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cad8:	a905      	add	r1, sp, #20
 800cada:	4813      	ldr	r0, [pc, #76]	; (800cb28 <HAL_TIM_MspPostInit+0xec>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cadc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cade:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cae0:	e9cd 4407 	strd	r4, r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cae4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cae6:	f002 fa59 	bl	800ef9c <HAL_GPIO_Init>
}
 800caea:	b00a      	add	sp, #40	; 0x28
 800caec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800caee:	4b0d      	ldr	r3, [pc, #52]	; (800cb24 <HAL_TIM_MspPostInit+0xe8>)
 800caf0:	9402      	str	r4, [sp, #8]
 800caf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800caf4:	480a      	ldr	r0, [pc, #40]	; (800cb20 <HAL_TIM_MspPostInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800caf6:	f042 0201 	orr.w	r2, r2, #1
 800cafa:	631a      	str	r2, [r3, #48]	; 0x30
 800cafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cafe:	f003 0301 	and.w	r3, r3, #1
 800cb02:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb04:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cb06:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb08:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800cb0a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb0c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb10:	f002 fa44 	bl	800ef9c <HAL_GPIO_Init>
}
 800cb14:	b00a      	add	sp, #40	; 0x28
 800cb16:	bd70      	pop	{r4, r5, r6, pc}
 800cb18:	40000c00 	.word	0x40000c00
 800cb1c:	40010400 	.word	0x40010400
 800cb20:	40020000 	.word	0x40020000
 800cb24:	40023800 	.word	0x40023800
 800cb28:	40020800 	.word	0x40020800

0800cb2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cb2c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800cb2e:	6801      	ldr	r1, [r0, #0]
 800cb30:	4a18      	ldr	r2, [pc, #96]	; (800cb94 <HAL_UART_MspInit+0x68>)
{
 800cb32:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb34:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 800cb36:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb38:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800cb3c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800cb40:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800cb42:	d001      	beq.n	800cb48 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800cb44:	b008      	add	sp, #32
 800cb46:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800cb48:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800cb4c:	9301      	str	r3, [sp, #4]
 800cb4e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb50:	4811      	ldr	r0, [pc, #68]	; (800cb98 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800cb52:	f041 0110 	orr.w	r1, r1, #16
 800cb56:	6451      	str	r1, [r2, #68]	; 0x44
 800cb58:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800cb5a:	f001 0110 	and.w	r1, r1, #16
 800cb5e:	9101      	str	r1, [sp, #4]
 800cb60:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb62:	9302      	str	r3, [sp, #8]
 800cb64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cb66:	f043 0301 	orr.w	r3, r3, #1
 800cb6a:	6313      	str	r3, [r2, #48]	; 0x30
 800cb6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cb6e:	f003 0301 	and.w	r3, r3, #1
 800cb72:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb74:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cb76:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb78:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cb7a:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb7e:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb80:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb82:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cb86:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb8a:	f002 fa07 	bl	800ef9c <HAL_GPIO_Init>
}
 800cb8e:	b008      	add	sp, #32
 800cb90:	bd70      	pop	{r4, r5, r6, pc}
 800cb92:	bf00      	nop
 800cb94:	40011000 	.word	0x40011000
 800cb98:	40020000 	.word	0x40020000

0800cb9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cb9c:	e7fe      	b.n	800cb9c <NMI_Handler>
 800cb9e:	bf00      	nop

0800cba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cba0:	e7fe      	b.n	800cba0 <HardFault_Handler>
 800cba2:	bf00      	nop

0800cba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cba4:	e7fe      	b.n	800cba4 <MemManage_Handler>
 800cba6:	bf00      	nop

0800cba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cba8:	e7fe      	b.n	800cba8 <BusFault_Handler>
 800cbaa:	bf00      	nop

0800cbac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cbac:	e7fe      	b.n	800cbac <UsageFault_Handler>
 800cbae:	bf00      	nop

0800cbb0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop

0800cbb4 <DebugMon_Handler>:
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop

0800cbb8 <PendSV_Handler>:
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop

0800cbbc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cbbc:	f001 bbb2 	b.w	800e324 <HAL_IncTick>

0800cbc0 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cbc0:	4801      	ldr	r0, [pc, #4]	; (800cbc8 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800cbc2:	f003 bbc1 	b.w	8010348 <HAL_TIM_IRQHandler>
 800cbc6:	bf00      	nop
 800cbc8:	2000a674 	.word	0x2000a674

0800cbcc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800cbcc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cbd0:	f002 baec 	b.w	800f1ac <HAL_GPIO_EXTI_IRQHandler>

0800cbd4 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cbd4:	4801      	ldr	r0, [pc, #4]	; (800cbdc <TIM8_UP_TIM13_IRQHandler+0x8>)
 800cbd6:	f003 bbb7 	b.w	8010348 <HAL_TIM_IRQHandler>
 800cbda:	bf00      	nop
 800cbdc:	2000a42c 	.word	0x2000a42c

0800cbe0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800cbe0:	4801      	ldr	r0, [pc, #4]	; (800cbe8 <DMA2_Stream0_IRQHandler+0x8>)
 800cbe2:	f001 bfcd 	b.w	800eb80 <HAL_DMA_IRQHandler>
 800cbe6:	bf00      	nop
 800cbe8:	2000a614 	.word	0x2000a614

0800cbec <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800cbec:	4801      	ldr	r0, [pc, #4]	; (800cbf4 <DMA2_Stream2_IRQHandler+0x8>)
 800cbee:	f001 bfc7 	b.w	800eb80 <HAL_DMA_IRQHandler>
 800cbf2:	bf00      	nop
 800cbf4:	2000a6b4 	.word	0x2000a6b4

0800cbf8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cbf8:	4b05      	ldr	r3, [pc, #20]	; (800cc10 <SystemInit+0x18>)
 800cbfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cbfe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cc02:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800cc06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cc0a:	6099      	str	r1, [r3, #8]
#endif
}
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	e000ed00 	.word	0xe000ed00

0800cc14 <initSearchData>:

#include "Action.h"
#include "test.h"

void initSearchData(maze_node *my_maze, profile *Mouse)
{
 800cc14:	b570      	push	{r4, r5, r6, lr}
 800cc16:	4604      	mov	r4, r0
 800cc18:	b082      	sub	sp, #8
 800cc1a:	460d      	mov	r5, r1
    initMaze(my_maze);
 800cc1c:	f7fd fc02 	bl	800a424 <initMaze>
    initWeight(my_maze); //3/20ms
 800cc20:	4620      	mov	r0, r4
 800cc22:	f7fd fbe3 	bl	800a3ec <initWeight>

    //状態の初期化
    initProfile(Mouse, my_maze);
 800cc26:	4621      	mov	r1, r4
 800cc28:	4628      	mov	r0, r5
 800cc2a:	f7fe fa8f 	bl	800b14c <initProfile>
    Mouse->now.node = &(my_maze->RawNode[0][0]);
    Mouse->next.node = &(my_maze->RawNode[0][1]);
 800cc2e:	f104 0308 	add.w	r3, r4, #8
 800cc32:	61eb      	str	r3, [r5, #28]

    //スタート座標にいる状態で、現在の重みを更新
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800cc34:	2601      	movs	r6, #1
 800cc36:	2302      	movs	r3, #2
 800cc38:	786a      	ldrb	r2, [r5, #1]
 800cc3a:	7829      	ldrb	r1, [r5, #0]
    Mouse->now.node = &(my_maze->RawNode[0][0]);
 800cc3c:	612c      	str	r4, [r5, #16]
     updateAllNodeWeight(my_maze, Mouse->goal_lesser.x, Mouse->goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800cc3e:	4620      	mov	r0, r4
 800cc40:	e9cd 3600 	strd	r3, r6, [sp]
 800cc44:	f7fd fdc0 	bl	800a7c8 <updateAllNodeWeight>
//     updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
}
 800cc48:	b002      	add	sp, #8
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}

0800cc4c <updateRealSearch>:

void updateRealSearch()
{
 800cc4c:	b570      	push	{r4, r5, r6, lr}
	//wall_state wall_st[4]={0};

	//壁センサ値を読んで、各方角の壁の有無を判定
		//区画進入直前なので、更新予定の方角と座標がNextに入っているはず
		//前後左右の値として入れる
	shiftState(&my_mouse);
 800cc4e:	4d6f      	ldr	r5, [pc, #444]	; (800ce0c <updateRealSearch+0x1c0>)
{
 800cc50:	b082      	sub	sp, #8
	shiftState(&my_mouse);
 800cc52:	4628      	mov	r0, r5
 800cc54:	f7fe fa94 	bl	800b180 <shiftState>

    switch (my_mouse.now.car)
 800cc58:	7aab      	ldrb	r3, [r5, #10]
 800cc5a:	2b06      	cmp	r3, #6
 800cc5c:	f200 80d0 	bhi.w	800ce00 <updateRealSearch+0x1b4>
 800cc60:	e8df f003 	tbb	[pc, r3]
 800cc64:	ce76cea2 	.word	0xce76cea2
 800cc68:	ce4a      	.short	0xce4a
 800cc6a:	04          	.byte	0x04
 800cc6b:	00          	.byte	0x00
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
    	wall_dir[0] = NOWALL;
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
        break;
    case west:
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cc6c:	4b68      	ldr	r3, [pc, #416]	; (800ce10 <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cc6e:	eddf 5a69 	vldr	s11, [pc, #420]	; 800ce14 <updateRealSearch+0x1c8>
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cc72:	edd3 7a00 	vldr	s15, [r3]
 800cc76:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cc7a:	ed93 5a01 	vldr	s10, [r3, #4]
    	wall_dir[1] = NOWALL;
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cc7e:	eddf 6a66 	vldr	s13, [pc, #408]	; 800ce18 <updateRealSearch+0x1cc>
 800cc82:	ed93 6a02 	vldr	s12, [r3, #8]
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cc86:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800ce1c <updateRealSearch+0x1d0>
 800cc8a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800cc8e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cc92:	eeb4 5ae5 	vcmpe.f32	s10, s11
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cc96:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cc9e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800cca2:	bfcc      	ite	gt
 800cca4:	2601      	movgt	r6, #1
 800cca6:	2600      	movle	r6, #0
 800cca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ccac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ccb0:	bfcc      	ite	gt
 800ccb2:	2101      	movgt	r1, #1
 800ccb4:	2100      	movle	r1, #0
 800ccb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccba:	bfcc      	ite	gt
 800ccbc:	2201      	movgt	r2, #1
 800ccbe:	2200      	movle	r2, #0
        break;
 800ccc0:	2000      	movs	r0, #0
//	Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
//	Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
//	Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
//	Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
    //アクションが終わるときがノードの上にいる状態なので、状態シフト済みとする（この関数はアクション中に呼び出される想定）
    my_mouse.now.wall.north = wall_dir[0];
 800ccc2:	7b2c      	ldrb	r4, [r5, #12]

	//getWallNow(&(my_mouse->now), &wall[0]);

    //現在方角、壁は、合ってる。座標とノードは？
    //ここで壁の存在を反映
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800ccc4:	7a6b      	ldrb	r3, [r5, #9]
    my_mouse.now.wall.north = wall_dir[0];
 800ccc6:	f366 0401 	bfi	r4, r6, #0, #2
    my_mouse.now.wall.east = wall_dir[1];
 800ccca:	f360 0483 	bfi	r4, r0, #2, #2
    my_mouse.now.wall.south = wall_dir[2];
 800ccce:	f361 1405 	bfi	r4, r1, #4, #2
    my_mouse.now.wall.west = wall_dir[3];
 800ccd2:	f362 1487 	bfi	r4, r2, #6, #2
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800ccd6:	4952      	ldr	r1, [pc, #328]	; (800ce20 <updateRealSearch+0x1d4>)
 800ccd8:	7a2a      	ldrb	r2, [r5, #8]
 800ccda:	4852      	ldr	r0, [pc, #328]	; (800ce24 <updateRealSearch+0x1d8>)
    my_mouse.now.wall.west = wall_dir[3];
 800ccdc:	732c      	strb	r4, [r5, #12]
	updateNodeThree(&my_map, &(my_mouse.now), my_mouse.now.pos.x, my_mouse.now.pos.y);
 800ccde:	f7fd fcab 	bl	800a638 <updateNodeThree>

	//壁の存在を基に重みマップを更新
	updateAllNodeWeight(&my_map, my_mouse.goal_lesser.x, my_mouse.goal_lesser.y, GOAL_SIZE_X, GOAL_SIZE_Y, 0x01);
 800cce2:	2401      	movs	r4, #1
 800cce4:	2302      	movs	r3, #2
 800cce6:	786a      	ldrb	r2, [r5, #1]
 800cce8:	7829      	ldrb	r1, [r5, #0]
 800ccea:	484e      	ldr	r0, [pc, #312]	; (800ce24 <updateRealSearch+0x1d8>)
 800ccec:	e9cd 3400 	strd	r3, r4, [sp]
 800ccf0:	f7fd fd6a 	bl	800a7c8 <updateAllNodeWeight>
}
 800ccf4:	b002      	add	sp, #8
 800ccf6:	bd70      	pop	{r4, r5, r6, pc}
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ccf8:	4b45      	ldr	r3, [pc, #276]	; (800ce10 <updateRealSearch+0x1c4>)
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800ccfa:	eddf 5a47 	vldr	s11, [pc, #284]	; 800ce18 <updateRealSearch+0x1cc>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ccfe:	edd3 7a00 	vldr	s15, [r3]
 800cd02:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cd06:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cd0a:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cd0e:	ed9f 6a43 	vldr	s12, [pc, #268]	; 800ce1c <updateRealSearch+0x1d0>
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cd12:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ce14 <updateRealSearch+0x1c8>
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cd16:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800cd1a:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800cd1e:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[1] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cd22:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800cd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cd2a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800cd2e:	bfcc      	ite	gt
 800cd30:	2001      	movgt	r0, #1
 800cd32:	2000      	movle	r0, #0
 800cd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cd38:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cd3c:	bfcc      	ite	gt
 800cd3e:	2101      	movgt	r1, #1
 800cd40:	2100      	movle	r1, #0
 800cd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd46:	bfcc      	ite	gt
 800cd48:	2201      	movgt	r2, #1
 800cd4a:	2200      	movle	r2, #0
        break;
 800cd4c:	2600      	movs	r6, #0
 800cd4e:	e7b8      	b.n	800ccc2 <updateRealSearch+0x76>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cd50:	4b2f      	ldr	r3, [pc, #188]	; (800ce10 <updateRealSearch+0x1c4>)
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cd52:	eddf 5a31 	vldr	s11, [pc, #196]	; 800ce18 <updateRealSearch+0x1cc>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cd56:	edd3 7a00 	vldr	s15, [r3]
 800cd5a:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cd5e:	edd3 6a01 	vldr	s13, [r3, #4]
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cd62:	ed93 5a02 	vldr	s10, [r3, #8]
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cd66:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ce1c <updateRealSearch+0x1d0>
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cd6a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800ce14 <updateRealSearch+0x1c8>
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cd6e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800cd72:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800cd76:	ee67 7aa4 	vmul.f32	s15, s15, s9
    	wall_dir[0] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cd7a:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800cd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cd82:	eef4 7ac6 	vcmpe.f32	s15, s12
 800cd86:	bfcc      	ite	gt
 800cd88:	2601      	movgt	r6, #1
 800cd8a:	2600      	movle	r6, #0
 800cd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[2] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cd90:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cd94:	bfcc      	ite	gt
 800cd96:	2001      	movgt	r0, #1
 800cd98:	2000      	movle	r0, #0
 800cd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd9e:	bfcc      	ite	gt
 800cda0:	2101      	movgt	r1, #1
 800cda2:	2100      	movle	r1, #0
        break;
 800cda4:	2200      	movs	r2, #0
 800cda6:	e78c      	b.n	800ccc2 <updateRealSearch+0x76>
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cda8:	4b19      	ldr	r3, [pc, #100]	; (800ce10 <updateRealSearch+0x1c4>)
 800cdaa:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 800ce1c <updateRealSearch+0x1d0>
 800cdae:	edd3 7a00 	vldr	s15, [r3]
 800cdb2:	edd3 4a03 	vldr	s9, [r3, #12]
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cdb6:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800ce14 <updateRealSearch+0x1c8>
 800cdba:	edd3 5a01 	vldr	s11, [r3, #4]
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cdbe:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800ce18 <updateRealSearch+0x1cc>
 800cdc2:	edd3 6a02 	vldr	s13, [r3, #8]
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cdc6:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800cdca:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800cdce:	ee67 7aa4 	vmul.f32	s15, s15, s9
        break;
 800cdd2:	2100      	movs	r1, #0
    	wall_dir[0] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800cdd4:	eef4 7ac5 	vcmpe.f32	s15, s10
 800cdd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[1] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800cddc:	eef4 5ac6 	vcmpe.f32	s11, s12
 800cde0:	bfcc      	ite	gt
 800cde2:	2601      	movgt	r6, #1
 800cde4:	460e      	movle	r6, r1
 800cde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	wall_dir[3] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800cdea:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cdee:	bfcc      	ite	gt
 800cdf0:	2001      	movgt	r0, #1
 800cdf2:	4608      	movle	r0, r1
 800cdf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf8:	bfcc      	ite	gt
 800cdfa:	2201      	movgt	r2, #1
 800cdfc:	460a      	movle	r2, r1
        break;
 800cdfe:	e760      	b.n	800ccc2 <updateRealSearch+0x76>
    switch (my_mouse.now.car)
 800ce00:	2200      	movs	r2, #0
 800ce02:	4611      	mov	r1, r2
 800ce04:	4610      	mov	r0, r2
 800ce06:	4616      	mov	r6, r2
 800ce08:	e75b      	b.n	800ccc2 <updateRealSearch+0x76>
 800ce0a:	bf00      	nop
 800ce0c:	20009a24 	.word	0x20009a24
 800ce10:	2000a1f8 	.word	0x2000a1f8
 800ce14:	42b40000 	.word	0x42b40000
 800ce18:	42c80000 	.word	0x42c80000
 800ce1c:	42340000 	.word	0x42340000
 800ce20:	20009a2c 	.word	0x20009a2c
 800ce24:	20009bd0 	.word	0x20009bd0

0800ce28 <getNextDirection>:
//↑と↓は新ノードに来た時の処理なので、アクションの区切りをずらせばよさそう。
//現情報と次情報から次の進行方向を得る処理

void getNextDirection(maze_node *my_maze, profile *Mouse, char turn_mode)
{
 800ce28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce2c:	460c      	mov	r4, r1
	//選ぶノードがおかしい
	//重みが、壁がある方が小さくなってしまっている.
	//

	//メインでノード選択
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800ce2e:	2301      	movs	r3, #1
 800ce30:	7a89      	ldrb	r1, [r1, #10]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);

	//既知区間加速このswitch文中で書くかも
		//コマンドキューのときはここでコマンドを発行してキューに渡す
	AddVelocity = 0;
 800ce32:	4d6a      	ldr	r5, [pc, #424]	; (800cfdc <getNextDirection+0x1b4>)
{
 800ce34:	4616      	mov	r6, r2
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800ce36:	6922      	ldr	r2, [r4, #16]
{
 800ce38:	4607      	mov	r7, r0
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800ce3a:	f7fd fde7 	bl	800aa0c <getNextNode>
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800ce3e:	f104 0114 	add.w	r1, r4, #20
	Mouse->next.node = getNextNode(my_maze,Mouse->now.car,Mouse->now.node,0x01);
 800ce42:	4602      	mov	r2, r0
 800ce44:	61e0      	str	r0, [r4, #28]
	getNextState(&(Mouse->now),&(Mouse->next), Mouse->next.node);
 800ce46:	f104 0008 	add.w	r0, r4, #8
 800ce4a:	f7fe f839 	bl	800aec0 <getNextState>
	//2つのアクションを組み合わせたときに壁とマップの更新が入ってしまわないようにする
	_Bool accel_or_not = false;
	int accel_or_decel = 0;
	switch(Mouse->next.dir%8) //次の方角からアクションを選択
 800ce4e:	7de3      	ldrb	r3, [r4, #23]
	AddVelocity = 0;
 800ce50:	2200      	movs	r2, #0
	switch(Mouse->next.dir%8) //次の方角からアクションを選択
 800ce52:	f003 0307 	and.w	r3, r3, #7
	AddVelocity = 0;
 800ce56:	602a      	str	r2, [r5, #0]
	switch(Mouse->next.dir%8) //次の方角からアクションを選択
 800ce58:	2b06      	cmp	r3, #6
 800ce5a:	d86d      	bhi.n	800cf38 <getNextDirection+0x110>
 800ce5c:	e8df f003 	tbb	[pc, r3]
 800ce60:	5c256c10 	.word	0x5c256c10
 800ce64:	4c31      	.short	0x4c31
 800ce66:	04          	.byte	0x04
 800ce67:	00          	.byte	0x00
		GoBack();
		Calc = SearchOrFast;
		TurnLeft(turn_mode);
		break;
	case left:
		ChangeLED(0);
 800ce68:	2000      	movs	r0, #0
 800ce6a:	f000 fc8d 	bl	800d788 <ChangeLED>
		//左旋回
		Calc = SearchOrFast;
 800ce6e:	4a5c      	ldr	r2, [pc, #368]	; (800cfe0 <getNextDirection+0x1b8>)
 800ce70:	4b5c      	ldr	r3, [pc, #368]	; (800cfe4 <getNextDirection+0x1bc>)
 800ce72:	6812      	ldr	r2, [r2, #0]
 800ce74:	601a      	str	r2, [r3, #0]
//		ChangeLED(4);
		TurnLeft(turn_mode);
 800ce76:	4630      	mov	r0, r6
		break;
	}

}
 800ce78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800ce7c:	f7fc be78 	b.w	8009b70 <TurnLeft>
		ChangeLED(0);
 800ce80:	2000      	movs	r0, #0
 800ce82:	f000 fc81 	bl	800d788 <ChangeLED>
		accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800ce86:	4638      	mov	r0, r7
 800ce88:	69e2      	ldr	r2, [r4, #28]
 800ce8a:	7da1      	ldrb	r1, [r4, #22]
 800ce8c:	f7fd ff34 	bl	800acf8 <judgeAccelorNot>
			if(VelocityMax == true)
 800ce90:	4b55      	ldr	r3, [pc, #340]	; (800cfe8 <getNextDirection+0x1c0>)
 800ce92:	781b      	ldrb	r3, [r3, #0]
		if(accel_or_not == true) //既知で.直進
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d051      	beq.n	800cf3c <getNextDirection+0x114>
				AddVelocity = 245;
 800ce98:	eddf 7a54 	vldr	s15, [pc, #336]	; 800cfec <getNextDirection+0x1c4>
			if(VelocityMax == true)
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 8098 	beq.w	800cfd2 <getNextDirection+0x1aa>
				accel_or_decel = 0; //そのまま
 800cea2:	2000      	movs	r0, #0
				AddVelocity = 245;
 800cea4:	edc5 7a00 	vstr	s15, [r5]
 800cea8:	e052      	b.n	800cf50 <getNextDirection+0x128>
		ChangeLED(0);
 800ceaa:	2000      	movs	r0, #0
 800ceac:	f000 fc6c 	bl	800d788 <ChangeLED>
		Calc = SearchOrFast;
 800ceb0:	4a4b      	ldr	r2, [pc, #300]	; (800cfe0 <getNextDirection+0x1b8>)
 800ceb2:	4b4c      	ldr	r3, [pc, #304]	; (800cfe4 <getNextDirection+0x1bc>)
 800ceb4:	6812      	ldr	r2, [r2, #0]
 800ceb6:	601a      	str	r2, [r3, #0]
		TurnRight(turn_mode);
 800ceb8:	4630      	mov	r0, r6
}
 800ceba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800cebe:	f7fc be19 	b.w	8009af4 <TurnRight>
		Calc = 1;//マップ更新したくないときは1を代入。
 800cec2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800cfe4 <getNextDirection+0x1bc>
		ChangeLED(0);
 800cec6:	2000      	movs	r0, #0
		Calc = 1;//マップ更新したくないときは1を代入。
 800cec8:	2601      	movs	r6, #1
		ChangeLED(0);
 800ceca:	f000 fc5d 	bl	800d788 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800cece:	f8c8 6000 	str.w	r6, [r8]
		GoBack();
 800ced2:	f7fc fe8d 	bl	8009bf0 <GoBack>
				accel_or_not = judgeAccelorNot(my_maze, Mouse->next.car, Mouse->next.node);
 800ced6:	4638      	mov	r0, r7
 800ced8:	69e2      	ldr	r2, [r4, #28]
 800ceda:	7da1      	ldrb	r1, [r4, #22]
 800cedc:	f7fd ff0c 	bl	800acf8 <judgeAccelorNot>
					if(VelocityMax == true)
 800cee0:	4b41      	ldr	r3, [pc, #260]	; (800cfe8 <getNextDirection+0x1c0>)
 800cee2:	781b      	ldrb	r3, [r3, #0]
				if(accel_or_not == true) //既知で.直進
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d042      	beq.n	800cf6e <getNextDirection+0x146>
						AddVelocity = 245;
 800cee8:	eddf 7a40 	vldr	s15, [pc, #256]	; 800cfec <getNextDirection+0x1c4>
					if(VelocityMax == true)
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d06c      	beq.n	800cfca <getNextDirection+0x1a2>
						accel_or_decel = 0; //そのまま
 800cef0:	2000      	movs	r0, #0
						AddVelocity = 245;
 800cef2:	edc5 7a00 	vstr	s15, [r5]
 800cef6:	e043      	b.n	800cf80 <getNextDirection+0x158>
		Calc = 1;//マップ更新したくないときは1を代入。
 800cef8:	4c3a      	ldr	r4, [pc, #232]	; (800cfe4 <getNextDirection+0x1bc>)
		ChangeLED(4);
 800cefa:	2004      	movs	r0, #4
 800cefc:	f000 fc44 	bl	800d788 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800cf00:	2301      	movs	r3, #1
 800cf02:	6023      	str	r3, [r4, #0]
		GoBack();
 800cf04:	f7fc fe74 	bl	8009bf0 <GoBack>
		Calc = SearchOrFast;
 800cf08:	4b35      	ldr	r3, [pc, #212]	; (800cfe0 <getNextDirection+0x1b8>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6023      	str	r3, [r4, #0]
		TurnLeft(turn_mode);
 800cf0e:	4630      	mov	r0, r6
}
 800cf10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnLeft(turn_mode);
 800cf14:	f7fc be2c 	b.w	8009b70 <TurnLeft>
		Calc = 1;//マップ更新したくないときは1を代入。
 800cf18:	4c32      	ldr	r4, [pc, #200]	; (800cfe4 <getNextDirection+0x1bc>)
		ChangeLED(1);
 800cf1a:	2001      	movs	r0, #1
 800cf1c:	f000 fc34 	bl	800d788 <ChangeLED>
		Calc = 1;//マップ更新したくないときは1を代入。
 800cf20:	2301      	movs	r3, #1
 800cf22:	6023      	str	r3, [r4, #0]
		GoBack(); //間の座標変動を
 800cf24:	f7fc fe64 	bl	8009bf0 <GoBack>
		Calc = SearchOrFast;
 800cf28:	4b2d      	ldr	r3, [pc, #180]	; (800cfe0 <getNextDirection+0x1b8>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6023      	str	r3, [r4, #0]
		TurnRight(turn_mode);
 800cf2e:	4630      	mov	r0, r6
}
 800cf30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		TurnRight(turn_mode);
 800cf34:	f7fc bdde 	b.w	8009af4 <TurnRight>
}
 800cf38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(VelocityMax == true)
 800cf3c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d137      	bne.n	800cfb4 <getNextDirection+0x18c>
				AddVelocity = 0;
 800cf44:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800cff0 <getNextDirection+0x1c8>
 800cf48:	eef0 7a47 	vmov.f32	s15, s14
 800cf4c:	ed85 7a00 	vstr	s14, [r5]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800cf50:	4b28      	ldr	r3, [pc, #160]	; (800cff4 <getNextDirection+0x1cc>)
		Calc = SearchOrFast;
 800cf52:	4a23      	ldr	r2, [pc, #140]	; (800cfe0 <getNextDirection+0x1b8>)
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800cf54:	edd3 0a00 	vldr	s1, [r3]
		Calc = SearchOrFast;
 800cf58:	4b22      	ldr	r3, [pc, #136]	; (800cfe4 <getNextDirection+0x1bc>)
 800cf5a:	6812      	ldr	r2, [r2, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800cf5c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800cff8 <getNextDirection+0x1d0>
		Calc = SearchOrFast;
 800cf60:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800cf62:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800cf66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity , accel_or_decel);
 800cf6a:	f7fc bc91 	b.w	8009890 <GoStraight>
					if(VelocityMax == true)
 800cf6e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800cf72:	b9a3      	cbnz	r3, 800cf9e <getNextDirection+0x176>
						AddVelocity = 0;
 800cf74:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800cff0 <getNextDirection+0x1c8>
 800cf78:	eef0 7a47 	vmov.f32	s15, s14
 800cf7c:	ed85 7a00 	vstr	s14, [r5]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800cf80:	4a1c      	ldr	r2, [pc, #112]	; (800cff4 <getNextDirection+0x1cc>)
		Calc = SearchOrFast;
 800cf82:	4b17      	ldr	r3, [pc, #92]	; (800cfe0 <getNextDirection+0x1b8>)
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800cf84:	edd2 0a00 	vldr	s1, [r2]
		Calc = SearchOrFast;
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f8c8 3000 	str.w	r3, [r8]
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800cf8e:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800cff8 <getNextDirection+0x1d0>
 800cf92:	ee77 0aa0 	vadd.f32	s1, s15, s1
}
 800cf96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		GoStraight(90, ExploreVelocity +AddVelocity, accel_or_decel);
 800cf9a:	f7fc bc79 	b.w	8009890 <GoStraight>
						cnt += 2;
 800cf9e:	4a17      	ldr	r2, [pc, #92]	; (800cffc <getNextDirection+0x1d4>)
						AddVelocity = 0;
 800cfa0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800cff0 <getNextDirection+0x1c8>
						cnt += 2;
 800cfa4:	6813      	ldr	r3, [r2, #0]
						AddVelocity = 0;
 800cfa6:	edc5 7a00 	vstr	s15, [r5]
						cnt += 2;
 800cfaa:	3302      	adds	r3, #2
 800cfac:	6013      	str	r3, [r2, #0]
						accel_or_decel = -1; //減速
 800cfae:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb2:	e7e5      	b.n	800cf80 <getNextDirection+0x158>
				cnt += 2;
 800cfb4:	4a12      	ldr	r2, [pc, #72]	; (800d000 <getNextDirection+0x1d8>)
				AddVelocity = 0;
 800cfb6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800cff0 <getNextDirection+0x1c8>
				cnt += 2;
 800cfba:	6813      	ldr	r3, [r2, #0]
				AddVelocity = 0;
 800cfbc:	edc5 7a00 	vstr	s15, [r5]
				cnt += 2;
 800cfc0:	3302      	adds	r3, #2
 800cfc2:	6013      	str	r3, [r2, #0]
				accel_or_decel = -1; //減速
 800cfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc8:	e7c2      	b.n	800cf50 <getNextDirection+0x128>
						accel_or_decel = 1; //加速
 800cfca:	4630      	mov	r0, r6
						AddVelocity = 245;
 800cfcc:	edc5 7a00 	vstr	s15, [r5]
 800cfd0:	e7d6      	b.n	800cf80 <getNextDirection+0x158>
				accel_or_decel = 1; //加速
 800cfd2:	2001      	movs	r0, #1
				AddVelocity = 245;
 800cfd4:	edc5 7a00 	vstr	s15, [r5]
 800cfd8:	e7ba      	b.n	800cf50 <getNextDirection+0x128>
 800cfda:	bf00      	nop
 800cfdc:	2000a194 	.word	0x2000a194
 800cfe0:	2000a424 	.word	0x2000a424
 800cfe4:	2000a428 	.word	0x2000a428
 800cfe8:	2000a2aa 	.word	0x2000a2aa
 800cfec:	43750000 	.word	0x43750000
 800cff0:	00000000 	.word	0x00000000
 800cff4:	2000a2ac 	.word	0x2000a2ac
 800cff8:	42b40000 	.word	0x42b40000
 800cffc:	2000002c 	.word	0x2000002c
 800d000:	20000028 	.word	0x20000028

0800d004 <getPathNode>:
Path FastPath[16*16]={0};


//最短走行用の経路配列作成
void getPathNode(maze_node *my_maze)
{
 800d004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d008:	4d3e      	ldr	r5, [pc, #248]	; (800d104 <getPathNode+0x100>)
 800d00a:	4683      	mov	fp, r0
 800d00c:	f505 51c0 	add.w	r1, r5, #6144	; 0x1800
 800d010:	46a9      	mov	r9, r5
 800d012:	462b      	mov	r3, r5

	//ノード情報は既にある前提
	for(int i=0; i < 16*16; i++)
		FastPath[i].path_ahead = false;
 800d014:	2200      	movs	r2, #0
 800d016:	751a      	strb	r2, [r3, #20]
 800d018:	3318      	adds	r3, #24
	for(int i=0; i < 16*16; i++)
 800d01a:	428b      	cmp	r3, r1
 800d01c:	d1fb      	bne.n	800d016 <getPathNode+0x12>

	static int path_num=0;
	//最初の次ノードは既に入っているので格納
	FastPath[path_num].path_state = my_mouse.next;
 800d01e:	4e3a      	ldr	r6, [pc, #232]	; (800d108 <getPathNode+0x104>)
 800d020:	4c3a      	ldr	r4, [pc, #232]	; (800d10c <getPathNode+0x108>)
 800d022:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800d026:	6823      	ldr	r3, [r4, #0]
 800d028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d02c:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 800d030:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FastPath[path_num].path_ahead = true;
 800d034:	2201      	movs	r2, #1
	printState(&(my_mouse.now));
 800d036:	f1a6 000c 	sub.w	r0, r6, #12
	FastPath[path_num].path_ahead = true;
 800d03a:	751a      	strb	r2, [r3, #20]
	printState(&(my_mouse.now));
 800d03c:	f7fe f8ae 	bl	800b19c <printState>
	shiftState(&my_mouse);
 800d040:	f1a6 0014 	sub.w	r0, r6, #20
 800d044:	f7fe f89c 	bl	800b180 <shiftState>
 800d048:	f1a6 0714 	sub.w	r7, r6, #20
	printState(&(my_mouse.next));
 800d04c:	4630      	mov	r0, r6
	//一度データ上で最短走行する
	//ゴールなら減速.　なのでwhile文
	while(! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //nextがゴール到達するまでループ
	{
		printState(&(my_mouse.now));
 800d04e:	f107 0a08 	add.w	sl, r7, #8
		//終了条件がおかしい. ゴールノードかどうかの判定. 座標のxyも使う.
		path_num ++;
		my_mouse.next.node = getNextNode(my_maze, my_mouse.now.car, my_mouse.now.node, 0x03);
		getNextState(&(my_mouse.now),&(my_mouse.next), my_mouse.next.node);
 800d052:	46b0      	mov	r8, r6
	printState(&(my_mouse.next));
 800d054:	f7fe f8a2 	bl	800b19c <printState>
	while(! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //nextがゴール到達するまでループ
 800d058:	e02d      	b.n	800d0b6 <getPathNode+0xb2>
		printState(&(my_mouse.now));
 800d05a:	f7fe f89f 	bl	800b19c <printState>
		path_num ++;
 800d05e:	6823      	ldr	r3, [r4, #0]
		my_mouse.next.node = getNextNode(my_maze, my_mouse.now.car, my_mouse.now.node, 0x03);
 800d060:	693a      	ldr	r2, [r7, #16]
 800d062:	7ab9      	ldrb	r1, [r7, #10]
		path_num ++;
 800d064:	f103 0c01 	add.w	ip, r3, #1
		my_mouse.next.node = getNextNode(my_maze, my_mouse.now.car, my_mouse.now.node, 0x03);
 800d068:	4658      	mov	r0, fp
 800d06a:	2303      	movs	r3, #3
		path_num ++;
 800d06c:	f8c4 c000 	str.w	ip, [r4]
		my_mouse.next.node = getNextNode(my_maze, my_mouse.now.car, my_mouse.now.node, 0x03);
 800d070:	f7fd fccc 	bl	800aa0c <getNextNode>
		getNextState(&(my_mouse.now),&(my_mouse.next), my_mouse.next.node);
 800d074:	4641      	mov	r1, r8
		my_mouse.next.node = getNextNode(my_maze, my_mouse.now.car, my_mouse.now.node, 0x03);
 800d076:	4603      	mov	r3, r0
		getNextState(&(my_mouse.now),&(my_mouse.next), my_mouse.next.node);
 800d078:	4602      	mov	r2, r0
 800d07a:	4825      	ldr	r0, [pc, #148]	; (800d110 <getPathNode+0x10c>)
		my_mouse.next.node = getNextNode(my_maze, my_mouse.now.car, my_mouse.now.node, 0x03);
 800d07c:	61fb      	str	r3, [r7, #28]
		getNextState(&(my_mouse.now),&(my_mouse.next), my_mouse.next.node);
 800d07e:	f7fd ff1f 	bl	800aec0 <getNextState>
		FastPath[path_num].path_state = my_mouse.next;
 800d082:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800d086:	6823      	ldr	r3, [r4, #0]
 800d088:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d08c:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 800d090:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		//基本的に外からの情報はノードのポインタのみで完結させられる
		//同じ方角が連続なら直進で同じ動作
		//同じ方角じゃないならターン系。同じ動作かどうか
		//直進のマスカウント用
		switch(FastPath[path_num].path_state.dir%8)
 800d094:	78da      	ldrb	r2, [r3, #3]
			FastPath[path_num].path_ahead = false;
			break;
		}//0が続いている場合も、右左が交互に来ていれば斜め走行で直進扱いにできる. その前に予備動作（45°スラローム
		//一旦は、1なら数えていってその分を加減速関数に渡す, 0なら右か左か選ぶ。これだけ

		shiftState(&my_mouse);
 800d096:	481f      	ldr	r0, [pc, #124]	; (800d114 <getPathNode+0x110>)
		switch(FastPath[path_num].path_state.dir%8)
 800d098:	f012 0f07 	tst.w	r2, #7
			FastPath[path_num].path_ahead = true;
 800d09c:	f04f 0201 	mov.w	r2, #1
			FastPath[path_num].path_ahead = false;
 800d0a0:	bf18      	it	ne
 800d0a2:	2200      	movne	r2, #0
 800d0a4:	751a      	strb	r2, [r3, #20]
		shiftState(&my_mouse);
 800d0a6:	f7fe f86b 	bl	800b180 <shiftState>
		printState(&(my_mouse.next));
 800d0aa:	4640      	mov	r0, r8
 800d0ac:	f7fe f876 	bl	800b19c <printState>

		printf("\r\n");
 800d0b0:	4819      	ldr	r0, [pc, #100]	; (800d118 <getPathNode+0x114>)
 800d0b2:	f005 fc89 	bl	80129c8 <puts>
	while(! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //nextがゴール到達するまでループ
 800d0b6:	7a3b      	ldrb	r3, [r7, #8]
 800d0b8:	783a      	ldrb	r2, [r7, #0]
 800d0ba:	429a      	cmp	r2, r3
		printState(&(my_mouse.now));
 800d0bc:	4650      	mov	r0, sl
	while(! ((my_mouse.goal_lesser.x <= my_mouse.now.pos.x && my_mouse.now.pos.x <= my_mouse.goal_larger.x) && (my_mouse.goal_lesser.y <= my_mouse.now.pos.y && my_mouse.now.pos.y <= my_mouse.goal_larger.y))  ) //nextがゴール到達するまでループ
 800d0be:	d8cc      	bhi.n	800d05a <getPathNode+0x56>
 800d0c0:	78ba      	ldrb	r2, [r7, #2]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d3c9      	bcc.n	800d05a <getPathNode+0x56>
 800d0c6:	7a7b      	ldrb	r3, [r7, #9]
 800d0c8:	787a      	ldrb	r2, [r7, #1]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d8c5      	bhi.n	800d05a <getPathNode+0x56>
 800d0ce:	78fa      	ldrb	r2, [r7, #3]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d3c2      	bcc.n	800d05a <getPathNode+0x56>
	//print
	while(1)
	{
		for(int i=0; i <= path_num; i++)
		{
			printf("%d, %d\r\n", i, FastPath[i].path_ahead);
 800d0d4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800d11c <getPathNode+0x118>
		}
		printf("\r\n");
 800d0d8:	f8df 903c 	ldr.w	r9, [pc, #60]	; 800d118 <getPathNode+0x114>
		for(int i=0; i <= path_num; i++)
 800d0dc:	6823      	ldr	r3, [r4, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	db0c      	blt.n	800d0fc <getPathNode+0xf8>
 800d0e2:	462f      	mov	r7, r5
 800d0e4:	2600      	movs	r6, #0
			printf("%d, %d\r\n", i, FastPath[i].path_ahead);
 800d0e6:	7d3a      	ldrb	r2, [r7, #20]
 800d0e8:	4631      	mov	r1, r6
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	f005 fbe4 	bl	80128b8 <iprintf>
		for(int i=0; i <= path_num; i++)
 800d0f0:	6823      	ldr	r3, [r4, #0]
 800d0f2:	3601      	adds	r6, #1
 800d0f4:	42b3      	cmp	r3, r6
 800d0f6:	f107 0718 	add.w	r7, r7, #24
 800d0fa:	daf4      	bge.n	800d0e6 <getPathNode+0xe2>
		printf("\r\n");
 800d0fc:	4648      	mov	r0, r9
 800d0fe:	f005 fc63 	bl	80129c8 <puts>
		for(int i=0; i <= path_num; i++)
 800d102:	e7eb      	b.n	800d0dc <getPathNode+0xd8>
 800d104:	20007f48 	.word	0x20007f48
 800d108:	20009a38 	.word	0x20009a38
 800d10c:	20009748 	.word	0x20009748
 800d110:	20009a2c 	.word	0x20009a2c
 800d114:	20009a24 	.word	0x20009a24
 800d118:	08016720 	.word	0x08016720
 800d11c:	080165b8 	.word	0x080165b8

0800d120 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d120:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d122:	1e16      	subs	r6, r2, #0
 800d124:	dd07      	ble.n	800d136 <_read+0x16>
 800d126:	460c      	mov	r4, r1
 800d128:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800d12a:	f7ff f88d 	bl	800c248 <__io_getchar>
 800d12e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d132:	42a5      	cmp	r5, r4
 800d134:	d1f9      	bne.n	800d12a <_read+0xa>
	}

return len;
}
 800d136:	4630      	mov	r0, r6
 800d138:	bd70      	pop	{r4, r5, r6, pc}
 800d13a:	bf00      	nop

0800d13c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d13c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d13e:	1e16      	subs	r6, r2, #0
 800d140:	dd07      	ble.n	800d152 <_write+0x16>
 800d142:	460c      	mov	r4, r1
 800d144:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800d146:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d14a:	f7ff f86b 	bl	800c224 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d14e:	42a5      	cmp	r5, r4
 800d150:	d1f9      	bne.n	800d146 <_write+0xa>
	}
	return len;
}
 800d152:	4630      	mov	r0, r6
 800d154:	bd70      	pop	{r4, r5, r6, pc}
 800d156:	bf00      	nop

0800d158 <_close>:

int _close(int file)
{
	return -1;
}
 800d158:	f04f 30ff 	mov.w	r0, #4294967295
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop

0800d160 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800d160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d164:	604b      	str	r3, [r1, #4]
	return 0;
}
 800d166:	2000      	movs	r0, #0
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop

0800d16c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800d16c:	2001      	movs	r0, #1
 800d16e:	4770      	bx	lr

0800d170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800d170:	2000      	movs	r0, #0
 800d172:	4770      	bx	lr

0800d174 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d174:	490c      	ldr	r1, [pc, #48]	; (800d1a8 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d176:	4a0d      	ldr	r2, [pc, #52]	; (800d1ac <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800d178:	680b      	ldr	r3, [r1, #0]
{
 800d17a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d17c:	4c0c      	ldr	r4, [pc, #48]	; (800d1b0 <_sbrk+0x3c>)
 800d17e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800d180:	b12b      	cbz	r3, 800d18e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d182:	4418      	add	r0, r3
 800d184:	4290      	cmp	r0, r2
 800d186:	d807      	bhi.n	800d198 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800d188:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800d18e:	4b09      	ldr	r3, [pc, #36]	; (800d1b4 <_sbrk+0x40>)
 800d190:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800d192:	4418      	add	r0, r3
 800d194:	4290      	cmp	r0, r2
 800d196:	d9f7      	bls.n	800d188 <_sbrk+0x14>
    errno = ENOMEM;
 800d198:	f003 fe4e 	bl	8010e38 <__errno>
 800d19c:	230c      	movs	r3, #12
 800d19e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800d1a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	bd10      	pop	{r4, pc}
 800d1a8:	2000974c 	.word	0x2000974c
 800d1ac:	20020000 	.word	0x20020000
 800d1b0:	00000400 	.word	0x00000400
 800d1b4:	2000a750 	.word	0x2000a750

0800d1b8 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800d1b8:	b508      	push	{r3, lr}
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800d1ba:	2203      	movs	r2, #3
 800d1bc:	4909      	ldr	r1, [pc, #36]	; (800d1e4 <ADCStart+0x2c>)
 800d1be:	480a      	ldr	r0, [pc, #40]	; (800d1e8 <ADCStart+0x30>)
 800d1c0:	f001 f986 	bl	800e4d0 <HAL_ADC_Start_DMA>
 800d1c4:	b950      	cbnz	r0, 800d1dc <ADCStart+0x24>
	{
		Error_Handler();
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800d1c6:	2202      	movs	r2, #2
 800d1c8:	4908      	ldr	r1, [pc, #32]	; (800d1ec <ADCStart+0x34>)
 800d1ca:	4809      	ldr	r0, [pc, #36]	; (800d1f0 <ADCStart+0x38>)
 800d1cc:	f001 f980 	bl	800e4d0 <HAL_ADC_Start_DMA>
 800d1d0:	b900      	cbnz	r0, 800d1d4 <ADCStart+0x1c>
	{
		Error_Handler();
	}

}
 800d1d2:	bd08      	pop	{r3, pc}
 800d1d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 800d1d8:	f7ff ba78 	b.w	800c6cc <Error_Handler>
		Error_Handler();
 800d1dc:	f7ff fa76 	bl	800c6cc <Error_Handler>
 800d1e0:	e7f1      	b.n	800d1c6 <ADCStart+0xe>
 800d1e2:	bf00      	nop
 800d1e4:	200097d0 	.word	0x200097d0
 800d1e8:	2000a58c 	.word	0x2000a58c
 800d1ec:	200097dc 	.word	0x200097dc
 800d1f0:	2000a4ac 	.word	0x2000a4ac

0800d1f4 <ADCStop>:
void ADCStop()
{
 800d1f4:	b508      	push	{r3, lr}
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800d1f6:	480e      	ldr	r0, [pc, #56]	; (800d230 <ADCStop+0x3c>)
 800d1f8:	f001 fa0c 	bl	800e614 <HAL_ADC_Stop_DMA>
 800d1fc:	b970      	cbnz	r0, 800d21c <ADCStop+0x28>
	{
		printf("な\r\n");
		Error_Handler();
		printf("に\r\n");
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800d1fe:	480d      	ldr	r0, [pc, #52]	; (800d234 <ADCStop+0x40>)
 800d200:	f001 fa08 	bl	800e614 <HAL_ADC_Stop_DMA>
 800d204:	b900      	cbnz	r0, 800d208 <ADCStop+0x14>
	{
		printf("ぬ\r\n");
		Error_Handler();
		printf("ね\r\n");
	}
}
 800d206:	bd08      	pop	{r3, pc}
		printf("ぬ\r\n");
 800d208:	480b      	ldr	r0, [pc, #44]	; (800d238 <ADCStop+0x44>)
 800d20a:	f005 fbdd 	bl	80129c8 <puts>
		Error_Handler();
 800d20e:	f7ff fa5d 	bl	800c6cc <Error_Handler>
		printf("ね\r\n");
 800d212:	480a      	ldr	r0, [pc, #40]	; (800d23c <ADCStop+0x48>)
}
 800d214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("ね\r\n");
 800d218:	f005 bbd6 	b.w	80129c8 <puts>
		printf("な\r\n");
 800d21c:	4808      	ldr	r0, [pc, #32]	; (800d240 <ADCStop+0x4c>)
 800d21e:	f005 fbd3 	bl	80129c8 <puts>
		Error_Handler();
 800d222:	f7ff fa53 	bl	800c6cc <Error_Handler>
		printf("に\r\n");
 800d226:	4807      	ldr	r0, [pc, #28]	; (800d244 <ADCStop+0x50>)
 800d228:	f005 fbce 	bl	80129c8 <puts>
 800d22c:	e7e7      	b.n	800d1fe <ADCStop+0xa>
 800d22e:	bf00      	nop
 800d230:	2000a58c 	.word	0x2000a58c
 800d234:	2000a4ac 	.word	0x2000a4ac
 800d238:	080165d4 	.word	0x080165d4
 800d23c:	080165dc 	.word	0x080165dc
 800d240:	080165c4 	.word	0x080165c4
 800d244:	080165cc 	.word	0x080165cc

0800d248 <FLASH_Write_Word>:
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
	FLASH->KEYR =  0x45670123;
 800d248:	4b10      	ldr	r3, [pc, #64]	; (800d28c <FLASH_Write_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800d24a:	4a11      	ldr	r2, [pc, #68]	; (800d290 <FLASH_Write_Word+0x48>)

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800d24c:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800d24e:	4c11      	ldr	r4, [pc, #68]	; (800d294 <FLASH_Write_Word+0x4c>)
 800d250:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800d252:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d254:	68da      	ldr	r2, [r3, #12]
 800d256:	03d2      	lsls	r2, r2, #15
 800d258:	d4fc      	bmi.n	800d254 <FLASH_Write_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d25a:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d25c:	4a0b      	ldr	r2, [pc, #44]	; (800d28c <FLASH_Write_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800d25e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800d262:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d264:	691c      	ldr	r4, [r3, #16]
 800d266:	f044 0401 	orr.w	r4, r4, #1
 800d26a:	611c      	str	r4, [r3, #16]

	*(__IO uint32_t*)address = data;
 800d26c:	6001      	str	r1, [r0, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d26e:	68d3      	ldr	r3, [r2, #12]
 800d270:	03db      	lsls	r3, r3, #15
 800d272:	d4fc      	bmi.n	800d26e <FLASH_Write_Word+0x26>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800d274:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800d276:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800d27a:	f023 0301 	bic.w	r3, r3, #1
 800d27e:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800d280:	6913      	ldr	r3, [r2, #16]
 800d282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d286:	6113      	str	r3, [r2, #16]
}
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	40023c00 	.word	0x40023c00
 800d290:	cdef89ab 	.word	0xcdef89ab
 800d294:	45670123 	.word	0x45670123

0800d298 <FLASH_Read_Word>:
	FLASH->KEYR =  0x45670123;
 800d298:	4b10      	ldr	r3, [pc, #64]	; (800d2dc <FLASH_Read_Word+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800d29a:	4a11      	ldr	r2, [pc, #68]	; (800d2e0 <FLASH_Read_Word+0x48>)
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800d29c:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800d29e:	4c11      	ldr	r4, [pc, #68]	; (800d2e4 <FLASH_Read_Word+0x4c>)
 800d2a0:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800d2a2:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d2a4:	68da      	ldr	r2, [r3, #12]
 800d2a6:	03d2      	lsls	r2, r2, #15
 800d2a8:	d4fc      	bmi.n	800d2a4 <FLASH_Read_Word+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d2aa:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d2ac:	4a0b      	ldr	r2, [pc, #44]	; (800d2dc <FLASH_Read_Word+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800d2ae:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800d2b2:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d2b4:	691c      	ldr	r4, [r3, #16]
 800d2b6:	f044 0401 	orr.w	r4, r4, #1
 800d2ba:	611c      	str	r4, [r3, #16]

	* data = *(__IO uint32_t*)address;
 800d2bc:	6803      	ldr	r3, [r0, #0]
 800d2be:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d2c0:	68d3      	ldr	r3, [r2, #12]
 800d2c2:	03db      	lsls	r3, r3, #15
 800d2c4:	d4fc      	bmi.n	800d2c0 <FLASH_Read_Word+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800d2c6:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800d2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800d2cc:	f023 0301 	bic.w	r3, r3, #1
 800d2d0:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800d2d2:	6913      	ldr	r3, [r2, #16]
 800d2d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d2d8:	6113      	str	r3, [r2, #16]
}
 800d2da:	4770      	bx	lr
 800d2dc:	40023c00 	.word	0x40023c00
 800d2e0:	cdef89ab 	.word	0xcdef89ab
 800d2e4:	45670123 	.word	0x45670123

0800d2e8 <FLASH_Write_Word_F>:
	FLASH->KEYR =  0x45670123;
 800d2e8:	4b0f      	ldr	r3, [pc, #60]	; (800d328 <FLASH_Write_Word_F+0x40>)
 800d2ea:	4910      	ldr	r1, [pc, #64]	; (800d32c <FLASH_Write_Word_F+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800d2ec:	4a10      	ldr	r2, [pc, #64]	; (800d330 <FLASH_Write_Word_F+0x48>)
	FLASH->KEYR =  0x45670123;
 800d2ee:	6059      	str	r1, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800d2f0:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d2f2:	68da      	ldr	r2, [r3, #12]
 800d2f4:	03d2      	lsls	r2, r2, #15
 800d2f6:	d4fc      	bmi.n	800d2f2 <FLASH_Write_Word_F+0xa>
{
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d2f8:	6919      	ldr	r1, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d2fa:	4a0b      	ldr	r2, [pc, #44]	; (800d328 <FLASH_Write_Word_F+0x40>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800d2fc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800d300:	6119      	str	r1, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d302:	6919      	ldr	r1, [r3, #16]
 800d304:	f041 0101 	orr.w	r1, r1, #1
 800d308:	6119      	str	r1, [r3, #16]

	*(__IO float*)address = data;
 800d30a:	ed80 0a00 	vstr	s0, [r0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d30e:	68d3      	ldr	r3, [r2, #12]
 800d310:	03db      	lsls	r3, r3, #15
 800d312:	d4fc      	bmi.n	800d30e <FLASH_Write_Word_F+0x26>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800d314:	6913      	ldr	r3, [r2, #16]
 800d316:	f023 0301 	bic.w	r3, r3, #1
 800d31a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800d31c:	6913      	ldr	r3, [r2, #16]
 800d31e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d322:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
}
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	40023c00 	.word	0x40023c00
 800d32c:	45670123 	.word	0x45670123
 800d330:	cdef89ab 	.word	0xcdef89ab

0800d334 <FLASH_Read_Word_F>:
	FLASH->KEYR =  0x45670123;
 800d334:	4b10      	ldr	r3, [pc, #64]	; (800d378 <FLASH_Read_Word_F+0x44>)
	FLASH->KEYR =  0xCDEF89AB;
 800d336:	4a11      	ldr	r2, [pc, #68]	; (800d37c <FLASH_Read_Word_F+0x48>)
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800d338:	b410      	push	{r4}
	FLASH->KEYR =  0x45670123;
 800d33a:	4c11      	ldr	r4, [pc, #68]	; (800d380 <FLASH_Read_Word_F+0x4c>)
 800d33c:	605c      	str	r4, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800d33e:	605a      	str	r2, [r3, #4]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d340:	68da      	ldr	r2, [r3, #12]
 800d342:	03d2      	lsls	r2, r2, #15
 800d344:	d4fc      	bmi.n	800d340 <FLASH_Read_Word_F+0xc>
	FLASH_Unlock();

	FLASH_WaitBusy();

	FLASH->CR |= FLASH_PSIZE_WORD;
 800d346:	691c      	ldr	r4, [r3, #16]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d348:	4a0b      	ldr	r2, [pc, #44]	; (800d378 <FLASH_Read_Word_F+0x44>)
	FLASH->CR |= FLASH_PSIZE_WORD;
 800d34a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800d34e:	611c      	str	r4, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 800d350:	691c      	ldr	r4, [r3, #16]
 800d352:	f044 0401 	orr.w	r4, r4, #1
 800d356:	611c      	str	r4, [r3, #16]

	* data = *(__IO float*)address;
 800d358:	6803      	ldr	r3, [r0, #0]
 800d35a:	600b      	str	r3, [r1, #0]
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800d35c:	68d3      	ldr	r3, [r2, #12]
 800d35e:	03db      	lsls	r3, r3, #15
 800d360:	d4fc      	bmi.n	800d35c <FLASH_Read_Word_F+0x28>

	FLASH_WaitBusy();

	FLASH->CR &= ~FLASH_CR_PG;
 800d362:	6913      	ldr	r3, [r2, #16]

	FLASH_Lock();
}
 800d364:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLASH->CR &= ~FLASH_CR_PG;
 800d368:	f023 0301 	bic.w	r3, r3, #1
 800d36c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800d36e:	6913      	ldr	r3, [r2, #16]
 800d370:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d374:	6113      	str	r3, [r2, #16]
}
 800d376:	4770      	bx	lr
 800d378:	40023c00 	.word	0x40023c00
 800d37c:	cdef89ab 	.word	0xcdef89ab
 800d380:	45670123 	.word	0x45670123

0800d384 <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800d384:	b530      	push	{r4, r5, lr}
 800d386:	b087      	sub	sp, #28
    HAL_FLASH_Unlock();
 800d388:	f001 fd0c 	bl	800eda4 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d38c:	2400      	movs	r4, #0
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800d38e:	2301      	movs	r3, #1
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d390:	2202      	movs	r2, #2
    EraseInitStruct.NbSectors = 1;

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d392:	4669      	mov	r1, sp
 800d394:	a801      	add	r0, sp, #4
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d396:	9401      	str	r4, [sp, #4]
    EraseInitStruct.NbSectors = 1;
 800d398:	e9cd 3303 	strd	r3, r3, [sp, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d39c:	9205      	str	r2, [sp, #20]
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d39e:	f001 fd9b 	bl	800eed8 <HAL_FLASHEx_Erase>
 800d3a2:	4605      	mov	r5, r0

    HAL_FLASH_Lock();
 800d3a4:	f001 fd12 	bl	800edcc <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800d3a8:	b93d      	cbnz	r5, 800d3ba <Flash_clear_sector1+0x36>
 800d3aa:	9800      	ldr	r0, [sp, #0]
 800d3ac:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800d3b0:	fab0 f080 	clz	r0, r0
 800d3b4:	0940      	lsrs	r0, r0, #5
}
 800d3b6:	b007      	add	sp, #28
 800d3b8:	bd30      	pop	{r4, r5, pc}
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	b007      	add	sp, #28
 800d3be:	bd30      	pop	{r4, r5, pc}

0800d3c0 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800d3c0:	b530      	push	{r4, r5, lr}
 800d3c2:	b087      	sub	sp, #28
    HAL_FLASH_Unlock();
 800d3c4:	f001 fcee 	bl	800eda4 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800d3c8:	2509      	movs	r5, #9
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d3ca:	2202      	movs	r2, #2
    EraseInitStruct.NbSectors = 1;
 800d3cc:	2301      	movs	r3, #1
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d3ce:	2400      	movs	r4, #0

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d3d0:	4669      	mov	r1, sp
 800d3d2:	a801      	add	r0, sp, #4
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800d3d4:	9503      	str	r5, [sp, #12]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d3d6:	9401      	str	r4, [sp, #4]
    EraseInitStruct.NbSectors = 1;
 800d3d8:	e9cd 3204 	strd	r3, r2, [sp, #16]
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800d3dc:	f001 fd7c 	bl	800eed8 <HAL_FLASHEx_Erase>
 800d3e0:	4605      	mov	r5, r0

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800d3e2:	f001 fcf3 	bl	800edcc <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800d3e6:	b93d      	cbnz	r5, 800d3f8 <Flash_clear_sector9+0x38>
 800d3e8:	9800      	ldr	r0, [sp, #0]
 800d3ea:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800d3ee:	fab0 f080 	clz	r0, r0
 800d3f2:	0940      	lsrs	r0, r0, #5
}
 800d3f4:	b007      	add	sp, #28
 800d3f6:	bd30      	pop	{r4, r5, pc}
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	b007      	add	sp, #28
 800d3fc:	bd30      	pop	{r4, r5, pc}
 800d3fe:	bf00      	nop

0800d400 <compare_num>:
}


int compare_num(const void * n1, const void * n2)
{
	if (*(int16_t *)n1 > *(int16_t *)n2)
 800d400:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d404:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d408:	429a      	cmp	r2, r3
 800d40a:	dc04      	bgt.n	800d416 <compare_num+0x16>
	{
		return 1;
	}
	else if (*(int16_t *)n1 < *(int16_t *)n2)
 800d40c:	bfb4      	ite	lt
 800d40e:	f04f 30ff 	movlt.w	r0, #4294967295
 800d412:	2000      	movge	r0, #0
 800d414:	4770      	bx	lr
		return 1;
 800d416:	2001      	movs	r0, #1
	}
	else
	{
		return 0;
	}
}
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop

0800d41c <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800d41c:	b570      	push	{r4, r5, r6, lr}
	CS_RESET;
 800d41e:	4c23      	ldr	r4, [pc, #140]	; (800d4ac <ReadIMU+0x90>)
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d420:	4d23      	ldr	r5, [pc, #140]	; (800d4b0 <ReadIMU+0x94>)
inline float ReadIMU(uint8_t a, uint8_t b) {
 800d422:	b082      	sub	sp, #8
	ret2 = ret[1] | 0x80;
 800d424:	f061 037f 	orn	r3, r1, #127	; 0x7f
	ret1 = ret[0] | 0x80;
 800d428:	f060 067f 	orn	r6, r0, #127	; 0x7f
	CS_RESET;
 800d42c:	2200      	movs	r2, #0
 800d42e:	4620      	mov	r0, r4
 800d430:	2104      	movs	r1, #4
	ret2 = ret[1] | 0x80;
 800d432:	f88d 3005 	strb.w	r3, [sp, #5]
	ret1 = ret[0] | 0x80;
 800d436:	f88d 6004 	strb.w	r6, [sp, #4]
	CS_RESET;
 800d43a:	f001 feb3 	bl	800f1a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d43e:	a901      	add	r1, sp, #4
 800d440:	4628      	mov	r0, r5
 800d442:	2364      	movs	r3, #100	; 0x64
 800d444:	2201      	movs	r2, #1
 800d446:	f002 fb67 	bl	800fb18 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800d44a:	2364      	movs	r3, #100	; 0x64
 800d44c:	f10d 0106 	add.w	r1, sp, #6
 800d450:	4628      	mov	r0, r5
 800d452:	2201      	movs	r2, #1
 800d454:	f002 fc1e 	bl	800fc94 <HAL_SPI_Receive>
	CS_SET;
 800d458:	4620      	mov	r0, r4
 800d45a:	2201      	movs	r2, #1
 800d45c:	2104      	movs	r1, #4
 800d45e:	f001 fea1 	bl	800f1a4 <HAL_GPIO_WritePin>
	CS_RESET;
 800d462:	4620      	mov	r0, r4
 800d464:	2200      	movs	r2, #0
 800d466:	2104      	movs	r1, #4
 800d468:	f001 fe9c 	bl	800f1a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800d46c:	f10d 0105 	add.w	r1, sp, #5
 800d470:	4628      	mov	r0, r5
 800d472:	2364      	movs	r3, #100	; 0x64
 800d474:	2201      	movs	r2, #1
 800d476:	f002 fb4f 	bl	800fb18 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800d47a:	2364      	movs	r3, #100	; 0x64
 800d47c:	f10d 0107 	add.w	r1, sp, #7
 800d480:	4628      	mov	r0, r5
 800d482:	2201      	movs	r2, #1
 800d484:	f002 fc06 	bl	800fc94 <HAL_SPI_Receive>
	CS_SET;
 800d488:	4620      	mov	r0, r4
 800d48a:	2201      	movs	r2, #1
 800d48c:	2104      	movs	r1, #4
 800d48e:	f001 fe89 	bl	800f1a4 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800d492:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d496:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d49a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	res = (float)law_data;
 800d49e:	b21b      	sxth	r3, r3
 800d4a0:	ee00 3a10 	vmov	s0, r3
}
 800d4a4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d4a8:	b002      	add	sp, #8
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}
 800d4ac:	40020c00 	.word	0x40020c00
 800d4b0:	2000a534 	.word	0x2000a534

0800d4b4 <median_filter>:
int16_t median_filter(int16_t *new_data) //中身変更しないが、値のコピーを避けて速度維持のためにアドレス
{
 800d4b4:	b530      	push	{r4, r5, lr}
	filter[cnt+1] = filter[cnt+2];
	filter[cnt+2] = filter[cnt+3];
	filter[cnt+3] = filter[cnt+4];
	filter[cnt+4] = new_data;
#else
	filter[0] = filter[1];
 800d4b6:	4c0d      	ldr	r4, [pc, #52]	; (800d4ec <median_filter+0x38>)
	filter[1] = filter[2];
	filter[2] = *new_data;//filter[3];
 800d4b8:	f9b0 1000 	ldrsh.w	r1, [r0]
	filter[1] = filter[2];
 800d4bc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
	filter[0] = filter[1];
 800d4c0:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
	filter[2] = *new_data;//filter[3];
 800d4c4:	80a1      	strh	r1, [r4, #4]
{
 800d4c6:	b083      	sub	sp, #12
	filter[1] = filter[2];
 800d4c8:	8060      	strh	r0, [r4, #2]
//	filter[3] = filter[4];
//	filter[4] = *new_data;

	sorted[0] = filter[0];
	sorted[1] = filter[1];
	sorted[2] = *new_data;//filter[2];
 800d4ca:	f8ad 1004 	strh.w	r1, [sp, #4]
	sorted[1] = filter[1];
 800d4ce:	f8ad 0002 	strh.w	r0, [sp, #2]
//	sorted[4] = filter[4];
#endif


	//ソートする
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d4d2:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <median_filter+0x3c>)
	filter[0] = filter[1];
 800d4d4:	8025      	strh	r5, [r4, #0]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d4d6:	4668      	mov	r0, sp
 800d4d8:	2202      	movs	r2, #2
 800d4da:	2103      	movs	r1, #3
	sorted[0] = filter[0];
 800d4dc:	f8ad 5000 	strh.w	r5, [sp]
	qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int16_t),compare_num);
 800d4e0:	f005 fab2 	bl	8012a48 <qsort>
	//qsort(sorted, sizeof(sorted) / sizeof(sorted[0]), sizeof(int),compare_num);
	//中央値を返す
	return sorted[1];
}
 800d4e4:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 800d4e8:	b003      	add	sp, #12
 800d4ea:	bd30      	pop	{r4, r5, pc}
 800d4ec:	200097e8 	.word	0x200097e8
 800d4f0:	0800d401 	.word	0x0800d401
 800d4f4:	00000000 	.word	0x00000000

0800d4f8 <Update_IMU>:
//割込み内で呼ぶセット
void Update_IMU(float *angv, float *angle )
{
 800d4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
				0x38,
		};
		int16_t law_data;
		ret1 = ret[0] | 0x80;
		ret2 = ret[1] | 0x80;
		CS_RESET;
 800d4fa:	4c3f      	ldr	r4, [pc, #252]	; (800d5f8 <Update_IMU+0x100>)
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d4fc:	4d3f      	ldr	r5, [pc, #252]	; (800d5fc <Update_IMU+0x104>)
{
 800d4fe:	b083      	sub	sp, #12
		ret1 = ret[0] | 0x80;
 800d500:	f04f 0cb7 	mov.w	ip, #183	; 0xb7
{
 800d504:	460e      	mov	r6, r1
 800d506:	4607      	mov	r7, r0
		ret2 = ret[1] | 0x80;
 800d508:	23b8      	movs	r3, #184	; 0xb8
		CS_RESET;
 800d50a:	4620      	mov	r0, r4
 800d50c:	2200      	movs	r2, #0
 800d50e:	2104      	movs	r1, #4
		ret1 = ret[0] | 0x80;
 800d510:	f88d c002 	strb.w	ip, [sp, #2]
		ret2 = ret[1] | 0x80;
 800d514:	f88d 3003 	strb.w	r3, [sp, #3]
		CS_RESET;
 800d518:	f001 fe44 	bl	800f1a4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800d51c:	f10d 0102 	add.w	r1, sp, #2
 800d520:	4628      	mov	r0, r5
 800d522:	2364      	movs	r3, #100	; 0x64
 800d524:	2201      	movs	r2, #1
 800d526:	f002 faf7 	bl	800fb18 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val1,1,100);
 800d52a:	2364      	movs	r3, #100	; 0x64
 800d52c:	a901      	add	r1, sp, #4
 800d52e:	4628      	mov	r0, r5
 800d530:	2201      	movs	r2, #1
 800d532:	f002 fbaf 	bl	800fc94 <HAL_SPI_Receive>
		CS_SET;
 800d536:	4620      	mov	r0, r4
 800d538:	2201      	movs	r2, #1
 800d53a:	2104      	movs	r1, #4
 800d53c:	f001 fe32 	bl	800f1a4 <HAL_GPIO_WritePin>

		CS_RESET;
 800d540:	4620      	mov	r0, r4
 800d542:	2200      	movs	r2, #0
 800d544:	2104      	movs	r1, #4
 800d546:	f001 fe2d 	bl	800f1a4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800d54a:	f10d 0103 	add.w	r1, sp, #3
 800d54e:	4628      	mov	r0, r5
 800d550:	2364      	movs	r3, #100	; 0x64
 800d552:	2201      	movs	r2, #1
 800d554:	f002 fae0 	bl	800fb18 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3,&val2,1,100);
 800d558:	2364      	movs	r3, #100	; 0x64
 800d55a:	f10d 0105 	add.w	r1, sp, #5
 800d55e:	4628      	mov	r0, r5
 800d560:	2201      	movs	r2, #1
 800d562:	f002 fb97 	bl	800fc94 <HAL_SPI_Receive>
		CS_SET;
 800d566:	4620      	mov	r0, r4
 800d568:	2104      	movs	r1, #4
 800d56a:	2201      	movs	r2, #1
 800d56c:	f001 fe1a 	bl	800f1a4 <HAL_GPIO_WritePin>
		law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );
 800d570:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d574:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d578:	a802      	add	r0, sp, #8
 800d57a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d57e:	f820 3d02 	strh.w	r3, [r0, #-2]!

		//static int16_t zg_last=0;
		int16_t zg_median;

		//2000回目で0.17
		zg_median = median_filter(&law_data);
 800d582:	f7ff ff97 	bl	800d4b4 <median_filter>
		ZGFilterd = zg_median;
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800d586:	ee07 0a90 	vmov	s15, r0
 800d58a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800d600 <Update_IMU+0x108>
 800d58e:	4b1d      	ldr	r3, [pc, #116]	; (800d604 <Update_IMU+0x10c>)
		ZGFilterd = zg_median;
 800d590:	4a1d      	ldr	r2, [pc, #116]	; (800d608 <Update_IMU+0x110>)
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800d592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ZGFilterd = zg_median;
 800d596:	8010      	strh	r0, [r2, #0]
		ZGyro = (float)zg_median * convert_to_imu_angv;
 800d598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d59c:	edc3 7a00 	vstr	s15, [r3]
		*angv = -((0.01*ZGyro) + (0.99)* (zg_last));
		zg_last = ZGyro;
		//Angle;
		*angle += *angv *0.001;
#else
		*angv = -ZGyro; //角速度 rad / s
 800d5a0:	edd3 7a00 	vldr	s15, [r3]
 800d5a4:	eef1 7a67 	vneg.f32	s15, s15
 800d5a8:	edc7 7a00 	vstr	s15, [r7]

		//Angle;
		*angle += *angv * 0.001  - 0.000001784;//- 0.0000018432; //角度 rad
 800d5ac:	ee17 0a90 	vmov	r0, s15
 800d5b0:	f7fa ff02 	bl	80083b8 <__aeabi_f2d>
 800d5b4:	a30c      	add	r3, pc, #48	; (adr r3, 800d5e8 <Update_IMU+0xf0>)
 800d5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ba:	f7fa ff55 	bl	8008468 <__aeabi_dmul>
 800d5be:	a30c      	add	r3, pc, #48	; (adr r3, 800d5f0 <Update_IMU+0xf8>)
 800d5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c4:	f7fa fd98 	bl	80080f8 <__aeabi_dsub>
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	6830      	ldr	r0, [r6, #0]
 800d5cc:	460d      	mov	r5, r1
 800d5ce:	f7fa fef3 	bl	80083b8 <__aeabi_f2d>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	4629      	mov	r1, r5
 800d5da:	f7fa fd8f 	bl	80080fc <__adddf3>
 800d5de:	f7fb fa3b 	bl	8008a58 <__aeabi_d2f>
 800d5e2:	6030      	str	r0, [r6, #0]
	//*angv = -((0.01*zg_law) + (0.99)* (zg_last));
	zg_last = zg_law;
	//Angle;
	*angle += *angv *0.001;
#endif
}
 800d5e4:	b003      	add	sp, #12
 800d5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e8:	d2f1a9fc 	.word	0xd2f1a9fc
 800d5ec:	3f50624d 	.word	0x3f50624d
 800d5f0:	be73a9d7 	.word	0xbe73a9d7
 800d5f4:	3ebdee38 	.word	0x3ebdee38
 800d5f8:	40020c00 	.word	0x40020c00
 800d5fc:	2000a534 	.word	0x2000a534
 800d600:	3a8b7d78 	.word	0x3a8b7d78
 800d604:	200097e4 	.word	0x200097e4
 800d608:	2000a71c 	.word	0x2000a71c

0800d60c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800d60c:	b570      	push	{r4, r5, r6, lr}
 800d60e:	b084      	sub	sp, #16
	uint8_t ret;

	ret = reg & 0x7F;
 800d610:	ac04      	add	r4, sp, #16
	CS_RESET;
 800d612:	4d10      	ldr	r5, [pc, #64]	; (800d654 <write_byte+0x48>)
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800d614:	4e10      	ldr	r6, [pc, #64]	; (800d658 <write_byte+0x4c>)
void write_byte( uint8_t reg, uint8_t val )  {
 800d616:	f88d 1007 	strb.w	r1, [sp, #7]
	ret = reg & 0x7F;
 800d61a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d61e:	f804 0d01 	strb.w	r0, [r4, #-1]!
	CS_RESET;
 800d622:	2200      	movs	r2, #0
 800d624:	4628      	mov	r0, r5
 800d626:	2104      	movs	r1, #4
 800d628:	f001 fdbc 	bl	800f1a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800d62c:	4621      	mov	r1, r4
 800d62e:	4630      	mov	r0, r6
 800d630:	2364      	movs	r3, #100	; 0x64
 800d632:	2201      	movs	r2, #1
 800d634:	f002 fa70 	bl	800fb18 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800d638:	2364      	movs	r3, #100	; 0x64
 800d63a:	f10d 0107 	add.w	r1, sp, #7
 800d63e:	4630      	mov	r0, r6
 800d640:	2201      	movs	r2, #1
 800d642:	f002 fa69 	bl	800fb18 <HAL_SPI_Transmit>
	CS_SET;
 800d646:	4628      	mov	r0, r5
 800d648:	2201      	movs	r2, #1
 800d64a:	2104      	movs	r1, #4
 800d64c:	f001 fdaa 	bl	800f1a4 <HAL_GPIO_WritePin>
}
 800d650:	b004      	add	sp, #16
 800d652:	bd70      	pop	{r4, r5, r6, pc}
 800d654:	40020c00 	.word	0x40020c00
 800d658:	2000a534 	.word	0x2000a534

0800d65c <IMU_init>:

uint8_t IMU_init() {
 800d65c:	b510      	push	{r4, lr}
 800d65e:	b082      	sub	sp, #8
	ret = reg | 0x80;
 800d660:	ac02      	add	r4, sp, #8
 800d662:	2380      	movs	r3, #128	; 0x80
 800d664:	f804 3d02 	strb.w	r3, [r4, #-2]!
	CS_RESET;
 800d668:	2200      	movs	r2, #0
 800d66a:	2104      	movs	r1, #4
 800d66c:	481b      	ldr	r0, [pc, #108]	; (800d6dc <IMU_init+0x80>)
 800d66e:	f001 fd99 	bl	800f1a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800d672:	4621      	mov	r1, r4
 800d674:	2364      	movs	r3, #100	; 0x64
 800d676:	2201      	movs	r2, #1
 800d678:	4819      	ldr	r0, [pc, #100]	; (800d6e0 <IMU_init+0x84>)
 800d67a:	f002 fa4d 	bl	800fb18 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800d67e:	2364      	movs	r3, #100	; 0x64
 800d680:	2201      	movs	r2, #1
 800d682:	f10d 0107 	add.w	r1, sp, #7
 800d686:	4816      	ldr	r0, [pc, #88]	; (800d6e0 <IMU_init+0x84>)
 800d688:	f002 fb04 	bl	800fc94 <HAL_SPI_Receive>
	CS_SET;
 800d68c:	2201      	movs	r2, #1
 800d68e:	2104      	movs	r1, #4
 800d690:	4812      	ldr	r0, [pc, #72]	; (800d6dc <IMU_init+0x80>)
 800d692:	f001 fd87 	bl	800f1a4 <HAL_GPIO_WritePin>
	return val;
 800d696:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
	if ( who_am_i == 0xE0 ) {
 800d69a:	2be0      	cmp	r3, #224	; 0xe0
 800d69c:	d002      	beq.n	800d6a4 <IMU_init+0x48>
		write_byte(0x7F,0x00);	//USER_BANK0
	}
	return ret;
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800d69e:	2001      	movs	r0, #1
 800d6a0:	b002      	add	sp, #8
 800d6a2:	bd10      	pop	{r4, pc}
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800d6a4:	2101      	movs	r1, #1
 800d6a6:	2006      	movs	r0, #6
 800d6a8:	f7ff ffb0 	bl	800d60c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800d6ac:	2110      	movs	r1, #16
 800d6ae:	2003      	movs	r0, #3
 800d6b0:	f7ff ffac 	bl	800d60c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800d6b4:	2120      	movs	r1, #32
 800d6b6:	207f      	movs	r0, #127	; 0x7f
 800d6b8:	f7ff ffa8 	bl	800d60c <write_byte>
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800d6bc:	2117      	movs	r1, #23
 800d6be:	2001      	movs	r0, #1
 800d6c0:	f7ff ffa4 	bl	800d60c <write_byte>
		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800d6c4:	2117      	movs	r1, #23
 800d6c6:	2014      	movs	r0, #20
 800d6c8:	f7ff ffa0 	bl	800d60c <write_byte>
		write_byte(0x7F,0x00);	//USER_BANK0
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	207f      	movs	r0, #127	; 0x7f
 800d6d0:	f7ff ff9c 	bl	800d60c <write_byte>
}
 800d6d4:	2001      	movs	r0, #1
 800d6d6:	b002      	add	sp, #8
 800d6d8:	bd10      	pop	{r4, pc}
 800d6da:	bf00      	nop
 800d6dc:	40020c00 	.word	0x40020c00
 800d6e0:	2000a534 	.word	0x2000a534

0800d6e4 <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800d6e4:	b538      	push	{r3, r4, r5, lr}


	HAL_Delay(100);
 800d6e6:	2064      	movs	r0, #100	; 0x64
void IMU_Calib(){
 800d6e8:	ed2d 8b02 	vpush	{d8}
	HAL_Delay(100);
 800d6ec:	f000 fe2c 	bl	800e348 <HAL_Delay>

	int num = 2000;
	float zg_vals[2000]={0.0f};
	float sum=0;
 800d6f0:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 800d720 <IMU_Calib+0x3c>
 800d6f4:	4d0b      	ldr	r5, [pc, #44]	; (800d724 <IMU_Calib+0x40>)
	HAL_Delay(100);
 800d6f6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	for(int i = 0; i < num; i++){
		zg_vals[i] = ZGyro;
 800d6fa:	edd5 7a00 	vldr	s15, [r5]
		sum += zg_vals[i];
		HAL_Delay(2);
 800d6fe:	2002      	movs	r0, #2
		sum += zg_vals[i];
 800d700:	ee38 8a27 	vadd.f32	s16, s16, s15
		HAL_Delay(2);
 800d704:	f000 fe20 	bl	800e348 <HAL_Delay>
	for(int i = 0; i < num; i++){
 800d708:	3c01      	subs	r4, #1
 800d70a:	d1f6      	bne.n	800d6fa <IMU_Calib+0x16>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800d70c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800d728 <IMU_Calib+0x44>
 800d710:	4b06      	ldr	r3, [pc, #24]	; (800d72c <IMU_Calib+0x48>)
 800d712:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 800d716:	ecbd 8b02 	vpop	{d8}
	zg_offset = sum / 2000.0f;
 800d71a:	edc3 7a00 	vstr	s15, [r3]
}
 800d71e:	bd38      	pop	{r3, r4, r5, pc}
 800d720:	00000000 	.word	0x00000000
 800d724:	200097e4 	.word	0x200097e4
 800d728:	44fa0000 	.word	0x44fa0000
 800d72c:	200097f0 	.word	0x200097f0

0800d730 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800d730:	b508      	push	{r3, lr}
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800d732:	213c      	movs	r1, #60	; 0x3c
 800d734:	4804      	ldr	r0, [pc, #16]	; (800d748 <EncoderStart+0x18>)
 800d736:	f002 fd0d 	bl	8010154 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800d73a:	213c      	movs	r1, #60	; 0x3c
 800d73c:	4803      	ldr	r0, [pc, #12]	; (800d74c <EncoderStart+0x1c>)
}
 800d73e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800d742:	f002 bd07 	b.w	8010154 <HAL_TIM_Encoder_Start>
 800d746:	bf00      	nop
 800d748:	2000a4f4 	.word	0x2000a4f4
 800d74c:	2000a46c 	.word	0x2000a46c

0800d750 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800d750:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800d752:	4c05      	ldr	r4, [pc, #20]	; (800d768 <EmitterON+0x18>)
 800d754:	2100      	movs	r1, #0
 800d756:	4620      	mov	r0, r4
 800d758:	f002 fc20 	bl	800ff9c <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d75c:	4620      	mov	r0, r4
 800d75e:	2100      	movs	r1, #0

}
 800d760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d764:	f003 b892 	b.w	801088c <HAL_TIMEx_OCN_Start_IT>
 800d768:	2000a42c 	.word	0x2000a42c

0800d76c <EmitterOFF>:
void EmitterOFF()
{
 800d76c:	b510      	push	{r4, lr}
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800d76e:	4c05      	ldr	r4, [pc, #20]	; (800d784 <EmitterOFF+0x18>)
 800d770:	2100      	movs	r1, #0
 800d772:	4620      	mov	r0, r4
 800d774:	f002 fc5a 	bl	801002c <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d778:	4620      	mov	r0, r4
 800d77a:	2100      	movs	r1, #0

}
 800d77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800d780:	f003 b8b8 	b.w	80108f4 <HAL_TIMEx_OCN_Stop_IT>
 800d784:	2000a42c 	.word	0x2000a42c

0800d788 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800d788:	b508      	push	{r3, lr}
	//Switch
	switch(mode){
 800d78a:	2807      	cmp	r0, #7
 800d78c:	d851      	bhi.n	800d832 <ChangeLED+0xaa>
 800d78e:	e8df f000 	tbb	[pc, r0]
 800d792:	2c18      	.short	0x2c18
 800d794:	463e362e 	.word	0x463e362e
 800d798:	044e      	.short	0x044e
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);

		break;
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d79a:	2201      	movs	r2, #1
 800d79c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7a0:	4824      	ldr	r0, [pc, #144]	; (800d834 <ChangeLED+0xac>)
 800d7a2:	f001 fcff 	bl	800f1a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d7ac:	4821      	ldr	r0, [pc, #132]	; (800d834 <ChangeLED+0xac>)
 800d7ae:	f001 fcf9 	bl	800f1a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7b8:	481f      	ldr	r0, [pc, #124]	; (800d838 <ChangeLED+0xb0>)

		break;
	default: break;

	}
}
 800d7ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800d7be:	f001 bcf1 	b.w	800f1a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d7c2:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d7c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7c8:	481a      	ldr	r0, [pc, #104]	; (800d834 <ChangeLED+0xac>)
 800d7ca:	f001 fceb 	bl	800f1a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d7d4:	4817      	ldr	r0, [pc, #92]	; (800d834 <ChangeLED+0xac>)
 800d7d6:	f001 fce5 	bl	800f1a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7e0:	4815      	ldr	r0, [pc, #84]	; (800d838 <ChangeLED+0xb0>)
}
 800d7e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800d7e6:	f001 bcdd 	b.w	800f1a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	e7ea      	b.n	800d7c4 <ChangeLED+0x3c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7f4:	480f      	ldr	r0, [pc, #60]	; (800d834 <ChangeLED+0xac>)
 800d7f6:	f001 fcd5 	bl	800f1a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	e7e8      	b.n	800d7d0 <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d7fe:	2201      	movs	r2, #1
 800d800:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d804:	480b      	ldr	r0, [pc, #44]	; (800d834 <ChangeLED+0xac>)
 800d806:	f001 fccd 	bl	800f1a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800d80a:	2201      	movs	r2, #1
 800d80c:	e7e0      	b.n	800d7d0 <ChangeLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d80e:	2200      	movs	r2, #0
 800d810:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d814:	4807      	ldr	r0, [pc, #28]	; (800d834 <ChangeLED+0xac>)
 800d816:	f001 fcc5 	bl	800f1a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800d81a:	2200      	movs	r2, #0
 800d81c:	e7c4      	b.n	800d7a8 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800d81e:	2201      	movs	r2, #1
 800d820:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d824:	4803      	ldr	r0, [pc, #12]	; (800d834 <ChangeLED+0xac>)
 800d826:	f001 fcbd 	bl	800f1a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800d82a:	2200      	movs	r2, #0
 800d82c:	e7bc      	b.n	800d7a8 <ChangeLED+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d82e:	2200      	movs	r2, #0
 800d830:	e7b4      	b.n	800d79c <ChangeLED+0x14>
}
 800d832:	bd08      	pop	{r3, pc}
 800d834:	40020800 	.word	0x40020800
 800d838:	40020400 	.word	0x40020400

0800d83c <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800d83c:	b508      	push	{r3, lr}
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800d83e:	210c      	movs	r1, #12
 800d840:	4808      	ldr	r0, [pc, #32]	; (800d864 <Motor_PWM_Start+0x28>)
 800d842:	f002 fc4b 	bl	80100dc <HAL_TIM_PWM_Start>
 800d846:	b948      	cbnz	r0, 800d85c <Motor_PWM_Start+0x20>
  {
	  Error_Handler();
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800d848:	2104      	movs	r1, #4
 800d84a:	4807      	ldr	r0, [pc, #28]	; (800d868 <Motor_PWM_Start+0x2c>)
 800d84c:	f002 fc46 	bl	80100dc <HAL_TIM_PWM_Start>
 800d850:	b900      	cbnz	r0, 800d854 <Motor_PWM_Start+0x18>
  {
	  Error_Handler();
  }
#endif
}
 800d852:	bd08      	pop	{r3, pc}
 800d854:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 800d858:	f7fe bf38 	b.w	800c6cc <Error_Handler>
	  Error_Handler();
 800d85c:	f7fe ff36 	bl	800c6cc <Error_Handler>
 800d860:	e7f2      	b.n	800d848 <Motor_PWM_Start+0xc>
 800d862:	bf00      	nop
 800d864:	20009750 	.word	0x20009750
 800d868:	20009790 	.word	0x20009790

0800d86c <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 800d86c:	b508      	push	{r3, lr}
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800d86e:	210c      	movs	r1, #12
 800d870:	4808      	ldr	r0, [pc, #32]	; (800d894 <Motor_PWM_Stop+0x28>)
 800d872:	f002 fc35 	bl	80100e0 <HAL_TIM_PWM_Stop>
 800d876:	b948      	cbnz	r0, 800d88c <Motor_PWM_Stop+0x20>
  {
	  Error_Handler();
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800d878:	2104      	movs	r1, #4
 800d87a:	4807      	ldr	r0, [pc, #28]	; (800d898 <Motor_PWM_Stop+0x2c>)
 800d87c:	f002 fc30 	bl	80100e0 <HAL_TIM_PWM_Stop>
 800d880:	b900      	cbnz	r0, 800d884 <Motor_PWM_Stop+0x18>
  {
	  Error_Handler();
  }
#endif
}
 800d882:	bd08      	pop	{r3, pc}
 800d884:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 800d888:	f7fe bf20 	b.w	800c6cc <Error_Handler>
	  Error_Handler();
 800d88c:	f7fe ff1e 	bl	800c6cc <Error_Handler>
 800d890:	e7f2      	b.n	800d878 <Motor_PWM_Stop+0xc>
 800d892:	bf00      	nop
 800d894:	20009750 	.word	0x20009750
 800d898:	20009790 	.word	0x20009790
 800d89c:	00000000 	.word	0x00000000

0800d8a0 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 800d8a0:	b570      	push	{r4, r5, r6, lr}
	if (left > 0 ){
 800d8a2:	1e05      	subs	r5, r0, #0
inline void Motor_Switch(int left, int right){
 800d8a4:	460c      	mov	r4, r1
	if (left > 0 ){
 800d8a6:	dc35      	bgt.n	800d914 <Motor_Switch+0x74>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転

	}
	else  if (left < 0){
 800d8a8:	d141      	bne.n	800d92e <Motor_Switch+0x8e>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
		left = -left;
	}
	if (right > 0){
 800d8aa:	2c00      	cmp	r4, #0
 800d8ac:	dc14      	bgt.n	800d8d8 <Motor_Switch+0x38>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転

	}

	else if (right < 0){
 800d8ae:	d137      	bne.n	800d920 <Motor_Switch+0x80>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
	  	right = -right;
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	f7fa fd6f 	bl	8008394 <__aeabi_i2d>
 800d8b6:	a322      	add	r3, pc, #136	; (adr r3, 800d940 <Motor_Switch+0xa0>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	f7fb f864 	bl	8008988 <__aeabi_dcmpgt>
 800d8c0:	f640 13d8 	movw	r3, #2520	; 0x9d8
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	bf18      	it	ne
 800d8c8:	461d      	movne	r5, r3
	if(right > 4200*0.6) right = 4200*0.6;


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800d8ca:	4a1f      	ldr	r2, [pc, #124]	; (800d948 <Motor_Switch+0xa8>)
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800d8cc:	4b1f      	ldr	r3, [pc, #124]	; (800d94c <Motor_Switch+0xac>)
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800d8ce:	6812      	ldr	r2, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800d8d0:	681b      	ldr	r3, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 800d8d2:	6394      	str	r4, [r2, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 800d8d4:	641d      	str	r5, [r3, #64]	; 0x40
}
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 800d8d8:	2200      	movs	r2, #0
 800d8da:	2101      	movs	r1, #1
 800d8dc:	481c      	ldr	r0, [pc, #112]	; (800d950 <Motor_Switch+0xb0>)
 800d8de:	f001 fc61 	bl	800f1a4 <HAL_GPIO_WritePin>
	if(left > 4200*0.6) left = 4200*0.6;
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	f7fa fd56 	bl	8008394 <__aeabi_i2d>
 800d8e8:	a315      	add	r3, pc, #84	; (adr r3, 800d940 <Motor_Switch+0xa0>)
 800d8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ee:	f7fb f84b 	bl	8008988 <__aeabi_dcmpgt>
 800d8f2:	f640 16d8 	movw	r6, #2520	; 0x9d8
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	bf18      	it	ne
 800d8fa:	4635      	movne	r5, r6
	if(right > 4200*0.6) right = 4200*0.6;
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	f7fa fd49 	bl	8008394 <__aeabi_i2d>
 800d902:	a30f      	add	r3, pc, #60	; (adr r3, 800d940 <Motor_Switch+0xa0>)
 800d904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d908:	f7fb f83e 	bl	8008988 <__aeabi_dcmpgt>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	bf18      	it	ne
 800d910:	4634      	movne	r4, r6
 800d912:	e7da      	b.n	800d8ca <Motor_Switch+0x2a>
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 800d914:	2201      	movs	r2, #1
 800d916:	2104      	movs	r1, #4
 800d918:	480d      	ldr	r0, [pc, #52]	; (800d950 <Motor_Switch+0xb0>)
 800d91a:	f001 fc43 	bl	800f1a4 <HAL_GPIO_WritePin>
 800d91e:	e7c4      	b.n	800d8aa <Motor_Switch+0xa>
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 800d920:	2201      	movs	r2, #1
 800d922:	4611      	mov	r1, r2
 800d924:	480a      	ldr	r0, [pc, #40]	; (800d950 <Motor_Switch+0xb0>)
 800d926:	f001 fc3d 	bl	800f1a4 <HAL_GPIO_WritePin>
	  	right = -right;
 800d92a:	4264      	negs	r4, r4
 800d92c:	e7d9      	b.n	800d8e2 <Motor_Switch+0x42>
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 800d92e:	2200      	movs	r2, #0
 800d930:	2104      	movs	r1, #4
 800d932:	4807      	ldr	r0, [pc, #28]	; (800d950 <Motor_Switch+0xb0>)
 800d934:	f001 fc36 	bl	800f1a4 <HAL_GPIO_WritePin>
		left = -left;
 800d938:	426d      	negs	r5, r5
 800d93a:	e7b6      	b.n	800d8aa <Motor_Switch+0xa>
 800d93c:	f3af 8000 	nop.w
 800d940:	00000000 	.word	0x00000000
 800d944:	40a3b000 	.word	0x40a3b000
 800d948:	20009790 	.word	0x20009790
 800d94c:	20009750 	.word	0x20009750
 800d950:	40020000 	.word	0x40020000

0800d954 <InitPulse>:
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
	* timer_counter = initial_pulse;
 800d954:	6001      	str	r1, [r0, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 800d956:	4770      	bx	lr

0800d958 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 800d958:	b4f0      	push	{r4, r5, r6, r7}
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
	error = abs( last[receiver_num] - raw );
 800d95a:	4e1a      	ldr	r6, [pc, #104]	; (800d9c4 <GetWallDataAverage+0x6c>)
	last[receiver_num] = raw;
	integrate[receiver_num] += error;

	count[receiver_num]++;
 800d95c:	4c1a      	ldr	r4, [pc, #104]	; (800d9c8 <GetWallDataAverage+0x70>)
	error = abs( last[receiver_num] - raw );
 800d95e:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
	integrate[receiver_num] += error;
 800d962:	4d1a      	ldr	r5, [pc, #104]	; (800d9cc <GetWallDataAverage+0x74>)
	last[receiver_num] = raw;
 800d964:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800d968:	1a5b      	subs	r3, r3, r1
	count[receiver_num]++;
 800d96a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
	integrate[receiver_num] += error;
 800d96e:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
	error = abs( last[receiver_num] - raw );
 800d972:	2b00      	cmp	r3, #0
 800d974:	bfb8      	it	lt
 800d976:	425b      	neglt	r3, r3
	count[receiver_num]++;
 800d978:	3101      	adds	r1, #1
	integrate[receiver_num] += error;
 800d97a:	443b      	add	r3, r7
	if(count[receiver_num] == average_of_n_times)
 800d97c:	4281      	cmp	r1, r0
	integrate[receiver_num] += error;
 800d97e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	count[receiver_num]++;
 800d982:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 800d986:	d006      	beq.n	800d996 <GetWallDataAverage+0x3e>
 800d988:	4b11      	ldr	r3, [pc, #68]	; (800d9d0 <GetWallDataAverage+0x78>)
 800d98a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d98e:	ed92 0a00 	vldr	s0, [r2]
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
		integrate[receiver_num] = 0;
		count[receiver_num] = 0;
	}
	return average[receiver_num];
}
 800d992:	bcf0      	pop	{r4, r5, r6, r7}
 800d994:	4770      	bx	lr
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800d996:	ee07 3a90 	vmov	s15, r3
 800d99a:	ee07 1a10 	vmov	s14, r1
 800d99e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d9a6:	4b0a      	ldr	r3, [pc, #40]	; (800d9d0 <GetWallDataAverage+0x78>)
 800d9a8:	ee87 0a87 	vdiv.f32	s0, s15, s14
		integrate[receiver_num] = 0;
 800d9ac:	2100      	movs	r1, #0
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800d9ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		integrate[receiver_num] = 0;
 800d9b2:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
		count[receiver_num] = 0;
 800d9b6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}
 800d9ba:	bcf0      	pop	{r4, r5, r6, r7}
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 800d9bc:	ed83 0a00 	vstr	s0, [r3]
}
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	20009824 	.word	0x20009824
 800d9c8:	20009804 	.word	0x20009804
 800d9cc:	20009814 	.word	0x20009814
 800d9d0:	200097f4 	.word	0x200097f4

0800d9d4 <ADCToBatteryVoltage>:
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
	float battery_voltage = 0;
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 800d9d4:	ee07 0a90 	vmov	s15, r0
 800d9d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9dc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d9e0:	ee20 0a20 	vmul.f32	s0, s0, s1
	return battery_voltage;
}
 800d9e4:	ee80 0a01 	vdiv.f32	s0, s0, s2
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop

0800d9ec <IntegerPower>:
//-------------------------//

int IntegerPower(int integer, int exponential)
{
	int pattern_num = 1;
	for(int i=0; i < exponential ; i++)
 800d9ec:	2900      	cmp	r1, #0
 800d9ee:	dd08      	ble.n	800da02 <IntegerPower+0x16>
 800d9f0:	2300      	movs	r3, #0
	int pattern_num = 1;
 800d9f2:	2201      	movs	r2, #1
	for(int i=0; i < exponential ; i++)
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	4299      	cmp	r1, r3
	{
		pattern_num *= integer;
 800d9f8:	fb00 f202 	mul.w	r2, r0, r2
	for(int i=0; i < exponential ; i++)
 800d9fc:	d1fa      	bne.n	800d9f4 <IntegerPower+0x8>
	}
	return pattern_num;
}
 800d9fe:	4610      	mov	r0, r2
 800da00:	4770      	bx	lr
	int pattern_num = 1;
 800da02:	2201      	movs	r2, #1
}
 800da04:	4610      	mov	r0, r2
 800da06:	4770      	bx	lr

0800da08 <GetBatteryLevel>:

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
	float current_percentage = current_voltage / battery_max;
	float lowest_percentage =  battery_min / battery_max;
 800da08:	eec0 0a81 	vdiv.f32	s1, s1, s2

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;

	int pattern = 0;
	for(int i=0; i < level_num; i++)
 800da0c:	2800      	cmp	r0, #0
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800da0e:	ee07 0a10 	vmov	s14, r0
 800da12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800da16:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800da1a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	float current_percentage = current_voltage / battery_max;
 800da1e:	ee80 0a01 	vdiv.f32	s0, s0, s2
	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 800da22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	for(int i=0; i < level_num; i++)
 800da26:	dd14      	ble.n	800da52 <GetBatteryLevel+0x4a>
 800da28:	2300      	movs	r3, #0
	int pattern = 0;
 800da2a:	461a      	mov	r2, r3
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 800da2c:	ee07 3a90 	vmov	s15, r3
 800da30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da34:	eef0 6a60 	vmov.f32	s13, s1
 800da38:	eee7 6a87 	vfma.f32	s13, s15, s14
 800da3c:	eef4 6a40 	vcmp.f32	s13, s0
 800da40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da44:	bf98      	it	ls
 800da46:	461a      	movls	r2, r3
	for(int i=0; i < level_num; i++)
 800da48:	3301      	adds	r3, #1
 800da4a:	4298      	cmp	r0, r3
 800da4c:	d1ee      	bne.n	800da2c <GetBatteryLevel+0x24>
		{
			pattern = i;
		}
	}
	return pattern;
}
 800da4e:	4610      	mov	r0, r2
 800da50:	4770      	bx	lr
	int pattern = 0;
 800da52:	2200      	movs	r2, #0
}
 800da54:	4610      	mov	r0, r2
 800da56:	4770      	bx	lr

0800da58 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 800da58:	b510      	push	{r4, lr}
	  setbuf(stdout,NULL);
 800da5a:	4c06      	ldr	r4, [pc, #24]	; (800da74 <Buffering+0x1c>)
 800da5c:	6823      	ldr	r3, [r4, #0]
 800da5e:	2100      	movs	r1, #0
 800da60:	6898      	ldr	r0, [r3, #8]
 800da62:	f005 fa07 	bl	8012e74 <setbuf>
	  setbuf(stdin,NULL);
 800da66:	6823      	ldr	r3, [r4, #0]
 800da68:	2100      	movs	r1, #0
 800da6a:	6858      	ldr	r0, [r3, #4]
}
 800da6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  setbuf(stdin,NULL);
 800da70:	f005 ba00 	b.w	8012e74 <setbuf>
 800da74:	20000038 	.word	0x20000038

0800da78 <Copy_Gain>:
void Copy_Gain()
{
 800da78:	b570      	push	{r4, r5, r6, lr}
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
	float data[16]={0};
	data[0] = Pid[L_VELO_PID].KP;
 800da7a:	4b1c      	ldr	r3, [pc, #112]	; (800daec <Copy_Gain+0x74>)
	uint32_t address = start_adress_sector9;
 800da7c:	4c1c      	ldr	r4, [pc, #112]	; (800daf0 <Copy_Gain+0x78>)
	data[1] = Pid[L_VELO_PID].KI;
 800da7e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
	data[2] = Pid[L_VELO_PID].KD;
 800da82:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8

	data[3] = Pid[A_VELO_PID].KP;
 800da86:	6818      	ldr	r0, [r3, #0]
	data[4] = Pid[A_VELO_PID].KI;
 800da88:	6859      	ldr	r1, [r3, #4]
	data[0] = Pid[L_VELO_PID].KP;
 800da8a:	ed93 0a2c 	vldr	s0, [r3, #176]	; 0xb0
	data[6] = Pid[L_WALL_PID].KP;
	data[7] = Pid[L_WALL_PID].KI;
	data[8] = Pid[L_WALL_PID].KD;

	data[9] = Pid[R_WALL_PID].KP;
	data[10] = Pid[R_WALL_PID].KI;
 800da8e:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
	uint32_t address = start_adress_sector9;
 800da92:	6824      	ldr	r4, [r4, #0]
{
 800da94:	b090      	sub	sp, #64	; 0x40
	data[0] = Pid[L_VELO_PID].KP;
 800da96:	ed8d 0a00 	vstr	s0, [sp]
	data[1] = Pid[L_VELO_PID].KI;
 800da9a:	9201      	str	r2, [sp, #4]
	data[5] = Pid[A_VELO_PID].KD;
 800da9c:	689a      	ldr	r2, [r3, #8]
	data[2] = Pid[L_VELO_PID].KD;
 800da9e:	9502      	str	r5, [sp, #8]
	data[3] = Pid[A_VELO_PID].KP;
 800daa0:	9003      	str	r0, [sp, #12]
	data[6] = Pid[L_WALL_PID].KP;
 800daa2:	6d9d      	ldr	r5, [r3, #88]	; 0x58
	data[7] = Pid[L_WALL_PID].KI;
 800daa4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
	data[4] = Pid[A_VELO_PID].KI;
 800daa6:	9104      	str	r1, [sp, #16]
	data[5] = Pid[A_VELO_PID].KD;
 800daa8:	9205      	str	r2, [sp, #20]
	data[8] = Pid[L_WALL_PID].KD;
 800daaa:	6e19      	ldr	r1, [r3, #96]	; 0x60
	data[9] = Pid[R_WALL_PID].KP;
 800daac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	data[6] = Pid[L_WALL_PID].KP;
 800dab0:	9506      	str	r5, [sp, #24]
	data[7] = Pid[L_WALL_PID].KI;
 800dab2:	9007      	str	r0, [sp, #28]
	data[11] = Pid[R_WALL_PID].KD;
 800dab4:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c

	data[12] = Pid[D_WALL_PID].KP;
 800dab8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	data[8] = Pid[L_WALL_PID].KD;
 800daba:	9108      	str	r1, [sp, #32]
	data[9] = Pid[R_WALL_PID].KP;
 800dabc:	9209      	str	r2, [sp, #36]	; 0x24
	data[13] = Pid[D_WALL_PID].KI;
 800dabe:	6b19      	ldr	r1, [r3, #48]	; 0x30
	data[14] = Pid[D_WALL_PID].KD;
 800dac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	data[10] = Pid[R_WALL_PID].KI;
 800dac2:	960a      	str	r6, [sp, #40]	; 0x28
	float data[16]={0};
 800dac4:	2300      	movs	r3, #0
	data[11] = Pid[R_WALL_PID].KD;
 800dac6:	950b      	str	r5, [sp, #44]	; 0x2c
	data[12] = Pid[D_WALL_PID].KP;
 800dac8:	900c      	str	r0, [sp, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 800daca:	910d      	str	r1, [sp, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 800dacc:	920e      	str	r2, [sp, #56]	; 0x38
 800dace:	ad01      	add	r5, sp, #4
	float data[16]={0};
 800dad0:	930f      	str	r3, [sp, #60]	; 0x3c
 800dad2:	ae0f      	add	r6, sp, #60	; 0x3c
 800dad4:	e001      	b.n	800dada <Copy_Gain+0x62>
 800dad6:	ecb5 0a01 	vldmia	r5!, {s0}
	for(int i=0; i < 15; i++)
	{

		FLASH_Write_Word_F( address, data[i]);
 800dada:	4620      	mov	r0, r4
 800dadc:	f7ff fc04 	bl	800d2e8 <FLASH_Write_Word_F>
	for(int i=0; i < 15; i++)
 800dae0:	42b5      	cmp	r5, r6
		address += 0x04;
 800dae2:	f104 0404 	add.w	r4, r4, #4
	for(int i=0; i < 15; i++)
 800dae6:	d1f6      	bne.n	800dad6 <Copy_Gain+0x5e>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 800dae8:	b010      	add	sp, #64	; 0x40
 800daea:	bd70      	pop	{r4, r5, r6, pc}
 800daec:	20009834 	.word	0x20009834
 800daf0:	080165e8 	.word	0x080165e8

0800daf4 <Load_Gain>:
void Load_Gain()
{
 800daf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daf8:	ed2d 8b02 	vpush	{d8}
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 800dafc:	4b61      	ldr	r3, [pc, #388]	; (800dc84 <Load_Gain+0x190>)
	uint8_t j=0;
	for(int i=0; i < 15; i++)
	{
		FLASH_Read_Word_F( address, &data[i]);
		address += 0x04;
		printf("%d, %f\r\n",i,data[i]);
 800dafe:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800dca0 <Load_Gain+0x1ac>
	uint32_t address = start_adress_sector9;//こっちか
 800db02:	681f      	ldr	r7, [r3, #0]
		judge = isnanf(data[i]); //nanでなければ0
		printf("judge : %d\r\n", judge);
 800db04:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800dca4 <Load_Gain+0x1b0>
{
 800db08:	b090      	sub	sp, #64	; 0x40
	float data[16]={0};//1個多く要素を作る。
 800db0a:	4668      	mov	r0, sp
 800db0c:	2240      	movs	r2, #64	; 0x40
 800db0e:	2100      	movs	r1, #0
 800db10:	f003 fbd3 	bl	80112ba <memset>
 800db14:	466c      	mov	r4, sp
	for(int i=0; i < 15; i++)
 800db16:	2500      	movs	r5, #0
 800db18:	1b3f      	subs	r7, r7, r4
	uint8_t j=0;
 800db1a:	46aa      	mov	sl, r5
		FLASH_Read_Word_F( address, &data[i]);
 800db1c:	4621      	mov	r1, r4
 800db1e:	1938      	adds	r0, r7, r4
 800db20:	f7ff fc08 	bl	800d334 <FLASH_Read_Word_F>
		printf("%d, %f\r\n",i,data[i]);
 800db24:	6820      	ldr	r0, [r4, #0]
 800db26:	f7fa fc47 	bl	80083b8 <__aeabi_f2d>
 800db2a:	4602      	mov	r2, r0
 800db2c:	460b      	mov	r3, r1
 800db2e:	4648      	mov	r0, r9
 800db30:	4629      	mov	r1, r5
 800db32:	f004 fec1 	bl	80128b8 <iprintf>
		judge = isnanf(data[i]); //nanでなければ0
 800db36:	ecb4 8a01 	vldmia	r4!, {s16}
 800db3a:	eeb4 8a48 	vcmp.f32	s16, s16
 800db3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		printf("judge : %d\r\n", judge);
 800db42:	bf6c      	ite	vs
 800db44:	2101      	movvs	r1, #1
 800db46:	2100      	movvc	r1, #0
 800db48:	4640      	mov	r0, r8
 800db4a:	f004 feb5 	bl	80128b8 <iprintf>
		if(judge == 1) //コンパイラでisnanfの結果が変わる
 800db4e:	eeb4 8a48 	vcmp.f32	s16, s16
 800db52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			j++;
 800db56:	bf68      	it	vs
 800db58:	f10a 0a01 	addvs.w	sl, sl, #1
	for(int i=0; i < 15; i++)
 800db5c:	f105 0501 	add.w	r5, r5, #1
			j++;
 800db60:	bf68      	it	vs
 800db62:	fa5f fa8a 	uxtbvs.w	sl, sl
	for(int i=0; i < 15; i++)
 800db66:	2d0f      	cmp	r5, #15
 800db68:	d1d8      	bne.n	800db1c <Load_Gain+0x28>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 800db6a:	4651      	mov	r1, sl
 800db6c:	4846      	ldr	r0, [pc, #280]	; (800dc88 <Load_Gain+0x194>)
 800db6e:	f004 fea3 	bl	80128b8 <iprintf>
		if(j == 15)//全てnan0であれば
 800db72:	f1ba 0f0f 	cmp.w	sl, #15
 800db76:	d03a      	beq.n	800dbee <Load_Gain+0xfa>
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			//2回目以降こっちが呼ばれる
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 800db78:	ed9d 1a02 	vldr	s2, [sp, #8]
 800db7c:	eddd 0a01 	vldr	s1, [sp, #4]
 800db80:	ed9d 0a00 	vldr	s0, [sp]
 800db84:	2004      	movs	r0, #4
 800db86:	f000 fa1b 	bl	800dfc0 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 800db8a:	ed9d 1a02 	vldr	s2, [sp, #8]
 800db8e:	eddd 0a01 	vldr	s1, [sp, #4]
 800db92:	ed9d 0a00 	vldr	s0, [sp]
 800db96:	2005      	movs	r0, #5
 800db98:	f000 fa12 	bl	800dfc0 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800db9c:	ed9d 1a05 	vldr	s2, [sp, #20]
 800dba0:	eddd 0a04 	vldr	s1, [sp, #16]
 800dba4:	ed9d 0a03 	vldr	s0, [sp, #12]
 800dba8:	2000      	movs	r0, #0
 800dbaa:	f000 fa09 	bl	800dfc0 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 800dbae:	ed9d 1a08 	vldr	s2, [sp, #32]
 800dbb2:	eddd 0a07 	vldr	s1, [sp, #28]
 800dbb6:	ed9d 0a06 	vldr	s0, [sp, #24]
 800dbba:	2002      	movs	r0, #2
 800dbbc:	f000 fa00 	bl	800dfc0 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 800dbc0:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
 800dbc4:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
 800dbc8:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 800dbcc:	2003      	movs	r0, #3
 800dbce:	f000 f9f7 	bl	800dfc0 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 800dbd2:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
 800dbd6:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
 800dbda:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
 800dbde:	2001      	movs	r0, #1
 800dbe0:	f000 f9ee 	bl	800dfc0 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 800dbe4:	b010      	add	sp, #64	; 0x40
 800dbe6:	ecbd 8b02 	vpop	{d8}
 800dbea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("デフォルトゲインセット\r\n");
 800dbee:	4827      	ldr	r0, [pc, #156]	; (800dc8c <Load_Gain+0x198>)
 800dbf0:	f004 feea 	bl	80129c8 <puts>
		  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);
 800dbf4:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800dc90 <Load_Gain+0x19c>
 800dbf8:	eddf 0a26 	vldr	s1, [pc, #152]	; 800dc94 <Load_Gain+0x1a0>
 800dbfc:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800dc98 <Load_Gain+0x1a4>
 800dc00:	2004      	movs	r0, #4
 800dc02:	f000 f9dd 	bl	800dfc0 <PIDSetGain>
		  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);
 800dc06:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800dc90 <Load_Gain+0x19c>
 800dc0a:	eddf 0a22 	vldr	s1, [pc, #136]	; 800dc94 <Load_Gain+0x1a0>
 800dc0e:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800dc98 <Load_Gain+0x1a4>
 800dc12:	2005      	movs	r0, #5
 800dc14:	f000 f9d4 	bl	800dfc0 <PIDSetGain>
		  PIDSetGain(A_VELO_PID, 14.6,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800dc18:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800dc9c <Load_Gain+0x1a8>
 800dc1c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800dc98 <Load_Gain+0x1a4>
 800dc20:	eef0 0a41 	vmov.f32	s1, s2
 800dc24:	2000      	movs	r0, #0
 800dc26:	f000 f9cb 	bl	800dfc0 <PIDSetGain>
		  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800dc2a:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800dc9c <Load_Gain+0x1a8>
 800dc2e:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800dc98 <Load_Gain+0x1a4>
 800dc32:	eef0 0a41 	vmov.f32	s1, s2
 800dc36:	2008      	movs	r0, #8
 800dc38:	f000 f9c2 	bl	800dfc0 <PIDSetGain>
		  PIDSetGain(D_WALL_PID, 6, 4, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800dc3c:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800dc9c <Load_Gain+0x1a8>
 800dc40:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800dc44:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800dc48:	2001      	movs	r0, #1
 800dc4a:	f000 f9b9 	bl	800dfc0 <PIDSetGain>
		  PIDSetGain(L_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800dc4e:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800dc9c <Load_Gain+0x1a8>
 800dc52:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800dc56:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800dc5a:	2002      	movs	r0, #2
 800dc5c:	f000 f9b0 	bl	800dfc0 <PIDSetGain>
		  PIDSetGain(R_WALL_PID, 12,8,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800dc60:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 800dc9c <Load_Gain+0x1a8>
 800dc64:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 800dc68:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800dc6c:	2003      	movs	r0, #3
 800dc6e:	f000 f9a7 	bl	800dfc0 <PIDSetGain>
			Flash_clear_sector9();
 800dc72:	f7ff fba5 	bl	800d3c0 <Flash_clear_sector9>
			Copy_Gain();
 800dc76:	f7ff feff 	bl	800da78 <Copy_Gain>
}
 800dc7a:	b010      	add	sp, #64	; 0x40
 800dc7c:	ecbd 8b02 	vpop	{d8}
 800dc80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc84:	080165e8 	.word	0x080165e8
 800dc88:	080165bc 	.word	0x080165bc
 800dc8c:	08016734 	.word	0x08016734
 800dc90:	3a83126f 	.word	0x3a83126f
 800dc94:	452f0000 	.word	0x452f0000
 800dc98:	4169999a 	.word	0x4169999a
 800dc9c:	00000000 	.word	0x00000000
 800dca0:	08016554 	.word	0x08016554
 800dca4:	08016724 	.word	0x08016724

0800dca8 <Change_Gain>:
void Change_Gain()
{
 800dca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 800dcac:	48a4      	ldr	r0, [pc, #656]	; (800df40 <Change_Gain+0x298>)
 800dcae:	4ca5      	ldr	r4, [pc, #660]	; (800df44 <Change_Gain+0x29c>)
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 800dcb0:	f8df 8304 	ldr.w	r8, [pc, #772]	; 800dfb8 <Change_Gain+0x310>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800dcb4:	4da4      	ldr	r5, [pc, #656]	; (800df48 <Change_Gain+0x2a0>)
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800dcb6:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800dfbc <Change_Gain+0x314>
{
 800dcba:	b087      	sub	sp, #28
	HAL_TIM_Base_Stop_IT(&htim1);
 800dcbc:	f002 f92c 	bl	800ff18 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800dcc0:	48a2      	ldr	r0, [pc, #648]	; (800df4c <Change_Gain+0x2a4>)
 800dcc2:	f002 f929 	bl	800ff18 <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 800dcc6:	f7ff fdd1 	bl	800d86c <Motor_PWM_Stop>
	EmitterOFF();
 800dcca:	f7ff fd4f 	bl	800d76c <EmitterOFF>
	HAL_Delay(200);
 800dcce:	20c8      	movs	r0, #200	; 0xc8
 800dcd0:	f000 fb3a 	bl	800e348 <HAL_Delay>
	char change_mode='0';
 800dcd4:	2330      	movs	r3, #48	; 0x30
 800dcd6:	f88d 3015 	strb.w	r3, [sp, #21]
	char pid = '0';
 800dcda:	f88d 3016 	strb.w	r3, [sp, #22]
		printf("現在のPIDゲイン\r\n");
 800dcde:	4640      	mov	r0, r8
 800dce0:	f004 fe72 	bl	80129c8 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 800dce4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800dce8:	f7fa fb66 	bl	80083b8 <__aeabi_f2d>
 800dcec:	4606      	mov	r6, r0
 800dcee:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800dcf2:	460f      	mov	r7, r1
 800dcf4:	f7fa fb60 	bl	80083b8 <__aeabi_f2d>
 800dcf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcfc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800dd00:	f7fa fb5a 	bl	80083b8 <__aeabi_f2d>
 800dd04:	4632      	mov	r2, r6
 800dd06:	463b      	mov	r3, r7
 800dd08:	e9cd 0100 	strd	r0, r1, [sp]
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	f004 fdd3 	bl	80128b8 <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 800dd12:	6820      	ldr	r0, [r4, #0]
 800dd14:	f7fa fb50 	bl	80083b8 <__aeabi_f2d>
 800dd18:	4606      	mov	r6, r0
 800dd1a:	68a0      	ldr	r0, [r4, #8]
 800dd1c:	460f      	mov	r7, r1
 800dd1e:	f7fa fb4b 	bl	80083b8 <__aeabi_f2d>
 800dd22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd26:	6860      	ldr	r0, [r4, #4]
 800dd28:	f7fa fb46 	bl	80083b8 <__aeabi_f2d>
 800dd2c:	4632      	mov	r2, r6
 800dd2e:	463b      	mov	r3, r7
 800dd30:	e9cd 0100 	strd	r0, r1, [sp]
 800dd34:	4648      	mov	r0, r9
 800dd36:	f004 fdbf 	bl	80128b8 <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 800dd3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd3c:	f7fa fb3c 	bl	80083b8 <__aeabi_f2d>
 800dd40:	4606      	mov	r6, r0
 800dd42:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800dd44:	460f      	mov	r7, r1
 800dd46:	f7fa fb37 	bl	80083b8 <__aeabi_f2d>
 800dd4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd4e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800dd50:	f7fa fb32 	bl	80083b8 <__aeabi_f2d>
 800dd54:	4632      	mov	r2, r6
 800dd56:	463b      	mov	r3, r7
 800dd58:	e9cd 0100 	strd	r0, r1, [sp]
 800dd5c:	487c      	ldr	r0, [pc, #496]	; (800df50 <Change_Gain+0x2a8>)
 800dd5e:	f004 fdab 	bl	80128b8 <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 800dd62:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800dd66:	f7fa fb27 	bl	80083b8 <__aeabi_f2d>
 800dd6a:	4606      	mov	r6, r0
 800dd6c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800dd70:	460f      	mov	r7, r1
 800dd72:	f7fa fb21 	bl	80083b8 <__aeabi_f2d>
 800dd76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd7a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800dd7e:	f7fa fb1b 	bl	80083b8 <__aeabi_f2d>
 800dd82:	4632      	mov	r2, r6
 800dd84:	463b      	mov	r3, r7
 800dd86:	e9cd 0100 	strd	r0, r1, [sp]
 800dd8a:	4872      	ldr	r0, [pc, #456]	; (800df54 <Change_Gain+0x2ac>)
 800dd8c:	f004 fd94 	bl	80128b8 <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 800dd90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800dd92:	f7fa fb11 	bl	80083b8 <__aeabi_f2d>
 800dd96:	4606      	mov	r6, r0
 800dd98:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800dd9a:	460f      	mov	r7, r1
 800dd9c:	f7fa fb0c 	bl	80083b8 <__aeabi_f2d>
 800dda0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dda4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800dda6:	f7fa fb07 	bl	80083b8 <__aeabi_f2d>
 800ddaa:	463b      	mov	r3, r7
 800ddac:	e9cd 0100 	strd	r0, r1, [sp]
 800ddb0:	4632      	mov	r2, r6
 800ddb2:	4869      	ldr	r0, [pc, #420]	; (800df58 <Change_Gain+0x2b0>)
 800ddb4:	f004 fd80 	bl	80128b8 <iprintf>

		Buffering();
 800ddb8:	f7ff fe4e 	bl	800da58 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 800ddbc:	4867      	ldr	r0, [pc, #412]	; (800df5c <Change_Gain+0x2b4>)
 800ddbe:	f004 fd7b 	bl	80128b8 <iprintf>
 800ddc2:	f10d 0115 	add.w	r1, sp, #21
 800ddc6:	4866      	ldr	r0, [pc, #408]	; (800df60 <Change_Gain+0x2b8>)
 800ddc8:	f005 f80a 	bl	8012de0 <iscanf>
		if(change_mode == '0')
 800ddcc:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800ddd0:	2b30      	cmp	r3, #48	; 0x30
 800ddd2:	d066      	beq.n	800dea2 <Change_Gain+0x1fa>
			break;
		}
		else
		{

			Buffering();
 800ddd4:	f7ff fe40 	bl	800da58 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 800ddd8:	4862      	ldr	r0, [pc, #392]	; (800df64 <Change_Gain+0x2bc>)
 800ddda:	f004 fd6d 	bl	80128b8 <iprintf>
 800ddde:	f10d 0116 	add.w	r1, sp, #22
 800dde2:	485f      	ldr	r0, [pc, #380]	; (800df60 <Change_Gain+0x2b8>)
 800dde4:	f004 fffc 	bl	8012de0 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 800dde8:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800ddec:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800ddf0:	485d      	ldr	r0, [pc, #372]	; (800df68 <Change_Gain+0x2c0>)
 800ddf2:	f004 fd61 	bl	80128b8 <iprintf>

			Buffering();
 800ddf6:	f7ff fe2f 	bl	800da58 <Buffering>
			printf("\r\n値を入力 : ");
 800ddfa:	485c      	ldr	r0, [pc, #368]	; (800df6c <Change_Gain+0x2c4>)
 800ddfc:	f004 fd5c 	bl	80128b8 <iprintf>

			switch(change_mode)
 800de00:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800de04:	3b31      	subs	r3, #49	; 0x31
 800de06:	2b04      	cmp	r3, #4
 800de08:	d85e      	bhi.n	800dec8 <Change_Gain+0x220>
 800de0a:	e8df f003 	tbb	[pc, r3]
 800de0e:	303d      	.short	0x303d
 800de10:	1623      	.short	0x1623
 800de12:	03          	.byte	0x03
 800de13:	00          	.byte	0x00
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
			case '5'://壁制御ゲイン
				if(pid == 'p')
 800de14:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800de18:	2b70      	cmp	r3, #112	; 0x70
 800de1a:	d068      	beq.n	800deee <Change_Gain+0x246>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
				}
				else if(pid == 'i')
 800de1c:	2b69      	cmp	r3, #105	; 0x69
 800de1e:	d07f      	beq.n	800df20 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[D_WALL_PID].KI);
				}
				else if(pid == 'd')
 800de20:	2b64      	cmp	r3, #100	; 0x64
 800de22:	d055      	beq.n	800ded0 <Change_Gain+0x228>
				break;
			default :
				printf("該当しません\r\n");
				break;
			}
			Buffering();
 800de24:	f7ff fe18 	bl	800da58 <Buffering>
			scanf("%c",&nl);
 800de28:	f10d 0117 	add.w	r1, sp, #23
 800de2c:	484c      	ldr	r0, [pc, #304]	; (800df60 <Change_Gain+0x2b8>)
 800de2e:	f004 ffd7 	bl	8012de0 <iscanf>
			printf("\r\n");
 800de32:	484f      	ldr	r0, [pc, #316]	; (800df70 <Change_Gain+0x2c8>)
 800de34:	f004 fdc8 	bl	80129c8 <puts>
		printf("現在のPIDゲイン\r\n");
 800de38:	e751      	b.n	800dcde <Change_Gain+0x36>
				if(pid == 'p')
 800de3a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800de3e:	2b70      	cmp	r3, #112	; 0x70
 800de40:	d05a      	beq.n	800def8 <Change_Gain+0x250>
				else if(pid == 'i')
 800de42:	2b69      	cmp	r3, #105	; 0x69
 800de44:	d071      	beq.n	800df2a <Change_Gain+0x282>
				else if(pid == 'd')
 800de46:	2b64      	cmp	r3, #100	; 0x64
 800de48:	d1ec      	bne.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KD);
 800de4a:	494a      	ldr	r1, [pc, #296]	; (800df74 <Change_Gain+0x2cc>)
 800de4c:	484a      	ldr	r0, [pc, #296]	; (800df78 <Change_Gain+0x2d0>)
 800de4e:	f004 ffc7 	bl	8012de0 <iscanf>
 800de52:	e7e7      	b.n	800de24 <Change_Gain+0x17c>
				if(pid == 'p')
 800de54:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800de58:	2b70      	cmp	r3, #112	; 0x70
 800de5a:	d052      	beq.n	800df02 <Change_Gain+0x25a>
				else if(pid == 'i')
 800de5c:	2b69      	cmp	r3, #105	; 0x69
 800de5e:	d069      	beq.n	800df34 <Change_Gain+0x28c>
				else if(pid == 'd')
 800de60:	2b64      	cmp	r3, #100	; 0x64
 800de62:	d1df      	bne.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 800de64:	4945      	ldr	r1, [pc, #276]	; (800df7c <Change_Gain+0x2d4>)
 800de66:	4844      	ldr	r0, [pc, #272]	; (800df78 <Change_Gain+0x2d0>)
 800de68:	f004 ffba 	bl	8012de0 <iscanf>
 800de6c:	e7da      	b.n	800de24 <Change_Gain+0x17c>
				if(pid == 'p')
 800de6e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800de72:	2b70      	cmp	r3, #112	; 0x70
 800de74:	d036      	beq.n	800dee4 <Change_Gain+0x23c>
				else if(pid == 'i')
 800de76:	2b69      	cmp	r3, #105	; 0x69
 800de78:	d04d      	beq.n	800df16 <Change_Gain+0x26e>
				else if(pid == 'd')
 800de7a:	2b64      	cmp	r3, #100	; 0x64
 800de7c:	d1d2      	bne.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KD);
 800de7e:	4940      	ldr	r1, [pc, #256]	; (800df80 <Change_Gain+0x2d8>)
 800de80:	483d      	ldr	r0, [pc, #244]	; (800df78 <Change_Gain+0x2d0>)
 800de82:	f004 ffad 	bl	8012de0 <iscanf>
 800de86:	e7cd      	b.n	800de24 <Change_Gain+0x17c>
				if(pid == 'p')
 800de88:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800de8c:	2b70      	cmp	r3, #112	; 0x70
 800de8e:	d024      	beq.n	800deda <Change_Gain+0x232>
				else if(pid == 'i')
 800de90:	2b69      	cmp	r3, #105	; 0x69
 800de92:	d03b      	beq.n	800df0c <Change_Gain+0x264>
				else if(pid == 'd')
 800de94:	2b64      	cmp	r3, #100	; 0x64
 800de96:	d1c5      	bne.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KD);
 800de98:	493a      	ldr	r1, [pc, #232]	; (800df84 <Change_Gain+0x2dc>)
 800de9a:	4837      	ldr	r0, [pc, #220]	; (800df78 <Change_Gain+0x2d0>)
 800de9c:	f004 ffa0 	bl	8012de0 <iscanf>
 800dea0:	e7c0      	b.n	800de24 <Change_Gain+0x17c>
		}

	}
	printf("\r\n完了\r\n");
 800dea2:	4839      	ldr	r0, [pc, #228]	; (800df88 <Change_Gain+0x2e0>)
 800dea4:	f004 fd90 	bl	80129c8 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 800dea8:	f7ff fa8a 	bl	800d3c0 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 800deac:	f7ff fde4 	bl	800da78 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 800deb0:	2007      	movs	r0, #7
 800deb2:	f7ff fc69 	bl	800d788 <ChangeLED>
	HAL_Delay(200);
 800deb6:	20c8      	movs	r0, #200	; 0xc8
 800deb8:	f000 fa46 	bl	800e348 <HAL_Delay>
	ChangeLED(0);
 800debc:	2000      	movs	r0, #0
 800debe:	f7ff fc63 	bl	800d788 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 800dec2:	b007      	add	sp, #28
 800dec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				printf("該当しません\r\n");
 800dec8:	4830      	ldr	r0, [pc, #192]	; (800df8c <Change_Gain+0x2e4>)
 800deca:	f004 fd7d 	bl	80129c8 <puts>
				break;
 800dece:	e7a9      	b.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KD);
 800ded0:	492f      	ldr	r1, [pc, #188]	; (800df90 <Change_Gain+0x2e8>)
 800ded2:	4829      	ldr	r0, [pc, #164]	; (800df78 <Change_Gain+0x2d0>)
 800ded4:	f004 ff84 	bl	8012de0 <iscanf>
 800ded8:	e7a4      	b.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KP);
 800deda:	492e      	ldr	r1, [pc, #184]	; (800df94 <Change_Gain+0x2ec>)
 800dedc:	4826      	ldr	r0, [pc, #152]	; (800df78 <Change_Gain+0x2d0>)
 800dede:	f004 ff7f 	bl	8012de0 <iscanf>
 800dee2:	e79f      	b.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KP);
 800dee4:	4917      	ldr	r1, [pc, #92]	; (800df44 <Change_Gain+0x29c>)
 800dee6:	4824      	ldr	r0, [pc, #144]	; (800df78 <Change_Gain+0x2d0>)
 800dee8:	f004 ff7a 	bl	8012de0 <iscanf>
 800deec:	e79a      	b.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KP);
 800deee:	492a      	ldr	r1, [pc, #168]	; (800df98 <Change_Gain+0x2f0>)
 800def0:	4821      	ldr	r0, [pc, #132]	; (800df78 <Change_Gain+0x2d0>)
 800def2:	f004 ff75 	bl	8012de0 <iscanf>
 800def6:	e795      	b.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KP);
 800def8:	4928      	ldr	r1, [pc, #160]	; (800df9c <Change_Gain+0x2f4>)
 800defa:	481f      	ldr	r0, [pc, #124]	; (800df78 <Change_Gain+0x2d0>)
 800defc:	f004 ff70 	bl	8012de0 <iscanf>
 800df00:	e790      	b.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KP);
 800df02:	4927      	ldr	r1, [pc, #156]	; (800dfa0 <Change_Gain+0x2f8>)
 800df04:	481c      	ldr	r0, [pc, #112]	; (800df78 <Change_Gain+0x2d0>)
 800df06:	f004 ff6b 	bl	8012de0 <iscanf>
 800df0a:	e78b      	b.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_VELO_PID].KI);
 800df0c:	4925      	ldr	r1, [pc, #148]	; (800dfa4 <Change_Gain+0x2fc>)
 800df0e:	481a      	ldr	r0, [pc, #104]	; (800df78 <Change_Gain+0x2d0>)
 800df10:	f004 ff66 	bl	8012de0 <iscanf>
 800df14:	e786      	b.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[A_VELO_PID].KI);
 800df16:	4924      	ldr	r1, [pc, #144]	; (800dfa8 <Change_Gain+0x300>)
 800df18:	4817      	ldr	r0, [pc, #92]	; (800df78 <Change_Gain+0x2d0>)
 800df1a:	f004 ff61 	bl	8012de0 <iscanf>
 800df1e:	e781      	b.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[D_WALL_PID].KI);
 800df20:	4922      	ldr	r1, [pc, #136]	; (800dfac <Change_Gain+0x304>)
 800df22:	4815      	ldr	r0, [pc, #84]	; (800df78 <Change_Gain+0x2d0>)
 800df24:	f004 ff5c 	bl	8012de0 <iscanf>
 800df28:	e77c      	b.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[R_WALL_PID].KI);
 800df2a:	4921      	ldr	r1, [pc, #132]	; (800dfb0 <Change_Gain+0x308>)
 800df2c:	4812      	ldr	r0, [pc, #72]	; (800df78 <Change_Gain+0x2d0>)
 800df2e:	f004 ff57 	bl	8012de0 <iscanf>
 800df32:	e777      	b.n	800de24 <Change_Gain+0x17c>
					scanf("%f",&Pid[L_WALL_PID].KI);
 800df34:	491f      	ldr	r1, [pc, #124]	; (800dfb4 <Change_Gain+0x30c>)
 800df36:	4810      	ldr	r0, [pc, #64]	; (800df78 <Change_Gain+0x2d0>)
 800df38:	f004 ff52 	bl	8012de0 <iscanf>
 800df3c:	e772      	b.n	800de24 <Change_Gain+0x17c>
 800df3e:	bf00      	nop
 800df40:	2000a674 	.word	0x2000a674
 800df44:	20009834 	.word	0x20009834
 800df48:	08016608 	.word	0x08016608
 800df4c:	2000a42c 	.word	0x2000a42c
 800df50:	08016644 	.word	0x08016644
 800df54:	08016660 	.word	0x08016660
 800df58:	0801667c 	.word	0x0801667c
 800df5c:	08016698 	.word	0x08016698
 800df60:	080166b0 	.word	0x080166b0
 800df64:	080166b4 	.word	0x080166b4
 800df68:	080166c8 	.word	0x080166c8
 800df6c:	080166ec 	.word	0x080166ec
 800df70:	08016720 	.word	0x08016720
 800df74:	200098c0 	.word	0x200098c0
 800df78:	08016700 	.word	0x08016700
 800df7c:	20009894 	.word	0x20009894
 800df80:	2000983c 	.word	0x2000983c
 800df84:	200098ec 	.word	0x200098ec
 800df88:	08016718 	.word	0x08016718
 800df8c:	08016704 	.word	0x08016704
 800df90:	20009868 	.word	0x20009868
 800df94:	200098e4 	.word	0x200098e4
 800df98:	20009860 	.word	0x20009860
 800df9c:	200098b8 	.word	0x200098b8
 800dfa0:	2000988c 	.word	0x2000988c
 800dfa4:	200098e8 	.word	0x200098e8
 800dfa8:	20009838 	.word	0x20009838
 800dfac:	20009864 	.word	0x20009864
 800dfb0:	200098bc 	.word	0x200098bc
 800dfb4:	20009890 	.word	0x20009890
 800dfb8:	080165f0 	.word	0x080165f0
 800dfbc:	08016628 	.word	0x08016628

0800dfc0 <PIDSetGain>:
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
	Pid[n].KP = kp;
 800dfc0:	4a05      	ldr	r2, [pc, #20]	; (800dfd8 <PIDSetGain+0x18>)
 800dfc2:	232c      	movs	r3, #44	; 0x2c
 800dfc4:	fb03 2000 	mla	r0, r3, r0, r2
 800dfc8:	ed80 0a00 	vstr	s0, [r0]
	Pid[n].KI = ki;
 800dfcc:	edc0 0a01 	vstr	s1, [r0, #4]
	Pid[n].KD = kd;
 800dfd0:	ed80 1a02 	vstr	s2, [r0, #8]

}
 800dfd4:	4770      	bx	lr
 800dfd6:	bf00      	nop
 800dfd8:	20009834 	.word	0x20009834

0800dfdc <PIDChangeFlag>:
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
	Pid[n].flag = on_or_off;
 800dfdc:	4a02      	ldr	r2, [pc, #8]	; (800dfe8 <PIDChangeFlag+0xc>)
 800dfde:	232c      	movs	r3, #44	; 0x2c
 800dfe0:	fb03 2000 	mla	r0, r3, r0, r2
 800dfe4:	6281      	str	r1, [r0, #40]	; 0x28
}
 800dfe6:	4770      	bx	lr
 800dfe8:	20009834 	.word	0x20009834

0800dfec <PIDReset>:
	return Pid[n].flag;
}
void PIDReset(int n)
{
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 800dfec:	4905      	ldr	r1, [pc, #20]	; (800e004 <PIDReset+0x18>)
 800dfee:	232c      	movs	r3, #44	; 0x2c
 800dff0:	fb03 1000 	mla	r0, r3, r0, r1
 800dff4:	2200      	movs	r2, #0
	Pid[n].ei = 0;
	Pid[n].ed = 0;
	Pid[n].elast = 0;
	Pid[n].out = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	6243      	str	r3, [r0, #36]	; 0x24
	Pid[n].e = 0;
 800dffa:	60c2      	str	r2, [r0, #12]
	Pid[n].ei = 0;
 800dffc:	6102      	str	r2, [r0, #16]
	Pid[n].ed = 0;
 800dffe:	6142      	str	r2, [r0, #20]
	Pid[n].elast = 0;
 800e000:	6182      	str	r2, [r0, #24]
}
 800e002:	4770      	bx	lr
 800e004:	20009834 	.word	0x20009834

0800e008 <PIDControl>:
inline int PIDControl(int n, float target, float current)
{
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 800e008:	4b21      	ldr	r3, [pc, #132]	; (800e090 <PIDControl+0x88>)
{
 800e00a:	b510      	push	{r4, lr}
	if(Pid[n].flag == 0)
 800e00c:	242c      	movs	r4, #44	; 0x2c
 800e00e:	fb04 3400 	mla	r4, r4, r0, r3
 800e012:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e014:	b3a8      	cbz	r0, 800e082 <PIDControl+0x7a>
	else
	{
		Pid[n].target = target;
		Pid[n].current = current;

		Pid[n].e = Pid[n].target - Pid[n].current;
 800e016:	ee70 6a60 	vsub.f32	s13, s0, s1
		Pid[n].ei += Pid[n].e * pid_T;
 800e01a:	ed9f 4a1e 	vldr	s8, [pc, #120]	; 800e094 <PIDControl+0x8c>
 800e01e:	ed94 6a04 	vldr	s12, [r4, #16]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
		Pid[n].elast = Pid[n].e;
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e022:	ed94 7a01 	vldr	s14, [r4, #4]
 800e026:	ed94 5a00 	vldr	s10, [r4]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e02a:	edd4 7a06 	vldr	s15, [r4, #24]
 800e02e:	eddf 4a1a 	vldr	s9, [pc, #104]	; 800e098 <PIDControl+0x90>
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e032:	edd4 5a02 	vldr	s11, [r4, #8]
		Pid[n].e = Pid[n].target - Pid[n].current;
 800e036:	edc4 6a03 	vstr	s13, [r4, #12]
		Pid[n].ei += Pid[n].e * pid_T;
 800e03a:	eea6 6a84 	vfma.f32	s12, s13, s8
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e03e:	ee76 7ae7 	vsub.f32	s15, s13, s15
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e042:	ee26 7a07 	vmul.f32	s14, s12, s14
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e046:	ee67 7aa4 	vmul.f32	s15, s15, s9
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e04a:	eea6 7a85 	vfma.f32	s14, s13, s10
		Pid[n].ei += Pid[n].e * pid_T;
 800e04e:	ed84 6a04 	vstr	s12, [r4, #16]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e052:	eea7 7aa5 	vfma.f32	s14, s15, s11
		Pid[n].elast = Pid[n].e;
 800e056:	edc4 6a06 	vstr	s13, [r4, #24]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 800e05a:	edc4 7a05 	vstr	s15, [r4, #20]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e05e:	ee17 0a10 	vmov	r0, s14
		Pid[n].target = target;
 800e062:	ed84 0a08 	vstr	s0, [r4, #32]
		Pid[n].current = current;
 800e066:	edc4 0a07 	vstr	s1, [r4, #28]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 800e06a:	f7fa f9a5 	bl	80083b8 <__aeabi_f2d>
 800e06e:	ec41 0b10 	vmov	d0, r0, r1
 800e072:	f002 fe97 	bl	8010da4 <round>
 800e076:	ec51 0b10 	vmov	r0, r1, d0
 800e07a:	f7fa fca5 	bl	80089c8 <__aeabi_d2iz>
 800e07e:	6260      	str	r0, [r4, #36]	; 0x24
		return Pid[n].out;
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 800e080:	bd10      	pop	{r4, pc}
		Pid[n].e = 0.0f;
 800e082:	2300      	movs	r3, #0
		Pid[n].out = 0;
 800e084:	6260      	str	r0, [r4, #36]	; 0x24
		Pid[n].e = 0.0f;
 800e086:	60e3      	str	r3, [r4, #12]
		Pid[n].ei = 0.0f;
 800e088:	6123      	str	r3, [r4, #16]
		Pid[n].ed = 0.0f;
 800e08a:	6163      	str	r3, [r4, #20]
		Pid[n].elast = 0.0f;
 800e08c:	61a3      	str	r3, [r4, #24]
}
 800e08e:	bd10      	pop	{r4, pc}
 800e090:	20009834 	.word	0x20009834
 800e094:	3a83126f 	.word	0x3a83126f
 800e098:	4479ffff 	.word	0x4479ffff

0800e09c <HAL_GPIO_EXTI_Callback>:
#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == GPIO_PIN_12)
 800e09c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e0a0:	d106      	bne.n	800e0b0 <HAL_GPIO_EXTI_Callback+0x14>
	{
	  gpio_callback_count++;
 800e0a2:	4a04      	ldr	r2, [pc, #16]	; (800e0b4 <HAL_GPIO_EXTI_Callback+0x18>)
 800e0a4:	6813      	ldr	r3, [r2, #0]
 800e0a6:	3301      	adds	r3, #1
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	bfc8      	it	gt
 800e0ac:	2300      	movgt	r3, #0
 800e0ae:	6013      	str	r3, [r2, #0]
	}
}
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	20009a18 	.word	0x20009a18

0800e0b8 <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 800e0b8:	b538      	push	{r3, r4, r5, lr}
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	2405      	movs	r4, #5
	for(int i=0; i < 5; i++)
	{
		ChangeLED(mode);
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f7ff fb62 	bl	800d788 <ChangeLED>
		HAL_Delay(100);
 800e0c4:	2064      	movs	r0, #100	; 0x64
 800e0c6:	f000 f93f 	bl	800e348 <HAL_Delay>
		ChangeLED(0);
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	f7ff fb5c 	bl	800d788 <ChangeLED>
		HAL_Delay(100);
 800e0d0:	2064      	movs	r0, #100	; 0x64
 800e0d2:	f000 f939 	bl	800e348 <HAL_Delay>
	for(int i=0; i < 5; i++)
 800e0d6:	3c01      	subs	r4, #1
 800e0d8:	d1f1      	bne.n	800e0be <Signal+0x6>
	}
}
 800e0da:	bd38      	pop	{r3, r4, r5, pc}

0800e0dc <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 800e0dc:	b510      	push	{r4, lr}

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e0de:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800e128 <BatteryCheck+0x4c>
 800e0e2:	eddf 0a12 	vldr	s1, [pc, #72]	; 800e12c <BatteryCheck+0x50>
{
 800e0e6:	ed2d 8b02 	vpush	{d8}
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e0ea:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800e0ee:	f7ff fc71 	bl	800d9d4 <ADCToBatteryVoltage>

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800e0f2:	2103      	movs	r1, #3
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 800e0f4:	eeb0 8a40 	vmov.f32	s16, s0
	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 800e0f8:	2002      	movs	r0, #2
 800e0fa:	f7ff fc77 	bl	800d9ec <IntegerPower>

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 800e0fe:	eeb0 0a48 	vmov.f32	s0, s16
 800e102:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800e130 <BatteryCheck+0x54>
 800e106:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800e134 <BatteryCheck+0x58>
 800e10a:	f7ff fc7d 	bl	800da08 <GetBatteryLevel>
 800e10e:	4604      	mov	r4, r0

	printf("%d\r\n", battery_level);
 800e110:	4601      	mov	r1, r0
 800e112:	4809      	ldr	r0, [pc, #36]	; (800e138 <BatteryCheck+0x5c>)
 800e114:	f004 fbd0 	bl	80128b8 <iprintf>
	Signal( battery_level );
}
 800e118:	ecbd 8b02 	vpop	{d8}
	Signal( battery_level );
 800e11c:	b260      	sxtb	r0, r4
}
 800e11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Signal( battery_level );
 800e122:	f7ff bfc9 	b.w	800e0b8 <Signal>
 800e126:	bf00      	nop
 800e128:	45800000 	.word	0x45800000
 800e12c:	40533333 	.word	0x40533333
 800e130:	41066666 	.word	0x41066666
 800e134:	40e66666 	.word	0x40e66666
 800e138:	080165bc 	.word	0x080165bc

0800e13c <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 800e13c:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 800e13e:	4c10      	ldr	r4, [pc, #64]	; (800e180 <PhotoSwitch+0x44>)
 800e140:	4810      	ldr	r0, [pc, #64]	; (800e184 <PhotoSwitch+0x48>)
 800e142:	4621      	mov	r1, r4
 800e144:	2202      	movs	r2, #2
 800e146:	f000 f9c3 	bl	800e4d0 <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 800e14a:	2100      	movs	r1, #0
 800e14c:	480e      	ldr	r0, [pc, #56]	; (800e188 <PhotoSwitch+0x4c>)
 800e14e:	f002 fb9d 	bl	801088c <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 800e152:	6861      	ldr	r1, [r4, #4]
 800e154:	29c7      	cmp	r1, #199	; 0xc7
 800e156:	d806      	bhi.n	800e166 <PhotoSwitch+0x2a>
	{
		printf("adc2[1] : %lu\r\n", adc2[1]);
 800e158:	4d0c      	ldr	r5, [pc, #48]	; (800e18c <PhotoSwitch+0x50>)
 800e15a:	4628      	mov	r0, r5
 800e15c:	f004 fbac 	bl	80128b8 <iprintf>
	while(adc2[1] < 200)
 800e160:	6861      	ldr	r1, [r4, #4]
 800e162:	29c7      	cmp	r1, #199	; 0xc7
 800e164:	d9f9      	bls.n	800e15a <PhotoSwitch+0x1e>

	}
	HAL_ADC_Stop_DMA(&hadc2);
 800e166:	4807      	ldr	r0, [pc, #28]	; (800e184 <PhotoSwitch+0x48>)
 800e168:	f000 fa54 	bl	800e614 <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 800e16c:	2100      	movs	r1, #0
 800e16e:	4806      	ldr	r0, [pc, #24]	; (800e188 <PhotoSwitch+0x4c>)
 800e170:	f002 fbc0 	bl	80108f4 <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 800e174:	2007      	movs	r0, #7
}
 800e176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Signal( 7 );
 800e17a:	f7ff bf9d 	b.w	800e0b8 <Signal>
 800e17e:	bf00      	nop
 800e180:	200097dc 	.word	0x200097dc
 800e184:	2000a4ac 	.word	0x2000a4ac
 800e188:	2000a42c 	.word	0x2000a42c
 800e18c:	08016758 	.word	0x08016758

0800e190 <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 800e190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e194:	4606      	mov	r6, r0
 800e196:	ed2d 8b04 	vpush	{d8-d9}
 800e19a:	460f      	mov	r7, r1
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e19c:	4828      	ldr	r0, [pc, #160]	; (800e240 <ModeSelect+0xb0>)
	*pMode=min;

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
	gpio_callback_count = 0;
 800e19e:	4c29      	ldr	r4, [pc, #164]	; (800e244 <ModeSelect+0xb4>)
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800e1a0:	ed9f 9a29 	vldr	s18, [pc, #164]	; 800e248 <ModeSelect+0xb8>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800e1a4:	eddf 8a29 	vldr	s17, [pc, #164]	; 800e24c <ModeSelect+0xbc>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e1a8:	2100      	movs	r1, #0
{
 800e1aa:	4690      	mov	r8, r2
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 800e1ac:	f001 ffd2 	bl	8010154 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800e1b0:	2104      	movs	r1, #4
 800e1b2:	4823      	ldr	r0, [pc, #140]	; (800e240 <ModeSelect+0xb0>)
 800e1b4:	f001 ffce 	bl	8010154 <HAL_TIM_Encoder_Start>
	TIM3->CNT = INITIAL_PULSE;
 800e1b8:	4a25      	ldr	r2, [pc, #148]	; (800e250 <ModeSelect+0xc0>)
	*pMode=min;
 800e1ba:	f888 6000 	strb.w	r6, [r8]
	TIM3->CNT = INITIAL_PULSE;
 800e1be:	f247 552f 	movw	r5, #29999	; 0x752f
	gpio_callback_count = 0;
 800e1c2:	2300      	movs	r3, #0
	TIM3->CNT = INITIAL_PULSE;
 800e1c4:	6255      	str	r5, [r2, #36]	; 0x24
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800e1c6:	4691      	mov	r9, r2
	gpio_callback_count = 0;
 800e1c8:	6023      	str	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800e1ca:	b9eb      	cbnz	r3, 800e208 <ModeSelect+0x78>
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 800e1cc:	ed99 8a09 	vldr	s16, [r9, #36]	; 0x24
		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 800e1d0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800e1d4:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800e1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1dc:	db0c      	blt.n	800e1f8 <ModeSelect+0x68>
		  	  *pMode += 1;
 800e1de:	f898 0000 	ldrb.w	r0, [r8]
 800e1e2:	3001      	adds	r0, #1
 800e1e4:	b240      	sxtb	r0, r0
		  		  *pMode = min;
 800e1e6:	42b8      	cmp	r0, r7
 800e1e8:	bfc8      	it	gt
 800e1ea:	4630      	movgt	r0, r6
 800e1ec:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800e1f0:	f7ff faca 	bl	800d788 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800e1f4:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 800e1f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e200:	d910      	bls.n	800e224 <ModeSelect+0x94>
 800e202:	6823      	ldr	r3, [r4, #0]
	while(gpio_callback_count == 0/**/) //前向きの
 800e204:	2b00      	cmp	r3, #0
 800e206:	d0e1      	beq.n	800e1cc <ModeSelect+0x3c>
		  	  }
		  	  ChangeLED(*pMode);
		  	  TIM3->CNT = INITIAL_PULSE;
		  }
	}
	gpio_callback_count = 0;
 800e208:	2300      	movs	r3, #0
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800e20a:	4619      	mov	r1, r3
 800e20c:	480c      	ldr	r0, [pc, #48]	; (800e240 <ModeSelect+0xb0>)
	gpio_callback_count = 0;
 800e20e:	6023      	str	r3, [r4, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 800e210:	f001 ffc4 	bl	801019c <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
}
 800e214:	ecbd 8b04 	vpop	{d8-d9}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800e218:	2104      	movs	r1, #4
 800e21a:	4809      	ldr	r0, [pc, #36]	; (800e240 <ModeSelect+0xb0>)
}
 800e21c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 800e220:	f001 bfbc 	b.w	801019c <HAL_TIM_Encoder_Stop>
		  	  *pMode -= 1;
 800e224:	f898 0000 	ldrb.w	r0, [r8]
 800e228:	3801      	subs	r0, #1
 800e22a:	b240      	sxtb	r0, r0
 800e22c:	42b0      	cmp	r0, r6
 800e22e:	bfb8      	it	lt
 800e230:	4638      	movlt	r0, r7
 800e232:	f888 0000 	strb.w	r0, [r8]
		  	  ChangeLED(*pMode);
 800e236:	f7ff faa7 	bl	800d788 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 800e23a:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
 800e23e:	e7e0      	b.n	800e202 <ModeSelect+0x72>
 800e240:	2000a4f4 	.word	0x2000a4f4
 800e244:	20009a18 	.word	0x20009a18
 800e248:	47352f00 	.word	0x47352f00
 800e24c:	4654bc00 	.word	0x4654bc00
 800e250:	40000400 	.word	0x40000400

0800e254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e28c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e258:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e25a:	e003      	b.n	800e264 <LoopCopyDataInit>

0800e25c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e25c:	4b0c      	ldr	r3, [pc, #48]	; (800e290 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e25e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e260:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e262:	3104      	adds	r1, #4

0800e264 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e264:	480b      	ldr	r0, [pc, #44]	; (800e294 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e266:	4b0c      	ldr	r3, [pc, #48]	; (800e298 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e268:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e26a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e26c:	d3f6      	bcc.n	800e25c <CopyDataInit>
  ldr  r2, =_sbss
 800e26e:	4a0b      	ldr	r2, [pc, #44]	; (800e29c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e270:	e002      	b.n	800e278 <LoopFillZerobss>

0800e272 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e272:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e274:	f842 3b04 	str.w	r3, [r2], #4

0800e278 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e278:	4b09      	ldr	r3, [pc, #36]	; (800e2a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e27a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e27c:	d3f9      	bcc.n	800e272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e27e:	f7fe fcbb 	bl	800cbf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e282:	f002 ff87 	bl	8011194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e286:	f7fe f841 	bl	800c30c <main>
  bx  lr    
 800e28a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e28c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e290:	08016ab0 	.word	0x08016ab0
  ldr  r0, =_sdata
 800e294:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e298:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 800e29c:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 800e2a0:	2000a750 	.word	0x2000a750

0800e2a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e2a4:	e7fe      	b.n	800e2a4 <ADC_IRQHandler>
	...

0800e2a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e2a8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e2aa:	4a0e      	ldr	r2, [pc, #56]	; (800e2e4 <HAL_InitTick+0x3c>)
 800e2ac:	4b0e      	ldr	r3, [pc, #56]	; (800e2e8 <HAL_InitTick+0x40>)
 800e2ae:	7812      	ldrb	r2, [r2, #0]
 800e2b0:	681b      	ldr	r3, [r3, #0]
{
 800e2b2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e2b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e2b8:	fbb0 f0f2 	udiv	r0, r0, r2
 800e2bc:	fbb3 f0f0 	udiv	r0, r3, r0
 800e2c0:	f000 fb24 	bl	800e90c <HAL_SYSTICK_Config>
 800e2c4:	b908      	cbnz	r0, 800e2ca <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e2c6:	2d0f      	cmp	r5, #15
 800e2c8:	d901      	bls.n	800e2ce <HAL_InitTick+0x26>
    return HAL_ERROR;
 800e2ca:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800e2cc:	bd38      	pop	{r3, r4, r5, pc}
 800e2ce:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	4629      	mov	r1, r5
 800e2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d8:	f000 fad4 	bl	800e884 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e2dc:	4b03      	ldr	r3, [pc, #12]	; (800e2ec <HAL_InitTick+0x44>)
 800e2de:	4620      	mov	r0, r4
 800e2e0:	601d      	str	r5, [r3, #0]
}
 800e2e2:	bd38      	pop	{r3, r4, r5, pc}
 800e2e4:	20000030 	.word	0x20000030
 800e2e8:	20000024 	.word	0x20000024
 800e2ec:	20000034 	.word	0x20000034

0800e2f0 <HAL_Init>:
{
 800e2f0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e2f2:	4b0b      	ldr	r3, [pc, #44]	; (800e320 <HAL_Init+0x30>)
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e302:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e30a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e30c:	2003      	movs	r0, #3
 800e30e:	f000 faa7 	bl	800e860 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800e312:	2000      	movs	r0, #0
 800e314:	f7ff ffc8 	bl	800e2a8 <HAL_InitTick>
  HAL_MspInit();
 800e318:	f7fe f9da 	bl	800c6d0 <HAL_MspInit>
}
 800e31c:	2000      	movs	r0, #0
 800e31e:	bd08      	pop	{r3, pc}
 800e320:	40023c00 	.word	0x40023c00

0800e324 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800e324:	4a03      	ldr	r2, [pc, #12]	; (800e334 <HAL_IncTick+0x10>)
 800e326:	4b04      	ldr	r3, [pc, #16]	; (800e338 <HAL_IncTick+0x14>)
 800e328:	6811      	ldr	r1, [r2, #0]
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	440b      	add	r3, r1
 800e32e:	6013      	str	r3, [r2, #0]
}
 800e330:	4770      	bx	lr
 800e332:	bf00      	nop
 800e334:	2000a728 	.word	0x2000a728
 800e338:	20000030 	.word	0x20000030

0800e33c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800e33c:	4b01      	ldr	r3, [pc, #4]	; (800e344 <HAL_GetTick+0x8>)
 800e33e:	6818      	ldr	r0, [r3, #0]
}
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop
 800e344:	2000a728 	.word	0x2000a728

0800e348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e34c:	f7ff fff6 	bl	800e33c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e350:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800e352:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800e354:	d002      	beq.n	800e35c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800e356:	4b04      	ldr	r3, [pc, #16]	; (800e368 <HAL_Delay+0x20>)
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e35c:	f7ff ffee 	bl	800e33c <HAL_GetTick>
 800e360:	1b40      	subs	r0, r0, r5
 800e362:	42a0      	cmp	r0, r4
 800e364:	d3fa      	bcc.n	800e35c <HAL_Delay+0x14>
  {
  }
}
 800e366:	bd38      	pop	{r3, r4, r5, pc}
 800e368:	20000030 	.word	0x20000030

0800e36c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e36c:	2800      	cmp	r0, #0
 800e36e:	f000 8091 	beq.w	800e494 <HAL_ADC_Init+0x128>
{
 800e372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800e374:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800e376:	4604      	mov	r4, r0
 800e378:	2d00      	cmp	r5, #0
 800e37a:	f000 8081 	beq.w	800e480 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e37e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e380:	06db      	lsls	r3, r3, #27
 800e382:	d504      	bpl.n	800e38e <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800e384:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800e386:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800e388:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800e38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800e38e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800e390:	494d      	ldr	r1, [pc, #308]	; (800e4c8 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800e392:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e394:	4d4d      	ldr	r5, [pc, #308]	; (800e4cc <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 800e396:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800e39a:	f022 0202 	bic.w	r2, r2, #2
 800e39e:	f042 0202 	orr.w	r2, r2, #2
 800e3a2:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800e3a4:	684a      	ldr	r2, [r1, #4]
 800e3a6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800e3aa:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800e3ac:	684a      	ldr	r2, [r1, #4]
 800e3ae:	6860      	ldr	r0, [r4, #4]
 800e3b0:	4302      	orrs	r2, r0
 800e3b2:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800e3b4:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800e3b6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800e3b8:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800e3ba:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800e3bc:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800e3c0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800e3c2:	685a      	ldr	r2, [r3, #4]
 800e3c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e3c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800e3ca:	6858      	ldr	r0, [r3, #4]
 800e3cc:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800e3d0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800e3d2:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e3d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800e3d6:	4339      	orrs	r1, r7
 800e3d8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800e3da:	6899      	ldr	r1, [r3, #8]
 800e3dc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800e3e0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800e3e2:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e3e4:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800e3e6:	ea42 0206 	orr.w	r2, r2, r6
 800e3ea:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e3ec:	d054      	beq.n	800e498 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e3ee:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800e3f0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e3f2:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800e3f6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800e3f8:	689a      	ldr	r2, [r3, #8]
 800e3fa:	4310      	orrs	r0, r2
 800e3fc:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e3fe:	6899      	ldr	r1, [r3, #8]
 800e400:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800e404:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800e406:	689a      	ldr	r2, [r3, #8]
 800e408:	432a      	orrs	r2, r5
 800e40a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800e40c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800e40e:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800e410:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800e414:	f021 0102 	bic.w	r1, r1, #2
 800e418:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800e41a:	689a      	ldr	r2, [r3, #8]
 800e41c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800e420:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e422:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800e424:	2800      	cmp	r0, #0
 800e426:	d140      	bne.n	800e4aa <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800e428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e42c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800e42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800e430:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800e432:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800e436:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800e438:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800e43c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800e43e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e440:	3d01      	subs	r5, #1
 800e442:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 800e446:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800e448:	6898      	ldr	r0, [r3, #8]
 800e44a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800e44e:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800e450:	6899      	ldr	r1, [r3, #8]
 800e452:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 800e456:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800e458:	6899      	ldr	r1, [r3, #8]
 800e45a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800e45e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800e460:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800e462:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800e464:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800e468:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800e46a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800e46c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e46e:	f023 0303 	bic.w	r3, r3, #3
 800e472:	f043 0301 	orr.w	r3, r3, #1
 800e476:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800e478:	2300      	movs	r3, #0
 800e47a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800e480:	f7fe f942 	bl	800c708 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800e484:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e486:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800e488:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e48c:	06db      	lsls	r3, r3, #27
 800e48e:	f53f af79 	bmi.w	800e384 <HAL_ADC_Init+0x18>
 800e492:	e77c      	b.n	800e38e <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 800e494:	2001      	movs	r0, #1
}
 800e496:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e498:	689a      	ldr	r2, [r3, #8]
 800e49a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e49e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e4a0:	689a      	ldr	r2, [r3, #8]
 800e4a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e4a6:	609a      	str	r2, [r3, #8]
 800e4a8:	e7b0      	b.n	800e40c <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e4aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800e4ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e4b0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800e4b2:	685a      	ldr	r2, [r3, #4]
 800e4b4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800e4b8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800e4ba:	685a      	ldr	r2, [r3, #4]
 800e4bc:	3901      	subs	r1, #1
 800e4be:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800e4c2:	605a      	str	r2, [r3, #4]
 800e4c4:	e7b3      	b.n	800e42e <HAL_ADC_Init+0xc2>
 800e4c6:	bf00      	nop
 800e4c8:	40012300 	.word	0x40012300
 800e4cc:	0f000001 	.word	0x0f000001

0800e4d0 <HAL_ADC_Start_DMA>:
{
 800e4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800e4d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800e4d6:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 800e4d8:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 800e4da:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800e4dc:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 800e4de:	f000 8081 	beq.w	800e5e4 <HAL_ADC_Start_DMA+0x114>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e4e2:	6805      	ldr	r5, [r0, #0]
 800e4e4:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 800e4e6:	2401      	movs	r4, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e4e8:	07df      	lsls	r7, r3, #31
  __HAL_LOCK(hadc);
 800e4ea:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e4ee:	d414      	bmi.n	800e51a <HAL_ADC_Start_DMA+0x4a>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e4f0:	4b40      	ldr	r3, [pc, #256]	; (800e5f4 <HAL_ADC_Start_DMA+0x124>)
 800e4f2:	4e41      	ldr	r6, [pc, #260]	; (800e5f8 <HAL_ADC_Start_DMA+0x128>)
 800e4f4:	681c      	ldr	r4, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800e4f6:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e4f8:	fba6 6404 	umull	r6, r4, r6, r4
 800e4fc:	0ca4      	lsrs	r4, r4, #18
    __HAL_ADC_ENABLE(hadc);
 800e4fe:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e502:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    __HAL_ADC_ENABLE(hadc);
 800e506:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e508:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800e50a:	9b01      	ldr	r3, [sp, #4]
 800e50c:	b12b      	cbz	r3, 800e51a <HAL_ADC_Start_DMA+0x4a>
      counter--;
 800e50e:	9c01      	ldr	r4, [sp, #4]
 800e510:	3c01      	subs	r4, #1
 800e512:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800e514:	9c01      	ldr	r4, [sp, #4]
 800e516:	2c00      	cmp	r4, #0
 800e518:	d1f9      	bne.n	800e50e <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800e51a:	68ab      	ldr	r3, [r5, #8]
 800e51c:	07de      	lsls	r6, r3, #31
 800e51e:	d543      	bpl.n	800e5a8 <HAL_ADC_Start_DMA+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 800e520:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800e522:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 800e526:	f024 0401 	bic.w	r4, r4, #1
 800e52a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800e52e:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800e530:	686b      	ldr	r3, [r5, #4]
 800e532:	055c      	lsls	r4, r3, #21
 800e534:	d505      	bpl.n	800e542 <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800e536:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e538:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e53c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e540:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e542:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e544:	4e2d      	ldr	r6, [pc, #180]	; (800e5fc <HAL_ADC_Start_DMA+0x12c>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e546:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800e54a:	bf1c      	itt	ne
 800e54c:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800e54e:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800e552:	6443      	str	r3, [r0, #68]	; 0x44
 800e554:	4604      	mov	r4, r0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e556:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e558:	4613      	mov	r3, r2
    __HAL_UNLOCK(hadc);   
 800e55a:	2700      	movs	r7, #0
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e55c:	4a28      	ldr	r2, [pc, #160]	; (800e600 <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 800e55e:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e562:	63c6      	str	r6, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e564:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800e566:	4e27      	ldr	r6, [pc, #156]	; (800e604 <HAL_ADC_Start_DMA+0x134>)
 800e568:	64c6      	str	r6, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800e56a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800e56e:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800e570:	686e      	ldr	r6, [r5, #4]
 800e572:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
 800e576:	606e      	str	r6, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800e578:	68ae      	ldr	r6, [r5, #8]
 800e57a:	f446 7680 	orr.w	r6, r6, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e57e:	460a      	mov	r2, r1
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800e580:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e582:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800e586:	f000 fa75 	bl	800ea74 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800e58a:	4b1f      	ldr	r3, [pc, #124]	; (800e608 <HAL_ADC_Start_DMA+0x138>)
 800e58c:	685a      	ldr	r2, [r3, #4]
 800e58e:	06d2      	lsls	r2, r2, #27
 800e590:	d10d      	bne.n	800e5ae <HAL_ADC_Start_DMA+0xde>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800e592:	6822      	ldr	r2, [r4, #0]
 800e594:	491d      	ldr	r1, [pc, #116]	; (800e60c <HAL_ADC_Start_DMA+0x13c>)
 800e596:	428a      	cmp	r2, r1
 800e598:	d01b      	beq.n	800e5d2 <HAL_ADC_Start_DMA+0x102>
 800e59a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800e59e:	428a      	cmp	r2, r1
 800e5a0:	d023      	beq.n	800e5ea <HAL_ADC_Start_DMA+0x11a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800e5a2:	491b      	ldr	r1, [pc, #108]	; (800e610 <HAL_ADC_Start_DMA+0x140>)
 800e5a4:	428a      	cmp	r2, r1
 800e5a6:	d00f      	beq.n	800e5c8 <HAL_ADC_Start_DMA+0xf8>
  return HAL_OK;
 800e5a8:	2000      	movs	r0, #0
}
 800e5aa:	b003      	add	sp, #12
 800e5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800e5ae:	6823      	ldr	r3, [r4, #0]
 800e5b0:	4a16      	ldr	r2, [pc, #88]	; (800e60c <HAL_ADC_Start_DMA+0x13c>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d1f8      	bne.n	800e5a8 <HAL_ADC_Start_DMA+0xd8>
 800e5b6:	6898      	ldr	r0, [r3, #8]
 800e5b8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800e5bc:	d1f4      	bne.n	800e5a8 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e5be:	689a      	ldr	r2, [r3, #8]
 800e5c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e5c4:	609a      	str	r2, [r3, #8]
 800e5c6:	e7f0      	b.n	800e5aa <HAL_ADC_Start_DMA+0xda>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	f003 031f 	and.w	r3, r3, #31
 800e5ce:	2b0f      	cmp	r3, #15
 800e5d0:	d8ea      	bhi.n	800e5a8 <HAL_ADC_Start_DMA+0xd8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800e5d2:	6890      	ldr	r0, [r2, #8]
 800e5d4:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800e5d8:	d1e6      	bne.n	800e5a8 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e5da:	6893      	ldr	r3, [r2, #8]
 800e5dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5e0:	6093      	str	r3, [r2, #8]
 800e5e2:	e7e2      	b.n	800e5aa <HAL_ADC_Start_DMA+0xda>
  __HAL_LOCK(hadc);
 800e5e4:	2002      	movs	r0, #2
}
 800e5e6:	b003      	add	sp, #12
 800e5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	06db      	lsls	r3, r3, #27
 800e5ee:	d0f0      	beq.n	800e5d2 <HAL_ADC_Start_DMA+0x102>
 800e5f0:	e7da      	b.n	800e5a8 <HAL_ADC_Start_DMA+0xd8>
 800e5f2:	bf00      	nop
 800e5f4:	20000024 	.word	0x20000024
 800e5f8:	431bde83 	.word	0x431bde83
 800e5fc:	0800e6a5 	.word	0x0800e6a5
 800e600:	0800e67d 	.word	0x0800e67d
 800e604:	0800e68d 	.word	0x0800e68d
 800e608:	40012300 	.word	0x40012300
 800e60c:	40012000 	.word	0x40012000
 800e610:	40012200 	.word	0x40012200

0800e614 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800e614:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d029      	beq.n	800e670 <HAL_ADC_Stop_DMA+0x5c>
  __HAL_ADC_DISABLE(hadc);
 800e61c:	6803      	ldr	r3, [r0, #0]
 800e61e:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800e620:	2101      	movs	r1, #1
  __HAL_ADC_DISABLE(hadc);
 800e622:	f022 0201 	bic.w	r2, r2, #1
{
 800e626:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800e628:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800e62c:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800e62e:	689a      	ldr	r2, [r3, #8]
 800e630:	07d2      	lsls	r2, r2, #31
 800e632:	4604      	mov	r4, r0
 800e634:	d504      	bpl.n	800e640 <HAL_ADC_Stop_DMA+0x2c>
  __HAL_UNLOCK(hadc);
 800e636:	2300      	movs	r3, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e638:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800e63a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e63e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800e640:	689a      	ldr	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800e642:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800e644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e648:	609a      	str	r2, [r3, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800e64a:	f000 fa51 	bl	800eaf0 <HAL_DMA_Abort>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800e64e:	6822      	ldr	r2, [r4, #0]
 800e650:	6853      	ldr	r3, [r2, #4]
 800e652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e656:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800e658:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e65a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800e65e:	f023 0301 	bic.w	r3, r3, #1
 800e662:	f043 0301 	orr.w	r3, r3, #1
 800e666:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800e668:	2300      	movs	r3, #0
 800e66a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e66e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800e670:	2002      	movs	r0, #2
}
 800e672:	4770      	bx	lr

0800e674 <HAL_ADC_ConvCpltCallback>:
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop

0800e678 <HAL_ADC_ConvHalfCpltCallback>:
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop

0800e67c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800e67c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800e67e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e680:	f7ff fffa 	bl	800e678 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e684:	bd08      	pop	{r3, pc}
 800e686:	bf00      	nop

0800e688 <HAL_ADC_ErrorCallback>:
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop

0800e68c <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e68c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800e68e:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800e690:	2340      	movs	r3, #64	; 0x40
 800e692:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800e694:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e696:	f043 0304 	orr.w	r3, r3, #4
 800e69a:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800e69c:	f7ff fff4 	bl	800e688 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e6a0:	bd08      	pop	{r3, pc}
 800e6a2:	bf00      	nop

0800e6a4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e6a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800e6a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6a8:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800e6ac:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e6ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800e6b0:	d123      	bne.n	800e6fa <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e6b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e6b6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e6b8:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e6ba:	688a      	ldr	r2, [r1, #8]
 800e6bc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800e6c0:	d117      	bne.n	800e6f2 <ADC_DMAConvCplt+0x4e>
 800e6c2:	7e1a      	ldrb	r2, [r3, #24]
 800e6c4:	b9aa      	cbnz	r2, 800e6f2 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e6c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e6c8:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800e6cc:	d002      	beq.n	800e6d4 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800e6ce:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e6d0:	0550      	lsls	r0, r2, #21
 800e6d2:	d40e      	bmi.n	800e6f2 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800e6d4:	684a      	ldr	r2, [r1, #4]
 800e6d6:	f022 0220 	bic.w	r2, r2, #32
 800e6da:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800e6dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e6e2:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e6e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6e6:	04d1      	lsls	r1, r2, #19
 800e6e8:	d403      	bmi.n	800e6f2 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e6ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6ec:	f042 0201 	orr.w	r2, r2, #1
 800e6f0:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7ff ffbe 	bl	800e674 <HAL_ADC_ConvCpltCallback>
}
 800e6f8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800e6fa:	06d2      	lsls	r2, r2, #27
 800e6fc:	d404      	bmi.n	800e708 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800e6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800e700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800e704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e706:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 800e708:	4618      	mov	r0, r3
 800e70a:	f7ff ffbd 	bl	800e688 <HAL_ADC_ErrorCallback>
}
 800e70e:	bd10      	pop	{r4, pc}

0800e710 <HAL_ADC_ConfigChannel>:
{
 800e710:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800e712:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800e716:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800e718:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800e71a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 800e71c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800e71e:	f000 8095 	beq.w	800e84c <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800e722:	680d      	ldr	r5, [r1, #0]
 800e724:	688a      	ldr	r2, [r1, #8]
 800e726:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 800e728:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800e72a:	2d09      	cmp	r5, #9
 800e72c:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 800e72e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800e732:	d829      	bhi.n	800e788 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800e734:	691c      	ldr	r4, [r3, #16]
 800e736:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800e73a:	f04f 0c07 	mov.w	ip, #7
 800e73e:	fa0c fc06 	lsl.w	ip, ip, r6
 800e742:	ea24 040c 	bic.w	r4, r4, ip
 800e746:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800e748:	691c      	ldr	r4, [r3, #16]
 800e74a:	fa02 f606 	lsl.w	r6, r2, r6
 800e74e:	4326      	orrs	r6, r4
 800e750:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 800e752:	684e      	ldr	r6, [r1, #4]
 800e754:	2e06      	cmp	r6, #6
 800e756:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800e75a:	d82a      	bhi.n	800e7b2 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800e75c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e75e:	3a05      	subs	r2, #5
 800e760:	241f      	movs	r4, #31
 800e762:	4094      	lsls	r4, r2
 800e764:	ea21 0104 	bic.w	r1, r1, r4
 800e768:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800e76a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e76c:	fa07 f202 	lsl.w	r2, r7, r2
 800e770:	430a      	orrs	r2, r1
 800e772:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800e774:	4a37      	ldr	r2, [pc, #220]	; (800e854 <HAL_ADC_ConfigChannel+0x144>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d02d      	beq.n	800e7d6 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 800e77a:	2300      	movs	r3, #0
 800e77c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800e780:	4618      	mov	r0, r3
}
 800e782:	b002      	add	sp, #8
 800e784:	bcf0      	pop	{r4, r5, r6, r7}
 800e786:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800e788:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800e78c:	68dc      	ldr	r4, [r3, #12]
 800e78e:	3e1e      	subs	r6, #30
 800e790:	f04f 0c07 	mov.w	ip, #7
 800e794:	fa0c fc06 	lsl.w	ip, ip, r6
 800e798:	ea24 040c 	bic.w	r4, r4, ip
 800e79c:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800e79e:	68dc      	ldr	r4, [r3, #12]
 800e7a0:	fa02 f606 	lsl.w	r6, r2, r6
 800e7a4:	4326      	orrs	r6, r4
 800e7a6:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 800e7a8:	684e      	ldr	r6, [r1, #4]
 800e7aa:	2e06      	cmp	r6, #6
 800e7ac:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800e7b0:	d9d4      	bls.n	800e75c <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800e7b2:	2e0c      	cmp	r6, #12
 800e7b4:	d835      	bhi.n	800e822 <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800e7b6:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 800e7ba:	211f      	movs	r1, #31
 800e7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7be:	40a1      	lsls	r1, r4
 800e7c0:	ea22 0201 	bic.w	r2, r2, r1
 800e7c4:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800e7c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e7c8:	fa07 f204 	lsl.w	r2, r7, r4
 800e7cc:	430a      	orrs	r2, r1
 800e7ce:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800e7d0:	4a20      	ldr	r2, [pc, #128]	; (800e854 <HAL_ADC_ConfigChannel+0x144>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d1d1      	bne.n	800e77a <HAL_ADC_ConfigChannel+0x6a>
 800e7d6:	2d12      	cmp	r5, #18
 800e7d8:	d031      	beq.n	800e83e <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800e7da:	f1a5 0310 	sub.w	r3, r5, #16
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	d8cb      	bhi.n	800e77a <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800e7e2:	4a1d      	ldr	r2, [pc, #116]	; (800e858 <HAL_ADC_ConfigChannel+0x148>)
 800e7e4:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800e7e6:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800e7e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e7ec:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800e7ee:	d1c4      	bne.n	800e77a <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800e7f0:	4b1a      	ldr	r3, [pc, #104]	; (800e85c <HAL_ADC_ConfigChannel+0x14c>)
 800e7f2:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800e7f6:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f202 3283 	addw	r2, r2, #899	; 0x383
 800e800:	fba2 2303 	umull	r2, r3, r2, r3
 800e804:	0c9b      	lsrs	r3, r3, #18
 800e806:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e80a:	005b      	lsls	r3, r3, #1
 800e80c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800e80e:	9b01      	ldr	r3, [sp, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d0b2      	beq.n	800e77a <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800e814:	9b01      	ldr	r3, [sp, #4]
 800e816:	3b01      	subs	r3, #1
 800e818:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800e81a:	9b01      	ldr	r3, [sp, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d1f9      	bne.n	800e814 <HAL_ADC_ConfigChannel+0x104>
 800e820:	e7ab      	b.n	800e77a <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800e822:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800e826:	241f      	movs	r4, #31
 800e828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e82a:	408c      	lsls	r4, r1
 800e82c:	ea22 0204 	bic.w	r2, r2, r4
 800e830:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800e832:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e834:	fa07 f201 	lsl.w	r2, r7, r1
 800e838:	4322      	orrs	r2, r4
 800e83a:	62da      	str	r2, [r3, #44]	; 0x2c
 800e83c:	e79a      	b.n	800e774 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800e83e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800e842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e846:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 800e84a:	e796      	b.n	800e77a <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800e84c:	2002      	movs	r0, #2
}
 800e84e:	b002      	add	sp, #8
 800e850:	bcf0      	pop	{r4, r5, r6, r7}
 800e852:	4770      	bx	lr
 800e854:	40012000 	.word	0x40012000
 800e858:	40012300 	.word	0x40012300
 800e85c:	20000024 	.word	0x20000024

0800e860 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e860:	4a07      	ldr	r2, [pc, #28]	; (800e880 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800e862:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e864:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800e868:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e86a:	0200      	lsls	r0, r0, #8
 800e86c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e870:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800e874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800e878:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800e87a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800e87c:	4770      	bx	lr
 800e87e:	bf00      	nop
 800e880:	e000ed00 	.word	0xe000ed00

0800e884 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e884:	4b18      	ldr	r3, [pc, #96]	; (800e8e8 <HAL_NVIC_SetPriority+0x64>)
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e88c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e88e:	f1c3 0507 	rsb	r5, r3, #7
 800e892:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e894:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e898:	bf28      	it	cs
 800e89a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e89c:	2c06      	cmp	r4, #6
 800e89e:	d919      	bls.n	800e8d4 <HAL_NVIC_SetPriority+0x50>
 800e8a0:	3b03      	subs	r3, #3
 800e8a2:	f04f 34ff 	mov.w	r4, #4294967295
 800e8a6:	409c      	lsls	r4, r3
 800e8a8:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b0:	40aa      	lsls	r2, r5
 800e8b2:	ea21 0102 	bic.w	r1, r1, r2
 800e8b6:	fa01 f203 	lsl.w	r2, r1, r3
 800e8ba:	4322      	orrs	r2, r4
 800e8bc:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	b2d2      	uxtb	r2, r2
 800e8c2:	db0a      	blt.n	800e8da <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e8c4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800e8c8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800e8cc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800e8d0:	bc30      	pop	{r4, r5}
 800e8d2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e8d4:	2400      	movs	r4, #0
 800e8d6:	4623      	mov	r3, r4
 800e8d8:	e7e8      	b.n	800e8ac <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e8da:	4b04      	ldr	r3, [pc, #16]	; (800e8ec <HAL_NVIC_SetPriority+0x68>)
 800e8dc:	f000 000f 	and.w	r0, r0, #15
 800e8e0:	4403      	add	r3, r0
 800e8e2:	761a      	strb	r2, [r3, #24]
 800e8e4:	bc30      	pop	{r4, r5}
 800e8e6:	4770      	bx	lr
 800e8e8:	e000ed00 	.word	0xe000ed00
 800e8ec:	e000ecfc 	.word	0xe000ecfc

0800e8f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	db07      	blt.n	800e904 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e8f4:	f000 011f 	and.w	r1, r0, #31
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	0940      	lsrs	r0, r0, #5
 800e8fc:	4a02      	ldr	r2, [pc, #8]	; (800e908 <HAL_NVIC_EnableIRQ+0x18>)
 800e8fe:	408b      	lsls	r3, r1
 800e900:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	e000e100 	.word	0xe000e100

0800e90c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e90c:	3801      	subs	r0, #1
 800e90e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800e912:	d20e      	bcs.n	800e932 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e914:	4b08      	ldr	r3, [pc, #32]	; (800e938 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e916:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e918:	4c08      	ldr	r4, [pc, #32]	; (800e93c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e91a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e91c:	20f0      	movs	r0, #240	; 0xf0
 800e91e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e922:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e924:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e926:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e92a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800e92c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e930:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800e932:	2001      	movs	r0, #1
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop
 800e938:	e000e010 	.word	0xe000e010
 800e93c:	e000ed00 	.word	0xe000ed00

0800e940 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e942:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800e944:	f7ff fcfa 	bl	800e33c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800e948:	2c00      	cmp	r4, #0
 800e94a:	d054      	beq.n	800e9f6 <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e94c:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800e94e:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800e950:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800e954:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800e956:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 800e958:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 800e95c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800e960:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800e962:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e964:	e005      	b.n	800e972 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e966:	f7ff fce9 	bl	800e33c <HAL_GetTick>
 800e96a:	1b40      	subs	r0, r0, r5
 800e96c:	2805      	cmp	r0, #5
 800e96e:	d83b      	bhi.n	800e9e8 <HAL_DMA_Init+0xa8>
 800e970:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	07d1      	lsls	r1, r2, #31
 800e976:	d4f6      	bmi.n	800e966 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e978:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e97c:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e980:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e982:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 800e984:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e986:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e988:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e98c:	430a      	orrs	r2, r1
 800e98e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800e990:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e992:	4835      	ldr	r0, [pc, #212]	; (800ea68 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e994:	4332      	orrs	r2, r6
 800e996:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800e998:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e99a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e99c:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e99e:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e9a0:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e9a4:	d029      	beq.n	800e9fa <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800e9a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800e9a8:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e9aa:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800e9ae:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800e9b0:	b2da      	uxtb	r2, r3
 800e9b2:	482e      	ldr	r0, [pc, #184]	; (800ea6c <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800e9b4:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800e9b6:	3a10      	subs	r2, #16
 800e9b8:	fba0 1202 	umull	r1, r2, r0, r2
 800e9bc:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800e9be:	492c      	ldr	r1, [pc, #176]	; (800ea70 <HAL_DMA_Init+0x130>)
 800e9c0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e9c4:	5c89      	ldrb	r1, [r1, r2]
 800e9c6:	65e1      	str	r1, [r4, #92]	; 0x5c
 800e9c8:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 800e9cc:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800e9ce:	bf88      	it	hi
 800e9d0:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e9d2:	223f      	movs	r2, #63	; 0x3f
 800e9d4:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800e9d6:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e9d8:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800e9da:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 800e9dc:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e9de:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e9e0:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800e9e2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800e9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e9e8:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e9ea:	2220      	movs	r2, #32
 800e9ec:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800e9ee:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e9f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800e9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800e9f6:	2001      	movs	r0, #1
}
 800e9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e9fa:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 800e9fe:	4301      	orrs	r1, r0
 800ea00:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 800ea02:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 800ea04:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800ea06:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800ea08:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ea0c:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 800ea10:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d0cc      	beq.n	800e9b0 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ea16:	b17e      	cbz	r6, 800ea38 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ea18:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800ea1c:	d016      	beq.n	800ea4c <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ea1e:	2d02      	cmp	r5, #2
 800ea20:	d903      	bls.n	800ea2a <HAL_DMA_Init+0xea>
 800ea22:	2d03      	cmp	r5, #3
 800ea24:	d1c4      	bne.n	800e9b0 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ea26:	01c2      	lsls	r2, r0, #7
 800ea28:	d5c2      	bpl.n	800e9b0 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800ea2a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ea2c:	2240      	movs	r2, #64	; 0x40
 800ea2e:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 800ea30:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 800ea32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800ea36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800ea38:	2d01      	cmp	r5, #1
 800ea3a:	d003      	beq.n	800ea44 <HAL_DMA_Init+0x104>
 800ea3c:	d3f3      	bcc.n	800ea26 <HAL_DMA_Init+0xe6>
 800ea3e:	2d02      	cmp	r5, #2
 800ea40:	d1b6      	bne.n	800e9b0 <HAL_DMA_Init+0x70>
 800ea42:	e7f0      	b.n	800ea26 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ea44:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800ea48:	d1b2      	bne.n	800e9b0 <HAL_DMA_Init+0x70>
 800ea4a:	e7ee      	b.n	800ea2a <HAL_DMA_Init+0xea>
    switch (tmp)
 800ea4c:	2d03      	cmp	r5, #3
 800ea4e:	d8af      	bhi.n	800e9b0 <HAL_DMA_Init+0x70>
 800ea50:	a201      	add	r2, pc, #4	; (adr r2, 800ea58 <HAL_DMA_Init+0x118>)
 800ea52:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800ea56:	bf00      	nop
 800ea58:	0800ea2b 	.word	0x0800ea2b
 800ea5c:	0800ea27 	.word	0x0800ea27
 800ea60:	0800ea2b 	.word	0x0800ea2b
 800ea64:	0800ea45 	.word	0x0800ea45
 800ea68:	f010803f 	.word	0xf010803f
 800ea6c:	aaaaaaab 	.word	0xaaaaaaab
 800ea70:	08016768 	.word	0x08016768

0800ea74 <HAL_DMA_Start_IT>:
{
 800ea74:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800ea76:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800ea7a:	2c01      	cmp	r4, #1
 800ea7c:	d035      	beq.n	800eaea <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 800ea7e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ea82:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800ea84:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800ea86:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800ea88:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800ea8c:	d127      	bne.n	800eade <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ea8e:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800ea90:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ea92:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800ea94:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ea98:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ea9a:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ea9c:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ea9e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800eaa2:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800eaa4:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800eaa6:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 800eaa8:	bf0a      	itet	eq
 800eaaa:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800eaac:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800eaae:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eab0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800eab2:	bf18      	it	ne
 800eab4:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eab6:	233f      	movs	r3, #63	; 0x3f
 800eab8:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 800eaba:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eabc:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	f043 0316 	orr.w	r3, r3, #22
 800eac4:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800eac6:	b11a      	cbz	r2, 800ead0 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 800eac8:	6823      	ldr	r3, [r4, #0]
 800eaca:	f043 0308 	orr.w	r3, r3, #8
 800eace:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800ead0:	6823      	ldr	r3, [r4, #0]
 800ead2:	f043 0301 	orr.w	r3, r3, #1
 800ead6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ead8:	2000      	movs	r0, #0
}
 800eada:	bcf0      	pop	{r4, r5, r6, r7}
 800eadc:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 800eade:	2300      	movs	r3, #0
 800eae0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 800eae4:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800eae6:	2002      	movs	r0, #2
}
 800eae8:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800eaea:	2002      	movs	r0, #2
}
 800eaec:	bcf0      	pop	{r4, r5, r6, r7}
 800eaee:	4770      	bx	lr

0800eaf0 <HAL_DMA_Abort>:
{
 800eaf0:	b570      	push	{r4, r5, r6, lr}
 800eaf2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800eaf4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800eaf6:	f7ff fc21 	bl	800e33c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800eafa:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800eafe:	2b02      	cmp	r3, #2
 800eb00:	d006      	beq.n	800eb10 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800eb02:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800eb04:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800eb06:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800eb08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800eb0c:	2001      	movs	r0, #1
}
 800eb0e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800eb10:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800eb12:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	f022 0216 	bic.w	r2, r2, #22
 800eb1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800eb1c:	695a      	ldr	r2, [r3, #20]
 800eb1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb22:	4605      	mov	r5, r0
 800eb24:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800eb26:	b331      	cbz	r1, 800eb76 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	f022 0208 	bic.w	r2, r2, #8
 800eb2e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	f022 0201 	bic.w	r2, r2, #1
 800eb36:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800eb38:	e005      	b.n	800eb46 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800eb3a:	f7ff fbff 	bl	800e33c <HAL_GetTick>
 800eb3e:	1b40      	subs	r0, r0, r5
 800eb40:	2805      	cmp	r0, #5
 800eb42:	d80f      	bhi.n	800eb64 <HAL_DMA_Abort+0x74>
 800eb44:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f013 0301 	ands.w	r3, r3, #1
 800eb4c:	d1f5      	bne.n	800eb3a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eb4e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eb50:	223f      	movs	r2, #63	; 0x3f
 800eb52:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800eb54:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800eb56:	60b2      	str	r2, [r6, #8]
  return HAL_OK;
 800eb58:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 800eb5a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800eb5e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800eb62:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800eb64:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 800eb66:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800eb68:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800eb6a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800eb6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800eb70:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800eb74:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800eb76:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800eb78:	2a00      	cmp	r2, #0
 800eb7a:	d1d5      	bne.n	800eb28 <HAL_DMA_Abort+0x38>
 800eb7c:	e7d8      	b.n	800eb30 <HAL_DMA_Abort+0x40>
 800eb7e:	bf00      	nop

0800eb80 <HAL_DMA_IRQHandler>:
{
 800eb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb82:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800eb84:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800eb86:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 800eb88:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800eb8a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800eb8c:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800eb8e:	4965      	ldr	r1, [pc, #404]	; (800ed24 <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800eb90:	2208      	movs	r2, #8
 800eb92:	409a      	lsls	r2, r3
 800eb94:	422a      	tst	r2, r5
{
 800eb96:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800eb98:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800eb9a:	d003      	beq.n	800eba4 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800eb9c:	6801      	ldr	r1, [r0, #0]
 800eb9e:	6808      	ldr	r0, [r1, #0]
 800eba0:	0740      	lsls	r0, r0, #29
 800eba2:	d459      	bmi.n	800ec58 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800eba4:	2201      	movs	r2, #1
 800eba6:	409a      	lsls	r2, r3
 800eba8:	422a      	tst	r2, r5
 800ebaa:	d003      	beq.n	800ebb4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ebac:	6821      	ldr	r1, [r4, #0]
 800ebae:	6949      	ldr	r1, [r1, #20]
 800ebb0:	0608      	lsls	r0, r1, #24
 800ebb2:	d474      	bmi.n	800ec9e <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ebb4:	2204      	movs	r2, #4
 800ebb6:	409a      	lsls	r2, r3
 800ebb8:	422a      	tst	r2, r5
 800ebba:	d003      	beq.n	800ebc4 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ebbc:	6821      	ldr	r1, [r4, #0]
 800ebbe:	6809      	ldr	r1, [r1, #0]
 800ebc0:	0789      	lsls	r1, r1, #30
 800ebc2:	d466      	bmi.n	800ec92 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ebc4:	2210      	movs	r2, #16
 800ebc6:	409a      	lsls	r2, r3
 800ebc8:	422a      	tst	r2, r5
 800ebca:	d003      	beq.n	800ebd4 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ebcc:	6821      	ldr	r1, [r4, #0]
 800ebce:	6808      	ldr	r0, [r1, #0]
 800ebd0:	0700      	lsls	r0, r0, #28
 800ebd2:	d44b      	bmi.n	800ec6c <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ebd4:	2220      	movs	r2, #32
 800ebd6:	409a      	lsls	r2, r3
 800ebd8:	422a      	tst	r2, r5
 800ebda:	d014      	beq.n	800ec06 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ebdc:	6821      	ldr	r1, [r4, #0]
 800ebde:	6808      	ldr	r0, [r1, #0]
 800ebe0:	06c0      	lsls	r0, r0, #27
 800ebe2:	d510      	bpl.n	800ec06 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ebe4:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ebe6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800ebea:	2a05      	cmp	r2, #5
 800ebec:	d063      	beq.n	800ecb6 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ebee:	680b      	ldr	r3, [r1, #0]
 800ebf0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ebf4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ebf6:	d07e      	beq.n	800ecf6 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ebf8:	0319      	lsls	r1, r3, #12
 800ebfa:	f140 8089 	bpl.w	800ed10 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800ebfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ec00:	b10b      	cbz	r3, 800ec06 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800ec02:	4620      	mov	r0, r4
 800ec04:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ec06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ec08:	b323      	cbz	r3, 800ec54 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ec0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ec0c:	07da      	lsls	r2, r3, #31
 800ec0e:	d51a      	bpl.n	800ec46 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 800ec10:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800ec12:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800ec14:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800ec18:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ec1a:	4943      	ldr	r1, [pc, #268]	; (800ed28 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 800ec1c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800ec20:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800ec24:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ec26:	0ab6      	lsrs	r6, r6, #10
 800ec28:	e002      	b.n	800ec30 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ec2a:	6813      	ldr	r3, [r2, #0]
 800ec2c:	07db      	lsls	r3, r3, #31
 800ec2e:	d504      	bpl.n	800ec3a <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 800ec30:	9b01      	ldr	r3, [sp, #4]
 800ec32:	3301      	adds	r3, #1
 800ec34:	42b3      	cmp	r3, r6
 800ec36:	9301      	str	r3, [sp, #4]
 800ec38:	d9f7      	bls.n	800ec2a <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800ec3a:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800ec3c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800ec3e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800ec42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800ec46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ec48:	b123      	cbz	r3, 800ec54 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800ec4a:	4620      	mov	r0, r4
}
 800ec4c:	b003      	add	sp, #12
 800ec4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800ec52:	4718      	bx	r3
}
 800ec54:	b003      	add	sp, #12
 800ec56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ec58:	6808      	ldr	r0, [r1, #0]
 800ec5a:	f020 0004 	bic.w	r0, r0, #4
 800ec5e:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ec60:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ec62:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ec64:	f042 0201 	orr.w	r2, r2, #1
 800ec68:	6562      	str	r2, [r4, #84]	; 0x54
 800ec6a:	e79b      	b.n	800eba4 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ec6c:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ec6e:	680a      	ldr	r2, [r1, #0]
 800ec70:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ec74:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ec76:	d118      	bne.n	800ecaa <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ec78:	05d2      	lsls	r2, r2, #23
 800ec7a:	d403      	bmi.n	800ec84 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ec7c:	680a      	ldr	r2, [r1, #0]
 800ec7e:	f022 0208 	bic.w	r2, r2, #8
 800ec82:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800ec84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ec86:	2a00      	cmp	r2, #0
 800ec88:	d0a4      	beq.n	800ebd4 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	4790      	blx	r2
 800ec8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ec90:	e7a0      	b.n	800ebd4 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ec92:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ec94:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ec96:	f042 0204 	orr.w	r2, r2, #4
 800ec9a:	6562      	str	r2, [r4, #84]	; 0x54
 800ec9c:	e792      	b.n	800ebc4 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ec9e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800eca0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800eca2:	f042 0202 	orr.w	r2, r2, #2
 800eca6:	6562      	str	r2, [r4, #84]	; 0x54
 800eca8:	e784      	b.n	800ebb4 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ecaa:	0311      	lsls	r1, r2, #12
 800ecac:	d5ea      	bpl.n	800ec84 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ecae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ecb0:	2a00      	cmp	r2, #0
 800ecb2:	d1ea      	bne.n	800ec8a <HAL_DMA_IRQHandler+0x10a>
 800ecb4:	e78e      	b.n	800ebd4 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ecb6:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ecb8:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ecba:	f022 0216 	bic.w	r2, r2, #22
 800ecbe:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ecc0:	694a      	ldr	r2, [r1, #20]
 800ecc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ecc6:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ecc8:	b338      	cbz	r0, 800ed1a <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ecca:	680a      	ldr	r2, [r1, #0]
 800eccc:	f022 0208 	bic.w	r2, r2, #8
 800ecd0:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ecd2:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800ecd4:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ecd6:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800ecda:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 800ecdc:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ecde:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800ece0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800ece4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800ece8:	2900      	cmp	r1, #0
 800ecea:	d0b3      	beq.n	800ec54 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800ecec:	4620      	mov	r0, r4
}
 800ecee:	b003      	add	sp, #12
 800ecf0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800ecf4:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ecf6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800ecfa:	d180      	bne.n	800ebfe <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ecfc:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800ecfe:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ed00:	f022 0210 	bic.w	r2, r2, #16
 800ed04:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800ed06:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800ed0a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800ed0e:	e776      	b.n	800ebfe <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 800ed10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	f47f af75 	bne.w	800ec02 <HAL_DMA_IRQHandler+0x82>
 800ed18:	e775      	b.n	800ec06 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ed1a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ed1c:	2a00      	cmp	r2, #0
 800ed1e:	d1d4      	bne.n	800ecca <HAL_DMA_IRQHandler+0x14a>
 800ed20:	e7d7      	b.n	800ecd2 <HAL_DMA_IRQHandler+0x152>
 800ed22:	bf00      	nop
 800ed24:	20000024 	.word	0x20000024
 800ed28:	1b4e81b5 	.word	0x1b4e81b5

0800ed2c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ed2c:	4b1b      	ldr	r3, [pc, #108]	; (800ed9c <FLASH_SetErrorCode+0x70>)
 800ed2e:	68da      	ldr	r2, [r3, #12]
 800ed30:	06d1      	lsls	r1, r2, #27
 800ed32:	d505      	bpl.n	800ed40 <FLASH_SetErrorCode+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ed34:	491a      	ldr	r1, [pc, #104]	; (800eda0 <FLASH_SetErrorCode+0x74>)
 800ed36:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ed38:	2010      	movs	r0, #16
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ed3a:	4302      	orrs	r2, r0
 800ed3c:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ed3e:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ed40:	4b16      	ldr	r3, [pc, #88]	; (800ed9c <FLASH_SetErrorCode+0x70>)
 800ed42:	68da      	ldr	r2, [r3, #12]
 800ed44:	0692      	lsls	r2, r2, #26
 800ed46:	d506      	bpl.n	800ed56 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ed48:	4915      	ldr	r1, [pc, #84]	; (800eda0 <FLASH_SetErrorCode+0x74>)
 800ed4a:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ed4c:	2020      	movs	r0, #32
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ed4e:	f042 0208 	orr.w	r2, r2, #8
 800ed52:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ed54:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ed56:	4b11      	ldr	r3, [pc, #68]	; (800ed9c <FLASH_SetErrorCode+0x70>)
 800ed58:	68da      	ldr	r2, [r3, #12]
 800ed5a:	0650      	lsls	r0, r2, #25
 800ed5c:	d506      	bpl.n	800ed6c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ed5e:	4910      	ldr	r1, [pc, #64]	; (800eda0 <FLASH_SetErrorCode+0x74>)
 800ed60:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ed62:	2040      	movs	r0, #64	; 0x40
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ed64:	f042 0204 	orr.w	r2, r2, #4
 800ed68:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ed6a:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ed6c:	4b0b      	ldr	r3, [pc, #44]	; (800ed9c <FLASH_SetErrorCode+0x70>)
 800ed6e:	68da      	ldr	r2, [r3, #12]
 800ed70:	0611      	lsls	r1, r2, #24
 800ed72:	d506      	bpl.n	800ed82 <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ed74:	490a      	ldr	r1, [pc, #40]	; (800eda0 <FLASH_SetErrorCode+0x74>)
 800ed76:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ed78:	2080      	movs	r0, #128	; 0x80
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ed7a:	f042 0202 	orr.w	r2, r2, #2
 800ed7e:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ed80:	60d8      	str	r0, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ed82:	4b06      	ldr	r3, [pc, #24]	; (800ed9c <FLASH_SetErrorCode+0x70>)
 800ed84:	68da      	ldr	r2, [r3, #12]
 800ed86:	0792      	lsls	r2, r2, #30
 800ed88:	d506      	bpl.n	800ed98 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ed8a:	4905      	ldr	r1, [pc, #20]	; (800eda0 <FLASH_SetErrorCode+0x74>)
 800ed8c:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ed8e:	2002      	movs	r0, #2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ed90:	f042 0220 	orr.w	r2, r2, #32
 800ed94:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ed96:	60d8      	str	r0, [r3, #12]
  }
}
 800ed98:	4770      	bx	lr
 800ed9a:	bf00      	nop
 800ed9c:	40023c00 	.word	0x40023c00
 800eda0:	2000a72c 	.word	0x2000a72c

0800eda4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800eda4:	4b06      	ldr	r3, [pc, #24]	; (800edc0 <HAL_FLASH_Unlock+0x1c>)
 800eda6:	691a      	ldr	r2, [r3, #16]
 800eda8:	2a00      	cmp	r2, #0
 800edaa:	db01      	blt.n	800edb0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800edac:	2000      	movs	r0, #0
}
 800edae:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800edb0:	4904      	ldr	r1, [pc, #16]	; (800edc4 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800edb2:	4a05      	ldr	r2, [pc, #20]	; (800edc8 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800edb4:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800edb6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800edb8:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800edba:	0fc0      	lsrs	r0, r0, #31
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	40023c00 	.word	0x40023c00
 800edc4:	45670123 	.word	0x45670123
 800edc8:	cdef89ab 	.word	0xcdef89ab

0800edcc <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800edcc:	4a03      	ldr	r2, [pc, #12]	; (800eddc <HAL_FLASH_Lock+0x10>)
 800edce:	6913      	ldr	r3, [r2, #16]
 800edd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800edd4:	6113      	str	r3, [r2, #16]
}
 800edd6:	2000      	movs	r0, #0
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop
 800eddc:	40023c00 	.word	0x40023c00

0800ede0 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ede0:	4b12      	ldr	r3, [pc, #72]	; (800ee2c <FLASH_WaitForLastOperation+0x4c>)
{ 
 800ede2:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ede4:	2200      	movs	r2, #0
{ 
 800ede6:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ede8:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800edea:	f7ff faa7 	bl	800e33c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800edee:	4c10      	ldr	r4, [pc, #64]	; (800ee30 <FLASH_WaitForLastOperation+0x50>)
  tickstart = HAL_GetTick();
 800edf0:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800edf2:	e001      	b.n	800edf8 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800edf4:	1c69      	adds	r1, r5, #1
 800edf6:	d10d      	bne.n	800ee14 <FLASH_WaitForLastOperation+0x34>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800edf8:	68e3      	ldr	r3, [r4, #12]
 800edfa:	03da      	lsls	r2, r3, #15
 800edfc:	d4fa      	bmi.n	800edf4 <FLASH_WaitForLastOperation+0x14>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800edfe:	68e3      	ldr	r3, [r4, #12]
 800ee00:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ee02:	bf44      	itt	mi
 800ee04:	2301      	movmi	r3, #1
 800ee06:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800ee08:	4b09      	ldr	r3, [pc, #36]	; (800ee30 <FLASH_WaitForLastOperation+0x50>)
 800ee0a:	68d8      	ldr	r0, [r3, #12]
 800ee0c:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 800ee10:	d108      	bne.n	800ee24 <FLASH_WaitForLastOperation+0x44>
}  
 800ee12:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800ee14:	b125      	cbz	r5, 800ee20 <FLASH_WaitForLastOperation+0x40>
 800ee16:	f7ff fa91 	bl	800e33c <HAL_GetTick>
 800ee1a:	1b80      	subs	r0, r0, r6
 800ee1c:	42a8      	cmp	r0, r5
 800ee1e:	d9eb      	bls.n	800edf8 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800ee20:	2003      	movs	r0, #3
}  
 800ee22:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800ee24:	f7ff ff82 	bl	800ed2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ee28:	2001      	movs	r0, #1
}  
 800ee2a:	bd70      	pop	{r4, r5, r6, pc}
 800ee2c:	2000a72c 	.word	0x2000a72c
 800ee30:	40023c00 	.word	0x40023c00

0800ee34 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800ee34:	b139      	cbz	r1, 800ee46 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800ee36:	2901      	cmp	r1, #1
 800ee38:	d01c      	beq.n	800ee74 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800ee3a:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800ee3c:	bf0c      	ite	eq
 800ee3e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800ee42:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ee46:	4b0d      	ldr	r3, [pc, #52]	; (800ee7c <FLASH_Erase_Sector+0x48>)
 800ee48:	691a      	ldr	r2, [r3, #16]
 800ee4a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ee4e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800ee50:	691a      	ldr	r2, [r3, #16]
 800ee52:	4311      	orrs	r1, r2
 800ee54:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800ee56:	691a      	ldr	r2, [r3, #16]
 800ee58:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800ee5c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800ee5e:	691a      	ldr	r2, [r3, #16]
 800ee60:	f042 0202 	orr.w	r2, r2, #2
 800ee64:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800ee68:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800ee6a:	691a      	ldr	r2, [r3, #16]
 800ee6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ee70:	611a      	str	r2, [r3, #16]
}
 800ee72:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800ee74:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ee78:	e7e5      	b.n	800ee46 <FLASH_Erase_Sector+0x12>
 800ee7a:	bf00      	nop
 800ee7c:	40023c00 	.word	0x40023c00

0800ee80 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800ee80:	4b14      	ldr	r3, [pc, #80]	; (800eed4 <FLASH_FlushCaches+0x54>)
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	0591      	lsls	r1, r2, #22
 800ee86:	d50f      	bpl.n	800eea8 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ee8e:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee96:	601a      	str	r2, [r3, #0]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ee9e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eea6:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800eea8:	4b0a      	ldr	r3, [pc, #40]	; (800eed4 <FLASH_FlushCaches+0x54>)
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	0552      	lsls	r2, r2, #21
 800eeae:	d50f      	bpl.n	800eed0 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eeb6:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800eebe:	601a      	str	r2, [r3, #0]
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800eec6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eece:	601a      	str	r2, [r3, #0]
  }
}
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	40023c00 	.word	0x40023c00

0800eed8 <HAL_FLASHEx_Erase>:
{
 800eed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800eedc:	4e2d      	ldr	r6, [pc, #180]	; (800ef94 <HAL_FLASHEx_Erase+0xbc>)
 800eede:	7e33      	ldrb	r3, [r6, #24]
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d038      	beq.n	800ef56 <HAL_FLASHEx_Erase+0x7e>
 800eee4:	2301      	movs	r3, #1
 800eee6:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800eee8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800eeec:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800eeee:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800eef0:	f7ff ff76 	bl	800ede0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800eef4:	4607      	mov	r7, r0
 800eef6:	bb48      	cbnz	r0, 800ef4c <HAL_FLASHEx_Erase+0x74>
    *SectorError = 0xFFFFFFFFU;
 800eef8:	f04f 33ff 	mov.w	r3, #4294967295
 800eefc:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ef00:	6823      	ldr	r3, [r4, #0]
 800ef02:	2b01      	cmp	r3, #1
 800ef04:	d02b      	beq.n	800ef5e <HAL_FLASHEx_Erase+0x86>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ef06:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800ef0a:	442b      	add	r3, r5
 800ef0c:	429d      	cmp	r5, r3
 800ef0e:	d21b      	bcs.n	800ef48 <HAL_FLASHEx_Erase+0x70>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ef10:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800ef98 <HAL_FLASHEx_Erase+0xc0>
 800ef14:	e005      	b.n	800ef22 <HAL_FLASHEx_Erase+0x4a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ef16:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800ef1a:	3501      	adds	r5, #1
 800ef1c:	4413      	add	r3, r2
 800ef1e:	42ab      	cmp	r3, r5
 800ef20:	d912      	bls.n	800ef48 <HAL_FLASHEx_Erase+0x70>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800ef22:	7c21      	ldrb	r1, [r4, #16]
 800ef24:	4628      	mov	r0, r5
 800ef26:	f7ff ff85 	bl	800ee34 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ef2a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ef2e:	f7ff ff57 	bl	800ede0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ef32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef36:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ef3a:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	d0e9      	beq.n	800ef16 <HAL_FLASHEx_Erase+0x3e>
          *SectorError = index;
 800ef42:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ef46:	4607      	mov	r7, r0
    FLASH_FlushCaches();    
 800ef48:	f7ff ff9a 	bl	800ee80 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	7633      	strb	r3, [r6, #24]
}
 800ef50:	4638      	mov	r0, r7
 800ef52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800ef56:	2702      	movs	r7, #2
}
 800ef58:	4638      	mov	r0, r7
 800ef5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ef5e:	4d0e      	ldr	r5, [pc, #56]	; (800ef98 <HAL_FLASHEx_Erase+0xc0>)
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800ef60:	6923      	ldr	r3, [r4, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ef62:	692a      	ldr	r2, [r5, #16]
 800ef64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ef68:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_MER;
 800ef6a:	692a      	ldr	r2, [r5, #16]
 800ef6c:	f042 0204 	orr.w	r2, r2, #4
 800ef70:	612a      	str	r2, [r5, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800ef72:	692a      	ldr	r2, [r5, #16]
 800ef74:	021b      	lsls	r3, r3, #8
 800ef76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	612b      	str	r3, [r5, #16]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ef80:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ef84:	f7ff ff2c 	bl	800ede0 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800ef88:	692b      	ldr	r3, [r5, #16]
 800ef8a:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ef8e:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800ef90:	612b      	str	r3, [r5, #16]
 800ef92:	e7d9      	b.n	800ef48 <HAL_FLASHEx_Erase+0x70>
 800ef94:	2000a72c 	.word	0x2000a72c
 800ef98:	40023c00 	.word	0x40023c00

0800ef9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ef9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800efa0:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800efa4:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 800f19c <HAL_GPIO_Init+0x200>
{
 800efa8:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 800efaa:	2400      	movs	r4, #0
 800efac:	e003      	b.n	800efb6 <HAL_GPIO_Init+0x1a>
 800efae:	3401      	adds	r4, #1
 800efb0:	2c10      	cmp	r4, #16
 800efb2:	f000 808c 	beq.w	800f0ce <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 800efb6:	2301      	movs	r3, #1
 800efb8:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800efba:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d1f5      	bne.n	800efae <HAL_GPIO_Init+0x12>
 800efc2:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800efc6:	f026 0910 	bic.w	r9, r6, #16
 800efca:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 800efce:	2303      	movs	r3, #3
 800efd0:	f109 37ff 	add.w	r7, r9, #4294967295
 800efd4:	fa03 f30c 	lsl.w	r3, r3, ip
 800efd8:	2f01      	cmp	r7, #1
 800efda:	ea6f 0303 	mvn.w	r3, r3
 800efde:	fa05 f50c 	lsl.w	r5, r5, ip
 800efe2:	d977      	bls.n	800f0d4 <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 800efe4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800efe6:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800efe8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800efea:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 800efec:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800efee:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800eff2:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800eff4:	fa05 f30c 	lsl.w	r3, r5, ip
 800eff8:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800effa:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800effc:	00f3      	lsls	r3, r6, #3
 800effe:	d5d6      	bpl.n	800efae <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f000:	4d5f      	ldr	r5, [pc, #380]	; (800f180 <HAL_GPIO_Init+0x1e4>)
 800f002:	2300      	movs	r3, #0
 800f004:	9301      	str	r3, [sp, #4]
 800f006:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800f008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f00c:	646b      	str	r3, [r5, #68]	; 0x44
 800f00e:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 800f010:	f024 0303 	bic.w	r3, r4, #3
 800f014:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800f018:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f01c:	9501      	str	r5, [sp, #4]
 800f01e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f022:	f004 0503 	and.w	r5, r4, #3
 800f026:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f02a:	4d56      	ldr	r5, [pc, #344]	; (800f184 <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f02c:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800f02e:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f032:	270f      	movs	r7, #15
 800f034:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f038:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800f03a:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800f03e:	d01f      	beq.n	800f080 <HAL_GPIO_Init+0xe4>
 800f040:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800f044:	42a8      	cmp	r0, r5
 800f046:	d076      	beq.n	800f136 <HAL_GPIO_Init+0x19a>
 800f048:	4d4f      	ldr	r5, [pc, #316]	; (800f188 <HAL_GPIO_Init+0x1ec>)
 800f04a:	42a8      	cmp	r0, r5
 800f04c:	d079      	beq.n	800f142 <HAL_GPIO_Init+0x1a6>
 800f04e:	4d4f      	ldr	r5, [pc, #316]	; (800f18c <HAL_GPIO_Init+0x1f0>)
 800f050:	42a8      	cmp	r0, r5
 800f052:	d07c      	beq.n	800f14e <HAL_GPIO_Init+0x1b2>
 800f054:	4d4e      	ldr	r5, [pc, #312]	; (800f190 <HAL_GPIO_Init+0x1f4>)
 800f056:	42a8      	cmp	r0, r5
 800f058:	d07f      	beq.n	800f15a <HAL_GPIO_Init+0x1be>
 800f05a:	4d4e      	ldr	r5, [pc, #312]	; (800f194 <HAL_GPIO_Init+0x1f8>)
 800f05c:	42a8      	cmp	r0, r5
 800f05e:	f000 8082 	beq.w	800f166 <HAL_GPIO_Init+0x1ca>
 800f062:	4d4d      	ldr	r5, [pc, #308]	; (800f198 <HAL_GPIO_Init+0x1fc>)
 800f064:	42a8      	cmp	r0, r5
 800f066:	f000 8084 	beq.w	800f172 <HAL_GPIO_Init+0x1d6>
 800f06a:	f8df c134 	ldr.w	ip, [pc, #308]	; 800f1a0 <HAL_GPIO_Init+0x204>
 800f06e:	4560      	cmp	r0, ip
 800f070:	bf0c      	ite	eq
 800f072:	f04f 0c07 	moveq.w	ip, #7
 800f076:	f04f 0c08 	movne.w	ip, #8
 800f07a:	fa0c f509 	lsl.w	r5, ip, r9
 800f07e:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f080:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800f082:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800f086:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f088:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 800f08a:	bf54      	ite	pl
 800f08c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800f08e:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800f090:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800f094:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f098:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 800f09a:	bf54      	ite	pl
 800f09c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800f09e:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 800f0a0:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f0a4:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f0a8:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 800f0aa:	bf54      	ite	pl
 800f0ac:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800f0ae:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800f0b0:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800f0b4:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f0b8:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f0ba:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800f0be:	bf54      	ite	pl
 800f0c0:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800f0c2:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f0c4:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 800f0c6:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f0ca:	f47f af74 	bne.w	800efb6 <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 800f0ce:	b003      	add	sp, #12
 800f0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800f0d4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800f0d6:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f0da:	68cf      	ldr	r7, [r1, #12]
 800f0dc:	fa07 f70c 	lsl.w	r7, r7, ip
 800f0e0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800f0e4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800f0e6:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800f0ea:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f0ee:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800f0f2:	40a7      	lsls	r7, r4
 800f0f4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800f0f8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800f0fa:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f0fc:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f0fe:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f100:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 800f104:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f106:	f47f af71 	bne.w	800efec <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 800f10a:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800f10e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f112:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 800f116:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800f11a:	00bf      	lsls	r7, r7, #2
 800f11c:	f04f 0b0f 	mov.w	fp, #15
 800f120:	fa0b fb07 	lsl.w	fp, fp, r7
 800f124:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800f128:	690d      	ldr	r5, [r1, #16]
 800f12a:	40bd      	lsls	r5, r7
 800f12c:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 800f130:	f8c9 5020 	str.w	r5, [r9, #32]
 800f134:	e75a      	b.n	800efec <HAL_GPIO_Init+0x50>
 800f136:	f04f 0c01 	mov.w	ip, #1
 800f13a:	fa0c f509 	lsl.w	r5, ip, r9
 800f13e:	432f      	orrs	r7, r5
 800f140:	e79e      	b.n	800f080 <HAL_GPIO_Init+0xe4>
 800f142:	f04f 0c02 	mov.w	ip, #2
 800f146:	fa0c f509 	lsl.w	r5, ip, r9
 800f14a:	432f      	orrs	r7, r5
 800f14c:	e798      	b.n	800f080 <HAL_GPIO_Init+0xe4>
 800f14e:	f04f 0c03 	mov.w	ip, #3
 800f152:	fa0c f509 	lsl.w	r5, ip, r9
 800f156:	432f      	orrs	r7, r5
 800f158:	e792      	b.n	800f080 <HAL_GPIO_Init+0xe4>
 800f15a:	f04f 0c04 	mov.w	ip, #4
 800f15e:	fa0c f509 	lsl.w	r5, ip, r9
 800f162:	432f      	orrs	r7, r5
 800f164:	e78c      	b.n	800f080 <HAL_GPIO_Init+0xe4>
 800f166:	f04f 0c05 	mov.w	ip, #5
 800f16a:	fa0c f509 	lsl.w	r5, ip, r9
 800f16e:	432f      	orrs	r7, r5
 800f170:	e786      	b.n	800f080 <HAL_GPIO_Init+0xe4>
 800f172:	f04f 0c06 	mov.w	ip, #6
 800f176:	fa0c f509 	lsl.w	r5, ip, r9
 800f17a:	432f      	orrs	r7, r5
 800f17c:	e780      	b.n	800f080 <HAL_GPIO_Init+0xe4>
 800f17e:	bf00      	nop
 800f180:	40023800 	.word	0x40023800
 800f184:	40020000 	.word	0x40020000
 800f188:	40020800 	.word	0x40020800
 800f18c:	40020c00 	.word	0x40020c00
 800f190:	40021000 	.word	0x40021000
 800f194:	40021400 	.word	0x40021400
 800f198:	40021800 	.word	0x40021800
 800f19c:	40013c00 	.word	0x40013c00
 800f1a0:	40021c00 	.word	0x40021c00

0800f1a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f1a4:	b902      	cbnz	r2, 800f1a8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f1a6:	0409      	lsls	r1, r1, #16
 800f1a8:	6181      	str	r1, [r0, #24]
  }
}
 800f1aa:	4770      	bx	lr

0800f1ac <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f1ac:	4a04      	ldr	r2, [pc, #16]	; (800f1c0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800f1ae:	6951      	ldr	r1, [r2, #20]
 800f1b0:	4201      	tst	r1, r0
 800f1b2:	d100      	bne.n	800f1b6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800f1b4:	4770      	bx	lr
{
 800f1b6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f1b8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f1ba:	f7fe ff6f 	bl	800e09c <HAL_GPIO_EXTI_Callback>
  }
}
 800f1be:	bd08      	pop	{r3, pc}
 800f1c0:	40013c00 	.word	0x40013c00

0800f1c4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	f000 8132 	beq.w	800f42e <HAL_RCC_OscConfig+0x26a>
{
 800f1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f1ce:	6803      	ldr	r3, [r0, #0]
 800f1d0:	07dd      	lsls	r5, r3, #31
{
 800f1d2:	b082      	sub	sp, #8
 800f1d4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f1d6:	d52f      	bpl.n	800f238 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f1d8:	49ac      	ldr	r1, [pc, #688]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
 800f1da:	688a      	ldr	r2, [r1, #8]
 800f1dc:	f002 020c 	and.w	r2, r2, #12
 800f1e0:	2a04      	cmp	r2, #4
 800f1e2:	f000 80ea 	beq.w	800f3ba <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f1e6:	688a      	ldr	r2, [r1, #8]
 800f1e8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f1ec:	2a08      	cmp	r2, #8
 800f1ee:	f000 80e0 	beq.w	800f3b2 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f1f2:	6863      	ldr	r3, [r4, #4]
 800f1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1f8:	f000 80e9 	beq.w	800f3ce <HAL_RCC_OscConfig+0x20a>
 800f1fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f200:	f000 8178 	beq.w	800f4f4 <HAL_RCC_OscConfig+0x330>
 800f204:	4da1      	ldr	r5, [pc, #644]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
 800f206:	682a      	ldr	r2, [r5, #0]
 800f208:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f20c:	602a      	str	r2, [r5, #0]
 800f20e:	682a      	ldr	r2, [r5, #0]
 800f210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f214:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f216:	2b00      	cmp	r3, #0
 800f218:	f040 80de 	bne.w	800f3d8 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f21c:	f7ff f88e 	bl	800e33c <HAL_GetTick>
 800f220:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f222:	e005      	b.n	800f230 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f224:	f7ff f88a 	bl	800e33c <HAL_GetTick>
 800f228:	1b80      	subs	r0, r0, r6
 800f22a:	2864      	cmp	r0, #100	; 0x64
 800f22c:	f200 80f2 	bhi.w	800f414 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f230:	682b      	ldr	r3, [r5, #0]
 800f232:	039b      	lsls	r3, r3, #14
 800f234:	d4f6      	bmi.n	800f224 <HAL_RCC_OscConfig+0x60>
 800f236:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f238:	079f      	lsls	r7, r3, #30
 800f23a:	d475      	bmi.n	800f328 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f23c:	071a      	lsls	r2, r3, #28
 800f23e:	d515      	bpl.n	800f26c <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f240:	6963      	ldr	r3, [r4, #20]
 800f242:	2b00      	cmp	r3, #0
 800f244:	f000 80a5 	beq.w	800f392 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f248:	4b91      	ldr	r3, [pc, #580]	; (800f490 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f24a:	4d90      	ldr	r5, [pc, #576]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 800f24c:	2201      	movs	r2, #1
 800f24e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800f250:	f7ff f874 	bl	800e33c <HAL_GetTick>
 800f254:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f256:	e005      	b.n	800f264 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f258:	f7ff f870 	bl	800e33c <HAL_GetTick>
 800f25c:	1b80      	subs	r0, r0, r6
 800f25e:	2802      	cmp	r0, #2
 800f260:	f200 80d8 	bhi.w	800f414 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f264:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800f266:	079b      	lsls	r3, r3, #30
 800f268:	d5f6      	bpl.n	800f258 <HAL_RCC_OscConfig+0x94>
 800f26a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f26c:	0758      	lsls	r0, r3, #29
 800f26e:	d53b      	bpl.n	800f2e8 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f270:	4a86      	ldr	r2, [pc, #536]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
 800f272:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f274:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800f278:	f040 80db 	bne.w	800f432 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f27c:	9301      	str	r3, [sp, #4]
 800f27e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f284:	6413      	str	r3, [r2, #64]	; 0x40
 800f286:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f28c:	9301      	str	r3, [sp, #4]
 800f28e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800f290:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f292:	4d80      	ldr	r5, [pc, #512]	; (800f494 <HAL_RCC_OscConfig+0x2d0>)
 800f294:	682a      	ldr	r2, [r5, #0]
 800f296:	05d1      	lsls	r1, r2, #23
 800f298:	f140 80ac 	bpl.w	800f3f4 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f29c:	68a3      	ldr	r3, [r4, #8]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	f000 80c9 	beq.w	800f436 <HAL_RCC_OscConfig+0x272>
 800f2a4:	2b05      	cmp	r3, #5
 800f2a6:	f000 812f 	beq.w	800f508 <HAL_RCC_OscConfig+0x344>
 800f2aa:	4d78      	ldr	r5, [pc, #480]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
 800f2ac:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800f2ae:	f022 0201 	bic.w	r2, r2, #1
 800f2b2:	672a      	str	r2, [r5, #112]	; 0x70
 800f2b4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800f2b6:	f022 0204 	bic.w	r2, r2, #4
 800f2ba:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f040 80bf 	bne.w	800f440 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f2c2:	f7ff f83b 	bl	800e33c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f2c6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800f2ca:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f2cc:	e006      	b.n	800f2dc <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f2ce:	f7ff f835 	bl	800e33c <HAL_GetTick>
 800f2d2:	eba0 0008 	sub.w	r0, r0, r8
 800f2d6:	42b8      	cmp	r0, r7
 800f2d8:	f200 809c 	bhi.w	800f414 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f2dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f2de:	0798      	lsls	r0, r3, #30
 800f2e0:	d4f5      	bmi.n	800f2ce <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f2e2:	2e00      	cmp	r6, #0
 800f2e4:	f040 80dc 	bne.w	800f4a0 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f2e8:	69a0      	ldr	r0, [r4, #24]
 800f2ea:	b1c8      	cbz	r0, 800f320 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f2ec:	4d67      	ldr	r5, [pc, #412]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
 800f2ee:	68aa      	ldr	r2, [r5, #8]
 800f2f0:	f002 020c 	and.w	r2, r2, #12
 800f2f4:	2a08      	cmp	r2, #8
 800f2f6:	f000 80d9 	beq.w	800f4ac <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f2fa:	4a67      	ldr	r2, [pc, #412]	; (800f498 <HAL_RCC_OscConfig+0x2d4>)
 800f2fc:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f2fe:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800f300:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f302:	f000 810b 	beq.w	800f51c <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f306:	f7ff f819 	bl	800e33c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f30a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800f30c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f30e:	e004      	b.n	800f31a <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f310:	f7ff f814 	bl	800e33c <HAL_GetTick>
 800f314:	1b40      	subs	r0, r0, r5
 800f316:	2802      	cmp	r0, #2
 800f318:	d87c      	bhi.n	800f414 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	019b      	lsls	r3, r3, #6
 800f31e:	d4f7      	bmi.n	800f310 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800f320:	2000      	movs	r0, #0
}
 800f322:	b002      	add	sp, #8
 800f324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f328:	4a58      	ldr	r2, [pc, #352]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
 800f32a:	6891      	ldr	r1, [r2, #8]
 800f32c:	f011 0f0c 	tst.w	r1, #12
 800f330:	d024      	beq.n	800f37c <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f332:	6891      	ldr	r1, [r2, #8]
 800f334:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f338:	2908      	cmp	r1, #8
 800f33a:	d01c      	beq.n	800f376 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f33c:	68e3      	ldr	r3, [r4, #12]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	f000 8092 	beq.w	800f468 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 800f344:	4b55      	ldr	r3, [pc, #340]	; (800f49c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f346:	4d51      	ldr	r5, [pc, #324]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 800f348:	2201      	movs	r2, #1
 800f34a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800f34c:	f7fe fff6 	bl	800e33c <HAL_GetTick>
 800f350:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f352:	e004      	b.n	800f35e <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f354:	f7fe fff2 	bl	800e33c <HAL_GetTick>
 800f358:	1b80      	subs	r0, r0, r6
 800f35a:	2802      	cmp	r0, #2
 800f35c:	d85a      	bhi.n	800f414 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f35e:	682b      	ldr	r3, [r5, #0]
 800f360:	0798      	lsls	r0, r3, #30
 800f362:	d5f7      	bpl.n	800f354 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f364:	682b      	ldr	r3, [r5, #0]
 800f366:	6922      	ldr	r2, [r4, #16]
 800f368:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f36c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f370:	602b      	str	r3, [r5, #0]
 800f372:	6823      	ldr	r3, [r4, #0]
 800f374:	e762      	b.n	800f23c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f376:	6852      	ldr	r2, [r2, #4]
 800f378:	0256      	lsls	r6, r2, #9
 800f37a:	d4df      	bmi.n	800f33c <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f37c:	4a43      	ldr	r2, [pc, #268]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
 800f37e:	6812      	ldr	r2, [r2, #0]
 800f380:	0795      	lsls	r5, r2, #30
 800f382:	d54b      	bpl.n	800f41c <HAL_RCC_OscConfig+0x258>
 800f384:	68e2      	ldr	r2, [r4, #12]
 800f386:	2a01      	cmp	r2, #1
 800f388:	d048      	beq.n	800f41c <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 800f38a:	2001      	movs	r0, #1
}
 800f38c:	b002      	add	sp, #8
 800f38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800f392:	4a3f      	ldr	r2, [pc, #252]	; (800f490 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f394:	4d3d      	ldr	r5, [pc, #244]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800f396:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800f398:	f7fe ffd0 	bl	800e33c <HAL_GetTick>
 800f39c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f39e:	e004      	b.n	800f3aa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f3a0:	f7fe ffcc 	bl	800e33c <HAL_GetTick>
 800f3a4:	1b80      	subs	r0, r0, r6
 800f3a6:	2802      	cmp	r0, #2
 800f3a8:	d834      	bhi.n	800f414 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f3aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800f3ac:	079f      	lsls	r7, r3, #30
 800f3ae:	d4f7      	bmi.n	800f3a0 <HAL_RCC_OscConfig+0x1dc>
 800f3b0:	e75b      	b.n	800f26a <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f3b2:	684a      	ldr	r2, [r1, #4]
 800f3b4:	0250      	lsls	r0, r2, #9
 800f3b6:	f57f af1c 	bpl.w	800f1f2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f3ba:	4a34      	ldr	r2, [pc, #208]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
 800f3bc:	6812      	ldr	r2, [r2, #0]
 800f3be:	0391      	lsls	r1, r2, #14
 800f3c0:	f57f af3a 	bpl.w	800f238 <HAL_RCC_OscConfig+0x74>
 800f3c4:	6862      	ldr	r2, [r4, #4]
 800f3c6:	2a00      	cmp	r2, #0
 800f3c8:	f47f af36 	bne.w	800f238 <HAL_RCC_OscConfig+0x74>
 800f3cc:	e7dd      	b.n	800f38a <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f3ce:	4a2f      	ldr	r2, [pc, #188]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
 800f3d0:	6813      	ldr	r3, [r2, #0]
 800f3d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f3d8:	f7fe ffb0 	bl	800e33c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f3dc:	4d2b      	ldr	r5, [pc, #172]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800f3de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f3e0:	e004      	b.n	800f3ec <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f3e2:	f7fe ffab 	bl	800e33c <HAL_GetTick>
 800f3e6:	1b80      	subs	r0, r0, r6
 800f3e8:	2864      	cmp	r0, #100	; 0x64
 800f3ea:	d813      	bhi.n	800f414 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f3ec:	682b      	ldr	r3, [r5, #0]
 800f3ee:	039a      	lsls	r2, r3, #14
 800f3f0:	d5f7      	bpl.n	800f3e2 <HAL_RCC_OscConfig+0x21e>
 800f3f2:	e720      	b.n	800f236 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f3f4:	682a      	ldr	r2, [r5, #0]
 800f3f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f3fa:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800f3fc:	f7fe ff9e 	bl	800e33c <HAL_GetTick>
 800f400:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f402:	682b      	ldr	r3, [r5, #0]
 800f404:	05da      	lsls	r2, r3, #23
 800f406:	f53f af49 	bmi.w	800f29c <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f40a:	f7fe ff97 	bl	800e33c <HAL_GetTick>
 800f40e:	1bc0      	subs	r0, r0, r7
 800f410:	2802      	cmp	r0, #2
 800f412:	d9f6      	bls.n	800f402 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 800f414:	2003      	movs	r0, #3
}
 800f416:	b002      	add	sp, #8
 800f418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f41c:	491b      	ldr	r1, [pc, #108]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
 800f41e:	6920      	ldr	r0, [r4, #16]
 800f420:	680a      	ldr	r2, [r1, #0]
 800f422:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800f426:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800f42a:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f42c:	e706      	b.n	800f23c <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 800f42e:	2001      	movs	r0, #1
}
 800f430:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800f432:	2600      	movs	r6, #0
 800f434:	e72d      	b.n	800f292 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f436:	4a15      	ldr	r2, [pc, #84]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
 800f438:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800f43a:	f043 0301 	orr.w	r3, r3, #1
 800f43e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800f440:	f7fe ff7c 	bl	800e33c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f444:	4d11      	ldr	r5, [pc, #68]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800f446:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f448:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f44c:	e005      	b.n	800f45a <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f44e:	f7fe ff75 	bl	800e33c <HAL_GetTick>
 800f452:	eba0 0008 	sub.w	r0, r0, r8
 800f456:	42b8      	cmp	r0, r7
 800f458:	d8dc      	bhi.n	800f414 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f45a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f45c:	079b      	lsls	r3, r3, #30
 800f45e:	d5f6      	bpl.n	800f44e <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 800f460:	2e00      	cmp	r6, #0
 800f462:	f43f af41 	beq.w	800f2e8 <HAL_RCC_OscConfig+0x124>
 800f466:	e01b      	b.n	800f4a0 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 800f468:	4a0c      	ldr	r2, [pc, #48]	; (800f49c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f46a:	4d08      	ldr	r5, [pc, #32]	; (800f48c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 800f46c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f46e:	f7fe ff65 	bl	800e33c <HAL_GetTick>
 800f472:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f474:	e004      	b.n	800f480 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f476:	f7fe ff61 	bl	800e33c <HAL_GetTick>
 800f47a:	1b80      	subs	r0, r0, r6
 800f47c:	2802      	cmp	r0, #2
 800f47e:	d8c9      	bhi.n	800f414 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f480:	682b      	ldr	r3, [r5, #0]
 800f482:	0799      	lsls	r1, r3, #30
 800f484:	d4f7      	bmi.n	800f476 <HAL_RCC_OscConfig+0x2b2>
 800f486:	6823      	ldr	r3, [r4, #0]
 800f488:	e6d8      	b.n	800f23c <HAL_RCC_OscConfig+0x78>
 800f48a:	bf00      	nop
 800f48c:	40023800 	.word	0x40023800
 800f490:	42470e80 	.word	0x42470e80
 800f494:	40007000 	.word	0x40007000
 800f498:	42470060 	.word	0x42470060
 800f49c:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 800f4a0:	4a35      	ldr	r2, [pc, #212]	; (800f578 <HAL_RCC_OscConfig+0x3b4>)
 800f4a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800f4a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f4a8:	6413      	str	r3, [r2, #64]	; 0x40
 800f4aa:	e71d      	b.n	800f2e8 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f4ac:	2801      	cmp	r0, #1
 800f4ae:	f43f af6d 	beq.w	800f38c <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 800f4b2:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f4b4:	69e2      	ldr	r2, [r4, #28]
 800f4b6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800f4ba:	4291      	cmp	r1, r2
 800f4bc:	f47f af65 	bne.w	800f38a <HAL_RCC_OscConfig+0x1c6>
 800f4c0:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f4c2:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f4c6:	4291      	cmp	r1, r2
 800f4c8:	f47f af5f 	bne.w	800f38a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f4cc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f4d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f4d2:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f4d4:	428a      	cmp	r2, r1
 800f4d6:	f47f af58 	bne.w	800f38a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f4da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f4dc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f4e0:	4291      	cmp	r1, r2
 800f4e2:	f47f af52 	bne.w	800f38a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f4e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800f4e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 800f4ec:	1a18      	subs	r0, r3, r0
 800f4ee:	bf18      	it	ne
 800f4f0:	2001      	movne	r0, #1
 800f4f2:	e74b      	b.n	800f38c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f4f4:	4b20      	ldr	r3, [pc, #128]	; (800f578 <HAL_RCC_OscConfig+0x3b4>)
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f4fc:	601a      	str	r2, [r3, #0]
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f504:	601a      	str	r2, [r3, #0]
 800f506:	e767      	b.n	800f3d8 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f508:	4b1b      	ldr	r3, [pc, #108]	; (800f578 <HAL_RCC_OscConfig+0x3b4>)
 800f50a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f50c:	f042 0204 	orr.w	r2, r2, #4
 800f510:	671a      	str	r2, [r3, #112]	; 0x70
 800f512:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f514:	f042 0201 	orr.w	r2, r2, #1
 800f518:	671a      	str	r2, [r3, #112]	; 0x70
 800f51a:	e791      	b.n	800f440 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 800f51c:	f7fe ff0e 	bl	800e33c <HAL_GetTick>
 800f520:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f522:	e005      	b.n	800f530 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f524:	f7fe ff0a 	bl	800e33c <HAL_GetTick>
 800f528:	1b80      	subs	r0, r0, r6
 800f52a:	2802      	cmp	r0, #2
 800f52c:	f63f af72 	bhi.w	800f414 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f530:	682b      	ldr	r3, [r5, #0]
 800f532:	0199      	lsls	r1, r3, #6
 800f534:	d4f6      	bmi.n	800f524 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f536:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 800f53a:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800f53e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f540:	4c0d      	ldr	r4, [pc, #52]	; (800f578 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f542:	4333      	orrs	r3, r6
 800f544:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800f548:	0852      	lsrs	r2, r2, #1
 800f54a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800f54e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800f550:	490a      	ldr	r1, [pc, #40]	; (800f57c <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800f556:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f558:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800f55a:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 800f55c:	f7fe feee 	bl	800e33c <HAL_GetTick>
 800f560:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f562:	e005      	b.n	800f570 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f564:	f7fe feea 	bl	800e33c <HAL_GetTick>
 800f568:	1b40      	subs	r0, r0, r5
 800f56a:	2802      	cmp	r0, #2
 800f56c:	f63f af52 	bhi.w	800f414 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f570:	6823      	ldr	r3, [r4, #0]
 800f572:	019a      	lsls	r2, r3, #6
 800f574:	d5f6      	bpl.n	800f564 <HAL_RCC_OscConfig+0x3a0>
 800f576:	e6d3      	b.n	800f320 <HAL_RCC_OscConfig+0x15c>
 800f578:	40023800 	.word	0x40023800
 800f57c:	42470060 	.word	0x42470060

0800f580 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f580:	4917      	ldr	r1, [pc, #92]	; (800f5e0 <HAL_RCC_GetSysClockFreq+0x60>)
{
 800f582:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f584:	688b      	ldr	r3, [r1, #8]
 800f586:	f003 030c 	and.w	r3, r3, #12
 800f58a:	2b04      	cmp	r3, #4
 800f58c:	d01b      	beq.n	800f5c6 <HAL_RCC_GetSysClockFreq+0x46>
 800f58e:	2b08      	cmp	r3, #8
 800f590:	d117      	bne.n	800f5c2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f592:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f594:	684b      	ldr	r3, [r1, #4]
 800f596:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f59a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f59e:	d114      	bne.n	800f5ca <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f5a0:	6849      	ldr	r1, [r1, #4]
 800f5a2:	4810      	ldr	r0, [pc, #64]	; (800f5e4 <HAL_RCC_GetSysClockFreq+0x64>)
 800f5a4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800f5a8:	fba1 0100 	umull	r0, r1, r1, r0
 800f5ac:	f7f9 faa4 	bl	8008af8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f5b0:	4b0b      	ldr	r3, [pc, #44]	; (800f5e0 <HAL_RCC_GetSysClockFreq+0x60>)
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800f5bc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800f5c0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800f5c2:	4808      	ldr	r0, [pc, #32]	; (800f5e4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800f5c4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800f5c6:	4808      	ldr	r0, [pc, #32]	; (800f5e8 <HAL_RCC_GetSysClockFreq+0x68>)
}
 800f5c8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f5ca:	684b      	ldr	r3, [r1, #4]
 800f5cc:	4806      	ldr	r0, [pc, #24]	; (800f5e8 <HAL_RCC_GetSysClockFreq+0x68>)
 800f5ce:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800f5d2:	fba3 0100 	umull	r0, r1, r3, r0
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f7f9 fa8e 	bl	8008af8 <__aeabi_uldivmod>
 800f5dc:	e7e8      	b.n	800f5b0 <HAL_RCC_GetSysClockFreq+0x30>
 800f5de:	bf00      	nop
 800f5e0:	40023800 	.word	0x40023800
 800f5e4:	00f42400 	.word	0x00f42400
 800f5e8:	007a1200 	.word	0x007a1200

0800f5ec <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800f5ec:	b160      	cbz	r0, 800f608 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f5ee:	4a49      	ldr	r2, [pc, #292]	; (800f714 <HAL_RCC_ClockConfig+0x128>)
 800f5f0:	6813      	ldr	r3, [r2, #0]
 800f5f2:	f003 030f 	and.w	r3, r3, #15
 800f5f6:	428b      	cmp	r3, r1
 800f5f8:	d208      	bcs.n	800f60c <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f5fa:	b2cb      	uxtb	r3, r1
 800f5fc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f5fe:	6813      	ldr	r3, [r2, #0]
 800f600:	f003 030f 	and.w	r3, r3, #15
 800f604:	428b      	cmp	r3, r1
 800f606:	d001      	beq.n	800f60c <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 800f608:	2001      	movs	r0, #1
}
 800f60a:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f60c:	6803      	ldr	r3, [r0, #0]
{
 800f60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f612:	079d      	lsls	r5, r3, #30
 800f614:	d514      	bpl.n	800f640 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f616:	075c      	lsls	r4, r3, #29
 800f618:	d504      	bpl.n	800f624 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f61a:	4c3f      	ldr	r4, [pc, #252]	; (800f718 <HAL_RCC_ClockConfig+0x12c>)
 800f61c:	68a2      	ldr	r2, [r4, #8]
 800f61e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800f622:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f624:	071a      	lsls	r2, r3, #28
 800f626:	d504      	bpl.n	800f632 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f628:	4c3b      	ldr	r4, [pc, #236]	; (800f718 <HAL_RCC_ClockConfig+0x12c>)
 800f62a:	68a2      	ldr	r2, [r4, #8]
 800f62c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800f630:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f632:	4c39      	ldr	r4, [pc, #228]	; (800f718 <HAL_RCC_ClockConfig+0x12c>)
 800f634:	6885      	ldr	r5, [r0, #8]
 800f636:	68a2      	ldr	r2, [r4, #8]
 800f638:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800f63c:	432a      	orrs	r2, r5
 800f63e:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f640:	07df      	lsls	r7, r3, #31
 800f642:	4604      	mov	r4, r0
 800f644:	460d      	mov	r5, r1
 800f646:	d522      	bpl.n	800f68e <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f648:	6842      	ldr	r2, [r0, #4]
 800f64a:	2a01      	cmp	r2, #1
 800f64c:	d057      	beq.n	800f6fe <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f64e:	1e93      	subs	r3, r2, #2
 800f650:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f652:	4b31      	ldr	r3, [pc, #196]	; (800f718 <HAL_RCC_ClockConfig+0x12c>)
 800f654:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f656:	d959      	bls.n	800f70c <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f658:	0799      	lsls	r1, r3, #30
 800f65a:	d525      	bpl.n	800f6a8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f65c:	4e2e      	ldr	r6, [pc, #184]	; (800f718 <HAL_RCC_ClockConfig+0x12c>)
 800f65e:	68b3      	ldr	r3, [r6, #8]
 800f660:	f023 0303 	bic.w	r3, r3, #3
 800f664:	4313      	orrs	r3, r2
 800f666:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800f668:	f7fe fe68 	bl	800e33c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f66c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800f670:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f672:	e005      	b.n	800f680 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f674:	f7fe fe62 	bl	800e33c <HAL_GetTick>
 800f678:	eba0 0008 	sub.w	r0, r0, r8
 800f67c:	42b8      	cmp	r0, r7
 800f67e:	d843      	bhi.n	800f708 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f680:	68b3      	ldr	r3, [r6, #8]
 800f682:	6862      	ldr	r2, [r4, #4]
 800f684:	f003 030c 	and.w	r3, r3, #12
 800f688:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800f68c:	d1f2      	bne.n	800f674 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f68e:	4a21      	ldr	r2, [pc, #132]	; (800f714 <HAL_RCC_ClockConfig+0x128>)
 800f690:	6813      	ldr	r3, [r2, #0]
 800f692:	f003 030f 	and.w	r3, r3, #15
 800f696:	42ab      	cmp	r3, r5
 800f698:	d909      	bls.n	800f6ae <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f69a:	b2eb      	uxtb	r3, r5
 800f69c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f69e:	6813      	ldr	r3, [r2, #0]
 800f6a0:	f003 030f 	and.w	r3, r3, #15
 800f6a4:	42ab      	cmp	r3, r5
 800f6a6:	d002      	beq.n	800f6ae <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 800f6a8:	2001      	movs	r0, #1
}
 800f6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f6ae:	6823      	ldr	r3, [r4, #0]
 800f6b0:	075a      	lsls	r2, r3, #29
 800f6b2:	d506      	bpl.n	800f6c2 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f6b4:	4918      	ldr	r1, [pc, #96]	; (800f718 <HAL_RCC_ClockConfig+0x12c>)
 800f6b6:	68e0      	ldr	r0, [r4, #12]
 800f6b8:	688a      	ldr	r2, [r1, #8]
 800f6ba:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800f6be:	4302      	orrs	r2, r0
 800f6c0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f6c2:	071b      	lsls	r3, r3, #28
 800f6c4:	d412      	bmi.n	800f6ec <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f6c6:	f7ff ff5b 	bl	800f580 <HAL_RCC_GetSysClockFreq>
 800f6ca:	4b13      	ldr	r3, [pc, #76]	; (800f718 <HAL_RCC_ClockConfig+0x12c>)
 800f6cc:	4c13      	ldr	r4, [pc, #76]	; (800f71c <HAL_RCC_ClockConfig+0x130>)
 800f6ce:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 800f6d0:	4913      	ldr	r1, [pc, #76]	; (800f720 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f6d2:	4a14      	ldr	r2, [pc, #80]	; (800f724 <HAL_RCC_ClockConfig+0x138>)
 800f6d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f6d8:	5ce3      	ldrb	r3, [r4, r3]
 800f6da:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 800f6de:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f6e0:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800f6e2:	f7fe fde1 	bl	800e2a8 <HAL_InitTick>
  return HAL_OK;
 800f6e6:	2000      	movs	r0, #0
}
 800f6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f6ec:	4a0a      	ldr	r2, [pc, #40]	; (800f718 <HAL_RCC_ClockConfig+0x12c>)
 800f6ee:	6921      	ldr	r1, [r4, #16]
 800f6f0:	6893      	ldr	r3, [r2, #8]
 800f6f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800f6f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800f6fa:	6093      	str	r3, [r2, #8]
 800f6fc:	e7e3      	b.n	800f6c6 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f6fe:	4b06      	ldr	r3, [pc, #24]	; (800f718 <HAL_RCC_ClockConfig+0x12c>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	039e      	lsls	r6, r3, #14
 800f704:	d4aa      	bmi.n	800f65c <HAL_RCC_ClockConfig+0x70>
 800f706:	e7cf      	b.n	800f6a8 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 800f708:	2003      	movs	r0, #3
 800f70a:	e7ed      	b.n	800f6e8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f70c:	0198      	lsls	r0, r3, #6
 800f70e:	d4a5      	bmi.n	800f65c <HAL_RCC_ClockConfig+0x70>
 800f710:	e7ca      	b.n	800f6a8 <HAL_RCC_ClockConfig+0xbc>
 800f712:	bf00      	nop
 800f714:	40023c00 	.word	0x40023c00
 800f718:	40023800 	.word	0x40023800
 800f71c:	080165a0 	.word	0x080165a0
 800f720:	20000034 	.word	0x20000034
 800f724:	20000024 	.word	0x20000024

0800f728 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f728:	4b04      	ldr	r3, [pc, #16]	; (800f73c <HAL_RCC_GetPCLK1Freq+0x14>)
 800f72a:	4a05      	ldr	r2, [pc, #20]	; (800f740 <HAL_RCC_GetPCLK1Freq+0x18>)
 800f72c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800f72e:	4905      	ldr	r1, [pc, #20]	; (800f744 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f730:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800f734:	6808      	ldr	r0, [r1, #0]
 800f736:	5cd3      	ldrb	r3, [r2, r3]
}
 800f738:	40d8      	lsrs	r0, r3
 800f73a:	4770      	bx	lr
 800f73c:	40023800 	.word	0x40023800
 800f740:	080165b0 	.word	0x080165b0
 800f744:	20000024 	.word	0x20000024

0800f748 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f748:	4b04      	ldr	r3, [pc, #16]	; (800f75c <HAL_RCC_GetPCLK2Freq+0x14>)
 800f74a:	4a05      	ldr	r2, [pc, #20]	; (800f760 <HAL_RCC_GetPCLK2Freq+0x18>)
 800f74c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800f74e:	4905      	ldr	r1, [pc, #20]	; (800f764 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f750:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800f754:	6808      	ldr	r0, [r1, #0]
 800f756:	5cd3      	ldrb	r3, [r2, r3]
}
 800f758:	40d8      	lsrs	r0, r3
 800f75a:	4770      	bx	lr
 800f75c:	40023800 	.word	0x40023800
 800f760:	080165b0 	.word	0x080165b0
 800f764:	20000024 	.word	0x20000024

0800f768 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800f768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f76c:	4607      	mov	r7, r0
 800f76e:	460d      	mov	r5, r1
 800f770:	4616      	mov	r6, r2
 800f772:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f774:	683c      	ldr	r4, [r7, #0]
 800f776:	e001      	b.n	800f77c <SPI_WaitFlagStateUntilTimeout.constprop.7+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f778:	1c73      	adds	r3, r6, #1
 800f77a:	d106      	bne.n	800f78a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f77c:	68a0      	ldr	r0, [r4, #8]
 800f77e:	ea35 0300 	bics.w	r3, r5, r0
 800f782:	d0f9      	beq.n	800f778 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800f784:	2000      	movs	r0, #0
}
 800f786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f78a:	f7fe fdd7 	bl	800e33c <HAL_GetTick>
 800f78e:	eba0 0008 	sub.w	r0, r0, r8
 800f792:	4286      	cmp	r6, r0
 800f794:	d8ee      	bhi.n	800f774 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f796:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f79a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f79c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f7a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f7a4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7a6:	d014      	beq.n	800f7d2 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f7a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f7ae:	d007      	beq.n	800f7c0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x58>
        hspi->State = HAL_SPI_STATE_READY;
 800f7b0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800f7b2:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800f7b4:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800f7b8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800f7bc:	2003      	movs	r0, #3
 800f7be:	e7e2      	b.n	800f786 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x1e>
          SPI_RESET_CRC(hspi);
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f7c6:	601a      	str	r2, [r3, #0]
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f7ce:	601a      	str	r2, [r3, #0]
 800f7d0:	e7ee      	b.n	800f7b0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7d2:	68ba      	ldr	r2, [r7, #8]
 800f7d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f7d8:	d002      	beq.n	800f7e0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f7da:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f7de:	d1e3      	bne.n	800f7a8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
          __HAL_SPI_DISABLE(hspi);
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7e6:	601a      	str	r2, [r3, #0]
 800f7e8:	e7de      	b.n	800f7a8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
 800f7ea:	bf00      	nop

0800f7ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f7ec:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7ee:	6845      	ldr	r5, [r0, #4]
 800f7f0:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 800f7f4:	4604      	mov	r4, r0
 800f7f6:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7f8:	d006      	beq.n	800f808 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f7fa:	460a      	mov	r2, r1
 800f7fc:	2101      	movs	r1, #1
 800f7fe:	f7ff ffb3 	bl	800f768 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800f802:	b998      	cbnz	r0, 800f82c <SPI_EndRxTransaction+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800f804:	2000      	movs	r0, #0
}
 800f806:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f808:	6882      	ldr	r2, [r0, #8]
 800f80a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f80e:	d013      	beq.n	800f838 <SPI_EndRxTransaction+0x4c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f810:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800f814:	d115      	bne.n	800f842 <SPI_EndRxTransaction+0x56>
    __HAL_SPI_DISABLE(hspi);
 800f816:	6806      	ldr	r6, [r0, #0]
 800f818:	6835      	ldr	r5, [r6, #0]
 800f81a:	f025 0540 	bic.w	r5, r5, #64	; 0x40
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f81e:	460a      	mov	r2, r1
    __HAL_SPI_DISABLE(hspi);
 800f820:	6035      	str	r5, [r6, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f822:	2101      	movs	r1, #1
 800f824:	f7ff ffa0 	bl	800f768 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800f828:	2800      	cmp	r0, #0
 800f82a:	d0eb      	beq.n	800f804 <SPI_EndRxTransaction+0x18>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f82c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f82e:	f043 0320 	orr.w	r3, r3, #32
 800f832:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800f834:	2003      	movs	r0, #3
}
 800f836:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPI_DISABLE(hspi);
 800f838:	6800      	ldr	r0, [r0, #0]
 800f83a:	6802      	ldr	r2, [r0, #0]
 800f83c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f840:	6002      	str	r2, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f842:	460a      	mov	r2, r1
 800f844:	4620      	mov	r0, r4
 800f846:	2180      	movs	r1, #128	; 0x80
 800f848:	f7ff ff8e 	bl	800f768 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800f84c:	2800      	cmp	r0, #0
 800f84e:	d1ed      	bne.n	800f82c <SPI_EndRxTransaction+0x40>
  return HAL_OK;
 800f850:	2000      	movs	r0, #0
 800f852:	e7d8      	b.n	800f806 <SPI_EndRxTransaction+0x1a>

0800f854 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f854:	4b16      	ldr	r3, [pc, #88]	; (800f8b0 <SPI_EndRxTxTransaction+0x5c>)
{
 800f856:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4d16      	ldr	r5, [pc, #88]	; (800f8b4 <SPI_EndRxTxTransaction+0x60>)
 800f85c:	fba5 5303 	umull	r5, r3, r5, r3
 800f860:	0d5b      	lsrs	r3, r3, #21
 800f862:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800f866:	fb05 f303 	mul.w	r3, r5, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f86a:	6845      	ldr	r5, [r0, #4]
{
 800f86c:	b083      	sub	sp, #12
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f86e:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 800f872:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f874:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f876:	d107      	bne.n	800f888 <SPI_EndRxTxTransaction+0x34>
 800f878:	e00c      	b.n	800f894 <SPI_EndRxTxTransaction+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800f87a:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f87c:	6822      	ldr	r2, [r4, #0]
      count--;
 800f87e:	3b01      	subs	r3, #1
 800f880:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f882:	6893      	ldr	r3, [r2, #8]
 800f884:	061b      	lsls	r3, r3, #24
 800f886:	d502      	bpl.n	800f88e <SPI_EndRxTxTransaction+0x3a>
      if (count == 0U)
 800f888:	9b01      	ldr	r3, [sp, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d1f5      	bne.n	800f87a <SPI_EndRxTxTransaction+0x26>
  }

  return HAL_OK;
 800f88e:	2000      	movs	r0, #0
}
 800f890:	b003      	add	sp, #12
 800f892:	bd30      	pop	{r4, r5, pc}
 800f894:	4613      	mov	r3, r2
 800f896:	460a      	mov	r2, r1
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f898:	2180      	movs	r1, #128	; 0x80
 800f89a:	f7ff ff65 	bl	800f768 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	d0f5      	beq.n	800f88e <SPI_EndRxTxTransaction+0x3a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f8a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f8a4:	f043 0320 	orr.w	r3, r3, #32
 800f8a8:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800f8aa:	2003      	movs	r0, #3
 800f8ac:	e7f0      	b.n	800f890 <SPI_EndRxTxTransaction+0x3c>
 800f8ae:	bf00      	nop
 800f8b0:	20000024 	.word	0x20000024
 800f8b4:	165e9f81 	.word	0x165e9f81

0800f8b8 <HAL_SPI_TransmitReceive.part.3>:
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 800f8b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8bc:	4604      	mov	r4, r0
 800f8be:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 800f8c0:	2001      	movs	r0, #1
 800f8c2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 800f8c6:	4691      	mov	r9, r2
 800f8c8:	4698      	mov	r8, r3
 800f8ca:	460f      	mov	r7, r1
 800f8cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  tickstart = HAL_GetTick();
 800f8ce:	f7fe fd35 	bl	800e33c <HAL_GetTick>
  tmp_state           = hspi->State;
 800f8d2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800f8d6:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 800f8d8:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f8da:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800f8dc:	4606      	mov	r6, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f8de:	d011      	beq.n	800f904 <HAL_SPI_TransmitReceive.part.3+0x4c>
 800f8e0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800f8e4:	d009      	beq.n	800f8fa <HAL_SPI_TransmitReceive.part.3+0x42>
    errorcode = HAL_BUSY;
 800f8e6:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800f8e8:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800f8ea:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800f8ec:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f8f0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800f8f4:	b003      	add	sp, #12
 800f8f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f8fa:	68a1      	ldr	r1, [r4, #8]
 800f8fc:	2900      	cmp	r1, #0
 800f8fe:	d1f2      	bne.n	800f8e6 <HAL_SPI_TransmitReceive.part.3+0x2e>
 800f900:	2b04      	cmp	r3, #4
 800f902:	d1f0      	bne.n	800f8e6 <HAL_SPI_TransmitReceive.part.3+0x2e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f904:	2f00      	cmp	r7, #0
 800f906:	d064      	beq.n	800f9d2 <HAL_SPI_TransmitReceive.part.3+0x11a>
 800f908:	f1b9 0f00 	cmp.w	r9, #0
 800f90c:	d061      	beq.n	800f9d2 <HAL_SPI_TransmitReceive.part.3+0x11a>
 800f90e:	f1b8 0f00 	cmp.w	r8, #0
 800f912:	d05e      	beq.n	800f9d2 <HAL_SPI_TransmitReceive.part.3+0x11a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f914:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f918:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f91a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f91e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f920:	bf1c      	itt	ne
 800f922:	2305      	movne	r3, #5
 800f924:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f928:	2300      	movs	r3, #0
 800f92a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 800f92c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800f930:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f934:	6808      	ldr	r0, [r1, #0]
  hspi->RxXferSize  = Size;
 800f936:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f93a:	0640      	lsls	r0, r0, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f93c:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f93e:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 800f942:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f946:	d546      	bpl.n	800f9d6 <HAL_SPI_TransmitReceive.part.3+0x11e>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f948:	68e3      	ldr	r3, [r4, #12]
 800f94a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f94e:	d056      	beq.n	800f9fe <HAL_SPI_TransmitReceive.part.3+0x146>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f950:	2a00      	cmp	r2, #0
 800f952:	d145      	bne.n	800f9e0 <HAL_SPI_TransmitReceive.part.3+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f954:	783b      	ldrb	r3, [r7, #0]
 800f956:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 800f958:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f95a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800f95c:	3b01      	subs	r3, #1
 800f95e:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f960:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800f962:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f964:	6322      	str	r2, [r4, #48]	; 0x30
        txallowed = 1U;
 800f966:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f968:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	b91b      	cbnz	r3, 800f976 <HAL_SPI_TransmitReceive.part.3+0xbe>
 800f96e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800f970:	b29b      	uxth	r3, r3
 800f972:	2b00      	cmp	r3, #0
 800f974:	d038      	beq.n	800f9e8 <HAL_SPI_TransmitReceive.part.3+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f976:	6823      	ldr	r3, [r4, #0]
 800f978:	689a      	ldr	r2, [r3, #8]
 800f97a:	0791      	lsls	r1, r2, #30
 800f97c:	d50f      	bpl.n	800f99e <HAL_SPI_TransmitReceive.part.3+0xe6>
 800f97e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f980:	b292      	uxth	r2, r2
 800f982:	b162      	cbz	r2, 800f99e <HAL_SPI_TransmitReceive.part.3+0xe6>
 800f984:	b15f      	cbz	r7, 800f99e <HAL_SPI_TransmitReceive.part.3+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f986:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f988:	7812      	ldrb	r2, [r2, #0]
 800f98a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800f98c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800f98e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f990:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 800f992:	3a01      	subs	r2, #1
 800f994:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 800f996:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 800f998:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800f99a:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 800f99c:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f99e:	689a      	ldr	r2, [r3, #8]
 800f9a0:	07d2      	lsls	r2, r2, #31
 800f9a2:	d50d      	bpl.n	800f9c0 <HAL_SPI_TransmitReceive.part.3+0x108>
 800f9a4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800f9a6:	b292      	uxth	r2, r2
 800f9a8:	b152      	cbz	r2, 800f9c0 <HAL_SPI_TransmitReceive.part.3+0x108>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f9aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f9ac:	68db      	ldr	r3, [r3, #12]
 800f9ae:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800f9b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800f9b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 800f9b8:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800f9ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800f9bc:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 800f9be:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f9c0:	f7fe fcbc 	bl	800e33c <HAL_GetTick>
 800f9c4:	1b80      	subs	r0, r0, r6
 800f9c6:	4285      	cmp	r5, r0
 800f9c8:	d8ce      	bhi.n	800f968 <HAL_SPI_TransmitReceive.part.3+0xb0>
 800f9ca:	1c6b      	adds	r3, r5, #1
 800f9cc:	d0cc      	beq.n	800f968 <HAL_SPI_TransmitReceive.part.3+0xb0>
        errorcode = HAL_TIMEOUT;
 800f9ce:	2003      	movs	r0, #3
 800f9d0:	e78a      	b.n	800f8e8 <HAL_SPI_TransmitReceive.part.3+0x30>
    errorcode = HAL_ERROR;
 800f9d2:	2001      	movs	r0, #1
 800f9d4:	e788      	b.n	800f8e8 <HAL_SPI_TransmitReceive.part.3+0x30>
    __HAL_SPI_ENABLE(hspi);
 800f9d6:	680b      	ldr	r3, [r1, #0]
 800f9d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9dc:	600b      	str	r3, [r1, #0]
 800f9de:	e7b3      	b.n	800f948 <HAL_SPI_TransmitReceive.part.3+0x90>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9e0:	f1b8 0f01 	cmp.w	r8, #1
 800f9e4:	d1bf      	bne.n	800f966 <HAL_SPI_TransmitReceive.part.3+0xae>
 800f9e6:	e7b5      	b.n	800f954 <HAL_SPI_TransmitReceive.part.3+0x9c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f9e8:	4632      	mov	r2, r6
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	f7ff ff31 	bl	800f854 <SPI_EndRxTxTransaction>
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	d043      	beq.n	800fa7e <HAL_SPI_TransmitReceive.part.3+0x1c6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f9f6:	2320      	movs	r3, #32
 800f9f8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800f9fa:	2001      	movs	r0, #1
 800f9fc:	e774      	b.n	800f8e8 <HAL_SPI_TransmitReceive.part.3+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9fe:	2a00      	cmp	r2, #0
 800fa00:	d034      	beq.n	800fa6c <HAL_SPI_TransmitReceive.part.3+0x1b4>
 800fa02:	f1b8 0f01 	cmp.w	r8, #1
 800fa06:	d031      	beq.n	800fa6c <HAL_SPI_TransmitReceive.part.3+0x1b4>
        txallowed = 1U;
 800fa08:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	b91b      	cbnz	r3, 800fa18 <HAL_SPI_TransmitReceive.part.3+0x160>
 800fa10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d0e7      	beq.n	800f9e8 <HAL_SPI_TransmitReceive.part.3+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fa18:	6823      	ldr	r3, [r4, #0]
 800fa1a:	689a      	ldr	r2, [r3, #8]
 800fa1c:	0791      	lsls	r1, r2, #30
 800fa1e:	d50d      	bpl.n	800fa3c <HAL_SPI_TransmitReceive.part.3+0x184>
 800fa20:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800fa22:	b292      	uxth	r2, r2
 800fa24:	b152      	cbz	r2, 800fa3c <HAL_SPI_TransmitReceive.part.3+0x184>
 800fa26:	b14f      	cbz	r7, 800fa3c <HAL_SPI_TransmitReceive.part.3+0x184>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fa28:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fa2a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800fa2e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800fa30:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa32:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800fa34:	3a01      	subs	r2, #1
 800fa36:	b292      	uxth	r2, r2
 800fa38:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 800fa3a:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fa3c:	689a      	ldr	r2, [r3, #8]
 800fa3e:	07d2      	lsls	r2, r2, #31
 800fa40:	d50c      	bpl.n	800fa5c <HAL_SPI_TransmitReceive.part.3+0x1a4>
 800fa42:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800fa44:	b292      	uxth	r2, r2
 800fa46:	b14a      	cbz	r2, 800fa5c <HAL_SPI_TransmitReceive.part.3+0x1a4>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fa48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800fa50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fa52:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800fa54:	3b01      	subs	r3, #1
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800fa5a:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fa5c:	f7fe fc6e 	bl	800e33c <HAL_GetTick>
 800fa60:	1b80      	subs	r0, r0, r6
 800fa62:	42a8      	cmp	r0, r5
 800fa64:	d3d1      	bcc.n	800fa0a <HAL_SPI_TransmitReceive.part.3+0x152>
 800fa66:	1c68      	adds	r0, r5, #1
 800fa68:	d0cf      	beq.n	800fa0a <HAL_SPI_TransmitReceive.part.3+0x152>
 800fa6a:	e7b0      	b.n	800f9ce <HAL_SPI_TransmitReceive.part.3+0x116>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fa6c:	f837 3b02 	ldrh.w	r3, [r7], #2
 800fa70:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 800fa72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa74:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800fa76:	3b01      	subs	r3, #1
 800fa78:	b29b      	uxth	r3, r3
 800fa7a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800fa7c:	e7c4      	b.n	800fa08 <HAL_SPI_TransmitReceive.part.3+0x150>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fa7e:	68a3      	ldr	r3, [r4, #8]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	f47f af31 	bne.w	800f8e8 <HAL_SPI_TransmitReceive.part.3+0x30>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fa86:	6823      	ldr	r3, [r4, #0]
 800fa88:	9001      	str	r0, [sp, #4]
 800fa8a:	68da      	ldr	r2, [r3, #12]
 800fa8c:	9201      	str	r2, [sp, #4]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	9301      	str	r3, [sp, #4]
 800fa92:	9b01      	ldr	r3, [sp, #4]
 800fa94:	e728      	b.n	800f8e8 <HAL_SPI_TransmitReceive.part.3+0x30>
 800fa96:	bf00      	nop

0800fa98 <HAL_SPI_Init>:
  if (hspi == NULL)
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d03b      	beq.n	800fb14 <HAL_SPI_Init+0x7c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fa9c:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800faa0:	2300      	movs	r3, #0
{
 800faa2:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 800faa4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800faa8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800faaa:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800faac:	b362      	cbz	r2, 800fb08 <HAL_SPI_Init+0x70>
 800faae:	4618      	mov	r0, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fab0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fab4:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800fab8:	432b      	orrs	r3, r5
 800faba:	4313      	orrs	r3, r2
 800fabc:	6962      	ldr	r2, [r4, #20]
 800fabe:	69e5      	ldr	r5, [r4, #28]
 800fac0:	6a26      	ldr	r6, [r4, #32]
 800fac2:	430b      	orrs	r3, r1
 800fac4:	4313      	orrs	r3, r2
 800fac6:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800fac8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800faca:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 800facc:	2502      	movs	r5, #2
 800face:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fad2:	4333      	orrs	r3, r6
 800fad4:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 800fad8:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fada:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800fadc:	0c12      	lsrs	r2, r2, #16
 800fade:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fae0:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fae4:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800fae6:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 800fae8:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 800faec:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800faee:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800faf0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800faf2:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800faf4:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800faf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800fafa:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fafc:	61cb      	str	r3, [r1, #28]
  return HAL_OK;
 800fafe:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fb00:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800fb02:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 800fb06:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800fb08:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800fb0c:	f7fc fea0 	bl	800c850 <HAL_SPI_MspInit>
 800fb10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800fb12:	e7cd      	b.n	800fab0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800fb14:	2001      	movs	r0, #1
}
 800fb16:	4770      	bx	lr

0800fb18 <HAL_SPI_Transmit>:
{
 800fb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 800fb1c:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800fb20:	2c01      	cmp	r4, #1
{
 800fb22:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800fb24:	d073      	beq.n	800fc0e <HAL_SPI_Transmit+0xf6>
 800fb26:	461d      	mov	r5, r3
 800fb28:	2301      	movs	r3, #1
 800fb2a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800fb2e:	4604      	mov	r4, r0
 800fb30:	4617      	mov	r7, r2
 800fb32:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 800fb34:	f7fe fc02 	bl	800e33c <HAL_GetTick>
 800fb38:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800fb3a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800fb3e:	b2c0      	uxtb	r0, r0
 800fb40:	2801      	cmp	r0, #1
 800fb42:	d009      	beq.n	800fb58 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 800fb44:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800fb46:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800fb48:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800fb4a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800fb4e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800fb52:	b002      	add	sp, #8
 800fb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800fb58:	f1b8 0f00 	cmp.w	r8, #0
 800fb5c:	d0f3      	beq.n	800fb46 <HAL_SPI_Transmit+0x2e>
 800fb5e:	2f00      	cmp	r7, #0
 800fb60:	d0f1      	beq.n	800fb46 <HAL_SPI_Transmit+0x2e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb62:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fb64:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fb68:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fb6a:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb6c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fb70:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fb74:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fb76:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferSize  = 0U;
 800fb78:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800fb7a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800fb7e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800fb80:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 800fb82:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800fb84:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb86:	d103      	bne.n	800fb90 <HAL_SPI_Transmit+0x78>
    SPI_1LINE_TX(hspi);
 800fb88:	681a      	ldr	r2, [r3, #0]
 800fb8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fb8e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	0652      	lsls	r2, r2, #25
 800fb94:	d53f      	bpl.n	800fc16 <HAL_SPI_Transmit+0xfe>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fb96:	68e2      	ldr	r2, [r4, #12]
 800fb98:	6861      	ldr	r1, [r4, #4]
 800fb9a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800fb9e:	d04b      	beq.n	800fc38 <HAL_SPI_Transmit+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fba0:	2900      	cmp	r1, #0
 800fba2:	d13d      	bne.n	800fc20 <HAL_SPI_Transmit+0x108>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fba4:	f898 2000 	ldrb.w	r2, [r8]
 800fba8:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800fbaa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fbac:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fbb2:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800fbb4:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fbb6:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800fbb8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	b18b      	cbz	r3, 800fbe2 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fbbe:	6823      	ldr	r3, [r4, #0]
 800fbc0:	689a      	ldr	r2, [r3, #8]
 800fbc2:	0792      	lsls	r2, r2, #30
 800fbc4:	d52f      	bpl.n	800fc26 <HAL_SPI_Transmit+0x10e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fbc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fbc8:	7812      	ldrb	r2, [r2, #0]
 800fbca:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800fbcc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fbce:	6b21      	ldr	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800fbd0:	3b01      	subs	r3, #1
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800fbd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fbd8:	3101      	adds	r1, #1
    while (hspi->TxXferCount > 0U)
 800fbda:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fbdc:	6321      	str	r1, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d1ed      	bne.n	800fbbe <HAL_SPI_Transmit+0xa6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fbe2:	4632      	mov	r2, r6
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	f7ff fe34 	bl	800f854 <SPI_EndRxTxTransaction>
 800fbec:	b108      	cbz	r0, 800fbf2 <HAL_SPI_Transmit+0xda>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fbee:	2320      	movs	r3, #32
 800fbf0:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fbf2:	68a3      	ldr	r3, [r4, #8]
 800fbf4:	b933      	cbnz	r3, 800fc04 <HAL_SPI_Transmit+0xec>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fbf6:	6822      	ldr	r2, [r4, #0]
 800fbf8:	9301      	str	r3, [sp, #4]
 800fbfa:	68d3      	ldr	r3, [r2, #12]
 800fbfc:	9301      	str	r3, [sp, #4]
 800fbfe:	6893      	ldr	r3, [r2, #8]
 800fc00:	9301      	str	r3, [sp, #4]
 800fc02:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fc04:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800fc06:	3000      	adds	r0, #0
 800fc08:	bf18      	it	ne
 800fc0a:	2001      	movne	r0, #1
error:
 800fc0c:	e79b      	b.n	800fb46 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800fc0e:	2002      	movs	r0, #2
}
 800fc10:	b002      	add	sp, #8
 800fc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fc1c:	601a      	str	r2, [r3, #0]
 800fc1e:	e7ba      	b.n	800fb96 <HAL_SPI_Transmit+0x7e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fc20:	2f01      	cmp	r7, #1
 800fc22:	d1c9      	bne.n	800fbb8 <HAL_SPI_Transmit+0xa0>
 800fc24:	e7be      	b.n	800fba4 <HAL_SPI_Transmit+0x8c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc26:	f7fe fb89 	bl	800e33c <HAL_GetTick>
 800fc2a:	1b80      	subs	r0, r0, r6
 800fc2c:	42a8      	cmp	r0, r5
 800fc2e:	d3c3      	bcc.n	800fbb8 <HAL_SPI_Transmit+0xa0>
 800fc30:	1c6b      	adds	r3, r5, #1
 800fc32:	d0c1      	beq.n	800fbb8 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 800fc34:	2003      	movs	r0, #3
 800fc36:	e786      	b.n	800fb46 <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fc38:	b311      	cbz	r1, 800fc80 <HAL_SPI_Transmit+0x168>
 800fc3a:	2f01      	cmp	r7, #1
 800fc3c:	d020      	beq.n	800fc80 <HAL_SPI_Transmit+0x168>
    while (hspi->TxXferCount > 0U)
 800fc3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d0cd      	beq.n	800fbe2 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fc46:	6823      	ldr	r3, [r4, #0]
 800fc48:	689a      	ldr	r2, [r3, #8]
 800fc4a:	0790      	lsls	r0, r2, #30
 800fc4c:	d510      	bpl.n	800fc70 <HAL_SPI_Transmit+0x158>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fc4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fc50:	f832 1b02 	ldrh.w	r1, [r2], #2
 800fc54:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800fc56:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc58:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800fc5a:	3b01      	subs	r3, #1
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800fc60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d0bc      	beq.n	800fbe2 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fc68:	6823      	ldr	r3, [r4, #0]
 800fc6a:	689a      	ldr	r2, [r3, #8]
 800fc6c:	0790      	lsls	r0, r2, #30
 800fc6e:	d4ee      	bmi.n	800fc4e <HAL_SPI_Transmit+0x136>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc70:	f7fe fb64 	bl	800e33c <HAL_GetTick>
 800fc74:	1b80      	subs	r0, r0, r6
 800fc76:	42a8      	cmp	r0, r5
 800fc78:	d3e1      	bcc.n	800fc3e <HAL_SPI_Transmit+0x126>
 800fc7a:	1c69      	adds	r1, r5, #1
 800fc7c:	d0df      	beq.n	800fc3e <HAL_SPI_Transmit+0x126>
 800fc7e:	e7d9      	b.n	800fc34 <HAL_SPI_Transmit+0x11c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fc80:	4641      	mov	r1, r8
 800fc82:	f831 2b02 	ldrh.w	r2, [r1], #2
 800fc86:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800fc88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc8a:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800fc8c:	3b01      	subs	r3, #1
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	86e3      	strh	r3, [r4, #54]	; 0x36
 800fc92:	e7d4      	b.n	800fc3e <HAL_SPI_Transmit+0x126>

0800fc94 <HAL_SPI_Receive>:
{
 800fc94:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 800fc98:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fc9a:	6842      	ldr	r2, [r0, #4]
 800fc9c:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
 800fca0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800fca4:	b082      	sub	sp, #8
 800fca6:	4604      	mov	r4, r0
 800fca8:	461f      	mov	r7, r3
 800fcaa:	4689      	mov	r9, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fcac:	d016      	beq.n	800fcdc <HAL_SPI_Receive+0x48>
  __HAL_LOCK(hspi);
 800fcae:	2d01      	cmp	r5, #1
 800fcb0:	d024      	beq.n	800fcfc <HAL_SPI_Receive+0x68>
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800fcb8:	f7fe fb40 	bl	800e33c <HAL_GetTick>
 800fcbc:	4605      	mov	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800fcbe:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800fcc2:	b2c0      	uxtb	r0, r0
 800fcc4:	2801      	cmp	r0, #1
 800fcc6:	d01d      	beq.n	800fd04 <HAL_SPI_Receive+0x70>
    errorcode = HAL_BUSY;
 800fcc8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800fcca:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800fccc:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800fcce:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800fcd2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800fcd6:	b002      	add	sp, #8
 800fcd8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fcdc:	6883      	ldr	r3, [r0, #8]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d1e5      	bne.n	800fcae <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800fce2:	2304      	movs	r3, #4
  __HAL_LOCK(hspi);
 800fce4:	2d01      	cmp	r5, #1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800fce6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_LOCK(hspi);
 800fcea:	d007      	beq.n	800fcfc <HAL_SPI_Receive+0x68>
 800fcec:	9700      	str	r7, [sp, #0]
 800fcee:	4633      	mov	r3, r6
 800fcf0:	460a      	mov	r2, r1
 800fcf2:	f7ff fde1 	bl	800f8b8 <HAL_SPI_TransmitReceive.part.3>
}
 800fcf6:	b002      	add	sp, #8
 800fcf8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  __HAL_LOCK(hspi);
 800fcfc:	2002      	movs	r0, #2
}
 800fcfe:	b002      	add	sp, #8
 800fd00:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 800fd04:	f1b9 0f00 	cmp.w	r9, #0
 800fd08:	d0df      	beq.n	800fcca <HAL_SPI_Receive+0x36>
 800fd0a:	2e00      	cmp	r6, #0
 800fd0c:	d0dd      	beq.n	800fcca <HAL_SPI_Receive+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd0e:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fd10:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fd14:	2304      	movs	r3, #4
 800fd16:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd1a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fd1e:	f04f 0300 	mov.w	r3, #0
 800fd22:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800fd24:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800fd26:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 800fd28:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800fd2c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800fd2e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800fd30:	86e3      	strh	r3, [r4, #54]	; 0x36
 800fd32:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd34:	d050      	beq.n	800fdd8 <HAL_SPI_Receive+0x144>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	0656      	lsls	r6, r2, #25
 800fd3a:	d403      	bmi.n	800fd44 <HAL_SPI_Receive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd42:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800fd44:	68e3      	ldr	r3, [r4, #12]
 800fd46:	bb43      	cbnz	r3, 800fd9a <HAL_SPI_Receive+0x106>
    while (hspi->RxXferCount > 0U)
 800fd48:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800fd4a:	b289      	uxth	r1, r1
 800fd4c:	b189      	cbz	r1, 800fd72 <HAL_SPI_Receive+0xde>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800fd4e:	6823      	ldr	r3, [r4, #0]
 800fd50:	689a      	ldr	r2, [r3, #8]
 800fd52:	07d0      	lsls	r0, r2, #31
 800fd54:	d537      	bpl.n	800fdc6 <HAL_SPI_Receive+0x132>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800fd56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fd58:	7b1b      	ldrb	r3, [r3, #12]
 800fd5a:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800fd5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fd5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800fd60:	3b01      	subs	r3, #1
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800fd66:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fd68:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 800fd6a:	b289      	uxth	r1, r1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fd6c:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 800fd6e:	2900      	cmp	r1, #0
 800fd70:	d1ed      	bne.n	800fd4e <HAL_SPI_Receive+0xba>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fd72:	462a      	mov	r2, r5
 800fd74:	4639      	mov	r1, r7
 800fd76:	4620      	mov	r0, r4
 800fd78:	f7ff fd38 	bl	800f7ec <SPI_EndRxTransaction>
 800fd7c:	b108      	cbz	r0, 800fd82 <HAL_SPI_Receive+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fd7e:	2320      	movs	r3, #32
 800fd80:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fd82:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800fd84:	3000      	adds	r0, #0
 800fd86:	bf18      	it	ne
 800fd88:	2001      	movne	r0, #1
error :
 800fd8a:	e79e      	b.n	800fcca <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd8c:	f7fe fad6 	bl	800e33c <HAL_GetTick>
 800fd90:	1b40      	subs	r0, r0, r5
 800fd92:	42b8      	cmp	r0, r7
 800fd94:	d301      	bcc.n	800fd9a <HAL_SPI_Receive+0x106>
 800fd96:	1c7b      	adds	r3, r7, #1
 800fd98:	d11c      	bne.n	800fdd4 <HAL_SPI_Receive+0x140>
    while (hspi->RxXferCount > 0U)
 800fd9a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800fd9c:	b289      	uxth	r1, r1
 800fd9e:	2900      	cmp	r1, #0
 800fda0:	d0e7      	beq.n	800fd72 <HAL_SPI_Receive+0xde>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800fda2:	6823      	ldr	r3, [r4, #0]
 800fda4:	689a      	ldr	r2, [r3, #8]
 800fda6:	07d2      	lsls	r2, r2, #31
 800fda8:	d5f0      	bpl.n	800fd8c <HAL_SPI_Receive+0xf8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fdaa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fdac:	68db      	ldr	r3, [r3, #12]
 800fdae:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800fdb2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fdb4:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800fdbc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800fdbe:	b289      	uxth	r1, r1
 800fdc0:	2900      	cmp	r1, #0
 800fdc2:	d1ee      	bne.n	800fda2 <HAL_SPI_Receive+0x10e>
 800fdc4:	e7d5      	b.n	800fd72 <HAL_SPI_Receive+0xde>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fdc6:	f7fe fab9 	bl	800e33c <HAL_GetTick>
 800fdca:	1b40      	subs	r0, r0, r5
 800fdcc:	42b8      	cmp	r0, r7
 800fdce:	d3bb      	bcc.n	800fd48 <HAL_SPI_Receive+0xb4>
 800fdd0:	1c79      	adds	r1, r7, #1
 800fdd2:	d0b9      	beq.n	800fd48 <HAL_SPI_Receive+0xb4>
          errorcode = HAL_TIMEOUT;
 800fdd4:	2003      	movs	r0, #3
 800fdd6:	e778      	b.n	800fcca <HAL_SPI_Receive+0x36>
    SPI_1LINE_RX(hspi);
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fdde:	601a      	str	r2, [r3, #0]
 800fde0:	e7a9      	b.n	800fd36 <HAL_SPI_Receive+0xa2>
 800fde2:	bf00      	nop

0800fde4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fde4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fde6:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fde8:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800fdea:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fdec:	4d14      	ldr	r5, [pc, #80]	; (800fe40 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fdee:	f024 0401 	bic.w	r4, r4, #1
 800fdf2:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800fdf4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800fdf6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800fdf8:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800fdfa:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fdfe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fe02:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 800fe04:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 800fe08:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fe0c:	d00a      	beq.n	800fe24 <TIM_OC1_SetConfig+0x40>
 800fe0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fe12:	42a8      	cmp	r0, r5
 800fe14:	d006      	beq.n	800fe24 <TIM_OC1_SetConfig+0x40>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fe16:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800fe18:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800fe1a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800fe1c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 800fe1e:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800fe20:	6203      	str	r3, [r0, #32]
}
 800fe22:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800fe24:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800fe26:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800fe2a:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800fe2c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fe30:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800fe34:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800fe36:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800fe3a:	432c      	orrs	r4, r5
 800fe3c:	e7eb      	b.n	800fe16 <TIM_OC1_SetConfig+0x32>
 800fe3e:	bf00      	nop
 800fe40:	40010000 	.word	0x40010000

0800fe44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fe44:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fe46:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fe48:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800fe4a:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fe4c:	4d15      	ldr	r5, [pc, #84]	; (800fea4 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fe4e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800fe52:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800fe54:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800fe56:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800fe58:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800fe5a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fe5e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fe62:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fe64:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800fe68:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fe6c:	d00a      	beq.n	800fe84 <TIM_OC3_SetConfig+0x40>
 800fe6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fe72:	42a8      	cmp	r0, r5
 800fe74:	d006      	beq.n	800fe84 <TIM_OC3_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fe76:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800fe78:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800fe7a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800fe7c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 800fe7e:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800fe80:	6203      	str	r3, [r0, #32]
}
 800fe82:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fe84:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800fe86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fe8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fe8e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fe92:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fe96:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800fe98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fe9c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800fea0:	e7e9      	b.n	800fe76 <TIM_OC3_SetConfig+0x32>
 800fea2:	bf00      	nop
 800fea4:	40010000 	.word	0x40010000

0800fea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fea8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800feaa:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800feac:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800feae:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800feb0:	4d10      	ldr	r5, [pc, #64]	; (800fef4 <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800feb2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800feb6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800feb8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800feba:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800febc:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800febe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fec2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fec6:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fec8:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fecc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fed0:	d00a      	beq.n	800fee8 <TIM_OC4_SetConfig+0x40>
 800fed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fed6:	42a8      	cmp	r0, r5
 800fed8:	d006      	beq.n	800fee8 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800feda:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800fedc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800fede:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800fee0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 800fee2:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800fee4:	6203      	str	r3, [r0, #32]
}
 800fee6:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fee8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800feea:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800feee:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800fef2:	e7f2      	b.n	800feda <TIM_OC4_SetConfig+0x32>
 800fef4:	40010000 	.word	0x40010000

0800fef8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fef8:	6803      	ldr	r3, [r0, #0]
 800fefa:	68da      	ldr	r2, [r3, #12]
 800fefc:	f042 0201 	orr.w	r2, r2, #1
 800ff00:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ff02:	689a      	ldr	r2, [r3, #8]
 800ff04:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff08:	2a06      	cmp	r2, #6
 800ff0a:	d003      	beq.n	800ff14 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	f042 0201 	orr.w	r2, r2, #1
 800ff12:	601a      	str	r2, [r3, #0]
}
 800ff14:	2000      	movs	r0, #0
 800ff16:	4770      	bx	lr

0800ff18 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ff18:	6803      	ldr	r3, [r0, #0]
 800ff1a:	68da      	ldr	r2, [r3, #12]
 800ff1c:	f022 0201 	bic.w	r2, r2, #1
 800ff20:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800ff22:	6a19      	ldr	r1, [r3, #32]
 800ff24:	f241 1211 	movw	r2, #4369	; 0x1111
 800ff28:	4211      	tst	r1, r2
 800ff2a:	d108      	bne.n	800ff3e <HAL_TIM_Base_Stop_IT+0x26>
 800ff2c:	6a19      	ldr	r1, [r3, #32]
 800ff2e:	f240 4244 	movw	r2, #1092	; 0x444
 800ff32:	4211      	tst	r1, r2
 800ff34:	d103      	bne.n	800ff3e <HAL_TIM_Base_Stop_IT+0x26>
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	f022 0201 	bic.w	r2, r2, #1
 800ff3c:	601a      	str	r2, [r3, #0]
}
 800ff3e:	2000      	movs	r0, #0
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop

0800ff44 <HAL_TIM_OC_MspInit>:
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop

0800ff48 <HAL_TIM_OC_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ff48:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff4a:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff4c:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff4e:	f001 011f 	and.w	r1, r1, #31
 800ff52:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800ff56:	ea20 0001 	bic.w	r0, r0, r1
{
 800ff5a:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 800ff5c:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff5e:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff60:	4c0c      	ldr	r4, [pc, #48]	; (800ff94 <HAL_TIM_OC_Start+0x4c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff62:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff64:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff66:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff68:	d00f      	beq.n	800ff8a <HAL_TIM_OC_Start+0x42>
 800ff6a:	4a0b      	ldr	r2, [pc, #44]	; (800ff98 <HAL_TIM_OC_Start+0x50>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d00c      	beq.n	800ff8a <HAL_TIM_OC_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ff70:	689a      	ldr	r2, [r3, #8]
 800ff72:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff76:	2a06      	cmp	r2, #6
 800ff78:	d003      	beq.n	800ff82 <HAL_TIM_OC_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	f042 0201 	orr.w	r2, r2, #1
 800ff80:	601a      	str	r2, [r3, #0]
}
 800ff82:	2000      	movs	r0, #0
 800ff84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff88:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 800ff8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ff90:	645a      	str	r2, [r3, #68]	; 0x44
 800ff92:	e7ed      	b.n	800ff70 <HAL_TIM_OC_Start+0x28>
 800ff94:	40010000 	.word	0x40010000
 800ff98:	40010400 	.word	0x40010400

0800ff9c <HAL_TIM_OC_Start_IT>:
{
 800ff9c:	b410      	push	{r4}
 800ff9e:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 800ffa0:	290c      	cmp	r1, #12
 800ffa2:	d80c      	bhi.n	800ffbe <HAL_TIM_OC_Start_IT+0x22>
 800ffa4:	e8df f001 	tbb	[pc, r1]
 800ffa8:	0b0b0b07 	.word	0x0b0b0b07
 800ffac:	0b0b0b39 	.word	0x0b0b0b39
 800ffb0:	0b0b0b34 	.word	0x0b0b0b34
 800ffb4:	2f          	.byte	0x2f
 800ffb5:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ffb6:	68da      	ldr	r2, [r3, #12]
 800ffb8:	f042 0202 	orr.w	r2, r2, #2
 800ffbc:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 800ffbe:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ffc0:	4c18      	ldr	r4, [pc, #96]	; (8010024 <HAL_TIM_OC_Start_IT+0x88>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ffc2:	f001 021f 	and.w	r2, r1, #31
 800ffc6:	2101      	movs	r1, #1
 800ffc8:	4091      	lsls	r1, r2
  TIMx->CCER &= ~tmp;
 800ffca:	ea20 0001 	bic.w	r0, r0, r1
 800ffce:	6218      	str	r0, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ffd0:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ffd2:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ffd4:	ea41 0102 	orr.w	r1, r1, r2
 800ffd8:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ffda:	d00f      	beq.n	800fffc <HAL_TIM_OC_Start_IT+0x60>
 800ffdc:	4a12      	ldr	r2, [pc, #72]	; (8010028 <HAL_TIM_OC_Start_IT+0x8c>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d00c      	beq.n	800fffc <HAL_TIM_OC_Start_IT+0x60>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ffe2:	689a      	ldr	r2, [r3, #8]
 800ffe4:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ffe8:	2a06      	cmp	r2, #6
 800ffea:	d003      	beq.n	800fff4 <HAL_TIM_OC_Start_IT+0x58>
    __HAL_TIM_ENABLE(htim);
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	f042 0201 	orr.w	r2, r2, #1
 800fff2:	601a      	str	r2, [r3, #0]
}
 800fff4:	2000      	movs	r0, #0
 800fff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fffa:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 800fffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010002:	645a      	str	r2, [r3, #68]	; 0x44
 8010004:	e7ed      	b.n	800ffe2 <HAL_TIM_OC_Start_IT+0x46>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010006:	68da      	ldr	r2, [r3, #12]
 8010008:	f042 0210 	orr.w	r2, r2, #16
 801000c:	60da      	str	r2, [r3, #12]
      break;
 801000e:	e7d6      	b.n	800ffbe <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010010:	68da      	ldr	r2, [r3, #12]
 8010012:	f042 0208 	orr.w	r2, r2, #8
 8010016:	60da      	str	r2, [r3, #12]
      break;
 8010018:	e7d1      	b.n	800ffbe <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801001a:	68da      	ldr	r2, [r3, #12]
 801001c:	f042 0204 	orr.w	r2, r2, #4
 8010020:	60da      	str	r2, [r3, #12]
      break;
 8010022:	e7cc      	b.n	800ffbe <HAL_TIM_OC_Start_IT+0x22>
 8010024:	40010000 	.word	0x40010000
 8010028:	40010400 	.word	0x40010400

0801002c <HAL_TIM_OC_Stop_IT>:
{
 801002c:	b410      	push	{r4}
 801002e:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010030:	290c      	cmp	r1, #12
 8010032:	d80c      	bhi.n	801004e <HAL_TIM_OC_Stop_IT+0x22>
 8010034:	e8df f001 	tbb	[pc, r1]
 8010038:	0b0b0b07 	.word	0x0b0b0b07
 801003c:	0b0b0b47 	.word	0x0b0b0b47
 8010040:	0b0b0b42 	.word	0x0b0b0b42
 8010044:	3d          	.byte	0x3d
 8010045:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010046:	68da      	ldr	r2, [r3, #12]
 8010048:	f022 0202 	bic.w	r2, r2, #2
 801004c:	60da      	str	r2, [r3, #12]
  TIMx->CCER &= ~tmp;
 801004e:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010050:	4c1f      	ldr	r4, [pc, #124]	; (80100d0 <HAL_TIM_OC_Stop_IT+0xa4>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010052:	f001 011f 	and.w	r1, r1, #31
 8010056:	2001      	movs	r0, #1
 8010058:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &= ~tmp;
 801005c:	ea22 0101 	bic.w	r1, r2, r1
 8010060:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010062:	6a1a      	ldr	r2, [r3, #32]
 8010064:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010066:	42a3      	cmp	r3, r4
 8010068:	d014      	beq.n	8010094 <HAL_TIM_OC_Stop_IT+0x68>
 801006a:	4a1a      	ldr	r2, [pc, #104]	; (80100d4 <HAL_TIM_OC_Stop_IT+0xa8>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d011      	beq.n	8010094 <HAL_TIM_OC_Stop_IT+0x68>
  __HAL_TIM_DISABLE(htim);
 8010070:	6a19      	ldr	r1, [r3, #32]
 8010072:	f241 1211 	movw	r2, #4369	; 0x1111
 8010076:	4211      	tst	r1, r2
 8010078:	d108      	bne.n	801008c <HAL_TIM_OC_Stop_IT+0x60>
 801007a:	6a19      	ldr	r1, [r3, #32]
 801007c:	f240 4244 	movw	r2, #1092	; 0x444
 8010080:	4211      	tst	r1, r2
 8010082:	d103      	bne.n	801008c <HAL_TIM_OC_Stop_IT+0x60>
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	f022 0201 	bic.w	r2, r2, #1
 801008a:	601a      	str	r2, [r3, #0]
}
 801008c:	2000      	movs	r0, #0
 801008e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010092:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8010094:	6a19      	ldr	r1, [r3, #32]
 8010096:	f241 1211 	movw	r2, #4369	; 0x1111
 801009a:	4211      	tst	r1, r2
 801009c:	d1e8      	bne.n	8010070 <HAL_TIM_OC_Stop_IT+0x44>
 801009e:	6a19      	ldr	r1, [r3, #32]
 80100a0:	f240 4244 	movw	r2, #1092	; 0x444
 80100a4:	4211      	tst	r1, r2
 80100a6:	d1e3      	bne.n	8010070 <HAL_TIM_OC_Stop_IT+0x44>
 80100a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80100aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80100ae:	645a      	str	r2, [r3, #68]	; 0x44
 80100b0:	e7de      	b.n	8010070 <HAL_TIM_OC_Stop_IT+0x44>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80100b2:	68da      	ldr	r2, [r3, #12]
 80100b4:	f022 0210 	bic.w	r2, r2, #16
 80100b8:	60da      	str	r2, [r3, #12]
      break;
 80100ba:	e7c8      	b.n	801004e <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80100bc:	68da      	ldr	r2, [r3, #12]
 80100be:	f022 0208 	bic.w	r2, r2, #8
 80100c2:	60da      	str	r2, [r3, #12]
      break;
 80100c4:	e7c3      	b.n	801004e <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80100c6:	68da      	ldr	r2, [r3, #12]
 80100c8:	f022 0204 	bic.w	r2, r2, #4
 80100cc:	60da      	str	r2, [r3, #12]
      break;
 80100ce:	e7be      	b.n	801004e <HAL_TIM_OC_Stop_IT+0x22>
 80100d0:	40010000 	.word	0x40010000
 80100d4:	40010400 	.word	0x40010400

080100d8 <HAL_TIM_PWM_MspInit>:
 80100d8:	4770      	bx	lr
 80100da:	bf00      	nop

080100dc <HAL_TIM_PWM_Start>:
 80100dc:	f7ff bf34 	b.w	800ff48 <HAL_TIM_OC_Start>

080100e0 <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80100e0:	6803      	ldr	r3, [r0, #0]
{
 80100e2:	b430      	push	{r4, r5}
  TIMx->CCER &= ~tmp;
 80100e4:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80100e6:	4c19      	ldr	r4, [pc, #100]	; (801014c <HAL_TIM_PWM_Stop+0x6c>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80100e8:	f001 051f 	and.w	r5, r1, #31
 80100ec:	2101      	movs	r1, #1
 80100ee:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 80100f0:	ea22 0101 	bic.w	r1, r2, r1
 80100f4:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80100f6:	6a1a      	ldr	r2, [r3, #32]
 80100f8:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80100fa:	42a3      	cmp	r3, r4
 80100fc:	d016      	beq.n	801012c <HAL_TIM_PWM_Stop+0x4c>
 80100fe:	4a14      	ldr	r2, [pc, #80]	; (8010150 <HAL_TIM_PWM_Stop+0x70>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d013      	beq.n	801012c <HAL_TIM_PWM_Stop+0x4c>
  __HAL_TIM_DISABLE(htim);
 8010104:	6a19      	ldr	r1, [r3, #32]
 8010106:	f241 1211 	movw	r2, #4369	; 0x1111
 801010a:	4211      	tst	r1, r2
 801010c:	d108      	bne.n	8010120 <HAL_TIM_PWM_Stop+0x40>
 801010e:	6a19      	ldr	r1, [r3, #32]
 8010110:	f240 4244 	movw	r2, #1092	; 0x444
 8010114:	4211      	tst	r1, r2
 8010116:	d103      	bne.n	8010120 <HAL_TIM_PWM_Stop+0x40>
 8010118:	681a      	ldr	r2, [r3, #0]
 801011a:	f022 0201 	bic.w	r2, r2, #1
 801011e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8010120:	2301      	movs	r3, #1
 8010122:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8010126:	bc30      	pop	{r4, r5}
 8010128:	2000      	movs	r0, #0
 801012a:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 801012c:	6a19      	ldr	r1, [r3, #32]
 801012e:	f241 1211 	movw	r2, #4369	; 0x1111
 8010132:	4211      	tst	r1, r2
 8010134:	d1e6      	bne.n	8010104 <HAL_TIM_PWM_Stop+0x24>
 8010136:	6a19      	ldr	r1, [r3, #32]
 8010138:	f240 4244 	movw	r2, #1092	; 0x444
 801013c:	4211      	tst	r1, r2
 801013e:	d1e1      	bne.n	8010104 <HAL_TIM_PWM_Stop+0x24>
 8010140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010146:	645a      	str	r2, [r3, #68]	; 0x44
 8010148:	e7dc      	b.n	8010104 <HAL_TIM_PWM_Stop+0x24>
 801014a:	bf00      	nop
 801014c:	40010000 	.word	0x40010000
 8010150:	40010400 	.word	0x40010400

08010154 <HAL_TIM_Encoder_Start>:
{
 8010154:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8010156:	b1c1      	cbz	r1, 801018a <HAL_TIM_Encoder_Start+0x36>
 8010158:	2904      	cmp	r1, #4
 801015a:	d10d      	bne.n	8010178 <HAL_TIM_Encoder_Start+0x24>
  TIMx->CCER &= ~tmp;
 801015c:	6a1a      	ldr	r2, [r3, #32]
 801015e:	f022 0210 	bic.w	r2, r2, #16
 8010162:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010164:	6a1a      	ldr	r2, [r3, #32]
 8010166:	f042 0210 	orr.w	r2, r2, #16
 801016a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 801016c:	681a      	ldr	r2, [r3, #0]
 801016e:	f042 0201 	orr.w	r2, r2, #1
 8010172:	601a      	str	r2, [r3, #0]
}
 8010174:	2000      	movs	r0, #0
 8010176:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 8010178:	6a1a      	ldr	r2, [r3, #32]
 801017a:	f022 0201 	bic.w	r2, r2, #1
 801017e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010180:	6a1a      	ldr	r2, [r3, #32]
 8010182:	f042 0201 	orr.w	r2, r2, #1
 8010186:	621a      	str	r2, [r3, #32]
 8010188:	e7e8      	b.n	801015c <HAL_TIM_Encoder_Start+0x8>
  TIMx->CCER &= ~tmp;
 801018a:	6a1a      	ldr	r2, [r3, #32]
 801018c:	f022 0201 	bic.w	r2, r2, #1
 8010190:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010192:	6a1a      	ldr	r2, [r3, #32]
 8010194:	f042 0201 	orr.w	r2, r2, #1
 8010198:	621a      	str	r2, [r3, #32]
 801019a:	e7e7      	b.n	801016c <HAL_TIM_Encoder_Start+0x18>

0801019c <HAL_TIM_Encoder_Stop>:
{
 801019c:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 801019e:	b1f1      	cbz	r1, 80101de <HAL_TIM_Encoder_Stop+0x42>
 80101a0:	2904      	cmp	r1, #4
 80101a2:	d115      	bne.n	80101d0 <HAL_TIM_Encoder_Stop+0x34>
  TIMx->CCER &= ~tmp;
 80101a4:	6a1a      	ldr	r2, [r3, #32]
 80101a6:	f022 0210 	bic.w	r2, r2, #16
 80101aa:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80101ac:	6a1a      	ldr	r2, [r3, #32]
 80101ae:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 80101b0:	6a19      	ldr	r1, [r3, #32]
 80101b2:	f241 1211 	movw	r2, #4369	; 0x1111
 80101b6:	4211      	tst	r1, r2
 80101b8:	d108      	bne.n	80101cc <HAL_TIM_Encoder_Stop+0x30>
 80101ba:	6a19      	ldr	r1, [r3, #32]
 80101bc:	f240 4244 	movw	r2, #1092	; 0x444
 80101c0:	4211      	tst	r1, r2
 80101c2:	d103      	bne.n	80101cc <HAL_TIM_Encoder_Stop+0x30>
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	f022 0201 	bic.w	r2, r2, #1
 80101ca:	601a      	str	r2, [r3, #0]
}
 80101cc:	2000      	movs	r0, #0
 80101ce:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 80101d0:	6a1a      	ldr	r2, [r3, #32]
 80101d2:	f022 0201 	bic.w	r2, r2, #1
 80101d6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80101d8:	6a1a      	ldr	r2, [r3, #32]
 80101da:	621a      	str	r2, [r3, #32]
 80101dc:	e7e2      	b.n	80101a4 <HAL_TIM_Encoder_Stop+0x8>
  TIMx->CCER &= ~tmp;
 80101de:	6a1a      	ldr	r2, [r3, #32]
 80101e0:	f022 0201 	bic.w	r2, r2, #1
 80101e4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80101e6:	6a1a      	ldr	r2, [r3, #32]
 80101e8:	621a      	str	r2, [r3, #32]
 80101ea:	e7e1      	b.n	80101b0 <HAL_TIM_Encoder_Stop+0x14>

080101ec <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80101ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	d05a      	beq.n	80102aa <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 80101f4:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80101f6:	6803      	ldr	r3, [r0, #0]
{
 80101f8:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80101fa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80101fe:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8010200:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010202:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8010206:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 801020a:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 801020c:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 801020e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8010212:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8010214:	d074      	beq.n	8010300 <HAL_TIM_ConfigClockSource+0x114>
 8010216:	d94a      	bls.n	80102ae <HAL_TIM_ConfigClockSource+0xc2>
 8010218:	2c60      	cmp	r4, #96	; 0x60
 801021a:	d02d      	beq.n	8010278 <HAL_TIM_ConfigClockSource+0x8c>
 801021c:	d956      	bls.n	80102cc <HAL_TIM_ConfigClockSource+0xe0>
 801021e:	2c70      	cmp	r4, #112	; 0x70
 8010220:	d01a      	beq.n	8010258 <HAL_TIM_ConfigClockSource+0x6c>
 8010222:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8010226:	d10e      	bne.n	8010246 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010228:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 801022c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 801022e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010230:	432a      	orrs	r2, r5
 8010232:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010236:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801023a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 801023c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801023e:	689a      	ldr	r2, [r3, #8]
 8010240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010244:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8010246:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010248:	2201      	movs	r2, #1
 801024a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801024e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8010252:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8010254:	4618      	mov	r0, r3
}
 8010256:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010258:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 801025c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 801025e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010260:	432a      	orrs	r2, r5
 8010262:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010266:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801026a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 801026c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 801026e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010270:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8010274:	609a      	str	r2, [r3, #8]
      break;
 8010276:	e7e6      	b.n	8010246 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010278:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801027a:	684d      	ldr	r5, [r1, #4]
 801027c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801027e:	f024 0410 	bic.w	r4, r4, #16
 8010282:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010284:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8010286:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010288:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801028c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8010290:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010294:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8010298:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 801029a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 801029c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801029e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80102a2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80102a6:	609a      	str	r2, [r3, #8]
 80102a8:	e7cd      	b.n	8010246 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80102aa:	2002      	movs	r0, #2
}
 80102ac:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80102ae:	2c10      	cmp	r4, #16
 80102b0:	d004      	beq.n	80102bc <HAL_TIM_ConfigClockSource+0xd0>
 80102b2:	d93d      	bls.n	8010330 <HAL_TIM_ConfigClockSource+0x144>
 80102b4:	2c20      	cmp	r4, #32
 80102b6:	d001      	beq.n	80102bc <HAL_TIM_ConfigClockSource+0xd0>
 80102b8:	2c30      	cmp	r4, #48	; 0x30
 80102ba:	d1c4      	bne.n	8010246 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 80102bc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80102be:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80102c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80102c6:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 80102c8:	609c      	str	r4, [r3, #8]
 80102ca:	e7bc      	b.n	8010246 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80102cc:	2c50      	cmp	r4, #80	; 0x50
 80102ce:	d1ba      	bne.n	8010246 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80102d0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80102d2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80102d4:	684c      	ldr	r4, [r1, #4]
 80102d6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80102d8:	f026 0601 	bic.w	r6, r6, #1
 80102dc:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80102de:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80102e0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80102e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80102e8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80102ec:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80102ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80102f0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80102f2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80102f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80102f8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80102fc:	609a      	str	r2, [r3, #8]
 80102fe:	e7a2      	b.n	8010246 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8010300:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010302:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010304:	684c      	ldr	r4, [r1, #4]
 8010306:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010308:	f026 0601 	bic.w	r6, r6, #1
 801030c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801030e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010310:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010314:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010318:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 801031c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 801031e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010320:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8010322:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010324:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010328:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 801032c:	609a      	str	r2, [r3, #8]
 801032e:	e78a      	b.n	8010246 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8010330:	2c00      	cmp	r4, #0
 8010332:	d0c3      	beq.n	80102bc <HAL_TIM_ConfigClockSource+0xd0>
 8010334:	e787      	b.n	8010246 <HAL_TIM_ConfigClockSource+0x5a>
 8010336:	bf00      	nop

08010338 <HAL_TIM_OC_DelayElapsedCallback>:
 8010338:	4770      	bx	lr
 801033a:	bf00      	nop

0801033c <HAL_TIM_IC_CaptureCallback>:
 801033c:	4770      	bx	lr
 801033e:	bf00      	nop

08010340 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop

08010344 <HAL_TIM_TriggerCallback>:
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop

08010348 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010348:	6803      	ldr	r3, [r0, #0]
 801034a:	691a      	ldr	r2, [r3, #16]
 801034c:	0791      	lsls	r1, r2, #30
{
 801034e:	b510      	push	{r4, lr}
 8010350:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010352:	d502      	bpl.n	801035a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010354:	68da      	ldr	r2, [r3, #12]
 8010356:	0792      	lsls	r2, r2, #30
 8010358:	d45f      	bmi.n	801041a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801035a:	691a      	ldr	r2, [r3, #16]
 801035c:	0750      	lsls	r0, r2, #29
 801035e:	d502      	bpl.n	8010366 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010360:	68da      	ldr	r2, [r3, #12]
 8010362:	0751      	lsls	r1, r2, #29
 8010364:	d446      	bmi.n	80103f4 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010366:	691a      	ldr	r2, [r3, #16]
 8010368:	0712      	lsls	r2, r2, #28
 801036a:	d502      	bpl.n	8010372 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801036c:	68da      	ldr	r2, [r3, #12]
 801036e:	0710      	lsls	r0, r2, #28
 8010370:	d42e      	bmi.n	80103d0 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010372:	691a      	ldr	r2, [r3, #16]
 8010374:	06d2      	lsls	r2, r2, #27
 8010376:	d502      	bpl.n	801037e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010378:	68da      	ldr	r2, [r3, #12]
 801037a:	06d0      	lsls	r0, r2, #27
 801037c:	d418      	bmi.n	80103b0 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801037e:	691a      	ldr	r2, [r3, #16]
 8010380:	07d1      	lsls	r1, r2, #31
 8010382:	d502      	bpl.n	801038a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010384:	68da      	ldr	r2, [r3, #12]
 8010386:	07d2      	lsls	r2, r2, #31
 8010388:	d45d      	bmi.n	8010446 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801038a:	691a      	ldr	r2, [r3, #16]
 801038c:	0610      	lsls	r0, r2, #24
 801038e:	d502      	bpl.n	8010396 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010390:	68da      	ldr	r2, [r3, #12]
 8010392:	0611      	lsls	r1, r2, #24
 8010394:	d45f      	bmi.n	8010456 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010396:	691a      	ldr	r2, [r3, #16]
 8010398:	0652      	lsls	r2, r2, #25
 801039a:	d502      	bpl.n	80103a2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801039c:	68da      	ldr	r2, [r3, #12]
 801039e:	0650      	lsls	r0, r2, #25
 80103a0:	d461      	bmi.n	8010466 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80103a2:	691a      	ldr	r2, [r3, #16]
 80103a4:	0691      	lsls	r1, r2, #26
 80103a6:	d502      	bpl.n	80103ae <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80103a8:	68da      	ldr	r2, [r3, #12]
 80103aa:	0692      	lsls	r2, r2, #26
 80103ac:	d443      	bmi.n	8010436 <HAL_TIM_IRQHandler+0xee>
}
 80103ae:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80103b0:	f06f 0210 	mvn.w	r2, #16
 80103b4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80103b6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80103b8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80103ba:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80103be:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80103c0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80103c2:	d064      	beq.n	801048e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80103c4:	f7ff ffba 	bl	801033c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103c8:	2200      	movs	r2, #0
 80103ca:	6823      	ldr	r3, [r4, #0]
 80103cc:	7722      	strb	r2, [r4, #28]
 80103ce:	e7d6      	b.n	801037e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80103d0:	f06f 0208 	mvn.w	r2, #8
 80103d4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80103d6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80103d8:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80103da:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80103dc:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80103de:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80103e0:	d152      	bne.n	8010488 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103e2:	f7ff ffa9 	bl	8010338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103e6:	4620      	mov	r0, r4
 80103e8:	f7ff ffaa 	bl	8010340 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103ec:	2200      	movs	r2, #0
 80103ee:	6823      	ldr	r3, [r4, #0]
 80103f0:	7722      	strb	r2, [r4, #28]
 80103f2:	e7be      	b.n	8010372 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80103f4:	f06f 0204 	mvn.w	r2, #4
 80103f8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80103fa:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80103fc:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80103fe:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010402:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8010404:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010406:	d13c      	bne.n	8010482 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010408:	f7ff ff96 	bl	8010338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801040c:	4620      	mov	r0, r4
 801040e:	f7ff ff97 	bl	8010340 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010412:	2200      	movs	r2, #0
 8010414:	6823      	ldr	r3, [r4, #0]
 8010416:	7722      	strb	r2, [r4, #28]
 8010418:	e7a5      	b.n	8010366 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801041a:	f06f 0202 	mvn.w	r2, #2
 801041e:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010420:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010422:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010424:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010426:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010428:	d025      	beq.n	8010476 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 801042a:	f7ff ff87 	bl	801033c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801042e:	2200      	movs	r2, #0
 8010430:	6823      	ldr	r3, [r4, #0]
 8010432:	7722      	strb	r2, [r4, #28]
 8010434:	e791      	b.n	801035a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010436:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 801043a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801043c:	611a      	str	r2, [r3, #16]
}
 801043e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8010442:	f000 bb11 	b.w	8010a68 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010446:	f06f 0201 	mvn.w	r2, #1
 801044a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801044c:	4620      	mov	r0, r4
 801044e:	f7f9 fde5 	bl	800a01c <HAL_TIM_PeriodElapsedCallback>
 8010452:	6823      	ldr	r3, [r4, #0]
 8010454:	e799      	b.n	801038a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010456:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801045a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801045c:	4620      	mov	r0, r4
 801045e:	f000 fb05 	bl	8010a6c <HAL_TIMEx_BreakCallback>
 8010462:	6823      	ldr	r3, [r4, #0]
 8010464:	e797      	b.n	8010396 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010466:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801046a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801046c:	4620      	mov	r0, r4
 801046e:	f7ff ff69 	bl	8010344 <HAL_TIM_TriggerCallback>
 8010472:	6823      	ldr	r3, [r4, #0]
 8010474:	e795      	b.n	80103a2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010476:	f7ff ff5f 	bl	8010338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801047a:	4620      	mov	r0, r4
 801047c:	f7ff ff60 	bl	8010340 <HAL_TIM_PWM_PulseFinishedCallback>
 8010480:	e7d5      	b.n	801042e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8010482:	f7ff ff5b 	bl	801033c <HAL_TIM_IC_CaptureCallback>
 8010486:	e7c4      	b.n	8010412 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8010488:	f7ff ff58 	bl	801033c <HAL_TIM_IC_CaptureCallback>
 801048c:	e7ae      	b.n	80103ec <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801048e:	f7ff ff53 	bl	8010338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010492:	4620      	mov	r0, r4
 8010494:	f7ff ff54 	bl	8010340 <HAL_TIM_PWM_PulseFinishedCallback>
 8010498:	e796      	b.n	80103c8 <HAL_TIM_IRQHandler+0x80>
 801049a:	bf00      	nop

0801049c <TIM_Base_SetConfig>:
{
 801049c:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801049e:	4e36      	ldr	r6, [pc, #216]	; (8010578 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 80104a0:	6803      	ldr	r3, [r0, #0]
 80104a2:	694d      	ldr	r5, [r1, #20]
 80104a4:	688c      	ldr	r4, [r1, #8]
 80104a6:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80104a8:	42b0      	cmp	r0, r6
 80104aa:	d055      	beq.n	8010558 <TIM_Base_SetConfig+0xbc>
 80104ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80104b0:	d029      	beq.n	8010506 <TIM_Base_SetConfig+0x6a>
 80104b2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80104b6:	42b0      	cmp	r0, r6
 80104b8:	d037      	beq.n	801052a <TIM_Base_SetConfig+0x8e>
 80104ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80104be:	42b0      	cmp	r0, r6
 80104c0:	d033      	beq.n	801052a <TIM_Base_SetConfig+0x8e>
 80104c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80104c6:	42b0      	cmp	r0, r6
 80104c8:	d02f      	beq.n	801052a <TIM_Base_SetConfig+0x8e>
 80104ca:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80104ce:	42b0      	cmp	r0, r6
 80104d0:	d02b      	beq.n	801052a <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80104d2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80104d6:	42b0      	cmp	r0, r6
 80104d8:	d013      	beq.n	8010502 <TIM_Base_SetConfig+0x66>
 80104da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80104de:	42b0      	cmp	r0, r6
 80104e0:	d00f      	beq.n	8010502 <TIM_Base_SetConfig+0x66>
 80104e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80104e6:	42b0      	cmp	r0, r6
 80104e8:	d00b      	beq.n	8010502 <TIM_Base_SetConfig+0x66>
 80104ea:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 80104ee:	42b0      	cmp	r0, r6
 80104f0:	d007      	beq.n	8010502 <TIM_Base_SetConfig+0x66>
 80104f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80104f6:	42b0      	cmp	r0, r6
 80104f8:	d003      	beq.n	8010502 <TIM_Base_SetConfig+0x66>
 80104fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80104fe:	42b0      	cmp	r0, r6
 8010500:	d109      	bne.n	8010516 <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010502:	68c9      	ldr	r1, [r1, #12]
 8010504:	e004      	b.n	8010510 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 8010506:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010508:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801050a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801050e:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8010510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010514:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801051a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 801051c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801051e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010520:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8010522:	2301      	movs	r3, #1
 8010524:	6143      	str	r3, [r0, #20]
}
 8010526:	bcf0      	pop	{r4, r5, r6, r7}
 8010528:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 801052a:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801052c:	4f13      	ldr	r7, [pc, #76]	; (801057c <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801052e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010532:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010534:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8010536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801053a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801053c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010540:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010542:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 8010544:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010546:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010548:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801054a:	d1ea      	bne.n	8010522 <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 801054c:	690b      	ldr	r3, [r1, #16]
 801054e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8010550:	2301      	movs	r3, #1
 8010552:	6143      	str	r3, [r0, #20]
}
 8010554:	bcf0      	pop	{r4, r5, r6, r7}
 8010556:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8010558:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801055a:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801055c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010560:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8010562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010566:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801056c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 801056e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010570:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010572:	6282      	str	r2, [r0, #40]	; 0x28
 8010574:	e7ea      	b.n	801054c <TIM_Base_SetConfig+0xb0>
 8010576:	bf00      	nop
 8010578:	40010000 	.word	0x40010000
 801057c:	40010400 	.word	0x40010400

08010580 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8010580:	b1b8      	cbz	r0, 80105b2 <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010582:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8010586:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8010588:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801058c:	4604      	mov	r4, r0
 801058e:	b15b      	cbz	r3, 80105a8 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8010590:	2302      	movs	r3, #2
 8010592:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010596:	6820      	ldr	r0, [r4, #0]
 8010598:	1d21      	adds	r1, r4, #4
 801059a:	f7ff ff7f 	bl	801049c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 801059e:	2301      	movs	r3, #1
 80105a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80105a4:	2000      	movs	r0, #0
}
 80105a6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80105a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80105ac:	f7fc f988 	bl	800c8c0 <HAL_TIM_Base_MspInit>
 80105b0:	e7ee      	b.n	8010590 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80105b2:	2001      	movs	r0, #1
}
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop

080105b8 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80105b8:	b1b8      	cbz	r0, 80105ea <HAL_TIM_OC_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80105ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80105be:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80105c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80105c4:	4604      	mov	r4, r0
 80105c6:	b15b      	cbz	r3, 80105e0 <HAL_TIM_OC_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80105c8:	2302      	movs	r3, #2
 80105ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80105ce:	6820      	ldr	r0, [r4, #0]
 80105d0:	1d21      	adds	r1, r4, #4
 80105d2:	f7ff ff63 	bl	801049c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80105d6:	2301      	movs	r3, #1
 80105d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80105dc:	2000      	movs	r0, #0
}
 80105de:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80105e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80105e4:	f7ff fcae 	bl	800ff44 <HAL_TIM_OC_MspInit>
 80105e8:	e7ee      	b.n	80105c8 <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 80105ea:	2001      	movs	r0, #1
}
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop

080105f0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80105f0:	b1b8      	cbz	r0, 8010622 <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80105f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80105f6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80105f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80105fc:	4604      	mov	r4, r0
 80105fe:	b15b      	cbz	r3, 8010618 <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8010600:	2302      	movs	r3, #2
 8010602:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010606:	6820      	ldr	r0, [r4, #0]
 8010608:	1d21      	adds	r1, r4, #4
 801060a:	f7ff ff47 	bl	801049c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 801060e:	2301      	movs	r3, #1
 8010610:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8010614:	2000      	movs	r0, #0
}
 8010616:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8010618:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 801061c:	f7ff fd5c 	bl	80100d8 <HAL_TIM_PWM_MspInit>
 8010620:	e7ee      	b.n	8010600 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8010622:	2001      	movs	r0, #1
}
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop

08010628 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8010628:	2800      	cmp	r0, #0
 801062a:	d04f      	beq.n	80106cc <HAL_TIM_Encoder_Init+0xa4>
{
 801062c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 801062e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8010632:	b083      	sub	sp, #12
 8010634:	4605      	mov	r5, r0
 8010636:	460c      	mov	r4, r1
  if (htim->State == HAL_TIM_STATE_RESET)
 8010638:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801063c:	2b00      	cmp	r3, #0
 801063e:	d040      	beq.n	80106c2 <HAL_TIM_Encoder_Init+0x9a>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010640:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8010642:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010644:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8010648:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801064c:	6883      	ldr	r3, [r0, #8]
 801064e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010652:	f023 0307 	bic.w	r3, r3, #7
 8010656:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010658:	f7ff ff20 	bl	801049c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 801065c:	6829      	ldr	r1, [r5, #0]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801065e:	6923      	ldr	r3, [r4, #16]
  tmpsmcr = htim->Instance->SMCR;
 8010660:	6888      	ldr	r0, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8010662:	698e      	ldr	r6, [r1, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8010664:	69a7      	ldr	r7, [r4, #24]
 8010666:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8010668:	f8d4 c000 	ldr.w	ip, [r4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801066c:	f426 7e40 	bic.w	lr, r6, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010670:	69e6      	ldr	r6, [r4, #28]
 8010672:	011b      	lsls	r3, r3, #4
 8010674:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8010678:	6a26      	ldr	r6, [r4, #32]
 801067a:	9601      	str	r6, [sp, #4]
 801067c:	68e6      	ldr	r6, [r4, #12]
 801067e:	4333      	orrs	r3, r6
 8010680:	9e01      	ldr	r6, [sp, #4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8010682:	f02e 0e03 	bic.w	lr, lr, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8010686:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 801068a:	ea42 020e 	orr.w	r2, r2, lr
  tmpccer = htim->Instance->CCER;
 801068e:	6a0f      	ldr	r7, [r1, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010690:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010694:	6966      	ldr	r6, [r4, #20]
 8010696:	6864      	ldr	r4, [r4, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8010698:	f422 427c 	bic.w	r2, r2, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801069c:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 80106a0:	ea40 000c 	orr.w	r0, r0, ip
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80106a4:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80106a8:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  htim->Instance->SMCR = tmpsmcr;
 80106ac:	6088      	str	r0, [r1, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80106ae:	4327      	orrs	r7, r4
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80106b0:	4313      	orrs	r3, r2
  htim->State = HAL_TIM_STATE_READY;
 80106b2:	2401      	movs	r4, #1
  return HAL_OK;
 80106b4:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 80106b6:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 80106b8:	620f      	str	r7, [r1, #32]
  htim->State = HAL_TIM_STATE_READY;
 80106ba:	f885 403d 	strb.w	r4, [r5, #61]	; 0x3d
}
 80106be:	b003      	add	sp, #12
 80106c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80106c2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80106c6:	f7fc f95d 	bl	800c984 <HAL_TIM_Encoder_MspInit>
 80106ca:	e7b9      	b.n	8010640 <HAL_TIM_Encoder_Init+0x18>
    return HAL_ERROR;
 80106cc:	2001      	movs	r0, #1
}
 80106ce:	4770      	bx	lr

080106d0 <TIM_OC2_SetConfig>:
{
 80106d0:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80106d2:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80106d4:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80106d6:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80106d8:	4d15      	ldr	r5, [pc, #84]	; (8010730 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80106da:	f024 0410 	bic.w	r4, r4, #16
 80106de:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80106e0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80106e2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80106e4:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80106e6:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80106ea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80106ee:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80106f0:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80106f4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80106f8:	d00a      	beq.n	8010710 <TIM_OC2_SetConfig+0x40>
 80106fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80106fe:	42a8      	cmp	r0, r5
 8010700:	d006      	beq.n	8010710 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 8010702:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8010704:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8010706:	6182      	str	r2, [r0, #24]
}
 8010708:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 801070a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 801070c:	6203      	str	r3, [r0, #32]
}
 801070e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010710:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8010712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010716:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801071a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801071e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010722:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8010724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010728:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 801072c:	e7e9      	b.n	8010702 <TIM_OC2_SetConfig+0x32>
 801072e:	bf00      	nop
 8010730:	40010000 	.word	0x40010000

08010734 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8010734:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010738:	2b01      	cmp	r3, #1
 801073a:	d028      	beq.n	801078e <HAL_TIM_OC_ConfigChannel+0x5a>
{
 801073c:	b510      	push	{r4, lr}
 801073e:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8010740:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8010742:	2001      	movs	r0, #1
 8010744:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8010748:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 801074c:	2a0c      	cmp	r2, #12
 801074e:	d80b      	bhi.n	8010768 <HAL_TIM_OC_ConfigChannel+0x34>
 8010750:	e8df f002 	tbb	[pc, r2]
 8010754:	0a0a0a07 	.word	0x0a0a0a07
 8010758:	0a0a0a15 	.word	0x0a0a0a15
 801075c:	0a0a0a19 	.word	0x0a0a0a19
 8010760:	11          	.byte	0x11
 8010761:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010762:	6820      	ldr	r0, [r4, #0]
 8010764:	f7ff fb3e 	bl	800fde4 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8010768:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 801076a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 801076c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010770:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8010774:	bd10      	pop	{r4, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010776:	6820      	ldr	r0, [r4, #0]
 8010778:	f7ff fb96 	bl	800fea8 <TIM_OC4_SetConfig>
      break;
 801077c:	e7f4      	b.n	8010768 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801077e:	6820      	ldr	r0, [r4, #0]
 8010780:	f7ff ffa6 	bl	80106d0 <TIM_OC2_SetConfig>
      break;
 8010784:	e7f0      	b.n	8010768 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010786:	6820      	ldr	r0, [r4, #0]
 8010788:	f7ff fb5c 	bl	800fe44 <TIM_OC3_SetConfig>
      break;
 801078c:	e7ec      	b.n	8010768 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 801078e:	2002      	movs	r0, #2
}
 8010790:	4770      	bx	lr
 8010792:	bf00      	nop

08010794 <HAL_TIM_PWM_ConfigChannel>:
{
 8010794:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8010796:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801079a:	2b01      	cmp	r3, #1
 801079c:	d074      	beq.n	8010888 <HAL_TIM_PWM_ConfigChannel+0xf4>
 801079e:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80107a0:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80107a2:	2101      	movs	r1, #1
 80107a4:	4604      	mov	r4, r0
 80107a6:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80107aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80107ae:	2a0c      	cmp	r2, #12
 80107b0:	d819      	bhi.n	80107e6 <HAL_TIM_PWM_ConfigChannel+0x52>
 80107b2:	e8df f002 	tbb	[pc, r2]
 80107b6:	1807      	.short	0x1807
 80107b8:	18381818 	.word	0x18381818
 80107bc:	18511818 	.word	0x18511818
 80107c0:	1818      	.short	0x1818
 80107c2:	1f          	.byte	0x1f
 80107c3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80107c4:	4629      	mov	r1, r5
 80107c6:	6800      	ldr	r0, [r0, #0]
 80107c8:	f7ff fb0c 	bl	800fde4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80107cc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80107ce:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80107d0:	6999      	ldr	r1, [r3, #24]
 80107d2:	f041 0108 	orr.w	r1, r1, #8
 80107d6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80107d8:	6999      	ldr	r1, [r3, #24]
 80107da:	f021 0104 	bic.w	r1, r1, #4
 80107de:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80107e0:	699a      	ldr	r2, [r3, #24]
 80107e2:	4302      	orrs	r2, r0
 80107e4:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80107e6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80107e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80107ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80107ee:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80107f2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80107f4:	4629      	mov	r1, r5
 80107f6:	6800      	ldr	r0, [r0, #0]
 80107f8:	f7ff fb56 	bl	800fea8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80107fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80107fe:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010800:	69d9      	ldr	r1, [r3, #28]
 8010802:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010806:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010808:	69d9      	ldr	r1, [r3, #28]
 801080a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 801080e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010810:	69da      	ldr	r2, [r3, #28]
 8010812:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8010816:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8010818:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 801081a:	2301      	movs	r3, #1
 801081c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010820:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8010824:	e7e5      	b.n	80107f2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010826:	4629      	mov	r1, r5
 8010828:	6800      	ldr	r0, [r0, #0]
 801082a:	f7ff ff51 	bl	80106d0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801082e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010830:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010832:	6999      	ldr	r1, [r3, #24]
 8010834:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010838:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801083a:	6999      	ldr	r1, [r3, #24]
 801083c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010840:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010842:	699a      	ldr	r2, [r3, #24]
 8010844:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8010848:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 801084a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 801084c:	2301      	movs	r3, #1
 801084e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010852:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8010856:	e7cc      	b.n	80107f2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010858:	4629      	mov	r1, r5
 801085a:	6800      	ldr	r0, [r0, #0]
 801085c:	f7ff faf2 	bl	800fe44 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010860:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010862:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010864:	69d9      	ldr	r1, [r3, #28]
 8010866:	f041 0108 	orr.w	r1, r1, #8
 801086a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801086c:	69d9      	ldr	r1, [r3, #28]
 801086e:	f021 0104 	bic.w	r1, r1, #4
 8010872:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010874:	69da      	ldr	r2, [r3, #28]
 8010876:	4302      	orrs	r2, r0
 8010878:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 801087a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 801087c:	2301      	movs	r3, #1
 801087e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010882:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8010886:	e7b4      	b.n	80107f2 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8010888:	2002      	movs	r0, #2
}
 801088a:	bd38      	pop	{r3, r4, r5, pc}

0801088c <HAL_TIMEx_OCN_Start_IT>:
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 801088c:	2904      	cmp	r1, #4
 801088e:	6803      	ldr	r3, [r0, #0]
 8010890:	d02a      	beq.n	80108e8 <HAL_TIMEx_OCN_Start_IT+0x5c>
 8010892:	2908      	cmp	r1, #8
 8010894:	d023      	beq.n	80108de <HAL_TIMEx_OCN_Start_IT+0x52>
 8010896:	b1e9      	cbz	r1, 80108d4 <HAL_TIMEx_OCN_Start_IT+0x48>
    default:
      break;
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8010898:	68da      	ldr	r2, [r3, #12]
 801089a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801089e:	60da      	str	r2, [r3, #12]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80108a0:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80108a2:	f001 021f 	and.w	r2, r1, #31
 80108a6:	2104      	movs	r1, #4
 80108a8:	4091      	lsls	r1, r2
  TIMx->CCER &=  ~tmp;
 80108aa:	ea20 0001 	bic.w	r0, r0, r1
 80108ae:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80108b0:	6a1a      	ldr	r2, [r3, #32]
 80108b2:	4311      	orrs	r1, r2
 80108b4:	6219      	str	r1, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 80108b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80108bc:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108be:	689a      	ldr	r2, [r3, #8]
 80108c0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108c4:	2a06      	cmp	r2, #6
 80108c6:	d003      	beq.n	80108d0 <HAL_TIMEx_OCN_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	f042 0201 	orr.w	r2, r2, #1
 80108ce:	601a      	str	r2, [r3, #0]
}
 80108d0:	2000      	movs	r0, #0
 80108d2:	4770      	bx	lr
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80108d4:	68da      	ldr	r2, [r3, #12]
 80108d6:	f042 0202 	orr.w	r2, r2, #2
 80108da:	60da      	str	r2, [r3, #12]
      break;
 80108dc:	e7dc      	b.n	8010898 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80108de:	68da      	ldr	r2, [r3, #12]
 80108e0:	f042 0208 	orr.w	r2, r2, #8
 80108e4:	60da      	str	r2, [r3, #12]
      break;
 80108e6:	e7d7      	b.n	8010898 <HAL_TIMEx_OCN_Start_IT+0xc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80108e8:	68da      	ldr	r2, [r3, #12]
 80108ea:	f042 0204 	orr.w	r2, r2, #4
 80108ee:	60da      	str	r2, [r3, #12]
      break;
 80108f0:	e7d2      	b.n	8010898 <HAL_TIMEx_OCN_Start_IT+0xc>
 80108f2:	bf00      	nop

080108f4 <HAL_TIMEx_OCN_Stop_IT>:
  switch (Channel)
 80108f4:	2904      	cmp	r1, #4
 80108f6:	6803      	ldr	r3, [r0, #0]
 80108f8:	d040      	beq.n	801097c <HAL_TIMEx_OCN_Stop_IT+0x88>
 80108fa:	2908      	cmp	r1, #8
 80108fc:	d039      	beq.n	8010972 <HAL_TIMEx_OCN_Stop_IT+0x7e>
 80108fe:	2900      	cmp	r1, #0
 8010900:	d032      	beq.n	8010968 <HAL_TIMEx_OCN_Stop_IT+0x74>
  TIMx->CCER &=  ~tmp;
 8010902:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010904:	f001 011f 	and.w	r1, r1, #31
 8010908:	2004      	movs	r0, #4
 801090a:	fa00 f101 	lsl.w	r1, r0, r1
  TIMx->CCER &=  ~tmp;
 801090e:	ea22 0101 	bic.w	r1, r2, r1
 8010912:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010914:	6a1a      	ldr	r2, [r3, #32]
 8010916:	621a      	str	r2, [r3, #32]
  tmpccer = htim->Instance->CCER;
 8010918:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 801091a:	f240 4244 	movw	r2, #1092	; 0x444
 801091e:	4211      	tst	r1, r2
 8010920:	d103      	bne.n	801092a <HAL_TIMEx_OCN_Stop_IT+0x36>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8010922:	68da      	ldr	r2, [r3, #12]
 8010924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010928:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 801092a:	6a19      	ldr	r1, [r3, #32]
 801092c:	f241 1211 	movw	r2, #4369	; 0x1111
 8010930:	4211      	tst	r1, r2
 8010932:	d104      	bne.n	801093e <HAL_TIMEx_OCN_Stop_IT+0x4a>
 8010934:	6a19      	ldr	r1, [r3, #32]
 8010936:	f240 4244 	movw	r2, #1092	; 0x444
 801093a:	4211      	tst	r1, r2
 801093c:	d00f      	beq.n	801095e <HAL_TIMEx_OCN_Stop_IT+0x6a>
  __HAL_TIM_DISABLE(htim);
 801093e:	6a19      	ldr	r1, [r3, #32]
 8010940:	f241 1211 	movw	r2, #4369	; 0x1111
 8010944:	4211      	tst	r1, r2
 8010946:	d108      	bne.n	801095a <HAL_TIMEx_OCN_Stop_IT+0x66>
 8010948:	6a19      	ldr	r1, [r3, #32]
 801094a:	f240 4244 	movw	r2, #1092	; 0x444
 801094e:	4211      	tst	r1, r2
 8010950:	d103      	bne.n	801095a <HAL_TIMEx_OCN_Stop_IT+0x66>
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	f022 0201 	bic.w	r2, r2, #1
 8010958:	601a      	str	r2, [r3, #0]
}
 801095a:	2000      	movs	r0, #0
 801095c:	4770      	bx	lr
  __HAL_TIM_MOE_DISABLE(htim);
 801095e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010964:	645a      	str	r2, [r3, #68]	; 0x44
 8010966:	e7ea      	b.n	801093e <HAL_TIMEx_OCN_Stop_IT+0x4a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010968:	68da      	ldr	r2, [r3, #12]
 801096a:	f022 0202 	bic.w	r2, r2, #2
 801096e:	60da      	str	r2, [r3, #12]
      break;
 8010970:	e7c7      	b.n	8010902 <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010972:	68da      	ldr	r2, [r3, #12]
 8010974:	f022 0208 	bic.w	r2, r2, #8
 8010978:	60da      	str	r2, [r3, #12]
      break;
 801097a:	e7c2      	b.n	8010902 <HAL_TIMEx_OCN_Stop_IT+0xe>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801097c:	68da      	ldr	r2, [r3, #12]
 801097e:	f022 0204 	bic.w	r2, r2, #4
 8010982:	60da      	str	r2, [r3, #12]
      break;
 8010984:	e7bd      	b.n	8010902 <HAL_TIMEx_OCN_Stop_IT+0xe>
 8010986:	bf00      	nop

08010988 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8010988:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801098c:	2b01      	cmp	r3, #1
 801098e:	d03a      	beq.n	8010a06 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  tmpcr2 = htim->Instance->CR2;
 8010990:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8010992:	2202      	movs	r2, #2
{
 8010994:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8010996:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 801099a:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801099c:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801099e:	4d1b      	ldr	r5, [pc, #108]	; (8010a0c <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 80109a0:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80109a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80109a6:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109a8:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 80109aa:	f04f 0601 	mov.w	r6, #1
 80109ae:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 80109b2:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109b4:	d019      	beq.n	80109ea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80109b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109ba:	d016      	beq.n	80109ea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80109bc:	4a14      	ldr	r2, [pc, #80]	; (8010a10 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80109be:	4293      	cmp	r3, r2
 80109c0:	d013      	beq.n	80109ea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80109c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80109c6:	4293      	cmp	r3, r2
 80109c8:	d00f      	beq.n	80109ea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80109ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80109ce:	4293      	cmp	r3, r2
 80109d0:	d00b      	beq.n	80109ea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80109d2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d007      	beq.n	80109ea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80109da:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80109de:	4293      	cmp	r3, r2
 80109e0:	d003      	beq.n	80109ea <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80109e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d104      	bne.n	80109f4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80109ea:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80109ec:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80109f0:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 80109f2:	609c      	str	r4, [r3, #8]
  __HAL_UNLOCK(htim);
 80109f4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80109f6:	2201      	movs	r2, #1
 80109f8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80109fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8010a00:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8010a02:	4618      	mov	r0, r3
}
 8010a04:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010a06:	2002      	movs	r0, #2
}
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop
 8010a0c:	40010000 	.word	0x40010000
 8010a10:	40000400 	.word	0x40000400

08010a14 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8010a14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	d021      	beq.n	8010a60 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 8010a1c:	b430      	push	{r4, r5}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010a1e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010a22:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a2a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010a2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010a30:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010a36:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010a3a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a40:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010a46:	69c9      	ldr	r1, [r1, #28]
  htim->Instance->BDTR = tmpbdtr;
 8010a48:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010a4a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a50:	430b      	orrs	r3, r1
  __HAL_UNLOCK(htim);
 8010a52:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8010a54:	6453      	str	r3, [r2, #68]	; 0x44
}
 8010a56:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 8010a58:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 8010a5c:	4608      	mov	r0, r1
 8010a5e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010a60:	2302      	movs	r3, #2
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	4770      	bx	lr
 8010a66:	bf00      	nop

08010a68 <HAL_TIMEx_CommutCallback>:
 8010a68:	4770      	bx	lr
 8010a6a:	bf00      	nop

08010a6c <HAL_TIMEx_BreakCallback>:
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop

08010a70 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a70:	6802      	ldr	r2, [r0, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010a72:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a74:	6911      	ldr	r1, [r2, #16]
{
 8010a76:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a78:	68c5      	ldr	r5, [r0, #12]
 8010a7a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
{
 8010a7e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a80:	4329      	orrs	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010a82:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a84:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 8010a86:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010a88:	6965      	ldr	r5, [r4, #20]
 8010a8a:	4303      	orrs	r3, r0
 8010a8c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8010a8e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010a92:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 8010a94:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010a98:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8010a9a:	430b      	orrs	r3, r1
 8010a9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010a9e:	6953      	ldr	r3, [r2, #20]
 8010aa0:	69a1      	ldr	r1, [r4, #24]
 8010aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010aa6:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010aa8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010aac:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010aae:	4b2a      	ldr	r3, [pc, #168]	; (8010b58 <UART_SetConfig+0xe8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ab0:	d023      	beq.n	8010afa <UART_SetConfig+0x8a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d01e      	beq.n	8010af4 <UART_SetConfig+0x84>
 8010ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d01a      	beq.n	8010af4 <UART_SetConfig+0x84>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010abe:	f7fe fe33 	bl	800f728 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010ac2:	6863      	ldr	r3, [r4, #4]
 8010ac4:	2219      	movs	r2, #25
 8010ac6:	fba0 0102 	umull	r0, r1, r0, r2
 8010aca:	009a      	lsls	r2, r3, #2
 8010acc:	0f9b      	lsrs	r3, r3, #30
 8010ace:	f7f8 f813 	bl	8008af8 <__aeabi_uldivmod>
 8010ad2:	4922      	ldr	r1, [pc, #136]	; (8010b5c <UART_SetConfig+0xec>)
 8010ad4:	6824      	ldr	r4, [r4, #0]
 8010ad6:	fba1 3200 	umull	r3, r2, r1, r0
 8010ada:	0952      	lsrs	r2, r2, #5
 8010adc:	2364      	movs	r3, #100	; 0x64
 8010ade:	fb03 0312 	mls	r3, r3, r2, r0
 8010ae2:	011b      	lsls	r3, r3, #4
 8010ae4:	3332      	adds	r3, #50	; 0x32
 8010ae6:	fba1 1303 	umull	r1, r3, r1, r3
 8010aea:	0112      	lsls	r2, r2, #4
 8010aec:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8010af0:	60a3      	str	r3, [r4, #8]
    }
  }
}
 8010af2:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8010af4:	f7fe fe28 	bl	800f748 <HAL_RCC_GetPCLK2Freq>
 8010af8:	e7e3      	b.n	8010ac2 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d028      	beq.n	8010b50 <UART_SetConfig+0xe0>
 8010afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d024      	beq.n	8010b50 <UART_SetConfig+0xe0>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010b06:	f7fe fe0f 	bl	800f728 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010b0a:	6862      	ldr	r2, [r4, #4]
 8010b0c:	4d13      	ldr	r5, [pc, #76]	; (8010b5c <UART_SetConfig+0xec>)
 8010b0e:	1892      	adds	r2, r2, r2
 8010b10:	f04f 0119 	mov.w	r1, #25
 8010b14:	f04f 0600 	mov.w	r6, #0
 8010b18:	eb46 0306 	adc.w	r3, r6, r6
 8010b1c:	fba0 0101 	umull	r0, r1, r0, r1
 8010b20:	f7f7 ffea 	bl	8008af8 <__aeabi_uldivmod>
 8010b24:	fba5 3200 	umull	r3, r2, r5, r0
 8010b28:	0951      	lsrs	r1, r2, #5
 8010b2a:	2364      	movs	r3, #100	; 0x64
 8010b2c:	fb03 0311 	mls	r3, r3, r1, r0
 8010b30:	00db      	lsls	r3, r3, #3
 8010b32:	3332      	adds	r3, #50	; 0x32
 8010b34:	fba5 2303 	umull	r2, r3, r5, r3
 8010b38:	095b      	lsrs	r3, r3, #5
 8010b3a:	f003 0207 	and.w	r2, r3, #7
 8010b3e:	005b      	lsls	r3, r3, #1
 8010b40:	6824      	ldr	r4, [r4, #0]
 8010b42:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010b46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010b4a:	4413      	add	r3, r2
 8010b4c:	60a3      	str	r3, [r4, #8]
}
 8010b4e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8010b50:	f7fe fdfa 	bl	800f748 <HAL_RCC_GetPCLK2Freq>
 8010b54:	e7d9      	b.n	8010b0a <UART_SetConfig+0x9a>
 8010b56:	bf00      	nop
 8010b58:	40011000 	.word	0x40011000
 8010b5c:	51eb851f 	.word	0x51eb851f

08010b60 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8010b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b64:	4607      	mov	r7, r0
 8010b66:	460e      	mov	r6, r1
 8010b68:	4690      	mov	r8, r2
 8010b6a:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b6c:	683c      	ldr	r4, [r7, #0]
 8010b6e:	e001      	b.n	8010b74 <UART_WaitOnFlagUntilTimeout.constprop.3+0x14>
    if (Timeout != HAL_MAX_DELAY)
 8010b70:	1c6b      	adds	r3, r5, #1
 8010b72:	d106      	bne.n	8010b82 <UART_WaitOnFlagUntilTimeout.constprop.3+0x22>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b74:	6820      	ldr	r0, [r4, #0]
 8010b76:	ea36 0300 	bics.w	r3, r6, r0
 8010b7a:	d1f9      	bne.n	8010b70 <UART_WaitOnFlagUntilTimeout.constprop.3+0x10>
  return HAL_OK;
 8010b7c:	2000      	movs	r0, #0
}
 8010b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010b82:	b135      	cbz	r5, 8010b92 <UART_WaitOnFlagUntilTimeout.constprop.3+0x32>
 8010b84:	f7fd fbda 	bl	800e33c <HAL_GetTick>
 8010b88:	eba0 0008 	sub.w	r0, r0, r8
 8010b8c:	4285      	cmp	r5, r0
 8010b8e:	d2ed      	bcs.n	8010b6c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
 8010b90:	683c      	ldr	r4, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010b92:	68e3      	ldr	r3, [r4, #12]
 8010b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010b98:	60e3      	str	r3, [r4, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b9a:	6963      	ldr	r3, [r4, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8010b9c:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b9e:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8010ba2:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ba4:	6163      	str	r3, [r4, #20]
        __HAL_UNLOCK(huart);
 8010ba6:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8010ba8:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8010bac:	f887 1038 	strb.w	r1, [r7, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8010bb0:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
 8010bb4:	e7e3      	b.n	8010b7e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>
 8010bb6:	bf00      	nop

08010bb8 <HAL_UART_Init>:
  if (huart == NULL)
 8010bb8:	b360      	cbz	r0, 8010c14 <HAL_UART_Init+0x5c>
{
 8010bba:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8010bbc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8010bc0:	4604      	mov	r4, r0
 8010bc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010bc6:	b303      	cbz	r3, 8010c0a <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8010bc8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010bca:	2324      	movs	r3, #36	; 0x24
 8010bcc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8010bd0:	68d3      	ldr	r3, [r2, #12]
 8010bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010bd6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f7ff ff49 	bl	8010a70 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010bde:	6823      	ldr	r3, [r4, #0]
 8010be0:	691a      	ldr	r2, [r3, #16]
 8010be2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010be6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010be8:	695a      	ldr	r2, [r3, #20]
 8010bea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010bee:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8010bf0:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010bf2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8010bf4:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8010bf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010bfa:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8010bfc:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010bfe:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010c00:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010c04:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8010c08:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8010c0a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8010c0e:	f7fb ff8d 	bl	800cb2c <HAL_UART_MspInit>
 8010c12:	e7d9      	b.n	8010bc8 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8010c14:	2001      	movs	r0, #1
}
 8010c16:	4770      	bx	lr

08010c18 <HAL_UART_Transmit>:
{
 8010c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c1c:	460f      	mov	r7, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8010c1e:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8010c22:	2920      	cmp	r1, #32
{
 8010c24:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8010c26:	d130      	bne.n	8010c8a <HAL_UART_Transmit+0x72>
    if ((pData == NULL) || (Size == 0U))
 8010c28:	2f00      	cmp	r7, #0
 8010c2a:	d032      	beq.n	8010c92 <HAL_UART_Transmit+0x7a>
 8010c2c:	9201      	str	r2, [sp, #4]
 8010c2e:	b382      	cbz	r2, 8010c92 <HAL_UART_Transmit+0x7a>
 8010c30:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8010c32:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8010c36:	2b01      	cmp	r3, #1
 8010c38:	4604      	mov	r4, r0
 8010c3a:	d026      	beq.n	8010c8a <HAL_UART_Transmit+0x72>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c3c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8010c3e:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010c40:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c42:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8010c44:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010c48:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8010c4c:	f7fd fb76 	bl	800e33c <HAL_GetTick>
    huart->TxXferSize = Size;
 8010c50:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8010c52:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8010c56:	4681      	mov	r9, r0
    huart->TxXferSize = Size;
 8010c58:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8010c5a:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010c5c:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 8010c5e:	b2ad      	uxth	r5, r5
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010c60:	4643      	mov	r3, r8
 8010c62:	464a      	mov	r2, r9
 8010c64:	2180      	movs	r1, #128	; 0x80
 8010c66:	4620      	mov	r0, r4
    while (huart->TxXferCount > 0U)
 8010c68:	b355      	cbz	r5, 8010cc0 <HAL_UART_Transmit+0xa8>
      huart->TxXferCount--;
 8010c6a:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010c6c:	68a6      	ldr	r6, [r4, #8]
      huart->TxXferCount--;
 8010c6e:	3d01      	subs	r5, #1
 8010c70:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010c72:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
      huart->TxXferCount--;
 8010c76:	84e5      	strh	r5, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010c78:	d00f      	beq.n	8010c9a <HAL_UART_Transmit+0x82>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010c7a:	f7ff ff71 	bl	8010b60 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8010c7e:	b9e8      	cbnz	r0, 8010cbc <HAL_UART_Transmit+0xa4>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010c80:	6823      	ldr	r3, [r4, #0]
 8010c82:	783a      	ldrb	r2, [r7, #0]
 8010c84:	605a      	str	r2, [r3, #4]
 8010c86:	3701      	adds	r7, #1
 8010c88:	e7e8      	b.n	8010c5c <HAL_UART_Transmit+0x44>
    return HAL_BUSY;
 8010c8a:	2002      	movs	r0, #2
}
 8010c8c:	b003      	add	sp, #12
 8010c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8010c92:	2001      	movs	r0, #1
}
 8010c94:	b003      	add	sp, #12
 8010c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010c9a:	4643      	mov	r3, r8
 8010c9c:	464a      	mov	r2, r9
 8010c9e:	2180      	movs	r1, #128	; 0x80
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	f7ff ff5d 	bl	8010b60 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8010ca6:	b948      	cbnz	r0, 8010cbc <HAL_UART_Transmit+0xa4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010ca8:	883b      	ldrh	r3, [r7, #0]
 8010caa:	6821      	ldr	r1, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010cac:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cb2:	604b      	str	r3, [r1, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010cb4:	2a00      	cmp	r2, #0
 8010cb6:	d1e6      	bne.n	8010c86 <HAL_UART_Transmit+0x6e>
          pData += 2U;
 8010cb8:	3702      	adds	r7, #2
 8010cba:	e7cf      	b.n	8010c5c <HAL_UART_Transmit+0x44>
          return HAL_TIMEOUT;
 8010cbc:	2003      	movs	r0, #3
 8010cbe:	e7e5      	b.n	8010c8c <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010cc0:	2140      	movs	r1, #64	; 0x40
 8010cc2:	f7ff ff4d 	bl	8010b60 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d1f8      	bne.n	8010cbc <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8010cca:	2320      	movs	r3, #32
 8010ccc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8010cd0:	e7dc      	b.n	8010c8c <HAL_UART_Transmit+0x74>
 8010cd2:	bf00      	nop

08010cd4 <HAL_UART_Receive>:
{
 8010cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cd8:	460f      	mov	r7, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8010cda:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 8010cde:	2920      	cmp	r1, #32
{
 8010ce0:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8010ce2:	d135      	bne.n	8010d50 <HAL_UART_Receive+0x7c>
    if ((pData == NULL) || (Size == 0U))
 8010ce4:	2f00      	cmp	r7, #0
 8010ce6:	d037      	beq.n	8010d58 <HAL_UART_Receive+0x84>
 8010ce8:	9201      	str	r2, [sp, #4]
 8010cea:	2a00      	cmp	r2, #0
 8010cec:	d034      	beq.n	8010d58 <HAL_UART_Receive+0x84>
 8010cee:	4698      	mov	r8, r3
    __HAL_LOCK(huart);
 8010cf0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	d02a      	beq.n	8010d50 <HAL_UART_Receive+0x7c>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cfa:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8010cfc:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010cfe:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d00:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8010d02:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010d06:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8010d0a:	f7fd fb17 	bl	800e33c <HAL_GetTick>
    huart->RxXferSize = Size;
 8010d0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8010d10:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8010d14:	4681      	mov	r9, r0
    huart->RxXferSize = Size;
 8010d16:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8010d18:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8010d1a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8010d1c:	b2ad      	uxth	r5, r5
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010d1e:	4643      	mov	r3, r8
 8010d20:	464a      	mov	r2, r9
 8010d22:	2120      	movs	r1, #32
 8010d24:	4620      	mov	r0, r4
    while (huart->RxXferCount > 0U)
 8010d26:	2d00      	cmp	r5, #0
 8010d28:	d036      	beq.n	8010d98 <HAL_UART_Receive+0xc4>
      huart->RxXferCount--;
 8010d2a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010d2c:	68a6      	ldr	r6, [r4, #8]
      huart->RxXferCount--;
 8010d2e:	3d01      	subs	r5, #1
 8010d30:	b2ad      	uxth	r5, r5
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010d32:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
      huart->RxXferCount--;
 8010d36:	85e5      	strh	r5, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010d38:	d012      	beq.n	8010d60 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010d3a:	f7ff ff11 	bl	8010b60 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8010d3e:	bb78      	cbnz	r0, 8010da0 <HAL_UART_Receive+0xcc>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010d40:	6923      	ldr	r3, [r4, #16]
 8010d42:	6821      	ldr	r1, [r4, #0]
 8010d44:	1c7a      	adds	r2, r7, #1
 8010d46:	b9db      	cbnz	r3, 8010d80 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010d48:	684b      	ldr	r3, [r1, #4]
 8010d4a:	703b      	strb	r3, [r7, #0]
 8010d4c:	4617      	mov	r7, r2
 8010d4e:	e7e4      	b.n	8010d1a <HAL_UART_Receive+0x46>
    return HAL_BUSY;
 8010d50:	2002      	movs	r0, #2
}
 8010d52:	b003      	add	sp, #12
 8010d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8010d58:	2001      	movs	r0, #1
}
 8010d5a:	b003      	add	sp, #12
 8010d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010d60:	4643      	mov	r3, r8
 8010d62:	464a      	mov	r2, r9
 8010d64:	2120      	movs	r1, #32
 8010d66:	4620      	mov	r0, r4
 8010d68:	f7ff fefa 	bl	8010b60 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8010d6c:	b9c0      	cbnz	r0, 8010da0 <HAL_UART_Receive+0xcc>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010d6e:	6923      	ldr	r3, [r4, #16]
 8010d70:	b963      	cbnz	r3, 8010d8c <HAL_UART_Receive+0xb8>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010d72:	6823      	ldr	r3, [r4, #0]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d7a:	f827 3b02 	strh.w	r3, [r7], #2
 8010d7e:	e7cc      	b.n	8010d1a <HAL_UART_Receive+0x46>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010d80:	684b      	ldr	r3, [r1, #4]
 8010d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d86:	703b      	strb	r3, [r7, #0]
 8010d88:	4617      	mov	r7, r2
 8010d8a:	e7c6      	b.n	8010d1a <HAL_UART_Receive+0x46>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010d8c:	6823      	ldr	r3, [r4, #0]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	f827 3b01 	strh.w	r3, [r7], #1
 8010d96:	e7c0      	b.n	8010d1a <HAL_UART_Receive+0x46>
    return HAL_OK;
 8010d98:	4628      	mov	r0, r5
    huart->RxState = HAL_UART_STATE_READY;
 8010d9a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    return HAL_OK;
 8010d9e:	e7d8      	b.n	8010d52 <HAL_UART_Receive+0x7e>
          return HAL_TIMEOUT;
 8010da0:	2003      	movs	r0, #3
 8010da2:	e7d6      	b.n	8010d52 <HAL_UART_Receive+0x7e>

08010da4 <round>:
 8010da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010da6:	ec57 6b10 	vmov	r6, r7, d0
 8010daa:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8010dae:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8010db2:	2c13      	cmp	r4, #19
 8010db4:	463b      	mov	r3, r7
 8010db6:	463d      	mov	r5, r7
 8010db8:	dc17      	bgt.n	8010dea <round+0x46>
 8010dba:	2c00      	cmp	r4, #0
 8010dbc:	da09      	bge.n	8010dd2 <round+0x2e>
 8010dbe:	3401      	adds	r4, #1
 8010dc0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8010dc4:	d103      	bne.n	8010dce <round+0x2a>
 8010dc6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010dca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010dce:	2100      	movs	r1, #0
 8010dd0:	e02c      	b.n	8010e2c <round+0x88>
 8010dd2:	4a18      	ldr	r2, [pc, #96]	; (8010e34 <round+0x90>)
 8010dd4:	4122      	asrs	r2, r4
 8010dd6:	4217      	tst	r7, r2
 8010dd8:	d100      	bne.n	8010ddc <round+0x38>
 8010dda:	b19e      	cbz	r6, 8010e04 <round+0x60>
 8010ddc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010de0:	4123      	asrs	r3, r4
 8010de2:	442b      	add	r3, r5
 8010de4:	ea23 0302 	bic.w	r3, r3, r2
 8010de8:	e7f1      	b.n	8010dce <round+0x2a>
 8010dea:	2c33      	cmp	r4, #51	; 0x33
 8010dec:	dd0d      	ble.n	8010e0a <round+0x66>
 8010dee:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8010df2:	d107      	bne.n	8010e04 <round+0x60>
 8010df4:	4630      	mov	r0, r6
 8010df6:	4639      	mov	r1, r7
 8010df8:	ee10 2a10 	vmov	r2, s0
 8010dfc:	f7f7 f97e 	bl	80080fc <__adddf3>
 8010e00:	4606      	mov	r6, r0
 8010e02:	460f      	mov	r7, r1
 8010e04:	ec47 6b10 	vmov	d0, r6, r7
 8010e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e0a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8010e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e12:	40d0      	lsrs	r0, r2
 8010e14:	4206      	tst	r6, r0
 8010e16:	d0f5      	beq.n	8010e04 <round+0x60>
 8010e18:	2201      	movs	r2, #1
 8010e1a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8010e1e:	fa02 f404 	lsl.w	r4, r2, r4
 8010e22:	1931      	adds	r1, r6, r4
 8010e24:	bf28      	it	cs
 8010e26:	189b      	addcs	r3, r3, r2
 8010e28:	ea21 0100 	bic.w	r1, r1, r0
 8010e2c:	461f      	mov	r7, r3
 8010e2e:	460e      	mov	r6, r1
 8010e30:	e7e8      	b.n	8010e04 <round+0x60>
 8010e32:	bf00      	nop
 8010e34:	000fffff 	.word	0x000fffff

08010e38 <__errno>:
 8010e38:	4b01      	ldr	r3, [pc, #4]	; (8010e40 <__errno+0x8>)
 8010e3a:	6818      	ldr	r0, [r3, #0]
 8010e3c:	4770      	bx	lr
 8010e3e:	bf00      	nop
 8010e40:	20000038 	.word	0x20000038

08010e44 <__sflush_r>:
 8010e44:	898a      	ldrh	r2, [r1, #12]
 8010e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e4a:	4605      	mov	r5, r0
 8010e4c:	0710      	lsls	r0, r2, #28
 8010e4e:	460c      	mov	r4, r1
 8010e50:	d458      	bmi.n	8010f04 <__sflush_r+0xc0>
 8010e52:	684b      	ldr	r3, [r1, #4]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	dc05      	bgt.n	8010e64 <__sflush_r+0x20>
 8010e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	dc02      	bgt.n	8010e64 <__sflush_r+0x20>
 8010e5e:	2000      	movs	r0, #0
 8010e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e66:	2e00      	cmp	r6, #0
 8010e68:	d0f9      	beq.n	8010e5e <__sflush_r+0x1a>
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010e70:	682f      	ldr	r7, [r5, #0]
 8010e72:	6a21      	ldr	r1, [r4, #32]
 8010e74:	602b      	str	r3, [r5, #0]
 8010e76:	d032      	beq.n	8010ede <__sflush_r+0x9a>
 8010e78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e7a:	89a3      	ldrh	r3, [r4, #12]
 8010e7c:	075a      	lsls	r2, r3, #29
 8010e7e:	d505      	bpl.n	8010e8c <__sflush_r+0x48>
 8010e80:	6863      	ldr	r3, [r4, #4]
 8010e82:	1ac0      	subs	r0, r0, r3
 8010e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e86:	b10b      	cbz	r3, 8010e8c <__sflush_r+0x48>
 8010e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e8a:	1ac0      	subs	r0, r0, r3
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	4602      	mov	r2, r0
 8010e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e92:	6a21      	ldr	r1, [r4, #32]
 8010e94:	4628      	mov	r0, r5
 8010e96:	47b0      	blx	r6
 8010e98:	1c43      	adds	r3, r0, #1
 8010e9a:	89a3      	ldrh	r3, [r4, #12]
 8010e9c:	d106      	bne.n	8010eac <__sflush_r+0x68>
 8010e9e:	6829      	ldr	r1, [r5, #0]
 8010ea0:	291d      	cmp	r1, #29
 8010ea2:	d848      	bhi.n	8010f36 <__sflush_r+0xf2>
 8010ea4:	4a29      	ldr	r2, [pc, #164]	; (8010f4c <__sflush_r+0x108>)
 8010ea6:	40ca      	lsrs	r2, r1
 8010ea8:	07d6      	lsls	r6, r2, #31
 8010eaa:	d544      	bpl.n	8010f36 <__sflush_r+0xf2>
 8010eac:	2200      	movs	r2, #0
 8010eae:	6062      	str	r2, [r4, #4]
 8010eb0:	04d9      	lsls	r1, r3, #19
 8010eb2:	6922      	ldr	r2, [r4, #16]
 8010eb4:	6022      	str	r2, [r4, #0]
 8010eb6:	d504      	bpl.n	8010ec2 <__sflush_r+0x7e>
 8010eb8:	1c42      	adds	r2, r0, #1
 8010eba:	d101      	bne.n	8010ec0 <__sflush_r+0x7c>
 8010ebc:	682b      	ldr	r3, [r5, #0]
 8010ebe:	b903      	cbnz	r3, 8010ec2 <__sflush_r+0x7e>
 8010ec0:	6560      	str	r0, [r4, #84]	; 0x54
 8010ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ec4:	602f      	str	r7, [r5, #0]
 8010ec6:	2900      	cmp	r1, #0
 8010ec8:	d0c9      	beq.n	8010e5e <__sflush_r+0x1a>
 8010eca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ece:	4299      	cmp	r1, r3
 8010ed0:	d002      	beq.n	8010ed8 <__sflush_r+0x94>
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f000 f9fa 	bl	80112cc <_free_r>
 8010ed8:	2000      	movs	r0, #0
 8010eda:	6360      	str	r0, [r4, #52]	; 0x34
 8010edc:	e7c0      	b.n	8010e60 <__sflush_r+0x1c>
 8010ede:	2301      	movs	r3, #1
 8010ee0:	4628      	mov	r0, r5
 8010ee2:	47b0      	blx	r6
 8010ee4:	1c41      	adds	r1, r0, #1
 8010ee6:	d1c8      	bne.n	8010e7a <__sflush_r+0x36>
 8010ee8:	682b      	ldr	r3, [r5, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d0c5      	beq.n	8010e7a <__sflush_r+0x36>
 8010eee:	2b1d      	cmp	r3, #29
 8010ef0:	d001      	beq.n	8010ef6 <__sflush_r+0xb2>
 8010ef2:	2b16      	cmp	r3, #22
 8010ef4:	d101      	bne.n	8010efa <__sflush_r+0xb6>
 8010ef6:	602f      	str	r7, [r5, #0]
 8010ef8:	e7b1      	b.n	8010e5e <__sflush_r+0x1a>
 8010efa:	89a3      	ldrh	r3, [r4, #12]
 8010efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f00:	81a3      	strh	r3, [r4, #12]
 8010f02:	e7ad      	b.n	8010e60 <__sflush_r+0x1c>
 8010f04:	690f      	ldr	r7, [r1, #16]
 8010f06:	2f00      	cmp	r7, #0
 8010f08:	d0a9      	beq.n	8010e5e <__sflush_r+0x1a>
 8010f0a:	0793      	lsls	r3, r2, #30
 8010f0c:	680e      	ldr	r6, [r1, #0]
 8010f0e:	bf08      	it	eq
 8010f10:	694b      	ldreq	r3, [r1, #20]
 8010f12:	600f      	str	r7, [r1, #0]
 8010f14:	bf18      	it	ne
 8010f16:	2300      	movne	r3, #0
 8010f18:	eba6 0807 	sub.w	r8, r6, r7
 8010f1c:	608b      	str	r3, [r1, #8]
 8010f1e:	f1b8 0f00 	cmp.w	r8, #0
 8010f22:	dd9c      	ble.n	8010e5e <__sflush_r+0x1a>
 8010f24:	4643      	mov	r3, r8
 8010f26:	463a      	mov	r2, r7
 8010f28:	6a21      	ldr	r1, [r4, #32]
 8010f2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	47b0      	blx	r6
 8010f30:	2800      	cmp	r0, #0
 8010f32:	dc06      	bgt.n	8010f42 <__sflush_r+0xfe>
 8010f34:	89a3      	ldrh	r3, [r4, #12]
 8010f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f3a:	81a3      	strh	r3, [r4, #12]
 8010f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f40:	e78e      	b.n	8010e60 <__sflush_r+0x1c>
 8010f42:	4407      	add	r7, r0
 8010f44:	eba8 0800 	sub.w	r8, r8, r0
 8010f48:	e7e9      	b.n	8010f1e <__sflush_r+0xda>
 8010f4a:	bf00      	nop
 8010f4c:	20400001 	.word	0x20400001

08010f50 <_fflush_r>:
 8010f50:	b538      	push	{r3, r4, r5, lr}
 8010f52:	690b      	ldr	r3, [r1, #16]
 8010f54:	4605      	mov	r5, r0
 8010f56:	460c      	mov	r4, r1
 8010f58:	b1db      	cbz	r3, 8010f92 <_fflush_r+0x42>
 8010f5a:	b118      	cbz	r0, 8010f64 <_fflush_r+0x14>
 8010f5c:	6983      	ldr	r3, [r0, #24]
 8010f5e:	b90b      	cbnz	r3, 8010f64 <_fflush_r+0x14>
 8010f60:	f000 f872 	bl	8011048 <__sinit>
 8010f64:	4b0c      	ldr	r3, [pc, #48]	; (8010f98 <_fflush_r+0x48>)
 8010f66:	429c      	cmp	r4, r3
 8010f68:	d109      	bne.n	8010f7e <_fflush_r+0x2e>
 8010f6a:	686c      	ldr	r4, [r5, #4]
 8010f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f70:	b17b      	cbz	r3, 8010f92 <_fflush_r+0x42>
 8010f72:	4621      	mov	r1, r4
 8010f74:	4628      	mov	r0, r5
 8010f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f7a:	f7ff bf63 	b.w	8010e44 <__sflush_r>
 8010f7e:	4b07      	ldr	r3, [pc, #28]	; (8010f9c <_fflush_r+0x4c>)
 8010f80:	429c      	cmp	r4, r3
 8010f82:	d101      	bne.n	8010f88 <_fflush_r+0x38>
 8010f84:	68ac      	ldr	r4, [r5, #8]
 8010f86:	e7f1      	b.n	8010f6c <_fflush_r+0x1c>
 8010f88:	4b05      	ldr	r3, [pc, #20]	; (8010fa0 <_fflush_r+0x50>)
 8010f8a:	429c      	cmp	r4, r3
 8010f8c:	bf08      	it	eq
 8010f8e:	68ec      	ldreq	r4, [r5, #12]
 8010f90:	e7ec      	b.n	8010f6c <_fflush_r+0x1c>
 8010f92:	2000      	movs	r0, #0
 8010f94:	bd38      	pop	{r3, r4, r5, pc}
 8010f96:	bf00      	nop
 8010f98:	08016790 	.word	0x08016790
 8010f9c:	080167b0 	.word	0x080167b0
 8010fa0:	08016770 	.word	0x08016770

08010fa4 <fflush>:
 8010fa4:	4601      	mov	r1, r0
 8010fa6:	b920      	cbnz	r0, 8010fb2 <fflush+0xe>
 8010fa8:	4b04      	ldr	r3, [pc, #16]	; (8010fbc <fflush+0x18>)
 8010faa:	4905      	ldr	r1, [pc, #20]	; (8010fc0 <fflush+0x1c>)
 8010fac:	6818      	ldr	r0, [r3, #0]
 8010fae:	f000 b8d3 	b.w	8011158 <_fwalk_reent>
 8010fb2:	4b04      	ldr	r3, [pc, #16]	; (8010fc4 <fflush+0x20>)
 8010fb4:	6818      	ldr	r0, [r3, #0]
 8010fb6:	f7ff bfcb 	b.w	8010f50 <_fflush_r>
 8010fba:	bf00      	nop
 8010fbc:	080167d0 	.word	0x080167d0
 8010fc0:	08010f51 	.word	0x08010f51
 8010fc4:	20000038 	.word	0x20000038

08010fc8 <std>:
 8010fc8:	2300      	movs	r3, #0
 8010fca:	b510      	push	{r4, lr}
 8010fcc:	4604      	mov	r4, r0
 8010fce:	e9c0 3300 	strd	r3, r3, [r0]
 8010fd2:	6083      	str	r3, [r0, #8]
 8010fd4:	8181      	strh	r1, [r0, #12]
 8010fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8010fd8:	81c2      	strh	r2, [r0, #14]
 8010fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010fde:	6183      	str	r3, [r0, #24]
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	2208      	movs	r2, #8
 8010fe4:	305c      	adds	r0, #92	; 0x5c
 8010fe6:	f000 f968 	bl	80112ba <memset>
 8010fea:	4b05      	ldr	r3, [pc, #20]	; (8011000 <std+0x38>)
 8010fec:	6263      	str	r3, [r4, #36]	; 0x24
 8010fee:	4b05      	ldr	r3, [pc, #20]	; (8011004 <std+0x3c>)
 8010ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8010ff2:	4b05      	ldr	r3, [pc, #20]	; (8011008 <std+0x40>)
 8010ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010ff6:	4b05      	ldr	r3, [pc, #20]	; (801100c <std+0x44>)
 8010ff8:	6224      	str	r4, [r4, #32]
 8010ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8010ffc:	bd10      	pop	{r4, pc}
 8010ffe:	bf00      	nop
 8011000:	0801302d 	.word	0x0801302d
 8011004:	0801304f 	.word	0x0801304f
 8011008:	08013087 	.word	0x08013087
 801100c:	080130ab 	.word	0x080130ab

08011010 <_cleanup_r>:
 8011010:	4901      	ldr	r1, [pc, #4]	; (8011018 <_cleanup_r+0x8>)
 8011012:	f000 b8a1 	b.w	8011158 <_fwalk_reent>
 8011016:	bf00      	nop
 8011018:	08010f51 	.word	0x08010f51

0801101c <__sfmoreglue>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	1e4a      	subs	r2, r1, #1
 8011020:	2568      	movs	r5, #104	; 0x68
 8011022:	4355      	muls	r5, r2
 8011024:	460e      	mov	r6, r1
 8011026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801102a:	f000 f99d 	bl	8011368 <_malloc_r>
 801102e:	4604      	mov	r4, r0
 8011030:	b140      	cbz	r0, 8011044 <__sfmoreglue+0x28>
 8011032:	2100      	movs	r1, #0
 8011034:	e9c0 1600 	strd	r1, r6, [r0]
 8011038:	300c      	adds	r0, #12
 801103a:	60a0      	str	r0, [r4, #8]
 801103c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011040:	f000 f93b 	bl	80112ba <memset>
 8011044:	4620      	mov	r0, r4
 8011046:	bd70      	pop	{r4, r5, r6, pc}

08011048 <__sinit>:
 8011048:	6983      	ldr	r3, [r0, #24]
 801104a:	b510      	push	{r4, lr}
 801104c:	4604      	mov	r4, r0
 801104e:	bb33      	cbnz	r3, 801109e <__sinit+0x56>
 8011050:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011054:	6503      	str	r3, [r0, #80]	; 0x50
 8011056:	4b12      	ldr	r3, [pc, #72]	; (80110a0 <__sinit+0x58>)
 8011058:	4a12      	ldr	r2, [pc, #72]	; (80110a4 <__sinit+0x5c>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	6282      	str	r2, [r0, #40]	; 0x28
 801105e:	4298      	cmp	r0, r3
 8011060:	bf04      	itt	eq
 8011062:	2301      	moveq	r3, #1
 8011064:	6183      	streq	r3, [r0, #24]
 8011066:	f000 f81f 	bl	80110a8 <__sfp>
 801106a:	6060      	str	r0, [r4, #4]
 801106c:	4620      	mov	r0, r4
 801106e:	f000 f81b 	bl	80110a8 <__sfp>
 8011072:	60a0      	str	r0, [r4, #8]
 8011074:	4620      	mov	r0, r4
 8011076:	f000 f817 	bl	80110a8 <__sfp>
 801107a:	2200      	movs	r2, #0
 801107c:	60e0      	str	r0, [r4, #12]
 801107e:	2104      	movs	r1, #4
 8011080:	6860      	ldr	r0, [r4, #4]
 8011082:	f7ff ffa1 	bl	8010fc8 <std>
 8011086:	2201      	movs	r2, #1
 8011088:	2109      	movs	r1, #9
 801108a:	68a0      	ldr	r0, [r4, #8]
 801108c:	f7ff ff9c 	bl	8010fc8 <std>
 8011090:	2202      	movs	r2, #2
 8011092:	2112      	movs	r1, #18
 8011094:	68e0      	ldr	r0, [r4, #12]
 8011096:	f7ff ff97 	bl	8010fc8 <std>
 801109a:	2301      	movs	r3, #1
 801109c:	61a3      	str	r3, [r4, #24]
 801109e:	bd10      	pop	{r4, pc}
 80110a0:	080167d0 	.word	0x080167d0
 80110a4:	08011011 	.word	0x08011011

080110a8 <__sfp>:
 80110a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110aa:	4b1b      	ldr	r3, [pc, #108]	; (8011118 <__sfp+0x70>)
 80110ac:	681e      	ldr	r6, [r3, #0]
 80110ae:	69b3      	ldr	r3, [r6, #24]
 80110b0:	4607      	mov	r7, r0
 80110b2:	b913      	cbnz	r3, 80110ba <__sfp+0x12>
 80110b4:	4630      	mov	r0, r6
 80110b6:	f7ff ffc7 	bl	8011048 <__sinit>
 80110ba:	3648      	adds	r6, #72	; 0x48
 80110bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80110c0:	3b01      	subs	r3, #1
 80110c2:	d503      	bpl.n	80110cc <__sfp+0x24>
 80110c4:	6833      	ldr	r3, [r6, #0]
 80110c6:	b133      	cbz	r3, 80110d6 <__sfp+0x2e>
 80110c8:	6836      	ldr	r6, [r6, #0]
 80110ca:	e7f7      	b.n	80110bc <__sfp+0x14>
 80110cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80110d0:	b16d      	cbz	r5, 80110ee <__sfp+0x46>
 80110d2:	3468      	adds	r4, #104	; 0x68
 80110d4:	e7f4      	b.n	80110c0 <__sfp+0x18>
 80110d6:	2104      	movs	r1, #4
 80110d8:	4638      	mov	r0, r7
 80110da:	f7ff ff9f 	bl	801101c <__sfmoreglue>
 80110de:	6030      	str	r0, [r6, #0]
 80110e0:	2800      	cmp	r0, #0
 80110e2:	d1f1      	bne.n	80110c8 <__sfp+0x20>
 80110e4:	230c      	movs	r3, #12
 80110e6:	603b      	str	r3, [r7, #0]
 80110e8:	4604      	mov	r4, r0
 80110ea:	4620      	mov	r0, r4
 80110ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110ee:	4b0b      	ldr	r3, [pc, #44]	; (801111c <__sfp+0x74>)
 80110f0:	6665      	str	r5, [r4, #100]	; 0x64
 80110f2:	e9c4 5500 	strd	r5, r5, [r4]
 80110f6:	60a5      	str	r5, [r4, #8]
 80110f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80110fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011100:	2208      	movs	r2, #8
 8011102:	4629      	mov	r1, r5
 8011104:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011108:	f000 f8d7 	bl	80112ba <memset>
 801110c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011110:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011114:	e7e9      	b.n	80110ea <__sfp+0x42>
 8011116:	bf00      	nop
 8011118:	080167d0 	.word	0x080167d0
 801111c:	ffff0001 	.word	0xffff0001

08011120 <_fwalk>:
 8011120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011124:	4688      	mov	r8, r1
 8011126:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801112a:	2600      	movs	r6, #0
 801112c:	b914      	cbnz	r4, 8011134 <_fwalk+0x14>
 801112e:	4630      	mov	r0, r6
 8011130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011134:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011138:	3f01      	subs	r7, #1
 801113a:	d501      	bpl.n	8011140 <_fwalk+0x20>
 801113c:	6824      	ldr	r4, [r4, #0]
 801113e:	e7f5      	b.n	801112c <_fwalk+0xc>
 8011140:	89ab      	ldrh	r3, [r5, #12]
 8011142:	2b01      	cmp	r3, #1
 8011144:	d906      	bls.n	8011154 <_fwalk+0x34>
 8011146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801114a:	3301      	adds	r3, #1
 801114c:	d002      	beq.n	8011154 <_fwalk+0x34>
 801114e:	4628      	mov	r0, r5
 8011150:	47c0      	blx	r8
 8011152:	4306      	orrs	r6, r0
 8011154:	3568      	adds	r5, #104	; 0x68
 8011156:	e7ef      	b.n	8011138 <_fwalk+0x18>

08011158 <_fwalk_reent>:
 8011158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801115c:	4680      	mov	r8, r0
 801115e:	4689      	mov	r9, r1
 8011160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011164:	2600      	movs	r6, #0
 8011166:	b914      	cbnz	r4, 801116e <_fwalk_reent+0x16>
 8011168:	4630      	mov	r0, r6
 801116a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801116e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011172:	3f01      	subs	r7, #1
 8011174:	d501      	bpl.n	801117a <_fwalk_reent+0x22>
 8011176:	6824      	ldr	r4, [r4, #0]
 8011178:	e7f5      	b.n	8011166 <_fwalk_reent+0xe>
 801117a:	89ab      	ldrh	r3, [r5, #12]
 801117c:	2b01      	cmp	r3, #1
 801117e:	d907      	bls.n	8011190 <_fwalk_reent+0x38>
 8011180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011184:	3301      	adds	r3, #1
 8011186:	d003      	beq.n	8011190 <_fwalk_reent+0x38>
 8011188:	4629      	mov	r1, r5
 801118a:	4640      	mov	r0, r8
 801118c:	47c8      	blx	r9
 801118e:	4306      	orrs	r6, r0
 8011190:	3568      	adds	r5, #104	; 0x68
 8011192:	e7ee      	b.n	8011172 <_fwalk_reent+0x1a>

08011194 <__libc_init_array>:
 8011194:	b570      	push	{r4, r5, r6, lr}
 8011196:	4e0d      	ldr	r6, [pc, #52]	; (80111cc <__libc_init_array+0x38>)
 8011198:	4c0d      	ldr	r4, [pc, #52]	; (80111d0 <__libc_init_array+0x3c>)
 801119a:	1ba4      	subs	r4, r4, r6
 801119c:	10a4      	asrs	r4, r4, #2
 801119e:	2500      	movs	r5, #0
 80111a0:	42a5      	cmp	r5, r4
 80111a2:	d109      	bne.n	80111b8 <__libc_init_array+0x24>
 80111a4:	4e0b      	ldr	r6, [pc, #44]	; (80111d4 <__libc_init_array+0x40>)
 80111a6:	4c0c      	ldr	r4, [pc, #48]	; (80111d8 <__libc_init_array+0x44>)
 80111a8:	f005 f838 	bl	801621c <_init>
 80111ac:	1ba4      	subs	r4, r4, r6
 80111ae:	10a4      	asrs	r4, r4, #2
 80111b0:	2500      	movs	r5, #0
 80111b2:	42a5      	cmp	r5, r4
 80111b4:	d105      	bne.n	80111c2 <__libc_init_array+0x2e>
 80111b6:	bd70      	pop	{r4, r5, r6, pc}
 80111b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80111bc:	4798      	blx	r3
 80111be:	3501      	adds	r5, #1
 80111c0:	e7ee      	b.n	80111a0 <__libc_init_array+0xc>
 80111c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80111c6:	4798      	blx	r3
 80111c8:	3501      	adds	r5, #1
 80111ca:	e7f2      	b.n	80111b2 <__libc_init_array+0x1e>
 80111cc:	08016aa8 	.word	0x08016aa8
 80111d0:	08016aa8 	.word	0x08016aa8
 80111d4:	08016aa8 	.word	0x08016aa8
 80111d8:	08016aac 	.word	0x08016aac

080111dc <__swhatbuf_r>:
 80111dc:	b570      	push	{r4, r5, r6, lr}
 80111de:	460e      	mov	r6, r1
 80111e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111e4:	2900      	cmp	r1, #0
 80111e6:	b096      	sub	sp, #88	; 0x58
 80111e8:	4614      	mov	r4, r2
 80111ea:	461d      	mov	r5, r3
 80111ec:	da07      	bge.n	80111fe <__swhatbuf_r+0x22>
 80111ee:	2300      	movs	r3, #0
 80111f0:	602b      	str	r3, [r5, #0]
 80111f2:	89b3      	ldrh	r3, [r6, #12]
 80111f4:	061a      	lsls	r2, r3, #24
 80111f6:	d410      	bmi.n	801121a <__swhatbuf_r+0x3e>
 80111f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111fc:	e00e      	b.n	801121c <__swhatbuf_r+0x40>
 80111fe:	466a      	mov	r2, sp
 8011200:	f003 fe66 	bl	8014ed0 <_fstat_r>
 8011204:	2800      	cmp	r0, #0
 8011206:	dbf2      	blt.n	80111ee <__swhatbuf_r+0x12>
 8011208:	9a01      	ldr	r2, [sp, #4]
 801120a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801120e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011212:	425a      	negs	r2, r3
 8011214:	415a      	adcs	r2, r3
 8011216:	602a      	str	r2, [r5, #0]
 8011218:	e7ee      	b.n	80111f8 <__swhatbuf_r+0x1c>
 801121a:	2340      	movs	r3, #64	; 0x40
 801121c:	2000      	movs	r0, #0
 801121e:	6023      	str	r3, [r4, #0]
 8011220:	b016      	add	sp, #88	; 0x58
 8011222:	bd70      	pop	{r4, r5, r6, pc}

08011224 <__smakebuf_r>:
 8011224:	898b      	ldrh	r3, [r1, #12]
 8011226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011228:	079d      	lsls	r5, r3, #30
 801122a:	4606      	mov	r6, r0
 801122c:	460c      	mov	r4, r1
 801122e:	d507      	bpl.n	8011240 <__smakebuf_r+0x1c>
 8011230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011234:	6023      	str	r3, [r4, #0]
 8011236:	6123      	str	r3, [r4, #16]
 8011238:	2301      	movs	r3, #1
 801123a:	6163      	str	r3, [r4, #20]
 801123c:	b002      	add	sp, #8
 801123e:	bd70      	pop	{r4, r5, r6, pc}
 8011240:	ab01      	add	r3, sp, #4
 8011242:	466a      	mov	r2, sp
 8011244:	f7ff ffca 	bl	80111dc <__swhatbuf_r>
 8011248:	9900      	ldr	r1, [sp, #0]
 801124a:	4605      	mov	r5, r0
 801124c:	4630      	mov	r0, r6
 801124e:	f000 f88b 	bl	8011368 <_malloc_r>
 8011252:	b948      	cbnz	r0, 8011268 <__smakebuf_r+0x44>
 8011254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011258:	059a      	lsls	r2, r3, #22
 801125a:	d4ef      	bmi.n	801123c <__smakebuf_r+0x18>
 801125c:	f023 0303 	bic.w	r3, r3, #3
 8011260:	f043 0302 	orr.w	r3, r3, #2
 8011264:	81a3      	strh	r3, [r4, #12]
 8011266:	e7e3      	b.n	8011230 <__smakebuf_r+0xc>
 8011268:	4b0d      	ldr	r3, [pc, #52]	; (80112a0 <__smakebuf_r+0x7c>)
 801126a:	62b3      	str	r3, [r6, #40]	; 0x28
 801126c:	89a3      	ldrh	r3, [r4, #12]
 801126e:	6020      	str	r0, [r4, #0]
 8011270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011274:	81a3      	strh	r3, [r4, #12]
 8011276:	9b00      	ldr	r3, [sp, #0]
 8011278:	6163      	str	r3, [r4, #20]
 801127a:	9b01      	ldr	r3, [sp, #4]
 801127c:	6120      	str	r0, [r4, #16]
 801127e:	b15b      	cbz	r3, 8011298 <__smakebuf_r+0x74>
 8011280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011284:	4630      	mov	r0, r6
 8011286:	f004 f95b 	bl	8015540 <_isatty_r>
 801128a:	b128      	cbz	r0, 8011298 <__smakebuf_r+0x74>
 801128c:	89a3      	ldrh	r3, [r4, #12]
 801128e:	f023 0303 	bic.w	r3, r3, #3
 8011292:	f043 0301 	orr.w	r3, r3, #1
 8011296:	81a3      	strh	r3, [r4, #12]
 8011298:	89a3      	ldrh	r3, [r4, #12]
 801129a:	431d      	orrs	r5, r3
 801129c:	81a5      	strh	r5, [r4, #12]
 801129e:	e7cd      	b.n	801123c <__smakebuf_r+0x18>
 80112a0:	08011011 	.word	0x08011011

080112a4 <memcpy>:
 80112a4:	b510      	push	{r4, lr}
 80112a6:	1e43      	subs	r3, r0, #1
 80112a8:	440a      	add	r2, r1
 80112aa:	4291      	cmp	r1, r2
 80112ac:	d100      	bne.n	80112b0 <memcpy+0xc>
 80112ae:	bd10      	pop	{r4, pc}
 80112b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112b8:	e7f7      	b.n	80112aa <memcpy+0x6>

080112ba <memset>:
 80112ba:	4402      	add	r2, r0
 80112bc:	4603      	mov	r3, r0
 80112be:	4293      	cmp	r3, r2
 80112c0:	d100      	bne.n	80112c4 <memset+0xa>
 80112c2:	4770      	bx	lr
 80112c4:	f803 1b01 	strb.w	r1, [r3], #1
 80112c8:	e7f9      	b.n	80112be <memset+0x4>
	...

080112cc <_free_r>:
 80112cc:	b538      	push	{r3, r4, r5, lr}
 80112ce:	4605      	mov	r5, r0
 80112d0:	2900      	cmp	r1, #0
 80112d2:	d045      	beq.n	8011360 <_free_r+0x94>
 80112d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112d8:	1f0c      	subs	r4, r1, #4
 80112da:	2b00      	cmp	r3, #0
 80112dc:	bfb8      	it	lt
 80112de:	18e4      	addlt	r4, r4, r3
 80112e0:	f004 f9a5 	bl	801562e <__malloc_lock>
 80112e4:	4a1f      	ldr	r2, [pc, #124]	; (8011364 <_free_r+0x98>)
 80112e6:	6813      	ldr	r3, [r2, #0]
 80112e8:	4610      	mov	r0, r2
 80112ea:	b933      	cbnz	r3, 80112fa <_free_r+0x2e>
 80112ec:	6063      	str	r3, [r4, #4]
 80112ee:	6014      	str	r4, [r2, #0]
 80112f0:	4628      	mov	r0, r5
 80112f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112f6:	f004 b99b 	b.w	8015630 <__malloc_unlock>
 80112fa:	42a3      	cmp	r3, r4
 80112fc:	d90c      	bls.n	8011318 <_free_r+0x4c>
 80112fe:	6821      	ldr	r1, [r4, #0]
 8011300:	1862      	adds	r2, r4, r1
 8011302:	4293      	cmp	r3, r2
 8011304:	bf04      	itt	eq
 8011306:	681a      	ldreq	r2, [r3, #0]
 8011308:	685b      	ldreq	r3, [r3, #4]
 801130a:	6063      	str	r3, [r4, #4]
 801130c:	bf04      	itt	eq
 801130e:	1852      	addeq	r2, r2, r1
 8011310:	6022      	streq	r2, [r4, #0]
 8011312:	6004      	str	r4, [r0, #0]
 8011314:	e7ec      	b.n	80112f0 <_free_r+0x24>
 8011316:	4613      	mov	r3, r2
 8011318:	685a      	ldr	r2, [r3, #4]
 801131a:	b10a      	cbz	r2, 8011320 <_free_r+0x54>
 801131c:	42a2      	cmp	r2, r4
 801131e:	d9fa      	bls.n	8011316 <_free_r+0x4a>
 8011320:	6819      	ldr	r1, [r3, #0]
 8011322:	1858      	adds	r0, r3, r1
 8011324:	42a0      	cmp	r0, r4
 8011326:	d10b      	bne.n	8011340 <_free_r+0x74>
 8011328:	6820      	ldr	r0, [r4, #0]
 801132a:	4401      	add	r1, r0
 801132c:	1858      	adds	r0, r3, r1
 801132e:	4282      	cmp	r2, r0
 8011330:	6019      	str	r1, [r3, #0]
 8011332:	d1dd      	bne.n	80112f0 <_free_r+0x24>
 8011334:	6810      	ldr	r0, [r2, #0]
 8011336:	6852      	ldr	r2, [r2, #4]
 8011338:	605a      	str	r2, [r3, #4]
 801133a:	4401      	add	r1, r0
 801133c:	6019      	str	r1, [r3, #0]
 801133e:	e7d7      	b.n	80112f0 <_free_r+0x24>
 8011340:	d902      	bls.n	8011348 <_free_r+0x7c>
 8011342:	230c      	movs	r3, #12
 8011344:	602b      	str	r3, [r5, #0]
 8011346:	e7d3      	b.n	80112f0 <_free_r+0x24>
 8011348:	6820      	ldr	r0, [r4, #0]
 801134a:	1821      	adds	r1, r4, r0
 801134c:	428a      	cmp	r2, r1
 801134e:	bf04      	itt	eq
 8011350:	6811      	ldreq	r1, [r2, #0]
 8011352:	6852      	ldreq	r2, [r2, #4]
 8011354:	6062      	str	r2, [r4, #4]
 8011356:	bf04      	itt	eq
 8011358:	1809      	addeq	r1, r1, r0
 801135a:	6021      	streq	r1, [r4, #0]
 801135c:	605c      	str	r4, [r3, #4]
 801135e:	e7c7      	b.n	80112f0 <_free_r+0x24>
 8011360:	bd38      	pop	{r3, r4, r5, pc}
 8011362:	bf00      	nop
 8011364:	20009a1c 	.word	0x20009a1c

08011368 <_malloc_r>:
 8011368:	b570      	push	{r4, r5, r6, lr}
 801136a:	1ccd      	adds	r5, r1, #3
 801136c:	f025 0503 	bic.w	r5, r5, #3
 8011370:	3508      	adds	r5, #8
 8011372:	2d0c      	cmp	r5, #12
 8011374:	bf38      	it	cc
 8011376:	250c      	movcc	r5, #12
 8011378:	2d00      	cmp	r5, #0
 801137a:	4606      	mov	r6, r0
 801137c:	db01      	blt.n	8011382 <_malloc_r+0x1a>
 801137e:	42a9      	cmp	r1, r5
 8011380:	d903      	bls.n	801138a <_malloc_r+0x22>
 8011382:	230c      	movs	r3, #12
 8011384:	6033      	str	r3, [r6, #0]
 8011386:	2000      	movs	r0, #0
 8011388:	bd70      	pop	{r4, r5, r6, pc}
 801138a:	f004 f950 	bl	801562e <__malloc_lock>
 801138e:	4a21      	ldr	r2, [pc, #132]	; (8011414 <_malloc_r+0xac>)
 8011390:	6814      	ldr	r4, [r2, #0]
 8011392:	4621      	mov	r1, r4
 8011394:	b991      	cbnz	r1, 80113bc <_malloc_r+0x54>
 8011396:	4c20      	ldr	r4, [pc, #128]	; (8011418 <_malloc_r+0xb0>)
 8011398:	6823      	ldr	r3, [r4, #0]
 801139a:	b91b      	cbnz	r3, 80113a4 <_malloc_r+0x3c>
 801139c:	4630      	mov	r0, r6
 801139e:	f001 fd0f 	bl	8012dc0 <_sbrk_r>
 80113a2:	6020      	str	r0, [r4, #0]
 80113a4:	4629      	mov	r1, r5
 80113a6:	4630      	mov	r0, r6
 80113a8:	f001 fd0a 	bl	8012dc0 <_sbrk_r>
 80113ac:	1c43      	adds	r3, r0, #1
 80113ae:	d124      	bne.n	80113fa <_malloc_r+0x92>
 80113b0:	230c      	movs	r3, #12
 80113b2:	6033      	str	r3, [r6, #0]
 80113b4:	4630      	mov	r0, r6
 80113b6:	f004 f93b 	bl	8015630 <__malloc_unlock>
 80113ba:	e7e4      	b.n	8011386 <_malloc_r+0x1e>
 80113bc:	680b      	ldr	r3, [r1, #0]
 80113be:	1b5b      	subs	r3, r3, r5
 80113c0:	d418      	bmi.n	80113f4 <_malloc_r+0x8c>
 80113c2:	2b0b      	cmp	r3, #11
 80113c4:	d90f      	bls.n	80113e6 <_malloc_r+0x7e>
 80113c6:	600b      	str	r3, [r1, #0]
 80113c8:	50cd      	str	r5, [r1, r3]
 80113ca:	18cc      	adds	r4, r1, r3
 80113cc:	4630      	mov	r0, r6
 80113ce:	f004 f92f 	bl	8015630 <__malloc_unlock>
 80113d2:	f104 000b 	add.w	r0, r4, #11
 80113d6:	1d23      	adds	r3, r4, #4
 80113d8:	f020 0007 	bic.w	r0, r0, #7
 80113dc:	1ac3      	subs	r3, r0, r3
 80113de:	d0d3      	beq.n	8011388 <_malloc_r+0x20>
 80113e0:	425a      	negs	r2, r3
 80113e2:	50e2      	str	r2, [r4, r3]
 80113e4:	e7d0      	b.n	8011388 <_malloc_r+0x20>
 80113e6:	428c      	cmp	r4, r1
 80113e8:	684b      	ldr	r3, [r1, #4]
 80113ea:	bf16      	itet	ne
 80113ec:	6063      	strne	r3, [r4, #4]
 80113ee:	6013      	streq	r3, [r2, #0]
 80113f0:	460c      	movne	r4, r1
 80113f2:	e7eb      	b.n	80113cc <_malloc_r+0x64>
 80113f4:	460c      	mov	r4, r1
 80113f6:	6849      	ldr	r1, [r1, #4]
 80113f8:	e7cc      	b.n	8011394 <_malloc_r+0x2c>
 80113fa:	1cc4      	adds	r4, r0, #3
 80113fc:	f024 0403 	bic.w	r4, r4, #3
 8011400:	42a0      	cmp	r0, r4
 8011402:	d005      	beq.n	8011410 <_malloc_r+0xa8>
 8011404:	1a21      	subs	r1, r4, r0
 8011406:	4630      	mov	r0, r6
 8011408:	f001 fcda 	bl	8012dc0 <_sbrk_r>
 801140c:	3001      	adds	r0, #1
 801140e:	d0cf      	beq.n	80113b0 <_malloc_r+0x48>
 8011410:	6025      	str	r5, [r4, #0]
 8011412:	e7db      	b.n	80113cc <_malloc_r+0x64>
 8011414:	20009a1c 	.word	0x20009a1c
 8011418:	20009a20 	.word	0x20009a20

0801141c <__sfputc_r>:
 801141c:	6893      	ldr	r3, [r2, #8]
 801141e:	3b01      	subs	r3, #1
 8011420:	2b00      	cmp	r3, #0
 8011422:	b410      	push	{r4}
 8011424:	6093      	str	r3, [r2, #8]
 8011426:	da08      	bge.n	801143a <__sfputc_r+0x1e>
 8011428:	6994      	ldr	r4, [r2, #24]
 801142a:	42a3      	cmp	r3, r4
 801142c:	db01      	blt.n	8011432 <__sfputc_r+0x16>
 801142e:	290a      	cmp	r1, #10
 8011430:	d103      	bne.n	801143a <__sfputc_r+0x1e>
 8011432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011436:	f002 be25 	b.w	8014084 <__swbuf_r>
 801143a:	6813      	ldr	r3, [r2, #0]
 801143c:	1c58      	adds	r0, r3, #1
 801143e:	6010      	str	r0, [r2, #0]
 8011440:	7019      	strb	r1, [r3, #0]
 8011442:	4608      	mov	r0, r1
 8011444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011448:	4770      	bx	lr

0801144a <__sfputs_r>:
 801144a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801144c:	4606      	mov	r6, r0
 801144e:	460f      	mov	r7, r1
 8011450:	4614      	mov	r4, r2
 8011452:	18d5      	adds	r5, r2, r3
 8011454:	42ac      	cmp	r4, r5
 8011456:	d101      	bne.n	801145c <__sfputs_r+0x12>
 8011458:	2000      	movs	r0, #0
 801145a:	e007      	b.n	801146c <__sfputs_r+0x22>
 801145c:	463a      	mov	r2, r7
 801145e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011462:	4630      	mov	r0, r6
 8011464:	f7ff ffda 	bl	801141c <__sfputc_r>
 8011468:	1c43      	adds	r3, r0, #1
 801146a:	d1f3      	bne.n	8011454 <__sfputs_r+0xa>
 801146c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011470 <_vfiprintf_r>:
 8011470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011474:	460c      	mov	r4, r1
 8011476:	b09d      	sub	sp, #116	; 0x74
 8011478:	4617      	mov	r7, r2
 801147a:	461d      	mov	r5, r3
 801147c:	4606      	mov	r6, r0
 801147e:	b118      	cbz	r0, 8011488 <_vfiprintf_r+0x18>
 8011480:	6983      	ldr	r3, [r0, #24]
 8011482:	b90b      	cbnz	r3, 8011488 <_vfiprintf_r+0x18>
 8011484:	f7ff fde0 	bl	8011048 <__sinit>
 8011488:	4b7c      	ldr	r3, [pc, #496]	; (801167c <_vfiprintf_r+0x20c>)
 801148a:	429c      	cmp	r4, r3
 801148c:	d158      	bne.n	8011540 <_vfiprintf_r+0xd0>
 801148e:	6874      	ldr	r4, [r6, #4]
 8011490:	89a3      	ldrh	r3, [r4, #12]
 8011492:	0718      	lsls	r0, r3, #28
 8011494:	d55e      	bpl.n	8011554 <_vfiprintf_r+0xe4>
 8011496:	6923      	ldr	r3, [r4, #16]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d05b      	beq.n	8011554 <_vfiprintf_r+0xe4>
 801149c:	2300      	movs	r3, #0
 801149e:	9309      	str	r3, [sp, #36]	; 0x24
 80114a0:	2320      	movs	r3, #32
 80114a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114a6:	2330      	movs	r3, #48	; 0x30
 80114a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114ac:	9503      	str	r5, [sp, #12]
 80114ae:	f04f 0b01 	mov.w	fp, #1
 80114b2:	46b8      	mov	r8, r7
 80114b4:	4645      	mov	r5, r8
 80114b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80114ba:	b10b      	cbz	r3, 80114c0 <_vfiprintf_r+0x50>
 80114bc:	2b25      	cmp	r3, #37	; 0x25
 80114be:	d154      	bne.n	801156a <_vfiprintf_r+0xfa>
 80114c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80114c4:	d00b      	beq.n	80114de <_vfiprintf_r+0x6e>
 80114c6:	4653      	mov	r3, sl
 80114c8:	463a      	mov	r2, r7
 80114ca:	4621      	mov	r1, r4
 80114cc:	4630      	mov	r0, r6
 80114ce:	f7ff ffbc 	bl	801144a <__sfputs_r>
 80114d2:	3001      	adds	r0, #1
 80114d4:	f000 80c2 	beq.w	801165c <_vfiprintf_r+0x1ec>
 80114d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114da:	4453      	add	r3, sl
 80114dc:	9309      	str	r3, [sp, #36]	; 0x24
 80114de:	f898 3000 	ldrb.w	r3, [r8]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f000 80ba 	beq.w	801165c <_vfiprintf_r+0x1ec>
 80114e8:	2300      	movs	r3, #0
 80114ea:	f04f 32ff 	mov.w	r2, #4294967295
 80114ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114f2:	9304      	str	r3, [sp, #16]
 80114f4:	9307      	str	r3, [sp, #28]
 80114f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80114fa:	931a      	str	r3, [sp, #104]	; 0x68
 80114fc:	46a8      	mov	r8, r5
 80114fe:	2205      	movs	r2, #5
 8011500:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011504:	485e      	ldr	r0, [pc, #376]	; (8011680 <_vfiprintf_r+0x210>)
 8011506:	f7f6 fda3 	bl	8008050 <memchr>
 801150a:	9b04      	ldr	r3, [sp, #16]
 801150c:	bb78      	cbnz	r0, 801156e <_vfiprintf_r+0xfe>
 801150e:	06d9      	lsls	r1, r3, #27
 8011510:	bf44      	itt	mi
 8011512:	2220      	movmi	r2, #32
 8011514:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011518:	071a      	lsls	r2, r3, #28
 801151a:	bf44      	itt	mi
 801151c:	222b      	movmi	r2, #43	; 0x2b
 801151e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011522:	782a      	ldrb	r2, [r5, #0]
 8011524:	2a2a      	cmp	r2, #42	; 0x2a
 8011526:	d02a      	beq.n	801157e <_vfiprintf_r+0x10e>
 8011528:	9a07      	ldr	r2, [sp, #28]
 801152a:	46a8      	mov	r8, r5
 801152c:	2000      	movs	r0, #0
 801152e:	250a      	movs	r5, #10
 8011530:	4641      	mov	r1, r8
 8011532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011536:	3b30      	subs	r3, #48	; 0x30
 8011538:	2b09      	cmp	r3, #9
 801153a:	d969      	bls.n	8011610 <_vfiprintf_r+0x1a0>
 801153c:	b360      	cbz	r0, 8011598 <_vfiprintf_r+0x128>
 801153e:	e024      	b.n	801158a <_vfiprintf_r+0x11a>
 8011540:	4b50      	ldr	r3, [pc, #320]	; (8011684 <_vfiprintf_r+0x214>)
 8011542:	429c      	cmp	r4, r3
 8011544:	d101      	bne.n	801154a <_vfiprintf_r+0xda>
 8011546:	68b4      	ldr	r4, [r6, #8]
 8011548:	e7a2      	b.n	8011490 <_vfiprintf_r+0x20>
 801154a:	4b4f      	ldr	r3, [pc, #316]	; (8011688 <_vfiprintf_r+0x218>)
 801154c:	429c      	cmp	r4, r3
 801154e:	bf08      	it	eq
 8011550:	68f4      	ldreq	r4, [r6, #12]
 8011552:	e79d      	b.n	8011490 <_vfiprintf_r+0x20>
 8011554:	4621      	mov	r1, r4
 8011556:	4630      	mov	r0, r6
 8011558:	f002 fdf8 	bl	801414c <__swsetup_r>
 801155c:	2800      	cmp	r0, #0
 801155e:	d09d      	beq.n	801149c <_vfiprintf_r+0x2c>
 8011560:	f04f 30ff 	mov.w	r0, #4294967295
 8011564:	b01d      	add	sp, #116	; 0x74
 8011566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801156a:	46a8      	mov	r8, r5
 801156c:	e7a2      	b.n	80114b4 <_vfiprintf_r+0x44>
 801156e:	4a44      	ldr	r2, [pc, #272]	; (8011680 <_vfiprintf_r+0x210>)
 8011570:	1a80      	subs	r0, r0, r2
 8011572:	fa0b f000 	lsl.w	r0, fp, r0
 8011576:	4318      	orrs	r0, r3
 8011578:	9004      	str	r0, [sp, #16]
 801157a:	4645      	mov	r5, r8
 801157c:	e7be      	b.n	80114fc <_vfiprintf_r+0x8c>
 801157e:	9a03      	ldr	r2, [sp, #12]
 8011580:	1d11      	adds	r1, r2, #4
 8011582:	6812      	ldr	r2, [r2, #0]
 8011584:	9103      	str	r1, [sp, #12]
 8011586:	2a00      	cmp	r2, #0
 8011588:	db01      	blt.n	801158e <_vfiprintf_r+0x11e>
 801158a:	9207      	str	r2, [sp, #28]
 801158c:	e004      	b.n	8011598 <_vfiprintf_r+0x128>
 801158e:	4252      	negs	r2, r2
 8011590:	f043 0302 	orr.w	r3, r3, #2
 8011594:	9207      	str	r2, [sp, #28]
 8011596:	9304      	str	r3, [sp, #16]
 8011598:	f898 3000 	ldrb.w	r3, [r8]
 801159c:	2b2e      	cmp	r3, #46	; 0x2e
 801159e:	d10e      	bne.n	80115be <_vfiprintf_r+0x14e>
 80115a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80115a4:	2b2a      	cmp	r3, #42	; 0x2a
 80115a6:	d138      	bne.n	801161a <_vfiprintf_r+0x1aa>
 80115a8:	9b03      	ldr	r3, [sp, #12]
 80115aa:	1d1a      	adds	r2, r3, #4
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	9203      	str	r2, [sp, #12]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	bfb8      	it	lt
 80115b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80115b8:	f108 0802 	add.w	r8, r8, #2
 80115bc:	9305      	str	r3, [sp, #20]
 80115be:	4d33      	ldr	r5, [pc, #204]	; (801168c <_vfiprintf_r+0x21c>)
 80115c0:	f898 1000 	ldrb.w	r1, [r8]
 80115c4:	2203      	movs	r2, #3
 80115c6:	4628      	mov	r0, r5
 80115c8:	f7f6 fd42 	bl	8008050 <memchr>
 80115cc:	b140      	cbz	r0, 80115e0 <_vfiprintf_r+0x170>
 80115ce:	2340      	movs	r3, #64	; 0x40
 80115d0:	1b40      	subs	r0, r0, r5
 80115d2:	fa03 f000 	lsl.w	r0, r3, r0
 80115d6:	9b04      	ldr	r3, [sp, #16]
 80115d8:	4303      	orrs	r3, r0
 80115da:	f108 0801 	add.w	r8, r8, #1
 80115de:	9304      	str	r3, [sp, #16]
 80115e0:	f898 1000 	ldrb.w	r1, [r8]
 80115e4:	482a      	ldr	r0, [pc, #168]	; (8011690 <_vfiprintf_r+0x220>)
 80115e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115ea:	2206      	movs	r2, #6
 80115ec:	f108 0701 	add.w	r7, r8, #1
 80115f0:	f7f6 fd2e 	bl	8008050 <memchr>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d037      	beq.n	8011668 <_vfiprintf_r+0x1f8>
 80115f8:	4b26      	ldr	r3, [pc, #152]	; (8011694 <_vfiprintf_r+0x224>)
 80115fa:	bb1b      	cbnz	r3, 8011644 <_vfiprintf_r+0x1d4>
 80115fc:	9b03      	ldr	r3, [sp, #12]
 80115fe:	3307      	adds	r3, #7
 8011600:	f023 0307 	bic.w	r3, r3, #7
 8011604:	3308      	adds	r3, #8
 8011606:	9303      	str	r3, [sp, #12]
 8011608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801160a:	444b      	add	r3, r9
 801160c:	9309      	str	r3, [sp, #36]	; 0x24
 801160e:	e750      	b.n	80114b2 <_vfiprintf_r+0x42>
 8011610:	fb05 3202 	mla	r2, r5, r2, r3
 8011614:	2001      	movs	r0, #1
 8011616:	4688      	mov	r8, r1
 8011618:	e78a      	b.n	8011530 <_vfiprintf_r+0xc0>
 801161a:	2300      	movs	r3, #0
 801161c:	f108 0801 	add.w	r8, r8, #1
 8011620:	9305      	str	r3, [sp, #20]
 8011622:	4619      	mov	r1, r3
 8011624:	250a      	movs	r5, #10
 8011626:	4640      	mov	r0, r8
 8011628:	f810 2b01 	ldrb.w	r2, [r0], #1
 801162c:	3a30      	subs	r2, #48	; 0x30
 801162e:	2a09      	cmp	r2, #9
 8011630:	d903      	bls.n	801163a <_vfiprintf_r+0x1ca>
 8011632:	2b00      	cmp	r3, #0
 8011634:	d0c3      	beq.n	80115be <_vfiprintf_r+0x14e>
 8011636:	9105      	str	r1, [sp, #20]
 8011638:	e7c1      	b.n	80115be <_vfiprintf_r+0x14e>
 801163a:	fb05 2101 	mla	r1, r5, r1, r2
 801163e:	2301      	movs	r3, #1
 8011640:	4680      	mov	r8, r0
 8011642:	e7f0      	b.n	8011626 <_vfiprintf_r+0x1b6>
 8011644:	ab03      	add	r3, sp, #12
 8011646:	9300      	str	r3, [sp, #0]
 8011648:	4622      	mov	r2, r4
 801164a:	4b13      	ldr	r3, [pc, #76]	; (8011698 <_vfiprintf_r+0x228>)
 801164c:	a904      	add	r1, sp, #16
 801164e:	4630      	mov	r0, r6
 8011650:	f000 f8b8 	bl	80117c4 <_printf_float>
 8011654:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011658:	4681      	mov	r9, r0
 801165a:	d1d5      	bne.n	8011608 <_vfiprintf_r+0x198>
 801165c:	89a3      	ldrh	r3, [r4, #12]
 801165e:	065b      	lsls	r3, r3, #25
 8011660:	f53f af7e 	bmi.w	8011560 <_vfiprintf_r+0xf0>
 8011664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011666:	e77d      	b.n	8011564 <_vfiprintf_r+0xf4>
 8011668:	ab03      	add	r3, sp, #12
 801166a:	9300      	str	r3, [sp, #0]
 801166c:	4622      	mov	r2, r4
 801166e:	4b0a      	ldr	r3, [pc, #40]	; (8011698 <_vfiprintf_r+0x228>)
 8011670:	a904      	add	r1, sp, #16
 8011672:	4630      	mov	r0, r6
 8011674:	f000 fb5c 	bl	8011d30 <_printf_i>
 8011678:	e7ec      	b.n	8011654 <_vfiprintf_r+0x1e4>
 801167a:	bf00      	nop
 801167c:	08016790 	.word	0x08016790
 8011680:	080167d4 	.word	0x080167d4
 8011684:	080167b0 	.word	0x080167b0
 8011688:	08016770 	.word	0x08016770
 801168c:	080167da 	.word	0x080167da
 8011690:	080167de 	.word	0x080167de
 8011694:	080117c5 	.word	0x080117c5
 8011698:	0801144b 	.word	0x0801144b

0801169c <__cvt>:
 801169c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116a0:	ec55 4b10 	vmov	r4, r5, d0
 80116a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80116a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80116aa:	2d00      	cmp	r5, #0
 80116ac:	460e      	mov	r6, r1
 80116ae:	4691      	mov	r9, r2
 80116b0:	4619      	mov	r1, r3
 80116b2:	bfb8      	it	lt
 80116b4:	4622      	movlt	r2, r4
 80116b6:	462b      	mov	r3, r5
 80116b8:	f027 0720 	bic.w	r7, r7, #32
 80116bc:	bfbb      	ittet	lt
 80116be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80116c2:	461d      	movlt	r5, r3
 80116c4:	2300      	movge	r3, #0
 80116c6:	232d      	movlt	r3, #45	; 0x2d
 80116c8:	bfb8      	it	lt
 80116ca:	4614      	movlt	r4, r2
 80116cc:	2f46      	cmp	r7, #70	; 0x46
 80116ce:	700b      	strb	r3, [r1, #0]
 80116d0:	d004      	beq.n	80116dc <__cvt+0x40>
 80116d2:	2f45      	cmp	r7, #69	; 0x45
 80116d4:	d100      	bne.n	80116d8 <__cvt+0x3c>
 80116d6:	3601      	adds	r6, #1
 80116d8:	2102      	movs	r1, #2
 80116da:	e000      	b.n	80116de <__cvt+0x42>
 80116dc:	2103      	movs	r1, #3
 80116de:	ab03      	add	r3, sp, #12
 80116e0:	9301      	str	r3, [sp, #4]
 80116e2:	ab02      	add	r3, sp, #8
 80116e4:	9300      	str	r3, [sp, #0]
 80116e6:	4632      	mov	r2, r6
 80116e8:	4653      	mov	r3, sl
 80116ea:	ec45 4b10 	vmov	d0, r4, r5
 80116ee:	f002 fe37 	bl	8014360 <_dtoa_r>
 80116f2:	2f47      	cmp	r7, #71	; 0x47
 80116f4:	4680      	mov	r8, r0
 80116f6:	d102      	bne.n	80116fe <__cvt+0x62>
 80116f8:	f019 0f01 	tst.w	r9, #1
 80116fc:	d026      	beq.n	801174c <__cvt+0xb0>
 80116fe:	2f46      	cmp	r7, #70	; 0x46
 8011700:	eb08 0906 	add.w	r9, r8, r6
 8011704:	d111      	bne.n	801172a <__cvt+0x8e>
 8011706:	f898 3000 	ldrb.w	r3, [r8]
 801170a:	2b30      	cmp	r3, #48	; 0x30
 801170c:	d10a      	bne.n	8011724 <__cvt+0x88>
 801170e:	2200      	movs	r2, #0
 8011710:	2300      	movs	r3, #0
 8011712:	4620      	mov	r0, r4
 8011714:	4629      	mov	r1, r5
 8011716:	f7f7 f90f 	bl	8008938 <__aeabi_dcmpeq>
 801171a:	b918      	cbnz	r0, 8011724 <__cvt+0x88>
 801171c:	f1c6 0601 	rsb	r6, r6, #1
 8011720:	f8ca 6000 	str.w	r6, [sl]
 8011724:	f8da 3000 	ldr.w	r3, [sl]
 8011728:	4499      	add	r9, r3
 801172a:	2200      	movs	r2, #0
 801172c:	2300      	movs	r3, #0
 801172e:	4620      	mov	r0, r4
 8011730:	4629      	mov	r1, r5
 8011732:	f7f7 f901 	bl	8008938 <__aeabi_dcmpeq>
 8011736:	b938      	cbnz	r0, 8011748 <__cvt+0xac>
 8011738:	2230      	movs	r2, #48	; 0x30
 801173a:	9b03      	ldr	r3, [sp, #12]
 801173c:	454b      	cmp	r3, r9
 801173e:	d205      	bcs.n	801174c <__cvt+0xb0>
 8011740:	1c59      	adds	r1, r3, #1
 8011742:	9103      	str	r1, [sp, #12]
 8011744:	701a      	strb	r2, [r3, #0]
 8011746:	e7f8      	b.n	801173a <__cvt+0x9e>
 8011748:	f8cd 900c 	str.w	r9, [sp, #12]
 801174c:	9b03      	ldr	r3, [sp, #12]
 801174e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011750:	eba3 0308 	sub.w	r3, r3, r8
 8011754:	4640      	mov	r0, r8
 8011756:	6013      	str	r3, [r2, #0]
 8011758:	b004      	add	sp, #16
 801175a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801175e <__exponent>:
 801175e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011760:	2900      	cmp	r1, #0
 8011762:	4604      	mov	r4, r0
 8011764:	bfba      	itte	lt
 8011766:	4249      	neglt	r1, r1
 8011768:	232d      	movlt	r3, #45	; 0x2d
 801176a:	232b      	movge	r3, #43	; 0x2b
 801176c:	2909      	cmp	r1, #9
 801176e:	f804 2b02 	strb.w	r2, [r4], #2
 8011772:	7043      	strb	r3, [r0, #1]
 8011774:	dd20      	ble.n	80117b8 <__exponent+0x5a>
 8011776:	f10d 0307 	add.w	r3, sp, #7
 801177a:	461f      	mov	r7, r3
 801177c:	260a      	movs	r6, #10
 801177e:	fb91 f5f6 	sdiv	r5, r1, r6
 8011782:	fb06 1115 	mls	r1, r6, r5, r1
 8011786:	3130      	adds	r1, #48	; 0x30
 8011788:	2d09      	cmp	r5, #9
 801178a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801178e:	f103 32ff 	add.w	r2, r3, #4294967295
 8011792:	4629      	mov	r1, r5
 8011794:	dc09      	bgt.n	80117aa <__exponent+0x4c>
 8011796:	3130      	adds	r1, #48	; 0x30
 8011798:	3b02      	subs	r3, #2
 801179a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801179e:	42bb      	cmp	r3, r7
 80117a0:	4622      	mov	r2, r4
 80117a2:	d304      	bcc.n	80117ae <__exponent+0x50>
 80117a4:	1a10      	subs	r0, r2, r0
 80117a6:	b003      	add	sp, #12
 80117a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117aa:	4613      	mov	r3, r2
 80117ac:	e7e7      	b.n	801177e <__exponent+0x20>
 80117ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117b2:	f804 2b01 	strb.w	r2, [r4], #1
 80117b6:	e7f2      	b.n	801179e <__exponent+0x40>
 80117b8:	2330      	movs	r3, #48	; 0x30
 80117ba:	4419      	add	r1, r3
 80117bc:	7083      	strb	r3, [r0, #2]
 80117be:	1d02      	adds	r2, r0, #4
 80117c0:	70c1      	strb	r1, [r0, #3]
 80117c2:	e7ef      	b.n	80117a4 <__exponent+0x46>

080117c4 <_printf_float>:
 80117c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c8:	b08d      	sub	sp, #52	; 0x34
 80117ca:	460c      	mov	r4, r1
 80117cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80117d0:	4616      	mov	r6, r2
 80117d2:	461f      	mov	r7, r3
 80117d4:	4605      	mov	r5, r0
 80117d6:	f003 fed7 	bl	8015588 <_localeconv_r>
 80117da:	6803      	ldr	r3, [r0, #0]
 80117dc:	9304      	str	r3, [sp, #16]
 80117de:	4618      	mov	r0, r3
 80117e0:	f7f6 fc2e 	bl	8008040 <strlen>
 80117e4:	2300      	movs	r3, #0
 80117e6:	930a      	str	r3, [sp, #40]	; 0x28
 80117e8:	f8d8 3000 	ldr.w	r3, [r8]
 80117ec:	9005      	str	r0, [sp, #20]
 80117ee:	3307      	adds	r3, #7
 80117f0:	f023 0307 	bic.w	r3, r3, #7
 80117f4:	f103 0208 	add.w	r2, r3, #8
 80117f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80117fc:	f8d4 b000 	ldr.w	fp, [r4]
 8011800:	f8c8 2000 	str.w	r2, [r8]
 8011804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011808:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801180c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011810:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011814:	9307      	str	r3, [sp, #28]
 8011816:	f8cd 8018 	str.w	r8, [sp, #24]
 801181a:	f04f 32ff 	mov.w	r2, #4294967295
 801181e:	4ba7      	ldr	r3, [pc, #668]	; (8011abc <_printf_float+0x2f8>)
 8011820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011824:	f7f7 f8ba 	bl	800899c <__aeabi_dcmpun>
 8011828:	bb70      	cbnz	r0, 8011888 <_printf_float+0xc4>
 801182a:	f04f 32ff 	mov.w	r2, #4294967295
 801182e:	4ba3      	ldr	r3, [pc, #652]	; (8011abc <_printf_float+0x2f8>)
 8011830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011834:	f7f7 f894 	bl	8008960 <__aeabi_dcmple>
 8011838:	bb30      	cbnz	r0, 8011888 <_printf_float+0xc4>
 801183a:	2200      	movs	r2, #0
 801183c:	2300      	movs	r3, #0
 801183e:	4640      	mov	r0, r8
 8011840:	4649      	mov	r1, r9
 8011842:	f7f7 f883 	bl	800894c <__aeabi_dcmplt>
 8011846:	b110      	cbz	r0, 801184e <_printf_float+0x8a>
 8011848:	232d      	movs	r3, #45	; 0x2d
 801184a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801184e:	4a9c      	ldr	r2, [pc, #624]	; (8011ac0 <_printf_float+0x2fc>)
 8011850:	4b9c      	ldr	r3, [pc, #624]	; (8011ac4 <_printf_float+0x300>)
 8011852:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011856:	bf8c      	ite	hi
 8011858:	4690      	movhi	r8, r2
 801185a:	4698      	movls	r8, r3
 801185c:	2303      	movs	r3, #3
 801185e:	f02b 0204 	bic.w	r2, fp, #4
 8011862:	6123      	str	r3, [r4, #16]
 8011864:	6022      	str	r2, [r4, #0]
 8011866:	f04f 0900 	mov.w	r9, #0
 801186a:	9700      	str	r7, [sp, #0]
 801186c:	4633      	mov	r3, r6
 801186e:	aa0b      	add	r2, sp, #44	; 0x2c
 8011870:	4621      	mov	r1, r4
 8011872:	4628      	mov	r0, r5
 8011874:	f000 f9e6 	bl	8011c44 <_printf_common>
 8011878:	3001      	adds	r0, #1
 801187a:	f040 808d 	bne.w	8011998 <_printf_float+0x1d4>
 801187e:	f04f 30ff 	mov.w	r0, #4294967295
 8011882:	b00d      	add	sp, #52	; 0x34
 8011884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011888:	4642      	mov	r2, r8
 801188a:	464b      	mov	r3, r9
 801188c:	4640      	mov	r0, r8
 801188e:	4649      	mov	r1, r9
 8011890:	f7f7 f884 	bl	800899c <__aeabi_dcmpun>
 8011894:	b110      	cbz	r0, 801189c <_printf_float+0xd8>
 8011896:	4a8c      	ldr	r2, [pc, #560]	; (8011ac8 <_printf_float+0x304>)
 8011898:	4b8c      	ldr	r3, [pc, #560]	; (8011acc <_printf_float+0x308>)
 801189a:	e7da      	b.n	8011852 <_printf_float+0x8e>
 801189c:	6861      	ldr	r1, [r4, #4]
 801189e:	1c4b      	adds	r3, r1, #1
 80118a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80118a4:	a80a      	add	r0, sp, #40	; 0x28
 80118a6:	d13e      	bne.n	8011926 <_printf_float+0x162>
 80118a8:	2306      	movs	r3, #6
 80118aa:	6063      	str	r3, [r4, #4]
 80118ac:	2300      	movs	r3, #0
 80118ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80118b2:	ab09      	add	r3, sp, #36	; 0x24
 80118b4:	9300      	str	r3, [sp, #0]
 80118b6:	ec49 8b10 	vmov	d0, r8, r9
 80118ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80118be:	6022      	str	r2, [r4, #0]
 80118c0:	f8cd a004 	str.w	sl, [sp, #4]
 80118c4:	6861      	ldr	r1, [r4, #4]
 80118c6:	4628      	mov	r0, r5
 80118c8:	f7ff fee8 	bl	801169c <__cvt>
 80118cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80118d0:	2b47      	cmp	r3, #71	; 0x47
 80118d2:	4680      	mov	r8, r0
 80118d4:	d109      	bne.n	80118ea <_printf_float+0x126>
 80118d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118d8:	1cd8      	adds	r0, r3, #3
 80118da:	db02      	blt.n	80118e2 <_printf_float+0x11e>
 80118dc:	6862      	ldr	r2, [r4, #4]
 80118de:	4293      	cmp	r3, r2
 80118e0:	dd47      	ble.n	8011972 <_printf_float+0x1ae>
 80118e2:	f1aa 0a02 	sub.w	sl, sl, #2
 80118e6:	fa5f fa8a 	uxtb.w	sl, sl
 80118ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80118ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118f0:	d824      	bhi.n	801193c <_printf_float+0x178>
 80118f2:	3901      	subs	r1, #1
 80118f4:	4652      	mov	r2, sl
 80118f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80118fa:	9109      	str	r1, [sp, #36]	; 0x24
 80118fc:	f7ff ff2f 	bl	801175e <__exponent>
 8011900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011902:	1813      	adds	r3, r2, r0
 8011904:	2a01      	cmp	r2, #1
 8011906:	4681      	mov	r9, r0
 8011908:	6123      	str	r3, [r4, #16]
 801190a:	dc02      	bgt.n	8011912 <_printf_float+0x14e>
 801190c:	6822      	ldr	r2, [r4, #0]
 801190e:	07d1      	lsls	r1, r2, #31
 8011910:	d501      	bpl.n	8011916 <_printf_float+0x152>
 8011912:	3301      	adds	r3, #1
 8011914:	6123      	str	r3, [r4, #16]
 8011916:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801191a:	2b00      	cmp	r3, #0
 801191c:	d0a5      	beq.n	801186a <_printf_float+0xa6>
 801191e:	232d      	movs	r3, #45	; 0x2d
 8011920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011924:	e7a1      	b.n	801186a <_printf_float+0xa6>
 8011926:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801192a:	f000 8177 	beq.w	8011c1c <_printf_float+0x458>
 801192e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011932:	d1bb      	bne.n	80118ac <_printf_float+0xe8>
 8011934:	2900      	cmp	r1, #0
 8011936:	d1b9      	bne.n	80118ac <_printf_float+0xe8>
 8011938:	2301      	movs	r3, #1
 801193a:	e7b6      	b.n	80118aa <_printf_float+0xe6>
 801193c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8011940:	d119      	bne.n	8011976 <_printf_float+0x1b2>
 8011942:	2900      	cmp	r1, #0
 8011944:	6863      	ldr	r3, [r4, #4]
 8011946:	dd0c      	ble.n	8011962 <_printf_float+0x19e>
 8011948:	6121      	str	r1, [r4, #16]
 801194a:	b913      	cbnz	r3, 8011952 <_printf_float+0x18e>
 801194c:	6822      	ldr	r2, [r4, #0]
 801194e:	07d2      	lsls	r2, r2, #31
 8011950:	d502      	bpl.n	8011958 <_printf_float+0x194>
 8011952:	3301      	adds	r3, #1
 8011954:	440b      	add	r3, r1
 8011956:	6123      	str	r3, [r4, #16]
 8011958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801195a:	65a3      	str	r3, [r4, #88]	; 0x58
 801195c:	f04f 0900 	mov.w	r9, #0
 8011960:	e7d9      	b.n	8011916 <_printf_float+0x152>
 8011962:	b913      	cbnz	r3, 801196a <_printf_float+0x1a6>
 8011964:	6822      	ldr	r2, [r4, #0]
 8011966:	07d0      	lsls	r0, r2, #31
 8011968:	d501      	bpl.n	801196e <_printf_float+0x1aa>
 801196a:	3302      	adds	r3, #2
 801196c:	e7f3      	b.n	8011956 <_printf_float+0x192>
 801196e:	2301      	movs	r3, #1
 8011970:	e7f1      	b.n	8011956 <_printf_float+0x192>
 8011972:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011976:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801197a:	4293      	cmp	r3, r2
 801197c:	db05      	blt.n	801198a <_printf_float+0x1c6>
 801197e:	6822      	ldr	r2, [r4, #0]
 8011980:	6123      	str	r3, [r4, #16]
 8011982:	07d1      	lsls	r1, r2, #31
 8011984:	d5e8      	bpl.n	8011958 <_printf_float+0x194>
 8011986:	3301      	adds	r3, #1
 8011988:	e7e5      	b.n	8011956 <_printf_float+0x192>
 801198a:	2b00      	cmp	r3, #0
 801198c:	bfd4      	ite	le
 801198e:	f1c3 0302 	rsble	r3, r3, #2
 8011992:	2301      	movgt	r3, #1
 8011994:	4413      	add	r3, r2
 8011996:	e7de      	b.n	8011956 <_printf_float+0x192>
 8011998:	6823      	ldr	r3, [r4, #0]
 801199a:	055a      	lsls	r2, r3, #21
 801199c:	d407      	bmi.n	80119ae <_printf_float+0x1ea>
 801199e:	6923      	ldr	r3, [r4, #16]
 80119a0:	4642      	mov	r2, r8
 80119a2:	4631      	mov	r1, r6
 80119a4:	4628      	mov	r0, r5
 80119a6:	47b8      	blx	r7
 80119a8:	3001      	adds	r0, #1
 80119aa:	d12b      	bne.n	8011a04 <_printf_float+0x240>
 80119ac:	e767      	b.n	801187e <_printf_float+0xba>
 80119ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80119b2:	f240 80dc 	bls.w	8011b6e <_printf_float+0x3aa>
 80119b6:	2200      	movs	r2, #0
 80119b8:	2300      	movs	r3, #0
 80119ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119be:	f7f6 ffbb 	bl	8008938 <__aeabi_dcmpeq>
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d033      	beq.n	8011a2e <_printf_float+0x26a>
 80119c6:	2301      	movs	r3, #1
 80119c8:	4a41      	ldr	r2, [pc, #260]	; (8011ad0 <_printf_float+0x30c>)
 80119ca:	4631      	mov	r1, r6
 80119cc:	4628      	mov	r0, r5
 80119ce:	47b8      	blx	r7
 80119d0:	3001      	adds	r0, #1
 80119d2:	f43f af54 	beq.w	801187e <_printf_float+0xba>
 80119d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119da:	429a      	cmp	r2, r3
 80119dc:	db02      	blt.n	80119e4 <_printf_float+0x220>
 80119de:	6823      	ldr	r3, [r4, #0]
 80119e0:	07d8      	lsls	r0, r3, #31
 80119e2:	d50f      	bpl.n	8011a04 <_printf_float+0x240>
 80119e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119e8:	4631      	mov	r1, r6
 80119ea:	4628      	mov	r0, r5
 80119ec:	47b8      	blx	r7
 80119ee:	3001      	adds	r0, #1
 80119f0:	f43f af45 	beq.w	801187e <_printf_float+0xba>
 80119f4:	f04f 0800 	mov.w	r8, #0
 80119f8:	f104 091a 	add.w	r9, r4, #26
 80119fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119fe:	3b01      	subs	r3, #1
 8011a00:	4543      	cmp	r3, r8
 8011a02:	dc09      	bgt.n	8011a18 <_printf_float+0x254>
 8011a04:	6823      	ldr	r3, [r4, #0]
 8011a06:	079b      	lsls	r3, r3, #30
 8011a08:	f100 8103 	bmi.w	8011c12 <_printf_float+0x44e>
 8011a0c:	68e0      	ldr	r0, [r4, #12]
 8011a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a10:	4298      	cmp	r0, r3
 8011a12:	bfb8      	it	lt
 8011a14:	4618      	movlt	r0, r3
 8011a16:	e734      	b.n	8011882 <_printf_float+0xbe>
 8011a18:	2301      	movs	r3, #1
 8011a1a:	464a      	mov	r2, r9
 8011a1c:	4631      	mov	r1, r6
 8011a1e:	4628      	mov	r0, r5
 8011a20:	47b8      	blx	r7
 8011a22:	3001      	adds	r0, #1
 8011a24:	f43f af2b 	beq.w	801187e <_printf_float+0xba>
 8011a28:	f108 0801 	add.w	r8, r8, #1
 8011a2c:	e7e6      	b.n	80119fc <_printf_float+0x238>
 8011a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	dc2b      	bgt.n	8011a8c <_printf_float+0x2c8>
 8011a34:	2301      	movs	r3, #1
 8011a36:	4a26      	ldr	r2, [pc, #152]	; (8011ad0 <_printf_float+0x30c>)
 8011a38:	4631      	mov	r1, r6
 8011a3a:	4628      	mov	r0, r5
 8011a3c:	47b8      	blx	r7
 8011a3e:	3001      	adds	r0, #1
 8011a40:	f43f af1d 	beq.w	801187e <_printf_float+0xba>
 8011a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a46:	b923      	cbnz	r3, 8011a52 <_printf_float+0x28e>
 8011a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a4a:	b913      	cbnz	r3, 8011a52 <_printf_float+0x28e>
 8011a4c:	6823      	ldr	r3, [r4, #0]
 8011a4e:	07d9      	lsls	r1, r3, #31
 8011a50:	d5d8      	bpl.n	8011a04 <_printf_float+0x240>
 8011a52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a56:	4631      	mov	r1, r6
 8011a58:	4628      	mov	r0, r5
 8011a5a:	47b8      	blx	r7
 8011a5c:	3001      	adds	r0, #1
 8011a5e:	f43f af0e 	beq.w	801187e <_printf_float+0xba>
 8011a62:	f04f 0900 	mov.w	r9, #0
 8011a66:	f104 0a1a 	add.w	sl, r4, #26
 8011a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a6c:	425b      	negs	r3, r3
 8011a6e:	454b      	cmp	r3, r9
 8011a70:	dc01      	bgt.n	8011a76 <_printf_float+0x2b2>
 8011a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a74:	e794      	b.n	80119a0 <_printf_float+0x1dc>
 8011a76:	2301      	movs	r3, #1
 8011a78:	4652      	mov	r2, sl
 8011a7a:	4631      	mov	r1, r6
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	47b8      	blx	r7
 8011a80:	3001      	adds	r0, #1
 8011a82:	f43f aefc 	beq.w	801187e <_printf_float+0xba>
 8011a86:	f109 0901 	add.w	r9, r9, #1
 8011a8a:	e7ee      	b.n	8011a6a <_printf_float+0x2a6>
 8011a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a90:	429a      	cmp	r2, r3
 8011a92:	bfa8      	it	ge
 8011a94:	461a      	movge	r2, r3
 8011a96:	2a00      	cmp	r2, #0
 8011a98:	4691      	mov	r9, r2
 8011a9a:	dd07      	ble.n	8011aac <_printf_float+0x2e8>
 8011a9c:	4613      	mov	r3, r2
 8011a9e:	4631      	mov	r1, r6
 8011aa0:	4642      	mov	r2, r8
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	47b8      	blx	r7
 8011aa6:	3001      	adds	r0, #1
 8011aa8:	f43f aee9 	beq.w	801187e <_printf_float+0xba>
 8011aac:	f104 031a 	add.w	r3, r4, #26
 8011ab0:	f04f 0b00 	mov.w	fp, #0
 8011ab4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ab8:	9306      	str	r3, [sp, #24]
 8011aba:	e015      	b.n	8011ae8 <_printf_float+0x324>
 8011abc:	7fefffff 	.word	0x7fefffff
 8011ac0:	080167e9 	.word	0x080167e9
 8011ac4:	080167e5 	.word	0x080167e5
 8011ac8:	080167f1 	.word	0x080167f1
 8011acc:	080167ed 	.word	0x080167ed
 8011ad0:	08016832 	.word	0x08016832
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	9a06      	ldr	r2, [sp, #24]
 8011ad8:	4631      	mov	r1, r6
 8011ada:	4628      	mov	r0, r5
 8011adc:	47b8      	blx	r7
 8011ade:	3001      	adds	r0, #1
 8011ae0:	f43f aecd 	beq.w	801187e <_printf_float+0xba>
 8011ae4:	f10b 0b01 	add.w	fp, fp, #1
 8011ae8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011aec:	ebaa 0309 	sub.w	r3, sl, r9
 8011af0:	455b      	cmp	r3, fp
 8011af2:	dcef      	bgt.n	8011ad4 <_printf_float+0x310>
 8011af4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011af8:	429a      	cmp	r2, r3
 8011afa:	44d0      	add	r8, sl
 8011afc:	db15      	blt.n	8011b2a <_printf_float+0x366>
 8011afe:	6823      	ldr	r3, [r4, #0]
 8011b00:	07da      	lsls	r2, r3, #31
 8011b02:	d412      	bmi.n	8011b2a <_printf_float+0x366>
 8011b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b08:	eba3 020a 	sub.w	r2, r3, sl
 8011b0c:	eba3 0a01 	sub.w	sl, r3, r1
 8011b10:	4592      	cmp	sl, r2
 8011b12:	bfa8      	it	ge
 8011b14:	4692      	movge	sl, r2
 8011b16:	f1ba 0f00 	cmp.w	sl, #0
 8011b1a:	dc0e      	bgt.n	8011b3a <_printf_float+0x376>
 8011b1c:	f04f 0800 	mov.w	r8, #0
 8011b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b24:	f104 091a 	add.w	r9, r4, #26
 8011b28:	e019      	b.n	8011b5e <_printf_float+0x39a>
 8011b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b2e:	4631      	mov	r1, r6
 8011b30:	4628      	mov	r0, r5
 8011b32:	47b8      	blx	r7
 8011b34:	3001      	adds	r0, #1
 8011b36:	d1e5      	bne.n	8011b04 <_printf_float+0x340>
 8011b38:	e6a1      	b.n	801187e <_printf_float+0xba>
 8011b3a:	4653      	mov	r3, sl
 8011b3c:	4642      	mov	r2, r8
 8011b3e:	4631      	mov	r1, r6
 8011b40:	4628      	mov	r0, r5
 8011b42:	47b8      	blx	r7
 8011b44:	3001      	adds	r0, #1
 8011b46:	d1e9      	bne.n	8011b1c <_printf_float+0x358>
 8011b48:	e699      	b.n	801187e <_printf_float+0xba>
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	464a      	mov	r2, r9
 8011b4e:	4631      	mov	r1, r6
 8011b50:	4628      	mov	r0, r5
 8011b52:	47b8      	blx	r7
 8011b54:	3001      	adds	r0, #1
 8011b56:	f43f ae92 	beq.w	801187e <_printf_float+0xba>
 8011b5a:	f108 0801 	add.w	r8, r8, #1
 8011b5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b62:	1a9b      	subs	r3, r3, r2
 8011b64:	eba3 030a 	sub.w	r3, r3, sl
 8011b68:	4543      	cmp	r3, r8
 8011b6a:	dcee      	bgt.n	8011b4a <_printf_float+0x386>
 8011b6c:	e74a      	b.n	8011a04 <_printf_float+0x240>
 8011b6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b70:	2a01      	cmp	r2, #1
 8011b72:	dc01      	bgt.n	8011b78 <_printf_float+0x3b4>
 8011b74:	07db      	lsls	r3, r3, #31
 8011b76:	d53a      	bpl.n	8011bee <_printf_float+0x42a>
 8011b78:	2301      	movs	r3, #1
 8011b7a:	4642      	mov	r2, r8
 8011b7c:	4631      	mov	r1, r6
 8011b7e:	4628      	mov	r0, r5
 8011b80:	47b8      	blx	r7
 8011b82:	3001      	adds	r0, #1
 8011b84:	f43f ae7b 	beq.w	801187e <_printf_float+0xba>
 8011b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b8c:	4631      	mov	r1, r6
 8011b8e:	4628      	mov	r0, r5
 8011b90:	47b8      	blx	r7
 8011b92:	3001      	adds	r0, #1
 8011b94:	f108 0801 	add.w	r8, r8, #1
 8011b98:	f43f ae71 	beq.w	801187e <_printf_float+0xba>
 8011b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f103 3aff 	add.w	sl, r3, #4294967295
 8011ba4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011ba8:	2300      	movs	r3, #0
 8011baa:	f7f6 fec5 	bl	8008938 <__aeabi_dcmpeq>
 8011bae:	b9c8      	cbnz	r0, 8011be4 <_printf_float+0x420>
 8011bb0:	4653      	mov	r3, sl
 8011bb2:	4642      	mov	r2, r8
 8011bb4:	4631      	mov	r1, r6
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	47b8      	blx	r7
 8011bba:	3001      	adds	r0, #1
 8011bbc:	d10e      	bne.n	8011bdc <_printf_float+0x418>
 8011bbe:	e65e      	b.n	801187e <_printf_float+0xba>
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	4652      	mov	r2, sl
 8011bc4:	4631      	mov	r1, r6
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	47b8      	blx	r7
 8011bca:	3001      	adds	r0, #1
 8011bcc:	f43f ae57 	beq.w	801187e <_printf_float+0xba>
 8011bd0:	f108 0801 	add.w	r8, r8, #1
 8011bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	4543      	cmp	r3, r8
 8011bda:	dcf1      	bgt.n	8011bc0 <_printf_float+0x3fc>
 8011bdc:	464b      	mov	r3, r9
 8011bde:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011be2:	e6de      	b.n	80119a2 <_printf_float+0x1de>
 8011be4:	f04f 0800 	mov.w	r8, #0
 8011be8:	f104 0a1a 	add.w	sl, r4, #26
 8011bec:	e7f2      	b.n	8011bd4 <_printf_float+0x410>
 8011bee:	2301      	movs	r3, #1
 8011bf0:	e7df      	b.n	8011bb2 <_printf_float+0x3ee>
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	464a      	mov	r2, r9
 8011bf6:	4631      	mov	r1, r6
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	47b8      	blx	r7
 8011bfc:	3001      	adds	r0, #1
 8011bfe:	f43f ae3e 	beq.w	801187e <_printf_float+0xba>
 8011c02:	f108 0801 	add.w	r8, r8, #1
 8011c06:	68e3      	ldr	r3, [r4, #12]
 8011c08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011c0a:	1a9b      	subs	r3, r3, r2
 8011c0c:	4543      	cmp	r3, r8
 8011c0e:	dcf0      	bgt.n	8011bf2 <_printf_float+0x42e>
 8011c10:	e6fc      	b.n	8011a0c <_printf_float+0x248>
 8011c12:	f04f 0800 	mov.w	r8, #0
 8011c16:	f104 0919 	add.w	r9, r4, #25
 8011c1a:	e7f4      	b.n	8011c06 <_printf_float+0x442>
 8011c1c:	2900      	cmp	r1, #0
 8011c1e:	f43f ae8b 	beq.w	8011938 <_printf_float+0x174>
 8011c22:	2300      	movs	r3, #0
 8011c24:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011c28:	ab09      	add	r3, sp, #36	; 0x24
 8011c2a:	9300      	str	r3, [sp, #0]
 8011c2c:	ec49 8b10 	vmov	d0, r8, r9
 8011c30:	6022      	str	r2, [r4, #0]
 8011c32:	f8cd a004 	str.w	sl, [sp, #4]
 8011c36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011c3a:	4628      	mov	r0, r5
 8011c3c:	f7ff fd2e 	bl	801169c <__cvt>
 8011c40:	4680      	mov	r8, r0
 8011c42:	e648      	b.n	80118d6 <_printf_float+0x112>

08011c44 <_printf_common>:
 8011c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c48:	4691      	mov	r9, r2
 8011c4a:	461f      	mov	r7, r3
 8011c4c:	688a      	ldr	r2, [r1, #8]
 8011c4e:	690b      	ldr	r3, [r1, #16]
 8011c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c54:	4293      	cmp	r3, r2
 8011c56:	bfb8      	it	lt
 8011c58:	4613      	movlt	r3, r2
 8011c5a:	f8c9 3000 	str.w	r3, [r9]
 8011c5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c62:	4606      	mov	r6, r0
 8011c64:	460c      	mov	r4, r1
 8011c66:	b112      	cbz	r2, 8011c6e <_printf_common+0x2a>
 8011c68:	3301      	adds	r3, #1
 8011c6a:	f8c9 3000 	str.w	r3, [r9]
 8011c6e:	6823      	ldr	r3, [r4, #0]
 8011c70:	0699      	lsls	r1, r3, #26
 8011c72:	bf42      	ittt	mi
 8011c74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011c78:	3302      	addmi	r3, #2
 8011c7a:	f8c9 3000 	strmi.w	r3, [r9]
 8011c7e:	6825      	ldr	r5, [r4, #0]
 8011c80:	f015 0506 	ands.w	r5, r5, #6
 8011c84:	d107      	bne.n	8011c96 <_printf_common+0x52>
 8011c86:	f104 0a19 	add.w	sl, r4, #25
 8011c8a:	68e3      	ldr	r3, [r4, #12]
 8011c8c:	f8d9 2000 	ldr.w	r2, [r9]
 8011c90:	1a9b      	subs	r3, r3, r2
 8011c92:	42ab      	cmp	r3, r5
 8011c94:	dc28      	bgt.n	8011ce8 <_printf_common+0xa4>
 8011c96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011c9a:	6822      	ldr	r2, [r4, #0]
 8011c9c:	3300      	adds	r3, #0
 8011c9e:	bf18      	it	ne
 8011ca0:	2301      	movne	r3, #1
 8011ca2:	0692      	lsls	r2, r2, #26
 8011ca4:	d42d      	bmi.n	8011d02 <_printf_common+0xbe>
 8011ca6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011caa:	4639      	mov	r1, r7
 8011cac:	4630      	mov	r0, r6
 8011cae:	47c0      	blx	r8
 8011cb0:	3001      	adds	r0, #1
 8011cb2:	d020      	beq.n	8011cf6 <_printf_common+0xb2>
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	68e5      	ldr	r5, [r4, #12]
 8011cb8:	f8d9 2000 	ldr.w	r2, [r9]
 8011cbc:	f003 0306 	and.w	r3, r3, #6
 8011cc0:	2b04      	cmp	r3, #4
 8011cc2:	bf08      	it	eq
 8011cc4:	1aad      	subeq	r5, r5, r2
 8011cc6:	68a3      	ldr	r3, [r4, #8]
 8011cc8:	6922      	ldr	r2, [r4, #16]
 8011cca:	bf0c      	ite	eq
 8011ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cd0:	2500      	movne	r5, #0
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	bfc4      	itt	gt
 8011cd6:	1a9b      	subgt	r3, r3, r2
 8011cd8:	18ed      	addgt	r5, r5, r3
 8011cda:	f04f 0900 	mov.w	r9, #0
 8011cde:	341a      	adds	r4, #26
 8011ce0:	454d      	cmp	r5, r9
 8011ce2:	d11a      	bne.n	8011d1a <_printf_common+0xd6>
 8011ce4:	2000      	movs	r0, #0
 8011ce6:	e008      	b.n	8011cfa <_printf_common+0xb6>
 8011ce8:	2301      	movs	r3, #1
 8011cea:	4652      	mov	r2, sl
 8011cec:	4639      	mov	r1, r7
 8011cee:	4630      	mov	r0, r6
 8011cf0:	47c0      	blx	r8
 8011cf2:	3001      	adds	r0, #1
 8011cf4:	d103      	bne.n	8011cfe <_printf_common+0xba>
 8011cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8011cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cfe:	3501      	adds	r5, #1
 8011d00:	e7c3      	b.n	8011c8a <_printf_common+0x46>
 8011d02:	18e1      	adds	r1, r4, r3
 8011d04:	1c5a      	adds	r2, r3, #1
 8011d06:	2030      	movs	r0, #48	; 0x30
 8011d08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d0c:	4422      	add	r2, r4
 8011d0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d16:	3302      	adds	r3, #2
 8011d18:	e7c5      	b.n	8011ca6 <_printf_common+0x62>
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	4622      	mov	r2, r4
 8011d1e:	4639      	mov	r1, r7
 8011d20:	4630      	mov	r0, r6
 8011d22:	47c0      	blx	r8
 8011d24:	3001      	adds	r0, #1
 8011d26:	d0e6      	beq.n	8011cf6 <_printf_common+0xb2>
 8011d28:	f109 0901 	add.w	r9, r9, #1
 8011d2c:	e7d8      	b.n	8011ce0 <_printf_common+0x9c>
	...

08011d30 <_printf_i>:
 8011d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011d38:	460c      	mov	r4, r1
 8011d3a:	7e09      	ldrb	r1, [r1, #24]
 8011d3c:	b085      	sub	sp, #20
 8011d3e:	296e      	cmp	r1, #110	; 0x6e
 8011d40:	4617      	mov	r7, r2
 8011d42:	4606      	mov	r6, r0
 8011d44:	4698      	mov	r8, r3
 8011d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d48:	f000 80b3 	beq.w	8011eb2 <_printf_i+0x182>
 8011d4c:	d822      	bhi.n	8011d94 <_printf_i+0x64>
 8011d4e:	2963      	cmp	r1, #99	; 0x63
 8011d50:	d036      	beq.n	8011dc0 <_printf_i+0x90>
 8011d52:	d80a      	bhi.n	8011d6a <_printf_i+0x3a>
 8011d54:	2900      	cmp	r1, #0
 8011d56:	f000 80b9 	beq.w	8011ecc <_printf_i+0x19c>
 8011d5a:	2958      	cmp	r1, #88	; 0x58
 8011d5c:	f000 8083 	beq.w	8011e66 <_printf_i+0x136>
 8011d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011d68:	e032      	b.n	8011dd0 <_printf_i+0xa0>
 8011d6a:	2964      	cmp	r1, #100	; 0x64
 8011d6c:	d001      	beq.n	8011d72 <_printf_i+0x42>
 8011d6e:	2969      	cmp	r1, #105	; 0x69
 8011d70:	d1f6      	bne.n	8011d60 <_printf_i+0x30>
 8011d72:	6820      	ldr	r0, [r4, #0]
 8011d74:	6813      	ldr	r3, [r2, #0]
 8011d76:	0605      	lsls	r5, r0, #24
 8011d78:	f103 0104 	add.w	r1, r3, #4
 8011d7c:	d52a      	bpl.n	8011dd4 <_printf_i+0xa4>
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	6011      	str	r1, [r2, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	da03      	bge.n	8011d8e <_printf_i+0x5e>
 8011d86:	222d      	movs	r2, #45	; 0x2d
 8011d88:	425b      	negs	r3, r3
 8011d8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011d8e:	486f      	ldr	r0, [pc, #444]	; (8011f4c <_printf_i+0x21c>)
 8011d90:	220a      	movs	r2, #10
 8011d92:	e039      	b.n	8011e08 <_printf_i+0xd8>
 8011d94:	2973      	cmp	r1, #115	; 0x73
 8011d96:	f000 809d 	beq.w	8011ed4 <_printf_i+0x1a4>
 8011d9a:	d808      	bhi.n	8011dae <_printf_i+0x7e>
 8011d9c:	296f      	cmp	r1, #111	; 0x6f
 8011d9e:	d020      	beq.n	8011de2 <_printf_i+0xb2>
 8011da0:	2970      	cmp	r1, #112	; 0x70
 8011da2:	d1dd      	bne.n	8011d60 <_printf_i+0x30>
 8011da4:	6823      	ldr	r3, [r4, #0]
 8011da6:	f043 0320 	orr.w	r3, r3, #32
 8011daa:	6023      	str	r3, [r4, #0]
 8011dac:	e003      	b.n	8011db6 <_printf_i+0x86>
 8011dae:	2975      	cmp	r1, #117	; 0x75
 8011db0:	d017      	beq.n	8011de2 <_printf_i+0xb2>
 8011db2:	2978      	cmp	r1, #120	; 0x78
 8011db4:	d1d4      	bne.n	8011d60 <_printf_i+0x30>
 8011db6:	2378      	movs	r3, #120	; 0x78
 8011db8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011dbc:	4864      	ldr	r0, [pc, #400]	; (8011f50 <_printf_i+0x220>)
 8011dbe:	e055      	b.n	8011e6c <_printf_i+0x13c>
 8011dc0:	6813      	ldr	r3, [r2, #0]
 8011dc2:	1d19      	adds	r1, r3, #4
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	6011      	str	r1, [r2, #0]
 8011dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	e08c      	b.n	8011eee <_printf_i+0x1be>
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	6011      	str	r1, [r2, #0]
 8011dd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011ddc:	bf18      	it	ne
 8011dde:	b21b      	sxthne	r3, r3
 8011de0:	e7cf      	b.n	8011d82 <_printf_i+0x52>
 8011de2:	6813      	ldr	r3, [r2, #0]
 8011de4:	6825      	ldr	r5, [r4, #0]
 8011de6:	1d18      	adds	r0, r3, #4
 8011de8:	6010      	str	r0, [r2, #0]
 8011dea:	0628      	lsls	r0, r5, #24
 8011dec:	d501      	bpl.n	8011df2 <_printf_i+0xc2>
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	e002      	b.n	8011df8 <_printf_i+0xc8>
 8011df2:	0668      	lsls	r0, r5, #25
 8011df4:	d5fb      	bpl.n	8011dee <_printf_i+0xbe>
 8011df6:	881b      	ldrh	r3, [r3, #0]
 8011df8:	4854      	ldr	r0, [pc, #336]	; (8011f4c <_printf_i+0x21c>)
 8011dfa:	296f      	cmp	r1, #111	; 0x6f
 8011dfc:	bf14      	ite	ne
 8011dfe:	220a      	movne	r2, #10
 8011e00:	2208      	moveq	r2, #8
 8011e02:	2100      	movs	r1, #0
 8011e04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e08:	6865      	ldr	r5, [r4, #4]
 8011e0a:	60a5      	str	r5, [r4, #8]
 8011e0c:	2d00      	cmp	r5, #0
 8011e0e:	f2c0 8095 	blt.w	8011f3c <_printf_i+0x20c>
 8011e12:	6821      	ldr	r1, [r4, #0]
 8011e14:	f021 0104 	bic.w	r1, r1, #4
 8011e18:	6021      	str	r1, [r4, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d13d      	bne.n	8011e9a <_printf_i+0x16a>
 8011e1e:	2d00      	cmp	r5, #0
 8011e20:	f040 808e 	bne.w	8011f40 <_printf_i+0x210>
 8011e24:	4665      	mov	r5, ip
 8011e26:	2a08      	cmp	r2, #8
 8011e28:	d10b      	bne.n	8011e42 <_printf_i+0x112>
 8011e2a:	6823      	ldr	r3, [r4, #0]
 8011e2c:	07db      	lsls	r3, r3, #31
 8011e2e:	d508      	bpl.n	8011e42 <_printf_i+0x112>
 8011e30:	6923      	ldr	r3, [r4, #16]
 8011e32:	6862      	ldr	r2, [r4, #4]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	bfde      	ittt	le
 8011e38:	2330      	movle	r3, #48	; 0x30
 8011e3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011e3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011e42:	ebac 0305 	sub.w	r3, ip, r5
 8011e46:	6123      	str	r3, [r4, #16]
 8011e48:	f8cd 8000 	str.w	r8, [sp]
 8011e4c:	463b      	mov	r3, r7
 8011e4e:	aa03      	add	r2, sp, #12
 8011e50:	4621      	mov	r1, r4
 8011e52:	4630      	mov	r0, r6
 8011e54:	f7ff fef6 	bl	8011c44 <_printf_common>
 8011e58:	3001      	adds	r0, #1
 8011e5a:	d14d      	bne.n	8011ef8 <_printf_i+0x1c8>
 8011e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e60:	b005      	add	sp, #20
 8011e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e66:	4839      	ldr	r0, [pc, #228]	; (8011f4c <_printf_i+0x21c>)
 8011e68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011e6c:	6813      	ldr	r3, [r2, #0]
 8011e6e:	6821      	ldr	r1, [r4, #0]
 8011e70:	1d1d      	adds	r5, r3, #4
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	6015      	str	r5, [r2, #0]
 8011e76:	060a      	lsls	r2, r1, #24
 8011e78:	d50b      	bpl.n	8011e92 <_printf_i+0x162>
 8011e7a:	07ca      	lsls	r2, r1, #31
 8011e7c:	bf44      	itt	mi
 8011e7e:	f041 0120 	orrmi.w	r1, r1, #32
 8011e82:	6021      	strmi	r1, [r4, #0]
 8011e84:	b91b      	cbnz	r3, 8011e8e <_printf_i+0x15e>
 8011e86:	6822      	ldr	r2, [r4, #0]
 8011e88:	f022 0220 	bic.w	r2, r2, #32
 8011e8c:	6022      	str	r2, [r4, #0]
 8011e8e:	2210      	movs	r2, #16
 8011e90:	e7b7      	b.n	8011e02 <_printf_i+0xd2>
 8011e92:	064d      	lsls	r5, r1, #25
 8011e94:	bf48      	it	mi
 8011e96:	b29b      	uxthmi	r3, r3
 8011e98:	e7ef      	b.n	8011e7a <_printf_i+0x14a>
 8011e9a:	4665      	mov	r5, ip
 8011e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ea0:	fb02 3311 	mls	r3, r2, r1, r3
 8011ea4:	5cc3      	ldrb	r3, [r0, r3]
 8011ea6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011eaa:	460b      	mov	r3, r1
 8011eac:	2900      	cmp	r1, #0
 8011eae:	d1f5      	bne.n	8011e9c <_printf_i+0x16c>
 8011eb0:	e7b9      	b.n	8011e26 <_printf_i+0xf6>
 8011eb2:	6813      	ldr	r3, [r2, #0]
 8011eb4:	6825      	ldr	r5, [r4, #0]
 8011eb6:	6961      	ldr	r1, [r4, #20]
 8011eb8:	1d18      	adds	r0, r3, #4
 8011eba:	6010      	str	r0, [r2, #0]
 8011ebc:	0628      	lsls	r0, r5, #24
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	d501      	bpl.n	8011ec6 <_printf_i+0x196>
 8011ec2:	6019      	str	r1, [r3, #0]
 8011ec4:	e002      	b.n	8011ecc <_printf_i+0x19c>
 8011ec6:	066a      	lsls	r2, r5, #25
 8011ec8:	d5fb      	bpl.n	8011ec2 <_printf_i+0x192>
 8011eca:	8019      	strh	r1, [r3, #0]
 8011ecc:	2300      	movs	r3, #0
 8011ece:	6123      	str	r3, [r4, #16]
 8011ed0:	4665      	mov	r5, ip
 8011ed2:	e7b9      	b.n	8011e48 <_printf_i+0x118>
 8011ed4:	6813      	ldr	r3, [r2, #0]
 8011ed6:	1d19      	adds	r1, r3, #4
 8011ed8:	6011      	str	r1, [r2, #0]
 8011eda:	681d      	ldr	r5, [r3, #0]
 8011edc:	6862      	ldr	r2, [r4, #4]
 8011ede:	2100      	movs	r1, #0
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	f7f6 f8b5 	bl	8008050 <memchr>
 8011ee6:	b108      	cbz	r0, 8011eec <_printf_i+0x1bc>
 8011ee8:	1b40      	subs	r0, r0, r5
 8011eea:	6060      	str	r0, [r4, #4]
 8011eec:	6863      	ldr	r3, [r4, #4]
 8011eee:	6123      	str	r3, [r4, #16]
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ef6:	e7a7      	b.n	8011e48 <_printf_i+0x118>
 8011ef8:	6923      	ldr	r3, [r4, #16]
 8011efa:	462a      	mov	r2, r5
 8011efc:	4639      	mov	r1, r7
 8011efe:	4630      	mov	r0, r6
 8011f00:	47c0      	blx	r8
 8011f02:	3001      	adds	r0, #1
 8011f04:	d0aa      	beq.n	8011e5c <_printf_i+0x12c>
 8011f06:	6823      	ldr	r3, [r4, #0]
 8011f08:	079b      	lsls	r3, r3, #30
 8011f0a:	d413      	bmi.n	8011f34 <_printf_i+0x204>
 8011f0c:	68e0      	ldr	r0, [r4, #12]
 8011f0e:	9b03      	ldr	r3, [sp, #12]
 8011f10:	4298      	cmp	r0, r3
 8011f12:	bfb8      	it	lt
 8011f14:	4618      	movlt	r0, r3
 8011f16:	e7a3      	b.n	8011e60 <_printf_i+0x130>
 8011f18:	2301      	movs	r3, #1
 8011f1a:	464a      	mov	r2, r9
 8011f1c:	4639      	mov	r1, r7
 8011f1e:	4630      	mov	r0, r6
 8011f20:	47c0      	blx	r8
 8011f22:	3001      	adds	r0, #1
 8011f24:	d09a      	beq.n	8011e5c <_printf_i+0x12c>
 8011f26:	3501      	adds	r5, #1
 8011f28:	68e3      	ldr	r3, [r4, #12]
 8011f2a:	9a03      	ldr	r2, [sp, #12]
 8011f2c:	1a9b      	subs	r3, r3, r2
 8011f2e:	42ab      	cmp	r3, r5
 8011f30:	dcf2      	bgt.n	8011f18 <_printf_i+0x1e8>
 8011f32:	e7eb      	b.n	8011f0c <_printf_i+0x1dc>
 8011f34:	2500      	movs	r5, #0
 8011f36:	f104 0919 	add.w	r9, r4, #25
 8011f3a:	e7f5      	b.n	8011f28 <_printf_i+0x1f8>
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d1ac      	bne.n	8011e9a <_printf_i+0x16a>
 8011f40:	7803      	ldrb	r3, [r0, #0]
 8011f42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f4a:	e76c      	b.n	8011e26 <_printf_i+0xf6>
 8011f4c:	080167f5 	.word	0x080167f5
 8011f50:	08016806 	.word	0x08016806

08011f54 <__svfiscanf_r>:
 8011f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f58:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8011f5c:	460c      	mov	r4, r1
 8011f5e:	2100      	movs	r1, #0
 8011f60:	9144      	str	r1, [sp, #272]	; 0x110
 8011f62:	9145      	str	r1, [sp, #276]	; 0x114
 8011f64:	499f      	ldr	r1, [pc, #636]	; (80121e4 <__svfiscanf_r+0x290>)
 8011f66:	91a0      	str	r1, [sp, #640]	; 0x280
 8011f68:	f10d 0804 	add.w	r8, sp, #4
 8011f6c:	499e      	ldr	r1, [pc, #632]	; (80121e8 <__svfiscanf_r+0x294>)
 8011f6e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80121ec <__svfiscanf_r+0x298>
 8011f72:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011f76:	4606      	mov	r6, r0
 8011f78:	4692      	mov	sl, r2
 8011f7a:	91a1      	str	r1, [sp, #644]	; 0x284
 8011f7c:	9300      	str	r3, [sp, #0]
 8011f7e:	270a      	movs	r7, #10
 8011f80:	f89a 3000 	ldrb.w	r3, [sl]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	f000 812a 	beq.w	80121de <__svfiscanf_r+0x28a>
 8011f8a:	4655      	mov	r5, sl
 8011f8c:	f003 faec 	bl	8015568 <__locale_ctype_ptr>
 8011f90:	f815 bb01 	ldrb.w	fp, [r5], #1
 8011f94:	4458      	add	r0, fp
 8011f96:	7843      	ldrb	r3, [r0, #1]
 8011f98:	f013 0308 	ands.w	r3, r3, #8
 8011f9c:	d01c      	beq.n	8011fd8 <__svfiscanf_r+0x84>
 8011f9e:	6863      	ldr	r3, [r4, #4]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	dd12      	ble.n	8011fca <__svfiscanf_r+0x76>
 8011fa4:	f003 fae0 	bl	8015568 <__locale_ctype_ptr>
 8011fa8:	6823      	ldr	r3, [r4, #0]
 8011faa:	781a      	ldrb	r2, [r3, #0]
 8011fac:	4410      	add	r0, r2
 8011fae:	7842      	ldrb	r2, [r0, #1]
 8011fb0:	0712      	lsls	r2, r2, #28
 8011fb2:	d401      	bmi.n	8011fb8 <__svfiscanf_r+0x64>
 8011fb4:	46aa      	mov	sl, r5
 8011fb6:	e7e3      	b.n	8011f80 <__svfiscanf_r+0x2c>
 8011fb8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011fba:	3201      	adds	r2, #1
 8011fbc:	9245      	str	r2, [sp, #276]	; 0x114
 8011fbe:	6862      	ldr	r2, [r4, #4]
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	3a01      	subs	r2, #1
 8011fc4:	6062      	str	r2, [r4, #4]
 8011fc6:	6023      	str	r3, [r4, #0]
 8011fc8:	e7e9      	b.n	8011f9e <__svfiscanf_r+0x4a>
 8011fca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011fcc:	4621      	mov	r1, r4
 8011fce:	4630      	mov	r0, r6
 8011fd0:	4798      	blx	r3
 8011fd2:	2800      	cmp	r0, #0
 8011fd4:	d0e6      	beq.n	8011fa4 <__svfiscanf_r+0x50>
 8011fd6:	e7ed      	b.n	8011fb4 <__svfiscanf_r+0x60>
 8011fd8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8011fdc:	f040 8082 	bne.w	80120e4 <__svfiscanf_r+0x190>
 8011fe0:	9343      	str	r3, [sp, #268]	; 0x10c
 8011fe2:	9341      	str	r3, [sp, #260]	; 0x104
 8011fe4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8011fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8011fea:	d103      	bne.n	8011ff4 <__svfiscanf_r+0xa0>
 8011fec:	2310      	movs	r3, #16
 8011fee:	9341      	str	r3, [sp, #260]	; 0x104
 8011ff0:	f10a 0502 	add.w	r5, sl, #2
 8011ff4:	46aa      	mov	sl, r5
 8011ff6:	f815 1b01 	ldrb.w	r1, [r5], #1
 8011ffa:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011ffe:	2a09      	cmp	r2, #9
 8012000:	d922      	bls.n	8012048 <__svfiscanf_r+0xf4>
 8012002:	2203      	movs	r2, #3
 8012004:	4879      	ldr	r0, [pc, #484]	; (80121ec <__svfiscanf_r+0x298>)
 8012006:	f7f6 f823 	bl	8008050 <memchr>
 801200a:	b138      	cbz	r0, 801201c <__svfiscanf_r+0xc8>
 801200c:	eba0 0309 	sub.w	r3, r0, r9
 8012010:	2001      	movs	r0, #1
 8012012:	4098      	lsls	r0, r3
 8012014:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012016:	4318      	orrs	r0, r3
 8012018:	9041      	str	r0, [sp, #260]	; 0x104
 801201a:	46aa      	mov	sl, r5
 801201c:	f89a 3000 	ldrb.w	r3, [sl]
 8012020:	2b67      	cmp	r3, #103	; 0x67
 8012022:	f10a 0501 	add.w	r5, sl, #1
 8012026:	d82b      	bhi.n	8012080 <__svfiscanf_r+0x12c>
 8012028:	2b65      	cmp	r3, #101	; 0x65
 801202a:	f080 809f 	bcs.w	801216c <__svfiscanf_r+0x218>
 801202e:	2b47      	cmp	r3, #71	; 0x47
 8012030:	d810      	bhi.n	8012054 <__svfiscanf_r+0x100>
 8012032:	2b45      	cmp	r3, #69	; 0x45
 8012034:	f080 809a 	bcs.w	801216c <__svfiscanf_r+0x218>
 8012038:	2b00      	cmp	r3, #0
 801203a:	d06c      	beq.n	8012116 <__svfiscanf_r+0x1c2>
 801203c:	2b25      	cmp	r3, #37	; 0x25
 801203e:	d051      	beq.n	80120e4 <__svfiscanf_r+0x190>
 8012040:	2303      	movs	r3, #3
 8012042:	9347      	str	r3, [sp, #284]	; 0x11c
 8012044:	9742      	str	r7, [sp, #264]	; 0x108
 8012046:	e027      	b.n	8012098 <__svfiscanf_r+0x144>
 8012048:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801204a:	fb07 1303 	mla	r3, r7, r3, r1
 801204e:	3b30      	subs	r3, #48	; 0x30
 8012050:	9343      	str	r3, [sp, #268]	; 0x10c
 8012052:	e7cf      	b.n	8011ff4 <__svfiscanf_r+0xa0>
 8012054:	2b5b      	cmp	r3, #91	; 0x5b
 8012056:	d06a      	beq.n	801212e <__svfiscanf_r+0x1da>
 8012058:	d80c      	bhi.n	8012074 <__svfiscanf_r+0x120>
 801205a:	2b58      	cmp	r3, #88	; 0x58
 801205c:	d1f0      	bne.n	8012040 <__svfiscanf_r+0xec>
 801205e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012064:	9241      	str	r2, [sp, #260]	; 0x104
 8012066:	2210      	movs	r2, #16
 8012068:	9242      	str	r2, [sp, #264]	; 0x108
 801206a:	2b6e      	cmp	r3, #110	; 0x6e
 801206c:	bf8c      	ite	hi
 801206e:	2304      	movhi	r3, #4
 8012070:	2303      	movls	r3, #3
 8012072:	e010      	b.n	8012096 <__svfiscanf_r+0x142>
 8012074:	2b63      	cmp	r3, #99	; 0x63
 8012076:	d065      	beq.n	8012144 <__svfiscanf_r+0x1f0>
 8012078:	2b64      	cmp	r3, #100	; 0x64
 801207a:	d1e1      	bne.n	8012040 <__svfiscanf_r+0xec>
 801207c:	9742      	str	r7, [sp, #264]	; 0x108
 801207e:	e7f4      	b.n	801206a <__svfiscanf_r+0x116>
 8012080:	2b70      	cmp	r3, #112	; 0x70
 8012082:	d04b      	beq.n	801211c <__svfiscanf_r+0x1c8>
 8012084:	d826      	bhi.n	80120d4 <__svfiscanf_r+0x180>
 8012086:	2b6e      	cmp	r3, #110	; 0x6e
 8012088:	d062      	beq.n	8012150 <__svfiscanf_r+0x1fc>
 801208a:	d84c      	bhi.n	8012126 <__svfiscanf_r+0x1d2>
 801208c:	2b69      	cmp	r3, #105	; 0x69
 801208e:	d1d7      	bne.n	8012040 <__svfiscanf_r+0xec>
 8012090:	2300      	movs	r3, #0
 8012092:	9342      	str	r3, [sp, #264]	; 0x108
 8012094:	2303      	movs	r3, #3
 8012096:	9347      	str	r3, [sp, #284]	; 0x11c
 8012098:	6863      	ldr	r3, [r4, #4]
 801209a:	2b00      	cmp	r3, #0
 801209c:	dd68      	ble.n	8012170 <__svfiscanf_r+0x21c>
 801209e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80120a0:	0659      	lsls	r1, r3, #25
 80120a2:	d407      	bmi.n	80120b4 <__svfiscanf_r+0x160>
 80120a4:	f003 fa60 	bl	8015568 <__locale_ctype_ptr>
 80120a8:	6823      	ldr	r3, [r4, #0]
 80120aa:	781a      	ldrb	r2, [r3, #0]
 80120ac:	4410      	add	r0, r2
 80120ae:	7842      	ldrb	r2, [r0, #1]
 80120b0:	0712      	lsls	r2, r2, #28
 80120b2:	d464      	bmi.n	801217e <__svfiscanf_r+0x22a>
 80120b4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80120b6:	2b02      	cmp	r3, #2
 80120b8:	dc73      	bgt.n	80121a2 <__svfiscanf_r+0x24e>
 80120ba:	466b      	mov	r3, sp
 80120bc:	4622      	mov	r2, r4
 80120be:	a941      	add	r1, sp, #260	; 0x104
 80120c0:	4630      	mov	r0, r6
 80120c2:	f000 faa1 	bl	8012608 <_scanf_chars>
 80120c6:	2801      	cmp	r0, #1
 80120c8:	f000 8089 	beq.w	80121de <__svfiscanf_r+0x28a>
 80120cc:	2802      	cmp	r0, #2
 80120ce:	f47f af71 	bne.w	8011fb4 <__svfiscanf_r+0x60>
 80120d2:	e01d      	b.n	8012110 <__svfiscanf_r+0x1bc>
 80120d4:	2b75      	cmp	r3, #117	; 0x75
 80120d6:	d0d1      	beq.n	801207c <__svfiscanf_r+0x128>
 80120d8:	2b78      	cmp	r3, #120	; 0x78
 80120da:	d0c0      	beq.n	801205e <__svfiscanf_r+0x10a>
 80120dc:	2b73      	cmp	r3, #115	; 0x73
 80120de:	d1af      	bne.n	8012040 <__svfiscanf_r+0xec>
 80120e0:	2302      	movs	r3, #2
 80120e2:	e7d8      	b.n	8012096 <__svfiscanf_r+0x142>
 80120e4:	6863      	ldr	r3, [r4, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	dd0c      	ble.n	8012104 <__svfiscanf_r+0x1b0>
 80120ea:	6823      	ldr	r3, [r4, #0]
 80120ec:	781a      	ldrb	r2, [r3, #0]
 80120ee:	455a      	cmp	r2, fp
 80120f0:	d175      	bne.n	80121de <__svfiscanf_r+0x28a>
 80120f2:	3301      	adds	r3, #1
 80120f4:	6862      	ldr	r2, [r4, #4]
 80120f6:	6023      	str	r3, [r4, #0]
 80120f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80120fa:	3a01      	subs	r2, #1
 80120fc:	3301      	adds	r3, #1
 80120fe:	6062      	str	r2, [r4, #4]
 8012100:	9345      	str	r3, [sp, #276]	; 0x114
 8012102:	e757      	b.n	8011fb4 <__svfiscanf_r+0x60>
 8012104:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012106:	4621      	mov	r1, r4
 8012108:	4630      	mov	r0, r6
 801210a:	4798      	blx	r3
 801210c:	2800      	cmp	r0, #0
 801210e:	d0ec      	beq.n	80120ea <__svfiscanf_r+0x196>
 8012110:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012112:	2800      	cmp	r0, #0
 8012114:	d159      	bne.n	80121ca <__svfiscanf_r+0x276>
 8012116:	f04f 30ff 	mov.w	r0, #4294967295
 801211a:	e05c      	b.n	80121d6 <__svfiscanf_r+0x282>
 801211c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801211e:	f042 0220 	orr.w	r2, r2, #32
 8012122:	9241      	str	r2, [sp, #260]	; 0x104
 8012124:	e79b      	b.n	801205e <__svfiscanf_r+0x10a>
 8012126:	2308      	movs	r3, #8
 8012128:	9342      	str	r3, [sp, #264]	; 0x108
 801212a:	2304      	movs	r3, #4
 801212c:	e7b3      	b.n	8012096 <__svfiscanf_r+0x142>
 801212e:	4629      	mov	r1, r5
 8012130:	4640      	mov	r0, r8
 8012132:	f000 fe6d 	bl	8012e10 <__sccl>
 8012136:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801213c:	9341      	str	r3, [sp, #260]	; 0x104
 801213e:	4605      	mov	r5, r0
 8012140:	2301      	movs	r3, #1
 8012142:	e7a8      	b.n	8012096 <__svfiscanf_r+0x142>
 8012144:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801214a:	9341      	str	r3, [sp, #260]	; 0x104
 801214c:	2300      	movs	r3, #0
 801214e:	e7a2      	b.n	8012096 <__svfiscanf_r+0x142>
 8012150:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012152:	06c3      	lsls	r3, r0, #27
 8012154:	f53f af2e 	bmi.w	8011fb4 <__svfiscanf_r+0x60>
 8012158:	9b00      	ldr	r3, [sp, #0]
 801215a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801215c:	1d19      	adds	r1, r3, #4
 801215e:	9100      	str	r1, [sp, #0]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	07c0      	lsls	r0, r0, #31
 8012164:	bf4c      	ite	mi
 8012166:	801a      	strhmi	r2, [r3, #0]
 8012168:	601a      	strpl	r2, [r3, #0]
 801216a:	e723      	b.n	8011fb4 <__svfiscanf_r+0x60>
 801216c:	2305      	movs	r3, #5
 801216e:	e792      	b.n	8012096 <__svfiscanf_r+0x142>
 8012170:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012172:	4621      	mov	r1, r4
 8012174:	4630      	mov	r0, r6
 8012176:	4798      	blx	r3
 8012178:	2800      	cmp	r0, #0
 801217a:	d090      	beq.n	801209e <__svfiscanf_r+0x14a>
 801217c:	e7c8      	b.n	8012110 <__svfiscanf_r+0x1bc>
 801217e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012180:	3201      	adds	r2, #1
 8012182:	9245      	str	r2, [sp, #276]	; 0x114
 8012184:	6862      	ldr	r2, [r4, #4]
 8012186:	3a01      	subs	r2, #1
 8012188:	2a00      	cmp	r2, #0
 801218a:	6062      	str	r2, [r4, #4]
 801218c:	dd02      	ble.n	8012194 <__svfiscanf_r+0x240>
 801218e:	3301      	adds	r3, #1
 8012190:	6023      	str	r3, [r4, #0]
 8012192:	e787      	b.n	80120a4 <__svfiscanf_r+0x150>
 8012194:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012196:	4621      	mov	r1, r4
 8012198:	4630      	mov	r0, r6
 801219a:	4798      	blx	r3
 801219c:	2800      	cmp	r0, #0
 801219e:	d081      	beq.n	80120a4 <__svfiscanf_r+0x150>
 80121a0:	e7b6      	b.n	8012110 <__svfiscanf_r+0x1bc>
 80121a2:	2b04      	cmp	r3, #4
 80121a4:	dc06      	bgt.n	80121b4 <__svfiscanf_r+0x260>
 80121a6:	466b      	mov	r3, sp
 80121a8:	4622      	mov	r2, r4
 80121aa:	a941      	add	r1, sp, #260	; 0x104
 80121ac:	4630      	mov	r0, r6
 80121ae:	f000 fa8f 	bl	80126d0 <_scanf_i>
 80121b2:	e788      	b.n	80120c6 <__svfiscanf_r+0x172>
 80121b4:	4b0e      	ldr	r3, [pc, #56]	; (80121f0 <__svfiscanf_r+0x29c>)
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	f43f aefc 	beq.w	8011fb4 <__svfiscanf_r+0x60>
 80121bc:	466b      	mov	r3, sp
 80121be:	4622      	mov	r2, r4
 80121c0:	a941      	add	r1, sp, #260	; 0x104
 80121c2:	4630      	mov	r0, r6
 80121c4:	f000 f83e 	bl	8012244 <_scanf_float>
 80121c8:	e77d      	b.n	80120c6 <__svfiscanf_r+0x172>
 80121ca:	89a3      	ldrh	r3, [r4, #12]
 80121cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80121d0:	bf18      	it	ne
 80121d2:	f04f 30ff 	movne.w	r0, #4294967295
 80121d6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80121da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121de:	9844      	ldr	r0, [sp, #272]	; 0x110
 80121e0:	e7f9      	b.n	80121d6 <__svfiscanf_r+0x282>
 80121e2:	bf00      	nop
 80121e4:	08013fa1 	.word	0x08013fa1
 80121e8:	08012ca9 	.word	0x08012ca9
 80121ec:	080167da 	.word	0x080167da
 80121f0:	08012245 	.word	0x08012245

080121f4 <_vfiscanf_r>:
 80121f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121f8:	460c      	mov	r4, r1
 80121fa:	4616      	mov	r6, r2
 80121fc:	461f      	mov	r7, r3
 80121fe:	4605      	mov	r5, r0
 8012200:	b118      	cbz	r0, 801220a <_vfiscanf_r+0x16>
 8012202:	6983      	ldr	r3, [r0, #24]
 8012204:	b90b      	cbnz	r3, 801220a <_vfiscanf_r+0x16>
 8012206:	f7fe ff1f 	bl	8011048 <__sinit>
 801220a:	4b0b      	ldr	r3, [pc, #44]	; (8012238 <_vfiscanf_r+0x44>)
 801220c:	429c      	cmp	r4, r3
 801220e:	d108      	bne.n	8012222 <_vfiscanf_r+0x2e>
 8012210:	686c      	ldr	r4, [r5, #4]
 8012212:	463b      	mov	r3, r7
 8012214:	4632      	mov	r2, r6
 8012216:	4621      	mov	r1, r4
 8012218:	4628      	mov	r0, r5
 801221a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801221e:	f7ff be99 	b.w	8011f54 <__svfiscanf_r>
 8012222:	4b06      	ldr	r3, [pc, #24]	; (801223c <_vfiscanf_r+0x48>)
 8012224:	429c      	cmp	r4, r3
 8012226:	d101      	bne.n	801222c <_vfiscanf_r+0x38>
 8012228:	68ac      	ldr	r4, [r5, #8]
 801222a:	e7f2      	b.n	8012212 <_vfiscanf_r+0x1e>
 801222c:	4b04      	ldr	r3, [pc, #16]	; (8012240 <_vfiscanf_r+0x4c>)
 801222e:	429c      	cmp	r4, r3
 8012230:	bf08      	it	eq
 8012232:	68ec      	ldreq	r4, [r5, #12]
 8012234:	e7ed      	b.n	8012212 <_vfiscanf_r+0x1e>
 8012236:	bf00      	nop
 8012238:	08016790 	.word	0x08016790
 801223c:	080167b0 	.word	0x080167b0
 8012240:	08016770 	.word	0x08016770

08012244 <_scanf_float>:
 8012244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012248:	469a      	mov	sl, r3
 801224a:	688b      	ldr	r3, [r1, #8]
 801224c:	4616      	mov	r6, r2
 801224e:	1e5a      	subs	r2, r3, #1
 8012250:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012254:	b087      	sub	sp, #28
 8012256:	bf83      	ittte	hi
 8012258:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801225c:	189b      	addhi	r3, r3, r2
 801225e:	9301      	strhi	r3, [sp, #4]
 8012260:	2300      	movls	r3, #0
 8012262:	bf86      	itte	hi
 8012264:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012268:	608b      	strhi	r3, [r1, #8]
 801226a:	9301      	strls	r3, [sp, #4]
 801226c:	680b      	ldr	r3, [r1, #0]
 801226e:	4688      	mov	r8, r1
 8012270:	f04f 0b00 	mov.w	fp, #0
 8012274:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012278:	f848 3b1c 	str.w	r3, [r8], #28
 801227c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012280:	4607      	mov	r7, r0
 8012282:	460c      	mov	r4, r1
 8012284:	4645      	mov	r5, r8
 8012286:	465a      	mov	r2, fp
 8012288:	46d9      	mov	r9, fp
 801228a:	f8cd b008 	str.w	fp, [sp, #8]
 801228e:	68a1      	ldr	r1, [r4, #8]
 8012290:	b181      	cbz	r1, 80122b4 <_scanf_float+0x70>
 8012292:	6833      	ldr	r3, [r6, #0]
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	2b49      	cmp	r3, #73	; 0x49
 8012298:	d071      	beq.n	801237e <_scanf_float+0x13a>
 801229a:	d84d      	bhi.n	8012338 <_scanf_float+0xf4>
 801229c:	2b39      	cmp	r3, #57	; 0x39
 801229e:	d840      	bhi.n	8012322 <_scanf_float+0xde>
 80122a0:	2b31      	cmp	r3, #49	; 0x31
 80122a2:	f080 8088 	bcs.w	80123b6 <_scanf_float+0x172>
 80122a6:	2b2d      	cmp	r3, #45	; 0x2d
 80122a8:	f000 8090 	beq.w	80123cc <_scanf_float+0x188>
 80122ac:	d815      	bhi.n	80122da <_scanf_float+0x96>
 80122ae:	2b2b      	cmp	r3, #43	; 0x2b
 80122b0:	f000 808c 	beq.w	80123cc <_scanf_float+0x188>
 80122b4:	f1b9 0f00 	cmp.w	r9, #0
 80122b8:	d003      	beq.n	80122c2 <_scanf_float+0x7e>
 80122ba:	6823      	ldr	r3, [r4, #0]
 80122bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	3a01      	subs	r2, #1
 80122c4:	2a01      	cmp	r2, #1
 80122c6:	f200 80ea 	bhi.w	801249e <_scanf_float+0x25a>
 80122ca:	4545      	cmp	r5, r8
 80122cc:	f200 80dc 	bhi.w	8012488 <_scanf_float+0x244>
 80122d0:	2601      	movs	r6, #1
 80122d2:	4630      	mov	r0, r6
 80122d4:	b007      	add	sp, #28
 80122d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122da:	2b2e      	cmp	r3, #46	; 0x2e
 80122dc:	f000 809f 	beq.w	801241e <_scanf_float+0x1da>
 80122e0:	2b30      	cmp	r3, #48	; 0x30
 80122e2:	d1e7      	bne.n	80122b4 <_scanf_float+0x70>
 80122e4:	6820      	ldr	r0, [r4, #0]
 80122e6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80122ea:	d064      	beq.n	80123b6 <_scanf_float+0x172>
 80122ec:	9b01      	ldr	r3, [sp, #4]
 80122ee:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80122f2:	6020      	str	r0, [r4, #0]
 80122f4:	f109 0901 	add.w	r9, r9, #1
 80122f8:	b11b      	cbz	r3, 8012302 <_scanf_float+0xbe>
 80122fa:	3b01      	subs	r3, #1
 80122fc:	3101      	adds	r1, #1
 80122fe:	9301      	str	r3, [sp, #4]
 8012300:	60a1      	str	r1, [r4, #8]
 8012302:	68a3      	ldr	r3, [r4, #8]
 8012304:	3b01      	subs	r3, #1
 8012306:	60a3      	str	r3, [r4, #8]
 8012308:	6923      	ldr	r3, [r4, #16]
 801230a:	3301      	adds	r3, #1
 801230c:	6123      	str	r3, [r4, #16]
 801230e:	6873      	ldr	r3, [r6, #4]
 8012310:	3b01      	subs	r3, #1
 8012312:	2b00      	cmp	r3, #0
 8012314:	6073      	str	r3, [r6, #4]
 8012316:	f340 80ac 	ble.w	8012472 <_scanf_float+0x22e>
 801231a:	6833      	ldr	r3, [r6, #0]
 801231c:	3301      	adds	r3, #1
 801231e:	6033      	str	r3, [r6, #0]
 8012320:	e7b5      	b.n	801228e <_scanf_float+0x4a>
 8012322:	2b45      	cmp	r3, #69	; 0x45
 8012324:	f000 8085 	beq.w	8012432 <_scanf_float+0x1ee>
 8012328:	2b46      	cmp	r3, #70	; 0x46
 801232a:	d06a      	beq.n	8012402 <_scanf_float+0x1be>
 801232c:	2b41      	cmp	r3, #65	; 0x41
 801232e:	d1c1      	bne.n	80122b4 <_scanf_float+0x70>
 8012330:	2a01      	cmp	r2, #1
 8012332:	d1bf      	bne.n	80122b4 <_scanf_float+0x70>
 8012334:	2202      	movs	r2, #2
 8012336:	e046      	b.n	80123c6 <_scanf_float+0x182>
 8012338:	2b65      	cmp	r3, #101	; 0x65
 801233a:	d07a      	beq.n	8012432 <_scanf_float+0x1ee>
 801233c:	d818      	bhi.n	8012370 <_scanf_float+0x12c>
 801233e:	2b54      	cmp	r3, #84	; 0x54
 8012340:	d066      	beq.n	8012410 <_scanf_float+0x1cc>
 8012342:	d811      	bhi.n	8012368 <_scanf_float+0x124>
 8012344:	2b4e      	cmp	r3, #78	; 0x4e
 8012346:	d1b5      	bne.n	80122b4 <_scanf_float+0x70>
 8012348:	2a00      	cmp	r2, #0
 801234a:	d146      	bne.n	80123da <_scanf_float+0x196>
 801234c:	f1b9 0f00 	cmp.w	r9, #0
 8012350:	d145      	bne.n	80123de <_scanf_float+0x19a>
 8012352:	6821      	ldr	r1, [r4, #0]
 8012354:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012358:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801235c:	d13f      	bne.n	80123de <_scanf_float+0x19a>
 801235e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012362:	6021      	str	r1, [r4, #0]
 8012364:	2201      	movs	r2, #1
 8012366:	e02e      	b.n	80123c6 <_scanf_float+0x182>
 8012368:	2b59      	cmp	r3, #89	; 0x59
 801236a:	d01e      	beq.n	80123aa <_scanf_float+0x166>
 801236c:	2b61      	cmp	r3, #97	; 0x61
 801236e:	e7de      	b.n	801232e <_scanf_float+0xea>
 8012370:	2b6e      	cmp	r3, #110	; 0x6e
 8012372:	d0e9      	beq.n	8012348 <_scanf_float+0x104>
 8012374:	d815      	bhi.n	80123a2 <_scanf_float+0x15e>
 8012376:	2b66      	cmp	r3, #102	; 0x66
 8012378:	d043      	beq.n	8012402 <_scanf_float+0x1be>
 801237a:	2b69      	cmp	r3, #105	; 0x69
 801237c:	d19a      	bne.n	80122b4 <_scanf_float+0x70>
 801237e:	f1bb 0f00 	cmp.w	fp, #0
 8012382:	d138      	bne.n	80123f6 <_scanf_float+0x1b2>
 8012384:	f1b9 0f00 	cmp.w	r9, #0
 8012388:	d197      	bne.n	80122ba <_scanf_float+0x76>
 801238a:	6821      	ldr	r1, [r4, #0]
 801238c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012390:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012394:	d195      	bne.n	80122c2 <_scanf_float+0x7e>
 8012396:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801239a:	6021      	str	r1, [r4, #0]
 801239c:	f04f 0b01 	mov.w	fp, #1
 80123a0:	e011      	b.n	80123c6 <_scanf_float+0x182>
 80123a2:	2b74      	cmp	r3, #116	; 0x74
 80123a4:	d034      	beq.n	8012410 <_scanf_float+0x1cc>
 80123a6:	2b79      	cmp	r3, #121	; 0x79
 80123a8:	d184      	bne.n	80122b4 <_scanf_float+0x70>
 80123aa:	f1bb 0f07 	cmp.w	fp, #7
 80123ae:	d181      	bne.n	80122b4 <_scanf_float+0x70>
 80123b0:	f04f 0b08 	mov.w	fp, #8
 80123b4:	e007      	b.n	80123c6 <_scanf_float+0x182>
 80123b6:	eb12 0f0b 	cmn.w	r2, fp
 80123ba:	f47f af7b 	bne.w	80122b4 <_scanf_float+0x70>
 80123be:	6821      	ldr	r1, [r4, #0]
 80123c0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80123c4:	6021      	str	r1, [r4, #0]
 80123c6:	702b      	strb	r3, [r5, #0]
 80123c8:	3501      	adds	r5, #1
 80123ca:	e79a      	b.n	8012302 <_scanf_float+0xbe>
 80123cc:	6821      	ldr	r1, [r4, #0]
 80123ce:	0608      	lsls	r0, r1, #24
 80123d0:	f57f af70 	bpl.w	80122b4 <_scanf_float+0x70>
 80123d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80123d8:	e7f4      	b.n	80123c4 <_scanf_float+0x180>
 80123da:	2a02      	cmp	r2, #2
 80123dc:	d047      	beq.n	801246e <_scanf_float+0x22a>
 80123de:	f1bb 0f01 	cmp.w	fp, #1
 80123e2:	d003      	beq.n	80123ec <_scanf_float+0x1a8>
 80123e4:	f1bb 0f04 	cmp.w	fp, #4
 80123e8:	f47f af64 	bne.w	80122b4 <_scanf_float+0x70>
 80123ec:	f10b 0b01 	add.w	fp, fp, #1
 80123f0:	fa5f fb8b 	uxtb.w	fp, fp
 80123f4:	e7e7      	b.n	80123c6 <_scanf_float+0x182>
 80123f6:	f1bb 0f03 	cmp.w	fp, #3
 80123fa:	d0f7      	beq.n	80123ec <_scanf_float+0x1a8>
 80123fc:	f1bb 0f05 	cmp.w	fp, #5
 8012400:	e7f2      	b.n	80123e8 <_scanf_float+0x1a4>
 8012402:	f1bb 0f02 	cmp.w	fp, #2
 8012406:	f47f af55 	bne.w	80122b4 <_scanf_float+0x70>
 801240a:	f04f 0b03 	mov.w	fp, #3
 801240e:	e7da      	b.n	80123c6 <_scanf_float+0x182>
 8012410:	f1bb 0f06 	cmp.w	fp, #6
 8012414:	f47f af4e 	bne.w	80122b4 <_scanf_float+0x70>
 8012418:	f04f 0b07 	mov.w	fp, #7
 801241c:	e7d3      	b.n	80123c6 <_scanf_float+0x182>
 801241e:	6821      	ldr	r1, [r4, #0]
 8012420:	0588      	lsls	r0, r1, #22
 8012422:	f57f af47 	bpl.w	80122b4 <_scanf_float+0x70>
 8012426:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801242a:	6021      	str	r1, [r4, #0]
 801242c:	f8cd 9008 	str.w	r9, [sp, #8]
 8012430:	e7c9      	b.n	80123c6 <_scanf_float+0x182>
 8012432:	6821      	ldr	r1, [r4, #0]
 8012434:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012438:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801243c:	d006      	beq.n	801244c <_scanf_float+0x208>
 801243e:	0548      	lsls	r0, r1, #21
 8012440:	f57f af38 	bpl.w	80122b4 <_scanf_float+0x70>
 8012444:	f1b9 0f00 	cmp.w	r9, #0
 8012448:	f43f af3b 	beq.w	80122c2 <_scanf_float+0x7e>
 801244c:	0588      	lsls	r0, r1, #22
 801244e:	bf58      	it	pl
 8012450:	9802      	ldrpl	r0, [sp, #8]
 8012452:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012456:	bf58      	it	pl
 8012458:	eba9 0000 	subpl.w	r0, r9, r0
 801245c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012460:	bf58      	it	pl
 8012462:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012466:	6021      	str	r1, [r4, #0]
 8012468:	f04f 0900 	mov.w	r9, #0
 801246c:	e7ab      	b.n	80123c6 <_scanf_float+0x182>
 801246e:	2203      	movs	r2, #3
 8012470:	e7a9      	b.n	80123c6 <_scanf_float+0x182>
 8012472:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012476:	9205      	str	r2, [sp, #20]
 8012478:	4631      	mov	r1, r6
 801247a:	4638      	mov	r0, r7
 801247c:	4798      	blx	r3
 801247e:	9a05      	ldr	r2, [sp, #20]
 8012480:	2800      	cmp	r0, #0
 8012482:	f43f af04 	beq.w	801228e <_scanf_float+0x4a>
 8012486:	e715      	b.n	80122b4 <_scanf_float+0x70>
 8012488:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801248c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012490:	4632      	mov	r2, r6
 8012492:	4638      	mov	r0, r7
 8012494:	4798      	blx	r3
 8012496:	6923      	ldr	r3, [r4, #16]
 8012498:	3b01      	subs	r3, #1
 801249a:	6123      	str	r3, [r4, #16]
 801249c:	e715      	b.n	80122ca <_scanf_float+0x86>
 801249e:	f10b 33ff 	add.w	r3, fp, #4294967295
 80124a2:	2b06      	cmp	r3, #6
 80124a4:	d80a      	bhi.n	80124bc <_scanf_float+0x278>
 80124a6:	f1bb 0f02 	cmp.w	fp, #2
 80124aa:	d968      	bls.n	801257e <_scanf_float+0x33a>
 80124ac:	f1ab 0b03 	sub.w	fp, fp, #3
 80124b0:	fa5f fb8b 	uxtb.w	fp, fp
 80124b4:	eba5 0b0b 	sub.w	fp, r5, fp
 80124b8:	455d      	cmp	r5, fp
 80124ba:	d14b      	bne.n	8012554 <_scanf_float+0x310>
 80124bc:	6823      	ldr	r3, [r4, #0]
 80124be:	05da      	lsls	r2, r3, #23
 80124c0:	d51f      	bpl.n	8012502 <_scanf_float+0x2be>
 80124c2:	055b      	lsls	r3, r3, #21
 80124c4:	d468      	bmi.n	8012598 <_scanf_float+0x354>
 80124c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80124ca:	6923      	ldr	r3, [r4, #16]
 80124cc:	2965      	cmp	r1, #101	; 0x65
 80124ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80124d2:	f105 3bff 	add.w	fp, r5, #4294967295
 80124d6:	6123      	str	r3, [r4, #16]
 80124d8:	d00d      	beq.n	80124f6 <_scanf_float+0x2b2>
 80124da:	2945      	cmp	r1, #69	; 0x45
 80124dc:	d00b      	beq.n	80124f6 <_scanf_float+0x2b2>
 80124de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124e2:	4632      	mov	r2, r6
 80124e4:	4638      	mov	r0, r7
 80124e6:	4798      	blx	r3
 80124e8:	6923      	ldr	r3, [r4, #16]
 80124ea:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80124ee:	3b01      	subs	r3, #1
 80124f0:	f1a5 0b02 	sub.w	fp, r5, #2
 80124f4:	6123      	str	r3, [r4, #16]
 80124f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124fa:	4632      	mov	r2, r6
 80124fc:	4638      	mov	r0, r7
 80124fe:	4798      	blx	r3
 8012500:	465d      	mov	r5, fp
 8012502:	6826      	ldr	r6, [r4, #0]
 8012504:	f016 0610 	ands.w	r6, r6, #16
 8012508:	d17a      	bne.n	8012600 <_scanf_float+0x3bc>
 801250a:	702e      	strb	r6, [r5, #0]
 801250c:	6823      	ldr	r3, [r4, #0]
 801250e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012516:	d142      	bne.n	801259e <_scanf_float+0x35a>
 8012518:	9b02      	ldr	r3, [sp, #8]
 801251a:	eba9 0303 	sub.w	r3, r9, r3
 801251e:	425a      	negs	r2, r3
 8012520:	2b00      	cmp	r3, #0
 8012522:	d149      	bne.n	80125b8 <_scanf_float+0x374>
 8012524:	2200      	movs	r2, #0
 8012526:	4641      	mov	r1, r8
 8012528:	4638      	mov	r0, r7
 801252a:	f001 fbd5 	bl	8013cd8 <_strtod_r>
 801252e:	6825      	ldr	r5, [r4, #0]
 8012530:	f8da 3000 	ldr.w	r3, [sl]
 8012534:	f015 0f02 	tst.w	r5, #2
 8012538:	f103 0204 	add.w	r2, r3, #4
 801253c:	ec59 8b10 	vmov	r8, r9, d0
 8012540:	f8ca 2000 	str.w	r2, [sl]
 8012544:	d043      	beq.n	80125ce <_scanf_float+0x38a>
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	e9c3 8900 	strd	r8, r9, [r3]
 801254c:	68e3      	ldr	r3, [r4, #12]
 801254e:	3301      	adds	r3, #1
 8012550:	60e3      	str	r3, [r4, #12]
 8012552:	e6be      	b.n	80122d2 <_scanf_float+0x8e>
 8012554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012558:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801255c:	4632      	mov	r2, r6
 801255e:	4638      	mov	r0, r7
 8012560:	4798      	blx	r3
 8012562:	6923      	ldr	r3, [r4, #16]
 8012564:	3b01      	subs	r3, #1
 8012566:	6123      	str	r3, [r4, #16]
 8012568:	e7a6      	b.n	80124b8 <_scanf_float+0x274>
 801256a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801256e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012572:	4632      	mov	r2, r6
 8012574:	4638      	mov	r0, r7
 8012576:	4798      	blx	r3
 8012578:	6923      	ldr	r3, [r4, #16]
 801257a:	3b01      	subs	r3, #1
 801257c:	6123      	str	r3, [r4, #16]
 801257e:	4545      	cmp	r5, r8
 8012580:	d8f3      	bhi.n	801256a <_scanf_float+0x326>
 8012582:	e6a5      	b.n	80122d0 <_scanf_float+0x8c>
 8012584:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012588:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801258c:	4632      	mov	r2, r6
 801258e:	4638      	mov	r0, r7
 8012590:	4798      	blx	r3
 8012592:	6923      	ldr	r3, [r4, #16]
 8012594:	3b01      	subs	r3, #1
 8012596:	6123      	str	r3, [r4, #16]
 8012598:	4545      	cmp	r5, r8
 801259a:	d8f3      	bhi.n	8012584 <_scanf_float+0x340>
 801259c:	e698      	b.n	80122d0 <_scanf_float+0x8c>
 801259e:	9b03      	ldr	r3, [sp, #12]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d0bf      	beq.n	8012524 <_scanf_float+0x2e0>
 80125a4:	9904      	ldr	r1, [sp, #16]
 80125a6:	230a      	movs	r3, #10
 80125a8:	4632      	mov	r2, r6
 80125aa:	3101      	adds	r1, #1
 80125ac:	4638      	mov	r0, r7
 80125ae:	f001 fc1f 	bl	8013df0 <_strtol_r>
 80125b2:	9b03      	ldr	r3, [sp, #12]
 80125b4:	9d04      	ldr	r5, [sp, #16]
 80125b6:	1ac2      	subs	r2, r0, r3
 80125b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80125bc:	429d      	cmp	r5, r3
 80125be:	bf28      	it	cs
 80125c0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80125c4:	490f      	ldr	r1, [pc, #60]	; (8012604 <_scanf_float+0x3c0>)
 80125c6:	4628      	mov	r0, r5
 80125c8:	f000 fd10 	bl	8012fec <siprintf>
 80125cc:	e7aa      	b.n	8012524 <_scanf_float+0x2e0>
 80125ce:	f015 0504 	ands.w	r5, r5, #4
 80125d2:	d1b8      	bne.n	8012546 <_scanf_float+0x302>
 80125d4:	681f      	ldr	r7, [r3, #0]
 80125d6:	ee10 2a10 	vmov	r2, s0
 80125da:	464b      	mov	r3, r9
 80125dc:	ee10 0a10 	vmov	r0, s0
 80125e0:	4649      	mov	r1, r9
 80125e2:	f7f6 f9db 	bl	800899c <__aeabi_dcmpun>
 80125e6:	b128      	cbz	r0, 80125f4 <_scanf_float+0x3b0>
 80125e8:	4628      	mov	r0, r5
 80125ea:	f000 fcf9 	bl	8012fe0 <nanf>
 80125ee:	ed87 0a00 	vstr	s0, [r7]
 80125f2:	e7ab      	b.n	801254c <_scanf_float+0x308>
 80125f4:	4640      	mov	r0, r8
 80125f6:	4649      	mov	r1, r9
 80125f8:	f7f6 fa2e 	bl	8008a58 <__aeabi_d2f>
 80125fc:	6038      	str	r0, [r7, #0]
 80125fe:	e7a5      	b.n	801254c <_scanf_float+0x308>
 8012600:	2600      	movs	r6, #0
 8012602:	e666      	b.n	80122d2 <_scanf_float+0x8e>
 8012604:	08016817 	.word	0x08016817

08012608 <_scanf_chars>:
 8012608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801260c:	4615      	mov	r5, r2
 801260e:	688a      	ldr	r2, [r1, #8]
 8012610:	4680      	mov	r8, r0
 8012612:	460c      	mov	r4, r1
 8012614:	b932      	cbnz	r2, 8012624 <_scanf_chars+0x1c>
 8012616:	698a      	ldr	r2, [r1, #24]
 8012618:	2a00      	cmp	r2, #0
 801261a:	bf14      	ite	ne
 801261c:	f04f 32ff 	movne.w	r2, #4294967295
 8012620:	2201      	moveq	r2, #1
 8012622:	608a      	str	r2, [r1, #8]
 8012624:	6822      	ldr	r2, [r4, #0]
 8012626:	06d1      	lsls	r1, r2, #27
 8012628:	bf5f      	itttt	pl
 801262a:	681a      	ldrpl	r2, [r3, #0]
 801262c:	1d11      	addpl	r1, r2, #4
 801262e:	6019      	strpl	r1, [r3, #0]
 8012630:	6817      	ldrpl	r7, [r2, #0]
 8012632:	2600      	movs	r6, #0
 8012634:	69a3      	ldr	r3, [r4, #24]
 8012636:	b1db      	cbz	r3, 8012670 <_scanf_chars+0x68>
 8012638:	2b01      	cmp	r3, #1
 801263a:	d107      	bne.n	801264c <_scanf_chars+0x44>
 801263c:	682b      	ldr	r3, [r5, #0]
 801263e:	6962      	ldr	r2, [r4, #20]
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	5cd3      	ldrb	r3, [r2, r3]
 8012644:	b9a3      	cbnz	r3, 8012670 <_scanf_chars+0x68>
 8012646:	2e00      	cmp	r6, #0
 8012648:	d132      	bne.n	80126b0 <_scanf_chars+0xa8>
 801264a:	e006      	b.n	801265a <_scanf_chars+0x52>
 801264c:	2b02      	cmp	r3, #2
 801264e:	d007      	beq.n	8012660 <_scanf_chars+0x58>
 8012650:	2e00      	cmp	r6, #0
 8012652:	d12d      	bne.n	80126b0 <_scanf_chars+0xa8>
 8012654:	69a3      	ldr	r3, [r4, #24]
 8012656:	2b01      	cmp	r3, #1
 8012658:	d12a      	bne.n	80126b0 <_scanf_chars+0xa8>
 801265a:	2001      	movs	r0, #1
 801265c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012660:	f002 ff82 	bl	8015568 <__locale_ctype_ptr>
 8012664:	682b      	ldr	r3, [r5, #0]
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	4418      	add	r0, r3
 801266a:	7843      	ldrb	r3, [r0, #1]
 801266c:	071b      	lsls	r3, r3, #28
 801266e:	d4ef      	bmi.n	8012650 <_scanf_chars+0x48>
 8012670:	6823      	ldr	r3, [r4, #0]
 8012672:	06da      	lsls	r2, r3, #27
 8012674:	bf5e      	ittt	pl
 8012676:	682b      	ldrpl	r3, [r5, #0]
 8012678:	781b      	ldrbpl	r3, [r3, #0]
 801267a:	703b      	strbpl	r3, [r7, #0]
 801267c:	682a      	ldr	r2, [r5, #0]
 801267e:	686b      	ldr	r3, [r5, #4]
 8012680:	f102 0201 	add.w	r2, r2, #1
 8012684:	602a      	str	r2, [r5, #0]
 8012686:	68a2      	ldr	r2, [r4, #8]
 8012688:	f103 33ff 	add.w	r3, r3, #4294967295
 801268c:	f102 32ff 	add.w	r2, r2, #4294967295
 8012690:	606b      	str	r3, [r5, #4]
 8012692:	f106 0601 	add.w	r6, r6, #1
 8012696:	bf58      	it	pl
 8012698:	3701      	addpl	r7, #1
 801269a:	60a2      	str	r2, [r4, #8]
 801269c:	b142      	cbz	r2, 80126b0 <_scanf_chars+0xa8>
 801269e:	2b00      	cmp	r3, #0
 80126a0:	dcc8      	bgt.n	8012634 <_scanf_chars+0x2c>
 80126a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80126a6:	4629      	mov	r1, r5
 80126a8:	4640      	mov	r0, r8
 80126aa:	4798      	blx	r3
 80126ac:	2800      	cmp	r0, #0
 80126ae:	d0c1      	beq.n	8012634 <_scanf_chars+0x2c>
 80126b0:	6823      	ldr	r3, [r4, #0]
 80126b2:	f013 0310 	ands.w	r3, r3, #16
 80126b6:	d105      	bne.n	80126c4 <_scanf_chars+0xbc>
 80126b8:	68e2      	ldr	r2, [r4, #12]
 80126ba:	3201      	adds	r2, #1
 80126bc:	60e2      	str	r2, [r4, #12]
 80126be:	69a2      	ldr	r2, [r4, #24]
 80126c0:	b102      	cbz	r2, 80126c4 <_scanf_chars+0xbc>
 80126c2:	703b      	strb	r3, [r7, #0]
 80126c4:	6923      	ldr	r3, [r4, #16]
 80126c6:	441e      	add	r6, r3
 80126c8:	6126      	str	r6, [r4, #16]
 80126ca:	2000      	movs	r0, #0
 80126cc:	e7c6      	b.n	801265c <_scanf_chars+0x54>
	...

080126d0 <_scanf_i>:
 80126d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d4:	469a      	mov	sl, r3
 80126d6:	4b74      	ldr	r3, [pc, #464]	; (80128a8 <_scanf_i+0x1d8>)
 80126d8:	460c      	mov	r4, r1
 80126da:	4683      	mov	fp, r0
 80126dc:	4616      	mov	r6, r2
 80126de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80126e2:	b087      	sub	sp, #28
 80126e4:	ab03      	add	r3, sp, #12
 80126e6:	68a7      	ldr	r7, [r4, #8]
 80126e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80126ec:	4b6f      	ldr	r3, [pc, #444]	; (80128ac <_scanf_i+0x1dc>)
 80126ee:	69a1      	ldr	r1, [r4, #24]
 80126f0:	4a6f      	ldr	r2, [pc, #444]	; (80128b0 <_scanf_i+0x1e0>)
 80126f2:	2903      	cmp	r1, #3
 80126f4:	bf08      	it	eq
 80126f6:	461a      	moveq	r2, r3
 80126f8:	1e7b      	subs	r3, r7, #1
 80126fa:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80126fe:	bf84      	itt	hi
 8012700:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012704:	60a3      	strhi	r3, [r4, #8]
 8012706:	6823      	ldr	r3, [r4, #0]
 8012708:	9200      	str	r2, [sp, #0]
 801270a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801270e:	bf88      	it	hi
 8012710:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012714:	f104 091c 	add.w	r9, r4, #28
 8012718:	6023      	str	r3, [r4, #0]
 801271a:	bf8c      	ite	hi
 801271c:	197f      	addhi	r7, r7, r5
 801271e:	2700      	movls	r7, #0
 8012720:	464b      	mov	r3, r9
 8012722:	f04f 0800 	mov.w	r8, #0
 8012726:	9301      	str	r3, [sp, #4]
 8012728:	6831      	ldr	r1, [r6, #0]
 801272a:	ab03      	add	r3, sp, #12
 801272c:	2202      	movs	r2, #2
 801272e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012732:	7809      	ldrb	r1, [r1, #0]
 8012734:	f7f5 fc8c 	bl	8008050 <memchr>
 8012738:	9b01      	ldr	r3, [sp, #4]
 801273a:	b330      	cbz	r0, 801278a <_scanf_i+0xba>
 801273c:	f1b8 0f01 	cmp.w	r8, #1
 8012740:	d15a      	bne.n	80127f8 <_scanf_i+0x128>
 8012742:	6862      	ldr	r2, [r4, #4]
 8012744:	b92a      	cbnz	r2, 8012752 <_scanf_i+0x82>
 8012746:	6822      	ldr	r2, [r4, #0]
 8012748:	2108      	movs	r1, #8
 801274a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801274e:	6061      	str	r1, [r4, #4]
 8012750:	6022      	str	r2, [r4, #0]
 8012752:	6822      	ldr	r2, [r4, #0]
 8012754:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012758:	6022      	str	r2, [r4, #0]
 801275a:	68a2      	ldr	r2, [r4, #8]
 801275c:	1e51      	subs	r1, r2, #1
 801275e:	60a1      	str	r1, [r4, #8]
 8012760:	b19a      	cbz	r2, 801278a <_scanf_i+0xba>
 8012762:	6832      	ldr	r2, [r6, #0]
 8012764:	1c51      	adds	r1, r2, #1
 8012766:	6031      	str	r1, [r6, #0]
 8012768:	7812      	ldrb	r2, [r2, #0]
 801276a:	701a      	strb	r2, [r3, #0]
 801276c:	1c5d      	adds	r5, r3, #1
 801276e:	6873      	ldr	r3, [r6, #4]
 8012770:	3b01      	subs	r3, #1
 8012772:	2b00      	cmp	r3, #0
 8012774:	6073      	str	r3, [r6, #4]
 8012776:	dc07      	bgt.n	8012788 <_scanf_i+0xb8>
 8012778:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801277c:	4631      	mov	r1, r6
 801277e:	4658      	mov	r0, fp
 8012780:	4798      	blx	r3
 8012782:	2800      	cmp	r0, #0
 8012784:	f040 8086 	bne.w	8012894 <_scanf_i+0x1c4>
 8012788:	462b      	mov	r3, r5
 801278a:	f108 0801 	add.w	r8, r8, #1
 801278e:	f1b8 0f03 	cmp.w	r8, #3
 8012792:	d1c8      	bne.n	8012726 <_scanf_i+0x56>
 8012794:	6862      	ldr	r2, [r4, #4]
 8012796:	b90a      	cbnz	r2, 801279c <_scanf_i+0xcc>
 8012798:	220a      	movs	r2, #10
 801279a:	6062      	str	r2, [r4, #4]
 801279c:	6862      	ldr	r2, [r4, #4]
 801279e:	4945      	ldr	r1, [pc, #276]	; (80128b4 <_scanf_i+0x1e4>)
 80127a0:	6960      	ldr	r0, [r4, #20]
 80127a2:	9301      	str	r3, [sp, #4]
 80127a4:	1a89      	subs	r1, r1, r2
 80127a6:	f000 fb33 	bl	8012e10 <__sccl>
 80127aa:	9b01      	ldr	r3, [sp, #4]
 80127ac:	f04f 0800 	mov.w	r8, #0
 80127b0:	461d      	mov	r5, r3
 80127b2:	68a3      	ldr	r3, [r4, #8]
 80127b4:	6822      	ldr	r2, [r4, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d03a      	beq.n	8012830 <_scanf_i+0x160>
 80127ba:	6831      	ldr	r1, [r6, #0]
 80127bc:	6960      	ldr	r0, [r4, #20]
 80127be:	f891 c000 	ldrb.w	ip, [r1]
 80127c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80127c6:	2800      	cmp	r0, #0
 80127c8:	d032      	beq.n	8012830 <_scanf_i+0x160>
 80127ca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80127ce:	d121      	bne.n	8012814 <_scanf_i+0x144>
 80127d0:	0510      	lsls	r0, r2, #20
 80127d2:	d51f      	bpl.n	8012814 <_scanf_i+0x144>
 80127d4:	f108 0801 	add.w	r8, r8, #1
 80127d8:	b117      	cbz	r7, 80127e0 <_scanf_i+0x110>
 80127da:	3301      	adds	r3, #1
 80127dc:	3f01      	subs	r7, #1
 80127de:	60a3      	str	r3, [r4, #8]
 80127e0:	6873      	ldr	r3, [r6, #4]
 80127e2:	3b01      	subs	r3, #1
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	6073      	str	r3, [r6, #4]
 80127e8:	dd1b      	ble.n	8012822 <_scanf_i+0x152>
 80127ea:	6833      	ldr	r3, [r6, #0]
 80127ec:	3301      	adds	r3, #1
 80127ee:	6033      	str	r3, [r6, #0]
 80127f0:	68a3      	ldr	r3, [r4, #8]
 80127f2:	3b01      	subs	r3, #1
 80127f4:	60a3      	str	r3, [r4, #8]
 80127f6:	e7dc      	b.n	80127b2 <_scanf_i+0xe2>
 80127f8:	f1b8 0f02 	cmp.w	r8, #2
 80127fc:	d1ad      	bne.n	801275a <_scanf_i+0x8a>
 80127fe:	6822      	ldr	r2, [r4, #0]
 8012800:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012804:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012808:	d1bf      	bne.n	801278a <_scanf_i+0xba>
 801280a:	2110      	movs	r1, #16
 801280c:	6061      	str	r1, [r4, #4]
 801280e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012812:	e7a1      	b.n	8012758 <_scanf_i+0x88>
 8012814:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012818:	6022      	str	r2, [r4, #0]
 801281a:	780b      	ldrb	r3, [r1, #0]
 801281c:	702b      	strb	r3, [r5, #0]
 801281e:	3501      	adds	r5, #1
 8012820:	e7de      	b.n	80127e0 <_scanf_i+0x110>
 8012822:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012826:	4631      	mov	r1, r6
 8012828:	4658      	mov	r0, fp
 801282a:	4798      	blx	r3
 801282c:	2800      	cmp	r0, #0
 801282e:	d0df      	beq.n	80127f0 <_scanf_i+0x120>
 8012830:	6823      	ldr	r3, [r4, #0]
 8012832:	05d9      	lsls	r1, r3, #23
 8012834:	d50c      	bpl.n	8012850 <_scanf_i+0x180>
 8012836:	454d      	cmp	r5, r9
 8012838:	d908      	bls.n	801284c <_scanf_i+0x17c>
 801283a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801283e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012842:	4632      	mov	r2, r6
 8012844:	4658      	mov	r0, fp
 8012846:	4798      	blx	r3
 8012848:	1e6f      	subs	r7, r5, #1
 801284a:	463d      	mov	r5, r7
 801284c:	454d      	cmp	r5, r9
 801284e:	d029      	beq.n	80128a4 <_scanf_i+0x1d4>
 8012850:	6822      	ldr	r2, [r4, #0]
 8012852:	f012 0210 	ands.w	r2, r2, #16
 8012856:	d113      	bne.n	8012880 <_scanf_i+0x1b0>
 8012858:	702a      	strb	r2, [r5, #0]
 801285a:	6863      	ldr	r3, [r4, #4]
 801285c:	9e00      	ldr	r6, [sp, #0]
 801285e:	4649      	mov	r1, r9
 8012860:	4658      	mov	r0, fp
 8012862:	47b0      	blx	r6
 8012864:	f8da 3000 	ldr.w	r3, [sl]
 8012868:	6821      	ldr	r1, [r4, #0]
 801286a:	1d1a      	adds	r2, r3, #4
 801286c:	f8ca 2000 	str.w	r2, [sl]
 8012870:	f011 0f20 	tst.w	r1, #32
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	d010      	beq.n	801289a <_scanf_i+0x1ca>
 8012878:	6018      	str	r0, [r3, #0]
 801287a:	68e3      	ldr	r3, [r4, #12]
 801287c:	3301      	adds	r3, #1
 801287e:	60e3      	str	r3, [r4, #12]
 8012880:	eba5 0509 	sub.w	r5, r5, r9
 8012884:	44a8      	add	r8, r5
 8012886:	6925      	ldr	r5, [r4, #16]
 8012888:	4445      	add	r5, r8
 801288a:	6125      	str	r5, [r4, #16]
 801288c:	2000      	movs	r0, #0
 801288e:	b007      	add	sp, #28
 8012890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012894:	f04f 0800 	mov.w	r8, #0
 8012898:	e7ca      	b.n	8012830 <_scanf_i+0x160>
 801289a:	07ca      	lsls	r2, r1, #31
 801289c:	bf4c      	ite	mi
 801289e:	8018      	strhmi	r0, [r3, #0]
 80128a0:	6018      	strpl	r0, [r3, #0]
 80128a2:	e7ea      	b.n	801287a <_scanf_i+0x1aa>
 80128a4:	2001      	movs	r0, #1
 80128a6:	e7f2      	b.n	801288e <_scanf_i+0x1be>
 80128a8:	08016238 	.word	0x08016238
 80128ac:	08013df1 	.word	0x08013df1
 80128b0:	08013f09 	.word	0x08013f09
 80128b4:	0801682c 	.word	0x0801682c

080128b8 <iprintf>:
 80128b8:	b40f      	push	{r0, r1, r2, r3}
 80128ba:	4b0a      	ldr	r3, [pc, #40]	; (80128e4 <iprintf+0x2c>)
 80128bc:	b513      	push	{r0, r1, r4, lr}
 80128be:	681c      	ldr	r4, [r3, #0]
 80128c0:	b124      	cbz	r4, 80128cc <iprintf+0x14>
 80128c2:	69a3      	ldr	r3, [r4, #24]
 80128c4:	b913      	cbnz	r3, 80128cc <iprintf+0x14>
 80128c6:	4620      	mov	r0, r4
 80128c8:	f7fe fbbe 	bl	8011048 <__sinit>
 80128cc:	ab05      	add	r3, sp, #20
 80128ce:	9a04      	ldr	r2, [sp, #16]
 80128d0:	68a1      	ldr	r1, [r4, #8]
 80128d2:	9301      	str	r3, [sp, #4]
 80128d4:	4620      	mov	r0, r4
 80128d6:	f7fe fdcb 	bl	8011470 <_vfiprintf_r>
 80128da:	b002      	add	sp, #8
 80128dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128e0:	b004      	add	sp, #16
 80128e2:	4770      	bx	lr
 80128e4:	20000038 	.word	0x20000038

080128e8 <putchar>:
 80128e8:	b538      	push	{r3, r4, r5, lr}
 80128ea:	4b08      	ldr	r3, [pc, #32]	; (801290c <putchar+0x24>)
 80128ec:	681c      	ldr	r4, [r3, #0]
 80128ee:	4605      	mov	r5, r0
 80128f0:	b124      	cbz	r4, 80128fc <putchar+0x14>
 80128f2:	69a3      	ldr	r3, [r4, #24]
 80128f4:	b913      	cbnz	r3, 80128fc <putchar+0x14>
 80128f6:	4620      	mov	r0, r4
 80128f8:	f7fe fba6 	bl	8011048 <__sinit>
 80128fc:	68a2      	ldr	r2, [r4, #8]
 80128fe:	4629      	mov	r1, r5
 8012900:	4620      	mov	r0, r4
 8012902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012906:	f003 bc19 	b.w	801613c <_putc_r>
 801290a:	bf00      	nop
 801290c:	20000038 	.word	0x20000038

08012910 <_puts_r>:
 8012910:	b570      	push	{r4, r5, r6, lr}
 8012912:	460e      	mov	r6, r1
 8012914:	4605      	mov	r5, r0
 8012916:	b118      	cbz	r0, 8012920 <_puts_r+0x10>
 8012918:	6983      	ldr	r3, [r0, #24]
 801291a:	b90b      	cbnz	r3, 8012920 <_puts_r+0x10>
 801291c:	f7fe fb94 	bl	8011048 <__sinit>
 8012920:	69ab      	ldr	r3, [r5, #24]
 8012922:	68ac      	ldr	r4, [r5, #8]
 8012924:	b913      	cbnz	r3, 801292c <_puts_r+0x1c>
 8012926:	4628      	mov	r0, r5
 8012928:	f7fe fb8e 	bl	8011048 <__sinit>
 801292c:	4b23      	ldr	r3, [pc, #140]	; (80129bc <_puts_r+0xac>)
 801292e:	429c      	cmp	r4, r3
 8012930:	d117      	bne.n	8012962 <_puts_r+0x52>
 8012932:	686c      	ldr	r4, [r5, #4]
 8012934:	89a3      	ldrh	r3, [r4, #12]
 8012936:	071b      	lsls	r3, r3, #28
 8012938:	d51d      	bpl.n	8012976 <_puts_r+0x66>
 801293a:	6923      	ldr	r3, [r4, #16]
 801293c:	b1db      	cbz	r3, 8012976 <_puts_r+0x66>
 801293e:	3e01      	subs	r6, #1
 8012940:	68a3      	ldr	r3, [r4, #8]
 8012942:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012946:	3b01      	subs	r3, #1
 8012948:	60a3      	str	r3, [r4, #8]
 801294a:	b9e9      	cbnz	r1, 8012988 <_puts_r+0x78>
 801294c:	2b00      	cmp	r3, #0
 801294e:	da2e      	bge.n	80129ae <_puts_r+0x9e>
 8012950:	4622      	mov	r2, r4
 8012952:	210a      	movs	r1, #10
 8012954:	4628      	mov	r0, r5
 8012956:	f001 fb95 	bl	8014084 <__swbuf_r>
 801295a:	3001      	adds	r0, #1
 801295c:	d011      	beq.n	8012982 <_puts_r+0x72>
 801295e:	200a      	movs	r0, #10
 8012960:	e011      	b.n	8012986 <_puts_r+0x76>
 8012962:	4b17      	ldr	r3, [pc, #92]	; (80129c0 <_puts_r+0xb0>)
 8012964:	429c      	cmp	r4, r3
 8012966:	d101      	bne.n	801296c <_puts_r+0x5c>
 8012968:	68ac      	ldr	r4, [r5, #8]
 801296a:	e7e3      	b.n	8012934 <_puts_r+0x24>
 801296c:	4b15      	ldr	r3, [pc, #84]	; (80129c4 <_puts_r+0xb4>)
 801296e:	429c      	cmp	r4, r3
 8012970:	bf08      	it	eq
 8012972:	68ec      	ldreq	r4, [r5, #12]
 8012974:	e7de      	b.n	8012934 <_puts_r+0x24>
 8012976:	4621      	mov	r1, r4
 8012978:	4628      	mov	r0, r5
 801297a:	f001 fbe7 	bl	801414c <__swsetup_r>
 801297e:	2800      	cmp	r0, #0
 8012980:	d0dd      	beq.n	801293e <_puts_r+0x2e>
 8012982:	f04f 30ff 	mov.w	r0, #4294967295
 8012986:	bd70      	pop	{r4, r5, r6, pc}
 8012988:	2b00      	cmp	r3, #0
 801298a:	da04      	bge.n	8012996 <_puts_r+0x86>
 801298c:	69a2      	ldr	r2, [r4, #24]
 801298e:	429a      	cmp	r2, r3
 8012990:	dc06      	bgt.n	80129a0 <_puts_r+0x90>
 8012992:	290a      	cmp	r1, #10
 8012994:	d004      	beq.n	80129a0 <_puts_r+0x90>
 8012996:	6823      	ldr	r3, [r4, #0]
 8012998:	1c5a      	adds	r2, r3, #1
 801299a:	6022      	str	r2, [r4, #0]
 801299c:	7019      	strb	r1, [r3, #0]
 801299e:	e7cf      	b.n	8012940 <_puts_r+0x30>
 80129a0:	4622      	mov	r2, r4
 80129a2:	4628      	mov	r0, r5
 80129a4:	f001 fb6e 	bl	8014084 <__swbuf_r>
 80129a8:	3001      	adds	r0, #1
 80129aa:	d1c9      	bne.n	8012940 <_puts_r+0x30>
 80129ac:	e7e9      	b.n	8012982 <_puts_r+0x72>
 80129ae:	6823      	ldr	r3, [r4, #0]
 80129b0:	200a      	movs	r0, #10
 80129b2:	1c5a      	adds	r2, r3, #1
 80129b4:	6022      	str	r2, [r4, #0]
 80129b6:	7018      	strb	r0, [r3, #0]
 80129b8:	e7e5      	b.n	8012986 <_puts_r+0x76>
 80129ba:	bf00      	nop
 80129bc:	08016790 	.word	0x08016790
 80129c0:	080167b0 	.word	0x080167b0
 80129c4:	08016770 	.word	0x08016770

080129c8 <puts>:
 80129c8:	4b02      	ldr	r3, [pc, #8]	; (80129d4 <puts+0xc>)
 80129ca:	4601      	mov	r1, r0
 80129cc:	6818      	ldr	r0, [r3, #0]
 80129ce:	f7ff bf9f 	b.w	8012910 <_puts_r>
 80129d2:	bf00      	nop
 80129d4:	20000038 	.word	0x20000038

080129d8 <swapfunc>:
 80129d8:	2b02      	cmp	r3, #2
 80129da:	b510      	push	{r4, lr}
 80129dc:	d00a      	beq.n	80129f4 <swapfunc+0x1c>
 80129de:	0892      	lsrs	r2, r2, #2
 80129e0:	3a01      	subs	r2, #1
 80129e2:	6803      	ldr	r3, [r0, #0]
 80129e4:	680c      	ldr	r4, [r1, #0]
 80129e6:	f840 4b04 	str.w	r4, [r0], #4
 80129ea:	2a00      	cmp	r2, #0
 80129ec:	f841 3b04 	str.w	r3, [r1], #4
 80129f0:	dcf6      	bgt.n	80129e0 <swapfunc+0x8>
 80129f2:	bd10      	pop	{r4, pc}
 80129f4:	4402      	add	r2, r0
 80129f6:	780c      	ldrb	r4, [r1, #0]
 80129f8:	7803      	ldrb	r3, [r0, #0]
 80129fa:	f800 4b01 	strb.w	r4, [r0], #1
 80129fe:	f801 3b01 	strb.w	r3, [r1], #1
 8012a02:	1a13      	subs	r3, r2, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	dcf6      	bgt.n	80129f6 <swapfunc+0x1e>
 8012a08:	e7f3      	b.n	80129f2 <swapfunc+0x1a>

08012a0a <med3.isra.1>:
 8012a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a0c:	460c      	mov	r4, r1
 8012a0e:	4615      	mov	r5, r2
 8012a10:	4607      	mov	r7, r0
 8012a12:	461e      	mov	r6, r3
 8012a14:	4798      	blx	r3
 8012a16:	2800      	cmp	r0, #0
 8012a18:	4629      	mov	r1, r5
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	da0a      	bge.n	8012a34 <med3.isra.1+0x2a>
 8012a1e:	47b0      	blx	r6
 8012a20:	2800      	cmp	r0, #0
 8012a22:	db05      	blt.n	8012a30 <med3.isra.1+0x26>
 8012a24:	4629      	mov	r1, r5
 8012a26:	4638      	mov	r0, r7
 8012a28:	47b0      	blx	r6
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	db0a      	blt.n	8012a44 <med3.isra.1+0x3a>
 8012a2e:	463c      	mov	r4, r7
 8012a30:	4620      	mov	r0, r4
 8012a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a34:	47b0      	blx	r6
 8012a36:	2800      	cmp	r0, #0
 8012a38:	dcfa      	bgt.n	8012a30 <med3.isra.1+0x26>
 8012a3a:	4629      	mov	r1, r5
 8012a3c:	4638      	mov	r0, r7
 8012a3e:	47b0      	blx	r6
 8012a40:	2800      	cmp	r0, #0
 8012a42:	dbf4      	blt.n	8012a2e <med3.isra.1+0x24>
 8012a44:	462c      	mov	r4, r5
 8012a46:	e7f3      	b.n	8012a30 <med3.isra.1+0x26>

08012a48 <qsort>:
 8012a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a4c:	b085      	sub	sp, #20
 8012a4e:	4606      	mov	r6, r0
 8012a50:	468a      	mov	sl, r1
 8012a52:	4614      	mov	r4, r2
 8012a54:	9300      	str	r3, [sp, #0]
 8012a56:	07b2      	lsls	r2, r6, #30
 8012a58:	d110      	bne.n	8012a7c <qsort+0x34>
 8012a5a:	07a3      	lsls	r3, r4, #30
 8012a5c:	d10e      	bne.n	8012a7c <qsort+0x34>
 8012a5e:	1f27      	subs	r7, r4, #4
 8012a60:	bf18      	it	ne
 8012a62:	2701      	movne	r7, #1
 8012a64:	f1ba 0f06 	cmp.w	sl, #6
 8012a68:	eb06 0b04 	add.w	fp, r6, r4
 8012a6c:	d828      	bhi.n	8012ac0 <qsort+0x78>
 8012a6e:	fb04 6a0a 	mla	sl, r4, sl, r6
 8012a72:	45da      	cmp	sl, fp
 8012a74:	d80b      	bhi.n	8012a8e <qsort+0x46>
 8012a76:	b005      	add	sp, #20
 8012a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a7c:	2702      	movs	r7, #2
 8012a7e:	e7f1      	b.n	8012a64 <qsort+0x1c>
 8012a80:	463b      	mov	r3, r7
 8012a82:	4622      	mov	r2, r4
 8012a84:	4649      	mov	r1, r9
 8012a86:	4640      	mov	r0, r8
 8012a88:	f7ff ffa6 	bl	80129d8 <swapfunc>
 8012a8c:	e013      	b.n	8012ab6 <qsort+0x6e>
 8012a8e:	46d8      	mov	r8, fp
 8012a90:	e012      	b.n	8012ab8 <qsort+0x70>
 8012a92:	eba8 0904 	sub.w	r9, r8, r4
 8012a96:	4641      	mov	r1, r8
 8012a98:	4648      	mov	r0, r9
 8012a9a:	9b00      	ldr	r3, [sp, #0]
 8012a9c:	4798      	blx	r3
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	dd0c      	ble.n	8012abc <qsort+0x74>
 8012aa2:	2f00      	cmp	r7, #0
 8012aa4:	d1ec      	bne.n	8012a80 <qsort+0x38>
 8012aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8012aaa:	f8d9 2000 	ldr.w	r2, [r9]
 8012aae:	f8c8 2000 	str.w	r2, [r8]
 8012ab2:	f8c9 3000 	str.w	r3, [r9]
 8012ab6:	46c8      	mov	r8, r9
 8012ab8:	4546      	cmp	r6, r8
 8012aba:	d3ea      	bcc.n	8012a92 <qsort+0x4a>
 8012abc:	44a3      	add	fp, r4
 8012abe:	e7d8      	b.n	8012a72 <qsort+0x2a>
 8012ac0:	ea4f 085a 	mov.w	r8, sl, lsr #1
 8012ac4:	f10a 35ff 	add.w	r5, sl, #4294967295
 8012ac8:	f1ba 0f07 	cmp.w	sl, #7
 8012acc:	fb04 6808 	mla	r8, r4, r8, r6
 8012ad0:	fb04 6505 	mla	r5, r4, r5, r6
 8012ad4:	d027      	beq.n	8012b26 <qsort+0xde>
 8012ad6:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
 8012ada:	d94a      	bls.n	8012b72 <qsort+0x12a>
 8012adc:	ea4f 09da 	mov.w	r9, sl, lsr #3
 8012ae0:	fb04 f909 	mul.w	r9, r4, r9
 8012ae4:	eb06 0109 	add.w	r1, r6, r9
 8012ae8:	eb01 0209 	add.w	r2, r1, r9
 8012aec:	9b00      	ldr	r3, [sp, #0]
 8012aee:	4630      	mov	r0, r6
 8012af0:	f7ff ff8b 	bl	8012a0a <med3.isra.1>
 8012af4:	eb08 0209 	add.w	r2, r8, r9
 8012af8:	4641      	mov	r1, r8
 8012afa:	9001      	str	r0, [sp, #4]
 8012afc:	9b00      	ldr	r3, [sp, #0]
 8012afe:	eba8 0009 	sub.w	r0, r8, r9
 8012b02:	f7ff ff82 	bl	8012a0a <med3.isra.1>
 8012b06:	4680      	mov	r8, r0
 8012b08:	eba5 0049 	sub.w	r0, r5, r9, lsl #1
 8012b0c:	462a      	mov	r2, r5
 8012b0e:	9b00      	ldr	r3, [sp, #0]
 8012b10:	eb00 0109 	add.w	r1, r0, r9
 8012b14:	f7ff ff79 	bl	8012a0a <med3.isra.1>
 8012b18:	4602      	mov	r2, r0
 8012b1a:	4641      	mov	r1, r8
 8012b1c:	9b00      	ldr	r3, [sp, #0]
 8012b1e:	9801      	ldr	r0, [sp, #4]
 8012b20:	f7ff ff73 	bl	8012a0a <med3.isra.1>
 8012b24:	4680      	mov	r8, r0
 8012b26:	bb3f      	cbnz	r7, 8012b78 <qsort+0x130>
 8012b28:	6833      	ldr	r3, [r6, #0]
 8012b2a:	f8d8 2000 	ldr.w	r2, [r8]
 8012b2e:	6032      	str	r2, [r6, #0]
 8012b30:	f8c8 3000 	str.w	r3, [r8]
 8012b34:	46d8      	mov	r8, fp
 8012b36:	46a9      	mov	r9, r5
 8012b38:	f8cd b004 	str.w	fp, [sp, #4]
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	45a8      	cmp	r8, r5
 8012b40:	d857      	bhi.n	8012bf2 <qsort+0x1aa>
 8012b42:	9302      	str	r3, [sp, #8]
 8012b44:	4631      	mov	r1, r6
 8012b46:	9b00      	ldr	r3, [sp, #0]
 8012b48:	4640      	mov	r0, r8
 8012b4a:	4798      	blx	r3
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	9b02      	ldr	r3, [sp, #8]
 8012b50:	dc2e      	bgt.n	8012bb0 <qsort+0x168>
 8012b52:	d10c      	bne.n	8012b6e <qsort+0x126>
 8012b54:	b9bf      	cbnz	r7, 8012b86 <qsort+0x13e>
 8012b56:	9b01      	ldr	r3, [sp, #4]
 8012b58:	9901      	ldr	r1, [sp, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	f8d8 2000 	ldr.w	r2, [r8]
 8012b60:	600a      	str	r2, [r1, #0]
 8012b62:	f8c8 3000 	str.w	r3, [r8]
 8012b66:	9b01      	ldr	r3, [sp, #4]
 8012b68:	4423      	add	r3, r4
 8012b6a:	9301      	str	r3, [sp, #4]
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	44a0      	add	r8, r4
 8012b70:	e7e5      	b.n	8012b3e <qsort+0xf6>
 8012b72:	462a      	mov	r2, r5
 8012b74:	9601      	str	r6, [sp, #4]
 8012b76:	e7d0      	b.n	8012b1a <qsort+0xd2>
 8012b78:	463b      	mov	r3, r7
 8012b7a:	4622      	mov	r2, r4
 8012b7c:	4641      	mov	r1, r8
 8012b7e:	4630      	mov	r0, r6
 8012b80:	f7ff ff2a 	bl	80129d8 <swapfunc>
 8012b84:	e7d6      	b.n	8012b34 <qsort+0xec>
 8012b86:	463b      	mov	r3, r7
 8012b88:	4622      	mov	r2, r4
 8012b8a:	4641      	mov	r1, r8
 8012b8c:	9801      	ldr	r0, [sp, #4]
 8012b8e:	f7ff ff23 	bl	80129d8 <swapfunc>
 8012b92:	e7e8      	b.n	8012b66 <qsort+0x11e>
 8012b94:	d109      	bne.n	8012baa <qsort+0x162>
 8012b96:	b9f7      	cbnz	r7, 8012bd6 <qsort+0x18e>
 8012b98:	682b      	ldr	r3, [r5, #0]
 8012b9a:	f8d9 2000 	ldr.w	r2, [r9]
 8012b9e:	602a      	str	r2, [r5, #0]
 8012ba0:	f8c9 3000 	str.w	r3, [r9]
 8012ba4:	eba9 0904 	sub.w	r9, r9, r4
 8012ba8:	2301      	movs	r3, #1
 8012baa:	9d02      	ldr	r5, [sp, #8]
 8012bac:	45a8      	cmp	r8, r5
 8012bae:	d820      	bhi.n	8012bf2 <qsort+0x1aa>
 8012bb0:	9303      	str	r3, [sp, #12]
 8012bb2:	4631      	mov	r1, r6
 8012bb4:	9b00      	ldr	r3, [sp, #0]
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	4798      	blx	r3
 8012bba:	1b2b      	subs	r3, r5, r4
 8012bbc:	2800      	cmp	r0, #0
 8012bbe:	9302      	str	r3, [sp, #8]
 8012bc0:	9b03      	ldr	r3, [sp, #12]
 8012bc2:	dae7      	bge.n	8012b94 <qsort+0x14c>
 8012bc4:	b977      	cbnz	r7, 8012be4 <qsort+0x19c>
 8012bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8012bca:	682a      	ldr	r2, [r5, #0]
 8012bcc:	f8c8 2000 	str.w	r2, [r8]
 8012bd0:	602b      	str	r3, [r5, #0]
 8012bd2:	9d02      	ldr	r5, [sp, #8]
 8012bd4:	e7ca      	b.n	8012b6c <qsort+0x124>
 8012bd6:	463b      	mov	r3, r7
 8012bd8:	4622      	mov	r2, r4
 8012bda:	4649      	mov	r1, r9
 8012bdc:	4628      	mov	r0, r5
 8012bde:	f7ff fefb 	bl	80129d8 <swapfunc>
 8012be2:	e7df      	b.n	8012ba4 <qsort+0x15c>
 8012be4:	463b      	mov	r3, r7
 8012be6:	4622      	mov	r2, r4
 8012be8:	4629      	mov	r1, r5
 8012bea:	4640      	mov	r0, r8
 8012bec:	f7ff fef4 	bl	80129d8 <swapfunc>
 8012bf0:	e7ef      	b.n	8012bd2 <qsort+0x18a>
 8012bf2:	fb04 6a0a 	mla	sl, r4, sl, r6
 8012bf6:	bb03      	cbnz	r3, 8012c3a <qsort+0x1f2>
 8012bf8:	45d3      	cmp	fp, sl
 8012bfa:	f4bf af3c 	bcs.w	8012a76 <qsort+0x2e>
 8012bfe:	465d      	mov	r5, fp
 8012c00:	e017      	b.n	8012c32 <qsort+0x1ea>
 8012c02:	463b      	mov	r3, r7
 8012c04:	4622      	mov	r2, r4
 8012c06:	4641      	mov	r1, r8
 8012c08:	4628      	mov	r0, r5
 8012c0a:	f7ff fee5 	bl	80129d8 <swapfunc>
 8012c0e:	e00f      	b.n	8012c30 <qsort+0x1e8>
 8012c10:	eba5 0804 	sub.w	r8, r5, r4
 8012c14:	4629      	mov	r1, r5
 8012c16:	4640      	mov	r0, r8
 8012c18:	9b00      	ldr	r3, [sp, #0]
 8012c1a:	4798      	blx	r3
 8012c1c:	2800      	cmp	r0, #0
 8012c1e:	dd0a      	ble.n	8012c36 <qsort+0x1ee>
 8012c20:	2f00      	cmp	r7, #0
 8012c22:	d1ee      	bne.n	8012c02 <qsort+0x1ba>
 8012c24:	682b      	ldr	r3, [r5, #0]
 8012c26:	f8d8 2000 	ldr.w	r2, [r8]
 8012c2a:	602a      	str	r2, [r5, #0]
 8012c2c:	f8c8 3000 	str.w	r3, [r8]
 8012c30:	4645      	mov	r5, r8
 8012c32:	42ae      	cmp	r6, r5
 8012c34:	d3ec      	bcc.n	8012c10 <qsort+0x1c8>
 8012c36:	44a3      	add	fp, r4
 8012c38:	e7de      	b.n	8012bf8 <qsort+0x1b0>
 8012c3a:	9b01      	ldr	r3, [sp, #4]
 8012c3c:	eba8 0b03 	sub.w	fp, r8, r3
 8012c40:	1b9a      	subs	r2, r3, r6
 8012c42:	455a      	cmp	r2, fp
 8012c44:	bfa8      	it	ge
 8012c46:	465a      	movge	r2, fp
 8012c48:	b12a      	cbz	r2, 8012c56 <qsort+0x20e>
 8012c4a:	463b      	mov	r3, r7
 8012c4c:	eba8 0102 	sub.w	r1, r8, r2
 8012c50:	4630      	mov	r0, r6
 8012c52:	f7ff fec1 	bl	80129d8 <swapfunc>
 8012c56:	ebaa 0209 	sub.w	r2, sl, r9
 8012c5a:	eba9 0505 	sub.w	r5, r9, r5
 8012c5e:	1b12      	subs	r2, r2, r4
 8012c60:	42aa      	cmp	r2, r5
 8012c62:	bf28      	it	cs
 8012c64:	462a      	movcs	r2, r5
 8012c66:	b12a      	cbz	r2, 8012c74 <qsort+0x22c>
 8012c68:	463b      	mov	r3, r7
 8012c6a:	ebaa 0102 	sub.w	r1, sl, r2
 8012c6e:	4640      	mov	r0, r8
 8012c70:	f7ff feb2 	bl	80129d8 <swapfunc>
 8012c74:	455c      	cmp	r4, fp
 8012c76:	d206      	bcs.n	8012c86 <qsort+0x23e>
 8012c78:	fbbb f1f4 	udiv	r1, fp, r4
 8012c7c:	9b00      	ldr	r3, [sp, #0]
 8012c7e:	4622      	mov	r2, r4
 8012c80:	4630      	mov	r0, r6
 8012c82:	f7ff fee1 	bl	8012a48 <qsort>
 8012c86:	42a5      	cmp	r5, r4
 8012c88:	f67f aef5 	bls.w	8012a76 <qsort+0x2e>
 8012c8c:	ebaa 0605 	sub.w	r6, sl, r5
 8012c90:	fbb5 faf4 	udiv	sl, r5, r4
 8012c94:	e6df      	b.n	8012a56 <qsort+0xe>

08012c96 <lflush>:
 8012c96:	8983      	ldrh	r3, [r0, #12]
 8012c98:	f003 0309 	and.w	r3, r3, #9
 8012c9c:	2b09      	cmp	r3, #9
 8012c9e:	d101      	bne.n	8012ca4 <lflush+0xe>
 8012ca0:	f7fe b980 	b.w	8010fa4 <fflush>
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	4770      	bx	lr

08012ca8 <__srefill_r>:
 8012ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012caa:	460c      	mov	r4, r1
 8012cac:	4605      	mov	r5, r0
 8012cae:	b118      	cbz	r0, 8012cb8 <__srefill_r+0x10>
 8012cb0:	6983      	ldr	r3, [r0, #24]
 8012cb2:	b90b      	cbnz	r3, 8012cb8 <__srefill_r+0x10>
 8012cb4:	f7fe f9c8 	bl	8011048 <__sinit>
 8012cb8:	4b3c      	ldr	r3, [pc, #240]	; (8012dac <__srefill_r+0x104>)
 8012cba:	429c      	cmp	r4, r3
 8012cbc:	d10a      	bne.n	8012cd4 <__srefill_r+0x2c>
 8012cbe:	686c      	ldr	r4, [r5, #4]
 8012cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	6063      	str	r3, [r4, #4]
 8012cc8:	b293      	uxth	r3, r2
 8012cca:	069e      	lsls	r6, r3, #26
 8012ccc:	d50c      	bpl.n	8012ce8 <__srefill_r+0x40>
 8012cce:	f04f 30ff 	mov.w	r0, #4294967295
 8012cd2:	e067      	b.n	8012da4 <__srefill_r+0xfc>
 8012cd4:	4b36      	ldr	r3, [pc, #216]	; (8012db0 <__srefill_r+0x108>)
 8012cd6:	429c      	cmp	r4, r3
 8012cd8:	d101      	bne.n	8012cde <__srefill_r+0x36>
 8012cda:	68ac      	ldr	r4, [r5, #8]
 8012cdc:	e7f0      	b.n	8012cc0 <__srefill_r+0x18>
 8012cde:	4b35      	ldr	r3, [pc, #212]	; (8012db4 <__srefill_r+0x10c>)
 8012ce0:	429c      	cmp	r4, r3
 8012ce2:	bf08      	it	eq
 8012ce4:	68ec      	ldreq	r4, [r5, #12]
 8012ce6:	e7eb      	b.n	8012cc0 <__srefill_r+0x18>
 8012ce8:	0758      	lsls	r0, r3, #29
 8012cea:	d449      	bmi.n	8012d80 <__srefill_r+0xd8>
 8012cec:	06d9      	lsls	r1, r3, #27
 8012cee:	d405      	bmi.n	8012cfc <__srefill_r+0x54>
 8012cf0:	2309      	movs	r3, #9
 8012cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012cf6:	602b      	str	r3, [r5, #0]
 8012cf8:	81a2      	strh	r2, [r4, #12]
 8012cfa:	e7e8      	b.n	8012cce <__srefill_r+0x26>
 8012cfc:	071a      	lsls	r2, r3, #28
 8012cfe:	d50b      	bpl.n	8012d18 <__srefill_r+0x70>
 8012d00:	4621      	mov	r1, r4
 8012d02:	4628      	mov	r0, r5
 8012d04:	f7fe f924 	bl	8010f50 <_fflush_r>
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	d1e0      	bne.n	8012cce <__srefill_r+0x26>
 8012d0c:	89a3      	ldrh	r3, [r4, #12]
 8012d0e:	60a0      	str	r0, [r4, #8]
 8012d10:	f023 0308 	bic.w	r3, r3, #8
 8012d14:	81a3      	strh	r3, [r4, #12]
 8012d16:	61a0      	str	r0, [r4, #24]
 8012d18:	89a3      	ldrh	r3, [r4, #12]
 8012d1a:	f043 0304 	orr.w	r3, r3, #4
 8012d1e:	81a3      	strh	r3, [r4, #12]
 8012d20:	6923      	ldr	r3, [r4, #16]
 8012d22:	b91b      	cbnz	r3, 8012d2c <__srefill_r+0x84>
 8012d24:	4621      	mov	r1, r4
 8012d26:	4628      	mov	r0, r5
 8012d28:	f7fe fa7c 	bl	8011224 <__smakebuf_r>
 8012d2c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8012d30:	b2be      	uxth	r6, r7
 8012d32:	07b3      	lsls	r3, r6, #30
 8012d34:	d00f      	beq.n	8012d56 <__srefill_r+0xae>
 8012d36:	2301      	movs	r3, #1
 8012d38:	81a3      	strh	r3, [r4, #12]
 8012d3a:	4b1f      	ldr	r3, [pc, #124]	; (8012db8 <__srefill_r+0x110>)
 8012d3c:	491f      	ldr	r1, [pc, #124]	; (8012dbc <__srefill_r+0x114>)
 8012d3e:	6818      	ldr	r0, [r3, #0]
 8012d40:	f006 0609 	and.w	r6, r6, #9
 8012d44:	f7fe f9ec 	bl	8011120 <_fwalk>
 8012d48:	2e09      	cmp	r6, #9
 8012d4a:	81a7      	strh	r7, [r4, #12]
 8012d4c:	d103      	bne.n	8012d56 <__srefill_r+0xae>
 8012d4e:	4621      	mov	r1, r4
 8012d50:	4628      	mov	r0, r5
 8012d52:	f7fe f877 	bl	8010e44 <__sflush_r>
 8012d56:	6922      	ldr	r2, [r4, #16]
 8012d58:	6022      	str	r2, [r4, #0]
 8012d5a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d5c:	6963      	ldr	r3, [r4, #20]
 8012d5e:	6a21      	ldr	r1, [r4, #32]
 8012d60:	4628      	mov	r0, r5
 8012d62:	47b0      	blx	r6
 8012d64:	2800      	cmp	r0, #0
 8012d66:	6060      	str	r0, [r4, #4]
 8012d68:	dc1d      	bgt.n	8012da6 <__srefill_r+0xfe>
 8012d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d6e:	bf17      	itett	ne
 8012d70:	2200      	movne	r2, #0
 8012d72:	f043 0320 	orreq.w	r3, r3, #32
 8012d76:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8012d7a:	6062      	strne	r2, [r4, #4]
 8012d7c:	81a3      	strh	r3, [r4, #12]
 8012d7e:	e7a6      	b.n	8012cce <__srefill_r+0x26>
 8012d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d82:	2900      	cmp	r1, #0
 8012d84:	d0cc      	beq.n	8012d20 <__srefill_r+0x78>
 8012d86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d8a:	4299      	cmp	r1, r3
 8012d8c:	d002      	beq.n	8012d94 <__srefill_r+0xec>
 8012d8e:	4628      	mov	r0, r5
 8012d90:	f7fe fa9c 	bl	80112cc <_free_r>
 8012d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d96:	6063      	str	r3, [r4, #4]
 8012d98:	2000      	movs	r0, #0
 8012d9a:	6360      	str	r0, [r4, #52]	; 0x34
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d0bf      	beq.n	8012d20 <__srefill_r+0x78>
 8012da0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012da2:	6023      	str	r3, [r4, #0]
 8012da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012da6:	2000      	movs	r0, #0
 8012da8:	e7fc      	b.n	8012da4 <__srefill_r+0xfc>
 8012daa:	bf00      	nop
 8012dac:	08016790 	.word	0x08016790
 8012db0:	080167b0 	.word	0x080167b0
 8012db4:	08016770 	.word	0x08016770
 8012db8:	080167d0 	.word	0x080167d0
 8012dbc:	08012c97 	.word	0x08012c97

08012dc0 <_sbrk_r>:
 8012dc0:	b538      	push	{r3, r4, r5, lr}
 8012dc2:	4c06      	ldr	r4, [pc, #24]	; (8012ddc <_sbrk_r+0x1c>)
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	4605      	mov	r5, r0
 8012dc8:	4608      	mov	r0, r1
 8012dca:	6023      	str	r3, [r4, #0]
 8012dcc:	f7fa f9d2 	bl	800d174 <_sbrk>
 8012dd0:	1c43      	adds	r3, r0, #1
 8012dd2:	d102      	bne.n	8012dda <_sbrk_r+0x1a>
 8012dd4:	6823      	ldr	r3, [r4, #0]
 8012dd6:	b103      	cbz	r3, 8012dda <_sbrk_r+0x1a>
 8012dd8:	602b      	str	r3, [r5, #0]
 8012dda:	bd38      	pop	{r3, r4, r5, pc}
 8012ddc:	2000a74c 	.word	0x2000a74c

08012de0 <iscanf>:
 8012de0:	b40f      	push	{r0, r1, r2, r3}
 8012de2:	4b0a      	ldr	r3, [pc, #40]	; (8012e0c <iscanf+0x2c>)
 8012de4:	b513      	push	{r0, r1, r4, lr}
 8012de6:	681c      	ldr	r4, [r3, #0]
 8012de8:	b124      	cbz	r4, 8012df4 <iscanf+0x14>
 8012dea:	69a3      	ldr	r3, [r4, #24]
 8012dec:	b913      	cbnz	r3, 8012df4 <iscanf+0x14>
 8012dee:	4620      	mov	r0, r4
 8012df0:	f7fe f92a 	bl	8011048 <__sinit>
 8012df4:	ab05      	add	r3, sp, #20
 8012df6:	9a04      	ldr	r2, [sp, #16]
 8012df8:	6861      	ldr	r1, [r4, #4]
 8012dfa:	9301      	str	r3, [sp, #4]
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	f7ff f9f9 	bl	80121f4 <_vfiscanf_r>
 8012e02:	b002      	add	sp, #8
 8012e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e08:	b004      	add	sp, #16
 8012e0a:	4770      	bx	lr
 8012e0c:	20000038 	.word	0x20000038

08012e10 <__sccl>:
 8012e10:	b570      	push	{r4, r5, r6, lr}
 8012e12:	780b      	ldrb	r3, [r1, #0]
 8012e14:	2b5e      	cmp	r3, #94	; 0x5e
 8012e16:	bf13      	iteet	ne
 8012e18:	1c4a      	addne	r2, r1, #1
 8012e1a:	1c8a      	addeq	r2, r1, #2
 8012e1c:	784b      	ldrbeq	r3, [r1, #1]
 8012e1e:	2100      	movne	r1, #0
 8012e20:	bf08      	it	eq
 8012e22:	2101      	moveq	r1, #1
 8012e24:	1e44      	subs	r4, r0, #1
 8012e26:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8012e2a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8012e2e:	42ac      	cmp	r4, r5
 8012e30:	d1fb      	bne.n	8012e2a <__sccl+0x1a>
 8012e32:	b913      	cbnz	r3, 8012e3a <__sccl+0x2a>
 8012e34:	3a01      	subs	r2, #1
 8012e36:	4610      	mov	r0, r2
 8012e38:	bd70      	pop	{r4, r5, r6, pc}
 8012e3a:	f081 0401 	eor.w	r4, r1, #1
 8012e3e:	54c4      	strb	r4, [r0, r3]
 8012e40:	1c51      	adds	r1, r2, #1
 8012e42:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8012e46:	2d2d      	cmp	r5, #45	; 0x2d
 8012e48:	f101 36ff 	add.w	r6, r1, #4294967295
 8012e4c:	460a      	mov	r2, r1
 8012e4e:	d006      	beq.n	8012e5e <__sccl+0x4e>
 8012e50:	2d5d      	cmp	r5, #93	; 0x5d
 8012e52:	d0f0      	beq.n	8012e36 <__sccl+0x26>
 8012e54:	b90d      	cbnz	r5, 8012e5a <__sccl+0x4a>
 8012e56:	4632      	mov	r2, r6
 8012e58:	e7ed      	b.n	8012e36 <__sccl+0x26>
 8012e5a:	462b      	mov	r3, r5
 8012e5c:	e7ef      	b.n	8012e3e <__sccl+0x2e>
 8012e5e:	780e      	ldrb	r6, [r1, #0]
 8012e60:	2e5d      	cmp	r6, #93	; 0x5d
 8012e62:	d0fa      	beq.n	8012e5a <__sccl+0x4a>
 8012e64:	42b3      	cmp	r3, r6
 8012e66:	dcf8      	bgt.n	8012e5a <__sccl+0x4a>
 8012e68:	3301      	adds	r3, #1
 8012e6a:	429e      	cmp	r6, r3
 8012e6c:	54c4      	strb	r4, [r0, r3]
 8012e6e:	dcfb      	bgt.n	8012e68 <__sccl+0x58>
 8012e70:	3102      	adds	r1, #2
 8012e72:	e7e6      	b.n	8012e42 <__sccl+0x32>

08012e74 <setbuf>:
 8012e74:	2900      	cmp	r1, #0
 8012e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e7a:	bf0c      	ite	eq
 8012e7c:	2202      	moveq	r2, #2
 8012e7e:	2200      	movne	r2, #0
 8012e80:	f000 b800 	b.w	8012e84 <setvbuf>

08012e84 <setvbuf>:
 8012e84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e88:	461d      	mov	r5, r3
 8012e8a:	4b51      	ldr	r3, [pc, #324]	; (8012fd0 <setvbuf+0x14c>)
 8012e8c:	681e      	ldr	r6, [r3, #0]
 8012e8e:	4604      	mov	r4, r0
 8012e90:	460f      	mov	r7, r1
 8012e92:	4690      	mov	r8, r2
 8012e94:	b126      	cbz	r6, 8012ea0 <setvbuf+0x1c>
 8012e96:	69b3      	ldr	r3, [r6, #24]
 8012e98:	b913      	cbnz	r3, 8012ea0 <setvbuf+0x1c>
 8012e9a:	4630      	mov	r0, r6
 8012e9c:	f7fe f8d4 	bl	8011048 <__sinit>
 8012ea0:	4b4c      	ldr	r3, [pc, #304]	; (8012fd4 <setvbuf+0x150>)
 8012ea2:	429c      	cmp	r4, r3
 8012ea4:	d152      	bne.n	8012f4c <setvbuf+0xc8>
 8012ea6:	6874      	ldr	r4, [r6, #4]
 8012ea8:	f1b8 0f02 	cmp.w	r8, #2
 8012eac:	d006      	beq.n	8012ebc <setvbuf+0x38>
 8012eae:	f1b8 0f01 	cmp.w	r8, #1
 8012eb2:	f200 8089 	bhi.w	8012fc8 <setvbuf+0x144>
 8012eb6:	2d00      	cmp	r5, #0
 8012eb8:	f2c0 8086 	blt.w	8012fc8 <setvbuf+0x144>
 8012ebc:	4621      	mov	r1, r4
 8012ebe:	4630      	mov	r0, r6
 8012ec0:	f7fe f846 	bl	8010f50 <_fflush_r>
 8012ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ec6:	b141      	cbz	r1, 8012eda <setvbuf+0x56>
 8012ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ecc:	4299      	cmp	r1, r3
 8012ece:	d002      	beq.n	8012ed6 <setvbuf+0x52>
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	f7fe f9fb 	bl	80112cc <_free_r>
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8012eda:	2300      	movs	r3, #0
 8012edc:	61a3      	str	r3, [r4, #24]
 8012ede:	6063      	str	r3, [r4, #4]
 8012ee0:	89a3      	ldrh	r3, [r4, #12]
 8012ee2:	061b      	lsls	r3, r3, #24
 8012ee4:	d503      	bpl.n	8012eee <setvbuf+0x6a>
 8012ee6:	6921      	ldr	r1, [r4, #16]
 8012ee8:	4630      	mov	r0, r6
 8012eea:	f7fe f9ef 	bl	80112cc <_free_r>
 8012eee:	89a3      	ldrh	r3, [r4, #12]
 8012ef0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8012ef4:	f023 0303 	bic.w	r3, r3, #3
 8012ef8:	f1b8 0f02 	cmp.w	r8, #2
 8012efc:	81a3      	strh	r3, [r4, #12]
 8012efe:	d05d      	beq.n	8012fbc <setvbuf+0x138>
 8012f00:	ab01      	add	r3, sp, #4
 8012f02:	466a      	mov	r2, sp
 8012f04:	4621      	mov	r1, r4
 8012f06:	4630      	mov	r0, r6
 8012f08:	f7fe f968 	bl	80111dc <__swhatbuf_r>
 8012f0c:	89a3      	ldrh	r3, [r4, #12]
 8012f0e:	4318      	orrs	r0, r3
 8012f10:	81a0      	strh	r0, [r4, #12]
 8012f12:	bb2d      	cbnz	r5, 8012f60 <setvbuf+0xdc>
 8012f14:	9d00      	ldr	r5, [sp, #0]
 8012f16:	4628      	mov	r0, r5
 8012f18:	f002 fb56 	bl	80155c8 <malloc>
 8012f1c:	4607      	mov	r7, r0
 8012f1e:	2800      	cmp	r0, #0
 8012f20:	d14e      	bne.n	8012fc0 <setvbuf+0x13c>
 8012f22:	f8dd 9000 	ldr.w	r9, [sp]
 8012f26:	45a9      	cmp	r9, r5
 8012f28:	d13c      	bne.n	8012fa4 <setvbuf+0x120>
 8012f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8012f2e:	89a3      	ldrh	r3, [r4, #12]
 8012f30:	f043 0302 	orr.w	r3, r3, #2
 8012f34:	81a3      	strh	r3, [r4, #12]
 8012f36:	2300      	movs	r3, #0
 8012f38:	60a3      	str	r3, [r4, #8]
 8012f3a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012f3e:	6023      	str	r3, [r4, #0]
 8012f40:	6123      	str	r3, [r4, #16]
 8012f42:	2301      	movs	r3, #1
 8012f44:	6163      	str	r3, [r4, #20]
 8012f46:	b003      	add	sp, #12
 8012f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f4c:	4b22      	ldr	r3, [pc, #136]	; (8012fd8 <setvbuf+0x154>)
 8012f4e:	429c      	cmp	r4, r3
 8012f50:	d101      	bne.n	8012f56 <setvbuf+0xd2>
 8012f52:	68b4      	ldr	r4, [r6, #8]
 8012f54:	e7a8      	b.n	8012ea8 <setvbuf+0x24>
 8012f56:	4b21      	ldr	r3, [pc, #132]	; (8012fdc <setvbuf+0x158>)
 8012f58:	429c      	cmp	r4, r3
 8012f5a:	bf08      	it	eq
 8012f5c:	68f4      	ldreq	r4, [r6, #12]
 8012f5e:	e7a3      	b.n	8012ea8 <setvbuf+0x24>
 8012f60:	2f00      	cmp	r7, #0
 8012f62:	d0d8      	beq.n	8012f16 <setvbuf+0x92>
 8012f64:	69b3      	ldr	r3, [r6, #24]
 8012f66:	b913      	cbnz	r3, 8012f6e <setvbuf+0xea>
 8012f68:	4630      	mov	r0, r6
 8012f6a:	f7fe f86d 	bl	8011048 <__sinit>
 8012f6e:	f1b8 0f01 	cmp.w	r8, #1
 8012f72:	bf08      	it	eq
 8012f74:	89a3      	ldrheq	r3, [r4, #12]
 8012f76:	6027      	str	r7, [r4, #0]
 8012f78:	bf04      	itt	eq
 8012f7a:	f043 0301 	orreq.w	r3, r3, #1
 8012f7e:	81a3      	strheq	r3, [r4, #12]
 8012f80:	89a3      	ldrh	r3, [r4, #12]
 8012f82:	f013 0008 	ands.w	r0, r3, #8
 8012f86:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8012f8a:	d01b      	beq.n	8012fc4 <setvbuf+0x140>
 8012f8c:	f013 0001 	ands.w	r0, r3, #1
 8012f90:	bf18      	it	ne
 8012f92:	426d      	negne	r5, r5
 8012f94:	f04f 0300 	mov.w	r3, #0
 8012f98:	bf1d      	ittte	ne
 8012f9a:	60a3      	strne	r3, [r4, #8]
 8012f9c:	61a5      	strne	r5, [r4, #24]
 8012f9e:	4618      	movne	r0, r3
 8012fa0:	60a5      	streq	r5, [r4, #8]
 8012fa2:	e7d0      	b.n	8012f46 <setvbuf+0xc2>
 8012fa4:	4648      	mov	r0, r9
 8012fa6:	f002 fb0f 	bl	80155c8 <malloc>
 8012faa:	4607      	mov	r7, r0
 8012fac:	2800      	cmp	r0, #0
 8012fae:	d0bc      	beq.n	8012f2a <setvbuf+0xa6>
 8012fb0:	89a3      	ldrh	r3, [r4, #12]
 8012fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fb6:	81a3      	strh	r3, [r4, #12]
 8012fb8:	464d      	mov	r5, r9
 8012fba:	e7d3      	b.n	8012f64 <setvbuf+0xe0>
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	e7b6      	b.n	8012f2e <setvbuf+0xaa>
 8012fc0:	46a9      	mov	r9, r5
 8012fc2:	e7f5      	b.n	8012fb0 <setvbuf+0x12c>
 8012fc4:	60a0      	str	r0, [r4, #8]
 8012fc6:	e7be      	b.n	8012f46 <setvbuf+0xc2>
 8012fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8012fcc:	e7bb      	b.n	8012f46 <setvbuf+0xc2>
 8012fce:	bf00      	nop
 8012fd0:	20000038 	.word	0x20000038
 8012fd4:	08016790 	.word	0x08016790
 8012fd8:	080167b0 	.word	0x080167b0
 8012fdc:	08016770 	.word	0x08016770

08012fe0 <nanf>:
 8012fe0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012fe8 <nanf+0x8>
 8012fe4:	4770      	bx	lr
 8012fe6:	bf00      	nop
 8012fe8:	7fc00000 	.word	0x7fc00000

08012fec <siprintf>:
 8012fec:	b40e      	push	{r1, r2, r3}
 8012fee:	b500      	push	{lr}
 8012ff0:	b09c      	sub	sp, #112	; 0x70
 8012ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8012ff4:	9002      	str	r0, [sp, #8]
 8012ff6:	9006      	str	r0, [sp, #24]
 8012ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012ffc:	4809      	ldr	r0, [pc, #36]	; (8013024 <siprintf+0x38>)
 8012ffe:	9107      	str	r1, [sp, #28]
 8013000:	9104      	str	r1, [sp, #16]
 8013002:	4909      	ldr	r1, [pc, #36]	; (8013028 <siprintf+0x3c>)
 8013004:	f853 2b04 	ldr.w	r2, [r3], #4
 8013008:	9105      	str	r1, [sp, #20]
 801300a:	6800      	ldr	r0, [r0, #0]
 801300c:	9301      	str	r3, [sp, #4]
 801300e:	a902      	add	r1, sp, #8
 8013010:	f002 ff9c 	bl	8015f4c <_svfiprintf_r>
 8013014:	9b02      	ldr	r3, [sp, #8]
 8013016:	2200      	movs	r2, #0
 8013018:	701a      	strb	r2, [r3, #0]
 801301a:	b01c      	add	sp, #112	; 0x70
 801301c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013020:	b003      	add	sp, #12
 8013022:	4770      	bx	lr
 8013024:	20000038 	.word	0x20000038
 8013028:	ffff0208 	.word	0xffff0208

0801302c <__sread>:
 801302c:	b510      	push	{r4, lr}
 801302e:	460c      	mov	r4, r1
 8013030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013034:	f003 f8b8 	bl	80161a8 <_read_r>
 8013038:	2800      	cmp	r0, #0
 801303a:	bfab      	itete	ge
 801303c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801303e:	89a3      	ldrhlt	r3, [r4, #12]
 8013040:	181b      	addge	r3, r3, r0
 8013042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013046:	bfac      	ite	ge
 8013048:	6563      	strge	r3, [r4, #84]	; 0x54
 801304a:	81a3      	strhlt	r3, [r4, #12]
 801304c:	bd10      	pop	{r4, pc}

0801304e <__swrite>:
 801304e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013052:	461f      	mov	r7, r3
 8013054:	898b      	ldrh	r3, [r1, #12]
 8013056:	05db      	lsls	r3, r3, #23
 8013058:	4605      	mov	r5, r0
 801305a:	460c      	mov	r4, r1
 801305c:	4616      	mov	r6, r2
 801305e:	d505      	bpl.n	801306c <__swrite+0x1e>
 8013060:	2302      	movs	r3, #2
 8013062:	2200      	movs	r2, #0
 8013064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013068:	f002 fa9c 	bl	80155a4 <_lseek_r>
 801306c:	89a3      	ldrh	r3, [r4, #12]
 801306e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013076:	81a3      	strh	r3, [r4, #12]
 8013078:	4632      	mov	r2, r6
 801307a:	463b      	mov	r3, r7
 801307c:	4628      	mov	r0, r5
 801307e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013082:	f001 b851 	b.w	8014128 <_write_r>

08013086 <__sseek>:
 8013086:	b510      	push	{r4, lr}
 8013088:	460c      	mov	r4, r1
 801308a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801308e:	f002 fa89 	bl	80155a4 <_lseek_r>
 8013092:	1c43      	adds	r3, r0, #1
 8013094:	89a3      	ldrh	r3, [r4, #12]
 8013096:	bf15      	itete	ne
 8013098:	6560      	strne	r0, [r4, #84]	; 0x54
 801309a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801309e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80130a2:	81a3      	strheq	r3, [r4, #12]
 80130a4:	bf18      	it	ne
 80130a6:	81a3      	strhne	r3, [r4, #12]
 80130a8:	bd10      	pop	{r4, pc}

080130aa <__sclose>:
 80130aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130ae:	f001 b8bb 	b.w	8014228 <_close_r>

080130b2 <sulp>:
 80130b2:	b570      	push	{r4, r5, r6, lr}
 80130b4:	4604      	mov	r4, r0
 80130b6:	460d      	mov	r5, r1
 80130b8:	ec45 4b10 	vmov	d0, r4, r5
 80130bc:	4616      	mov	r6, r2
 80130be:	f002 fd83 	bl	8015bc8 <__ulp>
 80130c2:	ec51 0b10 	vmov	r0, r1, d0
 80130c6:	b17e      	cbz	r6, 80130e8 <sulp+0x36>
 80130c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80130cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	dd09      	ble.n	80130e8 <sulp+0x36>
 80130d4:	051b      	lsls	r3, r3, #20
 80130d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80130da:	2400      	movs	r4, #0
 80130dc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80130e0:	4622      	mov	r2, r4
 80130e2:	462b      	mov	r3, r5
 80130e4:	f7f5 f9c0 	bl	8008468 <__aeabi_dmul>
 80130e8:	bd70      	pop	{r4, r5, r6, pc}
 80130ea:	0000      	movs	r0, r0
 80130ec:	0000      	movs	r0, r0
	...

080130f0 <_strtod_l>:
 80130f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f4:	461f      	mov	r7, r3
 80130f6:	b0a1      	sub	sp, #132	; 0x84
 80130f8:	2300      	movs	r3, #0
 80130fa:	4681      	mov	r9, r0
 80130fc:	4638      	mov	r0, r7
 80130fe:	460e      	mov	r6, r1
 8013100:	9217      	str	r2, [sp, #92]	; 0x5c
 8013102:	931c      	str	r3, [sp, #112]	; 0x70
 8013104:	f002 fa3e 	bl	8015584 <__localeconv_l>
 8013108:	4680      	mov	r8, r0
 801310a:	6800      	ldr	r0, [r0, #0]
 801310c:	f7f4 ff98 	bl	8008040 <strlen>
 8013110:	f04f 0a00 	mov.w	sl, #0
 8013114:	4604      	mov	r4, r0
 8013116:	f04f 0b00 	mov.w	fp, #0
 801311a:	961b      	str	r6, [sp, #108]	; 0x6c
 801311c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801311e:	781a      	ldrb	r2, [r3, #0]
 8013120:	2a0d      	cmp	r2, #13
 8013122:	d832      	bhi.n	801318a <_strtod_l+0x9a>
 8013124:	2a09      	cmp	r2, #9
 8013126:	d236      	bcs.n	8013196 <_strtod_l+0xa6>
 8013128:	2a00      	cmp	r2, #0
 801312a:	d03e      	beq.n	80131aa <_strtod_l+0xba>
 801312c:	2300      	movs	r3, #0
 801312e:	930d      	str	r3, [sp, #52]	; 0x34
 8013130:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013132:	782b      	ldrb	r3, [r5, #0]
 8013134:	2b30      	cmp	r3, #48	; 0x30
 8013136:	f040 80ac 	bne.w	8013292 <_strtod_l+0x1a2>
 801313a:	786b      	ldrb	r3, [r5, #1]
 801313c:	2b58      	cmp	r3, #88	; 0x58
 801313e:	d001      	beq.n	8013144 <_strtod_l+0x54>
 8013140:	2b78      	cmp	r3, #120	; 0x78
 8013142:	d167      	bne.n	8013214 <_strtod_l+0x124>
 8013144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013146:	9301      	str	r3, [sp, #4]
 8013148:	ab1c      	add	r3, sp, #112	; 0x70
 801314a:	9300      	str	r3, [sp, #0]
 801314c:	9702      	str	r7, [sp, #8]
 801314e:	ab1d      	add	r3, sp, #116	; 0x74
 8013150:	4a88      	ldr	r2, [pc, #544]	; (8013374 <_strtod_l+0x284>)
 8013152:	a91b      	add	r1, sp, #108	; 0x6c
 8013154:	4648      	mov	r0, r9
 8013156:	f001 ff1c 	bl	8014f92 <__gethex>
 801315a:	f010 0407 	ands.w	r4, r0, #7
 801315e:	4606      	mov	r6, r0
 8013160:	d005      	beq.n	801316e <_strtod_l+0x7e>
 8013162:	2c06      	cmp	r4, #6
 8013164:	d12b      	bne.n	80131be <_strtod_l+0xce>
 8013166:	3501      	adds	r5, #1
 8013168:	2300      	movs	r3, #0
 801316a:	951b      	str	r5, [sp, #108]	; 0x6c
 801316c:	930d      	str	r3, [sp, #52]	; 0x34
 801316e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013170:	2b00      	cmp	r3, #0
 8013172:	f040 859a 	bne.w	8013caa <_strtod_l+0xbba>
 8013176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013178:	b1e3      	cbz	r3, 80131b4 <_strtod_l+0xc4>
 801317a:	4652      	mov	r2, sl
 801317c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013180:	ec43 2b10 	vmov	d0, r2, r3
 8013184:	b021      	add	sp, #132	; 0x84
 8013186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801318a:	2a2b      	cmp	r2, #43	; 0x2b
 801318c:	d015      	beq.n	80131ba <_strtod_l+0xca>
 801318e:	2a2d      	cmp	r2, #45	; 0x2d
 8013190:	d004      	beq.n	801319c <_strtod_l+0xac>
 8013192:	2a20      	cmp	r2, #32
 8013194:	d1ca      	bne.n	801312c <_strtod_l+0x3c>
 8013196:	3301      	adds	r3, #1
 8013198:	931b      	str	r3, [sp, #108]	; 0x6c
 801319a:	e7bf      	b.n	801311c <_strtod_l+0x2c>
 801319c:	2201      	movs	r2, #1
 801319e:	920d      	str	r2, [sp, #52]	; 0x34
 80131a0:	1c5a      	adds	r2, r3, #1
 80131a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80131a4:	785b      	ldrb	r3, [r3, #1]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d1c2      	bne.n	8013130 <_strtod_l+0x40>
 80131aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80131ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	f040 8579 	bne.w	8013ca6 <_strtod_l+0xbb6>
 80131b4:	4652      	mov	r2, sl
 80131b6:	465b      	mov	r3, fp
 80131b8:	e7e2      	b.n	8013180 <_strtod_l+0x90>
 80131ba:	2200      	movs	r2, #0
 80131bc:	e7ef      	b.n	801319e <_strtod_l+0xae>
 80131be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80131c0:	b13a      	cbz	r2, 80131d2 <_strtod_l+0xe2>
 80131c2:	2135      	movs	r1, #53	; 0x35
 80131c4:	a81e      	add	r0, sp, #120	; 0x78
 80131c6:	f002 fdf7 	bl	8015db8 <__copybits>
 80131ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80131cc:	4648      	mov	r0, r9
 80131ce:	f002 fa64 	bl	801569a <_Bfree>
 80131d2:	3c01      	subs	r4, #1
 80131d4:	2c04      	cmp	r4, #4
 80131d6:	d806      	bhi.n	80131e6 <_strtod_l+0xf6>
 80131d8:	e8df f004 	tbb	[pc, r4]
 80131dc:	1714030a 	.word	0x1714030a
 80131e0:	0a          	.byte	0x0a
 80131e1:	00          	.byte	0x00
 80131e2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80131e6:	0730      	lsls	r0, r6, #28
 80131e8:	d5c1      	bpl.n	801316e <_strtod_l+0x7e>
 80131ea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80131ee:	e7be      	b.n	801316e <_strtod_l+0x7e>
 80131f0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80131f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80131f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80131fa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80131fe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013202:	e7f0      	b.n	80131e6 <_strtod_l+0xf6>
 8013204:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013378 <_strtod_l+0x288>
 8013208:	e7ed      	b.n	80131e6 <_strtod_l+0xf6>
 801320a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801320e:	f04f 3aff 	mov.w	sl, #4294967295
 8013212:	e7e8      	b.n	80131e6 <_strtod_l+0xf6>
 8013214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013216:	1c5a      	adds	r2, r3, #1
 8013218:	921b      	str	r2, [sp, #108]	; 0x6c
 801321a:	785b      	ldrb	r3, [r3, #1]
 801321c:	2b30      	cmp	r3, #48	; 0x30
 801321e:	d0f9      	beq.n	8013214 <_strtod_l+0x124>
 8013220:	2b00      	cmp	r3, #0
 8013222:	d0a4      	beq.n	801316e <_strtod_l+0x7e>
 8013224:	2301      	movs	r3, #1
 8013226:	2500      	movs	r5, #0
 8013228:	9306      	str	r3, [sp, #24]
 801322a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801322c:	9308      	str	r3, [sp, #32]
 801322e:	9507      	str	r5, [sp, #28]
 8013230:	9505      	str	r5, [sp, #20]
 8013232:	220a      	movs	r2, #10
 8013234:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013236:	7807      	ldrb	r7, [r0, #0]
 8013238:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801323c:	b2d9      	uxtb	r1, r3
 801323e:	2909      	cmp	r1, #9
 8013240:	d929      	bls.n	8013296 <_strtod_l+0x1a6>
 8013242:	4622      	mov	r2, r4
 8013244:	f8d8 1000 	ldr.w	r1, [r8]
 8013248:	f002 ffc0 	bl	80161cc <strncmp>
 801324c:	2800      	cmp	r0, #0
 801324e:	d031      	beq.n	80132b4 <_strtod_l+0x1c4>
 8013250:	2000      	movs	r0, #0
 8013252:	9c05      	ldr	r4, [sp, #20]
 8013254:	9004      	str	r0, [sp, #16]
 8013256:	463b      	mov	r3, r7
 8013258:	4602      	mov	r2, r0
 801325a:	2b65      	cmp	r3, #101	; 0x65
 801325c:	d001      	beq.n	8013262 <_strtod_l+0x172>
 801325e:	2b45      	cmp	r3, #69	; 0x45
 8013260:	d114      	bne.n	801328c <_strtod_l+0x19c>
 8013262:	b924      	cbnz	r4, 801326e <_strtod_l+0x17e>
 8013264:	b910      	cbnz	r0, 801326c <_strtod_l+0x17c>
 8013266:	9b06      	ldr	r3, [sp, #24]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d09e      	beq.n	80131aa <_strtod_l+0xba>
 801326c:	2400      	movs	r4, #0
 801326e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013270:	1c73      	adds	r3, r6, #1
 8013272:	931b      	str	r3, [sp, #108]	; 0x6c
 8013274:	7873      	ldrb	r3, [r6, #1]
 8013276:	2b2b      	cmp	r3, #43	; 0x2b
 8013278:	d078      	beq.n	801336c <_strtod_l+0x27c>
 801327a:	2b2d      	cmp	r3, #45	; 0x2d
 801327c:	d070      	beq.n	8013360 <_strtod_l+0x270>
 801327e:	f04f 0c00 	mov.w	ip, #0
 8013282:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013286:	2f09      	cmp	r7, #9
 8013288:	d97c      	bls.n	8013384 <_strtod_l+0x294>
 801328a:	961b      	str	r6, [sp, #108]	; 0x6c
 801328c:	f04f 0e00 	mov.w	lr, #0
 8013290:	e09a      	b.n	80133c8 <_strtod_l+0x2d8>
 8013292:	2300      	movs	r3, #0
 8013294:	e7c7      	b.n	8013226 <_strtod_l+0x136>
 8013296:	9905      	ldr	r1, [sp, #20]
 8013298:	2908      	cmp	r1, #8
 801329a:	bfdd      	ittte	le
 801329c:	9907      	ldrle	r1, [sp, #28]
 801329e:	fb02 3301 	mlale	r3, r2, r1, r3
 80132a2:	9307      	strle	r3, [sp, #28]
 80132a4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80132a8:	9b05      	ldr	r3, [sp, #20]
 80132aa:	3001      	adds	r0, #1
 80132ac:	3301      	adds	r3, #1
 80132ae:	9305      	str	r3, [sp, #20]
 80132b0:	901b      	str	r0, [sp, #108]	; 0x6c
 80132b2:	e7bf      	b.n	8013234 <_strtod_l+0x144>
 80132b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80132b6:	191a      	adds	r2, r3, r4
 80132b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80132ba:	9a05      	ldr	r2, [sp, #20]
 80132bc:	5d1b      	ldrb	r3, [r3, r4]
 80132be:	2a00      	cmp	r2, #0
 80132c0:	d037      	beq.n	8013332 <_strtod_l+0x242>
 80132c2:	9c05      	ldr	r4, [sp, #20]
 80132c4:	4602      	mov	r2, r0
 80132c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80132ca:	2909      	cmp	r1, #9
 80132cc:	d913      	bls.n	80132f6 <_strtod_l+0x206>
 80132ce:	2101      	movs	r1, #1
 80132d0:	9104      	str	r1, [sp, #16]
 80132d2:	e7c2      	b.n	801325a <_strtod_l+0x16a>
 80132d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80132d6:	1c5a      	adds	r2, r3, #1
 80132d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80132da:	785b      	ldrb	r3, [r3, #1]
 80132dc:	3001      	adds	r0, #1
 80132de:	2b30      	cmp	r3, #48	; 0x30
 80132e0:	d0f8      	beq.n	80132d4 <_strtod_l+0x1e4>
 80132e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80132e6:	2a08      	cmp	r2, #8
 80132e8:	f200 84e4 	bhi.w	8013cb4 <_strtod_l+0xbc4>
 80132ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80132ee:	9208      	str	r2, [sp, #32]
 80132f0:	4602      	mov	r2, r0
 80132f2:	2000      	movs	r0, #0
 80132f4:	4604      	mov	r4, r0
 80132f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80132fa:	f100 0101 	add.w	r1, r0, #1
 80132fe:	d012      	beq.n	8013326 <_strtod_l+0x236>
 8013300:	440a      	add	r2, r1
 8013302:	eb00 0c04 	add.w	ip, r0, r4
 8013306:	4621      	mov	r1, r4
 8013308:	270a      	movs	r7, #10
 801330a:	458c      	cmp	ip, r1
 801330c:	d113      	bne.n	8013336 <_strtod_l+0x246>
 801330e:	1821      	adds	r1, r4, r0
 8013310:	2908      	cmp	r1, #8
 8013312:	f104 0401 	add.w	r4, r4, #1
 8013316:	4404      	add	r4, r0
 8013318:	dc19      	bgt.n	801334e <_strtod_l+0x25e>
 801331a:	9b07      	ldr	r3, [sp, #28]
 801331c:	210a      	movs	r1, #10
 801331e:	fb01 e303 	mla	r3, r1, r3, lr
 8013322:	9307      	str	r3, [sp, #28]
 8013324:	2100      	movs	r1, #0
 8013326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013328:	1c58      	adds	r0, r3, #1
 801332a:	901b      	str	r0, [sp, #108]	; 0x6c
 801332c:	785b      	ldrb	r3, [r3, #1]
 801332e:	4608      	mov	r0, r1
 8013330:	e7c9      	b.n	80132c6 <_strtod_l+0x1d6>
 8013332:	9805      	ldr	r0, [sp, #20]
 8013334:	e7d3      	b.n	80132de <_strtod_l+0x1ee>
 8013336:	2908      	cmp	r1, #8
 8013338:	f101 0101 	add.w	r1, r1, #1
 801333c:	dc03      	bgt.n	8013346 <_strtod_l+0x256>
 801333e:	9b07      	ldr	r3, [sp, #28]
 8013340:	437b      	muls	r3, r7
 8013342:	9307      	str	r3, [sp, #28]
 8013344:	e7e1      	b.n	801330a <_strtod_l+0x21a>
 8013346:	2910      	cmp	r1, #16
 8013348:	bfd8      	it	le
 801334a:	437d      	mulle	r5, r7
 801334c:	e7dd      	b.n	801330a <_strtod_l+0x21a>
 801334e:	2c10      	cmp	r4, #16
 8013350:	bfdc      	itt	le
 8013352:	210a      	movle	r1, #10
 8013354:	fb01 e505 	mlale	r5, r1, r5, lr
 8013358:	e7e4      	b.n	8013324 <_strtod_l+0x234>
 801335a:	2301      	movs	r3, #1
 801335c:	9304      	str	r3, [sp, #16]
 801335e:	e781      	b.n	8013264 <_strtod_l+0x174>
 8013360:	f04f 0c01 	mov.w	ip, #1
 8013364:	1cb3      	adds	r3, r6, #2
 8013366:	931b      	str	r3, [sp, #108]	; 0x6c
 8013368:	78b3      	ldrb	r3, [r6, #2]
 801336a:	e78a      	b.n	8013282 <_strtod_l+0x192>
 801336c:	f04f 0c00 	mov.w	ip, #0
 8013370:	e7f8      	b.n	8013364 <_strtod_l+0x274>
 8013372:	bf00      	nop
 8013374:	08016838 	.word	0x08016838
 8013378:	7ff00000 	.word	0x7ff00000
 801337c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801337e:	1c5f      	adds	r7, r3, #1
 8013380:	971b      	str	r7, [sp, #108]	; 0x6c
 8013382:	785b      	ldrb	r3, [r3, #1]
 8013384:	2b30      	cmp	r3, #48	; 0x30
 8013386:	d0f9      	beq.n	801337c <_strtod_l+0x28c>
 8013388:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801338c:	2f08      	cmp	r7, #8
 801338e:	f63f af7d 	bhi.w	801328c <_strtod_l+0x19c>
 8013392:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013396:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013398:	930a      	str	r3, [sp, #40]	; 0x28
 801339a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801339c:	1c5f      	adds	r7, r3, #1
 801339e:	971b      	str	r7, [sp, #108]	; 0x6c
 80133a0:	785b      	ldrb	r3, [r3, #1]
 80133a2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80133a6:	f1b8 0f09 	cmp.w	r8, #9
 80133aa:	d937      	bls.n	801341c <_strtod_l+0x32c>
 80133ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133ae:	1a7f      	subs	r7, r7, r1
 80133b0:	2f08      	cmp	r7, #8
 80133b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80133b6:	dc37      	bgt.n	8013428 <_strtod_l+0x338>
 80133b8:	45be      	cmp	lr, r7
 80133ba:	bfa8      	it	ge
 80133bc:	46be      	movge	lr, r7
 80133be:	f1bc 0f00 	cmp.w	ip, #0
 80133c2:	d001      	beq.n	80133c8 <_strtod_l+0x2d8>
 80133c4:	f1ce 0e00 	rsb	lr, lr, #0
 80133c8:	2c00      	cmp	r4, #0
 80133ca:	d151      	bne.n	8013470 <_strtod_l+0x380>
 80133cc:	2800      	cmp	r0, #0
 80133ce:	f47f aece 	bne.w	801316e <_strtod_l+0x7e>
 80133d2:	9a06      	ldr	r2, [sp, #24]
 80133d4:	2a00      	cmp	r2, #0
 80133d6:	f47f aeca 	bne.w	801316e <_strtod_l+0x7e>
 80133da:	9a04      	ldr	r2, [sp, #16]
 80133dc:	2a00      	cmp	r2, #0
 80133de:	f47f aee4 	bne.w	80131aa <_strtod_l+0xba>
 80133e2:	2b4e      	cmp	r3, #78	; 0x4e
 80133e4:	d027      	beq.n	8013436 <_strtod_l+0x346>
 80133e6:	dc21      	bgt.n	801342c <_strtod_l+0x33c>
 80133e8:	2b49      	cmp	r3, #73	; 0x49
 80133ea:	f47f aede 	bne.w	80131aa <_strtod_l+0xba>
 80133ee:	49a0      	ldr	r1, [pc, #640]	; (8013670 <_strtod_l+0x580>)
 80133f0:	a81b      	add	r0, sp, #108	; 0x6c
 80133f2:	f002 f801 	bl	80153f8 <__match>
 80133f6:	2800      	cmp	r0, #0
 80133f8:	f43f aed7 	beq.w	80131aa <_strtod_l+0xba>
 80133fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80133fe:	499d      	ldr	r1, [pc, #628]	; (8013674 <_strtod_l+0x584>)
 8013400:	3b01      	subs	r3, #1
 8013402:	a81b      	add	r0, sp, #108	; 0x6c
 8013404:	931b      	str	r3, [sp, #108]	; 0x6c
 8013406:	f001 fff7 	bl	80153f8 <__match>
 801340a:	b910      	cbnz	r0, 8013412 <_strtod_l+0x322>
 801340c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801340e:	3301      	adds	r3, #1
 8013410:	931b      	str	r3, [sp, #108]	; 0x6c
 8013412:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013688 <_strtod_l+0x598>
 8013416:	f04f 0a00 	mov.w	sl, #0
 801341a:	e6a8      	b.n	801316e <_strtod_l+0x7e>
 801341c:	210a      	movs	r1, #10
 801341e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013422:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013426:	e7b8      	b.n	801339a <_strtod_l+0x2aa>
 8013428:	46be      	mov	lr, r7
 801342a:	e7c8      	b.n	80133be <_strtod_l+0x2ce>
 801342c:	2b69      	cmp	r3, #105	; 0x69
 801342e:	d0de      	beq.n	80133ee <_strtod_l+0x2fe>
 8013430:	2b6e      	cmp	r3, #110	; 0x6e
 8013432:	f47f aeba 	bne.w	80131aa <_strtod_l+0xba>
 8013436:	4990      	ldr	r1, [pc, #576]	; (8013678 <_strtod_l+0x588>)
 8013438:	a81b      	add	r0, sp, #108	; 0x6c
 801343a:	f001 ffdd 	bl	80153f8 <__match>
 801343e:	2800      	cmp	r0, #0
 8013440:	f43f aeb3 	beq.w	80131aa <_strtod_l+0xba>
 8013444:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	2b28      	cmp	r3, #40	; 0x28
 801344a:	d10e      	bne.n	801346a <_strtod_l+0x37a>
 801344c:	aa1e      	add	r2, sp, #120	; 0x78
 801344e:	498b      	ldr	r1, [pc, #556]	; (801367c <_strtod_l+0x58c>)
 8013450:	a81b      	add	r0, sp, #108	; 0x6c
 8013452:	f001 ffe5 	bl	8015420 <__hexnan>
 8013456:	2805      	cmp	r0, #5
 8013458:	d107      	bne.n	801346a <_strtod_l+0x37a>
 801345a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801345c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013460:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013464:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013468:	e681      	b.n	801316e <_strtod_l+0x7e>
 801346a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013690 <_strtod_l+0x5a0>
 801346e:	e7d2      	b.n	8013416 <_strtod_l+0x326>
 8013470:	ebae 0302 	sub.w	r3, lr, r2
 8013474:	9306      	str	r3, [sp, #24]
 8013476:	9b05      	ldr	r3, [sp, #20]
 8013478:	9807      	ldr	r0, [sp, #28]
 801347a:	2b00      	cmp	r3, #0
 801347c:	bf08      	it	eq
 801347e:	4623      	moveq	r3, r4
 8013480:	2c10      	cmp	r4, #16
 8013482:	9305      	str	r3, [sp, #20]
 8013484:	46a0      	mov	r8, r4
 8013486:	bfa8      	it	ge
 8013488:	f04f 0810 	movge.w	r8, #16
 801348c:	f7f4 ff72 	bl	8008374 <__aeabi_ui2d>
 8013490:	2c09      	cmp	r4, #9
 8013492:	4682      	mov	sl, r0
 8013494:	468b      	mov	fp, r1
 8013496:	dc13      	bgt.n	80134c0 <_strtod_l+0x3d0>
 8013498:	9b06      	ldr	r3, [sp, #24]
 801349a:	2b00      	cmp	r3, #0
 801349c:	f43f ae67 	beq.w	801316e <_strtod_l+0x7e>
 80134a0:	9b06      	ldr	r3, [sp, #24]
 80134a2:	dd7a      	ble.n	801359a <_strtod_l+0x4aa>
 80134a4:	2b16      	cmp	r3, #22
 80134a6:	dc61      	bgt.n	801356c <_strtod_l+0x47c>
 80134a8:	4a75      	ldr	r2, [pc, #468]	; (8013680 <_strtod_l+0x590>)
 80134aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80134ae:	e9de 0100 	ldrd	r0, r1, [lr]
 80134b2:	4652      	mov	r2, sl
 80134b4:	465b      	mov	r3, fp
 80134b6:	f7f4 ffd7 	bl	8008468 <__aeabi_dmul>
 80134ba:	4682      	mov	sl, r0
 80134bc:	468b      	mov	fp, r1
 80134be:	e656      	b.n	801316e <_strtod_l+0x7e>
 80134c0:	4b6f      	ldr	r3, [pc, #444]	; (8013680 <_strtod_l+0x590>)
 80134c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80134c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80134ca:	f7f4 ffcd 	bl	8008468 <__aeabi_dmul>
 80134ce:	4606      	mov	r6, r0
 80134d0:	4628      	mov	r0, r5
 80134d2:	460f      	mov	r7, r1
 80134d4:	f7f4 ff4e 	bl	8008374 <__aeabi_ui2d>
 80134d8:	4602      	mov	r2, r0
 80134da:	460b      	mov	r3, r1
 80134dc:	4630      	mov	r0, r6
 80134de:	4639      	mov	r1, r7
 80134e0:	f7f4 fe0c 	bl	80080fc <__adddf3>
 80134e4:	2c0f      	cmp	r4, #15
 80134e6:	4682      	mov	sl, r0
 80134e8:	468b      	mov	fp, r1
 80134ea:	ddd5      	ble.n	8013498 <_strtod_l+0x3a8>
 80134ec:	9b06      	ldr	r3, [sp, #24]
 80134ee:	eba4 0808 	sub.w	r8, r4, r8
 80134f2:	4498      	add	r8, r3
 80134f4:	f1b8 0f00 	cmp.w	r8, #0
 80134f8:	f340 8096 	ble.w	8013628 <_strtod_l+0x538>
 80134fc:	f018 030f 	ands.w	r3, r8, #15
 8013500:	d00a      	beq.n	8013518 <_strtod_l+0x428>
 8013502:	495f      	ldr	r1, [pc, #380]	; (8013680 <_strtod_l+0x590>)
 8013504:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013508:	4652      	mov	r2, sl
 801350a:	465b      	mov	r3, fp
 801350c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013510:	f7f4 ffaa 	bl	8008468 <__aeabi_dmul>
 8013514:	4682      	mov	sl, r0
 8013516:	468b      	mov	fp, r1
 8013518:	f038 080f 	bics.w	r8, r8, #15
 801351c:	d073      	beq.n	8013606 <_strtod_l+0x516>
 801351e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013522:	dd47      	ble.n	80135b4 <_strtod_l+0x4c4>
 8013524:	2400      	movs	r4, #0
 8013526:	46a0      	mov	r8, r4
 8013528:	9407      	str	r4, [sp, #28]
 801352a:	9405      	str	r4, [sp, #20]
 801352c:	2322      	movs	r3, #34	; 0x22
 801352e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013688 <_strtod_l+0x598>
 8013532:	f8c9 3000 	str.w	r3, [r9]
 8013536:	f04f 0a00 	mov.w	sl, #0
 801353a:	9b07      	ldr	r3, [sp, #28]
 801353c:	2b00      	cmp	r3, #0
 801353e:	f43f ae16 	beq.w	801316e <_strtod_l+0x7e>
 8013542:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013544:	4648      	mov	r0, r9
 8013546:	f002 f8a8 	bl	801569a <_Bfree>
 801354a:	9905      	ldr	r1, [sp, #20]
 801354c:	4648      	mov	r0, r9
 801354e:	f002 f8a4 	bl	801569a <_Bfree>
 8013552:	4641      	mov	r1, r8
 8013554:	4648      	mov	r0, r9
 8013556:	f002 f8a0 	bl	801569a <_Bfree>
 801355a:	9907      	ldr	r1, [sp, #28]
 801355c:	4648      	mov	r0, r9
 801355e:	f002 f89c 	bl	801569a <_Bfree>
 8013562:	4621      	mov	r1, r4
 8013564:	4648      	mov	r0, r9
 8013566:	f002 f898 	bl	801569a <_Bfree>
 801356a:	e600      	b.n	801316e <_strtod_l+0x7e>
 801356c:	9a06      	ldr	r2, [sp, #24]
 801356e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013572:	4293      	cmp	r3, r2
 8013574:	dbba      	blt.n	80134ec <_strtod_l+0x3fc>
 8013576:	4d42      	ldr	r5, [pc, #264]	; (8013680 <_strtod_l+0x590>)
 8013578:	f1c4 040f 	rsb	r4, r4, #15
 801357c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013580:	4652      	mov	r2, sl
 8013582:	465b      	mov	r3, fp
 8013584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013588:	f7f4 ff6e 	bl	8008468 <__aeabi_dmul>
 801358c:	9b06      	ldr	r3, [sp, #24]
 801358e:	1b1c      	subs	r4, r3, r4
 8013590:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013594:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013598:	e78d      	b.n	80134b6 <_strtod_l+0x3c6>
 801359a:	f113 0f16 	cmn.w	r3, #22
 801359e:	dba5      	blt.n	80134ec <_strtod_l+0x3fc>
 80135a0:	4a37      	ldr	r2, [pc, #220]	; (8013680 <_strtod_l+0x590>)
 80135a2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80135a6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80135aa:	4650      	mov	r0, sl
 80135ac:	4659      	mov	r1, fp
 80135ae:	f7f5 f885 	bl	80086bc <__aeabi_ddiv>
 80135b2:	e782      	b.n	80134ba <_strtod_l+0x3ca>
 80135b4:	2300      	movs	r3, #0
 80135b6:	4e33      	ldr	r6, [pc, #204]	; (8013684 <_strtod_l+0x594>)
 80135b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80135bc:	4650      	mov	r0, sl
 80135be:	4659      	mov	r1, fp
 80135c0:	461d      	mov	r5, r3
 80135c2:	f1b8 0f01 	cmp.w	r8, #1
 80135c6:	dc21      	bgt.n	801360c <_strtod_l+0x51c>
 80135c8:	b10b      	cbz	r3, 80135ce <_strtod_l+0x4de>
 80135ca:	4682      	mov	sl, r0
 80135cc:	468b      	mov	fp, r1
 80135ce:	4b2d      	ldr	r3, [pc, #180]	; (8013684 <_strtod_l+0x594>)
 80135d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80135d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80135d8:	4652      	mov	r2, sl
 80135da:	465b      	mov	r3, fp
 80135dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80135e0:	f7f4 ff42 	bl	8008468 <__aeabi_dmul>
 80135e4:	4b28      	ldr	r3, [pc, #160]	; (8013688 <_strtod_l+0x598>)
 80135e6:	460a      	mov	r2, r1
 80135e8:	400b      	ands	r3, r1
 80135ea:	4928      	ldr	r1, [pc, #160]	; (801368c <_strtod_l+0x59c>)
 80135ec:	428b      	cmp	r3, r1
 80135ee:	4682      	mov	sl, r0
 80135f0:	d898      	bhi.n	8013524 <_strtod_l+0x434>
 80135f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80135f6:	428b      	cmp	r3, r1
 80135f8:	bf86      	itte	hi
 80135fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013694 <_strtod_l+0x5a4>
 80135fe:	f04f 3aff 	movhi.w	sl, #4294967295
 8013602:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013606:	2300      	movs	r3, #0
 8013608:	9304      	str	r3, [sp, #16]
 801360a:	e077      	b.n	80136fc <_strtod_l+0x60c>
 801360c:	f018 0f01 	tst.w	r8, #1
 8013610:	d006      	beq.n	8013620 <_strtod_l+0x530>
 8013612:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801361a:	f7f4 ff25 	bl	8008468 <__aeabi_dmul>
 801361e:	2301      	movs	r3, #1
 8013620:	3501      	adds	r5, #1
 8013622:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013626:	e7cc      	b.n	80135c2 <_strtod_l+0x4d2>
 8013628:	d0ed      	beq.n	8013606 <_strtod_l+0x516>
 801362a:	f1c8 0800 	rsb	r8, r8, #0
 801362e:	f018 020f 	ands.w	r2, r8, #15
 8013632:	d00a      	beq.n	801364a <_strtod_l+0x55a>
 8013634:	4b12      	ldr	r3, [pc, #72]	; (8013680 <_strtod_l+0x590>)
 8013636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801363a:	4650      	mov	r0, sl
 801363c:	4659      	mov	r1, fp
 801363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013642:	f7f5 f83b 	bl	80086bc <__aeabi_ddiv>
 8013646:	4682      	mov	sl, r0
 8013648:	468b      	mov	fp, r1
 801364a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801364e:	d0da      	beq.n	8013606 <_strtod_l+0x516>
 8013650:	f1b8 0f1f 	cmp.w	r8, #31
 8013654:	dd20      	ble.n	8013698 <_strtod_l+0x5a8>
 8013656:	2400      	movs	r4, #0
 8013658:	46a0      	mov	r8, r4
 801365a:	9407      	str	r4, [sp, #28]
 801365c:	9405      	str	r4, [sp, #20]
 801365e:	2322      	movs	r3, #34	; 0x22
 8013660:	f04f 0a00 	mov.w	sl, #0
 8013664:	f04f 0b00 	mov.w	fp, #0
 8013668:	f8c9 3000 	str.w	r3, [r9]
 801366c:	e765      	b.n	801353a <_strtod_l+0x44a>
 801366e:	bf00      	nop
 8013670:	080167ea 	.word	0x080167ea
 8013674:	0801688b 	.word	0x0801688b
 8013678:	080167f2 	.word	0x080167f2
 801367c:	0801684c 	.word	0x0801684c
 8013680:	080168c8 	.word	0x080168c8
 8013684:	080168a0 	.word	0x080168a0
 8013688:	7ff00000 	.word	0x7ff00000
 801368c:	7ca00000 	.word	0x7ca00000
 8013690:	fff80000 	.word	0xfff80000
 8013694:	7fefffff 	.word	0x7fefffff
 8013698:	f018 0310 	ands.w	r3, r8, #16
 801369c:	bf18      	it	ne
 801369e:	236a      	movne	r3, #106	; 0x6a
 80136a0:	4da0      	ldr	r5, [pc, #640]	; (8013924 <_strtod_l+0x834>)
 80136a2:	9304      	str	r3, [sp, #16]
 80136a4:	4650      	mov	r0, sl
 80136a6:	4659      	mov	r1, fp
 80136a8:	2300      	movs	r3, #0
 80136aa:	f1b8 0f00 	cmp.w	r8, #0
 80136ae:	f300 810a 	bgt.w	80138c6 <_strtod_l+0x7d6>
 80136b2:	b10b      	cbz	r3, 80136b8 <_strtod_l+0x5c8>
 80136b4:	4682      	mov	sl, r0
 80136b6:	468b      	mov	fp, r1
 80136b8:	9b04      	ldr	r3, [sp, #16]
 80136ba:	b1bb      	cbz	r3, 80136ec <_strtod_l+0x5fc>
 80136bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80136c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	4659      	mov	r1, fp
 80136c8:	dd10      	ble.n	80136ec <_strtod_l+0x5fc>
 80136ca:	2b1f      	cmp	r3, #31
 80136cc:	f340 8107 	ble.w	80138de <_strtod_l+0x7ee>
 80136d0:	2b34      	cmp	r3, #52	; 0x34
 80136d2:	bfde      	ittt	le
 80136d4:	3b20      	suble	r3, #32
 80136d6:	f04f 32ff 	movle.w	r2, #4294967295
 80136da:	fa02 f303 	lslle.w	r3, r2, r3
 80136de:	f04f 0a00 	mov.w	sl, #0
 80136e2:	bfcc      	ite	gt
 80136e4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80136e8:	ea03 0b01 	andle.w	fp, r3, r1
 80136ec:	2200      	movs	r2, #0
 80136ee:	2300      	movs	r3, #0
 80136f0:	4650      	mov	r0, sl
 80136f2:	4659      	mov	r1, fp
 80136f4:	f7f5 f920 	bl	8008938 <__aeabi_dcmpeq>
 80136f8:	2800      	cmp	r0, #0
 80136fa:	d1ac      	bne.n	8013656 <_strtod_l+0x566>
 80136fc:	9b07      	ldr	r3, [sp, #28]
 80136fe:	9300      	str	r3, [sp, #0]
 8013700:	9a05      	ldr	r2, [sp, #20]
 8013702:	9908      	ldr	r1, [sp, #32]
 8013704:	4623      	mov	r3, r4
 8013706:	4648      	mov	r0, r9
 8013708:	f002 f819 	bl	801573e <__s2b>
 801370c:	9007      	str	r0, [sp, #28]
 801370e:	2800      	cmp	r0, #0
 8013710:	f43f af08 	beq.w	8013524 <_strtod_l+0x434>
 8013714:	9a06      	ldr	r2, [sp, #24]
 8013716:	9b06      	ldr	r3, [sp, #24]
 8013718:	2a00      	cmp	r2, #0
 801371a:	f1c3 0300 	rsb	r3, r3, #0
 801371e:	bfa8      	it	ge
 8013720:	2300      	movge	r3, #0
 8013722:	930e      	str	r3, [sp, #56]	; 0x38
 8013724:	2400      	movs	r4, #0
 8013726:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801372a:	9316      	str	r3, [sp, #88]	; 0x58
 801372c:	46a0      	mov	r8, r4
 801372e:	9b07      	ldr	r3, [sp, #28]
 8013730:	4648      	mov	r0, r9
 8013732:	6859      	ldr	r1, [r3, #4]
 8013734:	f001 ff7d 	bl	8015632 <_Balloc>
 8013738:	9005      	str	r0, [sp, #20]
 801373a:	2800      	cmp	r0, #0
 801373c:	f43f aef6 	beq.w	801352c <_strtod_l+0x43c>
 8013740:	9b07      	ldr	r3, [sp, #28]
 8013742:	691a      	ldr	r2, [r3, #16]
 8013744:	3202      	adds	r2, #2
 8013746:	f103 010c 	add.w	r1, r3, #12
 801374a:	0092      	lsls	r2, r2, #2
 801374c:	300c      	adds	r0, #12
 801374e:	f7fd fda9 	bl	80112a4 <memcpy>
 8013752:	aa1e      	add	r2, sp, #120	; 0x78
 8013754:	a91d      	add	r1, sp, #116	; 0x74
 8013756:	ec4b ab10 	vmov	d0, sl, fp
 801375a:	4648      	mov	r0, r9
 801375c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013760:	f002 faa8 	bl	8015cb4 <__d2b>
 8013764:	901c      	str	r0, [sp, #112]	; 0x70
 8013766:	2800      	cmp	r0, #0
 8013768:	f43f aee0 	beq.w	801352c <_strtod_l+0x43c>
 801376c:	2101      	movs	r1, #1
 801376e:	4648      	mov	r0, r9
 8013770:	f002 f871 	bl	8015856 <__i2b>
 8013774:	4680      	mov	r8, r0
 8013776:	2800      	cmp	r0, #0
 8013778:	f43f aed8 	beq.w	801352c <_strtod_l+0x43c>
 801377c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801377e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013780:	2e00      	cmp	r6, #0
 8013782:	bfab      	itete	ge
 8013784:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013786:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013788:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801378a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801378c:	bfac      	ite	ge
 801378e:	18f7      	addge	r7, r6, r3
 8013790:	1b9d      	sublt	r5, r3, r6
 8013792:	9b04      	ldr	r3, [sp, #16]
 8013794:	1af6      	subs	r6, r6, r3
 8013796:	4416      	add	r6, r2
 8013798:	4b63      	ldr	r3, [pc, #396]	; (8013928 <_strtod_l+0x838>)
 801379a:	3e01      	subs	r6, #1
 801379c:	429e      	cmp	r6, r3
 801379e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80137a2:	f280 80af 	bge.w	8013904 <_strtod_l+0x814>
 80137a6:	1b9b      	subs	r3, r3, r6
 80137a8:	2b1f      	cmp	r3, #31
 80137aa:	eba2 0203 	sub.w	r2, r2, r3
 80137ae:	f04f 0101 	mov.w	r1, #1
 80137b2:	f300 809b 	bgt.w	80138ec <_strtod_l+0x7fc>
 80137b6:	fa01 f303 	lsl.w	r3, r1, r3
 80137ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80137bc:	2300      	movs	r3, #0
 80137be:	930a      	str	r3, [sp, #40]	; 0x28
 80137c0:	18be      	adds	r6, r7, r2
 80137c2:	9b04      	ldr	r3, [sp, #16]
 80137c4:	42b7      	cmp	r7, r6
 80137c6:	4415      	add	r5, r2
 80137c8:	441d      	add	r5, r3
 80137ca:	463b      	mov	r3, r7
 80137cc:	bfa8      	it	ge
 80137ce:	4633      	movge	r3, r6
 80137d0:	42ab      	cmp	r3, r5
 80137d2:	bfa8      	it	ge
 80137d4:	462b      	movge	r3, r5
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	bfc2      	ittt	gt
 80137da:	1af6      	subgt	r6, r6, r3
 80137dc:	1aed      	subgt	r5, r5, r3
 80137de:	1aff      	subgt	r7, r7, r3
 80137e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137e2:	b1bb      	cbz	r3, 8013814 <_strtod_l+0x724>
 80137e4:	4641      	mov	r1, r8
 80137e6:	461a      	mov	r2, r3
 80137e8:	4648      	mov	r0, r9
 80137ea:	f002 f8d3 	bl	8015994 <__pow5mult>
 80137ee:	4680      	mov	r8, r0
 80137f0:	2800      	cmp	r0, #0
 80137f2:	f43f ae9b 	beq.w	801352c <_strtod_l+0x43c>
 80137f6:	4601      	mov	r1, r0
 80137f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80137fa:	4648      	mov	r0, r9
 80137fc:	f002 f834 	bl	8015868 <__multiply>
 8013800:	900c      	str	r0, [sp, #48]	; 0x30
 8013802:	2800      	cmp	r0, #0
 8013804:	f43f ae92 	beq.w	801352c <_strtod_l+0x43c>
 8013808:	991c      	ldr	r1, [sp, #112]	; 0x70
 801380a:	4648      	mov	r0, r9
 801380c:	f001 ff45 	bl	801569a <_Bfree>
 8013810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013812:	931c      	str	r3, [sp, #112]	; 0x70
 8013814:	2e00      	cmp	r6, #0
 8013816:	dc7a      	bgt.n	801390e <_strtod_l+0x81e>
 8013818:	9b06      	ldr	r3, [sp, #24]
 801381a:	2b00      	cmp	r3, #0
 801381c:	dd08      	ble.n	8013830 <_strtod_l+0x740>
 801381e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013820:	9905      	ldr	r1, [sp, #20]
 8013822:	4648      	mov	r0, r9
 8013824:	f002 f8b6 	bl	8015994 <__pow5mult>
 8013828:	9005      	str	r0, [sp, #20]
 801382a:	2800      	cmp	r0, #0
 801382c:	f43f ae7e 	beq.w	801352c <_strtod_l+0x43c>
 8013830:	2d00      	cmp	r5, #0
 8013832:	dd08      	ble.n	8013846 <_strtod_l+0x756>
 8013834:	462a      	mov	r2, r5
 8013836:	9905      	ldr	r1, [sp, #20]
 8013838:	4648      	mov	r0, r9
 801383a:	f002 f8f9 	bl	8015a30 <__lshift>
 801383e:	9005      	str	r0, [sp, #20]
 8013840:	2800      	cmp	r0, #0
 8013842:	f43f ae73 	beq.w	801352c <_strtod_l+0x43c>
 8013846:	2f00      	cmp	r7, #0
 8013848:	dd08      	ble.n	801385c <_strtod_l+0x76c>
 801384a:	4641      	mov	r1, r8
 801384c:	463a      	mov	r2, r7
 801384e:	4648      	mov	r0, r9
 8013850:	f002 f8ee 	bl	8015a30 <__lshift>
 8013854:	4680      	mov	r8, r0
 8013856:	2800      	cmp	r0, #0
 8013858:	f43f ae68 	beq.w	801352c <_strtod_l+0x43c>
 801385c:	9a05      	ldr	r2, [sp, #20]
 801385e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013860:	4648      	mov	r0, r9
 8013862:	f002 f953 	bl	8015b0c <__mdiff>
 8013866:	4604      	mov	r4, r0
 8013868:	2800      	cmp	r0, #0
 801386a:	f43f ae5f 	beq.w	801352c <_strtod_l+0x43c>
 801386e:	68c3      	ldr	r3, [r0, #12]
 8013870:	930c      	str	r3, [sp, #48]	; 0x30
 8013872:	2300      	movs	r3, #0
 8013874:	60c3      	str	r3, [r0, #12]
 8013876:	4641      	mov	r1, r8
 8013878:	f002 f92e 	bl	8015ad8 <__mcmp>
 801387c:	2800      	cmp	r0, #0
 801387e:	da55      	bge.n	801392c <_strtod_l+0x83c>
 8013880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013882:	b9e3      	cbnz	r3, 80138be <_strtod_l+0x7ce>
 8013884:	f1ba 0f00 	cmp.w	sl, #0
 8013888:	d119      	bne.n	80138be <_strtod_l+0x7ce>
 801388a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801388e:	b9b3      	cbnz	r3, 80138be <_strtod_l+0x7ce>
 8013890:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013894:	0d1b      	lsrs	r3, r3, #20
 8013896:	051b      	lsls	r3, r3, #20
 8013898:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801389c:	d90f      	bls.n	80138be <_strtod_l+0x7ce>
 801389e:	6963      	ldr	r3, [r4, #20]
 80138a0:	b913      	cbnz	r3, 80138a8 <_strtod_l+0x7b8>
 80138a2:	6923      	ldr	r3, [r4, #16]
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	dd0a      	ble.n	80138be <_strtod_l+0x7ce>
 80138a8:	4621      	mov	r1, r4
 80138aa:	2201      	movs	r2, #1
 80138ac:	4648      	mov	r0, r9
 80138ae:	f002 f8bf 	bl	8015a30 <__lshift>
 80138b2:	4641      	mov	r1, r8
 80138b4:	4604      	mov	r4, r0
 80138b6:	f002 f90f 	bl	8015ad8 <__mcmp>
 80138ba:	2800      	cmp	r0, #0
 80138bc:	dc67      	bgt.n	801398e <_strtod_l+0x89e>
 80138be:	9b04      	ldr	r3, [sp, #16]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d171      	bne.n	80139a8 <_strtod_l+0x8b8>
 80138c4:	e63d      	b.n	8013542 <_strtod_l+0x452>
 80138c6:	f018 0f01 	tst.w	r8, #1
 80138ca:	d004      	beq.n	80138d6 <_strtod_l+0x7e6>
 80138cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80138d0:	f7f4 fdca 	bl	8008468 <__aeabi_dmul>
 80138d4:	2301      	movs	r3, #1
 80138d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80138da:	3508      	adds	r5, #8
 80138dc:	e6e5      	b.n	80136aa <_strtod_l+0x5ba>
 80138de:	f04f 32ff 	mov.w	r2, #4294967295
 80138e2:	fa02 f303 	lsl.w	r3, r2, r3
 80138e6:	ea03 0a0a 	and.w	sl, r3, sl
 80138ea:	e6ff      	b.n	80136ec <_strtod_l+0x5fc>
 80138ec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80138f0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80138f4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80138f8:	36e2      	adds	r6, #226	; 0xe2
 80138fa:	fa01 f306 	lsl.w	r3, r1, r6
 80138fe:	930a      	str	r3, [sp, #40]	; 0x28
 8013900:	910f      	str	r1, [sp, #60]	; 0x3c
 8013902:	e75d      	b.n	80137c0 <_strtod_l+0x6d0>
 8013904:	2300      	movs	r3, #0
 8013906:	930a      	str	r3, [sp, #40]	; 0x28
 8013908:	2301      	movs	r3, #1
 801390a:	930f      	str	r3, [sp, #60]	; 0x3c
 801390c:	e758      	b.n	80137c0 <_strtod_l+0x6d0>
 801390e:	4632      	mov	r2, r6
 8013910:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013912:	4648      	mov	r0, r9
 8013914:	f002 f88c 	bl	8015a30 <__lshift>
 8013918:	901c      	str	r0, [sp, #112]	; 0x70
 801391a:	2800      	cmp	r0, #0
 801391c:	f47f af7c 	bne.w	8013818 <_strtod_l+0x728>
 8013920:	e604      	b.n	801352c <_strtod_l+0x43c>
 8013922:	bf00      	nop
 8013924:	08016860 	.word	0x08016860
 8013928:	fffffc02 	.word	0xfffffc02
 801392c:	465d      	mov	r5, fp
 801392e:	f040 8086 	bne.w	8013a3e <_strtod_l+0x94e>
 8013932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013934:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013938:	b32a      	cbz	r2, 8013986 <_strtod_l+0x896>
 801393a:	4aaf      	ldr	r2, [pc, #700]	; (8013bf8 <_strtod_l+0xb08>)
 801393c:	4293      	cmp	r3, r2
 801393e:	d153      	bne.n	80139e8 <_strtod_l+0x8f8>
 8013940:	9b04      	ldr	r3, [sp, #16]
 8013942:	4650      	mov	r0, sl
 8013944:	b1d3      	cbz	r3, 801397c <_strtod_l+0x88c>
 8013946:	4aad      	ldr	r2, [pc, #692]	; (8013bfc <_strtod_l+0xb0c>)
 8013948:	402a      	ands	r2, r5
 801394a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801394e:	f04f 31ff 	mov.w	r1, #4294967295
 8013952:	d816      	bhi.n	8013982 <_strtod_l+0x892>
 8013954:	0d12      	lsrs	r2, r2, #20
 8013956:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801395a:	fa01 f303 	lsl.w	r3, r1, r3
 801395e:	4298      	cmp	r0, r3
 8013960:	d142      	bne.n	80139e8 <_strtod_l+0x8f8>
 8013962:	4ba7      	ldr	r3, [pc, #668]	; (8013c00 <_strtod_l+0xb10>)
 8013964:	429d      	cmp	r5, r3
 8013966:	d102      	bne.n	801396e <_strtod_l+0x87e>
 8013968:	3001      	adds	r0, #1
 801396a:	f43f addf 	beq.w	801352c <_strtod_l+0x43c>
 801396e:	4ba3      	ldr	r3, [pc, #652]	; (8013bfc <_strtod_l+0xb0c>)
 8013970:	402b      	ands	r3, r5
 8013972:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013976:	f04f 0a00 	mov.w	sl, #0
 801397a:	e7a0      	b.n	80138be <_strtod_l+0x7ce>
 801397c:	f04f 33ff 	mov.w	r3, #4294967295
 8013980:	e7ed      	b.n	801395e <_strtod_l+0x86e>
 8013982:	460b      	mov	r3, r1
 8013984:	e7eb      	b.n	801395e <_strtod_l+0x86e>
 8013986:	bb7b      	cbnz	r3, 80139e8 <_strtod_l+0x8f8>
 8013988:	f1ba 0f00 	cmp.w	sl, #0
 801398c:	d12c      	bne.n	80139e8 <_strtod_l+0x8f8>
 801398e:	9904      	ldr	r1, [sp, #16]
 8013990:	4a9a      	ldr	r2, [pc, #616]	; (8013bfc <_strtod_l+0xb0c>)
 8013992:	465b      	mov	r3, fp
 8013994:	b1f1      	cbz	r1, 80139d4 <_strtod_l+0x8e4>
 8013996:	ea02 010b 	and.w	r1, r2, fp
 801399a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801399e:	dc19      	bgt.n	80139d4 <_strtod_l+0x8e4>
 80139a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80139a4:	f77f ae5b 	ble.w	801365e <_strtod_l+0x56e>
 80139a8:	4a96      	ldr	r2, [pc, #600]	; (8013c04 <_strtod_l+0xb14>)
 80139aa:	2300      	movs	r3, #0
 80139ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80139b0:	4650      	mov	r0, sl
 80139b2:	4659      	mov	r1, fp
 80139b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80139b8:	f7f4 fd56 	bl	8008468 <__aeabi_dmul>
 80139bc:	4682      	mov	sl, r0
 80139be:	468b      	mov	fp, r1
 80139c0:	2900      	cmp	r1, #0
 80139c2:	f47f adbe 	bne.w	8013542 <_strtod_l+0x452>
 80139c6:	2800      	cmp	r0, #0
 80139c8:	f47f adbb 	bne.w	8013542 <_strtod_l+0x452>
 80139cc:	2322      	movs	r3, #34	; 0x22
 80139ce:	f8c9 3000 	str.w	r3, [r9]
 80139d2:	e5b6      	b.n	8013542 <_strtod_l+0x452>
 80139d4:	4013      	ands	r3, r2
 80139d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80139da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80139de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80139e2:	f04f 3aff 	mov.w	sl, #4294967295
 80139e6:	e76a      	b.n	80138be <_strtod_l+0x7ce>
 80139e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ea:	b193      	cbz	r3, 8013a12 <_strtod_l+0x922>
 80139ec:	422b      	tst	r3, r5
 80139ee:	f43f af66 	beq.w	80138be <_strtod_l+0x7ce>
 80139f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139f4:	9a04      	ldr	r2, [sp, #16]
 80139f6:	4650      	mov	r0, sl
 80139f8:	4659      	mov	r1, fp
 80139fa:	b173      	cbz	r3, 8013a1a <_strtod_l+0x92a>
 80139fc:	f7ff fb59 	bl	80130b2 <sulp>
 8013a00:	4602      	mov	r2, r0
 8013a02:	460b      	mov	r3, r1
 8013a04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013a08:	f7f4 fb78 	bl	80080fc <__adddf3>
 8013a0c:	4682      	mov	sl, r0
 8013a0e:	468b      	mov	fp, r1
 8013a10:	e755      	b.n	80138be <_strtod_l+0x7ce>
 8013a12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a14:	ea13 0f0a 	tst.w	r3, sl
 8013a18:	e7e9      	b.n	80139ee <_strtod_l+0x8fe>
 8013a1a:	f7ff fb4a 	bl	80130b2 <sulp>
 8013a1e:	4602      	mov	r2, r0
 8013a20:	460b      	mov	r3, r1
 8013a22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013a26:	f7f4 fb67 	bl	80080f8 <__aeabi_dsub>
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	4682      	mov	sl, r0
 8013a30:	468b      	mov	fp, r1
 8013a32:	f7f4 ff81 	bl	8008938 <__aeabi_dcmpeq>
 8013a36:	2800      	cmp	r0, #0
 8013a38:	f47f ae11 	bne.w	801365e <_strtod_l+0x56e>
 8013a3c:	e73f      	b.n	80138be <_strtod_l+0x7ce>
 8013a3e:	4641      	mov	r1, r8
 8013a40:	4620      	mov	r0, r4
 8013a42:	f002 f986 	bl	8015d52 <__ratio>
 8013a46:	ec57 6b10 	vmov	r6, r7, d0
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013a50:	ee10 0a10 	vmov	r0, s0
 8013a54:	4639      	mov	r1, r7
 8013a56:	f7f4 ff83 	bl	8008960 <__aeabi_dcmple>
 8013a5a:	2800      	cmp	r0, #0
 8013a5c:	d077      	beq.n	8013b4e <_strtod_l+0xa5e>
 8013a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d04a      	beq.n	8013afa <_strtod_l+0xa0a>
 8013a64:	4b68      	ldr	r3, [pc, #416]	; (8013c08 <_strtod_l+0xb18>)
 8013a66:	2200      	movs	r2, #0
 8013a68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013a6c:	4f66      	ldr	r7, [pc, #408]	; (8013c08 <_strtod_l+0xb18>)
 8013a6e:	2600      	movs	r6, #0
 8013a70:	4b62      	ldr	r3, [pc, #392]	; (8013bfc <_strtod_l+0xb0c>)
 8013a72:	402b      	ands	r3, r5
 8013a74:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a78:	4b64      	ldr	r3, [pc, #400]	; (8013c0c <_strtod_l+0xb1c>)
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	f040 80ce 	bne.w	8013c1c <_strtod_l+0xb2c>
 8013a80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013a84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013a88:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013a8c:	ec4b ab10 	vmov	d0, sl, fp
 8013a90:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013a94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013a98:	f002 f896 	bl	8015bc8 <__ulp>
 8013a9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013aa0:	ec53 2b10 	vmov	r2, r3, d0
 8013aa4:	f7f4 fce0 	bl	8008468 <__aeabi_dmul>
 8013aa8:	4652      	mov	r2, sl
 8013aaa:	465b      	mov	r3, fp
 8013aac:	f7f4 fb26 	bl	80080fc <__adddf3>
 8013ab0:	460b      	mov	r3, r1
 8013ab2:	4952      	ldr	r1, [pc, #328]	; (8013bfc <_strtod_l+0xb0c>)
 8013ab4:	4a56      	ldr	r2, [pc, #344]	; (8013c10 <_strtod_l+0xb20>)
 8013ab6:	4019      	ands	r1, r3
 8013ab8:	4291      	cmp	r1, r2
 8013aba:	4682      	mov	sl, r0
 8013abc:	d95b      	bls.n	8013b76 <_strtod_l+0xa86>
 8013abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ac0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	d103      	bne.n	8013ad0 <_strtod_l+0x9e0>
 8013ac8:	9b08      	ldr	r3, [sp, #32]
 8013aca:	3301      	adds	r3, #1
 8013acc:	f43f ad2e 	beq.w	801352c <_strtod_l+0x43c>
 8013ad0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013c00 <_strtod_l+0xb10>
 8013ad4:	f04f 3aff 	mov.w	sl, #4294967295
 8013ad8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ada:	4648      	mov	r0, r9
 8013adc:	f001 fddd 	bl	801569a <_Bfree>
 8013ae0:	9905      	ldr	r1, [sp, #20]
 8013ae2:	4648      	mov	r0, r9
 8013ae4:	f001 fdd9 	bl	801569a <_Bfree>
 8013ae8:	4641      	mov	r1, r8
 8013aea:	4648      	mov	r0, r9
 8013aec:	f001 fdd5 	bl	801569a <_Bfree>
 8013af0:	4621      	mov	r1, r4
 8013af2:	4648      	mov	r0, r9
 8013af4:	f001 fdd1 	bl	801569a <_Bfree>
 8013af8:	e619      	b.n	801372e <_strtod_l+0x63e>
 8013afa:	f1ba 0f00 	cmp.w	sl, #0
 8013afe:	d11a      	bne.n	8013b36 <_strtod_l+0xa46>
 8013b00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013b04:	b9eb      	cbnz	r3, 8013b42 <_strtod_l+0xa52>
 8013b06:	2200      	movs	r2, #0
 8013b08:	4b3f      	ldr	r3, [pc, #252]	; (8013c08 <_strtod_l+0xb18>)
 8013b0a:	4630      	mov	r0, r6
 8013b0c:	4639      	mov	r1, r7
 8013b0e:	f7f4 ff1d 	bl	800894c <__aeabi_dcmplt>
 8013b12:	b9c8      	cbnz	r0, 8013b48 <_strtod_l+0xa58>
 8013b14:	4630      	mov	r0, r6
 8013b16:	4639      	mov	r1, r7
 8013b18:	2200      	movs	r2, #0
 8013b1a:	4b3e      	ldr	r3, [pc, #248]	; (8013c14 <_strtod_l+0xb24>)
 8013b1c:	f7f4 fca4 	bl	8008468 <__aeabi_dmul>
 8013b20:	4606      	mov	r6, r0
 8013b22:	460f      	mov	r7, r1
 8013b24:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013b28:	9618      	str	r6, [sp, #96]	; 0x60
 8013b2a:	9319      	str	r3, [sp, #100]	; 0x64
 8013b2c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013b30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013b34:	e79c      	b.n	8013a70 <_strtod_l+0x980>
 8013b36:	f1ba 0f01 	cmp.w	sl, #1
 8013b3a:	d102      	bne.n	8013b42 <_strtod_l+0xa52>
 8013b3c:	2d00      	cmp	r5, #0
 8013b3e:	f43f ad8e 	beq.w	801365e <_strtod_l+0x56e>
 8013b42:	2200      	movs	r2, #0
 8013b44:	4b34      	ldr	r3, [pc, #208]	; (8013c18 <_strtod_l+0xb28>)
 8013b46:	e78f      	b.n	8013a68 <_strtod_l+0x978>
 8013b48:	2600      	movs	r6, #0
 8013b4a:	4f32      	ldr	r7, [pc, #200]	; (8013c14 <_strtod_l+0xb24>)
 8013b4c:	e7ea      	b.n	8013b24 <_strtod_l+0xa34>
 8013b4e:	4b31      	ldr	r3, [pc, #196]	; (8013c14 <_strtod_l+0xb24>)
 8013b50:	4630      	mov	r0, r6
 8013b52:	4639      	mov	r1, r7
 8013b54:	2200      	movs	r2, #0
 8013b56:	f7f4 fc87 	bl	8008468 <__aeabi_dmul>
 8013b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b5c:	4606      	mov	r6, r0
 8013b5e:	460f      	mov	r7, r1
 8013b60:	b933      	cbnz	r3, 8013b70 <_strtod_l+0xa80>
 8013b62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b66:	9010      	str	r0, [sp, #64]	; 0x40
 8013b68:	9311      	str	r3, [sp, #68]	; 0x44
 8013b6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013b6e:	e7df      	b.n	8013b30 <_strtod_l+0xa40>
 8013b70:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013b74:	e7f9      	b.n	8013b6a <_strtod_l+0xa7a>
 8013b76:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013b7a:	9b04      	ldr	r3, [sp, #16]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d1ab      	bne.n	8013ad8 <_strtod_l+0x9e8>
 8013b80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013b84:	0d1b      	lsrs	r3, r3, #20
 8013b86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013b88:	051b      	lsls	r3, r3, #20
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	465d      	mov	r5, fp
 8013b8e:	d1a3      	bne.n	8013ad8 <_strtod_l+0x9e8>
 8013b90:	4639      	mov	r1, r7
 8013b92:	4630      	mov	r0, r6
 8013b94:	f7f4 ff18 	bl	80089c8 <__aeabi_d2iz>
 8013b98:	f7f4 fbfc 	bl	8008394 <__aeabi_i2d>
 8013b9c:	460b      	mov	r3, r1
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	4639      	mov	r1, r7
 8013ba2:	4630      	mov	r0, r6
 8013ba4:	f7f4 faa8 	bl	80080f8 <__aeabi_dsub>
 8013ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013baa:	4606      	mov	r6, r0
 8013bac:	460f      	mov	r7, r1
 8013bae:	b933      	cbnz	r3, 8013bbe <_strtod_l+0xace>
 8013bb0:	f1ba 0f00 	cmp.w	sl, #0
 8013bb4:	d103      	bne.n	8013bbe <_strtod_l+0xace>
 8013bb6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013bba:	2d00      	cmp	r5, #0
 8013bbc:	d06d      	beq.n	8013c9a <_strtod_l+0xbaa>
 8013bbe:	a30a      	add	r3, pc, #40	; (adr r3, 8013be8 <_strtod_l+0xaf8>)
 8013bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc4:	4630      	mov	r0, r6
 8013bc6:	4639      	mov	r1, r7
 8013bc8:	f7f4 fec0 	bl	800894c <__aeabi_dcmplt>
 8013bcc:	2800      	cmp	r0, #0
 8013bce:	f47f acb8 	bne.w	8013542 <_strtod_l+0x452>
 8013bd2:	a307      	add	r3, pc, #28	; (adr r3, 8013bf0 <_strtod_l+0xb00>)
 8013bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd8:	4630      	mov	r0, r6
 8013bda:	4639      	mov	r1, r7
 8013bdc:	f7f4 fed4 	bl	8008988 <__aeabi_dcmpgt>
 8013be0:	2800      	cmp	r0, #0
 8013be2:	f43f af79 	beq.w	8013ad8 <_strtod_l+0x9e8>
 8013be6:	e4ac      	b.n	8013542 <_strtod_l+0x452>
 8013be8:	94a03595 	.word	0x94a03595
 8013bec:	3fdfffff 	.word	0x3fdfffff
 8013bf0:	35afe535 	.word	0x35afe535
 8013bf4:	3fe00000 	.word	0x3fe00000
 8013bf8:	000fffff 	.word	0x000fffff
 8013bfc:	7ff00000 	.word	0x7ff00000
 8013c00:	7fefffff 	.word	0x7fefffff
 8013c04:	39500000 	.word	0x39500000
 8013c08:	3ff00000 	.word	0x3ff00000
 8013c0c:	7fe00000 	.word	0x7fe00000
 8013c10:	7c9fffff 	.word	0x7c9fffff
 8013c14:	3fe00000 	.word	0x3fe00000
 8013c18:	bff00000 	.word	0xbff00000
 8013c1c:	9b04      	ldr	r3, [sp, #16]
 8013c1e:	b333      	cbz	r3, 8013c6e <_strtod_l+0xb7e>
 8013c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c22:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013c26:	d822      	bhi.n	8013c6e <_strtod_l+0xb7e>
 8013c28:	a327      	add	r3, pc, #156	; (adr r3, 8013cc8 <_strtod_l+0xbd8>)
 8013c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c2e:	4630      	mov	r0, r6
 8013c30:	4639      	mov	r1, r7
 8013c32:	f7f4 fe95 	bl	8008960 <__aeabi_dcmple>
 8013c36:	b1a0      	cbz	r0, 8013c62 <_strtod_l+0xb72>
 8013c38:	4639      	mov	r1, r7
 8013c3a:	4630      	mov	r0, r6
 8013c3c:	f7f4 feec 	bl	8008a18 <__aeabi_d2uiz>
 8013c40:	2800      	cmp	r0, #0
 8013c42:	bf08      	it	eq
 8013c44:	2001      	moveq	r0, #1
 8013c46:	f7f4 fb95 	bl	8008374 <__aeabi_ui2d>
 8013c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c4c:	4606      	mov	r6, r0
 8013c4e:	460f      	mov	r7, r1
 8013c50:	bb03      	cbnz	r3, 8013c94 <_strtod_l+0xba4>
 8013c52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c56:	9012      	str	r0, [sp, #72]	; 0x48
 8013c58:	9313      	str	r3, [sp, #76]	; 0x4c
 8013c5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013c5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c66:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013c6a:	1a9b      	subs	r3, r3, r2
 8013c6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c6e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013c72:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8013c76:	f001 ffa7 	bl	8015bc8 <__ulp>
 8013c7a:	4650      	mov	r0, sl
 8013c7c:	ec53 2b10 	vmov	r2, r3, d0
 8013c80:	4659      	mov	r1, fp
 8013c82:	f7f4 fbf1 	bl	8008468 <__aeabi_dmul>
 8013c86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013c8a:	f7f4 fa37 	bl	80080fc <__adddf3>
 8013c8e:	4682      	mov	sl, r0
 8013c90:	468b      	mov	fp, r1
 8013c92:	e772      	b.n	8013b7a <_strtod_l+0xa8a>
 8013c94:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013c98:	e7df      	b.n	8013c5a <_strtod_l+0xb6a>
 8013c9a:	a30d      	add	r3, pc, #52	; (adr r3, 8013cd0 <_strtod_l+0xbe0>)
 8013c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca0:	f7f4 fe54 	bl	800894c <__aeabi_dcmplt>
 8013ca4:	e79c      	b.n	8013be0 <_strtod_l+0xaf0>
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	930d      	str	r3, [sp, #52]	; 0x34
 8013caa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013cac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cae:	6013      	str	r3, [r2, #0]
 8013cb0:	f7ff ba61 	b.w	8013176 <_strtod_l+0x86>
 8013cb4:	2b65      	cmp	r3, #101	; 0x65
 8013cb6:	f04f 0200 	mov.w	r2, #0
 8013cba:	f43f ab4e 	beq.w	801335a <_strtod_l+0x26a>
 8013cbe:	2101      	movs	r1, #1
 8013cc0:	4614      	mov	r4, r2
 8013cc2:	9104      	str	r1, [sp, #16]
 8013cc4:	f7ff bacb 	b.w	801325e <_strtod_l+0x16e>
 8013cc8:	ffc00000 	.word	0xffc00000
 8013ccc:	41dfffff 	.word	0x41dfffff
 8013cd0:	94a03595 	.word	0x94a03595
 8013cd4:	3fcfffff 	.word	0x3fcfffff

08013cd8 <_strtod_r>:
 8013cd8:	4b05      	ldr	r3, [pc, #20]	; (8013cf0 <_strtod_r+0x18>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	b410      	push	{r4}
 8013cde:	6a1b      	ldr	r3, [r3, #32]
 8013ce0:	4c04      	ldr	r4, [pc, #16]	; (8013cf4 <_strtod_r+0x1c>)
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	bf08      	it	eq
 8013ce6:	4623      	moveq	r3, r4
 8013ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cec:	f7ff ba00 	b.w	80130f0 <_strtod_l>
 8013cf0:	20000038 	.word	0x20000038
 8013cf4:	2000009c 	.word	0x2000009c

08013cf8 <_strtol_l.isra.0>:
 8013cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cfc:	4680      	mov	r8, r0
 8013cfe:	4689      	mov	r9, r1
 8013d00:	4692      	mov	sl, r2
 8013d02:	461e      	mov	r6, r3
 8013d04:	460f      	mov	r7, r1
 8013d06:	463d      	mov	r5, r7
 8013d08:	9808      	ldr	r0, [sp, #32]
 8013d0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d0e:	f001 fc27 	bl	8015560 <__locale_ctype_ptr_l>
 8013d12:	4420      	add	r0, r4
 8013d14:	7843      	ldrb	r3, [r0, #1]
 8013d16:	f013 0308 	ands.w	r3, r3, #8
 8013d1a:	d132      	bne.n	8013d82 <_strtol_l.isra.0+0x8a>
 8013d1c:	2c2d      	cmp	r4, #45	; 0x2d
 8013d1e:	d132      	bne.n	8013d86 <_strtol_l.isra.0+0x8e>
 8013d20:	787c      	ldrb	r4, [r7, #1]
 8013d22:	1cbd      	adds	r5, r7, #2
 8013d24:	2201      	movs	r2, #1
 8013d26:	2e00      	cmp	r6, #0
 8013d28:	d05d      	beq.n	8013de6 <_strtol_l.isra.0+0xee>
 8013d2a:	2e10      	cmp	r6, #16
 8013d2c:	d109      	bne.n	8013d42 <_strtol_l.isra.0+0x4a>
 8013d2e:	2c30      	cmp	r4, #48	; 0x30
 8013d30:	d107      	bne.n	8013d42 <_strtol_l.isra.0+0x4a>
 8013d32:	782b      	ldrb	r3, [r5, #0]
 8013d34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013d38:	2b58      	cmp	r3, #88	; 0x58
 8013d3a:	d14f      	bne.n	8013ddc <_strtol_l.isra.0+0xe4>
 8013d3c:	786c      	ldrb	r4, [r5, #1]
 8013d3e:	2610      	movs	r6, #16
 8013d40:	3502      	adds	r5, #2
 8013d42:	2a00      	cmp	r2, #0
 8013d44:	bf14      	ite	ne
 8013d46:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013d4a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013d4e:	2700      	movs	r7, #0
 8013d50:	fbb1 fcf6 	udiv	ip, r1, r6
 8013d54:	4638      	mov	r0, r7
 8013d56:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013d5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013d5e:	2b09      	cmp	r3, #9
 8013d60:	d817      	bhi.n	8013d92 <_strtol_l.isra.0+0x9a>
 8013d62:	461c      	mov	r4, r3
 8013d64:	42a6      	cmp	r6, r4
 8013d66:	dd23      	ble.n	8013db0 <_strtol_l.isra.0+0xb8>
 8013d68:	1c7b      	adds	r3, r7, #1
 8013d6a:	d007      	beq.n	8013d7c <_strtol_l.isra.0+0x84>
 8013d6c:	4584      	cmp	ip, r0
 8013d6e:	d31c      	bcc.n	8013daa <_strtol_l.isra.0+0xb2>
 8013d70:	d101      	bne.n	8013d76 <_strtol_l.isra.0+0x7e>
 8013d72:	45a6      	cmp	lr, r4
 8013d74:	db19      	blt.n	8013daa <_strtol_l.isra.0+0xb2>
 8013d76:	fb00 4006 	mla	r0, r0, r6, r4
 8013d7a:	2701      	movs	r7, #1
 8013d7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d80:	e7eb      	b.n	8013d5a <_strtol_l.isra.0+0x62>
 8013d82:	462f      	mov	r7, r5
 8013d84:	e7bf      	b.n	8013d06 <_strtol_l.isra.0+0xe>
 8013d86:	2c2b      	cmp	r4, #43	; 0x2b
 8013d88:	bf04      	itt	eq
 8013d8a:	1cbd      	addeq	r5, r7, #2
 8013d8c:	787c      	ldrbeq	r4, [r7, #1]
 8013d8e:	461a      	mov	r2, r3
 8013d90:	e7c9      	b.n	8013d26 <_strtol_l.isra.0+0x2e>
 8013d92:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013d96:	2b19      	cmp	r3, #25
 8013d98:	d801      	bhi.n	8013d9e <_strtol_l.isra.0+0xa6>
 8013d9a:	3c37      	subs	r4, #55	; 0x37
 8013d9c:	e7e2      	b.n	8013d64 <_strtol_l.isra.0+0x6c>
 8013d9e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013da2:	2b19      	cmp	r3, #25
 8013da4:	d804      	bhi.n	8013db0 <_strtol_l.isra.0+0xb8>
 8013da6:	3c57      	subs	r4, #87	; 0x57
 8013da8:	e7dc      	b.n	8013d64 <_strtol_l.isra.0+0x6c>
 8013daa:	f04f 37ff 	mov.w	r7, #4294967295
 8013dae:	e7e5      	b.n	8013d7c <_strtol_l.isra.0+0x84>
 8013db0:	1c7b      	adds	r3, r7, #1
 8013db2:	d108      	bne.n	8013dc6 <_strtol_l.isra.0+0xce>
 8013db4:	2322      	movs	r3, #34	; 0x22
 8013db6:	f8c8 3000 	str.w	r3, [r8]
 8013dba:	4608      	mov	r0, r1
 8013dbc:	f1ba 0f00 	cmp.w	sl, #0
 8013dc0:	d107      	bne.n	8013dd2 <_strtol_l.isra.0+0xda>
 8013dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dc6:	b102      	cbz	r2, 8013dca <_strtol_l.isra.0+0xd2>
 8013dc8:	4240      	negs	r0, r0
 8013dca:	f1ba 0f00 	cmp.w	sl, #0
 8013dce:	d0f8      	beq.n	8013dc2 <_strtol_l.isra.0+0xca>
 8013dd0:	b10f      	cbz	r7, 8013dd6 <_strtol_l.isra.0+0xde>
 8013dd2:	f105 39ff 	add.w	r9, r5, #4294967295
 8013dd6:	f8ca 9000 	str.w	r9, [sl]
 8013dda:	e7f2      	b.n	8013dc2 <_strtol_l.isra.0+0xca>
 8013ddc:	2430      	movs	r4, #48	; 0x30
 8013dde:	2e00      	cmp	r6, #0
 8013de0:	d1af      	bne.n	8013d42 <_strtol_l.isra.0+0x4a>
 8013de2:	2608      	movs	r6, #8
 8013de4:	e7ad      	b.n	8013d42 <_strtol_l.isra.0+0x4a>
 8013de6:	2c30      	cmp	r4, #48	; 0x30
 8013de8:	d0a3      	beq.n	8013d32 <_strtol_l.isra.0+0x3a>
 8013dea:	260a      	movs	r6, #10
 8013dec:	e7a9      	b.n	8013d42 <_strtol_l.isra.0+0x4a>
	...

08013df0 <_strtol_r>:
 8013df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013df2:	4c06      	ldr	r4, [pc, #24]	; (8013e0c <_strtol_r+0x1c>)
 8013df4:	4d06      	ldr	r5, [pc, #24]	; (8013e10 <_strtol_r+0x20>)
 8013df6:	6824      	ldr	r4, [r4, #0]
 8013df8:	6a24      	ldr	r4, [r4, #32]
 8013dfa:	2c00      	cmp	r4, #0
 8013dfc:	bf08      	it	eq
 8013dfe:	462c      	moveq	r4, r5
 8013e00:	9400      	str	r4, [sp, #0]
 8013e02:	f7ff ff79 	bl	8013cf8 <_strtol_l.isra.0>
 8013e06:	b003      	add	sp, #12
 8013e08:	bd30      	pop	{r4, r5, pc}
 8013e0a:	bf00      	nop
 8013e0c:	20000038 	.word	0x20000038
 8013e10:	2000009c 	.word	0x2000009c

08013e14 <_strtoul_l.isra.0>:
 8013e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e18:	4680      	mov	r8, r0
 8013e1a:	4689      	mov	r9, r1
 8013e1c:	4692      	mov	sl, r2
 8013e1e:	461e      	mov	r6, r3
 8013e20:	460f      	mov	r7, r1
 8013e22:	463d      	mov	r5, r7
 8013e24:	9808      	ldr	r0, [sp, #32]
 8013e26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013e2a:	f001 fb99 	bl	8015560 <__locale_ctype_ptr_l>
 8013e2e:	4420      	add	r0, r4
 8013e30:	7843      	ldrb	r3, [r0, #1]
 8013e32:	f013 0308 	ands.w	r3, r3, #8
 8013e36:	d130      	bne.n	8013e9a <_strtoul_l.isra.0+0x86>
 8013e38:	2c2d      	cmp	r4, #45	; 0x2d
 8013e3a:	d130      	bne.n	8013e9e <_strtoul_l.isra.0+0x8a>
 8013e3c:	787c      	ldrb	r4, [r7, #1]
 8013e3e:	1cbd      	adds	r5, r7, #2
 8013e40:	2101      	movs	r1, #1
 8013e42:	2e00      	cmp	r6, #0
 8013e44:	d05c      	beq.n	8013f00 <_strtoul_l.isra.0+0xec>
 8013e46:	2e10      	cmp	r6, #16
 8013e48:	d109      	bne.n	8013e5e <_strtoul_l.isra.0+0x4a>
 8013e4a:	2c30      	cmp	r4, #48	; 0x30
 8013e4c:	d107      	bne.n	8013e5e <_strtoul_l.isra.0+0x4a>
 8013e4e:	782b      	ldrb	r3, [r5, #0]
 8013e50:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013e54:	2b58      	cmp	r3, #88	; 0x58
 8013e56:	d14e      	bne.n	8013ef6 <_strtoul_l.isra.0+0xe2>
 8013e58:	786c      	ldrb	r4, [r5, #1]
 8013e5a:	2610      	movs	r6, #16
 8013e5c:	3502      	adds	r5, #2
 8013e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8013e62:	2300      	movs	r3, #0
 8013e64:	fbb2 f2f6 	udiv	r2, r2, r6
 8013e68:	fb06 fc02 	mul.w	ip, r6, r2
 8013e6c:	ea6f 0c0c 	mvn.w	ip, ip
 8013e70:	4618      	mov	r0, r3
 8013e72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013e76:	2f09      	cmp	r7, #9
 8013e78:	d817      	bhi.n	8013eaa <_strtoul_l.isra.0+0x96>
 8013e7a:	463c      	mov	r4, r7
 8013e7c:	42a6      	cmp	r6, r4
 8013e7e:	dd23      	ble.n	8013ec8 <_strtoul_l.isra.0+0xb4>
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	db1e      	blt.n	8013ec2 <_strtoul_l.isra.0+0xae>
 8013e84:	4282      	cmp	r2, r0
 8013e86:	d31c      	bcc.n	8013ec2 <_strtoul_l.isra.0+0xae>
 8013e88:	d101      	bne.n	8013e8e <_strtoul_l.isra.0+0x7a>
 8013e8a:	45a4      	cmp	ip, r4
 8013e8c:	db19      	blt.n	8013ec2 <_strtoul_l.isra.0+0xae>
 8013e8e:	fb00 4006 	mla	r0, r0, r6, r4
 8013e92:	2301      	movs	r3, #1
 8013e94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013e98:	e7eb      	b.n	8013e72 <_strtoul_l.isra.0+0x5e>
 8013e9a:	462f      	mov	r7, r5
 8013e9c:	e7c1      	b.n	8013e22 <_strtoul_l.isra.0+0xe>
 8013e9e:	2c2b      	cmp	r4, #43	; 0x2b
 8013ea0:	bf04      	itt	eq
 8013ea2:	1cbd      	addeq	r5, r7, #2
 8013ea4:	787c      	ldrbeq	r4, [r7, #1]
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	e7cb      	b.n	8013e42 <_strtoul_l.isra.0+0x2e>
 8013eaa:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013eae:	2f19      	cmp	r7, #25
 8013eb0:	d801      	bhi.n	8013eb6 <_strtoul_l.isra.0+0xa2>
 8013eb2:	3c37      	subs	r4, #55	; 0x37
 8013eb4:	e7e2      	b.n	8013e7c <_strtoul_l.isra.0+0x68>
 8013eb6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013eba:	2f19      	cmp	r7, #25
 8013ebc:	d804      	bhi.n	8013ec8 <_strtoul_l.isra.0+0xb4>
 8013ebe:	3c57      	subs	r4, #87	; 0x57
 8013ec0:	e7dc      	b.n	8013e7c <_strtoul_l.isra.0+0x68>
 8013ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ec6:	e7e5      	b.n	8013e94 <_strtoul_l.isra.0+0x80>
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	da09      	bge.n	8013ee0 <_strtoul_l.isra.0+0xcc>
 8013ecc:	2322      	movs	r3, #34	; 0x22
 8013ece:	f8c8 3000 	str.w	r3, [r8]
 8013ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ed6:	f1ba 0f00 	cmp.w	sl, #0
 8013eda:	d107      	bne.n	8013eec <_strtoul_l.isra.0+0xd8>
 8013edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ee0:	b101      	cbz	r1, 8013ee4 <_strtoul_l.isra.0+0xd0>
 8013ee2:	4240      	negs	r0, r0
 8013ee4:	f1ba 0f00 	cmp.w	sl, #0
 8013ee8:	d0f8      	beq.n	8013edc <_strtoul_l.isra.0+0xc8>
 8013eea:	b10b      	cbz	r3, 8013ef0 <_strtoul_l.isra.0+0xdc>
 8013eec:	f105 39ff 	add.w	r9, r5, #4294967295
 8013ef0:	f8ca 9000 	str.w	r9, [sl]
 8013ef4:	e7f2      	b.n	8013edc <_strtoul_l.isra.0+0xc8>
 8013ef6:	2430      	movs	r4, #48	; 0x30
 8013ef8:	2e00      	cmp	r6, #0
 8013efa:	d1b0      	bne.n	8013e5e <_strtoul_l.isra.0+0x4a>
 8013efc:	2608      	movs	r6, #8
 8013efe:	e7ae      	b.n	8013e5e <_strtoul_l.isra.0+0x4a>
 8013f00:	2c30      	cmp	r4, #48	; 0x30
 8013f02:	d0a4      	beq.n	8013e4e <_strtoul_l.isra.0+0x3a>
 8013f04:	260a      	movs	r6, #10
 8013f06:	e7aa      	b.n	8013e5e <_strtoul_l.isra.0+0x4a>

08013f08 <_strtoul_r>:
 8013f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f0a:	4c06      	ldr	r4, [pc, #24]	; (8013f24 <_strtoul_r+0x1c>)
 8013f0c:	4d06      	ldr	r5, [pc, #24]	; (8013f28 <_strtoul_r+0x20>)
 8013f0e:	6824      	ldr	r4, [r4, #0]
 8013f10:	6a24      	ldr	r4, [r4, #32]
 8013f12:	2c00      	cmp	r4, #0
 8013f14:	bf08      	it	eq
 8013f16:	462c      	moveq	r4, r5
 8013f18:	9400      	str	r4, [sp, #0]
 8013f1a:	f7ff ff7b 	bl	8013e14 <_strtoul_l.isra.0>
 8013f1e:	b003      	add	sp, #12
 8013f20:	bd30      	pop	{r4, r5, pc}
 8013f22:	bf00      	nop
 8013f24:	20000038 	.word	0x20000038
 8013f28:	2000009c 	.word	0x2000009c

08013f2c <__submore>:
 8013f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f30:	460c      	mov	r4, r1
 8013f32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f38:	4299      	cmp	r1, r3
 8013f3a:	d11d      	bne.n	8013f78 <__submore+0x4c>
 8013f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013f40:	f7fd fa12 	bl	8011368 <_malloc_r>
 8013f44:	b918      	cbnz	r0, 8013f4e <__submore+0x22>
 8013f46:	f04f 30ff 	mov.w	r0, #4294967295
 8013f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f52:	63a3      	str	r3, [r4, #56]	; 0x38
 8013f54:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013f58:	6360      	str	r0, [r4, #52]	; 0x34
 8013f5a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013f5e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013f62:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013f66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013f6a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013f6e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013f72:	6020      	str	r0, [r4, #0]
 8013f74:	2000      	movs	r0, #0
 8013f76:	e7e8      	b.n	8013f4a <__submore+0x1e>
 8013f78:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013f7a:	0077      	lsls	r7, r6, #1
 8013f7c:	463a      	mov	r2, r7
 8013f7e:	f001 ff64 	bl	8015e4a <_realloc_r>
 8013f82:	4605      	mov	r5, r0
 8013f84:	2800      	cmp	r0, #0
 8013f86:	d0de      	beq.n	8013f46 <__submore+0x1a>
 8013f88:	eb00 0806 	add.w	r8, r0, r6
 8013f8c:	4601      	mov	r1, r0
 8013f8e:	4632      	mov	r2, r6
 8013f90:	4640      	mov	r0, r8
 8013f92:	f7fd f987 	bl	80112a4 <memcpy>
 8013f96:	f8c4 8000 	str.w	r8, [r4]
 8013f9a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013f9e:	e7e9      	b.n	8013f74 <__submore+0x48>

08013fa0 <_ungetc_r>:
 8013fa0:	1c4b      	adds	r3, r1, #1
 8013fa2:	b570      	push	{r4, r5, r6, lr}
 8013fa4:	4606      	mov	r6, r0
 8013fa6:	460d      	mov	r5, r1
 8013fa8:	4614      	mov	r4, r2
 8013faa:	d103      	bne.n	8013fb4 <_ungetc_r+0x14>
 8013fac:	f04f 35ff 	mov.w	r5, #4294967295
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	bd70      	pop	{r4, r5, r6, pc}
 8013fb4:	b118      	cbz	r0, 8013fbe <_ungetc_r+0x1e>
 8013fb6:	6983      	ldr	r3, [r0, #24]
 8013fb8:	b90b      	cbnz	r3, 8013fbe <_ungetc_r+0x1e>
 8013fba:	f7fd f845 	bl	8011048 <__sinit>
 8013fbe:	4b2e      	ldr	r3, [pc, #184]	; (8014078 <_ungetc_r+0xd8>)
 8013fc0:	429c      	cmp	r4, r3
 8013fc2:	d12c      	bne.n	801401e <_ungetc_r+0x7e>
 8013fc4:	6874      	ldr	r4, [r6, #4]
 8013fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fca:	f023 0320 	bic.w	r3, r3, #32
 8013fce:	81a3      	strh	r3, [r4, #12]
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	0759      	lsls	r1, r3, #29
 8013fd4:	d413      	bmi.n	8013ffe <_ungetc_r+0x5e>
 8013fd6:	06da      	lsls	r2, r3, #27
 8013fd8:	d5e8      	bpl.n	8013fac <_ungetc_r+0xc>
 8013fda:	071b      	lsls	r3, r3, #28
 8013fdc:	d50b      	bpl.n	8013ff6 <_ungetc_r+0x56>
 8013fde:	4621      	mov	r1, r4
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	f7fc ffb5 	bl	8010f50 <_fflush_r>
 8013fe6:	2800      	cmp	r0, #0
 8013fe8:	d1e0      	bne.n	8013fac <_ungetc_r+0xc>
 8013fea:	89a3      	ldrh	r3, [r4, #12]
 8013fec:	60a0      	str	r0, [r4, #8]
 8013fee:	f023 0308 	bic.w	r3, r3, #8
 8013ff2:	81a3      	strh	r3, [r4, #12]
 8013ff4:	61a0      	str	r0, [r4, #24]
 8013ff6:	89a3      	ldrh	r3, [r4, #12]
 8013ff8:	f043 0304 	orr.w	r3, r3, #4
 8013ffc:	81a3      	strh	r3, [r4, #12]
 8013ffe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014000:	6862      	ldr	r2, [r4, #4]
 8014002:	b2ed      	uxtb	r5, r5
 8014004:	b1e3      	cbz	r3, 8014040 <_ungetc_r+0xa0>
 8014006:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014008:	4293      	cmp	r3, r2
 801400a:	dd12      	ble.n	8014032 <_ungetc_r+0x92>
 801400c:	6823      	ldr	r3, [r4, #0]
 801400e:	1e5a      	subs	r2, r3, #1
 8014010:	6022      	str	r2, [r4, #0]
 8014012:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014016:	6863      	ldr	r3, [r4, #4]
 8014018:	3301      	adds	r3, #1
 801401a:	6063      	str	r3, [r4, #4]
 801401c:	e7c8      	b.n	8013fb0 <_ungetc_r+0x10>
 801401e:	4b17      	ldr	r3, [pc, #92]	; (801407c <_ungetc_r+0xdc>)
 8014020:	429c      	cmp	r4, r3
 8014022:	d101      	bne.n	8014028 <_ungetc_r+0x88>
 8014024:	68b4      	ldr	r4, [r6, #8]
 8014026:	e7ce      	b.n	8013fc6 <_ungetc_r+0x26>
 8014028:	4b15      	ldr	r3, [pc, #84]	; (8014080 <_ungetc_r+0xe0>)
 801402a:	429c      	cmp	r4, r3
 801402c:	bf08      	it	eq
 801402e:	68f4      	ldreq	r4, [r6, #12]
 8014030:	e7c9      	b.n	8013fc6 <_ungetc_r+0x26>
 8014032:	4621      	mov	r1, r4
 8014034:	4630      	mov	r0, r6
 8014036:	f7ff ff79 	bl	8013f2c <__submore>
 801403a:	2800      	cmp	r0, #0
 801403c:	d0e6      	beq.n	801400c <_ungetc_r+0x6c>
 801403e:	e7b5      	b.n	8013fac <_ungetc_r+0xc>
 8014040:	6921      	ldr	r1, [r4, #16]
 8014042:	6823      	ldr	r3, [r4, #0]
 8014044:	b151      	cbz	r1, 801405c <_ungetc_r+0xbc>
 8014046:	4299      	cmp	r1, r3
 8014048:	d208      	bcs.n	801405c <_ungetc_r+0xbc>
 801404a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801404e:	42a9      	cmp	r1, r5
 8014050:	d104      	bne.n	801405c <_ungetc_r+0xbc>
 8014052:	3b01      	subs	r3, #1
 8014054:	3201      	adds	r2, #1
 8014056:	6023      	str	r3, [r4, #0]
 8014058:	6062      	str	r2, [r4, #4]
 801405a:	e7a9      	b.n	8013fb0 <_ungetc_r+0x10>
 801405c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014064:	6363      	str	r3, [r4, #52]	; 0x34
 8014066:	2303      	movs	r3, #3
 8014068:	63a3      	str	r3, [r4, #56]	; 0x38
 801406a:	4623      	mov	r3, r4
 801406c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014070:	6023      	str	r3, [r4, #0]
 8014072:	2301      	movs	r3, #1
 8014074:	e7d1      	b.n	801401a <_ungetc_r+0x7a>
 8014076:	bf00      	nop
 8014078:	08016790 	.word	0x08016790
 801407c:	080167b0 	.word	0x080167b0
 8014080:	08016770 	.word	0x08016770

08014084 <__swbuf_r>:
 8014084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014086:	460e      	mov	r6, r1
 8014088:	4614      	mov	r4, r2
 801408a:	4605      	mov	r5, r0
 801408c:	b118      	cbz	r0, 8014096 <__swbuf_r+0x12>
 801408e:	6983      	ldr	r3, [r0, #24]
 8014090:	b90b      	cbnz	r3, 8014096 <__swbuf_r+0x12>
 8014092:	f7fc ffd9 	bl	8011048 <__sinit>
 8014096:	4b21      	ldr	r3, [pc, #132]	; (801411c <__swbuf_r+0x98>)
 8014098:	429c      	cmp	r4, r3
 801409a:	d12a      	bne.n	80140f2 <__swbuf_r+0x6e>
 801409c:	686c      	ldr	r4, [r5, #4]
 801409e:	69a3      	ldr	r3, [r4, #24]
 80140a0:	60a3      	str	r3, [r4, #8]
 80140a2:	89a3      	ldrh	r3, [r4, #12]
 80140a4:	071a      	lsls	r2, r3, #28
 80140a6:	d52e      	bpl.n	8014106 <__swbuf_r+0x82>
 80140a8:	6923      	ldr	r3, [r4, #16]
 80140aa:	b363      	cbz	r3, 8014106 <__swbuf_r+0x82>
 80140ac:	6923      	ldr	r3, [r4, #16]
 80140ae:	6820      	ldr	r0, [r4, #0]
 80140b0:	1ac0      	subs	r0, r0, r3
 80140b2:	6963      	ldr	r3, [r4, #20]
 80140b4:	b2f6      	uxtb	r6, r6
 80140b6:	4283      	cmp	r3, r0
 80140b8:	4637      	mov	r7, r6
 80140ba:	dc04      	bgt.n	80140c6 <__swbuf_r+0x42>
 80140bc:	4621      	mov	r1, r4
 80140be:	4628      	mov	r0, r5
 80140c0:	f7fc ff46 	bl	8010f50 <_fflush_r>
 80140c4:	bb28      	cbnz	r0, 8014112 <__swbuf_r+0x8e>
 80140c6:	68a3      	ldr	r3, [r4, #8]
 80140c8:	3b01      	subs	r3, #1
 80140ca:	60a3      	str	r3, [r4, #8]
 80140cc:	6823      	ldr	r3, [r4, #0]
 80140ce:	1c5a      	adds	r2, r3, #1
 80140d0:	6022      	str	r2, [r4, #0]
 80140d2:	701e      	strb	r6, [r3, #0]
 80140d4:	6963      	ldr	r3, [r4, #20]
 80140d6:	3001      	adds	r0, #1
 80140d8:	4283      	cmp	r3, r0
 80140da:	d004      	beq.n	80140e6 <__swbuf_r+0x62>
 80140dc:	89a3      	ldrh	r3, [r4, #12]
 80140de:	07db      	lsls	r3, r3, #31
 80140e0:	d519      	bpl.n	8014116 <__swbuf_r+0x92>
 80140e2:	2e0a      	cmp	r6, #10
 80140e4:	d117      	bne.n	8014116 <__swbuf_r+0x92>
 80140e6:	4621      	mov	r1, r4
 80140e8:	4628      	mov	r0, r5
 80140ea:	f7fc ff31 	bl	8010f50 <_fflush_r>
 80140ee:	b190      	cbz	r0, 8014116 <__swbuf_r+0x92>
 80140f0:	e00f      	b.n	8014112 <__swbuf_r+0x8e>
 80140f2:	4b0b      	ldr	r3, [pc, #44]	; (8014120 <__swbuf_r+0x9c>)
 80140f4:	429c      	cmp	r4, r3
 80140f6:	d101      	bne.n	80140fc <__swbuf_r+0x78>
 80140f8:	68ac      	ldr	r4, [r5, #8]
 80140fa:	e7d0      	b.n	801409e <__swbuf_r+0x1a>
 80140fc:	4b09      	ldr	r3, [pc, #36]	; (8014124 <__swbuf_r+0xa0>)
 80140fe:	429c      	cmp	r4, r3
 8014100:	bf08      	it	eq
 8014102:	68ec      	ldreq	r4, [r5, #12]
 8014104:	e7cb      	b.n	801409e <__swbuf_r+0x1a>
 8014106:	4621      	mov	r1, r4
 8014108:	4628      	mov	r0, r5
 801410a:	f000 f81f 	bl	801414c <__swsetup_r>
 801410e:	2800      	cmp	r0, #0
 8014110:	d0cc      	beq.n	80140ac <__swbuf_r+0x28>
 8014112:	f04f 37ff 	mov.w	r7, #4294967295
 8014116:	4638      	mov	r0, r7
 8014118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801411a:	bf00      	nop
 801411c:	08016790 	.word	0x08016790
 8014120:	080167b0 	.word	0x080167b0
 8014124:	08016770 	.word	0x08016770

08014128 <_write_r>:
 8014128:	b538      	push	{r3, r4, r5, lr}
 801412a:	4c07      	ldr	r4, [pc, #28]	; (8014148 <_write_r+0x20>)
 801412c:	4605      	mov	r5, r0
 801412e:	4608      	mov	r0, r1
 8014130:	4611      	mov	r1, r2
 8014132:	2200      	movs	r2, #0
 8014134:	6022      	str	r2, [r4, #0]
 8014136:	461a      	mov	r2, r3
 8014138:	f7f9 f800 	bl	800d13c <_write>
 801413c:	1c43      	adds	r3, r0, #1
 801413e:	d102      	bne.n	8014146 <_write_r+0x1e>
 8014140:	6823      	ldr	r3, [r4, #0]
 8014142:	b103      	cbz	r3, 8014146 <_write_r+0x1e>
 8014144:	602b      	str	r3, [r5, #0]
 8014146:	bd38      	pop	{r3, r4, r5, pc}
 8014148:	2000a74c 	.word	0x2000a74c

0801414c <__swsetup_r>:
 801414c:	4b32      	ldr	r3, [pc, #200]	; (8014218 <__swsetup_r+0xcc>)
 801414e:	b570      	push	{r4, r5, r6, lr}
 8014150:	681d      	ldr	r5, [r3, #0]
 8014152:	4606      	mov	r6, r0
 8014154:	460c      	mov	r4, r1
 8014156:	b125      	cbz	r5, 8014162 <__swsetup_r+0x16>
 8014158:	69ab      	ldr	r3, [r5, #24]
 801415a:	b913      	cbnz	r3, 8014162 <__swsetup_r+0x16>
 801415c:	4628      	mov	r0, r5
 801415e:	f7fc ff73 	bl	8011048 <__sinit>
 8014162:	4b2e      	ldr	r3, [pc, #184]	; (801421c <__swsetup_r+0xd0>)
 8014164:	429c      	cmp	r4, r3
 8014166:	d10f      	bne.n	8014188 <__swsetup_r+0x3c>
 8014168:	686c      	ldr	r4, [r5, #4]
 801416a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801416e:	b29a      	uxth	r2, r3
 8014170:	0715      	lsls	r5, r2, #28
 8014172:	d42c      	bmi.n	80141ce <__swsetup_r+0x82>
 8014174:	06d0      	lsls	r0, r2, #27
 8014176:	d411      	bmi.n	801419c <__swsetup_r+0x50>
 8014178:	2209      	movs	r2, #9
 801417a:	6032      	str	r2, [r6, #0]
 801417c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014180:	81a3      	strh	r3, [r4, #12]
 8014182:	f04f 30ff 	mov.w	r0, #4294967295
 8014186:	e03e      	b.n	8014206 <__swsetup_r+0xba>
 8014188:	4b25      	ldr	r3, [pc, #148]	; (8014220 <__swsetup_r+0xd4>)
 801418a:	429c      	cmp	r4, r3
 801418c:	d101      	bne.n	8014192 <__swsetup_r+0x46>
 801418e:	68ac      	ldr	r4, [r5, #8]
 8014190:	e7eb      	b.n	801416a <__swsetup_r+0x1e>
 8014192:	4b24      	ldr	r3, [pc, #144]	; (8014224 <__swsetup_r+0xd8>)
 8014194:	429c      	cmp	r4, r3
 8014196:	bf08      	it	eq
 8014198:	68ec      	ldreq	r4, [r5, #12]
 801419a:	e7e6      	b.n	801416a <__swsetup_r+0x1e>
 801419c:	0751      	lsls	r1, r2, #29
 801419e:	d512      	bpl.n	80141c6 <__swsetup_r+0x7a>
 80141a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141a2:	b141      	cbz	r1, 80141b6 <__swsetup_r+0x6a>
 80141a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141a8:	4299      	cmp	r1, r3
 80141aa:	d002      	beq.n	80141b2 <__swsetup_r+0x66>
 80141ac:	4630      	mov	r0, r6
 80141ae:	f7fd f88d 	bl	80112cc <_free_r>
 80141b2:	2300      	movs	r3, #0
 80141b4:	6363      	str	r3, [r4, #52]	; 0x34
 80141b6:	89a3      	ldrh	r3, [r4, #12]
 80141b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80141bc:	81a3      	strh	r3, [r4, #12]
 80141be:	2300      	movs	r3, #0
 80141c0:	6063      	str	r3, [r4, #4]
 80141c2:	6923      	ldr	r3, [r4, #16]
 80141c4:	6023      	str	r3, [r4, #0]
 80141c6:	89a3      	ldrh	r3, [r4, #12]
 80141c8:	f043 0308 	orr.w	r3, r3, #8
 80141cc:	81a3      	strh	r3, [r4, #12]
 80141ce:	6923      	ldr	r3, [r4, #16]
 80141d0:	b94b      	cbnz	r3, 80141e6 <__swsetup_r+0x9a>
 80141d2:	89a3      	ldrh	r3, [r4, #12]
 80141d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80141d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80141dc:	d003      	beq.n	80141e6 <__swsetup_r+0x9a>
 80141de:	4621      	mov	r1, r4
 80141e0:	4630      	mov	r0, r6
 80141e2:	f7fd f81f 	bl	8011224 <__smakebuf_r>
 80141e6:	89a2      	ldrh	r2, [r4, #12]
 80141e8:	f012 0301 	ands.w	r3, r2, #1
 80141ec:	d00c      	beq.n	8014208 <__swsetup_r+0xbc>
 80141ee:	2300      	movs	r3, #0
 80141f0:	60a3      	str	r3, [r4, #8]
 80141f2:	6963      	ldr	r3, [r4, #20]
 80141f4:	425b      	negs	r3, r3
 80141f6:	61a3      	str	r3, [r4, #24]
 80141f8:	6923      	ldr	r3, [r4, #16]
 80141fa:	b953      	cbnz	r3, 8014212 <__swsetup_r+0xc6>
 80141fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014200:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014204:	d1ba      	bne.n	801417c <__swsetup_r+0x30>
 8014206:	bd70      	pop	{r4, r5, r6, pc}
 8014208:	0792      	lsls	r2, r2, #30
 801420a:	bf58      	it	pl
 801420c:	6963      	ldrpl	r3, [r4, #20]
 801420e:	60a3      	str	r3, [r4, #8]
 8014210:	e7f2      	b.n	80141f8 <__swsetup_r+0xac>
 8014212:	2000      	movs	r0, #0
 8014214:	e7f7      	b.n	8014206 <__swsetup_r+0xba>
 8014216:	bf00      	nop
 8014218:	20000038 	.word	0x20000038
 801421c:	08016790 	.word	0x08016790
 8014220:	080167b0 	.word	0x080167b0
 8014224:	08016770 	.word	0x08016770

08014228 <_close_r>:
 8014228:	b538      	push	{r3, r4, r5, lr}
 801422a:	4c06      	ldr	r4, [pc, #24]	; (8014244 <_close_r+0x1c>)
 801422c:	2300      	movs	r3, #0
 801422e:	4605      	mov	r5, r0
 8014230:	4608      	mov	r0, r1
 8014232:	6023      	str	r3, [r4, #0]
 8014234:	f7f8 ff90 	bl	800d158 <_close>
 8014238:	1c43      	adds	r3, r0, #1
 801423a:	d102      	bne.n	8014242 <_close_r+0x1a>
 801423c:	6823      	ldr	r3, [r4, #0]
 801423e:	b103      	cbz	r3, 8014242 <_close_r+0x1a>
 8014240:	602b      	str	r3, [r5, #0]
 8014242:	bd38      	pop	{r3, r4, r5, pc}
 8014244:	2000a74c 	.word	0x2000a74c

08014248 <quorem>:
 8014248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801424c:	6903      	ldr	r3, [r0, #16]
 801424e:	690c      	ldr	r4, [r1, #16]
 8014250:	42a3      	cmp	r3, r4
 8014252:	4680      	mov	r8, r0
 8014254:	f2c0 8082 	blt.w	801435c <quorem+0x114>
 8014258:	3c01      	subs	r4, #1
 801425a:	f101 0714 	add.w	r7, r1, #20
 801425e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014262:	f100 0614 	add.w	r6, r0, #20
 8014266:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801426a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801426e:	eb06 030c 	add.w	r3, r6, ip
 8014272:	3501      	adds	r5, #1
 8014274:	eb07 090c 	add.w	r9, r7, ip
 8014278:	9301      	str	r3, [sp, #4]
 801427a:	fbb0 f5f5 	udiv	r5, r0, r5
 801427e:	b395      	cbz	r5, 80142e6 <quorem+0x9e>
 8014280:	f04f 0a00 	mov.w	sl, #0
 8014284:	4638      	mov	r0, r7
 8014286:	46b6      	mov	lr, r6
 8014288:	46d3      	mov	fp, sl
 801428a:	f850 2b04 	ldr.w	r2, [r0], #4
 801428e:	b293      	uxth	r3, r2
 8014290:	fb05 a303 	mla	r3, r5, r3, sl
 8014294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014298:	b29b      	uxth	r3, r3
 801429a:	ebab 0303 	sub.w	r3, fp, r3
 801429e:	0c12      	lsrs	r2, r2, #16
 80142a0:	f8de b000 	ldr.w	fp, [lr]
 80142a4:	fb05 a202 	mla	r2, r5, r2, sl
 80142a8:	fa13 f38b 	uxtah	r3, r3, fp
 80142ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80142b0:	fa1f fb82 	uxth.w	fp, r2
 80142b4:	f8de 2000 	ldr.w	r2, [lr]
 80142b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80142bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80142c6:	4581      	cmp	r9, r0
 80142c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80142cc:	f84e 3b04 	str.w	r3, [lr], #4
 80142d0:	d2db      	bcs.n	801428a <quorem+0x42>
 80142d2:	f856 300c 	ldr.w	r3, [r6, ip]
 80142d6:	b933      	cbnz	r3, 80142e6 <quorem+0x9e>
 80142d8:	9b01      	ldr	r3, [sp, #4]
 80142da:	3b04      	subs	r3, #4
 80142dc:	429e      	cmp	r6, r3
 80142de:	461a      	mov	r2, r3
 80142e0:	d330      	bcc.n	8014344 <quorem+0xfc>
 80142e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80142e6:	4640      	mov	r0, r8
 80142e8:	f001 fbf6 	bl	8015ad8 <__mcmp>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	db25      	blt.n	801433c <quorem+0xf4>
 80142f0:	3501      	adds	r5, #1
 80142f2:	4630      	mov	r0, r6
 80142f4:	f04f 0c00 	mov.w	ip, #0
 80142f8:	f857 2b04 	ldr.w	r2, [r7], #4
 80142fc:	f8d0 e000 	ldr.w	lr, [r0]
 8014300:	b293      	uxth	r3, r2
 8014302:	ebac 0303 	sub.w	r3, ip, r3
 8014306:	0c12      	lsrs	r2, r2, #16
 8014308:	fa13 f38e 	uxtah	r3, r3, lr
 801430c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014314:	b29b      	uxth	r3, r3
 8014316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801431a:	45b9      	cmp	r9, r7
 801431c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014320:	f840 3b04 	str.w	r3, [r0], #4
 8014324:	d2e8      	bcs.n	80142f8 <quorem+0xb0>
 8014326:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801432a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801432e:	b92a      	cbnz	r2, 801433c <quorem+0xf4>
 8014330:	3b04      	subs	r3, #4
 8014332:	429e      	cmp	r6, r3
 8014334:	461a      	mov	r2, r3
 8014336:	d30b      	bcc.n	8014350 <quorem+0x108>
 8014338:	f8c8 4010 	str.w	r4, [r8, #16]
 801433c:	4628      	mov	r0, r5
 801433e:	b003      	add	sp, #12
 8014340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014344:	6812      	ldr	r2, [r2, #0]
 8014346:	3b04      	subs	r3, #4
 8014348:	2a00      	cmp	r2, #0
 801434a:	d1ca      	bne.n	80142e2 <quorem+0x9a>
 801434c:	3c01      	subs	r4, #1
 801434e:	e7c5      	b.n	80142dc <quorem+0x94>
 8014350:	6812      	ldr	r2, [r2, #0]
 8014352:	3b04      	subs	r3, #4
 8014354:	2a00      	cmp	r2, #0
 8014356:	d1ef      	bne.n	8014338 <quorem+0xf0>
 8014358:	3c01      	subs	r4, #1
 801435a:	e7ea      	b.n	8014332 <quorem+0xea>
 801435c:	2000      	movs	r0, #0
 801435e:	e7ee      	b.n	801433e <quorem+0xf6>

08014360 <_dtoa_r>:
 8014360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014364:	ec57 6b10 	vmov	r6, r7, d0
 8014368:	b097      	sub	sp, #92	; 0x5c
 801436a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801436c:	9106      	str	r1, [sp, #24]
 801436e:	4604      	mov	r4, r0
 8014370:	920b      	str	r2, [sp, #44]	; 0x2c
 8014372:	9312      	str	r3, [sp, #72]	; 0x48
 8014374:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014378:	e9cd 6700 	strd	r6, r7, [sp]
 801437c:	b93d      	cbnz	r5, 801438e <_dtoa_r+0x2e>
 801437e:	2010      	movs	r0, #16
 8014380:	f001 f922 	bl	80155c8 <malloc>
 8014384:	6260      	str	r0, [r4, #36]	; 0x24
 8014386:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801438a:	6005      	str	r5, [r0, #0]
 801438c:	60c5      	str	r5, [r0, #12]
 801438e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014390:	6819      	ldr	r1, [r3, #0]
 8014392:	b151      	cbz	r1, 80143aa <_dtoa_r+0x4a>
 8014394:	685a      	ldr	r2, [r3, #4]
 8014396:	604a      	str	r2, [r1, #4]
 8014398:	2301      	movs	r3, #1
 801439a:	4093      	lsls	r3, r2
 801439c:	608b      	str	r3, [r1, #8]
 801439e:	4620      	mov	r0, r4
 80143a0:	f001 f97b 	bl	801569a <_Bfree>
 80143a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143a6:	2200      	movs	r2, #0
 80143a8:	601a      	str	r2, [r3, #0]
 80143aa:	1e3b      	subs	r3, r7, #0
 80143ac:	bfbb      	ittet	lt
 80143ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80143b2:	9301      	strlt	r3, [sp, #4]
 80143b4:	2300      	movge	r3, #0
 80143b6:	2201      	movlt	r2, #1
 80143b8:	bfac      	ite	ge
 80143ba:	f8c8 3000 	strge.w	r3, [r8]
 80143be:	f8c8 2000 	strlt.w	r2, [r8]
 80143c2:	4baf      	ldr	r3, [pc, #700]	; (8014680 <_dtoa_r+0x320>)
 80143c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80143c8:	ea33 0308 	bics.w	r3, r3, r8
 80143cc:	d114      	bne.n	80143f8 <_dtoa_r+0x98>
 80143ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80143d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80143d4:	6013      	str	r3, [r2, #0]
 80143d6:	9b00      	ldr	r3, [sp, #0]
 80143d8:	b923      	cbnz	r3, 80143e4 <_dtoa_r+0x84>
 80143da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80143de:	2800      	cmp	r0, #0
 80143e0:	f000 8542 	beq.w	8014e68 <_dtoa_r+0xb08>
 80143e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80143e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014694 <_dtoa_r+0x334>
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	f000 8544 	beq.w	8014e78 <_dtoa_r+0xb18>
 80143f0:	f10b 0303 	add.w	r3, fp, #3
 80143f4:	f000 bd3e 	b.w	8014e74 <_dtoa_r+0xb14>
 80143f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80143fc:	2200      	movs	r2, #0
 80143fe:	2300      	movs	r3, #0
 8014400:	4630      	mov	r0, r6
 8014402:	4639      	mov	r1, r7
 8014404:	f7f4 fa98 	bl	8008938 <__aeabi_dcmpeq>
 8014408:	4681      	mov	r9, r0
 801440a:	b168      	cbz	r0, 8014428 <_dtoa_r+0xc8>
 801440c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801440e:	2301      	movs	r3, #1
 8014410:	6013      	str	r3, [r2, #0]
 8014412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014414:	2b00      	cmp	r3, #0
 8014416:	f000 8524 	beq.w	8014e62 <_dtoa_r+0xb02>
 801441a:	4b9a      	ldr	r3, [pc, #616]	; (8014684 <_dtoa_r+0x324>)
 801441c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801441e:	f103 3bff 	add.w	fp, r3, #4294967295
 8014422:	6013      	str	r3, [r2, #0]
 8014424:	f000 bd28 	b.w	8014e78 <_dtoa_r+0xb18>
 8014428:	aa14      	add	r2, sp, #80	; 0x50
 801442a:	a915      	add	r1, sp, #84	; 0x54
 801442c:	ec47 6b10 	vmov	d0, r6, r7
 8014430:	4620      	mov	r0, r4
 8014432:	f001 fc3f 	bl	8015cb4 <__d2b>
 8014436:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801443a:	9004      	str	r0, [sp, #16]
 801443c:	2d00      	cmp	r5, #0
 801443e:	d07c      	beq.n	801453a <_dtoa_r+0x1da>
 8014440:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014444:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014448:	46b2      	mov	sl, r6
 801444a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801444e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014452:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014456:	2200      	movs	r2, #0
 8014458:	4b8b      	ldr	r3, [pc, #556]	; (8014688 <_dtoa_r+0x328>)
 801445a:	4650      	mov	r0, sl
 801445c:	4659      	mov	r1, fp
 801445e:	f7f3 fe4b 	bl	80080f8 <__aeabi_dsub>
 8014462:	a381      	add	r3, pc, #516	; (adr r3, 8014668 <_dtoa_r+0x308>)
 8014464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014468:	f7f3 fffe 	bl	8008468 <__aeabi_dmul>
 801446c:	a380      	add	r3, pc, #512	; (adr r3, 8014670 <_dtoa_r+0x310>)
 801446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014472:	f7f3 fe43 	bl	80080fc <__adddf3>
 8014476:	4606      	mov	r6, r0
 8014478:	4628      	mov	r0, r5
 801447a:	460f      	mov	r7, r1
 801447c:	f7f3 ff8a 	bl	8008394 <__aeabi_i2d>
 8014480:	a37d      	add	r3, pc, #500	; (adr r3, 8014678 <_dtoa_r+0x318>)
 8014482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014486:	f7f3 ffef 	bl	8008468 <__aeabi_dmul>
 801448a:	4602      	mov	r2, r0
 801448c:	460b      	mov	r3, r1
 801448e:	4630      	mov	r0, r6
 8014490:	4639      	mov	r1, r7
 8014492:	f7f3 fe33 	bl	80080fc <__adddf3>
 8014496:	4606      	mov	r6, r0
 8014498:	460f      	mov	r7, r1
 801449a:	f7f4 fa95 	bl	80089c8 <__aeabi_d2iz>
 801449e:	2200      	movs	r2, #0
 80144a0:	4682      	mov	sl, r0
 80144a2:	2300      	movs	r3, #0
 80144a4:	4630      	mov	r0, r6
 80144a6:	4639      	mov	r1, r7
 80144a8:	f7f4 fa50 	bl	800894c <__aeabi_dcmplt>
 80144ac:	b148      	cbz	r0, 80144c2 <_dtoa_r+0x162>
 80144ae:	4650      	mov	r0, sl
 80144b0:	f7f3 ff70 	bl	8008394 <__aeabi_i2d>
 80144b4:	4632      	mov	r2, r6
 80144b6:	463b      	mov	r3, r7
 80144b8:	f7f4 fa3e 	bl	8008938 <__aeabi_dcmpeq>
 80144bc:	b908      	cbnz	r0, 80144c2 <_dtoa_r+0x162>
 80144be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144c2:	f1ba 0f16 	cmp.w	sl, #22
 80144c6:	d859      	bhi.n	801457c <_dtoa_r+0x21c>
 80144c8:	4970      	ldr	r1, [pc, #448]	; (801468c <_dtoa_r+0x32c>)
 80144ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80144ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80144d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144d6:	f7f4 fa57 	bl	8008988 <__aeabi_dcmpgt>
 80144da:	2800      	cmp	r0, #0
 80144dc:	d050      	beq.n	8014580 <_dtoa_r+0x220>
 80144de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144e2:	2300      	movs	r3, #0
 80144e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80144e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80144e8:	1b5d      	subs	r5, r3, r5
 80144ea:	f1b5 0801 	subs.w	r8, r5, #1
 80144ee:	bf49      	itett	mi
 80144f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80144f4:	2300      	movpl	r3, #0
 80144f6:	9305      	strmi	r3, [sp, #20]
 80144f8:	f04f 0800 	movmi.w	r8, #0
 80144fc:	bf58      	it	pl
 80144fe:	9305      	strpl	r3, [sp, #20]
 8014500:	f1ba 0f00 	cmp.w	sl, #0
 8014504:	db3e      	blt.n	8014584 <_dtoa_r+0x224>
 8014506:	2300      	movs	r3, #0
 8014508:	44d0      	add	r8, sl
 801450a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801450e:	9307      	str	r3, [sp, #28]
 8014510:	9b06      	ldr	r3, [sp, #24]
 8014512:	2b09      	cmp	r3, #9
 8014514:	f200 8090 	bhi.w	8014638 <_dtoa_r+0x2d8>
 8014518:	2b05      	cmp	r3, #5
 801451a:	bfc4      	itt	gt
 801451c:	3b04      	subgt	r3, #4
 801451e:	9306      	strgt	r3, [sp, #24]
 8014520:	9b06      	ldr	r3, [sp, #24]
 8014522:	f1a3 0302 	sub.w	r3, r3, #2
 8014526:	bfcc      	ite	gt
 8014528:	2500      	movgt	r5, #0
 801452a:	2501      	movle	r5, #1
 801452c:	2b03      	cmp	r3, #3
 801452e:	f200 808f 	bhi.w	8014650 <_dtoa_r+0x2f0>
 8014532:	e8df f003 	tbb	[pc, r3]
 8014536:	7f7d      	.short	0x7f7d
 8014538:	7131      	.short	0x7131
 801453a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801453e:	441d      	add	r5, r3
 8014540:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014544:	2820      	cmp	r0, #32
 8014546:	dd13      	ble.n	8014570 <_dtoa_r+0x210>
 8014548:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801454c:	9b00      	ldr	r3, [sp, #0]
 801454e:	fa08 f800 	lsl.w	r8, r8, r0
 8014552:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014556:	fa23 f000 	lsr.w	r0, r3, r0
 801455a:	ea48 0000 	orr.w	r0, r8, r0
 801455e:	f7f3 ff09 	bl	8008374 <__aeabi_ui2d>
 8014562:	2301      	movs	r3, #1
 8014564:	4682      	mov	sl, r0
 8014566:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801456a:	3d01      	subs	r5, #1
 801456c:	9313      	str	r3, [sp, #76]	; 0x4c
 801456e:	e772      	b.n	8014456 <_dtoa_r+0xf6>
 8014570:	9b00      	ldr	r3, [sp, #0]
 8014572:	f1c0 0020 	rsb	r0, r0, #32
 8014576:	fa03 f000 	lsl.w	r0, r3, r0
 801457a:	e7f0      	b.n	801455e <_dtoa_r+0x1fe>
 801457c:	2301      	movs	r3, #1
 801457e:	e7b1      	b.n	80144e4 <_dtoa_r+0x184>
 8014580:	900f      	str	r0, [sp, #60]	; 0x3c
 8014582:	e7b0      	b.n	80144e6 <_dtoa_r+0x186>
 8014584:	9b05      	ldr	r3, [sp, #20]
 8014586:	eba3 030a 	sub.w	r3, r3, sl
 801458a:	9305      	str	r3, [sp, #20]
 801458c:	f1ca 0300 	rsb	r3, sl, #0
 8014590:	9307      	str	r3, [sp, #28]
 8014592:	2300      	movs	r3, #0
 8014594:	930e      	str	r3, [sp, #56]	; 0x38
 8014596:	e7bb      	b.n	8014510 <_dtoa_r+0x1b0>
 8014598:	2301      	movs	r3, #1
 801459a:	930a      	str	r3, [sp, #40]	; 0x28
 801459c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801459e:	2b00      	cmp	r3, #0
 80145a0:	dd59      	ble.n	8014656 <_dtoa_r+0x2f6>
 80145a2:	9302      	str	r3, [sp, #8]
 80145a4:	4699      	mov	r9, r3
 80145a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80145a8:	2200      	movs	r2, #0
 80145aa:	6072      	str	r2, [r6, #4]
 80145ac:	2204      	movs	r2, #4
 80145ae:	f102 0014 	add.w	r0, r2, #20
 80145b2:	4298      	cmp	r0, r3
 80145b4:	6871      	ldr	r1, [r6, #4]
 80145b6:	d953      	bls.n	8014660 <_dtoa_r+0x300>
 80145b8:	4620      	mov	r0, r4
 80145ba:	f001 f83a 	bl	8015632 <_Balloc>
 80145be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145c0:	6030      	str	r0, [r6, #0]
 80145c2:	f1b9 0f0e 	cmp.w	r9, #14
 80145c6:	f8d3 b000 	ldr.w	fp, [r3]
 80145ca:	f200 80e6 	bhi.w	801479a <_dtoa_r+0x43a>
 80145ce:	2d00      	cmp	r5, #0
 80145d0:	f000 80e3 	beq.w	801479a <_dtoa_r+0x43a>
 80145d4:	ed9d 7b00 	vldr	d7, [sp]
 80145d8:	f1ba 0f00 	cmp.w	sl, #0
 80145dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80145e0:	dd74      	ble.n	80146cc <_dtoa_r+0x36c>
 80145e2:	4a2a      	ldr	r2, [pc, #168]	; (801468c <_dtoa_r+0x32c>)
 80145e4:	f00a 030f 	and.w	r3, sl, #15
 80145e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80145ec:	ed93 7b00 	vldr	d7, [r3]
 80145f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80145f4:	06f0      	lsls	r0, r6, #27
 80145f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80145fa:	d565      	bpl.n	80146c8 <_dtoa_r+0x368>
 80145fc:	4b24      	ldr	r3, [pc, #144]	; (8014690 <_dtoa_r+0x330>)
 80145fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014602:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014606:	f7f4 f859 	bl	80086bc <__aeabi_ddiv>
 801460a:	e9cd 0100 	strd	r0, r1, [sp]
 801460e:	f006 060f 	and.w	r6, r6, #15
 8014612:	2503      	movs	r5, #3
 8014614:	4f1e      	ldr	r7, [pc, #120]	; (8014690 <_dtoa_r+0x330>)
 8014616:	e04c      	b.n	80146b2 <_dtoa_r+0x352>
 8014618:	2301      	movs	r3, #1
 801461a:	930a      	str	r3, [sp, #40]	; 0x28
 801461c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801461e:	4453      	add	r3, sl
 8014620:	f103 0901 	add.w	r9, r3, #1
 8014624:	9302      	str	r3, [sp, #8]
 8014626:	464b      	mov	r3, r9
 8014628:	2b01      	cmp	r3, #1
 801462a:	bfb8      	it	lt
 801462c:	2301      	movlt	r3, #1
 801462e:	e7ba      	b.n	80145a6 <_dtoa_r+0x246>
 8014630:	2300      	movs	r3, #0
 8014632:	e7b2      	b.n	801459a <_dtoa_r+0x23a>
 8014634:	2300      	movs	r3, #0
 8014636:	e7f0      	b.n	801461a <_dtoa_r+0x2ba>
 8014638:	2501      	movs	r5, #1
 801463a:	2300      	movs	r3, #0
 801463c:	9306      	str	r3, [sp, #24]
 801463e:	950a      	str	r5, [sp, #40]	; 0x28
 8014640:	f04f 33ff 	mov.w	r3, #4294967295
 8014644:	9302      	str	r3, [sp, #8]
 8014646:	4699      	mov	r9, r3
 8014648:	2200      	movs	r2, #0
 801464a:	2312      	movs	r3, #18
 801464c:	920b      	str	r2, [sp, #44]	; 0x2c
 801464e:	e7aa      	b.n	80145a6 <_dtoa_r+0x246>
 8014650:	2301      	movs	r3, #1
 8014652:	930a      	str	r3, [sp, #40]	; 0x28
 8014654:	e7f4      	b.n	8014640 <_dtoa_r+0x2e0>
 8014656:	2301      	movs	r3, #1
 8014658:	9302      	str	r3, [sp, #8]
 801465a:	4699      	mov	r9, r3
 801465c:	461a      	mov	r2, r3
 801465e:	e7f5      	b.n	801464c <_dtoa_r+0x2ec>
 8014660:	3101      	adds	r1, #1
 8014662:	6071      	str	r1, [r6, #4]
 8014664:	0052      	lsls	r2, r2, #1
 8014666:	e7a2      	b.n	80145ae <_dtoa_r+0x24e>
 8014668:	636f4361 	.word	0x636f4361
 801466c:	3fd287a7 	.word	0x3fd287a7
 8014670:	8b60c8b3 	.word	0x8b60c8b3
 8014674:	3fc68a28 	.word	0x3fc68a28
 8014678:	509f79fb 	.word	0x509f79fb
 801467c:	3fd34413 	.word	0x3fd34413
 8014680:	7ff00000 	.word	0x7ff00000
 8014684:	08016833 	.word	0x08016833
 8014688:	3ff80000 	.word	0x3ff80000
 801468c:	080168c8 	.word	0x080168c8
 8014690:	080168a0 	.word	0x080168a0
 8014694:	08016891 	.word	0x08016891
 8014698:	07f1      	lsls	r1, r6, #31
 801469a:	d508      	bpl.n	80146ae <_dtoa_r+0x34e>
 801469c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80146a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80146a4:	f7f3 fee0 	bl	8008468 <__aeabi_dmul>
 80146a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80146ac:	3501      	adds	r5, #1
 80146ae:	1076      	asrs	r6, r6, #1
 80146b0:	3708      	adds	r7, #8
 80146b2:	2e00      	cmp	r6, #0
 80146b4:	d1f0      	bne.n	8014698 <_dtoa_r+0x338>
 80146b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80146ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146be:	f7f3 fffd 	bl	80086bc <__aeabi_ddiv>
 80146c2:	e9cd 0100 	strd	r0, r1, [sp]
 80146c6:	e01a      	b.n	80146fe <_dtoa_r+0x39e>
 80146c8:	2502      	movs	r5, #2
 80146ca:	e7a3      	b.n	8014614 <_dtoa_r+0x2b4>
 80146cc:	f000 80a0 	beq.w	8014810 <_dtoa_r+0x4b0>
 80146d0:	f1ca 0600 	rsb	r6, sl, #0
 80146d4:	4b9f      	ldr	r3, [pc, #636]	; (8014954 <_dtoa_r+0x5f4>)
 80146d6:	4fa0      	ldr	r7, [pc, #640]	; (8014958 <_dtoa_r+0x5f8>)
 80146d8:	f006 020f 	and.w	r2, r6, #15
 80146dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80146e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80146e8:	f7f3 febe 	bl	8008468 <__aeabi_dmul>
 80146ec:	e9cd 0100 	strd	r0, r1, [sp]
 80146f0:	1136      	asrs	r6, r6, #4
 80146f2:	2300      	movs	r3, #0
 80146f4:	2502      	movs	r5, #2
 80146f6:	2e00      	cmp	r6, #0
 80146f8:	d17f      	bne.n	80147fa <_dtoa_r+0x49a>
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d1e1      	bne.n	80146c2 <_dtoa_r+0x362>
 80146fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014700:	2b00      	cmp	r3, #0
 8014702:	f000 8087 	beq.w	8014814 <_dtoa_r+0x4b4>
 8014706:	e9dd 6700 	ldrd	r6, r7, [sp]
 801470a:	2200      	movs	r2, #0
 801470c:	4b93      	ldr	r3, [pc, #588]	; (801495c <_dtoa_r+0x5fc>)
 801470e:	4630      	mov	r0, r6
 8014710:	4639      	mov	r1, r7
 8014712:	f7f4 f91b 	bl	800894c <__aeabi_dcmplt>
 8014716:	2800      	cmp	r0, #0
 8014718:	d07c      	beq.n	8014814 <_dtoa_r+0x4b4>
 801471a:	f1b9 0f00 	cmp.w	r9, #0
 801471e:	d079      	beq.n	8014814 <_dtoa_r+0x4b4>
 8014720:	9b02      	ldr	r3, [sp, #8]
 8014722:	2b00      	cmp	r3, #0
 8014724:	dd35      	ble.n	8014792 <_dtoa_r+0x432>
 8014726:	f10a 33ff 	add.w	r3, sl, #4294967295
 801472a:	9308      	str	r3, [sp, #32]
 801472c:	4639      	mov	r1, r7
 801472e:	2200      	movs	r2, #0
 8014730:	4b8b      	ldr	r3, [pc, #556]	; (8014960 <_dtoa_r+0x600>)
 8014732:	4630      	mov	r0, r6
 8014734:	f7f3 fe98 	bl	8008468 <__aeabi_dmul>
 8014738:	e9cd 0100 	strd	r0, r1, [sp]
 801473c:	9f02      	ldr	r7, [sp, #8]
 801473e:	3501      	adds	r5, #1
 8014740:	4628      	mov	r0, r5
 8014742:	f7f3 fe27 	bl	8008394 <__aeabi_i2d>
 8014746:	e9dd 2300 	ldrd	r2, r3, [sp]
 801474a:	f7f3 fe8d 	bl	8008468 <__aeabi_dmul>
 801474e:	2200      	movs	r2, #0
 8014750:	4b84      	ldr	r3, [pc, #528]	; (8014964 <_dtoa_r+0x604>)
 8014752:	f7f3 fcd3 	bl	80080fc <__adddf3>
 8014756:	4605      	mov	r5, r0
 8014758:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801475c:	2f00      	cmp	r7, #0
 801475e:	d15d      	bne.n	801481c <_dtoa_r+0x4bc>
 8014760:	2200      	movs	r2, #0
 8014762:	4b81      	ldr	r3, [pc, #516]	; (8014968 <_dtoa_r+0x608>)
 8014764:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014768:	f7f3 fcc6 	bl	80080f8 <__aeabi_dsub>
 801476c:	462a      	mov	r2, r5
 801476e:	4633      	mov	r3, r6
 8014770:	e9cd 0100 	strd	r0, r1, [sp]
 8014774:	f7f4 f908 	bl	8008988 <__aeabi_dcmpgt>
 8014778:	2800      	cmp	r0, #0
 801477a:	f040 8288 	bne.w	8014c8e <_dtoa_r+0x92e>
 801477e:	462a      	mov	r2, r5
 8014780:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014784:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014788:	f7f4 f8e0 	bl	800894c <__aeabi_dcmplt>
 801478c:	2800      	cmp	r0, #0
 801478e:	f040 827c 	bne.w	8014c8a <_dtoa_r+0x92a>
 8014792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014796:	e9cd 2300 	strd	r2, r3, [sp]
 801479a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801479c:	2b00      	cmp	r3, #0
 801479e:	f2c0 8150 	blt.w	8014a42 <_dtoa_r+0x6e2>
 80147a2:	f1ba 0f0e 	cmp.w	sl, #14
 80147a6:	f300 814c 	bgt.w	8014a42 <_dtoa_r+0x6e2>
 80147aa:	4b6a      	ldr	r3, [pc, #424]	; (8014954 <_dtoa_r+0x5f4>)
 80147ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80147b0:	ed93 7b00 	vldr	d7, [r3]
 80147b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80147bc:	f280 80d8 	bge.w	8014970 <_dtoa_r+0x610>
 80147c0:	f1b9 0f00 	cmp.w	r9, #0
 80147c4:	f300 80d4 	bgt.w	8014970 <_dtoa_r+0x610>
 80147c8:	f040 825e 	bne.w	8014c88 <_dtoa_r+0x928>
 80147cc:	2200      	movs	r2, #0
 80147ce:	4b66      	ldr	r3, [pc, #408]	; (8014968 <_dtoa_r+0x608>)
 80147d0:	ec51 0b17 	vmov	r0, r1, d7
 80147d4:	f7f3 fe48 	bl	8008468 <__aeabi_dmul>
 80147d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147dc:	f7f4 f8ca 	bl	8008974 <__aeabi_dcmpge>
 80147e0:	464f      	mov	r7, r9
 80147e2:	464e      	mov	r6, r9
 80147e4:	2800      	cmp	r0, #0
 80147e6:	f040 8234 	bne.w	8014c52 <_dtoa_r+0x8f2>
 80147ea:	2331      	movs	r3, #49	; 0x31
 80147ec:	f10b 0501 	add.w	r5, fp, #1
 80147f0:	f88b 3000 	strb.w	r3, [fp]
 80147f4:	f10a 0a01 	add.w	sl, sl, #1
 80147f8:	e22f      	b.n	8014c5a <_dtoa_r+0x8fa>
 80147fa:	07f2      	lsls	r2, r6, #31
 80147fc:	d505      	bpl.n	801480a <_dtoa_r+0x4aa>
 80147fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014802:	f7f3 fe31 	bl	8008468 <__aeabi_dmul>
 8014806:	3501      	adds	r5, #1
 8014808:	2301      	movs	r3, #1
 801480a:	1076      	asrs	r6, r6, #1
 801480c:	3708      	adds	r7, #8
 801480e:	e772      	b.n	80146f6 <_dtoa_r+0x396>
 8014810:	2502      	movs	r5, #2
 8014812:	e774      	b.n	80146fe <_dtoa_r+0x39e>
 8014814:	f8cd a020 	str.w	sl, [sp, #32]
 8014818:	464f      	mov	r7, r9
 801481a:	e791      	b.n	8014740 <_dtoa_r+0x3e0>
 801481c:	4b4d      	ldr	r3, [pc, #308]	; (8014954 <_dtoa_r+0x5f4>)
 801481e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014822:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014828:	2b00      	cmp	r3, #0
 801482a:	d047      	beq.n	80148bc <_dtoa_r+0x55c>
 801482c:	4602      	mov	r2, r0
 801482e:	460b      	mov	r3, r1
 8014830:	2000      	movs	r0, #0
 8014832:	494e      	ldr	r1, [pc, #312]	; (801496c <_dtoa_r+0x60c>)
 8014834:	f7f3 ff42 	bl	80086bc <__aeabi_ddiv>
 8014838:	462a      	mov	r2, r5
 801483a:	4633      	mov	r3, r6
 801483c:	f7f3 fc5c 	bl	80080f8 <__aeabi_dsub>
 8014840:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014844:	465d      	mov	r5, fp
 8014846:	e9dd 0100 	ldrd	r0, r1, [sp]
 801484a:	f7f4 f8bd 	bl	80089c8 <__aeabi_d2iz>
 801484e:	4606      	mov	r6, r0
 8014850:	f7f3 fda0 	bl	8008394 <__aeabi_i2d>
 8014854:	4602      	mov	r2, r0
 8014856:	460b      	mov	r3, r1
 8014858:	e9dd 0100 	ldrd	r0, r1, [sp]
 801485c:	f7f3 fc4c 	bl	80080f8 <__aeabi_dsub>
 8014860:	3630      	adds	r6, #48	; 0x30
 8014862:	f805 6b01 	strb.w	r6, [r5], #1
 8014866:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801486a:	e9cd 0100 	strd	r0, r1, [sp]
 801486e:	f7f4 f86d 	bl	800894c <__aeabi_dcmplt>
 8014872:	2800      	cmp	r0, #0
 8014874:	d163      	bne.n	801493e <_dtoa_r+0x5de>
 8014876:	e9dd 2300 	ldrd	r2, r3, [sp]
 801487a:	2000      	movs	r0, #0
 801487c:	4937      	ldr	r1, [pc, #220]	; (801495c <_dtoa_r+0x5fc>)
 801487e:	f7f3 fc3b 	bl	80080f8 <__aeabi_dsub>
 8014882:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014886:	f7f4 f861 	bl	800894c <__aeabi_dcmplt>
 801488a:	2800      	cmp	r0, #0
 801488c:	f040 80b7 	bne.w	80149fe <_dtoa_r+0x69e>
 8014890:	eba5 030b 	sub.w	r3, r5, fp
 8014894:	429f      	cmp	r7, r3
 8014896:	f77f af7c 	ble.w	8014792 <_dtoa_r+0x432>
 801489a:	2200      	movs	r2, #0
 801489c:	4b30      	ldr	r3, [pc, #192]	; (8014960 <_dtoa_r+0x600>)
 801489e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80148a2:	f7f3 fde1 	bl	8008468 <__aeabi_dmul>
 80148a6:	2200      	movs	r2, #0
 80148a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80148ac:	4b2c      	ldr	r3, [pc, #176]	; (8014960 <_dtoa_r+0x600>)
 80148ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148b2:	f7f3 fdd9 	bl	8008468 <__aeabi_dmul>
 80148b6:	e9cd 0100 	strd	r0, r1, [sp]
 80148ba:	e7c4      	b.n	8014846 <_dtoa_r+0x4e6>
 80148bc:	462a      	mov	r2, r5
 80148be:	4633      	mov	r3, r6
 80148c0:	f7f3 fdd2 	bl	8008468 <__aeabi_dmul>
 80148c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80148c8:	eb0b 0507 	add.w	r5, fp, r7
 80148cc:	465e      	mov	r6, fp
 80148ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148d2:	f7f4 f879 	bl	80089c8 <__aeabi_d2iz>
 80148d6:	4607      	mov	r7, r0
 80148d8:	f7f3 fd5c 	bl	8008394 <__aeabi_i2d>
 80148dc:	3730      	adds	r7, #48	; 0x30
 80148de:	4602      	mov	r2, r0
 80148e0:	460b      	mov	r3, r1
 80148e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148e6:	f7f3 fc07 	bl	80080f8 <__aeabi_dsub>
 80148ea:	f806 7b01 	strb.w	r7, [r6], #1
 80148ee:	42ae      	cmp	r6, r5
 80148f0:	e9cd 0100 	strd	r0, r1, [sp]
 80148f4:	f04f 0200 	mov.w	r2, #0
 80148f8:	d126      	bne.n	8014948 <_dtoa_r+0x5e8>
 80148fa:	4b1c      	ldr	r3, [pc, #112]	; (801496c <_dtoa_r+0x60c>)
 80148fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014900:	f7f3 fbfc 	bl	80080fc <__adddf3>
 8014904:	4602      	mov	r2, r0
 8014906:	460b      	mov	r3, r1
 8014908:	e9dd 0100 	ldrd	r0, r1, [sp]
 801490c:	f7f4 f83c 	bl	8008988 <__aeabi_dcmpgt>
 8014910:	2800      	cmp	r0, #0
 8014912:	d174      	bne.n	80149fe <_dtoa_r+0x69e>
 8014914:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014918:	2000      	movs	r0, #0
 801491a:	4914      	ldr	r1, [pc, #80]	; (801496c <_dtoa_r+0x60c>)
 801491c:	f7f3 fbec 	bl	80080f8 <__aeabi_dsub>
 8014920:	4602      	mov	r2, r0
 8014922:	460b      	mov	r3, r1
 8014924:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014928:	f7f4 f810 	bl	800894c <__aeabi_dcmplt>
 801492c:	2800      	cmp	r0, #0
 801492e:	f43f af30 	beq.w	8014792 <_dtoa_r+0x432>
 8014932:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014936:	2b30      	cmp	r3, #48	; 0x30
 8014938:	f105 32ff 	add.w	r2, r5, #4294967295
 801493c:	d002      	beq.n	8014944 <_dtoa_r+0x5e4>
 801493e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014942:	e04a      	b.n	80149da <_dtoa_r+0x67a>
 8014944:	4615      	mov	r5, r2
 8014946:	e7f4      	b.n	8014932 <_dtoa_r+0x5d2>
 8014948:	4b05      	ldr	r3, [pc, #20]	; (8014960 <_dtoa_r+0x600>)
 801494a:	f7f3 fd8d 	bl	8008468 <__aeabi_dmul>
 801494e:	e9cd 0100 	strd	r0, r1, [sp]
 8014952:	e7bc      	b.n	80148ce <_dtoa_r+0x56e>
 8014954:	080168c8 	.word	0x080168c8
 8014958:	080168a0 	.word	0x080168a0
 801495c:	3ff00000 	.word	0x3ff00000
 8014960:	40240000 	.word	0x40240000
 8014964:	401c0000 	.word	0x401c0000
 8014968:	40140000 	.word	0x40140000
 801496c:	3fe00000 	.word	0x3fe00000
 8014970:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014974:	465d      	mov	r5, fp
 8014976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801497a:	4630      	mov	r0, r6
 801497c:	4639      	mov	r1, r7
 801497e:	f7f3 fe9d 	bl	80086bc <__aeabi_ddiv>
 8014982:	f7f4 f821 	bl	80089c8 <__aeabi_d2iz>
 8014986:	4680      	mov	r8, r0
 8014988:	f7f3 fd04 	bl	8008394 <__aeabi_i2d>
 801498c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014990:	f7f3 fd6a 	bl	8008468 <__aeabi_dmul>
 8014994:	4602      	mov	r2, r0
 8014996:	460b      	mov	r3, r1
 8014998:	4630      	mov	r0, r6
 801499a:	4639      	mov	r1, r7
 801499c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80149a0:	f7f3 fbaa 	bl	80080f8 <__aeabi_dsub>
 80149a4:	f805 6b01 	strb.w	r6, [r5], #1
 80149a8:	eba5 060b 	sub.w	r6, r5, fp
 80149ac:	45b1      	cmp	r9, r6
 80149ae:	4602      	mov	r2, r0
 80149b0:	460b      	mov	r3, r1
 80149b2:	d139      	bne.n	8014a28 <_dtoa_r+0x6c8>
 80149b4:	f7f3 fba2 	bl	80080fc <__adddf3>
 80149b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80149bc:	4606      	mov	r6, r0
 80149be:	460f      	mov	r7, r1
 80149c0:	f7f3 ffe2 	bl	8008988 <__aeabi_dcmpgt>
 80149c4:	b9c8      	cbnz	r0, 80149fa <_dtoa_r+0x69a>
 80149c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80149ca:	4630      	mov	r0, r6
 80149cc:	4639      	mov	r1, r7
 80149ce:	f7f3 ffb3 	bl	8008938 <__aeabi_dcmpeq>
 80149d2:	b110      	cbz	r0, 80149da <_dtoa_r+0x67a>
 80149d4:	f018 0f01 	tst.w	r8, #1
 80149d8:	d10f      	bne.n	80149fa <_dtoa_r+0x69a>
 80149da:	9904      	ldr	r1, [sp, #16]
 80149dc:	4620      	mov	r0, r4
 80149de:	f000 fe5c 	bl	801569a <_Bfree>
 80149e2:	2300      	movs	r3, #0
 80149e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80149e6:	702b      	strb	r3, [r5, #0]
 80149e8:	f10a 0301 	add.w	r3, sl, #1
 80149ec:	6013      	str	r3, [r2, #0]
 80149ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	f000 8241 	beq.w	8014e78 <_dtoa_r+0xb18>
 80149f6:	601d      	str	r5, [r3, #0]
 80149f8:	e23e      	b.n	8014e78 <_dtoa_r+0xb18>
 80149fa:	f8cd a020 	str.w	sl, [sp, #32]
 80149fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014a02:	2a39      	cmp	r2, #57	; 0x39
 8014a04:	f105 33ff 	add.w	r3, r5, #4294967295
 8014a08:	d108      	bne.n	8014a1c <_dtoa_r+0x6bc>
 8014a0a:	459b      	cmp	fp, r3
 8014a0c:	d10a      	bne.n	8014a24 <_dtoa_r+0x6c4>
 8014a0e:	9b08      	ldr	r3, [sp, #32]
 8014a10:	3301      	adds	r3, #1
 8014a12:	9308      	str	r3, [sp, #32]
 8014a14:	2330      	movs	r3, #48	; 0x30
 8014a16:	f88b 3000 	strb.w	r3, [fp]
 8014a1a:	465b      	mov	r3, fp
 8014a1c:	781a      	ldrb	r2, [r3, #0]
 8014a1e:	3201      	adds	r2, #1
 8014a20:	701a      	strb	r2, [r3, #0]
 8014a22:	e78c      	b.n	801493e <_dtoa_r+0x5de>
 8014a24:	461d      	mov	r5, r3
 8014a26:	e7ea      	b.n	80149fe <_dtoa_r+0x69e>
 8014a28:	2200      	movs	r2, #0
 8014a2a:	4b9b      	ldr	r3, [pc, #620]	; (8014c98 <_dtoa_r+0x938>)
 8014a2c:	f7f3 fd1c 	bl	8008468 <__aeabi_dmul>
 8014a30:	2200      	movs	r2, #0
 8014a32:	2300      	movs	r3, #0
 8014a34:	4606      	mov	r6, r0
 8014a36:	460f      	mov	r7, r1
 8014a38:	f7f3 ff7e 	bl	8008938 <__aeabi_dcmpeq>
 8014a3c:	2800      	cmp	r0, #0
 8014a3e:	d09a      	beq.n	8014976 <_dtoa_r+0x616>
 8014a40:	e7cb      	b.n	80149da <_dtoa_r+0x67a>
 8014a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a44:	2a00      	cmp	r2, #0
 8014a46:	f000 808b 	beq.w	8014b60 <_dtoa_r+0x800>
 8014a4a:	9a06      	ldr	r2, [sp, #24]
 8014a4c:	2a01      	cmp	r2, #1
 8014a4e:	dc6e      	bgt.n	8014b2e <_dtoa_r+0x7ce>
 8014a50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014a52:	2a00      	cmp	r2, #0
 8014a54:	d067      	beq.n	8014b26 <_dtoa_r+0x7c6>
 8014a56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014a5a:	9f07      	ldr	r7, [sp, #28]
 8014a5c:	9d05      	ldr	r5, [sp, #20]
 8014a5e:	9a05      	ldr	r2, [sp, #20]
 8014a60:	2101      	movs	r1, #1
 8014a62:	441a      	add	r2, r3
 8014a64:	4620      	mov	r0, r4
 8014a66:	9205      	str	r2, [sp, #20]
 8014a68:	4498      	add	r8, r3
 8014a6a:	f000 fef4 	bl	8015856 <__i2b>
 8014a6e:	4606      	mov	r6, r0
 8014a70:	2d00      	cmp	r5, #0
 8014a72:	dd0c      	ble.n	8014a8e <_dtoa_r+0x72e>
 8014a74:	f1b8 0f00 	cmp.w	r8, #0
 8014a78:	dd09      	ble.n	8014a8e <_dtoa_r+0x72e>
 8014a7a:	4545      	cmp	r5, r8
 8014a7c:	9a05      	ldr	r2, [sp, #20]
 8014a7e:	462b      	mov	r3, r5
 8014a80:	bfa8      	it	ge
 8014a82:	4643      	movge	r3, r8
 8014a84:	1ad2      	subs	r2, r2, r3
 8014a86:	9205      	str	r2, [sp, #20]
 8014a88:	1aed      	subs	r5, r5, r3
 8014a8a:	eba8 0803 	sub.w	r8, r8, r3
 8014a8e:	9b07      	ldr	r3, [sp, #28]
 8014a90:	b1eb      	cbz	r3, 8014ace <_dtoa_r+0x76e>
 8014a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d067      	beq.n	8014b68 <_dtoa_r+0x808>
 8014a98:	b18f      	cbz	r7, 8014abe <_dtoa_r+0x75e>
 8014a9a:	4631      	mov	r1, r6
 8014a9c:	463a      	mov	r2, r7
 8014a9e:	4620      	mov	r0, r4
 8014aa0:	f000 ff78 	bl	8015994 <__pow5mult>
 8014aa4:	9a04      	ldr	r2, [sp, #16]
 8014aa6:	4601      	mov	r1, r0
 8014aa8:	4606      	mov	r6, r0
 8014aaa:	4620      	mov	r0, r4
 8014aac:	f000 fedc 	bl	8015868 <__multiply>
 8014ab0:	9904      	ldr	r1, [sp, #16]
 8014ab2:	9008      	str	r0, [sp, #32]
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	f000 fdf0 	bl	801569a <_Bfree>
 8014aba:	9b08      	ldr	r3, [sp, #32]
 8014abc:	9304      	str	r3, [sp, #16]
 8014abe:	9b07      	ldr	r3, [sp, #28]
 8014ac0:	1bda      	subs	r2, r3, r7
 8014ac2:	d004      	beq.n	8014ace <_dtoa_r+0x76e>
 8014ac4:	9904      	ldr	r1, [sp, #16]
 8014ac6:	4620      	mov	r0, r4
 8014ac8:	f000 ff64 	bl	8015994 <__pow5mult>
 8014acc:	9004      	str	r0, [sp, #16]
 8014ace:	2101      	movs	r1, #1
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	f000 fec0 	bl	8015856 <__i2b>
 8014ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ad8:	4607      	mov	r7, r0
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	f000 81d0 	beq.w	8014e80 <_dtoa_r+0xb20>
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	4601      	mov	r1, r0
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	f000 ff55 	bl	8015994 <__pow5mult>
 8014aea:	9b06      	ldr	r3, [sp, #24]
 8014aec:	2b01      	cmp	r3, #1
 8014aee:	4607      	mov	r7, r0
 8014af0:	dc40      	bgt.n	8014b74 <_dtoa_r+0x814>
 8014af2:	9b00      	ldr	r3, [sp, #0]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d139      	bne.n	8014b6c <_dtoa_r+0x80c>
 8014af8:	9b01      	ldr	r3, [sp, #4]
 8014afa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d136      	bne.n	8014b70 <_dtoa_r+0x810>
 8014b02:	9b01      	ldr	r3, [sp, #4]
 8014b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b08:	0d1b      	lsrs	r3, r3, #20
 8014b0a:	051b      	lsls	r3, r3, #20
 8014b0c:	b12b      	cbz	r3, 8014b1a <_dtoa_r+0x7ba>
 8014b0e:	9b05      	ldr	r3, [sp, #20]
 8014b10:	3301      	adds	r3, #1
 8014b12:	9305      	str	r3, [sp, #20]
 8014b14:	f108 0801 	add.w	r8, r8, #1
 8014b18:	2301      	movs	r3, #1
 8014b1a:	9307      	str	r3, [sp, #28]
 8014b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d12a      	bne.n	8014b78 <_dtoa_r+0x818>
 8014b22:	2001      	movs	r0, #1
 8014b24:	e030      	b.n	8014b88 <_dtoa_r+0x828>
 8014b26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014b28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014b2c:	e795      	b.n	8014a5a <_dtoa_r+0x6fa>
 8014b2e:	9b07      	ldr	r3, [sp, #28]
 8014b30:	f109 37ff 	add.w	r7, r9, #4294967295
 8014b34:	42bb      	cmp	r3, r7
 8014b36:	bfbf      	itttt	lt
 8014b38:	9b07      	ldrlt	r3, [sp, #28]
 8014b3a:	9707      	strlt	r7, [sp, #28]
 8014b3c:	1afa      	sublt	r2, r7, r3
 8014b3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014b40:	bfbb      	ittet	lt
 8014b42:	189b      	addlt	r3, r3, r2
 8014b44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014b46:	1bdf      	subge	r7, r3, r7
 8014b48:	2700      	movlt	r7, #0
 8014b4a:	f1b9 0f00 	cmp.w	r9, #0
 8014b4e:	bfb5      	itete	lt
 8014b50:	9b05      	ldrlt	r3, [sp, #20]
 8014b52:	9d05      	ldrge	r5, [sp, #20]
 8014b54:	eba3 0509 	sublt.w	r5, r3, r9
 8014b58:	464b      	movge	r3, r9
 8014b5a:	bfb8      	it	lt
 8014b5c:	2300      	movlt	r3, #0
 8014b5e:	e77e      	b.n	8014a5e <_dtoa_r+0x6fe>
 8014b60:	9f07      	ldr	r7, [sp, #28]
 8014b62:	9d05      	ldr	r5, [sp, #20]
 8014b64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014b66:	e783      	b.n	8014a70 <_dtoa_r+0x710>
 8014b68:	9a07      	ldr	r2, [sp, #28]
 8014b6a:	e7ab      	b.n	8014ac4 <_dtoa_r+0x764>
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	e7d4      	b.n	8014b1a <_dtoa_r+0x7ba>
 8014b70:	9b00      	ldr	r3, [sp, #0]
 8014b72:	e7d2      	b.n	8014b1a <_dtoa_r+0x7ba>
 8014b74:	2300      	movs	r3, #0
 8014b76:	9307      	str	r3, [sp, #28]
 8014b78:	693b      	ldr	r3, [r7, #16]
 8014b7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014b7e:	6918      	ldr	r0, [r3, #16]
 8014b80:	f000 fe1b 	bl	80157ba <__hi0bits>
 8014b84:	f1c0 0020 	rsb	r0, r0, #32
 8014b88:	4440      	add	r0, r8
 8014b8a:	f010 001f 	ands.w	r0, r0, #31
 8014b8e:	d047      	beq.n	8014c20 <_dtoa_r+0x8c0>
 8014b90:	f1c0 0320 	rsb	r3, r0, #32
 8014b94:	2b04      	cmp	r3, #4
 8014b96:	dd3b      	ble.n	8014c10 <_dtoa_r+0x8b0>
 8014b98:	9b05      	ldr	r3, [sp, #20]
 8014b9a:	f1c0 001c 	rsb	r0, r0, #28
 8014b9e:	4403      	add	r3, r0
 8014ba0:	9305      	str	r3, [sp, #20]
 8014ba2:	4405      	add	r5, r0
 8014ba4:	4480      	add	r8, r0
 8014ba6:	9b05      	ldr	r3, [sp, #20]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	dd05      	ble.n	8014bb8 <_dtoa_r+0x858>
 8014bac:	461a      	mov	r2, r3
 8014bae:	9904      	ldr	r1, [sp, #16]
 8014bb0:	4620      	mov	r0, r4
 8014bb2:	f000 ff3d 	bl	8015a30 <__lshift>
 8014bb6:	9004      	str	r0, [sp, #16]
 8014bb8:	f1b8 0f00 	cmp.w	r8, #0
 8014bbc:	dd05      	ble.n	8014bca <_dtoa_r+0x86a>
 8014bbe:	4639      	mov	r1, r7
 8014bc0:	4642      	mov	r2, r8
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	f000 ff34 	bl	8015a30 <__lshift>
 8014bc8:	4607      	mov	r7, r0
 8014bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014bcc:	b353      	cbz	r3, 8014c24 <_dtoa_r+0x8c4>
 8014bce:	4639      	mov	r1, r7
 8014bd0:	9804      	ldr	r0, [sp, #16]
 8014bd2:	f000 ff81 	bl	8015ad8 <__mcmp>
 8014bd6:	2800      	cmp	r0, #0
 8014bd8:	da24      	bge.n	8014c24 <_dtoa_r+0x8c4>
 8014bda:	2300      	movs	r3, #0
 8014bdc:	220a      	movs	r2, #10
 8014bde:	9904      	ldr	r1, [sp, #16]
 8014be0:	4620      	mov	r0, r4
 8014be2:	f000 fd71 	bl	80156c8 <__multadd>
 8014be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014be8:	9004      	str	r0, [sp, #16]
 8014bea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	f000 814d 	beq.w	8014e8e <_dtoa_r+0xb2e>
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	4631      	mov	r1, r6
 8014bf8:	220a      	movs	r2, #10
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f000 fd64 	bl	80156c8 <__multadd>
 8014c00:	9b02      	ldr	r3, [sp, #8]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	4606      	mov	r6, r0
 8014c06:	dc4f      	bgt.n	8014ca8 <_dtoa_r+0x948>
 8014c08:	9b06      	ldr	r3, [sp, #24]
 8014c0a:	2b02      	cmp	r3, #2
 8014c0c:	dd4c      	ble.n	8014ca8 <_dtoa_r+0x948>
 8014c0e:	e011      	b.n	8014c34 <_dtoa_r+0x8d4>
 8014c10:	d0c9      	beq.n	8014ba6 <_dtoa_r+0x846>
 8014c12:	9a05      	ldr	r2, [sp, #20]
 8014c14:	331c      	adds	r3, #28
 8014c16:	441a      	add	r2, r3
 8014c18:	9205      	str	r2, [sp, #20]
 8014c1a:	441d      	add	r5, r3
 8014c1c:	4498      	add	r8, r3
 8014c1e:	e7c2      	b.n	8014ba6 <_dtoa_r+0x846>
 8014c20:	4603      	mov	r3, r0
 8014c22:	e7f6      	b.n	8014c12 <_dtoa_r+0x8b2>
 8014c24:	f1b9 0f00 	cmp.w	r9, #0
 8014c28:	dc38      	bgt.n	8014c9c <_dtoa_r+0x93c>
 8014c2a:	9b06      	ldr	r3, [sp, #24]
 8014c2c:	2b02      	cmp	r3, #2
 8014c2e:	dd35      	ble.n	8014c9c <_dtoa_r+0x93c>
 8014c30:	f8cd 9008 	str.w	r9, [sp, #8]
 8014c34:	9b02      	ldr	r3, [sp, #8]
 8014c36:	b963      	cbnz	r3, 8014c52 <_dtoa_r+0x8f2>
 8014c38:	4639      	mov	r1, r7
 8014c3a:	2205      	movs	r2, #5
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	f000 fd43 	bl	80156c8 <__multadd>
 8014c42:	4601      	mov	r1, r0
 8014c44:	4607      	mov	r7, r0
 8014c46:	9804      	ldr	r0, [sp, #16]
 8014c48:	f000 ff46 	bl	8015ad8 <__mcmp>
 8014c4c:	2800      	cmp	r0, #0
 8014c4e:	f73f adcc 	bgt.w	80147ea <_dtoa_r+0x48a>
 8014c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c54:	465d      	mov	r5, fp
 8014c56:	ea6f 0a03 	mvn.w	sl, r3
 8014c5a:	f04f 0900 	mov.w	r9, #0
 8014c5e:	4639      	mov	r1, r7
 8014c60:	4620      	mov	r0, r4
 8014c62:	f000 fd1a 	bl	801569a <_Bfree>
 8014c66:	2e00      	cmp	r6, #0
 8014c68:	f43f aeb7 	beq.w	80149da <_dtoa_r+0x67a>
 8014c6c:	f1b9 0f00 	cmp.w	r9, #0
 8014c70:	d005      	beq.n	8014c7e <_dtoa_r+0x91e>
 8014c72:	45b1      	cmp	r9, r6
 8014c74:	d003      	beq.n	8014c7e <_dtoa_r+0x91e>
 8014c76:	4649      	mov	r1, r9
 8014c78:	4620      	mov	r0, r4
 8014c7a:	f000 fd0e 	bl	801569a <_Bfree>
 8014c7e:	4631      	mov	r1, r6
 8014c80:	4620      	mov	r0, r4
 8014c82:	f000 fd0a 	bl	801569a <_Bfree>
 8014c86:	e6a8      	b.n	80149da <_dtoa_r+0x67a>
 8014c88:	2700      	movs	r7, #0
 8014c8a:	463e      	mov	r6, r7
 8014c8c:	e7e1      	b.n	8014c52 <_dtoa_r+0x8f2>
 8014c8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014c92:	463e      	mov	r6, r7
 8014c94:	e5a9      	b.n	80147ea <_dtoa_r+0x48a>
 8014c96:	bf00      	nop
 8014c98:	40240000 	.word	0x40240000
 8014c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	f000 80fa 	beq.w	8014e9c <_dtoa_r+0xb3c>
 8014ca8:	2d00      	cmp	r5, #0
 8014caa:	dd05      	ble.n	8014cb8 <_dtoa_r+0x958>
 8014cac:	4631      	mov	r1, r6
 8014cae:	462a      	mov	r2, r5
 8014cb0:	4620      	mov	r0, r4
 8014cb2:	f000 febd 	bl	8015a30 <__lshift>
 8014cb6:	4606      	mov	r6, r0
 8014cb8:	9b07      	ldr	r3, [sp, #28]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d04c      	beq.n	8014d58 <_dtoa_r+0x9f8>
 8014cbe:	6871      	ldr	r1, [r6, #4]
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	f000 fcb6 	bl	8015632 <_Balloc>
 8014cc6:	6932      	ldr	r2, [r6, #16]
 8014cc8:	3202      	adds	r2, #2
 8014cca:	4605      	mov	r5, r0
 8014ccc:	0092      	lsls	r2, r2, #2
 8014cce:	f106 010c 	add.w	r1, r6, #12
 8014cd2:	300c      	adds	r0, #12
 8014cd4:	f7fc fae6 	bl	80112a4 <memcpy>
 8014cd8:	2201      	movs	r2, #1
 8014cda:	4629      	mov	r1, r5
 8014cdc:	4620      	mov	r0, r4
 8014cde:	f000 fea7 	bl	8015a30 <__lshift>
 8014ce2:	9b00      	ldr	r3, [sp, #0]
 8014ce4:	f8cd b014 	str.w	fp, [sp, #20]
 8014ce8:	f003 0301 	and.w	r3, r3, #1
 8014cec:	46b1      	mov	r9, r6
 8014cee:	9307      	str	r3, [sp, #28]
 8014cf0:	4606      	mov	r6, r0
 8014cf2:	4639      	mov	r1, r7
 8014cf4:	9804      	ldr	r0, [sp, #16]
 8014cf6:	f7ff faa7 	bl	8014248 <quorem>
 8014cfa:	4649      	mov	r1, r9
 8014cfc:	4605      	mov	r5, r0
 8014cfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014d02:	9804      	ldr	r0, [sp, #16]
 8014d04:	f000 fee8 	bl	8015ad8 <__mcmp>
 8014d08:	4632      	mov	r2, r6
 8014d0a:	9000      	str	r0, [sp, #0]
 8014d0c:	4639      	mov	r1, r7
 8014d0e:	4620      	mov	r0, r4
 8014d10:	f000 fefc 	bl	8015b0c <__mdiff>
 8014d14:	68c3      	ldr	r3, [r0, #12]
 8014d16:	4602      	mov	r2, r0
 8014d18:	bb03      	cbnz	r3, 8014d5c <_dtoa_r+0x9fc>
 8014d1a:	4601      	mov	r1, r0
 8014d1c:	9008      	str	r0, [sp, #32]
 8014d1e:	9804      	ldr	r0, [sp, #16]
 8014d20:	f000 feda 	bl	8015ad8 <__mcmp>
 8014d24:	9a08      	ldr	r2, [sp, #32]
 8014d26:	4603      	mov	r3, r0
 8014d28:	4611      	mov	r1, r2
 8014d2a:	4620      	mov	r0, r4
 8014d2c:	9308      	str	r3, [sp, #32]
 8014d2e:	f000 fcb4 	bl	801569a <_Bfree>
 8014d32:	9b08      	ldr	r3, [sp, #32]
 8014d34:	b9a3      	cbnz	r3, 8014d60 <_dtoa_r+0xa00>
 8014d36:	9a06      	ldr	r2, [sp, #24]
 8014d38:	b992      	cbnz	r2, 8014d60 <_dtoa_r+0xa00>
 8014d3a:	9a07      	ldr	r2, [sp, #28]
 8014d3c:	b982      	cbnz	r2, 8014d60 <_dtoa_r+0xa00>
 8014d3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014d42:	d029      	beq.n	8014d98 <_dtoa_r+0xa38>
 8014d44:	9b00      	ldr	r3, [sp, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	dd01      	ble.n	8014d4e <_dtoa_r+0x9ee>
 8014d4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014d4e:	9b05      	ldr	r3, [sp, #20]
 8014d50:	1c5d      	adds	r5, r3, #1
 8014d52:	f883 8000 	strb.w	r8, [r3]
 8014d56:	e782      	b.n	8014c5e <_dtoa_r+0x8fe>
 8014d58:	4630      	mov	r0, r6
 8014d5a:	e7c2      	b.n	8014ce2 <_dtoa_r+0x982>
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	e7e3      	b.n	8014d28 <_dtoa_r+0x9c8>
 8014d60:	9a00      	ldr	r2, [sp, #0]
 8014d62:	2a00      	cmp	r2, #0
 8014d64:	db04      	blt.n	8014d70 <_dtoa_r+0xa10>
 8014d66:	d125      	bne.n	8014db4 <_dtoa_r+0xa54>
 8014d68:	9a06      	ldr	r2, [sp, #24]
 8014d6a:	bb1a      	cbnz	r2, 8014db4 <_dtoa_r+0xa54>
 8014d6c:	9a07      	ldr	r2, [sp, #28]
 8014d6e:	bb0a      	cbnz	r2, 8014db4 <_dtoa_r+0xa54>
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	ddec      	ble.n	8014d4e <_dtoa_r+0x9ee>
 8014d74:	2201      	movs	r2, #1
 8014d76:	9904      	ldr	r1, [sp, #16]
 8014d78:	4620      	mov	r0, r4
 8014d7a:	f000 fe59 	bl	8015a30 <__lshift>
 8014d7e:	4639      	mov	r1, r7
 8014d80:	9004      	str	r0, [sp, #16]
 8014d82:	f000 fea9 	bl	8015ad8 <__mcmp>
 8014d86:	2800      	cmp	r0, #0
 8014d88:	dc03      	bgt.n	8014d92 <_dtoa_r+0xa32>
 8014d8a:	d1e0      	bne.n	8014d4e <_dtoa_r+0x9ee>
 8014d8c:	f018 0f01 	tst.w	r8, #1
 8014d90:	d0dd      	beq.n	8014d4e <_dtoa_r+0x9ee>
 8014d92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014d96:	d1d8      	bne.n	8014d4a <_dtoa_r+0x9ea>
 8014d98:	9b05      	ldr	r3, [sp, #20]
 8014d9a:	9a05      	ldr	r2, [sp, #20]
 8014d9c:	1c5d      	adds	r5, r3, #1
 8014d9e:	2339      	movs	r3, #57	; 0x39
 8014da0:	7013      	strb	r3, [r2, #0]
 8014da2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014da6:	2b39      	cmp	r3, #57	; 0x39
 8014da8:	f105 32ff 	add.w	r2, r5, #4294967295
 8014dac:	d04f      	beq.n	8014e4e <_dtoa_r+0xaee>
 8014dae:	3301      	adds	r3, #1
 8014db0:	7013      	strb	r3, [r2, #0]
 8014db2:	e754      	b.n	8014c5e <_dtoa_r+0x8fe>
 8014db4:	9a05      	ldr	r2, [sp, #20]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	f102 0501 	add.w	r5, r2, #1
 8014dbc:	dd06      	ble.n	8014dcc <_dtoa_r+0xa6c>
 8014dbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014dc2:	d0e9      	beq.n	8014d98 <_dtoa_r+0xa38>
 8014dc4:	f108 0801 	add.w	r8, r8, #1
 8014dc8:	9b05      	ldr	r3, [sp, #20]
 8014dca:	e7c2      	b.n	8014d52 <_dtoa_r+0x9f2>
 8014dcc:	9a02      	ldr	r2, [sp, #8]
 8014dce:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014dd2:	eba5 030b 	sub.w	r3, r5, fp
 8014dd6:	4293      	cmp	r3, r2
 8014dd8:	d021      	beq.n	8014e1e <_dtoa_r+0xabe>
 8014dda:	2300      	movs	r3, #0
 8014ddc:	220a      	movs	r2, #10
 8014dde:	9904      	ldr	r1, [sp, #16]
 8014de0:	4620      	mov	r0, r4
 8014de2:	f000 fc71 	bl	80156c8 <__multadd>
 8014de6:	45b1      	cmp	r9, r6
 8014de8:	9004      	str	r0, [sp, #16]
 8014dea:	f04f 0300 	mov.w	r3, #0
 8014dee:	f04f 020a 	mov.w	r2, #10
 8014df2:	4649      	mov	r1, r9
 8014df4:	4620      	mov	r0, r4
 8014df6:	d105      	bne.n	8014e04 <_dtoa_r+0xaa4>
 8014df8:	f000 fc66 	bl	80156c8 <__multadd>
 8014dfc:	4681      	mov	r9, r0
 8014dfe:	4606      	mov	r6, r0
 8014e00:	9505      	str	r5, [sp, #20]
 8014e02:	e776      	b.n	8014cf2 <_dtoa_r+0x992>
 8014e04:	f000 fc60 	bl	80156c8 <__multadd>
 8014e08:	4631      	mov	r1, r6
 8014e0a:	4681      	mov	r9, r0
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	220a      	movs	r2, #10
 8014e10:	4620      	mov	r0, r4
 8014e12:	f000 fc59 	bl	80156c8 <__multadd>
 8014e16:	4606      	mov	r6, r0
 8014e18:	e7f2      	b.n	8014e00 <_dtoa_r+0xaa0>
 8014e1a:	f04f 0900 	mov.w	r9, #0
 8014e1e:	2201      	movs	r2, #1
 8014e20:	9904      	ldr	r1, [sp, #16]
 8014e22:	4620      	mov	r0, r4
 8014e24:	f000 fe04 	bl	8015a30 <__lshift>
 8014e28:	4639      	mov	r1, r7
 8014e2a:	9004      	str	r0, [sp, #16]
 8014e2c:	f000 fe54 	bl	8015ad8 <__mcmp>
 8014e30:	2800      	cmp	r0, #0
 8014e32:	dcb6      	bgt.n	8014da2 <_dtoa_r+0xa42>
 8014e34:	d102      	bne.n	8014e3c <_dtoa_r+0xadc>
 8014e36:	f018 0f01 	tst.w	r8, #1
 8014e3a:	d1b2      	bne.n	8014da2 <_dtoa_r+0xa42>
 8014e3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014e40:	2b30      	cmp	r3, #48	; 0x30
 8014e42:	f105 32ff 	add.w	r2, r5, #4294967295
 8014e46:	f47f af0a 	bne.w	8014c5e <_dtoa_r+0x8fe>
 8014e4a:	4615      	mov	r5, r2
 8014e4c:	e7f6      	b.n	8014e3c <_dtoa_r+0xadc>
 8014e4e:	4593      	cmp	fp, r2
 8014e50:	d105      	bne.n	8014e5e <_dtoa_r+0xafe>
 8014e52:	2331      	movs	r3, #49	; 0x31
 8014e54:	f10a 0a01 	add.w	sl, sl, #1
 8014e58:	f88b 3000 	strb.w	r3, [fp]
 8014e5c:	e6ff      	b.n	8014c5e <_dtoa_r+0x8fe>
 8014e5e:	4615      	mov	r5, r2
 8014e60:	e79f      	b.n	8014da2 <_dtoa_r+0xa42>
 8014e62:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014ec8 <_dtoa_r+0xb68>
 8014e66:	e007      	b.n	8014e78 <_dtoa_r+0xb18>
 8014e68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014ecc <_dtoa_r+0xb6c>
 8014e6e:	b11b      	cbz	r3, 8014e78 <_dtoa_r+0xb18>
 8014e70:	f10b 0308 	add.w	r3, fp, #8
 8014e74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014e76:	6013      	str	r3, [r2, #0]
 8014e78:	4658      	mov	r0, fp
 8014e7a:	b017      	add	sp, #92	; 0x5c
 8014e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e80:	9b06      	ldr	r3, [sp, #24]
 8014e82:	2b01      	cmp	r3, #1
 8014e84:	f77f ae35 	ble.w	8014af2 <_dtoa_r+0x792>
 8014e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e8a:	9307      	str	r3, [sp, #28]
 8014e8c:	e649      	b.n	8014b22 <_dtoa_r+0x7c2>
 8014e8e:	9b02      	ldr	r3, [sp, #8]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	dc03      	bgt.n	8014e9c <_dtoa_r+0xb3c>
 8014e94:	9b06      	ldr	r3, [sp, #24]
 8014e96:	2b02      	cmp	r3, #2
 8014e98:	f73f aecc 	bgt.w	8014c34 <_dtoa_r+0x8d4>
 8014e9c:	465d      	mov	r5, fp
 8014e9e:	4639      	mov	r1, r7
 8014ea0:	9804      	ldr	r0, [sp, #16]
 8014ea2:	f7ff f9d1 	bl	8014248 <quorem>
 8014ea6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014eaa:	f805 8b01 	strb.w	r8, [r5], #1
 8014eae:	9a02      	ldr	r2, [sp, #8]
 8014eb0:	eba5 030b 	sub.w	r3, r5, fp
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	ddb0      	ble.n	8014e1a <_dtoa_r+0xaba>
 8014eb8:	2300      	movs	r3, #0
 8014eba:	220a      	movs	r2, #10
 8014ebc:	9904      	ldr	r1, [sp, #16]
 8014ebe:	4620      	mov	r0, r4
 8014ec0:	f000 fc02 	bl	80156c8 <__multadd>
 8014ec4:	9004      	str	r0, [sp, #16]
 8014ec6:	e7ea      	b.n	8014e9e <_dtoa_r+0xb3e>
 8014ec8:	08016832 	.word	0x08016832
 8014ecc:	08016888 	.word	0x08016888

08014ed0 <_fstat_r>:
 8014ed0:	b538      	push	{r3, r4, r5, lr}
 8014ed2:	4c07      	ldr	r4, [pc, #28]	; (8014ef0 <_fstat_r+0x20>)
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	4605      	mov	r5, r0
 8014ed8:	4608      	mov	r0, r1
 8014eda:	4611      	mov	r1, r2
 8014edc:	6023      	str	r3, [r4, #0]
 8014ede:	f7f8 f93f 	bl	800d160 <_fstat>
 8014ee2:	1c43      	adds	r3, r0, #1
 8014ee4:	d102      	bne.n	8014eec <_fstat_r+0x1c>
 8014ee6:	6823      	ldr	r3, [r4, #0]
 8014ee8:	b103      	cbz	r3, 8014eec <_fstat_r+0x1c>
 8014eea:	602b      	str	r3, [r5, #0]
 8014eec:	bd38      	pop	{r3, r4, r5, pc}
 8014eee:	bf00      	nop
 8014ef0:	2000a74c 	.word	0x2000a74c

08014ef4 <rshift>:
 8014ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ef6:	6906      	ldr	r6, [r0, #16]
 8014ef8:	114b      	asrs	r3, r1, #5
 8014efa:	429e      	cmp	r6, r3
 8014efc:	f100 0414 	add.w	r4, r0, #20
 8014f00:	dd30      	ble.n	8014f64 <rshift+0x70>
 8014f02:	f011 011f 	ands.w	r1, r1, #31
 8014f06:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8014f0a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8014f0e:	d108      	bne.n	8014f22 <rshift+0x2e>
 8014f10:	4621      	mov	r1, r4
 8014f12:	42b2      	cmp	r2, r6
 8014f14:	460b      	mov	r3, r1
 8014f16:	d211      	bcs.n	8014f3c <rshift+0x48>
 8014f18:	f852 3b04 	ldr.w	r3, [r2], #4
 8014f1c:	f841 3b04 	str.w	r3, [r1], #4
 8014f20:	e7f7      	b.n	8014f12 <rshift+0x1e>
 8014f22:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014f26:	f1c1 0c20 	rsb	ip, r1, #32
 8014f2a:	40cd      	lsrs	r5, r1
 8014f2c:	3204      	adds	r2, #4
 8014f2e:	4623      	mov	r3, r4
 8014f30:	42b2      	cmp	r2, r6
 8014f32:	4617      	mov	r7, r2
 8014f34:	d30c      	bcc.n	8014f50 <rshift+0x5c>
 8014f36:	601d      	str	r5, [r3, #0]
 8014f38:	b105      	cbz	r5, 8014f3c <rshift+0x48>
 8014f3a:	3304      	adds	r3, #4
 8014f3c:	1b1a      	subs	r2, r3, r4
 8014f3e:	42a3      	cmp	r3, r4
 8014f40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014f44:	bf08      	it	eq
 8014f46:	2300      	moveq	r3, #0
 8014f48:	6102      	str	r2, [r0, #16]
 8014f4a:	bf08      	it	eq
 8014f4c:	6143      	streq	r3, [r0, #20]
 8014f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f50:	683f      	ldr	r7, [r7, #0]
 8014f52:	fa07 f70c 	lsl.w	r7, r7, ip
 8014f56:	433d      	orrs	r5, r7
 8014f58:	f843 5b04 	str.w	r5, [r3], #4
 8014f5c:	f852 5b04 	ldr.w	r5, [r2], #4
 8014f60:	40cd      	lsrs	r5, r1
 8014f62:	e7e5      	b.n	8014f30 <rshift+0x3c>
 8014f64:	4623      	mov	r3, r4
 8014f66:	e7e9      	b.n	8014f3c <rshift+0x48>

08014f68 <__hexdig_fun>:
 8014f68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014f6c:	2b09      	cmp	r3, #9
 8014f6e:	d802      	bhi.n	8014f76 <__hexdig_fun+0xe>
 8014f70:	3820      	subs	r0, #32
 8014f72:	b2c0      	uxtb	r0, r0
 8014f74:	4770      	bx	lr
 8014f76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014f7a:	2b05      	cmp	r3, #5
 8014f7c:	d801      	bhi.n	8014f82 <__hexdig_fun+0x1a>
 8014f7e:	3847      	subs	r0, #71	; 0x47
 8014f80:	e7f7      	b.n	8014f72 <__hexdig_fun+0xa>
 8014f82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014f86:	2b05      	cmp	r3, #5
 8014f88:	d801      	bhi.n	8014f8e <__hexdig_fun+0x26>
 8014f8a:	3827      	subs	r0, #39	; 0x27
 8014f8c:	e7f1      	b.n	8014f72 <__hexdig_fun+0xa>
 8014f8e:	2000      	movs	r0, #0
 8014f90:	4770      	bx	lr

08014f92 <__gethex>:
 8014f92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f96:	b08b      	sub	sp, #44	; 0x2c
 8014f98:	468a      	mov	sl, r1
 8014f9a:	9002      	str	r0, [sp, #8]
 8014f9c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014f9e:	9306      	str	r3, [sp, #24]
 8014fa0:	4690      	mov	r8, r2
 8014fa2:	f000 faef 	bl	8015584 <__localeconv_l>
 8014fa6:	6803      	ldr	r3, [r0, #0]
 8014fa8:	9303      	str	r3, [sp, #12]
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7f3 f848 	bl	8008040 <strlen>
 8014fb0:	9b03      	ldr	r3, [sp, #12]
 8014fb2:	9001      	str	r0, [sp, #4]
 8014fb4:	4403      	add	r3, r0
 8014fb6:	f04f 0b00 	mov.w	fp, #0
 8014fba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014fbe:	9307      	str	r3, [sp, #28]
 8014fc0:	f8da 3000 	ldr.w	r3, [sl]
 8014fc4:	3302      	adds	r3, #2
 8014fc6:	461f      	mov	r7, r3
 8014fc8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014fcc:	2830      	cmp	r0, #48	; 0x30
 8014fce:	d06c      	beq.n	80150aa <__gethex+0x118>
 8014fd0:	f7ff ffca 	bl	8014f68 <__hexdig_fun>
 8014fd4:	4604      	mov	r4, r0
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	d16a      	bne.n	80150b0 <__gethex+0x11e>
 8014fda:	9a01      	ldr	r2, [sp, #4]
 8014fdc:	9903      	ldr	r1, [sp, #12]
 8014fde:	4638      	mov	r0, r7
 8014fe0:	f001 f8f4 	bl	80161cc <strncmp>
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	d166      	bne.n	80150b6 <__gethex+0x124>
 8014fe8:	9b01      	ldr	r3, [sp, #4]
 8014fea:	5cf8      	ldrb	r0, [r7, r3]
 8014fec:	18fe      	adds	r6, r7, r3
 8014fee:	f7ff ffbb 	bl	8014f68 <__hexdig_fun>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	d062      	beq.n	80150bc <__gethex+0x12a>
 8014ff6:	4633      	mov	r3, r6
 8014ff8:	7818      	ldrb	r0, [r3, #0]
 8014ffa:	2830      	cmp	r0, #48	; 0x30
 8014ffc:	461f      	mov	r7, r3
 8014ffe:	f103 0301 	add.w	r3, r3, #1
 8015002:	d0f9      	beq.n	8014ff8 <__gethex+0x66>
 8015004:	f7ff ffb0 	bl	8014f68 <__hexdig_fun>
 8015008:	fab0 f580 	clz	r5, r0
 801500c:	096d      	lsrs	r5, r5, #5
 801500e:	4634      	mov	r4, r6
 8015010:	f04f 0b01 	mov.w	fp, #1
 8015014:	463a      	mov	r2, r7
 8015016:	4616      	mov	r6, r2
 8015018:	3201      	adds	r2, #1
 801501a:	7830      	ldrb	r0, [r6, #0]
 801501c:	f7ff ffa4 	bl	8014f68 <__hexdig_fun>
 8015020:	2800      	cmp	r0, #0
 8015022:	d1f8      	bne.n	8015016 <__gethex+0x84>
 8015024:	9a01      	ldr	r2, [sp, #4]
 8015026:	9903      	ldr	r1, [sp, #12]
 8015028:	4630      	mov	r0, r6
 801502a:	f001 f8cf 	bl	80161cc <strncmp>
 801502e:	b950      	cbnz	r0, 8015046 <__gethex+0xb4>
 8015030:	b954      	cbnz	r4, 8015048 <__gethex+0xb6>
 8015032:	9b01      	ldr	r3, [sp, #4]
 8015034:	18f4      	adds	r4, r6, r3
 8015036:	4622      	mov	r2, r4
 8015038:	4616      	mov	r6, r2
 801503a:	3201      	adds	r2, #1
 801503c:	7830      	ldrb	r0, [r6, #0]
 801503e:	f7ff ff93 	bl	8014f68 <__hexdig_fun>
 8015042:	2800      	cmp	r0, #0
 8015044:	d1f8      	bne.n	8015038 <__gethex+0xa6>
 8015046:	b10c      	cbz	r4, 801504c <__gethex+0xba>
 8015048:	1ba4      	subs	r4, r4, r6
 801504a:	00a4      	lsls	r4, r4, #2
 801504c:	7833      	ldrb	r3, [r6, #0]
 801504e:	2b50      	cmp	r3, #80	; 0x50
 8015050:	d001      	beq.n	8015056 <__gethex+0xc4>
 8015052:	2b70      	cmp	r3, #112	; 0x70
 8015054:	d140      	bne.n	80150d8 <__gethex+0x146>
 8015056:	7873      	ldrb	r3, [r6, #1]
 8015058:	2b2b      	cmp	r3, #43	; 0x2b
 801505a:	d031      	beq.n	80150c0 <__gethex+0x12e>
 801505c:	2b2d      	cmp	r3, #45	; 0x2d
 801505e:	d033      	beq.n	80150c8 <__gethex+0x136>
 8015060:	1c71      	adds	r1, r6, #1
 8015062:	f04f 0900 	mov.w	r9, #0
 8015066:	7808      	ldrb	r0, [r1, #0]
 8015068:	f7ff ff7e 	bl	8014f68 <__hexdig_fun>
 801506c:	1e43      	subs	r3, r0, #1
 801506e:	b2db      	uxtb	r3, r3
 8015070:	2b18      	cmp	r3, #24
 8015072:	d831      	bhi.n	80150d8 <__gethex+0x146>
 8015074:	f1a0 0210 	sub.w	r2, r0, #16
 8015078:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801507c:	f7ff ff74 	bl	8014f68 <__hexdig_fun>
 8015080:	1e43      	subs	r3, r0, #1
 8015082:	b2db      	uxtb	r3, r3
 8015084:	2b18      	cmp	r3, #24
 8015086:	d922      	bls.n	80150ce <__gethex+0x13c>
 8015088:	f1b9 0f00 	cmp.w	r9, #0
 801508c:	d000      	beq.n	8015090 <__gethex+0xfe>
 801508e:	4252      	negs	r2, r2
 8015090:	4414      	add	r4, r2
 8015092:	f8ca 1000 	str.w	r1, [sl]
 8015096:	b30d      	cbz	r5, 80150dc <__gethex+0x14a>
 8015098:	f1bb 0f00 	cmp.w	fp, #0
 801509c:	bf0c      	ite	eq
 801509e:	2706      	moveq	r7, #6
 80150a0:	2700      	movne	r7, #0
 80150a2:	4638      	mov	r0, r7
 80150a4:	b00b      	add	sp, #44	; 0x2c
 80150a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150aa:	f10b 0b01 	add.w	fp, fp, #1
 80150ae:	e78a      	b.n	8014fc6 <__gethex+0x34>
 80150b0:	2500      	movs	r5, #0
 80150b2:	462c      	mov	r4, r5
 80150b4:	e7ae      	b.n	8015014 <__gethex+0x82>
 80150b6:	463e      	mov	r6, r7
 80150b8:	2501      	movs	r5, #1
 80150ba:	e7c7      	b.n	801504c <__gethex+0xba>
 80150bc:	4604      	mov	r4, r0
 80150be:	e7fb      	b.n	80150b8 <__gethex+0x126>
 80150c0:	f04f 0900 	mov.w	r9, #0
 80150c4:	1cb1      	adds	r1, r6, #2
 80150c6:	e7ce      	b.n	8015066 <__gethex+0xd4>
 80150c8:	f04f 0901 	mov.w	r9, #1
 80150cc:	e7fa      	b.n	80150c4 <__gethex+0x132>
 80150ce:	230a      	movs	r3, #10
 80150d0:	fb03 0202 	mla	r2, r3, r2, r0
 80150d4:	3a10      	subs	r2, #16
 80150d6:	e7cf      	b.n	8015078 <__gethex+0xe6>
 80150d8:	4631      	mov	r1, r6
 80150da:	e7da      	b.n	8015092 <__gethex+0x100>
 80150dc:	1bf3      	subs	r3, r6, r7
 80150de:	3b01      	subs	r3, #1
 80150e0:	4629      	mov	r1, r5
 80150e2:	2b07      	cmp	r3, #7
 80150e4:	dc49      	bgt.n	801517a <__gethex+0x1e8>
 80150e6:	9802      	ldr	r0, [sp, #8]
 80150e8:	f000 faa3 	bl	8015632 <_Balloc>
 80150ec:	9b01      	ldr	r3, [sp, #4]
 80150ee:	f100 0914 	add.w	r9, r0, #20
 80150f2:	f04f 0b00 	mov.w	fp, #0
 80150f6:	f1c3 0301 	rsb	r3, r3, #1
 80150fa:	4605      	mov	r5, r0
 80150fc:	f8cd 9010 	str.w	r9, [sp, #16]
 8015100:	46da      	mov	sl, fp
 8015102:	9308      	str	r3, [sp, #32]
 8015104:	42b7      	cmp	r7, r6
 8015106:	d33b      	bcc.n	8015180 <__gethex+0x1ee>
 8015108:	9804      	ldr	r0, [sp, #16]
 801510a:	f840 ab04 	str.w	sl, [r0], #4
 801510e:	eba0 0009 	sub.w	r0, r0, r9
 8015112:	1080      	asrs	r0, r0, #2
 8015114:	6128      	str	r0, [r5, #16]
 8015116:	0147      	lsls	r7, r0, #5
 8015118:	4650      	mov	r0, sl
 801511a:	f000 fb4e 	bl	80157ba <__hi0bits>
 801511e:	f8d8 6000 	ldr.w	r6, [r8]
 8015122:	1a3f      	subs	r7, r7, r0
 8015124:	42b7      	cmp	r7, r6
 8015126:	dd64      	ble.n	80151f2 <__gethex+0x260>
 8015128:	1bbf      	subs	r7, r7, r6
 801512a:	4639      	mov	r1, r7
 801512c:	4628      	mov	r0, r5
 801512e:	f000 fe5d 	bl	8015dec <__any_on>
 8015132:	4682      	mov	sl, r0
 8015134:	b178      	cbz	r0, 8015156 <__gethex+0x1c4>
 8015136:	1e7b      	subs	r3, r7, #1
 8015138:	1159      	asrs	r1, r3, #5
 801513a:	f003 021f 	and.w	r2, r3, #31
 801513e:	f04f 0a01 	mov.w	sl, #1
 8015142:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015146:	fa0a f202 	lsl.w	r2, sl, r2
 801514a:	420a      	tst	r2, r1
 801514c:	d003      	beq.n	8015156 <__gethex+0x1c4>
 801514e:	4553      	cmp	r3, sl
 8015150:	dc46      	bgt.n	80151e0 <__gethex+0x24e>
 8015152:	f04f 0a02 	mov.w	sl, #2
 8015156:	4639      	mov	r1, r7
 8015158:	4628      	mov	r0, r5
 801515a:	f7ff fecb 	bl	8014ef4 <rshift>
 801515e:	443c      	add	r4, r7
 8015160:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015164:	42a3      	cmp	r3, r4
 8015166:	da52      	bge.n	801520e <__gethex+0x27c>
 8015168:	4629      	mov	r1, r5
 801516a:	9802      	ldr	r0, [sp, #8]
 801516c:	f000 fa95 	bl	801569a <_Bfree>
 8015170:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015172:	2300      	movs	r3, #0
 8015174:	6013      	str	r3, [r2, #0]
 8015176:	27a3      	movs	r7, #163	; 0xa3
 8015178:	e793      	b.n	80150a2 <__gethex+0x110>
 801517a:	3101      	adds	r1, #1
 801517c:	105b      	asrs	r3, r3, #1
 801517e:	e7b0      	b.n	80150e2 <__gethex+0x150>
 8015180:	1e73      	subs	r3, r6, #1
 8015182:	9305      	str	r3, [sp, #20]
 8015184:	9a07      	ldr	r2, [sp, #28]
 8015186:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801518a:	4293      	cmp	r3, r2
 801518c:	d018      	beq.n	80151c0 <__gethex+0x22e>
 801518e:	f1bb 0f20 	cmp.w	fp, #32
 8015192:	d107      	bne.n	80151a4 <__gethex+0x212>
 8015194:	9b04      	ldr	r3, [sp, #16]
 8015196:	f8c3 a000 	str.w	sl, [r3]
 801519a:	3304      	adds	r3, #4
 801519c:	f04f 0a00 	mov.w	sl, #0
 80151a0:	9304      	str	r3, [sp, #16]
 80151a2:	46d3      	mov	fp, sl
 80151a4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80151a8:	f7ff fede 	bl	8014f68 <__hexdig_fun>
 80151ac:	f000 000f 	and.w	r0, r0, #15
 80151b0:	fa00 f00b 	lsl.w	r0, r0, fp
 80151b4:	ea4a 0a00 	orr.w	sl, sl, r0
 80151b8:	f10b 0b04 	add.w	fp, fp, #4
 80151bc:	9b05      	ldr	r3, [sp, #20]
 80151be:	e00d      	b.n	80151dc <__gethex+0x24a>
 80151c0:	9b05      	ldr	r3, [sp, #20]
 80151c2:	9a08      	ldr	r2, [sp, #32]
 80151c4:	4413      	add	r3, r2
 80151c6:	42bb      	cmp	r3, r7
 80151c8:	d3e1      	bcc.n	801518e <__gethex+0x1fc>
 80151ca:	4618      	mov	r0, r3
 80151cc:	9a01      	ldr	r2, [sp, #4]
 80151ce:	9903      	ldr	r1, [sp, #12]
 80151d0:	9309      	str	r3, [sp, #36]	; 0x24
 80151d2:	f000 fffb 	bl	80161cc <strncmp>
 80151d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151d8:	2800      	cmp	r0, #0
 80151da:	d1d8      	bne.n	801518e <__gethex+0x1fc>
 80151dc:	461e      	mov	r6, r3
 80151de:	e791      	b.n	8015104 <__gethex+0x172>
 80151e0:	1eb9      	subs	r1, r7, #2
 80151e2:	4628      	mov	r0, r5
 80151e4:	f000 fe02 	bl	8015dec <__any_on>
 80151e8:	2800      	cmp	r0, #0
 80151ea:	d0b2      	beq.n	8015152 <__gethex+0x1c0>
 80151ec:	f04f 0a03 	mov.w	sl, #3
 80151f0:	e7b1      	b.n	8015156 <__gethex+0x1c4>
 80151f2:	da09      	bge.n	8015208 <__gethex+0x276>
 80151f4:	1bf7      	subs	r7, r6, r7
 80151f6:	4629      	mov	r1, r5
 80151f8:	463a      	mov	r2, r7
 80151fa:	9802      	ldr	r0, [sp, #8]
 80151fc:	f000 fc18 	bl	8015a30 <__lshift>
 8015200:	1be4      	subs	r4, r4, r7
 8015202:	4605      	mov	r5, r0
 8015204:	f100 0914 	add.w	r9, r0, #20
 8015208:	f04f 0a00 	mov.w	sl, #0
 801520c:	e7a8      	b.n	8015160 <__gethex+0x1ce>
 801520e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015212:	42a0      	cmp	r0, r4
 8015214:	dd6a      	ble.n	80152ec <__gethex+0x35a>
 8015216:	1b04      	subs	r4, r0, r4
 8015218:	42a6      	cmp	r6, r4
 801521a:	dc2e      	bgt.n	801527a <__gethex+0x2e8>
 801521c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015220:	2b02      	cmp	r3, #2
 8015222:	d022      	beq.n	801526a <__gethex+0x2d8>
 8015224:	2b03      	cmp	r3, #3
 8015226:	d024      	beq.n	8015272 <__gethex+0x2e0>
 8015228:	2b01      	cmp	r3, #1
 801522a:	d115      	bne.n	8015258 <__gethex+0x2c6>
 801522c:	42a6      	cmp	r6, r4
 801522e:	d113      	bne.n	8015258 <__gethex+0x2c6>
 8015230:	2e01      	cmp	r6, #1
 8015232:	dc0b      	bgt.n	801524c <__gethex+0x2ba>
 8015234:	9a06      	ldr	r2, [sp, #24]
 8015236:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801523a:	6013      	str	r3, [r2, #0]
 801523c:	2301      	movs	r3, #1
 801523e:	612b      	str	r3, [r5, #16]
 8015240:	f8c9 3000 	str.w	r3, [r9]
 8015244:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015246:	2762      	movs	r7, #98	; 0x62
 8015248:	601d      	str	r5, [r3, #0]
 801524a:	e72a      	b.n	80150a2 <__gethex+0x110>
 801524c:	1e71      	subs	r1, r6, #1
 801524e:	4628      	mov	r0, r5
 8015250:	f000 fdcc 	bl	8015dec <__any_on>
 8015254:	2800      	cmp	r0, #0
 8015256:	d1ed      	bne.n	8015234 <__gethex+0x2a2>
 8015258:	4629      	mov	r1, r5
 801525a:	9802      	ldr	r0, [sp, #8]
 801525c:	f000 fa1d 	bl	801569a <_Bfree>
 8015260:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015262:	2300      	movs	r3, #0
 8015264:	6013      	str	r3, [r2, #0]
 8015266:	2750      	movs	r7, #80	; 0x50
 8015268:	e71b      	b.n	80150a2 <__gethex+0x110>
 801526a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801526c:	2b00      	cmp	r3, #0
 801526e:	d0e1      	beq.n	8015234 <__gethex+0x2a2>
 8015270:	e7f2      	b.n	8015258 <__gethex+0x2c6>
 8015272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015274:	2b00      	cmp	r3, #0
 8015276:	d1dd      	bne.n	8015234 <__gethex+0x2a2>
 8015278:	e7ee      	b.n	8015258 <__gethex+0x2c6>
 801527a:	1e67      	subs	r7, r4, #1
 801527c:	f1ba 0f00 	cmp.w	sl, #0
 8015280:	d131      	bne.n	80152e6 <__gethex+0x354>
 8015282:	b127      	cbz	r7, 801528e <__gethex+0x2fc>
 8015284:	4639      	mov	r1, r7
 8015286:	4628      	mov	r0, r5
 8015288:	f000 fdb0 	bl	8015dec <__any_on>
 801528c:	4682      	mov	sl, r0
 801528e:	117a      	asrs	r2, r7, #5
 8015290:	2301      	movs	r3, #1
 8015292:	f007 071f 	and.w	r7, r7, #31
 8015296:	fa03 f707 	lsl.w	r7, r3, r7
 801529a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801529e:	4621      	mov	r1, r4
 80152a0:	421f      	tst	r7, r3
 80152a2:	4628      	mov	r0, r5
 80152a4:	bf18      	it	ne
 80152a6:	f04a 0a02 	orrne.w	sl, sl, #2
 80152aa:	1b36      	subs	r6, r6, r4
 80152ac:	f7ff fe22 	bl	8014ef4 <rshift>
 80152b0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80152b4:	2702      	movs	r7, #2
 80152b6:	f1ba 0f00 	cmp.w	sl, #0
 80152ba:	d048      	beq.n	801534e <__gethex+0x3bc>
 80152bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80152c0:	2b02      	cmp	r3, #2
 80152c2:	d015      	beq.n	80152f0 <__gethex+0x35e>
 80152c4:	2b03      	cmp	r3, #3
 80152c6:	d017      	beq.n	80152f8 <__gethex+0x366>
 80152c8:	2b01      	cmp	r3, #1
 80152ca:	d109      	bne.n	80152e0 <__gethex+0x34e>
 80152cc:	f01a 0f02 	tst.w	sl, #2
 80152d0:	d006      	beq.n	80152e0 <__gethex+0x34e>
 80152d2:	f8d9 3000 	ldr.w	r3, [r9]
 80152d6:	ea4a 0a03 	orr.w	sl, sl, r3
 80152da:	f01a 0f01 	tst.w	sl, #1
 80152de:	d10e      	bne.n	80152fe <__gethex+0x36c>
 80152e0:	f047 0710 	orr.w	r7, r7, #16
 80152e4:	e033      	b.n	801534e <__gethex+0x3bc>
 80152e6:	f04f 0a01 	mov.w	sl, #1
 80152ea:	e7d0      	b.n	801528e <__gethex+0x2fc>
 80152ec:	2701      	movs	r7, #1
 80152ee:	e7e2      	b.n	80152b6 <__gethex+0x324>
 80152f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152f2:	f1c3 0301 	rsb	r3, r3, #1
 80152f6:	9315      	str	r3, [sp, #84]	; 0x54
 80152f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d0f0      	beq.n	80152e0 <__gethex+0x34e>
 80152fe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015302:	f105 0314 	add.w	r3, r5, #20
 8015306:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801530a:	eb03 010a 	add.w	r1, r3, sl
 801530e:	f04f 0c00 	mov.w	ip, #0
 8015312:	4618      	mov	r0, r3
 8015314:	f853 2b04 	ldr.w	r2, [r3], #4
 8015318:	f1b2 3fff 	cmp.w	r2, #4294967295
 801531c:	d01c      	beq.n	8015358 <__gethex+0x3c6>
 801531e:	3201      	adds	r2, #1
 8015320:	6002      	str	r2, [r0, #0]
 8015322:	2f02      	cmp	r7, #2
 8015324:	f105 0314 	add.w	r3, r5, #20
 8015328:	d138      	bne.n	801539c <__gethex+0x40a>
 801532a:	f8d8 2000 	ldr.w	r2, [r8]
 801532e:	3a01      	subs	r2, #1
 8015330:	42b2      	cmp	r2, r6
 8015332:	d10a      	bne.n	801534a <__gethex+0x3b8>
 8015334:	1171      	asrs	r1, r6, #5
 8015336:	2201      	movs	r2, #1
 8015338:	f006 061f 	and.w	r6, r6, #31
 801533c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015340:	fa02 f606 	lsl.w	r6, r2, r6
 8015344:	421e      	tst	r6, r3
 8015346:	bf18      	it	ne
 8015348:	4617      	movne	r7, r2
 801534a:	f047 0720 	orr.w	r7, r7, #32
 801534e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015350:	601d      	str	r5, [r3, #0]
 8015352:	9b06      	ldr	r3, [sp, #24]
 8015354:	601c      	str	r4, [r3, #0]
 8015356:	e6a4      	b.n	80150a2 <__gethex+0x110>
 8015358:	4299      	cmp	r1, r3
 801535a:	f843 cc04 	str.w	ip, [r3, #-4]
 801535e:	d8d8      	bhi.n	8015312 <__gethex+0x380>
 8015360:	68ab      	ldr	r3, [r5, #8]
 8015362:	4599      	cmp	r9, r3
 8015364:	db12      	blt.n	801538c <__gethex+0x3fa>
 8015366:	6869      	ldr	r1, [r5, #4]
 8015368:	9802      	ldr	r0, [sp, #8]
 801536a:	3101      	adds	r1, #1
 801536c:	f000 f961 	bl	8015632 <_Balloc>
 8015370:	692a      	ldr	r2, [r5, #16]
 8015372:	3202      	adds	r2, #2
 8015374:	f105 010c 	add.w	r1, r5, #12
 8015378:	4683      	mov	fp, r0
 801537a:	0092      	lsls	r2, r2, #2
 801537c:	300c      	adds	r0, #12
 801537e:	f7fb ff91 	bl	80112a4 <memcpy>
 8015382:	4629      	mov	r1, r5
 8015384:	9802      	ldr	r0, [sp, #8]
 8015386:	f000 f988 	bl	801569a <_Bfree>
 801538a:	465d      	mov	r5, fp
 801538c:	692b      	ldr	r3, [r5, #16]
 801538e:	1c5a      	adds	r2, r3, #1
 8015390:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015394:	612a      	str	r2, [r5, #16]
 8015396:	2201      	movs	r2, #1
 8015398:	615a      	str	r2, [r3, #20]
 801539a:	e7c2      	b.n	8015322 <__gethex+0x390>
 801539c:	692a      	ldr	r2, [r5, #16]
 801539e:	454a      	cmp	r2, r9
 80153a0:	dd0b      	ble.n	80153ba <__gethex+0x428>
 80153a2:	2101      	movs	r1, #1
 80153a4:	4628      	mov	r0, r5
 80153a6:	f7ff fda5 	bl	8014ef4 <rshift>
 80153aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153ae:	3401      	adds	r4, #1
 80153b0:	42a3      	cmp	r3, r4
 80153b2:	f6ff aed9 	blt.w	8015168 <__gethex+0x1d6>
 80153b6:	2701      	movs	r7, #1
 80153b8:	e7c7      	b.n	801534a <__gethex+0x3b8>
 80153ba:	f016 061f 	ands.w	r6, r6, #31
 80153be:	d0fa      	beq.n	80153b6 <__gethex+0x424>
 80153c0:	449a      	add	sl, r3
 80153c2:	f1c6 0620 	rsb	r6, r6, #32
 80153c6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80153ca:	f000 f9f6 	bl	80157ba <__hi0bits>
 80153ce:	42b0      	cmp	r0, r6
 80153d0:	dbe7      	blt.n	80153a2 <__gethex+0x410>
 80153d2:	e7f0      	b.n	80153b6 <__gethex+0x424>

080153d4 <L_shift>:
 80153d4:	f1c2 0208 	rsb	r2, r2, #8
 80153d8:	0092      	lsls	r2, r2, #2
 80153da:	b570      	push	{r4, r5, r6, lr}
 80153dc:	f1c2 0620 	rsb	r6, r2, #32
 80153e0:	6843      	ldr	r3, [r0, #4]
 80153e2:	6804      	ldr	r4, [r0, #0]
 80153e4:	fa03 f506 	lsl.w	r5, r3, r6
 80153e8:	432c      	orrs	r4, r5
 80153ea:	40d3      	lsrs	r3, r2
 80153ec:	6004      	str	r4, [r0, #0]
 80153ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80153f2:	4288      	cmp	r0, r1
 80153f4:	d3f4      	bcc.n	80153e0 <L_shift+0xc>
 80153f6:	bd70      	pop	{r4, r5, r6, pc}

080153f8 <__match>:
 80153f8:	b530      	push	{r4, r5, lr}
 80153fa:	6803      	ldr	r3, [r0, #0]
 80153fc:	3301      	adds	r3, #1
 80153fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015402:	b914      	cbnz	r4, 801540a <__match+0x12>
 8015404:	6003      	str	r3, [r0, #0]
 8015406:	2001      	movs	r0, #1
 8015408:	bd30      	pop	{r4, r5, pc}
 801540a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801540e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015412:	2d19      	cmp	r5, #25
 8015414:	bf98      	it	ls
 8015416:	3220      	addls	r2, #32
 8015418:	42a2      	cmp	r2, r4
 801541a:	d0f0      	beq.n	80153fe <__match+0x6>
 801541c:	2000      	movs	r0, #0
 801541e:	e7f3      	b.n	8015408 <__match+0x10>

08015420 <__hexnan>:
 8015420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015424:	680b      	ldr	r3, [r1, #0]
 8015426:	6801      	ldr	r1, [r0, #0]
 8015428:	115f      	asrs	r7, r3, #5
 801542a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801542e:	f013 031f 	ands.w	r3, r3, #31
 8015432:	b087      	sub	sp, #28
 8015434:	bf18      	it	ne
 8015436:	3704      	addne	r7, #4
 8015438:	2500      	movs	r5, #0
 801543a:	1f3e      	subs	r6, r7, #4
 801543c:	4682      	mov	sl, r0
 801543e:	4690      	mov	r8, r2
 8015440:	9301      	str	r3, [sp, #4]
 8015442:	f847 5c04 	str.w	r5, [r7, #-4]
 8015446:	46b1      	mov	r9, r6
 8015448:	4634      	mov	r4, r6
 801544a:	9502      	str	r5, [sp, #8]
 801544c:	46ab      	mov	fp, r5
 801544e:	784a      	ldrb	r2, [r1, #1]
 8015450:	1c4b      	adds	r3, r1, #1
 8015452:	9303      	str	r3, [sp, #12]
 8015454:	b342      	cbz	r2, 80154a8 <__hexnan+0x88>
 8015456:	4610      	mov	r0, r2
 8015458:	9105      	str	r1, [sp, #20]
 801545a:	9204      	str	r2, [sp, #16]
 801545c:	f7ff fd84 	bl	8014f68 <__hexdig_fun>
 8015460:	2800      	cmp	r0, #0
 8015462:	d143      	bne.n	80154ec <__hexnan+0xcc>
 8015464:	9a04      	ldr	r2, [sp, #16]
 8015466:	9905      	ldr	r1, [sp, #20]
 8015468:	2a20      	cmp	r2, #32
 801546a:	d818      	bhi.n	801549e <__hexnan+0x7e>
 801546c:	9b02      	ldr	r3, [sp, #8]
 801546e:	459b      	cmp	fp, r3
 8015470:	dd13      	ble.n	801549a <__hexnan+0x7a>
 8015472:	454c      	cmp	r4, r9
 8015474:	d206      	bcs.n	8015484 <__hexnan+0x64>
 8015476:	2d07      	cmp	r5, #7
 8015478:	dc04      	bgt.n	8015484 <__hexnan+0x64>
 801547a:	462a      	mov	r2, r5
 801547c:	4649      	mov	r1, r9
 801547e:	4620      	mov	r0, r4
 8015480:	f7ff ffa8 	bl	80153d4 <L_shift>
 8015484:	4544      	cmp	r4, r8
 8015486:	d944      	bls.n	8015512 <__hexnan+0xf2>
 8015488:	2300      	movs	r3, #0
 801548a:	f1a4 0904 	sub.w	r9, r4, #4
 801548e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015492:	f8cd b008 	str.w	fp, [sp, #8]
 8015496:	464c      	mov	r4, r9
 8015498:	461d      	mov	r5, r3
 801549a:	9903      	ldr	r1, [sp, #12]
 801549c:	e7d7      	b.n	801544e <__hexnan+0x2e>
 801549e:	2a29      	cmp	r2, #41	; 0x29
 80154a0:	d14a      	bne.n	8015538 <__hexnan+0x118>
 80154a2:	3102      	adds	r1, #2
 80154a4:	f8ca 1000 	str.w	r1, [sl]
 80154a8:	f1bb 0f00 	cmp.w	fp, #0
 80154ac:	d044      	beq.n	8015538 <__hexnan+0x118>
 80154ae:	454c      	cmp	r4, r9
 80154b0:	d206      	bcs.n	80154c0 <__hexnan+0xa0>
 80154b2:	2d07      	cmp	r5, #7
 80154b4:	dc04      	bgt.n	80154c0 <__hexnan+0xa0>
 80154b6:	462a      	mov	r2, r5
 80154b8:	4649      	mov	r1, r9
 80154ba:	4620      	mov	r0, r4
 80154bc:	f7ff ff8a 	bl	80153d4 <L_shift>
 80154c0:	4544      	cmp	r4, r8
 80154c2:	d928      	bls.n	8015516 <__hexnan+0xf6>
 80154c4:	4643      	mov	r3, r8
 80154c6:	f854 2b04 	ldr.w	r2, [r4], #4
 80154ca:	f843 2b04 	str.w	r2, [r3], #4
 80154ce:	42a6      	cmp	r6, r4
 80154d0:	d2f9      	bcs.n	80154c6 <__hexnan+0xa6>
 80154d2:	2200      	movs	r2, #0
 80154d4:	f843 2b04 	str.w	r2, [r3], #4
 80154d8:	429e      	cmp	r6, r3
 80154da:	d2fb      	bcs.n	80154d4 <__hexnan+0xb4>
 80154dc:	6833      	ldr	r3, [r6, #0]
 80154de:	b91b      	cbnz	r3, 80154e8 <__hexnan+0xc8>
 80154e0:	4546      	cmp	r6, r8
 80154e2:	d127      	bne.n	8015534 <__hexnan+0x114>
 80154e4:	2301      	movs	r3, #1
 80154e6:	6033      	str	r3, [r6, #0]
 80154e8:	2005      	movs	r0, #5
 80154ea:	e026      	b.n	801553a <__hexnan+0x11a>
 80154ec:	3501      	adds	r5, #1
 80154ee:	2d08      	cmp	r5, #8
 80154f0:	f10b 0b01 	add.w	fp, fp, #1
 80154f4:	dd06      	ble.n	8015504 <__hexnan+0xe4>
 80154f6:	4544      	cmp	r4, r8
 80154f8:	d9cf      	bls.n	801549a <__hexnan+0x7a>
 80154fa:	2300      	movs	r3, #0
 80154fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8015500:	2501      	movs	r5, #1
 8015502:	3c04      	subs	r4, #4
 8015504:	6822      	ldr	r2, [r4, #0]
 8015506:	f000 000f 	and.w	r0, r0, #15
 801550a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801550e:	6020      	str	r0, [r4, #0]
 8015510:	e7c3      	b.n	801549a <__hexnan+0x7a>
 8015512:	2508      	movs	r5, #8
 8015514:	e7c1      	b.n	801549a <__hexnan+0x7a>
 8015516:	9b01      	ldr	r3, [sp, #4]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d0df      	beq.n	80154dc <__hexnan+0xbc>
 801551c:	f04f 32ff 	mov.w	r2, #4294967295
 8015520:	f1c3 0320 	rsb	r3, r3, #32
 8015524:	fa22 f303 	lsr.w	r3, r2, r3
 8015528:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801552c:	401a      	ands	r2, r3
 801552e:	f847 2c04 	str.w	r2, [r7, #-4]
 8015532:	e7d3      	b.n	80154dc <__hexnan+0xbc>
 8015534:	3e04      	subs	r6, #4
 8015536:	e7d1      	b.n	80154dc <__hexnan+0xbc>
 8015538:	2004      	movs	r0, #4
 801553a:	b007      	add	sp, #28
 801553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015540 <_isatty_r>:
 8015540:	b538      	push	{r3, r4, r5, lr}
 8015542:	4c06      	ldr	r4, [pc, #24]	; (801555c <_isatty_r+0x1c>)
 8015544:	2300      	movs	r3, #0
 8015546:	4605      	mov	r5, r0
 8015548:	4608      	mov	r0, r1
 801554a:	6023      	str	r3, [r4, #0]
 801554c:	f7f7 fe0e 	bl	800d16c <_isatty>
 8015550:	1c43      	adds	r3, r0, #1
 8015552:	d102      	bne.n	801555a <_isatty_r+0x1a>
 8015554:	6823      	ldr	r3, [r4, #0]
 8015556:	b103      	cbz	r3, 801555a <_isatty_r+0x1a>
 8015558:	602b      	str	r3, [r5, #0]
 801555a:	bd38      	pop	{r3, r4, r5, pc}
 801555c:	2000a74c 	.word	0x2000a74c

08015560 <__locale_ctype_ptr_l>:
 8015560:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015564:	4770      	bx	lr
	...

08015568 <__locale_ctype_ptr>:
 8015568:	4b04      	ldr	r3, [pc, #16]	; (801557c <__locale_ctype_ptr+0x14>)
 801556a:	4a05      	ldr	r2, [pc, #20]	; (8015580 <__locale_ctype_ptr+0x18>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	6a1b      	ldr	r3, [r3, #32]
 8015570:	2b00      	cmp	r3, #0
 8015572:	bf08      	it	eq
 8015574:	4613      	moveq	r3, r2
 8015576:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801557a:	4770      	bx	lr
 801557c:	20000038 	.word	0x20000038
 8015580:	2000009c 	.word	0x2000009c

08015584 <__localeconv_l>:
 8015584:	30f0      	adds	r0, #240	; 0xf0
 8015586:	4770      	bx	lr

08015588 <_localeconv_r>:
 8015588:	4b04      	ldr	r3, [pc, #16]	; (801559c <_localeconv_r+0x14>)
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	6a18      	ldr	r0, [r3, #32]
 801558e:	4b04      	ldr	r3, [pc, #16]	; (80155a0 <_localeconv_r+0x18>)
 8015590:	2800      	cmp	r0, #0
 8015592:	bf08      	it	eq
 8015594:	4618      	moveq	r0, r3
 8015596:	30f0      	adds	r0, #240	; 0xf0
 8015598:	4770      	bx	lr
 801559a:	bf00      	nop
 801559c:	20000038 	.word	0x20000038
 80155a0:	2000009c 	.word	0x2000009c

080155a4 <_lseek_r>:
 80155a4:	b538      	push	{r3, r4, r5, lr}
 80155a6:	4c07      	ldr	r4, [pc, #28]	; (80155c4 <_lseek_r+0x20>)
 80155a8:	4605      	mov	r5, r0
 80155aa:	4608      	mov	r0, r1
 80155ac:	4611      	mov	r1, r2
 80155ae:	2200      	movs	r2, #0
 80155b0:	6022      	str	r2, [r4, #0]
 80155b2:	461a      	mov	r2, r3
 80155b4:	f7f7 fddc 	bl	800d170 <_lseek>
 80155b8:	1c43      	adds	r3, r0, #1
 80155ba:	d102      	bne.n	80155c2 <_lseek_r+0x1e>
 80155bc:	6823      	ldr	r3, [r4, #0]
 80155be:	b103      	cbz	r3, 80155c2 <_lseek_r+0x1e>
 80155c0:	602b      	str	r3, [r5, #0]
 80155c2:	bd38      	pop	{r3, r4, r5, pc}
 80155c4:	2000a74c 	.word	0x2000a74c

080155c8 <malloc>:
 80155c8:	4b02      	ldr	r3, [pc, #8]	; (80155d4 <malloc+0xc>)
 80155ca:	4601      	mov	r1, r0
 80155cc:	6818      	ldr	r0, [r3, #0]
 80155ce:	f7fb becb 	b.w	8011368 <_malloc_r>
 80155d2:	bf00      	nop
 80155d4:	20000038 	.word	0x20000038

080155d8 <__ascii_mbtowc>:
 80155d8:	b082      	sub	sp, #8
 80155da:	b901      	cbnz	r1, 80155de <__ascii_mbtowc+0x6>
 80155dc:	a901      	add	r1, sp, #4
 80155de:	b142      	cbz	r2, 80155f2 <__ascii_mbtowc+0x1a>
 80155e0:	b14b      	cbz	r3, 80155f6 <__ascii_mbtowc+0x1e>
 80155e2:	7813      	ldrb	r3, [r2, #0]
 80155e4:	600b      	str	r3, [r1, #0]
 80155e6:	7812      	ldrb	r2, [r2, #0]
 80155e8:	1c10      	adds	r0, r2, #0
 80155ea:	bf18      	it	ne
 80155ec:	2001      	movne	r0, #1
 80155ee:	b002      	add	sp, #8
 80155f0:	4770      	bx	lr
 80155f2:	4610      	mov	r0, r2
 80155f4:	e7fb      	b.n	80155ee <__ascii_mbtowc+0x16>
 80155f6:	f06f 0001 	mvn.w	r0, #1
 80155fa:	e7f8      	b.n	80155ee <__ascii_mbtowc+0x16>

080155fc <memmove>:
 80155fc:	4288      	cmp	r0, r1
 80155fe:	b510      	push	{r4, lr}
 8015600:	eb01 0302 	add.w	r3, r1, r2
 8015604:	d807      	bhi.n	8015616 <memmove+0x1a>
 8015606:	1e42      	subs	r2, r0, #1
 8015608:	4299      	cmp	r1, r3
 801560a:	d00a      	beq.n	8015622 <memmove+0x26>
 801560c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015610:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015614:	e7f8      	b.n	8015608 <memmove+0xc>
 8015616:	4283      	cmp	r3, r0
 8015618:	d9f5      	bls.n	8015606 <memmove+0xa>
 801561a:	1881      	adds	r1, r0, r2
 801561c:	1ad2      	subs	r2, r2, r3
 801561e:	42d3      	cmn	r3, r2
 8015620:	d100      	bne.n	8015624 <memmove+0x28>
 8015622:	bd10      	pop	{r4, pc}
 8015624:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015628:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801562c:	e7f7      	b.n	801561e <memmove+0x22>

0801562e <__malloc_lock>:
 801562e:	4770      	bx	lr

08015630 <__malloc_unlock>:
 8015630:	4770      	bx	lr

08015632 <_Balloc>:
 8015632:	b570      	push	{r4, r5, r6, lr}
 8015634:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015636:	4604      	mov	r4, r0
 8015638:	460e      	mov	r6, r1
 801563a:	b93d      	cbnz	r5, 801564c <_Balloc+0x1a>
 801563c:	2010      	movs	r0, #16
 801563e:	f7ff ffc3 	bl	80155c8 <malloc>
 8015642:	6260      	str	r0, [r4, #36]	; 0x24
 8015644:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015648:	6005      	str	r5, [r0, #0]
 801564a:	60c5      	str	r5, [r0, #12]
 801564c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801564e:	68eb      	ldr	r3, [r5, #12]
 8015650:	b183      	cbz	r3, 8015674 <_Balloc+0x42>
 8015652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015654:	68db      	ldr	r3, [r3, #12]
 8015656:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801565a:	b9b8      	cbnz	r0, 801568c <_Balloc+0x5a>
 801565c:	2101      	movs	r1, #1
 801565e:	fa01 f506 	lsl.w	r5, r1, r6
 8015662:	1d6a      	adds	r2, r5, #5
 8015664:	0092      	lsls	r2, r2, #2
 8015666:	4620      	mov	r0, r4
 8015668:	f000 fbe1 	bl	8015e2e <_calloc_r>
 801566c:	b160      	cbz	r0, 8015688 <_Balloc+0x56>
 801566e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015672:	e00e      	b.n	8015692 <_Balloc+0x60>
 8015674:	2221      	movs	r2, #33	; 0x21
 8015676:	2104      	movs	r1, #4
 8015678:	4620      	mov	r0, r4
 801567a:	f000 fbd8 	bl	8015e2e <_calloc_r>
 801567e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015680:	60e8      	str	r0, [r5, #12]
 8015682:	68db      	ldr	r3, [r3, #12]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d1e4      	bne.n	8015652 <_Balloc+0x20>
 8015688:	2000      	movs	r0, #0
 801568a:	bd70      	pop	{r4, r5, r6, pc}
 801568c:	6802      	ldr	r2, [r0, #0]
 801568e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015692:	2300      	movs	r3, #0
 8015694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015698:	e7f7      	b.n	801568a <_Balloc+0x58>

0801569a <_Bfree>:
 801569a:	b570      	push	{r4, r5, r6, lr}
 801569c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801569e:	4606      	mov	r6, r0
 80156a0:	460d      	mov	r5, r1
 80156a2:	b93c      	cbnz	r4, 80156b4 <_Bfree+0x1a>
 80156a4:	2010      	movs	r0, #16
 80156a6:	f7ff ff8f 	bl	80155c8 <malloc>
 80156aa:	6270      	str	r0, [r6, #36]	; 0x24
 80156ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80156b0:	6004      	str	r4, [r0, #0]
 80156b2:	60c4      	str	r4, [r0, #12]
 80156b4:	b13d      	cbz	r5, 80156c6 <_Bfree+0x2c>
 80156b6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80156b8:	686a      	ldr	r2, [r5, #4]
 80156ba:	68db      	ldr	r3, [r3, #12]
 80156bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80156c0:	6029      	str	r1, [r5, #0]
 80156c2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80156c6:	bd70      	pop	{r4, r5, r6, pc}

080156c8 <__multadd>:
 80156c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156cc:	690d      	ldr	r5, [r1, #16]
 80156ce:	461f      	mov	r7, r3
 80156d0:	4606      	mov	r6, r0
 80156d2:	460c      	mov	r4, r1
 80156d4:	f101 0c14 	add.w	ip, r1, #20
 80156d8:	2300      	movs	r3, #0
 80156da:	f8dc 0000 	ldr.w	r0, [ip]
 80156de:	b281      	uxth	r1, r0
 80156e0:	fb02 7101 	mla	r1, r2, r1, r7
 80156e4:	0c0f      	lsrs	r7, r1, #16
 80156e6:	0c00      	lsrs	r0, r0, #16
 80156e8:	fb02 7000 	mla	r0, r2, r0, r7
 80156ec:	b289      	uxth	r1, r1
 80156ee:	3301      	adds	r3, #1
 80156f0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80156f4:	429d      	cmp	r5, r3
 80156f6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80156fa:	f84c 1b04 	str.w	r1, [ip], #4
 80156fe:	dcec      	bgt.n	80156da <__multadd+0x12>
 8015700:	b1d7      	cbz	r7, 8015738 <__multadd+0x70>
 8015702:	68a3      	ldr	r3, [r4, #8]
 8015704:	42ab      	cmp	r3, r5
 8015706:	dc12      	bgt.n	801572e <__multadd+0x66>
 8015708:	6861      	ldr	r1, [r4, #4]
 801570a:	4630      	mov	r0, r6
 801570c:	3101      	adds	r1, #1
 801570e:	f7ff ff90 	bl	8015632 <_Balloc>
 8015712:	6922      	ldr	r2, [r4, #16]
 8015714:	3202      	adds	r2, #2
 8015716:	f104 010c 	add.w	r1, r4, #12
 801571a:	4680      	mov	r8, r0
 801571c:	0092      	lsls	r2, r2, #2
 801571e:	300c      	adds	r0, #12
 8015720:	f7fb fdc0 	bl	80112a4 <memcpy>
 8015724:	4621      	mov	r1, r4
 8015726:	4630      	mov	r0, r6
 8015728:	f7ff ffb7 	bl	801569a <_Bfree>
 801572c:	4644      	mov	r4, r8
 801572e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015732:	3501      	adds	r5, #1
 8015734:	615f      	str	r7, [r3, #20]
 8015736:	6125      	str	r5, [r4, #16]
 8015738:	4620      	mov	r0, r4
 801573a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801573e <__s2b>:
 801573e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015742:	460c      	mov	r4, r1
 8015744:	4615      	mov	r5, r2
 8015746:	461f      	mov	r7, r3
 8015748:	2209      	movs	r2, #9
 801574a:	3308      	adds	r3, #8
 801574c:	4606      	mov	r6, r0
 801574e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015752:	2100      	movs	r1, #0
 8015754:	2201      	movs	r2, #1
 8015756:	429a      	cmp	r2, r3
 8015758:	db20      	blt.n	801579c <__s2b+0x5e>
 801575a:	4630      	mov	r0, r6
 801575c:	f7ff ff69 	bl	8015632 <_Balloc>
 8015760:	9b08      	ldr	r3, [sp, #32]
 8015762:	6143      	str	r3, [r0, #20]
 8015764:	2d09      	cmp	r5, #9
 8015766:	f04f 0301 	mov.w	r3, #1
 801576a:	6103      	str	r3, [r0, #16]
 801576c:	dd19      	ble.n	80157a2 <__s2b+0x64>
 801576e:	f104 0809 	add.w	r8, r4, #9
 8015772:	46c1      	mov	r9, r8
 8015774:	442c      	add	r4, r5
 8015776:	f819 3b01 	ldrb.w	r3, [r9], #1
 801577a:	4601      	mov	r1, r0
 801577c:	3b30      	subs	r3, #48	; 0x30
 801577e:	220a      	movs	r2, #10
 8015780:	4630      	mov	r0, r6
 8015782:	f7ff ffa1 	bl	80156c8 <__multadd>
 8015786:	45a1      	cmp	r9, r4
 8015788:	d1f5      	bne.n	8015776 <__s2b+0x38>
 801578a:	eb08 0405 	add.w	r4, r8, r5
 801578e:	3c08      	subs	r4, #8
 8015790:	1b2d      	subs	r5, r5, r4
 8015792:	1963      	adds	r3, r4, r5
 8015794:	42bb      	cmp	r3, r7
 8015796:	db07      	blt.n	80157a8 <__s2b+0x6a>
 8015798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801579c:	0052      	lsls	r2, r2, #1
 801579e:	3101      	adds	r1, #1
 80157a0:	e7d9      	b.n	8015756 <__s2b+0x18>
 80157a2:	340a      	adds	r4, #10
 80157a4:	2509      	movs	r5, #9
 80157a6:	e7f3      	b.n	8015790 <__s2b+0x52>
 80157a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80157ac:	4601      	mov	r1, r0
 80157ae:	3b30      	subs	r3, #48	; 0x30
 80157b0:	220a      	movs	r2, #10
 80157b2:	4630      	mov	r0, r6
 80157b4:	f7ff ff88 	bl	80156c8 <__multadd>
 80157b8:	e7eb      	b.n	8015792 <__s2b+0x54>

080157ba <__hi0bits>:
 80157ba:	0c02      	lsrs	r2, r0, #16
 80157bc:	0412      	lsls	r2, r2, #16
 80157be:	4603      	mov	r3, r0
 80157c0:	b9b2      	cbnz	r2, 80157f0 <__hi0bits+0x36>
 80157c2:	0403      	lsls	r3, r0, #16
 80157c4:	2010      	movs	r0, #16
 80157c6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80157ca:	bf04      	itt	eq
 80157cc:	021b      	lsleq	r3, r3, #8
 80157ce:	3008      	addeq	r0, #8
 80157d0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80157d4:	bf04      	itt	eq
 80157d6:	011b      	lsleq	r3, r3, #4
 80157d8:	3004      	addeq	r0, #4
 80157da:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80157de:	bf04      	itt	eq
 80157e0:	009b      	lsleq	r3, r3, #2
 80157e2:	3002      	addeq	r0, #2
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	db06      	blt.n	80157f6 <__hi0bits+0x3c>
 80157e8:	005b      	lsls	r3, r3, #1
 80157ea:	d503      	bpl.n	80157f4 <__hi0bits+0x3a>
 80157ec:	3001      	adds	r0, #1
 80157ee:	4770      	bx	lr
 80157f0:	2000      	movs	r0, #0
 80157f2:	e7e8      	b.n	80157c6 <__hi0bits+0xc>
 80157f4:	2020      	movs	r0, #32
 80157f6:	4770      	bx	lr

080157f8 <__lo0bits>:
 80157f8:	6803      	ldr	r3, [r0, #0]
 80157fa:	f013 0207 	ands.w	r2, r3, #7
 80157fe:	4601      	mov	r1, r0
 8015800:	d00b      	beq.n	801581a <__lo0bits+0x22>
 8015802:	07da      	lsls	r2, r3, #31
 8015804:	d423      	bmi.n	801584e <__lo0bits+0x56>
 8015806:	0798      	lsls	r0, r3, #30
 8015808:	bf49      	itett	mi
 801580a:	085b      	lsrmi	r3, r3, #1
 801580c:	089b      	lsrpl	r3, r3, #2
 801580e:	2001      	movmi	r0, #1
 8015810:	600b      	strmi	r3, [r1, #0]
 8015812:	bf5c      	itt	pl
 8015814:	600b      	strpl	r3, [r1, #0]
 8015816:	2002      	movpl	r0, #2
 8015818:	4770      	bx	lr
 801581a:	b298      	uxth	r0, r3
 801581c:	b9a8      	cbnz	r0, 801584a <__lo0bits+0x52>
 801581e:	0c1b      	lsrs	r3, r3, #16
 8015820:	2010      	movs	r0, #16
 8015822:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015826:	bf04      	itt	eq
 8015828:	0a1b      	lsreq	r3, r3, #8
 801582a:	3008      	addeq	r0, #8
 801582c:	071a      	lsls	r2, r3, #28
 801582e:	bf04      	itt	eq
 8015830:	091b      	lsreq	r3, r3, #4
 8015832:	3004      	addeq	r0, #4
 8015834:	079a      	lsls	r2, r3, #30
 8015836:	bf04      	itt	eq
 8015838:	089b      	lsreq	r3, r3, #2
 801583a:	3002      	addeq	r0, #2
 801583c:	07da      	lsls	r2, r3, #31
 801583e:	d402      	bmi.n	8015846 <__lo0bits+0x4e>
 8015840:	085b      	lsrs	r3, r3, #1
 8015842:	d006      	beq.n	8015852 <__lo0bits+0x5a>
 8015844:	3001      	adds	r0, #1
 8015846:	600b      	str	r3, [r1, #0]
 8015848:	4770      	bx	lr
 801584a:	4610      	mov	r0, r2
 801584c:	e7e9      	b.n	8015822 <__lo0bits+0x2a>
 801584e:	2000      	movs	r0, #0
 8015850:	4770      	bx	lr
 8015852:	2020      	movs	r0, #32
 8015854:	4770      	bx	lr

08015856 <__i2b>:
 8015856:	b510      	push	{r4, lr}
 8015858:	460c      	mov	r4, r1
 801585a:	2101      	movs	r1, #1
 801585c:	f7ff fee9 	bl	8015632 <_Balloc>
 8015860:	2201      	movs	r2, #1
 8015862:	6144      	str	r4, [r0, #20]
 8015864:	6102      	str	r2, [r0, #16]
 8015866:	bd10      	pop	{r4, pc}

08015868 <__multiply>:
 8015868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801586c:	4614      	mov	r4, r2
 801586e:	690a      	ldr	r2, [r1, #16]
 8015870:	6923      	ldr	r3, [r4, #16]
 8015872:	429a      	cmp	r2, r3
 8015874:	bfb8      	it	lt
 8015876:	460b      	movlt	r3, r1
 8015878:	4688      	mov	r8, r1
 801587a:	bfbc      	itt	lt
 801587c:	46a0      	movlt	r8, r4
 801587e:	461c      	movlt	r4, r3
 8015880:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015884:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015888:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801588c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015890:	eb07 0609 	add.w	r6, r7, r9
 8015894:	42b3      	cmp	r3, r6
 8015896:	bfb8      	it	lt
 8015898:	3101      	addlt	r1, #1
 801589a:	f7ff feca 	bl	8015632 <_Balloc>
 801589e:	f100 0514 	add.w	r5, r0, #20
 80158a2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80158a6:	462b      	mov	r3, r5
 80158a8:	2200      	movs	r2, #0
 80158aa:	4573      	cmp	r3, lr
 80158ac:	d316      	bcc.n	80158dc <__multiply+0x74>
 80158ae:	f104 0214 	add.w	r2, r4, #20
 80158b2:	f108 0114 	add.w	r1, r8, #20
 80158b6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80158ba:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80158be:	9300      	str	r3, [sp, #0]
 80158c0:	9b00      	ldr	r3, [sp, #0]
 80158c2:	9201      	str	r2, [sp, #4]
 80158c4:	4293      	cmp	r3, r2
 80158c6:	d80c      	bhi.n	80158e2 <__multiply+0x7a>
 80158c8:	2e00      	cmp	r6, #0
 80158ca:	dd03      	ble.n	80158d4 <__multiply+0x6c>
 80158cc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d05d      	beq.n	8015990 <__multiply+0x128>
 80158d4:	6106      	str	r6, [r0, #16]
 80158d6:	b003      	add	sp, #12
 80158d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158dc:	f843 2b04 	str.w	r2, [r3], #4
 80158e0:	e7e3      	b.n	80158aa <__multiply+0x42>
 80158e2:	f8b2 b000 	ldrh.w	fp, [r2]
 80158e6:	f1bb 0f00 	cmp.w	fp, #0
 80158ea:	d023      	beq.n	8015934 <__multiply+0xcc>
 80158ec:	4689      	mov	r9, r1
 80158ee:	46ac      	mov	ip, r5
 80158f0:	f04f 0800 	mov.w	r8, #0
 80158f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80158f8:	f8dc a000 	ldr.w	sl, [ip]
 80158fc:	b2a3      	uxth	r3, r4
 80158fe:	fa1f fa8a 	uxth.w	sl, sl
 8015902:	fb0b a303 	mla	r3, fp, r3, sl
 8015906:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801590a:	f8dc 4000 	ldr.w	r4, [ip]
 801590e:	4443      	add	r3, r8
 8015910:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015914:	fb0b 840a 	mla	r4, fp, sl, r8
 8015918:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801591c:	46e2      	mov	sl, ip
 801591e:	b29b      	uxth	r3, r3
 8015920:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015924:	454f      	cmp	r7, r9
 8015926:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801592a:	f84a 3b04 	str.w	r3, [sl], #4
 801592e:	d82b      	bhi.n	8015988 <__multiply+0x120>
 8015930:	f8cc 8004 	str.w	r8, [ip, #4]
 8015934:	9b01      	ldr	r3, [sp, #4]
 8015936:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801593a:	3204      	adds	r2, #4
 801593c:	f1ba 0f00 	cmp.w	sl, #0
 8015940:	d020      	beq.n	8015984 <__multiply+0x11c>
 8015942:	682b      	ldr	r3, [r5, #0]
 8015944:	4689      	mov	r9, r1
 8015946:	46a8      	mov	r8, r5
 8015948:	f04f 0b00 	mov.w	fp, #0
 801594c:	f8b9 c000 	ldrh.w	ip, [r9]
 8015950:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015954:	fb0a 440c 	mla	r4, sl, ip, r4
 8015958:	445c      	add	r4, fp
 801595a:	46c4      	mov	ip, r8
 801595c:	b29b      	uxth	r3, r3
 801595e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015962:	f84c 3b04 	str.w	r3, [ip], #4
 8015966:	f859 3b04 	ldr.w	r3, [r9], #4
 801596a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801596e:	0c1b      	lsrs	r3, r3, #16
 8015970:	fb0a b303 	mla	r3, sl, r3, fp
 8015974:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015978:	454f      	cmp	r7, r9
 801597a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801597e:	d805      	bhi.n	801598c <__multiply+0x124>
 8015980:	f8c8 3004 	str.w	r3, [r8, #4]
 8015984:	3504      	adds	r5, #4
 8015986:	e79b      	b.n	80158c0 <__multiply+0x58>
 8015988:	46d4      	mov	ip, sl
 801598a:	e7b3      	b.n	80158f4 <__multiply+0x8c>
 801598c:	46e0      	mov	r8, ip
 801598e:	e7dd      	b.n	801594c <__multiply+0xe4>
 8015990:	3e01      	subs	r6, #1
 8015992:	e799      	b.n	80158c8 <__multiply+0x60>

08015994 <__pow5mult>:
 8015994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015998:	4615      	mov	r5, r2
 801599a:	f012 0203 	ands.w	r2, r2, #3
 801599e:	4606      	mov	r6, r0
 80159a0:	460f      	mov	r7, r1
 80159a2:	d007      	beq.n	80159b4 <__pow5mult+0x20>
 80159a4:	3a01      	subs	r2, #1
 80159a6:	4c21      	ldr	r4, [pc, #132]	; (8015a2c <__pow5mult+0x98>)
 80159a8:	2300      	movs	r3, #0
 80159aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80159ae:	f7ff fe8b 	bl	80156c8 <__multadd>
 80159b2:	4607      	mov	r7, r0
 80159b4:	10ad      	asrs	r5, r5, #2
 80159b6:	d035      	beq.n	8015a24 <__pow5mult+0x90>
 80159b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80159ba:	b93c      	cbnz	r4, 80159cc <__pow5mult+0x38>
 80159bc:	2010      	movs	r0, #16
 80159be:	f7ff fe03 	bl	80155c8 <malloc>
 80159c2:	6270      	str	r0, [r6, #36]	; 0x24
 80159c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80159c8:	6004      	str	r4, [r0, #0]
 80159ca:	60c4      	str	r4, [r0, #12]
 80159cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80159d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80159d4:	b94c      	cbnz	r4, 80159ea <__pow5mult+0x56>
 80159d6:	f240 2171 	movw	r1, #625	; 0x271
 80159da:	4630      	mov	r0, r6
 80159dc:	f7ff ff3b 	bl	8015856 <__i2b>
 80159e0:	2300      	movs	r3, #0
 80159e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80159e6:	4604      	mov	r4, r0
 80159e8:	6003      	str	r3, [r0, #0]
 80159ea:	f04f 0800 	mov.w	r8, #0
 80159ee:	07eb      	lsls	r3, r5, #31
 80159f0:	d50a      	bpl.n	8015a08 <__pow5mult+0x74>
 80159f2:	4639      	mov	r1, r7
 80159f4:	4622      	mov	r2, r4
 80159f6:	4630      	mov	r0, r6
 80159f8:	f7ff ff36 	bl	8015868 <__multiply>
 80159fc:	4639      	mov	r1, r7
 80159fe:	4681      	mov	r9, r0
 8015a00:	4630      	mov	r0, r6
 8015a02:	f7ff fe4a 	bl	801569a <_Bfree>
 8015a06:	464f      	mov	r7, r9
 8015a08:	106d      	asrs	r5, r5, #1
 8015a0a:	d00b      	beq.n	8015a24 <__pow5mult+0x90>
 8015a0c:	6820      	ldr	r0, [r4, #0]
 8015a0e:	b938      	cbnz	r0, 8015a20 <__pow5mult+0x8c>
 8015a10:	4622      	mov	r2, r4
 8015a12:	4621      	mov	r1, r4
 8015a14:	4630      	mov	r0, r6
 8015a16:	f7ff ff27 	bl	8015868 <__multiply>
 8015a1a:	6020      	str	r0, [r4, #0]
 8015a1c:	f8c0 8000 	str.w	r8, [r0]
 8015a20:	4604      	mov	r4, r0
 8015a22:	e7e4      	b.n	80159ee <__pow5mult+0x5a>
 8015a24:	4638      	mov	r0, r7
 8015a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a2a:	bf00      	nop
 8015a2c:	08016990 	.word	0x08016990

08015a30 <__lshift>:
 8015a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a34:	460c      	mov	r4, r1
 8015a36:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015a3a:	6923      	ldr	r3, [r4, #16]
 8015a3c:	6849      	ldr	r1, [r1, #4]
 8015a3e:	eb0a 0903 	add.w	r9, sl, r3
 8015a42:	68a3      	ldr	r3, [r4, #8]
 8015a44:	4607      	mov	r7, r0
 8015a46:	4616      	mov	r6, r2
 8015a48:	f109 0501 	add.w	r5, r9, #1
 8015a4c:	42ab      	cmp	r3, r5
 8015a4e:	db32      	blt.n	8015ab6 <__lshift+0x86>
 8015a50:	4638      	mov	r0, r7
 8015a52:	f7ff fdee 	bl	8015632 <_Balloc>
 8015a56:	2300      	movs	r3, #0
 8015a58:	4680      	mov	r8, r0
 8015a5a:	f100 0114 	add.w	r1, r0, #20
 8015a5e:	461a      	mov	r2, r3
 8015a60:	4553      	cmp	r3, sl
 8015a62:	db2b      	blt.n	8015abc <__lshift+0x8c>
 8015a64:	6920      	ldr	r0, [r4, #16]
 8015a66:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015a6a:	f104 0314 	add.w	r3, r4, #20
 8015a6e:	f016 021f 	ands.w	r2, r6, #31
 8015a72:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015a76:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015a7a:	d025      	beq.n	8015ac8 <__lshift+0x98>
 8015a7c:	f1c2 0e20 	rsb	lr, r2, #32
 8015a80:	2000      	movs	r0, #0
 8015a82:	681e      	ldr	r6, [r3, #0]
 8015a84:	468a      	mov	sl, r1
 8015a86:	4096      	lsls	r6, r2
 8015a88:	4330      	orrs	r0, r6
 8015a8a:	f84a 0b04 	str.w	r0, [sl], #4
 8015a8e:	f853 0b04 	ldr.w	r0, [r3], #4
 8015a92:	459c      	cmp	ip, r3
 8015a94:	fa20 f00e 	lsr.w	r0, r0, lr
 8015a98:	d814      	bhi.n	8015ac4 <__lshift+0x94>
 8015a9a:	6048      	str	r0, [r1, #4]
 8015a9c:	b108      	cbz	r0, 8015aa2 <__lshift+0x72>
 8015a9e:	f109 0502 	add.w	r5, r9, #2
 8015aa2:	3d01      	subs	r5, #1
 8015aa4:	4638      	mov	r0, r7
 8015aa6:	f8c8 5010 	str.w	r5, [r8, #16]
 8015aaa:	4621      	mov	r1, r4
 8015aac:	f7ff fdf5 	bl	801569a <_Bfree>
 8015ab0:	4640      	mov	r0, r8
 8015ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ab6:	3101      	adds	r1, #1
 8015ab8:	005b      	lsls	r3, r3, #1
 8015aba:	e7c7      	b.n	8015a4c <__lshift+0x1c>
 8015abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015ac0:	3301      	adds	r3, #1
 8015ac2:	e7cd      	b.n	8015a60 <__lshift+0x30>
 8015ac4:	4651      	mov	r1, sl
 8015ac6:	e7dc      	b.n	8015a82 <__lshift+0x52>
 8015ac8:	3904      	subs	r1, #4
 8015aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ace:	f841 2f04 	str.w	r2, [r1, #4]!
 8015ad2:	459c      	cmp	ip, r3
 8015ad4:	d8f9      	bhi.n	8015aca <__lshift+0x9a>
 8015ad6:	e7e4      	b.n	8015aa2 <__lshift+0x72>

08015ad8 <__mcmp>:
 8015ad8:	6903      	ldr	r3, [r0, #16]
 8015ada:	690a      	ldr	r2, [r1, #16]
 8015adc:	1a9b      	subs	r3, r3, r2
 8015ade:	b530      	push	{r4, r5, lr}
 8015ae0:	d10c      	bne.n	8015afc <__mcmp+0x24>
 8015ae2:	0092      	lsls	r2, r2, #2
 8015ae4:	3014      	adds	r0, #20
 8015ae6:	3114      	adds	r1, #20
 8015ae8:	1884      	adds	r4, r0, r2
 8015aea:	4411      	add	r1, r2
 8015aec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015af0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015af4:	4295      	cmp	r5, r2
 8015af6:	d003      	beq.n	8015b00 <__mcmp+0x28>
 8015af8:	d305      	bcc.n	8015b06 <__mcmp+0x2e>
 8015afa:	2301      	movs	r3, #1
 8015afc:	4618      	mov	r0, r3
 8015afe:	bd30      	pop	{r4, r5, pc}
 8015b00:	42a0      	cmp	r0, r4
 8015b02:	d3f3      	bcc.n	8015aec <__mcmp+0x14>
 8015b04:	e7fa      	b.n	8015afc <__mcmp+0x24>
 8015b06:	f04f 33ff 	mov.w	r3, #4294967295
 8015b0a:	e7f7      	b.n	8015afc <__mcmp+0x24>

08015b0c <__mdiff>:
 8015b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b10:	460d      	mov	r5, r1
 8015b12:	4607      	mov	r7, r0
 8015b14:	4611      	mov	r1, r2
 8015b16:	4628      	mov	r0, r5
 8015b18:	4614      	mov	r4, r2
 8015b1a:	f7ff ffdd 	bl	8015ad8 <__mcmp>
 8015b1e:	1e06      	subs	r6, r0, #0
 8015b20:	d108      	bne.n	8015b34 <__mdiff+0x28>
 8015b22:	4631      	mov	r1, r6
 8015b24:	4638      	mov	r0, r7
 8015b26:	f7ff fd84 	bl	8015632 <_Balloc>
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b34:	bfa4      	itt	ge
 8015b36:	4623      	movge	r3, r4
 8015b38:	462c      	movge	r4, r5
 8015b3a:	4638      	mov	r0, r7
 8015b3c:	6861      	ldr	r1, [r4, #4]
 8015b3e:	bfa6      	itte	ge
 8015b40:	461d      	movge	r5, r3
 8015b42:	2600      	movge	r6, #0
 8015b44:	2601      	movlt	r6, #1
 8015b46:	f7ff fd74 	bl	8015632 <_Balloc>
 8015b4a:	692b      	ldr	r3, [r5, #16]
 8015b4c:	60c6      	str	r6, [r0, #12]
 8015b4e:	6926      	ldr	r6, [r4, #16]
 8015b50:	f105 0914 	add.w	r9, r5, #20
 8015b54:	f104 0214 	add.w	r2, r4, #20
 8015b58:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015b5c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015b60:	f100 0514 	add.w	r5, r0, #20
 8015b64:	f04f 0e00 	mov.w	lr, #0
 8015b68:	f852 ab04 	ldr.w	sl, [r2], #4
 8015b6c:	f859 4b04 	ldr.w	r4, [r9], #4
 8015b70:	fa1e f18a 	uxtah	r1, lr, sl
 8015b74:	b2a3      	uxth	r3, r4
 8015b76:	1ac9      	subs	r1, r1, r3
 8015b78:	0c23      	lsrs	r3, r4, #16
 8015b7a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015b7e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015b82:	b289      	uxth	r1, r1
 8015b84:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015b88:	45c8      	cmp	r8, r9
 8015b8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015b8e:	4694      	mov	ip, r2
 8015b90:	f845 3b04 	str.w	r3, [r5], #4
 8015b94:	d8e8      	bhi.n	8015b68 <__mdiff+0x5c>
 8015b96:	45bc      	cmp	ip, r7
 8015b98:	d304      	bcc.n	8015ba4 <__mdiff+0x98>
 8015b9a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015b9e:	b183      	cbz	r3, 8015bc2 <__mdiff+0xb6>
 8015ba0:	6106      	str	r6, [r0, #16]
 8015ba2:	e7c5      	b.n	8015b30 <__mdiff+0x24>
 8015ba4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015ba8:	fa1e f381 	uxtah	r3, lr, r1
 8015bac:	141a      	asrs	r2, r3, #16
 8015bae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015bb8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015bbc:	f845 3b04 	str.w	r3, [r5], #4
 8015bc0:	e7e9      	b.n	8015b96 <__mdiff+0x8a>
 8015bc2:	3e01      	subs	r6, #1
 8015bc4:	e7e9      	b.n	8015b9a <__mdiff+0x8e>
	...

08015bc8 <__ulp>:
 8015bc8:	4b12      	ldr	r3, [pc, #72]	; (8015c14 <__ulp+0x4c>)
 8015bca:	ee10 2a90 	vmov	r2, s1
 8015bce:	401a      	ands	r2, r3
 8015bd0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	dd04      	ble.n	8015be2 <__ulp+0x1a>
 8015bd8:	2000      	movs	r0, #0
 8015bda:	4619      	mov	r1, r3
 8015bdc:	ec41 0b10 	vmov	d0, r0, r1
 8015be0:	4770      	bx	lr
 8015be2:	425b      	negs	r3, r3
 8015be4:	151b      	asrs	r3, r3, #20
 8015be6:	2b13      	cmp	r3, #19
 8015be8:	f04f 0000 	mov.w	r0, #0
 8015bec:	f04f 0100 	mov.w	r1, #0
 8015bf0:	dc04      	bgt.n	8015bfc <__ulp+0x34>
 8015bf2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015bf6:	fa42 f103 	asr.w	r1, r2, r3
 8015bfa:	e7ef      	b.n	8015bdc <__ulp+0x14>
 8015bfc:	3b14      	subs	r3, #20
 8015bfe:	2b1e      	cmp	r3, #30
 8015c00:	f04f 0201 	mov.w	r2, #1
 8015c04:	bfda      	itte	le
 8015c06:	f1c3 031f 	rsble	r3, r3, #31
 8015c0a:	fa02 f303 	lslle.w	r3, r2, r3
 8015c0e:	4613      	movgt	r3, r2
 8015c10:	4618      	mov	r0, r3
 8015c12:	e7e3      	b.n	8015bdc <__ulp+0x14>
 8015c14:	7ff00000 	.word	0x7ff00000

08015c18 <__b2d>:
 8015c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c1a:	6905      	ldr	r5, [r0, #16]
 8015c1c:	f100 0714 	add.w	r7, r0, #20
 8015c20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015c24:	1f2e      	subs	r6, r5, #4
 8015c26:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015c2a:	4620      	mov	r0, r4
 8015c2c:	f7ff fdc5 	bl	80157ba <__hi0bits>
 8015c30:	f1c0 0320 	rsb	r3, r0, #32
 8015c34:	280a      	cmp	r0, #10
 8015c36:	600b      	str	r3, [r1, #0]
 8015c38:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015cb0 <__b2d+0x98>
 8015c3c:	dc14      	bgt.n	8015c68 <__b2d+0x50>
 8015c3e:	f1c0 0e0b 	rsb	lr, r0, #11
 8015c42:	fa24 f10e 	lsr.w	r1, r4, lr
 8015c46:	42b7      	cmp	r7, r6
 8015c48:	ea41 030c 	orr.w	r3, r1, ip
 8015c4c:	bf34      	ite	cc
 8015c4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015c52:	2100      	movcs	r1, #0
 8015c54:	3015      	adds	r0, #21
 8015c56:	fa04 f000 	lsl.w	r0, r4, r0
 8015c5a:	fa21 f10e 	lsr.w	r1, r1, lr
 8015c5e:	ea40 0201 	orr.w	r2, r0, r1
 8015c62:	ec43 2b10 	vmov	d0, r2, r3
 8015c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c68:	42b7      	cmp	r7, r6
 8015c6a:	bf3a      	itte	cc
 8015c6c:	f1a5 0608 	subcc.w	r6, r5, #8
 8015c70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015c74:	2100      	movcs	r1, #0
 8015c76:	380b      	subs	r0, #11
 8015c78:	d015      	beq.n	8015ca6 <__b2d+0x8e>
 8015c7a:	4084      	lsls	r4, r0
 8015c7c:	f1c0 0520 	rsb	r5, r0, #32
 8015c80:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015c84:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015c88:	42be      	cmp	r6, r7
 8015c8a:	fa21 fc05 	lsr.w	ip, r1, r5
 8015c8e:	ea44 030c 	orr.w	r3, r4, ip
 8015c92:	bf8c      	ite	hi
 8015c94:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015c98:	2400      	movls	r4, #0
 8015c9a:	fa01 f000 	lsl.w	r0, r1, r0
 8015c9e:	40ec      	lsrs	r4, r5
 8015ca0:	ea40 0204 	orr.w	r2, r0, r4
 8015ca4:	e7dd      	b.n	8015c62 <__b2d+0x4a>
 8015ca6:	ea44 030c 	orr.w	r3, r4, ip
 8015caa:	460a      	mov	r2, r1
 8015cac:	e7d9      	b.n	8015c62 <__b2d+0x4a>
 8015cae:	bf00      	nop
 8015cb0:	3ff00000 	.word	0x3ff00000

08015cb4 <__d2b>:
 8015cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015cb8:	460e      	mov	r6, r1
 8015cba:	2101      	movs	r1, #1
 8015cbc:	ec59 8b10 	vmov	r8, r9, d0
 8015cc0:	4615      	mov	r5, r2
 8015cc2:	f7ff fcb6 	bl	8015632 <_Balloc>
 8015cc6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015cca:	4607      	mov	r7, r0
 8015ccc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015cd0:	bb34      	cbnz	r4, 8015d20 <__d2b+0x6c>
 8015cd2:	9301      	str	r3, [sp, #4]
 8015cd4:	f1b8 0300 	subs.w	r3, r8, #0
 8015cd8:	d027      	beq.n	8015d2a <__d2b+0x76>
 8015cda:	a802      	add	r0, sp, #8
 8015cdc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015ce0:	f7ff fd8a 	bl	80157f8 <__lo0bits>
 8015ce4:	9900      	ldr	r1, [sp, #0]
 8015ce6:	b1f0      	cbz	r0, 8015d26 <__d2b+0x72>
 8015ce8:	9a01      	ldr	r2, [sp, #4]
 8015cea:	f1c0 0320 	rsb	r3, r0, #32
 8015cee:	fa02 f303 	lsl.w	r3, r2, r3
 8015cf2:	430b      	orrs	r3, r1
 8015cf4:	40c2      	lsrs	r2, r0
 8015cf6:	617b      	str	r3, [r7, #20]
 8015cf8:	9201      	str	r2, [sp, #4]
 8015cfa:	9b01      	ldr	r3, [sp, #4]
 8015cfc:	61bb      	str	r3, [r7, #24]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	bf14      	ite	ne
 8015d02:	2102      	movne	r1, #2
 8015d04:	2101      	moveq	r1, #1
 8015d06:	6139      	str	r1, [r7, #16]
 8015d08:	b1c4      	cbz	r4, 8015d3c <__d2b+0x88>
 8015d0a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015d0e:	4404      	add	r4, r0
 8015d10:	6034      	str	r4, [r6, #0]
 8015d12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015d16:	6028      	str	r0, [r5, #0]
 8015d18:	4638      	mov	r0, r7
 8015d1a:	b003      	add	sp, #12
 8015d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015d24:	e7d5      	b.n	8015cd2 <__d2b+0x1e>
 8015d26:	6179      	str	r1, [r7, #20]
 8015d28:	e7e7      	b.n	8015cfa <__d2b+0x46>
 8015d2a:	a801      	add	r0, sp, #4
 8015d2c:	f7ff fd64 	bl	80157f8 <__lo0bits>
 8015d30:	9b01      	ldr	r3, [sp, #4]
 8015d32:	617b      	str	r3, [r7, #20]
 8015d34:	2101      	movs	r1, #1
 8015d36:	6139      	str	r1, [r7, #16]
 8015d38:	3020      	adds	r0, #32
 8015d3a:	e7e5      	b.n	8015d08 <__d2b+0x54>
 8015d3c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015d40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015d44:	6030      	str	r0, [r6, #0]
 8015d46:	6918      	ldr	r0, [r3, #16]
 8015d48:	f7ff fd37 	bl	80157ba <__hi0bits>
 8015d4c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015d50:	e7e1      	b.n	8015d16 <__d2b+0x62>

08015d52 <__ratio>:
 8015d52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d56:	4688      	mov	r8, r1
 8015d58:	4669      	mov	r1, sp
 8015d5a:	4681      	mov	r9, r0
 8015d5c:	f7ff ff5c 	bl	8015c18 <__b2d>
 8015d60:	a901      	add	r1, sp, #4
 8015d62:	4640      	mov	r0, r8
 8015d64:	ec57 6b10 	vmov	r6, r7, d0
 8015d68:	f7ff ff56 	bl	8015c18 <__b2d>
 8015d6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015d70:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015d74:	eba3 0c02 	sub.w	ip, r3, r2
 8015d78:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015d7c:	1a9b      	subs	r3, r3, r2
 8015d7e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015d82:	ec5b ab10 	vmov	sl, fp, d0
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	bfce      	itee	gt
 8015d8a:	463a      	movgt	r2, r7
 8015d8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015d90:	465a      	movle	r2, fp
 8015d92:	4659      	mov	r1, fp
 8015d94:	463d      	mov	r5, r7
 8015d96:	bfd4      	ite	le
 8015d98:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8015d9c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8015da0:	4630      	mov	r0, r6
 8015da2:	ee10 2a10 	vmov	r2, s0
 8015da6:	460b      	mov	r3, r1
 8015da8:	4629      	mov	r1, r5
 8015daa:	f7f2 fc87 	bl	80086bc <__aeabi_ddiv>
 8015dae:	ec41 0b10 	vmov	d0, r0, r1
 8015db2:	b003      	add	sp, #12
 8015db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015db8 <__copybits>:
 8015db8:	3901      	subs	r1, #1
 8015dba:	b510      	push	{r4, lr}
 8015dbc:	1149      	asrs	r1, r1, #5
 8015dbe:	6914      	ldr	r4, [r2, #16]
 8015dc0:	3101      	adds	r1, #1
 8015dc2:	f102 0314 	add.w	r3, r2, #20
 8015dc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015dca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015dce:	42a3      	cmp	r3, r4
 8015dd0:	4602      	mov	r2, r0
 8015dd2:	d303      	bcc.n	8015ddc <__copybits+0x24>
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	428a      	cmp	r2, r1
 8015dd8:	d305      	bcc.n	8015de6 <__copybits+0x2e>
 8015dda:	bd10      	pop	{r4, pc}
 8015ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015de0:	f840 2b04 	str.w	r2, [r0], #4
 8015de4:	e7f3      	b.n	8015dce <__copybits+0x16>
 8015de6:	f842 3b04 	str.w	r3, [r2], #4
 8015dea:	e7f4      	b.n	8015dd6 <__copybits+0x1e>

08015dec <__any_on>:
 8015dec:	f100 0214 	add.w	r2, r0, #20
 8015df0:	6900      	ldr	r0, [r0, #16]
 8015df2:	114b      	asrs	r3, r1, #5
 8015df4:	4298      	cmp	r0, r3
 8015df6:	b510      	push	{r4, lr}
 8015df8:	db11      	blt.n	8015e1e <__any_on+0x32>
 8015dfa:	dd0a      	ble.n	8015e12 <__any_on+0x26>
 8015dfc:	f011 011f 	ands.w	r1, r1, #31
 8015e00:	d007      	beq.n	8015e12 <__any_on+0x26>
 8015e02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015e06:	fa24 f001 	lsr.w	r0, r4, r1
 8015e0a:	fa00 f101 	lsl.w	r1, r0, r1
 8015e0e:	428c      	cmp	r4, r1
 8015e10:	d10b      	bne.n	8015e2a <__any_on+0x3e>
 8015e12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015e16:	4293      	cmp	r3, r2
 8015e18:	d803      	bhi.n	8015e22 <__any_on+0x36>
 8015e1a:	2000      	movs	r0, #0
 8015e1c:	bd10      	pop	{r4, pc}
 8015e1e:	4603      	mov	r3, r0
 8015e20:	e7f7      	b.n	8015e12 <__any_on+0x26>
 8015e22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015e26:	2900      	cmp	r1, #0
 8015e28:	d0f5      	beq.n	8015e16 <__any_on+0x2a>
 8015e2a:	2001      	movs	r0, #1
 8015e2c:	e7f6      	b.n	8015e1c <__any_on+0x30>

08015e2e <_calloc_r>:
 8015e2e:	b538      	push	{r3, r4, r5, lr}
 8015e30:	fb02 f401 	mul.w	r4, r2, r1
 8015e34:	4621      	mov	r1, r4
 8015e36:	f7fb fa97 	bl	8011368 <_malloc_r>
 8015e3a:	4605      	mov	r5, r0
 8015e3c:	b118      	cbz	r0, 8015e46 <_calloc_r+0x18>
 8015e3e:	4622      	mov	r2, r4
 8015e40:	2100      	movs	r1, #0
 8015e42:	f7fb fa3a 	bl	80112ba <memset>
 8015e46:	4628      	mov	r0, r5
 8015e48:	bd38      	pop	{r3, r4, r5, pc}

08015e4a <_realloc_r>:
 8015e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e4c:	4607      	mov	r7, r0
 8015e4e:	4614      	mov	r4, r2
 8015e50:	460e      	mov	r6, r1
 8015e52:	b921      	cbnz	r1, 8015e5e <_realloc_r+0x14>
 8015e54:	4611      	mov	r1, r2
 8015e56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015e5a:	f7fb ba85 	b.w	8011368 <_malloc_r>
 8015e5e:	b922      	cbnz	r2, 8015e6a <_realloc_r+0x20>
 8015e60:	f7fb fa34 	bl	80112cc <_free_r>
 8015e64:	4625      	mov	r5, r4
 8015e66:	4628      	mov	r0, r5
 8015e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e6a:	f000 f9ce 	bl	801620a <_malloc_usable_size_r>
 8015e6e:	42a0      	cmp	r0, r4
 8015e70:	d20f      	bcs.n	8015e92 <_realloc_r+0x48>
 8015e72:	4621      	mov	r1, r4
 8015e74:	4638      	mov	r0, r7
 8015e76:	f7fb fa77 	bl	8011368 <_malloc_r>
 8015e7a:	4605      	mov	r5, r0
 8015e7c:	2800      	cmp	r0, #0
 8015e7e:	d0f2      	beq.n	8015e66 <_realloc_r+0x1c>
 8015e80:	4631      	mov	r1, r6
 8015e82:	4622      	mov	r2, r4
 8015e84:	f7fb fa0e 	bl	80112a4 <memcpy>
 8015e88:	4631      	mov	r1, r6
 8015e8a:	4638      	mov	r0, r7
 8015e8c:	f7fb fa1e 	bl	80112cc <_free_r>
 8015e90:	e7e9      	b.n	8015e66 <_realloc_r+0x1c>
 8015e92:	4635      	mov	r5, r6
 8015e94:	e7e7      	b.n	8015e66 <_realloc_r+0x1c>

08015e96 <__ssputs_r>:
 8015e96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e9a:	688e      	ldr	r6, [r1, #8]
 8015e9c:	429e      	cmp	r6, r3
 8015e9e:	4682      	mov	sl, r0
 8015ea0:	460c      	mov	r4, r1
 8015ea2:	4690      	mov	r8, r2
 8015ea4:	4699      	mov	r9, r3
 8015ea6:	d837      	bhi.n	8015f18 <__ssputs_r+0x82>
 8015ea8:	898a      	ldrh	r2, [r1, #12]
 8015eaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015eae:	d031      	beq.n	8015f14 <__ssputs_r+0x7e>
 8015eb0:	6825      	ldr	r5, [r4, #0]
 8015eb2:	6909      	ldr	r1, [r1, #16]
 8015eb4:	1a6f      	subs	r7, r5, r1
 8015eb6:	6965      	ldr	r5, [r4, #20]
 8015eb8:	2302      	movs	r3, #2
 8015eba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ebe:	fb95 f5f3 	sdiv	r5, r5, r3
 8015ec2:	f109 0301 	add.w	r3, r9, #1
 8015ec6:	443b      	add	r3, r7
 8015ec8:	429d      	cmp	r5, r3
 8015eca:	bf38      	it	cc
 8015ecc:	461d      	movcc	r5, r3
 8015ece:	0553      	lsls	r3, r2, #21
 8015ed0:	d530      	bpl.n	8015f34 <__ssputs_r+0x9e>
 8015ed2:	4629      	mov	r1, r5
 8015ed4:	f7fb fa48 	bl	8011368 <_malloc_r>
 8015ed8:	4606      	mov	r6, r0
 8015eda:	b950      	cbnz	r0, 8015ef2 <__ssputs_r+0x5c>
 8015edc:	230c      	movs	r3, #12
 8015ede:	f8ca 3000 	str.w	r3, [sl]
 8015ee2:	89a3      	ldrh	r3, [r4, #12]
 8015ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ee8:	81a3      	strh	r3, [r4, #12]
 8015eea:	f04f 30ff 	mov.w	r0, #4294967295
 8015eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ef2:	463a      	mov	r2, r7
 8015ef4:	6921      	ldr	r1, [r4, #16]
 8015ef6:	f7fb f9d5 	bl	80112a4 <memcpy>
 8015efa:	89a3      	ldrh	r3, [r4, #12]
 8015efc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f04:	81a3      	strh	r3, [r4, #12]
 8015f06:	6126      	str	r6, [r4, #16]
 8015f08:	6165      	str	r5, [r4, #20]
 8015f0a:	443e      	add	r6, r7
 8015f0c:	1bed      	subs	r5, r5, r7
 8015f0e:	6026      	str	r6, [r4, #0]
 8015f10:	60a5      	str	r5, [r4, #8]
 8015f12:	464e      	mov	r6, r9
 8015f14:	454e      	cmp	r6, r9
 8015f16:	d900      	bls.n	8015f1a <__ssputs_r+0x84>
 8015f18:	464e      	mov	r6, r9
 8015f1a:	4632      	mov	r2, r6
 8015f1c:	4641      	mov	r1, r8
 8015f1e:	6820      	ldr	r0, [r4, #0]
 8015f20:	f7ff fb6c 	bl	80155fc <memmove>
 8015f24:	68a3      	ldr	r3, [r4, #8]
 8015f26:	1b9b      	subs	r3, r3, r6
 8015f28:	60a3      	str	r3, [r4, #8]
 8015f2a:	6823      	ldr	r3, [r4, #0]
 8015f2c:	441e      	add	r6, r3
 8015f2e:	6026      	str	r6, [r4, #0]
 8015f30:	2000      	movs	r0, #0
 8015f32:	e7dc      	b.n	8015eee <__ssputs_r+0x58>
 8015f34:	462a      	mov	r2, r5
 8015f36:	f7ff ff88 	bl	8015e4a <_realloc_r>
 8015f3a:	4606      	mov	r6, r0
 8015f3c:	2800      	cmp	r0, #0
 8015f3e:	d1e2      	bne.n	8015f06 <__ssputs_r+0x70>
 8015f40:	6921      	ldr	r1, [r4, #16]
 8015f42:	4650      	mov	r0, sl
 8015f44:	f7fb f9c2 	bl	80112cc <_free_r>
 8015f48:	e7c8      	b.n	8015edc <__ssputs_r+0x46>
	...

08015f4c <_svfiprintf_r>:
 8015f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f50:	461d      	mov	r5, r3
 8015f52:	898b      	ldrh	r3, [r1, #12]
 8015f54:	061f      	lsls	r7, r3, #24
 8015f56:	b09d      	sub	sp, #116	; 0x74
 8015f58:	4680      	mov	r8, r0
 8015f5a:	460c      	mov	r4, r1
 8015f5c:	4616      	mov	r6, r2
 8015f5e:	d50f      	bpl.n	8015f80 <_svfiprintf_r+0x34>
 8015f60:	690b      	ldr	r3, [r1, #16]
 8015f62:	b96b      	cbnz	r3, 8015f80 <_svfiprintf_r+0x34>
 8015f64:	2140      	movs	r1, #64	; 0x40
 8015f66:	f7fb f9ff 	bl	8011368 <_malloc_r>
 8015f6a:	6020      	str	r0, [r4, #0]
 8015f6c:	6120      	str	r0, [r4, #16]
 8015f6e:	b928      	cbnz	r0, 8015f7c <_svfiprintf_r+0x30>
 8015f70:	230c      	movs	r3, #12
 8015f72:	f8c8 3000 	str.w	r3, [r8]
 8015f76:	f04f 30ff 	mov.w	r0, #4294967295
 8015f7a:	e0c8      	b.n	801610e <_svfiprintf_r+0x1c2>
 8015f7c:	2340      	movs	r3, #64	; 0x40
 8015f7e:	6163      	str	r3, [r4, #20]
 8015f80:	2300      	movs	r3, #0
 8015f82:	9309      	str	r3, [sp, #36]	; 0x24
 8015f84:	2320      	movs	r3, #32
 8015f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015f8a:	2330      	movs	r3, #48	; 0x30
 8015f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015f90:	9503      	str	r5, [sp, #12]
 8015f92:	f04f 0b01 	mov.w	fp, #1
 8015f96:	4637      	mov	r7, r6
 8015f98:	463d      	mov	r5, r7
 8015f9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015f9e:	b10b      	cbz	r3, 8015fa4 <_svfiprintf_r+0x58>
 8015fa0:	2b25      	cmp	r3, #37	; 0x25
 8015fa2:	d13e      	bne.n	8016022 <_svfiprintf_r+0xd6>
 8015fa4:	ebb7 0a06 	subs.w	sl, r7, r6
 8015fa8:	d00b      	beq.n	8015fc2 <_svfiprintf_r+0x76>
 8015faa:	4653      	mov	r3, sl
 8015fac:	4632      	mov	r2, r6
 8015fae:	4621      	mov	r1, r4
 8015fb0:	4640      	mov	r0, r8
 8015fb2:	f7ff ff70 	bl	8015e96 <__ssputs_r>
 8015fb6:	3001      	adds	r0, #1
 8015fb8:	f000 80a4 	beq.w	8016104 <_svfiprintf_r+0x1b8>
 8015fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fbe:	4453      	add	r3, sl
 8015fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8015fc2:	783b      	ldrb	r3, [r7, #0]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	f000 809d 	beq.w	8016104 <_svfiprintf_r+0x1b8>
 8015fca:	2300      	movs	r3, #0
 8015fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8015fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fd4:	9304      	str	r3, [sp, #16]
 8015fd6:	9307      	str	r3, [sp, #28]
 8015fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8015fde:	462f      	mov	r7, r5
 8015fe0:	2205      	movs	r2, #5
 8015fe2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015fe6:	4850      	ldr	r0, [pc, #320]	; (8016128 <_svfiprintf_r+0x1dc>)
 8015fe8:	f7f2 f832 	bl	8008050 <memchr>
 8015fec:	9b04      	ldr	r3, [sp, #16]
 8015fee:	b9d0      	cbnz	r0, 8016026 <_svfiprintf_r+0xda>
 8015ff0:	06d9      	lsls	r1, r3, #27
 8015ff2:	bf44      	itt	mi
 8015ff4:	2220      	movmi	r2, #32
 8015ff6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015ffa:	071a      	lsls	r2, r3, #28
 8015ffc:	bf44      	itt	mi
 8015ffe:	222b      	movmi	r2, #43	; 0x2b
 8016000:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016004:	782a      	ldrb	r2, [r5, #0]
 8016006:	2a2a      	cmp	r2, #42	; 0x2a
 8016008:	d015      	beq.n	8016036 <_svfiprintf_r+0xea>
 801600a:	9a07      	ldr	r2, [sp, #28]
 801600c:	462f      	mov	r7, r5
 801600e:	2000      	movs	r0, #0
 8016010:	250a      	movs	r5, #10
 8016012:	4639      	mov	r1, r7
 8016014:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016018:	3b30      	subs	r3, #48	; 0x30
 801601a:	2b09      	cmp	r3, #9
 801601c:	d94d      	bls.n	80160ba <_svfiprintf_r+0x16e>
 801601e:	b1b8      	cbz	r0, 8016050 <_svfiprintf_r+0x104>
 8016020:	e00f      	b.n	8016042 <_svfiprintf_r+0xf6>
 8016022:	462f      	mov	r7, r5
 8016024:	e7b8      	b.n	8015f98 <_svfiprintf_r+0x4c>
 8016026:	4a40      	ldr	r2, [pc, #256]	; (8016128 <_svfiprintf_r+0x1dc>)
 8016028:	1a80      	subs	r0, r0, r2
 801602a:	fa0b f000 	lsl.w	r0, fp, r0
 801602e:	4318      	orrs	r0, r3
 8016030:	9004      	str	r0, [sp, #16]
 8016032:	463d      	mov	r5, r7
 8016034:	e7d3      	b.n	8015fde <_svfiprintf_r+0x92>
 8016036:	9a03      	ldr	r2, [sp, #12]
 8016038:	1d11      	adds	r1, r2, #4
 801603a:	6812      	ldr	r2, [r2, #0]
 801603c:	9103      	str	r1, [sp, #12]
 801603e:	2a00      	cmp	r2, #0
 8016040:	db01      	blt.n	8016046 <_svfiprintf_r+0xfa>
 8016042:	9207      	str	r2, [sp, #28]
 8016044:	e004      	b.n	8016050 <_svfiprintf_r+0x104>
 8016046:	4252      	negs	r2, r2
 8016048:	f043 0302 	orr.w	r3, r3, #2
 801604c:	9207      	str	r2, [sp, #28]
 801604e:	9304      	str	r3, [sp, #16]
 8016050:	783b      	ldrb	r3, [r7, #0]
 8016052:	2b2e      	cmp	r3, #46	; 0x2e
 8016054:	d10c      	bne.n	8016070 <_svfiprintf_r+0x124>
 8016056:	787b      	ldrb	r3, [r7, #1]
 8016058:	2b2a      	cmp	r3, #42	; 0x2a
 801605a:	d133      	bne.n	80160c4 <_svfiprintf_r+0x178>
 801605c:	9b03      	ldr	r3, [sp, #12]
 801605e:	1d1a      	adds	r2, r3, #4
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	9203      	str	r2, [sp, #12]
 8016064:	2b00      	cmp	r3, #0
 8016066:	bfb8      	it	lt
 8016068:	f04f 33ff 	movlt.w	r3, #4294967295
 801606c:	3702      	adds	r7, #2
 801606e:	9305      	str	r3, [sp, #20]
 8016070:	4d2e      	ldr	r5, [pc, #184]	; (801612c <_svfiprintf_r+0x1e0>)
 8016072:	7839      	ldrb	r1, [r7, #0]
 8016074:	2203      	movs	r2, #3
 8016076:	4628      	mov	r0, r5
 8016078:	f7f1 ffea 	bl	8008050 <memchr>
 801607c:	b138      	cbz	r0, 801608e <_svfiprintf_r+0x142>
 801607e:	2340      	movs	r3, #64	; 0x40
 8016080:	1b40      	subs	r0, r0, r5
 8016082:	fa03 f000 	lsl.w	r0, r3, r0
 8016086:	9b04      	ldr	r3, [sp, #16]
 8016088:	4303      	orrs	r3, r0
 801608a:	3701      	adds	r7, #1
 801608c:	9304      	str	r3, [sp, #16]
 801608e:	7839      	ldrb	r1, [r7, #0]
 8016090:	4827      	ldr	r0, [pc, #156]	; (8016130 <_svfiprintf_r+0x1e4>)
 8016092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016096:	2206      	movs	r2, #6
 8016098:	1c7e      	adds	r6, r7, #1
 801609a:	f7f1 ffd9 	bl	8008050 <memchr>
 801609e:	2800      	cmp	r0, #0
 80160a0:	d038      	beq.n	8016114 <_svfiprintf_r+0x1c8>
 80160a2:	4b24      	ldr	r3, [pc, #144]	; (8016134 <_svfiprintf_r+0x1e8>)
 80160a4:	bb13      	cbnz	r3, 80160ec <_svfiprintf_r+0x1a0>
 80160a6:	9b03      	ldr	r3, [sp, #12]
 80160a8:	3307      	adds	r3, #7
 80160aa:	f023 0307 	bic.w	r3, r3, #7
 80160ae:	3308      	adds	r3, #8
 80160b0:	9303      	str	r3, [sp, #12]
 80160b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160b4:	444b      	add	r3, r9
 80160b6:	9309      	str	r3, [sp, #36]	; 0x24
 80160b8:	e76d      	b.n	8015f96 <_svfiprintf_r+0x4a>
 80160ba:	fb05 3202 	mla	r2, r5, r2, r3
 80160be:	2001      	movs	r0, #1
 80160c0:	460f      	mov	r7, r1
 80160c2:	e7a6      	b.n	8016012 <_svfiprintf_r+0xc6>
 80160c4:	2300      	movs	r3, #0
 80160c6:	3701      	adds	r7, #1
 80160c8:	9305      	str	r3, [sp, #20]
 80160ca:	4619      	mov	r1, r3
 80160cc:	250a      	movs	r5, #10
 80160ce:	4638      	mov	r0, r7
 80160d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160d4:	3a30      	subs	r2, #48	; 0x30
 80160d6:	2a09      	cmp	r2, #9
 80160d8:	d903      	bls.n	80160e2 <_svfiprintf_r+0x196>
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d0c8      	beq.n	8016070 <_svfiprintf_r+0x124>
 80160de:	9105      	str	r1, [sp, #20]
 80160e0:	e7c6      	b.n	8016070 <_svfiprintf_r+0x124>
 80160e2:	fb05 2101 	mla	r1, r5, r1, r2
 80160e6:	2301      	movs	r3, #1
 80160e8:	4607      	mov	r7, r0
 80160ea:	e7f0      	b.n	80160ce <_svfiprintf_r+0x182>
 80160ec:	ab03      	add	r3, sp, #12
 80160ee:	9300      	str	r3, [sp, #0]
 80160f0:	4622      	mov	r2, r4
 80160f2:	4b11      	ldr	r3, [pc, #68]	; (8016138 <_svfiprintf_r+0x1ec>)
 80160f4:	a904      	add	r1, sp, #16
 80160f6:	4640      	mov	r0, r8
 80160f8:	f7fb fb64 	bl	80117c4 <_printf_float>
 80160fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016100:	4681      	mov	r9, r0
 8016102:	d1d6      	bne.n	80160b2 <_svfiprintf_r+0x166>
 8016104:	89a3      	ldrh	r3, [r4, #12]
 8016106:	065b      	lsls	r3, r3, #25
 8016108:	f53f af35 	bmi.w	8015f76 <_svfiprintf_r+0x2a>
 801610c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801610e:	b01d      	add	sp, #116	; 0x74
 8016110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016114:	ab03      	add	r3, sp, #12
 8016116:	9300      	str	r3, [sp, #0]
 8016118:	4622      	mov	r2, r4
 801611a:	4b07      	ldr	r3, [pc, #28]	; (8016138 <_svfiprintf_r+0x1ec>)
 801611c:	a904      	add	r1, sp, #16
 801611e:	4640      	mov	r0, r8
 8016120:	f7fb fe06 	bl	8011d30 <_printf_i>
 8016124:	e7ea      	b.n	80160fc <_svfiprintf_r+0x1b0>
 8016126:	bf00      	nop
 8016128:	080167d4 	.word	0x080167d4
 801612c:	080167da 	.word	0x080167da
 8016130:	080167de 	.word	0x080167de
 8016134:	080117c5 	.word	0x080117c5
 8016138:	08015e97 	.word	0x08015e97

0801613c <_putc_r>:
 801613c:	b570      	push	{r4, r5, r6, lr}
 801613e:	460d      	mov	r5, r1
 8016140:	4614      	mov	r4, r2
 8016142:	4606      	mov	r6, r0
 8016144:	b118      	cbz	r0, 801614e <_putc_r+0x12>
 8016146:	6983      	ldr	r3, [r0, #24]
 8016148:	b90b      	cbnz	r3, 801614e <_putc_r+0x12>
 801614a:	f7fa ff7d 	bl	8011048 <__sinit>
 801614e:	4b13      	ldr	r3, [pc, #76]	; (801619c <_putc_r+0x60>)
 8016150:	429c      	cmp	r4, r3
 8016152:	d112      	bne.n	801617a <_putc_r+0x3e>
 8016154:	6874      	ldr	r4, [r6, #4]
 8016156:	68a3      	ldr	r3, [r4, #8]
 8016158:	3b01      	subs	r3, #1
 801615a:	2b00      	cmp	r3, #0
 801615c:	60a3      	str	r3, [r4, #8]
 801615e:	da16      	bge.n	801618e <_putc_r+0x52>
 8016160:	69a2      	ldr	r2, [r4, #24]
 8016162:	4293      	cmp	r3, r2
 8016164:	db02      	blt.n	801616c <_putc_r+0x30>
 8016166:	b2eb      	uxtb	r3, r5
 8016168:	2b0a      	cmp	r3, #10
 801616a:	d110      	bne.n	801618e <_putc_r+0x52>
 801616c:	4622      	mov	r2, r4
 801616e:	4629      	mov	r1, r5
 8016170:	4630      	mov	r0, r6
 8016172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016176:	f7fd bf85 	b.w	8014084 <__swbuf_r>
 801617a:	4b09      	ldr	r3, [pc, #36]	; (80161a0 <_putc_r+0x64>)
 801617c:	429c      	cmp	r4, r3
 801617e:	d101      	bne.n	8016184 <_putc_r+0x48>
 8016180:	68b4      	ldr	r4, [r6, #8]
 8016182:	e7e8      	b.n	8016156 <_putc_r+0x1a>
 8016184:	4b07      	ldr	r3, [pc, #28]	; (80161a4 <_putc_r+0x68>)
 8016186:	429c      	cmp	r4, r3
 8016188:	bf08      	it	eq
 801618a:	68f4      	ldreq	r4, [r6, #12]
 801618c:	e7e3      	b.n	8016156 <_putc_r+0x1a>
 801618e:	6823      	ldr	r3, [r4, #0]
 8016190:	1c5a      	adds	r2, r3, #1
 8016192:	6022      	str	r2, [r4, #0]
 8016194:	701d      	strb	r5, [r3, #0]
 8016196:	b2e8      	uxtb	r0, r5
 8016198:	bd70      	pop	{r4, r5, r6, pc}
 801619a:	bf00      	nop
 801619c:	08016790 	.word	0x08016790
 80161a0:	080167b0 	.word	0x080167b0
 80161a4:	08016770 	.word	0x08016770

080161a8 <_read_r>:
 80161a8:	b538      	push	{r3, r4, r5, lr}
 80161aa:	4c07      	ldr	r4, [pc, #28]	; (80161c8 <_read_r+0x20>)
 80161ac:	4605      	mov	r5, r0
 80161ae:	4608      	mov	r0, r1
 80161b0:	4611      	mov	r1, r2
 80161b2:	2200      	movs	r2, #0
 80161b4:	6022      	str	r2, [r4, #0]
 80161b6:	461a      	mov	r2, r3
 80161b8:	f7f6 ffb2 	bl	800d120 <_read>
 80161bc:	1c43      	adds	r3, r0, #1
 80161be:	d102      	bne.n	80161c6 <_read_r+0x1e>
 80161c0:	6823      	ldr	r3, [r4, #0]
 80161c2:	b103      	cbz	r3, 80161c6 <_read_r+0x1e>
 80161c4:	602b      	str	r3, [r5, #0]
 80161c6:	bd38      	pop	{r3, r4, r5, pc}
 80161c8:	2000a74c 	.word	0x2000a74c

080161cc <strncmp>:
 80161cc:	b510      	push	{r4, lr}
 80161ce:	b16a      	cbz	r2, 80161ec <strncmp+0x20>
 80161d0:	3901      	subs	r1, #1
 80161d2:	1884      	adds	r4, r0, r2
 80161d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80161d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80161dc:	4293      	cmp	r3, r2
 80161de:	d103      	bne.n	80161e8 <strncmp+0x1c>
 80161e0:	42a0      	cmp	r0, r4
 80161e2:	d001      	beq.n	80161e8 <strncmp+0x1c>
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d1f5      	bne.n	80161d4 <strncmp+0x8>
 80161e8:	1a98      	subs	r0, r3, r2
 80161ea:	bd10      	pop	{r4, pc}
 80161ec:	4610      	mov	r0, r2
 80161ee:	e7fc      	b.n	80161ea <strncmp+0x1e>

080161f0 <__ascii_wctomb>:
 80161f0:	b149      	cbz	r1, 8016206 <__ascii_wctomb+0x16>
 80161f2:	2aff      	cmp	r2, #255	; 0xff
 80161f4:	bf85      	ittet	hi
 80161f6:	238a      	movhi	r3, #138	; 0x8a
 80161f8:	6003      	strhi	r3, [r0, #0]
 80161fa:	700a      	strbls	r2, [r1, #0]
 80161fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8016200:	bf98      	it	ls
 8016202:	2001      	movls	r0, #1
 8016204:	4770      	bx	lr
 8016206:	4608      	mov	r0, r1
 8016208:	4770      	bx	lr

0801620a <_malloc_usable_size_r>:
 801620a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801620e:	1f18      	subs	r0, r3, #4
 8016210:	2b00      	cmp	r3, #0
 8016212:	bfbc      	itt	lt
 8016214:	580b      	ldrlt	r3, [r1, r0]
 8016216:	18c0      	addlt	r0, r0, r3
 8016218:	4770      	bx	lr
	...

0801621c <_init>:
 801621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801621e:	bf00      	nop
 8016220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016222:	bc08      	pop	{r3}
 8016224:	469e      	mov	lr, r3
 8016226:	4770      	bx	lr

08016228 <_fini>:
 8016228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801622a:	bf00      	nop
 801622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801622e:	bc08      	pop	{r3}
 8016230:	469e      	mov	lr, r3
 8016232:	4770      	bx	lr
