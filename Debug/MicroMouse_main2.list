
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash_run 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         000130a8  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000005dc  0801b0a8  0801b0a8  0002b0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0801b684  0801b684  000301fc  2**0
                  CONTENTS
  6 .ARM          00000008  0801b684  0801b684  0002b684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0801b68c  0801b68c  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0801b68c  0801b68c  0002b68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0801b690  0801b690  0002b690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001fc  20000000  0801b694  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008a8  200001fc  0801b890  000301fc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000aa4  0801b890  00030aa4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002517c  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004f2f  00000000  00000000  000553a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001720  00000000  00000000  0005a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014d0  00000000  00000000  0005b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00026ceb  00000000  00000000  0005cec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001756d  00000000  00000000  00083bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c98b3  00000000  00000000  0009b120  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001649d3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000072c0  00000000  00000000  00164a50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001fc 	.word	0x200001fc
 800801c:	00000000 	.word	0x00000000
 8008020:	0801b090 	.word	0x0801b090

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000200 	.word	0x20000200
 800803c:	0801b090 	.word	0x0801b090

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <InitPosition>:
//
//
//
//}
void InitPosition()
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	Pos.X = 0;
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <InitPosition+0x34>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
	Pos.Y = 0;
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <InitPosition+0x34>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	705a      	strb	r2, [r3, #1]
	Pos.Car = north;
 8008e08:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <InitPosition+0x34>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	715a      	strb	r2, [r3, #5]
	Pos.Dir = front;
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <InitPosition+0x34>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	711a      	strb	r2, [r3, #4]
	Pos.Act = Wait;
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <InitPosition+0x34>)
 8008e16:	2204      	movs	r2, #4
 8008e18:	719a      	strb	r2, [r3, #6]
	Pos.WallSaf = wall_warn;//どっちにするか
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <InitPosition+0x34>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	71da      	strb	r2, [r3, #7]

}
 8008e20:	bf00      	nop
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000000 	.word	0x20000000

08008e30 <GetWallCtrlDirection>:

int GetWallCtrlDirection()
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0

	switch(Pos.Car)
 8008e34:	4ba7      	ldr	r3, [pc, #668]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008e36:	795b      	ldrb	r3, [r3, #5]
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	f200 819f 	bhi.w	800917c <GetWallCtrlDirection+0x34c>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <GetWallCtrlDirection+0x14>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008f1d 	.word	0x08008f1d
 8008e4c:	08008fe5 	.word	0x08008fe5
 8008e50:	080090ad 	.word	0x080090ad
	{
	case north:
		if(Wall[Pos.X][Pos.Y].north == wall)
 8008e54:	4b9f      	ldr	r3, [pc, #636]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4b9e      	ldr	r3, [pc, #632]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	4a9d      	ldr	r2, [pc, #628]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008e62:	460b      	mov	r3, r1
 8008e64:	00db      	lsls	r3, r3, #3
 8008e66:	440b      	add	r3, r1
 8008e68:	4403      	add	r3, r0
 8008e6a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e6e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <GetWallCtrlDirection+0x4c>
		{
			return F_WALL_PID;
 8008e78:	2308      	movs	r3, #8
 8008e7a:	e180      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 8008e7c:	4b95      	ldr	r3, [pc, #596]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	4619      	mov	r1, r3
 8008e82:	4b94      	ldr	r3, [pc, #592]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008e84:	785b      	ldrb	r3, [r3, #1]
 8008e86:	4618      	mov	r0, r3
 8008e88:	4a93      	ldr	r2, [pc, #588]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	00db      	lsls	r3, r3, #3
 8008e8e:	440b      	add	r3, r1
 8008e90:	4403      	add	r3, r0
 8008e92:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e96:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d113      	bne.n	8008ec8 <GetWallCtrlDirection+0x98>
 8008ea0:	4b8c      	ldr	r3, [pc, #560]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4b8b      	ldr	r3, [pc, #556]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008ea8:	785b      	ldrb	r3, [r3, #1]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	4a8a      	ldr	r2, [pc, #552]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008eae:	460b      	mov	r3, r1
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	440b      	add	r3, r1
 8008eb4:	4403      	add	r3, r0
 8008eb6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008eba:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <GetWallCtrlDirection+0x98>
		{
			return D_WALL_PID;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e15a      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8008ec8:	4b82      	ldr	r3, [pc, #520]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4b81      	ldr	r3, [pc, #516]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	4a80      	ldr	r2, [pc, #512]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	440b      	add	r3, r1
 8008edc:	4403      	add	r3, r0
 8008ede:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ee2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d101      	bne.n	8008ef0 <GetWallCtrlDirection+0xc0>
		{
			return R_WALL_PID;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e146      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8008ef0:	4b78      	ldr	r3, [pc, #480]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4b77      	ldr	r3, [pc, #476]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	4618      	mov	r0, r3
 8008efc:	4a76      	ldr	r2, [pc, #472]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008efe:	460b      	mov	r3, r1
 8008f00:	00db      	lsls	r3, r3, #3
 8008f02:	440b      	add	r3, r1
 8008f04:	4403      	add	r3, r0
 8008f06:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f0a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d101      	bne.n	8008f18 <GetWallCtrlDirection+0xe8>
		{
			return L_WALL_PID;
 8008f14:	2302      	movs	r3, #2
 8008f16:	e132      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else
		{
			return N_WALL_PID;
 8008f18:	2306      	movs	r3, #6
 8008f1a:	e130      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		break;

	case east:
		if(Wall[Pos.X][Pos.Y].east == wall)
 8008f1c:	4b6d      	ldr	r3, [pc, #436]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	4619      	mov	r1, r3
 8008f22:	4b6c      	ldr	r3, [pc, #432]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	4618      	mov	r0, r3
 8008f28:	4a6b      	ldr	r2, [pc, #428]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	00db      	lsls	r3, r3, #3
 8008f2e:	440b      	add	r3, r1
 8008f30:	4403      	add	r3, r0
 8008f32:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f36:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d101      	bne.n	8008f44 <GetWallCtrlDirection+0x114>
		{
			return F_WALL_PID;
 8008f40:	2308      	movs	r3, #8
 8008f42:	e11c      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//south)
 8008f44:	4b63      	ldr	r3, [pc, #396]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4b62      	ldr	r3, [pc, #392]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f4c:	785b      	ldrb	r3, [r3, #1]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	4a61      	ldr	r2, [pc, #388]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008f52:	460b      	mov	r3, r1
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	440b      	add	r3, r1
 8008f58:	4403      	add	r3, r0
 8008f5a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f5e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d113      	bne.n	8008f90 <GetWallCtrlDirection+0x160>
 8008f68:	4b5a      	ldr	r3, [pc, #360]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4b59      	ldr	r3, [pc, #356]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f70:	785b      	ldrb	r3, [r3, #1]
 8008f72:	4618      	mov	r0, r3
 8008f74:	4a58      	ldr	r2, [pc, #352]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008f76:	460b      	mov	r3, r1
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	440b      	add	r3, r1
 8008f7c:	4403      	add	r3, r0
 8008f7e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008f82:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <GetWallCtrlDirection+0x160>
		{
			return D_WALL_PID;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e0f6      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].north == wall)
 8008f90:	4b50      	ldr	r3, [pc, #320]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	4619      	mov	r1, r3
 8008f96:	4b4f      	ldr	r3, [pc, #316]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008f98:	785b      	ldrb	r3, [r3, #1]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	4a4e      	ldr	r2, [pc, #312]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	440b      	add	r3, r1
 8008fa4:	4403      	add	r3, r0
 8008fa6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008faa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d101      	bne.n	8008fb8 <GetWallCtrlDirection+0x188>
		{
			return L_WALL_PID;
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	e0e2      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].south == wall)
 8008fb8:	4b46      	ldr	r3, [pc, #280]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4b45      	ldr	r3, [pc, #276]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	4a44      	ldr	r2, [pc, #272]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	00db      	lsls	r3, r3, #3
 8008fca:	440b      	add	r3, r1
 8008fcc:	4403      	add	r3, r0
 8008fce:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008fd2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <GetWallCtrlDirection+0x1b0>
		{
			return R_WALL_PID;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e0ce      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else
		{
			return N_WALL_PID;
 8008fe0:	2306      	movs	r3, #6
 8008fe2:	e0cc      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		break;
	case south:
		if(Wall[Pos.X][Pos.Y].south == wall)
 8008fe4:	4b3b      	ldr	r3, [pc, #236]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4b3a      	ldr	r3, [pc, #232]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8008fec:	785b      	ldrb	r3, [r3, #1]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	4a39      	ldr	r2, [pc, #228]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	00db      	lsls	r3, r3, #3
 8008ff6:	440b      	add	r3, r1
 8008ff8:	4403      	add	r3, r0
 8008ffa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008ffe:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b01      	cmp	r3, #1
 8009006:	d101      	bne.n	800900c <GetWallCtrlDirection+0x1dc>
		{
			return F_WALL_PID;
 8009008:	2308      	movs	r3, #8
 800900a:	e0b8      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall && Wall[Pos.X][Pos.Y].west == wall)
 800900c:	4b31      	ldr	r3, [pc, #196]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	4619      	mov	r1, r3
 8009012:	4b30      	ldr	r3, [pc, #192]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009014:	785b      	ldrb	r3, [r3, #1]
 8009016:	4618      	mov	r0, r3
 8009018:	4a2f      	ldr	r2, [pc, #188]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 800901a:	460b      	mov	r3, r1
 800901c:	00db      	lsls	r3, r3, #3
 800901e:	440b      	add	r3, r1
 8009020:	4403      	add	r3, r0
 8009022:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009026:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b01      	cmp	r3, #1
 800902e:	d113      	bne.n	8009058 <GetWallCtrlDirection+0x228>
 8009030:	4b28      	ldr	r3, [pc, #160]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	4619      	mov	r1, r3
 8009036:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009038:	785b      	ldrb	r3, [r3, #1]
 800903a:	4618      	mov	r0, r3
 800903c:	4a26      	ldr	r2, [pc, #152]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 800903e:	460b      	mov	r3, r1
 8009040:	00db      	lsls	r3, r3, #3
 8009042:	440b      	add	r3, r1
 8009044:	4403      	add	r3, r0
 8009046:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800904a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <GetWallCtrlDirection+0x228>
		{
			return D_WALL_PID;
 8009054:	2301      	movs	r3, #1
 8009056:	e092      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].east == wall)
 8009058:	4b1e      	ldr	r3, [pc, #120]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	4619      	mov	r1, r3
 800905e:	4b1d      	ldr	r3, [pc, #116]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	4618      	mov	r0, r3
 8009064:	4a1c      	ldr	r2, [pc, #112]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 8009066:	460b      	mov	r3, r1
 8009068:	00db      	lsls	r3, r3, #3
 800906a:	440b      	add	r3, r1
 800906c:	4403      	add	r3, r0
 800906e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009072:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b01      	cmp	r3, #1
 800907a:	d101      	bne.n	8009080 <GetWallCtrlDirection+0x250>
		{
			return L_WALL_PID;
 800907c:	2302      	movs	r3, #2
 800907e:	e07e      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if(Wall[Pos.X][Pos.Y].west == wall)
 8009080:	4b14      	ldr	r3, [pc, #80]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	4619      	mov	r1, r3
 8009086:	4b13      	ldr	r3, [pc, #76]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	4618      	mov	r0, r3
 800908c:	4a12      	ldr	r2, [pc, #72]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 800908e:	460b      	mov	r3, r1
 8009090:	00db      	lsls	r3, r3, #3
 8009092:	440b      	add	r3, r1
 8009094:	4403      	add	r3, r0
 8009096:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800909a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d101      	bne.n	80090a8 <GetWallCtrlDirection+0x278>
		{
			return R_WALL_PID;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e06a      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else
		{
			return N_WALL_PID;
 80090a8:	2306      	movs	r3, #6
 80090aa:	e068      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		break;
	case west:
		if(Wall[Pos.X][Pos.Y].west == wall)
 80090ac:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	4619      	mov	r1, r3
 80090b2:	4b08      	ldr	r3, [pc, #32]	; (80090d4 <GetWallCtrlDirection+0x2a4>)
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	4618      	mov	r0, r3
 80090b8:	4a07      	ldr	r2, [pc, #28]	; (80090d8 <GetWallCtrlDirection+0x2a8>)
 80090ba:	460b      	mov	r3, r1
 80090bc:	00db      	lsls	r3, r3, #3
 80090be:	440b      	add	r3, r1
 80090c0:	4403      	add	r3, r0
 80090c2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80090c6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d105      	bne.n	80090dc <GetWallCtrlDirection+0x2ac>
		{
			return F_WALL_PID;
 80090d0:	2308      	movs	r3, #8
 80090d2:	e054      	b.n	800917e <GetWallCtrlDirection+0x34e>
 80090d4:	20000000 	.word	0x20000000
 80090d8:	200006e8 	.word	0x200006e8
		}
		else if ( Wall[Pos.X][Pos.Y].north == wall && Wall[Pos.X][Pos.Y].south == wall)//.westになってた。あと == south )で意味わからない処理に。
 80090dc:	4b2a      	ldr	r3, [pc, #168]	; (8009188 <GetWallCtrlDirection+0x358>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	4619      	mov	r1, r3
 80090e2:	4b29      	ldr	r3, [pc, #164]	; (8009188 <GetWallCtrlDirection+0x358>)
 80090e4:	785b      	ldrb	r3, [r3, #1]
 80090e6:	4618      	mov	r0, r3
 80090e8:	4a28      	ldr	r2, [pc, #160]	; (800918c <GetWallCtrlDirection+0x35c>)
 80090ea:	460b      	mov	r3, r1
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	440b      	add	r3, r1
 80090f0:	4403      	add	r3, r0
 80090f2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80090f6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d113      	bne.n	8009128 <GetWallCtrlDirection+0x2f8>
 8009100:	4b21      	ldr	r3, [pc, #132]	; (8009188 <GetWallCtrlDirection+0x358>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	4619      	mov	r1, r3
 8009106:	4b20      	ldr	r3, [pc, #128]	; (8009188 <GetWallCtrlDirection+0x358>)
 8009108:	785b      	ldrb	r3, [r3, #1]
 800910a:	4618      	mov	r0, r3
 800910c:	4a1f      	ldr	r2, [pc, #124]	; (800918c <GetWallCtrlDirection+0x35c>)
 800910e:	460b      	mov	r3, r1
 8009110:	00db      	lsls	r3, r3, #3
 8009112:	440b      	add	r3, r1
 8009114:	4403      	add	r3, r0
 8009116:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800911a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b01      	cmp	r3, #1
 8009122:	d101      	bne.n	8009128 <GetWallCtrlDirection+0x2f8>
		{
			return D_WALL_PID;
 8009124:	2301      	movs	r3, #1
 8009126:	e02a      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if ( Wall[Pos.X][Pos.Y].north == wall )
 8009128:	4b17      	ldr	r3, [pc, #92]	; (8009188 <GetWallCtrlDirection+0x358>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	4619      	mov	r1, r3
 800912e:	4b16      	ldr	r3, [pc, #88]	; (8009188 <GetWallCtrlDirection+0x358>)
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	4618      	mov	r0, r3
 8009134:	4a15      	ldr	r2, [pc, #84]	; (800918c <GetWallCtrlDirection+0x35c>)
 8009136:	460b      	mov	r3, r1
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	440b      	add	r3, r1
 800913c:	4403      	add	r3, r0
 800913e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009142:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <GetWallCtrlDirection+0x320>
		{
			return R_WALL_PID;
 800914c:	2303      	movs	r3, #3
 800914e:	e016      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else if ( Wall[Pos.X][Pos.Y].south == wall )
 8009150:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <GetWallCtrlDirection+0x358>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	4619      	mov	r1, r3
 8009156:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <GetWallCtrlDirection+0x358>)
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	4618      	mov	r0, r3
 800915c:	4a0b      	ldr	r2, [pc, #44]	; (800918c <GetWallCtrlDirection+0x35c>)
 800915e:	460b      	mov	r3, r1
 8009160:	00db      	lsls	r3, r3, #3
 8009162:	440b      	add	r3, r1
 8009164:	4403      	add	r3, r0
 8009166:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800916a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b01      	cmp	r3, #1
 8009172:	d101      	bne.n	8009178 <GetWallCtrlDirection+0x348>
		{
			return L_WALL_PID;
 8009174:	2302      	movs	r3, #2
 8009176:	e002      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		else
		{
			return N_WALL_PID;
 8009178:	2306      	movs	r3, #6
 800917a:	e000      	b.n	800917e <GetWallCtrlDirection+0x34e>
		}
		break;

	default:
		//斜め方向
		return N_WALL_PID;
 800917c:	2306      	movs	r3, #6
		break;
	}

}
 800917e:	4618      	mov	r0, r3
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	20000000 	.word	0x20000000
 800918c:	200006e8 	.word	0x200006e8

08009190 <ChangeCardinal>:

void ChangeCardinal()
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
	switch(Pos.Dir)
 8009194:	4b11      	ldr	r3, [pc, #68]	; (80091dc <ChangeCardinal+0x4c>)
 8009196:	791b      	ldrb	r3, [r3, #4]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d012      	beq.n	80091c2 <ChangeCardinal+0x32>
 800919c:	2b03      	cmp	r3, #3
 800919e:	d009      	beq.n	80091b4 <ChangeCardinal+0x24>
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d000      	beq.n	80091a6 <ChangeCardinal+0x16>
		break;
	case back:
		Pos.Car += 2;
		break;
	default:
		break;
 80091a4:	e014      	b.n	80091d0 <ChangeCardinal+0x40>
		Pos.Car ++;
 80091a6:	4b0d      	ldr	r3, [pc, #52]	; (80091dc <ChangeCardinal+0x4c>)
 80091a8:	795b      	ldrb	r3, [r3, #5]
 80091aa:	3301      	adds	r3, #1
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	4b0b      	ldr	r3, [pc, #44]	; (80091dc <ChangeCardinal+0x4c>)
 80091b0:	715a      	strb	r2, [r3, #5]
		break;
 80091b2:	e00d      	b.n	80091d0 <ChangeCardinal+0x40>
		Pos.Car --;
 80091b4:	4b09      	ldr	r3, [pc, #36]	; (80091dc <ChangeCardinal+0x4c>)
 80091b6:	795b      	ldrb	r3, [r3, #5]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	4b07      	ldr	r3, [pc, #28]	; (80091dc <ChangeCardinal+0x4c>)
 80091be:	715a      	strb	r2, [r3, #5]
		break;
 80091c0:	e006      	b.n	80091d0 <ChangeCardinal+0x40>
		Pos.Car += 2;
 80091c2:	4b06      	ldr	r3, [pc, #24]	; (80091dc <ChangeCardinal+0x4c>)
 80091c4:	795b      	ldrb	r3, [r3, #5]
 80091c6:	3302      	adds	r3, #2
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	4b04      	ldr	r3, [pc, #16]	; (80091dc <ChangeCardinal+0x4c>)
 80091cc:	715a      	strb	r2, [r3, #5]
		break;
 80091ce:	bf00      	nop
	}

}
 80091d0:	bf00      	nop
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20000000 	.word	0x20000000

080091e0 <WallSafe>:
	Pos.Car = car;
	Pos.Dir = dir;
	Pos.WallSaf = safe_or_warn;
}
void WallSafe()
{
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_safe;
 80091e4:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <WallSafe+0x14>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	71da      	strb	r2, [r3, #7]
}
 80091ea:	bf00      	nop
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	20000000 	.word	0x20000000

080091f8 <WallWarn>:
void WallWarn()
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0
	Pos.WallSaf = wall_warn;
 80091fc:	4b03      	ldr	r3, [pc, #12]	; (800920c <WallWarn+0x14>)
 80091fe:	2201      	movs	r2, #1
 8009200:	71da      	strb	r2, [r3, #7]
}
 8009202:	bf00      	nop
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	20000000 	.word	0x20000000

08009210 <ControlWall>:
void ControlWall()
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
	//直進中で
		//端の座標なら確実に型壁制御
	//斜め走行は別でアクションを定義

	//横壁制御
	int wall_ctrl_dir = GetWallCtrlDirection();	//次の座標のも返してみて、できれば連続で制御をする。
 8009216:	f7ff fe0b 	bl	8008e30 <GetWallCtrlDirection>
 800921a:	6078      	str	r0, [r7, #4]
	//割り込み中に呼ぶかアクション中に呼ぶか。アクション中の方が座標と壁の状態が確実。いや、判定が遅れると嫌だからやっぱり割り込み。移動量はflagで。

	//PIDChangeFlagStraight(N_WALL_PID);//直進flagはどれでも無い状態。制御なし。
	PIDChangeFlag(L_WALL_PID, 0);
 800921c:	2100      	movs	r1, #0
 800921e:	2002      	movs	r0, #2
 8009220:	f007 fbb2 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 8009224:	2100      	movs	r1, #0
 8009226:	2003      	movs	r0, #3
 8009228:	f007 fbae 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800922c:	2100      	movs	r1, #0
 800922e:	2001      	movs	r0, #1
 8009230:	f007 fbaa 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 8009234:	2100      	movs	r1, #0
 8009236:	2000      	movs	r0, #0
 8009238:	f007 fba6 	bl	8010988 <PIDChangeFlag>
	//アクションごとに壁制御を記述した方がいいかも

	//アクション、方向、壁安全。

	//減速の時、壁の状態
	if(Pos.Dir == front)		//区画の区切りで前方に進むと決めたあと、動作としては加速か、straight。初期状態はwaitから加速へ
 800923c:	4b7c      	ldr	r3, [pc, #496]	; (8009430 <ControlWall+0x220>)
 800923e:	791b      	ldrb	r3, [r3, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d13f      	bne.n	80092c4 <ControlWall+0xb4>
	{
		switch(Pos.Act)
 8009244:	4b7a      	ldr	r3, [pc, #488]	; (8009430 <ControlWall+0x220>)
 8009246:	799b      	ldrb	r3, [r3, #6]
 8009248:	2b05      	cmp	r3, #5
 800924a:	f200 80ec 	bhi.w	8009426 <ControlWall+0x216>
 800924e:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <ControlWall+0x44>)
 8009250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009254:	0800926d 	.word	0x0800926d
 8009258:	08009427 	.word	0x08009427
 800925c:	08009427 	.word	0x08009427
 8009260:	08009427 	.word	0x08009427
 8009264:	08009427 	.word	0x08009427
 8009268:	08009277 	.word	0x08009277
		{
		case accel:
			PIDChangeFlag( A_VELO_PID , 1);
 800926c:	2101      	movs	r1, #1
 800926e:	2000      	movs	r0, #0
 8009270:	f007 fb8a 	bl	8010988 <PIDChangeFlag>
			//一つ先の区画がわかっていて加速したいときに
			break;
 8009274:	e0d8      	b.n	8009428 <ControlWall+0x218>
		case decel:
			//減速はないけど一応今後のため。
			break;
		case straight:
			//3/3おっけーかも
			if( (wall_ctrl_dir != N_WALL_PID)  && (AddVelocity == 0) )	//左右どちらかに壁があるとき
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b06      	cmp	r3, #6
 800927a:	d01d      	beq.n	80092b8 <ControlWall+0xa8>
 800927c:	4b6d      	ldr	r3, [pc, #436]	; (8009434 <ControlWall+0x224>)
 800927e:	edd3 7a00 	vldr	s15, [r3]
 8009282:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800928a:	d115      	bne.n	80092b8 <ControlWall+0xa8>
			{
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 800928c:	4b68      	ldr	r3, [pc, #416]	; (8009430 <ControlWall+0x220>)
 800928e:	79db      	ldrb	r3, [r3, #7]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d108      	bne.n	80092a6 <ControlWall+0x96>
				{
					PIDChangeFlag(wall_ctrl_dir, 1);
 8009294:	2101      	movs	r1, #1
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f007 fb76 	bl	8010988 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 800929c:	2100      	movs	r1, #0
 800929e:	2000      	movs	r0, #0
 80092a0:	f007 fb72 	bl	8010988 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80092a4:	e00d      	b.n	80092c2 <ControlWall+0xb2>
				}
				else
				{
					PIDChangeFlag(wall_ctrl_dir, 0);
 80092a6:	2100      	movs	r1, #0
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f007 fb6d 	bl	8010988 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80092ae:	2101      	movs	r1, #1
 80092b0:	2000      	movs	r0, #0
 80092b2:	f007 fb69 	bl	8010988 <PIDChangeFlag>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80092b6:	e004      	b.n	80092c2 <ControlWall+0xb2>
				}
			}
			else
			{
				PIDChangeFlag( A_VELO_PID , 1);
 80092b8:	2101      	movs	r1, #1
 80092ba:	2000      	movs	r0, #0
 80092bc:	f007 fb64 	bl	8010988 <PIDChangeFlag>
			}
			break;
 80092c0:	e0b2      	b.n	8009428 <ControlWall+0x218>
 80092c2:	e0b1      	b.n	8009428 <ControlWall+0x218>
		//移動量がN割りのフラグ。直進は、Uターンの加減速を含まない、ただの一区画直進なので、移動量判定でできる。と思ったら分けてた?
		//Actはstraight


	}
	else if(Pos.Dir == left)	//左に行くとき
 80092c4:	4b5a      	ldr	r3, [pc, #360]	; (8009430 <ControlWall+0x220>)
 80092c6:	791b      	ldrb	r3, [r3, #4]
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d140      	bne.n	800934e <ControlWall+0x13e>
	{
		if(Pos.Act == slalom)
 80092cc:	4b58      	ldr	r3, [pc, #352]	; (8009430 <ControlWall+0x220>)
 80092ce:	799b      	ldrb	r3, [r3, #6]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d108      	bne.n	80092e6 <ControlWall+0xd6>
		{
//			PIDChangeFlag(L_WALL_PID, 0);
//			PIDChangeFlag(R_WALL_PID, 0);
//			PIDChangeFlag(D_WALL_PID, 0);
//			PIDChangeFlag( A_VELO_PID, 0);
			TargetAngularV = 0;
 80092d4:	4b58      	ldr	r3, [pc, #352]	; (8009438 <ControlWall+0x228>)
 80092d6:	f04f 0200 	mov.w	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 80092dc:	4b57      	ldr	r3, [pc, #348]	; (800943c <ControlWall+0x22c>)
 80092de:	f04f 0200 	mov.w	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]





}
 80092e4:	e0a0      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80092e6:	4b52      	ldr	r3, [pc, #328]	; (8009430 <ControlWall+0x220>)
 80092e8:	799b      	ldrb	r3, [r3, #6]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d11d      	bne.n	800932a <ControlWall+0x11a>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b06      	cmp	r3, #6
 80092f2:	d015      	beq.n	8009320 <ControlWall+0x110>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 80092f4:	4b4e      	ldr	r3, [pc, #312]	; (8009430 <ControlWall+0x220>)
 80092f6:	79db      	ldrb	r3, [r3, #7]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d108      	bne.n	800930e <ControlWall+0xfe>
					PIDChangeFlag(wall_ctrl_dir, 1);
 80092fc:	2101      	movs	r1, #1
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f007 fb42 	bl	8010988 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 8009304:	2100      	movs	r1, #0
 8009306:	2000      	movs	r0, #0
 8009308:	f007 fb3e 	bl	8010988 <PIDChangeFlag>
}
 800930c:	e08c      	b.n	8009428 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 800930e:	2100      	movs	r1, #0
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f007 fb39 	bl	8010988 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 8009316:	2101      	movs	r1, #1
 8009318:	2000      	movs	r0, #0
 800931a:	f007 fb35 	bl	8010988 <PIDChangeFlag>
}
 800931e:	e083      	b.n	8009428 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 8009320:	2101      	movs	r1, #1
 8009322:	2000      	movs	r0, #0
 8009324:	f007 fb30 	bl	8010988 <PIDChangeFlag>
}
 8009328:	e07e      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == accel)
 800932a:	4b41      	ldr	r3, [pc, #260]	; (8009430 <ControlWall+0x220>)
 800932c:	799b      	ldrb	r3, [r3, #6]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d104      	bne.n	800933c <ControlWall+0x12c>
			PIDChangeFlag( A_VELO_PID , 1);
 8009332:	2101      	movs	r1, #1
 8009334:	2000      	movs	r0, #0
 8009336:	f007 fb27 	bl	8010988 <PIDChangeFlag>
}
 800933a:	e075      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 800933c:	4b3c      	ldr	r3, [pc, #240]	; (8009430 <ControlWall+0x220>)
 800933e:	799b      	ldrb	r3, [r3, #6]
 8009340:	2b03      	cmp	r3, #3
 8009342:	d171      	bne.n	8009428 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 8009344:	2100      	movs	r1, #0
 8009346:	2000      	movs	r0, #0
 8009348:	f007 fb1e 	bl	8010988 <PIDChangeFlag>
}
 800934c:	e06c      	b.n	8009428 <ControlWall+0x218>
	else if(Pos.Dir == right)
 800934e:	4b38      	ldr	r3, [pc, #224]	; (8009430 <ControlWall+0x220>)
 8009350:	791b      	ldrb	r3, [r3, #4]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d140      	bne.n	80093d8 <ControlWall+0x1c8>
		if(Pos.Act == slalom)
 8009356:	4b36      	ldr	r3, [pc, #216]	; (8009430 <ControlWall+0x220>)
 8009358:	799b      	ldrb	r3, [r3, #6]
 800935a:	2b02      	cmp	r3, #2
 800935c:	d108      	bne.n	8009370 <ControlWall+0x160>
			TargetAngularV = 0;
 800935e:	4b36      	ldr	r3, [pc, #216]	; (8009438 <ControlWall+0x228>)
 8009360:	f04f 0200 	mov.w	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009366:	4b35      	ldr	r3, [pc, #212]	; (800943c <ControlWall+0x22c>)
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	601a      	str	r2, [r3, #0]
}
 800936e:	e05b      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 8009370:	4b2f      	ldr	r3, [pc, #188]	; (8009430 <ControlWall+0x220>)
 8009372:	799b      	ldrb	r3, [r3, #6]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d11d      	bne.n	80093b4 <ControlWall+0x1a4>
			if( wall_ctrl_dir != N_WALL_PID )	//左右どちらかに壁があるとき
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b06      	cmp	r3, #6
 800937c:	d015      	beq.n	80093aa <ControlWall+0x19a>
				if(Pos.WallSaf == wall_safe)	//90mm中なので、次の座標の壁の状態がわかっているとき(0または1である)は、
 800937e:	4b2c      	ldr	r3, [pc, #176]	; (8009430 <ControlWall+0x220>)
 8009380:	79db      	ldrb	r3, [r3, #7]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d108      	bne.n	8009398 <ControlWall+0x188>
					PIDChangeFlag(wall_ctrl_dir, 1);
 8009386:	2101      	movs	r1, #1
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f007 fafd 	bl	8010988 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID, 0);
 800938e:	2100      	movs	r1, #0
 8009390:	2000      	movs	r0, #0
 8009392:	f007 faf9 	bl	8010988 <PIDChangeFlag>
}
 8009396:	e047      	b.n	8009428 <ControlWall+0x218>
					PIDChangeFlag(wall_ctrl_dir, 0);
 8009398:	2100      	movs	r1, #0
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f007 faf4 	bl	8010988 <PIDChangeFlag>
					PIDChangeFlag( A_VELO_PID , 1);
 80093a0:	2101      	movs	r1, #1
 80093a2:	2000      	movs	r0, #0
 80093a4:	f007 faf0 	bl	8010988 <PIDChangeFlag>
}
 80093a8:	e03e      	b.n	8009428 <ControlWall+0x218>
				PIDChangeFlag( A_VELO_PID , 1);
 80093aa:	2101      	movs	r1, #1
 80093ac:	2000      	movs	r0, #0
 80093ae:	f007 faeb 	bl	8010988 <PIDChangeFlag>
}
 80093b2:	e039      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == accel)
 80093b4:	4b1e      	ldr	r3, [pc, #120]	; (8009430 <ControlWall+0x220>)
 80093b6:	799b      	ldrb	r3, [r3, #6]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <ControlWall+0x1b6>
			PIDChangeFlag( A_VELO_PID , 1);
 80093bc:	2101      	movs	r1, #1
 80093be:	2000      	movs	r0, #0
 80093c0:	f007 fae2 	bl	8010988 <PIDChangeFlag>
}
 80093c4:	e030      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == rotate)
 80093c6:	4b1a      	ldr	r3, [pc, #104]	; (8009430 <ControlWall+0x220>)
 80093c8:	799b      	ldrb	r3, [r3, #6]
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d12c      	bne.n	8009428 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 0);
 80093ce:	2100      	movs	r1, #0
 80093d0:	2000      	movs	r0, #0
 80093d2:	f007 fad9 	bl	8010988 <PIDChangeFlag>
}
 80093d6:	e027      	b.n	8009428 <ControlWall+0x218>
	else if(Pos.Dir == back)
 80093d8:	4b15      	ldr	r3, [pc, #84]	; (8009430 <ControlWall+0x220>)
 80093da:	791b      	ldrb	r3, [r3, #4]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d123      	bne.n	8009428 <ControlWall+0x218>
		if(Pos.Act == decel)	//減速するときだけ壁制御をオン。
 80093e0:	4b13      	ldr	r3, [pc, #76]	; (8009430 <ControlWall+0x220>)
 80093e2:	799b      	ldrb	r3, [r3, #6]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d115      	bne.n	8009414 <ControlWall+0x204>
			if(Pos.WallSaf == wall_safe)	//フラグ作る。前に壁が無いパターンの減速は、後半の壁の状態の影響を受けることがある。35*0.5mmが目安か。
 80093e8:	4b11      	ldr	r3, [pc, #68]	; (8009430 <ControlWall+0x220>)
 80093ea:	79db      	ldrb	r3, [r3, #7]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d108      	bne.n	8009402 <ControlWall+0x1f2>
				PIDChangeFlag(wall_ctrl_dir , 1);
 80093f0:	2101      	movs	r1, #1
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f007 fac8 	bl	8010988 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID, 0);
 80093f8:	2100      	movs	r1, #0
 80093fa:	2000      	movs	r0, #0
 80093fc:	f007 fac4 	bl	8010988 <PIDChangeFlag>
}
 8009400:	e012      	b.n	8009428 <ControlWall+0x218>
				PIDChangeFlag(wall_ctrl_dir, 0);
 8009402:	2100      	movs	r1, #0
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f007 fabf 	bl	8010988 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 800940a:	2101      	movs	r1, #1
 800940c:	2000      	movs	r0, #0
 800940e:	f007 fabb 	bl	8010988 <PIDChangeFlag>
}
 8009412:	e009      	b.n	8009428 <ControlWall+0x218>
		else if(Pos.Act == accel)
 8009414:	4b06      	ldr	r3, [pc, #24]	; (8009430 <ControlWall+0x220>)
 8009416:	799b      	ldrb	r3, [r3, #6]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d105      	bne.n	8009428 <ControlWall+0x218>
			PIDChangeFlag( A_VELO_PID , 1);
 800941c:	2101      	movs	r1, #1
 800941e:	2000      	movs	r0, #0
 8009420:	f007 fab2 	bl	8010988 <PIDChangeFlag>
}
 8009424:	e000      	b.n	8009428 <ControlWall+0x218>
			break;
 8009426:	bf00      	nop
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	20000000 	.word	0x20000000
 8009434:	200004f8 	.word	0x200004f8
 8009438:	200004fc 	.word	0x200004fc
 800943c:	20000230 	.word	0x20000230

08009440 <WaitStopAndReset>:
//	KeepCounter[LEFT] = INITIAL_PULSE;
//	KeepCounter[RIGHT] = INITIAL_PULSE;
//}

void WaitStopAndReset()
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
	Pos.Act = Wait;
 8009444:	4b17      	ldr	r3, [pc, #92]	; (80094a4 <WaitStopAndReset+0x64>)
 8009446:	2204      	movs	r2, #4
 8009448:	719a      	strb	r2, [r3, #6]
	ControlWall();//ベイブレード対策
 800944a:	f7ff fee1 	bl	8009210 <ControlWall>
	do
	{

		//壁制御の更新
		TargetVelocity[BODY] = 0;
 800944e:	4b16      	ldr	r3, [pc, #88]	; (80094a8 <WaitStopAndReset+0x68>)
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	609a      	str	r2, [r3, #8]
		Acceleration = 0;
 8009456:	4b15      	ldr	r3, [pc, #84]	; (80094ac <WaitStopAndReset+0x6c>)
 8009458:	f04f 0200 	mov.w	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
		//PIDChangeFlag( D_, 0);
		TargetAngularV = 0;
 800945e:	4b14      	ldr	r3, [pc, #80]	; (80094b0 <WaitStopAndReset+0x70>)
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
		AngularAcceleration = 0;
 8009466:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <WaitStopAndReset+0x74>)
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
		//AngularV = 0;
		if(CurrentVelocity[LEFT] > 500)
 800946e:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <WaitStopAndReset+0x78>)
 8009470:	edd3 7a00 	vldr	s15, [r3]
 8009474:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80094bc <WaitStopAndReset+0x7c>
 8009478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800947c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009480:	dd02      	ble.n	8009488 <WaitStopAndReset+0x48>
			printf("回転停止中\r\n");
 8009482:	480f      	ldr	r0, [pc, #60]	; (80094c0 <WaitStopAndReset+0x80>)
 8009484:	f00d fca6 	bl	8016dd4 <puts>

	}while(CurrentVelocity[BODY] != 0);
 8009488:	4b0b      	ldr	r3, [pc, #44]	; (80094b8 <WaitStopAndReset+0x78>)
 800948a:	edd3 7a02 	vldr	s15, [r3, #8]
 800948e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009496:	d1da      	bne.n	800944e <WaitStopAndReset+0xe>
	HAL_Delay(100);
 8009498:	2064      	movs	r0, #100	; 0x64
 800949a:	f007 fdb9 	bl	8011010 <HAL_Delay>
}
 800949e:	bf00      	nop
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20000000 	.word	0x20000000
 80094a8:	200004ec 	.word	0x200004ec
 80094ac:	2000022c 	.word	0x2000022c
 80094b0:	200004fc 	.word	0x200004fc
 80094b4:	20000230 	.word	0x20000230
 80094b8:	2000052c 	.word	0x2000052c
 80094bc:	43fa0000 	.word	0x43fa0000
 80094c0:	0801b0a8 	.word	0x0801b0a8
 80094c4:	00000000 	.word	0x00000000

080094c8 <Rotate>:
	//向いた方角を変える
	ChangeCardinal();
	//printf("回転終了\r\n");
}
void Rotate(float deg, float ang_v)
{
 80094c8:	b590      	push	{r4, r7, lr}
 80094ca:	b08d      	sub	sp, #52	; 0x34
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80094d2:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = rotate;
 80094d6:	4bb2      	ldr	r3, [pc, #712]	; (80097a0 <Rotate+0x2d8>)
 80094d8:	2203      	movs	r2, #3
 80094da:	719a      	strb	r2, [r3, #6]
	WallWarn();
 80094dc:	f7ff fe8c 	bl	80091f8 <WallWarn>
	ControlWall(); //壁の読み間違いによる制御方式選択ミスで角加速から抜け出せないか、角度がリセットされている。
 80094e0:	f7ff fe96 	bl	8009210 <ControlWall>
	TargetAngularV = 0;
 80094e4:	4baf      	ldr	r3, [pc, #700]	; (80097a4 <Rotate+0x2dc>)
 80094e6:	f04f 0200 	mov.w	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
	//加速度が一定。角速度が増加。角速度を積分して角度。角速度の式を作り、角速度を積分して角度を求める等式を立てる。
	//Angle = インテグラル(ang_v(t))dt
	//v = v0+at	|	t=v/a	||		ang_v = ang_v0 + ang_accel *t		||	t = ang_v/ang_accel
	//x=0.5*v*v/a	|	a = 0.5*v*v*/x		||		θ=ang_v0*t+0.5*ang_v^2/ang_accel	||	ang_accel =
	//加速度(mm/((ms)^2)) =  割り込み周期(1ms)*到達速度*到達速度(((mm/s)^2)) /(2*移動距離) x = v0t + 0.5at^2 →	a=2*(x-v0*t)/t^2 	a = t*vv/(2*x)
	float accel_deg = deg*30/90;
 80094ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80094f0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80094f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80094f8:	eddf 6aab 	vldr	s13, [pc, #684]	; 80097a8 <Rotate+0x2e0>
 80094fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009500:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float const_deg = deg*30/90;
 8009504:	edd7 7a01 	vldr	s15, [r7, #4]
 8009508:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800950c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009510:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80097a8 <Rotate+0x2e0>
 8009514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009518:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float decel_deg = deg*30/90;
 800951c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009520:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8009524:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009528:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80097a8 <Rotate+0x2e0>
 800952c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009530:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float angular_acceleration[3] = {
			64*T1*ang_v*ang_v / (2*accel_deg),
 8009534:	edd7 7a00 	vldr	s15, [r7]
 8009538:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80097ac <Rotate+0x2e4>
 800953c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009540:	edd7 7a00 	vldr	s15, [r7]
 8009544:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009548:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800954c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009550:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 8009554:	edc7 7a05 	vstr	s15, [r7, #20]
 8009558:	f04f 0300 	mov.w	r3, #0
 800955c:	61bb      	str	r3, [r7, #24]
			0,
			64*T1*ang_v*ang_v / (2*decel_deg)
 800955e:	edd7 7a00 	vldr	s15, [r7]
 8009562:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80097ac <Rotate+0x2e4>
 8009566:	ee27 7a87 	vmul.f32	s14, s15, s14
 800956a:	edd7 7a00 	vldr	s15, [r7]
 800956e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009572:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009576:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800957a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float angular_acceleration[3] = {
 800957e:	edc7 7a07 	vstr	s15, [r7, #28]
	};
	float move_angle[3] = {
			accel_deg * M_PI/ 180, //ラジアンに直してる
 8009582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009584:	f7fe ff18 	bl	80083b8 <__aeabi_f2d>
 8009588:	a383      	add	r3, pc, #524	; (adr r3, 8009798 <Rotate+0x2d0>)
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	f7fe ff6b 	bl	8008468 <__aeabi_dmul>
 8009592:	4603      	mov	r3, r0
 8009594:	460c      	mov	r4, r1
 8009596:	4618      	mov	r0, r3
 8009598:	4621      	mov	r1, r4
 800959a:	f04f 0200 	mov.w	r2, #0
 800959e:	4b84      	ldr	r3, [pc, #528]	; (80097b0 <Rotate+0x2e8>)
 80095a0:	f7ff f88c 	bl	80086bc <__aeabi_ddiv>
 80095a4:	4603      	mov	r3, r0
 80095a6:	460c      	mov	r4, r1
 80095a8:	4618      	mov	r0, r3
 80095aa:	4621      	mov	r1, r4
 80095ac:	f7ff fa54 	bl	8008a58 <__aeabi_d2f>
 80095b0:	4603      	mov	r3, r0
	float move_angle[3] = {
 80095b2:	60bb      	str	r3, [r7, #8]
			const_deg * M_PI/ 180,
 80095b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b6:	f7fe feff 	bl	80083b8 <__aeabi_f2d>
 80095ba:	a377      	add	r3, pc, #476	; (adr r3, 8009798 <Rotate+0x2d0>)
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	f7fe ff52 	bl	8008468 <__aeabi_dmul>
 80095c4:	4603      	mov	r3, r0
 80095c6:	460c      	mov	r4, r1
 80095c8:	4618      	mov	r0, r3
 80095ca:	4621      	mov	r1, r4
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	4b77      	ldr	r3, [pc, #476]	; (80097b0 <Rotate+0x2e8>)
 80095d2:	f7ff f873 	bl	80086bc <__aeabi_ddiv>
 80095d6:	4603      	mov	r3, r0
 80095d8:	460c      	mov	r4, r1
 80095da:	4618      	mov	r0, r3
 80095dc:	4621      	mov	r1, r4
 80095de:	f7ff fa3b 	bl	8008a58 <__aeabi_d2f>
 80095e2:	4603      	mov	r3, r0
	float move_angle[3] = {
 80095e4:	60fb      	str	r3, [r7, #12]
			decel_deg * M_PI/ 180,
 80095e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095e8:	f7fe fee6 	bl	80083b8 <__aeabi_f2d>
 80095ec:	a36a      	add	r3, pc, #424	; (adr r3, 8009798 <Rotate+0x2d0>)
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	f7fe ff39 	bl	8008468 <__aeabi_dmul>
 80095f6:	4603      	mov	r3, r0
 80095f8:	460c      	mov	r4, r1
 80095fa:	4618      	mov	r0, r3
 80095fc:	4621      	mov	r1, r4
 80095fe:	f04f 0200 	mov.w	r2, #0
 8009602:	4b6b      	ldr	r3, [pc, #428]	; (80097b0 <Rotate+0x2e8>)
 8009604:	f7ff f85a 	bl	80086bc <__aeabi_ddiv>
 8009608:	4603      	mov	r3, r0
 800960a:	460c      	mov	r4, r1
 800960c:	4618      	mov	r0, r3
 800960e:	4621      	mov	r1, r4
 8009610:	f7ff fa22 	bl	8008a58 <__aeabi_d2f>
 8009614:	4603      	mov	r3, r0
	float move_angle[3] = {
 8009616:	613b      	str	r3, [r7, #16]
		}

	}
#endif

	if( ang_v > 0)	//右回転
 8009618:	edd7 7a00 	vldr	s15, [r7]
 800961c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009624:	dd57      	ble.n	80096d6 <Rotate+0x20e>
	{
		TargetAngle += move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009626:	ed97 7a02 	vldr	s14, [r7, #8]
 800962a:	4b62      	ldr	r3, [pc, #392]	; (80097b4 <Rotate+0x2ec>)
 800962c:	edd3 7a00 	vldr	s15, [r3]
 8009630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009634:	4b5f      	ldr	r3, [pc, #380]	; (80097b4 <Rotate+0x2ec>)
 8009636:	edc3 7a00 	vstr	s15, [r3]

		//ここのwhileが抜けないことがある
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 800963a:	e002      	b.n	8009642 <Rotate+0x17a>
		{
			AngularAcceleration = angular_acceleration[0]; //ここまで
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	4a5e      	ldr	r2, [pc, #376]	; (80097b8 <Rotate+0x2f0>)
 8009640:	6013      	str	r3, [r2, #0]
		while( (TargetAngle > Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009642:	4b5c      	ldr	r3, [pc, #368]	; (80097b4 <Rotate+0x2ec>)
 8009644:	ed93 7a00 	vldr	s14, [r3]
 8009648:	4b5c      	ldr	r3, [pc, #368]	; (80097bc <Rotate+0x2f4>)
 800964a:	edd3 7a00 	vldr	s15, [r3]
 800964e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009656:	dcf1      	bgt.n	800963c <Rotate+0x174>
		}
		TargetAngle += move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009658:	ed97 7a03 	vldr	s14, [r7, #12]
 800965c:	4b55      	ldr	r3, [pc, #340]	; (80097b4 <Rotate+0x2ec>)
 800965e:	edd3 7a00 	vldr	s15, [r3]
 8009662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009666:	4b53      	ldr	r3, [pc, #332]	; (80097b4 <Rotate+0x2ec>)
 8009668:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle > Angle)
 800966c:	e002      	b.n	8009674 <Rotate+0x1ac>
		{
			AngularAcceleration = angular_acceleration[1];//0
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	4a51      	ldr	r2, [pc, #324]	; (80097b8 <Rotate+0x2f0>)
 8009672:	6013      	str	r3, [r2, #0]
		while(TargetAngle > Angle)
 8009674:	4b4f      	ldr	r3, [pc, #316]	; (80097b4 <Rotate+0x2ec>)
 8009676:	ed93 7a00 	vldr	s14, [r3]
 800967a:	4b50      	ldr	r3, [pc, #320]	; (80097bc <Rotate+0x2f4>)
 800967c:	edd3 7a00 	vldr	s15, [r3]
 8009680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009688:	dcf1      	bgt.n	800966e <Rotate+0x1a6>
		}
		TargetAngle += move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800968a:	ed97 7a04 	vldr	s14, [r7, #16]
 800968e:	4b49      	ldr	r3, [pc, #292]	; (80097b4 <Rotate+0x2ec>)
 8009690:	edd3 7a00 	vldr	s15, [r3]
 8009694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009698:	4b46      	ldr	r3, [pc, #280]	; (80097b4 <Rotate+0x2ec>)
 800969a:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle > Angle)
 800969e:	e00e      	b.n	80096be <Rotate+0x1f6>
		{
			 AngularAcceleration = -angular_acceleration[2];
 80096a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80096a4:	eef1 7a67 	vneg.f32	s15, s15
 80096a8:	4b43      	ldr	r3, [pc, #268]	; (80097b8 <Rotate+0x2f0>)
 80096aa:	edc3 7a00 	vstr	s15, [r3]
			 if( AngularV <= 0)
 80096ae:	4b44      	ldr	r3, [pc, #272]	; (80097c0 <Rotate+0x2f8>)
 80096b0:	edd3 7a00 	vldr	s15, [r3]
 80096b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096bc:	d96a      	bls.n	8009794 <Rotate+0x2cc>
		while(TargetAngle > Angle)
 80096be:	4b3d      	ldr	r3, [pc, #244]	; (80097b4 <Rotate+0x2ec>)
 80096c0:	ed93 7a00 	vldr	s14, [r3]
 80096c4:	4b3d      	ldr	r3, [pc, #244]	; (80097bc <Rotate+0x2f4>)
 80096c6:	edd3 7a00 	vldr	s15, [r3]
 80096ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80096ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d2:	dce5      	bgt.n	80096a0 <Rotate+0x1d8>
 80096d4:	e077      	b.n	80097c6 <Rotate+0x2fe>
				 break;
			 }
		}

	}
	else if( ang_v < 0)
 80096d6:	edd7 7a00 	vldr	s15, [r7]
 80096da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e2:	d570      	bpl.n	80097c6 <Rotate+0x2fe>
	{
		TargetAngle -= move_angle[0];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 80096e4:	4b33      	ldr	r3, [pc, #204]	; (80097b4 <Rotate+0x2ec>)
 80096e6:	ed93 7a00 	vldr	s14, [r3]
 80096ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80096ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096f2:	4b30      	ldr	r3, [pc, #192]	; (80097b4 <Rotate+0x2ec>)
 80096f4:	edc3 7a00 	vstr	s15, [r3]

		//ここのwhileが抜けないことがある
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 80096f8:	e006      	b.n	8009708 <Rotate+0x240>
		{
			AngularAcceleration = -angular_acceleration[0]; //ここまで
 80096fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80096fe:	eef1 7a67 	vneg.f32	s15, s15
 8009702:	4b2d      	ldr	r3, [pc, #180]	; (80097b8 <Rotate+0x2f0>)
 8009704:	edc3 7a00 	vstr	s15, [r3]
		while( (TargetAngle < Angle) /*&& (( ( keep_pulse[LEFT]+move_pulse ) > ( TotalPulse[LEFT] ) ) && ( ( keep_pulse[RIGHT]-move_pulse ) < ( TotalPulse[RIGHT] ) ) )*/)
 8009708:	4b2a      	ldr	r3, [pc, #168]	; (80097b4 <Rotate+0x2ec>)
 800970a:	ed93 7a00 	vldr	s14, [r3]
 800970e:	4b2b      	ldr	r3, [pc, #172]	; (80097bc <Rotate+0x2f4>)
 8009710:	edd3 7a00 	vldr	s15, [r3]
 8009714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971c:	d4ed      	bmi.n	80096fa <Rotate+0x232>
		}
		TargetAngle -= move_angle[1];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 800971e:	4b25      	ldr	r3, [pc, #148]	; (80097b4 <Rotate+0x2ec>)
 8009720:	ed93 7a00 	vldr	s14, [r3]
 8009724:	edd7 7a03 	vldr	s15, [r7, #12]
 8009728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800972c:	4b21      	ldr	r3, [pc, #132]	; (80097b4 <Rotate+0x2ec>)
 800972e:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 8009732:	e002      	b.n	800973a <Rotate+0x272>
		{
			AngularAcceleration = angular_acceleration[1];//0
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	4a20      	ldr	r2, [pc, #128]	; (80097b8 <Rotate+0x2f0>)
 8009738:	6013      	str	r3, [r2, #0]
		while(TargetAngle < Angle)
 800973a:	4b1e      	ldr	r3, [pc, #120]	; (80097b4 <Rotate+0x2ec>)
 800973c:	ed93 7a00 	vldr	s14, [r3]
 8009740:	4b1e      	ldr	r3, [pc, #120]	; (80097bc <Rotate+0x2f4>)
 8009742:	edd3 7a00 	vldr	s15, [r3]
 8009746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800974a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800974e:	d4f1      	bmi.n	8009734 <Rotate+0x26c>
		}
		TargetAngle -= move_angle[2];//回転量がおかしい問題 : 現在の角度+移動量 = 目標角度 になっていたので回転開始時のブレが影響する
 8009750:	4b18      	ldr	r3, [pc, #96]	; (80097b4 <Rotate+0x2ec>)
 8009752:	ed93 7a00 	vldr	s14, [r3]
 8009756:	edd7 7a04 	vldr	s15, [r7, #16]
 800975a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800975e:	4b15      	ldr	r3, [pc, #84]	; (80097b4 <Rotate+0x2ec>)
 8009760:	edc3 7a00 	vstr	s15, [r3]

		while(TargetAngle < Angle)
 8009764:	e00a      	b.n	800977c <Rotate+0x2b4>
		{
			 AngularAcceleration = angular_acceleration[2];
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	4a13      	ldr	r2, [pc, #76]	; (80097b8 <Rotate+0x2f0>)
 800976a:	6013      	str	r3, [r2, #0]
			 if( AngularV >= 0)
 800976c:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <Rotate+0x2f8>)
 800976e:	edd3 7a00 	vldr	s15, [r3]
 8009772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800977a:	da23      	bge.n	80097c4 <Rotate+0x2fc>
		while(TargetAngle < Angle)
 800977c:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <Rotate+0x2ec>)
 800977e:	ed93 7a00 	vldr	s14, [r3]
 8009782:	4b0e      	ldr	r3, [pc, #56]	; (80097bc <Rotate+0x2f4>)
 8009784:	edd3 7a00 	vldr	s15, [r3]
 8009788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800978c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009790:	d4e9      	bmi.n	8009766 <Rotate+0x29e>
 8009792:	e018      	b.n	80097c6 <Rotate+0x2fe>
				 break;
 8009794:	bf00      	nop
 8009796:	e016      	b.n	80097c6 <Rotate+0x2fe>
 8009798:	54442d18 	.word	0x54442d18
 800979c:	400921fb 	.word	0x400921fb
 80097a0:	20000000 	.word	0x20000000
 80097a4:	200004fc 	.word	0x200004fc
 80097a8:	42b40000 	.word	0x42b40000
 80097ac:	3d83126f 	.word	0x3d83126f
 80097b0:	40668000 	.word	0x40668000
 80097b4:	20000518 	.word	0x20000518
 80097b8:	20000230 	.word	0x20000230
 80097bc:	20000228 	.word	0x20000228
 80097c0:	20000224 	.word	0x20000224
			 {
			 		break;
 80097c4:	bf00      	nop
			 }
		}

	}
	AngularAcceleration = 0;
 80097c6:	4b32      	ldr	r3, [pc, #200]	; (8009890 <Rotate+0x3c8>)
 80097c8:	f04f 0200 	mov.w	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
	//TargetAngularV = 0;
	//printf("加速後の角速度 : %f\r\n",AngularV);//1.74だった。
	//printf("加速後の角加速度 : %f\r\n",AngularAcceleration);

	WaitStopAndReset();
 80097ce:	f7ff fe37 	bl	8009440 <WaitStopAndReset>
	ControlWall();
 80097d2:	f7ff fd1d 	bl	8009210 <ControlWall>
	int target_pulse = (int)( (deg/360) * ROTATE_PULSE);
 80097d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80097da:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8009894 <Rotate+0x3cc>
 80097de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097e2:	ee16 0a90 	vmov	r0, s13
 80097e6:	f7fe fde7 	bl	80083b8 <__aeabi_f2d>
 80097ea:	a327      	add	r3, pc, #156	; (adr r3, 8009888 <Rotate+0x3c0>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	f7fe fe3a 	bl	8008468 <__aeabi_dmul>
 80097f4:	4603      	mov	r3, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	4618      	mov	r0, r3
 80097fa:	4621      	mov	r1, r4
 80097fc:	f7ff f8e4 	bl	80089c8 <__aeabi_d2iz>
 8009800:	4603      	mov	r3, r0
 8009802:	623b      	str	r3, [r7, #32]
	if(ang_v < 0)
 8009804:	edd7 7a00 	vldr	s15, [r7]
 8009808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800980c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009810:	d513      	bpl.n	800983a <Rotate+0x372>
	{
		KeepPulse[LEFT] -= target_pulse/2;
 8009812:	4b21      	ldr	r3, [pc, #132]	; (8009898 <Rotate+0x3d0>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	0fd9      	lsrs	r1, r3, #31
 800981a:	440b      	add	r3, r1
 800981c:	105b      	asrs	r3, r3, #1
 800981e:	425b      	negs	r3, r3
 8009820:	4413      	add	r3, r2
 8009822:	4a1d      	ldr	r2, [pc, #116]	; (8009898 <Rotate+0x3d0>)
 8009824:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] += target_pulse/2;
 8009826:	4b1c      	ldr	r3, [pc, #112]	; (8009898 <Rotate+0x3d0>)
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	0fd9      	lsrs	r1, r3, #31
 800982e:	440b      	add	r3, r1
 8009830:	105b      	asrs	r3, r3, #1
 8009832:	4413      	add	r3, r2
 8009834:	4a18      	ldr	r2, [pc, #96]	; (8009898 <Rotate+0x3d0>)
 8009836:	6053      	str	r3, [r2, #4]
 8009838:	e019      	b.n	800986e <Rotate+0x3a6>
	}
	else 	if(ang_v > 0)
 800983a:	edd7 7a00 	vldr	s15, [r7]
 800983e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009846:	dd12      	ble.n	800986e <Rotate+0x3a6>
	{
		KeepPulse[LEFT] += target_pulse/2;
 8009848:	4b13      	ldr	r3, [pc, #76]	; (8009898 <Rotate+0x3d0>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	0fd9      	lsrs	r1, r3, #31
 8009850:	440b      	add	r3, r1
 8009852:	105b      	asrs	r3, r3, #1
 8009854:	4413      	add	r3, r2
 8009856:	4a10      	ldr	r2, [pc, #64]	; (8009898 <Rotate+0x3d0>)
 8009858:	6013      	str	r3, [r2, #0]
		KeepPulse[RIGHT] -= target_pulse/2;
 800985a:	4b0f      	ldr	r3, [pc, #60]	; (8009898 <Rotate+0x3d0>)
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	0fd9      	lsrs	r1, r3, #31
 8009862:	440b      	add	r3, r1
 8009864:	105b      	asrs	r3, r3, #1
 8009866:	425b      	negs	r3, r3
 8009868:	4413      	add	r3, r2
 800986a:	4a0b      	ldr	r2, [pc, #44]	; (8009898 <Rotate+0x3d0>)
 800986c:	6053      	str	r3, [r2, #4]
	}
	KeepPulse[BODY] = KeepPulse[BODY];
 800986e:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <Rotate+0x3d0>)
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	4a09      	ldr	r2, [pc, #36]	; (8009898 <Rotate+0x3d0>)
 8009874:	6093      	str	r3, [r2, #8]

	//向いた方角を変える
	ChangeCardinal();
 8009876:	f7ff fc8b 	bl	8009190 <ChangeCardinal>
	//printf("回転終了\r\n");
}
 800987a:	bf00      	nop
 800987c:	3734      	adds	r7, #52	; 0x34
 800987e:	46bd      	mov	sp, r7
 8009880:	bd90      	pop	{r4, r7, pc}
 8009882:	bf00      	nop
 8009884:	f3af 8000 	nop.w
 8009888:	cb326649 	.word	0xcb326649
 800988c:	40fa15d6 	.word	0x40fa15d6
 8009890:	20000230 	.word	0x20000230
 8009894:	43b40000 	.word	0x43b40000
 8009898:	20000554 	.word	0x20000554

0800989c <getFrontWall>:
{

}

int getFrontWall()
{
 800989c:	b480      	push	{r7}
 800989e:	af00      	add	r7, sp, #0

	switch(Pos.Car)//方角に合わせて、
 80098a0:	4b2d      	ldr	r3, [pc, #180]	; (8009958 <getFrontWall+0xbc>)
 80098a2:	795b      	ldrb	r3, [r3, #5]
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d84f      	bhi.n	8009948 <getFrontWall+0xac>
 80098a8:	a201      	add	r2, pc, #4	; (adr r2, 80098b0 <getFrontWall+0x14>)
 80098aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ae:	bf00      	nop
 80098b0:	080098c1 	.word	0x080098c1
 80098b4:	080098e3 	.word	0x080098e3
 80098b8:	08009905 	.word	0x08009905
 80098bc:	08009927 	.word	0x08009927
	{

	case north:

	return Wall[Pos.X][Pos.Y].north;
 80098c0:	4b25      	ldr	r3, [pc, #148]	; (8009958 <getFrontWall+0xbc>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	4619      	mov	r1, r3
 80098c6:	4b24      	ldr	r3, [pc, #144]	; (8009958 <getFrontWall+0xbc>)
 80098c8:	785b      	ldrb	r3, [r3, #1]
 80098ca:	4618      	mov	r0, r3
 80098cc:	4a23      	ldr	r2, [pc, #140]	; (800995c <getFrontWall+0xc0>)
 80098ce:	460b      	mov	r3, r1
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	440b      	add	r3, r1
 80098d4:	4403      	add	r3, r0
 80098d6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80098da:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	e034      	b.n	800994c <getFrontWall+0xb0>

	break;

	case east:

	return Wall[Pos.X][Pos.Y].east;
 80098e2:	4b1d      	ldr	r3, [pc, #116]	; (8009958 <getFrontWall+0xbc>)
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	4619      	mov	r1, r3
 80098e8:	4b1b      	ldr	r3, [pc, #108]	; (8009958 <getFrontWall+0xbc>)
 80098ea:	785b      	ldrb	r3, [r3, #1]
 80098ec:	4618      	mov	r0, r3
 80098ee:	4a1b      	ldr	r2, [pc, #108]	; (800995c <getFrontWall+0xc0>)
 80098f0:	460b      	mov	r3, r1
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	440b      	add	r3, r1
 80098f6:	4403      	add	r3, r0
 80098f8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80098fc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009900:	b2db      	uxtb	r3, r3
 8009902:	e023      	b.n	800994c <getFrontWall+0xb0>

	break;

	case south:

	return Wall[Pos.X][Pos.Y].south;
 8009904:	4b14      	ldr	r3, [pc, #80]	; (8009958 <getFrontWall+0xbc>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	4619      	mov	r1, r3
 800990a:	4b13      	ldr	r3, [pc, #76]	; (8009958 <getFrontWall+0xbc>)
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	4618      	mov	r0, r3
 8009910:	4a12      	ldr	r2, [pc, #72]	; (800995c <getFrontWall+0xc0>)
 8009912:	460b      	mov	r3, r1
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	440b      	add	r3, r1
 8009918:	4403      	add	r3, r0
 800991a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800991e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009922:	b2db      	uxtb	r3, r3
 8009924:	e012      	b.n	800994c <getFrontWall+0xb0>

	break;

	case west:

	return Wall[Pos.X][Pos.Y].west;
 8009926:	4b0c      	ldr	r3, [pc, #48]	; (8009958 <getFrontWall+0xbc>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	4619      	mov	r1, r3
 800992c:	4b0a      	ldr	r3, [pc, #40]	; (8009958 <getFrontWall+0xbc>)
 800992e:	785b      	ldrb	r3, [r3, #1]
 8009930:	4618      	mov	r0, r3
 8009932:	4a0a      	ldr	r2, [pc, #40]	; (800995c <getFrontWall+0xc0>)
 8009934:	460b      	mov	r3, r1
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	440b      	add	r3, r1
 800993a:	4403      	add	r3, r0
 800993c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009940:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009944:	b2db      	uxtb	r3, r3
 8009946:	e001      	b.n	800994c <getFrontWall+0xb0>

	break;

	default:
		return 999;
 8009948:	f240 33e7 	movw	r3, #999	; 0x3e7
	break;

	}

}
 800994c:	4618      	mov	r0, r3
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	20000000 	.word	0x20000000
 800995c:	200006e8 	.word	0x200006e8

08009960 <SlalomRight>:
//}

//引数にデータを格納するタイミングは割り込みだけとか、1か所に集約する
//2点間の座標から、移動量を算出
void SlalomRight()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009960:	b5b0      	push	{r4, r5, r7, lr}
 8009962:	b08a      	sub	sp, #40	; 0x28
 8009964:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009966:	4baa      	ldr	r3, [pc, #680]	; (8009c10 <SlalomRight+0x2b0>)
 8009968:	2202      	movs	r2, #2
 800996a:	719a      	strb	r2, [r3, #6]
	ControlWall();
 800996c:	f7ff fc50 	bl	8009210 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009970:	4ba8      	ldr	r3, [pc, #672]	; (8009c14 <SlalomRight+0x2b4>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009976:	4ba8      	ldr	r3, [pc, #672]	; (8009c18 <SlalomRight+0x2b8>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 800997c:	4ba6      	ldr	r3, [pc, #664]	; (8009c18 <SlalomRight+0x2b8>)
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	61fb      	str	r3, [r7, #28]
	float alpha_turn = Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度
 8009982:	4ba5      	ldr	r3, [pc, #660]	; (8009c18 <SlalomRight+0x2b8>)
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	61bb      	str	r3, [r7, #24]
	//float alalpha_turn = Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009988:	4ba3      	ldr	r3, [pc, #652]	; (8009c18 <SlalomRight+0x2b8>)
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe fd13 	bl	80083b8 <__aeabi_f2d>
 8009992:	a39b      	add	r3, pc, #620	; (adr r3, 8009c00 <SlalomRight+0x2a0>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7fe fd66 	bl	8008468 <__aeabi_dmul>
 800999c:	4603      	mov	r3, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	4618      	mov	r0, r3
 80099a2:	4621      	mov	r1, r4
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	4b9c      	ldr	r3, [pc, #624]	; (8009c1c <SlalomRight+0x2bc>)
 80099aa:	f7fe fe87 	bl	80086bc <__aeabi_ddiv>
 80099ae:	4603      	mov	r3, r0
 80099b0:	460c      	mov	r4, r1
 80099b2:	4618      	mov	r0, r3
 80099b4:	4621      	mov	r1, r4
 80099b6:	f7ff f84f 	bl	8008a58 <__aeabi_d2f>
 80099ba:	4603      	mov	r3, r0
 80099bc:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 80099be:	4b96      	ldr	r3, [pc, #600]	; (8009c18 <SlalomRight+0x2b8>)
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fcf8 	bl	80083b8 <__aeabi_f2d>
 80099c8:	a38d      	add	r3, pc, #564	; (adr r3, 8009c00 <SlalomRight+0x2a0>)
 80099ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ce:	f7fe fd4b 	bl	8008468 <__aeabi_dmul>
 80099d2:	4603      	mov	r3, r0
 80099d4:	460c      	mov	r4, r1
 80099d6:	4618      	mov	r0, r3
 80099d8:	4621      	mov	r1, r4
 80099da:	f04f 0200 	mov.w	r2, #0
 80099de:	4b8f      	ldr	r3, [pc, #572]	; (8009c1c <SlalomRight+0x2bc>)
 80099e0:	f7fe fe6c 	bl	80086bc <__aeabi_ddiv>
 80099e4:	4603      	mov	r3, r0
 80099e6:	460c      	mov	r4, r1
 80099e8:	4618      	mov	r0, r3
 80099ea:	4621      	mov	r1, r4
 80099ec:	f7ff f834 	bl	8008a58 <__aeabi_d2f>
 80099f0:	4603      	mov	r3, r0
 80099f2:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 80099f4:	4b88      	ldr	r3, [pc, #544]	; (8009c18 <SlalomRight+0x2b8>)
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fcdd 	bl	80083b8 <__aeabi_f2d>
 80099fe:	a380      	add	r3, pc, #512	; (adr r3, 8009c00 <SlalomRight+0x2a0>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f7fe fd30 	bl	8008468 <__aeabi_dmul>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	4621      	mov	r1, r4
 8009a10:	f04f 0200 	mov.w	r2, #0
 8009a14:	4b81      	ldr	r3, [pc, #516]	; (8009c1c <SlalomRight+0x2bc>)
 8009a16:	f7fe fe51 	bl	80086bc <__aeabi_ddiv>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	4618      	mov	r0, r3
 8009a20:	4621      	mov	r1, r4
 8009a22:	f7ff f819 	bl	8008a58 <__aeabi_d2f>
 8009a26:	4603      	mov	r3, r0
 8009a28:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵
	float now_angv = AngularV;
 8009a2a:	4b7d      	ldr	r3, [pc, #500]	; (8009c20 <SlalomRight+0x2c0>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	60bb      	str	r3, [r7, #8]
	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009a30:	4b7c      	ldr	r3, [pc, #496]	; (8009c24 <SlalomRight+0x2c4>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	4b7b      	ldr	r3, [pc, #492]	; (8009c24 <SlalomRight+0x2c4>)
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	4413      	add	r3, r2
 8009a3a:	607b      	str	r3, [r7, #4]
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009a3c:	f7ff ff2e 	bl	800989c <getFrontWall>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d133      	bne.n	8009aae <SlalomRight+0x14e>
	{
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009a46:	e00e      	b.n	8009a66 <SlalomRight+0x106>
		{
			TargetAngularV = 0;
 8009a48:	4b77      	ldr	r3, [pc, #476]	; (8009c28 <SlalomRight+0x2c8>)
 8009a4a:	f04f 0200 	mov.w	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 8009a50:	4b76      	ldr	r3, [pc, #472]	; (8009c2c <SlalomRight+0x2cc>)
 8009a52:	f04f 0200 	mov.w	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009a58:	4b75      	ldr	r3, [pc, #468]	; (8009c30 <SlalomRight+0x2d0>)
 8009a5a:	f04f 0200 	mov.w	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009a60:	4a74      	ldr	r2, [pc, #464]	; (8009c34 <SlalomRight+0x2d4>)
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009a66:	4b74      	ldr	r3, [pc, #464]	; (8009c38 <SlalomRight+0x2d8>)
 8009a68:	edd3 7a00 	vldr	s15, [r3]
 8009a6c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009c3c <SlalomRight+0x2dc>
 8009a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a78:	d4e6      	bmi.n	8009a48 <SlalomRight+0xe8>
 8009a7a:	4b6f      	ldr	r3, [pc, #444]	; (8009c38 <SlalomRight+0x2d8>)
 8009a7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009a80:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8009c40 <SlalomRight+0x2e0>
 8009a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8c:	d4dc      	bmi.n	8009a48 <SlalomRight+0xe8>
 8009a8e:	e03b      	b.n	8009b08 <SlalomRight+0x1a8>
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009a90:	4b65      	ldr	r3, [pc, #404]	; (8009c28 <SlalomRight+0x2c8>)
 8009a92:	f04f 0200 	mov.w	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]
				AngularLeapsity = 0;
 8009a98:	4b64      	ldr	r3, [pc, #400]	; (8009c2c <SlalomRight+0x2cc>)
 8009a9a:	f04f 0200 	mov.w	r2, #0
 8009a9e:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 8009aa0:	4b63      	ldr	r3, [pc, #396]	; (8009c30 <SlalomRight+0x2d0>)
 8009aa2:	f04f 0200 	mov.w	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 8009aa8:	4a62      	ldr	r2, [pc, #392]	; (8009c34 <SlalomRight+0x2d4>)
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aac:	6093      	str	r3, [r2, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7fe fc70 	bl	8008394 <__aeabi_i2d>
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	460d      	mov	r5, r1
 8009ab8:	edd7 7a08 	vldr	s15, [r7, #32]
 8009abc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009ac0:	ee17 0a90 	vmov	r0, s15
 8009ac4:	f7fe fc78 	bl	80083b8 <__aeabi_f2d>
 8009ac8:	a34f      	add	r3, pc, #316	; (adr r3, 8009c08 <SlalomRight+0x2a8>)
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f7fe fdf5 	bl	80086bc <__aeabi_ddiv>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	4629      	mov	r1, r5
 8009ada:	f7fe fb0f 	bl	80080fc <__adddf3>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	4625      	mov	r5, r4
 8009ae4:	461c      	mov	r4, r3
 8009ae6:	4b4f      	ldr	r3, [pc, #316]	; (8009c24 <SlalomRight+0x2c4>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	4b4e      	ldr	r3, [pc, #312]	; (8009c24 <SlalomRight+0x2c4>)
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	4413      	add	r3, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe fc4f 	bl	8008394 <__aeabi_i2d>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4620      	mov	r0, r4
 8009afc:	4629      	mov	r1, r5
 8009afe:	f7fe ff43 	bl	8008988 <__aeabi_dcmpgt>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1c3      	bne.n	8009a90 <SlalomRight+0x130>

				////printf("直進1\r\n");
		}
	}
	now_angv = AngularV;
 8009b08:	4b45      	ldr	r3, [pc, #276]	; (8009c20 <SlalomRight+0x2c0>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	60bb      	str	r3, [r7, #8]

	float start_angle = Angle;
 8009b0e:	4b4d      	ldr	r3, [pc, #308]	; (8009c44 <SlalomRight+0x2e4>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	603b      	str	r3, [r7, #0]

	while(start_angle + ang1 > Angle)
 8009b14:	e005      	b.n	8009b22 <SlalomRight+0x1c2>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
		//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009b16:	4a46      	ldr	r2, [pc, #280]	; (8009c30 <SlalomRight+0x2d0>)
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009b1c:	4a45      	ldr	r2, [pc, #276]	; (8009c34 <SlalomRight+0x2d4>)
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	6093      	str	r3, [r2, #8]
	while(start_angle + ang1 > Angle)
 8009b22:	ed97 7a00 	vldr	s14, [r7]
 8009b26:	edd7 7a05 	vldr	s15, [r7, #20]
 8009b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b2e:	4b45      	ldr	r3, [pc, #276]	; (8009c44 <SlalomRight+0x2e4>)
 8009b30:	edd3 7a00 	vldr	s15, [r3]
 8009b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3c:	dceb      	bgt.n	8009b16 <SlalomRight+0x1b6>
			}
#endif

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009b3e:	4b3c      	ldr	r3, [pc, #240]	; (8009c30 <SlalomRight+0x2d0>)
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009b46:	4b39      	ldr	r3, [pc, #228]	; (8009c2c <SlalomRight+0x2cc>)
 8009b48:	f04f 0200 	mov.w	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
	now_angv = AngularV;
 8009b4e:	4b34      	ldr	r3, [pc, #208]	; (8009c20 <SlalomRight+0x2c0>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	60bb      	str	r3, [r7, #8]
	//alpha_flag = 0;

	while(start_angle + ang2 > Angle)
 8009b54:	e006      	b.n	8009b64 <SlalomRight+0x204>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009b56:	4b34      	ldr	r3, [pc, #208]	; (8009c28 <SlalomRight+0x2c8>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a33      	ldr	r2, [pc, #204]	; (8009c28 <SlalomRight+0x2c8>)
 8009b5c:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009b5e:	4a35      	ldr	r2, [pc, #212]	; (8009c34 <SlalomRight+0x2d4>)
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	6093      	str	r3, [r2, #8]
	while(start_angle + ang2 > Angle)
 8009b64:	ed97 7a00 	vldr	s14, [r7]
 8009b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b70:	4b34      	ldr	r3, [pc, #208]	; (8009c44 <SlalomRight+0x2e4>)
 8009b72:	edd3 7a00 	vldr	s15, [r3]
 8009b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7e:	dcea      	bgt.n	8009b56 <SlalomRight+0x1f6>

			}
#endif
	}

	now_angv = AngularV;
 8009b80:	4b27      	ldr	r3, [pc, #156]	; (8009c20 <SlalomRight+0x2c0>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60bb      	str	r3, [r7, #8]
	while( start_angle + ang3 > Angle)
 8009b86:	e016      	b.n	8009bb6 <SlalomRight+0x256>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009b88:	edd7 7a06 	vldr	s15, [r7, #24]
 8009b8c:	eef1 7a67 	vneg.f32	s15, s15
 8009b90:	4b27      	ldr	r3, [pc, #156]	; (8009c30 <SlalomRight+0x2d0>)
 8009b92:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV < 0)
 8009b96:	4b24      	ldr	r3, [pc, #144]	; (8009c28 <SlalomRight+0x2c8>)
 8009b98:	edd3 7a00 	vldr	s15, [r3]
 8009b9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba4:	d504      	bpl.n	8009bb0 <SlalomRight+0x250>
			{
				TargetAngularV = 0;
 8009ba6:	4b20      	ldr	r3, [pc, #128]	; (8009c28 <SlalomRight+0x2c8>)
 8009ba8:	f04f 0200 	mov.w	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]
				break;
 8009bae:	e010      	b.n	8009bd2 <SlalomRight+0x272>
			}
			TargetVelocity[BODY] = v_turn;
 8009bb0:	4a20      	ldr	r2, [pc, #128]	; (8009c34 <SlalomRight+0x2d4>)
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	6093      	str	r3, [r2, #8]
	while( start_angle + ang3 > Angle)
 8009bb6:	ed97 7a00 	vldr	s14, [r7]
 8009bba:	edd7 7a03 	vldr	s15, [r7, #12]
 8009bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bc2:	4b20      	ldr	r3, [pc, #128]	; (8009c44 <SlalomRight+0x2e4>)
 8009bc4:	edd3 7a00 	vldr	s15, [r3]
 8009bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd0:	dcda      	bgt.n	8009b88 <SlalomRight+0x228>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009bd2:	4b17      	ldr	r3, [pc, #92]	; (8009c30 <SlalomRight+0x2d0>)
 8009bd4:	f04f 0200 	mov.w	r2, #0
 8009bd8:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009bda:	4b14      	ldr	r3, [pc, #80]	; (8009c2c <SlalomRight+0x2cc>)
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009be2:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <SlalomRight+0x2c8>)
 8009be4:	f04f 0200 	mov.w	r2, #0
 8009be8:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009bea:	4b17      	ldr	r3, [pc, #92]	; (8009c48 <SlalomRight+0x2e8>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a17      	ldr	r2, [pc, #92]	; (8009c4c <SlalomRight+0x2ec>)
 8009bf0:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009bf2:	4b0c      	ldr	r3, [pc, #48]	; (8009c24 <SlalomRight+0x2c4>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <SlalomRight+0x2c4>)
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	607b      	str	r3, [r7, #4]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009bfe:	e03c      	b.n	8009c7a <SlalomRight+0x31a>
 8009c00:	54442d18 	.word	0x54442d18
 8009c04:	400921fb 	.word	0x400921fb
 8009c08:	23ca2666 	.word	0x23ca2666
 8009c0c:	3f509268 	.word	0x3f509268
 8009c10:	20000000 	.word	0x20000000
 8009c14:	20000614 	.word	0x20000614
 8009c18:	20000538 	.word	0x20000538
 8009c1c:	40668000 	.word	0x40668000
 8009c20:	20000224 	.word	0x20000224
 8009c24:	20000520 	.word	0x20000520
 8009c28:	200004fc 	.word	0x200004fc
 8009c2c:	20000234 	.word	0x20000234
 8009c30:	20000230 	.word	0x20000230
 8009c34:	200004ec 	.word	0x200004ec
 8009c38:	20000560 	.word	0x20000560
 8009c3c:	43480000 	.word	0x43480000
 8009c40:	437a0000 	.word	0x437a0000
 8009c44:	20000228 	.word	0x20000228
 8009c48:	2000078c 	.word	0x2000078c
 8009c4c:	20000790 	.word	0x20000790
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 8009c50:	4b33      	ldr	r3, [pc, #204]	; (8009d20 <SlalomRight+0x3c0>)
 8009c52:	f04f 0200 	mov.w	r2, #0
 8009c56:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009c58:	4a32      	ldr	r2, [pc, #200]	; (8009d24 <SlalomRight+0x3c4>)
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");

			//後半の直線に入ったら計算する。
			if(Calc == 0)
 8009c5e:	4b32      	ldr	r3, [pc, #200]	; (8009d28 <SlalomRight+0x3c8>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d109      	bne.n	8009c7a <SlalomRight+0x31a>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 8009c66:	f001 fed9 	bl	800ba1c <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	2107      	movs	r1, #7
 8009c6e:	2007      	movs	r0, #7
 8009c70:	f002 f864 	bl	800bd3c <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 8009c74:	4b2c      	ldr	r3, [pc, #176]	; (8009d28 <SlalomRight+0x3c8>)
 8009c76:	2201      	movs	r2, #1
 8009c78:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7fe fb8a 	bl	8008394 <__aeabi_i2d>
 8009c80:	4604      	mov	r4, r0
 8009c82:	460d      	mov	r5, r1
 8009c84:	edd7 7a07 	vldr	s15, [r7, #28]
 8009c88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009c8c:	ee17 0a90 	vmov	r0, s15
 8009c90:	f7fe fb92 	bl	80083b8 <__aeabi_f2d>
 8009c94:	a31e      	add	r3, pc, #120	; (adr r3, 8009d10 <SlalomRight+0x3b0>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	f7fe fd0f 	bl	80086bc <__aeabi_ddiv>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	f7fe fa29 	bl	80080fc <__adddf3>
 8009caa:	4603      	mov	r3, r0
 8009cac:	460c      	mov	r4, r1
 8009cae:	4625      	mov	r5, r4
 8009cb0:	461c      	mov	r4, r3
 8009cb2:	4b1e      	ldr	r3, [pc, #120]	; (8009d2c <SlalomRight+0x3cc>)
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	4b1d      	ldr	r3, [pc, #116]	; (8009d2c <SlalomRight+0x3cc>)
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	4413      	add	r3, r2
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fe fb69 	bl	8008394 <__aeabi_i2d>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	4629      	mov	r1, r5
 8009cca:	f7fe fe5d 	bl	8008988 <__aeabi_dcmpgt>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1bd      	bne.n	8009c50 <SlalomRight+0x2f0>
			}
	}
	TargetAngle += 90*M_PI/180;
 8009cd4:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <SlalomRight+0x3d0>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fe fb6d 	bl	80083b8 <__aeabi_f2d>
 8009cde:	a30e      	add	r3, pc, #56	; (adr r3, 8009d18 <SlalomRight+0x3b8>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7fe fa0a 	bl	80080fc <__adddf3>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	4618      	mov	r0, r3
 8009cee:	4621      	mov	r1, r4
 8009cf0:	f7fe feb2 	bl	8008a58 <__aeabi_d2f>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <SlalomRight+0x3d0>)
 8009cf8:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 8009cfa:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <SlalomRight+0x3cc>)
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	4a0d      	ldr	r2, [pc, #52]	; (8009d34 <SlalomRight+0x3d4>)
 8009d00:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 8009d02:	bf00      	nop
 8009d04:	3728      	adds	r7, #40	; 0x28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bdb0      	pop	{r4, r5, r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	f3af 8000 	nop.w
 8009d10:	23ca2666 	.word	0x23ca2666
 8009d14:	3f509268 	.word	0x3f509268
 8009d18:	54442d18 	.word	0x54442d18
 8009d1c:	3ff921fb 	.word	0x3ff921fb
 8009d20:	200004fc 	.word	0x200004fc
 8009d24:	200004ec 	.word	0x200004ec
 8009d28:	20000790 	.word	0x20000790
 8009d2c:	20000520 	.word	0x20000520
 8009d30:	20000518 	.word	0x20000518
 8009d34:	20000554 	.word	0x20000554

08009d38 <SlalomLeft>:
void SlalomLeft()	//現在の速度から、最適な角加速度と、移動量、目標角度などを変更する。
{
 8009d38:	b5b0      	push	{r4, r5, r7, lr}
 8009d3a:	b08a      	sub	sp, #40	; 0x28
 8009d3c:	af00      	add	r7, sp, #0
	//目標移動量は事前に定義。状況に応じて値を増減させてもよし
	//最初の一回で現在移動量をkeepする。目標移動量を足す
	Pos.Act = slalom;
 8009d3e:	4ba4      	ldr	r3, [pc, #656]	; (8009fd0 <SlalomLeft+0x298>)
 8009d40:	2202      	movs	r2, #2
 8009d42:	719a      	strb	r2, [r3, #6]
	ControlWall();
 8009d44:	f7ff fa64 	bl	8009210 <ControlWall>
	//移動しきったかどうか
	//移動しきっていなければ、現在の状態と目標値の状態を引数として目標値を更新する

	//→ 前距離後距離を加速時の目標距離に反映すればいい

	float v_turn = ExploreVelocity;       //スラローム時の重心速度
 8009d48:	4ba2      	ldr	r3, [pc, #648]	; (8009fd4 <SlalomLeft+0x29c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
	float pre = Sla.Pre;         //スラローム前距離
 8009d4e:	4ba2      	ldr	r3, [pc, #648]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	623b      	str	r3, [r7, #32]
	float fol = Sla.Fol;         //スラローム後距離
 8009d54:	4ba0      	ldr	r3, [pc, #640]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	61fb      	str	r3, [r7, #28]
	float alpha_turn = -Sla.Alpha;//046;//125;//16;//0.015*13;  //スラローム時の角加速度s
 8009d5a:	4b9f      	ldr	r3, [pc, #636]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009d5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009d60:	eef1 7a67 	vneg.f32	s15, s15
 8009d64:	edc7 7a06 	vstr	s15, [r7, #24]
	//float alalpha_turn = -Sla.Alalpha;
	float ang1 = Sla.Theta1*M_PI/180;         //角速度が上がるのは0からang1まで
 8009d68:	4b9b      	ldr	r3, [pc, #620]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fe fb23 	bl	80083b8 <__aeabi_f2d>
 8009d72:	a393      	add	r3, pc, #588	; (adr r3, 8009fc0 <SlalomLeft+0x288>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f7fe fb76 	bl	8008468 <__aeabi_dmul>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	4618      	mov	r0, r3
 8009d82:	4621      	mov	r1, r4
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	4b94      	ldr	r3, [pc, #592]	; (8009fdc <SlalomLeft+0x2a4>)
 8009d8a:	f7fe fc97 	bl	80086bc <__aeabi_ddiv>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	4618      	mov	r0, r3
 8009d94:	4621      	mov	r1, r4
 8009d96:	f7fe fe5f 	bl	8008a58 <__aeabi_d2f>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	617b      	str	r3, [r7, #20]
	float ang2 = Sla.Theta2*M_PI/180;         //角速度が一定なのはang1からang2まで
 8009d9e:	4b8e      	ldr	r3, [pc, #568]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe fb08 	bl	80083b8 <__aeabi_f2d>
 8009da8:	a385      	add	r3, pc, #532	; (adr r3, 8009fc0 <SlalomLeft+0x288>)
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	f7fe fb5b 	bl	8008468 <__aeabi_dmul>
 8009db2:	4603      	mov	r3, r0
 8009db4:	460c      	mov	r4, r1
 8009db6:	4618      	mov	r0, r3
 8009db8:	4621      	mov	r1, r4
 8009dba:	f04f 0200 	mov.w	r2, #0
 8009dbe:	4b87      	ldr	r3, [pc, #540]	; (8009fdc <SlalomLeft+0x2a4>)
 8009dc0:	f7fe fc7c 	bl	80086bc <__aeabi_ddiv>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	4618      	mov	r0, r3
 8009dca:	4621      	mov	r1, r4
 8009dcc:	f7fe fe44 	bl	8008a58 <__aeabi_d2f>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	613b      	str	r3, [r7, #16]
	float ang3 = Sla.Theta3*M_PI/180;         //角速度が下がるのはang2からang3まで
 8009dd4:	4b80      	ldr	r3, [pc, #512]	; (8009fd8 <SlalomLeft+0x2a0>)
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe faed 	bl	80083b8 <__aeabi_f2d>
 8009dde:	a378      	add	r3, pc, #480	; (adr r3, 8009fc0 <SlalomLeft+0x288>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	f7fe fb40 	bl	8008468 <__aeabi_dmul>
 8009de8:	4603      	mov	r3, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	4618      	mov	r0, r3
 8009dee:	4621      	mov	r1, r4
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	4b79      	ldr	r3, [pc, #484]	; (8009fdc <SlalomLeft+0x2a4>)
 8009df6:	f7fe fc61 	bl	80086bc <__aeabi_ddiv>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	4618      	mov	r0, r3
 8009e00:	4621      	mov	r1, r4
 8009e02:	f7fe fe29 	bl	8008a58 <__aeabi_d2f>
 8009e06:	4603      	mov	r3, r0
 8009e08:	60fb      	str	r3, [r7, #12]
	//このあたりのパラメータをどう調整、設計するかが鍵

	int now_pulse;
	//割り込みで書くなら、センサデータを引数にとるか、グローバルで値を引っこ抜いておいてif文で値を変更する
	//フラグでstatic変数を0にしておく。現在の移動量の段階しだいで出力を替えるのがスラロームなり加速なりだから、動き毎に移動量フラグを管理した方がいいかも？
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];	//汎用的に書いておく
 8009e0a:	4b75      	ldr	r3, [pc, #468]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	4b74      	ldr	r3, [pc, #464]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	4413      	add	r3, r2
 8009e14:	60bb      	str	r3, [r7, #8]
	if (getFrontWall() == WALL/*前に壁があれば、*/)
 8009e16:	f7ff fd41 	bl	800989c <getFrontWall>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d12f      	bne.n	8009e80 <SlalomLeft+0x148>
	{
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009e20:	e00e      	b.n	8009e40 <SlalomLeft+0x108>
		{
			TargetAngularV = 0;
 8009e22:	4b70      	ldr	r3, [pc, #448]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009e24:	f04f 0200 	mov.w	r2, #0
 8009e28:	601a      	str	r2, [r3, #0]
			AngularLeapsity = 0;
 8009e2a:	4b6f      	ldr	r3, [pc, #444]	; (8009fe8 <SlalomLeft+0x2b0>)
 8009e2c:	f04f 0200 	mov.w	r2, #0
 8009e30:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 8009e32:	4b6e      	ldr	r3, [pc, #440]	; (8009fec <SlalomLeft+0x2b4>)
 8009e34:	f04f 0200 	mov.w	r2, #0
 8009e38:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 8009e3a:	4a6d      	ldr	r2, [pc, #436]	; (8009ff0 <SlalomLeft+0x2b8>)
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	6093      	str	r3, [r2, #8]
		while(Photo[FL] < 200 || Photo[FR] < 250/*前壁の閾値より低い間*/)
 8009e40:	4b6c      	ldr	r3, [pc, #432]	; (8009ff4 <SlalomLeft+0x2bc>)
 8009e42:	edd3 7a00 	vldr	s15, [r3]
 8009e46:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8009ff8 <SlalomLeft+0x2c0>
 8009e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e52:	d4e6      	bmi.n	8009e22 <SlalomLeft+0xea>
 8009e54:	4b67      	ldr	r3, [pc, #412]	; (8009ff4 <SlalomLeft+0x2bc>)
 8009e56:	edd3 7a03 	vldr	s15, [r3, #12]
 8009e5a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8009ffc <SlalomLeft+0x2c4>
 8009e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e66:	d4dc      	bmi.n	8009e22 <SlalomLeft+0xea>
 8009e68:	e037      	b.n	8009eda <SlalomLeft+0x1a2>
	else//なければ
	{
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
		{
				//velocity_ctrl_flag = 1;
				TargetAngularV = 0;
 8009e6a:	4b5e      	ldr	r3, [pc, #376]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]
				AngularAcceleration = 0;
 8009e72:	4b5e      	ldr	r3, [pc, #376]	; (8009fec <SlalomLeft+0x2b4>)
 8009e74:	f04f 0200 	mov.w	r2, #0
 8009e78:	601a      	str	r2, [r3, #0]
				TargetVelocity[BODY] = v_turn;
 8009e7a:	4a5d      	ldr	r2, [pc, #372]	; (8009ff0 <SlalomLeft+0x2b8>)
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	6093      	str	r3, [r2, #8]
		while( now_pulse + (2*pre/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) ) //移動量を条件に直進
 8009e80:	68b8      	ldr	r0, [r7, #8]
 8009e82:	f7fe fa87 	bl	8008394 <__aeabi_i2d>
 8009e86:	4604      	mov	r4, r0
 8009e88:	460d      	mov	r5, r1
 8009e8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8009e8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e92:	ee17 0a90 	vmov	r0, s15
 8009e96:	f7fe fa8f 	bl	80083b8 <__aeabi_f2d>
 8009e9a:	a34b      	add	r3, pc, #300	; (adr r3, 8009fc8 <SlalomLeft+0x290>)
 8009e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea0:	f7fe fc0c 	bl	80086bc <__aeabi_ddiv>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	4629      	mov	r1, r5
 8009eac:	f7fe f926 	bl	80080fc <__adddf3>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	4625      	mov	r5, r4
 8009eb6:	461c      	mov	r4, r3
 8009eb8:	4b49      	ldr	r3, [pc, #292]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	4b48      	ldr	r3, [pc, #288]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fe fa66 	bl	8008394 <__aeabi_i2d>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4620      	mov	r0, r4
 8009ece:	4629      	mov	r1, r5
 8009ed0:	f7fe fd5a 	bl	8008988 <__aeabi_dcmpgt>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1c7      	bne.n	8009e6a <SlalomLeft+0x132>
				////printf("直進1\r\n");
		}
	}


	float start_angle = Angle;
 8009eda:	4b49      	ldr	r3, [pc, #292]	; (800a000 <SlalomLeft+0x2c8>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	607b      	str	r3, [r7, #4]
	while(start_angle - ang1 < Angle)
 8009ee0:	e005      	b.n	8009eee <SlalomLeft+0x1b6>

			//velocity_ctrl_flag = 1;
			//割り込みの中で角速度を上げていく
			//alpha_flag = 1;
			//AngularLeapsity = alalpha_turn;
			AngularAcceleration = alpha_turn;
 8009ee2:	4a42      	ldr	r2, [pc, #264]	; (8009fec <SlalomLeft+0x2b4>)
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009ee8:	4a41      	ldr	r2, [pc, #260]	; (8009ff0 <SlalomLeft+0x2b8>)
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	6093      	str	r3, [r2, #8]
	while(start_angle - ang1 < Angle)
 8009eee:	ed97 7a01 	vldr	s14, [r7, #4]
 8009ef2:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ef6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009efa:	4b41      	ldr	r3, [pc, #260]	; (800a000 <SlalomLeft+0x2c8>)
 8009efc:	edd3 7a00 	vldr	s15, [r3]
 8009f00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f08:	d4eb      	bmi.n	8009ee2 <SlalomLeft+0x1aa>

			//printf("クロソイド1\r\n");
	}
	AngularAcceleration = 0;
 8009f0a:	4b38      	ldr	r3, [pc, #224]	; (8009fec <SlalomLeft+0x2b4>)
 8009f0c:	f04f 0200 	mov.w	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009f12:	4b35      	ldr	r3, [pc, #212]	; (8009fe8 <SlalomLeft+0x2b0>)
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	601a      	str	r2, [r3, #0]
	//alpha_flag = 0;

	while(start_angle - ang2 < Angle)
 8009f1a:	e006      	b.n	8009f2a <SlalomLeft+0x1f2>
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = TargetAngularV;
 8009f1c:	4b31      	ldr	r3, [pc, #196]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a30      	ldr	r2, [pc, #192]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009f22:	6013      	str	r3, [r2, #0]
			TargetVelocity[BODY] = v_turn;
 8009f24:	4a32      	ldr	r2, [pc, #200]	; (8009ff0 <SlalomLeft+0x2b8>)
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	6093      	str	r3, [r2, #8]
	while(start_angle - ang2 < Angle)
 8009f2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8009f2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009f32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f36:	4b32      	ldr	r3, [pc, #200]	; (800a000 <SlalomLeft+0x2c8>)
 8009f38:	edd3 7a00 	vldr	s15, [r3]
 8009f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f44:	d4ea      	bmi.n	8009f1c <SlalomLeft+0x1e4>
			////printf("円弧\r\n");
	}

	while( start_angle - ang3 < Angle)
 8009f46:	e016      	b.n	8009f76 <SlalomLeft+0x23e>
	{

			//velocity_ctrl_flag = 1;
			//alpha_flag = 2;
		//AngularLeapsity = -alalpha_turn;
			AngularAcceleration = -alpha_turn;
 8009f48:	edd7 7a06 	vldr	s15, [r7, #24]
 8009f4c:	eef1 7a67 	vneg.f32	s15, s15
 8009f50:	4b26      	ldr	r3, [pc, #152]	; (8009fec <SlalomLeft+0x2b4>)
 8009f52:	edc3 7a00 	vstr	s15, [r3]
			if(TargetAngularV > 0)
 8009f56:	4b23      	ldr	r3, [pc, #140]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009f58:	edd3 7a00 	vldr	s15, [r3]
 8009f5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f64:	dd04      	ble.n	8009f70 <SlalomLeft+0x238>
			{
				TargetAngularV = 0;
 8009f66:	4b1f      	ldr	r3, [pc, #124]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009f68:	f04f 0200 	mov.w	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]
				break;
 8009f6e:	e010      	b.n	8009f92 <SlalomLeft+0x25a>
			}
			TargetVelocity[BODY] = v_turn;
 8009f70:	4a1f      	ldr	r2, [pc, #124]	; (8009ff0 <SlalomLeft+0x2b8>)
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	6093      	str	r3, [r2, #8]
	while( start_angle - ang3 < Angle)
 8009f76:	ed97 7a01 	vldr	s14, [r7, #4]
 8009f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f82:	4b1f      	ldr	r3, [pc, #124]	; (800a000 <SlalomLeft+0x2c8>)
 8009f84:	edd3 7a00 	vldr	s15, [r3]
 8009f88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f90:	d4da      	bmi.n	8009f48 <SlalomLeft+0x210>
			//printf("クロソイド2\r\n");
	}
	//alpha_flag = 0;
	AngularAcceleration = 0;
 8009f92:	4b16      	ldr	r3, [pc, #88]	; (8009fec <SlalomLeft+0x2b4>)
 8009f94:	f04f 0200 	mov.w	r2, #0
 8009f98:	601a      	str	r2, [r3, #0]
	AngularLeapsity = 0;
 8009f9a:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <SlalomLeft+0x2b0>)
 8009f9c:	f04f 0200 	mov.w	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 8009fa2:	4b10      	ldr	r3, [pc, #64]	; (8009fe4 <SlalomLeft+0x2ac>)
 8009fa4:	f04f 0200 	mov.w	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
	Calc = SearchOrFast;
 8009faa:	4b16      	ldr	r3, [pc, #88]	; (800a004 <SlalomLeft+0x2cc>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a16      	ldr	r2, [pc, #88]	; (800a008 <SlalomLeft+0x2d0>)
 8009fb0:	6013      	str	r3, [r2, #0]
	now_pulse = TotalPulse[LEFT] + TotalPulse[RIGHT];
 8009fb2:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <SlalomLeft+0x2a8>)
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	4413      	add	r3, r2
 8009fbc:	60bb      	str	r3, [r7, #8]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 8009fbe:	e03a      	b.n	800a036 <SlalomLeft+0x2fe>
 8009fc0:	54442d18 	.word	0x54442d18
 8009fc4:	400921fb 	.word	0x400921fb
 8009fc8:	23ca2666 	.word	0x23ca2666
 8009fcc:	3f509268 	.word	0x3f509268
 8009fd0:	20000000 	.word	0x20000000
 8009fd4:	20000614 	.word	0x20000614
 8009fd8:	20000538 	.word	0x20000538
 8009fdc:	40668000 	.word	0x40668000
 8009fe0:	20000520 	.word	0x20000520
 8009fe4:	200004fc 	.word	0x200004fc
 8009fe8:	20000234 	.word	0x20000234
 8009fec:	20000230 	.word	0x20000230
 8009ff0:	200004ec 	.word	0x200004ec
 8009ff4:	20000560 	.word	0x20000560
 8009ff8:	43480000 	.word	0x43480000
 8009ffc:	437a0000 	.word	0x437a0000
 800a000:	20000228 	.word	0x20000228
 800a004:	2000078c 	.word	0x2000078c
 800a008:	20000790 	.word	0x20000790
	{
			//velocity_ctrl_flag = 1;
			TargetAngularV = 0;
 800a00c:	4b32      	ldr	r3, [pc, #200]	; (800a0d8 <SlalomLeft+0x3a0>)
 800a00e:	f04f 0200 	mov.w	r2, #0
 800a012:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = v_turn;
 800a014:	4a31      	ldr	r2, [pc, #196]	; (800a0dc <SlalomLeft+0x3a4>)
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	6093      	str	r3, [r2, #8]
			//printf("直進2\r\n");
			if(Calc == 0)
 800a01a:	4b31      	ldr	r3, [pc, #196]	; (800a0e0 <SlalomLeft+0x3a8>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d109      	bne.n	800a036 <SlalomLeft+0x2fe>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800a022:	f001 fcfb 	bl	800ba1c <wall_set>
				//計算して
				make_map(X_GOAL_LESSER, Y_GOAL_LESSER, 0x01);
 800a026:	2201      	movs	r2, #1
 800a028:	2107      	movs	r1, #7
 800a02a:	2007      	movs	r0, #7
 800a02c:	f001 fe86 	bl	800bd3c <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 800a030:	4b2b      	ldr	r3, [pc, #172]	; (800a0e0 <SlalomLeft+0x3a8>)
 800a032:	2201      	movs	r2, #1
 800a034:	601a      	str	r2, [r3, #0]
	while( now_pulse + (2*fol/MM_PER_PULSE) > (TotalPulse[LEFT] + TotalPulse[RIGHT]) )
 800a036:	68b8      	ldr	r0, [r7, #8]
 800a038:	f7fe f9ac 	bl	8008394 <__aeabi_i2d>
 800a03c:	4604      	mov	r4, r0
 800a03e:	460d      	mov	r5, r1
 800a040:	edd7 7a07 	vldr	s15, [r7, #28]
 800a044:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a048:	ee17 0a90 	vmov	r0, s15
 800a04c:	f7fe f9b4 	bl	80083b8 <__aeabi_f2d>
 800a050:	a31d      	add	r3, pc, #116	; (adr r3, 800a0c8 <SlalomLeft+0x390>)
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7fe fb31 	bl	80086bc <__aeabi_ddiv>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4620      	mov	r0, r4
 800a060:	4629      	mov	r1, r5
 800a062:	f7fe f84b 	bl	80080fc <__adddf3>
 800a066:	4603      	mov	r3, r0
 800a068:	460c      	mov	r4, r1
 800a06a:	4625      	mov	r5, r4
 800a06c:	461c      	mov	r4, r3
 800a06e:	4b1d      	ldr	r3, [pc, #116]	; (800a0e4 <SlalomLeft+0x3ac>)
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	4b1c      	ldr	r3, [pc, #112]	; (800a0e4 <SlalomLeft+0x3ac>)
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	4413      	add	r3, r2
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fe f98b 	bl	8008394 <__aeabi_i2d>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4620      	mov	r0, r4
 800a084:	4629      	mov	r1, r5
 800a086:	f7fe fc7f 	bl	8008988 <__aeabi_dcmpgt>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1bd      	bne.n	800a00c <SlalomLeft+0x2d4>
			}
	}
	TargetAngle += -90*M_PI/180;
 800a090:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <SlalomLeft+0x3b0>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe f98f 	bl	80083b8 <__aeabi_f2d>
 800a09a:	a30d      	add	r3, pc, #52	; (adr r3, 800a0d0 <SlalomLeft+0x398>)
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	f7fe f82a 	bl	80080f8 <__aeabi_dsub>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	f7fe fcd4 	bl	8008a58 <__aeabi_d2f>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <SlalomLeft+0x3b0>)
 800a0b4:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += TotalPulse[BODY] - KeepPulse[BODY];
 800a0b6:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <SlalomLeft+0x3ac>)
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	4a0c      	ldr	r2, [pc, #48]	; (800a0ec <SlalomLeft+0x3b4>)
 800a0bc:	6093      	str	r3, [r2, #8]
//	角加速度alpha = alpha_turnでangleがang1になるまで進む;
//	角加速度alpha = 0でangleがang2になるまで進む;
//	角加速度alpha = -alpha_turnでangleがang3になるまで進む;
//
//	距離folを速度v_turnで進む;
}
 800a0be:	bf00      	nop
 800a0c0:	3728      	adds	r7, #40	; 0x28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	23ca2666 	.word	0x23ca2666
 800a0cc:	3f509268 	.word	0x3f509268
 800a0d0:	54442d18 	.word	0x54442d18
 800a0d4:	3ff921fb 	.word	0x3ff921fb
 800a0d8:	200004fc 	.word	0x200004fc
 800a0dc:	200004ec 	.word	0x200004ec
 800a0e0:	20000790 	.word	0x20000790
 800a0e4:	20000520 	.word	0x20000520
 800a0e8:	20000518 	.word	0x20000518
 800a0ec:	20000554 	.word	0x20000554

0800a0f0 <Accel>:
//
void Accel(float add_distance, float explore_speed)
{
 800a0f0:	b5b0      	push	{r4, r5, r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	ed87 0a01 	vstr	s0, [r7, #4]
 800a0fa:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = accel;
 800a0fe:	4b76      	ldr	r3, [pc, #472]	; (800a2d8 <Accel+0x1e8>)
 800a100:	2200      	movs	r2, #0
 800a102:	719a      	strb	r2, [r3, #6]
	ControlWall();
 800a104:	f7ff f884 	bl	8009210 <ControlWall>
	TargetAngularV = 0;
 800a108:	4b74      	ldr	r3, [pc, #464]	; (800a2dc <Accel+0x1ec>)
 800a10a:	f04f 0200 	mov.w	r2, #0
 800a10e:	601a      	str	r2, [r3, #0]
	float additional_speed=0;
 800a110:	f04f 0300 	mov.w	r3, #0
 800a114:	613b      	str	r3, [r7, #16]
	additional_speed = explore_speed - CurrentVelocity[BODY];
 800a116:	4b72      	ldr	r3, [pc, #456]	; (800a2e0 <Accel+0x1f0>)
 800a118:	edd3 7a02 	vldr	s15, [r3, #8]
 800a11c:	ed97 7a00 	vldr	s14, [r7]
 800a120:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a124:	edc7 7a04 	vstr	s15, [r7, #16]
	//printf("%f,%f,%f\r\n",additional_speed,explore_speed,CurrentVelocity[BODY]);
	//速度増分 = 到達したい探索速度 - 現在の制御目標速度
	//これなら目標速度が探索速度に追いついているときは加速度0にできる。
	 //TotalPulse[BODY];
	Acceleration = T1*additional_speed*additional_speed / (2*add_distance);
 800a128:	edd7 7a04 	vldr	s15, [r7, #16]
 800a12c:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a2e4 <Accel+0x1f4>
 800a130:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a134:	edd7 7a04 	vldr	s15, [r7, #16]
 800a138:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a13c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a140:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a148:	4b67      	ldr	r3, [pc, #412]	; (800a2e8 <Accel+0x1f8>)
 800a14a:	edc3 7a00 	vstr	s15, [r3]
	WallWarn();
 800a14e:	f7ff f853 	bl	80091f8 <WallWarn>
	//printf("%d, %d\r\n",VelocityLeftOut,VelocityRightOut);
	int target_pulse = (int)(2*add_distance/MM_PER_PULSE);
 800a152:	edd7 7a01 	vldr	s15, [r7, #4]
 800a156:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a15a:	ee17 0a90 	vmov	r0, s15
 800a15e:	f7fe f92b 	bl	80083b8 <__aeabi_f2d>
 800a162:	a359      	add	r3, pc, #356	; (adr r3, 800a2c8 <Accel+0x1d8>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	f7fe faa8 	bl	80086bc <__aeabi_ddiv>
 800a16c:	4603      	mov	r3, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	4618      	mov	r0, r3
 800a172:	4621      	mov	r1, r4
 800a174:	f7fe fc28 	bl	80089c8 <__aeabi_d2iz>
 800a178:	4603      	mov	r3, r0
 800a17a:	60fb      	str	r3, [r7, #12]
	//printf("target_pulse : %d",target_pulse);
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	//45mm直進ならパルスは足りるけど、一気に90mm直進のときは15000パルスくらい足りなさそう
	//90mmでうまくやるには0から60000カウントまで
	Calc = SearchOrFast;//Fastでは1を代入。
 800a17c:	4b5b      	ldr	r3, [pc, #364]	; (800a2ec <Accel+0x1fc>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a5b      	ldr	r2, [pc, #364]	; (800a2f0 <Accel+0x200>)
 800a182:	6013      	str	r3, [r2, #0]
	_Bool wall_cut = false;
 800a184:	2300      	movs	r3, #0
 800a186:	75fb      	strb	r3, [r7, #23]
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800a188:	e06e      	b.n	800a268 <Accel+0x178>
	{
		if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800a18a:	4b5a      	ldr	r3, [pc, #360]	; (800a2f4 <Accel+0x204>)
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe f900 	bl	8008394 <__aeabi_i2d>
 800a194:	4604      	mov	r4, r0
 800a196:	460d      	mov	r5, r1
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f7fe f8fb 	bl	8008394 <__aeabi_i2d>
 800a19e:	a34c      	add	r3, pc, #304	; (adr r3, 800a2d0 <Accel+0x1e0>)
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f7fe f960 	bl	8008468 <__aeabi_dmul>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7fd ffa4 	bl	80080fc <__adddf3>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	4625      	mov	r5, r4
 800a1ba:	461c      	mov	r4, r3
 800a1bc:	4b4e      	ldr	r3, [pc, #312]	; (800a2f8 <Accel+0x208>)
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fe f8e7 	bl	8008394 <__aeabi_i2d>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	f7fe fbbd 	bl	800894c <__aeabi_dcmplt>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d010      	beq.n	800a1fa <Accel+0x10a>
 800a1d8:	4b45      	ldr	r3, [pc, #276]	; (800a2f0 <Accel+0x200>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10c      	bne.n	800a1fa <Accel+0x10a>
		{
			wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800a1e0:	f001 fc1c 	bl	800ba1c <wall_set>
			//計算して
			make_map(Pos.TargetX, Pos.TargetY, 0x01);
 800a1e4:	4b3c      	ldr	r3, [pc, #240]	; (800a2d8 <Accel+0x1e8>)
 800a1e6:	7898      	ldrb	r0, [r3, #2]
 800a1e8:	4b3b      	ldr	r3, [pc, #236]	; (800a2d8 <Accel+0x1e8>)
 800a1ea:	78db      	ldrb	r3, [r3, #3]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	f001 fda4 	bl	800bd3c <make_map>
			//UpdateWalkMap();
			//次のアクションを渡すのは別のところで。
			Calc = 1;
 800a1f4:	4b3e      	ldr	r3, [pc, #248]	; (800a2f0 <Accel+0x200>)
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]
		}
		if(wall_cut == false && ((50/*LEFT_WALL*0.5f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.5f*/ > Photo[SR])) )
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	f083 0301 	eor.w	r3, r3, #1
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d030      	beq.n	800a268 <Accel+0x178>
 800a206:	4b3d      	ldr	r3, [pc, #244]	; (800a2fc <Accel+0x20c>)
 800a208:	edd3 7a02 	vldr	s15, [r3, #8]
 800a20c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800a300 <Accel+0x210>
 800a210:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a218:	d40a      	bmi.n	800a230 <Accel+0x140>
 800a21a:	4b38      	ldr	r3, [pc, #224]	; (800a2fc <Accel+0x20c>)
 800a21c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a220:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800a300 <Accel+0x210>
 800a224:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a22c:	d400      	bmi.n	800a230 <Accel+0x140>
 800a22e:	e01b      	b.n	800a268 <Accel+0x178>
		{
			TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 800a230:	4b30      	ldr	r3, [pc, #192]	; (800a2f4 <Accel+0x204>)
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	ee07 3a90 	vmov	s15, r3
 800a238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	ee07 3a90 	vmov	s15, r3
 800a242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a246:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800a304 <Accel+0x214>
 800a24a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a24e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a256:	ee17 2a90 	vmov	r2, s15
 800a25a:	4b27      	ldr	r3, [pc, #156]	; (800a2f8 <Accel+0x208>)
 800a25c:	609a      	str	r2, [r3, #8]
			//target_pulse = TotalPulse[BODY] -KeepPulse[BODY] + Wall_Cut_Val;
			wall_cut = true;
 800a25e:	2301      	movs	r3, #1
 800a260:	75fb      	strb	r3, [r7, #23]
			ChangeLED(3);
 800a262:	2003      	movs	r0, #3
 800a264:	f005 fdf8 	bl	800fe58 <ChangeLED>
	while( ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY] ) )
 800a268:	4b22      	ldr	r3, [pc, #136]	; (800a2f4 <Accel+0x204>)
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	441a      	add	r2, r3
 800a270:	4b21      	ldr	r3, [pc, #132]	; (800a2f8 <Accel+0x208>)
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	429a      	cmp	r2, r3
 800a276:	dc88      	bgt.n	800a18a <Accel+0x9a>
			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
			KeepCounter[RIGHT] = INITIAL_PULSE;
		}
#endif
	}
	Acceleration = 0;
 800a278:	4b1b      	ldr	r3, [pc, #108]	; (800a2e8 <Accel+0x1f8>)
 800a27a:	f04f 0200 	mov.w	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
	//壁読んで、
	wall_cut = false;
 800a280:	2300      	movs	r3, #0
 800a282:	75fb      	strb	r3, [r7, #23]
	ChangeLED(0);
 800a284:	2000      	movs	r0, #0
 800a286:	f005 fde7 	bl	800fe58 <ChangeLED>
	KeepPulse[BODY] += target_pulse;
 800a28a:	4b1a      	ldr	r3, [pc, #104]	; (800a2f4 <Accel+0x204>)
 800a28c:	689a      	ldr	r2, [r3, #8]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	4413      	add	r3, r2
 800a292:	4a18      	ldr	r2, [pc, #96]	; (800a2f4 <Accel+0x204>)
 800a294:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a296:	4b17      	ldr	r3, [pc, #92]	; (800a2f4 <Accel+0x204>)
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	0fd9      	lsrs	r1, r3, #31
 800a29e:	440b      	add	r3, r1
 800a2a0:	105b      	asrs	r3, r3, #1
 800a2a2:	4413      	add	r3, r2
 800a2a4:	4a13      	ldr	r2, [pc, #76]	; (800a2f4 <Accel+0x204>)
 800a2a6:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a2a8:	4b12      	ldr	r3, [pc, #72]	; (800a2f4 <Accel+0x204>)
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	0fd9      	lsrs	r1, r3, #31
 800a2b0:	440b      	add	r3, r1
 800a2b2:	105b      	asrs	r3, r3, #1
 800a2b4:	4413      	add	r3, r2
 800a2b6:	4a0f      	ldr	r2, [pc, #60]	; (800a2f4 <Accel+0x204>)
 800a2b8:	6053      	str	r3, [r2, #4]
	//今の速度を取得。
	//到達速度と今の速度、到達に要する距離から加速度を計算する。
//	float a_start = T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * START_ACCEL_DISTANCE);
//	float a= T1 * SEARCH_SPEED * SEARCH_SPEED /(2 * ACCE_DECE_DISTANCE);
//	float a_curve = T1 * SEARCH_SPEED * SEARCH_SPEED * (90+TREAD_WIDTH)*(90+TREAD_WIDTH) /(2 * 2 * CURVE_DISTANCE*90*90);
}
 800a2ba:	bf00      	nop
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bdb0      	pop	{r4, r5, r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	f3af 8000 	nop.w
 800a2c8:	23ca2666 	.word	0x23ca2666
 800a2cc:	3f509268 	.word	0x3f509268
 800a2d0:	9999999a 	.word	0x9999999a
 800a2d4:	3fe99999 	.word	0x3fe99999
 800a2d8:	20000000 	.word	0x20000000
 800a2dc:	200004fc 	.word	0x200004fc
 800a2e0:	2000052c 	.word	0x2000052c
 800a2e4:	3a83126f 	.word	0x3a83126f
 800a2e8:	2000022c 	.word	0x2000022c
 800a2ec:	2000078c 	.word	0x2000078c
 800a2f0:	20000790 	.word	0x20000790
 800a2f4:	20000554 	.word	0x20000554
 800a2f8:	20000520 	.word	0x20000520
 800a2fc:	20000560 	.word	0x20000560
 800a300:	42480000 	.word	0x42480000
 800a304:	4792c122 	.word	0x4792c122

0800a308 <Decel>:
void Decel(float dec_distance, float end_speed)
{
 800a308:	b5b0      	push	{r4, r5, r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a312:	edc7 0a00 	vstr	s1, [r7]
	Pos.Act = decel;
 800a316:	4b68      	ldr	r3, [pc, #416]	; (800a4b8 <Decel+0x1b0>)
 800a318:	2201      	movs	r2, #1
 800a31a:	719a      	strb	r2, [r3, #6]
	//int keep_pulse = TotalPulse[BODY];
	float down_speed=0;
 800a31c:	f04f 0300 	mov.w	r3, #0
 800a320:	60fb      	str	r3, [r7, #12]
	down_speed = CurrentVelocity[BODY] - end_speed;
 800a322:	4b66      	ldr	r3, [pc, #408]	; (800a4bc <Decel+0x1b4>)
 800a324:	ed93 7a02 	vldr	s14, [r3, #8]
 800a328:	edd7 7a00 	vldr	s15, [r7]
 800a32c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a330:	edc7 7a03 	vstr	s15, [r7, #12]
	//速度減分 = 到達したい探索速度 - 現在の速度
	//これなら現在速度が探索速度に追いついているときは加速度0にできる。
	Acceleration = -1 * (T1*down_speed*down_speed / (2*dec_distance) );
 800a334:	edd7 7a03 	vldr	s15, [r7, #12]
 800a338:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800a4c0 <Decel+0x1b8>
 800a33c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a340:	edd7 7a03 	vldr	s15, [r7, #12]
 800a344:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a348:	edd7 7a01 	vldr	s15, [r7, #4]
 800a34c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a354:	eef1 7a67 	vneg.f32	s15, s15
 800a358:	4b5a      	ldr	r3, [pc, #360]	; (800a4c4 <Decel+0x1bc>)
 800a35a:	edc3 7a00 	vstr	s15, [r3]
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
	WallSafe();
 800a35e:	f7fe ff3f 	bl	80091e0 <WallSafe>
	ControlWall();
 800a362:	f7fe ff55 	bl	8009210 <ControlWall>
	//ここより下を分けて書くべきかはあとで考える
	int target_pulse = (int)(2*dec_distance/MM_PER_PULSE);
 800a366:	edd7 7a01 	vldr	s15, [r7, #4]
 800a36a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a36e:	ee17 0a90 	vmov	r0, s15
 800a372:	f7fe f821 	bl	80083b8 <__aeabi_f2d>
 800a376:	a34c      	add	r3, pc, #304	; (adr r3, 800a4a8 <Decel+0x1a0>)
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	f7fe f99e 	bl	80086bc <__aeabi_ddiv>
 800a380:	4603      	mov	r3, r0
 800a382:	460c      	mov	r4, r1
 800a384:	4618      	mov	r0, r3
 800a386:	4621      	mov	r1, r4
 800a388:	f7fe fb1e 	bl	80089c8 <__aeabi_d2iz>
 800a38c:	4603      	mov	r3, r0
 800a38e:	60bb      	str	r3, [r7, #8]
	//止まり切らずに壁に突っ込むのは、
		//適切なタイミングでwhileを抜けたのに出力の反映が遅れたパターンと、
		//これより前の直進が長くても壁センサのおかげで止まれるはずなので出力が残っちゃったパターン。
		//かもしくは条件が成立しちゃっているセンサ値が問題のパターン。
	//スラロームのあとはKeepPulse[BODY]が変わっていないので、そのせいで減速距離が取れていない可能性がある。壁センサも一応見る
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a390:	e052      	b.n	800a438 <Decel+0x130>
//			InitPulse((int*)(&(TIM4->CNT)), INITIAL_PULSE);
//			KeepCounter[RIGHT] = INITIAL_PULSE;
//		}
		//式の順番はあとで前後するかも
		//ControlWall();
		if(TargetVelocity[BODY] <= 0)
 800a392:	4b4d      	ldr	r3, [pc, #308]	; (800a4c8 <Decel+0x1c0>)
 800a394:	edd3 7a02 	vldr	s15, [r3, #8]
 800a398:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a0:	d810      	bhi.n	800a3c4 <Decel+0xbc>
		{
			TargetVelocity[BODY] = 0;
 800a3a2:	4b49      	ldr	r3, [pc, #292]	; (800a4c8 <Decel+0x1c0>)
 800a3a4:	f04f 0200 	mov.w	r2, #0
 800a3a8:	609a      	str	r2, [r3, #8]
			Acceleration = 0;
 800a3aa:	4b46      	ldr	r3, [pc, #280]	; (800a4c4 <Decel+0x1bc>)
 800a3ac:	f04f 0200 	mov.w	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]
			TargetAngularV = 0;
 800a3b2:	4b46      	ldr	r3, [pc, #280]	; (800a4cc <Decel+0x1c4>)
 800a3b4:	f04f 0200 	mov.w	r2, #0
 800a3b8:	601a      	str	r2, [r3, #0]
			AngularAcceleration = 0;
 800a3ba:	4b45      	ldr	r3, [pc, #276]	; (800a4d0 <Decel+0x1c8>)
 800a3bc:	f04f 0200 	mov.w	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
			break;
 800a3c2:	e050      	b.n	800a466 <Decel+0x15e>
		}
		if(KeepPulse[BODY] + (target_pulse*0.65) < TotalPulse[BODY] )
 800a3c4:	4b43      	ldr	r3, [pc, #268]	; (800a4d4 <Decel+0x1cc>)
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fd ffe3 	bl	8008394 <__aeabi_i2d>
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	460d      	mov	r5, r1
 800a3d2:	68b8      	ldr	r0, [r7, #8]
 800a3d4:	f7fd ffde 	bl	8008394 <__aeabi_i2d>
 800a3d8:	a335      	add	r3, pc, #212	; (adr r3, 800a4b0 <Decel+0x1a8>)
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f7fe f843 	bl	8008468 <__aeabi_dmul>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	f7fd fe87 	bl	80080fc <__adddf3>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	4625      	mov	r5, r4
 800a3f4:	461c      	mov	r4, r3
 800a3f6:	4b38      	ldr	r3, [pc, #224]	; (800a4d8 <Decel+0x1d0>)
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fd ffca 	bl	8008394 <__aeabi_i2d>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4620      	mov	r0, r4
 800a406:	4629      	mov	r1, r5
 800a408:	f7fe faa0 	bl	800894c <__aeabi_dcmplt>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d100      	bne.n	800a414 <Decel+0x10c>
 800a412:	e011      	b.n	800a438 <Decel+0x130>
		{
			WallWarn();
 800a414:	f7fe fef0 	bl	80091f8 <WallWarn>
			//ControlWall();
			PIDChangeFlag(L_WALL_PID, 0);
 800a418:	2100      	movs	r1, #0
 800a41a:	2002      	movs	r0, #2
 800a41c:	f006 fab4 	bl	8010988 <PIDChangeFlag>
			PIDChangeFlag(R_WALL_PID, 0);
 800a420:	2100      	movs	r1, #0
 800a422:	2003      	movs	r0, #3
 800a424:	f006 fab0 	bl	8010988 <PIDChangeFlag>
			PIDChangeFlag(D_WALL_PID, 0);
 800a428:	2100      	movs	r1, #0
 800a42a:	2001      	movs	r0, #1
 800a42c:	f006 faac 	bl	8010988 <PIDChangeFlag>
			PIDChangeFlag( A_VELO_PID , 1);
 800a430:	2101      	movs	r1, #1
 800a432:	2000      	movs	r0, #0
 800a434:	f006 faa8 	bl	8010988 <PIDChangeFlag>
	while( (	(Photo[FR]+Photo[FL]) < 3800) && ( KeepPulse[BODY] + target_pulse) > ( TotalPulse[BODY]) )
 800a438:	4b28      	ldr	r3, [pc, #160]	; (800a4dc <Decel+0x1d4>)
 800a43a:	ed93 7a03 	vldr	s14, [r3, #12]
 800a43e:	4b27      	ldr	r3, [pc, #156]	; (800a4dc <Decel+0x1d4>)
 800a440:	edd3 7a00 	vldr	s15, [r3]
 800a444:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a448:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a4e0 <Decel+0x1d8>
 800a44c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a454:	d507      	bpl.n	800a466 <Decel+0x15e>
 800a456:	4b1f      	ldr	r3, [pc, #124]	; (800a4d4 <Decel+0x1cc>)
 800a458:	689a      	ldr	r2, [r3, #8]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	441a      	add	r2, r3
 800a45e:	4b1e      	ldr	r3, [pc, #120]	; (800a4d8 <Decel+0x1d0>)
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	429a      	cmp	r2, r3
 800a464:	dc95      	bgt.n	800a392 <Decel+0x8a>

		}


	}
	WaitStopAndReset();
 800a466:	f7fe ffeb 	bl	8009440 <WaitStopAndReset>
	KeepPulse[BODY] += target_pulse;
 800a46a:	4b1a      	ldr	r3, [pc, #104]	; (800a4d4 <Decel+0x1cc>)
 800a46c:	689a      	ldr	r2, [r3, #8]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	4413      	add	r3, r2
 800a472:	4a18      	ldr	r2, [pc, #96]	; (800a4d4 <Decel+0x1cc>)
 800a474:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800a476:	4b17      	ldr	r3, [pc, #92]	; (800a4d4 <Decel+0x1cc>)
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	0fd9      	lsrs	r1, r3, #31
 800a47e:	440b      	add	r3, r1
 800a480:	105b      	asrs	r3, r3, #1
 800a482:	4413      	add	r3, r2
 800a484:	4a13      	ldr	r2, [pc, #76]	; (800a4d4 <Decel+0x1cc>)
 800a486:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800a488:	4b12      	ldr	r3, [pc, #72]	; (800a4d4 <Decel+0x1cc>)
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	0fd9      	lsrs	r1, r3, #31
 800a490:	440b      	add	r3, r1
 800a492:	105b      	asrs	r3, r3, #1
 800a494:	4413      	add	r3, r2
 800a496:	4a0f      	ldr	r2, [pc, #60]	; (800a4d4 <Decel+0x1cc>)
 800a498:	6053      	str	r3, [r2, #4]


}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	f3af 8000 	nop.w
 800a4a8:	23ca2666 	.word	0x23ca2666
 800a4ac:	3f509268 	.word	0x3f509268
 800a4b0:	cccccccd 	.word	0xcccccccd
 800a4b4:	3fe4cccc 	.word	0x3fe4cccc
 800a4b8:	20000000 	.word	0x20000000
 800a4bc:	2000052c 	.word	0x2000052c
 800a4c0:	3a83126f 	.word	0x3a83126f
 800a4c4:	2000022c 	.word	0x2000022c
 800a4c8:	200004ec 	.word	0x200004ec
 800a4cc:	200004fc 	.word	0x200004fc
 800a4d0:	20000230 	.word	0x20000230
 800a4d4:	20000554 	.word	0x20000554
 800a4d8:	20000520 	.word	0x20000520
 800a4dc:	20000560 	.word	0x20000560
 800a4e0:	456d8000 	.word	0x456d8000
 800a4e4:	00000000 	.word	0x00000000

0800a4e8 <Calib>:
//色々な処理を合わせて先に関数を作ってしまう方がいいかも。
//加速だけ、減速だけ、定速で、などを組み合わせて台形加減速で一区画走る、とか数区画走れる、途中で壁を見る、とか。
void Calib(int distance)
{
 800a4e8:	b590      	push	{r4, r7, lr}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
	//Pos.を考え中
	int target_pulse = (int)(2*distance/MM_PER_PULSE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	005b      	lsls	r3, r3, #1
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fd ff4d 	bl	8008394 <__aeabi_i2d>
 800a4fa:	a32b      	add	r3, pc, #172	; (adr r3, 800a5a8 <Calib+0xc0>)
 800a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a500:	f7fe f8dc 	bl	80086bc <__aeabi_ddiv>
 800a504:	4603      	mov	r3, r0
 800a506:	460c      	mov	r4, r1
 800a508:	4618      	mov	r0, r3
 800a50a:	4621      	mov	r1, r4
 800a50c:	f7fe fa5c 	bl	80089c8 <__aeabi_d2iz>
 800a510:	4603      	mov	r3, r0
 800a512:	60fb      	str	r3, [r7, #12]
	//int keep_pulse = TotalPulse[BODY]+target_pulse;
	if(target_pulse > 0)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	dd15      	ble.n	800a546 <Calib+0x5e>
	{
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a51a:	e006      	b.n	800a52a <Calib+0x42>
		{
			Acceleration = 0;
 800a51c:	4b1c      	ldr	r3, [pc, #112]	; (800a590 <Calib+0xa8>)
 800a51e:	f04f 0200 	mov.w	r2, #0
 800a522:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = 70;
 800a524:	4b1b      	ldr	r3, [pc, #108]	; (800a594 <Calib+0xac>)
 800a526:	4a1c      	ldr	r2, [pc, #112]	; (800a598 <Calib+0xb0>)
 800a528:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse > TotalPulse[BODY] )
 800a52a:	4b1c      	ldr	r3, [pc, #112]	; (800a59c <Calib+0xb4>)
 800a52c:	689a      	ldr	r2, [r3, #8]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	441a      	add	r2, r3
 800a532:	4b1b      	ldr	r3, [pc, #108]	; (800a5a0 <Calib+0xb8>)
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	429a      	cmp	r2, r3
 800a538:	dcf0      	bgt.n	800a51c <Calib+0x34>
		}
		KeepPulse[BODY] += target_pulse;
 800a53a:	4b18      	ldr	r3, [pc, #96]	; (800a59c <Calib+0xb4>)
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4413      	add	r3, r2
 800a542:	4a16      	ldr	r2, [pc, #88]	; (800a59c <Calib+0xb4>)
 800a544:	6093      	str	r3, [r2, #8]

	}
	if(target_pulse < 0 )
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	da15      	bge.n	800a578 <Calib+0x90>
	{
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a54c:	e006      	b.n	800a55c <Calib+0x74>
		{
			Acceleration = 0;
 800a54e:	4b10      	ldr	r3, [pc, #64]	; (800a590 <Calib+0xa8>)
 800a550:	f04f 0200 	mov.w	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
			TargetVelocity[BODY] = -100;
 800a556:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <Calib+0xac>)
 800a558:	4a12      	ldr	r2, [pc, #72]	; (800a5a4 <Calib+0xbc>)
 800a55a:	609a      	str	r2, [r3, #8]
		while( KeepPulse[BODY] + target_pulse < TotalPulse[BODY] )
 800a55c:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <Calib+0xb4>)
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	441a      	add	r2, r3
 800a564:	4b0e      	ldr	r3, [pc, #56]	; (800a5a0 <Calib+0xb8>)
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	429a      	cmp	r2, r3
 800a56a:	dbf0      	blt.n	800a54e <Calib+0x66>
		}
		KeepPulse[BODY] += target_pulse;
 800a56c:	4b0b      	ldr	r3, [pc, #44]	; (800a59c <Calib+0xb4>)
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4413      	add	r3, r2
 800a574:	4a09      	ldr	r2, [pc, #36]	; (800a59c <Calib+0xb4>)
 800a576:	6093      	str	r3, [r2, #8]
	}
	TargetVelocity[BODY] = 0;
 800a578:	4b06      	ldr	r3, [pc, #24]	; (800a594 <Calib+0xac>)
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	609a      	str	r2, [r3, #8]
	Acceleration = 0;
 800a580:	4b03      	ldr	r3, [pc, #12]	; (800a590 <Calib+0xa8>)
 800a582:	f04f 0200 	mov.w	r2, #0
 800a586:	601a      	str	r2, [r3, #0]
}
 800a588:	bf00      	nop
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd90      	pop	{r4, r7, pc}
 800a590:	2000022c 	.word	0x2000022c
 800a594:	200004ec 	.word	0x200004ec
 800a598:	428c0000 	.word	0x428c0000
 800a59c:	20000554 	.word	0x20000554
 800a5a0:	20000520 	.word	0x20000520
 800a5a4:	c2c80000 	.word	0xc2c80000
 800a5a8:	23ca2666 	.word	0x23ca2666
 800a5ac:	3f509268 	.word	0x3f509268

0800a5b0 <Compensate>:
void Compensate()
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
	//誤差補正する
	//Pos.を考え中
	Pos.Act = compensate;
 800a5b4:	4b04      	ldr	r3, [pc, #16]	; (800a5c8 <Compensate+0x18>)
 800a5b6:	2206      	movs	r2, #6
 800a5b8:	719a      	strb	r2, [r3, #6]
	TargetPhoto[FL];

#else
	//バック補正
	//ControlWall();
	Calib(-50);
 800a5ba:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800a5be:	f7ff ff93 	bl	800a4e8 <Calib>

//	Accel(7,-70);
//	Decel(7,0);
#endif

}
 800a5c2:	bf00      	nop
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20000000 	.word	0x20000000

0800a5cc <AjustCenter>:
float AjustCenter(){
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
	//x,y,lrfb
	PIDChangeFlag(L_WALL_PID, 0);
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	2002      	movs	r0, #2
 800a5d6:	f006 f9d7 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800a5da:	2100      	movs	r1, #0
 800a5dc:	2003      	movs	r0, #3
 800a5de:	f006 f9d3 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	2001      	movs	r0, #1
 800a5e6:	f006 f9cf 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag( A_VELO_PID, 0);
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	f006 f9cb 	bl	8010988 <PIDChangeFlag>
	Pos.Act = compensate;
 800a5f2:	4bba      	ldr	r3, [pc, #744]	; (800a8dc <AjustCenter+0x310>)
 800a5f4:	2206      	movs	r2, #6
 800a5f6:	719a      	strb	r2, [r3, #6]
	int wall_ctrl = GetWallCtrlDirection();
 800a5f8:	f7fe fc1a 	bl	8008e30 <GetWallCtrlDirection>
 800a5fc:	6078      	str	r0, [r7, #4]
	PIDChangeFlag(wall_ctrl, 1);
 800a5fe:	2101      	movs	r1, #1
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f006 f9c1 	bl	8010988 <PIDChangeFlag>
	//HAL_Delay(100);
	switch(Pos.Car%4)
 800a606:	4bb5      	ldr	r3, [pc, #724]	; (800a8dc <AjustCenter+0x310>)
 800a608:	795b      	ldrb	r3, [r3, #5]
 800a60a:	f003 0303 	and.w	r3, r3, #3
 800a60e:	2b03      	cmp	r3, #3
 800a610:	f200 81cc 	bhi.w	800a9ac <AjustCenter+0x3e0>
 800a614:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <AjustCenter+0x50>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a62d 	.word	0x0800a62d
 800a620:	0800a705 	.word	0x0800a705
 800a624:	0800a7dd 	.word	0x0800a7dd
 800a628:	0800a8b5 	.word	0x0800a8b5
	{
	case north: //use west or north wall
			if (Wall[Pos.X][Pos.Y].north == wall) //前に壁があれば前で調整
 800a62c:	4bab      	ldr	r3, [pc, #684]	; (800a8dc <AjustCenter+0x310>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	4619      	mov	r1, r3
 800a632:	4baa      	ldr	r3, [pc, #680]	; (800a8dc <AjustCenter+0x310>)
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	4618      	mov	r0, r3
 800a638:	4aa9      	ldr	r2, [pc, #676]	; (800a8e0 <AjustCenter+0x314>)
 800a63a:	460b      	mov	r3, r1
 800a63c:	00db      	lsls	r3, r3, #3
 800a63e:	440b      	add	r3, r1
 800a640:	4403      	add	r3, r0
 800a642:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a646:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d135      	bne.n	800a6bc <AjustCenter+0xf0>
			{
				//前壁調整
				while( !( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))//(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )
 800a650:	e005      	b.n	800a65e <AjustCenter+0x92>
				{
					ChangeLED(Pid[F_WALL_PID].flag);
 800a652:	4ba4      	ldr	r3, [pc, #656]	; (800a8e4 <AjustCenter+0x318>)
 800a654:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a658:	4618      	mov	r0, r3
 800a65a:	f005 fbfd 	bl	800fe58 <ChangeLED>
				while( !( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100)) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))//(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )
 800a65e:	4ba2      	ldr	r3, [pc, #648]	; (800a8e8 <AjustCenter+0x31c>)
 800a660:	ed93 7a00 	vldr	s14, [r3]
 800a664:	4ba0      	ldr	r3, [pc, #640]	; (800a8e8 <AjustCenter+0x31c>)
 800a666:	edd3 7a03 	vldr	s15, [r3, #12]
 800a66a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a66e:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800a8ec <AjustCenter+0x320>
 800a672:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67a:	bfcc      	ite	gt
 800a67c:	2301      	movgt	r3, #1
 800a67e:	2300      	movle	r3, #0
 800a680:	b2db      	uxtb	r3, r3
 800a682:	f083 0301 	eor.w	r3, r3, #1
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1e2      	bne.n	800a652 <AjustCenter+0x86>
 800a68c:	4b96      	ldr	r3, [pc, #600]	; (800a8e8 <AjustCenter+0x31c>)
 800a68e:	ed93 7a00 	vldr	s14, [r3]
 800a692:	4b95      	ldr	r3, [pc, #596]	; (800a8e8 <AjustCenter+0x31c>)
 800a694:	edd3 7a03 	vldr	s15, [r3, #12]
 800a698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a69c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800a8f0 <AjustCenter+0x324>
 800a6a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a8:	bf4c      	ite	mi
 800a6aa:	2301      	movmi	r3, #1
 800a6ac:	2300      	movpl	r3, #0
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	f083 0301 	eor.w	r3, r3, #1
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1cb      	bne.n	800a652 <AjustCenter+0x86>

				Pid[wall_ctrl].flag = 0;
				TargetAngularV = 0;
				return 61.5;
			}
		break;
 800a6ba:	e179      	b.n	800a9b0 <AjustCenter+0x3e4>
			else if (Wall[Pos.X][Pos.Y].south == wall) //後ろに壁があるときはバック
 800a6bc:	4b87      	ldr	r3, [pc, #540]	; (800a8dc <AjustCenter+0x310>)
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	4b86      	ldr	r3, [pc, #536]	; (800a8dc <AjustCenter+0x310>)
 800a6c4:	785b      	ldrb	r3, [r3, #1]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	4a85      	ldr	r2, [pc, #532]	; (800a8e0 <AjustCenter+0x314>)
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	00db      	lsls	r3, r3, #3
 800a6ce:	440b      	add	r3, r1
 800a6d0:	4403      	add	r3, r0
 800a6d2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a6d6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	f040 8167 	bne.w	800a9b0 <AjustCenter+0x3e4>
				Compensate();	//後ろ壁調整
 800a6e2:	f7ff ff65 	bl	800a5b0 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a6e6:	4a7f      	ldr	r2, [pc, #508]	; (800a8e4 <AjustCenter+0x318>)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	212c      	movs	r1, #44	; 0x2c
 800a6ec:	fb01 f303 	mul.w	r3, r1, r3
 800a6f0:	4413      	add	r3, r2
 800a6f2:	3328      	adds	r3, #40	; 0x28
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a6f8:	4b7e      	ldr	r3, [pc, #504]	; (800a8f4 <AjustCenter+0x328>)
 800a6fa:	f04f 0200 	mov.w	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a700:	4b7d      	ldr	r3, [pc, #500]	; (800a8f8 <AjustCenter+0x32c>)
 800a702:	e168      	b.n	800a9d6 <AjustCenter+0x40a>
	case east:
			if (Wall[Pos.X][Pos.Y].east == wall) //前に壁があれば前で調整
 800a704:	4b75      	ldr	r3, [pc, #468]	; (800a8dc <AjustCenter+0x310>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	4619      	mov	r1, r3
 800a70a:	4b74      	ldr	r3, [pc, #464]	; (800a8dc <AjustCenter+0x310>)
 800a70c:	785b      	ldrb	r3, [r3, #1]
 800a70e:	4618      	mov	r0, r3
 800a710:	4a73      	ldr	r2, [pc, #460]	; (800a8e0 <AjustCenter+0x314>)
 800a712:	460b      	mov	r3, r1
 800a714:	00db      	lsls	r3, r3, #3
 800a716:	440b      	add	r3, r1
 800a718:	4403      	add	r3, r0
 800a71a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a71e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b01      	cmp	r3, #1
 800a726:	d135      	bne.n	800a794 <AjustCenter+0x1c8>
			{
				//前壁調整
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a728:	e005      	b.n	800a736 <AjustCenter+0x16a>
					{
					ChangeLED(Pid[F_WALL_PID].flag);
 800a72a:	4b6e      	ldr	r3, [pc, #440]	; (800a8e4 <AjustCenter+0x318>)
 800a72c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a730:	4618      	mov	r0, r3
 800a732:	f005 fb91 	bl	800fe58 <ChangeLED>
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a736:	4b6c      	ldr	r3, [pc, #432]	; (800a8e8 <AjustCenter+0x31c>)
 800a738:	ed93 7a00 	vldr	s14, [r3]
 800a73c:	4b6a      	ldr	r3, [pc, #424]	; (800a8e8 <AjustCenter+0x31c>)
 800a73e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a742:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a746:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800a8ec <AjustCenter+0x320>
 800a74a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a752:	bfcc      	ite	gt
 800a754:	2301      	movgt	r3, #1
 800a756:	2300      	movle	r3, #0
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	f083 0301 	eor.w	r3, r3, #1
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e2      	bne.n	800a72a <AjustCenter+0x15e>
 800a764:	4b60      	ldr	r3, [pc, #384]	; (800a8e8 <AjustCenter+0x31c>)
 800a766:	ed93 7a00 	vldr	s14, [r3]
 800a76a:	4b5f      	ldr	r3, [pc, #380]	; (800a8e8 <AjustCenter+0x31c>)
 800a76c:	edd3 7a03 	vldr	s15, [r3, #12]
 800a770:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a774:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800a8f0 <AjustCenter+0x324>
 800a778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a780:	bf4c      	ite	mi
 800a782:	2301      	movmi	r3, #1
 800a784:	2300      	movpl	r3, #0
 800a786:	b2db      	uxtb	r3, r3
 800a788:	f083 0301 	eor.w	r3, r3, #1
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1cb      	bne.n	800a72a <AjustCenter+0x15e>
				Compensate();//後ろ壁調整
				Pid[wall_ctrl].flag = 0;
				TargetAngularV = 0;
				return 61.5;
			}
		break;
 800a792:	e10f      	b.n	800a9b4 <AjustCenter+0x3e8>
			else if (Wall[Pos.X][Pos.Y].west == wall) //後ろに壁があるときはバック
 800a794:	4b51      	ldr	r3, [pc, #324]	; (800a8dc <AjustCenter+0x310>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	4619      	mov	r1, r3
 800a79a:	4b50      	ldr	r3, [pc, #320]	; (800a8dc <AjustCenter+0x310>)
 800a79c:	785b      	ldrb	r3, [r3, #1]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	4a4f      	ldr	r2, [pc, #316]	; (800a8e0 <AjustCenter+0x314>)
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	00db      	lsls	r3, r3, #3
 800a7a6:	440b      	add	r3, r1
 800a7a8:	4403      	add	r3, r0
 800a7aa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a7ae:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	f040 80fd 	bne.w	800a9b4 <AjustCenter+0x3e8>
				Compensate();//後ろ壁調整
 800a7ba:	f7ff fef9 	bl	800a5b0 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a7be:	4a49      	ldr	r2, [pc, #292]	; (800a8e4 <AjustCenter+0x318>)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	212c      	movs	r1, #44	; 0x2c
 800a7c4:	fb01 f303 	mul.w	r3, r1, r3
 800a7c8:	4413      	add	r3, r2
 800a7ca:	3328      	adds	r3, #40	; 0x28
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a7d0:	4b48      	ldr	r3, [pc, #288]	; (800a8f4 <AjustCenter+0x328>)
 800a7d2:	f04f 0200 	mov.w	r2, #0
 800a7d6:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a7d8:	4b47      	ldr	r3, [pc, #284]	; (800a8f8 <AjustCenter+0x32c>)
 800a7da:	e0fc      	b.n	800a9d6 <AjustCenter+0x40a>
	case south:
			if (Wall[Pos.X][Pos.Y].south == wall) //前に壁があれば前で調整
 800a7dc:	4b3f      	ldr	r3, [pc, #252]	; (800a8dc <AjustCenter+0x310>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4b3e      	ldr	r3, [pc, #248]	; (800a8dc <AjustCenter+0x310>)
 800a7e4:	785b      	ldrb	r3, [r3, #1]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	4a3d      	ldr	r2, [pc, #244]	; (800a8e0 <AjustCenter+0x314>)
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	00db      	lsls	r3, r3, #3
 800a7ee:	440b      	add	r3, r1
 800a7f0:	4403      	add	r3, r0
 800a7f2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a7f6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d135      	bne.n	800a86c <AjustCenter+0x2a0>
			{
				//前壁調整
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a800:	e005      	b.n	800a80e <AjustCenter+0x242>
					{
						ChangeLED(Pid[F_WALL_PID].flag);
 800a802:	4b38      	ldr	r3, [pc, #224]	; (800a8e4 <AjustCenter+0x318>)
 800a804:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a808:	4618      	mov	r0, r3
 800a80a:	f005 fb25 	bl	800fe58 <ChangeLED>
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a80e:	4b36      	ldr	r3, [pc, #216]	; (800a8e8 <AjustCenter+0x31c>)
 800a810:	ed93 7a00 	vldr	s14, [r3]
 800a814:	4b34      	ldr	r3, [pc, #208]	; (800a8e8 <AjustCenter+0x31c>)
 800a816:	edd3 7a03 	vldr	s15, [r3, #12]
 800a81a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a81e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a8ec <AjustCenter+0x320>
 800a822:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a82a:	bfcc      	ite	gt
 800a82c:	2301      	movgt	r3, #1
 800a82e:	2300      	movle	r3, #0
 800a830:	b2db      	uxtb	r3, r3
 800a832:	f083 0301 	eor.w	r3, r3, #1
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1e2      	bne.n	800a802 <AjustCenter+0x236>
 800a83c:	4b2a      	ldr	r3, [pc, #168]	; (800a8e8 <AjustCenter+0x31c>)
 800a83e:	ed93 7a00 	vldr	s14, [r3]
 800a842:	4b29      	ldr	r3, [pc, #164]	; (800a8e8 <AjustCenter+0x31c>)
 800a844:	edd3 7a03 	vldr	s15, [r3, #12]
 800a848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a84c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a8f0 <AjustCenter+0x324>
 800a850:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a858:	bf4c      	ite	mi
 800a85a:	2301      	movmi	r3, #1
 800a85c:	2300      	movpl	r3, #0
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	f083 0301 	eor.w	r3, r3, #1
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1cb      	bne.n	800a802 <AjustCenter+0x236>
				Compensate();//後ろ壁調整
				Pid[wall_ctrl].flag = 0;
				TargetAngularV = 0;
				return 61.5;
			}
		break;
 800a86a:	e0a5      	b.n	800a9b8 <AjustCenter+0x3ec>
			else if (Wall[Pos.X][Pos.Y].north == wall) //後ろに壁があるときはバック
 800a86c:	4b1b      	ldr	r3, [pc, #108]	; (800a8dc <AjustCenter+0x310>)
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	4619      	mov	r1, r3
 800a872:	4b1a      	ldr	r3, [pc, #104]	; (800a8dc <AjustCenter+0x310>)
 800a874:	785b      	ldrb	r3, [r3, #1]
 800a876:	4618      	mov	r0, r3
 800a878:	4a19      	ldr	r2, [pc, #100]	; (800a8e0 <AjustCenter+0x314>)
 800a87a:	460b      	mov	r3, r1
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	440b      	add	r3, r1
 800a880:	4403      	add	r3, r0
 800a882:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a886:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	f040 8093 	bne.w	800a9b8 <AjustCenter+0x3ec>
				Compensate();//後ろ壁調整
 800a892:	f7ff fe8d 	bl	800a5b0 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a896:	4a13      	ldr	r2, [pc, #76]	; (800a8e4 <AjustCenter+0x318>)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	212c      	movs	r1, #44	; 0x2c
 800a89c:	fb01 f303 	mul.w	r3, r1, r3
 800a8a0:	4413      	add	r3, r2
 800a8a2:	3328      	adds	r3, #40	; 0x28
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a8a8:	4b12      	ldr	r3, [pc, #72]	; (800a8f4 <AjustCenter+0x328>)
 800a8aa:	f04f 0200 	mov.w	r2, #0
 800a8ae:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a8b0:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <AjustCenter+0x32c>)
 800a8b2:	e090      	b.n	800a9d6 <AjustCenter+0x40a>
	case west:
			if (Wall[Pos.X][Pos.Y].west == wall) //前に壁があれば前で調整
 800a8b4:	4b09      	ldr	r3, [pc, #36]	; (800a8dc <AjustCenter+0x310>)
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4b08      	ldr	r3, [pc, #32]	; (800a8dc <AjustCenter+0x310>)
 800a8bc:	785b      	ldrb	r3, [r3, #1]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	4a07      	ldr	r2, [pc, #28]	; (800a8e0 <AjustCenter+0x314>)
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	440b      	add	r3, r1
 800a8c8:	4403      	add	r3, r0
 800a8ca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a8ce:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d146      	bne.n	800a966 <AjustCenter+0x39a>
			{
				//前壁調整
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a8d8:	e016      	b.n	800a908 <AjustCenter+0x33c>
 800a8da:	bf00      	nop
 800a8dc:	20000000 	.word	0x20000000
 800a8e0:	200006e8 	.word	0x200006e8
 800a8e4:	20000318 	.word	0x20000318
 800a8e8:	20000560 	.word	0x20000560
 800a8ec:	4573c000 	.word	0x4573c000
 800a8f0:	45802000 	.word	0x45802000
 800a8f4:	200004fc 	.word	0x200004fc
 800a8f8:	42760000 	.word	0x42760000
					{
					ChangeLED(Pid[F_WALL_PID].flag);
 800a8fc:	4b39      	ldr	r3, [pc, #228]	; (800a9e4 <AjustCenter+0x418>)
 800a8fe:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a902:	4618      	mov	r0, r3
 800a904:	f005 faa8 	bl	800fe58 <ChangeLED>
				while( !(( (3900 < Photo[FL] + Photo[FR]) && (Photo[FL] + Photo[FR] < 4100))) )//&& !(-0.2< CurrentVelocity[BODY] && CurrentVelocity[BODY] <  0.2))
 800a908:	4b37      	ldr	r3, [pc, #220]	; (800a9e8 <AjustCenter+0x41c>)
 800a90a:	ed93 7a00 	vldr	s14, [r3]
 800a90e:	4b36      	ldr	r3, [pc, #216]	; (800a9e8 <AjustCenter+0x41c>)
 800a910:	edd3 7a03 	vldr	s15, [r3, #12]
 800a914:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a918:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a9ec <AjustCenter+0x420>
 800a91c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a924:	bfcc      	ite	gt
 800a926:	2301      	movgt	r3, #1
 800a928:	2300      	movle	r3, #0
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	f083 0301 	eor.w	r3, r3, #1
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1e2      	bne.n	800a8fc <AjustCenter+0x330>
 800a936:	4b2c      	ldr	r3, [pc, #176]	; (800a9e8 <AjustCenter+0x41c>)
 800a938:	ed93 7a00 	vldr	s14, [r3]
 800a93c:	4b2a      	ldr	r3, [pc, #168]	; (800a9e8 <AjustCenter+0x41c>)
 800a93e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a942:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a946:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a9f0 <AjustCenter+0x424>
 800a94a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a952:	bf4c      	ite	mi
 800a954:	2301      	movmi	r3, #1
 800a956:	2300      	movpl	r3, #0
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	f083 0301 	eor.w	r3, r3, #1
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1cb      	bne.n	800a8fc <AjustCenter+0x330>
				Pid[wall_ctrl].flag = 0;
				TargetAngularV = 0;
				return 61.5;
			}
	default:
		break;
 800a964:	e022      	b.n	800a9ac <AjustCenter+0x3e0>
			else if (Wall[Pos.X][Pos.Y].east == wall) //後ろに壁があるときはバック
 800a966:	4b23      	ldr	r3, [pc, #140]	; (800a9f4 <AjustCenter+0x428>)
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	4619      	mov	r1, r3
 800a96c:	4b21      	ldr	r3, [pc, #132]	; (800a9f4 <AjustCenter+0x428>)
 800a96e:	785b      	ldrb	r3, [r3, #1]
 800a970:	4618      	mov	r0, r3
 800a972:	4a21      	ldr	r2, [pc, #132]	; (800a9f8 <AjustCenter+0x42c>)
 800a974:	460b      	mov	r3, r1
 800a976:	00db      	lsls	r3, r3, #3
 800a978:	440b      	add	r3, r1
 800a97a:	4403      	add	r3, r0
 800a97c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800a980:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b01      	cmp	r3, #1
 800a988:	d110      	bne.n	800a9ac <AjustCenter+0x3e0>
				Compensate();//後ろ壁調整
 800a98a:	f7ff fe11 	bl	800a5b0 <Compensate>
				Pid[wall_ctrl].flag = 0;
 800a98e:	4a15      	ldr	r2, [pc, #84]	; (800a9e4 <AjustCenter+0x418>)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	212c      	movs	r1, #44	; 0x2c
 800a994:	fb01 f303 	mul.w	r3, r1, r3
 800a998:	4413      	add	r3, r2
 800a99a:	3328      	adds	r3, #40	; 0x28
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]
				TargetAngularV = 0;
 800a9a0:	4b16      	ldr	r3, [pc, #88]	; (800a9fc <AjustCenter+0x430>)
 800a9a2:	f04f 0200 	mov.w	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]
				return 61.5;
 800a9a8:	4b15      	ldr	r3, [pc, #84]	; (800aa00 <AjustCenter+0x434>)
 800a9aa:	e014      	b.n	800a9d6 <AjustCenter+0x40a>
		break;
 800a9ac:	bf00      	nop
 800a9ae:	e004      	b.n	800a9ba <AjustCenter+0x3ee>
		break;
 800a9b0:	bf00      	nop
 800a9b2:	e002      	b.n	800a9ba <AjustCenter+0x3ee>
		break;
 800a9b4:	bf00      	nop
 800a9b6:	e000      	b.n	800a9ba <AjustCenter+0x3ee>
		break;
 800a9b8:	bf00      	nop
	}
	Pid[wall_ctrl].flag = 0;
 800a9ba:	4a0a      	ldr	r2, [pc, #40]	; (800a9e4 <AjustCenter+0x418>)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	212c      	movs	r1, #44	; 0x2c
 800a9c0:	fb01 f303 	mul.w	r3, r1, r3
 800a9c4:	4413      	add	r3, r2
 800a9c6:	3328      	adds	r3, #40	; 0x28
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 800a9cc:	4b0b      	ldr	r3, [pc, #44]	; (800a9fc <AjustCenter+0x430>)
 800a9ce:	f04f 0200 	mov.w	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
	return 45;
 800a9d4:	4b0b      	ldr	r3, [pc, #44]	; (800aa04 <AjustCenter+0x438>)
 800a9d6:	ee07 3a90 	vmov	s15, r3
}
 800a9da:	eeb0 0a67 	vmov.f32	s0, s15
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	20000318 	.word	0x20000318
 800a9e8:	20000560 	.word	0x20000560
 800a9ec:	4573c000 	.word	0x4573c000
 800a9f0:	45802000 	.word	0x45802000
 800a9f4:	20000000 	.word	0x20000000
 800a9f8:	200006e8 	.word	0x200006e8
 800a9fc:	200004fc 	.word	0x200004fc
 800aa00:	42760000 	.word	0x42760000
 800aa04:	42340000 	.word	0x42340000

0800aa08 <GoStraight>:
void GoStraight(float move_distance,  float explore_speed, float accel)
{
 800aa08:	b5b0      	push	{r4, r5, r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	ed87 0a03 	vstr	s0, [r7, #12]
 800aa12:	edc7 0a02 	vstr	s1, [r7, #8]
 800aa16:	ed87 1a01 	vstr	s2, [r7, #4]
	//explore_speed += accel;

	//壁の有無をすべて知っている区間は更新する必要がないので一気に加速させて座標を二つ更新
	//移動量は90だけど、加速に要する距離はその半分とか好きに変えられるように。
	//int keep_pulse = TotalPulse[BODY];
	int target_pulse = (int)(2*move_distance/MM_PER_PULSE);
 800aa1a:	edd7 7a03 	vldr	s15, [r7, #12]
 800aa1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aa22:	ee17 0a90 	vmov	r0, s15
 800aa26:	f7fd fcc7 	bl	80083b8 <__aeabi_f2d>
 800aa2a:	a39a      	add	r3, pc, #616	; (adr r3, 800ac94 <GoStraight+0x28c>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f7fd fe44 	bl	80086bc <__aeabi_ddiv>
 800aa34:	4603      	mov	r3, r0
 800aa36:	460c      	mov	r4, r1
 800aa38:	4618      	mov	r0, r3
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	f7fd ffc4 	bl	80089c8 <__aeabi_d2iz>
 800aa40:	4603      	mov	r3, r0
 800aa42:	613b      	str	r3, [r7, #16]

	if(accel != 0) //加速するとき
 800aa44:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa48:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aa4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa50:	d022      	beq.n	800aa98 <GoStraight+0x90>
	{
		//移動後は今の方角が維持される、
		WallWarn();
 800aa52:	f7fe fbd1 	bl	80091f8 <WallWarn>
		ControlWall();
 800aa56:	f7fe fbdb 	bl	8009210 <ControlWall>
		Accel( move_distance/2 , explore_speed+accel);	//要計算	//現在の制御目標速度がexploreに近ければ加速度は小さくなるし、差が限りなく小さければほぼ加速しない。つまり定速にもなる。微妙なズレを埋めることができる。切り捨てるけど。
 800aa5a:	edd7 7a03 	vldr	s15, [r7, #12]
 800aa5e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aa66:	ed97 7a02 	vldr	s14, [r7, #8]
 800aa6a:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa72:	eef0 0a67 	vmov.f32	s1, s15
 800aa76:	eeb0 0a66 	vmov.f32	s0, s13
 800aa7a:	f7ff fb39 	bl	800a0f0 <Accel>
		while( ( KeepPulse[BODY] + (target_pulse/2)) > ( TotalPulse[BODY]) )
 800aa7e:	bf00      	nop
 800aa80:	4b7b      	ldr	r3, [pc, #492]	; (800ac70 <GoStraight+0x268>)
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	0fd9      	lsrs	r1, r3, #31
 800aa88:	440b      	add	r3, r1
 800aa8a:	105b      	asrs	r3, r3, #1
 800aa8c:	441a      	add	r2, r3
 800aa8e:	4b79      	ldr	r3, [pc, #484]	; (800ac74 <GoStraight+0x26c>)
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	dcf4      	bgt.n	800aa80 <GoStraight+0x78>
 800aa96:	e0c0      	b.n	800ac1a <GoStraight+0x212>
	//		}
		}
	}
	else
	{
		Pos.Act = straight;
 800aa98:	4b77      	ldr	r3, [pc, #476]	; (800ac78 <GoStraight+0x270>)
 800aa9a:	2205      	movs	r2, #5
 800aa9c:	719a      	strb	r2, [r3, #6]
		WallSafe();
 800aa9e:	f7fe fb9f 	bl	80091e0 <WallSafe>
		ControlWall();
 800aaa2:	f7fe fbb5 	bl	8009210 <ControlWall>
		Calc = SearchOrFast;
 800aaa6:	4b75      	ldr	r3, [pc, #468]	; (800ac7c <GoStraight+0x274>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a75      	ldr	r2, [pc, #468]	; (800ac80 <GoStraight+0x278>)
 800aaac:	6013      	str	r3, [r2, #0]
		_Bool wall_cut=false;
 800aaae:	2300      	movs	r3, #0
 800aab0:	75fb      	strb	r3, [r7, #23]
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800aab2:	e0a7      	b.n	800ac04 <GoStraight+0x1fc>
		{
			//最初の45mmで加速をストップ
			//ControlWall();
			//探索目標速度 <= 制御目標速度  となったら、加速をやめる。
			if(KeepPulse[BODY] + (target_pulse*0.4) < TotalPulse[BODY] )
 800aab4:	4b6e      	ldr	r3, [pc, #440]	; (800ac70 <GoStraight+0x268>)
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fd fc6b 	bl	8008394 <__aeabi_i2d>
 800aabe:	4604      	mov	r4, r0
 800aac0:	460d      	mov	r5, r1
 800aac2:	6938      	ldr	r0, [r7, #16]
 800aac4:	f7fd fc66 	bl	8008394 <__aeabi_i2d>
 800aac8:	a365      	add	r3, pc, #404	; (adr r3, 800ac60 <GoStraight+0x258>)
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	f7fd fccb 	bl	8008468 <__aeabi_dmul>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	4620      	mov	r0, r4
 800aad8:	4629      	mov	r1, r5
 800aada:	f7fd fb0f 	bl	80080fc <__adddf3>
 800aade:	4603      	mov	r3, r0
 800aae0:	460c      	mov	r4, r1
 800aae2:	4625      	mov	r5, r4
 800aae4:	461c      	mov	r4, r3
 800aae6:	4b63      	ldr	r3, [pc, #396]	; (800ac74 <GoStraight+0x26c>)
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fd fc52 	bl	8008394 <__aeabi_i2d>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	f7fd ff28 	bl	800894c <__aeabi_dcmplt>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d011      	beq.n	800ab26 <GoStraight+0x11e>
			{
				WallWarn();
 800ab02:	f7fe fb79 	bl	80091f8 <WallWarn>
				PIDChangeFlag(L_WALL_PID, 0);
 800ab06:	2100      	movs	r1, #0
 800ab08:	2002      	movs	r0, #2
 800ab0a:	f005 ff3d 	bl	8010988 <PIDChangeFlag>
				PIDChangeFlag(R_WALL_PID, 0);
 800ab0e:	2100      	movs	r1, #0
 800ab10:	2003      	movs	r0, #3
 800ab12:	f005 ff39 	bl	8010988 <PIDChangeFlag>
				PIDChangeFlag(D_WALL_PID, 0);
 800ab16:	2100      	movs	r1, #0
 800ab18:	2001      	movs	r0, #1
 800ab1a:	f005 ff35 	bl	8010988 <PIDChangeFlag>
				PIDChangeFlag( A_VELO_PID , 1);
 800ab1e:	2101      	movs	r1, #1
 800ab20:	2000      	movs	r0, #0
 800ab22:	f005 ff31 	bl	8010988 <PIDChangeFlag>
				//右か左の壁のセンサ値を見て、閾値を下回ったら、TotalPulseかKeepPulseを補正する
			}

			if(KeepPulse[BODY] + (target_pulse*0.80) < TotalPulse[BODY] && Calc == 0)
 800ab26:	4b52      	ldr	r3, [pc, #328]	; (800ac70 <GoStraight+0x268>)
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fd fc32 	bl	8008394 <__aeabi_i2d>
 800ab30:	4604      	mov	r4, r0
 800ab32:	460d      	mov	r5, r1
 800ab34:	6938      	ldr	r0, [r7, #16]
 800ab36:	f7fd fc2d 	bl	8008394 <__aeabi_i2d>
 800ab3a:	a34b      	add	r3, pc, #300	; (adr r3, 800ac68 <GoStraight+0x260>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7fd fc92 	bl	8008468 <__aeabi_dmul>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7fd fad6 	bl	80080fc <__adddf3>
 800ab50:	4603      	mov	r3, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	4625      	mov	r5, r4
 800ab56:	461c      	mov	r4, r3
 800ab58:	4b46      	ldr	r3, [pc, #280]	; (800ac74 <GoStraight+0x26c>)
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fd fc19 	bl	8008394 <__aeabi_i2d>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	4620      	mov	r0, r4
 800ab68:	4629      	mov	r1, r5
 800ab6a:	f7fd feef 	bl	800894c <__aeabi_dcmplt>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d010      	beq.n	800ab96 <GoStraight+0x18e>
 800ab74:	4b42      	ldr	r3, [pc, #264]	; (800ac80 <GoStraight+0x278>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10c      	bne.n	800ab96 <GoStraight+0x18e>
			{
				wall_set();//現在座標じゃなくて、進行方向から求めた次の座標。
 800ab7c:	f000 ff4e 	bl	800ba1c <wall_set>
				//計算して
				make_map(Pos.TargetX, Pos.TargetY, 0x01);
 800ab80:	4b3d      	ldr	r3, [pc, #244]	; (800ac78 <GoStraight+0x270>)
 800ab82:	7898      	ldrb	r0, [r3, #2]
 800ab84:	4b3c      	ldr	r3, [pc, #240]	; (800ac78 <GoStraight+0x270>)
 800ab86:	78db      	ldrb	r3, [r3, #3]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	f001 f8d6 	bl	800bd3c <make_map>
				//UpdateWalkMap();
				//次のアクションを渡すのは別のところで。
				Calc = 1;
 800ab90:	4b3b      	ldr	r3, [pc, #236]	; (800ac80 <GoStraight+0x278>)
 800ab92:	2201      	movs	r2, #1
 800ab94:	601a      	str	r2, [r3, #0]
			}
			if(wall_cut == false && ((50/*LEFT_WALL*0.7f*/ > Photo[SL]) || (50/*RIGHT_WALL*0.7f*/ > Photo[SR])) )
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
 800ab98:	f083 0301 	eor.w	r3, r3, #1
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d030      	beq.n	800ac04 <GoStraight+0x1fc>
 800aba2:	4b38      	ldr	r3, [pc, #224]	; (800ac84 <GoStraight+0x27c>)
 800aba4:	edd3 7a02 	vldr	s15, [r3, #8]
 800aba8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800ac88 <GoStraight+0x280>
 800abac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb4:	d40a      	bmi.n	800abcc <GoStraight+0x1c4>
 800abb6:	4b33      	ldr	r3, [pc, #204]	; (800ac84 <GoStraight+0x27c>)
 800abb8:	edd3 7a01 	vldr	s15, [r3, #4]
 800abbc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ac88 <GoStraight+0x280>
 800abc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc8:	d400      	bmi.n	800abcc <GoStraight+0x1c4>
 800abca:	e01b      	b.n	800ac04 <GoStraight+0x1fc>
			{//
				TotalPulse[BODY] = KeepPulse[BODY] + (target_pulse-Wall_Cut_Val);
 800abcc:	4b28      	ldr	r3, [pc, #160]	; (800ac70 <GoStraight+0x268>)
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	ee07 3a90 	vmov	s15, r3
 800abd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abe2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800ac8c <GoStraight+0x284>
 800abe6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800abea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abf2:	ee17 2a90 	vmov	r2, s15
 800abf6:	4b1f      	ldr	r3, [pc, #124]	; (800ac74 <GoStraight+0x26c>)
 800abf8:	609a      	str	r2, [r3, #8]
				//target_pulse = TotalPulse[BODY] -KeepPulse[BODY] + Wall_Cut_Val;
				wall_cut = true;
 800abfa:	2301      	movs	r3, #1
 800abfc:	75fb      	strb	r3, [r7, #23]
				ChangeLED(3);
 800abfe:	2003      	movs	r0, #3
 800ac00:	f005 f92a 	bl	800fe58 <ChangeLED>
		while( ( KeepPulse[BODY] +(target_pulse)) > ( TotalPulse[BODY]) )
 800ac04:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <GoStraight+0x268>)
 800ac06:	689a      	ldr	r2, [r3, #8]
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	441a      	add	r2, r3
 800ac0c:	4b19      	ldr	r3, [pc, #100]	; (800ac74 <GoStraight+0x26c>)
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	f73f af4f 	bgt.w	800aab4 <GoStraight+0xac>
	//		if( ( keep_pulse + (target_pulse/2) )  <= ( TotalPulse[BODY]) )	//移動量に応じて処理を変える。
	//		{
	//			Acceleration = 0;
	//		}
		}
		wall_cut = false;
 800ac16:	2300      	movs	r3, #0
 800ac18:	75fb      	strb	r3, [r7, #23]

	}
	ChangeLED(0);
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	f005 f91c 	bl	800fe58 <ChangeLED>
	//余分に加速した場合、あとの減速で速度を落としきれないことになっていたので、減速時にその時の速度を使うようにした。
	//printf("%f, %f, %f\r\n",CurrentVelocity[LEFT],CurrentVelocity[RIGHT], Acceleration);
//	int target_pulse = (int)(2*(move_distance/2)/MM_PER_PULSE);
//	int keep_pulse = TotalPulse[BODY];
	//WallWarn();
	Acceleration = 0;
 800ac20:	4b1b      	ldr	r3, [pc, #108]	; (800ac90 <GoStraight+0x288>)
 800ac22:	f04f 0200 	mov.w	r2, #0
 800ac26:	601a      	str	r2, [r3, #0]
	KeepPulse[BODY] += target_pulse;
 800ac28:	4b11      	ldr	r3, [pc, #68]	; (800ac70 <GoStraight+0x268>)
 800ac2a:	689a      	ldr	r2, [r3, #8]
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	4413      	add	r3, r2
 800ac30:	4a0f      	ldr	r2, [pc, #60]	; (800ac70 <GoStraight+0x268>)
 800ac32:	6093      	str	r3, [r2, #8]
	KeepPulse[LEFT] += target_pulse/2;
 800ac34:	4b0e      	ldr	r3, [pc, #56]	; (800ac70 <GoStraight+0x268>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	0fd9      	lsrs	r1, r3, #31
 800ac3c:	440b      	add	r3, r1
 800ac3e:	105b      	asrs	r3, r3, #1
 800ac40:	4413      	add	r3, r2
 800ac42:	4a0b      	ldr	r2, [pc, #44]	; (800ac70 <GoStraight+0x268>)
 800ac44:	6013      	str	r3, [r2, #0]
	KeepPulse[RIGHT] += target_pulse/2;
 800ac46:	4b0a      	ldr	r3, [pc, #40]	; (800ac70 <GoStraight+0x268>)
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	0fd9      	lsrs	r1, r3, #31
 800ac4e:	440b      	add	r3, r1
 800ac50:	105b      	asrs	r3, r3, #1
 800ac52:	4413      	add	r3, r2
 800ac54:	4a06      	ldr	r2, [pc, #24]	; (800ac70 <GoStraight+0x268>)
 800ac56:	6053      	str	r3, [r2, #4]

	//Uターンは別パターン

	//各変数の状況毎に割り込み的に動作を追加していくほうが賢いのでは。

}
 800ac58:	bf00      	nop
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ac60:	9999999a 	.word	0x9999999a
 800ac64:	3fd99999 	.word	0x3fd99999
 800ac68:	9999999a 	.word	0x9999999a
 800ac6c:	3fe99999 	.word	0x3fe99999
 800ac70:	20000554 	.word	0x20000554
 800ac74:	20000520 	.word	0x20000520
 800ac78:	20000000 	.word	0x20000000
 800ac7c:	2000078c 	.word	0x2000078c
 800ac80:	20000790 	.word	0x20000790
 800ac84:	20000560 	.word	0x20000560
 800ac88:	42480000 	.word	0x42480000
 800ac8c:	4792c122 	.word	0x4792c122
 800ac90:	2000022c 	.word	0x2000022c
 800ac94:	23ca2666 	.word	0x23ca2666
 800ac98:	3f509268 	.word	0x3f509268

0800ac9c <TurnRight>:
void TurnRight(char mode)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	4603      	mov	r3, r0
 800aca4:	71fb      	strb	r3, [r7, #7]
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800aca6:	79fb      	ldrb	r3, [r7, #7]
 800aca8:	2b53      	cmp	r3, #83	; 0x53
 800acaa:	d027      	beq.n	800acfc <TurnRight+0x60>
 800acac:	2b54      	cmp	r3, #84	; 0x54
 800acae:	d000      	beq.n	800acb2 <TurnRight+0x16>
	case 'S':
		//スラローム
		SlalomRight();
		break;
	default :
		break;
 800acb0:	e027      	b.n	800ad02 <TurnRight+0x66>
		Decel(45, 0);
 800acb2:	eddf 0a16 	vldr	s1, [pc, #88]	; 800ad0c <TurnRight+0x70>
 800acb6:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800ad10 <TurnRight+0x74>
 800acba:	f7ff fb25 	bl	800a308 <Decel>
		EmitterOFF();
 800acbe:	f005 f8bd 	bl	800fe3c <EmitterOFF>
		Rotate( 90 , 2*M_PI);//1.5
 800acc2:	eddf 0a14 	vldr	s1, [pc, #80]	; 800ad14 <TurnRight+0x78>
 800acc6:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800ad18 <TurnRight+0x7c>
 800acca:	f7fe fbfd 	bl	80094c8 <Rotate>
		float acc = AjustCenter();
 800acce:	f7ff fc7d 	bl	800a5cc <AjustCenter>
 800acd2:	ed87 0a03 	vstr	s0, [r7, #12]
		EmitterON();
 800acd6:	f005 f8a3 	bl	800fe20 <EmitterON>
		HAL_Delay(100);
 800acda:	2064      	movs	r0, #100	; 0x64
 800acdc:	f006 f998 	bl	8011010 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800ace0:	2101      	movs	r1, #1
 800ace2:	2000      	movs	r0, #0
 800ace4:	f005 fe50 	bl	8010988 <PIDChangeFlag>
		Accel(acc, ExploreVelocity);
 800ace8:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <TurnRight+0x80>)
 800acea:	edd3 7a00 	vldr	s15, [r3]
 800acee:	eef0 0a67 	vmov.f32	s1, s15
 800acf2:	ed97 0a03 	vldr	s0, [r7, #12]
 800acf6:	f7ff f9fb 	bl	800a0f0 <Accel>
		break;
 800acfa:	e002      	b.n	800ad02 <TurnRight+0x66>
		SlalomRight();
 800acfc:	f7fe fe30 	bl	8009960 <SlalomRight>
		break;
 800ad00:	bf00      	nop
	}


}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	00000000 	.word	0x00000000
 800ad10:	42340000 	.word	0x42340000
 800ad14:	40c90fdb 	.word	0x40c90fdb
 800ad18:	42b40000 	.word	0x42b40000
 800ad1c:	20000614 	.word	0x20000614

0800ad20 <TurnLeft>:
void TurnLeft(char mode)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	71fb      	strb	r3, [r7, #7]
	//補正して
	//回転して
	//加速する
	//関数呼び出しと判定処理が多いと遅いかなー。

	switch( mode )
 800ad2a:	79fb      	ldrb	r3, [r7, #7]
 800ad2c:	2b53      	cmp	r3, #83	; 0x53
 800ad2e:	d02a      	beq.n	800ad86 <TurnLeft+0x66>
 800ad30:	2b54      	cmp	r3, #84	; 0x54
 800ad32:	d000      	beq.n	800ad36 <TurnLeft+0x16>
	case 'S':
		//スラローム
		SlalomLeft();
		break;
	default :
		break;
 800ad34:	e02a      	b.n	800ad8c <TurnLeft+0x6c>
		Decel(45, 0);
 800ad36:	eddf 0a17 	vldr	s1, [pc, #92]	; 800ad94 <TurnLeft+0x74>
 800ad3a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800ad98 <TurnLeft+0x78>
 800ad3e:	f7ff fae3 	bl	800a308 <Decel>
		EmitterOFF();
 800ad42:	f005 f87b 	bl	800fe3c <EmitterOFF>
		Rotate( 90 , -2*M_PI);//-1.5
 800ad46:	eddf 0a15 	vldr	s1, [pc, #84]	; 800ad9c <TurnLeft+0x7c>
 800ad4a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800ada0 <TurnLeft+0x80>
 800ad4e:	f7fe fbbb 	bl	80094c8 <Rotate>
		EmitterON();
 800ad52:	f005 f865 	bl	800fe20 <EmitterON>
		HAL_Delay(100);
 800ad56:	2064      	movs	r0, #100	; 0x64
 800ad58:	f006 f95a 	bl	8011010 <HAL_Delay>
		float acc = AjustCenter();
 800ad5c:	f7ff fc36 	bl	800a5cc <AjustCenter>
 800ad60:	ed87 0a03 	vstr	s0, [r7, #12]
		HAL_Delay(100);
 800ad64:	2064      	movs	r0, #100	; 0x64
 800ad66:	f006 f953 	bl	8011010 <HAL_Delay>
		PIDChangeFlag( A_VELO_PID , 1);
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	f005 fe0b 	bl	8010988 <PIDChangeFlag>
		Accel(acc, ExploreVelocity);
 800ad72:	4b0c      	ldr	r3, [pc, #48]	; (800ada4 <TurnLeft+0x84>)
 800ad74:	edd3 7a00 	vldr	s15, [r3]
 800ad78:	eef0 0a67 	vmov.f32	s1, s15
 800ad7c:	ed97 0a03 	vldr	s0, [r7, #12]
 800ad80:	f7ff f9b6 	bl	800a0f0 <Accel>
		break;
 800ad84:	e002      	b.n	800ad8c <TurnLeft+0x6c>
		SlalomLeft();
 800ad86:	f7fe ffd7 	bl	8009d38 <SlalomLeft>
		break;
 800ad8a:	bf00      	nop
	}

}
 800ad8c:	bf00      	nop
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	00000000 	.word	0x00000000
 800ad98:	42340000 	.word	0x42340000
 800ad9c:	c0c90fdb 	.word	0xc0c90fdb
 800ada0:	42b40000 	.word	0x42b40000
 800ada4:	20000614 	.word	0x20000614

0800ada8 <GoBack>:
void GoBack()
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
	//減速して
	Decel(45, 0);
 800adae:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ae24 <GoBack+0x7c>
 800adb2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800ae28 <GoBack+0x80>
 800adb6:	f7ff faa7 	bl	800a308 <Decel>
	float acc = AjustCenter();
 800adba:	f7ff fc07 	bl	800a5cc <AjustCenter>
 800adbe:	ed87 0a01 	vstr	s0, [r7, #4]

	Rotate(180, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
	EmitterON();

#else
	Pos.Dir = right;
 800adc2:	4b1a      	ldr	r3, [pc, #104]	; (800ae2c <GoBack+0x84>)
 800adc4:	2201      	movs	r2, #1
 800adc6:	711a      	strb	r2, [r3, #4]
	Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800adc8:	eddf 0a19 	vldr	s1, [pc, #100]	; 800ae30 <GoBack+0x88>
 800adcc:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ae34 <GoBack+0x8c>
 800add0:	f7fe fb7a 	bl	80094c8 <Rotate>
	acc = AjustCenter();
 800add4:	f7ff fbfa 	bl	800a5cc <AjustCenter>
 800add8:	ed87 0a01 	vstr	s0, [r7, #4]
	Pos.Dir = right;
 800addc:	4b13      	ldr	r3, [pc, #76]	; (800ae2c <GoBack+0x84>)
 800adde:	2201      	movs	r2, #1
 800ade0:	711a      	strb	r2, [r3, #4]
	Rotate(90, 2*M_PI);
 800ade2:	eddf 0a13 	vldr	s1, [pc, #76]	; 800ae30 <GoBack+0x88>
 800ade6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800ae34 <GoBack+0x8c>
 800adea:	f7fe fb6d 	bl	80094c8 <Rotate>
	Pos.Dir = back;
 800adee:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <GoBack+0x84>)
 800adf0:	2202      	movs	r2, #2
 800adf2:	711a      	strb	r2, [r3, #4]

#endif

	acc = AjustCenter();
 800adf4:	f7ff fbea 	bl	800a5cc <AjustCenter>
 800adf8:	ed87 0a01 	vstr	s0, [r7, #4]
	Angle = TargetAngle;
 800adfc:	4b0e      	ldr	r3, [pc, #56]	; (800ae38 <GoBack+0x90>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a0e      	ldr	r2, [pc, #56]	; (800ae3c <GoBack+0x94>)
 800ae02:	6013      	str	r3, [r2, #0]

	HAL_Delay(200);
 800ae04:	20c8      	movs	r0, #200	; 0xc8
 800ae06:	f006 f903 	bl	8011010 <HAL_Delay>

	Accel(acc, ExploreVelocity);
 800ae0a:	4b0d      	ldr	r3, [pc, #52]	; (800ae40 <GoBack+0x98>)
 800ae0c:	edd3 7a00 	vldr	s15, [r3]
 800ae10:	eef0 0a67 	vmov.f32	s1, s15
 800ae14:	ed97 0a01 	vldr	s0, [r7, #4]
 800ae18:	f7ff f96a 	bl	800a0f0 <Accel>
	//ここまでで目標走行距離を完了する

}
 800ae1c:	bf00      	nop
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	00000000 	.word	0x00000000
 800ae28:	42340000 	.word	0x42340000
 800ae2c:	20000000 	.word	0x20000000
 800ae30:	40c90fdb 	.word	0x40c90fdb
 800ae34:	42b40000 	.word	0x42b40000
 800ae38:	20000518 	.word	0x20000518
 800ae3c:	20000228 	.word	0x20000228
 800ae40:	20000614 	.word	0x20000614

0800ae44 <changeDirection>:

void changeDirection()
{
 800ae44:	b480      	push	{r7}
 800ae46:	af00      	add	r7, sp, #0
	//停止状態から、次の座標がわかっているときに使う
	//次に向かうべき座標と今の座標から、向くべき方向に回転する（停止状態からの挙動）
		//差はxyが±どちらかに1違うだけ

	if(Pos.X + 1 == Pos.NextX)
 800ae48:	4b17      	ldr	r3, [pc, #92]	; (800aea8 <changeDirection+0x64>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	4a16      	ldr	r2, [pc, #88]	; (800aea8 <changeDirection+0x64>)
 800ae50:	7a12      	ldrb	r2, [r2, #8]
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d103      	bne.n	800ae5e <changeDirection+0x1a>
	{
		Pos.NextCar = east;
 800ae56:	4b14      	ldr	r3, [pc, #80]	; (800aea8 <changeDirection+0x64>)
 800ae58:	2201      	movs	r2, #1
 800ae5a:	72da      	strb	r2, [r3, #11]
	else if(Pos.Y - 1 == Pos.NextY)
	{
		Pos.NextCar = south;
	}

}
 800ae5c:	e01f      	b.n	800ae9e <changeDirection+0x5a>
	else if(Pos.X - 1 == Pos.NextX)
 800ae5e:	4b12      	ldr	r3, [pc, #72]	; (800aea8 <changeDirection+0x64>)
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	3b01      	subs	r3, #1
 800ae64:	4a10      	ldr	r2, [pc, #64]	; (800aea8 <changeDirection+0x64>)
 800ae66:	7a12      	ldrb	r2, [r2, #8]
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d103      	bne.n	800ae74 <changeDirection+0x30>
		Pos.NextCar = west;
 800ae6c:	4b0e      	ldr	r3, [pc, #56]	; (800aea8 <changeDirection+0x64>)
 800ae6e:	2203      	movs	r2, #3
 800ae70:	72da      	strb	r2, [r3, #11]
}
 800ae72:	e014      	b.n	800ae9e <changeDirection+0x5a>
	else if(Pos.Y + 1 == Pos.NextY)
 800ae74:	4b0c      	ldr	r3, [pc, #48]	; (800aea8 <changeDirection+0x64>)
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	4a0b      	ldr	r2, [pc, #44]	; (800aea8 <changeDirection+0x64>)
 800ae7c:	7a52      	ldrb	r2, [r2, #9]
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d103      	bne.n	800ae8a <changeDirection+0x46>
		Pos.NextCar = north;
 800ae82:	4b09      	ldr	r3, [pc, #36]	; (800aea8 <changeDirection+0x64>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	72da      	strb	r2, [r3, #11]
}
 800ae88:	e009      	b.n	800ae9e <changeDirection+0x5a>
	else if(Pos.Y - 1 == Pos.NextY)
 800ae8a:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <changeDirection+0x64>)
 800ae8c:	785b      	ldrb	r3, [r3, #1]
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	4a05      	ldr	r2, [pc, #20]	; (800aea8 <changeDirection+0x64>)
 800ae92:	7a52      	ldrb	r2, [r2, #9]
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d102      	bne.n	800ae9e <changeDirection+0x5a>
		Pos.NextCar = south;
 800ae98:	4b03      	ldr	r3, [pc, #12]	; (800aea8 <changeDirection+0x64>)
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	72da      	strb	r2, [r3, #11]
}
 800ae9e:	bf00      	nop
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	20000000 	.word	0x20000000

0800aeac <Aim>:
void Aim()
{	//次の座標の方向を向く
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0

	//次の座標と現在の座標から向くべき方角を取得
	changeDirection();
 800aeb2:	f7ff ffc7 	bl	800ae44 <changeDirection>

	//次に向くべき方角と今の方角のギャップを埋める旋回をする
	int now = Pos.Car % 4;
 800aeb6:	4b27      	ldr	r3, [pc, #156]	; (800af54 <Aim+0xa8>)
 800aeb8:	795b      	ldrb	r3, [r3, #5]
 800aeba:	f003 0303 	and.w	r3, r3, #3
 800aebe:	607b      	str	r3, [r7, #4]
	int next = Pos.NextCar % 4;
 800aec0:	4b24      	ldr	r3, [pc, #144]	; (800af54 <Aim+0xa8>)
 800aec2:	7adb      	ldrb	r3, [r3, #11]
 800aec4:	f003 0303 	and.w	r3, r3, #3
 800aec8:	603b      	str	r3, [r7, #0]

	//差が正なら右回転
	switch(next-now)
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	3302      	adds	r3, #2
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	d834      	bhi.n	800af40 <Aim+0x94>
 800aed6:	a201      	add	r2, pc, #4	; (adr r2, 800aedc <Aim+0x30>)
 800aed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aedc:	0800af2d 	.word	0x0800af2d
 800aee0:	0800af05 	.word	0x0800af05
 800aee4:	0800af41 	.word	0x0800af41
 800aee8:	0800aef1 	.word	0x0800aef1
 800aeec:	0800af19 	.word	0x0800af19
	{
	case 0:
		break;
	case 1:
		Pos.Dir = right;
 800aef0:	4b18      	ldr	r3, [pc, #96]	; (800af54 <Aim+0xa8>)
 800aef2:	2201      	movs	r2, #1
 800aef4:	711a      	strb	r2, [r3, #4]
		Rotate( 90 , 2*M_PI);
 800aef6:	eddf 0a18 	vldr	s1, [pc, #96]	; 800af58 <Aim+0xac>
 800aefa:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800af5c <Aim+0xb0>
 800aefe:	f7fe fae3 	bl	80094c8 <Rotate>
		break;
 800af02:	e01e      	b.n	800af42 <Aim+0x96>
	case -1:
		Pos.Dir = left;
 800af04:	4b13      	ldr	r3, [pc, #76]	; (800af54 <Aim+0xa8>)
 800af06:	2203      	movs	r2, #3
 800af08:	711a      	strb	r2, [r3, #4]
		Rotate( 90 , -2*M_PI);
 800af0a:	eddf 0a15 	vldr	s1, [pc, #84]	; 800af60 <Aim+0xb4>
 800af0e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800af5c <Aim+0xb0>
 800af12:	f7fe fad9 	bl	80094c8 <Rotate>
		break;
 800af16:	e014      	b.n	800af42 <Aim+0x96>
	case 2:
		Pos.Dir = back;
 800af18:	4b0e      	ldr	r3, [pc, #56]	; (800af54 <Aim+0xa8>)
 800af1a:	2202      	movs	r2, #2
 800af1c:	711a      	strb	r2, [r3, #4]
		Rotate( 180 , 2*M_PI);
 800af1e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800af58 <Aim+0xac>
 800af22:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800af64 <Aim+0xb8>
 800af26:	f7fe facf 	bl	80094c8 <Rotate>
		break;
 800af2a:	e00a      	b.n	800af42 <Aim+0x96>
	case -2:
		Pos.Dir = back;
 800af2c:	4b09      	ldr	r3, [pc, #36]	; (800af54 <Aim+0xa8>)
 800af2e:	2202      	movs	r2, #2
 800af30:	711a      	strb	r2, [r3, #4]
		Rotate( 180 , -2*M_PI);
 800af32:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800af60 <Aim+0xb4>
 800af36:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800af64 <Aim+0xb8>
 800af3a:	f7fe fac5 	bl	80094c8 <Rotate>
		break;
 800af3e:	e000      	b.n	800af42 <Aim+0x96>
	default:
		break;
 800af40:	bf00      	nop
	}
	Pos.Car = Pos.NextCar;
 800af42:	4b04      	ldr	r3, [pc, #16]	; (800af54 <Aim+0xa8>)
 800af44:	7ada      	ldrb	r2, [r3, #11]
 800af46:	4b03      	ldr	r3, [pc, #12]	; (800af54 <Aim+0xa8>)
 800af48:	715a      	strb	r2, [r3, #5]
}
 800af4a:	bf00      	nop
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	20000000 	.word	0x20000000
 800af58:	40c90fdb 	.word	0x40c90fdb
 800af5c:	42b40000 	.word	0x42b40000
 800af60:	c0c90fdb 	.word	0xc0c90fdb
 800af64:	43340000 	.word	0x43340000

0800af68 <SelectAction>:
//{
//
//}
//進行方向決定の処理をどうするかで書き方が変わる。フラグを使うとか。
 void SelectAction(char turn_mode)	//前後左右であらわす
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	71fb      	strb	r3, [r7, #7]
	//現在の座標から次の座標に行くまでの処理を一つのアクションとする
	switch(Pos.Dir%4) //条件を増やす場合は割る数字に注意
 800af72:	4b1b      	ldr	r3, [pc, #108]	; (800afe0 <SelectAction+0x78>)
 800af74:	791b      	ldrb	r3, [r3, #4]
 800af76:	f003 0303 	and.w	r3, r3, #3
 800af7a:	2b03      	cmp	r3, #3
 800af7c:	d82a      	bhi.n	800afd4 <SelectAction+0x6c>
 800af7e:	a201      	add	r2, pc, #4	; (adr r2, 800af84 <SelectAction+0x1c>)
 800af80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af84:	0800af95 	.word	0x0800af95
 800af88:	0800afbb 	.word	0x0800afbb
 800af8c:	0800afcf 	.word	0x0800afcf
 800af90:	0800afc5 	.word	0x0800afc5
	{
	//直進
	case front:
		//直進flagオン
		//PIDChangeFlag( A_VELO_PID, 1);
		AddVelocity = 0;
 800af94:	4b13      	ldr	r3, [pc, #76]	; (800afe4 <SelectAction+0x7c>)
 800af96:	f04f 0200 	mov.w	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800af9c:	4b12      	ldr	r3, [pc, #72]	; (800afe8 <SelectAction+0x80>)
 800af9e:	edd3 7a00 	vldr	s15, [r3]
 800afa2:	4b10      	ldr	r3, [pc, #64]	; (800afe4 <SelectAction+0x7c>)
 800afa4:	ed93 7a00 	vldr	s14, [r3]
 800afa8:	eeb0 1a47 	vmov.f32	s2, s14
 800afac:	eef0 0a67 	vmov.f32	s1, s15
 800afb0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800afec <SelectAction+0x84>
 800afb4:	f7ff fd28 	bl	800aa08 <GoStraight>

		break;
 800afb8:	e00d      	b.n	800afd6 <SelectAction+0x6e>
	//右方向
	case right:	//左右の違いは目標値がそれぞれ入れ替わるだけだから、上手く書けば一つの関数でできる
		//スラロームターンと減速プラスターンetc
		TurnRight(turn_mode);
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff fe6d 	bl	800ac9c <TurnRight>
		break;
 800afc2:	e008      	b.n	800afd6 <SelectAction+0x6e>
	//左方向
	case left:
		TurnLeft(turn_mode);
 800afc4:	79fb      	ldrb	r3, [r7, #7]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7ff feaa 	bl	800ad20 <TurnLeft>
		break;
 800afcc:	e003      	b.n	800afd6 <SelectAction+0x6e>
	case back:
		GoBack();	//Uターン
 800afce:	f7ff feeb 	bl	800ada8 <GoBack>
		break;
 800afd2:	e000      	b.n	800afd6 <SelectAction+0x6e>


	default :
		break;
 800afd4:	bf00      	nop

	}
}
 800afd6:	bf00      	nop
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20000000 	.word	0x20000000
 800afe4:	200004f8 	.word	0x200004f8
 800afe8:	20000614 	.word	0x20000614
 800afec:	42b40000 	.word	0x42b40000

0800aff0 <Explore_IT>:
	//4つめが終わる前に0.5msが過ぎる説。
}


void Explore_IT()
{
 800aff0:	b5b0      	push	{r4, r5, r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0

//*-----------------*/

	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800aff6:	4bb6      	ldr	r3, [pc, #728]	; (800b2d0 <Explore_IT+0x2e0>)
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800affe:	332f      	adds	r3, #47	; 0x2f
 800b000:	461a      	mov	r2, r3
 800b002:	4bb4      	ldr	r3, [pc, #720]	; (800b2d4 <Explore_IT+0x2e4>)
 800b004:	601a      	str	r2, [r3, #0]
	TIM3->CNT = INITIAL_PULSE;
 800b006:	4bb2      	ldr	r3, [pc, #712]	; (800b2d0 <Explore_IT+0x2e0>)
 800b008:	f247 522f 	movw	r2, #29999	; 0x752f
 800b00c:	625a      	str	r2, [r3, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800b00e:	4bb2      	ldr	r3, [pc, #712]	; (800b2d8 <Explore_IT+0x2e8>)
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800b016:	332f      	adds	r3, #47	; 0x2f
 800b018:	461a      	mov	r2, r3
 800b01a:	4bae      	ldr	r3, [pc, #696]	; (800b2d4 <Explore_IT+0x2e4>)
 800b01c:	605a      	str	r2, [r3, #4]
	TIM4->CNT = INITIAL_PULSE;
 800b01e:	4bae      	ldr	r3, [pc, #696]	; (800b2d8 <Explore_IT+0x2e8>)
 800b020:	f247 522f 	movw	r2, #29999	; 0x752f
 800b024:	625a      	str	r2, [r3, #36]	; 0x24

	//速度 mm/s
	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800b026:	4bab      	ldr	r3, [pc, #684]	; (800b2d4 <Explore_IT+0x2e4>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b032:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800b2dc <Explore_IT+0x2ec>
 800b036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b03a:	4ba9      	ldr	r3, [pc, #676]	; (800b2e0 <Explore_IT+0x2f0>)
 800b03c:	edc3 7a00 	vstr	s15, [r3]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800b040:	4ba4      	ldr	r3, [pc, #656]	; (800b2d4 <Explore_IT+0x2e4>)
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	ee07 3a90 	vmov	s15, r3
 800b048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b04c:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800b2dc <Explore_IT+0x2ec>
 800b050:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b054:	4ba2      	ldr	r3, [pc, #648]	; (800b2e0 <Explore_IT+0x2f0>)
 800b056:	edc3 7a01 	vstr	s15, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800b05a:	4ba1      	ldr	r3, [pc, #644]	; (800b2e0 <Explore_IT+0x2f0>)
 800b05c:	ed93 7a00 	vldr	s14, [r3]
 800b060:	4b9f      	ldr	r3, [pc, #636]	; (800b2e0 <Explore_IT+0x2f0>)
 800b062:	edd3 7a01 	vldr	s15, [r3, #4]
 800b066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b06a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b06e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b072:	4b9b      	ldr	r3, [pc, #620]	; (800b2e0 <Explore_IT+0x2f0>)
 800b074:	edc3 7a02 	vstr	s15, [r3, #8]
//	}


	//移動量 mm/msを積算

	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800b078:	4b9a      	ldr	r3, [pc, #616]	; (800b2e4 <Explore_IT+0x2f4>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	4b95      	ldr	r3, [pc, #596]	; (800b2d4 <Explore_IT+0x2e4>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4413      	add	r3, r2
 800b082:	4a98      	ldr	r2, [pc, #608]	; (800b2e4 <Explore_IT+0x2f4>)
 800b084:	6013      	str	r3, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800b086:	4b97      	ldr	r3, [pc, #604]	; (800b2e4 <Explore_IT+0x2f4>)
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	4b92      	ldr	r3, [pc, #584]	; (800b2d4 <Explore_IT+0x2e4>)
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	4413      	add	r3, r2
 800b090:	4a94      	ldr	r2, [pc, #592]	; (800b2e4 <Explore_IT+0x2f4>)
 800b092:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800b094:	4b93      	ldr	r3, [pc, #588]	; (800b2e4 <Explore_IT+0x2f4>)
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	4b92      	ldr	r3, [pc, #584]	; (800b2e4 <Explore_IT+0x2f4>)
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	4413      	add	r3, r2
 800b09e:	4a91      	ldr	r2, [pc, #580]	; (800b2e4 <Explore_IT+0x2f4>)
 800b0a0:	6093      	str	r3, [r2, #8]
#if 1
	//static float angle=0;
	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
 800b0a2:	2138      	movs	r1, #56	; 0x38
 800b0a4:	2037      	movs	r0, #55	; 0x37
 800b0a6:	f004 fd71 	bl	800fb8c <ReadIMU>
 800b0aa:	eef0 7a40 	vmov.f32	s15, s0
 800b0ae:	4b8e      	ldr	r3, [pc, #568]	; (800b2e8 <Explore_IT+0x2f8>)
 800b0b0:	edc3 7a00 	vstr	s15, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800b0b4:	4b8c      	ldr	r3, [pc, #560]	; (800b2e8 <Explore_IT+0x2f8>)
 800b0b6:	ed93 7a00 	vldr	s14, [r3]
 800b0ba:	4b8c      	ldr	r3, [pc, #560]	; (800b2ec <Explore_IT+0x2fc>)
 800b0bc:	edd3 7a00 	vldr	s15, [r3]
 800b0c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0c4:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800b2f0 <Explore_IT+0x300>
 800b0c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0cc:	edc7 7a05 	vstr	s15, [r7, #20]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800b0d0:	6978      	ldr	r0, [r7, #20]
 800b0d2:	f7fd f971 	bl	80083b8 <__aeabi_f2d>
 800b0d6:	a378      	add	r3, pc, #480	; (adr r3, 800b2b8 <Explore_IT+0x2c8>)
 800b0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0dc:	f7fd f9c4 	bl	8008468 <__aeabi_dmul>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	4625      	mov	r5, r4
 800b0e6:	461c      	mov	r4, r3
 800b0e8:	4b82      	ldr	r3, [pc, #520]	; (800b2f4 <Explore_IT+0x304>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fd f963 	bl	80083b8 <__aeabi_f2d>
 800b0f2:	a373      	add	r3, pc, #460	; (adr r3, 800b2c0 <Explore_IT+0x2d0>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	f7fd f9b6 	bl	8008468 <__aeabi_dmul>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4620      	mov	r0, r4
 800b102:	4629      	mov	r1, r5
 800b104:	f7fc fffa 	bl	80080fc <__adddf3>
 800b108:	4603      	mov	r3, r0
 800b10a:	460c      	mov	r4, r1
 800b10c:	4618      	mov	r0, r3
 800b10e:	4621      	mov	r1, r4
 800b110:	f7fd fca2 	bl	8008a58 <__aeabi_d2f>
 800b114:	4603      	mov	r3, r0
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef1 7a67 	vneg.f32	s15, s15
 800b11e:	4b76      	ldr	r3, [pc, #472]	; (800b2f8 <Explore_IT+0x308>)
 800b120:	edc3 7a00 	vstr	s15, [r3]
    zg_last = zg_law;
 800b124:	4a73      	ldr	r2, [pc, #460]	; (800b2f4 <Explore_IT+0x304>)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	6013      	str	r3, [r2, #0]
	Angle += AngularV * T1;
 800b12a:	4b73      	ldr	r3, [pc, #460]	; (800b2f8 <Explore_IT+0x308>)
 800b12c:	edd3 7a00 	vldr	s15, [r3]
 800b130:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800b2fc <Explore_IT+0x30c>
 800b134:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b138:	4b71      	ldr	r3, [pc, #452]	; (800b300 <Explore_IT+0x310>)
 800b13a:	edd3 7a00 	vldr	s15, [r3]
 800b13e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b142:	4b6f      	ldr	r3, [pc, #444]	; (800b300 <Explore_IT+0x310>)
 800b144:	edc3 7a00 	vstr	s15, [r3]
	AngularV = ( CurrentVelocity[LEFT] - CurrentVelocity[RIGHT] ) *convert_to_angularv;
	Angle += AngularV * T1;

#endif

	int wall_d =0,wall_l =0,wall_r =0,wall_f=0;
 800b148:	2300      	movs	r3, #0
 800b14a:	613b      	str	r3, [r7, #16]
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	2300      	movs	r3, #0
 800b152:	60bb      	str	r3, [r7, #8]
 800b154:	2300      	movs	r3, #0
 800b156:	607b      	str	r3, [r7, #4]
		int ang_out=0;
 800b158:	2300      	movs	r3, #0
 800b15a:	603b      	str	r3, [r7, #0]

		if( Pos.Dir == front || Pos.Act == compensate || Pos.Act == rotate)
 800b15c:	4b69      	ldr	r3, [pc, #420]	; (800b304 <Explore_IT+0x314>)
 800b15e:	791b      	ldrb	r3, [r3, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d008      	beq.n	800b176 <Explore_IT+0x186>
 800b164:	4b67      	ldr	r3, [pc, #412]	; (800b304 <Explore_IT+0x314>)
 800b166:	799b      	ldrb	r3, [r3, #6]
 800b168:	2b06      	cmp	r3, #6
 800b16a:	d004      	beq.n	800b176 <Explore_IT+0x186>
 800b16c:	4b65      	ldr	r3, [pc, #404]	; (800b304 <Explore_IT+0x314>)
 800b16e:	799b      	ldrb	r3, [r3, #6]
 800b170:	2b03      	cmp	r3, #3
 800b172:	f040 8117 	bne.w	800b3a4 <Explore_IT+0x3b4>
		{
			if( Pid[A_VELO_PID].flag == 1 )
 800b176:	4b64      	ldr	r3, [pc, #400]	; (800b308 <Explore_IT+0x318>)
 800b178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d116      	bne.n	800b1ac <Explore_IT+0x1bc>
			{
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800b17e:	4b63      	ldr	r3, [pc, #396]	; (800b30c <Explore_IT+0x31c>)
 800b180:	edd3 7a00 	vldr	s15, [r3]
 800b184:	4b5e      	ldr	r3, [pc, #376]	; (800b300 <Explore_IT+0x310>)
 800b186:	ed93 7a00 	vldr	s14, [r3]
 800b18a:	eef0 0a47 	vmov.f32	s1, s14
 800b18e:	eeb0 0a67 	vmov.f32	s0, s15
 800b192:	2000      	movs	r0, #0
 800b194:	f005 fc4c 	bl	8010a30 <PIDControl>
 800b198:	6038      	str	r0, [r7, #0]
				TargetAngularV = (float)ang_out;	//ひとまずこの辺の値の微調整は置いておく。制御方法として有効なのがわかった。
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	ee07 3a90 	vmov	s15, r3
 800b1a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1a4:	4b5a      	ldr	r3, [pc, #360]	; (800b310 <Explore_IT+0x320>)
 800b1a6:	edc3 7a00 	vstr	s15, [r3]
 800b1aa:	e0fb      	b.n	800b3a4 <Explore_IT+0x3b4>
			}
			else if( Pid[D_WALL_PID].flag == 1 )
 800b1ac:	4b56      	ldr	r3, [pc, #344]	; (800b308 <Explore_IT+0x318>)
 800b1ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d12a      	bne.n	800b20a <Explore_IT+0x21a>
			{
				wall_d = PIDControl( D_WALL_PID, Photo[SL], Photo[SR]+PhotoDiff);	//左に寄ってたら+→角速度は+
 800b1b4:	4b57      	ldr	r3, [pc, #348]	; (800b314 <Explore_IT+0x324>)
 800b1b6:	edd3 6a02 	vldr	s13, [r3, #8]
 800b1ba:	4b56      	ldr	r3, [pc, #344]	; (800b314 <Explore_IT+0x324>)
 800b1bc:	ed93 7a01 	vldr	s14, [r3, #4]
 800b1c0:	4b55      	ldr	r3, [pc, #340]	; (800b318 <Explore_IT+0x328>)
 800b1c2:	edd3 7a00 	vldr	s15, [r3]
 800b1c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1ca:	eef0 0a67 	vmov.f32	s1, s15
 800b1ce:	eeb0 0a66 	vmov.f32	s0, s13
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	f005 fc2c 	bl	8010a30 <PIDControl>
 800b1d8:	6138      	str	r0, [r7, #16]
				TargetAngularV = (float)wall_d*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	ee07 3a90 	vmov	s15, r3
 800b1e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1e4:	ee17 0a90 	vmov	r0, s15
 800b1e8:	f7fd f8e6 	bl	80083b8 <__aeabi_f2d>
 800b1ec:	a336      	add	r3, pc, #216	; (adr r3, 800b2c8 <Explore_IT+0x2d8>)
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	f7fd f939 	bl	8008468 <__aeabi_dmul>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	f7fd fc2b 	bl	8008a58 <__aeabi_d2f>
 800b202:	4602      	mov	r2, r0
 800b204:	4b42      	ldr	r3, [pc, #264]	; (800b310 <Explore_IT+0x320>)
 800b206:	601a      	str	r2, [r3, #0]
 800b208:	e0cc      	b.n	800b3a4 <Explore_IT+0x3b4>
			}
			else if( Pid[L_WALL_PID].flag == 1 )
 800b20a:	4b3f      	ldr	r3, [pc, #252]	; (800b308 <Explore_IT+0x318>)
 800b20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b210:	2b01      	cmp	r3, #1
 800b212:	d125      	bne.n	800b260 <Explore_IT+0x270>
			{
				wall_l = PIDControl( L_WALL_PID,  Photo[SL], TargetPhoto[SL]);
 800b214:	4b3f      	ldr	r3, [pc, #252]	; (800b314 <Explore_IT+0x324>)
 800b216:	edd3 7a02 	vldr	s15, [r3, #8]
 800b21a:	4b40      	ldr	r3, [pc, #256]	; (800b31c <Explore_IT+0x32c>)
 800b21c:	ed93 7a02 	vldr	s14, [r3, #8]
 800b220:	eef0 0a47 	vmov.f32	s1, s14
 800b224:	eeb0 0a67 	vmov.f32	s0, s15
 800b228:	2002      	movs	r0, #2
 800b22a:	f005 fc01 	bl	8010a30 <PIDControl>
 800b22e:	60f8      	str	r0, [r7, #12]
				TargetAngularV = (float)wall_l*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	ee07 3a90 	vmov	s15, r3
 800b236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b23a:	ee17 0a90 	vmov	r0, s15
 800b23e:	f7fd f8bb 	bl	80083b8 <__aeabi_f2d>
 800b242:	a321      	add	r3, pc, #132	; (adr r3, 800b2c8 <Explore_IT+0x2d8>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f7fd f90e 	bl	8008468 <__aeabi_dmul>
 800b24c:	4603      	mov	r3, r0
 800b24e:	460c      	mov	r4, r1
 800b250:	4618      	mov	r0, r3
 800b252:	4621      	mov	r1, r4
 800b254:	f7fd fc00 	bl	8008a58 <__aeabi_d2f>
 800b258:	4602      	mov	r2, r0
 800b25a:	4b2d      	ldr	r3, [pc, #180]	; (800b310 <Explore_IT+0x320>)
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	e0a1      	b.n	800b3a4 <Explore_IT+0x3b4>

			}
			else if( Pid[R_WALL_PID].flag == 1 )
 800b260:	4b29      	ldr	r3, [pc, #164]	; (800b308 <Explore_IT+0x318>)
 800b262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b266:	2b01      	cmp	r3, #1
 800b268:	d15a      	bne.n	800b320 <Explore_IT+0x330>
			{
				wall_r = PIDControl( R_WALL_PID,  TargetPhoto[SR], Photo[SR]);			//右に寄ってたら-
 800b26a:	4b2c      	ldr	r3, [pc, #176]	; (800b31c <Explore_IT+0x32c>)
 800b26c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b270:	4b28      	ldr	r3, [pc, #160]	; (800b314 <Explore_IT+0x324>)
 800b272:	ed93 7a01 	vldr	s14, [r3, #4]
 800b276:	eef0 0a47 	vmov.f32	s1, s14
 800b27a:	eeb0 0a67 	vmov.f32	s0, s15
 800b27e:	2003      	movs	r0, #3
 800b280:	f005 fbd6 	bl	8010a30 <PIDControl>
 800b284:	60b8      	str	r0, [r7, #8]
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	ee07 3a90 	vmov	s15, r3
 800b28c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b290:	ee17 0a90 	vmov	r0, s15
 800b294:	f7fd f890 	bl	80083b8 <__aeabi_f2d>
 800b298:	a30b      	add	r3, pc, #44	; (adr r3, 800b2c8 <Explore_IT+0x2d8>)
 800b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29e:	f7fd f8e3 	bl	8008468 <__aeabi_dmul>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	460c      	mov	r4, r1
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	f7fd fbd5 	bl	8008a58 <__aeabi_d2f>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	4b17      	ldr	r3, [pc, #92]	; (800b310 <Explore_IT+0x320>)
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	e076      	b.n	800b3a4 <Explore_IT+0x3b4>
 800b2b6:	bf00      	nop
 800b2b8:	47ae147b 	.word	0x47ae147b
 800b2bc:	3f847ae1 	.word	0x3f847ae1
 800b2c0:	7ae147ae 	.word	0x7ae147ae
 800b2c4:	3fefae14 	.word	0x3fefae14
 800b2c8:	d2f1a9fc 	.word	0xd2f1a9fc
 800b2cc:	3f50624d 	.word	0x3f50624d
 800b2d0:	40000400 	.word	0x40000400
 800b2d4:	200006dc 	.word	0x200006dc
 800b2d8:	40000800 	.word	0x40000800
 800b2dc:	3f8177cd 	.word	0x3f8177cd
 800b2e0:	2000052c 	.word	0x2000052c
 800b2e4:	20000520 	.word	0x20000520
 800b2e8:	200002d4 	.word	0x200002d4
 800b2ec:	200002d0 	.word	0x200002d0
 800b2f0:	3a8b7d78 	.word	0x3a8b7d78
 800b2f4:	2000021c 	.word	0x2000021c
 800b2f8:	20000224 	.word	0x20000224
 800b2fc:	3a83126f 	.word	0x3a83126f
 800b300:	20000228 	.word	0x20000228
 800b304:	20000000 	.word	0x20000000
 800b308:	20000318 	.word	0x20000318
 800b30c:	20000518 	.word	0x20000518
 800b310:	200004fc 	.word	0x200004fc
 800b314:	20000560 	.word	0x20000560
 800b318:	20000510 	.word	0x20000510
 800b31c:	20000620 	.word	0x20000620
			}
			else if( Pid[F_WALL_PID].flag == 1)
 800b320:	4b55      	ldr	r3, [pc, #340]	; (800b478 <Explore_IT+0x488>)
 800b322:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800b326:	2b01      	cmp	r3, #1
 800b328:	d13c      	bne.n	800b3a4 <Explore_IT+0x3b4>
			{
				wall_f = PIDControl( F_WALL_PID,   4000, (	(Photo[FR]+Photo[FL])));
 800b32a:	4b54      	ldr	r3, [pc, #336]	; (800b47c <Explore_IT+0x48c>)
 800b32c:	ed93 7a03 	vldr	s14, [r3, #12]
 800b330:	4b52      	ldr	r3, [pc, #328]	; (800b47c <Explore_IT+0x48c>)
 800b332:	edd3 7a00 	vldr	s15, [r3]
 800b336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b33a:	eef0 0a67 	vmov.f32	s1, s15
 800b33e:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800b480 <Explore_IT+0x490>
 800b342:	2008      	movs	r0, #8
 800b344:	f005 fb74 	bl	8010a30 <PIDControl>
 800b348:	6078      	str	r0, [r7, #4]
				TargetVelocity[BODY] = (float)wall_f*0.001;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	ee07 3a90 	vmov	s15, r3
 800b350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b354:	ee17 0a90 	vmov	r0, s15
 800b358:	f7fd f82e 	bl	80083b8 <__aeabi_f2d>
 800b35c:	a344      	add	r3, pc, #272	; (adr r3, 800b470 <Explore_IT+0x480>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7fd f881 	bl	8008468 <__aeabi_dmul>
 800b366:	4603      	mov	r3, r0
 800b368:	460c      	mov	r4, r1
 800b36a:	4618      	mov	r0, r3
 800b36c:	4621      	mov	r1, r4
 800b36e:	f7fd fb73 	bl	8008a58 <__aeabi_d2f>
 800b372:	4602      	mov	r2, r0
 800b374:	4b43      	ldr	r3, [pc, #268]	; (800b484 <Explore_IT+0x494>)
 800b376:	609a      	str	r2, [r3, #8]
				ang_out = PIDControl( A_VELO_PID,  TargetAngle, Angle);
 800b378:	4b43      	ldr	r3, [pc, #268]	; (800b488 <Explore_IT+0x498>)
 800b37a:	edd3 7a00 	vldr	s15, [r3]
 800b37e:	4b43      	ldr	r3, [pc, #268]	; (800b48c <Explore_IT+0x49c>)
 800b380:	ed93 7a00 	vldr	s14, [r3]
 800b384:	eef0 0a47 	vmov.f32	s1, s14
 800b388:	eeb0 0a67 	vmov.f32	s0, s15
 800b38c:	2000      	movs	r0, #0
 800b38e:	f005 fb4f 	bl	8010a30 <PIDControl>
 800b392:	6038      	str	r0, [r7, #0]
				TargetAngularV = (float)ang_out;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b39e:	4b3c      	ldr	r3, [pc, #240]	; (800b490 <Explore_IT+0x4a0>)
 800b3a0:	edc3 7a00 	vstr	s15, [r3]

				//TargetVelocity[BODY] = 0.1*PIDControl( FD_WALL_PID,   Photo[FR]+Photo[FL],4000);
			}
		}

	TargetVelocity[BODY] += Acceleration;
 800b3a4:	4b37      	ldr	r3, [pc, #220]	; (800b484 <Explore_IT+0x494>)
 800b3a6:	ed93 7a02 	vldr	s14, [r3, #8]
 800b3aa:	4b3a      	ldr	r3, [pc, #232]	; (800b494 <Explore_IT+0x4a4>)
 800b3ac:	edd3 7a00 	vldr	s15, [r3]
 800b3b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3b4:	4b33      	ldr	r3, [pc, #204]	; (800b484 <Explore_IT+0x494>)
 800b3b6:	edc3 7a02 	vstr	s15, [r3, #8]
	//AngularAcceleration += AngularLeapsity;
	TargetAngularV += AngularAcceleration;
 800b3ba:	4b35      	ldr	r3, [pc, #212]	; (800b490 <Explore_IT+0x4a0>)
 800b3bc:	ed93 7a00 	vldr	s14, [r3]
 800b3c0:	4b35      	ldr	r3, [pc, #212]	; (800b498 <Explore_IT+0x4a8>)
 800b3c2:	edd3 7a00 	vldr	s15, [r3]
 800b3c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3ca:	4b31      	ldr	r3, [pc, #196]	; (800b490 <Explore_IT+0x4a0>)
 800b3cc:	edc3 7a00 	vstr	s15, [r3]
	//TargetAngularV += AngularAcceleration;
	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800b3d0:	4b2c      	ldr	r3, [pc, #176]	; (800b484 <Explore_IT+0x494>)
 800b3d2:	ed93 7a02 	vldr	s14, [r3, #8]
 800b3d6:	4b2e      	ldr	r3, [pc, #184]	; (800b490 <Explore_IT+0x4a0>)
 800b3d8:	edd3 7a00 	vldr	s15, [r3]
 800b3dc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800b49c <Explore_IT+0x4ac>
 800b3e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b3e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b3e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b3ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3f0:	4b24      	ldr	r3, [pc, #144]	; (800b484 <Explore_IT+0x494>)
 800b3f2:	edc3 7a01 	vstr	s15, [r3, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800b3f6:	4b26      	ldr	r3, [pc, #152]	; (800b490 <Explore_IT+0x4a0>)
 800b3f8:	edd3 7a00 	vldr	s15, [r3]
 800b3fc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b49c <Explore_IT+0x4ac>
 800b400:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b404:	4b1f      	ldr	r3, [pc, #124]	; (800b484 <Explore_IT+0x494>)
 800b406:	edd3 7a01 	vldr	s15, [r3, #4]
 800b40a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b40e:	4b1d      	ldr	r3, [pc, #116]	; (800b484 <Explore_IT+0x494>)
 800b410:	edc3 7a00 	vstr	s15, [r3]

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800b414:	4b1b      	ldr	r3, [pc, #108]	; (800b484 <Explore_IT+0x494>)
 800b416:	edd3 7a00 	vldr	s15, [r3]
 800b41a:	4b21      	ldr	r3, [pc, #132]	; (800b4a0 <Explore_IT+0x4b0>)
 800b41c:	ed93 7a00 	vldr	s14, [r3]
 800b420:	eef0 0a47 	vmov.f32	s1, s14
 800b424:	eeb0 0a67 	vmov.f32	s0, s15
 800b428:	2004      	movs	r0, #4
 800b42a:	f005 fb01 	bl	8010a30 <PIDControl>
 800b42e:	4602      	mov	r2, r0
 800b430:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <Explore_IT+0x4b4>)
 800b432:	601a      	str	r2, [r3, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800b434:	4b13      	ldr	r3, [pc, #76]	; (800b484 <Explore_IT+0x494>)
 800b436:	edd3 7a01 	vldr	s15, [r3, #4]
 800b43a:	4b19      	ldr	r3, [pc, #100]	; (800b4a0 <Explore_IT+0x4b0>)
 800b43c:	ed93 7a01 	vldr	s14, [r3, #4]
 800b440:	eef0 0a47 	vmov.f32	s1, s14
 800b444:	eeb0 0a67 	vmov.f32	s0, s15
 800b448:	2005      	movs	r0, #5
 800b44a:	f005 faf1 	bl	8010a30 <PIDControl>
 800b44e:	4602      	mov	r2, r0
 800b450:	4b15      	ldr	r3, [pc, #84]	; (800b4a8 <Explore_IT+0x4b8>)
 800b452:	601a      	str	r2, [r3, #0]

	//モータに出力
	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800b454:	4b13      	ldr	r3, [pc, #76]	; (800b4a4 <Explore_IT+0x4b4>)
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	4b13      	ldr	r3, [pc, #76]	; (800b4a8 <Explore_IT+0x4b8>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4619      	mov	r1, r3
 800b45e:	4610      	mov	r0, r2
 800b460:	f004 fdee 	bl	8010040 <Motor_Switch>

}
 800b464:	bf00      	nop
 800b466:	3718      	adds	r7, #24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bdb0      	pop	{r4, r5, r7, pc}
 800b46c:	f3af 8000 	nop.w
 800b470:	d2f1a9fc 	.word	0xd2f1a9fc
 800b474:	3f50624d 	.word	0x3f50624d
 800b478:	20000318 	.word	0x20000318
 800b47c:	20000560 	.word	0x20000560
 800b480:	457a0000 	.word	0x457a0000
 800b484:	200004ec 	.word	0x200004ec
 800b488:	20000518 	.word	0x20000518
 800b48c:	20000228 	.word	0x20000228
 800b490:	200004fc 	.word	0x200004fc
 800b494:	2000022c 	.word	0x2000022c
 800b498:	20000230 	.word	0x20000230
 800b49c:	4209999a 	.word	0x4209999a
 800b4a0:	2000052c 	.word	0x2000052c
 800b4a4:	20000618 	.word	0x20000618
 800b4a8:	20000634 	.word	0x20000634
 800b4ac:	00000000 	.word	0x00000000

0800b4b0 <WritingFree_IT>:
void WritingFree_IT()
{
 800b4b0:	b5b0      	push	{r4, r5, r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
	PulseDisplacement[LEFT] = - (TIM3->CNT - INITIAL_PULSE);
 800b4b6:	4b90      	ldr	r3, [pc, #576]	; (800b6f8 <WritingFree_IT+0x248>)
 800b4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ba:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800b4be:	332f      	adds	r3, #47	; 0x2f
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4b8e      	ldr	r3, [pc, #568]	; (800b6fc <WritingFree_IT+0x24c>)
 800b4c4:	601a      	str	r2, [r3, #0]
	TIM3->CNT = INITIAL_PULSE;
 800b4c6:	4b8c      	ldr	r3, [pc, #560]	; (800b6f8 <WritingFree_IT+0x248>)
 800b4c8:	f247 522f 	movw	r2, #29999	; 0x752f
 800b4cc:	625a      	str	r2, [r3, #36]	; 0x24
	PulseDisplacement[RIGHT] = - (TIM4->CNT - INITIAL_PULSE);
 800b4ce:	4b8c      	ldr	r3, [pc, #560]	; (800b700 <WritingFree_IT+0x250>)
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800b4d6:	332f      	adds	r3, #47	; 0x2f
 800b4d8:	461a      	mov	r2, r3
 800b4da:	4b88      	ldr	r3, [pc, #544]	; (800b6fc <WritingFree_IT+0x24c>)
 800b4dc:	605a      	str	r2, [r3, #4]
	TIM4->CNT = INITIAL_PULSE;
 800b4de:	4b88      	ldr	r3, [pc, #544]	; (800b700 <WritingFree_IT+0x250>)
 800b4e0:	f247 522f 	movw	r2, #29999	; 0x752f
 800b4e4:	625a      	str	r2, [r3, #36]	; 0x24

	CurrentVelocity[LEFT] =  (float)PulseDisplacement[LEFT] * convert_to_velocity;
 800b4e6:	4b85      	ldr	r3, [pc, #532]	; (800b6fc <WritingFree_IT+0x24c>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	ee07 3a90 	vmov	s15, r3
 800b4ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4f2:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800b704 <WritingFree_IT+0x254>
 800b4f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4fa:	4b83      	ldr	r3, [pc, #524]	; (800b708 <WritingFree_IT+0x258>)
 800b4fc:	edc3 7a00 	vstr	s15, [r3]
	CurrentVelocity[RIGHT] =  (float)PulseDisplacement[RIGHT] * convert_to_velocity;
 800b500:	4b7e      	ldr	r3, [pc, #504]	; (800b6fc <WritingFree_IT+0x24c>)
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	ee07 3a90 	vmov	s15, r3
 800b508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b50c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b704 <WritingFree_IT+0x254>
 800b510:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b514:	4b7c      	ldr	r3, [pc, #496]	; (800b708 <WritingFree_IT+0x258>)
 800b516:	edc3 7a01 	vstr	s15, [r3, #4]
	CurrentVelocity[BODY] = (CurrentVelocity[LEFT] + CurrentVelocity[RIGHT] )*0.5f;
 800b51a:	4b7b      	ldr	r3, [pc, #492]	; (800b708 <WritingFree_IT+0x258>)
 800b51c:	ed93 7a00 	vldr	s14, [r3]
 800b520:	4b79      	ldr	r3, [pc, #484]	; (800b708 <WritingFree_IT+0x258>)
 800b522:	edd3 7a01 	vldr	s15, [r3, #4]
 800b526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b52a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b52e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b532:	4b75      	ldr	r3, [pc, #468]	; (800b708 <WritingFree_IT+0x258>)
 800b534:	edc3 7a02 	vstr	s15, [r3, #8]
//			velodebug_flag = 0;
//		}
//
//	}
	//移動量 mm/msを積算
	TotalPulse[LEFT] += PulseDisplacement[LEFT];
 800b538:	4b74      	ldr	r3, [pc, #464]	; (800b70c <WritingFree_IT+0x25c>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	4b6f      	ldr	r3, [pc, #444]	; (800b6fc <WritingFree_IT+0x24c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4413      	add	r3, r2
 800b542:	4a72      	ldr	r2, [pc, #456]	; (800b70c <WritingFree_IT+0x25c>)
 800b544:	6013      	str	r3, [r2, #0]
	TotalPulse[RIGHT] += PulseDisplacement[RIGHT];
 800b546:	4b71      	ldr	r3, [pc, #452]	; (800b70c <WritingFree_IT+0x25c>)
 800b548:	685a      	ldr	r2, [r3, #4]
 800b54a:	4b6c      	ldr	r3, [pc, #432]	; (800b6fc <WritingFree_IT+0x24c>)
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	4413      	add	r3, r2
 800b550:	4a6e      	ldr	r2, [pc, #440]	; (800b70c <WritingFree_IT+0x25c>)
 800b552:	6053      	str	r3, [r2, #4]
	TotalPulse[BODY] = TotalPulse[LEFT]+TotalPulse[RIGHT];
 800b554:	4b6d      	ldr	r3, [pc, #436]	; (800b70c <WritingFree_IT+0x25c>)
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	4b6c      	ldr	r3, [pc, #432]	; (800b70c <WritingFree_IT+0x25c>)
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	4413      	add	r3, r2
 800b55e:	4a6b      	ldr	r2, [pc, #428]	; (800b70c <WritingFree_IT+0x25c>)
 800b560:	6093      	str	r3, [r2, #8]
#if 1

	static float zg_last=0;
	float zg_law;
	//uint8_t zgb,zgf;
	ZGyro = ReadIMU(0x37, 0x38);
 800b562:	2138      	movs	r1, #56	; 0x38
 800b564:	2037      	movs	r0, #55	; 0x37
 800b566:	f004 fb11 	bl	800fb8c <ReadIMU>
 800b56a:	eef0 7a40 	vmov.f32	s15, s0
 800b56e:	4b68      	ldr	r3, [pc, #416]	; (800b710 <WritingFree_IT+0x260>)
 800b570:	edc3 7a00 	vstr	s15, [r3]
    zg_law =  ( ZGyro - zg_offset )*convert_to_imu_angv;//16.4 * 180;//rad/s or rad/0.001s
 800b574:	4b66      	ldr	r3, [pc, #408]	; (800b710 <WritingFree_IT+0x260>)
 800b576:	ed93 7a00 	vldr	s14, [r3]
 800b57a:	4b66      	ldr	r3, [pc, #408]	; (800b714 <WritingFree_IT+0x264>)
 800b57c:	edd3 7a00 	vldr	s15, [r3]
 800b580:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b584:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800b718 <WritingFree_IT+0x268>
 800b588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b58c:	edc7 7a01 	vstr	s15, [r7, #4]
    AngularV = -((0.01*zg_law) + (0.99)* (zg_last));
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7fc ff11 	bl	80083b8 <__aeabi_f2d>
 800b596:	a354      	add	r3, pc, #336	; (adr r3, 800b6e8 <WritingFree_IT+0x238>)
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	f7fc ff64 	bl	8008468 <__aeabi_dmul>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	4625      	mov	r5, r4
 800b5a6:	461c      	mov	r4, r3
 800b5a8:	4b5c      	ldr	r3, [pc, #368]	; (800b71c <WritingFree_IT+0x26c>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fc ff03 	bl	80083b8 <__aeabi_f2d>
 800b5b2:	a34f      	add	r3, pc, #316	; (adr r3, 800b6f0 <WritingFree_IT+0x240>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f7fc ff56 	bl	8008468 <__aeabi_dmul>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	f7fc fd9a 	bl	80080fc <__adddf3>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	f7fd fa42 	bl	8008a58 <__aeabi_d2f>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	ee07 3a90 	vmov	s15, r3
 800b5da:	eef1 7a67 	vneg.f32	s15, s15
 800b5de:	4b50      	ldr	r3, [pc, #320]	; (800b720 <WritingFree_IT+0x270>)
 800b5e0:	edc3 7a00 	vstr	s15, [r3]
    zg_last = zg_law;
 800b5e4:	4a4d      	ldr	r2, [pc, #308]	; (800b71c <WritingFree_IT+0x26c>)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6013      	str	r3, [r2, #0]
	Angle += AngularV * T1;
 800b5ea:	4b4d      	ldr	r3, [pc, #308]	; (800b720 <WritingFree_IT+0x270>)
 800b5ec:	edd3 7a00 	vldr	s15, [r3]
 800b5f0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800b724 <WritingFree_IT+0x274>
 800b5f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b5f8:	4b4b      	ldr	r3, [pc, #300]	; (800b728 <WritingFree_IT+0x278>)
 800b5fa:	edd3 7a00 	vldr	s15, [r3]
 800b5fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b602:	4b49      	ldr	r3, [pc, #292]	; (800b728 <WritingFree_IT+0x278>)
 800b604:	edc3 7a00 	vstr	s15, [r3]
				TargetAngularV = (float)wall_r*0.001;//0.002 だと速さはちょうどいいけど細かさが足りないかも。
			}
		}
#endif

	AngularAcceleration += AngularLeapsity;
 800b608:	4b48      	ldr	r3, [pc, #288]	; (800b72c <WritingFree_IT+0x27c>)
 800b60a:	ed93 7a00 	vldr	s14, [r3]
 800b60e:	4b48      	ldr	r3, [pc, #288]	; (800b730 <WritingFree_IT+0x280>)
 800b610:	edd3 7a00 	vldr	s15, [r3]
 800b614:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b618:	4b44      	ldr	r3, [pc, #272]	; (800b72c <WritingFree_IT+0x27c>)
 800b61a:	edc3 7a00 	vstr	s15, [r3]
	TargetVelocity[BODY] += Acceleration;
 800b61e:	4b45      	ldr	r3, [pc, #276]	; (800b734 <WritingFree_IT+0x284>)
 800b620:	ed93 7a02 	vldr	s14, [r3, #8]
 800b624:	4b44      	ldr	r3, [pc, #272]	; (800b738 <WritingFree_IT+0x288>)
 800b626:	edd3 7a00 	vldr	s15, [r3]
 800b62a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b62e:	4b41      	ldr	r3, [pc, #260]	; (800b734 <WritingFree_IT+0x284>)
 800b630:	edc3 7a02 	vstr	s15, [r3, #8]
	TargetAngularV += AngularAcceleration;
 800b634:	4b41      	ldr	r3, [pc, #260]	; (800b73c <WritingFree_IT+0x28c>)
 800b636:	ed93 7a00 	vldr	s14, [r3]
 800b63a:	4b3c      	ldr	r3, [pc, #240]	; (800b72c <WritingFree_IT+0x27c>)
 800b63c:	edd3 7a00 	vldr	s15, [r3]
 800b640:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b644:	4b3d      	ldr	r3, [pc, #244]	; (800b73c <WritingFree_IT+0x28c>)
 800b646:	edc3 7a00 	vstr	s15, [r3]

	TargetVelocity[RIGHT] = ( TargetVelocity[BODY] - TargetAngularV * TREAD_WIDTH * 0.5f );
 800b64a:	4b3a      	ldr	r3, [pc, #232]	; (800b734 <WritingFree_IT+0x284>)
 800b64c:	ed93 7a02 	vldr	s14, [r3, #8]
 800b650:	4b3a      	ldr	r3, [pc, #232]	; (800b73c <WritingFree_IT+0x28c>)
 800b652:	edd3 7a00 	vldr	s15, [r3]
 800b656:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800b740 <WritingFree_IT+0x290>
 800b65a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b65e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b662:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b66a:	4b32      	ldr	r3, [pc, #200]	; (800b734 <WritingFree_IT+0x284>)
 800b66c:	edc3 7a01 	vstr	s15, [r3, #4]
	TargetVelocity[LEFT] = ( TargetAngularV *TREAD_WIDTH ) + TargetVelocity[RIGHT];
 800b670:	4b32      	ldr	r3, [pc, #200]	; (800b73c <WritingFree_IT+0x28c>)
 800b672:	edd3 7a00 	vldr	s15, [r3]
 800b676:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b740 <WritingFree_IT+0x290>
 800b67a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b67e:	4b2d      	ldr	r3, [pc, #180]	; (800b734 <WritingFree_IT+0x284>)
 800b680:	edd3 7a01 	vldr	s15, [r3, #4]
 800b684:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b688:	4b2a      	ldr	r3, [pc, #168]	; (800b734 <WritingFree_IT+0x284>)
 800b68a:	edc3 7a00 	vstr	s15, [r3]

	VelocityLeftOut = PIDControl( L_VELO_PID, TargetVelocity[LEFT], CurrentVelocity[LEFT]);
 800b68e:	4b29      	ldr	r3, [pc, #164]	; (800b734 <WritingFree_IT+0x284>)
 800b690:	edd3 7a00 	vldr	s15, [r3]
 800b694:	4b1c      	ldr	r3, [pc, #112]	; (800b708 <WritingFree_IT+0x258>)
 800b696:	ed93 7a00 	vldr	s14, [r3]
 800b69a:	eef0 0a47 	vmov.f32	s1, s14
 800b69e:	eeb0 0a67 	vmov.f32	s0, s15
 800b6a2:	2004      	movs	r0, #4
 800b6a4:	f005 f9c4 	bl	8010a30 <PIDControl>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	4b26      	ldr	r3, [pc, #152]	; (800b744 <WritingFree_IT+0x294>)
 800b6ac:	601a      	str	r2, [r3, #0]
	VelocityRightOut = PIDControl( R_VELO_PID, TargetVelocity[RIGHT], CurrentVelocity[RIGHT]);
 800b6ae:	4b21      	ldr	r3, [pc, #132]	; (800b734 <WritingFree_IT+0x284>)
 800b6b0:	edd3 7a01 	vldr	s15, [r3, #4]
 800b6b4:	4b14      	ldr	r3, [pc, #80]	; (800b708 <WritingFree_IT+0x258>)
 800b6b6:	ed93 7a01 	vldr	s14, [r3, #4]
 800b6ba:	eef0 0a47 	vmov.f32	s1, s14
 800b6be:	eeb0 0a67 	vmov.f32	s0, s15
 800b6c2:	2005      	movs	r0, #5
 800b6c4:	f005 f9b4 	bl	8010a30 <PIDControl>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	4b1f      	ldr	r3, [pc, #124]	; (800b748 <WritingFree_IT+0x298>)
 800b6cc:	601a      	str	r2, [r3, #0]

	Motor_Switch( VelocityLeftOut, VelocityRightOut );
 800b6ce:	4b1d      	ldr	r3, [pc, #116]	; (800b744 <WritingFree_IT+0x294>)
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	4b1d      	ldr	r3, [pc, #116]	; (800b748 <WritingFree_IT+0x298>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4610      	mov	r0, r2
 800b6da:	f004 fcb1 	bl	8010040 <Motor_Switch>


}
 800b6de:	bf00      	nop
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	47ae147b 	.word	0x47ae147b
 800b6ec:	3f847ae1 	.word	0x3f847ae1
 800b6f0:	7ae147ae 	.word	0x7ae147ae
 800b6f4:	3fefae14 	.word	0x3fefae14
 800b6f8:	40000400 	.word	0x40000400
 800b6fc:	200006dc 	.word	0x200006dc
 800b700:	40000800 	.word	0x40000800
 800b704:	3f8177cd 	.word	0x3f8177cd
 800b708:	2000052c 	.word	0x2000052c
 800b70c:	20000520 	.word	0x20000520
 800b710:	200002d4 	.word	0x200002d4
 800b714:	200002d0 	.word	0x200002d0
 800b718:	3a8b7d78 	.word	0x3a8b7d78
 800b71c:	20000220 	.word	0x20000220
 800b720:	20000224 	.word	0x20000224
 800b724:	3a83126f 	.word	0x3a83126f
 800b728:	20000228 	.word	0x20000228
 800b72c:	20000230 	.word	0x20000230
 800b730:	20000234 	.word	0x20000234
 800b734:	200004ec 	.word	0x200004ec
 800b738:	2000022c 	.word	0x2000022c
 800b73c:	200004fc 	.word	0x200004fc
 800b740:	4209999a 	.word	0x4209999a
 800b744:	20000618 	.word	0x20000618
 800b748:	20000634 	.word	0x20000634

0800b74c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	if( htim == &htim1)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a26      	ldr	r2, [pc, #152]	; (800b7f0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d10e      	bne.n	800b77a <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		switch(IT_mode){
 800b75c:	4b25      	ldr	r3, [pc, #148]	; (800b7f4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b06      	cmp	r3, #6
 800b762:	d004      	beq.n	800b76e <HAL_TIM_PeriodElapsedCallback+0x22>
 800b764:	2b07      	cmp	r3, #7
 800b766:	d005      	beq.n	800b774 <HAL_TIM_PeriodElapsedCallback+0x28>
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d008      	beq.n	800b77e <HAL_TIM_PeriodElapsedCallback+0x32>
			break;
		case 2:

			break;
		default :
			break;
 800b76c:	e008      	b.n	800b780 <HAL_TIM_PeriodElapsedCallback+0x34>
			Explore_IT();
 800b76e:	f7ff fc3f 	bl	800aff0 <Explore_IT>
			break;
 800b772:	e005      	b.n	800b780 <HAL_TIM_PeriodElapsedCallback+0x34>
			WritingFree_IT();
 800b774:	f7ff fe9c 	bl	800b4b0 <WritingFree_IT>
			break;
 800b778:	e002      	b.n	800b780 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
	}
 800b77a:	bf00      	nop
 800b77c:	e000      	b.n	800b780 <HAL_TIM_PeriodElapsedCallback+0x34>
			break;
 800b77e:	bf00      	nop

	if( htim == &htim8)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a1d      	ldr	r2, [pc, #116]	; (800b7f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d12f      	bne.n	800b7e8 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		//timer8 += t;

		//壁センサデータの更新
		Photo[FL] = GetWallDataAverage(10, adc1[0], FL);	//adc1_IN10
 800b788:	4b1c      	ldr	r3, [pc, #112]	; (800b7fc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2200      	movs	r2, #0
 800b78e:	4619      	mov	r1, r3
 800b790:	200a      	movs	r0, #10
 800b792:	f004 fcc5 	bl	8010120 <GetWallDataAverage>
 800b796:	eef0 7a40 	vmov.f32	s15, s0
 800b79a:	4b19      	ldr	r3, [pc, #100]	; (800b800 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b79c:	edc3 7a00 	vstr	s15, [r3]
		Photo[SR] = GetWallDataAverage(10, adc1[1], SR);	//adc1_IN14
 800b7a0:	4b16      	ldr	r3, [pc, #88]	; (800b7fc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	200a      	movs	r0, #10
 800b7aa:	f004 fcb9 	bl	8010120 <GetWallDataAverage>
 800b7ae:	eef0 7a40 	vmov.f32	s15, s0
 800b7b2:	4b13      	ldr	r3, [pc, #76]	; (800b800 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b7b4:	edc3 7a01 	vstr	s15, [r3, #4]
		Photo[SL] = GetWallDataAverage(10, adc2[0], SL);	//adc2_IN11
 800b7b8:	4b12      	ldr	r3, [pc, #72]	; (800b804 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2202      	movs	r2, #2
 800b7be:	4619      	mov	r1, r3
 800b7c0:	200a      	movs	r0, #10
 800b7c2:	f004 fcad 	bl	8010120 <GetWallDataAverage>
 800b7c6:	eef0 7a40 	vmov.f32	s15, s0
 800b7ca:	4b0d      	ldr	r3, [pc, #52]	; (800b800 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b7cc:	edc3 7a02 	vstr	s15, [r3, #8]
		Photo[FR] = GetWallDataAverage(10, adc2[1], FR);	//adc2_IN15
 800b7d0:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	2203      	movs	r2, #3
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	200a      	movs	r0, #10
 800b7da:	f004 fca1 	bl	8010120 <GetWallDataAverage>
 800b7de:	eef0 7a40 	vmov.f32	s15, s0
 800b7e2:	4b07      	ldr	r3, [pc, #28]	; (800b800 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b7e4:	edc3 7a03 	vstr	s15, [r3, #12]
	}
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	200009dc 	.word	0x200009dc
 800b7f4:	200004e0 	.word	0x200004e0
 800b7f8:	20000794 	.word	0x20000794
 800b7fc:	200002bc 	.word	0x200002bc
 800b800:	20000560 	.word	0x20000560
 800b804:	200002c8 	.word	0x200002c8

0800b808 <flash_store_init>:
//{
//
//}
//壁データの初期化
void flash_store_init()
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800b80e:	4b30      	ldr	r3, [pc, #192]	; (800b8d0 <flash_store_init+0xc8>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	60fb      	str	r3, [r7, #12]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b814:	2300      	movs	r3, #0
 800b816:	60bb      	str	r3, [r7, #8]
 800b818:	e053      	b.n	800b8c2 <flash_store_init+0xba>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b81a:	2300      	movs	r3, #0
 800b81c:	607b      	str	r3, [r7, #4]
 800b81e:	e04a      	b.n	800b8b6 <flash_store_init+0xae>
			{
				FLASH_Write_Word(address+0, Wall[i][j].north);
 800b820:	492c      	ldr	r1, [pc, #176]	; (800b8d4 <flash_store_init+0xcc>)
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	4613      	mov	r3, r2
 800b826:	00db      	lsls	r3, r3, #3
 800b828:	4413      	add	r3, r2
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	4413      	add	r3, r2
 800b82e:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b832:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b836:	b2db      	uxtb	r3, r3
 800b838:	4619      	mov	r1, r3
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f004 f882 	bl	800f944 <FLASH_Write_Word>
				FLASH_Write_Word(address+4, Wall[i][j].east);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	1d18      	adds	r0, r3, #4
 800b844:	4923      	ldr	r1, [pc, #140]	; (800b8d4 <flash_store_init+0xcc>)
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	4613      	mov	r3, r2
 800b84a:	00db      	lsls	r3, r3, #3
 800b84c:	4413      	add	r3, r2
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	4413      	add	r3, r2
 800b852:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b856:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	4619      	mov	r1, r3
 800b85e:	f004 f871 	bl	800f944 <FLASH_Write_Word>
				FLASH_Write_Word(address+8, Wall[i][j].south);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f103 0008 	add.w	r0, r3, #8
 800b868:	491a      	ldr	r1, [pc, #104]	; (800b8d4 <flash_store_init+0xcc>)
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	4613      	mov	r3, r2
 800b86e:	00db      	lsls	r3, r3, #3
 800b870:	4413      	add	r3, r2
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	4413      	add	r3, r2
 800b876:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b87a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	4619      	mov	r1, r3
 800b882:	f004 f85f 	bl	800f944 <FLASH_Write_Word>
				FLASH_Write_Word(address+12, Wall[i][j].west);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f103 000c 	add.w	r0, r3, #12
 800b88c:	4911      	ldr	r1, [pc, #68]	; (800b8d4 <flash_store_init+0xcc>)
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	4613      	mov	r3, r2
 800b892:	00db      	lsls	r3, r3, #3
 800b894:	4413      	add	r3, r2
 800b896:	68ba      	ldr	r2, [r7, #8]
 800b898:	4413      	add	r3, r2
 800b89a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800b89e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	f004 f84d 	bl	800f944 <FLASH_Write_Word>
				address += 16;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3310      	adds	r3, #16
 800b8ae:	60fb      	str	r3, [r7, #12]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	607b      	str	r3, [r7, #4]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b08      	cmp	r3, #8
 800b8ba:	ddb1      	ble.n	800b820 <flash_store_init+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	60bb      	str	r3, [r7, #8]
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	2b08      	cmp	r3, #8
 800b8c6:	dda8      	ble.n	800b81a <flash_store_init+0x12>
			}
	}
}
 800b8c8:	bf00      	nop
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	0801b338 	.word	0x0801b338
 800b8d4:	200006e8 	.word	0x200006e8

0800b8d8 <wall_init>:
void wall_init(){
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0

	//全部未探索にする
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b8de:	2300      	movs	r3, #0
 800b8e0:	60fb      	str	r3, [r7, #12]
 800b8e2:	e043      	b.n	800b96c <wall_init+0x94>
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	60bb      	str	r3, [r7, #8]
 800b8e8:	e03a      	b.n	800b960 <wall_init+0x88>
				Wall[i][j].north = UNKNOWN;
 800b8ea:	494b      	ldr	r1, [pc, #300]	; (800ba18 <wall_init+0x140>)
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	00db      	lsls	r3, r3, #3
 800b8f2:	4413      	add	r3, r2
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	441a      	add	r2, r3
 800b8f8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b8fc:	2002      	movs	r0, #2
 800b8fe:	f360 0301 	bfi	r3, r0, #0, #2
 800b902:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = UNKNOWN;
 800b906:	4944      	ldr	r1, [pc, #272]	; (800ba18 <wall_init+0x140>)
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	4613      	mov	r3, r2
 800b90c:	00db      	lsls	r3, r3, #3
 800b90e:	4413      	add	r3, r2
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	441a      	add	r2, r3
 800b914:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b918:	2002      	movs	r0, #2
 800b91a:	f360 0383 	bfi	r3, r0, #2, #2
 800b91e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = UNKNOWN;
 800b922:	493d      	ldr	r1, [pc, #244]	; (800ba18 <wall_init+0x140>)
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	4613      	mov	r3, r2
 800b928:	00db      	lsls	r3, r3, #3
 800b92a:	4413      	add	r3, r2
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	441a      	add	r2, r3
 800b930:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b934:	2002      	movs	r0, #2
 800b936:	f360 1305 	bfi	r3, r0, #4, #2
 800b93a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = UNKNOWN;
 800b93e:	4936      	ldr	r1, [pc, #216]	; (800ba18 <wall_init+0x140>)
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	4613      	mov	r3, r2
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	4413      	add	r3, r2
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	441a      	add	r2, r3
 800b94c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b950:	2002      	movs	r0, #2
 800b952:	f360 1387 	bfi	r3, r0, #6, #2
 800b956:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(int j=0; j < NUMBER_OF_SQUARES; j++){
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	3301      	adds	r3, #1
 800b95e:	60bb      	str	r3, [r7, #8]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b08      	cmp	r3, #8
 800b964:	ddc1      	ble.n	800b8ea <wall_init+0x12>
	for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	3301      	adds	r3, #1
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b08      	cmp	r3, #8
 800b970:	ddb8      	ble.n	800b8e4 <wall_init+0xc>

			}
	}

	//外周を壁ありにする
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b972:	2300      	movs	r3, #0
 800b974:	607b      	str	r3, [r7, #4]
 800b976:	e030      	b.n	800b9da <wall_init+0x102>
	{
		Wall[n][NUMBER_OF_SQUARES-1].north = WALL;
 800b978:	4927      	ldr	r1, [pc, #156]	; (800ba18 <wall_init+0x140>)
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	4613      	mov	r3, r2
 800b97e:	00db      	lsls	r3, r3, #3
 800b980:	4413      	add	r3, r2
 800b982:	005b      	lsls	r3, r3, #1
 800b984:	440b      	add	r3, r1
 800b986:	f103 0210 	add.w	r2, r3, #16
 800b98a:	7813      	ldrb	r3, [r2, #0]
 800b98c:	2101      	movs	r1, #1
 800b98e:	f361 0301 	bfi	r3, r1, #0, #2
 800b992:	7013      	strb	r3, [r2, #0]
		Wall[NUMBER_OF_SQUARES-1][n].east = WALL;
 800b994:	4920      	ldr	r1, [pc, #128]	; (800ba18 <wall_init+0x140>)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b99c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	f360 0383 	bfi	r3, r0, #2, #2
 800b9a6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		Wall[n][0].south = WALL;
 800b9aa:	491b      	ldr	r1, [pc, #108]	; (800ba18 <wall_init+0x140>)
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	00db      	lsls	r3, r3, #3
 800b9b2:	4413      	add	r3, r2
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	18ca      	adds	r2, r1, r3
 800b9b8:	7813      	ldrb	r3, [r2, #0]
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	f361 1305 	bfi	r3, r1, #4, #2
 800b9c0:	7013      	strb	r3, [r2, #0]
		Wall[0][n].west = WALL;
 800b9c2:	4915      	ldr	r1, [pc, #84]	; (800ba18 <wall_init+0x140>)
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800b9ca:	2001      	movs	r0, #1
 800b9cc:	f360 1387 	bfi	r3, r0, #6, #2
 800b9d0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	for(int n=0; n < NUMBER_OF_SQUARES; n++)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	607b      	str	r3, [r7, #4]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2b08      	cmp	r3, #8
 800b9de:	ddcb      	ble.n	800b978 <wall_init+0xa0>
	}

	//スタート座標の東壁に壁ありにする
	Wall[0][0].east = WALL;
 800b9e0:	4a0d      	ldr	r2, [pc, #52]	; (800ba18 <wall_init+0x140>)
 800b9e2:	7813      	ldrb	r3, [r2, #0]
 800b9e4:	2101      	movs	r1, #1
 800b9e6:	f361 0383 	bfi	r3, r1, #2, #2
 800b9ea:	7013      	strb	r3, [r2, #0]
	Wall[0][0].north = NOWALL;
 800b9ec:	4a0a      	ldr	r2, [pc, #40]	; (800ba18 <wall_init+0x140>)
 800b9ee:	7813      	ldrb	r3, [r2, #0]
 800b9f0:	f36f 0301 	bfc	r3, #0, #2
 800b9f4:	7013      	strb	r3, [r2, #0]
	Wall[1][0].west = WALL;
 800b9f6:	4a08      	ldr	r2, [pc, #32]	; (800ba18 <wall_init+0x140>)
 800b9f8:	7c93      	ldrb	r3, [r2, #18]
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	f361 1387 	bfi	r3, r1, #6, #2
 800ba00:	7493      	strb	r3, [r2, #18]
	Wall[0][1].south = NOWALL;
 800ba02:	4a05      	ldr	r2, [pc, #20]	; (800ba18 <wall_init+0x140>)
 800ba04:	7893      	ldrb	r3, [r2, #2]
 800ba06:	f36f 1305 	bfc	r3, #4, #2
 800ba0a:	7093      	strb	r3, [r2, #2]
//	Flash_clear_sector1();

	//書く
	//flash_store_init();

}
 800ba0c:	bf00      	nop
 800ba0e:	3714      	adds	r7, #20
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr
 800ba18:	200006e8 	.word	0x200006e8

0800ba1c <wall_set>:
	FLASH_Write_Word(address+8, Wall[x][y].south);
	FLASH_Write_Word(address+12, Wall[x][y].west);

}
//壁の更新xyグローバル
void wall_set(){
 800ba1c:	b490      	push	{r4, r7}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	//壁センサ値を読んで、各方角の壁の有無を判定
	  wall_dir[Pos.NextCar] = ((Photo[FL] + Photo[FR])/2 > FRONT_WALL)  ?   WALL : NOWALL;	//70超えたら壁あり。
 800ba22:	4b96      	ldr	r3, [pc, #600]	; (800bc7c <wall_set+0x260>)
 800ba24:	ed93 7a00 	vldr	s14, [r3]
 800ba28:	4b94      	ldr	r3, [pc, #592]	; (800bc7c <wall_set+0x260>)
 800ba2a:	edd3 7a03 	vldr	s15, [r3, #12]
 800ba2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba32:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ba36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba3a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800bc80 <wall_set+0x264>
 800ba3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba46:	bfcc      	ite	gt
 800ba48:	2301      	movgt	r3, #1
 800ba4a:	2300      	movle	r3, #0
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	4b8d      	ldr	r3, [pc, #564]	; (800bc84 <wall_set+0x268>)
 800ba50:	7adb      	ldrb	r3, [r3, #11]
 800ba52:	f107 0108 	add.w	r1, r7, #8
 800ba56:	440b      	add	r3, r1
 800ba58:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 1)%4] = Photo[SR] > RIGHT_WALL  ?  WALL :  NOWALL;
 800ba5c:	4b87      	ldr	r3, [pc, #540]	; (800bc7c <wall_set+0x260>)
 800ba5e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba62:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800bc88 <wall_set+0x26c>
 800ba66:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6e:	bfcc      	ite	gt
 800ba70:	2301      	movgt	r3, #1
 800ba72:	2300      	movle	r3, #0
 800ba74:	b2d9      	uxtb	r1, r3
 800ba76:	4b83      	ldr	r3, [pc, #524]	; (800bc84 <wall_set+0x268>)
 800ba78:	7adb      	ldrb	r3, [r3, #11]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	425a      	negs	r2, r3
 800ba7e:	f003 0303 	and.w	r3, r3, #3
 800ba82:	f002 0203 	and.w	r2, r2, #3
 800ba86:	bf58      	it	pl
 800ba88:	4253      	negpl	r3, r2
 800ba8a:	460a      	mov	r2, r1
 800ba8c:	f107 0108 	add.w	r1, r7, #8
 800ba90:	440b      	add	r3, r1
 800ba92:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 2)%4] = NOWALL;
 800ba96:	4b7b      	ldr	r3, [pc, #492]	; (800bc84 <wall_set+0x268>)
 800ba98:	7adb      	ldrb	r3, [r3, #11]
 800ba9a:	3302      	adds	r3, #2
 800ba9c:	425a      	negs	r2, r3
 800ba9e:	f003 0303 	and.w	r3, r3, #3
 800baa2:	f002 0203 	and.w	r2, r2, #3
 800baa6:	bf58      	it	pl
 800baa8:	4253      	negpl	r3, r2
 800baaa:	f107 0208 	add.w	r2, r7, #8
 800baae:	4413      	add	r3, r2
 800bab0:	2200      	movs	r2, #0
 800bab2:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(Pos.NextCar + 3)%4] = Photo[SL] > LEFT_WALL ?  WALL :  NOWALL;
 800bab6:	4b71      	ldr	r3, [pc, #452]	; (800bc7c <wall_set+0x260>)
 800bab8:	edd3 7a02 	vldr	s15, [r3, #8]
 800babc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bc8c <wall_set+0x270>
 800bac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac8:	bfcc      	ite	gt
 800baca:	2301      	movgt	r3, #1
 800bacc:	2300      	movle	r3, #0
 800bace:	b2d9      	uxtb	r1, r3
 800bad0:	4b6c      	ldr	r3, [pc, #432]	; (800bc84 <wall_set+0x268>)
 800bad2:	7adb      	ldrb	r3, [r3, #11]
 800bad4:	3303      	adds	r3, #3
 800bad6:	425a      	negs	r2, r3
 800bad8:	f003 0303 	and.w	r3, r3, #3
 800badc:	f002 0203 	and.w	r2, r2, #3
 800bae0:	bf58      	it	pl
 800bae2:	4253      	negpl	r3, r2
 800bae4:	460a      	mov	r2, r1
 800bae6:	f107 0108 	add.w	r1, r7, #8
 800baea:	440b      	add	r3, r1
 800baec:	f803 2c04 	strb.w	r2, [r3, #-4]

	  //各方角の壁に壁の有無を代入
	  Wall[Pos.NextX][Pos.NextY].north = wall_dir[0];
 800baf0:	7939      	ldrb	r1, [r7, #4]
 800baf2:	4b64      	ldr	r3, [pc, #400]	; (800bc84 <wall_set+0x268>)
 800baf4:	7a1b      	ldrb	r3, [r3, #8]
 800baf6:	461a      	mov	r2, r3
 800baf8:	4b62      	ldr	r3, [pc, #392]	; (800bc84 <wall_set+0x268>)
 800bafa:	7a5b      	ldrb	r3, [r3, #9]
 800bafc:	461c      	mov	r4, r3
 800bafe:	460b      	mov	r3, r1
 800bb00:	f003 0303 	and.w	r3, r3, #3
 800bb04:	b2d8      	uxtb	r0, r3
 800bb06:	4962      	ldr	r1, [pc, #392]	; (800bc90 <wall_set+0x274>)
 800bb08:	4613      	mov	r3, r2
 800bb0a:	00db      	lsls	r3, r3, #3
 800bb0c:	4413      	add	r3, r2
 800bb0e:	191a      	adds	r2, r3, r4
 800bb10:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb14:	f360 0301 	bfi	r3, r0, #0, #2
 800bb18:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].east = wall_dir[1];
 800bb1c:	7979      	ldrb	r1, [r7, #5]
 800bb1e:	4b59      	ldr	r3, [pc, #356]	; (800bc84 <wall_set+0x268>)
 800bb20:	7a1b      	ldrb	r3, [r3, #8]
 800bb22:	461a      	mov	r2, r3
 800bb24:	4b57      	ldr	r3, [pc, #348]	; (800bc84 <wall_set+0x268>)
 800bb26:	7a5b      	ldrb	r3, [r3, #9]
 800bb28:	461c      	mov	r4, r3
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	f003 0303 	and.w	r3, r3, #3
 800bb30:	b2d8      	uxtb	r0, r3
 800bb32:	4957      	ldr	r1, [pc, #348]	; (800bc90 <wall_set+0x274>)
 800bb34:	4613      	mov	r3, r2
 800bb36:	00db      	lsls	r3, r3, #3
 800bb38:	4413      	add	r3, r2
 800bb3a:	191a      	adds	r2, r3, r4
 800bb3c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb40:	f360 0383 	bfi	r3, r0, #2, #2
 800bb44:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].south = wall_dir[2];
 800bb48:	79b9      	ldrb	r1, [r7, #6]
 800bb4a:	4b4e      	ldr	r3, [pc, #312]	; (800bc84 <wall_set+0x268>)
 800bb4c:	7a1b      	ldrb	r3, [r3, #8]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	4b4c      	ldr	r3, [pc, #304]	; (800bc84 <wall_set+0x268>)
 800bb52:	7a5b      	ldrb	r3, [r3, #9]
 800bb54:	461c      	mov	r4, r3
 800bb56:	460b      	mov	r3, r1
 800bb58:	f003 0303 	and.w	r3, r3, #3
 800bb5c:	b2d8      	uxtb	r0, r3
 800bb5e:	494c      	ldr	r1, [pc, #304]	; (800bc90 <wall_set+0x274>)
 800bb60:	4613      	mov	r3, r2
 800bb62:	00db      	lsls	r3, r3, #3
 800bb64:	4413      	add	r3, r2
 800bb66:	191a      	adds	r2, r3, r4
 800bb68:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb6c:	f360 1305 	bfi	r3, r0, #4, #2
 800bb70:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  Wall[Pos.NextX][Pos.NextY].west = wall_dir[3];
 800bb74:	79f9      	ldrb	r1, [r7, #7]
 800bb76:	4b43      	ldr	r3, [pc, #268]	; (800bc84 <wall_set+0x268>)
 800bb78:	7a1b      	ldrb	r3, [r3, #8]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	4b41      	ldr	r3, [pc, #260]	; (800bc84 <wall_set+0x268>)
 800bb7e:	7a5b      	ldrb	r3, [r3, #9]
 800bb80:	461c      	mov	r4, r3
 800bb82:	460b      	mov	r3, r1
 800bb84:	f003 0303 	and.w	r3, r3, #3
 800bb88:	b2d8      	uxtb	r0, r3
 800bb8a:	4941      	ldr	r1, [pc, #260]	; (800bc90 <wall_set+0x274>)
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	00db      	lsls	r3, r3, #3
 800bb90:	4413      	add	r3, r2
 800bb92:	191a      	adds	r2, r3, r4
 800bb94:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bb98:	f360 1387 	bfi	r3, r0, #6, #2
 800bb9c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  //端の座標でなければ反対の壁も記入
	  //uint32_t address;
	  if(Pos.NextY < (NUMBER_OF_SQUARES-1) )
 800bba0:	4b38      	ldr	r3, [pc, #224]	; (800bc84 <wall_set+0x268>)
 800bba2:	7a5b      	ldrb	r3, [r3, #9]
 800bba4:	2b07      	cmp	r3, #7
 800bba6:	d815      	bhi.n	800bbd4 <wall_set+0x1b8>
	  {
		  Wall[Pos.NextX][Pos.NextY+1].south = wall_dir[0];//北端でなければ
 800bba8:	7939      	ldrb	r1, [r7, #4]
 800bbaa:	4b36      	ldr	r3, [pc, #216]	; (800bc84 <wall_set+0x268>)
 800bbac:	7a1b      	ldrb	r3, [r3, #8]
 800bbae:	461c      	mov	r4, r3
 800bbb0:	4b34      	ldr	r3, [pc, #208]	; (800bc84 <wall_set+0x268>)
 800bbb2:	7a5b      	ldrb	r3, [r3, #9]
 800bbb4:	1c5a      	adds	r2, r3, #1
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	f003 0303 	and.w	r3, r3, #3
 800bbbc:	b2d8      	uxtb	r0, r3
 800bbbe:	4934      	ldr	r1, [pc, #208]	; (800bc90 <wall_set+0x274>)
 800bbc0:	4623      	mov	r3, r4
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	4423      	add	r3, r4
 800bbc6:	441a      	add	r2, r3
 800bbc8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bbcc:	f360 1305 	bfi	r3, r0, #4, #2
 800bbd0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		  //address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY+1)*16*(NUMBER_OF_SQUARES) );
		  //FLASH_Write_Word(address+8, Wall[Pos.NextX][Pos.NextY+1].south);
	  }
	  if(Pos.NextX < (NUMBER_OF_SQUARES-1) )
 800bbd4:	4b2b      	ldr	r3, [pc, #172]	; (800bc84 <wall_set+0x268>)
 800bbd6:	7a1b      	ldrb	r3, [r3, #8]
 800bbd8:	2b07      	cmp	r3, #7
 800bbda:	d815      	bhi.n	800bc08 <wall_set+0x1ec>
	  {
		  Wall[Pos.NextX+1][Pos.NextY].west = wall_dir[1];//東端でなければ
 800bbdc:	7979      	ldrb	r1, [r7, #5]
 800bbde:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <wall_set+0x268>)
 800bbe0:	7a1b      	ldrb	r3, [r3, #8]
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	4b27      	ldr	r3, [pc, #156]	; (800bc84 <wall_set+0x268>)
 800bbe6:	7a5b      	ldrb	r3, [r3, #9]
 800bbe8:	461c      	mov	r4, r3
 800bbea:	460b      	mov	r3, r1
 800bbec:	f003 0303 	and.w	r3, r3, #3
 800bbf0:	b2d8      	uxtb	r0, r3
 800bbf2:	4927      	ldr	r1, [pc, #156]	; (800bc90 <wall_set+0x274>)
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	4413      	add	r3, r2
 800bbfa:	191a      	adds	r2, r3, r4
 800bbfc:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bc00:	f360 1387 	bfi	r3, r0, #6, #2
 800bc04:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( (Pos.NextX+1)*16) + ( (Pos.NextY)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+12, Wall[Pos.NextX+1][Pos.NextY].west);
	  }
	  if(Pos.NextY > 0 )
 800bc08:	4b1e      	ldr	r3, [pc, #120]	; (800bc84 <wall_set+0x268>)
 800bc0a:	7a5b      	ldrb	r3, [r3, #9]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d015      	beq.n	800bc3c <wall_set+0x220>
	  {
		  Wall[Pos.NextX][Pos.NextY-1].north = wall_dir[2];//南端でなければ
 800bc10:	79b9      	ldrb	r1, [r7, #6]
 800bc12:	4b1c      	ldr	r3, [pc, #112]	; (800bc84 <wall_set+0x268>)
 800bc14:	7a1b      	ldrb	r3, [r3, #8]
 800bc16:	461c      	mov	r4, r3
 800bc18:	4b1a      	ldr	r3, [pc, #104]	; (800bc84 <wall_set+0x268>)
 800bc1a:	7a5b      	ldrb	r3, [r3, #9]
 800bc1c:	1e5a      	subs	r2, r3, #1
 800bc1e:	460b      	mov	r3, r1
 800bc20:	f003 0303 	and.w	r3, r3, #3
 800bc24:	b2d8      	uxtb	r0, r3
 800bc26:	491a      	ldr	r1, [pc, #104]	; (800bc90 <wall_set+0x274>)
 800bc28:	4623      	mov	r3, r4
 800bc2a:	00db      	lsls	r3, r3, #3
 800bc2c:	4423      	add	r3, r4
 800bc2e:	441a      	add	r2, r3
 800bc30:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bc34:	f360 0301 	bfi	r3, r0, #0, #2
 800bc38:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
//		  address = start_adress_sector1 + ( Pos.NextX*16) + ( (Pos.NextY-1)*16*(NUMBER_OF_SQUARES) );
//		  FLASH_Write_Word(address+0, Wall[Pos.NextX][Pos.NextY-1].north);
	  }
	  if(Pos.NextX > 0 )
 800bc3c:	4b11      	ldr	r3, [pc, #68]	; (800bc84 <wall_set+0x268>)
 800bc3e:	7a1b      	ldrb	r3, [r3, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d015      	beq.n	800bc70 <wall_set+0x254>
	  {
		  Wall[Pos.NextX-1][Pos.NextY].east = wall_dir[3];//西端でなければ
 800bc44:	79f9      	ldrb	r1, [r7, #7]
 800bc46:	4b0f      	ldr	r3, [pc, #60]	; (800bc84 <wall_set+0x268>)
 800bc48:	7a1b      	ldrb	r3, [r3, #8]
 800bc4a:	1e5a      	subs	r2, r3, #1
 800bc4c:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <wall_set+0x268>)
 800bc4e:	7a5b      	ldrb	r3, [r3, #9]
 800bc50:	461c      	mov	r4, r3
 800bc52:	460b      	mov	r3, r1
 800bc54:	f003 0303 	and.w	r3, r3, #3
 800bc58:	b2d8      	uxtb	r0, r3
 800bc5a:	490d      	ldr	r1, [pc, #52]	; (800bc90 <wall_set+0x274>)
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	4413      	add	r3, r2
 800bc62:	191a      	adds	r2, r3, r4
 800bc64:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800bc68:	f360 0383 	bfi	r3, r0, #2, #2
 800bc6c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]


	  //一旦flashお休み。
	  //flashに書き込む
//	  wall_store_running(Pos.X,Pos.Y);
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bc90      	pop	{r4, r7}
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	20000560 	.word	0x20000560
 800bc80:	42340000 	.word	0x42340000
 800bc84:	20000000 	.word	0x20000000
 800bc88:	42b40000 	.word	0x42b40000
 800bc8c:	42c80000 	.word	0x42c80000
 800bc90:	200006e8 	.word	0x200006e8

0800bc94 <init_map>:

void init_map(uint8_t goal_x, uint8_t goal_y)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b087      	sub	sp, #28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	460a      	mov	r2, r1
 800bc9e:	71fb      	strb	r3, [r7, #7]
 800bca0:	4613      	mov	r3, r2
 800bca2:	71bb      	strb	r3, [r7, #6]
//迷路の歩数Mapを初期化する。全体を0xff、引数の座標x,yは0で初期化する

	int i,j;

	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800bca4:	2300      	movs	r3, #0
 800bca6:	617b      	str	r3, [r7, #20]
 800bca8:	e015      	b.n	800bcd6 <init_map+0x42>
	{
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800bcaa:	2300      	movs	r3, #0
 800bcac:	613b      	str	r3, [r7, #16]
 800bcae:	e00c      	b.n	800bcca <init_map+0x36>
		{
			walk_map[i][j] = 255;	//すべて255で埋める
 800bcb0:	4920      	ldr	r1, [pc, #128]	; (800bd34 <init_map+0xa0>)
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	4413      	add	r3, r2
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	22ff      	movs	r2, #255	; 0xff
 800bcc0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(j = 0; j < NUMBER_OF_SQUARES; j++)	//迷路の大きさ分ループ(y座標)
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	613b      	str	r3, [r7, #16]
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	2b08      	cmp	r3, #8
 800bcce:	ddef      	ble.n	800bcb0 <init_map+0x1c>
	for(i = 0; i < NUMBER_OF_SQUARES; i++)		//迷路の大きさ分ループ(x座標)
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	617b      	str	r3, [r7, #20]
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2b08      	cmp	r3, #8
 800bcda:	dde6      	ble.n	800bcaa <init_map+0x16>
		}
	}
	uint8_t n[2] =
	{
			goal_x + goal_edge_num,
 800bcdc:	4b16      	ldr	r3, [pc, #88]	; (800bd38 <init_map+0xa4>)
 800bcde:	781a      	ldrb	r2, [r3, #0]
 800bce0:	79fb      	ldrb	r3, [r7, #7]
 800bce2:	4413      	add	r3, r2
 800bce4:	b2db      	uxtb	r3, r3
	uint8_t n[2] =
 800bce6:	733b      	strb	r3, [r7, #12]
			goal_y + goal_edge_num
 800bce8:	4b13      	ldr	r3, [pc, #76]	; (800bd38 <init_map+0xa4>)
 800bcea:	781a      	ldrb	r2, [r3, #0]
 800bcec:	79bb      	ldrb	r3, [r7, #6]
 800bcee:	4413      	add	r3, r2
 800bcf0:	b2db      	uxtb	r3, r3
	uint8_t n[2] =
 800bcf2:	737b      	strb	r3, [r7, #13]
	};
	for(; goal_x < n[0]; goal_x++)
 800bcf4:	e013      	b.n	800bd1e <init_map+0x8a>
	{
		for(; goal_y < n[1]; goal_y++)
		{
			walk_map[goal_x][goal_y] = 0;
 800bcf6:	79fa      	ldrb	r2, [r7, #7]
 800bcf8:	79b9      	ldrb	r1, [r7, #6]
 800bcfa:	480e      	ldr	r0, [pc, #56]	; (800bd34 <init_map+0xa0>)
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	4413      	add	r3, r2
 800bd02:	440b      	add	r3, r1
 800bd04:	2200      	movs	r2, #0
 800bd06:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for(; goal_y < n[1]; goal_y++)
 800bd0a:	79bb      	ldrb	r3, [r7, #6]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	71bb      	strb	r3, [r7, #6]
 800bd10:	7b7b      	ldrb	r3, [r7, #13]
 800bd12:	79ba      	ldrb	r2, [r7, #6]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d3ee      	bcc.n	800bcf6 <init_map+0x62>
	for(; goal_x < n[0]; goal_x++)
 800bd18:	79fb      	ldrb	r3, [r7, #7]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	71fb      	strb	r3, [r7, #7]
 800bd1e:	7b3b      	ldrb	r3, [r7, #12]
 800bd20:	79fa      	ldrb	r2, [r7, #7]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d3f4      	bcc.n	800bd10 <init_map+0x7c>
		}
	}
	//set_walk_val_goal(x, y,2);			//ゴール座標の歩数を０に設定
}
 800bd26:	bf00      	nop
 800bd28:	371c      	adds	r7, #28
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	20000570 	.word	0x20000570
 800bd38:	2000051c 	.word	0x2000051c

0800bd3c <make_map>:


void make_map(uint8_t x, uint8_t y, int mask)	//歩数マップを作成する
{
 800bd3c:	b590      	push	{r4, r7, lr}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	603a      	str	r2, [r7, #0]
 800bd46:	71fb      	strb	r3, [r7, #7]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	71bb      	strb	r3, [r7, #6]
//maskの値(MASK_SEARCH or MASK_SECOND)によって、
//探索用の歩数Mapを作るか、最短走行の歩数Mapを作るかが切り替わる
	int i,j;
	_Bool change_flag;			//Map作成終了を見極めるためのフラグ

	init_map(x,y);				//Mapを初期化する
 800bd4c:	79ba      	ldrb	r2, [r7, #6]
 800bd4e:	79fb      	ldrb	r3, [r7, #7]
 800bd50:	4611      	mov	r1, r2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff ff9e 	bl	800bc94 <init_map>

	do //(6,9)(7,10)に対して、7,11がおかしい。
	{
		change_flag = false;				//変更がなかった場合にはループを抜ける
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	e0fa      	b.n	800bf58 <make_map+0x21c>
		{
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800bd62:	2300      	movs	r3, #0
 800bd64:	613b      	str	r3, [r7, #16]
 800bd66:	e0f0      	b.n	800bf4a <make_map+0x20e>
			{
				if(walk_map[i][j] == 255)		//255の場合は次へ
 800bd68:	4981      	ldr	r1, [pc, #516]	; (800bf70 <make_map+0x234>)
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	00db      	lsls	r3, r3, #3
 800bd70:	4413      	add	r3, r2
 800bd72:	693a      	ldr	r2, [r7, #16]
 800bd74:	4413      	add	r3, r2
 800bd76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bd7a:	2bff      	cmp	r3, #255	; 0xff
 800bd7c:	f000 80e1 	beq.w	800bf42 <make_map+0x206>
				{
					continue;
				}

				if(j < NUMBER_OF_SQUARES-1)					//範囲チェック
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	2b07      	cmp	r3, #7
 800bd84:	dc34      	bgt.n	800bdf0 <make_map+0xb4>
				{
					if( (Wall[i][j].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 800bd86:	497b      	ldr	r1, [pc, #492]	; (800bf74 <make_map+0x238>)
 800bd88:	697a      	ldr	r2, [r7, #20]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	4413      	add	r3, r2
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	4413      	add	r3, r2
 800bd94:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bd98:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	461a      	mov	r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	4013      	ands	r3, r2
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d123      	bne.n	800bdf0 <make_map+0xb4>
					{
						if(walk_map[i][j+1] == 255)			//まだ値が入っていなければ
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	1c59      	adds	r1, r3, #1
 800bdac:	4870      	ldr	r0, [pc, #448]	; (800bf70 <make_map+0x234>)
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	00db      	lsls	r3, r3, #3
 800bdb4:	4413      	add	r3, r2
 800bdb6:	440b      	add	r3, r1
 800bdb8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800bdbc:	2bff      	cmp	r3, #255	; 0xff
 800bdbe:	d117      	bne.n	800bdf0 <make_map+0xb4>
						{
							walk_map[i][j+1] = walk_map[i][j] + 1;	//値を代入
 800bdc0:	496b      	ldr	r1, [pc, #428]	; (800bf70 <make_map+0x234>)
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	00db      	lsls	r3, r3, #3
 800bdc8:	4413      	add	r3, r2
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	4413      	add	r3, r2
 800bdce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bdd2:	693a      	ldr	r2, [r7, #16]
 800bdd4:	1c51      	adds	r1, r2, #1
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	b29c      	uxth	r4, r3
 800bdda:	4865      	ldr	r0, [pc, #404]	; (800bf70 <make_map+0x234>)
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	4613      	mov	r3, r2
 800bde0:	00db      	lsls	r3, r3, #3
 800bde2:	4413      	add	r3, r2
 800bde4:	440b      	add	r3, r1
 800bde6:	4622      	mov	r2, r4
 800bde8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800bdec:	2301      	movs	r3, #1
 800bdee:	73fb      	strb	r3, [r7, #15]
						}
					}
				}

				if(i < NUMBER_OF_SQUARES-1)					//範囲チェック
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	2b07      	cmp	r3, #7
 800bdf4:	dc34      	bgt.n	800be60 <make_map+0x124>
				{
					if( (Wall[i][j].east & mask) == NOWALL)		//壁がなければ
 800bdf6:	495f      	ldr	r1, [pc, #380]	; (800bf74 <make_map+0x238>)
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	4413      	add	r3, r2
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	4413      	add	r3, r2
 800be04:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800be08:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	4013      	ands	r3, r2
 800be14:	2b00      	cmp	r3, #0
 800be16:	d123      	bne.n	800be60 <make_map+0x124>
					{
						if(walk_map[i+1][j] == 255)			//値が入っていなければ
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	4954      	ldr	r1, [pc, #336]	; (800bf70 <make_map+0x234>)
 800be1e:	4613      	mov	r3, r2
 800be20:	00db      	lsls	r3, r3, #3
 800be22:	4413      	add	r3, r2
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	4413      	add	r3, r2
 800be28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800be2c:	2bff      	cmp	r3, #255	; 0xff
 800be2e:	d117      	bne.n	800be60 <make_map+0x124>
						{
							walk_map[i+1][j] = walk_map[i][j] + 1;	//値を代入
 800be30:	494f      	ldr	r1, [pc, #316]	; (800bf70 <make_map+0x234>)
 800be32:	697a      	ldr	r2, [r7, #20]
 800be34:	4613      	mov	r3, r2
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	4413      	add	r3, r2
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	4413      	add	r3, r2
 800be3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	3201      	adds	r2, #1
 800be46:	3301      	adds	r3, #1
 800be48:	b298      	uxth	r0, r3
 800be4a:	4949      	ldr	r1, [pc, #292]	; (800bf70 <make_map+0x234>)
 800be4c:	4613      	mov	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	4413      	add	r3, r2
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	4413      	add	r3, r2
 800be56:	4602      	mov	r2, r0
 800be58:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800be5c:	2301      	movs	r3, #1
 800be5e:	73fb      	strb	r3, [r7, #15]
						}
					}
				}

				if(j > 0)						//範囲チェック
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	dd34      	ble.n	800bed0 <make_map+0x194>
				{
					if( (Wall[i][j].south & mask) == NOWALL)	//壁がなければ
 800be66:	4943      	ldr	r1, [pc, #268]	; (800bf74 <make_map+0x238>)
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	4613      	mov	r3, r2
 800be6c:	00db      	lsls	r3, r3, #3
 800be6e:	4413      	add	r3, r2
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	4413      	add	r3, r2
 800be74:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800be78:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	461a      	mov	r2, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	4013      	ands	r3, r2
 800be84:	2b00      	cmp	r3, #0
 800be86:	d123      	bne.n	800bed0 <make_map+0x194>
					{
						if(walk_map[i][j-1] == 255)			//値が入っていなければ
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	1e59      	subs	r1, r3, #1
 800be8c:	4838      	ldr	r0, [pc, #224]	; (800bf70 <make_map+0x234>)
 800be8e:	697a      	ldr	r2, [r7, #20]
 800be90:	4613      	mov	r3, r2
 800be92:	00db      	lsls	r3, r3, #3
 800be94:	4413      	add	r3, r2
 800be96:	440b      	add	r3, r1
 800be98:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800be9c:	2bff      	cmp	r3, #255	; 0xff
 800be9e:	d117      	bne.n	800bed0 <make_map+0x194>
						{
							walk_map[i][j-1] = walk_map[i][j] + 1;	//値を代入
 800bea0:	4933      	ldr	r1, [pc, #204]	; (800bf70 <make_map+0x234>)
 800bea2:	697a      	ldr	r2, [r7, #20]
 800bea4:	4613      	mov	r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	4413      	add	r3, r2
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	4413      	add	r3, r2
 800beae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	1e51      	subs	r1, r2, #1
 800beb6:	3301      	adds	r3, #1
 800beb8:	b29c      	uxth	r4, r3
 800beba:	482d      	ldr	r0, [pc, #180]	; (800bf70 <make_map+0x234>)
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	4613      	mov	r3, r2
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	4413      	add	r3, r2
 800bec4:	440b      	add	r3, r1
 800bec6:	4622      	mov	r2, r4
 800bec8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800becc:	2301      	movs	r3, #1
 800bece:	73fb      	strb	r3, [r7, #15]
						}
					}
				}

				if(i > 0)						//範囲チェック
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	dd36      	ble.n	800bf44 <make_map+0x208>
				{
					if( (Wall[i][j].west & mask) == NOWALL)		//壁がなければ
 800bed6:	4927      	ldr	r1, [pc, #156]	; (800bf74 <make_map+0x238>)
 800bed8:	697a      	ldr	r2, [r7, #20]
 800beda:	4613      	mov	r3, r2
 800bedc:	00db      	lsls	r3, r3, #3
 800bede:	4413      	add	r3, r2
 800bee0:	693a      	ldr	r2, [r7, #16]
 800bee2:	4413      	add	r3, r2
 800bee4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bee8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800beec:	b2db      	uxtb	r3, r3
 800beee:	461a      	mov	r2, r3
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	4013      	ands	r3, r2
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d125      	bne.n	800bf44 <make_map+0x208>
					{
						if(walk_map[i-1][j] == 255)			//値が入っていなければ
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	1e5a      	subs	r2, r3, #1
 800befc:	491c      	ldr	r1, [pc, #112]	; (800bf70 <make_map+0x234>)
 800befe:	4613      	mov	r3, r2
 800bf00:	00db      	lsls	r3, r3, #3
 800bf02:	4413      	add	r3, r2
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	4413      	add	r3, r2
 800bf08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bf0c:	2bff      	cmp	r3, #255	; 0xff
 800bf0e:	d119      	bne.n	800bf44 <make_map+0x208>
						{
							walk_map[i-1][j] = walk_map[i][j] + 1;	//値を代入
 800bf10:	4917      	ldr	r1, [pc, #92]	; (800bf70 <make_map+0x234>)
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	4613      	mov	r3, r2
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	4413      	add	r3, r2
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	3a01      	subs	r2, #1
 800bf26:	3301      	adds	r3, #1
 800bf28:	b298      	uxth	r0, r3
 800bf2a:	4911      	ldr	r1, [pc, #68]	; (800bf70 <make_map+0x234>)
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	00db      	lsls	r3, r3, #3
 800bf30:	4413      	add	r3, r2
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	4413      	add	r3, r2
 800bf36:	4602      	mov	r2, r0
 800bf38:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							change_flag = true;		//値が更新されたことを示す
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	73fb      	strb	r3, [r7, #15]
 800bf40:	e000      	b.n	800bf44 <make_map+0x208>
					continue;
 800bf42:	bf00      	nop
			for(j = 0; j < NUMBER_OF_SQUARES; j++)		//迷路の大きさ分ループ(y座標)
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	3301      	adds	r3, #1
 800bf48:	613b      	str	r3, [r7, #16]
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2b08      	cmp	r3, #8
 800bf4e:	f77f af0b 	ble.w	800bd68 <make_map+0x2c>
		for(i = 0; i < NUMBER_OF_SQUARES; i++)			//迷路の大きさ分ループ(x座標)
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	3301      	adds	r3, #1
 800bf56:	617b      	str	r3, [r7, #20]
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	2b08      	cmp	r3, #8
 800bf5c:	f77f af01 	ble.w	800bd62 <make_map+0x26>

			}

		}

	}while(change_flag == true);	//全体を作り終わるまで待つ
 800bf60:	7bfb      	ldrb	r3, [r7, #15]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f47f aef8 	bne.w	800bd58 <make_map+0x1c>

}
 800bf68:	bf00      	nop
 800bf6a:	371c      	adds	r7, #28
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd90      	pop	{r4, r7, pc}
 800bf70:	20000570 	.word	0x20000570
 800bf74:	200006e8 	.word	0x200006e8

0800bf78 <map_print>:
//		GoalAreaFlag = (Wall[ X_GOAL_LESSER+i][Y_GOAL_LESSER].west == UNKNOWN) ? 0 : 1;
//	}

}
void map_print()
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
	int i,j;
	for(j = NUMBER_OF_SQUARES-1; 0 <= j  ; j--)
 800bf7e:	2308      	movs	r3, #8
 800bf80:	603b      	str	r3, [r7, #0]
 800bf82:	e01b      	b.n	800bfbc <map_print+0x44>
	{
		for(i = 0; i < NUMBER_OF_SQUARES ; i++)
 800bf84:	2300      	movs	r3, #0
 800bf86:	607b      	str	r3, [r7, #4]
 800bf88:	e00f      	b.n	800bfaa <map_print+0x32>
		{
			printf("%d ",walk_map[i][j]);
 800bf8a:	4910      	ldr	r1, [pc, #64]	; (800bfcc <map_print+0x54>)
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	00db      	lsls	r3, r3, #3
 800bf92:	4413      	add	r3, r2
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	4413      	add	r3, r2
 800bf98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	480c      	ldr	r0, [pc, #48]	; (800bfd0 <map_print+0x58>)
 800bfa0:	f00a fea4 	bl	8016cec <iprintf>
		for(i = 0; i < NUMBER_OF_SQUARES ; i++)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	607b      	str	r3, [r7, #4]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b08      	cmp	r3, #8
 800bfae:	ddec      	ble.n	800bf8a <map_print+0x12>
//			if(j == NUMBER_OF_SQUARES)
//			{
//				printf("\r\n");
//			}
		}
		printf("\r\n");
 800bfb0:	4808      	ldr	r0, [pc, #32]	; (800bfd4 <map_print+0x5c>)
 800bfb2:	f00a ff0f 	bl	8016dd4 <puts>
	for(j = NUMBER_OF_SQUARES-1; 0 <= j  ; j--)
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	603b      	str	r3, [r7, #0]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dae0      	bge.n	800bf84 <map_print+0xc>
	}
}
 800bfc2:	bf00      	nop
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	20000570 	.word	0x20000570
 800bfd0:	0801b0bc 	.word	0x0801b0bc
 800bfd4:	0801b0c0 	.word	0x0801b0c0

0800bfd8 <wall_ram_print>:
	flash_store_init();

}
//壁データの表示
//北から時計回り
void wall_ram_print(){
 800bfd8:	b5b0      	push	{r4, r5, r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af02      	add	r7, sp, #8

	//迷路
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800bfde:	2308      	movs	r3, #8
 800bfe0:	607b      	str	r3, [r7, #4]
 800bfe2:	e048      	b.n	800c076 <wall_ram_print+0x9e>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	603b      	str	r3, [r7, #0]
 800bfe8:	e03c      	b.n	800c064 <wall_ram_print+0x8c>
			//メモリの読み出し
			//北東南西の順に表示
			//北東南西 北東南西 ...
			//4回毎にスペース
		    printf("%d%d%d%d ",Wall[i][j].north, Wall[i][j].east, Wall[i][j].south, Wall[i][j].west);
 800bfea:	4929      	ldr	r1, [pc, #164]	; (800c090 <wall_ram_print+0xb8>)
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	4613      	mov	r3, r2
 800bff0:	00db      	lsls	r3, r3, #3
 800bff2:	4413      	add	r3, r2
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	4413      	add	r3, r2
 800bff8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800bffc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c000:	b2db      	uxtb	r3, r3
 800c002:	4618      	mov	r0, r3
 800c004:	4922      	ldr	r1, [pc, #136]	; (800c090 <wall_ram_print+0xb8>)
 800c006:	683a      	ldr	r2, [r7, #0]
 800c008:	4613      	mov	r3, r2
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	4413      	add	r3, r2
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	4413      	add	r3, r2
 800c012:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c016:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	461c      	mov	r4, r3
 800c01e:	491c      	ldr	r1, [pc, #112]	; (800c090 <wall_ram_print+0xb8>)
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	4613      	mov	r3, r2
 800c024:	00db      	lsls	r3, r3, #3
 800c026:	4413      	add	r3, r2
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	4413      	add	r3, r2
 800c02c:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c030:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c034:	b2db      	uxtb	r3, r3
 800c036:	461d      	mov	r5, r3
 800c038:	4915      	ldr	r1, [pc, #84]	; (800c090 <wall_ram_print+0xb8>)
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	4613      	mov	r3, r2
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	4413      	add	r3, r2
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	4413      	add	r3, r2
 800c046:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c04a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	462b      	mov	r3, r5
 800c054:	4622      	mov	r2, r4
 800c056:	4601      	mov	r1, r0
 800c058:	480e      	ldr	r0, [pc, #56]	; (800c094 <wall_ram_print+0xbc>)
 800c05a:	f00a fe47 	bl	8016cec <iprintf>
		for(int i=0; i < NUMBER_OF_SQUARES; i++){
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	3301      	adds	r3, #1
 800c062:	603b      	str	r3, [r7, #0]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	2b08      	cmp	r3, #8
 800c068:	ddbf      	ble.n	800bfea <wall_ram_print+0x12>

		}
		printf("\r\n");
 800c06a:	480b      	ldr	r0, [pc, #44]	; (800c098 <wall_ram_print+0xc0>)
 800c06c:	f00a feb2 	bl	8016dd4 <puts>
	for(int j=NUMBER_OF_SQUARES-1; j >= 0 ; j--){
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3b01      	subs	r3, #1
 800c074:	607b      	str	r3, [r7, #4]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dab3      	bge.n	800bfe4 <wall_ram_print+0xc>
	}

	printf("\r\n");
 800c07c:	4806      	ldr	r0, [pc, #24]	; (800c098 <wall_ram_print+0xc0>)
 800c07e:	f00a fea9 	bl	8016dd4 <puts>
	printf("\r\n");
 800c082:	4805      	ldr	r0, [pc, #20]	; (800c098 <wall_ram_print+0xc0>)
 800c084:	f00a fea6 	bl	8016dd4 <puts>
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bdb0      	pop	{r4, r5, r7, pc}
 800c090:	200006e8 	.word	0x200006e8
 800c094:	0801b0d4 	.word	0x0801b0d4
 800c098:	0801b0c0 	.word	0x0801b0c0

0800c09c <flash_copy_to_ram>:
//	}

}

void flash_copy_to_ram()
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b088      	sub	sp, #32
 800c0a0:	af00      	add	r7, sp, #0
	uint32_t address=start_adress_sector1;
 800c0a2:	4b42      	ldr	r3, [pc, #264]	; (800c1ac <flash_copy_to_ram+0x110>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	61fb      	str	r3, [r7, #28]

	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	61bb      	str	r3, [r7, #24]
 800c0ac:	e077      	b.n	800c19e <flash_copy_to_ram+0x102>
	{
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	617b      	str	r3, [r7, #20]
 800c0b2:	e06e      	b.n	800c192 <flash_copy_to_ram+0xf6>
			{
				uint32_t wall_data[4]={0};
 800c0b4:	1d3b      	adds	r3, r7, #4
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	601a      	str	r2, [r3, #0]
 800c0ba:	605a      	str	r2, [r3, #4]
 800c0bc:	609a      	str	r2, [r3, #8]
 800c0be:	60da      	str	r2, [r3, #12]
				FLASH_Read_Word(address+0, &wall_data[0]);
 800c0c0:	1d3b      	adds	r3, r7, #4
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	69f8      	ldr	r0, [r7, #28]
 800c0c6:	f003 fc65 	bl	800f994 <FLASH_Read_Word>
				FLASH_Read_Word(address+4, &wall_data[1]);
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	1d1a      	adds	r2, r3, #4
 800c0ce:	1d3b      	adds	r3, r7, #4
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	f003 fc5d 	bl	800f994 <FLASH_Read_Word>
				FLASH_Read_Word(address+8, &wall_data[2]);
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	f103 0208 	add.w	r2, r3, #8
 800c0e0:	1d3b      	adds	r3, r7, #4
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	f003 fc54 	bl	800f994 <FLASH_Read_Word>
				FLASH_Read_Word(address+12, &wall_data[3]);
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	f103 020c 	add.w	r2, r3, #12
 800c0f2:	1d3b      	adds	r3, r7, #4
 800c0f4:	330c      	adds	r3, #12
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	f003 fc4b 	bl	800f994 <FLASH_Read_Word>
				Wall[i][j].north = wall_data[0];
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f003 0303 	and.w	r3, r3, #3
 800c104:	b2d8      	uxtb	r0, r3
 800c106:	492a      	ldr	r1, [pc, #168]	; (800c1b0 <flash_copy_to_ram+0x114>)
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	4613      	mov	r3, r2
 800c10c:	00db      	lsls	r3, r3, #3
 800c10e:	4413      	add	r3, r2
 800c110:	69ba      	ldr	r2, [r7, #24]
 800c112:	441a      	add	r2, r3
 800c114:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c118:	f360 0301 	bfi	r3, r0, #0, #2
 800c11c:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].east = wall_data[1];
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	f003 0303 	and.w	r3, r3, #3
 800c126:	b2d8      	uxtb	r0, r3
 800c128:	4921      	ldr	r1, [pc, #132]	; (800c1b0 <flash_copy_to_ram+0x114>)
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	4613      	mov	r3, r2
 800c12e:	00db      	lsls	r3, r3, #3
 800c130:	4413      	add	r3, r2
 800c132:	69ba      	ldr	r2, [r7, #24]
 800c134:	441a      	add	r2, r3
 800c136:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c13a:	f360 0383 	bfi	r3, r0, #2, #2
 800c13e:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].south = wall_data[2];
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f003 0303 	and.w	r3, r3, #3
 800c148:	b2d8      	uxtb	r0, r3
 800c14a:	4919      	ldr	r1, [pc, #100]	; (800c1b0 <flash_copy_to_ram+0x114>)
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	4613      	mov	r3, r2
 800c150:	00db      	lsls	r3, r3, #3
 800c152:	4413      	add	r3, r2
 800c154:	69ba      	ldr	r2, [r7, #24]
 800c156:	441a      	add	r2, r3
 800c158:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c15c:	f360 1305 	bfi	r3, r0, #4, #2
 800c160:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				Wall[i][j].west = wall_data[3];
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	f003 0303 	and.w	r3, r3, #3
 800c16a:	b2d8      	uxtb	r0, r3
 800c16c:	4910      	ldr	r1, [pc, #64]	; (800c1b0 <flash_copy_to_ram+0x114>)
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	4613      	mov	r3, r2
 800c172:	00db      	lsls	r3, r3, #3
 800c174:	4413      	add	r3, r2
 800c176:	69ba      	ldr	r2, [r7, #24]
 800c178:	441a      	add	r2, r3
 800c17a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c17e:	f360 1387 	bfi	r3, r0, #6, #2
 800c182:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
				address += 16;
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	3310      	adds	r3, #16
 800c18a:	61fb      	str	r3, [r7, #28]
			for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	3301      	adds	r3, #1
 800c190:	617b      	str	r3, [r7, #20]
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	2b08      	cmp	r3, #8
 800c196:	dd8d      	ble.n	800c0b4 <flash_copy_to_ram+0x18>
	for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	3301      	adds	r3, #1
 800c19c:	61bb      	str	r3, [r7, #24]
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	2b08      	cmp	r3, #8
 800c1a2:	dd84      	ble.n	800c0ae <flash_copy_to_ram+0x12>
			}
	}

}
 800c1a4:	bf00      	nop
 800c1a6:	3720      	adds	r7, #32
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	0801b338 	.word	0x0801b338
 800c1b0:	200006e8 	.word	0x200006e8

0800c1b4 <setNotExploredArea>:
	}while(flag);

}

int setNotExploredArea(uint8_t *target_x,uint8_t *target_y, uint16_t *walk_val)
{
 800c1b4:	b590      	push	{r4, r7, lr}
 800c1b6:	b0a5      	sub	sp, #148	; 0x94
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
	int not_explored_area_number=0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	_Bool not_explored_area[NUMBER_OF_SQUARES][NUMBER_OF_SQUARES]={0};
 800c1c6:	f107 0310 	add.w	r3, r7, #16
 800c1ca:	2251      	movs	r2, #81	; 0x51
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f009 ff45 	bl	801605e <memset>
	for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c1da:	e163      	b.n	800c4a4 <setNotExploredArea+0x2f0>
	{
		for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c1e2:	e155      	b.n	800c490 <setNotExploredArea+0x2dc>
		{
			//三つ壁があるところは除外する

			if(Wall[i][j].north == UNKNOWN)
 800c1e4:	49bd      	ldr	r1, [pc, #756]	; (800c4dc <setNotExploredArea+0x328>)
 800c1e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	00db      	lsls	r3, r3, #3
 800c1ee:	4413      	add	r3, r2
 800c1f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c1f4:	4413      	add	r3, r2
 800c1f6:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c1fa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b02      	cmp	r3, #2
 800c202:	d144      	bne.n	800c28e <setNotExploredArea+0xda>
			{
				//三つとも壁があるとき以外は見に行く必要がある
				if(!(Wall[i][j].east == WALL && Wall[i][j].south == WALL && Wall[i][j].west == WALL) )
 800c204:	49b5      	ldr	r1, [pc, #724]	; (800c4dc <setNotExploredArea+0x328>)
 800c206:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c20a:	4613      	mov	r3, r2
 800c20c:	00db      	lsls	r3, r3, #3
 800c20e:	4413      	add	r3, r2
 800c210:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c214:	4413      	add	r3, r2
 800c216:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c21a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b01      	cmp	r3, #1
 800c222:	d120      	bne.n	800c266 <setNotExploredArea+0xb2>
 800c224:	49ad      	ldr	r1, [pc, #692]	; (800c4dc <setNotExploredArea+0x328>)
 800c226:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c22a:	4613      	mov	r3, r2
 800c22c:	00db      	lsls	r3, r3, #3
 800c22e:	4413      	add	r3, r2
 800c230:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c234:	4413      	add	r3, r2
 800c236:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c23a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2b01      	cmp	r3, #1
 800c242:	d110      	bne.n	800c266 <setNotExploredArea+0xb2>
 800c244:	49a5      	ldr	r1, [pc, #660]	; (800c4dc <setNotExploredArea+0x328>)
 800c246:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c24a:	4613      	mov	r3, r2
 800c24c:	00db      	lsls	r3, r3, #3
 800c24e:	4413      	add	r3, r2
 800c250:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c254:	4413      	add	r3, r2
 800c256:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c25a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	2b01      	cmp	r3, #1
 800c262:	f000 8110 	beq.w	800c486 <setNotExploredArea+0x2d2>
				{
					not_explored_area_number ++;
 800c266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c26a:	3301      	adds	r3, #1
 800c26c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					not_explored_area[i][j] = 1;
 800c270:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c274:	4613      	mov	r3, r2
 800c276:	00db      	lsls	r3, r3, #3
 800c278:	4413      	add	r3, r2
 800c27a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800c27e:	441a      	add	r2, r3
 800c280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c284:	4413      	add	r3, r2
 800c286:	3b80      	subs	r3, #128	; 0x80
 800c288:	2201      	movs	r2, #1
 800c28a:	701a      	strb	r2, [r3, #0]
 800c28c:	e0fb      	b.n	800c486 <setNotExploredArea+0x2d2>
				}
			}
			else if(Wall[i][j].east == UNKNOWN)
 800c28e:	4993      	ldr	r1, [pc, #588]	; (800c4dc <setNotExploredArea+0x328>)
 800c290:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c294:	4613      	mov	r3, r2
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	4413      	add	r3, r2
 800c29a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c29e:	4413      	add	r3, r2
 800c2a0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c2a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d144      	bne.n	800c338 <setNotExploredArea+0x184>
			{
				if(!(Wall[i][j].south == WALL && Wall[i][j].west == WALL && Wall[i][j].north == WALL) )
 800c2ae:	498b      	ldr	r1, [pc, #556]	; (800c4dc <setNotExploredArea+0x328>)
 800c2b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	00db      	lsls	r3, r3, #3
 800c2b8:	4413      	add	r3, r2
 800c2ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c2be:	4413      	add	r3, r2
 800c2c0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c2c4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d120      	bne.n	800c310 <setNotExploredArea+0x15c>
 800c2ce:	4983      	ldr	r1, [pc, #524]	; (800c4dc <setNotExploredArea+0x328>)
 800c2d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	4413      	add	r3, r2
 800c2da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c2de:	4413      	add	r3, r2
 800c2e0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c2e4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d110      	bne.n	800c310 <setNotExploredArea+0x15c>
 800c2ee:	497b      	ldr	r1, [pc, #492]	; (800c4dc <setNotExploredArea+0x328>)
 800c2f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c2fe:	4413      	add	r3, r2
 800c300:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c304:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	f000 80bb 	beq.w	800c486 <setNotExploredArea+0x2d2>
				{
					not_explored_area_number ++;
 800c310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c314:	3301      	adds	r3, #1
 800c316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					not_explored_area[i][j] = 1;
 800c31a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c31e:	4613      	mov	r3, r2
 800c320:	00db      	lsls	r3, r3, #3
 800c322:	4413      	add	r3, r2
 800c324:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800c328:	441a      	add	r2, r3
 800c32a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c32e:	4413      	add	r3, r2
 800c330:	3b80      	subs	r3, #128	; 0x80
 800c332:	2201      	movs	r2, #1
 800c334:	701a      	strb	r2, [r3, #0]
 800c336:	e0a6      	b.n	800c486 <setNotExploredArea+0x2d2>
				}
			}
			else if(Wall[i][j].south == UNKNOWN)
 800c338:	4968      	ldr	r1, [pc, #416]	; (800c4dc <setNotExploredArea+0x328>)
 800c33a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c33e:	4613      	mov	r3, r2
 800c340:	00db      	lsls	r3, r3, #3
 800c342:	4413      	add	r3, r2
 800c344:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c348:	4413      	add	r3, r2
 800c34a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c34e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c352:	b2db      	uxtb	r3, r3
 800c354:	2b02      	cmp	r3, #2
 800c356:	d143      	bne.n	800c3e0 <setNotExploredArea+0x22c>
			{
				if(!(Wall[i][j].west == WALL && Wall[i][j].north == WALL && Wall[i][j].east == WALL) )
 800c358:	4960      	ldr	r1, [pc, #384]	; (800c4dc <setNotExploredArea+0x328>)
 800c35a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c35e:	4613      	mov	r3, r2
 800c360:	00db      	lsls	r3, r3, #3
 800c362:	4413      	add	r3, r2
 800c364:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c368:	4413      	add	r3, r2
 800c36a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c36e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b01      	cmp	r3, #1
 800c376:	d11f      	bne.n	800c3b8 <setNotExploredArea+0x204>
 800c378:	4958      	ldr	r1, [pc, #352]	; (800c4dc <setNotExploredArea+0x328>)
 800c37a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c37e:	4613      	mov	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	4413      	add	r3, r2
 800c384:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c388:	4413      	add	r3, r2
 800c38a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c38e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b01      	cmp	r3, #1
 800c396:	d10f      	bne.n	800c3b8 <setNotExploredArea+0x204>
 800c398:	4950      	ldr	r1, [pc, #320]	; (800c4dc <setNotExploredArea+0x328>)
 800c39a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c39e:	4613      	mov	r3, r2
 800c3a0:	00db      	lsls	r3, r3, #3
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c3a8:	4413      	add	r3, r2
 800c3aa:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c3ae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d066      	beq.n	800c486 <setNotExploredArea+0x2d2>
				{
					not_explored_area_number ++;
 800c3b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3bc:	3301      	adds	r3, #1
 800c3be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					not_explored_area[i][j] = 1;
 800c3c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	4413      	add	r3, r2
 800c3cc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800c3d0:	441a      	add	r2, r3
 800c3d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3d6:	4413      	add	r3, r2
 800c3d8:	3b80      	subs	r3, #128	; 0x80
 800c3da:	2201      	movs	r2, #1
 800c3dc:	701a      	strb	r2, [r3, #0]
 800c3de:	e052      	b.n	800c486 <setNotExploredArea+0x2d2>
				}
			}
			else if(Wall[i][j].west == UNKNOWN)
 800c3e0:	493e      	ldr	r1, [pc, #248]	; (800c4dc <setNotExploredArea+0x328>)
 800c3e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c3f6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d142      	bne.n	800c486 <setNotExploredArea+0x2d2>
			{
				if(!(Wall[i][j].north == WALL && Wall[i][j].east == WALL && Wall[i][j].south == WALL) )
 800c400:	4936      	ldr	r1, [pc, #216]	; (800c4dc <setNotExploredArea+0x328>)
 800c402:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c406:	4613      	mov	r3, r2
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	4413      	add	r3, r2
 800c40c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c410:	4413      	add	r3, r2
 800c412:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c416:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d11f      	bne.n	800c460 <setNotExploredArea+0x2ac>
 800c420:	492e      	ldr	r1, [pc, #184]	; (800c4dc <setNotExploredArea+0x328>)
 800c422:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c426:	4613      	mov	r3, r2
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	4413      	add	r3, r2
 800c42c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c430:	4413      	add	r3, r2
 800c432:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c436:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d10f      	bne.n	800c460 <setNotExploredArea+0x2ac>
 800c440:	4926      	ldr	r1, [pc, #152]	; (800c4dc <setNotExploredArea+0x328>)
 800c442:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c446:	4613      	mov	r3, r2
 800c448:	00db      	lsls	r3, r3, #3
 800c44a:	4413      	add	r3, r2
 800c44c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c450:	4413      	add	r3, r2
 800c452:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c456:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d012      	beq.n	800c486 <setNotExploredArea+0x2d2>
				{
					not_explored_area_number ++;
 800c460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c464:	3301      	adds	r3, #1
 800c466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					not_explored_area[i][j] = 1;
 800c46a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c46e:	4613      	mov	r3, r2
 800c470:	00db      	lsls	r3, r3, #3
 800c472:	4413      	add	r3, r2
 800c474:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800c478:	441a      	add	r2, r3
 800c47a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c47e:	4413      	add	r3, r2
 800c480:	3b80      	subs	r3, #128	; 0x80
 800c482:	2201      	movs	r2, #1
 800c484:	701a      	strb	r2, [r3, #0]
		for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c48a:	3301      	adds	r3, #1
 800c48c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c494:	2b08      	cmp	r3, #8
 800c496:	f77f aea5 	ble.w	800c1e4 <setNotExploredArea+0x30>
	for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c49a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c49e:	3301      	adds	r3, #1
 800c4a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c4a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c4a8:	2b08      	cmp	r3, #8
 800c4aa:	f77f ae97 	ble.w	800c1dc <setNotExploredArea+0x28>
			}
		}
	}
#endif
	//行くべき座標に1が入った
	int num = not_explored_area_number;
 800c4ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4b2:	66bb      	str	r3, [r7, #104]	; 0x68
	ChangeLED(7);
 800c4b4:	2007      	movs	r0, #7
 800c4b6:	f003 fccf 	bl	800fe58 <ChangeLED>
	HAL_Delay(1000);
 800c4ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c4be:	f004 fda7 	bl	8011010 <HAL_Delay>
	//行くべき座標のxyを取得
	//ここまで合ってる
	ChangeLED(2);
 800c4c2:	2002      	movs	r0, #2
 800c4c4:	f003 fcc8 	bl	800fe58 <ChangeLED>

	int n = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4d2:	e02e      	b.n	800c532 <setNotExploredArea+0x37e>
		{
			for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4d8:	e025      	b.n	800c526 <setNotExploredArea+0x372>
 800c4da:	bf00      	nop
 800c4dc:	200006e8 	.word	0x200006e8
			{
				if(not_explored_area[i][j] == 1)
 800c4e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	00db      	lsls	r3, r3, #3
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800c4ec:	441a      	add	r2, r3
 800c4ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4f0:	4413      	add	r3, r2
 800c4f2:	3b80      	subs	r3, #128	; 0x80
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d012      	beq.n	800c520 <setNotExploredArea+0x36c>
					*target_x = (uint8_t)i;
					*target_y = (uint8_t)j;
					target_x += sizeof(*target_x);
					target_y += sizeof(*target_y);
#else
					target_x[n] = (uint8_t)i;
 800c4fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	4413      	add	r3, r2
 800c502:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c504:	b2d2      	uxtb	r2, r2
 800c506:	701a      	strb	r2, [r3, #0]
					target_y[n] = (uint8_t)j;
 800c508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	4413      	add	r3, r2
 800c510:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c512:	b2d2      	uxtb	r2, r2
 800c514:	701a      	strb	r2, [r3, #0]
#endif
					n++;
 800c516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c51a:	3301      	adds	r3, #1
 800c51c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			for(int j=0; j < NUMBER_OF_SQUARES; j++)
 800c520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c522:	3301      	adds	r3, #1
 800c524:	67bb      	str	r3, [r7, #120]	; 0x78
 800c526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c528:	2b08      	cmp	r3, #8
 800c52a:	ddd9      	ble.n	800c4e0 <setNotExploredArea+0x32c>
		for(int i=0; i < NUMBER_OF_SQUARES; i++)
 800c52c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c52e:	3301      	adds	r3, #1
 800c530:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c532:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c534:	2b08      	cmp	r3, #8
 800c536:	ddcd      	ble.n	800c4d4 <setNotExploredArea+0x320>
		}
		target_x = pTx;
		target_y = pTy;
	}
#endif
	ChangeLED(3);
 800c538:	2003      	movs	r0, #3
 800c53a:	f003 fc8d 	bl	800fe58 <ChangeLED>
	if(n == 0)
 800c53e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c542:	2b00      	cmp	r3, #0
 800c544:	d109      	bne.n	800c55a <setNotExploredArea+0x3a6>
	{
		Pos.TargetX = 0;
 800c546:	4b64      	ldr	r3, [pc, #400]	; (800c6d8 <setNotExploredArea+0x524>)
 800c548:	2200      	movs	r2, #0
 800c54a:	709a      	strb	r2, [r3, #2]
		Pos.TargetY = 0;
 800c54c:	4b62      	ldr	r3, [pc, #392]	; (800c6d8 <setNotExploredArea+0x524>)
 800c54e:	2200      	movs	r2, #0
 800c550:	70da      	strb	r2, [r3, #3]
		ChangeLED(4);
 800c552:	2004      	movs	r0, #4
 800c554:	f003 fc80 	bl	800fe58 <ChangeLED>
 800c558:	e0b7      	b.n	800c6ca <setNotExploredArea+0x516>
	else
	{
		//目標座標を設定したときの現在座標の重みが小さい順に、walk_valをソートしたい
		//walk_valをソートするときは一緒にxyをソートする
		//ソートの準備
		goal_edge_num = one;
 800c55a:	4b60      	ldr	r3, [pc, #384]	; (800c6dc <setNotExploredArea+0x528>)
 800c55c:	2201      	movs	r2, #1
 800c55e:	701a      	strb	r2, [r3, #0]

		ChangeLED(5);
 800c560:	2005      	movs	r0, #5
 800c562:	f003 fc79 	bl	800fe58 <ChangeLED>
		//HAL_Delay(15000);
		for(int i = 0; i < n; i ++)
 800c566:	2300      	movs	r3, #0
 800c568:	677b      	str	r3, [r7, #116]	; 0x74
 800c56a:	e036      	b.n	800c5da <setNotExploredArea+0x426>
			walk_val += sizeof(*walk_val);
			target_x += sizeof(*target_x);
			target_y += sizeof(*target_y);
#else
			//HAL_Delay(1000);
			ChangeLED(i%8);
 800c56c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c56e:	425a      	negs	r2, r3
 800c570:	f003 0307 	and.w	r3, r3, #7
 800c574:	f002 0207 	and.w	r2, r2, #7
 800c578:	bf58      	it	pl
 800c57a:	4253      	negpl	r3, r2
 800c57c:	4618      	mov	r0, r3
 800c57e:	f003 fc6b 	bl	800fe58 <ChangeLED>
			init_map(target_x[i], target_y[i]);
 800c582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	4413      	add	r3, r2
 800c588:	7818      	ldrb	r0, [r3, #0]
 800c58a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	4413      	add	r3, r2
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	4619      	mov	r1, r3
 800c594:	f7ff fb7e 	bl	800bc94 <init_map>
			make_map(target_x[i], target_y[i],0x01);
 800c598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	4413      	add	r3, r2
 800c59e:	7818      	ldrb	r0, [r3, #0]
 800c5a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	f7ff fbc6 	bl	800bd3c <make_map>
			walk_val[i] = walk_map[Pos.X][Pos.Y];
 800c5b0:	4b49      	ldr	r3, [pc, #292]	; (800c6d8 <setNotExploredArea+0x524>)
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	4b48      	ldr	r3, [pc, #288]	; (800c6d8 <setNotExploredArea+0x524>)
 800c5b8:	785b      	ldrb	r3, [r3, #1]
 800c5ba:	461c      	mov	r4, r3
 800c5bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	441a      	add	r2, r3
 800c5c4:	4946      	ldr	r1, [pc, #280]	; (800c6e0 <setNotExploredArea+0x52c>)
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	00db      	lsls	r3, r3, #3
 800c5ca:	4403      	add	r3, r0
 800c5cc:	4423      	add	r3, r4
 800c5ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c5d2:	8013      	strh	r3, [r2, #0]
		for(int i = 0; i < n; i ++)
 800c5d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	677b      	str	r3, [r7, #116]	; 0x74
 800c5da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c5dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	dbc3      	blt.n	800c56c <setNotExploredArea+0x3b8>

//		walk_val = pWv;
//		target_x = pTx;
//		target_y = pTy;

		ChangeLED(4);
 800c5e4:	2004      	movs	r0, #4
 800c5e6:	f003 fc37 	bl	800fe58 <ChangeLED>
//		pTx = target_x;
//		uint8_t *pTy;
//		pTy = target_y;
//		uint16_t *pWv;
//		pWv = walk_val;
		uint16_t tmp_w = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		uint8_t tmp_x = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
		uint8_t tmp_y = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
		for(int i=0; i < n-1; i++)
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	673b      	str	r3, [r7, #112]	; 0x70
 800c600:	e05a      	b.n	800c6b8 <setNotExploredArea+0x504>
		{
			for(int j=i+1; j < n; j++)
 800c602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c604:	3301      	adds	r3, #1
 800c606:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c608:	e04e      	b.n	800c6a8 <setNotExploredArea+0x4f4>
			{
				if( walk_val[i]  > walk_val[j] )
 800c60a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c60c:	005b      	lsls	r3, r3, #1
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	4413      	add	r3, r2
 800c612:	881a      	ldrh	r2, [r3, #0]
 800c614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	6879      	ldr	r1, [r7, #4]
 800c61a:	440b      	add	r3, r1
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d93f      	bls.n	800c6a2 <setNotExploredArea+0x4ee>
				{
					tmp_w = walk_val[i];
 800c622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	4413      	add	r3, r2
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
					walk_val[i] = walk_val[j];
 800c630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	441a      	add	r2, r3
 800c638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c63a:	005b      	lsls	r3, r3, #1
 800c63c:	6879      	ldr	r1, [r7, #4]
 800c63e:	440b      	add	r3, r1
 800c640:	8812      	ldrh	r2, [r2, #0]
 800c642:	801a      	strh	r2, [r3, #0]
					walk_val[j] = tmp_w;
 800c644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c646:	005b      	lsls	r3, r3, #1
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	4413      	add	r3, r2
 800c64c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800c650:	801a      	strh	r2, [r3, #0]

					tmp_x = target_x[i];
 800c652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	4413      	add	r3, r2
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
					target_x[i] = target_x[j];
 800c65e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	441a      	add	r2, r3
 800c664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c666:	68f9      	ldr	r1, [r7, #12]
 800c668:	440b      	add	r3, r1
 800c66a:	7812      	ldrb	r2, [r2, #0]
 800c66c:	701a      	strb	r2, [r3, #0]
					target_x[j] = tmp_x;
 800c66e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	4413      	add	r3, r2
 800c674:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800c678:	701a      	strb	r2, [r3, #0]

					tmp_y = target_y[i];
 800c67a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	4413      	add	r3, r2
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
					target_y[i] = target_y[j];
 800c686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	441a      	add	r2, r3
 800c68c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c68e:	68b9      	ldr	r1, [r7, #8]
 800c690:	440b      	add	r3, r1
 800c692:	7812      	ldrb	r2, [r2, #0]
 800c694:	701a      	strb	r2, [r3, #0]
					target_y[j] = tmp_y;
 800c696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	4413      	add	r3, r2
 800c69c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800c6a0:	701a      	strb	r2, [r3, #0]
			for(int j=i+1; j < n; j++)
 800c6a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c6a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c6aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	dbab      	blt.n	800c60a <setNotExploredArea+0x456>
		for(int i=0; i < n-1; i++)
 800c6b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	673b      	str	r3, [r7, #112]	; 0x70
 800c6b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	db9e      	blt.n	800c602 <setNotExploredArea+0x44e>
			//最小歩数じゃなくて、小さい順にソート
			//座標と歩数を一緒に並べ替える
			//ポインタでxyを渡し、渡し先で代入


		ChangeLED(6);
 800c6c4:	2006      	movs	r0, #6
 800c6c6:	f003 fbc7 	bl	800fe58 <ChangeLED>
	}
	return n;
 800c6ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
	//一番近い未探索マスのxyが出る

}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3794      	adds	r7, #148	; 0x94
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd90      	pop	{r4, r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20000000 	.word	0x20000000
 800c6dc:	2000051c 	.word	0x2000051c
 800c6e0:	20000570 	.word	0x20000570

0800c6e4 <InitExplore>:
#include "Interrupt.h"
#include "Debug.h"

#include <main.h>
void InitExplore()
{
 800c6e4:	b590      	push	{r4, r7, lr}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	2004      	movs	r0, #4
 800c6ee:	f004 f94b 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	2005      	movs	r0, #5
 800c6f6:	f004 f947 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	2002      	movs	r0, #2
 800c6fe:	f004 f943 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c702:	2100      	movs	r1, #0
 800c704:	2003      	movs	r0, #3
 800c706:	f004 f93f 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800c70a:	2100      	movs	r1, #0
 800c70c:	2001      	movs	r0, #1
 800c70e:	f004 f93b 	bl	8010988 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800c712:	2100      	movs	r1, #0
 800c714:	2000      	movs	r0, #0
 800c716:	f004 f937 	bl	8010988 <PIDChangeFlag>


	Load_Gain();
 800c71a:	f003 fe79 	bl	8010410 <Load_Gain>
	uint8_t imu_check;
	imu_check = IMU_init();
 800c71e:	f003 fac3 	bl	800fca8 <IMU_init>
 800c722:	4603      	mov	r3, r0
 800c724:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c726:	79fb      	ldrb	r3, [r7, #7]
 800c728:	4619      	mov	r1, r3
 800c72a:	4840      	ldr	r0, [pc, #256]	; (800c82c <InitExplore+0x148>)
 800c72c:	f00a fade 	bl	8016cec <iprintf>
#if 1 //IMUから値が来なくなる現象の対策
	imu_check =IMU_init();
 800c730:	f003 faba 	bl	800fca8 <IMU_init>
 800c734:	4603      	mov	r3, r0
 800c736:	71fb      	strb	r3, [r7, #7]
	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c738:	79fb      	ldrb	r3, [r7, #7]
 800c73a:	4619      	mov	r1, r3
 800c73c:	483b      	ldr	r0, [pc, #236]	; (800c82c <InitExplore+0x148>)
 800c73e:	f00a fad5 	bl	8016cec <iprintf>
#endif
	HAL_Delay(100);
 800c742:	2064      	movs	r0, #100	; 0x64
 800c744:	f004 fc64 	bl	8011010 <HAL_Delay>

	ZGyro = ReadIMU(0x37, 0x38);
 800c748:	2138      	movs	r1, #56	; 0x38
 800c74a:	2037      	movs	r0, #55	; 0x37
 800c74c:	f003 fa1e 	bl	800fb8c <ReadIMU>
 800c750:	eef0 7a40 	vmov.f32	s15, s0
 800c754:	4b36      	ldr	r3, [pc, #216]	; (800c830 <InitExplore+0x14c>)
 800c756:	edc3 7a00 	vstr	s15, [r3]
	printf("gyro : %f\r\n",ZGyro);
 800c75a:	4b35      	ldr	r3, [pc, #212]	; (800c830 <InitExplore+0x14c>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fb fe2a 	bl	80083b8 <__aeabi_f2d>
 800c764:	4603      	mov	r3, r0
 800c766:	460c      	mov	r4, r1
 800c768:	461a      	mov	r2, r3
 800c76a:	4623      	mov	r3, r4
 800c76c:	4831      	ldr	r0, [pc, #196]	; (800c834 <InitExplore+0x150>)
 800c76e:	f00a fabd 	bl	8016cec <iprintf>
//	  }

  }
#endif
	//ペリフェラルの動作開始
	Motor_PWM_Start();
 800c772:	f003 fc2f 	bl	800ffd4 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800c776:	f003 fb43 	bl	800fe00 <EncoderStart>
	EmitterON();
 800c77a:	f003 fb51 	bl	800fe20 <EmitterON>
	ADCStart();
 800c77e:	f003 f861 	bl	800f844 <ADCStart>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800c782:	f247 512f 	movw	r1, #29999	; 0x752f
 800c786:	482c      	ldr	r0, [pc, #176]	; (800c838 <InitExplore+0x154>)
 800c788:	f003 fcbc 	bl	8010104 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800c78c:	f247 512f 	movw	r1, #29999	; 0x752f
 800c790:	482a      	ldr	r0, [pc, #168]	; (800c83c <InitExplore+0x158>)
 800c792:	f003 fcb7 	bl	8010104 <InitPulse>
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800c796:	482a      	ldr	r0, [pc, #168]	; (800c840 <InitExplore+0x15c>)
 800c798:	f007 fb21 	bl	8013dde <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800c79c:	4829      	ldr	r0, [pc, #164]	; (800c844 <InitExplore+0x160>)
 800c79e:	f007 fb1e 	bl	8013dde <HAL_TIM_Base_Start_IT>
		printf("生値%f, 角速度%f ang/s, %f rad/s\r\n",ZGyro,ZGyro/16.4f, AngularV);
	}

#endif

	TargetVelocity[BODY] = 0;
 800c7a2:	4b29      	ldr	r3, [pc, #164]	; (800c848 <InitExplore+0x164>)
 800c7a4:	f04f 0200 	mov.w	r2, #0
 800c7a8:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800c7aa:	4b28      	ldr	r3, [pc, #160]	; (800c84c <InitExplore+0x168>)
 800c7ac:	f04f 0200 	mov.w	r2, #0
 800c7b0:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800c7b2:	4b27      	ldr	r3, [pc, #156]	; (800c850 <InitExplore+0x16c>)
 800c7b4:	f04f 0200 	mov.w	r2, #0
 800c7b8:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800c7ba:	4b26      	ldr	r3, [pc, #152]	; (800c854 <InitExplore+0x170>)
 800c7bc:	f04f 0200 	mov.w	r2, #0
 800c7c0:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800c7c2:	4b25      	ldr	r3, [pc, #148]	; (800c858 <InitExplore+0x174>)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800c7c8:	4b23      	ldr	r3, [pc, #140]	; (800c858 <InitExplore+0x174>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800c7ce:	4b22      	ldr	r3, [pc, #136]	; (800c858 <InitExplore+0x174>)
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800c7d4:	f003 fa92 	bl	800fcfc <IMU_Calib>
	TargetPhoto[SR] = Photo[SR];
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
#else


	TargetPhoto[SL] = Photo[SL];//439.600006;//THRESHOLD_SL;
 800c7d8:	4b20      	ldr	r3, [pc, #128]	; (800c85c <InitExplore+0x178>)
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	4a20      	ldr	r2, [pc, #128]	; (800c860 <InitExplore+0x17c>)
 800c7de:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];//294.299988;//THRESHOLD_SR;
 800c7e0:	4b1e      	ldr	r3, [pc, #120]	; (800c85c <InitExplore+0x178>)
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	4a1e      	ldr	r2, [pc, #120]	; (800c860 <InitExplore+0x17c>)
 800c7e6:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800c7e8:	4b1d      	ldr	r3, [pc, #116]	; (800c860 <InitExplore+0x17c>)
 800c7ea:	ed93 7a02 	vldr	s14, [r3, #8]
 800c7ee:	4b1c      	ldr	r3, [pc, #112]	; (800c860 <InitExplore+0x17c>)
 800c7f0:	edd3 7a01 	vldr	s15, [r3, #4]
 800c7f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7f8:	4b1a      	ldr	r3, [pc, #104]	; (800c864 <InitExplore+0x180>)
 800c7fa:	edc3 7a00 	vstr	s15, [r3]

#endif
	PIDReset(L_VELO_PID);
 800c7fe:	2004      	movs	r0, #4
 800c800:	f004 f8d8 	bl	80109b4 <PIDReset>
	PIDReset(R_VELO_PID);
 800c804:	2005      	movs	r0, #5
 800c806:	f004 f8d5 	bl	80109b4 <PIDReset>

	PIDReset(A_VELO_PID);
 800c80a:	2000      	movs	r0, #0
 800c80c:	f004 f8d2 	bl	80109b4 <PIDReset>
	PIDReset(L_WALL_PID);
 800c810:	2002      	movs	r0, #2
 800c812:	f004 f8cf 	bl	80109b4 <PIDReset>
	PIDReset(R_WALL_PID);
 800c816:	2003      	movs	r0, #3
 800c818:	f004 f8cc 	bl	80109b4 <PIDReset>
	PIDReset(D_WALL_PID);
 800c81c:	2001      	movs	r0, #1
 800c81e:	f004 f8c9 	bl	80109b4 <PIDReset>

#endif
}
 800c822:	bf00      	nop
 800c824:	370c      	adds	r7, #12
 800c826:	46bd      	mov	sp, r7
 800c828:	bd90      	pop	{r4, r7, pc}
 800c82a:	bf00      	nop
 800c82c:	0801b0e4 	.word	0x0801b0e4
 800c830:	200002d4 	.word	0x200002d4
 800c834:	0801b100 	.word	0x0801b100
 800c838:	40000424 	.word	0x40000424
 800c83c:	40000824 	.word	0x40000824
 800c840:	200009dc 	.word	0x200009dc
 800c844:	20000794 	.word	0x20000794
 800c848:	200004ec 	.word	0x200004ec
 800c84c:	200004fc 	.word	0x200004fc
 800c850:	2000022c 	.word	0x2000022c
 800c854:	20000230 	.word	0x20000230
 800c858:	20000520 	.word	0x20000520
 800c85c:	20000560 	.word	0x20000560
 800c860:	20000620 	.word	0x20000620
 800c864:	20000510 	.word	0x20000510

0800c868 <InitFastest>:

void InitFastest()
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
	Motor_PWM_Start();
 800c86e:	f003 fbb1 	bl	800ffd4 <Motor_PWM_Start>
	EncoderStart(); //戻し忘れないように
 800c872:	f003 fac5 	bl	800fe00 <EncoderStart>
	EmitterON();
 800c876:	f003 fad3 	bl	800fe20 <EmitterON>
	ADCStart();
 800c87a:	f002 ffe3 	bl	800f844 <ADCStart>

	uint8_t imu_check;
	imu_check =IMU_init();
 800c87e:	f003 fa13 	bl	800fca8 <IMU_init>
 800c882:	4603      	mov	r3, r0
 800c884:	71fb      	strb	r3, [r7, #7]

	printf("imu_check 1ならOK: %d\r\n",imu_check);
 800c886:	79fb      	ldrb	r3, [r7, #7]
 800c888:	4619      	mov	r1, r3
 800c88a:	4838      	ldr	r0, [pc, #224]	; (800c96c <InitFastest+0x104>)
 800c88c:	f00a fa2e 	bl	8016cec <iprintf>
	//IMU_DMA_Start();
	//CS_RESET;

	//PID制御準備
	//PIDInit();
	PIDChangeFlag(L_VELO_PID, 0);
 800c890:	2100      	movs	r1, #0
 800c892:	2004      	movs	r0, #4
 800c894:	f004 f878 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 0);
 800c898:	2100      	movs	r1, #0
 800c89a:	2005      	movs	r0, #5
 800c89c:	f004 f874 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	2002      	movs	r0, #2
 800c8a4:	f004 f870 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c8a8:	2100      	movs	r1, #0
 800c8aa:	2003      	movs	r0, #3
 800c8ac:	f004 f86c 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	2001      	movs	r0, #1
 800c8b4:	f004 f868 	bl	8010988 <PIDChangeFlag>
	//PIDChangeFlag(B_VELO, 0);
	PIDChangeFlag(A_VELO_PID, 0);
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	2000      	movs	r0, #0
 800c8bc:	f004 f864 	bl	8010988 <PIDChangeFlag>


	Load_Gain();
 800c8c0:	f003 fda6 	bl	8010410 <Load_Gain>
	InitPulse( (int*)(&(TIM3->CNT)),  INITIAL_PULSE);
 800c8c4:	f247 512f 	movw	r1, #29999	; 0x752f
 800c8c8:	4829      	ldr	r0, [pc, #164]	; (800c970 <InitFastest+0x108>)
 800c8ca:	f003 fc1b 	bl	8010104 <InitPulse>
	InitPulse( (int*)(&(TIM4->CNT)),  INITIAL_PULSE);
 800c8ce:	f247 512f 	movw	r1, #29999	; 0x752f
 800c8d2:	4828      	ldr	r0, [pc, #160]	; (800c974 <InitFastest+0x10c>)
 800c8d4:	f003 fc16 	bl	8010104 <InitPulse>
//	  }

  }
#endif
	//割り込みを有効化
	HAL_TIM_Base_Start_IT(&htim1);
 800c8d8:	4827      	ldr	r0, [pc, #156]	; (800c978 <InitFastest+0x110>)
 800c8da:	f007 fa80 	bl	8013dde <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800c8de:	4827      	ldr	r0, [pc, #156]	; (800c97c <InitFastest+0x114>)
 800c8e0:	f007 fa7d 	bl	8013dde <HAL_TIM_Base_Start_IT>


	//ここまででハードの準備はできた。
	//ここからはソフト的な準備

	TargetVelocity[BODY] = 0;
 800c8e4:	4b26      	ldr	r3, [pc, #152]	; (800c980 <InitFastest+0x118>)
 800c8e6:	f04f 0200 	mov.w	r2, #0
 800c8ea:	609a      	str	r2, [r3, #8]
	TargetAngularV = 0;
 800c8ec:	4b25      	ldr	r3, [pc, #148]	; (800c984 <InitFastest+0x11c>)
 800c8ee:	f04f 0200 	mov.w	r2, #0
 800c8f2:	601a      	str	r2, [r3, #0]
	Acceleration = 0;
 800c8f4:	4b24      	ldr	r3, [pc, #144]	; (800c988 <InitFastest+0x120>)
 800c8f6:	f04f 0200 	mov.w	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]
	AngularAcceleration = 0;
 800c8fc:	4b23      	ldr	r3, [pc, #140]	; (800c98c <InitFastest+0x124>)
 800c8fe:	f04f 0200 	mov.w	r2, #0
 800c902:	601a      	str	r2, [r3, #0]
	TotalPulse[LEFT] = 0;
 800c904:	4b22      	ldr	r3, [pc, #136]	; (800c990 <InitFastest+0x128>)
 800c906:	2200      	movs	r2, #0
 800c908:	601a      	str	r2, [r3, #0]
	TotalPulse[RIGHT] = 0;
 800c90a:	4b21      	ldr	r3, [pc, #132]	; (800c990 <InitFastest+0x128>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	605a      	str	r2, [r3, #4]
	TotalPulse[BODY] = 0;
 800c910:	4b1f      	ldr	r3, [pc, #124]	; (800c990 <InitFastest+0x128>)
 800c912:	2200      	movs	r2, #0
 800c914:	609a      	str	r2, [r3, #8]

	//両壁の値を取得。それぞれの値と差分を制御目標に反映。
	IMU_Calib();	//これにHAL_Delayがあることで割り込みがずれることがあるのではないか。
 800c916:	f003 f9f1 	bl	800fcfc <IMU_Calib>
	//zg_offset = 0;
	TargetPhoto[SL] = Photo[SL];
 800c91a:	4b1e      	ldr	r3, [pc, #120]	; (800c994 <InitFastest+0x12c>)
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	4a1e      	ldr	r2, [pc, #120]	; (800c998 <InitFastest+0x130>)
 800c920:	6093      	str	r3, [r2, #8]
	TargetPhoto[SR] = Photo[SR];
 800c922:	4b1c      	ldr	r3, [pc, #112]	; (800c994 <InitFastest+0x12c>)
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	4a1c      	ldr	r2, [pc, #112]	; (800c998 <InitFastest+0x130>)
 800c928:	6053      	str	r3, [r2, #4]
	PhotoDiff = TargetPhoto[SL] - TargetPhoto[SR];
 800c92a:	4b1b      	ldr	r3, [pc, #108]	; (800c998 <InitFastest+0x130>)
 800c92c:	ed93 7a02 	vldr	s14, [r3, #8]
 800c930:	4b19      	ldr	r3, [pc, #100]	; (800c998 <InitFastest+0x130>)
 800c932:	edd3 7a01 	vldr	s15, [r3, #4]
 800c936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c93a:	4b18      	ldr	r3, [pc, #96]	; (800c99c <InitFastest+0x134>)
 800c93c:	edc3 7a00 	vstr	s15, [r3]

	PIDReset(L_VELO_PID);
 800c940:	2004      	movs	r0, #4
 800c942:	f004 f837 	bl	80109b4 <PIDReset>
	PIDReset(R_VELO_PID);
 800c946:	2005      	movs	r0, #5
 800c948:	f004 f834 	bl	80109b4 <PIDReset>
	PIDReset(A_VELO_PID);
 800c94c:	2000      	movs	r0, #0
 800c94e:	f004 f831 	bl	80109b4 <PIDReset>
	PIDReset(L_WALL_PID);
 800c952:	2002      	movs	r0, #2
 800c954:	f004 f82e 	bl	80109b4 <PIDReset>
	PIDReset(R_WALL_PID);
 800c958:	2003      	movs	r0, #3
 800c95a:	f004 f82b 	bl	80109b4 <PIDReset>
	PIDReset(D_WALL_PID);
 800c95e:	2001      	movs	r0, #1
 800c960:	f004 f828 	bl	80109b4 <PIDReset>


}
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	0801b0e4 	.word	0x0801b0e4
 800c970:	40000424 	.word	0x40000424
 800c974:	40000824 	.word	0x40000824
 800c978:	200009dc 	.word	0x200009dc
 800c97c:	20000794 	.word	0x20000794
 800c980:	200004ec 	.word	0x200004ec
 800c984:	200004fc 	.word	0x200004fc
 800c988:	2000022c 	.word	0x2000022c
 800c98c:	20000230 	.word	0x20000230
 800c990:	20000520 	.word	0x20000520
 800c994:	20000560 	.word	0x20000560
 800c998:	20000620 	.word	0x20000620
 800c99c:	20000510 	.word	0x20000510

0800c9a0 <Debug>:
void Debug()
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
//	while(1)
//	{
//
//	}
#if 1
	InitExplore();
 800c9a6:	f7ff fe9d 	bl	800c6e4 <InitExplore>
	InitPosition();
 800c9aa:	f7fc fa25 	bl	8008df8 <InitPosition>
	wall_init();
 800c9ae:	f7fe ff93 	bl	800b8d8 <wall_init>

	TotalPulse[RIGHT] = 0;
 800c9b2:	4b37      	ldr	r3, [pc, #220]	; (800ca90 <Debug+0xf0>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800c9b8:	4b35      	ldr	r3, [pc, #212]	; (800ca90 <Debug+0xf0>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800c9be:	4b34      	ldr	r3, [pc, #208]	; (800ca90 <Debug+0xf0>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	2004      	movs	r0, #4
 800c9c8:	f003 ffde 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800c9cc:	2101      	movs	r1, #1
 800c9ce:	2005      	movs	r0, #5
 800c9d0:	f003 ffda 	bl	8010988 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800c9d4:	4b2e      	ldr	r3, [pc, #184]	; (800ca90 <Debug+0xf0>)
 800c9d6:	6899      	ldr	r1, [r3, #8]
 800c9d8:	4b2d      	ldr	r3, [pc, #180]	; (800ca90 <Debug+0xf0>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	4b2c      	ldr	r3, [pc, #176]	; (800ca90 <Debug+0xf0>)
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	482c      	ldr	r0, [pc, #176]	; (800ca94 <Debug+0xf4>)
 800c9e2:	f00a f983 	bl	8016cec <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	2001      	movs	r0, #1
 800c9ea:	f003 ffcd 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	2002      	movs	r0, #2
 800c9f2:	f003 ffc9 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	2003      	movs	r0, #3
 800c9fa:	f003 ffc5 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(A_VELO_PID, 1);
 800c9fe:	2101      	movs	r1, #1
 800ca00:	2000      	movs	r0, #0
 800ca02:	f003 ffc1 	bl	8010988 <PIDChangeFlag>
	ExploreVelocity=0;
 800ca06:	4b24      	ldr	r3, [pc, #144]	; (800ca98 <Debug+0xf8>)
 800ca08:	f04f 0200 	mov.w	r2, #0
 800ca0c:	601a      	str	r2, [r3, #0]
	ChangeLED(3);
 800ca0e:	2003      	movs	r0, #3
 800ca10:	f003 fa22 	bl	800fe58 <ChangeLED>
	//HAL_Delay(500);

	//IT_mode = WRITINGFREE;
	IT_mode = EXPLORE;
 800ca14:	4b21      	ldr	r3, [pc, #132]	; (800ca9c <Debug+0xfc>)
 800ca16:	2206      	movs	r2, #6
 800ca18:	601a      	str	r2, [r3, #0]
		printf("%f, %f, %f, %f\r\n", Photo[FL], Photo[FR], Photo[FL] - Photo[FR],Photo[FL] + Photo[FR] );
	}
	PIDChangeFlag(F_WALL_PID, 0);
#endif
#if 1 //直進テスト
	ExploreVelocity = 135;
 800ca1a:	4b1f      	ldr	r3, [pc, #124]	; (800ca98 <Debug+0xf8>)
 800ca1c:	4a20      	ldr	r2, [pc, #128]	; (800caa0 <Debug+0x100>)
 800ca1e:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800ca20:	4b20      	ldr	r3, [pc, #128]	; (800caa4 <Debug+0x104>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	711a      	strb	r2, [r3, #4]
	Accel(61.75,ExploreVelocity);
 800ca26:	4b1c      	ldr	r3, [pc, #112]	; (800ca98 <Debug+0xf8>)
 800ca28:	edd3 7a00 	vldr	s15, [r3]
 800ca2c:	eef0 0a67 	vmov.f32	s1, s15
 800ca30:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800caa8 <Debug+0x108>
 800ca34:	f7fd fb5c 	bl	800a0f0 <Accel>
	for(int i=0; i < 1; i++)
 800ca38:	2300      	movs	r3, #0
 800ca3a:	607b      	str	r3, [r7, #4]
 800ca3c:	e015      	b.n	800ca6a <Debug+0xca>
	{
		Pos.Dir = front;
 800ca3e:	4b19      	ldr	r3, [pc, #100]	; (800caa4 <Debug+0x104>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	711a      	strb	r2, [r3, #4]
		GoStraight(90, ExploreVelocity, AddVelocity);
 800ca44:	4b14      	ldr	r3, [pc, #80]	; (800ca98 <Debug+0xf8>)
 800ca46:	edd3 7a00 	vldr	s15, [r3]
 800ca4a:	4b18      	ldr	r3, [pc, #96]	; (800caac <Debug+0x10c>)
 800ca4c:	ed93 7a00 	vldr	s14, [r3]
 800ca50:	eeb0 1a47 	vmov.f32	s2, s14
 800ca54:	eef0 0a67 	vmov.f32	s1, s15
 800ca58:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800cab0 <Debug+0x110>
 800ca5c:	f7fd ffd4 	bl	800aa08 <GoStraight>
		//Pos.Dir = right;
		SlalomRight();
 800ca60:	f7fc ff7e 	bl	8009960 <SlalomRight>
	for(int i=0; i < 1; i++)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	3301      	adds	r3, #1
 800ca68:	607b      	str	r3, [r7, #4]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	dde6      	ble.n	800ca3e <Debug+0x9e>

	}
	Pos.Dir = front;
 800ca70:	4b0c      	ldr	r3, [pc, #48]	; (800caa4 <Debug+0x104>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	711a      	strb	r2, [r3, #4]
	//Decel(45,0);
	TargetVelocity[BODY] = 0;
 800ca76:	4b0f      	ldr	r3, [pc, #60]	; (800cab4 <Debug+0x114>)
 800ca78:	f04f 0200 	mov.w	r2, #0
 800ca7c:	609a      	str	r2, [r3, #8]
	HAL_Delay(1000);
 800ca7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ca82:	f004 fac5 	bl	8011010 <HAL_Delay>
	while(1)
	{
		printf("SL:%f, SR:%f, FL:%f, FR:%f\r\n",Photo[SL],Photo[SR],Photo[FL],Photo[FR]);
	}
#endif
}
 800ca86:	bf00      	nop
 800ca88:	3708      	adds	r7, #8
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20000520 	.word	0x20000520
 800ca94:	0801b10c 	.word	0x0801b10c
 800ca98:	20000614 	.word	0x20000614
 800ca9c:	200004e0 	.word	0x200004e0
 800caa0:	43070000 	.word	0x43070000
 800caa4:	20000000 	.word	0x20000000
 800caa8:	42770000 	.word	0x42770000
 800caac:	200004f8 	.word	0x200004f8
 800cab0:	42b40000 	.word	0x42b40000
 800cab4:	200004ec 	.word	0x200004ec

0800cab8 <ParameterSetting>:
void ParameterSetting()
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	af00      	add	r7, sp, #0
	Load_Gain();
 800cabc:	f003 fca8 	bl	8010410 <Load_Gain>
	Change_Gain();
 800cac0:	f003 fd62 	bl	8010588 <Change_Gain>

}
 800cac4:	bf00      	nop
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <GainTestRWall>:
	{
		TargetVelocity[BODY] = 300;
	}
}
void GainTestRWall()
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800cacc:	4b18      	ldr	r3, [pc, #96]	; (800cb30 <GainTestRWall+0x68>)
 800cace:	2206      	movs	r2, #6
 800cad0:	601a      	str	r2, [r3, #0]
	InitExplore();
 800cad2:	f7ff fe07 	bl	800c6e4 <InitExplore>
	InitPosition();
 800cad6:	f7fc f98f 	bl	8008df8 <InitPosition>
	wall_init();
 800cada:	f7fe fefd 	bl	800b8d8 <wall_init>
	TotalPulse[RIGHT] = 0;
 800cade:	4b15      	ldr	r3, [pc, #84]	; (800cb34 <GainTestRWall+0x6c>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cae4:	4b13      	ldr	r3, [pc, #76]	; (800cb34 <GainTestRWall+0x6c>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800caea:	4b12      	ldr	r3, [pc, #72]	; (800cb34 <GainTestRWall+0x6c>)
 800caec:	2200      	movs	r2, #0
 800caee:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800caf0:	2101      	movs	r1, #1
 800caf2:	2004      	movs	r0, #4
 800caf4:	f003 ff48 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800caf8:	2101      	movs	r1, #1
 800cafa:	2005      	movs	r0, #5
 800cafc:	f003 ff44 	bl	8010988 <PIDChangeFlag>
	//PIDChangeFlagStraight(R_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800cb00:	2100      	movs	r1, #0
 800cb02:	2001      	movs	r0, #1
 800cb04:	f003 ff40 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cb08:	2100      	movs	r1, #0
 800cb0a:	2002      	movs	r0, #2
 800cb0c:	f003 ff3c 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 1);
 800cb10:	2101      	movs	r1, #1
 800cb12:	2003      	movs	r0, #3
 800cb14:	f003 ff38 	bl	8010988 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800cb18:	4b07      	ldr	r3, [pc, #28]	; (800cb38 <GainTestRWall+0x70>)
 800cb1a:	f04f 0200 	mov.w	r2, #0
 800cb1e:	601a      	str	r2, [r3, #0]
	ChangeLED(1);
 800cb20:	2001      	movs	r0, #1
 800cb22:	f003 f999 	bl	800fe58 <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800cb26:	4b05      	ldr	r3, [pc, #20]	; (800cb3c <GainTestRWall+0x74>)
 800cb28:	f04f 0200 	mov.w	r2, #0
 800cb2c:	609a      	str	r2, [r3, #8]
 800cb2e:	e7fa      	b.n	800cb26 <GainTestRWall+0x5e>
 800cb30:	200004e0 	.word	0x200004e0
 800cb34:	20000520 	.word	0x20000520
 800cb38:	20000614 	.word	0x20000614
 800cb3c:	200004ec 	.word	0x200004ec

0800cb40 <GainTestDWall>:

	}
}
void GainTestDWall()
{
 800cb40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb44:	b086      	sub	sp, #24
 800cb46:	af06      	add	r7, sp, #24
	IT_mode = EXPLORE;
 800cb48:	4b2c      	ldr	r3, [pc, #176]	; (800cbfc <GainTestDWall+0xbc>)
 800cb4a:	2206      	movs	r2, #6
 800cb4c:	601a      	str	r2, [r3, #0]
	InitExplore();
 800cb4e:	f7ff fdc9 	bl	800c6e4 <InitExplore>
	InitPosition();
 800cb52:	f7fc f951 	bl	8008df8 <InitPosition>
	wall_init();
 800cb56:	f7fe febf 	bl	800b8d8 <wall_init>
	TotalPulse[RIGHT] = 0;
 800cb5a:	4b29      	ldr	r3, [pc, #164]	; (800cc00 <GainTestDWall+0xc0>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cb60:	4b27      	ldr	r3, [pc, #156]	; (800cc00 <GainTestDWall+0xc0>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800cb66:	4b26      	ldr	r3, [pc, #152]	; (800cc00 <GainTestDWall+0xc0>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800cb6c:	2101      	movs	r1, #1
 800cb6e:	2004      	movs	r0, #4
 800cb70:	f003 ff0a 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800cb74:	2101      	movs	r1, #1
 800cb76:	2005      	movs	r0, #5
 800cb78:	f003 ff06 	bl	8010988 <PIDChangeFlag>
	//PIDChangeFlagStraight(D_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 1);
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	2001      	movs	r0, #1
 800cb80:	f003 ff02 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cb84:	2100      	movs	r1, #0
 800cb86:	2002      	movs	r0, #2
 800cb88:	f003 fefe 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	2003      	movs	r0, #3
 800cb90:	f003 fefa 	bl	8010988 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800cb94:	4b1b      	ldr	r3, [pc, #108]	; (800cc04 <GainTestDWall+0xc4>)
 800cb96:	f04f 0200 	mov.w	r2, #0
 800cb9a:	601a      	str	r2, [r3, #0]
	ChangeLED(2);
 800cb9c:	2002      	movs	r0, #2
 800cb9e:	f003 f95b 	bl	800fe58 <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800cba2:	4b19      	ldr	r3, [pc, #100]	; (800cc08 <GainTestDWall+0xc8>)
 800cba4:	f04f 0200 	mov.w	r2, #0
 800cba8:	609a      	str	r2, [r3, #8]
		printf("前左: %f,前右: %f,横左: %f,横右: %f\r\n",Photo[FL],Photo[FR],Photo[SL],Photo[SR]);
 800cbaa:	4b18      	ldr	r3, [pc, #96]	; (800cc0c <GainTestDWall+0xcc>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fb fc02 	bl	80083b8 <__aeabi_f2d>
 800cbb4:	4682      	mov	sl, r0
 800cbb6:	468b      	mov	fp, r1
 800cbb8:	4b14      	ldr	r3, [pc, #80]	; (800cc0c <GainTestDWall+0xcc>)
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7fb fbfb 	bl	80083b8 <__aeabi_f2d>
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	460d      	mov	r5, r1
 800cbc6:	4b11      	ldr	r3, [pc, #68]	; (800cc0c <GainTestDWall+0xcc>)
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fb fbf4 	bl	80083b8 <__aeabi_f2d>
 800cbd0:	4680      	mov	r8, r0
 800cbd2:	4689      	mov	r9, r1
 800cbd4:	4b0d      	ldr	r3, [pc, #52]	; (800cc0c <GainTestDWall+0xcc>)
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fb fbed 	bl	80083b8 <__aeabi_f2d>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbe6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cbea:	e9cd 4500 	strd	r4, r5, [sp]
 800cbee:	4652      	mov	r2, sl
 800cbf0:	465b      	mov	r3, fp
 800cbf2:	4807      	ldr	r0, [pc, #28]	; (800cc10 <GainTestDWall+0xd0>)
 800cbf4:	f00a f87a 	bl	8016cec <iprintf>
		TargetVelocity[BODY] = 0;
 800cbf8:	e7d3      	b.n	800cba2 <GainTestDWall+0x62>
 800cbfa:	bf00      	nop
 800cbfc:	200004e0 	.word	0x200004e0
 800cc00:	20000520 	.word	0x20000520
 800cc04:	20000614 	.word	0x20000614
 800cc08:	200004ec 	.word	0x200004ec
 800cc0c:	20000560 	.word	0x20000560
 800cc10:	0801b140 	.word	0x0801b140

0800cc14 <GainTestAVelo>:
	}
}

void GainTestAVelo()
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	af00      	add	r7, sp, #0
	IT_mode = EXPLORE;
 800cc18:	4b1a      	ldr	r3, [pc, #104]	; (800cc84 <GainTestAVelo+0x70>)
 800cc1a:	2206      	movs	r2, #6
 800cc1c:	601a      	str	r2, [r3, #0]
	InitExplore();
 800cc1e:	f7ff fd61 	bl	800c6e4 <InitExplore>
	InitPosition();
 800cc22:	f7fc f8e9 	bl	8008df8 <InitPosition>
	wall_init();
 800cc26:	f7fe fe57 	bl	800b8d8 <wall_init>
	TotalPulse[RIGHT] = 0;
 800cc2a:	4b17      	ldr	r3, [pc, #92]	; (800cc88 <GainTestAVelo+0x74>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800cc30:	4b15      	ldr	r3, [pc, #84]	; (800cc88 <GainTestAVelo+0x74>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800cc36:	4b14      	ldr	r3, [pc, #80]	; (800cc88 <GainTestAVelo+0x74>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800cc3c:	2101      	movs	r1, #1
 800cc3e:	2004      	movs	r0, #4
 800cc40:	f003 fea2 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800cc44:	2101      	movs	r1, #1
 800cc46:	2005      	movs	r0, #5
 800cc48:	f003 fe9e 	bl	8010988 <PIDChangeFlag>
	//PIDChangeFlagStraight(A_VELO_PID);
	PIDChangeFlag(A_VELO_PID, 1);
 800cc4c:	2101      	movs	r1, #1
 800cc4e:	2000      	movs	r0, #0
 800cc50:	f003 fe9a 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(D_WALL_PID, 0);
 800cc54:	2100      	movs	r1, #0
 800cc56:	2001      	movs	r0, #1
 800cc58:	f003 fe96 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	2002      	movs	r0, #2
 800cc60:	f003 fe92 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800cc64:	2100      	movs	r1, #0
 800cc66:	2003      	movs	r0, #3
 800cc68:	f003 fe8e 	bl	8010988 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800cc6c:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <GainTestAVelo+0x78>)
 800cc6e:	f04f 0200 	mov.w	r2, #0
 800cc72:	601a      	str	r2, [r3, #0]
	ChangeLED(5);
 800cc74:	2005      	movs	r0, #5
 800cc76:	f003 f8ef 	bl	800fe58 <ChangeLED>
	while(1)
	{
		TargetVelocity[BODY] = 0;
 800cc7a:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <GainTestAVelo+0x7c>)
 800cc7c:	f04f 0200 	mov.w	r2, #0
 800cc80:	609a      	str	r2, [r3, #8]
 800cc82:	e7fa      	b.n	800cc7a <GainTestAVelo+0x66>
 800cc84:	200004e0 	.word	0x200004e0
 800cc88:	20000520 	.word	0x20000520
 800cc8c:	20000614 	.word	0x20000614
 800cc90:	200004ec 	.word	0x200004ec

0800cc94 <WritingFree>:
		//printf("%f, %f\r\n", AngularV, Angle);

	}
}
void WritingFree()
{
 800cc94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc98:	b08a      	sub	sp, #40	; 0x28
 800cc9a:	af08      	add	r7, sp, #32
	IT_mode = WRITINGFREE;
 800cc9c:	4b3d      	ldr	r3, [pc, #244]	; (800cd94 <WritingFree+0x100>)
 800cc9e:	2207      	movs	r2, #7
 800cca0:	601a      	str	r2, [r3, #0]

	InitExplore();
 800cca2:	f7ff fd1f 	bl	800c6e4 <InitExplore>

	printf("3\r\n");
 800cca6:	483c      	ldr	r0, [pc, #240]	; (800cd98 <WritingFree+0x104>)
 800cca8:	f00a f894 	bl	8016dd4 <puts>

	InitPosition();
 800ccac:	f7fc f8a4 	bl	8008df8 <InitPosition>

	wall_init();
 800ccb0:	f7fe fe12 	bl	800b8d8 <wall_init>
	printf("4\r\n");
 800ccb4:	4839      	ldr	r0, [pc, #228]	; (800cd9c <WritingFree+0x108>)
 800ccb6:	f00a f88d 	bl	8016dd4 <puts>

	TotalPulse[RIGHT] = 0;
 800ccba:	4b39      	ldr	r3, [pc, #228]	; (800cda0 <WritingFree+0x10c>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800ccc0:	4b37      	ldr	r3, [pc, #220]	; (800cda0 <WritingFree+0x10c>)
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800ccc6:	4b36      	ldr	r3, [pc, #216]	; (800cda0 <WritingFree+0x10c>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800cccc:	2101      	movs	r1, #1
 800ccce:	2004      	movs	r0, #4
 800ccd0:	f003 fe5a 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800ccd4:	2101      	movs	r1, #1
 800ccd6:	2005      	movs	r0, #5
 800ccd8:	f003 fe56 	bl	8010988 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800ccdc:	2100      	movs	r1, #0
 800ccde:	2001      	movs	r0, #1
 800cce0:	f003 fe52 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800cce4:	2100      	movs	r1, #0
 800cce6:	2002      	movs	r0, #2
 800cce8:	f003 fe4e 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ccec:	2100      	movs	r1, #0
 800ccee:	2003      	movs	r0, #3
 800ccf0:	f003 fe4a 	bl	8010988 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);
	ExploreVelocity=0;
 800ccf4:	4b2b      	ldr	r3, [pc, #172]	; (800cda4 <WritingFree+0x110>)
 800ccf6:	f04f 0200 	mov.w	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]
	ChangeLED(7);
 800ccfc:	2007      	movs	r0, #7
 800ccfe:	f003 f8ab 	bl	800fe58 <ChangeLED>


#else

	//目標座標だけ
	Aim();
 800cd02:	f7fe f8d3 	bl	800aeac <Aim>
	//shiftPos();
	while(1)
	{
//		ExploreVelocity=300;
//		GoStraight(9000, ExploreVelocity, 0);
		TargetVelocity[BODY] = 0;
 800cd06:	4b28      	ldr	r3, [pc, #160]	; (800cda8 <WritingFree+0x114>)
 800cd08:	f04f 0200 	mov.w	r2, #0
 800cd0c:	609a      	str	r2, [r3, #8]


		printf("%f, %f, %f, %f, %f\r\n",ZGyro, Photo[FL],Photo[FR],Photo[FL]+Photo[FR],(Photo[FL]+Photo[FR])/2);//壁センサ前のチェック。
 800cd0e:	4b27      	ldr	r3, [pc, #156]	; (800cdac <WritingFree+0x118>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fb fb50 	bl	80083b8 <__aeabi_f2d>
 800cd18:	e9c7 0100 	strd	r0, r1, [r7]
 800cd1c:	4b24      	ldr	r3, [pc, #144]	; (800cdb0 <WritingFree+0x11c>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fb fb49 	bl	80083b8 <__aeabi_f2d>
 800cd26:	4604      	mov	r4, r0
 800cd28:	460d      	mov	r5, r1
 800cd2a:	4b21      	ldr	r3, [pc, #132]	; (800cdb0 <WritingFree+0x11c>)
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fb fb42 	bl	80083b8 <__aeabi_f2d>
 800cd34:	4680      	mov	r8, r0
 800cd36:	4689      	mov	r9, r1
 800cd38:	4b1d      	ldr	r3, [pc, #116]	; (800cdb0 <WritingFree+0x11c>)
 800cd3a:	ed93 7a00 	vldr	s14, [r3]
 800cd3e:	4b1c      	ldr	r3, [pc, #112]	; (800cdb0 <WritingFree+0x11c>)
 800cd40:	edd3 7a03 	vldr	s15, [r3, #12]
 800cd44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd48:	ee17 0a90 	vmov	r0, s15
 800cd4c:	f7fb fb34 	bl	80083b8 <__aeabi_f2d>
 800cd50:	4682      	mov	sl, r0
 800cd52:	468b      	mov	fp, r1
 800cd54:	4b16      	ldr	r3, [pc, #88]	; (800cdb0 <WritingFree+0x11c>)
 800cd56:	ed93 7a00 	vldr	s14, [r3]
 800cd5a:	4b15      	ldr	r3, [pc, #84]	; (800cdb0 <WritingFree+0x11c>)
 800cd5c:	edd3 7a03 	vldr	s15, [r3, #12]
 800cd60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800cd68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cd6c:	ee16 0a90 	vmov	r0, s13
 800cd70:	f7fb fb22 	bl	80083b8 <__aeabi_f2d>
 800cd74:	4602      	mov	r2, r0
 800cd76:	460b      	mov	r3, r1
 800cd78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cd7c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800cd80:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cd84:	e9cd 4500 	strd	r4, r5, [sp]
 800cd88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd8c:	4809      	ldr	r0, [pc, #36]	; (800cdb4 <WritingFree+0x120>)
 800cd8e:	f009 ffad 	bl	8016cec <iprintf>
		TargetVelocity[BODY] = 0;
 800cd92:	e7b8      	b.n	800cd06 <WritingFree+0x72>
 800cd94:	200004e0 	.word	0x200004e0
 800cd98:	0801b170 	.word	0x0801b170
 800cd9c:	0801b174 	.word	0x0801b174
 800cda0:	20000520 	.word	0x20000520
 800cda4:	20000614 	.word	0x20000614
 800cda8:	200004ec 	.word	0x200004ec
 800cdac:	200002d4 	.word	0x200002d4
 800cdb0:	20000560 	.word	0x20000560
 800cdb4:	0801b178 	.word	0x0801b178

0800cdb8 <FastestRun>:
	}
	//探索の場合は迷路とステータスの準備
}

void FastestRun()
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af02      	add	r7, sp, #8
	IT_mode = EXPLORE;
 800cdbe:	4b98      	ldr	r3, [pc, #608]	; (800d020 <FastestRun+0x268>)
 800cdc0:	2206      	movs	r2, #6
 800cdc2:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//諸々の初期化
	HAL_Delay(100);
 800cdc4:	2064      	movs	r0, #100	; 0x64
 800cdc6:	f004 f923 	bl	8011010 <HAL_Delay>
	int8_t mode=1;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	71bb      	strb	r3, [r7, #6]
	  ModeSelect( 1, 2, &mode);
 800cdce:	1dbb      	adds	r3, r7, #6
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	2102      	movs	r1, #2
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	f003 fff1 	bl	8010dbc <ModeSelect>
	  Signal( mode );
 800cdda:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f003 ff74 	bl	8010ccc <Signal>

		HAL_Delay(100);
 800cde4:	2064      	movs	r0, #100	; 0x64
 800cde6:	f004 f913 	bl	8011010 <HAL_Delay>
		  int8_t mode2=1;
 800cdea:	2301      	movs	r3, #1
 800cdec:	717b      	strb	r3, [r7, #5]
		  ModeSelect( 1, 4, &mode2);
 800cdee:	1d7b      	adds	r3, r7, #5
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	2104      	movs	r1, #4
 800cdf4:	2001      	movs	r0, #1
 800cdf6:	f003 ffe1 	bl	8010dbc <ModeSelect>
		  Signal( mode2 );
 800cdfa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f003 ff64 	bl	8010ccc <Signal>

		  PhotoSwitch();
 800ce04:	f003 ffb8 	bl	8010d78 <PhotoSwitch>
	InitFastest();
 800ce08:	f7ff fd2e 	bl	800c868 <InitFastest>
	InitPosition();
 800ce0c:	f7fb fff4 	bl	8008df8 <InitPosition>


	wall_init();
 800ce10:	f7fe fd62 	bl	800b8d8 <wall_init>

	TotalPulse[RIGHT] = 0;
 800ce14:	4b83      	ldr	r3, [pc, #524]	; (800d024 <FastestRun+0x26c>)
 800ce16:	2200      	movs	r2, #0
 800ce18:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800ce1a:	4b82      	ldr	r3, [pc, #520]	; (800d024 <FastestRun+0x26c>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800ce20:	4b80      	ldr	r3, [pc, #512]	; (800d024 <FastestRun+0x26c>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800ce26:	2101      	movs	r1, #1
 800ce28:	2004      	movs	r0, #4
 800ce2a:	f003 fdad 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800ce2e:	2101      	movs	r1, #1
 800ce30:	2005      	movs	r0, #5
 800ce32:	f003 fda9 	bl	8010988 <PIDChangeFlag>
	printf("パルスチェック: BODY %d, LEFT %d, RIGHT %d\r\n",TotalPulse[BODY],TotalPulse[LEFT],TotalPulse[RIGHT]);
 800ce36:	4b7b      	ldr	r3, [pc, #492]	; (800d024 <FastestRun+0x26c>)
 800ce38:	6899      	ldr	r1, [r3, #8]
 800ce3a:	4b7a      	ldr	r3, [pc, #488]	; (800d024 <FastestRun+0x26c>)
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	4b79      	ldr	r3, [pc, #484]	; (800d024 <FastestRun+0x26c>)
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	4879      	ldr	r0, [pc, #484]	; (800d028 <FastestRun+0x270>)
 800ce44:	f009 ff52 	bl	8016cec <iprintf>
	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800ce48:	2100      	movs	r1, #0
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	f003 fd9c 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800ce50:	2100      	movs	r1, #0
 800ce52:	2002      	movs	r0, #2
 800ce54:	f003 fd98 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800ce58:	2100      	movs	r1, #0
 800ce5a:	2003      	movs	r0, #3
 800ce5c:	f003 fd94 	bl	8010988 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	char turn_mode;
	if(mode == 1)
 800ce60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d105      	bne.n	800ce74 <FastestRun+0xbc>
	{
		ExploreVelocity = 400;
 800ce68:	4b70      	ldr	r3, [pc, #448]	; (800d02c <FastestRun+0x274>)
 800ce6a:	4a71      	ldr	r2, [pc, #452]	; (800d030 <FastestRun+0x278>)
 800ce6c:	601a      	str	r2, [r3, #0]
		turn_mode = 'T';
 800ce6e:	2354      	movs	r3, #84	; 0x54
 800ce70:	71fb      	strb	r3, [r7, #7]
 800ce72:	e005      	b.n	800ce80 <FastestRun+0xc8>
	}
	else if(mode == 2)
 800ce74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	d101      	bne.n	800ce80 <FastestRun+0xc8>
	{
		turn_mode = 'S';
 800ce7c:	2353      	movs	r3, #83	; 0x53
 800ce7e:	71fb      	strb	r3, [r7, #7]
	}

	switch(mode2)
 800ce80:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800ce84:	3b01      	subs	r3, #1
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d863      	bhi.n	800cf52 <FastestRun+0x19a>
 800ce8a:	a201      	add	r2, pc, #4	; (adr r2, 800ce90 <FastestRun+0xd8>)
 800ce8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce90:	0800cea1 	.word	0x0800cea1
 800ce94:	0800cecd 	.word	0x0800cecd
 800ce98:	0800cef9 	.word	0x0800cef9
 800ce9c:	0800cf27 	.word	0x0800cf27
	{
	case 1:
		ExploreVelocity=90;
 800cea0:	4b62      	ldr	r3, [pc, #392]	; (800d02c <FastestRun+0x274>)
 800cea2:	4a64      	ldr	r2, [pc, #400]	; (800d034 <FastestRun+0x27c>)
 800cea4:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 7;//9;
 800cea6:	4b64      	ldr	r3, [pc, #400]	; (800d038 <FastestRun+0x280>)
 800cea8:	4a64      	ldr	r2, [pc, #400]	; (800d03c <FastestRun+0x284>)
 800ceaa:	601a      	str	r2, [r3, #0]
		Sla.Fol = 11;//13;
 800ceac:	4b62      	ldr	r3, [pc, #392]	; (800d038 <FastestRun+0x280>)
 800ceae:	4a64      	ldr	r2, [pc, #400]	; (800d040 <FastestRun+0x288>)
 800ceb0:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800ceb2:	4b61      	ldr	r3, [pc, #388]	; (800d038 <FastestRun+0x280>)
 800ceb4:	4a63      	ldr	r2, [pc, #396]	; (800d044 <FastestRun+0x28c>)
 800ceb6:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800ceb8:	4b5f      	ldr	r3, [pc, #380]	; (800d038 <FastestRun+0x280>)
 800ceba:	4a63      	ldr	r2, [pc, #396]	; (800d048 <FastestRun+0x290>)
 800cebc:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800cebe:	4b5e      	ldr	r3, [pc, #376]	; (800d038 <FastestRun+0x280>)
 800cec0:	4a62      	ldr	r2, [pc, #392]	; (800d04c <FastestRun+0x294>)
 800cec2:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800cec4:	4b5c      	ldr	r3, [pc, #368]	; (800d038 <FastestRun+0x280>)
 800cec6:	4a5b      	ldr	r2, [pc, #364]	; (800d034 <FastestRun+0x27c>)
 800cec8:	619a      	str	r2, [r3, #24]
		break;
 800ceca:	e042      	b.n	800cf52 <FastestRun+0x19a>
	case 2:
		//完
		ExploreVelocity=135;
 800cecc:	4b57      	ldr	r3, [pc, #348]	; (800d02c <FastestRun+0x274>)
 800cece:	4a60      	ldr	r2, [pc, #384]	; (800d050 <FastestRun+0x298>)
 800ced0:	601a      	str	r2, [r3, #0]
		Sla.Pre = 5;
 800ced2:	4b59      	ldr	r3, [pc, #356]	; (800d038 <FastestRun+0x280>)
 800ced4:	4a5f      	ldr	r2, [pc, #380]	; (800d054 <FastestRun+0x29c>)
 800ced6:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800ced8:	4b57      	ldr	r3, [pc, #348]	; (800d038 <FastestRun+0x280>)
 800ceda:	4a5e      	ldr	r2, [pc, #376]	; (800d054 <FastestRun+0x29c>)
 800cedc:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.0273;
 800cede:	4b56      	ldr	r3, [pc, #344]	; (800d038 <FastestRun+0x280>)
 800cee0:	4a5d      	ldr	r2, [pc, #372]	; (800d058 <FastestRun+0x2a0>)
 800cee2:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800cee4:	4b54      	ldr	r3, [pc, #336]	; (800d038 <FastestRun+0x280>)
 800cee6:	4a58      	ldr	r2, [pc, #352]	; (800d048 <FastestRun+0x290>)
 800cee8:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800ceea:	4b53      	ldr	r3, [pc, #332]	; (800d038 <FastestRun+0x280>)
 800ceec:	4a57      	ldr	r2, [pc, #348]	; (800d04c <FastestRun+0x294>)
 800ceee:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800cef0:	4b51      	ldr	r3, [pc, #324]	; (800d038 <FastestRun+0x280>)
 800cef2:	4a50      	ldr	r2, [pc, #320]	; (800d034 <FastestRun+0x27c>)
 800cef4:	619a      	str	r2, [r3, #24]
		break;
 800cef6:	e02c      	b.n	800cf52 <FastestRun+0x19a>
//		Sla.Fol = 10;
//		Sla.Alpha = 0.04478;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		ExploreVelocity=180;
 800cef8:	4b4c      	ldr	r3, [pc, #304]	; (800d02c <FastestRun+0x274>)
 800cefa:	4a58      	ldr	r2, [pc, #352]	; (800d05c <FastestRun+0x2a4>)
 800cefc:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800cefe:	4b4e      	ldr	r3, [pc, #312]	; (800d038 <FastestRun+0x280>)
 800cf00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cf04:	601a      	str	r2, [r3, #0]
		Sla.Fol = 3.5;
 800cf06:	4b4c      	ldr	r3, [pc, #304]	; (800d038 <FastestRun+0x280>)
 800cf08:	4a55      	ldr	r2, [pc, #340]	; (800d060 <FastestRun+0x2a8>)
 800cf0a:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.04;
 800cf0c:	4b4a      	ldr	r3, [pc, #296]	; (800d038 <FastestRun+0x280>)
 800cf0e:	4a55      	ldr	r2, [pc, #340]	; (800d064 <FastestRun+0x2ac>)
 800cf10:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800cf12:	4b49      	ldr	r3, [pc, #292]	; (800d038 <FastestRun+0x280>)
 800cf14:	4a4c      	ldr	r2, [pc, #304]	; (800d048 <FastestRun+0x290>)
 800cf16:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800cf18:	4b47      	ldr	r3, [pc, #284]	; (800d038 <FastestRun+0x280>)
 800cf1a:	4a4c      	ldr	r2, [pc, #304]	; (800d04c <FastestRun+0x294>)
 800cf1c:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800cf1e:	4b46      	ldr	r3, [pc, #280]	; (800d038 <FastestRun+0x280>)
 800cf20:	4a44      	ldr	r2, [pc, #272]	; (800d034 <FastestRun+0x27c>)
 800cf22:	619a      	str	r2, [r3, #24]
		break;
 800cf24:	e015      	b.n	800cf52 <FastestRun+0x19a>
	case 4:
		ExploreVelocity=300;
 800cf26:	4b41      	ldr	r3, [pc, #260]	; (800d02c <FastestRun+0x274>)
 800cf28:	4a4f      	ldr	r2, [pc, #316]	; (800d068 <FastestRun+0x2b0>)
 800cf2a:	601a      	str	r2, [r3, #0]
		Sla.Pre = 3;
 800cf2c:	4b42      	ldr	r3, [pc, #264]	; (800d038 <FastestRun+0x280>)
 800cf2e:	4a4f      	ldr	r2, [pc, #316]	; (800d06c <FastestRun+0x2b4>)
 800cf30:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800cf32:	4b41      	ldr	r3, [pc, #260]	; (800d038 <FastestRun+0x280>)
 800cf34:	4a47      	ldr	r2, [pc, #284]	; (800d054 <FastestRun+0x29c>)
 800cf36:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800cf38:	4b3f      	ldr	r3, [pc, #252]	; (800d038 <FastestRun+0x280>)
 800cf3a:	4a4d      	ldr	r2, [pc, #308]	; (800d070 <FastestRun+0x2b8>)
 800cf3c:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800cf3e:	4b3e      	ldr	r3, [pc, #248]	; (800d038 <FastestRun+0x280>)
 800cf40:	4a41      	ldr	r2, [pc, #260]	; (800d048 <FastestRun+0x290>)
 800cf42:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800cf44:	4b3c      	ldr	r3, [pc, #240]	; (800d038 <FastestRun+0x280>)
 800cf46:	4a41      	ldr	r2, [pc, #260]	; (800d04c <FastestRun+0x294>)
 800cf48:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800cf4a:	4b3b      	ldr	r3, [pc, #236]	; (800d038 <FastestRun+0x280>)
 800cf4c:	4a39      	ldr	r2, [pc, #228]	; (800d034 <FastestRun+0x27c>)
 800cf4e:	619a      	str	r2, [r3, #24]
		break;
 800cf50:	bf00      	nop

	}

	ChangeLED(4);
 800cf52:	2004      	movs	r0, #4
 800cf54:	f002 ff80 	bl	800fe58 <ChangeLED>

	//マップデータの取得。flashから壁データを取得。
	flash_copy_to_ram();
 800cf58:	f7ff f8a0 	bl	800c09c <flash_copy_to_ram>

	SearchOrFast = 1;
 800cf5c:	4b45      	ldr	r3, [pc, #276]	; (800d074 <FastestRun+0x2bc>)
 800cf5e:	2201      	movs	r2, #1
 800cf60:	601a      	str	r2, [r3, #0]
	//走る
	goal_edge_num = two;
 800cf62:	4b45      	ldr	r3, [pc, #276]	; (800d078 <FastestRun+0x2c0>)
 800cf64:	2202      	movs	r2, #2
 800cf66:	701a      	strb	r2, [r3, #0]
//			HAL_Delay(300);
//			break;
//	}
	//shiftPos();

	TargetVelocity[BODY] = 0;
 800cf68:	4b44      	ldr	r3, [pc, #272]	; (800d07c <FastestRun+0x2c4>)
 800cf6a:	f04f 0200 	mov.w	r2, #0
 800cf6e:	609a      	str	r2, [r3, #8]
	Acceleration = 0;
 800cf70:	4b43      	ldr	r3, [pc, #268]	; (800d080 <FastestRun+0x2c8>)
 800cf72:	f04f 0200 	mov.w	r2, #0
 800cf76:	601a      	str	r2, [r3, #0]
	TargetAngularV = 0;
 800cf78:	4b42      	ldr	r3, [pc, #264]	; (800d084 <FastestRun+0x2cc>)
 800cf7a:	f04f 0200 	mov.w	r2, #0
 800cf7e:	601a      	str	r2, [r3, #0]
	PIDReset(L_VELO_PID);
 800cf80:	2004      	movs	r0, #4
 800cf82:	f003 fd17 	bl	80109b4 <PIDReset>
	PIDReset(R_VELO_PID);
 800cf86:	2005      	movs	r0, #5
 800cf88:	f003 fd14 	bl	80109b4 <PIDReset>
	PIDReset(A_VELO_PID);
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	f003 fd11 	bl	80109b4 <PIDReset>
	PIDReset(L_WALL_PID);
 800cf92:	2002      	movs	r0, #2
 800cf94:	f003 fd0e 	bl	80109b4 <PIDReset>
	PIDReset(R_WALL_PID);
 800cf98:	2003      	movs	r0, #3
 800cf9a:	f003 fd0b 	bl	80109b4 <PIDReset>
	HAL_Delay(200);
 800cf9e:	20c8      	movs	r0, #200	; 0xc8
 800cfa0:	f004 f836 	bl	8011010 <HAL_Delay>
	//加速
	Pos.Dir = front;
 800cfa4:	4b38      	ldr	r3, [pc, #224]	; (800d088 <FastestRun+0x2d0>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	711a      	strb	r2, [r3, #4]
	switch(Pos.Car%4)
 800cfaa:	4b37      	ldr	r3, [pc, #220]	; (800d088 <FastestRun+0x2d0>)
 800cfac:	795b      	ldrb	r3, [r3, #5]
 800cfae:	f003 0303 	and.w	r3, r3, #3
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	d878      	bhi.n	800d0a8 <FastestRun+0x2f0>
 800cfb6:	a201      	add	r2, pc, #4	; (adr r2, 800cfbc <FastestRun+0x204>)
 800cfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfbc:	0800cfcd 	.word	0x0800cfcd
 800cfc0:	0800cfe9 	.word	0x0800cfe9
 800cfc4:	0800d005 	.word	0x0800d005
 800cfc8:	0800d08d 	.word	0x0800d08d
	{
	case north:
		Pos.NextX = Pos.X;
 800cfcc:	4b2e      	ldr	r3, [pc, #184]	; (800d088 <FastestRun+0x2d0>)
 800cfce:	781a      	ldrb	r2, [r3, #0]
 800cfd0:	4b2d      	ldr	r3, [pc, #180]	; (800d088 <FastestRun+0x2d0>)
 800cfd2:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y + 1;
 800cfd4:	4b2c      	ldr	r3, [pc, #176]	; (800d088 <FastestRun+0x2d0>)
 800cfd6:	785b      	ldrb	r3, [r3, #1]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	4b2a      	ldr	r3, [pc, #168]	; (800d088 <FastestRun+0x2d0>)
 800cfde:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = north;
 800cfe0:	4b29      	ldr	r3, [pc, #164]	; (800d088 <FastestRun+0x2d0>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	72da      	strb	r2, [r3, #11]
		break;
 800cfe6:	e05f      	b.n	800d0a8 <FastestRun+0x2f0>
	case east:
		Pos.NextX = Pos.X + 1;
 800cfe8:	4b27      	ldr	r3, [pc, #156]	; (800d088 <FastestRun+0x2d0>)
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	3301      	adds	r3, #1
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	4b25      	ldr	r3, [pc, #148]	; (800d088 <FastestRun+0x2d0>)
 800cff2:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y;
 800cff4:	4b24      	ldr	r3, [pc, #144]	; (800d088 <FastestRun+0x2d0>)
 800cff6:	785a      	ldrb	r2, [r3, #1]
 800cff8:	4b23      	ldr	r3, [pc, #140]	; (800d088 <FastestRun+0x2d0>)
 800cffa:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = east;
 800cffc:	4b22      	ldr	r3, [pc, #136]	; (800d088 <FastestRun+0x2d0>)
 800cffe:	2201      	movs	r2, #1
 800d000:	72da      	strb	r2, [r3, #11]
		break;
 800d002:	e051      	b.n	800d0a8 <FastestRun+0x2f0>
	case south:
		Pos.NextX = Pos.X;
 800d004:	4b20      	ldr	r3, [pc, #128]	; (800d088 <FastestRun+0x2d0>)
 800d006:	781a      	ldrb	r2, [r3, #0]
 800d008:	4b1f      	ldr	r3, [pc, #124]	; (800d088 <FastestRun+0x2d0>)
 800d00a:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y - 1;
 800d00c:	4b1e      	ldr	r3, [pc, #120]	; (800d088 <FastestRun+0x2d0>)
 800d00e:	785b      	ldrb	r3, [r3, #1]
 800d010:	3b01      	subs	r3, #1
 800d012:	b2da      	uxtb	r2, r3
 800d014:	4b1c      	ldr	r3, [pc, #112]	; (800d088 <FastestRun+0x2d0>)
 800d016:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = south;
 800d018:	4b1b      	ldr	r3, [pc, #108]	; (800d088 <FastestRun+0x2d0>)
 800d01a:	2202      	movs	r2, #2
 800d01c:	72da      	strb	r2, [r3, #11]
		break;
 800d01e:	e043      	b.n	800d0a8 <FastestRun+0x2f0>
 800d020:	200004e0 	.word	0x200004e0
 800d024:	20000520 	.word	0x20000520
 800d028:	0801b10c 	.word	0x0801b10c
 800d02c:	20000614 	.word	0x20000614
 800d030:	43c80000 	.word	0x43c80000
 800d034:	42b40000 	.word	0x42b40000
 800d038:	20000538 	.word	0x20000538
 800d03c:	40e00000 	.word	0x40e00000
 800d040:	41300000 	.word	0x41300000
 800d044:	3c656042 	.word	0x3c656042
 800d048:	41f00000 	.word	0x41f00000
 800d04c:	42700000 	.word	0x42700000
 800d050:	43070000 	.word	0x43070000
 800d054:	40a00000 	.word	0x40a00000
 800d058:	3cdfa440 	.word	0x3cdfa440
 800d05c:	43340000 	.word	0x43340000
 800d060:	40600000 	.word	0x40600000
 800d064:	3d23d70a 	.word	0x3d23d70a
 800d068:	43960000 	.word	0x43960000
 800d06c:	40400000 	.word	0x40400000
 800d070:	3def9db2 	.word	0x3def9db2
 800d074:	2000078c 	.word	0x2000078c
 800d078:	2000051c 	.word	0x2000051c
 800d07c:	200004ec 	.word	0x200004ec
 800d080:	2000022c 	.word	0x2000022c
 800d084:	200004fc 	.word	0x200004fc
 800d088:	20000000 	.word	0x20000000
	case west:
		Pos.NextX = Pos.X - 1;
 800d08c:	4b19      	ldr	r3, [pc, #100]	; (800d0f4 <FastestRun+0x33c>)
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	3b01      	subs	r3, #1
 800d092:	b2da      	uxtb	r2, r3
 800d094:	4b17      	ldr	r3, [pc, #92]	; (800d0f4 <FastestRun+0x33c>)
 800d096:	721a      	strb	r2, [r3, #8]
		Pos.NextY = Pos.Y;
 800d098:	4b16      	ldr	r3, [pc, #88]	; (800d0f4 <FastestRun+0x33c>)
 800d09a:	785a      	ldrb	r2, [r3, #1]
 800d09c:	4b15      	ldr	r3, [pc, #84]	; (800d0f4 <FastestRun+0x33c>)
 800d09e:	725a      	strb	r2, [r3, #9]
		Pos.NextCar = west;
 800d0a0:	4b14      	ldr	r3, [pc, #80]	; (800d0f4 <FastestRun+0x33c>)
 800d0a2:	2203      	movs	r2, #3
 800d0a4:	72da      	strb	r2, [r3, #11]
		break;
 800d0a6:	bf00      	nop
	}
	Accel(61.5, ExploreVelocity);
 800d0a8:	4b13      	ldr	r3, [pc, #76]	; (800d0f8 <FastestRun+0x340>)
 800d0aa:	edd3 7a00 	vldr	s15, [r3]
 800d0ae:	eef0 0a67 	vmov.f32	s1, s15
 800d0b2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800d0fc <FastestRun+0x344>
 800d0b6:	f7fd f81b 	bl	800a0f0 <Accel>
	shiftPos();
 800d0ba:	f000 fb29 	bl	800d710 <shiftPos>
	fast_run( X_GOAL_LESSER, Y_GOAL_LESSER,X_GOAL_LARGER,Y_GOAL_LARGER, turn_mode,0x03);
 800d0be:	2303      	movs	r3, #3
 800d0c0:	9301      	str	r3, [sp, #4]
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	2308      	movs	r3, #8
 800d0c8:	2208      	movs	r2, #8
 800d0ca:	2107      	movs	r1, #7
 800d0cc:	2007      	movs	r0, #7
 800d0ce:	f001 f8f1 	bl	800e2b4 <fast_run>

	//ゴールしたら減速して、停止。
	Decel(45,0);
 800d0d2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800d100 <FastestRun+0x348>
 800d0d6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800d104 <FastestRun+0x34c>
 800d0da:	f7fd f915 	bl	800a308 <Decel>
	//終了合図
	Signal(7);
 800d0de:	2007      	movs	r0, #7
 800d0e0:	f003 fdf4 	bl	8010ccc <Signal>

	while(1)
	{
		HAL_Delay(10*1000);
 800d0e4:	f242 7010 	movw	r0, #10000	; 0x2710
 800d0e8:	f003 ff92 	bl	8011010 <HAL_Delay>
		printf("ログ出力\r\n");
 800d0ec:	4806      	ldr	r0, [pc, #24]	; (800d108 <FastestRun+0x350>)
 800d0ee:	f009 fe71 	bl	8016dd4 <puts>
		HAL_Delay(10*1000);
 800d0f2:	e7f7      	b.n	800d0e4 <FastestRun+0x32c>
 800d0f4:	20000000 	.word	0x20000000
 800d0f8:	20000614 	.word	0x20000614
 800d0fc:	42760000 	.word	0x42760000
 800d100:	00000000 	.word	0x00000000
 800d104:	42340000 	.word	0x42340000
 800d108:	0801b190 	.word	0x0801b190

0800d10c <Explore>:
	}
}
void Explore()
{
 800d10c:	b590      	push	{r4, r7, lr}
 800d10e:	b0db      	sub	sp, #364	; 0x16c
 800d110:	af02      	add	r7, sp, #8
	IT_mode = EXPLORE;
 800d112:	4b7d      	ldr	r3, [pc, #500]	; (800d308 <Explore+0x1fc>)
 800d114:	2206      	movs	r2, #6
 800d116:	601a      	str	r2, [r3, #0]
	//IT_mode = WRITINGFREE;
	//7で探索へ、0~6でデータ操作。マップを消す、マップをRAMに移す、マップを初期化する。
	//一回目で失敗していたら、flash消してram初期化
	//一回目で成功したら、flashをramに移す

	HAL_Delay(100);
 800d118:	2064      	movs	r0, #100	; 0x64
 800d11a:	f003 ff79 	bl	8011010 <HAL_Delay>
	int8_t mode=1;
 800d11e:	2301      	movs	r3, #1
 800d120:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	ModeSelect( 1, 2, &mode);
 800d124:	f207 134f 	addw	r3, r7, #335	; 0x14f
 800d128:	461a      	mov	r2, r3
 800d12a:	2102      	movs	r1, #2
 800d12c:	2001      	movs	r0, #1
 800d12e:	f003 fe45 	bl	8010dbc <ModeSelect>
	Signal( mode );
 800d132:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 800d136:	4618      	mov	r0, r3
 800d138:	f003 fdc8 	bl	8010ccc <Signal>
	HAL_Delay(100);
 800d13c:	2064      	movs	r0, #100	; 0x64
 800d13e:	f003 ff67 	bl	8011010 <HAL_Delay>

	int8_t mode2=1;
 800d142:	2301      	movs	r3, #1
 800d144:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
	ModeSelect( 1, 4, &mode2);
 800d148:	f507 73a7 	add.w	r3, r7, #334	; 0x14e
 800d14c:	461a      	mov	r2, r3
 800d14e:	2104      	movs	r1, #4
 800d150:	2001      	movs	r0, #1
 800d152:	f003 fe33 	bl	8010dbc <ModeSelect>
	Signal( mode2 );
 800d156:	f997 314e 	ldrsb.w	r3, [r7, #334]	; 0x14e
 800d15a:	4618      	mov	r0, r3
 800d15c:	f003 fdb6 	bl	8010ccc <Signal>
	PhotoSwitch();
 800d160:	f003 fe0a 	bl	8010d78 <PhotoSwitch>
	InitExplore();
 800d164:	f7ff fabe 	bl	800c6e4 <InitExplore>
	InitPosition();
 800d168:	f7fb fe46 	bl	8008df8 <InitPosition>
	wall_init();
 800d16c:	f7fe fbb4 	bl	800b8d8 <wall_init>

	TotalPulse[RIGHT] = 0;
 800d170:	4b66      	ldr	r3, [pc, #408]	; (800d30c <Explore+0x200>)
 800d172:	2200      	movs	r2, #0
 800d174:	605a      	str	r2, [r3, #4]
	TotalPulse[LEFT] = 0;
 800d176:	4b65      	ldr	r3, [pc, #404]	; (800d30c <Explore+0x200>)
 800d178:	2200      	movs	r2, #0
 800d17a:	601a      	str	r2, [r3, #0]
	TotalPulse[BODY] = 0;
 800d17c:	4b63      	ldr	r3, [pc, #396]	; (800d30c <Explore+0x200>)
 800d17e:	2200      	movs	r2, #0
 800d180:	609a      	str	r2, [r3, #8]

	PIDChangeFlag(L_VELO_PID, 1);
 800d182:	2101      	movs	r1, #1
 800d184:	2004      	movs	r0, #4
 800d186:	f003 fbff 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_VELO_PID, 1);
 800d18a:	2101      	movs	r1, #1
 800d18c:	2005      	movs	r0, #5
 800d18e:	f003 fbfb 	bl	8010988 <PIDChangeFlag>

	//PIDChangeFlagStraight(N_WALL_PID);
	PIDChangeFlag(D_WALL_PID, 0);
 800d192:	2100      	movs	r1, #0
 800d194:	2001      	movs	r0, #1
 800d196:	f003 fbf7 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(L_WALL_PID, 0);
 800d19a:	2100      	movs	r1, #0
 800d19c:	2002      	movs	r0, #2
 800d19e:	f003 fbf3 	bl	8010988 <PIDChangeFlag>
	PIDChangeFlag(R_WALL_PID, 0);
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	2003      	movs	r0, #3
 800d1a6:	f003 fbef 	bl	8010988 <PIDChangeFlag>
	//PIDSetGain(D_WALL_PID, 10, 0, 0);

	ChangeLED(2);
 800d1aa:	2002      	movs	r0, #2
 800d1ac:	f002 fe54 	bl	800fe58 <ChangeLED>

	//スラロームか、一区画ずつかを選ぶ。
	char turn_mode;
	if(mode == 1)
 800d1b0:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d106      	bne.n	800d1c6 <Explore+0xba>
	{
		turn_mode = 'T';
 800d1b8:	2354      	movs	r3, #84	; 0x54
 800d1ba:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		ExploreVelocity=300;
 800d1be:	4b54      	ldr	r3, [pc, #336]	; (800d310 <Explore+0x204>)
 800d1c0:	4a54      	ldr	r2, [pc, #336]	; (800d314 <Explore+0x208>)
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	e006      	b.n	800d1d4 <Explore+0xc8>
	}
	else if(mode == 2)
 800d1c6:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d102      	bne.n	800d1d4 <Explore+0xc8>
	{
		turn_mode = 'S';
 800d1ce:	2353      	movs	r3, #83	; 0x53
 800d1d0:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
	}

	switch(mode2)
 800d1d4:	f997 314e 	ldrsb.w	r3, [r7, #334]	; 0x14e
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	2b03      	cmp	r3, #3
 800d1dc:	d865      	bhi.n	800d2aa <Explore+0x19e>
 800d1de:	a201      	add	r2, pc, #4	; (adr r2, 800d1e4 <Explore+0xd8>)
 800d1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e4:	0800d1f5 	.word	0x0800d1f5
 800d1e8:	0800d221 	.word	0x0800d221
 800d1ec:	0800d24f 	.word	0x0800d24f
 800d1f0:	0800d27f 	.word	0x0800d27f
	{
	case 1:
		ExploreVelocity=90;
 800d1f4:	4b46      	ldr	r3, [pc, #280]	; (800d310 <Explore+0x204>)
 800d1f6:	4a48      	ldr	r2, [pc, #288]	; (800d318 <Explore+0x20c>)
 800d1f8:	601a      	str	r2, [r3, #0]
		//未
		Sla.Pre = 9;
 800d1fa:	4b48      	ldr	r3, [pc, #288]	; (800d31c <Explore+0x210>)
 800d1fc:	4a48      	ldr	r2, [pc, #288]	; (800d320 <Explore+0x214>)
 800d1fe:	601a      	str	r2, [r3, #0]
		Sla.Fol = 20;
 800d200:	4b46      	ldr	r3, [pc, #280]	; (800d31c <Explore+0x210>)
 800d202:	4a48      	ldr	r2, [pc, #288]	; (800d324 <Explore+0x218>)
 800d204:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.014;
 800d206:	4b45      	ldr	r3, [pc, #276]	; (800d31c <Explore+0x210>)
 800d208:	4a47      	ldr	r2, [pc, #284]	; (800d328 <Explore+0x21c>)
 800d20a:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d20c:	4b43      	ldr	r3, [pc, #268]	; (800d31c <Explore+0x210>)
 800d20e:	4a47      	ldr	r2, [pc, #284]	; (800d32c <Explore+0x220>)
 800d210:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800d212:	4b42      	ldr	r3, [pc, #264]	; (800d31c <Explore+0x210>)
 800d214:	4a46      	ldr	r2, [pc, #280]	; (800d330 <Explore+0x224>)
 800d216:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800d218:	4b40      	ldr	r3, [pc, #256]	; (800d31c <Explore+0x210>)
 800d21a:	4a3f      	ldr	r2, [pc, #252]	; (800d318 <Explore+0x20c>)
 800d21c:	619a      	str	r2, [r3, #24]
//		Sla.Fol = 12;
//		Sla.Alalpha = 0.0007;
//		Sla.Theta1 = 30;
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;
		break;
 800d21e:	e044      	b.n	800d2aa <Explore+0x19e>
//		Sla.Theta2 = 60;
//		Sla.Theta3 = 90;



		ExploreVelocity=180;
 800d220:	4b3b      	ldr	r3, [pc, #236]	; (800d310 <Explore+0x204>)
 800d222:	4a44      	ldr	r2, [pc, #272]	; (800d334 <Explore+0x228>)
 800d224:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800d226:	4b3d      	ldr	r3, [pc, #244]	; (800d31c <Explore+0x210>)
 800d228:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d22c:	601a      	str	r2, [r3, #0]
		Sla.Fol = 16.5;
 800d22e:	4b3b      	ldr	r3, [pc, #236]	; (800d31c <Explore+0x210>)
 800d230:	4a41      	ldr	r2, [pc, #260]	; (800d338 <Explore+0x22c>)
 800d232:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.043;
 800d234:	4b39      	ldr	r3, [pc, #228]	; (800d31c <Explore+0x210>)
 800d236:	4a41      	ldr	r2, [pc, #260]	; (800d33c <Explore+0x230>)
 800d238:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d23a:	4b38      	ldr	r3, [pc, #224]	; (800d31c <Explore+0x210>)
 800d23c:	4a3b      	ldr	r2, [pc, #236]	; (800d32c <Explore+0x220>)
 800d23e:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800d240:	4b36      	ldr	r3, [pc, #216]	; (800d31c <Explore+0x210>)
 800d242:	4a3b      	ldr	r2, [pc, #236]	; (800d330 <Explore+0x224>)
 800d244:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800d246:	4b35      	ldr	r3, [pc, #212]	; (800d31c <Explore+0x210>)
 800d248:	4a33      	ldr	r2, [pc, #204]	; (800d318 <Explore+0x20c>)
 800d24a:	619a      	str	r2, [r3, #24]
		break;
 800d24c:	e02d      	b.n	800d2aa <Explore+0x19e>
	case 3:
		ExploreVelocity=240;
 800d24e:	4b30      	ldr	r3, [pc, #192]	; (800d310 <Explore+0x204>)
 800d250:	4a3b      	ldr	r2, [pc, #236]	; (800d340 <Explore+0x234>)
 800d252:	601a      	str	r2, [r3, #0]
		Sla.Pre = 2;
 800d254:	4b31      	ldr	r3, [pc, #196]	; (800d31c <Explore+0x210>)
 800d256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d25a:	601a      	str	r2, [r3, #0]
		Sla.Fol = 16;
 800d25c:	4b2f      	ldr	r3, [pc, #188]	; (800d31c <Explore+0x210>)
 800d25e:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800d262:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.078;
 800d264:	4b2d      	ldr	r3, [pc, #180]	; (800d31c <Explore+0x210>)
 800d266:	4a37      	ldr	r2, [pc, #220]	; (800d344 <Explore+0x238>)
 800d268:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d26a:	4b2c      	ldr	r3, [pc, #176]	; (800d31c <Explore+0x210>)
 800d26c:	4a2f      	ldr	r2, [pc, #188]	; (800d32c <Explore+0x220>)
 800d26e:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800d270:	4b2a      	ldr	r3, [pc, #168]	; (800d31c <Explore+0x210>)
 800d272:	4a2f      	ldr	r2, [pc, #188]	; (800d330 <Explore+0x224>)
 800d274:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800d276:	4b29      	ldr	r3, [pc, #164]	; (800d31c <Explore+0x210>)
 800d278:	4a27      	ldr	r2, [pc, #156]	; (800d318 <Explore+0x20c>)
 800d27a:	619a      	str	r2, [r3, #24]
		break;
 800d27c:	e015      	b.n	800d2aa <Explore+0x19e>
	case 4:
		ExploreVelocity=300;
 800d27e:	4b24      	ldr	r3, [pc, #144]	; (800d310 <Explore+0x204>)
 800d280:	4a24      	ldr	r2, [pc, #144]	; (800d314 <Explore+0x208>)
 800d282:	601a      	str	r2, [r3, #0]
		Sla.Pre = 3;
 800d284:	4b25      	ldr	r3, [pc, #148]	; (800d31c <Explore+0x210>)
 800d286:	4a30      	ldr	r2, [pc, #192]	; (800d348 <Explore+0x23c>)
 800d288:	601a      	str	r2, [r3, #0]
		Sla.Fol = 5;
 800d28a:	4b24      	ldr	r3, [pc, #144]	; (800d31c <Explore+0x210>)
 800d28c:	4a2f      	ldr	r2, [pc, #188]	; (800d34c <Explore+0x240>)
 800d28e:	605a      	str	r2, [r3, #4]
		Sla.Alpha = 0.117;
 800d290:	4b22      	ldr	r3, [pc, #136]	; (800d31c <Explore+0x210>)
 800d292:	4a2f      	ldr	r2, [pc, #188]	; (800d350 <Explore+0x244>)
 800d294:	609a      	str	r2, [r3, #8]
		Sla.Theta1 = 30;
 800d296:	4b21      	ldr	r3, [pc, #132]	; (800d31c <Explore+0x210>)
 800d298:	4a24      	ldr	r2, [pc, #144]	; (800d32c <Explore+0x220>)
 800d29a:	611a      	str	r2, [r3, #16]
		Sla.Theta2 = 60;
 800d29c:	4b1f      	ldr	r3, [pc, #124]	; (800d31c <Explore+0x210>)
 800d29e:	4a24      	ldr	r2, [pc, #144]	; (800d330 <Explore+0x224>)
 800d2a0:	615a      	str	r2, [r3, #20]
		Sla.Theta3 = 90;
 800d2a2:	4b1e      	ldr	r3, [pc, #120]	; (800d31c <Explore+0x210>)
 800d2a4:	4a1c      	ldr	r2, [pc, #112]	; (800d318 <Explore+0x20c>)
 800d2a6:	619a      	str	r2, [r3, #24]
		//		//未

		break;
 800d2a8:	bf00      	nop

	}
	Pos.TargetX = X_GOAL_LESSER;
 800d2aa:	4b2a      	ldr	r3, [pc, #168]	; (800d354 <Explore+0x248>)
 800d2ac:	2207      	movs	r2, #7
 800d2ae:	709a      	strb	r2, [r3, #2]
	Pos.TargetY = Y_GOAL_LESSER;
 800d2b0:	4b28      	ldr	r3, [pc, #160]	; (800d354 <Explore+0x248>)
 800d2b2:	2207      	movs	r2, #7
 800d2b4:	70da      	strb	r2, [r3, #3]
	goal_edge_num = two;
 800d2b6:	4b28      	ldr	r3, [pc, #160]	; (800d358 <Explore+0x24c>)
 800d2b8:	2202      	movs	r2, #2
 800d2ba:	701a      	strb	r2, [r3, #0]
	SearchOrFast = 0;
 800d2bc:	4b27      	ldr	r3, [pc, #156]	; (800d35c <Explore+0x250>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	601a      	str	r2, [r3, #0]
	Pos.Dir = front;
 800d2c2:	4b24      	ldr	r3, [pc, #144]	; (800d354 <Explore+0x248>)
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	711a      	strb	r2, [r3, #4]
	Pos.Car = north;
 800d2c8:	4b22      	ldr	r3, [pc, #136]	; (800d354 <Explore+0x248>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	715a      	strb	r2, [r3, #5]
	Pos.NextX = Pos.X;
 800d2ce:	4b21      	ldr	r3, [pc, #132]	; (800d354 <Explore+0x248>)
 800d2d0:	781a      	ldrb	r2, [r3, #0]
 800d2d2:	4b20      	ldr	r3, [pc, #128]	; (800d354 <Explore+0x248>)
 800d2d4:	721a      	strb	r2, [r3, #8]
	Pos.NextY = Pos.Y + 1;
 800d2d6:	4b1f      	ldr	r3, [pc, #124]	; (800d354 <Explore+0x248>)
 800d2d8:	785b      	ldrb	r3, [r3, #1]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	4b1d      	ldr	r3, [pc, #116]	; (800d354 <Explore+0x248>)
 800d2e0:	725a      	strb	r2, [r3, #9]
	Pos.NextCar = north;
 800d2e2:	4b1c      	ldr	r3, [pc, #112]	; (800d354 <Explore+0x248>)
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	72da      	strb	r2, [r3, #11]
	dbc = 1;
 800d2e8:	4b1d      	ldr	r3, [pc, #116]	; (800d360 <Explore+0x254>)
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	601a      	str	r2, [r3, #0]
	Accel(61.5, ExploreVelocity);
 800d2ee:	4b08      	ldr	r3, [pc, #32]	; (800d310 <Explore+0x204>)
 800d2f0:	edd3 7a00 	vldr	s15, [r3]
 800d2f4:	eef0 0a67 	vmov.f32	s1, s15
 800d2f8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800d364 <Explore+0x258>
 800d2fc:	f7fc fef8 	bl	800a0f0 <Accel>
	shiftPos();
 800d300:	f000 fa06 	bl	800d710 <shiftPos>
//	{
//		ChangeLED(7);
//		TargetVelocity[BODY] = 0;
//	}

	while( !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER)) ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800d304:	e039      	b.n	800d37a <Explore+0x26e>
 800d306:	bf00      	nop
 800d308:	200004e0 	.word	0x200004e0
 800d30c:	20000520 	.word	0x20000520
 800d310:	20000614 	.word	0x20000614
 800d314:	43960000 	.word	0x43960000
 800d318:	42b40000 	.word	0x42b40000
 800d31c:	20000538 	.word	0x20000538
 800d320:	41100000 	.word	0x41100000
 800d324:	41a00000 	.word	0x41a00000
 800d328:	3c656042 	.word	0x3c656042
 800d32c:	41f00000 	.word	0x41f00000
 800d330:	42700000 	.word	0x42700000
 800d334:	43340000 	.word	0x43340000
 800d338:	41840000 	.word	0x41840000
 800d33c:	3d3020c5 	.word	0x3d3020c5
 800d340:	43700000 	.word	0x43700000
 800d344:	3d9fbe77 	.word	0x3d9fbe77
 800d348:	40400000 	.word	0x40400000
 800d34c:	40a00000 	.word	0x40a00000
 800d350:	3def9db2 	.word	0x3def9db2
 800d354:	20000000 	.word	0x20000000
 800d358:	2000051c 	.word	0x2000051c
 800d35c:	2000078c 	.word	0x2000078c
 800d360:	20000218 	.word	0x20000218
 800d364:	42760000 	.word	0x42760000
	{

		//ChangeLED(Pos.Car);
		KyushinJudge();
 800d368:	f000 f9e8 	bl	800d73c <KyushinJudge>
		SelectAction(turn_mode);
 800d36c:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800d370:	4618      	mov	r0, r3
 800d372:	f7fd fdf9 	bl	800af68 <SelectAction>
		shiftPos();
 800d376:	f000 f9cb 	bl	800d710 <shiftPos>
	while( !( (X_GOAL_LESSER <= Pos.X) && (Pos.X <= X_GOAL_LARGER) ) ||  !( ( Y_GOAL_LESSER <= Pos.Y) && (Pos.Y <= Y_GOAL_LARGER)) ) //&&  (1/*ゴール座標の壁をすべて知っているフラグが0)*/ //ゴール区画内に入っていてかつゴールの区画をすべて知っていれば。
 800d37a:	4baa      	ldr	r3, [pc, #680]	; (800d624 <Explore+0x518>)
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	2b06      	cmp	r3, #6
 800d380:	d9f2      	bls.n	800d368 <Explore+0x25c>
 800d382:	4ba8      	ldr	r3, [pc, #672]	; (800d624 <Explore+0x518>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	2b08      	cmp	r3, #8
 800d388:	d8ee      	bhi.n	800d368 <Explore+0x25c>
 800d38a:	4ba6      	ldr	r3, [pc, #664]	; (800d624 <Explore+0x518>)
 800d38c:	785b      	ldrb	r3, [r3, #1]
 800d38e:	2b06      	cmp	r3, #6
 800d390:	d9ea      	bls.n	800d368 <Explore+0x25c>
 800d392:	4ba4      	ldr	r3, [pc, #656]	; (800d624 <Explore+0x518>)
 800d394:	785b      	ldrb	r3, [r3, #1]
 800d396:	2b08      	cmp	r3, #8
 800d398:	d8e6      	bhi.n	800d368 <Explore+0x25c>
	}
//	while(1)
//	{
//		TargetVelocity[BODY] = 0;
//	}
	Decel(45, 0);
 800d39a:	eddf 0aa3 	vldr	s1, [pc, #652]	; 800d628 <Explore+0x51c>
 800d39e:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 800d62c <Explore+0x520>
 800d3a2:	f7fc ffb1 	bl	800a308 <Decel>
	shiftPos();
 800d3a6:	f000 f9b3 	bl	800d710 <shiftPos>
//		printf("total L: %d, total R: %d\r\n",TotalPulse[LEFT],TotalPulse[RIGHT]);
//		HAL_Delay(1000);


	//flashのクリア。
	Flash_clear_sector1();
 800d3aa:	f002 fb71 	bl	800fa90 <Flash_clear_sector1>
	//マップ書き込み
	flash_store_init();
 800d3ae:	f7fe fa2b 	bl	800b808 <flash_store_init>
	//完了の合図
	Signal(7);
 800d3b2:	2007      	movs	r0, #7
 800d3b4:	f003 fc8a 	bl	8010ccc <Signal>
//	}
	//未知壁の座標を確認
	//未知壁がなくなるまで、歩数が最も近い座標を目標座標にして走行
	//未知壁を消すごとに歩数マップを更新（現在座標からの歩数が最も小さい座標へ）
	//未探索座標を設定
	uint8_t target_x[NUMBER_OF_SQUARES*NUMBER_OF_SQUARES]={0};
 800d3b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800d3bc:	2251      	movs	r2, #81	; 0x51
 800d3be:	2100      	movs	r1, #0
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f008 fe4c 	bl	801605e <memset>
	uint8_t target_y[NUMBER_OF_SQUARES*NUMBER_OF_SQUARES]={0};
 800d3c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d3ca:	2251      	movs	r2, #81	; 0x51
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f008 fe45 	bl	801605e <memset>
	uint16_t walk_val[NUMBER_OF_SQUARES*NUMBER_OF_SQUARES]={0};
 800d3d4:	1d3b      	adds	r3, r7, #4
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	23a2      	movs	r3, #162	; 0xa2
 800d3da:	461a      	mov	r2, r3
 800d3dc:	2100      	movs	r1, #0
 800d3de:	f008 fe3e 	bl	801605e <memset>
	goal_edge_num = one;
 800d3e2:	4b93      	ldr	r3, [pc, #588]	; (800d630 <Explore+0x524>)
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	701a      	strb	r2, [r3, #0]
	SearchOrFast = 0;
 800d3e8:	4b92      	ldr	r3, [pc, #584]	; (800d634 <Explore+0x528>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	601a      	str	r2, [r3, #0]

	int area_num = 	setNotExploredArea((uint8_t *)target_x, (uint8_t *)target_y, (uint16_t *)walk_val);
 800d3ee:	1d3a      	adds	r2, r7, #4
 800d3f0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800d3f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe fedb 	bl	800c1b4 <setNotExploredArea>
 800d3fe:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
	ChangeLED(3);
 800d402:	2003      	movs	r0, #3
 800d404:	f002 fd28 	bl	800fe58 <ChangeLED>
//		{
//			printf("%d, %u, %u, %u\r\n",i,target_x[i],target_y[i],walk_val[i]);
//		}
//	}

	if(area_num != 0)
 800d408:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 816e 	beq.w	800d6ee <Explore+0x5e2>
	{
		//目標座標の配列を得たので、
		float acc;// = AjustCenter();
		//現在の向きから、次に行くべき方向へ向く
		Pos.Dir = get_nextdir(target_x[0],target_y[0],0x01);
 800d412:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800d416:	4618      	mov	r0, r3
 800d418:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800d41c:	2201      	movs	r2, #1
 800d41e:	4619      	mov	r1, r3
 800d420:	f000 fda2 	bl	800df68 <get_nextdir>
 800d424:	4603      	mov	r3, r0
 800d426:	b2da      	uxtb	r2, r3
 800d428:	4b7e      	ldr	r3, [pc, #504]	; (800d624 <Explore+0x518>)
 800d42a:	711a      	strb	r2, [r3, #4]
		ChangeLED(2);
 800d42c:	2002      	movs	r0, #2
 800d42e:	f002 fd13 	bl	800fe58 <ChangeLED>
		switch(Pos.Dir%4)	//次に行く方向を戻り値とする関数を呼ぶ
 800d432:	4b7c      	ldr	r3, [pc, #496]	; (800d624 <Explore+0x518>)
 800d434:	791b      	ldrb	r3, [r3, #4]
 800d436:	f003 0303 	and.w	r3, r3, #3
 800d43a:	2b03      	cmp	r3, #3
 800d43c:	d870      	bhi.n	800d520 <Explore+0x414>
 800d43e:	a201      	add	r2, pc, #4	; (adr r2, 800d444 <Explore+0x338>)
 800d440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d444:	0800d455 	.word	0x0800d455
 800d448:	0800d475 	.word	0x0800d475
 800d44c:	0800d4cd 	.word	0x0800d4cd
 800d450:	0800d4a1 	.word	0x0800d4a1
		{
			case front:
					//前向きだった場合はそのまま加速
				if(Pos.X == 0 && Pos.Y == 0)
 800d454:	4b73      	ldr	r3, [pc, #460]	; (800d624 <Explore+0x518>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d107      	bne.n	800d46c <Explore+0x360>
 800d45c:	4b71      	ldr	r3, [pc, #452]	; (800d624 <Explore+0x518>)
 800d45e:	785b      	ldrb	r3, [r3, #1]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d103      	bne.n	800d46c <Explore+0x360>
				{
					acc = 61.75;
 800d464:	4b74      	ldr	r3, [pc, #464]	; (800d638 <Explore+0x52c>)
 800d466:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
				else
				{
					acc = 45;
				}

				break;
 800d46a:	e059      	b.n	800d520 <Explore+0x414>
					acc = 45;
 800d46c:	4b73      	ldr	r3, [pc, #460]	; (800d63c <Explore+0x530>)
 800d46e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
				break;
 800d472:	e055      	b.n	800d520 <Explore+0x414>

			case right:					//右に向く
				acc = AjustCenter();
 800d474:	f7fd f8aa 	bl	800a5cc <AjustCenter>
 800d478:	ed87 0a56 	vstr	s0, [r7, #344]	; 0x158
				Rotate( 90 , 2*M_PI);
 800d47c:	eddf 0a70 	vldr	s1, [pc, #448]	; 800d640 <Explore+0x534>
 800d480:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800d644 <Explore+0x538>
 800d484:	f7fc f820 	bl	80094c8 <Rotate>
				acc = AjustCenter();
 800d488:	f7fd f8a0 	bl	800a5cc <AjustCenter>
 800d48c:	ed87 0a56 	vstr	s0, [r7, #344]	; 0x158
				HAL_Delay(100);
 800d490:	2064      	movs	r0, #100	; 0x64
 800d492:	f003 fdbd 	bl	8011010 <HAL_Delay>
				PIDChangeFlag( A_VELO_PID , 1);
 800d496:	2101      	movs	r1, #1
 800d498:	2000      	movs	r0, #0
 800d49a:	f003 fa75 	bl	8010988 <PIDChangeFlag>
				break;
 800d49e:	e03f      	b.n	800d520 <Explore+0x414>

			case left:					//左に向く
				acc = AjustCenter();
 800d4a0:	f7fd f894 	bl	800a5cc <AjustCenter>
 800d4a4:	ed87 0a56 	vstr	s0, [r7, #344]	; 0x158
				Rotate( 90 , -2*M_PI);			//左に曲がって
 800d4a8:	eddf 0a67 	vldr	s1, [pc, #412]	; 800d648 <Explore+0x53c>
 800d4ac:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800d644 <Explore+0x538>
 800d4b0:	f7fc f80a 	bl	80094c8 <Rotate>
				acc = AjustCenter();
 800d4b4:	f7fd f88a 	bl	800a5cc <AjustCenter>
 800d4b8:	ed87 0a56 	vstr	s0, [r7, #344]	; 0x158
				HAL_Delay(100);
 800d4bc:	2064      	movs	r0, #100	; 0x64
 800d4be:	f003 fda7 	bl	8011010 <HAL_Delay>
				PIDChangeFlag( A_VELO_PID , 1);
 800d4c2:	2101      	movs	r1, #1
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	f003 fa5f 	bl	8010988 <PIDChangeFlag>
				break;
 800d4ca:	e029      	b.n	800d520 <Explore+0x414>

			case back:					//後ろに向く
				acc = AjustCenter();
 800d4cc:	f7fd f87e 	bl	800a5cc <AjustCenter>
 800d4d0:	ed87 0a56 	vstr	s0, [r7, #344]	; 0x158
				Pos.Dir = right;
 800d4d4:	4b53      	ldr	r3, [pc, #332]	; (800d624 <Explore+0x518>)
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	711a      	strb	r2, [r3, #4]
				Rotate(90, 2*M_PI);//もしくは二回とも左。ここの加速でバグ。 //
 800d4da:	eddf 0a59 	vldr	s1, [pc, #356]	; 800d640 <Explore+0x534>
 800d4de:	ed9f 0a59 	vldr	s0, [pc, #356]	; 800d644 <Explore+0x538>
 800d4e2:	f7fb fff1 	bl	80094c8 <Rotate>
				acc = AjustCenter();
 800d4e6:	f7fd f871 	bl	800a5cc <AjustCenter>
 800d4ea:	ed87 0a56 	vstr	s0, [r7, #344]	; 0x158
				Pos.Dir = right;
 800d4ee:	4b4d      	ldr	r3, [pc, #308]	; (800d624 <Explore+0x518>)
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	711a      	strb	r2, [r3, #4]
				Rotate(90, 2*M_PI);
 800d4f4:	eddf 0a52 	vldr	s1, [pc, #328]	; 800d640 <Explore+0x534>
 800d4f8:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800d644 <Explore+0x538>
 800d4fc:	f7fb ffe4 	bl	80094c8 <Rotate>
				Pos.Dir = back;
 800d500:	4b48      	ldr	r3, [pc, #288]	; (800d624 <Explore+0x518>)
 800d502:	2202      	movs	r2, #2
 800d504:	711a      	strb	r2, [r3, #4]
				acc = AjustCenter();
 800d506:	f7fd f861 	bl	800a5cc <AjustCenter>
 800d50a:	ed87 0a56 	vstr	s0, [r7, #344]	; 0x158
				Angle = TargetAngle;
 800d50e:	4b4f      	ldr	r3, [pc, #316]	; (800d64c <Explore+0x540>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a4f      	ldr	r2, [pc, #316]	; (800d650 <Explore+0x544>)
 800d514:	6013      	str	r3, [r2, #0]
				HAL_Delay(300);
 800d516:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d51a:	f003 fd79 	bl	8011010 <HAL_Delay>
				break;
 800d51e:	bf00      	nop
		}
			//shiftPos();

			TargetVelocity[BODY] = 0;
 800d520:	4b4c      	ldr	r3, [pc, #304]	; (800d654 <Explore+0x548>)
 800d522:	f04f 0200 	mov.w	r2, #0
 800d526:	609a      	str	r2, [r3, #8]
			Acceleration = 0;
 800d528:	4b4b      	ldr	r3, [pc, #300]	; (800d658 <Explore+0x54c>)
 800d52a:	f04f 0200 	mov.w	r2, #0
 800d52e:	601a      	str	r2, [r3, #0]
			TargetAngularV = 0;
 800d530:	4b4a      	ldr	r3, [pc, #296]	; (800d65c <Explore+0x550>)
 800d532:	f04f 0200 	mov.w	r2, #0
 800d536:	601a      	str	r2, [r3, #0]
			PIDReset(L_VELO_PID);
 800d538:	2004      	movs	r0, #4
 800d53a:	f003 fa3b 	bl	80109b4 <PIDReset>
			PIDReset(R_VELO_PID);
 800d53e:	2005      	movs	r0, #5
 800d540:	f003 fa38 	bl	80109b4 <PIDReset>
			PIDReset(A_VELO_PID);
 800d544:	2000      	movs	r0, #0
 800d546:	f003 fa35 	bl	80109b4 <PIDReset>
			PIDReset(L_WALL_PID);
 800d54a:	2002      	movs	r0, #2
 800d54c:	f003 fa32 	bl	80109b4 <PIDReset>
			PIDReset(R_WALL_PID);
 800d550:	2003      	movs	r0, #3
 800d552:	f003 fa2f 	bl	80109b4 <PIDReset>
			HAL_Delay(200);
 800d556:	20c8      	movs	r0, #200	; 0xc8
 800d558:	f003 fd5a 	bl	8011010 <HAL_Delay>
			ChangeLED(1);
 800d55c:	2001      	movs	r0, #1
 800d55e:	f002 fc7b 	bl	800fe58 <ChangeLED>
			//加速
			Pos.Dir = front;
 800d562:	4b30      	ldr	r3, [pc, #192]	; (800d624 <Explore+0x518>)
 800d564:	2200      	movs	r2, #0
 800d566:	711a      	strb	r2, [r3, #4]
			switch(Pos.Car%4)
 800d568:	4b2e      	ldr	r3, [pc, #184]	; (800d624 <Explore+0x518>)
 800d56a:	795b      	ldrb	r3, [r3, #5]
 800d56c:	f003 0303 	and.w	r3, r3, #3
 800d570:	2b03      	cmp	r3, #3
 800d572:	d843      	bhi.n	800d5fc <Explore+0x4f0>
 800d574:	a201      	add	r2, pc, #4	; (adr r2, 800d57c <Explore+0x470>)
 800d576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d57a:	bf00      	nop
 800d57c:	0800d58d 	.word	0x0800d58d
 800d580:	0800d5a9 	.word	0x0800d5a9
 800d584:	0800d5c5 	.word	0x0800d5c5
 800d588:	0800d5e1 	.word	0x0800d5e1
			{
			case north:
				Pos.NextX = Pos.X;
 800d58c:	4b25      	ldr	r3, [pc, #148]	; (800d624 <Explore+0x518>)
 800d58e:	781a      	ldrb	r2, [r3, #0]
 800d590:	4b24      	ldr	r3, [pc, #144]	; (800d624 <Explore+0x518>)
 800d592:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y + 1;
 800d594:	4b23      	ldr	r3, [pc, #140]	; (800d624 <Explore+0x518>)
 800d596:	785b      	ldrb	r3, [r3, #1]
 800d598:	3301      	adds	r3, #1
 800d59a:	b2da      	uxtb	r2, r3
 800d59c:	4b21      	ldr	r3, [pc, #132]	; (800d624 <Explore+0x518>)
 800d59e:	725a      	strb	r2, [r3, #9]
				Pos.NextCar = north;
 800d5a0:	4b20      	ldr	r3, [pc, #128]	; (800d624 <Explore+0x518>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	72da      	strb	r2, [r3, #11]
				break;
 800d5a6:	e029      	b.n	800d5fc <Explore+0x4f0>
			case east:
				Pos.NextX = Pos.X + 1;
 800d5a8:	4b1e      	ldr	r3, [pc, #120]	; (800d624 <Explore+0x518>)
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	4b1c      	ldr	r3, [pc, #112]	; (800d624 <Explore+0x518>)
 800d5b2:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y;
 800d5b4:	4b1b      	ldr	r3, [pc, #108]	; (800d624 <Explore+0x518>)
 800d5b6:	785a      	ldrb	r2, [r3, #1]
 800d5b8:	4b1a      	ldr	r3, [pc, #104]	; (800d624 <Explore+0x518>)
 800d5ba:	725a      	strb	r2, [r3, #9]
				Pos.NextCar = east;
 800d5bc:	4b19      	ldr	r3, [pc, #100]	; (800d624 <Explore+0x518>)
 800d5be:	2201      	movs	r2, #1
 800d5c0:	72da      	strb	r2, [r3, #11]
				break;
 800d5c2:	e01b      	b.n	800d5fc <Explore+0x4f0>
			case south:
				Pos.NextX = Pos.X;
 800d5c4:	4b17      	ldr	r3, [pc, #92]	; (800d624 <Explore+0x518>)
 800d5c6:	781a      	ldrb	r2, [r3, #0]
 800d5c8:	4b16      	ldr	r3, [pc, #88]	; (800d624 <Explore+0x518>)
 800d5ca:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y - 1;
 800d5cc:	4b15      	ldr	r3, [pc, #84]	; (800d624 <Explore+0x518>)
 800d5ce:	785b      	ldrb	r3, [r3, #1]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	4b13      	ldr	r3, [pc, #76]	; (800d624 <Explore+0x518>)
 800d5d6:	725a      	strb	r2, [r3, #9]
				Pos.NextCar = south;
 800d5d8:	4b12      	ldr	r3, [pc, #72]	; (800d624 <Explore+0x518>)
 800d5da:	2202      	movs	r2, #2
 800d5dc:	72da      	strb	r2, [r3, #11]
				break;
 800d5de:	e00d      	b.n	800d5fc <Explore+0x4f0>
			case west:
				Pos.NextX = Pos.X - 1;
 800d5e0:	4b10      	ldr	r3, [pc, #64]	; (800d624 <Explore+0x518>)
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <Explore+0x518>)
 800d5ea:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y;
 800d5ec:	4b0d      	ldr	r3, [pc, #52]	; (800d624 <Explore+0x518>)
 800d5ee:	785a      	ldrb	r2, [r3, #1]
 800d5f0:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <Explore+0x518>)
 800d5f2:	725a      	strb	r2, [r3, #9]
				Pos.NextCar = west;
 800d5f4:	4b0b      	ldr	r3, [pc, #44]	; (800d624 <Explore+0x518>)
 800d5f6:	2203      	movs	r2, #3
 800d5f8:	72da      	strb	r2, [r3, #11]
				break;
 800d5fa:	bf00      	nop
			}
			ChangeLED(0);
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	f002 fc2b 	bl	800fe58 <ChangeLED>
			Accel(acc, ExploreVelocity);
 800d602:	4b17      	ldr	r3, [pc, #92]	; (800d660 <Explore+0x554>)
 800d604:	edd3 7a00 	vldr	s15, [r3]
 800d608:	eef0 0a67 	vmov.f32	s1, s15
 800d60c:	ed97 0a56 	vldr	s0, [r7, #344]	; 0x158
 800d610:	f7fc fd6e 	bl	800a0f0 <Accel>
			shiftPos();
 800d614:	f000 f87c 	bl	800d710 <shiftPos>
		while(!(Pos.X == 0 && Pos.Y == 0))
 800d618:	e053      	b.n	800d6c2 <Explore+0x5b6>
		{
			for(int i=0; i < area_num; i++)
 800d61a:	2300      	movs	r3, #0
 800d61c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800d620:	e049      	b.n	800d6b6 <Explore+0x5aa>
 800d622:	bf00      	nop
 800d624:	20000000 	.word	0x20000000
 800d628:	00000000 	.word	0x00000000
 800d62c:	42340000 	.word	0x42340000
 800d630:	2000051c 	.word	0x2000051c
 800d634:	2000078c 	.word	0x2000078c
 800d638:	42770000 	.word	0x42770000
 800d63c:	42340000 	.word	0x42340000
 800d640:	40c90fdb 	.word	0x40c90fdb
 800d644:	42b40000 	.word	0x42b40000
 800d648:	c0c90fdb 	.word	0xc0c90fdb
 800d64c:	20000518 	.word	0x20000518
 800d650:	20000228 	.word	0x20000228
 800d654:	200004ec 	.word	0x200004ec
 800d658:	2000022c 	.word	0x2000022c
 800d65c:	200004fc 	.word	0x200004fc
 800d660:	20000614 	.word	0x20000614
			{
				Pos.TargetX = target_x[i];
 800d664:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800d668:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800d66c:	4413      	add	r3, r2
 800d66e:	781a      	ldrb	r2, [r3, #0]
 800d670:	4b24      	ldr	r3, [pc, #144]	; (800d704 <Explore+0x5f8>)
 800d672:	709a      	strb	r2, [r3, #2]
				Pos.TargetY = target_y[i];
 800d674:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800d678:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800d67c:	4413      	add	r3, r2
 800d67e:	781a      	ldrb	r2, [r3, #0]
 800d680:	4b20      	ldr	r3, [pc, #128]	; (800d704 <Explore+0x5f8>)
 800d682:	70da      	strb	r2, [r3, #3]
				//向くべき方を向いて加速して、あとは未探索の配列が終了するまで繰り返し
				fast_run( Pos.TargetX, Pos.TargetY,Pos.TargetX,Pos.TargetY, turn_mode,0x01);
 800d684:	4b1f      	ldr	r3, [pc, #124]	; (800d704 <Explore+0x5f8>)
 800d686:	789b      	ldrb	r3, [r3, #2]
 800d688:	4618      	mov	r0, r3
 800d68a:	4b1e      	ldr	r3, [pc, #120]	; (800d704 <Explore+0x5f8>)
 800d68c:	78db      	ldrb	r3, [r3, #3]
 800d68e:	4619      	mov	r1, r3
 800d690:	4b1c      	ldr	r3, [pc, #112]	; (800d704 <Explore+0x5f8>)
 800d692:	789b      	ldrb	r3, [r3, #2]
 800d694:	461a      	mov	r2, r3
 800d696:	4b1b      	ldr	r3, [pc, #108]	; (800d704 <Explore+0x5f8>)
 800d698:	78db      	ldrb	r3, [r3, #3]
 800d69a:	461c      	mov	r4, r3
 800d69c:	2301      	movs	r3, #1
 800d69e:	9301      	str	r3, [sp, #4]
 800d6a0:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	4623      	mov	r3, r4
 800d6a8:	f000 fe04 	bl	800e2b4 <fast_run>
			for(int i=0; i < area_num; i++)
 800d6ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800d6b6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800d6ba:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	dbd0      	blt.n	800d664 <Explore+0x558>
		while(!(Pos.X == 0 && Pos.Y == 0))
 800d6c2:	4b10      	ldr	r3, [pc, #64]	; (800d704 <Explore+0x5f8>)
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1a7      	bne.n	800d61a <Explore+0x50e>
 800d6ca:	4b0e      	ldr	r3, [pc, #56]	; (800d704 <Explore+0x5f8>)
 800d6cc:	785b      	ldrb	r3, [r3, #1]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1a3      	bne.n	800d61a <Explore+0x50e>
			}
		}
		Decel(45,0);
 800d6d2:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d708 <Explore+0x5fc>
 800d6d6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800d70c <Explore+0x600>
 800d6da:	f7fc fe15 	bl	800a308 <Decel>
		//flashに保存
		//flashのクリア。
		Flash_clear_sector1();
 800d6de:	f002 f9d7 	bl	800fa90 <Flash_clear_sector1>
		//マップ書き込み
		flash_store_init();
 800d6e2:	f7fe f891 	bl	800b808 <flash_store_init>
		//完了の合図
		Signal(7);
 800d6e6:	2007      	movs	r0, #7
 800d6e8:	f003 faf0 	bl	8010ccc <Signal>
 800d6ec:	e002      	b.n	800d6f4 <Explore+0x5e8>
	}
	else//未探索がなければ、LEDで知らせる
	{
		Signal(1);
 800d6ee:	2001      	movs	r0, #1
 800d6f0:	f003 faec 	bl	8010ccc <Signal>

	//未探索が終わったら
	//00に帰ってくる
	while(1)
	{
		ChangeLED(2);
 800d6f4:	2002      	movs	r0, #2
 800d6f6:	f002 fbaf 	bl	800fe58 <ChangeLED>
		wall_ram_print();
 800d6fa:	f7fe fc6d 	bl	800bfd8 <wall_ram_print>
		map_print();
 800d6fe:	f7fe fc3b 	bl	800bf78 <map_print>
		ChangeLED(2);
 800d702:	e7f7      	b.n	800d6f4 <Explore+0x5e8>
 800d704:	20000000 	.word	0x20000000
 800d708:	00000000 	.word	0x00000000
 800d70c:	42340000 	.word	0x42340000

0800d710 <shiftPos>:
#include "PID_Control.h"
#include "Action.h"
int Calc;
int SearchOrFast;
void shiftPos()
{
 800d710:	b480      	push	{r7}
 800d712:	af00      	add	r7, sp, #0
	Pos.Car = Pos.NextCar;
 800d714:	4b08      	ldr	r3, [pc, #32]	; (800d738 <shiftPos+0x28>)
 800d716:	7ada      	ldrb	r2, [r3, #11]
 800d718:	4b07      	ldr	r3, [pc, #28]	; (800d738 <shiftPos+0x28>)
 800d71a:	715a      	strb	r2, [r3, #5]
	Pos.X = Pos.NextX;
 800d71c:	4b06      	ldr	r3, [pc, #24]	; (800d738 <shiftPos+0x28>)
 800d71e:	7a1a      	ldrb	r2, [r3, #8]
 800d720:	4b05      	ldr	r3, [pc, #20]	; (800d738 <shiftPos+0x28>)
 800d722:	701a      	strb	r2, [r3, #0]
	Pos.Y = Pos.NextY;
 800d724:	4b04      	ldr	r3, [pc, #16]	; (800d738 <shiftPos+0x28>)
 800d726:	7a5a      	ldrb	r2, [r3, #9]
 800d728:	4b03      	ldr	r3, [pc, #12]	; (800d738 <shiftPos+0x28>)
 800d72a:	705a      	strb	r2, [r3, #1]
}
 800d72c:	bf00      	nop
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop
 800d738:	20000000 	.word	0x20000000

0800d73c <KyushinJudge>:
void AdachiJudge(){
}
void KyushinJudge()
{
 800d73c:	b490      	push	{r4, r7}
 800d73e:	af00      	add	r7, sp, #0
	//歩数マップから進行方向を導き出すのは、アクションが終わった後、座標と方角が更新されてから。
	switch(Pos.Car%4)
 800d740:	4b97      	ldr	r3, [pc, #604]	; (800d9a0 <KyushinJudge+0x264>)
 800d742:	795b      	ldrb	r3, [r3, #5]
 800d744:	f003 0303 	and.w	r3, r3, #3
 800d748:	2b03      	cmp	r3, #3
 800d74a:	f200 8383 	bhi.w	800de54 <KyushinJudge+0x718>
 800d74e:	a201      	add	r2, pc, #4	; (adr r2, 800d754 <KyushinJudge+0x18>)
 800d750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d754:	0800d765 	.word	0x0800d765
 800d758:	0800d91b 	.word	0x0800d91b
 800d75c:	0800dadd 	.word	0x0800dadd
 800d760:	0800dc9f 	.word	0x0800dc9f
	{
		  case north:
			  if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800d764:	4b8e      	ldr	r3, [pc, #568]	; (800d9a0 <KyushinJudge+0x264>)
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	4619      	mov	r1, r3
 800d76a:	4b8d      	ldr	r3, [pc, #564]	; (800d9a0 <KyushinJudge+0x264>)
 800d76c:	785b      	ldrb	r3, [r3, #1]
 800d76e:	4618      	mov	r0, r3
 800d770:	4a8c      	ldr	r2, [pc, #560]	; (800d9a4 <KyushinJudge+0x268>)
 800d772:	460b      	mov	r3, r1
 800d774:	00db      	lsls	r3, r3, #3
 800d776:	440b      	add	r3, r1
 800d778:	4403      	add	r3, r0
 800d77a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d77e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d782:	b2db      	uxtb	r3, r3
 800d784:	2b00      	cmp	r3, #0
 800d786:	d130      	bne.n	800d7ea <KyushinJudge+0xae>
 800d788:	4b85      	ldr	r3, [pc, #532]	; (800d9a0 <KyushinJudge+0x264>)
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	4618      	mov	r0, r3
 800d78e:	4b84      	ldr	r3, [pc, #528]	; (800d9a0 <KyushinJudge+0x264>)
 800d790:	785b      	ldrb	r3, [r3, #1]
 800d792:	1c5a      	adds	r2, r3, #1
 800d794:	4984      	ldr	r1, [pc, #528]	; (800d9a8 <KyushinJudge+0x26c>)
 800d796:	4603      	mov	r3, r0
 800d798:	00db      	lsls	r3, r3, #3
 800d79a:	4403      	add	r3, r0
 800d79c:	4413      	add	r3, r2
 800d79e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800d7a2:	4b7f      	ldr	r3, [pc, #508]	; (800d9a0 <KyushinJudge+0x264>)
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	4b7d      	ldr	r3, [pc, #500]	; (800d9a0 <KyushinJudge+0x264>)
 800d7aa:	785b      	ldrb	r3, [r3, #1]
 800d7ac:	461c      	mov	r4, r3
 800d7ae:	497e      	ldr	r1, [pc, #504]	; (800d9a8 <KyushinJudge+0x26c>)
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	00db      	lsls	r3, r3, #3
 800d7b4:	4403      	add	r3, r0
 800d7b6:	4423      	add	r3, r4
 800d7b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d214      	bcs.n	800d7ea <KyushinJudge+0xae>
 800d7c0:	4b77      	ldr	r3, [pc, #476]	; (800d9a0 <KyushinJudge+0x264>)
 800d7c2:	785b      	ldrb	r3, [r3, #1]
 800d7c4:	2b07      	cmp	r3, #7
 800d7c6:	d810      	bhi.n	800d7ea <KyushinJudge+0xae>
				  //前北
				  Pos.Dir = front;
 800d7c8:	4b75      	ldr	r3, [pc, #468]	; (800d9a0 <KyushinJudge+0x264>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800d7ce:	4b74      	ldr	r3, [pc, #464]	; (800d9a0 <KyushinJudge+0x264>)
 800d7d0:	781a      	ldrb	r2, [r3, #0]
 800d7d2:	4b73      	ldr	r3, [pc, #460]	; (800d9a0 <KyushinJudge+0x264>)
 800d7d4:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y+1;
 800d7d6:	4b72      	ldr	r3, [pc, #456]	; (800d9a0 <KyushinJudge+0x264>)
 800d7d8:	785b      	ldrb	r3, [r3, #1]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	4b70      	ldr	r3, [pc, #448]	; (800d9a0 <KyushinJudge+0x264>)
 800d7e0:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = north;
 800d7e2:	4b6f      	ldr	r3, [pc, #444]	; (800d9a0 <KyushinJudge+0x264>)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	72da      	strb	r2, [r3, #11]
 800d7e8:	e096      	b.n	800d918 <KyushinJudge+0x1dc>
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800d7ea:	4b6d      	ldr	r3, [pc, #436]	; (800d9a0 <KyushinJudge+0x264>)
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	4b6b      	ldr	r3, [pc, #428]	; (800d9a0 <KyushinJudge+0x264>)
 800d7f2:	785b      	ldrb	r3, [r3, #1]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	4a6b      	ldr	r2, [pc, #428]	; (800d9a4 <KyushinJudge+0x268>)
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	440b      	add	r3, r1
 800d7fe:	4403      	add	r3, r0
 800d800:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d804:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d130      	bne.n	800d870 <KyushinJudge+0x134>
 800d80e:	4b64      	ldr	r3, [pc, #400]	; (800d9a0 <KyushinJudge+0x264>)
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	1e5a      	subs	r2, r3, #1
 800d814:	4b62      	ldr	r3, [pc, #392]	; (800d9a0 <KyushinJudge+0x264>)
 800d816:	785b      	ldrb	r3, [r3, #1]
 800d818:	4618      	mov	r0, r3
 800d81a:	4963      	ldr	r1, [pc, #396]	; (800d9a8 <KyushinJudge+0x26c>)
 800d81c:	4613      	mov	r3, r2
 800d81e:	00db      	lsls	r3, r3, #3
 800d820:	4413      	add	r3, r2
 800d822:	4403      	add	r3, r0
 800d824:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800d828:	4b5d      	ldr	r3, [pc, #372]	; (800d9a0 <KyushinJudge+0x264>)
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	4618      	mov	r0, r3
 800d82e:	4b5c      	ldr	r3, [pc, #368]	; (800d9a0 <KyushinJudge+0x264>)
 800d830:	785b      	ldrb	r3, [r3, #1]
 800d832:	461c      	mov	r4, r3
 800d834:	495c      	ldr	r1, [pc, #368]	; (800d9a8 <KyushinJudge+0x26c>)
 800d836:	4603      	mov	r3, r0
 800d838:	00db      	lsls	r3, r3, #3
 800d83a:	4403      	add	r3, r0
 800d83c:	4423      	add	r3, r4
 800d83e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d842:	429a      	cmp	r2, r3
 800d844:	d214      	bcs.n	800d870 <KyushinJudge+0x134>
 800d846:	4b56      	ldr	r3, [pc, #344]	; (800d9a0 <KyushinJudge+0x264>)
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d010      	beq.n	800d870 <KyushinJudge+0x134>
				  //左西
    			  Pos.Dir = left;
 800d84e:	4b54      	ldr	r3, [pc, #336]	; (800d9a0 <KyushinJudge+0x264>)
 800d850:	2203      	movs	r2, #3
 800d852:	711a      	strb	r2, [r3, #4]
    			  Pos.NextX = Pos.X - 1;
 800d854:	4b52      	ldr	r3, [pc, #328]	; (800d9a0 <KyushinJudge+0x264>)
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	3b01      	subs	r3, #1
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	4b50      	ldr	r3, [pc, #320]	; (800d9a0 <KyushinJudge+0x264>)
 800d85e:	721a      	strb	r2, [r3, #8]
    			  Pos.NextY = Pos.Y;
 800d860:	4b4f      	ldr	r3, [pc, #316]	; (800d9a0 <KyushinJudge+0x264>)
 800d862:	785a      	ldrb	r2, [r3, #1]
 800d864:	4b4e      	ldr	r3, [pc, #312]	; (800d9a0 <KyushinJudge+0x264>)
 800d866:	725a      	strb	r2, [r3, #9]
    			  Pos.NextCar = west;
 800d868:	4b4d      	ldr	r3, [pc, #308]	; (800d9a0 <KyushinJudge+0x264>)
 800d86a:	2203      	movs	r2, #3
 800d86c:	72da      	strb	r2, [r3, #11]
 800d86e:	e053      	b.n	800d918 <KyushinJudge+0x1dc>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X <  NUMBER_OF_SQUARES-1){
 800d870:	4b4b      	ldr	r3, [pc, #300]	; (800d9a0 <KyushinJudge+0x264>)
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	4619      	mov	r1, r3
 800d876:	4b4a      	ldr	r3, [pc, #296]	; (800d9a0 <KyushinJudge+0x264>)
 800d878:	785b      	ldrb	r3, [r3, #1]
 800d87a:	4618      	mov	r0, r3
 800d87c:	4a49      	ldr	r2, [pc, #292]	; (800d9a4 <KyushinJudge+0x268>)
 800d87e:	460b      	mov	r3, r1
 800d880:	00db      	lsls	r3, r3, #3
 800d882:	440b      	add	r3, r1
 800d884:	4403      	add	r3, r0
 800d886:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d88a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b00      	cmp	r3, #0
 800d892:	d130      	bne.n	800d8f6 <KyushinJudge+0x1ba>
 800d894:	4b42      	ldr	r3, [pc, #264]	; (800d9a0 <KyushinJudge+0x264>)
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	1c5a      	adds	r2, r3, #1
 800d89a:	4b41      	ldr	r3, [pc, #260]	; (800d9a0 <KyushinJudge+0x264>)
 800d89c:	785b      	ldrb	r3, [r3, #1]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	4941      	ldr	r1, [pc, #260]	; (800d9a8 <KyushinJudge+0x26c>)
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	4413      	add	r3, r2
 800d8a8:	4403      	add	r3, r0
 800d8aa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800d8ae:	4b3c      	ldr	r3, [pc, #240]	; (800d9a0 <KyushinJudge+0x264>)
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	4b3a      	ldr	r3, [pc, #232]	; (800d9a0 <KyushinJudge+0x264>)
 800d8b6:	785b      	ldrb	r3, [r3, #1]
 800d8b8:	461c      	mov	r4, r3
 800d8ba:	493b      	ldr	r1, [pc, #236]	; (800d9a8 <KyushinJudge+0x26c>)
 800d8bc:	4603      	mov	r3, r0
 800d8be:	00db      	lsls	r3, r3, #3
 800d8c0:	4403      	add	r3, r0
 800d8c2:	4423      	add	r3, r4
 800d8c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d214      	bcs.n	800d8f6 <KyushinJudge+0x1ba>
 800d8cc:	4b34      	ldr	r3, [pc, #208]	; (800d9a0 <KyushinJudge+0x264>)
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	2b07      	cmp	r3, #7
 800d8d2:	d810      	bhi.n	800d8f6 <KyushinJudge+0x1ba>
				  //右東
				  Pos.Dir = right;//この方角で右と決まった時点で次の座標が決まっている
 800d8d4:	4b32      	ldr	r3, [pc, #200]	; (800d9a0 <KyushinJudge+0x264>)
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X + 1;
 800d8da:	4b31      	ldr	r3, [pc, #196]	; (800d9a0 <KyushinJudge+0x264>)
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	b2da      	uxtb	r2, r3
 800d8e2:	4b2f      	ldr	r3, [pc, #188]	; (800d9a0 <KyushinJudge+0x264>)
 800d8e4:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800d8e6:	4b2e      	ldr	r3, [pc, #184]	; (800d9a0 <KyushinJudge+0x264>)
 800d8e8:	785a      	ldrb	r2, [r3, #1]
 800d8ea:	4b2d      	ldr	r3, [pc, #180]	; (800d9a0 <KyushinJudge+0x264>)
 800d8ec:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = east;
 800d8ee:	4b2c      	ldr	r3, [pc, #176]	; (800d9a0 <KyushinJudge+0x264>)
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	72da      	strb	r2, [r3, #11]
 800d8f4:	e010      	b.n	800d918 <KyushinJudge+0x1dc>
			  }
			  else {
				  Pos.Dir = back;
 800d8f6:	4b2a      	ldr	r3, [pc, #168]	; (800d9a0 <KyushinJudge+0x264>)
 800d8f8:	2202      	movs	r2, #2
 800d8fa:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800d8fc:	4b28      	ldr	r3, [pc, #160]	; (800d9a0 <KyushinJudge+0x264>)
 800d8fe:	781a      	ldrb	r2, [r3, #0]
 800d900:	4b27      	ldr	r3, [pc, #156]	; (800d9a0 <KyushinJudge+0x264>)
 800d902:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y - 1;
 800d904:	4b26      	ldr	r3, [pc, #152]	; (800d9a0 <KyushinJudge+0x264>)
 800d906:	785b      	ldrb	r3, [r3, #1]
 800d908:	3b01      	subs	r3, #1
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	4b24      	ldr	r3, [pc, #144]	; (800d9a0 <KyushinJudge+0x264>)
 800d90e:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = south;
 800d910:	4b23      	ldr	r3, [pc, #140]	; (800d9a0 <KyushinJudge+0x264>)
 800d912:	2202      	movs	r2, #2
 800d914:	72da      	strb	r2, [r3, #11]
				  //後南
			  }
			  break;
 800d916:	e29e      	b.n	800de56 <KyushinJudge+0x71a>
 800d918:	e29d      	b.n	800de56 <KyushinJudge+0x71a>

		  case east:

			  if(Wall[Pos.X][Pos.Y].east == NOWALL && walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800d91a:	4b21      	ldr	r3, [pc, #132]	; (800d9a0 <KyushinJudge+0x264>)
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	4619      	mov	r1, r3
 800d920:	4b1f      	ldr	r3, [pc, #124]	; (800d9a0 <KyushinJudge+0x264>)
 800d922:	785b      	ldrb	r3, [r3, #1]
 800d924:	4618      	mov	r0, r3
 800d926:	4a1f      	ldr	r2, [pc, #124]	; (800d9a4 <KyushinJudge+0x268>)
 800d928:	460b      	mov	r3, r1
 800d92a:	00db      	lsls	r3, r3, #3
 800d92c:	440b      	add	r3, r1
 800d92e:	4403      	add	r3, r0
 800d930:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d934:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d136      	bne.n	800d9ac <KyushinJudge+0x270>
 800d93e:	4b18      	ldr	r3, [pc, #96]	; (800d9a0 <KyushinJudge+0x264>)
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	1c5a      	adds	r2, r3, #1
 800d944:	4b16      	ldr	r3, [pc, #88]	; (800d9a0 <KyushinJudge+0x264>)
 800d946:	785b      	ldrb	r3, [r3, #1]
 800d948:	4618      	mov	r0, r3
 800d94a:	4917      	ldr	r1, [pc, #92]	; (800d9a8 <KyushinJudge+0x26c>)
 800d94c:	4613      	mov	r3, r2
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	4413      	add	r3, r2
 800d952:	4403      	add	r3, r0
 800d954:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800d958:	4b11      	ldr	r3, [pc, #68]	; (800d9a0 <KyushinJudge+0x264>)
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	4618      	mov	r0, r3
 800d95e:	4b10      	ldr	r3, [pc, #64]	; (800d9a0 <KyushinJudge+0x264>)
 800d960:	785b      	ldrb	r3, [r3, #1]
 800d962:	461c      	mov	r4, r3
 800d964:	4910      	ldr	r1, [pc, #64]	; (800d9a8 <KyushinJudge+0x26c>)
 800d966:	4603      	mov	r3, r0
 800d968:	00db      	lsls	r3, r3, #3
 800d96a:	4403      	add	r3, r0
 800d96c:	4423      	add	r3, r4
 800d96e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d972:	429a      	cmp	r2, r3
 800d974:	d21a      	bcs.n	800d9ac <KyushinJudge+0x270>
 800d976:	4b0a      	ldr	r3, [pc, #40]	; (800d9a0 <KyushinJudge+0x264>)
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	2b07      	cmp	r3, #7
 800d97c:	d816      	bhi.n	800d9ac <KyushinJudge+0x270>
				  //前東
				  Pos.Dir = front;
 800d97e:	4b08      	ldr	r3, [pc, #32]	; (800d9a0 <KyushinJudge+0x264>)
 800d980:	2200      	movs	r2, #0
 800d982:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X + 1;
 800d984:	4b06      	ldr	r3, [pc, #24]	; (800d9a0 <KyushinJudge+0x264>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	3301      	adds	r3, #1
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	4b04      	ldr	r3, [pc, #16]	; (800d9a0 <KyushinJudge+0x264>)
 800d98e:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800d990:	4b03      	ldr	r3, [pc, #12]	; (800d9a0 <KyushinJudge+0x264>)
 800d992:	785a      	ldrb	r2, [r3, #1]
 800d994:	4b02      	ldr	r3, [pc, #8]	; (800d9a0 <KyushinJudge+0x264>)
 800d996:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = east;
 800d998:	4b01      	ldr	r3, [pc, #4]	; (800d9a0 <KyushinJudge+0x264>)
 800d99a:	2201      	movs	r2, #1
 800d99c:	72da      	strb	r2, [r3, #11]
 800d99e:	e09c      	b.n	800dada <KyushinJudge+0x39e>
 800d9a0:	20000000 	.word	0x20000000
 800d9a4:	200006e8 	.word	0x200006e8
 800d9a8:	20000570 	.word	0x20000570
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL && walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800d9ac:	4b8e      	ldr	r3, [pc, #568]	; (800dbe8 <KyushinJudge+0x4ac>)
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	4b8d      	ldr	r3, [pc, #564]	; (800dbe8 <KyushinJudge+0x4ac>)
 800d9b4:	785b      	ldrb	r3, [r3, #1]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	4a8c      	ldr	r2, [pc, #560]	; (800dbec <KyushinJudge+0x4b0>)
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	00db      	lsls	r3, r3, #3
 800d9be:	440b      	add	r3, r1
 800d9c0:	4403      	add	r3, r0
 800d9c2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d9c6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d130      	bne.n	800da32 <KyushinJudge+0x2f6>
 800d9d0:	4b85      	ldr	r3, [pc, #532]	; (800dbe8 <KyushinJudge+0x4ac>)
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	4b84      	ldr	r3, [pc, #528]	; (800dbe8 <KyushinJudge+0x4ac>)
 800d9d8:	785b      	ldrb	r3, [r3, #1]
 800d9da:	1c5a      	adds	r2, r3, #1
 800d9dc:	4984      	ldr	r1, [pc, #528]	; (800dbf0 <KyushinJudge+0x4b4>)
 800d9de:	4603      	mov	r3, r0
 800d9e0:	00db      	lsls	r3, r3, #3
 800d9e2:	4403      	add	r3, r0
 800d9e4:	4413      	add	r3, r2
 800d9e6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800d9ea:	4b7f      	ldr	r3, [pc, #508]	; (800dbe8 <KyushinJudge+0x4ac>)
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	4b7d      	ldr	r3, [pc, #500]	; (800dbe8 <KyushinJudge+0x4ac>)
 800d9f2:	785b      	ldrb	r3, [r3, #1]
 800d9f4:	461c      	mov	r4, r3
 800d9f6:	497e      	ldr	r1, [pc, #504]	; (800dbf0 <KyushinJudge+0x4b4>)
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	00db      	lsls	r3, r3, #3
 800d9fc:	4403      	add	r3, r0
 800d9fe:	4423      	add	r3, r4
 800da00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800da04:	429a      	cmp	r2, r3
 800da06:	d214      	bcs.n	800da32 <KyushinJudge+0x2f6>
 800da08:	4b77      	ldr	r3, [pc, #476]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da0a:	785b      	ldrb	r3, [r3, #1]
 800da0c:	2b07      	cmp	r3, #7
 800da0e:	d810      	bhi.n	800da32 <KyushinJudge+0x2f6>
				  //左?��?

    			  Pos.Dir = left;
 800da10:	4b75      	ldr	r3, [pc, #468]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da12:	2203      	movs	r2, #3
 800da14:	711a      	strb	r2, [r3, #4]
    			  Pos.NextX = Pos.X;
 800da16:	4b74      	ldr	r3, [pc, #464]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da18:	781a      	ldrb	r2, [r3, #0]
 800da1a:	4b73      	ldr	r3, [pc, #460]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da1c:	721a      	strb	r2, [r3, #8]
    			  Pos.NextY = Pos.Y+1;
 800da1e:	4b72      	ldr	r3, [pc, #456]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da20:	785b      	ldrb	r3, [r3, #1]
 800da22:	3301      	adds	r3, #1
 800da24:	b2da      	uxtb	r2, r3
 800da26:	4b70      	ldr	r3, [pc, #448]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da28:	725a      	strb	r2, [r3, #9]
    			  Pos.NextCar = north;
 800da2a:	4b6f      	ldr	r3, [pc, #444]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da2c:	2200      	movs	r2, #0
 800da2e:	72da      	strb	r2, [r3, #11]
 800da30:	e053      	b.n	800dada <KyushinJudge+0x39e>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL && walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800da32:	4b6d      	ldr	r3, [pc, #436]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	4619      	mov	r1, r3
 800da38:	4b6b      	ldr	r3, [pc, #428]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da3a:	785b      	ldrb	r3, [r3, #1]
 800da3c:	4618      	mov	r0, r3
 800da3e:	4a6b      	ldr	r2, [pc, #428]	; (800dbec <KyushinJudge+0x4b0>)
 800da40:	460b      	mov	r3, r1
 800da42:	00db      	lsls	r3, r3, #3
 800da44:	440b      	add	r3, r1
 800da46:	4403      	add	r3, r0
 800da48:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800da4c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800da50:	b2db      	uxtb	r3, r3
 800da52:	2b00      	cmp	r3, #0
 800da54:	d130      	bne.n	800dab8 <KyushinJudge+0x37c>
 800da56:	4b64      	ldr	r3, [pc, #400]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	4618      	mov	r0, r3
 800da5c:	4b62      	ldr	r3, [pc, #392]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da5e:	785b      	ldrb	r3, [r3, #1]
 800da60:	1e5a      	subs	r2, r3, #1
 800da62:	4963      	ldr	r1, [pc, #396]	; (800dbf0 <KyushinJudge+0x4b4>)
 800da64:	4603      	mov	r3, r0
 800da66:	00db      	lsls	r3, r3, #3
 800da68:	4403      	add	r3, r0
 800da6a:	4413      	add	r3, r2
 800da6c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800da70:	4b5d      	ldr	r3, [pc, #372]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	4618      	mov	r0, r3
 800da76:	4b5c      	ldr	r3, [pc, #368]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da78:	785b      	ldrb	r3, [r3, #1]
 800da7a:	461c      	mov	r4, r3
 800da7c:	495c      	ldr	r1, [pc, #368]	; (800dbf0 <KyushinJudge+0x4b4>)
 800da7e:	4603      	mov	r3, r0
 800da80:	00db      	lsls	r3, r3, #3
 800da82:	4403      	add	r3, r0
 800da84:	4423      	add	r3, r4
 800da86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d214      	bcs.n	800dab8 <KyushinJudge+0x37c>
 800da8e:	4b56      	ldr	r3, [pc, #344]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da90:	785b      	ldrb	r3, [r3, #1]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d010      	beq.n	800dab8 <KyushinJudge+0x37c>
				  //右?��?
				  Pos.Dir = right;
 800da96:	4b54      	ldr	r3, [pc, #336]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da98:	2201      	movs	r2, #1
 800da9a:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800da9c:	4b52      	ldr	r3, [pc, #328]	; (800dbe8 <KyushinJudge+0x4ac>)
 800da9e:	781a      	ldrb	r2, [r3, #0]
 800daa0:	4b51      	ldr	r3, [pc, #324]	; (800dbe8 <KyushinJudge+0x4ac>)
 800daa2:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y - 1;
 800daa4:	4b50      	ldr	r3, [pc, #320]	; (800dbe8 <KyushinJudge+0x4ac>)
 800daa6:	785b      	ldrb	r3, [r3, #1]
 800daa8:	3b01      	subs	r3, #1
 800daaa:	b2da      	uxtb	r2, r3
 800daac:	4b4e      	ldr	r3, [pc, #312]	; (800dbe8 <KyushinJudge+0x4ac>)
 800daae:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = south;
 800dab0:	4b4d      	ldr	r3, [pc, #308]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dab2:	2202      	movs	r2, #2
 800dab4:	72da      	strb	r2, [r3, #11]
 800dab6:	e010      	b.n	800dada <KyushinJudge+0x39e>
			  }
			  else {
				  //後西
				  Pos.Dir = back;
 800dab8:	4b4b      	ldr	r3, [pc, #300]	; (800dbe8 <KyushinJudge+0x4ac>)
 800daba:	2202      	movs	r2, #2
 800dabc:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X - 1;
 800dabe:	4b4a      	ldr	r3, [pc, #296]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	3b01      	subs	r3, #1
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	4b48      	ldr	r3, [pc, #288]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dac8:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800daca:	4b47      	ldr	r3, [pc, #284]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dacc:	785a      	ldrb	r2, [r3, #1]
 800dace:	4b46      	ldr	r3, [pc, #280]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dad0:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = west;
 800dad2:	4b45      	ldr	r3, [pc, #276]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dad4:	2203      	movs	r2, #3
 800dad6:	72da      	strb	r2, [r3, #11]
			  }
			  break;
 800dad8:	e1bd      	b.n	800de56 <KyushinJudge+0x71a>
 800dada:	e1bc      	b.n	800de56 <KyushinJudge+0x71a>

		  case south:

			  if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800dadc:	4b42      	ldr	r3, [pc, #264]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	4619      	mov	r1, r3
 800dae2:	4b41      	ldr	r3, [pc, #260]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dae4:	785b      	ldrb	r3, [r3, #1]
 800dae6:	4618      	mov	r0, r3
 800dae8:	4a40      	ldr	r2, [pc, #256]	; (800dbec <KyushinJudge+0x4b0>)
 800daea:	460b      	mov	r3, r1
 800daec:	00db      	lsls	r3, r3, #3
 800daee:	440b      	add	r3, r1
 800daf0:	4403      	add	r3, r0
 800daf2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800daf6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d130      	bne.n	800db62 <KyushinJudge+0x426>
 800db00:	4b39      	ldr	r3, [pc, #228]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	4618      	mov	r0, r3
 800db06:	4b38      	ldr	r3, [pc, #224]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db08:	785b      	ldrb	r3, [r3, #1]
 800db0a:	1e5a      	subs	r2, r3, #1
 800db0c:	4938      	ldr	r1, [pc, #224]	; (800dbf0 <KyushinJudge+0x4b4>)
 800db0e:	4603      	mov	r3, r0
 800db10:	00db      	lsls	r3, r3, #3
 800db12:	4403      	add	r3, r0
 800db14:	4413      	add	r3, r2
 800db16:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800db1a:	4b33      	ldr	r3, [pc, #204]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	4618      	mov	r0, r3
 800db20:	4b31      	ldr	r3, [pc, #196]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db22:	785b      	ldrb	r3, [r3, #1]
 800db24:	461c      	mov	r4, r3
 800db26:	4932      	ldr	r1, [pc, #200]	; (800dbf0 <KyushinJudge+0x4b4>)
 800db28:	4603      	mov	r3, r0
 800db2a:	00db      	lsls	r3, r3, #3
 800db2c:	4403      	add	r3, r0
 800db2e:	4423      	add	r3, r4
 800db30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800db34:	429a      	cmp	r2, r3
 800db36:	d214      	bcs.n	800db62 <KyushinJudge+0x426>
 800db38:	4b2b      	ldr	r3, [pc, #172]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db3a:	785b      	ldrb	r3, [r3, #1]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d010      	beq.n	800db62 <KyushinJudge+0x426>
				  //前南
				  Pos.Dir = front;
 800db40:	4b29      	ldr	r3, [pc, #164]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db42:	2200      	movs	r2, #0
 800db44:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800db46:	4b28      	ldr	r3, [pc, #160]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db48:	781a      	ldrb	r2, [r3, #0]
 800db4a:	4b27      	ldr	r3, [pc, #156]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db4c:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y - 1;
 800db4e:	4b26      	ldr	r3, [pc, #152]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db50:	785b      	ldrb	r3, [r3, #1]
 800db52:	3b01      	subs	r3, #1
 800db54:	b2da      	uxtb	r2, r3
 800db56:	4b24      	ldr	r3, [pc, #144]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db58:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = south;
 800db5a:	4b23      	ldr	r3, [pc, #140]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db5c:	2202      	movs	r2, #2
 800db5e:	72da      	strb	r2, [r3, #11]
 800db60:	e09c      	b.n	800dc9c <KyushinJudge+0x560>
			  }
			  else if(Wall[Pos.X][Pos.Y].east == NOWALL &&walk_map[Pos.X+1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X < NUMBER_OF_SQUARES-1){
 800db62:	4b21      	ldr	r3, [pc, #132]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	4619      	mov	r1, r3
 800db68:	4b1f      	ldr	r3, [pc, #124]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db6a:	785b      	ldrb	r3, [r3, #1]
 800db6c:	4618      	mov	r0, r3
 800db6e:	4a1f      	ldr	r2, [pc, #124]	; (800dbec <KyushinJudge+0x4b0>)
 800db70:	460b      	mov	r3, r1
 800db72:	00db      	lsls	r3, r3, #3
 800db74:	440b      	add	r3, r1
 800db76:	4403      	add	r3, r0
 800db78:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800db7c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800db80:	b2db      	uxtb	r3, r3
 800db82:	2b00      	cmp	r3, #0
 800db84:	d136      	bne.n	800dbf4 <KyushinJudge+0x4b8>
 800db86:	4b18      	ldr	r3, [pc, #96]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	1c5a      	adds	r2, r3, #1
 800db8c:	4b16      	ldr	r3, [pc, #88]	; (800dbe8 <KyushinJudge+0x4ac>)
 800db8e:	785b      	ldrb	r3, [r3, #1]
 800db90:	4618      	mov	r0, r3
 800db92:	4917      	ldr	r1, [pc, #92]	; (800dbf0 <KyushinJudge+0x4b4>)
 800db94:	4613      	mov	r3, r2
 800db96:	00db      	lsls	r3, r3, #3
 800db98:	4413      	add	r3, r2
 800db9a:	4403      	add	r3, r0
 800db9c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800dba0:	4b11      	ldr	r3, [pc, #68]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	4618      	mov	r0, r3
 800dba6:	4b10      	ldr	r3, [pc, #64]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dba8:	785b      	ldrb	r3, [r3, #1]
 800dbaa:	461c      	mov	r4, r3
 800dbac:	4910      	ldr	r1, [pc, #64]	; (800dbf0 <KyushinJudge+0x4b4>)
 800dbae:	4603      	mov	r3, r0
 800dbb0:	00db      	lsls	r3, r3, #3
 800dbb2:	4403      	add	r3, r0
 800dbb4:	4423      	add	r3, r4
 800dbb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d21a      	bcs.n	800dbf4 <KyushinJudge+0x4b8>
 800dbbe:	4b0a      	ldr	r3, [pc, #40]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	2b07      	cmp	r3, #7
 800dbc4:	d816      	bhi.n	800dbf4 <KyushinJudge+0x4b8>
				  //左東
    			  Pos.Dir = left;
 800dbc6:	4b08      	ldr	r3, [pc, #32]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dbc8:	2203      	movs	r2, #3
 800dbca:	711a      	strb	r2, [r3, #4]
    			  Pos.NextX = Pos.X + 1;
 800dbcc:	4b06      	ldr	r3, [pc, #24]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	4b04      	ldr	r3, [pc, #16]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dbd6:	721a      	strb	r2, [r3, #8]
    			  Pos.NextY = Pos.Y;
 800dbd8:	4b03      	ldr	r3, [pc, #12]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dbda:	785a      	ldrb	r2, [r3, #1]
 800dbdc:	4b02      	ldr	r3, [pc, #8]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dbde:	725a      	strb	r2, [r3, #9]
    			  Pos.NextCar = east;
 800dbe0:	4b01      	ldr	r3, [pc, #4]	; (800dbe8 <KyushinJudge+0x4ac>)
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	72da      	strb	r2, [r3, #11]
 800dbe6:	e059      	b.n	800dc9c <KyushinJudge+0x560>
 800dbe8:	20000000 	.word	0x20000000
 800dbec:	200006e8 	.word	0x200006e8
 800dbf0:	20000570 	.word	0x20000570
			  }
			  else if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800dbf4:	4b9a      	ldr	r3, [pc, #616]	; (800de60 <KyushinJudge+0x724>)
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	4b99      	ldr	r3, [pc, #612]	; (800de60 <KyushinJudge+0x724>)
 800dbfc:	785b      	ldrb	r3, [r3, #1]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	4a98      	ldr	r2, [pc, #608]	; (800de64 <KyushinJudge+0x728>)
 800dc02:	460b      	mov	r3, r1
 800dc04:	00db      	lsls	r3, r3, #3
 800dc06:	440b      	add	r3, r1
 800dc08:	4403      	add	r3, r0
 800dc0a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dc0e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d130      	bne.n	800dc7a <KyushinJudge+0x53e>
 800dc18:	4b91      	ldr	r3, [pc, #580]	; (800de60 <KyushinJudge+0x724>)
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	1e5a      	subs	r2, r3, #1
 800dc1e:	4b90      	ldr	r3, [pc, #576]	; (800de60 <KyushinJudge+0x724>)
 800dc20:	785b      	ldrb	r3, [r3, #1]
 800dc22:	4618      	mov	r0, r3
 800dc24:	4990      	ldr	r1, [pc, #576]	; (800de68 <KyushinJudge+0x72c>)
 800dc26:	4613      	mov	r3, r2
 800dc28:	00db      	lsls	r3, r3, #3
 800dc2a:	4413      	add	r3, r2
 800dc2c:	4403      	add	r3, r0
 800dc2e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800dc32:	4b8b      	ldr	r3, [pc, #556]	; (800de60 <KyushinJudge+0x724>)
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	4618      	mov	r0, r3
 800dc38:	4b89      	ldr	r3, [pc, #548]	; (800de60 <KyushinJudge+0x724>)
 800dc3a:	785b      	ldrb	r3, [r3, #1]
 800dc3c:	461c      	mov	r4, r3
 800dc3e:	498a      	ldr	r1, [pc, #552]	; (800de68 <KyushinJudge+0x72c>)
 800dc40:	4603      	mov	r3, r0
 800dc42:	00db      	lsls	r3, r3, #3
 800dc44:	4403      	add	r3, r0
 800dc46:	4423      	add	r3, r4
 800dc48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d214      	bcs.n	800dc7a <KyushinJudge+0x53e>
 800dc50:	4b83      	ldr	r3, [pc, #524]	; (800de60 <KyushinJudge+0x724>)
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d010      	beq.n	800dc7a <KyushinJudge+0x53e>
				  //右西
				  Pos.Dir = right;
 800dc58:	4b81      	ldr	r3, [pc, #516]	; (800de60 <KyushinJudge+0x724>)
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X - 1;
 800dc5e:	4b80      	ldr	r3, [pc, #512]	; (800de60 <KyushinJudge+0x724>)
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	3b01      	subs	r3, #1
 800dc64:	b2da      	uxtb	r2, r3
 800dc66:	4b7e      	ldr	r3, [pc, #504]	; (800de60 <KyushinJudge+0x724>)
 800dc68:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800dc6a:	4b7d      	ldr	r3, [pc, #500]	; (800de60 <KyushinJudge+0x724>)
 800dc6c:	785a      	ldrb	r2, [r3, #1]
 800dc6e:	4b7c      	ldr	r3, [pc, #496]	; (800de60 <KyushinJudge+0x724>)
 800dc70:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = west;
 800dc72:	4b7b      	ldr	r3, [pc, #492]	; (800de60 <KyushinJudge+0x724>)
 800dc74:	2203      	movs	r2, #3
 800dc76:	72da      	strb	r2, [r3, #11]
 800dc78:	e010      	b.n	800dc9c <KyushinJudge+0x560>
			  }
			  else {
				  //後北
				  Pos.Dir = back;
 800dc7a:	4b79      	ldr	r3, [pc, #484]	; (800de60 <KyushinJudge+0x724>)
 800dc7c:	2202      	movs	r2, #2
 800dc7e:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800dc80:	4b77      	ldr	r3, [pc, #476]	; (800de60 <KyushinJudge+0x724>)
 800dc82:	781a      	ldrb	r2, [r3, #0]
 800dc84:	4b76      	ldr	r3, [pc, #472]	; (800de60 <KyushinJudge+0x724>)
 800dc86:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y+1;
 800dc88:	4b75      	ldr	r3, [pc, #468]	; (800de60 <KyushinJudge+0x724>)
 800dc8a:	785b      	ldrb	r3, [r3, #1]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	b2da      	uxtb	r2, r3
 800dc90:	4b73      	ldr	r3, [pc, #460]	; (800de60 <KyushinJudge+0x724>)
 800dc92:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = north;
 800dc94:	4b72      	ldr	r3, [pc, #456]	; (800de60 <KyushinJudge+0x724>)
 800dc96:	2200      	movs	r2, #0
 800dc98:	72da      	strb	r2, [r3, #11]
			  }
			  break;
 800dc9a:	e0dc      	b.n	800de56 <KyushinJudge+0x71a>
 800dc9c:	e0db      	b.n	800de56 <KyushinJudge+0x71a>

		  case west:

			  if(Wall[Pos.X][Pos.Y].west == NOWALL &&walk_map[Pos.X-1][Pos.Y] < walk_map[Pos.X][Pos.Y] && Pos.X > 0){
 800dc9e:	4b70      	ldr	r3, [pc, #448]	; (800de60 <KyushinJudge+0x724>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	4619      	mov	r1, r3
 800dca4:	4b6e      	ldr	r3, [pc, #440]	; (800de60 <KyushinJudge+0x724>)
 800dca6:	785b      	ldrb	r3, [r3, #1]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	4a6e      	ldr	r2, [pc, #440]	; (800de64 <KyushinJudge+0x728>)
 800dcac:	460b      	mov	r3, r1
 800dcae:	00db      	lsls	r3, r3, #3
 800dcb0:	440b      	add	r3, r1
 800dcb2:	4403      	add	r3, r0
 800dcb4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dcb8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d130      	bne.n	800dd24 <KyushinJudge+0x5e8>
 800dcc2:	4b67      	ldr	r3, [pc, #412]	; (800de60 <KyushinJudge+0x724>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	1e5a      	subs	r2, r3, #1
 800dcc8:	4b65      	ldr	r3, [pc, #404]	; (800de60 <KyushinJudge+0x724>)
 800dcca:	785b      	ldrb	r3, [r3, #1]
 800dccc:	4618      	mov	r0, r3
 800dcce:	4966      	ldr	r1, [pc, #408]	; (800de68 <KyushinJudge+0x72c>)
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	00db      	lsls	r3, r3, #3
 800dcd4:	4413      	add	r3, r2
 800dcd6:	4403      	add	r3, r0
 800dcd8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800dcdc:	4b60      	ldr	r3, [pc, #384]	; (800de60 <KyushinJudge+0x724>)
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	4618      	mov	r0, r3
 800dce2:	4b5f      	ldr	r3, [pc, #380]	; (800de60 <KyushinJudge+0x724>)
 800dce4:	785b      	ldrb	r3, [r3, #1]
 800dce6:	461c      	mov	r4, r3
 800dce8:	495f      	ldr	r1, [pc, #380]	; (800de68 <KyushinJudge+0x72c>)
 800dcea:	4603      	mov	r3, r0
 800dcec:	00db      	lsls	r3, r3, #3
 800dcee:	4403      	add	r3, r0
 800dcf0:	4423      	add	r3, r4
 800dcf2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d214      	bcs.n	800dd24 <KyushinJudge+0x5e8>
 800dcfa:	4b59      	ldr	r3, [pc, #356]	; (800de60 <KyushinJudge+0x724>)
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d010      	beq.n	800dd24 <KyushinJudge+0x5e8>
				  //前西
				  Pos.Dir = front;
 800dd02:	4b57      	ldr	r3, [pc, #348]	; (800de60 <KyushinJudge+0x724>)
 800dd04:	2200      	movs	r2, #0
 800dd06:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X - 1;
 800dd08:	4b55      	ldr	r3, [pc, #340]	; (800de60 <KyushinJudge+0x724>)
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	4b53      	ldr	r3, [pc, #332]	; (800de60 <KyushinJudge+0x724>)
 800dd12:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800dd14:	4b52      	ldr	r3, [pc, #328]	; (800de60 <KyushinJudge+0x724>)
 800dd16:	785a      	ldrb	r2, [r3, #1]
 800dd18:	4b51      	ldr	r3, [pc, #324]	; (800de60 <KyushinJudge+0x724>)
 800dd1a:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = west;
 800dd1c:	4b50      	ldr	r3, [pc, #320]	; (800de60 <KyushinJudge+0x724>)
 800dd1e:	2203      	movs	r2, #3
 800dd20:	72da      	strb	r2, [r3, #11]
 800dd22:	e096      	b.n	800de52 <KyushinJudge+0x716>
			  }
			  else if(Wall[Pos.X][Pos.Y].south == NOWALL &&walk_map[Pos.X][Pos.Y-1] < walk_map[Pos.X][Pos.Y] && Pos.Y > 0){
 800dd24:	4b4e      	ldr	r3, [pc, #312]	; (800de60 <KyushinJudge+0x724>)
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4b4d      	ldr	r3, [pc, #308]	; (800de60 <KyushinJudge+0x724>)
 800dd2c:	785b      	ldrb	r3, [r3, #1]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	4a4c      	ldr	r2, [pc, #304]	; (800de64 <KyushinJudge+0x728>)
 800dd32:	460b      	mov	r3, r1
 800dd34:	00db      	lsls	r3, r3, #3
 800dd36:	440b      	add	r3, r1
 800dd38:	4403      	add	r3, r0
 800dd3a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dd3e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d130      	bne.n	800ddaa <KyushinJudge+0x66e>
 800dd48:	4b45      	ldr	r3, [pc, #276]	; (800de60 <KyushinJudge+0x724>)
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	4b44      	ldr	r3, [pc, #272]	; (800de60 <KyushinJudge+0x724>)
 800dd50:	785b      	ldrb	r3, [r3, #1]
 800dd52:	1e5a      	subs	r2, r3, #1
 800dd54:	4944      	ldr	r1, [pc, #272]	; (800de68 <KyushinJudge+0x72c>)
 800dd56:	4603      	mov	r3, r0
 800dd58:	00db      	lsls	r3, r3, #3
 800dd5a:	4403      	add	r3, r0
 800dd5c:	4413      	add	r3, r2
 800dd5e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800dd62:	4b3f      	ldr	r3, [pc, #252]	; (800de60 <KyushinJudge+0x724>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	4618      	mov	r0, r3
 800dd68:	4b3d      	ldr	r3, [pc, #244]	; (800de60 <KyushinJudge+0x724>)
 800dd6a:	785b      	ldrb	r3, [r3, #1]
 800dd6c:	461c      	mov	r4, r3
 800dd6e:	493e      	ldr	r1, [pc, #248]	; (800de68 <KyushinJudge+0x72c>)
 800dd70:	4603      	mov	r3, r0
 800dd72:	00db      	lsls	r3, r3, #3
 800dd74:	4403      	add	r3, r0
 800dd76:	4423      	add	r3, r4
 800dd78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d214      	bcs.n	800ddaa <KyushinJudge+0x66e>
 800dd80:	4b37      	ldr	r3, [pc, #220]	; (800de60 <KyushinJudge+0x724>)
 800dd82:	785b      	ldrb	r3, [r3, #1]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d010      	beq.n	800ddaa <KyushinJudge+0x66e>
				  //左?��?
    			  Pos.Dir = left;
 800dd88:	4b35      	ldr	r3, [pc, #212]	; (800de60 <KyushinJudge+0x724>)
 800dd8a:	2203      	movs	r2, #3
 800dd8c:	711a      	strb	r2, [r3, #4]
    			  Pos.NextX = Pos.X;
 800dd8e:	4b34      	ldr	r3, [pc, #208]	; (800de60 <KyushinJudge+0x724>)
 800dd90:	781a      	ldrb	r2, [r3, #0]
 800dd92:	4b33      	ldr	r3, [pc, #204]	; (800de60 <KyushinJudge+0x724>)
 800dd94:	721a      	strb	r2, [r3, #8]
    			  Pos.NextY = Pos.Y - 1;
 800dd96:	4b32      	ldr	r3, [pc, #200]	; (800de60 <KyushinJudge+0x724>)
 800dd98:	785b      	ldrb	r3, [r3, #1]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	b2da      	uxtb	r2, r3
 800dd9e:	4b30      	ldr	r3, [pc, #192]	; (800de60 <KyushinJudge+0x724>)
 800dda0:	725a      	strb	r2, [r3, #9]
    			  Pos.NextCar = south;
 800dda2:	4b2f      	ldr	r3, [pc, #188]	; (800de60 <KyushinJudge+0x724>)
 800dda4:	2202      	movs	r2, #2
 800dda6:	72da      	strb	r2, [r3, #11]
 800dda8:	e053      	b.n	800de52 <KyushinJudge+0x716>
			  }
			  else if(Wall[Pos.X][Pos.Y].north == NOWALL &&walk_map[Pos.X][Pos.Y+1] < walk_map[Pos.X][Pos.Y] && Pos.Y < NUMBER_OF_SQUARES-1){
 800ddaa:	4b2d      	ldr	r3, [pc, #180]	; (800de60 <KyushinJudge+0x724>)
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	4619      	mov	r1, r3
 800ddb0:	4b2b      	ldr	r3, [pc, #172]	; (800de60 <KyushinJudge+0x724>)
 800ddb2:	785b      	ldrb	r3, [r3, #1]
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	4a2b      	ldr	r2, [pc, #172]	; (800de64 <KyushinJudge+0x728>)
 800ddb8:	460b      	mov	r3, r1
 800ddba:	00db      	lsls	r3, r3, #3
 800ddbc:	440b      	add	r3, r1
 800ddbe:	4403      	add	r3, r0
 800ddc0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ddc4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d130      	bne.n	800de30 <KyushinJudge+0x6f4>
 800ddce:	4b24      	ldr	r3, [pc, #144]	; (800de60 <KyushinJudge+0x724>)
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	4b22      	ldr	r3, [pc, #136]	; (800de60 <KyushinJudge+0x724>)
 800ddd6:	785b      	ldrb	r3, [r3, #1]
 800ddd8:	1c5a      	adds	r2, r3, #1
 800ddda:	4923      	ldr	r1, [pc, #140]	; (800de68 <KyushinJudge+0x72c>)
 800dddc:	4603      	mov	r3, r0
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	4403      	add	r3, r0
 800dde2:	4413      	add	r3, r2
 800dde4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800dde8:	4b1d      	ldr	r3, [pc, #116]	; (800de60 <KyushinJudge+0x724>)
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	4618      	mov	r0, r3
 800ddee:	4b1c      	ldr	r3, [pc, #112]	; (800de60 <KyushinJudge+0x724>)
 800ddf0:	785b      	ldrb	r3, [r3, #1]
 800ddf2:	461c      	mov	r4, r3
 800ddf4:	491c      	ldr	r1, [pc, #112]	; (800de68 <KyushinJudge+0x72c>)
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	00db      	lsls	r3, r3, #3
 800ddfa:	4403      	add	r3, r0
 800ddfc:	4423      	add	r3, r4
 800ddfe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800de02:	429a      	cmp	r2, r3
 800de04:	d214      	bcs.n	800de30 <KyushinJudge+0x6f4>
 800de06:	4b16      	ldr	r3, [pc, #88]	; (800de60 <KyushinJudge+0x724>)
 800de08:	785b      	ldrb	r3, [r3, #1]
 800de0a:	2b07      	cmp	r3, #7
 800de0c:	d810      	bhi.n	800de30 <KyushinJudge+0x6f4>
				  //右?��?
				  Pos.Dir = right;
 800de0e:	4b14      	ldr	r3, [pc, #80]	; (800de60 <KyushinJudge+0x724>)
 800de10:	2201      	movs	r2, #1
 800de12:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X;
 800de14:	4b12      	ldr	r3, [pc, #72]	; (800de60 <KyushinJudge+0x724>)
 800de16:	781a      	ldrb	r2, [r3, #0]
 800de18:	4b11      	ldr	r3, [pc, #68]	; (800de60 <KyushinJudge+0x724>)
 800de1a:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y+1;
 800de1c:	4b10      	ldr	r3, [pc, #64]	; (800de60 <KyushinJudge+0x724>)
 800de1e:	785b      	ldrb	r3, [r3, #1]
 800de20:	3301      	adds	r3, #1
 800de22:	b2da      	uxtb	r2, r3
 800de24:	4b0e      	ldr	r3, [pc, #56]	; (800de60 <KyushinJudge+0x724>)
 800de26:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = north;
 800de28:	4b0d      	ldr	r3, [pc, #52]	; (800de60 <KyushinJudge+0x724>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	72da      	strb	r2, [r3, #11]
 800de2e:	e010      	b.n	800de52 <KyushinJudge+0x716>
			  }
			  else {
				  //後東
				  Pos.Dir = back;
 800de30:	4b0b      	ldr	r3, [pc, #44]	; (800de60 <KyushinJudge+0x724>)
 800de32:	2202      	movs	r2, #2
 800de34:	711a      	strb	r2, [r3, #4]
				  Pos.NextX = Pos.X + 1;
 800de36:	4b0a      	ldr	r3, [pc, #40]	; (800de60 <KyushinJudge+0x724>)
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	3301      	adds	r3, #1
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	4b08      	ldr	r3, [pc, #32]	; (800de60 <KyushinJudge+0x724>)
 800de40:	721a      	strb	r2, [r3, #8]
				  Pos.NextY = Pos.Y;
 800de42:	4b07      	ldr	r3, [pc, #28]	; (800de60 <KyushinJudge+0x724>)
 800de44:	785a      	ldrb	r2, [r3, #1]
 800de46:	4b06      	ldr	r3, [pc, #24]	; (800de60 <KyushinJudge+0x724>)
 800de48:	725a      	strb	r2, [r3, #9]
				  Pos.NextCar = east;
 800de4a:	4b05      	ldr	r3, [pc, #20]	; (800de60 <KyushinJudge+0x724>)
 800de4c:	2201      	movs	r2, #1
 800de4e:	72da      	strb	r2, [r3, #11]
			  }
			  break;
 800de50:	e001      	b.n	800de56 <KyushinJudge+0x71a>
 800de52:	e000      	b.n	800de56 <KyushinJudge+0x71a>

		  default:
			  break;
 800de54:	bf00      	nop
		  //swtich end
	}


}
 800de56:	bf00      	nop
 800de58:	46bd      	mov	sp, r7
 800de5a:	bc90      	pop	{r4, r7}
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	20000000 	.word	0x20000000
 800de64:	200006e8 	.word	0x200006e8
 800de68:	20000570 	.word	0x20000570

0800de6c <is_unknown>:
    	  default:
    		  break;
    	  }//swtich end
}
_Bool is_unknown(int x, int y)	//指定された区画が未探索か否かを判断する関数 未探索:true　探索済:false
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
	//座標x,yが未探索区間か否かを調べる

	if((Wall[x][y].north == UNKNOWN) || (Wall[x][y].east == UNKNOWN) || (Wall[x][y].south == UNKNOWN) || (Wall[x][y].west == UNKNOWN))
 800de76:	4920      	ldr	r1, [pc, #128]	; (800def8 <is_unknown+0x8c>)
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	4613      	mov	r3, r2
 800de7c:	00db      	lsls	r3, r3, #3
 800de7e:	4413      	add	r3, r2
 800de80:	683a      	ldr	r2, [r7, #0]
 800de82:	4413      	add	r3, r2
 800de84:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800de88:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	2b02      	cmp	r3, #2
 800de90:	d029      	beq.n	800dee6 <is_unknown+0x7a>
 800de92:	4919      	ldr	r1, [pc, #100]	; (800def8 <is_unknown+0x8c>)
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	4613      	mov	r3, r2
 800de98:	00db      	lsls	r3, r3, #3
 800de9a:	4413      	add	r3, r2
 800de9c:	683a      	ldr	r2, [r7, #0]
 800de9e:	4413      	add	r3, r2
 800dea0:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800dea4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	2b02      	cmp	r3, #2
 800deac:	d01b      	beq.n	800dee6 <is_unknown+0x7a>
 800deae:	4912      	ldr	r1, [pc, #72]	; (800def8 <is_unknown+0x8c>)
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	4613      	mov	r3, r2
 800deb4:	00db      	lsls	r3, r3, #3
 800deb6:	4413      	add	r3, r2
 800deb8:	683a      	ldr	r2, [r7, #0]
 800deba:	4413      	add	r3, r2
 800debc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800dec0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	d00d      	beq.n	800dee6 <is_unknown+0x7a>
 800deca:	490b      	ldr	r1, [pc, #44]	; (800def8 <is_unknown+0x8c>)
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	4613      	mov	r3, r2
 800ded0:	00db      	lsls	r3, r3, #3
 800ded2:	4413      	add	r3, r2
 800ded4:	683a      	ldr	r2, [r7, #0]
 800ded6:	4413      	add	r3, r2
 800ded8:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800dedc:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	d101      	bne.n	800deea <is_unknown+0x7e>
	{			//どこかの壁情報が不明のままであれば
		return true;	//未探索
 800dee6:	2301      	movs	r3, #1
 800dee8:	e000      	b.n	800deec <is_unknown+0x80>
	}
	else
	{
		return false;	//探索済
 800deea:	2300      	movs	r3, #0
	}
}
 800deec:	4618      	mov	r0, r3
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr
 800def8:	200006e8 	.word	0x200006e8

0800defc <get_priority>:
int get_priority(int x, int y, cardinal car)	//そのマスの情報から、優先度を算出する
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b086      	sub	sp, #24
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	4613      	mov	r3, r2
 800df08:	71fb      	strb	r3, [r7, #7]
	//それに加え、自分の向きと、行きたい方向から、
	//前(2)横(1)後(0)の優先度を付加する。

	int priority;	//優先度を記録する変数

	priority = 0;
 800df0a:	2300      	movs	r3, #0
 800df0c:	617b      	str	r3, [r7, #20]

	if(Pos.Car == car)				//行きたい方向が現在の進行方向と同じ場合
 800df0e:	4b15      	ldr	r3, [pc, #84]	; (800df64 <get_priority+0x68>)
 800df10:	795b      	ldrb	r3, [r3, #5]
 800df12:	79fa      	ldrb	r2, [r7, #7]
 800df14:	429a      	cmp	r2, r3
 800df16:	d102      	bne.n	800df1e <get_priority+0x22>
	{
		priority = 2;
 800df18:	2302      	movs	r3, #2
 800df1a:	617b      	str	r3, [r7, #20]
 800df1c:	e012      	b.n	800df44 <get_priority+0x48>
	}
	else if( ((4+Pos.Car-car)%4) == 2)		//行きたい方向が現在の進行方向と逆の場合
 800df1e:	4b11      	ldr	r3, [pc, #68]	; (800df64 <get_priority+0x68>)
 800df20:	795b      	ldrb	r3, [r3, #5]
 800df22:	1d1a      	adds	r2, r3, #4
 800df24:	79fb      	ldrb	r3, [r7, #7]
 800df26:	1ad3      	subs	r3, r2, r3
 800df28:	425a      	negs	r2, r3
 800df2a:	f003 0303 	and.w	r3, r3, #3
 800df2e:	f002 0203 	and.w	r2, r2, #3
 800df32:	bf58      	it	pl
 800df34:	4253      	negpl	r3, r2
 800df36:	2b02      	cmp	r3, #2
 800df38:	d102      	bne.n	800df40 <get_priority+0x44>
	{
		priority = 0;
 800df3a:	2300      	movs	r3, #0
 800df3c:	617b      	str	r3, [r7, #20]
 800df3e:	e001      	b.n	800df44 <get_priority+0x48>
	}
	else						//それ以外(左右どちらか)の場合
	{
		priority = 1;
 800df40:	2301      	movs	r3, #1
 800df42:	617b      	str	r3, [r7, #20]
	}


	if(is_unknown(x,y) == true)
 800df44:	68b9      	ldr	r1, [r7, #8]
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	f7ff ff90 	bl	800de6c <is_unknown>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <get_priority+0x5c>
	{
		priority += 4;				//未探索の場合優先度をさらに付加
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	3304      	adds	r3, #4
 800df56:	617b      	str	r3, [r7, #20]
	}

	return priority;				//優先度を返す
 800df58:	697b      	ldr	r3, [r7, #20]

}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3718      	adds	r7, #24
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	20000000 	.word	0x20000000

0800df68 <get_nextdir>:
int get_nextdir(int x, int y, int mask)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b088      	sub	sp, #32
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
	//ゴール座標x,yに向かう場合、今どちらに行くべきかを判断する。
	//探索、最短の切り替えのためのmaskを指定、dirは方角を示す
	int little,priority,tmp_priority;		//最小の値を探すために使用する変数


	make_map(x,y,mask);				//歩数Map生成
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	68ba      	ldr	r2, [r7, #8]
 800df7a:	b2d1      	uxtb	r1, r2
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fd fedc 	bl	800bd3c <make_map>
	little = 255;					//最小歩数を255歩(mapがunsigned char型なので)に設定
 800df84:	23ff      	movs	r3, #255	; 0xff
 800df86:	61fb      	str	r3, [r7, #28]

	priority = 0;					//優先度の初期値は0
 800df88:	2300      	movs	r3, #0
 800df8a:	61bb      	str	r3, [r7, #24]

		//maskの意味はstatic_parameter.hを参照
	if( (Wall[Pos.X][Pos.Y].north & mask) == NOWALL)			//北に壁がなければ
 800df8c:	4b80      	ldr	r3, [pc, #512]	; (800e190 <get_nextdir+0x228>)
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	4619      	mov	r1, r3
 800df92:	4b7f      	ldr	r3, [pc, #508]	; (800e190 <get_nextdir+0x228>)
 800df94:	785b      	ldrb	r3, [r3, #1]
 800df96:	4618      	mov	r0, r3
 800df98:	4a7e      	ldr	r2, [pc, #504]	; (800e194 <get_nextdir+0x22c>)
 800df9a:	460b      	mov	r3, r1
 800df9c:	00db      	lsls	r3, r3, #3
 800df9e:	440b      	add	r3, r1
 800dfa0:	4403      	add	r3, r0
 800dfa2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800dfa6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	461a      	mov	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	4013      	ands	r3, r2
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d149      	bne.n	800e04a <get_nextdir+0xe2>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y + 1, north);	//優先度を算出
 800dfb6:	4b76      	ldr	r3, [pc, #472]	; (800e190 <get_nextdir+0x228>)
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	4b74      	ldr	r3, [pc, #464]	; (800e190 <get_nextdir+0x228>)
 800dfbe:	785b      	ldrb	r3, [r3, #1]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	f7ff ff99 	bl	800defc <get_priority>
 800dfca:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y+1] < little)				//一番歩数が小さい方向を見つける
 800dfcc:	4b70      	ldr	r3, [pc, #448]	; (800e190 <get_nextdir+0x228>)
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	4b6f      	ldr	r3, [pc, #444]	; (800e190 <get_nextdir+0x228>)
 800dfd4:	785b      	ldrb	r3, [r3, #1]
 800dfd6:	1c5a      	adds	r2, r3, #1
 800dfd8:	496f      	ldr	r1, [pc, #444]	; (800e198 <get_nextdir+0x230>)
 800dfda:	4603      	mov	r3, r0
 800dfdc:	00db      	lsls	r3, r3, #3
 800dfde:	4403      	add	r3, r0
 800dfe0:	4413      	add	r3, r2
 800dfe2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	4293      	cmp	r3, r2
 800dfec:	dd13      	ble.n	800e016 <get_nextdir+0xae>
		{
			little = walk_map[Pos.X][Pos.Y+1];			//ひとまず北が歩数が小さい事にする
 800dfee:	4b68      	ldr	r3, [pc, #416]	; (800e190 <get_nextdir+0x228>)
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	4618      	mov	r0, r3
 800dff4:	4b66      	ldr	r3, [pc, #408]	; (800e190 <get_nextdir+0x228>)
 800dff6:	785b      	ldrb	r3, [r3, #1]
 800dff8:	1c5a      	adds	r2, r3, #1
 800dffa:	4967      	ldr	r1, [pc, #412]	; (800e198 <get_nextdir+0x230>)
 800dffc:	4603      	mov	r3, r0
 800dffe:	00db      	lsls	r3, r3, #3
 800e000:	4403      	add	r3, r0
 800e002:	4413      	add	r3, r2
 800e004:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e008:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = north;						//方向を保存
 800e00a:	4b61      	ldr	r3, [pc, #388]	; (800e190 <get_nextdir+0x228>)
 800e00c:	2200      	movs	r2, #0
 800e00e:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	61bb      	str	r3, [r7, #24]
 800e014:	e019      	b.n	800e04a <get_nextdir+0xe2>
		}
		else if(walk_map[Pos.X][Pos.Y+1] == little)			//歩数が同じ場合は優先度から判断する
 800e016:	4b5e      	ldr	r3, [pc, #376]	; (800e190 <get_nextdir+0x228>)
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	4618      	mov	r0, r3
 800e01c:	4b5c      	ldr	r3, [pc, #368]	; (800e190 <get_nextdir+0x228>)
 800e01e:	785b      	ldrb	r3, [r3, #1]
 800e020:	1c5a      	adds	r2, r3, #1
 800e022:	495d      	ldr	r1, [pc, #372]	; (800e198 <get_nextdir+0x230>)
 800e024:	4603      	mov	r3, r0
 800e026:	00db      	lsls	r3, r3, #3
 800e028:	4403      	add	r3, r0
 800e02a:	4413      	add	r3, r2
 800e02c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e030:	461a      	mov	r2, r3
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	4293      	cmp	r3, r2
 800e036:	d108      	bne.n	800e04a <get_nextdir+0xe2>
		{
			if(priority < tmp_priority )				//優先度を評価
 800e038:	69ba      	ldr	r2, [r7, #24]
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	da04      	bge.n	800e04a <get_nextdir+0xe2>
			{
				Pos.NextCar = north;					//方向を更新
 800e040:	4b53      	ldr	r3, [pc, #332]	; (800e190 <get_nextdir+0x228>)
 800e042:	2200      	movs	r2, #0
 800e044:	72da      	strb	r2, [r3, #11]
				priority = tmp_priority;			//優先度を保存
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].east & mask) == NOWALL)			//東に壁がなければ
 800e04a:	4b51      	ldr	r3, [pc, #324]	; (800e190 <get_nextdir+0x228>)
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	4619      	mov	r1, r3
 800e050:	4b4f      	ldr	r3, [pc, #316]	; (800e190 <get_nextdir+0x228>)
 800e052:	785b      	ldrb	r3, [r3, #1]
 800e054:	4618      	mov	r0, r3
 800e056:	4a4f      	ldr	r2, [pc, #316]	; (800e194 <get_nextdir+0x22c>)
 800e058:	460b      	mov	r3, r1
 800e05a:	00db      	lsls	r3, r3, #3
 800e05c:	440b      	add	r3, r1
 800e05e:	4403      	add	r3, r0
 800e060:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e064:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	461a      	mov	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4013      	ands	r3, r2
 800e070:	2b00      	cmp	r3, #0
 800e072:	d148      	bne.n	800e106 <get_nextdir+0x19e>
	{
		tmp_priority = get_priority(Pos.X + 1, Pos.Y, east);	//優先度を算出
 800e074:	4b46      	ldr	r3, [pc, #280]	; (800e190 <get_nextdir+0x228>)
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	1c58      	adds	r0, r3, #1
 800e07a:	4b45      	ldr	r3, [pc, #276]	; (800e190 <get_nextdir+0x228>)
 800e07c:	785b      	ldrb	r3, [r3, #1]
 800e07e:	2201      	movs	r2, #1
 800e080:	4619      	mov	r1, r3
 800e082:	f7ff ff3b 	bl	800defc <get_priority>
 800e086:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X + 1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800e088:	4b41      	ldr	r3, [pc, #260]	; (800e190 <get_nextdir+0x228>)
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	1c5a      	adds	r2, r3, #1
 800e08e:	4b40      	ldr	r3, [pc, #256]	; (800e190 <get_nextdir+0x228>)
 800e090:	785b      	ldrb	r3, [r3, #1]
 800e092:	4618      	mov	r0, r3
 800e094:	4940      	ldr	r1, [pc, #256]	; (800e198 <get_nextdir+0x230>)
 800e096:	4613      	mov	r3, r2
 800e098:	00db      	lsls	r3, r3, #3
 800e09a:	4413      	add	r3, r2
 800e09c:	4403      	add	r3, r0
 800e09e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	dd13      	ble.n	800e0d2 <get_nextdir+0x16a>
		{
			little = walk_map[Pos.X+1][Pos.Y];			//ひとまず東が歩数が小さい事にする
 800e0aa:	4b39      	ldr	r3, [pc, #228]	; (800e190 <get_nextdir+0x228>)
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	1c5a      	adds	r2, r3, #1
 800e0b0:	4b37      	ldr	r3, [pc, #220]	; (800e190 <get_nextdir+0x228>)
 800e0b2:	785b      	ldrb	r3, [r3, #1]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	4938      	ldr	r1, [pc, #224]	; (800e198 <get_nextdir+0x230>)
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	4413      	add	r3, r2
 800e0be:	4403      	add	r3, r0
 800e0c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e0c4:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = east;						//方向を保存
 800e0c6:	4b32      	ldr	r3, [pc, #200]	; (800e190 <get_nextdir+0x228>)
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	61bb      	str	r3, [r7, #24]
 800e0d0:	e019      	b.n	800e106 <get_nextdir+0x19e>
		}
		else if(walk_map[Pos.X + 1][Pos.Y] == little)			//歩数が同じ場合、優先度から判断
 800e0d2:	4b2f      	ldr	r3, [pc, #188]	; (800e190 <get_nextdir+0x228>)
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	1c5a      	adds	r2, r3, #1
 800e0d8:	4b2d      	ldr	r3, [pc, #180]	; (800e190 <get_nextdir+0x228>)
 800e0da:	785b      	ldrb	r3, [r3, #1]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	492e      	ldr	r1, [pc, #184]	; (800e198 <get_nextdir+0x230>)
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	4413      	add	r3, r2
 800e0e6:	4403      	add	r3, r0
 800e0e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d108      	bne.n	800e106 <get_nextdir+0x19e>
		{
			if(priority < tmp_priority)				//優先度を評価
 800e0f4:	69ba      	ldr	r2, [r7, #24]
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	da04      	bge.n	800e106 <get_nextdir+0x19e>
			{
				Pos.NextCar = east;					//方向を保存
 800e0fc:	4b24      	ldr	r3, [pc, #144]	; (800e190 <get_nextdir+0x228>)
 800e0fe:	2201      	movs	r2, #1
 800e100:	72da      	strb	r2, [r3, #11]
				priority = tmp_priority;			//優先度を保存
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].south & mask) == NOWALL)			//南に壁がなければ
 800e106:	4b22      	ldr	r3, [pc, #136]	; (800e190 <get_nextdir+0x228>)
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	4619      	mov	r1, r3
 800e10c:	4b20      	ldr	r3, [pc, #128]	; (800e190 <get_nextdir+0x228>)
 800e10e:	785b      	ldrb	r3, [r3, #1]
 800e110:	4618      	mov	r0, r3
 800e112:	4a20      	ldr	r2, [pc, #128]	; (800e194 <get_nextdir+0x22c>)
 800e114:	460b      	mov	r3, r1
 800e116:	00db      	lsls	r3, r3, #3
 800e118:	440b      	add	r3, r1
 800e11a:	4403      	add	r3, r0
 800e11c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e120:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e124:	b2db      	uxtb	r3, r3
 800e126:	461a      	mov	r2, r3
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4013      	ands	r3, r2
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d14f      	bne.n	800e1d0 <get_nextdir+0x268>
	{
		tmp_priority = get_priority(Pos.X, Pos.Y - 1, south);	//優先度を算出
 800e130:	4b17      	ldr	r3, [pc, #92]	; (800e190 <get_nextdir+0x228>)
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	4618      	mov	r0, r3
 800e136:	4b16      	ldr	r3, [pc, #88]	; (800e190 <get_nextdir+0x228>)
 800e138:	785b      	ldrb	r3, [r3, #1]
 800e13a:	3b01      	subs	r3, #1
 800e13c:	2202      	movs	r2, #2
 800e13e:	4619      	mov	r1, r3
 800e140:	f7ff fedc 	bl	800defc <get_priority>
 800e144:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X][Pos.Y - 1] < little)				//一番歩数が小さい方向を見つける
 800e146:	4b12      	ldr	r3, [pc, #72]	; (800e190 <get_nextdir+0x228>)
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	4618      	mov	r0, r3
 800e14c:	4b10      	ldr	r3, [pc, #64]	; (800e190 <get_nextdir+0x228>)
 800e14e:	785b      	ldrb	r3, [r3, #1]
 800e150:	1e5a      	subs	r2, r3, #1
 800e152:	4911      	ldr	r1, [pc, #68]	; (800e198 <get_nextdir+0x230>)
 800e154:	4603      	mov	r3, r0
 800e156:	00db      	lsls	r3, r3, #3
 800e158:	4403      	add	r3, r0
 800e15a:	4413      	add	r3, r2
 800e15c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e160:	461a      	mov	r2, r3
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	4293      	cmp	r3, r2
 800e166:	dd19      	ble.n	800e19c <get_nextdir+0x234>
		{
			little = walk_map[Pos.X][Pos.Y-1];			//ひとまず南が歩数が小さい事にする
 800e168:	4b09      	ldr	r3, [pc, #36]	; (800e190 <get_nextdir+0x228>)
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	4618      	mov	r0, r3
 800e16e:	4b08      	ldr	r3, [pc, #32]	; (800e190 <get_nextdir+0x228>)
 800e170:	785b      	ldrb	r3, [r3, #1]
 800e172:	1e5a      	subs	r2, r3, #1
 800e174:	4908      	ldr	r1, [pc, #32]	; (800e198 <get_nextdir+0x230>)
 800e176:	4603      	mov	r3, r0
 800e178:	00db      	lsls	r3, r3, #3
 800e17a:	4403      	add	r3, r0
 800e17c:	4413      	add	r3, r2
 800e17e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e182:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = south;						//方向を保存
 800e184:	4b02      	ldr	r3, [pc, #8]	; (800e190 <get_nextdir+0x228>)
 800e186:	2202      	movs	r2, #2
 800e188:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	61bb      	str	r3, [r7, #24]
 800e18e:	e01f      	b.n	800e1d0 <get_nextdir+0x268>
 800e190:	20000000 	.word	0x20000000
 800e194:	200006e8 	.word	0x200006e8
 800e198:	20000570 	.word	0x20000570
		}
		else if(walk_map[Pos.X][Pos.Y - 1] == little)			//歩数が同じ場合、優先度で評価
 800e19c:	4b42      	ldr	r3, [pc, #264]	; (800e2a8 <get_nextdir+0x340>)
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	4b41      	ldr	r3, [pc, #260]	; (800e2a8 <get_nextdir+0x340>)
 800e1a4:	785b      	ldrb	r3, [r3, #1]
 800e1a6:	1e5a      	subs	r2, r3, #1
 800e1a8:	4940      	ldr	r1, [pc, #256]	; (800e2ac <get_nextdir+0x344>)
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	00db      	lsls	r3, r3, #3
 800e1ae:	4403      	add	r3, r0
 800e1b0:	4413      	add	r3, r2
 800e1b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d108      	bne.n	800e1d0 <get_nextdir+0x268>
		{
			if(priority < tmp_priority)				//優先度を評価
 800e1be:	69ba      	ldr	r2, [r7, #24]
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	da04      	bge.n	800e1d0 <get_nextdir+0x268>
			{
				Pos.NextCar = south;					//方向を保存
 800e1c6:	4b38      	ldr	r3, [pc, #224]	; (800e2a8 <get_nextdir+0x340>)
 800e1c8:	2202      	movs	r2, #2
 800e1ca:	72da      	strb	r2, [r3, #11]
				priority = tmp_priority;			//優先度を保存
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	61bb      	str	r3, [r7, #24]
			}
		}
	}

	if( (Wall[Pos.X][Pos.Y].west & mask) == NOWALL)			//西に壁がなければ
 800e1d0:	4b35      	ldr	r3, [pc, #212]	; (800e2a8 <get_nextdir+0x340>)
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	4b34      	ldr	r3, [pc, #208]	; (800e2a8 <get_nextdir+0x340>)
 800e1d8:	785b      	ldrb	r3, [r3, #1]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	4a34      	ldr	r2, [pc, #208]	; (800e2b0 <get_nextdir+0x348>)
 800e1de:	460b      	mov	r3, r1
 800e1e0:	00db      	lsls	r3, r3, #3
 800e1e2:	440b      	add	r3, r1
 800e1e4:	4403      	add	r3, r0
 800e1e6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800e1ea:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d144      	bne.n	800e284 <get_nextdir+0x31c>
	{
		tmp_priority = get_priority(Pos.X - 1, Pos.Y, west);	//優先度を算出
 800e1fa:	4b2b      	ldr	r3, [pc, #172]	; (800e2a8 <get_nextdir+0x340>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	1e58      	subs	r0, r3, #1
 800e200:	4b29      	ldr	r3, [pc, #164]	; (800e2a8 <get_nextdir+0x340>)
 800e202:	785b      	ldrb	r3, [r3, #1]
 800e204:	2203      	movs	r2, #3
 800e206:	4619      	mov	r1, r3
 800e208:	f7ff fe78 	bl	800defc <get_priority>
 800e20c:	6178      	str	r0, [r7, #20]
		if(walk_map[Pos.X-1][Pos.Y] < little)				//一番歩数が小さい方向を見つける
 800e20e:	4b26      	ldr	r3, [pc, #152]	; (800e2a8 <get_nextdir+0x340>)
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	1e5a      	subs	r2, r3, #1
 800e214:	4b24      	ldr	r3, [pc, #144]	; (800e2a8 <get_nextdir+0x340>)
 800e216:	785b      	ldrb	r3, [r3, #1]
 800e218:	4618      	mov	r0, r3
 800e21a:	4924      	ldr	r1, [pc, #144]	; (800e2ac <get_nextdir+0x344>)
 800e21c:	4613      	mov	r3, r2
 800e21e:	00db      	lsls	r3, r3, #3
 800e220:	4413      	add	r3, r2
 800e222:	4403      	add	r3, r0
 800e224:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e228:	461a      	mov	r2, r3
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	4293      	cmp	r3, r2
 800e22e:	dd13      	ble.n	800e258 <get_nextdir+0x2f0>
		{
			little = walk_map[Pos.X-1][Pos.Y];			//西が歩数が小さい
 800e230:	4b1d      	ldr	r3, [pc, #116]	; (800e2a8 <get_nextdir+0x340>)
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	1e5a      	subs	r2, r3, #1
 800e236:	4b1c      	ldr	r3, [pc, #112]	; (800e2a8 <get_nextdir+0x340>)
 800e238:	785b      	ldrb	r3, [r3, #1]
 800e23a:	4618      	mov	r0, r3
 800e23c:	491b      	ldr	r1, [pc, #108]	; (800e2ac <get_nextdir+0x344>)
 800e23e:	4613      	mov	r3, r2
 800e240:	00db      	lsls	r3, r3, #3
 800e242:	4413      	add	r3, r2
 800e244:	4403      	add	r3, r0
 800e246:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e24a:	61fb      	str	r3, [r7, #28]
			Pos.NextCar = west;						//方向を保存
 800e24c:	4b16      	ldr	r3, [pc, #88]	; (800e2a8 <get_nextdir+0x340>)
 800e24e:	2203      	movs	r2, #3
 800e250:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	61bb      	str	r3, [r7, #24]
 800e256:	e015      	b.n	800e284 <get_nextdir+0x31c>
		}
		else if(walk_map[Pos.X - 1][Pos.Y] == little)			//歩数が同じ場合、優先度で評価
 800e258:	4b13      	ldr	r3, [pc, #76]	; (800e2a8 <get_nextdir+0x340>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	1e5a      	subs	r2, r3, #1
 800e25e:	4b12      	ldr	r3, [pc, #72]	; (800e2a8 <get_nextdir+0x340>)
 800e260:	785b      	ldrb	r3, [r3, #1]
 800e262:	4618      	mov	r0, r3
 800e264:	4911      	ldr	r1, [pc, #68]	; (800e2ac <get_nextdir+0x344>)
 800e266:	4613      	mov	r3, r2
 800e268:	00db      	lsls	r3, r3, #3
 800e26a:	4413      	add	r3, r2
 800e26c:	4403      	add	r3, r0
 800e26e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e272:	461a      	mov	r2, r3
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	4293      	cmp	r3, r2
 800e278:	d104      	bne.n	800e284 <get_nextdir+0x31c>
		{
			Pos.NextCar = west;						//方向を保存
 800e27a:	4b0b      	ldr	r3, [pc, #44]	; (800e2a8 <get_nextdir+0x340>)
 800e27c:	2203      	movs	r2, #3
 800e27e:	72da      	strb	r2, [r3, #11]
			priority = tmp_priority;				//優先度を保存
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	61bb      	str	r3, [r7, #24]
		}
	}


	return ( (int)( ( 4 + Pos.NextCar - Pos.Car) % 4 ) );			//どっちに向かうべきかを返す。
 800e284:	4b08      	ldr	r3, [pc, #32]	; (800e2a8 <get_nextdir+0x340>)
 800e286:	7adb      	ldrb	r3, [r3, #11]
 800e288:	3304      	adds	r3, #4
 800e28a:	4a07      	ldr	r2, [pc, #28]	; (800e2a8 <get_nextdir+0x340>)
 800e28c:	7952      	ldrb	r2, [r2, #5]
 800e28e:	1a9b      	subs	r3, r3, r2
 800e290:	425a      	negs	r2, r3
 800e292:	f003 0303 	and.w	r3, r3, #3
 800e296:	f002 0203 	and.w	r2, r2, #3
 800e29a:	bf58      	it	pl
 800e29c:	4253      	negpl	r3, r2
										//演算の意味はmytyedef.h内のenum宣言から。

}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3720      	adds	r7, #32
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	20000000 	.word	0x20000000
 800e2ac:	20000570 	.word	0x20000570
 800e2b0:	200006e8 	.word	0x200006e8

0800e2b4 <fast_run>:
void fast_run(int x, int y,int x2, int y2, char turn_mode, int mask)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	60b9      	str	r1, [r7, #8]
 800e2be:	607a      	str	r2, [r7, #4]
 800e2c0:	603b      	str	r3, [r7, #0]
//			Pos.X--;	//西を向いたときはX座標を減らす
//			break;
//
//	}

	while( !((x <= Pos.X && Pos.X <= x2) && (y <= Pos.Y && Pos.Y <= y2)) ){			//ゴールするまで繰り返す
 800e2c2:	e053      	b.n	800e36c <fast_run+0xb8>
		Pos.Dir = get_nextdir(x,y,mask);//新しい区画に入ったところで、次の方向を求める。方向と方角がわかる。
 800e2c4:	69fa      	ldr	r2, [r7, #28]
 800e2c6:	68b9      	ldr	r1, [r7, #8]
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	f7ff fe4d 	bl	800df68 <get_nextdir>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	4b34      	ldr	r3, [pc, #208]	; (800e3a4 <fast_run+0xf0>)
 800e2d4:	711a      	strb	r2, [r3, #4]
		//向いた方向によって自分の座標を更新する
		//printf("%d,%d\r\n",Pos.X,Pos.Y);
		switch(Pos.NextCar)//
 800e2d6:	4b33      	ldr	r3, [pc, #204]	; (800e3a4 <fast_run+0xf0>)
 800e2d8:	7adb      	ldrb	r3, [r3, #11]
 800e2da:	2b03      	cmp	r3, #3
 800e2dc:	d836      	bhi.n	800e34c <fast_run+0x98>
 800e2de:	a201      	add	r2, pc, #4	; (adr r2, 800e2e4 <fast_run+0x30>)
 800e2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e4:	0800e2f5 	.word	0x0800e2f5
 800e2e8:	0800e30b 	.word	0x0800e30b
 800e2ec:	0800e321 	.word	0x0800e321
 800e2f0:	0800e337 	.word	0x0800e337
		{
			case north:
				Pos.NextX = Pos.X;
 800e2f4:	4b2b      	ldr	r3, [pc, #172]	; (800e3a4 <fast_run+0xf0>)
 800e2f6:	781a      	ldrb	r2, [r3, #0]
 800e2f8:	4b2a      	ldr	r3, [pc, #168]	; (800e3a4 <fast_run+0xf0>)
 800e2fa:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y + 1;	//北を向いた時はY座標を増やす
 800e2fc:	4b29      	ldr	r3, [pc, #164]	; (800e3a4 <fast_run+0xf0>)
 800e2fe:	785b      	ldrb	r3, [r3, #1]
 800e300:	3301      	adds	r3, #1
 800e302:	b2da      	uxtb	r2, r3
 800e304:	4b27      	ldr	r3, [pc, #156]	; (800e3a4 <fast_run+0xf0>)
 800e306:	725a      	strb	r2, [r3, #9]
				break;
 800e308:	e020      	b.n	800e34c <fast_run+0x98>

			case east:
				Pos.NextX = Pos.X + 1;	//東を向いた時はX座標を増やす
 800e30a:	4b26      	ldr	r3, [pc, #152]	; (800e3a4 <fast_run+0xf0>)
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	3301      	adds	r3, #1
 800e310:	b2da      	uxtb	r2, r3
 800e312:	4b24      	ldr	r3, [pc, #144]	; (800e3a4 <fast_run+0xf0>)
 800e314:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y;
 800e316:	4b23      	ldr	r3, [pc, #140]	; (800e3a4 <fast_run+0xf0>)
 800e318:	785a      	ldrb	r2, [r3, #1]
 800e31a:	4b22      	ldr	r3, [pc, #136]	; (800e3a4 <fast_run+0xf0>)
 800e31c:	725a      	strb	r2, [r3, #9]
				break;
 800e31e:	e015      	b.n	800e34c <fast_run+0x98>

			case south:
				Pos.NextX = Pos.X;
 800e320:	4b20      	ldr	r3, [pc, #128]	; (800e3a4 <fast_run+0xf0>)
 800e322:	781a      	ldrb	r2, [r3, #0]
 800e324:	4b1f      	ldr	r3, [pc, #124]	; (800e3a4 <fast_run+0xf0>)
 800e326:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y - 1;	//南を向いた時はY座標を減らす
 800e328:	4b1e      	ldr	r3, [pc, #120]	; (800e3a4 <fast_run+0xf0>)
 800e32a:	785b      	ldrb	r3, [r3, #1]
 800e32c:	3b01      	subs	r3, #1
 800e32e:	b2da      	uxtb	r2, r3
 800e330:	4b1c      	ldr	r3, [pc, #112]	; (800e3a4 <fast_run+0xf0>)
 800e332:	725a      	strb	r2, [r3, #9]
				break;
 800e334:	e00a      	b.n	800e34c <fast_run+0x98>

			case west:
				Pos.NextX = Pos.X - 1;	//西を向いたときはX座標を減らす
 800e336:	4b1b      	ldr	r3, [pc, #108]	; (800e3a4 <fast_run+0xf0>)
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	3b01      	subs	r3, #1
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	4b19      	ldr	r3, [pc, #100]	; (800e3a4 <fast_run+0xf0>)
 800e340:	721a      	strb	r2, [r3, #8]
				Pos.NextY = Pos.Y;
 800e342:	4b18      	ldr	r3, [pc, #96]	; (800e3a4 <fast_run+0xf0>)
 800e344:	785a      	ldrb	r2, [r3, #1]
 800e346:	4b17      	ldr	r3, [pc, #92]	; (800e3a4 <fast_run+0xf0>)
 800e348:	725a      	strb	r2, [r3, #9]
				break;
 800e34a:	bf00      	nop

		}
		SelectAction(turn_mode);
 800e34c:	7e3b      	ldrb	r3, [r7, #24]
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fc fe0a 	bl	800af68 <SelectAction>
	 	Pos.X = Pos.NextX;
 800e354:	4b13      	ldr	r3, [pc, #76]	; (800e3a4 <fast_run+0xf0>)
 800e356:	7a1a      	ldrb	r2, [r3, #8]
 800e358:	4b12      	ldr	r3, [pc, #72]	; (800e3a4 <fast_run+0xf0>)
 800e35a:	701a      	strb	r2, [r3, #0]
	    Pos.Y = Pos.NextY;
 800e35c:	4b11      	ldr	r3, [pc, #68]	; (800e3a4 <fast_run+0xf0>)
 800e35e:	7a5a      	ldrb	r2, [r3, #9]
 800e360:	4b10      	ldr	r3, [pc, #64]	; (800e3a4 <fast_run+0xf0>)
 800e362:	705a      	strb	r2, [r3, #1]
		Pos.Car = Pos.NextCar;	//自分の向きを修正
 800e364:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <fast_run+0xf0>)
 800e366:	7ada      	ldrb	r2, [r3, #11]
 800e368:	4b0e      	ldr	r3, [pc, #56]	; (800e3a4 <fast_run+0xf0>)
 800e36a:	715a      	strb	r2, [r3, #5]
	while( !((x <= Pos.X && Pos.X <= x2) && (y <= Pos.Y && Pos.Y <= y2)) ){			//ゴールするまで繰り返す
 800e36c:	4b0d      	ldr	r3, [pc, #52]	; (800e3a4 <fast_run+0xf0>)
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	461a      	mov	r2, r3
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	4293      	cmp	r3, r2
 800e376:	dca5      	bgt.n	800e2c4 <fast_run+0x10>
 800e378:	4b0a      	ldr	r3, [pc, #40]	; (800e3a4 <fast_run+0xf0>)
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	461a      	mov	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	4293      	cmp	r3, r2
 800e382:	db9f      	blt.n	800e2c4 <fast_run+0x10>
 800e384:	4b07      	ldr	r3, [pc, #28]	; (800e3a4 <fast_run+0xf0>)
 800e386:	785b      	ldrb	r3, [r3, #1]
 800e388:	461a      	mov	r2, r3
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	4293      	cmp	r3, r2
 800e38e:	dc99      	bgt.n	800e2c4 <fast_run+0x10>
 800e390:	4b04      	ldr	r3, [pc, #16]	; (800e3a4 <fast_run+0xf0>)
 800e392:	785b      	ldrb	r3, [r3, #1]
 800e394:	461a      	mov	r2, r3
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	4293      	cmp	r3, r2
 800e39a:	db93      	blt.n	800e2c4 <fast_run+0x10>
//		Pos.Car = Pos.NextCar;	//自分の向きを修正
//
//
	}
//	straight(SECTION*straight_count,FAST_ACCEL,FAST_SPEED,0.0);
}
 800e39c:	bf00      	nop
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	20000000 	.word	0x20000000

0800e3a8 <__io_putchar>:
	#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int f getc(FILE* f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800e3b0:	1d39      	adds	r1, r7, #4
 800e3b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	4803      	ldr	r0, [pc, #12]	; (800e3c8 <__io_putchar+0x20>)
 800e3ba:	f007 f8cb 	bl	8015554 <HAL_UART_Transmit>
	return ch;
 800e3be:	687b      	ldr	r3, [r7, #4]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	2000093c 	.word	0x2000093c

0800e3cc <__io_getchar>:
int __io_getchar(void) {
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
HAL_StatusTypeDef Status = HAL_BUSY;
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	71fb      	strb	r3, [r7, #7]
uint8_t Data;

while(Status != HAL_OK)
 800e3d6:	e007      	b.n	800e3e8 <__io_getchar+0x1c>
{
Status = HAL_UART_Receive(&huart1, &Data, sizeof(Data), 10);
 800e3d8:	1db9      	adds	r1, r7, #6
 800e3da:	230a      	movs	r3, #10
 800e3dc:	2201      	movs	r2, #1
 800e3de:	4806      	ldr	r0, [pc, #24]	; (800e3f8 <__io_getchar+0x2c>)
 800e3e0:	f007 f951 	bl	8015686 <HAL_UART_Receive>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	71fb      	strb	r3, [r7, #7]
while(Status != HAL_OK)
 800e3e8:	79fb      	ldrb	r3, [r7, #7]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d1f4      	bne.n	800e3d8 <__io_getchar+0xc>
//{
//	return 0;
//	break;
//}
}
return(Data);
 800e3ee:	79bb      	ldrb	r3, [r7, #6]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	2000093c 	.word	0x2000093c

0800e3fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e402:	f002 fd93 	bl	8010f2c <HAL_Init>

  /* USER CODE BEGIN Init */

  //バッ�?リチェ�?ク
  MX_GPIO_Init();
 800e406:	f000 fcfd 	bl	800ee04 <MX_GPIO_Init>
  MX_DMA_Init();
 800e40a:	f000 fcd3 	bl	800edb4 <MX_DMA_Init>
  MX_ADC1_Init();
 800e40e:	f000 f917 	bl	800e640 <MX_ADC1_Init>
  MX_ADC2_Init();
 800e412:	f000 f983 	bl	800e71c <MX_ADC2_Init>

  ADCStart();
 800e416:	f001 fa15 	bl	800f844 <ADCStart>
  BatteryCheck( (int)adc1[2] );
 800e41a:	4b4f      	ldr	r3, [pc, #316]	; (800e558 <main+0x15c>)
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	4618      	mov	r0, r3
 800e420:	f002 fc74 	bl	8010d0c <BatteryCheck>
  ADCStop();
 800e424:	f001 fa2e 	bl	800f884 <ADCStop>

  //モード選�? //スイ�?チが押されるまでエンコー�?の処�?を受け付け�?
  MX_TIM3_Init();
 800e428:	f000 fad4 	bl	800e9d4 <MX_TIM3_Init>

  int8_t startup_mode;
  ModeSelect(0, 7, &startup_mode);
 800e42c:	1dfb      	adds	r3, r7, #7
 800e42e:	461a      	mov	r2, r3
 800e430:	2107      	movs	r1, #7
 800e432:	2000      	movs	r0, #0
 800e434:	f002 fcc2 	bl	8010dbc <ModeSelect>
  Signal( startup_mode );
 800e438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f002 fc45 	bl	8010ccc <Signal>
  //MAX45mAでモード選択できる

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e442:	f000 f893 	bl	800e56c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e446:	f000 fcdd 	bl	800ee04 <MX_GPIO_Init>
  MX_DMA_Init();
 800e44a:	f000 fcb3 	bl	800edb4 <MX_DMA_Init>
  MX_ADC1_Init();
 800e44e:	f000 f8f7 	bl	800e640 <MX_ADC1_Init>
  MX_ADC2_Init();
 800e452:	f000 f963 	bl	800e71c <MX_ADC2_Init>
  MX_TIM3_Init();
 800e456:	f000 fabd 	bl	800e9d4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800e45a:	f000 fa45 	bl	800e8e8 <MX_TIM2_Init>
  MX_SPI3_Init();
 800e45e:	f000 f9bd 	bl	800e7dc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800e462:	f000 fc7d 	bl	800ed60 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800e466:	f000 fb5d 	bl	800eb24 <MX_TIM5_Init>
  MX_TIM4_Init();
 800e46a:	f000 fb07 	bl	800ea7c <MX_TIM4_Init>
  MX_TIM8_Init();
 800e46e:	f000 fbcf 	bl	800ec10 <MX_TIM8_Init>
  MX_TIM1_Init();
 800e472:	f000 f9e9 	bl	800e848 <MX_TIM1_Init>

  }

#endif

  PIDSetGain(L_VELO_PID, 14.6, 2800,0.001);//1200,0);//2430,0);//7.3,1215,0);//40kHzの//14.6, 2430,0);//(20khzのと??��?��?);//1200,0.0);//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);////D0.0036 //I2430くら 36.6*0.6=18+3.96
 800e476:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800e55c <main+0x160>
 800e47a:	eddf 0a39 	vldr	s1, [pc, #228]	; 800e560 <main+0x164>
 800e47e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800e564 <main+0x168>
 800e482:	2004      	movs	r0, #4
 800e484:	f002 fa54 	bl	8010930 <PIDSetGain>
  PIDSetGain(R_VELO_PID, 14.6, 2800,0.001);// 1200,0);//2430,0);//7.3,1215,0);//14.6, 2430,0);//1200,0.0);//, 2430,0);//17.5//2430, 0.002);//21.96,2450,0.002);//14,6000,0.002);//11.1, 2430, 0.002);//I150,
 800e488:	ed9f 1a34 	vldr	s2, [pc, #208]	; 800e55c <main+0x160>
 800e48c:	eddf 0a34 	vldr	s1, [pc, #208]	; 800e560 <main+0x164>
 800e490:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800e564 <main+0x168>
 800e494:	2005      	movs	r0, #5
 800e496:	f002 fa4b 	bl	8010930 <PIDSetGain>
  //PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
  PIDSetGain(A_VELO_PID, 12,0,0);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 800e49a:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800e568 <main+0x16c>
 800e49e:	eddf 0a32 	vldr	s1, [pc, #200]	; 800e568 <main+0x16c>
 800e4a2:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	f002 fa42 	bl	8010930 <PIDSetGain>
  PIDSetGain(F_WALL_PID, 14.6,0,0);
 800e4ac:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 800e568 <main+0x16c>
 800e4b0:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800e568 <main+0x16c>
 800e4b4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800e564 <main+0x168>
 800e4b8:	2008      	movs	r0, #8
 800e4ba:	f002 fa39 	bl	8010930 <PIDSetGain>
  PIDSetGain(D_WALL_PID, 6, 0, 0	);//3.2,0,0);/4.5,1.5,0.003);//3.6, 20, 0);//5.2//速度制御
 800e4be:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800e568 <main+0x16c>
 800e4c2:	eddf 0a29 	vldr	s1, [pc, #164]	; 800e568 <main+0x16c>
 800e4c6:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800e4ca:	2001      	movs	r0, #1
 800e4cc:	f002 fa30 	bl	8010930 <PIDSetGain>
  PIDSetGain(L_WALL_PID, 12,0,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e4d0:	ed9f 1a25 	vldr	s2, [pc, #148]	; 800e568 <main+0x16c>
 800e4d4:	eddf 0a24 	vldr	s1, [pc, #144]	; 800e568 <main+0x16c>
 800e4d8:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e4dc:	2002      	movs	r0, #2
 800e4de:	f002 fa27 	bl	8010930 <PIDSetGain>
  PIDSetGain(R_WALL_PID, 12,0,0);//6.4,0,0);//9,3,0.006);//1.8, 10, 0);
 800e4e2:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800e568 <main+0x16c>
 800e4e6:	eddf 0a20 	vldr	s1, [pc, #128]	; 800e568 <main+0x16c>
 800e4ea:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e4ee:	2003      	movs	r0, #3
 800e4f0:	f002 fa1e 	bl	8010930 <PIDSetGain>

  while (1)
  {
	  switch( startup_mode )
 800e4f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4f8:	2b07      	cmp	r3, #7
 800e4fa:	d82b      	bhi.n	800e554 <main+0x158>
 800e4fc:	a201      	add	r2, pc, #4	; (adr r2, 800e504 <main+0x108>)
 800e4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e502:	bf00      	nop
 800e504:	0800e525 	.word	0x0800e525
 800e508:	0800e52b 	.word	0x0800e52b
 800e50c:	0800e531 	.word	0x0800e531
 800e510:	0800e537 	.word	0x0800e537
 800e514:	0800e53d 	.word	0x0800e53d
 800e518:	0800e543 	.word	0x0800e543
 800e51c:	0800e549 	.word	0x0800e549
 800e520:	0800e54f 	.word	0x0800e54f
	  {
	  case PARAMETERSETTING:

		  ParameterSetting();
 800e524:	f7fe fac8 	bl	800cab8 <ParameterSetting>
		//wall_flash_print();
		  break;
 800e528:	e015      	b.n	800e556 <main+0x15a>
	  case 1:
		  GainTestRWall();
 800e52a:	f7fe facd 	bl	800cac8 <GainTestRWall>
		  break;
 800e52e:	e012      	b.n	800e556 <main+0x15a>
	  case GAINTEST:
		  GainTestDWall();
 800e530:	f7fe fb06 	bl	800cb40 <GainTestDWall>
		  break;
 800e534:	e00f      	b.n	800e556 <main+0x15a>
	  case DEBUGGER:
		  Debug();
 800e536:	f7fe fa33 	bl	800c9a0 <Debug>
		  break;
 800e53a:	e00c      	b.n	800e556 <main+0x15a>
	  case FASTEST_RUN:
		  //GainTestLWall();
		  FastestRun();
 800e53c:	f7fe fc3c 	bl	800cdb8 <FastestRun>
		  break;
 800e540:	e009      	b.n	800e556 <main+0x15a>
	  case 5:
		  GainTestAVelo();
 800e542:	f7fe fb67 	bl	800cc14 <GainTestAVelo>
		  break;
 800e546:	e006      	b.n	800e556 <main+0x15a>
	  case EXPLORE:
		  Explore();
 800e548:	f7fe fde0 	bl	800d10c <Explore>
		  break;
 800e54c:	e003      	b.n	800e556 <main+0x15a>
	  case WRITINGFREE:
		  WritingFree();
 800e54e:	f7fe fba1 	bl	800cc94 <WritingFree>
		  break;
 800e552:	e000      	b.n	800e556 <main+0x15a>
	  default :
		  break;
 800e554:	bf00      	nop
	  switch( startup_mode )
 800e556:	e7cd      	b.n	800e4f4 <main+0xf8>
 800e558:	200002bc 	.word	0x200002bc
 800e55c:	3a83126f 	.word	0x3a83126f
 800e560:	452f0000 	.word	0x452f0000
 800e564:	4169999a 	.word	0x4169999a
 800e568:	00000000 	.word	0x00000000

0800e56c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b094      	sub	sp, #80	; 0x50
 800e570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e572:	f107 0320 	add.w	r3, r7, #32
 800e576:	2230      	movs	r2, #48	; 0x30
 800e578:	2100      	movs	r1, #0
 800e57a:	4618      	mov	r0, r3
 800e57c:	f007 fd6f 	bl	801605e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e580:	f107 030c 	add.w	r3, r7, #12
 800e584:	2200      	movs	r2, #0
 800e586:	601a      	str	r2, [r3, #0]
 800e588:	605a      	str	r2, [r3, #4]
 800e58a:	609a      	str	r2, [r3, #8]
 800e58c:	60da      	str	r2, [r3, #12]
 800e58e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e590:	2300      	movs	r3, #0
 800e592:	60bb      	str	r3, [r7, #8]
 800e594:	4b28      	ldr	r3, [pc, #160]	; (800e638 <SystemClock_Config+0xcc>)
 800e596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e598:	4a27      	ldr	r2, [pc, #156]	; (800e638 <SystemClock_Config+0xcc>)
 800e59a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e59e:	6413      	str	r3, [r2, #64]	; 0x40
 800e5a0:	4b25      	ldr	r3, [pc, #148]	; (800e638 <SystemClock_Config+0xcc>)
 800e5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5a8:	60bb      	str	r3, [r7, #8]
 800e5aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	607b      	str	r3, [r7, #4]
 800e5b0:	4b22      	ldr	r3, [pc, #136]	; (800e63c <SystemClock_Config+0xd0>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a21      	ldr	r2, [pc, #132]	; (800e63c <SystemClock_Config+0xd0>)
 800e5b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e5ba:	6013      	str	r3, [r2, #0]
 800e5bc:	4b1f      	ldr	r3, [pc, #124]	; (800e63c <SystemClock_Config+0xd0>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e5c4:	607b      	str	r3, [r7, #4]
 800e5c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e5cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e5d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e5d2:	2302      	movs	r3, #2
 800e5d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e5d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e5da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e5dc:	2304      	movs	r3, #4
 800e5de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800e5e0:	23a8      	movs	r3, #168	; 0xa8
 800e5e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e5e4:	2302      	movs	r3, #2
 800e5e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e5e8:	2304      	movs	r3, #4
 800e5ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e5ec:	f107 0320 	add.w	r3, r7, #32
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f004 fa13 	bl	8012a1c <HAL_RCC_OscConfig>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d001      	beq.n	800e600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800e5fc:	f000 fcc8 	bl	800ef90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e600:	230f      	movs	r3, #15
 800e602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e604:	2302      	movs	r3, #2
 800e606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e608:	2300      	movs	r3, #0
 800e60a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e60c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e618:	f107 030c 	add.w	r3, r7, #12
 800e61c:	2105      	movs	r1, #5
 800e61e:	4618      	mov	r0, r3
 800e620:	f004 fc6c 	bl	8012efc <HAL_RCC_ClockConfig>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800e62a:	f000 fcb1 	bl	800ef90 <Error_Handler>
  }
}
 800e62e:	bf00      	nop
 800e630:	3750      	adds	r7, #80	; 0x50
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	40023800 	.word	0x40023800
 800e63c:	40007000 	.word	0x40007000

0800e640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e646:	463b      	mov	r3, r7
 800e648:	2200      	movs	r2, #0
 800e64a:	601a      	str	r2, [r3, #0]
 800e64c:	605a      	str	r2, [r3, #4]
 800e64e:	609a      	str	r2, [r3, #8]
 800e650:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800e652:	4b2f      	ldr	r3, [pc, #188]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e654:	4a2f      	ldr	r2, [pc, #188]	; (800e714 <MX_ADC1_Init+0xd4>)
 800e656:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800e658:	4b2d      	ldr	r3, [pc, #180]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e65a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e65e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e660:	4b2b      	ldr	r3, [pc, #172]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e662:	2200      	movs	r2, #0
 800e664:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800e666:	4b2a      	ldr	r3, [pc, #168]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e668:	2201      	movs	r2, #1
 800e66a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800e66c:	4b28      	ldr	r3, [pc, #160]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e66e:	2201      	movs	r2, #1
 800e670:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e672:	4b27      	ldr	r3, [pc, #156]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e674:	2200      	movs	r2, #0
 800e676:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e67a:	4b25      	ldr	r3, [pc, #148]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e67c:	2200      	movs	r2, #0
 800e67e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e680:	4b23      	ldr	r3, [pc, #140]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e682:	4a25      	ldr	r2, [pc, #148]	; (800e718 <MX_ADC1_Init+0xd8>)
 800e684:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e686:	4b22      	ldr	r3, [pc, #136]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e688:	2200      	movs	r2, #0
 800e68a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800e68c:	4b20      	ldr	r3, [pc, #128]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e68e:	2203      	movs	r2, #3
 800e690:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800e692:	4b1f      	ldr	r3, [pc, #124]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e694:	2201      	movs	r2, #1
 800e696:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e69a:	4b1d      	ldr	r3, [pc, #116]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e69c:	2201      	movs	r2, #1
 800e69e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e6a0:	481b      	ldr	r0, [pc, #108]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e6a2:	f002 fcd7 	bl	8011054 <HAL_ADC_Init>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d001      	beq.n	800e6b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800e6ac:	f000 fc70 	bl	800ef90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800e6b0:	230a      	movs	r3, #10
 800e6b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800e6b8:	2303      	movs	r3, #3
 800e6ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e6bc:	463b      	mov	r3, r7
 800e6be:	4619      	mov	r1, r3
 800e6c0:	4813      	ldr	r0, [pc, #76]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e6c2:	f002 fe65 	bl	8011390 <HAL_ADC_ConfigChannel>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800e6cc:	f000 fc60 	bl	800ef90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800e6d0:	230e      	movs	r3, #14
 800e6d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800e6d4:	2302      	movs	r3, #2
 800e6d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e6d8:	463b      	mov	r3, r7
 800e6da:	4619      	mov	r1, r3
 800e6dc:	480c      	ldr	r0, [pc, #48]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e6de:	f002 fe57 	bl	8011390 <HAL_ADC_ConfigChannel>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d001      	beq.n	800e6ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800e6e8:	f000 fc52 	bl	800ef90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800e6ec:	2309      	movs	r3, #9
 800e6ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800e6f0:	2303      	movs	r3, #3
 800e6f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e6f4:	463b      	mov	r3, r7
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	4805      	ldr	r0, [pc, #20]	; (800e710 <MX_ADC1_Init+0xd0>)
 800e6fa:	f002 fe49 	bl	8011390 <HAL_ADC_ConfigChannel>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	d001      	beq.n	800e708 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800e704:	f000 fc44 	bl	800ef90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e708:	bf00      	nop
 800e70a:	3710      	adds	r7, #16
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	200008f4 	.word	0x200008f4
 800e714:	40012000 	.word	0x40012000
 800e718:	0f000001 	.word	0x0f000001

0800e71c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e722:	463b      	mov	r3, r7
 800e724:	2200      	movs	r2, #0
 800e726:	601a      	str	r2, [r3, #0]
 800e728:	605a      	str	r2, [r3, #4]
 800e72a:	609a      	str	r2, [r3, #8]
 800e72c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800e72e:	4b28      	ldr	r3, [pc, #160]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e730:	4a28      	ldr	r2, [pc, #160]	; (800e7d4 <MX_ADC2_Init+0xb8>)
 800e732:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800e734:	4b26      	ldr	r3, [pc, #152]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e736:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e73a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800e73c:	4b24      	ldr	r3, [pc, #144]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e73e:	2200      	movs	r2, #0
 800e740:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800e742:	4b23      	ldr	r3, [pc, #140]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e744:	2201      	movs	r2, #1
 800e746:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800e748:	4b21      	ldr	r3, [pc, #132]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e74a:	2201      	movs	r2, #1
 800e74c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800e74e:	4b20      	ldr	r3, [pc, #128]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e750:	2200      	movs	r2, #0
 800e752:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e756:	4b1e      	ldr	r3, [pc, #120]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e758:	2200      	movs	r2, #0
 800e75a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e75c:	4b1c      	ldr	r3, [pc, #112]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e75e:	4a1e      	ldr	r2, [pc, #120]	; (800e7d8 <MX_ADC2_Init+0xbc>)
 800e760:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e762:	4b1b      	ldr	r3, [pc, #108]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e764:	2200      	movs	r2, #0
 800e766:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800e768:	4b19      	ldr	r3, [pc, #100]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e76a:	2202      	movs	r2, #2
 800e76c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800e76e:	4b18      	ldr	r3, [pc, #96]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e770:	2201      	movs	r2, #1
 800e772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e776:	4b16      	ldr	r3, [pc, #88]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e778:	2201      	movs	r2, #1
 800e77a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800e77c:	4814      	ldr	r0, [pc, #80]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e77e:	f002 fc69 	bl	8011054 <HAL_ADC_Init>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d001      	beq.n	800e78c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800e788:	f000 fc02 	bl	800ef90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800e78c:	230b      	movs	r3, #11
 800e78e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e790:	2301      	movs	r3, #1
 800e792:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800e794:	2303      	movs	r3, #3
 800e796:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800e798:	463b      	mov	r3, r7
 800e79a:	4619      	mov	r1, r3
 800e79c:	480c      	ldr	r0, [pc, #48]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e79e:	f002 fdf7 	bl	8011390 <HAL_ADC_ConfigChannel>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800e7a8:	f000 fbf2 	bl	800ef90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800e7ac:	230f      	movs	r3, #15
 800e7ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800e7b0:	2302      	movs	r3, #2
 800e7b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800e7b4:	463b      	mov	r3, r7
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	4805      	ldr	r0, [pc, #20]	; (800e7d0 <MX_ADC2_Init+0xb4>)
 800e7ba:	f002 fde9 	bl	8011390 <HAL_ADC_ConfigChannel>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d001      	beq.n	800e7c8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800e7c4:	f000 fbe4 	bl	800ef90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800e7c8:	bf00      	nop
 800e7ca:	3710      	adds	r7, #16
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	20000814 	.word	0x20000814
 800e7d4:	40012100 	.word	0x40012100
 800e7d8:	0f000001 	.word	0x0f000001

0800e7dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800e7e0:	4b17      	ldr	r3, [pc, #92]	; (800e840 <MX_SPI3_Init+0x64>)
 800e7e2:	4a18      	ldr	r2, [pc, #96]	; (800e844 <MX_SPI3_Init+0x68>)
 800e7e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800e7e6:	4b16      	ldr	r3, [pc, #88]	; (800e840 <MX_SPI3_Init+0x64>)
 800e7e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e7ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800e7ee:	4b14      	ldr	r3, [pc, #80]	; (800e840 <MX_SPI3_Init+0x64>)
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800e7f4:	4b12      	ldr	r3, [pc, #72]	; (800e840 <MX_SPI3_Init+0x64>)
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800e7fa:	4b11      	ldr	r3, [pc, #68]	; (800e840 <MX_SPI3_Init+0x64>)
 800e7fc:	2202      	movs	r2, #2
 800e7fe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800e800:	4b0f      	ldr	r3, [pc, #60]	; (800e840 <MX_SPI3_Init+0x64>)
 800e802:	2201      	movs	r2, #1
 800e804:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800e806:	4b0e      	ldr	r3, [pc, #56]	; (800e840 <MX_SPI3_Init+0x64>)
 800e808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e80c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800e80e:	4b0c      	ldr	r3, [pc, #48]	; (800e840 <MX_SPI3_Init+0x64>)
 800e810:	2228      	movs	r2, #40	; 0x28
 800e812:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e814:	4b0a      	ldr	r3, [pc, #40]	; (800e840 <MX_SPI3_Init+0x64>)
 800e816:	2200      	movs	r2, #0
 800e818:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800e81a:	4b09      	ldr	r3, [pc, #36]	; (800e840 <MX_SPI3_Init+0x64>)
 800e81c:	2200      	movs	r2, #0
 800e81e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e820:	4b07      	ldr	r3, [pc, #28]	; (800e840 <MX_SPI3_Init+0x64>)
 800e822:	2200      	movs	r2, #0
 800e824:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800e826:	4b06      	ldr	r3, [pc, #24]	; (800e840 <MX_SPI3_Init+0x64>)
 800e828:	220a      	movs	r2, #10
 800e82a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800e82c:	4804      	ldr	r0, [pc, #16]	; (800e840 <MX_SPI3_Init+0x64>)
 800e82e:	f004 fd57 	bl	80132e0 <HAL_SPI_Init>
 800e832:	4603      	mov	r3, r0
 800e834:	2b00      	cmp	r3, #0
 800e836:	d001      	beq.n	800e83c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800e838:	f000 fbaa 	bl	800ef90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800e83c:	bf00      	nop
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	2000089c 	.word	0x2000089c
 800e844:	40003c00 	.word	0x40003c00

0800e848 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b086      	sub	sp, #24
 800e84c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e84e:	f107 0308 	add.w	r3, r7, #8
 800e852:	2200      	movs	r2, #0
 800e854:	601a      	str	r2, [r3, #0]
 800e856:	605a      	str	r2, [r3, #4]
 800e858:	609a      	str	r2, [r3, #8]
 800e85a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e85c:	463b      	mov	r3, r7
 800e85e:	2200      	movs	r2, #0
 800e860:	601a      	str	r2, [r3, #0]
 800e862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800e864:	4b1e      	ldr	r3, [pc, #120]	; (800e8e0 <MX_TIM1_Init+0x98>)
 800e866:	4a1f      	ldr	r2, [pc, #124]	; (800e8e4 <MX_TIM1_Init+0x9c>)
 800e868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800e86a:	4b1d      	ldr	r3, [pc, #116]	; (800e8e0 <MX_TIM1_Init+0x98>)
 800e86c:	22a7      	movs	r2, #167	; 0xa7
 800e86e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e870:	4b1b      	ldr	r3, [pc, #108]	; (800e8e0 <MX_TIM1_Init+0x98>)
 800e872:	2200      	movs	r2, #0
 800e874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800e876:	4b1a      	ldr	r3, [pc, #104]	; (800e8e0 <MX_TIM1_Init+0x98>)
 800e878:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e87c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e87e:	4b18      	ldr	r3, [pc, #96]	; (800e8e0 <MX_TIM1_Init+0x98>)
 800e880:	2200      	movs	r2, #0
 800e882:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800e884:	4b16      	ldr	r3, [pc, #88]	; (800e8e0 <MX_TIM1_Init+0x98>)
 800e886:	2200      	movs	r2, #0
 800e888:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e88a:	4b15      	ldr	r3, [pc, #84]	; (800e8e0 <MX_TIM1_Init+0x98>)
 800e88c:	2200      	movs	r2, #0
 800e88e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800e890:	4813      	ldr	r0, [pc, #76]	; (800e8e0 <MX_TIM1_Init+0x98>)
 800e892:	f005 fa79 	bl	8013d88 <HAL_TIM_Base_Init>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d001      	beq.n	800e8a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800e89c:	f000 fb78 	bl	800ef90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e8a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e8a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800e8a6:	f107 0308 	add.w	r3, r7, #8
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	480c      	ldr	r0, [pc, #48]	; (800e8e0 <MX_TIM1_Init+0x98>)
 800e8ae:	f006 f843 	bl	8014938 <HAL_TIM_ConfigClockSource>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d001      	beq.n	800e8bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800e8b8:	f000 fb6a 	bl	800ef90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800e8c4:	463b      	mov	r3, r7
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	4805      	ldr	r0, [pc, #20]	; (800e8e0 <MX_TIM1_Init+0x98>)
 800e8ca:	f006 fcef 	bl	80152ac <HAL_TIMEx_MasterConfigSynchronization>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d001      	beq.n	800e8d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800e8d4:	f000 fb5c 	bl	800ef90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800e8d8:	bf00      	nop
 800e8da:	3718      	adds	r7, #24
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	200009dc 	.word	0x200009dc
 800e8e4:	40010000 	.word	0x40010000

0800e8e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b08e      	sub	sp, #56	; 0x38
 800e8ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e8ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	601a      	str	r2, [r3, #0]
 800e8f6:	605a      	str	r2, [r3, #4]
 800e8f8:	609a      	str	r2, [r3, #8]
 800e8fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e8fc:	f107 0320 	add.w	r3, r7, #32
 800e900:	2200      	movs	r2, #0
 800e902:	601a      	str	r2, [r3, #0]
 800e904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e906:	1d3b      	adds	r3, r7, #4
 800e908:	2200      	movs	r2, #0
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	605a      	str	r2, [r3, #4]
 800e90e:	609a      	str	r2, [r3, #8]
 800e910:	60da      	str	r2, [r3, #12]
 800e912:	611a      	str	r2, [r3, #16]
 800e914:	615a      	str	r2, [r3, #20]
 800e916:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e918:	4b2d      	ldr	r3, [pc, #180]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e91a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e91e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e920:	4b2b      	ldr	r3, [pc, #172]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e922:	2200      	movs	r2, #0
 800e924:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e926:	4b2a      	ldr	r3, [pc, #168]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e928:	2200      	movs	r2, #0
 800e92a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800e92c:	4b28      	ldr	r3, [pc, #160]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e92e:	f241 0267 	movw	r2, #4199	; 0x1067
 800e932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e934:	4b26      	ldr	r3, [pc, #152]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e936:	2200      	movs	r2, #0
 800e938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e93a:	4b25      	ldr	r3, [pc, #148]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e93c:	2200      	movs	r2, #0
 800e93e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e940:	4823      	ldr	r0, [pc, #140]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e942:	f005 fa21 	bl	8013d88 <HAL_TIM_Base_Init>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d001      	beq.n	800e950 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800e94c:	f000 fb20 	bl	800ef90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e954:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e95a:	4619      	mov	r1, r3
 800e95c:	481c      	ldr	r0, [pc, #112]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e95e:	f005 ffeb 	bl	8014938 <HAL_TIM_ConfigClockSource>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d001      	beq.n	800e96c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800e968:	f000 fb12 	bl	800ef90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e96c:	4818      	ldr	r0, [pc, #96]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e96e:	f005 fbd9 	bl	8014124 <HAL_TIM_PWM_Init>
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800e978:	f000 fb0a 	bl	800ef90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e97c:	2300      	movs	r3, #0
 800e97e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e980:	2300      	movs	r3, #0
 800e982:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e984:	f107 0320 	add.w	r3, r7, #32
 800e988:	4619      	mov	r1, r3
 800e98a:	4811      	ldr	r0, [pc, #68]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e98c:	f006 fc8e 	bl	80152ac <HAL_TIMEx_MasterConfigSynchronization>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d001      	beq.n	800e99a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800e996:	f000 fafb 	bl	800ef90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e99a:	2360      	movs	r3, #96	; 0x60
 800e99c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e9aa:	1d3b      	adds	r3, r7, #4
 800e9ac:	220c      	movs	r2, #12
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	4807      	ldr	r0, [pc, #28]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e9b2:	f005 fefb 	bl	80147ac <HAL_TIM_PWM_ConfigChannel>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d001      	beq.n	800e9c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800e9bc:	f000 fae8 	bl	800ef90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e9c0:	4803      	ldr	r0, [pc, #12]	; (800e9d0 <MX_TIM2_Init+0xe8>)
 800e9c2:	f000 fd3f 	bl	800f444 <HAL_TIM_MspPostInit>

}
 800e9c6:	bf00      	nop
 800e9c8:	3738      	adds	r7, #56	; 0x38
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	2000023c 	.word	0x2000023c

0800e9d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b08c      	sub	sp, #48	; 0x30
 800e9d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e9da:	f107 030c 	add.w	r3, r7, #12
 800e9de:	2224      	movs	r2, #36	; 0x24
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f007 fb3b 	bl	801605e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e9e8:	1d3b      	adds	r3, r7, #4
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	601a      	str	r2, [r3, #0]
 800e9ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e9f0:	4b20      	ldr	r3, [pc, #128]	; (800ea74 <MX_TIM3_Init+0xa0>)
 800e9f2:	4a21      	ldr	r2, [pc, #132]	; (800ea78 <MX_TIM3_Init+0xa4>)
 800e9f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800e9f6:	4b1f      	ldr	r3, [pc, #124]	; (800ea74 <MX_TIM3_Init+0xa0>)
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e9fc:	4b1d      	ldr	r3, [pc, #116]	; (800ea74 <MX_TIM3_Init+0xa0>)
 800e9fe:	2200      	movs	r2, #0
 800ea00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800ea02:	4b1c      	ldr	r3, [pc, #112]	; (800ea74 <MX_TIM3_Init+0xa0>)
 800ea04:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800ea08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ea0a:	4b1a      	ldr	r3, [pc, #104]	; (800ea74 <MX_TIM3_Init+0xa0>)
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ea10:	4b18      	ldr	r3, [pc, #96]	; (800ea74 <MX_TIM3_Init+0xa0>)
 800ea12:	2200      	movs	r2, #0
 800ea14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800ea16:	2303      	movs	r3, #3
 800ea18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ea22:	2300      	movs	r3, #0
 800ea24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ea2e:	2301      	movs	r3, #1
 800ea30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ea32:	2300      	movs	r3, #0
 800ea34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800ea3a:	f107 030c 	add.w	r3, r7, #12
 800ea3e:	4619      	mov	r1, r3
 800ea40:	480c      	ldr	r0, [pc, #48]	; (800ea74 <MX_TIM3_Init+0xa0>)
 800ea42:	f005 fc3b 	bl	80142bc <HAL_TIM_Encoder_Init>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d001      	beq.n	800ea50 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800ea4c:	f000 faa0 	bl	800ef90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ea50:	2300      	movs	r3, #0
 800ea52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ea54:	2300      	movs	r3, #0
 800ea56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ea58:	1d3b      	adds	r3, r7, #4
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	4805      	ldr	r0, [pc, #20]	; (800ea74 <MX_TIM3_Init+0xa0>)
 800ea5e:	f006 fc25 	bl	80152ac <HAL_TIMEx_MasterConfigSynchronization>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d001      	beq.n	800ea6c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800ea68:	f000 fa92 	bl	800ef90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800ea6c:	bf00      	nop
 800ea6e:	3730      	adds	r7, #48	; 0x30
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	2000085c 	.word	0x2000085c
 800ea78:	40000400 	.word	0x40000400

0800ea7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b08c      	sub	sp, #48	; 0x30
 800ea80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ea82:	f107 030c 	add.w	r3, r7, #12
 800ea86:	2224      	movs	r2, #36	; 0x24
 800ea88:	2100      	movs	r1, #0
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f007 fae7 	bl	801605e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ea90:	1d3b      	adds	r3, r7, #4
 800ea92:	2200      	movs	r2, #0
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ea98:	4b20      	ldr	r3, [pc, #128]	; (800eb1c <MX_TIM4_Init+0xa0>)
 800ea9a:	4a21      	ldr	r2, [pc, #132]	; (800eb20 <MX_TIM4_Init+0xa4>)
 800ea9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800ea9e:	4b1f      	ldr	r3, [pc, #124]	; (800eb1c <MX_TIM4_Init+0xa0>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eaa4:	4b1d      	ldr	r3, [pc, #116]	; (800eb1c <MX_TIM4_Init+0xa0>)
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800eaaa:	4b1c      	ldr	r3, [pc, #112]	; (800eb1c <MX_TIM4_Init+0xa0>)
 800eaac:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800eab0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eab2:	4b1a      	ldr	r3, [pc, #104]	; (800eb1c <MX_TIM4_Init+0xa0>)
 800eab4:	2200      	movs	r2, #0
 800eab6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eab8:	4b18      	ldr	r3, [pc, #96]	; (800eb1c <MX_TIM4_Init+0xa0>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800eabe:	2303      	movs	r3, #3
 800eac0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800eac2:	2300      	movs	r3, #0
 800eac4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800eac6:	2301      	movs	r3, #1
 800eac8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800eaca:	2300      	movs	r3, #0
 800eacc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800eace:	2300      	movs	r3, #0
 800ead0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ead2:	2300      	movs	r3, #0
 800ead4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ead6:	2301      	movs	r3, #1
 800ead8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800eada:	2300      	movs	r3, #0
 800eadc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800eae2:	f107 030c 	add.w	r3, r7, #12
 800eae6:	4619      	mov	r1, r3
 800eae8:	480c      	ldr	r0, [pc, #48]	; (800eb1c <MX_TIM4_Init+0xa0>)
 800eaea:	f005 fbe7 	bl	80142bc <HAL_TIM_Encoder_Init>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d001      	beq.n	800eaf8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800eaf4:	f000 fa4c 	bl	800ef90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eafc:	2300      	movs	r3, #0
 800eafe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800eb00:	1d3b      	adds	r3, r7, #4
 800eb02:	4619      	mov	r1, r3
 800eb04:	4805      	ldr	r0, [pc, #20]	; (800eb1c <MX_TIM4_Init+0xa0>)
 800eb06:	f006 fbd1 	bl	80152ac <HAL_TIMEx_MasterConfigSynchronization>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d001      	beq.n	800eb14 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800eb10:	f000 fa3e 	bl	800ef90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800eb14:	bf00      	nop
 800eb16:	3730      	adds	r7, #48	; 0x30
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	200007d4 	.word	0x200007d4
 800eb20:	40000800 	.word	0x40000800

0800eb24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08e      	sub	sp, #56	; 0x38
 800eb28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800eb2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eb2e:	2200      	movs	r2, #0
 800eb30:	601a      	str	r2, [r3, #0]
 800eb32:	605a      	str	r2, [r3, #4]
 800eb34:	609a      	str	r2, [r3, #8]
 800eb36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eb38:	f107 0320 	add.w	r3, r7, #32
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	601a      	str	r2, [r3, #0]
 800eb40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800eb42:	1d3b      	adds	r3, r7, #4
 800eb44:	2200      	movs	r2, #0
 800eb46:	601a      	str	r2, [r3, #0]
 800eb48:	605a      	str	r2, [r3, #4]
 800eb4a:	609a      	str	r2, [r3, #8]
 800eb4c:	60da      	str	r2, [r3, #12]
 800eb4e:	611a      	str	r2, [r3, #16]
 800eb50:	615a      	str	r2, [r3, #20]
 800eb52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800eb54:	4b2c      	ldr	r3, [pc, #176]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800eb56:	4a2d      	ldr	r2, [pc, #180]	; (800ec0c <MX_TIM5_Init+0xe8>)
 800eb58:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800eb5a:	4b2b      	ldr	r3, [pc, #172]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb60:	4b29      	ldr	r3, [pc, #164]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800eb66:	4b28      	ldr	r3, [pc, #160]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800eb68:	f241 0267 	movw	r2, #4199	; 0x1067
 800eb6c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eb6e:	4b26      	ldr	r3, [pc, #152]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eb74:	4b24      	ldr	r3, [pc, #144]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800eb76:	2200      	movs	r2, #0
 800eb78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800eb7a:	4823      	ldr	r0, [pc, #140]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800eb7c:	f005 f904 	bl	8013d88 <HAL_TIM_Base_Init>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d001      	beq.n	800eb8a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800eb86:	f000 fa03 	bl	800ef90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800eb8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800eb90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eb94:	4619      	mov	r1, r3
 800eb96:	481c      	ldr	r0, [pc, #112]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800eb98:	f005 fece 	bl	8014938 <HAL_TIM_ConfigClockSource>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d001      	beq.n	800eba6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800eba2:	f000 f9f5 	bl	800ef90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800eba6:	4818      	ldr	r0, [pc, #96]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800eba8:	f005 fabc 	bl	8014124 <HAL_TIM_PWM_Init>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d001      	beq.n	800ebb6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800ebb2:	f000 f9ed 	bl	800ef90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ebbe:	f107 0320 	add.w	r3, r7, #32
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	4810      	ldr	r0, [pc, #64]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800ebc6:	f006 fb71 	bl	80152ac <HAL_TIMEx_MasterConfigSynchronization>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d001      	beq.n	800ebd4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800ebd0:	f000 f9de 	bl	800ef90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ebd4:	2360      	movs	r3, #96	; 0x60
 800ebd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ebe4:	1d3b      	adds	r3, r7, #4
 800ebe6:	2204      	movs	r2, #4
 800ebe8:	4619      	mov	r1, r3
 800ebea:	4807      	ldr	r0, [pc, #28]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800ebec:	f005 fdde 	bl	80147ac <HAL_TIM_PWM_ConfigChannel>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d001      	beq.n	800ebfa <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800ebf6:	f000 f9cb 	bl	800ef90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800ebfa:	4803      	ldr	r0, [pc, #12]	; (800ec08 <MX_TIM5_Init+0xe4>)
 800ebfc:	f000 fc22 	bl	800f444 <HAL_TIM_MspPostInit>

}
 800ec00:	bf00      	nop
 800ec02:	3738      	adds	r7, #56	; 0x38
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	2000027c 	.word	0x2000027c
 800ec0c:	40000c00 	.word	0x40000c00

0800ec10 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b096      	sub	sp, #88	; 0x58
 800ec14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ec16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	601a      	str	r2, [r3, #0]
 800ec1e:	605a      	str	r2, [r3, #4]
 800ec20:	609a      	str	r2, [r3, #8]
 800ec22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ec24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec28:	2200      	movs	r2, #0
 800ec2a:	601a      	str	r2, [r3, #0]
 800ec2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ec2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec32:	2200      	movs	r2, #0
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	605a      	str	r2, [r3, #4]
 800ec38:	609a      	str	r2, [r3, #8]
 800ec3a:	60da      	str	r2, [r3, #12]
 800ec3c:	611a      	str	r2, [r3, #16]
 800ec3e:	615a      	str	r2, [r3, #20]
 800ec40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800ec42:	1d3b      	adds	r3, r7, #4
 800ec44:	2220      	movs	r2, #32
 800ec46:	2100      	movs	r1, #0
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f007 fa08 	bl	801605e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800ec4e:	4b42      	ldr	r3, [pc, #264]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ec50:	4a42      	ldr	r2, [pc, #264]	; (800ed5c <MX_TIM8_Init+0x14c>)
 800ec52:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800ec54:	4b40      	ldr	r3, [pc, #256]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ec56:	22a7      	movs	r2, #167	; 0xa7
 800ec58:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ec5a:	4b3f      	ldr	r3, [pc, #252]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800ec60:	4b3d      	ldr	r3, [pc, #244]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ec62:	2231      	movs	r2, #49	; 0x31
 800ec64:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ec66:	4b3c      	ldr	r3, [pc, #240]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ec68:	2200      	movs	r2, #0
 800ec6a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800ec6c:	4b3a      	ldr	r3, [pc, #232]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ec6e:	2200      	movs	r2, #0
 800ec70:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800ec72:	4b39      	ldr	r3, [pc, #228]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ec74:	2280      	movs	r2, #128	; 0x80
 800ec76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800ec78:	4837      	ldr	r0, [pc, #220]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ec7a:	f005 f885 	bl	8013d88 <HAL_TIM_Base_Init>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d001      	beq.n	800ec88 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800ec84:	f000 f984 	bl	800ef90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ec88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800ec8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec92:	4619      	mov	r1, r3
 800ec94:	4830      	ldr	r0, [pc, #192]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ec96:	f005 fe4f 	bl	8014938 <HAL_TIM_ConfigClockSource>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d001      	beq.n	800eca4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800eca0:	f000 f976 	bl	800ef90 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800eca4:	482c      	ldr	r0, [pc, #176]	; (800ed58 <MX_TIM8_Init+0x148>)
 800eca6:	f005 f8e9 	bl	8013e7c <HAL_TIM_OC_Init>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d001      	beq.n	800ecb4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800ecb0:	f000 f96e 	bl	800ef90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800ecbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	4825      	ldr	r0, [pc, #148]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ecc4:	f006 faf2 	bl	80152ac <HAL_TIMEx_MasterConfigSynchronization>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d001      	beq.n	800ecd2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800ecce:	f000 f95f 	bl	800ef90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800ecd2:	2330      	movs	r3, #48	; 0x30
 800ecd4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800ecd6:	2318      	movs	r3, #24
 800ecd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ecde:	2300      	movs	r3, #0
 800ece0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ece2:	2300      	movs	r3, #0
 800ece4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ece6:	2300      	movs	r3, #0
 800ece8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ecea:	2300      	movs	r3, #0
 800ecec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ecee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	4818      	ldr	r0, [pc, #96]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ecf8:	f005 fcf8 	bl	80146ec <HAL_TIM_OC_ConfigChannel>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d001      	beq.n	800ed06 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800ed02:	f000 f945 	bl	800ef90 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800ed06:	4b14      	ldr	r3, [pc, #80]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	699a      	ldr	r2, [r3, #24]
 800ed0c:	4b12      	ldr	r3, [pc, #72]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f042 0208 	orr.w	r2, r2, #8
 800ed14:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ed16:	2300      	movs	r3, #0
 800ed18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800ed22:	2300      	movs	r3, #0
 800ed24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ed26:	2300      	movs	r3, #0
 800ed28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ed2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ed30:	2300      	movs	r3, #0
 800ed32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800ed34:	1d3b      	adds	r3, r7, #4
 800ed36:	4619      	mov	r1, r3
 800ed38:	4807      	ldr	r0, [pc, #28]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ed3a:	f006 fb33 	bl	80153a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d001      	beq.n	800ed48 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800ed44:	f000 f924 	bl	800ef90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800ed48:	4803      	ldr	r0, [pc, #12]	; (800ed58 <MX_TIM8_Init+0x148>)
 800ed4a:	f000 fb7b 	bl	800f444 <HAL_TIM_MspPostInit>

}
 800ed4e:	bf00      	nop
 800ed50:	3758      	adds	r7, #88	; 0x58
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	20000794 	.word	0x20000794
 800ed5c:	40010400 	.word	0x40010400

0800ed60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ed64:	4b11      	ldr	r3, [pc, #68]	; (800edac <MX_USART1_UART_Init+0x4c>)
 800ed66:	4a12      	ldr	r2, [pc, #72]	; (800edb0 <MX_USART1_UART_Init+0x50>)
 800ed68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ed6a:	4b10      	ldr	r3, [pc, #64]	; (800edac <MX_USART1_UART_Init+0x4c>)
 800ed6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ed70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ed72:	4b0e      	ldr	r3, [pc, #56]	; (800edac <MX_USART1_UART_Init+0x4c>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ed78:	4b0c      	ldr	r3, [pc, #48]	; (800edac <MX_USART1_UART_Init+0x4c>)
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ed7e:	4b0b      	ldr	r3, [pc, #44]	; (800edac <MX_USART1_UART_Init+0x4c>)
 800ed80:	2200      	movs	r2, #0
 800ed82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ed84:	4b09      	ldr	r3, [pc, #36]	; (800edac <MX_USART1_UART_Init+0x4c>)
 800ed86:	220c      	movs	r2, #12
 800ed88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ed8a:	4b08      	ldr	r3, [pc, #32]	; (800edac <MX_USART1_UART_Init+0x4c>)
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ed90:	4b06      	ldr	r3, [pc, #24]	; (800edac <MX_USART1_UART_Init+0x4c>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ed96:	4805      	ldr	r0, [pc, #20]	; (800edac <MX_USART1_UART_Init+0x4c>)
 800ed98:	f006 fb8f 	bl	80154ba <HAL_UART_Init>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800eda2:	f000 f8f5 	bl	800ef90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800eda6:	bf00      	nop
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	2000093c 	.word	0x2000093c
 800edb0:	40011000 	.word	0x40011000

0800edb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800edba:	2300      	movs	r3, #0
 800edbc:	607b      	str	r3, [r7, #4]
 800edbe:	4b10      	ldr	r3, [pc, #64]	; (800ee00 <MX_DMA_Init+0x4c>)
 800edc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edc2:	4a0f      	ldr	r2, [pc, #60]	; (800ee00 <MX_DMA_Init+0x4c>)
 800edc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800edc8:	6313      	str	r3, [r2, #48]	; 0x30
 800edca:	4b0d      	ldr	r3, [pc, #52]	; (800ee00 <MX_DMA_Init+0x4c>)
 800edcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800edd2:	607b      	str	r3, [r7, #4]
 800edd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800edd6:	2200      	movs	r2, #0
 800edd8:	2100      	movs	r1, #0
 800edda:	2038      	movs	r0, #56	; 0x38
 800eddc:	f002 fe53 	bl	8011a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800ede0:	2038      	movs	r0, #56	; 0x38
 800ede2:	f002 fe6c 	bl	8011abe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800ede6:	2200      	movs	r2, #0
 800ede8:	2100      	movs	r1, #0
 800edea:	203a      	movs	r0, #58	; 0x3a
 800edec:	f002 fe4b 	bl	8011a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800edf0:	203a      	movs	r0, #58	; 0x3a
 800edf2:	f002 fe64 	bl	8011abe <HAL_NVIC_EnableIRQ>

}
 800edf6:	bf00      	nop
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	40023800 	.word	0x40023800

0800ee04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b08a      	sub	sp, #40	; 0x28
 800ee08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee0a:	f107 0314 	add.w	r3, r7, #20
 800ee0e:	2200      	movs	r2, #0
 800ee10:	601a      	str	r2, [r3, #0]
 800ee12:	605a      	str	r2, [r3, #4]
 800ee14:	609a      	str	r2, [r3, #8]
 800ee16:	60da      	str	r2, [r3, #12]
 800ee18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	613b      	str	r3, [r7, #16]
 800ee1e:	4b56      	ldr	r3, [pc, #344]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee22:	4a55      	ldr	r2, [pc, #340]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee28:	6313      	str	r3, [r2, #48]	; 0x30
 800ee2a:	4b53      	ldr	r3, [pc, #332]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee32:	613b      	str	r3, [r7, #16]
 800ee34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ee36:	2300      	movs	r3, #0
 800ee38:	60fb      	str	r3, [r7, #12]
 800ee3a:	4b4f      	ldr	r3, [pc, #316]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee3e:	4a4e      	ldr	r2, [pc, #312]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee40:	f043 0304 	orr.w	r3, r3, #4
 800ee44:	6313      	str	r3, [r2, #48]	; 0x30
 800ee46:	4b4c      	ldr	r3, [pc, #304]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee4a:	f003 0304 	and.w	r3, r3, #4
 800ee4e:	60fb      	str	r3, [r7, #12]
 800ee50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee52:	2300      	movs	r3, #0
 800ee54:	60bb      	str	r3, [r7, #8]
 800ee56:	4b48      	ldr	r3, [pc, #288]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee5a:	4a47      	ldr	r2, [pc, #284]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee5c:	f043 0301 	orr.w	r3, r3, #1
 800ee60:	6313      	str	r3, [r2, #48]	; 0x30
 800ee62:	4b45      	ldr	r3, [pc, #276]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee66:	f003 0301 	and.w	r3, r3, #1
 800ee6a:	60bb      	str	r3, [r7, #8]
 800ee6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee6e:	2300      	movs	r3, #0
 800ee70:	607b      	str	r3, [r7, #4]
 800ee72:	4b41      	ldr	r3, [pc, #260]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee76:	4a40      	ldr	r2, [pc, #256]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee78:	f043 0302 	orr.w	r3, r3, #2
 800ee7c:	6313      	str	r3, [r2, #48]	; 0x30
 800ee7e:	4b3e      	ldr	r3, [pc, #248]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee82:	f003 0302 	and.w	r3, r3, #2
 800ee86:	607b      	str	r3, [r7, #4]
 800ee88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	603b      	str	r3, [r7, #0]
 800ee8e:	4b3a      	ldr	r3, [pc, #232]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee92:	4a39      	ldr	r2, [pc, #228]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee94:	f043 0308 	orr.w	r3, r3, #8
 800ee98:	6313      	str	r3, [r2, #48]	; 0x30
 800ee9a:	4b37      	ldr	r3, [pc, #220]	; (800ef78 <MX_GPIO_Init+0x174>)
 800ee9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee9e:	f003 0308 	and.w	r3, r3, #8
 800eea2:	603b      	str	r3, [r7, #0]
 800eea4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800eea6:	2200      	movs	r2, #0
 800eea8:	2105      	movs	r1, #5
 800eeaa:	4834      	ldr	r0, [pc, #208]	; (800ef7c <MX_GPIO_Init+0x178>)
 800eeac:	f003 fd84 	bl	80129b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f44f 7140 	mov.w	r1, #768	; 0x300
 800eeb6:	4832      	ldr	r0, [pc, #200]	; (800ef80 <MX_GPIO_Init+0x17c>)
 800eeb8:	f003 fd7e 	bl	80129b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800eebc:	2200      	movs	r2, #0
 800eebe:	2104      	movs	r1, #4
 800eec0:	4830      	ldr	r0, [pc, #192]	; (800ef84 <MX_GPIO_Init+0x180>)
 800eec2:	f003 fd79 	bl	80129b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800eec6:	2200      	movs	r2, #0
 800eec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eecc:	482e      	ldr	r0, [pc, #184]	; (800ef88 <MX_GPIO_Init+0x184>)
 800eece:	f003 fd73 	bl	80129b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800eed2:	2305      	movs	r3, #5
 800eed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eed6:	2301      	movs	r3, #1
 800eed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eeda:	2300      	movs	r3, #0
 800eedc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eede:	2300      	movs	r3, #0
 800eee0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eee2:	f107 0314 	add.w	r3, r7, #20
 800eee6:	4619      	mov	r1, r3
 800eee8:	4824      	ldr	r0, [pc, #144]	; (800ef7c <MX_GPIO_Init+0x178>)
 800eeea:	f003 fbcb 	bl	8012684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800eeee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800eef4:	4b25      	ldr	r3, [pc, #148]	; (800ef8c <MX_GPIO_Init+0x188>)
 800eef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eef8:	2300      	movs	r3, #0
 800eefa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eefc:	f107 0314 	add.w	r3, r7, #20
 800ef00:	4619      	mov	r1, r3
 800ef02:	4821      	ldr	r0, [pc, #132]	; (800ef88 <MX_GPIO_Init+0x184>)
 800ef04:	f003 fbbe 	bl	8012684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ef08:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ef0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef12:	2300      	movs	r3, #0
 800ef14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef16:	2300      	movs	r3, #0
 800ef18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ef1a:	f107 0314 	add.w	r3, r7, #20
 800ef1e:	4619      	mov	r1, r3
 800ef20:	4817      	ldr	r0, [pc, #92]	; (800ef80 <MX_GPIO_Init+0x17c>)
 800ef22:	f003 fbaf 	bl	8012684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ef26:	2304      	movs	r3, #4
 800ef28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef32:	2300      	movs	r3, #0
 800ef34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ef36:	f107 0314 	add.w	r3, r7, #20
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	4811      	ldr	r0, [pc, #68]	; (800ef84 <MX_GPIO_Init+0x180>)
 800ef3e:	f003 fba1 	bl	8012684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ef42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef50:	2300      	movs	r3, #0
 800ef52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ef54:	f107 0314 	add.w	r3, r7, #20
 800ef58:	4619      	mov	r1, r3
 800ef5a:	480b      	ldr	r0, [pc, #44]	; (800ef88 <MX_GPIO_Init+0x184>)
 800ef5c:	f003 fb92 	bl	8012684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800ef60:	2200      	movs	r2, #0
 800ef62:	2100      	movs	r1, #0
 800ef64:	2028      	movs	r0, #40	; 0x28
 800ef66:	f002 fd8e 	bl	8011a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800ef6a:	2028      	movs	r0, #40	; 0x28
 800ef6c:	f002 fda7 	bl	8011abe <HAL_NVIC_EnableIRQ>

}
 800ef70:	bf00      	nop
 800ef72:	3728      	adds	r7, #40	; 0x28
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	40023800 	.word	0x40023800
 800ef7c:	40020000 	.word	0x40020000
 800ef80:	40020800 	.word	0x40020800
 800ef84:	40020c00 	.word	0x40020c00
 800ef88:	40020400 	.word	0x40020400
 800ef8c:	10110000 	.word	0x10110000

0800ef90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ef90:	b480      	push	{r7}
 800ef92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ef94:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ef96:	e7fe      	b.n	800ef96 <Error_Handler+0x6>

0800ef98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ef9e:	2300      	movs	r3, #0
 800efa0:	607b      	str	r3, [r7, #4]
 800efa2:	4b10      	ldr	r3, [pc, #64]	; (800efe4 <HAL_MspInit+0x4c>)
 800efa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efa6:	4a0f      	ldr	r2, [pc, #60]	; (800efe4 <HAL_MspInit+0x4c>)
 800efa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800efac:	6453      	str	r3, [r2, #68]	; 0x44
 800efae:	4b0d      	ldr	r3, [pc, #52]	; (800efe4 <HAL_MspInit+0x4c>)
 800efb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800efb6:	607b      	str	r3, [r7, #4]
 800efb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800efba:	2300      	movs	r3, #0
 800efbc:	603b      	str	r3, [r7, #0]
 800efbe:	4b09      	ldr	r3, [pc, #36]	; (800efe4 <HAL_MspInit+0x4c>)
 800efc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efc2:	4a08      	ldr	r2, [pc, #32]	; (800efe4 <HAL_MspInit+0x4c>)
 800efc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800efc8:	6413      	str	r3, [r2, #64]	; 0x40
 800efca:	4b06      	ldr	r3, [pc, #24]	; (800efe4 <HAL_MspInit+0x4c>)
 800efcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800efd2:	603b      	str	r3, [r7, #0]
 800efd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800efd6:	bf00      	nop
 800efd8:	370c      	adds	r7, #12
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	40023800 	.word	0x40023800

0800efe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b08c      	sub	sp, #48	; 0x30
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eff0:	f107 031c 	add.w	r3, r7, #28
 800eff4:	2200      	movs	r2, #0
 800eff6:	601a      	str	r2, [r3, #0]
 800eff8:	605a      	str	r2, [r3, #4]
 800effa:	609a      	str	r2, [r3, #8]
 800effc:	60da      	str	r2, [r3, #12]
 800effe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a6b      	ldr	r2, [pc, #428]	; (800f1b4 <HAL_ADC_MspInit+0x1cc>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d172      	bne.n	800f0f0 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f00a:	2300      	movs	r3, #0
 800f00c:	61bb      	str	r3, [r7, #24]
 800f00e:	4b6a      	ldr	r3, [pc, #424]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f012:	4a69      	ldr	r2, [pc, #420]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f018:	6453      	str	r3, [r2, #68]	; 0x44
 800f01a:	4b67      	ldr	r3, [pc, #412]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f01e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f022:	61bb      	str	r3, [r7, #24]
 800f024:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f026:	2300      	movs	r3, #0
 800f028:	617b      	str	r3, [r7, #20]
 800f02a:	4b63      	ldr	r3, [pc, #396]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f02e:	4a62      	ldr	r2, [pc, #392]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f030:	f043 0304 	orr.w	r3, r3, #4
 800f034:	6313      	str	r3, [r2, #48]	; 0x30
 800f036:	4b60      	ldr	r3, [pc, #384]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f03a:	f003 0304 	and.w	r3, r3, #4
 800f03e:	617b      	str	r3, [r7, #20]
 800f040:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f042:	2300      	movs	r3, #0
 800f044:	613b      	str	r3, [r7, #16]
 800f046:	4b5c      	ldr	r3, [pc, #368]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f04a:	4a5b      	ldr	r2, [pc, #364]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f04c:	f043 0302 	orr.w	r3, r3, #2
 800f050:	6313      	str	r3, [r2, #48]	; 0x30
 800f052:	4b59      	ldr	r3, [pc, #356]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f056:	f003 0302 	and.w	r3, r3, #2
 800f05a:	613b      	str	r3, [r7, #16]
 800f05c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800f05e:	2311      	movs	r3, #17
 800f060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f062:	2303      	movs	r3, #3
 800f064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f066:	2300      	movs	r3, #0
 800f068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f06a:	f107 031c 	add.w	r3, r7, #28
 800f06e:	4619      	mov	r1, r3
 800f070:	4852      	ldr	r0, [pc, #328]	; (800f1bc <HAL_ADC_MspInit+0x1d4>)
 800f072:	f003 fb07 	bl	8012684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f076:	2302      	movs	r3, #2
 800f078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f07a:	2303      	movs	r3, #3
 800f07c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f07e:	2300      	movs	r3, #0
 800f080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f082:	f107 031c 	add.w	r3, r7, #28
 800f086:	4619      	mov	r1, r3
 800f088:	484d      	ldr	r0, [pc, #308]	; (800f1c0 <HAL_ADC_MspInit+0x1d8>)
 800f08a:	f003 fafb 	bl	8012684 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800f08e:	4b4d      	ldr	r3, [pc, #308]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f090:	4a4d      	ldr	r2, [pc, #308]	; (800f1c8 <HAL_ADC_MspInit+0x1e0>)
 800f092:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f094:	4b4b      	ldr	r3, [pc, #300]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f096:	2200      	movs	r2, #0
 800f098:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f09a:	4b4a      	ldr	r3, [pc, #296]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f09c:	2200      	movs	r2, #0
 800f09e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f0a0:	4b48      	ldr	r3, [pc, #288]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f0a6:	4b47      	ldr	r3, [pc, #284]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f0a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f0ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f0ae:	4b45      	ldr	r3, [pc, #276]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f0b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f0b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f0b6:	4b43      	ldr	r3, [pc, #268]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f0b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f0bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800f0be:	4b41      	ldr	r3, [pc, #260]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f0c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f0c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800f0c6:	4b3f      	ldr	r3, [pc, #252]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f0cc:	4b3d      	ldr	r3, [pc, #244]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f0d2:	483c      	ldr	r0, [pc, #240]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f0d4:	f002 fd0e 	bl	8011af4 <HAL_DMA_Init>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d001      	beq.n	800f0e2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800f0de:	f7ff ff57 	bl	800ef90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	4a37      	ldr	r2, [pc, #220]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f0e6:	639a      	str	r2, [r3, #56]	; 0x38
 800f0e8:	4a36      	ldr	r2, [pc, #216]	; (800f1c4 <HAL_ADC_MspInit+0x1dc>)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800f0ee:	e05d      	b.n	800f1ac <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a35      	ldr	r2, [pc, #212]	; (800f1cc <HAL_ADC_MspInit+0x1e4>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d158      	bne.n	800f1ac <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	60fb      	str	r3, [r7, #12]
 800f0fe:	4b2e      	ldr	r3, [pc, #184]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f102:	4a2d      	ldr	r2, [pc, #180]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f104:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f108:	6453      	str	r3, [r2, #68]	; 0x44
 800f10a:	4b2b      	ldr	r3, [pc, #172]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f10e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f112:	60fb      	str	r3, [r7, #12]
 800f114:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f116:	2300      	movs	r3, #0
 800f118:	60bb      	str	r3, [r7, #8]
 800f11a:	4b27      	ldr	r3, [pc, #156]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f11e:	4a26      	ldr	r2, [pc, #152]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f120:	f043 0304 	orr.w	r3, r3, #4
 800f124:	6313      	str	r3, [r2, #48]	; 0x30
 800f126:	4b24      	ldr	r3, [pc, #144]	; (800f1b8 <HAL_ADC_MspInit+0x1d0>)
 800f128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f12a:	f003 0304 	and.w	r3, r3, #4
 800f12e:	60bb      	str	r3, [r7, #8]
 800f130:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800f132:	2322      	movs	r3, #34	; 0x22
 800f134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f136:	2303      	movs	r3, #3
 800f138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f13a:	2300      	movs	r3, #0
 800f13c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f13e:	f107 031c 	add.w	r3, r7, #28
 800f142:	4619      	mov	r1, r3
 800f144:	481d      	ldr	r0, [pc, #116]	; (800f1bc <HAL_ADC_MspInit+0x1d4>)
 800f146:	f003 fa9d 	bl	8012684 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800f14a:	4b21      	ldr	r3, [pc, #132]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f14c:	4a21      	ldr	r2, [pc, #132]	; (800f1d4 <HAL_ADC_MspInit+0x1ec>)
 800f14e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800f150:	4b1f      	ldr	r3, [pc, #124]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f156:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f158:	4b1d      	ldr	r3, [pc, #116]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800f15e:	4b1c      	ldr	r3, [pc, #112]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f160:	2200      	movs	r2, #0
 800f162:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800f164:	4b1a      	ldr	r3, [pc, #104]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f16a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f16c:	4b18      	ldr	r3, [pc, #96]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f16e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f172:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f174:	4b16      	ldr	r3, [pc, #88]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f17a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800f17c:	4b14      	ldr	r3, [pc, #80]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f17e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f182:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800f184:	4b12      	ldr	r3, [pc, #72]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f186:	2200      	movs	r2, #0
 800f188:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f18a:	4b11      	ldr	r3, [pc, #68]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f18c:	2200      	movs	r2, #0
 800f18e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800f190:	480f      	ldr	r0, [pc, #60]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f192:	f002 fcaf 	bl	8011af4 <HAL_DMA_Init>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d001      	beq.n	800f1a0 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800f19c:	f7ff fef8 	bl	800ef90 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a0b      	ldr	r2, [pc, #44]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f1a4:	639a      	str	r2, [r3, #56]	; 0x38
 800f1a6:	4a0a      	ldr	r2, [pc, #40]	; (800f1d0 <HAL_ADC_MspInit+0x1e8>)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f1ac:	bf00      	nop
 800f1ae:	3730      	adds	r7, #48	; 0x30
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	40012000 	.word	0x40012000
 800f1b8:	40023800 	.word	0x40023800
 800f1bc:	40020800 	.word	0x40020800
 800f1c0:	40020400 	.word	0x40020400
 800f1c4:	2000097c 	.word	0x2000097c
 800f1c8:	40026410 	.word	0x40026410
 800f1cc:	40012100 	.word	0x40012100
 800f1d0:	20000a1c 	.word	0x20000a1c
 800f1d4:	40026440 	.word	0x40026440

0800f1d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b08a      	sub	sp, #40	; 0x28
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f1e0:	f107 0314 	add.w	r3, r7, #20
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	601a      	str	r2, [r3, #0]
 800f1e8:	605a      	str	r2, [r3, #4]
 800f1ea:	609a      	str	r2, [r3, #8]
 800f1ec:	60da      	str	r2, [r3, #12]
 800f1ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4a19      	ldr	r2, [pc, #100]	; (800f25c <HAL_SPI_MspInit+0x84>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d12c      	bne.n	800f254 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	613b      	str	r3, [r7, #16]
 800f1fe:	4b18      	ldr	r3, [pc, #96]	; (800f260 <HAL_SPI_MspInit+0x88>)
 800f200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f202:	4a17      	ldr	r2, [pc, #92]	; (800f260 <HAL_SPI_MspInit+0x88>)
 800f204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f208:	6413      	str	r3, [r2, #64]	; 0x40
 800f20a:	4b15      	ldr	r3, [pc, #84]	; (800f260 <HAL_SPI_MspInit+0x88>)
 800f20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f20e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f212:	613b      	str	r3, [r7, #16]
 800f214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f216:	2300      	movs	r3, #0
 800f218:	60fb      	str	r3, [r7, #12]
 800f21a:	4b11      	ldr	r3, [pc, #68]	; (800f260 <HAL_SPI_MspInit+0x88>)
 800f21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f21e:	4a10      	ldr	r2, [pc, #64]	; (800f260 <HAL_SPI_MspInit+0x88>)
 800f220:	f043 0304 	orr.w	r3, r3, #4
 800f224:	6313      	str	r3, [r2, #48]	; 0x30
 800f226:	4b0e      	ldr	r3, [pc, #56]	; (800f260 <HAL_SPI_MspInit+0x88>)
 800f228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f22a:	f003 0304 	and.w	r3, r3, #4
 800f22e:	60fb      	str	r3, [r7, #12]
 800f230:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800f232:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f238:	2302      	movs	r3, #2
 800f23a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f23c:	2300      	movs	r3, #0
 800f23e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f240:	2303      	movs	r3, #3
 800f242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800f244:	2306      	movs	r3, #6
 800f246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f248:	f107 0314 	add.w	r3, r7, #20
 800f24c:	4619      	mov	r1, r3
 800f24e:	4805      	ldr	r0, [pc, #20]	; (800f264 <HAL_SPI_MspInit+0x8c>)
 800f250:	f003 fa18 	bl	8012684 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800f254:	bf00      	nop
 800f256:	3728      	adds	r7, #40	; 0x28
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	40003c00 	.word	0x40003c00
 800f260:	40023800 	.word	0x40023800
 800f264:	40020800 	.word	0x40020800

0800f268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4a30      	ldr	r2, [pc, #192]	; (800f338 <HAL_TIM_Base_MspInit+0xd0>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d116      	bne.n	800f2a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800f27a:	2300      	movs	r3, #0
 800f27c:	617b      	str	r3, [r7, #20]
 800f27e:	4b2f      	ldr	r3, [pc, #188]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f282:	4a2e      	ldr	r2, [pc, #184]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f284:	f043 0301 	orr.w	r3, r3, #1
 800f288:	6453      	str	r3, [r2, #68]	; 0x44
 800f28a:	4b2c      	ldr	r3, [pc, #176]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f28e:	f003 0301 	and.w	r3, r3, #1
 800f292:	617b      	str	r3, [r7, #20]
 800f294:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800f296:	2200      	movs	r2, #0
 800f298:	2100      	movs	r1, #0
 800f29a:	2019      	movs	r0, #25
 800f29c:	f002 fbf3 	bl	8011a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800f2a0:	2019      	movs	r0, #25
 800f2a2:	f002 fc0c 	bl	8011abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800f2a6:	e042      	b.n	800f32e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2b0:	d10e      	bne.n	800f2d0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	613b      	str	r3, [r7, #16]
 800f2b6:	4b21      	ldr	r3, [pc, #132]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ba:	4a20      	ldr	r2, [pc, #128]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f2bc:	f043 0301 	orr.w	r3, r3, #1
 800f2c0:	6413      	str	r3, [r2, #64]	; 0x40
 800f2c2:	4b1e      	ldr	r3, [pc, #120]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2c6:	f003 0301 	and.w	r3, r3, #1
 800f2ca:	613b      	str	r3, [r7, #16]
 800f2cc:	693b      	ldr	r3, [r7, #16]
}
 800f2ce:	e02e      	b.n	800f32e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4a1a      	ldr	r2, [pc, #104]	; (800f340 <HAL_TIM_Base_MspInit+0xd8>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d10e      	bne.n	800f2f8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800f2da:	2300      	movs	r3, #0
 800f2dc:	60fb      	str	r3, [r7, #12]
 800f2de:	4b17      	ldr	r3, [pc, #92]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2e2:	4a16      	ldr	r2, [pc, #88]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f2e4:	f043 0308 	orr.w	r3, r3, #8
 800f2e8:	6413      	str	r3, [r2, #64]	; 0x40
 800f2ea:	4b14      	ldr	r3, [pc, #80]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ee:	f003 0308 	and.w	r3, r3, #8
 800f2f2:	60fb      	str	r3, [r7, #12]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
}
 800f2f6:	e01a      	b.n	800f32e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4a11      	ldr	r2, [pc, #68]	; (800f344 <HAL_TIM_Base_MspInit+0xdc>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d115      	bne.n	800f32e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800f302:	2300      	movs	r3, #0
 800f304:	60bb      	str	r3, [r7, #8]
 800f306:	4b0d      	ldr	r3, [pc, #52]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f30a:	4a0c      	ldr	r2, [pc, #48]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f30c:	f043 0302 	orr.w	r3, r3, #2
 800f310:	6453      	str	r3, [r2, #68]	; 0x44
 800f312:	4b0a      	ldr	r3, [pc, #40]	; (800f33c <HAL_TIM_Base_MspInit+0xd4>)
 800f314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f316:	f003 0302 	and.w	r3, r3, #2
 800f31a:	60bb      	str	r3, [r7, #8]
 800f31c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800f31e:	2200      	movs	r2, #0
 800f320:	2101      	movs	r1, #1
 800f322:	202c      	movs	r0, #44	; 0x2c
 800f324:	f002 fbaf 	bl	8011a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800f328:	202c      	movs	r0, #44	; 0x2c
 800f32a:	f002 fbc8 	bl	8011abe <HAL_NVIC_EnableIRQ>
}
 800f32e:	bf00      	nop
 800f330:	3718      	adds	r7, #24
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	40010000 	.word	0x40010000
 800f33c:	40023800 	.word	0x40023800
 800f340:	40000c00 	.word	0x40000c00
 800f344:	40010400 	.word	0x40010400

0800f348 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b08c      	sub	sp, #48	; 0x30
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f350:	f107 031c 	add.w	r3, r7, #28
 800f354:	2200      	movs	r2, #0
 800f356:	601a      	str	r2, [r3, #0]
 800f358:	605a      	str	r2, [r3, #4]
 800f35a:	609a      	str	r2, [r3, #8]
 800f35c:	60da      	str	r2, [r3, #12]
 800f35e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4a32      	ldr	r2, [pc, #200]	; (800f430 <HAL_TIM_Encoder_MspInit+0xe8>)
 800f366:	4293      	cmp	r3, r2
 800f368:	d12c      	bne.n	800f3c4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800f36a:	2300      	movs	r3, #0
 800f36c:	61bb      	str	r3, [r7, #24]
 800f36e:	4b31      	ldr	r3, [pc, #196]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f372:	4a30      	ldr	r2, [pc, #192]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f374:	f043 0302 	orr.w	r3, r3, #2
 800f378:	6413      	str	r3, [r2, #64]	; 0x40
 800f37a:	4b2e      	ldr	r3, [pc, #184]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f37e:	f003 0302 	and.w	r3, r3, #2
 800f382:	61bb      	str	r3, [r7, #24]
 800f384:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f386:	2300      	movs	r3, #0
 800f388:	617b      	str	r3, [r7, #20]
 800f38a:	4b2a      	ldr	r3, [pc, #168]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f38e:	4a29      	ldr	r2, [pc, #164]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f390:	f043 0301 	orr.w	r3, r3, #1
 800f394:	6313      	str	r3, [r2, #48]	; 0x30
 800f396:	4b27      	ldr	r3, [pc, #156]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f39a:	f003 0301 	and.w	r3, r3, #1
 800f39e:	617b      	str	r3, [r7, #20]
 800f3a0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f3a2:	23c0      	movs	r3, #192	; 0xc0
 800f3a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3a6:	2302      	movs	r3, #2
 800f3a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f3b2:	2302      	movs	r3, #2
 800f3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f3b6:	f107 031c 	add.w	r3, r7, #28
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	481e      	ldr	r0, [pc, #120]	; (800f438 <HAL_TIM_Encoder_MspInit+0xf0>)
 800f3be:	f003 f961 	bl	8012684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800f3c2:	e030      	b.n	800f426 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	4a1c      	ldr	r2, [pc, #112]	; (800f43c <HAL_TIM_Encoder_MspInit+0xf4>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d12b      	bne.n	800f426 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	613b      	str	r3, [r7, #16]
 800f3d2:	4b18      	ldr	r3, [pc, #96]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d6:	4a17      	ldr	r2, [pc, #92]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f3d8:	f043 0304 	orr.w	r3, r3, #4
 800f3dc:	6413      	str	r3, [r2, #64]	; 0x40
 800f3de:	4b15      	ldr	r3, [pc, #84]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e2:	f003 0304 	and.w	r3, r3, #4
 800f3e6:	613b      	str	r3, [r7, #16]
 800f3e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	60fb      	str	r3, [r7, #12]
 800f3ee:	4b11      	ldr	r3, [pc, #68]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3f2:	4a10      	ldr	r2, [pc, #64]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f3f4:	f043 0302 	orr.w	r3, r3, #2
 800f3f8:	6313      	str	r3, [r2, #48]	; 0x30
 800f3fa:	4b0e      	ldr	r3, [pc, #56]	; (800f434 <HAL_TIM_Encoder_MspInit+0xec>)
 800f3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3fe:	f003 0302 	and.w	r3, r3, #2
 800f402:	60fb      	str	r3, [r7, #12]
 800f404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f406:	23c0      	movs	r3, #192	; 0xc0
 800f408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f40a:	2302      	movs	r3, #2
 800f40c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f40e:	2300      	movs	r3, #0
 800f410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f412:	2300      	movs	r3, #0
 800f414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800f416:	2302      	movs	r3, #2
 800f418:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f41a:	f107 031c 	add.w	r3, r7, #28
 800f41e:	4619      	mov	r1, r3
 800f420:	4807      	ldr	r0, [pc, #28]	; (800f440 <HAL_TIM_Encoder_MspInit+0xf8>)
 800f422:	f003 f92f 	bl	8012684 <HAL_GPIO_Init>
}
 800f426:	bf00      	nop
 800f428:	3730      	adds	r7, #48	; 0x30
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop
 800f430:	40000400 	.word	0x40000400
 800f434:	40023800 	.word	0x40023800
 800f438:	40020000 	.word	0x40020000
 800f43c:	40000800 	.word	0x40000800
 800f440:	40020400 	.word	0x40020400

0800f444 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b08c      	sub	sp, #48	; 0x30
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f44c:	f107 031c 	add.w	r3, r7, #28
 800f450:	2200      	movs	r2, #0
 800f452:	601a      	str	r2, [r3, #0]
 800f454:	605a      	str	r2, [r3, #4]
 800f456:	609a      	str	r2, [r3, #8]
 800f458:	60da      	str	r2, [r3, #12]
 800f45a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f464:	d11e      	bne.n	800f4a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f466:	2300      	movs	r3, #0
 800f468:	61bb      	str	r3, [r7, #24]
 800f46a:	4b43      	ldr	r3, [pc, #268]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f46e:	4a42      	ldr	r2, [pc, #264]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f470:	f043 0301 	orr.w	r3, r3, #1
 800f474:	6313      	str	r3, [r2, #48]	; 0x30
 800f476:	4b40      	ldr	r3, [pc, #256]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f47a:	f003 0301 	and.w	r3, r3, #1
 800f47e:	61bb      	str	r3, [r7, #24]
 800f480:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f482:	2308      	movs	r3, #8
 800f484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f486:	2302      	movs	r3, #2
 800f488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f48a:	2300      	movs	r3, #0
 800f48c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f48e:	2303      	movs	r3, #3
 800f490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f492:	2301      	movs	r3, #1
 800f494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f496:	f107 031c 	add.w	r3, r7, #28
 800f49a:	4619      	mov	r1, r3
 800f49c:	4837      	ldr	r0, [pc, #220]	; (800f57c <HAL_TIM_MspPostInit+0x138>)
 800f49e:	f003 f8f1 	bl	8012684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800f4a2:	e064      	b.n	800f56e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4a35      	ldr	r2, [pc, #212]	; (800f580 <HAL_TIM_MspPostInit+0x13c>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d11e      	bne.n	800f4ec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	617b      	str	r3, [r7, #20]
 800f4b2:	4b31      	ldr	r3, [pc, #196]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4b6:	4a30      	ldr	r2, [pc, #192]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f4b8:	f043 0301 	orr.w	r3, r3, #1
 800f4bc:	6313      	str	r3, [r2, #48]	; 0x30
 800f4be:	4b2e      	ldr	r3, [pc, #184]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4c2:	f003 0301 	and.w	r3, r3, #1
 800f4c6:	617b      	str	r3, [r7, #20]
 800f4c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f4ca:	2302      	movs	r3, #2
 800f4cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4ce:	2302      	movs	r3, #2
 800f4d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800f4da:	2302      	movs	r3, #2
 800f4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4de:	f107 031c 	add.w	r3, r7, #28
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	4825      	ldr	r0, [pc, #148]	; (800f57c <HAL_TIM_MspPostInit+0x138>)
 800f4e6:	f003 f8cd 	bl	8012684 <HAL_GPIO_Init>
}
 800f4ea:	e040      	b.n	800f56e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4a24      	ldr	r2, [pc, #144]	; (800f584 <HAL_TIM_MspPostInit+0x140>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d13b      	bne.n	800f56e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	613b      	str	r3, [r7, #16]
 800f4fa:	4b1f      	ldr	r3, [pc, #124]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4fe:	4a1e      	ldr	r2, [pc, #120]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f500:	f043 0301 	orr.w	r3, r3, #1
 800f504:	6313      	str	r3, [r2, #48]	; 0x30
 800f506:	4b1c      	ldr	r3, [pc, #112]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f50a:	f003 0301 	and.w	r3, r3, #1
 800f50e:	613b      	str	r3, [r7, #16]
 800f510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f512:	2300      	movs	r3, #0
 800f514:	60fb      	str	r3, [r7, #12]
 800f516:	4b18      	ldr	r3, [pc, #96]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f51a:	4a17      	ldr	r2, [pc, #92]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f51c:	f043 0304 	orr.w	r3, r3, #4
 800f520:	6313      	str	r3, [r2, #48]	; 0x30
 800f522:	4b15      	ldr	r3, [pc, #84]	; (800f578 <HAL_TIM_MspPostInit+0x134>)
 800f524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f526:	f003 0304 	and.w	r3, r3, #4
 800f52a:	60fb      	str	r3, [r7, #12]
 800f52c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800f52e:	2320      	movs	r3, #32
 800f530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f532:	2302      	movs	r3, #2
 800f534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f536:	2300      	movs	r3, #0
 800f538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f53a:	2300      	movs	r3, #0
 800f53c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800f53e:	2303      	movs	r3, #3
 800f540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f542:	f107 031c 	add.w	r3, r7, #28
 800f546:	4619      	mov	r1, r3
 800f548:	480c      	ldr	r0, [pc, #48]	; (800f57c <HAL_TIM_MspPostInit+0x138>)
 800f54a:	f003 f89b 	bl	8012684 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800f54e:	2340      	movs	r3, #64	; 0x40
 800f550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f552:	2302      	movs	r3, #2
 800f554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f556:	2300      	movs	r3, #0
 800f558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f55a:	2300      	movs	r3, #0
 800f55c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800f55e:	2303      	movs	r3, #3
 800f560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f562:	f107 031c 	add.w	r3, r7, #28
 800f566:	4619      	mov	r1, r3
 800f568:	4807      	ldr	r0, [pc, #28]	; (800f588 <HAL_TIM_MspPostInit+0x144>)
 800f56a:	f003 f88b 	bl	8012684 <HAL_GPIO_Init>
}
 800f56e:	bf00      	nop
 800f570:	3730      	adds	r7, #48	; 0x30
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	40023800 	.word	0x40023800
 800f57c:	40020000 	.word	0x40020000
 800f580:	40000c00 	.word	0x40000c00
 800f584:	40010400 	.word	0x40010400
 800f588:	40020800 	.word	0x40020800

0800f58c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b08a      	sub	sp, #40	; 0x28
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f594:	f107 0314 	add.w	r3, r7, #20
 800f598:	2200      	movs	r2, #0
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	605a      	str	r2, [r3, #4]
 800f59e:	609a      	str	r2, [r3, #8]
 800f5a0:	60da      	str	r2, [r3, #12]
 800f5a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a19      	ldr	r2, [pc, #100]	; (800f610 <HAL_UART_MspInit+0x84>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d12c      	bne.n	800f608 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	613b      	str	r3, [r7, #16]
 800f5b2:	4b18      	ldr	r3, [pc, #96]	; (800f614 <HAL_UART_MspInit+0x88>)
 800f5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5b6:	4a17      	ldr	r2, [pc, #92]	; (800f614 <HAL_UART_MspInit+0x88>)
 800f5b8:	f043 0310 	orr.w	r3, r3, #16
 800f5bc:	6453      	str	r3, [r2, #68]	; 0x44
 800f5be:	4b15      	ldr	r3, [pc, #84]	; (800f614 <HAL_UART_MspInit+0x88>)
 800f5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5c2:	f003 0310 	and.w	r3, r3, #16
 800f5c6:	613b      	str	r3, [r7, #16]
 800f5c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	60fb      	str	r3, [r7, #12]
 800f5ce:	4b11      	ldr	r3, [pc, #68]	; (800f614 <HAL_UART_MspInit+0x88>)
 800f5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5d2:	4a10      	ldr	r2, [pc, #64]	; (800f614 <HAL_UART_MspInit+0x88>)
 800f5d4:	f043 0301 	orr.w	r3, r3, #1
 800f5d8:	6313      	str	r3, [r2, #48]	; 0x30
 800f5da:	4b0e      	ldr	r3, [pc, #56]	; (800f614 <HAL_UART_MspInit+0x88>)
 800f5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5de:	f003 0301 	and.w	r3, r3, #1
 800f5e2:	60fb      	str	r3, [r7, #12]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800f5e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f5ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5ec:	2302      	movs	r3, #2
 800f5ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5f4:	2303      	movs	r3, #3
 800f5f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f5f8:	2307      	movs	r3, #7
 800f5fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5fc:	f107 0314 	add.w	r3, r7, #20
 800f600:	4619      	mov	r1, r3
 800f602:	4805      	ldr	r0, [pc, #20]	; (800f618 <HAL_UART_MspInit+0x8c>)
 800f604:	f003 f83e 	bl	8012684 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800f608:	bf00      	nop
 800f60a:	3728      	adds	r7, #40	; 0x28
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	40011000 	.word	0x40011000
 800f614:	40023800 	.word	0x40023800
 800f618:	40020000 	.word	0x40020000

0800f61c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f61c:	b480      	push	{r7}
 800f61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800f620:	e7fe      	b.n	800f620 <NMI_Handler+0x4>

0800f622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f622:	b480      	push	{r7}
 800f624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f626:	e7fe      	b.n	800f626 <HardFault_Handler+0x4>

0800f628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f628:	b480      	push	{r7}
 800f62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f62c:	e7fe      	b.n	800f62c <MemManage_Handler+0x4>

0800f62e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f62e:	b480      	push	{r7}
 800f630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f632:	e7fe      	b.n	800f632 <BusFault_Handler+0x4>

0800f634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f634:	b480      	push	{r7}
 800f636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f638:	e7fe      	b.n	800f638 <UsageFault_Handler+0x4>

0800f63a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f63a:	b480      	push	{r7}
 800f63c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f63e:	bf00      	nop
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f648:	b480      	push	{r7}
 800f64a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f64c:	bf00      	nop
 800f64e:	46bd      	mov	sp, r7
 800f650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f654:	4770      	bx	lr

0800f656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f656:	b480      	push	{r7}
 800f658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f65a:	bf00      	nop
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f668:	f001 fcb2 	bl	8010fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f66c:	bf00      	nop
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800f674:	4802      	ldr	r0, [pc, #8]	; (800f680 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800f676:	f004 ff31 	bl	80144dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800f67a:	bf00      	nop
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	200009dc 	.word	0x200009dc

0800f684 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800f688:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f68c:	f003 f9ae 	bl	80129ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800f690:	bf00      	nop
 800f692:	bd80      	pop	{r7, pc}

0800f694 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800f698:	4802      	ldr	r0, [pc, #8]	; (800f6a4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800f69a:	f004 ff1f 	bl	80144dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800f69e:	bf00      	nop
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	20000794 	.word	0x20000794

0800f6a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800f6ac:	4802      	ldr	r0, [pc, #8]	; (800f6b8 <DMA2_Stream0_IRQHandler+0x10>)
 800f6ae:	f002 fb97 	bl	8011de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800f6b2:	bf00      	nop
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	2000097c 	.word	0x2000097c

0800f6bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800f6c0:	4802      	ldr	r0, [pc, #8]	; (800f6cc <DMA2_Stream2_IRQHandler+0x10>)
 800f6c2:	f002 fb8d 	bl	8011de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800f6c6:	bf00      	nop
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	20000a1c 	.word	0x20000a1c

0800f6d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f6d4:	4b08      	ldr	r3, [pc, #32]	; (800f6f8 <SystemInit+0x28>)
 800f6d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6da:	4a07      	ldr	r2, [pc, #28]	; (800f6f8 <SystemInit+0x28>)
 800f6dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f6e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f6e4:	4b04      	ldr	r3, [pc, #16]	; (800f6f8 <SystemInit+0x28>)
 800f6e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f6ea:	609a      	str	r2, [r3, #8]
#endif
}
 800f6ec:	bf00      	nop
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr
 800f6f6:	bf00      	nop
 800f6f8:	e000ed00 	.word	0xe000ed00

0800f6fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b086      	sub	sp, #24
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f708:	2300      	movs	r3, #0
 800f70a:	617b      	str	r3, [r7, #20]
 800f70c:	e00a      	b.n	800f724 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800f70e:	f7fe fe5d 	bl	800e3cc <__io_getchar>
 800f712:	4601      	mov	r1, r0
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	1c5a      	adds	r2, r3, #1
 800f718:	60ba      	str	r2, [r7, #8]
 800f71a:	b2ca      	uxtb	r2, r1
 800f71c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	3301      	adds	r3, #1
 800f722:	617b      	str	r3, [r7, #20]
 800f724:	697a      	ldr	r2, [r7, #20]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	429a      	cmp	r2, r3
 800f72a:	dbf0      	blt.n	800f70e <_read+0x12>
	}

return len;
 800f72c:	687b      	ldr	r3, [r7, #4]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}

0800f736 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f736:	b580      	push	{r7, lr}
 800f738:	b086      	sub	sp, #24
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	60f8      	str	r0, [r7, #12]
 800f73e:	60b9      	str	r1, [r7, #8]
 800f740:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f742:	2300      	movs	r3, #0
 800f744:	617b      	str	r3, [r7, #20]
 800f746:	e009      	b.n	800f75c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	1c5a      	adds	r2, r3, #1
 800f74c:	60ba      	str	r2, [r7, #8]
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	4618      	mov	r0, r3
 800f752:	f7fe fe29 	bl	800e3a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	3301      	adds	r3, #1
 800f75a:	617b      	str	r3, [r7, #20]
 800f75c:	697a      	ldr	r2, [r7, #20]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	429a      	cmp	r2, r3
 800f762:	dbf1      	blt.n	800f748 <_write+0x12>
	}
	return len;
 800f764:	687b      	ldr	r3, [r7, #4]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3718      	adds	r7, #24
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}

0800f76e <_close>:

int _close(int file)
{
 800f76e:	b480      	push	{r7}
 800f770:	b083      	sub	sp, #12
 800f772:	af00      	add	r7, sp, #0
 800f774:	6078      	str	r0, [r7, #4]
	return -1;
 800f776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	370c      	adds	r7, #12
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr

0800f786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f786:	b480      	push	{r7}
 800f788:	b083      	sub	sp, #12
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	6078      	str	r0, [r7, #4]
 800f78e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f796:	605a      	str	r2, [r3, #4]
	return 0;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	370c      	adds	r7, #12
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr

0800f7a6 <_isatty>:

int _isatty(int file)
{
 800f7a6:	b480      	push	{r7}
 800f7a8:	b083      	sub	sp, #12
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
	return 1;
 800f7ae:	2301      	movs	r3, #1
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b085      	sub	sp, #20
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	60b9      	str	r1, [r7, #8]
 800f7c6:	607a      	str	r2, [r7, #4]
	return 0;
 800f7c8:	2300      	movs	r3, #0
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3714      	adds	r7, #20
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr
	...

0800f7d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b086      	sub	sp, #24
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f7e0:	4a14      	ldr	r2, [pc, #80]	; (800f834 <_sbrk+0x5c>)
 800f7e2:	4b15      	ldr	r3, [pc, #84]	; (800f838 <_sbrk+0x60>)
 800f7e4:	1ad3      	subs	r3, r2, r3
 800f7e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f7ec:	4b13      	ldr	r3, [pc, #76]	; (800f83c <_sbrk+0x64>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d102      	bne.n	800f7fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f7f4:	4b11      	ldr	r3, [pc, #68]	; (800f83c <_sbrk+0x64>)
 800f7f6:	4a12      	ldr	r2, [pc, #72]	; (800f840 <_sbrk+0x68>)
 800f7f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f7fa:	4b10      	ldr	r3, [pc, #64]	; (800f83c <_sbrk+0x64>)
 800f7fc:	681a      	ldr	r2, [r3, #0]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4413      	add	r3, r2
 800f802:	693a      	ldr	r2, [r7, #16]
 800f804:	429a      	cmp	r2, r3
 800f806:	d207      	bcs.n	800f818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f808:	f006 fbf4 	bl	8015ff4 <__errno>
 800f80c:	4602      	mov	r2, r0
 800f80e:	230c      	movs	r3, #12
 800f810:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800f812:	f04f 33ff 	mov.w	r3, #4294967295
 800f816:	e009      	b.n	800f82c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f818:	4b08      	ldr	r3, [pc, #32]	; (800f83c <_sbrk+0x64>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f81e:	4b07      	ldr	r3, [pc, #28]	; (800f83c <_sbrk+0x64>)
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4413      	add	r3, r2
 800f826:	4a05      	ldr	r2, [pc, #20]	; (800f83c <_sbrk+0x64>)
 800f828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f82a:	68fb      	ldr	r3, [r7, #12]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3718      	adds	r7, #24
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	20020000 	.word	0x20020000
 800f838:	00000400 	.word	0x00000400
 800f83c:	20000238 	.word	0x20000238
 800f840:	20000aa8 	.word	0x20000aa8

0800f844 <ADCStart>:
#include <stdio.h>
uint32_t adc1[3]={0};
uint32_t adc2[2]={0};

void ADCStart()
{  //AD値のDMA
 800f844:	b580      	push	{r7, lr}
 800f846:	af00      	add	r7, sp, #0
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc1, 3) != HAL_OK)
 800f848:	2203      	movs	r2, #3
 800f84a:	490a      	ldr	r1, [pc, #40]	; (800f874 <ADCStart+0x30>)
 800f84c:	480a      	ldr	r0, [pc, #40]	; (800f878 <ADCStart+0x34>)
 800f84e:	f001 fc45 	bl	80110dc <HAL_ADC_Start_DMA>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <ADCStart+0x18>
	{
		Error_Handler();
 800f858:	f7ff fb9a 	bl	800ef90 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2) != HAL_OK)
 800f85c:	2202      	movs	r2, #2
 800f85e:	4907      	ldr	r1, [pc, #28]	; (800f87c <ADCStart+0x38>)
 800f860:	4807      	ldr	r0, [pc, #28]	; (800f880 <ADCStart+0x3c>)
 800f862:	f001 fc3b 	bl	80110dc <HAL_ADC_Start_DMA>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <ADCStart+0x2c>
	{
		Error_Handler();
 800f86c:	f7ff fb90 	bl	800ef90 <Error_Handler>
	}

}
 800f870:	bf00      	nop
 800f872:	bd80      	pop	{r7, pc}
 800f874:	200002bc 	.word	0x200002bc
 800f878:	200008f4 	.word	0x200008f4
 800f87c:	200002c8 	.word	0x200002c8
 800f880:	20000814 	.word	0x20000814

0800f884 <ADCStop>:
void ADCStop()
{
 800f884:	b580      	push	{r7, lr}
 800f886:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 800f888:	480e      	ldr	r0, [pc, #56]	; (800f8c4 <ADCStop+0x40>)
 800f88a:	f001 fd19 	bl	80112c0 <HAL_ADC_Stop_DMA>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d007      	beq.n	800f8a4 <ADCStop+0x20>
	{
		printf("な\r\n");
 800f894:	480c      	ldr	r0, [pc, #48]	; (800f8c8 <ADCStop+0x44>)
 800f896:	f007 fa9d 	bl	8016dd4 <puts>
		Error_Handler();
 800f89a:	f7ff fb79 	bl	800ef90 <Error_Handler>
		printf("に\r\n");
 800f89e:	480b      	ldr	r0, [pc, #44]	; (800f8cc <ADCStop+0x48>)
 800f8a0:	f007 fa98 	bl	8016dd4 <puts>
	}
	if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK)
 800f8a4:	480a      	ldr	r0, [pc, #40]	; (800f8d0 <ADCStop+0x4c>)
 800f8a6:	f001 fd0b 	bl	80112c0 <HAL_ADC_Stop_DMA>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d007      	beq.n	800f8c0 <ADCStop+0x3c>
	{
		printf("ぬ\r\n");
 800f8b0:	4808      	ldr	r0, [pc, #32]	; (800f8d4 <ADCStop+0x50>)
 800f8b2:	f007 fa8f 	bl	8016dd4 <puts>
		Error_Handler();
 800f8b6:	f7ff fb6b 	bl	800ef90 <Error_Handler>
		printf("ね\r\n");
 800f8ba:	4807      	ldr	r0, [pc, #28]	; (800f8d8 <ADCStop+0x54>)
 800f8bc:	f007 fa8a 	bl	8016dd4 <puts>
	}
}
 800f8c0:	bf00      	nop
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	200008f4 	.word	0x200008f4
 800f8c8:	0801b1a0 	.word	0x0801b1a0
 800f8cc:	0801b1a8 	.word	0x0801b1a8
 800f8d0:	20000814 	.word	0x20000814
 800f8d4:	0801b1b0 	.word	0x0801b1b0
 800f8d8:	0801b1b8 	.word	0x0801b1b8

0800f8dc <FLASH_Unlock>:
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;
uint32_t run_log_address;


inline static void FLASH_Unlock(void)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 800f8e0:	4b05      	ldr	r3, [pc, #20]	; (800f8f8 <FLASH_Unlock+0x1c>)
 800f8e2:	4a06      	ldr	r2, [pc, #24]	; (800f8fc <FLASH_Unlock+0x20>)
 800f8e4:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800f8e6:	4b04      	ldr	r3, [pc, #16]	; (800f8f8 <FLASH_Unlock+0x1c>)
 800f8e8:	4a05      	ldr	r2, [pc, #20]	; (800f900 <FLASH_Unlock+0x24>)
 800f8ea:	605a      	str	r2, [r3, #4]
}
 800f8ec:	bf00      	nop
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	40023c00 	.word	0x40023c00
 800f8fc:	45670123 	.word	0x45670123
 800f900:	cdef89ab 	.word	0xcdef89ab

0800f904 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 800f904:	b480      	push	{r7}
 800f906:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800f908:	4b05      	ldr	r3, [pc, #20]	; (800f920 <FLASH_Lock+0x1c>)
 800f90a:	691b      	ldr	r3, [r3, #16]
 800f90c:	4a04      	ldr	r2, [pc, #16]	; (800f920 <FLASH_Lock+0x1c>)
 800f90e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f912:	6113      	str	r3, [r2, #16]

}
 800f914:	bf00      	nop
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	40023c00 	.word	0x40023c00

0800f924 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800f924:	b480      	push	{r7}
 800f926:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800f928:	bf00      	nop
 800f92a:	4b05      	ldr	r3, [pc, #20]	; (800f940 <FLASH_WaitBusy+0x1c>)
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f932:	2b00      	cmp	r3, #0
 800f934:	d1f9      	bne.n	800f92a <FLASH_WaitBusy+0x6>
}
 800f936:	bf00      	nop
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr
 800f940:	40023c00 	.word	0x40023c00

0800f944 <FLASH_Write_Word>:

	FLASH_Lock();
}

void FLASH_Write_Word(uint32_t address, uint32_t data)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800f94e:	f7ff ffc5 	bl	800f8dc <FLASH_Unlock>

	FLASH_WaitBusy();
 800f952:	f7ff ffe7 	bl	800f924 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800f956:	4b0e      	ldr	r3, [pc, #56]	; (800f990 <FLASH_Write_Word+0x4c>)
 800f958:	691b      	ldr	r3, [r3, #16]
 800f95a:	4a0d      	ldr	r2, [pc, #52]	; (800f990 <FLASH_Write_Word+0x4c>)
 800f95c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f960:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800f962:	4b0b      	ldr	r3, [pc, #44]	; (800f990 <FLASH_Write_Word+0x4c>)
 800f964:	691b      	ldr	r3, [r3, #16]
 800f966:	4a0a      	ldr	r2, [pc, #40]	; (800f990 <FLASH_Write_Word+0x4c>)
 800f968:	f043 0301 	orr.w	r3, r3, #1
 800f96c:	6113      	str	r3, [r2, #16]

	*(__IO uint32_t*)address = data;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	683a      	ldr	r2, [r7, #0]
 800f972:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800f974:	f7ff ffd6 	bl	800f924 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800f978:	4b05      	ldr	r3, [pc, #20]	; (800f990 <FLASH_Write_Word+0x4c>)
 800f97a:	691b      	ldr	r3, [r3, #16]
 800f97c:	4a04      	ldr	r2, [pc, #16]	; (800f990 <FLASH_Write_Word+0x4c>)
 800f97e:	f023 0301 	bic.w	r3, r3, #1
 800f982:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800f984:	f7ff ffbe 	bl	800f904 <FLASH_Lock>
}
 800f988:	bf00      	nop
 800f98a:	3708      	adds	r7, #8
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	40023c00 	.word	0x40023c00

0800f994 <FLASH_Read_Word>:
void FLASH_Read_Word(uint32_t address, uint32_t * data)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800f99e:	f7ff ff9d 	bl	800f8dc <FLASH_Unlock>

	FLASH_WaitBusy();
 800f9a2:	f7ff ffbf 	bl	800f924 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800f9a6:	4b0f      	ldr	r3, [pc, #60]	; (800f9e4 <FLASH_Read_Word+0x50>)
 800f9a8:	691b      	ldr	r3, [r3, #16]
 800f9aa:	4a0e      	ldr	r2, [pc, #56]	; (800f9e4 <FLASH_Read_Word+0x50>)
 800f9ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f9b0:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800f9b2:	4b0c      	ldr	r3, [pc, #48]	; (800f9e4 <FLASH_Read_Word+0x50>)
 800f9b4:	691b      	ldr	r3, [r3, #16]
 800f9b6:	4a0b      	ldr	r2, [pc, #44]	; (800f9e4 <FLASH_Read_Word+0x50>)
 800f9b8:	f043 0301 	orr.w	r3, r3, #1
 800f9bc:	6113      	str	r3, [r2, #16]

	* data = *(__IO uint32_t*)address;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800f9c6:	f7ff ffad 	bl	800f924 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800f9ca:	4b06      	ldr	r3, [pc, #24]	; (800f9e4 <FLASH_Read_Word+0x50>)
 800f9cc:	691b      	ldr	r3, [r3, #16]
 800f9ce:	4a05      	ldr	r2, [pc, #20]	; (800f9e4 <FLASH_Read_Word+0x50>)
 800f9d0:	f023 0301 	bic.w	r3, r3, #1
 800f9d4:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800f9d6:	f7ff ff95 	bl	800f904 <FLASH_Lock>
}
 800f9da:	bf00      	nop
 800f9dc:	3708      	adds	r7, #8
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	40023c00 	.word	0x40023c00

0800f9e8 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 800f9f4:	f7ff ff72 	bl	800f8dc <FLASH_Unlock>

	FLASH_WaitBusy();
 800f9f8:	f7ff ff94 	bl	800f924 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800f9fc:	4b0e      	ldr	r3, [pc, #56]	; (800fa38 <FLASH_Write_Word_F+0x50>)
 800f9fe:	691b      	ldr	r3, [r3, #16]
 800fa00:	4a0d      	ldr	r2, [pc, #52]	; (800fa38 <FLASH_Write_Word_F+0x50>)
 800fa02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fa06:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800fa08:	4b0b      	ldr	r3, [pc, #44]	; (800fa38 <FLASH_Write_Word_F+0x50>)
 800fa0a:	691b      	ldr	r3, [r3, #16]
 800fa0c:	4a0a      	ldr	r2, [pc, #40]	; (800fa38 <FLASH_Write_Word_F+0x50>)
 800fa0e:	f043 0301 	orr.w	r3, r3, #1
 800fa12:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	683a      	ldr	r2, [r7, #0]
 800fa18:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800fa1a:	f7ff ff83 	bl	800f924 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800fa1e:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <FLASH_Write_Word_F+0x50>)
 800fa20:	691b      	ldr	r3, [r3, #16]
 800fa22:	4a05      	ldr	r2, [pc, #20]	; (800fa38 <FLASH_Write_Word_F+0x50>)
 800fa24:	f023 0301 	bic.w	r3, r3, #1
 800fa28:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800fa2a:	f7ff ff6b 	bl	800f904 <FLASH_Lock>
}
 800fa2e:	bf00      	nop
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	40023c00 	.word	0x40023c00

0800fa3c <FLASH_Read_Word_F>:
void FLASH_Read_Word_F(uint32_t address, float * data)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 800fa46:	f7ff ff49 	bl	800f8dc <FLASH_Unlock>

	FLASH_WaitBusy();
 800fa4a:	f7ff ff6b 	bl	800f924 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800fa4e:	4b0f      	ldr	r3, [pc, #60]	; (800fa8c <FLASH_Read_Word_F+0x50>)
 800fa50:	691b      	ldr	r3, [r3, #16]
 800fa52:	4a0e      	ldr	r2, [pc, #56]	; (800fa8c <FLASH_Read_Word_F+0x50>)
 800fa54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fa58:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800fa5a:	4b0c      	ldr	r3, [pc, #48]	; (800fa8c <FLASH_Read_Word_F+0x50>)
 800fa5c:	691b      	ldr	r3, [r3, #16]
 800fa5e:	4a0b      	ldr	r2, [pc, #44]	; (800fa8c <FLASH_Read_Word_F+0x50>)
 800fa60:	f043 0301 	orr.w	r3, r3, #1
 800fa64:	6113      	str	r3, [r2, #16]

	* data = *(__IO float*)address;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800fa6e:	f7ff ff59 	bl	800f924 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800fa72:	4b06      	ldr	r3, [pc, #24]	; (800fa8c <FLASH_Read_Word_F+0x50>)
 800fa74:	691b      	ldr	r3, [r3, #16]
 800fa76:	4a05      	ldr	r2, [pc, #20]	; (800fa8c <FLASH_Read_Word_F+0x50>)
 800fa78:	f023 0301 	bic.w	r3, r3, #1
 800fa7c:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800fa7e:	f7ff ff41 	bl	800f904 <FLASH_Lock>
}
 800fa82:	bf00      	nop
 800fa84:	3708      	adds	r7, #8
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	40023c00 	.word	0x40023c00

0800fa90 <Flash_clear_sector1>:
//char _backup_flash_start_3;
//char _backup_flash_start_11;
// 配置と定義はリンカスクリプトで行う

bool Flash_clear_sector1()// Flashのsectoe1を消去
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b088      	sub	sp, #32
 800fa94:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800fa96:	f002 fc0b 	bl	80122b0 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_1;
 800fa9e:	2301      	movs	r3, #1
 800faa0:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800faa2:	2302      	movs	r3, #2
 800faa4:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800faa6:	2301      	movs	r3, #1
 800faa8:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800faaa:	1d3a      	adds	r2, r7, #4
 800faac:	f107 0308 	add.w	r3, r7, #8
 800fab0:	4611      	mov	r1, r2
 800fab2:	4618      	mov	r0, r3
 800fab4:	f002 fcc4 	bl	8012440 <HAL_FLASHEx_Erase>
 800fab8:	4603      	mov	r3, r0
 800faba:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800fabc:	f002 fc1a 	bl	80122f4 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800fac0:	7ffb      	ldrb	r3, [r7, #31]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d105      	bne.n	800fad2 <Flash_clear_sector1+0x42>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800facc:	d101      	bne.n	800fad2 <Flash_clear_sector1+0x42>
 800face:	2301      	movs	r3, #1
 800fad0:	e000      	b.n	800fad4 <Flash_clear_sector1+0x44>
 800fad2:	2300      	movs	r3, #0
 800fad4:	f003 0301 	and.w	r3, r3, #1
 800fad8:	b2db      	uxtb	r3, r3
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3720      	adds	r7, #32
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <Flash_clear_sector9>:
//    HAL_FLASH_Lock();
//
//    return result_3 == HAL_OK;
//}
bool Flash_clear_sector9()// Flashのsectoe1を消去
{
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b088      	sub	sp, #32
 800fae6:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800fae8:	f002 fbe2 	bl	80122b0 <HAL_FLASH_Unlock>

    //printf("\r\nはか1?\r\n");
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800faec:	2300      	movs	r3, #0
 800faee:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM_9;
 800faf0:	2309      	movs	r3, #9
 800faf2:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800faf4:	2302      	movs	r3, #2
 800faf6:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800faf8:	2301      	movs	r3, #1
 800fafa:	617b      	str	r3, [r7, #20]

    //printf("\r\nはか12?\r\n");
    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800fafc:	1d3a      	adds	r2, r7, #4
 800fafe:	f107 0308 	add.w	r3, r7, #8
 800fb02:	4611      	mov	r1, r2
 800fb04:	4618      	mov	r0, r3
 800fb06:	f002 fc9b 	bl	8012440 <HAL_FLASHEx_Erase>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	77fb      	strb	r3, [r7, #31]

    //printf("\r\nはか3?\r\n");
    HAL_FLASH_Lock();
 800fb0e:	f002 fbf1 	bl	80122f4 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800fb12:	7ffb      	ldrb	r3, [r7, #31]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d105      	bne.n	800fb24 <Flash_clear_sector9+0x42>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb1e:	d101      	bne.n	800fb24 <Flash_clear_sector9+0x42>
 800fb20:	2301      	movs	r3, #1
 800fb22:	e000      	b.n	800fb26 <Flash_clear_sector9+0x44>
 800fb24:	2300      	movs	r3, #0
 800fb26:	f003 0301 	and.w	r3, r3, #1
 800fb2a:	b2db      	uxtb	r3, r3
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3720      	adds	r7, #32
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <read_byte>:
//		Error_Handler();
//		printf("エラー2\r\n");
//	}
//	printf("ok\r\n");
//}
inline uint8_t read_byte( uint8_t reg ) {
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	71fb      	strb	r3, [r7, #7]

	uint8_t ret,val;

	ret = reg | 0x80;
 800fb3e:	79fb      	ldrb	r3, [r7, #7]
 800fb40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800fb48:	2200      	movs	r2, #0
 800fb4a:	2104      	movs	r1, #4
 800fb4c:	480d      	ldr	r0, [pc, #52]	; (800fb84 <read_byte+0x50>)
 800fb4e:	f002 ff33 	bl	80129b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800fb52:	f107 010f 	add.w	r1, r7, #15
 800fb56:	2364      	movs	r3, #100	; 0x64
 800fb58:	2201      	movs	r2, #1
 800fb5a:	480b      	ldr	r0, [pc, #44]	; (800fb88 <read_byte+0x54>)
 800fb5c:	f003 fc24 	bl	80133a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 800fb60:	f107 010e 	add.w	r1, r7, #14
 800fb64:	2364      	movs	r3, #100	; 0x64
 800fb66:	2201      	movs	r2, #1
 800fb68:	4807      	ldr	r0, [pc, #28]	; (800fb88 <read_byte+0x54>)
 800fb6a:	f003 fd51 	bl	8013610 <HAL_SPI_Receive>
	CS_SET;
 800fb6e:	2201      	movs	r2, #1
 800fb70:	2104      	movs	r1, #4
 800fb72:	4804      	ldr	r0, [pc, #16]	; (800fb84 <read_byte+0x50>)
 800fb74:	f002 ff20 	bl	80129b8 <HAL_GPIO_WritePin>
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return val;
 800fb78:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	40020c00 	.word	0x40020c00
 800fb88:	2000089c 	.word	0x2000089c

0800fb8c <ReadIMU>:
inline float ReadIMU(uint8_t a, uint8_t b) {
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b086      	sub	sp, #24
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	4603      	mov	r3, r0
 800fb94:	460a      	mov	r2, r1
 800fb96:	71fb      	strb	r3, [r7, #7]
 800fb98:	4613      	mov	r3, r2
 800fb9a:	71bb      	strb	r3, [r7, #6]

	uint8_t ret1, ret2,val1,val2;
	uint8_t ret[2] = {
 800fb9c:	79fb      	ldrb	r3, [r7, #7]
 800fb9e:	723b      	strb	r3, [r7, #8]
 800fba0:	79bb      	ldrb	r3, [r7, #6]
 800fba2:	727b      	strb	r3, [r7, #9]
			a,//0x37,
			b//0x38,
	};
	int16_t law_data;
	float res;
	ret1 = ret[0] | 0x80;
 800fba4:	7a3b      	ldrb	r3, [r7, #8]
 800fba6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	73fb      	strb	r3, [r7, #15]
	ret2 = ret[1] | 0x80;
 800fbae:	7a7b      	ldrb	r3, [r7, #9]
 800fbb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	73bb      	strb	r3, [r7, #14]
//	reg[0] = 0x37;
//	reg[1] = 0x38;
//
//	ret = reg[0] | 0x80;
	CS_RESET;
 800fbb8:	2200      	movs	r2, #0
 800fbba:	2104      	movs	r1, #4
 800fbbc:	4822      	ldr	r0, [pc, #136]	; (800fc48 <ReadIMU+0xbc>)
 800fbbe:	f002 fefb 	bl	80129b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret1,1,100);
 800fbc2:	f107 010f 	add.w	r1, r7, #15
 800fbc6:	2364      	movs	r3, #100	; 0x64
 800fbc8:	2201      	movs	r2, #1
 800fbca:	4820      	ldr	r0, [pc, #128]	; (800fc4c <ReadIMU+0xc0>)
 800fbcc:	f003 fbec 	bl	80133a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val1,1,100);
 800fbd0:	f107 010d 	add.w	r1, r7, #13
 800fbd4:	2364      	movs	r3, #100	; 0x64
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	481c      	ldr	r0, [pc, #112]	; (800fc4c <ReadIMU+0xc0>)
 800fbda:	f003 fd19 	bl	8013610 <HAL_SPI_Receive>
	CS_SET;
 800fbde:	2201      	movs	r2, #1
 800fbe0:	2104      	movs	r1, #4
 800fbe2:	4819      	ldr	r0, [pc, #100]	; (800fc48 <ReadIMU+0xbc>)
 800fbe4:	f002 fee8 	bl	80129b8 <HAL_GPIO_WritePin>

//	ret = reg[1] | 0x80;
	CS_RESET;
 800fbe8:	2200      	movs	r2, #0
 800fbea:	2104      	movs	r1, #4
 800fbec:	4816      	ldr	r0, [pc, #88]	; (800fc48 <ReadIMU+0xbc>)
 800fbee:	f002 fee3 	bl	80129b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret2,1,100);
 800fbf2:	f107 010e 	add.w	r1, r7, #14
 800fbf6:	2364      	movs	r3, #100	; 0x64
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	4814      	ldr	r0, [pc, #80]	; (800fc4c <ReadIMU+0xc0>)
 800fbfc:	f003 fbd4 	bl	80133a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val2,1,100);
 800fc00:	f107 010c 	add.w	r1, r7, #12
 800fc04:	2364      	movs	r3, #100	; 0x64
 800fc06:	2201      	movs	r2, #1
 800fc08:	4810      	ldr	r0, [pc, #64]	; (800fc4c <ReadIMU+0xc0>)
 800fc0a:	f003 fd01 	bl	8013610 <HAL_SPI_Receive>
	CS_SET;
 800fc0e:	2201      	movs	r2, #1
 800fc10:	2104      	movs	r1, #4
 800fc12:	480d      	ldr	r0, [pc, #52]	; (800fc48 <ReadIMU+0xbc>)
 800fc14:	f002 fed0 	bl	80129b8 <HAL_GPIO_WritePin>
	law_data = ( ((uint16_t)val1 << 8) | ((uint16_t)val2) );//何で8bitシフトかというと、ローバイトとハイバイトにわかれているものを一つにしたいから。16bitADCで得た値を二つに分けて出力しているのを元に戻す。
 800fc18:	7b7b      	ldrb	r3, [r7, #13]
 800fc1a:	021b      	lsls	r3, r3, #8
 800fc1c:	b21a      	sxth	r2, r3
 800fc1e:	7b3b      	ldrb	r3, [r7, #12]
 800fc20:	b21b      	sxth	r3, r3
 800fc22:	4313      	orrs	r3, r2
 800fc24:	82fb      	strh	r3, [r7, #22]
	res = (float)law_data;
 800fc26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fc2a:	ee07 3a90 	vmov	s15, r3
 800fc2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc32:	edc7 7a04 	vstr	s15, [r7, #16]
	//1回の取得は0.2msだった
	//値の更新は4回分で0.8ms = 1.25kHz . 656250Bit/s 1回で131.25bit, 4回で525Bit=65.625byte
	//値の取得は1msが妥当。2台目のエンコーダではどれくらいがいいか。as5047Pは4.5MHz
	return res;
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	ee07 3a90 	vmov	s15, r3
}
 800fc3c:	eeb0 0a67 	vmov.f32	s0, s15
 800fc40:	3718      	adds	r7, #24
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	40020c00 	.word	0x40020c00
 800fc4c:	2000089c 	.word	0x2000089c

0800fc50 <write_byte>:
void write_byte( uint8_t reg, uint8_t val )  {
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b084      	sub	sp, #16
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	4603      	mov	r3, r0
 800fc58:	460a      	mov	r2, r1
 800fc5a:	71fb      	strb	r3, [r7, #7]
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800fc60:	79fb      	ldrb	r3, [r7, #7]
 800fc62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	2104      	movs	r1, #4
 800fc6e:	480c      	ldr	r0, [pc, #48]	; (800fca0 <write_byte+0x50>)
 800fc70:	f002 fea2 	bl	80129b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 800fc74:	f107 010f 	add.w	r1, r7, #15
 800fc78:	2364      	movs	r3, #100	; 0x64
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	4809      	ldr	r0, [pc, #36]	; (800fca4 <write_byte+0x54>)
 800fc7e:	f003 fb93 	bl	80133a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 800fc82:	1db9      	adds	r1, r7, #6
 800fc84:	2364      	movs	r3, #100	; 0x64
 800fc86:	2201      	movs	r2, #1
 800fc88:	4806      	ldr	r0, [pc, #24]	; (800fca4 <write_byte+0x54>)
 800fc8a:	f003 fb8d 	bl	80133a8 <HAL_SPI_Transmit>
	CS_SET;
 800fc8e:	2201      	movs	r2, #1
 800fc90:	2104      	movs	r1, #4
 800fc92:	4803      	ldr	r0, [pc, #12]	; (800fca0 <write_byte+0x50>)
 800fc94:	f002 fe90 	bl	80129b8 <HAL_GPIO_WritePin>
}
 800fc98:	bf00      	nop
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	40020c00 	.word	0x40020c00
 800fca4:	2000089c 	.word	0x2000089c

0800fca8 <IMU_init>:

uint8_t IMU_init() {
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800fcae:	2000      	movs	r0, #0
 800fcb0:	f7ff ff40 	bl	800fb34 <read_byte>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800fcb8:	79bb      	ldrb	r3, [r7, #6]
 800fcba:	2be0      	cmp	r3, #224	; 0xe0
 800fcbc:	d119      	bne.n	800fcf2 <IMU_init+0x4a>
		ret = 1;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800fcc2:	2101      	movs	r1, #1
 800fcc4:	2006      	movs	r0, #6
 800fcc6:	f7ff ffc3 	bl	800fc50 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800fcca:	2110      	movs	r1, #16
 800fccc:	2003      	movs	r0, #3
 800fcce:	f7ff ffbf 	bl	800fc50 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800fcd2:	2120      	movs	r1, #32
 800fcd4:	207f      	movs	r0, #127	; 0x7f
 800fcd6:	f7ff ffbb 	bl	800fc50 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 800fcda:	2117      	movs	r1, #23
 800fcdc:	2001      	movs	r0, #1
 800fcde:	f7ff ffb7 	bl	800fc50 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000

		write_byte(0x14,0x17);	//	レンジ±16g 0x06
 800fce2:	2117      	movs	r1, #23
 800fce4:	2014      	movs	r0, #20
 800fce6:	f7ff ffb3 	bl	800fc50 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16

		write_byte(0x7F,0x00);	//USER_BANK0
 800fcea:	2100      	movs	r1, #0
 800fcec:	207f      	movs	r0, #127	; 0x7f
 800fcee:	f7ff ffaf 	bl	800fc50 <write_byte>
	}
	return ret;
 800fcf2:	79fb      	ldrb	r3, [r7, #7]
	//0x14, 0x7F : 0000 1110, 0111 1111
	//retはregのまま。
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <IMU_Calib>:
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
}

void IMU_Calib(){
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	f5ad 5dfa 	sub.w	sp, sp, #8000	; 0x1f40
 800fd02:	b084      	sub	sp, #16
 800fd04:	af00      	add	r7, sp, #0


	HAL_Delay(100);
 800fd06:	2064      	movs	r0, #100	; 0x64
 800fd08:	f001 f982 	bl	8011010 <HAL_Delay>

	int num = 2000;
 800fd0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800fd10:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800fd14:	f102 0204 	add.w	r2, r2, #4
 800fd18:	6013      	str	r3, [r2, #0]
	float zg_vals[2000]={0.0f};
 800fd1a:	f107 0310 	add.w	r3, r7, #16
 800fd1e:	3b0c      	subs	r3, #12
 800fd20:	4618      	mov	r0, r3
 800fd22:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800fd26:	461a      	mov	r2, r3
 800fd28:	2100      	movs	r1, #0
 800fd2a:	f006 f998 	bl	801605e <memset>
	float sum=0;
 800fd2e:	f04f 0300 	mov.w	r3, #0
 800fd32:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800fd36:	f102 020c 	add.w	r2, r2, #12
 800fd3a:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < num; i++){
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800fd42:	f102 0208 	add.w	r2, r2, #8
 800fd46:	6013      	str	r3, [r2, #0]
 800fd48:	e034      	b.n	800fdb4 <IMU_Calib+0xb8>
		zg_vals[i] = ZGyro;
 800fd4a:	4b2a      	ldr	r3, [pc, #168]	; (800fdf4 <IMU_Calib+0xf8>)
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	f107 0310 	add.w	r3, r7, #16
 800fd52:	3b0c      	subs	r3, #12
 800fd54:	f507 51fa 	add.w	r1, r7, #8000	; 0x1f40
 800fd58:	f101 0108 	add.w	r1, r1, #8
 800fd5c:	6809      	ldr	r1, [r1, #0]
 800fd5e:	0089      	lsls	r1, r1, #2
 800fd60:	440b      	add	r3, r1
 800fd62:	601a      	str	r2, [r3, #0]
		sum += zg_vals[i];
 800fd64:	f107 0310 	add.w	r3, r7, #16
 800fd68:	3b0c      	subs	r3, #12
 800fd6a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800fd6e:	f102 0208 	add.w	r2, r2, #8
 800fd72:	6812      	ldr	r2, [r2, #0]
 800fd74:	0092      	lsls	r2, r2, #2
 800fd76:	4413      	add	r3, r2
 800fd78:	edd3 7a00 	vldr	s15, [r3]
 800fd7c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800fd80:	f103 030c 	add.w	r3, r3, #12
 800fd84:	ed93 7a00 	vldr	s14, [r3]
 800fd88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd8c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800fd90:	f103 030c 	add.w	r3, r3, #12
 800fd94:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800fd98:	2002      	movs	r0, #2
 800fd9a:	f001 f939 	bl	8011010 <HAL_Delay>
	for(int i = 0; i < num; i++){
 800fd9e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800fda2:	f103 0308 	add.w	r3, r3, #8
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	3301      	adds	r3, #1
 800fdaa:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 800fdae:	f102 0208 	add.w	r2, r2, #8
 800fdb2:	6013      	str	r3, [r2, #0]
 800fdb4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800fdb8:	f103 0308 	add.w	r3, r3, #8
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800fdc2:	f103 0304 	add.w	r3, r3, #4
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	dbbe      	blt.n	800fd4a <IMU_Calib+0x4e>
//	for(int i=0; i < num; i++)
//	{
//		printf("zg_vals[%d]: %lf\r\n",i,zg_vals[i]);
//	}
//	printf("sum:%lf",sum);
	zg_offset = sum / 2000.0f;
 800fdcc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800fdd0:	f103 030c 	add.w	r3, r3, #12
 800fdd4:	ed93 7a00 	vldr	s14, [r3]
 800fdd8:	eddf 6a07 	vldr	s13, [pc, #28]	; 800fdf8 <IMU_Calib+0xfc>
 800fddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fde0:	4b06      	ldr	r3, [pc, #24]	; (800fdfc <IMU_Calib+0x100>)
 800fde2:	edc3 7a00 	vstr	s15, [r3]
}
 800fde6:	bf00      	nop
 800fde8:	f507 57fa 	add.w	r7, r7, #8000	; 0x1f40
 800fdec:	3710      	adds	r7, #16
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	200002d4 	.word	0x200002d4
 800fdf8:	44fa0000 	.word	0x44fa0000
 800fdfc:	200002d0 	.word	0x200002d0

0800fe00 <EncoderStart>:
#include "IEH2_4096.h"

//TIM3_Left, TIM4_Right

void EncoderStart()
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800fe04:	213c      	movs	r1, #60	; 0x3c
 800fe06:	4804      	ldr	r0, [pc, #16]	; (800fe18 <EncoderStart+0x18>)
 800fe08:	f004 faea 	bl	80143e0 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800fe0c:	213c      	movs	r1, #60	; 0x3c
 800fe0e:	4803      	ldr	r0, [pc, #12]	; (800fe1c <EncoderStart+0x1c>)
 800fe10:	f004 fae6 	bl	80143e0 <HAL_TIM_Encoder_Start>
}
 800fe14:	bf00      	nop
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	2000085c 	.word	0x2000085c
 800fe1c:	200007d4 	.word	0x200007d4

0800fe20 <EmitterON>:
 */

#include "IR_Emitter.h"

void EmitterON()
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 800fe24:	2100      	movs	r1, #0
 800fe26:	4804      	ldr	r0, [pc, #16]	; (800fe38 <EmitterON+0x18>)
 800fe28:	f004 f85e 	bl	8013ee8 <HAL_TIM_OC_Start_IT>
	  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 800fe2c:	2100      	movs	r1, #0
 800fe2e:	4802      	ldr	r0, [pc, #8]	; (800fe38 <EmitterON+0x18>)
 800fe30:	f005 f971 	bl	8015116 <HAL_TIMEx_OCN_Start_IT>

}
 800fe34:	bf00      	nop
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	20000794 	.word	0x20000794

0800fe3c <EmitterOFF>:
void EmitterOFF()
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	af00      	add	r7, sp, #0
	  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800fe40:	2100      	movs	r1, #0
 800fe42:	4804      	ldr	r0, [pc, #16]	; (800fe54 <EmitterOFF+0x18>)
 800fe44:	f004 f8d4 	bl	8013ff0 <HAL_TIM_OC_Stop_IT>
	  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 800fe48:	2100      	movs	r1, #0
 800fe4a:	4802      	ldr	r0, [pc, #8]	; (800fe54 <EmitterOFF+0x18>)
 800fe4c:	f005 f9b8 	bl	80151c0 <HAL_TIMEx_OCN_Stop_IT>

}
 800fe50:	bf00      	nop
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	20000794 	.word	0x20000794

0800fe58 <ChangeLED>:

#include "LED_Driver.h"
//ハードウェア層
//必要に応じてマクロ定義
void ChangeLED(int mode)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
	//Switch
	switch(mode){
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2b07      	cmp	r3, #7
 800fe64:	f200 80ac 	bhi.w	800ffc0 <ChangeLED+0x168>
 800fe68:	a201      	add	r2, pc, #4	; (adr r2, 800fe70 <ChangeLED+0x18>)
 800fe6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe6e:	bf00      	nop
 800fe70:	0800fe91 	.word	0x0800fe91
 800fe74:	0800feb7 	.word	0x0800feb7
 800fe78:	0800fedd 	.word	0x0800fedd
 800fe7c:	0800ff03 	.word	0x0800ff03
 800fe80:	0800ff29 	.word	0x0800ff29
 800fe84:	0800ff4f 	.word	0x0800ff4f
 800fe88:	0800ff75 	.word	0x0800ff75
 800fe8c:	0800ff9b 	.word	0x0800ff9b
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800fe90:	2200      	movs	r2, #0
 800fe92:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fe96:	484d      	ldr	r0, [pc, #308]	; (800ffcc <ChangeLED+0x174>)
 800fe98:	f002 fd8e 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fea2:	484a      	ldr	r0, [pc, #296]	; (800ffcc <ChangeLED+0x174>)
 800fea4:	f002 fd88 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800fea8:	2200      	movs	r2, #0
 800feaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800feae:	4848      	ldr	r0, [pc, #288]	; (800ffd0 <ChangeLED+0x178>)
 800feb0:	f002 fd82 	bl	80129b8 <HAL_GPIO_WritePin>
		break;
 800feb4:	e085      	b.n	800ffc2 <ChangeLED+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800feb6:	2201      	movs	r2, #1
 800feb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800febc:	4843      	ldr	r0, [pc, #268]	; (800ffcc <ChangeLED+0x174>)
 800febe:	f002 fd7b 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800fec2:	2200      	movs	r2, #0
 800fec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fec8:	4840      	ldr	r0, [pc, #256]	; (800ffcc <ChangeLED+0x174>)
 800feca:	f002 fd75 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800fece:	2200      	movs	r2, #0
 800fed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fed4:	483e      	ldr	r0, [pc, #248]	; (800ffd0 <ChangeLED+0x178>)
 800fed6:	f002 fd6f 	bl	80129b8 <HAL_GPIO_WritePin>
		break;
 800feda:	e072      	b.n	800ffc2 <ChangeLED+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800fedc:	2200      	movs	r2, #0
 800fede:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fee2:	483a      	ldr	r0, [pc, #232]	; (800ffcc <ChangeLED+0x174>)
 800fee4:	f002 fd68 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800fee8:	2201      	movs	r2, #1
 800feea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800feee:	4837      	ldr	r0, [pc, #220]	; (800ffcc <ChangeLED+0x174>)
 800fef0:	f002 fd62 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800fef4:	2200      	movs	r2, #0
 800fef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fefa:	4835      	ldr	r0, [pc, #212]	; (800ffd0 <ChangeLED+0x178>)
 800fefc:	f002 fd5c 	bl	80129b8 <HAL_GPIO_WritePin>

		break;
 800ff00:	e05f      	b.n	800ffc2 <ChangeLED+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800ff02:	2201      	movs	r2, #1
 800ff04:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff08:	4830      	ldr	r0, [pc, #192]	; (800ffcc <ChangeLED+0x174>)
 800ff0a:	f002 fd55 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800ff0e:	2201      	movs	r2, #1
 800ff10:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ff14:	482d      	ldr	r0, [pc, #180]	; (800ffcc <ChangeLED+0x174>)
 800ff16:	f002 fd4f 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff20:	482b      	ldr	r0, [pc, #172]	; (800ffd0 <ChangeLED+0x178>)
 800ff22:	f002 fd49 	bl	80129b8 <HAL_GPIO_WritePin>
		break;
 800ff26:	e04c      	b.n	800ffc2 <ChangeLED+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800ff28:	2200      	movs	r2, #0
 800ff2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff2e:	4827      	ldr	r0, [pc, #156]	; (800ffcc <ChangeLED+0x174>)
 800ff30:	f002 fd42 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800ff34:	2200      	movs	r2, #0
 800ff36:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ff3a:	4824      	ldr	r0, [pc, #144]	; (800ffcc <ChangeLED+0x174>)
 800ff3c:	f002 fd3c 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ff40:	2201      	movs	r2, #1
 800ff42:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff46:	4822      	ldr	r0, [pc, #136]	; (800ffd0 <ChangeLED+0x178>)
 800ff48:	f002 fd36 	bl	80129b8 <HAL_GPIO_WritePin>
		break;
 800ff4c:	e039      	b.n	800ffc2 <ChangeLED+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800ff4e:	2201      	movs	r2, #1
 800ff50:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff54:	481d      	ldr	r0, [pc, #116]	; (800ffcc <ChangeLED+0x174>)
 800ff56:	f002 fd2f 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ff60:	481a      	ldr	r0, [pc, #104]	; (800ffcc <ChangeLED+0x174>)
 800ff62:	f002 fd29 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ff66:	2201      	movs	r2, #1
 800ff68:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff6c:	4818      	ldr	r0, [pc, #96]	; (800ffd0 <ChangeLED+0x178>)
 800ff6e:	f002 fd23 	bl	80129b8 <HAL_GPIO_WritePin>
		break;
 800ff72:	e026      	b.n	800ffc2 <ChangeLED+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800ff74:	2200      	movs	r2, #0
 800ff76:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff7a:	4814      	ldr	r0, [pc, #80]	; (800ffcc <ChangeLED+0x174>)
 800ff7c:	f002 fd1c 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800ff80:	2201      	movs	r2, #1
 800ff82:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ff86:	4811      	ldr	r0, [pc, #68]	; (800ffcc <ChangeLED+0x174>)
 800ff88:	f002 fd16 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff92:	480f      	ldr	r0, [pc, #60]	; (800ffd0 <ChangeLED+0x178>)
 800ff94:	f002 fd10 	bl	80129b8 <HAL_GPIO_WritePin>

		break;
 800ff98:	e013      	b.n	800ffc2 <ChangeLED+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ffa0:	480a      	ldr	r0, [pc, #40]	; (800ffcc <ChangeLED+0x174>)
 800ffa2:	f002 fd09 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ffac:	4807      	ldr	r0, [pc, #28]	; (800ffcc <ChangeLED+0x174>)
 800ffae:	f002 fd03 	bl	80129b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ffb8:	4805      	ldr	r0, [pc, #20]	; (800ffd0 <ChangeLED+0x178>)
 800ffba:	f002 fcfd 	bl	80129b8 <HAL_GPIO_WritePin>

		break;
 800ffbe:	e000      	b.n	800ffc2 <ChangeLED+0x16a>
	default: break;
 800ffc0:	bf00      	nop

	}
}
 800ffc2:	bf00      	nop
 800ffc4:	3708      	adds	r7, #8
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	40020800 	.word	0x40020800
 800ffd0:	40020400 	.word	0x40020400

0800ffd4 <Motor_PWM_Start>:

#include "Motor_Driver.h"


//そういえばHALのエラーハンドラ関数ってどういう処理だろう。
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800ffd8:	210c      	movs	r1, #12
 800ffda:	4809      	ldr	r0, [pc, #36]	; (8010000 <Motor_PWM_Start+0x2c>)
 800ffdc:	f004 f8d8 	bl	8014190 <HAL_TIM_PWM_Start>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d001      	beq.n	800ffea <Motor_PWM_Start+0x16>
  {
	  Error_Handler();
 800ffe6:	f7fe ffd3 	bl	800ef90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 800ffea:	2104      	movs	r1, #4
 800ffec:	4805      	ldr	r0, [pc, #20]	; (8010004 <Motor_PWM_Start+0x30>)
 800ffee:	f004 f8cf 	bl	8014190 <HAL_TIM_PWM_Start>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d001      	beq.n	800fffc <Motor_PWM_Start+0x28>
  {
	  Error_Handler();
 800fff8:	f7fe ffca 	bl	800ef90 <Error_Handler>
  }
#endif
}
 800fffc:	bf00      	nop
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	2000023c 	.word	0x2000023c
 8010004:	2000027c 	.word	0x2000027c

08010008 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 8010008:	b580      	push	{r7, lr}
 801000a:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK)
 801000c:	210c      	movs	r1, #12
 801000e:	4809      	ldr	r0, [pc, #36]	; (8010034 <Motor_PWM_Stop+0x2c>)
 8010010:	f004 f8fc 	bl	801420c <HAL_TIM_PWM_Stop>
 8010014:	4603      	mov	r3, r0
 8010016:	2b00      	cmp	r3, #0
 8010018:	d001      	beq.n	801001e <Motor_PWM_Stop+0x16>
  {
	  Error_Handler();
 801001a:	f7fe ffb9 	bl	800ef90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK)
 801001e:	2104      	movs	r1, #4
 8010020:	4805      	ldr	r0, [pc, #20]	; (8010038 <Motor_PWM_Stop+0x30>)
 8010022:	f004 f8f3 	bl	801420c <HAL_TIM_PWM_Stop>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d001      	beq.n	8010030 <Motor_PWM_Stop+0x28>
  {
	  Error_Handler();
 801002c:	f7fe ffb0 	bl	800ef90 <Error_Handler>
  }
#endif
}
 8010030:	bf00      	nop
 8010032:	bd80      	pop	{r7, pc}
 8010034:	2000023c 	.word	0x2000023c
 8010038:	2000027c 	.word	0x2000027c
 801003c:	00000000 	.word	0x00000000

08010040 <Motor_Switch>:
inline void Motor_Switch(int left, int right){
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
	if (left > 0 ){
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2b00      	cmp	r3, #0
 801004e:	dd05      	ble.n	801005c <Motor_Switch+0x1c>
		//to -
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_SET); //A2が左SET:1で正転
 8010050:	2201      	movs	r2, #1
 8010052:	2104      	movs	r1, #4
 8010054:	4828      	ldr	r0, [pc, #160]	; (80100f8 <Motor_Switch+0xb8>)
 8010056:	f002 fcaf 	bl	80129b8 <HAL_GPIO_WritePin>
 801005a:	e00a      	b.n	8010072 <Motor_Switch+0x32>

	}
	else  if (left < 0){
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	da07      	bge.n	8010072 <Motor_Switch+0x32>
		//to +
		HAL_GPIO_WritePin(GPIO_LEFT, GPIO_L_PIN_NUM, GPIO_PIN_RESET); //A2が左,RESET:0で転
 8010062:	2200      	movs	r2, #0
 8010064:	2104      	movs	r1, #4
 8010066:	4824      	ldr	r0, [pc, #144]	; (80100f8 <Motor_Switch+0xb8>)
 8010068:	f002 fca6 	bl	80129b8 <HAL_GPIO_WritePin>
		left = -left;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	425b      	negs	r3, r3
 8010070:	607b      	str	r3, [r7, #4]
	}
	if (right > 0){
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	2b00      	cmp	r3, #0
 8010076:	dd05      	ble.n	8010084 <Motor_Switch+0x44>
		//to -
		HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_RESET); //A0が右,RESET:0で転
 8010078:	2200      	movs	r2, #0
 801007a:	2101      	movs	r1, #1
 801007c:	481e      	ldr	r0, [pc, #120]	; (80100f8 <Motor_Switch+0xb8>)
 801007e:	f002 fc9b 	bl	80129b8 <HAL_GPIO_WritePin>
 8010082:	e00a      	b.n	801009a <Motor_Switch+0x5a>

	}

	else if (right < 0){
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	da07      	bge.n	801009a <Motor_Switch+0x5a>
	  	//to +
	  	HAL_GPIO_WritePin(GPIO_RIGHT, GPIO_R_PIN_NUM, GPIO_PIN_SET); //A0が右,SET:1で正転
 801008a:	2201      	movs	r2, #1
 801008c:	2101      	movs	r1, #1
 801008e:	481a      	ldr	r0, [pc, #104]	; (80100f8 <Motor_Switch+0xb8>)
 8010090:	f002 fc92 	bl	80129b8 <HAL_GPIO_WritePin>
	  	right = -right;
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	425b      	negs	r3, r3
 8010098:	603b      	str	r3, [r7, #0]
	}

	//上限はマクロで設定
	if(left > 4200*0.6) left = 4200*0.6;
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f7f8 f97a 	bl	8008394 <__aeabi_i2d>
 80100a0:	a313      	add	r3, pc, #76	; (adr r3, 80100f0 <Motor_Switch+0xb0>)
 80100a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a6:	f7f8 fc6f 	bl	8008988 <__aeabi_dcmpgt>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d002      	beq.n	80100b6 <Motor_Switch+0x76>
 80100b0:	f640 13d8 	movw	r3, #2520	; 0x9d8
 80100b4:	607b      	str	r3, [r7, #4]
	if(right > 4200*0.6) right = 4200*0.6;
 80100b6:	6838      	ldr	r0, [r7, #0]
 80100b8:	f7f8 f96c 	bl	8008394 <__aeabi_i2d>
 80100bc:	a30c      	add	r3, pc, #48	; (adr r3, 80100f0 <Motor_Switch+0xb0>)
 80100be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c2:	f7f8 fc61 	bl	8008988 <__aeabi_dcmpgt>
 80100c6:	4603      	mov	r3, r0
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d002      	beq.n	80100d2 <Motor_Switch+0x92>
 80100cc:	f640 13d8 	movw	r3, #2520	; 0x9d8
 80100d0:	603b      	str	r3, [r7, #0]


	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, right); //tim5ch2が右
 80100d2:	4b0a      	ldr	r3, [pc, #40]	; (80100fc <Motor_Switch+0xbc>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	683a      	ldr	r2, [r7, #0]
 80100d8:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, left); //tim2ch4が左
 80100da:	4b09      	ldr	r3, [pc, #36]	; (8010100 <Motor_Switch+0xc0>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80100e2:	bf00      	nop
 80100e4:	3708      	adds	r7, #8
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	f3af 8000 	nop.w
 80100f0:	00000000 	.word	0x00000000
 80100f4:	40a3b000 	.word	0x40a3b000
 80100f8:	40020000 	.word	0x40020000
 80100fc:	2000027c 	.word	0x2000027c
 8010100:	2000023c 	.word	0x2000023c

08010104 <InitPulse>:
//目的 : エンコーダパルスを好きな値で初期化する。(直接入れてもいいが、他の関数と組み合わせるときに使える)
//引数 : カウンタのアドレス、パルス初期値
//戻り値 : なし
//-------------------------//
void InitPulse(int *timer_counter, int initial_pulse)
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
	* timer_counter = initial_pulse;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	683a      	ldr	r2, [r7, #0]
 8010112:	601a      	str	r2, [r3, #0]
	//printf("timer_counter : %d\r\n", *timer_counter);
}
 8010114:	bf00      	nop
 8010116:	370c      	adds	r7, #12
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <GetWallDataAverage>:
//目的 : 2個連続した受光データの差分値のn回平均を取る。
//引数 : n回平均、 adcの生データ、 受光デバイスのナンバ0~割り振っておく。
//戻り値 : なし
//-------------------------//
float GetWallDataAverage(int average_of_n_times, int adc_data, int receiver_num)
{
 8010120:	b480      	push	{r7}
 8010122:	b087      	sub	sp, #28
 8010124:	af00      	add	r7, sp, #0
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	607a      	str	r2, [r7, #4]
	static int count[4] = {0}, last[4]={0}, integrate[4]={0};
	int raw, error;
	static float average[4]={0};

	raw = adc_data;
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	617b      	str	r3, [r7, #20]
	error = abs( last[receiver_num] - raw );
 8010130:	4a2c      	ldr	r2, [pc, #176]	; (80101e4 <GetWallDataAverage+0xc4>)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	1ad3      	subs	r3, r2, r3
 801013c:	2b00      	cmp	r3, #0
 801013e:	bfb8      	it	lt
 8010140:	425b      	neglt	r3, r3
 8010142:	613b      	str	r3, [r7, #16]
	last[receiver_num] = raw;
 8010144:	4927      	ldr	r1, [pc, #156]	; (80101e4 <GetWallDataAverage+0xc4>)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	697a      	ldr	r2, [r7, #20]
 801014a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	integrate[receiver_num] += error;
 801014e:	4a26      	ldr	r2, [pc, #152]	; (80101e8 <GetWallDataAverage+0xc8>)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	441a      	add	r2, r3
 801015a:	4923      	ldr	r1, [pc, #140]	; (80101e8 <GetWallDataAverage+0xc8>)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	count[receiver_num]++;
 8010162:	4a22      	ldr	r2, [pc, #136]	; (80101ec <GetWallDataAverage+0xcc>)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801016a:	1c5a      	adds	r2, r3, #1
 801016c:	491f      	ldr	r1, [pc, #124]	; (80101ec <GetWallDataAverage+0xcc>)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(count[receiver_num] == average_of_n_times)
 8010174:	4a1d      	ldr	r2, [pc, #116]	; (80101ec <GetWallDataAverage+0xcc>)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801017c:	68fa      	ldr	r2, [r7, #12]
 801017e:	429a      	cmp	r2, r3
 8010180:	d121      	bne.n	80101c6 <GetWallDataAverage+0xa6>
	{
		average[receiver_num] = (float)integrate[receiver_num] / count[receiver_num];
 8010182:	4a19      	ldr	r2, [pc, #100]	; (80101e8 <GetWallDataAverage+0xc8>)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801018a:	ee07 3a90 	vmov	s15, r3
 801018e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010192:	4a16      	ldr	r2, [pc, #88]	; (80101ec <GetWallDataAverage+0xcc>)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801019a:	ee07 3a90 	vmov	s15, r3
 801019e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80101a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101a6:	4a12      	ldr	r2, [pc, #72]	; (80101f0 <GetWallDataAverage+0xd0>)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	4413      	add	r3, r2
 80101ae:	edc3 7a00 	vstr	s15, [r3]
		integrate[receiver_num] = 0;
 80101b2:	4a0d      	ldr	r2, [pc, #52]	; (80101e8 <GetWallDataAverage+0xc8>)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2100      	movs	r1, #0
 80101b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		count[receiver_num] = 0;
 80101bc:	4a0b      	ldr	r2, [pc, #44]	; (80101ec <GetWallDataAverage+0xcc>)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2100      	movs	r1, #0
 80101c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return average[receiver_num];
 80101c6:	4a0a      	ldr	r2, [pc, #40]	; (80101f0 <GetWallDataAverage+0xd0>)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	4413      	add	r3, r2
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	ee07 3a90 	vmov	s15, r3
}
 80101d4:	eeb0 0a67 	vmov.f32	s0, s15
 80101d8:	371c      	adds	r7, #28
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	200002d8 	.word	0x200002d8
 80101e8:	200002e8 	.word	0x200002e8
 80101ec:	200002f8 	.word	0x200002f8
 80101f0:	20000308 	.word	0x20000308

080101f4 <ADCToBatteryVoltage>:
//目的 : adcデータをバッテリ電圧値に変換する
//引数 : adcの値
//戻り値 : バッテリ電圧値
//-------------------------//
float ADCToBatteryVoltage(int adc_data, float split, float pin_v_max, float adc_resolution)	//adcを使っていない場合は別の方法
{
 80101f4:	b480      	push	{r7}
 80101f6:	b087      	sub	sp, #28
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	60f8      	str	r0, [r7, #12]
 80101fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8010200:	edc7 0a01 	vstr	s1, [r7, #4]
 8010204:	ed87 1a00 	vstr	s2, [r7]
	float battery_voltage = 0;
 8010208:	f04f 0300 	mov.w	r3, #0
 801020c:	617b      	str	r3, [r7, #20]
	battery_voltage =  adc_data * split* pin_v_max / adc_resolution;//V_SPLIT_NUM * PIN_V_MAX / ADC_RESOLUTION;	//ピンの特性に関するものは引数で。
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	ee07 3a90 	vmov	s15, r3
 8010214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010218:	edd7 7a02 	vldr	s15, [r7, #8]
 801021c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010220:	edd7 7a01 	vldr	s15, [r7, #4]
 8010224:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010228:	ed97 7a00 	vldr	s14, [r7]
 801022c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010230:	edc7 7a05 	vstr	s15, [r7, #20]
	return battery_voltage;
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	ee07 3a90 	vmov	s15, r3
}
 801023a:	eeb0 0a67 	vmov.f32	s0, s15
 801023e:	371c      	adds	r7, #28
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr

08010248 <IntegerPower>:
//引数 : 底、指数
//戻り値 : 解
//-------------------------//

int IntegerPower(int integer, int exponential)
{
 8010248:	b480      	push	{r7}
 801024a:	b085      	sub	sp, #20
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
	int pattern_num = 1;
 8010252:	2301      	movs	r3, #1
 8010254:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 8010256:	2300      	movs	r3, #0
 8010258:	60bb      	str	r3, [r7, #8]
 801025a:	e007      	b.n	801026c <IntegerPower+0x24>
	{
		pattern_num *= integer;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	fb02 f303 	mul.w	r3, r2, r3
 8010264:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < exponential ; i++)
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	3301      	adds	r3, #1
 801026a:	60bb      	str	r3, [r7, #8]
 801026c:	68ba      	ldr	r2, [r7, #8]
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	429a      	cmp	r2, r3
 8010272:	dbf3      	blt.n	801025c <IntegerPower+0x14>
	}
	return pattern_num;
 8010274:	68fb      	ldr	r3, [r7, #12]
}
 8010276:	4618      	mov	r0, r3
 8010278:	3714      	adds	r7, #20
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr

08010282 <GetBatteryLevel>:
//戻り値 : レベル
//-------------------------//

//残量レベルを返す
int GetBatteryLevel(float current_voltage, float battery_min, float battery_max, int level_num)	//だいぶ汎用的
{
 8010282:	b480      	push	{r7}
 8010284:	b08b      	sub	sp, #44	; 0x2c
 8010286:	af00      	add	r7, sp, #0
 8010288:	ed87 0a03 	vstr	s0, [r7, #12]
 801028c:	edc7 0a02 	vstr	s1, [r7, #8]
 8010290:	ed87 1a01 	vstr	s2, [r7, #4]
 8010294:	6038      	str	r0, [r7, #0]
	float current_percentage = current_voltage / battery_max;
 8010296:	edd7 6a03 	vldr	s13, [r7, #12]
 801029a:	ed97 7a01 	vldr	s14, [r7, #4]
 801029e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102a2:	edc7 7a07 	vstr	s15, [r7, #28]
	float lowest_percentage =  battery_min / battery_max;
 80102a6:	edd7 6a02 	vldr	s13, [r7, #8]
 80102aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80102ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102b2:	edc7 7a06 	vstr	s15, [r7, #24]

	float percentage_per_pattern = (1 - lowest_percentage) / (float) level_num;
 80102b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80102be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	ee07 3a90 	vmov	s15, r3
 80102c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80102cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102d0:	edc7 7a05 	vstr	s15, [r7, #20]

	int pattern = 0;
 80102d4:	2300      	movs	r3, #0
 80102d6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 80102d8:	2300      	movs	r3, #0
 80102da:	623b      	str	r3, [r7, #32]
 80102dc:	e018      	b.n	8010310 <GetBatteryLevel+0x8e>
	{
		if( ( lowest_percentage + (percentage_per_pattern* i) )  <= current_percentage )
 80102de:	6a3b      	ldr	r3, [r7, #32]
 80102e0:	ee07 3a90 	vmov	s15, r3
 80102e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80102e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80102ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80102f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80102f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80102fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010304:	db01      	blt.n	801030a <GetBatteryLevel+0x88>
		{
			pattern = i;
 8010306:	6a3b      	ldr	r3, [r7, #32]
 8010308:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0; i < level_num; i++)
 801030a:	6a3b      	ldr	r3, [r7, #32]
 801030c:	3301      	adds	r3, #1
 801030e:	623b      	str	r3, [r7, #32]
 8010310:	6a3a      	ldr	r2, [r7, #32]
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	429a      	cmp	r2, r3
 8010316:	dbe2      	blt.n	80102de <GetBatteryLevel+0x5c>
		}
	}
	return pattern;
 8010318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801031a:	4618      	mov	r0, r3
 801031c:	372c      	adds	r7, #44	; 0x2c
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr
	...

08010328 <Buffering>:
//{
//	Photo[SL];
//	FLASH_Write_Word_F(address, data);
//}
void Buffering()
{
 8010328:	b580      	push	{r7, lr}
 801032a:	af00      	add	r7, sp, #0
	  setbuf(stdout,NULL);
 801032c:	4b07      	ldr	r3, [pc, #28]	; (801034c <Buffering+0x24>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	689b      	ldr	r3, [r3, #8]
 8010332:	2100      	movs	r1, #0
 8010334:	4618      	mov	r0, r3
 8010336:	f006 fd6d 	bl	8016e14 <setbuf>
	  setbuf(stdin,NULL);
 801033a:	4b04      	ldr	r3, [pc, #16]	; (801034c <Buffering+0x24>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	2100      	movs	r1, #0
 8010342:	4618      	mov	r0, r3
 8010344:	f006 fd66 	bl	8016e14 <setbuf>
}
 8010348:	bf00      	nop
 801034a:	bd80      	pop	{r7, pc}
 801034c:	2000002c 	.word	0x2000002c

08010350 <Copy_Gain>:
void Copy_Gain()
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b092      	sub	sp, #72	; 0x48
 8010354:	af00      	add	r7, sp, #0
	//コピーしなくても、単品で書き込める。
	//セクター消去して、一つ一つ書き込む。
	//printf("\r\nどしたん\r\n");

	uint32_t address = start_adress_sector9;
 8010356:	4b2c      	ldr	r3, [pc, #176]	; (8010408 <Copy_Gain+0xb8>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	647b      	str	r3, [r7, #68]	; 0x44
	float data[16]={0};
 801035c:	463b      	mov	r3, r7
 801035e:	2240      	movs	r2, #64	; 0x40
 8010360:	2100      	movs	r1, #0
 8010362:	4618      	mov	r0, r3
 8010364:	f005 fe7b 	bl	801605e <memset>
	data[0] = Pid[L_VELO_PID].KP;
 8010368:	4b28      	ldr	r3, [pc, #160]	; (801040c <Copy_Gain+0xbc>)
 801036a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801036e:	603b      	str	r3, [r7, #0]
	data[1] = Pid[L_VELO_PID].KI;
 8010370:	4b26      	ldr	r3, [pc, #152]	; (801040c <Copy_Gain+0xbc>)
 8010372:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010376:	607b      	str	r3, [r7, #4]
	data[2] = Pid[L_VELO_PID].KD;
 8010378:	4b24      	ldr	r3, [pc, #144]	; (801040c <Copy_Gain+0xbc>)
 801037a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801037e:	60bb      	str	r3, [r7, #8]

	data[3] = Pid[A_VELO_PID].KP;
 8010380:	4b22      	ldr	r3, [pc, #136]	; (801040c <Copy_Gain+0xbc>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	60fb      	str	r3, [r7, #12]
	data[4] = Pid[A_VELO_PID].KI;
 8010386:	4b21      	ldr	r3, [pc, #132]	; (801040c <Copy_Gain+0xbc>)
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	613b      	str	r3, [r7, #16]
	data[5] = Pid[A_VELO_PID].KD;
 801038c:	4b1f      	ldr	r3, [pc, #124]	; (801040c <Copy_Gain+0xbc>)
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	617b      	str	r3, [r7, #20]

	data[6] = Pid[L_WALL_PID].KP;
 8010392:	4b1e      	ldr	r3, [pc, #120]	; (801040c <Copy_Gain+0xbc>)
 8010394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010396:	61bb      	str	r3, [r7, #24]
	data[7] = Pid[L_WALL_PID].KI;
 8010398:	4b1c      	ldr	r3, [pc, #112]	; (801040c <Copy_Gain+0xbc>)
 801039a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801039c:	61fb      	str	r3, [r7, #28]
	data[8] = Pid[L_WALL_PID].KD;
 801039e:	4b1b      	ldr	r3, [pc, #108]	; (801040c <Copy_Gain+0xbc>)
 80103a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103a2:	623b      	str	r3, [r7, #32]

	data[9] = Pid[R_WALL_PID].KP;
 80103a4:	4b19      	ldr	r3, [pc, #100]	; (801040c <Copy_Gain+0xbc>)
 80103a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103aa:	627b      	str	r3, [r7, #36]	; 0x24
	data[10] = Pid[R_WALL_PID].KI;
 80103ac:	4b17      	ldr	r3, [pc, #92]	; (801040c <Copy_Gain+0xbc>)
 80103ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103b2:	62bb      	str	r3, [r7, #40]	; 0x28
	data[11] = Pid[R_WALL_PID].KD;
 80103b4:	4b15      	ldr	r3, [pc, #84]	; (801040c <Copy_Gain+0xbc>)
 80103b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103ba:	62fb      	str	r3, [r7, #44]	; 0x2c

	data[12] = Pid[D_WALL_PID].KP;
 80103bc:	4b13      	ldr	r3, [pc, #76]	; (801040c <Copy_Gain+0xbc>)
 80103be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c0:	633b      	str	r3, [r7, #48]	; 0x30
	data[13] = Pid[D_WALL_PID].KI;
 80103c2:	4b12      	ldr	r3, [pc, #72]	; (801040c <Copy_Gain+0xbc>)
 80103c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103c6:	637b      	str	r3, [r7, #52]	; 0x34
	data[14] = Pid[D_WALL_PID].KD;
 80103c8:	4b10      	ldr	r3, [pc, #64]	; (801040c <Copy_Gain+0xbc>)
 80103ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103cc:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0; i < 15; i++)
 80103ce:	2300      	movs	r3, #0
 80103d0:	643b      	str	r3, [r7, #64]	; 0x40
 80103d2:	e012      	b.n	80103fa <Copy_Gain+0xaa>
	{

		FLASH_Write_Word_F( address, data[i]);
 80103d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80103dc:	4413      	add	r3, r2
 80103de:	3b48      	subs	r3, #72	; 0x48
 80103e0:	edd3 7a00 	vldr	s15, [r3]
 80103e4:	eeb0 0a67 	vmov.f32	s0, s15
 80103e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80103ea:	f7ff fafd 	bl	800f9e8 <FLASH_Write_Word_F>
		address += 0x04;
 80103ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103f0:	3304      	adds	r3, #4
 80103f2:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=0; i < 15; i++)
 80103f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103f6:	3301      	adds	r3, #1
 80103f8:	643b      	str	r3, [r7, #64]	; 0x40
 80103fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103fc:	2b0e      	cmp	r3, #14
 80103fe:	dde9      	ble.n	80103d4 <Copy_Gain+0x84>

	//printf("\r\nはなしきこか？\r\n");
	//起動時にCopy_Gainを実行する
	//Flash_clear_sector9();

}
 8010400:	bf00      	nop
 8010402:	3748      	adds	r7, #72	; 0x48
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	0801b33c 	.word	0x0801b33c
 801040c:	20000318 	.word	0x20000318

08010410 <Load_Gain>:
void Load_Gain()
{
 8010410:	b590      	push	{r4, r7, lr}
 8010412:	b095      	sub	sp, #84	; 0x54
 8010414:	af00      	add	r7, sp, #0
	//非数の数数えて、全部そうだったらそのまま
	//そうでなければ読みだした値は全てゲインとして代入
	//Flash_load_sector9();

	//読み出し
	uint32_t address = start_adress_sector9;//こっちか
 8010416:	4b59      	ldr	r3, [pc, #356]	; (801057c <Load_Gain+0x16c>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	64fb      	str	r3, [r7, #76]	; 0x4c
	float data[16]={0};//1個多く要素を作る。
 801041c:	463b      	mov	r3, r7
 801041e:	2240      	movs	r2, #64	; 0x40
 8010420:	2100      	movs	r1, #0
 8010422:	4618      	mov	r0, r3
 8010424:	f005 fe1b 	bl	801605e <memset>

	//チェック
	int judge;
	uint8_t j=0;
 8010428:	2300      	movs	r3, #0
 801042a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 801042e:	2300      	movs	r3, #0
 8010430:	647b      	str	r3, [r7, #68]	; 0x44
 8010432:	e038      	b.n	80104a6 <Load_Gain+0x96>
	{
		FLASH_Read_Word_F( address, &data[i]);//かこれ
 8010434:	463a      	mov	r2, r7
 8010436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	4413      	add	r3, r2
 801043c:	4619      	mov	r1, r3
 801043e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010440:	f7ff fafc 	bl	800fa3c <FLASH_Read_Word_F>
		address += 0x04;
 8010444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010446:	3304      	adds	r3, #4
 8010448:	64fb      	str	r3, [r7, #76]	; 0x4c
		printf("%d, %f\r\n",i,data[i]);
 801044a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010452:	4413      	add	r3, r2
 8010454:	3b50      	subs	r3, #80	; 0x50
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4618      	mov	r0, r3
 801045a:	f7f7 ffad 	bl	80083b8 <__aeabi_f2d>
 801045e:	4603      	mov	r3, r0
 8010460:	460c      	mov	r4, r1
 8010462:	461a      	mov	r2, r3
 8010464:	4623      	mov	r3, r4
 8010466:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010468:	4845      	ldr	r0, [pc, #276]	; (8010580 <Load_Gain+0x170>)
 801046a:	f006 fc3f 	bl	8016cec <iprintf>
		//work_ram[]がデフォ値なら、そのまま
		judge = isnanf(data[i]);
 801046e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010476:	4413      	add	r3, r2
 8010478:	3b50      	subs	r3, #80	; 0x50
 801047a:	edd3 7a00 	vldr	s15, [r3]
 801047e:	eef4 7a67 	vcmp.f32	s15, s15
 8010482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010486:	bf6c      	ite	vs
 8010488:	2301      	movvs	r3, #1
 801048a:	2300      	movvc	r3, #0
 801048c:	b2db      	uxtb	r3, r3
 801048e:	643b      	str	r3, [r7, #64]	; 0x40
		if(judge != 0)
 8010490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010492:	2b00      	cmp	r3, #0
 8010494:	d004      	beq.n	80104a0 <Load_Gain+0x90>
		{
			j++;
 8010496:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801049a:	3301      	adds	r3, #1
 801049c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i=0; i < 15; i++)
 80104a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104a2:	3301      	adds	r3, #1
 80104a4:	647b      	str	r3, [r7, #68]	; 0x44
 80104a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104a8:	2b0e      	cmp	r3, #14
 80104aa:	ddc3      	ble.n	8010434 <Load_Gain+0x24>


	}
	//起動時、flashに0がたくさん。そのときは何もしない
	//数字が入っていれば、それを入れる
	printf("%d\r\n",j);
 80104ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80104b0:	4619      	mov	r1, r3
 80104b2:	4834      	ldr	r0, [pc, #208]	; (8010584 <Load_Gain+0x174>)
 80104b4:	f006 fc1a 	bl	8016cec <iprintf>
		if(j == 15)//全てnan0であれば
 80104b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80104bc:	2b0f      	cmp	r3, #15
 80104be:	d059      	beq.n	8010574 <Load_Gain+0x164>
//			Pid[A_VELO_PID].KD = data[5];
//
//			Pid[L_WALL_PID].KP = data[6];
//			Pid[L_WALL_PID].KI = data[7];
//			Pid[L_WALL_PID].KD = data[8];
			PIDSetGain(L_VELO_PID, data[0], data[1], data[2]);
 80104c0:	edd7 7a00 	vldr	s15, [r7]
 80104c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80104c8:	edd7 6a02 	vldr	s13, [r7, #8]
 80104cc:	eeb0 1a66 	vmov.f32	s2, s13
 80104d0:	eef0 0a47 	vmov.f32	s1, s14
 80104d4:	eeb0 0a67 	vmov.f32	s0, s15
 80104d8:	2004      	movs	r0, #4
 80104da:	f000 fa29 	bl	8010930 <PIDSetGain>
			PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
 80104de:	edd7 7a00 	vldr	s15, [r7]
 80104e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80104e6:	edd7 6a02 	vldr	s13, [r7, #8]
 80104ea:	eeb0 1a66 	vmov.f32	s2, s13
 80104ee:	eef0 0a47 	vmov.f32	s1, s14
 80104f2:	eeb0 0a67 	vmov.f32	s0, s15
 80104f6:	2005      	movs	r0, #5
 80104f8:	f000 fa1a 	bl	8010930 <PIDSetGain>
			//PIDSetGain(R_VELO_PID, data[0], data[1], data[2]);
			//PIDSetGain(B_VELO, 1.1941, 33.5232, 0.0059922);
			//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
			PIDSetGain(A_VELO_PID, data[3], data[4], data[5]);//28.6379,340.0855,0.21289);//17.4394, 321.233, 0.12492);
 80104fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8010500:	ed97 7a04 	vldr	s14, [r7, #16]
 8010504:	edd7 6a05 	vldr	s13, [r7, #20]
 8010508:	eeb0 1a66 	vmov.f32	s2, s13
 801050c:	eef0 0a47 	vmov.f32	s1, s14
 8010510:	eeb0 0a67 	vmov.f32	s0, s15
 8010514:	2000      	movs	r0, #0
 8010516:	f000 fa0b 	bl	8010930 <PIDSetGain>
			//Iは積分=偏差を消す。ゲインが大きいと偏差が縮まるが、収束がはやくなるがオーバーシュートが起きる。
			//Dは微分= 振動を抑えられるぶん収束が遅くなる。
			//PIDSetGain(D_WALL_PID, data[0], data[1], data[2]);
			PIDSetGain(L_WALL_PID, data[6], data[7], data[8]);
 801051a:	edd7 7a06 	vldr	s15, [r7, #24]
 801051e:	ed97 7a07 	vldr	s14, [r7, #28]
 8010522:	edd7 6a08 	vldr	s13, [r7, #32]
 8010526:	eeb0 1a66 	vmov.f32	s2, s13
 801052a:	eef0 0a47 	vmov.f32	s1, s14
 801052e:	eeb0 0a67 	vmov.f32	s0, s15
 8010532:	2002      	movs	r0, #2
 8010534:	f000 f9fc 	bl	8010930 <PIDSetGain>
			PIDSetGain(R_WALL_PID, data[9], data[10], data[11]);
 8010538:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801053c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010540:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8010544:	eeb0 1a66 	vmov.f32	s2, s13
 8010548:	eef0 0a47 	vmov.f32	s1, s14
 801054c:	eeb0 0a67 	vmov.f32	s0, s15
 8010550:	2003      	movs	r0, #3
 8010552:	f000 f9ed 	bl	8010930 <PIDSetGain>
			PIDSetGain(D_WALL_PID, data[12], data[13], data[14]);
 8010556:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801055a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801055e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8010562:	eeb0 1a66 	vmov.f32	s2, s13
 8010566:	eef0 0a47 	vmov.f32	s1, s14
 801056a:	eeb0 0a67 	vmov.f32	s0, s15
 801056e:	2001      	movs	r0, #1
 8010570:	f000 f9de 	bl	8010930 <PIDSetGain>
			//PIDSetGain(R_WALL_PID, data[0], data[1], data[2]);
		}

}
 8010574:	bf00      	nop
 8010576:	3754      	adds	r7, #84	; 0x54
 8010578:	46bd      	mov	sp, r7
 801057a:	bd90      	pop	{r4, r7, pc}
 801057c:	0801b33c 	.word	0x0801b33c
 8010580:	0801b1c0 	.word	0x0801b1c0
 8010584:	0801b1cc 	.word	0x0801b1cc

08010588 <Change_Gain>:
void Change_Gain()
{
 8010588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801058c:	b086      	sub	sp, #24
 801058e:	af04      	add	r7, sp, #16
	//他の処理や割り込みを停止

	HAL_TIM_Base_Stop_IT(&htim1);
 8010590:	48af      	ldr	r0, [pc, #700]	; (8010850 <Change_Gain+0x2c8>)
 8010592:	f003 fc48 	bl	8013e26 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 8010596:	48af      	ldr	r0, [pc, #700]	; (8010854 <Change_Gain+0x2cc>)
 8010598:	f003 fc45 	bl	8013e26 <HAL_TIM_Base_Stop_IT>
	Motor_PWM_Stop();
 801059c:	f7ff fd34 	bl	8010008 <Motor_PWM_Stop>
	EmitterOFF();
 80105a0:	f7ff fc4c 	bl	800fe3c <EmitterOFF>
//	ADCStart();
//	printf("start\r\n");
	//ADCStop();//ここ
	HAL_Delay(200);
 80105a4:	20c8      	movs	r0, #200	; 0xc8
 80105a6:	f000 fd33 	bl	8011010 <HAL_Delay>

	//ゲイン調整する
	char change_mode='0';
 80105aa:	2330      	movs	r3, #48	; 0x30
 80105ac:	71fb      	strb	r3, [r7, #7]
	char pid = '0';
 80105ae:	2330      	movs	r3, #48	; 0x30
 80105b0:	71bb      	strb	r3, [r7, #6]
	char nl;

	while(1)
	{
		//float a = Pid[2].KP;
		printf("現在のPIDゲイン\r\n");
 80105b2:	48a9      	ldr	r0, [pc, #676]	; (8010858 <Change_Gain+0x2d0>)
 80105b4:	f006 fc0e 	bl	8016dd4 <puts>
		printf("[1] 車輪左右 : %f, %f, %f\r\n",Pid[L_VELO_PID].KP, Pid[L_VELO_PID].KI, Pid[L_VELO_PID].KD);
 80105b8:	4ba8      	ldr	r3, [pc, #672]	; (801085c <Change_Gain+0x2d4>)
 80105ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80105be:	4618      	mov	r0, r3
 80105c0:	f7f7 fefa 	bl	80083b8 <__aeabi_f2d>
 80105c4:	4680      	mov	r8, r0
 80105c6:	4689      	mov	r9, r1
 80105c8:	4ba4      	ldr	r3, [pc, #656]	; (801085c <Change_Gain+0x2d4>)
 80105ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7f7 fef2 	bl	80083b8 <__aeabi_f2d>
 80105d4:	4604      	mov	r4, r0
 80105d6:	460d      	mov	r5, r1
 80105d8:	4ba0      	ldr	r3, [pc, #640]	; (801085c <Change_Gain+0x2d4>)
 80105da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80105de:	4618      	mov	r0, r3
 80105e0:	f7f7 feea 	bl	80083b8 <__aeabi_f2d>
 80105e4:	4602      	mov	r2, r0
 80105e6:	460b      	mov	r3, r1
 80105e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80105ec:	e9cd 4500 	strd	r4, r5, [sp]
 80105f0:	4642      	mov	r2, r8
 80105f2:	464b      	mov	r3, r9
 80105f4:	489a      	ldr	r0, [pc, #616]	; (8010860 <Change_Gain+0x2d8>)
 80105f6:	f006 fb79 	bl	8016cec <iprintf>
		printf("[2] 角度 : %f, %f, %f\r\n", Pid[A_VELO_PID].KP, Pid[A_VELO_PID].KI, Pid[A_VELO_PID].KD);	//角度の偏差から角速度を出力し、車輪左右の制御に渡す
 80105fa:	4b98      	ldr	r3, [pc, #608]	; (801085c <Change_Gain+0x2d4>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4618      	mov	r0, r3
 8010600:	f7f7 feda 	bl	80083b8 <__aeabi_f2d>
 8010604:	4680      	mov	r8, r0
 8010606:	4689      	mov	r9, r1
 8010608:	4b94      	ldr	r3, [pc, #592]	; (801085c <Change_Gain+0x2d4>)
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	4618      	mov	r0, r3
 801060e:	f7f7 fed3 	bl	80083b8 <__aeabi_f2d>
 8010612:	4604      	mov	r4, r0
 8010614:	460d      	mov	r5, r1
 8010616:	4b91      	ldr	r3, [pc, #580]	; (801085c <Change_Gain+0x2d4>)
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	4618      	mov	r0, r3
 801061c:	f7f7 fecc 	bl	80083b8 <__aeabi_f2d>
 8010620:	4602      	mov	r2, r0
 8010622:	460b      	mov	r3, r1
 8010624:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010628:	e9cd 4500 	strd	r4, r5, [sp]
 801062c:	4642      	mov	r2, r8
 801062e:	464b      	mov	r3, r9
 8010630:	488c      	ldr	r0, [pc, #560]	; (8010864 <Change_Gain+0x2dc>)
 8010632:	f006 fb5b 	bl	8016cec <iprintf>
		printf("[3] 左壁 : %f, %f, %f\r\n", Pid[L_WALL_PID].KP, Pid[L_WALL_PID].KI, Pid[L_WALL_PID].KD);
 8010636:	4b89      	ldr	r3, [pc, #548]	; (801085c <Change_Gain+0x2d4>)
 8010638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801063a:	4618      	mov	r0, r3
 801063c:	f7f7 febc 	bl	80083b8 <__aeabi_f2d>
 8010640:	4680      	mov	r8, r0
 8010642:	4689      	mov	r9, r1
 8010644:	4b85      	ldr	r3, [pc, #532]	; (801085c <Change_Gain+0x2d4>)
 8010646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010648:	4618      	mov	r0, r3
 801064a:	f7f7 feb5 	bl	80083b8 <__aeabi_f2d>
 801064e:	4604      	mov	r4, r0
 8010650:	460d      	mov	r5, r1
 8010652:	4b82      	ldr	r3, [pc, #520]	; (801085c <Change_Gain+0x2d4>)
 8010654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010656:	4618      	mov	r0, r3
 8010658:	f7f7 feae 	bl	80083b8 <__aeabi_f2d>
 801065c:	4602      	mov	r2, r0
 801065e:	460b      	mov	r3, r1
 8010660:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010664:	e9cd 4500 	strd	r4, r5, [sp]
 8010668:	4642      	mov	r2, r8
 801066a:	464b      	mov	r3, r9
 801066c:	487e      	ldr	r0, [pc, #504]	; (8010868 <Change_Gain+0x2e0>)
 801066e:	f006 fb3d 	bl	8016cec <iprintf>
		printf("[4] 右壁 : %f, %f, %f\r\n", Pid[R_WALL_PID].KP, Pid[R_WALL_PID].KI, Pid[R_WALL_PID].KD);
 8010672:	4b7a      	ldr	r3, [pc, #488]	; (801085c <Change_Gain+0x2d4>)
 8010674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010678:	4618      	mov	r0, r3
 801067a:	f7f7 fe9d 	bl	80083b8 <__aeabi_f2d>
 801067e:	4680      	mov	r8, r0
 8010680:	4689      	mov	r9, r1
 8010682:	4b76      	ldr	r3, [pc, #472]	; (801085c <Change_Gain+0x2d4>)
 8010684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010688:	4618      	mov	r0, r3
 801068a:	f7f7 fe95 	bl	80083b8 <__aeabi_f2d>
 801068e:	4604      	mov	r4, r0
 8010690:	460d      	mov	r5, r1
 8010692:	4b72      	ldr	r3, [pc, #456]	; (801085c <Change_Gain+0x2d4>)
 8010694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010698:	4618      	mov	r0, r3
 801069a:	f7f7 fe8d 	bl	80083b8 <__aeabi_f2d>
 801069e:	4602      	mov	r2, r0
 80106a0:	460b      	mov	r3, r1
 80106a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80106a6:	e9cd 4500 	strd	r4, r5, [sp]
 80106aa:	4642      	mov	r2, r8
 80106ac:	464b      	mov	r3, r9
 80106ae:	486f      	ldr	r0, [pc, #444]	; (801086c <Change_Gain+0x2e4>)
 80106b0:	f006 fb1c 	bl	8016cec <iprintf>
		printf("[5] 両壁 : %f, %f, %f\r\n", Pid[D_WALL_PID].KP, Pid[D_WALL_PID].KI, Pid[D_WALL_PID].KD);
 80106b4:	4b69      	ldr	r3, [pc, #420]	; (801085c <Change_Gain+0x2d4>)
 80106b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7f7 fe7d 	bl	80083b8 <__aeabi_f2d>
 80106be:	4680      	mov	r8, r0
 80106c0:	4689      	mov	r9, r1
 80106c2:	4b66      	ldr	r3, [pc, #408]	; (801085c <Change_Gain+0x2d4>)
 80106c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7f7 fe76 	bl	80083b8 <__aeabi_f2d>
 80106cc:	4604      	mov	r4, r0
 80106ce:	460d      	mov	r5, r1
 80106d0:	4b62      	ldr	r3, [pc, #392]	; (801085c <Change_Gain+0x2d4>)
 80106d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7f7 fe6f 	bl	80083b8 <__aeabi_f2d>
 80106da:	4602      	mov	r2, r0
 80106dc:	460b      	mov	r3, r1
 80106de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80106e2:	e9cd 4500 	strd	r4, r5, [sp]
 80106e6:	4642      	mov	r2, r8
 80106e8:	464b      	mov	r3, r9
 80106ea:	4861      	ldr	r0, [pc, #388]	; (8010870 <Change_Gain+0x2e8>)
 80106ec:	f006 fafe 	bl	8016cec <iprintf>

		Buffering();
 80106f0:	f7ff fe1a 	bl	8010328 <Buffering>
		printf("モード(0で終了) :"); scanf("%c",&change_mode);
 80106f4:	485f      	ldr	r0, [pc, #380]	; (8010874 <Change_Gain+0x2ec>)
 80106f6:	f006 faf9 	bl	8016cec <iprintf>
 80106fa:	1dfb      	adds	r3, r7, #7
 80106fc:	4619      	mov	r1, r3
 80106fe:	485e      	ldr	r0, [pc, #376]	; (8010878 <Change_Gain+0x2f0>)
 8010700:	f006 fb70 	bl	8016de4 <iscanf>
		if(change_mode == '0')
 8010704:	79fb      	ldrb	r3, [r7, #7]
 8010706:	2b30      	cmp	r3, #48	; 0x30
 8010708:	f000 80f4 	beq.w	80108f4 <Change_Gain+0x36c>
			break;
		}
		else
		{

			Buffering();
 801070c:	f7ff fe0c 	bl	8010328 <Buffering>
			printf("\r\nP , I or D ? : "); scanf("%c",&pid);
 8010710:	485a      	ldr	r0, [pc, #360]	; (801087c <Change_Gain+0x2f4>)
 8010712:	f006 faeb 	bl	8016cec <iprintf>
 8010716:	1dbb      	adds	r3, r7, #6
 8010718:	4619      	mov	r1, r3
 801071a:	4857      	ldr	r0, [pc, #348]	; (8010878 <Change_Gain+0x2f0>)
 801071c:	f006 fb62 	bl	8016de4 <iscanf>
			printf("\r\n%c、 %c を選択しました\r\n",change_mode,pid);
 8010720:	79fb      	ldrb	r3, [r7, #7]
 8010722:	4619      	mov	r1, r3
 8010724:	79bb      	ldrb	r3, [r7, #6]
 8010726:	461a      	mov	r2, r3
 8010728:	4855      	ldr	r0, [pc, #340]	; (8010880 <Change_Gain+0x2f8>)
 801072a:	f006 fadf 	bl	8016cec <iprintf>

			Buffering();
 801072e:	f7ff fdfb 	bl	8010328 <Buffering>
			printf("\r\n値を入力 : ");
 8010732:	4854      	ldr	r0, [pc, #336]	; (8010884 <Change_Gain+0x2fc>)
 8010734:	f006 fada 	bl	8016cec <iprintf>

			switch(change_mode)
 8010738:	79fb      	ldrb	r3, [r7, #7]
 801073a:	3b31      	subs	r3, #49	; 0x31
 801073c:	2b04      	cmp	r3, #4
 801073e:	f200 80c1 	bhi.w	80108c4 <Change_Gain+0x33c>
 8010742:	a201      	add	r2, pc, #4	; (adr r2, 8010748 <Change_Gain+0x1c0>)
 8010744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010748:	0801075d 	.word	0x0801075d
 801074c:	0801078f 	.word	0x0801078f
 8010750:	080107c1 	.word	0x080107c1
 8010754:	080107f1 	.word	0x080107f1
 8010758:	08010821 	.word	0x08010821
			{
			case '1'://並進速度制御ゲイン
				//printf("p , i or d ?");scanf("%c",pid);

				if(pid == 'p')
 801075c:	79bb      	ldrb	r3, [r7, #6]
 801075e:	2b70      	cmp	r3, #112	; 0x70
 8010760:	d104      	bne.n	801076c <Change_Gain+0x1e4>
				{
					scanf("%f",&Pid[L_VELO_PID].KP);
 8010762:	4949      	ldr	r1, [pc, #292]	; (8010888 <Change_Gain+0x300>)
 8010764:	4849      	ldr	r0, [pc, #292]	; (801088c <Change_Gain+0x304>)
 8010766:	f006 fb3d 	bl	8016de4 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_VELO_PID].KD);
				}
				break;
 801076a:	e0af      	b.n	80108cc <Change_Gain+0x344>
				else if(pid == 'i')
 801076c:	79bb      	ldrb	r3, [r7, #6]
 801076e:	2b69      	cmp	r3, #105	; 0x69
 8010770:	d104      	bne.n	801077c <Change_Gain+0x1f4>
					scanf("%f",&Pid[L_VELO_PID].KI);
 8010772:	4947      	ldr	r1, [pc, #284]	; (8010890 <Change_Gain+0x308>)
 8010774:	4845      	ldr	r0, [pc, #276]	; (801088c <Change_Gain+0x304>)
 8010776:	f006 fb35 	bl	8016de4 <iscanf>
				break;
 801077a:	e0a7      	b.n	80108cc <Change_Gain+0x344>
				else if(pid == 'd')
 801077c:	79bb      	ldrb	r3, [r7, #6]
 801077e:	2b64      	cmp	r3, #100	; 0x64
 8010780:	f040 80a4 	bne.w	80108cc <Change_Gain+0x344>
					scanf("%f",&Pid[L_VELO_PID].KD);
 8010784:	4943      	ldr	r1, [pc, #268]	; (8010894 <Change_Gain+0x30c>)
 8010786:	4841      	ldr	r0, [pc, #260]	; (801088c <Change_Gain+0x304>)
 8010788:	f006 fb2c 	bl	8016de4 <iscanf>
				break;
 801078c:	e09e      	b.n	80108cc <Change_Gain+0x344>

			case '2'://回転角速度制御ゲイン
				if(pid == 'p')
 801078e:	79bb      	ldrb	r3, [r7, #6]
 8010790:	2b70      	cmp	r3, #112	; 0x70
 8010792:	d104      	bne.n	801079e <Change_Gain+0x216>
				{
					scanf("%f",&Pid[A_VELO_PID].KP);
 8010794:	4931      	ldr	r1, [pc, #196]	; (801085c <Change_Gain+0x2d4>)
 8010796:	483d      	ldr	r0, [pc, #244]	; (801088c <Change_Gain+0x304>)
 8010798:	f006 fb24 	bl	8016de4 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[A_VELO_PID].KD);
				}
				break;
 801079c:	e098      	b.n	80108d0 <Change_Gain+0x348>
				else if(pid == 'i')
 801079e:	79bb      	ldrb	r3, [r7, #6]
 80107a0:	2b69      	cmp	r3, #105	; 0x69
 80107a2:	d104      	bne.n	80107ae <Change_Gain+0x226>
					scanf("%f",&Pid[A_VELO_PID].KI);
 80107a4:	493c      	ldr	r1, [pc, #240]	; (8010898 <Change_Gain+0x310>)
 80107a6:	4839      	ldr	r0, [pc, #228]	; (801088c <Change_Gain+0x304>)
 80107a8:	f006 fb1c 	bl	8016de4 <iscanf>
				break;
 80107ac:	e090      	b.n	80108d0 <Change_Gain+0x348>
				else if(pid == 'd')
 80107ae:	79bb      	ldrb	r3, [r7, #6]
 80107b0:	2b64      	cmp	r3, #100	; 0x64
 80107b2:	f040 808d 	bne.w	80108d0 <Change_Gain+0x348>
					scanf("%f",&Pid[A_VELO_PID].KD);
 80107b6:	4939      	ldr	r1, [pc, #228]	; (801089c <Change_Gain+0x314>)
 80107b8:	4834      	ldr	r0, [pc, #208]	; (801088c <Change_Gain+0x304>)
 80107ba:	f006 fb13 	bl	8016de4 <iscanf>
				break;
 80107be:	e087      	b.n	80108d0 <Change_Gain+0x348>

			case '3'://壁制御ゲイン
				if(pid == 'p')
 80107c0:	79bb      	ldrb	r3, [r7, #6]
 80107c2:	2b70      	cmp	r3, #112	; 0x70
 80107c4:	d104      	bne.n	80107d0 <Change_Gain+0x248>
				{
					scanf("%f",&Pid[L_WALL_PID].KP);
 80107c6:	4936      	ldr	r1, [pc, #216]	; (80108a0 <Change_Gain+0x318>)
 80107c8:	4830      	ldr	r0, [pc, #192]	; (801088c <Change_Gain+0x304>)
 80107ca:	f006 fb0b 	bl	8016de4 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[L_WALL_PID].KD);
				}
				break;
 80107ce:	e081      	b.n	80108d4 <Change_Gain+0x34c>
				else if(pid == 'i')
 80107d0:	79bb      	ldrb	r3, [r7, #6]
 80107d2:	2b69      	cmp	r3, #105	; 0x69
 80107d4:	d104      	bne.n	80107e0 <Change_Gain+0x258>
					scanf("%f",&Pid[L_WALL_PID].KI);
 80107d6:	4933      	ldr	r1, [pc, #204]	; (80108a4 <Change_Gain+0x31c>)
 80107d8:	482c      	ldr	r0, [pc, #176]	; (801088c <Change_Gain+0x304>)
 80107da:	f006 fb03 	bl	8016de4 <iscanf>
				break;
 80107de:	e079      	b.n	80108d4 <Change_Gain+0x34c>
				else if(pid == 'd')
 80107e0:	79bb      	ldrb	r3, [r7, #6]
 80107e2:	2b64      	cmp	r3, #100	; 0x64
 80107e4:	d176      	bne.n	80108d4 <Change_Gain+0x34c>
					scanf("%f",&Pid[L_WALL_PID].KD);
 80107e6:	4930      	ldr	r1, [pc, #192]	; (80108a8 <Change_Gain+0x320>)
 80107e8:	4828      	ldr	r0, [pc, #160]	; (801088c <Change_Gain+0x304>)
 80107ea:	f006 fafb 	bl	8016de4 <iscanf>
				break;
 80107ee:	e071      	b.n	80108d4 <Change_Gain+0x34c>
			case '4'://壁制御ゲイン
				if(pid == 'p')
 80107f0:	79bb      	ldrb	r3, [r7, #6]
 80107f2:	2b70      	cmp	r3, #112	; 0x70
 80107f4:	d104      	bne.n	8010800 <Change_Gain+0x278>
				{
					scanf("%f",&Pid[R_WALL_PID].KP);
 80107f6:	492d      	ldr	r1, [pc, #180]	; (80108ac <Change_Gain+0x324>)
 80107f8:	4824      	ldr	r0, [pc, #144]	; (801088c <Change_Gain+0x304>)
 80107fa:	f006 faf3 	bl	8016de4 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[R_WALL_PID].KD);
				}
				break;
 80107fe:	e06b      	b.n	80108d8 <Change_Gain+0x350>
				else if(pid == 'i')
 8010800:	79bb      	ldrb	r3, [r7, #6]
 8010802:	2b69      	cmp	r3, #105	; 0x69
 8010804:	d104      	bne.n	8010810 <Change_Gain+0x288>
					scanf("%f",&Pid[R_WALL_PID].KI);
 8010806:	492a      	ldr	r1, [pc, #168]	; (80108b0 <Change_Gain+0x328>)
 8010808:	4820      	ldr	r0, [pc, #128]	; (801088c <Change_Gain+0x304>)
 801080a:	f006 faeb 	bl	8016de4 <iscanf>
				break;
 801080e:	e063      	b.n	80108d8 <Change_Gain+0x350>
				else if(pid == 'd')
 8010810:	79bb      	ldrb	r3, [r7, #6]
 8010812:	2b64      	cmp	r3, #100	; 0x64
 8010814:	d160      	bne.n	80108d8 <Change_Gain+0x350>
					scanf("%f",&Pid[R_WALL_PID].KD);
 8010816:	4927      	ldr	r1, [pc, #156]	; (80108b4 <Change_Gain+0x32c>)
 8010818:	481c      	ldr	r0, [pc, #112]	; (801088c <Change_Gain+0x304>)
 801081a:	f006 fae3 	bl	8016de4 <iscanf>
				break;
 801081e:	e05b      	b.n	80108d8 <Change_Gain+0x350>
			case '5'://壁制御ゲイン
				if(pid == 'p')
 8010820:	79bb      	ldrb	r3, [r7, #6]
 8010822:	2b70      	cmp	r3, #112	; 0x70
 8010824:	d104      	bne.n	8010830 <Change_Gain+0x2a8>
				{
					scanf("%f",&Pid[D_WALL_PID].KP);
 8010826:	4924      	ldr	r1, [pc, #144]	; (80108b8 <Change_Gain+0x330>)
 8010828:	4818      	ldr	r0, [pc, #96]	; (801088c <Change_Gain+0x304>)
 801082a:	f006 fadb 	bl	8016de4 <iscanf>
				}
				else if(pid == 'd')
				{
					scanf("%f",&Pid[D_WALL_PID].KD);
				}
				break;
 801082e:	e055      	b.n	80108dc <Change_Gain+0x354>
				else if(pid == 'i')
 8010830:	79bb      	ldrb	r3, [r7, #6]
 8010832:	2b69      	cmp	r3, #105	; 0x69
 8010834:	d104      	bne.n	8010840 <Change_Gain+0x2b8>
					scanf("%f",&Pid[D_WALL_PID].KI);
 8010836:	4921      	ldr	r1, [pc, #132]	; (80108bc <Change_Gain+0x334>)
 8010838:	4814      	ldr	r0, [pc, #80]	; (801088c <Change_Gain+0x304>)
 801083a:	f006 fad3 	bl	8016de4 <iscanf>
				break;
 801083e:	e04d      	b.n	80108dc <Change_Gain+0x354>
				else if(pid == 'd')
 8010840:	79bb      	ldrb	r3, [r7, #6]
 8010842:	2b64      	cmp	r3, #100	; 0x64
 8010844:	d14a      	bne.n	80108dc <Change_Gain+0x354>
					scanf("%f",&Pid[D_WALL_PID].KD);
 8010846:	491e      	ldr	r1, [pc, #120]	; (80108c0 <Change_Gain+0x338>)
 8010848:	4810      	ldr	r0, [pc, #64]	; (801088c <Change_Gain+0x304>)
 801084a:	f006 facb 	bl	8016de4 <iscanf>
				break;
 801084e:	e045      	b.n	80108dc <Change_Gain+0x354>
 8010850:	200009dc 	.word	0x200009dc
 8010854:	20000794 	.word	0x20000794
 8010858:	0801b1d4 	.word	0x0801b1d4
 801085c:	20000318 	.word	0x20000318
 8010860:	0801b1ec 	.word	0x0801b1ec
 8010864:	0801b20c 	.word	0x0801b20c
 8010868:	0801b228 	.word	0x0801b228
 801086c:	0801b244 	.word	0x0801b244
 8010870:	0801b260 	.word	0x0801b260
 8010874:	0801b27c 	.word	0x0801b27c
 8010878:	0801b294 	.word	0x0801b294
 801087c:	0801b298 	.word	0x0801b298
 8010880:	0801b2ac 	.word	0x0801b2ac
 8010884:	0801b2d0 	.word	0x0801b2d0
 8010888:	200003c8 	.word	0x200003c8
 801088c:	0801b2e4 	.word	0x0801b2e4
 8010890:	200003cc 	.word	0x200003cc
 8010894:	200003d0 	.word	0x200003d0
 8010898:	2000031c 	.word	0x2000031c
 801089c:	20000320 	.word	0x20000320
 80108a0:	20000370 	.word	0x20000370
 80108a4:	20000374 	.word	0x20000374
 80108a8:	20000378 	.word	0x20000378
 80108ac:	2000039c 	.word	0x2000039c
 80108b0:	200003a0 	.word	0x200003a0
 80108b4:	200003a4 	.word	0x200003a4
 80108b8:	20000344 	.word	0x20000344
 80108bc:	20000348 	.word	0x20000348
 80108c0:	2000034c 	.word	0x2000034c
			default :
				printf("該当しません\r\n");
 80108c4:	4816      	ldr	r0, [pc, #88]	; (8010920 <Change_Gain+0x398>)
 80108c6:	f006 fa85 	bl	8016dd4 <puts>
				break;
 80108ca:	e008      	b.n	80108de <Change_Gain+0x356>
				break;
 80108cc:	bf00      	nop
 80108ce:	e006      	b.n	80108de <Change_Gain+0x356>
				break;
 80108d0:	bf00      	nop
 80108d2:	e004      	b.n	80108de <Change_Gain+0x356>
				break;
 80108d4:	bf00      	nop
 80108d6:	e002      	b.n	80108de <Change_Gain+0x356>
				break;
 80108d8:	bf00      	nop
 80108da:	e000      	b.n	80108de <Change_Gain+0x356>
				break;
 80108dc:	bf00      	nop
			}
			Buffering();
 80108de:	f7ff fd23 	bl	8010328 <Buffering>
			scanf("%c",&nl);
 80108e2:	1d7b      	adds	r3, r7, #5
 80108e4:	4619      	mov	r1, r3
 80108e6:	480f      	ldr	r0, [pc, #60]	; (8010924 <Change_Gain+0x39c>)
 80108e8:	f006 fa7c 	bl	8016de4 <iscanf>
			printf("\r\n");
 80108ec:	480e      	ldr	r0, [pc, #56]	; (8010928 <Change_Gain+0x3a0>)
 80108ee:	f006 fa71 	bl	8016dd4 <puts>
		printf("現在のPIDゲイン\r\n");
 80108f2:	e65e      	b.n	80105b2 <Change_Gain+0x2a>
			break;
 80108f4:	bf00      	nop
		}

	}
	printf("\r\n完了\r\n");
 80108f6:	480d      	ldr	r0, [pc, #52]	; (801092c <Change_Gain+0x3a4>)
 80108f8:	f006 fa6c 	bl	8016dd4 <puts>

	//値の変更は終了

	//ROMに保存したい
	//work_ram[5120] 以降から使える。(これより前はマップデータ等)切りのいい5200から使おう
	Flash_clear_sector9();
 80108fc:	f7ff f8f1 	bl	800fae2 <Flash_clear_sector9>
	//printf("\r\nどや\r\n");
	Copy_Gain();
 8010900:	f7ff fd26 	bl	8010350 <Copy_Gain>
	//printf("\r\nいいね\r\n");

	ChangeLED(7);
 8010904:	2007      	movs	r0, #7
 8010906:	f7ff faa7 	bl	800fe58 <ChangeLED>
	HAL_Delay(200);
 801090a:	20c8      	movs	r0, #200	; 0xc8
 801090c:	f000 fb80 	bl	8011010 <HAL_Delay>
	ChangeLED(0);
 8010910:	2000      	movs	r0, #0
 8010912:	f7ff faa1 	bl	800fe58 <ChangeLED>
	HAL_TIM_Base_Start_IT(&htim8);
	Motor_PWM_Start();
	Emitter_ON();
	ADC_Start();
#endif
}
 8010916:	bf00      	nop
 8010918:	3708      	adds	r7, #8
 801091a:	46bd      	mov	sp, r7
 801091c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010920:	0801b2e8 	.word	0x0801b2e8
 8010924:	0801b294 	.word	0x0801b294
 8010928:	0801b2fc 	.word	0x0801b2fc
 801092c:	0801b300 	.word	0x0801b300

08010930 <PIDSetGain>:
//		elast[i] = 0;
//		//PidFlag[i] = 0;
//	}
//}
void PIDSetGain(int n, float kp, float ki, float kd)	//同じデータ構造体をシステム同定で使いそう。パラメータ調整とか
{
 8010930:	b480      	push	{r7}
 8010932:	b085      	sub	sp, #20
 8010934:	af00      	add	r7, sp, #0
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	ed87 0a02 	vstr	s0, [r7, #8]
 801093c:	edc7 0a01 	vstr	s1, [r7, #4]
 8010940:	ed87 1a00 	vstr	s2, [r7]
	Pid[n].KP = kp;
 8010944:	4a0f      	ldr	r2, [pc, #60]	; (8010984 <PIDSetGain+0x54>)
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	212c      	movs	r1, #44	; 0x2c
 801094a:	fb01 f303 	mul.w	r3, r1, r3
 801094e:	4413      	add	r3, r2
 8010950:	68ba      	ldr	r2, [r7, #8]
 8010952:	601a      	str	r2, [r3, #0]
	Pid[n].KI = ki;
 8010954:	4a0b      	ldr	r2, [pc, #44]	; (8010984 <PIDSetGain+0x54>)
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	212c      	movs	r1, #44	; 0x2c
 801095a:	fb01 f303 	mul.w	r3, r1, r3
 801095e:	4413      	add	r3, r2
 8010960:	3304      	adds	r3, #4
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	601a      	str	r2, [r3, #0]
	Pid[n].KD = kd;
 8010966:	4a07      	ldr	r2, [pc, #28]	; (8010984 <PIDSetGain+0x54>)
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	212c      	movs	r1, #44	; 0x2c
 801096c:	fb01 f303 	mul.w	r3, r1, r3
 8010970:	4413      	add	r3, r2
 8010972:	3308      	adds	r3, #8
 8010974:	683a      	ldr	r2, [r7, #0]
 8010976:	601a      	str	r2, [r3, #0]

}
 8010978:	bf00      	nop
 801097a:	3714      	adds	r7, #20
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr
 8010984:	20000318 	.word	0x20000318

08010988 <PIDChangeFlag>:
//	ei[n] = 0;
//	elast[n] = 0;
//}

void PIDChangeFlag(int n, int on_or_off)
{
 8010988:	b480      	push	{r7}
 801098a:	b083      	sub	sp, #12
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	6039      	str	r1, [r7, #0]
	Pid[n].flag = on_or_off;
 8010992:	4a07      	ldr	r2, [pc, #28]	; (80109b0 <PIDChangeFlag+0x28>)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	212c      	movs	r1, #44	; 0x2c
 8010998:	fb01 f303 	mul.w	r3, r1, r3
 801099c:	4413      	add	r3, r2
 801099e:	3328      	adds	r3, #40	; 0x28
 80109a0:	683a      	ldr	r2, [r7, #0]
 80109a2:	601a      	str	r2, [r3, #0]
}
 80109a4:	bf00      	nop
 80109a6:	370c      	adds	r7, #12
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr
 80109b0:	20000318 	.word	0x20000318

080109b4 <PIDReset>:
int PIDGetFlag(int n)
{
	return Pid[n].flag;
}
void PIDReset(int n)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
	//速度に限らずやればよいのでは
	Pid[n].e = 0;
 80109bc:	4a1b      	ldr	r2, [pc, #108]	; (8010a2c <PIDReset+0x78>)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	212c      	movs	r1, #44	; 0x2c
 80109c2:	fb01 f303 	mul.w	r3, r1, r3
 80109c6:	4413      	add	r3, r2
 80109c8:	330c      	adds	r3, #12
 80109ca:	f04f 0200 	mov.w	r2, #0
 80109ce:	601a      	str	r2, [r3, #0]
	Pid[n].ei = 0;
 80109d0:	4a16      	ldr	r2, [pc, #88]	; (8010a2c <PIDReset+0x78>)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	212c      	movs	r1, #44	; 0x2c
 80109d6:	fb01 f303 	mul.w	r3, r1, r3
 80109da:	4413      	add	r3, r2
 80109dc:	3310      	adds	r3, #16
 80109de:	f04f 0200 	mov.w	r2, #0
 80109e2:	601a      	str	r2, [r3, #0]
	Pid[n].ed = 0;
 80109e4:	4a11      	ldr	r2, [pc, #68]	; (8010a2c <PIDReset+0x78>)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	212c      	movs	r1, #44	; 0x2c
 80109ea:	fb01 f303 	mul.w	r3, r1, r3
 80109ee:	4413      	add	r3, r2
 80109f0:	3314      	adds	r3, #20
 80109f2:	f04f 0200 	mov.w	r2, #0
 80109f6:	601a      	str	r2, [r3, #0]
	Pid[n].elast = 0;
 80109f8:	4a0c      	ldr	r2, [pc, #48]	; (8010a2c <PIDReset+0x78>)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	212c      	movs	r1, #44	; 0x2c
 80109fe:	fb01 f303 	mul.w	r3, r1, r3
 8010a02:	4413      	add	r3, r2
 8010a04:	3318      	adds	r3, #24
 8010a06:	f04f 0200 	mov.w	r2, #0
 8010a0a:	601a      	str	r2, [r3, #0]
	Pid[n].out = 0;
 8010a0c:	4a07      	ldr	r2, [pc, #28]	; (8010a2c <PIDReset+0x78>)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	212c      	movs	r1, #44	; 0x2c
 8010a12:	fb01 f303 	mul.w	r3, r1, r3
 8010a16:	4413      	add	r3, r2
 8010a18:	3324      	adds	r3, #36	; 0x24
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	601a      	str	r2, [r3, #0]
}
 8010a1e:	bf00      	nop
 8010a20:	370c      	adds	r7, #12
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop
 8010a2c:	20000318 	.word	0x20000318

08010a30 <PIDControl>:
//{
//	Pid[n].target = target;
//	Pid[n].current = current;
//}
inline int PIDControl(int n, float target, float current)
{
 8010a30:	b590      	push	{r4, r7, lr}
 8010a32:	b085      	sub	sp, #20
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	ed87 0a02 	vstr	s0, [r7, #8]
 8010a3c:	edc7 0a01 	vstr	s1, [r7, #4]
	//PIDInput( n, target, current);
	//PIDCalculate( n, T );
	//出力の前に全部0にする処理をフラグで
	if(Pid[n].flag == 0)
 8010a40:	4a90      	ldr	r2, [pc, #576]	; (8010c84 <PIDControl+0x254>)
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	212c      	movs	r1, #44	; 0x2c
 8010a46:	fb01 f303 	mul.w	r3, r1, r3
 8010a4a:	4413      	add	r3, r2
 8010a4c:	3328      	adds	r3, #40	; 0x28
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d132      	bne.n	8010aba <PIDControl+0x8a>
	{
		Pid[n].e = 0.0f;
 8010a54:	4a8b      	ldr	r2, [pc, #556]	; (8010c84 <PIDControl+0x254>)
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	212c      	movs	r1, #44	; 0x2c
 8010a5a:	fb01 f303 	mul.w	r3, r1, r3
 8010a5e:	4413      	add	r3, r2
 8010a60:	330c      	adds	r3, #12
 8010a62:	f04f 0200 	mov.w	r2, #0
 8010a66:	601a      	str	r2, [r3, #0]
		Pid[n].ei = 0.0f;
 8010a68:	4a86      	ldr	r2, [pc, #536]	; (8010c84 <PIDControl+0x254>)
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	212c      	movs	r1, #44	; 0x2c
 8010a6e:	fb01 f303 	mul.w	r3, r1, r3
 8010a72:	4413      	add	r3, r2
 8010a74:	3310      	adds	r3, #16
 8010a76:	f04f 0200 	mov.w	r2, #0
 8010a7a:	601a      	str	r2, [r3, #0]
		Pid[n].ed = 0.0f;
 8010a7c:	4a81      	ldr	r2, [pc, #516]	; (8010c84 <PIDControl+0x254>)
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	212c      	movs	r1, #44	; 0x2c
 8010a82:	fb01 f303 	mul.w	r3, r1, r3
 8010a86:	4413      	add	r3, r2
 8010a88:	3314      	adds	r3, #20
 8010a8a:	f04f 0200 	mov.w	r2, #0
 8010a8e:	601a      	str	r2, [r3, #0]
		Pid[n].elast = 0.0f;
 8010a90:	4a7c      	ldr	r2, [pc, #496]	; (8010c84 <PIDControl+0x254>)
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	212c      	movs	r1, #44	; 0x2c
 8010a96:	fb01 f303 	mul.w	r3, r1, r3
 8010a9a:	4413      	add	r3, r2
 8010a9c:	3318      	adds	r3, #24
 8010a9e:	f04f 0200 	mov.w	r2, #0
 8010aa2:	601a      	str	r2, [r3, #0]
		Pid[n].out = 0;
 8010aa4:	4a77      	ldr	r2, [pc, #476]	; (8010c84 <PIDControl+0x254>)
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	212c      	movs	r1, #44	; 0x2c
 8010aaa:	fb01 f303 	mul.w	r3, r1, r3
 8010aae:	4413      	add	r3, r2
 8010ab0:	3324      	adds	r3, #36	; 0x24
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	601a      	str	r2, [r3, #0]
		return 0;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	e0df      	b.n	8010c7a <PIDControl+0x24a>
		//PIDReset(n);
	}
	else
	{
		Pid[n].target = target;
 8010aba:	4a72      	ldr	r2, [pc, #456]	; (8010c84 <PIDControl+0x254>)
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	212c      	movs	r1, #44	; 0x2c
 8010ac0:	fb01 f303 	mul.w	r3, r1, r3
 8010ac4:	4413      	add	r3, r2
 8010ac6:	3320      	adds	r3, #32
 8010ac8:	68ba      	ldr	r2, [r7, #8]
 8010aca:	601a      	str	r2, [r3, #0]
		Pid[n].current = current;
 8010acc:	4a6d      	ldr	r2, [pc, #436]	; (8010c84 <PIDControl+0x254>)
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	212c      	movs	r1, #44	; 0x2c
 8010ad2:	fb01 f303 	mul.w	r3, r1, r3
 8010ad6:	4413      	add	r3, r2
 8010ad8:	331c      	adds	r3, #28
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	601a      	str	r2, [r3, #0]

		Pid[n].e = Pid[n].target - Pid[n].current;
 8010ade:	4a69      	ldr	r2, [pc, #420]	; (8010c84 <PIDControl+0x254>)
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	212c      	movs	r1, #44	; 0x2c
 8010ae4:	fb01 f303 	mul.w	r3, r1, r3
 8010ae8:	4413      	add	r3, r2
 8010aea:	3320      	adds	r3, #32
 8010aec:	ed93 7a00 	vldr	s14, [r3]
 8010af0:	4a64      	ldr	r2, [pc, #400]	; (8010c84 <PIDControl+0x254>)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	212c      	movs	r1, #44	; 0x2c
 8010af6:	fb01 f303 	mul.w	r3, r1, r3
 8010afa:	4413      	add	r3, r2
 8010afc:	331c      	adds	r3, #28
 8010afe:	edd3 7a00 	vldr	s15, [r3]
 8010b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b06:	4a5f      	ldr	r2, [pc, #380]	; (8010c84 <PIDControl+0x254>)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	212c      	movs	r1, #44	; 0x2c
 8010b0c:	fb01 f303 	mul.w	r3, r1, r3
 8010b10:	4413      	add	r3, r2
 8010b12:	330c      	adds	r3, #12
 8010b14:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ei += Pid[n].e * pid_T;
 8010b18:	4a5a      	ldr	r2, [pc, #360]	; (8010c84 <PIDControl+0x254>)
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	212c      	movs	r1, #44	; 0x2c
 8010b1e:	fb01 f303 	mul.w	r3, r1, r3
 8010b22:	4413      	add	r3, r2
 8010b24:	3310      	adds	r3, #16
 8010b26:	ed93 7a00 	vldr	s14, [r3]
 8010b2a:	4a56      	ldr	r2, [pc, #344]	; (8010c84 <PIDControl+0x254>)
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	212c      	movs	r1, #44	; 0x2c
 8010b30:	fb01 f303 	mul.w	r3, r1, r3
 8010b34:	4413      	add	r3, r2
 8010b36:	330c      	adds	r3, #12
 8010b38:	edd3 7a00 	vldr	s15, [r3]
 8010b3c:	eddf 6a52 	vldr	s13, [pc, #328]	; 8010c88 <PIDControl+0x258>
 8010b40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b48:	4a4e      	ldr	r2, [pc, #312]	; (8010c84 <PIDControl+0x254>)
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	212c      	movs	r1, #44	; 0x2c
 8010b4e:	fb01 f303 	mul.w	r3, r1, r3
 8010b52:	4413      	add	r3, r2
 8010b54:	3310      	adds	r3, #16
 8010b56:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].ed = ( Pid[n].e - Pid[n].elast ) * pid_DT;
 8010b5a:	4a4a      	ldr	r2, [pc, #296]	; (8010c84 <PIDControl+0x254>)
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	212c      	movs	r1, #44	; 0x2c
 8010b60:	fb01 f303 	mul.w	r3, r1, r3
 8010b64:	4413      	add	r3, r2
 8010b66:	330c      	adds	r3, #12
 8010b68:	ed93 7a00 	vldr	s14, [r3]
 8010b6c:	4a45      	ldr	r2, [pc, #276]	; (8010c84 <PIDControl+0x254>)
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	212c      	movs	r1, #44	; 0x2c
 8010b72:	fb01 f303 	mul.w	r3, r1, r3
 8010b76:	4413      	add	r3, r2
 8010b78:	3318      	adds	r3, #24
 8010b7a:	edd3 7a00 	vldr	s15, [r3]
 8010b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b82:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8010c8c <PIDControl+0x25c>
 8010b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010b8a:	4a3e      	ldr	r2, [pc, #248]	; (8010c84 <PIDControl+0x254>)
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	212c      	movs	r1, #44	; 0x2c
 8010b90:	fb01 f303 	mul.w	r3, r1, r3
 8010b94:	4413      	add	r3, r2
 8010b96:	3314      	adds	r3, #20
 8010b98:	edc3 7a00 	vstr	s15, [r3]
		Pid[n].elast = Pid[n].e;
 8010b9c:	4a39      	ldr	r2, [pc, #228]	; (8010c84 <PIDControl+0x254>)
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	212c      	movs	r1, #44	; 0x2c
 8010ba2:	fb01 f303 	mul.w	r3, r1, r3
 8010ba6:	4413      	add	r3, r2
 8010ba8:	330c      	adds	r3, #12
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	4935      	ldr	r1, [pc, #212]	; (8010c84 <PIDControl+0x254>)
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	202c      	movs	r0, #44	; 0x2c
 8010bb2:	fb00 f303 	mul.w	r3, r0, r3
 8010bb6:	440b      	add	r3, r1
 8010bb8:	3318      	adds	r3, #24
 8010bba:	601a      	str	r2, [r3, #0]
		Pid[n].out = round(Pid[n].KP*Pid[n].e + Pid[n].KI*Pid[n].ei + Pid[n].KD*Pid[n].ed);
 8010bbc:	4a31      	ldr	r2, [pc, #196]	; (8010c84 <PIDControl+0x254>)
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	212c      	movs	r1, #44	; 0x2c
 8010bc2:	fb01 f303 	mul.w	r3, r1, r3
 8010bc6:	4413      	add	r3, r2
 8010bc8:	ed93 7a00 	vldr	s14, [r3]
 8010bcc:	4a2d      	ldr	r2, [pc, #180]	; (8010c84 <PIDControl+0x254>)
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	212c      	movs	r1, #44	; 0x2c
 8010bd2:	fb01 f303 	mul.w	r3, r1, r3
 8010bd6:	4413      	add	r3, r2
 8010bd8:	330c      	adds	r3, #12
 8010bda:	edd3 7a00 	vldr	s15, [r3]
 8010bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010be2:	4a28      	ldr	r2, [pc, #160]	; (8010c84 <PIDControl+0x254>)
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	212c      	movs	r1, #44	; 0x2c
 8010be8:	fb01 f303 	mul.w	r3, r1, r3
 8010bec:	4413      	add	r3, r2
 8010bee:	3304      	adds	r3, #4
 8010bf0:	edd3 6a00 	vldr	s13, [r3]
 8010bf4:	4a23      	ldr	r2, [pc, #140]	; (8010c84 <PIDControl+0x254>)
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	212c      	movs	r1, #44	; 0x2c
 8010bfa:	fb01 f303 	mul.w	r3, r1, r3
 8010bfe:	4413      	add	r3, r2
 8010c00:	3310      	adds	r3, #16
 8010c02:	edd3 7a00 	vldr	s15, [r3]
 8010c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c0e:	4a1d      	ldr	r2, [pc, #116]	; (8010c84 <PIDControl+0x254>)
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	212c      	movs	r1, #44	; 0x2c
 8010c14:	fb01 f303 	mul.w	r3, r1, r3
 8010c18:	4413      	add	r3, r2
 8010c1a:	3308      	adds	r3, #8
 8010c1c:	edd3 6a00 	vldr	s13, [r3]
 8010c20:	4a18      	ldr	r2, [pc, #96]	; (8010c84 <PIDControl+0x254>)
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	212c      	movs	r1, #44	; 0x2c
 8010c26:	fb01 f303 	mul.w	r3, r1, r3
 8010c2a:	4413      	add	r3, r2
 8010c2c:	3314      	adds	r3, #20
 8010c2e:	edd3 7a00 	vldr	s15, [r3]
 8010c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c3a:	ee17 0a90 	vmov	r0, s15
 8010c3e:	f7f7 fbbb 	bl	80083b8 <__aeabi_f2d>
 8010c42:	4603      	mov	r3, r0
 8010c44:	460c      	mov	r4, r1
 8010c46:	ec44 3b10 	vmov	d0, r3, r4
 8010c4a:	f005 f989 	bl	8015f60 <round>
 8010c4e:	ec54 3b10 	vmov	r3, r4, d0
 8010c52:	4618      	mov	r0, r3
 8010c54:	4621      	mov	r1, r4
 8010c56:	f7f7 feb7 	bl	80089c8 <__aeabi_d2iz>
 8010c5a:	4a0a      	ldr	r2, [pc, #40]	; (8010c84 <PIDControl+0x254>)
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	212c      	movs	r1, #44	; 0x2c
 8010c60:	fb01 f303 	mul.w	r3, r1, r3
 8010c64:	4413      	add	r3, r2
 8010c66:	3324      	adds	r3, #36	; 0x24
 8010c68:	6018      	str	r0, [r3, #0]
		return Pid[n].out;
 8010c6a:	4a06      	ldr	r2, [pc, #24]	; (8010c84 <PIDControl+0x254>)
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	212c      	movs	r1, #44	; 0x2c
 8010c70:	fb01 f303 	mul.w	r3, r1, r3
 8010c74:	4413      	add	r3, r2
 8010c76:	3324      	adds	r3, #36	; 0x24
 8010c78:	681b      	ldr	r3, [r3, #0]
	}
	//*output = Pid[n].out;
	//PIDOutput( n, output );

}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3714      	adds	r7, #20
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd90      	pop	{r4, r7, pc}
 8010c82:	bf00      	nop
 8010c84:	20000318 	.word	0x20000318
 8010c88:	3a83126f 	.word	0x3a83126f
 8010c8c:	4479ffff 	.word	0x4479ffff

08010c90 <HAL_GPIO_EXTI_Callback>:

#include <stdio.h>
#include <math.h>
//中間モジュール。
int gpio_callback_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	4603      	mov	r3, r0
 8010c98:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12)
 8010c9a:	88fb      	ldrh	r3, [r7, #6]
 8010c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ca0:	d10b      	bne.n	8010cba <HAL_GPIO_EXTI_Callback+0x2a>
	{
	  gpio_callback_count++;
 8010ca2:	4b09      	ldr	r3, [pc, #36]	; (8010cc8 <HAL_GPIO_EXTI_Callback+0x38>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	4a07      	ldr	r2, [pc, #28]	; (8010cc8 <HAL_GPIO_EXTI_Callback+0x38>)
 8010caa:	6013      	str	r3, [r2, #0]
	  //ChangeLED(gpio_callback_count);

	  if(gpio_callback_count > 1) gpio_callback_count=0;
 8010cac:	4b06      	ldr	r3, [pc, #24]	; (8010cc8 <HAL_GPIO_EXTI_Callback+0x38>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	dd02      	ble.n	8010cba <HAL_GPIO_EXTI_Callback+0x2a>
 8010cb4:	4b04      	ldr	r3, [pc, #16]	; (8010cc8 <HAL_GPIO_EXTI_Callback+0x38>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	601a      	str	r2, [r3, #0]
	}
}
 8010cba:	bf00      	nop
 8010cbc:	370c      	adds	r7, #12
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc4:	4770      	bx	lr
 8010cc6:	bf00      	nop
 8010cc8:	200004d0 	.word	0x200004d0

08010ccc <Signal>:
//エンコーダはモード選択時には直で取得しちゃってよいので引数にしない。while中で取得。
//float Photo[4];

//led_driver
void Signal(int8_t mode)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b084      	sub	sp, #16
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i < 5; i++)
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	60fb      	str	r3, [r7, #12]
 8010cda:	e010      	b.n	8010cfe <Signal+0x32>
	{
		ChangeLED(mode);
 8010cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7ff f8b9 	bl	800fe58 <ChangeLED>
		HAL_Delay(100);
 8010ce6:	2064      	movs	r0, #100	; 0x64
 8010ce8:	f000 f992 	bl	8011010 <HAL_Delay>
		ChangeLED(0);
 8010cec:	2000      	movs	r0, #0
 8010cee:	f7ff f8b3 	bl	800fe58 <ChangeLED>
		HAL_Delay(100);
 8010cf2:	2064      	movs	r0, #100	; 0x64
 8010cf4:	f000 f98c 	bl	8011010 <HAL_Delay>
	for(int i=0; i < 5; i++)
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	60fb      	str	r3, [r7, #12]
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	2b04      	cmp	r3, #4
 8010d02:	ddeb      	ble.n	8010cdc <Signal+0x10>
	}
}
 8010d04:	bf00      	nop
 8010d06:	3710      	adds	r7, #16
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <BatteryCheck>:

//battery_adc
void BatteryCheck(int adc_data)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b086      	sub	sp, #24
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]

	//このあたりのハードウェア情報を一括で書いてしまう。
	float battery_voltage;//adc1[2] グローバルな値はどこか一か所で呼び出す
	battery_voltage = ADCToBatteryVoltage( adc_data, V_SPLIT_NUM, PIN_V_MAX ,ADC_RESOLUTION );
 8010d14:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8010d64 <BatteryCheck+0x58>
 8010d18:	eddf 0a13 	vldr	s1, [pc, #76]	; 8010d68 <BatteryCheck+0x5c>
 8010d1c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f7ff fa67 	bl	80101f4 <ADCToBatteryVoltage>
 8010d26:	ed87 0a05 	vstr	s0, [r7, #20]

	int led_pattern_num = IntegerPower(2, LED_NUM); //led
 8010d2a:	2103      	movs	r1, #3
 8010d2c:	2002      	movs	r0, #2
 8010d2e:	f7ff fa8b 	bl	8010248 <IntegerPower>
 8010d32:	6138      	str	r0, [r7, #16]

	int battery_level = GetBatteryLevel( battery_voltage, BATTERY_MIN, BATTERY_MAX, led_pattern_num);
 8010d34:	6938      	ldr	r0, [r7, #16]
 8010d36:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8010d6c <BatteryCheck+0x60>
 8010d3a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8010d70 <BatteryCheck+0x64>
 8010d3e:	ed97 0a05 	vldr	s0, [r7, #20]
 8010d42:	f7ff fa9e 	bl	8010282 <GetBatteryLevel>
 8010d46:	60f8      	str	r0, [r7, #12]

	printf("%d\r\n", battery_level);
 8010d48:	68f9      	ldr	r1, [r7, #12]
 8010d4a:	480a      	ldr	r0, [pc, #40]	; (8010d74 <BatteryCheck+0x68>)
 8010d4c:	f005 ffce 	bl	8016cec <iprintf>
	Signal( battery_level );
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	b25b      	sxtb	r3, r3
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7ff ffb9 	bl	8010ccc <Signal>
}
 8010d5a:	bf00      	nop
 8010d5c:	3718      	adds	r7, #24
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop
 8010d64:	45800000 	.word	0x45800000
 8010d68:	40533333 	.word	0x40533333
 8010d6c:	41066666 	.word	0x41066666
 8010d70:	40e66666 	.word	0x40e66666
 8010d74:	0801b30c 	.word	0x0801b30c

08010d78 <PhotoSwitch>:

//ここ書いたら大事な処理を書き始められる
//enc, emitter,receiver
//壁センサのデータをどうやってもってくるか。構造体にしておいてアローでアクセスするか、別の処理を考えるか。スイッチを使うか。中でフラグ作るか、それならそのままセンサの値を突っ込んだ方がいい。
void PhotoSwitch()
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2, 2);
 8010d7c:	2202      	movs	r2, #2
 8010d7e:	490c      	ldr	r1, [pc, #48]	; (8010db0 <PhotoSwitch+0x38>)
 8010d80:	480c      	ldr	r0, [pc, #48]	; (8010db4 <PhotoSwitch+0x3c>)
 8010d82:	f000 f9ab 	bl	80110dc <HAL_ADC_Start_DMA>
	//tim8のduty比を下げて電流消費を削減
	HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1);
 8010d86:	2100      	movs	r1, #0
 8010d88:	480b      	ldr	r0, [pc, #44]	; (8010db8 <PhotoSwitch+0x40>)
 8010d8a:	f004 f9c4 	bl	8015116 <HAL_TIMEx_OCN_Start_IT>

	while(adc2[1] < 200)
 8010d8e:	bf00      	nop
 8010d90:	4b07      	ldr	r3, [pc, #28]	; (8010db0 <PhotoSwitch+0x38>)
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	2bc7      	cmp	r3, #199	; 0xc7
 8010d96:	d9fb      	bls.n	8010d90 <PhotoSwitch+0x18>
	{

	}
	HAL_ADC_Stop_DMA(&hadc2);
 8010d98:	4806      	ldr	r0, [pc, #24]	; (8010db4 <PhotoSwitch+0x3c>)
 8010d9a:	f000 fa91 	bl	80112c0 <HAL_ADC_Stop_DMA>
	HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1);
 8010d9e:	2100      	movs	r1, #0
 8010da0:	4805      	ldr	r0, [pc, #20]	; (8010db8 <PhotoSwitch+0x40>)
 8010da2:	f004 fa0d 	bl	80151c0 <HAL_TIMEx_OCN_Stop_IT>
	Signal( 7 );
 8010da6:	2007      	movs	r0, #7
 8010da8:	f7ff ff90 	bl	8010ccc <Signal>
}
 8010dac:	bf00      	nop
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	200002c8 	.word	0x200002c8
 8010db4:	20000814 	.word	0x20000814
 8010db8:	20000794 	.word	0x20000794

08010dbc <ModeSelect>:

void ModeSelect(int8_t min, int8_t max, int8_t *pMode)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	603a      	str	r2, [r7, #0]
 8010dc6:	71fb      	strb	r3, [r7, #7]
 8010dc8:	460b      	mov	r3, r1
 8010dca:	71bb      	strb	r3, [r7, #6]
	//メインフローで呼び出す
	//0-7番で設定
	//起動時に呼ぶ

	//エンコーダ開始。初期値セット込み
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 8010dcc:	2100      	movs	r1, #0
 8010dce:	483d      	ldr	r0, [pc, #244]	; (8010ec4 <ModeSelect+0x108>)
 8010dd0:	f003 fb06 	bl	80143e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 8010dd4:	2104      	movs	r1, #4
 8010dd6:	483b      	ldr	r0, [pc, #236]	; (8010ec4 <ModeSelect+0x108>)
 8010dd8:	f003 fb02 	bl	80143e0 <HAL_TIM_Encoder_Start>
	//while中で選択
	*pMode=min;
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	79fa      	ldrb	r2, [r7, #7]
 8010de0:	701a      	strb	r2, [r3, #0]

	//壁センサデータをどうもってくるか。adcの生値を入れ、均して使う。関数呼び出し時の値

	TIM3->CNT = INITIAL_PULSE;
 8010de2:	4b39      	ldr	r3, [pc, #228]	; (8010ec8 <ModeSelect+0x10c>)
 8010de4:	f247 522f 	movw	r2, #29999	; 0x752f
 8010de8:	625a      	str	r2, [r3, #36]	; 0x24
	gpio_callback_count = 0;
 8010dea:	4b38      	ldr	r3, [pc, #224]	; (8010ecc <ModeSelect+0x110>)
 8010dec:	2200      	movs	r2, #0
 8010dee:	601a      	str	r2, [r3, #0]
	int ENC3_LEFT;
	while(gpio_callback_count == 0/**/) //前向きの
 8010df0:	e055      	b.n	8010e9e <ModeSelect+0xe2>
	{
		//printf("Photo[FR] : %f, ENC3 : %d\r\n", Photo[FR], ENC3_LEFT);
		//センサデータを一個取得して戻り値で返す関数を使う。
		  ENC3_LEFT = TIM3 -> CNT;	//このアローがすでにグローバル的な値なので、センサデータもグローバルでいい。
 8010df2:	4b35      	ldr	r3, [pc, #212]	; (8010ec8 <ModeSelect+0x10c>)
 8010df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df6:	60fb      	str	r3, [r7, #12]

		  if(INITIAL_PULSE + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= ENC3_LEFT )
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	ee07 3a90 	vmov	s15, r3
 8010dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e02:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010ed0 <ModeSelect+0x114>
 8010e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0e:	db1c      	blt.n	8010e4a <ModeSelect+0x8e>
		  {
		  	  *pMode += 1;
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	f993 3000 	ldrsb.w	r3, [r3]
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	3301      	adds	r3, #1
 8010e1a:	b2db      	uxtb	r3, r3
 8010e1c:	b25a      	sxtb	r2, r3
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode > max)
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	f993 3000 	ldrsb.w	r3, [r3]
 8010e28:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	da02      	bge.n	8010e36 <ModeSelect+0x7a>
		  	  {
		  		  *pMode = min;
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	79fa      	ldrb	r2, [r7, #7]
 8010e34:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	f993 3000 	ldrsb.w	r3, [r3]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7ff f80b 	bl	800fe58 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 8010e42:	4b21      	ldr	r3, [pc, #132]	; (8010ec8 <ModeSelect+0x10c>)
 8010e44:	f247 522f 	movw	r2, #29999	; 0x752f
 8010e48:	625a      	str	r2, [r3, #36]	; 0x24

		  }
		  if(INITIAL_PULSE - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= ENC3_LEFT)
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	ee07 3a90 	vmov	s15, r3
 8010e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e54:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8010ed4 <ModeSelect+0x118>
 8010e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e60:	d900      	bls.n	8010e64 <ModeSelect+0xa8>
 8010e62:	e01c      	b.n	8010e9e <ModeSelect+0xe2>
		  {
		  	  *pMode -= 1;
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	f993 3000 	ldrsb.w	r3, [r3]
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	3b01      	subs	r3, #1
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	b25a      	sxtb	r2, r3
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	701a      	strb	r2, [r3, #0]
		  	  if(*pMode < min)
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	f993 3000 	ldrsb.w	r3, [r3]
 8010e7c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	dd02      	ble.n	8010e8a <ModeSelect+0xce>
		  	  {
		  	  		  *pMode = max;
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	79ba      	ldrb	r2, [r7, #6]
 8010e88:	701a      	strb	r2, [r3, #0]
		  	  }
		  	  ChangeLED(*pMode);
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	f993 3000 	ldrsb.w	r3, [r3]
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7fe ffe1 	bl	800fe58 <ChangeLED>
		  	  TIM3->CNT = INITIAL_PULSE;
 8010e96:	4b0c      	ldr	r3, [pc, #48]	; (8010ec8 <ModeSelect+0x10c>)
 8010e98:	f247 522f 	movw	r2, #29999	; 0x752f
 8010e9c:	625a      	str	r2, [r3, #36]	; 0x24
	while(gpio_callback_count == 0/**/) //前向きの
 8010e9e:	4b0b      	ldr	r3, [pc, #44]	; (8010ecc <ModeSelect+0x110>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d0a5      	beq.n	8010df2 <ModeSelect+0x36>
		  }
	}
	gpio_callback_count = 0;
 8010ea6:	4b09      	ldr	r3, [pc, #36]	; (8010ecc <ModeSelect+0x110>)
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_1);
 8010eac:	2100      	movs	r1, #0
 8010eae:	4805      	ldr	r0, [pc, #20]	; (8010ec4 <ModeSelect+0x108>)
 8010eb0:	f003 facd 	bl	801444e <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_2);
 8010eb4:	2104      	movs	r1, #4
 8010eb6:	4803      	ldr	r0, [pc, #12]	; (8010ec4 <ModeSelect+0x108>)
 8010eb8:	f003 fac9 	bl	801444e <HAL_TIM_Encoder_Stop>
}
 8010ebc:	bf00      	nop
 8010ebe:	3710      	adds	r7, #16
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	2000085c 	.word	0x2000085c
 8010ec8:	40000400 	.word	0x40000400
 8010ecc:	200004d0 	.word	0x200004d0
 8010ed0:	47352f00 	.word	0x47352f00
 8010ed4:	4654bc00 	.word	0x4654bc00

08010ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010f10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010edc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010ede:	e003      	b.n	8010ee8 <LoopCopyDataInit>

08010ee0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010ee0:	4b0c      	ldr	r3, [pc, #48]	; (8010f14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010ee2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010ee4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010ee6:	3104      	adds	r1, #4

08010ee8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010ee8:	480b      	ldr	r0, [pc, #44]	; (8010f18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010eea:	4b0c      	ldr	r3, [pc, #48]	; (8010f1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010eec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010eee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010ef0:	d3f6      	bcc.n	8010ee0 <CopyDataInit>
  ldr  r2, =_sbss
 8010ef2:	4a0b      	ldr	r2, [pc, #44]	; (8010f20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010ef4:	e002      	b.n	8010efc <LoopFillZerobss>

08010ef6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010ef6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010ef8:	f842 3b04 	str.w	r3, [r2], #4

08010efc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010efc:	4b09      	ldr	r3, [pc, #36]	; (8010f24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010efe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010f00:	d3f9      	bcc.n	8010ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010f02:	f7fe fbe5 	bl	800f6d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010f06:	f005 f87b 	bl	8016000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010f0a:	f7fd fa77 	bl	800e3fc <main>
  bx  lr    
 8010f0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010f10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010f14:	0801b694 	.word	0x0801b694
  ldr  r0, =_sdata
 8010f18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010f1c:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8010f20:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8010f24:	20000aa4 	.word	0x20000aa4

08010f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010f28:	e7fe      	b.n	8010f28 <ADC_IRQHandler>
	...

08010f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010f30:	4b0e      	ldr	r3, [pc, #56]	; (8010f6c <HAL_Init+0x40>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	4a0d      	ldr	r2, [pc, #52]	; (8010f6c <HAL_Init+0x40>)
 8010f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010f3c:	4b0b      	ldr	r3, [pc, #44]	; (8010f6c <HAL_Init+0x40>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4a0a      	ldr	r2, [pc, #40]	; (8010f6c <HAL_Init+0x40>)
 8010f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010f48:	4b08      	ldr	r3, [pc, #32]	; (8010f6c <HAL_Init+0x40>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	4a07      	ldr	r2, [pc, #28]	; (8010f6c <HAL_Init+0x40>)
 8010f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010f54:	2003      	movs	r0, #3
 8010f56:	f000 fd8b 	bl	8011a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010f5a:	2000      	movs	r0, #0
 8010f5c:	f000 f808 	bl	8010f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010f60:	f7fe f81a 	bl	800ef98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010f64:	2300      	movs	r3, #0
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	bd80      	pop	{r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	40023c00 	.word	0x40023c00

08010f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010f78:	4b12      	ldr	r3, [pc, #72]	; (8010fc4 <HAL_InitTick+0x54>)
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	4b12      	ldr	r3, [pc, #72]	; (8010fc8 <HAL_InitTick+0x58>)
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	4619      	mov	r1, r3
 8010f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f000 fda3 	bl	8011ada <HAL_SYSTICK_Config>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d001      	beq.n	8010f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e00e      	b.n	8010fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2b0f      	cmp	r3, #15
 8010fa2:	d80a      	bhi.n	8010fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	6879      	ldr	r1, [r7, #4]
 8010fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fac:	f000 fd6b 	bl	8011a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010fb0:	4a06      	ldr	r2, [pc, #24]	; (8010fcc <HAL_InitTick+0x5c>)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	e000      	b.n	8010fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010fba:	2301      	movs	r3, #1
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3708      	adds	r7, #8
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}
 8010fc4:	20000020 	.word	0x20000020
 8010fc8:	20000028 	.word	0x20000028
 8010fcc:	20000024 	.word	0x20000024

08010fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010fd4:	4b06      	ldr	r3, [pc, #24]	; (8010ff0 <HAL_IncTick+0x20>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	461a      	mov	r2, r3
 8010fda:	4b06      	ldr	r3, [pc, #24]	; (8010ff4 <HAL_IncTick+0x24>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	4413      	add	r3, r2
 8010fe0:	4a04      	ldr	r2, [pc, #16]	; (8010ff4 <HAL_IncTick+0x24>)
 8010fe2:	6013      	str	r3, [r2, #0]
}
 8010fe4:	bf00      	nop
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr
 8010fee:	bf00      	nop
 8010ff0:	20000028 	.word	0x20000028
 8010ff4:	20000a7c 	.word	0x20000a7c

08010ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8010ffc:	4b03      	ldr	r3, [pc, #12]	; (801100c <HAL_GetTick+0x14>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
}
 8011000:	4618      	mov	r0, r3
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
 801100a:	bf00      	nop
 801100c:	20000a7c 	.word	0x20000a7c

08011010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b084      	sub	sp, #16
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011018:	f7ff ffee 	bl	8010ff8 <HAL_GetTick>
 801101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011028:	d005      	beq.n	8011036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801102a:	4b09      	ldr	r3, [pc, #36]	; (8011050 <HAL_Delay+0x40>)
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	461a      	mov	r2, r3
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	4413      	add	r3, r2
 8011034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011036:	bf00      	nop
 8011038:	f7ff ffde 	bl	8010ff8 <HAL_GetTick>
 801103c:	4602      	mov	r2, r0
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	1ad3      	subs	r3, r2, r3
 8011042:	68fa      	ldr	r2, [r7, #12]
 8011044:	429a      	cmp	r2, r3
 8011046:	d8f7      	bhi.n	8011038 <HAL_Delay+0x28>
  {
  }
}
 8011048:	bf00      	nop
 801104a:	3710      	adds	r7, #16
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}
 8011050:	20000028 	.word	0x20000028

08011054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801105c:	2300      	movs	r3, #0
 801105e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d101      	bne.n	801106a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8011066:	2301      	movs	r3, #1
 8011068:	e033      	b.n	80110d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801106e:	2b00      	cmp	r3, #0
 8011070:	d109      	bne.n	8011086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f7fd ffb8 	bl	800efe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2200      	movs	r2, #0
 801107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2200      	movs	r2, #0
 8011082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801108a:	f003 0310 	and.w	r3, r3, #16
 801108e:	2b00      	cmp	r3, #0
 8011090:	d118      	bne.n	80110c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011096:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801109a:	f023 0302 	bic.w	r3, r3, #2
 801109e:	f043 0202 	orr.w	r2, r3, #2
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f000 fa94 	bl	80115d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2200      	movs	r2, #0
 80110b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110b6:	f023 0303 	bic.w	r3, r3, #3
 80110ba:	f043 0201 	orr.w	r2, r3, #1
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	641a      	str	r2, [r3, #64]	; 0x40
 80110c2:	e001      	b.n	80110c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80110c4:	2301      	movs	r3, #1
 80110c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2200      	movs	r2, #0
 80110cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80110d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
	...

080110dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b086      	sub	sp, #24
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80110e8:	2300      	movs	r3, #0
 80110ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	d101      	bne.n	80110fa <HAL_ADC_Start_DMA+0x1e>
 80110f6:	2302      	movs	r3, #2
 80110f8:	e0cc      	b.n	8011294 <HAL_ADC_Start_DMA+0x1b8>
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	2201      	movs	r2, #1
 80110fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	689b      	ldr	r3, [r3, #8]
 8011108:	f003 0301 	and.w	r3, r3, #1
 801110c:	2b01      	cmp	r3, #1
 801110e:	d018      	beq.n	8011142 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	689a      	ldr	r2, [r3, #8]
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f042 0201 	orr.w	r2, r2, #1
 801111e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8011120:	4b5e      	ldr	r3, [pc, #376]	; (801129c <HAL_ADC_Start_DMA+0x1c0>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	4a5e      	ldr	r2, [pc, #376]	; (80112a0 <HAL_ADC_Start_DMA+0x1c4>)
 8011126:	fba2 2303 	umull	r2, r3, r2, r3
 801112a:	0c9a      	lsrs	r2, r3, #18
 801112c:	4613      	mov	r3, r2
 801112e:	005b      	lsls	r3, r3, #1
 8011130:	4413      	add	r3, r2
 8011132:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8011134:	e002      	b.n	801113c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	3b01      	subs	r3, #1
 801113a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d1f9      	bne.n	8011136 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	689b      	ldr	r3, [r3, #8]
 8011148:	f003 0301 	and.w	r3, r3, #1
 801114c:	2b01      	cmp	r3, #1
 801114e:	f040 80a0 	bne.w	8011292 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011156:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801115a:	f023 0301 	bic.w	r3, r3, #1
 801115e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	685b      	ldr	r3, [r3, #4]
 801116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011170:	2b00      	cmp	r3, #0
 8011172:	d007      	beq.n	8011184 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011178:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801117c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801118c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011190:	d106      	bne.n	80111a0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011196:	f023 0206 	bic.w	r2, r3, #6
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	645a      	str	r2, [r3, #68]	; 0x44
 801119e:	e002      	b.n	80111a6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2200      	movs	r2, #0
 80111a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	2200      	movs	r2, #0
 80111aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80111ae:	4b3d      	ldr	r3, [pc, #244]	; (80112a4 <HAL_ADC_Start_DMA+0x1c8>)
 80111b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111b6:	4a3c      	ldr	r2, [pc, #240]	; (80112a8 <HAL_ADC_Start_DMA+0x1cc>)
 80111b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111be:	4a3b      	ldr	r2, [pc, #236]	; (80112ac <HAL_ADC_Start_DMA+0x1d0>)
 80111c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111c6:	4a3a      	ldr	r2, [pc, #232]	; (80112b0 <HAL_ADC_Start_DMA+0x1d4>)
 80111c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80111d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	685a      	ldr	r2, [r3, #4]
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80111e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	689a      	ldr	r2, [r3, #8]
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80111f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	334c      	adds	r3, #76	; 0x4c
 80111fe:	4619      	mov	r1, r3
 8011200:	68ba      	ldr	r2, [r7, #8]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f000 fd24 	bl	8011c50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	f003 031f 	and.w	r3, r3, #31
 8011210:	2b00      	cmp	r3, #0
 8011212:	d12a      	bne.n	801126a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	4a26      	ldr	r2, [pc, #152]	; (80112b4 <HAL_ADC_Start_DMA+0x1d8>)
 801121a:	4293      	cmp	r3, r2
 801121c:	d015      	beq.n	801124a <HAL_ADC_Start_DMA+0x16e>
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	4a25      	ldr	r2, [pc, #148]	; (80112b8 <HAL_ADC_Start_DMA+0x1dc>)
 8011224:	4293      	cmp	r3, r2
 8011226:	d105      	bne.n	8011234 <HAL_ADC_Start_DMA+0x158>
 8011228:	4b1e      	ldr	r3, [pc, #120]	; (80112a4 <HAL_ADC_Start_DMA+0x1c8>)
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	f003 031f 	and.w	r3, r3, #31
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00a      	beq.n	801124a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	4a20      	ldr	r2, [pc, #128]	; (80112bc <HAL_ADC_Start_DMA+0x1e0>)
 801123a:	4293      	cmp	r3, r2
 801123c:	d129      	bne.n	8011292 <HAL_ADC_Start_DMA+0x1b6>
 801123e:	4b19      	ldr	r3, [pc, #100]	; (80112a4 <HAL_ADC_Start_DMA+0x1c8>)
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	f003 031f 	and.w	r3, r3, #31
 8011246:	2b0f      	cmp	r3, #15
 8011248:	d823      	bhi.n	8011292 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	689b      	ldr	r3, [r3, #8]
 8011250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011254:	2b00      	cmp	r3, #0
 8011256:	d11c      	bne.n	8011292 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	689a      	ldr	r2, [r3, #8]
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011266:	609a      	str	r2, [r3, #8]
 8011268:	e013      	b.n	8011292 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	4a11      	ldr	r2, [pc, #68]	; (80112b4 <HAL_ADC_Start_DMA+0x1d8>)
 8011270:	4293      	cmp	r3, r2
 8011272:	d10e      	bne.n	8011292 <HAL_ADC_Start_DMA+0x1b6>
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	689b      	ldr	r3, [r3, #8]
 801127a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801127e:	2b00      	cmp	r3, #0
 8011280:	d107      	bne.n	8011292 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	689a      	ldr	r2, [r3, #8]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011290:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8011292:	2300      	movs	r3, #0
}
 8011294:	4618      	mov	r0, r3
 8011296:	3718      	adds	r7, #24
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	20000020 	.word	0x20000020
 80112a0:	431bde83 	.word	0x431bde83
 80112a4:	40012300 	.word	0x40012300
 80112a8:	080117cd 	.word	0x080117cd
 80112ac:	08011887 	.word	0x08011887
 80112b0:	080118a3 	.word	0x080118a3
 80112b4:	40012000 	.word	0x40012000
 80112b8:	40012100 	.word	0x40012100
 80112bc:	40012200 	.word	0x40012200

080112c0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b084      	sub	sp, #16
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80112c8:	2300      	movs	r3, #0
 80112ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112d2:	2b01      	cmp	r3, #1
 80112d4:	d101      	bne.n	80112da <HAL_ADC_Stop_DMA+0x1a>
 80112d6:	2302      	movs	r3, #2
 80112d8:	e038      	b.n	801134c <HAL_ADC_Stop_DMA+0x8c>
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2201      	movs	r2, #1
 80112de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	689a      	ldr	r2, [r3, #8]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f022 0201 	bic.w	r2, r2, #1
 80112f0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	689b      	ldr	r3, [r3, #8]
 80112f8:	f003 0301 	and.w	r3, r3, #1
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d120      	bne.n	8011342 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	689a      	ldr	r2, [r3, #8]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801130e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011314:	4618      	mov	r0, r3
 8011316:	f000 fcf3 	bl	8011d00 <HAL_DMA_Abort>
 801131a:	4603      	mov	r3, r0
 801131c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	685a      	ldr	r2, [r3, #4]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 801132c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011332:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8011336:	f023 0301 	bic.w	r3, r3, #1
 801133a:	f043 0201 	orr.w	r2, r3, #1
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2200      	movs	r2, #0
 8011346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 801134a:	7bfb      	ldrb	r3, [r7, #15]
}
 801134c:	4618      	mov	r0, r3
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011354:	b480      	push	{r7}
 8011356:	b083      	sub	sp, #12
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801135c:	bf00      	nop
 801135e:	370c      	adds	r7, #12
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011368:	b480      	push	{r7}
 801136a:	b083      	sub	sp, #12
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8011370:	bf00      	nop
 8011372:	370c      	adds	r7, #12
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr

0801137c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801137c:	b480      	push	{r7}
 801137e:	b083      	sub	sp, #12
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8011384:	bf00      	nop
 8011386:	370c      	adds	r7, #12
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8011390:	b480      	push	{r7}
 8011392:	b085      	sub	sp, #20
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801139a:	2300      	movs	r3, #0
 801139c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	d101      	bne.n	80113ac <HAL_ADC_ConfigChannel+0x1c>
 80113a8:	2302      	movs	r3, #2
 80113aa:	e105      	b.n	80115b8 <HAL_ADC_ConfigChannel+0x228>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2201      	movs	r2, #1
 80113b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b09      	cmp	r3, #9
 80113ba:	d925      	bls.n	8011408 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	68d9      	ldr	r1, [r3, #12]
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	461a      	mov	r2, r3
 80113ca:	4613      	mov	r3, r2
 80113cc:	005b      	lsls	r3, r3, #1
 80113ce:	4413      	add	r3, r2
 80113d0:	3b1e      	subs	r3, #30
 80113d2:	2207      	movs	r2, #7
 80113d4:	fa02 f303 	lsl.w	r3, r2, r3
 80113d8:	43da      	mvns	r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	400a      	ands	r2, r1
 80113e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	68d9      	ldr	r1, [r3, #12]
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	689a      	ldr	r2, [r3, #8]
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	b29b      	uxth	r3, r3
 80113f2:	4618      	mov	r0, r3
 80113f4:	4603      	mov	r3, r0
 80113f6:	005b      	lsls	r3, r3, #1
 80113f8:	4403      	add	r3, r0
 80113fa:	3b1e      	subs	r3, #30
 80113fc:	409a      	lsls	r2, r3
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	430a      	orrs	r2, r1
 8011404:	60da      	str	r2, [r3, #12]
 8011406:	e022      	b.n	801144e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	6919      	ldr	r1, [r3, #16]
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	b29b      	uxth	r3, r3
 8011414:	461a      	mov	r2, r3
 8011416:	4613      	mov	r3, r2
 8011418:	005b      	lsls	r3, r3, #1
 801141a:	4413      	add	r3, r2
 801141c:	2207      	movs	r2, #7
 801141e:	fa02 f303 	lsl.w	r3, r2, r3
 8011422:	43da      	mvns	r2, r3
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	400a      	ands	r2, r1
 801142a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	6919      	ldr	r1, [r3, #16]
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	689a      	ldr	r2, [r3, #8]
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	b29b      	uxth	r3, r3
 801143c:	4618      	mov	r0, r3
 801143e:	4603      	mov	r3, r0
 8011440:	005b      	lsls	r3, r3, #1
 8011442:	4403      	add	r3, r0
 8011444:	409a      	lsls	r2, r3
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	430a      	orrs	r2, r1
 801144c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	2b06      	cmp	r3, #6
 8011454:	d824      	bhi.n	80114a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	685a      	ldr	r2, [r3, #4]
 8011460:	4613      	mov	r3, r2
 8011462:	009b      	lsls	r3, r3, #2
 8011464:	4413      	add	r3, r2
 8011466:	3b05      	subs	r3, #5
 8011468:	221f      	movs	r2, #31
 801146a:	fa02 f303 	lsl.w	r3, r2, r3
 801146e:	43da      	mvns	r2, r3
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	400a      	ands	r2, r1
 8011476:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	b29b      	uxth	r3, r3
 8011484:	4618      	mov	r0, r3
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	685a      	ldr	r2, [r3, #4]
 801148a:	4613      	mov	r3, r2
 801148c:	009b      	lsls	r3, r3, #2
 801148e:	4413      	add	r3, r2
 8011490:	3b05      	subs	r3, #5
 8011492:	fa00 f203 	lsl.w	r2, r0, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	430a      	orrs	r2, r1
 801149c:	635a      	str	r2, [r3, #52]	; 0x34
 801149e:	e04c      	b.n	801153a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	2b0c      	cmp	r3, #12
 80114a6:	d824      	bhi.n	80114f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	685a      	ldr	r2, [r3, #4]
 80114b2:	4613      	mov	r3, r2
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	4413      	add	r3, r2
 80114b8:	3b23      	subs	r3, #35	; 0x23
 80114ba:	221f      	movs	r2, #31
 80114bc:	fa02 f303 	lsl.w	r3, r2, r3
 80114c0:	43da      	mvns	r2, r3
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	400a      	ands	r2, r1
 80114c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	4618      	mov	r0, r3
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	4613      	mov	r3, r2
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	4413      	add	r3, r2
 80114e2:	3b23      	subs	r3, #35	; 0x23
 80114e4:	fa00 f203 	lsl.w	r2, r0, r3
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	430a      	orrs	r2, r1
 80114ee:	631a      	str	r2, [r3, #48]	; 0x30
 80114f0:	e023      	b.n	801153a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	685a      	ldr	r2, [r3, #4]
 80114fc:	4613      	mov	r3, r2
 80114fe:	009b      	lsls	r3, r3, #2
 8011500:	4413      	add	r3, r2
 8011502:	3b41      	subs	r3, #65	; 0x41
 8011504:	221f      	movs	r2, #31
 8011506:	fa02 f303 	lsl.w	r3, r2, r3
 801150a:	43da      	mvns	r2, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	400a      	ands	r2, r1
 8011512:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	b29b      	uxth	r3, r3
 8011520:	4618      	mov	r0, r3
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	685a      	ldr	r2, [r3, #4]
 8011526:	4613      	mov	r3, r2
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	4413      	add	r3, r2
 801152c:	3b41      	subs	r3, #65	; 0x41
 801152e:	fa00 f203 	lsl.w	r2, r0, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	430a      	orrs	r2, r1
 8011538:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801153a:	4b22      	ldr	r3, [pc, #136]	; (80115c4 <HAL_ADC_ConfigChannel+0x234>)
 801153c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	4a21      	ldr	r2, [pc, #132]	; (80115c8 <HAL_ADC_ConfigChannel+0x238>)
 8011544:	4293      	cmp	r3, r2
 8011546:	d109      	bne.n	801155c <HAL_ADC_ConfigChannel+0x1cc>
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2b12      	cmp	r3, #18
 801154e:	d105      	bne.n	801155c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	4a19      	ldr	r2, [pc, #100]	; (80115c8 <HAL_ADC_ConfigChannel+0x238>)
 8011562:	4293      	cmp	r3, r2
 8011564:	d123      	bne.n	80115ae <HAL_ADC_ConfigChannel+0x21e>
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b10      	cmp	r3, #16
 801156c:	d003      	beq.n	8011576 <HAL_ADC_ConfigChannel+0x1e6>
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	2b11      	cmp	r3, #17
 8011574:	d11b      	bne.n	80115ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b10      	cmp	r3, #16
 8011588:	d111      	bne.n	80115ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801158a:	4b10      	ldr	r3, [pc, #64]	; (80115cc <HAL_ADC_ConfigChannel+0x23c>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	4a10      	ldr	r2, [pc, #64]	; (80115d0 <HAL_ADC_ConfigChannel+0x240>)
 8011590:	fba2 2303 	umull	r2, r3, r2, r3
 8011594:	0c9a      	lsrs	r2, r3, #18
 8011596:	4613      	mov	r3, r2
 8011598:	009b      	lsls	r3, r3, #2
 801159a:	4413      	add	r3, r2
 801159c:	005b      	lsls	r3, r3, #1
 801159e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80115a0:	e002      	b.n	80115a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	3b01      	subs	r3, #1
 80115a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d1f9      	bne.n	80115a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2200      	movs	r2, #0
 80115b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80115b6:	2300      	movs	r3, #0
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3714      	adds	r7, #20
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr
 80115c4:	40012300 	.word	0x40012300
 80115c8:	40012000 	.word	0x40012000
 80115cc:	20000020 	.word	0x20000020
 80115d0:	431bde83 	.word	0x431bde83

080115d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80115dc:	4b79      	ldr	r3, [pc, #484]	; (80117c4 <ADC_Init+0x1f0>)
 80115de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	685a      	ldr	r2, [r3, #4]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	431a      	orrs	r2, r3
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	685a      	ldr	r2, [r3, #4]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	6859      	ldr	r1, [r3, #4]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	691b      	ldr	r3, [r3, #16]
 8011614:	021a      	lsls	r2, r3, #8
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	430a      	orrs	r2, r1
 801161c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	685a      	ldr	r2, [r3, #4]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801162c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	6859      	ldr	r1, [r3, #4]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	689a      	ldr	r2, [r3, #8]
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	430a      	orrs	r2, r1
 801163e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	689a      	ldr	r2, [r3, #8]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801164e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	6899      	ldr	r1, [r3, #8]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	68da      	ldr	r2, [r3, #12]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	430a      	orrs	r2, r1
 8011660:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011666:	4a58      	ldr	r2, [pc, #352]	; (80117c8 <ADC_Init+0x1f4>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d022      	beq.n	80116b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	689a      	ldr	r2, [r3, #8]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801167a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	6899      	ldr	r1, [r3, #8]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	430a      	orrs	r2, r1
 801168c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	689a      	ldr	r2, [r3, #8]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801169c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	6899      	ldr	r1, [r3, #8]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	430a      	orrs	r2, r1
 80116ae:	609a      	str	r2, [r3, #8]
 80116b0:	e00f      	b.n	80116d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	689a      	ldr	r2, [r3, #8]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80116c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	689a      	ldr	r2, [r3, #8]
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80116d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	689a      	ldr	r2, [r3, #8]
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f022 0202 	bic.w	r2, r2, #2
 80116e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	6899      	ldr	r1, [r3, #8]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	7e1b      	ldrb	r3, [r3, #24]
 80116ec:	005a      	lsls	r2, r3, #1
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	430a      	orrs	r2, r1
 80116f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d01b      	beq.n	8011738 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	685a      	ldr	r2, [r3, #4]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801170e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	685a      	ldr	r2, [r3, #4]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801171e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	6859      	ldr	r1, [r3, #4]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801172a:	3b01      	subs	r3, #1
 801172c:	035a      	lsls	r2, r3, #13
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	430a      	orrs	r2, r1
 8011734:	605a      	str	r2, [r3, #4]
 8011736:	e007      	b.n	8011748 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	685a      	ldr	r2, [r3, #4]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011746:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8011756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	69db      	ldr	r3, [r3, #28]
 8011762:	3b01      	subs	r3, #1
 8011764:	051a      	lsls	r2, r3, #20
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	430a      	orrs	r2, r1
 801176c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	689a      	ldr	r2, [r3, #8]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801177c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	6899      	ldr	r1, [r3, #8]
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801178a:	025a      	lsls	r2, r3, #9
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	430a      	orrs	r2, r1
 8011792:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	689a      	ldr	r2, [r3, #8]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80117a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	6899      	ldr	r1, [r3, #8]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	695b      	ldr	r3, [r3, #20]
 80117ae:	029a      	lsls	r2, r3, #10
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	430a      	orrs	r2, r1
 80117b6:	609a      	str	r2, [r3, #8]
}
 80117b8:	bf00      	nop
 80117ba:	3714      	adds	r7, #20
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr
 80117c4:	40012300 	.word	0x40012300
 80117c8:	0f000001 	.word	0x0f000001

080117cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d13c      	bne.n	8011860 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	689b      	ldr	r3, [r3, #8]
 80117f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d12b      	bne.n	8011858 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011804:	2b00      	cmp	r3, #0
 8011806:	d127      	bne.n	8011858 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801180e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011812:	2b00      	cmp	r3, #0
 8011814:	d006      	beq.n	8011824 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	689b      	ldr	r3, [r3, #8]
 801181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011820:	2b00      	cmp	r3, #0
 8011822:	d119      	bne.n	8011858 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	685a      	ldr	r2, [r3, #4]
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	f022 0220 	bic.w	r2, r2, #32
 8011832:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011848:	2b00      	cmp	r3, #0
 801184a:	d105      	bne.n	8011858 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011850:	f043 0201 	orr.w	r2, r3, #1
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8011858:	68f8      	ldr	r0, [r7, #12]
 801185a:	f7ff fd7b 	bl	8011354 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801185e:	e00e      	b.n	801187e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011864:	f003 0310 	and.w	r3, r3, #16
 8011868:	2b00      	cmp	r3, #0
 801186a:	d003      	beq.n	8011874 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801186c:	68f8      	ldr	r0, [r7, #12]
 801186e:	f7ff fd85 	bl	801137c <HAL_ADC_ErrorCallback>
}
 8011872:	e004      	b.n	801187e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	4798      	blx	r3
}
 801187e:	bf00      	nop
 8011880:	3710      	adds	r7, #16
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}

08011886 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8011886:	b580      	push	{r7, lr}
 8011888:	b084      	sub	sp, #16
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011892:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8011894:	68f8      	ldr	r0, [r7, #12]
 8011896:	f7ff fd67 	bl	8011368 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801189a:	bf00      	nop
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80118a2:	b580      	push	{r7, lr}
 80118a4:	b084      	sub	sp, #16
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2240      	movs	r2, #64	; 0x40
 80118b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118ba:	f043 0204 	orr.w	r2, r3, #4
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80118c2:	68f8      	ldr	r0, [r7, #12]
 80118c4:	f7ff fd5a 	bl	801137c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80118c8:	bf00      	nop
 80118ca:	3710      	adds	r7, #16
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b085      	sub	sp, #20
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f003 0307 	and.w	r3, r3, #7
 80118de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80118e0:	4b0c      	ldr	r3, [pc, #48]	; (8011914 <__NVIC_SetPriorityGrouping+0x44>)
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80118e6:	68ba      	ldr	r2, [r7, #8]
 80118e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80118ec:	4013      	ands	r3, r2
 80118ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80118f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80118fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011902:	4a04      	ldr	r2, [pc, #16]	; (8011914 <__NVIC_SetPriorityGrouping+0x44>)
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	60d3      	str	r3, [r2, #12]
}
 8011908:	bf00      	nop
 801190a:	3714      	adds	r7, #20
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr
 8011914:	e000ed00 	.word	0xe000ed00

08011918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011918:	b480      	push	{r7}
 801191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801191c:	4b04      	ldr	r3, [pc, #16]	; (8011930 <__NVIC_GetPriorityGrouping+0x18>)
 801191e:	68db      	ldr	r3, [r3, #12]
 8011920:	0a1b      	lsrs	r3, r3, #8
 8011922:	f003 0307 	and.w	r3, r3, #7
}
 8011926:	4618      	mov	r0, r3
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr
 8011930:	e000ed00 	.word	0xe000ed00

08011934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011934:	b480      	push	{r7}
 8011936:	b083      	sub	sp, #12
 8011938:	af00      	add	r7, sp, #0
 801193a:	4603      	mov	r3, r0
 801193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011942:	2b00      	cmp	r3, #0
 8011944:	db0b      	blt.n	801195e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011946:	79fb      	ldrb	r3, [r7, #7]
 8011948:	f003 021f 	and.w	r2, r3, #31
 801194c:	4907      	ldr	r1, [pc, #28]	; (801196c <__NVIC_EnableIRQ+0x38>)
 801194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011952:	095b      	lsrs	r3, r3, #5
 8011954:	2001      	movs	r0, #1
 8011956:	fa00 f202 	lsl.w	r2, r0, r2
 801195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801195e:	bf00      	nop
 8011960:	370c      	adds	r7, #12
 8011962:	46bd      	mov	sp, r7
 8011964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011968:	4770      	bx	lr
 801196a:	bf00      	nop
 801196c:	e000e100 	.word	0xe000e100

08011970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011970:	b480      	push	{r7}
 8011972:	b083      	sub	sp, #12
 8011974:	af00      	add	r7, sp, #0
 8011976:	4603      	mov	r3, r0
 8011978:	6039      	str	r1, [r7, #0]
 801197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011980:	2b00      	cmp	r3, #0
 8011982:	db0a      	blt.n	801199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	b2da      	uxtb	r2, r3
 8011988:	490c      	ldr	r1, [pc, #48]	; (80119bc <__NVIC_SetPriority+0x4c>)
 801198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801198e:	0112      	lsls	r2, r2, #4
 8011990:	b2d2      	uxtb	r2, r2
 8011992:	440b      	add	r3, r1
 8011994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011998:	e00a      	b.n	80119b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	b2da      	uxtb	r2, r3
 801199e:	4908      	ldr	r1, [pc, #32]	; (80119c0 <__NVIC_SetPriority+0x50>)
 80119a0:	79fb      	ldrb	r3, [r7, #7]
 80119a2:	f003 030f 	and.w	r3, r3, #15
 80119a6:	3b04      	subs	r3, #4
 80119a8:	0112      	lsls	r2, r2, #4
 80119aa:	b2d2      	uxtb	r2, r2
 80119ac:	440b      	add	r3, r1
 80119ae:	761a      	strb	r2, [r3, #24]
}
 80119b0:	bf00      	nop
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr
 80119bc:	e000e100 	.word	0xe000e100
 80119c0:	e000ed00 	.word	0xe000ed00

080119c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b089      	sub	sp, #36	; 0x24
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	60f8      	str	r0, [r7, #12]
 80119cc:	60b9      	str	r1, [r7, #8]
 80119ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	f003 0307 	and.w	r3, r3, #7
 80119d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	f1c3 0307 	rsb	r3, r3, #7
 80119de:	2b04      	cmp	r3, #4
 80119e0:	bf28      	it	cs
 80119e2:	2304      	movcs	r3, #4
 80119e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80119e6:	69fb      	ldr	r3, [r7, #28]
 80119e8:	3304      	adds	r3, #4
 80119ea:	2b06      	cmp	r3, #6
 80119ec:	d902      	bls.n	80119f4 <NVIC_EncodePriority+0x30>
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	3b03      	subs	r3, #3
 80119f2:	e000      	b.n	80119f6 <NVIC_EncodePriority+0x32>
 80119f4:	2300      	movs	r3, #0
 80119f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80119f8:	f04f 32ff 	mov.w	r2, #4294967295
 80119fc:	69bb      	ldr	r3, [r7, #24]
 80119fe:	fa02 f303 	lsl.w	r3, r2, r3
 8011a02:	43da      	mvns	r2, r3
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	401a      	ands	r2, r3
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	fa01 f303 	lsl.w	r3, r1, r3
 8011a16:	43d9      	mvns	r1, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011a1c:	4313      	orrs	r3, r2
         );
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3724      	adds	r7, #36	; 0x24
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr
	...

08011a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b082      	sub	sp, #8
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	3b01      	subs	r3, #1
 8011a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011a3c:	d301      	bcc.n	8011a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011a3e:	2301      	movs	r3, #1
 8011a40:	e00f      	b.n	8011a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011a42:	4a0a      	ldr	r2, [pc, #40]	; (8011a6c <SysTick_Config+0x40>)
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	3b01      	subs	r3, #1
 8011a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011a4a:	210f      	movs	r1, #15
 8011a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a50:	f7ff ff8e 	bl	8011970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011a54:	4b05      	ldr	r3, [pc, #20]	; (8011a6c <SysTick_Config+0x40>)
 8011a56:	2200      	movs	r2, #0
 8011a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011a5a:	4b04      	ldr	r3, [pc, #16]	; (8011a6c <SysTick_Config+0x40>)
 8011a5c:	2207      	movs	r2, #7
 8011a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011a60:	2300      	movs	r3, #0
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3708      	adds	r7, #8
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	e000e010 	.word	0xe000e010

08011a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f7ff ff29 	bl	80118d0 <__NVIC_SetPriorityGrouping>
}
 8011a7e:	bf00      	nop
 8011a80:	3708      	adds	r7, #8
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}

08011a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011a86:	b580      	push	{r7, lr}
 8011a88:	b086      	sub	sp, #24
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	60b9      	str	r1, [r7, #8]
 8011a90:	607a      	str	r2, [r7, #4]
 8011a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011a94:	2300      	movs	r3, #0
 8011a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011a98:	f7ff ff3e 	bl	8011918 <__NVIC_GetPriorityGrouping>
 8011a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011a9e:	687a      	ldr	r2, [r7, #4]
 8011aa0:	68b9      	ldr	r1, [r7, #8]
 8011aa2:	6978      	ldr	r0, [r7, #20]
 8011aa4:	f7ff ff8e 	bl	80119c4 <NVIC_EncodePriority>
 8011aa8:	4602      	mov	r2, r0
 8011aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011aae:	4611      	mov	r1, r2
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f7ff ff5d 	bl	8011970 <__NVIC_SetPriority>
}
 8011ab6:	bf00      	nop
 8011ab8:	3718      	adds	r7, #24
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}

08011abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011abe:	b580      	push	{r7, lr}
 8011ac0:	b082      	sub	sp, #8
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7ff ff31 	bl	8011934 <__NVIC_EnableIRQ>
}
 8011ad2:	bf00      	nop
 8011ad4:	3708      	adds	r7, #8
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011ada:	b580      	push	{r7, lr}
 8011adc:	b082      	sub	sp, #8
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f7ff ffa2 	bl	8011a2c <SysTick_Config>
 8011ae8:	4603      	mov	r3, r0
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3708      	adds	r7, #8
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
	...

08011af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b086      	sub	sp, #24
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011afc:	2300      	movs	r3, #0
 8011afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011b00:	f7ff fa7a 	bl	8010ff8 <HAL_GetTick>
 8011b04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d101      	bne.n	8011b10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	e099      	b.n	8011c44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2200      	movs	r2, #0
 8011b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2202      	movs	r2, #2
 8011b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f022 0201 	bic.w	r2, r2, #1
 8011b2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011b30:	e00f      	b.n	8011b52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011b32:	f7ff fa61 	bl	8010ff8 <HAL_GetTick>
 8011b36:	4602      	mov	r2, r0
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	1ad3      	subs	r3, r2, r3
 8011b3c:	2b05      	cmp	r3, #5
 8011b3e:	d908      	bls.n	8011b52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2220      	movs	r2, #32
 8011b44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2203      	movs	r2, #3
 8011b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8011b4e:	2303      	movs	r3, #3
 8011b50:	e078      	b.n	8011c44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f003 0301 	and.w	r3, r3, #1
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d1e8      	bne.n	8011b32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011b68:	697a      	ldr	r2, [r7, #20]
 8011b6a:	4b38      	ldr	r3, [pc, #224]	; (8011c4c <HAL_DMA_Init+0x158>)
 8011b6c:	4013      	ands	r3, r2
 8011b6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	685a      	ldr	r2, [r3, #4]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	689b      	ldr	r3, [r3, #8]
 8011b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	691b      	ldr	r3, [r3, #16]
 8011b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	699b      	ldr	r3, [r3, #24]
 8011b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6a1b      	ldr	r3, [r3, #32]
 8011b9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011b9e:	697a      	ldr	r2, [r7, #20]
 8011ba0:	4313      	orrs	r3, r2
 8011ba2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba8:	2b04      	cmp	r3, #4
 8011baa:	d107      	bne.n	8011bbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bb4:	4313      	orrs	r3, r2
 8011bb6:	697a      	ldr	r2, [r7, #20]
 8011bb8:	4313      	orrs	r3, r2
 8011bba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	697a      	ldr	r2, [r7, #20]
 8011bc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	695b      	ldr	r3, [r3, #20]
 8011bca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	f023 0307 	bic.w	r3, r3, #7
 8011bd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bd8:	697a      	ldr	r2, [r7, #20]
 8011bda:	4313      	orrs	r3, r2
 8011bdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be2:	2b04      	cmp	r3, #4
 8011be4:	d117      	bne.n	8011c16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bea:	697a      	ldr	r2, [r7, #20]
 8011bec:	4313      	orrs	r3, r2
 8011bee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d00e      	beq.n	8011c16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f000 fadf 	bl	80121bc <DMA_CheckFifoParam>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d008      	beq.n	8011c16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2240      	movs	r2, #64	; 0x40
 8011c08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011c12:	2301      	movs	r3, #1
 8011c14:	e016      	b.n	8011c44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	697a      	ldr	r2, [r7, #20]
 8011c1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f000 fa96 	bl	8012150 <DMA_CalcBaseAndBitshift>
 8011c24:	4603      	mov	r3, r0
 8011c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c2c:	223f      	movs	r2, #63	; 0x3f
 8011c2e:	409a      	lsls	r2, r3
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2200      	movs	r2, #0
 8011c38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011c42:	2300      	movs	r3, #0
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3718      	adds	r7, #24
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	f010803f 	.word	0xf010803f

08011c50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b086      	sub	sp, #24
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	60f8      	str	r0, [r7, #12]
 8011c58:	60b9      	str	r1, [r7, #8]
 8011c5a:	607a      	str	r2, [r7, #4]
 8011c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	d101      	bne.n	8011c76 <HAL_DMA_Start_IT+0x26>
 8011c72:	2302      	movs	r3, #2
 8011c74:	e040      	b.n	8011cf8 <HAL_DMA_Start_IT+0xa8>
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	2201      	movs	r2, #1
 8011c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011c84:	b2db      	uxtb	r3, r3
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d12f      	bne.n	8011cea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2202      	movs	r2, #2
 8011c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	2200      	movs	r2, #0
 8011c96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	68b9      	ldr	r1, [r7, #8]
 8011c9e:	68f8      	ldr	r0, [r7, #12]
 8011ca0:	f000 fa28 	bl	80120f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ca8:	223f      	movs	r2, #63	; 0x3f
 8011caa:	409a      	lsls	r2, r3
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	f042 0216 	orr.w	r2, r2, #22
 8011cbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d007      	beq.n	8011cd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	f042 0208 	orr.w	r2, r2, #8
 8011cd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f042 0201 	orr.w	r2, r2, #1
 8011ce6:	601a      	str	r2, [r3, #0]
 8011ce8:	e005      	b.n	8011cf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	2200      	movs	r2, #0
 8011cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8011cf2:	2302      	movs	r3, #2
 8011cf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3718      	adds	r7, #24
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8011d0e:	f7ff f973 	bl	8010ff8 <HAL_GetTick>
 8011d12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011d1a:	b2db      	uxtb	r3, r3
 8011d1c:	2b02      	cmp	r3, #2
 8011d1e:	d008      	beq.n	8011d32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2280      	movs	r2, #128	; 0x80
 8011d24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8011d2e:	2301      	movs	r3, #1
 8011d30:	e052      	b.n	8011dd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	681a      	ldr	r2, [r3, #0]
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	f022 0216 	bic.w	r2, r2, #22
 8011d40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	695a      	ldr	r2, [r3, #20]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011d50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d103      	bne.n	8011d62 <HAL_DMA_Abort+0x62>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d007      	beq.n	8011d72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	681a      	ldr	r2, [r3, #0]
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f022 0208 	bic.w	r2, r2, #8
 8011d70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f022 0201 	bic.w	r2, r2, #1
 8011d80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011d82:	e013      	b.n	8011dac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011d84:	f7ff f938 	bl	8010ff8 <HAL_GetTick>
 8011d88:	4602      	mov	r2, r0
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	1ad3      	subs	r3, r2, r3
 8011d8e:	2b05      	cmp	r3, #5
 8011d90:	d90c      	bls.n	8011dac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2220      	movs	r2, #32
 8011d96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2203      	movs	r2, #3
 8011da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8011da8:	2303      	movs	r3, #3
 8011daa:	e015      	b.n	8011dd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	f003 0301 	and.w	r3, r3, #1
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d1e4      	bne.n	8011d84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011dbe:	223f      	movs	r2, #63	; 0x3f
 8011dc0:	409a      	lsls	r2, r3
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8011dd6:	2300      	movs	r3, #0
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3710      	adds	r7, #16
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}

08011de0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b086      	sub	sp, #24
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011de8:	2300      	movs	r3, #0
 8011dea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011dec:	4b92      	ldr	r3, [pc, #584]	; (8012038 <HAL_DMA_IRQHandler+0x258>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	4a92      	ldr	r2, [pc, #584]	; (801203c <HAL_DMA_IRQHandler+0x25c>)
 8011df2:	fba2 2303 	umull	r2, r3, r2, r3
 8011df6:	0a9b      	lsrs	r3, r3, #10
 8011df8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011dfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e0a:	2208      	movs	r2, #8
 8011e0c:	409a      	lsls	r2, r3
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	4013      	ands	r3, r2
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d01a      	beq.n	8011e4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f003 0304 	and.w	r3, r3, #4
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d013      	beq.n	8011e4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f022 0204 	bic.w	r2, r2, #4
 8011e32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e38:	2208      	movs	r2, #8
 8011e3a:	409a      	lsls	r2, r3
 8011e3c:	693b      	ldr	r3, [r7, #16]
 8011e3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e44:	f043 0201 	orr.w	r2, r3, #1
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e50:	2201      	movs	r2, #1
 8011e52:	409a      	lsls	r2, r3
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	4013      	ands	r3, r2
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d012      	beq.n	8011e82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	695b      	ldr	r3, [r3, #20]
 8011e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00b      	beq.n	8011e82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e6e:	2201      	movs	r2, #1
 8011e70:	409a      	lsls	r2, r3
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e7a:	f043 0202 	orr.w	r2, r3, #2
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e86:	2204      	movs	r2, #4
 8011e88:	409a      	lsls	r2, r3
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	4013      	ands	r3, r2
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d012      	beq.n	8011eb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f003 0302 	and.w	r3, r3, #2
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d00b      	beq.n	8011eb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ea4:	2204      	movs	r2, #4
 8011ea6:	409a      	lsls	r2, r3
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011eb0:	f043 0204 	orr.w	r2, r3, #4
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ebc:	2210      	movs	r2, #16
 8011ebe:	409a      	lsls	r2, r3
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	4013      	ands	r3, r2
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d043      	beq.n	8011f50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	f003 0308 	and.w	r3, r3, #8
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d03c      	beq.n	8011f50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011eda:	2210      	movs	r2, #16
 8011edc:	409a      	lsls	r2, r3
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d018      	beq.n	8011f22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d108      	bne.n	8011f10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d024      	beq.n	8011f50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	4798      	blx	r3
 8011f0e:	e01f      	b.n	8011f50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d01b      	beq.n	8011f50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	4798      	blx	r3
 8011f20:	e016      	b.n	8011f50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d107      	bne.n	8011f40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	681a      	ldr	r2, [r3, #0]
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	f022 0208 	bic.w	r2, r2, #8
 8011f3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d003      	beq.n	8011f50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f54:	2220      	movs	r2, #32
 8011f56:	409a      	lsls	r2, r3
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	4013      	ands	r3, r2
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	f000 808e 	beq.w	801207e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	f003 0310 	and.w	r3, r3, #16
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	f000 8086 	beq.w	801207e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f76:	2220      	movs	r2, #32
 8011f78:	409a      	lsls	r2, r3
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	2b05      	cmp	r3, #5
 8011f88:	d136      	bne.n	8011ff8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	681a      	ldr	r2, [r3, #0]
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	f022 0216 	bic.w	r2, r2, #22
 8011f98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	695a      	ldr	r2, [r3, #20]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011fa8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d103      	bne.n	8011fba <HAL_DMA_IRQHandler+0x1da>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d007      	beq.n	8011fca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f022 0208 	bic.w	r2, r2, #8
 8011fc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011fce:	223f      	movs	r2, #63	; 0x3f
 8011fd0:	409a      	lsls	r2, r3
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d07d      	beq.n	80120ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	4798      	blx	r3
        }
        return;
 8011ff6:	e078      	b.n	80120ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012002:	2b00      	cmp	r3, #0
 8012004:	d01c      	beq.n	8012040 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012010:	2b00      	cmp	r3, #0
 8012012:	d108      	bne.n	8012026 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012018:	2b00      	cmp	r3, #0
 801201a:	d030      	beq.n	801207e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	4798      	blx	r3
 8012024:	e02b      	b.n	801207e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801202a:	2b00      	cmp	r3, #0
 801202c:	d027      	beq.n	801207e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	4798      	blx	r3
 8012036:	e022      	b.n	801207e <HAL_DMA_IRQHandler+0x29e>
 8012038:	20000020 	.word	0x20000020
 801203c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801204a:	2b00      	cmp	r3, #0
 801204c:	d10f      	bne.n	801206e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	681a      	ldr	r2, [r3, #0]
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f022 0210 	bic.w	r2, r2, #16
 801205c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2200      	movs	r2, #0
 8012062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2201      	movs	r2, #1
 801206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012072:	2b00      	cmp	r3, #0
 8012074:	d003      	beq.n	801207e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012082:	2b00      	cmp	r3, #0
 8012084:	d032      	beq.n	80120ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801208a:	f003 0301 	and.w	r3, r3, #1
 801208e:	2b00      	cmp	r3, #0
 8012090:	d022      	beq.n	80120d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2205      	movs	r2, #5
 8012096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f022 0201 	bic.w	r2, r2, #1
 80120a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	3301      	adds	r3, #1
 80120ae:	60bb      	str	r3, [r7, #8]
 80120b0:	697a      	ldr	r2, [r7, #20]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d307      	bcc.n	80120c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	f003 0301 	and.w	r3, r3, #1
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d1f2      	bne.n	80120aa <HAL_DMA_IRQHandler+0x2ca>
 80120c4:	e000      	b.n	80120c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80120c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2201      	movs	r2, #1
 80120d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d005      	beq.n	80120ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	4798      	blx	r3
 80120e8:	e000      	b.n	80120ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80120ea:	bf00      	nop
    }
  }
}
 80120ec:	3718      	adds	r7, #24
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop

080120f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b085      	sub	sp, #20
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	60f8      	str	r0, [r7, #12]
 80120fc:	60b9      	str	r1, [r7, #8]
 80120fe:	607a      	str	r2, [r7, #4]
 8012100:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	681a      	ldr	r2, [r3, #0]
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012110:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	683a      	ldr	r2, [r7, #0]
 8012118:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	689b      	ldr	r3, [r3, #8]
 801211e:	2b40      	cmp	r3, #64	; 0x40
 8012120:	d108      	bne.n	8012134 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	687a      	ldr	r2, [r7, #4]
 8012128:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	68ba      	ldr	r2, [r7, #8]
 8012130:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8012132:	e007      	b.n	8012144 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	68ba      	ldr	r2, [r7, #8]
 801213a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	687a      	ldr	r2, [r7, #4]
 8012142:	60da      	str	r2, [r3, #12]
}
 8012144:	bf00      	nop
 8012146:	3714      	adds	r7, #20
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8012150:	b480      	push	{r7}
 8012152:	b085      	sub	sp, #20
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	b2db      	uxtb	r3, r3
 801215e:	3b10      	subs	r3, #16
 8012160:	4a14      	ldr	r2, [pc, #80]	; (80121b4 <DMA_CalcBaseAndBitshift+0x64>)
 8012162:	fba2 2303 	umull	r2, r3, r2, r3
 8012166:	091b      	lsrs	r3, r3, #4
 8012168:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801216a:	4a13      	ldr	r2, [pc, #76]	; (80121b8 <DMA_CalcBaseAndBitshift+0x68>)
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	4413      	add	r3, r2
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	461a      	mov	r2, r3
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	2b03      	cmp	r3, #3
 801217c:	d909      	bls.n	8012192 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8012186:	f023 0303 	bic.w	r3, r3, #3
 801218a:	1d1a      	adds	r2, r3, #4
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	659a      	str	r2, [r3, #88]	; 0x58
 8012190:	e007      	b.n	80121a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801219a:	f023 0303 	bic.w	r3, r3, #3
 801219e:	687a      	ldr	r2, [r7, #4]
 80121a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80121a6:	4618      	mov	r0, r3
 80121a8:	3714      	adds	r7, #20
 80121aa:	46bd      	mov	sp, r7
 80121ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b0:	4770      	bx	lr
 80121b2:	bf00      	nop
 80121b4:	aaaaaaab 	.word	0xaaaaaaab
 80121b8:	0801b340 	.word	0x0801b340

080121bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80121bc:	b480      	push	{r7}
 80121be:	b085      	sub	sp, #20
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80121c4:	2300      	movs	r3, #0
 80121c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	699b      	ldr	r3, [r3, #24]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d11f      	bne.n	8012216 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	2b03      	cmp	r3, #3
 80121da:	d855      	bhi.n	8012288 <DMA_CheckFifoParam+0xcc>
 80121dc:	a201      	add	r2, pc, #4	; (adr r2, 80121e4 <DMA_CheckFifoParam+0x28>)
 80121de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121e2:	bf00      	nop
 80121e4:	080121f5 	.word	0x080121f5
 80121e8:	08012207 	.word	0x08012207
 80121ec:	080121f5 	.word	0x080121f5
 80121f0:	08012289 	.word	0x08012289
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d045      	beq.n	801228c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8012200:	2301      	movs	r3, #1
 8012202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012204:	e042      	b.n	801228c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801220a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801220e:	d13f      	bne.n	8012290 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8012210:	2301      	movs	r3, #1
 8012212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012214:	e03c      	b.n	8012290 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	699b      	ldr	r3, [r3, #24]
 801221a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801221e:	d121      	bne.n	8012264 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	2b03      	cmp	r3, #3
 8012224:	d836      	bhi.n	8012294 <DMA_CheckFifoParam+0xd8>
 8012226:	a201      	add	r2, pc, #4	; (adr r2, 801222c <DMA_CheckFifoParam+0x70>)
 8012228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801222c:	0801223d 	.word	0x0801223d
 8012230:	08012243 	.word	0x08012243
 8012234:	0801223d 	.word	0x0801223d
 8012238:	08012255 	.word	0x08012255
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801223c:	2301      	movs	r3, #1
 801223e:	73fb      	strb	r3, [r7, #15]
      break;
 8012240:	e02f      	b.n	80122a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801224a:	2b00      	cmp	r3, #0
 801224c:	d024      	beq.n	8012298 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 801224e:	2301      	movs	r3, #1
 8012250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012252:	e021      	b.n	8012298 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012258:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801225c:	d11e      	bne.n	801229c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 801225e:	2301      	movs	r3, #1
 8012260:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8012262:	e01b      	b.n	801229c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	2b02      	cmp	r3, #2
 8012268:	d902      	bls.n	8012270 <DMA_CheckFifoParam+0xb4>
 801226a:	2b03      	cmp	r3, #3
 801226c:	d003      	beq.n	8012276 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801226e:	e018      	b.n	80122a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8012270:	2301      	movs	r3, #1
 8012272:	73fb      	strb	r3, [r7, #15]
      break;
 8012274:	e015      	b.n	80122a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801227a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801227e:	2b00      	cmp	r3, #0
 8012280:	d00e      	beq.n	80122a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8012282:	2301      	movs	r3, #1
 8012284:	73fb      	strb	r3, [r7, #15]
      break;
 8012286:	e00b      	b.n	80122a0 <DMA_CheckFifoParam+0xe4>
      break;
 8012288:	bf00      	nop
 801228a:	e00a      	b.n	80122a2 <DMA_CheckFifoParam+0xe6>
      break;
 801228c:	bf00      	nop
 801228e:	e008      	b.n	80122a2 <DMA_CheckFifoParam+0xe6>
      break;
 8012290:	bf00      	nop
 8012292:	e006      	b.n	80122a2 <DMA_CheckFifoParam+0xe6>
      break;
 8012294:	bf00      	nop
 8012296:	e004      	b.n	80122a2 <DMA_CheckFifoParam+0xe6>
      break;
 8012298:	bf00      	nop
 801229a:	e002      	b.n	80122a2 <DMA_CheckFifoParam+0xe6>
      break;   
 801229c:	bf00      	nop
 801229e:	e000      	b.n	80122a2 <DMA_CheckFifoParam+0xe6>
      break;
 80122a0:	bf00      	nop
    }
  } 
  
  return status; 
 80122a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3714      	adds	r7, #20
 80122a8:	46bd      	mov	sp, r7
 80122aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ae:	4770      	bx	lr

080122b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80122b0:	b480      	push	{r7}
 80122b2:	b083      	sub	sp, #12
 80122b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80122b6:	2300      	movs	r3, #0
 80122b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80122ba:	4b0b      	ldr	r3, [pc, #44]	; (80122e8 <HAL_FLASH_Unlock+0x38>)
 80122bc:	691b      	ldr	r3, [r3, #16]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	da0b      	bge.n	80122da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80122c2:	4b09      	ldr	r3, [pc, #36]	; (80122e8 <HAL_FLASH_Unlock+0x38>)
 80122c4:	4a09      	ldr	r2, [pc, #36]	; (80122ec <HAL_FLASH_Unlock+0x3c>)
 80122c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80122c8:	4b07      	ldr	r3, [pc, #28]	; (80122e8 <HAL_FLASH_Unlock+0x38>)
 80122ca:	4a09      	ldr	r2, [pc, #36]	; (80122f0 <HAL_FLASH_Unlock+0x40>)
 80122cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80122ce:	4b06      	ldr	r3, [pc, #24]	; (80122e8 <HAL_FLASH_Unlock+0x38>)
 80122d0:	691b      	ldr	r3, [r3, #16]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	da01      	bge.n	80122da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80122d6:	2301      	movs	r3, #1
 80122d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80122da:	79fb      	ldrb	r3, [r7, #7]
}
 80122dc:	4618      	mov	r0, r3
 80122de:	370c      	adds	r7, #12
 80122e0:	46bd      	mov	sp, r7
 80122e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e6:	4770      	bx	lr
 80122e8:	40023c00 	.word	0x40023c00
 80122ec:	45670123 	.word	0x45670123
 80122f0:	cdef89ab 	.word	0xcdef89ab

080122f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80122f4:	b480      	push	{r7}
 80122f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80122f8:	4b05      	ldr	r3, [pc, #20]	; (8012310 <HAL_FLASH_Lock+0x1c>)
 80122fa:	691b      	ldr	r3, [r3, #16]
 80122fc:	4a04      	ldr	r2, [pc, #16]	; (8012310 <HAL_FLASH_Lock+0x1c>)
 80122fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012302:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8012304:	2300      	movs	r3, #0
}
 8012306:	4618      	mov	r0, r3
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr
 8012310:	40023c00 	.word	0x40023c00

08012314 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8012314:	b580      	push	{r7, lr}
 8012316:	b084      	sub	sp, #16
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801231c:	2300      	movs	r3, #0
 801231e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012320:	4b1a      	ldr	r3, [pc, #104]	; (801238c <FLASH_WaitForLastOperation+0x78>)
 8012322:	2200      	movs	r2, #0
 8012324:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8012326:	f7fe fe67 	bl	8010ff8 <HAL_GetTick>
 801232a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801232c:	e010      	b.n	8012350 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012334:	d00c      	beq.n	8012350 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d007      	beq.n	801234c <FLASH_WaitForLastOperation+0x38>
 801233c:	f7fe fe5c 	bl	8010ff8 <HAL_GetTick>
 8012340:	4602      	mov	r2, r0
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	1ad3      	subs	r3, r2, r3
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	429a      	cmp	r2, r3
 801234a:	d201      	bcs.n	8012350 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 801234c:	2303      	movs	r3, #3
 801234e:	e019      	b.n	8012384 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012350:	4b0f      	ldr	r3, [pc, #60]	; (8012390 <FLASH_WaitForLastOperation+0x7c>)
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012358:	2b00      	cmp	r3, #0
 801235a:	d1e8      	bne.n	801232e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 801235c:	4b0c      	ldr	r3, [pc, #48]	; (8012390 <FLASH_WaitForLastOperation+0x7c>)
 801235e:	68db      	ldr	r3, [r3, #12]
 8012360:	f003 0301 	and.w	r3, r3, #1
 8012364:	2b00      	cmp	r3, #0
 8012366:	d002      	beq.n	801236e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012368:	4b09      	ldr	r3, [pc, #36]	; (8012390 <FLASH_WaitForLastOperation+0x7c>)
 801236a:	2201      	movs	r2, #1
 801236c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801236e:	4b08      	ldr	r3, [pc, #32]	; (8012390 <FLASH_WaitForLastOperation+0x7c>)
 8012370:	68db      	ldr	r3, [r3, #12]
 8012372:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8012376:	2b00      	cmp	r3, #0
 8012378:	d003      	beq.n	8012382 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801237a:	f000 f80b 	bl	8012394 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801237e:	2301      	movs	r3, #1
 8012380:	e000      	b.n	8012384 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8012382:	2300      	movs	r3, #0
  
}  
 8012384:	4618      	mov	r0, r3
 8012386:	3710      	adds	r7, #16
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}
 801238c:	20000a80 	.word	0x20000a80
 8012390:	40023c00 	.word	0x40023c00

08012394 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8012394:	b480      	push	{r7}
 8012396:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8012398:	4b27      	ldr	r3, [pc, #156]	; (8012438 <FLASH_SetErrorCode+0xa4>)
 801239a:	68db      	ldr	r3, [r3, #12]
 801239c:	f003 0310 	and.w	r3, r3, #16
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d008      	beq.n	80123b6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80123a4:	4b25      	ldr	r3, [pc, #148]	; (801243c <FLASH_SetErrorCode+0xa8>)
 80123a6:	69db      	ldr	r3, [r3, #28]
 80123a8:	f043 0310 	orr.w	r3, r3, #16
 80123ac:	4a23      	ldr	r2, [pc, #140]	; (801243c <FLASH_SetErrorCode+0xa8>)
 80123ae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80123b0:	4b21      	ldr	r3, [pc, #132]	; (8012438 <FLASH_SetErrorCode+0xa4>)
 80123b2:	2210      	movs	r2, #16
 80123b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80123b6:	4b20      	ldr	r3, [pc, #128]	; (8012438 <FLASH_SetErrorCode+0xa4>)
 80123b8:	68db      	ldr	r3, [r3, #12]
 80123ba:	f003 0320 	and.w	r3, r3, #32
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d008      	beq.n	80123d4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80123c2:	4b1e      	ldr	r3, [pc, #120]	; (801243c <FLASH_SetErrorCode+0xa8>)
 80123c4:	69db      	ldr	r3, [r3, #28]
 80123c6:	f043 0308 	orr.w	r3, r3, #8
 80123ca:	4a1c      	ldr	r2, [pc, #112]	; (801243c <FLASH_SetErrorCode+0xa8>)
 80123cc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80123ce:	4b1a      	ldr	r3, [pc, #104]	; (8012438 <FLASH_SetErrorCode+0xa4>)
 80123d0:	2220      	movs	r2, #32
 80123d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80123d4:	4b18      	ldr	r3, [pc, #96]	; (8012438 <FLASH_SetErrorCode+0xa4>)
 80123d6:	68db      	ldr	r3, [r3, #12]
 80123d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d008      	beq.n	80123f2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80123e0:	4b16      	ldr	r3, [pc, #88]	; (801243c <FLASH_SetErrorCode+0xa8>)
 80123e2:	69db      	ldr	r3, [r3, #28]
 80123e4:	f043 0304 	orr.w	r3, r3, #4
 80123e8:	4a14      	ldr	r2, [pc, #80]	; (801243c <FLASH_SetErrorCode+0xa8>)
 80123ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80123ec:	4b12      	ldr	r3, [pc, #72]	; (8012438 <FLASH_SetErrorCode+0xa4>)
 80123ee:	2240      	movs	r2, #64	; 0x40
 80123f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80123f2:	4b11      	ldr	r3, [pc, #68]	; (8012438 <FLASH_SetErrorCode+0xa4>)
 80123f4:	68db      	ldr	r3, [r3, #12]
 80123f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d008      	beq.n	8012410 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80123fe:	4b0f      	ldr	r3, [pc, #60]	; (801243c <FLASH_SetErrorCode+0xa8>)
 8012400:	69db      	ldr	r3, [r3, #28]
 8012402:	f043 0302 	orr.w	r3, r3, #2
 8012406:	4a0d      	ldr	r2, [pc, #52]	; (801243c <FLASH_SetErrorCode+0xa8>)
 8012408:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801240a:	4b0b      	ldr	r3, [pc, #44]	; (8012438 <FLASH_SetErrorCode+0xa4>)
 801240c:	2280      	movs	r2, #128	; 0x80
 801240e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8012410:	4b09      	ldr	r3, [pc, #36]	; (8012438 <FLASH_SetErrorCode+0xa4>)
 8012412:	68db      	ldr	r3, [r3, #12]
 8012414:	f003 0302 	and.w	r3, r3, #2
 8012418:	2b00      	cmp	r3, #0
 801241a:	d008      	beq.n	801242e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801241c:	4b07      	ldr	r3, [pc, #28]	; (801243c <FLASH_SetErrorCode+0xa8>)
 801241e:	69db      	ldr	r3, [r3, #28]
 8012420:	f043 0320 	orr.w	r3, r3, #32
 8012424:	4a05      	ldr	r2, [pc, #20]	; (801243c <FLASH_SetErrorCode+0xa8>)
 8012426:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012428:	4b03      	ldr	r3, [pc, #12]	; (8012438 <FLASH_SetErrorCode+0xa4>)
 801242a:	2202      	movs	r2, #2
 801242c:	60da      	str	r2, [r3, #12]
  }
}
 801242e:	bf00      	nop
 8012430:	46bd      	mov	sp, r7
 8012432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012436:	4770      	bx	lr
 8012438:	40023c00 	.word	0x40023c00
 801243c:	20000a80 	.word	0x20000a80

08012440 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b084      	sub	sp, #16
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801244a:	2301      	movs	r3, #1
 801244c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801244e:	2300      	movs	r3, #0
 8012450:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012452:	4b31      	ldr	r3, [pc, #196]	; (8012518 <HAL_FLASHEx_Erase+0xd8>)
 8012454:	7e1b      	ldrb	r3, [r3, #24]
 8012456:	2b01      	cmp	r3, #1
 8012458:	d101      	bne.n	801245e <HAL_FLASHEx_Erase+0x1e>
 801245a:	2302      	movs	r3, #2
 801245c:	e058      	b.n	8012510 <HAL_FLASHEx_Erase+0xd0>
 801245e:	4b2e      	ldr	r3, [pc, #184]	; (8012518 <HAL_FLASHEx_Erase+0xd8>)
 8012460:	2201      	movs	r2, #1
 8012462:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012464:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012468:	f7ff ff54 	bl	8012314 <FLASH_WaitForLastOperation>
 801246c:	4603      	mov	r3, r0
 801246e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8012470:	7bfb      	ldrb	r3, [r7, #15]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d148      	bne.n	8012508 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	f04f 32ff 	mov.w	r2, #4294967295
 801247c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	2b01      	cmp	r3, #1
 8012484:	d115      	bne.n	80124b2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	691b      	ldr	r3, [r3, #16]
 801248a:	b2da      	uxtb	r2, r3
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	685b      	ldr	r3, [r3, #4]
 8012490:	4619      	mov	r1, r3
 8012492:	4610      	mov	r0, r2
 8012494:	f000 f844 	bl	8012520 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012498:	f24c 3050 	movw	r0, #50000	; 0xc350
 801249c:	f7ff ff3a 	bl	8012314 <FLASH_WaitForLastOperation>
 80124a0:	4603      	mov	r3, r0
 80124a2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80124a4:	4b1d      	ldr	r3, [pc, #116]	; (801251c <HAL_FLASHEx_Erase+0xdc>)
 80124a6:	691b      	ldr	r3, [r3, #16]
 80124a8:	4a1c      	ldr	r2, [pc, #112]	; (801251c <HAL_FLASHEx_Erase+0xdc>)
 80124aa:	f023 0304 	bic.w	r3, r3, #4
 80124ae:	6113      	str	r3, [r2, #16]
 80124b0:	e028      	b.n	8012504 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	689b      	ldr	r3, [r3, #8]
 80124b6:	60bb      	str	r3, [r7, #8]
 80124b8:	e01c      	b.n	80124f4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	691b      	ldr	r3, [r3, #16]
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	4619      	mov	r1, r3
 80124c2:	68b8      	ldr	r0, [r7, #8]
 80124c4:	f000 f850 	bl	8012568 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80124c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80124cc:	f7ff ff22 	bl	8012314 <FLASH_WaitForLastOperation>
 80124d0:	4603      	mov	r3, r0
 80124d2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80124d4:	4b11      	ldr	r3, [pc, #68]	; (801251c <HAL_FLASHEx_Erase+0xdc>)
 80124d6:	691b      	ldr	r3, [r3, #16]
 80124d8:	4a10      	ldr	r2, [pc, #64]	; (801251c <HAL_FLASHEx_Erase+0xdc>)
 80124da:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80124de:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80124e0:	7bfb      	ldrb	r3, [r7, #15]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d003      	beq.n	80124ee <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	68ba      	ldr	r2, [r7, #8]
 80124ea:	601a      	str	r2, [r3, #0]
          break;
 80124ec:	e00a      	b.n	8012504 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	3301      	adds	r3, #1
 80124f2:	60bb      	str	r3, [r7, #8]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	68da      	ldr	r2, [r3, #12]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	4413      	add	r3, r2
 80124fe:	68ba      	ldr	r2, [r7, #8]
 8012500:	429a      	cmp	r2, r3
 8012502:	d3da      	bcc.n	80124ba <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8012504:	f000 f878 	bl	80125f8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012508:	4b03      	ldr	r3, [pc, #12]	; (8012518 <HAL_FLASHEx_Erase+0xd8>)
 801250a:	2200      	movs	r2, #0
 801250c:	761a      	strb	r2, [r3, #24]

  return status;
 801250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3710      	adds	r7, #16
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}
 8012518:	20000a80 	.word	0x20000a80
 801251c:	40023c00 	.word	0x40023c00

08012520 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8012520:	b480      	push	{r7}
 8012522:	b083      	sub	sp, #12
 8012524:	af00      	add	r7, sp, #0
 8012526:	4603      	mov	r3, r0
 8012528:	6039      	str	r1, [r7, #0]
 801252a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801252c:	4b0d      	ldr	r3, [pc, #52]	; (8012564 <FLASH_MassErase+0x44>)
 801252e:	691b      	ldr	r3, [r3, #16]
 8012530:	4a0c      	ldr	r2, [pc, #48]	; (8012564 <FLASH_MassErase+0x44>)
 8012532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012536:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8012538:	4b0a      	ldr	r3, [pc, #40]	; (8012564 <FLASH_MassErase+0x44>)
 801253a:	691b      	ldr	r3, [r3, #16]
 801253c:	4a09      	ldr	r2, [pc, #36]	; (8012564 <FLASH_MassErase+0x44>)
 801253e:	f043 0304 	orr.w	r3, r3, #4
 8012542:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8012544:	4b07      	ldr	r3, [pc, #28]	; (8012564 <FLASH_MassErase+0x44>)
 8012546:	691a      	ldr	r2, [r3, #16]
 8012548:	79fb      	ldrb	r3, [r7, #7]
 801254a:	021b      	lsls	r3, r3, #8
 801254c:	4313      	orrs	r3, r2
 801254e:	4a05      	ldr	r2, [pc, #20]	; (8012564 <FLASH_MassErase+0x44>)
 8012550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012554:	6113      	str	r3, [r2, #16]
}
 8012556:	bf00      	nop
 8012558:	370c      	adds	r7, #12
 801255a:	46bd      	mov	sp, r7
 801255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012560:	4770      	bx	lr
 8012562:	bf00      	nop
 8012564:	40023c00 	.word	0x40023c00

08012568 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8012568:	b480      	push	{r7}
 801256a:	b085      	sub	sp, #20
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	460b      	mov	r3, r1
 8012572:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8012574:	2300      	movs	r3, #0
 8012576:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8012578:	78fb      	ldrb	r3, [r7, #3]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d102      	bne.n	8012584 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 801257e:	2300      	movs	r3, #0
 8012580:	60fb      	str	r3, [r7, #12]
 8012582:	e010      	b.n	80125a6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8012584:	78fb      	ldrb	r3, [r7, #3]
 8012586:	2b01      	cmp	r3, #1
 8012588:	d103      	bne.n	8012592 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801258a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801258e:	60fb      	str	r3, [r7, #12]
 8012590:	e009      	b.n	80125a6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8012592:	78fb      	ldrb	r3, [r7, #3]
 8012594:	2b02      	cmp	r3, #2
 8012596:	d103      	bne.n	80125a0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8012598:	f44f 7300 	mov.w	r3, #512	; 0x200
 801259c:	60fb      	str	r3, [r7, #12]
 801259e:	e002      	b.n	80125a6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80125a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80125a4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80125a6:	4b13      	ldr	r3, [pc, #76]	; (80125f4 <FLASH_Erase_Sector+0x8c>)
 80125a8:	691b      	ldr	r3, [r3, #16]
 80125aa:	4a12      	ldr	r2, [pc, #72]	; (80125f4 <FLASH_Erase_Sector+0x8c>)
 80125ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80125b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80125b2:	4b10      	ldr	r3, [pc, #64]	; (80125f4 <FLASH_Erase_Sector+0x8c>)
 80125b4:	691a      	ldr	r2, [r3, #16]
 80125b6:	490f      	ldr	r1, [pc, #60]	; (80125f4 <FLASH_Erase_Sector+0x8c>)
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	4313      	orrs	r3, r2
 80125bc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80125be:	4b0d      	ldr	r3, [pc, #52]	; (80125f4 <FLASH_Erase_Sector+0x8c>)
 80125c0:	691b      	ldr	r3, [r3, #16]
 80125c2:	4a0c      	ldr	r2, [pc, #48]	; (80125f4 <FLASH_Erase_Sector+0x8c>)
 80125c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80125c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80125ca:	4b0a      	ldr	r3, [pc, #40]	; (80125f4 <FLASH_Erase_Sector+0x8c>)
 80125cc:	691a      	ldr	r2, [r3, #16]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	00db      	lsls	r3, r3, #3
 80125d2:	4313      	orrs	r3, r2
 80125d4:	4a07      	ldr	r2, [pc, #28]	; (80125f4 <FLASH_Erase_Sector+0x8c>)
 80125d6:	f043 0302 	orr.w	r3, r3, #2
 80125da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80125dc:	4b05      	ldr	r3, [pc, #20]	; (80125f4 <FLASH_Erase_Sector+0x8c>)
 80125de:	691b      	ldr	r3, [r3, #16]
 80125e0:	4a04      	ldr	r2, [pc, #16]	; (80125f4 <FLASH_Erase_Sector+0x8c>)
 80125e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80125e6:	6113      	str	r3, [r2, #16]
}
 80125e8:	bf00      	nop
 80125ea:	3714      	adds	r7, #20
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr
 80125f4:	40023c00 	.word	0x40023c00

080125f8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80125f8:	b480      	push	{r7}
 80125fa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80125fc:	4b20      	ldr	r3, [pc, #128]	; (8012680 <FLASH_FlushCaches+0x88>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012604:	2b00      	cmp	r3, #0
 8012606:	d017      	beq.n	8012638 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012608:	4b1d      	ldr	r3, [pc, #116]	; (8012680 <FLASH_FlushCaches+0x88>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a1c      	ldr	r2, [pc, #112]	; (8012680 <FLASH_FlushCaches+0x88>)
 801260e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012612:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012614:	4b1a      	ldr	r3, [pc, #104]	; (8012680 <FLASH_FlushCaches+0x88>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	4a19      	ldr	r2, [pc, #100]	; (8012680 <FLASH_FlushCaches+0x88>)
 801261a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801261e:	6013      	str	r3, [r2, #0]
 8012620:	4b17      	ldr	r3, [pc, #92]	; (8012680 <FLASH_FlushCaches+0x88>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	4a16      	ldr	r2, [pc, #88]	; (8012680 <FLASH_FlushCaches+0x88>)
 8012626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801262a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801262c:	4b14      	ldr	r3, [pc, #80]	; (8012680 <FLASH_FlushCaches+0x88>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4a13      	ldr	r2, [pc, #76]	; (8012680 <FLASH_FlushCaches+0x88>)
 8012632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012636:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8012638:	4b11      	ldr	r3, [pc, #68]	; (8012680 <FLASH_FlushCaches+0x88>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012640:	2b00      	cmp	r3, #0
 8012642:	d017      	beq.n	8012674 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8012644:	4b0e      	ldr	r3, [pc, #56]	; (8012680 <FLASH_FlushCaches+0x88>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	4a0d      	ldr	r2, [pc, #52]	; (8012680 <FLASH_FlushCaches+0x88>)
 801264a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801264e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8012650:	4b0b      	ldr	r3, [pc, #44]	; (8012680 <FLASH_FlushCaches+0x88>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4a0a      	ldr	r2, [pc, #40]	; (8012680 <FLASH_FlushCaches+0x88>)
 8012656:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801265a:	6013      	str	r3, [r2, #0]
 801265c:	4b08      	ldr	r3, [pc, #32]	; (8012680 <FLASH_FlushCaches+0x88>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4a07      	ldr	r2, [pc, #28]	; (8012680 <FLASH_FlushCaches+0x88>)
 8012662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012666:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8012668:	4b05      	ldr	r3, [pc, #20]	; (8012680 <FLASH_FlushCaches+0x88>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	4a04      	ldr	r2, [pc, #16]	; (8012680 <FLASH_FlushCaches+0x88>)
 801266e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012672:	6013      	str	r3, [r2, #0]
  }
}
 8012674:	bf00      	nop
 8012676:	46bd      	mov	sp, r7
 8012678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop
 8012680:	40023c00 	.word	0x40023c00

08012684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012684:	b480      	push	{r7}
 8012686:	b089      	sub	sp, #36	; 0x24
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801268e:	2300      	movs	r3, #0
 8012690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012692:	2300      	movs	r3, #0
 8012694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012696:	2300      	movs	r3, #0
 8012698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801269a:	2300      	movs	r3, #0
 801269c:	61fb      	str	r3, [r7, #28]
 801269e:	e16b      	b.n	8012978 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80126a0:	2201      	movs	r2, #1
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	fa02 f303 	lsl.w	r3, r2, r3
 80126a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	697a      	ldr	r2, [r7, #20]
 80126b0:	4013      	ands	r3, r2
 80126b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80126b4:	693a      	ldr	r2, [r7, #16]
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	429a      	cmp	r2, r3
 80126ba:	f040 815a 	bne.w	8012972 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d00b      	beq.n	80126de <HAL_GPIO_Init+0x5a>
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	2b02      	cmp	r3, #2
 80126cc:	d007      	beq.n	80126de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80126d2:	2b11      	cmp	r3, #17
 80126d4:	d003      	beq.n	80126de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	2b12      	cmp	r3, #18
 80126dc:	d130      	bne.n	8012740 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	689b      	ldr	r3, [r3, #8]
 80126e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80126e4:	69fb      	ldr	r3, [r7, #28]
 80126e6:	005b      	lsls	r3, r3, #1
 80126e8:	2203      	movs	r2, #3
 80126ea:	fa02 f303 	lsl.w	r3, r2, r3
 80126ee:	43db      	mvns	r3, r3
 80126f0:	69ba      	ldr	r2, [r7, #24]
 80126f2:	4013      	ands	r3, r2
 80126f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	68da      	ldr	r2, [r3, #12]
 80126fa:	69fb      	ldr	r3, [r7, #28]
 80126fc:	005b      	lsls	r3, r3, #1
 80126fe:	fa02 f303 	lsl.w	r3, r2, r3
 8012702:	69ba      	ldr	r2, [r7, #24]
 8012704:	4313      	orrs	r3, r2
 8012706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	69ba      	ldr	r2, [r7, #24]
 801270c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	685b      	ldr	r3, [r3, #4]
 8012712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012714:	2201      	movs	r2, #1
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	fa02 f303 	lsl.w	r3, r2, r3
 801271c:	43db      	mvns	r3, r3
 801271e:	69ba      	ldr	r2, [r7, #24]
 8012720:	4013      	ands	r3, r2
 8012722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	685b      	ldr	r3, [r3, #4]
 8012728:	091b      	lsrs	r3, r3, #4
 801272a:	f003 0201 	and.w	r2, r3, #1
 801272e:	69fb      	ldr	r3, [r7, #28]
 8012730:	fa02 f303 	lsl.w	r3, r2, r3
 8012734:	69ba      	ldr	r2, [r7, #24]
 8012736:	4313      	orrs	r3, r2
 8012738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	69ba      	ldr	r2, [r7, #24]
 801273e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	005b      	lsls	r3, r3, #1
 801274a:	2203      	movs	r2, #3
 801274c:	fa02 f303 	lsl.w	r3, r2, r3
 8012750:	43db      	mvns	r3, r3
 8012752:	69ba      	ldr	r2, [r7, #24]
 8012754:	4013      	ands	r3, r2
 8012756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	689a      	ldr	r2, [r3, #8]
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	005b      	lsls	r3, r3, #1
 8012760:	fa02 f303 	lsl.w	r3, r2, r3
 8012764:	69ba      	ldr	r2, [r7, #24]
 8012766:	4313      	orrs	r3, r2
 8012768:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	69ba      	ldr	r2, [r7, #24]
 801276e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	2b02      	cmp	r3, #2
 8012776:	d003      	beq.n	8012780 <HAL_GPIO_Init+0xfc>
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	2b12      	cmp	r3, #18
 801277e:	d123      	bne.n	80127c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	08da      	lsrs	r2, r3, #3
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	3208      	adds	r2, #8
 8012788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	f003 0307 	and.w	r3, r3, #7
 8012794:	009b      	lsls	r3, r3, #2
 8012796:	220f      	movs	r2, #15
 8012798:	fa02 f303 	lsl.w	r3, r2, r3
 801279c:	43db      	mvns	r3, r3
 801279e:	69ba      	ldr	r2, [r7, #24]
 80127a0:	4013      	ands	r3, r2
 80127a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	691a      	ldr	r2, [r3, #16]
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	f003 0307 	and.w	r3, r3, #7
 80127ae:	009b      	lsls	r3, r3, #2
 80127b0:	fa02 f303 	lsl.w	r3, r2, r3
 80127b4:	69ba      	ldr	r2, [r7, #24]
 80127b6:	4313      	orrs	r3, r2
 80127b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80127ba:	69fb      	ldr	r3, [r7, #28]
 80127bc:	08da      	lsrs	r2, r3, #3
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	3208      	adds	r2, #8
 80127c2:	69b9      	ldr	r1, [r7, #24]
 80127c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	005b      	lsls	r3, r3, #1
 80127d2:	2203      	movs	r2, #3
 80127d4:	fa02 f303 	lsl.w	r3, r2, r3
 80127d8:	43db      	mvns	r3, r3
 80127da:	69ba      	ldr	r2, [r7, #24]
 80127dc:	4013      	ands	r3, r2
 80127de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	f003 0203 	and.w	r2, r3, #3
 80127e8:	69fb      	ldr	r3, [r7, #28]
 80127ea:	005b      	lsls	r3, r3, #1
 80127ec:	fa02 f303 	lsl.w	r3, r2, r3
 80127f0:	69ba      	ldr	r2, [r7, #24]
 80127f2:	4313      	orrs	r3, r2
 80127f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	69ba      	ldr	r2, [r7, #24]
 80127fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	685b      	ldr	r3, [r3, #4]
 8012800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012804:	2b00      	cmp	r3, #0
 8012806:	f000 80b4 	beq.w	8012972 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801280a:	2300      	movs	r3, #0
 801280c:	60fb      	str	r3, [r7, #12]
 801280e:	4b5f      	ldr	r3, [pc, #380]	; (801298c <HAL_GPIO_Init+0x308>)
 8012810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012812:	4a5e      	ldr	r2, [pc, #376]	; (801298c <HAL_GPIO_Init+0x308>)
 8012814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012818:	6453      	str	r3, [r2, #68]	; 0x44
 801281a:	4b5c      	ldr	r3, [pc, #368]	; (801298c <HAL_GPIO_Init+0x308>)
 801281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801281e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012822:	60fb      	str	r3, [r7, #12]
 8012824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012826:	4a5a      	ldr	r2, [pc, #360]	; (8012990 <HAL_GPIO_Init+0x30c>)
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	089b      	lsrs	r3, r3, #2
 801282c:	3302      	adds	r3, #2
 801282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012834:	69fb      	ldr	r3, [r7, #28]
 8012836:	f003 0303 	and.w	r3, r3, #3
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	220f      	movs	r2, #15
 801283e:	fa02 f303 	lsl.w	r3, r2, r3
 8012842:	43db      	mvns	r3, r3
 8012844:	69ba      	ldr	r2, [r7, #24]
 8012846:	4013      	ands	r3, r2
 8012848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4a51      	ldr	r2, [pc, #324]	; (8012994 <HAL_GPIO_Init+0x310>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d02b      	beq.n	80128aa <HAL_GPIO_Init+0x226>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	4a50      	ldr	r2, [pc, #320]	; (8012998 <HAL_GPIO_Init+0x314>)
 8012856:	4293      	cmp	r3, r2
 8012858:	d025      	beq.n	80128a6 <HAL_GPIO_Init+0x222>
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	4a4f      	ldr	r2, [pc, #316]	; (801299c <HAL_GPIO_Init+0x318>)
 801285e:	4293      	cmp	r3, r2
 8012860:	d01f      	beq.n	80128a2 <HAL_GPIO_Init+0x21e>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4a4e      	ldr	r2, [pc, #312]	; (80129a0 <HAL_GPIO_Init+0x31c>)
 8012866:	4293      	cmp	r3, r2
 8012868:	d019      	beq.n	801289e <HAL_GPIO_Init+0x21a>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4a4d      	ldr	r2, [pc, #308]	; (80129a4 <HAL_GPIO_Init+0x320>)
 801286e:	4293      	cmp	r3, r2
 8012870:	d013      	beq.n	801289a <HAL_GPIO_Init+0x216>
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	4a4c      	ldr	r2, [pc, #304]	; (80129a8 <HAL_GPIO_Init+0x324>)
 8012876:	4293      	cmp	r3, r2
 8012878:	d00d      	beq.n	8012896 <HAL_GPIO_Init+0x212>
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	4a4b      	ldr	r2, [pc, #300]	; (80129ac <HAL_GPIO_Init+0x328>)
 801287e:	4293      	cmp	r3, r2
 8012880:	d007      	beq.n	8012892 <HAL_GPIO_Init+0x20e>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	4a4a      	ldr	r2, [pc, #296]	; (80129b0 <HAL_GPIO_Init+0x32c>)
 8012886:	4293      	cmp	r3, r2
 8012888:	d101      	bne.n	801288e <HAL_GPIO_Init+0x20a>
 801288a:	2307      	movs	r3, #7
 801288c:	e00e      	b.n	80128ac <HAL_GPIO_Init+0x228>
 801288e:	2308      	movs	r3, #8
 8012890:	e00c      	b.n	80128ac <HAL_GPIO_Init+0x228>
 8012892:	2306      	movs	r3, #6
 8012894:	e00a      	b.n	80128ac <HAL_GPIO_Init+0x228>
 8012896:	2305      	movs	r3, #5
 8012898:	e008      	b.n	80128ac <HAL_GPIO_Init+0x228>
 801289a:	2304      	movs	r3, #4
 801289c:	e006      	b.n	80128ac <HAL_GPIO_Init+0x228>
 801289e:	2303      	movs	r3, #3
 80128a0:	e004      	b.n	80128ac <HAL_GPIO_Init+0x228>
 80128a2:	2302      	movs	r3, #2
 80128a4:	e002      	b.n	80128ac <HAL_GPIO_Init+0x228>
 80128a6:	2301      	movs	r3, #1
 80128a8:	e000      	b.n	80128ac <HAL_GPIO_Init+0x228>
 80128aa:	2300      	movs	r3, #0
 80128ac:	69fa      	ldr	r2, [r7, #28]
 80128ae:	f002 0203 	and.w	r2, r2, #3
 80128b2:	0092      	lsls	r2, r2, #2
 80128b4:	4093      	lsls	r3, r2
 80128b6:	69ba      	ldr	r2, [r7, #24]
 80128b8:	4313      	orrs	r3, r2
 80128ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80128bc:	4934      	ldr	r1, [pc, #208]	; (8012990 <HAL_GPIO_Init+0x30c>)
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	089b      	lsrs	r3, r3, #2
 80128c2:	3302      	adds	r3, #2
 80128c4:	69ba      	ldr	r2, [r7, #24]
 80128c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80128ca:	4b3a      	ldr	r3, [pc, #232]	; (80129b4 <HAL_GPIO_Init+0x330>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80128d0:	693b      	ldr	r3, [r7, #16]
 80128d2:	43db      	mvns	r3, r3
 80128d4:	69ba      	ldr	r2, [r7, #24]
 80128d6:	4013      	ands	r3, r2
 80128d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d003      	beq.n	80128ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80128e6:	69ba      	ldr	r2, [r7, #24]
 80128e8:	693b      	ldr	r3, [r7, #16]
 80128ea:	4313      	orrs	r3, r2
 80128ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80128ee:	4a31      	ldr	r2, [pc, #196]	; (80129b4 <HAL_GPIO_Init+0x330>)
 80128f0:	69bb      	ldr	r3, [r7, #24]
 80128f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80128f4:	4b2f      	ldr	r3, [pc, #188]	; (80129b4 <HAL_GPIO_Init+0x330>)
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	43db      	mvns	r3, r3
 80128fe:	69ba      	ldr	r2, [r7, #24]
 8012900:	4013      	ands	r3, r2
 8012902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	685b      	ldr	r3, [r3, #4]
 8012908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801290c:	2b00      	cmp	r3, #0
 801290e:	d003      	beq.n	8012918 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012910:	69ba      	ldr	r2, [r7, #24]
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	4313      	orrs	r3, r2
 8012916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012918:	4a26      	ldr	r2, [pc, #152]	; (80129b4 <HAL_GPIO_Init+0x330>)
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801291e:	4b25      	ldr	r3, [pc, #148]	; (80129b4 <HAL_GPIO_Init+0x330>)
 8012920:	689b      	ldr	r3, [r3, #8]
 8012922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	43db      	mvns	r3, r3
 8012928:	69ba      	ldr	r2, [r7, #24]
 801292a:	4013      	ands	r3, r2
 801292c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012936:	2b00      	cmp	r3, #0
 8012938:	d003      	beq.n	8012942 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801293a:	69ba      	ldr	r2, [r7, #24]
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	4313      	orrs	r3, r2
 8012940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012942:	4a1c      	ldr	r2, [pc, #112]	; (80129b4 <HAL_GPIO_Init+0x330>)
 8012944:	69bb      	ldr	r3, [r7, #24]
 8012946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012948:	4b1a      	ldr	r3, [pc, #104]	; (80129b4 <HAL_GPIO_Init+0x330>)
 801294a:	68db      	ldr	r3, [r3, #12]
 801294c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801294e:	693b      	ldr	r3, [r7, #16]
 8012950:	43db      	mvns	r3, r3
 8012952:	69ba      	ldr	r2, [r7, #24]
 8012954:	4013      	ands	r3, r2
 8012956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012960:	2b00      	cmp	r3, #0
 8012962:	d003      	beq.n	801296c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012964:	69ba      	ldr	r2, [r7, #24]
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	4313      	orrs	r3, r2
 801296a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801296c:	4a11      	ldr	r2, [pc, #68]	; (80129b4 <HAL_GPIO_Init+0x330>)
 801296e:	69bb      	ldr	r3, [r7, #24]
 8012970:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	3301      	adds	r3, #1
 8012976:	61fb      	str	r3, [r7, #28]
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	2b0f      	cmp	r3, #15
 801297c:	f67f ae90 	bls.w	80126a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012980:	bf00      	nop
 8012982:	3724      	adds	r7, #36	; 0x24
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr
 801298c:	40023800 	.word	0x40023800
 8012990:	40013800 	.word	0x40013800
 8012994:	40020000 	.word	0x40020000
 8012998:	40020400 	.word	0x40020400
 801299c:	40020800 	.word	0x40020800
 80129a0:	40020c00 	.word	0x40020c00
 80129a4:	40021000 	.word	0x40021000
 80129a8:	40021400 	.word	0x40021400
 80129ac:	40021800 	.word	0x40021800
 80129b0:	40021c00 	.word	0x40021c00
 80129b4:	40013c00 	.word	0x40013c00

080129b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
 80129c0:	460b      	mov	r3, r1
 80129c2:	807b      	strh	r3, [r7, #2]
 80129c4:	4613      	mov	r3, r2
 80129c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80129c8:	787b      	ldrb	r3, [r7, #1]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d003      	beq.n	80129d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80129ce:	887a      	ldrh	r2, [r7, #2]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80129d4:	e003      	b.n	80129de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80129d6:	887b      	ldrh	r3, [r7, #2]
 80129d8:	041a      	lsls	r2, r3, #16
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	619a      	str	r2, [r3, #24]
}
 80129de:	bf00      	nop
 80129e0:	370c      	adds	r7, #12
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr
	...

080129ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b082      	sub	sp, #8
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	4603      	mov	r3, r0
 80129f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80129f6:	4b08      	ldr	r3, [pc, #32]	; (8012a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80129f8:	695a      	ldr	r2, [r3, #20]
 80129fa:	88fb      	ldrh	r3, [r7, #6]
 80129fc:	4013      	ands	r3, r2
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d006      	beq.n	8012a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8012a02:	4a05      	ldr	r2, [pc, #20]	; (8012a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012a04:	88fb      	ldrh	r3, [r7, #6]
 8012a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012a08:	88fb      	ldrh	r3, [r7, #6]
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7fe f940 	bl	8010c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8012a10:	bf00      	nop
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	40013c00 	.word	0x40013c00

08012a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b086      	sub	sp, #24
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d101      	bne.n	8012a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	e25b      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f003 0301 	and.w	r3, r3, #1
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d075      	beq.n	8012b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012a3a:	4ba3      	ldr	r3, [pc, #652]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012a3c:	689b      	ldr	r3, [r3, #8]
 8012a3e:	f003 030c 	and.w	r3, r3, #12
 8012a42:	2b04      	cmp	r3, #4
 8012a44:	d00c      	beq.n	8012a60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012a46:	4ba0      	ldr	r3, [pc, #640]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012a48:	689b      	ldr	r3, [r3, #8]
 8012a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012a4e:	2b08      	cmp	r3, #8
 8012a50:	d112      	bne.n	8012a78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012a52:	4b9d      	ldr	r3, [pc, #628]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012a54:	685b      	ldr	r3, [r3, #4]
 8012a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012a5e:	d10b      	bne.n	8012a78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012a60:	4b99      	ldr	r3, [pc, #612]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d05b      	beq.n	8012b24 <HAL_RCC_OscConfig+0x108>
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	685b      	ldr	r3, [r3, #4]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d157      	bne.n	8012b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012a74:	2301      	movs	r3, #1
 8012a76:	e236      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	685b      	ldr	r3, [r3, #4]
 8012a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a80:	d106      	bne.n	8012a90 <HAL_RCC_OscConfig+0x74>
 8012a82:	4b91      	ldr	r3, [pc, #580]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	4a90      	ldr	r2, [pc, #576]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012a8c:	6013      	str	r3, [r2, #0]
 8012a8e:	e01d      	b.n	8012acc <HAL_RCC_OscConfig+0xb0>
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012a98:	d10c      	bne.n	8012ab4 <HAL_RCC_OscConfig+0x98>
 8012a9a:	4b8b      	ldr	r3, [pc, #556]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	4a8a      	ldr	r2, [pc, #552]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012aa4:	6013      	str	r3, [r2, #0]
 8012aa6:	4b88      	ldr	r3, [pc, #544]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	4a87      	ldr	r2, [pc, #540]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012ab0:	6013      	str	r3, [r2, #0]
 8012ab2:	e00b      	b.n	8012acc <HAL_RCC_OscConfig+0xb0>
 8012ab4:	4b84      	ldr	r3, [pc, #528]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	4a83      	ldr	r2, [pc, #524]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012abe:	6013      	str	r3, [r2, #0]
 8012ac0:	4b81      	ldr	r3, [pc, #516]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	4a80      	ldr	r2, [pc, #512]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	685b      	ldr	r3, [r3, #4]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d013      	beq.n	8012afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012ad4:	f7fe fa90 	bl	8010ff8 <HAL_GetTick>
 8012ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012ada:	e008      	b.n	8012aee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012adc:	f7fe fa8c 	bl	8010ff8 <HAL_GetTick>
 8012ae0:	4602      	mov	r2, r0
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	1ad3      	subs	r3, r2, r3
 8012ae6:	2b64      	cmp	r3, #100	; 0x64
 8012ae8:	d901      	bls.n	8012aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012aea:	2303      	movs	r3, #3
 8012aec:	e1fb      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012aee:	4b76      	ldr	r3, [pc, #472]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d0f0      	beq.n	8012adc <HAL_RCC_OscConfig+0xc0>
 8012afa:	e014      	b.n	8012b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012afc:	f7fe fa7c 	bl	8010ff8 <HAL_GetTick>
 8012b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012b02:	e008      	b.n	8012b16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012b04:	f7fe fa78 	bl	8010ff8 <HAL_GetTick>
 8012b08:	4602      	mov	r2, r0
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	1ad3      	subs	r3, r2, r3
 8012b0e:	2b64      	cmp	r3, #100	; 0x64
 8012b10:	d901      	bls.n	8012b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012b12:	2303      	movs	r3, #3
 8012b14:	e1e7      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012b16:	4b6c      	ldr	r3, [pc, #432]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d1f0      	bne.n	8012b04 <HAL_RCC_OscConfig+0xe8>
 8012b22:	e000      	b.n	8012b26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	f003 0302 	and.w	r3, r3, #2
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d063      	beq.n	8012bfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012b32:	4b65      	ldr	r3, [pc, #404]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012b34:	689b      	ldr	r3, [r3, #8]
 8012b36:	f003 030c 	and.w	r3, r3, #12
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d00b      	beq.n	8012b56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012b3e:	4b62      	ldr	r3, [pc, #392]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012b40:	689b      	ldr	r3, [r3, #8]
 8012b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012b46:	2b08      	cmp	r3, #8
 8012b48:	d11c      	bne.n	8012b84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012b4a:	4b5f      	ldr	r3, [pc, #380]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012b4c:	685b      	ldr	r3, [r3, #4]
 8012b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d116      	bne.n	8012b84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012b56:	4b5c      	ldr	r3, [pc, #368]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	f003 0302 	and.w	r3, r3, #2
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d005      	beq.n	8012b6e <HAL_RCC_OscConfig+0x152>
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	68db      	ldr	r3, [r3, #12]
 8012b66:	2b01      	cmp	r3, #1
 8012b68:	d001      	beq.n	8012b6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	e1bb      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012b6e:	4b56      	ldr	r3, [pc, #344]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	691b      	ldr	r3, [r3, #16]
 8012b7a:	00db      	lsls	r3, r3, #3
 8012b7c:	4952      	ldr	r1, [pc, #328]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012b7e:	4313      	orrs	r3, r2
 8012b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012b82:	e03a      	b.n	8012bfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	68db      	ldr	r3, [r3, #12]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d020      	beq.n	8012bce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012b8c:	4b4f      	ldr	r3, [pc, #316]	; (8012ccc <HAL_RCC_OscConfig+0x2b0>)
 8012b8e:	2201      	movs	r2, #1
 8012b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012b92:	f7fe fa31 	bl	8010ff8 <HAL_GetTick>
 8012b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012b98:	e008      	b.n	8012bac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012b9a:	f7fe fa2d 	bl	8010ff8 <HAL_GetTick>
 8012b9e:	4602      	mov	r2, r0
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	1ad3      	subs	r3, r2, r3
 8012ba4:	2b02      	cmp	r3, #2
 8012ba6:	d901      	bls.n	8012bac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012ba8:	2303      	movs	r3, #3
 8012baa:	e19c      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012bac:	4b46      	ldr	r3, [pc, #280]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	f003 0302 	and.w	r3, r3, #2
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d0f0      	beq.n	8012b9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012bb8:	4b43      	ldr	r3, [pc, #268]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	691b      	ldr	r3, [r3, #16]
 8012bc4:	00db      	lsls	r3, r3, #3
 8012bc6:	4940      	ldr	r1, [pc, #256]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012bc8:	4313      	orrs	r3, r2
 8012bca:	600b      	str	r3, [r1, #0]
 8012bcc:	e015      	b.n	8012bfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012bce:	4b3f      	ldr	r3, [pc, #252]	; (8012ccc <HAL_RCC_OscConfig+0x2b0>)
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012bd4:	f7fe fa10 	bl	8010ff8 <HAL_GetTick>
 8012bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012bda:	e008      	b.n	8012bee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012bdc:	f7fe fa0c 	bl	8010ff8 <HAL_GetTick>
 8012be0:	4602      	mov	r2, r0
 8012be2:	693b      	ldr	r3, [r7, #16]
 8012be4:	1ad3      	subs	r3, r2, r3
 8012be6:	2b02      	cmp	r3, #2
 8012be8:	d901      	bls.n	8012bee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012bea:	2303      	movs	r3, #3
 8012bec:	e17b      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012bee:	4b36      	ldr	r3, [pc, #216]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	f003 0302 	and.w	r3, r3, #2
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d1f0      	bne.n	8012bdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	f003 0308 	and.w	r3, r3, #8
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d030      	beq.n	8012c68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	695b      	ldr	r3, [r3, #20]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d016      	beq.n	8012c3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012c0e:	4b30      	ldr	r3, [pc, #192]	; (8012cd0 <HAL_RCC_OscConfig+0x2b4>)
 8012c10:	2201      	movs	r2, #1
 8012c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c14:	f7fe f9f0 	bl	8010ff8 <HAL_GetTick>
 8012c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012c1a:	e008      	b.n	8012c2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012c1c:	f7fe f9ec 	bl	8010ff8 <HAL_GetTick>
 8012c20:	4602      	mov	r2, r0
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	1ad3      	subs	r3, r2, r3
 8012c26:	2b02      	cmp	r3, #2
 8012c28:	d901      	bls.n	8012c2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012c2a:	2303      	movs	r3, #3
 8012c2c:	e15b      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012c2e:	4b26      	ldr	r3, [pc, #152]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c32:	f003 0302 	and.w	r3, r3, #2
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d0f0      	beq.n	8012c1c <HAL_RCC_OscConfig+0x200>
 8012c3a:	e015      	b.n	8012c68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012c3c:	4b24      	ldr	r3, [pc, #144]	; (8012cd0 <HAL_RCC_OscConfig+0x2b4>)
 8012c3e:	2200      	movs	r2, #0
 8012c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012c42:	f7fe f9d9 	bl	8010ff8 <HAL_GetTick>
 8012c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012c48:	e008      	b.n	8012c5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012c4a:	f7fe f9d5 	bl	8010ff8 <HAL_GetTick>
 8012c4e:	4602      	mov	r2, r0
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	1ad3      	subs	r3, r2, r3
 8012c54:	2b02      	cmp	r3, #2
 8012c56:	d901      	bls.n	8012c5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012c58:	2303      	movs	r3, #3
 8012c5a:	e144      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012c5c:	4b1a      	ldr	r3, [pc, #104]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c60:	f003 0302 	and.w	r3, r3, #2
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d1f0      	bne.n	8012c4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	f003 0304 	and.w	r3, r3, #4
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	f000 80a0 	beq.w	8012db6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012c76:	2300      	movs	r3, #0
 8012c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012c7a:	4b13      	ldr	r3, [pc, #76]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d10f      	bne.n	8012ca6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012c86:	2300      	movs	r3, #0
 8012c88:	60bb      	str	r3, [r7, #8]
 8012c8a:	4b0f      	ldr	r3, [pc, #60]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c8e:	4a0e      	ldr	r2, [pc, #56]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012c94:	6413      	str	r3, [r2, #64]	; 0x40
 8012c96:	4b0c      	ldr	r3, [pc, #48]	; (8012cc8 <HAL_RCC_OscConfig+0x2ac>)
 8012c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012c9e:	60bb      	str	r3, [r7, #8]
 8012ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012ca6:	4b0b      	ldr	r3, [pc, #44]	; (8012cd4 <HAL_RCC_OscConfig+0x2b8>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d121      	bne.n	8012cf6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012cb2:	4b08      	ldr	r3, [pc, #32]	; (8012cd4 <HAL_RCC_OscConfig+0x2b8>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	4a07      	ldr	r2, [pc, #28]	; (8012cd4 <HAL_RCC_OscConfig+0x2b8>)
 8012cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012cbe:	f7fe f99b 	bl	8010ff8 <HAL_GetTick>
 8012cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012cc4:	e011      	b.n	8012cea <HAL_RCC_OscConfig+0x2ce>
 8012cc6:	bf00      	nop
 8012cc8:	40023800 	.word	0x40023800
 8012ccc:	42470000 	.word	0x42470000
 8012cd0:	42470e80 	.word	0x42470e80
 8012cd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012cd8:	f7fe f98e 	bl	8010ff8 <HAL_GetTick>
 8012cdc:	4602      	mov	r2, r0
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	1ad3      	subs	r3, r2, r3
 8012ce2:	2b02      	cmp	r3, #2
 8012ce4:	d901      	bls.n	8012cea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012ce6:	2303      	movs	r3, #3
 8012ce8:	e0fd      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012cea:	4b81      	ldr	r3, [pc, #516]	; (8012ef0 <HAL_RCC_OscConfig+0x4d4>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d0f0      	beq.n	8012cd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	689b      	ldr	r3, [r3, #8]
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	d106      	bne.n	8012d0c <HAL_RCC_OscConfig+0x2f0>
 8012cfe:	4b7d      	ldr	r3, [pc, #500]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d02:	4a7c      	ldr	r2, [pc, #496]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d04:	f043 0301 	orr.w	r3, r3, #1
 8012d08:	6713      	str	r3, [r2, #112]	; 0x70
 8012d0a:	e01c      	b.n	8012d46 <HAL_RCC_OscConfig+0x32a>
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	689b      	ldr	r3, [r3, #8]
 8012d10:	2b05      	cmp	r3, #5
 8012d12:	d10c      	bne.n	8012d2e <HAL_RCC_OscConfig+0x312>
 8012d14:	4b77      	ldr	r3, [pc, #476]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d18:	4a76      	ldr	r2, [pc, #472]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d1a:	f043 0304 	orr.w	r3, r3, #4
 8012d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8012d20:	4b74      	ldr	r3, [pc, #464]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d24:	4a73      	ldr	r2, [pc, #460]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d26:	f043 0301 	orr.w	r3, r3, #1
 8012d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8012d2c:	e00b      	b.n	8012d46 <HAL_RCC_OscConfig+0x32a>
 8012d2e:	4b71      	ldr	r3, [pc, #452]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d32:	4a70      	ldr	r2, [pc, #448]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d34:	f023 0301 	bic.w	r3, r3, #1
 8012d38:	6713      	str	r3, [r2, #112]	; 0x70
 8012d3a:	4b6e      	ldr	r3, [pc, #440]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d3e:	4a6d      	ldr	r2, [pc, #436]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d40:	f023 0304 	bic.w	r3, r3, #4
 8012d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	689b      	ldr	r3, [r3, #8]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d015      	beq.n	8012d7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012d4e:	f7fe f953 	bl	8010ff8 <HAL_GetTick>
 8012d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012d54:	e00a      	b.n	8012d6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012d56:	f7fe f94f 	bl	8010ff8 <HAL_GetTick>
 8012d5a:	4602      	mov	r2, r0
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	1ad3      	subs	r3, r2, r3
 8012d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d64:	4293      	cmp	r3, r2
 8012d66:	d901      	bls.n	8012d6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012d68:	2303      	movs	r3, #3
 8012d6a:	e0bc      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012d6c:	4b61      	ldr	r3, [pc, #388]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d70:	f003 0302 	and.w	r3, r3, #2
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d0ee      	beq.n	8012d56 <HAL_RCC_OscConfig+0x33a>
 8012d78:	e014      	b.n	8012da4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012d7a:	f7fe f93d 	bl	8010ff8 <HAL_GetTick>
 8012d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012d80:	e00a      	b.n	8012d98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012d82:	f7fe f939 	bl	8010ff8 <HAL_GetTick>
 8012d86:	4602      	mov	r2, r0
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d90:	4293      	cmp	r3, r2
 8012d92:	d901      	bls.n	8012d98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012d94:	2303      	movs	r3, #3
 8012d96:	e0a6      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012d98:	4b56      	ldr	r3, [pc, #344]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d9c:	f003 0302 	and.w	r3, r3, #2
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1ee      	bne.n	8012d82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012da4:	7dfb      	ldrb	r3, [r7, #23]
 8012da6:	2b01      	cmp	r3, #1
 8012da8:	d105      	bne.n	8012db6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012daa:	4b52      	ldr	r3, [pc, #328]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dae:	4a51      	ldr	r2, [pc, #324]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012db4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	699b      	ldr	r3, [r3, #24]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	f000 8092 	beq.w	8012ee4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012dc0:	4b4c      	ldr	r3, [pc, #304]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012dc2:	689b      	ldr	r3, [r3, #8]
 8012dc4:	f003 030c 	and.w	r3, r3, #12
 8012dc8:	2b08      	cmp	r3, #8
 8012dca:	d05c      	beq.n	8012e86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	699b      	ldr	r3, [r3, #24]
 8012dd0:	2b02      	cmp	r3, #2
 8012dd2:	d141      	bne.n	8012e58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012dd4:	4b48      	ldr	r3, [pc, #288]	; (8012ef8 <HAL_RCC_OscConfig+0x4dc>)
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012dda:	f7fe f90d 	bl	8010ff8 <HAL_GetTick>
 8012dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012de0:	e008      	b.n	8012df4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012de2:	f7fe f909 	bl	8010ff8 <HAL_GetTick>
 8012de6:	4602      	mov	r2, r0
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	1ad3      	subs	r3, r2, r3
 8012dec:	2b02      	cmp	r3, #2
 8012dee:	d901      	bls.n	8012df4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012df0:	2303      	movs	r3, #3
 8012df2:	e078      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012df4:	4b3f      	ldr	r3, [pc, #252]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d1f0      	bne.n	8012de2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	69da      	ldr	r2, [r3, #28]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6a1b      	ldr	r3, [r3, #32]
 8012e08:	431a      	orrs	r2, r3
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e0e:	019b      	lsls	r3, r3, #6
 8012e10:	431a      	orrs	r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e16:	085b      	lsrs	r3, r3, #1
 8012e18:	3b01      	subs	r3, #1
 8012e1a:	041b      	lsls	r3, r3, #16
 8012e1c:	431a      	orrs	r2, r3
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e22:	061b      	lsls	r3, r3, #24
 8012e24:	4933      	ldr	r1, [pc, #204]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012e26:	4313      	orrs	r3, r2
 8012e28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012e2a:	4b33      	ldr	r3, [pc, #204]	; (8012ef8 <HAL_RCC_OscConfig+0x4dc>)
 8012e2c:	2201      	movs	r2, #1
 8012e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012e30:	f7fe f8e2 	bl	8010ff8 <HAL_GetTick>
 8012e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012e36:	e008      	b.n	8012e4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012e38:	f7fe f8de 	bl	8010ff8 <HAL_GetTick>
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	1ad3      	subs	r3, r2, r3
 8012e42:	2b02      	cmp	r3, #2
 8012e44:	d901      	bls.n	8012e4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8012e46:	2303      	movs	r3, #3
 8012e48:	e04d      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012e4a:	4b2a      	ldr	r3, [pc, #168]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d0f0      	beq.n	8012e38 <HAL_RCC_OscConfig+0x41c>
 8012e56:	e045      	b.n	8012ee4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012e58:	4b27      	ldr	r3, [pc, #156]	; (8012ef8 <HAL_RCC_OscConfig+0x4dc>)
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012e5e:	f7fe f8cb 	bl	8010ff8 <HAL_GetTick>
 8012e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012e64:	e008      	b.n	8012e78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012e66:	f7fe f8c7 	bl	8010ff8 <HAL_GetTick>
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	1ad3      	subs	r3, r2, r3
 8012e70:	2b02      	cmp	r3, #2
 8012e72:	d901      	bls.n	8012e78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012e74:	2303      	movs	r3, #3
 8012e76:	e036      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012e78:	4b1e      	ldr	r3, [pc, #120]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d1f0      	bne.n	8012e66 <HAL_RCC_OscConfig+0x44a>
 8012e84:	e02e      	b.n	8012ee4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	699b      	ldr	r3, [r3, #24]
 8012e8a:	2b01      	cmp	r3, #1
 8012e8c:	d101      	bne.n	8012e92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8012e8e:	2301      	movs	r3, #1
 8012e90:	e029      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012e92:	4b18      	ldr	r3, [pc, #96]	; (8012ef4 <HAL_RCC_OscConfig+0x4d8>)
 8012e94:	685b      	ldr	r3, [r3, #4]
 8012e96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	69db      	ldr	r3, [r3, #28]
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d11c      	bne.n	8012ee0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	d115      	bne.n	8012ee0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012eba:	4013      	ands	r3, r2
 8012ebc:	687a      	ldr	r2, [r7, #4]
 8012ebe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	d10d      	bne.n	8012ee0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d106      	bne.n	8012ee0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d001      	beq.n	8012ee4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	e000      	b.n	8012ee6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8012ee4:	2300      	movs	r3, #0
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3718      	adds	r7, #24
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}
 8012eee:	bf00      	nop
 8012ef0:	40007000 	.word	0x40007000
 8012ef4:	40023800 	.word	0x40023800
 8012ef8:	42470060 	.word	0x42470060

08012efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b084      	sub	sp, #16
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d101      	bne.n	8012f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	e0cc      	b.n	80130aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012f10:	4b68      	ldr	r3, [pc, #416]	; (80130b4 <HAL_RCC_ClockConfig+0x1b8>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	f003 030f 	and.w	r3, r3, #15
 8012f18:	683a      	ldr	r2, [r7, #0]
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d90c      	bls.n	8012f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012f1e:	4b65      	ldr	r3, [pc, #404]	; (80130b4 <HAL_RCC_ClockConfig+0x1b8>)
 8012f20:	683a      	ldr	r2, [r7, #0]
 8012f22:	b2d2      	uxtb	r2, r2
 8012f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012f26:	4b63      	ldr	r3, [pc, #396]	; (80130b4 <HAL_RCC_ClockConfig+0x1b8>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	f003 030f 	and.w	r3, r3, #15
 8012f2e:	683a      	ldr	r2, [r7, #0]
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d001      	beq.n	8012f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012f34:	2301      	movs	r3, #1
 8012f36:	e0b8      	b.n	80130aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	f003 0302 	and.w	r3, r3, #2
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d020      	beq.n	8012f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	f003 0304 	and.w	r3, r3, #4
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d005      	beq.n	8012f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012f50:	4b59      	ldr	r3, [pc, #356]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f52:	689b      	ldr	r3, [r3, #8]
 8012f54:	4a58      	ldr	r2, [pc, #352]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012f5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	f003 0308 	and.w	r3, r3, #8
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d005      	beq.n	8012f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012f68:	4b53      	ldr	r3, [pc, #332]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f6a:	689b      	ldr	r3, [r3, #8]
 8012f6c:	4a52      	ldr	r2, [pc, #328]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012f72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012f74:	4b50      	ldr	r3, [pc, #320]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f76:	689b      	ldr	r3, [r3, #8]
 8012f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	689b      	ldr	r3, [r3, #8]
 8012f80:	494d      	ldr	r1, [pc, #308]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f82:	4313      	orrs	r3, r2
 8012f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	f003 0301 	and.w	r3, r3, #1
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d044      	beq.n	801301c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d107      	bne.n	8012faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012f9a:	4b47      	ldr	r3, [pc, #284]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d119      	bne.n	8012fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	e07f      	b.n	80130aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	2b02      	cmp	r3, #2
 8012fb0:	d003      	beq.n	8012fba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012fb6:	2b03      	cmp	r3, #3
 8012fb8:	d107      	bne.n	8012fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012fba:	4b3f      	ldr	r3, [pc, #252]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d109      	bne.n	8012fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	e06f      	b.n	80130aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012fca:	4b3b      	ldr	r3, [pc, #236]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	f003 0302 	and.w	r3, r3, #2
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d101      	bne.n	8012fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	e067      	b.n	80130aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012fda:	4b37      	ldr	r3, [pc, #220]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012fdc:	689b      	ldr	r3, [r3, #8]
 8012fde:	f023 0203 	bic.w	r2, r3, #3
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	4934      	ldr	r1, [pc, #208]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8012fe8:	4313      	orrs	r3, r2
 8012fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012fec:	f7fe f804 	bl	8010ff8 <HAL_GetTick>
 8012ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012ff2:	e00a      	b.n	801300a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012ff4:	f7fe f800 	bl	8010ff8 <HAL_GetTick>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	1ad3      	subs	r3, r2, r3
 8012ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8013002:	4293      	cmp	r3, r2
 8013004:	d901      	bls.n	801300a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013006:	2303      	movs	r3, #3
 8013008:	e04f      	b.n	80130aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801300a:	4b2b      	ldr	r3, [pc, #172]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 801300c:	689b      	ldr	r3, [r3, #8]
 801300e:	f003 020c 	and.w	r2, r3, #12
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	685b      	ldr	r3, [r3, #4]
 8013016:	009b      	lsls	r3, r3, #2
 8013018:	429a      	cmp	r2, r3
 801301a:	d1eb      	bne.n	8012ff4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801301c:	4b25      	ldr	r3, [pc, #148]	; (80130b4 <HAL_RCC_ClockConfig+0x1b8>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	f003 030f 	and.w	r3, r3, #15
 8013024:	683a      	ldr	r2, [r7, #0]
 8013026:	429a      	cmp	r2, r3
 8013028:	d20c      	bcs.n	8013044 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801302a:	4b22      	ldr	r3, [pc, #136]	; (80130b4 <HAL_RCC_ClockConfig+0x1b8>)
 801302c:	683a      	ldr	r2, [r7, #0]
 801302e:	b2d2      	uxtb	r2, r2
 8013030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013032:	4b20      	ldr	r3, [pc, #128]	; (80130b4 <HAL_RCC_ClockConfig+0x1b8>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	f003 030f 	and.w	r3, r3, #15
 801303a:	683a      	ldr	r2, [r7, #0]
 801303c:	429a      	cmp	r2, r3
 801303e:	d001      	beq.n	8013044 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013040:	2301      	movs	r3, #1
 8013042:	e032      	b.n	80130aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	f003 0304 	and.w	r3, r3, #4
 801304c:	2b00      	cmp	r3, #0
 801304e:	d008      	beq.n	8013062 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013050:	4b19      	ldr	r3, [pc, #100]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8013052:	689b      	ldr	r3, [r3, #8]
 8013054:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	68db      	ldr	r3, [r3, #12]
 801305c:	4916      	ldr	r1, [pc, #88]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 801305e:	4313      	orrs	r3, r2
 8013060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	f003 0308 	and.w	r3, r3, #8
 801306a:	2b00      	cmp	r3, #0
 801306c:	d009      	beq.n	8013082 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801306e:	4b12      	ldr	r3, [pc, #72]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 8013070:	689b      	ldr	r3, [r3, #8]
 8013072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	691b      	ldr	r3, [r3, #16]
 801307a:	00db      	lsls	r3, r3, #3
 801307c:	490e      	ldr	r1, [pc, #56]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 801307e:	4313      	orrs	r3, r2
 8013080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013082:	f000 f821 	bl	80130c8 <HAL_RCC_GetSysClockFreq>
 8013086:	4601      	mov	r1, r0
 8013088:	4b0b      	ldr	r3, [pc, #44]	; (80130b8 <HAL_RCC_ClockConfig+0x1bc>)
 801308a:	689b      	ldr	r3, [r3, #8]
 801308c:	091b      	lsrs	r3, r3, #4
 801308e:	f003 030f 	and.w	r3, r3, #15
 8013092:	4a0a      	ldr	r2, [pc, #40]	; (80130bc <HAL_RCC_ClockConfig+0x1c0>)
 8013094:	5cd3      	ldrb	r3, [r2, r3]
 8013096:	fa21 f303 	lsr.w	r3, r1, r3
 801309a:	4a09      	ldr	r2, [pc, #36]	; (80130c0 <HAL_RCC_ClockConfig+0x1c4>)
 801309c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801309e:	4b09      	ldr	r3, [pc, #36]	; (80130c4 <HAL_RCC_ClockConfig+0x1c8>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7fd ff64 	bl	8010f70 <HAL_InitTick>

  return HAL_OK;
 80130a8:	2300      	movs	r3, #0
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3710      	adds	r7, #16
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}
 80130b2:	bf00      	nop
 80130b4:	40023c00 	.word	0x40023c00
 80130b8:	40023800 	.word	0x40023800
 80130bc:	0801b320 	.word	0x0801b320
 80130c0:	20000020 	.word	0x20000020
 80130c4:	20000024 	.word	0x20000024

080130c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80130c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130ca:	b085      	sub	sp, #20
 80130cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80130ce:	2300      	movs	r3, #0
 80130d0:	607b      	str	r3, [r7, #4]
 80130d2:	2300      	movs	r3, #0
 80130d4:	60fb      	str	r3, [r7, #12]
 80130d6:	2300      	movs	r3, #0
 80130d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80130da:	2300      	movs	r3, #0
 80130dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80130de:	4b63      	ldr	r3, [pc, #396]	; (801326c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80130e0:	689b      	ldr	r3, [r3, #8]
 80130e2:	f003 030c 	and.w	r3, r3, #12
 80130e6:	2b04      	cmp	r3, #4
 80130e8:	d007      	beq.n	80130fa <HAL_RCC_GetSysClockFreq+0x32>
 80130ea:	2b08      	cmp	r3, #8
 80130ec:	d008      	beq.n	8013100 <HAL_RCC_GetSysClockFreq+0x38>
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	f040 80b4 	bne.w	801325c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80130f4:	4b5e      	ldr	r3, [pc, #376]	; (8013270 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80130f6:	60bb      	str	r3, [r7, #8]
       break;
 80130f8:	e0b3      	b.n	8013262 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80130fa:	4b5e      	ldr	r3, [pc, #376]	; (8013274 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80130fc:	60bb      	str	r3, [r7, #8]
      break;
 80130fe:	e0b0      	b.n	8013262 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013100:	4b5a      	ldr	r3, [pc, #360]	; (801326c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013108:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801310a:	4b58      	ldr	r3, [pc, #352]	; (801326c <HAL_RCC_GetSysClockFreq+0x1a4>)
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013112:	2b00      	cmp	r3, #0
 8013114:	d04a      	beq.n	80131ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013116:	4b55      	ldr	r3, [pc, #340]	; (801326c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	099b      	lsrs	r3, r3, #6
 801311c:	f04f 0400 	mov.w	r4, #0
 8013120:	f240 11ff 	movw	r1, #511	; 0x1ff
 8013124:	f04f 0200 	mov.w	r2, #0
 8013128:	ea03 0501 	and.w	r5, r3, r1
 801312c:	ea04 0602 	and.w	r6, r4, r2
 8013130:	4629      	mov	r1, r5
 8013132:	4632      	mov	r2, r6
 8013134:	f04f 0300 	mov.w	r3, #0
 8013138:	f04f 0400 	mov.w	r4, #0
 801313c:	0154      	lsls	r4, r2, #5
 801313e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013142:	014b      	lsls	r3, r1, #5
 8013144:	4619      	mov	r1, r3
 8013146:	4622      	mov	r2, r4
 8013148:	1b49      	subs	r1, r1, r5
 801314a:	eb62 0206 	sbc.w	r2, r2, r6
 801314e:	f04f 0300 	mov.w	r3, #0
 8013152:	f04f 0400 	mov.w	r4, #0
 8013156:	0194      	lsls	r4, r2, #6
 8013158:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801315c:	018b      	lsls	r3, r1, #6
 801315e:	1a5b      	subs	r3, r3, r1
 8013160:	eb64 0402 	sbc.w	r4, r4, r2
 8013164:	f04f 0100 	mov.w	r1, #0
 8013168:	f04f 0200 	mov.w	r2, #0
 801316c:	00e2      	lsls	r2, r4, #3
 801316e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8013172:	00d9      	lsls	r1, r3, #3
 8013174:	460b      	mov	r3, r1
 8013176:	4614      	mov	r4, r2
 8013178:	195b      	adds	r3, r3, r5
 801317a:	eb44 0406 	adc.w	r4, r4, r6
 801317e:	f04f 0100 	mov.w	r1, #0
 8013182:	f04f 0200 	mov.w	r2, #0
 8013186:	0262      	lsls	r2, r4, #9
 8013188:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 801318c:	0259      	lsls	r1, r3, #9
 801318e:	460b      	mov	r3, r1
 8013190:	4614      	mov	r4, r2
 8013192:	4618      	mov	r0, r3
 8013194:	4621      	mov	r1, r4
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	f04f 0400 	mov.w	r4, #0
 801319c:	461a      	mov	r2, r3
 801319e:	4623      	mov	r3, r4
 80131a0:	f7f5 fcaa 	bl	8008af8 <__aeabi_uldivmod>
 80131a4:	4603      	mov	r3, r0
 80131a6:	460c      	mov	r4, r1
 80131a8:	60fb      	str	r3, [r7, #12]
 80131aa:	e049      	b.n	8013240 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80131ac:	4b2f      	ldr	r3, [pc, #188]	; (801326c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	099b      	lsrs	r3, r3, #6
 80131b2:	f04f 0400 	mov.w	r4, #0
 80131b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80131ba:	f04f 0200 	mov.w	r2, #0
 80131be:	ea03 0501 	and.w	r5, r3, r1
 80131c2:	ea04 0602 	and.w	r6, r4, r2
 80131c6:	4629      	mov	r1, r5
 80131c8:	4632      	mov	r2, r6
 80131ca:	f04f 0300 	mov.w	r3, #0
 80131ce:	f04f 0400 	mov.w	r4, #0
 80131d2:	0154      	lsls	r4, r2, #5
 80131d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80131d8:	014b      	lsls	r3, r1, #5
 80131da:	4619      	mov	r1, r3
 80131dc:	4622      	mov	r2, r4
 80131de:	1b49      	subs	r1, r1, r5
 80131e0:	eb62 0206 	sbc.w	r2, r2, r6
 80131e4:	f04f 0300 	mov.w	r3, #0
 80131e8:	f04f 0400 	mov.w	r4, #0
 80131ec:	0194      	lsls	r4, r2, #6
 80131ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80131f2:	018b      	lsls	r3, r1, #6
 80131f4:	1a5b      	subs	r3, r3, r1
 80131f6:	eb64 0402 	sbc.w	r4, r4, r2
 80131fa:	f04f 0100 	mov.w	r1, #0
 80131fe:	f04f 0200 	mov.w	r2, #0
 8013202:	00e2      	lsls	r2, r4, #3
 8013204:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8013208:	00d9      	lsls	r1, r3, #3
 801320a:	460b      	mov	r3, r1
 801320c:	4614      	mov	r4, r2
 801320e:	195b      	adds	r3, r3, r5
 8013210:	eb44 0406 	adc.w	r4, r4, r6
 8013214:	f04f 0100 	mov.w	r1, #0
 8013218:	f04f 0200 	mov.w	r2, #0
 801321c:	02a2      	lsls	r2, r4, #10
 801321e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8013222:	0299      	lsls	r1, r3, #10
 8013224:	460b      	mov	r3, r1
 8013226:	4614      	mov	r4, r2
 8013228:	4618      	mov	r0, r3
 801322a:	4621      	mov	r1, r4
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	f04f 0400 	mov.w	r4, #0
 8013232:	461a      	mov	r2, r3
 8013234:	4623      	mov	r3, r4
 8013236:	f7f5 fc5f 	bl	8008af8 <__aeabi_uldivmod>
 801323a:	4603      	mov	r3, r0
 801323c:	460c      	mov	r4, r1
 801323e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013240:	4b0a      	ldr	r3, [pc, #40]	; (801326c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013242:	685b      	ldr	r3, [r3, #4]
 8013244:	0c1b      	lsrs	r3, r3, #16
 8013246:	f003 0303 	and.w	r3, r3, #3
 801324a:	3301      	adds	r3, #1
 801324c:	005b      	lsls	r3, r3, #1
 801324e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013250:	68fa      	ldr	r2, [r7, #12]
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	fbb2 f3f3 	udiv	r3, r2, r3
 8013258:	60bb      	str	r3, [r7, #8]
      break;
 801325a:	e002      	b.n	8013262 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801325c:	4b04      	ldr	r3, [pc, #16]	; (8013270 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801325e:	60bb      	str	r3, [r7, #8]
      break;
 8013260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013262:	68bb      	ldr	r3, [r7, #8]
}
 8013264:	4618      	mov	r0, r3
 8013266:	3714      	adds	r7, #20
 8013268:	46bd      	mov	sp, r7
 801326a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801326c:	40023800 	.word	0x40023800
 8013270:	00f42400 	.word	0x00f42400
 8013274:	007a1200 	.word	0x007a1200

08013278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013278:	b480      	push	{r7}
 801327a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801327c:	4b03      	ldr	r3, [pc, #12]	; (801328c <HAL_RCC_GetHCLKFreq+0x14>)
 801327e:	681b      	ldr	r3, [r3, #0]
}
 8013280:	4618      	mov	r0, r3
 8013282:	46bd      	mov	sp, r7
 8013284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013288:	4770      	bx	lr
 801328a:	bf00      	nop
 801328c:	20000020 	.word	0x20000020

08013290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013294:	f7ff fff0 	bl	8013278 <HAL_RCC_GetHCLKFreq>
 8013298:	4601      	mov	r1, r0
 801329a:	4b05      	ldr	r3, [pc, #20]	; (80132b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 801329c:	689b      	ldr	r3, [r3, #8]
 801329e:	0a9b      	lsrs	r3, r3, #10
 80132a0:	f003 0307 	and.w	r3, r3, #7
 80132a4:	4a03      	ldr	r2, [pc, #12]	; (80132b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80132a6:	5cd3      	ldrb	r3, [r2, r3]
 80132a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	bd80      	pop	{r7, pc}
 80132b0:	40023800 	.word	0x40023800
 80132b4:	0801b330 	.word	0x0801b330

080132b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80132bc:	f7ff ffdc 	bl	8013278 <HAL_RCC_GetHCLKFreq>
 80132c0:	4601      	mov	r1, r0
 80132c2:	4b05      	ldr	r3, [pc, #20]	; (80132d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80132c4:	689b      	ldr	r3, [r3, #8]
 80132c6:	0b5b      	lsrs	r3, r3, #13
 80132c8:	f003 0307 	and.w	r3, r3, #7
 80132cc:	4a03      	ldr	r2, [pc, #12]	; (80132dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80132ce:	5cd3      	ldrb	r3, [r2, r3]
 80132d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	bd80      	pop	{r7, pc}
 80132d8:	40023800 	.word	0x40023800
 80132dc:	0801b330 	.word	0x0801b330

080132e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d101      	bne.n	80132f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80132ee:	2301      	movs	r3, #1
 80132f0:	e056      	b.n	80133a0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2200      	movs	r2, #0
 80132f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80132fe:	b2db      	uxtb	r3, r3
 8013300:	2b00      	cmp	r3, #0
 8013302:	d106      	bne.n	8013312 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2200      	movs	r2, #0
 8013308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f7fb ff63 	bl	800f1d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2202      	movs	r2, #2
 8013316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	681a      	ldr	r2, [r3, #0]
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013328:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	685a      	ldr	r2, [r3, #4]
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	689b      	ldr	r3, [r3, #8]
 8013332:	431a      	orrs	r2, r3
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	68db      	ldr	r3, [r3, #12]
 8013338:	431a      	orrs	r2, r3
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	691b      	ldr	r3, [r3, #16]
 801333e:	431a      	orrs	r2, r3
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	695b      	ldr	r3, [r3, #20]
 8013344:	431a      	orrs	r2, r3
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	699b      	ldr	r3, [r3, #24]
 801334a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801334e:	431a      	orrs	r2, r3
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	69db      	ldr	r3, [r3, #28]
 8013354:	431a      	orrs	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6a1b      	ldr	r3, [r3, #32]
 801335a:	ea42 0103 	orr.w	r1, r2, r3
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	430a      	orrs	r2, r1
 8013368:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	699b      	ldr	r3, [r3, #24]
 801336e:	0c1b      	lsrs	r3, r3, #16
 8013370:	f003 0104 	and.w	r1, r3, #4
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	430a      	orrs	r2, r1
 801337e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	69da      	ldr	r2, [r3, #28]
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801338e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2200      	movs	r2, #0
 8013394:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2201      	movs	r2, #1
 801339a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801339e:	2300      	movs	r3, #0
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3708      	adds	r7, #8
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}

080133a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b088      	sub	sp, #32
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	60b9      	str	r1, [r7, #8]
 80133b2:	603b      	str	r3, [r7, #0]
 80133b4:	4613      	mov	r3, r2
 80133b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80133b8:	2300      	movs	r3, #0
 80133ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80133c2:	2b01      	cmp	r3, #1
 80133c4:	d101      	bne.n	80133ca <HAL_SPI_Transmit+0x22>
 80133c6:	2302      	movs	r3, #2
 80133c8:	e11e      	b.n	8013608 <HAL_SPI_Transmit+0x260>
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2201      	movs	r2, #1
 80133ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80133d2:	f7fd fe11 	bl	8010ff8 <HAL_GetTick>
 80133d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80133d8:	88fb      	ldrh	r3, [r7, #6]
 80133da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80133e2:	b2db      	uxtb	r3, r3
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	d002      	beq.n	80133ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80133e8:	2302      	movs	r3, #2
 80133ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80133ec:	e103      	b.n	80135f6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d002      	beq.n	80133fa <HAL_SPI_Transmit+0x52>
 80133f4:	88fb      	ldrh	r3, [r7, #6]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d102      	bne.n	8013400 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80133fa:	2301      	movs	r3, #1
 80133fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80133fe:	e0fa      	b.n	80135f6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2203      	movs	r2, #3
 8013404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2200      	movs	r2, #0
 801340c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	68ba      	ldr	r2, [r7, #8]
 8013412:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	88fa      	ldrh	r2, [r7, #6]
 8013418:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	88fa      	ldrh	r2, [r7, #6]
 801341e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2200      	movs	r2, #0
 8013424:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	2200      	movs	r2, #0
 801342a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2200      	movs	r2, #0
 8013430:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2200      	movs	r2, #0
 8013436:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	2200      	movs	r2, #0
 801343c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	689b      	ldr	r3, [r3, #8]
 8013442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013446:	d107      	bne.n	8013458 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	681a      	ldr	r2, [r3, #0]
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013456:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013462:	2b40      	cmp	r3, #64	; 0x40
 8013464:	d007      	beq.n	8013476 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	681a      	ldr	r2, [r3, #0]
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013474:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	68db      	ldr	r3, [r3, #12]
 801347a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801347e:	d14b      	bne.n	8013518 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	685b      	ldr	r3, [r3, #4]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d002      	beq.n	801348e <HAL_SPI_Transmit+0xe6>
 8013488:	8afb      	ldrh	r3, [r7, #22]
 801348a:	2b01      	cmp	r3, #1
 801348c:	d13e      	bne.n	801350c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013492:	881a      	ldrh	r2, [r3, #0]
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801349e:	1c9a      	adds	r2, r3, #2
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	3b01      	subs	r3, #1
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80134b2:	e02b      	b.n	801350c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	689b      	ldr	r3, [r3, #8]
 80134ba:	f003 0302 	and.w	r3, r3, #2
 80134be:	2b02      	cmp	r3, #2
 80134c0:	d112      	bne.n	80134e8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134c6:	881a      	ldrh	r2, [r3, #0]
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134d2:	1c9a      	adds	r2, r3, #2
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80134dc:	b29b      	uxth	r3, r3
 80134de:	3b01      	subs	r3, #1
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80134e6:	e011      	b.n	801350c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80134e8:	f7fd fd86 	bl	8010ff8 <HAL_GetTick>
 80134ec:	4602      	mov	r2, r0
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	1ad3      	subs	r3, r2, r3
 80134f2:	683a      	ldr	r2, [r7, #0]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d803      	bhi.n	8013500 <HAL_SPI_Transmit+0x158>
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134fe:	d102      	bne.n	8013506 <HAL_SPI_Transmit+0x15e>
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d102      	bne.n	801350c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8013506:	2303      	movs	r3, #3
 8013508:	77fb      	strb	r3, [r7, #31]
          goto error;
 801350a:	e074      	b.n	80135f6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013510:	b29b      	uxth	r3, r3
 8013512:	2b00      	cmp	r3, #0
 8013514:	d1ce      	bne.n	80134b4 <HAL_SPI_Transmit+0x10c>
 8013516:	e04c      	b.n	80135b2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d002      	beq.n	8013526 <HAL_SPI_Transmit+0x17e>
 8013520:	8afb      	ldrh	r3, [r7, #22]
 8013522:	2b01      	cmp	r3, #1
 8013524:	d140      	bne.n	80135a8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	330c      	adds	r3, #12
 8013530:	7812      	ldrb	r2, [r2, #0]
 8013532:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013538:	1c5a      	adds	r2, r3, #1
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013542:	b29b      	uxth	r3, r3
 8013544:	3b01      	subs	r3, #1
 8013546:	b29a      	uxth	r2, r3
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801354c:	e02c      	b.n	80135a8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	689b      	ldr	r3, [r3, #8]
 8013554:	f003 0302 	and.w	r3, r3, #2
 8013558:	2b02      	cmp	r3, #2
 801355a:	d113      	bne.n	8013584 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	330c      	adds	r3, #12
 8013566:	7812      	ldrb	r2, [r2, #0]
 8013568:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801356e:	1c5a      	adds	r2, r3, #1
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013578:	b29b      	uxth	r3, r3
 801357a:	3b01      	subs	r3, #1
 801357c:	b29a      	uxth	r2, r3
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	86da      	strh	r2, [r3, #54]	; 0x36
 8013582:	e011      	b.n	80135a8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013584:	f7fd fd38 	bl	8010ff8 <HAL_GetTick>
 8013588:	4602      	mov	r2, r0
 801358a:	69bb      	ldr	r3, [r7, #24]
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	683a      	ldr	r2, [r7, #0]
 8013590:	429a      	cmp	r2, r3
 8013592:	d803      	bhi.n	801359c <HAL_SPI_Transmit+0x1f4>
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801359a:	d102      	bne.n	80135a2 <HAL_SPI_Transmit+0x1fa>
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d102      	bne.n	80135a8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80135a2:	2303      	movs	r3, #3
 80135a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80135a6:	e026      	b.n	80135f6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d1cd      	bne.n	801354e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80135b2:	69ba      	ldr	r2, [r7, #24]
 80135b4:	6839      	ldr	r1, [r7, #0]
 80135b6:	68f8      	ldr	r0, [r7, #12]
 80135b8:	f000 fba4 	bl	8013d04 <SPI_EndRxTxTransaction>
 80135bc:	4603      	mov	r3, r0
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d002      	beq.n	80135c8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	2220      	movs	r2, #32
 80135c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	689b      	ldr	r3, [r3, #8]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d10a      	bne.n	80135e6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80135d0:	2300      	movs	r3, #0
 80135d2:	613b      	str	r3, [r7, #16]
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	68db      	ldr	r3, [r3, #12]
 80135da:	613b      	str	r3, [r7, #16]
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	689b      	ldr	r3, [r3, #8]
 80135e2:	613b      	str	r3, [r7, #16]
 80135e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d002      	beq.n	80135f4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80135ee:	2301      	movs	r3, #1
 80135f0:	77fb      	strb	r3, [r7, #31]
 80135f2:	e000      	b.n	80135f6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80135f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	2201      	movs	r2, #1
 80135fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	2200      	movs	r2, #0
 8013602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013606:	7ffb      	ldrb	r3, [r7, #31]
}
 8013608:	4618      	mov	r0, r3
 801360a:	3720      	adds	r7, #32
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}

08013610 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b088      	sub	sp, #32
 8013614:	af02      	add	r7, sp, #8
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	603b      	str	r3, [r7, #0]
 801361c:	4613      	mov	r3, r2
 801361e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013620:	2300      	movs	r3, #0
 8013622:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	685b      	ldr	r3, [r3, #4]
 8013628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801362c:	d112      	bne.n	8013654 <HAL_SPI_Receive+0x44>
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	689b      	ldr	r3, [r3, #8]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d10e      	bne.n	8013654 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2204      	movs	r2, #4
 801363a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801363e:	88fa      	ldrh	r2, [r7, #6]
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	9300      	str	r3, [sp, #0]
 8013644:	4613      	mov	r3, r2
 8013646:	68ba      	ldr	r2, [r7, #8]
 8013648:	68b9      	ldr	r1, [r7, #8]
 801364a:	68f8      	ldr	r0, [r7, #12]
 801364c:	f000 f8e9 	bl	8013822 <HAL_SPI_TransmitReceive>
 8013650:	4603      	mov	r3, r0
 8013652:	e0e2      	b.n	801381a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801365a:	2b01      	cmp	r3, #1
 801365c:	d101      	bne.n	8013662 <HAL_SPI_Receive+0x52>
 801365e:	2302      	movs	r3, #2
 8013660:	e0db      	b.n	801381a <HAL_SPI_Receive+0x20a>
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	2201      	movs	r2, #1
 8013666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801366a:	f7fd fcc5 	bl	8010ff8 <HAL_GetTick>
 801366e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013676:	b2db      	uxtb	r3, r3
 8013678:	2b01      	cmp	r3, #1
 801367a:	d002      	beq.n	8013682 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801367c:	2302      	movs	r3, #2
 801367e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013680:	e0c2      	b.n	8013808 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d002      	beq.n	801368e <HAL_SPI_Receive+0x7e>
 8013688:	88fb      	ldrh	r3, [r7, #6]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d102      	bne.n	8013694 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801368e:	2301      	movs	r3, #1
 8013690:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013692:	e0b9      	b.n	8013808 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	2204      	movs	r2, #4
 8013698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	2200      	movs	r2, #0
 80136a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	68ba      	ldr	r2, [r7, #8]
 80136a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	88fa      	ldrh	r2, [r7, #6]
 80136ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	88fa      	ldrh	r2, [r7, #6]
 80136b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	2200      	movs	r2, #0
 80136b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	2200      	movs	r2, #0
 80136be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	2200      	movs	r2, #0
 80136c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	2200      	movs	r2, #0
 80136ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	2200      	movs	r2, #0
 80136d0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	689b      	ldr	r3, [r3, #8]
 80136d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136da:	d107      	bne.n	80136ec <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80136ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136f6:	2b40      	cmp	r3, #64	; 0x40
 80136f8:	d007      	beq.n	801370a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013708:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	68db      	ldr	r3, [r3, #12]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d162      	bne.n	80137d8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013712:	e02e      	b.n	8013772 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	689b      	ldr	r3, [r3, #8]
 801371a:	f003 0301 	and.w	r3, r3, #1
 801371e:	2b01      	cmp	r3, #1
 8013720:	d115      	bne.n	801374e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	f103 020c 	add.w	r2, r3, #12
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801372e:	7812      	ldrb	r2, [r2, #0]
 8013730:	b2d2      	uxtb	r2, r2
 8013732:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013738:	1c5a      	adds	r2, r3, #1
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013742:	b29b      	uxth	r3, r3
 8013744:	3b01      	subs	r3, #1
 8013746:	b29a      	uxth	r2, r3
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801374c:	e011      	b.n	8013772 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801374e:	f7fd fc53 	bl	8010ff8 <HAL_GetTick>
 8013752:	4602      	mov	r2, r0
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	1ad3      	subs	r3, r2, r3
 8013758:	683a      	ldr	r2, [r7, #0]
 801375a:	429a      	cmp	r2, r3
 801375c:	d803      	bhi.n	8013766 <HAL_SPI_Receive+0x156>
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013764:	d102      	bne.n	801376c <HAL_SPI_Receive+0x15c>
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d102      	bne.n	8013772 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 801376c:	2303      	movs	r3, #3
 801376e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013770:	e04a      	b.n	8013808 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013776:	b29b      	uxth	r3, r3
 8013778:	2b00      	cmp	r3, #0
 801377a:	d1cb      	bne.n	8013714 <HAL_SPI_Receive+0x104>
 801377c:	e031      	b.n	80137e2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	689b      	ldr	r3, [r3, #8]
 8013784:	f003 0301 	and.w	r3, r3, #1
 8013788:	2b01      	cmp	r3, #1
 801378a:	d113      	bne.n	80137b4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	68da      	ldr	r2, [r3, #12]
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013796:	b292      	uxth	r2, r2
 8013798:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801379e:	1c9a      	adds	r2, r3, #2
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	3b01      	subs	r3, #1
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80137b2:	e011      	b.n	80137d8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80137b4:	f7fd fc20 	bl	8010ff8 <HAL_GetTick>
 80137b8:	4602      	mov	r2, r0
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	1ad3      	subs	r3, r2, r3
 80137be:	683a      	ldr	r2, [r7, #0]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d803      	bhi.n	80137cc <HAL_SPI_Receive+0x1bc>
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137ca:	d102      	bne.n	80137d2 <HAL_SPI_Receive+0x1c2>
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d102      	bne.n	80137d8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80137d2:	2303      	movs	r3, #3
 80137d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80137d6:	e017      	b.n	8013808 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80137dc:	b29b      	uxth	r3, r3
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d1cd      	bne.n	801377e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80137e2:	693a      	ldr	r2, [r7, #16]
 80137e4:	6839      	ldr	r1, [r7, #0]
 80137e6:	68f8      	ldr	r0, [r7, #12]
 80137e8:	f000 fa27 	bl	8013c3a <SPI_EndRxTransaction>
 80137ec:	4603      	mov	r3, r0
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d002      	beq.n	80137f8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	2220      	movs	r2, #32
 80137f6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d002      	beq.n	8013806 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8013800:	2301      	movs	r3, #1
 8013802:	75fb      	strb	r3, [r7, #23]
 8013804:	e000      	b.n	8013808 <HAL_SPI_Receive+0x1f8>
  }

error :
 8013806:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2201      	movs	r2, #1
 801380c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	2200      	movs	r2, #0
 8013814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013818:	7dfb      	ldrb	r3, [r7, #23]
}
 801381a:	4618      	mov	r0, r3
 801381c:	3718      	adds	r7, #24
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}

08013822 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013822:	b580      	push	{r7, lr}
 8013824:	b08c      	sub	sp, #48	; 0x30
 8013826:	af00      	add	r7, sp, #0
 8013828:	60f8      	str	r0, [r7, #12]
 801382a:	60b9      	str	r1, [r7, #8]
 801382c:	607a      	str	r2, [r7, #4]
 801382e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013830:	2301      	movs	r3, #1
 8013832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013834:	2300      	movs	r3, #0
 8013836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013840:	2b01      	cmp	r3, #1
 8013842:	d101      	bne.n	8013848 <HAL_SPI_TransmitReceive+0x26>
 8013844:	2302      	movs	r3, #2
 8013846:	e18a      	b.n	8013b5e <HAL_SPI_TransmitReceive+0x33c>
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	2201      	movs	r2, #1
 801384c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013850:	f7fd fbd2 	bl	8010ff8 <HAL_GetTick>
 8013854:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801385c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	685b      	ldr	r3, [r3, #4]
 8013864:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013866:	887b      	ldrh	r3, [r7, #2]
 8013868:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801386a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801386e:	2b01      	cmp	r3, #1
 8013870:	d00f      	beq.n	8013892 <HAL_SPI_TransmitReceive+0x70>
 8013872:	69fb      	ldr	r3, [r7, #28]
 8013874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013878:	d107      	bne.n	801388a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	689b      	ldr	r3, [r3, #8]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d103      	bne.n	801388a <HAL_SPI_TransmitReceive+0x68>
 8013882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013886:	2b04      	cmp	r3, #4
 8013888:	d003      	beq.n	8013892 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801388a:	2302      	movs	r3, #2
 801388c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013890:	e15b      	b.n	8013b4a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d005      	beq.n	80138a4 <HAL_SPI_TransmitReceive+0x82>
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d002      	beq.n	80138a4 <HAL_SPI_TransmitReceive+0x82>
 801389e:	887b      	ldrh	r3, [r7, #2]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d103      	bne.n	80138ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80138a4:	2301      	movs	r3, #1
 80138a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80138aa:	e14e      	b.n	8013b4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80138b2:	b2db      	uxtb	r3, r3
 80138b4:	2b04      	cmp	r3, #4
 80138b6:	d003      	beq.n	80138c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	2205      	movs	r2, #5
 80138bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	2200      	movs	r2, #0
 80138c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	687a      	ldr	r2, [r7, #4]
 80138ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	887a      	ldrh	r2, [r7, #2]
 80138d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	887a      	ldrh	r2, [r7, #2]
 80138d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	68ba      	ldr	r2, [r7, #8]
 80138dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	887a      	ldrh	r2, [r7, #2]
 80138e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	887a      	ldrh	r2, [r7, #2]
 80138e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	2200      	movs	r2, #0
 80138ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	2200      	movs	r2, #0
 80138f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013900:	2b40      	cmp	r3, #64	; 0x40
 8013902:	d007      	beq.n	8013914 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	681a      	ldr	r2, [r3, #0]
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	68db      	ldr	r3, [r3, #12]
 8013918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801391c:	d178      	bne.n	8013a10 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d002      	beq.n	801392c <HAL_SPI_TransmitReceive+0x10a>
 8013926:	8b7b      	ldrh	r3, [r7, #26]
 8013928:	2b01      	cmp	r3, #1
 801392a:	d166      	bne.n	80139fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013930:	881a      	ldrh	r2, [r3, #0]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801393c:	1c9a      	adds	r2, r3, #2
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013946:	b29b      	uxth	r3, r3
 8013948:	3b01      	subs	r3, #1
 801394a:	b29a      	uxth	r2, r3
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013950:	e053      	b.n	80139fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	689b      	ldr	r3, [r3, #8]
 8013958:	f003 0302 	and.w	r3, r3, #2
 801395c:	2b02      	cmp	r3, #2
 801395e:	d11b      	bne.n	8013998 <HAL_SPI_TransmitReceive+0x176>
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013964:	b29b      	uxth	r3, r3
 8013966:	2b00      	cmp	r3, #0
 8013968:	d016      	beq.n	8013998 <HAL_SPI_TransmitReceive+0x176>
 801396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801396c:	2b01      	cmp	r3, #1
 801396e:	d113      	bne.n	8013998 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013974:	881a      	ldrh	r2, [r3, #0]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013980:	1c9a      	adds	r2, r3, #2
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801398a:	b29b      	uxth	r3, r3
 801398c:	3b01      	subs	r3, #1
 801398e:	b29a      	uxth	r2, r3
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013994:	2300      	movs	r3, #0
 8013996:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	689b      	ldr	r3, [r3, #8]
 801399e:	f003 0301 	and.w	r3, r3, #1
 80139a2:	2b01      	cmp	r3, #1
 80139a4:	d119      	bne.n	80139da <HAL_SPI_TransmitReceive+0x1b8>
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d014      	beq.n	80139da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	68da      	ldr	r2, [r3, #12]
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139ba:	b292      	uxth	r2, r2
 80139bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139c2:	1c9a      	adds	r2, r3, #2
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80139cc:	b29b      	uxth	r3, r3
 80139ce:	3b01      	subs	r3, #1
 80139d0:	b29a      	uxth	r2, r3
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80139d6:	2301      	movs	r3, #1
 80139d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80139da:	f7fd fb0d 	bl	8010ff8 <HAL_GetTick>
 80139de:	4602      	mov	r2, r0
 80139e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e2:	1ad3      	subs	r3, r2, r3
 80139e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d807      	bhi.n	80139fa <HAL_SPI_TransmitReceive+0x1d8>
 80139ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139f0:	d003      	beq.n	80139fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80139f2:	2303      	movs	r3, #3
 80139f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80139f8:	e0a7      	b.n	8013b4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d1a6      	bne.n	8013952 <HAL_SPI_TransmitReceive+0x130>
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d1a1      	bne.n	8013952 <HAL_SPI_TransmitReceive+0x130>
 8013a0e:	e07c      	b.n	8013b0a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	685b      	ldr	r3, [r3, #4]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d002      	beq.n	8013a1e <HAL_SPI_TransmitReceive+0x1fc>
 8013a18:	8b7b      	ldrh	r3, [r7, #26]
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d16b      	bne.n	8013af6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	330c      	adds	r3, #12
 8013a28:	7812      	ldrb	r2, [r2, #0]
 8013a2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a30:	1c5a      	adds	r2, r3, #1
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	3b01      	subs	r3, #1
 8013a3e:	b29a      	uxth	r2, r3
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013a44:	e057      	b.n	8013af6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	689b      	ldr	r3, [r3, #8]
 8013a4c:	f003 0302 	and.w	r3, r3, #2
 8013a50:	2b02      	cmp	r3, #2
 8013a52:	d11c      	bne.n	8013a8e <HAL_SPI_TransmitReceive+0x26c>
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d017      	beq.n	8013a8e <HAL_SPI_TransmitReceive+0x26c>
 8013a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a60:	2b01      	cmp	r3, #1
 8013a62:	d114      	bne.n	8013a8e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	330c      	adds	r3, #12
 8013a6e:	7812      	ldrb	r2, [r2, #0]
 8013a70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a76:	1c5a      	adds	r2, r3, #1
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a80:	b29b      	uxth	r3, r3
 8013a82:	3b01      	subs	r3, #1
 8013a84:	b29a      	uxth	r2, r3
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	689b      	ldr	r3, [r3, #8]
 8013a94:	f003 0301 	and.w	r3, r3, #1
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d119      	bne.n	8013ad0 <HAL_SPI_TransmitReceive+0x2ae>
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d014      	beq.n	8013ad0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	68da      	ldr	r2, [r3, #12]
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ab0:	b2d2      	uxtb	r2, r2
 8013ab2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ab8:	1c5a      	adds	r2, r3, #1
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ac2:	b29b      	uxth	r3, r3
 8013ac4:	3b01      	subs	r3, #1
 8013ac6:	b29a      	uxth	r2, r3
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013acc:	2301      	movs	r3, #1
 8013ace:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013ad0:	f7fd fa92 	bl	8010ff8 <HAL_GetTick>
 8013ad4:	4602      	mov	r2, r0
 8013ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad8:	1ad3      	subs	r3, r2, r3
 8013ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d803      	bhi.n	8013ae8 <HAL_SPI_TransmitReceive+0x2c6>
 8013ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ae6:	d102      	bne.n	8013aee <HAL_SPI_TransmitReceive+0x2cc>
 8013ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d103      	bne.n	8013af6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8013aee:	2303      	movs	r3, #3
 8013af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013af4:	e029      	b.n	8013b4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d1a2      	bne.n	8013a46 <HAL_SPI_TransmitReceive+0x224>
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d19d      	bne.n	8013a46 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b0e:	68f8      	ldr	r0, [r7, #12]
 8013b10:	f000 f8f8 	bl	8013d04 <SPI_EndRxTxTransaction>
 8013b14:	4603      	mov	r3, r0
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d006      	beq.n	8013b28 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2220      	movs	r2, #32
 8013b24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013b26:	e010      	b.n	8013b4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	689b      	ldr	r3, [r3, #8]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10b      	bne.n	8013b48 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013b30:	2300      	movs	r3, #0
 8013b32:	617b      	str	r3, [r7, #20]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	617b      	str	r3, [r7, #20]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	689b      	ldr	r3, [r3, #8]
 8013b42:	617b      	str	r3, [r7, #20]
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	e000      	b.n	8013b4a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013b48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	2200      	movs	r2, #0
 8013b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013b5e:	4618      	mov	r0, r3
 8013b60:	3730      	adds	r7, #48	; 0x30
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}

08013b66 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013b66:	b580      	push	{r7, lr}
 8013b68:	b084      	sub	sp, #16
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	60f8      	str	r0, [r7, #12]
 8013b6e:	60b9      	str	r1, [r7, #8]
 8013b70:	603b      	str	r3, [r7, #0]
 8013b72:	4613      	mov	r3, r2
 8013b74:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013b76:	e04c      	b.n	8013c12 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b7e:	d048      	beq.n	8013c12 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8013b80:	f7fd fa3a 	bl	8010ff8 <HAL_GetTick>
 8013b84:	4602      	mov	r2, r0
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	1ad3      	subs	r3, r2, r3
 8013b8a:	683a      	ldr	r2, [r7, #0]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d902      	bls.n	8013b96 <SPI_WaitFlagStateUntilTimeout+0x30>
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d13d      	bne.n	8013c12 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	685a      	ldr	r2, [r3, #4]
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	685b      	ldr	r3, [r3, #4]
 8013baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013bae:	d111      	bne.n	8013bd4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	689b      	ldr	r3, [r3, #8]
 8013bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013bb8:	d004      	beq.n	8013bc4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	689b      	ldr	r3, [r3, #8]
 8013bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013bc2:	d107      	bne.n	8013bd4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	681a      	ldr	r2, [r3, #0]
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013bdc:	d10f      	bne.n	8013bfe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	681a      	ldr	r2, [r3, #0]
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013bec:	601a      	str	r2, [r3, #0]
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	681a      	ldr	r2, [r3, #0]
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	2201      	movs	r2, #1
 8013c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8013c0e:	2303      	movs	r3, #3
 8013c10:	e00f      	b.n	8013c32 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	689a      	ldr	r2, [r3, #8]
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	4013      	ands	r3, r2
 8013c1c:	68ba      	ldr	r2, [r7, #8]
 8013c1e:	429a      	cmp	r2, r3
 8013c20:	bf0c      	ite	eq
 8013c22:	2301      	moveq	r3, #1
 8013c24:	2300      	movne	r3, #0
 8013c26:	b2db      	uxtb	r3, r3
 8013c28:	461a      	mov	r2, r3
 8013c2a:	79fb      	ldrb	r3, [r7, #7]
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d1a3      	bne.n	8013b78 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8013c30:	2300      	movs	r3, #0
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	3710      	adds	r7, #16
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}

08013c3a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013c3a:	b580      	push	{r7, lr}
 8013c3c:	b086      	sub	sp, #24
 8013c3e:	af02      	add	r7, sp, #8
 8013c40:	60f8      	str	r0, [r7, #12]
 8013c42:	60b9      	str	r1, [r7, #8]
 8013c44:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	685b      	ldr	r3, [r3, #4]
 8013c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013c4e:	d111      	bne.n	8013c74 <SPI_EndRxTransaction+0x3a>
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	689b      	ldr	r3, [r3, #8]
 8013c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c58:	d004      	beq.n	8013c64 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	689b      	ldr	r3, [r3, #8]
 8013c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013c62:	d107      	bne.n	8013c74 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	681a      	ldr	r2, [r3, #0]
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013c72:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	685b      	ldr	r3, [r3, #4]
 8013c78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013c7c:	d12a      	bne.n	8013cd4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	689b      	ldr	r3, [r3, #8]
 8013c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013c86:	d012      	beq.n	8013cae <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	9300      	str	r3, [sp, #0]
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	2180      	movs	r1, #128	; 0x80
 8013c92:	68f8      	ldr	r0, [r7, #12]
 8013c94:	f7ff ff67 	bl	8013b66 <SPI_WaitFlagStateUntilTimeout>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d02d      	beq.n	8013cfa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ca2:	f043 0220 	orr.w	r2, r3, #32
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013caa:	2303      	movs	r3, #3
 8013cac:	e026      	b.n	8013cfc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	9300      	str	r3, [sp, #0]
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	2101      	movs	r1, #1
 8013cb8:	68f8      	ldr	r0, [r7, #12]
 8013cba:	f7ff ff54 	bl	8013b66 <SPI_WaitFlagStateUntilTimeout>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d01a      	beq.n	8013cfa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cc8:	f043 0220 	orr.w	r2, r3, #32
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013cd0:	2303      	movs	r3, #3
 8013cd2:	e013      	b.n	8013cfc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	9300      	str	r3, [sp, #0]
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	2101      	movs	r1, #1
 8013cde:	68f8      	ldr	r0, [r7, #12]
 8013ce0:	f7ff ff41 	bl	8013b66 <SPI_WaitFlagStateUntilTimeout>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d007      	beq.n	8013cfa <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cee:	f043 0220 	orr.w	r2, r3, #32
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013cf6:	2303      	movs	r3, #3
 8013cf8:	e000      	b.n	8013cfc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8013cfa:	2300      	movs	r3, #0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3710      	adds	r7, #16
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b088      	sub	sp, #32
 8013d08:	af02      	add	r7, sp, #8
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	60b9      	str	r1, [r7, #8]
 8013d0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013d10:	4b1b      	ldr	r3, [pc, #108]	; (8013d80 <SPI_EndRxTxTransaction+0x7c>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	4a1b      	ldr	r2, [pc, #108]	; (8013d84 <SPI_EndRxTxTransaction+0x80>)
 8013d16:	fba2 2303 	umull	r2, r3, r2, r3
 8013d1a:	0d5b      	lsrs	r3, r3, #21
 8013d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013d20:	fb02 f303 	mul.w	r3, r2, r3
 8013d24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013d2e:	d112      	bne.n	8013d56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	9300      	str	r3, [sp, #0]
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	2200      	movs	r2, #0
 8013d38:	2180      	movs	r1, #128	; 0x80
 8013d3a:	68f8      	ldr	r0, [r7, #12]
 8013d3c:	f7ff ff13 	bl	8013b66 <SPI_WaitFlagStateUntilTimeout>
 8013d40:	4603      	mov	r3, r0
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d016      	beq.n	8013d74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d4a:	f043 0220 	orr.w	r2, r3, #32
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013d52:	2303      	movs	r3, #3
 8013d54:	e00f      	b.n	8013d76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d00a      	beq.n	8013d72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	3b01      	subs	r3, #1
 8013d60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	689b      	ldr	r3, [r3, #8]
 8013d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013d6c:	2b80      	cmp	r3, #128	; 0x80
 8013d6e:	d0f2      	beq.n	8013d56 <SPI_EndRxTxTransaction+0x52>
 8013d70:	e000      	b.n	8013d74 <SPI_EndRxTxTransaction+0x70>
        break;
 8013d72:	bf00      	nop
  }

  return HAL_OK;
 8013d74:	2300      	movs	r3, #0
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	3718      	adds	r7, #24
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd80      	pop	{r7, pc}
 8013d7e:	bf00      	nop
 8013d80:	20000020 	.word	0x20000020
 8013d84:	165e9f81 	.word	0x165e9f81

08013d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d101      	bne.n	8013d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013d96:	2301      	movs	r3, #1
 8013d98:	e01d      	b.n	8013dd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013da0:	b2db      	uxtb	r3, r3
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d106      	bne.n	8013db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2200      	movs	r2, #0
 8013daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f7fb fa5a 	bl	800f268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2202      	movs	r2, #2
 8013db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	3304      	adds	r3, #4
 8013dc4:	4619      	mov	r1, r3
 8013dc6:	4610      	mov	r0, r2
 8013dc8:	f000 fe96 	bl	8014af8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2201      	movs	r2, #1
 8013dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013dd4:	2300      	movs	r3, #0
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3708      	adds	r7, #8
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013dde:	b480      	push	{r7}
 8013de0:	b085      	sub	sp, #20
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	68da      	ldr	r2, [r3, #12]
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	f042 0201 	orr.w	r2, r2, #1
 8013df4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	689b      	ldr	r3, [r3, #8]
 8013dfc:	f003 0307 	and.w	r3, r3, #7
 8013e00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	2b06      	cmp	r3, #6
 8013e06:	d007      	beq.n	8013e18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	681a      	ldr	r2, [r3, #0]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	f042 0201 	orr.w	r2, r2, #1
 8013e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013e18:	2300      	movs	r3, #0
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	3714      	adds	r7, #20
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e24:	4770      	bx	lr

08013e26 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8013e26:	b480      	push	{r7}
 8013e28:	b083      	sub	sp, #12
 8013e2a:	af00      	add	r7, sp, #0
 8013e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	68da      	ldr	r2, [r3, #12]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	f022 0201 	bic.w	r2, r2, #1
 8013e3c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	6a1a      	ldr	r2, [r3, #32]
 8013e44:	f241 1311 	movw	r3, #4369	; 0x1111
 8013e48:	4013      	ands	r3, r2
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d10f      	bne.n	8013e6e <HAL_TIM_Base_Stop_IT+0x48>
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	6a1a      	ldr	r2, [r3, #32]
 8013e54:	f240 4344 	movw	r3, #1092	; 0x444
 8013e58:	4013      	ands	r3, r2
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d107      	bne.n	8013e6e <HAL_TIM_Base_Stop_IT+0x48>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	f022 0201 	bic.w	r2, r2, #1
 8013e6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013e6e:	2300      	movs	r3, #0
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	370c      	adds	r7, #12
 8013e74:	46bd      	mov	sp, r7
 8013e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7a:	4770      	bx	lr

08013e7c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b082      	sub	sp, #8
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d101      	bne.n	8013e8e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	e01d      	b.n	8013eca <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e94:	b2db      	uxtb	r3, r3
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d106      	bne.n	8013ea8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f000 f815 	bl	8013ed2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2202      	movs	r2, #2
 8013eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681a      	ldr	r2, [r3, #0]
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	3304      	adds	r3, #4
 8013eb8:	4619      	mov	r1, r3
 8013eba:	4610      	mov	r0, r2
 8013ebc:	f000 fe1c 	bl	8014af8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013ec8:	2300      	movs	r3, #0
}
 8013eca:	4618      	mov	r0, r3
 8013ecc:	3708      	adds	r7, #8
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}

08013ed2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8013ed2:	b480      	push	{r7}
 8013ed4:	b083      	sub	sp, #12
 8013ed6:	af00      	add	r7, sp, #0
 8013ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8013eda:	bf00      	nop
 8013edc:	370c      	adds	r7, #12
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee4:	4770      	bx	lr
	...

08013ee8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b084      	sub	sp, #16
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	2b0c      	cmp	r3, #12
 8013ef6:	d841      	bhi.n	8013f7c <HAL_TIM_OC_Start_IT+0x94>
 8013ef8:	a201      	add	r2, pc, #4	; (adr r2, 8013f00 <HAL_TIM_OC_Start_IT+0x18>)
 8013efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013efe:	bf00      	nop
 8013f00:	08013f35 	.word	0x08013f35
 8013f04:	08013f7d 	.word	0x08013f7d
 8013f08:	08013f7d 	.word	0x08013f7d
 8013f0c:	08013f7d 	.word	0x08013f7d
 8013f10:	08013f47 	.word	0x08013f47
 8013f14:	08013f7d 	.word	0x08013f7d
 8013f18:	08013f7d 	.word	0x08013f7d
 8013f1c:	08013f7d 	.word	0x08013f7d
 8013f20:	08013f59 	.word	0x08013f59
 8013f24:	08013f7d 	.word	0x08013f7d
 8013f28:	08013f7d 	.word	0x08013f7d
 8013f2c:	08013f7d 	.word	0x08013f7d
 8013f30:	08013f6b 	.word	0x08013f6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	68da      	ldr	r2, [r3, #12]
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	f042 0202 	orr.w	r2, r2, #2
 8013f42:	60da      	str	r2, [r3, #12]
      break;
 8013f44:	e01b      	b.n	8013f7e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	68da      	ldr	r2, [r3, #12]
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	f042 0204 	orr.w	r2, r2, #4
 8013f54:	60da      	str	r2, [r3, #12]
      break;
 8013f56:	e012      	b.n	8013f7e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	68da      	ldr	r2, [r3, #12]
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	f042 0208 	orr.w	r2, r2, #8
 8013f66:	60da      	str	r2, [r3, #12]
      break;
 8013f68:	e009      	b.n	8013f7e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	68da      	ldr	r2, [r3, #12]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	f042 0210 	orr.w	r2, r2, #16
 8013f78:	60da      	str	r2, [r3, #12]
      break;
 8013f7a:	e000      	b.n	8013f7e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8013f7c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	2201      	movs	r2, #1
 8013f84:	6839      	ldr	r1, [r7, #0]
 8013f86:	4618      	mov	r0, r3
 8013f88:	f001 f8a0 	bl	80150cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	4a15      	ldr	r2, [pc, #84]	; (8013fe8 <HAL_TIM_OC_Start_IT+0x100>)
 8013f92:	4293      	cmp	r3, r2
 8013f94:	d004      	beq.n	8013fa0 <HAL_TIM_OC_Start_IT+0xb8>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	4a14      	ldr	r2, [pc, #80]	; (8013fec <HAL_TIM_OC_Start_IT+0x104>)
 8013f9c:	4293      	cmp	r3, r2
 8013f9e:	d101      	bne.n	8013fa4 <HAL_TIM_OC_Start_IT+0xbc>
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	e000      	b.n	8013fa6 <HAL_TIM_OC_Start_IT+0xbe>
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d007      	beq.n	8013fba <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013fb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	689b      	ldr	r3, [r3, #8]
 8013fc0:	f003 0307 	and.w	r3, r3, #7
 8013fc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	2b06      	cmp	r3, #6
 8013fca:	d007      	beq.n	8013fdc <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	681a      	ldr	r2, [r3, #0]
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	f042 0201 	orr.w	r2, r2, #1
 8013fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013fdc:	2300      	movs	r3, #0
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3710      	adds	r7, #16
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	40010000 	.word	0x40010000
 8013fec:	40010400 	.word	0x40010400

08013ff0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b082      	sub	sp, #8
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	2b0c      	cmp	r3, #12
 8013ffe:	d841      	bhi.n	8014084 <HAL_TIM_OC_Stop_IT+0x94>
 8014000:	a201      	add	r2, pc, #4	; (adr r2, 8014008 <HAL_TIM_OC_Stop_IT+0x18>)
 8014002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014006:	bf00      	nop
 8014008:	0801403d 	.word	0x0801403d
 801400c:	08014085 	.word	0x08014085
 8014010:	08014085 	.word	0x08014085
 8014014:	08014085 	.word	0x08014085
 8014018:	0801404f 	.word	0x0801404f
 801401c:	08014085 	.word	0x08014085
 8014020:	08014085 	.word	0x08014085
 8014024:	08014085 	.word	0x08014085
 8014028:	08014061 	.word	0x08014061
 801402c:	08014085 	.word	0x08014085
 8014030:	08014085 	.word	0x08014085
 8014034:	08014085 	.word	0x08014085
 8014038:	08014073 	.word	0x08014073
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	68da      	ldr	r2, [r3, #12]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	f022 0202 	bic.w	r2, r2, #2
 801404a:	60da      	str	r2, [r3, #12]
      break;
 801404c:	e01b      	b.n	8014086 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	68da      	ldr	r2, [r3, #12]
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	f022 0204 	bic.w	r2, r2, #4
 801405c:	60da      	str	r2, [r3, #12]
      break;
 801405e:	e012      	b.n	8014086 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	68da      	ldr	r2, [r3, #12]
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	f022 0208 	bic.w	r2, r2, #8
 801406e:	60da      	str	r2, [r3, #12]
      break;
 8014070:	e009      	b.n	8014086 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	68da      	ldr	r2, [r3, #12]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	f022 0210 	bic.w	r2, r2, #16
 8014080:	60da      	str	r2, [r3, #12]
      break;
 8014082:	e000      	b.n	8014086 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8014084:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2200      	movs	r2, #0
 801408c:	6839      	ldr	r1, [r7, #0]
 801408e:	4618      	mov	r0, r3
 8014090:	f001 f81c 	bl	80150cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	4a20      	ldr	r2, [pc, #128]	; (801411c <HAL_TIM_OC_Stop_IT+0x12c>)
 801409a:	4293      	cmp	r3, r2
 801409c:	d004      	beq.n	80140a8 <HAL_TIM_OC_Stop_IT+0xb8>
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4a1f      	ldr	r2, [pc, #124]	; (8014120 <HAL_TIM_OC_Stop_IT+0x130>)
 80140a4:	4293      	cmp	r3, r2
 80140a6:	d101      	bne.n	80140ac <HAL_TIM_OC_Stop_IT+0xbc>
 80140a8:	2301      	movs	r3, #1
 80140aa:	e000      	b.n	80140ae <HAL_TIM_OC_Stop_IT+0xbe>
 80140ac:	2300      	movs	r3, #0
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d017      	beq.n	80140e2 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	6a1a      	ldr	r2, [r3, #32]
 80140b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80140bc:	4013      	ands	r3, r2
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d10f      	bne.n	80140e2 <HAL_TIM_OC_Stop_IT+0xf2>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	6a1a      	ldr	r2, [r3, #32]
 80140c8:	f240 4344 	movw	r3, #1092	; 0x444
 80140cc:	4013      	ands	r3, r2
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d107      	bne.n	80140e2 <HAL_TIM_OC_Stop_IT+0xf2>
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80140e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	6a1a      	ldr	r2, [r3, #32]
 80140e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80140ec:	4013      	ands	r3, r2
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d10f      	bne.n	8014112 <HAL_TIM_OC_Stop_IT+0x122>
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	6a1a      	ldr	r2, [r3, #32]
 80140f8:	f240 4344 	movw	r3, #1092	; 0x444
 80140fc:	4013      	ands	r3, r2
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d107      	bne.n	8014112 <HAL_TIM_OC_Stop_IT+0x122>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	f022 0201 	bic.w	r2, r2, #1
 8014110:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014112:	2300      	movs	r3, #0
}
 8014114:	4618      	mov	r0, r3
 8014116:	3708      	adds	r7, #8
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}
 801411c:	40010000 	.word	0x40010000
 8014120:	40010400 	.word	0x40010400

08014124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d101      	bne.n	8014136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014132:	2301      	movs	r3, #1
 8014134:	e01d      	b.n	8014172 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801413c:	b2db      	uxtb	r3, r3
 801413e:	2b00      	cmp	r3, #0
 8014140:	d106      	bne.n	8014150 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2200      	movs	r2, #0
 8014146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 f815 	bl	801417a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2202      	movs	r2, #2
 8014154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	3304      	adds	r3, #4
 8014160:	4619      	mov	r1, r3
 8014162:	4610      	mov	r0, r2
 8014164:	f000 fcc8 	bl	8014af8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2201      	movs	r2, #1
 801416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014170:	2300      	movs	r3, #0
}
 8014172:	4618      	mov	r0, r3
 8014174:	3708      	adds	r7, #8
 8014176:	46bd      	mov	sp, r7
 8014178:	bd80      	pop	{r7, pc}

0801417a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801417a:	b480      	push	{r7}
 801417c:	b083      	sub	sp, #12
 801417e:	af00      	add	r7, sp, #0
 8014180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8014182:	bf00      	nop
 8014184:	370c      	adds	r7, #12
 8014186:	46bd      	mov	sp, r7
 8014188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801418c:	4770      	bx	lr
	...

08014190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b084      	sub	sp, #16
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
 8014198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	2201      	movs	r2, #1
 80141a0:	6839      	ldr	r1, [r7, #0]
 80141a2:	4618      	mov	r0, r3
 80141a4:	f000 ff92 	bl	80150cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	4a15      	ldr	r2, [pc, #84]	; (8014204 <HAL_TIM_PWM_Start+0x74>)
 80141ae:	4293      	cmp	r3, r2
 80141b0:	d004      	beq.n	80141bc <HAL_TIM_PWM_Start+0x2c>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	4a14      	ldr	r2, [pc, #80]	; (8014208 <HAL_TIM_PWM_Start+0x78>)
 80141b8:	4293      	cmp	r3, r2
 80141ba:	d101      	bne.n	80141c0 <HAL_TIM_PWM_Start+0x30>
 80141bc:	2301      	movs	r3, #1
 80141be:	e000      	b.n	80141c2 <HAL_TIM_PWM_Start+0x32>
 80141c0:	2300      	movs	r3, #0
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d007      	beq.n	80141d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80141d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	689b      	ldr	r3, [r3, #8]
 80141dc:	f003 0307 	and.w	r3, r3, #7
 80141e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	2b06      	cmp	r3, #6
 80141e6:	d007      	beq.n	80141f8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	681a      	ldr	r2, [r3, #0]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	f042 0201 	orr.w	r2, r2, #1
 80141f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80141f8:	2300      	movs	r3, #0
}
 80141fa:	4618      	mov	r0, r3
 80141fc:	3710      	adds	r7, #16
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
 8014202:	bf00      	nop
 8014204:	40010000 	.word	0x40010000
 8014208:	40010400 	.word	0x40010400

0801420c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
 8014214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	2200      	movs	r2, #0
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	4618      	mov	r0, r3
 8014220:	f000 ff54 	bl	80150cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	4a22      	ldr	r2, [pc, #136]	; (80142b4 <HAL_TIM_PWM_Stop+0xa8>)
 801422a:	4293      	cmp	r3, r2
 801422c:	d004      	beq.n	8014238 <HAL_TIM_PWM_Stop+0x2c>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	4a21      	ldr	r2, [pc, #132]	; (80142b8 <HAL_TIM_PWM_Stop+0xac>)
 8014234:	4293      	cmp	r3, r2
 8014236:	d101      	bne.n	801423c <HAL_TIM_PWM_Stop+0x30>
 8014238:	2301      	movs	r3, #1
 801423a:	e000      	b.n	801423e <HAL_TIM_PWM_Stop+0x32>
 801423c:	2300      	movs	r3, #0
 801423e:	2b00      	cmp	r3, #0
 8014240:	d017      	beq.n	8014272 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	6a1a      	ldr	r2, [r3, #32]
 8014248:	f241 1311 	movw	r3, #4369	; 0x1111
 801424c:	4013      	ands	r3, r2
 801424e:	2b00      	cmp	r3, #0
 8014250:	d10f      	bne.n	8014272 <HAL_TIM_PWM_Stop+0x66>
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	6a1a      	ldr	r2, [r3, #32]
 8014258:	f240 4344 	movw	r3, #1092	; 0x444
 801425c:	4013      	ands	r3, r2
 801425e:	2b00      	cmp	r3, #0
 8014260:	d107      	bne.n	8014272 <HAL_TIM_PWM_Stop+0x66>
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014270:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	6a1a      	ldr	r2, [r3, #32]
 8014278:	f241 1311 	movw	r3, #4369	; 0x1111
 801427c:	4013      	ands	r3, r2
 801427e:	2b00      	cmp	r3, #0
 8014280:	d10f      	bne.n	80142a2 <HAL_TIM_PWM_Stop+0x96>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	6a1a      	ldr	r2, [r3, #32]
 8014288:	f240 4344 	movw	r3, #1092	; 0x444
 801428c:	4013      	ands	r3, r2
 801428e:	2b00      	cmp	r3, #0
 8014290:	d107      	bne.n	80142a2 <HAL_TIM_PWM_Stop+0x96>
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	681a      	ldr	r2, [r3, #0]
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f022 0201 	bic.w	r2, r2, #1
 80142a0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2201      	movs	r2, #1
 80142a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80142aa:	2300      	movs	r3, #0
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3708      	adds	r7, #8
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}
 80142b4:	40010000 	.word	0x40010000
 80142b8:	40010400 	.word	0x40010400

080142bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b086      	sub	sp, #24
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
 80142c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d101      	bne.n	80142d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80142cc:	2301      	movs	r3, #1
 80142ce:	e083      	b.n	80143d8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80142d6:	b2db      	uxtb	r3, r3
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d106      	bne.n	80142ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2200      	movs	r2, #0
 80142e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f7fb f82f 	bl	800f348 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2202      	movs	r2, #2
 80142ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	689b      	ldr	r3, [r3, #8]
 80142f8:	687a      	ldr	r2, [r7, #4]
 80142fa:	6812      	ldr	r2, [r2, #0]
 80142fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014300:	f023 0307 	bic.w	r3, r3, #7
 8014304:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681a      	ldr	r2, [r3, #0]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	3304      	adds	r3, #4
 801430e:	4619      	mov	r1, r3
 8014310:	4610      	mov	r0, r2
 8014312:	f000 fbf1 	bl	8014af8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	689b      	ldr	r3, [r3, #8]
 801431c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	699b      	ldr	r3, [r3, #24]
 8014324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	6a1b      	ldr	r3, [r3, #32]
 801432c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	697a      	ldr	r2, [r7, #20]
 8014334:	4313      	orrs	r3, r2
 8014336:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801433e:	f023 0303 	bic.w	r3, r3, #3
 8014342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	689a      	ldr	r2, [r3, #8]
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	699b      	ldr	r3, [r3, #24]
 801434c:	021b      	lsls	r3, r3, #8
 801434e:	4313      	orrs	r3, r2
 8014350:	693a      	ldr	r2, [r7, #16]
 8014352:	4313      	orrs	r3, r2
 8014354:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8014356:	693b      	ldr	r3, [r7, #16]
 8014358:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801435c:	f023 030c 	bic.w	r3, r3, #12
 8014360:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801436c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	68da      	ldr	r2, [r3, #12]
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	69db      	ldr	r3, [r3, #28]
 8014376:	021b      	lsls	r3, r3, #8
 8014378:	4313      	orrs	r3, r2
 801437a:	693a      	ldr	r2, [r7, #16]
 801437c:	4313      	orrs	r3, r2
 801437e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	691b      	ldr	r3, [r3, #16]
 8014384:	011a      	lsls	r2, r3, #4
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	6a1b      	ldr	r3, [r3, #32]
 801438a:	031b      	lsls	r3, r3, #12
 801438c:	4313      	orrs	r3, r2
 801438e:	693a      	ldr	r2, [r7, #16]
 8014390:	4313      	orrs	r3, r2
 8014392:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801439a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80143a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	685a      	ldr	r2, [r3, #4]
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	695b      	ldr	r3, [r3, #20]
 80143ac:	011b      	lsls	r3, r3, #4
 80143ae:	4313      	orrs	r3, r2
 80143b0:	68fa      	ldr	r2, [r7, #12]
 80143b2:	4313      	orrs	r3, r2
 80143b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	697a      	ldr	r2, [r7, #20]
 80143bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	693a      	ldr	r2, [r7, #16]
 80143c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	68fa      	ldr	r2, [r7, #12]
 80143cc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2201      	movs	r2, #1
 80143d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80143d6:	2300      	movs	r3, #0
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3718      	adds	r7, #24
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}

080143e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b082      	sub	sp, #8
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
 80143e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d002      	beq.n	80143f6 <HAL_TIM_Encoder_Start+0x16>
 80143f0:	2b04      	cmp	r3, #4
 80143f2:	d008      	beq.n	8014406 <HAL_TIM_Encoder_Start+0x26>
 80143f4:	e00f      	b.n	8014416 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	2201      	movs	r2, #1
 80143fc:	2100      	movs	r1, #0
 80143fe:	4618      	mov	r0, r3
 8014400:	f000 fe64 	bl	80150cc <TIM_CCxChannelCmd>
      break;
 8014404:	e016      	b.n	8014434 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2201      	movs	r2, #1
 801440c:	2104      	movs	r1, #4
 801440e:	4618      	mov	r0, r3
 8014410:	f000 fe5c 	bl	80150cc <TIM_CCxChannelCmd>
      break;
 8014414:	e00e      	b.n	8014434 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2201      	movs	r2, #1
 801441c:	2100      	movs	r1, #0
 801441e:	4618      	mov	r0, r3
 8014420:	f000 fe54 	bl	80150cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	2201      	movs	r2, #1
 801442a:	2104      	movs	r1, #4
 801442c:	4618      	mov	r0, r3
 801442e:	f000 fe4d 	bl	80150cc <TIM_CCxChannelCmd>
      break;
 8014432:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	681a      	ldr	r2, [r3, #0]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	f042 0201 	orr.w	r2, r2, #1
 8014442:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8014444:	2300      	movs	r3, #0
}
 8014446:	4618      	mov	r0, r3
 8014448:	3708      	adds	r7, #8
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}

0801444e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801444e:	b580      	push	{r7, lr}
 8014450:	b082      	sub	sp, #8
 8014452:	af00      	add	r7, sp, #0
 8014454:	6078      	str	r0, [r7, #4]
 8014456:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d002      	beq.n	8014464 <HAL_TIM_Encoder_Stop+0x16>
 801445e:	2b04      	cmp	r3, #4
 8014460:	d008      	beq.n	8014474 <HAL_TIM_Encoder_Stop+0x26>
 8014462:	e00f      	b.n	8014484 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	2200      	movs	r2, #0
 801446a:	2100      	movs	r1, #0
 801446c:	4618      	mov	r0, r3
 801446e:	f000 fe2d 	bl	80150cc <TIM_CCxChannelCmd>
      break;
 8014472:	e016      	b.n	80144a2 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	2200      	movs	r2, #0
 801447a:	2104      	movs	r1, #4
 801447c:	4618      	mov	r0, r3
 801447e:	f000 fe25 	bl	80150cc <TIM_CCxChannelCmd>
      break;
 8014482:	e00e      	b.n	80144a2 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	2200      	movs	r2, #0
 801448a:	2100      	movs	r1, #0
 801448c:	4618      	mov	r0, r3
 801448e:	f000 fe1d 	bl	80150cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	2200      	movs	r2, #0
 8014498:	2104      	movs	r1, #4
 801449a:	4618      	mov	r0, r3
 801449c:	f000 fe16 	bl	80150cc <TIM_CCxChannelCmd>
      break;
 80144a0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	6a1a      	ldr	r2, [r3, #32]
 80144a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80144ac:	4013      	ands	r3, r2
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d10f      	bne.n	80144d2 <HAL_TIM_Encoder_Stop+0x84>
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	6a1a      	ldr	r2, [r3, #32]
 80144b8:	f240 4344 	movw	r3, #1092	; 0x444
 80144bc:	4013      	ands	r3, r2
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d107      	bne.n	80144d2 <HAL_TIM_Encoder_Stop+0x84>
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	681a      	ldr	r2, [r3, #0]
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	f022 0201 	bic.w	r2, r2, #1
 80144d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80144d2:	2300      	movs	r3, #0
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	3708      	adds	r7, #8
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd80      	pop	{r7, pc}

080144dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b082      	sub	sp, #8
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	691b      	ldr	r3, [r3, #16]
 80144ea:	f003 0302 	and.w	r3, r3, #2
 80144ee:	2b02      	cmp	r3, #2
 80144f0:	d122      	bne.n	8014538 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	f003 0302 	and.w	r3, r3, #2
 80144fc:	2b02      	cmp	r3, #2
 80144fe:	d11b      	bne.n	8014538 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	f06f 0202 	mvn.w	r2, #2
 8014508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2201      	movs	r2, #1
 801450e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	699b      	ldr	r3, [r3, #24]
 8014516:	f003 0303 	and.w	r3, r3, #3
 801451a:	2b00      	cmp	r3, #0
 801451c:	d003      	beq.n	8014526 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f000 facb 	bl	8014aba <HAL_TIM_IC_CaptureCallback>
 8014524:	e005      	b.n	8014532 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f000 fabd 	bl	8014aa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f000 face 	bl	8014ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2200      	movs	r2, #0
 8014536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	691b      	ldr	r3, [r3, #16]
 801453e:	f003 0304 	and.w	r3, r3, #4
 8014542:	2b04      	cmp	r3, #4
 8014544:	d122      	bne.n	801458c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	68db      	ldr	r3, [r3, #12]
 801454c:	f003 0304 	and.w	r3, r3, #4
 8014550:	2b04      	cmp	r3, #4
 8014552:	d11b      	bne.n	801458c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	f06f 0204 	mvn.w	r2, #4
 801455c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	2202      	movs	r2, #2
 8014562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	699b      	ldr	r3, [r3, #24]
 801456a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801456e:	2b00      	cmp	r3, #0
 8014570:	d003      	beq.n	801457a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f000 faa1 	bl	8014aba <HAL_TIM_IC_CaptureCallback>
 8014578:	e005      	b.n	8014586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f000 fa93 	bl	8014aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f000 faa4 	bl	8014ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	2200      	movs	r2, #0
 801458a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	691b      	ldr	r3, [r3, #16]
 8014592:	f003 0308 	and.w	r3, r3, #8
 8014596:	2b08      	cmp	r3, #8
 8014598:	d122      	bne.n	80145e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	68db      	ldr	r3, [r3, #12]
 80145a0:	f003 0308 	and.w	r3, r3, #8
 80145a4:	2b08      	cmp	r3, #8
 80145a6:	d11b      	bne.n	80145e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	f06f 0208 	mvn.w	r2, #8
 80145b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2204      	movs	r2, #4
 80145b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	69db      	ldr	r3, [r3, #28]
 80145be:	f003 0303 	and.w	r3, r3, #3
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d003      	beq.n	80145ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f000 fa77 	bl	8014aba <HAL_TIM_IC_CaptureCallback>
 80145cc:	e005      	b.n	80145da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f000 fa69 	bl	8014aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f000 fa7a 	bl	8014ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2200      	movs	r2, #0
 80145de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	691b      	ldr	r3, [r3, #16]
 80145e6:	f003 0310 	and.w	r3, r3, #16
 80145ea:	2b10      	cmp	r3, #16
 80145ec:	d122      	bne.n	8014634 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	68db      	ldr	r3, [r3, #12]
 80145f4:	f003 0310 	and.w	r3, r3, #16
 80145f8:	2b10      	cmp	r3, #16
 80145fa:	d11b      	bne.n	8014634 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	f06f 0210 	mvn.w	r2, #16
 8014604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2208      	movs	r2, #8
 801460a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	69db      	ldr	r3, [r3, #28]
 8014612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014616:	2b00      	cmp	r3, #0
 8014618:	d003      	beq.n	8014622 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f000 fa4d 	bl	8014aba <HAL_TIM_IC_CaptureCallback>
 8014620:	e005      	b.n	801462e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f000 fa3f 	bl	8014aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f000 fa50 	bl	8014ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	2200      	movs	r2, #0
 8014632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	691b      	ldr	r3, [r3, #16]
 801463a:	f003 0301 	and.w	r3, r3, #1
 801463e:	2b01      	cmp	r3, #1
 8014640:	d10e      	bne.n	8014660 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	68db      	ldr	r3, [r3, #12]
 8014648:	f003 0301 	and.w	r3, r3, #1
 801464c:	2b01      	cmp	r3, #1
 801464e:	d107      	bne.n	8014660 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f06f 0201 	mvn.w	r2, #1
 8014658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f7f7 f876 	bl	800b74c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	691b      	ldr	r3, [r3, #16]
 8014666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801466a:	2b80      	cmp	r3, #128	; 0x80
 801466c:	d10e      	bne.n	801468c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	68db      	ldr	r3, [r3, #12]
 8014674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014678:	2b80      	cmp	r3, #128	; 0x80
 801467a:	d107      	bne.n	801468c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f000 fee8 	bl	801545c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	691b      	ldr	r3, [r3, #16]
 8014692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014696:	2b40      	cmp	r3, #64	; 0x40
 8014698:	d10e      	bne.n	80146b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	68db      	ldr	r3, [r3, #12]
 80146a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146a4:	2b40      	cmp	r3, #64	; 0x40
 80146a6:	d107      	bne.n	80146b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80146b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f000 fa15 	bl	8014ae2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	691b      	ldr	r3, [r3, #16]
 80146be:	f003 0320 	and.w	r3, r3, #32
 80146c2:	2b20      	cmp	r3, #32
 80146c4:	d10e      	bne.n	80146e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	68db      	ldr	r3, [r3, #12]
 80146cc:	f003 0320 	and.w	r3, r3, #32
 80146d0:	2b20      	cmp	r3, #32
 80146d2:	d107      	bne.n	80146e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	f06f 0220 	mvn.w	r2, #32
 80146dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f000 feb2 	bl	8015448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80146e4:	bf00      	nop
 80146e6:	3708      	adds	r7, #8
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}

080146ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b084      	sub	sp, #16
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	60f8      	str	r0, [r7, #12]
 80146f4:	60b9      	str	r1, [r7, #8]
 80146f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80146fe:	2b01      	cmp	r3, #1
 8014700:	d101      	bne.n	8014706 <HAL_TIM_OC_ConfigChannel+0x1a>
 8014702:	2302      	movs	r3, #2
 8014704:	e04e      	b.n	80147a4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	2201      	movs	r2, #1
 801470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	2202      	movs	r2, #2
 8014712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2b0c      	cmp	r3, #12
 801471a:	d839      	bhi.n	8014790 <HAL_TIM_OC_ConfigChannel+0xa4>
 801471c:	a201      	add	r2, pc, #4	; (adr r2, 8014724 <HAL_TIM_OC_ConfigChannel+0x38>)
 801471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014722:	bf00      	nop
 8014724:	08014759 	.word	0x08014759
 8014728:	08014791 	.word	0x08014791
 801472c:	08014791 	.word	0x08014791
 8014730:	08014791 	.word	0x08014791
 8014734:	08014767 	.word	0x08014767
 8014738:	08014791 	.word	0x08014791
 801473c:	08014791 	.word	0x08014791
 8014740:	08014791 	.word	0x08014791
 8014744:	08014775 	.word	0x08014775
 8014748:	08014791 	.word	0x08014791
 801474c:	08014791 	.word	0x08014791
 8014750:	08014791 	.word	0x08014791
 8014754:	08014783 	.word	0x08014783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	68b9      	ldr	r1, [r7, #8]
 801475e:	4618      	mov	r0, r3
 8014760:	f000 fa6a 	bl	8014c38 <TIM_OC1_SetConfig>
      break;
 8014764:	e015      	b.n	8014792 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	68b9      	ldr	r1, [r7, #8]
 801476c:	4618      	mov	r0, r3
 801476e:	f000 fad3 	bl	8014d18 <TIM_OC2_SetConfig>
      break;
 8014772:	e00e      	b.n	8014792 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	68b9      	ldr	r1, [r7, #8]
 801477a:	4618      	mov	r0, r3
 801477c:	f000 fb42 	bl	8014e04 <TIM_OC3_SetConfig>
      break;
 8014780:	e007      	b.n	8014792 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	68b9      	ldr	r1, [r7, #8]
 8014788:	4618      	mov	r0, r3
 801478a:	f000 fbaf 	bl	8014eec <TIM_OC4_SetConfig>
      break;
 801478e:	e000      	b.n	8014792 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8014790:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	2201      	movs	r2, #1
 8014796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	2200      	movs	r2, #0
 801479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80147a2:	2300      	movs	r3, #0
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	3710      	adds	r7, #16
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}

080147ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	60b9      	str	r1, [r7, #8]
 80147b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80147be:	2b01      	cmp	r3, #1
 80147c0:	d101      	bne.n	80147c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80147c2:	2302      	movs	r3, #2
 80147c4:	e0b4      	b.n	8014930 <HAL_TIM_PWM_ConfigChannel+0x184>
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	2201      	movs	r2, #1
 80147ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	2202      	movs	r2, #2
 80147d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2b0c      	cmp	r3, #12
 80147da:	f200 809f 	bhi.w	801491c <HAL_TIM_PWM_ConfigChannel+0x170>
 80147de:	a201      	add	r2, pc, #4	; (adr r2, 80147e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80147e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147e4:	08014819 	.word	0x08014819
 80147e8:	0801491d 	.word	0x0801491d
 80147ec:	0801491d 	.word	0x0801491d
 80147f0:	0801491d 	.word	0x0801491d
 80147f4:	08014859 	.word	0x08014859
 80147f8:	0801491d 	.word	0x0801491d
 80147fc:	0801491d 	.word	0x0801491d
 8014800:	0801491d 	.word	0x0801491d
 8014804:	0801489b 	.word	0x0801489b
 8014808:	0801491d 	.word	0x0801491d
 801480c:	0801491d 	.word	0x0801491d
 8014810:	0801491d 	.word	0x0801491d
 8014814:	080148db 	.word	0x080148db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	68b9      	ldr	r1, [r7, #8]
 801481e:	4618      	mov	r0, r3
 8014820:	f000 fa0a 	bl	8014c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	699a      	ldr	r2, [r3, #24]
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	f042 0208 	orr.w	r2, r2, #8
 8014832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	699a      	ldr	r2, [r3, #24]
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	f022 0204 	bic.w	r2, r2, #4
 8014842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	6999      	ldr	r1, [r3, #24]
 801484a:	68bb      	ldr	r3, [r7, #8]
 801484c:	691a      	ldr	r2, [r3, #16]
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	430a      	orrs	r2, r1
 8014854:	619a      	str	r2, [r3, #24]
      break;
 8014856:	e062      	b.n	801491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	68b9      	ldr	r1, [r7, #8]
 801485e:	4618      	mov	r0, r3
 8014860:	f000 fa5a 	bl	8014d18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	699a      	ldr	r2, [r3, #24]
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	699a      	ldr	r2, [r3, #24]
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	6999      	ldr	r1, [r3, #24]
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	691b      	ldr	r3, [r3, #16]
 801488e:	021a      	lsls	r2, r3, #8
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	430a      	orrs	r2, r1
 8014896:	619a      	str	r2, [r3, #24]
      break;
 8014898:	e041      	b.n	801491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	68b9      	ldr	r1, [r7, #8]
 80148a0:	4618      	mov	r0, r3
 80148a2:	f000 faaf 	bl	8014e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	69da      	ldr	r2, [r3, #28]
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	f042 0208 	orr.w	r2, r2, #8
 80148b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	69da      	ldr	r2, [r3, #28]
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	f022 0204 	bic.w	r2, r2, #4
 80148c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	69d9      	ldr	r1, [r3, #28]
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	691a      	ldr	r2, [r3, #16]
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	430a      	orrs	r2, r1
 80148d6:	61da      	str	r2, [r3, #28]
      break;
 80148d8:	e021      	b.n	801491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	68b9      	ldr	r1, [r7, #8]
 80148e0:	4618      	mov	r0, r3
 80148e2:	f000 fb03 	bl	8014eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	69da      	ldr	r2, [r3, #28]
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80148f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	69da      	ldr	r2, [r3, #28]
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	69d9      	ldr	r1, [r3, #28]
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	691b      	ldr	r3, [r3, #16]
 8014910:	021a      	lsls	r2, r3, #8
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	430a      	orrs	r2, r1
 8014918:	61da      	str	r2, [r3, #28]
      break;
 801491a:	e000      	b.n	801491e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 801491c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	2201      	movs	r2, #1
 8014922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	2200      	movs	r2, #0
 801492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801492e:	2300      	movs	r3, #0
}
 8014930:	4618      	mov	r0, r3
 8014932:	3710      	adds	r7, #16
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}

08014938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014948:	2b01      	cmp	r3, #1
 801494a:	d101      	bne.n	8014950 <HAL_TIM_ConfigClockSource+0x18>
 801494c:	2302      	movs	r3, #2
 801494e:	e0a6      	b.n	8014a9e <HAL_TIM_ConfigClockSource+0x166>
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2201      	movs	r2, #1
 8014954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2202      	movs	r2, #2
 801495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	689b      	ldr	r3, [r3, #8]
 8014966:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801496e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014976:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	68fa      	ldr	r2, [r7, #12]
 801497e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	2b40      	cmp	r3, #64	; 0x40
 8014986:	d067      	beq.n	8014a58 <HAL_TIM_ConfigClockSource+0x120>
 8014988:	2b40      	cmp	r3, #64	; 0x40
 801498a:	d80b      	bhi.n	80149a4 <HAL_TIM_ConfigClockSource+0x6c>
 801498c:	2b10      	cmp	r3, #16
 801498e:	d073      	beq.n	8014a78 <HAL_TIM_ConfigClockSource+0x140>
 8014990:	2b10      	cmp	r3, #16
 8014992:	d802      	bhi.n	801499a <HAL_TIM_ConfigClockSource+0x62>
 8014994:	2b00      	cmp	r3, #0
 8014996:	d06f      	beq.n	8014a78 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8014998:	e078      	b.n	8014a8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801499a:	2b20      	cmp	r3, #32
 801499c:	d06c      	beq.n	8014a78 <HAL_TIM_ConfigClockSource+0x140>
 801499e:	2b30      	cmp	r3, #48	; 0x30
 80149a0:	d06a      	beq.n	8014a78 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80149a2:	e073      	b.n	8014a8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80149a4:	2b70      	cmp	r3, #112	; 0x70
 80149a6:	d00d      	beq.n	80149c4 <HAL_TIM_ConfigClockSource+0x8c>
 80149a8:	2b70      	cmp	r3, #112	; 0x70
 80149aa:	d804      	bhi.n	80149b6 <HAL_TIM_ConfigClockSource+0x7e>
 80149ac:	2b50      	cmp	r3, #80	; 0x50
 80149ae:	d033      	beq.n	8014a18 <HAL_TIM_ConfigClockSource+0xe0>
 80149b0:	2b60      	cmp	r3, #96	; 0x60
 80149b2:	d041      	beq.n	8014a38 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80149b4:	e06a      	b.n	8014a8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80149b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80149ba:	d066      	beq.n	8014a8a <HAL_TIM_ConfigClockSource+0x152>
 80149bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80149c0:	d017      	beq.n	80149f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80149c2:	e063      	b.n	8014a8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6818      	ldr	r0, [r3, #0]
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	6899      	ldr	r1, [r3, #8]
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	685a      	ldr	r2, [r3, #4]
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	68db      	ldr	r3, [r3, #12]
 80149d4:	f000 fb5a 	bl	801508c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	689b      	ldr	r3, [r3, #8]
 80149de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80149e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	68fa      	ldr	r2, [r7, #12]
 80149ee:	609a      	str	r2, [r3, #8]
      break;
 80149f0:	e04c      	b.n	8014a8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	6818      	ldr	r0, [r3, #0]
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	6899      	ldr	r1, [r3, #8]
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	685a      	ldr	r2, [r3, #4]
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	68db      	ldr	r3, [r3, #12]
 8014a02:	f000 fb43 	bl	801508c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	689a      	ldr	r2, [r3, #8]
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014a14:	609a      	str	r2, [r3, #8]
      break;
 8014a16:	e039      	b.n	8014a8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	6818      	ldr	r0, [r3, #0]
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	6859      	ldr	r1, [r3, #4]
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	68db      	ldr	r3, [r3, #12]
 8014a24:	461a      	mov	r2, r3
 8014a26:	f000 fab7 	bl	8014f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	2150      	movs	r1, #80	; 0x50
 8014a30:	4618      	mov	r0, r3
 8014a32:	f000 fb10 	bl	8015056 <TIM_ITRx_SetConfig>
      break;
 8014a36:	e029      	b.n	8014a8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	6818      	ldr	r0, [r3, #0]
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	6859      	ldr	r1, [r3, #4]
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	68db      	ldr	r3, [r3, #12]
 8014a44:	461a      	mov	r2, r3
 8014a46:	f000 fad6 	bl	8014ff6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	2160      	movs	r1, #96	; 0x60
 8014a50:	4618      	mov	r0, r3
 8014a52:	f000 fb00 	bl	8015056 <TIM_ITRx_SetConfig>
      break;
 8014a56:	e019      	b.n	8014a8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6818      	ldr	r0, [r3, #0]
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	6859      	ldr	r1, [r3, #4]
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	68db      	ldr	r3, [r3, #12]
 8014a64:	461a      	mov	r2, r3
 8014a66:	f000 fa97 	bl	8014f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	2140      	movs	r1, #64	; 0x40
 8014a70:	4618      	mov	r0, r3
 8014a72:	f000 faf0 	bl	8015056 <TIM_ITRx_SetConfig>
      break;
 8014a76:	e009      	b.n	8014a8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	4619      	mov	r1, r3
 8014a82:	4610      	mov	r0, r2
 8014a84:	f000 fae7 	bl	8015056 <TIM_ITRx_SetConfig>
      break;
 8014a88:	e000      	b.n	8014a8c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8014a8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2201      	movs	r2, #1
 8014a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2200      	movs	r2, #0
 8014a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014a9c:	2300      	movs	r3, #0
}
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	3710      	adds	r7, #16
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	bd80      	pop	{r7, pc}

08014aa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014aa6:	b480      	push	{r7}
 8014aa8:	b083      	sub	sp, #12
 8014aaa:	af00      	add	r7, sp, #0
 8014aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014aae:	bf00      	nop
 8014ab0:	370c      	adds	r7, #12
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab8:	4770      	bx	lr

08014aba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014aba:	b480      	push	{r7}
 8014abc:	b083      	sub	sp, #12
 8014abe:	af00      	add	r7, sp, #0
 8014ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014ac2:	bf00      	nop
 8014ac4:	370c      	adds	r7, #12
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014acc:	4770      	bx	lr

08014ace <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014ace:	b480      	push	{r7}
 8014ad0:	b083      	sub	sp, #12
 8014ad2:	af00      	add	r7, sp, #0
 8014ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014ad6:	bf00      	nop
 8014ad8:	370c      	adds	r7, #12
 8014ada:	46bd      	mov	sp, r7
 8014adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae0:	4770      	bx	lr

08014ae2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014ae2:	b480      	push	{r7}
 8014ae4:	b083      	sub	sp, #12
 8014ae6:	af00      	add	r7, sp, #0
 8014ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014aea:	bf00      	nop
 8014aec:	370c      	adds	r7, #12
 8014aee:	46bd      	mov	sp, r7
 8014af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af4:	4770      	bx	lr
	...

08014af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014af8:	b480      	push	{r7}
 8014afa:	b085      	sub	sp, #20
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	4a40      	ldr	r2, [pc, #256]	; (8014c0c <TIM_Base_SetConfig+0x114>)
 8014b0c:	4293      	cmp	r3, r2
 8014b0e:	d013      	beq.n	8014b38 <TIM_Base_SetConfig+0x40>
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014b16:	d00f      	beq.n	8014b38 <TIM_Base_SetConfig+0x40>
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	4a3d      	ldr	r2, [pc, #244]	; (8014c10 <TIM_Base_SetConfig+0x118>)
 8014b1c:	4293      	cmp	r3, r2
 8014b1e:	d00b      	beq.n	8014b38 <TIM_Base_SetConfig+0x40>
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	4a3c      	ldr	r2, [pc, #240]	; (8014c14 <TIM_Base_SetConfig+0x11c>)
 8014b24:	4293      	cmp	r3, r2
 8014b26:	d007      	beq.n	8014b38 <TIM_Base_SetConfig+0x40>
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	4a3b      	ldr	r2, [pc, #236]	; (8014c18 <TIM_Base_SetConfig+0x120>)
 8014b2c:	4293      	cmp	r3, r2
 8014b2e:	d003      	beq.n	8014b38 <TIM_Base_SetConfig+0x40>
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	4a3a      	ldr	r2, [pc, #232]	; (8014c1c <TIM_Base_SetConfig+0x124>)
 8014b34:	4293      	cmp	r3, r2
 8014b36:	d108      	bne.n	8014b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	685b      	ldr	r3, [r3, #4]
 8014b44:	68fa      	ldr	r2, [r7, #12]
 8014b46:	4313      	orrs	r3, r2
 8014b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	4a2f      	ldr	r2, [pc, #188]	; (8014c0c <TIM_Base_SetConfig+0x114>)
 8014b4e:	4293      	cmp	r3, r2
 8014b50:	d02b      	beq.n	8014baa <TIM_Base_SetConfig+0xb2>
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014b58:	d027      	beq.n	8014baa <TIM_Base_SetConfig+0xb2>
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	4a2c      	ldr	r2, [pc, #176]	; (8014c10 <TIM_Base_SetConfig+0x118>)
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	d023      	beq.n	8014baa <TIM_Base_SetConfig+0xb2>
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	4a2b      	ldr	r2, [pc, #172]	; (8014c14 <TIM_Base_SetConfig+0x11c>)
 8014b66:	4293      	cmp	r3, r2
 8014b68:	d01f      	beq.n	8014baa <TIM_Base_SetConfig+0xb2>
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	4a2a      	ldr	r2, [pc, #168]	; (8014c18 <TIM_Base_SetConfig+0x120>)
 8014b6e:	4293      	cmp	r3, r2
 8014b70:	d01b      	beq.n	8014baa <TIM_Base_SetConfig+0xb2>
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	4a29      	ldr	r2, [pc, #164]	; (8014c1c <TIM_Base_SetConfig+0x124>)
 8014b76:	4293      	cmp	r3, r2
 8014b78:	d017      	beq.n	8014baa <TIM_Base_SetConfig+0xb2>
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	4a28      	ldr	r2, [pc, #160]	; (8014c20 <TIM_Base_SetConfig+0x128>)
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	d013      	beq.n	8014baa <TIM_Base_SetConfig+0xb2>
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	4a27      	ldr	r2, [pc, #156]	; (8014c24 <TIM_Base_SetConfig+0x12c>)
 8014b86:	4293      	cmp	r3, r2
 8014b88:	d00f      	beq.n	8014baa <TIM_Base_SetConfig+0xb2>
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	4a26      	ldr	r2, [pc, #152]	; (8014c28 <TIM_Base_SetConfig+0x130>)
 8014b8e:	4293      	cmp	r3, r2
 8014b90:	d00b      	beq.n	8014baa <TIM_Base_SetConfig+0xb2>
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	4a25      	ldr	r2, [pc, #148]	; (8014c2c <TIM_Base_SetConfig+0x134>)
 8014b96:	4293      	cmp	r3, r2
 8014b98:	d007      	beq.n	8014baa <TIM_Base_SetConfig+0xb2>
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	4a24      	ldr	r2, [pc, #144]	; (8014c30 <TIM_Base_SetConfig+0x138>)
 8014b9e:	4293      	cmp	r3, r2
 8014ba0:	d003      	beq.n	8014baa <TIM_Base_SetConfig+0xb2>
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	4a23      	ldr	r2, [pc, #140]	; (8014c34 <TIM_Base_SetConfig+0x13c>)
 8014ba6:	4293      	cmp	r3, r2
 8014ba8:	d108      	bne.n	8014bbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	68db      	ldr	r3, [r3, #12]
 8014bb6:	68fa      	ldr	r2, [r7, #12]
 8014bb8:	4313      	orrs	r3, r2
 8014bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	695b      	ldr	r3, [r3, #20]
 8014bc6:	4313      	orrs	r3, r2
 8014bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	68fa      	ldr	r2, [r7, #12]
 8014bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014bd0:	683b      	ldr	r3, [r7, #0]
 8014bd2:	689a      	ldr	r2, [r3, #8]
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	681a      	ldr	r2, [r3, #0]
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	4a0a      	ldr	r2, [pc, #40]	; (8014c0c <TIM_Base_SetConfig+0x114>)
 8014be4:	4293      	cmp	r3, r2
 8014be6:	d003      	beq.n	8014bf0 <TIM_Base_SetConfig+0xf8>
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	4a0c      	ldr	r2, [pc, #48]	; (8014c1c <TIM_Base_SetConfig+0x124>)
 8014bec:	4293      	cmp	r3, r2
 8014bee:	d103      	bne.n	8014bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	691a      	ldr	r2, [r3, #16]
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2201      	movs	r2, #1
 8014bfc:	615a      	str	r2, [r3, #20]
}
 8014bfe:	bf00      	nop
 8014c00:	3714      	adds	r7, #20
 8014c02:	46bd      	mov	sp, r7
 8014c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop
 8014c0c:	40010000 	.word	0x40010000
 8014c10:	40000400 	.word	0x40000400
 8014c14:	40000800 	.word	0x40000800
 8014c18:	40000c00 	.word	0x40000c00
 8014c1c:	40010400 	.word	0x40010400
 8014c20:	40014000 	.word	0x40014000
 8014c24:	40014400 	.word	0x40014400
 8014c28:	40014800 	.word	0x40014800
 8014c2c:	40001800 	.word	0x40001800
 8014c30:	40001c00 	.word	0x40001c00
 8014c34:	40002000 	.word	0x40002000

08014c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b087      	sub	sp, #28
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6a1b      	ldr	r3, [r3, #32]
 8014c46:	f023 0201 	bic.w	r2, r3, #1
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6a1b      	ldr	r3, [r3, #32]
 8014c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	685b      	ldr	r3, [r3, #4]
 8014c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	699b      	ldr	r3, [r3, #24]
 8014c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	f023 0303 	bic.w	r3, r3, #3
 8014c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	68fa      	ldr	r2, [r7, #12]
 8014c76:	4313      	orrs	r3, r2
 8014c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014c7a:	697b      	ldr	r3, [r7, #20]
 8014c7c:	f023 0302 	bic.w	r3, r3, #2
 8014c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	689b      	ldr	r3, [r3, #8]
 8014c86:	697a      	ldr	r2, [r7, #20]
 8014c88:	4313      	orrs	r3, r2
 8014c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	4a20      	ldr	r2, [pc, #128]	; (8014d10 <TIM_OC1_SetConfig+0xd8>)
 8014c90:	4293      	cmp	r3, r2
 8014c92:	d003      	beq.n	8014c9c <TIM_OC1_SetConfig+0x64>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	4a1f      	ldr	r2, [pc, #124]	; (8014d14 <TIM_OC1_SetConfig+0xdc>)
 8014c98:	4293      	cmp	r3, r2
 8014c9a:	d10c      	bne.n	8014cb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	f023 0308 	bic.w	r3, r3, #8
 8014ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014ca4:	683b      	ldr	r3, [r7, #0]
 8014ca6:	68db      	ldr	r3, [r3, #12]
 8014ca8:	697a      	ldr	r2, [r7, #20]
 8014caa:	4313      	orrs	r3, r2
 8014cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	f023 0304 	bic.w	r3, r3, #4
 8014cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	4a15      	ldr	r2, [pc, #84]	; (8014d10 <TIM_OC1_SetConfig+0xd8>)
 8014cba:	4293      	cmp	r3, r2
 8014cbc:	d003      	beq.n	8014cc6 <TIM_OC1_SetConfig+0x8e>
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	4a14      	ldr	r2, [pc, #80]	; (8014d14 <TIM_OC1_SetConfig+0xdc>)
 8014cc2:	4293      	cmp	r3, r2
 8014cc4:	d111      	bne.n	8014cea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	695b      	ldr	r3, [r3, #20]
 8014cda:	693a      	ldr	r2, [r7, #16]
 8014cdc:	4313      	orrs	r3, r2
 8014cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	699b      	ldr	r3, [r3, #24]
 8014ce4:	693a      	ldr	r2, [r7, #16]
 8014ce6:	4313      	orrs	r3, r2
 8014ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	693a      	ldr	r2, [r7, #16]
 8014cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	68fa      	ldr	r2, [r7, #12]
 8014cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	685a      	ldr	r2, [r3, #4]
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	697a      	ldr	r2, [r7, #20]
 8014d02:	621a      	str	r2, [r3, #32]
}
 8014d04:	bf00      	nop
 8014d06:	371c      	adds	r7, #28
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0e:	4770      	bx	lr
 8014d10:	40010000 	.word	0x40010000
 8014d14:	40010400 	.word	0x40010400

08014d18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014d18:	b480      	push	{r7}
 8014d1a:	b087      	sub	sp, #28
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
 8014d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	6a1b      	ldr	r3, [r3, #32]
 8014d26:	f023 0210 	bic.w	r2, r3, #16
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	6a1b      	ldr	r3, [r3, #32]
 8014d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	685b      	ldr	r3, [r3, #4]
 8014d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	699b      	ldr	r3, [r3, #24]
 8014d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	021b      	lsls	r3, r3, #8
 8014d56:	68fa      	ldr	r2, [r7, #12]
 8014d58:	4313      	orrs	r3, r2
 8014d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014d5c:	697b      	ldr	r3, [r7, #20]
 8014d5e:	f023 0320 	bic.w	r3, r3, #32
 8014d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	689b      	ldr	r3, [r3, #8]
 8014d68:	011b      	lsls	r3, r3, #4
 8014d6a:	697a      	ldr	r2, [r7, #20]
 8014d6c:	4313      	orrs	r3, r2
 8014d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	4a22      	ldr	r2, [pc, #136]	; (8014dfc <TIM_OC2_SetConfig+0xe4>)
 8014d74:	4293      	cmp	r3, r2
 8014d76:	d003      	beq.n	8014d80 <TIM_OC2_SetConfig+0x68>
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	4a21      	ldr	r2, [pc, #132]	; (8014e00 <TIM_OC2_SetConfig+0xe8>)
 8014d7c:	4293      	cmp	r3, r2
 8014d7e:	d10d      	bne.n	8014d9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	68db      	ldr	r3, [r3, #12]
 8014d8c:	011b      	lsls	r3, r3, #4
 8014d8e:	697a      	ldr	r2, [r7, #20]
 8014d90:	4313      	orrs	r3, r2
 8014d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014d9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	4a17      	ldr	r2, [pc, #92]	; (8014dfc <TIM_OC2_SetConfig+0xe4>)
 8014da0:	4293      	cmp	r3, r2
 8014da2:	d003      	beq.n	8014dac <TIM_OC2_SetConfig+0x94>
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	4a16      	ldr	r2, [pc, #88]	; (8014e00 <TIM_OC2_SetConfig+0xe8>)
 8014da8:	4293      	cmp	r3, r2
 8014daa:	d113      	bne.n	8014dd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014db2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014dba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	695b      	ldr	r3, [r3, #20]
 8014dc0:	009b      	lsls	r3, r3, #2
 8014dc2:	693a      	ldr	r2, [r7, #16]
 8014dc4:	4313      	orrs	r3, r2
 8014dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014dc8:	683b      	ldr	r3, [r7, #0]
 8014dca:	699b      	ldr	r3, [r3, #24]
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	693a      	ldr	r2, [r7, #16]
 8014dd0:	4313      	orrs	r3, r2
 8014dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	693a      	ldr	r2, [r7, #16]
 8014dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	68fa      	ldr	r2, [r7, #12]
 8014dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	685a      	ldr	r2, [r3, #4]
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	697a      	ldr	r2, [r7, #20]
 8014dec:	621a      	str	r2, [r3, #32]
}
 8014dee:	bf00      	nop
 8014df0:	371c      	adds	r7, #28
 8014df2:	46bd      	mov	sp, r7
 8014df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df8:	4770      	bx	lr
 8014dfa:	bf00      	nop
 8014dfc:	40010000 	.word	0x40010000
 8014e00:	40010400 	.word	0x40010400

08014e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b087      	sub	sp, #28
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	6a1b      	ldr	r3, [r3, #32]
 8014e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	6a1b      	ldr	r3, [r3, #32]
 8014e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	685b      	ldr	r3, [r3, #4]
 8014e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	69db      	ldr	r3, [r3, #28]
 8014e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	f023 0303 	bic.w	r3, r3, #3
 8014e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	68fa      	ldr	r2, [r7, #12]
 8014e42:	4313      	orrs	r3, r2
 8014e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	689b      	ldr	r3, [r3, #8]
 8014e52:	021b      	lsls	r3, r3, #8
 8014e54:	697a      	ldr	r2, [r7, #20]
 8014e56:	4313      	orrs	r3, r2
 8014e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	4a21      	ldr	r2, [pc, #132]	; (8014ee4 <TIM_OC3_SetConfig+0xe0>)
 8014e5e:	4293      	cmp	r3, r2
 8014e60:	d003      	beq.n	8014e6a <TIM_OC3_SetConfig+0x66>
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	4a20      	ldr	r2, [pc, #128]	; (8014ee8 <TIM_OC3_SetConfig+0xe4>)
 8014e66:	4293      	cmp	r3, r2
 8014e68:	d10d      	bne.n	8014e86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	68db      	ldr	r3, [r3, #12]
 8014e76:	021b      	lsls	r3, r3, #8
 8014e78:	697a      	ldr	r2, [r7, #20]
 8014e7a:	4313      	orrs	r3, r2
 8014e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	4a16      	ldr	r2, [pc, #88]	; (8014ee4 <TIM_OC3_SetConfig+0xe0>)
 8014e8a:	4293      	cmp	r3, r2
 8014e8c:	d003      	beq.n	8014e96 <TIM_OC3_SetConfig+0x92>
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	4a15      	ldr	r2, [pc, #84]	; (8014ee8 <TIM_OC3_SetConfig+0xe4>)
 8014e92:	4293      	cmp	r3, r2
 8014e94:	d113      	bne.n	8014ebe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014e96:	693b      	ldr	r3, [r7, #16]
 8014e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014e9e:	693b      	ldr	r3, [r7, #16]
 8014ea0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	695b      	ldr	r3, [r3, #20]
 8014eaa:	011b      	lsls	r3, r3, #4
 8014eac:	693a      	ldr	r2, [r7, #16]
 8014eae:	4313      	orrs	r3, r2
 8014eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	699b      	ldr	r3, [r3, #24]
 8014eb6:	011b      	lsls	r3, r3, #4
 8014eb8:	693a      	ldr	r2, [r7, #16]
 8014eba:	4313      	orrs	r3, r2
 8014ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	693a      	ldr	r2, [r7, #16]
 8014ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	68fa      	ldr	r2, [r7, #12]
 8014ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	685a      	ldr	r2, [r3, #4]
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	697a      	ldr	r2, [r7, #20]
 8014ed6:	621a      	str	r2, [r3, #32]
}
 8014ed8:	bf00      	nop
 8014eda:	371c      	adds	r7, #28
 8014edc:	46bd      	mov	sp, r7
 8014ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee2:	4770      	bx	lr
 8014ee4:	40010000 	.word	0x40010000
 8014ee8:	40010400 	.word	0x40010400

08014eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014eec:	b480      	push	{r7}
 8014eee:	b087      	sub	sp, #28
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6a1b      	ldr	r3, [r3, #32]
 8014efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	6a1b      	ldr	r3, [r3, #32]
 8014f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	69db      	ldr	r3, [r3, #28]
 8014f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	021b      	lsls	r3, r3, #8
 8014f2a:	68fa      	ldr	r2, [r7, #12]
 8014f2c:	4313      	orrs	r3, r2
 8014f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	689b      	ldr	r3, [r3, #8]
 8014f3c:	031b      	lsls	r3, r3, #12
 8014f3e:	693a      	ldr	r2, [r7, #16]
 8014f40:	4313      	orrs	r3, r2
 8014f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	4a12      	ldr	r2, [pc, #72]	; (8014f90 <TIM_OC4_SetConfig+0xa4>)
 8014f48:	4293      	cmp	r3, r2
 8014f4a:	d003      	beq.n	8014f54 <TIM_OC4_SetConfig+0x68>
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	4a11      	ldr	r2, [pc, #68]	; (8014f94 <TIM_OC4_SetConfig+0xa8>)
 8014f50:	4293      	cmp	r3, r2
 8014f52:	d109      	bne.n	8014f68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	695b      	ldr	r3, [r3, #20]
 8014f60:	019b      	lsls	r3, r3, #6
 8014f62:	697a      	ldr	r2, [r7, #20]
 8014f64:	4313      	orrs	r3, r2
 8014f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	697a      	ldr	r2, [r7, #20]
 8014f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	68fa      	ldr	r2, [r7, #12]
 8014f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	685a      	ldr	r2, [r3, #4]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	693a      	ldr	r2, [r7, #16]
 8014f80:	621a      	str	r2, [r3, #32]
}
 8014f82:	bf00      	nop
 8014f84:	371c      	adds	r7, #28
 8014f86:	46bd      	mov	sp, r7
 8014f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8c:	4770      	bx	lr
 8014f8e:	bf00      	nop
 8014f90:	40010000 	.word	0x40010000
 8014f94:	40010400 	.word	0x40010400

08014f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b087      	sub	sp, #28
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	60b9      	str	r1, [r7, #8]
 8014fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	6a1b      	ldr	r3, [r3, #32]
 8014fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	6a1b      	ldr	r3, [r3, #32]
 8014fae:	f023 0201 	bic.w	r2, r3, #1
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	699b      	ldr	r3, [r3, #24]
 8014fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014fbc:	693b      	ldr	r3, [r7, #16]
 8014fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	011b      	lsls	r3, r3, #4
 8014fc8:	693a      	ldr	r2, [r7, #16]
 8014fca:	4313      	orrs	r3, r2
 8014fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	f023 030a 	bic.w	r3, r3, #10
 8014fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014fd6:	697a      	ldr	r2, [r7, #20]
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	4313      	orrs	r3, r2
 8014fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	693a      	ldr	r2, [r7, #16]
 8014fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	697a      	ldr	r2, [r7, #20]
 8014fe8:	621a      	str	r2, [r3, #32]
}
 8014fea:	bf00      	nop
 8014fec:	371c      	adds	r7, #28
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff4:	4770      	bx	lr

08014ff6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014ff6:	b480      	push	{r7}
 8014ff8:	b087      	sub	sp, #28
 8014ffa:	af00      	add	r7, sp, #0
 8014ffc:	60f8      	str	r0, [r7, #12]
 8014ffe:	60b9      	str	r1, [r7, #8]
 8015000:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	6a1b      	ldr	r3, [r3, #32]
 8015006:	f023 0210 	bic.w	r2, r3, #16
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	699b      	ldr	r3, [r3, #24]
 8015012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	6a1b      	ldr	r3, [r3, #32]
 8015018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801501a:	697b      	ldr	r3, [r7, #20]
 801501c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	031b      	lsls	r3, r3, #12
 8015026:	697a      	ldr	r2, [r7, #20]
 8015028:	4313      	orrs	r3, r2
 801502a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015032:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	011b      	lsls	r3, r3, #4
 8015038:	693a      	ldr	r2, [r7, #16]
 801503a:	4313      	orrs	r3, r2
 801503c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	697a      	ldr	r2, [r7, #20]
 8015042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	693a      	ldr	r2, [r7, #16]
 8015048:	621a      	str	r2, [r3, #32]
}
 801504a:	bf00      	nop
 801504c:	371c      	adds	r7, #28
 801504e:	46bd      	mov	sp, r7
 8015050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015054:	4770      	bx	lr

08015056 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015056:	b480      	push	{r7}
 8015058:	b085      	sub	sp, #20
 801505a:	af00      	add	r7, sp, #0
 801505c:	6078      	str	r0, [r7, #4]
 801505e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	689b      	ldr	r3, [r3, #8]
 8015064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801506c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801506e:	683a      	ldr	r2, [r7, #0]
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	4313      	orrs	r3, r2
 8015074:	f043 0307 	orr.w	r3, r3, #7
 8015078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	68fa      	ldr	r2, [r7, #12]
 801507e:	609a      	str	r2, [r3, #8]
}
 8015080:	bf00      	nop
 8015082:	3714      	adds	r7, #20
 8015084:	46bd      	mov	sp, r7
 8015086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508a:	4770      	bx	lr

0801508c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801508c:	b480      	push	{r7}
 801508e:	b087      	sub	sp, #28
 8015090:	af00      	add	r7, sp, #0
 8015092:	60f8      	str	r0, [r7, #12]
 8015094:	60b9      	str	r1, [r7, #8]
 8015096:	607a      	str	r2, [r7, #4]
 8015098:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	689b      	ldr	r3, [r3, #8]
 801509e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80150a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80150a8:	683b      	ldr	r3, [r7, #0]
 80150aa:	021a      	lsls	r2, r3, #8
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	431a      	orrs	r2, r3
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	4313      	orrs	r3, r2
 80150b4:	697a      	ldr	r2, [r7, #20]
 80150b6:	4313      	orrs	r3, r2
 80150b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	697a      	ldr	r2, [r7, #20]
 80150be:	609a      	str	r2, [r3, #8]
}
 80150c0:	bf00      	nop
 80150c2:	371c      	adds	r7, #28
 80150c4:	46bd      	mov	sp, r7
 80150c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ca:	4770      	bx	lr

080150cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80150cc:	b480      	push	{r7}
 80150ce:	b087      	sub	sp, #28
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	60f8      	str	r0, [r7, #12]
 80150d4:	60b9      	str	r1, [r7, #8]
 80150d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	f003 031f 	and.w	r3, r3, #31
 80150de:	2201      	movs	r2, #1
 80150e0:	fa02 f303 	lsl.w	r3, r2, r3
 80150e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	6a1a      	ldr	r2, [r3, #32]
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	43db      	mvns	r3, r3
 80150ee:	401a      	ands	r2, r3
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	6a1a      	ldr	r2, [r3, #32]
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	f003 031f 	and.w	r3, r3, #31
 80150fe:	6879      	ldr	r1, [r7, #4]
 8015100:	fa01 f303 	lsl.w	r3, r1, r3
 8015104:	431a      	orrs	r2, r3
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	621a      	str	r2, [r3, #32]
}
 801510a:	bf00      	nop
 801510c:	371c      	adds	r7, #28
 801510e:	46bd      	mov	sp, r7
 8015110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015114:	4770      	bx	lr

08015116 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015116:	b580      	push	{r7, lr}
 8015118:	b084      	sub	sp, #16
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
 801511e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	2b04      	cmp	r3, #4
 8015124:	d00d      	beq.n	8015142 <HAL_TIMEx_OCN_Start_IT+0x2c>
 8015126:	2b08      	cmp	r3, #8
 8015128:	d014      	beq.n	8015154 <HAL_TIMEx_OCN_Start_IT+0x3e>
 801512a:	2b00      	cmp	r3, #0
 801512c:	d000      	beq.n	8015130 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 801512e:	e01a      	b.n	8015166 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	68da      	ldr	r2, [r3, #12]
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	f042 0202 	orr.w	r2, r2, #2
 801513e:	60da      	str	r2, [r3, #12]
      break;
 8015140:	e011      	b.n	8015166 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	68da      	ldr	r2, [r3, #12]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	f042 0204 	orr.w	r2, r2, #4
 8015150:	60da      	str	r2, [r3, #12]
      break;
 8015152:	e008      	b.n	8015166 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	68da      	ldr	r2, [r3, #12]
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	f042 0208 	orr.w	r2, r2, #8
 8015162:	60da      	str	r2, [r3, #12]
      break;
 8015164:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	68da      	ldr	r2, [r3, #12]
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015174:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	2204      	movs	r2, #4
 801517c:	6839      	ldr	r1, [r7, #0]
 801517e:	4618      	mov	r0, r3
 8015180:	f000 f976 	bl	8015470 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015192:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	689b      	ldr	r3, [r3, #8]
 801519a:	f003 0307 	and.w	r3, r3, #7
 801519e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	2b06      	cmp	r3, #6
 80151a4:	d007      	beq.n	80151b6 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	681a      	ldr	r2, [r3, #0]
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	f042 0201 	orr.w	r2, r2, #1
 80151b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80151b6:	2300      	movs	r3, #0
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	3710      	adds	r7, #16
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}

080151c0 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b084      	sub	sp, #16
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	2b04      	cmp	r3, #4
 80151ce:	d00d      	beq.n	80151ec <HAL_TIMEx_OCN_Stop_IT+0x2c>
 80151d0:	2b08      	cmp	r3, #8
 80151d2:	d014      	beq.n	80151fe <HAL_TIMEx_OCN_Stop_IT+0x3e>
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d000      	beq.n	80151da <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80151d8:	e01a      	b.n	8015210 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	68da      	ldr	r2, [r3, #12]
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	f022 0202 	bic.w	r2, r2, #2
 80151e8:	60da      	str	r2, [r3, #12]
      break;
 80151ea:	e011      	b.n	8015210 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	68da      	ldr	r2, [r3, #12]
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	f022 0204 	bic.w	r2, r2, #4
 80151fa:	60da      	str	r2, [r3, #12]
      break;
 80151fc:	e008      	b.n	8015210 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	68da      	ldr	r2, [r3, #12]
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	f022 0208 	bic.w	r2, r2, #8
 801520c:	60da      	str	r2, [r3, #12]
      break;
 801520e:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	2200      	movs	r2, #0
 8015216:	6839      	ldr	r1, [r7, #0]
 8015218:	4618      	mov	r0, r3
 801521a:	f000 f929 	bl	8015470 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	6a1b      	ldr	r3, [r3, #32]
 8015224:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8015226:	68fa      	ldr	r2, [r7, #12]
 8015228:	f240 4344 	movw	r3, #1092	; 0x444
 801522c:	4013      	ands	r3, r2
 801522e:	2b00      	cmp	r3, #0
 8015230:	d107      	bne.n	8015242 <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	68da      	ldr	r2, [r3, #12]
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015240:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	6a1a      	ldr	r2, [r3, #32]
 8015248:	f241 1311 	movw	r3, #4369	; 0x1111
 801524c:	4013      	ands	r3, r2
 801524e:	2b00      	cmp	r3, #0
 8015250:	d10f      	bne.n	8015272 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	6a1a      	ldr	r2, [r3, #32]
 8015258:	f240 4344 	movw	r3, #1092	; 0x444
 801525c:	4013      	ands	r3, r2
 801525e:	2b00      	cmp	r3, #0
 8015260:	d107      	bne.n	8015272 <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015270:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	6a1a      	ldr	r2, [r3, #32]
 8015278:	f241 1311 	movw	r3, #4369	; 0x1111
 801527c:	4013      	ands	r3, r2
 801527e:	2b00      	cmp	r3, #0
 8015280:	d10f      	bne.n	80152a2 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	6a1a      	ldr	r2, [r3, #32]
 8015288:	f240 4344 	movw	r3, #1092	; 0x444
 801528c:	4013      	ands	r3, r2
 801528e:	2b00      	cmp	r3, #0
 8015290:	d107      	bne.n	80152a2 <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	f022 0201 	bic.w	r2, r2, #1
 80152a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80152a2:	2300      	movs	r3, #0
}
 80152a4:	4618      	mov	r0, r3
 80152a6:	3710      	adds	r7, #16
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}

080152ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80152ac:	b480      	push	{r7}
 80152ae:	b085      	sub	sp, #20
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80152bc:	2b01      	cmp	r3, #1
 80152be:	d101      	bne.n	80152c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80152c0:	2302      	movs	r3, #2
 80152c2:	e05a      	b.n	801537a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2201      	movs	r2, #1
 80152c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2202      	movs	r2, #2
 80152d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	689b      	ldr	r3, [r3, #8]
 80152e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80152ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	68fa      	ldr	r2, [r7, #12]
 80152f2:	4313      	orrs	r3, r2
 80152f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	68fa      	ldr	r2, [r7, #12]
 80152fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	4a21      	ldr	r2, [pc, #132]	; (8015388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8015304:	4293      	cmp	r3, r2
 8015306:	d022      	beq.n	801534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015310:	d01d      	beq.n	801534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	4a1d      	ldr	r2, [pc, #116]	; (801538c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8015318:	4293      	cmp	r3, r2
 801531a:	d018      	beq.n	801534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	4a1b      	ldr	r2, [pc, #108]	; (8015390 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8015322:	4293      	cmp	r3, r2
 8015324:	d013      	beq.n	801534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	4a1a      	ldr	r2, [pc, #104]	; (8015394 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801532c:	4293      	cmp	r3, r2
 801532e:	d00e      	beq.n	801534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	4a18      	ldr	r2, [pc, #96]	; (8015398 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8015336:	4293      	cmp	r3, r2
 8015338:	d009      	beq.n	801534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	4a17      	ldr	r2, [pc, #92]	; (801539c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8015340:	4293      	cmp	r3, r2
 8015342:	d004      	beq.n	801534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	4a15      	ldr	r2, [pc, #84]	; (80153a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801534a:	4293      	cmp	r3, r2
 801534c:	d10c      	bne.n	8015368 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801534e:	68bb      	ldr	r3, [r7, #8]
 8015350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	685b      	ldr	r3, [r3, #4]
 801535a:	68ba      	ldr	r2, [r7, #8]
 801535c:	4313      	orrs	r3, r2
 801535e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	68ba      	ldr	r2, [r7, #8]
 8015366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2201      	movs	r2, #1
 801536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2200      	movs	r2, #0
 8015374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015378:	2300      	movs	r3, #0
}
 801537a:	4618      	mov	r0, r3
 801537c:	3714      	adds	r7, #20
 801537e:	46bd      	mov	sp, r7
 8015380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015384:	4770      	bx	lr
 8015386:	bf00      	nop
 8015388:	40010000 	.word	0x40010000
 801538c:	40000400 	.word	0x40000400
 8015390:	40000800 	.word	0x40000800
 8015394:	40000c00 	.word	0x40000c00
 8015398:	40010400 	.word	0x40010400
 801539c:	40014000 	.word	0x40014000
 80153a0:	40001800 	.word	0x40001800

080153a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80153a4:	b480      	push	{r7}
 80153a6:	b085      	sub	sp, #20
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
 80153ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80153ae:	2300      	movs	r3, #0
 80153b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80153b8:	2b01      	cmp	r3, #1
 80153ba:	d101      	bne.n	80153c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80153bc:	2302      	movs	r3, #2
 80153be:	e03d      	b.n	801543c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2201      	movs	r2, #1
 80153c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	68db      	ldr	r3, [r3, #12]
 80153d2:	4313      	orrs	r3, r2
 80153d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	689b      	ldr	r3, [r3, #8]
 80153e0:	4313      	orrs	r3, r2
 80153e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	4313      	orrs	r3, r2
 80153f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	4313      	orrs	r3, r2
 80153fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	691b      	ldr	r3, [r3, #16]
 801540a:	4313      	orrs	r3, r2
 801540c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	695b      	ldr	r3, [r3, #20]
 8015418:	4313      	orrs	r3, r2
 801541a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	69db      	ldr	r3, [r3, #28]
 8015426:	4313      	orrs	r3, r2
 8015428:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	68fa      	ldr	r2, [r7, #12]
 8015430:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	2200      	movs	r2, #0
 8015436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801543a:	2300      	movs	r3, #0
}
 801543c:	4618      	mov	r0, r3
 801543e:	3714      	adds	r7, #20
 8015440:	46bd      	mov	sp, r7
 8015442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015446:	4770      	bx	lr

08015448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015450:	bf00      	nop
 8015452:	370c      	adds	r7, #12
 8015454:	46bd      	mov	sp, r7
 8015456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545a:	4770      	bx	lr

0801545c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801545c:	b480      	push	{r7}
 801545e:	b083      	sub	sp, #12
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015464:	bf00      	nop
 8015466:	370c      	adds	r7, #12
 8015468:	46bd      	mov	sp, r7
 801546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546e:	4770      	bx	lr

08015470 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8015470:	b480      	push	{r7}
 8015472:	b087      	sub	sp, #28
 8015474:	af00      	add	r7, sp, #0
 8015476:	60f8      	str	r0, [r7, #12]
 8015478:	60b9      	str	r1, [r7, #8]
 801547a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	f003 031f 	and.w	r3, r3, #31
 8015482:	2204      	movs	r2, #4
 8015484:	fa02 f303 	lsl.w	r3, r2, r3
 8015488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	6a1a      	ldr	r2, [r3, #32]
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	43db      	mvns	r3, r3
 8015492:	401a      	ands	r2, r3
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	6a1a      	ldr	r2, [r3, #32]
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	f003 031f 	and.w	r3, r3, #31
 80154a2:	6879      	ldr	r1, [r7, #4]
 80154a4:	fa01 f303 	lsl.w	r3, r1, r3
 80154a8:	431a      	orrs	r2, r3
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	621a      	str	r2, [r3, #32]
}
 80154ae:	bf00      	nop
 80154b0:	371c      	adds	r7, #28
 80154b2:	46bd      	mov	sp, r7
 80154b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b8:	4770      	bx	lr

080154ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80154ba:	b580      	push	{r7, lr}
 80154bc:	b082      	sub	sp, #8
 80154be:	af00      	add	r7, sp, #0
 80154c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d101      	bne.n	80154cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80154c8:	2301      	movs	r3, #1
 80154ca:	e03f      	b.n	801554c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d106      	bne.n	80154e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	2200      	movs	r2, #0
 80154dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f7fa f853 	bl	800f58c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	2224      	movs	r2, #36	; 0x24
 80154ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	68da      	ldr	r2, [r3, #12]
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80154fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80154fe:	6878      	ldr	r0, [r7, #4]
 8015500:	f000 f9b2 	bl	8015868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	691a      	ldr	r2, [r3, #16]
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015512:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	695a      	ldr	r2, [r3, #20]
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015522:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	68da      	ldr	r2, [r3, #12]
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015532:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2200      	movs	r2, #0
 8015538:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2220      	movs	r2, #32
 801553e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2220      	movs	r2, #32
 8015546:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801554a:	2300      	movs	r3, #0
}
 801554c:	4618      	mov	r0, r3
 801554e:	3708      	adds	r7, #8
 8015550:	46bd      	mov	sp, r7
 8015552:	bd80      	pop	{r7, pc}

08015554 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b088      	sub	sp, #32
 8015558:	af02      	add	r7, sp, #8
 801555a:	60f8      	str	r0, [r7, #12]
 801555c:	60b9      	str	r1, [r7, #8]
 801555e:	603b      	str	r3, [r7, #0]
 8015560:	4613      	mov	r3, r2
 8015562:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8015564:	2300      	movs	r3, #0
 8015566:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801556e:	b2db      	uxtb	r3, r3
 8015570:	2b20      	cmp	r3, #32
 8015572:	f040 8083 	bne.w	801567c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d002      	beq.n	8015582 <HAL_UART_Transmit+0x2e>
 801557c:	88fb      	ldrh	r3, [r7, #6]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d101      	bne.n	8015586 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8015582:	2301      	movs	r3, #1
 8015584:	e07b      	b.n	801567e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801558c:	2b01      	cmp	r3, #1
 801558e:	d101      	bne.n	8015594 <HAL_UART_Transmit+0x40>
 8015590:	2302      	movs	r3, #2
 8015592:	e074      	b.n	801567e <HAL_UART_Transmit+0x12a>
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2201      	movs	r2, #1
 8015598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	2200      	movs	r2, #0
 80155a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	2221      	movs	r2, #33	; 0x21
 80155a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80155aa:	f7fb fd25 	bl	8010ff8 <HAL_GetTick>
 80155ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	88fa      	ldrh	r2, [r7, #6]
 80155b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	88fa      	ldrh	r2, [r7, #6]
 80155ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	2200      	movs	r2, #0
 80155c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80155c4:	e042      	b.n	801564c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80155ca:	b29b      	uxth	r3, r3
 80155cc:	3b01      	subs	r3, #1
 80155ce:	b29a      	uxth	r2, r3
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	689b      	ldr	r3, [r3, #8]
 80155d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80155dc:	d122      	bne.n	8015624 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	9300      	str	r3, [sp, #0]
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	2200      	movs	r2, #0
 80155e6:	2180      	movs	r1, #128	; 0x80
 80155e8:	68f8      	ldr	r0, [r7, #12]
 80155ea:	f000 f8f2 	bl	80157d2 <UART_WaitOnFlagUntilTimeout>
 80155ee:	4603      	mov	r3, r0
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d001      	beq.n	80155f8 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80155f4:	2303      	movs	r3, #3
 80155f6:	e042      	b.n	801567e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80155fc:	693b      	ldr	r3, [r7, #16]
 80155fe:	881b      	ldrh	r3, [r3, #0]
 8015600:	461a      	mov	r2, r3
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801560a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	691b      	ldr	r3, [r3, #16]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d103      	bne.n	801561c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	3302      	adds	r3, #2
 8015618:	60bb      	str	r3, [r7, #8]
 801561a:	e017      	b.n	801564c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	3301      	adds	r3, #1
 8015620:	60bb      	str	r3, [r7, #8]
 8015622:	e013      	b.n	801564c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	9300      	str	r3, [sp, #0]
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	2200      	movs	r2, #0
 801562c:	2180      	movs	r1, #128	; 0x80
 801562e:	68f8      	ldr	r0, [r7, #12]
 8015630:	f000 f8cf 	bl	80157d2 <UART_WaitOnFlagUntilTimeout>
 8015634:	4603      	mov	r3, r0
 8015636:	2b00      	cmp	r3, #0
 8015638:	d001      	beq.n	801563e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801563a:	2303      	movs	r3, #3
 801563c:	e01f      	b.n	801567e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	1c5a      	adds	r2, r3, #1
 8015642:	60ba      	str	r2, [r7, #8]
 8015644:	781a      	ldrb	r2, [r3, #0]
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015650:	b29b      	uxth	r3, r3
 8015652:	2b00      	cmp	r3, #0
 8015654:	d1b7      	bne.n	80155c6 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	9300      	str	r3, [sp, #0]
 801565a:	697b      	ldr	r3, [r7, #20]
 801565c:	2200      	movs	r2, #0
 801565e:	2140      	movs	r1, #64	; 0x40
 8015660:	68f8      	ldr	r0, [r7, #12]
 8015662:	f000 f8b6 	bl	80157d2 <UART_WaitOnFlagUntilTimeout>
 8015666:	4603      	mov	r3, r0
 8015668:	2b00      	cmp	r3, #0
 801566a:	d001      	beq.n	8015670 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801566c:	2303      	movs	r3, #3
 801566e:	e006      	b.n	801567e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	2220      	movs	r2, #32
 8015674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8015678:	2300      	movs	r3, #0
 801567a:	e000      	b.n	801567e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801567c:	2302      	movs	r3, #2
  }
}
 801567e:	4618      	mov	r0, r3
 8015680:	3718      	adds	r7, #24
 8015682:	46bd      	mov	sp, r7
 8015684:	bd80      	pop	{r7, pc}

08015686 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015686:	b580      	push	{r7, lr}
 8015688:	b088      	sub	sp, #32
 801568a:	af02      	add	r7, sp, #8
 801568c:	60f8      	str	r0, [r7, #12]
 801568e:	60b9      	str	r1, [r7, #8]
 8015690:	603b      	str	r3, [r7, #0]
 8015692:	4613      	mov	r3, r2
 8015694:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8015696:	2300      	movs	r3, #0
 8015698:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80156a0:	b2db      	uxtb	r3, r3
 80156a2:	2b20      	cmp	r3, #32
 80156a4:	f040 8090 	bne.w	80157c8 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d002      	beq.n	80156b4 <HAL_UART_Receive+0x2e>
 80156ae:	88fb      	ldrh	r3, [r7, #6]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d101      	bne.n	80156b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80156b4:	2301      	movs	r3, #1
 80156b6:	e088      	b.n	80157ca <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80156be:	2b01      	cmp	r3, #1
 80156c0:	d101      	bne.n	80156c6 <HAL_UART_Receive+0x40>
 80156c2:	2302      	movs	r3, #2
 80156c4:	e081      	b.n	80157ca <HAL_UART_Receive+0x144>
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	2201      	movs	r2, #1
 80156ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	2200      	movs	r2, #0
 80156d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	2222      	movs	r2, #34	; 0x22
 80156d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80156dc:	f7fb fc8c 	bl	8010ff8 <HAL_GetTick>
 80156e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	88fa      	ldrh	r2, [r7, #6]
 80156e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	88fa      	ldrh	r2, [r7, #6]
 80156ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	2200      	movs	r2, #0
 80156f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80156f6:	e05c      	b.n	80157b2 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80156fc:	b29b      	uxth	r3, r3
 80156fe:	3b01      	subs	r3, #1
 8015700:	b29a      	uxth	r2, r3
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	689b      	ldr	r3, [r3, #8]
 801570a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801570e:	d12b      	bne.n	8015768 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	9300      	str	r3, [sp, #0]
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	2200      	movs	r2, #0
 8015718:	2120      	movs	r1, #32
 801571a:	68f8      	ldr	r0, [r7, #12]
 801571c:	f000 f859 	bl	80157d2 <UART_WaitOnFlagUntilTimeout>
 8015720:	4603      	mov	r3, r0
 8015722:	2b00      	cmp	r3, #0
 8015724:	d001      	beq.n	801572a <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8015726:	2303      	movs	r3, #3
 8015728:	e04f      	b.n	80157ca <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	691b      	ldr	r3, [r3, #16]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d10c      	bne.n	8015750 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	685b      	ldr	r3, [r3, #4]
 801573c:	b29b      	uxth	r3, r3
 801573e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015742:	b29a      	uxth	r2, r3
 8015744:	693b      	ldr	r3, [r7, #16]
 8015746:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	3302      	adds	r3, #2
 801574c:	60bb      	str	r3, [r7, #8]
 801574e:	e030      	b.n	80157b2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	685b      	ldr	r3, [r3, #4]
 8015756:	b29b      	uxth	r3, r3
 8015758:	b2db      	uxtb	r3, r3
 801575a:	b29a      	uxth	r2, r3
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	3301      	adds	r3, #1
 8015764:	60bb      	str	r3, [r7, #8]
 8015766:	e024      	b.n	80157b2 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	9300      	str	r3, [sp, #0]
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	2200      	movs	r2, #0
 8015770:	2120      	movs	r1, #32
 8015772:	68f8      	ldr	r0, [r7, #12]
 8015774:	f000 f82d 	bl	80157d2 <UART_WaitOnFlagUntilTimeout>
 8015778:	4603      	mov	r3, r0
 801577a:	2b00      	cmp	r3, #0
 801577c:	d001      	beq.n	8015782 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 801577e:	2303      	movs	r3, #3
 8015780:	e023      	b.n	80157ca <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	691b      	ldr	r3, [r3, #16]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d108      	bne.n	801579c <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	6859      	ldr	r1, [r3, #4]
 8015790:	68bb      	ldr	r3, [r7, #8]
 8015792:	1c5a      	adds	r2, r3, #1
 8015794:	60ba      	str	r2, [r7, #8]
 8015796:	b2ca      	uxtb	r2, r1
 8015798:	701a      	strb	r2, [r3, #0]
 801579a:	e00a      	b.n	80157b2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	685b      	ldr	r3, [r3, #4]
 80157a2:	b2da      	uxtb	r2, r3
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	1c59      	adds	r1, r3, #1
 80157a8:	60b9      	str	r1, [r7, #8]
 80157aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80157ae:	b2d2      	uxtb	r2, r2
 80157b0:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d19d      	bne.n	80156f8 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	2220      	movs	r2, #32
 80157c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80157c4:	2300      	movs	r3, #0
 80157c6:	e000      	b.n	80157ca <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80157c8:	2302      	movs	r3, #2
  }
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3718      	adds	r7, #24
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}

080157d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80157d2:	b580      	push	{r7, lr}
 80157d4:	b084      	sub	sp, #16
 80157d6:	af00      	add	r7, sp, #0
 80157d8:	60f8      	str	r0, [r7, #12]
 80157da:	60b9      	str	r1, [r7, #8]
 80157dc:	603b      	str	r3, [r7, #0]
 80157de:	4613      	mov	r3, r2
 80157e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80157e2:	e02c      	b.n	801583e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80157e4:	69bb      	ldr	r3, [r7, #24]
 80157e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157ea:	d028      	beq.n	801583e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80157ec:	69bb      	ldr	r3, [r7, #24]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d007      	beq.n	8015802 <UART_WaitOnFlagUntilTimeout+0x30>
 80157f2:	f7fb fc01 	bl	8010ff8 <HAL_GetTick>
 80157f6:	4602      	mov	r2, r0
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	1ad3      	subs	r3, r2, r3
 80157fc:	69ba      	ldr	r2, [r7, #24]
 80157fe:	429a      	cmp	r2, r3
 8015800:	d21d      	bcs.n	801583e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	68da      	ldr	r2, [r3, #12]
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8015810:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	695a      	ldr	r2, [r3, #20]
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	f022 0201 	bic.w	r2, r2, #1
 8015820:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	2220      	movs	r2, #32
 8015826:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	2220      	movs	r2, #32
 801582e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	2200      	movs	r2, #0
 8015836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801583a:	2303      	movs	r3, #3
 801583c:	e00f      	b.n	801585e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	681a      	ldr	r2, [r3, #0]
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	4013      	ands	r3, r2
 8015848:	68ba      	ldr	r2, [r7, #8]
 801584a:	429a      	cmp	r2, r3
 801584c:	bf0c      	ite	eq
 801584e:	2301      	moveq	r3, #1
 8015850:	2300      	movne	r3, #0
 8015852:	b2db      	uxtb	r3, r3
 8015854:	461a      	mov	r2, r3
 8015856:	79fb      	ldrb	r3, [r7, #7]
 8015858:	429a      	cmp	r2, r3
 801585a:	d0c3      	beq.n	80157e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801585c:	2300      	movs	r3, #0
}
 801585e:	4618      	mov	r0, r3
 8015860:	3710      	adds	r7, #16
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}
	...

08015868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801586c:	b085      	sub	sp, #20
 801586e:	af00      	add	r7, sp, #0
 8015870:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	691b      	ldr	r3, [r3, #16]
 8015878:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	68da      	ldr	r2, [r3, #12]
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	430a      	orrs	r2, r1
 8015886:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	689a      	ldr	r2, [r3, #8]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	691b      	ldr	r3, [r3, #16]
 8015890:	431a      	orrs	r2, r3
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	695b      	ldr	r3, [r3, #20]
 8015896:	431a      	orrs	r2, r3
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	69db      	ldr	r3, [r3, #28]
 801589c:	4313      	orrs	r3, r2
 801589e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	68db      	ldr	r3, [r3, #12]
 80158a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80158aa:	f023 030c 	bic.w	r3, r3, #12
 80158ae:	687a      	ldr	r2, [r7, #4]
 80158b0:	6812      	ldr	r2, [r2, #0]
 80158b2:	68f9      	ldr	r1, [r7, #12]
 80158b4:	430b      	orrs	r3, r1
 80158b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	695b      	ldr	r3, [r3, #20]
 80158be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	699a      	ldr	r2, [r3, #24]
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	430a      	orrs	r2, r1
 80158cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	69db      	ldr	r3, [r3, #28]
 80158d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80158d6:	f040 818b 	bne.w	8015bf0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	4ac1      	ldr	r2, [pc, #772]	; (8015be4 <UART_SetConfig+0x37c>)
 80158e0:	4293      	cmp	r3, r2
 80158e2:	d005      	beq.n	80158f0 <UART_SetConfig+0x88>
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	4abf      	ldr	r2, [pc, #764]	; (8015be8 <UART_SetConfig+0x380>)
 80158ea:	4293      	cmp	r3, r2
 80158ec:	f040 80bd 	bne.w	8015a6a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80158f0:	f7fd fce2 	bl	80132b8 <HAL_RCC_GetPCLK2Freq>
 80158f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	461d      	mov	r5, r3
 80158fa:	f04f 0600 	mov.w	r6, #0
 80158fe:	46a8      	mov	r8, r5
 8015900:	46b1      	mov	r9, r6
 8015902:	eb18 0308 	adds.w	r3, r8, r8
 8015906:	eb49 0409 	adc.w	r4, r9, r9
 801590a:	4698      	mov	r8, r3
 801590c:	46a1      	mov	r9, r4
 801590e:	eb18 0805 	adds.w	r8, r8, r5
 8015912:	eb49 0906 	adc.w	r9, r9, r6
 8015916:	f04f 0100 	mov.w	r1, #0
 801591a:	f04f 0200 	mov.w	r2, #0
 801591e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015922:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015926:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801592a:	4688      	mov	r8, r1
 801592c:	4691      	mov	r9, r2
 801592e:	eb18 0005 	adds.w	r0, r8, r5
 8015932:	eb49 0106 	adc.w	r1, r9, r6
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	685b      	ldr	r3, [r3, #4]
 801593a:	461d      	mov	r5, r3
 801593c:	f04f 0600 	mov.w	r6, #0
 8015940:	196b      	adds	r3, r5, r5
 8015942:	eb46 0406 	adc.w	r4, r6, r6
 8015946:	461a      	mov	r2, r3
 8015948:	4623      	mov	r3, r4
 801594a:	f7f3 f8d5 	bl	8008af8 <__aeabi_uldivmod>
 801594e:	4603      	mov	r3, r0
 8015950:	460c      	mov	r4, r1
 8015952:	461a      	mov	r2, r3
 8015954:	4ba5      	ldr	r3, [pc, #660]	; (8015bec <UART_SetConfig+0x384>)
 8015956:	fba3 2302 	umull	r2, r3, r3, r2
 801595a:	095b      	lsrs	r3, r3, #5
 801595c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	461d      	mov	r5, r3
 8015964:	f04f 0600 	mov.w	r6, #0
 8015968:	46a9      	mov	r9, r5
 801596a:	46b2      	mov	sl, r6
 801596c:	eb19 0309 	adds.w	r3, r9, r9
 8015970:	eb4a 040a 	adc.w	r4, sl, sl
 8015974:	4699      	mov	r9, r3
 8015976:	46a2      	mov	sl, r4
 8015978:	eb19 0905 	adds.w	r9, r9, r5
 801597c:	eb4a 0a06 	adc.w	sl, sl, r6
 8015980:	f04f 0100 	mov.w	r1, #0
 8015984:	f04f 0200 	mov.w	r2, #0
 8015988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801598c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015990:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015994:	4689      	mov	r9, r1
 8015996:	4692      	mov	sl, r2
 8015998:	eb19 0005 	adds.w	r0, r9, r5
 801599c:	eb4a 0106 	adc.w	r1, sl, r6
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	685b      	ldr	r3, [r3, #4]
 80159a4:	461d      	mov	r5, r3
 80159a6:	f04f 0600 	mov.w	r6, #0
 80159aa:	196b      	adds	r3, r5, r5
 80159ac:	eb46 0406 	adc.w	r4, r6, r6
 80159b0:	461a      	mov	r2, r3
 80159b2:	4623      	mov	r3, r4
 80159b4:	f7f3 f8a0 	bl	8008af8 <__aeabi_uldivmod>
 80159b8:	4603      	mov	r3, r0
 80159ba:	460c      	mov	r4, r1
 80159bc:	461a      	mov	r2, r3
 80159be:	4b8b      	ldr	r3, [pc, #556]	; (8015bec <UART_SetConfig+0x384>)
 80159c0:	fba3 1302 	umull	r1, r3, r3, r2
 80159c4:	095b      	lsrs	r3, r3, #5
 80159c6:	2164      	movs	r1, #100	; 0x64
 80159c8:	fb01 f303 	mul.w	r3, r1, r3
 80159cc:	1ad3      	subs	r3, r2, r3
 80159ce:	00db      	lsls	r3, r3, #3
 80159d0:	3332      	adds	r3, #50	; 0x32
 80159d2:	4a86      	ldr	r2, [pc, #536]	; (8015bec <UART_SetConfig+0x384>)
 80159d4:	fba2 2303 	umull	r2, r3, r2, r3
 80159d8:	095b      	lsrs	r3, r3, #5
 80159da:	005b      	lsls	r3, r3, #1
 80159dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80159e0:	4498      	add	r8, r3
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	461d      	mov	r5, r3
 80159e6:	f04f 0600 	mov.w	r6, #0
 80159ea:	46a9      	mov	r9, r5
 80159ec:	46b2      	mov	sl, r6
 80159ee:	eb19 0309 	adds.w	r3, r9, r9
 80159f2:	eb4a 040a 	adc.w	r4, sl, sl
 80159f6:	4699      	mov	r9, r3
 80159f8:	46a2      	mov	sl, r4
 80159fa:	eb19 0905 	adds.w	r9, r9, r5
 80159fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8015a02:	f04f 0100 	mov.w	r1, #0
 8015a06:	f04f 0200 	mov.w	r2, #0
 8015a0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015a0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015a12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015a16:	4689      	mov	r9, r1
 8015a18:	4692      	mov	sl, r2
 8015a1a:	eb19 0005 	adds.w	r0, r9, r5
 8015a1e:	eb4a 0106 	adc.w	r1, sl, r6
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	685b      	ldr	r3, [r3, #4]
 8015a26:	461d      	mov	r5, r3
 8015a28:	f04f 0600 	mov.w	r6, #0
 8015a2c:	196b      	adds	r3, r5, r5
 8015a2e:	eb46 0406 	adc.w	r4, r6, r6
 8015a32:	461a      	mov	r2, r3
 8015a34:	4623      	mov	r3, r4
 8015a36:	f7f3 f85f 	bl	8008af8 <__aeabi_uldivmod>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	460c      	mov	r4, r1
 8015a3e:	461a      	mov	r2, r3
 8015a40:	4b6a      	ldr	r3, [pc, #424]	; (8015bec <UART_SetConfig+0x384>)
 8015a42:	fba3 1302 	umull	r1, r3, r3, r2
 8015a46:	095b      	lsrs	r3, r3, #5
 8015a48:	2164      	movs	r1, #100	; 0x64
 8015a4a:	fb01 f303 	mul.w	r3, r1, r3
 8015a4e:	1ad3      	subs	r3, r2, r3
 8015a50:	00db      	lsls	r3, r3, #3
 8015a52:	3332      	adds	r3, #50	; 0x32
 8015a54:	4a65      	ldr	r2, [pc, #404]	; (8015bec <UART_SetConfig+0x384>)
 8015a56:	fba2 2303 	umull	r2, r3, r2, r3
 8015a5a:	095b      	lsrs	r3, r3, #5
 8015a5c:	f003 0207 	and.w	r2, r3, #7
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	4442      	add	r2, r8
 8015a66:	609a      	str	r2, [r3, #8]
 8015a68:	e26f      	b.n	8015f4a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015a6a:	f7fd fc11 	bl	8013290 <HAL_RCC_GetPCLK1Freq>
 8015a6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	461d      	mov	r5, r3
 8015a74:	f04f 0600 	mov.w	r6, #0
 8015a78:	46a8      	mov	r8, r5
 8015a7a:	46b1      	mov	r9, r6
 8015a7c:	eb18 0308 	adds.w	r3, r8, r8
 8015a80:	eb49 0409 	adc.w	r4, r9, r9
 8015a84:	4698      	mov	r8, r3
 8015a86:	46a1      	mov	r9, r4
 8015a88:	eb18 0805 	adds.w	r8, r8, r5
 8015a8c:	eb49 0906 	adc.w	r9, r9, r6
 8015a90:	f04f 0100 	mov.w	r1, #0
 8015a94:	f04f 0200 	mov.w	r2, #0
 8015a98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015a9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015aa0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015aa4:	4688      	mov	r8, r1
 8015aa6:	4691      	mov	r9, r2
 8015aa8:	eb18 0005 	adds.w	r0, r8, r5
 8015aac:	eb49 0106 	adc.w	r1, r9, r6
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	685b      	ldr	r3, [r3, #4]
 8015ab4:	461d      	mov	r5, r3
 8015ab6:	f04f 0600 	mov.w	r6, #0
 8015aba:	196b      	adds	r3, r5, r5
 8015abc:	eb46 0406 	adc.w	r4, r6, r6
 8015ac0:	461a      	mov	r2, r3
 8015ac2:	4623      	mov	r3, r4
 8015ac4:	f7f3 f818 	bl	8008af8 <__aeabi_uldivmod>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	460c      	mov	r4, r1
 8015acc:	461a      	mov	r2, r3
 8015ace:	4b47      	ldr	r3, [pc, #284]	; (8015bec <UART_SetConfig+0x384>)
 8015ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8015ad4:	095b      	lsrs	r3, r3, #5
 8015ad6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015ada:	68bb      	ldr	r3, [r7, #8]
 8015adc:	461d      	mov	r5, r3
 8015ade:	f04f 0600 	mov.w	r6, #0
 8015ae2:	46a9      	mov	r9, r5
 8015ae4:	46b2      	mov	sl, r6
 8015ae6:	eb19 0309 	adds.w	r3, r9, r9
 8015aea:	eb4a 040a 	adc.w	r4, sl, sl
 8015aee:	4699      	mov	r9, r3
 8015af0:	46a2      	mov	sl, r4
 8015af2:	eb19 0905 	adds.w	r9, r9, r5
 8015af6:	eb4a 0a06 	adc.w	sl, sl, r6
 8015afa:	f04f 0100 	mov.w	r1, #0
 8015afe:	f04f 0200 	mov.w	r2, #0
 8015b02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015b06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015b0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015b0e:	4689      	mov	r9, r1
 8015b10:	4692      	mov	sl, r2
 8015b12:	eb19 0005 	adds.w	r0, r9, r5
 8015b16:	eb4a 0106 	adc.w	r1, sl, r6
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	461d      	mov	r5, r3
 8015b20:	f04f 0600 	mov.w	r6, #0
 8015b24:	196b      	adds	r3, r5, r5
 8015b26:	eb46 0406 	adc.w	r4, r6, r6
 8015b2a:	461a      	mov	r2, r3
 8015b2c:	4623      	mov	r3, r4
 8015b2e:	f7f2 ffe3 	bl	8008af8 <__aeabi_uldivmod>
 8015b32:	4603      	mov	r3, r0
 8015b34:	460c      	mov	r4, r1
 8015b36:	461a      	mov	r2, r3
 8015b38:	4b2c      	ldr	r3, [pc, #176]	; (8015bec <UART_SetConfig+0x384>)
 8015b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8015b3e:	095b      	lsrs	r3, r3, #5
 8015b40:	2164      	movs	r1, #100	; 0x64
 8015b42:	fb01 f303 	mul.w	r3, r1, r3
 8015b46:	1ad3      	subs	r3, r2, r3
 8015b48:	00db      	lsls	r3, r3, #3
 8015b4a:	3332      	adds	r3, #50	; 0x32
 8015b4c:	4a27      	ldr	r2, [pc, #156]	; (8015bec <UART_SetConfig+0x384>)
 8015b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8015b52:	095b      	lsrs	r3, r3, #5
 8015b54:	005b      	lsls	r3, r3, #1
 8015b56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015b5a:	4498      	add	r8, r3
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	461d      	mov	r5, r3
 8015b60:	f04f 0600 	mov.w	r6, #0
 8015b64:	46a9      	mov	r9, r5
 8015b66:	46b2      	mov	sl, r6
 8015b68:	eb19 0309 	adds.w	r3, r9, r9
 8015b6c:	eb4a 040a 	adc.w	r4, sl, sl
 8015b70:	4699      	mov	r9, r3
 8015b72:	46a2      	mov	sl, r4
 8015b74:	eb19 0905 	adds.w	r9, r9, r5
 8015b78:	eb4a 0a06 	adc.w	sl, sl, r6
 8015b7c:	f04f 0100 	mov.w	r1, #0
 8015b80:	f04f 0200 	mov.w	r2, #0
 8015b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015b88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015b8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015b90:	4689      	mov	r9, r1
 8015b92:	4692      	mov	sl, r2
 8015b94:	eb19 0005 	adds.w	r0, r9, r5
 8015b98:	eb4a 0106 	adc.w	r1, sl, r6
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	685b      	ldr	r3, [r3, #4]
 8015ba0:	461d      	mov	r5, r3
 8015ba2:	f04f 0600 	mov.w	r6, #0
 8015ba6:	196b      	adds	r3, r5, r5
 8015ba8:	eb46 0406 	adc.w	r4, r6, r6
 8015bac:	461a      	mov	r2, r3
 8015bae:	4623      	mov	r3, r4
 8015bb0:	f7f2 ffa2 	bl	8008af8 <__aeabi_uldivmod>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	460c      	mov	r4, r1
 8015bb8:	461a      	mov	r2, r3
 8015bba:	4b0c      	ldr	r3, [pc, #48]	; (8015bec <UART_SetConfig+0x384>)
 8015bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8015bc0:	095b      	lsrs	r3, r3, #5
 8015bc2:	2164      	movs	r1, #100	; 0x64
 8015bc4:	fb01 f303 	mul.w	r3, r1, r3
 8015bc8:	1ad3      	subs	r3, r2, r3
 8015bca:	00db      	lsls	r3, r3, #3
 8015bcc:	3332      	adds	r3, #50	; 0x32
 8015bce:	4a07      	ldr	r2, [pc, #28]	; (8015bec <UART_SetConfig+0x384>)
 8015bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8015bd4:	095b      	lsrs	r3, r3, #5
 8015bd6:	f003 0207 	and.w	r2, r3, #7
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	4442      	add	r2, r8
 8015be0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8015be2:	e1b2      	b.n	8015f4a <UART_SetConfig+0x6e2>
 8015be4:	40011000 	.word	0x40011000
 8015be8:	40011400 	.word	0x40011400
 8015bec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	4ad7      	ldr	r2, [pc, #860]	; (8015f54 <UART_SetConfig+0x6ec>)
 8015bf6:	4293      	cmp	r3, r2
 8015bf8:	d005      	beq.n	8015c06 <UART_SetConfig+0x39e>
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	4ad6      	ldr	r2, [pc, #856]	; (8015f58 <UART_SetConfig+0x6f0>)
 8015c00:	4293      	cmp	r3, r2
 8015c02:	f040 80d1 	bne.w	8015da8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8015c06:	f7fd fb57 	bl	80132b8 <HAL_RCC_GetPCLK2Freq>
 8015c0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	469a      	mov	sl, r3
 8015c10:	f04f 0b00 	mov.w	fp, #0
 8015c14:	46d0      	mov	r8, sl
 8015c16:	46d9      	mov	r9, fp
 8015c18:	eb18 0308 	adds.w	r3, r8, r8
 8015c1c:	eb49 0409 	adc.w	r4, r9, r9
 8015c20:	4698      	mov	r8, r3
 8015c22:	46a1      	mov	r9, r4
 8015c24:	eb18 080a 	adds.w	r8, r8, sl
 8015c28:	eb49 090b 	adc.w	r9, r9, fp
 8015c2c:	f04f 0100 	mov.w	r1, #0
 8015c30:	f04f 0200 	mov.w	r2, #0
 8015c34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015c38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015c3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015c40:	4688      	mov	r8, r1
 8015c42:	4691      	mov	r9, r2
 8015c44:	eb1a 0508 	adds.w	r5, sl, r8
 8015c48:	eb4b 0609 	adc.w	r6, fp, r9
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	685b      	ldr	r3, [r3, #4]
 8015c50:	4619      	mov	r1, r3
 8015c52:	f04f 0200 	mov.w	r2, #0
 8015c56:	f04f 0300 	mov.w	r3, #0
 8015c5a:	f04f 0400 	mov.w	r4, #0
 8015c5e:	0094      	lsls	r4, r2, #2
 8015c60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015c64:	008b      	lsls	r3, r1, #2
 8015c66:	461a      	mov	r2, r3
 8015c68:	4623      	mov	r3, r4
 8015c6a:	4628      	mov	r0, r5
 8015c6c:	4631      	mov	r1, r6
 8015c6e:	f7f2 ff43 	bl	8008af8 <__aeabi_uldivmod>
 8015c72:	4603      	mov	r3, r0
 8015c74:	460c      	mov	r4, r1
 8015c76:	461a      	mov	r2, r3
 8015c78:	4bb8      	ldr	r3, [pc, #736]	; (8015f5c <UART_SetConfig+0x6f4>)
 8015c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8015c7e:	095b      	lsrs	r3, r3, #5
 8015c80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	469b      	mov	fp, r3
 8015c88:	f04f 0c00 	mov.w	ip, #0
 8015c8c:	46d9      	mov	r9, fp
 8015c8e:	46e2      	mov	sl, ip
 8015c90:	eb19 0309 	adds.w	r3, r9, r9
 8015c94:	eb4a 040a 	adc.w	r4, sl, sl
 8015c98:	4699      	mov	r9, r3
 8015c9a:	46a2      	mov	sl, r4
 8015c9c:	eb19 090b 	adds.w	r9, r9, fp
 8015ca0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015ca4:	f04f 0100 	mov.w	r1, #0
 8015ca8:	f04f 0200 	mov.w	r2, #0
 8015cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015cb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015cb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015cb8:	4689      	mov	r9, r1
 8015cba:	4692      	mov	sl, r2
 8015cbc:	eb1b 0509 	adds.w	r5, fp, r9
 8015cc0:	eb4c 060a 	adc.w	r6, ip, sl
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	685b      	ldr	r3, [r3, #4]
 8015cc8:	4619      	mov	r1, r3
 8015cca:	f04f 0200 	mov.w	r2, #0
 8015cce:	f04f 0300 	mov.w	r3, #0
 8015cd2:	f04f 0400 	mov.w	r4, #0
 8015cd6:	0094      	lsls	r4, r2, #2
 8015cd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015cdc:	008b      	lsls	r3, r1, #2
 8015cde:	461a      	mov	r2, r3
 8015ce0:	4623      	mov	r3, r4
 8015ce2:	4628      	mov	r0, r5
 8015ce4:	4631      	mov	r1, r6
 8015ce6:	f7f2 ff07 	bl	8008af8 <__aeabi_uldivmod>
 8015cea:	4603      	mov	r3, r0
 8015cec:	460c      	mov	r4, r1
 8015cee:	461a      	mov	r2, r3
 8015cf0:	4b9a      	ldr	r3, [pc, #616]	; (8015f5c <UART_SetConfig+0x6f4>)
 8015cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8015cf6:	095b      	lsrs	r3, r3, #5
 8015cf8:	2164      	movs	r1, #100	; 0x64
 8015cfa:	fb01 f303 	mul.w	r3, r1, r3
 8015cfe:	1ad3      	subs	r3, r2, r3
 8015d00:	011b      	lsls	r3, r3, #4
 8015d02:	3332      	adds	r3, #50	; 0x32
 8015d04:	4a95      	ldr	r2, [pc, #596]	; (8015f5c <UART_SetConfig+0x6f4>)
 8015d06:	fba2 2303 	umull	r2, r3, r2, r3
 8015d0a:	095b      	lsrs	r3, r3, #5
 8015d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d10:	4498      	add	r8, r3
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	469b      	mov	fp, r3
 8015d16:	f04f 0c00 	mov.w	ip, #0
 8015d1a:	46d9      	mov	r9, fp
 8015d1c:	46e2      	mov	sl, ip
 8015d1e:	eb19 0309 	adds.w	r3, r9, r9
 8015d22:	eb4a 040a 	adc.w	r4, sl, sl
 8015d26:	4699      	mov	r9, r3
 8015d28:	46a2      	mov	sl, r4
 8015d2a:	eb19 090b 	adds.w	r9, r9, fp
 8015d2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015d32:	f04f 0100 	mov.w	r1, #0
 8015d36:	f04f 0200 	mov.w	r2, #0
 8015d3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015d3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015d42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015d46:	4689      	mov	r9, r1
 8015d48:	4692      	mov	sl, r2
 8015d4a:	eb1b 0509 	adds.w	r5, fp, r9
 8015d4e:	eb4c 060a 	adc.w	r6, ip, sl
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	685b      	ldr	r3, [r3, #4]
 8015d56:	4619      	mov	r1, r3
 8015d58:	f04f 0200 	mov.w	r2, #0
 8015d5c:	f04f 0300 	mov.w	r3, #0
 8015d60:	f04f 0400 	mov.w	r4, #0
 8015d64:	0094      	lsls	r4, r2, #2
 8015d66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015d6a:	008b      	lsls	r3, r1, #2
 8015d6c:	461a      	mov	r2, r3
 8015d6e:	4623      	mov	r3, r4
 8015d70:	4628      	mov	r0, r5
 8015d72:	4631      	mov	r1, r6
 8015d74:	f7f2 fec0 	bl	8008af8 <__aeabi_uldivmod>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	460c      	mov	r4, r1
 8015d7c:	461a      	mov	r2, r3
 8015d7e:	4b77      	ldr	r3, [pc, #476]	; (8015f5c <UART_SetConfig+0x6f4>)
 8015d80:	fba3 1302 	umull	r1, r3, r3, r2
 8015d84:	095b      	lsrs	r3, r3, #5
 8015d86:	2164      	movs	r1, #100	; 0x64
 8015d88:	fb01 f303 	mul.w	r3, r1, r3
 8015d8c:	1ad3      	subs	r3, r2, r3
 8015d8e:	011b      	lsls	r3, r3, #4
 8015d90:	3332      	adds	r3, #50	; 0x32
 8015d92:	4a72      	ldr	r2, [pc, #456]	; (8015f5c <UART_SetConfig+0x6f4>)
 8015d94:	fba2 2303 	umull	r2, r3, r2, r3
 8015d98:	095b      	lsrs	r3, r3, #5
 8015d9a:	f003 020f 	and.w	r2, r3, #15
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	4442      	add	r2, r8
 8015da4:	609a      	str	r2, [r3, #8]
 8015da6:	e0d0      	b.n	8015f4a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8015da8:	f7fd fa72 	bl	8013290 <HAL_RCC_GetPCLK1Freq>
 8015dac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015dae:	68bb      	ldr	r3, [r7, #8]
 8015db0:	469a      	mov	sl, r3
 8015db2:	f04f 0b00 	mov.w	fp, #0
 8015db6:	46d0      	mov	r8, sl
 8015db8:	46d9      	mov	r9, fp
 8015dba:	eb18 0308 	adds.w	r3, r8, r8
 8015dbe:	eb49 0409 	adc.w	r4, r9, r9
 8015dc2:	4698      	mov	r8, r3
 8015dc4:	46a1      	mov	r9, r4
 8015dc6:	eb18 080a 	adds.w	r8, r8, sl
 8015dca:	eb49 090b 	adc.w	r9, r9, fp
 8015dce:	f04f 0100 	mov.w	r1, #0
 8015dd2:	f04f 0200 	mov.w	r2, #0
 8015dd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8015dda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8015dde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8015de2:	4688      	mov	r8, r1
 8015de4:	4691      	mov	r9, r2
 8015de6:	eb1a 0508 	adds.w	r5, sl, r8
 8015dea:	eb4b 0609 	adc.w	r6, fp, r9
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	685b      	ldr	r3, [r3, #4]
 8015df2:	4619      	mov	r1, r3
 8015df4:	f04f 0200 	mov.w	r2, #0
 8015df8:	f04f 0300 	mov.w	r3, #0
 8015dfc:	f04f 0400 	mov.w	r4, #0
 8015e00:	0094      	lsls	r4, r2, #2
 8015e02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015e06:	008b      	lsls	r3, r1, #2
 8015e08:	461a      	mov	r2, r3
 8015e0a:	4623      	mov	r3, r4
 8015e0c:	4628      	mov	r0, r5
 8015e0e:	4631      	mov	r1, r6
 8015e10:	f7f2 fe72 	bl	8008af8 <__aeabi_uldivmod>
 8015e14:	4603      	mov	r3, r0
 8015e16:	460c      	mov	r4, r1
 8015e18:	461a      	mov	r2, r3
 8015e1a:	4b50      	ldr	r3, [pc, #320]	; (8015f5c <UART_SetConfig+0x6f4>)
 8015e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8015e20:	095b      	lsrs	r3, r3, #5
 8015e22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	469b      	mov	fp, r3
 8015e2a:	f04f 0c00 	mov.w	ip, #0
 8015e2e:	46d9      	mov	r9, fp
 8015e30:	46e2      	mov	sl, ip
 8015e32:	eb19 0309 	adds.w	r3, r9, r9
 8015e36:	eb4a 040a 	adc.w	r4, sl, sl
 8015e3a:	4699      	mov	r9, r3
 8015e3c:	46a2      	mov	sl, r4
 8015e3e:	eb19 090b 	adds.w	r9, r9, fp
 8015e42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015e46:	f04f 0100 	mov.w	r1, #0
 8015e4a:	f04f 0200 	mov.w	r2, #0
 8015e4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015e52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015e56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015e5a:	4689      	mov	r9, r1
 8015e5c:	4692      	mov	sl, r2
 8015e5e:	eb1b 0509 	adds.w	r5, fp, r9
 8015e62:	eb4c 060a 	adc.w	r6, ip, sl
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	685b      	ldr	r3, [r3, #4]
 8015e6a:	4619      	mov	r1, r3
 8015e6c:	f04f 0200 	mov.w	r2, #0
 8015e70:	f04f 0300 	mov.w	r3, #0
 8015e74:	f04f 0400 	mov.w	r4, #0
 8015e78:	0094      	lsls	r4, r2, #2
 8015e7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015e7e:	008b      	lsls	r3, r1, #2
 8015e80:	461a      	mov	r2, r3
 8015e82:	4623      	mov	r3, r4
 8015e84:	4628      	mov	r0, r5
 8015e86:	4631      	mov	r1, r6
 8015e88:	f7f2 fe36 	bl	8008af8 <__aeabi_uldivmod>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	460c      	mov	r4, r1
 8015e90:	461a      	mov	r2, r3
 8015e92:	4b32      	ldr	r3, [pc, #200]	; (8015f5c <UART_SetConfig+0x6f4>)
 8015e94:	fba3 1302 	umull	r1, r3, r3, r2
 8015e98:	095b      	lsrs	r3, r3, #5
 8015e9a:	2164      	movs	r1, #100	; 0x64
 8015e9c:	fb01 f303 	mul.w	r3, r1, r3
 8015ea0:	1ad3      	subs	r3, r2, r3
 8015ea2:	011b      	lsls	r3, r3, #4
 8015ea4:	3332      	adds	r3, #50	; 0x32
 8015ea6:	4a2d      	ldr	r2, [pc, #180]	; (8015f5c <UART_SetConfig+0x6f4>)
 8015ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8015eac:	095b      	lsrs	r3, r3, #5
 8015eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015eb2:	4498      	add	r8, r3
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	469b      	mov	fp, r3
 8015eb8:	f04f 0c00 	mov.w	ip, #0
 8015ebc:	46d9      	mov	r9, fp
 8015ebe:	46e2      	mov	sl, ip
 8015ec0:	eb19 0309 	adds.w	r3, r9, r9
 8015ec4:	eb4a 040a 	adc.w	r4, sl, sl
 8015ec8:	4699      	mov	r9, r3
 8015eca:	46a2      	mov	sl, r4
 8015ecc:	eb19 090b 	adds.w	r9, r9, fp
 8015ed0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8015ed4:	f04f 0100 	mov.w	r1, #0
 8015ed8:	f04f 0200 	mov.w	r2, #0
 8015edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015ee0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8015ee4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8015ee8:	4689      	mov	r9, r1
 8015eea:	4692      	mov	sl, r2
 8015eec:	eb1b 0509 	adds.w	r5, fp, r9
 8015ef0:	eb4c 060a 	adc.w	r6, ip, sl
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	685b      	ldr	r3, [r3, #4]
 8015ef8:	4619      	mov	r1, r3
 8015efa:	f04f 0200 	mov.w	r2, #0
 8015efe:	f04f 0300 	mov.w	r3, #0
 8015f02:	f04f 0400 	mov.w	r4, #0
 8015f06:	0094      	lsls	r4, r2, #2
 8015f08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8015f0c:	008b      	lsls	r3, r1, #2
 8015f0e:	461a      	mov	r2, r3
 8015f10:	4623      	mov	r3, r4
 8015f12:	4628      	mov	r0, r5
 8015f14:	4631      	mov	r1, r6
 8015f16:	f7f2 fdef 	bl	8008af8 <__aeabi_uldivmod>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	460c      	mov	r4, r1
 8015f1e:	461a      	mov	r2, r3
 8015f20:	4b0e      	ldr	r3, [pc, #56]	; (8015f5c <UART_SetConfig+0x6f4>)
 8015f22:	fba3 1302 	umull	r1, r3, r3, r2
 8015f26:	095b      	lsrs	r3, r3, #5
 8015f28:	2164      	movs	r1, #100	; 0x64
 8015f2a:	fb01 f303 	mul.w	r3, r1, r3
 8015f2e:	1ad3      	subs	r3, r2, r3
 8015f30:	011b      	lsls	r3, r3, #4
 8015f32:	3332      	adds	r3, #50	; 0x32
 8015f34:	4a09      	ldr	r2, [pc, #36]	; (8015f5c <UART_SetConfig+0x6f4>)
 8015f36:	fba2 2303 	umull	r2, r3, r2, r3
 8015f3a:	095b      	lsrs	r3, r3, #5
 8015f3c:	f003 020f 	and.w	r2, r3, #15
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	4442      	add	r2, r8
 8015f46:	609a      	str	r2, [r3, #8]
}
 8015f48:	e7ff      	b.n	8015f4a <UART_SetConfig+0x6e2>
 8015f4a:	bf00      	nop
 8015f4c:	3714      	adds	r7, #20
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f54:	40011000 	.word	0x40011000
 8015f58:	40011400 	.word	0x40011400
 8015f5c:	51eb851f 	.word	0x51eb851f

08015f60 <round>:
 8015f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f62:	ec57 6b10 	vmov	r6, r7, d0
 8015f66:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8015f6a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8015f6e:	2c13      	cmp	r4, #19
 8015f70:	463b      	mov	r3, r7
 8015f72:	463d      	mov	r5, r7
 8015f74:	dc17      	bgt.n	8015fa6 <round+0x46>
 8015f76:	2c00      	cmp	r4, #0
 8015f78:	da09      	bge.n	8015f8e <round+0x2e>
 8015f7a:	3401      	adds	r4, #1
 8015f7c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8015f80:	d103      	bne.n	8015f8a <round+0x2a>
 8015f82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015f86:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015f8a:	2100      	movs	r1, #0
 8015f8c:	e02c      	b.n	8015fe8 <round+0x88>
 8015f8e:	4a18      	ldr	r2, [pc, #96]	; (8015ff0 <round+0x90>)
 8015f90:	4122      	asrs	r2, r4
 8015f92:	4217      	tst	r7, r2
 8015f94:	d100      	bne.n	8015f98 <round+0x38>
 8015f96:	b19e      	cbz	r6, 8015fc0 <round+0x60>
 8015f98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015f9c:	4123      	asrs	r3, r4
 8015f9e:	442b      	add	r3, r5
 8015fa0:	ea23 0302 	bic.w	r3, r3, r2
 8015fa4:	e7f1      	b.n	8015f8a <round+0x2a>
 8015fa6:	2c33      	cmp	r4, #51	; 0x33
 8015fa8:	dd0d      	ble.n	8015fc6 <round+0x66>
 8015faa:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015fae:	d107      	bne.n	8015fc0 <round+0x60>
 8015fb0:	4630      	mov	r0, r6
 8015fb2:	4639      	mov	r1, r7
 8015fb4:	ee10 2a10 	vmov	r2, s0
 8015fb8:	f7f2 f8a0 	bl	80080fc <__adddf3>
 8015fbc:	4606      	mov	r6, r0
 8015fbe:	460f      	mov	r7, r1
 8015fc0:	ec47 6b10 	vmov	d0, r6, r7
 8015fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fc6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8015fca:	f04f 30ff 	mov.w	r0, #4294967295
 8015fce:	40d0      	lsrs	r0, r2
 8015fd0:	4206      	tst	r6, r0
 8015fd2:	d0f5      	beq.n	8015fc0 <round+0x60>
 8015fd4:	2201      	movs	r2, #1
 8015fd6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8015fda:	fa02 f404 	lsl.w	r4, r2, r4
 8015fde:	1931      	adds	r1, r6, r4
 8015fe0:	bf28      	it	cs
 8015fe2:	189b      	addcs	r3, r3, r2
 8015fe4:	ea21 0100 	bic.w	r1, r1, r0
 8015fe8:	461f      	mov	r7, r3
 8015fea:	460e      	mov	r6, r1
 8015fec:	e7e8      	b.n	8015fc0 <round+0x60>
 8015fee:	bf00      	nop
 8015ff0:	000fffff 	.word	0x000fffff

08015ff4 <__errno>:
 8015ff4:	4b01      	ldr	r3, [pc, #4]	; (8015ffc <__errno+0x8>)
 8015ff6:	6818      	ldr	r0, [r3, #0]
 8015ff8:	4770      	bx	lr
 8015ffa:	bf00      	nop
 8015ffc:	2000002c 	.word	0x2000002c

08016000 <__libc_init_array>:
 8016000:	b570      	push	{r4, r5, r6, lr}
 8016002:	4e0d      	ldr	r6, [pc, #52]	; (8016038 <__libc_init_array+0x38>)
 8016004:	4c0d      	ldr	r4, [pc, #52]	; (801603c <__libc_init_array+0x3c>)
 8016006:	1ba4      	subs	r4, r4, r6
 8016008:	10a4      	asrs	r4, r4, #2
 801600a:	2500      	movs	r5, #0
 801600c:	42a5      	cmp	r5, r4
 801600e:	d109      	bne.n	8016024 <__libc_init_array+0x24>
 8016010:	4e0b      	ldr	r6, [pc, #44]	; (8016040 <__libc_init_array+0x40>)
 8016012:	4c0c      	ldr	r4, [pc, #48]	; (8016044 <__libc_init_array+0x44>)
 8016014:	f005 f83c 	bl	801b090 <_init>
 8016018:	1ba4      	subs	r4, r4, r6
 801601a:	10a4      	asrs	r4, r4, #2
 801601c:	2500      	movs	r5, #0
 801601e:	42a5      	cmp	r5, r4
 8016020:	d105      	bne.n	801602e <__libc_init_array+0x2e>
 8016022:	bd70      	pop	{r4, r5, r6, pc}
 8016024:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016028:	4798      	blx	r3
 801602a:	3501      	adds	r5, #1
 801602c:	e7ee      	b.n	801600c <__libc_init_array+0xc>
 801602e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016032:	4798      	blx	r3
 8016034:	3501      	adds	r5, #1
 8016036:	e7f2      	b.n	801601e <__libc_init_array+0x1e>
 8016038:	0801b68c 	.word	0x0801b68c
 801603c:	0801b68c 	.word	0x0801b68c
 8016040:	0801b68c 	.word	0x0801b68c
 8016044:	0801b690 	.word	0x0801b690

08016048 <memcpy>:
 8016048:	b510      	push	{r4, lr}
 801604a:	1e43      	subs	r3, r0, #1
 801604c:	440a      	add	r2, r1
 801604e:	4291      	cmp	r1, r2
 8016050:	d100      	bne.n	8016054 <memcpy+0xc>
 8016052:	bd10      	pop	{r4, pc}
 8016054:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016058:	f803 4f01 	strb.w	r4, [r3, #1]!
 801605c:	e7f7      	b.n	801604e <memcpy+0x6>

0801605e <memset>:
 801605e:	4402      	add	r2, r0
 8016060:	4603      	mov	r3, r0
 8016062:	4293      	cmp	r3, r2
 8016064:	d100      	bne.n	8016068 <memset+0xa>
 8016066:	4770      	bx	lr
 8016068:	f803 1b01 	strb.w	r1, [r3], #1
 801606c:	e7f9      	b.n	8016062 <memset+0x4>

0801606e <__cvt>:
 801606e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016072:	ec55 4b10 	vmov	r4, r5, d0
 8016076:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016078:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801607c:	2d00      	cmp	r5, #0
 801607e:	460e      	mov	r6, r1
 8016080:	4691      	mov	r9, r2
 8016082:	4619      	mov	r1, r3
 8016084:	bfb8      	it	lt
 8016086:	4622      	movlt	r2, r4
 8016088:	462b      	mov	r3, r5
 801608a:	f027 0720 	bic.w	r7, r7, #32
 801608e:	bfbb      	ittet	lt
 8016090:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016094:	461d      	movlt	r5, r3
 8016096:	2300      	movge	r3, #0
 8016098:	232d      	movlt	r3, #45	; 0x2d
 801609a:	bfb8      	it	lt
 801609c:	4614      	movlt	r4, r2
 801609e:	2f46      	cmp	r7, #70	; 0x46
 80160a0:	700b      	strb	r3, [r1, #0]
 80160a2:	d004      	beq.n	80160ae <__cvt+0x40>
 80160a4:	2f45      	cmp	r7, #69	; 0x45
 80160a6:	d100      	bne.n	80160aa <__cvt+0x3c>
 80160a8:	3601      	adds	r6, #1
 80160aa:	2102      	movs	r1, #2
 80160ac:	e000      	b.n	80160b0 <__cvt+0x42>
 80160ae:	2103      	movs	r1, #3
 80160b0:	ab03      	add	r3, sp, #12
 80160b2:	9301      	str	r3, [sp, #4]
 80160b4:	ab02      	add	r3, sp, #8
 80160b6:	9300      	str	r3, [sp, #0]
 80160b8:	4632      	mov	r2, r6
 80160ba:	4653      	mov	r3, sl
 80160bc:	ec45 4b10 	vmov	d0, r4, r5
 80160c0:	f001 ff82 	bl	8017fc8 <_dtoa_r>
 80160c4:	2f47      	cmp	r7, #71	; 0x47
 80160c6:	4680      	mov	r8, r0
 80160c8:	d102      	bne.n	80160d0 <__cvt+0x62>
 80160ca:	f019 0f01 	tst.w	r9, #1
 80160ce:	d026      	beq.n	801611e <__cvt+0xb0>
 80160d0:	2f46      	cmp	r7, #70	; 0x46
 80160d2:	eb08 0906 	add.w	r9, r8, r6
 80160d6:	d111      	bne.n	80160fc <__cvt+0x8e>
 80160d8:	f898 3000 	ldrb.w	r3, [r8]
 80160dc:	2b30      	cmp	r3, #48	; 0x30
 80160de:	d10a      	bne.n	80160f6 <__cvt+0x88>
 80160e0:	2200      	movs	r2, #0
 80160e2:	2300      	movs	r3, #0
 80160e4:	4620      	mov	r0, r4
 80160e6:	4629      	mov	r1, r5
 80160e8:	f7f2 fc26 	bl	8008938 <__aeabi_dcmpeq>
 80160ec:	b918      	cbnz	r0, 80160f6 <__cvt+0x88>
 80160ee:	f1c6 0601 	rsb	r6, r6, #1
 80160f2:	f8ca 6000 	str.w	r6, [sl]
 80160f6:	f8da 3000 	ldr.w	r3, [sl]
 80160fa:	4499      	add	r9, r3
 80160fc:	2200      	movs	r2, #0
 80160fe:	2300      	movs	r3, #0
 8016100:	4620      	mov	r0, r4
 8016102:	4629      	mov	r1, r5
 8016104:	f7f2 fc18 	bl	8008938 <__aeabi_dcmpeq>
 8016108:	b938      	cbnz	r0, 801611a <__cvt+0xac>
 801610a:	2230      	movs	r2, #48	; 0x30
 801610c:	9b03      	ldr	r3, [sp, #12]
 801610e:	454b      	cmp	r3, r9
 8016110:	d205      	bcs.n	801611e <__cvt+0xb0>
 8016112:	1c59      	adds	r1, r3, #1
 8016114:	9103      	str	r1, [sp, #12]
 8016116:	701a      	strb	r2, [r3, #0]
 8016118:	e7f8      	b.n	801610c <__cvt+0x9e>
 801611a:	f8cd 900c 	str.w	r9, [sp, #12]
 801611e:	9b03      	ldr	r3, [sp, #12]
 8016120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016122:	eba3 0308 	sub.w	r3, r3, r8
 8016126:	4640      	mov	r0, r8
 8016128:	6013      	str	r3, [r2, #0]
 801612a:	b004      	add	sp, #16
 801612c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016130 <__exponent>:
 8016130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016132:	2900      	cmp	r1, #0
 8016134:	4604      	mov	r4, r0
 8016136:	bfba      	itte	lt
 8016138:	4249      	neglt	r1, r1
 801613a:	232d      	movlt	r3, #45	; 0x2d
 801613c:	232b      	movge	r3, #43	; 0x2b
 801613e:	2909      	cmp	r1, #9
 8016140:	f804 2b02 	strb.w	r2, [r4], #2
 8016144:	7043      	strb	r3, [r0, #1]
 8016146:	dd20      	ble.n	801618a <__exponent+0x5a>
 8016148:	f10d 0307 	add.w	r3, sp, #7
 801614c:	461f      	mov	r7, r3
 801614e:	260a      	movs	r6, #10
 8016150:	fb91 f5f6 	sdiv	r5, r1, r6
 8016154:	fb06 1115 	mls	r1, r6, r5, r1
 8016158:	3130      	adds	r1, #48	; 0x30
 801615a:	2d09      	cmp	r5, #9
 801615c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016160:	f103 32ff 	add.w	r2, r3, #4294967295
 8016164:	4629      	mov	r1, r5
 8016166:	dc09      	bgt.n	801617c <__exponent+0x4c>
 8016168:	3130      	adds	r1, #48	; 0x30
 801616a:	3b02      	subs	r3, #2
 801616c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016170:	42bb      	cmp	r3, r7
 8016172:	4622      	mov	r2, r4
 8016174:	d304      	bcc.n	8016180 <__exponent+0x50>
 8016176:	1a10      	subs	r0, r2, r0
 8016178:	b003      	add	sp, #12
 801617a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801617c:	4613      	mov	r3, r2
 801617e:	e7e7      	b.n	8016150 <__exponent+0x20>
 8016180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016184:	f804 2b01 	strb.w	r2, [r4], #1
 8016188:	e7f2      	b.n	8016170 <__exponent+0x40>
 801618a:	2330      	movs	r3, #48	; 0x30
 801618c:	4419      	add	r1, r3
 801618e:	7083      	strb	r3, [r0, #2]
 8016190:	1d02      	adds	r2, r0, #4
 8016192:	70c1      	strb	r1, [r0, #3]
 8016194:	e7ef      	b.n	8016176 <__exponent+0x46>
	...

08016198 <_printf_float>:
 8016198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801619c:	b08d      	sub	sp, #52	; 0x34
 801619e:	460c      	mov	r4, r1
 80161a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80161a4:	4616      	mov	r6, r2
 80161a6:	461f      	mov	r7, r3
 80161a8:	4605      	mov	r5, r0
 80161aa:	f003 f9a7 	bl	80194fc <_localeconv_r>
 80161ae:	6803      	ldr	r3, [r0, #0]
 80161b0:	9304      	str	r3, [sp, #16]
 80161b2:	4618      	mov	r0, r3
 80161b4:	f7f1 ff44 	bl	8008040 <strlen>
 80161b8:	2300      	movs	r3, #0
 80161ba:	930a      	str	r3, [sp, #40]	; 0x28
 80161bc:	f8d8 3000 	ldr.w	r3, [r8]
 80161c0:	9005      	str	r0, [sp, #20]
 80161c2:	3307      	adds	r3, #7
 80161c4:	f023 0307 	bic.w	r3, r3, #7
 80161c8:	f103 0208 	add.w	r2, r3, #8
 80161cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80161d0:	f8d4 b000 	ldr.w	fp, [r4]
 80161d4:	f8c8 2000 	str.w	r2, [r8]
 80161d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80161e0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80161e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80161e8:	9307      	str	r3, [sp, #28]
 80161ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80161ee:	f04f 32ff 	mov.w	r2, #4294967295
 80161f2:	4ba7      	ldr	r3, [pc, #668]	; (8016490 <_printf_float+0x2f8>)
 80161f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80161f8:	f7f2 fbd0 	bl	800899c <__aeabi_dcmpun>
 80161fc:	bb70      	cbnz	r0, 801625c <_printf_float+0xc4>
 80161fe:	f04f 32ff 	mov.w	r2, #4294967295
 8016202:	4ba3      	ldr	r3, [pc, #652]	; (8016490 <_printf_float+0x2f8>)
 8016204:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016208:	f7f2 fbaa 	bl	8008960 <__aeabi_dcmple>
 801620c:	bb30      	cbnz	r0, 801625c <_printf_float+0xc4>
 801620e:	2200      	movs	r2, #0
 8016210:	2300      	movs	r3, #0
 8016212:	4640      	mov	r0, r8
 8016214:	4649      	mov	r1, r9
 8016216:	f7f2 fb99 	bl	800894c <__aeabi_dcmplt>
 801621a:	b110      	cbz	r0, 8016222 <_printf_float+0x8a>
 801621c:	232d      	movs	r3, #45	; 0x2d
 801621e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016222:	4a9c      	ldr	r2, [pc, #624]	; (8016494 <_printf_float+0x2fc>)
 8016224:	4b9c      	ldr	r3, [pc, #624]	; (8016498 <_printf_float+0x300>)
 8016226:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801622a:	bf8c      	ite	hi
 801622c:	4690      	movhi	r8, r2
 801622e:	4698      	movls	r8, r3
 8016230:	2303      	movs	r3, #3
 8016232:	f02b 0204 	bic.w	r2, fp, #4
 8016236:	6123      	str	r3, [r4, #16]
 8016238:	6022      	str	r2, [r4, #0]
 801623a:	f04f 0900 	mov.w	r9, #0
 801623e:	9700      	str	r7, [sp, #0]
 8016240:	4633      	mov	r3, r6
 8016242:	aa0b      	add	r2, sp, #44	; 0x2c
 8016244:	4621      	mov	r1, r4
 8016246:	4628      	mov	r0, r5
 8016248:	f000 f9e6 	bl	8016618 <_printf_common>
 801624c:	3001      	adds	r0, #1
 801624e:	f040 808d 	bne.w	801636c <_printf_float+0x1d4>
 8016252:	f04f 30ff 	mov.w	r0, #4294967295
 8016256:	b00d      	add	sp, #52	; 0x34
 8016258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801625c:	4642      	mov	r2, r8
 801625e:	464b      	mov	r3, r9
 8016260:	4640      	mov	r0, r8
 8016262:	4649      	mov	r1, r9
 8016264:	f7f2 fb9a 	bl	800899c <__aeabi_dcmpun>
 8016268:	b110      	cbz	r0, 8016270 <_printf_float+0xd8>
 801626a:	4a8c      	ldr	r2, [pc, #560]	; (801649c <_printf_float+0x304>)
 801626c:	4b8c      	ldr	r3, [pc, #560]	; (80164a0 <_printf_float+0x308>)
 801626e:	e7da      	b.n	8016226 <_printf_float+0x8e>
 8016270:	6861      	ldr	r1, [r4, #4]
 8016272:	1c4b      	adds	r3, r1, #1
 8016274:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8016278:	a80a      	add	r0, sp, #40	; 0x28
 801627a:	d13e      	bne.n	80162fa <_printf_float+0x162>
 801627c:	2306      	movs	r3, #6
 801627e:	6063      	str	r3, [r4, #4]
 8016280:	2300      	movs	r3, #0
 8016282:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016286:	ab09      	add	r3, sp, #36	; 0x24
 8016288:	9300      	str	r3, [sp, #0]
 801628a:	ec49 8b10 	vmov	d0, r8, r9
 801628e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016292:	6022      	str	r2, [r4, #0]
 8016294:	f8cd a004 	str.w	sl, [sp, #4]
 8016298:	6861      	ldr	r1, [r4, #4]
 801629a:	4628      	mov	r0, r5
 801629c:	f7ff fee7 	bl	801606e <__cvt>
 80162a0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80162a4:	2b47      	cmp	r3, #71	; 0x47
 80162a6:	4680      	mov	r8, r0
 80162a8:	d109      	bne.n	80162be <_printf_float+0x126>
 80162aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162ac:	1cd8      	adds	r0, r3, #3
 80162ae:	db02      	blt.n	80162b6 <_printf_float+0x11e>
 80162b0:	6862      	ldr	r2, [r4, #4]
 80162b2:	4293      	cmp	r3, r2
 80162b4:	dd47      	ble.n	8016346 <_printf_float+0x1ae>
 80162b6:	f1aa 0a02 	sub.w	sl, sl, #2
 80162ba:	fa5f fa8a 	uxtb.w	sl, sl
 80162be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80162c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162c4:	d824      	bhi.n	8016310 <_printf_float+0x178>
 80162c6:	3901      	subs	r1, #1
 80162c8:	4652      	mov	r2, sl
 80162ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80162ce:	9109      	str	r1, [sp, #36]	; 0x24
 80162d0:	f7ff ff2e 	bl	8016130 <__exponent>
 80162d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162d6:	1813      	adds	r3, r2, r0
 80162d8:	2a01      	cmp	r2, #1
 80162da:	4681      	mov	r9, r0
 80162dc:	6123      	str	r3, [r4, #16]
 80162de:	dc02      	bgt.n	80162e6 <_printf_float+0x14e>
 80162e0:	6822      	ldr	r2, [r4, #0]
 80162e2:	07d1      	lsls	r1, r2, #31
 80162e4:	d501      	bpl.n	80162ea <_printf_float+0x152>
 80162e6:	3301      	adds	r3, #1
 80162e8:	6123      	str	r3, [r4, #16]
 80162ea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d0a5      	beq.n	801623e <_printf_float+0xa6>
 80162f2:	232d      	movs	r3, #45	; 0x2d
 80162f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162f8:	e7a1      	b.n	801623e <_printf_float+0xa6>
 80162fa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80162fe:	f000 8177 	beq.w	80165f0 <_printf_float+0x458>
 8016302:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8016306:	d1bb      	bne.n	8016280 <_printf_float+0xe8>
 8016308:	2900      	cmp	r1, #0
 801630a:	d1b9      	bne.n	8016280 <_printf_float+0xe8>
 801630c:	2301      	movs	r3, #1
 801630e:	e7b6      	b.n	801627e <_printf_float+0xe6>
 8016310:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8016314:	d119      	bne.n	801634a <_printf_float+0x1b2>
 8016316:	2900      	cmp	r1, #0
 8016318:	6863      	ldr	r3, [r4, #4]
 801631a:	dd0c      	ble.n	8016336 <_printf_float+0x19e>
 801631c:	6121      	str	r1, [r4, #16]
 801631e:	b913      	cbnz	r3, 8016326 <_printf_float+0x18e>
 8016320:	6822      	ldr	r2, [r4, #0]
 8016322:	07d2      	lsls	r2, r2, #31
 8016324:	d502      	bpl.n	801632c <_printf_float+0x194>
 8016326:	3301      	adds	r3, #1
 8016328:	440b      	add	r3, r1
 801632a:	6123      	str	r3, [r4, #16]
 801632c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801632e:	65a3      	str	r3, [r4, #88]	; 0x58
 8016330:	f04f 0900 	mov.w	r9, #0
 8016334:	e7d9      	b.n	80162ea <_printf_float+0x152>
 8016336:	b913      	cbnz	r3, 801633e <_printf_float+0x1a6>
 8016338:	6822      	ldr	r2, [r4, #0]
 801633a:	07d0      	lsls	r0, r2, #31
 801633c:	d501      	bpl.n	8016342 <_printf_float+0x1aa>
 801633e:	3302      	adds	r3, #2
 8016340:	e7f3      	b.n	801632a <_printf_float+0x192>
 8016342:	2301      	movs	r3, #1
 8016344:	e7f1      	b.n	801632a <_printf_float+0x192>
 8016346:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801634a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801634e:	4293      	cmp	r3, r2
 8016350:	db05      	blt.n	801635e <_printf_float+0x1c6>
 8016352:	6822      	ldr	r2, [r4, #0]
 8016354:	6123      	str	r3, [r4, #16]
 8016356:	07d1      	lsls	r1, r2, #31
 8016358:	d5e8      	bpl.n	801632c <_printf_float+0x194>
 801635a:	3301      	adds	r3, #1
 801635c:	e7e5      	b.n	801632a <_printf_float+0x192>
 801635e:	2b00      	cmp	r3, #0
 8016360:	bfd4      	ite	le
 8016362:	f1c3 0302 	rsble	r3, r3, #2
 8016366:	2301      	movgt	r3, #1
 8016368:	4413      	add	r3, r2
 801636a:	e7de      	b.n	801632a <_printf_float+0x192>
 801636c:	6823      	ldr	r3, [r4, #0]
 801636e:	055a      	lsls	r2, r3, #21
 8016370:	d407      	bmi.n	8016382 <_printf_float+0x1ea>
 8016372:	6923      	ldr	r3, [r4, #16]
 8016374:	4642      	mov	r2, r8
 8016376:	4631      	mov	r1, r6
 8016378:	4628      	mov	r0, r5
 801637a:	47b8      	blx	r7
 801637c:	3001      	adds	r0, #1
 801637e:	d12b      	bne.n	80163d8 <_printf_float+0x240>
 8016380:	e767      	b.n	8016252 <_printf_float+0xba>
 8016382:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016386:	f240 80dc 	bls.w	8016542 <_printf_float+0x3aa>
 801638a:	2200      	movs	r2, #0
 801638c:	2300      	movs	r3, #0
 801638e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016392:	f7f2 fad1 	bl	8008938 <__aeabi_dcmpeq>
 8016396:	2800      	cmp	r0, #0
 8016398:	d033      	beq.n	8016402 <_printf_float+0x26a>
 801639a:	2301      	movs	r3, #1
 801639c:	4a41      	ldr	r2, [pc, #260]	; (80164a4 <_printf_float+0x30c>)
 801639e:	4631      	mov	r1, r6
 80163a0:	4628      	mov	r0, r5
 80163a2:	47b8      	blx	r7
 80163a4:	3001      	adds	r0, #1
 80163a6:	f43f af54 	beq.w	8016252 <_printf_float+0xba>
 80163aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163ae:	429a      	cmp	r2, r3
 80163b0:	db02      	blt.n	80163b8 <_printf_float+0x220>
 80163b2:	6823      	ldr	r3, [r4, #0]
 80163b4:	07d8      	lsls	r0, r3, #31
 80163b6:	d50f      	bpl.n	80163d8 <_printf_float+0x240>
 80163b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163bc:	4631      	mov	r1, r6
 80163be:	4628      	mov	r0, r5
 80163c0:	47b8      	blx	r7
 80163c2:	3001      	adds	r0, #1
 80163c4:	f43f af45 	beq.w	8016252 <_printf_float+0xba>
 80163c8:	f04f 0800 	mov.w	r8, #0
 80163cc:	f104 091a 	add.w	r9, r4, #26
 80163d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163d2:	3b01      	subs	r3, #1
 80163d4:	4543      	cmp	r3, r8
 80163d6:	dc09      	bgt.n	80163ec <_printf_float+0x254>
 80163d8:	6823      	ldr	r3, [r4, #0]
 80163da:	079b      	lsls	r3, r3, #30
 80163dc:	f100 8103 	bmi.w	80165e6 <_printf_float+0x44e>
 80163e0:	68e0      	ldr	r0, [r4, #12]
 80163e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163e4:	4298      	cmp	r0, r3
 80163e6:	bfb8      	it	lt
 80163e8:	4618      	movlt	r0, r3
 80163ea:	e734      	b.n	8016256 <_printf_float+0xbe>
 80163ec:	2301      	movs	r3, #1
 80163ee:	464a      	mov	r2, r9
 80163f0:	4631      	mov	r1, r6
 80163f2:	4628      	mov	r0, r5
 80163f4:	47b8      	blx	r7
 80163f6:	3001      	adds	r0, #1
 80163f8:	f43f af2b 	beq.w	8016252 <_printf_float+0xba>
 80163fc:	f108 0801 	add.w	r8, r8, #1
 8016400:	e7e6      	b.n	80163d0 <_printf_float+0x238>
 8016402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016404:	2b00      	cmp	r3, #0
 8016406:	dc2b      	bgt.n	8016460 <_printf_float+0x2c8>
 8016408:	2301      	movs	r3, #1
 801640a:	4a26      	ldr	r2, [pc, #152]	; (80164a4 <_printf_float+0x30c>)
 801640c:	4631      	mov	r1, r6
 801640e:	4628      	mov	r0, r5
 8016410:	47b8      	blx	r7
 8016412:	3001      	adds	r0, #1
 8016414:	f43f af1d 	beq.w	8016252 <_printf_float+0xba>
 8016418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801641a:	b923      	cbnz	r3, 8016426 <_printf_float+0x28e>
 801641c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801641e:	b913      	cbnz	r3, 8016426 <_printf_float+0x28e>
 8016420:	6823      	ldr	r3, [r4, #0]
 8016422:	07d9      	lsls	r1, r3, #31
 8016424:	d5d8      	bpl.n	80163d8 <_printf_float+0x240>
 8016426:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801642a:	4631      	mov	r1, r6
 801642c:	4628      	mov	r0, r5
 801642e:	47b8      	blx	r7
 8016430:	3001      	adds	r0, #1
 8016432:	f43f af0e 	beq.w	8016252 <_printf_float+0xba>
 8016436:	f04f 0900 	mov.w	r9, #0
 801643a:	f104 0a1a 	add.w	sl, r4, #26
 801643e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016440:	425b      	negs	r3, r3
 8016442:	454b      	cmp	r3, r9
 8016444:	dc01      	bgt.n	801644a <_printf_float+0x2b2>
 8016446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016448:	e794      	b.n	8016374 <_printf_float+0x1dc>
 801644a:	2301      	movs	r3, #1
 801644c:	4652      	mov	r2, sl
 801644e:	4631      	mov	r1, r6
 8016450:	4628      	mov	r0, r5
 8016452:	47b8      	blx	r7
 8016454:	3001      	adds	r0, #1
 8016456:	f43f aefc 	beq.w	8016252 <_printf_float+0xba>
 801645a:	f109 0901 	add.w	r9, r9, #1
 801645e:	e7ee      	b.n	801643e <_printf_float+0x2a6>
 8016460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016462:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016464:	429a      	cmp	r2, r3
 8016466:	bfa8      	it	ge
 8016468:	461a      	movge	r2, r3
 801646a:	2a00      	cmp	r2, #0
 801646c:	4691      	mov	r9, r2
 801646e:	dd07      	ble.n	8016480 <_printf_float+0x2e8>
 8016470:	4613      	mov	r3, r2
 8016472:	4631      	mov	r1, r6
 8016474:	4642      	mov	r2, r8
 8016476:	4628      	mov	r0, r5
 8016478:	47b8      	blx	r7
 801647a:	3001      	adds	r0, #1
 801647c:	f43f aee9 	beq.w	8016252 <_printf_float+0xba>
 8016480:	f104 031a 	add.w	r3, r4, #26
 8016484:	f04f 0b00 	mov.w	fp, #0
 8016488:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801648c:	9306      	str	r3, [sp, #24]
 801648e:	e015      	b.n	80164bc <_printf_float+0x324>
 8016490:	7fefffff 	.word	0x7fefffff
 8016494:	0801b350 	.word	0x0801b350
 8016498:	0801b34c 	.word	0x0801b34c
 801649c:	0801b358 	.word	0x0801b358
 80164a0:	0801b354 	.word	0x0801b354
 80164a4:	0801b57b 	.word	0x0801b57b
 80164a8:	2301      	movs	r3, #1
 80164aa:	9a06      	ldr	r2, [sp, #24]
 80164ac:	4631      	mov	r1, r6
 80164ae:	4628      	mov	r0, r5
 80164b0:	47b8      	blx	r7
 80164b2:	3001      	adds	r0, #1
 80164b4:	f43f aecd 	beq.w	8016252 <_printf_float+0xba>
 80164b8:	f10b 0b01 	add.w	fp, fp, #1
 80164bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80164c0:	ebaa 0309 	sub.w	r3, sl, r9
 80164c4:	455b      	cmp	r3, fp
 80164c6:	dcef      	bgt.n	80164a8 <_printf_float+0x310>
 80164c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80164cc:	429a      	cmp	r2, r3
 80164ce:	44d0      	add	r8, sl
 80164d0:	db15      	blt.n	80164fe <_printf_float+0x366>
 80164d2:	6823      	ldr	r3, [r4, #0]
 80164d4:	07da      	lsls	r2, r3, #31
 80164d6:	d412      	bmi.n	80164fe <_printf_float+0x366>
 80164d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80164dc:	eba3 020a 	sub.w	r2, r3, sl
 80164e0:	eba3 0a01 	sub.w	sl, r3, r1
 80164e4:	4592      	cmp	sl, r2
 80164e6:	bfa8      	it	ge
 80164e8:	4692      	movge	sl, r2
 80164ea:	f1ba 0f00 	cmp.w	sl, #0
 80164ee:	dc0e      	bgt.n	801650e <_printf_float+0x376>
 80164f0:	f04f 0800 	mov.w	r8, #0
 80164f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80164f8:	f104 091a 	add.w	r9, r4, #26
 80164fc:	e019      	b.n	8016532 <_printf_float+0x39a>
 80164fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016502:	4631      	mov	r1, r6
 8016504:	4628      	mov	r0, r5
 8016506:	47b8      	blx	r7
 8016508:	3001      	adds	r0, #1
 801650a:	d1e5      	bne.n	80164d8 <_printf_float+0x340>
 801650c:	e6a1      	b.n	8016252 <_printf_float+0xba>
 801650e:	4653      	mov	r3, sl
 8016510:	4642      	mov	r2, r8
 8016512:	4631      	mov	r1, r6
 8016514:	4628      	mov	r0, r5
 8016516:	47b8      	blx	r7
 8016518:	3001      	adds	r0, #1
 801651a:	d1e9      	bne.n	80164f0 <_printf_float+0x358>
 801651c:	e699      	b.n	8016252 <_printf_float+0xba>
 801651e:	2301      	movs	r3, #1
 8016520:	464a      	mov	r2, r9
 8016522:	4631      	mov	r1, r6
 8016524:	4628      	mov	r0, r5
 8016526:	47b8      	blx	r7
 8016528:	3001      	adds	r0, #1
 801652a:	f43f ae92 	beq.w	8016252 <_printf_float+0xba>
 801652e:	f108 0801 	add.w	r8, r8, #1
 8016532:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016536:	1a9b      	subs	r3, r3, r2
 8016538:	eba3 030a 	sub.w	r3, r3, sl
 801653c:	4543      	cmp	r3, r8
 801653e:	dcee      	bgt.n	801651e <_printf_float+0x386>
 8016540:	e74a      	b.n	80163d8 <_printf_float+0x240>
 8016542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016544:	2a01      	cmp	r2, #1
 8016546:	dc01      	bgt.n	801654c <_printf_float+0x3b4>
 8016548:	07db      	lsls	r3, r3, #31
 801654a:	d53a      	bpl.n	80165c2 <_printf_float+0x42a>
 801654c:	2301      	movs	r3, #1
 801654e:	4642      	mov	r2, r8
 8016550:	4631      	mov	r1, r6
 8016552:	4628      	mov	r0, r5
 8016554:	47b8      	blx	r7
 8016556:	3001      	adds	r0, #1
 8016558:	f43f ae7b 	beq.w	8016252 <_printf_float+0xba>
 801655c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016560:	4631      	mov	r1, r6
 8016562:	4628      	mov	r0, r5
 8016564:	47b8      	blx	r7
 8016566:	3001      	adds	r0, #1
 8016568:	f108 0801 	add.w	r8, r8, #1
 801656c:	f43f ae71 	beq.w	8016252 <_printf_float+0xba>
 8016570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016572:	2200      	movs	r2, #0
 8016574:	f103 3aff 	add.w	sl, r3, #4294967295
 8016578:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801657c:	2300      	movs	r3, #0
 801657e:	f7f2 f9db 	bl	8008938 <__aeabi_dcmpeq>
 8016582:	b9c8      	cbnz	r0, 80165b8 <_printf_float+0x420>
 8016584:	4653      	mov	r3, sl
 8016586:	4642      	mov	r2, r8
 8016588:	4631      	mov	r1, r6
 801658a:	4628      	mov	r0, r5
 801658c:	47b8      	blx	r7
 801658e:	3001      	adds	r0, #1
 8016590:	d10e      	bne.n	80165b0 <_printf_float+0x418>
 8016592:	e65e      	b.n	8016252 <_printf_float+0xba>
 8016594:	2301      	movs	r3, #1
 8016596:	4652      	mov	r2, sl
 8016598:	4631      	mov	r1, r6
 801659a:	4628      	mov	r0, r5
 801659c:	47b8      	blx	r7
 801659e:	3001      	adds	r0, #1
 80165a0:	f43f ae57 	beq.w	8016252 <_printf_float+0xba>
 80165a4:	f108 0801 	add.w	r8, r8, #1
 80165a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165aa:	3b01      	subs	r3, #1
 80165ac:	4543      	cmp	r3, r8
 80165ae:	dcf1      	bgt.n	8016594 <_printf_float+0x3fc>
 80165b0:	464b      	mov	r3, r9
 80165b2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80165b6:	e6de      	b.n	8016376 <_printf_float+0x1de>
 80165b8:	f04f 0800 	mov.w	r8, #0
 80165bc:	f104 0a1a 	add.w	sl, r4, #26
 80165c0:	e7f2      	b.n	80165a8 <_printf_float+0x410>
 80165c2:	2301      	movs	r3, #1
 80165c4:	e7df      	b.n	8016586 <_printf_float+0x3ee>
 80165c6:	2301      	movs	r3, #1
 80165c8:	464a      	mov	r2, r9
 80165ca:	4631      	mov	r1, r6
 80165cc:	4628      	mov	r0, r5
 80165ce:	47b8      	blx	r7
 80165d0:	3001      	adds	r0, #1
 80165d2:	f43f ae3e 	beq.w	8016252 <_printf_float+0xba>
 80165d6:	f108 0801 	add.w	r8, r8, #1
 80165da:	68e3      	ldr	r3, [r4, #12]
 80165dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80165de:	1a9b      	subs	r3, r3, r2
 80165e0:	4543      	cmp	r3, r8
 80165e2:	dcf0      	bgt.n	80165c6 <_printf_float+0x42e>
 80165e4:	e6fc      	b.n	80163e0 <_printf_float+0x248>
 80165e6:	f04f 0800 	mov.w	r8, #0
 80165ea:	f104 0919 	add.w	r9, r4, #25
 80165ee:	e7f4      	b.n	80165da <_printf_float+0x442>
 80165f0:	2900      	cmp	r1, #0
 80165f2:	f43f ae8b 	beq.w	801630c <_printf_float+0x174>
 80165f6:	2300      	movs	r3, #0
 80165f8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80165fc:	ab09      	add	r3, sp, #36	; 0x24
 80165fe:	9300      	str	r3, [sp, #0]
 8016600:	ec49 8b10 	vmov	d0, r8, r9
 8016604:	6022      	str	r2, [r4, #0]
 8016606:	f8cd a004 	str.w	sl, [sp, #4]
 801660a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801660e:	4628      	mov	r0, r5
 8016610:	f7ff fd2d 	bl	801606e <__cvt>
 8016614:	4680      	mov	r8, r0
 8016616:	e648      	b.n	80162aa <_printf_float+0x112>

08016618 <_printf_common>:
 8016618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801661c:	4691      	mov	r9, r2
 801661e:	461f      	mov	r7, r3
 8016620:	688a      	ldr	r2, [r1, #8]
 8016622:	690b      	ldr	r3, [r1, #16]
 8016624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016628:	4293      	cmp	r3, r2
 801662a:	bfb8      	it	lt
 801662c:	4613      	movlt	r3, r2
 801662e:	f8c9 3000 	str.w	r3, [r9]
 8016632:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016636:	4606      	mov	r6, r0
 8016638:	460c      	mov	r4, r1
 801663a:	b112      	cbz	r2, 8016642 <_printf_common+0x2a>
 801663c:	3301      	adds	r3, #1
 801663e:	f8c9 3000 	str.w	r3, [r9]
 8016642:	6823      	ldr	r3, [r4, #0]
 8016644:	0699      	lsls	r1, r3, #26
 8016646:	bf42      	ittt	mi
 8016648:	f8d9 3000 	ldrmi.w	r3, [r9]
 801664c:	3302      	addmi	r3, #2
 801664e:	f8c9 3000 	strmi.w	r3, [r9]
 8016652:	6825      	ldr	r5, [r4, #0]
 8016654:	f015 0506 	ands.w	r5, r5, #6
 8016658:	d107      	bne.n	801666a <_printf_common+0x52>
 801665a:	f104 0a19 	add.w	sl, r4, #25
 801665e:	68e3      	ldr	r3, [r4, #12]
 8016660:	f8d9 2000 	ldr.w	r2, [r9]
 8016664:	1a9b      	subs	r3, r3, r2
 8016666:	42ab      	cmp	r3, r5
 8016668:	dc28      	bgt.n	80166bc <_printf_common+0xa4>
 801666a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801666e:	6822      	ldr	r2, [r4, #0]
 8016670:	3300      	adds	r3, #0
 8016672:	bf18      	it	ne
 8016674:	2301      	movne	r3, #1
 8016676:	0692      	lsls	r2, r2, #26
 8016678:	d42d      	bmi.n	80166d6 <_printf_common+0xbe>
 801667a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801667e:	4639      	mov	r1, r7
 8016680:	4630      	mov	r0, r6
 8016682:	47c0      	blx	r8
 8016684:	3001      	adds	r0, #1
 8016686:	d020      	beq.n	80166ca <_printf_common+0xb2>
 8016688:	6823      	ldr	r3, [r4, #0]
 801668a:	68e5      	ldr	r5, [r4, #12]
 801668c:	f8d9 2000 	ldr.w	r2, [r9]
 8016690:	f003 0306 	and.w	r3, r3, #6
 8016694:	2b04      	cmp	r3, #4
 8016696:	bf08      	it	eq
 8016698:	1aad      	subeq	r5, r5, r2
 801669a:	68a3      	ldr	r3, [r4, #8]
 801669c:	6922      	ldr	r2, [r4, #16]
 801669e:	bf0c      	ite	eq
 80166a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80166a4:	2500      	movne	r5, #0
 80166a6:	4293      	cmp	r3, r2
 80166a8:	bfc4      	itt	gt
 80166aa:	1a9b      	subgt	r3, r3, r2
 80166ac:	18ed      	addgt	r5, r5, r3
 80166ae:	f04f 0900 	mov.w	r9, #0
 80166b2:	341a      	adds	r4, #26
 80166b4:	454d      	cmp	r5, r9
 80166b6:	d11a      	bne.n	80166ee <_printf_common+0xd6>
 80166b8:	2000      	movs	r0, #0
 80166ba:	e008      	b.n	80166ce <_printf_common+0xb6>
 80166bc:	2301      	movs	r3, #1
 80166be:	4652      	mov	r2, sl
 80166c0:	4639      	mov	r1, r7
 80166c2:	4630      	mov	r0, r6
 80166c4:	47c0      	blx	r8
 80166c6:	3001      	adds	r0, #1
 80166c8:	d103      	bne.n	80166d2 <_printf_common+0xba>
 80166ca:	f04f 30ff 	mov.w	r0, #4294967295
 80166ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166d2:	3501      	adds	r5, #1
 80166d4:	e7c3      	b.n	801665e <_printf_common+0x46>
 80166d6:	18e1      	adds	r1, r4, r3
 80166d8:	1c5a      	adds	r2, r3, #1
 80166da:	2030      	movs	r0, #48	; 0x30
 80166dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80166e0:	4422      	add	r2, r4
 80166e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80166e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80166ea:	3302      	adds	r3, #2
 80166ec:	e7c5      	b.n	801667a <_printf_common+0x62>
 80166ee:	2301      	movs	r3, #1
 80166f0:	4622      	mov	r2, r4
 80166f2:	4639      	mov	r1, r7
 80166f4:	4630      	mov	r0, r6
 80166f6:	47c0      	blx	r8
 80166f8:	3001      	adds	r0, #1
 80166fa:	d0e6      	beq.n	80166ca <_printf_common+0xb2>
 80166fc:	f109 0901 	add.w	r9, r9, #1
 8016700:	e7d8      	b.n	80166b4 <_printf_common+0x9c>
	...

08016704 <_printf_i>:
 8016704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016708:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801670c:	460c      	mov	r4, r1
 801670e:	7e09      	ldrb	r1, [r1, #24]
 8016710:	b085      	sub	sp, #20
 8016712:	296e      	cmp	r1, #110	; 0x6e
 8016714:	4617      	mov	r7, r2
 8016716:	4606      	mov	r6, r0
 8016718:	4698      	mov	r8, r3
 801671a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801671c:	f000 80b3 	beq.w	8016886 <_printf_i+0x182>
 8016720:	d822      	bhi.n	8016768 <_printf_i+0x64>
 8016722:	2963      	cmp	r1, #99	; 0x63
 8016724:	d036      	beq.n	8016794 <_printf_i+0x90>
 8016726:	d80a      	bhi.n	801673e <_printf_i+0x3a>
 8016728:	2900      	cmp	r1, #0
 801672a:	f000 80b9 	beq.w	80168a0 <_printf_i+0x19c>
 801672e:	2958      	cmp	r1, #88	; 0x58
 8016730:	f000 8083 	beq.w	801683a <_printf_i+0x136>
 8016734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016738:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801673c:	e032      	b.n	80167a4 <_printf_i+0xa0>
 801673e:	2964      	cmp	r1, #100	; 0x64
 8016740:	d001      	beq.n	8016746 <_printf_i+0x42>
 8016742:	2969      	cmp	r1, #105	; 0x69
 8016744:	d1f6      	bne.n	8016734 <_printf_i+0x30>
 8016746:	6820      	ldr	r0, [r4, #0]
 8016748:	6813      	ldr	r3, [r2, #0]
 801674a:	0605      	lsls	r5, r0, #24
 801674c:	f103 0104 	add.w	r1, r3, #4
 8016750:	d52a      	bpl.n	80167a8 <_printf_i+0xa4>
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	6011      	str	r1, [r2, #0]
 8016756:	2b00      	cmp	r3, #0
 8016758:	da03      	bge.n	8016762 <_printf_i+0x5e>
 801675a:	222d      	movs	r2, #45	; 0x2d
 801675c:	425b      	negs	r3, r3
 801675e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016762:	486f      	ldr	r0, [pc, #444]	; (8016920 <_printf_i+0x21c>)
 8016764:	220a      	movs	r2, #10
 8016766:	e039      	b.n	80167dc <_printf_i+0xd8>
 8016768:	2973      	cmp	r1, #115	; 0x73
 801676a:	f000 809d 	beq.w	80168a8 <_printf_i+0x1a4>
 801676e:	d808      	bhi.n	8016782 <_printf_i+0x7e>
 8016770:	296f      	cmp	r1, #111	; 0x6f
 8016772:	d020      	beq.n	80167b6 <_printf_i+0xb2>
 8016774:	2970      	cmp	r1, #112	; 0x70
 8016776:	d1dd      	bne.n	8016734 <_printf_i+0x30>
 8016778:	6823      	ldr	r3, [r4, #0]
 801677a:	f043 0320 	orr.w	r3, r3, #32
 801677e:	6023      	str	r3, [r4, #0]
 8016780:	e003      	b.n	801678a <_printf_i+0x86>
 8016782:	2975      	cmp	r1, #117	; 0x75
 8016784:	d017      	beq.n	80167b6 <_printf_i+0xb2>
 8016786:	2978      	cmp	r1, #120	; 0x78
 8016788:	d1d4      	bne.n	8016734 <_printf_i+0x30>
 801678a:	2378      	movs	r3, #120	; 0x78
 801678c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016790:	4864      	ldr	r0, [pc, #400]	; (8016924 <_printf_i+0x220>)
 8016792:	e055      	b.n	8016840 <_printf_i+0x13c>
 8016794:	6813      	ldr	r3, [r2, #0]
 8016796:	1d19      	adds	r1, r3, #4
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	6011      	str	r1, [r2, #0]
 801679c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80167a4:	2301      	movs	r3, #1
 80167a6:	e08c      	b.n	80168c2 <_printf_i+0x1be>
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	6011      	str	r1, [r2, #0]
 80167ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80167b0:	bf18      	it	ne
 80167b2:	b21b      	sxthne	r3, r3
 80167b4:	e7cf      	b.n	8016756 <_printf_i+0x52>
 80167b6:	6813      	ldr	r3, [r2, #0]
 80167b8:	6825      	ldr	r5, [r4, #0]
 80167ba:	1d18      	adds	r0, r3, #4
 80167bc:	6010      	str	r0, [r2, #0]
 80167be:	0628      	lsls	r0, r5, #24
 80167c0:	d501      	bpl.n	80167c6 <_printf_i+0xc2>
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	e002      	b.n	80167cc <_printf_i+0xc8>
 80167c6:	0668      	lsls	r0, r5, #25
 80167c8:	d5fb      	bpl.n	80167c2 <_printf_i+0xbe>
 80167ca:	881b      	ldrh	r3, [r3, #0]
 80167cc:	4854      	ldr	r0, [pc, #336]	; (8016920 <_printf_i+0x21c>)
 80167ce:	296f      	cmp	r1, #111	; 0x6f
 80167d0:	bf14      	ite	ne
 80167d2:	220a      	movne	r2, #10
 80167d4:	2208      	moveq	r2, #8
 80167d6:	2100      	movs	r1, #0
 80167d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80167dc:	6865      	ldr	r5, [r4, #4]
 80167de:	60a5      	str	r5, [r4, #8]
 80167e0:	2d00      	cmp	r5, #0
 80167e2:	f2c0 8095 	blt.w	8016910 <_printf_i+0x20c>
 80167e6:	6821      	ldr	r1, [r4, #0]
 80167e8:	f021 0104 	bic.w	r1, r1, #4
 80167ec:	6021      	str	r1, [r4, #0]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d13d      	bne.n	801686e <_printf_i+0x16a>
 80167f2:	2d00      	cmp	r5, #0
 80167f4:	f040 808e 	bne.w	8016914 <_printf_i+0x210>
 80167f8:	4665      	mov	r5, ip
 80167fa:	2a08      	cmp	r2, #8
 80167fc:	d10b      	bne.n	8016816 <_printf_i+0x112>
 80167fe:	6823      	ldr	r3, [r4, #0]
 8016800:	07db      	lsls	r3, r3, #31
 8016802:	d508      	bpl.n	8016816 <_printf_i+0x112>
 8016804:	6923      	ldr	r3, [r4, #16]
 8016806:	6862      	ldr	r2, [r4, #4]
 8016808:	429a      	cmp	r2, r3
 801680a:	bfde      	ittt	le
 801680c:	2330      	movle	r3, #48	; 0x30
 801680e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016812:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016816:	ebac 0305 	sub.w	r3, ip, r5
 801681a:	6123      	str	r3, [r4, #16]
 801681c:	f8cd 8000 	str.w	r8, [sp]
 8016820:	463b      	mov	r3, r7
 8016822:	aa03      	add	r2, sp, #12
 8016824:	4621      	mov	r1, r4
 8016826:	4630      	mov	r0, r6
 8016828:	f7ff fef6 	bl	8016618 <_printf_common>
 801682c:	3001      	adds	r0, #1
 801682e:	d14d      	bne.n	80168cc <_printf_i+0x1c8>
 8016830:	f04f 30ff 	mov.w	r0, #4294967295
 8016834:	b005      	add	sp, #20
 8016836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801683a:	4839      	ldr	r0, [pc, #228]	; (8016920 <_printf_i+0x21c>)
 801683c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016840:	6813      	ldr	r3, [r2, #0]
 8016842:	6821      	ldr	r1, [r4, #0]
 8016844:	1d1d      	adds	r5, r3, #4
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	6015      	str	r5, [r2, #0]
 801684a:	060a      	lsls	r2, r1, #24
 801684c:	d50b      	bpl.n	8016866 <_printf_i+0x162>
 801684e:	07ca      	lsls	r2, r1, #31
 8016850:	bf44      	itt	mi
 8016852:	f041 0120 	orrmi.w	r1, r1, #32
 8016856:	6021      	strmi	r1, [r4, #0]
 8016858:	b91b      	cbnz	r3, 8016862 <_printf_i+0x15e>
 801685a:	6822      	ldr	r2, [r4, #0]
 801685c:	f022 0220 	bic.w	r2, r2, #32
 8016860:	6022      	str	r2, [r4, #0]
 8016862:	2210      	movs	r2, #16
 8016864:	e7b7      	b.n	80167d6 <_printf_i+0xd2>
 8016866:	064d      	lsls	r5, r1, #25
 8016868:	bf48      	it	mi
 801686a:	b29b      	uxthmi	r3, r3
 801686c:	e7ef      	b.n	801684e <_printf_i+0x14a>
 801686e:	4665      	mov	r5, ip
 8016870:	fbb3 f1f2 	udiv	r1, r3, r2
 8016874:	fb02 3311 	mls	r3, r2, r1, r3
 8016878:	5cc3      	ldrb	r3, [r0, r3]
 801687a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801687e:	460b      	mov	r3, r1
 8016880:	2900      	cmp	r1, #0
 8016882:	d1f5      	bne.n	8016870 <_printf_i+0x16c>
 8016884:	e7b9      	b.n	80167fa <_printf_i+0xf6>
 8016886:	6813      	ldr	r3, [r2, #0]
 8016888:	6825      	ldr	r5, [r4, #0]
 801688a:	6961      	ldr	r1, [r4, #20]
 801688c:	1d18      	adds	r0, r3, #4
 801688e:	6010      	str	r0, [r2, #0]
 8016890:	0628      	lsls	r0, r5, #24
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	d501      	bpl.n	801689a <_printf_i+0x196>
 8016896:	6019      	str	r1, [r3, #0]
 8016898:	e002      	b.n	80168a0 <_printf_i+0x19c>
 801689a:	066a      	lsls	r2, r5, #25
 801689c:	d5fb      	bpl.n	8016896 <_printf_i+0x192>
 801689e:	8019      	strh	r1, [r3, #0]
 80168a0:	2300      	movs	r3, #0
 80168a2:	6123      	str	r3, [r4, #16]
 80168a4:	4665      	mov	r5, ip
 80168a6:	e7b9      	b.n	801681c <_printf_i+0x118>
 80168a8:	6813      	ldr	r3, [r2, #0]
 80168aa:	1d19      	adds	r1, r3, #4
 80168ac:	6011      	str	r1, [r2, #0]
 80168ae:	681d      	ldr	r5, [r3, #0]
 80168b0:	6862      	ldr	r2, [r4, #4]
 80168b2:	2100      	movs	r1, #0
 80168b4:	4628      	mov	r0, r5
 80168b6:	f7f1 fbcb 	bl	8008050 <memchr>
 80168ba:	b108      	cbz	r0, 80168c0 <_printf_i+0x1bc>
 80168bc:	1b40      	subs	r0, r0, r5
 80168be:	6060      	str	r0, [r4, #4]
 80168c0:	6863      	ldr	r3, [r4, #4]
 80168c2:	6123      	str	r3, [r4, #16]
 80168c4:	2300      	movs	r3, #0
 80168c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168ca:	e7a7      	b.n	801681c <_printf_i+0x118>
 80168cc:	6923      	ldr	r3, [r4, #16]
 80168ce:	462a      	mov	r2, r5
 80168d0:	4639      	mov	r1, r7
 80168d2:	4630      	mov	r0, r6
 80168d4:	47c0      	blx	r8
 80168d6:	3001      	adds	r0, #1
 80168d8:	d0aa      	beq.n	8016830 <_printf_i+0x12c>
 80168da:	6823      	ldr	r3, [r4, #0]
 80168dc:	079b      	lsls	r3, r3, #30
 80168de:	d413      	bmi.n	8016908 <_printf_i+0x204>
 80168e0:	68e0      	ldr	r0, [r4, #12]
 80168e2:	9b03      	ldr	r3, [sp, #12]
 80168e4:	4298      	cmp	r0, r3
 80168e6:	bfb8      	it	lt
 80168e8:	4618      	movlt	r0, r3
 80168ea:	e7a3      	b.n	8016834 <_printf_i+0x130>
 80168ec:	2301      	movs	r3, #1
 80168ee:	464a      	mov	r2, r9
 80168f0:	4639      	mov	r1, r7
 80168f2:	4630      	mov	r0, r6
 80168f4:	47c0      	blx	r8
 80168f6:	3001      	adds	r0, #1
 80168f8:	d09a      	beq.n	8016830 <_printf_i+0x12c>
 80168fa:	3501      	adds	r5, #1
 80168fc:	68e3      	ldr	r3, [r4, #12]
 80168fe:	9a03      	ldr	r2, [sp, #12]
 8016900:	1a9b      	subs	r3, r3, r2
 8016902:	42ab      	cmp	r3, r5
 8016904:	dcf2      	bgt.n	80168ec <_printf_i+0x1e8>
 8016906:	e7eb      	b.n	80168e0 <_printf_i+0x1dc>
 8016908:	2500      	movs	r5, #0
 801690a:	f104 0919 	add.w	r9, r4, #25
 801690e:	e7f5      	b.n	80168fc <_printf_i+0x1f8>
 8016910:	2b00      	cmp	r3, #0
 8016912:	d1ac      	bne.n	801686e <_printf_i+0x16a>
 8016914:	7803      	ldrb	r3, [r0, #0]
 8016916:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801691a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801691e:	e76c      	b.n	80167fa <_printf_i+0xf6>
 8016920:	0801b35c 	.word	0x0801b35c
 8016924:	0801b36d 	.word	0x0801b36d

08016928 <_scanf_float>:
 8016928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801692c:	469a      	mov	sl, r3
 801692e:	688b      	ldr	r3, [r1, #8]
 8016930:	4616      	mov	r6, r2
 8016932:	1e5a      	subs	r2, r3, #1
 8016934:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016938:	b087      	sub	sp, #28
 801693a:	bf83      	ittte	hi
 801693c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016940:	189b      	addhi	r3, r3, r2
 8016942:	9301      	strhi	r3, [sp, #4]
 8016944:	2300      	movls	r3, #0
 8016946:	bf86      	itte	hi
 8016948:	f240 135d 	movwhi	r3, #349	; 0x15d
 801694c:	608b      	strhi	r3, [r1, #8]
 801694e:	9301      	strls	r3, [sp, #4]
 8016950:	680b      	ldr	r3, [r1, #0]
 8016952:	4688      	mov	r8, r1
 8016954:	f04f 0b00 	mov.w	fp, #0
 8016958:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801695c:	f848 3b1c 	str.w	r3, [r8], #28
 8016960:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016964:	4607      	mov	r7, r0
 8016966:	460c      	mov	r4, r1
 8016968:	4645      	mov	r5, r8
 801696a:	465a      	mov	r2, fp
 801696c:	46d9      	mov	r9, fp
 801696e:	f8cd b008 	str.w	fp, [sp, #8]
 8016972:	68a1      	ldr	r1, [r4, #8]
 8016974:	b181      	cbz	r1, 8016998 <_scanf_float+0x70>
 8016976:	6833      	ldr	r3, [r6, #0]
 8016978:	781b      	ldrb	r3, [r3, #0]
 801697a:	2b49      	cmp	r3, #73	; 0x49
 801697c:	d071      	beq.n	8016a62 <_scanf_float+0x13a>
 801697e:	d84d      	bhi.n	8016a1c <_scanf_float+0xf4>
 8016980:	2b39      	cmp	r3, #57	; 0x39
 8016982:	d840      	bhi.n	8016a06 <_scanf_float+0xde>
 8016984:	2b31      	cmp	r3, #49	; 0x31
 8016986:	f080 8088 	bcs.w	8016a9a <_scanf_float+0x172>
 801698a:	2b2d      	cmp	r3, #45	; 0x2d
 801698c:	f000 8090 	beq.w	8016ab0 <_scanf_float+0x188>
 8016990:	d815      	bhi.n	80169be <_scanf_float+0x96>
 8016992:	2b2b      	cmp	r3, #43	; 0x2b
 8016994:	f000 808c 	beq.w	8016ab0 <_scanf_float+0x188>
 8016998:	f1b9 0f00 	cmp.w	r9, #0
 801699c:	d003      	beq.n	80169a6 <_scanf_float+0x7e>
 801699e:	6823      	ldr	r3, [r4, #0]
 80169a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80169a4:	6023      	str	r3, [r4, #0]
 80169a6:	3a01      	subs	r2, #1
 80169a8:	2a01      	cmp	r2, #1
 80169aa:	f200 80ea 	bhi.w	8016b82 <_scanf_float+0x25a>
 80169ae:	4545      	cmp	r5, r8
 80169b0:	f200 80dc 	bhi.w	8016b6c <_scanf_float+0x244>
 80169b4:	2601      	movs	r6, #1
 80169b6:	4630      	mov	r0, r6
 80169b8:	b007      	add	sp, #28
 80169ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169be:	2b2e      	cmp	r3, #46	; 0x2e
 80169c0:	f000 809f 	beq.w	8016b02 <_scanf_float+0x1da>
 80169c4:	2b30      	cmp	r3, #48	; 0x30
 80169c6:	d1e7      	bne.n	8016998 <_scanf_float+0x70>
 80169c8:	6820      	ldr	r0, [r4, #0]
 80169ca:	f410 7f80 	tst.w	r0, #256	; 0x100
 80169ce:	d064      	beq.n	8016a9a <_scanf_float+0x172>
 80169d0:	9b01      	ldr	r3, [sp, #4]
 80169d2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80169d6:	6020      	str	r0, [r4, #0]
 80169d8:	f109 0901 	add.w	r9, r9, #1
 80169dc:	b11b      	cbz	r3, 80169e6 <_scanf_float+0xbe>
 80169de:	3b01      	subs	r3, #1
 80169e0:	3101      	adds	r1, #1
 80169e2:	9301      	str	r3, [sp, #4]
 80169e4:	60a1      	str	r1, [r4, #8]
 80169e6:	68a3      	ldr	r3, [r4, #8]
 80169e8:	3b01      	subs	r3, #1
 80169ea:	60a3      	str	r3, [r4, #8]
 80169ec:	6923      	ldr	r3, [r4, #16]
 80169ee:	3301      	adds	r3, #1
 80169f0:	6123      	str	r3, [r4, #16]
 80169f2:	6873      	ldr	r3, [r6, #4]
 80169f4:	3b01      	subs	r3, #1
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	6073      	str	r3, [r6, #4]
 80169fa:	f340 80ac 	ble.w	8016b56 <_scanf_float+0x22e>
 80169fe:	6833      	ldr	r3, [r6, #0]
 8016a00:	3301      	adds	r3, #1
 8016a02:	6033      	str	r3, [r6, #0]
 8016a04:	e7b5      	b.n	8016972 <_scanf_float+0x4a>
 8016a06:	2b45      	cmp	r3, #69	; 0x45
 8016a08:	f000 8085 	beq.w	8016b16 <_scanf_float+0x1ee>
 8016a0c:	2b46      	cmp	r3, #70	; 0x46
 8016a0e:	d06a      	beq.n	8016ae6 <_scanf_float+0x1be>
 8016a10:	2b41      	cmp	r3, #65	; 0x41
 8016a12:	d1c1      	bne.n	8016998 <_scanf_float+0x70>
 8016a14:	2a01      	cmp	r2, #1
 8016a16:	d1bf      	bne.n	8016998 <_scanf_float+0x70>
 8016a18:	2202      	movs	r2, #2
 8016a1a:	e046      	b.n	8016aaa <_scanf_float+0x182>
 8016a1c:	2b65      	cmp	r3, #101	; 0x65
 8016a1e:	d07a      	beq.n	8016b16 <_scanf_float+0x1ee>
 8016a20:	d818      	bhi.n	8016a54 <_scanf_float+0x12c>
 8016a22:	2b54      	cmp	r3, #84	; 0x54
 8016a24:	d066      	beq.n	8016af4 <_scanf_float+0x1cc>
 8016a26:	d811      	bhi.n	8016a4c <_scanf_float+0x124>
 8016a28:	2b4e      	cmp	r3, #78	; 0x4e
 8016a2a:	d1b5      	bne.n	8016998 <_scanf_float+0x70>
 8016a2c:	2a00      	cmp	r2, #0
 8016a2e:	d146      	bne.n	8016abe <_scanf_float+0x196>
 8016a30:	f1b9 0f00 	cmp.w	r9, #0
 8016a34:	d145      	bne.n	8016ac2 <_scanf_float+0x19a>
 8016a36:	6821      	ldr	r1, [r4, #0]
 8016a38:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016a3c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016a40:	d13f      	bne.n	8016ac2 <_scanf_float+0x19a>
 8016a42:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016a46:	6021      	str	r1, [r4, #0]
 8016a48:	2201      	movs	r2, #1
 8016a4a:	e02e      	b.n	8016aaa <_scanf_float+0x182>
 8016a4c:	2b59      	cmp	r3, #89	; 0x59
 8016a4e:	d01e      	beq.n	8016a8e <_scanf_float+0x166>
 8016a50:	2b61      	cmp	r3, #97	; 0x61
 8016a52:	e7de      	b.n	8016a12 <_scanf_float+0xea>
 8016a54:	2b6e      	cmp	r3, #110	; 0x6e
 8016a56:	d0e9      	beq.n	8016a2c <_scanf_float+0x104>
 8016a58:	d815      	bhi.n	8016a86 <_scanf_float+0x15e>
 8016a5a:	2b66      	cmp	r3, #102	; 0x66
 8016a5c:	d043      	beq.n	8016ae6 <_scanf_float+0x1be>
 8016a5e:	2b69      	cmp	r3, #105	; 0x69
 8016a60:	d19a      	bne.n	8016998 <_scanf_float+0x70>
 8016a62:	f1bb 0f00 	cmp.w	fp, #0
 8016a66:	d138      	bne.n	8016ada <_scanf_float+0x1b2>
 8016a68:	f1b9 0f00 	cmp.w	r9, #0
 8016a6c:	d197      	bne.n	801699e <_scanf_float+0x76>
 8016a6e:	6821      	ldr	r1, [r4, #0]
 8016a70:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016a74:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016a78:	d195      	bne.n	80169a6 <_scanf_float+0x7e>
 8016a7a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016a7e:	6021      	str	r1, [r4, #0]
 8016a80:	f04f 0b01 	mov.w	fp, #1
 8016a84:	e011      	b.n	8016aaa <_scanf_float+0x182>
 8016a86:	2b74      	cmp	r3, #116	; 0x74
 8016a88:	d034      	beq.n	8016af4 <_scanf_float+0x1cc>
 8016a8a:	2b79      	cmp	r3, #121	; 0x79
 8016a8c:	d184      	bne.n	8016998 <_scanf_float+0x70>
 8016a8e:	f1bb 0f07 	cmp.w	fp, #7
 8016a92:	d181      	bne.n	8016998 <_scanf_float+0x70>
 8016a94:	f04f 0b08 	mov.w	fp, #8
 8016a98:	e007      	b.n	8016aaa <_scanf_float+0x182>
 8016a9a:	eb12 0f0b 	cmn.w	r2, fp
 8016a9e:	f47f af7b 	bne.w	8016998 <_scanf_float+0x70>
 8016aa2:	6821      	ldr	r1, [r4, #0]
 8016aa4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016aa8:	6021      	str	r1, [r4, #0]
 8016aaa:	702b      	strb	r3, [r5, #0]
 8016aac:	3501      	adds	r5, #1
 8016aae:	e79a      	b.n	80169e6 <_scanf_float+0xbe>
 8016ab0:	6821      	ldr	r1, [r4, #0]
 8016ab2:	0608      	lsls	r0, r1, #24
 8016ab4:	f57f af70 	bpl.w	8016998 <_scanf_float+0x70>
 8016ab8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016abc:	e7f4      	b.n	8016aa8 <_scanf_float+0x180>
 8016abe:	2a02      	cmp	r2, #2
 8016ac0:	d047      	beq.n	8016b52 <_scanf_float+0x22a>
 8016ac2:	f1bb 0f01 	cmp.w	fp, #1
 8016ac6:	d003      	beq.n	8016ad0 <_scanf_float+0x1a8>
 8016ac8:	f1bb 0f04 	cmp.w	fp, #4
 8016acc:	f47f af64 	bne.w	8016998 <_scanf_float+0x70>
 8016ad0:	f10b 0b01 	add.w	fp, fp, #1
 8016ad4:	fa5f fb8b 	uxtb.w	fp, fp
 8016ad8:	e7e7      	b.n	8016aaa <_scanf_float+0x182>
 8016ada:	f1bb 0f03 	cmp.w	fp, #3
 8016ade:	d0f7      	beq.n	8016ad0 <_scanf_float+0x1a8>
 8016ae0:	f1bb 0f05 	cmp.w	fp, #5
 8016ae4:	e7f2      	b.n	8016acc <_scanf_float+0x1a4>
 8016ae6:	f1bb 0f02 	cmp.w	fp, #2
 8016aea:	f47f af55 	bne.w	8016998 <_scanf_float+0x70>
 8016aee:	f04f 0b03 	mov.w	fp, #3
 8016af2:	e7da      	b.n	8016aaa <_scanf_float+0x182>
 8016af4:	f1bb 0f06 	cmp.w	fp, #6
 8016af8:	f47f af4e 	bne.w	8016998 <_scanf_float+0x70>
 8016afc:	f04f 0b07 	mov.w	fp, #7
 8016b00:	e7d3      	b.n	8016aaa <_scanf_float+0x182>
 8016b02:	6821      	ldr	r1, [r4, #0]
 8016b04:	0588      	lsls	r0, r1, #22
 8016b06:	f57f af47 	bpl.w	8016998 <_scanf_float+0x70>
 8016b0a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016b0e:	6021      	str	r1, [r4, #0]
 8016b10:	f8cd 9008 	str.w	r9, [sp, #8]
 8016b14:	e7c9      	b.n	8016aaa <_scanf_float+0x182>
 8016b16:	6821      	ldr	r1, [r4, #0]
 8016b18:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016b1c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016b20:	d006      	beq.n	8016b30 <_scanf_float+0x208>
 8016b22:	0548      	lsls	r0, r1, #21
 8016b24:	f57f af38 	bpl.w	8016998 <_scanf_float+0x70>
 8016b28:	f1b9 0f00 	cmp.w	r9, #0
 8016b2c:	f43f af3b 	beq.w	80169a6 <_scanf_float+0x7e>
 8016b30:	0588      	lsls	r0, r1, #22
 8016b32:	bf58      	it	pl
 8016b34:	9802      	ldrpl	r0, [sp, #8]
 8016b36:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016b3a:	bf58      	it	pl
 8016b3c:	eba9 0000 	subpl.w	r0, r9, r0
 8016b40:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016b44:	bf58      	it	pl
 8016b46:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016b4a:	6021      	str	r1, [r4, #0]
 8016b4c:	f04f 0900 	mov.w	r9, #0
 8016b50:	e7ab      	b.n	8016aaa <_scanf_float+0x182>
 8016b52:	2203      	movs	r2, #3
 8016b54:	e7a9      	b.n	8016aaa <_scanf_float+0x182>
 8016b56:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016b5a:	9205      	str	r2, [sp, #20]
 8016b5c:	4631      	mov	r1, r6
 8016b5e:	4638      	mov	r0, r7
 8016b60:	4798      	blx	r3
 8016b62:	9a05      	ldr	r2, [sp, #20]
 8016b64:	2800      	cmp	r0, #0
 8016b66:	f43f af04 	beq.w	8016972 <_scanf_float+0x4a>
 8016b6a:	e715      	b.n	8016998 <_scanf_float+0x70>
 8016b6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b74:	4632      	mov	r2, r6
 8016b76:	4638      	mov	r0, r7
 8016b78:	4798      	blx	r3
 8016b7a:	6923      	ldr	r3, [r4, #16]
 8016b7c:	3b01      	subs	r3, #1
 8016b7e:	6123      	str	r3, [r4, #16]
 8016b80:	e715      	b.n	80169ae <_scanf_float+0x86>
 8016b82:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016b86:	2b06      	cmp	r3, #6
 8016b88:	d80a      	bhi.n	8016ba0 <_scanf_float+0x278>
 8016b8a:	f1bb 0f02 	cmp.w	fp, #2
 8016b8e:	d968      	bls.n	8016c62 <_scanf_float+0x33a>
 8016b90:	f1ab 0b03 	sub.w	fp, fp, #3
 8016b94:	fa5f fb8b 	uxtb.w	fp, fp
 8016b98:	eba5 0b0b 	sub.w	fp, r5, fp
 8016b9c:	455d      	cmp	r5, fp
 8016b9e:	d14b      	bne.n	8016c38 <_scanf_float+0x310>
 8016ba0:	6823      	ldr	r3, [r4, #0]
 8016ba2:	05da      	lsls	r2, r3, #23
 8016ba4:	d51f      	bpl.n	8016be6 <_scanf_float+0x2be>
 8016ba6:	055b      	lsls	r3, r3, #21
 8016ba8:	d468      	bmi.n	8016c7c <_scanf_float+0x354>
 8016baa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016bae:	6923      	ldr	r3, [r4, #16]
 8016bb0:	2965      	cmp	r1, #101	; 0x65
 8016bb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8016bb6:	f105 3bff 	add.w	fp, r5, #4294967295
 8016bba:	6123      	str	r3, [r4, #16]
 8016bbc:	d00d      	beq.n	8016bda <_scanf_float+0x2b2>
 8016bbe:	2945      	cmp	r1, #69	; 0x45
 8016bc0:	d00b      	beq.n	8016bda <_scanf_float+0x2b2>
 8016bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bc6:	4632      	mov	r2, r6
 8016bc8:	4638      	mov	r0, r7
 8016bca:	4798      	blx	r3
 8016bcc:	6923      	ldr	r3, [r4, #16]
 8016bce:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016bd2:	3b01      	subs	r3, #1
 8016bd4:	f1a5 0b02 	sub.w	fp, r5, #2
 8016bd8:	6123      	str	r3, [r4, #16]
 8016bda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bde:	4632      	mov	r2, r6
 8016be0:	4638      	mov	r0, r7
 8016be2:	4798      	blx	r3
 8016be4:	465d      	mov	r5, fp
 8016be6:	6826      	ldr	r6, [r4, #0]
 8016be8:	f016 0610 	ands.w	r6, r6, #16
 8016bec:	d17a      	bne.n	8016ce4 <_scanf_float+0x3bc>
 8016bee:	702e      	strb	r6, [r5, #0]
 8016bf0:	6823      	ldr	r3, [r4, #0]
 8016bf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016bfa:	d142      	bne.n	8016c82 <_scanf_float+0x35a>
 8016bfc:	9b02      	ldr	r3, [sp, #8]
 8016bfe:	eba9 0303 	sub.w	r3, r9, r3
 8016c02:	425a      	negs	r2, r3
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d149      	bne.n	8016c9c <_scanf_float+0x374>
 8016c08:	2200      	movs	r2, #0
 8016c0a:	4641      	mov	r1, r8
 8016c0c:	4638      	mov	r0, r7
 8016c0e:	f000 ffef 	bl	8017bf0 <_strtod_r>
 8016c12:	6825      	ldr	r5, [r4, #0]
 8016c14:	f8da 3000 	ldr.w	r3, [sl]
 8016c18:	f015 0f02 	tst.w	r5, #2
 8016c1c:	f103 0204 	add.w	r2, r3, #4
 8016c20:	ec59 8b10 	vmov	r8, r9, d0
 8016c24:	f8ca 2000 	str.w	r2, [sl]
 8016c28:	d043      	beq.n	8016cb2 <_scanf_float+0x38a>
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	e9c3 8900 	strd	r8, r9, [r3]
 8016c30:	68e3      	ldr	r3, [r4, #12]
 8016c32:	3301      	adds	r3, #1
 8016c34:	60e3      	str	r3, [r4, #12]
 8016c36:	e6be      	b.n	80169b6 <_scanf_float+0x8e>
 8016c38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016c40:	4632      	mov	r2, r6
 8016c42:	4638      	mov	r0, r7
 8016c44:	4798      	blx	r3
 8016c46:	6923      	ldr	r3, [r4, #16]
 8016c48:	3b01      	subs	r3, #1
 8016c4a:	6123      	str	r3, [r4, #16]
 8016c4c:	e7a6      	b.n	8016b9c <_scanf_float+0x274>
 8016c4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c52:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016c56:	4632      	mov	r2, r6
 8016c58:	4638      	mov	r0, r7
 8016c5a:	4798      	blx	r3
 8016c5c:	6923      	ldr	r3, [r4, #16]
 8016c5e:	3b01      	subs	r3, #1
 8016c60:	6123      	str	r3, [r4, #16]
 8016c62:	4545      	cmp	r5, r8
 8016c64:	d8f3      	bhi.n	8016c4e <_scanf_float+0x326>
 8016c66:	e6a5      	b.n	80169b4 <_scanf_float+0x8c>
 8016c68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016c70:	4632      	mov	r2, r6
 8016c72:	4638      	mov	r0, r7
 8016c74:	4798      	blx	r3
 8016c76:	6923      	ldr	r3, [r4, #16]
 8016c78:	3b01      	subs	r3, #1
 8016c7a:	6123      	str	r3, [r4, #16]
 8016c7c:	4545      	cmp	r5, r8
 8016c7e:	d8f3      	bhi.n	8016c68 <_scanf_float+0x340>
 8016c80:	e698      	b.n	80169b4 <_scanf_float+0x8c>
 8016c82:	9b03      	ldr	r3, [sp, #12]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d0bf      	beq.n	8016c08 <_scanf_float+0x2e0>
 8016c88:	9904      	ldr	r1, [sp, #16]
 8016c8a:	230a      	movs	r3, #10
 8016c8c:	4632      	mov	r2, r6
 8016c8e:	3101      	adds	r1, #1
 8016c90:	4638      	mov	r0, r7
 8016c92:	f001 f839 	bl	8017d08 <_strtol_r>
 8016c96:	9b03      	ldr	r3, [sp, #12]
 8016c98:	9d04      	ldr	r5, [sp, #16]
 8016c9a:	1ac2      	subs	r2, r0, r3
 8016c9c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016ca0:	429d      	cmp	r5, r3
 8016ca2:	bf28      	it	cs
 8016ca4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016ca8:	490f      	ldr	r1, [pc, #60]	; (8016ce8 <_scanf_float+0x3c0>)
 8016caa:	4628      	mov	r0, r5
 8016cac:	f000 f96e 	bl	8016f8c <siprintf>
 8016cb0:	e7aa      	b.n	8016c08 <_scanf_float+0x2e0>
 8016cb2:	f015 0504 	ands.w	r5, r5, #4
 8016cb6:	d1b8      	bne.n	8016c2a <_scanf_float+0x302>
 8016cb8:	681f      	ldr	r7, [r3, #0]
 8016cba:	ee10 2a10 	vmov	r2, s0
 8016cbe:	464b      	mov	r3, r9
 8016cc0:	ee10 0a10 	vmov	r0, s0
 8016cc4:	4649      	mov	r1, r9
 8016cc6:	f7f1 fe69 	bl	800899c <__aeabi_dcmpun>
 8016cca:	b128      	cbz	r0, 8016cd8 <_scanf_float+0x3b0>
 8016ccc:	4628      	mov	r0, r5
 8016cce:	f000 f957 	bl	8016f80 <nanf>
 8016cd2:	ed87 0a00 	vstr	s0, [r7]
 8016cd6:	e7ab      	b.n	8016c30 <_scanf_float+0x308>
 8016cd8:	4640      	mov	r0, r8
 8016cda:	4649      	mov	r1, r9
 8016cdc:	f7f1 febc 	bl	8008a58 <__aeabi_d2f>
 8016ce0:	6038      	str	r0, [r7, #0]
 8016ce2:	e7a5      	b.n	8016c30 <_scanf_float+0x308>
 8016ce4:	2600      	movs	r6, #0
 8016ce6:	e666      	b.n	80169b6 <_scanf_float+0x8e>
 8016ce8:	0801b37e 	.word	0x0801b37e

08016cec <iprintf>:
 8016cec:	b40f      	push	{r0, r1, r2, r3}
 8016cee:	4b0a      	ldr	r3, [pc, #40]	; (8016d18 <iprintf+0x2c>)
 8016cf0:	b513      	push	{r0, r1, r4, lr}
 8016cf2:	681c      	ldr	r4, [r3, #0]
 8016cf4:	b124      	cbz	r4, 8016d00 <iprintf+0x14>
 8016cf6:	69a3      	ldr	r3, [r4, #24]
 8016cf8:	b913      	cbnz	r3, 8016d00 <iprintf+0x14>
 8016cfa:	4620      	mov	r0, r4
 8016cfc:	f002 f81e 	bl	8018d3c <__sinit>
 8016d00:	ab05      	add	r3, sp, #20
 8016d02:	9a04      	ldr	r2, [sp, #16]
 8016d04:	68a1      	ldr	r1, [r4, #8]
 8016d06:	9301      	str	r3, [sp, #4]
 8016d08:	4620      	mov	r0, r4
 8016d0a:	f003 fab5 	bl	801a278 <_vfiprintf_r>
 8016d0e:	b002      	add	sp, #8
 8016d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d14:	b004      	add	sp, #16
 8016d16:	4770      	bx	lr
 8016d18:	2000002c 	.word	0x2000002c

08016d1c <_puts_r>:
 8016d1c:	b570      	push	{r4, r5, r6, lr}
 8016d1e:	460e      	mov	r6, r1
 8016d20:	4605      	mov	r5, r0
 8016d22:	b118      	cbz	r0, 8016d2c <_puts_r+0x10>
 8016d24:	6983      	ldr	r3, [r0, #24]
 8016d26:	b90b      	cbnz	r3, 8016d2c <_puts_r+0x10>
 8016d28:	f002 f808 	bl	8018d3c <__sinit>
 8016d2c:	69ab      	ldr	r3, [r5, #24]
 8016d2e:	68ac      	ldr	r4, [r5, #8]
 8016d30:	b913      	cbnz	r3, 8016d38 <_puts_r+0x1c>
 8016d32:	4628      	mov	r0, r5
 8016d34:	f002 f802 	bl	8018d3c <__sinit>
 8016d38:	4b23      	ldr	r3, [pc, #140]	; (8016dc8 <_puts_r+0xac>)
 8016d3a:	429c      	cmp	r4, r3
 8016d3c:	d117      	bne.n	8016d6e <_puts_r+0x52>
 8016d3e:	686c      	ldr	r4, [r5, #4]
 8016d40:	89a3      	ldrh	r3, [r4, #12]
 8016d42:	071b      	lsls	r3, r3, #28
 8016d44:	d51d      	bpl.n	8016d82 <_puts_r+0x66>
 8016d46:	6923      	ldr	r3, [r4, #16]
 8016d48:	b1db      	cbz	r3, 8016d82 <_puts_r+0x66>
 8016d4a:	3e01      	subs	r6, #1
 8016d4c:	68a3      	ldr	r3, [r4, #8]
 8016d4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016d52:	3b01      	subs	r3, #1
 8016d54:	60a3      	str	r3, [r4, #8]
 8016d56:	b9e9      	cbnz	r1, 8016d94 <_puts_r+0x78>
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	da2e      	bge.n	8016dba <_puts_r+0x9e>
 8016d5c:	4622      	mov	r2, r4
 8016d5e:	210a      	movs	r1, #10
 8016d60:	4628      	mov	r0, r5
 8016d62:	f000 ffe3 	bl	8017d2c <__swbuf_r>
 8016d66:	3001      	adds	r0, #1
 8016d68:	d011      	beq.n	8016d8e <_puts_r+0x72>
 8016d6a:	200a      	movs	r0, #10
 8016d6c:	e011      	b.n	8016d92 <_puts_r+0x76>
 8016d6e:	4b17      	ldr	r3, [pc, #92]	; (8016dcc <_puts_r+0xb0>)
 8016d70:	429c      	cmp	r4, r3
 8016d72:	d101      	bne.n	8016d78 <_puts_r+0x5c>
 8016d74:	68ac      	ldr	r4, [r5, #8]
 8016d76:	e7e3      	b.n	8016d40 <_puts_r+0x24>
 8016d78:	4b15      	ldr	r3, [pc, #84]	; (8016dd0 <_puts_r+0xb4>)
 8016d7a:	429c      	cmp	r4, r3
 8016d7c:	bf08      	it	eq
 8016d7e:	68ec      	ldreq	r4, [r5, #12]
 8016d80:	e7de      	b.n	8016d40 <_puts_r+0x24>
 8016d82:	4621      	mov	r1, r4
 8016d84:	4628      	mov	r0, r5
 8016d86:	f001 f823 	bl	8017dd0 <__swsetup_r>
 8016d8a:	2800      	cmp	r0, #0
 8016d8c:	d0dd      	beq.n	8016d4a <_puts_r+0x2e>
 8016d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8016d92:	bd70      	pop	{r4, r5, r6, pc}
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	da04      	bge.n	8016da2 <_puts_r+0x86>
 8016d98:	69a2      	ldr	r2, [r4, #24]
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	dc06      	bgt.n	8016dac <_puts_r+0x90>
 8016d9e:	290a      	cmp	r1, #10
 8016da0:	d004      	beq.n	8016dac <_puts_r+0x90>
 8016da2:	6823      	ldr	r3, [r4, #0]
 8016da4:	1c5a      	adds	r2, r3, #1
 8016da6:	6022      	str	r2, [r4, #0]
 8016da8:	7019      	strb	r1, [r3, #0]
 8016daa:	e7cf      	b.n	8016d4c <_puts_r+0x30>
 8016dac:	4622      	mov	r2, r4
 8016dae:	4628      	mov	r0, r5
 8016db0:	f000 ffbc 	bl	8017d2c <__swbuf_r>
 8016db4:	3001      	adds	r0, #1
 8016db6:	d1c9      	bne.n	8016d4c <_puts_r+0x30>
 8016db8:	e7e9      	b.n	8016d8e <_puts_r+0x72>
 8016dba:	6823      	ldr	r3, [r4, #0]
 8016dbc:	200a      	movs	r0, #10
 8016dbe:	1c5a      	adds	r2, r3, #1
 8016dc0:	6022      	str	r2, [r4, #0]
 8016dc2:	7018      	strb	r0, [r3, #0]
 8016dc4:	e7e5      	b.n	8016d92 <_puts_r+0x76>
 8016dc6:	bf00      	nop
 8016dc8:	0801b408 	.word	0x0801b408
 8016dcc:	0801b428 	.word	0x0801b428
 8016dd0:	0801b3e8 	.word	0x0801b3e8

08016dd4 <puts>:
 8016dd4:	4b02      	ldr	r3, [pc, #8]	; (8016de0 <puts+0xc>)
 8016dd6:	4601      	mov	r1, r0
 8016dd8:	6818      	ldr	r0, [r3, #0]
 8016dda:	f7ff bf9f 	b.w	8016d1c <_puts_r>
 8016dde:	bf00      	nop
 8016de0:	2000002c 	.word	0x2000002c

08016de4 <iscanf>:
 8016de4:	b40f      	push	{r0, r1, r2, r3}
 8016de6:	4b0a      	ldr	r3, [pc, #40]	; (8016e10 <iscanf+0x2c>)
 8016de8:	b513      	push	{r0, r1, r4, lr}
 8016dea:	681c      	ldr	r4, [r3, #0]
 8016dec:	b124      	cbz	r4, 8016df8 <iscanf+0x14>
 8016dee:	69a3      	ldr	r3, [r4, #24]
 8016df0:	b913      	cbnz	r3, 8016df8 <iscanf+0x14>
 8016df2:	4620      	mov	r0, r4
 8016df4:	f001 ffa2 	bl	8018d3c <__sinit>
 8016df8:	ab05      	add	r3, sp, #20
 8016dfa:	9a04      	ldr	r2, [sp, #16]
 8016dfc:	6861      	ldr	r1, [r4, #4]
 8016dfe:	9301      	str	r3, [sp, #4]
 8016e00:	4620      	mov	r0, r4
 8016e02:	f003 fc9f 	bl	801a744 <_vfiscanf_r>
 8016e06:	b002      	add	sp, #8
 8016e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e0c:	b004      	add	sp, #16
 8016e0e:	4770      	bx	lr
 8016e10:	2000002c 	.word	0x2000002c

08016e14 <setbuf>:
 8016e14:	2900      	cmp	r1, #0
 8016e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016e1a:	bf0c      	ite	eq
 8016e1c:	2202      	moveq	r2, #2
 8016e1e:	2200      	movne	r2, #0
 8016e20:	f000 b800 	b.w	8016e24 <setvbuf>

08016e24 <setvbuf>:
 8016e24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016e28:	461d      	mov	r5, r3
 8016e2a:	4b51      	ldr	r3, [pc, #324]	; (8016f70 <setvbuf+0x14c>)
 8016e2c:	681e      	ldr	r6, [r3, #0]
 8016e2e:	4604      	mov	r4, r0
 8016e30:	460f      	mov	r7, r1
 8016e32:	4690      	mov	r8, r2
 8016e34:	b126      	cbz	r6, 8016e40 <setvbuf+0x1c>
 8016e36:	69b3      	ldr	r3, [r6, #24]
 8016e38:	b913      	cbnz	r3, 8016e40 <setvbuf+0x1c>
 8016e3a:	4630      	mov	r0, r6
 8016e3c:	f001 ff7e 	bl	8018d3c <__sinit>
 8016e40:	4b4c      	ldr	r3, [pc, #304]	; (8016f74 <setvbuf+0x150>)
 8016e42:	429c      	cmp	r4, r3
 8016e44:	d152      	bne.n	8016eec <setvbuf+0xc8>
 8016e46:	6874      	ldr	r4, [r6, #4]
 8016e48:	f1b8 0f02 	cmp.w	r8, #2
 8016e4c:	d006      	beq.n	8016e5c <setvbuf+0x38>
 8016e4e:	f1b8 0f01 	cmp.w	r8, #1
 8016e52:	f200 8089 	bhi.w	8016f68 <setvbuf+0x144>
 8016e56:	2d00      	cmp	r5, #0
 8016e58:	f2c0 8086 	blt.w	8016f68 <setvbuf+0x144>
 8016e5c:	4621      	mov	r1, r4
 8016e5e:	4630      	mov	r0, r6
 8016e60:	f001 fef0 	bl	8018c44 <_fflush_r>
 8016e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e66:	b141      	cbz	r1, 8016e7a <setvbuf+0x56>
 8016e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e6c:	4299      	cmp	r1, r3
 8016e6e:	d002      	beq.n	8016e76 <setvbuf+0x52>
 8016e70:	4630      	mov	r0, r6
 8016e72:	f002 ffdd 	bl	8019e30 <_free_r>
 8016e76:	2300      	movs	r3, #0
 8016e78:	6363      	str	r3, [r4, #52]	; 0x34
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	61a3      	str	r3, [r4, #24]
 8016e7e:	6063      	str	r3, [r4, #4]
 8016e80:	89a3      	ldrh	r3, [r4, #12]
 8016e82:	061b      	lsls	r3, r3, #24
 8016e84:	d503      	bpl.n	8016e8e <setvbuf+0x6a>
 8016e86:	6921      	ldr	r1, [r4, #16]
 8016e88:	4630      	mov	r0, r6
 8016e8a:	f002 ffd1 	bl	8019e30 <_free_r>
 8016e8e:	89a3      	ldrh	r3, [r4, #12]
 8016e90:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8016e94:	f023 0303 	bic.w	r3, r3, #3
 8016e98:	f1b8 0f02 	cmp.w	r8, #2
 8016e9c:	81a3      	strh	r3, [r4, #12]
 8016e9e:	d05d      	beq.n	8016f5c <setvbuf+0x138>
 8016ea0:	ab01      	add	r3, sp, #4
 8016ea2:	466a      	mov	r2, sp
 8016ea4:	4621      	mov	r1, r4
 8016ea6:	4630      	mov	r0, r6
 8016ea8:	f002 fb36 	bl	8019518 <__swhatbuf_r>
 8016eac:	89a3      	ldrh	r3, [r4, #12]
 8016eae:	4318      	orrs	r0, r3
 8016eb0:	81a0      	strh	r0, [r4, #12]
 8016eb2:	bb2d      	cbnz	r5, 8016f00 <setvbuf+0xdc>
 8016eb4:	9d00      	ldr	r5, [sp, #0]
 8016eb6:	4628      	mov	r0, r5
 8016eb8:	f002 fb92 	bl	80195e0 <malloc>
 8016ebc:	4607      	mov	r7, r0
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	d14e      	bne.n	8016f60 <setvbuf+0x13c>
 8016ec2:	f8dd 9000 	ldr.w	r9, [sp]
 8016ec6:	45a9      	cmp	r9, r5
 8016ec8:	d13c      	bne.n	8016f44 <setvbuf+0x120>
 8016eca:	f04f 30ff 	mov.w	r0, #4294967295
 8016ece:	89a3      	ldrh	r3, [r4, #12]
 8016ed0:	f043 0302 	orr.w	r3, r3, #2
 8016ed4:	81a3      	strh	r3, [r4, #12]
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	60a3      	str	r3, [r4, #8]
 8016eda:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016ede:	6023      	str	r3, [r4, #0]
 8016ee0:	6123      	str	r3, [r4, #16]
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	6163      	str	r3, [r4, #20]
 8016ee6:	b003      	add	sp, #12
 8016ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016eec:	4b22      	ldr	r3, [pc, #136]	; (8016f78 <setvbuf+0x154>)
 8016eee:	429c      	cmp	r4, r3
 8016ef0:	d101      	bne.n	8016ef6 <setvbuf+0xd2>
 8016ef2:	68b4      	ldr	r4, [r6, #8]
 8016ef4:	e7a8      	b.n	8016e48 <setvbuf+0x24>
 8016ef6:	4b21      	ldr	r3, [pc, #132]	; (8016f7c <setvbuf+0x158>)
 8016ef8:	429c      	cmp	r4, r3
 8016efa:	bf08      	it	eq
 8016efc:	68f4      	ldreq	r4, [r6, #12]
 8016efe:	e7a3      	b.n	8016e48 <setvbuf+0x24>
 8016f00:	2f00      	cmp	r7, #0
 8016f02:	d0d8      	beq.n	8016eb6 <setvbuf+0x92>
 8016f04:	69b3      	ldr	r3, [r6, #24]
 8016f06:	b913      	cbnz	r3, 8016f0e <setvbuf+0xea>
 8016f08:	4630      	mov	r0, r6
 8016f0a:	f001 ff17 	bl	8018d3c <__sinit>
 8016f0e:	f1b8 0f01 	cmp.w	r8, #1
 8016f12:	bf08      	it	eq
 8016f14:	89a3      	ldrheq	r3, [r4, #12]
 8016f16:	6027      	str	r7, [r4, #0]
 8016f18:	bf04      	itt	eq
 8016f1a:	f043 0301 	orreq.w	r3, r3, #1
 8016f1e:	81a3      	strheq	r3, [r4, #12]
 8016f20:	89a3      	ldrh	r3, [r4, #12]
 8016f22:	f013 0008 	ands.w	r0, r3, #8
 8016f26:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8016f2a:	d01b      	beq.n	8016f64 <setvbuf+0x140>
 8016f2c:	f013 0001 	ands.w	r0, r3, #1
 8016f30:	bf18      	it	ne
 8016f32:	426d      	negne	r5, r5
 8016f34:	f04f 0300 	mov.w	r3, #0
 8016f38:	bf1d      	ittte	ne
 8016f3a:	60a3      	strne	r3, [r4, #8]
 8016f3c:	61a5      	strne	r5, [r4, #24]
 8016f3e:	4618      	movne	r0, r3
 8016f40:	60a5      	streq	r5, [r4, #8]
 8016f42:	e7d0      	b.n	8016ee6 <setvbuf+0xc2>
 8016f44:	4648      	mov	r0, r9
 8016f46:	f002 fb4b 	bl	80195e0 <malloc>
 8016f4a:	4607      	mov	r7, r0
 8016f4c:	2800      	cmp	r0, #0
 8016f4e:	d0bc      	beq.n	8016eca <setvbuf+0xa6>
 8016f50:	89a3      	ldrh	r3, [r4, #12]
 8016f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f56:	81a3      	strh	r3, [r4, #12]
 8016f58:	464d      	mov	r5, r9
 8016f5a:	e7d3      	b.n	8016f04 <setvbuf+0xe0>
 8016f5c:	2000      	movs	r0, #0
 8016f5e:	e7b6      	b.n	8016ece <setvbuf+0xaa>
 8016f60:	46a9      	mov	r9, r5
 8016f62:	e7f5      	b.n	8016f50 <setvbuf+0x12c>
 8016f64:	60a0      	str	r0, [r4, #8]
 8016f66:	e7be      	b.n	8016ee6 <setvbuf+0xc2>
 8016f68:	f04f 30ff 	mov.w	r0, #4294967295
 8016f6c:	e7bb      	b.n	8016ee6 <setvbuf+0xc2>
 8016f6e:	bf00      	nop
 8016f70:	2000002c 	.word	0x2000002c
 8016f74:	0801b408 	.word	0x0801b408
 8016f78:	0801b428 	.word	0x0801b428
 8016f7c:	0801b3e8 	.word	0x0801b3e8

08016f80 <nanf>:
 8016f80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016f88 <nanf+0x8>
 8016f84:	4770      	bx	lr
 8016f86:	bf00      	nop
 8016f88:	7fc00000 	.word	0x7fc00000

08016f8c <siprintf>:
 8016f8c:	b40e      	push	{r1, r2, r3}
 8016f8e:	b500      	push	{lr}
 8016f90:	b09c      	sub	sp, #112	; 0x70
 8016f92:	ab1d      	add	r3, sp, #116	; 0x74
 8016f94:	9002      	str	r0, [sp, #8]
 8016f96:	9006      	str	r0, [sp, #24]
 8016f98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016f9c:	4809      	ldr	r0, [pc, #36]	; (8016fc4 <siprintf+0x38>)
 8016f9e:	9107      	str	r1, [sp, #28]
 8016fa0:	9104      	str	r1, [sp, #16]
 8016fa2:	4909      	ldr	r1, [pc, #36]	; (8016fc8 <siprintf+0x3c>)
 8016fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fa8:	9105      	str	r1, [sp, #20]
 8016faa:	6800      	ldr	r0, [r0, #0]
 8016fac:	9301      	str	r3, [sp, #4]
 8016fae:	a902      	add	r1, sp, #8
 8016fb0:	f003 f840 	bl	801a034 <_svfiprintf_r>
 8016fb4:	9b02      	ldr	r3, [sp, #8]
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	701a      	strb	r2, [r3, #0]
 8016fba:	b01c      	add	sp, #112	; 0x70
 8016fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016fc0:	b003      	add	sp, #12
 8016fc2:	4770      	bx	lr
 8016fc4:	2000002c 	.word	0x2000002c
 8016fc8:	ffff0208 	.word	0xffff0208

08016fcc <sulp>:
 8016fcc:	b570      	push	{r4, r5, r6, lr}
 8016fce:	4604      	mov	r4, r0
 8016fd0:	460d      	mov	r5, r1
 8016fd2:	ec45 4b10 	vmov	d0, r4, r5
 8016fd6:	4616      	mov	r6, r2
 8016fd8:	f002 fde8 	bl	8019bac <__ulp>
 8016fdc:	ec51 0b10 	vmov	r0, r1, d0
 8016fe0:	b17e      	cbz	r6, 8017002 <sulp+0x36>
 8016fe2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016fe6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	dd09      	ble.n	8017002 <sulp+0x36>
 8016fee:	051b      	lsls	r3, r3, #20
 8016ff0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016ff4:	2400      	movs	r4, #0
 8016ff6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016ffa:	4622      	mov	r2, r4
 8016ffc:	462b      	mov	r3, r5
 8016ffe:	f7f1 fa33 	bl	8008468 <__aeabi_dmul>
 8017002:	bd70      	pop	{r4, r5, r6, pc}
 8017004:	0000      	movs	r0, r0
	...

08017008 <_strtod_l>:
 8017008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801700c:	461f      	mov	r7, r3
 801700e:	b0a1      	sub	sp, #132	; 0x84
 8017010:	2300      	movs	r3, #0
 8017012:	4681      	mov	r9, r0
 8017014:	4638      	mov	r0, r7
 8017016:	460e      	mov	r6, r1
 8017018:	9217      	str	r2, [sp, #92]	; 0x5c
 801701a:	931c      	str	r3, [sp, #112]	; 0x70
 801701c:	f002 fa6c 	bl	80194f8 <__localeconv_l>
 8017020:	4680      	mov	r8, r0
 8017022:	6800      	ldr	r0, [r0, #0]
 8017024:	f7f1 f80c 	bl	8008040 <strlen>
 8017028:	f04f 0a00 	mov.w	sl, #0
 801702c:	4604      	mov	r4, r0
 801702e:	f04f 0b00 	mov.w	fp, #0
 8017032:	961b      	str	r6, [sp, #108]	; 0x6c
 8017034:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017036:	781a      	ldrb	r2, [r3, #0]
 8017038:	2a0d      	cmp	r2, #13
 801703a:	d832      	bhi.n	80170a2 <_strtod_l+0x9a>
 801703c:	2a09      	cmp	r2, #9
 801703e:	d236      	bcs.n	80170ae <_strtod_l+0xa6>
 8017040:	2a00      	cmp	r2, #0
 8017042:	d03e      	beq.n	80170c2 <_strtod_l+0xba>
 8017044:	2300      	movs	r3, #0
 8017046:	930d      	str	r3, [sp, #52]	; 0x34
 8017048:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801704a:	782b      	ldrb	r3, [r5, #0]
 801704c:	2b30      	cmp	r3, #48	; 0x30
 801704e:	f040 80ac 	bne.w	80171aa <_strtod_l+0x1a2>
 8017052:	786b      	ldrb	r3, [r5, #1]
 8017054:	2b58      	cmp	r3, #88	; 0x58
 8017056:	d001      	beq.n	801705c <_strtod_l+0x54>
 8017058:	2b78      	cmp	r3, #120	; 0x78
 801705a:	d167      	bne.n	801712c <_strtod_l+0x124>
 801705c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801705e:	9301      	str	r3, [sp, #4]
 8017060:	ab1c      	add	r3, sp, #112	; 0x70
 8017062:	9300      	str	r3, [sp, #0]
 8017064:	9702      	str	r7, [sp, #8]
 8017066:	ab1d      	add	r3, sp, #116	; 0x74
 8017068:	4a88      	ldr	r2, [pc, #544]	; (801728c <_strtod_l+0x284>)
 801706a:	a91b      	add	r1, sp, #108	; 0x6c
 801706c:	4648      	mov	r0, r9
 801706e:	f001 ff5a 	bl	8018f26 <__gethex>
 8017072:	f010 0407 	ands.w	r4, r0, #7
 8017076:	4606      	mov	r6, r0
 8017078:	d005      	beq.n	8017086 <_strtod_l+0x7e>
 801707a:	2c06      	cmp	r4, #6
 801707c:	d12b      	bne.n	80170d6 <_strtod_l+0xce>
 801707e:	3501      	adds	r5, #1
 8017080:	2300      	movs	r3, #0
 8017082:	951b      	str	r5, [sp, #108]	; 0x6c
 8017084:	930d      	str	r3, [sp, #52]	; 0x34
 8017086:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017088:	2b00      	cmp	r3, #0
 801708a:	f040 859a 	bne.w	8017bc2 <_strtod_l+0xbba>
 801708e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017090:	b1e3      	cbz	r3, 80170cc <_strtod_l+0xc4>
 8017092:	4652      	mov	r2, sl
 8017094:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017098:	ec43 2b10 	vmov	d0, r2, r3
 801709c:	b021      	add	sp, #132	; 0x84
 801709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a2:	2a2b      	cmp	r2, #43	; 0x2b
 80170a4:	d015      	beq.n	80170d2 <_strtod_l+0xca>
 80170a6:	2a2d      	cmp	r2, #45	; 0x2d
 80170a8:	d004      	beq.n	80170b4 <_strtod_l+0xac>
 80170aa:	2a20      	cmp	r2, #32
 80170ac:	d1ca      	bne.n	8017044 <_strtod_l+0x3c>
 80170ae:	3301      	adds	r3, #1
 80170b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80170b2:	e7bf      	b.n	8017034 <_strtod_l+0x2c>
 80170b4:	2201      	movs	r2, #1
 80170b6:	920d      	str	r2, [sp, #52]	; 0x34
 80170b8:	1c5a      	adds	r2, r3, #1
 80170ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80170bc:	785b      	ldrb	r3, [r3, #1]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d1c2      	bne.n	8017048 <_strtod_l+0x40>
 80170c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80170c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	f040 8579 	bne.w	8017bbe <_strtod_l+0xbb6>
 80170cc:	4652      	mov	r2, sl
 80170ce:	465b      	mov	r3, fp
 80170d0:	e7e2      	b.n	8017098 <_strtod_l+0x90>
 80170d2:	2200      	movs	r2, #0
 80170d4:	e7ef      	b.n	80170b6 <_strtod_l+0xae>
 80170d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80170d8:	b13a      	cbz	r2, 80170ea <_strtod_l+0xe2>
 80170da:	2135      	movs	r1, #53	; 0x35
 80170dc:	a81e      	add	r0, sp, #120	; 0x78
 80170de:	f002 fe5d 	bl	8019d9c <__copybits>
 80170e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80170e4:	4648      	mov	r0, r9
 80170e6:	f002 fac9 	bl	801967c <_Bfree>
 80170ea:	3c01      	subs	r4, #1
 80170ec:	2c04      	cmp	r4, #4
 80170ee:	d806      	bhi.n	80170fe <_strtod_l+0xf6>
 80170f0:	e8df f004 	tbb	[pc, r4]
 80170f4:	1714030a 	.word	0x1714030a
 80170f8:	0a          	.byte	0x0a
 80170f9:	00          	.byte	0x00
 80170fa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80170fe:	0730      	lsls	r0, r6, #28
 8017100:	d5c1      	bpl.n	8017086 <_strtod_l+0x7e>
 8017102:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017106:	e7be      	b.n	8017086 <_strtod_l+0x7e>
 8017108:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801710c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801710e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017112:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017116:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801711a:	e7f0      	b.n	80170fe <_strtod_l+0xf6>
 801711c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8017290 <_strtod_l+0x288>
 8017120:	e7ed      	b.n	80170fe <_strtod_l+0xf6>
 8017122:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017126:	f04f 3aff 	mov.w	sl, #4294967295
 801712a:	e7e8      	b.n	80170fe <_strtod_l+0xf6>
 801712c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801712e:	1c5a      	adds	r2, r3, #1
 8017130:	921b      	str	r2, [sp, #108]	; 0x6c
 8017132:	785b      	ldrb	r3, [r3, #1]
 8017134:	2b30      	cmp	r3, #48	; 0x30
 8017136:	d0f9      	beq.n	801712c <_strtod_l+0x124>
 8017138:	2b00      	cmp	r3, #0
 801713a:	d0a4      	beq.n	8017086 <_strtod_l+0x7e>
 801713c:	2301      	movs	r3, #1
 801713e:	2500      	movs	r5, #0
 8017140:	9306      	str	r3, [sp, #24]
 8017142:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017144:	9308      	str	r3, [sp, #32]
 8017146:	9507      	str	r5, [sp, #28]
 8017148:	9505      	str	r5, [sp, #20]
 801714a:	220a      	movs	r2, #10
 801714c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801714e:	7807      	ldrb	r7, [r0, #0]
 8017150:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8017154:	b2d9      	uxtb	r1, r3
 8017156:	2909      	cmp	r1, #9
 8017158:	d929      	bls.n	80171ae <_strtod_l+0x1a6>
 801715a:	4622      	mov	r2, r4
 801715c:	f8d8 1000 	ldr.w	r1, [r8]
 8017160:	f003 fd8b 	bl	801ac7a <strncmp>
 8017164:	2800      	cmp	r0, #0
 8017166:	d031      	beq.n	80171cc <_strtod_l+0x1c4>
 8017168:	2000      	movs	r0, #0
 801716a:	9c05      	ldr	r4, [sp, #20]
 801716c:	9004      	str	r0, [sp, #16]
 801716e:	463b      	mov	r3, r7
 8017170:	4602      	mov	r2, r0
 8017172:	2b65      	cmp	r3, #101	; 0x65
 8017174:	d001      	beq.n	801717a <_strtod_l+0x172>
 8017176:	2b45      	cmp	r3, #69	; 0x45
 8017178:	d114      	bne.n	80171a4 <_strtod_l+0x19c>
 801717a:	b924      	cbnz	r4, 8017186 <_strtod_l+0x17e>
 801717c:	b910      	cbnz	r0, 8017184 <_strtod_l+0x17c>
 801717e:	9b06      	ldr	r3, [sp, #24]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d09e      	beq.n	80170c2 <_strtod_l+0xba>
 8017184:	2400      	movs	r4, #0
 8017186:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8017188:	1c73      	adds	r3, r6, #1
 801718a:	931b      	str	r3, [sp, #108]	; 0x6c
 801718c:	7873      	ldrb	r3, [r6, #1]
 801718e:	2b2b      	cmp	r3, #43	; 0x2b
 8017190:	d078      	beq.n	8017284 <_strtod_l+0x27c>
 8017192:	2b2d      	cmp	r3, #45	; 0x2d
 8017194:	d070      	beq.n	8017278 <_strtod_l+0x270>
 8017196:	f04f 0c00 	mov.w	ip, #0
 801719a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801719e:	2f09      	cmp	r7, #9
 80171a0:	d97c      	bls.n	801729c <_strtod_l+0x294>
 80171a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80171a4:	f04f 0e00 	mov.w	lr, #0
 80171a8:	e09a      	b.n	80172e0 <_strtod_l+0x2d8>
 80171aa:	2300      	movs	r3, #0
 80171ac:	e7c7      	b.n	801713e <_strtod_l+0x136>
 80171ae:	9905      	ldr	r1, [sp, #20]
 80171b0:	2908      	cmp	r1, #8
 80171b2:	bfdd      	ittte	le
 80171b4:	9907      	ldrle	r1, [sp, #28]
 80171b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80171ba:	9307      	strle	r3, [sp, #28]
 80171bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80171c0:	9b05      	ldr	r3, [sp, #20]
 80171c2:	3001      	adds	r0, #1
 80171c4:	3301      	adds	r3, #1
 80171c6:	9305      	str	r3, [sp, #20]
 80171c8:	901b      	str	r0, [sp, #108]	; 0x6c
 80171ca:	e7bf      	b.n	801714c <_strtod_l+0x144>
 80171cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171ce:	191a      	adds	r2, r3, r4
 80171d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80171d2:	9a05      	ldr	r2, [sp, #20]
 80171d4:	5d1b      	ldrb	r3, [r3, r4]
 80171d6:	2a00      	cmp	r2, #0
 80171d8:	d037      	beq.n	801724a <_strtod_l+0x242>
 80171da:	9c05      	ldr	r4, [sp, #20]
 80171dc:	4602      	mov	r2, r0
 80171de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80171e2:	2909      	cmp	r1, #9
 80171e4:	d913      	bls.n	801720e <_strtod_l+0x206>
 80171e6:	2101      	movs	r1, #1
 80171e8:	9104      	str	r1, [sp, #16]
 80171ea:	e7c2      	b.n	8017172 <_strtod_l+0x16a>
 80171ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171ee:	1c5a      	adds	r2, r3, #1
 80171f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80171f2:	785b      	ldrb	r3, [r3, #1]
 80171f4:	3001      	adds	r0, #1
 80171f6:	2b30      	cmp	r3, #48	; 0x30
 80171f8:	d0f8      	beq.n	80171ec <_strtod_l+0x1e4>
 80171fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80171fe:	2a08      	cmp	r2, #8
 8017200:	f200 84e4 	bhi.w	8017bcc <_strtod_l+0xbc4>
 8017204:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017206:	9208      	str	r2, [sp, #32]
 8017208:	4602      	mov	r2, r0
 801720a:	2000      	movs	r0, #0
 801720c:	4604      	mov	r4, r0
 801720e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8017212:	f100 0101 	add.w	r1, r0, #1
 8017216:	d012      	beq.n	801723e <_strtod_l+0x236>
 8017218:	440a      	add	r2, r1
 801721a:	eb00 0c04 	add.w	ip, r0, r4
 801721e:	4621      	mov	r1, r4
 8017220:	270a      	movs	r7, #10
 8017222:	458c      	cmp	ip, r1
 8017224:	d113      	bne.n	801724e <_strtod_l+0x246>
 8017226:	1821      	adds	r1, r4, r0
 8017228:	2908      	cmp	r1, #8
 801722a:	f104 0401 	add.w	r4, r4, #1
 801722e:	4404      	add	r4, r0
 8017230:	dc19      	bgt.n	8017266 <_strtod_l+0x25e>
 8017232:	9b07      	ldr	r3, [sp, #28]
 8017234:	210a      	movs	r1, #10
 8017236:	fb01 e303 	mla	r3, r1, r3, lr
 801723a:	9307      	str	r3, [sp, #28]
 801723c:	2100      	movs	r1, #0
 801723e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017240:	1c58      	adds	r0, r3, #1
 8017242:	901b      	str	r0, [sp, #108]	; 0x6c
 8017244:	785b      	ldrb	r3, [r3, #1]
 8017246:	4608      	mov	r0, r1
 8017248:	e7c9      	b.n	80171de <_strtod_l+0x1d6>
 801724a:	9805      	ldr	r0, [sp, #20]
 801724c:	e7d3      	b.n	80171f6 <_strtod_l+0x1ee>
 801724e:	2908      	cmp	r1, #8
 8017250:	f101 0101 	add.w	r1, r1, #1
 8017254:	dc03      	bgt.n	801725e <_strtod_l+0x256>
 8017256:	9b07      	ldr	r3, [sp, #28]
 8017258:	437b      	muls	r3, r7
 801725a:	9307      	str	r3, [sp, #28]
 801725c:	e7e1      	b.n	8017222 <_strtod_l+0x21a>
 801725e:	2910      	cmp	r1, #16
 8017260:	bfd8      	it	le
 8017262:	437d      	mulle	r5, r7
 8017264:	e7dd      	b.n	8017222 <_strtod_l+0x21a>
 8017266:	2c10      	cmp	r4, #16
 8017268:	bfdc      	itt	le
 801726a:	210a      	movle	r1, #10
 801726c:	fb01 e505 	mlale	r5, r1, r5, lr
 8017270:	e7e4      	b.n	801723c <_strtod_l+0x234>
 8017272:	2301      	movs	r3, #1
 8017274:	9304      	str	r3, [sp, #16]
 8017276:	e781      	b.n	801717c <_strtod_l+0x174>
 8017278:	f04f 0c01 	mov.w	ip, #1
 801727c:	1cb3      	adds	r3, r6, #2
 801727e:	931b      	str	r3, [sp, #108]	; 0x6c
 8017280:	78b3      	ldrb	r3, [r6, #2]
 8017282:	e78a      	b.n	801719a <_strtod_l+0x192>
 8017284:	f04f 0c00 	mov.w	ip, #0
 8017288:	e7f8      	b.n	801727c <_strtod_l+0x274>
 801728a:	bf00      	nop
 801728c:	0801b384 	.word	0x0801b384
 8017290:	7ff00000 	.word	0x7ff00000
 8017294:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017296:	1c5f      	adds	r7, r3, #1
 8017298:	971b      	str	r7, [sp, #108]	; 0x6c
 801729a:	785b      	ldrb	r3, [r3, #1]
 801729c:	2b30      	cmp	r3, #48	; 0x30
 801729e:	d0f9      	beq.n	8017294 <_strtod_l+0x28c>
 80172a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80172a4:	2f08      	cmp	r7, #8
 80172a6:	f63f af7d 	bhi.w	80171a4 <_strtod_l+0x19c>
 80172aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80172ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80172b0:	930a      	str	r3, [sp, #40]	; 0x28
 80172b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80172b4:	1c5f      	adds	r7, r3, #1
 80172b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80172b8:	785b      	ldrb	r3, [r3, #1]
 80172ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80172be:	f1b8 0f09 	cmp.w	r8, #9
 80172c2:	d937      	bls.n	8017334 <_strtod_l+0x32c>
 80172c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80172c6:	1a7f      	subs	r7, r7, r1
 80172c8:	2f08      	cmp	r7, #8
 80172ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80172ce:	dc37      	bgt.n	8017340 <_strtod_l+0x338>
 80172d0:	45be      	cmp	lr, r7
 80172d2:	bfa8      	it	ge
 80172d4:	46be      	movge	lr, r7
 80172d6:	f1bc 0f00 	cmp.w	ip, #0
 80172da:	d001      	beq.n	80172e0 <_strtod_l+0x2d8>
 80172dc:	f1ce 0e00 	rsb	lr, lr, #0
 80172e0:	2c00      	cmp	r4, #0
 80172e2:	d151      	bne.n	8017388 <_strtod_l+0x380>
 80172e4:	2800      	cmp	r0, #0
 80172e6:	f47f aece 	bne.w	8017086 <_strtod_l+0x7e>
 80172ea:	9a06      	ldr	r2, [sp, #24]
 80172ec:	2a00      	cmp	r2, #0
 80172ee:	f47f aeca 	bne.w	8017086 <_strtod_l+0x7e>
 80172f2:	9a04      	ldr	r2, [sp, #16]
 80172f4:	2a00      	cmp	r2, #0
 80172f6:	f47f aee4 	bne.w	80170c2 <_strtod_l+0xba>
 80172fa:	2b4e      	cmp	r3, #78	; 0x4e
 80172fc:	d027      	beq.n	801734e <_strtod_l+0x346>
 80172fe:	dc21      	bgt.n	8017344 <_strtod_l+0x33c>
 8017300:	2b49      	cmp	r3, #73	; 0x49
 8017302:	f47f aede 	bne.w	80170c2 <_strtod_l+0xba>
 8017306:	49a0      	ldr	r1, [pc, #640]	; (8017588 <_strtod_l+0x580>)
 8017308:	a81b      	add	r0, sp, #108	; 0x6c
 801730a:	f002 f83f 	bl	801938c <__match>
 801730e:	2800      	cmp	r0, #0
 8017310:	f43f aed7 	beq.w	80170c2 <_strtod_l+0xba>
 8017314:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017316:	499d      	ldr	r1, [pc, #628]	; (801758c <_strtod_l+0x584>)
 8017318:	3b01      	subs	r3, #1
 801731a:	a81b      	add	r0, sp, #108	; 0x6c
 801731c:	931b      	str	r3, [sp, #108]	; 0x6c
 801731e:	f002 f835 	bl	801938c <__match>
 8017322:	b910      	cbnz	r0, 801732a <_strtod_l+0x322>
 8017324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017326:	3301      	adds	r3, #1
 8017328:	931b      	str	r3, [sp, #108]	; 0x6c
 801732a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80175a0 <_strtod_l+0x598>
 801732e:	f04f 0a00 	mov.w	sl, #0
 8017332:	e6a8      	b.n	8017086 <_strtod_l+0x7e>
 8017334:	210a      	movs	r1, #10
 8017336:	fb01 3e0e 	mla	lr, r1, lr, r3
 801733a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801733e:	e7b8      	b.n	80172b2 <_strtod_l+0x2aa>
 8017340:	46be      	mov	lr, r7
 8017342:	e7c8      	b.n	80172d6 <_strtod_l+0x2ce>
 8017344:	2b69      	cmp	r3, #105	; 0x69
 8017346:	d0de      	beq.n	8017306 <_strtod_l+0x2fe>
 8017348:	2b6e      	cmp	r3, #110	; 0x6e
 801734a:	f47f aeba 	bne.w	80170c2 <_strtod_l+0xba>
 801734e:	4990      	ldr	r1, [pc, #576]	; (8017590 <_strtod_l+0x588>)
 8017350:	a81b      	add	r0, sp, #108	; 0x6c
 8017352:	f002 f81b 	bl	801938c <__match>
 8017356:	2800      	cmp	r0, #0
 8017358:	f43f aeb3 	beq.w	80170c2 <_strtod_l+0xba>
 801735c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	2b28      	cmp	r3, #40	; 0x28
 8017362:	d10e      	bne.n	8017382 <_strtod_l+0x37a>
 8017364:	aa1e      	add	r2, sp, #120	; 0x78
 8017366:	498b      	ldr	r1, [pc, #556]	; (8017594 <_strtod_l+0x58c>)
 8017368:	a81b      	add	r0, sp, #108	; 0x6c
 801736a:	f002 f823 	bl	80193b4 <__hexnan>
 801736e:	2805      	cmp	r0, #5
 8017370:	d107      	bne.n	8017382 <_strtod_l+0x37a>
 8017372:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017374:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017378:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801737c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017380:	e681      	b.n	8017086 <_strtod_l+0x7e>
 8017382:	f8df b224 	ldr.w	fp, [pc, #548]	; 80175a8 <_strtod_l+0x5a0>
 8017386:	e7d2      	b.n	801732e <_strtod_l+0x326>
 8017388:	ebae 0302 	sub.w	r3, lr, r2
 801738c:	9306      	str	r3, [sp, #24]
 801738e:	9b05      	ldr	r3, [sp, #20]
 8017390:	9807      	ldr	r0, [sp, #28]
 8017392:	2b00      	cmp	r3, #0
 8017394:	bf08      	it	eq
 8017396:	4623      	moveq	r3, r4
 8017398:	2c10      	cmp	r4, #16
 801739a:	9305      	str	r3, [sp, #20]
 801739c:	46a0      	mov	r8, r4
 801739e:	bfa8      	it	ge
 80173a0:	f04f 0810 	movge.w	r8, #16
 80173a4:	f7f0 ffe6 	bl	8008374 <__aeabi_ui2d>
 80173a8:	2c09      	cmp	r4, #9
 80173aa:	4682      	mov	sl, r0
 80173ac:	468b      	mov	fp, r1
 80173ae:	dc13      	bgt.n	80173d8 <_strtod_l+0x3d0>
 80173b0:	9b06      	ldr	r3, [sp, #24]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	f43f ae67 	beq.w	8017086 <_strtod_l+0x7e>
 80173b8:	9b06      	ldr	r3, [sp, #24]
 80173ba:	dd7a      	ble.n	80174b2 <_strtod_l+0x4aa>
 80173bc:	2b16      	cmp	r3, #22
 80173be:	dc61      	bgt.n	8017484 <_strtod_l+0x47c>
 80173c0:	4a75      	ldr	r2, [pc, #468]	; (8017598 <_strtod_l+0x590>)
 80173c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80173c6:	e9de 0100 	ldrd	r0, r1, [lr]
 80173ca:	4652      	mov	r2, sl
 80173cc:	465b      	mov	r3, fp
 80173ce:	f7f1 f84b 	bl	8008468 <__aeabi_dmul>
 80173d2:	4682      	mov	sl, r0
 80173d4:	468b      	mov	fp, r1
 80173d6:	e656      	b.n	8017086 <_strtod_l+0x7e>
 80173d8:	4b6f      	ldr	r3, [pc, #444]	; (8017598 <_strtod_l+0x590>)
 80173da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80173de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80173e2:	f7f1 f841 	bl	8008468 <__aeabi_dmul>
 80173e6:	4606      	mov	r6, r0
 80173e8:	4628      	mov	r0, r5
 80173ea:	460f      	mov	r7, r1
 80173ec:	f7f0 ffc2 	bl	8008374 <__aeabi_ui2d>
 80173f0:	4602      	mov	r2, r0
 80173f2:	460b      	mov	r3, r1
 80173f4:	4630      	mov	r0, r6
 80173f6:	4639      	mov	r1, r7
 80173f8:	f7f0 fe80 	bl	80080fc <__adddf3>
 80173fc:	2c0f      	cmp	r4, #15
 80173fe:	4682      	mov	sl, r0
 8017400:	468b      	mov	fp, r1
 8017402:	ddd5      	ble.n	80173b0 <_strtod_l+0x3a8>
 8017404:	9b06      	ldr	r3, [sp, #24]
 8017406:	eba4 0808 	sub.w	r8, r4, r8
 801740a:	4498      	add	r8, r3
 801740c:	f1b8 0f00 	cmp.w	r8, #0
 8017410:	f340 8096 	ble.w	8017540 <_strtod_l+0x538>
 8017414:	f018 030f 	ands.w	r3, r8, #15
 8017418:	d00a      	beq.n	8017430 <_strtod_l+0x428>
 801741a:	495f      	ldr	r1, [pc, #380]	; (8017598 <_strtod_l+0x590>)
 801741c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017420:	4652      	mov	r2, sl
 8017422:	465b      	mov	r3, fp
 8017424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017428:	f7f1 f81e 	bl	8008468 <__aeabi_dmul>
 801742c:	4682      	mov	sl, r0
 801742e:	468b      	mov	fp, r1
 8017430:	f038 080f 	bics.w	r8, r8, #15
 8017434:	d073      	beq.n	801751e <_strtod_l+0x516>
 8017436:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801743a:	dd47      	ble.n	80174cc <_strtod_l+0x4c4>
 801743c:	2400      	movs	r4, #0
 801743e:	46a0      	mov	r8, r4
 8017440:	9407      	str	r4, [sp, #28]
 8017442:	9405      	str	r4, [sp, #20]
 8017444:	2322      	movs	r3, #34	; 0x22
 8017446:	f8df b158 	ldr.w	fp, [pc, #344]	; 80175a0 <_strtod_l+0x598>
 801744a:	f8c9 3000 	str.w	r3, [r9]
 801744e:	f04f 0a00 	mov.w	sl, #0
 8017452:	9b07      	ldr	r3, [sp, #28]
 8017454:	2b00      	cmp	r3, #0
 8017456:	f43f ae16 	beq.w	8017086 <_strtod_l+0x7e>
 801745a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801745c:	4648      	mov	r0, r9
 801745e:	f002 f90d 	bl	801967c <_Bfree>
 8017462:	9905      	ldr	r1, [sp, #20]
 8017464:	4648      	mov	r0, r9
 8017466:	f002 f909 	bl	801967c <_Bfree>
 801746a:	4641      	mov	r1, r8
 801746c:	4648      	mov	r0, r9
 801746e:	f002 f905 	bl	801967c <_Bfree>
 8017472:	9907      	ldr	r1, [sp, #28]
 8017474:	4648      	mov	r0, r9
 8017476:	f002 f901 	bl	801967c <_Bfree>
 801747a:	4621      	mov	r1, r4
 801747c:	4648      	mov	r0, r9
 801747e:	f002 f8fd 	bl	801967c <_Bfree>
 8017482:	e600      	b.n	8017086 <_strtod_l+0x7e>
 8017484:	9a06      	ldr	r2, [sp, #24]
 8017486:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801748a:	4293      	cmp	r3, r2
 801748c:	dbba      	blt.n	8017404 <_strtod_l+0x3fc>
 801748e:	4d42      	ldr	r5, [pc, #264]	; (8017598 <_strtod_l+0x590>)
 8017490:	f1c4 040f 	rsb	r4, r4, #15
 8017494:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017498:	4652      	mov	r2, sl
 801749a:	465b      	mov	r3, fp
 801749c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80174a0:	f7f0 ffe2 	bl	8008468 <__aeabi_dmul>
 80174a4:	9b06      	ldr	r3, [sp, #24]
 80174a6:	1b1c      	subs	r4, r3, r4
 80174a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80174ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80174b0:	e78d      	b.n	80173ce <_strtod_l+0x3c6>
 80174b2:	f113 0f16 	cmn.w	r3, #22
 80174b6:	dba5      	blt.n	8017404 <_strtod_l+0x3fc>
 80174b8:	4a37      	ldr	r2, [pc, #220]	; (8017598 <_strtod_l+0x590>)
 80174ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80174be:	e9d2 2300 	ldrd	r2, r3, [r2]
 80174c2:	4650      	mov	r0, sl
 80174c4:	4659      	mov	r1, fp
 80174c6:	f7f1 f8f9 	bl	80086bc <__aeabi_ddiv>
 80174ca:	e782      	b.n	80173d2 <_strtod_l+0x3ca>
 80174cc:	2300      	movs	r3, #0
 80174ce:	4e33      	ldr	r6, [pc, #204]	; (801759c <_strtod_l+0x594>)
 80174d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80174d4:	4650      	mov	r0, sl
 80174d6:	4659      	mov	r1, fp
 80174d8:	461d      	mov	r5, r3
 80174da:	f1b8 0f01 	cmp.w	r8, #1
 80174de:	dc21      	bgt.n	8017524 <_strtod_l+0x51c>
 80174e0:	b10b      	cbz	r3, 80174e6 <_strtod_l+0x4de>
 80174e2:	4682      	mov	sl, r0
 80174e4:	468b      	mov	fp, r1
 80174e6:	4b2d      	ldr	r3, [pc, #180]	; (801759c <_strtod_l+0x594>)
 80174e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80174ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80174f0:	4652      	mov	r2, sl
 80174f2:	465b      	mov	r3, fp
 80174f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80174f8:	f7f0 ffb6 	bl	8008468 <__aeabi_dmul>
 80174fc:	4b28      	ldr	r3, [pc, #160]	; (80175a0 <_strtod_l+0x598>)
 80174fe:	460a      	mov	r2, r1
 8017500:	400b      	ands	r3, r1
 8017502:	4928      	ldr	r1, [pc, #160]	; (80175a4 <_strtod_l+0x59c>)
 8017504:	428b      	cmp	r3, r1
 8017506:	4682      	mov	sl, r0
 8017508:	d898      	bhi.n	801743c <_strtod_l+0x434>
 801750a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801750e:	428b      	cmp	r3, r1
 8017510:	bf86      	itte	hi
 8017512:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80175ac <_strtod_l+0x5a4>
 8017516:	f04f 3aff 	movhi.w	sl, #4294967295
 801751a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801751e:	2300      	movs	r3, #0
 8017520:	9304      	str	r3, [sp, #16]
 8017522:	e077      	b.n	8017614 <_strtod_l+0x60c>
 8017524:	f018 0f01 	tst.w	r8, #1
 8017528:	d006      	beq.n	8017538 <_strtod_l+0x530>
 801752a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017532:	f7f0 ff99 	bl	8008468 <__aeabi_dmul>
 8017536:	2301      	movs	r3, #1
 8017538:	3501      	adds	r5, #1
 801753a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801753e:	e7cc      	b.n	80174da <_strtod_l+0x4d2>
 8017540:	d0ed      	beq.n	801751e <_strtod_l+0x516>
 8017542:	f1c8 0800 	rsb	r8, r8, #0
 8017546:	f018 020f 	ands.w	r2, r8, #15
 801754a:	d00a      	beq.n	8017562 <_strtod_l+0x55a>
 801754c:	4b12      	ldr	r3, [pc, #72]	; (8017598 <_strtod_l+0x590>)
 801754e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017552:	4650      	mov	r0, sl
 8017554:	4659      	mov	r1, fp
 8017556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801755a:	f7f1 f8af 	bl	80086bc <__aeabi_ddiv>
 801755e:	4682      	mov	sl, r0
 8017560:	468b      	mov	fp, r1
 8017562:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017566:	d0da      	beq.n	801751e <_strtod_l+0x516>
 8017568:	f1b8 0f1f 	cmp.w	r8, #31
 801756c:	dd20      	ble.n	80175b0 <_strtod_l+0x5a8>
 801756e:	2400      	movs	r4, #0
 8017570:	46a0      	mov	r8, r4
 8017572:	9407      	str	r4, [sp, #28]
 8017574:	9405      	str	r4, [sp, #20]
 8017576:	2322      	movs	r3, #34	; 0x22
 8017578:	f04f 0a00 	mov.w	sl, #0
 801757c:	f04f 0b00 	mov.w	fp, #0
 8017580:	f8c9 3000 	str.w	r3, [r9]
 8017584:	e765      	b.n	8017452 <_strtod_l+0x44a>
 8017586:	bf00      	nop
 8017588:	0801b351 	.word	0x0801b351
 801758c:	0801b3db 	.word	0x0801b3db
 8017590:	0801b359 	.word	0x0801b359
 8017594:	0801b398 	.word	0x0801b398
 8017598:	0801b480 	.word	0x0801b480
 801759c:	0801b458 	.word	0x0801b458
 80175a0:	7ff00000 	.word	0x7ff00000
 80175a4:	7ca00000 	.word	0x7ca00000
 80175a8:	fff80000 	.word	0xfff80000
 80175ac:	7fefffff 	.word	0x7fefffff
 80175b0:	f018 0310 	ands.w	r3, r8, #16
 80175b4:	bf18      	it	ne
 80175b6:	236a      	movne	r3, #106	; 0x6a
 80175b8:	4da0      	ldr	r5, [pc, #640]	; (801783c <_strtod_l+0x834>)
 80175ba:	9304      	str	r3, [sp, #16]
 80175bc:	4650      	mov	r0, sl
 80175be:	4659      	mov	r1, fp
 80175c0:	2300      	movs	r3, #0
 80175c2:	f1b8 0f00 	cmp.w	r8, #0
 80175c6:	f300 810a 	bgt.w	80177de <_strtod_l+0x7d6>
 80175ca:	b10b      	cbz	r3, 80175d0 <_strtod_l+0x5c8>
 80175cc:	4682      	mov	sl, r0
 80175ce:	468b      	mov	fp, r1
 80175d0:	9b04      	ldr	r3, [sp, #16]
 80175d2:	b1bb      	cbz	r3, 8017604 <_strtod_l+0x5fc>
 80175d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80175d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80175dc:	2b00      	cmp	r3, #0
 80175de:	4659      	mov	r1, fp
 80175e0:	dd10      	ble.n	8017604 <_strtod_l+0x5fc>
 80175e2:	2b1f      	cmp	r3, #31
 80175e4:	f340 8107 	ble.w	80177f6 <_strtod_l+0x7ee>
 80175e8:	2b34      	cmp	r3, #52	; 0x34
 80175ea:	bfde      	ittt	le
 80175ec:	3b20      	suble	r3, #32
 80175ee:	f04f 32ff 	movle.w	r2, #4294967295
 80175f2:	fa02 f303 	lslle.w	r3, r2, r3
 80175f6:	f04f 0a00 	mov.w	sl, #0
 80175fa:	bfcc      	ite	gt
 80175fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017600:	ea03 0b01 	andle.w	fp, r3, r1
 8017604:	2200      	movs	r2, #0
 8017606:	2300      	movs	r3, #0
 8017608:	4650      	mov	r0, sl
 801760a:	4659      	mov	r1, fp
 801760c:	f7f1 f994 	bl	8008938 <__aeabi_dcmpeq>
 8017610:	2800      	cmp	r0, #0
 8017612:	d1ac      	bne.n	801756e <_strtod_l+0x566>
 8017614:	9b07      	ldr	r3, [sp, #28]
 8017616:	9300      	str	r3, [sp, #0]
 8017618:	9a05      	ldr	r2, [sp, #20]
 801761a:	9908      	ldr	r1, [sp, #32]
 801761c:	4623      	mov	r3, r4
 801761e:	4648      	mov	r0, r9
 8017620:	f002 f87e 	bl	8019720 <__s2b>
 8017624:	9007      	str	r0, [sp, #28]
 8017626:	2800      	cmp	r0, #0
 8017628:	f43f af08 	beq.w	801743c <_strtod_l+0x434>
 801762c:	9a06      	ldr	r2, [sp, #24]
 801762e:	9b06      	ldr	r3, [sp, #24]
 8017630:	2a00      	cmp	r2, #0
 8017632:	f1c3 0300 	rsb	r3, r3, #0
 8017636:	bfa8      	it	ge
 8017638:	2300      	movge	r3, #0
 801763a:	930e      	str	r3, [sp, #56]	; 0x38
 801763c:	2400      	movs	r4, #0
 801763e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017642:	9316      	str	r3, [sp, #88]	; 0x58
 8017644:	46a0      	mov	r8, r4
 8017646:	9b07      	ldr	r3, [sp, #28]
 8017648:	4648      	mov	r0, r9
 801764a:	6859      	ldr	r1, [r3, #4]
 801764c:	f001 ffe2 	bl	8019614 <_Balloc>
 8017650:	9005      	str	r0, [sp, #20]
 8017652:	2800      	cmp	r0, #0
 8017654:	f43f aef6 	beq.w	8017444 <_strtod_l+0x43c>
 8017658:	9b07      	ldr	r3, [sp, #28]
 801765a:	691a      	ldr	r2, [r3, #16]
 801765c:	3202      	adds	r2, #2
 801765e:	f103 010c 	add.w	r1, r3, #12
 8017662:	0092      	lsls	r2, r2, #2
 8017664:	300c      	adds	r0, #12
 8017666:	f7fe fcef 	bl	8016048 <memcpy>
 801766a:	aa1e      	add	r2, sp, #120	; 0x78
 801766c:	a91d      	add	r1, sp, #116	; 0x74
 801766e:	ec4b ab10 	vmov	d0, sl, fp
 8017672:	4648      	mov	r0, r9
 8017674:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017678:	f002 fb0e 	bl	8019c98 <__d2b>
 801767c:	901c      	str	r0, [sp, #112]	; 0x70
 801767e:	2800      	cmp	r0, #0
 8017680:	f43f aee0 	beq.w	8017444 <_strtod_l+0x43c>
 8017684:	2101      	movs	r1, #1
 8017686:	4648      	mov	r0, r9
 8017688:	f002 f8d6 	bl	8019838 <__i2b>
 801768c:	4680      	mov	r8, r0
 801768e:	2800      	cmp	r0, #0
 8017690:	f43f aed8 	beq.w	8017444 <_strtod_l+0x43c>
 8017694:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017696:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017698:	2e00      	cmp	r6, #0
 801769a:	bfab      	itete	ge
 801769c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801769e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80176a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80176a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80176a4:	bfac      	ite	ge
 80176a6:	18f7      	addge	r7, r6, r3
 80176a8:	1b9d      	sublt	r5, r3, r6
 80176aa:	9b04      	ldr	r3, [sp, #16]
 80176ac:	1af6      	subs	r6, r6, r3
 80176ae:	4416      	add	r6, r2
 80176b0:	4b63      	ldr	r3, [pc, #396]	; (8017840 <_strtod_l+0x838>)
 80176b2:	3e01      	subs	r6, #1
 80176b4:	429e      	cmp	r6, r3
 80176b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80176ba:	f280 80af 	bge.w	801781c <_strtod_l+0x814>
 80176be:	1b9b      	subs	r3, r3, r6
 80176c0:	2b1f      	cmp	r3, #31
 80176c2:	eba2 0203 	sub.w	r2, r2, r3
 80176c6:	f04f 0101 	mov.w	r1, #1
 80176ca:	f300 809b 	bgt.w	8017804 <_strtod_l+0x7fc>
 80176ce:	fa01 f303 	lsl.w	r3, r1, r3
 80176d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80176d4:	2300      	movs	r3, #0
 80176d6:	930a      	str	r3, [sp, #40]	; 0x28
 80176d8:	18be      	adds	r6, r7, r2
 80176da:	9b04      	ldr	r3, [sp, #16]
 80176dc:	42b7      	cmp	r7, r6
 80176de:	4415      	add	r5, r2
 80176e0:	441d      	add	r5, r3
 80176e2:	463b      	mov	r3, r7
 80176e4:	bfa8      	it	ge
 80176e6:	4633      	movge	r3, r6
 80176e8:	42ab      	cmp	r3, r5
 80176ea:	bfa8      	it	ge
 80176ec:	462b      	movge	r3, r5
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	bfc2      	ittt	gt
 80176f2:	1af6      	subgt	r6, r6, r3
 80176f4:	1aed      	subgt	r5, r5, r3
 80176f6:	1aff      	subgt	r7, r7, r3
 80176f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176fa:	b1bb      	cbz	r3, 801772c <_strtod_l+0x724>
 80176fc:	4641      	mov	r1, r8
 80176fe:	461a      	mov	r2, r3
 8017700:	4648      	mov	r0, r9
 8017702:	f002 f939 	bl	8019978 <__pow5mult>
 8017706:	4680      	mov	r8, r0
 8017708:	2800      	cmp	r0, #0
 801770a:	f43f ae9b 	beq.w	8017444 <_strtod_l+0x43c>
 801770e:	4601      	mov	r1, r0
 8017710:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017712:	4648      	mov	r0, r9
 8017714:	f002 f899 	bl	801984a <__multiply>
 8017718:	900c      	str	r0, [sp, #48]	; 0x30
 801771a:	2800      	cmp	r0, #0
 801771c:	f43f ae92 	beq.w	8017444 <_strtod_l+0x43c>
 8017720:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017722:	4648      	mov	r0, r9
 8017724:	f001 ffaa 	bl	801967c <_Bfree>
 8017728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801772a:	931c      	str	r3, [sp, #112]	; 0x70
 801772c:	2e00      	cmp	r6, #0
 801772e:	dc7a      	bgt.n	8017826 <_strtod_l+0x81e>
 8017730:	9b06      	ldr	r3, [sp, #24]
 8017732:	2b00      	cmp	r3, #0
 8017734:	dd08      	ble.n	8017748 <_strtod_l+0x740>
 8017736:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017738:	9905      	ldr	r1, [sp, #20]
 801773a:	4648      	mov	r0, r9
 801773c:	f002 f91c 	bl	8019978 <__pow5mult>
 8017740:	9005      	str	r0, [sp, #20]
 8017742:	2800      	cmp	r0, #0
 8017744:	f43f ae7e 	beq.w	8017444 <_strtod_l+0x43c>
 8017748:	2d00      	cmp	r5, #0
 801774a:	dd08      	ble.n	801775e <_strtod_l+0x756>
 801774c:	462a      	mov	r2, r5
 801774e:	9905      	ldr	r1, [sp, #20]
 8017750:	4648      	mov	r0, r9
 8017752:	f002 f95f 	bl	8019a14 <__lshift>
 8017756:	9005      	str	r0, [sp, #20]
 8017758:	2800      	cmp	r0, #0
 801775a:	f43f ae73 	beq.w	8017444 <_strtod_l+0x43c>
 801775e:	2f00      	cmp	r7, #0
 8017760:	dd08      	ble.n	8017774 <_strtod_l+0x76c>
 8017762:	4641      	mov	r1, r8
 8017764:	463a      	mov	r2, r7
 8017766:	4648      	mov	r0, r9
 8017768:	f002 f954 	bl	8019a14 <__lshift>
 801776c:	4680      	mov	r8, r0
 801776e:	2800      	cmp	r0, #0
 8017770:	f43f ae68 	beq.w	8017444 <_strtod_l+0x43c>
 8017774:	9a05      	ldr	r2, [sp, #20]
 8017776:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017778:	4648      	mov	r0, r9
 801777a:	f002 f9b9 	bl	8019af0 <__mdiff>
 801777e:	4604      	mov	r4, r0
 8017780:	2800      	cmp	r0, #0
 8017782:	f43f ae5f 	beq.w	8017444 <_strtod_l+0x43c>
 8017786:	68c3      	ldr	r3, [r0, #12]
 8017788:	930c      	str	r3, [sp, #48]	; 0x30
 801778a:	2300      	movs	r3, #0
 801778c:	60c3      	str	r3, [r0, #12]
 801778e:	4641      	mov	r1, r8
 8017790:	f002 f994 	bl	8019abc <__mcmp>
 8017794:	2800      	cmp	r0, #0
 8017796:	da55      	bge.n	8017844 <_strtod_l+0x83c>
 8017798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801779a:	b9e3      	cbnz	r3, 80177d6 <_strtod_l+0x7ce>
 801779c:	f1ba 0f00 	cmp.w	sl, #0
 80177a0:	d119      	bne.n	80177d6 <_strtod_l+0x7ce>
 80177a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80177a6:	b9b3      	cbnz	r3, 80177d6 <_strtod_l+0x7ce>
 80177a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80177ac:	0d1b      	lsrs	r3, r3, #20
 80177ae:	051b      	lsls	r3, r3, #20
 80177b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80177b4:	d90f      	bls.n	80177d6 <_strtod_l+0x7ce>
 80177b6:	6963      	ldr	r3, [r4, #20]
 80177b8:	b913      	cbnz	r3, 80177c0 <_strtod_l+0x7b8>
 80177ba:	6923      	ldr	r3, [r4, #16]
 80177bc:	2b01      	cmp	r3, #1
 80177be:	dd0a      	ble.n	80177d6 <_strtod_l+0x7ce>
 80177c0:	4621      	mov	r1, r4
 80177c2:	2201      	movs	r2, #1
 80177c4:	4648      	mov	r0, r9
 80177c6:	f002 f925 	bl	8019a14 <__lshift>
 80177ca:	4641      	mov	r1, r8
 80177cc:	4604      	mov	r4, r0
 80177ce:	f002 f975 	bl	8019abc <__mcmp>
 80177d2:	2800      	cmp	r0, #0
 80177d4:	dc67      	bgt.n	80178a6 <_strtod_l+0x89e>
 80177d6:	9b04      	ldr	r3, [sp, #16]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d171      	bne.n	80178c0 <_strtod_l+0x8b8>
 80177dc:	e63d      	b.n	801745a <_strtod_l+0x452>
 80177de:	f018 0f01 	tst.w	r8, #1
 80177e2:	d004      	beq.n	80177ee <_strtod_l+0x7e6>
 80177e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80177e8:	f7f0 fe3e 	bl	8008468 <__aeabi_dmul>
 80177ec:	2301      	movs	r3, #1
 80177ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80177f2:	3508      	adds	r5, #8
 80177f4:	e6e5      	b.n	80175c2 <_strtod_l+0x5ba>
 80177f6:	f04f 32ff 	mov.w	r2, #4294967295
 80177fa:	fa02 f303 	lsl.w	r3, r2, r3
 80177fe:	ea03 0a0a 	and.w	sl, r3, sl
 8017802:	e6ff      	b.n	8017604 <_strtod_l+0x5fc>
 8017804:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017808:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801780c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017810:	36e2      	adds	r6, #226	; 0xe2
 8017812:	fa01 f306 	lsl.w	r3, r1, r6
 8017816:	930a      	str	r3, [sp, #40]	; 0x28
 8017818:	910f      	str	r1, [sp, #60]	; 0x3c
 801781a:	e75d      	b.n	80176d8 <_strtod_l+0x6d0>
 801781c:	2300      	movs	r3, #0
 801781e:	930a      	str	r3, [sp, #40]	; 0x28
 8017820:	2301      	movs	r3, #1
 8017822:	930f      	str	r3, [sp, #60]	; 0x3c
 8017824:	e758      	b.n	80176d8 <_strtod_l+0x6d0>
 8017826:	4632      	mov	r2, r6
 8017828:	991c      	ldr	r1, [sp, #112]	; 0x70
 801782a:	4648      	mov	r0, r9
 801782c:	f002 f8f2 	bl	8019a14 <__lshift>
 8017830:	901c      	str	r0, [sp, #112]	; 0x70
 8017832:	2800      	cmp	r0, #0
 8017834:	f47f af7c 	bne.w	8017730 <_strtod_l+0x728>
 8017838:	e604      	b.n	8017444 <_strtod_l+0x43c>
 801783a:	bf00      	nop
 801783c:	0801b3b0 	.word	0x0801b3b0
 8017840:	fffffc02 	.word	0xfffffc02
 8017844:	465d      	mov	r5, fp
 8017846:	f040 8086 	bne.w	8017956 <_strtod_l+0x94e>
 801784a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801784c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017850:	b32a      	cbz	r2, 801789e <_strtod_l+0x896>
 8017852:	4aaf      	ldr	r2, [pc, #700]	; (8017b10 <_strtod_l+0xb08>)
 8017854:	4293      	cmp	r3, r2
 8017856:	d153      	bne.n	8017900 <_strtod_l+0x8f8>
 8017858:	9b04      	ldr	r3, [sp, #16]
 801785a:	4650      	mov	r0, sl
 801785c:	b1d3      	cbz	r3, 8017894 <_strtod_l+0x88c>
 801785e:	4aad      	ldr	r2, [pc, #692]	; (8017b14 <_strtod_l+0xb0c>)
 8017860:	402a      	ands	r2, r5
 8017862:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017866:	f04f 31ff 	mov.w	r1, #4294967295
 801786a:	d816      	bhi.n	801789a <_strtod_l+0x892>
 801786c:	0d12      	lsrs	r2, r2, #20
 801786e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017872:	fa01 f303 	lsl.w	r3, r1, r3
 8017876:	4298      	cmp	r0, r3
 8017878:	d142      	bne.n	8017900 <_strtod_l+0x8f8>
 801787a:	4ba7      	ldr	r3, [pc, #668]	; (8017b18 <_strtod_l+0xb10>)
 801787c:	429d      	cmp	r5, r3
 801787e:	d102      	bne.n	8017886 <_strtod_l+0x87e>
 8017880:	3001      	adds	r0, #1
 8017882:	f43f addf 	beq.w	8017444 <_strtod_l+0x43c>
 8017886:	4ba3      	ldr	r3, [pc, #652]	; (8017b14 <_strtod_l+0xb0c>)
 8017888:	402b      	ands	r3, r5
 801788a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801788e:	f04f 0a00 	mov.w	sl, #0
 8017892:	e7a0      	b.n	80177d6 <_strtod_l+0x7ce>
 8017894:	f04f 33ff 	mov.w	r3, #4294967295
 8017898:	e7ed      	b.n	8017876 <_strtod_l+0x86e>
 801789a:	460b      	mov	r3, r1
 801789c:	e7eb      	b.n	8017876 <_strtod_l+0x86e>
 801789e:	bb7b      	cbnz	r3, 8017900 <_strtod_l+0x8f8>
 80178a0:	f1ba 0f00 	cmp.w	sl, #0
 80178a4:	d12c      	bne.n	8017900 <_strtod_l+0x8f8>
 80178a6:	9904      	ldr	r1, [sp, #16]
 80178a8:	4a9a      	ldr	r2, [pc, #616]	; (8017b14 <_strtod_l+0xb0c>)
 80178aa:	465b      	mov	r3, fp
 80178ac:	b1f1      	cbz	r1, 80178ec <_strtod_l+0x8e4>
 80178ae:	ea02 010b 	and.w	r1, r2, fp
 80178b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80178b6:	dc19      	bgt.n	80178ec <_strtod_l+0x8e4>
 80178b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80178bc:	f77f ae5b 	ble.w	8017576 <_strtod_l+0x56e>
 80178c0:	4a96      	ldr	r2, [pc, #600]	; (8017b1c <_strtod_l+0xb14>)
 80178c2:	2300      	movs	r3, #0
 80178c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80178c8:	4650      	mov	r0, sl
 80178ca:	4659      	mov	r1, fp
 80178cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80178d0:	f7f0 fdca 	bl	8008468 <__aeabi_dmul>
 80178d4:	4682      	mov	sl, r0
 80178d6:	468b      	mov	fp, r1
 80178d8:	2900      	cmp	r1, #0
 80178da:	f47f adbe 	bne.w	801745a <_strtod_l+0x452>
 80178de:	2800      	cmp	r0, #0
 80178e0:	f47f adbb 	bne.w	801745a <_strtod_l+0x452>
 80178e4:	2322      	movs	r3, #34	; 0x22
 80178e6:	f8c9 3000 	str.w	r3, [r9]
 80178ea:	e5b6      	b.n	801745a <_strtod_l+0x452>
 80178ec:	4013      	ands	r3, r2
 80178ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80178f2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80178f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80178fa:	f04f 3aff 	mov.w	sl, #4294967295
 80178fe:	e76a      	b.n	80177d6 <_strtod_l+0x7ce>
 8017900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017902:	b193      	cbz	r3, 801792a <_strtod_l+0x922>
 8017904:	422b      	tst	r3, r5
 8017906:	f43f af66 	beq.w	80177d6 <_strtod_l+0x7ce>
 801790a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801790c:	9a04      	ldr	r2, [sp, #16]
 801790e:	4650      	mov	r0, sl
 8017910:	4659      	mov	r1, fp
 8017912:	b173      	cbz	r3, 8017932 <_strtod_l+0x92a>
 8017914:	f7ff fb5a 	bl	8016fcc <sulp>
 8017918:	4602      	mov	r2, r0
 801791a:	460b      	mov	r3, r1
 801791c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017920:	f7f0 fbec 	bl	80080fc <__adddf3>
 8017924:	4682      	mov	sl, r0
 8017926:	468b      	mov	fp, r1
 8017928:	e755      	b.n	80177d6 <_strtod_l+0x7ce>
 801792a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801792c:	ea13 0f0a 	tst.w	r3, sl
 8017930:	e7e9      	b.n	8017906 <_strtod_l+0x8fe>
 8017932:	f7ff fb4b 	bl	8016fcc <sulp>
 8017936:	4602      	mov	r2, r0
 8017938:	460b      	mov	r3, r1
 801793a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801793e:	f7f0 fbdb 	bl	80080f8 <__aeabi_dsub>
 8017942:	2200      	movs	r2, #0
 8017944:	2300      	movs	r3, #0
 8017946:	4682      	mov	sl, r0
 8017948:	468b      	mov	fp, r1
 801794a:	f7f0 fff5 	bl	8008938 <__aeabi_dcmpeq>
 801794e:	2800      	cmp	r0, #0
 8017950:	f47f ae11 	bne.w	8017576 <_strtod_l+0x56e>
 8017954:	e73f      	b.n	80177d6 <_strtod_l+0x7ce>
 8017956:	4641      	mov	r1, r8
 8017958:	4620      	mov	r0, r4
 801795a:	f002 f9ec 	bl	8019d36 <__ratio>
 801795e:	ec57 6b10 	vmov	r6, r7, d0
 8017962:	2200      	movs	r2, #0
 8017964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017968:	ee10 0a10 	vmov	r0, s0
 801796c:	4639      	mov	r1, r7
 801796e:	f7f0 fff7 	bl	8008960 <__aeabi_dcmple>
 8017972:	2800      	cmp	r0, #0
 8017974:	d077      	beq.n	8017a66 <_strtod_l+0xa5e>
 8017976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017978:	2b00      	cmp	r3, #0
 801797a:	d04a      	beq.n	8017a12 <_strtod_l+0xa0a>
 801797c:	4b68      	ldr	r3, [pc, #416]	; (8017b20 <_strtod_l+0xb18>)
 801797e:	2200      	movs	r2, #0
 8017980:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017984:	4f66      	ldr	r7, [pc, #408]	; (8017b20 <_strtod_l+0xb18>)
 8017986:	2600      	movs	r6, #0
 8017988:	4b62      	ldr	r3, [pc, #392]	; (8017b14 <_strtod_l+0xb0c>)
 801798a:	402b      	ands	r3, r5
 801798c:	930f      	str	r3, [sp, #60]	; 0x3c
 801798e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017990:	4b64      	ldr	r3, [pc, #400]	; (8017b24 <_strtod_l+0xb1c>)
 8017992:	429a      	cmp	r2, r3
 8017994:	f040 80ce 	bne.w	8017b34 <_strtod_l+0xb2c>
 8017998:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801799c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80179a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80179a4:	ec4b ab10 	vmov	d0, sl, fp
 80179a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80179ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80179b0:	f002 f8fc 	bl	8019bac <__ulp>
 80179b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80179b8:	ec53 2b10 	vmov	r2, r3, d0
 80179bc:	f7f0 fd54 	bl	8008468 <__aeabi_dmul>
 80179c0:	4652      	mov	r2, sl
 80179c2:	465b      	mov	r3, fp
 80179c4:	f7f0 fb9a 	bl	80080fc <__adddf3>
 80179c8:	460b      	mov	r3, r1
 80179ca:	4952      	ldr	r1, [pc, #328]	; (8017b14 <_strtod_l+0xb0c>)
 80179cc:	4a56      	ldr	r2, [pc, #344]	; (8017b28 <_strtod_l+0xb20>)
 80179ce:	4019      	ands	r1, r3
 80179d0:	4291      	cmp	r1, r2
 80179d2:	4682      	mov	sl, r0
 80179d4:	d95b      	bls.n	8017a8e <_strtod_l+0xa86>
 80179d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80179dc:	4293      	cmp	r3, r2
 80179de:	d103      	bne.n	80179e8 <_strtod_l+0x9e0>
 80179e0:	9b08      	ldr	r3, [sp, #32]
 80179e2:	3301      	adds	r3, #1
 80179e4:	f43f ad2e 	beq.w	8017444 <_strtod_l+0x43c>
 80179e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017b18 <_strtod_l+0xb10>
 80179ec:	f04f 3aff 	mov.w	sl, #4294967295
 80179f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80179f2:	4648      	mov	r0, r9
 80179f4:	f001 fe42 	bl	801967c <_Bfree>
 80179f8:	9905      	ldr	r1, [sp, #20]
 80179fa:	4648      	mov	r0, r9
 80179fc:	f001 fe3e 	bl	801967c <_Bfree>
 8017a00:	4641      	mov	r1, r8
 8017a02:	4648      	mov	r0, r9
 8017a04:	f001 fe3a 	bl	801967c <_Bfree>
 8017a08:	4621      	mov	r1, r4
 8017a0a:	4648      	mov	r0, r9
 8017a0c:	f001 fe36 	bl	801967c <_Bfree>
 8017a10:	e619      	b.n	8017646 <_strtod_l+0x63e>
 8017a12:	f1ba 0f00 	cmp.w	sl, #0
 8017a16:	d11a      	bne.n	8017a4e <_strtod_l+0xa46>
 8017a18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017a1c:	b9eb      	cbnz	r3, 8017a5a <_strtod_l+0xa52>
 8017a1e:	2200      	movs	r2, #0
 8017a20:	4b3f      	ldr	r3, [pc, #252]	; (8017b20 <_strtod_l+0xb18>)
 8017a22:	4630      	mov	r0, r6
 8017a24:	4639      	mov	r1, r7
 8017a26:	f7f0 ff91 	bl	800894c <__aeabi_dcmplt>
 8017a2a:	b9c8      	cbnz	r0, 8017a60 <_strtod_l+0xa58>
 8017a2c:	4630      	mov	r0, r6
 8017a2e:	4639      	mov	r1, r7
 8017a30:	2200      	movs	r2, #0
 8017a32:	4b3e      	ldr	r3, [pc, #248]	; (8017b2c <_strtod_l+0xb24>)
 8017a34:	f7f0 fd18 	bl	8008468 <__aeabi_dmul>
 8017a38:	4606      	mov	r6, r0
 8017a3a:	460f      	mov	r7, r1
 8017a3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017a40:	9618      	str	r6, [sp, #96]	; 0x60
 8017a42:	9319      	str	r3, [sp, #100]	; 0x64
 8017a44:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017a48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017a4c:	e79c      	b.n	8017988 <_strtod_l+0x980>
 8017a4e:	f1ba 0f01 	cmp.w	sl, #1
 8017a52:	d102      	bne.n	8017a5a <_strtod_l+0xa52>
 8017a54:	2d00      	cmp	r5, #0
 8017a56:	f43f ad8e 	beq.w	8017576 <_strtod_l+0x56e>
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	4b34      	ldr	r3, [pc, #208]	; (8017b30 <_strtod_l+0xb28>)
 8017a5e:	e78f      	b.n	8017980 <_strtod_l+0x978>
 8017a60:	2600      	movs	r6, #0
 8017a62:	4f32      	ldr	r7, [pc, #200]	; (8017b2c <_strtod_l+0xb24>)
 8017a64:	e7ea      	b.n	8017a3c <_strtod_l+0xa34>
 8017a66:	4b31      	ldr	r3, [pc, #196]	; (8017b2c <_strtod_l+0xb24>)
 8017a68:	4630      	mov	r0, r6
 8017a6a:	4639      	mov	r1, r7
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	f7f0 fcfb 	bl	8008468 <__aeabi_dmul>
 8017a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a74:	4606      	mov	r6, r0
 8017a76:	460f      	mov	r7, r1
 8017a78:	b933      	cbnz	r3, 8017a88 <_strtod_l+0xa80>
 8017a7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017a7e:	9010      	str	r0, [sp, #64]	; 0x40
 8017a80:	9311      	str	r3, [sp, #68]	; 0x44
 8017a82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017a86:	e7df      	b.n	8017a48 <_strtod_l+0xa40>
 8017a88:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017a8c:	e7f9      	b.n	8017a82 <_strtod_l+0xa7a>
 8017a8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017a92:	9b04      	ldr	r3, [sp, #16]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d1ab      	bne.n	80179f0 <_strtod_l+0x9e8>
 8017a98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017a9c:	0d1b      	lsrs	r3, r3, #20
 8017a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017aa0:	051b      	lsls	r3, r3, #20
 8017aa2:	429a      	cmp	r2, r3
 8017aa4:	465d      	mov	r5, fp
 8017aa6:	d1a3      	bne.n	80179f0 <_strtod_l+0x9e8>
 8017aa8:	4639      	mov	r1, r7
 8017aaa:	4630      	mov	r0, r6
 8017aac:	f7f0 ff8c 	bl	80089c8 <__aeabi_d2iz>
 8017ab0:	f7f0 fc70 	bl	8008394 <__aeabi_i2d>
 8017ab4:	460b      	mov	r3, r1
 8017ab6:	4602      	mov	r2, r0
 8017ab8:	4639      	mov	r1, r7
 8017aba:	4630      	mov	r0, r6
 8017abc:	f7f0 fb1c 	bl	80080f8 <__aeabi_dsub>
 8017ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ac2:	4606      	mov	r6, r0
 8017ac4:	460f      	mov	r7, r1
 8017ac6:	b933      	cbnz	r3, 8017ad6 <_strtod_l+0xace>
 8017ac8:	f1ba 0f00 	cmp.w	sl, #0
 8017acc:	d103      	bne.n	8017ad6 <_strtod_l+0xace>
 8017ace:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017ad2:	2d00      	cmp	r5, #0
 8017ad4:	d06d      	beq.n	8017bb2 <_strtod_l+0xbaa>
 8017ad6:	a30a      	add	r3, pc, #40	; (adr r3, 8017b00 <_strtod_l+0xaf8>)
 8017ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017adc:	4630      	mov	r0, r6
 8017ade:	4639      	mov	r1, r7
 8017ae0:	f7f0 ff34 	bl	800894c <__aeabi_dcmplt>
 8017ae4:	2800      	cmp	r0, #0
 8017ae6:	f47f acb8 	bne.w	801745a <_strtod_l+0x452>
 8017aea:	a307      	add	r3, pc, #28	; (adr r3, 8017b08 <_strtod_l+0xb00>)
 8017aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017af0:	4630      	mov	r0, r6
 8017af2:	4639      	mov	r1, r7
 8017af4:	f7f0 ff48 	bl	8008988 <__aeabi_dcmpgt>
 8017af8:	2800      	cmp	r0, #0
 8017afa:	f43f af79 	beq.w	80179f0 <_strtod_l+0x9e8>
 8017afe:	e4ac      	b.n	801745a <_strtod_l+0x452>
 8017b00:	94a03595 	.word	0x94a03595
 8017b04:	3fdfffff 	.word	0x3fdfffff
 8017b08:	35afe535 	.word	0x35afe535
 8017b0c:	3fe00000 	.word	0x3fe00000
 8017b10:	000fffff 	.word	0x000fffff
 8017b14:	7ff00000 	.word	0x7ff00000
 8017b18:	7fefffff 	.word	0x7fefffff
 8017b1c:	39500000 	.word	0x39500000
 8017b20:	3ff00000 	.word	0x3ff00000
 8017b24:	7fe00000 	.word	0x7fe00000
 8017b28:	7c9fffff 	.word	0x7c9fffff
 8017b2c:	3fe00000 	.word	0x3fe00000
 8017b30:	bff00000 	.word	0xbff00000
 8017b34:	9b04      	ldr	r3, [sp, #16]
 8017b36:	b333      	cbz	r3, 8017b86 <_strtod_l+0xb7e>
 8017b38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017b3e:	d822      	bhi.n	8017b86 <_strtod_l+0xb7e>
 8017b40:	a327      	add	r3, pc, #156	; (adr r3, 8017be0 <_strtod_l+0xbd8>)
 8017b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b46:	4630      	mov	r0, r6
 8017b48:	4639      	mov	r1, r7
 8017b4a:	f7f0 ff09 	bl	8008960 <__aeabi_dcmple>
 8017b4e:	b1a0      	cbz	r0, 8017b7a <_strtod_l+0xb72>
 8017b50:	4639      	mov	r1, r7
 8017b52:	4630      	mov	r0, r6
 8017b54:	f7f0 ff60 	bl	8008a18 <__aeabi_d2uiz>
 8017b58:	2800      	cmp	r0, #0
 8017b5a:	bf08      	it	eq
 8017b5c:	2001      	moveq	r0, #1
 8017b5e:	f7f0 fc09 	bl	8008374 <__aeabi_ui2d>
 8017b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b64:	4606      	mov	r6, r0
 8017b66:	460f      	mov	r7, r1
 8017b68:	bb03      	cbnz	r3, 8017bac <_strtod_l+0xba4>
 8017b6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017b6e:	9012      	str	r0, [sp, #72]	; 0x48
 8017b70:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017b76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017b7e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017b82:	1a9b      	subs	r3, r3, r2
 8017b84:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b86:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017b8a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017b8e:	f002 f80d 	bl	8019bac <__ulp>
 8017b92:	4650      	mov	r0, sl
 8017b94:	ec53 2b10 	vmov	r2, r3, d0
 8017b98:	4659      	mov	r1, fp
 8017b9a:	f7f0 fc65 	bl	8008468 <__aeabi_dmul>
 8017b9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017ba2:	f7f0 faab 	bl	80080fc <__adddf3>
 8017ba6:	4682      	mov	sl, r0
 8017ba8:	468b      	mov	fp, r1
 8017baa:	e772      	b.n	8017a92 <_strtod_l+0xa8a>
 8017bac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017bb0:	e7df      	b.n	8017b72 <_strtod_l+0xb6a>
 8017bb2:	a30d      	add	r3, pc, #52	; (adr r3, 8017be8 <_strtod_l+0xbe0>)
 8017bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bb8:	f7f0 fec8 	bl	800894c <__aeabi_dcmplt>
 8017bbc:	e79c      	b.n	8017af8 <_strtod_l+0xaf0>
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	930d      	str	r3, [sp, #52]	; 0x34
 8017bc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017bc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017bc6:	6013      	str	r3, [r2, #0]
 8017bc8:	f7ff ba61 	b.w	801708e <_strtod_l+0x86>
 8017bcc:	2b65      	cmp	r3, #101	; 0x65
 8017bce:	f04f 0200 	mov.w	r2, #0
 8017bd2:	f43f ab4e 	beq.w	8017272 <_strtod_l+0x26a>
 8017bd6:	2101      	movs	r1, #1
 8017bd8:	4614      	mov	r4, r2
 8017bda:	9104      	str	r1, [sp, #16]
 8017bdc:	f7ff bacb 	b.w	8017176 <_strtod_l+0x16e>
 8017be0:	ffc00000 	.word	0xffc00000
 8017be4:	41dfffff 	.word	0x41dfffff
 8017be8:	94a03595 	.word	0x94a03595
 8017bec:	3fcfffff 	.word	0x3fcfffff

08017bf0 <_strtod_r>:
 8017bf0:	4b05      	ldr	r3, [pc, #20]	; (8017c08 <_strtod_r+0x18>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	b410      	push	{r4}
 8017bf6:	6a1b      	ldr	r3, [r3, #32]
 8017bf8:	4c04      	ldr	r4, [pc, #16]	; (8017c0c <_strtod_r+0x1c>)
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	bf08      	it	eq
 8017bfe:	4623      	moveq	r3, r4
 8017c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c04:	f7ff ba00 	b.w	8017008 <_strtod_l>
 8017c08:	2000002c 	.word	0x2000002c
 8017c0c:	20000090 	.word	0x20000090

08017c10 <_strtol_l.isra.0>:
 8017c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c14:	4680      	mov	r8, r0
 8017c16:	4689      	mov	r9, r1
 8017c18:	4692      	mov	sl, r2
 8017c1a:	461e      	mov	r6, r3
 8017c1c:	460f      	mov	r7, r1
 8017c1e:	463d      	mov	r5, r7
 8017c20:	9808      	ldr	r0, [sp, #32]
 8017c22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c26:	f001 fc55 	bl	80194d4 <__locale_ctype_ptr_l>
 8017c2a:	4420      	add	r0, r4
 8017c2c:	7843      	ldrb	r3, [r0, #1]
 8017c2e:	f013 0308 	ands.w	r3, r3, #8
 8017c32:	d132      	bne.n	8017c9a <_strtol_l.isra.0+0x8a>
 8017c34:	2c2d      	cmp	r4, #45	; 0x2d
 8017c36:	d132      	bne.n	8017c9e <_strtol_l.isra.0+0x8e>
 8017c38:	787c      	ldrb	r4, [r7, #1]
 8017c3a:	1cbd      	adds	r5, r7, #2
 8017c3c:	2201      	movs	r2, #1
 8017c3e:	2e00      	cmp	r6, #0
 8017c40:	d05d      	beq.n	8017cfe <_strtol_l.isra.0+0xee>
 8017c42:	2e10      	cmp	r6, #16
 8017c44:	d109      	bne.n	8017c5a <_strtol_l.isra.0+0x4a>
 8017c46:	2c30      	cmp	r4, #48	; 0x30
 8017c48:	d107      	bne.n	8017c5a <_strtol_l.isra.0+0x4a>
 8017c4a:	782b      	ldrb	r3, [r5, #0]
 8017c4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017c50:	2b58      	cmp	r3, #88	; 0x58
 8017c52:	d14f      	bne.n	8017cf4 <_strtol_l.isra.0+0xe4>
 8017c54:	786c      	ldrb	r4, [r5, #1]
 8017c56:	2610      	movs	r6, #16
 8017c58:	3502      	adds	r5, #2
 8017c5a:	2a00      	cmp	r2, #0
 8017c5c:	bf14      	ite	ne
 8017c5e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017c62:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017c66:	2700      	movs	r7, #0
 8017c68:	fbb1 fcf6 	udiv	ip, r1, r6
 8017c6c:	4638      	mov	r0, r7
 8017c6e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017c72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017c76:	2b09      	cmp	r3, #9
 8017c78:	d817      	bhi.n	8017caa <_strtol_l.isra.0+0x9a>
 8017c7a:	461c      	mov	r4, r3
 8017c7c:	42a6      	cmp	r6, r4
 8017c7e:	dd23      	ble.n	8017cc8 <_strtol_l.isra.0+0xb8>
 8017c80:	1c7b      	adds	r3, r7, #1
 8017c82:	d007      	beq.n	8017c94 <_strtol_l.isra.0+0x84>
 8017c84:	4584      	cmp	ip, r0
 8017c86:	d31c      	bcc.n	8017cc2 <_strtol_l.isra.0+0xb2>
 8017c88:	d101      	bne.n	8017c8e <_strtol_l.isra.0+0x7e>
 8017c8a:	45a6      	cmp	lr, r4
 8017c8c:	db19      	blt.n	8017cc2 <_strtol_l.isra.0+0xb2>
 8017c8e:	fb00 4006 	mla	r0, r0, r6, r4
 8017c92:	2701      	movs	r7, #1
 8017c94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c98:	e7eb      	b.n	8017c72 <_strtol_l.isra.0+0x62>
 8017c9a:	462f      	mov	r7, r5
 8017c9c:	e7bf      	b.n	8017c1e <_strtol_l.isra.0+0xe>
 8017c9e:	2c2b      	cmp	r4, #43	; 0x2b
 8017ca0:	bf04      	itt	eq
 8017ca2:	1cbd      	addeq	r5, r7, #2
 8017ca4:	787c      	ldrbeq	r4, [r7, #1]
 8017ca6:	461a      	mov	r2, r3
 8017ca8:	e7c9      	b.n	8017c3e <_strtol_l.isra.0+0x2e>
 8017caa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017cae:	2b19      	cmp	r3, #25
 8017cb0:	d801      	bhi.n	8017cb6 <_strtol_l.isra.0+0xa6>
 8017cb2:	3c37      	subs	r4, #55	; 0x37
 8017cb4:	e7e2      	b.n	8017c7c <_strtol_l.isra.0+0x6c>
 8017cb6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017cba:	2b19      	cmp	r3, #25
 8017cbc:	d804      	bhi.n	8017cc8 <_strtol_l.isra.0+0xb8>
 8017cbe:	3c57      	subs	r4, #87	; 0x57
 8017cc0:	e7dc      	b.n	8017c7c <_strtol_l.isra.0+0x6c>
 8017cc2:	f04f 37ff 	mov.w	r7, #4294967295
 8017cc6:	e7e5      	b.n	8017c94 <_strtol_l.isra.0+0x84>
 8017cc8:	1c7b      	adds	r3, r7, #1
 8017cca:	d108      	bne.n	8017cde <_strtol_l.isra.0+0xce>
 8017ccc:	2322      	movs	r3, #34	; 0x22
 8017cce:	f8c8 3000 	str.w	r3, [r8]
 8017cd2:	4608      	mov	r0, r1
 8017cd4:	f1ba 0f00 	cmp.w	sl, #0
 8017cd8:	d107      	bne.n	8017cea <_strtol_l.isra.0+0xda>
 8017cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cde:	b102      	cbz	r2, 8017ce2 <_strtol_l.isra.0+0xd2>
 8017ce0:	4240      	negs	r0, r0
 8017ce2:	f1ba 0f00 	cmp.w	sl, #0
 8017ce6:	d0f8      	beq.n	8017cda <_strtol_l.isra.0+0xca>
 8017ce8:	b10f      	cbz	r7, 8017cee <_strtol_l.isra.0+0xde>
 8017cea:	f105 39ff 	add.w	r9, r5, #4294967295
 8017cee:	f8ca 9000 	str.w	r9, [sl]
 8017cf2:	e7f2      	b.n	8017cda <_strtol_l.isra.0+0xca>
 8017cf4:	2430      	movs	r4, #48	; 0x30
 8017cf6:	2e00      	cmp	r6, #0
 8017cf8:	d1af      	bne.n	8017c5a <_strtol_l.isra.0+0x4a>
 8017cfa:	2608      	movs	r6, #8
 8017cfc:	e7ad      	b.n	8017c5a <_strtol_l.isra.0+0x4a>
 8017cfe:	2c30      	cmp	r4, #48	; 0x30
 8017d00:	d0a3      	beq.n	8017c4a <_strtol_l.isra.0+0x3a>
 8017d02:	260a      	movs	r6, #10
 8017d04:	e7a9      	b.n	8017c5a <_strtol_l.isra.0+0x4a>
	...

08017d08 <_strtol_r>:
 8017d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d0a:	4c06      	ldr	r4, [pc, #24]	; (8017d24 <_strtol_r+0x1c>)
 8017d0c:	4d06      	ldr	r5, [pc, #24]	; (8017d28 <_strtol_r+0x20>)
 8017d0e:	6824      	ldr	r4, [r4, #0]
 8017d10:	6a24      	ldr	r4, [r4, #32]
 8017d12:	2c00      	cmp	r4, #0
 8017d14:	bf08      	it	eq
 8017d16:	462c      	moveq	r4, r5
 8017d18:	9400      	str	r4, [sp, #0]
 8017d1a:	f7ff ff79 	bl	8017c10 <_strtol_l.isra.0>
 8017d1e:	b003      	add	sp, #12
 8017d20:	bd30      	pop	{r4, r5, pc}
 8017d22:	bf00      	nop
 8017d24:	2000002c 	.word	0x2000002c
 8017d28:	20000090 	.word	0x20000090

08017d2c <__swbuf_r>:
 8017d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d2e:	460e      	mov	r6, r1
 8017d30:	4614      	mov	r4, r2
 8017d32:	4605      	mov	r5, r0
 8017d34:	b118      	cbz	r0, 8017d3e <__swbuf_r+0x12>
 8017d36:	6983      	ldr	r3, [r0, #24]
 8017d38:	b90b      	cbnz	r3, 8017d3e <__swbuf_r+0x12>
 8017d3a:	f000 ffff 	bl	8018d3c <__sinit>
 8017d3e:	4b21      	ldr	r3, [pc, #132]	; (8017dc4 <__swbuf_r+0x98>)
 8017d40:	429c      	cmp	r4, r3
 8017d42:	d12a      	bne.n	8017d9a <__swbuf_r+0x6e>
 8017d44:	686c      	ldr	r4, [r5, #4]
 8017d46:	69a3      	ldr	r3, [r4, #24]
 8017d48:	60a3      	str	r3, [r4, #8]
 8017d4a:	89a3      	ldrh	r3, [r4, #12]
 8017d4c:	071a      	lsls	r2, r3, #28
 8017d4e:	d52e      	bpl.n	8017dae <__swbuf_r+0x82>
 8017d50:	6923      	ldr	r3, [r4, #16]
 8017d52:	b363      	cbz	r3, 8017dae <__swbuf_r+0x82>
 8017d54:	6923      	ldr	r3, [r4, #16]
 8017d56:	6820      	ldr	r0, [r4, #0]
 8017d58:	1ac0      	subs	r0, r0, r3
 8017d5a:	6963      	ldr	r3, [r4, #20]
 8017d5c:	b2f6      	uxtb	r6, r6
 8017d5e:	4283      	cmp	r3, r0
 8017d60:	4637      	mov	r7, r6
 8017d62:	dc04      	bgt.n	8017d6e <__swbuf_r+0x42>
 8017d64:	4621      	mov	r1, r4
 8017d66:	4628      	mov	r0, r5
 8017d68:	f000 ff6c 	bl	8018c44 <_fflush_r>
 8017d6c:	bb28      	cbnz	r0, 8017dba <__swbuf_r+0x8e>
 8017d6e:	68a3      	ldr	r3, [r4, #8]
 8017d70:	3b01      	subs	r3, #1
 8017d72:	60a3      	str	r3, [r4, #8]
 8017d74:	6823      	ldr	r3, [r4, #0]
 8017d76:	1c5a      	adds	r2, r3, #1
 8017d78:	6022      	str	r2, [r4, #0]
 8017d7a:	701e      	strb	r6, [r3, #0]
 8017d7c:	6963      	ldr	r3, [r4, #20]
 8017d7e:	3001      	adds	r0, #1
 8017d80:	4283      	cmp	r3, r0
 8017d82:	d004      	beq.n	8017d8e <__swbuf_r+0x62>
 8017d84:	89a3      	ldrh	r3, [r4, #12]
 8017d86:	07db      	lsls	r3, r3, #31
 8017d88:	d519      	bpl.n	8017dbe <__swbuf_r+0x92>
 8017d8a:	2e0a      	cmp	r6, #10
 8017d8c:	d117      	bne.n	8017dbe <__swbuf_r+0x92>
 8017d8e:	4621      	mov	r1, r4
 8017d90:	4628      	mov	r0, r5
 8017d92:	f000 ff57 	bl	8018c44 <_fflush_r>
 8017d96:	b190      	cbz	r0, 8017dbe <__swbuf_r+0x92>
 8017d98:	e00f      	b.n	8017dba <__swbuf_r+0x8e>
 8017d9a:	4b0b      	ldr	r3, [pc, #44]	; (8017dc8 <__swbuf_r+0x9c>)
 8017d9c:	429c      	cmp	r4, r3
 8017d9e:	d101      	bne.n	8017da4 <__swbuf_r+0x78>
 8017da0:	68ac      	ldr	r4, [r5, #8]
 8017da2:	e7d0      	b.n	8017d46 <__swbuf_r+0x1a>
 8017da4:	4b09      	ldr	r3, [pc, #36]	; (8017dcc <__swbuf_r+0xa0>)
 8017da6:	429c      	cmp	r4, r3
 8017da8:	bf08      	it	eq
 8017daa:	68ec      	ldreq	r4, [r5, #12]
 8017dac:	e7cb      	b.n	8017d46 <__swbuf_r+0x1a>
 8017dae:	4621      	mov	r1, r4
 8017db0:	4628      	mov	r0, r5
 8017db2:	f000 f80d 	bl	8017dd0 <__swsetup_r>
 8017db6:	2800      	cmp	r0, #0
 8017db8:	d0cc      	beq.n	8017d54 <__swbuf_r+0x28>
 8017dba:	f04f 37ff 	mov.w	r7, #4294967295
 8017dbe:	4638      	mov	r0, r7
 8017dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dc2:	bf00      	nop
 8017dc4:	0801b408 	.word	0x0801b408
 8017dc8:	0801b428 	.word	0x0801b428
 8017dcc:	0801b3e8 	.word	0x0801b3e8

08017dd0 <__swsetup_r>:
 8017dd0:	4b32      	ldr	r3, [pc, #200]	; (8017e9c <__swsetup_r+0xcc>)
 8017dd2:	b570      	push	{r4, r5, r6, lr}
 8017dd4:	681d      	ldr	r5, [r3, #0]
 8017dd6:	4606      	mov	r6, r0
 8017dd8:	460c      	mov	r4, r1
 8017dda:	b125      	cbz	r5, 8017de6 <__swsetup_r+0x16>
 8017ddc:	69ab      	ldr	r3, [r5, #24]
 8017dde:	b913      	cbnz	r3, 8017de6 <__swsetup_r+0x16>
 8017de0:	4628      	mov	r0, r5
 8017de2:	f000 ffab 	bl	8018d3c <__sinit>
 8017de6:	4b2e      	ldr	r3, [pc, #184]	; (8017ea0 <__swsetup_r+0xd0>)
 8017de8:	429c      	cmp	r4, r3
 8017dea:	d10f      	bne.n	8017e0c <__swsetup_r+0x3c>
 8017dec:	686c      	ldr	r4, [r5, #4]
 8017dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017df2:	b29a      	uxth	r2, r3
 8017df4:	0715      	lsls	r5, r2, #28
 8017df6:	d42c      	bmi.n	8017e52 <__swsetup_r+0x82>
 8017df8:	06d0      	lsls	r0, r2, #27
 8017dfa:	d411      	bmi.n	8017e20 <__swsetup_r+0x50>
 8017dfc:	2209      	movs	r2, #9
 8017dfe:	6032      	str	r2, [r6, #0]
 8017e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e04:	81a3      	strh	r3, [r4, #12]
 8017e06:	f04f 30ff 	mov.w	r0, #4294967295
 8017e0a:	e03e      	b.n	8017e8a <__swsetup_r+0xba>
 8017e0c:	4b25      	ldr	r3, [pc, #148]	; (8017ea4 <__swsetup_r+0xd4>)
 8017e0e:	429c      	cmp	r4, r3
 8017e10:	d101      	bne.n	8017e16 <__swsetup_r+0x46>
 8017e12:	68ac      	ldr	r4, [r5, #8]
 8017e14:	e7eb      	b.n	8017dee <__swsetup_r+0x1e>
 8017e16:	4b24      	ldr	r3, [pc, #144]	; (8017ea8 <__swsetup_r+0xd8>)
 8017e18:	429c      	cmp	r4, r3
 8017e1a:	bf08      	it	eq
 8017e1c:	68ec      	ldreq	r4, [r5, #12]
 8017e1e:	e7e6      	b.n	8017dee <__swsetup_r+0x1e>
 8017e20:	0751      	lsls	r1, r2, #29
 8017e22:	d512      	bpl.n	8017e4a <__swsetup_r+0x7a>
 8017e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e26:	b141      	cbz	r1, 8017e3a <__swsetup_r+0x6a>
 8017e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e2c:	4299      	cmp	r1, r3
 8017e2e:	d002      	beq.n	8017e36 <__swsetup_r+0x66>
 8017e30:	4630      	mov	r0, r6
 8017e32:	f001 fffd 	bl	8019e30 <_free_r>
 8017e36:	2300      	movs	r3, #0
 8017e38:	6363      	str	r3, [r4, #52]	; 0x34
 8017e3a:	89a3      	ldrh	r3, [r4, #12]
 8017e3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017e40:	81a3      	strh	r3, [r4, #12]
 8017e42:	2300      	movs	r3, #0
 8017e44:	6063      	str	r3, [r4, #4]
 8017e46:	6923      	ldr	r3, [r4, #16]
 8017e48:	6023      	str	r3, [r4, #0]
 8017e4a:	89a3      	ldrh	r3, [r4, #12]
 8017e4c:	f043 0308 	orr.w	r3, r3, #8
 8017e50:	81a3      	strh	r3, [r4, #12]
 8017e52:	6923      	ldr	r3, [r4, #16]
 8017e54:	b94b      	cbnz	r3, 8017e6a <__swsetup_r+0x9a>
 8017e56:	89a3      	ldrh	r3, [r4, #12]
 8017e58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e60:	d003      	beq.n	8017e6a <__swsetup_r+0x9a>
 8017e62:	4621      	mov	r1, r4
 8017e64:	4630      	mov	r0, r6
 8017e66:	f001 fb7b 	bl	8019560 <__smakebuf_r>
 8017e6a:	89a2      	ldrh	r2, [r4, #12]
 8017e6c:	f012 0301 	ands.w	r3, r2, #1
 8017e70:	d00c      	beq.n	8017e8c <__swsetup_r+0xbc>
 8017e72:	2300      	movs	r3, #0
 8017e74:	60a3      	str	r3, [r4, #8]
 8017e76:	6963      	ldr	r3, [r4, #20]
 8017e78:	425b      	negs	r3, r3
 8017e7a:	61a3      	str	r3, [r4, #24]
 8017e7c:	6923      	ldr	r3, [r4, #16]
 8017e7e:	b953      	cbnz	r3, 8017e96 <__swsetup_r+0xc6>
 8017e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017e88:	d1ba      	bne.n	8017e00 <__swsetup_r+0x30>
 8017e8a:	bd70      	pop	{r4, r5, r6, pc}
 8017e8c:	0792      	lsls	r2, r2, #30
 8017e8e:	bf58      	it	pl
 8017e90:	6963      	ldrpl	r3, [r4, #20]
 8017e92:	60a3      	str	r3, [r4, #8]
 8017e94:	e7f2      	b.n	8017e7c <__swsetup_r+0xac>
 8017e96:	2000      	movs	r0, #0
 8017e98:	e7f7      	b.n	8017e8a <__swsetup_r+0xba>
 8017e9a:	bf00      	nop
 8017e9c:	2000002c 	.word	0x2000002c
 8017ea0:	0801b408 	.word	0x0801b408
 8017ea4:	0801b428 	.word	0x0801b428
 8017ea8:	0801b3e8 	.word	0x0801b3e8

08017eac <quorem>:
 8017eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb0:	6903      	ldr	r3, [r0, #16]
 8017eb2:	690c      	ldr	r4, [r1, #16]
 8017eb4:	42a3      	cmp	r3, r4
 8017eb6:	4680      	mov	r8, r0
 8017eb8:	f2c0 8082 	blt.w	8017fc0 <quorem+0x114>
 8017ebc:	3c01      	subs	r4, #1
 8017ebe:	f101 0714 	add.w	r7, r1, #20
 8017ec2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017ec6:	f100 0614 	add.w	r6, r0, #20
 8017eca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017ece:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017ed2:	eb06 030c 	add.w	r3, r6, ip
 8017ed6:	3501      	adds	r5, #1
 8017ed8:	eb07 090c 	add.w	r9, r7, ip
 8017edc:	9301      	str	r3, [sp, #4]
 8017ede:	fbb0 f5f5 	udiv	r5, r0, r5
 8017ee2:	b395      	cbz	r5, 8017f4a <quorem+0x9e>
 8017ee4:	f04f 0a00 	mov.w	sl, #0
 8017ee8:	4638      	mov	r0, r7
 8017eea:	46b6      	mov	lr, r6
 8017eec:	46d3      	mov	fp, sl
 8017eee:	f850 2b04 	ldr.w	r2, [r0], #4
 8017ef2:	b293      	uxth	r3, r2
 8017ef4:	fb05 a303 	mla	r3, r5, r3, sl
 8017ef8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017efc:	b29b      	uxth	r3, r3
 8017efe:	ebab 0303 	sub.w	r3, fp, r3
 8017f02:	0c12      	lsrs	r2, r2, #16
 8017f04:	f8de b000 	ldr.w	fp, [lr]
 8017f08:	fb05 a202 	mla	r2, r5, r2, sl
 8017f0c:	fa13 f38b 	uxtah	r3, r3, fp
 8017f10:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017f14:	fa1f fb82 	uxth.w	fp, r2
 8017f18:	f8de 2000 	ldr.w	r2, [lr]
 8017f1c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017f20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f24:	b29b      	uxth	r3, r3
 8017f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f2a:	4581      	cmp	r9, r0
 8017f2c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017f30:	f84e 3b04 	str.w	r3, [lr], #4
 8017f34:	d2db      	bcs.n	8017eee <quorem+0x42>
 8017f36:	f856 300c 	ldr.w	r3, [r6, ip]
 8017f3a:	b933      	cbnz	r3, 8017f4a <quorem+0x9e>
 8017f3c:	9b01      	ldr	r3, [sp, #4]
 8017f3e:	3b04      	subs	r3, #4
 8017f40:	429e      	cmp	r6, r3
 8017f42:	461a      	mov	r2, r3
 8017f44:	d330      	bcc.n	8017fa8 <quorem+0xfc>
 8017f46:	f8c8 4010 	str.w	r4, [r8, #16]
 8017f4a:	4640      	mov	r0, r8
 8017f4c:	f001 fdb6 	bl	8019abc <__mcmp>
 8017f50:	2800      	cmp	r0, #0
 8017f52:	db25      	blt.n	8017fa0 <quorem+0xf4>
 8017f54:	3501      	adds	r5, #1
 8017f56:	4630      	mov	r0, r6
 8017f58:	f04f 0c00 	mov.w	ip, #0
 8017f5c:	f857 2b04 	ldr.w	r2, [r7], #4
 8017f60:	f8d0 e000 	ldr.w	lr, [r0]
 8017f64:	b293      	uxth	r3, r2
 8017f66:	ebac 0303 	sub.w	r3, ip, r3
 8017f6a:	0c12      	lsrs	r2, r2, #16
 8017f6c:	fa13 f38e 	uxtah	r3, r3, lr
 8017f70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017f74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f78:	b29b      	uxth	r3, r3
 8017f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f7e:	45b9      	cmp	r9, r7
 8017f80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017f84:	f840 3b04 	str.w	r3, [r0], #4
 8017f88:	d2e8      	bcs.n	8017f5c <quorem+0xb0>
 8017f8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017f8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017f92:	b92a      	cbnz	r2, 8017fa0 <quorem+0xf4>
 8017f94:	3b04      	subs	r3, #4
 8017f96:	429e      	cmp	r6, r3
 8017f98:	461a      	mov	r2, r3
 8017f9a:	d30b      	bcc.n	8017fb4 <quorem+0x108>
 8017f9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8017fa0:	4628      	mov	r0, r5
 8017fa2:	b003      	add	sp, #12
 8017fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa8:	6812      	ldr	r2, [r2, #0]
 8017faa:	3b04      	subs	r3, #4
 8017fac:	2a00      	cmp	r2, #0
 8017fae:	d1ca      	bne.n	8017f46 <quorem+0x9a>
 8017fb0:	3c01      	subs	r4, #1
 8017fb2:	e7c5      	b.n	8017f40 <quorem+0x94>
 8017fb4:	6812      	ldr	r2, [r2, #0]
 8017fb6:	3b04      	subs	r3, #4
 8017fb8:	2a00      	cmp	r2, #0
 8017fba:	d1ef      	bne.n	8017f9c <quorem+0xf0>
 8017fbc:	3c01      	subs	r4, #1
 8017fbe:	e7ea      	b.n	8017f96 <quorem+0xea>
 8017fc0:	2000      	movs	r0, #0
 8017fc2:	e7ee      	b.n	8017fa2 <quorem+0xf6>
 8017fc4:	0000      	movs	r0, r0
	...

08017fc8 <_dtoa_r>:
 8017fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fcc:	ec57 6b10 	vmov	r6, r7, d0
 8017fd0:	b097      	sub	sp, #92	; 0x5c
 8017fd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017fd4:	9106      	str	r1, [sp, #24]
 8017fd6:	4604      	mov	r4, r0
 8017fd8:	920b      	str	r2, [sp, #44]	; 0x2c
 8017fda:	9312      	str	r3, [sp, #72]	; 0x48
 8017fdc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017fe0:	e9cd 6700 	strd	r6, r7, [sp]
 8017fe4:	b93d      	cbnz	r5, 8017ff6 <_dtoa_r+0x2e>
 8017fe6:	2010      	movs	r0, #16
 8017fe8:	f001 fafa 	bl	80195e0 <malloc>
 8017fec:	6260      	str	r0, [r4, #36]	; 0x24
 8017fee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017ff2:	6005      	str	r5, [r0, #0]
 8017ff4:	60c5      	str	r5, [r0, #12]
 8017ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ff8:	6819      	ldr	r1, [r3, #0]
 8017ffa:	b151      	cbz	r1, 8018012 <_dtoa_r+0x4a>
 8017ffc:	685a      	ldr	r2, [r3, #4]
 8017ffe:	604a      	str	r2, [r1, #4]
 8018000:	2301      	movs	r3, #1
 8018002:	4093      	lsls	r3, r2
 8018004:	608b      	str	r3, [r1, #8]
 8018006:	4620      	mov	r0, r4
 8018008:	f001 fb38 	bl	801967c <_Bfree>
 801800c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801800e:	2200      	movs	r2, #0
 8018010:	601a      	str	r2, [r3, #0]
 8018012:	1e3b      	subs	r3, r7, #0
 8018014:	bfbb      	ittet	lt
 8018016:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801801a:	9301      	strlt	r3, [sp, #4]
 801801c:	2300      	movge	r3, #0
 801801e:	2201      	movlt	r2, #1
 8018020:	bfac      	ite	ge
 8018022:	f8c8 3000 	strge.w	r3, [r8]
 8018026:	f8c8 2000 	strlt.w	r2, [r8]
 801802a:	4baf      	ldr	r3, [pc, #700]	; (80182e8 <_dtoa_r+0x320>)
 801802c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018030:	ea33 0308 	bics.w	r3, r3, r8
 8018034:	d114      	bne.n	8018060 <_dtoa_r+0x98>
 8018036:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018038:	f242 730f 	movw	r3, #9999	; 0x270f
 801803c:	6013      	str	r3, [r2, #0]
 801803e:	9b00      	ldr	r3, [sp, #0]
 8018040:	b923      	cbnz	r3, 801804c <_dtoa_r+0x84>
 8018042:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8018046:	2800      	cmp	r0, #0
 8018048:	f000 8542 	beq.w	8018ad0 <_dtoa_r+0xb08>
 801804c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801804e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80182fc <_dtoa_r+0x334>
 8018052:	2b00      	cmp	r3, #0
 8018054:	f000 8544 	beq.w	8018ae0 <_dtoa_r+0xb18>
 8018058:	f10b 0303 	add.w	r3, fp, #3
 801805c:	f000 bd3e 	b.w	8018adc <_dtoa_r+0xb14>
 8018060:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018064:	2200      	movs	r2, #0
 8018066:	2300      	movs	r3, #0
 8018068:	4630      	mov	r0, r6
 801806a:	4639      	mov	r1, r7
 801806c:	f7f0 fc64 	bl	8008938 <__aeabi_dcmpeq>
 8018070:	4681      	mov	r9, r0
 8018072:	b168      	cbz	r0, 8018090 <_dtoa_r+0xc8>
 8018074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018076:	2301      	movs	r3, #1
 8018078:	6013      	str	r3, [r2, #0]
 801807a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801807c:	2b00      	cmp	r3, #0
 801807e:	f000 8524 	beq.w	8018aca <_dtoa_r+0xb02>
 8018082:	4b9a      	ldr	r3, [pc, #616]	; (80182ec <_dtoa_r+0x324>)
 8018084:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018086:	f103 3bff 	add.w	fp, r3, #4294967295
 801808a:	6013      	str	r3, [r2, #0]
 801808c:	f000 bd28 	b.w	8018ae0 <_dtoa_r+0xb18>
 8018090:	aa14      	add	r2, sp, #80	; 0x50
 8018092:	a915      	add	r1, sp, #84	; 0x54
 8018094:	ec47 6b10 	vmov	d0, r6, r7
 8018098:	4620      	mov	r0, r4
 801809a:	f001 fdfd 	bl	8019c98 <__d2b>
 801809e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80180a2:	9004      	str	r0, [sp, #16]
 80180a4:	2d00      	cmp	r5, #0
 80180a6:	d07c      	beq.n	80181a2 <_dtoa_r+0x1da>
 80180a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80180ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80180b0:	46b2      	mov	sl, r6
 80180b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80180b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80180ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80180be:	2200      	movs	r2, #0
 80180c0:	4b8b      	ldr	r3, [pc, #556]	; (80182f0 <_dtoa_r+0x328>)
 80180c2:	4650      	mov	r0, sl
 80180c4:	4659      	mov	r1, fp
 80180c6:	f7f0 f817 	bl	80080f8 <__aeabi_dsub>
 80180ca:	a381      	add	r3, pc, #516	; (adr r3, 80182d0 <_dtoa_r+0x308>)
 80180cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d0:	f7f0 f9ca 	bl	8008468 <__aeabi_dmul>
 80180d4:	a380      	add	r3, pc, #512	; (adr r3, 80182d8 <_dtoa_r+0x310>)
 80180d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180da:	f7f0 f80f 	bl	80080fc <__adddf3>
 80180de:	4606      	mov	r6, r0
 80180e0:	4628      	mov	r0, r5
 80180e2:	460f      	mov	r7, r1
 80180e4:	f7f0 f956 	bl	8008394 <__aeabi_i2d>
 80180e8:	a37d      	add	r3, pc, #500	; (adr r3, 80182e0 <_dtoa_r+0x318>)
 80180ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ee:	f7f0 f9bb 	bl	8008468 <__aeabi_dmul>
 80180f2:	4602      	mov	r2, r0
 80180f4:	460b      	mov	r3, r1
 80180f6:	4630      	mov	r0, r6
 80180f8:	4639      	mov	r1, r7
 80180fa:	f7ef ffff 	bl	80080fc <__adddf3>
 80180fe:	4606      	mov	r6, r0
 8018100:	460f      	mov	r7, r1
 8018102:	f7f0 fc61 	bl	80089c8 <__aeabi_d2iz>
 8018106:	2200      	movs	r2, #0
 8018108:	4682      	mov	sl, r0
 801810a:	2300      	movs	r3, #0
 801810c:	4630      	mov	r0, r6
 801810e:	4639      	mov	r1, r7
 8018110:	f7f0 fc1c 	bl	800894c <__aeabi_dcmplt>
 8018114:	b148      	cbz	r0, 801812a <_dtoa_r+0x162>
 8018116:	4650      	mov	r0, sl
 8018118:	f7f0 f93c 	bl	8008394 <__aeabi_i2d>
 801811c:	4632      	mov	r2, r6
 801811e:	463b      	mov	r3, r7
 8018120:	f7f0 fc0a 	bl	8008938 <__aeabi_dcmpeq>
 8018124:	b908      	cbnz	r0, 801812a <_dtoa_r+0x162>
 8018126:	f10a 3aff 	add.w	sl, sl, #4294967295
 801812a:	f1ba 0f16 	cmp.w	sl, #22
 801812e:	d859      	bhi.n	80181e4 <_dtoa_r+0x21c>
 8018130:	4970      	ldr	r1, [pc, #448]	; (80182f4 <_dtoa_r+0x32c>)
 8018132:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018136:	e9dd 2300 	ldrd	r2, r3, [sp]
 801813a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801813e:	f7f0 fc23 	bl	8008988 <__aeabi_dcmpgt>
 8018142:	2800      	cmp	r0, #0
 8018144:	d050      	beq.n	80181e8 <_dtoa_r+0x220>
 8018146:	f10a 3aff 	add.w	sl, sl, #4294967295
 801814a:	2300      	movs	r3, #0
 801814c:	930f      	str	r3, [sp, #60]	; 0x3c
 801814e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018150:	1b5d      	subs	r5, r3, r5
 8018152:	f1b5 0801 	subs.w	r8, r5, #1
 8018156:	bf49      	itett	mi
 8018158:	f1c5 0301 	rsbmi	r3, r5, #1
 801815c:	2300      	movpl	r3, #0
 801815e:	9305      	strmi	r3, [sp, #20]
 8018160:	f04f 0800 	movmi.w	r8, #0
 8018164:	bf58      	it	pl
 8018166:	9305      	strpl	r3, [sp, #20]
 8018168:	f1ba 0f00 	cmp.w	sl, #0
 801816c:	db3e      	blt.n	80181ec <_dtoa_r+0x224>
 801816e:	2300      	movs	r3, #0
 8018170:	44d0      	add	r8, sl
 8018172:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8018176:	9307      	str	r3, [sp, #28]
 8018178:	9b06      	ldr	r3, [sp, #24]
 801817a:	2b09      	cmp	r3, #9
 801817c:	f200 8090 	bhi.w	80182a0 <_dtoa_r+0x2d8>
 8018180:	2b05      	cmp	r3, #5
 8018182:	bfc4      	itt	gt
 8018184:	3b04      	subgt	r3, #4
 8018186:	9306      	strgt	r3, [sp, #24]
 8018188:	9b06      	ldr	r3, [sp, #24]
 801818a:	f1a3 0302 	sub.w	r3, r3, #2
 801818e:	bfcc      	ite	gt
 8018190:	2500      	movgt	r5, #0
 8018192:	2501      	movle	r5, #1
 8018194:	2b03      	cmp	r3, #3
 8018196:	f200 808f 	bhi.w	80182b8 <_dtoa_r+0x2f0>
 801819a:	e8df f003 	tbb	[pc, r3]
 801819e:	7f7d      	.short	0x7f7d
 80181a0:	7131      	.short	0x7131
 80181a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80181a6:	441d      	add	r5, r3
 80181a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80181ac:	2820      	cmp	r0, #32
 80181ae:	dd13      	ble.n	80181d8 <_dtoa_r+0x210>
 80181b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80181b4:	9b00      	ldr	r3, [sp, #0]
 80181b6:	fa08 f800 	lsl.w	r8, r8, r0
 80181ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80181be:	fa23 f000 	lsr.w	r0, r3, r0
 80181c2:	ea48 0000 	orr.w	r0, r8, r0
 80181c6:	f7f0 f8d5 	bl	8008374 <__aeabi_ui2d>
 80181ca:	2301      	movs	r3, #1
 80181cc:	4682      	mov	sl, r0
 80181ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80181d2:	3d01      	subs	r5, #1
 80181d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80181d6:	e772      	b.n	80180be <_dtoa_r+0xf6>
 80181d8:	9b00      	ldr	r3, [sp, #0]
 80181da:	f1c0 0020 	rsb	r0, r0, #32
 80181de:	fa03 f000 	lsl.w	r0, r3, r0
 80181e2:	e7f0      	b.n	80181c6 <_dtoa_r+0x1fe>
 80181e4:	2301      	movs	r3, #1
 80181e6:	e7b1      	b.n	801814c <_dtoa_r+0x184>
 80181e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80181ea:	e7b0      	b.n	801814e <_dtoa_r+0x186>
 80181ec:	9b05      	ldr	r3, [sp, #20]
 80181ee:	eba3 030a 	sub.w	r3, r3, sl
 80181f2:	9305      	str	r3, [sp, #20]
 80181f4:	f1ca 0300 	rsb	r3, sl, #0
 80181f8:	9307      	str	r3, [sp, #28]
 80181fa:	2300      	movs	r3, #0
 80181fc:	930e      	str	r3, [sp, #56]	; 0x38
 80181fe:	e7bb      	b.n	8018178 <_dtoa_r+0x1b0>
 8018200:	2301      	movs	r3, #1
 8018202:	930a      	str	r3, [sp, #40]	; 0x28
 8018204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018206:	2b00      	cmp	r3, #0
 8018208:	dd59      	ble.n	80182be <_dtoa_r+0x2f6>
 801820a:	9302      	str	r3, [sp, #8]
 801820c:	4699      	mov	r9, r3
 801820e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018210:	2200      	movs	r2, #0
 8018212:	6072      	str	r2, [r6, #4]
 8018214:	2204      	movs	r2, #4
 8018216:	f102 0014 	add.w	r0, r2, #20
 801821a:	4298      	cmp	r0, r3
 801821c:	6871      	ldr	r1, [r6, #4]
 801821e:	d953      	bls.n	80182c8 <_dtoa_r+0x300>
 8018220:	4620      	mov	r0, r4
 8018222:	f001 f9f7 	bl	8019614 <_Balloc>
 8018226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018228:	6030      	str	r0, [r6, #0]
 801822a:	f1b9 0f0e 	cmp.w	r9, #14
 801822e:	f8d3 b000 	ldr.w	fp, [r3]
 8018232:	f200 80e6 	bhi.w	8018402 <_dtoa_r+0x43a>
 8018236:	2d00      	cmp	r5, #0
 8018238:	f000 80e3 	beq.w	8018402 <_dtoa_r+0x43a>
 801823c:	ed9d 7b00 	vldr	d7, [sp]
 8018240:	f1ba 0f00 	cmp.w	sl, #0
 8018244:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8018248:	dd74      	ble.n	8018334 <_dtoa_r+0x36c>
 801824a:	4a2a      	ldr	r2, [pc, #168]	; (80182f4 <_dtoa_r+0x32c>)
 801824c:	f00a 030f 	and.w	r3, sl, #15
 8018250:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018254:	ed93 7b00 	vldr	d7, [r3]
 8018258:	ea4f 162a 	mov.w	r6, sl, asr #4
 801825c:	06f0      	lsls	r0, r6, #27
 801825e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018262:	d565      	bpl.n	8018330 <_dtoa_r+0x368>
 8018264:	4b24      	ldr	r3, [pc, #144]	; (80182f8 <_dtoa_r+0x330>)
 8018266:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801826a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801826e:	f7f0 fa25 	bl	80086bc <__aeabi_ddiv>
 8018272:	e9cd 0100 	strd	r0, r1, [sp]
 8018276:	f006 060f 	and.w	r6, r6, #15
 801827a:	2503      	movs	r5, #3
 801827c:	4f1e      	ldr	r7, [pc, #120]	; (80182f8 <_dtoa_r+0x330>)
 801827e:	e04c      	b.n	801831a <_dtoa_r+0x352>
 8018280:	2301      	movs	r3, #1
 8018282:	930a      	str	r3, [sp, #40]	; 0x28
 8018284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018286:	4453      	add	r3, sl
 8018288:	f103 0901 	add.w	r9, r3, #1
 801828c:	9302      	str	r3, [sp, #8]
 801828e:	464b      	mov	r3, r9
 8018290:	2b01      	cmp	r3, #1
 8018292:	bfb8      	it	lt
 8018294:	2301      	movlt	r3, #1
 8018296:	e7ba      	b.n	801820e <_dtoa_r+0x246>
 8018298:	2300      	movs	r3, #0
 801829a:	e7b2      	b.n	8018202 <_dtoa_r+0x23a>
 801829c:	2300      	movs	r3, #0
 801829e:	e7f0      	b.n	8018282 <_dtoa_r+0x2ba>
 80182a0:	2501      	movs	r5, #1
 80182a2:	2300      	movs	r3, #0
 80182a4:	9306      	str	r3, [sp, #24]
 80182a6:	950a      	str	r5, [sp, #40]	; 0x28
 80182a8:	f04f 33ff 	mov.w	r3, #4294967295
 80182ac:	9302      	str	r3, [sp, #8]
 80182ae:	4699      	mov	r9, r3
 80182b0:	2200      	movs	r2, #0
 80182b2:	2312      	movs	r3, #18
 80182b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80182b6:	e7aa      	b.n	801820e <_dtoa_r+0x246>
 80182b8:	2301      	movs	r3, #1
 80182ba:	930a      	str	r3, [sp, #40]	; 0x28
 80182bc:	e7f4      	b.n	80182a8 <_dtoa_r+0x2e0>
 80182be:	2301      	movs	r3, #1
 80182c0:	9302      	str	r3, [sp, #8]
 80182c2:	4699      	mov	r9, r3
 80182c4:	461a      	mov	r2, r3
 80182c6:	e7f5      	b.n	80182b4 <_dtoa_r+0x2ec>
 80182c8:	3101      	adds	r1, #1
 80182ca:	6071      	str	r1, [r6, #4]
 80182cc:	0052      	lsls	r2, r2, #1
 80182ce:	e7a2      	b.n	8018216 <_dtoa_r+0x24e>
 80182d0:	636f4361 	.word	0x636f4361
 80182d4:	3fd287a7 	.word	0x3fd287a7
 80182d8:	8b60c8b3 	.word	0x8b60c8b3
 80182dc:	3fc68a28 	.word	0x3fc68a28
 80182e0:	509f79fb 	.word	0x509f79fb
 80182e4:	3fd34413 	.word	0x3fd34413
 80182e8:	7ff00000 	.word	0x7ff00000
 80182ec:	0801b57c 	.word	0x0801b57c
 80182f0:	3ff80000 	.word	0x3ff80000
 80182f4:	0801b480 	.word	0x0801b480
 80182f8:	0801b458 	.word	0x0801b458
 80182fc:	0801b3e1 	.word	0x0801b3e1
 8018300:	07f1      	lsls	r1, r6, #31
 8018302:	d508      	bpl.n	8018316 <_dtoa_r+0x34e>
 8018304:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018308:	e9d7 2300 	ldrd	r2, r3, [r7]
 801830c:	f7f0 f8ac 	bl	8008468 <__aeabi_dmul>
 8018310:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018314:	3501      	adds	r5, #1
 8018316:	1076      	asrs	r6, r6, #1
 8018318:	3708      	adds	r7, #8
 801831a:	2e00      	cmp	r6, #0
 801831c:	d1f0      	bne.n	8018300 <_dtoa_r+0x338>
 801831e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018322:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018326:	f7f0 f9c9 	bl	80086bc <__aeabi_ddiv>
 801832a:	e9cd 0100 	strd	r0, r1, [sp]
 801832e:	e01a      	b.n	8018366 <_dtoa_r+0x39e>
 8018330:	2502      	movs	r5, #2
 8018332:	e7a3      	b.n	801827c <_dtoa_r+0x2b4>
 8018334:	f000 80a0 	beq.w	8018478 <_dtoa_r+0x4b0>
 8018338:	f1ca 0600 	rsb	r6, sl, #0
 801833c:	4b9f      	ldr	r3, [pc, #636]	; (80185bc <_dtoa_r+0x5f4>)
 801833e:	4fa0      	ldr	r7, [pc, #640]	; (80185c0 <_dtoa_r+0x5f8>)
 8018340:	f006 020f 	and.w	r2, r6, #15
 8018344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801834c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018350:	f7f0 f88a 	bl	8008468 <__aeabi_dmul>
 8018354:	e9cd 0100 	strd	r0, r1, [sp]
 8018358:	1136      	asrs	r6, r6, #4
 801835a:	2300      	movs	r3, #0
 801835c:	2502      	movs	r5, #2
 801835e:	2e00      	cmp	r6, #0
 8018360:	d17f      	bne.n	8018462 <_dtoa_r+0x49a>
 8018362:	2b00      	cmp	r3, #0
 8018364:	d1e1      	bne.n	801832a <_dtoa_r+0x362>
 8018366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018368:	2b00      	cmp	r3, #0
 801836a:	f000 8087 	beq.w	801847c <_dtoa_r+0x4b4>
 801836e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018372:	2200      	movs	r2, #0
 8018374:	4b93      	ldr	r3, [pc, #588]	; (80185c4 <_dtoa_r+0x5fc>)
 8018376:	4630      	mov	r0, r6
 8018378:	4639      	mov	r1, r7
 801837a:	f7f0 fae7 	bl	800894c <__aeabi_dcmplt>
 801837e:	2800      	cmp	r0, #0
 8018380:	d07c      	beq.n	801847c <_dtoa_r+0x4b4>
 8018382:	f1b9 0f00 	cmp.w	r9, #0
 8018386:	d079      	beq.n	801847c <_dtoa_r+0x4b4>
 8018388:	9b02      	ldr	r3, [sp, #8]
 801838a:	2b00      	cmp	r3, #0
 801838c:	dd35      	ble.n	80183fa <_dtoa_r+0x432>
 801838e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018392:	9308      	str	r3, [sp, #32]
 8018394:	4639      	mov	r1, r7
 8018396:	2200      	movs	r2, #0
 8018398:	4b8b      	ldr	r3, [pc, #556]	; (80185c8 <_dtoa_r+0x600>)
 801839a:	4630      	mov	r0, r6
 801839c:	f7f0 f864 	bl	8008468 <__aeabi_dmul>
 80183a0:	e9cd 0100 	strd	r0, r1, [sp]
 80183a4:	9f02      	ldr	r7, [sp, #8]
 80183a6:	3501      	adds	r5, #1
 80183a8:	4628      	mov	r0, r5
 80183aa:	f7ef fff3 	bl	8008394 <__aeabi_i2d>
 80183ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80183b2:	f7f0 f859 	bl	8008468 <__aeabi_dmul>
 80183b6:	2200      	movs	r2, #0
 80183b8:	4b84      	ldr	r3, [pc, #528]	; (80185cc <_dtoa_r+0x604>)
 80183ba:	f7ef fe9f 	bl	80080fc <__adddf3>
 80183be:	4605      	mov	r5, r0
 80183c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80183c4:	2f00      	cmp	r7, #0
 80183c6:	d15d      	bne.n	8018484 <_dtoa_r+0x4bc>
 80183c8:	2200      	movs	r2, #0
 80183ca:	4b81      	ldr	r3, [pc, #516]	; (80185d0 <_dtoa_r+0x608>)
 80183cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183d0:	f7ef fe92 	bl	80080f8 <__aeabi_dsub>
 80183d4:	462a      	mov	r2, r5
 80183d6:	4633      	mov	r3, r6
 80183d8:	e9cd 0100 	strd	r0, r1, [sp]
 80183dc:	f7f0 fad4 	bl	8008988 <__aeabi_dcmpgt>
 80183e0:	2800      	cmp	r0, #0
 80183e2:	f040 8288 	bne.w	80188f6 <_dtoa_r+0x92e>
 80183e6:	462a      	mov	r2, r5
 80183e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80183ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183f0:	f7f0 faac 	bl	800894c <__aeabi_dcmplt>
 80183f4:	2800      	cmp	r0, #0
 80183f6:	f040 827c 	bne.w	80188f2 <_dtoa_r+0x92a>
 80183fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80183fe:	e9cd 2300 	strd	r2, r3, [sp]
 8018402:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018404:	2b00      	cmp	r3, #0
 8018406:	f2c0 8150 	blt.w	80186aa <_dtoa_r+0x6e2>
 801840a:	f1ba 0f0e 	cmp.w	sl, #14
 801840e:	f300 814c 	bgt.w	80186aa <_dtoa_r+0x6e2>
 8018412:	4b6a      	ldr	r3, [pc, #424]	; (80185bc <_dtoa_r+0x5f4>)
 8018414:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018418:	ed93 7b00 	vldr	d7, [r3]
 801841c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801841e:	2b00      	cmp	r3, #0
 8018420:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018424:	f280 80d8 	bge.w	80185d8 <_dtoa_r+0x610>
 8018428:	f1b9 0f00 	cmp.w	r9, #0
 801842c:	f300 80d4 	bgt.w	80185d8 <_dtoa_r+0x610>
 8018430:	f040 825e 	bne.w	80188f0 <_dtoa_r+0x928>
 8018434:	2200      	movs	r2, #0
 8018436:	4b66      	ldr	r3, [pc, #408]	; (80185d0 <_dtoa_r+0x608>)
 8018438:	ec51 0b17 	vmov	r0, r1, d7
 801843c:	f7f0 f814 	bl	8008468 <__aeabi_dmul>
 8018440:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018444:	f7f0 fa96 	bl	8008974 <__aeabi_dcmpge>
 8018448:	464f      	mov	r7, r9
 801844a:	464e      	mov	r6, r9
 801844c:	2800      	cmp	r0, #0
 801844e:	f040 8234 	bne.w	80188ba <_dtoa_r+0x8f2>
 8018452:	2331      	movs	r3, #49	; 0x31
 8018454:	f10b 0501 	add.w	r5, fp, #1
 8018458:	f88b 3000 	strb.w	r3, [fp]
 801845c:	f10a 0a01 	add.w	sl, sl, #1
 8018460:	e22f      	b.n	80188c2 <_dtoa_r+0x8fa>
 8018462:	07f2      	lsls	r2, r6, #31
 8018464:	d505      	bpl.n	8018472 <_dtoa_r+0x4aa>
 8018466:	e9d7 2300 	ldrd	r2, r3, [r7]
 801846a:	f7ef fffd 	bl	8008468 <__aeabi_dmul>
 801846e:	3501      	adds	r5, #1
 8018470:	2301      	movs	r3, #1
 8018472:	1076      	asrs	r6, r6, #1
 8018474:	3708      	adds	r7, #8
 8018476:	e772      	b.n	801835e <_dtoa_r+0x396>
 8018478:	2502      	movs	r5, #2
 801847a:	e774      	b.n	8018366 <_dtoa_r+0x39e>
 801847c:	f8cd a020 	str.w	sl, [sp, #32]
 8018480:	464f      	mov	r7, r9
 8018482:	e791      	b.n	80183a8 <_dtoa_r+0x3e0>
 8018484:	4b4d      	ldr	r3, [pc, #308]	; (80185bc <_dtoa_r+0x5f4>)
 8018486:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801848a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801848e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018490:	2b00      	cmp	r3, #0
 8018492:	d047      	beq.n	8018524 <_dtoa_r+0x55c>
 8018494:	4602      	mov	r2, r0
 8018496:	460b      	mov	r3, r1
 8018498:	2000      	movs	r0, #0
 801849a:	494e      	ldr	r1, [pc, #312]	; (80185d4 <_dtoa_r+0x60c>)
 801849c:	f7f0 f90e 	bl	80086bc <__aeabi_ddiv>
 80184a0:	462a      	mov	r2, r5
 80184a2:	4633      	mov	r3, r6
 80184a4:	f7ef fe28 	bl	80080f8 <__aeabi_dsub>
 80184a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80184ac:	465d      	mov	r5, fp
 80184ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184b2:	f7f0 fa89 	bl	80089c8 <__aeabi_d2iz>
 80184b6:	4606      	mov	r6, r0
 80184b8:	f7ef ff6c 	bl	8008394 <__aeabi_i2d>
 80184bc:	4602      	mov	r2, r0
 80184be:	460b      	mov	r3, r1
 80184c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184c4:	f7ef fe18 	bl	80080f8 <__aeabi_dsub>
 80184c8:	3630      	adds	r6, #48	; 0x30
 80184ca:	f805 6b01 	strb.w	r6, [r5], #1
 80184ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80184d2:	e9cd 0100 	strd	r0, r1, [sp]
 80184d6:	f7f0 fa39 	bl	800894c <__aeabi_dcmplt>
 80184da:	2800      	cmp	r0, #0
 80184dc:	d163      	bne.n	80185a6 <_dtoa_r+0x5de>
 80184de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80184e2:	2000      	movs	r0, #0
 80184e4:	4937      	ldr	r1, [pc, #220]	; (80185c4 <_dtoa_r+0x5fc>)
 80184e6:	f7ef fe07 	bl	80080f8 <__aeabi_dsub>
 80184ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80184ee:	f7f0 fa2d 	bl	800894c <__aeabi_dcmplt>
 80184f2:	2800      	cmp	r0, #0
 80184f4:	f040 80b7 	bne.w	8018666 <_dtoa_r+0x69e>
 80184f8:	eba5 030b 	sub.w	r3, r5, fp
 80184fc:	429f      	cmp	r7, r3
 80184fe:	f77f af7c 	ble.w	80183fa <_dtoa_r+0x432>
 8018502:	2200      	movs	r2, #0
 8018504:	4b30      	ldr	r3, [pc, #192]	; (80185c8 <_dtoa_r+0x600>)
 8018506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801850a:	f7ef ffad 	bl	8008468 <__aeabi_dmul>
 801850e:	2200      	movs	r2, #0
 8018510:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018514:	4b2c      	ldr	r3, [pc, #176]	; (80185c8 <_dtoa_r+0x600>)
 8018516:	e9dd 0100 	ldrd	r0, r1, [sp]
 801851a:	f7ef ffa5 	bl	8008468 <__aeabi_dmul>
 801851e:	e9cd 0100 	strd	r0, r1, [sp]
 8018522:	e7c4      	b.n	80184ae <_dtoa_r+0x4e6>
 8018524:	462a      	mov	r2, r5
 8018526:	4633      	mov	r3, r6
 8018528:	f7ef ff9e 	bl	8008468 <__aeabi_dmul>
 801852c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018530:	eb0b 0507 	add.w	r5, fp, r7
 8018534:	465e      	mov	r6, fp
 8018536:	e9dd 0100 	ldrd	r0, r1, [sp]
 801853a:	f7f0 fa45 	bl	80089c8 <__aeabi_d2iz>
 801853e:	4607      	mov	r7, r0
 8018540:	f7ef ff28 	bl	8008394 <__aeabi_i2d>
 8018544:	3730      	adds	r7, #48	; 0x30
 8018546:	4602      	mov	r2, r0
 8018548:	460b      	mov	r3, r1
 801854a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801854e:	f7ef fdd3 	bl	80080f8 <__aeabi_dsub>
 8018552:	f806 7b01 	strb.w	r7, [r6], #1
 8018556:	42ae      	cmp	r6, r5
 8018558:	e9cd 0100 	strd	r0, r1, [sp]
 801855c:	f04f 0200 	mov.w	r2, #0
 8018560:	d126      	bne.n	80185b0 <_dtoa_r+0x5e8>
 8018562:	4b1c      	ldr	r3, [pc, #112]	; (80185d4 <_dtoa_r+0x60c>)
 8018564:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018568:	f7ef fdc8 	bl	80080fc <__adddf3>
 801856c:	4602      	mov	r2, r0
 801856e:	460b      	mov	r3, r1
 8018570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018574:	f7f0 fa08 	bl	8008988 <__aeabi_dcmpgt>
 8018578:	2800      	cmp	r0, #0
 801857a:	d174      	bne.n	8018666 <_dtoa_r+0x69e>
 801857c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018580:	2000      	movs	r0, #0
 8018582:	4914      	ldr	r1, [pc, #80]	; (80185d4 <_dtoa_r+0x60c>)
 8018584:	f7ef fdb8 	bl	80080f8 <__aeabi_dsub>
 8018588:	4602      	mov	r2, r0
 801858a:	460b      	mov	r3, r1
 801858c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018590:	f7f0 f9dc 	bl	800894c <__aeabi_dcmplt>
 8018594:	2800      	cmp	r0, #0
 8018596:	f43f af30 	beq.w	80183fa <_dtoa_r+0x432>
 801859a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801859e:	2b30      	cmp	r3, #48	; 0x30
 80185a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80185a4:	d002      	beq.n	80185ac <_dtoa_r+0x5e4>
 80185a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80185aa:	e04a      	b.n	8018642 <_dtoa_r+0x67a>
 80185ac:	4615      	mov	r5, r2
 80185ae:	e7f4      	b.n	801859a <_dtoa_r+0x5d2>
 80185b0:	4b05      	ldr	r3, [pc, #20]	; (80185c8 <_dtoa_r+0x600>)
 80185b2:	f7ef ff59 	bl	8008468 <__aeabi_dmul>
 80185b6:	e9cd 0100 	strd	r0, r1, [sp]
 80185ba:	e7bc      	b.n	8018536 <_dtoa_r+0x56e>
 80185bc:	0801b480 	.word	0x0801b480
 80185c0:	0801b458 	.word	0x0801b458
 80185c4:	3ff00000 	.word	0x3ff00000
 80185c8:	40240000 	.word	0x40240000
 80185cc:	401c0000 	.word	0x401c0000
 80185d0:	40140000 	.word	0x40140000
 80185d4:	3fe00000 	.word	0x3fe00000
 80185d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80185dc:	465d      	mov	r5, fp
 80185de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80185e2:	4630      	mov	r0, r6
 80185e4:	4639      	mov	r1, r7
 80185e6:	f7f0 f869 	bl	80086bc <__aeabi_ddiv>
 80185ea:	f7f0 f9ed 	bl	80089c8 <__aeabi_d2iz>
 80185ee:	4680      	mov	r8, r0
 80185f0:	f7ef fed0 	bl	8008394 <__aeabi_i2d>
 80185f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80185f8:	f7ef ff36 	bl	8008468 <__aeabi_dmul>
 80185fc:	4602      	mov	r2, r0
 80185fe:	460b      	mov	r3, r1
 8018600:	4630      	mov	r0, r6
 8018602:	4639      	mov	r1, r7
 8018604:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018608:	f7ef fd76 	bl	80080f8 <__aeabi_dsub>
 801860c:	f805 6b01 	strb.w	r6, [r5], #1
 8018610:	eba5 060b 	sub.w	r6, r5, fp
 8018614:	45b1      	cmp	r9, r6
 8018616:	4602      	mov	r2, r0
 8018618:	460b      	mov	r3, r1
 801861a:	d139      	bne.n	8018690 <_dtoa_r+0x6c8>
 801861c:	f7ef fd6e 	bl	80080fc <__adddf3>
 8018620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018624:	4606      	mov	r6, r0
 8018626:	460f      	mov	r7, r1
 8018628:	f7f0 f9ae 	bl	8008988 <__aeabi_dcmpgt>
 801862c:	b9c8      	cbnz	r0, 8018662 <_dtoa_r+0x69a>
 801862e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018632:	4630      	mov	r0, r6
 8018634:	4639      	mov	r1, r7
 8018636:	f7f0 f97f 	bl	8008938 <__aeabi_dcmpeq>
 801863a:	b110      	cbz	r0, 8018642 <_dtoa_r+0x67a>
 801863c:	f018 0f01 	tst.w	r8, #1
 8018640:	d10f      	bne.n	8018662 <_dtoa_r+0x69a>
 8018642:	9904      	ldr	r1, [sp, #16]
 8018644:	4620      	mov	r0, r4
 8018646:	f001 f819 	bl	801967c <_Bfree>
 801864a:	2300      	movs	r3, #0
 801864c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801864e:	702b      	strb	r3, [r5, #0]
 8018650:	f10a 0301 	add.w	r3, sl, #1
 8018654:	6013      	str	r3, [r2, #0]
 8018656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018658:	2b00      	cmp	r3, #0
 801865a:	f000 8241 	beq.w	8018ae0 <_dtoa_r+0xb18>
 801865e:	601d      	str	r5, [r3, #0]
 8018660:	e23e      	b.n	8018ae0 <_dtoa_r+0xb18>
 8018662:	f8cd a020 	str.w	sl, [sp, #32]
 8018666:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801866a:	2a39      	cmp	r2, #57	; 0x39
 801866c:	f105 33ff 	add.w	r3, r5, #4294967295
 8018670:	d108      	bne.n	8018684 <_dtoa_r+0x6bc>
 8018672:	459b      	cmp	fp, r3
 8018674:	d10a      	bne.n	801868c <_dtoa_r+0x6c4>
 8018676:	9b08      	ldr	r3, [sp, #32]
 8018678:	3301      	adds	r3, #1
 801867a:	9308      	str	r3, [sp, #32]
 801867c:	2330      	movs	r3, #48	; 0x30
 801867e:	f88b 3000 	strb.w	r3, [fp]
 8018682:	465b      	mov	r3, fp
 8018684:	781a      	ldrb	r2, [r3, #0]
 8018686:	3201      	adds	r2, #1
 8018688:	701a      	strb	r2, [r3, #0]
 801868a:	e78c      	b.n	80185a6 <_dtoa_r+0x5de>
 801868c:	461d      	mov	r5, r3
 801868e:	e7ea      	b.n	8018666 <_dtoa_r+0x69e>
 8018690:	2200      	movs	r2, #0
 8018692:	4b9b      	ldr	r3, [pc, #620]	; (8018900 <_dtoa_r+0x938>)
 8018694:	f7ef fee8 	bl	8008468 <__aeabi_dmul>
 8018698:	2200      	movs	r2, #0
 801869a:	2300      	movs	r3, #0
 801869c:	4606      	mov	r6, r0
 801869e:	460f      	mov	r7, r1
 80186a0:	f7f0 f94a 	bl	8008938 <__aeabi_dcmpeq>
 80186a4:	2800      	cmp	r0, #0
 80186a6:	d09a      	beq.n	80185de <_dtoa_r+0x616>
 80186a8:	e7cb      	b.n	8018642 <_dtoa_r+0x67a>
 80186aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186ac:	2a00      	cmp	r2, #0
 80186ae:	f000 808b 	beq.w	80187c8 <_dtoa_r+0x800>
 80186b2:	9a06      	ldr	r2, [sp, #24]
 80186b4:	2a01      	cmp	r2, #1
 80186b6:	dc6e      	bgt.n	8018796 <_dtoa_r+0x7ce>
 80186b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80186ba:	2a00      	cmp	r2, #0
 80186bc:	d067      	beq.n	801878e <_dtoa_r+0x7c6>
 80186be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80186c2:	9f07      	ldr	r7, [sp, #28]
 80186c4:	9d05      	ldr	r5, [sp, #20]
 80186c6:	9a05      	ldr	r2, [sp, #20]
 80186c8:	2101      	movs	r1, #1
 80186ca:	441a      	add	r2, r3
 80186cc:	4620      	mov	r0, r4
 80186ce:	9205      	str	r2, [sp, #20]
 80186d0:	4498      	add	r8, r3
 80186d2:	f001 f8b1 	bl	8019838 <__i2b>
 80186d6:	4606      	mov	r6, r0
 80186d8:	2d00      	cmp	r5, #0
 80186da:	dd0c      	ble.n	80186f6 <_dtoa_r+0x72e>
 80186dc:	f1b8 0f00 	cmp.w	r8, #0
 80186e0:	dd09      	ble.n	80186f6 <_dtoa_r+0x72e>
 80186e2:	4545      	cmp	r5, r8
 80186e4:	9a05      	ldr	r2, [sp, #20]
 80186e6:	462b      	mov	r3, r5
 80186e8:	bfa8      	it	ge
 80186ea:	4643      	movge	r3, r8
 80186ec:	1ad2      	subs	r2, r2, r3
 80186ee:	9205      	str	r2, [sp, #20]
 80186f0:	1aed      	subs	r5, r5, r3
 80186f2:	eba8 0803 	sub.w	r8, r8, r3
 80186f6:	9b07      	ldr	r3, [sp, #28]
 80186f8:	b1eb      	cbz	r3, 8018736 <_dtoa_r+0x76e>
 80186fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d067      	beq.n	80187d0 <_dtoa_r+0x808>
 8018700:	b18f      	cbz	r7, 8018726 <_dtoa_r+0x75e>
 8018702:	4631      	mov	r1, r6
 8018704:	463a      	mov	r2, r7
 8018706:	4620      	mov	r0, r4
 8018708:	f001 f936 	bl	8019978 <__pow5mult>
 801870c:	9a04      	ldr	r2, [sp, #16]
 801870e:	4601      	mov	r1, r0
 8018710:	4606      	mov	r6, r0
 8018712:	4620      	mov	r0, r4
 8018714:	f001 f899 	bl	801984a <__multiply>
 8018718:	9904      	ldr	r1, [sp, #16]
 801871a:	9008      	str	r0, [sp, #32]
 801871c:	4620      	mov	r0, r4
 801871e:	f000 ffad 	bl	801967c <_Bfree>
 8018722:	9b08      	ldr	r3, [sp, #32]
 8018724:	9304      	str	r3, [sp, #16]
 8018726:	9b07      	ldr	r3, [sp, #28]
 8018728:	1bda      	subs	r2, r3, r7
 801872a:	d004      	beq.n	8018736 <_dtoa_r+0x76e>
 801872c:	9904      	ldr	r1, [sp, #16]
 801872e:	4620      	mov	r0, r4
 8018730:	f001 f922 	bl	8019978 <__pow5mult>
 8018734:	9004      	str	r0, [sp, #16]
 8018736:	2101      	movs	r1, #1
 8018738:	4620      	mov	r0, r4
 801873a:	f001 f87d 	bl	8019838 <__i2b>
 801873e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018740:	4607      	mov	r7, r0
 8018742:	2b00      	cmp	r3, #0
 8018744:	f000 81d0 	beq.w	8018ae8 <_dtoa_r+0xb20>
 8018748:	461a      	mov	r2, r3
 801874a:	4601      	mov	r1, r0
 801874c:	4620      	mov	r0, r4
 801874e:	f001 f913 	bl	8019978 <__pow5mult>
 8018752:	9b06      	ldr	r3, [sp, #24]
 8018754:	2b01      	cmp	r3, #1
 8018756:	4607      	mov	r7, r0
 8018758:	dc40      	bgt.n	80187dc <_dtoa_r+0x814>
 801875a:	9b00      	ldr	r3, [sp, #0]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d139      	bne.n	80187d4 <_dtoa_r+0x80c>
 8018760:	9b01      	ldr	r3, [sp, #4]
 8018762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018766:	2b00      	cmp	r3, #0
 8018768:	d136      	bne.n	80187d8 <_dtoa_r+0x810>
 801876a:	9b01      	ldr	r3, [sp, #4]
 801876c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018770:	0d1b      	lsrs	r3, r3, #20
 8018772:	051b      	lsls	r3, r3, #20
 8018774:	b12b      	cbz	r3, 8018782 <_dtoa_r+0x7ba>
 8018776:	9b05      	ldr	r3, [sp, #20]
 8018778:	3301      	adds	r3, #1
 801877a:	9305      	str	r3, [sp, #20]
 801877c:	f108 0801 	add.w	r8, r8, #1
 8018780:	2301      	movs	r3, #1
 8018782:	9307      	str	r3, [sp, #28]
 8018784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018786:	2b00      	cmp	r3, #0
 8018788:	d12a      	bne.n	80187e0 <_dtoa_r+0x818>
 801878a:	2001      	movs	r0, #1
 801878c:	e030      	b.n	80187f0 <_dtoa_r+0x828>
 801878e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018790:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018794:	e795      	b.n	80186c2 <_dtoa_r+0x6fa>
 8018796:	9b07      	ldr	r3, [sp, #28]
 8018798:	f109 37ff 	add.w	r7, r9, #4294967295
 801879c:	42bb      	cmp	r3, r7
 801879e:	bfbf      	itttt	lt
 80187a0:	9b07      	ldrlt	r3, [sp, #28]
 80187a2:	9707      	strlt	r7, [sp, #28]
 80187a4:	1afa      	sublt	r2, r7, r3
 80187a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80187a8:	bfbb      	ittet	lt
 80187aa:	189b      	addlt	r3, r3, r2
 80187ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80187ae:	1bdf      	subge	r7, r3, r7
 80187b0:	2700      	movlt	r7, #0
 80187b2:	f1b9 0f00 	cmp.w	r9, #0
 80187b6:	bfb5      	itete	lt
 80187b8:	9b05      	ldrlt	r3, [sp, #20]
 80187ba:	9d05      	ldrge	r5, [sp, #20]
 80187bc:	eba3 0509 	sublt.w	r5, r3, r9
 80187c0:	464b      	movge	r3, r9
 80187c2:	bfb8      	it	lt
 80187c4:	2300      	movlt	r3, #0
 80187c6:	e77e      	b.n	80186c6 <_dtoa_r+0x6fe>
 80187c8:	9f07      	ldr	r7, [sp, #28]
 80187ca:	9d05      	ldr	r5, [sp, #20]
 80187cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80187ce:	e783      	b.n	80186d8 <_dtoa_r+0x710>
 80187d0:	9a07      	ldr	r2, [sp, #28]
 80187d2:	e7ab      	b.n	801872c <_dtoa_r+0x764>
 80187d4:	2300      	movs	r3, #0
 80187d6:	e7d4      	b.n	8018782 <_dtoa_r+0x7ba>
 80187d8:	9b00      	ldr	r3, [sp, #0]
 80187da:	e7d2      	b.n	8018782 <_dtoa_r+0x7ba>
 80187dc:	2300      	movs	r3, #0
 80187de:	9307      	str	r3, [sp, #28]
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80187e6:	6918      	ldr	r0, [r3, #16]
 80187e8:	f000 ffd8 	bl	801979c <__hi0bits>
 80187ec:	f1c0 0020 	rsb	r0, r0, #32
 80187f0:	4440      	add	r0, r8
 80187f2:	f010 001f 	ands.w	r0, r0, #31
 80187f6:	d047      	beq.n	8018888 <_dtoa_r+0x8c0>
 80187f8:	f1c0 0320 	rsb	r3, r0, #32
 80187fc:	2b04      	cmp	r3, #4
 80187fe:	dd3b      	ble.n	8018878 <_dtoa_r+0x8b0>
 8018800:	9b05      	ldr	r3, [sp, #20]
 8018802:	f1c0 001c 	rsb	r0, r0, #28
 8018806:	4403      	add	r3, r0
 8018808:	9305      	str	r3, [sp, #20]
 801880a:	4405      	add	r5, r0
 801880c:	4480      	add	r8, r0
 801880e:	9b05      	ldr	r3, [sp, #20]
 8018810:	2b00      	cmp	r3, #0
 8018812:	dd05      	ble.n	8018820 <_dtoa_r+0x858>
 8018814:	461a      	mov	r2, r3
 8018816:	9904      	ldr	r1, [sp, #16]
 8018818:	4620      	mov	r0, r4
 801881a:	f001 f8fb 	bl	8019a14 <__lshift>
 801881e:	9004      	str	r0, [sp, #16]
 8018820:	f1b8 0f00 	cmp.w	r8, #0
 8018824:	dd05      	ble.n	8018832 <_dtoa_r+0x86a>
 8018826:	4639      	mov	r1, r7
 8018828:	4642      	mov	r2, r8
 801882a:	4620      	mov	r0, r4
 801882c:	f001 f8f2 	bl	8019a14 <__lshift>
 8018830:	4607      	mov	r7, r0
 8018832:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018834:	b353      	cbz	r3, 801888c <_dtoa_r+0x8c4>
 8018836:	4639      	mov	r1, r7
 8018838:	9804      	ldr	r0, [sp, #16]
 801883a:	f001 f93f 	bl	8019abc <__mcmp>
 801883e:	2800      	cmp	r0, #0
 8018840:	da24      	bge.n	801888c <_dtoa_r+0x8c4>
 8018842:	2300      	movs	r3, #0
 8018844:	220a      	movs	r2, #10
 8018846:	9904      	ldr	r1, [sp, #16]
 8018848:	4620      	mov	r0, r4
 801884a:	f000 ff2e 	bl	80196aa <__multadd>
 801884e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018850:	9004      	str	r0, [sp, #16]
 8018852:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018856:	2b00      	cmp	r3, #0
 8018858:	f000 814d 	beq.w	8018af6 <_dtoa_r+0xb2e>
 801885c:	2300      	movs	r3, #0
 801885e:	4631      	mov	r1, r6
 8018860:	220a      	movs	r2, #10
 8018862:	4620      	mov	r0, r4
 8018864:	f000 ff21 	bl	80196aa <__multadd>
 8018868:	9b02      	ldr	r3, [sp, #8]
 801886a:	2b00      	cmp	r3, #0
 801886c:	4606      	mov	r6, r0
 801886e:	dc4f      	bgt.n	8018910 <_dtoa_r+0x948>
 8018870:	9b06      	ldr	r3, [sp, #24]
 8018872:	2b02      	cmp	r3, #2
 8018874:	dd4c      	ble.n	8018910 <_dtoa_r+0x948>
 8018876:	e011      	b.n	801889c <_dtoa_r+0x8d4>
 8018878:	d0c9      	beq.n	801880e <_dtoa_r+0x846>
 801887a:	9a05      	ldr	r2, [sp, #20]
 801887c:	331c      	adds	r3, #28
 801887e:	441a      	add	r2, r3
 8018880:	9205      	str	r2, [sp, #20]
 8018882:	441d      	add	r5, r3
 8018884:	4498      	add	r8, r3
 8018886:	e7c2      	b.n	801880e <_dtoa_r+0x846>
 8018888:	4603      	mov	r3, r0
 801888a:	e7f6      	b.n	801887a <_dtoa_r+0x8b2>
 801888c:	f1b9 0f00 	cmp.w	r9, #0
 8018890:	dc38      	bgt.n	8018904 <_dtoa_r+0x93c>
 8018892:	9b06      	ldr	r3, [sp, #24]
 8018894:	2b02      	cmp	r3, #2
 8018896:	dd35      	ble.n	8018904 <_dtoa_r+0x93c>
 8018898:	f8cd 9008 	str.w	r9, [sp, #8]
 801889c:	9b02      	ldr	r3, [sp, #8]
 801889e:	b963      	cbnz	r3, 80188ba <_dtoa_r+0x8f2>
 80188a0:	4639      	mov	r1, r7
 80188a2:	2205      	movs	r2, #5
 80188a4:	4620      	mov	r0, r4
 80188a6:	f000 ff00 	bl	80196aa <__multadd>
 80188aa:	4601      	mov	r1, r0
 80188ac:	4607      	mov	r7, r0
 80188ae:	9804      	ldr	r0, [sp, #16]
 80188b0:	f001 f904 	bl	8019abc <__mcmp>
 80188b4:	2800      	cmp	r0, #0
 80188b6:	f73f adcc 	bgt.w	8018452 <_dtoa_r+0x48a>
 80188ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188bc:	465d      	mov	r5, fp
 80188be:	ea6f 0a03 	mvn.w	sl, r3
 80188c2:	f04f 0900 	mov.w	r9, #0
 80188c6:	4639      	mov	r1, r7
 80188c8:	4620      	mov	r0, r4
 80188ca:	f000 fed7 	bl	801967c <_Bfree>
 80188ce:	2e00      	cmp	r6, #0
 80188d0:	f43f aeb7 	beq.w	8018642 <_dtoa_r+0x67a>
 80188d4:	f1b9 0f00 	cmp.w	r9, #0
 80188d8:	d005      	beq.n	80188e6 <_dtoa_r+0x91e>
 80188da:	45b1      	cmp	r9, r6
 80188dc:	d003      	beq.n	80188e6 <_dtoa_r+0x91e>
 80188de:	4649      	mov	r1, r9
 80188e0:	4620      	mov	r0, r4
 80188e2:	f000 fecb 	bl	801967c <_Bfree>
 80188e6:	4631      	mov	r1, r6
 80188e8:	4620      	mov	r0, r4
 80188ea:	f000 fec7 	bl	801967c <_Bfree>
 80188ee:	e6a8      	b.n	8018642 <_dtoa_r+0x67a>
 80188f0:	2700      	movs	r7, #0
 80188f2:	463e      	mov	r6, r7
 80188f4:	e7e1      	b.n	80188ba <_dtoa_r+0x8f2>
 80188f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80188fa:	463e      	mov	r6, r7
 80188fc:	e5a9      	b.n	8018452 <_dtoa_r+0x48a>
 80188fe:	bf00      	nop
 8018900:	40240000 	.word	0x40240000
 8018904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018906:	f8cd 9008 	str.w	r9, [sp, #8]
 801890a:	2b00      	cmp	r3, #0
 801890c:	f000 80fa 	beq.w	8018b04 <_dtoa_r+0xb3c>
 8018910:	2d00      	cmp	r5, #0
 8018912:	dd05      	ble.n	8018920 <_dtoa_r+0x958>
 8018914:	4631      	mov	r1, r6
 8018916:	462a      	mov	r2, r5
 8018918:	4620      	mov	r0, r4
 801891a:	f001 f87b 	bl	8019a14 <__lshift>
 801891e:	4606      	mov	r6, r0
 8018920:	9b07      	ldr	r3, [sp, #28]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d04c      	beq.n	80189c0 <_dtoa_r+0x9f8>
 8018926:	6871      	ldr	r1, [r6, #4]
 8018928:	4620      	mov	r0, r4
 801892a:	f000 fe73 	bl	8019614 <_Balloc>
 801892e:	6932      	ldr	r2, [r6, #16]
 8018930:	3202      	adds	r2, #2
 8018932:	4605      	mov	r5, r0
 8018934:	0092      	lsls	r2, r2, #2
 8018936:	f106 010c 	add.w	r1, r6, #12
 801893a:	300c      	adds	r0, #12
 801893c:	f7fd fb84 	bl	8016048 <memcpy>
 8018940:	2201      	movs	r2, #1
 8018942:	4629      	mov	r1, r5
 8018944:	4620      	mov	r0, r4
 8018946:	f001 f865 	bl	8019a14 <__lshift>
 801894a:	9b00      	ldr	r3, [sp, #0]
 801894c:	f8cd b014 	str.w	fp, [sp, #20]
 8018950:	f003 0301 	and.w	r3, r3, #1
 8018954:	46b1      	mov	r9, r6
 8018956:	9307      	str	r3, [sp, #28]
 8018958:	4606      	mov	r6, r0
 801895a:	4639      	mov	r1, r7
 801895c:	9804      	ldr	r0, [sp, #16]
 801895e:	f7ff faa5 	bl	8017eac <quorem>
 8018962:	4649      	mov	r1, r9
 8018964:	4605      	mov	r5, r0
 8018966:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801896a:	9804      	ldr	r0, [sp, #16]
 801896c:	f001 f8a6 	bl	8019abc <__mcmp>
 8018970:	4632      	mov	r2, r6
 8018972:	9000      	str	r0, [sp, #0]
 8018974:	4639      	mov	r1, r7
 8018976:	4620      	mov	r0, r4
 8018978:	f001 f8ba 	bl	8019af0 <__mdiff>
 801897c:	68c3      	ldr	r3, [r0, #12]
 801897e:	4602      	mov	r2, r0
 8018980:	bb03      	cbnz	r3, 80189c4 <_dtoa_r+0x9fc>
 8018982:	4601      	mov	r1, r0
 8018984:	9008      	str	r0, [sp, #32]
 8018986:	9804      	ldr	r0, [sp, #16]
 8018988:	f001 f898 	bl	8019abc <__mcmp>
 801898c:	9a08      	ldr	r2, [sp, #32]
 801898e:	4603      	mov	r3, r0
 8018990:	4611      	mov	r1, r2
 8018992:	4620      	mov	r0, r4
 8018994:	9308      	str	r3, [sp, #32]
 8018996:	f000 fe71 	bl	801967c <_Bfree>
 801899a:	9b08      	ldr	r3, [sp, #32]
 801899c:	b9a3      	cbnz	r3, 80189c8 <_dtoa_r+0xa00>
 801899e:	9a06      	ldr	r2, [sp, #24]
 80189a0:	b992      	cbnz	r2, 80189c8 <_dtoa_r+0xa00>
 80189a2:	9a07      	ldr	r2, [sp, #28]
 80189a4:	b982      	cbnz	r2, 80189c8 <_dtoa_r+0xa00>
 80189a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80189aa:	d029      	beq.n	8018a00 <_dtoa_r+0xa38>
 80189ac:	9b00      	ldr	r3, [sp, #0]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	dd01      	ble.n	80189b6 <_dtoa_r+0x9ee>
 80189b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80189b6:	9b05      	ldr	r3, [sp, #20]
 80189b8:	1c5d      	adds	r5, r3, #1
 80189ba:	f883 8000 	strb.w	r8, [r3]
 80189be:	e782      	b.n	80188c6 <_dtoa_r+0x8fe>
 80189c0:	4630      	mov	r0, r6
 80189c2:	e7c2      	b.n	801894a <_dtoa_r+0x982>
 80189c4:	2301      	movs	r3, #1
 80189c6:	e7e3      	b.n	8018990 <_dtoa_r+0x9c8>
 80189c8:	9a00      	ldr	r2, [sp, #0]
 80189ca:	2a00      	cmp	r2, #0
 80189cc:	db04      	blt.n	80189d8 <_dtoa_r+0xa10>
 80189ce:	d125      	bne.n	8018a1c <_dtoa_r+0xa54>
 80189d0:	9a06      	ldr	r2, [sp, #24]
 80189d2:	bb1a      	cbnz	r2, 8018a1c <_dtoa_r+0xa54>
 80189d4:	9a07      	ldr	r2, [sp, #28]
 80189d6:	bb0a      	cbnz	r2, 8018a1c <_dtoa_r+0xa54>
 80189d8:	2b00      	cmp	r3, #0
 80189da:	ddec      	ble.n	80189b6 <_dtoa_r+0x9ee>
 80189dc:	2201      	movs	r2, #1
 80189de:	9904      	ldr	r1, [sp, #16]
 80189e0:	4620      	mov	r0, r4
 80189e2:	f001 f817 	bl	8019a14 <__lshift>
 80189e6:	4639      	mov	r1, r7
 80189e8:	9004      	str	r0, [sp, #16]
 80189ea:	f001 f867 	bl	8019abc <__mcmp>
 80189ee:	2800      	cmp	r0, #0
 80189f0:	dc03      	bgt.n	80189fa <_dtoa_r+0xa32>
 80189f2:	d1e0      	bne.n	80189b6 <_dtoa_r+0x9ee>
 80189f4:	f018 0f01 	tst.w	r8, #1
 80189f8:	d0dd      	beq.n	80189b6 <_dtoa_r+0x9ee>
 80189fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80189fe:	d1d8      	bne.n	80189b2 <_dtoa_r+0x9ea>
 8018a00:	9b05      	ldr	r3, [sp, #20]
 8018a02:	9a05      	ldr	r2, [sp, #20]
 8018a04:	1c5d      	adds	r5, r3, #1
 8018a06:	2339      	movs	r3, #57	; 0x39
 8018a08:	7013      	strb	r3, [r2, #0]
 8018a0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018a0e:	2b39      	cmp	r3, #57	; 0x39
 8018a10:	f105 32ff 	add.w	r2, r5, #4294967295
 8018a14:	d04f      	beq.n	8018ab6 <_dtoa_r+0xaee>
 8018a16:	3301      	adds	r3, #1
 8018a18:	7013      	strb	r3, [r2, #0]
 8018a1a:	e754      	b.n	80188c6 <_dtoa_r+0x8fe>
 8018a1c:	9a05      	ldr	r2, [sp, #20]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	f102 0501 	add.w	r5, r2, #1
 8018a24:	dd06      	ble.n	8018a34 <_dtoa_r+0xa6c>
 8018a26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018a2a:	d0e9      	beq.n	8018a00 <_dtoa_r+0xa38>
 8018a2c:	f108 0801 	add.w	r8, r8, #1
 8018a30:	9b05      	ldr	r3, [sp, #20]
 8018a32:	e7c2      	b.n	80189ba <_dtoa_r+0x9f2>
 8018a34:	9a02      	ldr	r2, [sp, #8]
 8018a36:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018a3a:	eba5 030b 	sub.w	r3, r5, fp
 8018a3e:	4293      	cmp	r3, r2
 8018a40:	d021      	beq.n	8018a86 <_dtoa_r+0xabe>
 8018a42:	2300      	movs	r3, #0
 8018a44:	220a      	movs	r2, #10
 8018a46:	9904      	ldr	r1, [sp, #16]
 8018a48:	4620      	mov	r0, r4
 8018a4a:	f000 fe2e 	bl	80196aa <__multadd>
 8018a4e:	45b1      	cmp	r9, r6
 8018a50:	9004      	str	r0, [sp, #16]
 8018a52:	f04f 0300 	mov.w	r3, #0
 8018a56:	f04f 020a 	mov.w	r2, #10
 8018a5a:	4649      	mov	r1, r9
 8018a5c:	4620      	mov	r0, r4
 8018a5e:	d105      	bne.n	8018a6c <_dtoa_r+0xaa4>
 8018a60:	f000 fe23 	bl	80196aa <__multadd>
 8018a64:	4681      	mov	r9, r0
 8018a66:	4606      	mov	r6, r0
 8018a68:	9505      	str	r5, [sp, #20]
 8018a6a:	e776      	b.n	801895a <_dtoa_r+0x992>
 8018a6c:	f000 fe1d 	bl	80196aa <__multadd>
 8018a70:	4631      	mov	r1, r6
 8018a72:	4681      	mov	r9, r0
 8018a74:	2300      	movs	r3, #0
 8018a76:	220a      	movs	r2, #10
 8018a78:	4620      	mov	r0, r4
 8018a7a:	f000 fe16 	bl	80196aa <__multadd>
 8018a7e:	4606      	mov	r6, r0
 8018a80:	e7f2      	b.n	8018a68 <_dtoa_r+0xaa0>
 8018a82:	f04f 0900 	mov.w	r9, #0
 8018a86:	2201      	movs	r2, #1
 8018a88:	9904      	ldr	r1, [sp, #16]
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	f000 ffc2 	bl	8019a14 <__lshift>
 8018a90:	4639      	mov	r1, r7
 8018a92:	9004      	str	r0, [sp, #16]
 8018a94:	f001 f812 	bl	8019abc <__mcmp>
 8018a98:	2800      	cmp	r0, #0
 8018a9a:	dcb6      	bgt.n	8018a0a <_dtoa_r+0xa42>
 8018a9c:	d102      	bne.n	8018aa4 <_dtoa_r+0xadc>
 8018a9e:	f018 0f01 	tst.w	r8, #1
 8018aa2:	d1b2      	bne.n	8018a0a <_dtoa_r+0xa42>
 8018aa4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018aa8:	2b30      	cmp	r3, #48	; 0x30
 8018aaa:	f105 32ff 	add.w	r2, r5, #4294967295
 8018aae:	f47f af0a 	bne.w	80188c6 <_dtoa_r+0x8fe>
 8018ab2:	4615      	mov	r5, r2
 8018ab4:	e7f6      	b.n	8018aa4 <_dtoa_r+0xadc>
 8018ab6:	4593      	cmp	fp, r2
 8018ab8:	d105      	bne.n	8018ac6 <_dtoa_r+0xafe>
 8018aba:	2331      	movs	r3, #49	; 0x31
 8018abc:	f10a 0a01 	add.w	sl, sl, #1
 8018ac0:	f88b 3000 	strb.w	r3, [fp]
 8018ac4:	e6ff      	b.n	80188c6 <_dtoa_r+0x8fe>
 8018ac6:	4615      	mov	r5, r2
 8018ac8:	e79f      	b.n	8018a0a <_dtoa_r+0xa42>
 8018aca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018b30 <_dtoa_r+0xb68>
 8018ace:	e007      	b.n	8018ae0 <_dtoa_r+0xb18>
 8018ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018ad2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018b34 <_dtoa_r+0xb6c>
 8018ad6:	b11b      	cbz	r3, 8018ae0 <_dtoa_r+0xb18>
 8018ad8:	f10b 0308 	add.w	r3, fp, #8
 8018adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018ade:	6013      	str	r3, [r2, #0]
 8018ae0:	4658      	mov	r0, fp
 8018ae2:	b017      	add	sp, #92	; 0x5c
 8018ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ae8:	9b06      	ldr	r3, [sp, #24]
 8018aea:	2b01      	cmp	r3, #1
 8018aec:	f77f ae35 	ble.w	801875a <_dtoa_r+0x792>
 8018af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018af2:	9307      	str	r3, [sp, #28]
 8018af4:	e649      	b.n	801878a <_dtoa_r+0x7c2>
 8018af6:	9b02      	ldr	r3, [sp, #8]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	dc03      	bgt.n	8018b04 <_dtoa_r+0xb3c>
 8018afc:	9b06      	ldr	r3, [sp, #24]
 8018afe:	2b02      	cmp	r3, #2
 8018b00:	f73f aecc 	bgt.w	801889c <_dtoa_r+0x8d4>
 8018b04:	465d      	mov	r5, fp
 8018b06:	4639      	mov	r1, r7
 8018b08:	9804      	ldr	r0, [sp, #16]
 8018b0a:	f7ff f9cf 	bl	8017eac <quorem>
 8018b0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018b12:	f805 8b01 	strb.w	r8, [r5], #1
 8018b16:	9a02      	ldr	r2, [sp, #8]
 8018b18:	eba5 030b 	sub.w	r3, r5, fp
 8018b1c:	429a      	cmp	r2, r3
 8018b1e:	ddb0      	ble.n	8018a82 <_dtoa_r+0xaba>
 8018b20:	2300      	movs	r3, #0
 8018b22:	220a      	movs	r2, #10
 8018b24:	9904      	ldr	r1, [sp, #16]
 8018b26:	4620      	mov	r0, r4
 8018b28:	f000 fdbf 	bl	80196aa <__multadd>
 8018b2c:	9004      	str	r0, [sp, #16]
 8018b2e:	e7ea      	b.n	8018b06 <_dtoa_r+0xb3e>
 8018b30:	0801b57b 	.word	0x0801b57b
 8018b34:	0801b3d8 	.word	0x0801b3d8

08018b38 <__sflush_r>:
 8018b38:	898a      	ldrh	r2, [r1, #12]
 8018b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b3e:	4605      	mov	r5, r0
 8018b40:	0710      	lsls	r0, r2, #28
 8018b42:	460c      	mov	r4, r1
 8018b44:	d458      	bmi.n	8018bf8 <__sflush_r+0xc0>
 8018b46:	684b      	ldr	r3, [r1, #4]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	dc05      	bgt.n	8018b58 <__sflush_r+0x20>
 8018b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	dc02      	bgt.n	8018b58 <__sflush_r+0x20>
 8018b52:	2000      	movs	r0, #0
 8018b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b5a:	2e00      	cmp	r6, #0
 8018b5c:	d0f9      	beq.n	8018b52 <__sflush_r+0x1a>
 8018b5e:	2300      	movs	r3, #0
 8018b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b64:	682f      	ldr	r7, [r5, #0]
 8018b66:	6a21      	ldr	r1, [r4, #32]
 8018b68:	602b      	str	r3, [r5, #0]
 8018b6a:	d032      	beq.n	8018bd2 <__sflush_r+0x9a>
 8018b6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b6e:	89a3      	ldrh	r3, [r4, #12]
 8018b70:	075a      	lsls	r2, r3, #29
 8018b72:	d505      	bpl.n	8018b80 <__sflush_r+0x48>
 8018b74:	6863      	ldr	r3, [r4, #4]
 8018b76:	1ac0      	subs	r0, r0, r3
 8018b78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b7a:	b10b      	cbz	r3, 8018b80 <__sflush_r+0x48>
 8018b7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b7e:	1ac0      	subs	r0, r0, r3
 8018b80:	2300      	movs	r3, #0
 8018b82:	4602      	mov	r2, r0
 8018b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b86:	6a21      	ldr	r1, [r4, #32]
 8018b88:	4628      	mov	r0, r5
 8018b8a:	47b0      	blx	r6
 8018b8c:	1c43      	adds	r3, r0, #1
 8018b8e:	89a3      	ldrh	r3, [r4, #12]
 8018b90:	d106      	bne.n	8018ba0 <__sflush_r+0x68>
 8018b92:	6829      	ldr	r1, [r5, #0]
 8018b94:	291d      	cmp	r1, #29
 8018b96:	d848      	bhi.n	8018c2a <__sflush_r+0xf2>
 8018b98:	4a29      	ldr	r2, [pc, #164]	; (8018c40 <__sflush_r+0x108>)
 8018b9a:	40ca      	lsrs	r2, r1
 8018b9c:	07d6      	lsls	r6, r2, #31
 8018b9e:	d544      	bpl.n	8018c2a <__sflush_r+0xf2>
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	6062      	str	r2, [r4, #4]
 8018ba4:	04d9      	lsls	r1, r3, #19
 8018ba6:	6922      	ldr	r2, [r4, #16]
 8018ba8:	6022      	str	r2, [r4, #0]
 8018baa:	d504      	bpl.n	8018bb6 <__sflush_r+0x7e>
 8018bac:	1c42      	adds	r2, r0, #1
 8018bae:	d101      	bne.n	8018bb4 <__sflush_r+0x7c>
 8018bb0:	682b      	ldr	r3, [r5, #0]
 8018bb2:	b903      	cbnz	r3, 8018bb6 <__sflush_r+0x7e>
 8018bb4:	6560      	str	r0, [r4, #84]	; 0x54
 8018bb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018bb8:	602f      	str	r7, [r5, #0]
 8018bba:	2900      	cmp	r1, #0
 8018bbc:	d0c9      	beq.n	8018b52 <__sflush_r+0x1a>
 8018bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bc2:	4299      	cmp	r1, r3
 8018bc4:	d002      	beq.n	8018bcc <__sflush_r+0x94>
 8018bc6:	4628      	mov	r0, r5
 8018bc8:	f001 f932 	bl	8019e30 <_free_r>
 8018bcc:	2000      	movs	r0, #0
 8018bce:	6360      	str	r0, [r4, #52]	; 0x34
 8018bd0:	e7c0      	b.n	8018b54 <__sflush_r+0x1c>
 8018bd2:	2301      	movs	r3, #1
 8018bd4:	4628      	mov	r0, r5
 8018bd6:	47b0      	blx	r6
 8018bd8:	1c41      	adds	r1, r0, #1
 8018bda:	d1c8      	bne.n	8018b6e <__sflush_r+0x36>
 8018bdc:	682b      	ldr	r3, [r5, #0]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d0c5      	beq.n	8018b6e <__sflush_r+0x36>
 8018be2:	2b1d      	cmp	r3, #29
 8018be4:	d001      	beq.n	8018bea <__sflush_r+0xb2>
 8018be6:	2b16      	cmp	r3, #22
 8018be8:	d101      	bne.n	8018bee <__sflush_r+0xb6>
 8018bea:	602f      	str	r7, [r5, #0]
 8018bec:	e7b1      	b.n	8018b52 <__sflush_r+0x1a>
 8018bee:	89a3      	ldrh	r3, [r4, #12]
 8018bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bf4:	81a3      	strh	r3, [r4, #12]
 8018bf6:	e7ad      	b.n	8018b54 <__sflush_r+0x1c>
 8018bf8:	690f      	ldr	r7, [r1, #16]
 8018bfa:	2f00      	cmp	r7, #0
 8018bfc:	d0a9      	beq.n	8018b52 <__sflush_r+0x1a>
 8018bfe:	0793      	lsls	r3, r2, #30
 8018c00:	680e      	ldr	r6, [r1, #0]
 8018c02:	bf08      	it	eq
 8018c04:	694b      	ldreq	r3, [r1, #20]
 8018c06:	600f      	str	r7, [r1, #0]
 8018c08:	bf18      	it	ne
 8018c0a:	2300      	movne	r3, #0
 8018c0c:	eba6 0807 	sub.w	r8, r6, r7
 8018c10:	608b      	str	r3, [r1, #8]
 8018c12:	f1b8 0f00 	cmp.w	r8, #0
 8018c16:	dd9c      	ble.n	8018b52 <__sflush_r+0x1a>
 8018c18:	4643      	mov	r3, r8
 8018c1a:	463a      	mov	r2, r7
 8018c1c:	6a21      	ldr	r1, [r4, #32]
 8018c1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018c20:	4628      	mov	r0, r5
 8018c22:	47b0      	blx	r6
 8018c24:	2800      	cmp	r0, #0
 8018c26:	dc06      	bgt.n	8018c36 <__sflush_r+0xfe>
 8018c28:	89a3      	ldrh	r3, [r4, #12]
 8018c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c2e:	81a3      	strh	r3, [r4, #12]
 8018c30:	f04f 30ff 	mov.w	r0, #4294967295
 8018c34:	e78e      	b.n	8018b54 <__sflush_r+0x1c>
 8018c36:	4407      	add	r7, r0
 8018c38:	eba8 0800 	sub.w	r8, r8, r0
 8018c3c:	e7e9      	b.n	8018c12 <__sflush_r+0xda>
 8018c3e:	bf00      	nop
 8018c40:	20400001 	.word	0x20400001

08018c44 <_fflush_r>:
 8018c44:	b538      	push	{r3, r4, r5, lr}
 8018c46:	690b      	ldr	r3, [r1, #16]
 8018c48:	4605      	mov	r5, r0
 8018c4a:	460c      	mov	r4, r1
 8018c4c:	b1db      	cbz	r3, 8018c86 <_fflush_r+0x42>
 8018c4e:	b118      	cbz	r0, 8018c58 <_fflush_r+0x14>
 8018c50:	6983      	ldr	r3, [r0, #24]
 8018c52:	b90b      	cbnz	r3, 8018c58 <_fflush_r+0x14>
 8018c54:	f000 f872 	bl	8018d3c <__sinit>
 8018c58:	4b0c      	ldr	r3, [pc, #48]	; (8018c8c <_fflush_r+0x48>)
 8018c5a:	429c      	cmp	r4, r3
 8018c5c:	d109      	bne.n	8018c72 <_fflush_r+0x2e>
 8018c5e:	686c      	ldr	r4, [r5, #4]
 8018c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c64:	b17b      	cbz	r3, 8018c86 <_fflush_r+0x42>
 8018c66:	4621      	mov	r1, r4
 8018c68:	4628      	mov	r0, r5
 8018c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c6e:	f7ff bf63 	b.w	8018b38 <__sflush_r>
 8018c72:	4b07      	ldr	r3, [pc, #28]	; (8018c90 <_fflush_r+0x4c>)
 8018c74:	429c      	cmp	r4, r3
 8018c76:	d101      	bne.n	8018c7c <_fflush_r+0x38>
 8018c78:	68ac      	ldr	r4, [r5, #8]
 8018c7a:	e7f1      	b.n	8018c60 <_fflush_r+0x1c>
 8018c7c:	4b05      	ldr	r3, [pc, #20]	; (8018c94 <_fflush_r+0x50>)
 8018c7e:	429c      	cmp	r4, r3
 8018c80:	bf08      	it	eq
 8018c82:	68ec      	ldreq	r4, [r5, #12]
 8018c84:	e7ec      	b.n	8018c60 <_fflush_r+0x1c>
 8018c86:	2000      	movs	r0, #0
 8018c88:	bd38      	pop	{r3, r4, r5, pc}
 8018c8a:	bf00      	nop
 8018c8c:	0801b408 	.word	0x0801b408
 8018c90:	0801b428 	.word	0x0801b428
 8018c94:	0801b3e8 	.word	0x0801b3e8

08018c98 <fflush>:
 8018c98:	4601      	mov	r1, r0
 8018c9a:	b920      	cbnz	r0, 8018ca6 <fflush+0xe>
 8018c9c:	4b04      	ldr	r3, [pc, #16]	; (8018cb0 <fflush+0x18>)
 8018c9e:	4905      	ldr	r1, [pc, #20]	; (8018cb4 <fflush+0x1c>)
 8018ca0:	6818      	ldr	r0, [r3, #0]
 8018ca2:	f000 b8d3 	b.w	8018e4c <_fwalk_reent>
 8018ca6:	4b04      	ldr	r3, [pc, #16]	; (8018cb8 <fflush+0x20>)
 8018ca8:	6818      	ldr	r0, [r3, #0]
 8018caa:	f7ff bfcb 	b.w	8018c44 <_fflush_r>
 8018cae:	bf00      	nop
 8018cb0:	0801b348 	.word	0x0801b348
 8018cb4:	08018c45 	.word	0x08018c45
 8018cb8:	2000002c 	.word	0x2000002c

08018cbc <std>:
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	b510      	push	{r4, lr}
 8018cc0:	4604      	mov	r4, r0
 8018cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8018cc6:	6083      	str	r3, [r0, #8]
 8018cc8:	8181      	strh	r1, [r0, #12]
 8018cca:	6643      	str	r3, [r0, #100]	; 0x64
 8018ccc:	81c2      	strh	r2, [r0, #14]
 8018cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018cd2:	6183      	str	r3, [r0, #24]
 8018cd4:	4619      	mov	r1, r3
 8018cd6:	2208      	movs	r2, #8
 8018cd8:	305c      	adds	r0, #92	; 0x5c
 8018cda:	f7fd f9c0 	bl	801605e <memset>
 8018cde:	4b05      	ldr	r3, [pc, #20]	; (8018cf4 <std+0x38>)
 8018ce0:	6263      	str	r3, [r4, #36]	; 0x24
 8018ce2:	4b05      	ldr	r3, [pc, #20]	; (8018cf8 <std+0x3c>)
 8018ce4:	62a3      	str	r3, [r4, #40]	; 0x28
 8018ce6:	4b05      	ldr	r3, [pc, #20]	; (8018cfc <std+0x40>)
 8018ce8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018cea:	4b05      	ldr	r3, [pc, #20]	; (8018d00 <std+0x44>)
 8018cec:	6224      	str	r4, [r4, #32]
 8018cee:	6323      	str	r3, [r4, #48]	; 0x30
 8018cf0:	bd10      	pop	{r4, pc}
 8018cf2:	bf00      	nop
 8018cf4:	0801abf5 	.word	0x0801abf5
 8018cf8:	0801ac17 	.word	0x0801ac17
 8018cfc:	0801ac4f 	.word	0x0801ac4f
 8018d00:	0801ac73 	.word	0x0801ac73

08018d04 <_cleanup_r>:
 8018d04:	4901      	ldr	r1, [pc, #4]	; (8018d0c <_cleanup_r+0x8>)
 8018d06:	f000 b8a1 	b.w	8018e4c <_fwalk_reent>
 8018d0a:	bf00      	nop
 8018d0c:	08018c45 	.word	0x08018c45

08018d10 <__sfmoreglue>:
 8018d10:	b570      	push	{r4, r5, r6, lr}
 8018d12:	1e4a      	subs	r2, r1, #1
 8018d14:	2568      	movs	r5, #104	; 0x68
 8018d16:	4355      	muls	r5, r2
 8018d18:	460e      	mov	r6, r1
 8018d1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018d1e:	f001 f8d5 	bl	8019ecc <_malloc_r>
 8018d22:	4604      	mov	r4, r0
 8018d24:	b140      	cbz	r0, 8018d38 <__sfmoreglue+0x28>
 8018d26:	2100      	movs	r1, #0
 8018d28:	e9c0 1600 	strd	r1, r6, [r0]
 8018d2c:	300c      	adds	r0, #12
 8018d2e:	60a0      	str	r0, [r4, #8]
 8018d30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018d34:	f7fd f993 	bl	801605e <memset>
 8018d38:	4620      	mov	r0, r4
 8018d3a:	bd70      	pop	{r4, r5, r6, pc}

08018d3c <__sinit>:
 8018d3c:	6983      	ldr	r3, [r0, #24]
 8018d3e:	b510      	push	{r4, lr}
 8018d40:	4604      	mov	r4, r0
 8018d42:	bb33      	cbnz	r3, 8018d92 <__sinit+0x56>
 8018d44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018d48:	6503      	str	r3, [r0, #80]	; 0x50
 8018d4a:	4b12      	ldr	r3, [pc, #72]	; (8018d94 <__sinit+0x58>)
 8018d4c:	4a12      	ldr	r2, [pc, #72]	; (8018d98 <__sinit+0x5c>)
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	6282      	str	r2, [r0, #40]	; 0x28
 8018d52:	4298      	cmp	r0, r3
 8018d54:	bf04      	itt	eq
 8018d56:	2301      	moveq	r3, #1
 8018d58:	6183      	streq	r3, [r0, #24]
 8018d5a:	f000 f81f 	bl	8018d9c <__sfp>
 8018d5e:	6060      	str	r0, [r4, #4]
 8018d60:	4620      	mov	r0, r4
 8018d62:	f000 f81b 	bl	8018d9c <__sfp>
 8018d66:	60a0      	str	r0, [r4, #8]
 8018d68:	4620      	mov	r0, r4
 8018d6a:	f000 f817 	bl	8018d9c <__sfp>
 8018d6e:	2200      	movs	r2, #0
 8018d70:	60e0      	str	r0, [r4, #12]
 8018d72:	2104      	movs	r1, #4
 8018d74:	6860      	ldr	r0, [r4, #4]
 8018d76:	f7ff ffa1 	bl	8018cbc <std>
 8018d7a:	2201      	movs	r2, #1
 8018d7c:	2109      	movs	r1, #9
 8018d7e:	68a0      	ldr	r0, [r4, #8]
 8018d80:	f7ff ff9c 	bl	8018cbc <std>
 8018d84:	2202      	movs	r2, #2
 8018d86:	2112      	movs	r1, #18
 8018d88:	68e0      	ldr	r0, [r4, #12]
 8018d8a:	f7ff ff97 	bl	8018cbc <std>
 8018d8e:	2301      	movs	r3, #1
 8018d90:	61a3      	str	r3, [r4, #24]
 8018d92:	bd10      	pop	{r4, pc}
 8018d94:	0801b348 	.word	0x0801b348
 8018d98:	08018d05 	.word	0x08018d05

08018d9c <__sfp>:
 8018d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d9e:	4b1b      	ldr	r3, [pc, #108]	; (8018e0c <__sfp+0x70>)
 8018da0:	681e      	ldr	r6, [r3, #0]
 8018da2:	69b3      	ldr	r3, [r6, #24]
 8018da4:	4607      	mov	r7, r0
 8018da6:	b913      	cbnz	r3, 8018dae <__sfp+0x12>
 8018da8:	4630      	mov	r0, r6
 8018daa:	f7ff ffc7 	bl	8018d3c <__sinit>
 8018dae:	3648      	adds	r6, #72	; 0x48
 8018db0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018db4:	3b01      	subs	r3, #1
 8018db6:	d503      	bpl.n	8018dc0 <__sfp+0x24>
 8018db8:	6833      	ldr	r3, [r6, #0]
 8018dba:	b133      	cbz	r3, 8018dca <__sfp+0x2e>
 8018dbc:	6836      	ldr	r6, [r6, #0]
 8018dbe:	e7f7      	b.n	8018db0 <__sfp+0x14>
 8018dc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018dc4:	b16d      	cbz	r5, 8018de2 <__sfp+0x46>
 8018dc6:	3468      	adds	r4, #104	; 0x68
 8018dc8:	e7f4      	b.n	8018db4 <__sfp+0x18>
 8018dca:	2104      	movs	r1, #4
 8018dcc:	4638      	mov	r0, r7
 8018dce:	f7ff ff9f 	bl	8018d10 <__sfmoreglue>
 8018dd2:	6030      	str	r0, [r6, #0]
 8018dd4:	2800      	cmp	r0, #0
 8018dd6:	d1f1      	bne.n	8018dbc <__sfp+0x20>
 8018dd8:	230c      	movs	r3, #12
 8018dda:	603b      	str	r3, [r7, #0]
 8018ddc:	4604      	mov	r4, r0
 8018dde:	4620      	mov	r0, r4
 8018de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018de2:	4b0b      	ldr	r3, [pc, #44]	; (8018e10 <__sfp+0x74>)
 8018de4:	6665      	str	r5, [r4, #100]	; 0x64
 8018de6:	e9c4 5500 	strd	r5, r5, [r4]
 8018dea:	60a5      	str	r5, [r4, #8]
 8018dec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018df0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018df4:	2208      	movs	r2, #8
 8018df6:	4629      	mov	r1, r5
 8018df8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018dfc:	f7fd f92f 	bl	801605e <memset>
 8018e00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018e04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018e08:	e7e9      	b.n	8018dde <__sfp+0x42>
 8018e0a:	bf00      	nop
 8018e0c:	0801b348 	.word	0x0801b348
 8018e10:	ffff0001 	.word	0xffff0001

08018e14 <_fwalk>:
 8018e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e18:	4688      	mov	r8, r1
 8018e1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018e1e:	2600      	movs	r6, #0
 8018e20:	b914      	cbnz	r4, 8018e28 <_fwalk+0x14>
 8018e22:	4630      	mov	r0, r6
 8018e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e28:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018e2c:	3f01      	subs	r7, #1
 8018e2e:	d501      	bpl.n	8018e34 <_fwalk+0x20>
 8018e30:	6824      	ldr	r4, [r4, #0]
 8018e32:	e7f5      	b.n	8018e20 <_fwalk+0xc>
 8018e34:	89ab      	ldrh	r3, [r5, #12]
 8018e36:	2b01      	cmp	r3, #1
 8018e38:	d906      	bls.n	8018e48 <_fwalk+0x34>
 8018e3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018e3e:	3301      	adds	r3, #1
 8018e40:	d002      	beq.n	8018e48 <_fwalk+0x34>
 8018e42:	4628      	mov	r0, r5
 8018e44:	47c0      	blx	r8
 8018e46:	4306      	orrs	r6, r0
 8018e48:	3568      	adds	r5, #104	; 0x68
 8018e4a:	e7ef      	b.n	8018e2c <_fwalk+0x18>

08018e4c <_fwalk_reent>:
 8018e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e50:	4680      	mov	r8, r0
 8018e52:	4689      	mov	r9, r1
 8018e54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018e58:	2600      	movs	r6, #0
 8018e5a:	b914      	cbnz	r4, 8018e62 <_fwalk_reent+0x16>
 8018e5c:	4630      	mov	r0, r6
 8018e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e62:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018e66:	3f01      	subs	r7, #1
 8018e68:	d501      	bpl.n	8018e6e <_fwalk_reent+0x22>
 8018e6a:	6824      	ldr	r4, [r4, #0]
 8018e6c:	e7f5      	b.n	8018e5a <_fwalk_reent+0xe>
 8018e6e:	89ab      	ldrh	r3, [r5, #12]
 8018e70:	2b01      	cmp	r3, #1
 8018e72:	d907      	bls.n	8018e84 <_fwalk_reent+0x38>
 8018e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018e78:	3301      	adds	r3, #1
 8018e7a:	d003      	beq.n	8018e84 <_fwalk_reent+0x38>
 8018e7c:	4629      	mov	r1, r5
 8018e7e:	4640      	mov	r0, r8
 8018e80:	47c8      	blx	r9
 8018e82:	4306      	orrs	r6, r0
 8018e84:	3568      	adds	r5, #104	; 0x68
 8018e86:	e7ee      	b.n	8018e66 <_fwalk_reent+0x1a>

08018e88 <rshift>:
 8018e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e8a:	6906      	ldr	r6, [r0, #16]
 8018e8c:	114b      	asrs	r3, r1, #5
 8018e8e:	429e      	cmp	r6, r3
 8018e90:	f100 0414 	add.w	r4, r0, #20
 8018e94:	dd30      	ble.n	8018ef8 <rshift+0x70>
 8018e96:	f011 011f 	ands.w	r1, r1, #31
 8018e9a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018e9e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018ea2:	d108      	bne.n	8018eb6 <rshift+0x2e>
 8018ea4:	4621      	mov	r1, r4
 8018ea6:	42b2      	cmp	r2, r6
 8018ea8:	460b      	mov	r3, r1
 8018eaa:	d211      	bcs.n	8018ed0 <rshift+0x48>
 8018eac:	f852 3b04 	ldr.w	r3, [r2], #4
 8018eb0:	f841 3b04 	str.w	r3, [r1], #4
 8018eb4:	e7f7      	b.n	8018ea6 <rshift+0x1e>
 8018eb6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018eba:	f1c1 0c20 	rsb	ip, r1, #32
 8018ebe:	40cd      	lsrs	r5, r1
 8018ec0:	3204      	adds	r2, #4
 8018ec2:	4623      	mov	r3, r4
 8018ec4:	42b2      	cmp	r2, r6
 8018ec6:	4617      	mov	r7, r2
 8018ec8:	d30c      	bcc.n	8018ee4 <rshift+0x5c>
 8018eca:	601d      	str	r5, [r3, #0]
 8018ecc:	b105      	cbz	r5, 8018ed0 <rshift+0x48>
 8018ece:	3304      	adds	r3, #4
 8018ed0:	1b1a      	subs	r2, r3, r4
 8018ed2:	42a3      	cmp	r3, r4
 8018ed4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018ed8:	bf08      	it	eq
 8018eda:	2300      	moveq	r3, #0
 8018edc:	6102      	str	r2, [r0, #16]
 8018ede:	bf08      	it	eq
 8018ee0:	6143      	streq	r3, [r0, #20]
 8018ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ee4:	683f      	ldr	r7, [r7, #0]
 8018ee6:	fa07 f70c 	lsl.w	r7, r7, ip
 8018eea:	433d      	orrs	r5, r7
 8018eec:	f843 5b04 	str.w	r5, [r3], #4
 8018ef0:	f852 5b04 	ldr.w	r5, [r2], #4
 8018ef4:	40cd      	lsrs	r5, r1
 8018ef6:	e7e5      	b.n	8018ec4 <rshift+0x3c>
 8018ef8:	4623      	mov	r3, r4
 8018efa:	e7e9      	b.n	8018ed0 <rshift+0x48>

08018efc <__hexdig_fun>:
 8018efc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018f00:	2b09      	cmp	r3, #9
 8018f02:	d802      	bhi.n	8018f0a <__hexdig_fun+0xe>
 8018f04:	3820      	subs	r0, #32
 8018f06:	b2c0      	uxtb	r0, r0
 8018f08:	4770      	bx	lr
 8018f0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018f0e:	2b05      	cmp	r3, #5
 8018f10:	d801      	bhi.n	8018f16 <__hexdig_fun+0x1a>
 8018f12:	3847      	subs	r0, #71	; 0x47
 8018f14:	e7f7      	b.n	8018f06 <__hexdig_fun+0xa>
 8018f16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018f1a:	2b05      	cmp	r3, #5
 8018f1c:	d801      	bhi.n	8018f22 <__hexdig_fun+0x26>
 8018f1e:	3827      	subs	r0, #39	; 0x27
 8018f20:	e7f1      	b.n	8018f06 <__hexdig_fun+0xa>
 8018f22:	2000      	movs	r0, #0
 8018f24:	4770      	bx	lr

08018f26 <__gethex>:
 8018f26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f2a:	b08b      	sub	sp, #44	; 0x2c
 8018f2c:	468a      	mov	sl, r1
 8018f2e:	9002      	str	r0, [sp, #8]
 8018f30:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018f32:	9306      	str	r3, [sp, #24]
 8018f34:	4690      	mov	r8, r2
 8018f36:	f000 fadf 	bl	80194f8 <__localeconv_l>
 8018f3a:	6803      	ldr	r3, [r0, #0]
 8018f3c:	9303      	str	r3, [sp, #12]
 8018f3e:	4618      	mov	r0, r3
 8018f40:	f7ef f87e 	bl	8008040 <strlen>
 8018f44:	9b03      	ldr	r3, [sp, #12]
 8018f46:	9001      	str	r0, [sp, #4]
 8018f48:	4403      	add	r3, r0
 8018f4a:	f04f 0b00 	mov.w	fp, #0
 8018f4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018f52:	9307      	str	r3, [sp, #28]
 8018f54:	f8da 3000 	ldr.w	r3, [sl]
 8018f58:	3302      	adds	r3, #2
 8018f5a:	461f      	mov	r7, r3
 8018f5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018f60:	2830      	cmp	r0, #48	; 0x30
 8018f62:	d06c      	beq.n	801903e <__gethex+0x118>
 8018f64:	f7ff ffca 	bl	8018efc <__hexdig_fun>
 8018f68:	4604      	mov	r4, r0
 8018f6a:	2800      	cmp	r0, #0
 8018f6c:	d16a      	bne.n	8019044 <__gethex+0x11e>
 8018f6e:	9a01      	ldr	r2, [sp, #4]
 8018f70:	9903      	ldr	r1, [sp, #12]
 8018f72:	4638      	mov	r0, r7
 8018f74:	f001 fe81 	bl	801ac7a <strncmp>
 8018f78:	2800      	cmp	r0, #0
 8018f7a:	d166      	bne.n	801904a <__gethex+0x124>
 8018f7c:	9b01      	ldr	r3, [sp, #4]
 8018f7e:	5cf8      	ldrb	r0, [r7, r3]
 8018f80:	18fe      	adds	r6, r7, r3
 8018f82:	f7ff ffbb 	bl	8018efc <__hexdig_fun>
 8018f86:	2800      	cmp	r0, #0
 8018f88:	d062      	beq.n	8019050 <__gethex+0x12a>
 8018f8a:	4633      	mov	r3, r6
 8018f8c:	7818      	ldrb	r0, [r3, #0]
 8018f8e:	2830      	cmp	r0, #48	; 0x30
 8018f90:	461f      	mov	r7, r3
 8018f92:	f103 0301 	add.w	r3, r3, #1
 8018f96:	d0f9      	beq.n	8018f8c <__gethex+0x66>
 8018f98:	f7ff ffb0 	bl	8018efc <__hexdig_fun>
 8018f9c:	fab0 f580 	clz	r5, r0
 8018fa0:	096d      	lsrs	r5, r5, #5
 8018fa2:	4634      	mov	r4, r6
 8018fa4:	f04f 0b01 	mov.w	fp, #1
 8018fa8:	463a      	mov	r2, r7
 8018faa:	4616      	mov	r6, r2
 8018fac:	3201      	adds	r2, #1
 8018fae:	7830      	ldrb	r0, [r6, #0]
 8018fb0:	f7ff ffa4 	bl	8018efc <__hexdig_fun>
 8018fb4:	2800      	cmp	r0, #0
 8018fb6:	d1f8      	bne.n	8018faa <__gethex+0x84>
 8018fb8:	9a01      	ldr	r2, [sp, #4]
 8018fba:	9903      	ldr	r1, [sp, #12]
 8018fbc:	4630      	mov	r0, r6
 8018fbe:	f001 fe5c 	bl	801ac7a <strncmp>
 8018fc2:	b950      	cbnz	r0, 8018fda <__gethex+0xb4>
 8018fc4:	b954      	cbnz	r4, 8018fdc <__gethex+0xb6>
 8018fc6:	9b01      	ldr	r3, [sp, #4]
 8018fc8:	18f4      	adds	r4, r6, r3
 8018fca:	4622      	mov	r2, r4
 8018fcc:	4616      	mov	r6, r2
 8018fce:	3201      	adds	r2, #1
 8018fd0:	7830      	ldrb	r0, [r6, #0]
 8018fd2:	f7ff ff93 	bl	8018efc <__hexdig_fun>
 8018fd6:	2800      	cmp	r0, #0
 8018fd8:	d1f8      	bne.n	8018fcc <__gethex+0xa6>
 8018fda:	b10c      	cbz	r4, 8018fe0 <__gethex+0xba>
 8018fdc:	1ba4      	subs	r4, r4, r6
 8018fde:	00a4      	lsls	r4, r4, #2
 8018fe0:	7833      	ldrb	r3, [r6, #0]
 8018fe2:	2b50      	cmp	r3, #80	; 0x50
 8018fe4:	d001      	beq.n	8018fea <__gethex+0xc4>
 8018fe6:	2b70      	cmp	r3, #112	; 0x70
 8018fe8:	d140      	bne.n	801906c <__gethex+0x146>
 8018fea:	7873      	ldrb	r3, [r6, #1]
 8018fec:	2b2b      	cmp	r3, #43	; 0x2b
 8018fee:	d031      	beq.n	8019054 <__gethex+0x12e>
 8018ff0:	2b2d      	cmp	r3, #45	; 0x2d
 8018ff2:	d033      	beq.n	801905c <__gethex+0x136>
 8018ff4:	1c71      	adds	r1, r6, #1
 8018ff6:	f04f 0900 	mov.w	r9, #0
 8018ffa:	7808      	ldrb	r0, [r1, #0]
 8018ffc:	f7ff ff7e 	bl	8018efc <__hexdig_fun>
 8019000:	1e43      	subs	r3, r0, #1
 8019002:	b2db      	uxtb	r3, r3
 8019004:	2b18      	cmp	r3, #24
 8019006:	d831      	bhi.n	801906c <__gethex+0x146>
 8019008:	f1a0 0210 	sub.w	r2, r0, #16
 801900c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019010:	f7ff ff74 	bl	8018efc <__hexdig_fun>
 8019014:	1e43      	subs	r3, r0, #1
 8019016:	b2db      	uxtb	r3, r3
 8019018:	2b18      	cmp	r3, #24
 801901a:	d922      	bls.n	8019062 <__gethex+0x13c>
 801901c:	f1b9 0f00 	cmp.w	r9, #0
 8019020:	d000      	beq.n	8019024 <__gethex+0xfe>
 8019022:	4252      	negs	r2, r2
 8019024:	4414      	add	r4, r2
 8019026:	f8ca 1000 	str.w	r1, [sl]
 801902a:	b30d      	cbz	r5, 8019070 <__gethex+0x14a>
 801902c:	f1bb 0f00 	cmp.w	fp, #0
 8019030:	bf0c      	ite	eq
 8019032:	2706      	moveq	r7, #6
 8019034:	2700      	movne	r7, #0
 8019036:	4638      	mov	r0, r7
 8019038:	b00b      	add	sp, #44	; 0x2c
 801903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801903e:	f10b 0b01 	add.w	fp, fp, #1
 8019042:	e78a      	b.n	8018f5a <__gethex+0x34>
 8019044:	2500      	movs	r5, #0
 8019046:	462c      	mov	r4, r5
 8019048:	e7ae      	b.n	8018fa8 <__gethex+0x82>
 801904a:	463e      	mov	r6, r7
 801904c:	2501      	movs	r5, #1
 801904e:	e7c7      	b.n	8018fe0 <__gethex+0xba>
 8019050:	4604      	mov	r4, r0
 8019052:	e7fb      	b.n	801904c <__gethex+0x126>
 8019054:	f04f 0900 	mov.w	r9, #0
 8019058:	1cb1      	adds	r1, r6, #2
 801905a:	e7ce      	b.n	8018ffa <__gethex+0xd4>
 801905c:	f04f 0901 	mov.w	r9, #1
 8019060:	e7fa      	b.n	8019058 <__gethex+0x132>
 8019062:	230a      	movs	r3, #10
 8019064:	fb03 0202 	mla	r2, r3, r2, r0
 8019068:	3a10      	subs	r2, #16
 801906a:	e7cf      	b.n	801900c <__gethex+0xe6>
 801906c:	4631      	mov	r1, r6
 801906e:	e7da      	b.n	8019026 <__gethex+0x100>
 8019070:	1bf3      	subs	r3, r6, r7
 8019072:	3b01      	subs	r3, #1
 8019074:	4629      	mov	r1, r5
 8019076:	2b07      	cmp	r3, #7
 8019078:	dc49      	bgt.n	801910e <__gethex+0x1e8>
 801907a:	9802      	ldr	r0, [sp, #8]
 801907c:	f000 faca 	bl	8019614 <_Balloc>
 8019080:	9b01      	ldr	r3, [sp, #4]
 8019082:	f100 0914 	add.w	r9, r0, #20
 8019086:	f04f 0b00 	mov.w	fp, #0
 801908a:	f1c3 0301 	rsb	r3, r3, #1
 801908e:	4605      	mov	r5, r0
 8019090:	f8cd 9010 	str.w	r9, [sp, #16]
 8019094:	46da      	mov	sl, fp
 8019096:	9308      	str	r3, [sp, #32]
 8019098:	42b7      	cmp	r7, r6
 801909a:	d33b      	bcc.n	8019114 <__gethex+0x1ee>
 801909c:	9804      	ldr	r0, [sp, #16]
 801909e:	f840 ab04 	str.w	sl, [r0], #4
 80190a2:	eba0 0009 	sub.w	r0, r0, r9
 80190a6:	1080      	asrs	r0, r0, #2
 80190a8:	6128      	str	r0, [r5, #16]
 80190aa:	0147      	lsls	r7, r0, #5
 80190ac:	4650      	mov	r0, sl
 80190ae:	f000 fb75 	bl	801979c <__hi0bits>
 80190b2:	f8d8 6000 	ldr.w	r6, [r8]
 80190b6:	1a3f      	subs	r7, r7, r0
 80190b8:	42b7      	cmp	r7, r6
 80190ba:	dd64      	ble.n	8019186 <__gethex+0x260>
 80190bc:	1bbf      	subs	r7, r7, r6
 80190be:	4639      	mov	r1, r7
 80190c0:	4628      	mov	r0, r5
 80190c2:	f000 fe85 	bl	8019dd0 <__any_on>
 80190c6:	4682      	mov	sl, r0
 80190c8:	b178      	cbz	r0, 80190ea <__gethex+0x1c4>
 80190ca:	1e7b      	subs	r3, r7, #1
 80190cc:	1159      	asrs	r1, r3, #5
 80190ce:	f003 021f 	and.w	r2, r3, #31
 80190d2:	f04f 0a01 	mov.w	sl, #1
 80190d6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80190da:	fa0a f202 	lsl.w	r2, sl, r2
 80190de:	420a      	tst	r2, r1
 80190e0:	d003      	beq.n	80190ea <__gethex+0x1c4>
 80190e2:	4553      	cmp	r3, sl
 80190e4:	dc46      	bgt.n	8019174 <__gethex+0x24e>
 80190e6:	f04f 0a02 	mov.w	sl, #2
 80190ea:	4639      	mov	r1, r7
 80190ec:	4628      	mov	r0, r5
 80190ee:	f7ff fecb 	bl	8018e88 <rshift>
 80190f2:	443c      	add	r4, r7
 80190f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80190f8:	42a3      	cmp	r3, r4
 80190fa:	da52      	bge.n	80191a2 <__gethex+0x27c>
 80190fc:	4629      	mov	r1, r5
 80190fe:	9802      	ldr	r0, [sp, #8]
 8019100:	f000 fabc 	bl	801967c <_Bfree>
 8019104:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019106:	2300      	movs	r3, #0
 8019108:	6013      	str	r3, [r2, #0]
 801910a:	27a3      	movs	r7, #163	; 0xa3
 801910c:	e793      	b.n	8019036 <__gethex+0x110>
 801910e:	3101      	adds	r1, #1
 8019110:	105b      	asrs	r3, r3, #1
 8019112:	e7b0      	b.n	8019076 <__gethex+0x150>
 8019114:	1e73      	subs	r3, r6, #1
 8019116:	9305      	str	r3, [sp, #20]
 8019118:	9a07      	ldr	r2, [sp, #28]
 801911a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801911e:	4293      	cmp	r3, r2
 8019120:	d018      	beq.n	8019154 <__gethex+0x22e>
 8019122:	f1bb 0f20 	cmp.w	fp, #32
 8019126:	d107      	bne.n	8019138 <__gethex+0x212>
 8019128:	9b04      	ldr	r3, [sp, #16]
 801912a:	f8c3 a000 	str.w	sl, [r3]
 801912e:	3304      	adds	r3, #4
 8019130:	f04f 0a00 	mov.w	sl, #0
 8019134:	9304      	str	r3, [sp, #16]
 8019136:	46d3      	mov	fp, sl
 8019138:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801913c:	f7ff fede 	bl	8018efc <__hexdig_fun>
 8019140:	f000 000f 	and.w	r0, r0, #15
 8019144:	fa00 f00b 	lsl.w	r0, r0, fp
 8019148:	ea4a 0a00 	orr.w	sl, sl, r0
 801914c:	f10b 0b04 	add.w	fp, fp, #4
 8019150:	9b05      	ldr	r3, [sp, #20]
 8019152:	e00d      	b.n	8019170 <__gethex+0x24a>
 8019154:	9b05      	ldr	r3, [sp, #20]
 8019156:	9a08      	ldr	r2, [sp, #32]
 8019158:	4413      	add	r3, r2
 801915a:	42bb      	cmp	r3, r7
 801915c:	d3e1      	bcc.n	8019122 <__gethex+0x1fc>
 801915e:	4618      	mov	r0, r3
 8019160:	9a01      	ldr	r2, [sp, #4]
 8019162:	9903      	ldr	r1, [sp, #12]
 8019164:	9309      	str	r3, [sp, #36]	; 0x24
 8019166:	f001 fd88 	bl	801ac7a <strncmp>
 801916a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801916c:	2800      	cmp	r0, #0
 801916e:	d1d8      	bne.n	8019122 <__gethex+0x1fc>
 8019170:	461e      	mov	r6, r3
 8019172:	e791      	b.n	8019098 <__gethex+0x172>
 8019174:	1eb9      	subs	r1, r7, #2
 8019176:	4628      	mov	r0, r5
 8019178:	f000 fe2a 	bl	8019dd0 <__any_on>
 801917c:	2800      	cmp	r0, #0
 801917e:	d0b2      	beq.n	80190e6 <__gethex+0x1c0>
 8019180:	f04f 0a03 	mov.w	sl, #3
 8019184:	e7b1      	b.n	80190ea <__gethex+0x1c4>
 8019186:	da09      	bge.n	801919c <__gethex+0x276>
 8019188:	1bf7      	subs	r7, r6, r7
 801918a:	4629      	mov	r1, r5
 801918c:	463a      	mov	r2, r7
 801918e:	9802      	ldr	r0, [sp, #8]
 8019190:	f000 fc40 	bl	8019a14 <__lshift>
 8019194:	1be4      	subs	r4, r4, r7
 8019196:	4605      	mov	r5, r0
 8019198:	f100 0914 	add.w	r9, r0, #20
 801919c:	f04f 0a00 	mov.w	sl, #0
 80191a0:	e7a8      	b.n	80190f4 <__gethex+0x1ce>
 80191a2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80191a6:	42a0      	cmp	r0, r4
 80191a8:	dd6a      	ble.n	8019280 <__gethex+0x35a>
 80191aa:	1b04      	subs	r4, r0, r4
 80191ac:	42a6      	cmp	r6, r4
 80191ae:	dc2e      	bgt.n	801920e <__gethex+0x2e8>
 80191b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80191b4:	2b02      	cmp	r3, #2
 80191b6:	d022      	beq.n	80191fe <__gethex+0x2d8>
 80191b8:	2b03      	cmp	r3, #3
 80191ba:	d024      	beq.n	8019206 <__gethex+0x2e0>
 80191bc:	2b01      	cmp	r3, #1
 80191be:	d115      	bne.n	80191ec <__gethex+0x2c6>
 80191c0:	42a6      	cmp	r6, r4
 80191c2:	d113      	bne.n	80191ec <__gethex+0x2c6>
 80191c4:	2e01      	cmp	r6, #1
 80191c6:	dc0b      	bgt.n	80191e0 <__gethex+0x2ba>
 80191c8:	9a06      	ldr	r2, [sp, #24]
 80191ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80191ce:	6013      	str	r3, [r2, #0]
 80191d0:	2301      	movs	r3, #1
 80191d2:	612b      	str	r3, [r5, #16]
 80191d4:	f8c9 3000 	str.w	r3, [r9]
 80191d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80191da:	2762      	movs	r7, #98	; 0x62
 80191dc:	601d      	str	r5, [r3, #0]
 80191de:	e72a      	b.n	8019036 <__gethex+0x110>
 80191e0:	1e71      	subs	r1, r6, #1
 80191e2:	4628      	mov	r0, r5
 80191e4:	f000 fdf4 	bl	8019dd0 <__any_on>
 80191e8:	2800      	cmp	r0, #0
 80191ea:	d1ed      	bne.n	80191c8 <__gethex+0x2a2>
 80191ec:	4629      	mov	r1, r5
 80191ee:	9802      	ldr	r0, [sp, #8]
 80191f0:	f000 fa44 	bl	801967c <_Bfree>
 80191f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80191f6:	2300      	movs	r3, #0
 80191f8:	6013      	str	r3, [r2, #0]
 80191fa:	2750      	movs	r7, #80	; 0x50
 80191fc:	e71b      	b.n	8019036 <__gethex+0x110>
 80191fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019200:	2b00      	cmp	r3, #0
 8019202:	d0e1      	beq.n	80191c8 <__gethex+0x2a2>
 8019204:	e7f2      	b.n	80191ec <__gethex+0x2c6>
 8019206:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019208:	2b00      	cmp	r3, #0
 801920a:	d1dd      	bne.n	80191c8 <__gethex+0x2a2>
 801920c:	e7ee      	b.n	80191ec <__gethex+0x2c6>
 801920e:	1e67      	subs	r7, r4, #1
 8019210:	f1ba 0f00 	cmp.w	sl, #0
 8019214:	d131      	bne.n	801927a <__gethex+0x354>
 8019216:	b127      	cbz	r7, 8019222 <__gethex+0x2fc>
 8019218:	4639      	mov	r1, r7
 801921a:	4628      	mov	r0, r5
 801921c:	f000 fdd8 	bl	8019dd0 <__any_on>
 8019220:	4682      	mov	sl, r0
 8019222:	117a      	asrs	r2, r7, #5
 8019224:	2301      	movs	r3, #1
 8019226:	f007 071f 	and.w	r7, r7, #31
 801922a:	fa03 f707 	lsl.w	r7, r3, r7
 801922e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8019232:	4621      	mov	r1, r4
 8019234:	421f      	tst	r7, r3
 8019236:	4628      	mov	r0, r5
 8019238:	bf18      	it	ne
 801923a:	f04a 0a02 	orrne.w	sl, sl, #2
 801923e:	1b36      	subs	r6, r6, r4
 8019240:	f7ff fe22 	bl	8018e88 <rshift>
 8019244:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019248:	2702      	movs	r7, #2
 801924a:	f1ba 0f00 	cmp.w	sl, #0
 801924e:	d048      	beq.n	80192e2 <__gethex+0x3bc>
 8019250:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019254:	2b02      	cmp	r3, #2
 8019256:	d015      	beq.n	8019284 <__gethex+0x35e>
 8019258:	2b03      	cmp	r3, #3
 801925a:	d017      	beq.n	801928c <__gethex+0x366>
 801925c:	2b01      	cmp	r3, #1
 801925e:	d109      	bne.n	8019274 <__gethex+0x34e>
 8019260:	f01a 0f02 	tst.w	sl, #2
 8019264:	d006      	beq.n	8019274 <__gethex+0x34e>
 8019266:	f8d9 3000 	ldr.w	r3, [r9]
 801926a:	ea4a 0a03 	orr.w	sl, sl, r3
 801926e:	f01a 0f01 	tst.w	sl, #1
 8019272:	d10e      	bne.n	8019292 <__gethex+0x36c>
 8019274:	f047 0710 	orr.w	r7, r7, #16
 8019278:	e033      	b.n	80192e2 <__gethex+0x3bc>
 801927a:	f04f 0a01 	mov.w	sl, #1
 801927e:	e7d0      	b.n	8019222 <__gethex+0x2fc>
 8019280:	2701      	movs	r7, #1
 8019282:	e7e2      	b.n	801924a <__gethex+0x324>
 8019284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019286:	f1c3 0301 	rsb	r3, r3, #1
 801928a:	9315      	str	r3, [sp, #84]	; 0x54
 801928c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801928e:	2b00      	cmp	r3, #0
 8019290:	d0f0      	beq.n	8019274 <__gethex+0x34e>
 8019292:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8019296:	f105 0314 	add.w	r3, r5, #20
 801929a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801929e:	eb03 010a 	add.w	r1, r3, sl
 80192a2:	f04f 0c00 	mov.w	ip, #0
 80192a6:	4618      	mov	r0, r3
 80192a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80192ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80192b0:	d01c      	beq.n	80192ec <__gethex+0x3c6>
 80192b2:	3201      	adds	r2, #1
 80192b4:	6002      	str	r2, [r0, #0]
 80192b6:	2f02      	cmp	r7, #2
 80192b8:	f105 0314 	add.w	r3, r5, #20
 80192bc:	d138      	bne.n	8019330 <__gethex+0x40a>
 80192be:	f8d8 2000 	ldr.w	r2, [r8]
 80192c2:	3a01      	subs	r2, #1
 80192c4:	42b2      	cmp	r2, r6
 80192c6:	d10a      	bne.n	80192de <__gethex+0x3b8>
 80192c8:	1171      	asrs	r1, r6, #5
 80192ca:	2201      	movs	r2, #1
 80192cc:	f006 061f 	and.w	r6, r6, #31
 80192d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80192d4:	fa02 f606 	lsl.w	r6, r2, r6
 80192d8:	421e      	tst	r6, r3
 80192da:	bf18      	it	ne
 80192dc:	4617      	movne	r7, r2
 80192de:	f047 0720 	orr.w	r7, r7, #32
 80192e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80192e4:	601d      	str	r5, [r3, #0]
 80192e6:	9b06      	ldr	r3, [sp, #24]
 80192e8:	601c      	str	r4, [r3, #0]
 80192ea:	e6a4      	b.n	8019036 <__gethex+0x110>
 80192ec:	4299      	cmp	r1, r3
 80192ee:	f843 cc04 	str.w	ip, [r3, #-4]
 80192f2:	d8d8      	bhi.n	80192a6 <__gethex+0x380>
 80192f4:	68ab      	ldr	r3, [r5, #8]
 80192f6:	4599      	cmp	r9, r3
 80192f8:	db12      	blt.n	8019320 <__gethex+0x3fa>
 80192fa:	6869      	ldr	r1, [r5, #4]
 80192fc:	9802      	ldr	r0, [sp, #8]
 80192fe:	3101      	adds	r1, #1
 8019300:	f000 f988 	bl	8019614 <_Balloc>
 8019304:	692a      	ldr	r2, [r5, #16]
 8019306:	3202      	adds	r2, #2
 8019308:	f105 010c 	add.w	r1, r5, #12
 801930c:	4683      	mov	fp, r0
 801930e:	0092      	lsls	r2, r2, #2
 8019310:	300c      	adds	r0, #12
 8019312:	f7fc fe99 	bl	8016048 <memcpy>
 8019316:	4629      	mov	r1, r5
 8019318:	9802      	ldr	r0, [sp, #8]
 801931a:	f000 f9af 	bl	801967c <_Bfree>
 801931e:	465d      	mov	r5, fp
 8019320:	692b      	ldr	r3, [r5, #16]
 8019322:	1c5a      	adds	r2, r3, #1
 8019324:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8019328:	612a      	str	r2, [r5, #16]
 801932a:	2201      	movs	r2, #1
 801932c:	615a      	str	r2, [r3, #20]
 801932e:	e7c2      	b.n	80192b6 <__gethex+0x390>
 8019330:	692a      	ldr	r2, [r5, #16]
 8019332:	454a      	cmp	r2, r9
 8019334:	dd0b      	ble.n	801934e <__gethex+0x428>
 8019336:	2101      	movs	r1, #1
 8019338:	4628      	mov	r0, r5
 801933a:	f7ff fda5 	bl	8018e88 <rshift>
 801933e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019342:	3401      	adds	r4, #1
 8019344:	42a3      	cmp	r3, r4
 8019346:	f6ff aed9 	blt.w	80190fc <__gethex+0x1d6>
 801934a:	2701      	movs	r7, #1
 801934c:	e7c7      	b.n	80192de <__gethex+0x3b8>
 801934e:	f016 061f 	ands.w	r6, r6, #31
 8019352:	d0fa      	beq.n	801934a <__gethex+0x424>
 8019354:	449a      	add	sl, r3
 8019356:	f1c6 0620 	rsb	r6, r6, #32
 801935a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801935e:	f000 fa1d 	bl	801979c <__hi0bits>
 8019362:	42b0      	cmp	r0, r6
 8019364:	dbe7      	blt.n	8019336 <__gethex+0x410>
 8019366:	e7f0      	b.n	801934a <__gethex+0x424>

08019368 <L_shift>:
 8019368:	f1c2 0208 	rsb	r2, r2, #8
 801936c:	0092      	lsls	r2, r2, #2
 801936e:	b570      	push	{r4, r5, r6, lr}
 8019370:	f1c2 0620 	rsb	r6, r2, #32
 8019374:	6843      	ldr	r3, [r0, #4]
 8019376:	6804      	ldr	r4, [r0, #0]
 8019378:	fa03 f506 	lsl.w	r5, r3, r6
 801937c:	432c      	orrs	r4, r5
 801937e:	40d3      	lsrs	r3, r2
 8019380:	6004      	str	r4, [r0, #0]
 8019382:	f840 3f04 	str.w	r3, [r0, #4]!
 8019386:	4288      	cmp	r0, r1
 8019388:	d3f4      	bcc.n	8019374 <L_shift+0xc>
 801938a:	bd70      	pop	{r4, r5, r6, pc}

0801938c <__match>:
 801938c:	b530      	push	{r4, r5, lr}
 801938e:	6803      	ldr	r3, [r0, #0]
 8019390:	3301      	adds	r3, #1
 8019392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019396:	b914      	cbnz	r4, 801939e <__match+0x12>
 8019398:	6003      	str	r3, [r0, #0]
 801939a:	2001      	movs	r0, #1
 801939c:	bd30      	pop	{r4, r5, pc}
 801939e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80193a6:	2d19      	cmp	r5, #25
 80193a8:	bf98      	it	ls
 80193aa:	3220      	addls	r2, #32
 80193ac:	42a2      	cmp	r2, r4
 80193ae:	d0f0      	beq.n	8019392 <__match+0x6>
 80193b0:	2000      	movs	r0, #0
 80193b2:	e7f3      	b.n	801939c <__match+0x10>

080193b4 <__hexnan>:
 80193b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193b8:	680b      	ldr	r3, [r1, #0]
 80193ba:	6801      	ldr	r1, [r0, #0]
 80193bc:	115f      	asrs	r7, r3, #5
 80193be:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80193c2:	f013 031f 	ands.w	r3, r3, #31
 80193c6:	b087      	sub	sp, #28
 80193c8:	bf18      	it	ne
 80193ca:	3704      	addne	r7, #4
 80193cc:	2500      	movs	r5, #0
 80193ce:	1f3e      	subs	r6, r7, #4
 80193d0:	4682      	mov	sl, r0
 80193d2:	4690      	mov	r8, r2
 80193d4:	9301      	str	r3, [sp, #4]
 80193d6:	f847 5c04 	str.w	r5, [r7, #-4]
 80193da:	46b1      	mov	r9, r6
 80193dc:	4634      	mov	r4, r6
 80193de:	9502      	str	r5, [sp, #8]
 80193e0:	46ab      	mov	fp, r5
 80193e2:	784a      	ldrb	r2, [r1, #1]
 80193e4:	1c4b      	adds	r3, r1, #1
 80193e6:	9303      	str	r3, [sp, #12]
 80193e8:	b342      	cbz	r2, 801943c <__hexnan+0x88>
 80193ea:	4610      	mov	r0, r2
 80193ec:	9105      	str	r1, [sp, #20]
 80193ee:	9204      	str	r2, [sp, #16]
 80193f0:	f7ff fd84 	bl	8018efc <__hexdig_fun>
 80193f4:	2800      	cmp	r0, #0
 80193f6:	d143      	bne.n	8019480 <__hexnan+0xcc>
 80193f8:	9a04      	ldr	r2, [sp, #16]
 80193fa:	9905      	ldr	r1, [sp, #20]
 80193fc:	2a20      	cmp	r2, #32
 80193fe:	d818      	bhi.n	8019432 <__hexnan+0x7e>
 8019400:	9b02      	ldr	r3, [sp, #8]
 8019402:	459b      	cmp	fp, r3
 8019404:	dd13      	ble.n	801942e <__hexnan+0x7a>
 8019406:	454c      	cmp	r4, r9
 8019408:	d206      	bcs.n	8019418 <__hexnan+0x64>
 801940a:	2d07      	cmp	r5, #7
 801940c:	dc04      	bgt.n	8019418 <__hexnan+0x64>
 801940e:	462a      	mov	r2, r5
 8019410:	4649      	mov	r1, r9
 8019412:	4620      	mov	r0, r4
 8019414:	f7ff ffa8 	bl	8019368 <L_shift>
 8019418:	4544      	cmp	r4, r8
 801941a:	d944      	bls.n	80194a6 <__hexnan+0xf2>
 801941c:	2300      	movs	r3, #0
 801941e:	f1a4 0904 	sub.w	r9, r4, #4
 8019422:	f844 3c04 	str.w	r3, [r4, #-4]
 8019426:	f8cd b008 	str.w	fp, [sp, #8]
 801942a:	464c      	mov	r4, r9
 801942c:	461d      	mov	r5, r3
 801942e:	9903      	ldr	r1, [sp, #12]
 8019430:	e7d7      	b.n	80193e2 <__hexnan+0x2e>
 8019432:	2a29      	cmp	r2, #41	; 0x29
 8019434:	d14a      	bne.n	80194cc <__hexnan+0x118>
 8019436:	3102      	adds	r1, #2
 8019438:	f8ca 1000 	str.w	r1, [sl]
 801943c:	f1bb 0f00 	cmp.w	fp, #0
 8019440:	d044      	beq.n	80194cc <__hexnan+0x118>
 8019442:	454c      	cmp	r4, r9
 8019444:	d206      	bcs.n	8019454 <__hexnan+0xa0>
 8019446:	2d07      	cmp	r5, #7
 8019448:	dc04      	bgt.n	8019454 <__hexnan+0xa0>
 801944a:	462a      	mov	r2, r5
 801944c:	4649      	mov	r1, r9
 801944e:	4620      	mov	r0, r4
 8019450:	f7ff ff8a 	bl	8019368 <L_shift>
 8019454:	4544      	cmp	r4, r8
 8019456:	d928      	bls.n	80194aa <__hexnan+0xf6>
 8019458:	4643      	mov	r3, r8
 801945a:	f854 2b04 	ldr.w	r2, [r4], #4
 801945e:	f843 2b04 	str.w	r2, [r3], #4
 8019462:	42a6      	cmp	r6, r4
 8019464:	d2f9      	bcs.n	801945a <__hexnan+0xa6>
 8019466:	2200      	movs	r2, #0
 8019468:	f843 2b04 	str.w	r2, [r3], #4
 801946c:	429e      	cmp	r6, r3
 801946e:	d2fb      	bcs.n	8019468 <__hexnan+0xb4>
 8019470:	6833      	ldr	r3, [r6, #0]
 8019472:	b91b      	cbnz	r3, 801947c <__hexnan+0xc8>
 8019474:	4546      	cmp	r6, r8
 8019476:	d127      	bne.n	80194c8 <__hexnan+0x114>
 8019478:	2301      	movs	r3, #1
 801947a:	6033      	str	r3, [r6, #0]
 801947c:	2005      	movs	r0, #5
 801947e:	e026      	b.n	80194ce <__hexnan+0x11a>
 8019480:	3501      	adds	r5, #1
 8019482:	2d08      	cmp	r5, #8
 8019484:	f10b 0b01 	add.w	fp, fp, #1
 8019488:	dd06      	ble.n	8019498 <__hexnan+0xe4>
 801948a:	4544      	cmp	r4, r8
 801948c:	d9cf      	bls.n	801942e <__hexnan+0x7a>
 801948e:	2300      	movs	r3, #0
 8019490:	f844 3c04 	str.w	r3, [r4, #-4]
 8019494:	2501      	movs	r5, #1
 8019496:	3c04      	subs	r4, #4
 8019498:	6822      	ldr	r2, [r4, #0]
 801949a:	f000 000f 	and.w	r0, r0, #15
 801949e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80194a2:	6020      	str	r0, [r4, #0]
 80194a4:	e7c3      	b.n	801942e <__hexnan+0x7a>
 80194a6:	2508      	movs	r5, #8
 80194a8:	e7c1      	b.n	801942e <__hexnan+0x7a>
 80194aa:	9b01      	ldr	r3, [sp, #4]
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d0df      	beq.n	8019470 <__hexnan+0xbc>
 80194b0:	f04f 32ff 	mov.w	r2, #4294967295
 80194b4:	f1c3 0320 	rsb	r3, r3, #32
 80194b8:	fa22 f303 	lsr.w	r3, r2, r3
 80194bc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80194c0:	401a      	ands	r2, r3
 80194c2:	f847 2c04 	str.w	r2, [r7, #-4]
 80194c6:	e7d3      	b.n	8019470 <__hexnan+0xbc>
 80194c8:	3e04      	subs	r6, #4
 80194ca:	e7d1      	b.n	8019470 <__hexnan+0xbc>
 80194cc:	2004      	movs	r0, #4
 80194ce:	b007      	add	sp, #28
 80194d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194d4 <__locale_ctype_ptr_l>:
 80194d4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80194d8:	4770      	bx	lr
	...

080194dc <__locale_ctype_ptr>:
 80194dc:	4b04      	ldr	r3, [pc, #16]	; (80194f0 <__locale_ctype_ptr+0x14>)
 80194de:	4a05      	ldr	r2, [pc, #20]	; (80194f4 <__locale_ctype_ptr+0x18>)
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	6a1b      	ldr	r3, [r3, #32]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	bf08      	it	eq
 80194e8:	4613      	moveq	r3, r2
 80194ea:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80194ee:	4770      	bx	lr
 80194f0:	2000002c 	.word	0x2000002c
 80194f4:	20000090 	.word	0x20000090

080194f8 <__localeconv_l>:
 80194f8:	30f0      	adds	r0, #240	; 0xf0
 80194fa:	4770      	bx	lr

080194fc <_localeconv_r>:
 80194fc:	4b04      	ldr	r3, [pc, #16]	; (8019510 <_localeconv_r+0x14>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	6a18      	ldr	r0, [r3, #32]
 8019502:	4b04      	ldr	r3, [pc, #16]	; (8019514 <_localeconv_r+0x18>)
 8019504:	2800      	cmp	r0, #0
 8019506:	bf08      	it	eq
 8019508:	4618      	moveq	r0, r3
 801950a:	30f0      	adds	r0, #240	; 0xf0
 801950c:	4770      	bx	lr
 801950e:	bf00      	nop
 8019510:	2000002c 	.word	0x2000002c
 8019514:	20000090 	.word	0x20000090

08019518 <__swhatbuf_r>:
 8019518:	b570      	push	{r4, r5, r6, lr}
 801951a:	460e      	mov	r6, r1
 801951c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019520:	2900      	cmp	r1, #0
 8019522:	b096      	sub	sp, #88	; 0x58
 8019524:	4614      	mov	r4, r2
 8019526:	461d      	mov	r5, r3
 8019528:	da07      	bge.n	801953a <__swhatbuf_r+0x22>
 801952a:	2300      	movs	r3, #0
 801952c:	602b      	str	r3, [r5, #0]
 801952e:	89b3      	ldrh	r3, [r6, #12]
 8019530:	061a      	lsls	r2, r3, #24
 8019532:	d410      	bmi.n	8019556 <__swhatbuf_r+0x3e>
 8019534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019538:	e00e      	b.n	8019558 <__swhatbuf_r+0x40>
 801953a:	466a      	mov	r2, sp
 801953c:	f001 fd18 	bl	801af70 <_fstat_r>
 8019540:	2800      	cmp	r0, #0
 8019542:	dbf2      	blt.n	801952a <__swhatbuf_r+0x12>
 8019544:	9a01      	ldr	r2, [sp, #4]
 8019546:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801954a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801954e:	425a      	negs	r2, r3
 8019550:	415a      	adcs	r2, r3
 8019552:	602a      	str	r2, [r5, #0]
 8019554:	e7ee      	b.n	8019534 <__swhatbuf_r+0x1c>
 8019556:	2340      	movs	r3, #64	; 0x40
 8019558:	2000      	movs	r0, #0
 801955a:	6023      	str	r3, [r4, #0]
 801955c:	b016      	add	sp, #88	; 0x58
 801955e:	bd70      	pop	{r4, r5, r6, pc}

08019560 <__smakebuf_r>:
 8019560:	898b      	ldrh	r3, [r1, #12]
 8019562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019564:	079d      	lsls	r5, r3, #30
 8019566:	4606      	mov	r6, r0
 8019568:	460c      	mov	r4, r1
 801956a:	d507      	bpl.n	801957c <__smakebuf_r+0x1c>
 801956c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019570:	6023      	str	r3, [r4, #0]
 8019572:	6123      	str	r3, [r4, #16]
 8019574:	2301      	movs	r3, #1
 8019576:	6163      	str	r3, [r4, #20]
 8019578:	b002      	add	sp, #8
 801957a:	bd70      	pop	{r4, r5, r6, pc}
 801957c:	ab01      	add	r3, sp, #4
 801957e:	466a      	mov	r2, sp
 8019580:	f7ff ffca 	bl	8019518 <__swhatbuf_r>
 8019584:	9900      	ldr	r1, [sp, #0]
 8019586:	4605      	mov	r5, r0
 8019588:	4630      	mov	r0, r6
 801958a:	f000 fc9f 	bl	8019ecc <_malloc_r>
 801958e:	b948      	cbnz	r0, 80195a4 <__smakebuf_r+0x44>
 8019590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019594:	059a      	lsls	r2, r3, #22
 8019596:	d4ef      	bmi.n	8019578 <__smakebuf_r+0x18>
 8019598:	f023 0303 	bic.w	r3, r3, #3
 801959c:	f043 0302 	orr.w	r3, r3, #2
 80195a0:	81a3      	strh	r3, [r4, #12]
 80195a2:	e7e3      	b.n	801956c <__smakebuf_r+0xc>
 80195a4:	4b0d      	ldr	r3, [pc, #52]	; (80195dc <__smakebuf_r+0x7c>)
 80195a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80195a8:	89a3      	ldrh	r3, [r4, #12]
 80195aa:	6020      	str	r0, [r4, #0]
 80195ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80195b0:	81a3      	strh	r3, [r4, #12]
 80195b2:	9b00      	ldr	r3, [sp, #0]
 80195b4:	6163      	str	r3, [r4, #20]
 80195b6:	9b01      	ldr	r3, [sp, #4]
 80195b8:	6120      	str	r0, [r4, #16]
 80195ba:	b15b      	cbz	r3, 80195d4 <__smakebuf_r+0x74>
 80195bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195c0:	4630      	mov	r0, r6
 80195c2:	f001 fce7 	bl	801af94 <_isatty_r>
 80195c6:	b128      	cbz	r0, 80195d4 <__smakebuf_r+0x74>
 80195c8:	89a3      	ldrh	r3, [r4, #12]
 80195ca:	f023 0303 	bic.w	r3, r3, #3
 80195ce:	f043 0301 	orr.w	r3, r3, #1
 80195d2:	81a3      	strh	r3, [r4, #12]
 80195d4:	89a3      	ldrh	r3, [r4, #12]
 80195d6:	431d      	orrs	r5, r3
 80195d8:	81a5      	strh	r5, [r4, #12]
 80195da:	e7cd      	b.n	8019578 <__smakebuf_r+0x18>
 80195dc:	08018d05 	.word	0x08018d05

080195e0 <malloc>:
 80195e0:	4b02      	ldr	r3, [pc, #8]	; (80195ec <malloc+0xc>)
 80195e2:	4601      	mov	r1, r0
 80195e4:	6818      	ldr	r0, [r3, #0]
 80195e6:	f000 bc71 	b.w	8019ecc <_malloc_r>
 80195ea:	bf00      	nop
 80195ec:	2000002c 	.word	0x2000002c

080195f0 <__ascii_mbtowc>:
 80195f0:	b082      	sub	sp, #8
 80195f2:	b901      	cbnz	r1, 80195f6 <__ascii_mbtowc+0x6>
 80195f4:	a901      	add	r1, sp, #4
 80195f6:	b142      	cbz	r2, 801960a <__ascii_mbtowc+0x1a>
 80195f8:	b14b      	cbz	r3, 801960e <__ascii_mbtowc+0x1e>
 80195fa:	7813      	ldrb	r3, [r2, #0]
 80195fc:	600b      	str	r3, [r1, #0]
 80195fe:	7812      	ldrb	r2, [r2, #0]
 8019600:	1c10      	adds	r0, r2, #0
 8019602:	bf18      	it	ne
 8019604:	2001      	movne	r0, #1
 8019606:	b002      	add	sp, #8
 8019608:	4770      	bx	lr
 801960a:	4610      	mov	r0, r2
 801960c:	e7fb      	b.n	8019606 <__ascii_mbtowc+0x16>
 801960e:	f06f 0001 	mvn.w	r0, #1
 8019612:	e7f8      	b.n	8019606 <__ascii_mbtowc+0x16>

08019614 <_Balloc>:
 8019614:	b570      	push	{r4, r5, r6, lr}
 8019616:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019618:	4604      	mov	r4, r0
 801961a:	460e      	mov	r6, r1
 801961c:	b93d      	cbnz	r5, 801962e <_Balloc+0x1a>
 801961e:	2010      	movs	r0, #16
 8019620:	f7ff ffde 	bl	80195e0 <malloc>
 8019624:	6260      	str	r0, [r4, #36]	; 0x24
 8019626:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801962a:	6005      	str	r5, [r0, #0]
 801962c:	60c5      	str	r5, [r0, #12]
 801962e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019630:	68eb      	ldr	r3, [r5, #12]
 8019632:	b183      	cbz	r3, 8019656 <_Balloc+0x42>
 8019634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019636:	68db      	ldr	r3, [r3, #12]
 8019638:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801963c:	b9b8      	cbnz	r0, 801966e <_Balloc+0x5a>
 801963e:	2101      	movs	r1, #1
 8019640:	fa01 f506 	lsl.w	r5, r1, r6
 8019644:	1d6a      	adds	r2, r5, #5
 8019646:	0092      	lsls	r2, r2, #2
 8019648:	4620      	mov	r0, r4
 801964a:	f000 fbe2 	bl	8019e12 <_calloc_r>
 801964e:	b160      	cbz	r0, 801966a <_Balloc+0x56>
 8019650:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8019654:	e00e      	b.n	8019674 <_Balloc+0x60>
 8019656:	2221      	movs	r2, #33	; 0x21
 8019658:	2104      	movs	r1, #4
 801965a:	4620      	mov	r0, r4
 801965c:	f000 fbd9 	bl	8019e12 <_calloc_r>
 8019660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019662:	60e8      	str	r0, [r5, #12]
 8019664:	68db      	ldr	r3, [r3, #12]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d1e4      	bne.n	8019634 <_Balloc+0x20>
 801966a:	2000      	movs	r0, #0
 801966c:	bd70      	pop	{r4, r5, r6, pc}
 801966e:	6802      	ldr	r2, [r0, #0]
 8019670:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8019674:	2300      	movs	r3, #0
 8019676:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801967a:	e7f7      	b.n	801966c <_Balloc+0x58>

0801967c <_Bfree>:
 801967c:	b570      	push	{r4, r5, r6, lr}
 801967e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8019680:	4606      	mov	r6, r0
 8019682:	460d      	mov	r5, r1
 8019684:	b93c      	cbnz	r4, 8019696 <_Bfree+0x1a>
 8019686:	2010      	movs	r0, #16
 8019688:	f7ff ffaa 	bl	80195e0 <malloc>
 801968c:	6270      	str	r0, [r6, #36]	; 0x24
 801968e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019692:	6004      	str	r4, [r0, #0]
 8019694:	60c4      	str	r4, [r0, #12]
 8019696:	b13d      	cbz	r5, 80196a8 <_Bfree+0x2c>
 8019698:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801969a:	686a      	ldr	r2, [r5, #4]
 801969c:	68db      	ldr	r3, [r3, #12]
 801969e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80196a2:	6029      	str	r1, [r5, #0]
 80196a4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80196a8:	bd70      	pop	{r4, r5, r6, pc}

080196aa <__multadd>:
 80196aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196ae:	690d      	ldr	r5, [r1, #16]
 80196b0:	461f      	mov	r7, r3
 80196b2:	4606      	mov	r6, r0
 80196b4:	460c      	mov	r4, r1
 80196b6:	f101 0c14 	add.w	ip, r1, #20
 80196ba:	2300      	movs	r3, #0
 80196bc:	f8dc 0000 	ldr.w	r0, [ip]
 80196c0:	b281      	uxth	r1, r0
 80196c2:	fb02 7101 	mla	r1, r2, r1, r7
 80196c6:	0c0f      	lsrs	r7, r1, #16
 80196c8:	0c00      	lsrs	r0, r0, #16
 80196ca:	fb02 7000 	mla	r0, r2, r0, r7
 80196ce:	b289      	uxth	r1, r1
 80196d0:	3301      	adds	r3, #1
 80196d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80196d6:	429d      	cmp	r5, r3
 80196d8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80196dc:	f84c 1b04 	str.w	r1, [ip], #4
 80196e0:	dcec      	bgt.n	80196bc <__multadd+0x12>
 80196e2:	b1d7      	cbz	r7, 801971a <__multadd+0x70>
 80196e4:	68a3      	ldr	r3, [r4, #8]
 80196e6:	42ab      	cmp	r3, r5
 80196e8:	dc12      	bgt.n	8019710 <__multadd+0x66>
 80196ea:	6861      	ldr	r1, [r4, #4]
 80196ec:	4630      	mov	r0, r6
 80196ee:	3101      	adds	r1, #1
 80196f0:	f7ff ff90 	bl	8019614 <_Balloc>
 80196f4:	6922      	ldr	r2, [r4, #16]
 80196f6:	3202      	adds	r2, #2
 80196f8:	f104 010c 	add.w	r1, r4, #12
 80196fc:	4680      	mov	r8, r0
 80196fe:	0092      	lsls	r2, r2, #2
 8019700:	300c      	adds	r0, #12
 8019702:	f7fc fca1 	bl	8016048 <memcpy>
 8019706:	4621      	mov	r1, r4
 8019708:	4630      	mov	r0, r6
 801970a:	f7ff ffb7 	bl	801967c <_Bfree>
 801970e:	4644      	mov	r4, r8
 8019710:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019714:	3501      	adds	r5, #1
 8019716:	615f      	str	r7, [r3, #20]
 8019718:	6125      	str	r5, [r4, #16]
 801971a:	4620      	mov	r0, r4
 801971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019720 <__s2b>:
 8019720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019724:	460c      	mov	r4, r1
 8019726:	4615      	mov	r5, r2
 8019728:	461f      	mov	r7, r3
 801972a:	2209      	movs	r2, #9
 801972c:	3308      	adds	r3, #8
 801972e:	4606      	mov	r6, r0
 8019730:	fb93 f3f2 	sdiv	r3, r3, r2
 8019734:	2100      	movs	r1, #0
 8019736:	2201      	movs	r2, #1
 8019738:	429a      	cmp	r2, r3
 801973a:	db20      	blt.n	801977e <__s2b+0x5e>
 801973c:	4630      	mov	r0, r6
 801973e:	f7ff ff69 	bl	8019614 <_Balloc>
 8019742:	9b08      	ldr	r3, [sp, #32]
 8019744:	6143      	str	r3, [r0, #20]
 8019746:	2d09      	cmp	r5, #9
 8019748:	f04f 0301 	mov.w	r3, #1
 801974c:	6103      	str	r3, [r0, #16]
 801974e:	dd19      	ble.n	8019784 <__s2b+0x64>
 8019750:	f104 0809 	add.w	r8, r4, #9
 8019754:	46c1      	mov	r9, r8
 8019756:	442c      	add	r4, r5
 8019758:	f819 3b01 	ldrb.w	r3, [r9], #1
 801975c:	4601      	mov	r1, r0
 801975e:	3b30      	subs	r3, #48	; 0x30
 8019760:	220a      	movs	r2, #10
 8019762:	4630      	mov	r0, r6
 8019764:	f7ff ffa1 	bl	80196aa <__multadd>
 8019768:	45a1      	cmp	r9, r4
 801976a:	d1f5      	bne.n	8019758 <__s2b+0x38>
 801976c:	eb08 0405 	add.w	r4, r8, r5
 8019770:	3c08      	subs	r4, #8
 8019772:	1b2d      	subs	r5, r5, r4
 8019774:	1963      	adds	r3, r4, r5
 8019776:	42bb      	cmp	r3, r7
 8019778:	db07      	blt.n	801978a <__s2b+0x6a>
 801977a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801977e:	0052      	lsls	r2, r2, #1
 8019780:	3101      	adds	r1, #1
 8019782:	e7d9      	b.n	8019738 <__s2b+0x18>
 8019784:	340a      	adds	r4, #10
 8019786:	2509      	movs	r5, #9
 8019788:	e7f3      	b.n	8019772 <__s2b+0x52>
 801978a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801978e:	4601      	mov	r1, r0
 8019790:	3b30      	subs	r3, #48	; 0x30
 8019792:	220a      	movs	r2, #10
 8019794:	4630      	mov	r0, r6
 8019796:	f7ff ff88 	bl	80196aa <__multadd>
 801979a:	e7eb      	b.n	8019774 <__s2b+0x54>

0801979c <__hi0bits>:
 801979c:	0c02      	lsrs	r2, r0, #16
 801979e:	0412      	lsls	r2, r2, #16
 80197a0:	4603      	mov	r3, r0
 80197a2:	b9b2      	cbnz	r2, 80197d2 <__hi0bits+0x36>
 80197a4:	0403      	lsls	r3, r0, #16
 80197a6:	2010      	movs	r0, #16
 80197a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80197ac:	bf04      	itt	eq
 80197ae:	021b      	lsleq	r3, r3, #8
 80197b0:	3008      	addeq	r0, #8
 80197b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80197b6:	bf04      	itt	eq
 80197b8:	011b      	lsleq	r3, r3, #4
 80197ba:	3004      	addeq	r0, #4
 80197bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80197c0:	bf04      	itt	eq
 80197c2:	009b      	lsleq	r3, r3, #2
 80197c4:	3002      	addeq	r0, #2
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	db06      	blt.n	80197d8 <__hi0bits+0x3c>
 80197ca:	005b      	lsls	r3, r3, #1
 80197cc:	d503      	bpl.n	80197d6 <__hi0bits+0x3a>
 80197ce:	3001      	adds	r0, #1
 80197d0:	4770      	bx	lr
 80197d2:	2000      	movs	r0, #0
 80197d4:	e7e8      	b.n	80197a8 <__hi0bits+0xc>
 80197d6:	2020      	movs	r0, #32
 80197d8:	4770      	bx	lr

080197da <__lo0bits>:
 80197da:	6803      	ldr	r3, [r0, #0]
 80197dc:	f013 0207 	ands.w	r2, r3, #7
 80197e0:	4601      	mov	r1, r0
 80197e2:	d00b      	beq.n	80197fc <__lo0bits+0x22>
 80197e4:	07da      	lsls	r2, r3, #31
 80197e6:	d423      	bmi.n	8019830 <__lo0bits+0x56>
 80197e8:	0798      	lsls	r0, r3, #30
 80197ea:	bf49      	itett	mi
 80197ec:	085b      	lsrmi	r3, r3, #1
 80197ee:	089b      	lsrpl	r3, r3, #2
 80197f0:	2001      	movmi	r0, #1
 80197f2:	600b      	strmi	r3, [r1, #0]
 80197f4:	bf5c      	itt	pl
 80197f6:	600b      	strpl	r3, [r1, #0]
 80197f8:	2002      	movpl	r0, #2
 80197fa:	4770      	bx	lr
 80197fc:	b298      	uxth	r0, r3
 80197fe:	b9a8      	cbnz	r0, 801982c <__lo0bits+0x52>
 8019800:	0c1b      	lsrs	r3, r3, #16
 8019802:	2010      	movs	r0, #16
 8019804:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019808:	bf04      	itt	eq
 801980a:	0a1b      	lsreq	r3, r3, #8
 801980c:	3008      	addeq	r0, #8
 801980e:	071a      	lsls	r2, r3, #28
 8019810:	bf04      	itt	eq
 8019812:	091b      	lsreq	r3, r3, #4
 8019814:	3004      	addeq	r0, #4
 8019816:	079a      	lsls	r2, r3, #30
 8019818:	bf04      	itt	eq
 801981a:	089b      	lsreq	r3, r3, #2
 801981c:	3002      	addeq	r0, #2
 801981e:	07da      	lsls	r2, r3, #31
 8019820:	d402      	bmi.n	8019828 <__lo0bits+0x4e>
 8019822:	085b      	lsrs	r3, r3, #1
 8019824:	d006      	beq.n	8019834 <__lo0bits+0x5a>
 8019826:	3001      	adds	r0, #1
 8019828:	600b      	str	r3, [r1, #0]
 801982a:	4770      	bx	lr
 801982c:	4610      	mov	r0, r2
 801982e:	e7e9      	b.n	8019804 <__lo0bits+0x2a>
 8019830:	2000      	movs	r0, #0
 8019832:	4770      	bx	lr
 8019834:	2020      	movs	r0, #32
 8019836:	4770      	bx	lr

08019838 <__i2b>:
 8019838:	b510      	push	{r4, lr}
 801983a:	460c      	mov	r4, r1
 801983c:	2101      	movs	r1, #1
 801983e:	f7ff fee9 	bl	8019614 <_Balloc>
 8019842:	2201      	movs	r2, #1
 8019844:	6144      	str	r4, [r0, #20]
 8019846:	6102      	str	r2, [r0, #16]
 8019848:	bd10      	pop	{r4, pc}

0801984a <__multiply>:
 801984a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801984e:	4614      	mov	r4, r2
 8019850:	690a      	ldr	r2, [r1, #16]
 8019852:	6923      	ldr	r3, [r4, #16]
 8019854:	429a      	cmp	r2, r3
 8019856:	bfb8      	it	lt
 8019858:	460b      	movlt	r3, r1
 801985a:	4688      	mov	r8, r1
 801985c:	bfbc      	itt	lt
 801985e:	46a0      	movlt	r8, r4
 8019860:	461c      	movlt	r4, r3
 8019862:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019866:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801986a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801986e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019872:	eb07 0609 	add.w	r6, r7, r9
 8019876:	42b3      	cmp	r3, r6
 8019878:	bfb8      	it	lt
 801987a:	3101      	addlt	r1, #1
 801987c:	f7ff feca 	bl	8019614 <_Balloc>
 8019880:	f100 0514 	add.w	r5, r0, #20
 8019884:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8019888:	462b      	mov	r3, r5
 801988a:	2200      	movs	r2, #0
 801988c:	4573      	cmp	r3, lr
 801988e:	d316      	bcc.n	80198be <__multiply+0x74>
 8019890:	f104 0214 	add.w	r2, r4, #20
 8019894:	f108 0114 	add.w	r1, r8, #20
 8019898:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801989c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80198a0:	9300      	str	r3, [sp, #0]
 80198a2:	9b00      	ldr	r3, [sp, #0]
 80198a4:	9201      	str	r2, [sp, #4]
 80198a6:	4293      	cmp	r3, r2
 80198a8:	d80c      	bhi.n	80198c4 <__multiply+0x7a>
 80198aa:	2e00      	cmp	r6, #0
 80198ac:	dd03      	ble.n	80198b6 <__multiply+0x6c>
 80198ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d05d      	beq.n	8019972 <__multiply+0x128>
 80198b6:	6106      	str	r6, [r0, #16]
 80198b8:	b003      	add	sp, #12
 80198ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198be:	f843 2b04 	str.w	r2, [r3], #4
 80198c2:	e7e3      	b.n	801988c <__multiply+0x42>
 80198c4:	f8b2 b000 	ldrh.w	fp, [r2]
 80198c8:	f1bb 0f00 	cmp.w	fp, #0
 80198cc:	d023      	beq.n	8019916 <__multiply+0xcc>
 80198ce:	4689      	mov	r9, r1
 80198d0:	46ac      	mov	ip, r5
 80198d2:	f04f 0800 	mov.w	r8, #0
 80198d6:	f859 4b04 	ldr.w	r4, [r9], #4
 80198da:	f8dc a000 	ldr.w	sl, [ip]
 80198de:	b2a3      	uxth	r3, r4
 80198e0:	fa1f fa8a 	uxth.w	sl, sl
 80198e4:	fb0b a303 	mla	r3, fp, r3, sl
 80198e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80198ec:	f8dc 4000 	ldr.w	r4, [ip]
 80198f0:	4443      	add	r3, r8
 80198f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80198f6:	fb0b 840a 	mla	r4, fp, sl, r8
 80198fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80198fe:	46e2      	mov	sl, ip
 8019900:	b29b      	uxth	r3, r3
 8019902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019906:	454f      	cmp	r7, r9
 8019908:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801990c:	f84a 3b04 	str.w	r3, [sl], #4
 8019910:	d82b      	bhi.n	801996a <__multiply+0x120>
 8019912:	f8cc 8004 	str.w	r8, [ip, #4]
 8019916:	9b01      	ldr	r3, [sp, #4]
 8019918:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801991c:	3204      	adds	r2, #4
 801991e:	f1ba 0f00 	cmp.w	sl, #0
 8019922:	d020      	beq.n	8019966 <__multiply+0x11c>
 8019924:	682b      	ldr	r3, [r5, #0]
 8019926:	4689      	mov	r9, r1
 8019928:	46a8      	mov	r8, r5
 801992a:	f04f 0b00 	mov.w	fp, #0
 801992e:	f8b9 c000 	ldrh.w	ip, [r9]
 8019932:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8019936:	fb0a 440c 	mla	r4, sl, ip, r4
 801993a:	445c      	add	r4, fp
 801993c:	46c4      	mov	ip, r8
 801993e:	b29b      	uxth	r3, r3
 8019940:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019944:	f84c 3b04 	str.w	r3, [ip], #4
 8019948:	f859 3b04 	ldr.w	r3, [r9], #4
 801994c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8019950:	0c1b      	lsrs	r3, r3, #16
 8019952:	fb0a b303 	mla	r3, sl, r3, fp
 8019956:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801995a:	454f      	cmp	r7, r9
 801995c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8019960:	d805      	bhi.n	801996e <__multiply+0x124>
 8019962:	f8c8 3004 	str.w	r3, [r8, #4]
 8019966:	3504      	adds	r5, #4
 8019968:	e79b      	b.n	80198a2 <__multiply+0x58>
 801996a:	46d4      	mov	ip, sl
 801996c:	e7b3      	b.n	80198d6 <__multiply+0x8c>
 801996e:	46e0      	mov	r8, ip
 8019970:	e7dd      	b.n	801992e <__multiply+0xe4>
 8019972:	3e01      	subs	r6, #1
 8019974:	e799      	b.n	80198aa <__multiply+0x60>
	...

08019978 <__pow5mult>:
 8019978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801997c:	4615      	mov	r5, r2
 801997e:	f012 0203 	ands.w	r2, r2, #3
 8019982:	4606      	mov	r6, r0
 8019984:	460f      	mov	r7, r1
 8019986:	d007      	beq.n	8019998 <__pow5mult+0x20>
 8019988:	3a01      	subs	r2, #1
 801998a:	4c21      	ldr	r4, [pc, #132]	; (8019a10 <__pow5mult+0x98>)
 801998c:	2300      	movs	r3, #0
 801998e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019992:	f7ff fe8a 	bl	80196aa <__multadd>
 8019996:	4607      	mov	r7, r0
 8019998:	10ad      	asrs	r5, r5, #2
 801999a:	d035      	beq.n	8019a08 <__pow5mult+0x90>
 801999c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801999e:	b93c      	cbnz	r4, 80199b0 <__pow5mult+0x38>
 80199a0:	2010      	movs	r0, #16
 80199a2:	f7ff fe1d 	bl	80195e0 <malloc>
 80199a6:	6270      	str	r0, [r6, #36]	; 0x24
 80199a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80199ac:	6004      	str	r4, [r0, #0]
 80199ae:	60c4      	str	r4, [r0, #12]
 80199b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80199b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80199b8:	b94c      	cbnz	r4, 80199ce <__pow5mult+0x56>
 80199ba:	f240 2171 	movw	r1, #625	; 0x271
 80199be:	4630      	mov	r0, r6
 80199c0:	f7ff ff3a 	bl	8019838 <__i2b>
 80199c4:	2300      	movs	r3, #0
 80199c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80199ca:	4604      	mov	r4, r0
 80199cc:	6003      	str	r3, [r0, #0]
 80199ce:	f04f 0800 	mov.w	r8, #0
 80199d2:	07eb      	lsls	r3, r5, #31
 80199d4:	d50a      	bpl.n	80199ec <__pow5mult+0x74>
 80199d6:	4639      	mov	r1, r7
 80199d8:	4622      	mov	r2, r4
 80199da:	4630      	mov	r0, r6
 80199dc:	f7ff ff35 	bl	801984a <__multiply>
 80199e0:	4639      	mov	r1, r7
 80199e2:	4681      	mov	r9, r0
 80199e4:	4630      	mov	r0, r6
 80199e6:	f7ff fe49 	bl	801967c <_Bfree>
 80199ea:	464f      	mov	r7, r9
 80199ec:	106d      	asrs	r5, r5, #1
 80199ee:	d00b      	beq.n	8019a08 <__pow5mult+0x90>
 80199f0:	6820      	ldr	r0, [r4, #0]
 80199f2:	b938      	cbnz	r0, 8019a04 <__pow5mult+0x8c>
 80199f4:	4622      	mov	r2, r4
 80199f6:	4621      	mov	r1, r4
 80199f8:	4630      	mov	r0, r6
 80199fa:	f7ff ff26 	bl	801984a <__multiply>
 80199fe:	6020      	str	r0, [r4, #0]
 8019a00:	f8c0 8000 	str.w	r8, [r0]
 8019a04:	4604      	mov	r4, r0
 8019a06:	e7e4      	b.n	80199d2 <__pow5mult+0x5a>
 8019a08:	4638      	mov	r0, r7
 8019a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a0e:	bf00      	nop
 8019a10:	0801b548 	.word	0x0801b548

08019a14 <__lshift>:
 8019a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a18:	460c      	mov	r4, r1
 8019a1a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019a1e:	6923      	ldr	r3, [r4, #16]
 8019a20:	6849      	ldr	r1, [r1, #4]
 8019a22:	eb0a 0903 	add.w	r9, sl, r3
 8019a26:	68a3      	ldr	r3, [r4, #8]
 8019a28:	4607      	mov	r7, r0
 8019a2a:	4616      	mov	r6, r2
 8019a2c:	f109 0501 	add.w	r5, r9, #1
 8019a30:	42ab      	cmp	r3, r5
 8019a32:	db32      	blt.n	8019a9a <__lshift+0x86>
 8019a34:	4638      	mov	r0, r7
 8019a36:	f7ff fded 	bl	8019614 <_Balloc>
 8019a3a:	2300      	movs	r3, #0
 8019a3c:	4680      	mov	r8, r0
 8019a3e:	f100 0114 	add.w	r1, r0, #20
 8019a42:	461a      	mov	r2, r3
 8019a44:	4553      	cmp	r3, sl
 8019a46:	db2b      	blt.n	8019aa0 <__lshift+0x8c>
 8019a48:	6920      	ldr	r0, [r4, #16]
 8019a4a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019a4e:	f104 0314 	add.w	r3, r4, #20
 8019a52:	f016 021f 	ands.w	r2, r6, #31
 8019a56:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019a5a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019a5e:	d025      	beq.n	8019aac <__lshift+0x98>
 8019a60:	f1c2 0e20 	rsb	lr, r2, #32
 8019a64:	2000      	movs	r0, #0
 8019a66:	681e      	ldr	r6, [r3, #0]
 8019a68:	468a      	mov	sl, r1
 8019a6a:	4096      	lsls	r6, r2
 8019a6c:	4330      	orrs	r0, r6
 8019a6e:	f84a 0b04 	str.w	r0, [sl], #4
 8019a72:	f853 0b04 	ldr.w	r0, [r3], #4
 8019a76:	459c      	cmp	ip, r3
 8019a78:	fa20 f00e 	lsr.w	r0, r0, lr
 8019a7c:	d814      	bhi.n	8019aa8 <__lshift+0x94>
 8019a7e:	6048      	str	r0, [r1, #4]
 8019a80:	b108      	cbz	r0, 8019a86 <__lshift+0x72>
 8019a82:	f109 0502 	add.w	r5, r9, #2
 8019a86:	3d01      	subs	r5, #1
 8019a88:	4638      	mov	r0, r7
 8019a8a:	f8c8 5010 	str.w	r5, [r8, #16]
 8019a8e:	4621      	mov	r1, r4
 8019a90:	f7ff fdf4 	bl	801967c <_Bfree>
 8019a94:	4640      	mov	r0, r8
 8019a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a9a:	3101      	adds	r1, #1
 8019a9c:	005b      	lsls	r3, r3, #1
 8019a9e:	e7c7      	b.n	8019a30 <__lshift+0x1c>
 8019aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8019aa4:	3301      	adds	r3, #1
 8019aa6:	e7cd      	b.n	8019a44 <__lshift+0x30>
 8019aa8:	4651      	mov	r1, sl
 8019aaa:	e7dc      	b.n	8019a66 <__lshift+0x52>
 8019aac:	3904      	subs	r1, #4
 8019aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ab2:	f841 2f04 	str.w	r2, [r1, #4]!
 8019ab6:	459c      	cmp	ip, r3
 8019ab8:	d8f9      	bhi.n	8019aae <__lshift+0x9a>
 8019aba:	e7e4      	b.n	8019a86 <__lshift+0x72>

08019abc <__mcmp>:
 8019abc:	6903      	ldr	r3, [r0, #16]
 8019abe:	690a      	ldr	r2, [r1, #16]
 8019ac0:	1a9b      	subs	r3, r3, r2
 8019ac2:	b530      	push	{r4, r5, lr}
 8019ac4:	d10c      	bne.n	8019ae0 <__mcmp+0x24>
 8019ac6:	0092      	lsls	r2, r2, #2
 8019ac8:	3014      	adds	r0, #20
 8019aca:	3114      	adds	r1, #20
 8019acc:	1884      	adds	r4, r0, r2
 8019ace:	4411      	add	r1, r2
 8019ad0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019ad4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019ad8:	4295      	cmp	r5, r2
 8019ada:	d003      	beq.n	8019ae4 <__mcmp+0x28>
 8019adc:	d305      	bcc.n	8019aea <__mcmp+0x2e>
 8019ade:	2301      	movs	r3, #1
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	bd30      	pop	{r4, r5, pc}
 8019ae4:	42a0      	cmp	r0, r4
 8019ae6:	d3f3      	bcc.n	8019ad0 <__mcmp+0x14>
 8019ae8:	e7fa      	b.n	8019ae0 <__mcmp+0x24>
 8019aea:	f04f 33ff 	mov.w	r3, #4294967295
 8019aee:	e7f7      	b.n	8019ae0 <__mcmp+0x24>

08019af0 <__mdiff>:
 8019af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019af4:	460d      	mov	r5, r1
 8019af6:	4607      	mov	r7, r0
 8019af8:	4611      	mov	r1, r2
 8019afa:	4628      	mov	r0, r5
 8019afc:	4614      	mov	r4, r2
 8019afe:	f7ff ffdd 	bl	8019abc <__mcmp>
 8019b02:	1e06      	subs	r6, r0, #0
 8019b04:	d108      	bne.n	8019b18 <__mdiff+0x28>
 8019b06:	4631      	mov	r1, r6
 8019b08:	4638      	mov	r0, r7
 8019b0a:	f7ff fd83 	bl	8019614 <_Balloc>
 8019b0e:	2301      	movs	r3, #1
 8019b10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8019b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b18:	bfa4      	itt	ge
 8019b1a:	4623      	movge	r3, r4
 8019b1c:	462c      	movge	r4, r5
 8019b1e:	4638      	mov	r0, r7
 8019b20:	6861      	ldr	r1, [r4, #4]
 8019b22:	bfa6      	itte	ge
 8019b24:	461d      	movge	r5, r3
 8019b26:	2600      	movge	r6, #0
 8019b28:	2601      	movlt	r6, #1
 8019b2a:	f7ff fd73 	bl	8019614 <_Balloc>
 8019b2e:	692b      	ldr	r3, [r5, #16]
 8019b30:	60c6      	str	r6, [r0, #12]
 8019b32:	6926      	ldr	r6, [r4, #16]
 8019b34:	f105 0914 	add.w	r9, r5, #20
 8019b38:	f104 0214 	add.w	r2, r4, #20
 8019b3c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8019b40:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8019b44:	f100 0514 	add.w	r5, r0, #20
 8019b48:	f04f 0e00 	mov.w	lr, #0
 8019b4c:	f852 ab04 	ldr.w	sl, [r2], #4
 8019b50:	f859 4b04 	ldr.w	r4, [r9], #4
 8019b54:	fa1e f18a 	uxtah	r1, lr, sl
 8019b58:	b2a3      	uxth	r3, r4
 8019b5a:	1ac9      	subs	r1, r1, r3
 8019b5c:	0c23      	lsrs	r3, r4, #16
 8019b5e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8019b62:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8019b66:	b289      	uxth	r1, r1
 8019b68:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8019b6c:	45c8      	cmp	r8, r9
 8019b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8019b72:	4694      	mov	ip, r2
 8019b74:	f845 3b04 	str.w	r3, [r5], #4
 8019b78:	d8e8      	bhi.n	8019b4c <__mdiff+0x5c>
 8019b7a:	45bc      	cmp	ip, r7
 8019b7c:	d304      	bcc.n	8019b88 <__mdiff+0x98>
 8019b7e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8019b82:	b183      	cbz	r3, 8019ba6 <__mdiff+0xb6>
 8019b84:	6106      	str	r6, [r0, #16]
 8019b86:	e7c5      	b.n	8019b14 <__mdiff+0x24>
 8019b88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019b8c:	fa1e f381 	uxtah	r3, lr, r1
 8019b90:	141a      	asrs	r2, r3, #16
 8019b92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019b96:	b29b      	uxth	r3, r3
 8019b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019b9c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019ba0:	f845 3b04 	str.w	r3, [r5], #4
 8019ba4:	e7e9      	b.n	8019b7a <__mdiff+0x8a>
 8019ba6:	3e01      	subs	r6, #1
 8019ba8:	e7e9      	b.n	8019b7e <__mdiff+0x8e>
	...

08019bac <__ulp>:
 8019bac:	4b12      	ldr	r3, [pc, #72]	; (8019bf8 <__ulp+0x4c>)
 8019bae:	ee10 2a90 	vmov	r2, s1
 8019bb2:	401a      	ands	r2, r3
 8019bb4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	dd04      	ble.n	8019bc6 <__ulp+0x1a>
 8019bbc:	2000      	movs	r0, #0
 8019bbe:	4619      	mov	r1, r3
 8019bc0:	ec41 0b10 	vmov	d0, r0, r1
 8019bc4:	4770      	bx	lr
 8019bc6:	425b      	negs	r3, r3
 8019bc8:	151b      	asrs	r3, r3, #20
 8019bca:	2b13      	cmp	r3, #19
 8019bcc:	f04f 0000 	mov.w	r0, #0
 8019bd0:	f04f 0100 	mov.w	r1, #0
 8019bd4:	dc04      	bgt.n	8019be0 <__ulp+0x34>
 8019bd6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8019bda:	fa42 f103 	asr.w	r1, r2, r3
 8019bde:	e7ef      	b.n	8019bc0 <__ulp+0x14>
 8019be0:	3b14      	subs	r3, #20
 8019be2:	2b1e      	cmp	r3, #30
 8019be4:	f04f 0201 	mov.w	r2, #1
 8019be8:	bfda      	itte	le
 8019bea:	f1c3 031f 	rsble	r3, r3, #31
 8019bee:	fa02 f303 	lslle.w	r3, r2, r3
 8019bf2:	4613      	movgt	r3, r2
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	e7e3      	b.n	8019bc0 <__ulp+0x14>
 8019bf8:	7ff00000 	.word	0x7ff00000

08019bfc <__b2d>:
 8019bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bfe:	6905      	ldr	r5, [r0, #16]
 8019c00:	f100 0714 	add.w	r7, r0, #20
 8019c04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019c08:	1f2e      	subs	r6, r5, #4
 8019c0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019c0e:	4620      	mov	r0, r4
 8019c10:	f7ff fdc4 	bl	801979c <__hi0bits>
 8019c14:	f1c0 0320 	rsb	r3, r0, #32
 8019c18:	280a      	cmp	r0, #10
 8019c1a:	600b      	str	r3, [r1, #0]
 8019c1c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8019c94 <__b2d+0x98>
 8019c20:	dc14      	bgt.n	8019c4c <__b2d+0x50>
 8019c22:	f1c0 0e0b 	rsb	lr, r0, #11
 8019c26:	fa24 f10e 	lsr.w	r1, r4, lr
 8019c2a:	42b7      	cmp	r7, r6
 8019c2c:	ea41 030c 	orr.w	r3, r1, ip
 8019c30:	bf34      	ite	cc
 8019c32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019c36:	2100      	movcs	r1, #0
 8019c38:	3015      	adds	r0, #21
 8019c3a:	fa04 f000 	lsl.w	r0, r4, r0
 8019c3e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019c42:	ea40 0201 	orr.w	r2, r0, r1
 8019c46:	ec43 2b10 	vmov	d0, r2, r3
 8019c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c4c:	42b7      	cmp	r7, r6
 8019c4e:	bf3a      	itte	cc
 8019c50:	f1a5 0608 	subcc.w	r6, r5, #8
 8019c54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019c58:	2100      	movcs	r1, #0
 8019c5a:	380b      	subs	r0, #11
 8019c5c:	d015      	beq.n	8019c8a <__b2d+0x8e>
 8019c5e:	4084      	lsls	r4, r0
 8019c60:	f1c0 0520 	rsb	r5, r0, #32
 8019c64:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019c68:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8019c6c:	42be      	cmp	r6, r7
 8019c6e:	fa21 fc05 	lsr.w	ip, r1, r5
 8019c72:	ea44 030c 	orr.w	r3, r4, ip
 8019c76:	bf8c      	ite	hi
 8019c78:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019c7c:	2400      	movls	r4, #0
 8019c7e:	fa01 f000 	lsl.w	r0, r1, r0
 8019c82:	40ec      	lsrs	r4, r5
 8019c84:	ea40 0204 	orr.w	r2, r0, r4
 8019c88:	e7dd      	b.n	8019c46 <__b2d+0x4a>
 8019c8a:	ea44 030c 	orr.w	r3, r4, ip
 8019c8e:	460a      	mov	r2, r1
 8019c90:	e7d9      	b.n	8019c46 <__b2d+0x4a>
 8019c92:	bf00      	nop
 8019c94:	3ff00000 	.word	0x3ff00000

08019c98 <__d2b>:
 8019c98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019c9c:	460e      	mov	r6, r1
 8019c9e:	2101      	movs	r1, #1
 8019ca0:	ec59 8b10 	vmov	r8, r9, d0
 8019ca4:	4615      	mov	r5, r2
 8019ca6:	f7ff fcb5 	bl	8019614 <_Balloc>
 8019caa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8019cae:	4607      	mov	r7, r0
 8019cb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019cb4:	bb34      	cbnz	r4, 8019d04 <__d2b+0x6c>
 8019cb6:	9301      	str	r3, [sp, #4]
 8019cb8:	f1b8 0300 	subs.w	r3, r8, #0
 8019cbc:	d027      	beq.n	8019d0e <__d2b+0x76>
 8019cbe:	a802      	add	r0, sp, #8
 8019cc0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8019cc4:	f7ff fd89 	bl	80197da <__lo0bits>
 8019cc8:	9900      	ldr	r1, [sp, #0]
 8019cca:	b1f0      	cbz	r0, 8019d0a <__d2b+0x72>
 8019ccc:	9a01      	ldr	r2, [sp, #4]
 8019cce:	f1c0 0320 	rsb	r3, r0, #32
 8019cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8019cd6:	430b      	orrs	r3, r1
 8019cd8:	40c2      	lsrs	r2, r0
 8019cda:	617b      	str	r3, [r7, #20]
 8019cdc:	9201      	str	r2, [sp, #4]
 8019cde:	9b01      	ldr	r3, [sp, #4]
 8019ce0:	61bb      	str	r3, [r7, #24]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	bf14      	ite	ne
 8019ce6:	2102      	movne	r1, #2
 8019ce8:	2101      	moveq	r1, #1
 8019cea:	6139      	str	r1, [r7, #16]
 8019cec:	b1c4      	cbz	r4, 8019d20 <__d2b+0x88>
 8019cee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8019cf2:	4404      	add	r4, r0
 8019cf4:	6034      	str	r4, [r6, #0]
 8019cf6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019cfa:	6028      	str	r0, [r5, #0]
 8019cfc:	4638      	mov	r0, r7
 8019cfe:	b003      	add	sp, #12
 8019d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019d08:	e7d5      	b.n	8019cb6 <__d2b+0x1e>
 8019d0a:	6179      	str	r1, [r7, #20]
 8019d0c:	e7e7      	b.n	8019cde <__d2b+0x46>
 8019d0e:	a801      	add	r0, sp, #4
 8019d10:	f7ff fd63 	bl	80197da <__lo0bits>
 8019d14:	9b01      	ldr	r3, [sp, #4]
 8019d16:	617b      	str	r3, [r7, #20]
 8019d18:	2101      	movs	r1, #1
 8019d1a:	6139      	str	r1, [r7, #16]
 8019d1c:	3020      	adds	r0, #32
 8019d1e:	e7e5      	b.n	8019cec <__d2b+0x54>
 8019d20:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8019d24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019d28:	6030      	str	r0, [r6, #0]
 8019d2a:	6918      	ldr	r0, [r3, #16]
 8019d2c:	f7ff fd36 	bl	801979c <__hi0bits>
 8019d30:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019d34:	e7e1      	b.n	8019cfa <__d2b+0x62>

08019d36 <__ratio>:
 8019d36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d3a:	4688      	mov	r8, r1
 8019d3c:	4669      	mov	r1, sp
 8019d3e:	4681      	mov	r9, r0
 8019d40:	f7ff ff5c 	bl	8019bfc <__b2d>
 8019d44:	a901      	add	r1, sp, #4
 8019d46:	4640      	mov	r0, r8
 8019d48:	ec57 6b10 	vmov	r6, r7, d0
 8019d4c:	f7ff ff56 	bl	8019bfc <__b2d>
 8019d50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019d54:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019d58:	eba3 0c02 	sub.w	ip, r3, r2
 8019d5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019d60:	1a9b      	subs	r3, r3, r2
 8019d62:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019d66:	ec5b ab10 	vmov	sl, fp, d0
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	bfce      	itee	gt
 8019d6e:	463a      	movgt	r2, r7
 8019d70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019d74:	465a      	movle	r2, fp
 8019d76:	4659      	mov	r1, fp
 8019d78:	463d      	mov	r5, r7
 8019d7a:	bfd4      	ite	le
 8019d7c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019d80:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019d84:	4630      	mov	r0, r6
 8019d86:	ee10 2a10 	vmov	r2, s0
 8019d8a:	460b      	mov	r3, r1
 8019d8c:	4629      	mov	r1, r5
 8019d8e:	f7ee fc95 	bl	80086bc <__aeabi_ddiv>
 8019d92:	ec41 0b10 	vmov	d0, r0, r1
 8019d96:	b003      	add	sp, #12
 8019d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d9c <__copybits>:
 8019d9c:	3901      	subs	r1, #1
 8019d9e:	b510      	push	{r4, lr}
 8019da0:	1149      	asrs	r1, r1, #5
 8019da2:	6914      	ldr	r4, [r2, #16]
 8019da4:	3101      	adds	r1, #1
 8019da6:	f102 0314 	add.w	r3, r2, #20
 8019daa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019dae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019db2:	42a3      	cmp	r3, r4
 8019db4:	4602      	mov	r2, r0
 8019db6:	d303      	bcc.n	8019dc0 <__copybits+0x24>
 8019db8:	2300      	movs	r3, #0
 8019dba:	428a      	cmp	r2, r1
 8019dbc:	d305      	bcc.n	8019dca <__copybits+0x2e>
 8019dbe:	bd10      	pop	{r4, pc}
 8019dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8019dc4:	f840 2b04 	str.w	r2, [r0], #4
 8019dc8:	e7f3      	b.n	8019db2 <__copybits+0x16>
 8019dca:	f842 3b04 	str.w	r3, [r2], #4
 8019dce:	e7f4      	b.n	8019dba <__copybits+0x1e>

08019dd0 <__any_on>:
 8019dd0:	f100 0214 	add.w	r2, r0, #20
 8019dd4:	6900      	ldr	r0, [r0, #16]
 8019dd6:	114b      	asrs	r3, r1, #5
 8019dd8:	4298      	cmp	r0, r3
 8019dda:	b510      	push	{r4, lr}
 8019ddc:	db11      	blt.n	8019e02 <__any_on+0x32>
 8019dde:	dd0a      	ble.n	8019df6 <__any_on+0x26>
 8019de0:	f011 011f 	ands.w	r1, r1, #31
 8019de4:	d007      	beq.n	8019df6 <__any_on+0x26>
 8019de6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019dea:	fa24 f001 	lsr.w	r0, r4, r1
 8019dee:	fa00 f101 	lsl.w	r1, r0, r1
 8019df2:	428c      	cmp	r4, r1
 8019df4:	d10b      	bne.n	8019e0e <__any_on+0x3e>
 8019df6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019dfa:	4293      	cmp	r3, r2
 8019dfc:	d803      	bhi.n	8019e06 <__any_on+0x36>
 8019dfe:	2000      	movs	r0, #0
 8019e00:	bd10      	pop	{r4, pc}
 8019e02:	4603      	mov	r3, r0
 8019e04:	e7f7      	b.n	8019df6 <__any_on+0x26>
 8019e06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019e0a:	2900      	cmp	r1, #0
 8019e0c:	d0f5      	beq.n	8019dfa <__any_on+0x2a>
 8019e0e:	2001      	movs	r0, #1
 8019e10:	e7f6      	b.n	8019e00 <__any_on+0x30>

08019e12 <_calloc_r>:
 8019e12:	b538      	push	{r3, r4, r5, lr}
 8019e14:	fb02 f401 	mul.w	r4, r2, r1
 8019e18:	4621      	mov	r1, r4
 8019e1a:	f000 f857 	bl	8019ecc <_malloc_r>
 8019e1e:	4605      	mov	r5, r0
 8019e20:	b118      	cbz	r0, 8019e2a <_calloc_r+0x18>
 8019e22:	4622      	mov	r2, r4
 8019e24:	2100      	movs	r1, #0
 8019e26:	f7fc f91a 	bl	801605e <memset>
 8019e2a:	4628      	mov	r0, r5
 8019e2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08019e30 <_free_r>:
 8019e30:	b538      	push	{r3, r4, r5, lr}
 8019e32:	4605      	mov	r5, r0
 8019e34:	2900      	cmp	r1, #0
 8019e36:	d045      	beq.n	8019ec4 <_free_r+0x94>
 8019e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e3c:	1f0c      	subs	r4, r1, #4
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	bfb8      	it	lt
 8019e42:	18e4      	addlt	r4, r4, r3
 8019e44:	f001 f8e1 	bl	801b00a <__malloc_lock>
 8019e48:	4a1f      	ldr	r2, [pc, #124]	; (8019ec8 <_free_r+0x98>)
 8019e4a:	6813      	ldr	r3, [r2, #0]
 8019e4c:	4610      	mov	r0, r2
 8019e4e:	b933      	cbnz	r3, 8019e5e <_free_r+0x2e>
 8019e50:	6063      	str	r3, [r4, #4]
 8019e52:	6014      	str	r4, [r2, #0]
 8019e54:	4628      	mov	r0, r5
 8019e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e5a:	f001 b8d7 	b.w	801b00c <__malloc_unlock>
 8019e5e:	42a3      	cmp	r3, r4
 8019e60:	d90c      	bls.n	8019e7c <_free_r+0x4c>
 8019e62:	6821      	ldr	r1, [r4, #0]
 8019e64:	1862      	adds	r2, r4, r1
 8019e66:	4293      	cmp	r3, r2
 8019e68:	bf04      	itt	eq
 8019e6a:	681a      	ldreq	r2, [r3, #0]
 8019e6c:	685b      	ldreq	r3, [r3, #4]
 8019e6e:	6063      	str	r3, [r4, #4]
 8019e70:	bf04      	itt	eq
 8019e72:	1852      	addeq	r2, r2, r1
 8019e74:	6022      	streq	r2, [r4, #0]
 8019e76:	6004      	str	r4, [r0, #0]
 8019e78:	e7ec      	b.n	8019e54 <_free_r+0x24>
 8019e7a:	4613      	mov	r3, r2
 8019e7c:	685a      	ldr	r2, [r3, #4]
 8019e7e:	b10a      	cbz	r2, 8019e84 <_free_r+0x54>
 8019e80:	42a2      	cmp	r2, r4
 8019e82:	d9fa      	bls.n	8019e7a <_free_r+0x4a>
 8019e84:	6819      	ldr	r1, [r3, #0]
 8019e86:	1858      	adds	r0, r3, r1
 8019e88:	42a0      	cmp	r0, r4
 8019e8a:	d10b      	bne.n	8019ea4 <_free_r+0x74>
 8019e8c:	6820      	ldr	r0, [r4, #0]
 8019e8e:	4401      	add	r1, r0
 8019e90:	1858      	adds	r0, r3, r1
 8019e92:	4282      	cmp	r2, r0
 8019e94:	6019      	str	r1, [r3, #0]
 8019e96:	d1dd      	bne.n	8019e54 <_free_r+0x24>
 8019e98:	6810      	ldr	r0, [r2, #0]
 8019e9a:	6852      	ldr	r2, [r2, #4]
 8019e9c:	605a      	str	r2, [r3, #4]
 8019e9e:	4401      	add	r1, r0
 8019ea0:	6019      	str	r1, [r3, #0]
 8019ea2:	e7d7      	b.n	8019e54 <_free_r+0x24>
 8019ea4:	d902      	bls.n	8019eac <_free_r+0x7c>
 8019ea6:	230c      	movs	r3, #12
 8019ea8:	602b      	str	r3, [r5, #0]
 8019eaa:	e7d3      	b.n	8019e54 <_free_r+0x24>
 8019eac:	6820      	ldr	r0, [r4, #0]
 8019eae:	1821      	adds	r1, r4, r0
 8019eb0:	428a      	cmp	r2, r1
 8019eb2:	bf04      	itt	eq
 8019eb4:	6811      	ldreq	r1, [r2, #0]
 8019eb6:	6852      	ldreq	r2, [r2, #4]
 8019eb8:	6062      	str	r2, [r4, #4]
 8019eba:	bf04      	itt	eq
 8019ebc:	1809      	addeq	r1, r1, r0
 8019ebe:	6021      	streq	r1, [r4, #0]
 8019ec0:	605c      	str	r4, [r3, #4]
 8019ec2:	e7c7      	b.n	8019e54 <_free_r+0x24>
 8019ec4:	bd38      	pop	{r3, r4, r5, pc}
 8019ec6:	bf00      	nop
 8019ec8:	200004d4 	.word	0x200004d4

08019ecc <_malloc_r>:
 8019ecc:	b570      	push	{r4, r5, r6, lr}
 8019ece:	1ccd      	adds	r5, r1, #3
 8019ed0:	f025 0503 	bic.w	r5, r5, #3
 8019ed4:	3508      	adds	r5, #8
 8019ed6:	2d0c      	cmp	r5, #12
 8019ed8:	bf38      	it	cc
 8019eda:	250c      	movcc	r5, #12
 8019edc:	2d00      	cmp	r5, #0
 8019ede:	4606      	mov	r6, r0
 8019ee0:	db01      	blt.n	8019ee6 <_malloc_r+0x1a>
 8019ee2:	42a9      	cmp	r1, r5
 8019ee4:	d903      	bls.n	8019eee <_malloc_r+0x22>
 8019ee6:	230c      	movs	r3, #12
 8019ee8:	6033      	str	r3, [r6, #0]
 8019eea:	2000      	movs	r0, #0
 8019eec:	bd70      	pop	{r4, r5, r6, pc}
 8019eee:	f001 f88c 	bl	801b00a <__malloc_lock>
 8019ef2:	4a21      	ldr	r2, [pc, #132]	; (8019f78 <_malloc_r+0xac>)
 8019ef4:	6814      	ldr	r4, [r2, #0]
 8019ef6:	4621      	mov	r1, r4
 8019ef8:	b991      	cbnz	r1, 8019f20 <_malloc_r+0x54>
 8019efa:	4c20      	ldr	r4, [pc, #128]	; (8019f7c <_malloc_r+0xb0>)
 8019efc:	6823      	ldr	r3, [r4, #0]
 8019efe:	b91b      	cbnz	r3, 8019f08 <_malloc_r+0x3c>
 8019f00:	4630      	mov	r0, r6
 8019f02:	f000 fe35 	bl	801ab70 <_sbrk_r>
 8019f06:	6020      	str	r0, [r4, #0]
 8019f08:	4629      	mov	r1, r5
 8019f0a:	4630      	mov	r0, r6
 8019f0c:	f000 fe30 	bl	801ab70 <_sbrk_r>
 8019f10:	1c43      	adds	r3, r0, #1
 8019f12:	d124      	bne.n	8019f5e <_malloc_r+0x92>
 8019f14:	230c      	movs	r3, #12
 8019f16:	6033      	str	r3, [r6, #0]
 8019f18:	4630      	mov	r0, r6
 8019f1a:	f001 f877 	bl	801b00c <__malloc_unlock>
 8019f1e:	e7e4      	b.n	8019eea <_malloc_r+0x1e>
 8019f20:	680b      	ldr	r3, [r1, #0]
 8019f22:	1b5b      	subs	r3, r3, r5
 8019f24:	d418      	bmi.n	8019f58 <_malloc_r+0x8c>
 8019f26:	2b0b      	cmp	r3, #11
 8019f28:	d90f      	bls.n	8019f4a <_malloc_r+0x7e>
 8019f2a:	600b      	str	r3, [r1, #0]
 8019f2c:	50cd      	str	r5, [r1, r3]
 8019f2e:	18cc      	adds	r4, r1, r3
 8019f30:	4630      	mov	r0, r6
 8019f32:	f001 f86b 	bl	801b00c <__malloc_unlock>
 8019f36:	f104 000b 	add.w	r0, r4, #11
 8019f3a:	1d23      	adds	r3, r4, #4
 8019f3c:	f020 0007 	bic.w	r0, r0, #7
 8019f40:	1ac3      	subs	r3, r0, r3
 8019f42:	d0d3      	beq.n	8019eec <_malloc_r+0x20>
 8019f44:	425a      	negs	r2, r3
 8019f46:	50e2      	str	r2, [r4, r3]
 8019f48:	e7d0      	b.n	8019eec <_malloc_r+0x20>
 8019f4a:	428c      	cmp	r4, r1
 8019f4c:	684b      	ldr	r3, [r1, #4]
 8019f4e:	bf16      	itet	ne
 8019f50:	6063      	strne	r3, [r4, #4]
 8019f52:	6013      	streq	r3, [r2, #0]
 8019f54:	460c      	movne	r4, r1
 8019f56:	e7eb      	b.n	8019f30 <_malloc_r+0x64>
 8019f58:	460c      	mov	r4, r1
 8019f5a:	6849      	ldr	r1, [r1, #4]
 8019f5c:	e7cc      	b.n	8019ef8 <_malloc_r+0x2c>
 8019f5e:	1cc4      	adds	r4, r0, #3
 8019f60:	f024 0403 	bic.w	r4, r4, #3
 8019f64:	42a0      	cmp	r0, r4
 8019f66:	d005      	beq.n	8019f74 <_malloc_r+0xa8>
 8019f68:	1a21      	subs	r1, r4, r0
 8019f6a:	4630      	mov	r0, r6
 8019f6c:	f000 fe00 	bl	801ab70 <_sbrk_r>
 8019f70:	3001      	adds	r0, #1
 8019f72:	d0cf      	beq.n	8019f14 <_malloc_r+0x48>
 8019f74:	6025      	str	r5, [r4, #0]
 8019f76:	e7db      	b.n	8019f30 <_malloc_r+0x64>
 8019f78:	200004d4 	.word	0x200004d4
 8019f7c:	200004d8 	.word	0x200004d8

08019f80 <__ssputs_r>:
 8019f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f84:	688e      	ldr	r6, [r1, #8]
 8019f86:	429e      	cmp	r6, r3
 8019f88:	4682      	mov	sl, r0
 8019f8a:	460c      	mov	r4, r1
 8019f8c:	4690      	mov	r8, r2
 8019f8e:	4699      	mov	r9, r3
 8019f90:	d837      	bhi.n	801a002 <__ssputs_r+0x82>
 8019f92:	898a      	ldrh	r2, [r1, #12]
 8019f94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019f98:	d031      	beq.n	8019ffe <__ssputs_r+0x7e>
 8019f9a:	6825      	ldr	r5, [r4, #0]
 8019f9c:	6909      	ldr	r1, [r1, #16]
 8019f9e:	1a6f      	subs	r7, r5, r1
 8019fa0:	6965      	ldr	r5, [r4, #20]
 8019fa2:	2302      	movs	r3, #2
 8019fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019fa8:	fb95 f5f3 	sdiv	r5, r5, r3
 8019fac:	f109 0301 	add.w	r3, r9, #1
 8019fb0:	443b      	add	r3, r7
 8019fb2:	429d      	cmp	r5, r3
 8019fb4:	bf38      	it	cc
 8019fb6:	461d      	movcc	r5, r3
 8019fb8:	0553      	lsls	r3, r2, #21
 8019fba:	d530      	bpl.n	801a01e <__ssputs_r+0x9e>
 8019fbc:	4629      	mov	r1, r5
 8019fbe:	f7ff ff85 	bl	8019ecc <_malloc_r>
 8019fc2:	4606      	mov	r6, r0
 8019fc4:	b950      	cbnz	r0, 8019fdc <__ssputs_r+0x5c>
 8019fc6:	230c      	movs	r3, #12
 8019fc8:	f8ca 3000 	str.w	r3, [sl]
 8019fcc:	89a3      	ldrh	r3, [r4, #12]
 8019fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fd2:	81a3      	strh	r3, [r4, #12]
 8019fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8019fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fdc:	463a      	mov	r2, r7
 8019fde:	6921      	ldr	r1, [r4, #16]
 8019fe0:	f7fc f832 	bl	8016048 <memcpy>
 8019fe4:	89a3      	ldrh	r3, [r4, #12]
 8019fe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019fee:	81a3      	strh	r3, [r4, #12]
 8019ff0:	6126      	str	r6, [r4, #16]
 8019ff2:	6165      	str	r5, [r4, #20]
 8019ff4:	443e      	add	r6, r7
 8019ff6:	1bed      	subs	r5, r5, r7
 8019ff8:	6026      	str	r6, [r4, #0]
 8019ffa:	60a5      	str	r5, [r4, #8]
 8019ffc:	464e      	mov	r6, r9
 8019ffe:	454e      	cmp	r6, r9
 801a000:	d900      	bls.n	801a004 <__ssputs_r+0x84>
 801a002:	464e      	mov	r6, r9
 801a004:	4632      	mov	r2, r6
 801a006:	4641      	mov	r1, r8
 801a008:	6820      	ldr	r0, [r4, #0]
 801a00a:	f000 ffe5 	bl	801afd8 <memmove>
 801a00e:	68a3      	ldr	r3, [r4, #8]
 801a010:	1b9b      	subs	r3, r3, r6
 801a012:	60a3      	str	r3, [r4, #8]
 801a014:	6823      	ldr	r3, [r4, #0]
 801a016:	441e      	add	r6, r3
 801a018:	6026      	str	r6, [r4, #0]
 801a01a:	2000      	movs	r0, #0
 801a01c:	e7dc      	b.n	8019fd8 <__ssputs_r+0x58>
 801a01e:	462a      	mov	r2, r5
 801a020:	f000 fff5 	bl	801b00e <_realloc_r>
 801a024:	4606      	mov	r6, r0
 801a026:	2800      	cmp	r0, #0
 801a028:	d1e2      	bne.n	8019ff0 <__ssputs_r+0x70>
 801a02a:	6921      	ldr	r1, [r4, #16]
 801a02c:	4650      	mov	r0, sl
 801a02e:	f7ff feff 	bl	8019e30 <_free_r>
 801a032:	e7c8      	b.n	8019fc6 <__ssputs_r+0x46>

0801a034 <_svfiprintf_r>:
 801a034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a038:	461d      	mov	r5, r3
 801a03a:	898b      	ldrh	r3, [r1, #12]
 801a03c:	061f      	lsls	r7, r3, #24
 801a03e:	b09d      	sub	sp, #116	; 0x74
 801a040:	4680      	mov	r8, r0
 801a042:	460c      	mov	r4, r1
 801a044:	4616      	mov	r6, r2
 801a046:	d50f      	bpl.n	801a068 <_svfiprintf_r+0x34>
 801a048:	690b      	ldr	r3, [r1, #16]
 801a04a:	b96b      	cbnz	r3, 801a068 <_svfiprintf_r+0x34>
 801a04c:	2140      	movs	r1, #64	; 0x40
 801a04e:	f7ff ff3d 	bl	8019ecc <_malloc_r>
 801a052:	6020      	str	r0, [r4, #0]
 801a054:	6120      	str	r0, [r4, #16]
 801a056:	b928      	cbnz	r0, 801a064 <_svfiprintf_r+0x30>
 801a058:	230c      	movs	r3, #12
 801a05a:	f8c8 3000 	str.w	r3, [r8]
 801a05e:	f04f 30ff 	mov.w	r0, #4294967295
 801a062:	e0c8      	b.n	801a1f6 <_svfiprintf_r+0x1c2>
 801a064:	2340      	movs	r3, #64	; 0x40
 801a066:	6163      	str	r3, [r4, #20]
 801a068:	2300      	movs	r3, #0
 801a06a:	9309      	str	r3, [sp, #36]	; 0x24
 801a06c:	2320      	movs	r3, #32
 801a06e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a072:	2330      	movs	r3, #48	; 0x30
 801a074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a078:	9503      	str	r5, [sp, #12]
 801a07a:	f04f 0b01 	mov.w	fp, #1
 801a07e:	4637      	mov	r7, r6
 801a080:	463d      	mov	r5, r7
 801a082:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a086:	b10b      	cbz	r3, 801a08c <_svfiprintf_r+0x58>
 801a088:	2b25      	cmp	r3, #37	; 0x25
 801a08a:	d13e      	bne.n	801a10a <_svfiprintf_r+0xd6>
 801a08c:	ebb7 0a06 	subs.w	sl, r7, r6
 801a090:	d00b      	beq.n	801a0aa <_svfiprintf_r+0x76>
 801a092:	4653      	mov	r3, sl
 801a094:	4632      	mov	r2, r6
 801a096:	4621      	mov	r1, r4
 801a098:	4640      	mov	r0, r8
 801a09a:	f7ff ff71 	bl	8019f80 <__ssputs_r>
 801a09e:	3001      	adds	r0, #1
 801a0a0:	f000 80a4 	beq.w	801a1ec <_svfiprintf_r+0x1b8>
 801a0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0a6:	4453      	add	r3, sl
 801a0a8:	9309      	str	r3, [sp, #36]	; 0x24
 801a0aa:	783b      	ldrb	r3, [r7, #0]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	f000 809d 	beq.w	801a1ec <_svfiprintf_r+0x1b8>
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	f04f 32ff 	mov.w	r2, #4294967295
 801a0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0bc:	9304      	str	r3, [sp, #16]
 801a0be:	9307      	str	r3, [sp, #28]
 801a0c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0c4:	931a      	str	r3, [sp, #104]	; 0x68
 801a0c6:	462f      	mov	r7, r5
 801a0c8:	2205      	movs	r2, #5
 801a0ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a0ce:	4850      	ldr	r0, [pc, #320]	; (801a210 <_svfiprintf_r+0x1dc>)
 801a0d0:	f7ed ffbe 	bl	8008050 <memchr>
 801a0d4:	9b04      	ldr	r3, [sp, #16]
 801a0d6:	b9d0      	cbnz	r0, 801a10e <_svfiprintf_r+0xda>
 801a0d8:	06d9      	lsls	r1, r3, #27
 801a0da:	bf44      	itt	mi
 801a0dc:	2220      	movmi	r2, #32
 801a0de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a0e2:	071a      	lsls	r2, r3, #28
 801a0e4:	bf44      	itt	mi
 801a0e6:	222b      	movmi	r2, #43	; 0x2b
 801a0e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a0ec:	782a      	ldrb	r2, [r5, #0]
 801a0ee:	2a2a      	cmp	r2, #42	; 0x2a
 801a0f0:	d015      	beq.n	801a11e <_svfiprintf_r+0xea>
 801a0f2:	9a07      	ldr	r2, [sp, #28]
 801a0f4:	462f      	mov	r7, r5
 801a0f6:	2000      	movs	r0, #0
 801a0f8:	250a      	movs	r5, #10
 801a0fa:	4639      	mov	r1, r7
 801a0fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a100:	3b30      	subs	r3, #48	; 0x30
 801a102:	2b09      	cmp	r3, #9
 801a104:	d94d      	bls.n	801a1a2 <_svfiprintf_r+0x16e>
 801a106:	b1b8      	cbz	r0, 801a138 <_svfiprintf_r+0x104>
 801a108:	e00f      	b.n	801a12a <_svfiprintf_r+0xf6>
 801a10a:	462f      	mov	r7, r5
 801a10c:	e7b8      	b.n	801a080 <_svfiprintf_r+0x4c>
 801a10e:	4a40      	ldr	r2, [pc, #256]	; (801a210 <_svfiprintf_r+0x1dc>)
 801a110:	1a80      	subs	r0, r0, r2
 801a112:	fa0b f000 	lsl.w	r0, fp, r0
 801a116:	4318      	orrs	r0, r3
 801a118:	9004      	str	r0, [sp, #16]
 801a11a:	463d      	mov	r5, r7
 801a11c:	e7d3      	b.n	801a0c6 <_svfiprintf_r+0x92>
 801a11e:	9a03      	ldr	r2, [sp, #12]
 801a120:	1d11      	adds	r1, r2, #4
 801a122:	6812      	ldr	r2, [r2, #0]
 801a124:	9103      	str	r1, [sp, #12]
 801a126:	2a00      	cmp	r2, #0
 801a128:	db01      	blt.n	801a12e <_svfiprintf_r+0xfa>
 801a12a:	9207      	str	r2, [sp, #28]
 801a12c:	e004      	b.n	801a138 <_svfiprintf_r+0x104>
 801a12e:	4252      	negs	r2, r2
 801a130:	f043 0302 	orr.w	r3, r3, #2
 801a134:	9207      	str	r2, [sp, #28]
 801a136:	9304      	str	r3, [sp, #16]
 801a138:	783b      	ldrb	r3, [r7, #0]
 801a13a:	2b2e      	cmp	r3, #46	; 0x2e
 801a13c:	d10c      	bne.n	801a158 <_svfiprintf_r+0x124>
 801a13e:	787b      	ldrb	r3, [r7, #1]
 801a140:	2b2a      	cmp	r3, #42	; 0x2a
 801a142:	d133      	bne.n	801a1ac <_svfiprintf_r+0x178>
 801a144:	9b03      	ldr	r3, [sp, #12]
 801a146:	1d1a      	adds	r2, r3, #4
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	9203      	str	r2, [sp, #12]
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	bfb8      	it	lt
 801a150:	f04f 33ff 	movlt.w	r3, #4294967295
 801a154:	3702      	adds	r7, #2
 801a156:	9305      	str	r3, [sp, #20]
 801a158:	4d2e      	ldr	r5, [pc, #184]	; (801a214 <_svfiprintf_r+0x1e0>)
 801a15a:	7839      	ldrb	r1, [r7, #0]
 801a15c:	2203      	movs	r2, #3
 801a15e:	4628      	mov	r0, r5
 801a160:	f7ed ff76 	bl	8008050 <memchr>
 801a164:	b138      	cbz	r0, 801a176 <_svfiprintf_r+0x142>
 801a166:	2340      	movs	r3, #64	; 0x40
 801a168:	1b40      	subs	r0, r0, r5
 801a16a:	fa03 f000 	lsl.w	r0, r3, r0
 801a16e:	9b04      	ldr	r3, [sp, #16]
 801a170:	4303      	orrs	r3, r0
 801a172:	3701      	adds	r7, #1
 801a174:	9304      	str	r3, [sp, #16]
 801a176:	7839      	ldrb	r1, [r7, #0]
 801a178:	4827      	ldr	r0, [pc, #156]	; (801a218 <_svfiprintf_r+0x1e4>)
 801a17a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a17e:	2206      	movs	r2, #6
 801a180:	1c7e      	adds	r6, r7, #1
 801a182:	f7ed ff65 	bl	8008050 <memchr>
 801a186:	2800      	cmp	r0, #0
 801a188:	d038      	beq.n	801a1fc <_svfiprintf_r+0x1c8>
 801a18a:	4b24      	ldr	r3, [pc, #144]	; (801a21c <_svfiprintf_r+0x1e8>)
 801a18c:	bb13      	cbnz	r3, 801a1d4 <_svfiprintf_r+0x1a0>
 801a18e:	9b03      	ldr	r3, [sp, #12]
 801a190:	3307      	adds	r3, #7
 801a192:	f023 0307 	bic.w	r3, r3, #7
 801a196:	3308      	adds	r3, #8
 801a198:	9303      	str	r3, [sp, #12]
 801a19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a19c:	444b      	add	r3, r9
 801a19e:	9309      	str	r3, [sp, #36]	; 0x24
 801a1a0:	e76d      	b.n	801a07e <_svfiprintf_r+0x4a>
 801a1a2:	fb05 3202 	mla	r2, r5, r2, r3
 801a1a6:	2001      	movs	r0, #1
 801a1a8:	460f      	mov	r7, r1
 801a1aa:	e7a6      	b.n	801a0fa <_svfiprintf_r+0xc6>
 801a1ac:	2300      	movs	r3, #0
 801a1ae:	3701      	adds	r7, #1
 801a1b0:	9305      	str	r3, [sp, #20]
 801a1b2:	4619      	mov	r1, r3
 801a1b4:	250a      	movs	r5, #10
 801a1b6:	4638      	mov	r0, r7
 801a1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1bc:	3a30      	subs	r2, #48	; 0x30
 801a1be:	2a09      	cmp	r2, #9
 801a1c0:	d903      	bls.n	801a1ca <_svfiprintf_r+0x196>
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d0c8      	beq.n	801a158 <_svfiprintf_r+0x124>
 801a1c6:	9105      	str	r1, [sp, #20]
 801a1c8:	e7c6      	b.n	801a158 <_svfiprintf_r+0x124>
 801a1ca:	fb05 2101 	mla	r1, r5, r1, r2
 801a1ce:	2301      	movs	r3, #1
 801a1d0:	4607      	mov	r7, r0
 801a1d2:	e7f0      	b.n	801a1b6 <_svfiprintf_r+0x182>
 801a1d4:	ab03      	add	r3, sp, #12
 801a1d6:	9300      	str	r3, [sp, #0]
 801a1d8:	4622      	mov	r2, r4
 801a1da:	4b11      	ldr	r3, [pc, #68]	; (801a220 <_svfiprintf_r+0x1ec>)
 801a1dc:	a904      	add	r1, sp, #16
 801a1de:	4640      	mov	r0, r8
 801a1e0:	f7fb ffda 	bl	8016198 <_printf_float>
 801a1e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a1e8:	4681      	mov	r9, r0
 801a1ea:	d1d6      	bne.n	801a19a <_svfiprintf_r+0x166>
 801a1ec:	89a3      	ldrh	r3, [r4, #12]
 801a1ee:	065b      	lsls	r3, r3, #25
 801a1f0:	f53f af35 	bmi.w	801a05e <_svfiprintf_r+0x2a>
 801a1f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1f6:	b01d      	add	sp, #116	; 0x74
 801a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1fc:	ab03      	add	r3, sp, #12
 801a1fe:	9300      	str	r3, [sp, #0]
 801a200:	4622      	mov	r2, r4
 801a202:	4b07      	ldr	r3, [pc, #28]	; (801a220 <_svfiprintf_r+0x1ec>)
 801a204:	a904      	add	r1, sp, #16
 801a206:	4640      	mov	r0, r8
 801a208:	f7fc fa7c 	bl	8016704 <_printf_i>
 801a20c:	e7ea      	b.n	801a1e4 <_svfiprintf_r+0x1b0>
 801a20e:	bf00      	nop
 801a210:	0801b554 	.word	0x0801b554
 801a214:	0801b55a 	.word	0x0801b55a
 801a218:	0801b55e 	.word	0x0801b55e
 801a21c:	08016199 	.word	0x08016199
 801a220:	08019f81 	.word	0x08019f81

0801a224 <__sfputc_r>:
 801a224:	6893      	ldr	r3, [r2, #8]
 801a226:	3b01      	subs	r3, #1
 801a228:	2b00      	cmp	r3, #0
 801a22a:	b410      	push	{r4}
 801a22c:	6093      	str	r3, [r2, #8]
 801a22e:	da08      	bge.n	801a242 <__sfputc_r+0x1e>
 801a230:	6994      	ldr	r4, [r2, #24]
 801a232:	42a3      	cmp	r3, r4
 801a234:	db01      	blt.n	801a23a <__sfputc_r+0x16>
 801a236:	290a      	cmp	r1, #10
 801a238:	d103      	bne.n	801a242 <__sfputc_r+0x1e>
 801a23a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a23e:	f7fd bd75 	b.w	8017d2c <__swbuf_r>
 801a242:	6813      	ldr	r3, [r2, #0]
 801a244:	1c58      	adds	r0, r3, #1
 801a246:	6010      	str	r0, [r2, #0]
 801a248:	7019      	strb	r1, [r3, #0]
 801a24a:	4608      	mov	r0, r1
 801a24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a250:	4770      	bx	lr

0801a252 <__sfputs_r>:
 801a252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a254:	4606      	mov	r6, r0
 801a256:	460f      	mov	r7, r1
 801a258:	4614      	mov	r4, r2
 801a25a:	18d5      	adds	r5, r2, r3
 801a25c:	42ac      	cmp	r4, r5
 801a25e:	d101      	bne.n	801a264 <__sfputs_r+0x12>
 801a260:	2000      	movs	r0, #0
 801a262:	e007      	b.n	801a274 <__sfputs_r+0x22>
 801a264:	463a      	mov	r2, r7
 801a266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a26a:	4630      	mov	r0, r6
 801a26c:	f7ff ffda 	bl	801a224 <__sfputc_r>
 801a270:	1c43      	adds	r3, r0, #1
 801a272:	d1f3      	bne.n	801a25c <__sfputs_r+0xa>
 801a274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a278 <_vfiprintf_r>:
 801a278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a27c:	460c      	mov	r4, r1
 801a27e:	b09d      	sub	sp, #116	; 0x74
 801a280:	4617      	mov	r7, r2
 801a282:	461d      	mov	r5, r3
 801a284:	4606      	mov	r6, r0
 801a286:	b118      	cbz	r0, 801a290 <_vfiprintf_r+0x18>
 801a288:	6983      	ldr	r3, [r0, #24]
 801a28a:	b90b      	cbnz	r3, 801a290 <_vfiprintf_r+0x18>
 801a28c:	f7fe fd56 	bl	8018d3c <__sinit>
 801a290:	4b7c      	ldr	r3, [pc, #496]	; (801a484 <_vfiprintf_r+0x20c>)
 801a292:	429c      	cmp	r4, r3
 801a294:	d158      	bne.n	801a348 <_vfiprintf_r+0xd0>
 801a296:	6874      	ldr	r4, [r6, #4]
 801a298:	89a3      	ldrh	r3, [r4, #12]
 801a29a:	0718      	lsls	r0, r3, #28
 801a29c:	d55e      	bpl.n	801a35c <_vfiprintf_r+0xe4>
 801a29e:	6923      	ldr	r3, [r4, #16]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d05b      	beq.n	801a35c <_vfiprintf_r+0xe4>
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	9309      	str	r3, [sp, #36]	; 0x24
 801a2a8:	2320      	movs	r3, #32
 801a2aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a2ae:	2330      	movs	r3, #48	; 0x30
 801a2b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a2b4:	9503      	str	r5, [sp, #12]
 801a2b6:	f04f 0b01 	mov.w	fp, #1
 801a2ba:	46b8      	mov	r8, r7
 801a2bc:	4645      	mov	r5, r8
 801a2be:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a2c2:	b10b      	cbz	r3, 801a2c8 <_vfiprintf_r+0x50>
 801a2c4:	2b25      	cmp	r3, #37	; 0x25
 801a2c6:	d154      	bne.n	801a372 <_vfiprintf_r+0xfa>
 801a2c8:	ebb8 0a07 	subs.w	sl, r8, r7
 801a2cc:	d00b      	beq.n	801a2e6 <_vfiprintf_r+0x6e>
 801a2ce:	4653      	mov	r3, sl
 801a2d0:	463a      	mov	r2, r7
 801a2d2:	4621      	mov	r1, r4
 801a2d4:	4630      	mov	r0, r6
 801a2d6:	f7ff ffbc 	bl	801a252 <__sfputs_r>
 801a2da:	3001      	adds	r0, #1
 801a2dc:	f000 80c2 	beq.w	801a464 <_vfiprintf_r+0x1ec>
 801a2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2e2:	4453      	add	r3, sl
 801a2e4:	9309      	str	r3, [sp, #36]	; 0x24
 801a2e6:	f898 3000 	ldrb.w	r3, [r8]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	f000 80ba 	beq.w	801a464 <_vfiprintf_r+0x1ec>
 801a2f0:	2300      	movs	r3, #0
 801a2f2:	f04f 32ff 	mov.w	r2, #4294967295
 801a2f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a2fa:	9304      	str	r3, [sp, #16]
 801a2fc:	9307      	str	r3, [sp, #28]
 801a2fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a302:	931a      	str	r3, [sp, #104]	; 0x68
 801a304:	46a8      	mov	r8, r5
 801a306:	2205      	movs	r2, #5
 801a308:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a30c:	485e      	ldr	r0, [pc, #376]	; (801a488 <_vfiprintf_r+0x210>)
 801a30e:	f7ed fe9f 	bl	8008050 <memchr>
 801a312:	9b04      	ldr	r3, [sp, #16]
 801a314:	bb78      	cbnz	r0, 801a376 <_vfiprintf_r+0xfe>
 801a316:	06d9      	lsls	r1, r3, #27
 801a318:	bf44      	itt	mi
 801a31a:	2220      	movmi	r2, #32
 801a31c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a320:	071a      	lsls	r2, r3, #28
 801a322:	bf44      	itt	mi
 801a324:	222b      	movmi	r2, #43	; 0x2b
 801a326:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a32a:	782a      	ldrb	r2, [r5, #0]
 801a32c:	2a2a      	cmp	r2, #42	; 0x2a
 801a32e:	d02a      	beq.n	801a386 <_vfiprintf_r+0x10e>
 801a330:	9a07      	ldr	r2, [sp, #28]
 801a332:	46a8      	mov	r8, r5
 801a334:	2000      	movs	r0, #0
 801a336:	250a      	movs	r5, #10
 801a338:	4641      	mov	r1, r8
 801a33a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a33e:	3b30      	subs	r3, #48	; 0x30
 801a340:	2b09      	cmp	r3, #9
 801a342:	d969      	bls.n	801a418 <_vfiprintf_r+0x1a0>
 801a344:	b360      	cbz	r0, 801a3a0 <_vfiprintf_r+0x128>
 801a346:	e024      	b.n	801a392 <_vfiprintf_r+0x11a>
 801a348:	4b50      	ldr	r3, [pc, #320]	; (801a48c <_vfiprintf_r+0x214>)
 801a34a:	429c      	cmp	r4, r3
 801a34c:	d101      	bne.n	801a352 <_vfiprintf_r+0xda>
 801a34e:	68b4      	ldr	r4, [r6, #8]
 801a350:	e7a2      	b.n	801a298 <_vfiprintf_r+0x20>
 801a352:	4b4f      	ldr	r3, [pc, #316]	; (801a490 <_vfiprintf_r+0x218>)
 801a354:	429c      	cmp	r4, r3
 801a356:	bf08      	it	eq
 801a358:	68f4      	ldreq	r4, [r6, #12]
 801a35a:	e79d      	b.n	801a298 <_vfiprintf_r+0x20>
 801a35c:	4621      	mov	r1, r4
 801a35e:	4630      	mov	r0, r6
 801a360:	f7fd fd36 	bl	8017dd0 <__swsetup_r>
 801a364:	2800      	cmp	r0, #0
 801a366:	d09d      	beq.n	801a2a4 <_vfiprintf_r+0x2c>
 801a368:	f04f 30ff 	mov.w	r0, #4294967295
 801a36c:	b01d      	add	sp, #116	; 0x74
 801a36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a372:	46a8      	mov	r8, r5
 801a374:	e7a2      	b.n	801a2bc <_vfiprintf_r+0x44>
 801a376:	4a44      	ldr	r2, [pc, #272]	; (801a488 <_vfiprintf_r+0x210>)
 801a378:	1a80      	subs	r0, r0, r2
 801a37a:	fa0b f000 	lsl.w	r0, fp, r0
 801a37e:	4318      	orrs	r0, r3
 801a380:	9004      	str	r0, [sp, #16]
 801a382:	4645      	mov	r5, r8
 801a384:	e7be      	b.n	801a304 <_vfiprintf_r+0x8c>
 801a386:	9a03      	ldr	r2, [sp, #12]
 801a388:	1d11      	adds	r1, r2, #4
 801a38a:	6812      	ldr	r2, [r2, #0]
 801a38c:	9103      	str	r1, [sp, #12]
 801a38e:	2a00      	cmp	r2, #0
 801a390:	db01      	blt.n	801a396 <_vfiprintf_r+0x11e>
 801a392:	9207      	str	r2, [sp, #28]
 801a394:	e004      	b.n	801a3a0 <_vfiprintf_r+0x128>
 801a396:	4252      	negs	r2, r2
 801a398:	f043 0302 	orr.w	r3, r3, #2
 801a39c:	9207      	str	r2, [sp, #28]
 801a39e:	9304      	str	r3, [sp, #16]
 801a3a0:	f898 3000 	ldrb.w	r3, [r8]
 801a3a4:	2b2e      	cmp	r3, #46	; 0x2e
 801a3a6:	d10e      	bne.n	801a3c6 <_vfiprintf_r+0x14e>
 801a3a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a3ac:	2b2a      	cmp	r3, #42	; 0x2a
 801a3ae:	d138      	bne.n	801a422 <_vfiprintf_r+0x1aa>
 801a3b0:	9b03      	ldr	r3, [sp, #12]
 801a3b2:	1d1a      	adds	r2, r3, #4
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	9203      	str	r2, [sp, #12]
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	bfb8      	it	lt
 801a3bc:	f04f 33ff 	movlt.w	r3, #4294967295
 801a3c0:	f108 0802 	add.w	r8, r8, #2
 801a3c4:	9305      	str	r3, [sp, #20]
 801a3c6:	4d33      	ldr	r5, [pc, #204]	; (801a494 <_vfiprintf_r+0x21c>)
 801a3c8:	f898 1000 	ldrb.w	r1, [r8]
 801a3cc:	2203      	movs	r2, #3
 801a3ce:	4628      	mov	r0, r5
 801a3d0:	f7ed fe3e 	bl	8008050 <memchr>
 801a3d4:	b140      	cbz	r0, 801a3e8 <_vfiprintf_r+0x170>
 801a3d6:	2340      	movs	r3, #64	; 0x40
 801a3d8:	1b40      	subs	r0, r0, r5
 801a3da:	fa03 f000 	lsl.w	r0, r3, r0
 801a3de:	9b04      	ldr	r3, [sp, #16]
 801a3e0:	4303      	orrs	r3, r0
 801a3e2:	f108 0801 	add.w	r8, r8, #1
 801a3e6:	9304      	str	r3, [sp, #16]
 801a3e8:	f898 1000 	ldrb.w	r1, [r8]
 801a3ec:	482a      	ldr	r0, [pc, #168]	; (801a498 <_vfiprintf_r+0x220>)
 801a3ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a3f2:	2206      	movs	r2, #6
 801a3f4:	f108 0701 	add.w	r7, r8, #1
 801a3f8:	f7ed fe2a 	bl	8008050 <memchr>
 801a3fc:	2800      	cmp	r0, #0
 801a3fe:	d037      	beq.n	801a470 <_vfiprintf_r+0x1f8>
 801a400:	4b26      	ldr	r3, [pc, #152]	; (801a49c <_vfiprintf_r+0x224>)
 801a402:	bb1b      	cbnz	r3, 801a44c <_vfiprintf_r+0x1d4>
 801a404:	9b03      	ldr	r3, [sp, #12]
 801a406:	3307      	adds	r3, #7
 801a408:	f023 0307 	bic.w	r3, r3, #7
 801a40c:	3308      	adds	r3, #8
 801a40e:	9303      	str	r3, [sp, #12]
 801a410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a412:	444b      	add	r3, r9
 801a414:	9309      	str	r3, [sp, #36]	; 0x24
 801a416:	e750      	b.n	801a2ba <_vfiprintf_r+0x42>
 801a418:	fb05 3202 	mla	r2, r5, r2, r3
 801a41c:	2001      	movs	r0, #1
 801a41e:	4688      	mov	r8, r1
 801a420:	e78a      	b.n	801a338 <_vfiprintf_r+0xc0>
 801a422:	2300      	movs	r3, #0
 801a424:	f108 0801 	add.w	r8, r8, #1
 801a428:	9305      	str	r3, [sp, #20]
 801a42a:	4619      	mov	r1, r3
 801a42c:	250a      	movs	r5, #10
 801a42e:	4640      	mov	r0, r8
 801a430:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a434:	3a30      	subs	r2, #48	; 0x30
 801a436:	2a09      	cmp	r2, #9
 801a438:	d903      	bls.n	801a442 <_vfiprintf_r+0x1ca>
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d0c3      	beq.n	801a3c6 <_vfiprintf_r+0x14e>
 801a43e:	9105      	str	r1, [sp, #20]
 801a440:	e7c1      	b.n	801a3c6 <_vfiprintf_r+0x14e>
 801a442:	fb05 2101 	mla	r1, r5, r1, r2
 801a446:	2301      	movs	r3, #1
 801a448:	4680      	mov	r8, r0
 801a44a:	e7f0      	b.n	801a42e <_vfiprintf_r+0x1b6>
 801a44c:	ab03      	add	r3, sp, #12
 801a44e:	9300      	str	r3, [sp, #0]
 801a450:	4622      	mov	r2, r4
 801a452:	4b13      	ldr	r3, [pc, #76]	; (801a4a0 <_vfiprintf_r+0x228>)
 801a454:	a904      	add	r1, sp, #16
 801a456:	4630      	mov	r0, r6
 801a458:	f7fb fe9e 	bl	8016198 <_printf_float>
 801a45c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a460:	4681      	mov	r9, r0
 801a462:	d1d5      	bne.n	801a410 <_vfiprintf_r+0x198>
 801a464:	89a3      	ldrh	r3, [r4, #12]
 801a466:	065b      	lsls	r3, r3, #25
 801a468:	f53f af7e 	bmi.w	801a368 <_vfiprintf_r+0xf0>
 801a46c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a46e:	e77d      	b.n	801a36c <_vfiprintf_r+0xf4>
 801a470:	ab03      	add	r3, sp, #12
 801a472:	9300      	str	r3, [sp, #0]
 801a474:	4622      	mov	r2, r4
 801a476:	4b0a      	ldr	r3, [pc, #40]	; (801a4a0 <_vfiprintf_r+0x228>)
 801a478:	a904      	add	r1, sp, #16
 801a47a:	4630      	mov	r0, r6
 801a47c:	f7fc f942 	bl	8016704 <_printf_i>
 801a480:	e7ec      	b.n	801a45c <_vfiprintf_r+0x1e4>
 801a482:	bf00      	nop
 801a484:	0801b408 	.word	0x0801b408
 801a488:	0801b554 	.word	0x0801b554
 801a48c:	0801b428 	.word	0x0801b428
 801a490:	0801b3e8 	.word	0x0801b3e8
 801a494:	0801b55a 	.word	0x0801b55a
 801a498:	0801b55e 	.word	0x0801b55e
 801a49c:	08016199 	.word	0x08016199
 801a4a0:	0801a253 	.word	0x0801a253

0801a4a4 <__svfiscanf_r>:
 801a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4a8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801a4ac:	460c      	mov	r4, r1
 801a4ae:	2100      	movs	r1, #0
 801a4b0:	9144      	str	r1, [sp, #272]	; 0x110
 801a4b2:	9145      	str	r1, [sp, #276]	; 0x114
 801a4b4:	499f      	ldr	r1, [pc, #636]	; (801a734 <__svfiscanf_r+0x290>)
 801a4b6:	91a0      	str	r1, [sp, #640]	; 0x280
 801a4b8:	f10d 0804 	add.w	r8, sp, #4
 801a4bc:	499e      	ldr	r1, [pc, #632]	; (801a738 <__svfiscanf_r+0x294>)
 801a4be:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801a73c <__svfiscanf_r+0x298>
 801a4c2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801a4c6:	4606      	mov	r6, r0
 801a4c8:	4692      	mov	sl, r2
 801a4ca:	91a1      	str	r1, [sp, #644]	; 0x284
 801a4cc:	9300      	str	r3, [sp, #0]
 801a4ce:	270a      	movs	r7, #10
 801a4d0:	f89a 3000 	ldrb.w	r3, [sl]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	f000 812a 	beq.w	801a72e <__svfiscanf_r+0x28a>
 801a4da:	4655      	mov	r5, sl
 801a4dc:	f7fe fffe 	bl	80194dc <__locale_ctype_ptr>
 801a4e0:	f815 bb01 	ldrb.w	fp, [r5], #1
 801a4e4:	4458      	add	r0, fp
 801a4e6:	7843      	ldrb	r3, [r0, #1]
 801a4e8:	f013 0308 	ands.w	r3, r3, #8
 801a4ec:	d01c      	beq.n	801a528 <__svfiscanf_r+0x84>
 801a4ee:	6863      	ldr	r3, [r4, #4]
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	dd12      	ble.n	801a51a <__svfiscanf_r+0x76>
 801a4f4:	f7fe fff2 	bl	80194dc <__locale_ctype_ptr>
 801a4f8:	6823      	ldr	r3, [r4, #0]
 801a4fa:	781a      	ldrb	r2, [r3, #0]
 801a4fc:	4410      	add	r0, r2
 801a4fe:	7842      	ldrb	r2, [r0, #1]
 801a500:	0712      	lsls	r2, r2, #28
 801a502:	d401      	bmi.n	801a508 <__svfiscanf_r+0x64>
 801a504:	46aa      	mov	sl, r5
 801a506:	e7e3      	b.n	801a4d0 <__svfiscanf_r+0x2c>
 801a508:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a50a:	3201      	adds	r2, #1
 801a50c:	9245      	str	r2, [sp, #276]	; 0x114
 801a50e:	6862      	ldr	r2, [r4, #4]
 801a510:	3301      	adds	r3, #1
 801a512:	3a01      	subs	r2, #1
 801a514:	6062      	str	r2, [r4, #4]
 801a516:	6023      	str	r3, [r4, #0]
 801a518:	e7e9      	b.n	801a4ee <__svfiscanf_r+0x4a>
 801a51a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a51c:	4621      	mov	r1, r4
 801a51e:	4630      	mov	r0, r6
 801a520:	4798      	blx	r3
 801a522:	2800      	cmp	r0, #0
 801a524:	d0e6      	beq.n	801a4f4 <__svfiscanf_r+0x50>
 801a526:	e7ed      	b.n	801a504 <__svfiscanf_r+0x60>
 801a528:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801a52c:	f040 8082 	bne.w	801a634 <__svfiscanf_r+0x190>
 801a530:	9343      	str	r3, [sp, #268]	; 0x10c
 801a532:	9341      	str	r3, [sp, #260]	; 0x104
 801a534:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801a538:	2b2a      	cmp	r3, #42	; 0x2a
 801a53a:	d103      	bne.n	801a544 <__svfiscanf_r+0xa0>
 801a53c:	2310      	movs	r3, #16
 801a53e:	9341      	str	r3, [sp, #260]	; 0x104
 801a540:	f10a 0502 	add.w	r5, sl, #2
 801a544:	46aa      	mov	sl, r5
 801a546:	f815 1b01 	ldrb.w	r1, [r5], #1
 801a54a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801a54e:	2a09      	cmp	r2, #9
 801a550:	d922      	bls.n	801a598 <__svfiscanf_r+0xf4>
 801a552:	2203      	movs	r2, #3
 801a554:	4879      	ldr	r0, [pc, #484]	; (801a73c <__svfiscanf_r+0x298>)
 801a556:	f7ed fd7b 	bl	8008050 <memchr>
 801a55a:	b138      	cbz	r0, 801a56c <__svfiscanf_r+0xc8>
 801a55c:	eba0 0309 	sub.w	r3, r0, r9
 801a560:	2001      	movs	r0, #1
 801a562:	4098      	lsls	r0, r3
 801a564:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a566:	4318      	orrs	r0, r3
 801a568:	9041      	str	r0, [sp, #260]	; 0x104
 801a56a:	46aa      	mov	sl, r5
 801a56c:	f89a 3000 	ldrb.w	r3, [sl]
 801a570:	2b67      	cmp	r3, #103	; 0x67
 801a572:	f10a 0501 	add.w	r5, sl, #1
 801a576:	d82b      	bhi.n	801a5d0 <__svfiscanf_r+0x12c>
 801a578:	2b65      	cmp	r3, #101	; 0x65
 801a57a:	f080 809f 	bcs.w	801a6bc <__svfiscanf_r+0x218>
 801a57e:	2b47      	cmp	r3, #71	; 0x47
 801a580:	d810      	bhi.n	801a5a4 <__svfiscanf_r+0x100>
 801a582:	2b45      	cmp	r3, #69	; 0x45
 801a584:	f080 809a 	bcs.w	801a6bc <__svfiscanf_r+0x218>
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d06c      	beq.n	801a666 <__svfiscanf_r+0x1c2>
 801a58c:	2b25      	cmp	r3, #37	; 0x25
 801a58e:	d051      	beq.n	801a634 <__svfiscanf_r+0x190>
 801a590:	2303      	movs	r3, #3
 801a592:	9347      	str	r3, [sp, #284]	; 0x11c
 801a594:	9742      	str	r7, [sp, #264]	; 0x108
 801a596:	e027      	b.n	801a5e8 <__svfiscanf_r+0x144>
 801a598:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801a59a:	fb07 1303 	mla	r3, r7, r3, r1
 801a59e:	3b30      	subs	r3, #48	; 0x30
 801a5a0:	9343      	str	r3, [sp, #268]	; 0x10c
 801a5a2:	e7cf      	b.n	801a544 <__svfiscanf_r+0xa0>
 801a5a4:	2b5b      	cmp	r3, #91	; 0x5b
 801a5a6:	d06a      	beq.n	801a67e <__svfiscanf_r+0x1da>
 801a5a8:	d80c      	bhi.n	801a5c4 <__svfiscanf_r+0x120>
 801a5aa:	2b58      	cmp	r3, #88	; 0x58
 801a5ac:	d1f0      	bne.n	801a590 <__svfiscanf_r+0xec>
 801a5ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a5b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a5b4:	9241      	str	r2, [sp, #260]	; 0x104
 801a5b6:	2210      	movs	r2, #16
 801a5b8:	9242      	str	r2, [sp, #264]	; 0x108
 801a5ba:	2b6e      	cmp	r3, #110	; 0x6e
 801a5bc:	bf8c      	ite	hi
 801a5be:	2304      	movhi	r3, #4
 801a5c0:	2303      	movls	r3, #3
 801a5c2:	e010      	b.n	801a5e6 <__svfiscanf_r+0x142>
 801a5c4:	2b63      	cmp	r3, #99	; 0x63
 801a5c6:	d065      	beq.n	801a694 <__svfiscanf_r+0x1f0>
 801a5c8:	2b64      	cmp	r3, #100	; 0x64
 801a5ca:	d1e1      	bne.n	801a590 <__svfiscanf_r+0xec>
 801a5cc:	9742      	str	r7, [sp, #264]	; 0x108
 801a5ce:	e7f4      	b.n	801a5ba <__svfiscanf_r+0x116>
 801a5d0:	2b70      	cmp	r3, #112	; 0x70
 801a5d2:	d04b      	beq.n	801a66c <__svfiscanf_r+0x1c8>
 801a5d4:	d826      	bhi.n	801a624 <__svfiscanf_r+0x180>
 801a5d6:	2b6e      	cmp	r3, #110	; 0x6e
 801a5d8:	d062      	beq.n	801a6a0 <__svfiscanf_r+0x1fc>
 801a5da:	d84c      	bhi.n	801a676 <__svfiscanf_r+0x1d2>
 801a5dc:	2b69      	cmp	r3, #105	; 0x69
 801a5de:	d1d7      	bne.n	801a590 <__svfiscanf_r+0xec>
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	9342      	str	r3, [sp, #264]	; 0x108
 801a5e4:	2303      	movs	r3, #3
 801a5e6:	9347      	str	r3, [sp, #284]	; 0x11c
 801a5e8:	6863      	ldr	r3, [r4, #4]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	dd68      	ble.n	801a6c0 <__svfiscanf_r+0x21c>
 801a5ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a5f0:	0659      	lsls	r1, r3, #25
 801a5f2:	d407      	bmi.n	801a604 <__svfiscanf_r+0x160>
 801a5f4:	f7fe ff72 	bl	80194dc <__locale_ctype_ptr>
 801a5f8:	6823      	ldr	r3, [r4, #0]
 801a5fa:	781a      	ldrb	r2, [r3, #0]
 801a5fc:	4410      	add	r0, r2
 801a5fe:	7842      	ldrb	r2, [r0, #1]
 801a600:	0712      	lsls	r2, r2, #28
 801a602:	d464      	bmi.n	801a6ce <__svfiscanf_r+0x22a>
 801a604:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801a606:	2b02      	cmp	r3, #2
 801a608:	dc73      	bgt.n	801a6f2 <__svfiscanf_r+0x24e>
 801a60a:	466b      	mov	r3, sp
 801a60c:	4622      	mov	r2, r4
 801a60e:	a941      	add	r1, sp, #260	; 0x104
 801a610:	4630      	mov	r0, r6
 801a612:	f000 f8bf 	bl	801a794 <_scanf_chars>
 801a616:	2801      	cmp	r0, #1
 801a618:	f000 8089 	beq.w	801a72e <__svfiscanf_r+0x28a>
 801a61c:	2802      	cmp	r0, #2
 801a61e:	f47f af71 	bne.w	801a504 <__svfiscanf_r+0x60>
 801a622:	e01d      	b.n	801a660 <__svfiscanf_r+0x1bc>
 801a624:	2b75      	cmp	r3, #117	; 0x75
 801a626:	d0d1      	beq.n	801a5cc <__svfiscanf_r+0x128>
 801a628:	2b78      	cmp	r3, #120	; 0x78
 801a62a:	d0c0      	beq.n	801a5ae <__svfiscanf_r+0x10a>
 801a62c:	2b73      	cmp	r3, #115	; 0x73
 801a62e:	d1af      	bne.n	801a590 <__svfiscanf_r+0xec>
 801a630:	2302      	movs	r3, #2
 801a632:	e7d8      	b.n	801a5e6 <__svfiscanf_r+0x142>
 801a634:	6863      	ldr	r3, [r4, #4]
 801a636:	2b00      	cmp	r3, #0
 801a638:	dd0c      	ble.n	801a654 <__svfiscanf_r+0x1b0>
 801a63a:	6823      	ldr	r3, [r4, #0]
 801a63c:	781a      	ldrb	r2, [r3, #0]
 801a63e:	455a      	cmp	r2, fp
 801a640:	d175      	bne.n	801a72e <__svfiscanf_r+0x28a>
 801a642:	3301      	adds	r3, #1
 801a644:	6862      	ldr	r2, [r4, #4]
 801a646:	6023      	str	r3, [r4, #0]
 801a648:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801a64a:	3a01      	subs	r2, #1
 801a64c:	3301      	adds	r3, #1
 801a64e:	6062      	str	r2, [r4, #4]
 801a650:	9345      	str	r3, [sp, #276]	; 0x114
 801a652:	e757      	b.n	801a504 <__svfiscanf_r+0x60>
 801a654:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a656:	4621      	mov	r1, r4
 801a658:	4630      	mov	r0, r6
 801a65a:	4798      	blx	r3
 801a65c:	2800      	cmp	r0, #0
 801a65e:	d0ec      	beq.n	801a63a <__svfiscanf_r+0x196>
 801a660:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a662:	2800      	cmp	r0, #0
 801a664:	d159      	bne.n	801a71a <__svfiscanf_r+0x276>
 801a666:	f04f 30ff 	mov.w	r0, #4294967295
 801a66a:	e05c      	b.n	801a726 <__svfiscanf_r+0x282>
 801a66c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a66e:	f042 0220 	orr.w	r2, r2, #32
 801a672:	9241      	str	r2, [sp, #260]	; 0x104
 801a674:	e79b      	b.n	801a5ae <__svfiscanf_r+0x10a>
 801a676:	2308      	movs	r3, #8
 801a678:	9342      	str	r3, [sp, #264]	; 0x108
 801a67a:	2304      	movs	r3, #4
 801a67c:	e7b3      	b.n	801a5e6 <__svfiscanf_r+0x142>
 801a67e:	4629      	mov	r1, r5
 801a680:	4640      	mov	r0, r8
 801a682:	f000 fa85 	bl	801ab90 <__sccl>
 801a686:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a68c:	9341      	str	r3, [sp, #260]	; 0x104
 801a68e:	4605      	mov	r5, r0
 801a690:	2301      	movs	r3, #1
 801a692:	e7a8      	b.n	801a5e6 <__svfiscanf_r+0x142>
 801a694:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a69a:	9341      	str	r3, [sp, #260]	; 0x104
 801a69c:	2300      	movs	r3, #0
 801a69e:	e7a2      	b.n	801a5e6 <__svfiscanf_r+0x142>
 801a6a0:	9841      	ldr	r0, [sp, #260]	; 0x104
 801a6a2:	06c3      	lsls	r3, r0, #27
 801a6a4:	f53f af2e 	bmi.w	801a504 <__svfiscanf_r+0x60>
 801a6a8:	9b00      	ldr	r3, [sp, #0]
 801a6aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a6ac:	1d19      	adds	r1, r3, #4
 801a6ae:	9100      	str	r1, [sp, #0]
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	07c0      	lsls	r0, r0, #31
 801a6b4:	bf4c      	ite	mi
 801a6b6:	801a      	strhmi	r2, [r3, #0]
 801a6b8:	601a      	strpl	r2, [r3, #0]
 801a6ba:	e723      	b.n	801a504 <__svfiscanf_r+0x60>
 801a6bc:	2305      	movs	r3, #5
 801a6be:	e792      	b.n	801a5e6 <__svfiscanf_r+0x142>
 801a6c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a6c2:	4621      	mov	r1, r4
 801a6c4:	4630      	mov	r0, r6
 801a6c6:	4798      	blx	r3
 801a6c8:	2800      	cmp	r0, #0
 801a6ca:	d090      	beq.n	801a5ee <__svfiscanf_r+0x14a>
 801a6cc:	e7c8      	b.n	801a660 <__svfiscanf_r+0x1bc>
 801a6ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a6d0:	3201      	adds	r2, #1
 801a6d2:	9245      	str	r2, [sp, #276]	; 0x114
 801a6d4:	6862      	ldr	r2, [r4, #4]
 801a6d6:	3a01      	subs	r2, #1
 801a6d8:	2a00      	cmp	r2, #0
 801a6da:	6062      	str	r2, [r4, #4]
 801a6dc:	dd02      	ble.n	801a6e4 <__svfiscanf_r+0x240>
 801a6de:	3301      	adds	r3, #1
 801a6e0:	6023      	str	r3, [r4, #0]
 801a6e2:	e787      	b.n	801a5f4 <__svfiscanf_r+0x150>
 801a6e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a6e6:	4621      	mov	r1, r4
 801a6e8:	4630      	mov	r0, r6
 801a6ea:	4798      	blx	r3
 801a6ec:	2800      	cmp	r0, #0
 801a6ee:	d081      	beq.n	801a5f4 <__svfiscanf_r+0x150>
 801a6f0:	e7b6      	b.n	801a660 <__svfiscanf_r+0x1bc>
 801a6f2:	2b04      	cmp	r3, #4
 801a6f4:	dc06      	bgt.n	801a704 <__svfiscanf_r+0x260>
 801a6f6:	466b      	mov	r3, sp
 801a6f8:	4622      	mov	r2, r4
 801a6fa:	a941      	add	r1, sp, #260	; 0x104
 801a6fc:	4630      	mov	r0, r6
 801a6fe:	f000 f8ad 	bl	801a85c <_scanf_i>
 801a702:	e788      	b.n	801a616 <__svfiscanf_r+0x172>
 801a704:	4b0e      	ldr	r3, [pc, #56]	; (801a740 <__svfiscanf_r+0x29c>)
 801a706:	2b00      	cmp	r3, #0
 801a708:	f43f aefc 	beq.w	801a504 <__svfiscanf_r+0x60>
 801a70c:	466b      	mov	r3, sp
 801a70e:	4622      	mov	r2, r4
 801a710:	a941      	add	r1, sp, #260	; 0x104
 801a712:	4630      	mov	r0, r6
 801a714:	f7fc f908 	bl	8016928 <_scanf_float>
 801a718:	e77d      	b.n	801a616 <__svfiscanf_r+0x172>
 801a71a:	89a3      	ldrh	r3, [r4, #12]
 801a71c:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a720:	bf18      	it	ne
 801a722:	f04f 30ff 	movne.w	r0, #4294967295
 801a726:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801a72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a72e:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a730:	e7f9      	b.n	801a726 <__svfiscanf_r+0x282>
 801a732:	bf00      	nop
 801a734:	0801ae2d 	.word	0x0801ae2d
 801a738:	0801aa59 	.word	0x0801aa59
 801a73c:	0801b55a 	.word	0x0801b55a
 801a740:	08016929 	.word	0x08016929

0801a744 <_vfiscanf_r>:
 801a744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a748:	460c      	mov	r4, r1
 801a74a:	4616      	mov	r6, r2
 801a74c:	461f      	mov	r7, r3
 801a74e:	4605      	mov	r5, r0
 801a750:	b118      	cbz	r0, 801a75a <_vfiscanf_r+0x16>
 801a752:	6983      	ldr	r3, [r0, #24]
 801a754:	b90b      	cbnz	r3, 801a75a <_vfiscanf_r+0x16>
 801a756:	f7fe faf1 	bl	8018d3c <__sinit>
 801a75a:	4b0b      	ldr	r3, [pc, #44]	; (801a788 <_vfiscanf_r+0x44>)
 801a75c:	429c      	cmp	r4, r3
 801a75e:	d108      	bne.n	801a772 <_vfiscanf_r+0x2e>
 801a760:	686c      	ldr	r4, [r5, #4]
 801a762:	463b      	mov	r3, r7
 801a764:	4632      	mov	r2, r6
 801a766:	4621      	mov	r1, r4
 801a768:	4628      	mov	r0, r5
 801a76a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a76e:	f7ff be99 	b.w	801a4a4 <__svfiscanf_r>
 801a772:	4b06      	ldr	r3, [pc, #24]	; (801a78c <_vfiscanf_r+0x48>)
 801a774:	429c      	cmp	r4, r3
 801a776:	d101      	bne.n	801a77c <_vfiscanf_r+0x38>
 801a778:	68ac      	ldr	r4, [r5, #8]
 801a77a:	e7f2      	b.n	801a762 <_vfiscanf_r+0x1e>
 801a77c:	4b04      	ldr	r3, [pc, #16]	; (801a790 <_vfiscanf_r+0x4c>)
 801a77e:	429c      	cmp	r4, r3
 801a780:	bf08      	it	eq
 801a782:	68ec      	ldreq	r4, [r5, #12]
 801a784:	e7ed      	b.n	801a762 <_vfiscanf_r+0x1e>
 801a786:	bf00      	nop
 801a788:	0801b408 	.word	0x0801b408
 801a78c:	0801b428 	.word	0x0801b428
 801a790:	0801b3e8 	.word	0x0801b3e8

0801a794 <_scanf_chars>:
 801a794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a798:	4615      	mov	r5, r2
 801a79a:	688a      	ldr	r2, [r1, #8]
 801a79c:	4680      	mov	r8, r0
 801a79e:	460c      	mov	r4, r1
 801a7a0:	b932      	cbnz	r2, 801a7b0 <_scanf_chars+0x1c>
 801a7a2:	698a      	ldr	r2, [r1, #24]
 801a7a4:	2a00      	cmp	r2, #0
 801a7a6:	bf14      	ite	ne
 801a7a8:	f04f 32ff 	movne.w	r2, #4294967295
 801a7ac:	2201      	moveq	r2, #1
 801a7ae:	608a      	str	r2, [r1, #8]
 801a7b0:	6822      	ldr	r2, [r4, #0]
 801a7b2:	06d1      	lsls	r1, r2, #27
 801a7b4:	bf5f      	itttt	pl
 801a7b6:	681a      	ldrpl	r2, [r3, #0]
 801a7b8:	1d11      	addpl	r1, r2, #4
 801a7ba:	6019      	strpl	r1, [r3, #0]
 801a7bc:	6817      	ldrpl	r7, [r2, #0]
 801a7be:	2600      	movs	r6, #0
 801a7c0:	69a3      	ldr	r3, [r4, #24]
 801a7c2:	b1db      	cbz	r3, 801a7fc <_scanf_chars+0x68>
 801a7c4:	2b01      	cmp	r3, #1
 801a7c6:	d107      	bne.n	801a7d8 <_scanf_chars+0x44>
 801a7c8:	682b      	ldr	r3, [r5, #0]
 801a7ca:	6962      	ldr	r2, [r4, #20]
 801a7cc:	781b      	ldrb	r3, [r3, #0]
 801a7ce:	5cd3      	ldrb	r3, [r2, r3]
 801a7d0:	b9a3      	cbnz	r3, 801a7fc <_scanf_chars+0x68>
 801a7d2:	2e00      	cmp	r6, #0
 801a7d4:	d132      	bne.n	801a83c <_scanf_chars+0xa8>
 801a7d6:	e006      	b.n	801a7e6 <_scanf_chars+0x52>
 801a7d8:	2b02      	cmp	r3, #2
 801a7da:	d007      	beq.n	801a7ec <_scanf_chars+0x58>
 801a7dc:	2e00      	cmp	r6, #0
 801a7de:	d12d      	bne.n	801a83c <_scanf_chars+0xa8>
 801a7e0:	69a3      	ldr	r3, [r4, #24]
 801a7e2:	2b01      	cmp	r3, #1
 801a7e4:	d12a      	bne.n	801a83c <_scanf_chars+0xa8>
 801a7e6:	2001      	movs	r0, #1
 801a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7ec:	f7fe fe76 	bl	80194dc <__locale_ctype_ptr>
 801a7f0:	682b      	ldr	r3, [r5, #0]
 801a7f2:	781b      	ldrb	r3, [r3, #0]
 801a7f4:	4418      	add	r0, r3
 801a7f6:	7843      	ldrb	r3, [r0, #1]
 801a7f8:	071b      	lsls	r3, r3, #28
 801a7fa:	d4ef      	bmi.n	801a7dc <_scanf_chars+0x48>
 801a7fc:	6823      	ldr	r3, [r4, #0]
 801a7fe:	06da      	lsls	r2, r3, #27
 801a800:	bf5e      	ittt	pl
 801a802:	682b      	ldrpl	r3, [r5, #0]
 801a804:	781b      	ldrbpl	r3, [r3, #0]
 801a806:	703b      	strbpl	r3, [r7, #0]
 801a808:	682a      	ldr	r2, [r5, #0]
 801a80a:	686b      	ldr	r3, [r5, #4]
 801a80c:	f102 0201 	add.w	r2, r2, #1
 801a810:	602a      	str	r2, [r5, #0]
 801a812:	68a2      	ldr	r2, [r4, #8]
 801a814:	f103 33ff 	add.w	r3, r3, #4294967295
 801a818:	f102 32ff 	add.w	r2, r2, #4294967295
 801a81c:	606b      	str	r3, [r5, #4]
 801a81e:	f106 0601 	add.w	r6, r6, #1
 801a822:	bf58      	it	pl
 801a824:	3701      	addpl	r7, #1
 801a826:	60a2      	str	r2, [r4, #8]
 801a828:	b142      	cbz	r2, 801a83c <_scanf_chars+0xa8>
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	dcc8      	bgt.n	801a7c0 <_scanf_chars+0x2c>
 801a82e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a832:	4629      	mov	r1, r5
 801a834:	4640      	mov	r0, r8
 801a836:	4798      	blx	r3
 801a838:	2800      	cmp	r0, #0
 801a83a:	d0c1      	beq.n	801a7c0 <_scanf_chars+0x2c>
 801a83c:	6823      	ldr	r3, [r4, #0]
 801a83e:	f013 0310 	ands.w	r3, r3, #16
 801a842:	d105      	bne.n	801a850 <_scanf_chars+0xbc>
 801a844:	68e2      	ldr	r2, [r4, #12]
 801a846:	3201      	adds	r2, #1
 801a848:	60e2      	str	r2, [r4, #12]
 801a84a:	69a2      	ldr	r2, [r4, #24]
 801a84c:	b102      	cbz	r2, 801a850 <_scanf_chars+0xbc>
 801a84e:	703b      	strb	r3, [r7, #0]
 801a850:	6923      	ldr	r3, [r4, #16]
 801a852:	441e      	add	r6, r3
 801a854:	6126      	str	r6, [r4, #16]
 801a856:	2000      	movs	r0, #0
 801a858:	e7c6      	b.n	801a7e8 <_scanf_chars+0x54>
	...

0801a85c <_scanf_i>:
 801a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a860:	469a      	mov	sl, r3
 801a862:	4b74      	ldr	r3, [pc, #464]	; (801aa34 <_scanf_i+0x1d8>)
 801a864:	460c      	mov	r4, r1
 801a866:	4683      	mov	fp, r0
 801a868:	4616      	mov	r6, r2
 801a86a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a86e:	b087      	sub	sp, #28
 801a870:	ab03      	add	r3, sp, #12
 801a872:	68a7      	ldr	r7, [r4, #8]
 801a874:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a878:	4b6f      	ldr	r3, [pc, #444]	; (801aa38 <_scanf_i+0x1dc>)
 801a87a:	69a1      	ldr	r1, [r4, #24]
 801a87c:	4a6f      	ldr	r2, [pc, #444]	; (801aa3c <_scanf_i+0x1e0>)
 801a87e:	2903      	cmp	r1, #3
 801a880:	bf08      	it	eq
 801a882:	461a      	moveq	r2, r3
 801a884:	1e7b      	subs	r3, r7, #1
 801a886:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801a88a:	bf84      	itt	hi
 801a88c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a890:	60a3      	strhi	r3, [r4, #8]
 801a892:	6823      	ldr	r3, [r4, #0]
 801a894:	9200      	str	r2, [sp, #0]
 801a896:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a89a:	bf88      	it	hi
 801a89c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a8a0:	f104 091c 	add.w	r9, r4, #28
 801a8a4:	6023      	str	r3, [r4, #0]
 801a8a6:	bf8c      	ite	hi
 801a8a8:	197f      	addhi	r7, r7, r5
 801a8aa:	2700      	movls	r7, #0
 801a8ac:	464b      	mov	r3, r9
 801a8ae:	f04f 0800 	mov.w	r8, #0
 801a8b2:	9301      	str	r3, [sp, #4]
 801a8b4:	6831      	ldr	r1, [r6, #0]
 801a8b6:	ab03      	add	r3, sp, #12
 801a8b8:	2202      	movs	r2, #2
 801a8ba:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a8be:	7809      	ldrb	r1, [r1, #0]
 801a8c0:	f7ed fbc6 	bl	8008050 <memchr>
 801a8c4:	9b01      	ldr	r3, [sp, #4]
 801a8c6:	b330      	cbz	r0, 801a916 <_scanf_i+0xba>
 801a8c8:	f1b8 0f01 	cmp.w	r8, #1
 801a8cc:	d15a      	bne.n	801a984 <_scanf_i+0x128>
 801a8ce:	6862      	ldr	r2, [r4, #4]
 801a8d0:	b92a      	cbnz	r2, 801a8de <_scanf_i+0x82>
 801a8d2:	6822      	ldr	r2, [r4, #0]
 801a8d4:	2108      	movs	r1, #8
 801a8d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a8da:	6061      	str	r1, [r4, #4]
 801a8dc:	6022      	str	r2, [r4, #0]
 801a8de:	6822      	ldr	r2, [r4, #0]
 801a8e0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a8e4:	6022      	str	r2, [r4, #0]
 801a8e6:	68a2      	ldr	r2, [r4, #8]
 801a8e8:	1e51      	subs	r1, r2, #1
 801a8ea:	60a1      	str	r1, [r4, #8]
 801a8ec:	b19a      	cbz	r2, 801a916 <_scanf_i+0xba>
 801a8ee:	6832      	ldr	r2, [r6, #0]
 801a8f0:	1c51      	adds	r1, r2, #1
 801a8f2:	6031      	str	r1, [r6, #0]
 801a8f4:	7812      	ldrb	r2, [r2, #0]
 801a8f6:	701a      	strb	r2, [r3, #0]
 801a8f8:	1c5d      	adds	r5, r3, #1
 801a8fa:	6873      	ldr	r3, [r6, #4]
 801a8fc:	3b01      	subs	r3, #1
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	6073      	str	r3, [r6, #4]
 801a902:	dc07      	bgt.n	801a914 <_scanf_i+0xb8>
 801a904:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a908:	4631      	mov	r1, r6
 801a90a:	4658      	mov	r0, fp
 801a90c:	4798      	blx	r3
 801a90e:	2800      	cmp	r0, #0
 801a910:	f040 8086 	bne.w	801aa20 <_scanf_i+0x1c4>
 801a914:	462b      	mov	r3, r5
 801a916:	f108 0801 	add.w	r8, r8, #1
 801a91a:	f1b8 0f03 	cmp.w	r8, #3
 801a91e:	d1c8      	bne.n	801a8b2 <_scanf_i+0x56>
 801a920:	6862      	ldr	r2, [r4, #4]
 801a922:	b90a      	cbnz	r2, 801a928 <_scanf_i+0xcc>
 801a924:	220a      	movs	r2, #10
 801a926:	6062      	str	r2, [r4, #4]
 801a928:	6862      	ldr	r2, [r4, #4]
 801a92a:	4945      	ldr	r1, [pc, #276]	; (801aa40 <_scanf_i+0x1e4>)
 801a92c:	6960      	ldr	r0, [r4, #20]
 801a92e:	9301      	str	r3, [sp, #4]
 801a930:	1a89      	subs	r1, r1, r2
 801a932:	f000 f92d 	bl	801ab90 <__sccl>
 801a936:	9b01      	ldr	r3, [sp, #4]
 801a938:	f04f 0800 	mov.w	r8, #0
 801a93c:	461d      	mov	r5, r3
 801a93e:	68a3      	ldr	r3, [r4, #8]
 801a940:	6822      	ldr	r2, [r4, #0]
 801a942:	2b00      	cmp	r3, #0
 801a944:	d03a      	beq.n	801a9bc <_scanf_i+0x160>
 801a946:	6831      	ldr	r1, [r6, #0]
 801a948:	6960      	ldr	r0, [r4, #20]
 801a94a:	f891 c000 	ldrb.w	ip, [r1]
 801a94e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a952:	2800      	cmp	r0, #0
 801a954:	d032      	beq.n	801a9bc <_scanf_i+0x160>
 801a956:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a95a:	d121      	bne.n	801a9a0 <_scanf_i+0x144>
 801a95c:	0510      	lsls	r0, r2, #20
 801a95e:	d51f      	bpl.n	801a9a0 <_scanf_i+0x144>
 801a960:	f108 0801 	add.w	r8, r8, #1
 801a964:	b117      	cbz	r7, 801a96c <_scanf_i+0x110>
 801a966:	3301      	adds	r3, #1
 801a968:	3f01      	subs	r7, #1
 801a96a:	60a3      	str	r3, [r4, #8]
 801a96c:	6873      	ldr	r3, [r6, #4]
 801a96e:	3b01      	subs	r3, #1
 801a970:	2b00      	cmp	r3, #0
 801a972:	6073      	str	r3, [r6, #4]
 801a974:	dd1b      	ble.n	801a9ae <_scanf_i+0x152>
 801a976:	6833      	ldr	r3, [r6, #0]
 801a978:	3301      	adds	r3, #1
 801a97a:	6033      	str	r3, [r6, #0]
 801a97c:	68a3      	ldr	r3, [r4, #8]
 801a97e:	3b01      	subs	r3, #1
 801a980:	60a3      	str	r3, [r4, #8]
 801a982:	e7dc      	b.n	801a93e <_scanf_i+0xe2>
 801a984:	f1b8 0f02 	cmp.w	r8, #2
 801a988:	d1ad      	bne.n	801a8e6 <_scanf_i+0x8a>
 801a98a:	6822      	ldr	r2, [r4, #0]
 801a98c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a990:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a994:	d1bf      	bne.n	801a916 <_scanf_i+0xba>
 801a996:	2110      	movs	r1, #16
 801a998:	6061      	str	r1, [r4, #4]
 801a99a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a99e:	e7a1      	b.n	801a8e4 <_scanf_i+0x88>
 801a9a0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a9a4:	6022      	str	r2, [r4, #0]
 801a9a6:	780b      	ldrb	r3, [r1, #0]
 801a9a8:	702b      	strb	r3, [r5, #0]
 801a9aa:	3501      	adds	r5, #1
 801a9ac:	e7de      	b.n	801a96c <_scanf_i+0x110>
 801a9ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a9b2:	4631      	mov	r1, r6
 801a9b4:	4658      	mov	r0, fp
 801a9b6:	4798      	blx	r3
 801a9b8:	2800      	cmp	r0, #0
 801a9ba:	d0df      	beq.n	801a97c <_scanf_i+0x120>
 801a9bc:	6823      	ldr	r3, [r4, #0]
 801a9be:	05d9      	lsls	r1, r3, #23
 801a9c0:	d50c      	bpl.n	801a9dc <_scanf_i+0x180>
 801a9c2:	454d      	cmp	r5, r9
 801a9c4:	d908      	bls.n	801a9d8 <_scanf_i+0x17c>
 801a9c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a9ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a9ce:	4632      	mov	r2, r6
 801a9d0:	4658      	mov	r0, fp
 801a9d2:	4798      	blx	r3
 801a9d4:	1e6f      	subs	r7, r5, #1
 801a9d6:	463d      	mov	r5, r7
 801a9d8:	454d      	cmp	r5, r9
 801a9da:	d029      	beq.n	801aa30 <_scanf_i+0x1d4>
 801a9dc:	6822      	ldr	r2, [r4, #0]
 801a9de:	f012 0210 	ands.w	r2, r2, #16
 801a9e2:	d113      	bne.n	801aa0c <_scanf_i+0x1b0>
 801a9e4:	702a      	strb	r2, [r5, #0]
 801a9e6:	6863      	ldr	r3, [r4, #4]
 801a9e8:	9e00      	ldr	r6, [sp, #0]
 801a9ea:	4649      	mov	r1, r9
 801a9ec:	4658      	mov	r0, fp
 801a9ee:	47b0      	blx	r6
 801a9f0:	f8da 3000 	ldr.w	r3, [sl]
 801a9f4:	6821      	ldr	r1, [r4, #0]
 801a9f6:	1d1a      	adds	r2, r3, #4
 801a9f8:	f8ca 2000 	str.w	r2, [sl]
 801a9fc:	f011 0f20 	tst.w	r1, #32
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	d010      	beq.n	801aa26 <_scanf_i+0x1ca>
 801aa04:	6018      	str	r0, [r3, #0]
 801aa06:	68e3      	ldr	r3, [r4, #12]
 801aa08:	3301      	adds	r3, #1
 801aa0a:	60e3      	str	r3, [r4, #12]
 801aa0c:	eba5 0509 	sub.w	r5, r5, r9
 801aa10:	44a8      	add	r8, r5
 801aa12:	6925      	ldr	r5, [r4, #16]
 801aa14:	4445      	add	r5, r8
 801aa16:	6125      	str	r5, [r4, #16]
 801aa18:	2000      	movs	r0, #0
 801aa1a:	b007      	add	sp, #28
 801aa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa20:	f04f 0800 	mov.w	r8, #0
 801aa24:	e7ca      	b.n	801a9bc <_scanf_i+0x160>
 801aa26:	07ca      	lsls	r2, r1, #31
 801aa28:	bf4c      	ite	mi
 801aa2a:	8018      	strhmi	r0, [r3, #0]
 801aa2c:	6018      	strpl	r0, [r3, #0]
 801aa2e:	e7ea      	b.n	801aa06 <_scanf_i+0x1aa>
 801aa30:	2001      	movs	r0, #1
 801aa32:	e7f2      	b.n	801aa1a <_scanf_i+0x1be>
 801aa34:	0801b314 	.word	0x0801b314
 801aa38:	08017d09 	.word	0x08017d09
 801aa3c:	0801ad95 	.word	0x0801ad95
 801aa40:	0801b575 	.word	0x0801b575

0801aa44 <lflush>:
 801aa44:	8983      	ldrh	r3, [r0, #12]
 801aa46:	f003 0309 	and.w	r3, r3, #9
 801aa4a:	2b09      	cmp	r3, #9
 801aa4c:	d101      	bne.n	801aa52 <lflush+0xe>
 801aa4e:	f7fe b923 	b.w	8018c98 <fflush>
 801aa52:	2000      	movs	r0, #0
 801aa54:	4770      	bx	lr
	...

0801aa58 <__srefill_r>:
 801aa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa5a:	460c      	mov	r4, r1
 801aa5c:	4605      	mov	r5, r0
 801aa5e:	b118      	cbz	r0, 801aa68 <__srefill_r+0x10>
 801aa60:	6983      	ldr	r3, [r0, #24]
 801aa62:	b90b      	cbnz	r3, 801aa68 <__srefill_r+0x10>
 801aa64:	f7fe f96a 	bl	8018d3c <__sinit>
 801aa68:	4b3c      	ldr	r3, [pc, #240]	; (801ab5c <__srefill_r+0x104>)
 801aa6a:	429c      	cmp	r4, r3
 801aa6c:	d10a      	bne.n	801aa84 <__srefill_r+0x2c>
 801aa6e:	686c      	ldr	r4, [r5, #4]
 801aa70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801aa74:	2300      	movs	r3, #0
 801aa76:	6063      	str	r3, [r4, #4]
 801aa78:	b293      	uxth	r3, r2
 801aa7a:	069e      	lsls	r6, r3, #26
 801aa7c:	d50c      	bpl.n	801aa98 <__srefill_r+0x40>
 801aa7e:	f04f 30ff 	mov.w	r0, #4294967295
 801aa82:	e067      	b.n	801ab54 <__srefill_r+0xfc>
 801aa84:	4b36      	ldr	r3, [pc, #216]	; (801ab60 <__srefill_r+0x108>)
 801aa86:	429c      	cmp	r4, r3
 801aa88:	d101      	bne.n	801aa8e <__srefill_r+0x36>
 801aa8a:	68ac      	ldr	r4, [r5, #8]
 801aa8c:	e7f0      	b.n	801aa70 <__srefill_r+0x18>
 801aa8e:	4b35      	ldr	r3, [pc, #212]	; (801ab64 <__srefill_r+0x10c>)
 801aa90:	429c      	cmp	r4, r3
 801aa92:	bf08      	it	eq
 801aa94:	68ec      	ldreq	r4, [r5, #12]
 801aa96:	e7eb      	b.n	801aa70 <__srefill_r+0x18>
 801aa98:	0758      	lsls	r0, r3, #29
 801aa9a:	d449      	bmi.n	801ab30 <__srefill_r+0xd8>
 801aa9c:	06d9      	lsls	r1, r3, #27
 801aa9e:	d405      	bmi.n	801aaac <__srefill_r+0x54>
 801aaa0:	2309      	movs	r3, #9
 801aaa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801aaa6:	602b      	str	r3, [r5, #0]
 801aaa8:	81a2      	strh	r2, [r4, #12]
 801aaaa:	e7e8      	b.n	801aa7e <__srefill_r+0x26>
 801aaac:	071a      	lsls	r2, r3, #28
 801aaae:	d50b      	bpl.n	801aac8 <__srefill_r+0x70>
 801aab0:	4621      	mov	r1, r4
 801aab2:	4628      	mov	r0, r5
 801aab4:	f7fe f8c6 	bl	8018c44 <_fflush_r>
 801aab8:	2800      	cmp	r0, #0
 801aaba:	d1e0      	bne.n	801aa7e <__srefill_r+0x26>
 801aabc:	89a3      	ldrh	r3, [r4, #12]
 801aabe:	60a0      	str	r0, [r4, #8]
 801aac0:	f023 0308 	bic.w	r3, r3, #8
 801aac4:	81a3      	strh	r3, [r4, #12]
 801aac6:	61a0      	str	r0, [r4, #24]
 801aac8:	89a3      	ldrh	r3, [r4, #12]
 801aaca:	f043 0304 	orr.w	r3, r3, #4
 801aace:	81a3      	strh	r3, [r4, #12]
 801aad0:	6923      	ldr	r3, [r4, #16]
 801aad2:	b91b      	cbnz	r3, 801aadc <__srefill_r+0x84>
 801aad4:	4621      	mov	r1, r4
 801aad6:	4628      	mov	r0, r5
 801aad8:	f7fe fd42 	bl	8019560 <__smakebuf_r>
 801aadc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 801aae0:	b2be      	uxth	r6, r7
 801aae2:	07b3      	lsls	r3, r6, #30
 801aae4:	d00f      	beq.n	801ab06 <__srefill_r+0xae>
 801aae6:	2301      	movs	r3, #1
 801aae8:	81a3      	strh	r3, [r4, #12]
 801aaea:	4b1f      	ldr	r3, [pc, #124]	; (801ab68 <__srefill_r+0x110>)
 801aaec:	491f      	ldr	r1, [pc, #124]	; (801ab6c <__srefill_r+0x114>)
 801aaee:	6818      	ldr	r0, [r3, #0]
 801aaf0:	f006 0609 	and.w	r6, r6, #9
 801aaf4:	f7fe f98e 	bl	8018e14 <_fwalk>
 801aaf8:	2e09      	cmp	r6, #9
 801aafa:	81a7      	strh	r7, [r4, #12]
 801aafc:	d103      	bne.n	801ab06 <__srefill_r+0xae>
 801aafe:	4621      	mov	r1, r4
 801ab00:	4628      	mov	r0, r5
 801ab02:	f7fe f819 	bl	8018b38 <__sflush_r>
 801ab06:	6922      	ldr	r2, [r4, #16]
 801ab08:	6022      	str	r2, [r4, #0]
 801ab0a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801ab0c:	6963      	ldr	r3, [r4, #20]
 801ab0e:	6a21      	ldr	r1, [r4, #32]
 801ab10:	4628      	mov	r0, r5
 801ab12:	47b0      	blx	r6
 801ab14:	2800      	cmp	r0, #0
 801ab16:	6060      	str	r0, [r4, #4]
 801ab18:	dc1d      	bgt.n	801ab56 <__srefill_r+0xfe>
 801ab1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab1e:	bf17      	itett	ne
 801ab20:	2200      	movne	r2, #0
 801ab22:	f043 0320 	orreq.w	r3, r3, #32
 801ab26:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 801ab2a:	6062      	strne	r2, [r4, #4]
 801ab2c:	81a3      	strh	r3, [r4, #12]
 801ab2e:	e7a6      	b.n	801aa7e <__srefill_r+0x26>
 801ab30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ab32:	2900      	cmp	r1, #0
 801ab34:	d0cc      	beq.n	801aad0 <__srefill_r+0x78>
 801ab36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ab3a:	4299      	cmp	r1, r3
 801ab3c:	d002      	beq.n	801ab44 <__srefill_r+0xec>
 801ab3e:	4628      	mov	r0, r5
 801ab40:	f7ff f976 	bl	8019e30 <_free_r>
 801ab44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ab46:	6063      	str	r3, [r4, #4]
 801ab48:	2000      	movs	r0, #0
 801ab4a:	6360      	str	r0, [r4, #52]	; 0x34
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d0bf      	beq.n	801aad0 <__srefill_r+0x78>
 801ab50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ab52:	6023      	str	r3, [r4, #0]
 801ab54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab56:	2000      	movs	r0, #0
 801ab58:	e7fc      	b.n	801ab54 <__srefill_r+0xfc>
 801ab5a:	bf00      	nop
 801ab5c:	0801b408 	.word	0x0801b408
 801ab60:	0801b428 	.word	0x0801b428
 801ab64:	0801b3e8 	.word	0x0801b3e8
 801ab68:	0801b348 	.word	0x0801b348
 801ab6c:	0801aa45 	.word	0x0801aa45

0801ab70 <_sbrk_r>:
 801ab70:	b538      	push	{r3, r4, r5, lr}
 801ab72:	4c06      	ldr	r4, [pc, #24]	; (801ab8c <_sbrk_r+0x1c>)
 801ab74:	2300      	movs	r3, #0
 801ab76:	4605      	mov	r5, r0
 801ab78:	4608      	mov	r0, r1
 801ab7a:	6023      	str	r3, [r4, #0]
 801ab7c:	f7f4 fe2c 	bl	800f7d8 <_sbrk>
 801ab80:	1c43      	adds	r3, r0, #1
 801ab82:	d102      	bne.n	801ab8a <_sbrk_r+0x1a>
 801ab84:	6823      	ldr	r3, [r4, #0]
 801ab86:	b103      	cbz	r3, 801ab8a <_sbrk_r+0x1a>
 801ab88:	602b      	str	r3, [r5, #0]
 801ab8a:	bd38      	pop	{r3, r4, r5, pc}
 801ab8c:	20000aa0 	.word	0x20000aa0

0801ab90 <__sccl>:
 801ab90:	b570      	push	{r4, r5, r6, lr}
 801ab92:	780b      	ldrb	r3, [r1, #0]
 801ab94:	2b5e      	cmp	r3, #94	; 0x5e
 801ab96:	bf13      	iteet	ne
 801ab98:	1c4a      	addne	r2, r1, #1
 801ab9a:	1c8a      	addeq	r2, r1, #2
 801ab9c:	784b      	ldrbeq	r3, [r1, #1]
 801ab9e:	2100      	movne	r1, #0
 801aba0:	bf08      	it	eq
 801aba2:	2101      	moveq	r1, #1
 801aba4:	1e44      	subs	r4, r0, #1
 801aba6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801abaa:	f804 1f01 	strb.w	r1, [r4, #1]!
 801abae:	42ac      	cmp	r4, r5
 801abb0:	d1fb      	bne.n	801abaa <__sccl+0x1a>
 801abb2:	b913      	cbnz	r3, 801abba <__sccl+0x2a>
 801abb4:	3a01      	subs	r2, #1
 801abb6:	4610      	mov	r0, r2
 801abb8:	bd70      	pop	{r4, r5, r6, pc}
 801abba:	f081 0401 	eor.w	r4, r1, #1
 801abbe:	54c4      	strb	r4, [r0, r3]
 801abc0:	1c51      	adds	r1, r2, #1
 801abc2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801abc6:	2d2d      	cmp	r5, #45	; 0x2d
 801abc8:	f101 36ff 	add.w	r6, r1, #4294967295
 801abcc:	460a      	mov	r2, r1
 801abce:	d006      	beq.n	801abde <__sccl+0x4e>
 801abd0:	2d5d      	cmp	r5, #93	; 0x5d
 801abd2:	d0f0      	beq.n	801abb6 <__sccl+0x26>
 801abd4:	b90d      	cbnz	r5, 801abda <__sccl+0x4a>
 801abd6:	4632      	mov	r2, r6
 801abd8:	e7ed      	b.n	801abb6 <__sccl+0x26>
 801abda:	462b      	mov	r3, r5
 801abdc:	e7ef      	b.n	801abbe <__sccl+0x2e>
 801abde:	780e      	ldrb	r6, [r1, #0]
 801abe0:	2e5d      	cmp	r6, #93	; 0x5d
 801abe2:	d0fa      	beq.n	801abda <__sccl+0x4a>
 801abe4:	42b3      	cmp	r3, r6
 801abe6:	dcf8      	bgt.n	801abda <__sccl+0x4a>
 801abe8:	3301      	adds	r3, #1
 801abea:	429e      	cmp	r6, r3
 801abec:	54c4      	strb	r4, [r0, r3]
 801abee:	dcfb      	bgt.n	801abe8 <__sccl+0x58>
 801abf0:	3102      	adds	r1, #2
 801abf2:	e7e6      	b.n	801abc2 <__sccl+0x32>

0801abf4 <__sread>:
 801abf4:	b510      	push	{r4, lr}
 801abf6:	460c      	mov	r4, r1
 801abf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abfc:	f000 fa2e 	bl	801b05c <_read_r>
 801ac00:	2800      	cmp	r0, #0
 801ac02:	bfab      	itete	ge
 801ac04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ac06:	89a3      	ldrhlt	r3, [r4, #12]
 801ac08:	181b      	addge	r3, r3, r0
 801ac0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ac0e:	bfac      	ite	ge
 801ac10:	6563      	strge	r3, [r4, #84]	; 0x54
 801ac12:	81a3      	strhlt	r3, [r4, #12]
 801ac14:	bd10      	pop	{r4, pc}

0801ac16 <__swrite>:
 801ac16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac1a:	461f      	mov	r7, r3
 801ac1c:	898b      	ldrh	r3, [r1, #12]
 801ac1e:	05db      	lsls	r3, r3, #23
 801ac20:	4605      	mov	r5, r0
 801ac22:	460c      	mov	r4, r1
 801ac24:	4616      	mov	r6, r2
 801ac26:	d505      	bpl.n	801ac34 <__swrite+0x1e>
 801ac28:	2302      	movs	r3, #2
 801ac2a:	2200      	movs	r2, #0
 801ac2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac30:	f000 f9c0 	bl	801afb4 <_lseek_r>
 801ac34:	89a3      	ldrh	r3, [r4, #12]
 801ac36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ac3e:	81a3      	strh	r3, [r4, #12]
 801ac40:	4632      	mov	r2, r6
 801ac42:	463b      	mov	r3, r7
 801ac44:	4628      	mov	r0, r5
 801ac46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac4a:	f000 b96f 	b.w	801af2c <_write_r>

0801ac4e <__sseek>:
 801ac4e:	b510      	push	{r4, lr}
 801ac50:	460c      	mov	r4, r1
 801ac52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac56:	f000 f9ad 	bl	801afb4 <_lseek_r>
 801ac5a:	1c43      	adds	r3, r0, #1
 801ac5c:	89a3      	ldrh	r3, [r4, #12]
 801ac5e:	bf15      	itete	ne
 801ac60:	6560      	strne	r0, [r4, #84]	; 0x54
 801ac62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ac66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ac6a:	81a3      	strheq	r3, [r4, #12]
 801ac6c:	bf18      	it	ne
 801ac6e:	81a3      	strhne	r3, [r4, #12]
 801ac70:	bd10      	pop	{r4, pc}

0801ac72 <__sclose>:
 801ac72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac76:	f000 b96b 	b.w	801af50 <_close_r>

0801ac7a <strncmp>:
 801ac7a:	b510      	push	{r4, lr}
 801ac7c:	b16a      	cbz	r2, 801ac9a <strncmp+0x20>
 801ac7e:	3901      	subs	r1, #1
 801ac80:	1884      	adds	r4, r0, r2
 801ac82:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ac86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ac8a:	4293      	cmp	r3, r2
 801ac8c:	d103      	bne.n	801ac96 <strncmp+0x1c>
 801ac8e:	42a0      	cmp	r0, r4
 801ac90:	d001      	beq.n	801ac96 <strncmp+0x1c>
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d1f5      	bne.n	801ac82 <strncmp+0x8>
 801ac96:	1a98      	subs	r0, r3, r2
 801ac98:	bd10      	pop	{r4, pc}
 801ac9a:	4610      	mov	r0, r2
 801ac9c:	e7fc      	b.n	801ac98 <strncmp+0x1e>

0801ac9e <_strtoul_l.isra.0>:
 801ac9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aca2:	4680      	mov	r8, r0
 801aca4:	4689      	mov	r9, r1
 801aca6:	4692      	mov	sl, r2
 801aca8:	461e      	mov	r6, r3
 801acaa:	460f      	mov	r7, r1
 801acac:	463d      	mov	r5, r7
 801acae:	9808      	ldr	r0, [sp, #32]
 801acb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801acb4:	f7fe fc0e 	bl	80194d4 <__locale_ctype_ptr_l>
 801acb8:	4420      	add	r0, r4
 801acba:	7843      	ldrb	r3, [r0, #1]
 801acbc:	f013 0308 	ands.w	r3, r3, #8
 801acc0:	d130      	bne.n	801ad24 <_strtoul_l.isra.0+0x86>
 801acc2:	2c2d      	cmp	r4, #45	; 0x2d
 801acc4:	d130      	bne.n	801ad28 <_strtoul_l.isra.0+0x8a>
 801acc6:	787c      	ldrb	r4, [r7, #1]
 801acc8:	1cbd      	adds	r5, r7, #2
 801acca:	2101      	movs	r1, #1
 801accc:	2e00      	cmp	r6, #0
 801acce:	d05c      	beq.n	801ad8a <_strtoul_l.isra.0+0xec>
 801acd0:	2e10      	cmp	r6, #16
 801acd2:	d109      	bne.n	801ace8 <_strtoul_l.isra.0+0x4a>
 801acd4:	2c30      	cmp	r4, #48	; 0x30
 801acd6:	d107      	bne.n	801ace8 <_strtoul_l.isra.0+0x4a>
 801acd8:	782b      	ldrb	r3, [r5, #0]
 801acda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801acde:	2b58      	cmp	r3, #88	; 0x58
 801ace0:	d14e      	bne.n	801ad80 <_strtoul_l.isra.0+0xe2>
 801ace2:	786c      	ldrb	r4, [r5, #1]
 801ace4:	2610      	movs	r6, #16
 801ace6:	3502      	adds	r5, #2
 801ace8:	f04f 32ff 	mov.w	r2, #4294967295
 801acec:	2300      	movs	r3, #0
 801acee:	fbb2 f2f6 	udiv	r2, r2, r6
 801acf2:	fb06 fc02 	mul.w	ip, r6, r2
 801acf6:	ea6f 0c0c 	mvn.w	ip, ip
 801acfa:	4618      	mov	r0, r3
 801acfc:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ad00:	2f09      	cmp	r7, #9
 801ad02:	d817      	bhi.n	801ad34 <_strtoul_l.isra.0+0x96>
 801ad04:	463c      	mov	r4, r7
 801ad06:	42a6      	cmp	r6, r4
 801ad08:	dd23      	ble.n	801ad52 <_strtoul_l.isra.0+0xb4>
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	db1e      	blt.n	801ad4c <_strtoul_l.isra.0+0xae>
 801ad0e:	4282      	cmp	r2, r0
 801ad10:	d31c      	bcc.n	801ad4c <_strtoul_l.isra.0+0xae>
 801ad12:	d101      	bne.n	801ad18 <_strtoul_l.isra.0+0x7a>
 801ad14:	45a4      	cmp	ip, r4
 801ad16:	db19      	blt.n	801ad4c <_strtoul_l.isra.0+0xae>
 801ad18:	fb00 4006 	mla	r0, r0, r6, r4
 801ad1c:	2301      	movs	r3, #1
 801ad1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ad22:	e7eb      	b.n	801acfc <_strtoul_l.isra.0+0x5e>
 801ad24:	462f      	mov	r7, r5
 801ad26:	e7c1      	b.n	801acac <_strtoul_l.isra.0+0xe>
 801ad28:	2c2b      	cmp	r4, #43	; 0x2b
 801ad2a:	bf04      	itt	eq
 801ad2c:	1cbd      	addeq	r5, r7, #2
 801ad2e:	787c      	ldrbeq	r4, [r7, #1]
 801ad30:	4619      	mov	r1, r3
 801ad32:	e7cb      	b.n	801accc <_strtoul_l.isra.0+0x2e>
 801ad34:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ad38:	2f19      	cmp	r7, #25
 801ad3a:	d801      	bhi.n	801ad40 <_strtoul_l.isra.0+0xa2>
 801ad3c:	3c37      	subs	r4, #55	; 0x37
 801ad3e:	e7e2      	b.n	801ad06 <_strtoul_l.isra.0+0x68>
 801ad40:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ad44:	2f19      	cmp	r7, #25
 801ad46:	d804      	bhi.n	801ad52 <_strtoul_l.isra.0+0xb4>
 801ad48:	3c57      	subs	r4, #87	; 0x57
 801ad4a:	e7dc      	b.n	801ad06 <_strtoul_l.isra.0+0x68>
 801ad4c:	f04f 33ff 	mov.w	r3, #4294967295
 801ad50:	e7e5      	b.n	801ad1e <_strtoul_l.isra.0+0x80>
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	da09      	bge.n	801ad6a <_strtoul_l.isra.0+0xcc>
 801ad56:	2322      	movs	r3, #34	; 0x22
 801ad58:	f8c8 3000 	str.w	r3, [r8]
 801ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad60:	f1ba 0f00 	cmp.w	sl, #0
 801ad64:	d107      	bne.n	801ad76 <_strtoul_l.isra.0+0xd8>
 801ad66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad6a:	b101      	cbz	r1, 801ad6e <_strtoul_l.isra.0+0xd0>
 801ad6c:	4240      	negs	r0, r0
 801ad6e:	f1ba 0f00 	cmp.w	sl, #0
 801ad72:	d0f8      	beq.n	801ad66 <_strtoul_l.isra.0+0xc8>
 801ad74:	b10b      	cbz	r3, 801ad7a <_strtoul_l.isra.0+0xdc>
 801ad76:	f105 39ff 	add.w	r9, r5, #4294967295
 801ad7a:	f8ca 9000 	str.w	r9, [sl]
 801ad7e:	e7f2      	b.n	801ad66 <_strtoul_l.isra.0+0xc8>
 801ad80:	2430      	movs	r4, #48	; 0x30
 801ad82:	2e00      	cmp	r6, #0
 801ad84:	d1b0      	bne.n	801ace8 <_strtoul_l.isra.0+0x4a>
 801ad86:	2608      	movs	r6, #8
 801ad88:	e7ae      	b.n	801ace8 <_strtoul_l.isra.0+0x4a>
 801ad8a:	2c30      	cmp	r4, #48	; 0x30
 801ad8c:	d0a4      	beq.n	801acd8 <_strtoul_l.isra.0+0x3a>
 801ad8e:	260a      	movs	r6, #10
 801ad90:	e7aa      	b.n	801ace8 <_strtoul_l.isra.0+0x4a>
	...

0801ad94 <_strtoul_r>:
 801ad94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ad96:	4c06      	ldr	r4, [pc, #24]	; (801adb0 <_strtoul_r+0x1c>)
 801ad98:	4d06      	ldr	r5, [pc, #24]	; (801adb4 <_strtoul_r+0x20>)
 801ad9a:	6824      	ldr	r4, [r4, #0]
 801ad9c:	6a24      	ldr	r4, [r4, #32]
 801ad9e:	2c00      	cmp	r4, #0
 801ada0:	bf08      	it	eq
 801ada2:	462c      	moveq	r4, r5
 801ada4:	9400      	str	r4, [sp, #0]
 801ada6:	f7ff ff7a 	bl	801ac9e <_strtoul_l.isra.0>
 801adaa:	b003      	add	sp, #12
 801adac:	bd30      	pop	{r4, r5, pc}
 801adae:	bf00      	nop
 801adb0:	2000002c 	.word	0x2000002c
 801adb4:	20000090 	.word	0x20000090

0801adb8 <__submore>:
 801adb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adbc:	460c      	mov	r4, r1
 801adbe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801adc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801adc4:	4299      	cmp	r1, r3
 801adc6:	d11d      	bne.n	801ae04 <__submore+0x4c>
 801adc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801adcc:	f7ff f87e 	bl	8019ecc <_malloc_r>
 801add0:	b918      	cbnz	r0, 801adda <__submore+0x22>
 801add2:	f04f 30ff 	mov.w	r0, #4294967295
 801add6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801adde:	63a3      	str	r3, [r4, #56]	; 0x38
 801ade0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801ade4:	6360      	str	r0, [r4, #52]	; 0x34
 801ade6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801adea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801adee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801adf2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801adf6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801adfa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801adfe:	6020      	str	r0, [r4, #0]
 801ae00:	2000      	movs	r0, #0
 801ae02:	e7e8      	b.n	801add6 <__submore+0x1e>
 801ae04:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801ae06:	0077      	lsls	r7, r6, #1
 801ae08:	463a      	mov	r2, r7
 801ae0a:	f000 f900 	bl	801b00e <_realloc_r>
 801ae0e:	4605      	mov	r5, r0
 801ae10:	2800      	cmp	r0, #0
 801ae12:	d0de      	beq.n	801add2 <__submore+0x1a>
 801ae14:	eb00 0806 	add.w	r8, r0, r6
 801ae18:	4601      	mov	r1, r0
 801ae1a:	4632      	mov	r2, r6
 801ae1c:	4640      	mov	r0, r8
 801ae1e:	f7fb f913 	bl	8016048 <memcpy>
 801ae22:	f8c4 8000 	str.w	r8, [r4]
 801ae26:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801ae2a:	e7e9      	b.n	801ae00 <__submore+0x48>

0801ae2c <_ungetc_r>:
 801ae2c:	1c4b      	adds	r3, r1, #1
 801ae2e:	b570      	push	{r4, r5, r6, lr}
 801ae30:	4606      	mov	r6, r0
 801ae32:	460d      	mov	r5, r1
 801ae34:	4614      	mov	r4, r2
 801ae36:	d103      	bne.n	801ae40 <_ungetc_r+0x14>
 801ae38:	f04f 35ff 	mov.w	r5, #4294967295
 801ae3c:	4628      	mov	r0, r5
 801ae3e:	bd70      	pop	{r4, r5, r6, pc}
 801ae40:	b118      	cbz	r0, 801ae4a <_ungetc_r+0x1e>
 801ae42:	6983      	ldr	r3, [r0, #24]
 801ae44:	b90b      	cbnz	r3, 801ae4a <_ungetc_r+0x1e>
 801ae46:	f7fd ff79 	bl	8018d3c <__sinit>
 801ae4a:	4b2e      	ldr	r3, [pc, #184]	; (801af04 <_ungetc_r+0xd8>)
 801ae4c:	429c      	cmp	r4, r3
 801ae4e:	d12c      	bne.n	801aeaa <_ungetc_r+0x7e>
 801ae50:	6874      	ldr	r4, [r6, #4]
 801ae52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae56:	f023 0320 	bic.w	r3, r3, #32
 801ae5a:	81a3      	strh	r3, [r4, #12]
 801ae5c:	b29b      	uxth	r3, r3
 801ae5e:	0759      	lsls	r1, r3, #29
 801ae60:	d413      	bmi.n	801ae8a <_ungetc_r+0x5e>
 801ae62:	06da      	lsls	r2, r3, #27
 801ae64:	d5e8      	bpl.n	801ae38 <_ungetc_r+0xc>
 801ae66:	071b      	lsls	r3, r3, #28
 801ae68:	d50b      	bpl.n	801ae82 <_ungetc_r+0x56>
 801ae6a:	4621      	mov	r1, r4
 801ae6c:	4630      	mov	r0, r6
 801ae6e:	f7fd fee9 	bl	8018c44 <_fflush_r>
 801ae72:	2800      	cmp	r0, #0
 801ae74:	d1e0      	bne.n	801ae38 <_ungetc_r+0xc>
 801ae76:	89a3      	ldrh	r3, [r4, #12]
 801ae78:	60a0      	str	r0, [r4, #8]
 801ae7a:	f023 0308 	bic.w	r3, r3, #8
 801ae7e:	81a3      	strh	r3, [r4, #12]
 801ae80:	61a0      	str	r0, [r4, #24]
 801ae82:	89a3      	ldrh	r3, [r4, #12]
 801ae84:	f043 0304 	orr.w	r3, r3, #4
 801ae88:	81a3      	strh	r3, [r4, #12]
 801ae8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ae8c:	6862      	ldr	r2, [r4, #4]
 801ae8e:	b2ed      	uxtb	r5, r5
 801ae90:	b1e3      	cbz	r3, 801aecc <_ungetc_r+0xa0>
 801ae92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ae94:	4293      	cmp	r3, r2
 801ae96:	dd12      	ble.n	801aebe <_ungetc_r+0x92>
 801ae98:	6823      	ldr	r3, [r4, #0]
 801ae9a:	1e5a      	subs	r2, r3, #1
 801ae9c:	6022      	str	r2, [r4, #0]
 801ae9e:	f803 5c01 	strb.w	r5, [r3, #-1]
 801aea2:	6863      	ldr	r3, [r4, #4]
 801aea4:	3301      	adds	r3, #1
 801aea6:	6063      	str	r3, [r4, #4]
 801aea8:	e7c8      	b.n	801ae3c <_ungetc_r+0x10>
 801aeaa:	4b17      	ldr	r3, [pc, #92]	; (801af08 <_ungetc_r+0xdc>)
 801aeac:	429c      	cmp	r4, r3
 801aeae:	d101      	bne.n	801aeb4 <_ungetc_r+0x88>
 801aeb0:	68b4      	ldr	r4, [r6, #8]
 801aeb2:	e7ce      	b.n	801ae52 <_ungetc_r+0x26>
 801aeb4:	4b15      	ldr	r3, [pc, #84]	; (801af0c <_ungetc_r+0xe0>)
 801aeb6:	429c      	cmp	r4, r3
 801aeb8:	bf08      	it	eq
 801aeba:	68f4      	ldreq	r4, [r6, #12]
 801aebc:	e7c9      	b.n	801ae52 <_ungetc_r+0x26>
 801aebe:	4621      	mov	r1, r4
 801aec0:	4630      	mov	r0, r6
 801aec2:	f7ff ff79 	bl	801adb8 <__submore>
 801aec6:	2800      	cmp	r0, #0
 801aec8:	d0e6      	beq.n	801ae98 <_ungetc_r+0x6c>
 801aeca:	e7b5      	b.n	801ae38 <_ungetc_r+0xc>
 801aecc:	6921      	ldr	r1, [r4, #16]
 801aece:	6823      	ldr	r3, [r4, #0]
 801aed0:	b151      	cbz	r1, 801aee8 <_ungetc_r+0xbc>
 801aed2:	4299      	cmp	r1, r3
 801aed4:	d208      	bcs.n	801aee8 <_ungetc_r+0xbc>
 801aed6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801aeda:	42a9      	cmp	r1, r5
 801aedc:	d104      	bne.n	801aee8 <_ungetc_r+0xbc>
 801aede:	3b01      	subs	r3, #1
 801aee0:	3201      	adds	r2, #1
 801aee2:	6023      	str	r3, [r4, #0]
 801aee4:	6062      	str	r2, [r4, #4]
 801aee6:	e7a9      	b.n	801ae3c <_ungetc_r+0x10>
 801aee8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801aeec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aef0:	6363      	str	r3, [r4, #52]	; 0x34
 801aef2:	2303      	movs	r3, #3
 801aef4:	63a3      	str	r3, [r4, #56]	; 0x38
 801aef6:	4623      	mov	r3, r4
 801aef8:	f803 5f46 	strb.w	r5, [r3, #70]!
 801aefc:	6023      	str	r3, [r4, #0]
 801aefe:	2301      	movs	r3, #1
 801af00:	e7d1      	b.n	801aea6 <_ungetc_r+0x7a>
 801af02:	bf00      	nop
 801af04:	0801b408 	.word	0x0801b408
 801af08:	0801b428 	.word	0x0801b428
 801af0c:	0801b3e8 	.word	0x0801b3e8

0801af10 <__ascii_wctomb>:
 801af10:	b149      	cbz	r1, 801af26 <__ascii_wctomb+0x16>
 801af12:	2aff      	cmp	r2, #255	; 0xff
 801af14:	bf85      	ittet	hi
 801af16:	238a      	movhi	r3, #138	; 0x8a
 801af18:	6003      	strhi	r3, [r0, #0]
 801af1a:	700a      	strbls	r2, [r1, #0]
 801af1c:	f04f 30ff 	movhi.w	r0, #4294967295
 801af20:	bf98      	it	ls
 801af22:	2001      	movls	r0, #1
 801af24:	4770      	bx	lr
 801af26:	4608      	mov	r0, r1
 801af28:	4770      	bx	lr
	...

0801af2c <_write_r>:
 801af2c:	b538      	push	{r3, r4, r5, lr}
 801af2e:	4c07      	ldr	r4, [pc, #28]	; (801af4c <_write_r+0x20>)
 801af30:	4605      	mov	r5, r0
 801af32:	4608      	mov	r0, r1
 801af34:	4611      	mov	r1, r2
 801af36:	2200      	movs	r2, #0
 801af38:	6022      	str	r2, [r4, #0]
 801af3a:	461a      	mov	r2, r3
 801af3c:	f7f4 fbfb 	bl	800f736 <_write>
 801af40:	1c43      	adds	r3, r0, #1
 801af42:	d102      	bne.n	801af4a <_write_r+0x1e>
 801af44:	6823      	ldr	r3, [r4, #0]
 801af46:	b103      	cbz	r3, 801af4a <_write_r+0x1e>
 801af48:	602b      	str	r3, [r5, #0]
 801af4a:	bd38      	pop	{r3, r4, r5, pc}
 801af4c:	20000aa0 	.word	0x20000aa0

0801af50 <_close_r>:
 801af50:	b538      	push	{r3, r4, r5, lr}
 801af52:	4c06      	ldr	r4, [pc, #24]	; (801af6c <_close_r+0x1c>)
 801af54:	2300      	movs	r3, #0
 801af56:	4605      	mov	r5, r0
 801af58:	4608      	mov	r0, r1
 801af5a:	6023      	str	r3, [r4, #0]
 801af5c:	f7f4 fc07 	bl	800f76e <_close>
 801af60:	1c43      	adds	r3, r0, #1
 801af62:	d102      	bne.n	801af6a <_close_r+0x1a>
 801af64:	6823      	ldr	r3, [r4, #0]
 801af66:	b103      	cbz	r3, 801af6a <_close_r+0x1a>
 801af68:	602b      	str	r3, [r5, #0]
 801af6a:	bd38      	pop	{r3, r4, r5, pc}
 801af6c:	20000aa0 	.word	0x20000aa0

0801af70 <_fstat_r>:
 801af70:	b538      	push	{r3, r4, r5, lr}
 801af72:	4c07      	ldr	r4, [pc, #28]	; (801af90 <_fstat_r+0x20>)
 801af74:	2300      	movs	r3, #0
 801af76:	4605      	mov	r5, r0
 801af78:	4608      	mov	r0, r1
 801af7a:	4611      	mov	r1, r2
 801af7c:	6023      	str	r3, [r4, #0]
 801af7e:	f7f4 fc02 	bl	800f786 <_fstat>
 801af82:	1c43      	adds	r3, r0, #1
 801af84:	d102      	bne.n	801af8c <_fstat_r+0x1c>
 801af86:	6823      	ldr	r3, [r4, #0]
 801af88:	b103      	cbz	r3, 801af8c <_fstat_r+0x1c>
 801af8a:	602b      	str	r3, [r5, #0]
 801af8c:	bd38      	pop	{r3, r4, r5, pc}
 801af8e:	bf00      	nop
 801af90:	20000aa0 	.word	0x20000aa0

0801af94 <_isatty_r>:
 801af94:	b538      	push	{r3, r4, r5, lr}
 801af96:	4c06      	ldr	r4, [pc, #24]	; (801afb0 <_isatty_r+0x1c>)
 801af98:	2300      	movs	r3, #0
 801af9a:	4605      	mov	r5, r0
 801af9c:	4608      	mov	r0, r1
 801af9e:	6023      	str	r3, [r4, #0]
 801afa0:	f7f4 fc01 	bl	800f7a6 <_isatty>
 801afa4:	1c43      	adds	r3, r0, #1
 801afa6:	d102      	bne.n	801afae <_isatty_r+0x1a>
 801afa8:	6823      	ldr	r3, [r4, #0]
 801afaa:	b103      	cbz	r3, 801afae <_isatty_r+0x1a>
 801afac:	602b      	str	r3, [r5, #0]
 801afae:	bd38      	pop	{r3, r4, r5, pc}
 801afb0:	20000aa0 	.word	0x20000aa0

0801afb4 <_lseek_r>:
 801afb4:	b538      	push	{r3, r4, r5, lr}
 801afb6:	4c07      	ldr	r4, [pc, #28]	; (801afd4 <_lseek_r+0x20>)
 801afb8:	4605      	mov	r5, r0
 801afba:	4608      	mov	r0, r1
 801afbc:	4611      	mov	r1, r2
 801afbe:	2200      	movs	r2, #0
 801afc0:	6022      	str	r2, [r4, #0]
 801afc2:	461a      	mov	r2, r3
 801afc4:	f7f4 fbfa 	bl	800f7bc <_lseek>
 801afc8:	1c43      	adds	r3, r0, #1
 801afca:	d102      	bne.n	801afd2 <_lseek_r+0x1e>
 801afcc:	6823      	ldr	r3, [r4, #0]
 801afce:	b103      	cbz	r3, 801afd2 <_lseek_r+0x1e>
 801afd0:	602b      	str	r3, [r5, #0]
 801afd2:	bd38      	pop	{r3, r4, r5, pc}
 801afd4:	20000aa0 	.word	0x20000aa0

0801afd8 <memmove>:
 801afd8:	4288      	cmp	r0, r1
 801afda:	b510      	push	{r4, lr}
 801afdc:	eb01 0302 	add.w	r3, r1, r2
 801afe0:	d807      	bhi.n	801aff2 <memmove+0x1a>
 801afe2:	1e42      	subs	r2, r0, #1
 801afe4:	4299      	cmp	r1, r3
 801afe6:	d00a      	beq.n	801affe <memmove+0x26>
 801afe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801afec:	f802 4f01 	strb.w	r4, [r2, #1]!
 801aff0:	e7f8      	b.n	801afe4 <memmove+0xc>
 801aff2:	4283      	cmp	r3, r0
 801aff4:	d9f5      	bls.n	801afe2 <memmove+0xa>
 801aff6:	1881      	adds	r1, r0, r2
 801aff8:	1ad2      	subs	r2, r2, r3
 801affa:	42d3      	cmn	r3, r2
 801affc:	d100      	bne.n	801b000 <memmove+0x28>
 801affe:	bd10      	pop	{r4, pc}
 801b000:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b004:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801b008:	e7f7      	b.n	801affa <memmove+0x22>

0801b00a <__malloc_lock>:
 801b00a:	4770      	bx	lr

0801b00c <__malloc_unlock>:
 801b00c:	4770      	bx	lr

0801b00e <_realloc_r>:
 801b00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b010:	4607      	mov	r7, r0
 801b012:	4614      	mov	r4, r2
 801b014:	460e      	mov	r6, r1
 801b016:	b921      	cbnz	r1, 801b022 <_realloc_r+0x14>
 801b018:	4611      	mov	r1, r2
 801b01a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b01e:	f7fe bf55 	b.w	8019ecc <_malloc_r>
 801b022:	b922      	cbnz	r2, 801b02e <_realloc_r+0x20>
 801b024:	f7fe ff04 	bl	8019e30 <_free_r>
 801b028:	4625      	mov	r5, r4
 801b02a:	4628      	mov	r0, r5
 801b02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b02e:	f000 f827 	bl	801b080 <_malloc_usable_size_r>
 801b032:	42a0      	cmp	r0, r4
 801b034:	d20f      	bcs.n	801b056 <_realloc_r+0x48>
 801b036:	4621      	mov	r1, r4
 801b038:	4638      	mov	r0, r7
 801b03a:	f7fe ff47 	bl	8019ecc <_malloc_r>
 801b03e:	4605      	mov	r5, r0
 801b040:	2800      	cmp	r0, #0
 801b042:	d0f2      	beq.n	801b02a <_realloc_r+0x1c>
 801b044:	4631      	mov	r1, r6
 801b046:	4622      	mov	r2, r4
 801b048:	f7fa fffe 	bl	8016048 <memcpy>
 801b04c:	4631      	mov	r1, r6
 801b04e:	4638      	mov	r0, r7
 801b050:	f7fe feee 	bl	8019e30 <_free_r>
 801b054:	e7e9      	b.n	801b02a <_realloc_r+0x1c>
 801b056:	4635      	mov	r5, r6
 801b058:	e7e7      	b.n	801b02a <_realloc_r+0x1c>
	...

0801b05c <_read_r>:
 801b05c:	b538      	push	{r3, r4, r5, lr}
 801b05e:	4c07      	ldr	r4, [pc, #28]	; (801b07c <_read_r+0x20>)
 801b060:	4605      	mov	r5, r0
 801b062:	4608      	mov	r0, r1
 801b064:	4611      	mov	r1, r2
 801b066:	2200      	movs	r2, #0
 801b068:	6022      	str	r2, [r4, #0]
 801b06a:	461a      	mov	r2, r3
 801b06c:	f7f4 fb46 	bl	800f6fc <_read>
 801b070:	1c43      	adds	r3, r0, #1
 801b072:	d102      	bne.n	801b07a <_read_r+0x1e>
 801b074:	6823      	ldr	r3, [r4, #0]
 801b076:	b103      	cbz	r3, 801b07a <_read_r+0x1e>
 801b078:	602b      	str	r3, [r5, #0]
 801b07a:	bd38      	pop	{r3, r4, r5, pc}
 801b07c:	20000aa0 	.word	0x20000aa0

0801b080 <_malloc_usable_size_r>:
 801b080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b084:	1f18      	subs	r0, r3, #4
 801b086:	2b00      	cmp	r3, #0
 801b088:	bfbc      	itt	lt
 801b08a:	580b      	ldrlt	r3, [r1, r0]
 801b08c:	18c0      	addlt	r0, r0, r3
 801b08e:	4770      	bx	lr

0801b090 <_init>:
 801b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b092:	bf00      	nop
 801b094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b096:	bc08      	pop	{r3}
 801b098:	469e      	mov	lr, r3
 801b09a:	4770      	bx	lr

0801b09c <_fini>:
 801b09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b09e:	bf00      	nop
 801b0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b0a2:	bc08      	pop	{r3}
 801b0a4:	469e      	mov	lr, r3
 801b0a6:	4770      	bx	lr
